
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000093d8  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000248  20000000  000093d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020248  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020248  2**0
                  CONTENTS
  4 .bss          00003d30  20000250  00009630  00020250  2**4
                  ALLOC
  5 .stack        00010000  20003f80  0000d360  00020250  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020276  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005cf08  00000000  00000000  000202cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008a7f  00000000  00000000  0007d1d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00018545  00000000  00000000  00085c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001790  00000000  00000000  0009e19b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001e90  00000000  00000000  0009f92b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039d9c  00000000  00000000  000a17bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002ab34  00000000  00000000  000db557  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105752  00000000  00000000  0010608b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000041f0  00000000  00000000  0020b7e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 3f 01 20 ed 33 00 00 85 34 00 00 85 34 00 00     .?. .3...4...4..
      10:	85 34 00 00 85 34 00 00 85 34 00 00 00 00 00 00     .4...4...4......
	...
      2c:	c1 4a 00 00 85 34 00 00 00 00 00 00 61 4b 00 00     .J...4......aK..
      3c:	c5 4b 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .K...4...4...4..
      4c:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
      5c:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
      6c:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
      7c:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
      8c:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
      9c:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
      ac:	85 34 00 00 85 34 00 00 39 40 00 00 4d 40 00 00     .4...4..9@..M@..
      bc:	1d 3f 00 00 29 3f 00 00 35 3f 00 00 41 3f 00 00     .?..)?..5?..A?..
      cc:	4d 3f 00 00 85 34 00 00 85 34 00 00 85 34 00 00     M?...4...4...4..
      dc:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
      ec:	85 34 00 00 00 00 00 00 49 41 00 00 85 34 00 00     .4......IA...4..
      fc:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
     10c:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
     11c:	85 34 00 00 85 34 00 00 85 34 00 00 fd 26 00 00     .4...4...4...&..
     12c:	09 27 00 00 15 27 00 00 85 34 00 00 85 34 00 00     .'...'...4...4..
     13c:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
     14c:	85 34 00 00 3d 32 00 00 85 34 00 00 00 00 00 00     .4..=2...4......
	...
     180:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
     190:	00 00 00 00 65 44 00 00 85 34 00 00 85 34 00 00     ....eD...4...4..
     1a0:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
     1b0:	79 44 00 00 85 34 00 00 85 34 00 00 85 34 00 00     yD...4...4...4..
     1c0:	85 34 00 00 8d 44 00 00 85 34 00 00 85 34 00 00     .4...D...4...4..
     1d0:	85 34 00 00 a1 44 00 00 85 34 00 00 85 34 00 00     .4...D...4...4..
     1e0:	b5 44 00 00 85 34 00 00 85 34 00 00 11 45 00 00     .D...4...4...E..
     1f0:	25 45 00 00 39 45 00 00 4d 45 00 00 61 45 00 00     %E..9E..ME..aE..
     200:	75 45 00 00 00 00 00 00 00 00 00 00 85 34 00 00     uE...........4..
     210:	85 34 00 00 85 34 00 00 69 05 00 00 7d 05 00 00     .4...4..i...}...
     220:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
     230:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
     240:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
     250:	85 34 00 00 85 34 00 00 85 34 00 00 85 34 00 00     .4...4...4...4..
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000250 	.word	0x20000250
     280:	00000000 	.word	0x00000000
     284:	000093d8 	.word	0x000093d8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000093d8 	.word	0x000093d8
     2c4:	20000254 	.word	0x20000254
     2c8:	000093d8 	.word	0x000093d8
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Application/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
     2d2:	b088      	sub	sp, #32
     2d4:	4606      	mov	r6, r0
	uint8_t dbgBuffer[30];
	memset(dbgBuffer,'0',30);
     2d6:	221e      	movs	r2, #30
     2d8:	2130      	movs	r1, #48	; 0x30
     2da:	4668      	mov	r0, sp
     2dc:	4b0d      	ldr	r3, [pc, #52]	; (314 <vApplicationStackOverflowHook+0x44>)
     2de:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e0:	4d0d      	ldr	r5, [pc, #52]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e2:	4628      	mov	r0, r5
     2e4:	4c0d      	ldr	r4, [pc, #52]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2e6:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2e8:	480d      	ldr	r0, [pc, #52]	; (320 <vApplicationStackOverflowHook+0x50>)
     2ea:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ec:	4628      	mov	r0, r5
     2ee:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f0:	480c      	ldr	r0, [pc, #48]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f2:	47a0      	blx	r4

	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2f4:	4632      	mov	r2, r6
     2f6:	490c      	ldr	r1, [pc, #48]	; (328 <vApplicationStackOverflowHook+0x58>)
     2f8:	4668      	mov	r0, sp
     2fa:	4b0c      	ldr	r3, [pc, #48]	; (32c <vApplicationStackOverflowHook+0x5c>)
     2fc:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     2fe:	4668      	mov	r0, sp
     300:	4b0b      	ldr	r3, [pc, #44]	; (330 <vApplicationStackOverflowHook+0x60>)
     302:	4798      	blx	r3
     304:	b281      	uxth	r1, r0
     306:	4668      	mov	r0, sp
     308:	4b0a      	ldr	r3, [pc, #40]	; (334 <vApplicationStackOverflowHook+0x64>)
     30a:	4798      	blx	r3

	requestWatchDogForcedReset();
     30c:	4b0a      	ldr	r3, [pc, #40]	; (338 <vApplicationStackOverflowHook+0x68>)
     30e:	4798      	blx	r3
}
     310:	b008      	add	sp, #32
     312:	bd70      	pop	{r4, r5, r6, pc}
     314:	00006a03 	.word	0x00006a03
     318:	00007460 	.word	0x00007460
     31c:	0000313d 	.word	0x0000313d
     320:	0000749c 	.word	0x0000749c
     324:	00008e50 	.word	0x00008e50
     328:	000074d8 	.word	0x000074d8
     32c:	00006b8d 	.word	0x00006b8d
     330:	00006be5 	.word	0x00006be5
     334:	000030f9 	.word	0x000030f9
     338:	00003375 	.word	0x00003375

0000033c <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
     33c:	b538      	push	{r3, r4, r5, lr}
	DEBUG_PRINT("**********************************************************");
     33e:	4d05      	ldr	r5, [pc, #20]	; (354 <vApplicationMallocFailedHook+0x18>)
     340:	4628      	mov	r0, r5
     342:	4c05      	ldr	r4, [pc, #20]	; (358 <vApplicationMallocFailedHook+0x1c>)
     344:	47a0      	blx	r4
	DEBUG_PRINT("***************MALLOC FAILURE DETECTED********************");
     346:	4805      	ldr	r0, [pc, #20]	; (35c <vApplicationMallocFailedHook+0x20>)
     348:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     34a:	4628      	mov	r0, r5
     34c:	47a0      	blx	r4
	requestWatchDogForcedReset();
     34e:	4b04      	ldr	r3, [pc, #16]	; (360 <vApplicationMallocFailedHook+0x24>)
     350:	4798      	blx	r3
     352:	bd38      	pop	{r3, r4, r5, pc}
     354:	00007460 	.word	0x00007460
     358:	0000313d 	.word	0x0000313d
     35c:	000074ec 	.word	0x000074ec
     360:	00003375 	.word	0x00003375

00000364 <intializeSensorSelectLines>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void intializeSensorSelectLines(void)
{
     364:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     366:	4b59      	ldr	r3, [pc, #356]	; (4cc <intializeSensorSelectLines+0x168>)
     368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     36c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     370:	4a57      	ldr	r2, [pc, #348]	; (4d0 <intializeSensorSelectLines+0x16c>)
     372:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     376:	4a57      	ldr	r2, [pc, #348]	; (4d4 <intializeSensorSelectLines+0x170>)
     378:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     37c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     380:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
     384:	f040 0004 	orr.w	r0, r0, #4
     388:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     38c:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     390:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     394:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     398:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     39c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     3a0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a4:	484c      	ldr	r0, [pc, #304]	; (4d8 <intializeSensorSelectLines+0x174>)
     3a6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     3aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3b2:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
     3b6:	f040 0004 	orr.w	r0, r0, #4
     3ba:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3be:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c2:	f893 10cc 	ldrb.w	r1, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     3c6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ca:	f883 10cc 	strb.w	r1, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
     3d2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d6:	4e41      	ldr	r6, [pc, #260]	; (4dc <intializeSensorSelectLines+0x178>)
     3d8:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     3dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3e0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3e4:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     3e8:	f041 0104 	orr.w	r1, r1, #4
     3ec:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3f0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f4:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fc:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     400:	f44f 6180 	mov.w	r1, #1024	; 0x400
     404:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     408:	4d35      	ldr	r5, [pc, #212]	; (4e0 <intializeSensorSelectLines+0x17c>)
     40a:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     40e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     412:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     416:	f893 40ca 	ldrb.w	r4, [r3, #202]	; 0xca
     41a:	f044 0404 	orr.w	r4, r4, #4
     41e:	f883 40ca 	strb.w	r4, [r3, #202]	; 0xca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     422:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     426:	f893 40ca 	ldrb.w	r4, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     42a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     42e:	f883 40ca 	strb.w	r4, [r3, #202]	; 0xca
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     432:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     434:	629e      	str	r6, [r3, #40]	; 0x28
     436:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     438:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     43a:	f893 404b 	ldrb.w	r4, [r3, #75]	; 0x4b
     43e:	f044 0404 	orr.w	r4, r4, #4
     442:	f883 404b 	strb.w	r4, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     446:	6198      	str	r0, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     448:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     44c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     450:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     454:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     456:	629d      	str	r5, [r3, #40]	; 0x28
     458:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     45c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
     460:	f040 0004 	orr.w	r0, r0, #4
     464:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     468:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     46e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     472:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     476:	f44f 7100 	mov.w	r1, #512	; 0x200
     47a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47c:	4819      	ldr	r0, [pc, #100]	; (4e4 <intializeSensorSelectLines+0x180>)
     47e:	6298      	str	r0, [r3, #40]	; 0x28
     480:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     482:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     484:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
     488:	f040 0004 	orr.w	r0, r0, #4
     48c:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     490:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     492:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     496:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49a:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     49e:	f44f 7180 	mov.w	r1, #256	; 0x100
     4a2:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a4:	4810      	ldr	r0, [pc, #64]	; (4e8 <intializeSensorSelectLines+0x184>)
     4a6:	6298      	str	r0, [r3, #40]	; 0x28
     4a8:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4aa:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4ac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     4b0:	f042 0204 	orr.w	r2, r2, #4
     4b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4b8:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ba:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     4be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	gpio_set_pin_function(SELECT_6, GPIO_PIN_FUNCTION_OFF);		
	
	gpio_set_pin_direction(SELECT_7, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(SELECT_7,GPIO_PULL_UP);
	gpio_set_pin_function(SELECT_7, GPIO_PIN_FUNCTION_OFF);	
}
     4c6:	bc70      	pop	{r4, r5, r6}
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop
     4cc:	41008000 	.word	0x41008000
     4d0:	40022000 	.word	0x40022000
     4d4:	c0020000 	.word	0xc0020000
     4d8:	40021000 	.word	0x40021000
     4dc:	40020800 	.word	0x40020800
     4e0:	40020400 	.word	0x40020400
     4e4:	40020200 	.word	0x40020200
     4e8:	40020100 	.word	0x40020100

000004ec <sensorAdcInitialize>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================================*/
void sensorAdcInitialize(void)
{
     4ec:	b508      	push	{r3, lr}
	ADC_0_init();
     4ee:	4b01      	ldr	r3, [pc, #4]	; (4f4 <sensorAdcInitialize+0x8>)
     4f0:	4798      	blx	r3
     4f2:	bd08      	pop	{r3, pc}
     4f4:	00003631 	.word	0x00003631

000004f8 <sensorAdcReadChannel>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================================*/
int32_t sensorAdcReadChannel(const uint8_t channel, uint16_t* result,const uint16_t length)
{
     4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4fc:	b083      	sub	sp, #12
     4fe:	4604      	mov	r4, r0
     500:	460f      	mov	r7, r1
     502:	4690      	mov	r8, r2
	int32_t bytesRead = 0;
	uint32_t voltageInMv = 0;
	uint8_t buffer[2] = {0};
     504:	2300      	movs	r3, #0
     506:	ae02      	add	r6, sp, #8
     508:	f826 3d04 	strh.w	r3, [r6, #-4]!
	*result = 0;
     50c:	800b      	strh	r3, [r1, #0]
	double_t voltageCalculated = 0;
		
	const TickType_t xAdcConvDelayMs = pdMS_TO_TICKS(10UL);

    adc_sync_enable_channel(&ADC_0, channel);
     50e:	4d11      	ldr	r5, [pc, #68]	; (554 <sensorAdcReadChannel+0x5c>)
     510:	4601      	mov	r1, r0
     512:	4628      	mov	r0, r5
     514:	4b10      	ldr	r3, [pc, #64]	; (558 <sensorAdcReadChannel+0x60>)
     516:	4798      	blx	r3
	adc_sync_set_inputs(&ADC_0, channel, 0x19, channel);
     518:	4623      	mov	r3, r4
     51a:	2219      	movs	r2, #25
     51c:	4621      	mov	r1, r4
     51e:	4628      	mov	r0, r5
     520:	f8df 9040 	ldr.w	r9, [pc, #64]	; 564 <sensorAdcReadChannel+0x6c>
     524:	47c8      	blx	r9
	bytesRead = adc_sync_read_channel(&ADC_0, channel, &buffer[0], length);
     526:	4643      	mov	r3, r8
     528:	4632      	mov	r2, r6
     52a:	4621      	mov	r1, r4
     52c:	4628      	mov	r0, r5
     52e:	4e0b      	ldr	r6, [pc, #44]	; (55c <sensorAdcReadChannel+0x64>)
     530:	47b0      	blx	r6
     532:	4606      	mov	r6, r0
	adc_sync_disable_channel(&ADC_0, channel);
     534:	4621      	mov	r1, r4
     536:	4628      	mov	r0, r5
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <sensorAdcReadChannel+0x68>)
     53a:	4798      	blx	r3

	*result = ((buffer[1] << 8) | (buffer[0] & 0x00FF));
     53c:	f89d 2005 	ldrb.w	r2, [sp, #5]
     540:	f89d 3004 	ldrb.w	r3, [sp, #4]
     544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     548:	803b      	strh	r3, [r7, #0]
	
	voltageCalculated = (*result) * (VOLT_SCALE_ADC0);

	return bytesRead;
}
     54a:	4630      	mov	r0, r6
     54c:	b003      	add	sp, #12
     54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     552:	bf00      	nop
     554:	20003e58 	.word	0x20003e58
     558:	00003829 	.word	0x00003829
     55c:	00003881 	.word	0x00003881
     560:	00003855 	.word	0x00003855
     564:	00003921 	.word	0x00003921

00000568 <ADC0_0_Handler>:
/*
 * Not using ADC interrupts now.
 * These are dummy handlers for ADC interrupts.
 */
void ADC0_0_Handler(void)
{
     568:	b508      	push	{r3, lr}
	DEBUG_PRINT("IN ADC0_0 handler");
     56a:	4802      	ldr	r0, [pc, #8]	; (574 <ADC0_0_Handler+0xc>)
     56c:	4b02      	ldr	r3, [pc, #8]	; (578 <ADC0_0_Handler+0x10>)
     56e:	4798      	blx	r3
     570:	bd08      	pop	{r3, pc}
     572:	bf00      	nop
     574:	00007528 	.word	0x00007528
     578:	0000313d 	.word	0x0000313d

0000057c <ADC0_1_Handler>:
}

void ADC0_1_Handler(void)
{
     57c:	b508      	push	{r3, lr}
	DEBUG_PRINT("IN ADC0_1 handler");
     57e:	4802      	ldr	r0, [pc, #8]	; (588 <ADC0_1_Handler+0xc>)
     580:	4b02      	ldr	r3, [pc, #8]	; (58c <ADC0_1_Handler+0x10>)
     582:	4798      	blx	r3
     584:	bd08      	pop	{r3, pc}
     586:	bf00      	nop
     588:	0000753c 	.word	0x0000753c
     58c:	0000313d 	.word	0x0000313d

00000590 <validateCommonCommandResponse>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
static bool validateCommonCommandResponse(uint8_t* response)
{
     590:	b508      	push	{r3, lr}
    bool status = false;

    if(0==memcmp(response,"OK",2))
     592:	2202      	movs	r2, #2
     594:	4903      	ldr	r1, [pc, #12]	; (5a4 <validateCommonCommandResponse+0x14>)
     596:	4b04      	ldr	r3, [pc, #16]	; (5a8 <validateCommonCommandResponse+0x18>)
     598:	4798      	blx	r3
    {
        status = false;
    }

    return status;
}
     59a:	fab0 f080 	clz	r0, r0
     59e:	0940      	lsrs	r0, r0, #5
     5a0:	bd08      	pop	{r3, pc}
     5a2:	bf00      	nop
     5a4:	00007550 	.word	0x00007550
     5a8:	0000699b 	.word	0x0000699b

000005ac <FotaAppTask>:
{
     5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5b0:	b082      	sub	sp, #8
    FotaMainState = SET_APN_TO_C0NNECT_WITH_AIRVANTAGE;
     5b2:	4b95      	ldr	r3, [pc, #596]	; (808 <FotaAppTask+0x25c>)
     5b4:	2200      	movs	r2, #0
     5b6:	701a      	strb	r2, [r3, #0]
    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     5b8:	705a      	strb	r2, [r3, #1]
    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     5ba:	709a      	strb	r2, [r3, #2]
    bFotaVerificationIsDone = false;
     5bc:	70da      	strb	r2, [r3, #3]
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
     5be:	4c93      	ldr	r4, [pc, #588]	; (80c <FotaAppTask+0x260>)
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
bool isFotaVerificationDone(void)
{
    return bFotaVerificationIsDone;
     5c0:	461d      	mov	r5, r3
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     5c2:	1d1f      	adds	r7, r3, #4
     5c4:	e315      	b.n	bf2 <FotaAppTask+0x646>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     5c6:	786b      	ldrb	r3, [r5, #1]
     5c8:	b32b      	cbz	r3, 616 <FotaAppTask+0x6a>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     5ca:	2b01      	cmp	r3, #1
     5cc:	f040 830b 	bne.w	be6 <FotaAppTask+0x63a>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     5d0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     5d4:	4639      	mov	r1, r7
     5d6:	4b8e      	ldr	r3, [pc, #568]	; (810 <FotaAppTask+0x264>)
     5d8:	6818      	ldr	r0, [r3, #0]
     5da:	4b8e      	ldr	r3, [pc, #568]	; (814 <FotaAppTask+0x268>)
     5dc:	4798      	blx	r3
     5de:	2801      	cmp	r0, #1
     5e0:	f040 8301 	bne.w	be6 <FotaAppTask+0x63a>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSS_SET_APN)
     5e4:	792b      	ldrb	r3, [r5, #4]
     5e6:	2b1c      	cmp	r3, #28
     5e8:	d15c      	bne.n	6a4 <FotaAppTask+0xf8>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     5ea:	68a8      	ldr	r0, [r5, #8]
     5ec:	4b8a      	ldr	r3, [pc, #552]	; (818 <FotaAppTask+0x26c>)
     5ee:	4798      	blx	r3
     5f0:	2800      	cmp	r0, #0
     5f2:	d04f      	beq.n	694 <FotaAppTask+0xe8>
                            DEBUG_PRINT("FOTA : Set the APN for connecting to Air Vantage");
     5f4:	4889      	ldr	r0, [pc, #548]	; (81c <FotaAppTask+0x270>)
     5f6:	4e8a      	ldr	r6, [pc, #552]	; (820 <FotaAppTask+0x274>)
     5f8:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     5fa:	88e9      	ldrh	r1, [r5, #6]
     5fc:	68a8      	ldr	r0, [r5, #8]
     5fe:	4b89      	ldr	r3, [pc, #548]	; (824 <FotaAppTask+0x278>)
     600:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     602:	4889      	ldr	r0, [pc, #548]	; (828 <FotaAppTask+0x27c>)
     604:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     606:	2300      	movs	r3, #0
     608:	706b      	strb	r3, [r5, #1]
                            FotaMainState = ACTIVATE_DEVICE_SERVICE_INDICATIONS;
     60a:	2301      	movs	r3, #1
     60c:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     60e:	68a8      	ldr	r0, [r5, #8]
     610:	4b86      	ldr	r3, [pc, #536]	; (82c <FotaAppTask+0x280>)
     612:	4798      	blx	r3
     614:	e2e7      	b.n	be6 <FotaAppTask+0x63a>
                vTaskDelay(startupDelayMs);
     616:	f241 7070 	movw	r0, #6000	; 0x1770
     61a:	4b85      	ldr	r3, [pc, #532]	; (830 <FotaAppTask+0x284>)
     61c:	4798      	blx	r3
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     61e:	4b85      	ldr	r3, [pc, #532]	; (834 <FotaAppTask+0x288>)
     620:	6818      	ldr	r0, [r3, #0]
     622:	4b85      	ldr	r3, [pc, #532]	; (838 <FotaAppTask+0x28c>)
     624:	4798      	blx	r3
     626:	2800      	cmp	r0, #0
     628:	d130      	bne.n	68c <FotaAppTask+0xe0>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     62a:	2100      	movs	r1, #0
     62c:	4b83      	ldr	r3, [pc, #524]	; (83c <FotaAppTask+0x290>)
     62e:	6818      	ldr	r0, [r3, #0]
     630:	4b83      	ldr	r3, [pc, #524]	; (840 <FotaAppTask+0x294>)
     632:	4798      	blx	r3
     634:	2801      	cmp	r0, #1
     636:	d003      	beq.n	640 <FotaAppTask+0x94>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     638:	4882      	ldr	r0, [pc, #520]	; (844 <FotaAppTask+0x298>)
     63a:	4b79      	ldr	r3, [pc, #484]	; (820 <FotaAppTask+0x274>)
     63c:	4798      	blx	r3
     63e:	e2d2      	b.n	be6 <FotaAppTask+0x63a>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     640:	2305      	movs	r3, #5
     642:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_WDSS_SET_APN;
     646:	231c      	movs	r3, #28
     648:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     64c:	2300      	movs	r3, #0
     64e:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     650:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     654:	4669      	mov	r1, sp
     656:	4877      	ldr	r0, [pc, #476]	; (834 <FotaAppTask+0x288>)
     658:	6800      	ldr	r0, [r0, #0]
     65a:	4e7b      	ldr	r6, [pc, #492]	; (848 <FotaAppTask+0x29c>)
     65c:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     65e:	2801      	cmp	r0, #1
     660:	d007      	beq.n	672 <FotaAppTask+0xc6>
                            DEBUG_PRINT("Failed to sent the set APN request to Tx Task");
     662:	487a      	ldr	r0, [pc, #488]	; (84c <FotaAppTask+0x2a0>)
     664:	4b6e      	ldr	r3, [pc, #440]	; (820 <FotaAppTask+0x274>)
     666:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     66c:	4b70      	ldr	r3, [pc, #448]	; (830 <FotaAppTask+0x284>)
     66e:	4798      	blx	r3
     670:	e2b9      	b.n	be6 <FotaAppTask+0x63a>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     672:	2300      	movs	r3, #0
     674:	461a      	mov	r2, r3
     676:	4619      	mov	r1, r3
     678:	4870      	ldr	r0, [pc, #448]	; (83c <FotaAppTask+0x290>)
     67a:	6800      	ldr	r0, [r0, #0]
     67c:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     67e:	2301      	movs	r3, #1
     680:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     682:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     686:	4b6a      	ldr	r3, [pc, #424]	; (830 <FotaAppTask+0x284>)
     688:	4798      	blx	r3
     68a:	e2ac      	b.n	be6 <FotaAppTask+0x63a>
                    DEBUG_PRINT("Transmit Queue is not empty");
     68c:	4870      	ldr	r0, [pc, #448]	; (850 <FotaAppTask+0x2a4>)
     68e:	4b64      	ldr	r3, [pc, #400]	; (820 <FotaAppTask+0x274>)
     690:	4798      	blx	r3
     692:	e2a8      	b.n	be6 <FotaAppTask+0x63a>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     694:	486f      	ldr	r0, [pc, #444]	; (854 <FotaAppTask+0x2a8>)
     696:	4e62      	ldr	r6, [pc, #392]	; (820 <FotaAppTask+0x274>)
     698:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     69a:	4863      	ldr	r0, [pc, #396]	; (828 <FotaAppTask+0x27c>)
     69c:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     69e:	2300      	movs	r3, #0
     6a0:	706b      	strb	r3, [r5, #1]
     6a2:	e7b4      	b.n	60e <FotaAppTask+0x62>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     6a4:	486c      	ldr	r0, [pc, #432]	; (858 <FotaAppTask+0x2ac>)
     6a6:	4b5e      	ldr	r3, [pc, #376]	; (820 <FotaAppTask+0x274>)
     6a8:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     6aa:	2300      	movs	r3, #0
     6ac:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     6ae:	68a8      	ldr	r0, [r5, #8]
     6b0:	4b5e      	ldr	r3, [pc, #376]	; (82c <FotaAppTask+0x280>)
     6b2:	4798      	blx	r3
     6b4:	e297      	b.n	be6 <FotaAppTask+0x63a>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     6b6:	786b      	ldrb	r3, [r5, #1]
     6b8:	b333      	cbz	r3, 708 <FotaAppTask+0x15c>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     6ba:	2b01      	cmp	r3, #1
     6bc:	f040 8293 	bne.w	be6 <FotaAppTask+0x63a>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     6c0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     6c4:	4639      	mov	r1, r7
     6c6:	4b52      	ldr	r3, [pc, #328]	; (810 <FotaAppTask+0x264>)
     6c8:	6818      	ldr	r0, [r3, #0]
     6ca:	4b52      	ldr	r3, [pc, #328]	; (814 <FotaAppTask+0x268>)
     6cc:	4798      	blx	r3
     6ce:	2801      	cmp	r0, #1
     6d0:	f040 8289 	bne.w	be6 <FotaAppTask+0x63a>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSI)
     6d4:	792b      	ldrb	r3, [r5, #4]
     6d6:	2b1e      	cmp	r3, #30
     6d8:	d159      	bne.n	78e <FotaAppTask+0x1e2>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     6da:	68a8      	ldr	r0, [r5, #8]
     6dc:	4b4e      	ldr	r3, [pc, #312]	; (818 <FotaAppTask+0x26c>)
     6de:	4798      	blx	r3
     6e0:	2800      	cmp	r0, #0
     6e2:	d04c      	beq.n	77e <FotaAppTask+0x1d2>
                            DEBUG_PRINT("FOTA : Set device service indications.");
     6e4:	485d      	ldr	r0, [pc, #372]	; (85c <FotaAppTask+0x2b0>)
     6e6:	4e4e      	ldr	r6, [pc, #312]	; (820 <FotaAppTask+0x274>)
     6e8:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     6ea:	88e9      	ldrh	r1, [r5, #6]
     6ec:	68a8      	ldr	r0, [r5, #8]
     6ee:	4b4d      	ldr	r3, [pc, #308]	; (824 <FotaAppTask+0x278>)
     6f0:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     6f2:	484d      	ldr	r0, [pc, #308]	; (828 <FotaAppTask+0x27c>)
     6f4:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     6f6:	2300      	movs	r3, #0
     6f8:	706b      	strb	r3, [r5, #1]
                            FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     6fa:	2202      	movs	r2, #2
     6fc:	702a      	strb	r2, [r5, #0]
                            FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     6fe:	70ab      	strb	r3, [r5, #2]
                        vPortFree(FotaCommandResponse.response);
     700:	68a8      	ldr	r0, [r5, #8]
     702:	4b4a      	ldr	r3, [pc, #296]	; (82c <FotaAppTask+0x280>)
     704:	4798      	blx	r3
     706:	e26e      	b.n	be6 <FotaAppTask+0x63a>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     708:	4b4a      	ldr	r3, [pc, #296]	; (834 <FotaAppTask+0x288>)
     70a:	6818      	ldr	r0, [r3, #0]
     70c:	4b4a      	ldr	r3, [pc, #296]	; (838 <FotaAppTask+0x28c>)
     70e:	4798      	blx	r3
     710:	2800      	cmp	r0, #0
     712:	d130      	bne.n	776 <FotaAppTask+0x1ca>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     714:	2100      	movs	r1, #0
     716:	4b49      	ldr	r3, [pc, #292]	; (83c <FotaAppTask+0x290>)
     718:	6818      	ldr	r0, [r3, #0]
     71a:	4b49      	ldr	r3, [pc, #292]	; (840 <FotaAppTask+0x294>)
     71c:	4798      	blx	r3
     71e:	2801      	cmp	r0, #1
     720:	d003      	beq.n	72a <FotaAppTask+0x17e>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     722:	4848      	ldr	r0, [pc, #288]	; (844 <FotaAppTask+0x298>)
     724:	4b3e      	ldr	r3, [pc, #248]	; (820 <FotaAppTask+0x274>)
     726:	4798      	blx	r3
     728:	e25d      	b.n	be6 <FotaAppTask+0x63a>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     72a:	2305      	movs	r3, #5
     72c:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_WDSI;
     730:	231e      	movs	r3, #30
     732:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     736:	2300      	movs	r3, #0
     738:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     73a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     73e:	4669      	mov	r1, sp
     740:	483c      	ldr	r0, [pc, #240]	; (834 <FotaAppTask+0x288>)
     742:	6800      	ldr	r0, [r0, #0]
     744:	4e40      	ldr	r6, [pc, #256]	; (848 <FotaAppTask+0x29c>)
     746:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     748:	2801      	cmp	r0, #1
     74a:	d007      	beq.n	75c <FotaAppTask+0x1b0>
                            DEBUG_PRINT("Failed to sent the service indication request to Tx Task");
     74c:	4844      	ldr	r0, [pc, #272]	; (860 <FotaAppTask+0x2b4>)
     74e:	4b34      	ldr	r3, [pc, #208]	; (820 <FotaAppTask+0x274>)
     750:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     756:	4b36      	ldr	r3, [pc, #216]	; (830 <FotaAppTask+0x284>)
     758:	4798      	blx	r3
     75a:	e244      	b.n	be6 <FotaAppTask+0x63a>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     75c:	2300      	movs	r3, #0
     75e:	461a      	mov	r2, r3
     760:	4619      	mov	r1, r3
     762:	4836      	ldr	r0, [pc, #216]	; (83c <FotaAppTask+0x290>)
     764:	6800      	ldr	r0, [r0, #0]
     766:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     768:	2301      	movs	r3, #1
     76a:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     76c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     770:	4b2f      	ldr	r3, [pc, #188]	; (830 <FotaAppTask+0x284>)
     772:	4798      	blx	r3
     774:	e237      	b.n	be6 <FotaAppTask+0x63a>
                    DEBUG_PRINT("Transmit Queue is not empty");
     776:	4836      	ldr	r0, [pc, #216]	; (850 <FotaAppTask+0x2a4>)
     778:	4b29      	ldr	r3, [pc, #164]	; (820 <FotaAppTask+0x274>)
     77a:	4798      	blx	r3
     77c:	e233      	b.n	be6 <FotaAppTask+0x63a>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     77e:	4835      	ldr	r0, [pc, #212]	; (854 <FotaAppTask+0x2a8>)
     780:	4e27      	ldr	r6, [pc, #156]	; (820 <FotaAppTask+0x274>)
     782:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     784:	4828      	ldr	r0, [pc, #160]	; (828 <FotaAppTask+0x27c>)
     786:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     788:	2300      	movs	r3, #0
     78a:	706b      	strb	r3, [r5, #1]
     78c:	e7b8      	b.n	700 <FotaAppTask+0x154>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     78e:	4832      	ldr	r0, [pc, #200]	; (858 <FotaAppTask+0x2ac>)
     790:	4b23      	ldr	r3, [pc, #140]	; (820 <FotaAppTask+0x274>)
     792:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     794:	2300      	movs	r3, #0
     796:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     798:	68a8      	ldr	r0, [r5, #8]
     79a:	4b24      	ldr	r3, [pc, #144]	; (82c <FotaAppTask+0x280>)
     79c:	4798      	blx	r3
     79e:	e222      	b.n	be6 <FotaAppTask+0x63a>
            switch(FotaUserAgreementActivationState)
     7a0:	78ab      	ldrb	r3, [r5, #2]
     7a2:	2b00      	cmp	r3, #0
     7a4:	d060      	beq.n	868 <FotaAppTask+0x2bc>
     7a6:	2b01      	cmp	r3, #1
     7a8:	f040 821d 	bne.w	be6 <FotaAppTask+0x63a>
                    if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     7ac:	786b      	ldrb	r3, [r5, #1]
     7ae:	2b00      	cmp	r3, #0
     7b0:	f000 80d4 	beq.w	95c <FotaAppTask+0x3b0>
                    else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     7b4:	2b01      	cmp	r3, #1
     7b6:	f040 8216 	bne.w	be6 <FotaAppTask+0x63a>
                        if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     7ba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     7be:	4639      	mov	r1, r7
     7c0:	4b13      	ldr	r3, [pc, #76]	; (810 <FotaAppTask+0x264>)
     7c2:	6818      	ldr	r0, [r3, #0]
     7c4:	4b13      	ldr	r3, [pc, #76]	; (814 <FotaAppTask+0x268>)
     7c6:	4798      	blx	r3
     7c8:	2801      	cmp	r0, #1
     7ca:	f040 820c 	bne.w	be6 <FotaAppTask+0x63a>
                            if(FotaCommandResponse.atCmd == CMD_AT_WDSC_FW_INSTALL)
     7ce:	792b      	ldrb	r3, [r5, #4]
     7d0:	2b20      	cmp	r3, #32
     7d2:	f040 8109 	bne.w	9e8 <FotaAppTask+0x43c>
                                if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     7d6:	68a8      	ldr	r0, [r5, #8]
     7d8:	4b0f      	ldr	r3, [pc, #60]	; (818 <FotaAppTask+0x26c>)
     7da:	4798      	blx	r3
     7dc:	2800      	cmp	r0, #0
     7de:	f000 80fb 	beq.w	9d8 <FotaAppTask+0x42c>
                                    DEBUG_PRINT("FOTA : Set user agreement activation for FW installation.");
     7e2:	4820      	ldr	r0, [pc, #128]	; (864 <FotaAppTask+0x2b8>)
     7e4:	4e0e      	ldr	r6, [pc, #56]	; (820 <FotaAppTask+0x274>)
     7e6:	47b0      	blx	r6
                                    SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     7e8:	88e9      	ldrh	r1, [r5, #6]
     7ea:	68a8      	ldr	r0, [r5, #8]
     7ec:	4b0d      	ldr	r3, [pc, #52]	; (824 <FotaAppTask+0x278>)
     7ee:	4798      	blx	r3
                                    DEBUG_PRINT("\r\n");
     7f0:	480d      	ldr	r0, [pc, #52]	; (828 <FotaAppTask+0x27c>)
     7f2:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     7f4:	2300      	movs	r3, #0
     7f6:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = START_DM_SESSION_WITH_AIR_VANTAGE;
     7f8:	2203      	movs	r2, #3
     7fa:	702a      	strb	r2, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     7fc:	70ab      	strb	r3, [r5, #2]
                                vPortFree(FotaCommandResponse.response);
     7fe:	68a8      	ldr	r0, [r5, #8]
     800:	4b0a      	ldr	r3, [pc, #40]	; (82c <FotaAppTask+0x280>)
     802:	4798      	blx	r3
     804:	e1ef      	b.n	be6 <FotaAppTask+0x63a>
     806:	bf00      	nop
     808:	2000026c 	.word	0x2000026c
     80c:	00002b15 	.word	0x00002b15
     810:	20003574 	.word	0x20003574
     814:	000054ad 	.word	0x000054ad
     818:	00000591 	.word	0x00000591
     81c:	000075cc 	.word	0x000075cc
     820:	0000313d 	.word	0x0000313d
     824:	000030f9 	.word	0x000030f9
     828:	00008e50 	.word	0x00008e50
     82c:	00004e75 	.word	0x00004e75
     830:	00005e2d 	.word	0x00005e2d
     834:	20003568 	.word	0x20003568
     838:	00005815 	.word	0x00005815
     83c:	2000357c 	.word	0x2000357c
     840:	00005635 	.word	0x00005635
     844:	00007584 	.word	0x00007584
     848:	0000519d 	.word	0x0000519d
     84c:	00007554 	.word	0x00007554
     850:	000075b0 	.word	0x000075b0
     854:	00007600 	.word	0x00007600
     858:	00007628 	.word	0x00007628
     85c:	0000769c 	.word	0x0000769c
     860:	00007660 	.word	0x00007660
     864:	000077a0 	.word	0x000077a0
                    if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     868:	786b      	ldrb	r3, [r5, #1]
     86a:	b33b      	cbz	r3, 8bc <FotaAppTask+0x310>
                    else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     86c:	2b01      	cmp	r3, #1
     86e:	f040 81ba 	bne.w	be6 <FotaAppTask+0x63a>
                        if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     872:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     876:	4639      	mov	r1, r7
     878:	4b96      	ldr	r3, [pc, #600]	; (ad4 <FotaAppTask+0x528>)
     87a:	6818      	ldr	r0, [r3, #0]
     87c:	4b96      	ldr	r3, [pc, #600]	; (ad8 <FotaAppTask+0x52c>)
     87e:	4798      	blx	r3
     880:	2801      	cmp	r0, #1
     882:	f040 81b0 	bne.w	be6 <FotaAppTask+0x63a>
                            if(FotaCommandResponse.atCmd == CMD_AT_WDSC_FW_DOWNLOAD)
     886:	792b      	ldrb	r3, [r5, #4]
     888:	2b1f      	cmp	r3, #31
     88a:	d15e      	bne.n	94a <FotaAppTask+0x39e>
                                if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     88c:	68a8      	ldr	r0, [r5, #8]
     88e:	4b93      	ldr	r3, [pc, #588]	; (adc <FotaAppTask+0x530>)
     890:	4798      	blx	r3
     892:	2800      	cmp	r0, #0
     894:	d051      	beq.n	93a <FotaAppTask+0x38e>
                                    DEBUG_PRINT("FOTA : Set user agreement activation for FW download.");
     896:	4892      	ldr	r0, [pc, #584]	; (ae0 <FotaAppTask+0x534>)
     898:	4e92      	ldr	r6, [pc, #584]	; (ae4 <FotaAppTask+0x538>)
     89a:	47b0      	blx	r6
                                    SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     89c:	88e9      	ldrh	r1, [r5, #6]
     89e:	68a8      	ldr	r0, [r5, #8]
     8a0:	4b91      	ldr	r3, [pc, #580]	; (ae8 <FotaAppTask+0x53c>)
     8a2:	4798      	blx	r3
                                    DEBUG_PRINT("\r\n");
     8a4:	4891      	ldr	r0, [pc, #580]	; (aec <FotaAppTask+0x540>)
     8a6:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     8a8:	2300      	movs	r3, #0
     8aa:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     8ac:	2302      	movs	r3, #2
     8ae:	702b      	strb	r3, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_INSTALLATION;
     8b0:	2301      	movs	r3, #1
     8b2:	70ab      	strb	r3, [r5, #2]
                                vPortFree(FotaCommandResponse.response);
     8b4:	68a8      	ldr	r0, [r5, #8]
     8b6:	4b8e      	ldr	r3, [pc, #568]	; (af0 <FotaAppTask+0x544>)
     8b8:	4798      	blx	r3
     8ba:	e194      	b.n	be6 <FotaAppTask+0x63a>
                        if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     8bc:	4b8d      	ldr	r3, [pc, #564]	; (af4 <FotaAppTask+0x548>)
     8be:	6818      	ldr	r0, [r3, #0]
     8c0:	4b8d      	ldr	r3, [pc, #564]	; (af8 <FotaAppTask+0x54c>)
     8c2:	4798      	blx	r3
     8c4:	2800      	cmp	r0, #0
     8c6:	d134      	bne.n	932 <FotaAppTask+0x386>
                            if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     8c8:	2100      	movs	r1, #0
     8ca:	4b8c      	ldr	r3, [pc, #560]	; (afc <FotaAppTask+0x550>)
     8cc:	6818      	ldr	r0, [r3, #0]
     8ce:	4b8c      	ldr	r3, [pc, #560]	; (b00 <FotaAppTask+0x554>)
     8d0:	4798      	blx	r3
     8d2:	2801      	cmp	r0, #1
     8d4:	d003      	beq.n	8de <FotaAppTask+0x332>
                                DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     8d6:	488b      	ldr	r0, [pc, #556]	; (b04 <FotaAppTask+0x558>)
     8d8:	4b82      	ldr	r3, [pc, #520]	; (ae4 <FotaAppTask+0x538>)
     8da:	4798      	blx	r3
     8dc:	e183      	b.n	be6 <FotaAppTask+0x63a>
                                TxMsgQueueData.taskID = FOTA_APP_TASK;
     8de:	2305      	movs	r3, #5
     8e0:	f88d 3000 	strb.w	r3, [sp]
                                TxMsgQueueData.atCmd = CMD_AT_WDSC_FW_DOWNLOAD;
     8e4:	231f      	movs	r3, #31
     8e6:	f88d 3001 	strb.w	r3, [sp, #1]
                                TxMsgQueueData.pData = NULL;
     8ea:	2300      	movs	r3, #0
     8ec:	9301      	str	r3, [sp, #4]
                                TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     8ee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     8f2:	4669      	mov	r1, sp
     8f4:	487f      	ldr	r0, [pc, #508]	; (af4 <FotaAppTask+0x548>)
     8f6:	6800      	ldr	r0, [r0, #0]
     8f8:	4e83      	ldr	r6, [pc, #524]	; (b08 <FotaAppTask+0x55c>)
     8fa:	47b0      	blx	r6
                                if(TxQueuePushStatus == pdPASS)
     8fc:	2801      	cmp	r0, #1
     8fe:	d007      	beq.n	910 <FotaAppTask+0x364>
                                    DEBUG_PRINT("Failed to sent the user agreement activation request for FW download to Tx Task");
     900:	4882      	ldr	r0, [pc, #520]	; (b0c <FotaAppTask+0x560>)
     902:	4b78      	ldr	r3, [pc, #480]	; (ae4 <FotaAppTask+0x538>)
     904:	4798      	blx	r3
                                    vTaskDelay(TransmitDelayMs);
     906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     90a:	4b81      	ldr	r3, [pc, #516]	; (b10 <FotaAppTask+0x564>)
     90c:	4798      	blx	r3
     90e:	e16a      	b.n	be6 <FotaAppTask+0x63a>
                                    xSemaphoreGive(AtTxQueueLoadSemaphore);
     910:	2300      	movs	r3, #0
     912:	461a      	mov	r2, r3
     914:	4619      	mov	r1, r3
     916:	4879      	ldr	r0, [pc, #484]	; (afc <FotaAppTask+0x550>)
     918:	6800      	ldr	r0, [r0, #0]
     91a:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     91c:	2301      	movs	r3, #1
     91e:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     920:	2302      	movs	r3, #2
     922:	702b      	strb	r3, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     924:	2300      	movs	r3, #0
     926:	70ab      	strb	r3, [r5, #2]
                                    vTaskDelay(TransmitDelayMs);
     928:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     92c:	4b78      	ldr	r3, [pc, #480]	; (b10 <FotaAppTask+0x564>)
     92e:	4798      	blx	r3
     930:	e159      	b.n	be6 <FotaAppTask+0x63a>
                            DEBUG_PRINT("Transmit Queue is not empty");
     932:	4878      	ldr	r0, [pc, #480]	; (b14 <FotaAppTask+0x568>)
     934:	4b6b      	ldr	r3, [pc, #428]	; (ae4 <FotaAppTask+0x538>)
     936:	4798      	blx	r3
     938:	e155      	b.n	be6 <FotaAppTask+0x63a>
                                    DEBUG_PRINT("Error:Expected Response Not Received...");
     93a:	4877      	ldr	r0, [pc, #476]	; (b18 <FotaAppTask+0x56c>)
     93c:	4e69      	ldr	r6, [pc, #420]	; (ae4 <FotaAppTask+0x538>)
     93e:	47b0      	blx	r6
                                    DEBUG_PRINT("\r\n");
     940:	486a      	ldr	r0, [pc, #424]	; (aec <FotaAppTask+0x540>)
     942:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     944:	2300      	movs	r3, #0
     946:	706b      	strb	r3, [r5, #1]
     948:	e7b4      	b.n	8b4 <FotaAppTask+0x308>
                                DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     94a:	4874      	ldr	r0, [pc, #464]	; (b1c <FotaAppTask+0x570>)
     94c:	4b65      	ldr	r3, [pc, #404]	; (ae4 <FotaAppTask+0x538>)
     94e:	4798      	blx	r3
                                FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     950:	2300      	movs	r3, #0
     952:	706b      	strb	r3, [r5, #1]
                                vPortFree(FotaCommandResponse.response);
     954:	68a8      	ldr	r0, [r5, #8]
     956:	4b66      	ldr	r3, [pc, #408]	; (af0 <FotaAppTask+0x544>)
     958:	4798      	blx	r3
     95a:	e144      	b.n	be6 <FotaAppTask+0x63a>
                        if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     95c:	4b65      	ldr	r3, [pc, #404]	; (af4 <FotaAppTask+0x548>)
     95e:	6818      	ldr	r0, [r3, #0]
     960:	4b65      	ldr	r3, [pc, #404]	; (af8 <FotaAppTask+0x54c>)
     962:	4798      	blx	r3
     964:	2800      	cmp	r0, #0
     966:	d133      	bne.n	9d0 <FotaAppTask+0x424>
                            if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     968:	2100      	movs	r1, #0
     96a:	4b64      	ldr	r3, [pc, #400]	; (afc <FotaAppTask+0x550>)
     96c:	6818      	ldr	r0, [r3, #0]
     96e:	4b64      	ldr	r3, [pc, #400]	; (b00 <FotaAppTask+0x554>)
     970:	4798      	blx	r3
     972:	2801      	cmp	r0, #1
     974:	d003      	beq.n	97e <FotaAppTask+0x3d2>
                                DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     976:	4863      	ldr	r0, [pc, #396]	; (b04 <FotaAppTask+0x558>)
     978:	4b5a      	ldr	r3, [pc, #360]	; (ae4 <FotaAppTask+0x538>)
     97a:	4798      	blx	r3
     97c:	e133      	b.n	be6 <FotaAppTask+0x63a>
                                TxMsgQueueData.taskID = FOTA_APP_TASK;
     97e:	2305      	movs	r3, #5
     980:	f88d 3000 	strb.w	r3, [sp]
                                TxMsgQueueData.atCmd = CMD_AT_WDSC_FW_INSTALL;
     984:	2320      	movs	r3, #32
     986:	f88d 3001 	strb.w	r3, [sp, #1]
                                TxMsgQueueData.pData = NULL;
     98a:	2300      	movs	r3, #0
     98c:	9301      	str	r3, [sp, #4]
                                TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     98e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     992:	4669      	mov	r1, sp
     994:	4857      	ldr	r0, [pc, #348]	; (af4 <FotaAppTask+0x548>)
     996:	6800      	ldr	r0, [r0, #0]
     998:	4e5b      	ldr	r6, [pc, #364]	; (b08 <FotaAppTask+0x55c>)
     99a:	47b0      	blx	r6
                                if(TxQueuePushStatus == pdPASS)
     99c:	2801      	cmp	r0, #1
     99e:	d007      	beq.n	9b0 <FotaAppTask+0x404>
                                    DEBUG_PRINT("Failed to sent the user agreement activation request for FW installation to Tx Task");
     9a0:	485f      	ldr	r0, [pc, #380]	; (b20 <FotaAppTask+0x574>)
     9a2:	4b50      	ldr	r3, [pc, #320]	; (ae4 <FotaAppTask+0x538>)
     9a4:	4798      	blx	r3
                                    vTaskDelay(TransmitDelayMs);
     9a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     9aa:	4b59      	ldr	r3, [pc, #356]	; (b10 <FotaAppTask+0x564>)
     9ac:	4798      	blx	r3
     9ae:	e11a      	b.n	be6 <FotaAppTask+0x63a>
                                    xSemaphoreGive(AtTxQueueLoadSemaphore);
     9b0:	2300      	movs	r3, #0
     9b2:	461a      	mov	r2, r3
     9b4:	4619      	mov	r1, r3
     9b6:	4851      	ldr	r0, [pc, #324]	; (afc <FotaAppTask+0x550>)
     9b8:	6800      	ldr	r0, [r0, #0]
     9ba:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     9bc:	2301      	movs	r3, #1
     9be:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     9c0:	2202      	movs	r2, #2
     9c2:	702a      	strb	r2, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_INSTALLATION;
     9c4:	70ab      	strb	r3, [r5, #2]
                                    vTaskDelay(TransmitDelayMs);
     9c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     9ca:	4b51      	ldr	r3, [pc, #324]	; (b10 <FotaAppTask+0x564>)
     9cc:	4798      	blx	r3
     9ce:	e10a      	b.n	be6 <FotaAppTask+0x63a>
                            DEBUG_PRINT("Transmit Queue is not empty");
     9d0:	4850      	ldr	r0, [pc, #320]	; (b14 <FotaAppTask+0x568>)
     9d2:	4b44      	ldr	r3, [pc, #272]	; (ae4 <FotaAppTask+0x538>)
     9d4:	4798      	blx	r3
     9d6:	e106      	b.n	be6 <FotaAppTask+0x63a>
                                    DEBUG_PRINT("Error:Expected Response Not Received...");
     9d8:	484f      	ldr	r0, [pc, #316]	; (b18 <FotaAppTask+0x56c>)
     9da:	4e42      	ldr	r6, [pc, #264]	; (ae4 <FotaAppTask+0x538>)
     9dc:	47b0      	blx	r6
                                    DEBUG_PRINT("\r\n");
     9de:	4843      	ldr	r0, [pc, #268]	; (aec <FotaAppTask+0x540>)
     9e0:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     9e2:	2300      	movs	r3, #0
     9e4:	706b      	strb	r3, [r5, #1]
     9e6:	e70a      	b.n	7fe <FotaAppTask+0x252>
                                DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     9e8:	484c      	ldr	r0, [pc, #304]	; (b1c <FotaAppTask+0x570>)
     9ea:	4b3e      	ldr	r3, [pc, #248]	; (ae4 <FotaAppTask+0x538>)
     9ec:	4798      	blx	r3
                                FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     9ee:	2300      	movs	r3, #0
     9f0:	706b      	strb	r3, [r5, #1]
                                vPortFree(FotaCommandResponse.response);
     9f2:	68a8      	ldr	r0, [r5, #8]
     9f4:	4b3e      	ldr	r3, [pc, #248]	; (af0 <FotaAppTask+0x544>)
     9f6:	4798      	blx	r3
     9f8:	e0f5      	b.n	be6 <FotaAppTask+0x63a>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     9fa:	786b      	ldrb	r3, [r5, #1]
     9fc:	b333      	cbz	r3, a4c <FotaAppTask+0x4a0>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     9fe:	2b01      	cmp	r3, #1
     a00:	f040 80f1 	bne.w	be6 <FotaAppTask+0x63a>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     a04:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     a08:	4639      	mov	r1, r7
     a0a:	4b32      	ldr	r3, [pc, #200]	; (ad4 <FotaAppTask+0x528>)
     a0c:	6818      	ldr	r0, [r3, #0]
     a0e:	4b32      	ldr	r3, [pc, #200]	; (ad8 <FotaAppTask+0x52c>)
     a10:	4798      	blx	r3
     a12:	2801      	cmp	r0, #1
     a14:	f040 80e7 	bne.w	be6 <FotaAppTask+0x63a>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSS_START_DM_SESSION)
     a18:	792b      	ldrb	r3, [r5, #4]
     a1a:	2b1d      	cmp	r3, #29
     a1c:	f040 8086 	bne.w	b2c <FotaAppTask+0x580>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     a20:	68a8      	ldr	r0, [r5, #8]
     a22:	4b2e      	ldr	r3, [pc, #184]	; (adc <FotaAppTask+0x530>)
     a24:	4798      	blx	r3
     a26:	2800      	cmp	r0, #0
     a28:	d04b      	beq.n	ac2 <FotaAppTask+0x516>
                            DEBUG_PRINT("FOTA : Initiating the DM session with Air Vantage.");
     a2a:	483e      	ldr	r0, [pc, #248]	; (b24 <FotaAppTask+0x578>)
     a2c:	4e2d      	ldr	r6, [pc, #180]	; (ae4 <FotaAppTask+0x538>)
     a2e:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     a30:	88e9      	ldrh	r1, [r5, #6]
     a32:	68a8      	ldr	r0, [r5, #8]
     a34:	4b2c      	ldr	r3, [pc, #176]	; (ae8 <FotaAppTask+0x53c>)
     a36:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     a38:	482c      	ldr	r0, [pc, #176]	; (aec <FotaAppTask+0x540>)
     a3a:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     a3c:	2300      	movs	r3, #0
     a3e:	706b      	strb	r3, [r5, #1]
                            FotaMainState = SYSTEM_IS_IN_FIRMWARE_DOWNLOAD_MODE;
     a40:	2304      	movs	r3, #4
     a42:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     a44:	68a8      	ldr	r0, [r5, #8]
     a46:	4b2a      	ldr	r3, [pc, #168]	; (af0 <FotaAppTask+0x544>)
     a48:	4798      	blx	r3
     a4a:	e0cc      	b.n	be6 <FotaAppTask+0x63a>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     a4c:	4b29      	ldr	r3, [pc, #164]	; (af4 <FotaAppTask+0x548>)
     a4e:	6818      	ldr	r0, [r3, #0]
     a50:	4b29      	ldr	r3, [pc, #164]	; (af8 <FotaAppTask+0x54c>)
     a52:	4798      	blx	r3
     a54:	2800      	cmp	r0, #0
     a56:	d130      	bne.n	aba <FotaAppTask+0x50e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     a58:	2100      	movs	r1, #0
     a5a:	4b28      	ldr	r3, [pc, #160]	; (afc <FotaAppTask+0x550>)
     a5c:	6818      	ldr	r0, [r3, #0]
     a5e:	4b28      	ldr	r3, [pc, #160]	; (b00 <FotaAppTask+0x554>)
     a60:	4798      	blx	r3
     a62:	2801      	cmp	r0, #1
     a64:	d003      	beq.n	a6e <FotaAppTask+0x4c2>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     a66:	4827      	ldr	r0, [pc, #156]	; (b04 <FotaAppTask+0x558>)
     a68:	4b1e      	ldr	r3, [pc, #120]	; (ae4 <FotaAppTask+0x538>)
     a6a:	4798      	blx	r3
     a6c:	e0bb      	b.n	be6 <FotaAppTask+0x63a>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     a6e:	2305      	movs	r3, #5
     a70:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_WDSS_START_DM_SESSION;
     a74:	231d      	movs	r3, #29
     a76:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     a7a:	2300      	movs	r3, #0
     a7c:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     a7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a82:	4669      	mov	r1, sp
     a84:	481b      	ldr	r0, [pc, #108]	; (af4 <FotaAppTask+0x548>)
     a86:	6800      	ldr	r0, [r0, #0]
     a88:	4e1f      	ldr	r6, [pc, #124]	; (b08 <FotaAppTask+0x55c>)
     a8a:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     a8c:	2801      	cmp	r0, #1
     a8e:	d007      	beq.n	aa0 <FotaAppTask+0x4f4>
                            DEBUG_PRINT("Failed to sent the start DM session request to Tx Task");
     a90:	4825      	ldr	r0, [pc, #148]	; (b28 <FotaAppTask+0x57c>)
     a92:	4b14      	ldr	r3, [pc, #80]	; (ae4 <FotaAppTask+0x538>)
     a94:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a9a:	4b1d      	ldr	r3, [pc, #116]	; (b10 <FotaAppTask+0x564>)
     a9c:	4798      	blx	r3
     a9e:	e0a2      	b.n	be6 <FotaAppTask+0x63a>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     aa0:	2300      	movs	r3, #0
     aa2:	461a      	mov	r2, r3
     aa4:	4619      	mov	r1, r3
     aa6:	4815      	ldr	r0, [pc, #84]	; (afc <FotaAppTask+0x550>)
     aa8:	6800      	ldr	r0, [r0, #0]
     aaa:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     aac:	2301      	movs	r3, #1
     aae:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     ab4:	4b16      	ldr	r3, [pc, #88]	; (b10 <FotaAppTask+0x564>)
     ab6:	4798      	blx	r3
     ab8:	e095      	b.n	be6 <FotaAppTask+0x63a>
                    DEBUG_PRINT("Transmit Queue is not empty");
     aba:	4816      	ldr	r0, [pc, #88]	; (b14 <FotaAppTask+0x568>)
     abc:	4b09      	ldr	r3, [pc, #36]	; (ae4 <FotaAppTask+0x538>)
     abe:	4798      	blx	r3
     ac0:	e091      	b.n	be6 <FotaAppTask+0x63a>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     ac2:	4815      	ldr	r0, [pc, #84]	; (b18 <FotaAppTask+0x56c>)
     ac4:	4e07      	ldr	r6, [pc, #28]	; (ae4 <FotaAppTask+0x538>)
     ac6:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     ac8:	4808      	ldr	r0, [pc, #32]	; (aec <FotaAppTask+0x540>)
     aca:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     acc:	2300      	movs	r3, #0
     ace:	706b      	strb	r3, [r5, #1]
     ad0:	e7b8      	b.n	a44 <FotaAppTask+0x498>
     ad2:	bf00      	nop
     ad4:	20003574 	.word	0x20003574
     ad8:	000054ad 	.word	0x000054ad
     adc:	00000591 	.word	0x00000591
     ae0:	00007714 	.word	0x00007714
     ae4:	0000313d 	.word	0x0000313d
     ae8:	000030f9 	.word	0x000030f9
     aec:	00008e50 	.word	0x00008e50
     af0:	00004e75 	.word	0x00004e75
     af4:	20003568 	.word	0x20003568
     af8:	00005815 	.word	0x00005815
     afc:	2000357c 	.word	0x2000357c
     b00:	00005635 	.word	0x00005635
     b04:	00007584 	.word	0x00007584
     b08:	0000519d 	.word	0x0000519d
     b0c:	000076c4 	.word	0x000076c4
     b10:	00005e2d 	.word	0x00005e2d
     b14:	000075b0 	.word	0x000075b0
     b18:	00007600 	.word	0x00007600
     b1c:	00007628 	.word	0x00007628
     b20:	0000774c 	.word	0x0000774c
     b24:	00007814 	.word	0x00007814
     b28:	000077dc 	.word	0x000077dc
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     b2c:	4893      	ldr	r0, [pc, #588]	; (d7c <FotaAppTask+0x7d0>)
     b2e:	4b94      	ldr	r3, [pc, #592]	; (d80 <FotaAppTask+0x7d4>)
     b30:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     b32:	2300      	movs	r3, #0
     b34:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     b36:	68a8      	ldr	r0, [r5, #8]
     b38:	4b92      	ldr	r3, [pc, #584]	; (d84 <FotaAppTask+0x7d8>)
     b3a:	4798      	blx	r3
     b3c:	e053      	b.n	be6 <FotaAppTask+0x63a>
**===========================================================================*/
static DEVICE_SERVICE_INDICATION_TYPE getDeviceServiceIndicationType(void)
{
    uint32_t unsolicitedResponseLength = 0;
    uint8_t* responseBuffer = NULL;
    uint8_t dataString[2] = {0};
     b3e:	2300      	movs	r3, #0
     b40:	f8ad 3000 	strh.w	r3, [sp]
    bool readStatus;
    DEVICE_SERVICE_INDICATION_TYPE serviceIndicationType = SERVICE_INDICATION_ERROR;
    const int8_t* serviceIndicationCmdString = (int8_t*)"\r\n+WDSI: "; 

    while(mdmCtrlr_GetUnsolicitedResponseLength() < SERVICE_INDICATION_RESPONSE_LENGTH);
     b44:	4e90      	ldr	r6, [pc, #576]	; (d88 <FotaAppTask+0x7dc>)
     b46:	47b0      	blx	r6
     b48:	280b      	cmp	r0, #11
     b4a:	d9fc      	bls.n	b46 <FotaAppTask+0x59a>

    if(mdmCtrlr_GetUnsolicitedResponseLength() > SERVICE_INDICATION_RESPONSE_LENGTH)
     b4c:	4b8e      	ldr	r3, [pc, #568]	; (d88 <FotaAppTask+0x7dc>)
     b4e:	4798      	blx	r3
     b50:	280c      	cmp	r0, #12
     b52:	d938      	bls.n	bc6 <FotaAppTask+0x61a>
    {
    	unsolicitedResponseLength = mdmCtrlr_GetUnsolicitedResponseLength() - SERVICE_INDICATION_RESPONSE_LENGTH;
     b54:	4b8c      	ldr	r3, [pc, #560]	; (d88 <FotaAppTask+0x7dc>)
     b56:	4798      	blx	r3
     b58:	f1a0 060c 	sub.w	r6, r0, #12
    {
    	unsolicitedResponseLength = mdmCtrlr_GetUnsolicitedResponseLength();
    }


    responseBuffer = (uint8_t*)pvPortMalloc((unsolicitedResponseLength)*(sizeof(uint8_t)));
     b5c:	4630      	mov	r0, r6
     b5e:	4b8b      	ldr	r3, [pc, #556]	; (d8c <FotaAppTask+0x7e0>)
     b60:	4798      	blx	r3

    if(responseBuffer != NULL)
     b62:	4680      	mov	r8, r0
     b64:	2800      	cmp	r0, #0
     b66:	d03e      	beq.n	be6 <FotaAppTask+0x63a>
    {
        readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,unsolicitedResponseLength);
     b68:	b2b1      	uxth	r1, r6
     b6a:	4b89      	ldr	r3, [pc, #548]	; (d90 <FotaAppTask+0x7e4>)
     b6c:	4798      	blx	r3

        if(readStatus != false)
     b6e:	2800      	cmp	r0, #0
     b70:	f000 81d8 	beq.w	f24 <FotaAppTask+0x978>
        {
            if(VERIFIED_EQUAL == strncmp((char*)serviceIndicationCmdString, (char*)responseBuffer, SERVICE_INDICATION_CMD_LENGTH))
     b74:	2209      	movs	r2, #9
     b76:	4641      	mov	r1, r8
     b78:	4886      	ldr	r0, [pc, #536]	; (d94 <FotaAppTask+0x7e8>)
     b7a:	4b87      	ldr	r3, [pc, #540]	; (d98 <FotaAppTask+0x7ec>)
     b7c:	4798      	blx	r3
     b7e:	2800      	cmp	r0, #0
     b80:	f040 81d0 	bne.w	f24 <FotaAppTask+0x978>
            {
                if((responseBuffer[SERVICE_INDICATION_CMD_LENGTH] + 1) != '\r')
     b84:	f898 3009 	ldrb.w	r3, [r8, #9]
     b88:	2b0c      	cmp	r3, #12
     b8a:	d020      	beq.n	bce <FotaAppTask+0x622>
                {
                    dataString[0] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH];
     b8c:	f88d 3000 	strb.w	r3, [sp]
                    dataString[1] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH + 1];  
     b90:	f898 300a 	ldrb.w	r3, [r8, #10]
     b94:	f88d 3001 	strb.w	r3, [sp, #1]
                {
                    dataString[0] = 0;
                    dataString[1] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH];                  
                }
                
                serviceIndicationType = (DEVICE_SERVICE_INDICATION_TYPE)atoi((char*)dataString);
     b98:	4668      	mov	r0, sp
     b9a:	4b80      	ldr	r3, [pc, #512]	; (d9c <FotaAppTask+0x7f0>)
     b9c:	4798      	blx	r3
     b9e:	b2c6      	uxtb	r6, r0
        else
        {
        	   /* Read failure from UART Rx Buffer */
        }

        vPortFree(responseBuffer);
     ba0:	4640      	mov	r0, r8
     ba2:	4b78      	ldr	r3, [pc, #480]	; (d84 <FotaAppTask+0x7d8>)
     ba4:	4798      	blx	r3
        	if(serviceIndicationReceived != SERVICE_INDICATION_ERROR)
     ba6:	2e64      	cmp	r6, #100	; 0x64
     ba8:	d01d      	beq.n	be6 <FotaAppTask+0x63a>
            	switch(serviceIndicationReceived)
     baa:	2e12      	cmp	r6, #18
     bac:	d819      	bhi.n	be2 <FotaAppTask+0x636>
     bae:	e8df f006 	tbb	[pc, r6]
     bb2:	3b15      	.short	0x3b15
     bb4:	184f473f 	.word	0x184f473f
     bb8:	61571853 	.word	0x61571853
     bbc:	18691865 	.word	0x18691865
     bc0:	1877716d 	.word	0x1877716d
     bc4:	7d          	.byte	0x7d
     bc5:	00          	.byte	0x00
    	unsolicitedResponseLength = mdmCtrlr_GetUnsolicitedResponseLength();
     bc6:	4b70      	ldr	r3, [pc, #448]	; (d88 <FotaAppTask+0x7dc>)
     bc8:	4798      	blx	r3
     bca:	4606      	mov	r6, r0
     bcc:	e7c6      	b.n	b5c <FotaAppTask+0x5b0>
                    dataString[0] = 0;
     bce:	2300      	movs	r3, #0
     bd0:	f88d 3000 	strb.w	r3, [sp]
                    dataString[1] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH];                  
     bd4:	230c      	movs	r3, #12
     bd6:	f88d 3001 	strb.w	r3, [sp, #1]
     bda:	e7dd      	b.n	b98 <FotaAppTask+0x5ec>
            			DEBUG_PRINT("FOTA : APN IS SET. READY FOR DM SESSION.\r\n");
     bdc:	4870      	ldr	r0, [pc, #448]	; (da0 <FotaAppTask+0x7f4>)
     bde:	4b68      	ldr	r3, [pc, #416]	; (d80 <FotaAppTask+0x7d4>)
     be0:	4798      	blx	r3
            	PrevServiceIndicationReceived = serviceIndicationReceived;
     be2:	4b70      	ldr	r3, [pc, #448]	; (da4 <FotaAppTask+0x7f8>)
     be4:	701e      	strb	r6, [r3, #0]
            kickWatchDog();
     be6:	4b70      	ldr	r3, [pc, #448]	; (da8 <FotaAppTask+0x7fc>)
     be8:	4798      	blx	r3
            vTaskDelay(xDelayMs);
     bea:	f44f 7016 	mov.w	r0, #600	; 0x258
     bee:	4b6f      	ldr	r3, [pc, #444]	; (dac <FotaAppTask+0x800>)
     bf0:	4798      	blx	r3
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
     bf2:	47a0      	blx	r4
     bf4:	2804      	cmp	r0, #4
     bf6:	d1fc      	bne.n	bf2 <FotaAppTask+0x646>
     bf8:	78eb      	ldrb	r3, [r5, #3]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d1f9      	bne.n	bf2 <FotaAppTask+0x646>
    switch(FotaMainState)
     bfe:	782b      	ldrb	r3, [r5, #0]
     c00:	2b06      	cmp	r3, #6
     c02:	d8f0      	bhi.n	be6 <FotaAppTask+0x63a>
     c04:	a201      	add	r2, pc, #4	; (adr r2, c0c <FotaAppTask+0x660>)
     c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     c0a:	bf00      	nop
     c0c:	000005c7 	.word	0x000005c7
     c10:	000006b7 	.word	0x000006b7
     c14:	000007a1 	.word	0x000007a1
     c18:	000009fb 	.word	0x000009fb
     c1c:	00000b3f 	.word	0x00000b3f
     c20:	00000cb5 	.word	0x00000cb5
     c24:	00000e3f 	.word	0x00000e3f
            			DEBUG_PRINT("FOTA : AIRVANTAGE ORIGINATED DM SESSION REQUEST.\r\n");
     c28:	4861      	ldr	r0, [pc, #388]	; (db0 <FotaAppTask+0x804>)
     c2a:	4b55      	ldr	r3, [pc, #340]	; (d80 <FotaAppTask+0x7d4>)
     c2c:	4798      	blx	r3
     c2e:	e7d8      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : AIRVANTAGE REQUESTS FOR FIRMWARE DOWNLOAD.\r\n");
     c30:	4860      	ldr	r0, [pc, #384]	; (db4 <FotaAppTask+0x808>)
     c32:	4b53      	ldr	r3, [pc, #332]	; (d80 <FotaAppTask+0x7d4>)
     c34:	4798      	blx	r3
            			FotaMainState = ACCEPT_THE_REQUEST_FOR_FIRMWARE_DOWNLOAD;
     c36:	2305      	movs	r3, #5
     c38:	702b      	strb	r3, [r5, #0]
            			FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     c3a:	2300      	movs	r3, #0
     c3c:	706b      	strb	r3, [r5, #1]
     c3e:	e7d0      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : AIRVANTAGE REQUESTS FOR FIRMWARE INSTALLATION.\r\n");
     c40:	485d      	ldr	r0, [pc, #372]	; (db8 <FotaAppTask+0x80c>)
     c42:	4b4f      	ldr	r3, [pc, #316]	; (d80 <FotaAppTask+0x7d4>)
     c44:	4798      	blx	r3
            			FotaMainState = ACCEPT_THE_REQUEST_FOR_FIRMWARE_INSTALL;
     c46:	2306      	movs	r3, #6
     c48:	702b      	strb	r3, [r5, #0]
            			FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     c4a:	2300      	movs	r3, #0
     c4c:	706b      	strb	r3, [r5, #1]
     c4e:	e7c8      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : STARTING UP THE DM SESSION WITH AIRVANTAGE.\r\n");
     c50:	485a      	ldr	r0, [pc, #360]	; (dbc <FotaAppTask+0x810>)
     c52:	4b4b      	ldr	r3, [pc, #300]	; (d80 <FotaAppTask+0x7d4>)
     c54:	4798      	blx	r3
     c56:	e7c4      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : DM SESSION STARTED AND TRANSACTIONS OCCURED.\r\n");
     c58:	4859      	ldr	r0, [pc, #356]	; (dc0 <FotaAppTask+0x814>)
     c5a:	4b49      	ldr	r3, [pc, #292]	; (d80 <FotaAppTask+0x7d4>)
     c5c:	4798      	blx	r3
     c5e:	e7c0      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : DM SESSION WITH AIRVANTAGE IS CLOSED.\r\n");
     c60:	4858      	ldr	r0, [pc, #352]	; (dc4 <FotaAppTask+0x818>)
     c62:	4b47      	ldr	r3, [pc, #284]	; (d80 <FotaAppTask+0x7d4>)
     c64:	4798      	blx	r3
            			if(PrevServiceIndicationReceived != DM_SESSION_STARTED_TRANSACTIONS_OCCURED)
     c66:	4b4f      	ldr	r3, [pc, #316]	; (da4 <FotaAppTask+0x7f8>)
     c68:	781b      	ldrb	r3, [r3, #0]
     c6a:	2b06      	cmp	r3, #6
     c6c:	d0b9      	beq.n	be2 <FotaAppTask+0x636>
                			bFotaVerificationIsDone = true;
     c6e:	2301      	movs	r3, #1
     c70:	70eb      	strb	r3, [r5, #3]
     c72:	e7b6      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : FIRMWARE IS AVAILABLE FOR DOWNLOAD.\r\n");
     c74:	4854      	ldr	r0, [pc, #336]	; (dc8 <FotaAppTask+0x81c>)
     c76:	4b42      	ldr	r3, [pc, #264]	; (d80 <FotaAppTask+0x7d4>)
     c78:	4798      	blx	r3
     c7a:	e7b2      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : FIRMWARE IS DOWNLOADED AND STORED IN FLASH.\r\n");
     c7c:	4853      	ldr	r0, [pc, #332]	; (dcc <FotaAppTask+0x820>)
     c7e:	4b40      	ldr	r3, [pc, #256]	; (d80 <FotaAppTask+0x7d4>)
     c80:	4798      	blx	r3
     c82:	e7ae      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : DOWNLOADED PACKAGE IS VERIFIED AS CERTIFIED.\r\n");
     c84:	4852      	ldr	r0, [pc, #328]	; (dd0 <FotaAppTask+0x824>)
     c86:	4b3e      	ldr	r3, [pc, #248]	; (d80 <FotaAppTask+0x7d4>)
     c88:	4798      	blx	r3
     c8a:	e7aa      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : STARTING THE FIRMWARE UPDATE.\r\n");
     c8c:	4851      	ldr	r0, [pc, #324]	; (dd4 <FotaAppTask+0x828>)
     c8e:	4b3c      	ldr	r3, [pc, #240]	; (d80 <FotaAppTask+0x7d4>)
     c90:	4798      	blx	r3
     c92:	e7a6      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : FAILED TO UPDATE THE FIRMWARE.\r\n");
     c94:	4850      	ldr	r0, [pc, #320]	; (dd8 <FotaAppTask+0x82c>)
     c96:	4b3a      	ldr	r3, [pc, #232]	; (d80 <FotaAppTask+0x7d4>)
     c98:	4798      	blx	r3
            			bFotaVerificationIsDone = true;
     c9a:	2301      	movs	r3, #1
     c9c:	70eb      	strb	r3, [r5, #3]
     c9e:	e7a0      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : FIRMWARE UPDATED SUCCESSFULLY.\r\n");
     ca0:	484e      	ldr	r0, [pc, #312]	; (ddc <FotaAppTask+0x830>)
     ca2:	4b37      	ldr	r3, [pc, #220]	; (d80 <FotaAppTask+0x7d4>)
     ca4:	4798      	blx	r3
            			bFotaVerificationIsDone = true;
     ca6:	2301      	movs	r3, #1
     ca8:	70eb      	strb	r3, [r5, #3]
     caa:	e79a      	b.n	be2 <FotaAppTask+0x636>
            			DEBUG_PRINT("FOTA : DOWNLOAD IN PROGRESS.\r\n");
     cac:	484c      	ldr	r0, [pc, #304]	; (de0 <FotaAppTask+0x834>)
     cae:	4b34      	ldr	r3, [pc, #208]	; (d80 <FotaAppTask+0x7d4>)
     cb0:	4798      	blx	r3
     cb2:	e796      	b.n	be2 <FotaAppTask+0x636>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     cb4:	786b      	ldrb	r3, [r5, #1]
     cb6:	b32b      	cbz	r3, d04 <FotaAppTask+0x758>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     cb8:	2b01      	cmp	r3, #1
     cba:	d194      	bne.n	be6 <FotaAppTask+0x63a>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     cbc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     cc0:	4639      	mov	r1, r7
     cc2:	4b48      	ldr	r3, [pc, #288]	; (de4 <FotaAppTask+0x838>)
     cc4:	6818      	ldr	r0, [r3, #0]
     cc6:	4b48      	ldr	r3, [pc, #288]	; (de8 <FotaAppTask+0x83c>)
     cc8:	4798      	blx	r3
     cca:	2801      	cmp	r0, #1
     ccc:	d18b      	bne.n	be6 <FotaAppTask+0x63a>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSR_ACCEPT_FW_DOWNLOAD)
     cce:	792b      	ldrb	r3, [r5, #4]
     cd0:	2b21      	cmp	r3, #33	; 0x21
     cd2:	f040 80ab 	bne.w	e2c <FotaAppTask+0x880>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     cd6:	68a8      	ldr	r0, [r5, #8]
     cd8:	4b44      	ldr	r3, [pc, #272]	; (dec <FotaAppTask+0x840>)
     cda:	4798      	blx	r3
     cdc:	2800      	cmp	r0, #0
     cde:	f000 809d 	beq.w	e1c <FotaAppTask+0x870>
                            DEBUG_PRINT("FOTA : Accepted the request for FW Download and sent the acknowledgment to Airvantage");
     ce2:	4843      	ldr	r0, [pc, #268]	; (df0 <FotaAppTask+0x844>)
     ce4:	4e26      	ldr	r6, [pc, #152]	; (d80 <FotaAppTask+0x7d4>)
     ce6:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     ce8:	88e9      	ldrh	r1, [r5, #6]
     cea:	68a8      	ldr	r0, [r5, #8]
     cec:	4b41      	ldr	r3, [pc, #260]	; (df4 <FotaAppTask+0x848>)
     cee:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     cf0:	4841      	ldr	r0, [pc, #260]	; (df8 <FotaAppTask+0x84c>)
     cf2:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     cf4:	2300      	movs	r3, #0
     cf6:	706b      	strb	r3, [r5, #1]
                            FotaMainState = SYSTEM_IS_IN_FIRMWARE_DOWNLOAD_MODE;
     cf8:	2304      	movs	r3, #4
     cfa:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     cfc:	68a8      	ldr	r0, [r5, #8]
     cfe:	4b21      	ldr	r3, [pc, #132]	; (d84 <FotaAppTask+0x7d8>)
     d00:	4798      	blx	r3
     d02:	e770      	b.n	be6 <FotaAppTask+0x63a>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     d04:	4b3d      	ldr	r3, [pc, #244]	; (dfc <FotaAppTask+0x850>)
     d06:	6818      	ldr	r0, [r3, #0]
     d08:	4b3d      	ldr	r3, [pc, #244]	; (e00 <FotaAppTask+0x854>)
     d0a:	4798      	blx	r3
     d0c:	2800      	cmp	r0, #0
     d0e:	d130      	bne.n	d72 <FotaAppTask+0x7c6>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     d10:	2100      	movs	r1, #0
     d12:	4b3c      	ldr	r3, [pc, #240]	; (e04 <FotaAppTask+0x858>)
     d14:	6818      	ldr	r0, [r3, #0]
     d16:	4b3c      	ldr	r3, [pc, #240]	; (e08 <FotaAppTask+0x85c>)
     d18:	4798      	blx	r3
     d1a:	2801      	cmp	r0, #1
     d1c:	d003      	beq.n	d26 <FotaAppTask+0x77a>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     d1e:	483b      	ldr	r0, [pc, #236]	; (e0c <FotaAppTask+0x860>)
     d20:	4b17      	ldr	r3, [pc, #92]	; (d80 <FotaAppTask+0x7d4>)
     d22:	4798      	blx	r3
     d24:	e75f      	b.n	be6 <FotaAppTask+0x63a>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     d26:	2305      	movs	r3, #5
     d28:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_WDSR_ACCEPT_FW_DOWNLOAD;
     d2c:	2321      	movs	r3, #33	; 0x21
     d2e:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     d32:	2300      	movs	r3, #0
     d34:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     d36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     d3a:	4669      	mov	r1, sp
     d3c:	482f      	ldr	r0, [pc, #188]	; (dfc <FotaAppTask+0x850>)
     d3e:	6800      	ldr	r0, [r0, #0]
     d40:	4e33      	ldr	r6, [pc, #204]	; (e10 <FotaAppTask+0x864>)
     d42:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     d44:	2801      	cmp	r0, #1
     d46:	d007      	beq.n	d58 <FotaAppTask+0x7ac>
                            DEBUG_PRINT("Error: Failed to sent FW download acceptance to Tx Task");
     d48:	4832      	ldr	r0, [pc, #200]	; (e14 <FotaAppTask+0x868>)
     d4a:	4b0d      	ldr	r3, [pc, #52]	; (d80 <FotaAppTask+0x7d4>)
     d4c:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     d4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     d52:	4b16      	ldr	r3, [pc, #88]	; (dac <FotaAppTask+0x800>)
     d54:	4798      	blx	r3
     d56:	e746      	b.n	be6 <FotaAppTask+0x63a>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     d58:	2300      	movs	r3, #0
     d5a:	461a      	mov	r2, r3
     d5c:	4619      	mov	r1, r3
     d5e:	4829      	ldr	r0, [pc, #164]	; (e04 <FotaAppTask+0x858>)
     d60:	6800      	ldr	r0, [r0, #0]
     d62:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     d64:	2301      	movs	r3, #1
     d66:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     d68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     d6c:	4b0f      	ldr	r3, [pc, #60]	; (dac <FotaAppTask+0x800>)
     d6e:	4798      	blx	r3
     d70:	e739      	b.n	be6 <FotaAppTask+0x63a>
                    DEBUG_PRINT("Transmit Queue is not empty");
     d72:	4829      	ldr	r0, [pc, #164]	; (e18 <FotaAppTask+0x86c>)
     d74:	4b02      	ldr	r3, [pc, #8]	; (d80 <FotaAppTask+0x7d4>)
     d76:	4798      	blx	r3
     d78:	e735      	b.n	be6 <FotaAppTask+0x63a>
     d7a:	bf00      	nop
     d7c:	00007628 	.word	0x00007628
     d80:	0000313d 	.word	0x0000313d
     d84:	00004e75 	.word	0x00004e75
     d88:	00002845 	.word	0x00002845
     d8c:	00004d95 	.word	0x00004d95
     d90:	000027dd 	.word	0x000027dd
     d94:	00007848 	.word	0x00007848
     d98:	00006bf5 	.word	0x00006bf5
     d9c:	00006921 	.word	0x00006921
     da0:	00007854 	.word	0x00007854
     da4:	20000000 	.word	0x20000000
     da8:	00003335 	.word	0x00003335
     dac:	00005e2d 	.word	0x00005e2d
     db0:	00007880 	.word	0x00007880
     db4:	000078b4 	.word	0x000078b4
     db8:	000078e8 	.word	0x000078e8
     dbc:	00007920 	.word	0x00007920
     dc0:	00007958 	.word	0x00007958
     dc4:	00007990 	.word	0x00007990
     dc8:	000079c0 	.word	0x000079c0
     dcc:	000079f0 	.word	0x000079f0
     dd0:	00007a28 	.word	0x00007a28
     dd4:	00007a60 	.word	0x00007a60
     dd8:	00007a88 	.word	0x00007a88
     ddc:	00007ab0 	.word	0x00007ab0
     de0:	00007ad8 	.word	0x00007ad8
     de4:	20003574 	.word	0x20003574
     de8:	000054ad 	.word	0x000054ad
     dec:	00000591 	.word	0x00000591
     df0:	00007b30 	.word	0x00007b30
     df4:	000030f9 	.word	0x000030f9
     df8:	00008e50 	.word	0x00008e50
     dfc:	20003568 	.word	0x20003568
     e00:	00005815 	.word	0x00005815
     e04:	2000357c 	.word	0x2000357c
     e08:	00005635 	.word	0x00005635
     e0c:	00007584 	.word	0x00007584
     e10:	0000519d 	.word	0x0000519d
     e14:	00007af8 	.word	0x00007af8
     e18:	000075b0 	.word	0x000075b0
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     e1c:	4843      	ldr	r0, [pc, #268]	; (f2c <FotaAppTask+0x980>)
     e1e:	4e44      	ldr	r6, [pc, #272]	; (f30 <FotaAppTask+0x984>)
     e20:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     e22:	4844      	ldr	r0, [pc, #272]	; (f34 <FotaAppTask+0x988>)
     e24:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     e26:	2300      	movs	r3, #0
     e28:	706b      	strb	r3, [r5, #1]
     e2a:	e767      	b.n	cfc <FotaAppTask+0x750>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     e2c:	4842      	ldr	r0, [pc, #264]	; (f38 <FotaAppTask+0x98c>)
     e2e:	4b40      	ldr	r3, [pc, #256]	; (f30 <FotaAppTask+0x984>)
     e30:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     e32:	2300      	movs	r3, #0
     e34:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     e36:	68a8      	ldr	r0, [r5, #8]
     e38:	4b40      	ldr	r3, [pc, #256]	; (f3c <FotaAppTask+0x990>)
     e3a:	4798      	blx	r3
     e3c:	e6d3      	b.n	be6 <FotaAppTask+0x63a>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     e3e:	786b      	ldrb	r3, [r5, #1]
     e40:	b1c3      	cbz	r3, e74 <FotaAppTask+0x8c8>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     e42:	2b01      	cmp	r3, #1
     e44:	f47f aecf 	bne.w	be6 <FotaAppTask+0x63a>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     e48:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     e4c:	4639      	mov	r1, r7
     e4e:	4b3c      	ldr	r3, [pc, #240]	; (f40 <FotaAppTask+0x994>)
     e50:	6818      	ldr	r0, [r3, #0]
     e52:	4b3c      	ldr	r3, [pc, #240]	; (f44 <FotaAppTask+0x998>)
     e54:	4798      	blx	r3
     e56:	2801      	cmp	r0, #1
     e58:	f47f aec5 	bne.w	be6 <FotaAppTask+0x63a>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSR_ACCEPT_FW_INSTALL)
     e5c:	792b      	ldrb	r3, [r5, #4]
     e5e:	2b22      	cmp	r3, #34	; 0x22
     e60:	d043      	beq.n	eea <FotaAppTask+0x93e>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     e62:	4835      	ldr	r0, [pc, #212]	; (f38 <FotaAppTask+0x98c>)
     e64:	4b32      	ldr	r3, [pc, #200]	; (f30 <FotaAppTask+0x984>)
     e66:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     e68:	2300      	movs	r3, #0
     e6a:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     e6c:	68a8      	ldr	r0, [r5, #8]
     e6e:	4b33      	ldr	r3, [pc, #204]	; (f3c <FotaAppTask+0x990>)
     e70:	4798      	blx	r3
     e72:	e6b8      	b.n	be6 <FotaAppTask+0x63a>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     e74:	4b34      	ldr	r3, [pc, #208]	; (f48 <FotaAppTask+0x99c>)
     e76:	6818      	ldr	r0, [r3, #0]
     e78:	4b34      	ldr	r3, [pc, #208]	; (f4c <FotaAppTask+0x9a0>)
     e7a:	4798      	blx	r3
     e7c:	2800      	cmp	r0, #0
     e7e:	d130      	bne.n	ee2 <FotaAppTask+0x936>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     e80:	2100      	movs	r1, #0
     e82:	4b33      	ldr	r3, [pc, #204]	; (f50 <FotaAppTask+0x9a4>)
     e84:	6818      	ldr	r0, [r3, #0]
     e86:	4b33      	ldr	r3, [pc, #204]	; (f54 <FotaAppTask+0x9a8>)
     e88:	4798      	blx	r3
     e8a:	2801      	cmp	r0, #1
     e8c:	d003      	beq.n	e96 <FotaAppTask+0x8ea>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     e8e:	4832      	ldr	r0, [pc, #200]	; (f58 <FotaAppTask+0x9ac>)
     e90:	4b27      	ldr	r3, [pc, #156]	; (f30 <FotaAppTask+0x984>)
     e92:	4798      	blx	r3
     e94:	e6a7      	b.n	be6 <FotaAppTask+0x63a>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     e96:	2305      	movs	r3, #5
     e98:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_WDSR_ACCEPT_FW_INSTALL;
     e9c:	2322      	movs	r3, #34	; 0x22
     e9e:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     ea2:	2300      	movs	r3, #0
     ea4:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     ea6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     eaa:	4669      	mov	r1, sp
     eac:	4826      	ldr	r0, [pc, #152]	; (f48 <FotaAppTask+0x99c>)
     eae:	6800      	ldr	r0, [r0, #0]
     eb0:	4e2a      	ldr	r6, [pc, #168]	; (f5c <FotaAppTask+0x9b0>)
     eb2:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     eb4:	2801      	cmp	r0, #1
     eb6:	d007      	beq.n	ec8 <FotaAppTask+0x91c>
                            DEBUG_PRINT("Error: Failed to sent FW install acceptance to Tx Task");
     eb8:	4829      	ldr	r0, [pc, #164]	; (f60 <FotaAppTask+0x9b4>)
     eba:	4b1d      	ldr	r3, [pc, #116]	; (f30 <FotaAppTask+0x984>)
     ebc:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     ebe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     ec2:	4b28      	ldr	r3, [pc, #160]	; (f64 <FotaAppTask+0x9b8>)
     ec4:	4798      	blx	r3
     ec6:	e68e      	b.n	be6 <FotaAppTask+0x63a>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     ec8:	2300      	movs	r3, #0
     eca:	461a      	mov	r2, r3
     ecc:	4619      	mov	r1, r3
     ece:	4820      	ldr	r0, [pc, #128]	; (f50 <FotaAppTask+0x9a4>)
     ed0:	6800      	ldr	r0, [r0, #0]
     ed2:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     ed4:	2301      	movs	r3, #1
     ed6:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     ed8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     edc:	4b21      	ldr	r3, [pc, #132]	; (f64 <FotaAppTask+0x9b8>)
     ede:	4798      	blx	r3
     ee0:	e681      	b.n	be6 <FotaAppTask+0x63a>
                    DEBUG_PRINT("Transmit Queue is not empty");
     ee2:	4821      	ldr	r0, [pc, #132]	; (f68 <FotaAppTask+0x9bc>)
     ee4:	4b12      	ldr	r3, [pc, #72]	; (f30 <FotaAppTask+0x984>)
     ee6:	4798      	blx	r3
     ee8:	e67d      	b.n	be6 <FotaAppTask+0x63a>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     eea:	68a8      	ldr	r0, [r5, #8]
     eec:	4b1f      	ldr	r3, [pc, #124]	; (f6c <FotaAppTask+0x9c0>)
     eee:	4798      	blx	r3
     ef0:	b180      	cbz	r0, f14 <FotaAppTask+0x968>
                            DEBUG_PRINT("FOTA : Accepted the request for FW Installation and sent the acknowledgment to Airvantage");
     ef2:	481f      	ldr	r0, [pc, #124]	; (f70 <FotaAppTask+0x9c4>)
     ef4:	4e0e      	ldr	r6, [pc, #56]	; (f30 <FotaAppTask+0x984>)
     ef6:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     ef8:	88e9      	ldrh	r1, [r5, #6]
     efa:	68a8      	ldr	r0, [r5, #8]
     efc:	4b1d      	ldr	r3, [pc, #116]	; (f74 <FotaAppTask+0x9c8>)
     efe:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     f00:	480c      	ldr	r0, [pc, #48]	; (f34 <FotaAppTask+0x988>)
     f02:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     f04:	2300      	movs	r3, #0
     f06:	706b      	strb	r3, [r5, #1]
                            FotaMainState = SYSTEM_IS_IN_FIRMWARE_DOWNLOAD_MODE;
     f08:	2304      	movs	r3, #4
     f0a:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     f0c:	68a8      	ldr	r0, [r5, #8]
     f0e:	4b0b      	ldr	r3, [pc, #44]	; (f3c <FotaAppTask+0x990>)
     f10:	4798      	blx	r3
     f12:	e668      	b.n	be6 <FotaAppTask+0x63a>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     f14:	4805      	ldr	r0, [pc, #20]	; (f2c <FotaAppTask+0x980>)
     f16:	4e06      	ldr	r6, [pc, #24]	; (f30 <FotaAppTask+0x984>)
     f18:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     f1a:	4806      	ldr	r0, [pc, #24]	; (f34 <FotaAppTask+0x988>)
     f1c:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     f1e:	2300      	movs	r3, #0
     f20:	706b      	strb	r3, [r5, #1]
     f22:	e7f3      	b.n	f0c <FotaAppTask+0x960>
        vPortFree(responseBuffer);
     f24:	4640      	mov	r0, r8
     f26:	4b05      	ldr	r3, [pc, #20]	; (f3c <FotaAppTask+0x990>)
     f28:	4798      	blx	r3
     f2a:	e65c      	b.n	be6 <FotaAppTask+0x63a>
     f2c:	00007600 	.word	0x00007600
     f30:	0000313d 	.word	0x0000313d
     f34:	00008e50 	.word	0x00008e50
     f38:	00007628 	.word	0x00007628
     f3c:	00004e75 	.word	0x00004e75
     f40:	20003574 	.word	0x20003574
     f44:	000054ad 	.word	0x000054ad
     f48:	20003568 	.word	0x20003568
     f4c:	00005815 	.word	0x00005815
     f50:	2000357c 	.word	0x2000357c
     f54:	00005635 	.word	0x00005635
     f58:	00007584 	.word	0x00007584
     f5c:	0000519d 	.word	0x0000519d
     f60:	00007b88 	.word	0x00007b88
     f64:	00005e2d 	.word	0x00005e2d
     f68:	000075b0 	.word	0x000075b0
     f6c:	00000591 	.word	0x00000591
     f70:	00007bc0 	.word	0x00007bc0
     f74:	000030f9 	.word	0x000030f9

00000f78 <isFotaVerificationDone>:
}
     f78:	4b01      	ldr	r3, [pc, #4]	; (f80 <isFotaVerificationDone+0x8>)
     f7a:	78d8      	ldrb	r0, [r3, #3]
     f7c:	4770      	bx	lr
     f7e:	bf00      	nop
     f80:	2000026c 	.word	0x2000026c

00000f84 <sensorTaskSchedule>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void sensorTaskSchedule(void)
{
     f84:	b530      	push	{r4, r5, lr}
     f86:	b083      	sub	sp, #12
	BaseType_t xResult;
	static SENSOR_INDEX_T sensorIndex = SENSOR_0;
	SENSOR_DATA_REQUEST_TYPE request;
	const TickType_t xSensorScanTriggerWaitMs = pdMS_TO_TICKS(500UL);
	int32_t bytesRead;
	uint16_t adcResult = 0;
     f88:	2300      	movs	r3, #0
     f8a:	f8ad 3006 	strh.w	r3, [sp, #6]
	static uint8_t sampleIndex = 0;
	uint16_t adcCountAveraged = 0;
	uint32_t voltageInMv = 0;
	double_t voltage = 0;

	switch(sensorMainState)
     f8e:	4b3a      	ldr	r3, [pc, #232]	; (1078 <sensorTaskSchedule+0xf4>)
     f90:	781b      	ldrb	r3, [r3, #0]
     f92:	2b01      	cmp	r3, #1
     f94:	d010      	beq.n	fb8 <sensorTaskSchedule+0x34>
     f96:	b11b      	cbz	r3, fa0 <sensorTaskSchedule+0x1c>
     f98:	2b02      	cmp	r3, #2
     f9a:	d047      	beq.n	102c <sensorTaskSchedule+0xa8>
		break;

		default:
		break;
	}
}
     f9c:	b003      	add	sp, #12
     f9e:	bd30      	pop	{r4, r5, pc}
			xResult = xSemaphoreTake(SensorScanSemaphore, xSensorScanTriggerWaitMs);
     fa0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     fa4:	4b35      	ldr	r3, [pc, #212]	; (107c <sensorTaskSchedule+0xf8>)
     fa6:	6818      	ldr	r0, [r3, #0]
     fa8:	4b35      	ldr	r3, [pc, #212]	; (1080 <sensorTaskSchedule+0xfc>)
     faa:	4798      	blx	r3
			if(xResult == pdPASS)
     fac:	2801      	cmp	r0, #1
     fae:	d1f5      	bne.n	f9c <sensorTaskSchedule+0x18>
				sensorMainState = SCAN_ALL_OF_THE_SENSOR_SELECT_LINES;
     fb0:	2201      	movs	r2, #1
     fb2:	4b31      	ldr	r3, [pc, #196]	; (1078 <sensorTaskSchedule+0xf4>)
     fb4:	701a      	strb	r2, [r3, #0]
     fb6:	e7f1      	b.n	f9c <sensorTaskSchedule+0x18>
			if(gpio_get_pin_level(sensorInputData[sensorIndex].selectLine) == false)
     fb8:	4b2f      	ldr	r3, [pc, #188]	; (1078 <sensorTaskSchedule+0xf4>)
     fba:	7d1a      	ldrb	r2, [r3, #20]
     fbc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
     fc0:	791d      	ldrb	r5, [r3, #4]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     fc2:	4668      	mov	r0, sp
     fc4:	4b2f      	ldr	r3, [pc, #188]	; (1084 <sensorTaskSchedule+0x100>)
     fc6:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     fc8:	096b      	lsrs	r3, r5, #5
     fca:	492f      	ldr	r1, [pc, #188]	; (1088 <sensorTaskSchedule+0x104>)
     fcc:	01db      	lsls	r3, r3, #7
     fce:	18ca      	adds	r2, r1, r3
     fd0:	58c9      	ldr	r1, [r1, r3]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     fd2:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     fd4:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     fd6:	405c      	eors	r4, r3
     fd8:	400c      	ands	r4, r1
     fda:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     fdc:	4668      	mov	r0, sp
     fde:	4b2b      	ldr	r3, [pc, #172]	; (108c <sensorTaskSchedule+0x108>)
     fe0:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     fe2:	f005 051f 	and.w	r5, r5, #31
     fe6:	2301      	movs	r3, #1
     fe8:	fa03 f505 	lsl.w	r5, r3, r5
     fec:	4225      	tst	r5, r4
     fee:	d00c      	beq.n	100a <sensorTaskSchedule+0x86>
				sensorOutputData[sensorIndex].active = false;
     ff0:	4a21      	ldr	r2, [pc, #132]	; (1078 <sensorTaskSchedule+0xf4>)
				sensorIndex++;
     ff2:	7d13      	ldrb	r3, [r2, #20]
     ff4:	3301      	adds	r3, #1
     ff6:	b2db      	uxtb	r3, r3
     ff8:	7513      	strb	r3, [r2, #20]
				if(sensorIndex >= MAX_SENSOR_COUNT)
     ffa:	2b07      	cmp	r3, #7
     ffc:	d9ce      	bls.n	f9c <sensorTaskSchedule+0x18>
					sensorMainState = FETCH_ADC_READINGS_FOR_ACTIVE_SENSORS;
     ffe:	4613      	mov	r3, r2
    1000:	2202      	movs	r2, #2
    1002:	701a      	strb	r2, [r3, #0]
					sensorIndex = SENSOR_0;
    1004:	2200      	movs	r2, #0
    1006:	751a      	strb	r2, [r3, #20]
    1008:	e7c8      	b.n	f9c <sensorTaskSchedule+0x18>
				ConsoleDebugPrint("Select Line Low  - Port",(sensorIndex+1));
    100a:	4c1b      	ldr	r4, [pc, #108]	; (1078 <sensorTaskSchedule+0xf4>)
    100c:	7d21      	ldrb	r1, [r4, #20]
    100e:	4419      	add	r1, r3
    1010:	481f      	ldr	r0, [pc, #124]	; (1090 <sensorTaskSchedule+0x10c>)
    1012:	4b20      	ldr	r3, [pc, #128]	; (1094 <sensorTaskSchedule+0x110>)
    1014:	4798      	blx	r3
				sensorIndex++;
    1016:	7d23      	ldrb	r3, [r4, #20]
    1018:	3301      	adds	r3, #1
    101a:	b2db      	uxtb	r3, r3
    101c:	7523      	strb	r3, [r4, #20]
				if(sensorIndex >= MAX_SENSOR_COUNT)
    101e:	2b07      	cmp	r3, #7
    1020:	d9bc      	bls.n	f9c <sensorTaskSchedule+0x18>
					sensorMainState = FETCH_ADC_READINGS_FOR_ACTIVE_SENSORS;
    1022:	2202      	movs	r2, #2
    1024:	7022      	strb	r2, [r4, #0]
					sensorIndex = SENSOR_0;
    1026:	2200      	movs	r2, #0
    1028:	7522      	strb	r2, [r4, #20]
    102a:	e7b7      	b.n	f9c <sensorTaskSchedule+0x18>
			if(sensorIndex < MAX_SENSOR_COUNT)
    102c:	4b12      	ldr	r3, [pc, #72]	; (1078 <sensorTaskSchedule+0xf4>)
    102e:	7d1b      	ldrb	r3, [r3, #20]
    1030:	2b07      	cmp	r3, #7
    1032:	d904      	bls.n	103e <sensorTaskSchedule+0xba>
				sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
    1034:	4b10      	ldr	r3, [pc, #64]	; (1078 <sensorTaskSchedule+0xf4>)
    1036:	2200      	movs	r2, #0
    1038:	701a      	strb	r2, [r3, #0]
				sensorIndex = SENSOR_0;
    103a:	751a      	strb	r2, [r3, #20]
}
    103c:	e7ae      	b.n	f9c <sensorTaskSchedule+0x18>
				bytesRead = sensorAdcReadChannel(sensorInputData[sensorIndex].adcChannel,&adcResult,2);
    103e:	4c0e      	ldr	r4, [pc, #56]	; (1078 <sensorTaskSchedule+0xf4>)
    1040:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1044:	2202      	movs	r2, #2
    1046:	f10d 0106 	add.w	r1, sp, #6
    104a:	7958      	ldrb	r0, [r3, #5]
    104c:	4b12      	ldr	r3, [pc, #72]	; (1098 <sensorTaskSchedule+0x114>)
    104e:	4798      	blx	r3
				if(sampleIndex < MAX_ADC_SAMPLES)
    1050:	7d63      	ldrb	r3, [r4, #21]
    1052:	b94b      	cbnz	r3, 1068 <sensorTaskSchedule+0xe4>
					adcAveragingBuffer[sampleIndex] = adcResult;
    1054:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    1058:	8322      	strh	r2, [r4, #24]
					sampleIndex++;
    105a:	2201      	movs	r2, #1
    105c:	7562      	strb	r2, [r4, #21]
			if(sensorIndex >= MAX_SENSOR_COUNT)
    105e:	4b06      	ldr	r3, [pc, #24]	; (1078 <sensorTaskSchedule+0xf4>)
    1060:	7d1b      	ldrb	r3, [r3, #20]
    1062:	2b07      	cmp	r3, #7
    1064:	d99a      	bls.n	f9c <sensorTaskSchedule+0x18>
    1066:	e7e5      	b.n	1034 <sensorTaskSchedule+0xb0>
					sampleIndex = 0;
    1068:	4b03      	ldr	r3, [pc, #12]	; (1078 <sensorTaskSchedule+0xf4>)
    106a:	2200      	movs	r2, #0
    106c:	755a      	strb	r2, [r3, #21]
					memset(adcAveragingBuffer,0,MAX_ADC_SAMPLES);
    106e:	761a      	strb	r2, [r3, #24]
					sensorIndex++;
    1070:	7d1a      	ldrb	r2, [r3, #20]
    1072:	3201      	adds	r2, #1
    1074:	751a      	strb	r2, [r3, #20]
    1076:	e7f2      	b.n	105e <sensorTaskSchedule+0xda>
    1078:	20000278 	.word	0x20000278
    107c:	20003578 	.word	0x20003578
    1080:	00005635 	.word	0x00005635
    1084:	00003955 	.word	0x00003955
    1088:	41008000 	.word	0x41008000
    108c:	00003963 	.word	0x00003963
    1090:	00007c1c 	.word	0x00007c1c
    1094:	000031c9 	.word	0x000031c9
    1098:	000004f9 	.word	0x000004f9

0000109c <SensorTask>:
{
    109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10a0:	b093      	sub	sp, #76	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
    10a2:	4b8f      	ldr	r3, [pc, #572]	; (12e0 <SensorTask+0x244>)
    10a4:	4798      	blx	r3
	intializeSensorSelectLines();
    10a6:	4b8f      	ldr	r3, [pc, #572]	; (12e4 <SensorTask+0x248>)
    10a8:	4798      	blx	r3
	sensorAdcInitialize();
    10aa:	4b8f      	ldr	r3, [pc, #572]	; (12e8 <SensorTask+0x24c>)
    10ac:	4798      	blx	r3
    10ae:	4b8f      	ldr	r3, [pc, #572]	; (12ec <SensorTask+0x250>)
    10b0:	7c1f      	ldrb	r7, [r3, #16]
    10b2:	7c5e      	ldrb	r6, [r3, #17]
    10b4:	7b9a      	ldrb	r2, [r3, #14]
    10b6:	920e      	str	r2, [sp, #56]	; 0x38
    10b8:	7bda      	ldrb	r2, [r3, #15]
    10ba:	9210      	str	r2, [sp, #64]	; 0x40
    10bc:	f893 900c 	ldrb.w	r9, [r3, #12]
    10c0:	f893 800d 	ldrb.w	r8, [r3, #13]
    10c4:	f893 b00a 	ldrb.w	fp, [r3, #10]
    10c8:	f893 a00b 	ldrb.w	sl, [r3, #11]
    10cc:	7a1d      	ldrb	r5, [r3, #8]
    10ce:	7a5c      	ldrb	r4, [r3, #9]
    10d0:	f893 c006 	ldrb.w	ip, [r3, #6]
    10d4:	f893 e007 	ldrb.w	lr, [r3, #7]
    10d8:	7918      	ldrb	r0, [r3, #4]
    10da:	795b      	ldrb	r3, [r3, #5]
    10dc:	930c      	str	r3, [sp, #48]	; 0x30
    10de:	2201      	movs	r2, #1
    10e0:	2300      	movs	r3, #0
    10e2:	930f      	str	r3, [sp, #60]	; 0x3c
    10e4:	930d      	str	r3, [sp, #52]	; 0x34
    10e6:	930b      	str	r3, [sp, #44]	; 0x2c
    10e8:	930a      	str	r3, [sp, #40]	; 0x28
    10ea:	9309      	str	r3, [sp, #36]	; 0x24
    10ec:	9308      	str	r3, [sp, #32]
    10ee:	9307      	str	r3, [sp, #28]
    10f0:	9306      	str	r3, [sp, #24]
    10f2:	9305      	str	r3, [sp, #20]
    10f4:	9304      	str	r3, [sp, #16]
    10f6:	9303      	str	r3, [sp, #12]
    10f8:	9302      	str	r3, [sp, #8]
    10fa:	9301      	str	r3, [sp, #4]
				sensorInputData[SENSOR_1].adcChannel = SENSOR_1_AIN1;
    10fc:	9200      	str	r2, [sp, #0]
    10fe:	9311      	str	r3, [sp, #68]	; 0x44
    1100:	e007      	b.n	1112 <SensorTask+0x76>
    1102:	2101      	movs	r1, #1
    1104:	910a      	str	r1, [sp, #40]	; 0x28
				sensorInputData[SENSOR_2].adcChannel = SENSOR_2_AIN2;
    1106:	2402      	movs	r4, #2
    1108:	9900      	ldr	r1, [sp, #0]
    110a:	9109      	str	r1, [sp, #36]	; 0x24
				sensorInputData[SENSOR_2].selectLine = SELECT_2;
    110c:	252b      	movs	r5, #43	; 0x2b
    110e:	3201      	adds	r2, #1
    1110:	b2d2      	uxtb	r2, r2
		switch(sensorIndex)
    1112:	1e51      	subs	r1, r2, #1
    1114:	b2c9      	uxtb	r1, r1
    1116:	2907      	cmp	r1, #7
    1118:	f200 8089 	bhi.w	122e <SensorTask+0x192>
    111c:	a301      	add	r3, pc, #4	; (adr r3, 1124 <SensorTask+0x88>)
    111e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    1122:	bf00      	nop
    1124:	000012c1 	.word	0x000012c1
    1128:	000012d1 	.word	0x000012d1
    112c:	00001103 	.word	0x00001103
    1130:	00001145 	.word	0x00001145
    1134:	00001157 	.word	0x00001157
    1138:	00001169 	.word	0x00001169
    113c:	0000117b 	.word	0x0000117b
    1140:	00001189 	.word	0x00001189
    1144:	2101      	movs	r1, #1
    1146:	9102      	str	r1, [sp, #8]
				sensorInputData[SENSOR_3].adcChannel = SENSOR_3_AIN3;
    1148:	f04f 0a03 	mov.w	sl, #3
    114c:	9900      	ldr	r1, [sp, #0]
    114e:	9101      	str	r1, [sp, #4]
				sensorInputData[SENSOR_3].selectLine = SELECT_3;
    1150:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
    1154:	e7db      	b.n	110e <SensorTask+0x72>
    1156:	2101      	movs	r1, #1
    1158:	9104      	str	r1, [sp, #16]
				sensorInputData[SENSOR_4].adcChannel = SENSOR_4_AIN4;
    115a:	f04f 0804 	mov.w	r8, #4
    115e:	9900      	ldr	r1, [sp, #0]
    1160:	9103      	str	r1, [sp, #12]
				sensorInputData[SENSOR_4].selectLine = SELECT_4;
    1162:	f04f 090b 	mov.w	r9, #11
    1166:	e7d2      	b.n	110e <SensorTask+0x72>
    1168:	2301      	movs	r3, #1
    116a:	9311      	str	r3, [sp, #68]	; 0x44
				sensorInputData[SENSOR_5].adcChannel = SENSOR_5_AIN5;
    116c:	2105      	movs	r1, #5
    116e:	9110      	str	r1, [sp, #64]	; 0x40
    1170:	9900      	ldr	r1, [sp, #0]
    1172:	910f      	str	r1, [sp, #60]	; 0x3c
				sensorInputData[SENSOR_5].selectLine = SELECT_5;
    1174:	210a      	movs	r1, #10
    1176:	910e      	str	r1, [sp, #56]	; 0x38
    1178:	e7c9      	b.n	110e <SensorTask+0x72>
    117a:	2101      	movs	r1, #1
    117c:	9108      	str	r1, [sp, #32]
				sensorInputData[SENSOR_6].adcChannel = SENSOR_6_AIN6;
    117e:	2606      	movs	r6, #6
    1180:	9900      	ldr	r1, [sp, #0]
    1182:	9107      	str	r1, [sp, #28]
				sensorInputData[SENSOR_6].selectLine = SELECT_6;
    1184:	2709      	movs	r7, #9
    1186:	e7c2      	b.n	110e <SensorTask+0x72>
    1188:	9b11      	ldr	r3, [sp, #68]	; 0x44
    118a:	9a01      	ldr	r2, [sp, #4]
    118c:	2a00      	cmp	r2, #0
    118e:	d14a      	bne.n	1226 <SensorTask+0x18a>
    1190:	9a02      	ldr	r2, [sp, #8]
    1192:	b112      	cbz	r2, 119a <SensorTask+0xfe>
    1194:	4a55      	ldr	r2, [pc, #340]	; (12ec <SensorTask+0x250>)
    1196:	f882 a00b 	strb.w	sl, [r2, #11]
    119a:	9a03      	ldr	r2, [sp, #12]
    119c:	b112      	cbz	r2, 11a4 <SensorTask+0x108>
    119e:	4a53      	ldr	r2, [pc, #332]	; (12ec <SensorTask+0x250>)
    11a0:	f882 900c 	strb.w	r9, [r2, #12]
    11a4:	9a04      	ldr	r2, [sp, #16]
    11a6:	b112      	cbz	r2, 11ae <SensorTask+0x112>
    11a8:	4a50      	ldr	r2, [pc, #320]	; (12ec <SensorTask+0x250>)
    11aa:	f882 800d 	strb.w	r8, [r2, #13]
    11ae:	9a05      	ldr	r2, [sp, #20]
    11b0:	b112      	cbz	r2, 11b8 <SensorTask+0x11c>
    11b2:	4a4e      	ldr	r2, [pc, #312]	; (12ec <SensorTask+0x250>)
    11b4:	f882 c006 	strb.w	ip, [r2, #6]
    11b8:	9a06      	ldr	r2, [sp, #24]
    11ba:	b112      	cbz	r2, 11c2 <SensorTask+0x126>
    11bc:	4a4b      	ldr	r2, [pc, #300]	; (12ec <SensorTask+0x250>)
    11be:	f882 e007 	strb.w	lr, [r2, #7]
    11c2:	9a07      	ldr	r2, [sp, #28]
    11c4:	b10a      	cbz	r2, 11ca <SensorTask+0x12e>
    11c6:	4a49      	ldr	r2, [pc, #292]	; (12ec <SensorTask+0x250>)
    11c8:	7417      	strb	r7, [r2, #16]
    11ca:	9a08      	ldr	r2, [sp, #32]
    11cc:	b10a      	cbz	r2, 11d2 <SensorTask+0x136>
    11ce:	4a47      	ldr	r2, [pc, #284]	; (12ec <SensorTask+0x250>)
    11d0:	7456      	strb	r6, [r2, #17]
    11d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    11d4:	b10a      	cbz	r2, 11da <SensorTask+0x13e>
    11d6:	4a45      	ldr	r2, [pc, #276]	; (12ec <SensorTask+0x250>)
    11d8:	7215      	strb	r5, [r2, #8]
    11da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    11dc:	b10a      	cbz	r2, 11e2 <SensorTask+0x146>
    11de:	4a43      	ldr	r2, [pc, #268]	; (12ec <SensorTask+0x250>)
    11e0:	7254      	strb	r4, [r2, #9]
    11e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    11e4:	b10a      	cbz	r2, 11ea <SensorTask+0x14e>
    11e6:	4a41      	ldr	r2, [pc, #260]	; (12ec <SensorTask+0x250>)
    11e8:	7110      	strb	r0, [r2, #4]
    11ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    11ec:	b11a      	cbz	r2, 11f6 <SensorTask+0x15a>
    11ee:	4a3f      	ldr	r2, [pc, #252]	; (12ec <SensorTask+0x250>)
    11f0:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
    11f4:	7151      	strb	r1, [r2, #5]
    11f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    11f8:	b11a      	cbz	r2, 1202 <SensorTask+0x166>
    11fa:	4a3c      	ldr	r2, [pc, #240]	; (12ec <SensorTask+0x250>)
    11fc:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1200:	7391      	strb	r1, [r2, #14]
    1202:	b11b      	cbz	r3, 120c <SensorTask+0x170>
    1204:	4b39      	ldr	r3, [pc, #228]	; (12ec <SensorTask+0x250>)
    1206:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    120a:	73da      	strb	r2, [r3, #15]
				sensorInputData[SENSOR_7].selectLine = SELECT_7;
    120c:	4b37      	ldr	r3, [pc, #220]	; (12ec <SensorTask+0x250>)
    120e:	2208      	movs	r2, #8
    1210:	749a      	strb	r2, [r3, #18]
				sensorInputData[SENSOR_7].adcChannel = SENSOR_7_AIN7;
    1212:	2207      	movs	r2, #7
    1214:	74da      	strb	r2, [r3, #19]
	sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
    1216:	2200      	movs	r2, #0
    1218:	4b34      	ldr	r3, [pc, #208]	; (12ec <SensorTask+0x250>)
    121a:	701a      	strb	r2, [r3, #0]
		sensorTaskSchedule();
    121c:	4d34      	ldr	r5, [pc, #208]	; (12f0 <SensorTask+0x254>)
		kickWatchDog();
    121e:	4c35      	ldr	r4, [pc, #212]	; (12f4 <SensorTask+0x258>)
		sensorTaskSchedule();
    1220:	47a8      	blx	r5
		kickWatchDog();
    1222:	47a0      	blx	r4
    1224:	e7fc      	b.n	1220 <SensorTask+0x184>
    1226:	4a31      	ldr	r2, [pc, #196]	; (12ec <SensorTask+0x250>)
    1228:	f882 b00a 	strb.w	fp, [r2, #10]
    122c:	e7b0      	b.n	1190 <SensorTask+0xf4>
	for(sensorIndex = SENSOR_0; sensorIndex < MAX_SENSOR_COUNT; sensorIndex++)
    122e:	2a07      	cmp	r2, #7
    1230:	f67f af6d 	bls.w	110e <SensorTask+0x72>
    1234:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1236:	9a01      	ldr	r2, [sp, #4]
    1238:	b112      	cbz	r2, 1240 <SensorTask+0x1a4>
    123a:	4a2c      	ldr	r2, [pc, #176]	; (12ec <SensorTask+0x250>)
    123c:	f882 b00a 	strb.w	fp, [r2, #10]
    1240:	9a02      	ldr	r2, [sp, #8]
    1242:	b112      	cbz	r2, 124a <SensorTask+0x1ae>
    1244:	4a29      	ldr	r2, [pc, #164]	; (12ec <SensorTask+0x250>)
    1246:	f882 a00b 	strb.w	sl, [r2, #11]
    124a:	9a03      	ldr	r2, [sp, #12]
    124c:	b112      	cbz	r2, 1254 <SensorTask+0x1b8>
    124e:	4a27      	ldr	r2, [pc, #156]	; (12ec <SensorTask+0x250>)
    1250:	f882 900c 	strb.w	r9, [r2, #12]
    1254:	9a04      	ldr	r2, [sp, #16]
    1256:	b112      	cbz	r2, 125e <SensorTask+0x1c2>
    1258:	4a24      	ldr	r2, [pc, #144]	; (12ec <SensorTask+0x250>)
    125a:	f882 800d 	strb.w	r8, [r2, #13]
    125e:	9a05      	ldr	r2, [sp, #20]
    1260:	b112      	cbz	r2, 1268 <SensorTask+0x1cc>
    1262:	4a22      	ldr	r2, [pc, #136]	; (12ec <SensorTask+0x250>)
    1264:	f882 c006 	strb.w	ip, [r2, #6]
    1268:	9a06      	ldr	r2, [sp, #24]
    126a:	b112      	cbz	r2, 1272 <SensorTask+0x1d6>
    126c:	4a1f      	ldr	r2, [pc, #124]	; (12ec <SensorTask+0x250>)
    126e:	f882 e007 	strb.w	lr, [r2, #7]
    1272:	9a07      	ldr	r2, [sp, #28]
    1274:	b10a      	cbz	r2, 127a <SensorTask+0x1de>
    1276:	4a1d      	ldr	r2, [pc, #116]	; (12ec <SensorTask+0x250>)
    1278:	7417      	strb	r7, [r2, #16]
    127a:	9a08      	ldr	r2, [sp, #32]
    127c:	b10a      	cbz	r2, 1282 <SensorTask+0x1e6>
    127e:	4a1b      	ldr	r2, [pc, #108]	; (12ec <SensorTask+0x250>)
    1280:	7456      	strb	r6, [r2, #17]
    1282:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1284:	b10a      	cbz	r2, 128a <SensorTask+0x1ee>
    1286:	4a19      	ldr	r2, [pc, #100]	; (12ec <SensorTask+0x250>)
    1288:	7215      	strb	r5, [r2, #8]
    128a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    128c:	b10a      	cbz	r2, 1292 <SensorTask+0x1f6>
    128e:	4a17      	ldr	r2, [pc, #92]	; (12ec <SensorTask+0x250>)
    1290:	7254      	strb	r4, [r2, #9]
    1292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1294:	b10a      	cbz	r2, 129a <SensorTask+0x1fe>
    1296:	4a15      	ldr	r2, [pc, #84]	; (12ec <SensorTask+0x250>)
    1298:	7110      	strb	r0, [r2, #4]
    129a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    129c:	b11a      	cbz	r2, 12a6 <SensorTask+0x20a>
    129e:	4a13      	ldr	r2, [pc, #76]	; (12ec <SensorTask+0x250>)
    12a0:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
    12a4:	7151      	strb	r1, [r2, #5]
    12a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    12a8:	b11a      	cbz	r2, 12b2 <SensorTask+0x216>
    12aa:	4a10      	ldr	r2, [pc, #64]	; (12ec <SensorTask+0x250>)
    12ac:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    12b0:	7391      	strb	r1, [r2, #14]
    12b2:	2b00      	cmp	r3, #0
    12b4:	d0af      	beq.n	1216 <SensorTask+0x17a>
    12b6:	4b0d      	ldr	r3, [pc, #52]	; (12ec <SensorTask+0x250>)
    12b8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    12bc:	73da      	strb	r2, [r3, #15]
    12be:	e7aa      	b.n	1216 <SensorTask+0x17a>
		switch(sensorIndex)
    12c0:	2101      	movs	r1, #1
    12c2:	910d      	str	r1, [sp, #52]	; 0x34
				sensorInputData[SENSOR_0].adcChannel = SENSOR_0_AIN0;
    12c4:	2100      	movs	r1, #0
    12c6:	910c      	str	r1, [sp, #48]	; 0x30
		switch(sensorIndex)
    12c8:	9900      	ldr	r1, [sp, #0]
    12ca:	910b      	str	r1, [sp, #44]	; 0x2c
				sensorInputData[SENSOR_0].selectLine = SELECT_0;
    12cc:	202d      	movs	r0, #45	; 0x2d
    12ce:	e71e      	b.n	110e <SensorTask+0x72>
		switch(sensorIndex)
    12d0:	2101      	movs	r1, #1
    12d2:	9106      	str	r1, [sp, #24]
				sensorInputData[SENSOR_1].adcChannel = SENSOR_1_AIN1;
    12d4:	9900      	ldr	r1, [sp, #0]
    12d6:	468e      	mov	lr, r1
		switch(sensorIndex)
    12d8:	9105      	str	r1, [sp, #20]
				sensorInputData[SENSOR_1].selectLine = SELECT_1;
    12da:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    12de:	e716      	b.n	110e <SensorTask+0x72>
    12e0:	00005bed 	.word	0x00005bed
    12e4:	00000365 	.word	0x00000365
    12e8:	000004ed 	.word	0x000004ed
    12ec:	20000278 	.word	0x20000278
    12f0:	00000f85 	.word	0x00000f85
    12f4:	00003335 	.word	0x00003335

000012f8 <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
    12f8:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
    12fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    12fe:	460d      	mov	r5, r1
    1300:	4c04      	ldr	r4, [pc, #16]	; (1314 <getModemCommandData+0x1c>)
    1302:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    1306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    130a:	6823      	ldr	r3, [r4, #0]
    130c:	602b      	str	r3, [r5, #0]
}
    130e:	bc30      	pop	{r4, r5}
    1310:	4770      	bx	lr
    1312:	bf00      	nop
    1314:	00007c34 	.word	0x00007c34

00001318 <buildHttpHeaderWithActiveSessionID>:
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildHttpHeaderWithActiveSessionID(const uint8_t* activeSessionId)
{
	switch (*activeSessionId)
    1318:	7803      	ldrb	r3, [r0, #0]
    131a:	3b31      	subs	r3, #49	; 0x31
    131c:	2b08      	cmp	r3, #8
    131e:	d83b      	bhi.n	1398 <buildHttpHeaderWithActiveSessionID+0x80>
    1320:	e8df f003 	tbb	[pc, r3]
    1324:	17110b05 	.word	0x17110b05
    1328:	2f29231d 	.word	0x2f29231d
    132c:	35          	.byte	0x35
    132d:	00          	.byte	0x00
	{
		case SESSION_ID_1:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '1';
    132e:	4b1b      	ldr	r3, [pc, #108]	; (139c <buildHttpHeaderWithActiveSessionID+0x84>)
    1330:	2231      	movs	r2, #49	; 0x31
    1332:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '1';
    1334:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    1338:	4770      	bx	lr

		case SESSION_ID_2:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '2';
    133a:	4b18      	ldr	r3, [pc, #96]	; (139c <buildHttpHeaderWithActiveSessionID+0x84>)
    133c:	2232      	movs	r2, #50	; 0x32
    133e:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '2';
    1340:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    1344:	4770      	bx	lr

		case SESSION_ID_3:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '3';
    1346:	4b15      	ldr	r3, [pc, #84]	; (139c <buildHttpHeaderWithActiveSessionID+0x84>)
    1348:	2233      	movs	r2, #51	; 0x33
    134a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '3';
    134c:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    1350:	4770      	bx	lr

		case SESSION_ID_4:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '4';
    1352:	4b12      	ldr	r3, [pc, #72]	; (139c <buildHttpHeaderWithActiveSessionID+0x84>)
    1354:	2234      	movs	r2, #52	; 0x34
    1356:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '4';
    1358:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    135c:	4770      	bx	lr

		case SESSION_ID_5:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '5';
    135e:	4b0f      	ldr	r3, [pc, #60]	; (139c <buildHttpHeaderWithActiveSessionID+0x84>)
    1360:	2235      	movs	r2, #53	; 0x35
    1362:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '5';
    1364:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    1368:	4770      	bx	lr

		case SESSION_ID_6:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '6';
    136a:	4b0c      	ldr	r3, [pc, #48]	; (139c <buildHttpHeaderWithActiveSessionID+0x84>)
    136c:	2236      	movs	r2, #54	; 0x36
    136e:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '6';
    1370:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    1374:	4770      	bx	lr

		case SESSION_ID_7:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '7';
    1376:	4b09      	ldr	r3, [pc, #36]	; (139c <buildHttpHeaderWithActiveSessionID+0x84>)
    1378:	2237      	movs	r2, #55	; 0x37
    137a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '7';
    137c:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    1380:	4770      	bx	lr

		case SESSION_ID_8:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '8';
    1382:	4b06      	ldr	r3, [pc, #24]	; (139c <buildHttpHeaderWithActiveSessionID+0x84>)
    1384:	2238      	movs	r2, #56	; 0x38
    1386:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '8';
    1388:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    138c:	4770      	bx	lr

		case SESSION_ID_9:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '9';
    138e:	4b03      	ldr	r3, [pc, #12]	; (139c <buildHttpHeaderWithActiveSessionID+0x84>)
    1390:	2239      	movs	r2, #57	; 0x39
    1392:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '9';
    1394:	f883 2020 	strb.w	r2, [r3, #32]
    1398:	4770      	bx	lr
    139a:	bf00      	nop
    139c:	20000004 	.word	0x20000004

000013a0 <buildDataPacketsToServer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildDataPacketsToServer(void)
{
    13a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	strncpy(kHttpGetCompleteData,kHttpGetString,15);
    13a2:	4c0f      	ldr	r4, [pc, #60]	; (13e0 <buildDataPacketsToServer+0x40>)
    13a4:	220f      	movs	r2, #15
    13a6:	490f      	ldr	r1, [pc, #60]	; (13e4 <buildDataPacketsToServer+0x44>)
    13a8:	4620      	mov	r0, r4
    13aa:	4b0f      	ldr	r3, [pc, #60]	; (13e8 <buildDataPacketsToServer+0x48>)
    13ac:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
    13ae:	4620      	mov	r0, r4
    13b0:	4b0e      	ldr	r3, [pc, #56]	; (13ec <buildDataPacketsToServer+0x4c>)
    13b2:	4798      	blx	r3
    13b4:	4d0e      	ldr	r5, [pc, #56]	; (13f0 <buildDataPacketsToServer+0x50>)
    13b6:	4404      	add	r4, r0
    13b8:	f105 0720 	add.w	r7, r5, #32
    13bc:	462e      	mov	r6, r5
    13be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    13c0:	6020      	str	r0, [r4, #0]
    13c2:	6061      	str	r1, [r4, #4]
    13c4:	60a2      	str	r2, [r4, #8]
    13c6:	60e3      	str	r3, [r4, #12]
    13c8:	4635      	mov	r5, r6
    13ca:	3410      	adds	r4, #16
    13cc:	42be      	cmp	r6, r7
    13ce:	d1f5      	bne.n	13bc <buildDataPacketsToServer+0x1c>
    13d0:	cd07      	ldmia	r5!, {r0, r1, r2}
    13d2:	6020      	str	r0, [r4, #0]
    13d4:	6061      	str	r1, [r4, #4]
    13d6:	60a2      	str	r2, [r4, #8]
    13d8:	782b      	ldrb	r3, [r5, #0]
    13da:	7323      	strb	r3, [r4, #12]
    13dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13de:	bf00      	nop
    13e0:	20000294 	.word	0x20000294
    13e4:	20000018 	.word	0x20000018
    13e8:	00006c19 	.word	0x00006c19
    13ec:	00006be5 	.word	0x00006be5
    13f0:	000080e4 	.word	0x000080e4

000013f4 <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
    13f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13f6:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
    13f8:	a901      	add	r1, sp, #4
    13fa:	4b2d      	ldr	r3, [pc, #180]	; (14b0 <mdmParser_solicitedCmdParser+0xbc>)
    13fc:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
    13fe:	f89d 700c 	ldrb.w	r7, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
    1402:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    1406:	4b2b      	ldr	r3, [pc, #172]	; (14b4 <mdmParser_solicitedCmdParser+0xc0>)
    1408:	4798      	blx	r3

	if(responseBuffer != NULL)
    140a:	2800      	cmp	r0, #0
    140c:	d04a      	beq.n	14a4 <mdmParser_solicitedCmdParser+0xb0>
    140e:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
    1410:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    1414:	4b28      	ldr	r3, [pc, #160]	; (14b8 <mdmParser_solicitedCmdParser+0xc4>)
    1416:	4798      	blx	r3

		if(readStatus != false)
    1418:	4606      	mov	r6, r0
    141a:	2800      	cmp	r0, #0
    141c:	d03e      	beq.n	149c <mdmParser_solicitedCmdParser+0xa8>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
    141e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1422:	4621      	mov	r1, r4
    1424:	9802      	ldr	r0, [sp, #8]
    1426:	4b25      	ldr	r3, [pc, #148]	; (14bc <mdmParser_solicitedCmdParser+0xc8>)
    1428:	4798      	blx	r3
    142a:	bb58      	cbnz	r0, 1484 <mdmParser_solicitedCmdParser+0x90>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
    142c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    1430:	3001      	adds	r0, #1
    1432:	4b20      	ldr	r3, [pc, #128]	; (14b4 <mdmParser_solicitedCmdParser+0xc0>)
    1434:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
    1436:	4605      	mov	r5, r0
    1438:	b1f8      	cbz	r0, 147a <mdmParser_solicitedCmdParser+0x86>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
    143a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    143e:	b1d3      	cbz	r3, 1476 <mdmParser_solicitedCmdParser+0x82>
    1440:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
    1442:	1cb9      	adds	r1, r7, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
    1444:	b2c9      	uxtb	r1, r1
    1446:	18e2      	adds	r2, r4, r3
    1448:	5c52      	ldrb	r2, [r2, r1]
    144a:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
    144c:	3301      	adds	r3, #1
    144e:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
    1450:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    1454:	429a      	cmp	r2, r3
    1456:	d8f6      	bhi.n	1446 <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
    1458:	2200      	movs	r2, #0
    145a:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt+1);
    145c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    1460:	3201      	adds	r2, #1
    1462:	b292      	uxth	r2, r2
    1464:	4629      	mov	r1, r5
    1466:	f89d 0004 	ldrb.w	r0, [sp, #4]
    146a:	9b04      	ldr	r3, [sp, #16]
    146c:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
    146e:	4628      	mov	r0, r5
    1470:	4b13      	ldr	r3, [pc, #76]	; (14c0 <mdmParser_solicitedCmdParser+0xcc>)
    1472:	4798      	blx	r3
    1474:	e00a      	b.n	148c <mdmParser_solicitedCmdParser+0x98>
					while(parseCnt < cmdData.validDataCnt)
    1476:	2300      	movs	r3, #0
    1478:	e7ee      	b.n	1458 <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
    147a:	4812      	ldr	r0, [pc, #72]	; (14c4 <mdmParser_solicitedCmdParser+0xd0>)
    147c:	4b12      	ldr	r3, [pc, #72]	; (14c8 <mdmParser_solicitedCmdParser+0xd4>)
    147e:	4798      	blx	r3
	bool parseStatus = false;
    1480:	2600      	movs	r6, #0
    1482:	e003      	b.n	148c <mdmParser_solicitedCmdParser+0x98>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
    1484:	4811      	ldr	r0, [pc, #68]	; (14cc <mdmParser_solicitedCmdParser+0xd8>)
    1486:	4b10      	ldr	r3, [pc, #64]	; (14c8 <mdmParser_solicitedCmdParser+0xd4>)
    1488:	4798      	blx	r3
				parseStatus = false;
    148a:	2600      	movs	r6, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
    148c:	4620      	mov	r0, r4
    148e:	4b0c      	ldr	r3, [pc, #48]	; (14c0 <mdmParser_solicitedCmdParser+0xcc>)
    1490:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
    1492:	4b0f      	ldr	r3, [pc, #60]	; (14d0 <mdmParser_solicitedCmdParser+0xdc>)
    1494:	4798      	blx	r3

	return parseStatus;
}
    1496:	4630      	mov	r0, r6
    1498:	b007      	add	sp, #28
    149a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
    149c:	480d      	ldr	r0, [pc, #52]	; (14d4 <mdmParser_solicitedCmdParser+0xe0>)
    149e:	4b0a      	ldr	r3, [pc, #40]	; (14c8 <mdmParser_solicitedCmdParser+0xd4>)
    14a0:	4798      	blx	r3
    14a2:	e7f3      	b.n	148c <mdmParser_solicitedCmdParser+0x98>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
    14a4:	480c      	ldr	r0, [pc, #48]	; (14d8 <mdmParser_solicitedCmdParser+0xe4>)
    14a6:	4b08      	ldr	r3, [pc, #32]	; (14c8 <mdmParser_solicitedCmdParser+0xd4>)
    14a8:	4798      	blx	r3
	bool parseStatus = false;
    14aa:	2600      	movs	r6, #0
    14ac:	e7f1      	b.n	1492 <mdmParser_solicitedCmdParser+0x9e>
    14ae:	bf00      	nop
    14b0:	000012f9 	.word	0x000012f9
    14b4:	00004d95 	.word	0x00004d95
    14b8:	000027dd 	.word	0x000027dd
    14bc:	00006bf5 	.word	0x00006bf5
    14c0:	00004e75 	.word	0x00004e75
    14c4:	00008364 	.word	0x00008364
    14c8:	0000313d 	.word	0x0000313d
    14cc:	00008398 	.word	0x00008398
    14d0:	00002831 	.word	0x00002831
    14d4:	000083d4 	.word	0x000083d4
    14d8:	00008418 	.word	0x00008418

000014dc <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
    14dc:	4b01      	ldr	r3, [pc, #4]	; (14e4 <mdmParser_SetLastCmdProcessed+0x8>)
    14de:	7018      	strb	r0, [r3, #0]
    14e0:	4770      	bx	lr
    14e2:	bf00      	nop
    14e4:	20000027 	.word	0x20000027

000014e8 <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
    14e8:	4b01      	ldr	r3, [pc, #4]	; (14f0 <mdmParser_SetLastSentAtCommand+0x8>)
    14ea:	7018      	strb	r0, [r3, #0]
    14ec:	4770      	bx	lr
    14ee:	bf00      	nop
    14f0:	200002d0 	.word	0x200002d0

000014f4 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
    14f4:	4b01      	ldr	r3, [pc, #4]	; (14fc <mdmParser_GetLastSentAtCommand+0x8>)
    14f6:	7818      	ldrb	r0, [r3, #0]
    14f8:	4770      	bx	lr
    14fa:	bf00      	nop
    14fc:	200002d0 	.word	0x200002d0

00001500 <getCloseActiveSessionCmd>:
**===========================================================================*/
static AT_CMD_TYPE getCloseActiveSessionCmd(uint8_t sessionID)
{
    AT_CMD_TYPE sessionCloseCmd;

    switch(sessionID)
    1500:	3801      	subs	r0, #1
    1502:	2809      	cmp	r0, #9
    1504:	d81a      	bhi.n	153c <getCloseActiveSessionCmd+0x3c>
    1506:	e8df f000 	tbb	[pc, r0]
    150a:	0705      	.short	0x0705
    150c:	0f0d0b09 	.word	0x0f0d0b09
    1510:	17151311 	.word	0x17151311
    {
        case 1:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_1;
    1514:	200a      	movs	r0, #10
    1516:	4770      	bx	lr
        }
        break;

        case 2:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_2;
    1518:	200b      	movs	r0, #11
        }
        break;
    151a:	4770      	bx	lr

        case 3:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_3;
    151c:	200c      	movs	r0, #12
        }
        break;
    151e:	4770      	bx	lr

        case 4:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_4;
    1520:	200d      	movs	r0, #13
        }
        break;
    1522:	4770      	bx	lr

        case 5:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_5;
    1524:	200e      	movs	r0, #14
        }
        break;
    1526:	4770      	bx	lr

        case 6:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_6;
    1528:	200f      	movs	r0, #15
        }
        break;
    152a:	4770      	bx	lr

        case 7:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_7;
    152c:	2010      	movs	r0, #16
        }
        break;
    152e:	4770      	bx	lr

        case 8:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_8;
    1530:	2011      	movs	r0, #17
        }
        break;
    1532:	4770      	bx	lr

        case 9:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_9;
    1534:	2012      	movs	r0, #18
        }
        break;
    1536:	4770      	bx	lr

        case 10:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_10;
    1538:	2013      	movs	r0, #19
        }
        break;
    153a:	4770      	bx	lr
    switch(sessionID)
    153c:	2000      	movs	r0, #0
        default:
        break;
    }
    
    return sessionCloseCmd;
}
    153e:	4770      	bx	lr

00001540 <validateCommonCommandResponse>:
{
    1540:	b508      	push	{r3, lr}
    if(0==memcmp(response,"OK",2))
    1542:	2202      	movs	r2, #2
    1544:	4903      	ldr	r1, [pc, #12]	; (1554 <validateCommonCommandResponse+0x14>)
    1546:	4b04      	ldr	r3, [pc, #16]	; (1558 <validateCommonCommandResponse+0x18>)
    1548:	4798      	blx	r3
}
    154a:	fab0 f080 	clz	r0, r0
    154e:	0940      	lsrs	r0, r0, #5
    1550:	bd08      	pop	{r3, pc}
    1552:	bf00      	nop
    1554:	00007550 	.word	0x00007550
    1558:	0000699b 	.word	0x0000699b

0000155c <MdmConnect_HttpConnectionInit>:
    gHttpConnectionState = MDM_HTTP_DISCONNECTED;
    155c:	4b07      	ldr	r3, [pc, #28]	; (157c <MdmConnect_HttpConnectionInit+0x20>)
    155e:	2200      	movs	r2, #0
    1560:	701a      	strb	r2, [r3, #0]
    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    1562:	705a      	strb	r2, [r3, #1]
    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1564:	709a      	strb	r2, [r3, #2]
    gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    1566:	70da      	strb	r2, [r3, #3]
    gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    1568:	711a      	strb	r2, [r3, #4]
    sessionIdCount = 5;
    156a:	2105      	movs	r1, #5
    156c:	7159      	strb	r1, [r3, #5]
    ConnectionResponse.atCmd = CMD_AT_MAX;
    156e:	721a      	strb	r2, [r3, #8]
    ConnectionResponse.length = 0;
    1570:	815a      	strh	r2, [r3, #10]
    ConnectionResponse.response = NULL;
    1572:	60da      	str	r2, [r3, #12]
    currentSessionId = '0';
    1574:	2230      	movs	r2, #48	; 0x30
    1576:	741a      	strb	r2, [r3, #16]
    1578:	4770      	bx	lr
    157a:	bf00      	nop
    157c:	200002d4 	.word	0x200002d4

00001580 <performForcedRebootOfModem>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
static void performForcedRebootOfModem(void)
{
    1580:	b510      	push	{r4, lr}
	DEBUG_PRINT("Connection to the server is lost.....");
    1582:	4805      	ldr	r0, [pc, #20]	; (1598 <performForcedRebootOfModem+0x18>)
    1584:	4c05      	ldr	r4, [pc, #20]	; (159c <performForcedRebootOfModem+0x1c>)
    1586:	47a0      	blx	r4
	DEBUG_PRINT("Trying to establish the connection to server...Please wait......\r\n");
    1588:	4805      	ldr	r0, [pc, #20]	; (15a0 <performForcedRebootOfModem+0x20>)
    158a:	47a0      	blx	r4

	/* Perform a physical modem restart */
	modemPowerStateInit();
    158c:	4b05      	ldr	r3, [pc, #20]	; (15a4 <performForcedRebootOfModem+0x24>)
    158e:	4798      	blx	r3

	/* Reset the modem connection States */
	MdmConnect_HttpConnectionInit();
    1590:	4b05      	ldr	r3, [pc, #20]	; (15a8 <performForcedRebootOfModem+0x28>)
    1592:	4798      	blx	r3
    1594:	bd10      	pop	{r4, pc}
    1596:	bf00      	nop
    1598:	00008450 	.word	0x00008450
    159c:	0000313d 	.word	0x0000313d
    15a0:	00008478 	.word	0x00008478
    15a4:	00002b21 	.word	0x00002b21
    15a8:	0000155d 	.word	0x0000155d

000015ac <MdmCnct_ConnectInProgressSubStateMachine>:
{
    15ac:	b570      	push	{r4, r5, r6, lr}
    15ae:	b082      	sub	sp, #8
    switch (gHttpConnectionInProgressSubstate)
    15b0:	4b87      	ldr	r3, [pc, #540]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    15b2:	785b      	ldrb	r3, [r3, #1]
    15b4:	2b07      	cmp	r3, #7
    15b6:	f200 8092 	bhi.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
    15ba:	e8df f013 	tbh	[pc, r3, lsl #1]
    15be:	0008      	.short	0x0008
    15c0:	013b008b 	.word	0x013b008b
    15c4:	022d01c1 	.word	0x022d01c1
    15c8:	033802cc 	.word	0x033802cc
    15cc:	0410      	.short	0x0410
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    15ce:	4b80      	ldr	r3, [pc, #512]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    15d0:	789b      	ldrb	r3, [r3, #2]
    15d2:	2b00      	cmp	r3, #0
    15d4:	d14d      	bne.n	1672 <MdmCnct_ConnectInProgressSubStateMachine+0xc6>
                if(sessionIdCount > 0)
    15d6:	4b7e      	ldr	r3, [pc, #504]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    15d8:	795b      	ldrb	r3, [r3, #5]
    15da:	2b00      	cmp	r3, #0
    15dc:	d03e      	beq.n	165c <MdmCnct_ConnectInProgressSubStateMachine+0xb0>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    15de:	4b7d      	ldr	r3, [pc, #500]	; (17d4 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    15e0:	6818      	ldr	r0, [r3, #0]
    15e2:	4b7d      	ldr	r3, [pc, #500]	; (17d8 <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
    15e4:	4798      	blx	r3
    15e6:	2800      	cmp	r0, #0
    15e8:	d134      	bne.n	1654 <MdmCnct_ConnectInProgressSubStateMachine+0xa8>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    15ea:	2100      	movs	r1, #0
    15ec:	4b7b      	ldr	r3, [pc, #492]	; (17dc <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
    15ee:	6818      	ldr	r0, [r3, #0]
    15f0:	4b7b      	ldr	r3, [pc, #492]	; (17e0 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
    15f2:	4798      	blx	r3
    15f4:	2801      	cmp	r0, #1
    15f6:	d003      	beq.n	1600 <MdmCnct_ConnectInProgressSubStateMachine+0x54>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    15f8:	487a      	ldr	r0, [pc, #488]	; (17e4 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
    15fa:	4b7b      	ldr	r3, [pc, #492]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    15fc:	4798      	blx	r3
    15fe:	e06e      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1600:	2301      	movs	r3, #1
    1602:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
    1606:	4b72      	ldr	r3, [pc, #456]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    1608:	7958      	ldrb	r0, [r3, #5]
    160a:	4b78      	ldr	r3, [pc, #480]	; (17ec <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    160c:	4798      	blx	r3
    160e:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
    1612:	2300      	movs	r3, #0
    1614:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1616:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    161a:	4669      	mov	r1, sp
    161c:	486d      	ldr	r0, [pc, #436]	; (17d4 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    161e:	6800      	ldr	r0, [r0, #0]
    1620:	4c73      	ldr	r4, [pc, #460]	; (17f0 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
    1622:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
    1624:	2801      	cmp	r0, #1
    1626:	d007      	beq.n	1638 <MdmCnct_ConnectInProgressSubStateMachine+0x8c>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    1628:	4872      	ldr	r0, [pc, #456]	; (17f4 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
    162a:	4b6f      	ldr	r3, [pc, #444]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    162c:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
    162e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1632:	4b71      	ldr	r3, [pc, #452]	; (17f8 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
    1634:	4798      	blx	r3
    1636:	e052      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
    1638:	2300      	movs	r3, #0
    163a:	461a      	mov	r2, r3
    163c:	4619      	mov	r1, r3
    163e:	4867      	ldr	r0, [pc, #412]	; (17dc <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
    1640:	6800      	ldr	r0, [r0, #0]
    1642:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1644:	2201      	movs	r2, #1
    1646:	4b62      	ldr	r3, [pc, #392]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    1648:	709a      	strb	r2, [r3, #2]
                                vTaskDelay(TransmitDelayMs);
    164a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    164e:	4b6a      	ldr	r3, [pc, #424]	; (17f8 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
    1650:	4798      	blx	r3
    1652:	e044      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Transmit Queue is not empty");
    1654:	4869      	ldr	r0, [pc, #420]	; (17fc <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
    1656:	4b64      	ldr	r3, [pc, #400]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    1658:	4798      	blx	r3
    165a:	e040      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("No More Active Connections to close");
    165c:	4868      	ldr	r0, [pc, #416]	; (1800 <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
    165e:	4c62      	ldr	r4, [pc, #392]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    1660:	47a0      	blx	r4
                    DEBUG_PRINT("\r\n");
    1662:	4868      	ldr	r0, [pc, #416]	; (1804 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
    1664:	47a0      	blx	r4
                    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
    1666:	4b5a      	ldr	r3, [pc, #360]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    1668:	2201      	movs	r2, #1
    166a:	705a      	strb	r2, [r3, #1]
                    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    166c:	2200      	movs	r2, #0
    166e:	709a      	strb	r2, [r3, #2]
    1670:	e035      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1672:	2b01      	cmp	r3, #1
    1674:	d133      	bne.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1676:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    167a:	4963      	ldr	r1, [pc, #396]	; (1808 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
    167c:	4b63      	ldr	r3, [pc, #396]	; (180c <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
    167e:	6818      	ldr	r0, [r3, #0]
    1680:	4b63      	ldr	r3, [pc, #396]	; (1810 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
    1682:	4798      	blx	r3
    1684:	2801      	cmp	r0, #1
    1686:	d12a      	bne.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
    1688:	4b51      	ldr	r3, [pc, #324]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    168a:	7a1d      	ldrb	r5, [r3, #8]
    168c:	795c      	ldrb	r4, [r3, #5]
    168e:	4620      	mov	r0, r4
    1690:	4b56      	ldr	r3, [pc, #344]	; (17ec <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1692:	4798      	blx	r3
    1694:	4285      	cmp	r5, r0
    1696:	d113      	bne.n	16c0 <MdmCnct_ConnectInProgressSubStateMachine+0x114>
                        if(sessionIdCount > 0)
    1698:	b14c      	cbz	r4, 16ae <MdmCnct_ConnectInProgressSubStateMachine+0x102>
                            sessionIdCount--;
    169a:	4b4d      	ldr	r3, [pc, #308]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    169c:	3c01      	subs	r4, #1
    169e:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    16a0:	2200      	movs	r2, #0
    16a2:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    16a4:	4b4a      	ldr	r3, [pc, #296]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    16a6:	68d8      	ldr	r0, [r3, #12]
    16a8:	4b5a      	ldr	r3, [pc, #360]	; (1814 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
    16aa:	4798      	blx	r3
    16ac:	e017      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
    16ae:	4b48      	ldr	r3, [pc, #288]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    16b0:	2201      	movs	r2, #1
    16b2:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    16b4:	2200      	movs	r2, #0
    16b6:	709a      	strb	r2, [r3, #2]
                            DEBUG_PRINT("Closed All Active Connections");
    16b8:	4857      	ldr	r0, [pc, #348]	; (1818 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
    16ba:	4b4b      	ldr	r3, [pc, #300]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    16bc:	4798      	blx	r3
    16be:	e7f1      	b.n	16a4 <MdmCnct_ConnectInProgressSubStateMachine+0xf8>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    16c0:	4856      	ldr	r0, [pc, #344]	; (181c <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
    16c2:	4b49      	ldr	r3, [pc, #292]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    16c4:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    16c6:	4b42      	ldr	r3, [pc, #264]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    16c8:	2200      	movs	r2, #0
    16ca:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    16cc:	68d8      	ldr	r0, [r3, #12]
    16ce:	4b51      	ldr	r3, [pc, #324]	; (1814 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
    16d0:	4798      	blx	r3
    16d2:	e004      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    16d4:	4b3e      	ldr	r3, [pc, #248]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    16d6:	789b      	ldrb	r3, [r3, #2]
    16d8:	b11b      	cbz	r3, 16e2 <MdmCnct_ConnectInProgressSubStateMachine+0x136>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    16da:	2b01      	cmp	r3, #1
    16dc:	d03e      	beq.n	175c <MdmCnct_ConnectInProgressSubStateMachine+0x1b0>
}
    16de:	b002      	add	sp, #8
    16e0:	bd70      	pop	{r4, r5, r6, pc}
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    16e2:	4b3c      	ldr	r3, [pc, #240]	; (17d4 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    16e4:	6818      	ldr	r0, [r3, #0]
    16e6:	4b3c      	ldr	r3, [pc, #240]	; (17d8 <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
    16e8:	4798      	blx	r3
    16ea:	2800      	cmp	r0, #0
    16ec:	d132      	bne.n	1754 <MdmCnct_ConnectInProgressSubStateMachine+0x1a8>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    16ee:	2100      	movs	r1, #0
    16f0:	4b3a      	ldr	r3, [pc, #232]	; (17dc <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
    16f2:	6818      	ldr	r0, [r3, #0]
    16f4:	4b3a      	ldr	r3, [pc, #232]	; (17e0 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
    16f6:	4798      	blx	r3
    16f8:	2801      	cmp	r0, #1
    16fa:	d003      	beq.n	1704 <MdmCnct_ConnectInProgressSubStateMachine+0x158>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    16fc:	4839      	ldr	r0, [pc, #228]	; (17e4 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
    16fe:	4b3a      	ldr	r3, [pc, #232]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    1700:	4798      	blx	r3
    1702:	e7ec      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1704:	2301      	movs	r3, #1
    1706:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
    170a:	231a      	movs	r3, #26
    170c:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1710:	2300      	movs	r3, #0
    1712:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1714:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1718:	4669      	mov	r1, sp
    171a:	482e      	ldr	r0, [pc, #184]	; (17d4 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    171c:	6800      	ldr	r0, [r0, #0]
    171e:	4c34      	ldr	r4, [pc, #208]	; (17f0 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
    1720:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1722:	2801      	cmp	r0, #1
    1724:	d007      	beq.n	1736 <MdmCnct_ConnectInProgressSubStateMachine+0x18a>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    1726:	4833      	ldr	r0, [pc, #204]	; (17f4 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
    1728:	4b2f      	ldr	r3, [pc, #188]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    172a:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    172c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1730:	4b31      	ldr	r3, [pc, #196]	; (17f8 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
    1732:	4798      	blx	r3
    1734:	e7d3      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1736:	2300      	movs	r3, #0
    1738:	461a      	mov	r2, r3
    173a:	4619      	mov	r1, r3
    173c:	4827      	ldr	r0, [pc, #156]	; (17dc <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
    173e:	6800      	ldr	r0, [r0, #0]
    1740:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1742:	4b23      	ldr	r3, [pc, #140]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    1744:	2201      	movs	r2, #1
    1746:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
    1748:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
    174a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    174e:	4b2a      	ldr	r3, [pc, #168]	; (17f8 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
    1750:	4798      	blx	r3
    1752:	e7c4      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1754:	4829      	ldr	r0, [pc, #164]	; (17fc <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
    1756:	4b24      	ldr	r3, [pc, #144]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    1758:	4798      	blx	r3
    175a:	e7c0      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    175c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1760:	4929      	ldr	r1, [pc, #164]	; (1808 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
    1762:	4b2a      	ldr	r3, [pc, #168]	; (180c <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
    1764:	6818      	ldr	r0, [r3, #0]
    1766:	4b2a      	ldr	r3, [pc, #168]	; (1810 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
    1768:	4798      	blx	r3
    176a:	2801      	cmp	r0, #1
    176c:	d1b7      	bne.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
    176e:	4b18      	ldr	r3, [pc, #96]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    1770:	7a1b      	ldrb	r3, [r3, #8]
    1772:	2b1a      	cmp	r3, #26
    1774:	d122      	bne.n	17bc <MdmCnct_ConnectInProgressSubStateMachine+0x210>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    1776:	4b16      	ldr	r3, [pc, #88]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    1778:	68d8      	ldr	r0, [r3, #12]
    177a:	4b29      	ldr	r3, [pc, #164]	; (1820 <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
    177c:	4798      	blx	r3
    177e:	b190      	cbz	r0, 17a6 <MdmCnct_ConnectInProgressSubStateMachine+0x1fa>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
    1780:	4828      	ldr	r0, [pc, #160]	; (1824 <MdmCnct_ConnectInProgressSubStateMachine+0x278>)
    1782:	4d19      	ldr	r5, [pc, #100]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    1784:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1786:	4c12      	ldr	r4, [pc, #72]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    1788:	8961      	ldrh	r1, [r4, #10]
    178a:	68e0      	ldr	r0, [r4, #12]
    178c:	4b26      	ldr	r3, [pc, #152]	; (1828 <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
    178e:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    1790:	481c      	ldr	r0, [pc, #112]	; (1804 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
    1792:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1794:	2300      	movs	r3, #0
    1796:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
    1798:	2302      	movs	r3, #2
    179a:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
    179c:	4b0c      	ldr	r3, [pc, #48]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    179e:	68d8      	ldr	r0, [r3, #12]
    17a0:	4b1c      	ldr	r3, [pc, #112]	; (1814 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
    17a2:	4798      	blx	r3
    17a4:	e79b      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            DEBUG_PRINT("Expected Response Not Received...");
    17a6:	4821      	ldr	r0, [pc, #132]	; (182c <MdmCnct_ConnectInProgressSubStateMachine+0x280>)
    17a8:	4c0f      	ldr	r4, [pc, #60]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    17aa:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    17ac:	4815      	ldr	r0, [pc, #84]	; (1804 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
    17ae:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    17b0:	2200      	movs	r2, #0
    17b2:	4b07      	ldr	r3, [pc, #28]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    17b4:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    17b6:	4b1e      	ldr	r3, [pc, #120]	; (1830 <MdmCnct_ConnectInProgressSubStateMachine+0x284>)
    17b8:	4798      	blx	r3
    17ba:	e7ef      	b.n	179c <MdmCnct_ConnectInProgressSubStateMachine+0x1f0>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    17bc:	4817      	ldr	r0, [pc, #92]	; (181c <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
    17be:	4b0a      	ldr	r3, [pc, #40]	; (17e8 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    17c0:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    17c2:	4b03      	ldr	r3, [pc, #12]	; (17d0 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
    17c4:	2200      	movs	r2, #0
    17c6:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    17c8:	68d8      	ldr	r0, [r3, #12]
    17ca:	4b12      	ldr	r3, [pc, #72]	; (1814 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
    17cc:	4798      	blx	r3
    17ce:	e786      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
    17d0:	200002d4 	.word	0x200002d4
    17d4:	20003568 	.word	0x20003568
    17d8:	00005815 	.word	0x00005815
    17dc:	2000357c 	.word	0x2000357c
    17e0:	00005635 	.word	0x00005635
    17e4:	00007584 	.word	0x00007584
    17e8:	0000313d 	.word	0x0000313d
    17ec:	00001501 	.word	0x00001501
    17f0:	0000519d 	.word	0x0000519d
    17f4:	000084bc 	.word	0x000084bc
    17f8:	00005e2d 	.word	0x00005e2d
    17fc:	000075b0 	.word	0x000075b0
    1800:	000084f0 	.word	0x000084f0
    1804:	00008e50 	.word	0x00008e50
    1808:	200002dc 	.word	0x200002dc
    180c:	20003544 	.word	0x20003544
    1810:	000054ad 	.word	0x000054ad
    1814:	00004e75 	.word	0x00004e75
    1818:	00008514 	.word	0x00008514
    181c:	00008534 	.word	0x00008534
    1820:	00001541 	.word	0x00001541
    1824:	00008568 	.word	0x00008568
    1828:	000030f9 	.word	0x000030f9
    182c:	00008588 	.word	0x00008588
    1830:	00001581 	.word	0x00001581
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1834:	4b90      	ldr	r3, [pc, #576]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1836:	789b      	ldrb	r3, [r3, #2]
    1838:	2b00      	cmp	r3, #0
    183a:	d02e      	beq.n	189a <MdmCnct_ConnectInProgressSubStateMachine+0x2ee>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    183c:	2b01      	cmp	r3, #1
    183e:	f47f af4e 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1842:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1846:	498d      	ldr	r1, [pc, #564]	; (1a7c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1848:	4b8d      	ldr	r3, [pc, #564]	; (1a80 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
    184a:	6818      	ldr	r0, [r3, #0]
    184c:	4b8d      	ldr	r3, [pc, #564]	; (1a84 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
    184e:	4798      	blx	r3
    1850:	2801      	cmp	r0, #1
    1852:	f47f af44 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
    1856:	4b88      	ldr	r3, [pc, #544]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1858:	7a1b      	ldrb	r3, [r3, #8]
    185a:	2b1b      	cmp	r3, #27
    185c:	d166      	bne.n	192c <MdmCnct_ConnectInProgressSubStateMachine+0x380>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    185e:	4b86      	ldr	r3, [pc, #536]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1860:	68d8      	ldr	r0, [r3, #12]
    1862:	4b89      	ldr	r3, [pc, #548]	; (1a88 <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
    1864:	4798      	blx	r3
    1866:	2800      	cmp	r0, #0
    1868:	d055      	beq.n	1916 <MdmCnct_ConnectInProgressSubStateMachine+0x36a>
                            DEBUG_PRINT("Detached the PDP PS");
    186a:	4888      	ldr	r0, [pc, #544]	; (1a8c <MdmCnct_ConnectInProgressSubStateMachine+0x4e0>)
    186c:	4d88      	ldr	r5, [pc, #544]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    186e:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1870:	4c81      	ldr	r4, [pc, #516]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1872:	8961      	ldrh	r1, [r4, #10]
    1874:	68e0      	ldr	r0, [r4, #12]
    1876:	4b87      	ldr	r3, [pc, #540]	; (1a94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1878:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    187a:	4e87      	ldr	r6, [pc, #540]	; (1a98 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
    187c:	4630      	mov	r0, r6
    187e:	47a8      	blx	r5
                            DEBUG_PRINT("Deleted all of the previous connection configurations");
    1880:	4886      	ldr	r0, [pc, #536]	; (1a9c <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
    1882:	47a8      	blx	r5
                            DEBUG_PRINT("\r\n");
    1884:	4630      	mov	r0, r6
    1886:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1888:	2300      	movs	r3, #0
    188a:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
    188c:	2303      	movs	r3, #3
    188e:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
    1890:	4b79      	ldr	r3, [pc, #484]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1892:	68d8      	ldr	r0, [r3, #12]
    1894:	4b82      	ldr	r3, [pc, #520]	; (1aa0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
    1896:	4798      	blx	r3
    1898:	e721      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    189a:	4b82      	ldr	r3, [pc, #520]	; (1aa4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    189c:	6818      	ldr	r0, [r3, #0]
    189e:	4b82      	ldr	r3, [pc, #520]	; (1aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    18a0:	4798      	blx	r3
    18a2:	2800      	cmp	r0, #0
    18a4:	d133      	bne.n	190e <MdmCnct_ConnectInProgressSubStateMachine+0x362>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    18a6:	2100      	movs	r1, #0
    18a8:	4b80      	ldr	r3, [pc, #512]	; (1aac <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    18aa:	6818      	ldr	r0, [r3, #0]
    18ac:	4b80      	ldr	r3, [pc, #512]	; (1ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    18ae:	4798      	blx	r3
    18b0:	2801      	cmp	r0, #1
    18b2:	d003      	beq.n	18bc <MdmCnct_ConnectInProgressSubStateMachine+0x310>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    18b4:	487f      	ldr	r0, [pc, #508]	; (1ab4 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
    18b6:	4b76      	ldr	r3, [pc, #472]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    18b8:	4798      	blx	r3
    18ba:	e710      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    18bc:	2301      	movs	r3, #1
    18be:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
    18c2:	231b      	movs	r3, #27
    18c4:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    18c8:	2300      	movs	r3, #0
    18ca:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    18cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    18d0:	4669      	mov	r1, sp
    18d2:	4874      	ldr	r0, [pc, #464]	; (1aa4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    18d4:	6800      	ldr	r0, [r0, #0]
    18d6:	4c78      	ldr	r4, [pc, #480]	; (1ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
    18d8:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    18da:	2801      	cmp	r0, #1
    18dc:	d007      	beq.n	18ee <MdmCnct_ConnectInProgressSubStateMachine+0x342>
                            DEBUG_PRINT("Failed to sent the PS Detach request to Tx Task");
    18de:	4877      	ldr	r0, [pc, #476]	; (1abc <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
    18e0:	4b6b      	ldr	r3, [pc, #428]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    18e2:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    18e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    18e8:	4b75      	ldr	r3, [pc, #468]	; (1ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
    18ea:	4798      	blx	r3
    18ec:	e6f7      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    18ee:	2300      	movs	r3, #0
    18f0:	461a      	mov	r2, r3
    18f2:	4619      	mov	r1, r3
    18f4:	486d      	ldr	r0, [pc, #436]	; (1aac <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    18f6:	6800      	ldr	r0, [r0, #0]
    18f8:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    18fa:	4b5f      	ldr	r3, [pc, #380]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    18fc:	2201      	movs	r2, #1
    18fe:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
    1900:	2202      	movs	r2, #2
    1902:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
    1904:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1908:	4b6d      	ldr	r3, [pc, #436]	; (1ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
    190a:	4798      	blx	r3
    190c:	e6e7      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    190e:	486d      	ldr	r0, [pc, #436]	; (1ac4 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    1910:	4b5f      	ldr	r3, [pc, #380]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    1912:	4798      	blx	r3
    1914:	e6e3      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            DEBUG_PRINT("Expected Response Not Received...");
    1916:	486c      	ldr	r0, [pc, #432]	; (1ac8 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
    1918:	4c5d      	ldr	r4, [pc, #372]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    191a:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    191c:	485e      	ldr	r0, [pc, #376]	; (1a98 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
    191e:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1920:	2200      	movs	r2, #0
    1922:	4b55      	ldr	r3, [pc, #340]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1924:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    1926:	4b69      	ldr	r3, [pc, #420]	; (1acc <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
    1928:	4798      	blx	r3
    192a:	e7b1      	b.n	1890 <MdmCnct_ConnectInProgressSubStateMachine+0x2e4>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    192c:	4868      	ldr	r0, [pc, #416]	; (1ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
    192e:	4b58      	ldr	r3, [pc, #352]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    1930:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1932:	4b51      	ldr	r3, [pc, #324]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1934:	2200      	movs	r2, #0
    1936:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1938:	68d8      	ldr	r0, [r3, #12]
    193a:	4b59      	ldr	r3, [pc, #356]	; (1aa0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
    193c:	4798      	blx	r3
    193e:	e6ce      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1940:	4b4d      	ldr	r3, [pc, #308]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1942:	789b      	ldrb	r3, [r3, #2]
    1944:	b1d3      	cbz	r3, 197c <MdmCnct_ConnectInProgressSubStateMachine+0x3d0>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1946:	2b01      	cmp	r3, #1
    1948:	f47f aec9 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    194c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1950:	494a      	ldr	r1, [pc, #296]	; (1a7c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1952:	4b4b      	ldr	r3, [pc, #300]	; (1a80 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
    1954:	6818      	ldr	r0, [r3, #0]
    1956:	4b4b      	ldr	r3, [pc, #300]	; (1a84 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
    1958:	4798      	blx	r3
    195a:	2801      	cmp	r0, #1
    195c:	f47f aebf 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KPATTERN)
    1960:	4b45      	ldr	r3, [pc, #276]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1962:	7a1b      	ldrb	r3, [r3, #8]
    1964:	2b14      	cmp	r3, #20
    1966:	d045      	beq.n	19f4 <MdmCnct_ConnectInProgressSubStateMachine+0x448>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1968:	4859      	ldr	r0, [pc, #356]	; (1ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
    196a:	4b49      	ldr	r3, [pc, #292]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    196c:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    196e:	4b42      	ldr	r3, [pc, #264]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1970:	2200      	movs	r2, #0
    1972:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1974:	68d8      	ldr	r0, [r3, #12]
    1976:	4b4a      	ldr	r3, [pc, #296]	; (1aa0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
    1978:	4798      	blx	r3
    197a:	e6b0      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    197c:	4b49      	ldr	r3, [pc, #292]	; (1aa4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    197e:	6818      	ldr	r0, [r3, #0]
    1980:	4b49      	ldr	r3, [pc, #292]	; (1aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1982:	4798      	blx	r3
    1984:	2800      	cmp	r0, #0
    1986:	d131      	bne.n	19ec <MdmCnct_ConnectInProgressSubStateMachine+0x440>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1988:	2100      	movs	r1, #0
    198a:	4b48      	ldr	r3, [pc, #288]	; (1aac <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    198c:	6818      	ldr	r0, [r3, #0]
    198e:	4b48      	ldr	r3, [pc, #288]	; (1ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1990:	4798      	blx	r3
    1992:	2801      	cmp	r0, #1
    1994:	d003      	beq.n	199e <MdmCnct_ConnectInProgressSubStateMachine+0x3f2>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1996:	4847      	ldr	r0, [pc, #284]	; (1ab4 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
    1998:	4b3d      	ldr	r3, [pc, #244]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    199a:	4798      	blx	r3
    199c:	e69f      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    199e:	2301      	movs	r3, #1
    19a0:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KPATTERN;
    19a4:	2314      	movs	r3, #20
    19a6:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    19aa:	2300      	movs	r3, #0
    19ac:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    19ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    19b2:	4669      	mov	r1, sp
    19b4:	483b      	ldr	r0, [pc, #236]	; (1aa4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    19b6:	6800      	ldr	r0, [r0, #0]
    19b8:	4c3f      	ldr	r4, [pc, #252]	; (1ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
    19ba:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    19bc:	2801      	cmp	r0, #1
    19be:	d007      	beq.n	19d0 <MdmCnct_ConnectInProgressSubStateMachine+0x424>
                            DEBUG_PRINT("Failed to sent the EOF pattern to Tx Task");
    19c0:	4844      	ldr	r0, [pc, #272]	; (1ad4 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
    19c2:	4b33      	ldr	r3, [pc, #204]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    19c4:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    19c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    19ca:	4b3d      	ldr	r3, [pc, #244]	; (1ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
    19cc:	4798      	blx	r3
    19ce:	e686      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    19d0:	2300      	movs	r3, #0
    19d2:	461a      	mov	r2, r3
    19d4:	4619      	mov	r1, r3
    19d6:	4835      	ldr	r0, [pc, #212]	; (1aac <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    19d8:	6800      	ldr	r0, [r0, #0]
    19da:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    19dc:	2201      	movs	r2, #1
    19de:	4b26      	ldr	r3, [pc, #152]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    19e0:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    19e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    19e6:	4b36      	ldr	r3, [pc, #216]	; (1ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
    19e8:	4798      	blx	r3
    19ea:	e678      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    19ec:	4835      	ldr	r0, [pc, #212]	; (1ac4 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    19ee:	4b28      	ldr	r3, [pc, #160]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    19f0:	4798      	blx	r3
    19f2:	e674      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("EOF Pattern configured");
    19f4:	4838      	ldr	r0, [pc, #224]	; (1ad8 <MdmCnct_ConnectInProgressSubStateMachine+0x52c>)
    19f6:	4d26      	ldr	r5, [pc, #152]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    19f8:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    19fa:	4c1f      	ldr	r4, [pc, #124]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    19fc:	8961      	ldrh	r1, [r4, #10]
    19fe:	68e0      	ldr	r0, [r4, #12]
    1a00:	4b24      	ldr	r3, [pc, #144]	; (1a94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1a02:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1a04:	4824      	ldr	r0, [pc, #144]	; (1a98 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
    1a06:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_ACCESS_POINT;
    1a08:	2304      	movs	r3, #4
    1a0a:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1a0c:	2300      	movs	r3, #0
    1a0e:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1a10:	68e0      	ldr	r0, [r4, #12]
    1a12:	4b23      	ldr	r3, [pc, #140]	; (1aa0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
    1a14:	4798      	blx	r3
    1a16:	e662      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1a18:	4b17      	ldr	r3, [pc, #92]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1a1a:	789b      	ldrb	r3, [r3, #2]
    1a1c:	b1d3      	cbz	r3, 1a54 <MdmCnct_ConnectInProgressSubStateMachine+0x4a8>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1a1e:	2b01      	cmp	r3, #1
    1a20:	f47f ae5d 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1a24:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1a28:	4914      	ldr	r1, [pc, #80]	; (1a7c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1a2a:	4b15      	ldr	r3, [pc, #84]	; (1a80 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
    1a2c:	6818      	ldr	r0, [r3, #0]
    1a2e:	4b15      	ldr	r3, [pc, #84]	; (1a84 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
    1a30:	4798      	blx	r3
    1a32:	2801      	cmp	r0, #1
    1a34:	f47f ae53 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXCFG)
    1a38:	4b0f      	ldr	r3, [pc, #60]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1a3a:	7a1b      	ldrb	r3, [r3, #8]
    1a3c:	2b15      	cmp	r3, #21
    1a3e:	d078      	beq.n	1b32 <MdmCnct_ConnectInProgressSubStateMachine+0x586>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1a40:	4823      	ldr	r0, [pc, #140]	; (1ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
    1a42:	4b13      	ldr	r3, [pc, #76]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    1a44:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1a46:	4b0c      	ldr	r3, [pc, #48]	; (1a78 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1a48:	2200      	movs	r2, #0
    1a4a:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1a4c:	68d8      	ldr	r0, [r3, #12]
    1a4e:	4b14      	ldr	r3, [pc, #80]	; (1aa0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
    1a50:	4798      	blx	r3
    1a52:	e644      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1a54:	4b13      	ldr	r3, [pc, #76]	; (1aa4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    1a56:	6818      	ldr	r0, [r3, #0]
    1a58:	4b13      	ldr	r3, [pc, #76]	; (1aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1a5a:	4798      	blx	r3
    1a5c:	2800      	cmp	r0, #0
    1a5e:	d164      	bne.n	1b2a <MdmCnct_ConnectInProgressSubStateMachine+0x57e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1a60:	2100      	movs	r1, #0
    1a62:	4b12      	ldr	r3, [pc, #72]	; (1aac <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    1a64:	6818      	ldr	r0, [r3, #0]
    1a66:	4b12      	ldr	r3, [pc, #72]	; (1ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1a68:	4798      	blx	r3
    1a6a:	2801      	cmp	r0, #1
    1a6c:	d036      	beq.n	1adc <MdmCnct_ConnectInProgressSubStateMachine+0x530>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1a6e:	4811      	ldr	r0, [pc, #68]	; (1ab4 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
    1a70:	4b07      	ldr	r3, [pc, #28]	; (1a90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    1a72:	4798      	blx	r3
    1a74:	e633      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
    1a76:	bf00      	nop
    1a78:	200002d4 	.word	0x200002d4
    1a7c:	200002dc 	.word	0x200002dc
    1a80:	20003544 	.word	0x20003544
    1a84:	000054ad 	.word	0x000054ad
    1a88:	00001541 	.word	0x00001541
    1a8c:	000085dc 	.word	0x000085dc
    1a90:	0000313d 	.word	0x0000313d
    1a94:	000030f9 	.word	0x000030f9
    1a98:	00008e50 	.word	0x00008e50
    1a9c:	000085f0 	.word	0x000085f0
    1aa0:	00004e75 	.word	0x00004e75
    1aa4:	20003568 	.word	0x20003568
    1aa8:	00005815 	.word	0x00005815
    1aac:	2000357c 	.word	0x2000357c
    1ab0:	00005635 	.word	0x00005635
    1ab4:	00007584 	.word	0x00007584
    1ab8:	0000519d 	.word	0x0000519d
    1abc:	000085ac 	.word	0x000085ac
    1ac0:	00005e2d 	.word	0x00005e2d
    1ac4:	000075b0 	.word	0x000075b0
    1ac8:	00008588 	.word	0x00008588
    1acc:	00001581 	.word	0x00001581
    1ad0:	00008534 	.word	0x00008534
    1ad4:	00008628 	.word	0x00008628
    1ad8:	00008654 	.word	0x00008654
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1adc:	2301      	movs	r3, #1
    1ade:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXCFG;
    1ae2:	2315      	movs	r3, #21
    1ae4:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1ae8:	2300      	movs	r3, #0
    1aea:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1aec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1af0:	4669      	mov	r1, sp
    1af2:	4890      	ldr	r0, [pc, #576]	; (1d34 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    1af4:	6800      	ldr	r0, [r0, #0]
    1af6:	4c90      	ldr	r4, [pc, #576]	; (1d38 <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
    1af8:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1afa:	2801      	cmp	r0, #1
    1afc:	d007      	beq.n	1b0e <MdmCnct_ConnectInProgressSubStateMachine+0x562>
                            DEBUG_PRINT("Failed to sent access point cmd to Tx Task");
    1afe:	488f      	ldr	r0, [pc, #572]	; (1d3c <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
    1b00:	4b8f      	ldr	r3, [pc, #572]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1b02:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1b08:	4b8e      	ldr	r3, [pc, #568]	; (1d44 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1b0a:	4798      	blx	r3
    1b0c:	e5e7      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1b0e:	2300      	movs	r3, #0
    1b10:	461a      	mov	r2, r3
    1b12:	4619      	mov	r1, r3
    1b14:	488c      	ldr	r0, [pc, #560]	; (1d48 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1b16:	6800      	ldr	r0, [r0, #0]
    1b18:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1b1a:	2201      	movs	r2, #1
    1b1c:	4b8b      	ldr	r3, [pc, #556]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1b1e:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1b24:	4b87      	ldr	r3, [pc, #540]	; (1d44 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1b26:	4798      	blx	r3
    1b28:	e5d9      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1b2a:	4889      	ldr	r0, [pc, #548]	; (1d50 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1b2c:	4b84      	ldr	r3, [pc, #528]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1b2e:	4798      	blx	r3
    1b30:	e5d5      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Access Point configured");
    1b32:	4888      	ldr	r0, [pc, #544]	; (1d54 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1b34:	4d82      	ldr	r5, [pc, #520]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1b36:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1b38:	4c84      	ldr	r4, [pc, #528]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1b3a:	8961      	ldrh	r1, [r4, #10]
    1b3c:	68e0      	ldr	r0, [r4, #12]
    1b3e:	4b86      	ldr	r3, [pc, #536]	; (1d58 <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1b40:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1b42:	4886      	ldr	r0, [pc, #536]	; (1d5c <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1b44:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_CONNECT_TIMERS;
    1b46:	2305      	movs	r3, #5
    1b48:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1b4a:	2300      	movs	r3, #0
    1b4c:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1b4e:	68e0      	ldr	r0, [r4, #12]
    1b50:	4b83      	ldr	r3, [pc, #524]	; (1d60 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1b52:	4798      	blx	r3
    1b54:	e5c3      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1b56:	4b7d      	ldr	r3, [pc, #500]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1b58:	789b      	ldrb	r3, [r3, #2]
    1b5a:	b1d3      	cbz	r3, 1b92 <MdmCnct_ConnectInProgressSubStateMachine+0x5e6>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1b5c:	2b01      	cmp	r3, #1
    1b5e:	f47f adbe 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1b62:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1b66:	497f      	ldr	r1, [pc, #508]	; (1d64 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
    1b68:	4b7f      	ldr	r3, [pc, #508]	; (1d68 <MdmCnct_ConnectInProgressSubStateMachine+0x7bc>)
    1b6a:	6818      	ldr	r0, [r3, #0]
    1b6c:	4b7f      	ldr	r3, [pc, #508]	; (1d6c <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1b6e:	4798      	blx	r3
    1b70:	2801      	cmp	r0, #1
    1b72:	f47f adb4 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXTIMER)
    1b76:	4b75      	ldr	r3, [pc, #468]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1b78:	7a1b      	ldrb	r3, [r3, #8]
    1b7a:	2b16      	cmp	r3, #22
    1b7c:	d045      	beq.n	1c0a <MdmCnct_ConnectInProgressSubStateMachine+0x65e>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1b7e:	487c      	ldr	r0, [pc, #496]	; (1d70 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    1b80:	4b6f      	ldr	r3, [pc, #444]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1b82:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1b84:	4b71      	ldr	r3, [pc, #452]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1b86:	2200      	movs	r2, #0
    1b88:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1b8a:	68d8      	ldr	r0, [r3, #12]
    1b8c:	4b74      	ldr	r3, [pc, #464]	; (1d60 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1b8e:	4798      	blx	r3
    1b90:	e5a5      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1b92:	4b68      	ldr	r3, [pc, #416]	; (1d34 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    1b94:	6818      	ldr	r0, [r3, #0]
    1b96:	4b77      	ldr	r3, [pc, #476]	; (1d74 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1b98:	4798      	blx	r3
    1b9a:	2800      	cmp	r0, #0
    1b9c:	d131      	bne.n	1c02 <MdmCnct_ConnectInProgressSubStateMachine+0x656>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1b9e:	2100      	movs	r1, #0
    1ba0:	4b69      	ldr	r3, [pc, #420]	; (1d48 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1ba2:	6818      	ldr	r0, [r3, #0]
    1ba4:	4b74      	ldr	r3, [pc, #464]	; (1d78 <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    1ba6:	4798      	blx	r3
    1ba8:	2801      	cmp	r0, #1
    1baa:	d003      	beq.n	1bb4 <MdmCnct_ConnectInProgressSubStateMachine+0x608>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1bac:	4873      	ldr	r0, [pc, #460]	; (1d7c <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    1bae:	4b64      	ldr	r3, [pc, #400]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1bb0:	4798      	blx	r3
    1bb2:	e594      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1bb4:	2301      	movs	r3, #1
    1bb6:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXTIMER;
    1bba:	2316      	movs	r3, #22
    1bbc:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1bc0:	2300      	movs	r3, #0
    1bc2:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1bc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1bc8:	4669      	mov	r1, sp
    1bca:	485a      	ldr	r0, [pc, #360]	; (1d34 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    1bcc:	6800      	ldr	r0, [r0, #0]
    1bce:	4c5a      	ldr	r4, [pc, #360]	; (1d38 <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
    1bd0:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1bd2:	2801      	cmp	r0, #1
    1bd4:	d007      	beq.n	1be6 <MdmCnct_ConnectInProgressSubStateMachine+0x63a>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    1bd6:	486a      	ldr	r0, [pc, #424]	; (1d80 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    1bd8:	4b59      	ldr	r3, [pc, #356]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1bda:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1be0:	4b58      	ldr	r3, [pc, #352]	; (1d44 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1be2:	4798      	blx	r3
    1be4:	e57b      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1be6:	2300      	movs	r3, #0
    1be8:	461a      	mov	r2, r3
    1bea:	4619      	mov	r1, r3
    1bec:	4856      	ldr	r0, [pc, #344]	; (1d48 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1bee:	6800      	ldr	r0, [r0, #0]
    1bf0:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1bf2:	2201      	movs	r2, #1
    1bf4:	4b55      	ldr	r3, [pc, #340]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1bf6:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1bf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1bfc:	4b51      	ldr	r3, [pc, #324]	; (1d44 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1bfe:	4798      	blx	r3
    1c00:	e56d      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1c02:	4853      	ldr	r0, [pc, #332]	; (1d50 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1c04:	4b4e      	ldr	r3, [pc, #312]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1c06:	4798      	blx	r3
    1c08:	e569      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Connection Timers configured");
    1c0a:	485e      	ldr	r0, [pc, #376]	; (1d84 <MdmCnct_ConnectInProgressSubStateMachine+0x7d8>)
    1c0c:	4d4c      	ldr	r5, [pc, #304]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1c0e:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1c10:	4c4e      	ldr	r4, [pc, #312]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1c12:	8961      	ldrh	r1, [r4, #10]
    1c14:	68e0      	ldr	r0, [r4, #12]
    1c16:	4b50      	ldr	r3, [pc, #320]	; (1d58 <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1c18:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1c1a:	4850      	ldr	r0, [pc, #320]	; (1d5c <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1c1c:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_SERVER_ADDRESS;
    1c1e:	2306      	movs	r3, #6
    1c20:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1c22:	2300      	movs	r3, #0
    1c24:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1c26:	68e0      	ldr	r0, [r4, #12]
    1c28:	4b4d      	ldr	r3, [pc, #308]	; (1d60 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1c2a:	4798      	blx	r3
    1c2c:	e557      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1c2e:	4b47      	ldr	r3, [pc, #284]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1c30:	789b      	ldrb	r3, [r3, #2]
    1c32:	b1d3      	cbz	r3, 1c6a <MdmCnct_ConnectInProgressSubStateMachine+0x6be>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1c34:	2b01      	cmp	r3, #1
    1c36:	f47f ad52 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1c3a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1c3e:	4949      	ldr	r1, [pc, #292]	; (1d64 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
    1c40:	4b49      	ldr	r3, [pc, #292]	; (1d68 <MdmCnct_ConnectInProgressSubStateMachine+0x7bc>)
    1c42:	6818      	ldr	r0, [r3, #0]
    1c44:	4b49      	ldr	r3, [pc, #292]	; (1d6c <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1c46:	4798      	blx	r3
    1c48:	2801      	cmp	r0, #1
    1c4a:	f47f ad48 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_CFG)
    1c4e:	4b3f      	ldr	r3, [pc, #252]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1c50:	7a1b      	ldrb	r3, [r3, #8]
    1c52:	2b09      	cmp	r3, #9
    1c54:	d045      	beq.n	1ce2 <MdmCnct_ConnectInProgressSubStateMachine+0x736>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1c56:	4846      	ldr	r0, [pc, #280]	; (1d70 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    1c58:	4b39      	ldr	r3, [pc, #228]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1c5a:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1c5c:	4b3b      	ldr	r3, [pc, #236]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1c5e:	2200      	movs	r2, #0
    1c60:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1c62:	68d8      	ldr	r0, [r3, #12]
    1c64:	4b3e      	ldr	r3, [pc, #248]	; (1d60 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1c66:	4798      	blx	r3
    1c68:	e539      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1c6a:	4b32      	ldr	r3, [pc, #200]	; (1d34 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    1c6c:	6818      	ldr	r0, [r3, #0]
    1c6e:	4b41      	ldr	r3, [pc, #260]	; (1d74 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1c70:	4798      	blx	r3
    1c72:	2800      	cmp	r0, #0
    1c74:	d131      	bne.n	1cda <MdmCnct_ConnectInProgressSubStateMachine+0x72e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1c76:	2100      	movs	r1, #0
    1c78:	4b33      	ldr	r3, [pc, #204]	; (1d48 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1c7a:	6818      	ldr	r0, [r3, #0]
    1c7c:	4b3e      	ldr	r3, [pc, #248]	; (1d78 <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    1c7e:	4798      	blx	r3
    1c80:	2801      	cmp	r0, #1
    1c82:	d003      	beq.n	1c8c <MdmCnct_ConnectInProgressSubStateMachine+0x6e0>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1c84:	483d      	ldr	r0, [pc, #244]	; (1d7c <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    1c86:	4b2e      	ldr	r3, [pc, #184]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1c88:	4798      	blx	r3
    1c8a:	e528      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1c8c:	2301      	movs	r3, #1
    1c8e:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_CFG;
    1c92:	2309      	movs	r3, #9
    1c94:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1c98:	2300      	movs	r3, #0
    1c9a:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1c9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1ca0:	4669      	mov	r1, sp
    1ca2:	4824      	ldr	r0, [pc, #144]	; (1d34 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    1ca4:	6800      	ldr	r0, [r0, #0]
    1ca6:	4c24      	ldr	r4, [pc, #144]	; (1d38 <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
    1ca8:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1caa:	2801      	cmp	r0, #1
    1cac:	d007      	beq.n	1cbe <MdmCnct_ConnectInProgressSubStateMachine+0x712>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    1cae:	4834      	ldr	r0, [pc, #208]	; (1d80 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    1cb0:	4b23      	ldr	r3, [pc, #140]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1cb2:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1cb8:	4b22      	ldr	r3, [pc, #136]	; (1d44 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1cba:	4798      	blx	r3
    1cbc:	e50f      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1cbe:	2300      	movs	r3, #0
    1cc0:	461a      	mov	r2, r3
    1cc2:	4619      	mov	r1, r3
    1cc4:	4820      	ldr	r0, [pc, #128]	; (1d48 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1cc6:	6800      	ldr	r0, [r0, #0]
    1cc8:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1cca:	2201      	movs	r2, #1
    1ccc:	4b1f      	ldr	r3, [pc, #124]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1cce:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1cd4:	4b1b      	ldr	r3, [pc, #108]	; (1d44 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1cd6:	4798      	blx	r3
    1cd8:	e501      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1cda:	481d      	ldr	r0, [pc, #116]	; (1d50 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1cdc:	4b18      	ldr	r3, [pc, #96]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1cde:	4798      	blx	r3
    1ce0:	e4fd      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        MdmCnct_ExtractSessionIdFromConfigResponse(ConnectionResponse.response);
    1ce2:	4c1a      	ldr	r4, [pc, #104]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1ce4:	68e0      	ldr	r0, [r4, #12]
    currentSessionId = cfgResponse[SESSION_ID_POSITION];
    1ce6:	7ac3      	ldrb	r3, [r0, #11]
    1ce8:	7423      	strb	r3, [r4, #16]
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1cea:	8961      	ldrh	r1, [r4, #10]
    1cec:	4b1a      	ldr	r3, [pc, #104]	; (1d58 <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1cee:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1cf0:	481a      	ldr	r0, [pc, #104]	; (1d5c <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1cf2:	4b13      	ldr	r3, [pc, #76]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1cf4:	4798      	blx	r3
    connectionStatus = cfgResponse[CONNECT_STATUS_POSITION];
    1cf6:	68e3      	ldr	r3, [r4, #12]
    switch(connectionStatus)
    1cf8:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    1cfc:	3b30      	subs	r3, #48	; 0x30
    1cfe:	2b06      	cmp	r3, #6
    1d00:	d808      	bhi.n	1d14 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
    1d02:	e8df f003 	tbb	[pc, r3]
    1d06:	4704      	.short	0x4704
    1d08:	64605c58 	.word	0x64605c58
    1d0c:	68          	.byte	0x68
    1d0d:	00          	.byte	0x00
            DEBUG_PRINT("Connection Status : DISCONNECTED DUE TO NETWORK");
    1d0e:	481e      	ldr	r0, [pc, #120]	; (1d88 <MdmCnct_ConnectInProgressSubStateMachine+0x7dc>)
    1d10:	4b0b      	ldr	r3, [pc, #44]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1d12:	4798      	blx	r3
                            DEBUG_PRINT("Error : Connection Failure");
    1d14:	481d      	ldr	r0, [pc, #116]	; (1d8c <MdmCnct_ConnectInProgressSubStateMachine+0x7e0>)
    1d16:	4c0a      	ldr	r4, [pc, #40]	; (1d40 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1d18:	47a0      	blx	r4
                            DEBUG_PRINT("Restarting the connection initialization...");
    1d1a:	481d      	ldr	r0, [pc, #116]	; (1d90 <MdmCnct_ConnectInProgressSubStateMachine+0x7e4>)
    1d1c:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1d1e:	480f      	ldr	r0, [pc, #60]	; (1d5c <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1d20:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1d22:	4b0a      	ldr	r3, [pc, #40]	; (1d4c <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1d24:	2200      	movs	r2, #0
    1d26:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    1d28:	2207      	movs	r2, #7
    1d2a:	70da      	strb	r2, [r3, #3]
                            gHttpConnectionState =  MDM_HTTP_CONNECTED;
    1d2c:	2202      	movs	r2, #2
    1d2e:	701a      	strb	r2, [r3, #0]
    1d30:	e03c      	b.n	1dac <MdmCnct_ConnectInProgressSubStateMachine+0x800>
    1d32:	bf00      	nop
    1d34:	20003568 	.word	0x20003568
    1d38:	0000519d 	.word	0x0000519d
    1d3c:	0000866c 	.word	0x0000866c
    1d40:	0000313d 	.word	0x0000313d
    1d44:	00005e2d 	.word	0x00005e2d
    1d48:	2000357c 	.word	0x2000357c
    1d4c:	200002d4 	.word	0x200002d4
    1d50:	000075b0 	.word	0x000075b0
    1d54:	00008698 	.word	0x00008698
    1d58:	000030f9 	.word	0x000030f9
    1d5c:	00008e50 	.word	0x00008e50
    1d60:	00004e75 	.word	0x00004e75
    1d64:	200002dc 	.word	0x200002dc
    1d68:	20003544 	.word	0x20003544
    1d6c:	000054ad 	.word	0x000054ad
    1d70:	00008534 	.word	0x00008534
    1d74:	00005815 	.word	0x00005815
    1d78:	00005635 	.word	0x00005635
    1d7c:	00007584 	.word	0x00007584
    1d80:	000086b0 	.word	0x000086b0
    1d84:	000086e0 	.word	0x000086e0
    1d88:	00008700 	.word	0x00008700
    1d8c:	00008864 	.word	0x00008864
    1d90:	00008880 	.word	0x00008880
            DEBUG_PRINT("Connection Status : CONNECTED");
    1d94:	4855      	ldr	r0, [pc, #340]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
    1d96:	4c56      	ldr	r4, [pc, #344]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1d98:	47a0      	blx	r4
                            DEBUG_PRINT("Connection successful...Cloud Server configured");
    1d9a:	4856      	ldr	r0, [pc, #344]	; (1ef4 <MdmCnct_ConnectInProgressSubStateMachine+0x948>)
    1d9c:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1d9e:	4856      	ldr	r0, [pc, #344]	; (1ef8 <MdmCnct_ConnectInProgressSubStateMachine+0x94c>)
    1da0:	47a0      	blx	r4
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_HTTP_HEADER;
    1da2:	4b56      	ldr	r3, [pc, #344]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1da4:	2207      	movs	r2, #7
    1da6:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1da8:	2200      	movs	r2, #0
    1daa:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1dac:	4b53      	ldr	r3, [pc, #332]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1dae:	68d8      	ldr	r0, [r3, #12]
    1db0:	4b53      	ldr	r3, [pc, #332]	; (1f00 <MdmCnct_ConnectInProgressSubStateMachine+0x954>)
    1db2:	4798      	blx	r3
    1db4:	e493      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            DEBUG_PRINT("Connection Status : FAILED TO CONNECT");
    1db6:	4853      	ldr	r0, [pc, #332]	; (1f04 <MdmCnct_ConnectInProgressSubStateMachine+0x958>)
    1db8:	4b4d      	ldr	r3, [pc, #308]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1dba:	4798      	blx	r3
    1dbc:	e7aa      	b.n	1d14 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : CONNECTION CLOSED");
    1dbe:	4852      	ldr	r0, [pc, #328]	; (1f08 <MdmCnct_ConnectInProgressSubStateMachine+0x95c>)
    1dc0:	4b4b      	ldr	r3, [pc, #300]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1dc2:	4798      	blx	r3
    1dc4:	e7a6      	b.n	1d14 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : CONNECTION IN PROGRESS");
    1dc6:	4851      	ldr	r0, [pc, #324]	; (1f0c <MdmCnct_ConnectInProgressSubStateMachine+0x960>)
    1dc8:	4b49      	ldr	r3, [pc, #292]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1dca:	4798      	blx	r3
    1dcc:	e7a2      	b.n	1d14 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : IDLE TIMER STARTED FOR DISCONNECTION");
    1dce:	4850      	ldr	r0, [pc, #320]	; (1f10 <MdmCnct_ConnectInProgressSubStateMachine+0x964>)
    1dd0:	4b47      	ldr	r3, [pc, #284]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1dd2:	4798      	blx	r3
    1dd4:	e79e      	b.n	1d14 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : IDLE TIMER CANCELLED");
    1dd6:	484f      	ldr	r0, [pc, #316]	; (1f14 <MdmCnct_ConnectInProgressSubStateMachine+0x968>)
    1dd8:	4b45      	ldr	r3, [pc, #276]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1dda:	4798      	blx	r3
    1ddc:	e79a      	b.n	1d14 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1dde:	4b47      	ldr	r3, [pc, #284]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1de0:	789b      	ldrb	r3, [r3, #2]
    1de2:	b1d3      	cbz	r3, 1e1a <MdmCnct_ConnectInProgressSubStateMachine+0x86e>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1de4:	2b01      	cmp	r3, #1
    1de6:	f47f ac7a 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1dea:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1dee:	494a      	ldr	r1, [pc, #296]	; (1f18 <MdmCnct_ConnectInProgressSubStateMachine+0x96c>)
    1df0:	4b4a      	ldr	r3, [pc, #296]	; (1f1c <MdmCnct_ConnectInProgressSubStateMachine+0x970>)
    1df2:	6818      	ldr	r0, [r3, #0]
    1df4:	4b4a      	ldr	r3, [pc, #296]	; (1f20 <MdmCnct_ConnectInProgressSubStateMachine+0x974>)
    1df6:	4798      	blx	r3
    1df8:	2801      	cmp	r0, #1
    1dfa:	f47f ac70 	bne.w	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_HEADER)
    1dfe:	4b3f      	ldr	r3, [pc, #252]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1e00:	7a1b      	ldrb	r3, [r3, #8]
    1e02:	2b17      	cmp	r3, #23
    1e04:	d048      	beq.n	1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x8ec>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1e06:	4847      	ldr	r0, [pc, #284]	; (1f24 <MdmCnct_ConnectInProgressSubStateMachine+0x978>)
    1e08:	4b39      	ldr	r3, [pc, #228]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1e0a:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1e0c:	4b3b      	ldr	r3, [pc, #236]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1e0e:	2200      	movs	r2, #0
    1e10:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1e12:	68d8      	ldr	r0, [r3, #12]
    1e14:	4b3a      	ldr	r3, [pc, #232]	; (1f00 <MdmCnct_ConnectInProgressSubStateMachine+0x954>)
    1e16:	4798      	blx	r3
}
    1e18:	e461      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                buildHttpHeaderWithActiveSessionID(&currentSessionId);
    1e1a:	4843      	ldr	r0, [pc, #268]	; (1f28 <MdmCnct_ConnectInProgressSubStateMachine+0x97c>)
    1e1c:	4b43      	ldr	r3, [pc, #268]	; (1f2c <MdmCnct_ConnectInProgressSubStateMachine+0x980>)
    1e1e:	4798      	blx	r3
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1e20:	4b43      	ldr	r3, [pc, #268]	; (1f30 <MdmCnct_ConnectInProgressSubStateMachine+0x984>)
    1e22:	6818      	ldr	r0, [r3, #0]
    1e24:	4b43      	ldr	r3, [pc, #268]	; (1f34 <MdmCnct_ConnectInProgressSubStateMachine+0x988>)
    1e26:	4798      	blx	r3
    1e28:	2800      	cmp	r0, #0
    1e2a:	d131      	bne.n	1e90 <MdmCnct_ConnectInProgressSubStateMachine+0x8e4>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1e2c:	2100      	movs	r1, #0
    1e2e:	4b42      	ldr	r3, [pc, #264]	; (1f38 <MdmCnct_ConnectInProgressSubStateMachine+0x98c>)
    1e30:	6818      	ldr	r0, [r3, #0]
    1e32:	4b42      	ldr	r3, [pc, #264]	; (1f3c <MdmCnct_ConnectInProgressSubStateMachine+0x990>)
    1e34:	4798      	blx	r3
    1e36:	2801      	cmp	r0, #1
    1e38:	d003      	beq.n	1e42 <MdmCnct_ConnectInProgressSubStateMachine+0x896>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1e3a:	4841      	ldr	r0, [pc, #260]	; (1f40 <MdmCnct_ConnectInProgressSubStateMachine+0x994>)
    1e3c:	4b2c      	ldr	r3, [pc, #176]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1e3e:	4798      	blx	r3
    1e40:	e44d      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1e42:	2301      	movs	r3, #1
    1e44:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_HEADER;
    1e48:	2317      	movs	r3, #23
    1e4a:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1e4e:	2300      	movs	r3, #0
    1e50:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1e52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1e56:	4669      	mov	r1, sp
    1e58:	4835      	ldr	r0, [pc, #212]	; (1f30 <MdmCnct_ConnectInProgressSubStateMachine+0x984>)
    1e5a:	6800      	ldr	r0, [r0, #0]
    1e5c:	4c39      	ldr	r4, [pc, #228]	; (1f44 <MdmCnct_ConnectInProgressSubStateMachine+0x998>)
    1e5e:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1e60:	2801      	cmp	r0, #1
    1e62:	d007      	beq.n	1e74 <MdmCnct_ConnectInProgressSubStateMachine+0x8c8>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    1e64:	4838      	ldr	r0, [pc, #224]	; (1f48 <MdmCnct_ConnectInProgressSubStateMachine+0x99c>)
    1e66:	4b22      	ldr	r3, [pc, #136]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1e68:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1e6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1e6e:	4b37      	ldr	r3, [pc, #220]	; (1f4c <MdmCnct_ConnectInProgressSubStateMachine+0x9a0>)
    1e70:	4798      	blx	r3
    1e72:	e434      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1e74:	2300      	movs	r3, #0
    1e76:	461a      	mov	r2, r3
    1e78:	4619      	mov	r1, r3
    1e7a:	482f      	ldr	r0, [pc, #188]	; (1f38 <MdmCnct_ConnectInProgressSubStateMachine+0x98c>)
    1e7c:	6800      	ldr	r0, [r0, #0]
    1e7e:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1e80:	2201      	movs	r2, #1
    1e82:	4b1e      	ldr	r3, [pc, #120]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1e84:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1e8a:	4b30      	ldr	r3, [pc, #192]	; (1f4c <MdmCnct_ConnectInProgressSubStateMachine+0x9a0>)
    1e8c:	4798      	blx	r3
    1e8e:	e426      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1e90:	482f      	ldr	r0, [pc, #188]	; (1f50 <MdmCnct_ConnectInProgressSubStateMachine+0x9a4>)
    1e92:	4b17      	ldr	r3, [pc, #92]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1e94:	4798      	blx	r3
    1e96:	e422      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1e98:	4c18      	ldr	r4, [pc, #96]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1e9a:	8961      	ldrh	r1, [r4, #10]
    1e9c:	68e0      	ldr	r0, [r4, #12]
    1e9e:	4b2d      	ldr	r3, [pc, #180]	; (1f54 <MdmCnct_ConnectInProgressSubStateMachine+0x9a8>)
    1ea0:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1ea2:	4815      	ldr	r0, [pc, #84]	; (1ef8 <MdmCnct_ConnectInProgressSubStateMachine+0x94c>)
    1ea4:	4b12      	ldr	r3, [pc, #72]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1ea6:	4798      	blx	r3
    if(0==memcmp(response,"CONNECT",7))
    1ea8:	2207      	movs	r2, #7
    1eaa:	492b      	ldr	r1, [pc, #172]	; (1f58 <MdmCnct_ConnectInProgressSubStateMachine+0x9ac>)
    1eac:	68e0      	ldr	r0, [r4, #12]
    1eae:	4b2b      	ldr	r3, [pc, #172]	; (1f5c <MdmCnct_ConnectInProgressSubStateMachine+0x9b0>)
    1eb0:	4798      	blx	r3
    1eb2:	b138      	cbz	r0, 1ec4 <MdmCnct_ConnectInProgressSubStateMachine+0x918>
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1eb4:	2200      	movs	r2, #0
    1eb6:	4b11      	ldr	r3, [pc, #68]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1eb8:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1eba:	4b10      	ldr	r3, [pc, #64]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1ebc:	68d8      	ldr	r0, [r3, #12]
    1ebe:	4b10      	ldr	r3, [pc, #64]	; (1f00 <MdmCnct_ConnectInProgressSubStateMachine+0x954>)
    1ec0:	4798      	blx	r3
    1ec2:	e40c      	b.n	16de <MdmCnct_ConnectInProgressSubStateMachine+0x132>
        mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
    1ec4:	2110      	movs	r1, #16
    1ec6:	4826      	ldr	r0, [pc, #152]	; (1f60 <MdmCnct_ConnectInProgressSubStateMachine+0x9b4>)
    1ec8:	4b26      	ldr	r3, [pc, #152]	; (1f64 <MdmCnct_ConnectInProgressSubStateMachine+0x9b8>)
    1eca:	4798      	blx	r3
        mdmCtrlr_FlushRxBuffer();
    1ecc:	4b26      	ldr	r3, [pc, #152]	; (1f68 <MdmCnct_ConnectInProgressSubStateMachine+0x9bc>)
    1ece:	4798      	blx	r3
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    1ed0:	2200      	movs	r2, #0
    1ed2:	7062      	strb	r2, [r4, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1ed4:	70a2      	strb	r2, [r4, #2]
                            gHttpConnectionState = MDM_HTTP_CONNECTED;
    1ed6:	2102      	movs	r1, #2
    1ed8:	7021      	strb	r1, [r4, #0]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    1eda:	70e2      	strb	r2, [r4, #3]
                            DEBUG_PRINT("\r\n");
    1edc:	4806      	ldr	r0, [pc, #24]	; (1ef8 <MdmCnct_ConnectInProgressSubStateMachine+0x94c>)
    1ede:	4b04      	ldr	r3, [pc, #16]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1ee0:	4798      	blx	r3
                            vTaskDelay(PacketTransmitDelayMs);
    1ee2:	2064      	movs	r0, #100	; 0x64
    1ee4:	4b19      	ldr	r3, [pc, #100]	; (1f4c <MdmCnct_ConnectInProgressSubStateMachine+0x9a0>)
    1ee6:	4798      	blx	r3
    1ee8:	e7e7      	b.n	1eba <MdmCnct_ConnectInProgressSubStateMachine+0x90e>
    1eea:	bf00      	nop
    1eec:	00008730 	.word	0x00008730
    1ef0:	0000313d 	.word	0x0000313d
    1ef4:	00008750 	.word	0x00008750
    1ef8:	00008e50 	.word	0x00008e50
    1efc:	200002d4 	.word	0x200002d4
    1f00:	00004e75 	.word	0x00004e75
    1f04:	00008780 	.word	0x00008780
    1f08:	000087a8 	.word	0x000087a8
    1f0c:	000087d0 	.word	0x000087d0
    1f10:	000087fc 	.word	0x000087fc
    1f14:	00008838 	.word	0x00008838
    1f18:	200002dc 	.word	0x200002dc
    1f1c:	20003544 	.word	0x20003544
    1f20:	000054ad 	.word	0x000054ad
    1f24:	00008534 	.word	0x00008534
    1f28:	200002e4 	.word	0x200002e4
    1f2c:	00001319 	.word	0x00001319
    1f30:	20003568 	.word	0x20003568
    1f34:	00005815 	.word	0x00005815
    1f38:	2000357c 	.word	0x2000357c
    1f3c:	00005635 	.word	0x00005635
    1f40:	00007584 	.word	0x00007584
    1f44:	0000519d 	.word	0x0000519d
    1f48:	000086b0 	.word	0x000086b0
    1f4c:	00005e2d 	.word	0x00005e2d
    1f50:	000075b0 	.word	0x000075b0
    1f54:	000030f9 	.word	0x000030f9
    1f58:	000088ac 	.word	0x000088ac
    1f5c:	0000699b 	.word	0x0000699b
    1f60:	000082bc 	.word	0x000082bc
    1f64:	000027b5 	.word	0x000027b5
    1f68:	00002831 	.word	0x00002831

00001f6c <MdmConnect_HttpConnectionSchedule>:
{
    1f6c:	b530      	push	{r4, r5, lr}
    1f6e:	b083      	sub	sp, #12
    switch (gHttpConnectionState)
    1f70:	4b93      	ldr	r3, [pc, #588]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    1f72:	781b      	ldrb	r3, [r3, #0]
    1f74:	2b01      	cmp	r3, #1
    1f76:	d012      	beq.n	1f9e <MdmConnect_HttpConnectionSchedule+0x32>
    1f78:	b11b      	cbz	r3, 1f82 <MdmConnect_HttpConnectionSchedule+0x16>
    1f7a:	2b02      	cmp	r3, #2
    1f7c:	d012      	beq.n	1fa4 <MdmConnect_HttpConnectionSchedule+0x38>
}
    1f7e:	b003      	add	sp, #12
    1f80:	bd30      	pop	{r4, r5, pc}
            if(isModemDiagDataBaseUpdated() != false)
    1f82:	4b90      	ldr	r3, [pc, #576]	; (21c4 <MdmConnect_HttpConnectionSchedule+0x258>)
    1f84:	4798      	blx	r3
    1f86:	2800      	cmp	r0, #0
    1f88:	d0f9      	beq.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectionState = MDM_HTTP_CONNECTION_IN_PROGRESS;
    1f8a:	4b8d      	ldr	r3, [pc, #564]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    1f8c:	2201      	movs	r2, #1
    1f8e:	701a      	strb	r2, [r3, #0]
                gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    1f90:	2200      	movs	r2, #0
    1f92:	705a      	strb	r2, [r3, #1]
                gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1f94:	709a      	strb	r2, [r3, #2]
                DEBUG_PRINT("Closing Active Connections");
    1f96:	488c      	ldr	r0, [pc, #560]	; (21c8 <MdmConnect_HttpConnectionSchedule+0x25c>)
    1f98:	4b8c      	ldr	r3, [pc, #560]	; (21cc <MdmConnect_HttpConnectionSchedule+0x260>)
    1f9a:	4798      	blx	r3
    1f9c:	e7ef      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            MdmCnct_ConnectInProgressSubStateMachine();
    1f9e:	4b8c      	ldr	r3, [pc, #560]	; (21d0 <MdmConnect_HttpConnectionSchedule+0x264>)
    1fa0:	4798      	blx	r3
        break;
    1fa2:	e7ec      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gHttpConnectedSubState)
    1fa4:	4b86      	ldr	r3, [pc, #536]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    1fa6:	78db      	ldrb	r3, [r3, #3]
    1fa8:	2b08      	cmp	r3, #8
    1faa:	d8e8      	bhi.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
    1fac:	e8df f013 	tbh	[pc, r3, lsl #1]
    1fb0:	000f0009 	.word	0x000f0009
    1fb4:	00220017 	.word	0x00220017
    1fb8:	002c0026 	.word	0x002c0026
    1fbc:	00b30068 	.word	0x00b30068
    1fc0:	00c1      	.short	0x00c1
            mdmCtrlr_FlushRxBuffer();
    1fc2:	4b84      	ldr	r3, [pc, #528]	; (21d4 <MdmConnect_HttpConnectionSchedule+0x268>)
    1fc4:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_IDLE_MONITOR_CONNECTION;
    1fc6:	2201      	movs	r2, #1
    1fc8:	4b7d      	ldr	r3, [pc, #500]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    1fca:	70da      	strb	r2, [r3, #3]
    1fcc:	e7d7      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            if(false != isPacketTransmitTimerExpired())
    1fce:	4b82      	ldr	r3, [pc, #520]	; (21d8 <MdmConnect_HttpConnectionSchedule+0x26c>)
    1fd0:	4798      	blx	r3
    1fd2:	2800      	cmp	r0, #0
    1fd4:	d0d3      	beq.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            	gHttpConnectedSubState = CONNECTED_PERIODIC_6SEC_TIMER_EXPIRED;
    1fd6:	2202      	movs	r2, #2
    1fd8:	4b79      	ldr	r3, [pc, #484]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    1fda:	70da      	strb	r2, [r3, #3]
    1fdc:	e7cf      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
        	xSemaphoreGive(SensorScanSemaphore);
    1fde:	2300      	movs	r3, #0
    1fe0:	461a      	mov	r2, r3
    1fe2:	4619      	mov	r1, r3
    1fe4:	487d      	ldr	r0, [pc, #500]	; (21dc <MdmConnect_HttpConnectionSchedule+0x270>)
    1fe6:	6800      	ldr	r0, [r0, #0]
    1fe8:	4c7d      	ldr	r4, [pc, #500]	; (21e0 <MdmConnect_HttpConnectionSchedule+0x274>)
    1fea:	47a0      	blx	r4
        	gHttpConnectedSubState = CONNECTED_WAIT_FOR_DATA_FROM_SENSOR_TASK;
    1fec:	2203      	movs	r2, #3
    1fee:	4b74      	ldr	r3, [pc, #464]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    1ff0:	70da      	strb	r2, [r3, #3]
    1ff2:	e7c4      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
			gHttpConnectedSubState = CONNECTED_BUILD_DATA_PACKET_TO_SERVER;
    1ff4:	2204      	movs	r2, #4
    1ff6:	4b72      	ldr	r3, [pc, #456]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    1ff8:	70da      	strb	r2, [r3, #3]
    1ffa:	e7c0      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            buildDataPacketsToServer();
    1ffc:	4b79      	ldr	r3, [pc, #484]	; (21e4 <MdmConnect_HttpConnectionSchedule+0x278>)
    1ffe:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_SEND_DATA_PACKETS_TO_SERVER;
    2000:	2205      	movs	r2, #5
    2002:	4b6f      	ldr	r3, [pc, #444]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    2004:	70da      	strb	r2, [r3, #3]
    2006:	e7ba      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2008:	4b77      	ldr	r3, [pc, #476]	; (21e8 <MdmConnect_HttpConnectionSchedule+0x27c>)
    200a:	6818      	ldr	r0, [r3, #0]
    200c:	4b77      	ldr	r3, [pc, #476]	; (21ec <MdmConnect_HttpConnectionSchedule+0x280>)
    200e:	4798      	blx	r3
    2010:	2800      	cmp	r0, #0
    2012:	d131      	bne.n	2078 <MdmConnect_HttpConnectionSchedule+0x10c>
                if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    2014:	2100      	movs	r1, #0
    2016:	4b76      	ldr	r3, [pc, #472]	; (21f0 <MdmConnect_HttpConnectionSchedule+0x284>)
    2018:	6818      	ldr	r0, [r3, #0]
    201a:	4b76      	ldr	r3, [pc, #472]	; (21f4 <MdmConnect_HttpConnectionSchedule+0x288>)
    201c:	4798      	blx	r3
    201e:	2801      	cmp	r0, #1
    2020:	d003      	beq.n	202a <MdmConnect_HttpConnectionSchedule+0xbe>
                    DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    2022:	4875      	ldr	r0, [pc, #468]	; (21f8 <MdmConnect_HttpConnectionSchedule+0x28c>)
    2024:	4b69      	ldr	r3, [pc, #420]	; (21cc <MdmConnect_HttpConnectionSchedule+0x260>)
    2026:	4798      	blx	r3
    2028:	e7a9      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    202a:	2301      	movs	r3, #1
    202c:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KHTTP_GET;
    2030:	2318      	movs	r3, #24
    2032:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2036:	2300      	movs	r3, #0
    2038:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    203a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    203e:	4669      	mov	r1, sp
    2040:	4869      	ldr	r0, [pc, #420]	; (21e8 <MdmConnect_HttpConnectionSchedule+0x27c>)
    2042:	6800      	ldr	r0, [r0, #0]
    2044:	4c66      	ldr	r4, [pc, #408]	; (21e0 <MdmConnect_HttpConnectionSchedule+0x274>)
    2046:	47a0      	blx	r4
                    if(TxQueuePushStatus == pdPASS)
    2048:	2801      	cmp	r0, #1
    204a:	d007      	beq.n	205c <MdmConnect_HttpConnectionSchedule+0xf0>
                        DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    204c:	486b      	ldr	r0, [pc, #428]	; (21fc <MdmConnect_HttpConnectionSchedule+0x290>)
    204e:	4b5f      	ldr	r3, [pc, #380]	; (21cc <MdmConnect_HttpConnectionSchedule+0x260>)
    2050:	4798      	blx	r3
                        vTaskDelay(TransmitDelayMs);
    2052:	f640 10c4 	movw	r0, #2500	; 0x9c4
    2056:	4b6a      	ldr	r3, [pc, #424]	; (2200 <MdmConnect_HttpConnectionSchedule+0x294>)
    2058:	4798      	blx	r3
    205a:	e790      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    205c:	2300      	movs	r3, #0
    205e:	461a      	mov	r2, r3
    2060:	4619      	mov	r1, r3
    2062:	4863      	ldr	r0, [pc, #396]	; (21f0 <MdmConnect_HttpConnectionSchedule+0x284>)
    2064:	6800      	ldr	r0, [r0, #0]
    2066:	47a0      	blx	r4
                        gHttpConnectedSubState = CONNECTED_RECEIVE_RESPONSE_FROM_SERVER;
    2068:	2206      	movs	r2, #6
    206a:	4b55      	ldr	r3, [pc, #340]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    206c:	70da      	strb	r2, [r3, #3]
                        vTaskDelay(TransmitDelayMs);
    206e:	f640 10c4 	movw	r0, #2500	; 0x9c4
    2072:	4b63      	ldr	r3, [pc, #396]	; (2200 <MdmConnect_HttpConnectionSchedule+0x294>)
    2074:	4798      	blx	r3
    2076:	e782      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                DEBUG_PRINT("Transmit Queue is not empty");
    2078:	4862      	ldr	r0, [pc, #392]	; (2204 <MdmConnect_HttpConnectionSchedule+0x298>)
    207a:	4b54      	ldr	r3, [pc, #336]	; (21cc <MdmConnect_HttpConnectionSchedule+0x260>)
    207c:	4798      	blx	r3
    207e:	e77e      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    2080:	f241 3288 	movw	r2, #5000	; 0x1388
    2084:	4960      	ldr	r1, [pc, #384]	; (2208 <MdmConnect_HttpConnectionSchedule+0x29c>)
    2086:	4b61      	ldr	r3, [pc, #388]	; (220c <MdmConnect_HttpConnectionSchedule+0x2a0>)
    2088:	6818      	ldr	r0, [r3, #0]
    208a:	4b61      	ldr	r3, [pc, #388]	; (2210 <MdmConnect_HttpConnectionSchedule+0x2a4>)
    208c:	4798      	blx	r3
    208e:	2801      	cmp	r0, #1
    2090:	d139      	bne.n	2106 <MdmConnect_HttpConnectionSchedule+0x19a>
                if(ConnectionResponse.atCmd == CMD_AT_KHTTP_GET)
    2092:	4b4b      	ldr	r3, [pc, #300]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    2094:	7a1b      	ldrb	r3, [r3, #8]
    2096:	2b18      	cmp	r3, #24
    2098:	d127      	bne.n	20ea <MdmConnect_HttpConnectionSchedule+0x17e>
                    if(ConnectionResponse.length > 23)
    209a:	4b49      	ldr	r3, [pc, #292]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    209c:	895c      	ldrh	r4, [r3, #10]
    209e:	2c17      	cmp	r4, #23
    20a0:	d917      	bls.n	20d2 <MdmConnect_HttpConnectionSchedule+0x166>
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    20a2:	68dd      	ldr	r5, [r3, #12]
    if(0==memcmp(response,"CONNECT\r\nHTTP/1.1 200 OK",24))
    20a4:	2218      	movs	r2, #24
    20a6:	495b      	ldr	r1, [pc, #364]	; (2214 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    20a8:	4628      	mov	r0, r5
    20aa:	4b5b      	ldr	r3, [pc, #364]	; (2218 <MdmConnect_HttpConnectionSchedule+0x2ac>)
    20ac:	4798      	blx	r3
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    20ae:	b118      	cbz	r0, 20b8 <MdmConnect_HttpConnectionSchedule+0x14c>
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    20b0:	2207      	movs	r2, #7
    20b2:	4b43      	ldr	r3, [pc, #268]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    20b4:	70da      	strb	r2, [r3, #3]
    20b6:	e00f      	b.n	20d8 <MdmConnect_HttpConnectionSchedule+0x16c>
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    20b8:	4621      	mov	r1, r4
    20ba:	4628      	mov	r0, r5
    20bc:	4b57      	ldr	r3, [pc, #348]	; (221c <MdmConnect_HttpConnectionSchedule+0x2b0>)
    20be:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    20c0:	4857      	ldr	r0, [pc, #348]	; (2220 <MdmConnect_HttpConnectionSchedule+0x2b4>)
    20c2:	4b42      	ldr	r3, [pc, #264]	; (21cc <MdmConnect_HttpConnectionSchedule+0x260>)
    20c4:	4798      	blx	r3
                            clearPacketTransmitTimerExpiryFlag();
    20c6:	4b57      	ldr	r3, [pc, #348]	; (2224 <MdmConnect_HttpConnectionSchedule+0x2b8>)
    20c8:	4798      	blx	r3
                            gHttpConnectedSubState = CONNECTED_IDLE_MONITOR_CONNECTION;
    20ca:	2201      	movs	r2, #1
    20cc:	4b3c      	ldr	r3, [pc, #240]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    20ce:	70da      	strb	r2, [r3, #3]
    20d0:	e002      	b.n	20d8 <MdmConnect_HttpConnectionSchedule+0x16c>
                        gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    20d2:	2207      	movs	r2, #7
    20d4:	4b3a      	ldr	r3, [pc, #232]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    20d6:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    20d8:	4b39      	ldr	r3, [pc, #228]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    20da:	68d8      	ldr	r0, [r3, #12]
    20dc:	4b52      	ldr	r3, [pc, #328]	; (2228 <MdmConnect_HttpConnectionSchedule+0x2bc>)
    20de:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    20e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    20e4:	4b46      	ldr	r3, [pc, #280]	; (2200 <MdmConnect_HttpConnectionSchedule+0x294>)
    20e6:	4798      	blx	r3
    20e8:	e749      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Failed to receive connection response in RX mode");
    20ea:	4850      	ldr	r0, [pc, #320]	; (222c <MdmConnect_HttpConnectionSchedule+0x2c0>)
    20ec:	4b37      	ldr	r3, [pc, #220]	; (21cc <MdmConnect_HttpConnectionSchedule+0x260>)
    20ee:	4798      	blx	r3
                    gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    20f0:	4b33      	ldr	r3, [pc, #204]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    20f2:	2207      	movs	r2, #7
    20f4:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    20f6:	68d8      	ldr	r0, [r3, #12]
    20f8:	4b4b      	ldr	r3, [pc, #300]	; (2228 <MdmConnect_HttpConnectionSchedule+0x2bc>)
    20fa:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    20fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2100:	4b3f      	ldr	r3, [pc, #252]	; (2200 <MdmConnect_HttpConnectionSchedule+0x294>)
    2102:	4798      	blx	r3
    2104:	e73b      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    2106:	2207      	movs	r2, #7
    2108:	4b2d      	ldr	r3, [pc, #180]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    210a:	70da      	strb	r2, [r3, #3]
                vTaskDelay(reTransmissionDelayMs);
    210c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2110:	4b3b      	ldr	r3, [pc, #236]	; (2200 <MdmConnect_HttpConnectionSchedule+0x294>)
    2112:	4798      	blx	r3
    2114:	e733      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    2116:	4b2a      	ldr	r3, [pc, #168]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    2118:	2208      	movs	r2, #8
    211a:	70da      	strb	r2, [r3, #3]
            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    211c:	2200      	movs	r2, #0
    211e:	711a      	strb	r2, [r3, #4]
            sessionIdCount = 5;
    2120:	2105      	movs	r1, #5
    2122:	7159      	strb	r1, [r3, #5]
            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2124:	709a      	strb	r2, [r3, #2]
            DEBUG_PRINT("\r\nConnection interrupted...Performing the Error Recovery....\r\n");
    2126:	4842      	ldr	r0, [pc, #264]	; (2230 <MdmConnect_HttpConnectionSchedule+0x2c4>)
    2128:	4c28      	ldr	r4, [pc, #160]	; (21cc <MdmConnect_HttpConnectionSchedule+0x260>)
    212a:	47a0      	blx	r4
            DEBUG_PRINT("Closing the active connection");
    212c:	4841      	ldr	r0, [pc, #260]	; (2234 <MdmConnect_HttpConnectionSchedule+0x2c8>)
    212e:	47a0      	blx	r4
    2130:	e725      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gErrorRecoveryState)
    2132:	4b23      	ldr	r3, [pc, #140]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    2134:	791b      	ldrb	r3, [r3, #4]
    2136:	2b01      	cmp	r3, #1
    2138:	f000 810a 	beq.w	2350 <MdmConnect_HttpConnectionSchedule+0x3e4>
    213c:	b323      	cbz	r3, 2188 <MdmConnect_HttpConnectionSchedule+0x21c>
    213e:	2b02      	cmp	r3, #2
    2140:	f47f af1d 	bne.w	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    2144:	4b1e      	ldr	r3, [pc, #120]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    2146:	789b      	ldrb	r3, [r3, #2]
    2148:	2b00      	cmp	r3, #0
    214a:	f000 81d9 	beq.w	2500 <MdmConnect_HttpConnectionSchedule+0x594>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    214e:	2b01      	cmp	r3, #1
    2150:	f47f af15 	bne.w	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    2154:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    2158:	492b      	ldr	r1, [pc, #172]	; (2208 <MdmConnect_HttpConnectionSchedule+0x29c>)
    215a:	4b2c      	ldr	r3, [pc, #176]	; (220c <MdmConnect_HttpConnectionSchedule+0x2a0>)
    215c:	6818      	ldr	r0, [r3, #0]
    215e:	4b2c      	ldr	r3, [pc, #176]	; (2210 <MdmConnect_HttpConnectionSchedule+0x2a4>)
    2160:	4798      	blx	r3
    2162:	2801      	cmp	r0, #1
    2164:	f000 820a 	beq.w	257c <MdmConnect_HttpConnectionSchedule+0x610>
                    if(forcedModemRebootCnt <= 3)
    2168:	4b15      	ldr	r3, [pc, #84]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    216a:	7c5b      	ldrb	r3, [r3, #17]
    216c:	2b03      	cmp	r3, #3
    216e:	f240 8255 	bls.w	261c <MdmConnect_HttpConnectionSchedule+0x6b0>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    2172:	4831      	ldr	r0, [pc, #196]	; (2238 <MdmConnect_HttpConnectionSchedule+0x2cc>)
    2174:	4c15      	ldr	r4, [pc, #84]	; (21cc <MdmConnect_HttpConnectionSchedule+0x260>)
    2176:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    2178:	4830      	ldr	r0, [pc, #192]	; (223c <MdmConnect_HttpConnectionSchedule+0x2d0>)
    217a:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    217c:	2200      	movs	r2, #0
    217e:	4b10      	ldr	r3, [pc, #64]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    2180:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    2182:	4b2f      	ldr	r3, [pc, #188]	; (2240 <MdmConnect_HttpConnectionSchedule+0x2d4>)
    2184:	4798      	blx	r3
}
    2186:	e6fa      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    2188:	4b0d      	ldr	r3, [pc, #52]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    218a:	789b      	ldrb	r3, [r3, #2]
    218c:	2b00      	cmp	r3, #0
    218e:	f040 8092 	bne.w	22b6 <MdmConnect_HttpConnectionSchedule+0x34a>
                if(sessionIdCount > 0)
    2192:	4b0b      	ldr	r3, [pc, #44]	; (21c0 <MdmConnect_HttpConnectionSchedule+0x254>)
    2194:	795b      	ldrb	r3, [r3, #5]
    2196:	2b00      	cmp	r3, #0
    2198:	f000 8084 	beq.w	22a4 <MdmConnect_HttpConnectionSchedule+0x338>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    219c:	4b12      	ldr	r3, [pc, #72]	; (21e8 <MdmConnect_HttpConnectionSchedule+0x27c>)
    219e:	6818      	ldr	r0, [r3, #0]
    21a0:	4b12      	ldr	r3, [pc, #72]	; (21ec <MdmConnect_HttpConnectionSchedule+0x280>)
    21a2:	4798      	blx	r3
    21a4:	2800      	cmp	r0, #0
    21a6:	d179      	bne.n	229c <MdmConnect_HttpConnectionSchedule+0x330>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    21a8:	2100      	movs	r1, #0
    21aa:	4b11      	ldr	r3, [pc, #68]	; (21f0 <MdmConnect_HttpConnectionSchedule+0x284>)
    21ac:	6818      	ldr	r0, [r3, #0]
    21ae:	4b11      	ldr	r3, [pc, #68]	; (21f4 <MdmConnect_HttpConnectionSchedule+0x288>)
    21b0:	4798      	blx	r3
    21b2:	2801      	cmp	r0, #1
    21b4:	d046      	beq.n	2244 <MdmConnect_HttpConnectionSchedule+0x2d8>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    21b6:	4810      	ldr	r0, [pc, #64]	; (21f8 <MdmConnect_HttpConnectionSchedule+0x28c>)
    21b8:	4b04      	ldr	r3, [pc, #16]	; (21cc <MdmConnect_HttpConnectionSchedule+0x260>)
    21ba:	4798      	blx	r3
    21bc:	e6df      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
    21be:	bf00      	nop
    21c0:	200002d4 	.word	0x200002d4
    21c4:	00002b09 	.word	0x00002b09
    21c8:	000088b4 	.word	0x000088b4
    21cc:	0000313d 	.word	0x0000313d
    21d0:	000015ad 	.word	0x000015ad
    21d4:	00002831 	.word	0x00002831
    21d8:	00002e19 	.word	0x00002e19
    21dc:	20003578 	.word	0x20003578
    21e0:	0000519d 	.word	0x0000519d
    21e4:	000013a1 	.word	0x000013a1
    21e8:	20003568 	.word	0x20003568
    21ec:	00005815 	.word	0x00005815
    21f0:	2000357c 	.word	0x2000357c
    21f4:	00005635 	.word	0x00005635
    21f8:	00007584 	.word	0x00007584
    21fc:	000086b0 	.word	0x000086b0
    2200:	00005e2d 	.word	0x00005e2d
    2204:	000075b0 	.word	0x000075b0
    2208:	200002dc 	.word	0x200002dc
    220c:	20003544 	.word	0x20003544
    2210:	000054ad 	.word	0x000054ad
    2214:	000088d0 	.word	0x000088d0
    2218:	0000699b 	.word	0x0000699b
    221c:	000030f9 	.word	0x000030f9
    2220:	00008e50 	.word	0x00008e50
    2224:	00002e0d 	.word	0x00002e0d
    2228:	00004e75 	.word	0x00004e75
    222c:	00008534 	.word	0x00008534
    2230:	000088ec 	.word	0x000088ec
    2234:	0000892c 	.word	0x0000892c
    2238:	000089ac 	.word	0x000089ac
    223c:	000089e0 	.word	0x000089e0
    2240:	00003375 	.word	0x00003375
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    2244:	2301      	movs	r3, #1
    2246:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
    224a:	4b8f      	ldr	r3, [pc, #572]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    224c:	7958      	ldrb	r0, [r3, #5]
    224e:	4b8f      	ldr	r3, [pc, #572]	; (248c <MdmConnect_HttpConnectionSchedule+0x520>)
    2250:	4798      	blx	r3
    2252:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
    2256:	2300      	movs	r3, #0
    2258:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    225a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    225e:	4669      	mov	r1, sp
    2260:	488b      	ldr	r0, [pc, #556]	; (2490 <MdmConnect_HttpConnectionSchedule+0x524>)
    2262:	6800      	ldr	r0, [r0, #0]
    2264:	4c8b      	ldr	r4, [pc, #556]	; (2494 <MdmConnect_HttpConnectionSchedule+0x528>)
    2266:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
    2268:	2801      	cmp	r0, #1
    226a:	d007      	beq.n	227c <MdmConnect_HttpConnectionSchedule+0x310>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    226c:	488a      	ldr	r0, [pc, #552]	; (2498 <MdmConnect_HttpConnectionSchedule+0x52c>)
    226e:	4b8b      	ldr	r3, [pc, #556]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    2270:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
    2272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2276:	4b8a      	ldr	r3, [pc, #552]	; (24a0 <MdmConnect_HttpConnectionSchedule+0x534>)
    2278:	4798      	blx	r3
    227a:	e680      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
    227c:	2300      	movs	r3, #0
    227e:	461a      	mov	r2, r3
    2280:	4619      	mov	r1, r3
    2282:	4888      	ldr	r0, [pc, #544]	; (24a4 <MdmConnect_HttpConnectionSchedule+0x538>)
    2284:	6800      	ldr	r0, [r0, #0]
    2286:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    2288:	4b7f      	ldr	r3, [pc, #508]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    228a:	2201      	movs	r2, #1
    228c:	709a      	strb	r2, [r3, #2]
                                gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    228e:	2208      	movs	r2, #8
    2290:	70da      	strb	r2, [r3, #3]
                                vTaskDelay(TransmitDelayMs);
    2292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2296:	4b82      	ldr	r3, [pc, #520]	; (24a0 <MdmConnect_HttpConnectionSchedule+0x534>)
    2298:	4798      	blx	r3
    229a:	e670      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Transmit Queue is not empty");
    229c:	4882      	ldr	r0, [pc, #520]	; (24a8 <MdmConnect_HttpConnectionSchedule+0x53c>)
    229e:	4b7f      	ldr	r3, [pc, #508]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    22a0:	4798      	blx	r3
    22a2:	e66c      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("No More Active Connections to close");
    22a4:	4881      	ldr	r0, [pc, #516]	; (24ac <MdmConnect_HttpConnectionSchedule+0x540>)
    22a6:	4b7d      	ldr	r3, [pc, #500]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    22a8:	4798      	blx	r3
                    gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    22aa:	4b77      	ldr	r3, [pc, #476]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    22ac:	2201      	movs	r2, #1
    22ae:	711a      	strb	r2, [r3, #4]
                    gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    22b0:	2208      	movs	r2, #8
    22b2:	70da      	strb	r2, [r3, #3]
    22b4:	e663      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    22b6:	2b01      	cmp	r3, #1
    22b8:	f47f ae61 	bne.w	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    22bc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    22c0:	497b      	ldr	r1, [pc, #492]	; (24b0 <MdmConnect_HttpConnectionSchedule+0x544>)
    22c2:	4b7c      	ldr	r3, [pc, #496]	; (24b4 <MdmConnect_HttpConnectionSchedule+0x548>)
    22c4:	6818      	ldr	r0, [r3, #0]
    22c6:	4b7c      	ldr	r3, [pc, #496]	; (24b8 <MdmConnect_HttpConnectionSchedule+0x54c>)
    22c8:	4798      	blx	r3
    22ca:	2801      	cmp	r0, #1
    22cc:	d00f      	beq.n	22ee <MdmConnect_HttpConnectionSchedule+0x382>
                    if(forcedModemRebootCnt <= 3)
    22ce:	4b6e      	ldr	r3, [pc, #440]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    22d0:	7c5b      	ldrb	r3, [r3, #17]
    22d2:	2b03      	cmp	r3, #3
    22d4:	d831      	bhi.n	233a <MdmConnect_HttpConnectionSchedule+0x3ce>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    22d6:	4879      	ldr	r0, [pc, #484]	; (24bc <MdmConnect_HttpConnectionSchedule+0x550>)
    22d8:	4c70      	ldr	r4, [pc, #448]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    22da:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    22dc:	4878      	ldr	r0, [pc, #480]	; (24c0 <MdmConnect_HttpConnectionSchedule+0x554>)
    22de:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    22e0:	4a69      	ldr	r2, [pc, #420]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    22e2:	7c53      	ldrb	r3, [r2, #17]
    22e4:	3301      	adds	r3, #1
    22e6:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    22e8:	4b76      	ldr	r3, [pc, #472]	; (24c4 <MdmConnect_HttpConnectionSchedule+0x558>)
    22ea:	4798      	blx	r3
    22ec:	e647      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
    22ee:	4b66      	ldr	r3, [pc, #408]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    22f0:	7a1d      	ldrb	r5, [r3, #8]
    22f2:	795c      	ldrb	r4, [r3, #5]
    22f4:	4620      	mov	r0, r4
    22f6:	4b65      	ldr	r3, [pc, #404]	; (248c <MdmConnect_HttpConnectionSchedule+0x520>)
    22f8:	4798      	blx	r3
    22fa:	4285      	cmp	r5, r0
    22fc:	d113      	bne.n	2326 <MdmConnect_HttpConnectionSchedule+0x3ba>
                        if(sessionIdCount > 0)
    22fe:	b14c      	cbz	r4, 2314 <MdmConnect_HttpConnectionSchedule+0x3a8>
                            sessionIdCount--;
    2300:	4b61      	ldr	r3, [pc, #388]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2302:	3c01      	subs	r4, #1
    2304:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2306:	2200      	movs	r2, #0
    2308:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    230a:	4b5f      	ldr	r3, [pc, #380]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    230c:	68d8      	ldr	r0, [r3, #12]
    230e:	4b6e      	ldr	r3, [pc, #440]	; (24c8 <MdmConnect_HttpConnectionSchedule+0x55c>)
    2310:	4798      	blx	r3
    2312:	e634      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                            gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    2314:	4b5c      	ldr	r3, [pc, #368]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2316:	2201      	movs	r2, #1
    2318:	711a      	strb	r2, [r3, #4]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    231a:	2208      	movs	r2, #8
    231c:	70da      	strb	r2, [r3, #3]
                            DEBUG_PRINT("Closed All Active Connections");
    231e:	486b      	ldr	r0, [pc, #428]	; (24cc <MdmConnect_HttpConnectionSchedule+0x560>)
    2320:	4b5e      	ldr	r3, [pc, #376]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    2322:	4798      	blx	r3
    2324:	e7f1      	b.n	230a <MdmConnect_HttpConnectionSchedule+0x39e>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    2326:	486a      	ldr	r0, [pc, #424]	; (24d0 <MdmConnect_HttpConnectionSchedule+0x564>)
    2328:	4b5c      	ldr	r3, [pc, #368]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    232a:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    232c:	4b56      	ldr	r3, [pc, #344]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    232e:	2200      	movs	r2, #0
    2330:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    2332:	68d8      	ldr	r0, [r3, #12]
    2334:	4b64      	ldr	r3, [pc, #400]	; (24c8 <MdmConnect_HttpConnectionSchedule+0x55c>)
    2336:	4798      	blx	r3
    2338:	e621      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    233a:	4866      	ldr	r0, [pc, #408]	; (24d4 <MdmConnect_HttpConnectionSchedule+0x568>)
    233c:	4c57      	ldr	r4, [pc, #348]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    233e:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    2340:	4865      	ldr	r0, [pc, #404]	; (24d8 <MdmConnect_HttpConnectionSchedule+0x56c>)
    2342:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    2344:	2200      	movs	r2, #0
    2346:	4b50      	ldr	r3, [pc, #320]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2348:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    234a:	4b64      	ldr	r3, [pc, #400]	; (24dc <MdmConnect_HttpConnectionSchedule+0x570>)
    234c:	4798      	blx	r3
    234e:	e616      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    2350:	4b4d      	ldr	r3, [pc, #308]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2352:	789b      	ldrb	r3, [r3, #2]
    2354:	b1db      	cbz	r3, 238e <MdmConnect_HttpConnectionSchedule+0x422>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    2356:	2b01      	cmp	r3, #1
    2358:	f47f ae11 	bne.w	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    235c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    2360:	4953      	ldr	r1, [pc, #332]	; (24b0 <MdmConnect_HttpConnectionSchedule+0x544>)
    2362:	4b54      	ldr	r3, [pc, #336]	; (24b4 <MdmConnect_HttpConnectionSchedule+0x548>)
    2364:	6818      	ldr	r0, [r3, #0]
    2366:	4b54      	ldr	r3, [pc, #336]	; (24b8 <MdmConnect_HttpConnectionSchedule+0x54c>)
    2368:	4798      	blx	r3
    236a:	2801      	cmp	r0, #1
    236c:	d04d      	beq.n	240a <MdmConnect_HttpConnectionSchedule+0x49e>
                    if(forcedModemRebootCnt <= 3)
    236e:	4b46      	ldr	r3, [pc, #280]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2370:	7c5b      	ldrb	r3, [r3, #17]
    2372:	2b03      	cmp	r3, #3
    2374:	d87c      	bhi.n	2470 <MdmConnect_HttpConnectionSchedule+0x504>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    2376:	4851      	ldr	r0, [pc, #324]	; (24bc <MdmConnect_HttpConnectionSchedule+0x550>)
    2378:	4c48      	ldr	r4, [pc, #288]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    237a:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    237c:	4850      	ldr	r0, [pc, #320]	; (24c0 <MdmConnect_HttpConnectionSchedule+0x554>)
    237e:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    2380:	4a41      	ldr	r2, [pc, #260]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2382:	7c53      	ldrb	r3, [r2, #17]
    2384:	3301      	adds	r3, #1
    2386:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    2388:	4b4e      	ldr	r3, [pc, #312]	; (24c4 <MdmConnect_HttpConnectionSchedule+0x558>)
    238a:	4798      	blx	r3
    238c:	e5f7      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    238e:	4b40      	ldr	r3, [pc, #256]	; (2490 <MdmConnect_HttpConnectionSchedule+0x524>)
    2390:	6818      	ldr	r0, [r3, #0]
    2392:	4b53      	ldr	r3, [pc, #332]	; (24e0 <MdmConnect_HttpConnectionSchedule+0x574>)
    2394:	4798      	blx	r3
    2396:	2800      	cmp	r0, #0
    2398:	d133      	bne.n	2402 <MdmConnect_HttpConnectionSchedule+0x496>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    239a:	2100      	movs	r1, #0
    239c:	4b41      	ldr	r3, [pc, #260]	; (24a4 <MdmConnect_HttpConnectionSchedule+0x538>)
    239e:	6818      	ldr	r0, [r3, #0]
    23a0:	4b50      	ldr	r3, [pc, #320]	; (24e4 <MdmConnect_HttpConnectionSchedule+0x578>)
    23a2:	4798      	blx	r3
    23a4:	2801      	cmp	r0, #1
    23a6:	d003      	beq.n	23b0 <MdmConnect_HttpConnectionSchedule+0x444>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    23a8:	484f      	ldr	r0, [pc, #316]	; (24e8 <MdmConnect_HttpConnectionSchedule+0x57c>)
    23aa:	4b3c      	ldr	r3, [pc, #240]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    23ac:	4798      	blx	r3
    23ae:	e5e6      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    23b0:	2301      	movs	r3, #1
    23b2:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
    23b6:	231a      	movs	r3, #26
    23b8:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    23bc:	2300      	movs	r3, #0
    23be:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    23c0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    23c4:	4669      	mov	r1, sp
    23c6:	4832      	ldr	r0, [pc, #200]	; (2490 <MdmConnect_HttpConnectionSchedule+0x524>)
    23c8:	6800      	ldr	r0, [r0, #0]
    23ca:	4c32      	ldr	r4, [pc, #200]	; (2494 <MdmConnect_HttpConnectionSchedule+0x528>)
    23cc:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    23ce:	2801      	cmp	r0, #1
    23d0:	d007      	beq.n	23e2 <MdmConnect_HttpConnectionSchedule+0x476>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    23d2:	4831      	ldr	r0, [pc, #196]	; (2498 <MdmConnect_HttpConnectionSchedule+0x52c>)
    23d4:	4b31      	ldr	r3, [pc, #196]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    23d6:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    23d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    23dc:	4b30      	ldr	r3, [pc, #192]	; (24a0 <MdmConnect_HttpConnectionSchedule+0x534>)
    23de:	4798      	blx	r3
    23e0:	e5cd      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    23e2:	2300      	movs	r3, #0
    23e4:	461a      	mov	r2, r3
    23e6:	4619      	mov	r1, r3
    23e8:	482e      	ldr	r0, [pc, #184]	; (24a4 <MdmConnect_HttpConnectionSchedule+0x538>)
    23ea:	6800      	ldr	r0, [r0, #0]
    23ec:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    23ee:	4b26      	ldr	r3, [pc, #152]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    23f0:	2201      	movs	r2, #1
    23f2:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    23f4:	2208      	movs	r2, #8
    23f6:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    23f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    23fc:	4b28      	ldr	r3, [pc, #160]	; (24a0 <MdmConnect_HttpConnectionSchedule+0x534>)
    23fe:	4798      	blx	r3
    2400:	e5bd      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    2402:	4829      	ldr	r0, [pc, #164]	; (24a8 <MdmConnect_HttpConnectionSchedule+0x53c>)
    2404:	4b25      	ldr	r3, [pc, #148]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    2406:	4798      	blx	r3
    2408:	e5b9      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
    240a:	4b1f      	ldr	r3, [pc, #124]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    240c:	7a1b      	ldrb	r3, [r3, #8]
    240e:	2b1a      	cmp	r3, #26
    2410:	d124      	bne.n	245c <MdmConnect_HttpConnectionSchedule+0x4f0>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    2412:	4b1d      	ldr	r3, [pc, #116]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2414:	68d8      	ldr	r0, [r3, #12]
    2416:	4b35      	ldr	r3, [pc, #212]	; (24ec <MdmConnect_HttpConnectionSchedule+0x580>)
    2418:	4798      	blx	r3
    241a:	b1a0      	cbz	r0, 2446 <MdmConnect_HttpConnectionSchedule+0x4da>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
    241c:	4834      	ldr	r0, [pc, #208]	; (24f0 <MdmConnect_HttpConnectionSchedule+0x584>)
    241e:	4d1f      	ldr	r5, [pc, #124]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    2420:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    2422:	4c19      	ldr	r4, [pc, #100]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2424:	8961      	ldrh	r1, [r4, #10]
    2426:	68e0      	ldr	r0, [r4, #12]
    2428:	4b32      	ldr	r3, [pc, #200]	; (24f4 <MdmConnect_HttpConnectionSchedule+0x588>)
    242a:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    242c:	4832      	ldr	r0, [pc, #200]	; (24f8 <MdmConnect_HttpConnectionSchedule+0x58c>)
    242e:	47a8      	blx	r5
                            gErrorRecoveryState = PDP_PERFORM_PS_CONNECTION_DETACH;
    2430:	2302      	movs	r3, #2
    2432:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2434:	2300      	movs	r3, #0
    2436:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    2438:	2308      	movs	r3, #8
    243a:	70e3      	strb	r3, [r4, #3]
                        vPortFree(ConnectionResponse.response);
    243c:	4b12      	ldr	r3, [pc, #72]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    243e:	68d8      	ldr	r0, [r3, #12]
    2440:	4b21      	ldr	r3, [pc, #132]	; (24c8 <MdmConnect_HttpConnectionSchedule+0x55c>)
    2442:	4798      	blx	r3
    2444:	e59b      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                            DEBUG_PRINT("Expected Response Not Received...");
    2446:	482d      	ldr	r0, [pc, #180]	; (24fc <MdmConnect_HttpConnectionSchedule+0x590>)
    2448:	4c14      	ldr	r4, [pc, #80]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    244a:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    244c:	482a      	ldr	r0, [pc, #168]	; (24f8 <MdmConnect_HttpConnectionSchedule+0x58c>)
    244e:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2450:	2200      	movs	r2, #0
    2452:	4b0d      	ldr	r3, [pc, #52]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2454:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    2456:	4b1b      	ldr	r3, [pc, #108]	; (24c4 <MdmConnect_HttpConnectionSchedule+0x558>)
    2458:	4798      	blx	r3
    245a:	e7ef      	b.n	243c <MdmConnect_HttpConnectionSchedule+0x4d0>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    245c:	481c      	ldr	r0, [pc, #112]	; (24d0 <MdmConnect_HttpConnectionSchedule+0x564>)
    245e:	4b0f      	ldr	r3, [pc, #60]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    2460:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2462:	4b09      	ldr	r3, [pc, #36]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2464:	2200      	movs	r2, #0
    2466:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    2468:	68d8      	ldr	r0, [r3, #12]
    246a:	4b17      	ldr	r3, [pc, #92]	; (24c8 <MdmConnect_HttpConnectionSchedule+0x55c>)
    246c:	4798      	blx	r3
    246e:	e586      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    2470:	4818      	ldr	r0, [pc, #96]	; (24d4 <MdmConnect_HttpConnectionSchedule+0x568>)
    2472:	4c0a      	ldr	r4, [pc, #40]	; (249c <MdmConnect_HttpConnectionSchedule+0x530>)
    2474:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    2476:	4818      	ldr	r0, [pc, #96]	; (24d8 <MdmConnect_HttpConnectionSchedule+0x56c>)
    2478:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    247a:	2200      	movs	r2, #0
    247c:	4b02      	ldr	r3, [pc, #8]	; (2488 <MdmConnect_HttpConnectionSchedule+0x51c>)
    247e:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    2480:	4b16      	ldr	r3, [pc, #88]	; (24dc <MdmConnect_HttpConnectionSchedule+0x570>)
    2482:	4798      	blx	r3
    2484:	e57b      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
    2486:	bf00      	nop
    2488:	200002d4 	.word	0x200002d4
    248c:	00001501 	.word	0x00001501
    2490:	20003568 	.word	0x20003568
    2494:	0000519d 	.word	0x0000519d
    2498:	000084bc 	.word	0x000084bc
    249c:	0000313d 	.word	0x0000313d
    24a0:	00005e2d 	.word	0x00005e2d
    24a4:	2000357c 	.word	0x2000357c
    24a8:	000075b0 	.word	0x000075b0
    24ac:	000084f0 	.word	0x000084f0
    24b0:	200002dc 	.word	0x200002dc
    24b4:	20003544 	.word	0x20003544
    24b8:	000054ad 	.word	0x000054ad
    24bc:	0000894c 	.word	0x0000894c
    24c0:	00008968 	.word	0x00008968
    24c4:	00001581 	.word	0x00001581
    24c8:	00004e75 	.word	0x00004e75
    24cc:	00008514 	.word	0x00008514
    24d0:	00008534 	.word	0x00008534
    24d4:	000089ac 	.word	0x000089ac
    24d8:	000089e0 	.word	0x000089e0
    24dc:	00003375 	.word	0x00003375
    24e0:	00005815 	.word	0x00005815
    24e4:	00005635 	.word	0x00005635
    24e8:	00007584 	.word	0x00007584
    24ec:	00001541 	.word	0x00001541
    24f0:	00008568 	.word	0x00008568
    24f4:	000030f9 	.word	0x000030f9
    24f8:	00008e50 	.word	0x00008e50
    24fc:	00008588 	.word	0x00008588
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2500:	4b4c      	ldr	r3, [pc, #304]	; (2634 <MdmConnect_HttpConnectionSchedule+0x6c8>)
    2502:	6818      	ldr	r0, [r3, #0]
    2504:	4b4c      	ldr	r3, [pc, #304]	; (2638 <MdmConnect_HttpConnectionSchedule+0x6cc>)
    2506:	4798      	blx	r3
    2508:	2800      	cmp	r0, #0
    250a:	d133      	bne.n	2574 <MdmConnect_HttpConnectionSchedule+0x608>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    250c:	2100      	movs	r1, #0
    250e:	4b4b      	ldr	r3, [pc, #300]	; (263c <MdmConnect_HttpConnectionSchedule+0x6d0>)
    2510:	6818      	ldr	r0, [r3, #0]
    2512:	4b4b      	ldr	r3, [pc, #300]	; (2640 <MdmConnect_HttpConnectionSchedule+0x6d4>)
    2514:	4798      	blx	r3
    2516:	2801      	cmp	r0, #1
    2518:	d003      	beq.n	2522 <MdmConnect_HttpConnectionSchedule+0x5b6>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    251a:	484a      	ldr	r0, [pc, #296]	; (2644 <MdmConnect_HttpConnectionSchedule+0x6d8>)
    251c:	4b4a      	ldr	r3, [pc, #296]	; (2648 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    251e:	4798      	blx	r3
    2520:	e52d      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    2522:	2301      	movs	r3, #1
    2524:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
    2528:	231b      	movs	r3, #27
    252a:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    252e:	2300      	movs	r3, #0
    2530:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2532:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    2536:	4669      	mov	r1, sp
    2538:	483e      	ldr	r0, [pc, #248]	; (2634 <MdmConnect_HttpConnectionSchedule+0x6c8>)
    253a:	6800      	ldr	r0, [r0, #0]
    253c:	4c43      	ldr	r4, [pc, #268]	; (264c <MdmConnect_HttpConnectionSchedule+0x6e0>)
    253e:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    2540:	2801      	cmp	r0, #1
    2542:	d007      	beq.n	2554 <MdmConnect_HttpConnectionSchedule+0x5e8>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    2544:	4842      	ldr	r0, [pc, #264]	; (2650 <MdmConnect_HttpConnectionSchedule+0x6e4>)
    2546:	4b40      	ldr	r3, [pc, #256]	; (2648 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    2548:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    254a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    254e:	4b41      	ldr	r3, [pc, #260]	; (2654 <MdmConnect_HttpConnectionSchedule+0x6e8>)
    2550:	4798      	blx	r3
    2552:	e514      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    2554:	2300      	movs	r3, #0
    2556:	461a      	mov	r2, r3
    2558:	4619      	mov	r1, r3
    255a:	4838      	ldr	r0, [pc, #224]	; (263c <MdmConnect_HttpConnectionSchedule+0x6d0>)
    255c:	6800      	ldr	r0, [r0, #0]
    255e:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    2560:	4b3d      	ldr	r3, [pc, #244]	; (2658 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2562:	2201      	movs	r2, #1
    2564:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    2566:	2208      	movs	r2, #8
    2568:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    256a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    256e:	4b39      	ldr	r3, [pc, #228]	; (2654 <MdmConnect_HttpConnectionSchedule+0x6e8>)
    2570:	4798      	blx	r3
    2572:	e504      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    2574:	4839      	ldr	r0, [pc, #228]	; (265c <MdmConnect_HttpConnectionSchedule+0x6f0>)
    2576:	4b34      	ldr	r3, [pc, #208]	; (2648 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    2578:	4798      	blx	r3
    257a:	e500      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
    257c:	4b36      	ldr	r3, [pc, #216]	; (2658 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    257e:	7a1b      	ldrb	r3, [r3, #8]
    2580:	2b1b      	cmp	r3, #27
    2582:	d13f      	bne.n	2604 <MdmConnect_HttpConnectionSchedule+0x698>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    2584:	4b34      	ldr	r3, [pc, #208]	; (2658 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2586:	68d8      	ldr	r0, [r3, #12]
    2588:	4b35      	ldr	r3, [pc, #212]	; (2660 <MdmConnect_HttpConnectionSchedule+0x6f4>)
    258a:	4798      	blx	r3
    258c:	2800      	cmp	r0, #0
    258e:	d02b      	beq.n	25e8 <MdmConnect_HttpConnectionSchedule+0x67c>
                            DEBUG_PRINT("Detached the PDP PS");
    2590:	4834      	ldr	r0, [pc, #208]	; (2664 <MdmConnect_HttpConnectionSchedule+0x6f8>)
    2592:	4d2d      	ldr	r5, [pc, #180]	; (2648 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    2594:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    2596:	4c30      	ldr	r4, [pc, #192]	; (2658 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2598:	8961      	ldrh	r1, [r4, #10]
    259a:	68e0      	ldr	r0, [r4, #12]
    259c:	4b32      	ldr	r3, [pc, #200]	; (2668 <MdmConnect_HttpConnectionSchedule+0x6fc>)
    259e:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    25a0:	4832      	ldr	r0, [pc, #200]	; (266c <MdmConnect_HttpConnectionSchedule+0x700>)
    25a2:	47a8      	blx	r5
                            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    25a4:	2300      	movs	r3, #0
    25a6:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    25a8:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    25aa:	70e3      	strb	r3, [r4, #3]
                            gHttpConnectionState = MDM_HTTP_DISCONNECTED;
    25ac:	7023      	strb	r3, [r4, #0]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    25ae:	7063      	strb	r3, [r4, #1]
                            sessionIdCount = 5;
    25b0:	2305      	movs	r3, #5
    25b2:	7163      	strb	r3, [r4, #5]
                            DEBUG_PRINT("Error Recovery Completed\r\n");
    25b4:	482e      	ldr	r0, [pc, #184]	; (2670 <MdmConnect_HttpConnectionSchedule+0x704>)
    25b6:	47a8      	blx	r5
                            DEBUG_PRINT("=================================================\r\n");
    25b8:	482e      	ldr	r0, [pc, #184]	; (2674 <MdmConnect_HttpConnectionSchedule+0x708>)
    25ba:	47a8      	blx	r5
                            DEBUG_PRINT("Establishing a new connection with server");
    25bc:	482e      	ldr	r0, [pc, #184]	; (2678 <MdmConnect_HttpConnectionSchedule+0x70c>)
    25be:	47a8      	blx	r5
                            errorRecoveryCnt++;
    25c0:	7ca3      	ldrb	r3, [r4, #18]
    25c2:	3301      	adds	r3, #1
    25c4:	74a3      	strb	r3, [r4, #18]
                            vPortFree(ConnectionResponse.response);
    25c6:	68e0      	ldr	r0, [r4, #12]
    25c8:	4b2c      	ldr	r3, [pc, #176]	; (267c <MdmConnect_HttpConnectionSchedule+0x710>)
    25ca:	4798      	blx	r3
                            if(errorRecoveryCnt >=3)
    25cc:	7ca3      	ldrb	r3, [r4, #18]
    25ce:	2b02      	cmp	r3, #2
    25d0:	f67f acd5 	bls.w	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                                DEBUG_PRINT("System is auto recovered for more than 3 times.");
    25d4:	482a      	ldr	r0, [pc, #168]	; (2680 <MdmConnect_HttpConnectionSchedule+0x714>)
    25d6:	47a8      	blx	r5
                                DEBUG_PRINT("Performing a system restart....................\r\n");
    25d8:	482a      	ldr	r0, [pc, #168]	; (2684 <MdmConnect_HttpConnectionSchedule+0x718>)
    25da:	47a8      	blx	r5
                                errorRecoveryCnt = 0;
    25dc:	2200      	movs	r2, #0
    25de:	4b1e      	ldr	r3, [pc, #120]	; (2658 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    25e0:	749a      	strb	r2, [r3, #18]
                                requestWatchDogForcedReset();
    25e2:	4b29      	ldr	r3, [pc, #164]	; (2688 <MdmConnect_HttpConnectionSchedule+0x71c>)
    25e4:	4798      	blx	r3
    25e6:	e4ca      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                            DEBUG_PRINT("Expected Response Not Received...");
    25e8:	4828      	ldr	r0, [pc, #160]	; (268c <MdmConnect_HttpConnectionSchedule+0x720>)
    25ea:	4c17      	ldr	r4, [pc, #92]	; (2648 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    25ec:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    25ee:	481f      	ldr	r0, [pc, #124]	; (266c <MdmConnect_HttpConnectionSchedule+0x700>)
    25f0:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    25f2:	4b19      	ldr	r3, [pc, #100]	; (2658 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    25f4:	2200      	movs	r2, #0
    25f6:	709a      	strb	r2, [r3, #2]
                            vPortFree(ConnectionResponse.response);
    25f8:	68d8      	ldr	r0, [r3, #12]
    25fa:	4b20      	ldr	r3, [pc, #128]	; (267c <MdmConnect_HttpConnectionSchedule+0x710>)
    25fc:	4798      	blx	r3
                            performForcedRebootOfModem();
    25fe:	4b24      	ldr	r3, [pc, #144]	; (2690 <MdmConnect_HttpConnectionSchedule+0x724>)
    2600:	4798      	blx	r3
    2602:	e4bc      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    2604:	4823      	ldr	r0, [pc, #140]	; (2694 <MdmConnect_HttpConnectionSchedule+0x728>)
    2606:	4b10      	ldr	r3, [pc, #64]	; (2648 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    2608:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    260a:	4b13      	ldr	r3, [pc, #76]	; (2658 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    260c:	2200      	movs	r2, #0
    260e:	709a      	strb	r2, [r3, #2]
                        gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    2610:	2208      	movs	r2, #8
    2612:	70da      	strb	r2, [r3, #3]
                        vPortFree(ConnectionResponse.response);
    2614:	68d8      	ldr	r0, [r3, #12]
    2616:	4b19      	ldr	r3, [pc, #100]	; (267c <MdmConnect_HttpConnectionSchedule+0x710>)
    2618:	4798      	blx	r3
    261a:	e4b0      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    261c:	481e      	ldr	r0, [pc, #120]	; (2698 <MdmConnect_HttpConnectionSchedule+0x72c>)
    261e:	4c0a      	ldr	r4, [pc, #40]	; (2648 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    2620:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    2622:	481e      	ldr	r0, [pc, #120]	; (269c <MdmConnect_HttpConnectionSchedule+0x730>)
    2624:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    2626:	4a0c      	ldr	r2, [pc, #48]	; (2658 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2628:	7c53      	ldrb	r3, [r2, #17]
    262a:	3301      	adds	r3, #1
    262c:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    262e:	4b18      	ldr	r3, [pc, #96]	; (2690 <MdmConnect_HttpConnectionSchedule+0x724>)
    2630:	4798      	blx	r3
    2632:	e4a4      	b.n	1f7e <MdmConnect_HttpConnectionSchedule+0x12>
    2634:	20003568 	.word	0x20003568
    2638:	00005815 	.word	0x00005815
    263c:	2000357c 	.word	0x2000357c
    2640:	00005635 	.word	0x00005635
    2644:	00007584 	.word	0x00007584
    2648:	0000313d 	.word	0x0000313d
    264c:	0000519d 	.word	0x0000519d
    2650:	000084bc 	.word	0x000084bc
    2654:	00005e2d 	.word	0x00005e2d
    2658:	200002d4 	.word	0x200002d4
    265c:	000075b0 	.word	0x000075b0
    2660:	00001541 	.word	0x00001541
    2664:	000085dc 	.word	0x000085dc
    2668:	000030f9 	.word	0x000030f9
    266c:	00008e50 	.word	0x00008e50
    2670:	00008a2c 	.word	0x00008a2c
    2674:	00008a48 	.word	0x00008a48
    2678:	00008a7c 	.word	0x00008a7c
    267c:	00004e75 	.word	0x00004e75
    2680:	00008aa8 	.word	0x00008aa8
    2684:	00008ad8 	.word	0x00008ad8
    2688:	00003375 	.word	0x00003375
    268c:	00008588 	.word	0x00008588
    2690:	00001581 	.word	0x00001581
    2694:	00008534 	.word	0x00008534
    2698:	0000894c 	.word	0x0000894c
    269c:	00008968 	.word	0x00008968

000026a0 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
    26a0:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
    26a2:	490d      	ldr	r1, [pc, #52]	; (26d8 <mdmCtrlr_DataCommInit+0x38>)
    26a4:	480d      	ldr	r0, [pc, #52]	; (26dc <mdmCtrlr_DataCommInit+0x3c>)
    26a6:	4b0e      	ldr	r3, [pc, #56]	; (26e0 <mdmCtrlr_DataCommInit+0x40>)
    26a8:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
    26aa:	b100      	cbz	r0, 26ae <mdmCtrlr_DataCommInit+0xe>
    26ac:	bd10      	pop	{r4, pc}
	{
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
    26ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
    26b2:	490c      	ldr	r1, [pc, #48]	; (26e4 <mdmCtrlr_DataCommInit+0x44>)
    26b4:	480c      	ldr	r0, [pc, #48]	; (26e8 <mdmCtrlr_DataCommInit+0x48>)
    26b6:	4b0d      	ldr	r3, [pc, #52]	; (26ec <mdmCtrlr_DataCommInit+0x4c>)
    26b8:	4798      	blx	r3
	}
	
	if(initStatus == ERR_NONE)
    26ba:	2800      	cmp	r0, #0
    26bc:	d1f6      	bne.n	26ac <mdmCtrlr_DataCommInit+0xc>
	{
		/* Enable all of the UART interrupts for SERCOM3 */
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
    26be:	4c07      	ldr	r4, [pc, #28]	; (26dc <mdmCtrlr_DataCommInit+0x3c>)
    26c0:	2201      	movs	r2, #1
    26c2:	4611      	mov	r1, r2
    26c4:	4620      	mov	r0, r4
    26c6:	4b0a      	ldr	r3, [pc, #40]	; (26f0 <mdmCtrlr_DataCommInit+0x50>)
    26c8:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
    26ca:	4620      	mov	r0, r4
    26cc:	4b09      	ldr	r3, [pc, #36]	; (26f4 <mdmCtrlr_DataCommInit+0x54>)
    26ce:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
    26d0:	4b09      	ldr	r3, [pc, #36]	; (26f8 <mdmCtrlr_DataCommInit+0x58>)
    26d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
	}
	else
	{
		//DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
	}
}
    26d6:	e7e9      	b.n	26ac <mdmCtrlr_DataCommInit+0xc>
    26d8:	41014000 	.word	0x41014000
    26dc:	20000028 	.word	0x20000028
    26e0:	000042c5 	.word	0x000042c5
    26e4:	20003588 	.word	0x20003588
    26e8:	20003d88 	.word	0x20003d88
    26ec:	000039ad 	.word	0x000039ad
    26f0:	00004371 	.word	0x00004371
    26f4:	00004339 	.word	0x00004339
    26f8:	e000e100 	.word	0xe000e100

000026fc <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    26fc:	2201      	movs	r2, #1
    26fe:	4b01      	ldr	r3, [pc, #4]	; (2704 <SERCOM3_0_Handler+0x8>)
    2700:	761a      	strb	r2, [r3, #24]
    2702:	4770      	bx	lr
    2704:	41014000 	.word	0x41014000

00002708 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    2708:	2202      	movs	r2, #2
    270a:	4b01      	ldr	r3, [pc, #4]	; (2710 <SERCOM3_1_Handler+0x8>)
    270c:	761a      	strb	r2, [r3, #24]
    270e:	4770      	bx	lr
    2710:	41014000 	.word	0x41014000

00002714 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
    2714:	b530      	push	{r4, r5, lr}
    2716:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
    2718:	4d1a      	ldr	r5, [pc, #104]	; (2784 <SERCOM3_2_Handler+0x70>)
    271a:	4c1b      	ldr	r4, [pc, #108]	; (2788 <SERCOM3_2_Handler+0x74>)
    271c:	4628      	mov	r0, r5
    271e:	47a0      	blx	r4
    2720:	2800      	cmp	r0, #0
    2722:	d0fb      	beq.n	271c <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
    2724:	4817      	ldr	r0, [pc, #92]	; (2784 <SERCOM3_2_Handler+0x70>)
    2726:	4b19      	ldr	r3, [pc, #100]	; (278c <SERCOM3_2_Handler+0x78>)
    2728:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
    272a:	4601      	mov	r1, r0
    272c:	4818      	ldr	r0, [pc, #96]	; (2790 <SERCOM3_2_Handler+0x7c>)
    272e:	4b19      	ldr	r3, [pc, #100]	; (2794 <SERCOM3_2_Handler+0x80>)
    2730:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
    2732:	4b19      	ldr	r3, [pc, #100]	; (2798 <SERCOM3_2_Handler+0x84>)
    2734:	4798      	blx	r3
    2736:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
    2738:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    273c:	d101      	bne.n	2742 <SERCOM3_2_Handler+0x2e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}
}
    273e:	b009      	add	sp, #36	; 0x24
    2740:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
    2742:	a902      	add	r1, sp, #8
    2744:	4b15      	ldr	r3, [pc, #84]	; (279c <SERCOM3_2_Handler+0x88>)
    2746:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
    2748:	4811      	ldr	r0, [pc, #68]	; (2790 <SERCOM3_2_Handler+0x7c>)
    274a:	4b15      	ldr	r3, [pc, #84]	; (27a0 <SERCOM3_2_Handler+0x8c>)
    274c:	4798      	blx	r3
    274e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2752:	4298      	cmp	r0, r3
    2754:	d3f3      	bcc.n	273e <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
    2756:	4b13      	ldr	r3, [pc, #76]	; (27a4 <SERCOM3_2_Handler+0x90>)
    2758:	6818      	ldr	r0, [r3, #0]
    275a:	ab07      	add	r3, sp, #28
    275c:	9300      	str	r3, [sp, #0]
    275e:	2300      	movs	r3, #0
    2760:	2203      	movs	r2, #3
    2762:	b2e1      	uxtb	r1, r4
    2764:	4c10      	ldr	r4, [pc, #64]	; (27a8 <SERCOM3_2_Handler+0x94>)
    2766:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    2768:	9b07      	ldr	r3, [sp, #28]
    276a:	b13b      	cbz	r3, 277c <SERCOM3_2_Handler+0x68>
    276c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2770:	4b0e      	ldr	r3, [pc, #56]	; (27ac <SERCOM3_2_Handler+0x98>)
    2772:	601a      	str	r2, [r3, #0]
    2774:	f3bf 8f4f 	dsb	sy
    2778:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
    277c:	2000      	movs	r0, #0
    277e:	4b0c      	ldr	r3, [pc, #48]	; (27b0 <SERCOM3_2_Handler+0x9c>)
    2780:	4798      	blx	r3
}
    2782:	e7dc      	b.n	273e <SERCOM3_2_Handler+0x2a>
    2784:	20000028 	.word	0x20000028
    2788:	00004365 	.word	0x00004365
    278c:	00004353 	.word	0x00004353
    2790:	20003d88 	.word	0x20003d88
    2794:	00003a41 	.word	0x00003a41
    2798:	000014f5 	.word	0x000014f5
    279c:	000012f9 	.word	0x000012f9
    27a0:	00003a81 	.word	0x00003a81
    27a4:	20003560 	.word	0x20003560
    27a8:	000063e1 	.word	0x000063e1
    27ac:	e000ed04 	.word	0xe000ed04
    27b0:	000014e9 	.word	0x000014e9

000027b4 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
    27b4:	b570      	push	{r4, r5, r6, lr}
    27b6:	4605      	mov	r5, r0
    27b8:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
    27ba:	4c05      	ldr	r4, [pc, #20]	; (27d0 <mdmCtrlr_SendDataToModem+0x1c>)
    27bc:	4620      	mov	r0, r4
    27be:	4b05      	ldr	r3, [pc, #20]	; (27d4 <mdmCtrlr_SendDataToModem+0x20>)
    27c0:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
    27c2:	4632      	mov	r2, r6
    27c4:	4629      	mov	r1, r5
    27c6:	4620      	mov	r0, r4
    27c8:	4b03      	ldr	r3, [pc, #12]	; (27d8 <mdmCtrlr_SendDataToModem+0x24>)
    27ca:	4798      	blx	r3
}
    27cc:	bd70      	pop	{r4, r5, r6, pc}
    27ce:	bf00      	nop
    27d0:	20000028 	.word	0x20000028
    27d4:	00004339 	.word	0x00004339
    27d8:	00003075 	.word	0x00003075

000027dc <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
    27dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    27de:	b083      	sub	sp, #12
    27e0:	4605      	mov	r5, r0
    27e2:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
    27e4:	480d      	ldr	r0, [pc, #52]	; (281c <mdmCtrlr_ReadResponseFromModem+0x40>)
    27e6:	4b0e      	ldr	r3, [pc, #56]	; (2820 <mdmCtrlr_ReadResponseFromModem+0x44>)
    27e8:	4798      	blx	r3
    27ea:	42b0      	cmp	r0, r6
    27ec:	d201      	bcs.n	27f2 <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
    27ee:	b003      	add	sp, #12
    27f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
    27f2:	a801      	add	r0, sp, #4
    27f4:	4b0b      	ldr	r3, [pc, #44]	; (2824 <mdmCtrlr_ReadResponseFromModem+0x48>)
    27f6:	4798      	blx	r3
		while (readCnt < length)
    27f8:	b166      	cbz	r6, 2814 <mdmCtrlr_ReadResponseFromModem+0x38>
    27fa:	462c      	mov	r4, r5
    27fc:	3e01      	subs	r6, #1
    27fe:	b2b6      	uxth	r6, r6
    2800:	3601      	adds	r6, #1
    2802:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
    2804:	4f05      	ldr	r7, [pc, #20]	; (281c <mdmCtrlr_ReadResponseFromModem+0x40>)
    2806:	4e08      	ldr	r6, [pc, #32]	; (2828 <mdmCtrlr_ReadResponseFromModem+0x4c>)
    2808:	4621      	mov	r1, r4
    280a:	4638      	mov	r0, r7
    280c:	47b0      	blx	r6
    280e:	3401      	adds	r4, #1
		while (readCnt < length)
    2810:	42ac      	cmp	r4, r5
    2812:	d1f9      	bne.n	2808 <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
    2814:	a801      	add	r0, sp, #4
    2816:	4b05      	ldr	r3, [pc, #20]	; (282c <mdmCtrlr_ReadResponseFromModem+0x50>)
    2818:	4798      	blx	r3
    281a:	e7e8      	b.n	27ee <mdmCtrlr_ReadResponseFromModem+0x12>
    281c:	20003d88 	.word	0x20003d88
    2820:	00003a81 	.word	0x00003a81
    2824:	00003955 	.word	0x00003955
    2828:	000039fd 	.word	0x000039fd
    282c:	00003963 	.word	0x00003963

00002830 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
    2830:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
    2832:	4802      	ldr	r0, [pc, #8]	; (283c <mdmCtrlr_FlushRxBuffer+0xc>)
    2834:	4b02      	ldr	r3, [pc, #8]	; (2840 <mdmCtrlr_FlushRxBuffer+0x10>)
    2836:	4798      	blx	r3
    2838:	bd08      	pop	{r3, pc}
    283a:	bf00      	nop
    283c:	20003d88 	.word	0x20003d88
    2840:	00003aa5 	.word	0x00003aa5

00002844 <mdmCtrlr_GetUnsolicitedResponseLength>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
uint32_t mdmCtrlr_GetUnsolicitedResponseLength(void)
{
    2844:	b508      	push	{r3, lr}
	uint32_t length = 0;

	length = ringbuffer_num(&RxRingBuffer);
    2846:	4802      	ldr	r0, [pc, #8]	; (2850 <mdmCtrlr_GetUnsolicitedResponseLength+0xc>)
    2848:	4b02      	ldr	r3, [pc, #8]	; (2854 <mdmCtrlr_GetUnsolicitedResponseLength+0x10>)
    284a:	4798      	blx	r3

	return length;
}
    284c:	bd08      	pop	{r3, pc}
    284e:	bf00      	nop
    2850:	20003d88 	.word	0x20003d88
    2854:	00003a81 	.word	0x00003a81

00002858 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
    2858:	b5f0      	push	{r4, r5, r6, r7, lr}
    285a:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
    285c:	2300      	movs	r3, #0
    285e:	4a6c      	ldr	r2, [pc, #432]	; (2a10 <ModemDiagTask+0x1b8>)
    2860:	7013      	strb	r3, [r2, #0]
	bModemDiagDataBaseUpdated = false;
    2862:	4a6c      	ldr	r2, [pc, #432]	; (2a14 <ModemDiagTask+0x1bc>)
    2864:	4611      	mov	r1, r2
    2866:	f801 3b04 	strb.w	r3, [r1], #4
	
    memset(atResponseData,0,sizeof(atResponseData));
    286a:	8093      	strh	r3, [r2, #4]
    286c:	708b      	strb	r3, [r1, #2]
    memset(atCgsnResponseData,0,sizeof(atCgsnResponseData));
    286e:	6093      	str	r3, [r2, #8]
    2870:	60d3      	str	r3, [r2, #12]
    2872:	6113      	str	r3, [r2, #16]
    2874:	6153      	str	r3, [r2, #20]
    memset(atKgsnResponseData,0,sizeof(atKgsnResponseData));
    2876:	6193      	str	r3, [r2, #24]
    2878:	61d3      	str	r3, [r2, #28]
    287a:	6213      	str	r3, [r2, #32]
    287c:	f8c2 3023 	str.w	r3, [r2, #35]	; 0x23
    memset(atCarrierResponseData,0,sizeof(atCarrierResponseData));
    2880:	6293      	str	r3, [r2, #40]	; 0x28
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2882:	4c65      	ldr	r4, [pc, #404]	; (2a18 <ModemDiagTask+0x1c0>)
           (false != isFotaVerificationDone()))
    2884:	4d65      	ldr	r5, [pc, #404]	; (2a1c <ModemDiagTask+0x1c4>)
    const TickType_t powerUpDelayMs = pdMS_TO_TICKS(7000UL);
    BaseType_t TxQueuePushStatus;
    AtTxMsgType TxMsgQueueData;
    CmdResponseType cmdResponse;

    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2886:	4e66      	ldr	r6, [pc, #408]	; (2a20 <ModemDiagTask+0x1c8>)
    2888:	e029      	b.n	28de <ModemDiagTask+0x86>
        {
            switch(ModemDiagState)
            {
                case MODEM_DIAG_TEST_AT:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    288a:	2304      	movs	r3, #4
    288c:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
    2890:	2301      	movs	r3, #1
    2892:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2896:	2300      	movs	r3, #0
    2898:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    289a:	2264      	movs	r2, #100	; 0x64
    289c:	4669      	mov	r1, sp
    289e:	6830      	ldr	r0, [r6, #0]
    28a0:	4f60      	ldr	r7, [pc, #384]	; (2a24 <ModemDiagTask+0x1cc>)
    28a2:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    28a4:	2801      	cmp	r0, #1
    28a6:	d10d      	bne.n	28c4 <ModemDiagTask+0x6c>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    28a8:	2300      	movs	r3, #0
    28aa:	461a      	mov	r2, r3
    28ac:	4619      	mov	r1, r3
    28ae:	485e      	ldr	r0, [pc, #376]	; (2a28 <ModemDiagTask+0x1d0>)
    28b0:	6800      	ldr	r0, [r0, #0]
    28b2:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    28b4:	f240 50dc 	movw	r0, #1500	; 0x5dc
    28b8:	4b5c      	ldr	r3, [pc, #368]	; (2a2c <ModemDiagTask+0x1d4>)
    28ba:	4798      	blx	r3
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
    28bc:	2201      	movs	r2, #1
    28be:	4b54      	ldr	r3, [pc, #336]	; (2a10 <ModemDiagTask+0x1b8>)
    28c0:	701a      	strb	r2, [r3, #0]
    28c2:	e006      	b.n	28d2 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    28c4:	485a      	ldr	r0, [pc, #360]	; (2a30 <ModemDiagTask+0x1d8>)
    28c6:	4b5b      	ldr	r3, [pc, #364]	; (2a34 <ModemDiagTask+0x1dc>)
    28c8:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    28ca:	f240 50dc 	movw	r0, #1500	; 0x5dc
    28ce:	4b57      	ldr	r3, [pc, #348]	; (2a2c <ModemDiagTask+0x1d4>)
    28d0:	4798      	blx	r3
            kickWatchDog();
    28d2:	4b59      	ldr	r3, [pc, #356]	; (2a38 <ModemDiagTask+0x1e0>)
    28d4:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    28d6:	f44f 7016 	mov.w	r0, #600	; 0x258
    28da:	4b54      	ldr	r3, [pc, #336]	; (2a2c <ModemDiagTask+0x1d4>)
    28dc:	4798      	blx	r3
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    28de:	47a0      	blx	r4
    28e0:	2804      	cmp	r0, #4
    28e2:	d1fc      	bne.n	28de <ModemDiagTask+0x86>
           (false != isFotaVerificationDone()))
    28e4:	47a8      	blx	r5
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    28e6:	2800      	cmp	r0, #0
    28e8:	d0f9      	beq.n	28de <ModemDiagTask+0x86>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    28ea:	6830      	ldr	r0, [r6, #0]
    28ec:	4b53      	ldr	r3, [pc, #332]	; (2a3c <ModemDiagTask+0x1e4>)
    28ee:	4798      	blx	r3
    28f0:	2800      	cmp	r0, #0
    28f2:	d1ee      	bne.n	28d2 <ModemDiagTask+0x7a>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    28f4:	2100      	movs	r1, #0
    28f6:	4b4c      	ldr	r3, [pc, #304]	; (2a28 <ModemDiagTask+0x1d0>)
    28f8:	6818      	ldr	r0, [r3, #0]
    28fa:	4b51      	ldr	r3, [pc, #324]	; (2a40 <ModemDiagTask+0x1e8>)
    28fc:	4798      	blx	r3
    28fe:	2801      	cmp	r0, #1
    2900:	d1e7      	bne.n	28d2 <ModemDiagTask+0x7a>
            switch(ModemDiagState)
    2902:	4b43      	ldr	r3, [pc, #268]	; (2a10 <ModemDiagTask+0x1b8>)
    2904:	781b      	ldrb	r3, [r3, #0]
    2906:	2b03      	cmp	r3, #3
    2908:	d879      	bhi.n	29fe <ModemDiagTask+0x1a6>
    290a:	a201      	add	r2, pc, #4	; (adr r2, 2910 <ModemDiagTask+0xb8>)
    290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2910:	0000288b 	.word	0x0000288b
    2914:	00002921 	.word	0x00002921
    2918:	0000296b 	.word	0x0000296b
    291c:	000029b5 	.word	0x000029b5
                }
                break;

                case MODEM_DIAG_GET_IMEI:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    2920:	2304      	movs	r3, #4
    2922:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
    2926:	2302      	movs	r3, #2
    2928:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    292c:	2300      	movs	r3, #0
    292e:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2930:	2264      	movs	r2, #100	; 0x64
    2932:	4669      	mov	r1, sp
    2934:	6830      	ldr	r0, [r6, #0]
    2936:	4f3b      	ldr	r7, [pc, #236]	; (2a24 <ModemDiagTask+0x1cc>)
    2938:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    293a:	2801      	cmp	r0, #1
    293c:	d10d      	bne.n	295a <ModemDiagTask+0x102>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    293e:	2300      	movs	r3, #0
    2940:	461a      	mov	r2, r3
    2942:	4619      	mov	r1, r3
    2944:	4838      	ldr	r0, [pc, #224]	; (2a28 <ModemDiagTask+0x1d0>)
    2946:	6800      	ldr	r0, [r0, #0]
    2948:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    294a:	f240 50dc 	movw	r0, #1500	; 0x5dc
    294e:	4b37      	ldr	r3, [pc, #220]	; (2a2c <ModemDiagTask+0x1d4>)
    2950:	4798      	blx	r3
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
    2952:	2202      	movs	r2, #2
    2954:	4b2e      	ldr	r3, [pc, #184]	; (2a10 <ModemDiagTask+0x1b8>)
    2956:	701a      	strb	r2, [r3, #0]
    2958:	e7bb      	b.n	28d2 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    295a:	4835      	ldr	r0, [pc, #212]	; (2a30 <ModemDiagTask+0x1d8>)
    295c:	4b35      	ldr	r3, [pc, #212]	; (2a34 <ModemDiagTask+0x1dc>)
    295e:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    2960:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2964:	4b31      	ldr	r3, [pc, #196]	; (2a2c <ModemDiagTask+0x1d4>)
    2966:	4798      	blx	r3
    2968:	e7b3      	b.n	28d2 <ModemDiagTask+0x7a>
                }
                break;

                case MODEM_DIAG_GET_SERIAL:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    296a:	2304      	movs	r3, #4
    296c:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
    2970:	2307      	movs	r3, #7
    2972:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2976:	2300      	movs	r3, #0
    2978:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    297a:	2264      	movs	r2, #100	; 0x64
    297c:	4669      	mov	r1, sp
    297e:	6830      	ldr	r0, [r6, #0]
    2980:	4f28      	ldr	r7, [pc, #160]	; (2a24 <ModemDiagTask+0x1cc>)
    2982:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    2984:	2801      	cmp	r0, #1
    2986:	d10d      	bne.n	29a4 <ModemDiagTask+0x14c>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    2988:	2300      	movs	r3, #0
    298a:	461a      	mov	r2, r3
    298c:	4619      	mov	r1, r3
    298e:	4826      	ldr	r0, [pc, #152]	; (2a28 <ModemDiagTask+0x1d0>)
    2990:	6800      	ldr	r0, [r0, #0]
    2992:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    2994:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2998:	4b24      	ldr	r3, [pc, #144]	; (2a2c <ModemDiagTask+0x1d4>)
    299a:	4798      	blx	r3
                        ModemDiagState = MODEM_DIAG_MAX_STATE;
    299c:	2204      	movs	r2, #4
    299e:	4b1c      	ldr	r3, [pc, #112]	; (2a10 <ModemDiagTask+0x1b8>)
    29a0:	701a      	strb	r2, [r3, #0]
    29a2:	e796      	b.n	28d2 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    29a4:	4822      	ldr	r0, [pc, #136]	; (2a30 <ModemDiagTask+0x1d8>)
    29a6:	4b23      	ldr	r3, [pc, #140]	; (2a34 <ModemDiagTask+0x1dc>)
    29a8:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    29aa:	f240 50dc 	movw	r0, #1500	; 0x5dc
    29ae:	4b1f      	ldr	r3, [pc, #124]	; (2a2c <ModemDiagTask+0x1d4>)
    29b0:	4798      	blx	r3
    29b2:	e78e      	b.n	28d2 <ModemDiagTask+0x7a>
                }
                break;

                case MODEM_DIAG_GET_CARRIER:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    29b4:	2304      	movs	r3, #4
    29b6:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
    29ba:	2303      	movs	r3, #3
    29bc:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    29c0:	2300      	movs	r3, #0
    29c2:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    29c4:	2264      	movs	r2, #100	; 0x64
    29c6:	4669      	mov	r1, sp
    29c8:	6830      	ldr	r0, [r6, #0]
    29ca:	4f16      	ldr	r7, [pc, #88]	; (2a24 <ModemDiagTask+0x1cc>)
    29cc:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    29ce:	2801      	cmp	r0, #1
    29d0:	d10d      	bne.n	29ee <ModemDiagTask+0x196>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    29d2:	2300      	movs	r3, #0
    29d4:	461a      	mov	r2, r3
    29d6:	4619      	mov	r1, r3
    29d8:	4813      	ldr	r0, [pc, #76]	; (2a28 <ModemDiagTask+0x1d0>)
    29da:	6800      	ldr	r0, [r0, #0]
    29dc:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    29de:	f240 50dc 	movw	r0, #1500	; 0x5dc
    29e2:	4b12      	ldr	r3, [pc, #72]	; (2a2c <ModemDiagTask+0x1d4>)
    29e4:	4798      	blx	r3
                        ModemDiagState = 100;
    29e6:	2264      	movs	r2, #100	; 0x64
    29e8:	4b09      	ldr	r3, [pc, #36]	; (2a10 <ModemDiagTask+0x1b8>)
    29ea:	701a      	strb	r2, [r3, #0]
    29ec:	e771      	b.n	28d2 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    29ee:	4810      	ldr	r0, [pc, #64]	; (2a30 <ModemDiagTask+0x1d8>)
    29f0:	4b10      	ldr	r3, [pc, #64]	; (2a34 <ModemDiagTask+0x1dc>)
    29f2:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    29f4:	f240 50dc 	movw	r0, #1500	; 0x5dc
    29f8:	4b0c      	ldr	r3, [pc, #48]	; (2a2c <ModemDiagTask+0x1d4>)
    29fa:	4798      	blx	r3
    29fc:	e769      	b.n	28d2 <ModemDiagTask+0x7a>
                }
                break;

                default:
                {
                	xSemaphoreGive(AtTxQueueLoadSemaphore);
    29fe:	2300      	movs	r3, #0
    2a00:	461a      	mov	r2, r3
    2a02:	4619      	mov	r1, r3
    2a04:	4808      	ldr	r0, [pc, #32]	; (2a28 <ModemDiagTask+0x1d0>)
    2a06:	6800      	ldr	r0, [r0, #0]
    2a08:	4f06      	ldr	r7, [pc, #24]	; (2a24 <ModemDiagTask+0x1cc>)
    2a0a:	47b8      	blx	r7
    2a0c:	e761      	b.n	28d2 <ModemDiagTask+0x7a>
    2a0e:	bf00      	nop
    2a10:	20003d98 	.word	0x20003d98
    2a14:	200002e8 	.word	0x200002e8
    2a18:	00002b15 	.word	0x00002b15
    2a1c:	00000f79 	.word	0x00000f79
    2a20:	20003568 	.word	0x20003568
    2a24:	0000519d 	.word	0x0000519d
    2a28:	2000357c 	.word	0x2000357c
    2a2c:	00005e2d 	.word	0x00005e2d
    2a30:	00008b34 	.word	0x00008b34
    2a34:	0000313d 	.word	0x0000313d
    2a38:	00003335 	.word	0x00003335
    2a3c:	00005815 	.word	0x00005815
    2a40:	00005635 	.word	0x00005635

00002a44 <ModemDiagUpdateDataBase>:
{
    2a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a46:	4604      	mov	r4, r0
    switch(cmd)
    2a48:	780b      	ldrb	r3, [r1, #0]
    2a4a:	3b01      	subs	r3, #1
    2a4c:	2b06      	cmp	r3, #6
    2a4e:	d826      	bhi.n	2a9e <ModemDiagUpdateDataBase+0x5a>
    2a50:	e8df f003 	tbb	[pc, r3]
    2a54:	25243725 	.word	0x25243725
    2a58:	2525      	.short	0x2525
    2a5a:	04          	.byte	0x04
    2a5b:	00          	.byte	0x00
			while(parseCnt <= (cmdResponse->length - startIndex))
    2a5c:	884b      	ldrh	r3, [r1, #2]
    2a5e:	2b07      	cmp	r3, #7
    2a60:	d40d      	bmi.n	2a7e <ModemDiagUpdateDataBase+0x3a>
    2a62:	2200      	movs	r2, #0
    2a64:	4613      	mov	r3, r2
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
    2a66:	4d20      	ldr	r5, [pc, #128]	; (2ae8 <ModemDiagUpdateDataBase+0xa4>)
    2a68:	18a0      	adds	r0, r4, r2
    2a6a:	79c0      	ldrb	r0, [r0, #7]
    2a6c:	442a      	add	r2, r5
    2a6e:	7610      	strb	r0, [r2, #24]
				parseCnt++;
    2a70:	3301      	adds	r3, #1
    2a72:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
    2a74:	461a      	mov	r2, r3
    2a76:	8848      	ldrh	r0, [r1, #2]
    2a78:	3807      	subs	r0, #7
    2a7a:	4283      	cmp	r3, r0
    2a7c:	ddf4      	ble.n	2a68 <ModemDiagUpdateDataBase+0x24>
			bModemDiagDataBaseUpdated = true;
    2a7e:	4d1a      	ldr	r5, [pc, #104]	; (2ae8 <ModemDiagUpdateDataBase+0xa4>)
    2a80:	2601      	movs	r6, #1
    2a82:	462c      	mov	r4, r5
    2a84:	f804 6b18 	strb.w	r6, [r4], #24
			DEBUG_PRINT("Retrieved the Modem serial Number");
    2a88:	4818      	ldr	r0, [pc, #96]	; (2aec <ModemDiagUpdateDataBase+0xa8>)
    2a8a:	4f19      	ldr	r7, [pc, #100]	; (2af0 <ModemDiagUpdateDataBase+0xac>)
    2a8c:	47b8      	blx	r7
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
    2a8e:	210f      	movs	r1, #15
    2a90:	4620      	mov	r0, r4
    2a92:	4b18      	ldr	r3, [pc, #96]	; (2af4 <ModemDiagUpdateDataBase+0xb0>)
    2a94:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    2a96:	4818      	ldr	r0, [pc, #96]	; (2af8 <ModemDiagUpdateDataBase+0xb4>)
    2a98:	47b8      	blx	r7
			bModemDiagDataBaseUpdated = true;
    2a9a:	702e      	strb	r6, [r5, #0]
    2a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
    2a9e:	4b12      	ldr	r3, [pc, #72]	; (2ae8 <ModemDiagUpdateDataBase+0xa4>)
    2aa0:	1d1d      	adds	r5, r3, #4
    2aa2:	8801      	ldrh	r1, [r0, #0]
    2aa4:	7882      	ldrb	r2, [r0, #2]
    2aa6:	8099      	strh	r1, [r3, #4]
    2aa8:	719a      	strb	r2, [r3, #6]
        	DEBUG_PRINT("Verifying the UART Link status with Modem");
    2aaa:	4814      	ldr	r0, [pc, #80]	; (2afc <ModemDiagUpdateDataBase+0xb8>)
    2aac:	4c10      	ldr	r4, [pc, #64]	; (2af0 <ModemDiagUpdateDataBase+0xac>)
    2aae:	47a0      	blx	r4
        	DEBUG_PRINT("SuccessFully verified the UART Link between SAMD51 Controller & Modem");
    2ab0:	4813      	ldr	r0, [pc, #76]	; (2b00 <ModemDiagUpdateDataBase+0xbc>)
    2ab2:	47a0      	blx	r4
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
    2ab4:	2103      	movs	r1, #3
    2ab6:	4628      	mov	r0, r5
    2ab8:	4b0e      	ldr	r3, [pc, #56]	; (2af4 <ModemDiagUpdateDataBase+0xb0>)
    2aba:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    2abc:	480e      	ldr	r0, [pc, #56]	; (2af8 <ModemDiagUpdateDataBase+0xb4>)
    2abe:	47a0      	blx	r4
        break;
    2ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
    2ac2:	4e09      	ldr	r6, [pc, #36]	; (2ae8 <ModemDiagUpdateDataBase+0xa4>)
    2ac4:	f106 0508 	add.w	r5, r6, #8
    2ac8:	6800      	ldr	r0, [r0, #0]
    2aca:	6861      	ldr	r1, [r4, #4]
    2acc:	68a2      	ldr	r2, [r4, #8]
    2ace:	68e3      	ldr	r3, [r4, #12]
    2ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
    2ad2:	480c      	ldr	r0, [pc, #48]	; (2b04 <ModemDiagUpdateDataBase+0xc0>)
    2ad4:	4c06      	ldr	r4, [pc, #24]	; (2af0 <ModemDiagUpdateDataBase+0xac>)
    2ad6:	47a0      	blx	r4
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
    2ad8:	2110      	movs	r1, #16
    2ada:	f106 0008 	add.w	r0, r6, #8
    2ade:	4b05      	ldr	r3, [pc, #20]	; (2af4 <ModemDiagUpdateDataBase+0xb0>)
    2ae0:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    2ae2:	4805      	ldr	r0, [pc, #20]	; (2af8 <ModemDiagUpdateDataBase+0xb4>)
    2ae4:	47a0      	blx	r4
        break;
    2ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ae8:	200002e8 	.word	0x200002e8
    2aec:	00008bf0 	.word	0x00008bf0
    2af0:	0000313d 	.word	0x0000313d
    2af4:	000030f9 	.word	0x000030f9
    2af8:	00008e50 	.word	0x00008e50
    2afc:	00008b5c 	.word	0x00008b5c
    2b00:	00008b88 	.word	0x00008b88
    2b04:	00008bd0 	.word	0x00008bd0

00002b08 <isModemDiagDataBaseUpdated>:
*
********************************************************************************/
bool isModemDiagDataBaseUpdated(void)
{
	return bModemDiagDataBaseUpdated;
}
    2b08:	4b01      	ldr	r3, [pc, #4]	; (2b10 <isModemDiagDataBaseUpdated+0x8>)
    2b0a:	7818      	ldrb	r0, [r3, #0]
    2b0c:	4770      	bx	lr
    2b0e:	bf00      	nop
    2b10:	200002e8 	.word	0x200002e8

00002b14 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
    2b14:	4b01      	ldr	r3, [pc, #4]	; (2b1c <getModemPowerStatus+0x8>)
    2b16:	7818      	ldrb	r0, [r3, #0]
    2b18:	4770      	bx	lr
    2b1a:	bf00      	nop
    2b1c:	20000314 	.word	0x20000314

00002b20 <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_RESET_MODEM;
    2b20:	4b04      	ldr	r3, [pc, #16]	; (2b34 <modemPowerStateInit+0x14>)
    2b22:	2207      	movs	r2, #7
    2b24:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    2b26:	2200      	movs	r2, #0
    2b28:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_ASSERT;
    2b2a:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    2b2c:	2201      	movs	r2, #1
    2b2e:	70da      	strb	r2, [r3, #3]
    2b30:	4770      	bx	lr
    2b32:	bf00      	nop
    2b34:	20000314 	.word	0x20000314

00002b38 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
    2b38:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);
    const TickType_t ModemResetToPowerOnWaitDelay = pdMS_TO_TICKS(500UL);

    switch(ModemPwrState)
    2b3a:	4b68      	ldr	r3, [pc, #416]	; (2cdc <modemPowerSchedule+0x1a4>)
    2b3c:	781b      	ldrb	r3, [r3, #0]
    2b3e:	2b06      	cmp	r3, #6
    2b40:	f000 809e 	beq.w	2c80 <modemPowerSchedule+0x148>
    2b44:	2b07      	cmp	r3, #7
    2b46:	d054      	beq.n	2bf2 <modemPowerSchedule+0xba>
    2b48:	b103      	cbz	r3, 2b4c <modemPowerSchedule+0x14>
    2b4a:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
    2b4c:	4b63      	ldr	r3, [pc, #396]	; (2cdc <modemPowerSchedule+0x1a4>)
    2b4e:	785b      	ldrb	r3, [r3, #1]
    2b50:	2b03      	cmp	r3, #3
    2b52:	d8fa      	bhi.n	2b4a <modemPowerSchedule+0x12>
    2b54:	e8df f003 	tbb	[pc, r3]
    2b58:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b5c:	4b60      	ldr	r3, [pc, #384]	; (2ce0 <modemPowerSchedule+0x1a8>)
    2b5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b66:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2b6a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    2b6e:	4c5d      	ldr	r4, [pc, #372]	; (2ce4 <modemPowerSchedule+0x1ac>)
    2b70:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b74:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b78:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b7c:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b84:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    2b88:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b8a:	6299      	str	r1, [r3, #40]	; 0x28
    2b8c:	4856      	ldr	r0, [pc, #344]	; (2ce8 <modemPowerSchedule+0x1b0>)
    2b8e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b90:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b94:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b98:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b9c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b9e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ba0:	6299      	str	r1, [r3, #40]	; 0x28
    2ba2:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ba4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ba8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2bac:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2bb0:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
    2bb2:	2201      	movs	r2, #1
    2bb4:	4b49      	ldr	r3, [pc, #292]	; (2cdc <modemPowerSchedule+0x1a4>)
    2bb6:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
    2bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2bbc:	4b4b      	ldr	r3, [pc, #300]	; (2cec <modemPowerSchedule+0x1b4>)
    2bbe:	4798      	blx	r3
                }
                break;
    2bc0:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2bc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2bc6:	4b46      	ldr	r3, [pc, #280]	; (2ce0 <modemPowerSchedule+0x1a8>)
    2bc8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
    2bcc:	2202      	movs	r2, #2
    2bce:	4b43      	ldr	r3, [pc, #268]	; (2cdc <modemPowerSchedule+0x1a4>)
    2bd0:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
    2bd2:	2032      	movs	r0, #50	; 0x32
    2bd4:	4b45      	ldr	r3, [pc, #276]	; (2cec <modemPowerSchedule+0x1b4>)
    2bd6:	4798      	blx	r3
                }
                break;
    2bd8:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
    2bda:	2203      	movs	r2, #3
    2bdc:	4b3f      	ldr	r3, [pc, #252]	; (2cdc <modemPowerSchedule+0x1a4>)
    2bde:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
    2be0:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2be4:	4b41      	ldr	r3, [pc, #260]	; (2cec <modemPowerSchedule+0x1b4>)
    2be6:	4798      	blx	r3
                }
                break;
    2be8:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
    2bea:	2204      	movs	r2, #4
    2bec:	4b3b      	ldr	r3, [pc, #236]	; (2cdc <modemPowerSchedule+0x1a4>)
    2bee:	701a      	strb	r2, [r3, #0]
                }
                break;
    2bf0:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
    2bf2:	4b3a      	ldr	r3, [pc, #232]	; (2cdc <modemPowerSchedule+0x1a4>)
    2bf4:	789b      	ldrb	r3, [r3, #2]
    2bf6:	b113      	cbz	r3, 2bfe <modemPowerSchedule+0xc6>
    2bf8:	2b01      	cmp	r3, #1
    2bfa:	d028      	beq.n	2c4e <modemPowerSchedule+0x116>
    2bfc:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2bfe:	4b38      	ldr	r3, [pc, #224]	; (2ce0 <modemPowerSchedule+0x1a8>)
    2c00:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2c04:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2c0c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    2c10:	4a34      	ldr	r2, [pc, #208]	; (2ce4 <modemPowerSchedule+0x1ac>)
    2c12:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c16:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c1e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c22:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c26:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2c2a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c2c:	6298      	str	r0, [r3, #40]	; 0x28
    2c2e:	4a2e      	ldr	r2, [pc, #184]	; (2ce8 <modemPowerSchedule+0x1b0>)
    2c30:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c32:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c3a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c3e:	6199      	str	r1, [r3, #24]

                    /* Apply low level pulse on the RESET pin for 25 ms */
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
    2c40:	2201      	movs	r2, #1
    2c42:	4b26      	ldr	r3, [pc, #152]	; (2cdc <modemPowerSchedule+0x1a4>)
    2c44:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
    2c46:	2019      	movs	r0, #25
    2c48:	4b28      	ldr	r3, [pc, #160]	; (2cec <modemPowerSchedule+0x1b4>)
    2c4a:	4798      	blx	r3
                }
                break;
    2c4c:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c4e:	4b24      	ldr	r3, [pc, #144]	; (2ce0 <modemPowerSchedule+0x1a8>)
    2c50:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2c54:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2c5a:	629a      	str	r2, [r3, #40]	; 0x28
    2c5c:	4a22      	ldr	r2, [pc, #136]	; (2ce8 <modemPowerSchedule+0x1b0>)
    2c5e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c60:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c68:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2c6c:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
    2c6e:	4b1b      	ldr	r3, [pc, #108]	; (2cdc <modemPowerSchedule+0x1a4>)
    2c70:	2200      	movs	r2, #0
    2c72:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    2c74:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemResetToPowerOnWaitDelay);
    2c76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2c7a:	4b1c      	ldr	r3, [pc, #112]	; (2cec <modemPowerSchedule+0x1b4>)
    2c7c:	4798      	blx	r3
                }
                break;
    2c7e:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
    2c80:	4b16      	ldr	r3, [pc, #88]	; (2cdc <modemPowerSchedule+0x1a4>)
    2c82:	78db      	ldrb	r3, [r3, #3]
    2c84:	2b00      	cmp	r3, #0
    2c86:	f47f af60 	bne.w	2b4a <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c8a:	4b15      	ldr	r3, [pc, #84]	; (2ce0 <modemPowerSchedule+0x1a8>)
    2c8c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2c90:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2c98:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    2c9c:	4a11      	ldr	r2, [pc, #68]	; (2ce4 <modemPowerSchedule+0x1ac>)
    2c9e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ca2:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ca6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2caa:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2cae:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2cb2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2cb6:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cb8:	6298      	str	r0, [r3, #40]	; 0x28
    2cba:	4a0b      	ldr	r2, [pc, #44]	; (2ce8 <modemPowerSchedule+0x1b0>)
    2cbc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2cbe:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2cc2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2cc6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2cca:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    2ccc:	2201      	movs	r2, #1
    2cce:	4b03      	ldr	r3, [pc, #12]	; (2cdc <modemPowerSchedule+0x1a4>)
    2cd0:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
    2cd2:	2019      	movs	r0, #25
    2cd4:	4b05      	ldr	r3, [pc, #20]	; (2cec <modemPowerSchedule+0x1b4>)
    2cd6:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
    2cd8:	e737      	b.n	2b4a <modemPowerSchedule+0x12>
    2cda:	bf00      	nop
    2cdc:	20000314 	.word	0x20000314
    2ce0:	41008000 	.word	0x41008000
    2ce4:	c0000001 	.word	0xc0000001
    2ce8:	c0000008 	.word	0xc0000008
    2cec:	00005e2d 	.word	0x00005e2d

00002cf0 <packetTransmitPeriodicTimerCallBack>:
*               into a string and returns the string.
*
********************************************************************************/
static void packetTransmitPeriodicTimerCallBack(void* param)
{
	packetTransmitPeriodicTimerExpired = true;
    2cf0:	2201      	movs	r2, #1
    2cf2:	4b01      	ldr	r3, [pc, #4]	; (2cf8 <packetTransmitPeriodicTimerCallBack+0x8>)
    2cf4:	701a      	strb	r2, [r3, #0]
    2cf6:	4770      	bx	lr
    2cf8:	20000318 	.word	0x20000318

00002cfc <SystemAutoRestartTimerCallBack>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
static void SystemAutoRestartTimerCallBack(void* param)
{
    2cfc:	b508      	push	{r3, lr}
	DEBUG_PRINT("Hourly System Restart timer expired. Rebooting the system.\r\n");
    2cfe:	4803      	ldr	r0, [pc, #12]	; (2d0c <SystemAutoRestartTimerCallBack+0x10>)
    2d00:	4b03      	ldr	r3, [pc, #12]	; (2d10 <SystemAutoRestartTimerCallBack+0x14>)
    2d02:	4798      	blx	r3
	requestWatchDogForcedReset();
    2d04:	4b03      	ldr	r3, [pc, #12]	; (2d14 <SystemAutoRestartTimerCallBack+0x18>)
    2d06:	4798      	blx	r3
    2d08:	bd08      	pop	{r3, pc}
    2d0a:	bf00      	nop
    2d0c:	00008c14 	.word	0x00008c14
    2d10:	0000313d 	.word	0x0000313d
    2d14:	00003375 	.word	0x00003375

00002d18 <ModemProcessTask>:
{
    2d18:	b570      	push	{r4, r5, r6, lr}
    2d1a:	b082      	sub	sp, #8
    modemPowerStateInit();
    2d1c:	4b26      	ldr	r3, [pc, #152]	; (2db8 <ModemProcessTask+0xa0>)
    2d1e:	4798      	blx	r3
    MdmConnect_HttpConnectionInit();
    2d20:	4b26      	ldr	r3, [pc, #152]	; (2dbc <ModemProcessTask+0xa4>)
    2d22:	4798      	blx	r3
    packetTransmitPeriodicTimerExpired = false;
    2d24:	2400      	movs	r4, #0
    2d26:	4b26      	ldr	r3, [pc, #152]	; (2dc0 <ModemProcessTask+0xa8>)
    2d28:	701c      	strb	r4, [r3, #0]
    xAutoReloadHourlyTimer   = xTimerCreate("HourlySystemRestartTimer",HOURLY_RESTART_TIMER_LOAD_VALUE,pdTRUE,0,SystemAutoRestartTimerCallBack);
    2d2a:	4b26      	ldr	r3, [pc, #152]	; (2dc4 <ModemProcessTask+0xac>)
    2d2c:	9300      	str	r3, [sp, #0]
    2d2e:	4623      	mov	r3, r4
    2d30:	2201      	movs	r2, #1
    2d32:	4925      	ldr	r1, [pc, #148]	; (2dc8 <ModemProcessTask+0xb0>)
    2d34:	4825      	ldr	r0, [pc, #148]	; (2dcc <ModemProcessTask+0xb4>)
    2d36:	4e26      	ldr	r6, [pc, #152]	; (2dd0 <ModemProcessTask+0xb8>)
    2d38:	47b0      	blx	r6
    2d3a:	4605      	mov	r5, r0
    xPacketSendPeriodicTimer = xTimerCreate("PacketTransmitPeriodicTimer",PACKET_SEND_TIMER_LOAD_VALUE,pdTRUE,0,packetTransmitPeriodicTimerCallBack);
    2d3c:	4b25      	ldr	r3, [pc, #148]	; (2dd4 <ModemProcessTask+0xbc>)
    2d3e:	9300      	str	r3, [sp, #0]
    2d40:	4623      	mov	r3, r4
    2d42:	2201      	movs	r2, #1
    2d44:	f241 7170 	movw	r1, #6000	; 0x1770
    2d48:	4823      	ldr	r0, [pc, #140]	; (2dd8 <ModemProcessTask+0xc0>)
    2d4a:	47b0      	blx	r6
    if((xPacketSendPeriodicTimer != NULL) &&
    2d4c:	2800      	cmp	r0, #0
    2d4e:	d02c      	beq.n	2daa <ModemProcessTask+0x92>
    2d50:	4604      	mov	r4, r0
    2d52:	2d00      	cmp	r5, #0
    2d54:	d029      	beq.n	2daa <ModemProcessTask+0x92>
    	if((pdPASS == xTimerStart(xAutoReloadHourlyTimer,0)) &&
    2d56:	4b21      	ldr	r3, [pc, #132]	; (2ddc <ModemProcessTask+0xc4>)
    2d58:	4798      	blx	r3
    2d5a:	2300      	movs	r3, #0
    2d5c:	9300      	str	r3, [sp, #0]
    2d5e:	4602      	mov	r2, r0
    2d60:	2101      	movs	r1, #1
    2d62:	4628      	mov	r0, r5
    2d64:	4d1e      	ldr	r5, [pc, #120]	; (2de0 <ModemProcessTask+0xc8>)
    2d66:	47a8      	blx	r5
    2d68:	2801      	cmp	r0, #1
    2d6a:	d11e      	bne.n	2daa <ModemProcessTask+0x92>
		   (pdPASS == xTimerStart(xPacketSendPeriodicTimer,0)))
    2d6c:	4b1b      	ldr	r3, [pc, #108]	; (2ddc <ModemProcessTask+0xc4>)
    2d6e:	4798      	blx	r3
    2d70:	2300      	movs	r3, #0
    2d72:	9300      	str	r3, [sp, #0]
    2d74:	4602      	mov	r2, r0
    2d76:	2101      	movs	r1, #1
    2d78:	4620      	mov	r0, r4
    2d7a:	47a8      	blx	r5
    	if((pdPASS == xTimerStart(xAutoReloadHourlyTimer,0)) &&
    2d7c:	2801      	cmp	r0, #1
    2d7e:	d114      	bne.n	2daa <ModemProcessTask+0x92>
    		DEBUG_PRINT("Modem timers are started");
    2d80:	4818      	ldr	r0, [pc, #96]	; (2de4 <ModemProcessTask+0xcc>)
    2d82:	4b19      	ldr	r3, [pc, #100]	; (2de8 <ModemProcessTask+0xd0>)
    2d84:	4798      	blx	r3
        modemPowerSchedule();
    2d86:	4d19      	ldr	r5, [pc, #100]	; (2dec <ModemProcessTask+0xd4>)
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2d88:	4c19      	ldr	r4, [pc, #100]	; (2df0 <ModemProcessTask+0xd8>)
           (false != isFotaVerificationDone()))
    2d8a:	4e1a      	ldr	r6, [pc, #104]	; (2df4 <ModemProcessTask+0xdc>)
        modemPowerSchedule();
    2d8c:	47a8      	blx	r5
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2d8e:	47a0      	blx	r4
    2d90:	2804      	cmp	r0, #4
    2d92:	d1fb      	bne.n	2d8c <ModemProcessTask+0x74>
           (false != isFotaVerificationDone()))
    2d94:	47b0      	blx	r6
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2d96:	2800      	cmp	r0, #0
    2d98:	d0f8      	beq.n	2d8c <ModemProcessTask+0x74>
            MdmConnect_HttpConnectionSchedule();
    2d9a:	4b17      	ldr	r3, [pc, #92]	; (2df8 <ModemProcessTask+0xe0>)
    2d9c:	4798      	blx	r3
			kickWatchDog();
    2d9e:	4b17      	ldr	r3, [pc, #92]	; (2dfc <ModemProcessTask+0xe4>)
    2da0:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    2da2:	2064      	movs	r0, #100	; 0x64
    2da4:	4b16      	ldr	r3, [pc, #88]	; (2e00 <ModemProcessTask+0xe8>)
    2da6:	4798      	blx	r3
    2da8:	e7f0      	b.n	2d8c <ModemProcessTask+0x74>
    	DEBUG_PRINT("Failed to initialize the modem timers. Rebooting the system");
    2daa:	4816      	ldr	r0, [pc, #88]	; (2e04 <ModemProcessTask+0xec>)
    2dac:	4b0e      	ldr	r3, [pc, #56]	; (2de8 <ModemProcessTask+0xd0>)
    2dae:	4798      	blx	r3
    	requestWatchDogForcedReset();
    2db0:	4b15      	ldr	r3, [pc, #84]	; (2e08 <ModemProcessTask+0xf0>)
    2db2:	4798      	blx	r3
    2db4:	e7e7      	b.n	2d86 <ModemProcessTask+0x6e>
    2db6:	bf00      	nop
    2db8:	00002b21 	.word	0x00002b21
    2dbc:	0000155d 	.word	0x0000155d
    2dc0:	20000318 	.word	0x20000318
    2dc4:	00002cfd 	.word	0x00002cfd
    2dc8:	0036ee80 	.word	0x0036ee80
    2dcc:	00008c54 	.word	0x00008c54
    2dd0:	000065ed 	.word	0x000065ed
    2dd4:	00002cf1 	.word	0x00002cf1
    2dd8:	00008c70 	.word	0x00008c70
    2ddc:	00005bed 	.word	0x00005bed
    2de0:	00006641 	.word	0x00006641
    2de4:	00008c8c 	.word	0x00008c8c
    2de8:	0000313d 	.word	0x0000313d
    2dec:	00002b39 	.word	0x00002b39
    2df0:	00002b15 	.word	0x00002b15
    2df4:	00000f79 	.word	0x00000f79
    2df8:	00001f6d 	.word	0x00001f6d
    2dfc:	00003335 	.word	0x00003335
    2e00:	00005e2d 	.word	0x00005e2d
    2e04:	00008ca8 	.word	0x00008ca8
    2e08:	00003375 	.word	0x00003375

00002e0c <clearPacketTransmitTimerExpiryFlag>:
	packetTransmitPeriodicTimerExpired = false;
    2e0c:	2200      	movs	r2, #0
    2e0e:	4b01      	ldr	r3, [pc, #4]	; (2e14 <clearPacketTransmitTimerExpiryFlag+0x8>)
    2e10:	701a      	strb	r2, [r3, #0]
    2e12:	4770      	bx	lr
    2e14:	20000318 	.word	0x20000318

00002e18 <isPacketTransmitTimerExpired>:
}
    2e18:	4b01      	ldr	r3, [pc, #4]	; (2e20 <isPacketTransmitTimerExpired+0x8>)
    2e1a:	7818      	ldrb	r0, [r3, #0]
    2e1c:	4770      	bx	lr
    2e1e:	bf00      	nop
    2e20:	20000318 	.word	0x20000318

00002e24 <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
    2e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e26:	4606      	mov	r6, r0
    2e28:	460c      	mov	r4, r1
    2e2a:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	BaseType_t FotaResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
    2e2c:	4936      	ldr	r1, [pc, #216]	; (2f08 <modemResponseHandler+0xe4>)
    2e2e:	4b37      	ldr	r3, [pc, #220]	; (2f0c <modemResponseHandler+0xe8>)
    2e30:	4798      	blx	r3

    if(response != NULL)
    2e32:	2c00      	cmp	r4, #0
    2e34:	d064      	beq.n	2f00 <modemResponseHandler+0xdc>
    {
        switch (cmdData.cmdSet)
    2e36:	4b34      	ldr	r3, [pc, #208]	; (2f08 <modemResponseHandler+0xe4>)
    2e38:	785b      	ldrb	r3, [r3, #1]
    2e3a:	2b01      	cmp	r3, #1
    2e3c:	d019      	beq.n	2e72 <modemResponseHandler+0x4e>
    2e3e:	b113      	cbz	r3, 2e46 <modemResponseHandler+0x22>
    2e40:	2b02      	cmp	r3, #2
    2e42:	d03a      	beq.n	2eba <modemResponseHandler+0x96>
    2e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
    2e46:	4f30      	ldr	r7, [pc, #192]	; (2f08 <modemResponseHandler+0xe4>)
    2e48:	753e      	strb	r6, [r7, #20]
            	cmdResponse.length = length;
    2e4a:	82fd      	strh	r5, [r7, #22]
            	memset(responseBuffer,0,700);
    2e4c:	f107 061c 	add.w	r6, r7, #28
    2e50:	f44f 722f 	mov.w	r2, #700	; 0x2bc
    2e54:	2100      	movs	r1, #0
    2e56:	4630      	mov	r0, r6
    2e58:	4b2d      	ldr	r3, [pc, #180]	; (2f10 <modemResponseHandler+0xec>)
    2e5a:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
    2e5c:	462a      	mov	r2, r5
    2e5e:	4621      	mov	r1, r4
    2e60:	4630      	mov	r0, r6
    2e62:	4b2c      	ldr	r3, [pc, #176]	; (2f14 <modemResponseHandler+0xf0>)
    2e64:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
    2e66:	f107 0114 	add.w	r1, r7, #20
    2e6a:	4630      	mov	r0, r6
    2e6c:	4b2a      	ldr	r3, [pc, #168]	; (2f18 <modemResponseHandler+0xf4>)
    2e6e:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
    2e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
    2e72:	4b2a      	ldr	r3, [pc, #168]	; (2f1c <modemResponseHandler+0xf8>)
    2e74:	6818      	ldr	r0, [r3, #0]
    2e76:	4b2a      	ldr	r3, [pc, #168]	; (2f20 <modemResponseHandler+0xfc>)
    2e78:	4798      	blx	r3
    2e7a:	b9d0      	cbnz	r0, 2eb2 <modemResponseHandler+0x8e>
                {
                	cmdResponse.atCmd = cmd;
    2e7c:	4f22      	ldr	r7, [pc, #136]	; (2f08 <modemResponseHandler+0xe4>)
    2e7e:	753e      	strb	r6, [r7, #20]
                	cmdResponse.length = length;
    2e80:	82fd      	strh	r5, [r7, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    2e82:	4628      	mov	r0, r5
    2e84:	4b27      	ldr	r3, [pc, #156]	; (2f24 <modemResponseHandler+0x100>)
    2e86:	4798      	blx	r3
    2e88:	61b8      	str	r0, [r7, #24]

                	if(cmdResponse.response != NULL)
    2e8a:	2800      	cmp	r0, #0
    2e8c:	d03b      	beq.n	2f06 <modemResponseHandler+0xe2>
                	{
                		memcpy(cmdResponse.response,response,length);
    2e8e:	462a      	mov	r2, r5
    2e90:	4621      	mov	r1, r4
    2e92:	4b20      	ldr	r3, [pc, #128]	; (2f14 <modemResponseHandler+0xf0>)
    2e94:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
    2e96:	2300      	movs	r3, #0
    2e98:	2264      	movs	r2, #100	; 0x64
    2e9a:	f107 0114 	add.w	r1, r7, #20
    2e9e:	481f      	ldr	r0, [pc, #124]	; (2f1c <modemResponseHandler+0xf8>)
    2ea0:	6800      	ldr	r0, [r0, #0]
    2ea2:	4c21      	ldr	r4, [pc, #132]	; (2f28 <modemResponseHandler+0x104>)
    2ea4:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
    2ea6:	2801      	cmp	r0, #1
    2ea8:	d02d      	beq.n	2f06 <modemResponseHandler+0xe2>
                		{
                			//DEBUG_PRINT("Successfully posted connection Response to Queue");
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
    2eaa:	4820      	ldr	r0, [pc, #128]	; (2f2c <modemResponseHandler+0x108>)
    2eac:	4b20      	ldr	r3, [pc, #128]	; (2f30 <modemResponseHandler+0x10c>)
    2eae:	4798      	blx	r3
    2eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    2eb2:	4820      	ldr	r0, [pc, #128]	; (2f34 <modemResponseHandler+0x110>)
    2eb4:	4b1e      	ldr	r3, [pc, #120]	; (2f30 <modemResponseHandler+0x10c>)
    2eb6:	4798      	blx	r3
    2eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
            break;

            case AT_CMD_SET_FOTA_APP:
            {
                if (uxQueueMessagesWaiting(FotaResponseQueue) == 0)
    2eba:	4b1f      	ldr	r3, [pc, #124]	; (2f38 <modemResponseHandler+0x114>)
    2ebc:	6818      	ldr	r0, [r3, #0]
    2ebe:	4b18      	ldr	r3, [pc, #96]	; (2f20 <modemResponseHandler+0xfc>)
    2ec0:	4798      	blx	r3
    2ec2:	b9c8      	cbnz	r0, 2ef8 <modemResponseHandler+0xd4>
                {
                	cmdResponse.atCmd = cmd;
    2ec4:	4f10      	ldr	r7, [pc, #64]	; (2f08 <modemResponseHandler+0xe4>)
    2ec6:	753e      	strb	r6, [r7, #20]
                	cmdResponse.length = length;
    2ec8:	82fd      	strh	r5, [r7, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    2eca:	4628      	mov	r0, r5
    2ecc:	4b15      	ldr	r3, [pc, #84]	; (2f24 <modemResponseHandler+0x100>)
    2ece:	4798      	blx	r3
    2ed0:	61b8      	str	r0, [r7, #24]

                	if(cmdResponse.response != NULL)
    2ed2:	b1c0      	cbz	r0, 2f06 <modemResponseHandler+0xe2>
                	{
                		memcpy(cmdResponse.response,response,length);
    2ed4:	462a      	mov	r2, r5
    2ed6:	4621      	mov	r1, r4
    2ed8:	4b0e      	ldr	r3, [pc, #56]	; (2f14 <modemResponseHandler+0xf0>)
    2eda:	4798      	blx	r3
                		FotaResponseQueuePushStatus = xQueueSendToBack(FotaResponseQueue, &cmdResponse, QueuePushDelayMs);
    2edc:	2300      	movs	r3, #0
    2ede:	2264      	movs	r2, #100	; 0x64
    2ee0:	f107 0114 	add.w	r1, r7, #20
    2ee4:	4814      	ldr	r0, [pc, #80]	; (2f38 <modemResponseHandler+0x114>)
    2ee6:	6800      	ldr	r0, [r0, #0]
    2ee8:	4c0f      	ldr	r4, [pc, #60]	; (2f28 <modemResponseHandler+0x104>)
    2eea:	47a0      	blx	r4

                		if(FotaResponseQueuePushStatus == pdPASS)
    2eec:	2801      	cmp	r0, #1
    2eee:	d00a      	beq.n	2f06 <modemResponseHandler+0xe2>
                		{
                			//DEBUG_PRINT("Successfully posted connection Response to Queue");
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Fota Queue");
    2ef0:	4812      	ldr	r0, [pc, #72]	; (2f3c <modemResponseHandler+0x118>)
    2ef2:	4b0f      	ldr	r3, [pc, #60]	; (2f30 <modemResponseHandler+0x10c>)
    2ef4:	4798      	blx	r3
    2ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    2ef8:	480e      	ldr	r0, [pc, #56]	; (2f34 <modemResponseHandler+0x110>)
    2efa:	4b0d      	ldr	r3, [pc, #52]	; (2f30 <modemResponseHandler+0x10c>)
    2efc:	4798      	blx	r3
    2efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
    2f00:	480f      	ldr	r0, [pc, #60]	; (2f40 <modemResponseHandler+0x11c>)
    2f02:	4b0b      	ldr	r3, [pc, #44]	; (2f30 <modemResponseHandler+0x10c>)
    2f04:	4798      	blx	r3
    2f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f08:	2000031c 	.word	0x2000031c
    2f0c:	000012f9 	.word	0x000012f9
    2f10:	00006a03 	.word	0x00006a03
    2f14:	000069b9 	.word	0x000069b9
    2f18:	00002a45 	.word	0x00002a45
    2f1c:	20003544 	.word	0x20003544
    2f20:	00005815 	.word	0x00005815
    2f24:	00004d95 	.word	0x00004d95
    2f28:	0000519d 	.word	0x0000519d
    2f2c:	00008ce4 	.word	0x00008ce4
    2f30:	0000313d 	.word	0x0000313d
    2f34:	00008d14 	.word	0x00008d14
    2f38:	20003574 	.word	0x20003574
    2f3c:	00008d40 	.word	0x00008d40
    2f40:	00008d78 	.word	0x00008d78

00002f44 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Application/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
    2f44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f46:	b087      	sub	sp, #28

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    2f48:	4c10      	ldr	r4, [pc, #64]	; (2f8c <ModemRxTask+0x48>)
		
		if(xResult == pdPASS)
		{
			getModemCommandData(atCmd, &cmdData);
    2f4a:	4f11      	ldr	r7, [pc, #68]	; (2f90 <ModemRxTask+0x4c>)

			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    2f4c:	4e11      	ldr	r6, [pc, #68]	; (2f94 <ModemRxTask+0x50>)
    2f4e:	e001      	b.n	2f54 <ModemRxTask+0x10>
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
		}
		kickWatchDog();
    2f50:	4b11      	ldr	r3, [pc, #68]	; (2f98 <ModemRxTask+0x54>)
    2f52:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    2f54:	f04f 33ff 	mov.w	r3, #4294967295
    2f58:	f10d 0217 	add.w	r2, sp, #23
    2f5c:	4619      	mov	r1, r3
    2f5e:	2000      	movs	r0, #0
    2f60:	47a0      	blx	r4
		if(xResult == pdPASS)
    2f62:	2801      	cmp	r0, #1
    2f64:	d1f4      	bne.n	2f50 <ModemRxTask+0xc>
			getModemCommandData(atCmd, &cmdData);
    2f66:	4669      	mov	r1, sp
    2f68:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2f6c:	47b8      	blx	r7
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    2f6e:	f89d 0000 	ldrb.w	r0, [sp]
    2f72:	47b0      	blx	r6
    2f74:	2800      	cmp	r0, #0
    2f76:	d1eb      	bne.n	2f50 <ModemRxTask+0xc>
				DEBUG_PRINT("ERROR: Command Parsing Failed");
    2f78:	4808      	ldr	r0, [pc, #32]	; (2f9c <ModemRxTask+0x58>)
    2f7a:	4d09      	ldr	r5, [pc, #36]	; (2fa0 <ModemRxTask+0x5c>)
    2f7c:	47a8      	blx	r5
				DEBUG_PRINT("\r\nNot able to auto recover from connection failure...Rebooting....");
    2f7e:	4809      	ldr	r0, [pc, #36]	; (2fa4 <ModemRxTask+0x60>)
    2f80:	47a8      	blx	r5
				DEBUG_PRINT("\r\n");
    2f82:	4809      	ldr	r0, [pc, #36]	; (2fa8 <ModemRxTask+0x64>)
    2f84:	47a8      	blx	r5
				requestWatchDogForcedReset();
    2f86:	4b09      	ldr	r3, [pc, #36]	; (2fac <ModemRxTask+0x68>)
    2f88:	4798      	blx	r3
    2f8a:	e7e1      	b.n	2f50 <ModemRxTask+0xc>
    2f8c:	0000632d 	.word	0x0000632d
    2f90:	000012f9 	.word	0x000012f9
    2f94:	000013f5 	.word	0x000013f5
    2f98:	00003335 	.word	0x00003335
    2f9c:	00008dc0 	.word	0x00008dc0
    2fa0:	0000313d 	.word	0x0000313d
    2fa4:	00008de0 	.word	0x00008de0
    2fa8:	00008e50 	.word	0x00008e50
    2fac:	00003375 	.word	0x00003375

00002fb0 <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
    2fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(100UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
    2fb2:	2300      	movs	r3, #0
    2fb4:	461a      	mov	r2, r3
    2fb6:	4619      	mov	r1, r3
    2fb8:	481f      	ldr	r0, [pc, #124]	; (3038 <ModemTxTask+0x88>)
    2fba:	6800      	ldr	r0, [r0, #0]
    2fbc:	4c1f      	ldr	r4, [pc, #124]	; (303c <ModemTxTask+0x8c>)
    2fbe:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    2fc0:	4c1f      	ldr	r4, [pc, #124]	; (3040 <ModemTxTask+0x90>)
	
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
		{
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    2fc2:	4d20      	ldr	r5, [pc, #128]	; (3044 <ModemTxTask+0x94>)
** Description:        Transmits Data to Modem
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	getModemCommandData(atCmd, &ModemCmdData);
    2fc4:	f105 0608 	add.w	r6, r5, #8
    2fc8:	e004      	b.n	2fd4 <ModemTxTask+0x24>
			kickWatchDog();
    2fca:	4b1f      	ldr	r3, [pc, #124]	; (3048 <ModemTxTask+0x98>)
    2fcc:	4798      	blx	r3
			vTaskDelay(xDelayMs);
    2fce:	2064      	movs	r0, #100	; 0x64
    2fd0:	4b1e      	ldr	r3, [pc, #120]	; (304c <ModemTxTask+0x9c>)
    2fd2:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    2fd4:	47a0      	blx	r4
    2fd6:	2804      	cmp	r0, #4
    2fd8:	d1fc      	bne.n	2fd4 <ModemTxTask+0x24>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
    2fda:	4b1d      	ldr	r3, [pc, #116]	; (3050 <ModemTxTask+0xa0>)
    2fdc:	6818      	ldr	r0, [r3, #0]
    2fde:	4b1d      	ldr	r3, [pc, #116]	; (3054 <ModemTxTask+0xa4>)
    2fe0:	4798      	blx	r3
    2fe2:	2800      	cmp	r0, #0
    2fe4:	d0f1      	beq.n	2fca <ModemTxTask+0x1a>
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    2fe6:	2100      	movs	r1, #0
    2fe8:	4b13      	ldr	r3, [pc, #76]	; (3038 <ModemTxTask+0x88>)
    2fea:	6818      	ldr	r0, [r3, #0]
    2fec:	4b1a      	ldr	r3, [pc, #104]	; (3058 <ModemTxTask+0xa8>)
    2fee:	4798      	blx	r3
    2ff0:	2801      	cmp	r0, #1
    2ff2:	d1ea      	bne.n	2fca <ModemTxTask+0x1a>
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    2ff4:	2264      	movs	r2, #100	; 0x64
    2ff6:	4629      	mov	r1, r5
    2ff8:	4b15      	ldr	r3, [pc, #84]	; (3050 <ModemTxTask+0xa0>)
    2ffa:	6818      	ldr	r0, [r3, #0]
    2ffc:	4b17      	ldr	r3, [pc, #92]	; (305c <ModemTxTask+0xac>)
    2ffe:	4798      	blx	r3
			if(xResult == pdPASS)
    3000:	2801      	cmp	r0, #1
    3002:	d1e2      	bne.n	2fca <ModemTxTask+0x1a>
				ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
    3004:	786f      	ldrb	r7, [r5, #1]
	getModemCommandData(atCmd, &ModemCmdData);
    3006:	4631      	mov	r1, r6
    3008:	4638      	mov	r0, r7
    300a:	4b15      	ldr	r3, [pc, #84]	; (3060 <ModemTxTask+0xb0>)
    300c:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
    300e:	4b15      	ldr	r3, [pc, #84]	; (3064 <ModemTxTask+0xb4>)
    3010:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
    3012:	7c29      	ldrb	r1, [r5, #16]
    3014:	68e8      	ldr	r0, [r5, #12]
    3016:	4b14      	ldr	r3, [pc, #80]	; (3068 <ModemTxTask+0xb8>)
    3018:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
    301a:	4638      	mov	r0, r7
    301c:	4b13      	ldr	r3, [pc, #76]	; (306c <ModemTxTask+0xbc>)
    301e:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
    3020:	2000      	movs	r0, #0
    3022:	4b13      	ldr	r3, [pc, #76]	; (3070 <ModemTxTask+0xc0>)
    3024:	4798      	blx	r3
				xSemaphoreGive(AtTxQueueLoadSemaphore);				
    3026:	2300      	movs	r3, #0
    3028:	461a      	mov	r2, r3
    302a:	4619      	mov	r1, r3
    302c:	4802      	ldr	r0, [pc, #8]	; (3038 <ModemTxTask+0x88>)
    302e:	6800      	ldr	r0, [r0, #0]
    3030:	4f02      	ldr	r7, [pc, #8]	; (303c <ModemTxTask+0x8c>)
    3032:	47b8      	blx	r7
    3034:	e7c9      	b.n	2fca <ModemTxTask+0x1a>
    3036:	bf00      	nop
    3038:	2000357c 	.word	0x2000357c
    303c:	0000519d 	.word	0x0000519d
    3040:	00002b15 	.word	0x00002b15
    3044:	200005f8 	.word	0x200005f8
    3048:	00003335 	.word	0x00003335
    304c:	00005e2d 	.word	0x00005e2d
    3050:	20003568 	.word	0x20003568
    3054:	00005815 	.word	0x00005815
    3058:	00005635 	.word	0x00005635
    305c:	000054ad 	.word	0x000054ad
    3060:	000012f9 	.word	0x000012f9
    3064:	00002831 	.word	0x00002831
    3068:	000027b5 	.word	0x000027b5
    306c:	000014e9 	.word	0x000014e9
    3070:	000014dd 	.word	0x000014dd

00003074 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Application/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
    3074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3078:	4604      	mov	r4, r0
    307a:	460e      	mov	r6, r1
    307c:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
    307e:	4d0e      	ldr	r5, [pc, #56]	; (30b8 <usart_async_write+0x44>)
    3080:	4620      	mov	r0, r4
    3082:	47a8      	blx	r5
    3084:	2800      	cmp	r0, #0
    3086:	d0fb      	beq.n	3080 <usart_async_write+0xc>
    3088:	3e01      	subs	r6, #1
    308a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 30bc <usart_async_write+0x48>
    308e:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
    3090:	f8df a02c 	ldr.w	sl, [pc, #44]	; 30c0 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
    3094:	4d08      	ldr	r5, [pc, #32]	; (30b8 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
    3096:	7873      	ldrb	r3, [r6, #1]
    3098:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
    309c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    30a0:	4620      	mov	r0, r4
    30a2:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
    30a4:	4620      	mov	r0, r4
    30a6:	47a8      	blx	r5
    30a8:	2800      	cmp	r0, #0
    30aa:	d0fb      	beq.n	30a4 <usart_async_write+0x30>
		;
	} while (++offset < length);
    30ac:	3701      	adds	r7, #1
    30ae:	454f      	cmp	r7, r9
    30b0:	d3f1      	bcc.n	3096 <usart_async_write+0x22>

	return (int32_t)offset;
}
    30b2:	4638      	mov	r0, r7
    30b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    30b8:	0000435b 	.word	0x0000435b
    30bc:	20000614 	.word	0x20000614
    30c0:	0000434d 	.word	0x0000434d

000030c4 <SerialDebugTxByteSentCallBack>:
    30c4:	2302      	movs	r3, #2
    30c6:	7603      	strb	r3, [r0, #24]
    30c8:	4770      	bx	lr

000030ca <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    30ca:	2380      	movs	r3, #128	; 0x80
    30cc:	7603      	strb	r3, [r0, #24]
    30ce:	4770      	bx	lr

000030d0 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
    30d0:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
    30d2:	4c05      	ldr	r4, [pc, #20]	; (30e8 <SerialDebugPrintInit+0x18>)
    30d4:	4905      	ldr	r1, [pc, #20]	; (30ec <SerialDebugPrintInit+0x1c>)
    30d6:	4620      	mov	r0, r4
    30d8:	4b05      	ldr	r3, [pc, #20]	; (30f0 <SerialDebugPrintInit+0x20>)
    30da:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
    30dc:	2201      	movs	r2, #1
    30de:	4611      	mov	r1, r2
    30e0:	4620      	mov	r0, r4
    30e2:	4b04      	ldr	r3, [pc, #16]	; (30f4 <SerialDebugPrintInit+0x24>)
    30e4:	4798      	blx	r3
    30e6:	bd10      	pop	{r4, pc}
    30e8:	20000044 	.word	0x20000044
    30ec:	43000400 	.word	0x43000400
    30f0:	000042c5 	.word	0x000042c5
    30f4:	00004371 	.word	0x00004371

000030f8 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
    30f8:	b570      	push	{r4, r5, r6, lr}
    30fa:	4605      	mov	r5, r0
    30fc:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
    30fe:	4c05      	ldr	r4, [pc, #20]	; (3114 <SerialDebugPrint+0x1c>)
    3100:	4620      	mov	r0, r4
    3102:	4b05      	ldr	r3, [pc, #20]	; (3118 <SerialDebugPrint+0x20>)
    3104:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
    3106:	4632      	mov	r2, r6
    3108:	4629      	mov	r1, r5
    310a:	4620      	mov	r0, r4
    310c:	4b03      	ldr	r3, [pc, #12]	; (311c <SerialDebugPrint+0x24>)
    310e:	4798      	blx	r3
    3110:	bd70      	pop	{r4, r5, r6, pc}
    3112:	bf00      	nop
    3114:	20000044 	.word	0x20000044
    3118:	00004339 	.word	0x00004339
    311c:	00003075 	.word	0x00003075

00003120 <SerialDebugTxDoneCallBack>:
{
    3120:	b510      	push	{r4, lr}
    3122:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    3124:	2116      	movs	r1, #22
    3126:	4803      	ldr	r0, [pc, #12]	; (3134 <SerialDebugTxDoneCallBack+0x14>)
    3128:	4b03      	ldr	r3, [pc, #12]	; (3138 <SerialDebugTxDoneCallBack+0x18>)
    312a:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    312c:	2301      	movs	r3, #1
    312e:	7623      	strb	r3, [r4, #24]
    3130:	bd10      	pop	{r4, pc}
    3132:	bf00      	nop
    3134:	00008e24 	.word	0x00008e24
    3138:	000030f9 	.word	0x000030f9

0000313c <SerialStringPrint>:
}

void SerialStringPrint(const uint8_t *const dataToPrint)
{
    313c:	b570      	push	{r4, r5, r6, lr}
    313e:	4605      	mov	r5, r0
	#ifdef SERIAL_DEBUG_ON
	
	uint8_t strLength;
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);
	uint8_t* dbgBuffer = NULL;
	strLength = strlen(dataToPrint);
    3140:	4b17      	ldr	r3, [pc, #92]	; (31a0 <SerialStringPrint+0x64>)
    3142:	4798      	blx	r3
    3144:	4604      	mov	r4, r0

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    3146:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    314a:	4b16      	ldr	r3, [pc, #88]	; (31a4 <SerialStringPrint+0x68>)
    314c:	6818      	ldr	r0, [r3, #0]
    314e:	4b16      	ldr	r3, [pc, #88]	; (31a8 <SerialStringPrint+0x6c>)
    3150:	4798      	blx	r3
    3152:	2801      	cmp	r0, #1
    3154:	d000      	beq.n	3158 <SerialStringPrint+0x1c>
    3156:	bd70      	pop	{r4, r5, r6, pc}
    3158:	b2e4      	uxtb	r4, r4
    {
		dbgBuffer = (uint8_t*)pvPortMalloc((strLength)*(sizeof(uint8_t)));
    315a:	4620      	mov	r0, r4
    315c:	4b13      	ldr	r3, [pc, #76]	; (31ac <SerialStringPrint+0x70>)
    315e:	4798      	blx	r3
		
		if(dbgBuffer != NULL)
    3160:	4606      	mov	r6, r0
    3162:	b1a0      	cbz	r0, 318e <SerialStringPrint+0x52>
		{
	    	memset(dbgBuffer,'\0',strLength);
    3164:	4622      	mov	r2, r4
    3166:	2100      	movs	r1, #0
    3168:	4b11      	ldr	r3, [pc, #68]	; (31b0 <SerialStringPrint+0x74>)
    316a:	4798      	blx	r3
	    	sprintf((int8_t*)dbgBuffer,"%s",dataToPrint);
    316c:	4629      	mov	r1, r5
    316e:	4630      	mov	r0, r6
    3170:	4b10      	ldr	r3, [pc, #64]	; (31b4 <SerialStringPrint+0x78>)
    3172:	4798      	blx	r3
	    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    3174:	4630      	mov	r0, r6
    3176:	4b0a      	ldr	r3, [pc, #40]	; (31a0 <SerialStringPrint+0x64>)
    3178:	4798      	blx	r3
    317a:	b281      	uxth	r1, r0
    317c:	4630      	mov	r0, r6
    317e:	4c0e      	ldr	r4, [pc, #56]	; (31b8 <SerialStringPrint+0x7c>)
    3180:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    3182:	2102      	movs	r1, #2
    3184:	480d      	ldr	r0, [pc, #52]	; (31bc <SerialStringPrint+0x80>)
    3186:	47a0      	blx	r4
	    	vPortFree(dbgBuffer);			
    3188:	4630      	mov	r0, r6
    318a:	4b0d      	ldr	r3, [pc, #52]	; (31c0 <SerialStringPrint+0x84>)
    318c:	4798      	blx	r3
		}
    	xSemaphoreGive(DebugPrintMutex);
    318e:	2300      	movs	r3, #0
    3190:	461a      	mov	r2, r3
    3192:	4619      	mov	r1, r3
    3194:	4803      	ldr	r0, [pc, #12]	; (31a4 <SerialStringPrint+0x68>)
    3196:	6800      	ldr	r0, [r0, #0]
    3198:	4c0a      	ldr	r4, [pc, #40]	; (31c4 <SerialStringPrint+0x88>)
    319a:	47a0      	blx	r4
    }
	
	#endif
}
    319c:	e7db      	b.n	3156 <SerialStringPrint+0x1a>
    319e:	bf00      	nop
    31a0:	00006be5 	.word	0x00006be5
    31a4:	20003570 	.word	0x20003570
    31a8:	00005635 	.word	0x00005635
    31ac:	00004d95 	.word	0x00004d95
    31b0:	00006a03 	.word	0x00006a03
    31b4:	00006bd5 	.word	0x00006bd5
    31b8:	000030f9 	.word	0x000030f9
    31bc:	00008e50 	.word	0x00008e50
    31c0:	00004e75 	.word	0x00004e75
    31c4:	0000519d 	.word	0x0000519d

000031c8 <ConsoleDebugPrint>:

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
    31c8:	b530      	push	{r4, r5, lr}
    31ca:	b09b      	sub	sp, #108	; 0x6c
    31cc:	4605      	mov	r5, r0
    31ce:	460c      	mov	r4, r1
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    31d0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    31d4:	4b11      	ldr	r3, [pc, #68]	; (321c <ConsoleDebugPrint+0x54>)
    31d6:	6818      	ldr	r0, [r3, #0]
    31d8:	4b11      	ldr	r3, [pc, #68]	; (3220 <ConsoleDebugPrint+0x58>)
    31da:	4798      	blx	r3
    31dc:	2801      	cmp	r0, #1
    31de:	d001      	beq.n	31e4 <ConsoleDebugPrint+0x1c>
    		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    	}
    	xSemaphoreGive(DebugPrintMutex);
    }
}
    31e0:	b01b      	add	sp, #108	; 0x6c
    31e2:	bd30      	pop	{r4, r5, pc}
    	memset(dbgBuffer,'\0',100);
    31e4:	2264      	movs	r2, #100	; 0x64
    31e6:	2100      	movs	r1, #0
    31e8:	a801      	add	r0, sp, #4
    31ea:	4b0e      	ldr	r3, [pc, #56]	; (3224 <ConsoleDebugPrint+0x5c>)
    31ec:	4798      	blx	r3
    	if(intData != 0)
    31ee:	b93c      	cbnz	r4, 3200 <ConsoleDebugPrint+0x38>
    	xSemaphoreGive(DebugPrintMutex);
    31f0:	2300      	movs	r3, #0
    31f2:	461a      	mov	r2, r3
    31f4:	4619      	mov	r1, r3
    31f6:	4809      	ldr	r0, [pc, #36]	; (321c <ConsoleDebugPrint+0x54>)
    31f8:	6800      	ldr	r0, [r0, #0]
    31fa:	4c0b      	ldr	r4, [pc, #44]	; (3228 <ConsoleDebugPrint+0x60>)
    31fc:	47a0      	blx	r4
}
    31fe:	e7ef      	b.n	31e0 <ConsoleDebugPrint+0x18>
    		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    3200:	4623      	mov	r3, r4
    3202:	462a      	mov	r2, r5
    3204:	4909      	ldr	r1, [pc, #36]	; (322c <ConsoleDebugPrint+0x64>)
    3206:	a801      	add	r0, sp, #4
    3208:	4c09      	ldr	r4, [pc, #36]	; (3230 <ConsoleDebugPrint+0x68>)
    320a:	47a0      	blx	r4
    		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    320c:	a801      	add	r0, sp, #4
    320e:	4b09      	ldr	r3, [pc, #36]	; (3234 <ConsoleDebugPrint+0x6c>)
    3210:	4798      	blx	r3
    3212:	b281      	uxth	r1, r0
    3214:	a801      	add	r0, sp, #4
    3216:	4b08      	ldr	r3, [pc, #32]	; (3238 <ConsoleDebugPrint+0x70>)
    3218:	4798      	blx	r3
    321a:	e7e9      	b.n	31f0 <ConsoleDebugPrint+0x28>
    321c:	20003570 	.word	0x20003570
    3220:	00005635 	.word	0x00005635
    3224:	00006a03 	.word	0x00006a03
    3228:	0000519d 	.word	0x0000519d
    322c:	00008e48 	.word	0x00008e48
    3230:	00006b8d 	.word	0x00006b8d
    3234:	00006be5 	.word	0x00006be5
    3238:	000030f9 	.word	0x000030f9

0000323c <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    323c:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    323e:	2204      	movs	r2, #4
    3240:	4b0b      	ldr	r3, [pc, #44]	; (3270 <SERCOM5_2_Handler+0x34>)
    3242:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    3244:	4d0b      	ldr	r5, [pc, #44]	; (3274 <SERCOM5_2_Handler+0x38>)
    3246:	4c0c      	ldr	r4, [pc, #48]	; (3278 <SERCOM5_2_Handler+0x3c>)
    3248:	4628      	mov	r0, r5
    324a:	47a0      	blx	r4
    324c:	2800      	cmp	r0, #0
    324e:	d0fb      	beq.n	3248 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    3250:	4808      	ldr	r0, [pc, #32]	; (3274 <SERCOM5_2_Handler+0x38>)
    3252:	4b0a      	ldr	r3, [pc, #40]	; (327c <SERCOM5_2_Handler+0x40>)
    3254:	4798      	blx	r3
    3256:	490a      	ldr	r1, [pc, #40]	; (3280 <SERCOM5_2_Handler+0x44>)
    3258:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    325a:	2300      	movs	r3, #0
    325c:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    325e:	4c09      	ldr	r4, [pc, #36]	; (3284 <SERCOM5_2_Handler+0x48>)
    3260:	4620      	mov	r0, r4
    3262:	4b09      	ldr	r3, [pc, #36]	; (3288 <SERCOM5_2_Handler+0x4c>)
    3264:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    3266:	2105      	movs	r1, #5
    3268:	4620      	mov	r0, r4
    326a:	4b08      	ldr	r3, [pc, #32]	; (328c <SERCOM5_2_Handler+0x50>)
    326c:	4798      	blx	r3
    326e:	bd38      	pop	{r3, r4, r5, pc}
    3270:	43000400 	.word	0x43000400
    3274:	20000044 	.word	0x20000044
    3278:	00004365 	.word	0x00004365
    327c:	00004353 	.word	0x00004353
    3280:	20003d9c 	.word	0x20003d9c
    3284:	20003da0 	.word	0x20003da0
    3288:	00006bd5 	.word	0x00006bd5
    328c:	000030f9 	.word	0x000030f9

00003290 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    3290:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    3292:	4b0a      	ldr	r3, [pc, #40]	; (32bc <configureWatchDogTimeOut+0x2c>)
    3294:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3298:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    329a:	4c09      	ldr	r4, [pc, #36]	; (32c0 <configureWatchDogTimeOut+0x30>)
    329c:	6820      	ldr	r0, [r4, #0]
    329e:	2279      	movs	r2, #121	; 0x79
    32a0:	4908      	ldr	r1, [pc, #32]	; (32c4 <configureWatchDogTimeOut+0x34>)
    32a2:	3000      	adds	r0, #0
    32a4:	bf18      	it	ne
    32a6:	2001      	movne	r0, #1
    32a8:	4b07      	ldr	r3, [pc, #28]	; (32c8 <configureWatchDogTimeOut+0x38>)
    32aa:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    32ac:	462a      	mov	r2, r5
    32ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    32b2:	4620      	mov	r0, r4
    32b4:	4b05      	ldr	r3, [pc, #20]	; (32cc <configureWatchDogTimeOut+0x3c>)
    32b6:	4798      	blx	r3
    32b8:	bd38      	pop	{r3, r4, r5, pc}
    32ba:	bf00      	nop
    32bc:	20000060 	.word	0x20000060
    32c0:	20003e7c 	.word	0x20003e7c
    32c4:	00008e64 	.word	0x00008e64
    32c8:	000039a5 	.word	0x000039a5
    32cc:	000045f5 	.word	0x000045f5

000032d0 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    32d0:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    32d2:	2002      	movs	r0, #2
    32d4:	4b07      	ldr	r3, [pc, #28]	; (32f4 <enableWatchDogTimer+0x24>)
    32d6:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    32d8:	4c07      	ldr	r4, [pc, #28]	; (32f8 <enableWatchDogTimer+0x28>)
    32da:	6820      	ldr	r0, [r4, #0]
    32dc:	2296      	movs	r2, #150	; 0x96
    32de:	4907      	ldr	r1, [pc, #28]	; (32fc <enableWatchDogTimer+0x2c>)
    32e0:	3000      	adds	r0, #0
    32e2:	bf18      	it	ne
    32e4:	2001      	movne	r0, #1
    32e6:	4b06      	ldr	r3, [pc, #24]	; (3300 <enableWatchDogTimer+0x30>)
    32e8:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    32ea:	4620      	mov	r0, r4
    32ec:	4b05      	ldr	r3, [pc, #20]	; (3304 <enableWatchDogTimer+0x34>)
    32ee:	4798      	blx	r3
    32f0:	bd10      	pop	{r4, pc}
    32f2:	bf00      	nop
    32f4:	00003291 	.word	0x00003291
    32f8:	20003e7c 	.word	0x20003e7c
    32fc:	00008e64 	.word	0x00008e64
    3300:	000039a5 	.word	0x000039a5
    3304:	00004711 	.word	0x00004711

00003308 <atmel_start_init>:
{
    3308:	b508      	push	{r3, lr}
    system_init();
    330a:	4b06      	ldr	r3, [pc, #24]	; (3324 <atmel_start_init+0x1c>)
    330c:	4798      	blx	r3
    delay_ms(1000);
    330e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3312:	4b05      	ldr	r3, [pc, #20]	; (3328 <atmel_start_init+0x20>)
    3314:	4798      	blx	r3
    ForcedResetRequested = WDT_FORCED_RESET_OFF;
    3316:	2201      	movs	r2, #1
    3318:	4b04      	ldr	r3, [pc, #16]	; (332c <atmel_start_init+0x24>)
    331a:	731a      	strb	r2, [r3, #12]
    enableWatchDogTimer();
    331c:	4b04      	ldr	r3, [pc, #16]	; (3330 <atmel_start_init+0x28>)
    331e:	4798      	blx	r3
    3320:	bd08      	pop	{r3, pc}
    3322:	bf00      	nop
    3324:	000037c5 	.word	0x000037c5
    3328:	00003985 	.word	0x00003985
    332c:	20000060 	.word	0x20000060
    3330:	000032d1 	.word	0x000032d1

00003334 <kickWatchDog>:
********************************************************************************/
int32_t kickWatchDog(void)
{	
	int32_t status = ERR_NONE;

	if(WDT_FORCED_RESET_OFF == ForcedResetRequested)
    3334:	4b0a      	ldr	r3, [pc, #40]	; (3360 <kickWatchDog+0x2c>)
    3336:	7b1b      	ldrb	r3, [r3, #12]
    3338:	2b01      	cmp	r3, #1
    333a:	d10d      	bne.n	3358 <kickWatchDog+0x24>
{	
    333c:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    333e:	4c09      	ldr	r4, [pc, #36]	; (3364 <kickWatchDog+0x30>)
    3340:	6820      	ldr	r0, [r4, #0]
    3342:	22b3      	movs	r2, #179	; 0xb3
    3344:	4908      	ldr	r1, [pc, #32]	; (3368 <kickWatchDog+0x34>)
    3346:	3000      	adds	r0, #0
    3348:	bf18      	it	ne
    334a:	2001      	movne	r0, #1
    334c:	4b07      	ldr	r3, [pc, #28]	; (336c <kickWatchDog+0x38>)
    334e:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    3350:	4620      	mov	r0, r4
    3352:	4b07      	ldr	r3, [pc, #28]	; (3370 <kickWatchDog+0x3c>)
    3354:	4798      	blx	r3
    3356:	bd10      	pop	{r4, pc}
	{
		status = wdt_feed(&WDT_0);
	}
	else
	{
		status = ERR_DENIED;
    3358:	f06f 0010 	mvn.w	r0, #16
	}

	return status;
    335c:	4770      	bx	lr
    335e:	bf00      	nop
    3360:	20000060 	.word	0x20000060
    3364:	20003e7c 	.word	0x20003e7c
    3368:	00008e64 	.word	0x00008e64
    336c:	000039a5 	.word	0x000039a5
    3370:	0000479d 	.word	0x0000479d

00003374 <requestWatchDogForcedReset>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
void requestWatchDogForcedReset(void)
{
    3374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DEBUG_PRINT("\r\n");
    3376:	4d13      	ldr	r5, [pc, #76]	; (33c4 <requestWatchDogForcedReset+0x50>)
    3378:	4628      	mov	r0, r5
    337a:	4c13      	ldr	r4, [pc, #76]	; (33c8 <requestWatchDogForcedReset+0x54>)
    337c:	47a0      	blx	r4
	DEBUG_PRINT("#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*");
    337e:	4813      	ldr	r0, [pc, #76]	; (33cc <requestWatchDogForcedReset+0x58>)
    3380:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
    3382:	4628      	mov	r0, r5
    3384:	47a0      	blx	r4
	ForcedResetRequested = WDT_FORCED_RESET_ON;
    3386:	2700      	movs	r7, #0
    3388:	4b11      	ldr	r3, [pc, #68]	; (33d0 <requestWatchDogForcedReset+0x5c>)
    338a:	731f      	strb	r7, [r3, #12]
	ASSERT(wdt && wdt->dev.hw);
    338c:	4e11      	ldr	r6, [pc, #68]	; (33d4 <requestWatchDogForcedReset+0x60>)
    338e:	4c12      	ldr	r4, [pc, #72]	; (33d8 <requestWatchDogForcedReset+0x64>)
    3390:	6820      	ldr	r0, [r4, #0]
    3392:	22a5      	movs	r2, #165	; 0xa5
    3394:	4631      	mov	r1, r6
    3396:	1bc0      	subs	r0, r0, r7
    3398:	bf18      	it	ne
    339a:	2001      	movne	r0, #1
    339c:	4d0f      	ldr	r5, [pc, #60]	; (33dc <requestWatchDogForcedReset+0x68>)
    339e:	47a8      	blx	r5
	return _wdt_disable(&wdt->dev);
    33a0:	4620      	mov	r0, r4
    33a2:	4b0f      	ldr	r3, [pc, #60]	; (33e0 <requestWatchDogForcedReset+0x6c>)
    33a4:	4798      	blx	r3
	wdt_disable(&WDT_0);
	configureWatchDogTimeOut(WDT_TIMEOUT_FAST);
    33a6:	4638      	mov	r0, r7
    33a8:	4b0e      	ldr	r3, [pc, #56]	; (33e4 <requestWatchDogForcedReset+0x70>)
    33aa:	4798      	blx	r3
	ASSERT(wdt && wdt->dev.hw);
    33ac:	6820      	ldr	r0, [r4, #0]
    33ae:	2296      	movs	r2, #150	; 0x96
    33b0:	4631      	mov	r1, r6
    33b2:	1bc0      	subs	r0, r0, r7
    33b4:	bf18      	it	ne
    33b6:	2001      	movne	r0, #1
    33b8:	47a8      	blx	r5
	return _wdt_enable(&wdt->dev);
    33ba:	4620      	mov	r0, r4
    33bc:	4b0a      	ldr	r3, [pc, #40]	; (33e8 <requestWatchDogForcedReset+0x74>)
    33be:	4798      	blx	r3
    33c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    33c2:	bf00      	nop
    33c4:	00008e50 	.word	0x00008e50
    33c8:	0000313d 	.word	0x0000313d
    33cc:	00008e80 	.word	0x00008e80
    33d0:	20000060 	.word	0x20000060
    33d4:	00008e64 	.word	0x00008e64
    33d8:	20003e7c 	.word	0x20003e7c
    33dc:	000039a5 	.word	0x000039a5
    33e0:	0000474d 	.word	0x0000474d
    33e4:	00003291 	.word	0x00003291
    33e8:	00004711 	.word	0x00004711

000033ec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    33ec:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    33ee:	4b1c      	ldr	r3, [pc, #112]	; (3460 <Reset_Handler+0x74>)
    33f0:	4a1c      	ldr	r2, [pc, #112]	; (3464 <Reset_Handler+0x78>)
    33f2:	429a      	cmp	r2, r3
    33f4:	d010      	beq.n	3418 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    33f6:	4b1c      	ldr	r3, [pc, #112]	; (3468 <Reset_Handler+0x7c>)
    33f8:	4a19      	ldr	r2, [pc, #100]	; (3460 <Reset_Handler+0x74>)
    33fa:	429a      	cmp	r2, r3
    33fc:	d20c      	bcs.n	3418 <Reset_Handler+0x2c>
    33fe:	3b01      	subs	r3, #1
    3400:	1a9b      	subs	r3, r3, r2
    3402:	f023 0303 	bic.w	r3, r3, #3
    3406:	3304      	adds	r3, #4
    3408:	4413      	add	r3, r2
    340a:	4916      	ldr	r1, [pc, #88]	; (3464 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    340c:	f851 0b04 	ldr.w	r0, [r1], #4
    3410:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    3414:	429a      	cmp	r2, r3
    3416:	d1f9      	bne.n	340c <Reset_Handler+0x20>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3418:	4b14      	ldr	r3, [pc, #80]	; (346c <Reset_Handler+0x80>)
    341a:	4a15      	ldr	r2, [pc, #84]	; (3470 <Reset_Handler+0x84>)
    341c:	429a      	cmp	r2, r3
    341e:	d20a      	bcs.n	3436 <Reset_Handler+0x4a>
    3420:	3b01      	subs	r3, #1
    3422:	1a9b      	subs	r3, r3, r2
    3424:	f023 0303 	bic.w	r3, r3, #3
    3428:	3304      	adds	r3, #4
    342a:	4413      	add	r3, r2
                *pDest++ = 0;
    342c:	2100      	movs	r1, #0
    342e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    3432:	4293      	cmp	r3, r2
    3434:	d1fb      	bne.n	342e <Reset_Handler+0x42>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3436:	4b0f      	ldr	r3, [pc, #60]	; (3474 <Reset_Handler+0x88>)
    3438:	4a0f      	ldr	r2, [pc, #60]	; (3478 <Reset_Handler+0x8c>)
    343a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    343e:	609a      	str	r2, [r3, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
    3440:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3444:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    3448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    344c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3450:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    3454:	4b09      	ldr	r3, [pc, #36]	; (347c <Reset_Handler+0x90>)
    3456:	4798      	blx	r3

        /* Branch to main function */
        main();
    3458:	4b09      	ldr	r3, [pc, #36]	; (3480 <Reset_Handler+0x94>)
    345a:	4798      	blx	r3
    345c:	e7fe      	b.n	345c <Reset_Handler+0x70>
    345e:	bf00      	nop
    3460:	20000000 	.word	0x20000000
    3464:	000093d8 	.word	0x000093d8
    3468:	20000248 	.word	0x20000248
    346c:	20003f80 	.word	0x20003f80
    3470:	20000250 	.word	0x20000250
    3474:	e000ed00 	.word	0xe000ed00
    3478:	00000000 	.word	0x00000000
    347c:	00006929 	.word	0x00006929
    3480:	0000485d 	.word	0x0000485d

00003484 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3484:	b508      	push	{r3, lr}
    DEBUG_PRINT("Unexpected Interrupt Happened...Waiting for the watch dog timeout");
    3486:	4802      	ldr	r0, [pc, #8]	; (3490 <Dummy_Handler+0xc>)
    3488:	4b02      	ldr	r3, [pc, #8]	; (3494 <Dummy_Handler+0x10>)
    348a:	4798      	blx	r3
    348c:	e7fe      	b.n	348c <Dummy_Handler+0x8>
    348e:	bf00      	nop
    3490:	00008ecc 	.word	0x00008ecc
    3494:	0000313d 	.word	0x0000313d

00003498 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3498:	4b5d      	ldr	r3, [pc, #372]	; (3610 <ADC_0_PORT_init+0x178>)
    349a:	2204      	movs	r2, #4
    349c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    349e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    34a2:	629a      	str	r2, [r3, #40]	; 0x28
    34a4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    34a8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    34aa:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    34ae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    34b2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    34b6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    34ba:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    34be:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    34c2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    34c6:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    34ca:	2108      	movs	r1, #8
    34cc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    34ce:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    34d2:	6299      	str	r1, [r3, #40]	; 0x28
    34d4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    34d6:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    34da:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    34de:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    34e2:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    34e6:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    34ea:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    34ee:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    34f2:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    34f6:	f44f 7180 	mov.w	r1, #256	; 0x100
    34fa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    34fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3502:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3506:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    350a:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    350e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3512:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3516:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    351a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    351e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    3522:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3526:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    352a:	f44f 7100 	mov.w	r1, #512	; 0x200
    352e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3532:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3536:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    353a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    353e:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    3542:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3546:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    354a:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    354e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3552:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3556:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    355a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    355e:	2110      	movs	r1, #16
    3560:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3562:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3566:	6299      	str	r1, [r3, #40]	; 0x28
    3568:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    356a:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    356e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3572:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3576:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    357a:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    357e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    3582:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3586:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    358a:	2120      	movs	r1, #32
    358c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    358e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3592:	6299      	str	r1, [r3, #40]	; 0x28
    3594:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3596:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    359a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    359e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    35a2:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    35a6:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    35aa:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    35ae:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    35b2:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    35b6:	2140      	movs	r1, #64	; 0x40
    35b8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    35ba:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    35be:	6299      	str	r1, [r3, #40]	; 0x28
    35c0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    35c2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    35c6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    35ca:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    35ce:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    35d2:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    35d6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    35da:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    35de:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    35e2:	2180      	movs	r1, #128	; 0x80
    35e4:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    35e6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    35ea:	6299      	str	r1, [r3, #40]	; 0x28
    35ec:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    35ee:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    35f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    35f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    35fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    35fe:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3602:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3606:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    360a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    360e:	4770      	bx	lr
    3610:	41008000 	.word	0x41008000

00003614 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    3614:	4a04      	ldr	r2, [pc, #16]	; (3628 <ADC_0_CLOCK_init+0x14>)
    3616:	6a13      	ldr	r3, [r2, #32]
    3618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    361c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    361e:	2241      	movs	r2, #65	; 0x41
    3620:	4b02      	ldr	r3, [pc, #8]	; (362c <ADC_0_CLOCK_init+0x18>)
    3622:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3626:	4770      	bx	lr
    3628:	40000800 	.word	0x40000800
    362c:	40001c00 	.word	0x40001c00

00003630 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    3630:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    3632:	4b05      	ldr	r3, [pc, #20]	; (3648 <ADC_0_init+0x18>)
    3634:	4798      	blx	r3

	if(ERR_NONE == adc_sync_init(&ADC_0, ADC0, (void *)NULL))
    3636:	2200      	movs	r2, #0
    3638:	4904      	ldr	r1, [pc, #16]	; (364c <ADC_0_init+0x1c>)
    363a:	4805      	ldr	r0, [pc, #20]	; (3650 <ADC_0_init+0x20>)
    363c:	4b05      	ldr	r3, [pc, #20]	; (3654 <ADC_0_init+0x24>)
    363e:	4798      	blx	r3
	else
	{
		//DEBUG_PRINT("Failed to initialize ADC");
	}

	ADC_0_PORT_init();
    3640:	4b05      	ldr	r3, [pc, #20]	; (3658 <ADC_0_init+0x28>)
    3642:	4798      	blx	r3
    3644:	bd08      	pop	{r3, pc}
    3646:	bf00      	nop
    3648:	00003615 	.word	0x00003615
    364c:	43001c00 	.word	0x43001c00
    3650:	20003e58 	.word	0x20003e58
    3654:	000037f9 	.word	0x000037f9
    3658:	00003499 	.word	0x00003499

0000365c <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    365c:	4b10      	ldr	r3, [pc, #64]	; (36a0 <ModemData_PORT_init+0x44>)
    365e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    3662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    366a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    366e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3676:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    367a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    367e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    3682:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3686:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    368a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    368e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3692:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    3696:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    369a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    369e:	4770      	bx	lr
    36a0:	41008000 	.word	0x41008000

000036a4 <ModemData_CLOCK_init>:
    36a4:	4b06      	ldr	r3, [pc, #24]	; (36c0 <ModemData_CLOCK_init+0x1c>)
    36a6:	2240      	movs	r2, #64	; 0x40
    36a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    36ac:	224a      	movs	r2, #74	; 0x4a
    36ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    36b2:	4a04      	ldr	r2, [pc, #16]	; (36c4 <ModemData_CLOCK_init+0x20>)
    36b4:	6993      	ldr	r3, [r2, #24]
    36b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    36ba:	6193      	str	r3, [r2, #24]
    36bc:	4770      	bx	lr
    36be:	bf00      	nop
    36c0:	40001c00 	.word	0x40001c00
    36c4:	40000800 	.word	0x40000800

000036c8 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    36c8:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    36ca:	4b03      	ldr	r3, [pc, #12]	; (36d8 <ModemData_init+0x10>)
    36cc:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    36ce:	4b03      	ldr	r3, [pc, #12]	; (36dc <ModemData_init+0x14>)
    36d0:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    36d2:	4b03      	ldr	r3, [pc, #12]	; (36e0 <ModemData_init+0x18>)
    36d4:	4798      	blx	r3
    36d6:	bd08      	pop	{r3, pc}
    36d8:	000036a5 	.word	0x000036a5
    36dc:	000026a1 	.word	0x000026a1
    36e0:	0000365d 	.word	0x0000365d

000036e4 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    36e4:	4b10      	ldr	r3, [pc, #64]	; (3728 <SerialDebug_PORT_init+0x44>)
    36e6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    36ea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    36ee:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    36f2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    36f6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    36fa:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    36fe:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3702:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3706:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    370a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    370e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3712:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3716:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    371a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    371e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3722:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    3726:	4770      	bx	lr
    3728:	41008000 	.word	0x41008000

0000372c <SerialDebug_CLOCK_init>:
    372c:	4b06      	ldr	r3, [pc, #24]	; (3748 <SerialDebug_CLOCK_init+0x1c>)
    372e:	2240      	movs	r2, #64	; 0x40
    3730:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    3734:	224a      	movs	r2, #74	; 0x4a
    3736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    373a:	4a04      	ldr	r2, [pc, #16]	; (374c <SerialDebug_CLOCK_init+0x20>)
    373c:	6a13      	ldr	r3, [r2, #32]
    373e:	f043 0302 	orr.w	r3, r3, #2
    3742:	6213      	str	r3, [r2, #32]
    3744:	4770      	bx	lr
    3746:	bf00      	nop
    3748:	40001c00 	.word	0x40001c00
    374c:	40000800 	.word	0x40000800

00003750 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    3750:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    3752:	4b03      	ldr	r3, [pc, #12]	; (3760 <SerialDebug_init+0x10>)
    3754:	4798      	blx	r3
	SerialDebugPrintInit();
    3756:	4b03      	ldr	r3, [pc, #12]	; (3764 <SerialDebug_init+0x14>)
    3758:	4798      	blx	r3
	SerialDebug_PORT_init();
    375a:	4b03      	ldr	r3, [pc, #12]	; (3768 <SerialDebug_init+0x18>)
    375c:	4798      	blx	r3
    375e:	bd08      	pop	{r3, pc}
    3760:	0000372d 	.word	0x0000372d
    3764:	000030d1 	.word	0x000030d1
    3768:	000036e5 	.word	0x000036e5

0000376c <delay_driver_init>:
}

void delay_driver_init(void)
{
    376c:	b508      	push	{r3, lr}
	delay_init(SysTick);
    376e:	4802      	ldr	r0, [pc, #8]	; (3778 <delay_driver_init+0xc>)
    3770:	4b02      	ldr	r3, [pc, #8]	; (377c <delay_driver_init+0x10>)
    3772:	4798      	blx	r3
    3774:	bd08      	pop	{r3, pc}
    3776:	bf00      	nop
    3778:	e000e010 	.word	0xe000e010
    377c:	00003971 	.word	0x00003971

00003780 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    3780:	4a02      	ldr	r2, [pc, #8]	; (378c <WDT_0_CLOCK_init+0xc>)
    3782:	6953      	ldr	r3, [r2, #20]
    3784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3788:	6153      	str	r3, [r2, #20]
    378a:	4770      	bx	lr
    378c:	40000800 	.word	0x40000800

00003790 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    3790:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    3792:	4b06      	ldr	r3, [pc, #24]	; (37ac <WDT_0_init+0x1c>)
    3794:	4798      	blx	r3
	ASSERT(wdt && hw);
    3796:	2252      	movs	r2, #82	; 0x52
    3798:	4905      	ldr	r1, [pc, #20]	; (37b0 <WDT_0_init+0x20>)
    379a:	2001      	movs	r0, #1
    379c:	4b05      	ldr	r3, [pc, #20]	; (37b4 <WDT_0_init+0x24>)
    379e:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    37a0:	4805      	ldr	r0, [pc, #20]	; (37b8 <WDT_0_init+0x28>)
    37a2:	4b06      	ldr	r3, [pc, #24]	; (37bc <WDT_0_init+0x2c>)
    37a4:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    37a6:	4b06      	ldr	r3, [pc, #24]	; (37c0 <WDT_0_init+0x30>)
    37a8:	4798      	blx	r3
    37aa:	bd08      	pop	{r3, pc}
    37ac:	00003781 	.word	0x00003781
    37b0:	00008e64 	.word	0x00008e64
    37b4:	000039a5 	.word	0x000039a5
    37b8:	20003e7c 	.word	0x20003e7c
    37bc:	40002000 	.word	0x40002000
    37c0:	00004589 	.word	0x00004589

000037c4 <system_init>:
		//DEBUG_PRINT("WDT Failed to initialize");
	}
}

void system_init(void)
{
    37c4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    37c6:	4b06      	ldr	r3, [pc, #24]	; (37e0 <system_init+0x1c>)
    37c8:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    37ca:	4b06      	ldr	r3, [pc, #24]	; (37e4 <system_init+0x20>)
    37cc:	4798      	blx	r3

	//AC_0_init();

	ADC_0_init();
    37ce:	4b06      	ldr	r3, [pc, #24]	; (37e8 <system_init+0x24>)
    37d0:	4798      	blx	r3

	//EVENT_SYSTEM_0_init();

	//FLASH_0_init();

	SerialDebug_init();
    37d2:	4b06      	ldr	r3, [pc, #24]	; (37ec <system_init+0x28>)
    37d4:	4798      	blx	r3
	
	ModemData_init();
    37d6:	4b06      	ldr	r3, [pc, #24]	; (37f0 <system_init+0x2c>)
    37d8:	4798      	blx	r3

	//TIMER_6_init();

	//TIMER_7_init();
	
	WDT_0_init();
    37da:	4b06      	ldr	r3, [pc, #24]	; (37f4 <system_init+0x30>)
    37dc:	4798      	blx	r3
    37de:	bd08      	pop	{r3, pc}
    37e0:	00003d79 	.word	0x00003d79
    37e4:	0000376d 	.word	0x0000376d
    37e8:	00003631 	.word	0x00003631
    37ec:	00003751 	.word	0x00003751
    37f0:	000036c9 	.word	0x000036c9
    37f4:	00003791 	.word	0x00003791

000037f8 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    37f8:	b538      	push	{r3, r4, r5, lr}
    37fa:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    37fc:	4605      	mov	r5, r0
    37fe:	b158      	cbz	r0, 3818 <adc_sync_init+0x20>
    3800:	1c08      	adds	r0, r1, #0
    3802:	bf18      	it	ne
    3804:	2001      	movne	r0, #1
    3806:	2243      	movs	r2, #67	; 0x43
    3808:	4904      	ldr	r1, [pc, #16]	; (381c <adc_sync_init+0x24>)
    380a:	4b05      	ldr	r3, [pc, #20]	; (3820 <adc_sync_init+0x28>)
    380c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    380e:	4621      	mov	r1, r4
    3810:	4628      	mov	r0, r5
    3812:	4b04      	ldr	r3, [pc, #16]	; (3824 <adc_sync_init+0x2c>)
    3814:	4798      	blx	r3
}
    3816:	bd38      	pop	{r3, r4, r5, pc}
    3818:	2000      	movs	r0, #0
    381a:	e7f4      	b.n	3806 <adc_sync_init+0xe>
    381c:	00008f10 	.word	0x00008f10
    3820:	000039a5 	.word	0x000039a5
    3824:	00003bc1 	.word	0x00003bc1

00003828 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    3828:	b538      	push	{r3, r4, r5, lr}
    382a:	460d      	mov	r5, r1
	ASSERT(descr);
    382c:	4604      	mov	r4, r0
    382e:	2258      	movs	r2, #88	; 0x58
    3830:	4905      	ldr	r1, [pc, #20]	; (3848 <adc_sync_enable_channel+0x20>)
    3832:	3000      	adds	r0, #0
    3834:	bf18      	it	ne
    3836:	2001      	movne	r0, #1
    3838:	4b04      	ldr	r3, [pc, #16]	; (384c <adc_sync_enable_channel+0x24>)
    383a:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
    383c:	4629      	mov	r1, r5
    383e:	4620      	mov	r0, r4
    3840:	4b03      	ldr	r3, [pc, #12]	; (3850 <adc_sync_enable_channel+0x28>)
    3842:	4798      	blx	r3

	return ERR_NONE;
}
    3844:	2000      	movs	r0, #0
    3846:	bd38      	pop	{r3, r4, r5, pc}
    3848:	00008f10 	.word	0x00008f10
    384c:	000039a5 	.word	0x000039a5
    3850:	00003cb9 	.word	0x00003cb9

00003854 <adc_sync_disable_channel>:

/**
 * \brief Disable ADC
 */
int32_t adc_sync_disable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    3854:	b538      	push	{r3, r4, r5, lr}
    3856:	460d      	mov	r5, r1
	ASSERT(descr);
    3858:	4604      	mov	r4, r0
    385a:	2263      	movs	r2, #99	; 0x63
    385c:	4905      	ldr	r1, [pc, #20]	; (3874 <adc_sync_disable_channel+0x20>)
    385e:	3000      	adds	r0, #0
    3860:	bf18      	it	ne
    3862:	2001      	movne	r0, #1
    3864:	4b04      	ldr	r3, [pc, #16]	; (3878 <adc_sync_disable_channel+0x24>)
    3866:	4798      	blx	r3
	_adc_sync_disable_channel(&descr->device, channel);
    3868:	4629      	mov	r1, r5
    386a:	4620      	mov	r0, r4
    386c:	4b03      	ldr	r3, [pc, #12]	; (387c <adc_sync_disable_channel+0x28>)
    386e:	4798      	blx	r3
	return ERR_NONE;
}
    3870:	2000      	movs	r0, #0
    3872:	bd38      	pop	{r3, r4, r5, pc}
    3874:	00008f10 	.word	0x00008f10
    3878:	000039a5 	.word	0x000039a5
    387c:	00003ccf 	.word	0x00003ccf

00003880 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
    3880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3884:	460d      	mov	r5, r1
    3886:	4691      	mov	r9, r2
    3888:	469a      	mov	sl, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
    388a:	4680      	mov	r8, r0
    388c:	b1e0      	cbz	r0, 38c8 <adc_sync_read_channel+0x48>
    388e:	b1ea      	cbz	r2, 38cc <adc_sync_read_channel+0x4c>
    3890:	1c18      	adds	r0, r3, #0
    3892:	bf18      	it	ne
    3894:	2001      	movne	r0, #1
    3896:	4f1c      	ldr	r7, [pc, #112]	; (3908 <adc_sync_read_channel+0x88>)
    3898:	2271      	movs	r2, #113	; 0x71
    389a:	4639      	mov	r1, r7
    389c:	4e1b      	ldr	r6, [pc, #108]	; (390c <adc_sync_read_channel+0x8c>)
    389e:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
    38a0:	4644      	mov	r4, r8
    38a2:	4640      	mov	r0, r8
    38a4:	4b1a      	ldr	r3, [pc, #104]	; (3910 <adc_sync_read_channel+0x90>)
    38a6:	4798      	blx	r3
    38a8:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
    38aa:	fb9a f0f0 	sdiv	r0, sl, r0
    38ae:	fb08 a010 	mls	r0, r8, r0, sl
    38b2:	2273      	movs	r2, #115	; 0x73
    38b4:	4639      	mov	r1, r7
    38b6:	fab0 f080 	clz	r0, r0
    38ba:	0940      	lsrs	r0, r0, #5
    38bc:	47b0      	blx	r6
	uint16_t offset = 0;
    38be:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
    38c0:	f8df b058 	ldr.w	fp, [pc, #88]	; 391c <adc_sync_read_channel+0x9c>

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    38c4:	4e13      	ldr	r6, [pc, #76]	; (3914 <adc_sync_read_channel+0x94>)
    38c6:	e007      	b.n	38d8 <adc_sync_read_channel+0x58>
	ASSERT(descr && buffer && length);
    38c8:	2000      	movs	r0, #0
    38ca:	e7e4      	b.n	3896 <adc_sync_read_channel+0x16>
    38cc:	2000      	movs	r0, #0
    38ce:	e7e2      	b.n	3896 <adc_sync_read_channel+0x16>
    38d0:	4447      	add	r7, r8
    38d2:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
    38d4:	45ba      	cmp	sl, r7
    38d6:	d914      	bls.n	3902 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
    38d8:	4620      	mov	r0, r4
    38da:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    38dc:	4629      	mov	r1, r5
    38de:	4620      	mov	r0, r4
    38e0:	47b0      	blx	r6
    38e2:	2800      	cmp	r0, #0
    38e4:	d0fa      	beq.n	38dc <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
    38e6:	4629      	mov	r1, r5
    38e8:	4620      	mov	r0, r4
    38ea:	4b0b      	ldr	r3, [pc, #44]	; (3918 <adc_sync_read_channel+0x98>)
    38ec:	4798      	blx	r3
		buffer[offset] = result;
    38ee:	f809 0007 	strb.w	r0, [r9, r7]
		if (1 < data_size) {
    38f2:	f1b8 0f01 	cmp.w	r8, #1
    38f6:	d9eb      	bls.n	38d0 <adc_sync_read_channel+0x50>
			buffer[offset + 1] = result >> 8;
    38f8:	eb09 0307 	add.w	r3, r9, r7
    38fc:	0a00      	lsrs	r0, r0, #8
    38fe:	7058      	strb	r0, [r3, #1]
    3900:	e7e6      	b.n	38d0 <adc_sync_read_channel+0x50>

	return offset;
}
    3902:	4638      	mov	r0, r7
    3904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3908:	00008f10 	.word	0x00008f10
    390c:	000039a5 	.word	0x000039a5
    3910:	00003ce7 	.word	0x00003ce7
    3914:	00003cf9 	.word	0x00003cf9
    3918:	00003d1b 	.word	0x00003d1b
    391c:	00003d05 	.word	0x00003d05

00003920 <adc_sync_set_inputs>:
/**
 * \brief Set ADC input source of a channel
 */
int32_t adc_sync_set_inputs(struct adc_sync_descriptor *const descr, const adc_pos_input_t pos_input,
                            const adc_neg_input_t neg_input, const uint8_t channel)
{
    3920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3922:	460d      	mov	r5, r1
    3924:	4616      	mov	r6, r2
    3926:	461f      	mov	r7, r3
	ASSERT(descr);
    3928:	4604      	mov	r4, r0
    392a:	22a3      	movs	r2, #163	; 0xa3
    392c:	4906      	ldr	r1, [pc, #24]	; (3948 <adc_sync_set_inputs+0x28>)
    392e:	3000      	adds	r0, #0
    3930:	bf18      	it	ne
    3932:	2001      	movne	r0, #1
    3934:	4b05      	ldr	r3, [pc, #20]	; (394c <adc_sync_set_inputs+0x2c>)
    3936:	4798      	blx	r3
	_adc_sync_set_inputs(&descr->device, pos_input, neg_input, channel);
    3938:	463b      	mov	r3, r7
    393a:	4632      	mov	r2, r6
    393c:	4629      	mov	r1, r5
    393e:	4620      	mov	r0, r4
    3940:	4c03      	ldr	r4, [pc, #12]	; (3950 <adc_sync_set_inputs+0x30>)
    3942:	47a0      	blx	r4

	return ERR_NONE;
}
    3944:	2000      	movs	r0, #0
    3946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3948:	00008f10 	.word	0x00008f10
    394c:	000039a5 	.word	0x000039a5
    3950:	00003d25 	.word	0x00003d25

00003954 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3954:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3958:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    395a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    395c:	f3bf 8f5f 	dmb	sy
    3960:	4770      	bx	lr

00003962 <atomic_leave_critical>:
    3962:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    3966:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3968:	f383 8810 	msr	PRIMASK, r3
    396c:	4770      	bx	lr
	...

00003970 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    3970:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    3972:	4b02      	ldr	r3, [pc, #8]	; (397c <delay_init+0xc>)
    3974:	6018      	str	r0, [r3, #0]
    3976:	4b02      	ldr	r3, [pc, #8]	; (3980 <delay_init+0x10>)
    3978:	4798      	blx	r3
    397a:	bd08      	pop	{r3, pc}
    397c:	20000620 	.word	0x20000620
    3980:	000043dd 	.word	0x000043dd

00003984 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3984:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    3986:	4b04      	ldr	r3, [pc, #16]	; (3998 <delay_ms+0x14>)
    3988:	681c      	ldr	r4, [r3, #0]
    398a:	4b04      	ldr	r3, [pc, #16]	; (399c <delay_ms+0x18>)
    398c:	4798      	blx	r3
    398e:	4601      	mov	r1, r0
    3990:	4620      	mov	r0, r4
    3992:	4b03      	ldr	r3, [pc, #12]	; (39a0 <delay_ms+0x1c>)
    3994:	4798      	blx	r3
    3996:	bd10      	pop	{r4, pc}
    3998:	20000620 	.word	0x20000620
    399c:	00003d6d 	.word	0x00003d6d
    39a0:	000043f1 	.word	0x000043f1

000039a4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    39a4:	b900      	cbnz	r0, 39a8 <assert+0x4>
		__asm("BKPT #0");
    39a6:	be00      	bkpt	0x0000
    39a8:	4770      	bx	lr
	...

000039ac <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    39ac:	b570      	push	{r4, r5, r6, lr}
    39ae:	460e      	mov	r6, r1
    39b0:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    39b2:	4604      	mov	r4, r0
    39b4:	b178      	cbz	r0, 39d6 <ringbuffer_init+0x2a>
    39b6:	b181      	cbz	r1, 39da <ringbuffer_init+0x2e>
    39b8:	b1a2      	cbz	r2, 39e4 <ringbuffer_init+0x38>
    39ba:	2001      	movs	r0, #1
    39bc:	2232      	movs	r2, #50	; 0x32
    39be:	490d      	ldr	r1, [pc, #52]	; (39f4 <ringbuffer_init+0x48>)
    39c0:	4b0d      	ldr	r3, [pc, #52]	; (39f8 <ringbuffer_init+0x4c>)
    39c2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    39c4:	1e6b      	subs	r3, r5, #1
    39c6:	421d      	tst	r5, r3
    39c8:	d109      	bne.n	39de <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    39ca:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    39cc:	2000      	movs	r0, #0
    39ce:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    39d0:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    39d2:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    39d4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    39d6:	2000      	movs	r0, #0
    39d8:	e7f0      	b.n	39bc <ringbuffer_init+0x10>
    39da:	2000      	movs	r0, #0
    39dc:	e7ee      	b.n	39bc <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    39de:	f06f 000c 	mvn.w	r0, #12
    39e2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    39e4:	2232      	movs	r2, #50	; 0x32
    39e6:	4903      	ldr	r1, [pc, #12]	; (39f4 <ringbuffer_init+0x48>)
    39e8:	2000      	movs	r0, #0
    39ea:	4b03      	ldr	r3, [pc, #12]	; (39f8 <ringbuffer_init+0x4c>)
    39ec:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    39ee:	1e6b      	subs	r3, r5, #1
    39f0:	e7eb      	b.n	39ca <ringbuffer_init+0x1e>
    39f2:	bf00      	nop
    39f4:	00008f2c 	.word	0x00008f2c
    39f8:	000039a5 	.word	0x000039a5

000039fc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    39fc:	b538      	push	{r3, r4, r5, lr}
    39fe:	460d      	mov	r5, r1
	ASSERT(rb && data);
    3a00:	4604      	mov	r4, r0
    3a02:	b1a0      	cbz	r0, 3a2e <ringbuffer_get+0x32>
    3a04:	1c08      	adds	r0, r1, #0
    3a06:	bf18      	it	ne
    3a08:	2001      	movne	r0, #1
    3a0a:	224a      	movs	r2, #74	; 0x4a
    3a0c:	490a      	ldr	r1, [pc, #40]	; (3a38 <ringbuffer_get+0x3c>)
    3a0e:	4b0b      	ldr	r3, [pc, #44]	; (3a3c <ringbuffer_get+0x40>)
    3a10:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    3a12:	68a3      	ldr	r3, [r4, #8]
    3a14:	68e2      	ldr	r2, [r4, #12]
    3a16:	429a      	cmp	r2, r3
    3a18:	d00b      	beq.n	3a32 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    3a1a:	6862      	ldr	r2, [r4, #4]
    3a1c:	4013      	ands	r3, r2
    3a1e:	6822      	ldr	r2, [r4, #0]
    3a20:	5cd3      	ldrb	r3, [r2, r3]
    3a22:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    3a24:	68a3      	ldr	r3, [r4, #8]
    3a26:	3301      	adds	r3, #1
    3a28:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    3a2a:	2000      	movs	r0, #0
    3a2c:	bd38      	pop	{r3, r4, r5, pc}
    3a2e:	2000      	movs	r0, #0
    3a30:	e7eb      	b.n	3a0a <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    3a32:	f06f 0009 	mvn.w	r0, #9
}
    3a36:	bd38      	pop	{r3, r4, r5, pc}
    3a38:	00008f2c 	.word	0x00008f2c
    3a3c:	000039a5 	.word	0x000039a5

00003a40 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    3a40:	b538      	push	{r3, r4, r5, lr}
    3a42:	460d      	mov	r5, r1
	ASSERT(rb);
    3a44:	4604      	mov	r4, r0
    3a46:	225b      	movs	r2, #91	; 0x5b
    3a48:	490b      	ldr	r1, [pc, #44]	; (3a78 <ringbuffer_put+0x38>)
    3a4a:	3000      	adds	r0, #0
    3a4c:	bf18      	it	ne
    3a4e:	2001      	movne	r0, #1
    3a50:	4b0a      	ldr	r3, [pc, #40]	; (3a7c <ringbuffer_put+0x3c>)
    3a52:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    3a54:	68e3      	ldr	r3, [r4, #12]
    3a56:	6862      	ldr	r2, [r4, #4]
    3a58:	4013      	ands	r3, r2
    3a5a:	6822      	ldr	r2, [r4, #0]
    3a5c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    3a5e:	68e3      	ldr	r3, [r4, #12]
    3a60:	6861      	ldr	r1, [r4, #4]
    3a62:	68a2      	ldr	r2, [r4, #8]
    3a64:	1a9a      	subs	r2, r3, r2
    3a66:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    3a68:	bf84      	itt	hi
    3a6a:	1a59      	subhi	r1, r3, r1
    3a6c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    3a6e:	3301      	adds	r3, #1
    3a70:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    3a72:	2000      	movs	r0, #0
    3a74:	bd38      	pop	{r3, r4, r5, pc}
    3a76:	bf00      	nop
    3a78:	00008f2c 	.word	0x00008f2c
    3a7c:	000039a5 	.word	0x000039a5

00003a80 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    3a80:	b510      	push	{r4, lr}
	ASSERT(rb);
    3a82:	4604      	mov	r4, r0
    3a84:	2271      	movs	r2, #113	; 0x71
    3a86:	4905      	ldr	r1, [pc, #20]	; (3a9c <ringbuffer_num+0x1c>)
    3a88:	3000      	adds	r0, #0
    3a8a:	bf18      	it	ne
    3a8c:	2001      	movne	r0, #1
    3a8e:	4b04      	ldr	r3, [pc, #16]	; (3aa0 <ringbuffer_num+0x20>)
    3a90:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    3a92:	68e0      	ldr	r0, [r4, #12]
    3a94:	68a3      	ldr	r3, [r4, #8]
}
    3a96:	1ac0      	subs	r0, r0, r3
    3a98:	bd10      	pop	{r4, pc}
    3a9a:	bf00      	nop
    3a9c:	00008f2c 	.word	0x00008f2c
    3aa0:	000039a5 	.word	0x000039a5

00003aa4 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    3aa4:	b510      	push	{r4, lr}
	ASSERT(rb);
    3aa6:	4604      	mov	r4, r0
    3aa8:	227b      	movs	r2, #123	; 0x7b
    3aaa:	4905      	ldr	r1, [pc, #20]	; (3ac0 <ringbuffer_flush+0x1c>)
    3aac:	3000      	adds	r0, #0
    3aae:	bf18      	it	ne
    3ab0:	2001      	movne	r0, #1
    3ab2:	4b04      	ldr	r3, [pc, #16]	; (3ac4 <ringbuffer_flush+0x20>)
    3ab4:	4798      	blx	r3

	rb->read_index = rb->write_index;
    3ab6:	68e3      	ldr	r3, [r4, #12]
    3ab8:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    3aba:	2000      	movs	r0, #0
    3abc:	bd10      	pop	{r4, pc}
    3abe:	bf00      	nop
    3ac0:	00008f2c 	.word	0x00008f2c
    3ac4:	000039a5 	.word	0x000039a5

00003ac8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    3ac8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    3aca:	4a06      	ldr	r2, [pc, #24]	; (3ae4 <_sbrk+0x1c>)
    3acc:	6812      	ldr	r2, [r2, #0]
    3ace:	b122      	cbz	r2, 3ada <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3ad0:	4a04      	ldr	r2, [pc, #16]	; (3ae4 <_sbrk+0x1c>)
    3ad2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3ad4:	4403      	add	r3, r0
    3ad6:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    3ad8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3ada:	4903      	ldr	r1, [pc, #12]	; (3ae8 <_sbrk+0x20>)
    3adc:	4a01      	ldr	r2, [pc, #4]	; (3ae4 <_sbrk+0x1c>)
    3ade:	6011      	str	r1, [r2, #0]
    3ae0:	e7f6      	b.n	3ad0 <_sbrk+0x8>
    3ae2:	bf00      	nop
    3ae4:	20000624 	.word	0x20000624
    3ae8:	20013f80 	.word	0x20013f80

00003aec <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    3aec:	6940      	ldr	r0, [r0, #20]
    3aee:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    3af2:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    3af6:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    3af8:	0040      	lsls	r0, r0, #1
    3afa:	3076      	adds	r0, #118	; 0x76
}
    3afc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    3b00:	4770      	bx	lr
	...

00003b04 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3b04:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3b06:	f013 0f01 	tst.w	r3, #1
    3b0a:	d1fb      	bne.n	3b04 <_adc_init>
    3b0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3b0e:	f013 0f03 	tst.w	r3, #3
    3b12:	d1fb      	bne.n	3b0c <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    3b14:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    3b16:	f013 0f02 	tst.w	r3, #2
    3b1a:	d130      	bne.n	3b7e <_adc_init+0x7a>
{
    3b1c:	b410      	push	{r4}
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3b1e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3b20:	f013 0f01 	tst.w	r3, #1
    3b24:	d1fb      	bne.n	3b1e <_adc_init+0x1a>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    3b26:	8803      	ldrh	r3, [r0, #0]
    3b28:	b29b      	uxth	r3, r3
    3b2a:	f043 0301 	orr.w	r3, r3, #1
    3b2e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3b30:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3b32:	f013 0f01 	tst.w	r3, #1
    3b36:	d1fb      	bne.n	3b30 <_adc_init+0x2c>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	ADC0->CTRLB.reg = 0x0001; //12 bit, left adjusted, single conversion
    3b38:	4b12      	ldr	r3, [pc, #72]	; (3b84 <_adc_init+0x80>)
    3b3a:	2201      	movs	r2, #1
    3b3c:	80da      	strh	r2, [r3, #6]
	//hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
	
	ADC0->REFCTRL.reg = 0x03; // REFCOMP disable, VDDANA
    3b3e:	2203      	movs	r2, #3
    3b40:	721a      	strb	r2, [r3, #8]
	//hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
	
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    3b42:	2416      	movs	r4, #22
    3b44:	4a10      	ldr	r2, [pc, #64]	; (3b88 <_adc_init+0x84>)
    3b46:	fb04 2101 	mla	r1, r4, r1, r2
    3b4a:	79ca      	ldrb	r2, [r1, #7]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    3b4c:	7082      	strb	r2, [r0, #2]
	
	ADC0->INPUTCTRL.reg = 0x1800; // internal ground, single ended mode
    3b4e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    3b52:	809a      	strh	r2, [r3, #4]
	//hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
	
	//ADC0->AVGCTRL.reg = 0x22; //4 sample average
	ADC0->AVGCTRL.reg = 0x49; //512 sample average
    3b54:	2249      	movs	r2, #73	; 0x49
    3b56:	729a      	strb	r2, [r3, #10]
	//hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
	
	ADC0->SAMPCTRL.reg = 0x06;
    3b58:	2206      	movs	r2, #6
    3b5a:	72da      	strb	r2, [r3, #11]
	//hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
	
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    3b5c:	898a      	ldrh	r2, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    3b5e:	8182      	strh	r2, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    3b60:	89ca      	ldrh	r2, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    3b62:	81c2      	strh	r2, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    3b64:	8a0a      	ldrh	r2, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    3b66:	8202      	strh	r2, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    3b68:	8a4a      	ldrh	r2, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    3b6a:	8242      	strh	r2, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    3b6c:	7d0a      	ldrb	r2, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    3b6e:	70c2      	strb	r2, [r0, #3]
	//hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
	
	//R2R - 1
	//DIV64 - 5
	//ENABLE - 1	 
	ADC0->CTRLA.reg = 0x85C2;
    3b70:	f248 52c2 	movw	r2, #34242	; 0x85c2
    3b74:	801a      	strh	r2, [r3, #0]

	return ERR_NONE;
    3b76:	2000      	movs	r0, #0
}
    3b78:	f85d 4b04 	ldr.w	r4, [sp], #4
    3b7c:	4770      	bx	lr
		return ERR_DENIED;
    3b7e:	f06f 0010 	mvn.w	r0, #16
    3b82:	4770      	bx	lr
    3b84:	43001c00 	.word	0x43001c00
    3b88:	00008f50 	.word	0x00008f50

00003b8c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    3b8c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    3b90:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    3b94:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    3b98:	b148      	cbz	r0, 3bae <_adc_get_regs+0x22>
    3b9a:	2801      	cmp	r0, #1
    3b9c:	d009      	beq.n	3bb2 <_adc_get_regs+0x26>
{
    3b9e:	b508      	push	{r3, lr}
	ASSERT(false);
    3ba0:	2291      	movs	r2, #145	; 0x91
    3ba2:	4905      	ldr	r1, [pc, #20]	; (3bb8 <_adc_get_regs+0x2c>)
    3ba4:	2000      	movs	r0, #0
    3ba6:	4b05      	ldr	r3, [pc, #20]	; (3bbc <_adc_get_regs+0x30>)
    3ba8:	4798      	blx	r3
	return 0;
    3baa:	2000      	movs	r0, #0
    3bac:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    3bae:	2000      	movs	r0, #0
    3bb0:	4770      	bx	lr
    3bb2:	2001      	movs	r0, #1
    3bb4:	4770      	bx	lr
    3bb6:	bf00      	nop
    3bb8:	00008f7c 	.word	0x00008f7c
    3bbc:	000039a5 	.word	0x000039a5

00003bc0 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    3bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bc4:	460d      	mov	r5, r1
	int32_t init_status;

	ASSERT(device);
    3bc6:	4604      	mov	r4, r0
    3bc8:	22e8      	movs	r2, #232	; 0xe8
    3bca:	4935      	ldr	r1, [pc, #212]	; (3ca0 <_adc_sync_init+0xe0>)
    3bcc:	3000      	adds	r0, #0
    3bce:	bf18      	it	ne
    3bd0:	2001      	movne	r0, #1
    3bd2:	4b34      	ldr	r3, [pc, #208]	; (3ca4 <_adc_sync_init+0xe4>)
    3bd4:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    3bd6:	4628      	mov	r0, r5
    3bd8:	4b33      	ldr	r3, [pc, #204]	; (3ca8 <_adc_sync_init+0xe8>)
    3bda:	4798      	blx	r3
    3bdc:	4601      	mov	r1, r0
    3bde:	4628      	mov	r0, r5
    3be0:	4b32      	ldr	r3, [pc, #200]	; (3cac <_adc_sync_init+0xec>)
    3be2:	4798      	blx	r3
	if (init_status) {
    3be4:	4607      	mov	r7, r0
    3be6:	2800      	cmp	r0, #0
    3be8:	d157      	bne.n	3c9a <_adc_sync_init+0xda>
		return init_status;
	}
	device->hw = hw;
    3bea:	6025      	str	r5, [r4, #0]
	_adc_init_irq_param(hw, device);
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    3bec:	4620      	mov	r0, r4
    3bee:	4e30      	ldr	r6, [pc, #192]	; (3cb0 <_adc_sync_init+0xf0>)
    3bf0:	47b0      	blx	r6
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3bf2:	0943      	lsrs	r3, r0, #5
    3bf4:	f000 001f 	and.w	r0, r0, #31
    3bf8:	2501      	movs	r5, #1
    3bfa:	fa05 f000 	lsl.w	r0, r5, r0
    3bfe:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3cb4 <_adc_sync_init+0xf4>
    3c02:	3320      	adds	r3, #32
    3c04:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3c08:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c0c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    3c10:	4620      	mov	r0, r4
    3c12:	47b0      	blx	r6
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3c14:	0943      	lsrs	r3, r0, #5
    3c16:	f000 001f 	and.w	r0, r0, #31
    3c1a:	fa05 f000 	lsl.w	r0, r5, r0
    3c1e:	3360      	adds	r3, #96	; 0x60
    3c20:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    3c24:	4620      	mov	r0, r4
    3c26:	47b0      	blx	r6
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3c28:	0943      	lsrs	r3, r0, #5
    3c2a:	f000 001f 	and.w	r0, r0, #31
    3c2e:	4085      	lsls	r5, r0
    3c30:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    3c34:	4620      	mov	r0, r4
    3c36:	47b0      	blx	r6
    3c38:	3001      	adds	r0, #1
    3c3a:	b280      	uxth	r0, r0
    3c3c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3c3e:	2b00      	cmp	r3, #0
    3c40:	db2b      	blt.n	3c9a <_adc_sync_init+0xda>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3c42:	095b      	lsrs	r3, r3, #5
    3c44:	f000 001f 	and.w	r0, r0, #31
    3c48:	2201      	movs	r2, #1
    3c4a:	fa02 f000 	lsl.w	r0, r2, r0
    3c4e:	3320      	adds	r3, #32
    3c50:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c58:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    3c5c:	4620      	mov	r0, r4
    3c5e:	47b0      	blx	r6
    3c60:	3001      	adds	r0, #1
    3c62:	b280      	uxth	r0, r0
    3c64:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3c66:	2b00      	cmp	r3, #0
    3c68:	db17      	blt.n	3c9a <_adc_sync_init+0xda>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3c6a:	095b      	lsrs	r3, r3, #5
    3c6c:	f000 001f 	and.w	r0, r0, #31
    3c70:	2201      	movs	r2, #1
    3c72:	fa02 f000 	lsl.w	r0, r2, r0
    3c76:	3360      	adds	r3, #96	; 0x60
    3c78:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    3c7c:	4620      	mov	r0, r4
    3c7e:	47b0      	blx	r6
    3c80:	3001      	adds	r0, #1
    3c82:	b280      	uxth	r0, r0
    3c84:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3c86:	2b00      	cmp	r3, #0
    3c88:	db07      	blt.n	3c9a <_adc_sync_init+0xda>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3c8a:	095b      	lsrs	r3, r3, #5
    3c8c:	f000 001f 	and.w	r0, r0, #31
    3c90:	2201      	movs	r2, #1
    3c92:	fa02 f000 	lsl.w	r0, r2, r0
    3c96:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	return ERR_NONE;
}
    3c9a:	4638      	mov	r0, r7
    3c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ca0:	00008f7c 	.word	0x00008f7c
    3ca4:	000039a5 	.word	0x000039a5
    3ca8:	00003b8d 	.word	0x00003b8d
    3cac:	00003b05 	.word	0x00003b05
    3cb0:	00003aed 	.word	0x00003aed
    3cb4:	e000e100 	.word	0xe000e100

00003cb8 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    3cb8:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3cba:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3cbc:	f013 0f03 	tst.w	r3, #3
    3cc0:	d1fb      	bne.n	3cba <_adc_sync_enable_channel+0x2>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3cc2:	8813      	ldrh	r3, [r2, #0]
    3cc4:	b29b      	uxth	r3, r3
    3cc6:	f043 0302 	orr.w	r3, r3, #2
    3cca:	8013      	strh	r3, [r2, #0]
    3ccc:	4770      	bx	lr

00003cce <_adc_sync_disable_channel>:
 */
void _adc_sync_disable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_clear_CTRLA_ENABLE_bit(device->hw);
    3cce:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3cd0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3cd2:	f013 0f03 	tst.w	r3, #3
    3cd6:	d1fb      	bne.n	3cd0 <_adc_sync_disable_channel+0x2>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    3cd8:	8813      	ldrh	r3, [r2, #0]
    3cda:	f023 0302 	bic.w	r3, r3, #2
    3cde:	041b      	lsls	r3, r3, #16
    3ce0:	0c1b      	lsrs	r3, r3, #16
    3ce2:	8013      	strh	r3, [r2, #0]
    3ce4:	4770      	bx	lr

00003ce6 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    3ce6:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    3ce8:	88db      	ldrh	r3, [r3, #6]
    3cea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    3cee:	2b03      	cmp	r3, #3
}
    3cf0:	bf0c      	ite	eq
    3cf2:	2001      	moveq	r0, #1
    3cf4:	2002      	movne	r0, #2
    3cf6:	4770      	bx	lr

00003cf8 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    3cf8:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    3cfa:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    3cfe:	f000 0001 	and.w	r0, r0, #1
    3d02:	4770      	bx	lr

00003d04 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    3d04:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3d06:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3d0c:	2b00      	cmp	r3, #0
    3d0e:	d1fa      	bne.n	3d06 <_adc_sync_convert+0x2>

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    3d10:	7d13      	ldrb	r3, [r2, #20]
    3d12:	f043 0302 	orr.w	r3, r3, #2
    3d16:	7513      	strb	r3, [r2, #20]
    3d18:	4770      	bx	lr

00003d1a <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    3d1a:	6803      	ldr	r3, [r0, #0]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    3d1c:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    3d20:	b280      	uxth	r0, r0
    3d22:	4770      	bx	lr

00003d24 <_adc_sync_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_sync_set_inputs(struct _adc_sync_device *const device, const adc_pos_input_t pos_input,
                          const adc_neg_input_t neg_input, const uint8_t channel)
{
    3d24:	b410      	push	{r4}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
    3d26:	6804      	ldr	r4, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3d28:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3d2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d1fa      	bne.n	3d28 <_adc_sync_set_inputs+0x4>
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    3d32:	88a3      	ldrh	r3, [r4, #4]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
    3d34:	f023 031f 	bic.w	r3, r3, #31
    3d38:	041b      	lsls	r3, r3, #16
    3d3a:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
    3d3c:	f001 011f 	and.w	r1, r1, #31
    3d40:	430b      	orrs	r3, r1
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    3d42:	80a3      	strh	r3, [r4, #4]
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
    3d44:	6801      	ldr	r1, [r0, #0]
    3d46:	b292      	uxth	r2, r2
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3d48:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    3d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3d4e:	2b00      	cmp	r3, #0
    3d50:	d1fa      	bne.n	3d48 <_adc_sync_set_inputs+0x24>
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    3d52:	888b      	ldrh	r3, [r1, #4]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
    3d54:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3d58:	041b      	lsls	r3, r3, #16
    3d5a:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
    3d5c:	0212      	lsls	r2, r2, #8
    3d5e:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
    3d62:	4313      	orrs	r3, r2
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    3d64:	808b      	strh	r3, [r1, #4]
}
    3d66:	f85d 4b04 	ldr.w	r4, [sp], #4
    3d6a:	4770      	bx	lr

00003d6c <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    3d6c:	f64b 3380 	movw	r3, #48000	; 0xbb80
    3d70:	fb03 f000 	mul.w	r0, r3, r0
    3d74:	4770      	bx	lr
	...

00003d78 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3d78:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3d7a:	4a0c      	ldr	r2, [pc, #48]	; (3dac <_init_chip+0x34>)
    3d7c:	8813      	ldrh	r3, [r2, #0]
    3d7e:	b29b      	uxth	r3, r3
    3d80:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    3d82:	4b0b      	ldr	r3, [pc, #44]	; (3db0 <_init_chip+0x38>)
    3d84:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    3d86:	4b0b      	ldr	r3, [pc, #44]	; (3db4 <_init_chip+0x3c>)
    3d88:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3d8a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3d8e:	4c0a      	ldr	r4, [pc, #40]	; (3db8 <_init_chip+0x40>)
    3d90:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    3d92:	4b0a      	ldr	r3, [pc, #40]	; (3dbc <_init_chip+0x44>)
    3d94:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3d96:	f240 70ff 	movw	r0, #2047	; 0x7ff
    3d9a:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    3d9c:	4a08      	ldr	r2, [pc, #32]	; (3dc0 <_init_chip+0x48>)
    3d9e:	6913      	ldr	r3, [r2, #16]
    3da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3da4:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    3da6:	4b07      	ldr	r3, [pc, #28]	; (3dc4 <_init_chip+0x4c>)
    3da8:	4798      	blx	r3
    3daa:	bd10      	pop	{r4, pc}
    3dac:	41004000 	.word	0x41004000
    3db0:	00004061 	.word	0x00004061
    3db4:	00004001 	.word	0x00004001
    3db8:	00003f59 	.word	0x00003f59
    3dbc:	0000408d 	.word	0x0000408d
    3dc0:	40000800 	.word	0x40000800
    3dc4:	00003e3d 	.word	0x00003e3d

00003dc8 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    3dc8:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    3dca:	4a1a      	ldr	r2, [pc, #104]	; (3e34 <_dmac_handler+0x6c>)
    3dcc:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    3dce:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    3dd2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    3dd6:	4818      	ldr	r0, [pc, #96]	; (3e38 <_dmac_handler+0x70>)
    3dd8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    3ddc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3de0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    3de4:	f012 0f01 	tst.w	r2, #1
    3de8:	d10a      	bne.n	3e00 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    3dea:	011a      	lsls	r2, r3, #4
    3dec:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3df0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3df4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    3df8:	f012 0f02 	tst.w	r2, #2
    3dfc:	d10b      	bne.n	3e16 <_dmac_handler+0x4e>
    3dfe:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    3e00:	011a      	lsls	r2, r3, #4
    3e02:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3e06:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3e0a:	2101      	movs	r1, #1
    3e0c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    3e10:	6843      	ldr	r3, [r0, #4]
    3e12:	4798      	blx	r3
    3e14:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    3e16:	011a      	lsls	r2, r3, #4
    3e18:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3e1c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3e20:	2102      	movs	r1, #2
    3e22:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    3e26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3e2a:	4a03      	ldr	r2, [pc, #12]	; (3e38 <_dmac_handler+0x70>)
    3e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3e30:	4798      	blx	r3
	}
}
    3e32:	e7e4      	b.n	3dfe <_dmac_handler+0x36>
    3e34:	4100a000 	.word	0x4100a000
    3e38:	20000630 	.word	0x20000630

00003e3c <_dma_init>:
{
    3e3c:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    3e3e:	4a33      	ldr	r2, [pc, #204]	; (3f0c <_dma_init+0xd0>)
    3e40:	8813      	ldrh	r3, [r2, #0]
    3e42:	f023 0302 	bic.w	r3, r3, #2
    3e46:	041b      	lsls	r3, r3, #16
    3e48:	0c1b      	lsrs	r3, r3, #16
    3e4a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    3e4c:	8853      	ldrh	r3, [r2, #2]
    3e4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    3e52:	041b      	lsls	r3, r3, #16
    3e54:	0c1b      	lsrs	r3, r3, #16
    3e56:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    3e58:	8813      	ldrh	r3, [r2, #0]
    3e5a:	b29b      	uxth	r3, r3
    3e5c:	f043 0301 	orr.w	r3, r3, #1
    3e60:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    3e62:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    3e64:	f013 0f01 	tst.w	r3, #1
    3e68:	d1fb      	bne.n	3e62 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    3e6a:	4b28      	ldr	r3, [pc, #160]	; (3f0c <_dma_init+0xd0>)
    3e6c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    3e70:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    3e72:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    3e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    3e78:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    3e7a:	2000      	movs	r0, #0
    3e7c:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    3e7e:	4a24      	ldr	r2, [pc, #144]	; (3f10 <_dma_init+0xd4>)
    3e80:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    3e84:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    3e86:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    3e8a:	639a      	str	r2, [r3, #56]	; 0x38
    3e8c:	4b21      	ldr	r3, [pc, #132]	; (3f14 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    3e8e:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    3e92:	681c      	ldr	r4, [r3, #0]
    3e94:	0101      	lsls	r1, r0, #4
    3e96:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    3e9a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    3e9e:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    3ea0:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    3ea2:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    3ea6:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    3ea8:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    3eac:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    3eae:	4429      	add	r1, r5
    3eb0:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    3eb4:	3001      	adds	r0, #1
    3eb6:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    3eb8:	2820      	cmp	r0, #32
    3eba:	d1ea      	bne.n	3e92 <_dma_init+0x56>
    3ebc:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ebe:	2001      	movs	r0, #1
    3ec0:	4915      	ldr	r1, [pc, #84]	; (3f18 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    3ec2:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    3ec4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3ec8:	d00b      	beq.n	3ee2 <_dma_init+0xa6>
    3eca:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    3ecc:	2b24      	cmp	r3, #36	; 0x24
    3ece:	d1f8      	bne.n	3ec2 <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    3ed0:	4a0e      	ldr	r2, [pc, #56]	; (3f0c <_dma_init+0xd0>)
    3ed2:	8813      	ldrh	r3, [r2, #0]
    3ed4:	b29b      	uxth	r3, r3
    3ed6:	f043 0302 	orr.w	r3, r3, #2
    3eda:	8013      	strh	r3, [r2, #0]
}
    3edc:	2000      	movs	r0, #0
    3ede:	bc30      	pop	{r4, r5}
    3ee0:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ee2:	095c      	lsrs	r4, r3, #5
    3ee4:	f002 021f 	and.w	r2, r2, #31
    3ee8:	fa00 f202 	lsl.w	r2, r0, r2
    3eec:	f104 0520 	add.w	r5, r4, #32
    3ef0:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3ef4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ef8:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3efc:	f104 0560 	add.w	r5, r4, #96	; 0x60
    3f00:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f04:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    3f08:	e7df      	b.n	3eca <_dma_init+0x8e>
    3f0a:	bf00      	nop
    3f0c:	4100a000 	.word	0x4100a000
    3f10:	20000630 	.word	0x20000630
    3f14:	00008f94 	.word	0x00008f94
    3f18:	e000e100 	.word	0xe000e100

00003f1c <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    3f1c:	b508      	push	{r3, lr}
	_dmac_handler();
    3f1e:	4b01      	ldr	r3, [pc, #4]	; (3f24 <DMAC_0_Handler+0x8>)
    3f20:	4798      	blx	r3
    3f22:	bd08      	pop	{r3, pc}
    3f24:	00003dc9 	.word	0x00003dc9

00003f28 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    3f28:	b508      	push	{r3, lr}
	_dmac_handler();
    3f2a:	4b01      	ldr	r3, [pc, #4]	; (3f30 <DMAC_1_Handler+0x8>)
    3f2c:	4798      	blx	r3
    3f2e:	bd08      	pop	{r3, pc}
    3f30:	00003dc9 	.word	0x00003dc9

00003f34 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    3f34:	b508      	push	{r3, lr}
	_dmac_handler();
    3f36:	4b01      	ldr	r3, [pc, #4]	; (3f3c <DMAC_2_Handler+0x8>)
    3f38:	4798      	blx	r3
    3f3a:	bd08      	pop	{r3, pc}
    3f3c:	00003dc9 	.word	0x00003dc9

00003f40 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    3f40:	b508      	push	{r3, lr}
	_dmac_handler();
    3f42:	4b01      	ldr	r3, [pc, #4]	; (3f48 <DMAC_3_Handler+0x8>)
    3f44:	4798      	blx	r3
    3f46:	bd08      	pop	{r3, pc}
    3f48:	00003dc9 	.word	0x00003dc9

00003f4c <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    3f4c:	b508      	push	{r3, lr}
	_dmac_handler();
    3f4e:	4b01      	ldr	r3, [pc, #4]	; (3f54 <DMAC_4_Handler+0x8>)
    3f50:	4798      	blx	r3
    3f52:	bd08      	pop	{r3, pc}
    3f54:	00003dc9 	.word	0x00003dc9

00003f58 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    3f58:	f010 0f01 	tst.w	r0, #1
    3f5c:	d002      	beq.n	3f64 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3f5e:	4a23      	ldr	r2, [pc, #140]	; (3fec <_gclk_init_generators_by_fref+0x94>)
    3f60:	4b23      	ldr	r3, [pc, #140]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3f62:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    3f64:	f010 0f02 	tst.w	r0, #2
    3f68:	d002      	beq.n	3f70 <_gclk_init_generators_by_fref+0x18>
    3f6a:	4a22      	ldr	r2, [pc, #136]	; (3ff4 <_gclk_init_generators_by_fref+0x9c>)
    3f6c:	4b20      	ldr	r3, [pc, #128]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3f6e:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    3f70:	f010 0f04 	tst.w	r0, #4
    3f74:	d002      	beq.n	3f7c <_gclk_init_generators_by_fref+0x24>
    3f76:	4a1d      	ldr	r2, [pc, #116]	; (3fec <_gclk_init_generators_by_fref+0x94>)
    3f78:	4b1d      	ldr	r3, [pc, #116]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3f7a:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    3f7c:	f010 0f08 	tst.w	r0, #8
    3f80:	d002      	beq.n	3f88 <_gclk_init_generators_by_fref+0x30>
    3f82:	4a1a      	ldr	r2, [pc, #104]	; (3fec <_gclk_init_generators_by_fref+0x94>)
    3f84:	4b1a      	ldr	r3, [pc, #104]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3f86:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    3f88:	f010 0f10 	tst.w	r0, #16
    3f8c:	d002      	beq.n	3f94 <_gclk_init_generators_by_fref+0x3c>
    3f8e:	4a17      	ldr	r2, [pc, #92]	; (3fec <_gclk_init_generators_by_fref+0x94>)
    3f90:	4b17      	ldr	r3, [pc, #92]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3f92:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    3f94:	f010 0f20 	tst.w	r0, #32
    3f98:	d002      	beq.n	3fa0 <_gclk_init_generators_by_fref+0x48>
    3f9a:	4a14      	ldr	r2, [pc, #80]	; (3fec <_gclk_init_generators_by_fref+0x94>)
    3f9c:	4b14      	ldr	r3, [pc, #80]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3f9e:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    3fa0:	f010 0f40 	tst.w	r0, #64	; 0x40
    3fa4:	d002      	beq.n	3fac <_gclk_init_generators_by_fref+0x54>
    3fa6:	4a11      	ldr	r2, [pc, #68]	; (3fec <_gclk_init_generators_by_fref+0x94>)
    3fa8:	4b11      	ldr	r3, [pc, #68]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3faa:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    3fac:	f010 0f80 	tst.w	r0, #128	; 0x80
    3fb0:	d002      	beq.n	3fb8 <_gclk_init_generators_by_fref+0x60>
    3fb2:	4a0e      	ldr	r2, [pc, #56]	; (3fec <_gclk_init_generators_by_fref+0x94>)
    3fb4:	4b0e      	ldr	r3, [pc, #56]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3fb6:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    3fb8:	f410 7f80 	tst.w	r0, #256	; 0x100
    3fbc:	d002      	beq.n	3fc4 <_gclk_init_generators_by_fref+0x6c>
    3fbe:	4a0b      	ldr	r2, [pc, #44]	; (3fec <_gclk_init_generators_by_fref+0x94>)
    3fc0:	4b0b      	ldr	r3, [pc, #44]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3fc2:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    3fc4:	f410 7f00 	tst.w	r0, #512	; 0x200
    3fc8:	d002      	beq.n	3fd0 <_gclk_init_generators_by_fref+0x78>
    3fca:	4a08      	ldr	r2, [pc, #32]	; (3fec <_gclk_init_generators_by_fref+0x94>)
    3fcc:	4b08      	ldr	r3, [pc, #32]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3fce:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    3fd0:	f410 6f80 	tst.w	r0, #1024	; 0x400
    3fd4:	d002      	beq.n	3fdc <_gclk_init_generators_by_fref+0x84>
    3fd6:	4a08      	ldr	r2, [pc, #32]	; (3ff8 <_gclk_init_generators_by_fref+0xa0>)
    3fd8:	4b05      	ldr	r3, [pc, #20]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3fda:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    3fdc:	f410 6f00 	tst.w	r0, #2048	; 0x800
    3fe0:	d002      	beq.n	3fe8 <_gclk_init_generators_by_fref+0x90>
    3fe2:	4a06      	ldr	r2, [pc, #24]	; (3ffc <_gclk_init_generators_by_fref+0xa4>)
    3fe4:	4b02      	ldr	r3, [pc, #8]	; (3ff0 <_gclk_init_generators_by_fref+0x98>)
    3fe6:	64da      	str	r2, [r3, #76]	; 0x4c
    3fe8:	4770      	bx	lr
    3fea:	bf00      	nop
    3fec:	00012b06 	.word	0x00012b06
    3ff0:	40001c00 	.word	0x40001c00
    3ff4:	00012306 	.word	0x00012306
    3ff8:	00012b05 	.word	0x00012b05
    3ffc:	00013b05 	.word	0x00013b05

00004000 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    4000:	2201      	movs	r2, #1
    4002:	4b01      	ldr	r3, [pc, #4]	; (4008 <_mclk_init+0x8>)
    4004:	715a      	strb	r2, [r3, #5]
    4006:	4770      	bx	lr
    4008:	40000800 	.word	0x40000800

0000400c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    400c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    400e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    4010:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    4012:	f012 0f01 	tst.w	r2, #1
    4016:	d005      	beq.n	4024 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    4018:	2201      	movs	r2, #1
    401a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    401c:	6803      	ldr	r3, [r0, #0]
    401e:	b153      	cbz	r3, 4036 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    4020:	4798      	blx	r3
    4022:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    4024:	8a1a      	ldrh	r2, [r3, #16]
    4026:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    4028:	b12a      	cbz	r2, 4036 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    402a:	f240 225e 	movw	r2, #606	; 0x25e
    402e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    4030:	6843      	ldr	r3, [r0, #4]
    4032:	b103      	cbz	r3, 4036 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    4034:	4798      	blx	r3
    4036:	bd08      	pop	{r3, pc}

00004038 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    4038:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    403a:	4b02      	ldr	r3, [pc, #8]	; (4044 <NVMCTRL_0_Handler+0xc>)
    403c:	6818      	ldr	r0, [r3, #0]
    403e:	4b02      	ldr	r3, [pc, #8]	; (4048 <NVMCTRL_0_Handler+0x10>)
    4040:	4798      	blx	r3
    4042:	bd08      	pop	{r3, pc}
    4044:	20000bb0 	.word	0x20000bb0
    4048:	0000400d 	.word	0x0000400d

0000404c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    404c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    404e:	4b02      	ldr	r3, [pc, #8]	; (4058 <NVMCTRL_1_Handler+0xc>)
    4050:	6818      	ldr	r0, [r3, #0]
    4052:	4b02      	ldr	r3, [pc, #8]	; (405c <NVMCTRL_1_Handler+0x10>)
    4054:	4798      	blx	r3
    4056:	bd08      	pop	{r3, pc}
    4058:	20000bb0 	.word	0x20000bb0
    405c:	0000400d 	.word	0x0000400d

00004060 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4060:	4b09      	ldr	r3, [pc, #36]	; (4088 <_osc32kctrl_init_sources+0x28>)
    4062:	f242 024e 	movw	r2, #8270	; 0x204e
    4066:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4068:	2201      	movs	r2, #1
    406a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    406c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    406e:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    4070:	2200      	movs	r2, #0
    4072:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    4074:	461a      	mov	r2, r3
    4076:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    4078:	f013 0f01 	tst.w	r3, #1
    407c:	d0fb      	beq.n	4076 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    407e:	2204      	movs	r2, #4
    4080:	4b01      	ldr	r3, [pc, #4]	; (4088 <_osc32kctrl_init_sources+0x28>)
    4082:	741a      	strb	r2, [r3, #16]
    4084:	4770      	bx	lr
    4086:	bf00      	nop
    4088:	40001400 	.word	0x40001400

0000408c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    408c:	4a2b      	ldr	r2, [pc, #172]	; (413c <_oscctrl_init_referenced_generators+0xb0>)
    408e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4090:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    4094:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4098:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    409a:	4b29      	ldr	r3, [pc, #164]	; (4140 <_oscctrl_init_referenced_generators+0xb4>)
    409c:	2200      	movs	r2, #0
    409e:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    40a0:	4a28      	ldr	r2, [pc, #160]	; (4144 <_oscctrl_init_referenced_generators+0xb8>)
    40a2:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    40a4:	461a      	mov	r2, r3
    40a6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    40aa:	f013 0f10 	tst.w	r3, #16
    40ae:	d1fa      	bne.n	40a6 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    40b0:	2200      	movs	r2, #0
    40b2:	4b23      	ldr	r3, [pc, #140]	; (4140 <_oscctrl_init_referenced_generators+0xb4>)
    40b4:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    40b8:	461a      	mov	r2, r3
    40ba:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    40be:	f013 0f04 	tst.w	r3, #4
    40c2:	d1fa      	bne.n	40ba <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    40c4:	2242      	movs	r2, #66	; 0x42
    40c6:	4b1e      	ldr	r3, [pc, #120]	; (4140 <_oscctrl_init_referenced_generators+0xb4>)
    40c8:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    40ca:	461a      	mov	r2, r3
    40cc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    40d0:	f013 0f02 	tst.w	r3, #2
    40d4:	d1fa      	bne.n	40cc <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    40d6:	4b1a      	ldr	r3, [pc, #104]	; (4140 <_oscctrl_init_referenced_generators+0xb4>)
    40d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    40da:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    40dc:	461a      	mov	r2, r3
    40de:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    40e2:	f013 0f08 	tst.w	r3, #8
    40e6:	d1fa      	bne.n	40de <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    40e8:	2282      	movs	r2, #130	; 0x82
    40ea:	4b15      	ldr	r3, [pc, #84]	; (4140 <_oscctrl_init_referenced_generators+0xb4>)
    40ec:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    40f0:	461a      	mov	r2, r3
    40f2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    40f6:	f013 0f04 	tst.w	r3, #4
    40fa:	d1fa      	bne.n	40f2 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    40fc:	4b10      	ldr	r3, [pc, #64]	; (4140 <_oscctrl_init_referenced_generators+0xb4>)
    40fe:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    4102:	f013 0f01 	tst.w	r3, #1
    4106:	d012      	beq.n	412e <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4108:	4a0d      	ldr	r2, [pc, #52]	; (4140 <_oscctrl_init_referenced_generators+0xb4>)
    410a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    410c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    4110:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4114:	d1f9      	bne.n	410a <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4116:	4a09      	ldr	r2, [pc, #36]	; (413c <_oscctrl_init_referenced_generators+0xb0>)
    4118:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    411a:	2b00      	cmp	r3, #0
    411c:	d1fc      	bne.n	4118 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    411e:	4a07      	ldr	r2, [pc, #28]	; (413c <_oscctrl_init_referenced_generators+0xb0>)
    4120:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4122:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    4126:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    412a:	6213      	str	r3, [r2, #32]
    412c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    412e:	4a04      	ldr	r2, [pc, #16]	; (4140 <_oscctrl_init_referenced_generators+0xb4>)
    4130:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    4132:	f413 7f80 	tst.w	r3, #256	; 0x100
    4136:	d0fb      	beq.n	4130 <_oscctrl_init_referenced_generators+0xa4>
    4138:	e7ed      	b.n	4116 <_oscctrl_init_referenced_generators+0x8a>
    413a:	bf00      	nop
    413c:	40001c00 	.word	0x40001c00
    4140:	40001000 	.word	0x40001000
    4144:	04010000 	.word	0x04010000

00004148 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    4148:	b500      	push	{lr}
    414a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    414c:	4b0d      	ldr	r3, [pc, #52]	; (4184 <RAMECC_Handler+0x3c>)
    414e:	789b      	ldrb	r3, [r3, #2]
    4150:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    4152:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    4154:	9b01      	ldr	r3, [sp, #4]
    4156:	f013 0f02 	tst.w	r3, #2
    415a:	d006      	beq.n	416a <RAMECC_Handler+0x22>
    415c:	4b0a      	ldr	r3, [pc, #40]	; (4188 <RAMECC_Handler+0x40>)
    415e:	681b      	ldr	r3, [r3, #0]
    4160:	b11b      	cbz	r3, 416a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    4162:	4a08      	ldr	r2, [pc, #32]	; (4184 <RAMECC_Handler+0x3c>)
    4164:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    4166:	4798      	blx	r3
    4168:	e009      	b.n	417e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    416a:	9b01      	ldr	r3, [sp, #4]
    416c:	f013 0f01 	tst.w	r3, #1
    4170:	d005      	beq.n	417e <RAMECC_Handler+0x36>
    4172:	4b05      	ldr	r3, [pc, #20]	; (4188 <RAMECC_Handler+0x40>)
    4174:	685b      	ldr	r3, [r3, #4]
    4176:	b113      	cbz	r3, 417e <RAMECC_Handler+0x36>
    4178:	4a02      	ldr	r2, [pc, #8]	; (4184 <RAMECC_Handler+0x3c>)
    417a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    417c:	4798      	blx	r3
	} else {
		return;
	}
}
    417e:	b003      	add	sp, #12
    4180:	f85d fb04 	ldr.w	pc, [sp], #4
    4184:	41020000 	.word	0x41020000
    4188:	20003f6c 	.word	0x20003f6c

0000418c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    418c:	b470      	push	{r4, r5, r6}
    418e:	b087      	sub	sp, #28
    4190:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    4192:	466c      	mov	r4, sp
    4194:	4d0c      	ldr	r5, [pc, #48]	; (41c8 <_sercom_get_hardware_index+0x3c>)
    4196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    419a:	e895 0003 	ldmia.w	r5, {r0, r1}
    419e:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    41a2:	9b00      	ldr	r3, [sp, #0]
    41a4:	42b3      	cmp	r3, r6
    41a6:	d00c      	beq.n	41c2 <_sercom_get_hardware_index+0x36>
    41a8:	4632      	mov	r2, r6
    41aa:	2001      	movs	r0, #1
    41ac:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    41b0:	4293      	cmp	r3, r2
    41b2:	d007      	beq.n	41c4 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    41b4:	3001      	adds	r0, #1
    41b6:	2806      	cmp	r0, #6
    41b8:	d1f8      	bne.n	41ac <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    41ba:	2000      	movs	r0, #0
}
    41bc:	b007      	add	sp, #28
    41be:	bc70      	pop	{r4, r5, r6}
    41c0:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    41c2:	2000      	movs	r0, #0
			return i;
    41c4:	b2c0      	uxtb	r0, r0
    41c6:	e7f9      	b.n	41bc <_sercom_get_hardware_index+0x30>
    41c8:	00009094 	.word	0x00009094

000041cc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    41cc:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    41ce:	4b03      	ldr	r3, [pc, #12]	; (41dc <_sercom_get_irq_num+0x10>)
    41d0:	4798      	blx	r3
    41d2:	0080      	lsls	r0, r0, #2
    41d4:	302e      	adds	r0, #46	; 0x2e
}
    41d6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    41da:	bd08      	pop	{r3, pc}
    41dc:	0000418d 	.word	0x0000418d

000041e0 <_usart_init>:
{
    41e0:	b538      	push	{r3, r4, r5, lr}
    41e2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    41e4:	4b33      	ldr	r3, [pc, #204]	; (42b4 <_usart_init+0xd4>)
    41e6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    41e8:	2803      	cmp	r0, #3
    41ea:	d056      	beq.n	429a <_usart_init+0xba>
    41ec:	2804      	cmp	r0, #4
    41ee:	d052      	beq.n	4296 <_usart_init+0xb6>
    41f0:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    41f2:	bf08      	it	eq
    41f4:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    41f6:	d006      	beq.n	4206 <_usart_init+0x26>
	ASSERT(false);
    41f8:	f240 2263 	movw	r2, #611	; 0x263
    41fc:	492e      	ldr	r1, [pc, #184]	; (42b8 <_usart_init+0xd8>)
    41fe:	2000      	movs	r0, #0
    4200:	4b2e      	ldr	r3, [pc, #184]	; (42bc <_usart_init+0xdc>)
    4202:	4798      	blx	r3
	return 0;
    4204:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    4206:	69e3      	ldr	r3, [r4, #28]
    4208:	f013 0f01 	tst.w	r3, #1
    420c:	d1fb      	bne.n	4206 <_usart_init+0x26>
    420e:	69e3      	ldr	r3, [r4, #28]
    4210:	f013 0f03 	tst.w	r3, #3
    4214:	d1fb      	bne.n	420e <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    4216:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    4218:	f013 0f02 	tst.w	r3, #2
    421c:	d147      	bne.n	42ae <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    421e:	69e3      	ldr	r3, [r4, #28]
    4220:	f013 0f01 	tst.w	r3, #1
    4224:	d1fb      	bne.n	421e <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    4226:	6823      	ldr	r3, [r4, #0]
    4228:	f043 0301 	orr.w	r3, r3, #1
    422c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    422e:	69e3      	ldr	r3, [r4, #28]
    4230:	f013 0f01 	tst.w	r3, #1
    4234:	d1fb      	bne.n	422e <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    4236:	4610      	mov	r0, r2
    4238:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    423c:	4920      	ldr	r1, [pc, #128]	; (42c0 <_usart_init+0xe0>)
    423e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    4242:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    4244:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    4246:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    4248:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    424c:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    424e:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    4252:	d024      	beq.n	429e <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    4254:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4258:	4b19      	ldr	r3, [pc, #100]	; (42c0 <_usart_init+0xe0>)
    425a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    425e:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    4260:	89a3      	ldrh	r3, [r4, #12]
    4262:	f361 030c 	bfi	r3, r1, #0, #13
    4266:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    4268:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    426c:	89a3      	ldrh	r3, [r4, #12]
    426e:	f362 334f 	bfi	r3, r2, #13, #3
    4272:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    4274:	4b12      	ldr	r3, [pc, #72]	; (42c0 <_usart_init+0xe0>)
    4276:	0042      	lsls	r2, r0, #1
    4278:	1811      	adds	r1, r2, r0
    427a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    427e:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    4282:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    4284:	4402      	add	r2, r0
    4286:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    428a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    428e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    4292:	2000      	movs	r0, #0
    4294:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    4296:	2201      	movs	r2, #1
    4298:	e7b5      	b.n	4206 <_usart_init+0x26>
    429a:	2200      	movs	r2, #0
    429c:	e7b3      	b.n	4206 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    429e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    42a2:	4b07      	ldr	r3, [pc, #28]	; (42c0 <_usart_init+0xe0>)
    42a4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    42a8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    42aa:	81a3      	strh	r3, [r4, #12]
    42ac:	e7e2      	b.n	4274 <_usart_init+0x94>
		return ERR_DENIED;
    42ae:	f06f 0010 	mvn.w	r0, #16
}
    42b2:	bd38      	pop	{r3, r4, r5, pc}
    42b4:	0000418d 	.word	0x0000418d
    42b8:	00009120 	.word	0x00009120
    42bc:	000039a5 	.word	0x000039a5
    42c0:	00009094 	.word	0x00009094

000042c4 <_usart_async_init>:
{
    42c4:	b570      	push	{r4, r5, r6, lr}
    42c6:	460d      	mov	r5, r1
	ASSERT(device);
    42c8:	4606      	mov	r6, r0
    42ca:	22da      	movs	r2, #218	; 0xda
    42cc:	4916      	ldr	r1, [pc, #88]	; (4328 <_usart_async_init+0x64>)
    42ce:	3000      	adds	r0, #0
    42d0:	bf18      	it	ne
    42d2:	2001      	movne	r0, #1
    42d4:	4b15      	ldr	r3, [pc, #84]	; (432c <_usart_async_init+0x68>)
    42d6:	4798      	blx	r3
	init_status = _usart_init(hw);
    42d8:	4628      	mov	r0, r5
    42da:	4b15      	ldr	r3, [pc, #84]	; (4330 <_usart_async_init+0x6c>)
    42dc:	4798      	blx	r3
	if (init_status) {
    42de:	4604      	mov	r4, r0
    42e0:	b9f8      	cbnz	r0, 4322 <_usart_async_init+0x5e>
	device->hw = hw;
    42e2:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    42e4:	4628      	mov	r0, r5
    42e6:	4b13      	ldr	r3, [pc, #76]	; (4334 <_usart_async_init+0x70>)
    42e8:	4798      	blx	r3
		irq = irq +2;
    42ea:	3002      	adds	r0, #2
    42ec:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    42ee:	f000 031f 	and.w	r3, r0, #31
    42f2:	2201      	movs	r2, #1
    42f4:	409a      	lsls	r2, r3
    42f6:	0943      	lsrs	r3, r0, #5
    42f8:	009b      	lsls	r3, r3, #2
    42fa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    42fe:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    4306:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    430a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    430e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4312:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    4316:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    431a:	21e0      	movs	r1, #224	; 0xe0
    431c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4320:	601a      	str	r2, [r3, #0]
}
    4322:	4620      	mov	r0, r4
    4324:	bd70      	pop	{r4, r5, r6, pc}
    4326:	bf00      	nop
    4328:	00009120 	.word	0x00009120
    432c:	000039a5 	.word	0x000039a5
    4330:	000041e1 	.word	0x000041e1
    4334:	000041cd 	.word	0x000041cd

00004338 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    4338:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    433a:	69d3      	ldr	r3, [r2, #28]
    433c:	f013 0f03 	tst.w	r3, #3
    4340:	d1fb      	bne.n	433a <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4342:	6813      	ldr	r3, [r2, #0]
    4344:	f043 0302 	orr.w	r3, r3, #2
    4348:	6013      	str	r3, [r2, #0]
    434a:	4770      	bx	lr

0000434c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    434c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    434e:	6299      	str	r1, [r3, #40]	; 0x28
    4350:	4770      	bx	lr

00004352 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    4352:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    4354:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    4356:	b2c0      	uxtb	r0, r0
    4358:	4770      	bx	lr

0000435a <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    435a:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    435c:	7e18      	ldrb	r0, [r3, #24]
}
    435e:	f000 0001 	and.w	r0, r0, #1
    4362:	4770      	bx	lr

00004364 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    4364:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    4366:	7e18      	ldrb	r0, [r3, #24]
}
    4368:	f3c0 0080 	ubfx	r0, r0, #2, #1
    436c:	4770      	bx	lr
	...

00004370 <_usart_async_set_irq_state>:
{
    4370:	b570      	push	{r4, r5, r6, lr}
    4372:	460c      	mov	r4, r1
    4374:	4616      	mov	r6, r2
	ASSERT(device);
    4376:	4605      	mov	r5, r0
    4378:	f240 2245 	movw	r2, #581	; 0x245
    437c:	4915      	ldr	r1, [pc, #84]	; (43d4 <_usart_async_set_irq_state+0x64>)
    437e:	3000      	adds	r0, #0
    4380:	bf18      	it	ne
    4382:	2001      	movne	r0, #1
    4384:	4b14      	ldr	r3, [pc, #80]	; (43d8 <_usart_async_set_irq_state+0x68>)
    4386:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    4388:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    438c:	d10d      	bne.n	43aa <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    438e:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    4390:	b92e      	cbnz	r6, 439e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    4392:	2201      	movs	r2, #1
    4394:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    4396:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    4398:	2202      	movs	r2, #2
    439a:	751a      	strb	r2, [r3, #20]
    439c:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    439e:	2201      	movs	r2, #1
    43a0:	759a      	strb	r2, [r3, #22]
    43a2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    43a4:	2202      	movs	r2, #2
    43a6:	759a      	strb	r2, [r3, #22]
    43a8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    43aa:	2c01      	cmp	r4, #1
    43ac:	d002      	beq.n	43b4 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    43ae:	2c03      	cmp	r4, #3
    43b0:	d008      	beq.n	43c4 <_usart_async_set_irq_state+0x54>
    43b2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    43b4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    43b6:	b916      	cbnz	r6, 43be <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    43b8:	2204      	movs	r2, #4
    43ba:	751a      	strb	r2, [r3, #20]
    43bc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    43be:	2204      	movs	r2, #4
    43c0:	759a      	strb	r2, [r3, #22]
    43c2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    43c4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    43c6:	b116      	cbz	r6, 43ce <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    43c8:	2280      	movs	r2, #128	; 0x80
    43ca:	759a      	strb	r2, [r3, #22]
}
    43cc:	e7f1      	b.n	43b2 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    43ce:	2280      	movs	r2, #128	; 0x80
    43d0:	751a      	strb	r2, [r3, #20]
    43d2:	bd70      	pop	{r4, r5, r6, pc}
    43d4:	00009120 	.word	0x00009120
    43d8:	000039a5 	.word	0x000039a5

000043dc <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    43dc:	4b03      	ldr	r3, [pc, #12]	; (43ec <_delay_init+0x10>)
    43de:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    43e2:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    43e4:	2205      	movs	r2, #5
    43e6:	601a      	str	r2, [r3, #0]
    43e8:	4770      	bx	lr
    43ea:	bf00      	nop
    43ec:	e000e010 	.word	0xe000e010

000043f0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    43f0:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    43f2:	b303      	cbz	r3, 4436 <_delay_cycles+0x46>
{
    43f4:	b430      	push	{r4, r5}
    43f6:	1e5d      	subs	r5, r3, #1
    43f8:	b2ed      	uxtb	r5, r5
	while (n--) {
    43fa:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    43fc:	4a12      	ldr	r2, [pc, #72]	; (4448 <_delay_cycles+0x58>)
    43fe:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    4402:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    4404:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4406:	6813      	ldr	r3, [r2, #0]
    4408:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    440c:	d0fb      	beq.n	4406 <_delay_cycles+0x16>
	while (n--) {
    440e:	3801      	subs	r0, #1
    4410:	b2c0      	uxtb	r0, r0
    4412:	28ff      	cmp	r0, #255	; 0xff
    4414:	d1f5      	bne.n	4402 <_delay_cycles+0x12>
    4416:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    441a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    441e:	3101      	adds	r1, #1
    4420:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    4422:	4b09      	ldr	r3, [pc, #36]	; (4448 <_delay_cycles+0x58>)
    4424:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    4426:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4428:	461a      	mov	r2, r3
    442a:	6813      	ldr	r3, [r2, #0]
    442c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4430:	d0fb      	beq.n	442a <_delay_cycles+0x3a>
		;
}
    4432:	bc30      	pop	{r4, r5}
    4434:	4770      	bx	lr
	SysTick->LOAD = buf;
    4436:	4b04      	ldr	r3, [pc, #16]	; (4448 <_delay_cycles+0x58>)
    4438:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    443a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    443c:	461a      	mov	r2, r3
    443e:	6813      	ldr	r3, [r2, #0]
    4440:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4444:	d0fb      	beq.n	443e <_delay_cycles+0x4e>
    4446:	4770      	bx	lr
    4448:	e000e010 	.word	0xe000e010

0000444c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    444c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    444e:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    4450:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    4452:	f012 0f01 	tst.w	r2, #1
    4456:	d100      	bne.n	445a <tcc_interrupt_handler+0xe>
    4458:	bd08      	pop	{r3, pc}
}

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    445a:	2201      	movs	r2, #1
    445c:	62da      	str	r2, [r3, #44]	; 0x2c
		hri_tcc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    445e:	6803      	ldr	r3, [r0, #0]
    4460:	4798      	blx	r3
	}
}
    4462:	e7f9      	b.n	4458 <tcc_interrupt_handler+0xc>

00004464 <TCC0_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC0_0_Handler(void)
{
    4464:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    4466:	4b02      	ldr	r3, [pc, #8]	; (4470 <TCC0_0_Handler+0xc>)
    4468:	6818      	ldr	r0, [r3, #0]
    446a:	4b02      	ldr	r3, [pc, #8]	; (4474 <TCC0_0_Handler+0x10>)
    446c:	4798      	blx	r3
    446e:	bd08      	pop	{r3, pc}
    4470:	20000bb4 	.word	0x20000bb4
    4474:	0000444d 	.word	0x0000444d

00004478 <TCC1_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC1_0_Handler(void)
{
    4478:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    447a:	4b02      	ldr	r3, [pc, #8]	; (4484 <TCC1_0_Handler+0xc>)
    447c:	6858      	ldr	r0, [r3, #4]
    447e:	4b02      	ldr	r3, [pc, #8]	; (4488 <TCC1_0_Handler+0x10>)
    4480:	4798      	blx	r3
    4482:	bd08      	pop	{r3, pc}
    4484:	20000bb4 	.word	0x20000bb4
    4488:	0000444d 	.word	0x0000444d

0000448c <TCC2_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC2_0_Handler(void)
{
    448c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    448e:	4b02      	ldr	r3, [pc, #8]	; (4498 <TCC2_0_Handler+0xc>)
    4490:	6898      	ldr	r0, [r3, #8]
    4492:	4b02      	ldr	r3, [pc, #8]	; (449c <TCC2_0_Handler+0x10>)
    4494:	4798      	blx	r3
    4496:	bd08      	pop	{r3, pc}
    4498:	20000bb4 	.word	0x20000bb4
    449c:	0000444d 	.word	0x0000444d

000044a0 <TCC3_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC3_0_Handler(void)
{
    44a0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    44a2:	4b02      	ldr	r3, [pc, #8]	; (44ac <TCC3_0_Handler+0xc>)
    44a4:	68d8      	ldr	r0, [r3, #12]
    44a6:	4b02      	ldr	r3, [pc, #8]	; (44b0 <TCC3_0_Handler+0x10>)
    44a8:	4798      	blx	r3
    44aa:	bd08      	pop	{r3, pc}
    44ac:	20000bb4 	.word	0x20000bb4
    44b0:	0000444d 	.word	0x0000444d

000044b4 <TCC4_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC4_0_Handler(void)
{
    44b4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    44b6:	4b02      	ldr	r3, [pc, #8]	; (44c0 <TCC4_0_Handler+0xc>)
    44b8:	6918      	ldr	r0, [r3, #16]
    44ba:	4b02      	ldr	r3, [pc, #8]	; (44c4 <TCC4_0_Handler+0x10>)
    44bc:	4798      	blx	r3
    44be:	bd08      	pop	{r3, pc}
    44c0:	20000bb4 	.word	0x20000bb4
    44c4:	0000444d 	.word	0x0000444d

000044c8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    44c8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    44ca:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    44cc:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    44ce:	f012 0f01 	tst.w	r2, #1
    44d2:	d100      	bne.n	44d6 <tc_interrupt_handler+0xe>
    44d4:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    44d6:	2201      	movs	r2, #1
    44d8:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    44da:	6803      	ldr	r3, [r0, #0]
    44dc:	4798      	blx	r3
	}
}
    44de:	e7f9      	b.n	44d4 <tc_interrupt_handler+0xc>

000044e0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    44e0:	b538      	push	{r3, r4, r5, lr}
    44e2:	4605      	mov	r5, r0
	void *const hw = device->hw;
    44e4:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    44e6:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    44e8:	f013 0f01 	tst.w	r3, #1
    44ec:	d004      	beq.n	44f8 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    44ee:	2301      	movs	r3, #1
    44f0:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    44f2:	6803      	ldr	r3, [r0, #0]
    44f4:	b103      	cbz	r3, 44f8 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    44f6:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    44f8:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    44fa:	f013 0f02 	tst.w	r3, #2
    44fe:	d005      	beq.n	450c <tc_pwm_interrupt_handler+0x2c>
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4500:	2302      	movs	r3, #2
    4502:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    4504:	686b      	ldr	r3, [r5, #4]
    4506:	b10b      	cbz	r3, 450c <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    4508:	4628      	mov	r0, r5
    450a:	4798      	blx	r3
    450c:	bd38      	pop	{r3, r4, r5, pc}
	...

00004510 <TC0_Handler>:

/**
* \brief TC interrupt handler
*/
void TC0_Handler(void)
{
    4510:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    4512:	4b02      	ldr	r3, [pc, #8]	; (451c <TC0_Handler+0xc>)
    4514:	6818      	ldr	r0, [r3, #0]
    4516:	4b02      	ldr	r3, [pc, #8]	; (4520 <TC0_Handler+0x10>)
    4518:	4798      	blx	r3
    451a:	bd08      	pop	{r3, pc}
    451c:	20000bc8 	.word	0x20000bc8
    4520:	000044e1 	.word	0x000044e1

00004524 <TC1_Handler>:

/**
* \brief TC interrupt handler
*/
void TC1_Handler(void)
{
    4524:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    4526:	4b02      	ldr	r3, [pc, #8]	; (4530 <TC1_Handler+0xc>)
    4528:	6858      	ldr	r0, [r3, #4]
    452a:	4b02      	ldr	r3, [pc, #8]	; (4534 <TC1_Handler+0x10>)
    452c:	4798      	blx	r3
    452e:	bd08      	pop	{r3, pc}
    4530:	20000bc8 	.word	0x20000bc8
    4534:	000044e1 	.word	0x000044e1

00004538 <TC2_Handler>:

/**
* \brief TC interrupt handler
*/
void TC2_Handler(void)
{
    4538:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    453a:	4b02      	ldr	r3, [pc, #8]	; (4544 <TC2_Handler+0xc>)
    453c:	6898      	ldr	r0, [r3, #8]
    453e:	4b02      	ldr	r3, [pc, #8]	; (4548 <TC2_Handler+0x10>)
    4540:	4798      	blx	r3
    4542:	bd08      	pop	{r3, pc}
    4544:	20000bc8 	.word	0x20000bc8
    4548:	000044e1 	.word	0x000044e1

0000454c <TC3_Handler>:

/**
* \brief TC interrupt handler
*/
void TC3_Handler(void)
{
    454c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    454e:	4b02      	ldr	r3, [pc, #8]	; (4558 <TC3_Handler+0xc>)
    4550:	68d8      	ldr	r0, [r3, #12]
    4552:	4b02      	ldr	r3, [pc, #8]	; (455c <TC3_Handler+0x10>)
    4554:	4798      	blx	r3
    4556:	bd08      	pop	{r3, pc}
    4558:	20000bc8 	.word	0x20000bc8
    455c:	000044c9 	.word	0x000044c9

00004560 <TC4_Handler>:

/**
* \brief TC interrupt handler
*/
void TC4_Handler(void)
{
    4560:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    4562:	4b02      	ldr	r3, [pc, #8]	; (456c <TC4_Handler+0xc>)
    4564:	6918      	ldr	r0, [r3, #16]
    4566:	4b02      	ldr	r3, [pc, #8]	; (4570 <TC4_Handler+0x10>)
    4568:	4798      	blx	r3
    456a:	bd08      	pop	{r3, pc}
    456c:	20000bc8 	.word	0x20000bc8
    4570:	000044c9 	.word	0x000044c9

00004574 <TC5_Handler>:

/**
* \brief TC interrupt handler
*/
void TC5_Handler(void)
{
    4574:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    4576:	4b02      	ldr	r3, [pc, #8]	; (4580 <TC5_Handler+0xc>)
    4578:	6958      	ldr	r0, [r3, #20]
    457a:	4b02      	ldr	r3, [pc, #8]	; (4584 <TC5_Handler+0x10>)
    457c:	4798      	blx	r3
    457e:	bd08      	pop	{r3, pc}
    4580:	20000bc8 	.word	0x20000bc8
    4584:	000044c9 	.word	0x000044c9

00004588 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    4588:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    458a:	4604      	mov	r4, r0
    458c:	b330      	cbz	r0, 45dc <_wdt_init+0x54>
    458e:	6800      	ldr	r0, [r0, #0]
    4590:	3000      	adds	r0, #0
    4592:	bf18      	it	ne
    4594:	2001      	movne	r0, #1
    4596:	225a      	movs	r2, #90	; 0x5a
    4598:	4914      	ldr	r1, [pc, #80]	; (45ec <_wdt_init+0x64>)
    459a:	4b15      	ldr	r3, [pc, #84]	; (45f0 <_wdt_init+0x68>)
    459c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    459e:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    45a0:	689a      	ldr	r2, [r3, #8]
    45a2:	f012 0f0e 	tst.w	r2, #14
    45a6:	d1fb      	bne.n	45a0 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    45a8:	781a      	ldrb	r2, [r3, #0]
    45aa:	09d2      	lsrs	r2, r2, #7
    45ac:	d118      	bne.n	45e0 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    45ae:	689a      	ldr	r2, [r3, #8]
    45b0:	f012 0f0e 	tst.w	r2, #14
    45b4:	d1fb      	bne.n	45ae <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    45b6:	781a      	ldrb	r2, [r3, #0]
    45b8:	f012 0f02 	tst.w	r2, #2
    45bc:	d113      	bne.n	45e6 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    45be:	689a      	ldr	r2, [r3, #8]
    45c0:	f012 0f0e 	tst.w	r2, #14
    45c4:	d1fb      	bne.n	45be <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    45c6:	781a      	ldrb	r2, [r3, #0]
    45c8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    45cc:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    45ce:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    45d0:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    45d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    45d6:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    45d8:	2000      	movs	r0, #0
    45da:	bd10      	pop	{r4, pc}
    45dc:	2000      	movs	r0, #0
    45de:	e7da      	b.n	4596 <_wdt_init+0xe>
		return ERR_DENIED;
    45e0:	f06f 0010 	mvn.w	r0, #16
    45e4:	bd10      	pop	{r4, pc}
    45e6:	f06f 0010 	mvn.w	r0, #16
}
    45ea:	bd10      	pop	{r4, pc}
    45ec:	0000913c 	.word	0x0000913c
    45f0:	000039a5 	.word	0x000039a5

000045f4 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    45f4:	b570      	push	{r4, r5, r6, lr}
    45f6:	460d      	mov	r5, r1
    45f8:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    45fa:	4606      	mov	r6, r0
    45fc:	2800      	cmp	r0, #0
    45fe:	d044      	beq.n	468a <_wdt_set_timeout_period+0x96>
    4600:	6800      	ldr	r0, [r0, #0]
    4602:	3000      	adds	r0, #0
    4604:	bf18      	it	ne
    4606:	2001      	movne	r0, #1
    4608:	2284      	movs	r2, #132	; 0x84
    460a:	493f      	ldr	r1, [pc, #252]	; (4708 <_wdt_set_timeout_period+0x114>)
    460c:	4b3f      	ldr	r3, [pc, #252]	; (470c <_wdt_set_timeout_period+0x118>)
    460e:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    4610:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4612:	6893      	ldr	r3, [r2, #8]
    4614:	f013 0f0e 	tst.w	r3, #14
    4618:	d1fb      	bne.n	4612 <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    461a:	7813      	ldrb	r3, [r2, #0]
    461c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4620:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    4622:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4624:	688b      	ldr	r3, [r1, #8]
    4626:	f013 0f0e 	tst.w	r3, #14
    462a:	d1fb      	bne.n	4624 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    462c:	780b      	ldrb	r3, [r1, #0]
    462e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4632:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    4634:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4636:	6899      	ldr	r1, [r3, #8]
    4638:	f011 0f0e 	tst.w	r1, #14
    463c:	d1fb      	bne.n	4636 <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    463e:	781a      	ldrb	r2, [r3, #0]
    4640:	09d2      	lsrs	r2, r2, #7
    4642:	d158      	bne.n	46f6 <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4644:	6899      	ldr	r1, [r3, #8]
    4646:	f011 0f0e 	tst.w	r1, #14
    464a:	d1fb      	bne.n	4644 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    464c:	781a      	ldrb	r2, [r3, #0]
    464e:	f012 0f02 	tst.w	r2, #2
    4652:	d153      	bne.n	46fc <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    4654:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    4658:	4628      	mov	r0, r5
    465a:	2100      	movs	r1, #0
    465c:	ea50 0201 	orrs.w	r2, r0, r1
    4660:	d14f      	bne.n	4702 <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    4662:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    4666:	d038      	beq.n	46da <_wdt_set_timeout_period+0xe6>
    4668:	d911      	bls.n	468e <_wdt_set_timeout_period+0x9a>
    466a:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    466e:	d038      	beq.n	46e2 <_wdt_set_timeout_period+0xee>
    4670:	d927      	bls.n	46c2 <_wdt_set_timeout_period+0xce>
    4672:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    4676:	d038      	beq.n	46ea <_wdt_set_timeout_period+0xf6>
    4678:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    467c:	d037      	beq.n	46ee <_wdt_set_timeout_period+0xfa>
    467e:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    4682:	d030      	beq.n	46e6 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    4684:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    4688:	bd70      	pop	{r4, r5, r6, pc}
    468a:	2000      	movs	r0, #0
    468c:	e7bc      	b.n	4608 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    468e:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    4692:	d01e      	beq.n	46d2 <_wdt_set_timeout_period+0xde>
    4694:	d80d      	bhi.n	46b2 <_wdt_set_timeout_period+0xbe>
    4696:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    469a:	d02a      	beq.n	46f2 <_wdt_set_timeout_period+0xfe>
    469c:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    46a0:	d1f0      	bne.n	4684 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    46a2:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    46a4:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    46a6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    46aa:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    46ac:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    46ae:	2000      	movs	r0, #0
    46b0:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    46b2:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    46b6:	d00e      	beq.n	46d6 <_wdt_set_timeout_period+0xe2>
    46b8:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    46bc:	d1e2      	bne.n	4684 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    46be:	2104      	movs	r1, #4
			break;
    46c0:	e7f0      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    46c2:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    46c6:	d00a      	beq.n	46de <_wdt_set_timeout_period+0xea>
    46c8:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    46cc:	d1da      	bne.n	4684 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    46ce:	2107      	movs	r1, #7
			break;
    46d0:	e7e8      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    46d2:	2102      	movs	r1, #2
			break;
    46d4:	e7e6      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    46d6:	2103      	movs	r1, #3
			break;
    46d8:	e7e4      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    46da:	2105      	movs	r1, #5
			break;
    46dc:	e7e2      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    46de:	2106      	movs	r1, #6
			break;
    46e0:	e7e0      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    46e2:	2108      	movs	r1, #8
			break;
    46e4:	e7de      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    46e6:	2109      	movs	r1, #9
			break;
    46e8:	e7dc      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    46ea:	210a      	movs	r1, #10
			break;
    46ec:	e7da      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    46ee:	210b      	movs	r1, #11
			break;
    46f0:	e7d8      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    46f2:	2100      	movs	r1, #0
    46f4:	e7d6      	b.n	46a4 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    46f6:	f06f 0010 	mvn.w	r0, #16
    46fa:	bd70      	pop	{r4, r5, r6, pc}
    46fc:	f06f 0010 	mvn.w	r0, #16
    4700:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    4702:	f06f 000c 	mvn.w	r0, #12
    4706:	bd70      	pop	{r4, r5, r6, pc}
    4708:	0000913c 	.word	0x0000913c
    470c:	000039a5 	.word	0x000039a5

00004710 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    4710:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4712:	4604      	mov	r4, r0
    4714:	b198      	cbz	r0, 473e <_wdt_enable+0x2e>
    4716:	6800      	ldr	r0, [r0, #0]
    4718:	3000      	adds	r0, #0
    471a:	bf18      	it	ne
    471c:	2001      	movne	r0, #1
    471e:	f240 1207 	movw	r2, #263	; 0x107
    4722:	4908      	ldr	r1, [pc, #32]	; (4744 <_wdt_enable+0x34>)
    4724:	4b08      	ldr	r3, [pc, #32]	; (4748 <_wdt_enable+0x38>)
    4726:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    4728:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    472a:	6893      	ldr	r3, [r2, #8]
    472c:	f013 0f0e 	tst.w	r3, #14
    4730:	d1fb      	bne.n	472a <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    4732:	7813      	ldrb	r3, [r2, #0]
    4734:	f043 0302 	orr.w	r3, r3, #2
    4738:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    473a:	2000      	movs	r0, #0
    473c:	bd10      	pop	{r4, pc}
    473e:	2000      	movs	r0, #0
    4740:	e7ed      	b.n	471e <_wdt_enable+0xe>
    4742:	bf00      	nop
    4744:	0000913c 	.word	0x0000913c
    4748:	000039a5 	.word	0x000039a5

0000474c <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    474c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    474e:	4604      	mov	r4, r0
    4750:	b1d0      	cbz	r0, 4788 <_wdt_disable+0x3c>
    4752:	6800      	ldr	r0, [r0, #0]
    4754:	3000      	adds	r0, #0
    4756:	bf18      	it	ne
    4758:	2001      	movne	r0, #1
    475a:	f44f 728a 	mov.w	r2, #276	; 0x114
    475e:	490d      	ldr	r1, [pc, #52]	; (4794 <_wdt_disable+0x48>)
    4760:	4b0d      	ldr	r3, [pc, #52]	; (4798 <_wdt_disable+0x4c>)
    4762:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    4764:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4766:	689a      	ldr	r2, [r3, #8]
    4768:	f012 0f0e 	tst.w	r2, #14
    476c:	d1fb      	bne.n	4766 <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    476e:	781a      	ldrb	r2, [r3, #0]
    4770:	09d2      	lsrs	r2, r2, #7
    4772:	d10b      	bne.n	478c <_wdt_disable+0x40>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4774:	689a      	ldr	r2, [r3, #8]
    4776:	f012 0f0e 	tst.w	r2, #14
    477a:	d1fb      	bne.n	4774 <_wdt_disable+0x28>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    477c:	781a      	ldrb	r2, [r3, #0]
    477e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    4782:	701a      	strb	r2, [r3, #0]
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    4784:	2000      	movs	r0, #0
    4786:	bd10      	pop	{r4, pc}
    4788:	2000      	movs	r0, #0
    478a:	e7e6      	b.n	475a <_wdt_disable+0xe>
		return ERR_DENIED;
    478c:	f06f 0010 	mvn.w	r0, #16
}
    4790:	bd10      	pop	{r4, pc}
    4792:	bf00      	nop
    4794:	0000913c 	.word	0x0000913c
    4798:	000039a5 	.word	0x000039a5

0000479c <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    479c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    479e:	4604      	mov	r4, r0
    47a0:	b168      	cbz	r0, 47be <_wdt_feed+0x22>
    47a2:	6800      	ldr	r0, [r0, #0]
    47a4:	3000      	adds	r0, #0
    47a6:	bf18      	it	ne
    47a8:	2001      	movne	r0, #1
    47aa:	f240 1225 	movw	r2, #293	; 0x125
    47ae:	4905      	ldr	r1, [pc, #20]	; (47c4 <_wdt_feed+0x28>)
    47b0:	4b05      	ldr	r3, [pc, #20]	; (47c8 <_wdt_feed+0x2c>)
    47b2:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    47b4:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    47b6:	22a5      	movs	r2, #165	; 0xa5
    47b8:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    47ba:	2000      	movs	r0, #0
    47bc:	bd10      	pop	{r4, pc}
    47be:	2000      	movs	r0, #0
    47c0:	e7f3      	b.n	47aa <_wdt_feed+0xe>
    47c2:	bf00      	nop
    47c4:	0000913c 	.word	0x0000913c
    47c8:	000039a5 	.word	0x000039a5

000047cc <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    47cc:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    47ce:	2200      	movs	r2, #0
    47d0:	2108      	movs	r1, #8
    47d2:	2001      	movs	r0, #1
    47d4:	4c18      	ldr	r4, [pc, #96]	; (4838 <createQueuesAndSemaphores+0x6c>)
    47d6:	47a0      	blx	r4
    47d8:	4d18      	ldr	r5, [pc, #96]	; (483c <createQueuesAndSemaphores+0x70>)
    47da:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    47dc:	2200      	movs	r2, #0
    47de:	2101      	movs	r1, #1
    47e0:	4608      	mov	r0, r1
    47e2:	47a0      	blx	r4
    47e4:	4b16      	ldr	r3, [pc, #88]	; (4840 <createQueuesAndSemaphores+0x74>)
    47e6:	6018      	str	r0, [r3, #0]
    CmdResponseQueue   = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    47e8:	2200      	movs	r2, #0
    47ea:	2108      	movs	r1, #8
    47ec:	2001      	movs	r0, #1
    47ee:	47a0      	blx	r4
    47f0:	4b14      	ldr	r3, [pc, #80]	; (4844 <createQueuesAndSemaphores+0x78>)
    47f2:	6018      	str	r0, [r3, #0]
    FotaResponseQueue  = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    47f4:	2200      	movs	r2, #0
    47f6:	2108      	movs	r1, #8
    47f8:	2001      	movs	r0, #1
    47fa:	47a0      	blx	r4
    47fc:	4b12      	ldr	r3, [pc, #72]	; (4848 <createQueuesAndSemaphores+0x7c>)
    47fe:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    4800:	682b      	ldr	r3, [r5, #0]
    4802:	b1bb      	cbz	r3, 4834 <createQueuesAndSemaphores+0x68>
       (AtReceiveQueue  != NULL) &&
    4804:	4b0e      	ldr	r3, [pc, #56]	; (4840 <createQueuesAndSemaphores+0x74>)
    if((AtTransmitQueue != NULL) &&
    4806:	681b      	ldr	r3, [r3, #0]
    4808:	b1a3      	cbz	r3, 4834 <createQueuesAndSemaphores+0x68>
	   (CmdResponseQueue != NULL) &&
    480a:	4b0e      	ldr	r3, [pc, #56]	; (4844 <createQueuesAndSemaphores+0x78>)
       (AtReceiveQueue  != NULL) &&
    480c:	681b      	ldr	r3, [r3, #0]
    480e:	b18b      	cbz	r3, 4834 <createQueuesAndSemaphores+0x68>
	   (CmdResponseQueue != NULL) &&
    4810:	b180      	cbz	r0, 4834 <createQueuesAndSemaphores+0x68>
	   (FotaResponseQueue != NULL))
    {
    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    4812:	2203      	movs	r2, #3
    4814:	2100      	movs	r1, #0
    4816:	2001      	movs	r0, #1
    4818:	47a0      	blx	r4
    481a:	4b0c      	ldr	r3, [pc, #48]	; (484c <createQueuesAndSemaphores+0x80>)
    481c:	6018      	str	r0, [r3, #0]
    	SensorScanSemaphore    = xSemaphoreCreateBinary();
    481e:	2203      	movs	r2, #3
    4820:	2100      	movs	r1, #0
    4822:	2001      	movs	r0, #1
    4824:	47a0      	blx	r4
    4826:	4b0a      	ldr	r3, [pc, #40]	; (4850 <createQueuesAndSemaphores+0x84>)
    4828:	6018      	str	r0, [r3, #0]
    	DebugPrintMutex        = xSemaphoreCreateMutex();
    482a:	2001      	movs	r0, #1
    482c:	4b09      	ldr	r3, [pc, #36]	; (4854 <createQueuesAndSemaphores+0x88>)
    482e:	4798      	blx	r3
    4830:	4b09      	ldr	r3, [pc, #36]	; (4858 <createQueuesAndSemaphores+0x8c>)
    4832:	6018      	str	r0, [r3, #0]
    }
    else
    {
    	status = false;
    }
}
    4834:	bd38      	pop	{r3, r4, r5, pc}
    4836:	bf00      	nop
    4838:	00005145 	.word	0x00005145
    483c:	20003568 	.word	0x20003568
    4840:	20003580 	.word	0x20003580
    4844:	20003544 	.word	0x20003544
    4848:	20003574 	.word	0x20003574
    484c:	2000357c 	.word	0x2000357c
    4850:	20003578 	.word	0x20003578
    4854:	00005379 	.word	0x00005379
    4858:	20003570 	.word	0x20003570

0000485c <main>:
{
    485c:	b580      	push	{r7, lr}
    485e:	b082      	sub	sp, #8
    atmel_start_init();	
    4860:	4b2e      	ldr	r3, [pc, #184]	; (491c <main+0xc0>)
    4862:	4798      	blx	r3
    SensorTaskStatus = xTaskCreate( SensorTask, "SensorTask", 150, NULL, 2, &xSensorTaskHandle );
    4864:	4b2e      	ldr	r3, [pc, #184]	; (4920 <main+0xc4>)
    4866:	9301      	str	r3, [sp, #4]
    4868:	2702      	movs	r7, #2
    486a:	9700      	str	r7, [sp, #0]
    486c:	2300      	movs	r3, #0
    486e:	2296      	movs	r2, #150	; 0x96
    4870:	492c      	ldr	r1, [pc, #176]	; (4924 <main+0xc8>)
    4872:	482d      	ldr	r0, [pc, #180]	; (4928 <main+0xcc>)
    4874:	4d2d      	ldr	r5, [pc, #180]	; (492c <main+0xd0>)
    4876:	47a8      	blx	r5
    4878:	4c2d      	ldr	r4, [pc, #180]	; (4930 <main+0xd4>)
    487a:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTxTask", 150, NULL, 1, &xModemTxTaskHandle );
    487c:	4b2d      	ldr	r3, [pc, #180]	; (4934 <main+0xd8>)
    487e:	9301      	str	r3, [sp, #4]
    4880:	2601      	movs	r6, #1
    4882:	9600      	str	r6, [sp, #0]
    4884:	2300      	movs	r3, #0
    4886:	2296      	movs	r2, #150	; 0x96
    4888:	492b      	ldr	r1, [pc, #172]	; (4938 <main+0xdc>)
    488a:	482c      	ldr	r0, [pc, #176]	; (493c <main+0xe0>)
    488c:	47a8      	blx	r5
    488e:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    4890:	4b2b      	ldr	r3, [pc, #172]	; (4940 <main+0xe4>)
    4892:	9301      	str	r3, [sp, #4]
    4894:	9700      	str	r7, [sp, #0]
    4896:	2300      	movs	r3, #0
    4898:	2296      	movs	r2, #150	; 0x96
    489a:	492a      	ldr	r1, [pc, #168]	; (4944 <main+0xe8>)
    489c:	482a      	ldr	r0, [pc, #168]	; (4948 <main+0xec>)
    489e:	47a8      	blx	r5
    48a0:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    48a2:	4b2a      	ldr	r3, [pc, #168]	; (494c <main+0xf0>)
    48a4:	9301      	str	r3, [sp, #4]
    48a6:	9600      	str	r6, [sp, #0]
    48a8:	2300      	movs	r3, #0
    48aa:	2296      	movs	r2, #150	; 0x96
    48ac:	4928      	ldr	r1, [pc, #160]	; (4950 <main+0xf4>)
    48ae:	4829      	ldr	r0, [pc, #164]	; (4954 <main+0xf8>)
    48b0:	47a8      	blx	r5
    48b2:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    48b4:	4b28      	ldr	r3, [pc, #160]	; (4958 <main+0xfc>)
    48b6:	9301      	str	r3, [sp, #4]
    48b8:	9600      	str	r6, [sp, #0]
    48ba:	2300      	movs	r3, #0
    48bc:	2296      	movs	r2, #150	; 0x96
    48be:	4927      	ldr	r1, [pc, #156]	; (495c <main+0x100>)
    48c0:	4827      	ldr	r0, [pc, #156]	; (4960 <main+0x104>)
    48c2:	47a8      	blx	r5
    48c4:	6120      	str	r0, [r4, #16]
	FotaAppTaskStatus =  xTaskCreate( FotaAppTask, "FotaAppTask", 100, NULL, 1, &xFotaAppTaskHandle);
    48c6:	4b27      	ldr	r3, [pc, #156]	; (4964 <main+0x108>)
    48c8:	9301      	str	r3, [sp, #4]
    48ca:	9600      	str	r6, [sp, #0]
    48cc:	2300      	movs	r3, #0
    48ce:	2264      	movs	r2, #100	; 0x64
    48d0:	4925      	ldr	r1, [pc, #148]	; (4968 <main+0x10c>)
    48d2:	4826      	ldr	r0, [pc, #152]	; (496c <main+0x110>)
    48d4:	47a8      	blx	r5
    if((SensorTaskStatus == pdPASS) &&
    48d6:	6823      	ldr	r3, [r4, #0]
    48d8:	42b3      	cmp	r3, r6
    48da:	d006      	beq.n	48ea <main+0x8e>
    	DEBUG_PRINT("Failed to create tasks");
    48dc:	4824      	ldr	r0, [pc, #144]	; (4970 <main+0x114>)
    48de:	4b25      	ldr	r3, [pc, #148]	; (4974 <main+0x118>)
    48e0:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    48e2:	4825      	ldr	r0, [pc, #148]	; (4978 <main+0x11c>)
    48e4:	4b23      	ldr	r3, [pc, #140]	; (4974 <main+0x118>)
    48e6:	4798      	blx	r3
    48e8:	e7fe      	b.n	48e8 <main+0x8c>
    if((SensorTaskStatus == pdPASS) &&
    48ea:	68e3      	ldr	r3, [r4, #12]
    48ec:	42b3      	cmp	r3, r6
    48ee:	d1f5      	bne.n	48dc <main+0x80>
       (ModemProcessTaskStatus == pdPASS) &&
    48f0:	6863      	ldr	r3, [r4, #4]
    48f2:	42b3      	cmp	r3, r6
    48f4:	d1f2      	bne.n	48dc <main+0x80>
       (ModemTxTaskStatus == pdPASS) &&
    48f6:	68a3      	ldr	r3, [r4, #8]
    48f8:	42b3      	cmp	r3, r6
    48fa:	d1ef      	bne.n	48dc <main+0x80>
       (ModemRxTaskStatus == pdPASS) &&
    48fc:	6923      	ldr	r3, [r4, #16]
    48fe:	42b3      	cmp	r3, r6
    4900:	d1ec      	bne.n	48dc <main+0x80>
	   (ModemDiagTaskStatus == pdPASS) &&
    4902:	42b0      	cmp	r0, r6
    4904:	d1ea      	bne.n	48dc <main+0x80>
    	if(false != createQueuesAndSemaphores())
    4906:	4b1d      	ldr	r3, [pc, #116]	; (497c <main+0x120>)
    4908:	4798      	blx	r3
    490a:	b110      	cbz	r0, 4912 <main+0xb6>
    		vTaskStartScheduler();
    490c:	4b1c      	ldr	r3, [pc, #112]	; (4980 <main+0x124>)
    490e:	4798      	blx	r3
    4910:	e7e7      	b.n	48e2 <main+0x86>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    4912:	481c      	ldr	r0, [pc, #112]	; (4984 <main+0x128>)
    4914:	4b17      	ldr	r3, [pc, #92]	; (4974 <main+0x118>)
    4916:	4798      	blx	r3
    4918:	e7e3      	b.n	48e2 <main+0x86>
    491a:	bf00      	nop
    491c:	00003309 	.word	0x00003309
    4920:	2000356c 	.word	0x2000356c
    4924:	00009154 	.word	0x00009154
    4928:	0000109d 	.word	0x0000109d
    492c:	00005975 	.word	0x00005975
    4930:	20000be0 	.word	0x20000be0
    4934:	20003548 	.word	0x20003548
    4938:	00009160 	.word	0x00009160
    493c:	00002fb1 	.word	0x00002fb1
    4940:	20003560 	.word	0x20003560
    4944:	0000916c 	.word	0x0000916c
    4948:	00002f45 	.word	0x00002f45
    494c:	20003554 	.word	0x20003554
    4950:	00009178 	.word	0x00009178
    4954:	00002d19 	.word	0x00002d19
    4958:	20003558 	.word	0x20003558
    495c:	0000918c 	.word	0x0000918c
    4960:	00002859 	.word	0x00002859
    4964:	20003550 	.word	0x20003550
    4968:	0000919c 	.word	0x0000919c
    496c:	000005ad 	.word	0x000005ad
    4970:	000091c8 	.word	0x000091c8
    4974:	0000313d 	.word	0x0000313d
    4978:	000091e0 	.word	0x000091e0
    497c:	000047cd 	.word	0x000047cd
    4980:	00005b51 	.word	0x00005b51
    4984:	000091a8 	.word	0x000091a8

00004988 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    4988:	f100 0308 	add.w	r3, r0, #8
    498c:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    498e:	f04f 32ff 	mov.w	r2, #4294967295
    4992:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    4994:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    4996:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    4998:	2300      	movs	r3, #0
    499a:	6003      	str	r3, [r0, #0]
    499c:	4770      	bx	lr

0000499e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    499e:	2300      	movs	r3, #0
    49a0:	6103      	str	r3, [r0, #16]
    49a2:	4770      	bx	lr

000049a4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    49a4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    49a6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    49a8:	689a      	ldr	r2, [r3, #8]
    49aa:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    49ac:	689a      	ldr	r2, [r3, #8]
    49ae:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    49b0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    49b2:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    49b4:	6803      	ldr	r3, [r0, #0]
    49b6:	3301      	adds	r3, #1
    49b8:	6003      	str	r3, [r0, #0]
    49ba:	4770      	bx	lr

000049bc <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    49bc:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    49be:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    49c0:	f1b5 3fff 	cmp.w	r5, #4294967295
    49c4:	d002      	beq.n	49cc <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    49c6:	f100 0208 	add.w	r2, r0, #8
    49ca:	e002      	b.n	49d2 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    49cc:	6902      	ldr	r2, [r0, #16]
    49ce:	e004      	b.n	49da <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    49d0:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    49d2:	6853      	ldr	r3, [r2, #4]
    49d4:	681c      	ldr	r4, [r3, #0]
    49d6:	42a5      	cmp	r5, r4
    49d8:	d2fa      	bcs.n	49d0 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    49da:	6853      	ldr	r3, [r2, #4]
    49dc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    49de:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    49e0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    49e2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    49e4:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    49e6:	6803      	ldr	r3, [r0, #0]
    49e8:	3301      	adds	r3, #1
    49ea:	6003      	str	r3, [r0, #0]
}
    49ec:	bc30      	pop	{r4, r5}
    49ee:	4770      	bx	lr

000049f0 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    49f0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    49f2:	6842      	ldr	r2, [r0, #4]
    49f4:	6881      	ldr	r1, [r0, #8]
    49f6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    49f8:	6882      	ldr	r2, [r0, #8]
    49fa:	6841      	ldr	r1, [r0, #4]
    49fc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    49fe:	685a      	ldr	r2, [r3, #4]
    4a00:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4a02:	bf04      	itt	eq
    4a04:	6882      	ldreq	r2, [r0, #8]
    4a06:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    4a08:	2200      	movs	r2, #0
    4a0a:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    4a0c:	681a      	ldr	r2, [r3, #0]
    4a0e:	3a01      	subs	r2, #1
    4a10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    4a12:	6818      	ldr	r0, [r3, #0]
}
    4a14:	4770      	bx	lr
	...

00004a18 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    4a18:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    4a1a:	2300      	movs	r3, #0
    4a1c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    4a1e:	4b0d      	ldr	r3, [pc, #52]	; (4a54 <prvTaskExitError+0x3c>)
    4a20:	681b      	ldr	r3, [r3, #0]
    4a22:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a26:	d008      	beq.n	4a3a <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    4a28:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a2c:	f383 8811 	msr	BASEPRI, r3
    4a30:	f3bf 8f6f 	isb	sy
    4a34:	f3bf 8f4f 	dsb	sy
    4a38:	e7fe      	b.n	4a38 <prvTaskExitError+0x20>
    4a3a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a3e:	f383 8811 	msr	BASEPRI, r3
    4a42:	f3bf 8f6f 	isb	sy
    4a46:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    4a4a:	9b01      	ldr	r3, [sp, #4]
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d0fc      	beq.n	4a4a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    4a50:	b002      	add	sp, #8
    4a52:	4770      	bx	lr
    4a54:	20000070 	.word	0x20000070

00004a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    4a58:	4808      	ldr	r0, [pc, #32]	; (4a7c <prvPortStartFirstTask+0x24>)
    4a5a:	6800      	ldr	r0, [r0, #0]
    4a5c:	6800      	ldr	r0, [r0, #0]
    4a5e:	f380 8808 	msr	MSP, r0
    4a62:	f04f 0000 	mov.w	r0, #0
    4a66:	f380 8814 	msr	CONTROL, r0
    4a6a:	b662      	cpsie	i
    4a6c:	b661      	cpsie	f
    4a6e:	f3bf 8f4f 	dsb	sy
    4a72:	f3bf 8f6f 	isb	sy
    4a76:	df00      	svc	0
    4a78:	bf00      	nop
    4a7a:	0000      	.short	0x0000
    4a7c:	e000ed08 	.word	0xe000ed08

00004a80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    4a80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4a90 <vPortEnableVFP+0x10>
    4a84:	6801      	ldr	r1, [r0, #0]
    4a86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4a8a:	6001      	str	r1, [r0, #0]
    4a8c:	4770      	bx	lr
    4a8e:	0000      	.short	0x0000
    4a90:	e000ed88 	.word	0xe000ed88

00004a94 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    4a94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4a98:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    4a9c:	f021 0101 	bic.w	r1, r1, #1
    4aa0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    4aa4:	4b05      	ldr	r3, [pc, #20]	; (4abc <pxPortInitialiseStack+0x28>)
    4aa6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    4aaa:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    4aae:	f06f 0302 	mvn.w	r3, #2
    4ab2:	f840 3c24 	str.w	r3, [r0, #-36]
}
    4ab6:	3844      	subs	r0, #68	; 0x44
    4ab8:	4770      	bx	lr
    4aba:	bf00      	nop
    4abc:	00004a19 	.word	0x00004a19

00004ac0 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    4ac0:	4b07      	ldr	r3, [pc, #28]	; (4ae0 <pxCurrentTCBConst2>)
    4ac2:	6819      	ldr	r1, [r3, #0]
    4ac4:	6808      	ldr	r0, [r1, #0]
    4ac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4aca:	f380 8809 	msr	PSP, r0
    4ace:	f3bf 8f6f 	isb	sy
    4ad2:	f04f 0000 	mov.w	r0, #0
    4ad6:	f380 8811 	msr	BASEPRI, r0
    4ada:	4770      	bx	lr
    4adc:	f3af 8000 	nop.w

00004ae0 <pxCurrentTCBConst2>:
    4ae0:	200034a8 	.word	0x200034a8

00004ae4 <vPortEnterCritical>:
    4ae4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ae8:	f383 8811 	msr	BASEPRI, r3
    4aec:	f3bf 8f6f 	isb	sy
    4af0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    4af4:	4a0a      	ldr	r2, [pc, #40]	; (4b20 <vPortEnterCritical+0x3c>)
    4af6:	6813      	ldr	r3, [r2, #0]
    4af8:	3301      	adds	r3, #1
    4afa:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    4afc:	2b01      	cmp	r3, #1
    4afe:	d10d      	bne.n	4b1c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    4b00:	4b08      	ldr	r3, [pc, #32]	; (4b24 <vPortEnterCritical+0x40>)
    4b02:	681b      	ldr	r3, [r3, #0]
    4b04:	f013 0fff 	tst.w	r3, #255	; 0xff
    4b08:	d008      	beq.n	4b1c <vPortEnterCritical+0x38>
    4b0a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b0e:	f383 8811 	msr	BASEPRI, r3
    4b12:	f3bf 8f6f 	isb	sy
    4b16:	f3bf 8f4f 	dsb	sy
    4b1a:	e7fe      	b.n	4b1a <vPortEnterCritical+0x36>
    4b1c:	4770      	bx	lr
    4b1e:	bf00      	nop
    4b20:	20000070 	.word	0x20000070
    4b24:	e000ed04 	.word	0xe000ed04

00004b28 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    4b28:	4b09      	ldr	r3, [pc, #36]	; (4b50 <vPortExitCritical+0x28>)
    4b2a:	681b      	ldr	r3, [r3, #0]
    4b2c:	b943      	cbnz	r3, 4b40 <vPortExitCritical+0x18>
    4b2e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b32:	f383 8811 	msr	BASEPRI, r3
    4b36:	f3bf 8f6f 	isb	sy
    4b3a:	f3bf 8f4f 	dsb	sy
    4b3e:	e7fe      	b.n	4b3e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    4b40:	3b01      	subs	r3, #1
    4b42:	4a03      	ldr	r2, [pc, #12]	; (4b50 <vPortExitCritical+0x28>)
    4b44:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    4b46:	b90b      	cbnz	r3, 4b4c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4b48:	f383 8811 	msr	BASEPRI, r3
    4b4c:	4770      	bx	lr
    4b4e:	bf00      	nop
    4b50:	20000070 	.word	0x20000070
	...

00004b60 <PendSV_Handler>:
	__asm volatile(
    4b60:	f3ef 8009 	mrs	r0, PSP
    4b64:	f3bf 8f6f 	isb	sy
    4b68:	4b15      	ldr	r3, [pc, #84]	; (4bc0 <pxCurrentTCBConst>)
    4b6a:	681a      	ldr	r2, [r3, #0]
    4b6c:	f01e 0f10 	tst.w	lr, #16
    4b70:	bf08      	it	eq
    4b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b7a:	6010      	str	r0, [r2, #0]
    4b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
    4b80:	f04f 0080 	mov.w	r0, #128	; 0x80
    4b84:	f380 8811 	msr	BASEPRI, r0
    4b88:	f3bf 8f4f 	dsb	sy
    4b8c:	f3bf 8f6f 	isb	sy
    4b90:	f001 f978 	bl	5e84 <vTaskSwitchContext>
    4b94:	f04f 0000 	mov.w	r0, #0
    4b98:	f380 8811 	msr	BASEPRI, r0
    4b9c:	bc09      	pop	{r0, r3}
    4b9e:	6819      	ldr	r1, [r3, #0]
    4ba0:	6808      	ldr	r0, [r1, #0]
    4ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4ba6:	f01e 0f10 	tst.w	lr, #16
    4baa:	bf08      	it	eq
    4bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4bb0:	f380 8809 	msr	PSP, r0
    4bb4:	f3bf 8f6f 	isb	sy
    4bb8:	4770      	bx	lr
    4bba:	bf00      	nop
    4bbc:	f3af 8000 	nop.w

00004bc0 <pxCurrentTCBConst>:
    4bc0:	200034a8 	.word	0x200034a8

00004bc4 <SysTick_Handler>:
{
    4bc4:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    4bc6:	f04f 0380 	mov.w	r3, #128	; 0x80
    4bca:	f383 8811 	msr	BASEPRI, r3
    4bce:	f3bf 8f6f 	isb	sy
    4bd2:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    4bd6:	4b05      	ldr	r3, [pc, #20]	; (4bec <SysTick_Handler+0x28>)
    4bd8:	4798      	blx	r3
    4bda:	b118      	cbz	r0, 4be4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    4bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4be0:	4b03      	ldr	r3, [pc, #12]	; (4bf0 <SysTick_Handler+0x2c>)
    4be2:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4be4:	2300      	movs	r3, #0
    4be6:	f383 8811 	msr	BASEPRI, r3
    4bea:	bd08      	pop	{r3, pc}
    4bec:	00005bf9 	.word	0x00005bf9
    4bf0:	e000ed04 	.word	0xe000ed04

00004bf4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    4bf4:	4b05      	ldr	r3, [pc, #20]	; (4c0c <vPortSetupTimerInterrupt+0x18>)
    4bf6:	2200      	movs	r2, #0
    4bf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    4bfa:	4905      	ldr	r1, [pc, #20]	; (4c10 <vPortSetupTimerInterrupt+0x1c>)
    4bfc:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    4bfe:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    4c02:	4a04      	ldr	r2, [pc, #16]	; (4c14 <vPortSetupTimerInterrupt+0x20>)
    4c04:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    4c06:	2207      	movs	r2, #7
    4c08:	601a      	str	r2, [r3, #0]
    4c0a:	4770      	bx	lr
    4c0c:	e000e010 	.word	0xe000e010
    4c10:	e000e018 	.word	0xe000e018
    4c14:	e000e014 	.word	0xe000e014

00004c18 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    4c18:	4b3b      	ldr	r3, [pc, #236]	; (4d08 <xPortStartScheduler+0xf0>)
    4c1a:	681a      	ldr	r2, [r3, #0]
    4c1c:	4b3b      	ldr	r3, [pc, #236]	; (4d0c <xPortStartScheduler+0xf4>)
    4c1e:	429a      	cmp	r2, r3
    4c20:	d108      	bne.n	4c34 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    4c22:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c26:	f383 8811 	msr	BASEPRI, r3
    4c2a:	f3bf 8f6f 	isb	sy
    4c2e:	f3bf 8f4f 	dsb	sy
    4c32:	e7fe      	b.n	4c32 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    4c34:	4b34      	ldr	r3, [pc, #208]	; (4d08 <xPortStartScheduler+0xf0>)
    4c36:	681a      	ldr	r2, [r3, #0]
    4c38:	4b35      	ldr	r3, [pc, #212]	; (4d10 <xPortStartScheduler+0xf8>)
    4c3a:	429a      	cmp	r2, r3
    4c3c:	d108      	bne.n	4c50 <xPortStartScheduler+0x38>
    4c3e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c42:	f383 8811 	msr	BASEPRI, r3
    4c46:	f3bf 8f6f 	isb	sy
    4c4a:	f3bf 8f4f 	dsb	sy
    4c4e:	e7fe      	b.n	4c4e <xPortStartScheduler+0x36>
{
    4c50:	b510      	push	{r4, lr}
    4c52:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    4c54:	4b2f      	ldr	r3, [pc, #188]	; (4d14 <xPortStartScheduler+0xfc>)
    4c56:	781a      	ldrb	r2, [r3, #0]
    4c58:	b2d2      	uxtb	r2, r2
    4c5a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    4c5c:	22ff      	movs	r2, #255	; 0xff
    4c5e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    4c60:	781b      	ldrb	r3, [r3, #0]
    4c62:	b2db      	uxtb	r3, r3
    4c64:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    4c68:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4c6c:	4a2a      	ldr	r2, [pc, #168]	; (4d18 <xPortStartScheduler+0x100>)
    4c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4c72:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    4c74:	2307      	movs	r3, #7
    4c76:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4c78:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4c7c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4c80:	d012      	beq.n	4ca8 <xPortStartScheduler+0x90>
    4c82:	2306      	movs	r3, #6
    4c84:	e000      	b.n	4c88 <xPortStartScheduler+0x70>
    4c86:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    4c88:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4c8c:	0052      	lsls	r2, r2, #1
    4c8e:	b2d2      	uxtb	r2, r2
    4c90:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4c94:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4c98:	1e59      	subs	r1, r3, #1
    4c9a:	f012 0f80 	tst.w	r2, #128	; 0x80
    4c9e:	d1f2      	bne.n	4c86 <xPortStartScheduler+0x6e>
    4ca0:	4a1d      	ldr	r2, [pc, #116]	; (4d18 <xPortStartScheduler+0x100>)
    4ca2:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    4ca4:	2b04      	cmp	r3, #4
    4ca6:	d008      	beq.n	4cba <xPortStartScheduler+0xa2>
    4ca8:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cac:	f383 8811 	msr	BASEPRI, r3
    4cb0:	f3bf 8f6f 	isb	sy
    4cb4:	f3bf 8f4f 	dsb	sy
    4cb8:	e7fe      	b.n	4cb8 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    4cba:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    4cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4cc0:	4a15      	ldr	r2, [pc, #84]	; (4d18 <xPortStartScheduler+0x100>)
    4cc2:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    4cc4:	9b01      	ldr	r3, [sp, #4]
    4cc6:	b2db      	uxtb	r3, r3
    4cc8:	4a12      	ldr	r2, [pc, #72]	; (4d14 <xPortStartScheduler+0xfc>)
    4cca:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    4ccc:	4b13      	ldr	r3, [pc, #76]	; (4d1c <xPortStartScheduler+0x104>)
    4cce:	681a      	ldr	r2, [r3, #0]
    4cd0:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    4cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    4cd6:	681a      	ldr	r2, [r3, #0]
    4cd8:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    4cdc:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    4cde:	4b10      	ldr	r3, [pc, #64]	; (4d20 <xPortStartScheduler+0x108>)
    4ce0:	4798      	blx	r3
	uxCriticalNesting = 0;
    4ce2:	2400      	movs	r4, #0
    4ce4:	4b0f      	ldr	r3, [pc, #60]	; (4d24 <xPortStartScheduler+0x10c>)
    4ce6:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    4ce8:	4b0f      	ldr	r3, [pc, #60]	; (4d28 <xPortStartScheduler+0x110>)
    4cea:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    4cec:	4a0f      	ldr	r2, [pc, #60]	; (4d2c <xPortStartScheduler+0x114>)
    4cee:	6813      	ldr	r3, [r2, #0]
    4cf0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4cf4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    4cf6:	4b0e      	ldr	r3, [pc, #56]	; (4d30 <xPortStartScheduler+0x118>)
    4cf8:	4798      	blx	r3
	vTaskSwitchContext();
    4cfa:	4b0e      	ldr	r3, [pc, #56]	; (4d34 <xPortStartScheduler+0x11c>)
    4cfc:	4798      	blx	r3
	prvTaskExitError();
    4cfe:	4b0e      	ldr	r3, [pc, #56]	; (4d38 <xPortStartScheduler+0x120>)
    4d00:	4798      	blx	r3
}
    4d02:	4620      	mov	r0, r4
    4d04:	b002      	add	sp, #8
    4d06:	bd10      	pop	{r4, pc}
    4d08:	e000ed00 	.word	0xe000ed00
    4d0c:	410fc271 	.word	0x410fc271
    4d10:	410fc270 	.word	0x410fc270
    4d14:	e000e400 	.word	0xe000e400
    4d18:	20000bf4 	.word	0x20000bf4
    4d1c:	e000ed20 	.word	0xe000ed20
    4d20:	00004bf5 	.word	0x00004bf5
    4d24:	20000070 	.word	0x20000070
    4d28:	00004a81 	.word	0x00004a81
    4d2c:	e000ef34 	.word	0xe000ef34
    4d30:	00004a59 	.word	0x00004a59
    4d34:	00005e85 	.word	0x00005e85
    4d38:	00004a19 	.word	0x00004a19

00004d3c <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    4d3c:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    4d40:	2b0f      	cmp	r3, #15
    4d42:	d90f      	bls.n	4d64 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    4d44:	4a10      	ldr	r2, [pc, #64]	; (4d88 <vPortValidateInterruptPriority+0x4c>)
    4d46:	5c9b      	ldrb	r3, [r3, r2]
    4d48:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    4d4a:	4a10      	ldr	r2, [pc, #64]	; (4d8c <vPortValidateInterruptPriority+0x50>)
    4d4c:	7812      	ldrb	r2, [r2, #0]
    4d4e:	429a      	cmp	r2, r3
    4d50:	d908      	bls.n	4d64 <vPortValidateInterruptPriority+0x28>
    4d52:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d56:	f383 8811 	msr	BASEPRI, r3
    4d5a:	f3bf 8f6f 	isb	sy
    4d5e:	f3bf 8f4f 	dsb	sy
    4d62:	e7fe      	b.n	4d62 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    4d64:	4b0a      	ldr	r3, [pc, #40]	; (4d90 <vPortValidateInterruptPriority+0x54>)
    4d66:	681b      	ldr	r3, [r3, #0]
    4d68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4d6c:	4a07      	ldr	r2, [pc, #28]	; (4d8c <vPortValidateInterruptPriority+0x50>)
    4d6e:	6852      	ldr	r2, [r2, #4]
    4d70:	4293      	cmp	r3, r2
    4d72:	d908      	bls.n	4d86 <vPortValidateInterruptPriority+0x4a>
    4d74:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d78:	f383 8811 	msr	BASEPRI, r3
    4d7c:	f3bf 8f6f 	isb	sy
    4d80:	f3bf 8f4f 	dsb	sy
    4d84:	e7fe      	b.n	4d84 <vPortValidateInterruptPriority+0x48>
    4d86:	4770      	bx	lr
    4d88:	e000e3f0 	.word	0xe000e3f0
    4d8c:	20000bf4 	.word	0x20000bf4
    4d90:	e000ed0c 	.word	0xe000ed0c

00004d94 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4d94:	b570      	push	{r4, r5, r6, lr}
    4d96:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    4d98:	4b2f      	ldr	r3, [pc, #188]	; (4e58 <pvPortMalloc+0xc4>)
    4d9a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4d9c:	4b2f      	ldr	r3, [pc, #188]	; (4e5c <pvPortMalloc+0xc8>)
    4d9e:	689b      	ldr	r3, [r3, #8]
    4da0:	b183      	cbz	r3, 4dc4 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    4da2:	2c00      	cmp	r4, #0
    4da4:	d051      	beq.n	4e4a <pvPortMalloc+0xb6>
		{
			xWantedSize += heapSTRUCT_SIZE;
    4da6:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    4da8:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    4dac:	bf1c      	itt	ne
    4dae:	f024 0407 	bicne.w	r4, r4, #7
    4db2:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    4db4:	1e62      	subs	r2, r4, #1
    4db6:	f242 73f6 	movw	r3, #10230	; 0x27f6
    4dba:	429a      	cmp	r2, r3
    4dbc:	d842      	bhi.n	4e44 <pvPortMalloc+0xb0>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    4dbe:	4927      	ldr	r1, [pc, #156]	; (4e5c <pvPortMalloc+0xc8>)
    4dc0:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    4dc2:	e017      	b.n	4df4 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    4dc4:	4925      	ldr	r1, [pc, #148]	; (4e5c <pvPortMalloc+0xc8>)
    4dc6:	f101 0314 	add.w	r3, r1, #20
    4dca:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    4dce:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    4dd0:	2500      	movs	r5, #0
    4dd2:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    4dd4:	4a22      	ldr	r2, [pc, #136]	; (4e60 <pvPortMalloc+0xcc>)
    4dd6:	f242 70f8 	movw	r0, #10232	; 0x27f8
    4dda:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    4dde:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    4de2:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    4de4:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    4de8:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    4dea:	2301      	movs	r3, #1
    4dec:	608b      	str	r3, [r1, #8]
    4dee:	e7d8      	b.n	4da2 <pvPortMalloc+0xe>
    4df0:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    4df2:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    4df4:	685a      	ldr	r2, [r3, #4]
    4df6:	4294      	cmp	r4, r2
    4df8:	d902      	bls.n	4e00 <pvPortMalloc+0x6c>
    4dfa:	681a      	ldr	r2, [r3, #0]
    4dfc:	2a00      	cmp	r2, #0
    4dfe:	d1f7      	bne.n	4df0 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    4e00:	4a18      	ldr	r2, [pc, #96]	; (4e64 <pvPortMalloc+0xd0>)
    4e02:	4293      	cmp	r3, r2
    4e04:	d01e      	beq.n	4e44 <pvPortMalloc+0xb0>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    4e06:	680d      	ldr	r5, [r1, #0]
    4e08:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    4e0a:	681a      	ldr	r2, [r3, #0]
    4e0c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    4e0e:	685a      	ldr	r2, [r3, #4]
    4e10:	1b12      	subs	r2, r2, r4
    4e12:	2a10      	cmp	r2, #16
    4e14:	d90c      	bls.n	4e30 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    4e16:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    4e18:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    4e1a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    4e1c:	6874      	ldr	r4, [r6, #4]
    4e1e:	490f      	ldr	r1, [pc, #60]	; (4e5c <pvPortMalloc+0xc8>)
    4e20:	e000      	b.n	4e24 <pvPortMalloc+0x90>
    4e22:	4611      	mov	r1, r2
    4e24:	680a      	ldr	r2, [r1, #0]
    4e26:	6850      	ldr	r0, [r2, #4]
    4e28:	4284      	cmp	r4, r0
    4e2a:	d8fa      	bhi.n	4e22 <pvPortMalloc+0x8e>
    4e2c:	6032      	str	r2, [r6, #0]
    4e2e:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    4e30:	490d      	ldr	r1, [pc, #52]	; (4e68 <pvPortMalloc+0xd4>)
    4e32:	680a      	ldr	r2, [r1, #0]
    4e34:	685b      	ldr	r3, [r3, #4]
    4e36:	1ad2      	subs	r2, r2, r3
    4e38:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    4e3a:	4b0c      	ldr	r3, [pc, #48]	; (4e6c <pvPortMalloc+0xd8>)
    4e3c:	4798      	blx	r3
		if( pvReturn == NULL )
    4e3e:	b135      	cbz	r5, 4e4e <pvPortMalloc+0xba>
}
    4e40:	4628      	mov	r0, r5
    4e42:	bd70      	pop	{r4, r5, r6, pc}
	( void ) xTaskResumeAll();
    4e44:	4b09      	ldr	r3, [pc, #36]	; (4e6c <pvPortMalloc+0xd8>)
    4e46:	4798      	blx	r3
    4e48:	e001      	b.n	4e4e <pvPortMalloc+0xba>
    4e4a:	4b08      	ldr	r3, [pc, #32]	; (4e6c <pvPortMalloc+0xd8>)
    4e4c:	4798      	blx	r3
			vApplicationMallocFailedHook();
    4e4e:	4b08      	ldr	r3, [pc, #32]	; (4e70 <pvPortMalloc+0xdc>)
    4e50:	4798      	blx	r3
    4e52:	2500      	movs	r5, #0
	return pvReturn;
    4e54:	e7f4      	b.n	4e40 <pvPortMalloc+0xac>
    4e56:	bf00      	nop
    4e58:	00005bd9 	.word	0x00005bd9
    4e5c:	20000bfc 	.word	0x20000bfc
    4e60:	20002dec 	.word	0x20002dec
    4e64:	20003408 	.word	0x20003408
    4e68:	20000074 	.word	0x20000074
    4e6c:	00005d21 	.word	0x00005d21
    4e70:	0000033d 	.word	0x0000033d

00004e74 <vPortFree>:
	if( pv != NULL )
    4e74:	b1d0      	cbz	r0, 4eac <vPortFree+0x38>
{
    4e76:	b570      	push	{r4, r5, r6, lr}
    4e78:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    4e7a:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    4e7e:	4b0c      	ldr	r3, [pc, #48]	; (4eb0 <vPortFree+0x3c>)
    4e80:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    4e82:	f855 4c04 	ldr.w	r4, [r5, #-4]
    4e86:	4a0b      	ldr	r2, [pc, #44]	; (4eb4 <vPortFree+0x40>)
    4e88:	e000      	b.n	4e8c <vPortFree+0x18>
    4e8a:	461a      	mov	r2, r3
    4e8c:	6813      	ldr	r3, [r2, #0]
    4e8e:	6859      	ldr	r1, [r3, #4]
    4e90:	428c      	cmp	r4, r1
    4e92:	d8fa      	bhi.n	4e8a <vPortFree+0x16>
    4e94:	f845 3c08 	str.w	r3, [r5, #-8]
    4e98:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    4e9a:	4a07      	ldr	r2, [pc, #28]	; (4eb8 <vPortFree+0x44>)
    4e9c:	f855 3c04 	ldr.w	r3, [r5, #-4]
    4ea0:	6811      	ldr	r1, [r2, #0]
    4ea2:	440b      	add	r3, r1
    4ea4:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    4ea6:	4b05      	ldr	r3, [pc, #20]	; (4ebc <vPortFree+0x48>)
    4ea8:	4798      	blx	r3
    4eaa:	bd70      	pop	{r4, r5, r6, pc}
    4eac:	4770      	bx	lr
    4eae:	bf00      	nop
    4eb0:	00005bd9 	.word	0x00005bd9
    4eb4:	20000bfc 	.word	0x20000bfc
    4eb8:	20000074 	.word	0x20000074
    4ebc:	00005d21 	.word	0x00005d21

00004ec0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    4ec0:	b510      	push	{r4, lr}
    4ec2:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    4ec4:	4b04      	ldr	r3, [pc, #16]	; (4ed8 <prvIsQueueEmpty+0x18>)
    4ec6:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    4ec8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    4eca:	4b04      	ldr	r3, [pc, #16]	; (4edc <prvIsQueueEmpty+0x1c>)
    4ecc:	4798      	blx	r3

	return xReturn;
}
    4ece:	fab4 f084 	clz	r0, r4
    4ed2:	0940      	lsrs	r0, r0, #5
    4ed4:	bd10      	pop	{r4, pc}
    4ed6:	bf00      	nop
    4ed8:	00004ae5 	.word	0x00004ae5
    4edc:	00004b29 	.word	0x00004b29

00004ee0 <prvCopyDataToQueue>:
{
    4ee0:	b570      	push	{r4, r5, r6, lr}
    4ee2:	4604      	mov	r4, r0
    4ee4:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4ee6:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    4ee8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4eea:	b952      	cbnz	r2, 4f02 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4eec:	6803      	ldr	r3, [r0, #0]
    4eee:	2b00      	cmp	r3, #0
    4ef0:	d12a      	bne.n	4f48 <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    4ef2:	6840      	ldr	r0, [r0, #4]
    4ef4:	4b18      	ldr	r3, [pc, #96]	; (4f58 <prvCopyDataToQueue+0x78>)
    4ef6:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    4ef8:	2300      	movs	r3, #0
    4efa:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    4efc:	3501      	adds	r5, #1
    4efe:	63a5      	str	r5, [r4, #56]	; 0x38
}
    4f00:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    4f02:	b96e      	cbnz	r6, 4f20 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    4f04:	6880      	ldr	r0, [r0, #8]
    4f06:	4b15      	ldr	r3, [pc, #84]	; (4f5c <prvCopyDataToQueue+0x7c>)
    4f08:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4f0a:	68a3      	ldr	r3, [r4, #8]
    4f0c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4f0e:	4413      	add	r3, r2
    4f10:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    4f12:	6862      	ldr	r2, [r4, #4]
    4f14:	4293      	cmp	r3, r2
    4f16:	d319      	bcc.n	4f4c <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4f18:	6823      	ldr	r3, [r4, #0]
    4f1a:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    4f1c:	2000      	movs	r0, #0
    4f1e:	e7ed      	b.n	4efc <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    4f20:	68c0      	ldr	r0, [r0, #12]
    4f22:	4b0e      	ldr	r3, [pc, #56]	; (4f5c <prvCopyDataToQueue+0x7c>)
    4f24:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    4f26:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4f28:	425b      	negs	r3, r3
    4f2a:	68e2      	ldr	r2, [r4, #12]
    4f2c:	441a      	add	r2, r3
    4f2e:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    4f30:	6821      	ldr	r1, [r4, #0]
    4f32:	428a      	cmp	r2, r1
    4f34:	d202      	bcs.n	4f3c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    4f36:	6862      	ldr	r2, [r4, #4]
    4f38:	4413      	add	r3, r2
    4f3a:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    4f3c:	2e02      	cmp	r6, #2
    4f3e:	d107      	bne.n	4f50 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    4f40:	b145      	cbz	r5, 4f54 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    4f42:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    4f44:	2000      	movs	r0, #0
    4f46:	e7d9      	b.n	4efc <prvCopyDataToQueue+0x1c>
    4f48:	2000      	movs	r0, #0
    4f4a:	e7d7      	b.n	4efc <prvCopyDataToQueue+0x1c>
    4f4c:	2000      	movs	r0, #0
    4f4e:	e7d5      	b.n	4efc <prvCopyDataToQueue+0x1c>
    4f50:	2000      	movs	r0, #0
    4f52:	e7d3      	b.n	4efc <prvCopyDataToQueue+0x1c>
    4f54:	2000      	movs	r0, #0
    4f56:	e7d1      	b.n	4efc <prvCopyDataToQueue+0x1c>
    4f58:	000061c5 	.word	0x000061c5
    4f5c:	000069b9 	.word	0x000069b9

00004f60 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    4f60:	b570      	push	{r4, r5, r6, lr}
    4f62:	b082      	sub	sp, #8
    4f64:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    4f66:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    4f68:	b164      	cbz	r4, 4f84 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    4f6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4f6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4f6e:	429a      	cmp	r2, r3
    4f70:	d311      	bcc.n	4f96 <prvNotifyQueueSetContainer+0x36>
    4f72:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f76:	f383 8811 	msr	BASEPRI, r3
    4f7a:	f3bf 8f6f 	isb	sy
    4f7e:	f3bf 8f4f 	dsb	sy
    4f82:	e7fe      	b.n	4f82 <prvNotifyQueueSetContainer+0x22>
    4f84:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f88:	f383 8811 	msr	BASEPRI, r3
    4f8c:	f3bf 8f6f 	isb	sy
    4f90:	f3bf 8f4f 	dsb	sy
    4f94:	e7fe      	b.n	4f94 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    4f96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4f98:	4293      	cmp	r3, r2
    4f9a:	d803      	bhi.n	4fa4 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    4f9c:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    4f9e:	4630      	mov	r0, r6
    4fa0:	b002      	add	sp, #8
    4fa2:	bd70      	pop	{r4, r5, r6, pc}
    4fa4:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    4fa6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    4faa:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    4fac:	a901      	add	r1, sp, #4
    4fae:	4620      	mov	r0, r4
    4fb0:	4b0a      	ldr	r3, [pc, #40]	; (4fdc <prvNotifyQueueSetContainer+0x7c>)
    4fb2:	4798      	blx	r3
    4fb4:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    4fb6:	f1b5 3fff 	cmp.w	r5, #4294967295
    4fba:	d10a      	bne.n	4fd2 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    4fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	d0ed      	beq.n	4f9e <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    4fc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4fc6:	4b06      	ldr	r3, [pc, #24]	; (4fe0 <prvNotifyQueueSetContainer+0x80>)
    4fc8:	4798      	blx	r3
    4fca:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    4fcc:	bf18      	it	ne
    4fce:	2601      	movne	r6, #1
    4fd0:	e7e5      	b.n	4f9e <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    4fd2:	1c6b      	adds	r3, r5, #1
    4fd4:	b25b      	sxtb	r3, r3
    4fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    4fda:	e7e0      	b.n	4f9e <prvNotifyQueueSetContainer+0x3e>
    4fdc:	00004ee1 	.word	0x00004ee1
    4fe0:	00005fc1 	.word	0x00005fc1

00004fe4 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    4fe4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4fe6:	b172      	cbz	r2, 5006 <prvCopyDataFromQueue+0x22>
{
    4fe8:	b510      	push	{r4, lr}
    4fea:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    4fec:	68c4      	ldr	r4, [r0, #12]
    4fee:	4414      	add	r4, r2
    4ff0:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    4ff2:	6840      	ldr	r0, [r0, #4]
    4ff4:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    4ff6:	bf24      	itt	cs
    4ff8:	6818      	ldrcs	r0, [r3, #0]
    4ffa:	60d8      	strcs	r0, [r3, #12]
    4ffc:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    4ffe:	68d9      	ldr	r1, [r3, #12]
    5000:	4b01      	ldr	r3, [pc, #4]	; (5008 <prvCopyDataFromQueue+0x24>)
    5002:	4798      	blx	r3
    5004:	bd10      	pop	{r4, pc}
    5006:	4770      	bx	lr
    5008:	000069b9 	.word	0x000069b9

0000500c <prvUnlockQueue>:
{
    500c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5010:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    5012:	4b23      	ldr	r3, [pc, #140]	; (50a0 <prvUnlockQueue+0x94>)
    5014:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    5016:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    501a:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    501c:	2c00      	cmp	r4, #0
    501e:	dd19      	ble.n	5054 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    5020:	4e20      	ldr	r6, [pc, #128]	; (50a4 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    5022:	f8df 808c 	ldr.w	r8, [pc, #140]	; 50b0 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    5026:	4f20      	ldr	r7, [pc, #128]	; (50a8 <prvUnlockQueue+0x9c>)
    5028:	e008      	b.n	503c <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    502a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    502c:	b193      	cbz	r3, 5054 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    502e:	f105 0024 	add.w	r0, r5, #36	; 0x24
    5032:	47b8      	blx	r7
    5034:	b960      	cbnz	r0, 5050 <prvUnlockQueue+0x44>
    5036:	3c01      	subs	r4, #1
    5038:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    503a:	b15c      	cbz	r4, 5054 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    503c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    503e:	2b00      	cmp	r3, #0
    5040:	d0f3      	beq.n	502a <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    5042:	2100      	movs	r1, #0
    5044:	4628      	mov	r0, r5
    5046:	47b0      	blx	r6
    5048:	2800      	cmp	r0, #0
    504a:	d0f4      	beq.n	5036 <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    504c:	47c0      	blx	r8
    504e:	e7f2      	b.n	5036 <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    5050:	47c0      	blx	r8
    5052:	e7f0      	b.n	5036 <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    5054:	23ff      	movs	r3, #255	; 0xff
    5056:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    505a:	4b14      	ldr	r3, [pc, #80]	; (50ac <prvUnlockQueue+0xa0>)
    505c:	4798      	blx	r3
	taskENTER_CRITICAL();
    505e:	4b10      	ldr	r3, [pc, #64]	; (50a0 <prvUnlockQueue+0x94>)
    5060:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    5062:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    5066:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    5068:	2c00      	cmp	r4, #0
    506a:	dd12      	ble.n	5092 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    506c:	692b      	ldr	r3, [r5, #16]
    506e:	b183      	cbz	r3, 5092 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5070:	f105 0710 	add.w	r7, r5, #16
    5074:	4e0c      	ldr	r6, [pc, #48]	; (50a8 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    5076:	f8df 8038 	ldr.w	r8, [pc, #56]	; 50b0 <prvUnlockQueue+0xa4>
    507a:	e004      	b.n	5086 <prvUnlockQueue+0x7a>
    507c:	3c01      	subs	r4, #1
    507e:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    5080:	b13c      	cbz	r4, 5092 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5082:	692b      	ldr	r3, [r5, #16]
    5084:	b12b      	cbz	r3, 5092 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5086:	4638      	mov	r0, r7
    5088:	47b0      	blx	r6
    508a:	2800      	cmp	r0, #0
    508c:	d0f6      	beq.n	507c <prvUnlockQueue+0x70>
					vTaskMissedYield();
    508e:	47c0      	blx	r8
    5090:	e7f4      	b.n	507c <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    5092:	23ff      	movs	r3, #255	; 0xff
    5094:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    5098:	4b04      	ldr	r3, [pc, #16]	; (50ac <prvUnlockQueue+0xa0>)
    509a:	4798      	blx	r3
    509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    50a0:	00004ae5 	.word	0x00004ae5
    50a4:	00004f61 	.word	0x00004f61
    50a8:	00005fc1 	.word	0x00005fc1
    50ac:	00004b29 	.word	0x00004b29
    50b0:	000060f1 	.word	0x000060f1

000050b4 <xQueueGenericReset>:
{
    50b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    50b6:	b330      	cbz	r0, 5106 <xQueueGenericReset+0x52>
    50b8:	4604      	mov	r4, r0
    50ba:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    50bc:	4b1c      	ldr	r3, [pc, #112]	; (5130 <xQueueGenericReset+0x7c>)
    50be:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    50c0:	6822      	ldr	r2, [r4, #0]
    50c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    50c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    50c6:	fb03 f301 	mul.w	r3, r3, r1
    50ca:	18d0      	adds	r0, r2, r3
    50cc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    50ce:	2000      	movs	r0, #0
    50d0:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    50d2:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    50d4:	1a5b      	subs	r3, r3, r1
    50d6:	4413      	add	r3, r2
    50d8:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    50da:	23ff      	movs	r3, #255	; 0xff
    50dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    50e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    50e4:	b9c5      	cbnz	r5, 5118 <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    50e6:	6923      	ldr	r3, [r4, #16]
    50e8:	b1eb      	cbz	r3, 5126 <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    50ea:	f104 0010 	add.w	r0, r4, #16
    50ee:	4b11      	ldr	r3, [pc, #68]	; (5134 <xQueueGenericReset+0x80>)
    50f0:	4798      	blx	r3
    50f2:	b1c0      	cbz	r0, 5126 <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    50f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    50f8:	4b0f      	ldr	r3, [pc, #60]	; (5138 <xQueueGenericReset+0x84>)
    50fa:	601a      	str	r2, [r3, #0]
    50fc:	f3bf 8f4f 	dsb	sy
    5100:	f3bf 8f6f 	isb	sy
    5104:	e00f      	b.n	5126 <xQueueGenericReset+0x72>
    5106:	f04f 0380 	mov.w	r3, #128	; 0x80
    510a:	f383 8811 	msr	BASEPRI, r3
    510e:	f3bf 8f6f 	isb	sy
    5112:	f3bf 8f4f 	dsb	sy
    5116:	e7fe      	b.n	5116 <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    5118:	f104 0010 	add.w	r0, r4, #16
    511c:	4d07      	ldr	r5, [pc, #28]	; (513c <xQueueGenericReset+0x88>)
    511e:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    5120:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5124:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    5126:	4b06      	ldr	r3, [pc, #24]	; (5140 <xQueueGenericReset+0x8c>)
    5128:	4798      	blx	r3
}
    512a:	2001      	movs	r0, #1
    512c:	bd38      	pop	{r3, r4, r5, pc}
    512e:	bf00      	nop
    5130:	00004ae5 	.word	0x00004ae5
    5134:	00005fc1 	.word	0x00005fc1
    5138:	e000ed04 	.word	0xe000ed04
    513c:	00004989 	.word	0x00004989
    5140:	00004b29 	.word	0x00004b29

00005144 <xQueueGenericCreate>:
{
    5144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    5146:	b940      	cbnz	r0, 515a <xQueueGenericCreate+0x16>
    5148:	f04f 0380 	mov.w	r3, #128	; 0x80
    514c:	f383 8811 	msr	BASEPRI, r3
    5150:	f3bf 8f6f 	isb	sy
    5154:	f3bf 8f4f 	dsb	sy
    5158:	e7fe      	b.n	5158 <xQueueGenericCreate+0x14>
    515a:	4606      	mov	r6, r0
    515c:	4617      	mov	r7, r2
    515e:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    5160:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    5164:	3054      	adds	r0, #84	; 0x54
    5166:	4b0b      	ldr	r3, [pc, #44]	; (5194 <xQueueGenericCreate+0x50>)
    5168:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    516a:	4604      	mov	r4, r0
    516c:	b178      	cbz	r0, 518e <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    516e:	b11d      	cbz	r5, 5178 <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    5170:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    5174:	6003      	str	r3, [r0, #0]
    5176:	e000      	b.n	517a <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    5178:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    517a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    517c:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    517e:	2101      	movs	r1, #1
    5180:	4620      	mov	r0, r4
    5182:	4b05      	ldr	r3, [pc, #20]	; (5198 <xQueueGenericCreate+0x54>)
    5184:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    5186:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    518a:	2300      	movs	r3, #0
    518c:	64a3      	str	r3, [r4, #72]	; 0x48
}
    518e:	4620      	mov	r0, r4
    5190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5192:	bf00      	nop
    5194:	00004d95 	.word	0x00004d95
    5198:	000050b5 	.word	0x000050b5

0000519c <xQueueGenericSend>:
{
    519c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51a0:	b085      	sub	sp, #20
    51a2:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    51a4:	b198      	cbz	r0, 51ce <xQueueGenericSend+0x32>
    51a6:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    51a8:	b1d1      	cbz	r1, 51e0 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    51aa:	2b02      	cmp	r3, #2
    51ac:	d024      	beq.n	51f8 <xQueueGenericSend+0x5c>
    51ae:	461e      	mov	r6, r3
    51b0:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    51b2:	4b64      	ldr	r3, [pc, #400]	; (5344 <xQueueGenericSend+0x1a8>)
    51b4:	4798      	blx	r3
    51b6:	bb58      	cbnz	r0, 5210 <xQueueGenericSend+0x74>
    51b8:	9b01      	ldr	r3, [sp, #4]
    51ba:	b38b      	cbz	r3, 5220 <xQueueGenericSend+0x84>
    51bc:	f04f 0380 	mov.w	r3, #128	; 0x80
    51c0:	f383 8811 	msr	BASEPRI, r3
    51c4:	f3bf 8f6f 	isb	sy
    51c8:	f3bf 8f4f 	dsb	sy
    51cc:	e7fe      	b.n	51cc <xQueueGenericSend+0x30>
    51ce:	f04f 0380 	mov.w	r3, #128	; 0x80
    51d2:	f383 8811 	msr	BASEPRI, r3
    51d6:	f3bf 8f6f 	isb	sy
    51da:	f3bf 8f4f 	dsb	sy
    51de:	e7fe      	b.n	51de <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    51e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    51e2:	2a00      	cmp	r2, #0
    51e4:	d0e1      	beq.n	51aa <xQueueGenericSend+0xe>
    51e6:	f04f 0380 	mov.w	r3, #128	; 0x80
    51ea:	f383 8811 	msr	BASEPRI, r3
    51ee:	f3bf 8f6f 	isb	sy
    51f2:	f3bf 8f4f 	dsb	sy
    51f6:	e7fe      	b.n	51f6 <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    51f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    51fa:	2a01      	cmp	r2, #1
    51fc:	d0d7      	beq.n	51ae <xQueueGenericSend+0x12>
    51fe:	f04f 0380 	mov.w	r3, #128	; 0x80
    5202:	f383 8811 	msr	BASEPRI, r3
    5206:	f3bf 8f6f 	isb	sy
    520a:	f3bf 8f4f 	dsb	sy
    520e:	e7fe      	b.n	520e <xQueueGenericSend+0x72>
    5210:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    5212:	f8df 815c 	ldr.w	r8, [pc, #348]	; 5370 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5216:	f8df a15c 	ldr.w	sl, [pc, #348]	; 5374 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    521a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 5350 <xQueueGenericSend+0x1b4>
    521e:	e041      	b.n	52a4 <xQueueGenericSend+0x108>
    5220:	2500      	movs	r5, #0
    5222:	e7f6      	b.n	5212 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    5224:	4632      	mov	r2, r6
    5226:	4639      	mov	r1, r7
    5228:	4620      	mov	r0, r4
    522a:	4b47      	ldr	r3, [pc, #284]	; (5348 <xQueueGenericSend+0x1ac>)
    522c:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    522e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5230:	b193      	cbz	r3, 5258 <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    5232:	4631      	mov	r1, r6
    5234:	4620      	mov	r0, r4
    5236:	4b45      	ldr	r3, [pc, #276]	; (534c <xQueueGenericSend+0x1b0>)
    5238:	4798      	blx	r3
    523a:	b138      	cbz	r0, 524c <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    523c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5240:	4b43      	ldr	r3, [pc, #268]	; (5350 <xQueueGenericSend+0x1b4>)
    5242:	601a      	str	r2, [r3, #0]
    5244:	f3bf 8f4f 	dsb	sy
    5248:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    524c:	4b41      	ldr	r3, [pc, #260]	; (5354 <xQueueGenericSend+0x1b8>)
    524e:	4798      	blx	r3
				return pdPASS;
    5250:	2001      	movs	r0, #1
}
    5252:	b005      	add	sp, #20
    5254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    5258:	6a63      	ldr	r3, [r4, #36]	; 0x24
    525a:	b173      	cbz	r3, 527a <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    525c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5260:	4b3d      	ldr	r3, [pc, #244]	; (5358 <xQueueGenericSend+0x1bc>)
    5262:	4798      	blx	r3
    5264:	2800      	cmp	r0, #0
    5266:	d0f1      	beq.n	524c <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    5268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    526c:	4b38      	ldr	r3, [pc, #224]	; (5350 <xQueueGenericSend+0x1b4>)
    526e:	601a      	str	r2, [r3, #0]
    5270:	f3bf 8f4f 	dsb	sy
    5274:	f3bf 8f6f 	isb	sy
    5278:	e7e8      	b.n	524c <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    527a:	2800      	cmp	r0, #0
    527c:	d0e6      	beq.n	524c <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    527e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5282:	4b33      	ldr	r3, [pc, #204]	; (5350 <xQueueGenericSend+0x1b4>)
    5284:	601a      	str	r2, [r3, #0]
    5286:	f3bf 8f4f 	dsb	sy
    528a:	f3bf 8f6f 	isb	sy
    528e:	e7dd      	b.n	524c <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    5290:	4b30      	ldr	r3, [pc, #192]	; (5354 <xQueueGenericSend+0x1b8>)
    5292:	4798      	blx	r3
					return errQUEUE_FULL;
    5294:	2000      	movs	r0, #0
    5296:	e7dc      	b.n	5252 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    5298:	4620      	mov	r0, r4
    529a:	4b30      	ldr	r3, [pc, #192]	; (535c <xQueueGenericSend+0x1c0>)
    529c:	4798      	blx	r3
				(void)xTaskResumeAll();
    529e:	4b30      	ldr	r3, [pc, #192]	; (5360 <xQueueGenericSend+0x1c4>)
    52a0:	4798      	blx	r3
    52a2:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    52a4:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    52a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    52a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    52aa:	429a      	cmp	r2, r3
    52ac:	d3ba      	bcc.n	5224 <xQueueGenericSend+0x88>
    52ae:	2e02      	cmp	r6, #2
    52b0:	d0b8      	beq.n	5224 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    52b2:	9b01      	ldr	r3, [sp, #4]
    52b4:	2b00      	cmp	r3, #0
    52b6:	d0eb      	beq.n	5290 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    52b8:	b90d      	cbnz	r5, 52be <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    52ba:	a802      	add	r0, sp, #8
    52bc:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    52be:	4b25      	ldr	r3, [pc, #148]	; (5354 <xQueueGenericSend+0x1b8>)
    52c0:	4798      	blx	r3
		vTaskSuspendAll();
    52c2:	4b28      	ldr	r3, [pc, #160]	; (5364 <xQueueGenericSend+0x1c8>)
    52c4:	4798      	blx	r3
		prvLockQueue(pxQueue);
    52c6:	47c0      	blx	r8
    52c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    52cc:	b25b      	sxtb	r3, r3
    52ce:	f1b3 3fff 	cmp.w	r3, #4294967295
    52d2:	bf04      	itt	eq
    52d4:	2300      	moveq	r3, #0
    52d6:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    52da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    52de:	b25b      	sxtb	r3, r3
    52e0:	f1b3 3fff 	cmp.w	r3, #4294967295
    52e4:	bf04      	itt	eq
    52e6:	2300      	moveq	r3, #0
    52e8:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    52ec:	4b19      	ldr	r3, [pc, #100]	; (5354 <xQueueGenericSend+0x1b8>)
    52ee:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    52f0:	a901      	add	r1, sp, #4
    52f2:	a802      	add	r0, sp, #8
    52f4:	4b1c      	ldr	r3, [pc, #112]	; (5368 <xQueueGenericSend+0x1cc>)
    52f6:	4798      	blx	r3
    52f8:	b9e0      	cbnz	r0, 5334 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    52fa:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    52fc:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    5300:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    5302:	4b14      	ldr	r3, [pc, #80]	; (5354 <xQueueGenericSend+0x1b8>)
    5304:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    5306:	45ab      	cmp	fp, r5
    5308:	d1c6      	bne.n	5298 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    530a:	9901      	ldr	r1, [sp, #4]
    530c:	f104 0010 	add.w	r0, r4, #16
    5310:	4b16      	ldr	r3, [pc, #88]	; (536c <xQueueGenericSend+0x1d0>)
    5312:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5314:	4620      	mov	r0, r4
    5316:	4b11      	ldr	r3, [pc, #68]	; (535c <xQueueGenericSend+0x1c0>)
    5318:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    531a:	4b11      	ldr	r3, [pc, #68]	; (5360 <xQueueGenericSend+0x1c4>)
    531c:	4798      	blx	r3
    531e:	2800      	cmp	r0, #0
    5320:	d1bf      	bne.n	52a2 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    5322:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5326:	f8c9 3000 	str.w	r3, [r9]
    532a:	f3bf 8f4f 	dsb	sy
    532e:	f3bf 8f6f 	isb	sy
    5332:	e7b6      	b.n	52a2 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    5334:	4620      	mov	r0, r4
    5336:	4b09      	ldr	r3, [pc, #36]	; (535c <xQueueGenericSend+0x1c0>)
    5338:	4798      	blx	r3
			(void)xTaskResumeAll();
    533a:	4b09      	ldr	r3, [pc, #36]	; (5360 <xQueueGenericSend+0x1c4>)
    533c:	4798      	blx	r3
			return errQUEUE_FULL;
    533e:	2000      	movs	r0, #0
    5340:	e787      	b.n	5252 <xQueueGenericSend+0xb6>
    5342:	bf00      	nop
    5344:	00006101 	.word	0x00006101
    5348:	00004ee1 	.word	0x00004ee1
    534c:	00004f61 	.word	0x00004f61
    5350:	e000ed04 	.word	0xe000ed04
    5354:	00004b29 	.word	0x00004b29
    5358:	00005fc1 	.word	0x00005fc1
    535c:	0000500d 	.word	0x0000500d
    5360:	00005d21 	.word	0x00005d21
    5364:	00005bd9 	.word	0x00005bd9
    5368:	00006065 	.word	0x00006065
    536c:	00005f41 	.word	0x00005f41
    5370:	00004ae5 	.word	0x00004ae5
    5374:	00006051 	.word	0x00006051

00005378 <xQueueCreateMutex>:
{
    5378:	b538      	push	{r3, r4, r5, lr}
	pxNewQueue = (Queue_t *)xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType);
    537a:	4602      	mov	r2, r0
    537c:	2100      	movs	r1, #0
    537e:	2001      	movs	r0, #1
    5380:	4b06      	ldr	r3, [pc, #24]	; (539c <xQueueCreateMutex+0x24>)
    5382:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    5384:	4604      	mov	r4, r0
    5386:	b138      	cbz	r0, 5398 <xQueueCreateMutex+0x20>
		pxNewQueue->pxMutexHolder = NULL;
    5388:	2100      	movs	r1, #0
    538a:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    538c:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    538e:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    5390:	460b      	mov	r3, r1
    5392:	460a      	mov	r2, r1
    5394:	4d02      	ldr	r5, [pc, #8]	; (53a0 <xQueueCreateMutex+0x28>)
    5396:	47a8      	blx	r5
}
    5398:	4620      	mov	r0, r4
    539a:	bd38      	pop	{r3, r4, r5, pc}
    539c:	00005145 	.word	0x00005145
    53a0:	0000519d 	.word	0x0000519d

000053a4 <xQueueGenericSendFromISR>:
{
    53a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    53a8:	2800      	cmp	r0, #0
    53aa:	d036      	beq.n	541a <xQueueGenericSendFromISR+0x76>
    53ac:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    53ae:	2900      	cmp	r1, #0
    53b0:	d03c      	beq.n	542c <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    53b2:	2b02      	cmp	r3, #2
    53b4:	d046      	beq.n	5444 <xQueueGenericSendFromISR+0xa0>
    53b6:	461f      	mov	r7, r3
    53b8:	4690      	mov	r8, r2
    53ba:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    53bc:	4b37      	ldr	r3, [pc, #220]	; (549c <xQueueGenericSendFromISR+0xf8>)
    53be:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    53c0:	f3ef 8611 	mrs	r6, BASEPRI
    53c4:	f04f 0380 	mov.w	r3, #128	; 0x80
    53c8:	f383 8811 	msr	BASEPRI, r3
    53cc:	f3bf 8f6f 	isb	sy
    53d0:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    53d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    53d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    53d8:	429a      	cmp	r2, r3
    53da:	d301      	bcc.n	53e0 <xQueueGenericSendFromISR+0x3c>
    53dc:	2f02      	cmp	r7, #2
    53de:	d151      	bne.n	5484 <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    53e0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    53e4:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    53e6:	463a      	mov	r2, r7
    53e8:	4649      	mov	r1, r9
    53ea:	4620      	mov	r0, r4
    53ec:	4b2c      	ldr	r3, [pc, #176]	; (54a0 <xQueueGenericSendFromISR+0xfc>)
    53ee:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    53f0:	f1b5 3fff 	cmp.w	r5, #4294967295
    53f4:	d140      	bne.n	5478 <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    53f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    53f8:	b383      	cbz	r3, 545c <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    53fa:	4639      	mov	r1, r7
    53fc:	4620      	mov	r0, r4
    53fe:	4b29      	ldr	r3, [pc, #164]	; (54a4 <xQueueGenericSendFromISR+0x100>)
    5400:	4798      	blx	r3
    5402:	2800      	cmp	r0, #0
    5404:	d040      	beq.n	5488 <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    5406:	f1b8 0f00 	cmp.w	r8, #0
    540a:	d03f      	beq.n	548c <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    540c:	2001      	movs	r0, #1
    540e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    5412:	f386 8811 	msr	BASEPRI, r6
}
    5416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    541a:	f04f 0380 	mov.w	r3, #128	; 0x80
    541e:	f383 8811 	msr	BASEPRI, r3
    5422:	f3bf 8f6f 	isb	sy
    5426:	f3bf 8f4f 	dsb	sy
    542a:	e7fe      	b.n	542a <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    542c:	6c00      	ldr	r0, [r0, #64]	; 0x40
    542e:	2800      	cmp	r0, #0
    5430:	d0bf      	beq.n	53b2 <xQueueGenericSendFromISR+0xe>
    5432:	f04f 0380 	mov.w	r3, #128	; 0x80
    5436:	f383 8811 	msr	BASEPRI, r3
    543a:	f3bf 8f6f 	isb	sy
    543e:	f3bf 8f4f 	dsb	sy
    5442:	e7fe      	b.n	5442 <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    5444:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    5446:	2801      	cmp	r0, #1
    5448:	d0b5      	beq.n	53b6 <xQueueGenericSendFromISR+0x12>
    544a:	f04f 0380 	mov.w	r3, #128	; 0x80
    544e:	f383 8811 	msr	BASEPRI, r3
    5452:	f3bf 8f6f 	isb	sy
    5456:	f3bf 8f4f 	dsb	sy
    545a:	e7fe      	b.n	545a <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    545c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    545e:	b1bb      	cbz	r3, 5490 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    5460:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5464:	4b10      	ldr	r3, [pc, #64]	; (54a8 <xQueueGenericSendFromISR+0x104>)
    5466:	4798      	blx	r3
    5468:	b1a0      	cbz	r0, 5494 <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    546a:	f1b8 0f00 	cmp.w	r8, #0
    546e:	d013      	beq.n	5498 <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    5470:	2001      	movs	r0, #1
    5472:	f8c8 0000 	str.w	r0, [r8]
    5476:	e7cc      	b.n	5412 <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    5478:	1c6b      	adds	r3, r5, #1
    547a:	b25b      	sxtb	r3, r3
    547c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    5480:	2001      	movs	r0, #1
    5482:	e7c6      	b.n	5412 <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    5484:	2000      	movs	r0, #0
    5486:	e7c4      	b.n	5412 <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    5488:	2001      	movs	r0, #1
    548a:	e7c2      	b.n	5412 <xQueueGenericSendFromISR+0x6e>
    548c:	2001      	movs	r0, #1
    548e:	e7c0      	b.n	5412 <xQueueGenericSendFromISR+0x6e>
    5490:	2001      	movs	r0, #1
    5492:	e7be      	b.n	5412 <xQueueGenericSendFromISR+0x6e>
    5494:	2001      	movs	r0, #1
    5496:	e7bc      	b.n	5412 <xQueueGenericSendFromISR+0x6e>
    5498:	2001      	movs	r0, #1
    549a:	e7ba      	b.n	5412 <xQueueGenericSendFromISR+0x6e>
    549c:	00004d3d 	.word	0x00004d3d
    54a0:	00004ee1 	.word	0x00004ee1
    54a4:	00004f61 	.word	0x00004f61
    54a8:	00005fc1 	.word	0x00005fc1

000054ac <xQueueReceive>:
{
    54ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    54b0:	b084      	sub	sp, #16
    54b2:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    54b4:	b180      	cbz	r0, 54d8 <xQueueReceive+0x2c>
    54b6:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    54b8:	b1b9      	cbz	r1, 54ea <xQueueReceive+0x3e>
    54ba:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    54bc:	4b50      	ldr	r3, [pc, #320]	; (5600 <xQueueReceive+0x154>)
    54be:	4798      	blx	r3
    54c0:	b9f8      	cbnz	r0, 5502 <xQueueReceive+0x56>
    54c2:	9b01      	ldr	r3, [sp, #4]
    54c4:	b32b      	cbz	r3, 5512 <xQueueReceive+0x66>
    54c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    54ca:	f383 8811 	msr	BASEPRI, r3
    54ce:	f3bf 8f6f 	isb	sy
    54d2:	f3bf 8f4f 	dsb	sy
    54d6:	e7fe      	b.n	54d6 <xQueueReceive+0x2a>
    54d8:	f04f 0380 	mov.w	r3, #128	; 0x80
    54dc:	f383 8811 	msr	BASEPRI, r3
    54e0:	f3bf 8f6f 	isb	sy
    54e4:	f3bf 8f4f 	dsb	sy
    54e8:	e7fe      	b.n	54e8 <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    54ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
    54ec:	2b00      	cmp	r3, #0
    54ee:	d0e4      	beq.n	54ba <xQueueReceive+0xe>
    54f0:	f04f 0380 	mov.w	r3, #128	; 0x80
    54f4:	f383 8811 	msr	BASEPRI, r3
    54f8:	f3bf 8f6f 	isb	sy
    54fc:	f3bf 8f4f 	dsb	sy
    5500:	e7fe      	b.n	5500 <xQueueReceive+0x54>
    5502:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    5504:	f8df 8124 	ldr.w	r8, [pc, #292]	; 562c <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5508:	f8df a124 	ldr.w	sl, [pc, #292]	; 5630 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    550c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 560c <xQueueReceive+0x160>
    5510:	e029      	b.n	5566 <xQueueReceive+0xba>
    5512:	2700      	movs	r7, #0
    5514:	e7f6      	b.n	5504 <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    5516:	4631      	mov	r1, r6
    5518:	4620      	mov	r0, r4
    551a:	4b3a      	ldr	r3, [pc, #232]	; (5604 <xQueueReceive+0x158>)
    551c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    551e:	3d01      	subs	r5, #1
    5520:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5522:	6923      	ldr	r3, [r4, #16]
    5524:	b163      	cbz	r3, 5540 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5526:	f104 0010 	add.w	r0, r4, #16
    552a:	4b37      	ldr	r3, [pc, #220]	; (5608 <xQueueReceive+0x15c>)
    552c:	4798      	blx	r3
    552e:	b138      	cbz	r0, 5540 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    5530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5534:	4b35      	ldr	r3, [pc, #212]	; (560c <xQueueReceive+0x160>)
    5536:	601a      	str	r2, [r3, #0]
    5538:	f3bf 8f4f 	dsb	sy
    553c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    5540:	4b33      	ldr	r3, [pc, #204]	; (5610 <xQueueReceive+0x164>)
    5542:	4798      	blx	r3
				return pdPASS;
    5544:	2001      	movs	r0, #1
}
    5546:	b004      	add	sp, #16
    5548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    554c:	4b30      	ldr	r3, [pc, #192]	; (5610 <xQueueReceive+0x164>)
    554e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    5550:	2000      	movs	r0, #0
    5552:	e7f8      	b.n	5546 <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5554:	a802      	add	r0, sp, #8
    5556:	47d0      	blx	sl
    5558:	e00e      	b.n	5578 <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    555a:	4620      	mov	r0, r4
    555c:	4b2d      	ldr	r3, [pc, #180]	; (5614 <xQueueReceive+0x168>)
    555e:	4798      	blx	r3
				(void)xTaskResumeAll();
    5560:	4b2d      	ldr	r3, [pc, #180]	; (5618 <xQueueReceive+0x16c>)
    5562:	4798      	blx	r3
    5564:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    5566:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5568:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    556a:	2d00      	cmp	r5, #0
    556c:	d1d3      	bne.n	5516 <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    556e:	9b01      	ldr	r3, [sp, #4]
    5570:	2b00      	cmp	r3, #0
    5572:	d0eb      	beq.n	554c <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    5574:	2f00      	cmp	r7, #0
    5576:	d0ed      	beq.n	5554 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    5578:	4b25      	ldr	r3, [pc, #148]	; (5610 <xQueueReceive+0x164>)
    557a:	4798      	blx	r3
		vTaskSuspendAll();
    557c:	4b27      	ldr	r3, [pc, #156]	; (561c <xQueueReceive+0x170>)
    557e:	4798      	blx	r3
		prvLockQueue(pxQueue);
    5580:	47c0      	blx	r8
    5582:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5586:	b25b      	sxtb	r3, r3
    5588:	f1b3 3fff 	cmp.w	r3, #4294967295
    558c:	bf04      	itt	eq
    558e:	2300      	moveq	r3, #0
    5590:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5594:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5598:	b25b      	sxtb	r3, r3
    559a:	f1b3 3fff 	cmp.w	r3, #4294967295
    559e:	bf04      	itt	eq
    55a0:	2300      	moveq	r3, #0
    55a2:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    55a6:	4b1a      	ldr	r3, [pc, #104]	; (5610 <xQueueReceive+0x164>)
    55a8:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    55aa:	a901      	add	r1, sp, #4
    55ac:	a802      	add	r0, sp, #8
    55ae:	4b1c      	ldr	r3, [pc, #112]	; (5620 <xQueueReceive+0x174>)
    55b0:	4798      	blx	r3
    55b2:	b9c8      	cbnz	r0, 55e8 <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    55b4:	4620      	mov	r0, r4
    55b6:	4b1b      	ldr	r3, [pc, #108]	; (5624 <xQueueReceive+0x178>)
    55b8:	4798      	blx	r3
    55ba:	2800      	cmp	r0, #0
    55bc:	d0cd      	beq.n	555a <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    55be:	9901      	ldr	r1, [sp, #4]
    55c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    55c4:	4b18      	ldr	r3, [pc, #96]	; (5628 <xQueueReceive+0x17c>)
    55c6:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    55c8:	4620      	mov	r0, r4
    55ca:	4b12      	ldr	r3, [pc, #72]	; (5614 <xQueueReceive+0x168>)
    55cc:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    55ce:	4b12      	ldr	r3, [pc, #72]	; (5618 <xQueueReceive+0x16c>)
    55d0:	4798      	blx	r3
    55d2:	2800      	cmp	r0, #0
    55d4:	d1c6      	bne.n	5564 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    55d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    55da:	f8c9 3000 	str.w	r3, [r9]
    55de:	f3bf 8f4f 	dsb	sy
    55e2:	f3bf 8f6f 	isb	sy
    55e6:	e7bd      	b.n	5564 <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    55e8:	4620      	mov	r0, r4
    55ea:	4b0a      	ldr	r3, [pc, #40]	; (5614 <xQueueReceive+0x168>)
    55ec:	4798      	blx	r3
			(void)xTaskResumeAll();
    55ee:	4b0a      	ldr	r3, [pc, #40]	; (5618 <xQueueReceive+0x16c>)
    55f0:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    55f2:	4620      	mov	r0, r4
    55f4:	4b0b      	ldr	r3, [pc, #44]	; (5624 <xQueueReceive+0x178>)
    55f6:	4798      	blx	r3
    55f8:	2800      	cmp	r0, #0
    55fa:	d0b3      	beq.n	5564 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    55fc:	2000      	movs	r0, #0
    55fe:	e7a2      	b.n	5546 <xQueueReceive+0x9a>
    5600:	00006101 	.word	0x00006101
    5604:	00004fe5 	.word	0x00004fe5
    5608:	00005fc1 	.word	0x00005fc1
    560c:	e000ed04 	.word	0xe000ed04
    5610:	00004b29 	.word	0x00004b29
    5614:	0000500d 	.word	0x0000500d
    5618:	00005d21 	.word	0x00005d21
    561c:	00005bd9 	.word	0x00005bd9
    5620:	00006065 	.word	0x00006065
    5624:	00004ec1 	.word	0x00004ec1
    5628:	00005f41 	.word	0x00005f41
    562c:	00004ae5 	.word	0x00004ae5
    5630:	00006051 	.word	0x00006051

00005634 <xQueueSemaphoreTake>:
{
    5634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5638:	b085      	sub	sp, #20
    563a:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    563c:	b158      	cbz	r0, 5656 <xQueueSemaphoreTake+0x22>
    563e:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    5640:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5642:	b18b      	cbz	r3, 5668 <xQueueSemaphoreTake+0x34>
    5644:	f04f 0380 	mov.w	r3, #128	; 0x80
    5648:	f383 8811 	msr	BASEPRI, r3
    564c:	f3bf 8f6f 	isb	sy
    5650:	f3bf 8f4f 	dsb	sy
    5654:	e7fe      	b.n	5654 <xQueueSemaphoreTake+0x20>
    5656:	f04f 0380 	mov.w	r3, #128	; 0x80
    565a:	f383 8811 	msr	BASEPRI, r3
    565e:	f3bf 8f6f 	isb	sy
    5662:	f3bf 8f4f 	dsb	sy
    5666:	e7fe      	b.n	5666 <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    5668:	4b5b      	ldr	r3, [pc, #364]	; (57d8 <xQueueSemaphoreTake+0x1a4>)
    566a:	4798      	blx	r3
    566c:	b950      	cbnz	r0, 5684 <xQueueSemaphoreTake+0x50>
    566e:	9b01      	ldr	r3, [sp, #4]
    5670:	b183      	cbz	r3, 5694 <xQueueSemaphoreTake+0x60>
    5672:	f04f 0380 	mov.w	r3, #128	; 0x80
    5676:	f383 8811 	msr	BASEPRI, r3
    567a:	f3bf 8f6f 	isb	sy
    567e:	f3bf 8f4f 	dsb	sy
    5682:	e7fe      	b.n	5682 <xQueueSemaphoreTake+0x4e>
    5684:	2500      	movs	r5, #0
    5686:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    5688:	4e54      	ldr	r6, [pc, #336]	; (57dc <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    568a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 5810 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    568e:	f8df 8158 	ldr.w	r8, [pc, #344]	; 57e8 <xQueueSemaphoreTake+0x1b4>
    5692:	e048      	b.n	5726 <xQueueSemaphoreTake+0xf2>
    5694:	2500      	movs	r5, #0
    5696:	462f      	mov	r7, r5
    5698:	e7f6      	b.n	5688 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    569a:	3b01      	subs	r3, #1
    569c:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    569e:	6823      	ldr	r3, [r4, #0]
    56a0:	b913      	cbnz	r3, 56a8 <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    56a2:	4b4f      	ldr	r3, [pc, #316]	; (57e0 <xQueueSemaphoreTake+0x1ac>)
    56a4:	4798      	blx	r3
    56a6:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    56a8:	6923      	ldr	r3, [r4, #16]
    56aa:	b163      	cbz	r3, 56c6 <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    56ac:	f104 0010 	add.w	r0, r4, #16
    56b0:	4b4c      	ldr	r3, [pc, #304]	; (57e4 <xQueueSemaphoreTake+0x1b0>)
    56b2:	4798      	blx	r3
    56b4:	b138      	cbz	r0, 56c6 <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    56b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    56ba:	4b4b      	ldr	r3, [pc, #300]	; (57e8 <xQueueSemaphoreTake+0x1b4>)
    56bc:	601a      	str	r2, [r3, #0]
    56be:	f3bf 8f4f 	dsb	sy
    56c2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    56c6:	4b49      	ldr	r3, [pc, #292]	; (57ec <xQueueSemaphoreTake+0x1b8>)
    56c8:	4798      	blx	r3
				return pdPASS;
    56ca:	2501      	movs	r5, #1
}
    56cc:	4628      	mov	r0, r5
    56ce:	b005      	add	sp, #20
    56d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    56d4:	b145      	cbz	r5, 56e8 <xQueueSemaphoreTake+0xb4>
    56d6:	f04f 0380 	mov.w	r3, #128	; 0x80
    56da:	f383 8811 	msr	BASEPRI, r3
    56de:	f3bf 8f6f 	isb	sy
    56e2:	f3bf 8f4f 	dsb	sy
    56e6:	e7fe      	b.n	56e6 <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    56e8:	4b40      	ldr	r3, [pc, #256]	; (57ec <xQueueSemaphoreTake+0x1b8>)
    56ea:	4798      	blx	r3
					return errQUEUE_EMPTY;
    56ec:	e7ee      	b.n	56cc <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    56ee:	a802      	add	r0, sp, #8
    56f0:	47c8      	blx	r9
    56f2:	e021      	b.n	5738 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    56f4:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    56f6:	6860      	ldr	r0, [r4, #4]
    56f8:	4b3d      	ldr	r3, [pc, #244]	; (57f0 <xQueueSemaphoreTake+0x1bc>)
    56fa:	4798      	blx	r3
    56fc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    56fe:	4b3b      	ldr	r3, [pc, #236]	; (57ec <xQueueSemaphoreTake+0x1b8>)
    5700:	4798      	blx	r3
    5702:	e040      	b.n	5786 <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    5704:	4620      	mov	r0, r4
    5706:	4b3b      	ldr	r3, [pc, #236]	; (57f4 <xQueueSemaphoreTake+0x1c0>)
    5708:	4798      	blx	r3
				(void)xTaskResumeAll();
    570a:	4b3b      	ldr	r3, [pc, #236]	; (57f8 <xQueueSemaphoreTake+0x1c4>)
    570c:	4798      	blx	r3
    570e:	e009      	b.n	5724 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    5710:	4620      	mov	r0, r4
    5712:	4b38      	ldr	r3, [pc, #224]	; (57f4 <xQueueSemaphoreTake+0x1c0>)
    5714:	4798      	blx	r3
			(void)xTaskResumeAll();
    5716:	4b38      	ldr	r3, [pc, #224]	; (57f8 <xQueueSemaphoreTake+0x1c4>)
    5718:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    571a:	4620      	mov	r0, r4
    571c:	4b37      	ldr	r3, [pc, #220]	; (57fc <xQueueSemaphoreTake+0x1c8>)
    571e:	4798      	blx	r3
    5720:	2800      	cmp	r0, #0
    5722:	d145      	bne.n	57b0 <xQueueSemaphoreTake+0x17c>
    5724:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    5726:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    5728:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    572a:	2b00      	cmp	r3, #0
    572c:	d1b5      	bne.n	569a <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    572e:	9b01      	ldr	r3, [sp, #4]
    5730:	2b00      	cmp	r3, #0
    5732:	d0cf      	beq.n	56d4 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    5734:	2f00      	cmp	r7, #0
    5736:	d0da      	beq.n	56ee <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    5738:	4b2c      	ldr	r3, [pc, #176]	; (57ec <xQueueSemaphoreTake+0x1b8>)
    573a:	4798      	blx	r3
		vTaskSuspendAll();
    573c:	4b30      	ldr	r3, [pc, #192]	; (5800 <xQueueSemaphoreTake+0x1cc>)
    573e:	4798      	blx	r3
		prvLockQueue(pxQueue);
    5740:	47b0      	blx	r6
    5742:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5746:	b25b      	sxtb	r3, r3
    5748:	f1b3 3fff 	cmp.w	r3, #4294967295
    574c:	bf04      	itt	eq
    574e:	2300      	moveq	r3, #0
    5750:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5754:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5758:	b25b      	sxtb	r3, r3
    575a:	f1b3 3fff 	cmp.w	r3, #4294967295
    575e:	bf04      	itt	eq
    5760:	2300      	moveq	r3, #0
    5762:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5766:	4b21      	ldr	r3, [pc, #132]	; (57ec <xQueueSemaphoreTake+0x1b8>)
    5768:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    576a:	a901      	add	r1, sp, #4
    576c:	a802      	add	r0, sp, #8
    576e:	4b25      	ldr	r3, [pc, #148]	; (5804 <xQueueSemaphoreTake+0x1d0>)
    5770:	4798      	blx	r3
    5772:	2800      	cmp	r0, #0
    5774:	d1cc      	bne.n	5710 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5776:	4620      	mov	r0, r4
    5778:	4b20      	ldr	r3, [pc, #128]	; (57fc <xQueueSemaphoreTake+0x1c8>)
    577a:	4798      	blx	r3
    577c:	2800      	cmp	r0, #0
    577e:	d0c1      	beq.n	5704 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    5780:	6823      	ldr	r3, [r4, #0]
    5782:	2b00      	cmp	r3, #0
    5784:	d0b6      	beq.n	56f4 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    5786:	9901      	ldr	r1, [sp, #4]
    5788:	f104 0024 	add.w	r0, r4, #36	; 0x24
    578c:	4b1e      	ldr	r3, [pc, #120]	; (5808 <xQueueSemaphoreTake+0x1d4>)
    578e:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5790:	4620      	mov	r0, r4
    5792:	4b18      	ldr	r3, [pc, #96]	; (57f4 <xQueueSemaphoreTake+0x1c0>)
    5794:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    5796:	4b18      	ldr	r3, [pc, #96]	; (57f8 <xQueueSemaphoreTake+0x1c4>)
    5798:	4798      	blx	r3
    579a:	2800      	cmp	r0, #0
    579c:	d1c2      	bne.n	5724 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    579e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    57a2:	f8c8 3000 	str.w	r3, [r8]
    57a6:	f3bf 8f4f 	dsb	sy
    57aa:	f3bf 8f6f 	isb	sy
    57ae:	e7b9      	b.n	5724 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    57b0:	2d00      	cmp	r5, #0
    57b2:	d08b      	beq.n	56cc <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    57b4:	4b09      	ldr	r3, [pc, #36]	; (57dc <xQueueSemaphoreTake+0x1a8>)
    57b6:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    57b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    57ba:	b153      	cbz	r3, 57d2 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    57bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    57be:	6819      	ldr	r1, [r3, #0]
    57c0:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    57c4:	6860      	ldr	r0, [r4, #4]
    57c6:	4b11      	ldr	r3, [pc, #68]	; (580c <xQueueSemaphoreTake+0x1d8>)
    57c8:	4798      	blx	r3
						taskEXIT_CRITICAL();
    57ca:	4b08      	ldr	r3, [pc, #32]	; (57ec <xQueueSemaphoreTake+0x1b8>)
    57cc:	4798      	blx	r3
				return errQUEUE_EMPTY;
    57ce:	2500      	movs	r5, #0
    57d0:	e77c      	b.n	56cc <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    57d2:	2100      	movs	r1, #0
    57d4:	e7f6      	b.n	57c4 <xQueueSemaphoreTake+0x190>
    57d6:	bf00      	nop
    57d8:	00006101 	.word	0x00006101
    57dc:	00004ae5 	.word	0x00004ae5
    57e0:	0000630d 	.word	0x0000630d
    57e4:	00005fc1 	.word	0x00005fc1
    57e8:	e000ed04 	.word	0xe000ed04
    57ec:	00004b29 	.word	0x00004b29
    57f0:	00006121 	.word	0x00006121
    57f4:	0000500d 	.word	0x0000500d
    57f8:	00005d21 	.word	0x00005d21
    57fc:	00004ec1 	.word	0x00004ec1
    5800:	00005bd9 	.word	0x00005bd9
    5804:	00006065 	.word	0x00006065
    5808:	00005f41 	.word	0x00005f41
    580c:	00006261 	.word	0x00006261
    5810:	00006051 	.word	0x00006051

00005814 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    5814:	b940      	cbnz	r0, 5828 <uxQueueMessagesWaiting+0x14>
    5816:	f04f 0380 	mov.w	r3, #128	; 0x80
    581a:	f383 8811 	msr	BASEPRI, r3
    581e:	f3bf 8f6f 	isb	sy
    5822:	f3bf 8f4f 	dsb	sy
    5826:	e7fe      	b.n	5826 <uxQueueMessagesWaiting+0x12>
{
    5828:	b510      	push	{r4, lr}
    582a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    582c:	4b03      	ldr	r3, [pc, #12]	; (583c <uxQueueMessagesWaiting+0x28>)
    582e:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    5830:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    5832:	4b03      	ldr	r3, [pc, #12]	; (5840 <uxQueueMessagesWaiting+0x2c>)
    5834:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    5836:	4620      	mov	r0, r4
    5838:	bd10      	pop	{r4, pc}
    583a:	bf00      	nop
    583c:	00004ae5 	.word	0x00004ae5
    5840:	00004b29 	.word	0x00004b29

00005844 <vQueueWaitForMessageRestricted>:
{
    5844:	b570      	push	{r4, r5, r6, lr}
    5846:	4604      	mov	r4, r0
    5848:	460d      	mov	r5, r1
    584a:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    584c:	4b11      	ldr	r3, [pc, #68]	; (5894 <vQueueWaitForMessageRestricted+0x50>)
    584e:	4798      	blx	r3
    5850:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5854:	b25b      	sxtb	r3, r3
    5856:	f1b3 3fff 	cmp.w	r3, #4294967295
    585a:	bf04      	itt	eq
    585c:	2300      	moveq	r3, #0
    585e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5862:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5866:	b25b      	sxtb	r3, r3
    5868:	f1b3 3fff 	cmp.w	r3, #4294967295
    586c:	bf04      	itt	eq
    586e:	2300      	moveq	r3, #0
    5870:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5874:	4b08      	ldr	r3, [pc, #32]	; (5898 <vQueueWaitForMessageRestricted+0x54>)
    5876:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    5878:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    587a:	b11b      	cbz	r3, 5884 <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    587c:	4620      	mov	r0, r4
    587e:	4b07      	ldr	r3, [pc, #28]	; (589c <vQueueWaitForMessageRestricted+0x58>)
    5880:	4798      	blx	r3
    5882:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    5884:	4632      	mov	r2, r6
    5886:	4629      	mov	r1, r5
    5888:	f104 0024 	add.w	r0, r4, #36	; 0x24
    588c:	4b04      	ldr	r3, [pc, #16]	; (58a0 <vQueueWaitForMessageRestricted+0x5c>)
    588e:	4798      	blx	r3
    5890:	e7f4      	b.n	587c <vQueueWaitForMessageRestricted+0x38>
    5892:	bf00      	nop
    5894:	00004ae5 	.word	0x00004ae5
    5898:	00004b29 	.word	0x00004b29
    589c:	0000500d 	.word	0x0000500d
    58a0:	00005f7d 	.word	0x00005f7d

000058a4 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    58a4:	4a06      	ldr	r2, [pc, #24]	; (58c0 <prvIdleTask+0x1c>)
				taskYIELD();
    58a6:	4807      	ldr	r0, [pc, #28]	; (58c4 <prvIdleTask+0x20>)
    58a8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    58ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
    58ae:	2b01      	cmp	r3, #1
    58b0:	d9fc      	bls.n	58ac <prvIdleTask+0x8>
				taskYIELD();
    58b2:	6001      	str	r1, [r0, #0]
    58b4:	f3bf 8f4f 	dsb	sy
    58b8:	f3bf 8f6f 	isb	sy
    58bc:	e7f6      	b.n	58ac <prvIdleTask+0x8>
    58be:	bf00      	nop
    58c0:	20003410 	.word	0x20003410
    58c4:	e000ed04 	.word	0xe000ed04

000058c8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    58c8:	4b09      	ldr	r3, [pc, #36]	; (58f0 <prvResetNextTaskUnblockTime+0x28>)
    58ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    58ce:	681b      	ldr	r3, [r3, #0]
    58d0:	b143      	cbz	r3, 58e4 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    58d2:	4b07      	ldr	r3, [pc, #28]	; (58f0 <prvResetNextTaskUnblockTime+0x28>)
    58d4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    58d8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    58da:	68d2      	ldr	r2, [r2, #12]
    58dc:	6852      	ldr	r2, [r2, #4]
    58de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    58e2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    58e4:	f04f 32ff 	mov.w	r2, #4294967295
    58e8:	4b01      	ldr	r3, [pc, #4]	; (58f0 <prvResetNextTaskUnblockTime+0x28>)
    58ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    58ee:	4770      	bx	lr
    58f0:	20003410 	.word	0x20003410

000058f4 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    58f4:	b570      	push	{r4, r5, r6, lr}
    58f6:	4604      	mov	r4, r0
    58f8:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    58fa:	4b1a      	ldr	r3, [pc, #104]	; (5964 <prvAddCurrentTaskToDelayedList+0x70>)
    58fc:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    5900:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    5904:	3004      	adds	r0, #4
    5906:	4b18      	ldr	r3, [pc, #96]	; (5968 <prvAddCurrentTaskToDelayedList+0x74>)
    5908:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    590a:	f1b4 3fff 	cmp.w	r4, #4294967295
    590e:	d016      	beq.n	593e <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5910:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    5912:	4b14      	ldr	r3, [pc, #80]	; (5964 <prvAddCurrentTaskToDelayedList+0x70>)
    5914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5918:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    591a:	42a5      	cmp	r5, r4
    591c:	d818      	bhi.n	5950 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    591e:	4d11      	ldr	r5, [pc, #68]	; (5964 <prvAddCurrentTaskToDelayedList+0x70>)
    5920:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    5924:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    5928:	3104      	adds	r1, #4
    592a:	4b10      	ldr	r3, [pc, #64]	; (596c <prvAddCurrentTaskToDelayedList+0x78>)
    592c:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    592e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    5932:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    5934:	bf3c      	itt	cc
    5936:	462b      	movcc	r3, r5
    5938:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    593c:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    593e:	2e00      	cmp	r6, #0
    5940:	d0e6      	beq.n	5910 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    5942:	4808      	ldr	r0, [pc, #32]	; (5964 <prvAddCurrentTaskToDelayedList+0x70>)
    5944:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    5948:	3104      	adds	r1, #4
    594a:	4b09      	ldr	r3, [pc, #36]	; (5970 <prvAddCurrentTaskToDelayedList+0x7c>)
    594c:	4798      	blx	r3
    594e:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    5950:	4b04      	ldr	r3, [pc, #16]	; (5964 <prvAddCurrentTaskToDelayedList+0x70>)
    5952:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    5956:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    595a:	3104      	adds	r1, #4
    595c:	4b03      	ldr	r3, [pc, #12]	; (596c <prvAddCurrentTaskToDelayedList+0x78>)
    595e:	4798      	blx	r3
    5960:	bd70      	pop	{r4, r5, r6, pc}
    5962:	bf00      	nop
    5964:	20003410 	.word	0x20003410
    5968:	000049f1 	.word	0x000049f1
    596c:	000049bd 	.word	0x000049bd
    5970:	000049a5 	.word	0x000049a5

00005974 <xTaskCreate>:
{
    5974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5978:	b083      	sub	sp, #12
    597a:	4683      	mov	fp, r0
    597c:	460d      	mov	r5, r1
    597e:	9301      	str	r3, [sp, #4]
    5980:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    5984:	0096      	lsls	r6, r2, #2
    5986:	4630      	mov	r0, r6
    5988:	4b66      	ldr	r3, [pc, #408]	; (5b24 <xTaskCreate+0x1b0>)
    598a:	4798      	blx	r3
		if (pxStack != NULL) {
    598c:	2800      	cmp	r0, #0
    598e:	f000 8096 	beq.w	5abe <xTaskCreate+0x14a>
    5992:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    5994:	2054      	movs	r0, #84	; 0x54
    5996:	4b63      	ldr	r3, [pc, #396]	; (5b24 <xTaskCreate+0x1b0>)
    5998:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    599a:	4604      	mov	r4, r0
    599c:	2800      	cmp	r0, #0
    599e:	f000 808b 	beq.w	5ab8 <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    59a2:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    59a4:	4632      	mov	r2, r6
    59a6:	21a5      	movs	r1, #165	; 0xa5
    59a8:	4638      	mov	r0, r7
    59aa:	4b5f      	ldr	r3, [pc, #380]	; (5b28 <xTaskCreate+0x1b4>)
    59ac:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    59ae:	3e04      	subs	r6, #4
    59b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    59b2:	441e      	add	r6, r3
		                      & (~(
    59b4:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    59b8:	782b      	ldrb	r3, [r5, #0]
    59ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    59be:	782b      	ldrb	r3, [r5, #0]
    59c0:	b15b      	cbz	r3, 59da <xTaskCreate+0x66>
    59c2:	462b      	mov	r3, r5
    59c4:	f104 0235 	add.w	r2, r4, #53	; 0x35
    59c8:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    59ca:	7858      	ldrb	r0, [r3, #1]
    59cc:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    59d0:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    59d4:	b108      	cbz	r0, 59da <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    59d6:	4299      	cmp	r1, r3
    59d8:	d1f7      	bne.n	59ca <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    59da:	2700      	movs	r7, #0
    59dc:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    59e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    59e2:	2d04      	cmp	r5, #4
    59e4:	bf28      	it	cs
    59e6:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    59e8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    59ea:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    59ec:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    59ee:	f104 0804 	add.w	r8, r4, #4
    59f2:	4640      	mov	r0, r8
    59f4:	f8df 9154 	ldr.w	r9, [pc, #340]	; 5b4c <xTaskCreate+0x1d8>
    59f8:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    59fa:	f104 0018 	add.w	r0, r4, #24
    59fe:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    5a00:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    5a02:	f1c5 0505 	rsb	r5, r5, #5
    5a06:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    5a08:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    5a0a:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    5a0c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    5a10:	9a01      	ldr	r2, [sp, #4]
    5a12:	4659      	mov	r1, fp
    5a14:	4630      	mov	r0, r6
    5a16:	4b45      	ldr	r3, [pc, #276]	; (5b2c <xTaskCreate+0x1b8>)
    5a18:	4798      	blx	r3
    5a1a:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    5a1c:	f1ba 0f00 	cmp.w	sl, #0
    5a20:	d001      	beq.n	5a26 <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    5a22:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    5a26:	4b42      	ldr	r3, [pc, #264]	; (5b30 <xTaskCreate+0x1bc>)
    5a28:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    5a2a:	4b42      	ldr	r3, [pc, #264]	; (5b34 <xTaskCreate+0x1c0>)
    5a2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    5a30:	3201      	adds	r2, #1
    5a32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    5a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5a3a:	2b00      	cmp	r3, #0
    5a3c:	d042      	beq.n	5ac4 <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    5a3e:	4b3d      	ldr	r3, [pc, #244]	; (5b34 <xTaskCreate+0x1c0>)
    5a40:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    5a44:	b94b      	cbnz	r3, 5a5a <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    5a46:	4b3b      	ldr	r3, [pc, #236]	; (5b34 <xTaskCreate+0x1c0>)
    5a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5a50:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    5a52:	bf9c      	itt	ls
    5a54:	4b37      	ldrls	r3, [pc, #220]	; (5b34 <xTaskCreate+0x1c0>)
    5a56:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    5a5a:	4a36      	ldr	r2, [pc, #216]	; (5b34 <xTaskCreate+0x1c0>)
    5a5c:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    5a60:	3301      	adds	r3, #1
    5a62:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    5a66:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    5a68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5a6a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    5a6e:	4293      	cmp	r3, r2
    5a70:	bf84      	itt	hi
    5a72:	4a30      	ldrhi	r2, [pc, #192]	; (5b34 <xTaskCreate+0x1c0>)
    5a74:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    5a78:	4d2e      	ldr	r5, [pc, #184]	; (5b34 <xTaskCreate+0x1c0>)
    5a7a:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5a7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5a82:	4641      	mov	r1, r8
    5a84:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5a88:	4b2b      	ldr	r3, [pc, #172]	; (5b38 <xTaskCreate+0x1c4>)
    5a8a:	4798      	blx	r3
	taskEXIT_CRITICAL();
    5a8c:	4b2b      	ldr	r3, [pc, #172]	; (5b3c <xTaskCreate+0x1c8>)
    5a8e:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    5a90:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    5a94:	2b00      	cmp	r3, #0
    5a96:	d03f      	beq.n	5b18 <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    5a98:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5aa0:	429a      	cmp	r2, r3
    5aa2:	d23d      	bcs.n	5b20 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    5aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5aa8:	4b25      	ldr	r3, [pc, #148]	; (5b40 <xTaskCreate+0x1cc>)
    5aaa:	601a      	str	r2, [r3, #0]
    5aac:	f3bf 8f4f 	dsb	sy
    5ab0:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    5ab4:	2001      	movs	r0, #1
    5ab6:	e030      	b.n	5b1a <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    5ab8:	4638      	mov	r0, r7
    5aba:	4b22      	ldr	r3, [pc, #136]	; (5b44 <xTaskCreate+0x1d0>)
    5abc:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    5abe:	f04f 30ff 	mov.w	r0, #4294967295
    5ac2:	e02a      	b.n	5b1a <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    5ac4:	4b1b      	ldr	r3, [pc, #108]	; (5b34 <xTaskCreate+0x1c0>)
    5ac6:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    5aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5ace:	2b01      	cmp	r3, #1
    5ad0:	d1c3      	bne.n	5a5a <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    5ad2:	4d18      	ldr	r5, [pc, #96]	; (5b34 <xTaskCreate+0x1c0>)
    5ad4:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5ad8:	4e1b      	ldr	r6, [pc, #108]	; (5b48 <xTaskCreate+0x1d4>)
    5ada:	47b0      	blx	r6
    5adc:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    5ae0:	47b0      	blx	r6
    5ae2:	f105 0050 	add.w	r0, r5, #80	; 0x50
    5ae6:	47b0      	blx	r6
    5ae8:	f105 0064 	add.w	r0, r5, #100	; 0x64
    5aec:	47b0      	blx	r6
    5aee:	f105 0078 	add.w	r0, r5, #120	; 0x78
    5af2:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    5af4:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    5af8:	4648      	mov	r0, r9
    5afa:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    5afc:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    5b00:	4638      	mov	r0, r7
    5b02:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    5b04:	f105 0014 	add.w	r0, r5, #20
    5b08:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    5b0a:	4628      	mov	r0, r5
    5b0c:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    5b0e:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5b12:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    5b16:	e7a0      	b.n	5a5a <xTaskCreate+0xe6>
		xReturn = pdPASS;
    5b18:	2001      	movs	r0, #1
}
    5b1a:	b003      	add	sp, #12
    5b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    5b20:	2001      	movs	r0, #1
	return xReturn;
    5b22:	e7fa      	b.n	5b1a <xTaskCreate+0x1a6>
    5b24:	00004d95 	.word	0x00004d95
    5b28:	00006a03 	.word	0x00006a03
    5b2c:	00004a95 	.word	0x00004a95
    5b30:	00004ae5 	.word	0x00004ae5
    5b34:	20003410 	.word	0x20003410
    5b38:	000049a5 	.word	0x000049a5
    5b3c:	00004b29 	.word	0x00004b29
    5b40:	e000ed04 	.word	0xe000ed04
    5b44:	00004e75 	.word	0x00004e75
    5b48:	00004989 	.word	0x00004989
    5b4c:	0000499f 	.word	0x0000499f

00005b50 <vTaskStartScheduler>:
{
    5b50:	b510      	push	{r4, lr}
    5b52:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    5b54:	4b19      	ldr	r3, [pc, #100]	; (5bbc <vTaskStartScheduler+0x6c>)
    5b56:	9301      	str	r3, [sp, #4]
    5b58:	2300      	movs	r3, #0
    5b5a:	9300      	str	r3, [sp, #0]
    5b5c:	2280      	movs	r2, #128	; 0x80
    5b5e:	4918      	ldr	r1, [pc, #96]	; (5bc0 <vTaskStartScheduler+0x70>)
    5b60:	4818      	ldr	r0, [pc, #96]	; (5bc4 <vTaskStartScheduler+0x74>)
    5b62:	4c19      	ldr	r4, [pc, #100]	; (5bc8 <vTaskStartScheduler+0x78>)
    5b64:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    5b66:	2801      	cmp	r0, #1
    5b68:	d004      	beq.n	5b74 <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    5b6a:	f1b0 3fff 	cmp.w	r0, #4294967295
    5b6e:	d01b      	beq.n	5ba8 <vTaskStartScheduler+0x58>
}
    5b70:	b002      	add	sp, #8
    5b72:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    5b74:	4b15      	ldr	r3, [pc, #84]	; (5bcc <vTaskStartScheduler+0x7c>)
    5b76:	4798      	blx	r3
	if (xReturn == pdPASS) {
    5b78:	2801      	cmp	r0, #1
    5b7a:	d1f6      	bne.n	5b6a <vTaskStartScheduler+0x1a>
    5b7c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5b80:	f383 8811 	msr	BASEPRI, r3
    5b84:	f3bf 8f6f 	isb	sy
    5b88:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    5b8c:	4b10      	ldr	r3, [pc, #64]	; (5bd0 <vTaskStartScheduler+0x80>)
    5b8e:	f04f 32ff 	mov.w	r2, #4294967295
    5b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    5b96:	2201      	movs	r2, #1
    5b98:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    5b9c:	2200      	movs	r2, #0
    5b9e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    5ba2:	4b0c      	ldr	r3, [pc, #48]	; (5bd4 <vTaskStartScheduler+0x84>)
    5ba4:	4798      	blx	r3
    5ba6:	e7e3      	b.n	5b70 <vTaskStartScheduler+0x20>
    5ba8:	f04f 0380 	mov.w	r3, #128	; 0x80
    5bac:	f383 8811 	msr	BASEPRI, r3
    5bb0:	f3bf 8f6f 	isb	sy
    5bb4:	f3bf 8f4f 	dsb	sy
    5bb8:	e7fe      	b.n	5bb8 <vTaskStartScheduler+0x68>
    5bba:	bf00      	nop
    5bbc:	200034ec 	.word	0x200034ec
    5bc0:	000091f8 	.word	0x000091f8
    5bc4:	000058a5 	.word	0x000058a5
    5bc8:	00005975 	.word	0x00005975
    5bcc:	00006599 	.word	0x00006599
    5bd0:	20003410 	.word	0x20003410
    5bd4:	00004c19 	.word	0x00004c19

00005bd8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    5bd8:	4a03      	ldr	r2, [pc, #12]	; (5be8 <vTaskSuspendAll+0x10>)
    5bda:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    5bde:	3301      	adds	r3, #1
    5be0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    5be4:	4770      	bx	lr
    5be6:	bf00      	nop
    5be8:	20003410 	.word	0x20003410

00005bec <xTaskGetTickCount>:
		xTicks = xTickCount;
    5bec:	4b01      	ldr	r3, [pc, #4]	; (5bf4 <xTaskGetTickCount+0x8>)
    5bee:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    5bf2:	4770      	bx	lr
    5bf4:	20003410 	.word	0x20003410

00005bf8 <xTaskIncrementTick>:
{
    5bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5bfc:	4b44      	ldr	r3, [pc, #272]	; (5d10 <xTaskIncrementTick+0x118>)
    5bfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5c02:	2b00      	cmp	r3, #0
    5c04:	d173      	bne.n	5cee <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    5c06:	4b42      	ldr	r3, [pc, #264]	; (5d10 <xTaskIncrementTick+0x118>)
    5c08:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    5c0c:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    5c0e:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    5c12:	b9e6      	cbnz	r6, 5c4e <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    5c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    5c18:	681b      	ldr	r3, [r3, #0]
    5c1a:	b143      	cbz	r3, 5c2e <xTaskIncrementTick+0x36>
    5c1c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5c20:	f383 8811 	msr	BASEPRI, r3
    5c24:	f3bf 8f6f 	isb	sy
    5c28:	f3bf 8f4f 	dsb	sy
    5c2c:	e7fe      	b.n	5c2c <xTaskIncrementTick+0x34>
    5c2e:	4b38      	ldr	r3, [pc, #224]	; (5d10 <xTaskIncrementTick+0x118>)
    5c30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    5c34:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    5c38:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    5c3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    5c40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    5c44:	3201      	adds	r2, #1
    5c46:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    5c4a:	4b32      	ldr	r3, [pc, #200]	; (5d14 <xTaskIncrementTick+0x11c>)
    5c4c:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    5c4e:	4b30      	ldr	r3, [pc, #192]	; (5d10 <xTaskIncrementTick+0x118>)
    5c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    5c54:	429e      	cmp	r6, r3
    5c56:	d20d      	bcs.n	5c74 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    5c58:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    5c5a:	4b2d      	ldr	r3, [pc, #180]	; (5d10 <xTaskIncrementTick+0x118>)
    5c5c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5c60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    5c62:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5c66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    5c6c:	2b02      	cmp	r3, #2
    5c6e:	bf28      	it	cs
    5c70:	2401      	movcs	r4, #1
    5c72:	e043      	b.n	5cfc <xTaskIncrementTick+0x104>
    5c74:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5c76:	4d26      	ldr	r5, [pc, #152]	; (5d10 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5c78:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5d1c <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    5c7c:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    5c80:	e021      	b.n	5cc6 <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5c82:	f04f 32ff 	mov.w	r2, #4294967295
    5c86:	4b22      	ldr	r3, [pc, #136]	; (5d10 <xTaskIncrementTick+0x118>)
    5c88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    5c8c:	e7e5      	b.n	5c5a <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    5c8e:	4a20      	ldr	r2, [pc, #128]	; (5d10 <xTaskIncrementTick+0x118>)
    5c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    5c94:	e7e1      	b.n	5c5a <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    5c96:	f107 0018 	add.w	r0, r7, #24
    5c9a:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    5c9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5c9e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    5ca2:	4298      	cmp	r0, r3
    5ca4:	bf88      	it	hi
    5ca6:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    5caa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5cae:	4649      	mov	r1, r9
    5cb0:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    5cb4:	4b18      	ldr	r3, [pc, #96]	; (5d18 <xTaskIncrementTick+0x120>)
    5cb6:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5cb8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5cbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    5cc0:	429a      	cmp	r2, r3
    5cc2:	bf28      	it	cs
    5cc4:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5cc6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    5cca:	681b      	ldr	r3, [r3, #0]
    5ccc:	2b00      	cmp	r3, #0
    5cce:	d0d8      	beq.n	5c82 <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5cd0:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    5cd4:	68db      	ldr	r3, [r3, #12]
    5cd6:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    5cd8:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    5cda:	429e      	cmp	r6, r3
    5cdc:	d3d7      	bcc.n	5c8e <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5cde:	f107 0904 	add.w	r9, r7, #4
    5ce2:	4648      	mov	r0, r9
    5ce4:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    5ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5ce8:	2b00      	cmp	r3, #0
    5cea:	d1d4      	bne.n	5c96 <xTaskIncrementTick+0x9e>
    5cec:	e7d6      	b.n	5c9c <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    5cee:	4a08      	ldr	r2, [pc, #32]	; (5d10 <xTaskIncrementTick+0x118>)
    5cf0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    5cf4:	3301      	adds	r3, #1
    5cf6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    5cfa:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    5cfc:	4b04      	ldr	r3, [pc, #16]	; (5d10 <xTaskIncrementTick+0x118>)
    5cfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    5d02:	2b00      	cmp	r3, #0
}
    5d04:	bf0c      	ite	eq
    5d06:	4620      	moveq	r0, r4
    5d08:	2001      	movne	r0, #1
    5d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d0e:	bf00      	nop
    5d10:	20003410 	.word	0x20003410
    5d14:	000058c9 	.word	0x000058c9
    5d18:	000049a5 	.word	0x000049a5
    5d1c:	000049f1 	.word	0x000049f1

00005d20 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    5d20:	4b3a      	ldr	r3, [pc, #232]	; (5e0c <xTaskResumeAll+0xec>)
    5d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5d26:	b943      	cbnz	r3, 5d3a <xTaskResumeAll+0x1a>
    5d28:	f04f 0380 	mov.w	r3, #128	; 0x80
    5d2c:	f383 8811 	msr	BASEPRI, r3
    5d30:	f3bf 8f6f 	isb	sy
    5d34:	f3bf 8f4f 	dsb	sy
    5d38:	e7fe      	b.n	5d38 <xTaskResumeAll+0x18>
{
    5d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    5d3e:	4b34      	ldr	r3, [pc, #208]	; (5e10 <xTaskResumeAll+0xf0>)
    5d40:	4798      	blx	r3
		--uxSchedulerSuspended;
    5d42:	4b32      	ldr	r3, [pc, #200]	; (5e0c <xTaskResumeAll+0xec>)
    5d44:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    5d48:	3a01      	subs	r2, #1
    5d4a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5d52:	2b00      	cmp	r3, #0
    5d54:	d155      	bne.n	5e02 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    5d56:	4b2d      	ldr	r3, [pc, #180]	; (5e0c <xTaskResumeAll+0xec>)
    5d58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5d5c:	b92b      	cbnz	r3, 5d6a <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    5d5e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    5d60:	4b2c      	ldr	r3, [pc, #176]	; (5e14 <xTaskResumeAll+0xf4>)
    5d62:	4798      	blx	r3
}
    5d64:	4620      	mov	r0, r4
    5d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d6a:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5d6c:	4c27      	ldr	r4, [pc, #156]	; (5e0c <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5d6e:	4e2a      	ldr	r6, [pc, #168]	; (5e18 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    5d70:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5d74:	6963      	ldr	r3, [r4, #20]
    5d76:	b1fb      	cbz	r3, 5db8 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    5d78:	6a23      	ldr	r3, [r4, #32]
    5d7a:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5d7c:	f105 0018 	add.w	r0, r5, #24
    5d80:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5d82:	1d2f      	adds	r7, r5, #4
    5d84:	4638      	mov	r0, r7
    5d86:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    5d88:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5d8a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    5d8e:	4298      	cmp	r0, r3
    5d90:	bf88      	it	hi
    5d92:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    5d96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5d9a:	4639      	mov	r1, r7
    5d9c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    5da0:	4b1e      	ldr	r3, [pc, #120]	; (5e1c <xTaskResumeAll+0xfc>)
    5da2:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5da4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5da8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    5daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5dac:	429a      	cmp	r2, r3
    5dae:	d3e1      	bcc.n	5d74 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    5db0:	2301      	movs	r3, #1
    5db2:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    5db6:	e7dd      	b.n	5d74 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    5db8:	b10d      	cbz	r5, 5dbe <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    5dba:	4b19      	ldr	r3, [pc, #100]	; (5e20 <xTaskResumeAll+0x100>)
    5dbc:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    5dbe:	4b13      	ldr	r3, [pc, #76]	; (5e0c <xTaskResumeAll+0xec>)
    5dc0:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    5dc4:	b17c      	cbz	r4, 5de6 <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    5dc6:	4f17      	ldr	r7, [pc, #92]	; (5e24 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    5dc8:	461e      	mov	r6, r3
    5dca:	2501      	movs	r5, #1
    5dcc:	e001      	b.n	5dd2 <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    5dce:	3c01      	subs	r4, #1
    5dd0:	d005      	beq.n	5dde <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    5dd2:	47b8      	blx	r7
    5dd4:	2800      	cmp	r0, #0
    5dd6:	d0fa      	beq.n	5dce <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    5dd8:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    5ddc:	e7f7      	b.n	5dce <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    5dde:	2200      	movs	r2, #0
    5de0:	4b0a      	ldr	r3, [pc, #40]	; (5e0c <xTaskResumeAll+0xec>)
    5de2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    5de6:	4b09      	ldr	r3, [pc, #36]	; (5e0c <xTaskResumeAll+0xec>)
    5de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    5dec:	b15b      	cbz	r3, 5e06 <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    5dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5df2:	4b0d      	ldr	r3, [pc, #52]	; (5e28 <xTaskResumeAll+0x108>)
    5df4:	601a      	str	r2, [r3, #0]
    5df6:	f3bf 8f4f 	dsb	sy
    5dfa:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    5dfe:	2401      	movs	r4, #1
    5e00:	e7ae      	b.n	5d60 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    5e02:	2400      	movs	r4, #0
    5e04:	e7ac      	b.n	5d60 <xTaskResumeAll+0x40>
    5e06:	2400      	movs	r4, #0
    5e08:	e7aa      	b.n	5d60 <xTaskResumeAll+0x40>
    5e0a:	bf00      	nop
    5e0c:	20003410 	.word	0x20003410
    5e10:	00004ae5 	.word	0x00004ae5
    5e14:	00004b29 	.word	0x00004b29
    5e18:	000049f1 	.word	0x000049f1
    5e1c:	000049a5 	.word	0x000049a5
    5e20:	000058c9 	.word	0x000058c9
    5e24:	00005bf9 	.word	0x00005bf9
    5e28:	e000ed04 	.word	0xe000ed04

00005e2c <vTaskDelay>:
{
    5e2c:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    5e2e:	b1b0      	cbz	r0, 5e5e <vTaskDelay+0x32>
    5e30:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    5e32:	4b0f      	ldr	r3, [pc, #60]	; (5e70 <vTaskDelay+0x44>)
    5e34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5e38:	b143      	cbz	r3, 5e4c <vTaskDelay+0x20>
    5e3a:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e3e:	f383 8811 	msr	BASEPRI, r3
    5e42:	f3bf 8f6f 	isb	sy
    5e46:	f3bf 8f4f 	dsb	sy
    5e4a:	e7fe      	b.n	5e4a <vTaskDelay+0x1e>
		vTaskSuspendAll();
    5e4c:	4b09      	ldr	r3, [pc, #36]	; (5e74 <vTaskDelay+0x48>)
    5e4e:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    5e50:	2100      	movs	r1, #0
    5e52:	4620      	mov	r0, r4
    5e54:	4b08      	ldr	r3, [pc, #32]	; (5e78 <vTaskDelay+0x4c>)
    5e56:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    5e58:	4b08      	ldr	r3, [pc, #32]	; (5e7c <vTaskDelay+0x50>)
    5e5a:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    5e5c:	b938      	cbnz	r0, 5e6e <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    5e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5e62:	4b07      	ldr	r3, [pc, #28]	; (5e80 <vTaskDelay+0x54>)
    5e64:	601a      	str	r2, [r3, #0]
    5e66:	f3bf 8f4f 	dsb	sy
    5e6a:	f3bf 8f6f 	isb	sy
    5e6e:	bd10      	pop	{r4, pc}
    5e70:	20003410 	.word	0x20003410
    5e74:	00005bd9 	.word	0x00005bd9
    5e78:	000058f5 	.word	0x000058f5
    5e7c:	00005d21 	.word	0x00005d21
    5e80:	e000ed04 	.word	0xe000ed04

00005e84 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    5e84:	4b2c      	ldr	r3, [pc, #176]	; (5f38 <vTaskSwitchContext+0xb4>)
    5e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5e8a:	bb8b      	cbnz	r3, 5ef0 <vTaskSwitchContext+0x6c>
{
    5e8c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    5e8e:	4b2a      	ldr	r3, [pc, #168]	; (5f38 <vTaskSwitchContext+0xb4>)
    5e90:	2200      	movs	r2, #0
    5e92:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    5e96:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5e9e:	6812      	ldr	r2, [r2, #0]
    5ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5ea2:	429a      	cmp	r2, r3
    5ea4:	d807      	bhi.n	5eb6 <vTaskSwitchContext+0x32>
    5ea6:	4b24      	ldr	r3, [pc, #144]	; (5f38 <vTaskSwitchContext+0xb4>)
    5ea8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    5eac:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    5eb0:	3134      	adds	r1, #52	; 0x34
    5eb2:	4b22      	ldr	r3, [pc, #136]	; (5f3c <vTaskSwitchContext+0xb8>)
    5eb4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5eb6:	4a20      	ldr	r2, [pc, #128]	; (5f38 <vTaskSwitchContext+0xb4>)
    5eb8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    5ebc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    5ec0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5ec4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    5ec6:	b9c2      	cbnz	r2, 5efa <vTaskSwitchContext+0x76>
    5ec8:	b14b      	cbz	r3, 5ede <vTaskSwitchContext+0x5a>
    5eca:	491b      	ldr	r1, [pc, #108]	; (5f38 <vTaskSwitchContext+0xb4>)
    5ecc:	3b01      	subs	r3, #1
    5ece:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5ed2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5ed6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    5ed8:	b97a      	cbnz	r2, 5efa <vTaskSwitchContext+0x76>
    5eda:	2b00      	cmp	r3, #0
    5edc:	d1f6      	bne.n	5ecc <vTaskSwitchContext+0x48>
    5ede:	f04f 0380 	mov.w	r3, #128	; 0x80
    5ee2:	f383 8811 	msr	BASEPRI, r3
    5ee6:	f3bf 8f6f 	isb	sy
    5eea:	f3bf 8f4f 	dsb	sy
    5eee:	e7fe      	b.n	5eee <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    5ef0:	2201      	movs	r2, #1
    5ef2:	4b11      	ldr	r3, [pc, #68]	; (5f38 <vTaskSwitchContext+0xb4>)
    5ef4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    5ef8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5efa:	4a0f      	ldr	r2, [pc, #60]	; (5f38 <vTaskSwitchContext+0xb4>)
    5efc:	0099      	lsls	r1, r3, #2
    5efe:	18c8      	adds	r0, r1, r3
    5f00:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    5f04:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    5f06:	6864      	ldr	r4, [r4, #4]
    5f08:	62c4      	str	r4, [r0, #44]	; 0x2c
    5f0a:	4419      	add	r1, r3
    5f0c:	4602      	mov	r2, r0
    5f0e:	3230      	adds	r2, #48	; 0x30
    5f10:	4294      	cmp	r4, r2
    5f12:	d00b      	beq.n	5f2c <vTaskSwitchContext+0xa8>
    5f14:	4a08      	ldr	r2, [pc, #32]	; (5f38 <vTaskSwitchContext+0xb4>)
    5f16:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    5f1a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    5f1e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    5f20:	68c9      	ldr	r1, [r1, #12]
    5f22:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    5f26:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    5f2a:	bd10      	pop	{r4, pc}
    5f2c:	6860      	ldr	r0, [r4, #4]
    5f2e:	4a02      	ldr	r2, [pc, #8]	; (5f38 <vTaskSwitchContext+0xb4>)
    5f30:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5f34:	62d0      	str	r0, [r2, #44]	; 0x2c
    5f36:	e7ed      	b.n	5f14 <vTaskSwitchContext+0x90>
    5f38:	20003410 	.word	0x20003410
    5f3c:	000002d1 	.word	0x000002d1

00005f40 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    5f40:	b940      	cbnz	r0, 5f54 <vTaskPlaceOnEventList+0x14>
    5f42:	f04f 0380 	mov.w	r3, #128	; 0x80
    5f46:	f383 8811 	msr	BASEPRI, r3
    5f4a:	f3bf 8f6f 	isb	sy
    5f4e:	f3bf 8f4f 	dsb	sy
    5f52:	e7fe      	b.n	5f52 <vTaskPlaceOnEventList+0x12>
{
    5f54:	b510      	push	{r4, lr}
    5f56:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    5f58:	4b05      	ldr	r3, [pc, #20]	; (5f70 <vTaskPlaceOnEventList+0x30>)
    5f5a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    5f5e:	3118      	adds	r1, #24
    5f60:	4b04      	ldr	r3, [pc, #16]	; (5f74 <vTaskPlaceOnEventList+0x34>)
    5f62:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    5f64:	2101      	movs	r1, #1
    5f66:	4620      	mov	r0, r4
    5f68:	4b03      	ldr	r3, [pc, #12]	; (5f78 <vTaskPlaceOnEventList+0x38>)
    5f6a:	4798      	blx	r3
    5f6c:	bd10      	pop	{r4, pc}
    5f6e:	bf00      	nop
    5f70:	20003410 	.word	0x20003410
    5f74:	000049bd 	.word	0x000049bd
    5f78:	000058f5 	.word	0x000058f5

00005f7c <vTaskPlaceOnEventListRestricted>:
{
    5f7c:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    5f7e:	b180      	cbz	r0, 5fa2 <vTaskPlaceOnEventListRestricted+0x26>
    5f80:	4614      	mov	r4, r2
    5f82:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    5f84:	4b0b      	ldr	r3, [pc, #44]	; (5fb4 <vTaskPlaceOnEventListRestricted+0x38>)
    5f86:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    5f8a:	3118      	adds	r1, #24
    5f8c:	4b0a      	ldr	r3, [pc, #40]	; (5fb8 <vTaskPlaceOnEventListRestricted+0x3c>)
    5f8e:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    5f90:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    5f92:	4621      	mov	r1, r4
    5f94:	bf0c      	ite	eq
    5f96:	4628      	moveq	r0, r5
    5f98:	f04f 30ff 	movne.w	r0, #4294967295
    5f9c:	4b07      	ldr	r3, [pc, #28]	; (5fbc <vTaskPlaceOnEventListRestricted+0x40>)
    5f9e:	4798      	blx	r3
    5fa0:	bd38      	pop	{r3, r4, r5, pc}
    5fa2:	f04f 0380 	mov.w	r3, #128	; 0x80
    5fa6:	f383 8811 	msr	BASEPRI, r3
    5faa:	f3bf 8f6f 	isb	sy
    5fae:	f3bf 8f4f 	dsb	sy
    5fb2:	e7fe      	b.n	5fb2 <vTaskPlaceOnEventListRestricted+0x36>
    5fb4:	20003410 	.word	0x20003410
    5fb8:	000049a5 	.word	0x000049a5
    5fbc:	000058f5 	.word	0x000058f5

00005fc0 <xTaskRemoveFromEventList>:
{
    5fc0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    5fc2:	68c3      	ldr	r3, [r0, #12]
    5fc4:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    5fc6:	2c00      	cmp	r4, #0
    5fc8:	d02a      	beq.n	6020 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    5fca:	f104 0518 	add.w	r5, r4, #24
    5fce:	4628      	mov	r0, r5
    5fd0:	4b1a      	ldr	r3, [pc, #104]	; (603c <xTaskRemoveFromEventList+0x7c>)
    5fd2:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5fd4:	4b1a      	ldr	r3, [pc, #104]	; (6040 <xTaskRemoveFromEventList+0x80>)
    5fd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5fda:	bb53      	cbnz	r3, 6032 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    5fdc:	1d25      	adds	r5, r4, #4
    5fde:	4628      	mov	r0, r5
    5fe0:	4b16      	ldr	r3, [pc, #88]	; (603c <xTaskRemoveFromEventList+0x7c>)
    5fe2:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    5fe4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5fe6:	4b16      	ldr	r3, [pc, #88]	; (6040 <xTaskRemoveFromEventList+0x80>)
    5fe8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5fec:	4298      	cmp	r0, r3
    5fee:	bf84      	itt	hi
    5ff0:	4b13      	ldrhi	r3, [pc, #76]	; (6040 <xTaskRemoveFromEventList+0x80>)
    5ff2:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5ff6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5ffa:	4629      	mov	r1, r5
    5ffc:	4b11      	ldr	r3, [pc, #68]	; (6044 <xTaskRemoveFromEventList+0x84>)
    5ffe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6002:	4b11      	ldr	r3, [pc, #68]	; (6048 <xTaskRemoveFromEventList+0x88>)
    6004:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    6006:	4b0e      	ldr	r3, [pc, #56]	; (6040 <xTaskRemoveFromEventList+0x80>)
    6008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    600c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6010:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    6012:	bf83      	ittte	hi
    6014:	2001      	movhi	r0, #1
    6016:	4b0a      	ldrhi	r3, [pc, #40]	; (6040 <xTaskRemoveFromEventList+0x80>)
    6018:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    601c:	2000      	movls	r0, #0
}
    601e:	bd38      	pop	{r3, r4, r5, pc}
    6020:	f04f 0380 	mov.w	r3, #128	; 0x80
    6024:	f383 8811 	msr	BASEPRI, r3
    6028:	f3bf 8f6f 	isb	sy
    602c:	f3bf 8f4f 	dsb	sy
    6030:	e7fe      	b.n	6030 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    6032:	4629      	mov	r1, r5
    6034:	4805      	ldr	r0, [pc, #20]	; (604c <xTaskRemoveFromEventList+0x8c>)
    6036:	4b04      	ldr	r3, [pc, #16]	; (6048 <xTaskRemoveFromEventList+0x88>)
    6038:	4798      	blx	r3
    603a:	e7e4      	b.n	6006 <xTaskRemoveFromEventList+0x46>
    603c:	000049f1 	.word	0x000049f1
    6040:	20003410 	.word	0x20003410
    6044:	20003438 	.word	0x20003438
    6048:	000049a5 	.word	0x000049a5
    604c:	20003424 	.word	0x20003424

00006050 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    6050:	4b03      	ldr	r3, [pc, #12]	; (6060 <vTaskInternalSetTimeOutState+0x10>)
    6052:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    6056:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    6058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    605c:	6043      	str	r3, [r0, #4]
    605e:	4770      	bx	lr
    6060:	20003410 	.word	0x20003410

00006064 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    6064:	b1f8      	cbz	r0, 60a6 <xTaskCheckForTimeOut+0x42>
{
    6066:	b570      	push	{r4, r5, r6, lr}
    6068:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    606a:	b329      	cbz	r1, 60b8 <xTaskCheckForTimeOut+0x54>
    606c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    606e:	4b1c      	ldr	r3, [pc, #112]	; (60e0 <xTaskCheckForTimeOut+0x7c>)
    6070:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    6072:	4b1c      	ldr	r3, [pc, #112]	; (60e4 <xTaskCheckForTimeOut+0x80>)
    6074:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    6078:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    607a:	6823      	ldr	r3, [r4, #0]
    607c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6080:	d02a      	beq.n	60d8 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    6082:	4818      	ldr	r0, [pc, #96]	; (60e4 <xTaskCheckForTimeOut+0x80>)
    6084:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    6088:	682e      	ldr	r6, [r5, #0]
    608a:	4286      	cmp	r6, r0
    608c:	d001      	beq.n	6092 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    608e:	428a      	cmp	r2, r1
    6090:	d224      	bcs.n	60dc <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    6092:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    6094:	429a      	cmp	r2, r3
    6096:	d318      	bcc.n	60ca <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    6098:	2300      	movs	r3, #0
    609a:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    609c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    609e:	4b12      	ldr	r3, [pc, #72]	; (60e8 <xTaskCheckForTimeOut+0x84>)
    60a0:	4798      	blx	r3
}
    60a2:	4620      	mov	r0, r4
    60a4:	bd70      	pop	{r4, r5, r6, pc}
    60a6:	f04f 0380 	mov.w	r3, #128	; 0x80
    60aa:	f383 8811 	msr	BASEPRI, r3
    60ae:	f3bf 8f6f 	isb	sy
    60b2:	f3bf 8f4f 	dsb	sy
    60b6:	e7fe      	b.n	60b6 <xTaskCheckForTimeOut+0x52>
    60b8:	f04f 0380 	mov.w	r3, #128	; 0x80
    60bc:	f383 8811 	msr	BASEPRI, r3
    60c0:	f3bf 8f6f 	isb	sy
    60c4:	f3bf 8f4f 	dsb	sy
    60c8:	e7fe      	b.n	60c8 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    60ca:	1a9b      	subs	r3, r3, r2
    60cc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    60ce:	4628      	mov	r0, r5
    60d0:	4b06      	ldr	r3, [pc, #24]	; (60ec <xTaskCheckForTimeOut+0x88>)
    60d2:	4798      	blx	r3
			xReturn = pdFALSE;
    60d4:	2400      	movs	r4, #0
    60d6:	e7e2      	b.n	609e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    60d8:	2400      	movs	r4, #0
    60da:	e7e0      	b.n	609e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    60dc:	2401      	movs	r4, #1
    60de:	e7de      	b.n	609e <xTaskCheckForTimeOut+0x3a>
    60e0:	00004ae5 	.word	0x00004ae5
    60e4:	20003410 	.word	0x20003410
    60e8:	00004b29 	.word	0x00004b29
    60ec:	00006051 	.word	0x00006051

000060f0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    60f0:	2201      	movs	r2, #1
    60f2:	4b02      	ldr	r3, [pc, #8]	; (60fc <vTaskMissedYield+0xc>)
    60f4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    60f8:	4770      	bx	lr
    60fa:	bf00      	nop
    60fc:	20003410 	.word	0x20003410

00006100 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    6100:	4b06      	ldr	r3, [pc, #24]	; (611c <xTaskGetSchedulerState+0x1c>)
    6102:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    6106:	b13b      	cbz	r3, 6118 <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    6108:	4b04      	ldr	r3, [pc, #16]	; (611c <xTaskGetSchedulerState+0x1c>)
    610a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    610e:	2b00      	cmp	r3, #0
    6110:	bf0c      	ite	eq
    6112:	2002      	moveq	r0, #2
    6114:	2000      	movne	r0, #0
    6116:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    6118:	2001      	movs	r0, #1
}
    611a:	4770      	bx	lr
    611c:	20003410 	.word	0x20003410

00006120 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    6120:	2800      	cmp	r0, #0
    6122:	d045      	beq.n	61b0 <xTaskPriorityInherit+0x90>
{
    6124:	b538      	push	{r3, r4, r5, lr}
    6126:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    6128:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    612a:	4922      	ldr	r1, [pc, #136]	; (61b4 <xTaskPriorityInherit+0x94>)
    612c:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    6130:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    6132:	428a      	cmp	r2, r1
    6134:	d232      	bcs.n	619c <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    6136:	6981      	ldr	r1, [r0, #24]
    6138:	2900      	cmp	r1, #0
    613a:	db06      	blt.n	614a <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    613c:	491d      	ldr	r1, [pc, #116]	; (61b4 <xTaskPriorityInherit+0x94>)
    613e:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    6142:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    6144:	f1c1 0105 	rsb	r1, r1, #5
    6148:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    614a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    614e:	491a      	ldr	r1, [pc, #104]	; (61b8 <xTaskPriorityInherit+0x98>)
    6150:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6154:	6969      	ldr	r1, [r5, #20]
    6156:	4291      	cmp	r1, r2
    6158:	d006      	beq.n	6168 <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    615a:	4a16      	ldr	r2, [pc, #88]	; (61b4 <xTaskPriorityInherit+0x94>)
    615c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    6160:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    6162:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    6164:	2001      	movs	r0, #1
    6166:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    6168:	1d2c      	adds	r4, r5, #4
    616a:	4620      	mov	r0, r4
    616c:	4b13      	ldr	r3, [pc, #76]	; (61bc <xTaskPriorityInherit+0x9c>)
    616e:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    6170:	4b10      	ldr	r3, [pc, #64]	; (61b4 <xTaskPriorityInherit+0x94>)
    6172:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6176:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    6178:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    617a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    617e:	4298      	cmp	r0, r3
    6180:	bf84      	itt	hi
    6182:	4b0c      	ldrhi	r3, [pc, #48]	; (61b4 <xTaskPriorityInherit+0x94>)
    6184:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    6188:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    618c:	4621      	mov	r1, r4
    618e:	4b0a      	ldr	r3, [pc, #40]	; (61b8 <xTaskPriorityInherit+0x98>)
    6190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6194:	4b0a      	ldr	r3, [pc, #40]	; (61c0 <xTaskPriorityInherit+0xa0>)
    6196:	4798      	blx	r3
			xReturn = pdTRUE;
    6198:	2001      	movs	r0, #1
    619a:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    619c:	4a05      	ldr	r2, [pc, #20]	; (61b4 <xTaskPriorityInherit+0x94>)
    619e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    61a2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    61a4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    61a6:	4298      	cmp	r0, r3
    61a8:	bf2c      	ite	cs
    61aa:	2000      	movcs	r0, #0
    61ac:	2001      	movcc	r0, #1
    61ae:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    61b0:	2000      	movs	r0, #0
	return xReturn;
    61b2:	4770      	bx	lr
    61b4:	20003410 	.word	0x20003410
    61b8:	20003438 	.word	0x20003438
    61bc:	000049f1 	.word	0x000049f1
    61c0:	000049a5 	.word	0x000049a5

000061c4 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    61c4:	2800      	cmp	r0, #0
    61c6:	d03c      	beq.n	6242 <xTaskPriorityDisinherit+0x7e>
{
    61c8:	b538      	push	{r3, r4, r5, lr}
    61ca:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    61cc:	4a20      	ldr	r2, [pc, #128]	; (6250 <xTaskPriorityDisinherit+0x8c>)
    61ce:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    61d2:	4290      	cmp	r0, r2
    61d4:	d008      	beq.n	61e8 <xTaskPriorityDisinherit+0x24>
    61d6:	f04f 0380 	mov.w	r3, #128	; 0x80
    61da:	f383 8811 	msr	BASEPRI, r3
    61de:	f3bf 8f6f 	isb	sy
    61e2:	f3bf 8f4f 	dsb	sy
    61e6:	e7fe      	b.n	61e6 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    61e8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    61ea:	b942      	cbnz	r2, 61fe <xTaskPriorityDisinherit+0x3a>
    61ec:	f04f 0380 	mov.w	r3, #128	; 0x80
    61f0:	f383 8811 	msr	BASEPRI, r3
    61f4:	f3bf 8f6f 	isb	sy
    61f8:	f3bf 8f4f 	dsb	sy
    61fc:	e7fe      	b.n	61fc <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    61fe:	3a01      	subs	r2, #1
    6200:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    6202:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    6204:	6c61      	ldr	r1, [r4, #68]	; 0x44
    6206:	4288      	cmp	r0, r1
    6208:	d01d      	beq.n	6246 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    620a:	b9f2      	cbnz	r2, 624a <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    620c:	1d25      	adds	r5, r4, #4
    620e:	4628      	mov	r0, r5
    6210:	4b10      	ldr	r3, [pc, #64]	; (6254 <xTaskPriorityDisinherit+0x90>)
    6212:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    6214:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6216:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    6218:	f1c0 0305 	rsb	r3, r0, #5
    621c:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    621e:	4b0c      	ldr	r3, [pc, #48]	; (6250 <xTaskPriorityDisinherit+0x8c>)
    6220:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6224:	4298      	cmp	r0, r3
    6226:	bf84      	itt	hi
    6228:	4b09      	ldrhi	r3, [pc, #36]	; (6250 <xTaskPriorityDisinherit+0x8c>)
    622a:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    622e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6232:	4629      	mov	r1, r5
    6234:	4b08      	ldr	r3, [pc, #32]	; (6258 <xTaskPriorityDisinherit+0x94>)
    6236:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    623a:	4b08      	ldr	r3, [pc, #32]	; (625c <xTaskPriorityDisinherit+0x98>)
    623c:	4798      	blx	r3
				xReturn = pdTRUE;
    623e:	2001      	movs	r0, #1
    6240:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    6242:	2000      	movs	r0, #0
    6244:	4770      	bx	lr
    6246:	2000      	movs	r0, #0
    6248:	bd38      	pop	{r3, r4, r5, pc}
    624a:	2000      	movs	r0, #0
}
    624c:	bd38      	pop	{r3, r4, r5, pc}
    624e:	bf00      	nop
    6250:	20003410 	.word	0x20003410
    6254:	000049f1 	.word	0x000049f1
    6258:	20003438 	.word	0x20003438
    625c:	000049a5 	.word	0x000049a5

00006260 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    6260:	2800      	cmp	r0, #0
    6262:	d049      	beq.n	62f8 <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    6264:	b538      	push	{r3, r4, r5, lr}
    6266:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    6268:	6c80      	ldr	r0, [r0, #72]	; 0x48
    626a:	b940      	cbnz	r0, 627e <vTaskPriorityDisinheritAfterTimeout+0x1e>
    626c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6270:	f383 8811 	msr	BASEPRI, r3
    6274:	f3bf 8f6f 	isb	sy
    6278:	f3bf 8f4f 	dsb	sy
    627c:	e7fe      	b.n	627c <vTaskPriorityDisinheritAfterTimeout+0x1c>
    627e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6280:	428a      	cmp	r2, r1
    6282:	bf38      	it	cc
    6284:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    6286:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    6288:	4291      	cmp	r1, r2
    628a:	d001      	beq.n	6290 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    628c:	2801      	cmp	r0, #1
    628e:	d000      	beq.n	6292 <vTaskPriorityDisinheritAfterTimeout+0x32>
    6290:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    6292:	481a      	ldr	r0, [pc, #104]	; (62fc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    6294:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    6298:	4284      	cmp	r4, r0
    629a:	d108      	bne.n	62ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
    629c:	f04f 0380 	mov.w	r3, #128	; 0x80
    62a0:	f383 8811 	msr	BASEPRI, r3
    62a4:	f3bf 8f6f 	isb	sy
    62a8:	f3bf 8f4f 	dsb	sy
    62ac:	e7fe      	b.n	62ac <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    62ae:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    62b0:	69a0      	ldr	r0, [r4, #24]
    62b2:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    62b4:	bfa4      	itt	ge
    62b6:	f1c2 0205 	rsbge	r2, r2, #5
    62ba:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    62bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    62c0:	4a0f      	ldr	r2, [pc, #60]	; (6300 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    62c2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    62c6:	6962      	ldr	r2, [r4, #20]
    62c8:	428a      	cmp	r2, r1
    62ca:	d1e1      	bne.n	6290 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    62cc:	1d25      	adds	r5, r4, #4
    62ce:	4628      	mov	r0, r5
    62d0:	4b0c      	ldr	r3, [pc, #48]	; (6304 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    62d2:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    62d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    62d6:	4b09      	ldr	r3, [pc, #36]	; (62fc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    62d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    62dc:	4298      	cmp	r0, r3
    62de:	bf84      	itt	hi
    62e0:	4b06      	ldrhi	r3, [pc, #24]	; (62fc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    62e2:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    62e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    62ea:	4629      	mov	r1, r5
    62ec:	4b04      	ldr	r3, [pc, #16]	; (6300 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    62ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    62f2:	4b05      	ldr	r3, [pc, #20]	; (6308 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    62f4:	4798      	blx	r3
}
    62f6:	e7cb      	b.n	6290 <vTaskPriorityDisinheritAfterTimeout+0x30>
    62f8:	4770      	bx	lr
    62fa:	bf00      	nop
    62fc:	20003410 	.word	0x20003410
    6300:	20003438 	.word	0x20003438
    6304:	000049f1 	.word	0x000049f1
    6308:	000049a5 	.word	0x000049a5

0000630c <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    630c:	4b06      	ldr	r3, [pc, #24]	; (6328 <pvTaskIncrementMutexHeldCount+0x1c>)
    630e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6312:	b12b      	cbz	r3, 6320 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    6314:	4b04      	ldr	r3, [pc, #16]	; (6328 <pvTaskIncrementMutexHeldCount+0x1c>)
    6316:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    631a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    631c:	3301      	adds	r3, #1
    631e:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    6320:	4b01      	ldr	r3, [pc, #4]	; (6328 <pvTaskIncrementMutexHeldCount+0x1c>)
    6322:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    6326:	4770      	bx	lr
    6328:	20003410 	.word	0x20003410

0000632c <xTaskNotifyWait>:
{
    632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    632e:	4607      	mov	r7, r0
    6330:	460d      	mov	r5, r1
    6332:	4614      	mov	r4, r2
    6334:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    6336:	4b25      	ldr	r3, [pc, #148]	; (63cc <xTaskNotifyWait+0xa0>)
    6338:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    633a:	4b25      	ldr	r3, [pc, #148]	; (63d0 <xTaskNotifyWait+0xa4>)
    633c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6340:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    6344:	b2db      	uxtb	r3, r3
    6346:	2b02      	cmp	r3, #2
    6348:	d00c      	beq.n	6364 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    634a:	4b21      	ldr	r3, [pc, #132]	; (63d0 <xTaskNotifyWait+0xa4>)
    634c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6350:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    6352:	ea20 0007 	bic.w	r0, r0, r7
    6356:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    6358:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    635c:	2201      	movs	r2, #1
    635e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    6362:	b9e6      	cbnz	r6, 639e <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    6364:	4b1b      	ldr	r3, [pc, #108]	; (63d4 <xTaskNotifyWait+0xa8>)
    6366:	4798      	blx	r3
	taskENTER_CRITICAL();
    6368:	4b18      	ldr	r3, [pc, #96]	; (63cc <xTaskNotifyWait+0xa0>)
    636a:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    636c:	b124      	cbz	r4, 6378 <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    636e:	4b18      	ldr	r3, [pc, #96]	; (63d0 <xTaskNotifyWait+0xa4>)
    6370:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6376:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    6378:	4b15      	ldr	r3, [pc, #84]	; (63d0 <xTaskNotifyWait+0xa4>)
    637a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    637e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    6382:	b2db      	uxtb	r3, r3
    6384:	2b02      	cmp	r3, #2
    6386:	d017      	beq.n	63b8 <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    6388:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    638a:	4b11      	ldr	r3, [pc, #68]	; (63d0 <xTaskNotifyWait+0xa4>)
    638c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6390:	2200      	movs	r2, #0
    6392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    6396:	4b0f      	ldr	r3, [pc, #60]	; (63d4 <xTaskNotifyWait+0xa8>)
    6398:	4798      	blx	r3
}
    639a:	4620      	mov	r0, r4
    639c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    639e:	4611      	mov	r1, r2
    63a0:	4630      	mov	r0, r6
    63a2:	4b0d      	ldr	r3, [pc, #52]	; (63d8 <xTaskNotifyWait+0xac>)
    63a4:	4798      	blx	r3
				portYIELD_WITHIN_API();
    63a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    63aa:	4b0c      	ldr	r3, [pc, #48]	; (63dc <xTaskNotifyWait+0xb0>)
    63ac:	601a      	str	r2, [r3, #0]
    63ae:	f3bf 8f4f 	dsb	sy
    63b2:	f3bf 8f6f 	isb	sy
    63b6:	e7d5      	b.n	6364 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    63b8:	4b05      	ldr	r3, [pc, #20]	; (63d0 <xTaskNotifyWait+0xa4>)
    63ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    63be:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    63c0:	ea23 0505 	bic.w	r5, r3, r5
    63c4:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    63c6:	2401      	movs	r4, #1
    63c8:	e7df      	b.n	638a <xTaskNotifyWait+0x5e>
    63ca:	bf00      	nop
    63cc:	00004ae5 	.word	0x00004ae5
    63d0:	20003410 	.word	0x20003410
    63d4:	00004b29 	.word	0x00004b29
    63d8:	000058f5 	.word	0x000058f5
    63dc:	e000ed04 	.word	0xe000ed04

000063e0 <xTaskGenericNotifyFromISR>:
{
    63e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    63e4:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    63e6:	b310      	cbz	r0, 642e <xTaskGenericNotifyFromISR+0x4e>
    63e8:	4604      	mov	r4, r0
    63ea:	4699      	mov	r9, r3
    63ec:	4617      	mov	r7, r2
    63ee:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    63f0:	4b3e      	ldr	r3, [pc, #248]	; (64ec <xTaskGenericNotifyFromISR+0x10c>)
    63f2:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    63f4:	f3ef 8511 	mrs	r5, BASEPRI
    63f8:	f04f 0380 	mov.w	r3, #128	; 0x80
    63fc:	f383 8811 	msr	BASEPRI, r3
    6400:	f3bf 8f6f 	isb	sy
    6404:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    6408:	f1b9 0f00 	cmp.w	r9, #0
    640c:	d002      	beq.n	6414 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    640e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6410:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    6414:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    6418:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    641a:	2202      	movs	r2, #2
    641c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    6420:	1e7a      	subs	r2, r7, #1
    6422:	2a03      	cmp	r2, #3
    6424:	d810      	bhi.n	6448 <xTaskGenericNotifyFromISR+0x68>
    6426:	e8df f002 	tbb	[pc, r2]
    642a:	1c0b      	.short	0x1c0b
    642c:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    642e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6432:	f383 8811 	msr	BASEPRI, r3
    6436:	f3bf 8f6f 	isb	sy
    643a:	f3bf 8f4f 	dsb	sy
    643e:	e7fe      	b.n	643e <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    6440:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    6442:	ea42 0208 	orr.w	r2, r2, r8
    6446:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    6448:	2b01      	cmp	r3, #1
    644a:	d147      	bne.n	64dc <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    644c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    644e:	b1a3      	cbz	r3, 647a <xTaskGenericNotifyFromISR+0x9a>
    6450:	f04f 0380 	mov.w	r3, #128	; 0x80
    6454:	f383 8811 	msr	BASEPRI, r3
    6458:	f3bf 8f6f 	isb	sy
    645c:	f3bf 8f4f 	dsb	sy
    6460:	e7fe      	b.n	6460 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    6462:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    6464:	3201      	adds	r2, #1
    6466:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    6468:	e7ee      	b.n	6448 <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    646a:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    646e:	e7eb      	b.n	6448 <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    6470:	2b02      	cmp	r3, #2
    6472:	d031      	beq.n	64d8 <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    6474:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    6478:	e7e6      	b.n	6448 <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    647a:	4b1d      	ldr	r3, [pc, #116]	; (64f0 <xTaskGenericNotifyFromISR+0x110>)
    647c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    6480:	b9fb      	cbnz	r3, 64c2 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    6482:	1d27      	adds	r7, r4, #4
    6484:	4638      	mov	r0, r7
    6486:	4b1b      	ldr	r3, [pc, #108]	; (64f4 <xTaskGenericNotifyFromISR+0x114>)
    6488:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    648a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    648c:	4b18      	ldr	r3, [pc, #96]	; (64f0 <xTaskGenericNotifyFromISR+0x110>)
    648e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6492:	4298      	cmp	r0, r3
    6494:	bf84      	itt	hi
    6496:	4b16      	ldrhi	r3, [pc, #88]	; (64f0 <xTaskGenericNotifyFromISR+0x110>)
    6498:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    649c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    64a0:	4639      	mov	r1, r7
    64a2:	4b15      	ldr	r3, [pc, #84]	; (64f8 <xTaskGenericNotifyFromISR+0x118>)
    64a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    64a8:	4b14      	ldr	r3, [pc, #80]	; (64fc <xTaskGenericNotifyFromISR+0x11c>)
    64aa:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    64ac:	4b10      	ldr	r3, [pc, #64]	; (64f0 <xTaskGenericNotifyFromISR+0x110>)
    64ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    64b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    64b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    64b6:	429a      	cmp	r2, r3
    64b8:	d915      	bls.n	64e6 <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    64ba:	b146      	cbz	r6, 64ce <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    64bc:	2001      	movs	r0, #1
    64be:	6030      	str	r0, [r6, #0]
    64c0:	e00d      	b.n	64de <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    64c2:	f104 0118 	add.w	r1, r4, #24
    64c6:	480e      	ldr	r0, [pc, #56]	; (6500 <xTaskGenericNotifyFromISR+0x120>)
    64c8:	4b0c      	ldr	r3, [pc, #48]	; (64fc <xTaskGenericNotifyFromISR+0x11c>)
    64ca:	4798      	blx	r3
    64cc:	e7ee      	b.n	64ac <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    64ce:	2001      	movs	r0, #1
    64d0:	4b07      	ldr	r3, [pc, #28]	; (64f0 <xTaskGenericNotifyFromISR+0x110>)
    64d2:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    64d6:	e002      	b.n	64de <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    64d8:	2000      	movs	r0, #0
    64da:	e000      	b.n	64de <xTaskGenericNotifyFromISR+0xfe>
    64dc:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    64de:	f385 8811 	msr	BASEPRI, r5
}
    64e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    64e6:	2001      	movs	r0, #1
    64e8:	e7f9      	b.n	64de <xTaskGenericNotifyFromISR+0xfe>
    64ea:	bf00      	nop
    64ec:	00004d3d 	.word	0x00004d3d
    64f0:	20003410 	.word	0x20003410
    64f4:	000049f1 	.word	0x000049f1
    64f8:	20003438 	.word	0x20003438
    64fc:	000049a5 	.word	0x000049a5
    6500:	20003424 	.word	0x20003424

00006504 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    6504:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    6506:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    6508:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    650a:	4291      	cmp	r1, r2
    650c:	d80c      	bhi.n	6528 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    650e:	1ad2      	subs	r2, r2, r3
    6510:	6983      	ldr	r3, [r0, #24]
    6512:	429a      	cmp	r2, r3
    6514:	d301      	bcc.n	651a <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    6516:	2001      	movs	r0, #1
    6518:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    651a:	1d01      	adds	r1, r0, #4
    651c:	4b09      	ldr	r3, [pc, #36]	; (6544 <prvInsertTimerInActiveList+0x40>)
    651e:	6818      	ldr	r0, [r3, #0]
    6520:	4b09      	ldr	r3, [pc, #36]	; (6548 <prvInsertTimerInActiveList+0x44>)
    6522:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    6524:	2000      	movs	r0, #0
    6526:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    6528:	429a      	cmp	r2, r3
    652a:	d201      	bcs.n	6530 <prvInsertTimerInActiveList+0x2c>
    652c:	4299      	cmp	r1, r3
    652e:	d206      	bcs.n	653e <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    6530:	1d01      	adds	r1, r0, #4
    6532:	4b04      	ldr	r3, [pc, #16]	; (6544 <prvInsertTimerInActiveList+0x40>)
    6534:	6858      	ldr	r0, [r3, #4]
    6536:	4b04      	ldr	r3, [pc, #16]	; (6548 <prvInsertTimerInActiveList+0x44>)
    6538:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    653a:	2000      	movs	r0, #0
    653c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    653e:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    6540:	bd08      	pop	{r3, pc}
    6542:	bf00      	nop
    6544:	200034fc 	.word	0x200034fc
    6548:	000049bd 	.word	0x000049bd

0000654c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    654e:	4b0d      	ldr	r3, [pc, #52]	; (6584 <prvCheckForValidListAndQueue+0x38>)
    6550:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    6552:	4b0d      	ldr	r3, [pc, #52]	; (6588 <prvCheckForValidListAndQueue+0x3c>)
    6554:	689b      	ldr	r3, [r3, #8]
    6556:	b113      	cbz	r3, 655e <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    6558:	4b0c      	ldr	r3, [pc, #48]	; (658c <prvCheckForValidListAndQueue+0x40>)
    655a:	4798      	blx	r3
    655c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    655e:	4c0a      	ldr	r4, [pc, #40]	; (6588 <prvCheckForValidListAndQueue+0x3c>)
    6560:	f104 060c 	add.w	r6, r4, #12
    6564:	4630      	mov	r0, r6
    6566:	4f0a      	ldr	r7, [pc, #40]	; (6590 <prvCheckForValidListAndQueue+0x44>)
    6568:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    656a:	f104 0520 	add.w	r5, r4, #32
    656e:	4628      	mov	r0, r5
    6570:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    6572:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    6574:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    6576:	2200      	movs	r2, #0
    6578:	210c      	movs	r1, #12
    657a:	2014      	movs	r0, #20
    657c:	4b05      	ldr	r3, [pc, #20]	; (6594 <prvCheckForValidListAndQueue+0x48>)
    657e:	4798      	blx	r3
    6580:	60a0      	str	r0, [r4, #8]
    6582:	e7e9      	b.n	6558 <prvCheckForValidListAndQueue+0xc>
    6584:	00004ae5 	.word	0x00004ae5
    6588:	200034fc 	.word	0x200034fc
    658c:	00004b29 	.word	0x00004b29
    6590:	00004989 	.word	0x00004989
    6594:	00005145 	.word	0x00005145

00006598 <xTimerCreateTimerTask>:
{
    6598:	b510      	push	{r4, lr}
    659a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    659c:	4b0d      	ldr	r3, [pc, #52]	; (65d4 <xTimerCreateTimerTask+0x3c>)
    659e:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    65a0:	4b0d      	ldr	r3, [pc, #52]	; (65d8 <xTimerCreateTimerTask+0x40>)
    65a2:	689b      	ldr	r3, [r3, #8]
    65a4:	b163      	cbz	r3, 65c0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    65a6:	4b0d      	ldr	r3, [pc, #52]	; (65dc <xTimerCreateTimerTask+0x44>)
    65a8:	9301      	str	r3, [sp, #4]
    65aa:	2303      	movs	r3, #3
    65ac:	9300      	str	r3, [sp, #0]
    65ae:	2300      	movs	r3, #0
    65b0:	2280      	movs	r2, #128	; 0x80
    65b2:	490b      	ldr	r1, [pc, #44]	; (65e0 <xTimerCreateTimerTask+0x48>)
    65b4:	480b      	ldr	r0, [pc, #44]	; (65e4 <xTimerCreateTimerTask+0x4c>)
    65b6:	4c0c      	ldr	r4, [pc, #48]	; (65e8 <xTimerCreateTimerTask+0x50>)
    65b8:	47a0      	blx	r4
	configASSERT(xReturn);
    65ba:	b108      	cbz	r0, 65c0 <xTimerCreateTimerTask+0x28>
}
    65bc:	b002      	add	sp, #8
    65be:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    65c0:	f04f 0380 	mov.w	r3, #128	; 0x80
    65c4:	f383 8811 	msr	BASEPRI, r3
    65c8:	f3bf 8f6f 	isb	sy
    65cc:	f3bf 8f4f 	dsb	sy
    65d0:	e7fe      	b.n	65d0 <xTimerCreateTimerTask+0x38>
    65d2:	bf00      	nop
    65d4:	0000654d 	.word	0x0000654d
    65d8:	200034fc 	.word	0x200034fc
    65dc:	20003530 	.word	0x20003530
    65e0:	00009210 	.word	0x00009210
    65e4:	00006759 	.word	0x00006759
    65e8:	00005975 	.word	0x00005975

000065ec <xTimerCreate>:
{
    65ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65f0:	4680      	mov	r8, r0
    65f2:	460d      	mov	r5, r1
    65f4:	4617      	mov	r7, r2
    65f6:	461e      	mov	r6, r3
	pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t));
    65f8:	202c      	movs	r0, #44	; 0x2c
    65fa:	4b0e      	ldr	r3, [pc, #56]	; (6634 <xTimerCreate+0x48>)
    65fc:	4798      	blx	r3
	if (pxNewTimer != NULL) {
    65fe:	4604      	mov	r4, r0
    6600:	b1a8      	cbz	r0, 662e <xTimerCreate+0x42>
	configASSERT((xTimerPeriodInTicks > 0));
    6602:	b945      	cbnz	r5, 6616 <xTimerCreate+0x2a>
    6604:	f04f 0380 	mov.w	r3, #128	; 0x80
    6608:	f383 8811 	msr	BASEPRI, r3
    660c:	f3bf 8f6f 	isb	sy
    6610:	f3bf 8f4f 	dsb	sy
    6614:	e7fe      	b.n	6614 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
    6616:	4b08      	ldr	r3, [pc, #32]	; (6638 <xTimerCreate+0x4c>)
    6618:	4798      	blx	r3
		pxNewTimer->pcTimerName         = pcTimerName;
    661a:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    661e:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload        = uxAutoReload;
    6620:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID           = pvTimerID;
    6622:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction  = pxCallbackFunction;
    6624:	9b06      	ldr	r3, [sp, #24]
    6626:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem(&(pxNewTimer->xTimerListItem));
    6628:	1d20      	adds	r0, r4, #4
    662a:	4b04      	ldr	r3, [pc, #16]	; (663c <xTimerCreate+0x50>)
    662c:	4798      	blx	r3
}
    662e:	4620      	mov	r0, r4
    6630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6634:	00004d95 	.word	0x00004d95
    6638:	0000654d 	.word	0x0000654d
    663c:	0000499f 	.word	0x0000499f

00006640 <xTimerGenericCommand>:
	configASSERT(xTimer);
    6640:	b1d8      	cbz	r0, 667a <xTimerGenericCommand+0x3a>
{
    6642:	b530      	push	{r4, r5, lr}
    6644:	b085      	sub	sp, #20
    6646:	4615      	mov	r5, r2
    6648:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    664a:	4a14      	ldr	r2, [pc, #80]	; (669c <xTimerGenericCommand+0x5c>)
    664c:	6890      	ldr	r0, [r2, #8]
    664e:	b310      	cbz	r0, 6696 <xTimerGenericCommand+0x56>
    6650:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    6652:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    6654:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    6656:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    6658:	2905      	cmp	r1, #5
    665a:	dc17      	bgt.n	668c <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    665c:	4b10      	ldr	r3, [pc, #64]	; (66a0 <xTimerGenericCommand+0x60>)
    665e:	4798      	blx	r3
    6660:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    6662:	f04f 0300 	mov.w	r3, #0
    6666:	bf0c      	ite	eq
    6668:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    666a:	461a      	movne	r2, r3
    666c:	a901      	add	r1, sp, #4
    666e:	480b      	ldr	r0, [pc, #44]	; (669c <xTimerGenericCommand+0x5c>)
    6670:	6880      	ldr	r0, [r0, #8]
    6672:	4c0c      	ldr	r4, [pc, #48]	; (66a4 <xTimerGenericCommand+0x64>)
    6674:	47a0      	blx	r4
}
    6676:	b005      	add	sp, #20
    6678:	bd30      	pop	{r4, r5, pc}
    667a:	f04f 0380 	mov.w	r3, #128	; 0x80
    667e:	f383 8811 	msr	BASEPRI, r3
    6682:	f3bf 8f6f 	isb	sy
    6686:	f3bf 8f4f 	dsb	sy
    668a:	e7fe      	b.n	668a <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    668c:	2300      	movs	r3, #0
    668e:	a901      	add	r1, sp, #4
    6690:	4c05      	ldr	r4, [pc, #20]	; (66a8 <xTimerGenericCommand+0x68>)
    6692:	47a0      	blx	r4
    6694:	e7ef      	b.n	6676 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    6696:	2000      	movs	r0, #0
	return xReturn;
    6698:	e7ed      	b.n	6676 <xTimerGenericCommand+0x36>
    669a:	bf00      	nop
    669c:	200034fc 	.word	0x200034fc
    66a0:	00006101 	.word	0x00006101
    66a4:	0000519d 	.word	0x0000519d
    66a8:	000053a5 	.word	0x000053a5

000066ac <prvSampleTimeNow>:
{
    66ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    66b0:	b082      	sub	sp, #8
    66b2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    66b4:	4b23      	ldr	r3, [pc, #140]	; (6744 <prvSampleTimeNow+0x98>)
    66b6:	4798      	blx	r3
    66b8:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    66ba:	4b23      	ldr	r3, [pc, #140]	; (6748 <prvSampleTimeNow+0x9c>)
    66bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    66be:	4298      	cmp	r0, r3
    66c0:	d319      	bcc.n	66f6 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    66c2:	2300      	movs	r3, #0
    66c4:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    66c8:	4b1f      	ldr	r3, [pc, #124]	; (6748 <prvSampleTimeNow+0x9c>)
    66ca:	639f      	str	r7, [r3, #56]	; 0x38
}
    66cc:	4638      	mov	r0, r7
    66ce:	b002      	add	sp, #8
    66d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    66d4:	2100      	movs	r1, #0
    66d6:	9100      	str	r1, [sp, #0]
    66d8:	460b      	mov	r3, r1
    66da:	4652      	mov	r2, sl
    66dc:	4620      	mov	r0, r4
    66de:	4c1b      	ldr	r4, [pc, #108]	; (674c <prvSampleTimeNow+0xa0>)
    66e0:	47a0      	blx	r4
				configASSERT(xResult);
    66e2:	b950      	cbnz	r0, 66fa <prvSampleTimeNow+0x4e>
    66e4:	f04f 0380 	mov.w	r3, #128	; 0x80
    66e8:	f383 8811 	msr	BASEPRI, r3
    66ec:	f3bf 8f6f 	isb	sy
    66f0:	f3bf 8f4f 	dsb	sy
    66f4:	e7fe      	b.n	66f4 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    66f6:	4d14      	ldr	r5, [pc, #80]	; (6748 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    66f8:	4e15      	ldr	r6, [pc, #84]	; (6750 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    66fa:	686b      	ldr	r3, [r5, #4]
    66fc:	681a      	ldr	r2, [r3, #0]
    66fe:	b1c2      	cbz	r2, 6732 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6700:	68db      	ldr	r3, [r3, #12]
    6702:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6706:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6708:	f104 0904 	add.w	r9, r4, #4
    670c:	4648      	mov	r0, r9
    670e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6710:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6712:	4620      	mov	r0, r4
    6714:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6716:	69e3      	ldr	r3, [r4, #28]
    6718:	2b01      	cmp	r3, #1
    671a:	d1ee      	bne.n	66fa <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    671c:	69a3      	ldr	r3, [r4, #24]
    671e:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    6720:	459a      	cmp	sl, r3
    6722:	d2d7      	bcs.n	66d4 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    6724:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    6726:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    6728:	4649      	mov	r1, r9
    672a:	6868      	ldr	r0, [r5, #4]
    672c:	4b09      	ldr	r3, [pc, #36]	; (6754 <prvSampleTimeNow+0xa8>)
    672e:	4798      	blx	r3
    6730:	e7e3      	b.n	66fa <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    6732:	4a05      	ldr	r2, [pc, #20]	; (6748 <prvSampleTimeNow+0x9c>)
    6734:	6811      	ldr	r1, [r2, #0]
    6736:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    6738:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    673a:	2301      	movs	r3, #1
    673c:	f8c8 3000 	str.w	r3, [r8]
    6740:	e7c2      	b.n	66c8 <prvSampleTimeNow+0x1c>
    6742:	bf00      	nop
    6744:	00005bed 	.word	0x00005bed
    6748:	200034fc 	.word	0x200034fc
    674c:	00006641 	.word	0x00006641
    6750:	000049f1 	.word	0x000049f1
    6754:	000049bd 	.word	0x000049bd

00006758 <prvTimerTask>:
{
    6758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    675c:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    675e:	4c65      	ldr	r4, [pc, #404]	; (68f4 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    6760:	4f65      	ldr	r7, [pc, #404]	; (68f8 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    6762:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 6918 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    6766:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 691c <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    676a:	6863      	ldr	r3, [r4, #4]
    676c:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    676e:	b172      	cbz	r2, 678e <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6770:	68db      	ldr	r3, [r3, #12]
    6772:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    6774:	4b61      	ldr	r3, [pc, #388]	; (68fc <prvTimerTask+0x1a4>)
    6776:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6778:	a803      	add	r0, sp, #12
    677a:	4b61      	ldr	r3, [pc, #388]	; (6900 <prvTimerTask+0x1a8>)
    677c:	4798      	blx	r3
    677e:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    6780:	9b03      	ldr	r3, [sp, #12]
    6782:	2b00      	cmp	r3, #0
    6784:	d179      	bne.n	687a <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    6786:	42a8      	cmp	r0, r5
    6788:	d24a      	bcs.n	6820 <prvTimerTask+0xc8>
    678a:	2200      	movs	r2, #0
    678c:	e00e      	b.n	67ac <prvTimerTask+0x54>
	vTaskSuspendAll();
    678e:	4b5b      	ldr	r3, [pc, #364]	; (68fc <prvTimerTask+0x1a4>)
    6790:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6792:	a803      	add	r0, sp, #12
    6794:	4b5a      	ldr	r3, [pc, #360]	; (6900 <prvTimerTask+0x1a8>)
    6796:	4798      	blx	r3
    6798:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    679a:	9b03      	ldr	r3, [sp, #12]
    679c:	2b00      	cmp	r3, #0
    679e:	d16c      	bne.n	687a <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    67a0:	6823      	ldr	r3, [r4, #0]
    67a2:	681a      	ldr	r2, [r3, #0]
    67a4:	fab2 f282 	clz	r2, r2
    67a8:	0952      	lsrs	r2, r2, #5
    67aa:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    67ac:	1ba9      	subs	r1, r5, r6
    67ae:	68a0      	ldr	r0, [r4, #8]
    67b0:	4b54      	ldr	r3, [pc, #336]	; (6904 <prvTimerTask+0x1ac>)
    67b2:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    67b4:	47b8      	blx	r7
    67b6:	b938      	cbnz	r0, 67c8 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    67b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    67bc:	f8c9 3000 	str.w	r3, [r9]
    67c0:	f3bf 8f4f 	dsb	sy
    67c4:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    67c8:	4d4f      	ldr	r5, [pc, #316]	; (6908 <prvTimerTask+0x1b0>)
    67ca:	2200      	movs	r2, #0
    67cc:	a903      	add	r1, sp, #12
    67ce:	68a0      	ldr	r0, [r4, #8]
    67d0:	47a8      	blx	r5
    67d2:	2800      	cmp	r0, #0
    67d4:	d0c9      	beq.n	676a <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    67d6:	9b03      	ldr	r3, [sp, #12]
    67d8:	2b00      	cmp	r3, #0
    67da:	dbf6      	blt.n	67ca <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    67dc:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    67de:	6973      	ldr	r3, [r6, #20]
    67e0:	b10b      	cbz	r3, 67e6 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    67e2:	1d30      	adds	r0, r6, #4
    67e4:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    67e6:	a802      	add	r0, sp, #8
    67e8:	4b45      	ldr	r3, [pc, #276]	; (6900 <prvTimerTask+0x1a8>)
    67ea:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    67ec:	9b03      	ldr	r3, [sp, #12]
    67ee:	2b09      	cmp	r3, #9
    67f0:	d8eb      	bhi.n	67ca <prvTimerTask+0x72>
    67f2:	a201      	add	r2, pc, #4	; (adr r2, 67f8 <prvTimerTask+0xa0>)
    67f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    67f8:	0000687f 	.word	0x0000687f
    67fc:	0000687f 	.word	0x0000687f
    6800:	0000687f 	.word	0x0000687f
    6804:	000067cb 	.word	0x000067cb
    6808:	000068c7 	.word	0x000068c7
    680c:	000068ed 	.word	0x000068ed
    6810:	0000687f 	.word	0x0000687f
    6814:	0000687f 	.word	0x0000687f
    6818:	000067cb 	.word	0x000067cb
    681c:	000068c7 	.word	0x000068c7
				(void)xTaskResumeAll();
    6820:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6822:	6863      	ldr	r3, [r4, #4]
    6824:	68db      	ldr	r3, [r3, #12]
    6826:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    682a:	f10a 0004 	add.w	r0, sl, #4
    682e:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6830:	f8da 301c 	ldr.w	r3, [sl, #28]
    6834:	2b01      	cmp	r3, #1
    6836:	d004      	beq.n	6842 <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6838:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    683c:	4650      	mov	r0, sl
    683e:	4798      	blx	r3
    6840:	e7c2      	b.n	67c8 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    6842:	f8da 1018 	ldr.w	r1, [sl, #24]
    6846:	462b      	mov	r3, r5
    6848:	4632      	mov	r2, r6
    684a:	4429      	add	r1, r5
    684c:	4650      	mov	r0, sl
    684e:	4e2f      	ldr	r6, [pc, #188]	; (690c <prvTimerTask+0x1b4>)
    6850:	47b0      	blx	r6
    6852:	2800      	cmp	r0, #0
    6854:	d0f0      	beq.n	6838 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6856:	2100      	movs	r1, #0
    6858:	9100      	str	r1, [sp, #0]
    685a:	460b      	mov	r3, r1
    685c:	462a      	mov	r2, r5
    685e:	4650      	mov	r0, sl
    6860:	4d2b      	ldr	r5, [pc, #172]	; (6910 <prvTimerTask+0x1b8>)
    6862:	47a8      	blx	r5
			configASSERT(xResult);
    6864:	2800      	cmp	r0, #0
    6866:	d1e7      	bne.n	6838 <prvTimerTask+0xe0>
    6868:	f04f 0380 	mov.w	r3, #128	; 0x80
    686c:	f383 8811 	msr	BASEPRI, r3
    6870:	f3bf 8f6f 	isb	sy
    6874:	f3bf 8f4f 	dsb	sy
    6878:	e7fe      	b.n	6878 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    687a:	47b8      	blx	r7
    687c:	e7a4      	b.n	67c8 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    687e:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    6880:	69b1      	ldr	r1, [r6, #24]
    6882:	462b      	mov	r3, r5
    6884:	4602      	mov	r2, r0
    6886:	4429      	add	r1, r5
    6888:	4630      	mov	r0, r6
    688a:	4d20      	ldr	r5, [pc, #128]	; (690c <prvTimerTask+0x1b4>)
    688c:	47a8      	blx	r5
    688e:	2800      	cmp	r0, #0
    6890:	d09a      	beq.n	67c8 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6892:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6894:	4630      	mov	r0, r6
    6896:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6898:	69f3      	ldr	r3, [r6, #28]
    689a:	2b01      	cmp	r3, #1
    689c:	d194      	bne.n	67c8 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    689e:	69b2      	ldr	r2, [r6, #24]
    68a0:	2100      	movs	r1, #0
    68a2:	9100      	str	r1, [sp, #0]
    68a4:	460b      	mov	r3, r1
    68a6:	9804      	ldr	r0, [sp, #16]
    68a8:	4402      	add	r2, r0
    68aa:	4630      	mov	r0, r6
    68ac:	4d18      	ldr	r5, [pc, #96]	; (6910 <prvTimerTask+0x1b8>)
    68ae:	47a8      	blx	r5
						configASSERT(xResult);
    68b0:	2800      	cmp	r0, #0
    68b2:	d189      	bne.n	67c8 <prvTimerTask+0x70>
    68b4:	f04f 0380 	mov.w	r3, #128	; 0x80
    68b8:	f383 8811 	msr	BASEPRI, r3
    68bc:	f3bf 8f6f 	isb	sy
    68c0:	f3bf 8f4f 	dsb	sy
    68c4:	e7fe      	b.n	68c4 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    68c6:	9904      	ldr	r1, [sp, #16]
    68c8:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    68ca:	b131      	cbz	r1, 68da <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    68cc:	4603      	mov	r3, r0
    68ce:	4602      	mov	r2, r0
    68d0:	4401      	add	r1, r0
    68d2:	4630      	mov	r0, r6
    68d4:	4d0d      	ldr	r5, [pc, #52]	; (690c <prvTimerTask+0x1b4>)
    68d6:	47a8      	blx	r5
    68d8:	e776      	b.n	67c8 <prvTimerTask+0x70>
    68da:	f04f 0380 	mov.w	r3, #128	; 0x80
    68de:	f383 8811 	msr	BASEPRI, r3
    68e2:	f3bf 8f6f 	isb	sy
    68e6:	f3bf 8f4f 	dsb	sy
    68ea:	e7fe      	b.n	68ea <prvTimerTask+0x192>
				vPortFree(pxTimer);
    68ec:	4630      	mov	r0, r6
    68ee:	4b09      	ldr	r3, [pc, #36]	; (6914 <prvTimerTask+0x1bc>)
    68f0:	4798      	blx	r3
    68f2:	e769      	b.n	67c8 <prvTimerTask+0x70>
    68f4:	200034fc 	.word	0x200034fc
    68f8:	00005d21 	.word	0x00005d21
    68fc:	00005bd9 	.word	0x00005bd9
    6900:	000066ad 	.word	0x000066ad
    6904:	00005845 	.word	0x00005845
    6908:	000054ad 	.word	0x000054ad
    690c:	00006505 	.word	0x00006505
    6910:	00006641 	.word	0x00006641
    6914:	00004e75 	.word	0x00004e75
    6918:	e000ed04 	.word	0xe000ed04
    691c:	000049f1 	.word	0x000049f1

00006920 <atoi>:
    6920:	220a      	movs	r2, #10
    6922:	2100      	movs	r1, #0
    6924:	f000 ba0e 	b.w	6d44 <strtol>

00006928 <__libc_init_array>:
    6928:	b570      	push	{r4, r5, r6, lr}
    692a:	4e0d      	ldr	r6, [pc, #52]	; (6960 <__libc_init_array+0x38>)
    692c:	4c0d      	ldr	r4, [pc, #52]	; (6964 <__libc_init_array+0x3c>)
    692e:	1ba4      	subs	r4, r4, r6
    6930:	10a4      	asrs	r4, r4, #2
    6932:	2500      	movs	r5, #0
    6934:	42a5      	cmp	r5, r4
    6936:	d109      	bne.n	694c <__libc_init_array+0x24>
    6938:	4e0b      	ldr	r6, [pc, #44]	; (6968 <__libc_init_array+0x40>)
    693a:	4c0c      	ldr	r4, [pc, #48]	; (696c <__libc_init_array+0x44>)
    693c:	f002 fd3c 	bl	93b8 <_init>
    6940:	1ba4      	subs	r4, r4, r6
    6942:	10a4      	asrs	r4, r4, #2
    6944:	2500      	movs	r5, #0
    6946:	42a5      	cmp	r5, r4
    6948:	d105      	bne.n	6956 <__libc_init_array+0x2e>
    694a:	bd70      	pop	{r4, r5, r6, pc}
    694c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6950:	4798      	blx	r3
    6952:	3501      	adds	r5, #1
    6954:	e7ee      	b.n	6934 <__libc_init_array+0xc>
    6956:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    695a:	4798      	blx	r3
    695c:	3501      	adds	r5, #1
    695e:	e7f2      	b.n	6946 <__libc_init_array+0x1e>
    6960:	000093c4 	.word	0x000093c4
    6964:	000093c4 	.word	0x000093c4
    6968:	000093c4 	.word	0x000093c4
    696c:	000093c8 	.word	0x000093c8

00006970 <__locale_ctype_ptr_l>:
    6970:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    6974:	4770      	bx	lr

00006976 <__ascii_mbtowc>:
    6976:	b082      	sub	sp, #8
    6978:	b901      	cbnz	r1, 697c <__ascii_mbtowc+0x6>
    697a:	a901      	add	r1, sp, #4
    697c:	b142      	cbz	r2, 6990 <__ascii_mbtowc+0x1a>
    697e:	b14b      	cbz	r3, 6994 <__ascii_mbtowc+0x1e>
    6980:	7813      	ldrb	r3, [r2, #0]
    6982:	600b      	str	r3, [r1, #0]
    6984:	7812      	ldrb	r2, [r2, #0]
    6986:	1c10      	adds	r0, r2, #0
    6988:	bf18      	it	ne
    698a:	2001      	movne	r0, #1
    698c:	b002      	add	sp, #8
    698e:	4770      	bx	lr
    6990:	4610      	mov	r0, r2
    6992:	e7fb      	b.n	698c <__ascii_mbtowc+0x16>
    6994:	f06f 0001 	mvn.w	r0, #1
    6998:	e7f8      	b.n	698c <__ascii_mbtowc+0x16>

0000699a <memcmp>:
    699a:	b510      	push	{r4, lr}
    699c:	3901      	subs	r1, #1
    699e:	4402      	add	r2, r0
    69a0:	4290      	cmp	r0, r2
    69a2:	d101      	bne.n	69a8 <memcmp+0xe>
    69a4:	2000      	movs	r0, #0
    69a6:	bd10      	pop	{r4, pc}
    69a8:	f810 3b01 	ldrb.w	r3, [r0], #1
    69ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    69b0:	42a3      	cmp	r3, r4
    69b2:	d0f5      	beq.n	69a0 <memcmp+0x6>
    69b4:	1b18      	subs	r0, r3, r4
    69b6:	bd10      	pop	{r4, pc}

000069b8 <memcpy>:
    69b8:	b510      	push	{r4, lr}
    69ba:	1e43      	subs	r3, r0, #1
    69bc:	440a      	add	r2, r1
    69be:	4291      	cmp	r1, r2
    69c0:	d100      	bne.n	69c4 <memcpy+0xc>
    69c2:	bd10      	pop	{r4, pc}
    69c4:	f811 4b01 	ldrb.w	r4, [r1], #1
    69c8:	f803 4f01 	strb.w	r4, [r3, #1]!
    69cc:	e7f7      	b.n	69be <memcpy+0x6>

000069ce <memmove>:
    69ce:	4288      	cmp	r0, r1
    69d0:	b510      	push	{r4, lr}
    69d2:	eb01 0302 	add.w	r3, r1, r2
    69d6:	d803      	bhi.n	69e0 <memmove+0x12>
    69d8:	1e42      	subs	r2, r0, #1
    69da:	4299      	cmp	r1, r3
    69dc:	d10c      	bne.n	69f8 <memmove+0x2a>
    69de:	bd10      	pop	{r4, pc}
    69e0:	4298      	cmp	r0, r3
    69e2:	d2f9      	bcs.n	69d8 <memmove+0xa>
    69e4:	1881      	adds	r1, r0, r2
    69e6:	1ad2      	subs	r2, r2, r3
    69e8:	42d3      	cmn	r3, r2
    69ea:	d100      	bne.n	69ee <memmove+0x20>
    69ec:	bd10      	pop	{r4, pc}
    69ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    69f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
    69f6:	e7f7      	b.n	69e8 <memmove+0x1a>
    69f8:	f811 4b01 	ldrb.w	r4, [r1], #1
    69fc:	f802 4f01 	strb.w	r4, [r2, #1]!
    6a00:	e7eb      	b.n	69da <memmove+0xc>

00006a02 <memset>:
    6a02:	4402      	add	r2, r0
    6a04:	4603      	mov	r3, r0
    6a06:	4293      	cmp	r3, r2
    6a08:	d100      	bne.n	6a0c <memset+0xa>
    6a0a:	4770      	bx	lr
    6a0c:	f803 1b01 	strb.w	r1, [r3], #1
    6a10:	e7f9      	b.n	6a06 <memset+0x4>
	...

00006a14 <_free_r>:
    6a14:	b538      	push	{r3, r4, r5, lr}
    6a16:	4605      	mov	r5, r0
    6a18:	2900      	cmp	r1, #0
    6a1a:	d045      	beq.n	6aa8 <_free_r+0x94>
    6a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6a20:	1f0c      	subs	r4, r1, #4
    6a22:	2b00      	cmp	r3, #0
    6a24:	bfb8      	it	lt
    6a26:	18e4      	addlt	r4, r4, r3
    6a28:	f000 f9af 	bl	6d8a <__malloc_lock>
    6a2c:	4a1f      	ldr	r2, [pc, #124]	; (6aac <_free_r+0x98>)
    6a2e:	6813      	ldr	r3, [r2, #0]
    6a30:	4610      	mov	r0, r2
    6a32:	b933      	cbnz	r3, 6a42 <_free_r+0x2e>
    6a34:	6063      	str	r3, [r4, #4]
    6a36:	6014      	str	r4, [r2, #0]
    6a38:	4628      	mov	r0, r5
    6a3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6a3e:	f000 b9a5 	b.w	6d8c <__malloc_unlock>
    6a42:	42a3      	cmp	r3, r4
    6a44:	d90c      	bls.n	6a60 <_free_r+0x4c>
    6a46:	6821      	ldr	r1, [r4, #0]
    6a48:	1862      	adds	r2, r4, r1
    6a4a:	4293      	cmp	r3, r2
    6a4c:	bf04      	itt	eq
    6a4e:	681a      	ldreq	r2, [r3, #0]
    6a50:	685b      	ldreq	r3, [r3, #4]
    6a52:	6063      	str	r3, [r4, #4]
    6a54:	bf04      	itt	eq
    6a56:	1852      	addeq	r2, r2, r1
    6a58:	6022      	streq	r2, [r4, #0]
    6a5a:	6004      	str	r4, [r0, #0]
    6a5c:	e7ec      	b.n	6a38 <_free_r+0x24>
    6a5e:	4613      	mov	r3, r2
    6a60:	685a      	ldr	r2, [r3, #4]
    6a62:	b10a      	cbz	r2, 6a68 <_free_r+0x54>
    6a64:	42a2      	cmp	r2, r4
    6a66:	d9fa      	bls.n	6a5e <_free_r+0x4a>
    6a68:	6819      	ldr	r1, [r3, #0]
    6a6a:	1858      	adds	r0, r3, r1
    6a6c:	42a0      	cmp	r0, r4
    6a6e:	d10b      	bne.n	6a88 <_free_r+0x74>
    6a70:	6820      	ldr	r0, [r4, #0]
    6a72:	4401      	add	r1, r0
    6a74:	1858      	adds	r0, r3, r1
    6a76:	4282      	cmp	r2, r0
    6a78:	6019      	str	r1, [r3, #0]
    6a7a:	d1dd      	bne.n	6a38 <_free_r+0x24>
    6a7c:	6810      	ldr	r0, [r2, #0]
    6a7e:	6852      	ldr	r2, [r2, #4]
    6a80:	605a      	str	r2, [r3, #4]
    6a82:	4401      	add	r1, r0
    6a84:	6019      	str	r1, [r3, #0]
    6a86:	e7d7      	b.n	6a38 <_free_r+0x24>
    6a88:	d902      	bls.n	6a90 <_free_r+0x7c>
    6a8a:	230c      	movs	r3, #12
    6a8c:	602b      	str	r3, [r5, #0]
    6a8e:	e7d3      	b.n	6a38 <_free_r+0x24>
    6a90:	6820      	ldr	r0, [r4, #0]
    6a92:	1821      	adds	r1, r4, r0
    6a94:	428a      	cmp	r2, r1
    6a96:	bf04      	itt	eq
    6a98:	6811      	ldreq	r1, [r2, #0]
    6a9a:	6852      	ldreq	r2, [r2, #4]
    6a9c:	6062      	str	r2, [r4, #4]
    6a9e:	bf04      	itt	eq
    6aa0:	1809      	addeq	r1, r1, r0
    6aa2:	6021      	streq	r1, [r4, #0]
    6aa4:	605c      	str	r4, [r3, #4]
    6aa6:	e7c7      	b.n	6a38 <_free_r+0x24>
    6aa8:	bd38      	pop	{r3, r4, r5, pc}
    6aaa:	bf00      	nop
    6aac:	20003538 	.word	0x20003538

00006ab0 <_malloc_r>:
    6ab0:	b570      	push	{r4, r5, r6, lr}
    6ab2:	1ccd      	adds	r5, r1, #3
    6ab4:	f025 0503 	bic.w	r5, r5, #3
    6ab8:	3508      	adds	r5, #8
    6aba:	2d0c      	cmp	r5, #12
    6abc:	bf38      	it	cc
    6abe:	250c      	movcc	r5, #12
    6ac0:	2d00      	cmp	r5, #0
    6ac2:	4606      	mov	r6, r0
    6ac4:	db01      	blt.n	6aca <_malloc_r+0x1a>
    6ac6:	42a9      	cmp	r1, r5
    6ac8:	d903      	bls.n	6ad2 <_malloc_r+0x22>
    6aca:	230c      	movs	r3, #12
    6acc:	6033      	str	r3, [r6, #0]
    6ace:	2000      	movs	r0, #0
    6ad0:	bd70      	pop	{r4, r5, r6, pc}
    6ad2:	f000 f95a 	bl	6d8a <__malloc_lock>
    6ad6:	4a23      	ldr	r2, [pc, #140]	; (6b64 <_malloc_r+0xb4>)
    6ad8:	6814      	ldr	r4, [r2, #0]
    6ada:	4621      	mov	r1, r4
    6adc:	b991      	cbnz	r1, 6b04 <_malloc_r+0x54>
    6ade:	4c22      	ldr	r4, [pc, #136]	; (6b68 <_malloc_r+0xb8>)
    6ae0:	6823      	ldr	r3, [r4, #0]
    6ae2:	b91b      	cbnz	r3, 6aec <_malloc_r+0x3c>
    6ae4:	4630      	mov	r0, r6
    6ae6:	f000 f841 	bl	6b6c <_sbrk_r>
    6aea:	6020      	str	r0, [r4, #0]
    6aec:	4629      	mov	r1, r5
    6aee:	4630      	mov	r0, r6
    6af0:	f000 f83c 	bl	6b6c <_sbrk_r>
    6af4:	1c43      	adds	r3, r0, #1
    6af6:	d126      	bne.n	6b46 <_malloc_r+0x96>
    6af8:	230c      	movs	r3, #12
    6afa:	6033      	str	r3, [r6, #0]
    6afc:	4630      	mov	r0, r6
    6afe:	f000 f945 	bl	6d8c <__malloc_unlock>
    6b02:	e7e4      	b.n	6ace <_malloc_r+0x1e>
    6b04:	680b      	ldr	r3, [r1, #0]
    6b06:	1b5b      	subs	r3, r3, r5
    6b08:	d41a      	bmi.n	6b40 <_malloc_r+0x90>
    6b0a:	2b0b      	cmp	r3, #11
    6b0c:	d90f      	bls.n	6b2e <_malloc_r+0x7e>
    6b0e:	600b      	str	r3, [r1, #0]
    6b10:	50cd      	str	r5, [r1, r3]
    6b12:	18cc      	adds	r4, r1, r3
    6b14:	4630      	mov	r0, r6
    6b16:	f000 f939 	bl	6d8c <__malloc_unlock>
    6b1a:	f104 000b 	add.w	r0, r4, #11
    6b1e:	1d23      	adds	r3, r4, #4
    6b20:	f020 0007 	bic.w	r0, r0, #7
    6b24:	1ac3      	subs	r3, r0, r3
    6b26:	d01b      	beq.n	6b60 <_malloc_r+0xb0>
    6b28:	425a      	negs	r2, r3
    6b2a:	50e2      	str	r2, [r4, r3]
    6b2c:	bd70      	pop	{r4, r5, r6, pc}
    6b2e:	428c      	cmp	r4, r1
    6b30:	bf0d      	iteet	eq
    6b32:	6863      	ldreq	r3, [r4, #4]
    6b34:	684b      	ldrne	r3, [r1, #4]
    6b36:	6063      	strne	r3, [r4, #4]
    6b38:	6013      	streq	r3, [r2, #0]
    6b3a:	bf18      	it	ne
    6b3c:	460c      	movne	r4, r1
    6b3e:	e7e9      	b.n	6b14 <_malloc_r+0x64>
    6b40:	460c      	mov	r4, r1
    6b42:	6849      	ldr	r1, [r1, #4]
    6b44:	e7ca      	b.n	6adc <_malloc_r+0x2c>
    6b46:	1cc4      	adds	r4, r0, #3
    6b48:	f024 0403 	bic.w	r4, r4, #3
    6b4c:	42a0      	cmp	r0, r4
    6b4e:	d005      	beq.n	6b5c <_malloc_r+0xac>
    6b50:	1a21      	subs	r1, r4, r0
    6b52:	4630      	mov	r0, r6
    6b54:	f000 f80a 	bl	6b6c <_sbrk_r>
    6b58:	3001      	adds	r0, #1
    6b5a:	d0cd      	beq.n	6af8 <_malloc_r+0x48>
    6b5c:	6025      	str	r5, [r4, #0]
    6b5e:	e7d9      	b.n	6b14 <_malloc_r+0x64>
    6b60:	bd70      	pop	{r4, r5, r6, pc}
    6b62:	bf00      	nop
    6b64:	20003538 	.word	0x20003538
    6b68:	2000353c 	.word	0x2000353c

00006b6c <_sbrk_r>:
    6b6c:	b538      	push	{r3, r4, r5, lr}
    6b6e:	4c06      	ldr	r4, [pc, #24]	; (6b88 <_sbrk_r+0x1c>)
    6b70:	2300      	movs	r3, #0
    6b72:	4605      	mov	r5, r0
    6b74:	4608      	mov	r0, r1
    6b76:	6023      	str	r3, [r4, #0]
    6b78:	f7fc ffa6 	bl	3ac8 <_sbrk>
    6b7c:	1c43      	adds	r3, r0, #1
    6b7e:	d102      	bne.n	6b86 <_sbrk_r+0x1a>
    6b80:	6823      	ldr	r3, [r4, #0]
    6b82:	b103      	cbz	r3, 6b86 <_sbrk_r+0x1a>
    6b84:	602b      	str	r3, [r5, #0]
    6b86:	bd38      	pop	{r3, r4, r5, pc}
    6b88:	20003f7c 	.word	0x20003f7c

00006b8c <siprintf>:
    6b8c:	b40e      	push	{r1, r2, r3}
    6b8e:	b500      	push	{lr}
    6b90:	b09c      	sub	sp, #112	; 0x70
    6b92:	f44f 7102 	mov.w	r1, #520	; 0x208
    6b96:	ab1d      	add	r3, sp, #116	; 0x74
    6b98:	f8ad 1014 	strh.w	r1, [sp, #20]
    6b9c:	9002      	str	r0, [sp, #8]
    6b9e:	9006      	str	r0, [sp, #24]
    6ba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6ba4:	480a      	ldr	r0, [pc, #40]	; (6bd0 <siprintf+0x44>)
    6ba6:	9104      	str	r1, [sp, #16]
    6ba8:	9107      	str	r1, [sp, #28]
    6baa:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6bae:	f853 2b04 	ldr.w	r2, [r3], #4
    6bb2:	f8ad 1016 	strh.w	r1, [sp, #22]
    6bb6:	6800      	ldr	r0, [r0, #0]
    6bb8:	9301      	str	r3, [sp, #4]
    6bba:	a902      	add	r1, sp, #8
    6bbc:	f000 f942 	bl	6e44 <_svfiprintf_r>
    6bc0:	9b02      	ldr	r3, [sp, #8]
    6bc2:	2200      	movs	r2, #0
    6bc4:	701a      	strb	r2, [r3, #0]
    6bc6:	b01c      	add	sp, #112	; 0x70
    6bc8:	f85d eb04 	ldr.w	lr, [sp], #4
    6bcc:	b003      	add	sp, #12
    6bce:	4770      	bx	lr
    6bd0:	20000078 	.word	0x20000078

00006bd4 <strcpy>:
    6bd4:	4603      	mov	r3, r0
    6bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
    6bda:	f803 2b01 	strb.w	r2, [r3], #1
    6bde:	2a00      	cmp	r2, #0
    6be0:	d1f9      	bne.n	6bd6 <strcpy+0x2>
    6be2:	4770      	bx	lr

00006be4 <strlen>:
    6be4:	4603      	mov	r3, r0
    6be6:	f813 2b01 	ldrb.w	r2, [r3], #1
    6bea:	2a00      	cmp	r2, #0
    6bec:	d1fb      	bne.n	6be6 <strlen+0x2>
    6bee:	1a18      	subs	r0, r3, r0
    6bf0:	3801      	subs	r0, #1
    6bf2:	4770      	bx	lr

00006bf4 <strncmp>:
    6bf4:	b510      	push	{r4, lr}
    6bf6:	b16a      	cbz	r2, 6c14 <strncmp+0x20>
    6bf8:	3901      	subs	r1, #1
    6bfa:	1884      	adds	r4, r0, r2
    6bfc:	f810 3b01 	ldrb.w	r3, [r0], #1
    6c00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6c04:	4293      	cmp	r3, r2
    6c06:	d103      	bne.n	6c10 <strncmp+0x1c>
    6c08:	42a0      	cmp	r0, r4
    6c0a:	d001      	beq.n	6c10 <strncmp+0x1c>
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	d1f5      	bne.n	6bfc <strncmp+0x8>
    6c10:	1a98      	subs	r0, r3, r2
    6c12:	bd10      	pop	{r4, pc}
    6c14:	4610      	mov	r0, r2
    6c16:	bd10      	pop	{r4, pc}

00006c18 <strncpy>:
    6c18:	b570      	push	{r4, r5, r6, lr}
    6c1a:	4604      	mov	r4, r0
    6c1c:	b902      	cbnz	r2, 6c20 <strncpy+0x8>
    6c1e:	bd70      	pop	{r4, r5, r6, pc}
    6c20:	4623      	mov	r3, r4
    6c22:	f811 5b01 	ldrb.w	r5, [r1], #1
    6c26:	f803 5b01 	strb.w	r5, [r3], #1
    6c2a:	1e56      	subs	r6, r2, #1
    6c2c:	b91d      	cbnz	r5, 6c36 <strncpy+0x1e>
    6c2e:	4414      	add	r4, r2
    6c30:	42a3      	cmp	r3, r4
    6c32:	d103      	bne.n	6c3c <strncpy+0x24>
    6c34:	bd70      	pop	{r4, r5, r6, pc}
    6c36:	461c      	mov	r4, r3
    6c38:	4632      	mov	r2, r6
    6c3a:	e7ef      	b.n	6c1c <strncpy+0x4>
    6c3c:	f803 5b01 	strb.w	r5, [r3], #1
    6c40:	e7f6      	b.n	6c30 <strncpy+0x18>

00006c42 <_strtol_l.isra.0>:
    6c42:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c46:	4680      	mov	r8, r0
    6c48:	4689      	mov	r9, r1
    6c4a:	4692      	mov	sl, r2
    6c4c:	461f      	mov	r7, r3
    6c4e:	468b      	mov	fp, r1
    6c50:	465d      	mov	r5, fp
    6c52:	980a      	ldr	r0, [sp, #40]	; 0x28
    6c54:	f815 4b01 	ldrb.w	r4, [r5], #1
    6c58:	f7ff fe8a 	bl	6970 <__locale_ctype_ptr_l>
    6c5c:	4420      	add	r0, r4
    6c5e:	7846      	ldrb	r6, [r0, #1]
    6c60:	f016 0608 	ands.w	r6, r6, #8
    6c64:	d10b      	bne.n	6c7e <_strtol_l.isra.0+0x3c>
    6c66:	2c2d      	cmp	r4, #45	; 0x2d
    6c68:	d10b      	bne.n	6c82 <_strtol_l.isra.0+0x40>
    6c6a:	782c      	ldrb	r4, [r5, #0]
    6c6c:	2601      	movs	r6, #1
    6c6e:	f10b 0502 	add.w	r5, fp, #2
    6c72:	b167      	cbz	r7, 6c8e <_strtol_l.isra.0+0x4c>
    6c74:	2f10      	cmp	r7, #16
    6c76:	d114      	bne.n	6ca2 <_strtol_l.isra.0+0x60>
    6c78:	2c30      	cmp	r4, #48	; 0x30
    6c7a:	d00a      	beq.n	6c92 <_strtol_l.isra.0+0x50>
    6c7c:	e011      	b.n	6ca2 <_strtol_l.isra.0+0x60>
    6c7e:	46ab      	mov	fp, r5
    6c80:	e7e6      	b.n	6c50 <_strtol_l.isra.0+0xe>
    6c82:	2c2b      	cmp	r4, #43	; 0x2b
    6c84:	bf04      	itt	eq
    6c86:	782c      	ldrbeq	r4, [r5, #0]
    6c88:	f10b 0502 	addeq.w	r5, fp, #2
    6c8c:	e7f1      	b.n	6c72 <_strtol_l.isra.0+0x30>
    6c8e:	2c30      	cmp	r4, #48	; 0x30
    6c90:	d127      	bne.n	6ce2 <_strtol_l.isra.0+0xa0>
    6c92:	782b      	ldrb	r3, [r5, #0]
    6c94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6c98:	2b58      	cmp	r3, #88	; 0x58
    6c9a:	d14b      	bne.n	6d34 <_strtol_l.isra.0+0xf2>
    6c9c:	786c      	ldrb	r4, [r5, #1]
    6c9e:	2710      	movs	r7, #16
    6ca0:	3502      	adds	r5, #2
    6ca2:	2e00      	cmp	r6, #0
    6ca4:	bf0c      	ite	eq
    6ca6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    6caa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    6cae:	2200      	movs	r2, #0
    6cb0:	fbb1 fef7 	udiv	lr, r1, r7
    6cb4:	4610      	mov	r0, r2
    6cb6:	fb07 1c1e 	mls	ip, r7, lr, r1
    6cba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    6cbe:	2b09      	cmp	r3, #9
    6cc0:	d811      	bhi.n	6ce6 <_strtol_l.isra.0+0xa4>
    6cc2:	461c      	mov	r4, r3
    6cc4:	42a7      	cmp	r7, r4
    6cc6:	dd1d      	ble.n	6d04 <_strtol_l.isra.0+0xc2>
    6cc8:	1c53      	adds	r3, r2, #1
    6cca:	d007      	beq.n	6cdc <_strtol_l.isra.0+0x9a>
    6ccc:	4586      	cmp	lr, r0
    6cce:	d316      	bcc.n	6cfe <_strtol_l.isra.0+0xbc>
    6cd0:	d101      	bne.n	6cd6 <_strtol_l.isra.0+0x94>
    6cd2:	45a4      	cmp	ip, r4
    6cd4:	db13      	blt.n	6cfe <_strtol_l.isra.0+0xbc>
    6cd6:	fb00 4007 	mla	r0, r0, r7, r4
    6cda:	2201      	movs	r2, #1
    6cdc:	f815 4b01 	ldrb.w	r4, [r5], #1
    6ce0:	e7eb      	b.n	6cba <_strtol_l.isra.0+0x78>
    6ce2:	270a      	movs	r7, #10
    6ce4:	e7dd      	b.n	6ca2 <_strtol_l.isra.0+0x60>
    6ce6:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    6cea:	2b19      	cmp	r3, #25
    6cec:	d801      	bhi.n	6cf2 <_strtol_l.isra.0+0xb0>
    6cee:	3c37      	subs	r4, #55	; 0x37
    6cf0:	e7e8      	b.n	6cc4 <_strtol_l.isra.0+0x82>
    6cf2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    6cf6:	2b19      	cmp	r3, #25
    6cf8:	d804      	bhi.n	6d04 <_strtol_l.isra.0+0xc2>
    6cfa:	3c57      	subs	r4, #87	; 0x57
    6cfc:	e7e2      	b.n	6cc4 <_strtol_l.isra.0+0x82>
    6cfe:	f04f 32ff 	mov.w	r2, #4294967295
    6d02:	e7eb      	b.n	6cdc <_strtol_l.isra.0+0x9a>
    6d04:	1c53      	adds	r3, r2, #1
    6d06:	d108      	bne.n	6d1a <_strtol_l.isra.0+0xd8>
    6d08:	2322      	movs	r3, #34	; 0x22
    6d0a:	f8c8 3000 	str.w	r3, [r8]
    6d0e:	4608      	mov	r0, r1
    6d10:	f1ba 0f00 	cmp.w	sl, #0
    6d14:	d107      	bne.n	6d26 <_strtol_l.isra.0+0xe4>
    6d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d1a:	b106      	cbz	r6, 6d1e <_strtol_l.isra.0+0xdc>
    6d1c:	4240      	negs	r0, r0
    6d1e:	f1ba 0f00 	cmp.w	sl, #0
    6d22:	d00c      	beq.n	6d3e <_strtol_l.isra.0+0xfc>
    6d24:	b122      	cbz	r2, 6d30 <_strtol_l.isra.0+0xee>
    6d26:	3d01      	subs	r5, #1
    6d28:	f8ca 5000 	str.w	r5, [sl]
    6d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6d30:	464d      	mov	r5, r9
    6d32:	e7f9      	b.n	6d28 <_strtol_l.isra.0+0xe6>
    6d34:	2430      	movs	r4, #48	; 0x30
    6d36:	2f00      	cmp	r7, #0
    6d38:	d1b3      	bne.n	6ca2 <_strtol_l.isra.0+0x60>
    6d3a:	2708      	movs	r7, #8
    6d3c:	e7b1      	b.n	6ca2 <_strtol_l.isra.0+0x60>
    6d3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00006d44 <strtol>:
    6d44:	4b08      	ldr	r3, [pc, #32]	; (6d68 <strtol+0x24>)
    6d46:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6d48:	681c      	ldr	r4, [r3, #0]
    6d4a:	4d08      	ldr	r5, [pc, #32]	; (6d6c <strtol+0x28>)
    6d4c:	6a23      	ldr	r3, [r4, #32]
    6d4e:	2b00      	cmp	r3, #0
    6d50:	bf08      	it	eq
    6d52:	462b      	moveq	r3, r5
    6d54:	9300      	str	r3, [sp, #0]
    6d56:	4613      	mov	r3, r2
    6d58:	460a      	mov	r2, r1
    6d5a:	4601      	mov	r1, r0
    6d5c:	4620      	mov	r0, r4
    6d5e:	f7ff ff70 	bl	6c42 <_strtol_l.isra.0>
    6d62:	b003      	add	sp, #12
    6d64:	bd30      	pop	{r4, r5, pc}
    6d66:	bf00      	nop
    6d68:	20000078 	.word	0x20000078
    6d6c:	200000dc 	.word	0x200000dc

00006d70 <__ascii_wctomb>:
    6d70:	b149      	cbz	r1, 6d86 <__ascii_wctomb+0x16>
    6d72:	2aff      	cmp	r2, #255	; 0xff
    6d74:	bf85      	ittet	hi
    6d76:	238a      	movhi	r3, #138	; 0x8a
    6d78:	6003      	strhi	r3, [r0, #0]
    6d7a:	700a      	strbls	r2, [r1, #0]
    6d7c:	f04f 30ff 	movhi.w	r0, #4294967295
    6d80:	bf98      	it	ls
    6d82:	2001      	movls	r0, #1
    6d84:	4770      	bx	lr
    6d86:	4608      	mov	r0, r1
    6d88:	4770      	bx	lr

00006d8a <__malloc_lock>:
    6d8a:	4770      	bx	lr

00006d8c <__malloc_unlock>:
    6d8c:	4770      	bx	lr

00006d8e <__ssputs_r>:
    6d8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6d92:	688e      	ldr	r6, [r1, #8]
    6d94:	429e      	cmp	r6, r3
    6d96:	4682      	mov	sl, r0
    6d98:	460c      	mov	r4, r1
    6d9a:	4691      	mov	r9, r2
    6d9c:	4698      	mov	r8, r3
    6d9e:	d835      	bhi.n	6e0c <__ssputs_r+0x7e>
    6da0:	898a      	ldrh	r2, [r1, #12]
    6da2:	f412 6f90 	tst.w	r2, #1152	; 0x480
    6da6:	d031      	beq.n	6e0c <__ssputs_r+0x7e>
    6da8:	6825      	ldr	r5, [r4, #0]
    6daa:	6909      	ldr	r1, [r1, #16]
    6dac:	1a6f      	subs	r7, r5, r1
    6dae:	6965      	ldr	r5, [r4, #20]
    6db0:	2302      	movs	r3, #2
    6db2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6db6:	fb95 f5f3 	sdiv	r5, r5, r3
    6dba:	f108 0301 	add.w	r3, r8, #1
    6dbe:	443b      	add	r3, r7
    6dc0:	429d      	cmp	r5, r3
    6dc2:	bf38      	it	cc
    6dc4:	461d      	movcc	r5, r3
    6dc6:	0553      	lsls	r3, r2, #21
    6dc8:	d531      	bpl.n	6e2e <__ssputs_r+0xa0>
    6dca:	4629      	mov	r1, r5
    6dcc:	f7ff fe70 	bl	6ab0 <_malloc_r>
    6dd0:	4606      	mov	r6, r0
    6dd2:	b950      	cbnz	r0, 6dea <__ssputs_r+0x5c>
    6dd4:	230c      	movs	r3, #12
    6dd6:	f8ca 3000 	str.w	r3, [sl]
    6dda:	89a3      	ldrh	r3, [r4, #12]
    6ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6de0:	81a3      	strh	r3, [r4, #12]
    6de2:	f04f 30ff 	mov.w	r0, #4294967295
    6de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6dea:	463a      	mov	r2, r7
    6dec:	6921      	ldr	r1, [r4, #16]
    6dee:	f7ff fde3 	bl	69b8 <memcpy>
    6df2:	89a3      	ldrh	r3, [r4, #12]
    6df4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    6df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6dfc:	81a3      	strh	r3, [r4, #12]
    6dfe:	6126      	str	r6, [r4, #16]
    6e00:	6165      	str	r5, [r4, #20]
    6e02:	443e      	add	r6, r7
    6e04:	1bed      	subs	r5, r5, r7
    6e06:	6026      	str	r6, [r4, #0]
    6e08:	60a5      	str	r5, [r4, #8]
    6e0a:	4646      	mov	r6, r8
    6e0c:	4546      	cmp	r6, r8
    6e0e:	bf28      	it	cs
    6e10:	4646      	movcs	r6, r8
    6e12:	4632      	mov	r2, r6
    6e14:	4649      	mov	r1, r9
    6e16:	6820      	ldr	r0, [r4, #0]
    6e18:	f7ff fdd9 	bl	69ce <memmove>
    6e1c:	68a3      	ldr	r3, [r4, #8]
    6e1e:	1b9b      	subs	r3, r3, r6
    6e20:	60a3      	str	r3, [r4, #8]
    6e22:	6823      	ldr	r3, [r4, #0]
    6e24:	441e      	add	r6, r3
    6e26:	6026      	str	r6, [r4, #0]
    6e28:	2000      	movs	r0, #0
    6e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e2e:	462a      	mov	r2, r5
    6e30:	f000 fae6 	bl	7400 <_realloc_r>
    6e34:	4606      	mov	r6, r0
    6e36:	2800      	cmp	r0, #0
    6e38:	d1e1      	bne.n	6dfe <__ssputs_r+0x70>
    6e3a:	6921      	ldr	r1, [r4, #16]
    6e3c:	4650      	mov	r0, sl
    6e3e:	f7ff fde9 	bl	6a14 <_free_r>
    6e42:	e7c7      	b.n	6dd4 <__ssputs_r+0x46>

00006e44 <_svfiprintf_r>:
    6e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e48:	b09d      	sub	sp, #116	; 0x74
    6e4a:	4680      	mov	r8, r0
    6e4c:	9303      	str	r3, [sp, #12]
    6e4e:	898b      	ldrh	r3, [r1, #12]
    6e50:	061c      	lsls	r4, r3, #24
    6e52:	460d      	mov	r5, r1
    6e54:	4616      	mov	r6, r2
    6e56:	d50f      	bpl.n	6e78 <_svfiprintf_r+0x34>
    6e58:	690b      	ldr	r3, [r1, #16]
    6e5a:	b96b      	cbnz	r3, 6e78 <_svfiprintf_r+0x34>
    6e5c:	2140      	movs	r1, #64	; 0x40
    6e5e:	f7ff fe27 	bl	6ab0 <_malloc_r>
    6e62:	6028      	str	r0, [r5, #0]
    6e64:	6128      	str	r0, [r5, #16]
    6e66:	b928      	cbnz	r0, 6e74 <_svfiprintf_r+0x30>
    6e68:	230c      	movs	r3, #12
    6e6a:	f8c8 3000 	str.w	r3, [r8]
    6e6e:	f04f 30ff 	mov.w	r0, #4294967295
    6e72:	e0c5      	b.n	7000 <_svfiprintf_r+0x1bc>
    6e74:	2340      	movs	r3, #64	; 0x40
    6e76:	616b      	str	r3, [r5, #20]
    6e78:	2300      	movs	r3, #0
    6e7a:	9309      	str	r3, [sp, #36]	; 0x24
    6e7c:	2320      	movs	r3, #32
    6e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    6e82:	2330      	movs	r3, #48	; 0x30
    6e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    6e88:	f04f 0b01 	mov.w	fp, #1
    6e8c:	4637      	mov	r7, r6
    6e8e:	463c      	mov	r4, r7
    6e90:	f814 3b01 	ldrb.w	r3, [r4], #1
    6e94:	2b00      	cmp	r3, #0
    6e96:	d13c      	bne.n	6f12 <_svfiprintf_r+0xce>
    6e98:	ebb7 0a06 	subs.w	sl, r7, r6
    6e9c:	d00b      	beq.n	6eb6 <_svfiprintf_r+0x72>
    6e9e:	4653      	mov	r3, sl
    6ea0:	4632      	mov	r2, r6
    6ea2:	4629      	mov	r1, r5
    6ea4:	4640      	mov	r0, r8
    6ea6:	f7ff ff72 	bl	6d8e <__ssputs_r>
    6eaa:	3001      	adds	r0, #1
    6eac:	f000 80a3 	beq.w	6ff6 <_svfiprintf_r+0x1b2>
    6eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6eb2:	4453      	add	r3, sl
    6eb4:	9309      	str	r3, [sp, #36]	; 0x24
    6eb6:	783b      	ldrb	r3, [r7, #0]
    6eb8:	2b00      	cmp	r3, #0
    6eba:	f000 809c 	beq.w	6ff6 <_svfiprintf_r+0x1b2>
    6ebe:	2300      	movs	r3, #0
    6ec0:	f04f 32ff 	mov.w	r2, #4294967295
    6ec4:	9304      	str	r3, [sp, #16]
    6ec6:	9307      	str	r3, [sp, #28]
    6ec8:	9205      	str	r2, [sp, #20]
    6eca:	9306      	str	r3, [sp, #24]
    6ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    6ed0:	931a      	str	r3, [sp, #104]	; 0x68
    6ed2:	2205      	movs	r2, #5
    6ed4:	7821      	ldrb	r1, [r4, #0]
    6ed6:	4850      	ldr	r0, [pc, #320]	; (7018 <_svfiprintf_r+0x1d4>)
    6ed8:	f000 fa42 	bl	7360 <memchr>
    6edc:	1c67      	adds	r7, r4, #1
    6ede:	9b04      	ldr	r3, [sp, #16]
    6ee0:	b9d8      	cbnz	r0, 6f1a <_svfiprintf_r+0xd6>
    6ee2:	06d9      	lsls	r1, r3, #27
    6ee4:	bf44      	itt	mi
    6ee6:	2220      	movmi	r2, #32
    6ee8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6eec:	071a      	lsls	r2, r3, #28
    6eee:	bf44      	itt	mi
    6ef0:	222b      	movmi	r2, #43	; 0x2b
    6ef2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6ef6:	7822      	ldrb	r2, [r4, #0]
    6ef8:	2a2a      	cmp	r2, #42	; 0x2a
    6efa:	d016      	beq.n	6f2a <_svfiprintf_r+0xe6>
    6efc:	9a07      	ldr	r2, [sp, #28]
    6efe:	2100      	movs	r1, #0
    6f00:	200a      	movs	r0, #10
    6f02:	4627      	mov	r7, r4
    6f04:	3401      	adds	r4, #1
    6f06:	783b      	ldrb	r3, [r7, #0]
    6f08:	3b30      	subs	r3, #48	; 0x30
    6f0a:	2b09      	cmp	r3, #9
    6f0c:	d951      	bls.n	6fb2 <_svfiprintf_r+0x16e>
    6f0e:	b1c9      	cbz	r1, 6f44 <_svfiprintf_r+0x100>
    6f10:	e011      	b.n	6f36 <_svfiprintf_r+0xf2>
    6f12:	2b25      	cmp	r3, #37	; 0x25
    6f14:	d0c0      	beq.n	6e98 <_svfiprintf_r+0x54>
    6f16:	4627      	mov	r7, r4
    6f18:	e7b9      	b.n	6e8e <_svfiprintf_r+0x4a>
    6f1a:	4a3f      	ldr	r2, [pc, #252]	; (7018 <_svfiprintf_r+0x1d4>)
    6f1c:	1a80      	subs	r0, r0, r2
    6f1e:	fa0b f000 	lsl.w	r0, fp, r0
    6f22:	4318      	orrs	r0, r3
    6f24:	9004      	str	r0, [sp, #16]
    6f26:	463c      	mov	r4, r7
    6f28:	e7d3      	b.n	6ed2 <_svfiprintf_r+0x8e>
    6f2a:	9a03      	ldr	r2, [sp, #12]
    6f2c:	1d11      	adds	r1, r2, #4
    6f2e:	6812      	ldr	r2, [r2, #0]
    6f30:	9103      	str	r1, [sp, #12]
    6f32:	2a00      	cmp	r2, #0
    6f34:	db01      	blt.n	6f3a <_svfiprintf_r+0xf6>
    6f36:	9207      	str	r2, [sp, #28]
    6f38:	e004      	b.n	6f44 <_svfiprintf_r+0x100>
    6f3a:	4252      	negs	r2, r2
    6f3c:	f043 0302 	orr.w	r3, r3, #2
    6f40:	9207      	str	r2, [sp, #28]
    6f42:	9304      	str	r3, [sp, #16]
    6f44:	783b      	ldrb	r3, [r7, #0]
    6f46:	2b2e      	cmp	r3, #46	; 0x2e
    6f48:	d10e      	bne.n	6f68 <_svfiprintf_r+0x124>
    6f4a:	787b      	ldrb	r3, [r7, #1]
    6f4c:	2b2a      	cmp	r3, #42	; 0x2a
    6f4e:	f107 0101 	add.w	r1, r7, #1
    6f52:	d132      	bne.n	6fba <_svfiprintf_r+0x176>
    6f54:	9b03      	ldr	r3, [sp, #12]
    6f56:	1d1a      	adds	r2, r3, #4
    6f58:	681b      	ldr	r3, [r3, #0]
    6f5a:	9203      	str	r2, [sp, #12]
    6f5c:	2b00      	cmp	r3, #0
    6f5e:	bfb8      	it	lt
    6f60:	f04f 33ff 	movlt.w	r3, #4294967295
    6f64:	3702      	adds	r7, #2
    6f66:	9305      	str	r3, [sp, #20]
    6f68:	4c2c      	ldr	r4, [pc, #176]	; (701c <_svfiprintf_r+0x1d8>)
    6f6a:	7839      	ldrb	r1, [r7, #0]
    6f6c:	2203      	movs	r2, #3
    6f6e:	4620      	mov	r0, r4
    6f70:	f000 f9f6 	bl	7360 <memchr>
    6f74:	b138      	cbz	r0, 6f86 <_svfiprintf_r+0x142>
    6f76:	2340      	movs	r3, #64	; 0x40
    6f78:	1b00      	subs	r0, r0, r4
    6f7a:	fa03 f000 	lsl.w	r0, r3, r0
    6f7e:	9b04      	ldr	r3, [sp, #16]
    6f80:	4303      	orrs	r3, r0
    6f82:	9304      	str	r3, [sp, #16]
    6f84:	3701      	adds	r7, #1
    6f86:	7839      	ldrb	r1, [r7, #0]
    6f88:	4825      	ldr	r0, [pc, #148]	; (7020 <_svfiprintf_r+0x1dc>)
    6f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    6f8e:	2206      	movs	r2, #6
    6f90:	1c7e      	adds	r6, r7, #1
    6f92:	f000 f9e5 	bl	7360 <memchr>
    6f96:	2800      	cmp	r0, #0
    6f98:	d035      	beq.n	7006 <_svfiprintf_r+0x1c2>
    6f9a:	4b22      	ldr	r3, [pc, #136]	; (7024 <_svfiprintf_r+0x1e0>)
    6f9c:	b9fb      	cbnz	r3, 6fde <_svfiprintf_r+0x19a>
    6f9e:	9b03      	ldr	r3, [sp, #12]
    6fa0:	3307      	adds	r3, #7
    6fa2:	f023 0307 	bic.w	r3, r3, #7
    6fa6:	3308      	adds	r3, #8
    6fa8:	9303      	str	r3, [sp, #12]
    6faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6fac:	444b      	add	r3, r9
    6fae:	9309      	str	r3, [sp, #36]	; 0x24
    6fb0:	e76c      	b.n	6e8c <_svfiprintf_r+0x48>
    6fb2:	fb00 3202 	mla	r2, r0, r2, r3
    6fb6:	2101      	movs	r1, #1
    6fb8:	e7a3      	b.n	6f02 <_svfiprintf_r+0xbe>
    6fba:	2300      	movs	r3, #0
    6fbc:	9305      	str	r3, [sp, #20]
    6fbe:	4618      	mov	r0, r3
    6fc0:	240a      	movs	r4, #10
    6fc2:	460f      	mov	r7, r1
    6fc4:	3101      	adds	r1, #1
    6fc6:	783a      	ldrb	r2, [r7, #0]
    6fc8:	3a30      	subs	r2, #48	; 0x30
    6fca:	2a09      	cmp	r2, #9
    6fcc:	d903      	bls.n	6fd6 <_svfiprintf_r+0x192>
    6fce:	2b00      	cmp	r3, #0
    6fd0:	d0ca      	beq.n	6f68 <_svfiprintf_r+0x124>
    6fd2:	9005      	str	r0, [sp, #20]
    6fd4:	e7c8      	b.n	6f68 <_svfiprintf_r+0x124>
    6fd6:	fb04 2000 	mla	r0, r4, r0, r2
    6fda:	2301      	movs	r3, #1
    6fdc:	e7f1      	b.n	6fc2 <_svfiprintf_r+0x17e>
    6fde:	ab03      	add	r3, sp, #12
    6fe0:	9300      	str	r3, [sp, #0]
    6fe2:	462a      	mov	r2, r5
    6fe4:	4b10      	ldr	r3, [pc, #64]	; (7028 <_svfiprintf_r+0x1e4>)
    6fe6:	a904      	add	r1, sp, #16
    6fe8:	4640      	mov	r0, r8
    6fea:	f3af 8000 	nop.w
    6fee:	f1b0 3fff 	cmp.w	r0, #4294967295
    6ff2:	4681      	mov	r9, r0
    6ff4:	d1d9      	bne.n	6faa <_svfiprintf_r+0x166>
    6ff6:	89ab      	ldrh	r3, [r5, #12]
    6ff8:	065b      	lsls	r3, r3, #25
    6ffa:	f53f af38 	bmi.w	6e6e <_svfiprintf_r+0x2a>
    6ffe:	9809      	ldr	r0, [sp, #36]	; 0x24
    7000:	b01d      	add	sp, #116	; 0x74
    7002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7006:	ab03      	add	r3, sp, #12
    7008:	9300      	str	r3, [sp, #0]
    700a:	462a      	mov	r2, r5
    700c:	4b06      	ldr	r3, [pc, #24]	; (7028 <_svfiprintf_r+0x1e4>)
    700e:	a904      	add	r1, sp, #16
    7010:	4640      	mov	r0, r8
    7012:	f000 f881 	bl	7118 <_printf_i>
    7016:	e7ea      	b.n	6fee <_svfiprintf_r+0x1aa>
    7018:	00009383 	.word	0x00009383
    701c:	00009389 	.word	0x00009389
    7020:	0000938d 	.word	0x0000938d
    7024:	00000000 	.word	0x00000000
    7028:	00006d8f 	.word	0x00006d8f

0000702c <_printf_common>:
    702c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7030:	4691      	mov	r9, r2
    7032:	461f      	mov	r7, r3
    7034:	688a      	ldr	r2, [r1, #8]
    7036:	690b      	ldr	r3, [r1, #16]
    7038:	f8dd 8020 	ldr.w	r8, [sp, #32]
    703c:	4293      	cmp	r3, r2
    703e:	bfb8      	it	lt
    7040:	4613      	movlt	r3, r2
    7042:	f8c9 3000 	str.w	r3, [r9]
    7046:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    704a:	4606      	mov	r6, r0
    704c:	460c      	mov	r4, r1
    704e:	b112      	cbz	r2, 7056 <_printf_common+0x2a>
    7050:	3301      	adds	r3, #1
    7052:	f8c9 3000 	str.w	r3, [r9]
    7056:	6823      	ldr	r3, [r4, #0]
    7058:	0699      	lsls	r1, r3, #26
    705a:	bf42      	ittt	mi
    705c:	f8d9 3000 	ldrmi.w	r3, [r9]
    7060:	3302      	addmi	r3, #2
    7062:	f8c9 3000 	strmi.w	r3, [r9]
    7066:	6825      	ldr	r5, [r4, #0]
    7068:	f015 0506 	ands.w	r5, r5, #6
    706c:	d107      	bne.n	707e <_printf_common+0x52>
    706e:	f104 0a19 	add.w	sl, r4, #25
    7072:	68e3      	ldr	r3, [r4, #12]
    7074:	f8d9 2000 	ldr.w	r2, [r9]
    7078:	1a9b      	subs	r3, r3, r2
    707a:	429d      	cmp	r5, r3
    707c:	db29      	blt.n	70d2 <_printf_common+0xa6>
    707e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    7082:	6822      	ldr	r2, [r4, #0]
    7084:	3300      	adds	r3, #0
    7086:	bf18      	it	ne
    7088:	2301      	movne	r3, #1
    708a:	0692      	lsls	r2, r2, #26
    708c:	d42e      	bmi.n	70ec <_printf_common+0xc0>
    708e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    7092:	4639      	mov	r1, r7
    7094:	4630      	mov	r0, r6
    7096:	47c0      	blx	r8
    7098:	3001      	adds	r0, #1
    709a:	d021      	beq.n	70e0 <_printf_common+0xb4>
    709c:	6823      	ldr	r3, [r4, #0]
    709e:	68e5      	ldr	r5, [r4, #12]
    70a0:	f8d9 2000 	ldr.w	r2, [r9]
    70a4:	f003 0306 	and.w	r3, r3, #6
    70a8:	2b04      	cmp	r3, #4
    70aa:	bf08      	it	eq
    70ac:	1aad      	subeq	r5, r5, r2
    70ae:	68a3      	ldr	r3, [r4, #8]
    70b0:	6922      	ldr	r2, [r4, #16]
    70b2:	bf0c      	ite	eq
    70b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    70b8:	2500      	movne	r5, #0
    70ba:	4293      	cmp	r3, r2
    70bc:	bfc4      	itt	gt
    70be:	1a9b      	subgt	r3, r3, r2
    70c0:	18ed      	addgt	r5, r5, r3
    70c2:	f04f 0900 	mov.w	r9, #0
    70c6:	341a      	adds	r4, #26
    70c8:	454d      	cmp	r5, r9
    70ca:	d11b      	bne.n	7104 <_printf_common+0xd8>
    70cc:	2000      	movs	r0, #0
    70ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70d2:	2301      	movs	r3, #1
    70d4:	4652      	mov	r2, sl
    70d6:	4639      	mov	r1, r7
    70d8:	4630      	mov	r0, r6
    70da:	47c0      	blx	r8
    70dc:	3001      	adds	r0, #1
    70de:	d103      	bne.n	70e8 <_printf_common+0xbc>
    70e0:	f04f 30ff 	mov.w	r0, #4294967295
    70e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70e8:	3501      	adds	r5, #1
    70ea:	e7c2      	b.n	7072 <_printf_common+0x46>
    70ec:	18e1      	adds	r1, r4, r3
    70ee:	1c5a      	adds	r2, r3, #1
    70f0:	2030      	movs	r0, #48	; 0x30
    70f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    70f6:	4422      	add	r2, r4
    70f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    70fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    7100:	3302      	adds	r3, #2
    7102:	e7c4      	b.n	708e <_printf_common+0x62>
    7104:	2301      	movs	r3, #1
    7106:	4622      	mov	r2, r4
    7108:	4639      	mov	r1, r7
    710a:	4630      	mov	r0, r6
    710c:	47c0      	blx	r8
    710e:	3001      	adds	r0, #1
    7110:	d0e6      	beq.n	70e0 <_printf_common+0xb4>
    7112:	f109 0901 	add.w	r9, r9, #1
    7116:	e7d7      	b.n	70c8 <_printf_common+0x9c>

00007118 <_printf_i>:
    7118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    711c:	4617      	mov	r7, r2
    711e:	7e0a      	ldrb	r2, [r1, #24]
    7120:	b085      	sub	sp, #20
    7122:	2a6e      	cmp	r2, #110	; 0x6e
    7124:	4698      	mov	r8, r3
    7126:	4606      	mov	r6, r0
    7128:	460c      	mov	r4, r1
    712a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    712c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    7130:	f000 80bc 	beq.w	72ac <_printf_i+0x194>
    7134:	d81a      	bhi.n	716c <_printf_i+0x54>
    7136:	2a63      	cmp	r2, #99	; 0x63
    7138:	d02e      	beq.n	7198 <_printf_i+0x80>
    713a:	d80a      	bhi.n	7152 <_printf_i+0x3a>
    713c:	2a00      	cmp	r2, #0
    713e:	f000 80c8 	beq.w	72d2 <_printf_i+0x1ba>
    7142:	2a58      	cmp	r2, #88	; 0x58
    7144:	f000 808a 	beq.w	725c <_printf_i+0x144>
    7148:	f104 0542 	add.w	r5, r4, #66	; 0x42
    714c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    7150:	e02a      	b.n	71a8 <_printf_i+0x90>
    7152:	2a64      	cmp	r2, #100	; 0x64
    7154:	d001      	beq.n	715a <_printf_i+0x42>
    7156:	2a69      	cmp	r2, #105	; 0x69
    7158:	d1f6      	bne.n	7148 <_printf_i+0x30>
    715a:	6821      	ldr	r1, [r4, #0]
    715c:	681a      	ldr	r2, [r3, #0]
    715e:	f011 0f80 	tst.w	r1, #128	; 0x80
    7162:	d023      	beq.n	71ac <_printf_i+0x94>
    7164:	1d11      	adds	r1, r2, #4
    7166:	6019      	str	r1, [r3, #0]
    7168:	6813      	ldr	r3, [r2, #0]
    716a:	e027      	b.n	71bc <_printf_i+0xa4>
    716c:	2a73      	cmp	r2, #115	; 0x73
    716e:	f000 80b4 	beq.w	72da <_printf_i+0x1c2>
    7172:	d808      	bhi.n	7186 <_printf_i+0x6e>
    7174:	2a6f      	cmp	r2, #111	; 0x6f
    7176:	d02a      	beq.n	71ce <_printf_i+0xb6>
    7178:	2a70      	cmp	r2, #112	; 0x70
    717a:	d1e5      	bne.n	7148 <_printf_i+0x30>
    717c:	680a      	ldr	r2, [r1, #0]
    717e:	f042 0220 	orr.w	r2, r2, #32
    7182:	600a      	str	r2, [r1, #0]
    7184:	e003      	b.n	718e <_printf_i+0x76>
    7186:	2a75      	cmp	r2, #117	; 0x75
    7188:	d021      	beq.n	71ce <_printf_i+0xb6>
    718a:	2a78      	cmp	r2, #120	; 0x78
    718c:	d1dc      	bne.n	7148 <_printf_i+0x30>
    718e:	2278      	movs	r2, #120	; 0x78
    7190:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    7194:	496e      	ldr	r1, [pc, #440]	; (7350 <_printf_i+0x238>)
    7196:	e064      	b.n	7262 <_printf_i+0x14a>
    7198:	681a      	ldr	r2, [r3, #0]
    719a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    719e:	1d11      	adds	r1, r2, #4
    71a0:	6019      	str	r1, [r3, #0]
    71a2:	6813      	ldr	r3, [r2, #0]
    71a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    71a8:	2301      	movs	r3, #1
    71aa:	e0a3      	b.n	72f4 <_printf_i+0x1dc>
    71ac:	f011 0f40 	tst.w	r1, #64	; 0x40
    71b0:	f102 0104 	add.w	r1, r2, #4
    71b4:	6019      	str	r1, [r3, #0]
    71b6:	d0d7      	beq.n	7168 <_printf_i+0x50>
    71b8:	f9b2 3000 	ldrsh.w	r3, [r2]
    71bc:	2b00      	cmp	r3, #0
    71be:	da03      	bge.n	71c8 <_printf_i+0xb0>
    71c0:	222d      	movs	r2, #45	; 0x2d
    71c2:	425b      	negs	r3, r3
    71c4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    71c8:	4962      	ldr	r1, [pc, #392]	; (7354 <_printf_i+0x23c>)
    71ca:	220a      	movs	r2, #10
    71cc:	e017      	b.n	71fe <_printf_i+0xe6>
    71ce:	6820      	ldr	r0, [r4, #0]
    71d0:	6819      	ldr	r1, [r3, #0]
    71d2:	f010 0f80 	tst.w	r0, #128	; 0x80
    71d6:	d003      	beq.n	71e0 <_printf_i+0xc8>
    71d8:	1d08      	adds	r0, r1, #4
    71da:	6018      	str	r0, [r3, #0]
    71dc:	680b      	ldr	r3, [r1, #0]
    71de:	e006      	b.n	71ee <_printf_i+0xd6>
    71e0:	f010 0f40 	tst.w	r0, #64	; 0x40
    71e4:	f101 0004 	add.w	r0, r1, #4
    71e8:	6018      	str	r0, [r3, #0]
    71ea:	d0f7      	beq.n	71dc <_printf_i+0xc4>
    71ec:	880b      	ldrh	r3, [r1, #0]
    71ee:	4959      	ldr	r1, [pc, #356]	; (7354 <_printf_i+0x23c>)
    71f0:	2a6f      	cmp	r2, #111	; 0x6f
    71f2:	bf14      	ite	ne
    71f4:	220a      	movne	r2, #10
    71f6:	2208      	moveq	r2, #8
    71f8:	2000      	movs	r0, #0
    71fa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    71fe:	6865      	ldr	r5, [r4, #4]
    7200:	60a5      	str	r5, [r4, #8]
    7202:	2d00      	cmp	r5, #0
    7204:	f2c0 809c 	blt.w	7340 <_printf_i+0x228>
    7208:	6820      	ldr	r0, [r4, #0]
    720a:	f020 0004 	bic.w	r0, r0, #4
    720e:	6020      	str	r0, [r4, #0]
    7210:	2b00      	cmp	r3, #0
    7212:	d13f      	bne.n	7294 <_printf_i+0x17c>
    7214:	2d00      	cmp	r5, #0
    7216:	f040 8095 	bne.w	7344 <_printf_i+0x22c>
    721a:	4675      	mov	r5, lr
    721c:	2a08      	cmp	r2, #8
    721e:	d10b      	bne.n	7238 <_printf_i+0x120>
    7220:	6823      	ldr	r3, [r4, #0]
    7222:	07da      	lsls	r2, r3, #31
    7224:	d508      	bpl.n	7238 <_printf_i+0x120>
    7226:	6923      	ldr	r3, [r4, #16]
    7228:	6862      	ldr	r2, [r4, #4]
    722a:	429a      	cmp	r2, r3
    722c:	bfde      	ittt	le
    722e:	2330      	movle	r3, #48	; 0x30
    7230:	f805 3c01 	strble.w	r3, [r5, #-1]
    7234:	f105 35ff 	addle.w	r5, r5, #4294967295
    7238:	ebae 0305 	sub.w	r3, lr, r5
    723c:	6123      	str	r3, [r4, #16]
    723e:	f8cd 8000 	str.w	r8, [sp]
    7242:	463b      	mov	r3, r7
    7244:	aa03      	add	r2, sp, #12
    7246:	4621      	mov	r1, r4
    7248:	4630      	mov	r0, r6
    724a:	f7ff feef 	bl	702c <_printf_common>
    724e:	3001      	adds	r0, #1
    7250:	d155      	bne.n	72fe <_printf_i+0x1e6>
    7252:	f04f 30ff 	mov.w	r0, #4294967295
    7256:	b005      	add	sp, #20
    7258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    725c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    7260:	493c      	ldr	r1, [pc, #240]	; (7354 <_printf_i+0x23c>)
    7262:	6822      	ldr	r2, [r4, #0]
    7264:	6818      	ldr	r0, [r3, #0]
    7266:	f012 0f80 	tst.w	r2, #128	; 0x80
    726a:	f100 0504 	add.w	r5, r0, #4
    726e:	601d      	str	r5, [r3, #0]
    7270:	d001      	beq.n	7276 <_printf_i+0x15e>
    7272:	6803      	ldr	r3, [r0, #0]
    7274:	e002      	b.n	727c <_printf_i+0x164>
    7276:	0655      	lsls	r5, r2, #25
    7278:	d5fb      	bpl.n	7272 <_printf_i+0x15a>
    727a:	8803      	ldrh	r3, [r0, #0]
    727c:	07d0      	lsls	r0, r2, #31
    727e:	bf44      	itt	mi
    7280:	f042 0220 	orrmi.w	r2, r2, #32
    7284:	6022      	strmi	r2, [r4, #0]
    7286:	b91b      	cbnz	r3, 7290 <_printf_i+0x178>
    7288:	6822      	ldr	r2, [r4, #0]
    728a:	f022 0220 	bic.w	r2, r2, #32
    728e:	6022      	str	r2, [r4, #0]
    7290:	2210      	movs	r2, #16
    7292:	e7b1      	b.n	71f8 <_printf_i+0xe0>
    7294:	4675      	mov	r5, lr
    7296:	fbb3 f0f2 	udiv	r0, r3, r2
    729a:	fb02 3310 	mls	r3, r2, r0, r3
    729e:	5ccb      	ldrb	r3, [r1, r3]
    72a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    72a4:	4603      	mov	r3, r0
    72a6:	2800      	cmp	r0, #0
    72a8:	d1f5      	bne.n	7296 <_printf_i+0x17e>
    72aa:	e7b7      	b.n	721c <_printf_i+0x104>
    72ac:	6808      	ldr	r0, [r1, #0]
    72ae:	681a      	ldr	r2, [r3, #0]
    72b0:	6949      	ldr	r1, [r1, #20]
    72b2:	f010 0f80 	tst.w	r0, #128	; 0x80
    72b6:	d004      	beq.n	72c2 <_printf_i+0x1aa>
    72b8:	1d10      	adds	r0, r2, #4
    72ba:	6018      	str	r0, [r3, #0]
    72bc:	6813      	ldr	r3, [r2, #0]
    72be:	6019      	str	r1, [r3, #0]
    72c0:	e007      	b.n	72d2 <_printf_i+0x1ba>
    72c2:	f010 0f40 	tst.w	r0, #64	; 0x40
    72c6:	f102 0004 	add.w	r0, r2, #4
    72ca:	6018      	str	r0, [r3, #0]
    72cc:	6813      	ldr	r3, [r2, #0]
    72ce:	d0f6      	beq.n	72be <_printf_i+0x1a6>
    72d0:	8019      	strh	r1, [r3, #0]
    72d2:	2300      	movs	r3, #0
    72d4:	6123      	str	r3, [r4, #16]
    72d6:	4675      	mov	r5, lr
    72d8:	e7b1      	b.n	723e <_printf_i+0x126>
    72da:	681a      	ldr	r2, [r3, #0]
    72dc:	1d11      	adds	r1, r2, #4
    72de:	6019      	str	r1, [r3, #0]
    72e0:	6815      	ldr	r5, [r2, #0]
    72e2:	6862      	ldr	r2, [r4, #4]
    72e4:	2100      	movs	r1, #0
    72e6:	4628      	mov	r0, r5
    72e8:	f000 f83a 	bl	7360 <memchr>
    72ec:	b108      	cbz	r0, 72f2 <_printf_i+0x1da>
    72ee:	1b40      	subs	r0, r0, r5
    72f0:	6060      	str	r0, [r4, #4]
    72f2:	6863      	ldr	r3, [r4, #4]
    72f4:	6123      	str	r3, [r4, #16]
    72f6:	2300      	movs	r3, #0
    72f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    72fc:	e79f      	b.n	723e <_printf_i+0x126>
    72fe:	6923      	ldr	r3, [r4, #16]
    7300:	462a      	mov	r2, r5
    7302:	4639      	mov	r1, r7
    7304:	4630      	mov	r0, r6
    7306:	47c0      	blx	r8
    7308:	3001      	adds	r0, #1
    730a:	d0a2      	beq.n	7252 <_printf_i+0x13a>
    730c:	6823      	ldr	r3, [r4, #0]
    730e:	079b      	lsls	r3, r3, #30
    7310:	d507      	bpl.n	7322 <_printf_i+0x20a>
    7312:	2500      	movs	r5, #0
    7314:	f104 0919 	add.w	r9, r4, #25
    7318:	68e3      	ldr	r3, [r4, #12]
    731a:	9a03      	ldr	r2, [sp, #12]
    731c:	1a9b      	subs	r3, r3, r2
    731e:	429d      	cmp	r5, r3
    7320:	db05      	blt.n	732e <_printf_i+0x216>
    7322:	68e0      	ldr	r0, [r4, #12]
    7324:	9b03      	ldr	r3, [sp, #12]
    7326:	4298      	cmp	r0, r3
    7328:	bfb8      	it	lt
    732a:	4618      	movlt	r0, r3
    732c:	e793      	b.n	7256 <_printf_i+0x13e>
    732e:	2301      	movs	r3, #1
    7330:	464a      	mov	r2, r9
    7332:	4639      	mov	r1, r7
    7334:	4630      	mov	r0, r6
    7336:	47c0      	blx	r8
    7338:	3001      	adds	r0, #1
    733a:	d08a      	beq.n	7252 <_printf_i+0x13a>
    733c:	3501      	adds	r5, #1
    733e:	e7eb      	b.n	7318 <_printf_i+0x200>
    7340:	2b00      	cmp	r3, #0
    7342:	d1a7      	bne.n	7294 <_printf_i+0x17c>
    7344:	780b      	ldrb	r3, [r1, #0]
    7346:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    734a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    734e:	e765      	b.n	721c <_printf_i+0x104>
    7350:	000093a5 	.word	0x000093a5
    7354:	00009394 	.word	0x00009394
	...

00007360 <memchr>:
    7360:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7364:	2a10      	cmp	r2, #16
    7366:	db2b      	blt.n	73c0 <memchr+0x60>
    7368:	f010 0f07 	tst.w	r0, #7
    736c:	d008      	beq.n	7380 <memchr+0x20>
    736e:	f810 3b01 	ldrb.w	r3, [r0], #1
    7372:	3a01      	subs	r2, #1
    7374:	428b      	cmp	r3, r1
    7376:	d02d      	beq.n	73d4 <memchr+0x74>
    7378:	f010 0f07 	tst.w	r0, #7
    737c:	b342      	cbz	r2, 73d0 <memchr+0x70>
    737e:	d1f6      	bne.n	736e <memchr+0xe>
    7380:	b4f0      	push	{r4, r5, r6, r7}
    7382:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    7386:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    738a:	f022 0407 	bic.w	r4, r2, #7
    738e:	f07f 0700 	mvns.w	r7, #0
    7392:	2300      	movs	r3, #0
    7394:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    7398:	3c08      	subs	r4, #8
    739a:	ea85 0501 	eor.w	r5, r5, r1
    739e:	ea86 0601 	eor.w	r6, r6, r1
    73a2:	fa85 f547 	uadd8	r5, r5, r7
    73a6:	faa3 f587 	sel	r5, r3, r7
    73aa:	fa86 f647 	uadd8	r6, r6, r7
    73ae:	faa5 f687 	sel	r6, r5, r7
    73b2:	b98e      	cbnz	r6, 73d8 <memchr+0x78>
    73b4:	d1ee      	bne.n	7394 <memchr+0x34>
    73b6:	bcf0      	pop	{r4, r5, r6, r7}
    73b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    73bc:	f002 0207 	and.w	r2, r2, #7
    73c0:	b132      	cbz	r2, 73d0 <memchr+0x70>
    73c2:	f810 3b01 	ldrb.w	r3, [r0], #1
    73c6:	3a01      	subs	r2, #1
    73c8:	ea83 0301 	eor.w	r3, r3, r1
    73cc:	b113      	cbz	r3, 73d4 <memchr+0x74>
    73ce:	d1f8      	bne.n	73c2 <memchr+0x62>
    73d0:	2000      	movs	r0, #0
    73d2:	4770      	bx	lr
    73d4:	3801      	subs	r0, #1
    73d6:	4770      	bx	lr
    73d8:	2d00      	cmp	r5, #0
    73da:	bf06      	itte	eq
    73dc:	4635      	moveq	r5, r6
    73de:	3803      	subeq	r0, #3
    73e0:	3807      	subne	r0, #7
    73e2:	f015 0f01 	tst.w	r5, #1
    73e6:	d107      	bne.n	73f8 <memchr+0x98>
    73e8:	3001      	adds	r0, #1
    73ea:	f415 7f80 	tst.w	r5, #256	; 0x100
    73ee:	bf02      	ittt	eq
    73f0:	3001      	addeq	r0, #1
    73f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    73f6:	3001      	addeq	r0, #1
    73f8:	bcf0      	pop	{r4, r5, r6, r7}
    73fa:	3801      	subs	r0, #1
    73fc:	4770      	bx	lr
    73fe:	bf00      	nop

00007400 <_realloc_r>:
    7400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7402:	4607      	mov	r7, r0
    7404:	4614      	mov	r4, r2
    7406:	460e      	mov	r6, r1
    7408:	b921      	cbnz	r1, 7414 <_realloc_r+0x14>
    740a:	4611      	mov	r1, r2
    740c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7410:	f7ff bb4e 	b.w	6ab0 <_malloc_r>
    7414:	b922      	cbnz	r2, 7420 <_realloc_r+0x20>
    7416:	f7ff fafd 	bl	6a14 <_free_r>
    741a:	4625      	mov	r5, r4
    741c:	4628      	mov	r0, r5
    741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7420:	f000 f814 	bl	744c <_malloc_usable_size_r>
    7424:	4284      	cmp	r4, r0
    7426:	d90f      	bls.n	7448 <_realloc_r+0x48>
    7428:	4621      	mov	r1, r4
    742a:	4638      	mov	r0, r7
    742c:	f7ff fb40 	bl	6ab0 <_malloc_r>
    7430:	4605      	mov	r5, r0
    7432:	2800      	cmp	r0, #0
    7434:	d0f2      	beq.n	741c <_realloc_r+0x1c>
    7436:	4631      	mov	r1, r6
    7438:	4622      	mov	r2, r4
    743a:	f7ff fabd 	bl	69b8 <memcpy>
    743e:	4631      	mov	r1, r6
    7440:	4638      	mov	r0, r7
    7442:	f7ff fae7 	bl	6a14 <_free_r>
    7446:	e7e9      	b.n	741c <_realloc_r+0x1c>
    7448:	4635      	mov	r5, r6
    744a:	e7e7      	b.n	741c <_realloc_r+0x1c>

0000744c <_malloc_usable_size_r>:
    744c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    7450:	2800      	cmp	r0, #0
    7452:	f1a0 0004 	sub.w	r0, r0, #4
    7456:	bfbc      	itt	lt
    7458:	580b      	ldrlt	r3, [r1, r0]
    745a:	18c0      	addlt	r0, r0, r3
    745c:	4770      	bx	lr
    745e:	0000      	movs	r0, r0
    7460:	2a2a2a2a 	.word	0x2a2a2a2a
    7464:	2a2a2a2a 	.word	0x2a2a2a2a
    7468:	2a2a2a2a 	.word	0x2a2a2a2a
    746c:	2a2a2a2a 	.word	0x2a2a2a2a
    7470:	2a2a2a2a 	.word	0x2a2a2a2a
    7474:	2a2a2a2a 	.word	0x2a2a2a2a
    7478:	2a2a2a2a 	.word	0x2a2a2a2a
    747c:	2a2a2a2a 	.word	0x2a2a2a2a
    7480:	2a2a2a2a 	.word	0x2a2a2a2a
    7484:	2a2a2a2a 	.word	0x2a2a2a2a
    7488:	2a2a2a2a 	.word	0x2a2a2a2a
    748c:	2a2a2a2a 	.word	0x2a2a2a2a
    7490:	2a2a2a2a 	.word	0x2a2a2a2a
    7494:	2a2a2a2a 	.word	0x2a2a2a2a
    7498:	00002a2a 	.word	0x00002a2a
    749c:	2a2a2a2a 	.word	0x2a2a2a2a
    74a0:	2a2a2a2a 	.word	0x2a2a2a2a
    74a4:	2a2a2a2a 	.word	0x2a2a2a2a
    74a8:	532a2a2a 	.word	0x532a2a2a
    74ac:	4b434154 	.word	0x4b434154
    74b0:	45564f20 	.word	0x45564f20
    74b4:	4f4c4652 	.word	0x4f4c4652
    74b8:	45442057 	.word	0x45442057
    74bc:	54434554 	.word	0x54434554
    74c0:	2a2a4445 	.word	0x2a2a4445
    74c4:	2a2a2a2a 	.word	0x2a2a2a2a
    74c8:	2a2a2a2a 	.word	0x2a2a2a2a
    74cc:	2a2a2a2a 	.word	0x2a2a2a2a
    74d0:	2a2a2a2a 	.word	0x2a2a2a2a
    74d4:	00002a2a 	.word	0x00002a2a
    74d8:	6b736154 	.word	0x6b736154
    74dc:	6e614820 	.word	0x6e614820
    74e0:	20656c64 	.word	0x20656c64
    74e4:	6425202d 	.word	0x6425202d
    74e8:	00000a0d 	.word	0x00000a0d
    74ec:	2a2a2a2a 	.word	0x2a2a2a2a
    74f0:	2a2a2a2a 	.word	0x2a2a2a2a
    74f4:	2a2a2a2a 	.word	0x2a2a2a2a
    74f8:	4d2a2a2a 	.word	0x4d2a2a2a
    74fc:	4f4c4c41 	.word	0x4f4c4c41
    7500:	41462043 	.word	0x41462043
    7504:	52554c49 	.word	0x52554c49
    7508:	45442045 	.word	0x45442045
    750c:	54434554 	.word	0x54434554
    7510:	2a2a4445 	.word	0x2a2a4445
    7514:	2a2a2a2a 	.word	0x2a2a2a2a
    7518:	2a2a2a2a 	.word	0x2a2a2a2a
    751c:	2a2a2a2a 	.word	0x2a2a2a2a
    7520:	2a2a2a2a 	.word	0x2a2a2a2a
    7524:	00002a2a 	.word	0x00002a2a
    7528:	41204e49 	.word	0x41204e49
    752c:	5f304344 	.word	0x5f304344
    7530:	61682030 	.word	0x61682030
    7534:	656c646e 	.word	0x656c646e
    7538:	00000072 	.word	0x00000072
    753c:	41204e49 	.word	0x41204e49
    7540:	5f304344 	.word	0x5f304344
    7544:	61682031 	.word	0x61682031
    7548:	656c646e 	.word	0x656c646e
    754c:	00000072 	.word	0x00000072
    7550:	00004b4f 	.word	0x00004b4f
    7554:	6c696146 	.word	0x6c696146
    7558:	74206465 	.word	0x74206465
    755c:	6573206f 	.word	0x6573206f
    7560:	7420746e 	.word	0x7420746e
    7564:	73206568 	.word	0x73206568
    7568:	41207465 	.word	0x41207465
    756c:	72204e50 	.word	0x72204e50
    7570:	65757165 	.word	0x65757165
    7574:	74207473 	.word	0x74207473
    7578:	7854206f 	.word	0x7854206f
    757c:	73615420 	.word	0x73615420
    7580:	0000006b 	.word	0x0000006b
    7584:	6f727245 	.word	0x6f727245
    7588:	203a2072 	.word	0x203a2072
    758c:	20746f4e 	.word	0x20746f4e
    7590:	656c6261 	.word	0x656c6261
    7594:	206f7420 	.word	0x206f7420
    7598:	6174626f 	.word	0x6174626f
    759c:	54206e69 	.word	0x54206e69
    75a0:	65532078 	.word	0x65532078
    75a4:	6170616d 	.word	0x6170616d
    75a8:	65726f68 	.word	0x65726f68
    75ac:	00000000 	.word	0x00000000
    75b0:	6e617254 	.word	0x6e617254
    75b4:	74696d73 	.word	0x74696d73
    75b8:	65755120 	.word	0x65755120
    75bc:	69206575 	.word	0x69206575
    75c0:	6f6e2073 	.word	0x6f6e2073
    75c4:	6d652074 	.word	0x6d652074
    75c8:	00797470 	.word	0x00797470
    75cc:	41544f46 	.word	0x41544f46
    75d0:	53203a20 	.word	0x53203a20
    75d4:	74207465 	.word	0x74207465
    75d8:	41206568 	.word	0x41206568
    75dc:	66204e50 	.word	0x66204e50
    75e0:	6320726f 	.word	0x6320726f
    75e4:	656e6e6f 	.word	0x656e6e6f
    75e8:	6e697463 	.word	0x6e697463
    75ec:	6f742067 	.word	0x6f742067
    75f0:	72694120 	.word	0x72694120
    75f4:	6e615620 	.word	0x6e615620
    75f8:	65676174 	.word	0x65676174
    75fc:	00000000 	.word	0x00000000
    7600:	6f727245 	.word	0x6f727245
    7604:	78453a72 	.word	0x78453a72
    7608:	74636570 	.word	0x74636570
    760c:	52206465 	.word	0x52206465
    7610:	6f707365 	.word	0x6f707365
    7614:	2065736e 	.word	0x2065736e
    7618:	20746f4e 	.word	0x20746f4e
    761c:	65636552 	.word	0x65636552
    7620:	64657669 	.word	0x64657669
    7624:	002e2e2e 	.word	0x002e2e2e
    7628:	6f727245 	.word	0x6f727245
    762c:	61463a72 	.word	0x61463a72
    7630:	64656c69 	.word	0x64656c69
    7634:	206f7420 	.word	0x206f7420
    7638:	65636572 	.word	0x65636572
    763c:	20657669 	.word	0x20657669
    7640:	6e6e6f63 	.word	0x6e6e6f63
    7644:	69746365 	.word	0x69746365
    7648:	72206e6f 	.word	0x72206e6f
    764c:	6f707365 	.word	0x6f707365
    7650:	2065736e 	.word	0x2065736e
    7654:	52206e69 	.word	0x52206e69
    7658:	6f6d2058 	.word	0x6f6d2058
    765c:	00006564 	.word	0x00006564
    7660:	6c696146 	.word	0x6c696146
    7664:	74206465 	.word	0x74206465
    7668:	6573206f 	.word	0x6573206f
    766c:	7420746e 	.word	0x7420746e
    7670:	73206568 	.word	0x73206568
    7674:	69767265 	.word	0x69767265
    7678:	69206563 	.word	0x69206563
    767c:	6369646e 	.word	0x6369646e
    7680:	6f697461 	.word	0x6f697461
    7684:	6572206e 	.word	0x6572206e
    7688:	73657571 	.word	0x73657571
    768c:	6f742074 	.word	0x6f742074
    7690:	20785420 	.word	0x20785420
    7694:	6b736154 	.word	0x6b736154
    7698:	00000000 	.word	0x00000000
    769c:	41544f46 	.word	0x41544f46
    76a0:	53203a20 	.word	0x53203a20
    76a4:	64207465 	.word	0x64207465
    76a8:	63697665 	.word	0x63697665
    76ac:	65732065 	.word	0x65732065
    76b0:	63697672 	.word	0x63697672
    76b4:	6e692065 	.word	0x6e692065
    76b8:	61636964 	.word	0x61636964
    76bc:	6e6f6974 	.word	0x6e6f6974
    76c0:	00002e73 	.word	0x00002e73
    76c4:	6c696146 	.word	0x6c696146
    76c8:	74206465 	.word	0x74206465
    76cc:	6573206f 	.word	0x6573206f
    76d0:	7420746e 	.word	0x7420746e
    76d4:	75206568 	.word	0x75206568
    76d8:	20726573 	.word	0x20726573
    76dc:	65726761 	.word	0x65726761
    76e0:	6e656d65 	.word	0x6e656d65
    76e4:	63612074 	.word	0x63612074
    76e8:	61766974 	.word	0x61766974
    76ec:	6e6f6974 	.word	0x6e6f6974
    76f0:	71657220 	.word	0x71657220
    76f4:	74736575 	.word	0x74736575
    76f8:	726f6620 	.word	0x726f6620
    76fc:	20574620 	.word	0x20574620
    7700:	6e776f64 	.word	0x6e776f64
    7704:	64616f6c 	.word	0x64616f6c
    7708:	206f7420 	.word	0x206f7420
    770c:	54207854 	.word	0x54207854
    7710:	006b7361 	.word	0x006b7361
    7714:	41544f46 	.word	0x41544f46
    7718:	53203a20 	.word	0x53203a20
    771c:	75207465 	.word	0x75207465
    7720:	20726573 	.word	0x20726573
    7724:	65726761 	.word	0x65726761
    7728:	6e656d65 	.word	0x6e656d65
    772c:	63612074 	.word	0x63612074
    7730:	61766974 	.word	0x61766974
    7734:	6e6f6974 	.word	0x6e6f6974
    7738:	726f6620 	.word	0x726f6620
    773c:	20574620 	.word	0x20574620
    7740:	6e776f64 	.word	0x6e776f64
    7744:	64616f6c 	.word	0x64616f6c
    7748:	0000002e 	.word	0x0000002e
    774c:	6c696146 	.word	0x6c696146
    7750:	74206465 	.word	0x74206465
    7754:	6573206f 	.word	0x6573206f
    7758:	7420746e 	.word	0x7420746e
    775c:	75206568 	.word	0x75206568
    7760:	20726573 	.word	0x20726573
    7764:	65726761 	.word	0x65726761
    7768:	6e656d65 	.word	0x6e656d65
    776c:	63612074 	.word	0x63612074
    7770:	61766974 	.word	0x61766974
    7774:	6e6f6974 	.word	0x6e6f6974
    7778:	71657220 	.word	0x71657220
    777c:	74736575 	.word	0x74736575
    7780:	726f6620 	.word	0x726f6620
    7784:	20574620 	.word	0x20574620
    7788:	74736e69 	.word	0x74736e69
    778c:	616c6c61 	.word	0x616c6c61
    7790:	6e6f6974 	.word	0x6e6f6974
    7794:	206f7420 	.word	0x206f7420
    7798:	54207854 	.word	0x54207854
    779c:	006b7361 	.word	0x006b7361
    77a0:	41544f46 	.word	0x41544f46
    77a4:	53203a20 	.word	0x53203a20
    77a8:	75207465 	.word	0x75207465
    77ac:	20726573 	.word	0x20726573
    77b0:	65726761 	.word	0x65726761
    77b4:	6e656d65 	.word	0x6e656d65
    77b8:	63612074 	.word	0x63612074
    77bc:	61766974 	.word	0x61766974
    77c0:	6e6f6974 	.word	0x6e6f6974
    77c4:	726f6620 	.word	0x726f6620
    77c8:	20574620 	.word	0x20574620
    77cc:	74736e69 	.word	0x74736e69
    77d0:	616c6c61 	.word	0x616c6c61
    77d4:	6e6f6974 	.word	0x6e6f6974
    77d8:	0000002e 	.word	0x0000002e
    77dc:	6c696146 	.word	0x6c696146
    77e0:	74206465 	.word	0x74206465
    77e4:	6573206f 	.word	0x6573206f
    77e8:	7420746e 	.word	0x7420746e
    77ec:	73206568 	.word	0x73206568
    77f0:	74726174 	.word	0x74726174
    77f4:	204d4420 	.word	0x204d4420
    77f8:	73736573 	.word	0x73736573
    77fc:	206e6f69 	.word	0x206e6f69
    7800:	75716572 	.word	0x75716572
    7804:	20747365 	.word	0x20747365
    7808:	54206f74 	.word	0x54206f74
    780c:	61542078 	.word	0x61542078
    7810:	00006b73 	.word	0x00006b73
    7814:	41544f46 	.word	0x41544f46
    7818:	49203a20 	.word	0x49203a20
    781c:	6974696e 	.word	0x6974696e
    7820:	6e697461 	.word	0x6e697461
    7824:	68742067 	.word	0x68742067
    7828:	4d442065 	.word	0x4d442065
    782c:	73657320 	.word	0x73657320
    7830:	6e6f6973 	.word	0x6e6f6973
    7834:	74697720 	.word	0x74697720
    7838:	69412068 	.word	0x69412068
    783c:	61562072 	.word	0x61562072
    7840:	6761746e 	.word	0x6761746e
    7844:	00002e65 	.word	0x00002e65
    7848:	572b0a0d 	.word	0x572b0a0d
    784c:	3a495344 	.word	0x3a495344
    7850:	00000020 	.word	0x00000020
    7854:	41544f46 	.word	0x41544f46
    7858:	41203a20 	.word	0x41203a20
    785c:	49204e50 	.word	0x49204e50
    7860:	45532053 	.word	0x45532053
    7864:	52202e54 	.word	0x52202e54
    7868:	59444145 	.word	0x59444145
    786c:	524f4620 	.word	0x524f4620
    7870:	204d4420 	.word	0x204d4420
    7874:	53534553 	.word	0x53534553
    7878:	2e4e4f49 	.word	0x2e4e4f49
    787c:	00000a0d 	.word	0x00000a0d
    7880:	41544f46 	.word	0x41544f46
    7884:	41203a20 	.word	0x41203a20
    7888:	41565249 	.word	0x41565249
    788c:	4741544e 	.word	0x4741544e
    7890:	524f2045 	.word	0x524f2045
    7894:	4e494749 	.word	0x4e494749
    7898:	44455441 	.word	0x44455441
    789c:	204d4420 	.word	0x204d4420
    78a0:	53534553 	.word	0x53534553
    78a4:	204e4f49 	.word	0x204e4f49
    78a8:	55514552 	.word	0x55514552
    78ac:	2e545345 	.word	0x2e545345
    78b0:	00000a0d 	.word	0x00000a0d
    78b4:	41544f46 	.word	0x41544f46
    78b8:	41203a20 	.word	0x41203a20
    78bc:	41565249 	.word	0x41565249
    78c0:	4741544e 	.word	0x4741544e
    78c4:	45522045 	.word	0x45522045
    78c8:	53455551 	.word	0x53455551
    78cc:	46205354 	.word	0x46205354
    78d0:	4620524f 	.word	0x4620524f
    78d4:	574d5249 	.word	0x574d5249
    78d8:	20455241 	.word	0x20455241
    78dc:	4e574f44 	.word	0x4e574f44
    78e0:	44414f4c 	.word	0x44414f4c
    78e4:	000a0d2e 	.word	0x000a0d2e
    78e8:	41544f46 	.word	0x41544f46
    78ec:	41203a20 	.word	0x41203a20
    78f0:	41565249 	.word	0x41565249
    78f4:	4741544e 	.word	0x4741544e
    78f8:	45522045 	.word	0x45522045
    78fc:	53455551 	.word	0x53455551
    7900:	46205354 	.word	0x46205354
    7904:	4620524f 	.word	0x4620524f
    7908:	574d5249 	.word	0x574d5249
    790c:	20455241 	.word	0x20455241
    7910:	54534e49 	.word	0x54534e49
    7914:	414c4c41 	.word	0x414c4c41
    7918:	4e4f4954 	.word	0x4e4f4954
    791c:	000a0d2e 	.word	0x000a0d2e
    7920:	41544f46 	.word	0x41544f46
    7924:	53203a20 	.word	0x53203a20
    7928:	54524154 	.word	0x54524154
    792c:	20474e49 	.word	0x20474e49
    7930:	54205055 	.word	0x54205055
    7934:	44204548 	.word	0x44204548
    7938:	4553204d 	.word	0x4553204d
    793c:	4f495353 	.word	0x4f495353
    7940:	4957204e 	.word	0x4957204e
    7944:	41204854 	.word	0x41204854
    7948:	41565249 	.word	0x41565249
    794c:	4741544e 	.word	0x4741544e
    7950:	0a0d2e45 	.word	0x0a0d2e45
    7954:	00000000 	.word	0x00000000
    7958:	41544f46 	.word	0x41544f46
    795c:	44203a20 	.word	0x44203a20
    7960:	4553204d 	.word	0x4553204d
    7964:	4f495353 	.word	0x4f495353
    7968:	5453204e 	.word	0x5453204e
    796c:	45545241 	.word	0x45545241
    7970:	4e412044 	.word	0x4e412044
    7974:	52542044 	.word	0x52542044
    7978:	41534e41 	.word	0x41534e41
    797c:	4f495443 	.word	0x4f495443
    7980:	4f20534e 	.word	0x4f20534e
    7984:	52554343 	.word	0x52554343
    7988:	0d2e4445 	.word	0x0d2e4445
    798c:	0000000a 	.word	0x0000000a
    7990:	41544f46 	.word	0x41544f46
    7994:	44203a20 	.word	0x44203a20
    7998:	4553204d 	.word	0x4553204d
    799c:	4f495353 	.word	0x4f495353
    79a0:	4957204e 	.word	0x4957204e
    79a4:	41204854 	.word	0x41204854
    79a8:	41565249 	.word	0x41565249
    79ac:	4741544e 	.word	0x4741544e
    79b0:	53492045 	.word	0x53492045
    79b4:	4f4c4320 	.word	0x4f4c4320
    79b8:	2e444553 	.word	0x2e444553
    79bc:	00000a0d 	.word	0x00000a0d
    79c0:	41544f46 	.word	0x41544f46
    79c4:	46203a20 	.word	0x46203a20
    79c8:	574d5249 	.word	0x574d5249
    79cc:	20455241 	.word	0x20455241
    79d0:	41205349 	.word	0x41205349
    79d4:	4c494156 	.word	0x4c494156
    79d8:	454c4241 	.word	0x454c4241
    79dc:	524f4620 	.word	0x524f4620
    79e0:	574f4420 	.word	0x574f4420
    79e4:	414f4c4e 	.word	0x414f4c4e
    79e8:	0a0d2e44 	.word	0x0a0d2e44
    79ec:	00000000 	.word	0x00000000
    79f0:	41544f46 	.word	0x41544f46
    79f4:	46203a20 	.word	0x46203a20
    79f8:	574d5249 	.word	0x574d5249
    79fc:	20455241 	.word	0x20455241
    7a00:	44205349 	.word	0x44205349
    7a04:	4c4e574f 	.word	0x4c4e574f
    7a08:	4544414f 	.word	0x4544414f
    7a0c:	4e412044 	.word	0x4e412044
    7a10:	54532044 	.word	0x54532044
    7a14:	4445524f 	.word	0x4445524f
    7a18:	204e4920 	.word	0x204e4920
    7a1c:	53414c46 	.word	0x53414c46
    7a20:	0a0d2e48 	.word	0x0a0d2e48
    7a24:	00000000 	.word	0x00000000
    7a28:	41544f46 	.word	0x41544f46
    7a2c:	44203a20 	.word	0x44203a20
    7a30:	4c4e574f 	.word	0x4c4e574f
    7a34:	4544414f 	.word	0x4544414f
    7a38:	41502044 	.word	0x41502044
    7a3c:	47414b43 	.word	0x47414b43
    7a40:	53492045 	.word	0x53492045
    7a44:	52455620 	.word	0x52455620
    7a48:	45494649 	.word	0x45494649
    7a4c:	53412044 	.word	0x53412044
    7a50:	52454320 	.word	0x52454320
    7a54:	49464954 	.word	0x49464954
    7a58:	0d2e4445 	.word	0x0d2e4445
    7a5c:	0000000a 	.word	0x0000000a
    7a60:	41544f46 	.word	0x41544f46
    7a64:	53203a20 	.word	0x53203a20
    7a68:	54524154 	.word	0x54524154
    7a6c:	20474e49 	.word	0x20474e49
    7a70:	20454854 	.word	0x20454854
    7a74:	4d524946 	.word	0x4d524946
    7a78:	45524157 	.word	0x45524157
    7a7c:	44505520 	.word	0x44505520
    7a80:	2e455441 	.word	0x2e455441
    7a84:	00000a0d 	.word	0x00000a0d
    7a88:	41544f46 	.word	0x41544f46
    7a8c:	46203a20 	.word	0x46203a20
    7a90:	454c4941 	.word	0x454c4941
    7a94:	4f542044 	.word	0x4f542044
    7a98:	44505520 	.word	0x44505520
    7a9c:	20455441 	.word	0x20455441
    7aa0:	20454854 	.word	0x20454854
    7aa4:	4d524946 	.word	0x4d524946
    7aa8:	45524157 	.word	0x45524157
    7aac:	000a0d2e 	.word	0x000a0d2e
    7ab0:	41544f46 	.word	0x41544f46
    7ab4:	46203a20 	.word	0x46203a20
    7ab8:	574d5249 	.word	0x574d5249
    7abc:	20455241 	.word	0x20455241
    7ac0:	41445055 	.word	0x41445055
    7ac4:	20444554 	.word	0x20444554
    7ac8:	43435553 	.word	0x43435553
    7acc:	46535345 	.word	0x46535345
    7ad0:	594c4c55 	.word	0x594c4c55
    7ad4:	000a0d2e 	.word	0x000a0d2e
    7ad8:	41544f46 	.word	0x41544f46
    7adc:	44203a20 	.word	0x44203a20
    7ae0:	4c4e574f 	.word	0x4c4e574f
    7ae4:	2044414f 	.word	0x2044414f
    7ae8:	50204e49 	.word	0x50204e49
    7aec:	52474f52 	.word	0x52474f52
    7af0:	2e535345 	.word	0x2e535345
    7af4:	00000a0d 	.word	0x00000a0d
    7af8:	6f727245 	.word	0x6f727245
    7afc:	46203a72 	.word	0x46203a72
    7b00:	656c6961 	.word	0x656c6961
    7b04:	6f742064 	.word	0x6f742064
    7b08:	6e657320 	.word	0x6e657320
    7b0c:	57462074 	.word	0x57462074
    7b10:	776f6420 	.word	0x776f6420
    7b14:	616f6c6e 	.word	0x616f6c6e
    7b18:	63612064 	.word	0x63612064
    7b1c:	74706563 	.word	0x74706563
    7b20:	65636e61 	.word	0x65636e61
    7b24:	206f7420 	.word	0x206f7420
    7b28:	54207854 	.word	0x54207854
    7b2c:	006b7361 	.word	0x006b7361
    7b30:	41544f46 	.word	0x41544f46
    7b34:	41203a20 	.word	0x41203a20
    7b38:	70656363 	.word	0x70656363
    7b3c:	20646574 	.word	0x20646574
    7b40:	20656874 	.word	0x20656874
    7b44:	75716572 	.word	0x75716572
    7b48:	20747365 	.word	0x20747365
    7b4c:	20726f66 	.word	0x20726f66
    7b50:	44205746 	.word	0x44205746
    7b54:	6c6e776f 	.word	0x6c6e776f
    7b58:	2064616f 	.word	0x2064616f
    7b5c:	20646e61 	.word	0x20646e61
    7b60:	746e6573 	.word	0x746e6573
    7b64:	65687420 	.word	0x65687420
    7b68:	6b636120 	.word	0x6b636120
    7b6c:	6c776f6e 	.word	0x6c776f6e
    7b70:	6d676465 	.word	0x6d676465
    7b74:	20746e65 	.word	0x20746e65
    7b78:	41206f74 	.word	0x41206f74
    7b7c:	61767269 	.word	0x61767269
    7b80:	6761746e 	.word	0x6761746e
    7b84:	00000065 	.word	0x00000065
    7b88:	6f727245 	.word	0x6f727245
    7b8c:	46203a72 	.word	0x46203a72
    7b90:	656c6961 	.word	0x656c6961
    7b94:	6f742064 	.word	0x6f742064
    7b98:	6e657320 	.word	0x6e657320
    7b9c:	57462074 	.word	0x57462074
    7ba0:	736e6920 	.word	0x736e6920
    7ba4:	6c6c6174 	.word	0x6c6c6174
    7ba8:	63636120 	.word	0x63636120
    7bac:	61747065 	.word	0x61747065
    7bb0:	2065636e 	.word	0x2065636e
    7bb4:	54206f74 	.word	0x54206f74
    7bb8:	61542078 	.word	0x61542078
    7bbc:	00006b73 	.word	0x00006b73
    7bc0:	41544f46 	.word	0x41544f46
    7bc4:	41203a20 	.word	0x41203a20
    7bc8:	70656363 	.word	0x70656363
    7bcc:	20646574 	.word	0x20646574
    7bd0:	20656874 	.word	0x20656874
    7bd4:	75716572 	.word	0x75716572
    7bd8:	20747365 	.word	0x20747365
    7bdc:	20726f66 	.word	0x20726f66
    7be0:	49205746 	.word	0x49205746
    7be4:	6174736e 	.word	0x6174736e
    7be8:	74616c6c 	.word	0x74616c6c
    7bec:	206e6f69 	.word	0x206e6f69
    7bf0:	20646e61 	.word	0x20646e61
    7bf4:	746e6573 	.word	0x746e6573
    7bf8:	65687420 	.word	0x65687420
    7bfc:	6b636120 	.word	0x6b636120
    7c00:	6c776f6e 	.word	0x6c776f6e
    7c04:	6d676465 	.word	0x6d676465
    7c08:	20746e65 	.word	0x20746e65
    7c0c:	41206f74 	.word	0x41206f74
    7c10:	61767269 	.word	0x61767269
    7c14:	6761746e 	.word	0x6761746e
    7c18:	00000065 	.word	0x00000065
    7c1c:	656c6553 	.word	0x656c6553
    7c20:	4c207463 	.word	0x4c207463
    7c24:	20656e69 	.word	0x20656e69
    7c28:	20776f4c 	.word	0x20776f4c
    7c2c:	50202d20 	.word	0x50202d20
    7c30:	0074726f 	.word	0x0074726f

00007c34 <ModemCmdData>:
    7c34:	00000300 00008e60 00000000 00002e25     ....`.......%...
    7c44:	00000000 00000001 00008114 00020003     ................
    7c54:	00002e25 00000009 00000002 00008118     %...............
    7c64:	000f0008 00002e25 0000001b 00000003     ....%...........
    7c74:	00008124 000e000c 00002e25 0000001e     $.......%.......
    7c84:	00000004 00008134 000c0008 00002e25     ....4.......%...
    7c94:	00000018 00000005 00008140 00080005     ........@.......
    7ca4:	00002e25 00000011 00000006 0000814c     %...........L...
    7cb4:	000b000a 00002e25 00000019 00000007     ....%...........
    7cc4:	00008158 0015000a 00002e25 00000023     X.......%...#...
    7cd4:	00000008 00008164 00020005 00002e25     ....d.......%...
    7ce4:	0000000b 00000109 0000816c 003d0027     ........l...'.=.
    7cf4:	00002e25 00000068 0000010a 00008194     %...h...........
    7d04:	00020012 00002e25 00000018 0000010b     ....%...........
    7d14:	000081a8 00020012 00002e25 00000018     ........%.......
    7d24:	0000010c 000081bc 00020012 00002e25     ............%...
    7d34:	00000018 0000010d 000081d0 00020012     ................
    7d44:	00002e25 00000018 0000010e 000081e4     %...............
    7d54:	00020012 00002e25 00000018 0000010f     ....%...........
    7d64:	000081f8 00020012 00002e25 00000018     ........%.......
    7d74:	00000110 0000820c 00020012 00002e25     ............%...
    7d84:	00000018 00000111 00008220 00020012     ........ .......
    7d94:	00002e25 00000018 00000112 00008234     %...........4...
    7da4:	00020012 00002e25 00000018 00000113     ....%...........
    7db4:	00008248 00020013 00002e25 00000019     H.......%.......
    7dc4:	00000114 0000825c 0002001f 00002e25     ....\.......%...
    7dd4:	00000025 00000115 0000827c 00020023     %.......|...#...
    7de4:	00002e25 00000029 00000116 000082a0     %...)...........
    7df4:	0002001a 00002e25 00000020 00000117     ....%... .......
    7e04:	20000004 00070011 00002e25 0000001c     ... ....%.......
    7e14:	00000118 20000294 00bf003a 00002e25     ....... :...%...
    7e24:	000000fd 00000119 000082bc 00020010     ................
    7e34:	00002e25 00000016 0000011a 000082d0     %...............
    7e44:	00020010 00002e25 00000016 0000011b     ....%...........
    7e54:	000082e4 0002000b 00002e25 00000011     ........%.......
    7e64:	0000021c 000082f0 00020018 00002e25     ............%...
    7e74:	0000001e 0000021d 0000830c 0002000c     ................
    7e84:	00002e25 00000012 0000021e 0000831c     %...............
    7e94:	0002000d 00002e25 00000013 0000021f     ....%...........
    7ea4:	0000832c 0002000c 00002e25 00000012     ,.......%.......
    7eb4:	00000220 0000833c 0002000c 00002e25      ...<.......%...
    7ec4:	00000012 00000221 0000834c 0002000a     ....!...L.......
    7ed4:	00002e25 00000010 00000222 00008358     %......."...X...
    7ee4:	0002000a 00002e25 00000010 00000000     ....%...........
	...
    80e4:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    80f4:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    8104:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    8114:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    8124:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    8134:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    8144:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    8154:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    8164:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    8174:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    8184:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    8194:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    81a4:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    81b4:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    81c4:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    81d4:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    81e4:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    81f4:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    8204:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    8214:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    8224:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    8234:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    8244:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    8254:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    8264:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    8274:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    8284:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    8294:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    82a4:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    82b4:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    82c4:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    82d4:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    82e4:	432b5441 54544147 000d303d 572b5441     AT+CGATT=0..AT+W
    82f4:	3d535344 56222c30 4e49575a 4e524554     DSS=0,"VZWINTERN
    8304:	0d225445 00000000 572b5441 3d535344     ET".....AT+WDSS=
    8314:	0d312c31 00000000 572b5441 3d495344     1,1.....AT+WDSI=
    8324:	31393138 0000000d 572b5441 3d435344     8191....AT+WDSC=
    8334:	0d312c31 00000000 572b5441 3d435344     1,1.....AT+WDSC=
    8344:	0d312c32 00000000 572b5441 3d525344     2,1.....AT+WDSR=
    8354:	00000d33 572b5441 3d525344 00000d34     3...AT+WDSR=4...
    8364:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    8374:	69746163 66206e6f 7020726f 65737261     cation for parse
    8384:	74616420 75622061 72656666 69616620      data buffer fai
    8394:	0064656c 6f727245 4e203a72 6120746f     led.Error: Not a
    83a4:	20656c62 76206f74 66697265 68742079     ble to verify th
    83b4:	6f632065 6e616d6d 74732064 676e6972     e command string
    83c4:	72756420 20676e69 73726170 00676e69      during parsing.
    83d4:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    83e4:	72206f74 20646165 61746164 6f726620     to read data fro
    83f4:	6572206d 76696563 69722065 6220676e     m receive ring b
    8404:	65666675 75642072 676e6972 72617020     uffer during par
    8414:	00726573 6f727245 48203a72 20706165     ser.Error: Heap 
    8424:	6f6c6c61 69746163 66206e6f 7220726f     allocation for r
    8434:	6f707365 2065736e 61746164 66756220     esponse data buf
    8444:	20726566 6c696166 00006465 6e6e6f43     fer failed..Conn
    8454:	69746365 74206e6f 6874206f 65732065     ection to the se
    8464:	72657672 20736920 74736f6c 2e2e2e2e     rver is lost....
    8474:	0000002e 69797254 7420676e 7365206f     ....Trying to es
    8484:	6c626174 20687369 20656874 6e6e6f63     tablish the conn
    8494:	69746365 74206e6f 6573206f 72657672     ection to server
    84a4:	502e2e2e 7361656c 61772065 2e2e7469     ...Please wait..
    84b4:	2e2e2e2e 00000a0d 6c696146 74206465     ........Failed t
    84c4:	6573206f 7420746e 53206568 69737365     o sent the Sessi
    84d4:	43206e6f 65736f6c 71657220 74736575     on Close request
    84e4:	206f7420 54207854 006b7361 4d206f4e      to Tx Task.No M
    84f4:	2065726f 69746341 43206576 656e6e6f     ore Active Conne
    8504:	6f697463 7420736e 6c63206f 0065736f     ctions to close.
    8514:	736f6c43 41206465 41206c6c 76697463     Closed All Activ
    8524:	6f432065 63656e6e 6e6f6974 00000073     e Connections...
    8534:	6c696146 74206465 6572206f 76696563     Failed to receiv
    8544:	6f632065 63656e6e 6e6f6974 73657220     e connection res
    8554:	736e6f70 6e692065 20585220 65646f6d     ponse in RX mode
    8564:	00000000 756f7242 20746867 20656874     ....Brought the 
    8574:	20504450 6e6e6f63 69746365 44206e6f     PDP connection D
    8584:	004e574f 65707845 64657463 73655220     OWN.Expected Res
    8594:	736e6f70 6f4e2065 65522074 76696563     ponse Not Receiv
    85a4:	2e2e6465 0000002e 6c696146 74206465     ed......Failed t
    85b4:	6573206f 7420746e 50206568 65442053     o sent the PS De
    85c4:	68636174 71657220 74736575 206f7420     tach request to 
    85d4:	54207854 006b7361 61746544 64656863     Tx Task.Detached
    85e4:	65687420 50445020 00535020 656c6544      the PDP PS.Dele
    85f4:	20646574 206c6c61 7420666f 70206568     ted all of the p
    8604:	69766572 2073756f 6e6e6f63 69746365     revious connecti
    8614:	63206e6f 69666e6f 61727567 6e6f6974     on configuration
    8624:	00000073 6c696146 74206465 6573206f     s...Failed to se
    8634:	7420746e 45206568 7020464f 65747461     nt the EOF patte
    8644:	74206e72 7854206f 73615420 0000006b     rn to Tx Task...
    8654:	20464f45 74746150 206e7265 666e6f63     EOF Pattern conf
    8664:	72756769 00006465 6c696146 74206465     igured..Failed t
    8674:	6573206f 6120746e 73656363 6f702073     o sent access po
    8684:	20746e69 20646d63 54206f74 61542078     int cmd to Tx Ta
    8694:	00006b73 65636341 50207373 746e696f     sk..Access Point
    86a4:	6e6f6320 75676966 00646572 6c696146      configured.Fail
    86b4:	74206465 6573206f 6320746e 656e6e6f     ed to sent conne
    86c4:	6f697463 6974206e 2072656d 20646d63     ction timer cmd 
    86d4:	54206f74 61542078 00006b73 6e6e6f43     to Tx Task..Conn
    86e4:	69746365 54206e6f 72656d69 6f632073     ection Timers co
    86f4:	6769666e 64657275 00000000 6e6e6f43     nfigured....Conn
    8704:	69746365 53206e6f 75746174 203a2073     ection Status : 
    8714:	43534944 454e4e4f 44455443 45554420     DISCONNECTED DUE
    8724:	204f5420 5754454e 004b524f 6e6e6f43      TO NETWORK.Conn
    8734:	69746365 53206e6f 75746174 203a2073     ection Status : 
    8744:	4e4e4f43 45544345 00000044 6e6e6f43     CONNECTED...Conn
    8754:	69746365 73206e6f 65636375 75667373     ection successfu
    8764:	2e2e2e6c 756f6c43 65532064 72657672     l...Cloud Server
    8774:	6e6f6320 75676966 00646572 6e6e6f43      configured.Conn
    8784:	69746365 53206e6f 75746174 203a2073     ection Status : 
    8794:	4c494146 54204445 4f43204f 43454e4e     FAILED TO CONNEC
    87a4:	00000054 6e6e6f43 69746365 53206e6f     T...Connection S
    87b4:	75746174 203a2073 4e4e4f43 49544345     tatus : CONNECTI
    87c4:	43204e4f 45534f4c 00000044 6e6e6f43     ON CLOSED...Conn
    87d4:	69746365 53206e6f 75746174 203a2073     ection Status : 
    87e4:	4e4e4f43 49544345 49204e4f 5250204e     CONNECTION IN PR
    87f4:	4552474f 00005353 6e6e6f43 69746365     OGRESS..Connecti
    8804:	53206e6f 75746174 203a2073 454c4449     on Status : IDLE
    8814:	4d495420 53205245 54524154 46204445      TIMER STARTED F
    8824:	4420524f 4f435349 43454e4e 4e4f4954     OR DISCONNECTION
    8834:	00000000 6e6e6f43 69746365 53206e6f     ....Connection S
    8844:	75746174 203a2073 454c4449 4d495420     tatus : IDLE TIM
    8854:	43205245 45434e41 44454c4c 00000000     ER CANCELLED....
    8864:	6f727245 203a2072 6e6e6f43 69746365     Error : Connecti
    8874:	46206e6f 756c6961 00006572 74736552     on Failure..Rest
    8884:	69747261 7420676e 63206568 656e6e6f     arting the conne
    8894:	6f697463 6e69206e 61697469 617a696c     ction initializa
    88a4:	6e6f6974 002e2e2e 4e4e4f43 00544345     tion....CONNECT.
    88b4:	736f6c43 20676e69 69746341 43206576     Closing Active C
    88c4:	656e6e6f 6f697463 0000736e 4e4e4f43     onnections..CONN
    88d4:	0d544345 5454480a 2e312f50 30322031     ECT..HTTP/1.1 20
    88e4:	4b4f2030 00000000 6f430a0d 63656e6e     0 OK......Connec
    88f4:	6e6f6974 746e6920 75727265 64657470     tion interrupted
    8904:	502e2e2e 6f667265 6e696d72 68742067     ...Performing th
    8914:	72452065 20726f72 6f636552 79726576     e Error Recovery
    8924:	2e2e2e2e 00000a0d 736f6c43 20676e69     ........Closing 
    8934:	20656874 69746361 63206576 656e6e6f     the active conne
    8944:	6f697463 0000006e 626f7250 206d656c     ction...Problem 
    8954:	41206e69 206f7475 6f636552 79726576     in Auto Recovery
    8964:	0000002e 69797254 7420676e 6572206f     ....Trying to re
    8974:	7473652d 696c6261 74206873 63206568     -establish the c
    8984:	656e6e6f 6f697463 6874206e 67756f72     onnection throug
    8994:	20612068 65646f6d 6572206d 72617473     h a modem restar
    89a4:	2e2e2e74 000a0d2e 6978614d 206d756d     t.......Maximum 
    89b4:	72746572 6f632079 20746e75 20726f66     retry count for 
    89c4:	6f747561 63657220 7265766f 73692079     auto recovery is
    89d4:	70786520 64657269 0000002e 69797254      expired....Tryi
    89e4:	7420676e 6572206f 7473652d 696c6261     ng to re-establi
    89f4:	74206873 63206568 656e6e6f 6f697463     sh the connectio
    8a04:	6874206e 67756f72 20612068 6c6f6877     n through a whol
    8a14:	79732065 6d657473 73657220 74726174     e system restart
    8a24:	2e2e2e2e 00000a0d 6f727245 65522072     ........Error Re
    8a34:	65766f63 43207972 6c706d6f 64657465     covery Completed
    8a44:	00000a0d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ....============
    8a54:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    8a64:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    8a74:	3d3d3d3d 000a0d3d 61747345 73696c62     =====...Establis
    8a84:	676e6968 6e206120 63207765 656e6e6f     hing a new conne
    8a94:	6f697463 6977206e 73206874 65767265     ction with serve
    8aa4:	00000072 74737953 69206d65 75612073     r...System is au
    8ab4:	72206f74 766f6365 64657265 726f6620     to recovered for
    8ac4:	726f6d20 68742065 33206e61 6d697420      more than 3 tim
    8ad4:	002e7365 66726550 696d726f 6120676e     es..Performing a
    8ae4:	73797320 206d6574 74736572 2e747261      system restart.
    8af4:	2e2e2e2e 2e2e2e2e 2e2e2e2e 2e2e2e2e     ................
    8b04:	0d2e2e2e 0000000a 66726550 696d726f     ........Performi
    8b14:	6620676e 6563726f 72652064 20726f72     ng forced error 
    8b24:	6f636572 79726576 2e2e2e2e 00000a0d     recovery........
    8b34:	6c696146 74206465 6573206f 7420746e     Failed to sent t
    8b44:	44206568 20676169 61746164 206f7420     he Diag data to 
    8b54:	54207854 006b7361 69726556 6e697966     Tx Task.Verifyin
    8b64:	68742067 41552065 4c205452 206b6e69     g the UART Link 
    8b74:	74617473 77207375 20687469 65646f4d     status with Mode
    8b84:	0000006d 63637553 46737365 796c6c75     m...SuccessFully
    8b94:	72657620 65696669 68742064 41552065      verified the UA
    8ba4:	4c205452 206b6e69 77746562 206e6565     RT Link between 
    8bb4:	444d4153 43203135 72746e6f 656c6c6f     SAMD51 Controlle
    8bc4:	20262072 65646f4d 0000006d 72746552     r & Modem...Retr
    8bd4:	65766569 68742064 6f4d2065 206d6564     ieved the Modem 
    8be4:	49454d49 6d754e20 00726562 72746552     IMEI Number.Retr
    8bf4:	65766569 68742064 6f4d2065 206d6564     ieved the Modem 
    8c04:	69726573 4e206c61 65626d75 00000072     serial Number...
    8c14:	72756f48 5320796c 65747379 6552206d     Hourly System Re
    8c24:	72617473 69742074 2072656d 69707865     start timer expi
    8c34:	2e646572 62655220 69746f6f 7420676e     red. Rebooting t
    8c44:	73206568 65747379 0a0d2e6d 00000000     he system.......
    8c54:	72756f48 7953796c 6d657473 74736552     HourlySystemRest
    8c64:	54747261 72656d69 00000000 6b636150     artTimer....Pack
    8c74:	72547465 6d736e61 65507469 646f6972     etTransmitPeriod
    8c84:	69546369 0072656d 65646f4d 6974206d     icTimer.Modem ti
    8c94:	7372656d 65726120 61747320 64657472     mers are started
    8ca4:	00000000 6c696146 74206465 6e69206f     ....Failed to in
    8cb4:	61697469 657a696c 65687420 646f6d20     itialize the mod
    8cc4:	74206d65 72656d69 52202e73 6f6f6265     em timers. Reboo
    8cd4:	676e6974 65687420 73797320 006d6574     ting the system.
    8ce4:	6c696146 74206465 6f70206f 74207473     Failed to post t
    8cf4:	63206568 656e6e6f 6f697463 6552206e     he connection Re
    8d04:	6e6f7073 74206573 7551206f 00657565     sponse to Queue.
    8d14:	6f727245 203a2072 6d6d6f43 20646e61     Error : Command 
    8d24:	70736552 65736e6f 65755120 69206575     Response Queue i
    8d34:	6f6e2073 6d652074 00797470 6c696146     s not empty.Fail
    8d44:	74206465 6f70206f 74207473 63206568     ed to post the c
    8d54:	656e6e6f 6f697463 6552206e 6e6f7073     onnection Respon
    8d64:	74206573 6f46206f 51206174 65756575     se to Fota Queue
    8d74:	00000000 4f525245 52203a52 69656365     ....ERROR: Recei
    8d84:	20646576 65206e61 7974706d 73657220     ved an empty res
    8d94:	736e6f70 74732065 676e6972 206e6920     ponse string in 
    8da4:	6d6d6f63 20646e61 70736572 65736e6f     command response
    8db4:	6e616820 72656c64 00000000 4f525245      handler....ERRO
    8dc4:	43203a52 616d6d6f 5020646e 69737261     R: Command Parsi
    8dd4:	4620676e 656c6961 00000064 6f4e0a0d     ng Failed.....No
    8de4:	62612074 7420656c 7561206f 72206f74     t able to auto r
    8df4:	766f6365 66207265 206d6f72 6e6e6f63     ecover from conn
    8e04:	69746365 66206e6f 756c6961 2e2e6572     ection failure..
    8e14:	6265522e 69746f6f 2e2e676e 00002e2e     .Rebooting......
    8e24:	73207854 61697265 6544206c 20677562     Tx serial Debug 
    8e34:	656e6f44 00000a0d 44207852 0d656e6f     Done....Rx Done.
    8e44:	0000000a 2d207325 20642520 00000a0d     ....%s - %d ....
    8e54:	2d207325 6d642520 0a0d2056 00000000     %s - %dmV ......
    8e64:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
    8e74:	775f6c61 682e7464 00000000 2a232a23     al_wdt.h....#*#*
    8e84:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    8e94:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    8ea4:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    8eb4:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    8ec4:	2a232a23 00000000 78656e55 74636570     #*#*....Unexpect
    8ed4:	49206465 7265746e 74707572 70614820     ed Interrupt Hap
    8ee4:	656e6570 2e2e2e64 74696157 20676e69     pened...Waiting 
    8ef4:	20726f66 20656874 63746177 6f642068     for the watch do
    8f04:	69742067 756f656d 00000074 682f2e2e     g timeout...../h
    8f14:	732f6c61 682f6372 615f6c61 735f6364     al/src/hal_adc_s
    8f24:	2e636e79 00000063 682f2e2e 752f6c61     ync.c...../hal/u
    8f34:	736c6974 6372732f 6974752f 725f736c     tils/src/utils_r
    8f44:	62676e69 65666675 00632e72              ingbuffer.c.

00008f50 <_adcs>:
    8f50:	00c00000 00030009 02481980 00000000     ..........H.....
    8f60:	00000000 00010001 00000000 00000000     ................
	...
    8f7c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    8f8c:	632e6364 00000000                       dc.c....

00008f94 <_cfgs>:
	...
    9094:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    90a4:	43000000 43000400                       ...C...C

000090ac <_usarts>:
    90ac:	00000003 40200004 00030000 00700002     ...... @......p.
    90bc:	0000f62b 00000000 00000004 40300184     +.............0@
    90cc:	00030300 00700002 0000ff2e 00000000     ......p.........
    90dc:	00000005 40300004 00030000 00700002     ......0@......p.
    90ec:	0000f62b 00000000                       +.......

000090f4 <_i2cms>:
	...

0000910c <sercomspi_regs>:
	...
    9120:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    9130:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    9140:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    9150:	00000000 736e6553 6154726f 00006b73     ....SensorTask..
    9160:	65646f4d 5478546d 006b7361 65646f4d     ModemTxTask.Mode
    9170:	5478526d 006b7361 65646f4d 6f72506d     mRxTask.ModemPro
    9180:	73736563 6b736154 00000000 65646f4d     cessTask....Mode
    9190:	6169446d 73615467 0000006b 61746f46     mDiagTask...Fota
    91a0:	54707041 006b7361 65657246 4f545220     AppTask.Free RTO
    91b0:	63532053 75646568 2072656c 20746f6e     S Scheduler not 
    91c0:	72617473 00646574 6c696146 74206465     started.Failed t
    91d0:	7263206f 65746165 73617420 0000736b     o create tasks..
    91e0:	6f727245 53203a72 64656863 72656c75     Error: Scheduler
    91f0:	69786520 00646574 454c4449 00000000      exited.IDLE....
    9200:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    9210:	20726d54 00637653                       Tmr Svc.

00009218 <__sf_fake_stderr>:
	...

00009238 <__sf_fake_stdin>:
	...

00009258 <__sf_fake_stdout>:
	...
    9278:	4f500043 00584953 2000002e                       C.POSIX...

00009282 <_ctype_>:
    9282:	20202000 20202020 28282020 20282828     .         ((((( 
    9292:	20202020 20202020 20202020 20202020                     
    92a2:	10108820 10101010 10101010 10101010      ...............
    92b2:	04040410 04040404 10040404 10101010     ................
    92c2:	41411010 41414141 01010101 01010101     ..AAAAAA........
    92d2:	01010101 01010101 01010101 10101010     ................
    92e2:	42421010 42424242 02020202 02020202     ..BBBBBB........
    92f2:	02020202 02020202 02020202 10101010     ................
    9302:	00000020 00000000 00000000 00000000      ...............
	...
    9382:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
    9392:	31300047 35343332 39383736 44434241     G.0123456789ABCD
    93a2:	30004645 34333231 38373635 63626139     EF.0123456789abc
    93b2:	00666564 b5f80000                                def...

000093b8 <_init>:
    93b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93ba:	bf00      	nop
    93bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    93be:	bc08      	pop	{r3}
    93c0:	469e      	mov	lr, r3
    93c2:	4770      	bx	lr

000093c4 <__init_array_start>:
    93c4:	00000289 	.word	0x00000289

000093c8 <_fini>:
    93c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93ca:	bf00      	nop
    93cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    93ce:	bc08      	pop	{r3}
    93d0:	469e      	mov	lr, r3
    93d2:	4770      	bx	lr

000093d4 <__fini_array_start>:
    93d4:	00000265 	.word	0x00000265
