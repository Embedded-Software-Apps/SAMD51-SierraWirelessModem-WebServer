
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008dd0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000190  20000000  00008dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020190  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020190  2**0
                  CONTENTS
  4 .bss          00003cfc  20000190  00008f60  00020190  2**4
                  ALLOC
  5 .stack        00010004  20003e8c  0000cc5c  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201be  2**0
                  CONTENTS, READONLY
  8 .debug_info   00063da4  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a026  00000000  00000000  00083fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001bf26  00000000  00000000  0008dfe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b88  00000000  00000000  000a9f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002280  00000000  00000000  000aba8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003ea41  00000000  00000000  000add0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032bd5  00000000  00000000  000ec750  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00109027  00000000  00000000  0011f325  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004978  00000000  00000000  0022834c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 3e 01 20 d9 27 00 00 d5 27 00 00 d5 27 00 00     .>. .'...'...'..
      10:	d5 27 00 00 d5 27 00 00 d5 27 00 00 00 00 00 00     .'...'...'......
	...
      2c:	61 4c 00 00 d5 27 00 00 00 00 00 00 01 4d 00 00     aL...'.......M..
      3c:	65 4d 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     eM...'...'...'..
      4c:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
      5c:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
      6c:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
      7c:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
      8c:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
      9c:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
      ac:	d5 27 00 00 d5 27 00 00 f5 3a 00 00 09 3b 00 00     .'...'...:...;..
      bc:	85 38 00 00 91 38 00 00 9d 38 00 00 a9 38 00 00     .8...8...8...8..
      cc:	b5 38 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .8...'...'...'..
      dc:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
      ec:	d5 27 00 00 00 00 00 00 05 3c 00 00 d5 27 00 00     .'.......<...'..
      fc:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
     10c:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
     11c:	d5 27 00 00 d5 27 00 00 d5 27 00 00 15 1c 00 00     .'...'...'......
     12c:	21 1c 00 00 2d 1c 00 00 d5 27 00 00 d5 27 00 00     !...-....'...'..
     13c:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
     14c:	d5 27 00 00 35 26 00 00 d5 27 00 00 00 00 00 00     .'..5&...'......
	...
     180:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
     190:	00 00 00 00 a5 41 00 00 d5 27 00 00 d5 27 00 00     .....A...'...'..
     1a0:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
     1b0:	b9 41 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .A...'...'...'..
     1c0:	d5 27 00 00 cd 41 00 00 d5 27 00 00 d5 27 00 00     .'...A...'...'..
     1d0:	d5 27 00 00 e1 41 00 00 d5 27 00 00 d5 27 00 00     .'...A...'...'..
     1e0:	f5 41 00 00 d5 27 00 00 d5 27 00 00 e9 46 00 00     .A...'...'...F..
     1f0:	fd 46 00 00 11 47 00 00 25 47 00 00 39 47 00 00     .F...G..%G..9G..
     200:	4d 47 00 00 00 00 00 00 00 00 00 00 d5 27 00 00     MG...........'..
     210:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
     220:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
     230:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
     240:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
     250:	d5 27 00 00 d5 27 00 00 d5 27 00 00 d5 27 00 00     .'...'...'...'..
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	00008dd0 	.word	0x00008dd0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00008dd0 	.word	0x00008dd0
     2c4:	20000194 	.word	0x20000194
     2c8:	00008dd0 	.word	0x00008dd0
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Application/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b500      	push	{lr}
     2d2:	b089      	sub	sp, #36	; 0x24
     2d4:	4606      	mov	r6, r0
	uint8_t dbgBuffer[30];
	memset(dbgBuffer,'0',30);
     2d6:	221e      	movs	r2, #30
     2d8:	2130      	movs	r1, #48	; 0x30
     2da:	4668      	mov	r0, sp
     2dc:	4b0c      	ldr	r3, [pc, #48]	; (310 <vApplicationStackOverflowHook+0x40>)
     2de:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e0:	4d0c      	ldr	r5, [pc, #48]	; (314 <vApplicationStackOverflowHook+0x44>)
     2e2:	4628      	mov	r0, r5
     2e4:	4c0c      	ldr	r4, [pc, #48]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e6:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2e8:	480c      	ldr	r0, [pc, #48]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2ea:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ec:	4628      	mov	r0, r5
     2ee:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f0:	480b      	ldr	r0, [pc, #44]	; (320 <vApplicationStackOverflowHook+0x50>)
     2f2:	47a0      	blx	r4

	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2f4:	4632      	mov	r2, r6
     2f6:	490b      	ldr	r1, [pc, #44]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f8:	4668      	mov	r0, sp
     2fa:	4b0b      	ldr	r3, [pc, #44]	; (328 <vApplicationStackOverflowHook+0x58>)
     2fc:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     2fe:	4668      	mov	r0, sp
     300:	4b0a      	ldr	r3, [pc, #40]	; (32c <vApplicationStackOverflowHook+0x5c>)
     302:	4798      	blx	r3
     304:	b281      	uxth	r1, r0
     306:	4668      	mov	r0, sp
     308:	4b09      	ldr	r3, [pc, #36]	; (330 <vApplicationStackOverflowHook+0x60>)
     30a:	4798      	blx	r3
     30c:	e7fe      	b.n	30c <vApplicationStackOverflowHook+0x3c>
     30e:	bf00      	nop
     310:	00006b65 	.word	0x00006b65
     314:	00007470 	.word	0x00007470
     318:	000025a9 	.word	0x000025a9
     31c:	000074ac 	.word	0x000074ac
     320:	000086e8 	.word	0x000086e8
     324:	000074e8 	.word	0x000074e8
     328:	00006ced 	.word	0x00006ced
     32c:	00006d45 	.word	0x00006d45
     330:	00002565 	.word	0x00002565

00000334 <intializeSensorSelectLines>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void intializeSensorSelectLines(void)
{
     334:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     336:	4b59      	ldr	r3, [pc, #356]	; (49c <intializeSensorSelectLines+0x168>)
     338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     33c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     340:	4a57      	ldr	r2, [pc, #348]	; (4a0 <intializeSensorSelectLines+0x16c>)
     342:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     346:	4a57      	ldr	r2, [pc, #348]	; (4a4 <intializeSensorSelectLines+0x170>)
     348:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     34c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     350:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
     354:	f040 0004 	orr.w	r0, r0, #4
     358:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     35c:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     360:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     364:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     368:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     36c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     370:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     374:	484c      	ldr	r0, [pc, #304]	; (4a8 <intializeSensorSelectLines+0x174>)
     376:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     37a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     37e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     382:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
     386:	f040 0004 	orr.w	r0, r0, #4
     38a:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     38e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     392:	f893 10cc 	ldrb.w	r1, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     396:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     39a:	f883 10cc 	strb.w	r1, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     39e:	f44f 6000 	mov.w	r0, #2048	; 0x800
     3a2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a6:	4e41      	ldr	r6, [pc, #260]	; (4ac <intializeSensorSelectLines+0x178>)
     3a8:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     3ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3b0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3b4:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     3b8:	f041 0104 	orr.w	r1, r1, #4
     3bc:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3c0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c4:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3c8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3cc:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
     3d4:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d8:	4d35      	ldr	r5, [pc, #212]	; (4b0 <intializeSensorSelectLines+0x17c>)
     3da:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     3de:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3e2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3e6:	f893 40ca 	ldrb.w	r4, [r3, #202]	; 0xca
     3ea:	f044 0404 	orr.w	r4, r4, #4
     3ee:	f883 40ca 	strb.w	r4, [r3, #202]	; 0xca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3f2:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f6:	f893 40ca 	ldrb.w	r4, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     3fa:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fe:	f883 40ca 	strb.w	r4, [r3, #202]	; 0xca
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     402:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     404:	629e      	str	r6, [r3, #40]	; 0x28
     406:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     408:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     40a:	f893 404b 	ldrb.w	r4, [r3, #75]	; 0x4b
     40e:	f044 0404 	orr.w	r4, r4, #4
     412:	f883 404b 	strb.w	r4, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     416:	6198      	str	r0, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     418:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     41c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     420:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     424:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     426:	629d      	str	r5, [r3, #40]	; 0x28
     428:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     42a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     42c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
     430:	f040 0004 	orr.w	r0, r0, #4
     434:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     438:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     43a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     43e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     442:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     446:	f44f 7100 	mov.w	r1, #512	; 0x200
     44a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     44c:	4819      	ldr	r0, [pc, #100]	; (4b4 <intializeSensorSelectLines+0x180>)
     44e:	6298      	str	r0, [r3, #40]	; 0x28
     450:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     452:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     454:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
     458:	f040 0004 	orr.w	r0, r0, #4
     45c:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     460:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     462:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     466:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     46a:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     46e:	f44f 7180 	mov.w	r1, #256	; 0x100
     472:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     474:	4810      	ldr	r0, [pc, #64]	; (4b8 <intializeSensorSelectLines+0x184>)
     476:	6298      	str	r0, [r3, #40]	; 0x28
     478:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     47a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     47c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     480:	f042 0204 	orr.w	r2, r2, #4
     484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     488:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     48a:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     48e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     492:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	gpio_set_pin_function(SELECT_6, GPIO_PIN_FUNCTION_OFF);		
	
	gpio_set_pin_direction(SELECT_7, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(SELECT_7,GPIO_PULL_UP);
	gpio_set_pin_function(SELECT_7, GPIO_PIN_FUNCTION_OFF);	
}
     496:	bc70      	pop	{r4, r5, r6}
     498:	4770      	bx	lr
     49a:	bf00      	nop
     49c:	41008000 	.word	0x41008000
     4a0:	40022000 	.word	0x40022000
     4a4:	c0020000 	.word	0xc0020000
     4a8:	40021000 	.word	0x40021000
     4ac:	40020800 	.word	0x40020800
     4b0:	40020400 	.word	0x40020400
     4b4:	40020200 	.word	0x40020200
     4b8:	40020100 	.word	0x40020100

000004bc <sensorAdcInitialize>:
#include "Application/SensorAdcInputs/include/SensorAdcInputs.h"
#include "Application/Common/Common.h"
#include <hpl_adc_config.h>

void sensorAdcInitialize(void)
{
     4bc:	b508      	push	{r3, lr}
	ADC_0_init();
     4be:	4b01      	ldr	r3, [pc, #4]	; (4c4 <sensorAdcInitialize+0x8>)
     4c0:	4798      	blx	r3
     4c2:	bd08      	pop	{r3, pc}
     4c4:	00002a45 	.word	0x00002a45

000004c8 <sensorTaskSchedule>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void sensorTaskSchedule(void)
{
     4c8:	b530      	push	{r4, r5, lr}
     4ca:	b083      	sub	sp, #12
	BaseType_t xResult;
	static SENSOR_INDEX_T sensorIndex = SENSOR_0;
	SENSOR_DATA_REQUEST_TYPE request;
	const TickType_t xSensorScanTriggerWaitMs = pdMS_TO_TICKS(500UL);

	switch(sensorMainState)
     4cc:	4b29      	ldr	r3, [pc, #164]	; (574 <sensorTaskSchedule+0xac>)
     4ce:	781b      	ldrb	r3, [r3, #0]
     4d0:	b11b      	cbz	r3, 4da <sensorTaskSchedule+0x12>
     4d2:	2b01      	cmp	r3, #1
     4d4:	d010      	beq.n	4f8 <sensorTaskSchedule+0x30>
		break;

		default:
		break;
	}
}
     4d6:	b003      	add	sp, #12
     4d8:	bd30      	pop	{r4, r5, pc}
			xResult = xSemaphoreTake(SensorScanSemaphore, xSensorScanTriggerWaitMs);
     4da:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     4de:	4b26      	ldr	r3, [pc, #152]	; (578 <sensorTaskSchedule+0xb0>)
     4e0:	6818      	ldr	r0, [r3, #0]
     4e2:	4b26      	ldr	r3, [pc, #152]	; (57c <sensorTaskSchedule+0xb4>)
     4e4:	4798      	blx	r3
			if(xResult == pdPASS)
     4e6:	2801      	cmp	r0, #1
     4e8:	d1f5      	bne.n	4d6 <sensorTaskSchedule+0xe>
				sensorMainState = SCAN_ALL_OF_THE_SENSOR_SELECT_LINES;
     4ea:	2201      	movs	r2, #1
     4ec:	4b21      	ldr	r3, [pc, #132]	; (574 <sensorTaskSchedule+0xac>)
     4ee:	701a      	strb	r2, [r3, #0]
				DEBUG_PRINT("Notification received in Sensor task");
     4f0:	4823      	ldr	r0, [pc, #140]	; (580 <sensorTaskSchedule+0xb8>)
     4f2:	4b24      	ldr	r3, [pc, #144]	; (584 <sensorTaskSchedule+0xbc>)
     4f4:	4798      	blx	r3
     4f6:	e7ee      	b.n	4d6 <sensorTaskSchedule+0xe>
			if(gpio_get_pin_level(sensorInputData[sensorIndex].selectLine) == false)
     4f8:	4b1e      	ldr	r3, [pc, #120]	; (574 <sensorTaskSchedule+0xac>)
     4fa:	7d1a      	ldrb	r2, [r3, #20]
     4fc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
     500:	791d      	ldrb	r5, [r3, #4]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     502:	a801      	add	r0, sp, #4
     504:	4b20      	ldr	r3, [pc, #128]	; (588 <sensorTaskSchedule+0xc0>)
     506:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     508:	096b      	lsrs	r3, r5, #5
     50a:	4920      	ldr	r1, [pc, #128]	; (58c <sensorTaskSchedule+0xc4>)
     50c:	01db      	lsls	r3, r3, #7
     50e:	18ca      	adds	r2, r1, r3
     510:	58c9      	ldr	r1, [r1, r3]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     512:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     514:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     516:	405c      	eors	r4, r3
     518:	400c      	ands	r4, r1
     51a:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     51c:	a801      	add	r0, sp, #4
     51e:	4b1c      	ldr	r3, [pc, #112]	; (590 <sensorTaskSchedule+0xc8>)
     520:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     522:	f005 051f 	and.w	r5, r5, #31
     526:	2301      	movs	r3, #1
     528:	fa03 f505 	lsl.w	r5, r3, r5
     52c:	4225      	tst	r5, r4
     52e:	d10e      	bne.n	54e <sensorTaskSchedule+0x86>
				DEBUG_PRINT("Select Line Low");
     530:	4818      	ldr	r0, [pc, #96]	; (594 <sensorTaskSchedule+0xcc>)
     532:	4b14      	ldr	r3, [pc, #80]	; (584 <sensorTaskSchedule+0xbc>)
     534:	4798      	blx	r3
				sensorIndex++;
     536:	4a0f      	ldr	r2, [pc, #60]	; (574 <sensorTaskSchedule+0xac>)
     538:	7d13      	ldrb	r3, [r2, #20]
     53a:	3301      	adds	r3, #1
     53c:	b2db      	uxtb	r3, r3
     53e:	7513      	strb	r3, [r2, #20]
				if(sensorIndex >= MAX_SENSOR_COUNT)
     540:	2b07      	cmp	r3, #7
     542:	d9c8      	bls.n	4d6 <sensorTaskSchedule+0xe>
					sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
     544:	4613      	mov	r3, r2
     546:	2200      	movs	r2, #0
     548:	701a      	strb	r2, [r3, #0]
					sensorIndex = SENSOR_0;
     54a:	751a      	strb	r2, [r3, #20]
     54c:	e7c3      	b.n	4d6 <sensorTaskSchedule+0xe>
				DEBUG_PRINT("Select Line High");
     54e:	4812      	ldr	r0, [pc, #72]	; (598 <sensorTaskSchedule+0xd0>)
     550:	4b0c      	ldr	r3, [pc, #48]	; (584 <sensorTaskSchedule+0xbc>)
     552:	4798      	blx	r3
				sensorIndex++;
     554:	4a07      	ldr	r2, [pc, #28]	; (574 <sensorTaskSchedule+0xac>)
     556:	7d13      	ldrb	r3, [r2, #20]
     558:	3301      	adds	r3, #1
     55a:	b2db      	uxtb	r3, r3
     55c:	7513      	strb	r3, [r2, #20]
				if(sensorIndex >= MAX_SENSOR_COUNT)
     55e:	2b07      	cmp	r3, #7
     560:	d9b9      	bls.n	4d6 <sensorTaskSchedule+0xe>
					DEBUG_PRINT("No Sensors Connected");
     562:	480e      	ldr	r0, [pc, #56]	; (59c <sensorTaskSchedule+0xd4>)
     564:	4b07      	ldr	r3, [pc, #28]	; (584 <sensorTaskSchedule+0xbc>)
     566:	4798      	blx	r3
					sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
     568:	4b02      	ldr	r3, [pc, #8]	; (574 <sensorTaskSchedule+0xac>)
     56a:	2200      	movs	r2, #0
     56c:	701a      	strb	r2, [r3, #0]
					sensorIndex = SENSOR_0;
     56e:	751a      	strb	r2, [r3, #20]
}
     570:	e7b1      	b.n	4d6 <sensorTaskSchedule+0xe>
     572:	bf00      	nop
     574:	200001ac 	.word	0x200001ac
     578:	2000349c 	.word	0x2000349c
     57c:	000057c9 	.word	0x000057c9
     580:	000074fc 	.word	0x000074fc
     584:	000025a9 	.word	0x000025a9
     588:	00003039 	.word	0x00003039
     58c:	41008000 	.word	0x41008000
     590:	00003047 	.word	0x00003047
     594:	00007524 	.word	0x00007524
     598:	00007534 	.word	0x00007534
     59c:	00007548 	.word	0x00007548

000005a0 <SensorTask>:
{
     5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5a4:	b093      	sub	sp, #76	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
     5a6:	4b8f      	ldr	r3, [pc, #572]	; (7e4 <SensorTask+0x244>)
     5a8:	4798      	blx	r3
	intializeSensorSelectLines();
     5aa:	4b8f      	ldr	r3, [pc, #572]	; (7e8 <SensorTask+0x248>)
     5ac:	4798      	blx	r3
	sensorAdcInitialize();
     5ae:	4b8f      	ldr	r3, [pc, #572]	; (7ec <SensorTask+0x24c>)
     5b0:	4798      	blx	r3
     5b2:	4b8f      	ldr	r3, [pc, #572]	; (7f0 <SensorTask+0x250>)
     5b4:	7c1f      	ldrb	r7, [r3, #16]
     5b6:	7c5e      	ldrb	r6, [r3, #17]
     5b8:	7b9a      	ldrb	r2, [r3, #14]
     5ba:	920e      	str	r2, [sp, #56]	; 0x38
     5bc:	7bda      	ldrb	r2, [r3, #15]
     5be:	9210      	str	r2, [sp, #64]	; 0x40
     5c0:	f893 900c 	ldrb.w	r9, [r3, #12]
     5c4:	f893 800d 	ldrb.w	r8, [r3, #13]
     5c8:	f893 b00a 	ldrb.w	fp, [r3, #10]
     5cc:	f893 a00b 	ldrb.w	sl, [r3, #11]
     5d0:	7a1d      	ldrb	r5, [r3, #8]
     5d2:	7a5c      	ldrb	r4, [r3, #9]
     5d4:	f893 c006 	ldrb.w	ip, [r3, #6]
     5d8:	f893 e007 	ldrb.w	lr, [r3, #7]
     5dc:	7918      	ldrb	r0, [r3, #4]
     5de:	795b      	ldrb	r3, [r3, #5]
     5e0:	930c      	str	r3, [sp, #48]	; 0x30
     5e2:	2201      	movs	r2, #1
     5e4:	2300      	movs	r3, #0
     5e6:	930f      	str	r3, [sp, #60]	; 0x3c
     5e8:	930d      	str	r3, [sp, #52]	; 0x34
     5ea:	930b      	str	r3, [sp, #44]	; 0x2c
     5ec:	930a      	str	r3, [sp, #40]	; 0x28
     5ee:	9309      	str	r3, [sp, #36]	; 0x24
     5f0:	9308      	str	r3, [sp, #32]
     5f2:	9307      	str	r3, [sp, #28]
     5f4:	9306      	str	r3, [sp, #24]
     5f6:	9305      	str	r3, [sp, #20]
     5f8:	9304      	str	r3, [sp, #16]
     5fa:	9303      	str	r3, [sp, #12]
     5fc:	9302      	str	r3, [sp, #8]
     5fe:	9301      	str	r3, [sp, #4]
				sensorInputData[SENSOR_1].adcChannel = SENSOR_1_AIN1;
     600:	9200      	str	r2, [sp, #0]
     602:	9311      	str	r3, [sp, #68]	; 0x44
     604:	e007      	b.n	616 <SensorTask+0x76>
     606:	2101      	movs	r1, #1
     608:	910a      	str	r1, [sp, #40]	; 0x28
				sensorInputData[SENSOR_2].adcChannel = SENSOR_2_AIN2;
     60a:	2402      	movs	r4, #2
     60c:	9900      	ldr	r1, [sp, #0]
     60e:	9109      	str	r1, [sp, #36]	; 0x24
				sensorInputData[SENSOR_2].selectLine = SELECT_2;
     610:	252b      	movs	r5, #43	; 0x2b
     612:	3201      	adds	r2, #1
     614:	b2d2      	uxtb	r2, r2
		switch(sensorIndex)
     616:	1e51      	subs	r1, r2, #1
     618:	b2c9      	uxtb	r1, r1
     61a:	2907      	cmp	r1, #7
     61c:	f200 8089 	bhi.w	732 <SensorTask+0x192>
     620:	a301      	add	r3, pc, #4	; (adr r3, 628 <SensorTask+0x88>)
     622:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
     626:	bf00      	nop
     628:	000007c5 	.word	0x000007c5
     62c:	000007d5 	.word	0x000007d5
     630:	00000607 	.word	0x00000607
     634:	00000649 	.word	0x00000649
     638:	0000065b 	.word	0x0000065b
     63c:	0000066d 	.word	0x0000066d
     640:	0000067f 	.word	0x0000067f
     644:	0000068d 	.word	0x0000068d
     648:	2101      	movs	r1, #1
     64a:	9102      	str	r1, [sp, #8]
				sensorInputData[SENSOR_3].adcChannel = SENSOR_3_AIN3;
     64c:	f04f 0a03 	mov.w	sl, #3
     650:	9900      	ldr	r1, [sp, #0]
     652:	9101      	str	r1, [sp, #4]
				sensorInputData[SENSOR_3].selectLine = SELECT_3;
     654:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
     658:	e7db      	b.n	612 <SensorTask+0x72>
     65a:	2101      	movs	r1, #1
     65c:	9104      	str	r1, [sp, #16]
				sensorInputData[SENSOR_4].adcChannel = SENSOR_4_AIN4;
     65e:	f04f 0804 	mov.w	r8, #4
     662:	9900      	ldr	r1, [sp, #0]
     664:	9103      	str	r1, [sp, #12]
				sensorInputData[SENSOR_4].selectLine = SELECT_4;
     666:	f04f 090b 	mov.w	r9, #11
     66a:	e7d2      	b.n	612 <SensorTask+0x72>
     66c:	2301      	movs	r3, #1
     66e:	9311      	str	r3, [sp, #68]	; 0x44
				sensorInputData[SENSOR_5].adcChannel = SENSOR_5_AIN5;
     670:	2105      	movs	r1, #5
     672:	9110      	str	r1, [sp, #64]	; 0x40
     674:	9900      	ldr	r1, [sp, #0]
     676:	910f      	str	r1, [sp, #60]	; 0x3c
				sensorInputData[SENSOR_5].selectLine = SELECT_5;
     678:	210a      	movs	r1, #10
     67a:	910e      	str	r1, [sp, #56]	; 0x38
     67c:	e7c9      	b.n	612 <SensorTask+0x72>
     67e:	2101      	movs	r1, #1
     680:	9108      	str	r1, [sp, #32]
				sensorInputData[SENSOR_6].adcChannel = SENSOR_6_AIN6;
     682:	2606      	movs	r6, #6
     684:	9900      	ldr	r1, [sp, #0]
     686:	9107      	str	r1, [sp, #28]
				sensorInputData[SENSOR_6].selectLine = SELECT_6;
     688:	2709      	movs	r7, #9
     68a:	e7c2      	b.n	612 <SensorTask+0x72>
     68c:	9b11      	ldr	r3, [sp, #68]	; 0x44
     68e:	9a01      	ldr	r2, [sp, #4]
     690:	2a00      	cmp	r2, #0
     692:	d14a      	bne.n	72a <SensorTask+0x18a>
     694:	9a02      	ldr	r2, [sp, #8]
     696:	b112      	cbz	r2, 69e <SensorTask+0xfe>
     698:	4a55      	ldr	r2, [pc, #340]	; (7f0 <SensorTask+0x250>)
     69a:	f882 a00b 	strb.w	sl, [r2, #11]
     69e:	9a03      	ldr	r2, [sp, #12]
     6a0:	b112      	cbz	r2, 6a8 <SensorTask+0x108>
     6a2:	4a53      	ldr	r2, [pc, #332]	; (7f0 <SensorTask+0x250>)
     6a4:	f882 900c 	strb.w	r9, [r2, #12]
     6a8:	9a04      	ldr	r2, [sp, #16]
     6aa:	b112      	cbz	r2, 6b2 <SensorTask+0x112>
     6ac:	4a50      	ldr	r2, [pc, #320]	; (7f0 <SensorTask+0x250>)
     6ae:	f882 800d 	strb.w	r8, [r2, #13]
     6b2:	9a05      	ldr	r2, [sp, #20]
     6b4:	b112      	cbz	r2, 6bc <SensorTask+0x11c>
     6b6:	4a4e      	ldr	r2, [pc, #312]	; (7f0 <SensorTask+0x250>)
     6b8:	f882 c006 	strb.w	ip, [r2, #6]
     6bc:	9a06      	ldr	r2, [sp, #24]
     6be:	b112      	cbz	r2, 6c6 <SensorTask+0x126>
     6c0:	4a4b      	ldr	r2, [pc, #300]	; (7f0 <SensorTask+0x250>)
     6c2:	f882 e007 	strb.w	lr, [r2, #7]
     6c6:	9a07      	ldr	r2, [sp, #28]
     6c8:	b10a      	cbz	r2, 6ce <SensorTask+0x12e>
     6ca:	4a49      	ldr	r2, [pc, #292]	; (7f0 <SensorTask+0x250>)
     6cc:	7417      	strb	r7, [r2, #16]
     6ce:	9a08      	ldr	r2, [sp, #32]
     6d0:	b10a      	cbz	r2, 6d6 <SensorTask+0x136>
     6d2:	4a47      	ldr	r2, [pc, #284]	; (7f0 <SensorTask+0x250>)
     6d4:	7456      	strb	r6, [r2, #17]
     6d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
     6d8:	b10a      	cbz	r2, 6de <SensorTask+0x13e>
     6da:	4a45      	ldr	r2, [pc, #276]	; (7f0 <SensorTask+0x250>)
     6dc:	7215      	strb	r5, [r2, #8]
     6de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     6e0:	b10a      	cbz	r2, 6e6 <SensorTask+0x146>
     6e2:	4a43      	ldr	r2, [pc, #268]	; (7f0 <SensorTask+0x250>)
     6e4:	7254      	strb	r4, [r2, #9]
     6e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     6e8:	b10a      	cbz	r2, 6ee <SensorTask+0x14e>
     6ea:	4a41      	ldr	r2, [pc, #260]	; (7f0 <SensorTask+0x250>)
     6ec:	7110      	strb	r0, [r2, #4]
     6ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     6f0:	b11a      	cbz	r2, 6fa <SensorTask+0x15a>
     6f2:	4a3f      	ldr	r2, [pc, #252]	; (7f0 <SensorTask+0x250>)
     6f4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
     6f8:	7151      	strb	r1, [r2, #5]
     6fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     6fc:	b11a      	cbz	r2, 706 <SensorTask+0x166>
     6fe:	4a3c      	ldr	r2, [pc, #240]	; (7f0 <SensorTask+0x250>)
     700:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
     704:	7391      	strb	r1, [r2, #14]
     706:	b11b      	cbz	r3, 710 <SensorTask+0x170>
     708:	4b39      	ldr	r3, [pc, #228]	; (7f0 <SensorTask+0x250>)
     70a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     70e:	73da      	strb	r2, [r3, #15]
				sensorInputData[SENSOR_7].selectLine = SELECT_7;
     710:	4b37      	ldr	r3, [pc, #220]	; (7f0 <SensorTask+0x250>)
     712:	2208      	movs	r2, #8
     714:	749a      	strb	r2, [r3, #18]
				sensorInputData[SENSOR_7].adcChannel = SENSOR_7_AIN7;
     716:	2207      	movs	r2, #7
     718:	74da      	strb	r2, [r3, #19]
	sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
     71a:	2200      	movs	r2, #0
     71c:	4b34      	ldr	r3, [pc, #208]	; (7f0 <SensorTask+0x250>)
     71e:	701a      	strb	r2, [r3, #0]
		sensorTaskSchedule();
     720:	4d34      	ldr	r5, [pc, #208]	; (7f4 <SensorTask+0x254>)
		kickWatchDog();
     722:	4c35      	ldr	r4, [pc, #212]	; (7f8 <SensorTask+0x258>)
		sensorTaskSchedule();
     724:	47a8      	blx	r5
		kickWatchDog();
     726:	47a0      	blx	r4
     728:	e7fc      	b.n	724 <SensorTask+0x184>
     72a:	4a31      	ldr	r2, [pc, #196]	; (7f0 <SensorTask+0x250>)
     72c:	f882 b00a 	strb.w	fp, [r2, #10]
     730:	e7b0      	b.n	694 <SensorTask+0xf4>
	for(sensorIndex = SENSOR_0; sensorIndex < MAX_SENSOR_COUNT; sensorIndex++)
     732:	2a07      	cmp	r2, #7
     734:	f67f af6d 	bls.w	612 <SensorTask+0x72>
     738:	9b11      	ldr	r3, [sp, #68]	; 0x44
     73a:	9a01      	ldr	r2, [sp, #4]
     73c:	b112      	cbz	r2, 744 <SensorTask+0x1a4>
     73e:	4a2c      	ldr	r2, [pc, #176]	; (7f0 <SensorTask+0x250>)
     740:	f882 b00a 	strb.w	fp, [r2, #10]
     744:	9a02      	ldr	r2, [sp, #8]
     746:	b112      	cbz	r2, 74e <SensorTask+0x1ae>
     748:	4a29      	ldr	r2, [pc, #164]	; (7f0 <SensorTask+0x250>)
     74a:	f882 a00b 	strb.w	sl, [r2, #11]
     74e:	9a03      	ldr	r2, [sp, #12]
     750:	b112      	cbz	r2, 758 <SensorTask+0x1b8>
     752:	4a27      	ldr	r2, [pc, #156]	; (7f0 <SensorTask+0x250>)
     754:	f882 900c 	strb.w	r9, [r2, #12]
     758:	9a04      	ldr	r2, [sp, #16]
     75a:	b112      	cbz	r2, 762 <SensorTask+0x1c2>
     75c:	4a24      	ldr	r2, [pc, #144]	; (7f0 <SensorTask+0x250>)
     75e:	f882 800d 	strb.w	r8, [r2, #13]
     762:	9a05      	ldr	r2, [sp, #20]
     764:	b112      	cbz	r2, 76c <SensorTask+0x1cc>
     766:	4a22      	ldr	r2, [pc, #136]	; (7f0 <SensorTask+0x250>)
     768:	f882 c006 	strb.w	ip, [r2, #6]
     76c:	9a06      	ldr	r2, [sp, #24]
     76e:	b112      	cbz	r2, 776 <SensorTask+0x1d6>
     770:	4a1f      	ldr	r2, [pc, #124]	; (7f0 <SensorTask+0x250>)
     772:	f882 e007 	strb.w	lr, [r2, #7]
     776:	9a07      	ldr	r2, [sp, #28]
     778:	b10a      	cbz	r2, 77e <SensorTask+0x1de>
     77a:	4a1d      	ldr	r2, [pc, #116]	; (7f0 <SensorTask+0x250>)
     77c:	7417      	strb	r7, [r2, #16]
     77e:	9a08      	ldr	r2, [sp, #32]
     780:	b10a      	cbz	r2, 786 <SensorTask+0x1e6>
     782:	4a1b      	ldr	r2, [pc, #108]	; (7f0 <SensorTask+0x250>)
     784:	7456      	strb	r6, [r2, #17]
     786:	9a09      	ldr	r2, [sp, #36]	; 0x24
     788:	b10a      	cbz	r2, 78e <SensorTask+0x1ee>
     78a:	4a19      	ldr	r2, [pc, #100]	; (7f0 <SensorTask+0x250>)
     78c:	7215      	strb	r5, [r2, #8]
     78e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     790:	b10a      	cbz	r2, 796 <SensorTask+0x1f6>
     792:	4a17      	ldr	r2, [pc, #92]	; (7f0 <SensorTask+0x250>)
     794:	7254      	strb	r4, [r2, #9]
     796:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     798:	b10a      	cbz	r2, 79e <SensorTask+0x1fe>
     79a:	4a15      	ldr	r2, [pc, #84]	; (7f0 <SensorTask+0x250>)
     79c:	7110      	strb	r0, [r2, #4]
     79e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     7a0:	b11a      	cbz	r2, 7aa <SensorTask+0x20a>
     7a2:	4a13      	ldr	r2, [pc, #76]	; (7f0 <SensorTask+0x250>)
     7a4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
     7a8:	7151      	strb	r1, [r2, #5]
     7aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     7ac:	b11a      	cbz	r2, 7b6 <SensorTask+0x216>
     7ae:	4a10      	ldr	r2, [pc, #64]	; (7f0 <SensorTask+0x250>)
     7b0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
     7b4:	7391      	strb	r1, [r2, #14]
     7b6:	2b00      	cmp	r3, #0
     7b8:	d0af      	beq.n	71a <SensorTask+0x17a>
     7ba:	4b0d      	ldr	r3, [pc, #52]	; (7f0 <SensorTask+0x250>)
     7bc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     7c0:	73da      	strb	r2, [r3, #15]
     7c2:	e7aa      	b.n	71a <SensorTask+0x17a>
		switch(sensorIndex)
     7c4:	2101      	movs	r1, #1
     7c6:	910d      	str	r1, [sp, #52]	; 0x34
				sensorInputData[SENSOR_0].adcChannel = SENSOR_0_AIN0;
     7c8:	2100      	movs	r1, #0
     7ca:	910c      	str	r1, [sp, #48]	; 0x30
		switch(sensorIndex)
     7cc:	9900      	ldr	r1, [sp, #0]
     7ce:	910b      	str	r1, [sp, #44]	; 0x2c
				sensorInputData[SENSOR_0].selectLine = SELECT_0;
     7d0:	202d      	movs	r0, #45	; 0x2d
     7d2:	e71e      	b.n	612 <SensorTask+0x72>
		switch(sensorIndex)
     7d4:	2101      	movs	r1, #1
     7d6:	9106      	str	r1, [sp, #24]
				sensorInputData[SENSOR_1].adcChannel = SENSOR_1_AIN1;
     7d8:	9900      	ldr	r1, [sp, #0]
     7da:	468e      	mov	lr, r1
		switch(sensorIndex)
     7dc:	9105      	str	r1, [sp, #20]
				sensorInputData[SENSOR_1].selectLine = SELECT_1;
     7de:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
     7e2:	e716      	b.n	612 <SensorTask+0x72>
     7e4:	00005d81 	.word	0x00005d81
     7e8:	00000335 	.word	0x00000335
     7ec:	000004bd 	.word	0x000004bd
     7f0:	200001ac 	.word	0x200001ac
     7f4:	000004c9 	.word	0x000004c9
     7f8:	0000272d 	.word	0x0000272d

000007fc <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     7fc:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     7fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     802:	460d      	mov	r5, r1
     804:	4c04      	ldr	r4, [pc, #16]	; (818 <getModemCommandData+0x1c>)
     806:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     80a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     80c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     80e:	6823      	ldr	r3, [r4, #0]
     810:	602b      	str	r3, [r5, #0]
}
     812:	bc30      	pop	{r4, r5}
     814:	4770      	bx	lr
     816:	bf00      	nop
     818:	00007560 	.word	0x00007560

0000081c <buildHttpHeaderWithActiveSessionID>:
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildHttpHeaderWithActiveSessionID(const uint8_t* activeSessionId)
{
	switch (*activeSessionId)
     81c:	7803      	ldrb	r3, [r0, #0]
     81e:	3b31      	subs	r3, #49	; 0x31
     820:	2b08      	cmp	r3, #8
     822:	d83b      	bhi.n	89c <buildHttpHeaderWithActiveSessionID+0x80>
     824:	e8df f003 	tbb	[pc, r3]
     828:	17110b05 	.word	0x17110b05
     82c:	2f29231d 	.word	0x2f29231d
     830:	35          	.byte	0x35
     831:	00          	.byte	0x00
	{
		case SESSION_ID_1:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '1';
     832:	4b1b      	ldr	r3, [pc, #108]	; (8a0 <buildHttpHeaderWithActiveSessionID+0x84>)
     834:	2231      	movs	r2, #49	; 0x31
     836:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '1';
     838:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     83c:	4770      	bx	lr

		case SESSION_ID_2:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '2';
     83e:	4b18      	ldr	r3, [pc, #96]	; (8a0 <buildHttpHeaderWithActiveSessionID+0x84>)
     840:	2232      	movs	r2, #50	; 0x32
     842:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '2';
     844:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     848:	4770      	bx	lr

		case SESSION_ID_3:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '3';
     84a:	4b15      	ldr	r3, [pc, #84]	; (8a0 <buildHttpHeaderWithActiveSessionID+0x84>)
     84c:	2233      	movs	r2, #51	; 0x33
     84e:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '3';
     850:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     854:	4770      	bx	lr

		case SESSION_ID_4:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '4';
     856:	4b12      	ldr	r3, [pc, #72]	; (8a0 <buildHttpHeaderWithActiveSessionID+0x84>)
     858:	2234      	movs	r2, #52	; 0x34
     85a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '4';
     85c:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     860:	4770      	bx	lr

		case SESSION_ID_5:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '5';
     862:	4b0f      	ldr	r3, [pc, #60]	; (8a0 <buildHttpHeaderWithActiveSessionID+0x84>)
     864:	2235      	movs	r2, #53	; 0x35
     866:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '5';
     868:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     86c:	4770      	bx	lr

		case SESSION_ID_6:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '6';
     86e:	4b0c      	ldr	r3, [pc, #48]	; (8a0 <buildHttpHeaderWithActiveSessionID+0x84>)
     870:	2236      	movs	r2, #54	; 0x36
     872:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '6';
     874:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     878:	4770      	bx	lr

		case SESSION_ID_7:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '7';
     87a:	4b09      	ldr	r3, [pc, #36]	; (8a0 <buildHttpHeaderWithActiveSessionID+0x84>)
     87c:	2237      	movs	r2, #55	; 0x37
     87e:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '7';
     880:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     884:	4770      	bx	lr

		case SESSION_ID_8:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '8';
     886:	4b06      	ldr	r3, [pc, #24]	; (8a0 <buildHttpHeaderWithActiveSessionID+0x84>)
     888:	2238      	movs	r2, #56	; 0x38
     88a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '8';
     88c:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     890:	4770      	bx	lr

		case SESSION_ID_9:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '9';
     892:	4b03      	ldr	r3, [pc, #12]	; (8a0 <buildHttpHeaderWithActiveSessionID+0x84>)
     894:	2239      	movs	r2, #57	; 0x39
     896:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '9';
     898:	f883 2020 	strb.w	r2, [r3, #32]
     89c:	4770      	bx	lr
     89e:	bf00      	nop
     8a0:	20000000 	.word	0x20000000

000008a4 <buildDataPacketsToServer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildDataPacketsToServer(void)
{
     8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	strncpy(kHttpGetCompleteData,kHttpGetString,15);
     8a6:	4c0f      	ldr	r4, [pc, #60]	; (8e4 <buildDataPacketsToServer+0x40>)
     8a8:	220f      	movs	r2, #15
     8aa:	490f      	ldr	r1, [pc, #60]	; (8e8 <buildDataPacketsToServer+0x44>)
     8ac:	4620      	mov	r0, r4
     8ae:	4b0f      	ldr	r3, [pc, #60]	; (8ec <buildDataPacketsToServer+0x48>)
     8b0:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
     8b2:	4620      	mov	r0, r4
     8b4:	4b0e      	ldr	r3, [pc, #56]	; (8f0 <buildDataPacketsToServer+0x4c>)
     8b6:	4798      	blx	r3
     8b8:	4d0e      	ldr	r5, [pc, #56]	; (8f4 <buildDataPacketsToServer+0x50>)
     8ba:	4404      	add	r4, r0
     8bc:	f105 0720 	add.w	r7, r5, #32
     8c0:	462e      	mov	r6, r5
     8c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     8c4:	6020      	str	r0, [r4, #0]
     8c6:	6061      	str	r1, [r4, #4]
     8c8:	60a2      	str	r2, [r4, #8]
     8ca:	60e3      	str	r3, [r4, #12]
     8cc:	4635      	mov	r5, r6
     8ce:	3410      	adds	r4, #16
     8d0:	42be      	cmp	r6, r7
     8d2:	d1f5      	bne.n	8c0 <buildDataPacketsToServer+0x1c>
     8d4:	cd07      	ldmia	r5!, {r0, r1, r2}
     8d6:	6020      	str	r0, [r4, #0]
     8d8:	6061      	str	r1, [r4, #4]
     8da:	60a2      	str	r2, [r4, #8]
     8dc:	782b      	ldrb	r3, [r5, #0]
     8de:	7323      	strb	r3, [r4, #12]
     8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8e2:	bf00      	nop
     8e4:	200001c4 	.word	0x200001c4
     8e8:	20000014 	.word	0x20000014
     8ec:	00006d79 	.word	0x00006d79
     8f0:	00006d45 	.word	0x00006d45
     8f4:	00007a10 	.word	0x00007a10

000008f8 <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
     8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8fa:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
     8fc:	a901      	add	r1, sp, #4
     8fe:	4b2d      	ldr	r3, [pc, #180]	; (9b4 <mdmParser_solicitedCmdParser+0xbc>)
     900:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     902:	f89d 700c 	ldrb.w	r7, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
     906:	f8bd 0014 	ldrh.w	r0, [sp, #20]
     90a:	4b2b      	ldr	r3, [pc, #172]	; (9b8 <mdmParser_solicitedCmdParser+0xc0>)
     90c:	4798      	blx	r3

	if(responseBuffer != NULL)
     90e:	2800      	cmp	r0, #0
     910:	d04a      	beq.n	9a8 <mdmParser_solicitedCmdParser+0xb0>
     912:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
     914:	f8bd 1014 	ldrh.w	r1, [sp, #20]
     918:	4b28      	ldr	r3, [pc, #160]	; (9bc <mdmParser_solicitedCmdParser+0xc4>)
     91a:	4798      	blx	r3

		if(readStatus != false)
     91c:	4606      	mov	r6, r0
     91e:	2800      	cmp	r0, #0
     920:	d03e      	beq.n	9a0 <mdmParser_solicitedCmdParser+0xa8>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
     922:	f89d 200c 	ldrb.w	r2, [sp, #12]
     926:	4621      	mov	r1, r4
     928:	9802      	ldr	r0, [sp, #8]
     92a:	4b25      	ldr	r3, [pc, #148]	; (9c0 <mdmParser_solicitedCmdParser+0xc8>)
     92c:	4798      	blx	r3
     92e:	bb58      	cbnz	r0, 988 <mdmParser_solicitedCmdParser+0x90>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
     930:	f8bd 000e 	ldrh.w	r0, [sp, #14]
     934:	3001      	adds	r0, #1
     936:	4b20      	ldr	r3, [pc, #128]	; (9b8 <mdmParser_solicitedCmdParser+0xc0>)
     938:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
     93a:	4605      	mov	r5, r0
     93c:	b1f8      	cbz	r0, 97e <mdmParser_solicitedCmdParser+0x86>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
     93e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
     942:	b1d3      	cbz	r3, 97a <mdmParser_solicitedCmdParser+0x82>
     944:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     946:	1cb9      	adds	r1, r7, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
     948:	b2c9      	uxtb	r1, r1
     94a:	18e2      	adds	r2, r4, r3
     94c:	5c52      	ldrb	r2, [r2, r1]
     94e:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
     950:	3301      	adds	r3, #1
     952:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
     954:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     958:	429a      	cmp	r2, r3
     95a:	d8f6      	bhi.n	94a <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
     95c:	2200      	movs	r2, #0
     95e:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt+1);
     960:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     964:	3201      	adds	r2, #1
     966:	b292      	uxth	r2, r2
     968:	4629      	mov	r1, r5
     96a:	f89d 0004 	ldrb.w	r0, [sp, #4]
     96e:	9b04      	ldr	r3, [sp, #16]
     970:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
     972:	4628      	mov	r0, r5
     974:	4b13      	ldr	r3, [pc, #76]	; (9c4 <mdmParser_solicitedCmdParser+0xcc>)
     976:	4798      	blx	r3
     978:	e00a      	b.n	990 <mdmParser_solicitedCmdParser+0x98>
					while(parseCnt < cmdData.validDataCnt)
     97a:	2300      	movs	r3, #0
     97c:	e7ee      	b.n	95c <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
     97e:	4812      	ldr	r0, [pc, #72]	; (9c8 <mdmParser_solicitedCmdParser+0xd0>)
     980:	4b12      	ldr	r3, [pc, #72]	; (9cc <mdmParser_solicitedCmdParser+0xd4>)
     982:	4798      	blx	r3
	bool parseStatus = false;
     984:	2600      	movs	r6, #0
     986:	e003      	b.n	990 <mdmParser_solicitedCmdParser+0x98>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
     988:	4811      	ldr	r0, [pc, #68]	; (9d0 <mdmParser_solicitedCmdParser+0xd8>)
     98a:	4b10      	ldr	r3, [pc, #64]	; (9cc <mdmParser_solicitedCmdParser+0xd4>)
     98c:	4798      	blx	r3
				parseStatus = false;
     98e:	2600      	movs	r6, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
     990:	4620      	mov	r0, r4
     992:	4b0c      	ldr	r3, [pc, #48]	; (9c4 <mdmParser_solicitedCmdParser+0xcc>)
     994:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
     996:	4b0f      	ldr	r3, [pc, #60]	; (9d4 <mdmParser_solicitedCmdParser+0xdc>)
     998:	4798      	blx	r3

	return parseStatus;
}
     99a:	4630      	mov	r0, r6
     99c:	b007      	add	sp, #28
     99e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
     9a0:	480d      	ldr	r0, [pc, #52]	; (9d8 <mdmParser_solicitedCmdParser+0xe0>)
     9a2:	4b0a      	ldr	r3, [pc, #40]	; (9cc <mdmParser_solicitedCmdParser+0xd4>)
     9a4:	4798      	blx	r3
     9a6:	e7f3      	b.n	990 <mdmParser_solicitedCmdParser+0x98>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
     9a8:	480c      	ldr	r0, [pc, #48]	; (9dc <mdmParser_solicitedCmdParser+0xe4>)
     9aa:	4b08      	ldr	r3, [pc, #32]	; (9cc <mdmParser_solicitedCmdParser+0xd4>)
     9ac:	4798      	blx	r3
	bool parseStatus = false;
     9ae:	2600      	movs	r6, #0
     9b0:	e7f1      	b.n	996 <mdmParser_solicitedCmdParser+0x9e>
     9b2:	bf00      	nop
     9b4:	000007fd 	.word	0x000007fd
     9b8:	00004f35 	.word	0x00004f35
     9bc:	00001cf5 	.word	0x00001cf5
     9c0:	00006d55 	.word	0x00006d55
     9c4:	00005009 	.word	0x00005009
     9c8:	00007c1c 	.word	0x00007c1c
     9cc:	000025a9 	.word	0x000025a9
     9d0:	00007c50 	.word	0x00007c50
     9d4:	00001d49 	.word	0x00001d49
     9d8:	00007c8c 	.word	0x00007c8c
     9dc:	00007cd0 	.word	0x00007cd0

000009e0 <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     9e0:	4b01      	ldr	r3, [pc, #4]	; (9e8 <mdmParser_SetLastCmdProcessed+0x8>)
     9e2:	7018      	strb	r0, [r3, #0]
     9e4:	4770      	bx	lr
     9e6:	bf00      	nop
     9e8:	20000023 	.word	0x20000023

000009ec <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     9ec:	4b01      	ldr	r3, [pc, #4]	; (9f4 <mdmParser_SetLastSentAtCommand+0x8>)
     9ee:	7018      	strb	r0, [r3, #0]
     9f0:	4770      	bx	lr
     9f2:	bf00      	nop
     9f4:	20000200 	.word	0x20000200

000009f8 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     9f8:	4b01      	ldr	r3, [pc, #4]	; (a00 <mdmParser_GetLastSentAtCommand+0x8>)
     9fa:	7818      	ldrb	r0, [r3, #0]
     9fc:	4770      	bx	lr
     9fe:	bf00      	nop
     a00:	20000200 	.word	0x20000200

00000a04 <getCloseActiveSessionCmd>:
**===========================================================================*/
static AT_CMD_TYPE getCloseActiveSessionCmd(uint8_t sessionID)
{
    AT_CMD_TYPE sessionCloseCmd;

    switch(sessionID)
     a04:	3801      	subs	r0, #1
     a06:	2809      	cmp	r0, #9
     a08:	d81a      	bhi.n	a40 <getCloseActiveSessionCmd+0x3c>
     a0a:	e8df f000 	tbb	[pc, r0]
     a0e:	0705      	.short	0x0705
     a10:	0f0d0b09 	.word	0x0f0d0b09
     a14:	17151311 	.word	0x17151311
    {
        case 1:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_1;
     a18:	200a      	movs	r0, #10
     a1a:	4770      	bx	lr
        }
        break;

        case 2:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_2;
     a1c:	200b      	movs	r0, #11
        }
        break;
     a1e:	4770      	bx	lr

        case 3:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_3;
     a20:	200c      	movs	r0, #12
        }
        break;
     a22:	4770      	bx	lr

        case 4:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_4;
     a24:	200d      	movs	r0, #13
        }
        break;
     a26:	4770      	bx	lr

        case 5:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_5;
     a28:	200e      	movs	r0, #14
        }
        break;
     a2a:	4770      	bx	lr

        case 6:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_6;
     a2c:	200f      	movs	r0, #15
        }
        break;
     a2e:	4770      	bx	lr

        case 7:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_7;
     a30:	2010      	movs	r0, #16
        }
        break;
     a32:	4770      	bx	lr

        case 8:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_8;
     a34:	2011      	movs	r0, #17
        }
        break;
     a36:	4770      	bx	lr

        case 9:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_9;
     a38:	2012      	movs	r0, #18
        }
        break;
     a3a:	4770      	bx	lr

        case 10:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_10;
     a3c:	2013      	movs	r0, #19
        }
        break;
     a3e:	4770      	bx	lr
    switch(sessionID)
     a40:	2000      	movs	r0, #0
        default:
        break;
    }
    
    return sessionCloseCmd;
}
     a42:	4770      	bx	lr

00000a44 <validateCommonCommandResponse>:
{
     a44:	b508      	push	{r3, lr}
    if(0==memcmp(response,"OK",2))
     a46:	2202      	movs	r2, #2
     a48:	4903      	ldr	r1, [pc, #12]	; (a58 <validateCommonCommandResponse+0x14>)
     a4a:	4b04      	ldr	r3, [pc, #16]	; (a5c <validateCommonCommandResponse+0x18>)
     a4c:	4798      	blx	r3
}
     a4e:	fab0 f080 	clz	r0, r0
     a52:	0940      	lsrs	r0, r0, #5
     a54:	bd08      	pop	{r3, pc}
     a56:	bf00      	nop
     a58:	00007d08 	.word	0x00007d08
     a5c:	00006afd 	.word	0x00006afd

00000a60 <MdmConnect_HttpConnectionInit>:
    gHttpConnectionState = MDM_HTTP_DISCONNECTED;
     a60:	4b07      	ldr	r3, [pc, #28]	; (a80 <MdmConnect_HttpConnectionInit+0x20>)
     a62:	2200      	movs	r2, #0
     a64:	701a      	strb	r2, [r3, #0]
    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     a66:	705a      	strb	r2, [r3, #1]
    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     a68:	709a      	strb	r2, [r3, #2]
    gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
     a6a:	70da      	strb	r2, [r3, #3]
    gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
     a6c:	711a      	strb	r2, [r3, #4]
    sessionIdCount = 5;
     a6e:	2105      	movs	r1, #5
     a70:	7159      	strb	r1, [r3, #5]
    ConnectionResponse.atCmd = CMD_AT_MAX;
     a72:	721a      	strb	r2, [r3, #8]
    ConnectionResponse.length = 0;
     a74:	815a      	strh	r2, [r3, #10]
    ConnectionResponse.response = NULL;
     a76:	60da      	str	r2, [r3, #12]
    currentSessionId = '0';
     a78:	2230      	movs	r2, #48	; 0x30
     a7a:	741a      	strb	r2, [r3, #16]
     a7c:	4770      	bx	lr
     a7e:	bf00      	nop
     a80:	20000204 	.word	0x20000204

00000a84 <performForcedRebootOfModem>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
static void performForcedRebootOfModem(void)
{
     a84:	b510      	push	{r4, lr}
	DEBUG_PRINT("Connection to the server is lost.....");
     a86:	4805      	ldr	r0, [pc, #20]	; (a9c <performForcedRebootOfModem+0x18>)
     a88:	4c05      	ldr	r4, [pc, #20]	; (aa0 <performForcedRebootOfModem+0x1c>)
     a8a:	47a0      	blx	r4
	DEBUG_PRINT("Trying to establish the connection to server...Please wait......\r\n");
     a8c:	4805      	ldr	r0, [pc, #20]	; (aa4 <performForcedRebootOfModem+0x20>)
     a8e:	47a0      	blx	r4

	/* Perform a physical modem restart */
	modemPowerStateInit();
     a90:	4b05      	ldr	r3, [pc, #20]	; (aa8 <performForcedRebootOfModem+0x24>)
     a92:	4798      	blx	r3

	/* Reset the modem connection States */
	MdmConnect_HttpConnectionInit();
     a94:	4b05      	ldr	r3, [pc, #20]	; (aac <performForcedRebootOfModem+0x28>)
     a96:	4798      	blx	r3
     a98:	bd10      	pop	{r4, pc}
     a9a:	bf00      	nop
     a9c:	00007d0c 	.word	0x00007d0c
     aa0:	000025a9 	.word	0x000025a9
     aa4:	00007d34 	.word	0x00007d34
     aa8:	00002009 	.word	0x00002009
     aac:	00000a61 	.word	0x00000a61

00000ab0 <MdmCnct_ConnectInProgressSubStateMachine>:
{
     ab0:	b570      	push	{r4, r5, r6, lr}
     ab2:	b082      	sub	sp, #8
    switch (gHttpConnectionInProgressSubstate)
     ab4:	4b87      	ldr	r3, [pc, #540]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     ab6:	785b      	ldrb	r3, [r3, #1]
     ab8:	2b07      	cmp	r3, #7
     aba:	f200 8092 	bhi.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
     abe:	e8df f013 	tbh	[pc, r3, lsl #1]
     ac2:	0008      	.short	0x0008
     ac4:	013b008b 	.word	0x013b008b
     ac8:	022d01c1 	.word	0x022d01c1
     acc:	033802cc 	.word	0x033802cc
     ad0:	0410      	.short	0x0410
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     ad2:	4b80      	ldr	r3, [pc, #512]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     ad4:	789b      	ldrb	r3, [r3, #2]
     ad6:	2b00      	cmp	r3, #0
     ad8:	d14d      	bne.n	b76 <MdmCnct_ConnectInProgressSubStateMachine+0xc6>
                if(sessionIdCount > 0)
     ada:	4b7e      	ldr	r3, [pc, #504]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     adc:	795b      	ldrb	r3, [r3, #5]
     ade:	2b00      	cmp	r3, #0
     ae0:	d03e      	beq.n	b60 <MdmCnct_ConnectInProgressSubStateMachine+0xb0>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     ae2:	4b7d      	ldr	r3, [pc, #500]	; (cd8 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
     ae4:	6818      	ldr	r0, [r3, #0]
     ae6:	4b7d      	ldr	r3, [pc, #500]	; (cdc <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
     ae8:	4798      	blx	r3
     aea:	2800      	cmp	r0, #0
     aec:	d134      	bne.n	b58 <MdmCnct_ConnectInProgressSubStateMachine+0xa8>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     aee:	2100      	movs	r1, #0
     af0:	4b7b      	ldr	r3, [pc, #492]	; (ce0 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     af2:	6818      	ldr	r0, [r3, #0]
     af4:	4b7b      	ldr	r3, [pc, #492]	; (ce4 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
     af6:	4798      	blx	r3
     af8:	2801      	cmp	r0, #1
     afa:	d003      	beq.n	b04 <MdmCnct_ConnectInProgressSubStateMachine+0x54>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     afc:	487a      	ldr	r0, [pc, #488]	; (ce8 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     afe:	4b7b      	ldr	r3, [pc, #492]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     b00:	4798      	blx	r3
     b02:	e06e      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     b04:	2301      	movs	r3, #1
     b06:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
     b0a:	4b72      	ldr	r3, [pc, #456]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     b0c:	7958      	ldrb	r0, [r3, #5]
     b0e:	4b78      	ldr	r3, [pc, #480]	; (cf0 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     b10:	4798      	blx	r3
     b12:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
     b16:	2300      	movs	r3, #0
     b18:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     b1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     b1e:	4669      	mov	r1, sp
     b20:	486d      	ldr	r0, [pc, #436]	; (cd8 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
     b22:	6800      	ldr	r0, [r0, #0]
     b24:	4c73      	ldr	r4, [pc, #460]	; (cf4 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     b26:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
     b28:	2801      	cmp	r0, #1
     b2a:	d007      	beq.n	b3c <MdmCnct_ConnectInProgressSubStateMachine+0x8c>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     b2c:	4872      	ldr	r0, [pc, #456]	; (cf8 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     b2e:	4b6f      	ldr	r3, [pc, #444]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     b30:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
     b32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     b36:	4b71      	ldr	r3, [pc, #452]	; (cfc <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     b38:	4798      	blx	r3
     b3a:	e052      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
     b3c:	2300      	movs	r3, #0
     b3e:	461a      	mov	r2, r3
     b40:	4619      	mov	r1, r3
     b42:	4867      	ldr	r0, [pc, #412]	; (ce0 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     b44:	6800      	ldr	r0, [r0, #0]
     b46:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     b48:	2201      	movs	r2, #1
     b4a:	4b62      	ldr	r3, [pc, #392]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     b4c:	709a      	strb	r2, [r3, #2]
                                vTaskDelay(TransmitDelayMs);
     b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     b52:	4b6a      	ldr	r3, [pc, #424]	; (cfc <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     b54:	4798      	blx	r3
     b56:	e044      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Transmit Queue is not empty");
     b58:	4869      	ldr	r0, [pc, #420]	; (d00 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     b5a:	4b64      	ldr	r3, [pc, #400]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     b5c:	4798      	blx	r3
     b5e:	e040      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("No More Active Connections to close");
     b60:	4868      	ldr	r0, [pc, #416]	; (d04 <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
     b62:	4c62      	ldr	r4, [pc, #392]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     b64:	47a0      	blx	r4
                    DEBUG_PRINT("\r\n");
     b66:	4868      	ldr	r0, [pc, #416]	; (d08 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     b68:	47a0      	blx	r4
                    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
     b6a:	4b5a      	ldr	r3, [pc, #360]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     b6c:	2201      	movs	r2, #1
     b6e:	705a      	strb	r2, [r3, #1]
                    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     b70:	2200      	movs	r2, #0
     b72:	709a      	strb	r2, [r3, #2]
     b74:	e035      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     b76:	2b01      	cmp	r3, #1
     b78:	d133      	bne.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     b7a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     b7e:	4963      	ldr	r1, [pc, #396]	; (d0c <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
     b80:	4b63      	ldr	r3, [pc, #396]	; (d10 <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
     b82:	6818      	ldr	r0, [r3, #0]
     b84:	4b63      	ldr	r3, [pc, #396]	; (d14 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     b86:	4798      	blx	r3
     b88:	2801      	cmp	r0, #1
     b8a:	d12a      	bne.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
     b8c:	4b51      	ldr	r3, [pc, #324]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     b8e:	7a1d      	ldrb	r5, [r3, #8]
     b90:	795c      	ldrb	r4, [r3, #5]
     b92:	4620      	mov	r0, r4
     b94:	4b56      	ldr	r3, [pc, #344]	; (cf0 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     b96:	4798      	blx	r3
     b98:	4285      	cmp	r5, r0
     b9a:	d113      	bne.n	bc4 <MdmCnct_ConnectInProgressSubStateMachine+0x114>
                        if(sessionIdCount > 0)
     b9c:	b14c      	cbz	r4, bb2 <MdmCnct_ConnectInProgressSubStateMachine+0x102>
                            sessionIdCount--;
     b9e:	4b4d      	ldr	r3, [pc, #308]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     ba0:	3c01      	subs	r4, #1
     ba2:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     ba4:	2200      	movs	r2, #0
     ba6:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     ba8:	4b4a      	ldr	r3, [pc, #296]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     baa:	68d8      	ldr	r0, [r3, #12]
     bac:	4b5a      	ldr	r3, [pc, #360]	; (d18 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     bae:	4798      	blx	r3
     bb0:	e017      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
     bb2:	4b48      	ldr	r3, [pc, #288]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     bb4:	2201      	movs	r2, #1
     bb6:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     bb8:	2200      	movs	r2, #0
     bba:	709a      	strb	r2, [r3, #2]
                            DEBUG_PRINT("Closed All Active Connections");
     bbc:	4857      	ldr	r0, [pc, #348]	; (d1c <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     bbe:	4b4b      	ldr	r3, [pc, #300]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     bc0:	4798      	blx	r3
     bc2:	e7f1      	b.n	ba8 <MdmCnct_ConnectInProgressSubStateMachine+0xf8>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     bc4:	4856      	ldr	r0, [pc, #344]	; (d20 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     bc6:	4b49      	ldr	r3, [pc, #292]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     bc8:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     bca:	4b42      	ldr	r3, [pc, #264]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     bcc:	2200      	movs	r2, #0
     bce:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     bd0:	68d8      	ldr	r0, [r3, #12]
     bd2:	4b51      	ldr	r3, [pc, #324]	; (d18 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     bd4:	4798      	blx	r3
     bd6:	e004      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     bd8:	4b3e      	ldr	r3, [pc, #248]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     bda:	789b      	ldrb	r3, [r3, #2]
     bdc:	b11b      	cbz	r3, be6 <MdmCnct_ConnectInProgressSubStateMachine+0x136>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     bde:	2b01      	cmp	r3, #1
     be0:	d03e      	beq.n	c60 <MdmCnct_ConnectInProgressSubStateMachine+0x1b0>
}
     be2:	b002      	add	sp, #8
     be4:	bd70      	pop	{r4, r5, r6, pc}
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     be6:	4b3c      	ldr	r3, [pc, #240]	; (cd8 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
     be8:	6818      	ldr	r0, [r3, #0]
     bea:	4b3c      	ldr	r3, [pc, #240]	; (cdc <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
     bec:	4798      	blx	r3
     bee:	2800      	cmp	r0, #0
     bf0:	d132      	bne.n	c58 <MdmCnct_ConnectInProgressSubStateMachine+0x1a8>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     bf2:	2100      	movs	r1, #0
     bf4:	4b3a      	ldr	r3, [pc, #232]	; (ce0 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     bf6:	6818      	ldr	r0, [r3, #0]
     bf8:	4b3a      	ldr	r3, [pc, #232]	; (ce4 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
     bfa:	4798      	blx	r3
     bfc:	2801      	cmp	r0, #1
     bfe:	d003      	beq.n	c08 <MdmCnct_ConnectInProgressSubStateMachine+0x158>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     c00:	4839      	ldr	r0, [pc, #228]	; (ce8 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     c02:	4b3a      	ldr	r3, [pc, #232]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     c04:	4798      	blx	r3
     c06:	e7ec      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     c08:	2301      	movs	r3, #1
     c0a:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
     c0e:	231a      	movs	r3, #26
     c10:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     c14:	2300      	movs	r3, #0
     c16:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     c18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     c1c:	4669      	mov	r1, sp
     c1e:	482e      	ldr	r0, [pc, #184]	; (cd8 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
     c20:	6800      	ldr	r0, [r0, #0]
     c22:	4c34      	ldr	r4, [pc, #208]	; (cf4 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     c24:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     c26:	2801      	cmp	r0, #1
     c28:	d007      	beq.n	c3a <MdmCnct_ConnectInProgressSubStateMachine+0x18a>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     c2a:	4833      	ldr	r0, [pc, #204]	; (cf8 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     c2c:	4b2f      	ldr	r3, [pc, #188]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     c2e:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     c34:	4b31      	ldr	r3, [pc, #196]	; (cfc <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     c36:	4798      	blx	r3
     c38:	e7d3      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     c3a:	2300      	movs	r3, #0
     c3c:	461a      	mov	r2, r3
     c3e:	4619      	mov	r1, r3
     c40:	4827      	ldr	r0, [pc, #156]	; (ce0 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     c42:	6800      	ldr	r0, [r0, #0]
     c44:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     c46:	4b23      	ldr	r3, [pc, #140]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     c48:	2201      	movs	r2, #1
     c4a:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
     c4c:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
     c4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     c52:	4b2a      	ldr	r3, [pc, #168]	; (cfc <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     c54:	4798      	blx	r3
     c56:	e7c4      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     c58:	4829      	ldr	r0, [pc, #164]	; (d00 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     c5a:	4b24      	ldr	r3, [pc, #144]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     c5c:	4798      	blx	r3
     c5e:	e7c0      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     c60:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     c64:	4929      	ldr	r1, [pc, #164]	; (d0c <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
     c66:	4b2a      	ldr	r3, [pc, #168]	; (d10 <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
     c68:	6818      	ldr	r0, [r3, #0]
     c6a:	4b2a      	ldr	r3, [pc, #168]	; (d14 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     c6c:	4798      	blx	r3
     c6e:	2801      	cmp	r0, #1
     c70:	d1b7      	bne.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
     c72:	4b18      	ldr	r3, [pc, #96]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     c74:	7a1b      	ldrb	r3, [r3, #8]
     c76:	2b1a      	cmp	r3, #26
     c78:	d122      	bne.n	cc0 <MdmCnct_ConnectInProgressSubStateMachine+0x210>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
     c7a:	4b16      	ldr	r3, [pc, #88]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     c7c:	68d8      	ldr	r0, [r3, #12]
     c7e:	4b29      	ldr	r3, [pc, #164]	; (d24 <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
     c80:	4798      	blx	r3
     c82:	b190      	cbz	r0, caa <MdmCnct_ConnectInProgressSubStateMachine+0x1fa>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
     c84:	4828      	ldr	r0, [pc, #160]	; (d28 <MdmCnct_ConnectInProgressSubStateMachine+0x278>)
     c86:	4d19      	ldr	r5, [pc, #100]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     c88:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     c8a:	4c12      	ldr	r4, [pc, #72]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     c8c:	8961      	ldrh	r1, [r4, #10]
     c8e:	68e0      	ldr	r0, [r4, #12]
     c90:	4b26      	ldr	r3, [pc, #152]	; (d2c <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
     c92:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     c94:	481c      	ldr	r0, [pc, #112]	; (d08 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     c96:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     c98:	2300      	movs	r3, #0
     c9a:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
     c9c:	2302      	movs	r3, #2
     c9e:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
     ca0:	4b0c      	ldr	r3, [pc, #48]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     ca2:	68d8      	ldr	r0, [r3, #12]
     ca4:	4b1c      	ldr	r3, [pc, #112]	; (d18 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     ca6:	4798      	blx	r3
     ca8:	e79b      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            DEBUG_PRINT("Expected Response Not Received...");
     caa:	4821      	ldr	r0, [pc, #132]	; (d30 <MdmCnct_ConnectInProgressSubStateMachine+0x280>)
     cac:	4c0f      	ldr	r4, [pc, #60]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     cae:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
     cb0:	4815      	ldr	r0, [pc, #84]	; (d08 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     cb2:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     cb4:	2200      	movs	r2, #0
     cb6:	4b07      	ldr	r3, [pc, #28]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     cb8:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
     cba:	4b1e      	ldr	r3, [pc, #120]	; (d34 <MdmCnct_ConnectInProgressSubStateMachine+0x284>)
     cbc:	4798      	blx	r3
     cbe:	e7ef      	b.n	ca0 <MdmCnct_ConnectInProgressSubStateMachine+0x1f0>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     cc0:	4817      	ldr	r0, [pc, #92]	; (d20 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     cc2:	4b0a      	ldr	r3, [pc, #40]	; (cec <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     cc4:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     cc6:	4b03      	ldr	r3, [pc, #12]	; (cd4 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     cc8:	2200      	movs	r2, #0
     cca:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     ccc:	68d8      	ldr	r0, [r3, #12]
     cce:	4b12      	ldr	r3, [pc, #72]	; (d18 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     cd0:	4798      	blx	r3
     cd2:	e786      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
     cd4:	20000204 	.word	0x20000204
     cd8:	20003490 	.word	0x20003490
     cdc:	000059a9 	.word	0x000059a9
     ce0:	200034a0 	.word	0x200034a0
     ce4:	000057c9 	.word	0x000057c9
     ce8:	00007dac 	.word	0x00007dac
     cec:	000025a9 	.word	0x000025a9
     cf0:	00000a05 	.word	0x00000a05
     cf4:	00005331 	.word	0x00005331
     cf8:	00007d78 	.word	0x00007d78
     cfc:	00005fc1 	.word	0x00005fc1
     d00:	00007dd8 	.word	0x00007dd8
     d04:	00007df4 	.word	0x00007df4
     d08:	000086e8 	.word	0x000086e8
     d0c:	2000020c 	.word	0x2000020c
     d10:	20003470 	.word	0x20003470
     d14:	00005641 	.word	0x00005641
     d18:	00005009 	.word	0x00005009
     d1c:	00007e18 	.word	0x00007e18
     d20:	00007e38 	.word	0x00007e38
     d24:	00000a45 	.word	0x00000a45
     d28:	00007e6c 	.word	0x00007e6c
     d2c:	00002565 	.word	0x00002565
     d30:	00007e8c 	.word	0x00007e8c
     d34:	00000a85 	.word	0x00000a85
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     d38:	4b90      	ldr	r3, [pc, #576]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     d3a:	789b      	ldrb	r3, [r3, #2]
     d3c:	2b00      	cmp	r3, #0
     d3e:	d02e      	beq.n	d9e <MdmCnct_ConnectInProgressSubStateMachine+0x2ee>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     d40:	2b01      	cmp	r3, #1
     d42:	f47f af4e 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     d46:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     d4a:	498d      	ldr	r1, [pc, #564]	; (f80 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
     d4c:	4b8d      	ldr	r3, [pc, #564]	; (f84 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
     d4e:	6818      	ldr	r0, [r3, #0]
     d50:	4b8d      	ldr	r3, [pc, #564]	; (f88 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     d52:	4798      	blx	r3
     d54:	2801      	cmp	r0, #1
     d56:	f47f af44 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
     d5a:	4b88      	ldr	r3, [pc, #544]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     d5c:	7a1b      	ldrb	r3, [r3, #8]
     d5e:	2b1b      	cmp	r3, #27
     d60:	d166      	bne.n	e30 <MdmCnct_ConnectInProgressSubStateMachine+0x380>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
     d62:	4b86      	ldr	r3, [pc, #536]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     d64:	68d8      	ldr	r0, [r3, #12]
     d66:	4b89      	ldr	r3, [pc, #548]	; (f8c <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
     d68:	4798      	blx	r3
     d6a:	2800      	cmp	r0, #0
     d6c:	d055      	beq.n	e1a <MdmCnct_ConnectInProgressSubStateMachine+0x36a>
                            DEBUG_PRINT("Detached the PDP PS");
     d6e:	4888      	ldr	r0, [pc, #544]	; (f90 <MdmCnct_ConnectInProgressSubStateMachine+0x4e0>)
     d70:	4d88      	ldr	r5, [pc, #544]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     d72:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     d74:	4c81      	ldr	r4, [pc, #516]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     d76:	8961      	ldrh	r1, [r4, #10]
     d78:	68e0      	ldr	r0, [r4, #12]
     d7a:	4b87      	ldr	r3, [pc, #540]	; (f98 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     d7c:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     d7e:	4e87      	ldr	r6, [pc, #540]	; (f9c <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     d80:	4630      	mov	r0, r6
     d82:	47a8      	blx	r5
                            DEBUG_PRINT("Deleted all of the previous connection configurations");
     d84:	4886      	ldr	r0, [pc, #536]	; (fa0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
     d86:	47a8      	blx	r5
                            DEBUG_PRINT("\r\n");
     d88:	4630      	mov	r0, r6
     d8a:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     d8c:	2300      	movs	r3, #0
     d8e:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     d90:	2303      	movs	r3, #3
     d92:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
     d94:	4b79      	ldr	r3, [pc, #484]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     d96:	68d8      	ldr	r0, [r3, #12]
     d98:	4b82      	ldr	r3, [pc, #520]	; (fa4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     d9a:	4798      	blx	r3
     d9c:	e721      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     d9e:	4b82      	ldr	r3, [pc, #520]	; (fa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     da0:	6818      	ldr	r0, [r3, #0]
     da2:	4b82      	ldr	r3, [pc, #520]	; (fac <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     da4:	4798      	blx	r3
     da6:	2800      	cmp	r0, #0
     da8:	d133      	bne.n	e12 <MdmCnct_ConnectInProgressSubStateMachine+0x362>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     daa:	2100      	movs	r1, #0
     dac:	4b80      	ldr	r3, [pc, #512]	; (fb0 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     dae:	6818      	ldr	r0, [r3, #0]
     db0:	4b80      	ldr	r3, [pc, #512]	; (fb4 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     db2:	4798      	blx	r3
     db4:	2801      	cmp	r0, #1
     db6:	d003      	beq.n	dc0 <MdmCnct_ConnectInProgressSubStateMachine+0x310>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     db8:	487f      	ldr	r0, [pc, #508]	; (fb8 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     dba:	4b76      	ldr	r3, [pc, #472]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     dbc:	4798      	blx	r3
     dbe:	e710      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     dc0:	2301      	movs	r3, #1
     dc2:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
     dc6:	231b      	movs	r3, #27
     dc8:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     dcc:	2300      	movs	r3, #0
     dce:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     dd0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     dd4:	4669      	mov	r1, sp
     dd6:	4874      	ldr	r0, [pc, #464]	; (fa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     dd8:	6800      	ldr	r0, [r0, #0]
     dda:	4c78      	ldr	r4, [pc, #480]	; (fbc <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     ddc:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     dde:	2801      	cmp	r0, #1
     de0:	d007      	beq.n	df2 <MdmCnct_ConnectInProgressSubStateMachine+0x342>
                            DEBUG_PRINT("Failed to sent the PS Detach request to Tx Task");
     de2:	4877      	ldr	r0, [pc, #476]	; (fc0 <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     de4:	4b6b      	ldr	r3, [pc, #428]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     de6:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     de8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     dec:	4b75      	ldr	r3, [pc, #468]	; (fc4 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     dee:	4798      	blx	r3
     df0:	e6f7      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     df2:	2300      	movs	r3, #0
     df4:	461a      	mov	r2, r3
     df6:	4619      	mov	r1, r3
     df8:	486d      	ldr	r0, [pc, #436]	; (fb0 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     dfa:	6800      	ldr	r0, [r0, #0]
     dfc:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     dfe:	4b5f      	ldr	r3, [pc, #380]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     e00:	2201      	movs	r2, #1
     e02:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
     e04:	2202      	movs	r2, #2
     e06:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
     e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     e0c:	4b6d      	ldr	r3, [pc, #436]	; (fc4 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     e0e:	4798      	blx	r3
     e10:	e6e7      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     e12:	486d      	ldr	r0, [pc, #436]	; (fc8 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     e14:	4b5f      	ldr	r3, [pc, #380]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     e16:	4798      	blx	r3
     e18:	e6e3      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            DEBUG_PRINT("Expected Response Not Received...");
     e1a:	486c      	ldr	r0, [pc, #432]	; (fcc <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     e1c:	4c5d      	ldr	r4, [pc, #372]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     e1e:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
     e20:	485e      	ldr	r0, [pc, #376]	; (f9c <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     e22:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     e24:	2200      	movs	r2, #0
     e26:	4b55      	ldr	r3, [pc, #340]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     e28:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
     e2a:	4b69      	ldr	r3, [pc, #420]	; (fd0 <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
     e2c:	4798      	blx	r3
     e2e:	e7b1      	b.n	d94 <MdmCnct_ConnectInProgressSubStateMachine+0x2e4>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     e30:	4868      	ldr	r0, [pc, #416]	; (fd4 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
     e32:	4b58      	ldr	r3, [pc, #352]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     e34:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     e36:	4b51      	ldr	r3, [pc, #324]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     e38:	2200      	movs	r2, #0
     e3a:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     e3c:	68d8      	ldr	r0, [r3, #12]
     e3e:	4b59      	ldr	r3, [pc, #356]	; (fa4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     e40:	4798      	blx	r3
     e42:	e6ce      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     e44:	4b4d      	ldr	r3, [pc, #308]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     e46:	789b      	ldrb	r3, [r3, #2]
     e48:	b1d3      	cbz	r3, e80 <MdmCnct_ConnectInProgressSubStateMachine+0x3d0>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     e4a:	2b01      	cmp	r3, #1
     e4c:	f47f aec9 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     e50:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     e54:	494a      	ldr	r1, [pc, #296]	; (f80 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
     e56:	4b4b      	ldr	r3, [pc, #300]	; (f84 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
     e58:	6818      	ldr	r0, [r3, #0]
     e5a:	4b4b      	ldr	r3, [pc, #300]	; (f88 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     e5c:	4798      	blx	r3
     e5e:	2801      	cmp	r0, #1
     e60:	f47f aebf 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KPATTERN)
     e64:	4b45      	ldr	r3, [pc, #276]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     e66:	7a1b      	ldrb	r3, [r3, #8]
     e68:	2b14      	cmp	r3, #20
     e6a:	d045      	beq.n	ef8 <MdmCnct_ConnectInProgressSubStateMachine+0x448>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     e6c:	4859      	ldr	r0, [pc, #356]	; (fd4 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
     e6e:	4b49      	ldr	r3, [pc, #292]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     e70:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     e72:	4b42      	ldr	r3, [pc, #264]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     e74:	2200      	movs	r2, #0
     e76:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     e78:	68d8      	ldr	r0, [r3, #12]
     e7a:	4b4a      	ldr	r3, [pc, #296]	; (fa4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     e7c:	4798      	blx	r3
     e7e:	e6b0      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     e80:	4b49      	ldr	r3, [pc, #292]	; (fa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     e82:	6818      	ldr	r0, [r3, #0]
     e84:	4b49      	ldr	r3, [pc, #292]	; (fac <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     e86:	4798      	blx	r3
     e88:	2800      	cmp	r0, #0
     e8a:	d131      	bne.n	ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x440>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     e8c:	2100      	movs	r1, #0
     e8e:	4b48      	ldr	r3, [pc, #288]	; (fb0 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     e90:	6818      	ldr	r0, [r3, #0]
     e92:	4b48      	ldr	r3, [pc, #288]	; (fb4 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     e94:	4798      	blx	r3
     e96:	2801      	cmp	r0, #1
     e98:	d003      	beq.n	ea2 <MdmCnct_ConnectInProgressSubStateMachine+0x3f2>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     e9a:	4847      	ldr	r0, [pc, #284]	; (fb8 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     e9c:	4b3d      	ldr	r3, [pc, #244]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     e9e:	4798      	blx	r3
     ea0:	e69f      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     ea2:	2301      	movs	r3, #1
     ea4:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KPATTERN;
     ea8:	2314      	movs	r3, #20
     eaa:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     eae:	2300      	movs	r3, #0
     eb0:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     eb2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     eb6:	4669      	mov	r1, sp
     eb8:	483b      	ldr	r0, [pc, #236]	; (fa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     eba:	6800      	ldr	r0, [r0, #0]
     ebc:	4c3f      	ldr	r4, [pc, #252]	; (fbc <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     ebe:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     ec0:	2801      	cmp	r0, #1
     ec2:	d007      	beq.n	ed4 <MdmCnct_ConnectInProgressSubStateMachine+0x424>
                            DEBUG_PRINT("Failed to sent the EOF pattern to Tx Task");
     ec4:	4844      	ldr	r0, [pc, #272]	; (fd8 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
     ec6:	4b33      	ldr	r3, [pc, #204]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     ec8:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     eca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     ece:	4b3d      	ldr	r3, [pc, #244]	; (fc4 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     ed0:	4798      	blx	r3
     ed2:	e686      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     ed4:	2300      	movs	r3, #0
     ed6:	461a      	mov	r2, r3
     ed8:	4619      	mov	r1, r3
     eda:	4835      	ldr	r0, [pc, #212]	; (fb0 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     edc:	6800      	ldr	r0, [r0, #0]
     ede:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     ee0:	2201      	movs	r2, #1
     ee2:	4b26      	ldr	r3, [pc, #152]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     ee4:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     ee6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     eea:	4b36      	ldr	r3, [pc, #216]	; (fc4 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     eec:	4798      	blx	r3
     eee:	e678      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     ef0:	4835      	ldr	r0, [pc, #212]	; (fc8 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     ef2:	4b28      	ldr	r3, [pc, #160]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     ef4:	4798      	blx	r3
     ef6:	e674      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("EOF Pattern configured");
     ef8:	4838      	ldr	r0, [pc, #224]	; (fdc <MdmCnct_ConnectInProgressSubStateMachine+0x52c>)
     efa:	4d26      	ldr	r5, [pc, #152]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     efc:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     efe:	4c1f      	ldr	r4, [pc, #124]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     f00:	8961      	ldrh	r1, [r4, #10]
     f02:	68e0      	ldr	r0, [r4, #12]
     f04:	4b24      	ldr	r3, [pc, #144]	; (f98 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     f06:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
     f08:	4824      	ldr	r0, [pc, #144]	; (f9c <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     f0a:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_ACCESS_POINT;
     f0c:	2304      	movs	r3, #4
     f0e:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     f10:	2300      	movs	r3, #0
     f12:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
     f14:	68e0      	ldr	r0, [r4, #12]
     f16:	4b23      	ldr	r3, [pc, #140]	; (fa4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     f18:	4798      	blx	r3
     f1a:	e662      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     f1c:	4b17      	ldr	r3, [pc, #92]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     f1e:	789b      	ldrb	r3, [r3, #2]
     f20:	b1d3      	cbz	r3, f58 <MdmCnct_ConnectInProgressSubStateMachine+0x4a8>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     f22:	2b01      	cmp	r3, #1
     f24:	f47f ae5d 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     f28:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     f2c:	4914      	ldr	r1, [pc, #80]	; (f80 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
     f2e:	4b15      	ldr	r3, [pc, #84]	; (f84 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
     f30:	6818      	ldr	r0, [r3, #0]
     f32:	4b15      	ldr	r3, [pc, #84]	; (f88 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     f34:	4798      	blx	r3
     f36:	2801      	cmp	r0, #1
     f38:	f47f ae53 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXCFG)
     f3c:	4b0f      	ldr	r3, [pc, #60]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     f3e:	7a1b      	ldrb	r3, [r3, #8]
     f40:	2b15      	cmp	r3, #21
     f42:	d078      	beq.n	1036 <MdmCnct_ConnectInProgressSubStateMachine+0x586>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     f44:	4823      	ldr	r0, [pc, #140]	; (fd4 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
     f46:	4b13      	ldr	r3, [pc, #76]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     f48:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     f4a:	4b0c      	ldr	r3, [pc, #48]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     f4c:	2200      	movs	r2, #0
     f4e:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     f50:	68d8      	ldr	r0, [r3, #12]
     f52:	4b14      	ldr	r3, [pc, #80]	; (fa4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     f54:	4798      	blx	r3
     f56:	e644      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     f58:	4b13      	ldr	r3, [pc, #76]	; (fa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     f5a:	6818      	ldr	r0, [r3, #0]
     f5c:	4b13      	ldr	r3, [pc, #76]	; (fac <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     f5e:	4798      	blx	r3
     f60:	2800      	cmp	r0, #0
     f62:	d164      	bne.n	102e <MdmCnct_ConnectInProgressSubStateMachine+0x57e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     f64:	2100      	movs	r1, #0
     f66:	4b12      	ldr	r3, [pc, #72]	; (fb0 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     f68:	6818      	ldr	r0, [r3, #0]
     f6a:	4b12      	ldr	r3, [pc, #72]	; (fb4 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     f6c:	4798      	blx	r3
     f6e:	2801      	cmp	r0, #1
     f70:	d036      	beq.n	fe0 <MdmCnct_ConnectInProgressSubStateMachine+0x530>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     f72:	4811      	ldr	r0, [pc, #68]	; (fb8 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     f74:	4b07      	ldr	r3, [pc, #28]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     f76:	4798      	blx	r3
     f78:	e633      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
     f7a:	bf00      	nop
     f7c:	20000204 	.word	0x20000204
     f80:	2000020c 	.word	0x2000020c
     f84:	20003470 	.word	0x20003470
     f88:	00005641 	.word	0x00005641
     f8c:	00000a45 	.word	0x00000a45
     f90:	00007ee0 	.word	0x00007ee0
     f94:	000025a9 	.word	0x000025a9
     f98:	00002565 	.word	0x00002565
     f9c:	000086e8 	.word	0x000086e8
     fa0:	00007ef4 	.word	0x00007ef4
     fa4:	00005009 	.word	0x00005009
     fa8:	20003490 	.word	0x20003490
     fac:	000059a9 	.word	0x000059a9
     fb0:	200034a0 	.word	0x200034a0
     fb4:	000057c9 	.word	0x000057c9
     fb8:	00007dac 	.word	0x00007dac
     fbc:	00005331 	.word	0x00005331
     fc0:	00007eb0 	.word	0x00007eb0
     fc4:	00005fc1 	.word	0x00005fc1
     fc8:	00007dd8 	.word	0x00007dd8
     fcc:	00007e8c 	.word	0x00007e8c
     fd0:	00000a85 	.word	0x00000a85
     fd4:	00007e38 	.word	0x00007e38
     fd8:	00007f2c 	.word	0x00007f2c
     fdc:	00007f58 	.word	0x00007f58
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     fe0:	2301      	movs	r3, #1
     fe2:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXCFG;
     fe6:	2315      	movs	r3, #21
     fe8:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     fec:	2300      	movs	r3, #0
     fee:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     ff0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ff4:	4669      	mov	r1, sp
     ff6:	4890      	ldr	r0, [pc, #576]	; (1238 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
     ff8:	6800      	ldr	r0, [r0, #0]
     ffa:	4c90      	ldr	r4, [pc, #576]	; (123c <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
     ffc:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     ffe:	2801      	cmp	r0, #1
    1000:	d007      	beq.n	1012 <MdmCnct_ConnectInProgressSubStateMachine+0x562>
                            DEBUG_PRINT("Failed to sent access point cmd to Tx Task");
    1002:	488f      	ldr	r0, [pc, #572]	; (1240 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
    1004:	4b8f      	ldr	r3, [pc, #572]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1006:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    100c:	4b8e      	ldr	r3, [pc, #568]	; (1248 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    100e:	4798      	blx	r3
    1010:	e5e7      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1012:	2300      	movs	r3, #0
    1014:	461a      	mov	r2, r3
    1016:	4619      	mov	r1, r3
    1018:	488c      	ldr	r0, [pc, #560]	; (124c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    101a:	6800      	ldr	r0, [r0, #0]
    101c:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    101e:	2201      	movs	r2, #1
    1020:	4b8b      	ldr	r3, [pc, #556]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1022:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1024:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1028:	4b87      	ldr	r3, [pc, #540]	; (1248 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    102a:	4798      	blx	r3
    102c:	e5d9      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    102e:	4889      	ldr	r0, [pc, #548]	; (1254 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1030:	4b84      	ldr	r3, [pc, #528]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1032:	4798      	blx	r3
    1034:	e5d5      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Access Point configured");
    1036:	4888      	ldr	r0, [pc, #544]	; (1258 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1038:	4d82      	ldr	r5, [pc, #520]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    103a:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    103c:	4c84      	ldr	r4, [pc, #528]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    103e:	8961      	ldrh	r1, [r4, #10]
    1040:	68e0      	ldr	r0, [r4, #12]
    1042:	4b86      	ldr	r3, [pc, #536]	; (125c <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1044:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1046:	4886      	ldr	r0, [pc, #536]	; (1260 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1048:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_CONNECT_TIMERS;
    104a:	2305      	movs	r3, #5
    104c:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    104e:	2300      	movs	r3, #0
    1050:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1052:	68e0      	ldr	r0, [r4, #12]
    1054:	4b83      	ldr	r3, [pc, #524]	; (1264 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1056:	4798      	blx	r3
    1058:	e5c3      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    105a:	4b7d      	ldr	r3, [pc, #500]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    105c:	789b      	ldrb	r3, [r3, #2]
    105e:	b1d3      	cbz	r3, 1096 <MdmCnct_ConnectInProgressSubStateMachine+0x5e6>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1060:	2b01      	cmp	r3, #1
    1062:	f47f adbe 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1066:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    106a:	497f      	ldr	r1, [pc, #508]	; (1268 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
    106c:	4b7f      	ldr	r3, [pc, #508]	; (126c <MdmCnct_ConnectInProgressSubStateMachine+0x7bc>)
    106e:	6818      	ldr	r0, [r3, #0]
    1070:	4b7f      	ldr	r3, [pc, #508]	; (1270 <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1072:	4798      	blx	r3
    1074:	2801      	cmp	r0, #1
    1076:	f47f adb4 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXTIMER)
    107a:	4b75      	ldr	r3, [pc, #468]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    107c:	7a1b      	ldrb	r3, [r3, #8]
    107e:	2b16      	cmp	r3, #22
    1080:	d045      	beq.n	110e <MdmCnct_ConnectInProgressSubStateMachine+0x65e>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1082:	487c      	ldr	r0, [pc, #496]	; (1274 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    1084:	4b6f      	ldr	r3, [pc, #444]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1086:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1088:	4b71      	ldr	r3, [pc, #452]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    108a:	2200      	movs	r2, #0
    108c:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    108e:	68d8      	ldr	r0, [r3, #12]
    1090:	4b74      	ldr	r3, [pc, #464]	; (1264 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1092:	4798      	blx	r3
    1094:	e5a5      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1096:	4b68      	ldr	r3, [pc, #416]	; (1238 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    1098:	6818      	ldr	r0, [r3, #0]
    109a:	4b77      	ldr	r3, [pc, #476]	; (1278 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    109c:	4798      	blx	r3
    109e:	2800      	cmp	r0, #0
    10a0:	d131      	bne.n	1106 <MdmCnct_ConnectInProgressSubStateMachine+0x656>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    10a2:	2100      	movs	r1, #0
    10a4:	4b69      	ldr	r3, [pc, #420]	; (124c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    10a6:	6818      	ldr	r0, [r3, #0]
    10a8:	4b74      	ldr	r3, [pc, #464]	; (127c <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    10aa:	4798      	blx	r3
    10ac:	2801      	cmp	r0, #1
    10ae:	d003      	beq.n	10b8 <MdmCnct_ConnectInProgressSubStateMachine+0x608>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    10b0:	4873      	ldr	r0, [pc, #460]	; (1280 <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    10b2:	4b64      	ldr	r3, [pc, #400]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    10b4:	4798      	blx	r3
    10b6:	e594      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    10b8:	2301      	movs	r3, #1
    10ba:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXTIMER;
    10be:	2316      	movs	r3, #22
    10c0:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    10c4:	2300      	movs	r3, #0
    10c6:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    10c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    10cc:	4669      	mov	r1, sp
    10ce:	485a      	ldr	r0, [pc, #360]	; (1238 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    10d0:	6800      	ldr	r0, [r0, #0]
    10d2:	4c5a      	ldr	r4, [pc, #360]	; (123c <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
    10d4:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    10d6:	2801      	cmp	r0, #1
    10d8:	d007      	beq.n	10ea <MdmCnct_ConnectInProgressSubStateMachine+0x63a>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    10da:	486a      	ldr	r0, [pc, #424]	; (1284 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    10dc:	4b59      	ldr	r3, [pc, #356]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    10de:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    10e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    10e4:	4b58      	ldr	r3, [pc, #352]	; (1248 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    10e6:	4798      	blx	r3
    10e8:	e57b      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    10ea:	2300      	movs	r3, #0
    10ec:	461a      	mov	r2, r3
    10ee:	4619      	mov	r1, r3
    10f0:	4856      	ldr	r0, [pc, #344]	; (124c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    10f2:	6800      	ldr	r0, [r0, #0]
    10f4:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    10f6:	2201      	movs	r2, #1
    10f8:	4b55      	ldr	r3, [pc, #340]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    10fa:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    10fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1100:	4b51      	ldr	r3, [pc, #324]	; (1248 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1102:	4798      	blx	r3
    1104:	e56d      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1106:	4853      	ldr	r0, [pc, #332]	; (1254 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1108:	4b4e      	ldr	r3, [pc, #312]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    110a:	4798      	blx	r3
    110c:	e569      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Connection Timers configured");
    110e:	485e      	ldr	r0, [pc, #376]	; (1288 <MdmCnct_ConnectInProgressSubStateMachine+0x7d8>)
    1110:	4d4c      	ldr	r5, [pc, #304]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1112:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1114:	4c4e      	ldr	r4, [pc, #312]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1116:	8961      	ldrh	r1, [r4, #10]
    1118:	68e0      	ldr	r0, [r4, #12]
    111a:	4b50      	ldr	r3, [pc, #320]	; (125c <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    111c:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    111e:	4850      	ldr	r0, [pc, #320]	; (1260 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1120:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_SERVER_ADDRESS;
    1122:	2306      	movs	r3, #6
    1124:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1126:	2300      	movs	r3, #0
    1128:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    112a:	68e0      	ldr	r0, [r4, #12]
    112c:	4b4d      	ldr	r3, [pc, #308]	; (1264 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    112e:	4798      	blx	r3
    1130:	e557      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1132:	4b47      	ldr	r3, [pc, #284]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1134:	789b      	ldrb	r3, [r3, #2]
    1136:	b1d3      	cbz	r3, 116e <MdmCnct_ConnectInProgressSubStateMachine+0x6be>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1138:	2b01      	cmp	r3, #1
    113a:	f47f ad52 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    113e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1142:	4949      	ldr	r1, [pc, #292]	; (1268 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
    1144:	4b49      	ldr	r3, [pc, #292]	; (126c <MdmCnct_ConnectInProgressSubStateMachine+0x7bc>)
    1146:	6818      	ldr	r0, [r3, #0]
    1148:	4b49      	ldr	r3, [pc, #292]	; (1270 <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    114a:	4798      	blx	r3
    114c:	2801      	cmp	r0, #1
    114e:	f47f ad48 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_CFG)
    1152:	4b3f      	ldr	r3, [pc, #252]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1154:	7a1b      	ldrb	r3, [r3, #8]
    1156:	2b09      	cmp	r3, #9
    1158:	d045      	beq.n	11e6 <MdmCnct_ConnectInProgressSubStateMachine+0x736>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    115a:	4846      	ldr	r0, [pc, #280]	; (1274 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    115c:	4b39      	ldr	r3, [pc, #228]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    115e:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1160:	4b3b      	ldr	r3, [pc, #236]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1162:	2200      	movs	r2, #0
    1164:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1166:	68d8      	ldr	r0, [r3, #12]
    1168:	4b3e      	ldr	r3, [pc, #248]	; (1264 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    116a:	4798      	blx	r3
    116c:	e539      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    116e:	4b32      	ldr	r3, [pc, #200]	; (1238 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    1170:	6818      	ldr	r0, [r3, #0]
    1172:	4b41      	ldr	r3, [pc, #260]	; (1278 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1174:	4798      	blx	r3
    1176:	2800      	cmp	r0, #0
    1178:	d131      	bne.n	11de <MdmCnct_ConnectInProgressSubStateMachine+0x72e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    117a:	2100      	movs	r1, #0
    117c:	4b33      	ldr	r3, [pc, #204]	; (124c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    117e:	6818      	ldr	r0, [r3, #0]
    1180:	4b3e      	ldr	r3, [pc, #248]	; (127c <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    1182:	4798      	blx	r3
    1184:	2801      	cmp	r0, #1
    1186:	d003      	beq.n	1190 <MdmCnct_ConnectInProgressSubStateMachine+0x6e0>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1188:	483d      	ldr	r0, [pc, #244]	; (1280 <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    118a:	4b2e      	ldr	r3, [pc, #184]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    118c:	4798      	blx	r3
    118e:	e528      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1190:	2301      	movs	r3, #1
    1192:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_CFG;
    1196:	2309      	movs	r3, #9
    1198:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    119c:	2300      	movs	r3, #0
    119e:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    11a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    11a4:	4669      	mov	r1, sp
    11a6:	4824      	ldr	r0, [pc, #144]	; (1238 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    11a8:	6800      	ldr	r0, [r0, #0]
    11aa:	4c24      	ldr	r4, [pc, #144]	; (123c <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
    11ac:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    11ae:	2801      	cmp	r0, #1
    11b0:	d007      	beq.n	11c2 <MdmCnct_ConnectInProgressSubStateMachine+0x712>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    11b2:	4834      	ldr	r0, [pc, #208]	; (1284 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    11b4:	4b23      	ldr	r3, [pc, #140]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    11b6:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    11b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    11bc:	4b22      	ldr	r3, [pc, #136]	; (1248 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    11be:	4798      	blx	r3
    11c0:	e50f      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    11c2:	2300      	movs	r3, #0
    11c4:	461a      	mov	r2, r3
    11c6:	4619      	mov	r1, r3
    11c8:	4820      	ldr	r0, [pc, #128]	; (124c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    11ca:	6800      	ldr	r0, [r0, #0]
    11cc:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    11ce:	2201      	movs	r2, #1
    11d0:	4b1f      	ldr	r3, [pc, #124]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    11d2:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    11d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    11d8:	4b1b      	ldr	r3, [pc, #108]	; (1248 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    11da:	4798      	blx	r3
    11dc:	e501      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    11de:	481d      	ldr	r0, [pc, #116]	; (1254 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    11e0:	4b18      	ldr	r3, [pc, #96]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    11e2:	4798      	blx	r3
    11e4:	e4fd      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        MdmCnct_ExtractSessionIdFromConfigResponse(ConnectionResponse.response);
    11e6:	4c1a      	ldr	r4, [pc, #104]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    11e8:	68e0      	ldr	r0, [r4, #12]
    currentSessionId = cfgResponse[SESSION_ID_POSITION];
    11ea:	7ac3      	ldrb	r3, [r0, #11]
    11ec:	7423      	strb	r3, [r4, #16]
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    11ee:	8961      	ldrh	r1, [r4, #10]
    11f0:	4b1a      	ldr	r3, [pc, #104]	; (125c <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    11f2:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    11f4:	481a      	ldr	r0, [pc, #104]	; (1260 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    11f6:	4b13      	ldr	r3, [pc, #76]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    11f8:	4798      	blx	r3
    connectionStatus = cfgResponse[CONNECT_STATUS_POSITION];
    11fa:	68e3      	ldr	r3, [r4, #12]
    switch(connectionStatus)
    11fc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    1200:	3b30      	subs	r3, #48	; 0x30
    1202:	2b06      	cmp	r3, #6
    1204:	d808      	bhi.n	1218 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
    1206:	e8df f003 	tbb	[pc, r3]
    120a:	4704      	.short	0x4704
    120c:	64605c58 	.word	0x64605c58
    1210:	68          	.byte	0x68
    1211:	00          	.byte	0x00
            DEBUG_PRINT("Connection Status : DISCONNECTED DUE TO NETWORK");
    1212:	481e      	ldr	r0, [pc, #120]	; (128c <MdmCnct_ConnectInProgressSubStateMachine+0x7dc>)
    1214:	4b0b      	ldr	r3, [pc, #44]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1216:	4798      	blx	r3
                            DEBUG_PRINT("Error : Connection Failure");
    1218:	481d      	ldr	r0, [pc, #116]	; (1290 <MdmCnct_ConnectInProgressSubStateMachine+0x7e0>)
    121a:	4c0a      	ldr	r4, [pc, #40]	; (1244 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    121c:	47a0      	blx	r4
                            DEBUG_PRINT("Restarting the connection initialization...");
    121e:	481d      	ldr	r0, [pc, #116]	; (1294 <MdmCnct_ConnectInProgressSubStateMachine+0x7e4>)
    1220:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1222:	480f      	ldr	r0, [pc, #60]	; (1260 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1224:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1226:	4b0a      	ldr	r3, [pc, #40]	; (1250 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1228:	2200      	movs	r2, #0
    122a:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    122c:	2207      	movs	r2, #7
    122e:	70da      	strb	r2, [r3, #3]
                            gHttpConnectionState =  MDM_HTTP_CONNECTED;
    1230:	2202      	movs	r2, #2
    1232:	701a      	strb	r2, [r3, #0]
    1234:	e03c      	b.n	12b0 <MdmCnct_ConnectInProgressSubStateMachine+0x800>
    1236:	bf00      	nop
    1238:	20003490 	.word	0x20003490
    123c:	00005331 	.word	0x00005331
    1240:	00007f70 	.word	0x00007f70
    1244:	000025a9 	.word	0x000025a9
    1248:	00005fc1 	.word	0x00005fc1
    124c:	200034a0 	.word	0x200034a0
    1250:	20000204 	.word	0x20000204
    1254:	00007dd8 	.word	0x00007dd8
    1258:	00007f9c 	.word	0x00007f9c
    125c:	00002565 	.word	0x00002565
    1260:	000086e8 	.word	0x000086e8
    1264:	00005009 	.word	0x00005009
    1268:	2000020c 	.word	0x2000020c
    126c:	20003470 	.word	0x20003470
    1270:	00005641 	.word	0x00005641
    1274:	00007e38 	.word	0x00007e38
    1278:	000059a9 	.word	0x000059a9
    127c:	000057c9 	.word	0x000057c9
    1280:	00007dac 	.word	0x00007dac
    1284:	00007fb4 	.word	0x00007fb4
    1288:	00007fe4 	.word	0x00007fe4
    128c:	00008004 	.word	0x00008004
    1290:	00008168 	.word	0x00008168
    1294:	00008184 	.word	0x00008184
            DEBUG_PRINT("Connection Status : CONNECTED");
    1298:	4855      	ldr	r0, [pc, #340]	; (13f0 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
    129a:	4c56      	ldr	r4, [pc, #344]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    129c:	47a0      	blx	r4
                            DEBUG_PRINT("Connection successful...Cloud Server configured");
    129e:	4856      	ldr	r0, [pc, #344]	; (13f8 <MdmCnct_ConnectInProgressSubStateMachine+0x948>)
    12a0:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    12a2:	4856      	ldr	r0, [pc, #344]	; (13fc <MdmCnct_ConnectInProgressSubStateMachine+0x94c>)
    12a4:	47a0      	blx	r4
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_HTTP_HEADER;
    12a6:	4b56      	ldr	r3, [pc, #344]	; (1400 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    12a8:	2207      	movs	r2, #7
    12aa:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    12ac:	2200      	movs	r2, #0
    12ae:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    12b0:	4b53      	ldr	r3, [pc, #332]	; (1400 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    12b2:	68d8      	ldr	r0, [r3, #12]
    12b4:	4b53      	ldr	r3, [pc, #332]	; (1404 <MdmCnct_ConnectInProgressSubStateMachine+0x954>)
    12b6:	4798      	blx	r3
    12b8:	e493      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            DEBUG_PRINT("Connection Status : FAILED TO CONNECT");
    12ba:	4853      	ldr	r0, [pc, #332]	; (1408 <MdmCnct_ConnectInProgressSubStateMachine+0x958>)
    12bc:	4b4d      	ldr	r3, [pc, #308]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    12be:	4798      	blx	r3
    12c0:	e7aa      	b.n	1218 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : CONNECTION CLOSED");
    12c2:	4852      	ldr	r0, [pc, #328]	; (140c <MdmCnct_ConnectInProgressSubStateMachine+0x95c>)
    12c4:	4b4b      	ldr	r3, [pc, #300]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    12c6:	4798      	blx	r3
    12c8:	e7a6      	b.n	1218 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : CONNECTION IN PROGRESS");
    12ca:	4851      	ldr	r0, [pc, #324]	; (1410 <MdmCnct_ConnectInProgressSubStateMachine+0x960>)
    12cc:	4b49      	ldr	r3, [pc, #292]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    12ce:	4798      	blx	r3
    12d0:	e7a2      	b.n	1218 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : IDLE TIMER STARTED FOR DISCONNECTION");
    12d2:	4850      	ldr	r0, [pc, #320]	; (1414 <MdmCnct_ConnectInProgressSubStateMachine+0x964>)
    12d4:	4b47      	ldr	r3, [pc, #284]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    12d6:	4798      	blx	r3
    12d8:	e79e      	b.n	1218 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : IDLE TIMER CANCELLED");
    12da:	484f      	ldr	r0, [pc, #316]	; (1418 <MdmCnct_ConnectInProgressSubStateMachine+0x968>)
    12dc:	4b45      	ldr	r3, [pc, #276]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    12de:	4798      	blx	r3
    12e0:	e79a      	b.n	1218 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    12e2:	4b47      	ldr	r3, [pc, #284]	; (1400 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    12e4:	789b      	ldrb	r3, [r3, #2]
    12e6:	b1d3      	cbz	r3, 131e <MdmCnct_ConnectInProgressSubStateMachine+0x86e>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    12e8:	2b01      	cmp	r3, #1
    12ea:	f47f ac7a 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    12ee:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    12f2:	494a      	ldr	r1, [pc, #296]	; (141c <MdmCnct_ConnectInProgressSubStateMachine+0x96c>)
    12f4:	4b4a      	ldr	r3, [pc, #296]	; (1420 <MdmCnct_ConnectInProgressSubStateMachine+0x970>)
    12f6:	6818      	ldr	r0, [r3, #0]
    12f8:	4b4a      	ldr	r3, [pc, #296]	; (1424 <MdmCnct_ConnectInProgressSubStateMachine+0x974>)
    12fa:	4798      	blx	r3
    12fc:	2801      	cmp	r0, #1
    12fe:	f47f ac70 	bne.w	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_HEADER)
    1302:	4b3f      	ldr	r3, [pc, #252]	; (1400 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1304:	7a1b      	ldrb	r3, [r3, #8]
    1306:	2b17      	cmp	r3, #23
    1308:	d048      	beq.n	139c <MdmCnct_ConnectInProgressSubStateMachine+0x8ec>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    130a:	4847      	ldr	r0, [pc, #284]	; (1428 <MdmCnct_ConnectInProgressSubStateMachine+0x978>)
    130c:	4b39      	ldr	r3, [pc, #228]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    130e:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1310:	4b3b      	ldr	r3, [pc, #236]	; (1400 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1312:	2200      	movs	r2, #0
    1314:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1316:	68d8      	ldr	r0, [r3, #12]
    1318:	4b3a      	ldr	r3, [pc, #232]	; (1404 <MdmCnct_ConnectInProgressSubStateMachine+0x954>)
    131a:	4798      	blx	r3
}
    131c:	e461      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                buildHttpHeaderWithActiveSessionID(&currentSessionId);
    131e:	4843      	ldr	r0, [pc, #268]	; (142c <MdmCnct_ConnectInProgressSubStateMachine+0x97c>)
    1320:	4b43      	ldr	r3, [pc, #268]	; (1430 <MdmCnct_ConnectInProgressSubStateMachine+0x980>)
    1322:	4798      	blx	r3
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1324:	4b43      	ldr	r3, [pc, #268]	; (1434 <MdmCnct_ConnectInProgressSubStateMachine+0x984>)
    1326:	6818      	ldr	r0, [r3, #0]
    1328:	4b43      	ldr	r3, [pc, #268]	; (1438 <MdmCnct_ConnectInProgressSubStateMachine+0x988>)
    132a:	4798      	blx	r3
    132c:	2800      	cmp	r0, #0
    132e:	d131      	bne.n	1394 <MdmCnct_ConnectInProgressSubStateMachine+0x8e4>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1330:	2100      	movs	r1, #0
    1332:	4b42      	ldr	r3, [pc, #264]	; (143c <MdmCnct_ConnectInProgressSubStateMachine+0x98c>)
    1334:	6818      	ldr	r0, [r3, #0]
    1336:	4b42      	ldr	r3, [pc, #264]	; (1440 <MdmCnct_ConnectInProgressSubStateMachine+0x990>)
    1338:	4798      	blx	r3
    133a:	2801      	cmp	r0, #1
    133c:	d003      	beq.n	1346 <MdmCnct_ConnectInProgressSubStateMachine+0x896>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    133e:	4841      	ldr	r0, [pc, #260]	; (1444 <MdmCnct_ConnectInProgressSubStateMachine+0x994>)
    1340:	4b2c      	ldr	r3, [pc, #176]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1342:	4798      	blx	r3
    1344:	e44d      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1346:	2301      	movs	r3, #1
    1348:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_HEADER;
    134c:	2317      	movs	r3, #23
    134e:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1352:	2300      	movs	r3, #0
    1354:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1356:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    135a:	4669      	mov	r1, sp
    135c:	4835      	ldr	r0, [pc, #212]	; (1434 <MdmCnct_ConnectInProgressSubStateMachine+0x984>)
    135e:	6800      	ldr	r0, [r0, #0]
    1360:	4c39      	ldr	r4, [pc, #228]	; (1448 <MdmCnct_ConnectInProgressSubStateMachine+0x998>)
    1362:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1364:	2801      	cmp	r0, #1
    1366:	d007      	beq.n	1378 <MdmCnct_ConnectInProgressSubStateMachine+0x8c8>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    1368:	4838      	ldr	r0, [pc, #224]	; (144c <MdmCnct_ConnectInProgressSubStateMachine+0x99c>)
    136a:	4b22      	ldr	r3, [pc, #136]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    136c:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    136e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1372:	4b37      	ldr	r3, [pc, #220]	; (1450 <MdmCnct_ConnectInProgressSubStateMachine+0x9a0>)
    1374:	4798      	blx	r3
    1376:	e434      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1378:	2300      	movs	r3, #0
    137a:	461a      	mov	r2, r3
    137c:	4619      	mov	r1, r3
    137e:	482f      	ldr	r0, [pc, #188]	; (143c <MdmCnct_ConnectInProgressSubStateMachine+0x98c>)
    1380:	6800      	ldr	r0, [r0, #0]
    1382:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1384:	2201      	movs	r2, #1
    1386:	4b1e      	ldr	r3, [pc, #120]	; (1400 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1388:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    138a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    138e:	4b30      	ldr	r3, [pc, #192]	; (1450 <MdmCnct_ConnectInProgressSubStateMachine+0x9a0>)
    1390:	4798      	blx	r3
    1392:	e426      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1394:	482f      	ldr	r0, [pc, #188]	; (1454 <MdmCnct_ConnectInProgressSubStateMachine+0x9a4>)
    1396:	4b17      	ldr	r3, [pc, #92]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1398:	4798      	blx	r3
    139a:	e422      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    139c:	4c18      	ldr	r4, [pc, #96]	; (1400 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    139e:	8961      	ldrh	r1, [r4, #10]
    13a0:	68e0      	ldr	r0, [r4, #12]
    13a2:	4b2d      	ldr	r3, [pc, #180]	; (1458 <MdmCnct_ConnectInProgressSubStateMachine+0x9a8>)
    13a4:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    13a6:	4815      	ldr	r0, [pc, #84]	; (13fc <MdmCnct_ConnectInProgressSubStateMachine+0x94c>)
    13a8:	4b12      	ldr	r3, [pc, #72]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    13aa:	4798      	blx	r3
    if(0==memcmp(response,"CONNECT",7))
    13ac:	2207      	movs	r2, #7
    13ae:	492b      	ldr	r1, [pc, #172]	; (145c <MdmCnct_ConnectInProgressSubStateMachine+0x9ac>)
    13b0:	68e0      	ldr	r0, [r4, #12]
    13b2:	4b2b      	ldr	r3, [pc, #172]	; (1460 <MdmCnct_ConnectInProgressSubStateMachine+0x9b0>)
    13b4:	4798      	blx	r3
    13b6:	b138      	cbz	r0, 13c8 <MdmCnct_ConnectInProgressSubStateMachine+0x918>
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    13b8:	2200      	movs	r2, #0
    13ba:	4b11      	ldr	r3, [pc, #68]	; (1400 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    13bc:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    13be:	4b10      	ldr	r3, [pc, #64]	; (1400 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    13c0:	68d8      	ldr	r0, [r3, #12]
    13c2:	4b10      	ldr	r3, [pc, #64]	; (1404 <MdmCnct_ConnectInProgressSubStateMachine+0x954>)
    13c4:	4798      	blx	r3
    13c6:	e40c      	b.n	be2 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
        mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
    13c8:	2110      	movs	r1, #16
    13ca:	4826      	ldr	r0, [pc, #152]	; (1464 <MdmCnct_ConnectInProgressSubStateMachine+0x9b4>)
    13cc:	4b26      	ldr	r3, [pc, #152]	; (1468 <MdmCnct_ConnectInProgressSubStateMachine+0x9b8>)
    13ce:	4798      	blx	r3
        mdmCtrlr_FlushRxBuffer();
    13d0:	4b26      	ldr	r3, [pc, #152]	; (146c <MdmCnct_ConnectInProgressSubStateMachine+0x9bc>)
    13d2:	4798      	blx	r3
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    13d4:	2200      	movs	r2, #0
    13d6:	7062      	strb	r2, [r4, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    13d8:	70a2      	strb	r2, [r4, #2]
                            gHttpConnectionState = MDM_HTTP_CONNECTED;
    13da:	2102      	movs	r1, #2
    13dc:	7021      	strb	r1, [r4, #0]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    13de:	70e2      	strb	r2, [r4, #3]
                            DEBUG_PRINT("\r\n");
    13e0:	4806      	ldr	r0, [pc, #24]	; (13fc <MdmCnct_ConnectInProgressSubStateMachine+0x94c>)
    13e2:	4b04      	ldr	r3, [pc, #16]	; (13f4 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    13e4:	4798      	blx	r3
                            vTaskDelay(PacketTransmitDelayMs);
    13e6:	2064      	movs	r0, #100	; 0x64
    13e8:	4b19      	ldr	r3, [pc, #100]	; (1450 <MdmCnct_ConnectInProgressSubStateMachine+0x9a0>)
    13ea:	4798      	blx	r3
    13ec:	e7e7      	b.n	13be <MdmCnct_ConnectInProgressSubStateMachine+0x90e>
    13ee:	bf00      	nop
    13f0:	00008034 	.word	0x00008034
    13f4:	000025a9 	.word	0x000025a9
    13f8:	00008054 	.word	0x00008054
    13fc:	000086e8 	.word	0x000086e8
    1400:	20000204 	.word	0x20000204
    1404:	00005009 	.word	0x00005009
    1408:	00008084 	.word	0x00008084
    140c:	000080ac 	.word	0x000080ac
    1410:	000080d4 	.word	0x000080d4
    1414:	00008100 	.word	0x00008100
    1418:	0000813c 	.word	0x0000813c
    141c:	2000020c 	.word	0x2000020c
    1420:	20003470 	.word	0x20003470
    1424:	00005641 	.word	0x00005641
    1428:	00007e38 	.word	0x00007e38
    142c:	20000214 	.word	0x20000214
    1430:	0000081d 	.word	0x0000081d
    1434:	20003490 	.word	0x20003490
    1438:	000059a9 	.word	0x000059a9
    143c:	200034a0 	.word	0x200034a0
    1440:	000057c9 	.word	0x000057c9
    1444:	00007dac 	.word	0x00007dac
    1448:	00005331 	.word	0x00005331
    144c:	00007fb4 	.word	0x00007fb4
    1450:	00005fc1 	.word	0x00005fc1
    1454:	00007dd8 	.word	0x00007dd8
    1458:	00002565 	.word	0x00002565
    145c:	000081b0 	.word	0x000081b0
    1460:	00006afd 	.word	0x00006afd
    1464:	00007be8 	.word	0x00007be8
    1468:	00001ccd 	.word	0x00001ccd
    146c:	00001d49 	.word	0x00001d49

00001470 <MdmConnect_HttpConnectionSchedule>:
{
    1470:	b530      	push	{r4, r5, lr}
    1472:	b083      	sub	sp, #12
    switch (gHttpConnectionState)
    1474:	4b96      	ldr	r3, [pc, #600]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    1476:	781b      	ldrb	r3, [r3, #0]
    1478:	2b01      	cmp	r3, #1
    147a:	d012      	beq.n	14a2 <MdmConnect_HttpConnectionSchedule+0x32>
    147c:	b11b      	cbz	r3, 1486 <MdmConnect_HttpConnectionSchedule+0x16>
    147e:	2b02      	cmp	r3, #2
    1480:	d012      	beq.n	14a8 <MdmConnect_HttpConnectionSchedule+0x38>
}
    1482:	b003      	add	sp, #12
    1484:	bd30      	pop	{r4, r5, pc}
            if(isModemDiagDataBaseUpdated() != false)
    1486:	4b93      	ldr	r3, [pc, #588]	; (16d4 <MdmConnect_HttpConnectionSchedule+0x264>)
    1488:	4798      	blx	r3
    148a:	2800      	cmp	r0, #0
    148c:	d0f9      	beq.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectionState = MDM_HTTP_CONNECTION_IN_PROGRESS;
    148e:	4b90      	ldr	r3, [pc, #576]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    1490:	2201      	movs	r2, #1
    1492:	701a      	strb	r2, [r3, #0]
                gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    1494:	2200      	movs	r2, #0
    1496:	705a      	strb	r2, [r3, #1]
                gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1498:	709a      	strb	r2, [r3, #2]
                DEBUG_PRINT("Closing Active Connections");
    149a:	488f      	ldr	r0, [pc, #572]	; (16d8 <MdmConnect_HttpConnectionSchedule+0x268>)
    149c:	4b8f      	ldr	r3, [pc, #572]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    149e:	4798      	blx	r3
    14a0:	e7ef      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            MdmCnct_ConnectInProgressSubStateMachine();
    14a2:	4b8f      	ldr	r3, [pc, #572]	; (16e0 <MdmConnect_HttpConnectionSchedule+0x270>)
    14a4:	4798      	blx	r3
        break;
    14a6:	e7ec      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gHttpConnectedSubState)
    14a8:	4b89      	ldr	r3, [pc, #548]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    14aa:	78db      	ldrb	r3, [r3, #3]
    14ac:	2b08      	cmp	r3, #8
    14ae:	d8e8      	bhi.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
    14b0:	e8df f013 	tbh	[pc, r3, lsl #1]
    14b4:	000f0009 	.word	0x000f0009
    14b8:	00250017 	.word	0x00250017
    14bc:	0032002c 	.word	0x0032002c
    14c0:	00b9006e 	.word	0x00b9006e
    14c4:	00c7      	.short	0x00c7
            mdmCtrlr_FlushRxBuffer();
    14c6:	4b87      	ldr	r3, [pc, #540]	; (16e4 <MdmConnect_HttpConnectionSchedule+0x274>)
    14c8:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_IDLE_MONITOR_CONNECTION;
    14ca:	2201      	movs	r2, #1
    14cc:	4b80      	ldr	r3, [pc, #512]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    14ce:	70da      	strb	r2, [r3, #3]
    14d0:	e7d7      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            if(false != isPacketTransmitTimerExpired())
    14d2:	4b85      	ldr	r3, [pc, #532]	; (16e8 <MdmConnect_HttpConnectionSchedule+0x278>)
    14d4:	4798      	blx	r3
    14d6:	2800      	cmp	r0, #0
    14d8:	d0d3      	beq.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            	gHttpConnectedSubState = CONNECTED_PERIODIC_6SEC_TIMER_EXPIRED;
    14da:	2202      	movs	r2, #2
    14dc:	4b7c      	ldr	r3, [pc, #496]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    14de:	70da      	strb	r2, [r3, #3]
    14e0:	e7cf      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
        	xSemaphoreGive(SensorScanSemaphore);
    14e2:	2300      	movs	r3, #0
    14e4:	461a      	mov	r2, r3
    14e6:	4619      	mov	r1, r3
    14e8:	4880      	ldr	r0, [pc, #512]	; (16ec <MdmConnect_HttpConnectionSchedule+0x27c>)
    14ea:	6800      	ldr	r0, [r0, #0]
    14ec:	4c80      	ldr	r4, [pc, #512]	; (16f0 <MdmConnect_HttpConnectionSchedule+0x280>)
    14ee:	47a0      	blx	r4
        	gHttpConnectedSubState = CONNECTED_WAIT_FOR_DATA_FROM_SENSOR_TASK;
    14f0:	2203      	movs	r2, #3
    14f2:	4b77      	ldr	r3, [pc, #476]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    14f4:	70da      	strb	r2, [r3, #3]
        	DEBUG_PRINT("Notification sent from connection task");
    14f6:	487f      	ldr	r0, [pc, #508]	; (16f4 <MdmConnect_HttpConnectionSchedule+0x284>)
    14f8:	4b78      	ldr	r3, [pc, #480]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    14fa:	4798      	blx	r3
    14fc:	e7c1      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
			DEBUG_PRINT("Got the semaphore back in connection task");
    14fe:	487e      	ldr	r0, [pc, #504]	; (16f8 <MdmConnect_HttpConnectionSchedule+0x288>)
    1500:	4b76      	ldr	r3, [pc, #472]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    1502:	4798      	blx	r3
			gHttpConnectedSubState = CONNECTED_BUILD_DATA_PACKET_TO_SERVER;
    1504:	2204      	movs	r2, #4
    1506:	4b72      	ldr	r3, [pc, #456]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    1508:	70da      	strb	r2, [r3, #3]
    150a:	e7ba      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            buildDataPacketsToServer();
    150c:	4b7b      	ldr	r3, [pc, #492]	; (16fc <MdmConnect_HttpConnectionSchedule+0x28c>)
    150e:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_SEND_DATA_PACKETS_TO_SERVER;
    1510:	2205      	movs	r2, #5
    1512:	4b6f      	ldr	r3, [pc, #444]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    1514:	70da      	strb	r2, [r3, #3]
    1516:	e7b4      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1518:	4b79      	ldr	r3, [pc, #484]	; (1700 <MdmConnect_HttpConnectionSchedule+0x290>)
    151a:	6818      	ldr	r0, [r3, #0]
    151c:	4b79      	ldr	r3, [pc, #484]	; (1704 <MdmConnect_HttpConnectionSchedule+0x294>)
    151e:	4798      	blx	r3
    1520:	2800      	cmp	r0, #0
    1522:	d131      	bne.n	1588 <MdmConnect_HttpConnectionSchedule+0x118>
                if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1524:	2100      	movs	r1, #0
    1526:	4b78      	ldr	r3, [pc, #480]	; (1708 <MdmConnect_HttpConnectionSchedule+0x298>)
    1528:	6818      	ldr	r0, [r3, #0]
    152a:	4b78      	ldr	r3, [pc, #480]	; (170c <MdmConnect_HttpConnectionSchedule+0x29c>)
    152c:	4798      	blx	r3
    152e:	2801      	cmp	r0, #1
    1530:	d003      	beq.n	153a <MdmConnect_HttpConnectionSchedule+0xca>
                    DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1532:	4877      	ldr	r0, [pc, #476]	; (1710 <MdmConnect_HttpConnectionSchedule+0x2a0>)
    1534:	4b69      	ldr	r3, [pc, #420]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    1536:	4798      	blx	r3
    1538:	e7a3      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    153a:	2301      	movs	r3, #1
    153c:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KHTTP_GET;
    1540:	2318      	movs	r3, #24
    1542:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1546:	2300      	movs	r3, #0
    1548:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    154a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    154e:	4669      	mov	r1, sp
    1550:	486b      	ldr	r0, [pc, #428]	; (1700 <MdmConnect_HttpConnectionSchedule+0x290>)
    1552:	6800      	ldr	r0, [r0, #0]
    1554:	4c66      	ldr	r4, [pc, #408]	; (16f0 <MdmConnect_HttpConnectionSchedule+0x280>)
    1556:	47a0      	blx	r4
                    if(TxQueuePushStatus == pdPASS)
    1558:	2801      	cmp	r0, #1
    155a:	d007      	beq.n	156c <MdmConnect_HttpConnectionSchedule+0xfc>
                        DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    155c:	486d      	ldr	r0, [pc, #436]	; (1714 <MdmConnect_HttpConnectionSchedule+0x2a4>)
    155e:	4b5f      	ldr	r3, [pc, #380]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    1560:	4798      	blx	r3
                        vTaskDelay(TransmitDelayMs);
    1562:	f640 10c4 	movw	r0, #2500	; 0x9c4
    1566:	4b6c      	ldr	r3, [pc, #432]	; (1718 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    1568:	4798      	blx	r3
    156a:	e78a      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    156c:	2300      	movs	r3, #0
    156e:	461a      	mov	r2, r3
    1570:	4619      	mov	r1, r3
    1572:	4865      	ldr	r0, [pc, #404]	; (1708 <MdmConnect_HttpConnectionSchedule+0x298>)
    1574:	6800      	ldr	r0, [r0, #0]
    1576:	47a0      	blx	r4
                        gHttpConnectedSubState = CONNECTED_RECEIVE_RESPONSE_FROM_SERVER;
    1578:	2206      	movs	r2, #6
    157a:	4b55      	ldr	r3, [pc, #340]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    157c:	70da      	strb	r2, [r3, #3]
                        vTaskDelay(TransmitDelayMs);
    157e:	f640 10c4 	movw	r0, #2500	; 0x9c4
    1582:	4b65      	ldr	r3, [pc, #404]	; (1718 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    1584:	4798      	blx	r3
    1586:	e77c      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                DEBUG_PRINT("Transmit Queue is not empty");
    1588:	4864      	ldr	r0, [pc, #400]	; (171c <MdmConnect_HttpConnectionSchedule+0x2ac>)
    158a:	4b54      	ldr	r3, [pc, #336]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    158c:	4798      	blx	r3
    158e:	e778      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1590:	f241 3288 	movw	r2, #5000	; 0x1388
    1594:	4962      	ldr	r1, [pc, #392]	; (1720 <MdmConnect_HttpConnectionSchedule+0x2b0>)
    1596:	4b63      	ldr	r3, [pc, #396]	; (1724 <MdmConnect_HttpConnectionSchedule+0x2b4>)
    1598:	6818      	ldr	r0, [r3, #0]
    159a:	4b63      	ldr	r3, [pc, #396]	; (1728 <MdmConnect_HttpConnectionSchedule+0x2b8>)
    159c:	4798      	blx	r3
    159e:	2801      	cmp	r0, #1
    15a0:	d139      	bne.n	1616 <MdmConnect_HttpConnectionSchedule+0x1a6>
                if(ConnectionResponse.atCmd == CMD_AT_KHTTP_GET)
    15a2:	4b4b      	ldr	r3, [pc, #300]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    15a4:	7a1b      	ldrb	r3, [r3, #8]
    15a6:	2b18      	cmp	r3, #24
    15a8:	d127      	bne.n	15fa <MdmConnect_HttpConnectionSchedule+0x18a>
                    if(ConnectionResponse.length > 23)
    15aa:	4b49      	ldr	r3, [pc, #292]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    15ac:	895c      	ldrh	r4, [r3, #10]
    15ae:	2c17      	cmp	r4, #23
    15b0:	d917      	bls.n	15e2 <MdmConnect_HttpConnectionSchedule+0x172>
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    15b2:	68dd      	ldr	r5, [r3, #12]
    if(0==memcmp(response,"CONNECT\r\nHTTP/1.1 200 OK",24))
    15b4:	2218      	movs	r2, #24
    15b6:	495d      	ldr	r1, [pc, #372]	; (172c <MdmConnect_HttpConnectionSchedule+0x2bc>)
    15b8:	4628      	mov	r0, r5
    15ba:	4b5d      	ldr	r3, [pc, #372]	; (1730 <MdmConnect_HttpConnectionSchedule+0x2c0>)
    15bc:	4798      	blx	r3
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    15be:	b118      	cbz	r0, 15c8 <MdmConnect_HttpConnectionSchedule+0x158>
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    15c0:	2207      	movs	r2, #7
    15c2:	4b43      	ldr	r3, [pc, #268]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    15c4:	70da      	strb	r2, [r3, #3]
    15c6:	e00f      	b.n	15e8 <MdmConnect_HttpConnectionSchedule+0x178>
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    15c8:	4621      	mov	r1, r4
    15ca:	4628      	mov	r0, r5
    15cc:	4b59      	ldr	r3, [pc, #356]	; (1734 <MdmConnect_HttpConnectionSchedule+0x2c4>)
    15ce:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    15d0:	4859      	ldr	r0, [pc, #356]	; (1738 <MdmConnect_HttpConnectionSchedule+0x2c8>)
    15d2:	4b42      	ldr	r3, [pc, #264]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    15d4:	4798      	blx	r3
                            clearPacketTransmitTimerExpiryFlag();
    15d6:	4b59      	ldr	r3, [pc, #356]	; (173c <MdmConnect_HttpConnectionSchedule+0x2cc>)
    15d8:	4798      	blx	r3
                            gHttpConnectedSubState = CONNECTED_IDLE_MONITOR_CONNECTION;
    15da:	2201      	movs	r2, #1
    15dc:	4b3c      	ldr	r3, [pc, #240]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    15de:	70da      	strb	r2, [r3, #3]
    15e0:	e002      	b.n	15e8 <MdmConnect_HttpConnectionSchedule+0x178>
                        gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    15e2:	2207      	movs	r2, #7
    15e4:	4b3a      	ldr	r3, [pc, #232]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    15e6:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    15e8:	4b39      	ldr	r3, [pc, #228]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    15ea:	68d8      	ldr	r0, [r3, #12]
    15ec:	4b54      	ldr	r3, [pc, #336]	; (1740 <MdmConnect_HttpConnectionSchedule+0x2d0>)
    15ee:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    15f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    15f4:	4b48      	ldr	r3, [pc, #288]	; (1718 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    15f6:	4798      	blx	r3
    15f8:	e743      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Failed to receive connection response in RX mode");
    15fa:	4852      	ldr	r0, [pc, #328]	; (1744 <MdmConnect_HttpConnectionSchedule+0x2d4>)
    15fc:	4b37      	ldr	r3, [pc, #220]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    15fe:	4798      	blx	r3
                    gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    1600:	4b33      	ldr	r3, [pc, #204]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    1602:	2207      	movs	r2, #7
    1604:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    1606:	68d8      	ldr	r0, [r3, #12]
    1608:	4b4d      	ldr	r3, [pc, #308]	; (1740 <MdmConnect_HttpConnectionSchedule+0x2d0>)
    160a:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    160c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1610:	4b41      	ldr	r3, [pc, #260]	; (1718 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    1612:	4798      	blx	r3
    1614:	e735      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    1616:	2207      	movs	r2, #7
    1618:	4b2d      	ldr	r3, [pc, #180]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    161a:	70da      	strb	r2, [r3, #3]
                vTaskDelay(reTransmissionDelayMs);
    161c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1620:	4b3d      	ldr	r3, [pc, #244]	; (1718 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    1622:	4798      	blx	r3
    1624:	e72d      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1626:	4b2a      	ldr	r3, [pc, #168]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    1628:	2208      	movs	r2, #8
    162a:	70da      	strb	r2, [r3, #3]
            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    162c:	2200      	movs	r2, #0
    162e:	711a      	strb	r2, [r3, #4]
            sessionIdCount = 5;
    1630:	2105      	movs	r1, #5
    1632:	7159      	strb	r1, [r3, #5]
            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1634:	709a      	strb	r2, [r3, #2]
            DEBUG_PRINT("\r\nPerforming the Error Recovery\r\n");
    1636:	4844      	ldr	r0, [pc, #272]	; (1748 <MdmConnect_HttpConnectionSchedule+0x2d8>)
    1638:	4c28      	ldr	r4, [pc, #160]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    163a:	47a0      	blx	r4
            DEBUG_PRINT("Closing the active connection");
    163c:	4843      	ldr	r0, [pc, #268]	; (174c <MdmConnect_HttpConnectionSchedule+0x2dc>)
    163e:	47a0      	blx	r4
    1640:	e71f      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gErrorRecoveryState)
    1642:	4b23      	ldr	r3, [pc, #140]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    1644:	791b      	ldrb	r3, [r3, #4]
    1646:	2b01      	cmp	r3, #1
    1648:	f000 810e 	beq.w	1868 <MdmConnect_HttpConnectionSchedule+0x3f8>
    164c:	b323      	cbz	r3, 1698 <MdmConnect_HttpConnectionSchedule+0x228>
    164e:	2b02      	cmp	r3, #2
    1650:	f47f af17 	bne.w	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1654:	4b1e      	ldr	r3, [pc, #120]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    1656:	789b      	ldrb	r3, [r3, #2]
    1658:	2b00      	cmp	r3, #0
    165a:	f000 81dd 	beq.w	1a18 <MdmConnect_HttpConnectionSchedule+0x5a8>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    165e:	2b01      	cmp	r3, #1
    1660:	f47f af0f 	bne.w	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1664:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1668:	492d      	ldr	r1, [pc, #180]	; (1720 <MdmConnect_HttpConnectionSchedule+0x2b0>)
    166a:	4b2e      	ldr	r3, [pc, #184]	; (1724 <MdmConnect_HttpConnectionSchedule+0x2b4>)
    166c:	6818      	ldr	r0, [r3, #0]
    166e:	4b2e      	ldr	r3, [pc, #184]	; (1728 <MdmConnect_HttpConnectionSchedule+0x2b8>)
    1670:	4798      	blx	r3
    1672:	2801      	cmp	r0, #1
    1674:	f000 820e 	beq.w	1a94 <MdmConnect_HttpConnectionSchedule+0x624>
                    if(forcedModemRebootCnt <= 3)
    1678:	4b15      	ldr	r3, [pc, #84]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    167a:	7c5b      	ldrb	r3, [r3, #17]
    167c:	2b03      	cmp	r3, #3
    167e:	f240 8259 	bls.w	1b34 <MdmConnect_HttpConnectionSchedule+0x6c4>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    1682:	4833      	ldr	r0, [pc, #204]	; (1750 <MdmConnect_HttpConnectionSchedule+0x2e0>)
    1684:	4c15      	ldr	r4, [pc, #84]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    1686:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    1688:	4832      	ldr	r0, [pc, #200]	; (1754 <MdmConnect_HttpConnectionSchedule+0x2e4>)
    168a:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    168c:	2200      	movs	r2, #0
    168e:	4b10      	ldr	r3, [pc, #64]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    1690:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    1692:	4b31      	ldr	r3, [pc, #196]	; (1758 <MdmConnect_HttpConnectionSchedule+0x2e8>)
    1694:	4798      	blx	r3
}
    1696:	e6f4      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1698:	4b0d      	ldr	r3, [pc, #52]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    169a:	789b      	ldrb	r3, [r3, #2]
    169c:	2b00      	cmp	r3, #0
    169e:	f040 8096 	bne.w	17ce <MdmConnect_HttpConnectionSchedule+0x35e>
                if(sessionIdCount > 0)
    16a2:	4b0b      	ldr	r3, [pc, #44]	; (16d0 <MdmConnect_HttpConnectionSchedule+0x260>)
    16a4:	795b      	ldrb	r3, [r3, #5]
    16a6:	2b00      	cmp	r3, #0
    16a8:	f000 8088 	beq.w	17bc <MdmConnect_HttpConnectionSchedule+0x34c>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    16ac:	4b14      	ldr	r3, [pc, #80]	; (1700 <MdmConnect_HttpConnectionSchedule+0x290>)
    16ae:	6818      	ldr	r0, [r3, #0]
    16b0:	4b14      	ldr	r3, [pc, #80]	; (1704 <MdmConnect_HttpConnectionSchedule+0x294>)
    16b2:	4798      	blx	r3
    16b4:	2800      	cmp	r0, #0
    16b6:	d17d      	bne.n	17b4 <MdmConnect_HttpConnectionSchedule+0x344>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    16b8:	2100      	movs	r1, #0
    16ba:	4b13      	ldr	r3, [pc, #76]	; (1708 <MdmConnect_HttpConnectionSchedule+0x298>)
    16bc:	6818      	ldr	r0, [r3, #0]
    16be:	4b13      	ldr	r3, [pc, #76]	; (170c <MdmConnect_HttpConnectionSchedule+0x29c>)
    16c0:	4798      	blx	r3
    16c2:	2801      	cmp	r0, #1
    16c4:	d04a      	beq.n	175c <MdmConnect_HttpConnectionSchedule+0x2ec>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    16c6:	4812      	ldr	r0, [pc, #72]	; (1710 <MdmConnect_HttpConnectionSchedule+0x2a0>)
    16c8:	4b04      	ldr	r3, [pc, #16]	; (16dc <MdmConnect_HttpConnectionSchedule+0x26c>)
    16ca:	4798      	blx	r3
    16cc:	e6d9      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
    16ce:	bf00      	nop
    16d0:	20000204 	.word	0x20000204
    16d4:	00001ff1 	.word	0x00001ff1
    16d8:	000081b8 	.word	0x000081b8
    16dc:	000025a9 	.word	0x000025a9
    16e0:	00000ab1 	.word	0x00000ab1
    16e4:	00001d49 	.word	0x00001d49
    16e8:	000022f1 	.word	0x000022f1
    16ec:	2000349c 	.word	0x2000349c
    16f0:	00005331 	.word	0x00005331
    16f4:	000081d4 	.word	0x000081d4
    16f8:	000081fc 	.word	0x000081fc
    16fc:	000008a5 	.word	0x000008a5
    1700:	20003490 	.word	0x20003490
    1704:	000059a9 	.word	0x000059a9
    1708:	200034a0 	.word	0x200034a0
    170c:	000057c9 	.word	0x000057c9
    1710:	00007dac 	.word	0x00007dac
    1714:	00007fb4 	.word	0x00007fb4
    1718:	00005fc1 	.word	0x00005fc1
    171c:	00007dd8 	.word	0x00007dd8
    1720:	2000020c 	.word	0x2000020c
    1724:	20003470 	.word	0x20003470
    1728:	00005641 	.word	0x00005641
    172c:	00008228 	.word	0x00008228
    1730:	00006afd 	.word	0x00006afd
    1734:	00002565 	.word	0x00002565
    1738:	000086e8 	.word	0x000086e8
    173c:	000022e5 	.word	0x000022e5
    1740:	00005009 	.word	0x00005009
    1744:	00007e38 	.word	0x00007e38
    1748:	00008244 	.word	0x00008244
    174c:	00008268 	.word	0x00008268
    1750:	000082e8 	.word	0x000082e8
    1754:	0000831c 	.word	0x0000831c
    1758:	0000276d 	.word	0x0000276d
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    175c:	2301      	movs	r3, #1
    175e:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
    1762:	4b8f      	ldr	r3, [pc, #572]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1764:	7958      	ldrb	r0, [r3, #5]
    1766:	4b8f      	ldr	r3, [pc, #572]	; (19a4 <MdmConnect_HttpConnectionSchedule+0x534>)
    1768:	4798      	blx	r3
    176a:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
    176e:	2300      	movs	r3, #0
    1770:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1772:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1776:	4669      	mov	r1, sp
    1778:	488b      	ldr	r0, [pc, #556]	; (19a8 <MdmConnect_HttpConnectionSchedule+0x538>)
    177a:	6800      	ldr	r0, [r0, #0]
    177c:	4c8b      	ldr	r4, [pc, #556]	; (19ac <MdmConnect_HttpConnectionSchedule+0x53c>)
    177e:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
    1780:	2801      	cmp	r0, #1
    1782:	d007      	beq.n	1794 <MdmConnect_HttpConnectionSchedule+0x324>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    1784:	488a      	ldr	r0, [pc, #552]	; (19b0 <MdmConnect_HttpConnectionSchedule+0x540>)
    1786:	4b8b      	ldr	r3, [pc, #556]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    1788:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
    178a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    178e:	4b8a      	ldr	r3, [pc, #552]	; (19b8 <MdmConnect_HttpConnectionSchedule+0x548>)
    1790:	4798      	blx	r3
    1792:	e676      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
    1794:	2300      	movs	r3, #0
    1796:	461a      	mov	r2, r3
    1798:	4619      	mov	r1, r3
    179a:	4888      	ldr	r0, [pc, #544]	; (19bc <MdmConnect_HttpConnectionSchedule+0x54c>)
    179c:	6800      	ldr	r0, [r0, #0]
    179e:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    17a0:	4b7f      	ldr	r3, [pc, #508]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    17a2:	2201      	movs	r2, #1
    17a4:	709a      	strb	r2, [r3, #2]
                                gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    17a6:	2208      	movs	r2, #8
    17a8:	70da      	strb	r2, [r3, #3]
                                vTaskDelay(TransmitDelayMs);
    17aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    17ae:	4b82      	ldr	r3, [pc, #520]	; (19b8 <MdmConnect_HttpConnectionSchedule+0x548>)
    17b0:	4798      	blx	r3
    17b2:	e666      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Transmit Queue is not empty");
    17b4:	4882      	ldr	r0, [pc, #520]	; (19c0 <MdmConnect_HttpConnectionSchedule+0x550>)
    17b6:	4b7f      	ldr	r3, [pc, #508]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    17b8:	4798      	blx	r3
    17ba:	e662      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("No More Active Connections to close");
    17bc:	4881      	ldr	r0, [pc, #516]	; (19c4 <MdmConnect_HttpConnectionSchedule+0x554>)
    17be:	4b7d      	ldr	r3, [pc, #500]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    17c0:	4798      	blx	r3
                    gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    17c2:	4b77      	ldr	r3, [pc, #476]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    17c4:	2201      	movs	r2, #1
    17c6:	711a      	strb	r2, [r3, #4]
                    gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    17c8:	2208      	movs	r2, #8
    17ca:	70da      	strb	r2, [r3, #3]
    17cc:	e659      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    17ce:	2b01      	cmp	r3, #1
    17d0:	f47f ae57 	bne.w	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    17d4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    17d8:	497b      	ldr	r1, [pc, #492]	; (19c8 <MdmConnect_HttpConnectionSchedule+0x558>)
    17da:	4b7c      	ldr	r3, [pc, #496]	; (19cc <MdmConnect_HttpConnectionSchedule+0x55c>)
    17dc:	6818      	ldr	r0, [r3, #0]
    17de:	4b7c      	ldr	r3, [pc, #496]	; (19d0 <MdmConnect_HttpConnectionSchedule+0x560>)
    17e0:	4798      	blx	r3
    17e2:	2801      	cmp	r0, #1
    17e4:	d00f      	beq.n	1806 <MdmConnect_HttpConnectionSchedule+0x396>
                    if(forcedModemRebootCnt <= 3)
    17e6:	4b6e      	ldr	r3, [pc, #440]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    17e8:	7c5b      	ldrb	r3, [r3, #17]
    17ea:	2b03      	cmp	r3, #3
    17ec:	d831      	bhi.n	1852 <MdmConnect_HttpConnectionSchedule+0x3e2>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    17ee:	4879      	ldr	r0, [pc, #484]	; (19d4 <MdmConnect_HttpConnectionSchedule+0x564>)
    17f0:	4c70      	ldr	r4, [pc, #448]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    17f2:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    17f4:	4878      	ldr	r0, [pc, #480]	; (19d8 <MdmConnect_HttpConnectionSchedule+0x568>)
    17f6:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    17f8:	4a69      	ldr	r2, [pc, #420]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    17fa:	7c53      	ldrb	r3, [r2, #17]
    17fc:	3301      	adds	r3, #1
    17fe:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    1800:	4b76      	ldr	r3, [pc, #472]	; (19dc <MdmConnect_HttpConnectionSchedule+0x56c>)
    1802:	4798      	blx	r3
    1804:	e63d      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
    1806:	4b66      	ldr	r3, [pc, #408]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1808:	7a1d      	ldrb	r5, [r3, #8]
    180a:	795c      	ldrb	r4, [r3, #5]
    180c:	4620      	mov	r0, r4
    180e:	4b65      	ldr	r3, [pc, #404]	; (19a4 <MdmConnect_HttpConnectionSchedule+0x534>)
    1810:	4798      	blx	r3
    1812:	4285      	cmp	r5, r0
    1814:	d113      	bne.n	183e <MdmConnect_HttpConnectionSchedule+0x3ce>
                        if(sessionIdCount > 0)
    1816:	b14c      	cbz	r4, 182c <MdmConnect_HttpConnectionSchedule+0x3bc>
                            sessionIdCount--;
    1818:	4b61      	ldr	r3, [pc, #388]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    181a:	3c01      	subs	r4, #1
    181c:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    181e:	2200      	movs	r2, #0
    1820:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1822:	4b5f      	ldr	r3, [pc, #380]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1824:	68d8      	ldr	r0, [r3, #12]
    1826:	4b6e      	ldr	r3, [pc, #440]	; (19e0 <MdmConnect_HttpConnectionSchedule+0x570>)
    1828:	4798      	blx	r3
    182a:	e62a      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                            gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    182c:	4b5c      	ldr	r3, [pc, #368]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    182e:	2201      	movs	r2, #1
    1830:	711a      	strb	r2, [r3, #4]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1832:	2208      	movs	r2, #8
    1834:	70da      	strb	r2, [r3, #3]
                            DEBUG_PRINT("Closed All Active Connections");
    1836:	486b      	ldr	r0, [pc, #428]	; (19e4 <MdmConnect_HttpConnectionSchedule+0x574>)
    1838:	4b5e      	ldr	r3, [pc, #376]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    183a:	4798      	blx	r3
    183c:	e7f1      	b.n	1822 <MdmConnect_HttpConnectionSchedule+0x3b2>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    183e:	486a      	ldr	r0, [pc, #424]	; (19e8 <MdmConnect_HttpConnectionSchedule+0x578>)
    1840:	4b5c      	ldr	r3, [pc, #368]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    1842:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1844:	4b56      	ldr	r3, [pc, #344]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1846:	2200      	movs	r2, #0
    1848:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    184a:	68d8      	ldr	r0, [r3, #12]
    184c:	4b64      	ldr	r3, [pc, #400]	; (19e0 <MdmConnect_HttpConnectionSchedule+0x570>)
    184e:	4798      	blx	r3
    1850:	e617      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    1852:	4866      	ldr	r0, [pc, #408]	; (19ec <MdmConnect_HttpConnectionSchedule+0x57c>)
    1854:	4c57      	ldr	r4, [pc, #348]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    1856:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    1858:	4865      	ldr	r0, [pc, #404]	; (19f0 <MdmConnect_HttpConnectionSchedule+0x580>)
    185a:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    185c:	2200      	movs	r2, #0
    185e:	4b50      	ldr	r3, [pc, #320]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1860:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    1862:	4b64      	ldr	r3, [pc, #400]	; (19f4 <MdmConnect_HttpConnectionSchedule+0x584>)
    1864:	4798      	blx	r3
    1866:	e60c      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1868:	4b4d      	ldr	r3, [pc, #308]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    186a:	789b      	ldrb	r3, [r3, #2]
    186c:	b1db      	cbz	r3, 18a6 <MdmConnect_HttpConnectionSchedule+0x436>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    186e:	2b01      	cmp	r3, #1
    1870:	f47f ae07 	bne.w	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1874:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1878:	4953      	ldr	r1, [pc, #332]	; (19c8 <MdmConnect_HttpConnectionSchedule+0x558>)
    187a:	4b54      	ldr	r3, [pc, #336]	; (19cc <MdmConnect_HttpConnectionSchedule+0x55c>)
    187c:	6818      	ldr	r0, [r3, #0]
    187e:	4b54      	ldr	r3, [pc, #336]	; (19d0 <MdmConnect_HttpConnectionSchedule+0x560>)
    1880:	4798      	blx	r3
    1882:	2801      	cmp	r0, #1
    1884:	d04d      	beq.n	1922 <MdmConnect_HttpConnectionSchedule+0x4b2>
                    if(forcedModemRebootCnt <= 3)
    1886:	4b46      	ldr	r3, [pc, #280]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1888:	7c5b      	ldrb	r3, [r3, #17]
    188a:	2b03      	cmp	r3, #3
    188c:	d87c      	bhi.n	1988 <MdmConnect_HttpConnectionSchedule+0x518>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    188e:	4851      	ldr	r0, [pc, #324]	; (19d4 <MdmConnect_HttpConnectionSchedule+0x564>)
    1890:	4c48      	ldr	r4, [pc, #288]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    1892:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    1894:	4850      	ldr	r0, [pc, #320]	; (19d8 <MdmConnect_HttpConnectionSchedule+0x568>)
    1896:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    1898:	4a41      	ldr	r2, [pc, #260]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    189a:	7c53      	ldrb	r3, [r2, #17]
    189c:	3301      	adds	r3, #1
    189e:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    18a0:	4b4e      	ldr	r3, [pc, #312]	; (19dc <MdmConnect_HttpConnectionSchedule+0x56c>)
    18a2:	4798      	blx	r3
    18a4:	e5ed      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    18a6:	4b40      	ldr	r3, [pc, #256]	; (19a8 <MdmConnect_HttpConnectionSchedule+0x538>)
    18a8:	6818      	ldr	r0, [r3, #0]
    18aa:	4b53      	ldr	r3, [pc, #332]	; (19f8 <MdmConnect_HttpConnectionSchedule+0x588>)
    18ac:	4798      	blx	r3
    18ae:	2800      	cmp	r0, #0
    18b0:	d133      	bne.n	191a <MdmConnect_HttpConnectionSchedule+0x4aa>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    18b2:	2100      	movs	r1, #0
    18b4:	4b41      	ldr	r3, [pc, #260]	; (19bc <MdmConnect_HttpConnectionSchedule+0x54c>)
    18b6:	6818      	ldr	r0, [r3, #0]
    18b8:	4b50      	ldr	r3, [pc, #320]	; (19fc <MdmConnect_HttpConnectionSchedule+0x58c>)
    18ba:	4798      	blx	r3
    18bc:	2801      	cmp	r0, #1
    18be:	d003      	beq.n	18c8 <MdmConnect_HttpConnectionSchedule+0x458>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    18c0:	484f      	ldr	r0, [pc, #316]	; (1a00 <MdmConnect_HttpConnectionSchedule+0x590>)
    18c2:	4b3c      	ldr	r3, [pc, #240]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    18c4:	4798      	blx	r3
    18c6:	e5dc      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    18c8:	2301      	movs	r3, #1
    18ca:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
    18ce:	231a      	movs	r3, #26
    18d0:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    18d4:	2300      	movs	r3, #0
    18d6:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    18d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    18dc:	4669      	mov	r1, sp
    18de:	4832      	ldr	r0, [pc, #200]	; (19a8 <MdmConnect_HttpConnectionSchedule+0x538>)
    18e0:	6800      	ldr	r0, [r0, #0]
    18e2:	4c32      	ldr	r4, [pc, #200]	; (19ac <MdmConnect_HttpConnectionSchedule+0x53c>)
    18e4:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    18e6:	2801      	cmp	r0, #1
    18e8:	d007      	beq.n	18fa <MdmConnect_HttpConnectionSchedule+0x48a>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    18ea:	4831      	ldr	r0, [pc, #196]	; (19b0 <MdmConnect_HttpConnectionSchedule+0x540>)
    18ec:	4b31      	ldr	r3, [pc, #196]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    18ee:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    18f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    18f4:	4b30      	ldr	r3, [pc, #192]	; (19b8 <MdmConnect_HttpConnectionSchedule+0x548>)
    18f6:	4798      	blx	r3
    18f8:	e5c3      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    18fa:	2300      	movs	r3, #0
    18fc:	461a      	mov	r2, r3
    18fe:	4619      	mov	r1, r3
    1900:	482e      	ldr	r0, [pc, #184]	; (19bc <MdmConnect_HttpConnectionSchedule+0x54c>)
    1902:	6800      	ldr	r0, [r0, #0]
    1904:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1906:	4b26      	ldr	r3, [pc, #152]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1908:	2201      	movs	r2, #1
    190a:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    190c:	2208      	movs	r2, #8
    190e:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    1910:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1914:	4b28      	ldr	r3, [pc, #160]	; (19b8 <MdmConnect_HttpConnectionSchedule+0x548>)
    1916:	4798      	blx	r3
    1918:	e5b3      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    191a:	4829      	ldr	r0, [pc, #164]	; (19c0 <MdmConnect_HttpConnectionSchedule+0x550>)
    191c:	4b25      	ldr	r3, [pc, #148]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    191e:	4798      	blx	r3
    1920:	e5af      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
    1922:	4b1f      	ldr	r3, [pc, #124]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1924:	7a1b      	ldrb	r3, [r3, #8]
    1926:	2b1a      	cmp	r3, #26
    1928:	d124      	bne.n	1974 <MdmConnect_HttpConnectionSchedule+0x504>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    192a:	4b1d      	ldr	r3, [pc, #116]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    192c:	68d8      	ldr	r0, [r3, #12]
    192e:	4b35      	ldr	r3, [pc, #212]	; (1a04 <MdmConnect_HttpConnectionSchedule+0x594>)
    1930:	4798      	blx	r3
    1932:	b1a0      	cbz	r0, 195e <MdmConnect_HttpConnectionSchedule+0x4ee>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
    1934:	4834      	ldr	r0, [pc, #208]	; (1a08 <MdmConnect_HttpConnectionSchedule+0x598>)
    1936:	4d1f      	ldr	r5, [pc, #124]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    1938:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    193a:	4c19      	ldr	r4, [pc, #100]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    193c:	8961      	ldrh	r1, [r4, #10]
    193e:	68e0      	ldr	r0, [r4, #12]
    1940:	4b32      	ldr	r3, [pc, #200]	; (1a0c <MdmConnect_HttpConnectionSchedule+0x59c>)
    1942:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    1944:	4832      	ldr	r0, [pc, #200]	; (1a10 <MdmConnect_HttpConnectionSchedule+0x5a0>)
    1946:	47a8      	blx	r5
                            gErrorRecoveryState = PDP_PERFORM_PS_CONNECTION_DETACH;
    1948:	2302      	movs	r3, #2
    194a:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    194c:	2300      	movs	r3, #0
    194e:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1950:	2308      	movs	r3, #8
    1952:	70e3      	strb	r3, [r4, #3]
                        vPortFree(ConnectionResponse.response);
    1954:	4b12      	ldr	r3, [pc, #72]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1956:	68d8      	ldr	r0, [r3, #12]
    1958:	4b21      	ldr	r3, [pc, #132]	; (19e0 <MdmConnect_HttpConnectionSchedule+0x570>)
    195a:	4798      	blx	r3
    195c:	e591      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                            DEBUG_PRINT("Expected Response Not Received...");
    195e:	482d      	ldr	r0, [pc, #180]	; (1a14 <MdmConnect_HttpConnectionSchedule+0x5a4>)
    1960:	4c14      	ldr	r4, [pc, #80]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    1962:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1964:	482a      	ldr	r0, [pc, #168]	; (1a10 <MdmConnect_HttpConnectionSchedule+0x5a0>)
    1966:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1968:	2200      	movs	r2, #0
    196a:	4b0d      	ldr	r3, [pc, #52]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    196c:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    196e:	4b1b      	ldr	r3, [pc, #108]	; (19dc <MdmConnect_HttpConnectionSchedule+0x56c>)
    1970:	4798      	blx	r3
    1972:	e7ef      	b.n	1954 <MdmConnect_HttpConnectionSchedule+0x4e4>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1974:	481c      	ldr	r0, [pc, #112]	; (19e8 <MdmConnect_HttpConnectionSchedule+0x578>)
    1976:	4b0f      	ldr	r3, [pc, #60]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    1978:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    197a:	4b09      	ldr	r3, [pc, #36]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    197c:	2200      	movs	r2, #0
    197e:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1980:	68d8      	ldr	r0, [r3, #12]
    1982:	4b17      	ldr	r3, [pc, #92]	; (19e0 <MdmConnect_HttpConnectionSchedule+0x570>)
    1984:	4798      	blx	r3
    1986:	e57c      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    1988:	4818      	ldr	r0, [pc, #96]	; (19ec <MdmConnect_HttpConnectionSchedule+0x57c>)
    198a:	4c0a      	ldr	r4, [pc, #40]	; (19b4 <MdmConnect_HttpConnectionSchedule+0x544>)
    198c:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    198e:	4818      	ldr	r0, [pc, #96]	; (19f0 <MdmConnect_HttpConnectionSchedule+0x580>)
    1990:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    1992:	2200      	movs	r2, #0
    1994:	4b02      	ldr	r3, [pc, #8]	; (19a0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1996:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    1998:	4b16      	ldr	r3, [pc, #88]	; (19f4 <MdmConnect_HttpConnectionSchedule+0x584>)
    199a:	4798      	blx	r3
    199c:	e571      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
    199e:	bf00      	nop
    19a0:	20000204 	.word	0x20000204
    19a4:	00000a05 	.word	0x00000a05
    19a8:	20003490 	.word	0x20003490
    19ac:	00005331 	.word	0x00005331
    19b0:	00007d78 	.word	0x00007d78
    19b4:	000025a9 	.word	0x000025a9
    19b8:	00005fc1 	.word	0x00005fc1
    19bc:	200034a0 	.word	0x200034a0
    19c0:	00007dd8 	.word	0x00007dd8
    19c4:	00007df4 	.word	0x00007df4
    19c8:	2000020c 	.word	0x2000020c
    19cc:	20003470 	.word	0x20003470
    19d0:	00005641 	.word	0x00005641
    19d4:	00008288 	.word	0x00008288
    19d8:	000082a4 	.word	0x000082a4
    19dc:	00000a85 	.word	0x00000a85
    19e0:	00005009 	.word	0x00005009
    19e4:	00007e18 	.word	0x00007e18
    19e8:	00007e38 	.word	0x00007e38
    19ec:	000082e8 	.word	0x000082e8
    19f0:	0000831c 	.word	0x0000831c
    19f4:	0000276d 	.word	0x0000276d
    19f8:	000059a9 	.word	0x000059a9
    19fc:	000057c9 	.word	0x000057c9
    1a00:	00007dac 	.word	0x00007dac
    1a04:	00000a45 	.word	0x00000a45
    1a08:	00007e6c 	.word	0x00007e6c
    1a0c:	00002565 	.word	0x00002565
    1a10:	000086e8 	.word	0x000086e8
    1a14:	00007e8c 	.word	0x00007e8c
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1a18:	4b4c      	ldr	r3, [pc, #304]	; (1b4c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    1a1a:	6818      	ldr	r0, [r3, #0]
    1a1c:	4b4c      	ldr	r3, [pc, #304]	; (1b50 <MdmConnect_HttpConnectionSchedule+0x6e0>)
    1a1e:	4798      	blx	r3
    1a20:	2800      	cmp	r0, #0
    1a22:	d133      	bne.n	1a8c <MdmConnect_HttpConnectionSchedule+0x61c>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1a24:	2100      	movs	r1, #0
    1a26:	4b4b      	ldr	r3, [pc, #300]	; (1b54 <MdmConnect_HttpConnectionSchedule+0x6e4>)
    1a28:	6818      	ldr	r0, [r3, #0]
    1a2a:	4b4b      	ldr	r3, [pc, #300]	; (1b58 <MdmConnect_HttpConnectionSchedule+0x6e8>)
    1a2c:	4798      	blx	r3
    1a2e:	2801      	cmp	r0, #1
    1a30:	d003      	beq.n	1a3a <MdmConnect_HttpConnectionSchedule+0x5ca>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1a32:	484a      	ldr	r0, [pc, #296]	; (1b5c <MdmConnect_HttpConnectionSchedule+0x6ec>)
    1a34:	4b4a      	ldr	r3, [pc, #296]	; (1b60 <MdmConnect_HttpConnectionSchedule+0x6f0>)
    1a36:	4798      	blx	r3
    1a38:	e523      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1a3a:	2301      	movs	r3, #1
    1a3c:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
    1a40:	231b      	movs	r3, #27
    1a42:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1a46:	2300      	movs	r3, #0
    1a48:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1a4a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1a4e:	4669      	mov	r1, sp
    1a50:	483e      	ldr	r0, [pc, #248]	; (1b4c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    1a52:	6800      	ldr	r0, [r0, #0]
    1a54:	4c43      	ldr	r4, [pc, #268]	; (1b64 <MdmConnect_HttpConnectionSchedule+0x6f4>)
    1a56:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1a58:	2801      	cmp	r0, #1
    1a5a:	d007      	beq.n	1a6c <MdmConnect_HttpConnectionSchedule+0x5fc>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    1a5c:	4842      	ldr	r0, [pc, #264]	; (1b68 <MdmConnect_HttpConnectionSchedule+0x6f8>)
    1a5e:	4b40      	ldr	r3, [pc, #256]	; (1b60 <MdmConnect_HttpConnectionSchedule+0x6f0>)
    1a60:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1a62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1a66:	4b41      	ldr	r3, [pc, #260]	; (1b6c <MdmConnect_HttpConnectionSchedule+0x6fc>)
    1a68:	4798      	blx	r3
    1a6a:	e50a      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1a6c:	2300      	movs	r3, #0
    1a6e:	461a      	mov	r2, r3
    1a70:	4619      	mov	r1, r3
    1a72:	4838      	ldr	r0, [pc, #224]	; (1b54 <MdmConnect_HttpConnectionSchedule+0x6e4>)
    1a74:	6800      	ldr	r0, [r0, #0]
    1a76:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1a78:	4b3d      	ldr	r3, [pc, #244]	; (1b70 <MdmConnect_HttpConnectionSchedule+0x700>)
    1a7a:	2201      	movs	r2, #1
    1a7c:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1a7e:	2208      	movs	r2, #8
    1a80:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    1a82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1a86:	4b39      	ldr	r3, [pc, #228]	; (1b6c <MdmConnect_HttpConnectionSchedule+0x6fc>)
    1a88:	4798      	blx	r3
    1a8a:	e4fa      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1a8c:	4839      	ldr	r0, [pc, #228]	; (1b74 <MdmConnect_HttpConnectionSchedule+0x704>)
    1a8e:	4b34      	ldr	r3, [pc, #208]	; (1b60 <MdmConnect_HttpConnectionSchedule+0x6f0>)
    1a90:	4798      	blx	r3
    1a92:	e4f6      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
    1a94:	4b36      	ldr	r3, [pc, #216]	; (1b70 <MdmConnect_HttpConnectionSchedule+0x700>)
    1a96:	7a1b      	ldrb	r3, [r3, #8]
    1a98:	2b1b      	cmp	r3, #27
    1a9a:	d13f      	bne.n	1b1c <MdmConnect_HttpConnectionSchedule+0x6ac>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    1a9c:	4b34      	ldr	r3, [pc, #208]	; (1b70 <MdmConnect_HttpConnectionSchedule+0x700>)
    1a9e:	68d8      	ldr	r0, [r3, #12]
    1aa0:	4b35      	ldr	r3, [pc, #212]	; (1b78 <MdmConnect_HttpConnectionSchedule+0x708>)
    1aa2:	4798      	blx	r3
    1aa4:	2800      	cmp	r0, #0
    1aa6:	d02b      	beq.n	1b00 <MdmConnect_HttpConnectionSchedule+0x690>
                            DEBUG_PRINT("Detached the PDP PS");
    1aa8:	4834      	ldr	r0, [pc, #208]	; (1b7c <MdmConnect_HttpConnectionSchedule+0x70c>)
    1aaa:	4d2d      	ldr	r5, [pc, #180]	; (1b60 <MdmConnect_HttpConnectionSchedule+0x6f0>)
    1aac:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1aae:	4c30      	ldr	r4, [pc, #192]	; (1b70 <MdmConnect_HttpConnectionSchedule+0x700>)
    1ab0:	8961      	ldrh	r1, [r4, #10]
    1ab2:	68e0      	ldr	r0, [r4, #12]
    1ab4:	4b32      	ldr	r3, [pc, #200]	; (1b80 <MdmConnect_HttpConnectionSchedule+0x710>)
    1ab6:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    1ab8:	4832      	ldr	r0, [pc, #200]	; (1b84 <MdmConnect_HttpConnectionSchedule+0x714>)
    1aba:	47a8      	blx	r5
                            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    1abc:	2300      	movs	r3, #0
    1abe:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1ac0:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    1ac2:	70e3      	strb	r3, [r4, #3]
                            gHttpConnectionState = MDM_HTTP_DISCONNECTED;
    1ac4:	7023      	strb	r3, [r4, #0]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    1ac6:	7063      	strb	r3, [r4, #1]
                            sessionIdCount = 5;
    1ac8:	2305      	movs	r3, #5
    1aca:	7163      	strb	r3, [r4, #5]
                            DEBUG_PRINT("Error Recovery Completed\r\n");
    1acc:	482e      	ldr	r0, [pc, #184]	; (1b88 <MdmConnect_HttpConnectionSchedule+0x718>)
    1ace:	47a8      	blx	r5
                            DEBUG_PRINT("=================================================\r\n");
    1ad0:	482e      	ldr	r0, [pc, #184]	; (1b8c <MdmConnect_HttpConnectionSchedule+0x71c>)
    1ad2:	47a8      	blx	r5
                            DEBUG_PRINT("Establishing a new connection with server");
    1ad4:	482e      	ldr	r0, [pc, #184]	; (1b90 <MdmConnect_HttpConnectionSchedule+0x720>)
    1ad6:	47a8      	blx	r5
                            errorRecoveryCnt++;
    1ad8:	7ca3      	ldrb	r3, [r4, #18]
    1ada:	3301      	adds	r3, #1
    1adc:	74a3      	strb	r3, [r4, #18]
                            vPortFree(ConnectionResponse.response);
    1ade:	68e0      	ldr	r0, [r4, #12]
    1ae0:	4b2c      	ldr	r3, [pc, #176]	; (1b94 <MdmConnect_HttpConnectionSchedule+0x724>)
    1ae2:	4798      	blx	r3
                            if(errorRecoveryCnt >=3)
    1ae4:	7ca3      	ldrb	r3, [r4, #18]
    1ae6:	2b02      	cmp	r3, #2
    1ae8:	f67f accb 	bls.w	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                                DEBUG_PRINT("System is auto recovered for more than 3 times.");
    1aec:	482a      	ldr	r0, [pc, #168]	; (1b98 <MdmConnect_HttpConnectionSchedule+0x728>)
    1aee:	47a8      	blx	r5
                                DEBUG_PRINT("Performing a system restart....................\r\n");
    1af0:	482a      	ldr	r0, [pc, #168]	; (1b9c <MdmConnect_HttpConnectionSchedule+0x72c>)
    1af2:	47a8      	blx	r5
                                errorRecoveryCnt = 0;
    1af4:	2200      	movs	r2, #0
    1af6:	4b1e      	ldr	r3, [pc, #120]	; (1b70 <MdmConnect_HttpConnectionSchedule+0x700>)
    1af8:	749a      	strb	r2, [r3, #18]
                                requestWatchDogForcedReset();
    1afa:	4b29      	ldr	r3, [pc, #164]	; (1ba0 <MdmConnect_HttpConnectionSchedule+0x730>)
    1afc:	4798      	blx	r3
    1afe:	e4c0      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                            DEBUG_PRINT("Expected Response Not Received...");
    1b00:	4828      	ldr	r0, [pc, #160]	; (1ba4 <MdmConnect_HttpConnectionSchedule+0x734>)
    1b02:	4c17      	ldr	r4, [pc, #92]	; (1b60 <MdmConnect_HttpConnectionSchedule+0x6f0>)
    1b04:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1b06:	481f      	ldr	r0, [pc, #124]	; (1b84 <MdmConnect_HttpConnectionSchedule+0x714>)
    1b08:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1b0a:	4b19      	ldr	r3, [pc, #100]	; (1b70 <MdmConnect_HttpConnectionSchedule+0x700>)
    1b0c:	2200      	movs	r2, #0
    1b0e:	709a      	strb	r2, [r3, #2]
                            vPortFree(ConnectionResponse.response);
    1b10:	68d8      	ldr	r0, [r3, #12]
    1b12:	4b20      	ldr	r3, [pc, #128]	; (1b94 <MdmConnect_HttpConnectionSchedule+0x724>)
    1b14:	4798      	blx	r3
                            performForcedRebootOfModem();
    1b16:	4b24      	ldr	r3, [pc, #144]	; (1ba8 <MdmConnect_HttpConnectionSchedule+0x738>)
    1b18:	4798      	blx	r3
    1b1a:	e4b2      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1b1c:	4823      	ldr	r0, [pc, #140]	; (1bac <MdmConnect_HttpConnectionSchedule+0x73c>)
    1b1e:	4b10      	ldr	r3, [pc, #64]	; (1b60 <MdmConnect_HttpConnectionSchedule+0x6f0>)
    1b20:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1b22:	4b13      	ldr	r3, [pc, #76]	; (1b70 <MdmConnect_HttpConnectionSchedule+0x700>)
    1b24:	2200      	movs	r2, #0
    1b26:	709a      	strb	r2, [r3, #2]
                        gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1b28:	2208      	movs	r2, #8
    1b2a:	70da      	strb	r2, [r3, #3]
                        vPortFree(ConnectionResponse.response);
    1b2c:	68d8      	ldr	r0, [r3, #12]
    1b2e:	4b19      	ldr	r3, [pc, #100]	; (1b94 <MdmConnect_HttpConnectionSchedule+0x724>)
    1b30:	4798      	blx	r3
    1b32:	e4a6      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    1b34:	481e      	ldr	r0, [pc, #120]	; (1bb0 <MdmConnect_HttpConnectionSchedule+0x740>)
    1b36:	4c0a      	ldr	r4, [pc, #40]	; (1b60 <MdmConnect_HttpConnectionSchedule+0x6f0>)
    1b38:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    1b3a:	481e      	ldr	r0, [pc, #120]	; (1bb4 <MdmConnect_HttpConnectionSchedule+0x744>)
    1b3c:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    1b3e:	4a0c      	ldr	r2, [pc, #48]	; (1b70 <MdmConnect_HttpConnectionSchedule+0x700>)
    1b40:	7c53      	ldrb	r3, [r2, #17]
    1b42:	3301      	adds	r3, #1
    1b44:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    1b46:	4b18      	ldr	r3, [pc, #96]	; (1ba8 <MdmConnect_HttpConnectionSchedule+0x738>)
    1b48:	4798      	blx	r3
    1b4a:	e49a      	b.n	1482 <MdmConnect_HttpConnectionSchedule+0x12>
    1b4c:	20003490 	.word	0x20003490
    1b50:	000059a9 	.word	0x000059a9
    1b54:	200034a0 	.word	0x200034a0
    1b58:	000057c9 	.word	0x000057c9
    1b5c:	00007dac 	.word	0x00007dac
    1b60:	000025a9 	.word	0x000025a9
    1b64:	00005331 	.word	0x00005331
    1b68:	00007d78 	.word	0x00007d78
    1b6c:	00005fc1 	.word	0x00005fc1
    1b70:	20000204 	.word	0x20000204
    1b74:	00007dd8 	.word	0x00007dd8
    1b78:	00000a45 	.word	0x00000a45
    1b7c:	00007ee0 	.word	0x00007ee0
    1b80:	00002565 	.word	0x00002565
    1b84:	000086e8 	.word	0x000086e8
    1b88:	00008368 	.word	0x00008368
    1b8c:	00008384 	.word	0x00008384
    1b90:	000083b8 	.word	0x000083b8
    1b94:	00005009 	.word	0x00005009
    1b98:	000083e4 	.word	0x000083e4
    1b9c:	00008414 	.word	0x00008414
    1ba0:	0000276d 	.word	0x0000276d
    1ba4:	00007e8c 	.word	0x00007e8c
    1ba8:	00000a85 	.word	0x00000a85
    1bac:	00007e38 	.word	0x00007e38
    1bb0:	00008288 	.word	0x00008288
    1bb4:	000082a4 	.word	0x000082a4

00001bb8 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
    1bb8:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
    1bba:	490d      	ldr	r1, [pc, #52]	; (1bf0 <mdmCtrlr_DataCommInit+0x38>)
    1bbc:	480d      	ldr	r0, [pc, #52]	; (1bf4 <mdmCtrlr_DataCommInit+0x3c>)
    1bbe:	4b0e      	ldr	r3, [pc, #56]	; (1bf8 <mdmCtrlr_DataCommInit+0x40>)
    1bc0:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
    1bc2:	b100      	cbz	r0, 1bc6 <mdmCtrlr_DataCommInit+0xe>
    1bc4:	bd10      	pop	{r4, pc}
	{
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
    1bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1bca:	490c      	ldr	r1, [pc, #48]	; (1bfc <mdmCtrlr_DataCommInit+0x44>)
    1bcc:	480c      	ldr	r0, [pc, #48]	; (1c00 <mdmCtrlr_DataCommInit+0x48>)
    1bce:	4b0d      	ldr	r3, [pc, #52]	; (1c04 <mdmCtrlr_DataCommInit+0x4c>)
    1bd0:	4798      	blx	r3
	}
	
	if(initStatus == ERR_NONE)
    1bd2:	2800      	cmp	r0, #0
    1bd4:	d1f6      	bne.n	1bc4 <mdmCtrlr_DataCommInit+0xc>
	{
		/* Enable all of the UART interrupts for SERCOM3 */
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
    1bd6:	4c07      	ldr	r4, [pc, #28]	; (1bf4 <mdmCtrlr_DataCommInit+0x3c>)
    1bd8:	2201      	movs	r2, #1
    1bda:	4611      	mov	r1, r2
    1bdc:	4620      	mov	r0, r4
    1bde:	4b0a      	ldr	r3, [pc, #40]	; (1c08 <mdmCtrlr_DataCommInit+0x50>)
    1be0:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
    1be2:	4620      	mov	r0, r4
    1be4:	4b09      	ldr	r3, [pc, #36]	; (1c0c <mdmCtrlr_DataCommInit+0x54>)
    1be6:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
    1be8:	4b09      	ldr	r3, [pc, #36]	; (1c10 <mdmCtrlr_DataCommInit+0x58>)
    1bea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
	}
	else
	{
		//DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
	}
}
    1bee:	e7e9      	b.n	1bc4 <mdmCtrlr_DataCommInit+0xc>
    1bf0:	41014000 	.word	0x41014000
    1bf4:	20000024 	.word	0x20000024
    1bf8:	00003d81 	.word	0x00003d81
    1bfc:	200034ac 	.word	0x200034ac
    1c00:	20003cac 	.word	0x20003cac
    1c04:	00003369 	.word	0x00003369
    1c08:	00003e2d 	.word	0x00003e2d
    1c0c:	00003df5 	.word	0x00003df5
    1c10:	e000e100 	.word	0xe000e100

00001c14 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    1c14:	2201      	movs	r2, #1
    1c16:	4b01      	ldr	r3, [pc, #4]	; (1c1c <SERCOM3_0_Handler+0x8>)
    1c18:	761a      	strb	r2, [r3, #24]
    1c1a:	4770      	bx	lr
    1c1c:	41014000 	.word	0x41014000

00001c20 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    1c20:	2202      	movs	r2, #2
    1c22:	4b01      	ldr	r3, [pc, #4]	; (1c28 <SERCOM3_1_Handler+0x8>)
    1c24:	761a      	strb	r2, [r3, #24]
    1c26:	4770      	bx	lr
    1c28:	41014000 	.word	0x41014000

00001c2c <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
    1c2c:	b530      	push	{r4, r5, lr}
    1c2e:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
    1c30:	4d1a      	ldr	r5, [pc, #104]	; (1c9c <SERCOM3_2_Handler+0x70>)
    1c32:	4c1b      	ldr	r4, [pc, #108]	; (1ca0 <SERCOM3_2_Handler+0x74>)
    1c34:	4628      	mov	r0, r5
    1c36:	47a0      	blx	r4
    1c38:	2800      	cmp	r0, #0
    1c3a:	d0fb      	beq.n	1c34 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
    1c3c:	4817      	ldr	r0, [pc, #92]	; (1c9c <SERCOM3_2_Handler+0x70>)
    1c3e:	4b19      	ldr	r3, [pc, #100]	; (1ca4 <SERCOM3_2_Handler+0x78>)
    1c40:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
    1c42:	4601      	mov	r1, r0
    1c44:	4818      	ldr	r0, [pc, #96]	; (1ca8 <SERCOM3_2_Handler+0x7c>)
    1c46:	4b19      	ldr	r3, [pc, #100]	; (1cac <SERCOM3_2_Handler+0x80>)
    1c48:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
    1c4a:	4b19      	ldr	r3, [pc, #100]	; (1cb0 <SERCOM3_2_Handler+0x84>)
    1c4c:	4798      	blx	r3
    1c4e:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
    1c50:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    1c54:	d101      	bne.n	1c5a <SERCOM3_2_Handler+0x2e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}
}
    1c56:	b009      	add	sp, #36	; 0x24
    1c58:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
    1c5a:	a902      	add	r1, sp, #8
    1c5c:	4b15      	ldr	r3, [pc, #84]	; (1cb4 <SERCOM3_2_Handler+0x88>)
    1c5e:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
    1c60:	4811      	ldr	r0, [pc, #68]	; (1ca8 <SERCOM3_2_Handler+0x7c>)
    1c62:	4b15      	ldr	r3, [pc, #84]	; (1cb8 <SERCOM3_2_Handler+0x8c>)
    1c64:	4798      	blx	r3
    1c66:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    1c6a:	4298      	cmp	r0, r3
    1c6c:	d3f3      	bcc.n	1c56 <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
    1c6e:	4b13      	ldr	r3, [pc, #76]	; (1cbc <SERCOM3_2_Handler+0x90>)
    1c70:	6818      	ldr	r0, [r3, #0]
    1c72:	ab07      	add	r3, sp, #28
    1c74:	9300      	str	r3, [sp, #0]
    1c76:	2300      	movs	r3, #0
    1c78:	2203      	movs	r2, #3
    1c7a:	b2e1      	uxtb	r1, r4
    1c7c:	4c10      	ldr	r4, [pc, #64]	; (1cc0 <SERCOM3_2_Handler+0x94>)
    1c7e:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1c80:	9b07      	ldr	r3, [sp, #28]
    1c82:	b13b      	cbz	r3, 1c94 <SERCOM3_2_Handler+0x68>
    1c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1c88:	4b0e      	ldr	r3, [pc, #56]	; (1cc4 <SERCOM3_2_Handler+0x98>)
    1c8a:	601a      	str	r2, [r3, #0]
    1c8c:	f3bf 8f4f 	dsb	sy
    1c90:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
    1c94:	2000      	movs	r0, #0
    1c96:	4b0c      	ldr	r3, [pc, #48]	; (1cc8 <SERCOM3_2_Handler+0x9c>)
    1c98:	4798      	blx	r3
}
    1c9a:	e7dc      	b.n	1c56 <SERCOM3_2_Handler+0x2a>
    1c9c:	20000024 	.word	0x20000024
    1ca0:	00003e21 	.word	0x00003e21
    1ca4:	00003e0f 	.word	0x00003e0f
    1ca8:	20003cac 	.word	0x20003cac
    1cac:	000033fd 	.word	0x000033fd
    1cb0:	000009f9 	.word	0x000009f9
    1cb4:	000007fd 	.word	0x000007fd
    1cb8:	0000343d 	.word	0x0000343d
    1cbc:	20003488 	.word	0x20003488
    1cc0:	00006575 	.word	0x00006575
    1cc4:	e000ed04 	.word	0xe000ed04
    1cc8:	000009ed 	.word	0x000009ed

00001ccc <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
    1ccc:	b570      	push	{r4, r5, r6, lr}
    1cce:	4605      	mov	r5, r0
    1cd0:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
    1cd2:	4c05      	ldr	r4, [pc, #20]	; (1ce8 <mdmCtrlr_SendDataToModem+0x1c>)
    1cd4:	4620      	mov	r0, r4
    1cd6:	4b05      	ldr	r3, [pc, #20]	; (1cec <mdmCtrlr_SendDataToModem+0x20>)
    1cd8:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
    1cda:	4632      	mov	r2, r6
    1cdc:	4629      	mov	r1, r5
    1cde:	4620      	mov	r0, r4
    1ce0:	4b03      	ldr	r3, [pc, #12]	; (1cf0 <mdmCtrlr_SendDataToModem+0x24>)
    1ce2:	4798      	blx	r3
}
    1ce4:	bd70      	pop	{r4, r5, r6, pc}
    1ce6:	bf00      	nop
    1ce8:	20000024 	.word	0x20000024
    1cec:	00003df5 	.word	0x00003df5
    1cf0:	000024e1 	.word	0x000024e1

00001cf4 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
    1cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cf6:	b083      	sub	sp, #12
    1cf8:	4605      	mov	r5, r0
    1cfa:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
    1cfc:	480d      	ldr	r0, [pc, #52]	; (1d34 <mdmCtrlr_ReadResponseFromModem+0x40>)
    1cfe:	4b0e      	ldr	r3, [pc, #56]	; (1d38 <mdmCtrlr_ReadResponseFromModem+0x44>)
    1d00:	4798      	blx	r3
    1d02:	42b0      	cmp	r0, r6
    1d04:	d201      	bcs.n	1d0a <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
    1d06:	b003      	add	sp, #12
    1d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
    1d0a:	a801      	add	r0, sp, #4
    1d0c:	4b0b      	ldr	r3, [pc, #44]	; (1d3c <mdmCtrlr_ReadResponseFromModem+0x48>)
    1d0e:	4798      	blx	r3
		while (readCnt < length)
    1d10:	b166      	cbz	r6, 1d2c <mdmCtrlr_ReadResponseFromModem+0x38>
    1d12:	462c      	mov	r4, r5
    1d14:	3e01      	subs	r6, #1
    1d16:	b2b6      	uxth	r6, r6
    1d18:	3601      	adds	r6, #1
    1d1a:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
    1d1c:	4f05      	ldr	r7, [pc, #20]	; (1d34 <mdmCtrlr_ReadResponseFromModem+0x40>)
    1d1e:	4e08      	ldr	r6, [pc, #32]	; (1d40 <mdmCtrlr_ReadResponseFromModem+0x4c>)
    1d20:	4621      	mov	r1, r4
    1d22:	4638      	mov	r0, r7
    1d24:	47b0      	blx	r6
    1d26:	3401      	adds	r4, #1
		while (readCnt < length)
    1d28:	42ac      	cmp	r4, r5
    1d2a:	d1f9      	bne.n	1d20 <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
    1d2c:	a801      	add	r0, sp, #4
    1d2e:	4b05      	ldr	r3, [pc, #20]	; (1d44 <mdmCtrlr_ReadResponseFromModem+0x50>)
    1d30:	4798      	blx	r3
    1d32:	e7e8      	b.n	1d06 <mdmCtrlr_ReadResponseFromModem+0x12>
    1d34:	20003cac 	.word	0x20003cac
    1d38:	0000343d 	.word	0x0000343d
    1d3c:	00003039 	.word	0x00003039
    1d40:	000033b9 	.word	0x000033b9
    1d44:	00003047 	.word	0x00003047

00001d48 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
    1d48:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
    1d4a:	4802      	ldr	r0, [pc, #8]	; (1d54 <mdmCtrlr_FlushRxBuffer+0xc>)
    1d4c:	4b02      	ldr	r3, [pc, #8]	; (1d58 <mdmCtrlr_FlushRxBuffer+0x10>)
    1d4e:	4798      	blx	r3
    1d50:	bd08      	pop	{r3, pc}
    1d52:	bf00      	nop
    1d54:	20003cac 	.word	0x20003cac
    1d58:	00003461 	.word	0x00003461

00001d5c <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
    1d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d5e:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
    1d60:	2300      	movs	r3, #0
    1d62:	4a66      	ldr	r2, [pc, #408]	; (1efc <ModemDiagTask+0x1a0>)
    1d64:	7013      	strb	r3, [r2, #0]
	bModemDiagDataBaseUpdated = false;
    1d66:	4a66      	ldr	r2, [pc, #408]	; (1f00 <ModemDiagTask+0x1a4>)
    1d68:	4611      	mov	r1, r2
    1d6a:	f801 3b04 	strb.w	r3, [r1], #4
	
    memset(atResponseData,0,sizeof(atResponseData));
    1d6e:	8093      	strh	r3, [r2, #4]
    1d70:	708b      	strb	r3, [r1, #2]
    memset(atCgsnResponseData,0,sizeof(atCgsnResponseData));
    1d72:	6093      	str	r3, [r2, #8]
    1d74:	60d3      	str	r3, [r2, #12]
    1d76:	6113      	str	r3, [r2, #16]
    1d78:	6153      	str	r3, [r2, #20]
    memset(atKgsnResponseData,0,sizeof(atKgsnResponseData));
    1d7a:	6193      	str	r3, [r2, #24]
    1d7c:	61d3      	str	r3, [r2, #28]
    1d7e:	6213      	str	r3, [r2, #32]
    1d80:	f8c2 3023 	str.w	r3, [r2, #35]	; 0x23
    memset(atCarrierResponseData,0,sizeof(atCarrierResponseData));
    1d84:	6293      	str	r3, [r2, #40]	; 0x28
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1d86:	4c5f      	ldr	r4, [pc, #380]	; (1f04 <ModemDiagTask+0x1a8>)
    const TickType_t powerUpDelayMs = pdMS_TO_TICKS(7000UL);
    BaseType_t TxQueuePushStatus;
    AtTxMsgType TxMsgQueueData;
    CmdResponseType cmdResponse;

    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1d88:	4e5f      	ldr	r6, [pc, #380]	; (1f08 <ModemDiagTask+0x1ac>)
                        ModemDiagState = 100;
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
                        vTaskDelay(DiagDelayMs);
    1d8a:	4d60      	ldr	r5, [pc, #384]	; (1f0c <ModemDiagTask+0x1b0>)
    1d8c:	e097      	b.n	1ebe <ModemDiagTask+0x162>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1d8e:	2304      	movs	r3, #4
    1d90:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
    1d94:	2301      	movs	r3, #1
    1d96:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1d9a:	2300      	movs	r3, #0
    1d9c:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1d9e:	2264      	movs	r2, #100	; 0x64
    1da0:	4669      	mov	r1, sp
    1da2:	6830      	ldr	r0, [r6, #0]
    1da4:	4f5a      	ldr	r7, [pc, #360]	; (1f10 <ModemDiagTask+0x1b4>)
    1da6:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1da8:	2801      	cmp	r0, #1
    1daa:	d006      	beq.n	1dba <ModemDiagTask+0x5e>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1dac:	4859      	ldr	r0, [pc, #356]	; (1f14 <ModemDiagTask+0x1b8>)
    1dae:	4b5a      	ldr	r3, [pc, #360]	; (1f18 <ModemDiagTask+0x1bc>)
    1db0:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    1db2:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1db6:	47a8      	blx	r5
    1db8:	e07c      	b.n	1eb4 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1dba:	2300      	movs	r3, #0
    1dbc:	461a      	mov	r2, r3
    1dbe:	4619      	mov	r1, r3
    1dc0:	4856      	ldr	r0, [pc, #344]	; (1f1c <ModemDiagTask+0x1c0>)
    1dc2:	6800      	ldr	r0, [r0, #0]
    1dc4:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1dc6:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1dca:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
    1dcc:	2201      	movs	r2, #1
    1dce:	4b4b      	ldr	r3, [pc, #300]	; (1efc <ModemDiagTask+0x1a0>)
    1dd0:	701a      	strb	r2, [r3, #0]
    1dd2:	e06f      	b.n	1eb4 <ModemDiagTask+0x158>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1dd4:	2304      	movs	r3, #4
    1dd6:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
    1dda:	2302      	movs	r3, #2
    1ddc:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1de0:	2300      	movs	r3, #0
    1de2:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1de4:	2264      	movs	r2, #100	; 0x64
    1de6:	4669      	mov	r1, sp
    1de8:	6830      	ldr	r0, [r6, #0]
    1dea:	4f49      	ldr	r7, [pc, #292]	; (1f10 <ModemDiagTask+0x1b4>)
    1dec:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1dee:	2801      	cmp	r0, #1
    1df0:	d006      	beq.n	1e00 <ModemDiagTask+0xa4>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1df2:	4848      	ldr	r0, [pc, #288]	; (1f14 <ModemDiagTask+0x1b8>)
    1df4:	4b48      	ldr	r3, [pc, #288]	; (1f18 <ModemDiagTask+0x1bc>)
    1df6:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    1df8:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1dfc:	47a8      	blx	r5
    1dfe:	e059      	b.n	1eb4 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1e00:	2300      	movs	r3, #0
    1e02:	461a      	mov	r2, r3
    1e04:	4619      	mov	r1, r3
    1e06:	4845      	ldr	r0, [pc, #276]	; (1f1c <ModemDiagTask+0x1c0>)
    1e08:	6800      	ldr	r0, [r0, #0]
    1e0a:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1e0c:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1e10:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
    1e12:	2202      	movs	r2, #2
    1e14:	4b39      	ldr	r3, [pc, #228]	; (1efc <ModemDiagTask+0x1a0>)
    1e16:	701a      	strb	r2, [r3, #0]
    1e18:	e04c      	b.n	1eb4 <ModemDiagTask+0x158>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1e1a:	2304      	movs	r3, #4
    1e1c:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
    1e20:	2307      	movs	r3, #7
    1e22:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1e26:	2300      	movs	r3, #0
    1e28:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1e2a:	2264      	movs	r2, #100	; 0x64
    1e2c:	4669      	mov	r1, sp
    1e2e:	6830      	ldr	r0, [r6, #0]
    1e30:	4f37      	ldr	r7, [pc, #220]	; (1f10 <ModemDiagTask+0x1b4>)
    1e32:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1e34:	2801      	cmp	r0, #1
    1e36:	d006      	beq.n	1e46 <ModemDiagTask+0xea>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1e38:	4836      	ldr	r0, [pc, #216]	; (1f14 <ModemDiagTask+0x1b8>)
    1e3a:	4b37      	ldr	r3, [pc, #220]	; (1f18 <ModemDiagTask+0x1bc>)
    1e3c:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    1e3e:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1e42:	47a8      	blx	r5
    1e44:	e036      	b.n	1eb4 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1e46:	2300      	movs	r3, #0
    1e48:	461a      	mov	r2, r3
    1e4a:	4619      	mov	r1, r3
    1e4c:	4833      	ldr	r0, [pc, #204]	; (1f1c <ModemDiagTask+0x1c0>)
    1e4e:	6800      	ldr	r0, [r0, #0]
    1e50:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1e52:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1e56:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_MAX_STATE;
    1e58:	2204      	movs	r2, #4
    1e5a:	4b28      	ldr	r3, [pc, #160]	; (1efc <ModemDiagTask+0x1a0>)
    1e5c:	701a      	strb	r2, [r3, #0]
    1e5e:	e029      	b.n	1eb4 <ModemDiagTask+0x158>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1e60:	2304      	movs	r3, #4
    1e62:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
    1e66:	2303      	movs	r3, #3
    1e68:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1e6c:	2300      	movs	r3, #0
    1e6e:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1e70:	2264      	movs	r2, #100	; 0x64
    1e72:	4669      	mov	r1, sp
    1e74:	6830      	ldr	r0, [r6, #0]
    1e76:	4f26      	ldr	r7, [pc, #152]	; (1f10 <ModemDiagTask+0x1b4>)
    1e78:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1e7a:	2801      	cmp	r0, #1
    1e7c:	d006      	beq.n	1e8c <ModemDiagTask+0x130>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1e7e:	4825      	ldr	r0, [pc, #148]	; (1f14 <ModemDiagTask+0x1b8>)
    1e80:	4b25      	ldr	r3, [pc, #148]	; (1f18 <ModemDiagTask+0x1bc>)
    1e82:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    1e84:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1e88:	47a8      	blx	r5
    1e8a:	e013      	b.n	1eb4 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1e8c:	2300      	movs	r3, #0
    1e8e:	461a      	mov	r2, r3
    1e90:	4619      	mov	r1, r3
    1e92:	4822      	ldr	r0, [pc, #136]	; (1f1c <ModemDiagTask+0x1c0>)
    1e94:	6800      	ldr	r0, [r0, #0]
    1e96:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1e98:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1e9c:	47a8      	blx	r5
                        ModemDiagState = 100;
    1e9e:	2264      	movs	r2, #100	; 0x64
    1ea0:	4b16      	ldr	r3, [pc, #88]	; (1efc <ModemDiagTask+0x1a0>)
    1ea2:	701a      	strb	r2, [r3, #0]
    1ea4:	e006      	b.n	1eb4 <ModemDiagTask+0x158>
                }
                break;

                default:
                {
                	xSemaphoreGive(AtTxQueueLoadSemaphore);
    1ea6:	2300      	movs	r3, #0
    1ea8:	461a      	mov	r2, r3
    1eaa:	4619      	mov	r1, r3
    1eac:	481b      	ldr	r0, [pc, #108]	; (1f1c <ModemDiagTask+0x1c0>)
    1eae:	6800      	ldr	r0, [r0, #0]
    1eb0:	4f17      	ldr	r7, [pc, #92]	; (1f10 <ModemDiagTask+0x1b4>)
    1eb2:	47b8      	blx	r7
            kickWatchDog();
    1eb4:	4b1a      	ldr	r3, [pc, #104]	; (1f20 <ModemDiagTask+0x1c4>)
    1eb6:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    1eb8:	f44f 7016 	mov.w	r0, #600	; 0x258
    1ebc:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1ebe:	47a0      	blx	r4
    1ec0:	2804      	cmp	r0, #4
    1ec2:	d1fc      	bne.n	1ebe <ModemDiagTask+0x162>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1ec4:	6830      	ldr	r0, [r6, #0]
    1ec6:	4b17      	ldr	r3, [pc, #92]	; (1f24 <ModemDiagTask+0x1c8>)
    1ec8:	4798      	blx	r3
    1eca:	2800      	cmp	r0, #0
    1ecc:	d1f2      	bne.n	1eb4 <ModemDiagTask+0x158>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1ece:	2100      	movs	r1, #0
    1ed0:	4b12      	ldr	r3, [pc, #72]	; (1f1c <ModemDiagTask+0x1c0>)
    1ed2:	6818      	ldr	r0, [r3, #0]
    1ed4:	4b14      	ldr	r3, [pc, #80]	; (1f28 <ModemDiagTask+0x1cc>)
    1ed6:	4798      	blx	r3
    1ed8:	2801      	cmp	r0, #1
    1eda:	d1eb      	bne.n	1eb4 <ModemDiagTask+0x158>
            switch(ModemDiagState)
    1edc:	4b07      	ldr	r3, [pc, #28]	; (1efc <ModemDiagTask+0x1a0>)
    1ede:	781b      	ldrb	r3, [r3, #0]
    1ee0:	2b03      	cmp	r3, #3
    1ee2:	d8e0      	bhi.n	1ea6 <ModemDiagTask+0x14a>
    1ee4:	a201      	add	r2, pc, #4	; (adr r2, 1eec <ModemDiagTask+0x190>)
    1ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1eea:	bf00      	nop
    1eec:	00001d8f 	.word	0x00001d8f
    1ef0:	00001dd5 	.word	0x00001dd5
    1ef4:	00001e1b 	.word	0x00001e1b
    1ef8:	00001e61 	.word	0x00001e61
    1efc:	20003cbc 	.word	0x20003cbc
    1f00:	20000218 	.word	0x20000218
    1f04:	00001ffd 	.word	0x00001ffd
    1f08:	20003490 	.word	0x20003490
    1f0c:	00005fc1 	.word	0x00005fc1
    1f10:	00005331 	.word	0x00005331
    1f14:	00008448 	.word	0x00008448
    1f18:	000025a9 	.word	0x000025a9
    1f1c:	200034a0 	.word	0x200034a0
    1f20:	0000272d 	.word	0x0000272d
    1f24:	000059a9 	.word	0x000059a9
    1f28:	000057c9 	.word	0x000057c9

00001f2c <ModemDiagUpdateDataBase>:
{
    1f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f2e:	4604      	mov	r4, r0
    switch(cmd)
    1f30:	780b      	ldrb	r3, [r1, #0]
    1f32:	3b01      	subs	r3, #1
    1f34:	2b06      	cmp	r3, #6
    1f36:	d826      	bhi.n	1f86 <ModemDiagUpdateDataBase+0x5a>
    1f38:	e8df f003 	tbb	[pc, r3]
    1f3c:	25243725 	.word	0x25243725
    1f40:	2525      	.short	0x2525
    1f42:	04          	.byte	0x04
    1f43:	00          	.byte	0x00
			while(parseCnt <= (cmdResponse->length - startIndex))
    1f44:	884b      	ldrh	r3, [r1, #2]
    1f46:	2b07      	cmp	r3, #7
    1f48:	d40d      	bmi.n	1f66 <ModemDiagUpdateDataBase+0x3a>
    1f4a:	2200      	movs	r2, #0
    1f4c:	4613      	mov	r3, r2
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
    1f4e:	4d20      	ldr	r5, [pc, #128]	; (1fd0 <ModemDiagUpdateDataBase+0xa4>)
    1f50:	18a0      	adds	r0, r4, r2
    1f52:	79c0      	ldrb	r0, [r0, #7]
    1f54:	442a      	add	r2, r5
    1f56:	7610      	strb	r0, [r2, #24]
				parseCnt++;
    1f58:	3301      	adds	r3, #1
    1f5a:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
    1f5c:	461a      	mov	r2, r3
    1f5e:	8848      	ldrh	r0, [r1, #2]
    1f60:	3807      	subs	r0, #7
    1f62:	4283      	cmp	r3, r0
    1f64:	ddf4      	ble.n	1f50 <ModemDiagUpdateDataBase+0x24>
			bModemDiagDataBaseUpdated = true;
    1f66:	4d1a      	ldr	r5, [pc, #104]	; (1fd0 <ModemDiagUpdateDataBase+0xa4>)
    1f68:	2601      	movs	r6, #1
    1f6a:	462c      	mov	r4, r5
    1f6c:	f804 6b18 	strb.w	r6, [r4], #24
			DEBUG_PRINT("Retrieved the Modem serial Number");
    1f70:	4818      	ldr	r0, [pc, #96]	; (1fd4 <ModemDiagUpdateDataBase+0xa8>)
    1f72:	4f19      	ldr	r7, [pc, #100]	; (1fd8 <ModemDiagUpdateDataBase+0xac>)
    1f74:	47b8      	blx	r7
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
    1f76:	210f      	movs	r1, #15
    1f78:	4620      	mov	r0, r4
    1f7a:	4b18      	ldr	r3, [pc, #96]	; (1fdc <ModemDiagUpdateDataBase+0xb0>)
    1f7c:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    1f7e:	4818      	ldr	r0, [pc, #96]	; (1fe0 <ModemDiagUpdateDataBase+0xb4>)
    1f80:	47b8      	blx	r7
			bModemDiagDataBaseUpdated = true;
    1f82:	702e      	strb	r6, [r5, #0]
    1f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
    1f86:	4b12      	ldr	r3, [pc, #72]	; (1fd0 <ModemDiagUpdateDataBase+0xa4>)
    1f88:	1d1d      	adds	r5, r3, #4
    1f8a:	8801      	ldrh	r1, [r0, #0]
    1f8c:	7882      	ldrb	r2, [r0, #2]
    1f8e:	8099      	strh	r1, [r3, #4]
    1f90:	719a      	strb	r2, [r3, #6]
        	DEBUG_PRINT("Verifying the UART Link status with Modem");
    1f92:	4814      	ldr	r0, [pc, #80]	; (1fe4 <ModemDiagUpdateDataBase+0xb8>)
    1f94:	4c10      	ldr	r4, [pc, #64]	; (1fd8 <ModemDiagUpdateDataBase+0xac>)
    1f96:	47a0      	blx	r4
        	DEBUG_PRINT("SuccessFully verified the UART Link between SAMD51 Controller & Modem");
    1f98:	4813      	ldr	r0, [pc, #76]	; (1fe8 <ModemDiagUpdateDataBase+0xbc>)
    1f9a:	47a0      	blx	r4
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
    1f9c:	2103      	movs	r1, #3
    1f9e:	4628      	mov	r0, r5
    1fa0:	4b0e      	ldr	r3, [pc, #56]	; (1fdc <ModemDiagUpdateDataBase+0xb0>)
    1fa2:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    1fa4:	480e      	ldr	r0, [pc, #56]	; (1fe0 <ModemDiagUpdateDataBase+0xb4>)
    1fa6:	47a0      	blx	r4
        break;
    1fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
    1faa:	4e09      	ldr	r6, [pc, #36]	; (1fd0 <ModemDiagUpdateDataBase+0xa4>)
    1fac:	f106 0508 	add.w	r5, r6, #8
    1fb0:	6800      	ldr	r0, [r0, #0]
    1fb2:	6861      	ldr	r1, [r4, #4]
    1fb4:	68a2      	ldr	r2, [r4, #8]
    1fb6:	68e3      	ldr	r3, [r4, #12]
    1fb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
    1fba:	480c      	ldr	r0, [pc, #48]	; (1fec <ModemDiagUpdateDataBase+0xc0>)
    1fbc:	4c06      	ldr	r4, [pc, #24]	; (1fd8 <ModemDiagUpdateDataBase+0xac>)
    1fbe:	47a0      	blx	r4
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
    1fc0:	2110      	movs	r1, #16
    1fc2:	f106 0008 	add.w	r0, r6, #8
    1fc6:	4b05      	ldr	r3, [pc, #20]	; (1fdc <ModemDiagUpdateDataBase+0xb0>)
    1fc8:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    1fca:	4805      	ldr	r0, [pc, #20]	; (1fe0 <ModemDiagUpdateDataBase+0xb4>)
    1fcc:	47a0      	blx	r4
        break;
    1fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fd0:	20000218 	.word	0x20000218
    1fd4:	00008504 	.word	0x00008504
    1fd8:	000025a9 	.word	0x000025a9
    1fdc:	00002565 	.word	0x00002565
    1fe0:	000086e8 	.word	0x000086e8
    1fe4:	00008470 	.word	0x00008470
    1fe8:	0000849c 	.word	0x0000849c
    1fec:	000084e4 	.word	0x000084e4

00001ff0 <isModemDiagDataBaseUpdated>:
*
********************************************************************************/
bool isModemDiagDataBaseUpdated(void)
{
	return bModemDiagDataBaseUpdated;
}
    1ff0:	4b01      	ldr	r3, [pc, #4]	; (1ff8 <isModemDiagDataBaseUpdated+0x8>)
    1ff2:	7818      	ldrb	r0, [r3, #0]
    1ff4:	4770      	bx	lr
    1ff6:	bf00      	nop
    1ff8:	20000218 	.word	0x20000218

00001ffc <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
    1ffc:	4b01      	ldr	r3, [pc, #4]	; (2004 <getModemPowerStatus+0x8>)
    1ffe:	7818      	ldrb	r0, [r3, #0]
    2000:	4770      	bx	lr
    2002:	bf00      	nop
    2004:	20000244 	.word	0x20000244

00002008 <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_RESET_MODEM;
    2008:	4b04      	ldr	r3, [pc, #16]	; (201c <modemPowerStateInit+0x14>)
    200a:	2207      	movs	r2, #7
    200c:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    200e:	2200      	movs	r2, #0
    2010:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_ASSERT;
    2012:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    2014:	2201      	movs	r2, #1
    2016:	70da      	strb	r2, [r3, #3]
    2018:	4770      	bx	lr
    201a:	bf00      	nop
    201c:	20000244 	.word	0x20000244

00002020 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
    2020:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);
    const TickType_t ModemResetToPowerOnWaitDelay = pdMS_TO_TICKS(500UL);

    switch(ModemPwrState)
    2022:	4b68      	ldr	r3, [pc, #416]	; (21c4 <modemPowerSchedule+0x1a4>)
    2024:	781b      	ldrb	r3, [r3, #0]
    2026:	2b06      	cmp	r3, #6
    2028:	f000 809e 	beq.w	2168 <modemPowerSchedule+0x148>
    202c:	2b07      	cmp	r3, #7
    202e:	d054      	beq.n	20da <modemPowerSchedule+0xba>
    2030:	b103      	cbz	r3, 2034 <modemPowerSchedule+0x14>
    2032:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
    2034:	4b63      	ldr	r3, [pc, #396]	; (21c4 <modemPowerSchedule+0x1a4>)
    2036:	785b      	ldrb	r3, [r3, #1]
    2038:	2b03      	cmp	r3, #3
    203a:	d8fa      	bhi.n	2032 <modemPowerSchedule+0x12>
    203c:	e8df f003 	tbb	[pc, r3]
    2040:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2044:	4b60      	ldr	r3, [pc, #384]	; (21c8 <modemPowerSchedule+0x1a8>)
    2046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    204a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    204e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2052:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    2056:	4c5d      	ldr	r4, [pc, #372]	; (21cc <modemPowerSchedule+0x1ac>)
    2058:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    205c:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2060:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2064:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2068:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    206c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    2070:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2072:	6299      	str	r1, [r3, #40]	; 0x28
    2074:	4856      	ldr	r0, [pc, #344]	; (21d0 <modemPowerSchedule+0x1b0>)
    2076:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2078:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    207c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2080:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2084:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2086:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2088:	6299      	str	r1, [r3, #40]	; 0x28
    208a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    208c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
    2090:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2094:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2098:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
    209a:	2201      	movs	r2, #1
    209c:	4b49      	ldr	r3, [pc, #292]	; (21c4 <modemPowerSchedule+0x1a4>)
    209e:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
    20a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    20a4:	4b4b      	ldr	r3, [pc, #300]	; (21d4 <modemPowerSchedule+0x1b4>)
    20a6:	4798      	blx	r3
                }
                break;
    20a8:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    20aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    20ae:	4b46      	ldr	r3, [pc, #280]	; (21c8 <modemPowerSchedule+0x1a8>)
    20b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
    20b4:	2202      	movs	r2, #2
    20b6:	4b43      	ldr	r3, [pc, #268]	; (21c4 <modemPowerSchedule+0x1a4>)
    20b8:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
    20ba:	2032      	movs	r0, #50	; 0x32
    20bc:	4b45      	ldr	r3, [pc, #276]	; (21d4 <modemPowerSchedule+0x1b4>)
    20be:	4798      	blx	r3
                }
                break;
    20c0:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
    20c2:	2203      	movs	r2, #3
    20c4:	4b3f      	ldr	r3, [pc, #252]	; (21c4 <modemPowerSchedule+0x1a4>)
    20c6:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
    20c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    20cc:	4b41      	ldr	r3, [pc, #260]	; (21d4 <modemPowerSchedule+0x1b4>)
    20ce:	4798      	blx	r3
                }
                break;
    20d0:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
    20d2:	2204      	movs	r2, #4
    20d4:	4b3b      	ldr	r3, [pc, #236]	; (21c4 <modemPowerSchedule+0x1a4>)
    20d6:	701a      	strb	r2, [r3, #0]
                }
                break;
    20d8:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
    20da:	4b3a      	ldr	r3, [pc, #232]	; (21c4 <modemPowerSchedule+0x1a4>)
    20dc:	789b      	ldrb	r3, [r3, #2]
    20de:	b113      	cbz	r3, 20e6 <modemPowerSchedule+0xc6>
    20e0:	2b01      	cmp	r3, #1
    20e2:	d028      	beq.n	2136 <modemPowerSchedule+0x116>
    20e4:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    20e6:	4b38      	ldr	r3, [pc, #224]	; (21c8 <modemPowerSchedule+0x1a8>)
    20e8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    20ec:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    20f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    20f4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    20f8:	4a34      	ldr	r2, [pc, #208]	; (21cc <modemPowerSchedule+0x1ac>)
    20fa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20fe:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2102:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2106:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    210a:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    210e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2112:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2114:	6298      	str	r0, [r3, #40]	; 0x28
    2116:	4a2e      	ldr	r2, [pc, #184]	; (21d0 <modemPowerSchedule+0x1b0>)
    2118:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    211a:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    211e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2122:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2126:	6199      	str	r1, [r3, #24]

                    /* Apply low level pulse on the RESET pin for 25 ms */
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
    2128:	2201      	movs	r2, #1
    212a:	4b26      	ldr	r3, [pc, #152]	; (21c4 <modemPowerSchedule+0x1a4>)
    212c:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
    212e:	2019      	movs	r0, #25
    2130:	4b28      	ldr	r3, [pc, #160]	; (21d4 <modemPowerSchedule+0x1b4>)
    2132:	4798      	blx	r3
                }
                break;
    2134:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2136:	4b24      	ldr	r3, [pc, #144]	; (21c8 <modemPowerSchedule+0x1a8>)
    2138:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    213c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    213e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2142:	629a      	str	r2, [r3, #40]	; 0x28
    2144:	4a22      	ldr	r2, [pc, #136]	; (21d0 <modemPowerSchedule+0x1b0>)
    2146:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2148:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    214c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2150:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2154:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
    2156:	4b1b      	ldr	r3, [pc, #108]	; (21c4 <modemPowerSchedule+0x1a4>)
    2158:	2200      	movs	r2, #0
    215a:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    215c:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemResetToPowerOnWaitDelay);
    215e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2162:	4b1c      	ldr	r3, [pc, #112]	; (21d4 <modemPowerSchedule+0x1b4>)
    2164:	4798      	blx	r3
                }
                break;
    2166:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
    2168:	4b16      	ldr	r3, [pc, #88]	; (21c4 <modemPowerSchedule+0x1a4>)
    216a:	78db      	ldrb	r3, [r3, #3]
    216c:	2b00      	cmp	r3, #0
    216e:	f47f af60 	bne.w	2032 <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2172:	4b15      	ldr	r3, [pc, #84]	; (21c8 <modemPowerSchedule+0x1a8>)
    2174:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2178:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    217c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2180:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    2184:	4a11      	ldr	r2, [pc, #68]	; (21cc <modemPowerSchedule+0x1ac>)
    2186:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    218a:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    218e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2192:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2196:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    219a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    219e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    21a0:	6298      	str	r0, [r3, #40]	; 0x28
    21a2:	4a0b      	ldr	r2, [pc, #44]	; (21d0 <modemPowerSchedule+0x1b0>)
    21a4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    21a6:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    21aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    21ae:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21b2:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    21b4:	2201      	movs	r2, #1
    21b6:	4b03      	ldr	r3, [pc, #12]	; (21c4 <modemPowerSchedule+0x1a4>)
    21b8:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
    21ba:	2019      	movs	r0, #25
    21bc:	4b05      	ldr	r3, [pc, #20]	; (21d4 <modemPowerSchedule+0x1b4>)
    21be:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
    21c0:	e737      	b.n	2032 <modemPowerSchedule+0x12>
    21c2:	bf00      	nop
    21c4:	20000244 	.word	0x20000244
    21c8:	41008000 	.word	0x41008000
    21cc:	c0000001 	.word	0xc0000001
    21d0:	c0000008 	.word	0xc0000008
    21d4:	00005fc1 	.word	0x00005fc1

000021d8 <packetTransmitPeriodicTimerCallBack>:
*               into a string and returns the string.
*
********************************************************************************/
static void packetTransmitPeriodicTimerCallBack(void* param)
{
	packetTransmitPeriodicTimerExpired = true;
    21d8:	2201      	movs	r2, #1
    21da:	4b01      	ldr	r3, [pc, #4]	; (21e0 <packetTransmitPeriodicTimerCallBack+0x8>)
    21dc:	701a      	strb	r2, [r3, #0]
    21de:	4770      	bx	lr
    21e0:	20000248 	.word	0x20000248

000021e4 <SystemAutoRestartTimerCallBack>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
static void SystemAutoRestartTimerCallBack(void* param)
{
    21e4:	b508      	push	{r3, lr}
	DEBUG_PRINT("Hourly System Restart timer expired. Rebooting the system.\r\n");
    21e6:	4803      	ldr	r0, [pc, #12]	; (21f4 <SystemAutoRestartTimerCallBack+0x10>)
    21e8:	4b03      	ldr	r3, [pc, #12]	; (21f8 <SystemAutoRestartTimerCallBack+0x14>)
    21ea:	4798      	blx	r3
	requestWatchDogForcedReset();
    21ec:	4b03      	ldr	r3, [pc, #12]	; (21fc <SystemAutoRestartTimerCallBack+0x18>)
    21ee:	4798      	blx	r3
    21f0:	bd08      	pop	{r3, pc}
    21f2:	bf00      	nop
    21f4:	00008528 	.word	0x00008528
    21f8:	000025a9 	.word	0x000025a9
    21fc:	0000276d 	.word	0x0000276d

00002200 <ModemProcessTask>:
{
    2200:	b570      	push	{r4, r5, r6, lr}
    2202:	b082      	sub	sp, #8
    modemPowerStateInit();
    2204:	4b23      	ldr	r3, [pc, #140]	; (2294 <ModemProcessTask+0x94>)
    2206:	4798      	blx	r3
    MdmConnect_HttpConnectionInit();
    2208:	4b23      	ldr	r3, [pc, #140]	; (2298 <ModemProcessTask+0x98>)
    220a:	4798      	blx	r3
    packetTransmitPeriodicTimerExpired = false;
    220c:	2400      	movs	r4, #0
    220e:	4b23      	ldr	r3, [pc, #140]	; (229c <ModemProcessTask+0x9c>)
    2210:	701c      	strb	r4, [r3, #0]
    xAutoReloadHourlyTimer   = xTimerCreate("HourlySystemRestartTimer",HOURLY_RESTART_TIMER_LOAD_VALUE,pdTRUE,0,SystemAutoRestartTimerCallBack);
    2212:	4b23      	ldr	r3, [pc, #140]	; (22a0 <ModemProcessTask+0xa0>)
    2214:	9300      	str	r3, [sp, #0]
    2216:	4623      	mov	r3, r4
    2218:	2201      	movs	r2, #1
    221a:	4922      	ldr	r1, [pc, #136]	; (22a4 <ModemProcessTask+0xa4>)
    221c:	4822      	ldr	r0, [pc, #136]	; (22a8 <ModemProcessTask+0xa8>)
    221e:	4e23      	ldr	r6, [pc, #140]	; (22ac <ModemProcessTask+0xac>)
    2220:	47b0      	blx	r6
    2222:	4605      	mov	r5, r0
    xPacketSendPeriodicTimer = xTimerCreate("PacketTransmitPeriodicTimer",PACKET_SEND_TIMER_LOAD_VALUE,pdTRUE,0,packetTransmitPeriodicTimerCallBack);
    2224:	4b22      	ldr	r3, [pc, #136]	; (22b0 <ModemProcessTask+0xb0>)
    2226:	9300      	str	r3, [sp, #0]
    2228:	4623      	mov	r3, r4
    222a:	2201      	movs	r2, #1
    222c:	f241 7170 	movw	r1, #6000	; 0x1770
    2230:	4820      	ldr	r0, [pc, #128]	; (22b4 <ModemProcessTask+0xb4>)
    2232:	47b0      	blx	r6
    if((xPacketSendPeriodicTimer != NULL) &&
    2234:	b338      	cbz	r0, 2286 <ModemProcessTask+0x86>
    2236:	4604      	mov	r4, r0
    2238:	b32d      	cbz	r5, 2286 <ModemProcessTask+0x86>
    	if((pdPASS == xTimerStart(xAutoReloadHourlyTimer,0)) &&
    223a:	4b1f      	ldr	r3, [pc, #124]	; (22b8 <ModemProcessTask+0xb8>)
    223c:	4798      	blx	r3
    223e:	2300      	movs	r3, #0
    2240:	9300      	str	r3, [sp, #0]
    2242:	4602      	mov	r2, r0
    2244:	2101      	movs	r1, #1
    2246:	4628      	mov	r0, r5
    2248:	4d1c      	ldr	r5, [pc, #112]	; (22bc <ModemProcessTask+0xbc>)
    224a:	47a8      	blx	r5
    224c:	2801      	cmp	r0, #1
    224e:	d11a      	bne.n	2286 <ModemProcessTask+0x86>
		   (pdPASS == xTimerStart(xPacketSendPeriodicTimer,0)))
    2250:	4b19      	ldr	r3, [pc, #100]	; (22b8 <ModemProcessTask+0xb8>)
    2252:	4798      	blx	r3
    2254:	2300      	movs	r3, #0
    2256:	9300      	str	r3, [sp, #0]
    2258:	4602      	mov	r2, r0
    225a:	2101      	movs	r1, #1
    225c:	4620      	mov	r0, r4
    225e:	47a8      	blx	r5
    	if((pdPASS == xTimerStart(xAutoReloadHourlyTimer,0)) &&
    2260:	2801      	cmp	r0, #1
    2262:	d110      	bne.n	2286 <ModemProcessTask+0x86>
    		DEBUG_PRINT("Modem timers are started");
    2264:	4816      	ldr	r0, [pc, #88]	; (22c0 <ModemProcessTask+0xc0>)
    2266:	4b17      	ldr	r3, [pc, #92]	; (22c4 <ModemProcessTask+0xc4>)
    2268:	4798      	blx	r3
        modemPowerSchedule();
    226a:	4d17      	ldr	r5, [pc, #92]	; (22c8 <ModemProcessTask+0xc8>)
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    226c:	4c17      	ldr	r4, [pc, #92]	; (22cc <ModemProcessTask+0xcc>)
            MdmConnect_HttpConnectionSchedule();
    226e:	4e18      	ldr	r6, [pc, #96]	; (22d0 <ModemProcessTask+0xd0>)
        modemPowerSchedule();
    2270:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    2272:	47a0      	blx	r4
    2274:	2804      	cmp	r0, #4
    2276:	d1fb      	bne.n	2270 <ModemProcessTask+0x70>
            MdmConnect_HttpConnectionSchedule();
    2278:	47b0      	blx	r6
			kickWatchDog();
    227a:	4b16      	ldr	r3, [pc, #88]	; (22d4 <ModemProcessTask+0xd4>)
    227c:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    227e:	2064      	movs	r0, #100	; 0x64
    2280:	4b15      	ldr	r3, [pc, #84]	; (22d8 <ModemProcessTask+0xd8>)
    2282:	4798      	blx	r3
    2284:	e7f4      	b.n	2270 <ModemProcessTask+0x70>
    	DEBUG_PRINT("Failed to initialize the modem timers. Rebooting the system");
    2286:	4815      	ldr	r0, [pc, #84]	; (22dc <ModemProcessTask+0xdc>)
    2288:	4b0e      	ldr	r3, [pc, #56]	; (22c4 <ModemProcessTask+0xc4>)
    228a:	4798      	blx	r3
    	requestWatchDogForcedReset();
    228c:	4b14      	ldr	r3, [pc, #80]	; (22e0 <ModemProcessTask+0xe0>)
    228e:	4798      	blx	r3
    2290:	e7eb      	b.n	226a <ModemProcessTask+0x6a>
    2292:	bf00      	nop
    2294:	00002009 	.word	0x00002009
    2298:	00000a61 	.word	0x00000a61
    229c:	20000248 	.word	0x20000248
    22a0:	000021e5 	.word	0x000021e5
    22a4:	0036ee80 	.word	0x0036ee80
    22a8:	00008568 	.word	0x00008568
    22ac:	00006781 	.word	0x00006781
    22b0:	000021d9 	.word	0x000021d9
    22b4:	00008584 	.word	0x00008584
    22b8:	00005d81 	.word	0x00005d81
    22bc:	000067d5 	.word	0x000067d5
    22c0:	000085a0 	.word	0x000085a0
    22c4:	000025a9 	.word	0x000025a9
    22c8:	00002021 	.word	0x00002021
    22cc:	00001ffd 	.word	0x00001ffd
    22d0:	00001471 	.word	0x00001471
    22d4:	0000272d 	.word	0x0000272d
    22d8:	00005fc1 	.word	0x00005fc1
    22dc:	000085bc 	.word	0x000085bc
    22e0:	0000276d 	.word	0x0000276d

000022e4 <clearPacketTransmitTimerExpiryFlag>:
	packetTransmitPeriodicTimerExpired = false;
    22e4:	2200      	movs	r2, #0
    22e6:	4b01      	ldr	r3, [pc, #4]	; (22ec <clearPacketTransmitTimerExpiryFlag+0x8>)
    22e8:	701a      	strb	r2, [r3, #0]
    22ea:	4770      	bx	lr
    22ec:	20000248 	.word	0x20000248

000022f0 <isPacketTransmitTimerExpired>:
}
    22f0:	4b01      	ldr	r3, [pc, #4]	; (22f8 <isPacketTransmitTimerExpired+0x8>)
    22f2:	7818      	ldrb	r0, [r3, #0]
    22f4:	4770      	bx	lr
    22f6:	bf00      	nop
    22f8:	20000248 	.word	0x20000248

000022fc <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
    22fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22fe:	4607      	mov	r7, r0
    2300:	460c      	mov	r4, r1
    2302:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
    2304:	4923      	ldr	r1, [pc, #140]	; (2394 <modemResponseHandler+0x98>)
    2306:	4b24      	ldr	r3, [pc, #144]	; (2398 <modemResponseHandler+0x9c>)
    2308:	4798      	blx	r3

    if(response != NULL)
    230a:	2c00      	cmp	r4, #0
    230c:	d03e      	beq.n	238c <modemResponseHandler+0x90>
    {
        switch (cmdData.cmdSet)
    230e:	4b21      	ldr	r3, [pc, #132]	; (2394 <modemResponseHandler+0x98>)
    2310:	785b      	ldrb	r3, [r3, #1]
    2312:	b113      	cbz	r3, 231a <modemResponseHandler+0x1e>
    2314:	2b01      	cmp	r3, #1
    2316:	d016      	beq.n	2346 <modemResponseHandler+0x4a>
    2318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
    231a:	4e1e      	ldr	r6, [pc, #120]	; (2394 <modemResponseHandler+0x98>)
    231c:	7537      	strb	r7, [r6, #20]
            	cmdResponse.length = length;
    231e:	82f5      	strh	r5, [r6, #22]
            	memset(responseBuffer,0,700);
    2320:	f106 071c 	add.w	r7, r6, #28
    2324:	f44f 722f 	mov.w	r2, #700	; 0x2bc
    2328:	2100      	movs	r1, #0
    232a:	4638      	mov	r0, r7
    232c:	4b1b      	ldr	r3, [pc, #108]	; (239c <modemResponseHandler+0xa0>)
    232e:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
    2330:	462a      	mov	r2, r5
    2332:	4621      	mov	r1, r4
    2334:	4638      	mov	r0, r7
    2336:	4b1a      	ldr	r3, [pc, #104]	; (23a0 <modemResponseHandler+0xa4>)
    2338:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
    233a:	f106 0114 	add.w	r1, r6, #20
    233e:	4638      	mov	r0, r7
    2340:	4b18      	ldr	r3, [pc, #96]	; (23a4 <modemResponseHandler+0xa8>)
    2342:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
    2344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
    2346:	4b18      	ldr	r3, [pc, #96]	; (23a8 <modemResponseHandler+0xac>)
    2348:	6818      	ldr	r0, [r3, #0]
    234a:	4b18      	ldr	r3, [pc, #96]	; (23ac <modemResponseHandler+0xb0>)
    234c:	4798      	blx	r3
    234e:	b9c8      	cbnz	r0, 2384 <modemResponseHandler+0x88>
                {
                	cmdResponse.atCmd = cmd;
    2350:	4e10      	ldr	r6, [pc, #64]	; (2394 <modemResponseHandler+0x98>)
    2352:	7537      	strb	r7, [r6, #20]
                	cmdResponse.length = length;
    2354:	82f5      	strh	r5, [r6, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    2356:	4628      	mov	r0, r5
    2358:	4b15      	ldr	r3, [pc, #84]	; (23b0 <modemResponseHandler+0xb4>)
    235a:	4798      	blx	r3
    235c:	61b0      	str	r0, [r6, #24]

                	if(cmdResponse.response != NULL)
    235e:	b1c0      	cbz	r0, 2392 <modemResponseHandler+0x96>
                	{
                		memcpy(cmdResponse.response,response,length);
    2360:	462a      	mov	r2, r5
    2362:	4621      	mov	r1, r4
    2364:	4b0e      	ldr	r3, [pc, #56]	; (23a0 <modemResponseHandler+0xa4>)
    2366:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
    2368:	2300      	movs	r3, #0
    236a:	2264      	movs	r2, #100	; 0x64
    236c:	f106 0114 	add.w	r1, r6, #20
    2370:	480d      	ldr	r0, [pc, #52]	; (23a8 <modemResponseHandler+0xac>)
    2372:	6800      	ldr	r0, [r0, #0]
    2374:	4c0f      	ldr	r4, [pc, #60]	; (23b4 <modemResponseHandler+0xb8>)
    2376:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
    2378:	2801      	cmp	r0, #1
    237a:	d00a      	beq.n	2392 <modemResponseHandler+0x96>
                		{
                			//DEBUG_PRINT("Successfully posted connection Response to Queue");
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
    237c:	480e      	ldr	r0, [pc, #56]	; (23b8 <modemResponseHandler+0xbc>)
    237e:	4b0f      	ldr	r3, [pc, #60]	; (23bc <modemResponseHandler+0xc0>)
    2380:	4798      	blx	r3
    2382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    2384:	480e      	ldr	r0, [pc, #56]	; (23c0 <modemResponseHandler+0xc4>)
    2386:	4b0d      	ldr	r3, [pc, #52]	; (23bc <modemResponseHandler+0xc0>)
    2388:	4798      	blx	r3
    238a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
    238c:	480d      	ldr	r0, [pc, #52]	; (23c4 <modemResponseHandler+0xc8>)
    238e:	4b0b      	ldr	r3, [pc, #44]	; (23bc <modemResponseHandler+0xc0>)
    2390:	4798      	blx	r3
    2392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2394:	2000024c 	.word	0x2000024c
    2398:	000007fd 	.word	0x000007fd
    239c:	00006b65 	.word	0x00006b65
    23a0:	00006b1b 	.word	0x00006b1b
    23a4:	00001f2d 	.word	0x00001f2d
    23a8:	20003470 	.word	0x20003470
    23ac:	000059a9 	.word	0x000059a9
    23b0:	00004f35 	.word	0x00004f35
    23b4:	00005331 	.word	0x00005331
    23b8:	000085f8 	.word	0x000085f8
    23bc:	000025a9 	.word	0x000025a9
    23c0:	00008628 	.word	0x00008628
    23c4:	00008654 	.word	0x00008654

000023c8 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Application/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
    23c8:	b570      	push	{r4, r5, r6, lr}
    23ca:	b086      	sub	sp, #24

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    23cc:	4c0d      	ldr	r4, [pc, #52]	; (2404 <ModemRxTask+0x3c>)
		
		if(xResult == pdPASS)
		{
			getModemCommandData(atCmd, &cmdData);
    23ce:	4e0e      	ldr	r6, [pc, #56]	; (2408 <ModemRxTask+0x40>)
			//DEBUG_PRINT("Notification Received to Rx Task from ISR");

			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    23d0:	4d0e      	ldr	r5, [pc, #56]	; (240c <ModemRxTask+0x44>)
    23d2:	e001      	b.n	23d8 <ModemRxTask+0x10>
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
		}
		kickWatchDog();
    23d4:	4b0e      	ldr	r3, [pc, #56]	; (2410 <ModemRxTask+0x48>)
    23d6:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    23d8:	f04f 33ff 	mov.w	r3, #4294967295
    23dc:	f10d 0217 	add.w	r2, sp, #23
    23e0:	4619      	mov	r1, r3
    23e2:	2000      	movs	r0, #0
    23e4:	47a0      	blx	r4
		if(xResult == pdPASS)
    23e6:	2801      	cmp	r0, #1
    23e8:	d1f4      	bne.n	23d4 <ModemRxTask+0xc>
			getModemCommandData(atCmd, &cmdData);
    23ea:	4669      	mov	r1, sp
    23ec:	f89d 0017 	ldrb.w	r0, [sp, #23]
    23f0:	47b0      	blx	r6
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    23f2:	f89d 0000 	ldrb.w	r0, [sp]
    23f6:	47a8      	blx	r5
    23f8:	2800      	cmp	r0, #0
    23fa:	d1eb      	bne.n	23d4 <ModemRxTask+0xc>
				DEBUG_PRINT("ERROR: Command Parsing Failed");
    23fc:	4805      	ldr	r0, [pc, #20]	; (2414 <ModemRxTask+0x4c>)
    23fe:	4b06      	ldr	r3, [pc, #24]	; (2418 <ModemRxTask+0x50>)
    2400:	4798      	blx	r3
    2402:	e7e7      	b.n	23d4 <ModemRxTask+0xc>
    2404:	000064c1 	.word	0x000064c1
    2408:	000007fd 	.word	0x000007fd
    240c:	000008f9 	.word	0x000008f9
    2410:	0000272d 	.word	0x0000272d
    2414:	0000869c 	.word	0x0000869c
    2418:	000025a9 	.word	0x000025a9

0000241c <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
    241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(100UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
    241e:	2300      	movs	r3, #0
    2420:	461a      	mov	r2, r3
    2422:	4619      	mov	r1, r3
    2424:	481f      	ldr	r0, [pc, #124]	; (24a4 <ModemTxTask+0x88>)
    2426:	6800      	ldr	r0, [r0, #0]
    2428:	4c1f      	ldr	r4, [pc, #124]	; (24a8 <ModemTxTask+0x8c>)
    242a:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    242c:	4c1f      	ldr	r4, [pc, #124]	; (24ac <ModemTxTask+0x90>)
	
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
		{
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    242e:	4d20      	ldr	r5, [pc, #128]	; (24b0 <ModemTxTask+0x94>)
** Description:        Transmits Data to Modem
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	getModemCommandData(atCmd, &ModemCmdData);
    2430:	f105 0608 	add.w	r6, r5, #8
    2434:	e004      	b.n	2440 <ModemTxTask+0x24>
			kickWatchDog();
    2436:	4b1f      	ldr	r3, [pc, #124]	; (24b4 <ModemTxTask+0x98>)
    2438:	4798      	blx	r3
			vTaskDelay(xDelayMs);
    243a:	2064      	movs	r0, #100	; 0x64
    243c:	4b1e      	ldr	r3, [pc, #120]	; (24b8 <ModemTxTask+0x9c>)
    243e:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    2440:	47a0      	blx	r4
    2442:	2804      	cmp	r0, #4
    2444:	d1fc      	bne.n	2440 <ModemTxTask+0x24>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
    2446:	4b1d      	ldr	r3, [pc, #116]	; (24bc <ModemTxTask+0xa0>)
    2448:	6818      	ldr	r0, [r3, #0]
    244a:	4b1d      	ldr	r3, [pc, #116]	; (24c0 <ModemTxTask+0xa4>)
    244c:	4798      	blx	r3
    244e:	2800      	cmp	r0, #0
    2450:	d0f1      	beq.n	2436 <ModemTxTask+0x1a>
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    2452:	2100      	movs	r1, #0
    2454:	4b13      	ldr	r3, [pc, #76]	; (24a4 <ModemTxTask+0x88>)
    2456:	6818      	ldr	r0, [r3, #0]
    2458:	4b1a      	ldr	r3, [pc, #104]	; (24c4 <ModemTxTask+0xa8>)
    245a:	4798      	blx	r3
    245c:	2801      	cmp	r0, #1
    245e:	d1ea      	bne.n	2436 <ModemTxTask+0x1a>
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    2460:	2264      	movs	r2, #100	; 0x64
    2462:	4629      	mov	r1, r5
    2464:	4b15      	ldr	r3, [pc, #84]	; (24bc <ModemTxTask+0xa0>)
    2466:	6818      	ldr	r0, [r3, #0]
    2468:	4b17      	ldr	r3, [pc, #92]	; (24c8 <ModemTxTask+0xac>)
    246a:	4798      	blx	r3
			if(xResult == pdPASS)
    246c:	2801      	cmp	r0, #1
    246e:	d1e2      	bne.n	2436 <ModemTxTask+0x1a>
				ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
    2470:	786f      	ldrb	r7, [r5, #1]
	getModemCommandData(atCmd, &ModemCmdData);
    2472:	4631      	mov	r1, r6
    2474:	4638      	mov	r0, r7
    2476:	4b15      	ldr	r3, [pc, #84]	; (24cc <ModemTxTask+0xb0>)
    2478:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
    247a:	4b15      	ldr	r3, [pc, #84]	; (24d0 <ModemTxTask+0xb4>)
    247c:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
    247e:	7c29      	ldrb	r1, [r5, #16]
    2480:	68e8      	ldr	r0, [r5, #12]
    2482:	4b14      	ldr	r3, [pc, #80]	; (24d4 <ModemTxTask+0xb8>)
    2484:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
    2486:	4638      	mov	r0, r7
    2488:	4b13      	ldr	r3, [pc, #76]	; (24d8 <ModemTxTask+0xbc>)
    248a:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
    248c:	2000      	movs	r0, #0
    248e:	4b13      	ldr	r3, [pc, #76]	; (24dc <ModemTxTask+0xc0>)
    2490:	4798      	blx	r3
				xSemaphoreGive(AtTxQueueLoadSemaphore);				
    2492:	2300      	movs	r3, #0
    2494:	461a      	mov	r2, r3
    2496:	4619      	mov	r1, r3
    2498:	4802      	ldr	r0, [pc, #8]	; (24a4 <ModemTxTask+0x88>)
    249a:	6800      	ldr	r0, [r0, #0]
    249c:	4f02      	ldr	r7, [pc, #8]	; (24a8 <ModemTxTask+0x8c>)
    249e:	47b8      	blx	r7
    24a0:	e7c9      	b.n	2436 <ModemTxTask+0x1a>
    24a2:	bf00      	nop
    24a4:	200034a0 	.word	0x200034a0
    24a8:	00005331 	.word	0x00005331
    24ac:	00001ffd 	.word	0x00001ffd
    24b0:	20000528 	.word	0x20000528
    24b4:	0000272d 	.word	0x0000272d
    24b8:	00005fc1 	.word	0x00005fc1
    24bc:	20003490 	.word	0x20003490
    24c0:	000059a9 	.word	0x000059a9
    24c4:	000057c9 	.word	0x000057c9
    24c8:	00005641 	.word	0x00005641
    24cc:	000007fd 	.word	0x000007fd
    24d0:	00001d49 	.word	0x00001d49
    24d4:	00001ccd 	.word	0x00001ccd
    24d8:	000009ed 	.word	0x000009ed
    24dc:	000009e1 	.word	0x000009e1

000024e0 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Application/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
    24e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24e4:	4604      	mov	r4, r0
    24e6:	460e      	mov	r6, r1
    24e8:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
    24ea:	4d0e      	ldr	r5, [pc, #56]	; (2524 <usart_async_write+0x44>)
    24ec:	4620      	mov	r0, r4
    24ee:	47a8      	blx	r5
    24f0:	2800      	cmp	r0, #0
    24f2:	d0fb      	beq.n	24ec <usart_async_write+0xc>
    24f4:	3e01      	subs	r6, #1
    24f6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2528 <usart_async_write+0x48>
    24fa:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
    24fc:	f8df a02c 	ldr.w	sl, [pc, #44]	; 252c <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
    2500:	4d08      	ldr	r5, [pc, #32]	; (2524 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
    2502:	7873      	ldrb	r3, [r6, #1]
    2504:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
    2508:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    250c:	4620      	mov	r0, r4
    250e:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
    2510:	4620      	mov	r0, r4
    2512:	47a8      	blx	r5
    2514:	2800      	cmp	r0, #0
    2516:	d0fb      	beq.n	2510 <usart_async_write+0x30>
		;
	} while (++offset < length);
    2518:	3701      	adds	r7, #1
    251a:	454f      	cmp	r7, r9
    251c:	d3f1      	bcc.n	2502 <usart_async_write+0x22>

	return (int32_t)offset;
}
    251e:	4638      	mov	r0, r7
    2520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2524:	00003e17 	.word	0x00003e17
    2528:	20000544 	.word	0x20000544
    252c:	00003e09 	.word	0x00003e09

00002530 <SerialDebugTxByteSentCallBack>:
    2530:	2302      	movs	r3, #2
    2532:	7603      	strb	r3, [r0, #24]
    2534:	4770      	bx	lr

00002536 <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    2536:	2380      	movs	r3, #128	; 0x80
    2538:	7603      	strb	r3, [r0, #24]
    253a:	4770      	bx	lr

0000253c <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
    253c:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
    253e:	4c05      	ldr	r4, [pc, #20]	; (2554 <SerialDebugPrintInit+0x18>)
    2540:	4905      	ldr	r1, [pc, #20]	; (2558 <SerialDebugPrintInit+0x1c>)
    2542:	4620      	mov	r0, r4
    2544:	4b05      	ldr	r3, [pc, #20]	; (255c <SerialDebugPrintInit+0x20>)
    2546:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
    2548:	2201      	movs	r2, #1
    254a:	4611      	mov	r1, r2
    254c:	4620      	mov	r0, r4
    254e:	4b04      	ldr	r3, [pc, #16]	; (2560 <SerialDebugPrintInit+0x24>)
    2550:	4798      	blx	r3
    2552:	bd10      	pop	{r4, pc}
    2554:	20000040 	.word	0x20000040
    2558:	43000400 	.word	0x43000400
    255c:	00003d81 	.word	0x00003d81
    2560:	00003e2d 	.word	0x00003e2d

00002564 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
    2564:	b570      	push	{r4, r5, r6, lr}
    2566:	4605      	mov	r5, r0
    2568:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
    256a:	4c05      	ldr	r4, [pc, #20]	; (2580 <SerialDebugPrint+0x1c>)
    256c:	4620      	mov	r0, r4
    256e:	4b05      	ldr	r3, [pc, #20]	; (2584 <SerialDebugPrint+0x20>)
    2570:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
    2572:	4632      	mov	r2, r6
    2574:	4629      	mov	r1, r5
    2576:	4620      	mov	r0, r4
    2578:	4b03      	ldr	r3, [pc, #12]	; (2588 <SerialDebugPrint+0x24>)
    257a:	4798      	blx	r3
    257c:	bd70      	pop	{r4, r5, r6, pc}
    257e:	bf00      	nop
    2580:	20000040 	.word	0x20000040
    2584:	00003df5 	.word	0x00003df5
    2588:	000024e1 	.word	0x000024e1

0000258c <SerialDebugTxDoneCallBack>:
{
    258c:	b510      	push	{r4, lr}
    258e:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    2590:	2116      	movs	r1, #22
    2592:	4803      	ldr	r0, [pc, #12]	; (25a0 <SerialDebugTxDoneCallBack+0x14>)
    2594:	4b03      	ldr	r3, [pc, #12]	; (25a4 <SerialDebugTxDoneCallBack+0x18>)
    2596:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    2598:	2301      	movs	r3, #1
    259a:	7623      	strb	r3, [r4, #24]
    259c:	bd10      	pop	{r4, pc}
    259e:	bf00      	nop
    25a0:	000086bc 	.word	0x000086bc
    25a4:	00002565 	.word	0x00002565

000025a8 <SerialStringPrint>:
}

void SerialStringPrint(const uint8_t *const dataToPrint)
{
    25a8:	b570      	push	{r4, r5, r6, lr}
    25aa:	4605      	mov	r5, r0
	#ifdef SERIAL_DEBUG_ON
	
	uint8_t strLength;
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);
	uint8_t* dbgBuffer = NULL;
	strLength = strlen(dataToPrint);
    25ac:	4b17      	ldr	r3, [pc, #92]	; (260c <SerialStringPrint+0x64>)
    25ae:	4798      	blx	r3
    25b0:	4604      	mov	r4, r0

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    25b2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    25b6:	4b16      	ldr	r3, [pc, #88]	; (2610 <SerialStringPrint+0x68>)
    25b8:	6818      	ldr	r0, [r3, #0]
    25ba:	4b16      	ldr	r3, [pc, #88]	; (2614 <SerialStringPrint+0x6c>)
    25bc:	4798      	blx	r3
    25be:	2801      	cmp	r0, #1
    25c0:	d000      	beq.n	25c4 <SerialStringPrint+0x1c>
    25c2:	bd70      	pop	{r4, r5, r6, pc}
    25c4:	b2e4      	uxtb	r4, r4
    {
		dbgBuffer = (uint8_t*)pvPortMalloc((strLength)*(sizeof(uint8_t)));
    25c6:	4620      	mov	r0, r4
    25c8:	4b13      	ldr	r3, [pc, #76]	; (2618 <SerialStringPrint+0x70>)
    25ca:	4798      	blx	r3
		
		if(dbgBuffer != NULL)
    25cc:	4606      	mov	r6, r0
    25ce:	b1a0      	cbz	r0, 25fa <SerialStringPrint+0x52>
		{
	    	memset(dbgBuffer,'\0',strLength);
    25d0:	4622      	mov	r2, r4
    25d2:	2100      	movs	r1, #0
    25d4:	4b11      	ldr	r3, [pc, #68]	; (261c <SerialStringPrint+0x74>)
    25d6:	4798      	blx	r3
	    	sprintf((int8_t*)dbgBuffer,"%s",dataToPrint);
    25d8:	4629      	mov	r1, r5
    25da:	4630      	mov	r0, r6
    25dc:	4b10      	ldr	r3, [pc, #64]	; (2620 <SerialStringPrint+0x78>)
    25de:	4798      	blx	r3
	    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    25e0:	4630      	mov	r0, r6
    25e2:	4b0a      	ldr	r3, [pc, #40]	; (260c <SerialStringPrint+0x64>)
    25e4:	4798      	blx	r3
    25e6:	b281      	uxth	r1, r0
    25e8:	4630      	mov	r0, r6
    25ea:	4c0e      	ldr	r4, [pc, #56]	; (2624 <SerialStringPrint+0x7c>)
    25ec:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    25ee:	2102      	movs	r1, #2
    25f0:	480d      	ldr	r0, [pc, #52]	; (2628 <SerialStringPrint+0x80>)
    25f2:	47a0      	blx	r4
	    	vPortFree(dbgBuffer);			
    25f4:	4630      	mov	r0, r6
    25f6:	4b0d      	ldr	r3, [pc, #52]	; (262c <SerialStringPrint+0x84>)
    25f8:	4798      	blx	r3
		}
    	xSemaphoreGive(DebugPrintMutex);
    25fa:	2300      	movs	r3, #0
    25fc:	461a      	mov	r2, r3
    25fe:	4619      	mov	r1, r3
    2600:	4803      	ldr	r0, [pc, #12]	; (2610 <SerialStringPrint+0x68>)
    2602:	6800      	ldr	r0, [r0, #0]
    2604:	4c0a      	ldr	r4, [pc, #40]	; (2630 <SerialStringPrint+0x88>)
    2606:	47a0      	blx	r4
    }
	
	#endif
}
    2608:	e7db      	b.n	25c2 <SerialStringPrint+0x1a>
    260a:	bf00      	nop
    260c:	00006d45 	.word	0x00006d45
    2610:	20003498 	.word	0x20003498
    2614:	000057c9 	.word	0x000057c9
    2618:	00004f35 	.word	0x00004f35
    261c:	00006b65 	.word	0x00006b65
    2620:	00006d35 	.word	0x00006d35
    2624:	00002565 	.word	0x00002565
    2628:	000086e8 	.word	0x000086e8
    262c:	00005009 	.word	0x00005009
    2630:	00005331 	.word	0x00005331

00002634 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    2634:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    2636:	2204      	movs	r2, #4
    2638:	4b0b      	ldr	r3, [pc, #44]	; (2668 <SERCOM5_2_Handler+0x34>)
    263a:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    263c:	4d0b      	ldr	r5, [pc, #44]	; (266c <SERCOM5_2_Handler+0x38>)
    263e:	4c0c      	ldr	r4, [pc, #48]	; (2670 <SERCOM5_2_Handler+0x3c>)
    2640:	4628      	mov	r0, r5
    2642:	47a0      	blx	r4
    2644:	2800      	cmp	r0, #0
    2646:	d0fb      	beq.n	2640 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    2648:	4808      	ldr	r0, [pc, #32]	; (266c <SERCOM5_2_Handler+0x38>)
    264a:	4b0a      	ldr	r3, [pc, #40]	; (2674 <SERCOM5_2_Handler+0x40>)
    264c:	4798      	blx	r3
    264e:	490a      	ldr	r1, [pc, #40]	; (2678 <SERCOM5_2_Handler+0x44>)
    2650:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    2652:	2300      	movs	r3, #0
    2654:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    2656:	4c09      	ldr	r4, [pc, #36]	; (267c <SERCOM5_2_Handler+0x48>)
    2658:	4620      	mov	r0, r4
    265a:	4b09      	ldr	r3, [pc, #36]	; (2680 <SERCOM5_2_Handler+0x4c>)
    265c:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    265e:	2105      	movs	r1, #5
    2660:	4620      	mov	r0, r4
    2662:	4b08      	ldr	r3, [pc, #32]	; (2684 <SERCOM5_2_Handler+0x50>)
    2664:	4798      	blx	r3
    2666:	bd38      	pop	{r3, r4, r5, pc}
    2668:	43000400 	.word	0x43000400
    266c:	20000040 	.word	0x20000040
    2670:	00003e21 	.word	0x00003e21
    2674:	00003e0f 	.word	0x00003e0f
    2678:	20003cc0 	.word	0x20003cc0
    267c:	20003cc4 	.word	0x20003cc4
    2680:	00006d35 	.word	0x00006d35
    2684:	00002565 	.word	0x00002565

00002688 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    2688:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    268a:	4b0a      	ldr	r3, [pc, #40]	; (26b4 <configureWatchDogTimeOut+0x2c>)
    268c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2690:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    2692:	4c09      	ldr	r4, [pc, #36]	; (26b8 <configureWatchDogTimeOut+0x30>)
    2694:	6820      	ldr	r0, [r4, #0]
    2696:	2279      	movs	r2, #121	; 0x79
    2698:	4908      	ldr	r1, [pc, #32]	; (26bc <configureWatchDogTimeOut+0x34>)
    269a:	3000      	adds	r0, #0
    269c:	bf18      	it	ne
    269e:	2001      	movne	r0, #1
    26a0:	4b07      	ldr	r3, [pc, #28]	; (26c0 <configureWatchDogTimeOut+0x38>)
    26a2:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    26a4:	462a      	mov	r2, r5
    26a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    26aa:	4620      	mov	r0, r4
    26ac:	4b05      	ldr	r3, [pc, #20]	; (26c4 <configureWatchDogTimeOut+0x3c>)
    26ae:	4798      	blx	r3
    26b0:	bd38      	pop	{r3, r4, r5, pc}
    26b2:	bf00      	nop
    26b4:	2000005c 	.word	0x2000005c
    26b8:	20003da0 	.word	0x20003da0
    26bc:	000086ec 	.word	0x000086ec
    26c0:	00003301 	.word	0x00003301
    26c4:	000047cd 	.word	0x000047cd

000026c8 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    26c8:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    26ca:	2002      	movs	r0, #2
    26cc:	4b07      	ldr	r3, [pc, #28]	; (26ec <enableWatchDogTimer+0x24>)
    26ce:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    26d0:	4c07      	ldr	r4, [pc, #28]	; (26f0 <enableWatchDogTimer+0x28>)
    26d2:	6820      	ldr	r0, [r4, #0]
    26d4:	2296      	movs	r2, #150	; 0x96
    26d6:	4907      	ldr	r1, [pc, #28]	; (26f4 <enableWatchDogTimer+0x2c>)
    26d8:	3000      	adds	r0, #0
    26da:	bf18      	it	ne
    26dc:	2001      	movne	r0, #1
    26de:	4b06      	ldr	r3, [pc, #24]	; (26f8 <enableWatchDogTimer+0x30>)
    26e0:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    26e2:	4620      	mov	r0, r4
    26e4:	4b05      	ldr	r3, [pc, #20]	; (26fc <enableWatchDogTimer+0x34>)
    26e6:	4798      	blx	r3
    26e8:	bd10      	pop	{r4, pc}
    26ea:	bf00      	nop
    26ec:	00002689 	.word	0x00002689
    26f0:	20003da0 	.word	0x20003da0
    26f4:	000086ec 	.word	0x000086ec
    26f8:	00003301 	.word	0x00003301
    26fc:	000048e9 	.word	0x000048e9

00002700 <atmel_start_init>:
{
    2700:	b508      	push	{r3, lr}
    system_init();
    2702:	4b06      	ldr	r3, [pc, #24]	; (271c <atmel_start_init+0x1c>)
    2704:	4798      	blx	r3
    delay_ms(1000);
    2706:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    270a:	4b05      	ldr	r3, [pc, #20]	; (2720 <atmel_start_init+0x20>)
    270c:	4798      	blx	r3
    ForcedResetRequested = WDT_FORCED_RESET_OFF;
    270e:	2201      	movs	r2, #1
    2710:	4b04      	ldr	r3, [pc, #16]	; (2724 <atmel_start_init+0x24>)
    2712:	731a      	strb	r2, [r3, #12]
    enableWatchDogTimer();
    2714:	4b04      	ldr	r3, [pc, #16]	; (2728 <atmel_start_init+0x28>)
    2716:	4798      	blx	r3
    2718:	bd08      	pop	{r3, pc}
    271a:	bf00      	nop
    271c:	00002ec9 	.word	0x00002ec9
    2720:	000030a9 	.word	0x000030a9
    2724:	2000005c 	.word	0x2000005c
    2728:	000026c9 	.word	0x000026c9

0000272c <kickWatchDog>:
********************************************************************************/
int32_t kickWatchDog(void)
{	
	int32_t status = ERR_NONE;

	if(WDT_FORCED_RESET_OFF == ForcedResetRequested)
    272c:	4b0a      	ldr	r3, [pc, #40]	; (2758 <kickWatchDog+0x2c>)
    272e:	7b1b      	ldrb	r3, [r3, #12]
    2730:	2b01      	cmp	r3, #1
    2732:	d10d      	bne.n	2750 <kickWatchDog+0x24>
{	
    2734:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    2736:	4c09      	ldr	r4, [pc, #36]	; (275c <kickWatchDog+0x30>)
    2738:	6820      	ldr	r0, [r4, #0]
    273a:	22b3      	movs	r2, #179	; 0xb3
    273c:	4908      	ldr	r1, [pc, #32]	; (2760 <kickWatchDog+0x34>)
    273e:	3000      	adds	r0, #0
    2740:	bf18      	it	ne
    2742:	2001      	movne	r0, #1
    2744:	4b07      	ldr	r3, [pc, #28]	; (2764 <kickWatchDog+0x38>)
    2746:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    2748:	4620      	mov	r0, r4
    274a:	4b07      	ldr	r3, [pc, #28]	; (2768 <kickWatchDog+0x3c>)
    274c:	4798      	blx	r3
    274e:	bd10      	pop	{r4, pc}
	{
		status = wdt_feed(&WDT_0);
	}
	else
	{
		status = ERR_DENIED;
    2750:	f06f 0010 	mvn.w	r0, #16
	}

	return status;
    2754:	4770      	bx	lr
    2756:	bf00      	nop
    2758:	2000005c 	.word	0x2000005c
    275c:	20003da0 	.word	0x20003da0
    2760:	000086ec 	.word	0x000086ec
    2764:	00003301 	.word	0x00003301
    2768:	00004975 	.word	0x00004975

0000276c <requestWatchDogForcedReset>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
void requestWatchDogForcedReset(void)
{
    276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DEBUG_PRINT("Rebooting...Please wait...");
    276e:	4810      	ldr	r0, [pc, #64]	; (27b0 <requestWatchDogForcedReset+0x44>)
    2770:	4b10      	ldr	r3, [pc, #64]	; (27b4 <requestWatchDogForcedReset+0x48>)
    2772:	4798      	blx	r3
	ForcedResetRequested = WDT_FORCED_RESET_ON;
    2774:	2700      	movs	r7, #0
    2776:	4b10      	ldr	r3, [pc, #64]	; (27b8 <requestWatchDogForcedReset+0x4c>)
    2778:	731f      	strb	r7, [r3, #12]
	ASSERT(wdt && wdt->dev.hw);
    277a:	4e10      	ldr	r6, [pc, #64]	; (27bc <requestWatchDogForcedReset+0x50>)
    277c:	4c10      	ldr	r4, [pc, #64]	; (27c0 <requestWatchDogForcedReset+0x54>)
    277e:	6820      	ldr	r0, [r4, #0]
    2780:	22a5      	movs	r2, #165	; 0xa5
    2782:	4631      	mov	r1, r6
    2784:	1bc0      	subs	r0, r0, r7
    2786:	bf18      	it	ne
    2788:	2001      	movne	r0, #1
    278a:	4d0e      	ldr	r5, [pc, #56]	; (27c4 <requestWatchDogForcedReset+0x58>)
    278c:	47a8      	blx	r5
	return _wdt_disable(&wdt->dev);
    278e:	4620      	mov	r0, r4
    2790:	4b0d      	ldr	r3, [pc, #52]	; (27c8 <requestWatchDogForcedReset+0x5c>)
    2792:	4798      	blx	r3
	wdt_disable(&WDT_0);
	configureWatchDogTimeOut(WDT_TIMEOUT_FAST);
    2794:	4638      	mov	r0, r7
    2796:	4b0d      	ldr	r3, [pc, #52]	; (27cc <requestWatchDogForcedReset+0x60>)
    2798:	4798      	blx	r3
	ASSERT(wdt && wdt->dev.hw);
    279a:	6820      	ldr	r0, [r4, #0]
    279c:	2296      	movs	r2, #150	; 0x96
    279e:	4631      	mov	r1, r6
    27a0:	1bc0      	subs	r0, r0, r7
    27a2:	bf18      	it	ne
    27a4:	2001      	movne	r0, #1
    27a6:	47a8      	blx	r5
	return _wdt_enable(&wdt->dev);
    27a8:	4620      	mov	r0, r4
    27aa:	4b09      	ldr	r3, [pc, #36]	; (27d0 <requestWatchDogForcedReset+0x64>)
    27ac:	4798      	blx	r3
    27ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27b0:	00008708 	.word	0x00008708
    27b4:	000025a9 	.word	0x000025a9
    27b8:	2000005c 	.word	0x2000005c
    27bc:	000086ec 	.word	0x000086ec
    27c0:	20003da0 	.word	0x20003da0
    27c4:	00003301 	.word	0x00003301
    27c8:	00004925 	.word	0x00004925
    27cc:	00002689 	.word	0x00002689
    27d0:	000048e9 	.word	0x000048e9

000027d4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    27d4:	e7fe      	b.n	27d4 <Dummy_Handler>
	...

000027d8 <Reset_Handler>:
{
    27d8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    27da:	4b1c      	ldr	r3, [pc, #112]	; (284c <Reset_Handler+0x74>)
    27dc:	4a1c      	ldr	r2, [pc, #112]	; (2850 <Reset_Handler+0x78>)
    27de:	429a      	cmp	r2, r3
    27e0:	d010      	beq.n	2804 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    27e2:	4b1c      	ldr	r3, [pc, #112]	; (2854 <Reset_Handler+0x7c>)
    27e4:	4a19      	ldr	r2, [pc, #100]	; (284c <Reset_Handler+0x74>)
    27e6:	429a      	cmp	r2, r3
    27e8:	d20c      	bcs.n	2804 <Reset_Handler+0x2c>
    27ea:	3b01      	subs	r3, #1
    27ec:	1a9b      	subs	r3, r3, r2
    27ee:	f023 0303 	bic.w	r3, r3, #3
    27f2:	3304      	adds	r3, #4
    27f4:	4413      	add	r3, r2
    27f6:	4916      	ldr	r1, [pc, #88]	; (2850 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    27f8:	f851 0b04 	ldr.w	r0, [r1], #4
    27fc:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    2800:	429a      	cmp	r2, r3
    2802:	d1f9      	bne.n	27f8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    2804:	4b14      	ldr	r3, [pc, #80]	; (2858 <Reset_Handler+0x80>)
    2806:	4a15      	ldr	r2, [pc, #84]	; (285c <Reset_Handler+0x84>)
    2808:	429a      	cmp	r2, r3
    280a:	d20a      	bcs.n	2822 <Reset_Handler+0x4a>
    280c:	3b01      	subs	r3, #1
    280e:	1a9b      	subs	r3, r3, r2
    2810:	f023 0303 	bic.w	r3, r3, #3
    2814:	3304      	adds	r3, #4
    2816:	4413      	add	r3, r2
                *pDest++ = 0;
    2818:	2100      	movs	r1, #0
    281a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    281e:	4293      	cmp	r3, r2
    2820:	d1fb      	bne.n	281a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2822:	4b0f      	ldr	r3, [pc, #60]	; (2860 <Reset_Handler+0x88>)
    2824:	4a0f      	ldr	r2, [pc, #60]	; (2864 <Reset_Handler+0x8c>)
    2826:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    282a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    282c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2830:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    2834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2838:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    283c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    2840:	4b09      	ldr	r3, [pc, #36]	; (2868 <Reset_Handler+0x90>)
    2842:	4798      	blx	r3
        main();
    2844:	4b09      	ldr	r3, [pc, #36]	; (286c <Reset_Handler+0x94>)
    2846:	4798      	blx	r3
    2848:	e7fe      	b.n	2848 <Reset_Handler+0x70>
    284a:	bf00      	nop
    284c:	20000000 	.word	0x20000000
    2850:	00008dd0 	.word	0x00008dd0
    2854:	20000190 	.word	0x20000190
    2858:	20003e8c 	.word	0x20003e8c
    285c:	20000190 	.word	0x20000190
    2860:	e000ed00 	.word	0xe000ed00
    2864:	00000000 	.word	0x00000000
    2868:	00006ab5 	.word	0x00006ab5
    286c:	00004a1d 	.word	0x00004a1d

00002870 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
    2870:	4a04      	ldr	r2, [pc, #16]	; (2884 <AC_0_CLOCK_init+0x14>)
    2872:	69d3      	ldr	r3, [r2, #28]
    2874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2878:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    287a:	2240      	movs	r2, #64	; 0x40
    287c:	4b02      	ldr	r3, [pc, #8]	; (2888 <AC_0_CLOCK_init+0x18>)
    287e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2882:	4770      	bx	lr
    2884:	40000800 	.word	0x40000800
    2888:	40001c00 	.word	0x40001c00

0000288c <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
    288c:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
    288e:	4b03      	ldr	r3, [pc, #12]	; (289c <AC_0_init+0x10>)
    2890:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
    2892:	4903      	ldr	r1, [pc, #12]	; (28a0 <AC_0_init+0x14>)
    2894:	4803      	ldr	r0, [pc, #12]	; (28a4 <AC_0_init+0x18>)
    2896:	4b04      	ldr	r3, [pc, #16]	; (28a8 <AC_0_init+0x1c>)
    2898:	4798      	blx	r3
    289a:	bd08      	pop	{r3, pc}
    289c:	00002871 	.word	0x00002871
    28a0:	42002000 	.word	0x42002000
    28a4:	20003d6c 	.word	0x20003d6c
    28a8:	00002fd9 	.word	0x00002fd9

000028ac <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    28ac:	4b5d      	ldr	r3, [pc, #372]	; (2a24 <ADC_0_PORT_init+0x178>)
    28ae:	2204      	movs	r2, #4
    28b0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    28b2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    28b6:	629a      	str	r2, [r3, #40]	; 0x28
    28b8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    28bc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    28be:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    28c2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    28c6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    28ca:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    28ce:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    28d2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    28d6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    28da:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    28de:	2108      	movs	r1, #8
    28e0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    28e2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    28e6:	6299      	str	r1, [r3, #40]	; 0x28
    28e8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    28ea:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    28ee:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    28f2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    28f6:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    28fa:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    28fe:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2902:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2906:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    290a:	f44f 7180 	mov.w	r1, #256	; 0x100
    290e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2912:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2916:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    291a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    291e:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    2922:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2926:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    292a:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    292e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2932:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2936:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    293a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    293e:	f44f 7100 	mov.w	r1, #512	; 0x200
    2942:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2946:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    294a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    294e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2952:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    2956:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    295a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    295e:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2962:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2966:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    296a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    296e:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2972:	2110      	movs	r1, #16
    2974:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2976:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    297a:	6299      	str	r1, [r3, #40]	; 0x28
    297c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    297e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    2982:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2986:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    298a:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    298e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2992:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2996:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    299a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    299e:	2120      	movs	r1, #32
    29a0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29a2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    29a6:	6299      	str	r1, [r3, #40]	; 0x28
    29a8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29aa:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    29ae:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    29b2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    29b6:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    29ba:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    29be:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    29c2:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    29c6:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    29ca:	2140      	movs	r1, #64	; 0x40
    29cc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29ce:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    29d2:	6299      	str	r1, [r3, #40]	; 0x28
    29d4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29d6:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    29da:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    29de:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    29e2:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    29e6:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    29ea:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    29ee:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    29f2:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    29f6:	2180      	movs	r1, #128	; 0x80
    29f8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    29fe:	6299      	str	r1, [r3, #40]	; 0x28
    2a00:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a02:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a06:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2a0a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2a12:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2a16:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2a1a:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2a1e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    2a22:	4770      	bx	lr
    2a24:	41008000 	.word	0x41008000

00002a28 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    2a28:	4a04      	ldr	r2, [pc, #16]	; (2a3c <ADC_0_CLOCK_init+0x14>)
    2a2a:	6a13      	ldr	r3, [r2, #32]
    2a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2a30:	6213      	str	r3, [r2, #32]
    2a32:	2241      	movs	r2, #65	; 0x41
    2a34:	4b02      	ldr	r3, [pc, #8]	; (2a40 <ADC_0_CLOCK_init+0x18>)
    2a36:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2a3a:	4770      	bx	lr
    2a3c:	40000800 	.word	0x40000800
    2a40:	40001c00 	.word	0x40001c00

00002a44 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    2a44:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    2a46:	4b05      	ldr	r3, [pc, #20]	; (2a5c <ADC_0_init+0x18>)
    2a48:	4798      	blx	r3
	ADC_0_PORT_init();
    2a4a:	4b05      	ldr	r3, [pc, #20]	; (2a60 <ADC_0_init+0x1c>)
    2a4c:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    2a4e:	2200      	movs	r2, #0
    2a50:	4904      	ldr	r1, [pc, #16]	; (2a64 <ADC_0_init+0x20>)
    2a52:	4805      	ldr	r0, [pc, #20]	; (2a68 <ADC_0_init+0x24>)
    2a54:	4b05      	ldr	r3, [pc, #20]	; (2a6c <ADC_0_init+0x28>)
    2a56:	4798      	blx	r3
    2a58:	bd08      	pop	{r3, pc}
    2a5a:	bf00      	nop
    2a5c:	00002a29 	.word	0x00002a29
    2a60:	000028ad 	.word	0x000028ad
    2a64:	43001c00 	.word	0x43001c00
    2a68:	20003d7c 	.word	0x20003d7c
    2a6c:	00003009 	.word	0x00003009

00002a70 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    2a70:	4a04      	ldr	r2, [pc, #16]	; (2a84 <DAC_0_CLOCK_init+0x14>)
    2a72:	6a13      	ldr	r3, [r2, #32]
    2a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2a78:	6213      	str	r3, [r2, #32]
    2a7a:	2240      	movs	r2, #64	; 0x40
    2a7c:	4b02      	ldr	r3, [pc, #8]	; (2a88 <DAC_0_CLOCK_init+0x18>)
    2a7e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    2a82:	4770      	bx	lr
    2a84:	40000800 	.word	0x40000800
    2a88:	40001c00 	.word	0x40001c00

00002a8c <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    2a8c:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    2a8e:	4b03      	ldr	r3, [pc, #12]	; (2a9c <DAC_0_init+0x10>)
    2a90:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    2a92:	4903      	ldr	r1, [pc, #12]	; (2aa0 <DAC_0_init+0x14>)
    2a94:	4803      	ldr	r0, [pc, #12]	; (2aa4 <DAC_0_init+0x18>)
    2a96:	4b04      	ldr	r3, [pc, #16]	; (2aa8 <DAC_0_init+0x1c>)
    2a98:	4798      	blx	r3
    2a9a:	bd08      	pop	{r3, pc}
    2a9c:	00002a71 	.word	0x00002a71
    2aa0:	43002400 	.word	0x43002400
    2aa4:	20003da4 	.word	0x20003da4
    2aa8:	00003055 	.word	0x00003055

00002aac <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    2aac:	b508      	push	{r3, lr}
    2aae:	2240      	movs	r2, #64	; 0x40
    2ab0:	4b05      	ldr	r3, [pc, #20]	; (2ac8 <EXTERNAL_IRQ_0_init+0x1c>)
    2ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2ab6:	4a05      	ldr	r2, [pc, #20]	; (2acc <EXTERNAL_IRQ_0_init+0x20>)
    2ab8:	6953      	ldr	r3, [r2, #20]
    2aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2abe:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    2ac0:	4b03      	ldr	r3, [pc, #12]	; (2ad0 <EXTERNAL_IRQ_0_init+0x24>)
    2ac2:	4798      	blx	r3
    2ac4:	bd08      	pop	{r3, pc}
    2ac6:	bf00      	nop
    2ac8:	40001c00 	.word	0x40001c00
    2acc:	40000800 	.word	0x40000800
    2ad0:	0000310d 	.word	0x0000310d

00002ad4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    2ad4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    2ad6:	4a04      	ldr	r2, [pc, #16]	; (2ae8 <EVENT_SYSTEM_0_init+0x14>)
    2ad8:	6993      	ldr	r3, [r2, #24]
    2ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2ade:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    2ae0:	4b02      	ldr	r3, [pc, #8]	; (2aec <EVENT_SYSTEM_0_init+0x18>)
    2ae2:	4798      	blx	r3
    2ae4:	bd08      	pop	{r3, pc}
    2ae6:	bf00      	nop
    2ae8:	40000800 	.word	0x40000800
    2aec:	000030c9 	.word	0x000030c9

00002af0 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    2af0:	4a02      	ldr	r2, [pc, #8]	; (2afc <FLASH_0_CLOCK_init+0xc>)
    2af2:	6913      	ldr	r3, [r2, #16]
    2af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2af8:	6113      	str	r3, [r2, #16]
    2afa:	4770      	bx	lr
    2afc:	40000800 	.word	0x40000800

00002b00 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    2b00:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    2b02:	4b03      	ldr	r3, [pc, #12]	; (2b10 <FLASH_0_init+0x10>)
    2b04:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    2b06:	4903      	ldr	r1, [pc, #12]	; (2b14 <FLASH_0_init+0x14>)
    2b08:	4803      	ldr	r0, [pc, #12]	; (2b18 <FLASH_0_init+0x18>)
    2b0a:	4b04      	ldr	r3, [pc, #16]	; (2b1c <FLASH_0_init+0x1c>)
    2b0c:	4798      	blx	r3
    2b0e:	bd08      	pop	{r3, pc}
    2b10:	00002af1 	.word	0x00002af1
    2b14:	41004000 	.word	0x41004000
    2b18:	20003d30 	.word	0x20003d30
    2b1c:	00003145 	.word	0x00003145

00002b20 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b20:	4b10      	ldr	r3, [pc, #64]	; (2b64 <ModemData_PORT_init+0x44>)
    2b22:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2b2a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2b32:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2b36:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2b3a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2b3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b42:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2b4a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b4e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2b52:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2b56:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2b5a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    2b62:	4770      	bx	lr
    2b64:	41008000 	.word	0x41008000

00002b68 <ModemData_CLOCK_init>:
    2b68:	4b06      	ldr	r3, [pc, #24]	; (2b84 <ModemData_CLOCK_init+0x1c>)
    2b6a:	2240      	movs	r2, #64	; 0x40
    2b6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    2b70:	224a      	movs	r2, #74	; 0x4a
    2b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    2b76:	4a04      	ldr	r2, [pc, #16]	; (2b88 <ModemData_CLOCK_init+0x20>)
    2b78:	6993      	ldr	r3, [r2, #24]
    2b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2b7e:	6193      	str	r3, [r2, #24]
    2b80:	4770      	bx	lr
    2b82:	bf00      	nop
    2b84:	40001c00 	.word	0x40001c00
    2b88:	40000800 	.word	0x40000800

00002b8c <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    2b8c:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    2b8e:	4b03      	ldr	r3, [pc, #12]	; (2b9c <ModemData_init+0x10>)
    2b90:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    2b92:	4b03      	ldr	r3, [pc, #12]	; (2ba0 <ModemData_init+0x14>)
    2b94:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    2b96:	4b03      	ldr	r3, [pc, #12]	; (2ba4 <ModemData_init+0x18>)
    2b98:	4798      	blx	r3
    2b9a:	bd08      	pop	{r3, pc}
    2b9c:	00002b69 	.word	0x00002b69
    2ba0:	00001bb9 	.word	0x00001bb9
    2ba4:	00002b21 	.word	0x00002b21

00002ba8 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ba8:	4b10      	ldr	r3, [pc, #64]	; (2bec <SerialDebug_PORT_init+0x44>)
    2baa:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    2bae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2bb2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2bb6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2bba:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2bbe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2bc2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2bc6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2bca:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    2bce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2bd2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2bd6:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2bda:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2bde:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2be2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2be6:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    2bea:	4770      	bx	lr
    2bec:	41008000 	.word	0x41008000

00002bf0 <SerialDebug_CLOCK_init>:
    2bf0:	4b06      	ldr	r3, [pc, #24]	; (2c0c <SerialDebug_CLOCK_init+0x1c>)
    2bf2:	2240      	movs	r2, #64	; 0x40
    2bf4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    2bf8:	224a      	movs	r2, #74	; 0x4a
    2bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2bfe:	4a04      	ldr	r2, [pc, #16]	; (2c10 <SerialDebug_CLOCK_init+0x20>)
    2c00:	6a13      	ldr	r3, [r2, #32]
    2c02:	f043 0302 	orr.w	r3, r3, #2
    2c06:	6213      	str	r3, [r2, #32]
    2c08:	4770      	bx	lr
    2c0a:	bf00      	nop
    2c0c:	40001c00 	.word	0x40001c00
    2c10:	40000800 	.word	0x40000800

00002c14 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    2c14:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    2c16:	4b03      	ldr	r3, [pc, #12]	; (2c24 <SerialDebug_init+0x10>)
    2c18:	4798      	blx	r3
	SerialDebugPrintInit();
    2c1a:	4b03      	ldr	r3, [pc, #12]	; (2c28 <SerialDebug_init+0x14>)
    2c1c:	4798      	blx	r3
	SerialDebug_PORT_init();
    2c1e:	4b03      	ldr	r3, [pc, #12]	; (2c2c <SerialDebug_init+0x18>)
    2c20:	4798      	blx	r3
    2c22:	bd08      	pop	{r3, pc}
    2c24:	00002bf1 	.word	0x00002bf1
    2c28:	0000253d 	.word	0x0000253d
    2c2c:	00002ba9 	.word	0x00002ba9

00002c30 <delay_driver_init>:
}

void delay_driver_init(void)
{
    2c30:	b508      	push	{r3, lr}
	delay_init(SysTick);
    2c32:	4802      	ldr	r0, [pc, #8]	; (2c3c <delay_driver_init+0xc>)
    2c34:	4b02      	ldr	r3, [pc, #8]	; (2c40 <delay_driver_init+0x10>)
    2c36:	4798      	blx	r3
    2c38:	bd08      	pop	{r3, pc}
    2c3a:	bf00      	nop
    2c3c:	e000e010 	.word	0xe000e010
    2c40:	00003095 	.word	0x00003095

00002c44 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2c44:	4a04      	ldr	r2, [pc, #16]	; (2c58 <PWM_0_CLOCK_init+0x14>)
    2c46:	6953      	ldr	r3, [r2, #20]
    2c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2c4c:	6153      	str	r3, [r2, #20]
    2c4e:	2240      	movs	r2, #64	; 0x40
    2c50:	4b02      	ldr	r3, [pc, #8]	; (2c5c <PWM_0_CLOCK_init+0x18>)
    2c52:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    2c56:	4770      	bx	lr
    2c58:	40000800 	.word	0x40000800
    2c5c:	40001c00 	.word	0x40001c00

00002c60 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    2c60:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    2c62:	4b05      	ldr	r3, [pc, #20]	; (2c78 <PWM_0_init+0x18>)
    2c64:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    2c66:	4b05      	ldr	r3, [pc, #20]	; (2c7c <PWM_0_init+0x1c>)
    2c68:	4798      	blx	r3
    2c6a:	4602      	mov	r2, r0
    2c6c:	4904      	ldr	r1, [pc, #16]	; (2c80 <PWM_0_init+0x20>)
    2c6e:	4805      	ldr	r0, [pc, #20]	; (2c84 <PWM_0_init+0x24>)
    2c70:	4b05      	ldr	r3, [pc, #20]	; (2c88 <PWM_0_init+0x28>)
    2c72:	4798      	blx	r3
    2c74:	bd08      	pop	{r3, pc}
    2c76:	bf00      	nop
    2c78:	00002c45 	.word	0x00002c45
    2c7c:	000046e5 	.word	0x000046e5
    2c80:	40003800 	.word	0x40003800
    2c84:	20003cf8 	.word	0x20003cf8
    2c88:	000031a1 	.word	0x000031a1

00002c8c <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    2c8c:	4a04      	ldr	r2, [pc, #16]	; (2ca0 <PWM_1_CLOCK_init+0x14>)
    2c8e:	6953      	ldr	r3, [r2, #20]
    2c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2c94:	6153      	str	r3, [r2, #20]
    2c96:	2240      	movs	r2, #64	; 0x40
    2c98:	4b02      	ldr	r3, [pc, #8]	; (2ca4 <PWM_1_CLOCK_init+0x18>)
    2c9a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    2c9e:	4770      	bx	lr
    2ca0:	40000800 	.word	0x40000800
    2ca4:	40001c00 	.word	0x40001c00

00002ca8 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    2ca8:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    2caa:	4b05      	ldr	r3, [pc, #20]	; (2cc0 <PWM_1_init+0x18>)
    2cac:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    2cae:	4b05      	ldr	r3, [pc, #20]	; (2cc4 <PWM_1_init+0x1c>)
    2cb0:	4798      	blx	r3
    2cb2:	4602      	mov	r2, r0
    2cb4:	4904      	ldr	r1, [pc, #16]	; (2cc8 <PWM_1_init+0x20>)
    2cb6:	4805      	ldr	r0, [pc, #20]	; (2ccc <PWM_1_init+0x24>)
    2cb8:	4b05      	ldr	r3, [pc, #20]	; (2cd0 <PWM_1_init+0x28>)
    2cba:	4798      	blx	r3
    2cbc:	bd08      	pop	{r3, pc}
    2cbe:	bf00      	nop
    2cc0:	00002c8d 	.word	0x00002c8d
    2cc4:	000046e5 	.word	0x000046e5
    2cc8:	40003c00 	.word	0x40003c00
    2ccc:	20003e18 	.word	0x20003e18
    2cd0:	000031a1 	.word	0x000031a1

00002cd4 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2cd4:	4a04      	ldr	r2, [pc, #16]	; (2ce8 <PWM_2_CLOCK_init+0x14>)
    2cd6:	6993      	ldr	r3, [r2, #24]
    2cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2cdc:	6193      	str	r3, [r2, #24]
    2cde:	2240      	movs	r2, #64	; 0x40
    2ce0:	4b02      	ldr	r3, [pc, #8]	; (2cec <PWM_2_CLOCK_init+0x18>)
    2ce2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    2ce6:	4770      	bx	lr
    2ce8:	40000800 	.word	0x40000800
    2cec:	40001c00 	.word	0x40001c00

00002cf0 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    2cf0:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    2cf2:	4b05      	ldr	r3, [pc, #20]	; (2d08 <PWM_2_init+0x18>)
    2cf4:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    2cf6:	4b05      	ldr	r3, [pc, #20]	; (2d0c <PWM_2_init+0x1c>)
    2cf8:	4798      	blx	r3
    2cfa:	4602      	mov	r2, r0
    2cfc:	4904      	ldr	r1, [pc, #16]	; (2d10 <PWM_2_init+0x20>)
    2cfe:	4805      	ldr	r0, [pc, #20]	; (2d14 <PWM_2_init+0x24>)
    2d00:	4b05      	ldr	r3, [pc, #20]	; (2d18 <PWM_2_init+0x28>)
    2d02:	4798      	blx	r3
    2d04:	bd08      	pop	{r3, pc}
    2d06:	bf00      	nop
    2d08:	00002cd5 	.word	0x00002cd5
    2d0c:	000046e5 	.word	0x000046e5
    2d10:	4101a000 	.word	0x4101a000
    2d14:	20003d14 	.word	0x20003d14
    2d18:	000031a1 	.word	0x000031a1

00002d1c <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    2d1c:	4a04      	ldr	r2, [pc, #16]	; (2d30 <TIMER_3_CLOCK_init+0x14>)
    2d1e:	6993      	ldr	r3, [r2, #24]
    2d20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    2d24:	6193      	str	r3, [r2, #24]
    2d26:	2240      	movs	r2, #64	; 0x40
    2d28:	4b02      	ldr	r3, [pc, #8]	; (2d34 <TIMER_3_CLOCK_init+0x18>)
    2d2a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    2d2e:	4770      	bx	lr
    2d30:	40000800 	.word	0x40000800
    2d34:	40001c00 	.word	0x40001c00

00002d38 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    2d38:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    2d3a:	4b05      	ldr	r3, [pc, #20]	; (2d50 <TIMER_3_init+0x18>)
    2d3c:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    2d3e:	4b05      	ldr	r3, [pc, #20]	; (2d54 <TIMER_3_init+0x1c>)
    2d40:	4798      	blx	r3
    2d42:	4602      	mov	r2, r0
    2d44:	4904      	ldr	r1, [pc, #16]	; (2d58 <TIMER_3_init+0x20>)
    2d46:	4805      	ldr	r0, [pc, #20]	; (2d5c <TIMER_3_init+0x24>)
    2d48:	4b05      	ldr	r3, [pc, #20]	; (2d60 <TIMER_3_init+0x28>)
    2d4a:	4798      	blx	r3
    2d4c:	bd08      	pop	{r3, pc}
    2d4e:	bf00      	nop
    2d50:	00002d1d 	.word	0x00002d1d
    2d54:	0000419d 	.word	0x0000419d
    2d58:	41016000 	.word	0x41016000
    2d5c:	20003e38 	.word	0x20003e38
    2d60:	000032bd 	.word	0x000032bd

00002d64 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    2d64:	4a04      	ldr	r2, [pc, #16]	; (2d78 <TIMER_4_CLOCK_init+0x14>)
    2d66:	6993      	ldr	r3, [r2, #24]
    2d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    2d6c:	6193      	str	r3, [r2, #24]
    2d6e:	2240      	movs	r2, #64	; 0x40
    2d70:	4b02      	ldr	r3, [pc, #8]	; (2d7c <TIMER_4_CLOCK_init+0x18>)
    2d72:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    2d76:	4770      	bx	lr
    2d78:	40000800 	.word	0x40000800
    2d7c:	40001c00 	.word	0x40001c00

00002d80 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    2d80:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    2d82:	4b05      	ldr	r3, [pc, #20]	; (2d98 <TIMER_4_init+0x18>)
    2d84:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    2d86:	4b05      	ldr	r3, [pc, #20]	; (2d9c <TIMER_4_init+0x1c>)
    2d88:	4798      	blx	r3
    2d8a:	4602      	mov	r2, r0
    2d8c:	4904      	ldr	r1, [pc, #16]	; (2da0 <TIMER_4_init+0x20>)
    2d8e:	4805      	ldr	r0, [pc, #20]	; (2da4 <TIMER_4_init+0x24>)
    2d90:	4b05      	ldr	r3, [pc, #20]	; (2da8 <TIMER_4_init+0x28>)
    2d92:	4798      	blx	r3
    2d94:	bd08      	pop	{r3, pc}
    2d96:	bf00      	nop
    2d98:	00002d65 	.word	0x00002d65
    2d9c:	0000419d 	.word	0x0000419d
    2da0:	41018000 	.word	0x41018000
    2da4:	20003d80 	.word	0x20003d80
    2da8:	000032bd 	.word	0x000032bd

00002dac <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    2dac:	4a04      	ldr	r2, [pc, #16]	; (2dc0 <TIMER_5_CLOCK_init+0x14>)
    2dae:	69d3      	ldr	r3, [r2, #28]
    2db0:	f043 0308 	orr.w	r3, r3, #8
    2db4:	61d3      	str	r3, [r2, #28]
    2db6:	2240      	movs	r2, #64	; 0x40
    2db8:	4b02      	ldr	r3, [pc, #8]	; (2dc4 <TIMER_5_CLOCK_init+0x18>)
    2dba:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    2dbe:	4770      	bx	lr
    2dc0:	40000800 	.word	0x40000800
    2dc4:	40001c00 	.word	0x40001c00

00002dc8 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    2dc8:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    2dca:	4b05      	ldr	r3, [pc, #20]	; (2de0 <TIMER_5_init+0x18>)
    2dcc:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    2dce:	4b05      	ldr	r3, [pc, #20]	; (2de4 <TIMER_5_init+0x1c>)
    2dd0:	4798      	blx	r3
    2dd2:	4602      	mov	r2, r0
    2dd4:	4904      	ldr	r1, [pc, #16]	; (2de8 <TIMER_5_init+0x20>)
    2dd6:	4805      	ldr	r0, [pc, #20]	; (2dec <TIMER_5_init+0x24>)
    2dd8:	4b05      	ldr	r3, [pc, #20]	; (2df0 <TIMER_5_init+0x28>)
    2dda:	4798      	blx	r3
    2ddc:	bd08      	pop	{r3, pc}
    2dde:	bf00      	nop
    2de0:	00002dad 	.word	0x00002dad
    2de4:	0000419d 	.word	0x0000419d
    2de8:	42000c00 	.word	0x42000c00
    2dec:	20003dd8 	.word	0x20003dd8
    2df0:	000032bd 	.word	0x000032bd

00002df4 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    2df4:	4a04      	ldr	r2, [pc, #16]	; (2e08 <TIMER_6_CLOCK_init+0x14>)
    2df6:	69d3      	ldr	r3, [r2, #28]
    2df8:	f043 0310 	orr.w	r3, r3, #16
    2dfc:	61d3      	str	r3, [r2, #28]
    2dfe:	2240      	movs	r2, #64	; 0x40
    2e00:	4b02      	ldr	r3, [pc, #8]	; (2e0c <TIMER_6_CLOCK_init+0x18>)
    2e02:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    2e06:	4770      	bx	lr
    2e08:	40000800 	.word	0x40000800
    2e0c:	40001c00 	.word	0x40001c00

00002e10 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    2e10:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    2e12:	4b05      	ldr	r3, [pc, #20]	; (2e28 <TIMER_6_init+0x18>)
    2e14:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    2e16:	4b05      	ldr	r3, [pc, #20]	; (2e2c <TIMER_6_init+0x1c>)
    2e18:	4798      	blx	r3
    2e1a:	4602      	mov	r2, r0
    2e1c:	4904      	ldr	r1, [pc, #16]	; (2e30 <TIMER_6_init+0x20>)
    2e1e:	4805      	ldr	r0, [pc, #20]	; (2e34 <TIMER_6_init+0x24>)
    2e20:	4b05      	ldr	r3, [pc, #20]	; (2e38 <TIMER_6_init+0x28>)
    2e22:	4798      	blx	r3
    2e24:	bd08      	pop	{r3, pc}
    2e26:	bf00      	nop
    2e28:	00002df5 	.word	0x00002df5
    2e2c:	0000419d 	.word	0x0000419d
    2e30:	42001000 	.word	0x42001000
    2e34:	20003df8 	.word	0x20003df8
    2e38:	000032bd 	.word	0x000032bd

00002e3c <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    2e3c:	4a04      	ldr	r2, [pc, #16]	; (2e50 <TIMER_7_CLOCK_init+0x14>)
    2e3e:	6a13      	ldr	r3, [r2, #32]
    2e40:	f043 0310 	orr.w	r3, r3, #16
    2e44:	6213      	str	r3, [r2, #32]
    2e46:	2240      	movs	r2, #64	; 0x40
    2e48:	4b02      	ldr	r3, [pc, #8]	; (2e54 <TIMER_7_CLOCK_init+0x18>)
    2e4a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    2e4e:	4770      	bx	lr
    2e50:	40000800 	.word	0x40000800
    2e54:	40001c00 	.word	0x40001c00

00002e58 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    2e58:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    2e5a:	4b05      	ldr	r3, [pc, #20]	; (2e70 <TIMER_7_init+0x18>)
    2e5c:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    2e5e:	4b05      	ldr	r3, [pc, #20]	; (2e74 <TIMER_7_init+0x1c>)
    2e60:	4798      	blx	r3
    2e62:	4602      	mov	r2, r0
    2e64:	4904      	ldr	r1, [pc, #16]	; (2e78 <TIMER_7_init+0x20>)
    2e66:	4805      	ldr	r0, [pc, #20]	; (2e7c <TIMER_7_init+0x24>)
    2e68:	4b05      	ldr	r3, [pc, #20]	; (2e80 <TIMER_7_init+0x28>)
    2e6a:	4798      	blx	r3
    2e6c:	bd08      	pop	{r3, pc}
    2e6e:	bf00      	nop
    2e70:	00002e3d 	.word	0x00002e3d
    2e74:	0000419d 	.word	0x0000419d
    2e78:	43001000 	.word	0x43001000
    2e7c:	20003d4c 	.word	0x20003d4c
    2e80:	000032bd 	.word	0x000032bd

00002e84 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2e84:	4a02      	ldr	r2, [pc, #8]	; (2e90 <WDT_0_CLOCK_init+0xc>)
    2e86:	6953      	ldr	r3, [r2, #20]
    2e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2e8c:	6153      	str	r3, [r2, #20]
    2e8e:	4770      	bx	lr
    2e90:	40000800 	.word	0x40000800

00002e94 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    2e94:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    2e96:	4b06      	ldr	r3, [pc, #24]	; (2eb0 <WDT_0_init+0x1c>)
    2e98:	4798      	blx	r3
	ASSERT(wdt && hw);
    2e9a:	2252      	movs	r2, #82	; 0x52
    2e9c:	4905      	ldr	r1, [pc, #20]	; (2eb4 <WDT_0_init+0x20>)
    2e9e:	2001      	movs	r0, #1
    2ea0:	4b05      	ldr	r3, [pc, #20]	; (2eb8 <WDT_0_init+0x24>)
    2ea2:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    2ea4:	4805      	ldr	r0, [pc, #20]	; (2ebc <WDT_0_init+0x28>)
    2ea6:	4b06      	ldr	r3, [pc, #24]	; (2ec0 <WDT_0_init+0x2c>)
    2ea8:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    2eaa:	4b06      	ldr	r3, [pc, #24]	; (2ec4 <WDT_0_init+0x30>)
    2eac:	4798      	blx	r3
    2eae:	bd08      	pop	{r3, pc}
    2eb0:	00002e85 	.word	0x00002e85
    2eb4:	000086ec 	.word	0x000086ec
    2eb8:	00003301 	.word	0x00003301
    2ebc:	20003da0 	.word	0x20003da0
    2ec0:	40002000 	.word	0x40002000
    2ec4:	00004761 	.word	0x00004761

00002ec8 <system_init>:
		//DEBUG_PRINT("WDT Failed to initialize");
	}
}

void system_init(void)
{
    2ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    2ecc:	4b26      	ldr	r3, [pc, #152]	; (2f68 <system_init+0xa0>)
    2ece:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    2ed0:	4b26      	ldr	r3, [pc, #152]	; (2f6c <system_init+0xa4>)
    2ed2:	4798      	blx	r3

	AC_0_init();
    2ed4:	4b26      	ldr	r3, [pc, #152]	; (2f70 <system_init+0xa8>)
    2ed6:	4798      	blx	r3

	//ADC_0_init();

	//ADC_1_init();

	DAC_0_init();
    2ed8:	4b26      	ldr	r3, [pc, #152]	; (2f74 <system_init+0xac>)
    2eda:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    2edc:	4b26      	ldr	r3, [pc, #152]	; (2f78 <system_init+0xb0>)
    2ede:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2ee0:	4b26      	ldr	r3, [pc, #152]	; (2f7c <system_init+0xb4>)
    2ee2:	4798      	blx	r3

	FLASH_0_init();
    2ee4:	4b26      	ldr	r3, [pc, #152]	; (2f80 <system_init+0xb8>)
    2ee6:	4798      	blx	r3

	SerialDebug_init();
    2ee8:	4b26      	ldr	r3, [pc, #152]	; (2f84 <system_init+0xbc>)
    2eea:	4798      	blx	r3
	
	ModemData_init();
    2eec:	4b26      	ldr	r3, [pc, #152]	; (2f88 <system_init+0xc0>)
    2eee:	4798      	blx	r3

	PWM_0_init();
    2ef0:	4b26      	ldr	r3, [pc, #152]	; (2f8c <system_init+0xc4>)
    2ef2:	4798      	blx	r3

	PWM_1_init();
    2ef4:	4b26      	ldr	r3, [pc, #152]	; (2f90 <system_init+0xc8>)
    2ef6:	4798      	blx	r3

	PWM_2_init();
    2ef8:	4b26      	ldr	r3, [pc, #152]	; (2f94 <system_init+0xcc>)
    2efa:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    2efc:	4c26      	ldr	r4, [pc, #152]	; (2f98 <system_init+0xd0>)
    2efe:	69a3      	ldr	r3, [r4, #24]
    2f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2f04:	61a3      	str	r3, [r4, #24]
    2f06:	4f25      	ldr	r7, [pc, #148]	; (2f9c <system_init+0xd4>)
    2f08:	f04f 0840 	mov.w	r8, #64	; 0x40
    2f0c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    2f10:	4e23      	ldr	r6, [pc, #140]	; (2fa0 <system_init+0xd8>)
    2f12:	47b0      	blx	r6
    2f14:	4602      	mov	r2, r0
    2f16:	4923      	ldr	r1, [pc, #140]	; (2fa4 <system_init+0xdc>)
    2f18:	4823      	ldr	r0, [pc, #140]	; (2fa8 <system_init+0xe0>)
    2f1a:	4d24      	ldr	r5, [pc, #144]	; (2fac <system_init+0xe4>)
    2f1c:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    2f1e:	69e3      	ldr	r3, [r4, #28]
    2f20:	f043 0320 	orr.w	r3, r3, #32
    2f24:	61e3      	str	r3, [r4, #28]
    2f26:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    2f2a:	47b0      	blx	r6
    2f2c:	4602      	mov	r2, r0
    2f2e:	4920      	ldr	r1, [pc, #128]	; (2fb0 <system_init+0xe8>)
    2f30:	4820      	ldr	r0, [pc, #128]	; (2fb4 <system_init+0xec>)
    2f32:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    2f34:	69e3      	ldr	r3, [r4, #28]
    2f36:	ea43 0308 	orr.w	r3, r3, r8
    2f3a:	61e3      	str	r3, [r4, #28]
    2f3c:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    2f40:	47b0      	blx	r6
    2f42:	4602      	mov	r2, r0
    2f44:	491c      	ldr	r1, [pc, #112]	; (2fb8 <system_init+0xf0>)
    2f46:	481d      	ldr	r0, [pc, #116]	; (2fbc <system_init+0xf4>)
    2f48:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    2f4a:	4b1d      	ldr	r3, [pc, #116]	; (2fc0 <system_init+0xf8>)
    2f4c:	4798      	blx	r3

	TIMER_4_init();
    2f4e:	4b1d      	ldr	r3, [pc, #116]	; (2fc4 <system_init+0xfc>)
    2f50:	4798      	blx	r3

	TIMER_5_init();
    2f52:	4b1d      	ldr	r3, [pc, #116]	; (2fc8 <system_init+0x100>)
    2f54:	4798      	blx	r3

	TIMER_6_init();
    2f56:	4b1d      	ldr	r3, [pc, #116]	; (2fcc <system_init+0x104>)
    2f58:	4798      	blx	r3

	TIMER_7_init();
    2f5a:	4b1d      	ldr	r3, [pc, #116]	; (2fd0 <system_init+0x108>)
    2f5c:	4798      	blx	r3
	
	WDT_0_init();
    2f5e:	4b1d      	ldr	r3, [pc, #116]	; (2fd4 <system_init+0x10c>)
    2f60:	4798      	blx	r3
    2f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f66:	bf00      	nop
    2f68:	0000364d 	.word	0x0000364d
    2f6c:	00002c31 	.word	0x00002c31
    2f70:	0000288d 	.word	0x0000288d
    2f74:	00002a8d 	.word	0x00002a8d
    2f78:	00002aad 	.word	0x00002aad
    2f7c:	00002ad5 	.word	0x00002ad5
    2f80:	00002b01 	.word	0x00002b01
    2f84:	00002c15 	.word	0x00002c15
    2f88:	00002b8d 	.word	0x00002b8d
    2f8c:	00002c61 	.word	0x00002c61
    2f90:	00002ca9 	.word	0x00002ca9
    2f94:	00002cf1 	.word	0x00002cf1
    2f98:	40000800 	.word	0x40000800
    2f9c:	40001c00 	.word	0x40001c00
    2fa0:	000046dd 	.word	0x000046dd
    2fa4:	4101c000 	.word	0x4101c000
    2fa8:	20003e58 	.word	0x20003e58
    2fac:	000032bd 	.word	0x000032bd
    2fb0:	42001400 	.word	0x42001400
    2fb4:	20003db8 	.word	0x20003db8
    2fb8:	42001800 	.word	0x42001800
    2fbc:	20003cd8 	.word	0x20003cd8
    2fc0:	00002d39 	.word	0x00002d39
    2fc4:	00002d81 	.word	0x00002d81
    2fc8:	00002dc9 	.word	0x00002dc9
    2fcc:	00002e11 	.word	0x00002e11
    2fd0:	00002e59 	.word	0x00002e59
    2fd4:	00002e95 	.word	0x00002e95

00002fd8 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    2fd8:	b538      	push	{r3, r4, r5, lr}
    2fda:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    2fdc:	4605      	mov	r5, r0
    2fde:	b158      	cbz	r0, 2ff8 <ac_sync_init+0x20>
    2fe0:	1c08      	adds	r0, r1, #0
    2fe2:	bf18      	it	ne
    2fe4:	2001      	movne	r0, #1
    2fe6:	223b      	movs	r2, #59	; 0x3b
    2fe8:	4904      	ldr	r1, [pc, #16]	; (2ffc <ac_sync_init+0x24>)
    2fea:	4b05      	ldr	r3, [pc, #20]	; (3000 <ac_sync_init+0x28>)
    2fec:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    2fee:	4621      	mov	r1, r4
    2ff0:	4628      	mov	r0, r5
    2ff2:	4b04      	ldr	r3, [pc, #16]	; (3004 <ac_sync_init+0x2c>)
    2ff4:	4798      	blx	r3
}
    2ff6:	bd38      	pop	{r3, r4, r5, pc}
    2ff8:	2000      	movs	r0, #0
    2ffa:	e7f4      	b.n	2fe6 <ac_sync_init+0xe>
    2ffc:	00008724 	.word	0x00008724
    3000:	00003301 	.word	0x00003301
    3004:	00003515 	.word	0x00003515

00003008 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    3008:	b538      	push	{r3, r4, r5, lr}
    300a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    300c:	4605      	mov	r5, r0
    300e:	b158      	cbz	r0, 3028 <adc_sync_init+0x20>
    3010:	1c08      	adds	r0, r1, #0
    3012:	bf18      	it	ne
    3014:	2001      	movne	r0, #1
    3016:	2243      	movs	r2, #67	; 0x43
    3018:	4904      	ldr	r1, [pc, #16]	; (302c <adc_sync_init+0x24>)
    301a:	4b05      	ldr	r3, [pc, #20]	; (3030 <adc_sync_init+0x28>)
    301c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    301e:	4621      	mov	r1, r4
    3020:	4628      	mov	r0, r5
    3022:	4b04      	ldr	r3, [pc, #16]	; (3034 <adc_sync_init+0x2c>)
    3024:	4798      	blx	r3
}
    3026:	bd38      	pop	{r3, r4, r5, pc}
    3028:	2000      	movs	r0, #0
    302a:	e7f4      	b.n	3016 <adc_sync_init+0xe>
    302c:	00008740 	.word	0x00008740
    3030:	00003301 	.word	0x00003301
    3034:	000035ed 	.word	0x000035ed

00003038 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3038:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    303c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    303e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3040:	f3bf 8f5f 	dmb	sy
    3044:	4770      	bx	lr

00003046 <atomic_leave_critical>:
    3046:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    304a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    304c:	f383 8810 	msr	PRIMASK, r3
    3050:	4770      	bx	lr
	...

00003054 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    3054:	b538      	push	{r3, r4, r5, lr}
    3056:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    3058:	4604      	mov	r4, r0
    305a:	b198      	cbz	r0, 3084 <dac_sync_init+0x30>
    305c:	1c08      	adds	r0, r1, #0
    305e:	bf18      	it	ne
    3060:	2001      	movne	r0, #1
    3062:	223c      	movs	r2, #60	; 0x3c
    3064:	4908      	ldr	r1, [pc, #32]	; (3088 <dac_sync_init+0x34>)
    3066:	4b09      	ldr	r3, [pc, #36]	; (308c <dac_sync_init+0x38>)
    3068:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    306a:	4629      	mov	r1, r5
    306c:	4620      	mov	r0, r4
    306e:	4b08      	ldr	r3, [pc, #32]	; (3090 <dac_sync_init+0x3c>)
    3070:	4798      	blx	r3
	if (rc) {
    3072:	4602      	mov	r2, r0
    3074:	b920      	cbnz	r0, 3080 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    3076:	2300      	movs	r3, #0
    3078:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    307a:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    307c:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    307e:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    3080:	4610      	mov	r0, r2
    3082:	bd38      	pop	{r3, r4, r5, pc}
    3084:	2000      	movs	r0, #0
    3086:	e7ec      	b.n	3062 <dac_sync_init+0xe>
    3088:	0000875c 	.word	0x0000875c
    308c:	00003301 	.word	0x00003301
    3090:	00003705 	.word	0x00003705

00003094 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    3094:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    3096:	4b02      	ldr	r3, [pc, #8]	; (30a0 <delay_init+0xc>)
    3098:	6018      	str	r0, [r3, #0]
    309a:	4b02      	ldr	r3, [pc, #8]	; (30a4 <delay_init+0x10>)
    309c:	4798      	blx	r3
    309e:	bd08      	pop	{r3, pc}
    30a0:	20000550 	.word	0x20000550
    30a4:	00003e99 	.word	0x00003e99

000030a8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    30a8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    30aa:	4b04      	ldr	r3, [pc, #16]	; (30bc <delay_ms+0x14>)
    30ac:	681c      	ldr	r4, [r3, #0]
    30ae:	4b04      	ldr	r3, [pc, #16]	; (30c0 <delay_ms+0x18>)
    30b0:	4798      	blx	r3
    30b2:	4601      	mov	r1, r0
    30b4:	4620      	mov	r0, r4
    30b6:	4b03      	ldr	r3, [pc, #12]	; (30c4 <delay_ms+0x1c>)
    30b8:	4798      	blx	r3
    30ba:	bd10      	pop	{r4, pc}
    30bc:	20000550 	.word	0x20000550
    30c0:	00003641 	.word	0x00003641
    30c4:	00003ead 	.word	0x00003ead

000030c8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    30c8:	b508      	push	{r3, lr}
	return _event_system_init();
    30ca:	4b01      	ldr	r3, [pc, #4]	; (30d0 <event_system_init+0x8>)
    30cc:	4798      	blx	r3
}
    30ce:	bd08      	pop	{r3, pc}
    30d0:	00003941 	.word	0x00003941

000030d4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    30d4:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    30d6:	4b0c      	ldr	r3, [pc, #48]	; (3108 <process_ext_irq+0x34>)
    30d8:	685c      	ldr	r4, [r3, #4]
    30da:	42a0      	cmp	r0, r4
    30dc:	d00e      	beq.n	30fc <process_ext_irq+0x28>
    30de:	2301      	movs	r3, #1
    30e0:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    30e2:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    30e4:	25ff      	movs	r5, #255	; 0xff
    30e6:	e003      	b.n	30f0 <process_ext_irq+0x1c>
    30e8:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    30ea:	185a      	adds	r2, r3, r1
    30ec:	0852      	lsrs	r2, r2, #1
    30ee:	d104      	bne.n	30fa <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    30f0:	42a0      	cmp	r0, r4
    30f2:	d9f9      	bls.n	30e8 <process_ext_irq+0x14>
	while (upper >= lower) {
    30f4:	b13b      	cbz	r3, 3106 <process_ext_irq+0x32>
			lower = middle + 1;
    30f6:	4631      	mov	r1, r6
    30f8:	e7f7      	b.n	30ea <process_ext_irq+0x16>
    30fa:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    30fc:	4b02      	ldr	r3, [pc, #8]	; (3108 <process_ext_irq+0x34>)
    30fe:	681b      	ldr	r3, [r3, #0]
    3100:	b10b      	cbz	r3, 3106 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    3102:	4798      	blx	r3
    3104:	bd70      	pop	{r4, r5, r6, pc}
    3106:	bd70      	pop	{r4, r5, r6, pc}
    3108:	20000554 	.word	0x20000554

0000310c <ext_irq_init>:
{
    310c:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    310e:	4b05      	ldr	r3, [pc, #20]	; (3124 <ext_irq_init+0x18>)
    3110:	f04f 32ff 	mov.w	r2, #4294967295
    3114:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    3116:	2200      	movs	r2, #0
    3118:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    311a:	4803      	ldr	r0, [pc, #12]	; (3128 <ext_irq_init+0x1c>)
    311c:	4b03      	ldr	r3, [pc, #12]	; (312c <ext_irq_init+0x20>)
    311e:	4798      	blx	r3
}
    3120:	bd08      	pop	{r3, pc}
    3122:	bf00      	nop
    3124:	20000554 	.word	0x20000554
    3128:	000030d5 	.word	0x000030d5
    312c:	000038c1 	.word	0x000038c1

00003130 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    3130:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    3132:	6943      	ldr	r3, [r0, #20]
    3134:	b103      	cbz	r3, 3138 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    3136:	4798      	blx	r3
    3138:	bd08      	pop	{r3, pc}

0000313a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    313a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    313c:	6983      	ldr	r3, [r0, #24]
    313e:	b103      	cbz	r3, 3142 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    3140:	4798      	blx	r3
    3142:	bd08      	pop	{r3, pc}

00003144 <flash_init>:
{
    3144:	b538      	push	{r3, r4, r5, lr}
    3146:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    3148:	4604      	mov	r4, r0
    314a:	b190      	cbz	r0, 3172 <flash_init+0x2e>
    314c:	1c08      	adds	r0, r1, #0
    314e:	bf18      	it	ne
    3150:	2001      	movne	r0, #1
    3152:	2242      	movs	r2, #66	; 0x42
    3154:	4908      	ldr	r1, [pc, #32]	; (3178 <flash_init+0x34>)
    3156:	4b09      	ldr	r3, [pc, #36]	; (317c <flash_init+0x38>)
    3158:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    315a:	4629      	mov	r1, r5
    315c:	4620      	mov	r0, r4
    315e:	4b08      	ldr	r3, [pc, #32]	; (3180 <flash_init+0x3c>)
    3160:	4798      	blx	r3
	if (rc) {
    3162:	4603      	mov	r3, r0
    3164:	b918      	cbnz	r0, 316e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    3166:	4a07      	ldr	r2, [pc, #28]	; (3184 <flash_init+0x40>)
    3168:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    316a:	4a07      	ldr	r2, [pc, #28]	; (3188 <flash_init+0x44>)
    316c:	6062      	str	r2, [r4, #4]
}
    316e:	4618      	mov	r0, r3
    3170:	bd38      	pop	{r3, r4, r5, pc}
    3172:	2000      	movs	r0, #0
    3174:	e7ed      	b.n	3152 <flash_init+0xe>
    3176:	bf00      	nop
    3178:	00008778 	.word	0x00008778
    317c:	00003301 	.word	0x00003301
    3180:	00003a7d 	.word	0x00003a7d
    3184:	00003131 	.word	0x00003131
    3188:	0000313b 	.word	0x0000313b

0000318c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    318c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    318e:	6943      	ldr	r3, [r0, #20]
    3190:	b103      	cbz	r3, 3194 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    3192:	4798      	blx	r3
    3194:	bd08      	pop	{r3, pc}

00003196 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    3196:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    3198:	6983      	ldr	r3, [r0, #24]
    319a:	b103      	cbz	r3, 319e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    319c:	4798      	blx	r3
    319e:	bd08      	pop	{r3, pc}

000031a0 <pwm_init>:
{
    31a0:	b538      	push	{r3, r4, r5, lr}
    31a2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    31a4:	4604      	mov	r4, r0
    31a6:	b180      	cbz	r0, 31ca <pwm_init+0x2a>
    31a8:	1c08      	adds	r0, r1, #0
    31aa:	bf18      	it	ne
    31ac:	2001      	movne	r0, #1
    31ae:	223d      	movs	r2, #61	; 0x3d
    31b0:	4907      	ldr	r1, [pc, #28]	; (31d0 <pwm_init+0x30>)
    31b2:	4b08      	ldr	r3, [pc, #32]	; (31d4 <pwm_init+0x34>)
    31b4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    31b6:	4629      	mov	r1, r5
    31b8:	4620      	mov	r0, r4
    31ba:	4b07      	ldr	r3, [pc, #28]	; (31d8 <pwm_init+0x38>)
    31bc:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    31be:	4b07      	ldr	r3, [pc, #28]	; (31dc <pwm_init+0x3c>)
    31c0:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    31c2:	4b07      	ldr	r3, [pc, #28]	; (31e0 <pwm_init+0x40>)
    31c4:	6063      	str	r3, [r4, #4]
}
    31c6:	2000      	movs	r0, #0
    31c8:	bd38      	pop	{r3, r4, r5, pc}
    31ca:	2000      	movs	r0, #0
    31cc:	e7ef      	b.n	31ae <pwm_init+0xe>
    31ce:	bf00      	nop
    31d0:	00008790 	.word	0x00008790
    31d4:	00003301 	.word	0x00003301
    31d8:	000045c5 	.word	0x000045c5
    31dc:	0000318d 	.word	0x0000318d
    31e0:	00003197 	.word	0x00003197

000031e4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    31e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31e6:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    31e8:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    31ea:	b12f      	cbz	r7, 31f8 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    31ec:	688d      	ldr	r5, [r1, #8]
    31ee:	463c      	mov	r4, r7
    31f0:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    31f2:	f1c2 0e01 	rsb	lr, r2, #1
    31f6:	e00b      	b.n	3210 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    31f8:	4b0e      	ldr	r3, [pc, #56]	; (3234 <timer_add_timer_task+0x50>)
    31fa:	4798      	blx	r3
		return;
    31fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    31fe:	4473      	add	r3, lr
    3200:	68a0      	ldr	r0, [r4, #8]
    3202:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    3204:	42ab      	cmp	r3, r5
    3206:	d20a      	bcs.n	321e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    3208:	6823      	ldr	r3, [r4, #0]
    320a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    320c:	b153      	cbz	r3, 3224 <timer_add_timer_task+0x40>
    320e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    3210:	6863      	ldr	r3, [r4, #4]
    3212:	4293      	cmp	r3, r2
    3214:	d8f3      	bhi.n	31fe <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    3216:	68a0      	ldr	r0, [r4, #8]
    3218:	4403      	add	r3, r0
    321a:	1a9b      	subs	r3, r3, r2
    321c:	e7f2      	b.n	3204 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    321e:	42a7      	cmp	r7, r4
    3220:	d004      	beq.n	322c <timer_add_timer_task+0x48>
    3222:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    3224:	4620      	mov	r0, r4
    3226:	4b04      	ldr	r3, [pc, #16]	; (3238 <timer_add_timer_task+0x54>)
    3228:	4798      	blx	r3
    322a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    322c:	4660      	mov	r0, ip
    322e:	4b01      	ldr	r3, [pc, #4]	; (3234 <timer_add_timer_task+0x50>)
    3230:	4798      	blx	r3
    3232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3234:	00003329 	.word	0x00003329
    3238:	00003355 	.word	0x00003355

0000323c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    323c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    3240:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    3242:	6907      	ldr	r7, [r0, #16]
    3244:	3701      	adds	r7, #1
    3246:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    3248:	7e03      	ldrb	r3, [r0, #24]
    324a:	f013 0f01 	tst.w	r3, #1
    324e:	d113      	bne.n	3278 <timer_process_counted+0x3c>
    3250:	7e03      	ldrb	r3, [r0, #24]
    3252:	f013 0f02 	tst.w	r3, #2
    3256:	d10f      	bne.n	3278 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    3258:	b354      	cbz	r4, 32b0 <timer_process_counted+0x74>
    325a:	6863      	ldr	r3, [r4, #4]
    325c:	1afb      	subs	r3, r7, r3
    325e:	68a2      	ldr	r2, [r4, #8]
    3260:	4293      	cmp	r3, r2
    3262:	d307      	bcc.n	3274 <timer_process_counted+0x38>
    3264:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    3266:	f100 0814 	add.w	r8, r0, #20
    326a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 32b4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    326e:	f8df a048 	ldr.w	sl, [pc, #72]	; 32b8 <timer_process_counted+0x7c>
    3272:	e012      	b.n	329a <timer_process_counted+0x5e>
    3274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    3278:	7e03      	ldrb	r3, [r0, #24]
    327a:	f043 0302 	orr.w	r3, r3, #2
    327e:	7603      	strb	r3, [r0, #24]
		return;
    3280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3284:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    3286:	68e3      	ldr	r3, [r4, #12]
    3288:	4620      	mov	r0, r4
    328a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    328c:	b185      	cbz	r5, 32b0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    328e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    3290:	686b      	ldr	r3, [r5, #4]
    3292:	1afb      	subs	r3, r7, r3
    3294:	68aa      	ldr	r2, [r5, #8]
    3296:	4293      	cmp	r3, r2
    3298:	d30a      	bcc.n	32b0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    329a:	4640      	mov	r0, r8
    329c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    329e:	7c23      	ldrb	r3, [r4, #16]
    32a0:	2b01      	cmp	r3, #1
    32a2:	d1ef      	bne.n	3284 <timer_process_counted+0x48>
			tmp->time_label = time;
    32a4:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    32a6:	463a      	mov	r2, r7
    32a8:	4621      	mov	r1, r4
    32aa:	4640      	mov	r0, r8
    32ac:	47d0      	blx	sl
    32ae:	e7e9      	b.n	3284 <timer_process_counted+0x48>
    32b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32b4:	0000335d 	.word	0x0000335d
    32b8:	000031e5 	.word	0x000031e5

000032bc <timer_init>:
{
    32bc:	b570      	push	{r4, r5, r6, lr}
    32be:	460e      	mov	r6, r1
    32c0:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    32c2:	4604      	mov	r4, r0
    32c4:	b190      	cbz	r0, 32ec <timer_init+0x30>
    32c6:	b199      	cbz	r1, 32f0 <timer_init+0x34>
    32c8:	1c10      	adds	r0, r2, #0
    32ca:	bf18      	it	ne
    32cc:	2001      	movne	r0, #1
    32ce:	2245      	movs	r2, #69	; 0x45
    32d0:	4908      	ldr	r1, [pc, #32]	; (32f4 <timer_init+0x38>)
    32d2:	4b09      	ldr	r3, [pc, #36]	; (32f8 <timer_init+0x3c>)
    32d4:	4798      	blx	r3
	descr->func = func;
    32d6:	4620      	mov	r0, r4
    32d8:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    32dc:	682b      	ldr	r3, [r5, #0]
    32de:	4631      	mov	r1, r6
    32e0:	4798      	blx	r3
	descr->time                           = 0;
    32e2:	2000      	movs	r0, #0
    32e4:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    32e6:	4b05      	ldr	r3, [pc, #20]	; (32fc <timer_init+0x40>)
    32e8:	6063      	str	r3, [r4, #4]
}
    32ea:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    32ec:	2000      	movs	r0, #0
    32ee:	e7ee      	b.n	32ce <timer_init+0x12>
    32f0:	2000      	movs	r0, #0
    32f2:	e7ec      	b.n	32ce <timer_init+0x12>
    32f4:	000087a8 	.word	0x000087a8
    32f8:	00003301 	.word	0x00003301
    32fc:	0000323d 	.word	0x0000323d

00003300 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    3300:	b900      	cbnz	r0, 3304 <assert+0x4>
		__asm("BKPT #0");
    3302:	be00      	bkpt	0x0000
    3304:	4770      	bx	lr

00003306 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    3306:	6803      	ldr	r3, [r0, #0]
    3308:	b14b      	cbz	r3, 331e <is_list_element+0x18>
		if (it == element) {
    330a:	428b      	cmp	r3, r1
    330c:	d009      	beq.n	3322 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    330e:	681b      	ldr	r3, [r3, #0]
    3310:	b11b      	cbz	r3, 331a <is_list_element+0x14>
		if (it == element) {
    3312:	4299      	cmp	r1, r3
    3314:	d1fb      	bne.n	330e <is_list_element+0x8>
			return true;
    3316:	2001      	movs	r0, #1
		}
	}

	return false;
}
    3318:	4770      	bx	lr
	return false;
    331a:	2000      	movs	r0, #0
    331c:	4770      	bx	lr
    331e:	2000      	movs	r0, #0
    3320:	4770      	bx	lr
			return true;
    3322:	2001      	movs	r0, #1
    3324:	4770      	bx	lr
	...

00003328 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    3328:	b538      	push	{r3, r4, r5, lr}
    332a:	4604      	mov	r4, r0
    332c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    332e:	4b06      	ldr	r3, [pc, #24]	; (3348 <list_insert_as_head+0x20>)
    3330:	4798      	blx	r3
    3332:	f080 0001 	eor.w	r0, r0, #1
    3336:	2243      	movs	r2, #67	; 0x43
    3338:	4904      	ldr	r1, [pc, #16]	; (334c <list_insert_as_head+0x24>)
    333a:	b2c0      	uxtb	r0, r0
    333c:	4b04      	ldr	r3, [pc, #16]	; (3350 <list_insert_as_head+0x28>)
    333e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3340:	6823      	ldr	r3, [r4, #0]
    3342:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    3344:	6025      	str	r5, [r4, #0]
    3346:	bd38      	pop	{r3, r4, r5, pc}
    3348:	00003307 	.word	0x00003307
    334c:	000087c0 	.word	0x000087c0
    3350:	00003301 	.word	0x00003301

00003354 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3354:	6803      	ldr	r3, [r0, #0]
    3356:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    3358:	6001      	str	r1, [r0, #0]
    335a:	4770      	bx	lr

0000335c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    335c:	6803      	ldr	r3, [r0, #0]
    335e:	b10b      	cbz	r3, 3364 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    3360:	681a      	ldr	r2, [r3, #0]
    3362:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    3364:	4618      	mov	r0, r3
    3366:	4770      	bx	lr

00003368 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    3368:	b570      	push	{r4, r5, r6, lr}
    336a:	460e      	mov	r6, r1
    336c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    336e:	4604      	mov	r4, r0
    3370:	b178      	cbz	r0, 3392 <ringbuffer_init+0x2a>
    3372:	b181      	cbz	r1, 3396 <ringbuffer_init+0x2e>
    3374:	b1a2      	cbz	r2, 33a0 <ringbuffer_init+0x38>
    3376:	2001      	movs	r0, #1
    3378:	2232      	movs	r2, #50	; 0x32
    337a:	490d      	ldr	r1, [pc, #52]	; (33b0 <ringbuffer_init+0x48>)
    337c:	4b0d      	ldr	r3, [pc, #52]	; (33b4 <ringbuffer_init+0x4c>)
    337e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    3380:	1e6b      	subs	r3, r5, #1
    3382:	421d      	tst	r5, r3
    3384:	d109      	bne.n	339a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    3386:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    3388:	2000      	movs	r0, #0
    338a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    338c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    338e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    3390:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    3392:	2000      	movs	r0, #0
    3394:	e7f0      	b.n	3378 <ringbuffer_init+0x10>
    3396:	2000      	movs	r0, #0
    3398:	e7ee      	b.n	3378 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    339a:	f06f 000c 	mvn.w	r0, #12
    339e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    33a0:	2232      	movs	r2, #50	; 0x32
    33a2:	4903      	ldr	r1, [pc, #12]	; (33b0 <ringbuffer_init+0x48>)
    33a4:	2000      	movs	r0, #0
    33a6:	4b03      	ldr	r3, [pc, #12]	; (33b4 <ringbuffer_init+0x4c>)
    33a8:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    33aa:	1e6b      	subs	r3, r5, #1
    33ac:	e7eb      	b.n	3386 <ringbuffer_init+0x1e>
    33ae:	bf00      	nop
    33b0:	000087e0 	.word	0x000087e0
    33b4:	00003301 	.word	0x00003301

000033b8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    33b8:	b538      	push	{r3, r4, r5, lr}
    33ba:	460d      	mov	r5, r1
	ASSERT(rb && data);
    33bc:	4604      	mov	r4, r0
    33be:	b1a0      	cbz	r0, 33ea <ringbuffer_get+0x32>
    33c0:	1c08      	adds	r0, r1, #0
    33c2:	bf18      	it	ne
    33c4:	2001      	movne	r0, #1
    33c6:	224a      	movs	r2, #74	; 0x4a
    33c8:	490a      	ldr	r1, [pc, #40]	; (33f4 <ringbuffer_get+0x3c>)
    33ca:	4b0b      	ldr	r3, [pc, #44]	; (33f8 <ringbuffer_get+0x40>)
    33cc:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    33ce:	68a3      	ldr	r3, [r4, #8]
    33d0:	68e2      	ldr	r2, [r4, #12]
    33d2:	429a      	cmp	r2, r3
    33d4:	d00b      	beq.n	33ee <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    33d6:	6862      	ldr	r2, [r4, #4]
    33d8:	4013      	ands	r3, r2
    33da:	6822      	ldr	r2, [r4, #0]
    33dc:	5cd3      	ldrb	r3, [r2, r3]
    33de:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    33e0:	68a3      	ldr	r3, [r4, #8]
    33e2:	3301      	adds	r3, #1
    33e4:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    33e6:	2000      	movs	r0, #0
    33e8:	bd38      	pop	{r3, r4, r5, pc}
    33ea:	2000      	movs	r0, #0
    33ec:	e7eb      	b.n	33c6 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    33ee:	f06f 0009 	mvn.w	r0, #9
}
    33f2:	bd38      	pop	{r3, r4, r5, pc}
    33f4:	000087e0 	.word	0x000087e0
    33f8:	00003301 	.word	0x00003301

000033fc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    33fc:	b538      	push	{r3, r4, r5, lr}
    33fe:	460d      	mov	r5, r1
	ASSERT(rb);
    3400:	4604      	mov	r4, r0
    3402:	225b      	movs	r2, #91	; 0x5b
    3404:	490b      	ldr	r1, [pc, #44]	; (3434 <ringbuffer_put+0x38>)
    3406:	3000      	adds	r0, #0
    3408:	bf18      	it	ne
    340a:	2001      	movne	r0, #1
    340c:	4b0a      	ldr	r3, [pc, #40]	; (3438 <ringbuffer_put+0x3c>)
    340e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    3410:	68e3      	ldr	r3, [r4, #12]
    3412:	6862      	ldr	r2, [r4, #4]
    3414:	4013      	ands	r3, r2
    3416:	6822      	ldr	r2, [r4, #0]
    3418:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    341a:	68e3      	ldr	r3, [r4, #12]
    341c:	6861      	ldr	r1, [r4, #4]
    341e:	68a2      	ldr	r2, [r4, #8]
    3420:	1a9a      	subs	r2, r3, r2
    3422:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    3424:	bf84      	itt	hi
    3426:	1a59      	subhi	r1, r3, r1
    3428:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    342a:	3301      	adds	r3, #1
    342c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    342e:	2000      	movs	r0, #0
    3430:	bd38      	pop	{r3, r4, r5, pc}
    3432:	bf00      	nop
    3434:	000087e0 	.word	0x000087e0
    3438:	00003301 	.word	0x00003301

0000343c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    343c:	b510      	push	{r4, lr}
	ASSERT(rb);
    343e:	4604      	mov	r4, r0
    3440:	2271      	movs	r2, #113	; 0x71
    3442:	4905      	ldr	r1, [pc, #20]	; (3458 <ringbuffer_num+0x1c>)
    3444:	3000      	adds	r0, #0
    3446:	bf18      	it	ne
    3448:	2001      	movne	r0, #1
    344a:	4b04      	ldr	r3, [pc, #16]	; (345c <ringbuffer_num+0x20>)
    344c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    344e:	68e0      	ldr	r0, [r4, #12]
    3450:	68a3      	ldr	r3, [r4, #8]
}
    3452:	1ac0      	subs	r0, r0, r3
    3454:	bd10      	pop	{r4, pc}
    3456:	bf00      	nop
    3458:	000087e0 	.word	0x000087e0
    345c:	00003301 	.word	0x00003301

00003460 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    3460:	b510      	push	{r4, lr}
	ASSERT(rb);
    3462:	4604      	mov	r4, r0
    3464:	227b      	movs	r2, #123	; 0x7b
    3466:	4905      	ldr	r1, [pc, #20]	; (347c <ringbuffer_flush+0x1c>)
    3468:	3000      	adds	r0, #0
    346a:	bf18      	it	ne
    346c:	2001      	movne	r0, #1
    346e:	4b04      	ldr	r3, [pc, #16]	; (3480 <ringbuffer_flush+0x20>)
    3470:	4798      	blx	r3

	rb->read_index = rb->write_index;
    3472:	68e3      	ldr	r3, [r4, #12]
    3474:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    3476:	2000      	movs	r0, #0
    3478:	bd10      	pop	{r4, pc}
    347a:	bf00      	nop
    347c:	000087e0 	.word	0x000087e0
    3480:	00003301 	.word	0x00003301

00003484 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    3484:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    3486:	4a06      	ldr	r2, [pc, #24]	; (34a0 <_sbrk+0x1c>)
    3488:	6812      	ldr	r2, [r2, #0]
    348a:	b122      	cbz	r2, 3496 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    348c:	4a04      	ldr	r2, [pc, #16]	; (34a0 <_sbrk+0x1c>)
    348e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3490:	4403      	add	r3, r0
    3492:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    3494:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3496:	4903      	ldr	r1, [pc, #12]	; (34a4 <_sbrk+0x20>)
    3498:	4a01      	ldr	r2, [pc, #4]	; (34a0 <_sbrk+0x1c>)
    349a:	6011      	str	r1, [r2, #0]
    349c:	e7f6      	b.n	348c <_sbrk+0x8>
    349e:	bf00      	nop
    34a0:	2000055c 	.word	0x2000055c
    34a4:	20013e90 	.word	0x20013e90

000034a8 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    34a8:	b510      	push	{r4, lr}
    34aa:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    34ac:	f44f 7281 	mov.w	r2, #258	; 0x102
    34b0:	4915      	ldr	r1, [pc, #84]	; (3508 <_ac_init+0x60>)
    34b2:	4816      	ldr	r0, [pc, #88]	; (350c <_ac_init+0x64>)
    34b4:	4284      	cmp	r4, r0
    34b6:	bf14      	ite	ne
    34b8:	2000      	movne	r0, #0
    34ba:	2001      	moveq	r0, #1
    34bc:	4b14      	ldr	r3, [pc, #80]	; (3510 <_ac_init+0x68>)
    34be:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    34c0:	6a23      	ldr	r3, [r4, #32]
    34c2:	f013 0f01 	tst.w	r3, #1
    34c6:	d1fb      	bne.n	34c0 <_ac_init+0x18>
    34c8:	6a23      	ldr	r3, [r4, #32]
    34ca:	f013 0f03 	tst.w	r3, #3
    34ce:	d1fb      	bne.n	34c8 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    34d0:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    34d2:	f013 0f02 	tst.w	r3, #2
    34d6:	d114      	bne.n	3502 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    34d8:	6a23      	ldr	r3, [r4, #32]
    34da:	f013 0f01 	tst.w	r3, #1
    34de:	d1fb      	bne.n	34d8 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    34e0:	7823      	ldrb	r3, [r4, #0]
    34e2:	f043 0301 	orr.w	r3, r3, #1
    34e6:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    34e8:	6a23      	ldr	r3, [r4, #32]
    34ea:	f013 0f01 	tst.w	r3, #1
    34ee:	d1fb      	bne.n	34e8 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    34f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    34f4:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    34f6:	2000      	movs	r0, #0
    34f8:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    34fa:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    34fc:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    34fe:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    3500:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    3502:	f06f 0010 	mvn.w	r0, #16
}
    3506:	bd10      	pop	{r4, pc}
    3508:	00008804 	.word	0x00008804
    350c:	42002000 	.word	0x42002000
    3510:	00003301 	.word	0x00003301

00003514 <_ac_sync_init>:
{
    3514:	b538      	push	{r3, r4, r5, lr}
    3516:	460c      	mov	r4, r1
	ASSERT(device);
    3518:	4605      	mov	r5, r0
    351a:	226c      	movs	r2, #108	; 0x6c
    351c:	4905      	ldr	r1, [pc, #20]	; (3534 <_ac_sync_init+0x20>)
    351e:	3000      	adds	r0, #0
    3520:	bf18      	it	ne
    3522:	2001      	movne	r0, #1
    3524:	4b04      	ldr	r3, [pc, #16]	; (3538 <_ac_sync_init+0x24>)
    3526:	4798      	blx	r3
	device->hw = hw;
    3528:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    352a:	4620      	mov	r0, r4
    352c:	4b03      	ldr	r3, [pc, #12]	; (353c <_ac_sync_init+0x28>)
    352e:	4798      	blx	r3
}
    3530:	bd38      	pop	{r3, r4, r5, pc}
    3532:	bf00      	nop
    3534:	00008804 	.word	0x00008804
    3538:	00003301 	.word	0x00003301
    353c:	000034a9 	.word	0x000034a9

00003540 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3540:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3542:	f013 0f01 	tst.w	r3, #1
    3546:	d1fb      	bne.n	3540 <_adc_init>
    3548:	6b03      	ldr	r3, [r0, #48]	; 0x30
    354a:	f013 0f03 	tst.w	r3, #3
    354e:	d1fb      	bne.n	3548 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    3550:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    3552:	f013 0f02 	tst.w	r3, #2
    3556:	d12a      	bne.n	35ae <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3558:	6b03      	ldr	r3, [r0, #48]	; 0x30
    355a:	f013 0f01 	tst.w	r3, #1
    355e:	d1fb      	bne.n	3558 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    3560:	8803      	ldrh	r3, [r0, #0]
    3562:	b29b      	uxth	r3, r3
    3564:	f043 0301 	orr.w	r3, r3, #1
    3568:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    356a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    356c:	f013 0f01 	tst.w	r3, #1
    3570:	d1fb      	bne.n	356a <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    3572:	2216      	movs	r2, #22
    3574:	4b0f      	ldr	r3, [pc, #60]	; (35b4 <_adc_init+0x74>)
    3576:	fb02 3101 	mla	r1, r2, r1, r3
    357a:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    357c:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    357e:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    3580:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    3582:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    3584:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    3586:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    3588:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    358a:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    358c:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    358e:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    3590:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    3592:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    3594:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    3596:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    3598:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    359a:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    359c:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    359e:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    35a0:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    35a2:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    35a4:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    35a6:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    35a8:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    35aa:	2000      	movs	r0, #0
    35ac:	4770      	bx	lr
		return ERR_DENIED;
    35ae:	f06f 0010 	mvn.w	r0, #16
}
    35b2:	4770      	bx	lr
    35b4:	00008818 	.word	0x00008818

000035b8 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    35b8:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    35bc:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    35c0:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    35c4:	b148      	cbz	r0, 35da <_adc_get_regs+0x22>
    35c6:	2801      	cmp	r0, #1
    35c8:	d009      	beq.n	35de <_adc_get_regs+0x26>
{
    35ca:	b508      	push	{r3, lr}
	ASSERT(false);
    35cc:	2291      	movs	r2, #145	; 0x91
    35ce:	4905      	ldr	r1, [pc, #20]	; (35e4 <_adc_get_regs+0x2c>)
    35d0:	2000      	movs	r0, #0
    35d2:	4b05      	ldr	r3, [pc, #20]	; (35e8 <_adc_get_regs+0x30>)
    35d4:	4798      	blx	r3
	return 0;
    35d6:	2000      	movs	r0, #0
    35d8:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    35da:	2000      	movs	r0, #0
    35dc:	4770      	bx	lr
    35de:	2001      	movs	r0, #1
    35e0:	4770      	bx	lr
    35e2:	bf00      	nop
    35e4:	00008844 	.word	0x00008844
    35e8:	00003301 	.word	0x00003301

000035ec <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    35ec:	b538      	push	{r3, r4, r5, lr}
    35ee:	460c      	mov	r4, r1
	ASSERT(device);
    35f0:	4605      	mov	r5, r0
    35f2:	22d5      	movs	r2, #213	; 0xd5
    35f4:	4907      	ldr	r1, [pc, #28]	; (3614 <_adc_sync_init+0x28>)
    35f6:	3000      	adds	r0, #0
    35f8:	bf18      	it	ne
    35fa:	2001      	movne	r0, #1
    35fc:	4b06      	ldr	r3, [pc, #24]	; (3618 <_adc_sync_init+0x2c>)
    35fe:	4798      	blx	r3

	device->hw = hw;
    3600:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    3602:	4620      	mov	r0, r4
    3604:	4b05      	ldr	r3, [pc, #20]	; (361c <_adc_sync_init+0x30>)
    3606:	4798      	blx	r3
    3608:	4601      	mov	r1, r0
    360a:	4620      	mov	r0, r4
    360c:	4b04      	ldr	r3, [pc, #16]	; (3620 <_adc_sync_init+0x34>)
    360e:	4798      	blx	r3
}
    3610:	bd38      	pop	{r3, r4, r5, pc}
    3612:	bf00      	nop
    3614:	00008844 	.word	0x00008844
    3618:	00003301 	.word	0x00003301
    361c:	000035b9 	.word	0x000035b9
    3620:	00003541 	.word	0x00003541

00003624 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3624:	0943      	lsrs	r3, r0, #5
    3626:	f000 001f 	and.w	r0, r0, #31
    362a:	2201      	movs	r2, #1
    362c:	fa02 f000 	lsl.w	r0, r2, r0
    3630:	3340      	adds	r3, #64	; 0x40
    3632:	4a02      	ldr	r2, [pc, #8]	; (363c <_irq_set+0x18>)
    3634:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    3638:	4770      	bx	lr
    363a:	bf00      	nop
    363c:	e000e100 	.word	0xe000e100

00003640 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    3640:	f64b 3380 	movw	r3, #48000	; 0xbb80
    3644:	fb03 f000 	mul.w	r0, r3, r0
    3648:	4770      	bx	lr
	...

0000364c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    364c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    364e:	4a0c      	ldr	r2, [pc, #48]	; (3680 <_init_chip+0x34>)
    3650:	8813      	ldrh	r3, [r2, #0]
    3652:	b29b      	uxth	r3, r3
    3654:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    3656:	4b0b      	ldr	r3, [pc, #44]	; (3684 <_init_chip+0x38>)
    3658:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    365a:	4b0b      	ldr	r3, [pc, #44]	; (3688 <_init_chip+0x3c>)
    365c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    365e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3662:	4c0a      	ldr	r4, [pc, #40]	; (368c <_init_chip+0x40>)
    3664:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    3666:	4b0a      	ldr	r3, [pc, #40]	; (3690 <_init_chip+0x44>)
    3668:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    366a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    366e:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    3670:	4a08      	ldr	r2, [pc, #32]	; (3694 <_init_chip+0x48>)
    3672:	6913      	ldr	r3, [r2, #16]
    3674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3678:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    367a:	4b07      	ldr	r3, [pc, #28]	; (3698 <_init_chip+0x4c>)
    367c:	4798      	blx	r3
    367e:	bd10      	pop	{r4, pc}
    3680:	41004000 	.word	0x41004000
    3684:	00003b1d 	.word	0x00003b1d
    3688:	00003a45 	.word	0x00003a45
    368c:	0000399d 	.word	0x0000399d
    3690:	00003b49 	.word	0x00003b49
    3694:	40000800 	.word	0x40000800
    3698:	000037a5 	.word	0x000037a5

0000369c <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    369c:	b510      	push	{r4, lr}
    369e:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    36a0:	22f3      	movs	r2, #243	; 0xf3
    36a2:	4915      	ldr	r1, [pc, #84]	; (36f8 <_dac_init+0x5c>)
    36a4:	4815      	ldr	r0, [pc, #84]	; (36fc <_dac_init+0x60>)
    36a6:	4284      	cmp	r4, r0
    36a8:	bf14      	ite	ne
    36aa:	2000      	movne	r0, #0
    36ac:	2001      	moveq	r0, #1
    36ae:	4b14      	ldr	r3, [pc, #80]	; (3700 <_dac_init+0x64>)
    36b0:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    36b2:	68a3      	ldr	r3, [r4, #8]
    36b4:	f013 0f01 	tst.w	r3, #1
    36b8:	d1fb      	bne.n	36b2 <_dac_init+0x16>
    36ba:	68a3      	ldr	r3, [r4, #8]
    36bc:	f013 0f03 	tst.w	r3, #3
    36c0:	d1fb      	bne.n	36ba <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    36c2:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    36c4:	f013 0f02 	tst.w	r3, #2
    36c8:	d113      	bne.n	36f2 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    36ca:	68a3      	ldr	r3, [r4, #8]
    36cc:	f013 0f01 	tst.w	r3, #1
    36d0:	d1fb      	bne.n	36ca <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    36d2:	7823      	ldrb	r3, [r4, #0]
    36d4:	f043 0301 	orr.w	r3, r3, #1
    36d8:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    36da:	68a3      	ldr	r3, [r4, #8]
    36dc:	f013 0f01 	tst.w	r3, #1
    36e0:	d1fb      	bne.n	36da <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    36e2:	2000      	movs	r0, #0
    36e4:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    36e6:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    36e8:	81a0      	strh	r0, [r4, #12]
    36ea:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    36ec:	2301      	movs	r3, #1
    36ee:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    36f0:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    36f2:	f06f 0003 	mvn.w	r0, #3
}
    36f6:	bd10      	pop	{r4, pc}
    36f8:	0000885c 	.word	0x0000885c
    36fc:	43002400 	.word	0x43002400
    3700:	00003301 	.word	0x00003301

00003704 <_dac_sync_init>:
{
    3704:	b538      	push	{r3, r4, r5, lr}
    3706:	460c      	mov	r4, r1
	ASSERT(device);
    3708:	4605      	mov	r5, r0
    370a:	2261      	movs	r2, #97	; 0x61
    370c:	4905      	ldr	r1, [pc, #20]	; (3724 <_dac_sync_init+0x20>)
    370e:	3000      	adds	r0, #0
    3710:	bf18      	it	ne
    3712:	2001      	movne	r0, #1
    3714:	4b04      	ldr	r3, [pc, #16]	; (3728 <_dac_sync_init+0x24>)
    3716:	4798      	blx	r3
	device->hw = hw;
    3718:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    371a:	4620      	mov	r0, r4
    371c:	4b03      	ldr	r3, [pc, #12]	; (372c <_dac_sync_init+0x28>)
    371e:	4798      	blx	r3
}
    3720:	bd38      	pop	{r3, r4, r5, pc}
    3722:	bf00      	nop
    3724:	0000885c 	.word	0x0000885c
    3728:	00003301 	.word	0x00003301
    372c:	0000369d 	.word	0x0000369d

00003730 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    3730:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    3732:	4a1a      	ldr	r2, [pc, #104]	; (379c <_dmac_handler+0x6c>)
    3734:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    3736:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    373a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    373e:	4818      	ldr	r0, [pc, #96]	; (37a0 <_dmac_handler+0x70>)
    3740:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    3744:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3748:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    374c:	f012 0f01 	tst.w	r2, #1
    3750:	d10a      	bne.n	3768 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    3752:	011a      	lsls	r2, r3, #4
    3754:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3758:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    375c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    3760:	f012 0f02 	tst.w	r2, #2
    3764:	d10b      	bne.n	377e <_dmac_handler+0x4e>
    3766:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    3768:	011a      	lsls	r2, r3, #4
    376a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    376e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3772:	2101      	movs	r1, #1
    3774:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    3778:	6843      	ldr	r3, [r0, #4]
    377a:	4798      	blx	r3
    377c:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    377e:	011a      	lsls	r2, r3, #4
    3780:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3784:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3788:	2102      	movs	r1, #2
    378a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    378e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3792:	4a03      	ldr	r2, [pc, #12]	; (37a0 <_dmac_handler+0x70>)
    3794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3798:	4798      	blx	r3
	}
}
    379a:	e7e4      	b.n	3766 <_dmac_handler+0x36>
    379c:	4100a000 	.word	0x4100a000
    37a0:	20000560 	.word	0x20000560

000037a4 <_dma_init>:
{
    37a4:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    37a6:	4a33      	ldr	r2, [pc, #204]	; (3874 <_dma_init+0xd0>)
    37a8:	8813      	ldrh	r3, [r2, #0]
    37aa:	f023 0302 	bic.w	r3, r3, #2
    37ae:	041b      	lsls	r3, r3, #16
    37b0:	0c1b      	lsrs	r3, r3, #16
    37b2:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    37b4:	8853      	ldrh	r3, [r2, #2]
    37b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    37ba:	041b      	lsls	r3, r3, #16
    37bc:	0c1b      	lsrs	r3, r3, #16
    37be:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    37c0:	8813      	ldrh	r3, [r2, #0]
    37c2:	b29b      	uxth	r3, r3
    37c4:	f043 0301 	orr.w	r3, r3, #1
    37c8:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    37ca:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    37cc:	f013 0f01 	tst.w	r3, #1
    37d0:	d1fb      	bne.n	37ca <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    37d2:	4b28      	ldr	r3, [pc, #160]	; (3874 <_dma_init+0xd0>)
    37d4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    37d8:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    37da:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    37dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    37e0:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    37e2:	2000      	movs	r0, #0
    37e4:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    37e6:	4a24      	ldr	r2, [pc, #144]	; (3878 <_dma_init+0xd4>)
    37e8:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    37ec:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    37ee:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    37f2:	639a      	str	r2, [r3, #56]	; 0x38
    37f4:	4b21      	ldr	r3, [pc, #132]	; (387c <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    37f6:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    37fa:	681c      	ldr	r4, [r3, #0]
    37fc:	0101      	lsls	r1, r0, #4
    37fe:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    3802:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    3806:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    3808:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    380a:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    380e:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    3810:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    3814:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    3816:	4429      	add	r1, r5
    3818:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    381c:	3001      	adds	r0, #1
    381e:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    3820:	2820      	cmp	r0, #32
    3822:	d1ea      	bne.n	37fa <_dma_init+0x56>
    3824:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3826:	2001      	movs	r0, #1
    3828:	4915      	ldr	r1, [pc, #84]	; (3880 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    382a:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    382c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3830:	d00b      	beq.n	384a <_dma_init+0xa6>
    3832:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    3834:	2b24      	cmp	r3, #36	; 0x24
    3836:	d1f8      	bne.n	382a <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    3838:	4a0e      	ldr	r2, [pc, #56]	; (3874 <_dma_init+0xd0>)
    383a:	8813      	ldrh	r3, [r2, #0]
    383c:	b29b      	uxth	r3, r3
    383e:	f043 0302 	orr.w	r3, r3, #2
    3842:	8013      	strh	r3, [r2, #0]
}
    3844:	2000      	movs	r0, #0
    3846:	bc30      	pop	{r4, r5}
    3848:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    384a:	095c      	lsrs	r4, r3, #5
    384c:	f002 021f 	and.w	r2, r2, #31
    3850:	fa00 f202 	lsl.w	r2, r0, r2
    3854:	f104 0520 	add.w	r5, r4, #32
    3858:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    385c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3860:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3864:	f104 0560 	add.w	r5, r4, #96	; 0x60
    3868:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    386c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    3870:	e7df      	b.n	3832 <_dma_init+0x8e>
    3872:	bf00      	nop
    3874:	4100a000 	.word	0x4100a000
    3878:	20000560 	.word	0x20000560
    387c:	00008874 	.word	0x00008874
    3880:	e000e100 	.word	0xe000e100

00003884 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    3884:	b508      	push	{r3, lr}
	_dmac_handler();
    3886:	4b01      	ldr	r3, [pc, #4]	; (388c <DMAC_0_Handler+0x8>)
    3888:	4798      	blx	r3
    388a:	bd08      	pop	{r3, pc}
    388c:	00003731 	.word	0x00003731

00003890 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    3890:	b508      	push	{r3, lr}
	_dmac_handler();
    3892:	4b01      	ldr	r3, [pc, #4]	; (3898 <DMAC_1_Handler+0x8>)
    3894:	4798      	blx	r3
    3896:	bd08      	pop	{r3, pc}
    3898:	00003731 	.word	0x00003731

0000389c <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    389c:	b508      	push	{r3, lr}
	_dmac_handler();
    389e:	4b01      	ldr	r3, [pc, #4]	; (38a4 <DMAC_2_Handler+0x8>)
    38a0:	4798      	blx	r3
    38a2:	bd08      	pop	{r3, pc}
    38a4:	00003731 	.word	0x00003731

000038a8 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    38a8:	b508      	push	{r3, lr}
	_dmac_handler();
    38aa:	4b01      	ldr	r3, [pc, #4]	; (38b0 <DMAC_3_Handler+0x8>)
    38ac:	4798      	blx	r3
    38ae:	bd08      	pop	{r3, pc}
    38b0:	00003731 	.word	0x00003731

000038b4 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    38b4:	b508      	push	{r3, lr}
	_dmac_handler();
    38b6:	4b01      	ldr	r3, [pc, #4]	; (38bc <DMAC_4_Handler+0x8>)
    38b8:	4798      	blx	r3
    38ba:	bd08      	pop	{r3, pc}
    38bc:	00003731 	.word	0x00003731

000038c0 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    38c0:	4a1e      	ldr	r2, [pc, #120]	; (393c <_ext_irq_init+0x7c>)
    38c2:	6853      	ldr	r3, [r2, #4]
    38c4:	f013 0f01 	tst.w	r3, #1
    38c8:	d1fb      	bne.n	38c2 <_ext_irq_init+0x2>
    38ca:	4a1c      	ldr	r2, [pc, #112]	; (393c <_ext_irq_init+0x7c>)
    38cc:	6853      	ldr	r3, [r2, #4]
    38ce:	f013 0f03 	tst.w	r3, #3
    38d2:	d1fb      	bne.n	38cc <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    38d4:	4b19      	ldr	r3, [pc, #100]	; (393c <_ext_irq_init+0x7c>)
    38d6:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    38d8:	f013 0f02 	tst.w	r3, #2
    38dc:	d12b      	bne.n	3936 <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    38de:	4a17      	ldr	r2, [pc, #92]	; (393c <_ext_irq_init+0x7c>)
    38e0:	6853      	ldr	r3, [r2, #4]
    38e2:	f013 0f01 	tst.w	r3, #1
    38e6:	d1fb      	bne.n	38e0 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    38e8:	4a14      	ldr	r2, [pc, #80]	; (393c <_ext_irq_init+0x7c>)
    38ea:	7813      	ldrb	r3, [r2, #0]
    38ec:	f043 0301 	orr.w	r3, r3, #1
    38f0:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    38f2:	6853      	ldr	r3, [r2, #4]
    38f4:	f013 0f01 	tst.w	r3, #1
    38f8:	d1fb      	bne.n	38f2 <_ext_irq_init+0x32>
    38fa:	4a10      	ldr	r2, [pc, #64]	; (393c <_ext_irq_init+0x7c>)
    38fc:	6853      	ldr	r3, [r2, #4]
    38fe:	f013 0f03 	tst.w	r3, #3
    3902:	d1fb      	bne.n	38fc <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    3904:	4b0d      	ldr	r3, [pc, #52]	; (393c <_ext_irq_init+0x7c>)
    3906:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    3908:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    390c:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    390e:	2200      	movs	r2, #0
    3910:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    3912:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    3914:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    3916:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    3918:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    391a:	61da      	str	r2, [r3, #28]
    391c:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    391e:	461a      	mov	r2, r3
    3920:	6853      	ldr	r3, [r2, #4]
    3922:	f013 0f03 	tst.w	r3, #3
    3926:	d1fb      	bne.n	3920 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    3928:	4a04      	ldr	r2, [pc, #16]	; (393c <_ext_irq_init+0x7c>)
    392a:	7813      	ldrb	r3, [r2, #0]
    392c:	f043 0302 	orr.w	r3, r3, #2
    3930:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    3932:	2000      	movs	r0, #0
    3934:	4770      	bx	lr
		return ERR_DENIED;
    3936:	f06f 0010 	mvn.w	r0, #16
}
    393a:	4770      	bx	lr
    393c:	40002800 	.word	0x40002800

00003940 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    3940:	b430      	push	{r4, r5}
    3942:	4814      	ldr	r0, [pc, #80]	; (3994 <_event_system_init+0x54>)
    3944:	f100 0543 	add.w	r5, r0, #67	; 0x43
    3948:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    394a:	4c13      	ldr	r4, [pc, #76]	; (3998 <_event_system_init+0x58>)
    394c:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    394e:	f813 1b01 	ldrb.w	r1, [r3], #1
    3952:	3248      	adds	r2, #72	; 0x48
    3954:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    3958:	42ab      	cmp	r3, r5
    395a:	d1f7      	bne.n	394c <_event_system_init+0xc>
    395c:	480d      	ldr	r0, [pc, #52]	; (3994 <_event_system_init+0x54>)
    395e:	f100 0442 	add.w	r4, r0, #66	; 0x42
    3962:	3080      	adds	r0, #128	; 0x80
    3964:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    3966:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    396a:	00ca      	lsls	r2, r1, #3
    396c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3970:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    3974:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    3976:	f850 3f04 	ldr.w	r3, [r0, #4]!
    397a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    397c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    3980:	43db      	mvns	r3, r3
    3982:	b2db      	uxtb	r3, r3
    3984:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3988:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    398a:	2920      	cmp	r1, #32
    398c:	d1eb      	bne.n	3966 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    398e:	2000      	movs	r0, #0
    3990:	bc30      	pop	{r4, r5}
    3992:	4770      	bx	lr
    3994:	00008974 	.word	0x00008974
    3998:	4100e000 	.word	0x4100e000

0000399c <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    399c:	f010 0f01 	tst.w	r0, #1
    39a0:	d002      	beq.n	39a8 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    39a2:	4a23      	ldr	r2, [pc, #140]	; (3a30 <_gclk_init_generators_by_fref+0x94>)
    39a4:	4b23      	ldr	r3, [pc, #140]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    39a6:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    39a8:	f010 0f02 	tst.w	r0, #2
    39ac:	d002      	beq.n	39b4 <_gclk_init_generators_by_fref+0x18>
    39ae:	4a22      	ldr	r2, [pc, #136]	; (3a38 <_gclk_init_generators_by_fref+0x9c>)
    39b0:	4b20      	ldr	r3, [pc, #128]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    39b2:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    39b4:	f010 0f04 	tst.w	r0, #4
    39b8:	d002      	beq.n	39c0 <_gclk_init_generators_by_fref+0x24>
    39ba:	4a1d      	ldr	r2, [pc, #116]	; (3a30 <_gclk_init_generators_by_fref+0x94>)
    39bc:	4b1d      	ldr	r3, [pc, #116]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    39be:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    39c0:	f010 0f08 	tst.w	r0, #8
    39c4:	d002      	beq.n	39cc <_gclk_init_generators_by_fref+0x30>
    39c6:	4a1a      	ldr	r2, [pc, #104]	; (3a30 <_gclk_init_generators_by_fref+0x94>)
    39c8:	4b1a      	ldr	r3, [pc, #104]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    39ca:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    39cc:	f010 0f10 	tst.w	r0, #16
    39d0:	d002      	beq.n	39d8 <_gclk_init_generators_by_fref+0x3c>
    39d2:	4a17      	ldr	r2, [pc, #92]	; (3a30 <_gclk_init_generators_by_fref+0x94>)
    39d4:	4b17      	ldr	r3, [pc, #92]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    39d6:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    39d8:	f010 0f20 	tst.w	r0, #32
    39dc:	d002      	beq.n	39e4 <_gclk_init_generators_by_fref+0x48>
    39de:	4a14      	ldr	r2, [pc, #80]	; (3a30 <_gclk_init_generators_by_fref+0x94>)
    39e0:	4b14      	ldr	r3, [pc, #80]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    39e2:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    39e4:	f010 0f40 	tst.w	r0, #64	; 0x40
    39e8:	d002      	beq.n	39f0 <_gclk_init_generators_by_fref+0x54>
    39ea:	4a11      	ldr	r2, [pc, #68]	; (3a30 <_gclk_init_generators_by_fref+0x94>)
    39ec:	4b11      	ldr	r3, [pc, #68]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    39ee:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    39f0:	f010 0f80 	tst.w	r0, #128	; 0x80
    39f4:	d002      	beq.n	39fc <_gclk_init_generators_by_fref+0x60>
    39f6:	4a0e      	ldr	r2, [pc, #56]	; (3a30 <_gclk_init_generators_by_fref+0x94>)
    39f8:	4b0e      	ldr	r3, [pc, #56]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    39fa:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    39fc:	f410 7f80 	tst.w	r0, #256	; 0x100
    3a00:	d002      	beq.n	3a08 <_gclk_init_generators_by_fref+0x6c>
    3a02:	4a0b      	ldr	r2, [pc, #44]	; (3a30 <_gclk_init_generators_by_fref+0x94>)
    3a04:	4b0b      	ldr	r3, [pc, #44]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    3a06:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    3a08:	f410 7f00 	tst.w	r0, #512	; 0x200
    3a0c:	d002      	beq.n	3a14 <_gclk_init_generators_by_fref+0x78>
    3a0e:	4a08      	ldr	r2, [pc, #32]	; (3a30 <_gclk_init_generators_by_fref+0x94>)
    3a10:	4b08      	ldr	r3, [pc, #32]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    3a12:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    3a14:	f410 6f80 	tst.w	r0, #1024	; 0x400
    3a18:	d002      	beq.n	3a20 <_gclk_init_generators_by_fref+0x84>
    3a1a:	4a08      	ldr	r2, [pc, #32]	; (3a3c <_gclk_init_generators_by_fref+0xa0>)
    3a1c:	4b05      	ldr	r3, [pc, #20]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    3a1e:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    3a20:	f410 6f00 	tst.w	r0, #2048	; 0x800
    3a24:	d002      	beq.n	3a2c <_gclk_init_generators_by_fref+0x90>
    3a26:	4a06      	ldr	r2, [pc, #24]	; (3a40 <_gclk_init_generators_by_fref+0xa4>)
    3a28:	4b02      	ldr	r3, [pc, #8]	; (3a34 <_gclk_init_generators_by_fref+0x98>)
    3a2a:	64da      	str	r2, [r3, #76]	; 0x4c
    3a2c:	4770      	bx	lr
    3a2e:	bf00      	nop
    3a30:	00012b06 	.word	0x00012b06
    3a34:	40001c00 	.word	0x40001c00
    3a38:	00012306 	.word	0x00012306
    3a3c:	00012b05 	.word	0x00012b05
    3a40:	00013b05 	.word	0x00013b05

00003a44 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    3a44:	2201      	movs	r2, #1
    3a46:	4b01      	ldr	r3, [pc, #4]	; (3a4c <_mclk_init+0x8>)
    3a48:	715a      	strb	r2, [r3, #5]
    3a4a:	4770      	bx	lr
    3a4c:	40000800 	.word	0x40000800

00003a50 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    3a50:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    3a52:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    3a54:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    3a56:	f012 0f01 	tst.w	r2, #1
    3a5a:	d005      	beq.n	3a68 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    3a5c:	2201      	movs	r2, #1
    3a5e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    3a60:	6803      	ldr	r3, [r0, #0]
    3a62:	b153      	cbz	r3, 3a7a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    3a64:	4798      	blx	r3
    3a66:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    3a68:	8a1a      	ldrh	r2, [r3, #16]
    3a6a:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    3a6c:	b12a      	cbz	r2, 3a7a <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    3a6e:	f240 225e 	movw	r2, #606	; 0x25e
    3a72:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    3a74:	6843      	ldr	r3, [r0, #4]
    3a76:	b103      	cbz	r3, 3a7a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    3a78:	4798      	blx	r3
    3a7a:	bd08      	pop	{r3, pc}

00003a7c <_flash_init>:
{
    3a7c:	b538      	push	{r3, r4, r5, lr}
    3a7e:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    3a80:	4605      	mov	r5, r0
    3a82:	b350      	cbz	r0, 3ada <_flash_init+0x5e>
    3a84:	4816      	ldr	r0, [pc, #88]	; (3ae0 <_flash_init+0x64>)
    3a86:	4281      	cmp	r1, r0
    3a88:	bf14      	ite	ne
    3a8a:	2000      	movne	r0, #0
    3a8c:	2001      	moveq	r0, #1
    3a8e:	2256      	movs	r2, #86	; 0x56
    3a90:	4914      	ldr	r1, [pc, #80]	; (3ae4 <_flash_init+0x68>)
    3a92:	4b15      	ldr	r3, [pc, #84]	; (3ae8 <_flash_init+0x6c>)
    3a94:	4798      	blx	r3
	device->hw = hw;
    3a96:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    3a98:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    3a9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    3a9e:	049b      	lsls	r3, r3, #18
    3aa0:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    3aa2:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    3aa4:	4b11      	ldr	r3, [pc, #68]	; (3aec <_flash_init+0x70>)
    3aa6:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3aa8:	4b11      	ldr	r3, [pc, #68]	; (3af0 <_flash_init+0x74>)
    3aaa:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    3aae:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3ab2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ab6:	f3bf 8f6f 	isb	sy
    3aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3ac2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ac6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3aca:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3ace:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ad2:	6019      	str	r1, [r3, #0]
    3ad4:	601a      	str	r2, [r3, #0]
}
    3ad6:	2000      	movs	r0, #0
    3ad8:	bd38      	pop	{r3, r4, r5, pc}
    3ada:	2000      	movs	r0, #0
    3adc:	e7d7      	b.n	3a8e <_flash_init+0x12>
    3ade:	bf00      	nop
    3ae0:	41004000 	.word	0x41004000
    3ae4:	00008a78 	.word	0x00008a78
    3ae8:	00003301 	.word	0x00003301
    3aec:	20000ae0 	.word	0x20000ae0
    3af0:	e000e100 	.word	0xe000e100

00003af4 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    3af4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    3af6:	4b02      	ldr	r3, [pc, #8]	; (3b00 <NVMCTRL_0_Handler+0xc>)
    3af8:	6818      	ldr	r0, [r3, #0]
    3afa:	4b02      	ldr	r3, [pc, #8]	; (3b04 <NVMCTRL_0_Handler+0x10>)
    3afc:	4798      	blx	r3
    3afe:	bd08      	pop	{r3, pc}
    3b00:	20000ae0 	.word	0x20000ae0
    3b04:	00003a51 	.word	0x00003a51

00003b08 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    3b08:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    3b0a:	4b02      	ldr	r3, [pc, #8]	; (3b14 <NVMCTRL_1_Handler+0xc>)
    3b0c:	6818      	ldr	r0, [r3, #0]
    3b0e:	4b02      	ldr	r3, [pc, #8]	; (3b18 <NVMCTRL_1_Handler+0x10>)
    3b10:	4798      	blx	r3
    3b12:	bd08      	pop	{r3, pc}
    3b14:	20000ae0 	.word	0x20000ae0
    3b18:	00003a51 	.word	0x00003a51

00003b1c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    3b1c:	4b09      	ldr	r3, [pc, #36]	; (3b44 <_osc32kctrl_init_sources+0x28>)
    3b1e:	f242 024e 	movw	r2, #8270	; 0x204e
    3b22:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    3b24:	2201      	movs	r2, #1
    3b26:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    3b28:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    3b2a:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    3b2c:	2200      	movs	r2, #0
    3b2e:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    3b30:	461a      	mov	r2, r3
    3b32:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    3b34:	f013 0f01 	tst.w	r3, #1
    3b38:	d0fb      	beq.n	3b32 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    3b3a:	2204      	movs	r2, #4
    3b3c:	4b01      	ldr	r3, [pc, #4]	; (3b44 <_osc32kctrl_init_sources+0x28>)
    3b3e:	741a      	strb	r2, [r3, #16]
    3b40:	4770      	bx	lr
    3b42:	bf00      	nop
    3b44:	40001400 	.word	0x40001400

00003b48 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3b48:	4a2b      	ldr	r2, [pc, #172]	; (3bf8 <_oscctrl_init_referenced_generators+0xb0>)
    3b4a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3b4c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3b50:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3b54:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3b56:	4b29      	ldr	r3, [pc, #164]	; (3bfc <_oscctrl_init_referenced_generators+0xb4>)
    3b58:	2200      	movs	r2, #0
    3b5a:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    3b5c:	4a28      	ldr	r2, [pc, #160]	; (3c00 <_oscctrl_init_referenced_generators+0xb8>)
    3b5e:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3b60:	461a      	mov	r2, r3
    3b62:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    3b66:	f013 0f10 	tst.w	r3, #16
    3b6a:	d1fa      	bne.n	3b62 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3b6c:	2200      	movs	r2, #0
    3b6e:	4b23      	ldr	r3, [pc, #140]	; (3bfc <_oscctrl_init_referenced_generators+0xb4>)
    3b70:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3b74:	461a      	mov	r2, r3
    3b76:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3b7a:	f013 0f04 	tst.w	r3, #4
    3b7e:	d1fa      	bne.n	3b76 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3b80:	2242      	movs	r2, #66	; 0x42
    3b82:	4b1e      	ldr	r3, [pc, #120]	; (3bfc <_oscctrl_init_referenced_generators+0xb4>)
    3b84:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3b86:	461a      	mov	r2, r3
    3b88:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    3b8c:	f013 0f02 	tst.w	r3, #2
    3b90:	d1fa      	bne.n	3b88 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    3b92:	4b1a      	ldr	r3, [pc, #104]	; (3bfc <_oscctrl_init_referenced_generators+0xb4>)
    3b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    3b96:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3b98:	461a      	mov	r2, r3
    3b9a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    3b9e:	f013 0f08 	tst.w	r3, #8
    3ba2:	d1fa      	bne.n	3b9a <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3ba4:	2282      	movs	r2, #130	; 0x82
    3ba6:	4b15      	ldr	r3, [pc, #84]	; (3bfc <_oscctrl_init_referenced_generators+0xb4>)
    3ba8:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3bac:	461a      	mov	r2, r3
    3bae:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3bb2:	f013 0f04 	tst.w	r3, #4
    3bb6:	d1fa      	bne.n	3bae <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3bb8:	4b10      	ldr	r3, [pc, #64]	; (3bfc <_oscctrl_init_referenced_generators+0xb4>)
    3bba:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    3bbe:	f013 0f01 	tst.w	r3, #1
    3bc2:	d012      	beq.n	3bea <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3bc4:	4a0d      	ldr	r2, [pc, #52]	; (3bfc <_oscctrl_init_referenced_generators+0xb4>)
    3bc6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3bc8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    3bcc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3bd0:	d1f9      	bne.n	3bc6 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    3bd2:	4a09      	ldr	r2, [pc, #36]	; (3bf8 <_oscctrl_init_referenced_generators+0xb0>)
    3bd4:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    3bd6:	2b00      	cmp	r3, #0
    3bd8:	d1fc      	bne.n	3bd4 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3bda:	4a07      	ldr	r2, [pc, #28]	; (3bf8 <_oscctrl_init_referenced_generators+0xb0>)
    3bdc:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    3bde:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3be2:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3be6:	6213      	str	r3, [r2, #32]
    3be8:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    3bea:	4a04      	ldr	r2, [pc, #16]	; (3bfc <_oscctrl_init_referenced_generators+0xb4>)
    3bec:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    3bee:	f413 7f80 	tst.w	r3, #256	; 0x100
    3bf2:	d0fb      	beq.n	3bec <_oscctrl_init_referenced_generators+0xa4>
    3bf4:	e7ed      	b.n	3bd2 <_oscctrl_init_referenced_generators+0x8a>
    3bf6:	bf00      	nop
    3bf8:	40001c00 	.word	0x40001c00
    3bfc:	40001000 	.word	0x40001000
    3c00:	04010000 	.word	0x04010000

00003c04 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    3c04:	b500      	push	{lr}
    3c06:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    3c08:	4b0d      	ldr	r3, [pc, #52]	; (3c40 <RAMECC_Handler+0x3c>)
    3c0a:	789b      	ldrb	r3, [r3, #2]
    3c0c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    3c0e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    3c10:	9b01      	ldr	r3, [sp, #4]
    3c12:	f013 0f02 	tst.w	r3, #2
    3c16:	d006      	beq.n	3c26 <RAMECC_Handler+0x22>
    3c18:	4b0a      	ldr	r3, [pc, #40]	; (3c44 <RAMECC_Handler+0x40>)
    3c1a:	681b      	ldr	r3, [r3, #0]
    3c1c:	b11b      	cbz	r3, 3c26 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    3c1e:	4a08      	ldr	r2, [pc, #32]	; (3c40 <RAMECC_Handler+0x3c>)
    3c20:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3c22:	4798      	blx	r3
    3c24:	e009      	b.n	3c3a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    3c26:	9b01      	ldr	r3, [sp, #4]
    3c28:	f013 0f01 	tst.w	r3, #1
    3c2c:	d005      	beq.n	3c3a <RAMECC_Handler+0x36>
    3c2e:	4b05      	ldr	r3, [pc, #20]	; (3c44 <RAMECC_Handler+0x40>)
    3c30:	685b      	ldr	r3, [r3, #4]
    3c32:	b113      	cbz	r3, 3c3a <RAMECC_Handler+0x36>
    3c34:	4a02      	ldr	r2, [pc, #8]	; (3c40 <RAMECC_Handler+0x3c>)
    3c36:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3c38:	4798      	blx	r3
	} else {
		return;
	}
}
    3c3a:	b003      	add	sp, #12
    3c3c:	f85d fb04 	ldr.w	pc, [sp], #4
    3c40:	41020000 	.word	0x41020000
    3c44:	20003e78 	.word	0x20003e78

00003c48 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3c48:	b470      	push	{r4, r5, r6}
    3c4a:	b087      	sub	sp, #28
    3c4c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    3c4e:	466c      	mov	r4, sp
    3c50:	4d0c      	ldr	r5, [pc, #48]	; (3c84 <_sercom_get_hardware_index+0x3c>)
    3c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3c56:	e895 0003 	ldmia.w	r5, {r0, r1}
    3c5a:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3c5e:	9b00      	ldr	r3, [sp, #0]
    3c60:	42b3      	cmp	r3, r6
    3c62:	d00c      	beq.n	3c7e <_sercom_get_hardware_index+0x36>
    3c64:	4632      	mov	r2, r6
    3c66:	2001      	movs	r0, #1
    3c68:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    3c6c:	4293      	cmp	r3, r2
    3c6e:	d007      	beq.n	3c80 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3c70:	3001      	adds	r0, #1
    3c72:	2806      	cmp	r0, #6
    3c74:	d1f8      	bne.n	3c68 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    3c76:	2000      	movs	r0, #0
}
    3c78:	b007      	add	sp, #28
    3c7a:	bc70      	pop	{r4, r5, r6}
    3c7c:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3c7e:	2000      	movs	r0, #0
			return i;
    3c80:	b2c0      	uxtb	r0, r0
    3c82:	e7f9      	b.n	3c78 <_sercom_get_hardware_index+0x30>
    3c84:	00008a98 	.word	0x00008a98

00003c88 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3c88:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    3c8a:	4b03      	ldr	r3, [pc, #12]	; (3c98 <_sercom_get_irq_num+0x10>)
    3c8c:	4798      	blx	r3
    3c8e:	0080      	lsls	r0, r0, #2
    3c90:	302e      	adds	r0, #46	; 0x2e
}
    3c92:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    3c96:	bd08      	pop	{r3, pc}
    3c98:	00003c49 	.word	0x00003c49

00003c9c <_usart_init>:
{
    3c9c:	b538      	push	{r3, r4, r5, lr}
    3c9e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3ca0:	4b33      	ldr	r3, [pc, #204]	; (3d70 <_usart_init+0xd4>)
    3ca2:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    3ca4:	2803      	cmp	r0, #3
    3ca6:	d056      	beq.n	3d56 <_usart_init+0xba>
    3ca8:	2804      	cmp	r0, #4
    3caa:	d052      	beq.n	3d52 <_usart_init+0xb6>
    3cac:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3cae:	bf08      	it	eq
    3cb0:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    3cb2:	d006      	beq.n	3cc2 <_usart_init+0x26>
	ASSERT(false);
    3cb4:	f240 2263 	movw	r2, #611	; 0x263
    3cb8:	492e      	ldr	r1, [pc, #184]	; (3d74 <_usart_init+0xd8>)
    3cba:	2000      	movs	r0, #0
    3cbc:	4b2e      	ldr	r3, [pc, #184]	; (3d78 <_usart_init+0xdc>)
    3cbe:	4798      	blx	r3
	return 0;
    3cc0:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3cc2:	69e3      	ldr	r3, [r4, #28]
    3cc4:	f013 0f01 	tst.w	r3, #1
    3cc8:	d1fb      	bne.n	3cc2 <_usart_init+0x26>
    3cca:	69e3      	ldr	r3, [r4, #28]
    3ccc:	f013 0f03 	tst.w	r3, #3
    3cd0:	d1fb      	bne.n	3cca <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3cd2:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    3cd4:	f013 0f02 	tst.w	r3, #2
    3cd8:	d147      	bne.n	3d6a <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3cda:	69e3      	ldr	r3, [r4, #28]
    3cdc:	f013 0f01 	tst.w	r3, #1
    3ce0:	d1fb      	bne.n	3cda <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    3ce2:	6823      	ldr	r3, [r4, #0]
    3ce4:	f043 0301 	orr.w	r3, r3, #1
    3ce8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3cea:	69e3      	ldr	r3, [r4, #28]
    3cec:	f013 0f01 	tst.w	r3, #1
    3cf0:	d1fb      	bne.n	3cea <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3cf2:	4610      	mov	r0, r2
    3cf4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3cf8:	4920      	ldr	r1, [pc, #128]	; (3d7c <_usart_init+0xe0>)
    3cfa:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    3cfe:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3d00:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3d02:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3d04:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    3d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    3d08:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    3d0a:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    3d0e:	d024      	beq.n	3d5a <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3d10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3d14:	4b19      	ldr	r3, [pc, #100]	; (3d7c <_usart_init+0xe0>)
    3d16:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    3d1a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    3d1c:	89a3      	ldrh	r3, [r4, #12]
    3d1e:	f361 030c 	bfi	r3, r1, #0, #13
    3d22:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3d24:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    3d28:	89a3      	ldrh	r3, [r4, #12]
    3d2a:	f362 334f 	bfi	r3, r2, #13, #3
    3d2e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3d30:	4b12      	ldr	r3, [pc, #72]	; (3d7c <_usart_init+0xe0>)
    3d32:	0042      	lsls	r2, r0, #1
    3d34:	1811      	adds	r1, r2, r0
    3d36:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    3d3a:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    3d3e:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3d40:	4402      	add	r2, r0
    3d42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3d46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3d4a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    3d4e:	2000      	movs	r0, #0
    3d50:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3d52:	2201      	movs	r2, #1
    3d54:	e7b5      	b.n	3cc2 <_usart_init+0x26>
    3d56:	2200      	movs	r2, #0
    3d58:	e7b3      	b.n	3cc2 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    3d5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3d5e:	4b07      	ldr	r3, [pc, #28]	; (3d7c <_usart_init+0xe0>)
    3d60:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    3d64:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    3d66:	81a3      	strh	r3, [r4, #12]
    3d68:	e7e2      	b.n	3d30 <_usart_init+0x94>
		return ERR_DENIED;
    3d6a:	f06f 0010 	mvn.w	r0, #16
}
    3d6e:	bd38      	pop	{r3, r4, r5, pc}
    3d70:	00003c49 	.word	0x00003c49
    3d74:	00008b24 	.word	0x00008b24
    3d78:	00003301 	.word	0x00003301
    3d7c:	00008a98 	.word	0x00008a98

00003d80 <_usart_async_init>:
{
    3d80:	b570      	push	{r4, r5, r6, lr}
    3d82:	460d      	mov	r5, r1
	ASSERT(device);
    3d84:	4606      	mov	r6, r0
    3d86:	22da      	movs	r2, #218	; 0xda
    3d88:	4916      	ldr	r1, [pc, #88]	; (3de4 <_usart_async_init+0x64>)
    3d8a:	3000      	adds	r0, #0
    3d8c:	bf18      	it	ne
    3d8e:	2001      	movne	r0, #1
    3d90:	4b15      	ldr	r3, [pc, #84]	; (3de8 <_usart_async_init+0x68>)
    3d92:	4798      	blx	r3
	init_status = _usart_init(hw);
    3d94:	4628      	mov	r0, r5
    3d96:	4b15      	ldr	r3, [pc, #84]	; (3dec <_usart_async_init+0x6c>)
    3d98:	4798      	blx	r3
	if (init_status) {
    3d9a:	4604      	mov	r4, r0
    3d9c:	b9f8      	cbnz	r0, 3dde <_usart_async_init+0x5e>
	device->hw = hw;
    3d9e:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    3da0:	4628      	mov	r0, r5
    3da2:	4b13      	ldr	r3, [pc, #76]	; (3df0 <_usart_async_init+0x70>)
    3da4:	4798      	blx	r3
		irq = irq +2;
    3da6:	3002      	adds	r0, #2
    3da8:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3daa:	f000 031f 	and.w	r3, r0, #31
    3dae:	2201      	movs	r2, #1
    3db0:	409a      	lsls	r2, r3
    3db2:	0943      	lsrs	r3, r0, #5
    3db4:	009b      	lsls	r3, r3, #2
    3db6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3dba:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3dc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3dc6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3dca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3dce:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    3dd2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    3dd6:	21e0      	movs	r1, #224	; 0xe0
    3dd8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ddc:	601a      	str	r2, [r3, #0]
}
    3dde:	4620      	mov	r0, r4
    3de0:	bd70      	pop	{r4, r5, r6, pc}
    3de2:	bf00      	nop
    3de4:	00008b24 	.word	0x00008b24
    3de8:	00003301 	.word	0x00003301
    3dec:	00003c9d 	.word	0x00003c9d
    3df0:	00003c89 	.word	0x00003c89

00003df4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3df4:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3df6:	69d3      	ldr	r3, [r2, #28]
    3df8:	f013 0f03 	tst.w	r3, #3
    3dfc:	d1fb      	bne.n	3df6 <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3dfe:	6813      	ldr	r3, [r2, #0]
    3e00:	f043 0302 	orr.w	r3, r3, #2
    3e04:	6013      	str	r3, [r2, #0]
    3e06:	4770      	bx	lr

00003e08 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3e08:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    3e0a:	6299      	str	r1, [r3, #40]	; 0x28
    3e0c:	4770      	bx	lr

00003e0e <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    3e0e:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    3e10:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    3e12:	b2c0      	uxtb	r0, r0
    3e14:	4770      	bx	lr

00003e16 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3e16:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3e18:	7e18      	ldrb	r0, [r3, #24]
}
    3e1a:	f000 0001 	and.w	r0, r0, #1
    3e1e:	4770      	bx	lr

00003e20 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    3e20:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3e22:	7e18      	ldrb	r0, [r3, #24]
}
    3e24:	f3c0 0080 	ubfx	r0, r0, #2, #1
    3e28:	4770      	bx	lr
	...

00003e2c <_usart_async_set_irq_state>:
{
    3e2c:	b570      	push	{r4, r5, r6, lr}
    3e2e:	460c      	mov	r4, r1
    3e30:	4616      	mov	r6, r2
	ASSERT(device);
    3e32:	4605      	mov	r5, r0
    3e34:	f240 2245 	movw	r2, #581	; 0x245
    3e38:	4915      	ldr	r1, [pc, #84]	; (3e90 <_usart_async_set_irq_state+0x64>)
    3e3a:	3000      	adds	r0, #0
    3e3c:	bf18      	it	ne
    3e3e:	2001      	movne	r0, #1
    3e40:	4b14      	ldr	r3, [pc, #80]	; (3e94 <_usart_async_set_irq_state+0x68>)
    3e42:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    3e44:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    3e48:	d10d      	bne.n	3e66 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    3e4a:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3e4c:	b92e      	cbnz	r6, 3e5a <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3e4e:	2201      	movs	r2, #1
    3e50:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    3e52:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3e54:	2202      	movs	r2, #2
    3e56:	751a      	strb	r2, [r3, #20]
    3e58:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    3e5a:	2201      	movs	r2, #1
    3e5c:	759a      	strb	r2, [r3, #22]
    3e5e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3e60:	2202      	movs	r2, #2
    3e62:	759a      	strb	r2, [r3, #22]
    3e64:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    3e66:	2c01      	cmp	r4, #1
    3e68:	d002      	beq.n	3e70 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    3e6a:	2c03      	cmp	r4, #3
    3e6c:	d008      	beq.n	3e80 <_usart_async_set_irq_state+0x54>
    3e6e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    3e70:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3e72:	b916      	cbnz	r6, 3e7a <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    3e74:	2204      	movs	r2, #4
    3e76:	751a      	strb	r2, [r3, #20]
    3e78:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    3e7a:	2204      	movs	r2, #4
    3e7c:	759a      	strb	r2, [r3, #22]
    3e7e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    3e80:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3e82:	b116      	cbz	r6, 3e8a <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    3e84:	2280      	movs	r2, #128	; 0x80
    3e86:	759a      	strb	r2, [r3, #22]
}
    3e88:	e7f1      	b.n	3e6e <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    3e8a:	2280      	movs	r2, #128	; 0x80
    3e8c:	751a      	strb	r2, [r3, #20]
    3e8e:	bd70      	pop	{r4, r5, r6, pc}
    3e90:	00008b24 	.word	0x00008b24
    3e94:	00003301 	.word	0x00003301

00003e98 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3e98:	4b03      	ldr	r3, [pc, #12]	; (3ea8 <_delay_init+0x10>)
    3e9a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    3e9e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3ea0:	2205      	movs	r2, #5
    3ea2:	601a      	str	r2, [r3, #0]
    3ea4:	4770      	bx	lr
    3ea6:	bf00      	nop
    3ea8:	e000e010 	.word	0xe000e010

00003eac <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    3eac:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    3eae:	b303      	cbz	r3, 3ef2 <_delay_cycles+0x46>
{
    3eb0:	b430      	push	{r4, r5}
    3eb2:	1e5d      	subs	r5, r3, #1
    3eb4:	b2ed      	uxtb	r5, r5
	while (n--) {
    3eb6:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    3eb8:	4a12      	ldr	r2, [pc, #72]	; (3f04 <_delay_cycles+0x58>)
    3eba:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    3ebe:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3ec0:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3ec2:	6813      	ldr	r3, [r2, #0]
    3ec4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3ec8:	d0fb      	beq.n	3ec2 <_delay_cycles+0x16>
	while (n--) {
    3eca:	3801      	subs	r0, #1
    3ecc:	b2c0      	uxtb	r0, r0
    3ece:	28ff      	cmp	r0, #255	; 0xff
    3ed0:	d1f5      	bne.n	3ebe <_delay_cycles+0x12>
    3ed2:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    3ed6:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    3eda:	3101      	adds	r1, #1
    3edc:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    3ede:	4b09      	ldr	r3, [pc, #36]	; (3f04 <_delay_cycles+0x58>)
    3ee0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3ee2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3ee4:	461a      	mov	r2, r3
    3ee6:	6813      	ldr	r3, [r2, #0]
    3ee8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3eec:	d0fb      	beq.n	3ee6 <_delay_cycles+0x3a>
		;
}
    3eee:	bc30      	pop	{r4, r5}
    3ef0:	4770      	bx	lr
	SysTick->LOAD = buf;
    3ef2:	4b04      	ldr	r3, [pc, #16]	; (3f04 <_delay_cycles+0x58>)
    3ef4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3ef6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3ef8:	461a      	mov	r2, r3
    3efa:	6813      	ldr	r3, [r2, #0]
    3efc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3f00:	d0fb      	beq.n	3efa <_delay_cycles+0x4e>
    3f02:	4770      	bx	lr
    3f04:	e000e010 	.word	0xe000e010

00003f08 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    3f08:	b470      	push	{r4, r5, r6}
    3f0a:	b087      	sub	sp, #28
    3f0c:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    3f0e:	ac01      	add	r4, sp, #4
    3f10:	4d14      	ldr	r5, [pc, #80]	; (3f64 <_get_irq_num+0x5c>)
    3f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3f16:	682b      	ldr	r3, [r5, #0]
    3f18:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    3f1a:	42b0      	cmp	r0, r6
    3f1c:	d017      	beq.n	3f4e <_get_irq_num+0x46>
    3f1e:	4631      	mov	r1, r6
    3f20:	2301      	movs	r3, #1
    3f22:	a801      	add	r0, sp, #4
    3f24:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    3f28:	428a      	cmp	r2, r1
    3f2a:	d006      	beq.n	3f3a <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    3f2c:	3301      	adds	r3, #1
    3f2e:	2b05      	cmp	r3, #5
    3f30:	d1f8      	bne.n	3f24 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    3f32:	2055      	movs	r0, #85	; 0x55
}
    3f34:	b007      	add	sp, #28
    3f36:	bc70      	pop	{r4, r5, r6}
    3f38:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    3f3a:	b2db      	uxtb	r3, r3
    3f3c:	2b04      	cmp	r3, #4
    3f3e:	d80c      	bhi.n	3f5a <_get_irq_num+0x52>
    3f40:	e8df f003 	tbb	[pc, r3]
    3f44:	070d0305 	.word	0x070d0305
    3f48:	09          	.byte	0x09
    3f49:	00          	.byte	0x00
		return TCC1_0_IRQn;
    3f4a:	205c      	movs	r0, #92	; 0x5c
    3f4c:	e7f2      	b.n	3f34 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    3f4e:	2055      	movs	r0, #85	; 0x55
    3f50:	e7f0      	b.n	3f34 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    3f52:	2065      	movs	r0, #101	; 0x65
    3f54:	e7ee      	b.n	3f34 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    3f56:	2068      	movs	r0, #104	; 0x68
    3f58:	e7ec      	b.n	3f34 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    3f5a:	2089      	movs	r0, #137	; 0x89
    3f5c:	e7ea      	b.n	3f34 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    3f5e:	2061      	movs	r0, #97	; 0x61
    3f60:	e7e8      	b.n	3f34 <_get_irq_num+0x2c>
    3f62:	bf00      	nop
    3f64:	00008b40 	.word	0x00008b40

00003f68 <_tcc_timer_deinit>:
{
    3f68:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    3f6a:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    3f6c:	4620      	mov	r0, r4
    3f6e:	4b10      	ldr	r3, [pc, #64]	; (3fb0 <_tcc_timer_deinit+0x48>)
    3f70:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f72:	0943      	lsrs	r3, r0, #5
    3f74:	f000 001f 	and.w	r0, r0, #31
    3f78:	2201      	movs	r2, #1
    3f7a:	fa02 f000 	lsl.w	r0, r2, r0
    3f7e:	3320      	adds	r3, #32
    3f80:	4a0c      	ldr	r2, [pc, #48]	; (3fb4 <_tcc_timer_deinit+0x4c>)
    3f82:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3f86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f8a:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3f8e:	68a3      	ldr	r3, [r4, #8]
    3f90:	f013 0f03 	tst.w	r3, #3
    3f94:	d1fb      	bne.n	3f8e <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    3f96:	6823      	ldr	r3, [r4, #0]
    3f98:	f023 0302 	bic.w	r3, r3, #2
    3f9c:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3f9e:	68a3      	ldr	r3, [r4, #8]
    3fa0:	f013 0f01 	tst.w	r3, #1
    3fa4:	d1fb      	bne.n	3f9e <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    3fa6:	6823      	ldr	r3, [r4, #0]
    3fa8:	f043 0301 	orr.w	r3, r3, #1
    3fac:	6023      	str	r3, [r4, #0]
    3fae:	bd10      	pop	{r4, pc}
    3fb0:	00003f09 	.word	0x00003f09
    3fb4:	e000e100 	.word	0xe000e100

00003fb8 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    3fb8:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3fba:	6893      	ldr	r3, [r2, #8]
    3fbc:	f013 0f03 	tst.w	r3, #3
    3fc0:	d1fb      	bne.n	3fba <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    3fc2:	6813      	ldr	r3, [r2, #0]
    3fc4:	f043 0302 	orr.w	r3, r3, #2
    3fc8:	6013      	str	r3, [r2, #0]
    3fca:	4770      	bx	lr

00003fcc <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    3fcc:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3fce:	6893      	ldr	r3, [r2, #8]
    3fd0:	f013 0f03 	tst.w	r3, #3
    3fd4:	d1fb      	bne.n	3fce <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    3fd6:	6813      	ldr	r3, [r2, #0]
    3fd8:	f023 0302 	bic.w	r3, r3, #2
    3fdc:	6013      	str	r3, [r2, #0]
    3fde:	4770      	bx	lr

00003fe0 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    3fe0:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    3fe2:	6419      	str	r1, [r3, #64]	; 0x40
    3fe4:	4770      	bx	lr

00003fe6 <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    3fe6:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    3fe8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    3fea:	4770      	bx	lr

00003fec <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    3fec:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3fee:	6893      	ldr	r3, [r2, #8]
    3ff0:	f013 0f03 	tst.w	r3, #3
    3ff4:	d1fb      	bne.n	3fee <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    3ff6:	6810      	ldr	r0, [r2, #0]
}
    3ff8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3ffc:	4770      	bx	lr

00003ffe <tcc_interrupt_handler>:
{
    3ffe:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    4000:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    4002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    4004:	f012 0f01 	tst.w	r2, #1
    4008:	d100      	bne.n	400c <tcc_interrupt_handler+0xe>
    400a:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    400c:	2201      	movs	r2, #1
    400e:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    4010:	6803      	ldr	r3, [r0, #0]
    4012:	4798      	blx	r3
}
    4014:	e7f9      	b.n	400a <tcc_interrupt_handler+0xc>
	...

00004018 <_tcc_timer_init>:
{
    4018:	b5f0      	push	{r4, r5, r6, r7, lr}
    401a:	b087      	sub	sp, #28
    401c:	4605      	mov	r5, r0
    401e:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    4020:	ae01      	add	r6, sp, #4
    4022:	4f4e      	ldr	r7, [pc, #312]	; (415c <_tcc_timer_init+0x144>)
    4024:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4026:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    4028:	683b      	ldr	r3, [r7, #0]
    402a:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    402c:	42a0      	cmp	r0, r4
    402e:	d00c      	beq.n	404a <_tcc_timer_init+0x32>
    4030:	4621      	mov	r1, r4
    4032:	2301      	movs	r3, #1
    4034:	a801      	add	r0, sp, #4
    4036:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    403a:	428a      	cmp	r2, r1
    403c:	d006      	beq.n	404c <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    403e:	3301      	adds	r3, #1
    4040:	2b05      	cmp	r3, #5
    4042:	d1f8      	bne.n	4036 <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    4044:	2600      	movs	r6, #0
			return i;
    4046:	b276      	sxtb	r6, r6
    4048:	e015      	b.n	4076 <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    404a:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    404c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    4050:	d073      	beq.n	413a <_tcc_timer_init+0x122>
    4052:	2b01      	cmp	r3, #1
    4054:	d06b      	beq.n	412e <_tcc_timer_init+0x116>
    4056:	2b02      	cmp	r3, #2
    4058:	d06b      	beq.n	4132 <_tcc_timer_init+0x11a>
    405a:	2b03      	cmp	r3, #3
    405c:	d06b      	beq.n	4136 <_tcc_timer_init+0x11e>
    405e:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    4060:	bf08      	it	eq
    4062:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    4064:	d0ef      	beq.n	4046 <_tcc_timer_init+0x2e>
	ASSERT(false);
    4066:	f240 128b 	movw	r2, #395	; 0x18b
    406a:	493d      	ldr	r1, [pc, #244]	; (4160 <_tcc_timer_init+0x148>)
    406c:	2000      	movs	r0, #0
    406e:	4b3d      	ldr	r3, [pc, #244]	; (4164 <_tcc_timer_init+0x14c>)
    4070:	4798      	blx	r3
	return -1;
    4072:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    4076:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    4078:	22e4      	movs	r2, #228	; 0xe4
    407a:	4939      	ldr	r1, [pc, #228]	; (4160 <_tcc_timer_init+0x148>)
    407c:	2001      	movs	r0, #1
    407e:	4b39      	ldr	r3, [pc, #228]	; (4164 <_tcc_timer_init+0x14c>)
    4080:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    4082:	68a3      	ldr	r3, [r4, #8]
    4084:	f013 0f01 	tst.w	r3, #1
    4088:	d1fb      	bne.n	4082 <_tcc_timer_init+0x6a>
    408a:	68a3      	ldr	r3, [r4, #8]
    408c:	f013 0f03 	tst.w	r3, #3
    4090:	d1fb      	bne.n	408a <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    4092:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    4094:	f013 0f02 	tst.w	r3, #2
    4098:	d15d      	bne.n	4156 <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    409a:	68a3      	ldr	r3, [r4, #8]
    409c:	f013 0f01 	tst.w	r3, #1
    40a0:	d1fb      	bne.n	409a <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    40a2:	6823      	ldr	r3, [r4, #0]
    40a4:	f043 0301 	orr.w	r3, r3, #1
    40a8:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    40aa:	68a3      	ldr	r3, [r4, #8]
    40ac:	f013 0f01 	tst.w	r3, #1
    40b0:	d1fb      	bne.n	40aa <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    40b2:	4a2a      	ldr	r2, [pc, #168]	; (415c <_tcc_timer_init+0x144>)
    40b4:	00f1      	lsls	r1, r6, #3
    40b6:	198b      	adds	r3, r1, r6
    40b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    40bc:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    40be:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    40c0:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    40c2:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    40c4:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    40c6:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    40c8:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    40ca:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    40cc:	440e      	add	r6, r1
    40ce:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    40d2:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    40d4:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    40d6:	2301      	movs	r3, #1
    40d8:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    40da:	4b23      	ldr	r3, [pc, #140]	; (4168 <_tcc_timer_init+0x150>)
    40dc:	429c      	cmp	r4, r3
    40de:	d02e      	beq.n	413e <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    40e0:	4b22      	ldr	r3, [pc, #136]	; (416c <_tcc_timer_init+0x154>)
    40e2:	429c      	cmp	r4, r3
    40e4:	d02e      	beq.n	4144 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    40e6:	4b22      	ldr	r3, [pc, #136]	; (4170 <_tcc_timer_init+0x158>)
    40e8:	429c      	cmp	r4, r3
    40ea:	d02e      	beq.n	414a <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    40ec:	4b21      	ldr	r3, [pc, #132]	; (4174 <_tcc_timer_init+0x15c>)
    40ee:	429c      	cmp	r4, r3
    40f0:	d02e      	beq.n	4150 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    40f2:	4b21      	ldr	r3, [pc, #132]	; (4178 <_tcc_timer_init+0x160>)
    40f4:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    40f6:	bf04      	itt	eq
    40f8:	4b20      	ldreq	r3, [pc, #128]	; (417c <_tcc_timer_init+0x164>)
    40fa:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    40fc:	4620      	mov	r0, r4
    40fe:	4b20      	ldr	r3, [pc, #128]	; (4180 <_tcc_timer_init+0x168>)
    4100:	4798      	blx	r3
    4102:	f000 031f 	and.w	r3, r0, #31
    4106:	2201      	movs	r2, #1
    4108:	409a      	lsls	r2, r3
    410a:	0943      	lsrs	r3, r0, #5
    410c:	009b      	lsls	r3, r3, #2
    410e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4112:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4116:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    411a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    411e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4122:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4126:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    4128:	2000      	movs	r0, #0
}
    412a:	b007      	add	sp, #28
    412c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    412e:	2601      	movs	r6, #1
    4130:	e789      	b.n	4046 <_tcc_timer_init+0x2e>
    4132:	2602      	movs	r6, #2
    4134:	e787      	b.n	4046 <_tcc_timer_init+0x2e>
    4136:	2603      	movs	r6, #3
    4138:	e785      	b.n	4046 <_tcc_timer_init+0x2e>
    413a:	2600      	movs	r6, #0
    413c:	e783      	b.n	4046 <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    413e:	4b0f      	ldr	r3, [pc, #60]	; (417c <_tcc_timer_init+0x164>)
    4140:	601d      	str	r5, [r3, #0]
    4142:	e7d3      	b.n	40ec <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    4144:	4b0d      	ldr	r3, [pc, #52]	; (417c <_tcc_timer_init+0x164>)
    4146:	605d      	str	r5, [r3, #4]
    4148:	e7d3      	b.n	40f2 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    414a:	4b0c      	ldr	r3, [pc, #48]	; (417c <_tcc_timer_init+0x164>)
    414c:	609d      	str	r5, [r3, #8]
    414e:	e7d5      	b.n	40fc <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    4150:	4b0a      	ldr	r3, [pc, #40]	; (417c <_tcc_timer_init+0x164>)
    4152:	60dd      	str	r5, [r3, #12]
    4154:	e7d2      	b.n	40fc <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    4156:	f06f 0010 	mvn.w	r0, #16
    415a:	e7e6      	b.n	412a <_tcc_timer_init+0x112>
    415c:	00008b40 	.word	0x00008b40
    4160:	00008c08 	.word	0x00008c08
    4164:	00003301 	.word	0x00003301
    4168:	41016000 	.word	0x41016000
    416c:	41018000 	.word	0x41018000
    4170:	42000c00 	.word	0x42000c00
    4174:	42001000 	.word	0x42001000
    4178:	43001000 	.word	0x43001000
    417c:	20000ae4 	.word	0x20000ae4
    4180:	00003f09 	.word	0x00003f09

00004184 <_tcc_timer_set_irq>:
{
    4184:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    4186:	68c0      	ldr	r0, [r0, #12]
    4188:	4b02      	ldr	r3, [pc, #8]	; (4194 <_tcc_timer_set_irq+0x10>)
    418a:	4798      	blx	r3
    418c:	4b02      	ldr	r3, [pc, #8]	; (4198 <_tcc_timer_set_irq+0x14>)
    418e:	4798      	blx	r3
    4190:	bd08      	pop	{r3, pc}
    4192:	bf00      	nop
    4194:	00003f09 	.word	0x00003f09
    4198:	00003625 	.word	0x00003625

0000419c <_tcc_get_timer>:
}
    419c:	4800      	ldr	r0, [pc, #0]	; (41a0 <_tcc_get_timer+0x4>)
    419e:	4770      	bx	lr
    41a0:	2000006c 	.word	0x2000006c

000041a4 <TCC0_0_Handler>:
{
    41a4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    41a6:	4b02      	ldr	r3, [pc, #8]	; (41b0 <TCC0_0_Handler+0xc>)
    41a8:	6818      	ldr	r0, [r3, #0]
    41aa:	4b02      	ldr	r3, [pc, #8]	; (41b4 <TCC0_0_Handler+0x10>)
    41ac:	4798      	blx	r3
    41ae:	bd08      	pop	{r3, pc}
    41b0:	20000ae4 	.word	0x20000ae4
    41b4:	00003fff 	.word	0x00003fff

000041b8 <TCC1_0_Handler>:
{
    41b8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    41ba:	4b02      	ldr	r3, [pc, #8]	; (41c4 <TCC1_0_Handler+0xc>)
    41bc:	6858      	ldr	r0, [r3, #4]
    41be:	4b02      	ldr	r3, [pc, #8]	; (41c8 <TCC1_0_Handler+0x10>)
    41c0:	4798      	blx	r3
    41c2:	bd08      	pop	{r3, pc}
    41c4:	20000ae4 	.word	0x20000ae4
    41c8:	00003fff 	.word	0x00003fff

000041cc <TCC2_0_Handler>:
{
    41cc:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    41ce:	4b02      	ldr	r3, [pc, #8]	; (41d8 <TCC2_0_Handler+0xc>)
    41d0:	6898      	ldr	r0, [r3, #8]
    41d2:	4b02      	ldr	r3, [pc, #8]	; (41dc <TCC2_0_Handler+0x10>)
    41d4:	4798      	blx	r3
    41d6:	bd08      	pop	{r3, pc}
    41d8:	20000ae4 	.word	0x20000ae4
    41dc:	00003fff 	.word	0x00003fff

000041e0 <TCC3_0_Handler>:
{
    41e0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    41e2:	4b02      	ldr	r3, [pc, #8]	; (41ec <TCC3_0_Handler+0xc>)
    41e4:	68d8      	ldr	r0, [r3, #12]
    41e6:	4b02      	ldr	r3, [pc, #8]	; (41f0 <TCC3_0_Handler+0x10>)
    41e8:	4798      	blx	r3
    41ea:	bd08      	pop	{r3, pc}
    41ec:	20000ae4 	.word	0x20000ae4
    41f0:	00003fff 	.word	0x00003fff

000041f4 <TCC4_0_Handler>:
{
    41f4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    41f6:	4b02      	ldr	r3, [pc, #8]	; (4200 <TCC4_0_Handler+0xc>)
    41f8:	6918      	ldr	r0, [r3, #16]
    41fa:	4b02      	ldr	r3, [pc, #8]	; (4204 <TCC4_0_Handler+0x10>)
    41fc:	4798      	blx	r3
    41fe:	bd08      	pop	{r3, pc}
    4200:	20000ae4 	.word	0x20000ae4
    4204:	00003fff 	.word	0x00003fff

00004208 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    4208:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    420a:	6913      	ldr	r3, [r2, #16]
    420c:	f013 0f03 	tst.w	r3, #3
    4210:	d1fb      	bne.n	420a <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    4212:	6813      	ldr	r3, [r2, #0]
    4214:	f043 0302 	orr.w	r3, r3, #2
    4218:	6013      	str	r3, [r2, #0]
    421a:	4770      	bx	lr

0000421c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    421c:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    421e:	6913      	ldr	r3, [r2, #16]
    4220:	f013 0f03 	tst.w	r3, #3
    4224:	d1fb      	bne.n	421e <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4226:	6813      	ldr	r3, [r2, #0]
    4228:	f023 0302 	bic.w	r3, r3, #2
    422c:	6013      	str	r3, [r2, #0]
    422e:	4770      	bx	lr

00004230 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    4230:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    4232:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4234:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4238:	2b02      	cmp	r3, #2
    423a:	d00b      	beq.n	4254 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    423c:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    423e:	f013 0f0c 	tst.w	r3, #12
    4242:	d009      	beq.n	4258 <_tc_timer_set_period+0x28>
    4244:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4246:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    424a:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    424c:	bf04      	itt	eq
    424e:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    4250:	76d1      	strbeq	r1, [r2, #27]
    4252:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4254:	61d1      	str	r1, [r2, #28]
    4256:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    4258:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    425a:	8391      	strh	r1, [r2, #28]
    425c:	4770      	bx	lr

0000425e <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    425e:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    4260:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4262:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4266:	2b02      	cmp	r3, #2
    4268:	d00c      	beq.n	4284 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    426a:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    426c:	f013 0f0c 	tst.w	r3, #12
    4270:	d00a      	beq.n	4288 <_tc_timer_get_period+0x2a>
    4272:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4274:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4278:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    427a:	bf06      	itte	eq
    427c:	7ed0      	ldrbeq	r0, [r2, #27]
    427e:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    4280:	2000      	movne	r0, #0
}
    4282:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    4284:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    4286:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    4288:	8b90      	ldrh	r0, [r2, #28]
    428a:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    428c:	4770      	bx	lr

0000428e <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    428e:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4290:	6913      	ldr	r3, [r2, #16]
    4292:	f013 0f03 	tst.w	r3, #3
    4296:	d1fb      	bne.n	4290 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    4298:	6810      	ldr	r0, [r2, #0]
}
    429a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    429e:	4770      	bx	lr

000042a0 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    42a0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    42a2:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    42a4:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    42a6:	f012 0f01 	tst.w	r2, #1
    42aa:	d100      	bne.n	42ae <tc_interrupt_handler+0xe>
    42ac:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    42ae:	2201      	movs	r2, #1
    42b0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    42b2:	6803      	ldr	r3, [r0, #0]
    42b4:	4798      	blx	r3
	}
}
    42b6:	e7f9      	b.n	42ac <tc_interrupt_handler+0xc>

000042b8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    42b8:	b538      	push	{r3, r4, r5, lr}
    42ba:	4605      	mov	r5, r0
	void *const hw = device->hw;
    42bc:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    42be:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    42c0:	f013 0f01 	tst.w	r3, #1
    42c4:	d004      	beq.n	42d0 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    42c6:	2301      	movs	r3, #1
    42c8:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    42ca:	6803      	ldr	r3, [r0, #0]
    42cc:	b103      	cbz	r3, 42d0 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    42ce:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    42d0:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    42d2:	f013 0f02 	tst.w	r3, #2
    42d6:	d005      	beq.n	42e4 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    42d8:	2302      	movs	r3, #2
    42da:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    42dc:	686b      	ldr	r3, [r5, #4]
    42de:	b10b      	cbz	r3, 42e4 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    42e0:	4628      	mov	r0, r5
    42e2:	4798      	blx	r3
    42e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000042e8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    42e8:	4b11      	ldr	r3, [pc, #68]	; (4330 <_tc_init_irq_param+0x48>)
    42ea:	4298      	cmp	r0, r3
    42ec:	d011      	beq.n	4312 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    42ee:	4b11      	ldr	r3, [pc, #68]	; (4334 <_tc_init_irq_param+0x4c>)
    42f0:	4298      	cmp	r0, r3
    42f2:	d011      	beq.n	4318 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    42f4:	4b10      	ldr	r3, [pc, #64]	; (4338 <_tc_init_irq_param+0x50>)
    42f6:	4298      	cmp	r0, r3
    42f8:	d011      	beq.n	431e <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    42fa:	4b10      	ldr	r3, [pc, #64]	; (433c <_tc_init_irq_param+0x54>)
    42fc:	4298      	cmp	r0, r3
    42fe:	d011      	beq.n	4324 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    4300:	4b0f      	ldr	r3, [pc, #60]	; (4340 <_tc_init_irq_param+0x58>)
    4302:	4298      	cmp	r0, r3
    4304:	d011      	beq.n	432a <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    4306:	4b0f      	ldr	r3, [pc, #60]	; (4344 <_tc_init_irq_param+0x5c>)
    4308:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    430a:	bf04      	itt	eq
    430c:	4b0e      	ldreq	r3, [pc, #56]	; (4348 <_tc_init_irq_param+0x60>)
    430e:	6159      	streq	r1, [r3, #20]
    4310:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    4312:	4b0d      	ldr	r3, [pc, #52]	; (4348 <_tc_init_irq_param+0x60>)
    4314:	6019      	str	r1, [r3, #0]
    4316:	e7f0      	b.n	42fa <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    4318:	4b0b      	ldr	r3, [pc, #44]	; (4348 <_tc_init_irq_param+0x60>)
    431a:	6059      	str	r1, [r3, #4]
    431c:	e7f0      	b.n	4300 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    431e:	4b0a      	ldr	r3, [pc, #40]	; (4348 <_tc_init_irq_param+0x60>)
    4320:	6099      	str	r1, [r3, #8]
    4322:	e7f0      	b.n	4306 <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    4324:	4b08      	ldr	r3, [pc, #32]	; (4348 <_tc_init_irq_param+0x60>)
    4326:	60d9      	str	r1, [r3, #12]
    4328:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    432a:	4b07      	ldr	r3, [pc, #28]	; (4348 <_tc_init_irq_param+0x60>)
    432c:	6119      	str	r1, [r3, #16]
    432e:	4770      	bx	lr
    4330:	40003800 	.word	0x40003800
    4334:	40003c00 	.word	0x40003c00
    4338:	4101a000 	.word	0x4101a000
    433c:	4101c000 	.word	0x4101c000
    4340:	42001400 	.word	0x42001400
    4344:	42001800 	.word	0x42001800
    4348:	20000af8 	.word	0x20000af8

0000434c <get_tc_index>:
{
    434c:	b570      	push	{r4, r5, r6, lr}
    434e:	b086      	sub	sp, #24
    4350:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    4352:	466c      	mov	r4, sp
    4354:	4d18      	ldr	r5, [pc, #96]	; (43b8 <get_tc_index+0x6c>)
    4356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    435a:	e895 0003 	ldmia.w	r5, {r0, r1}
    435e:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    4362:	9b00      	ldr	r3, [sp, #0]
    4364:	42b3      	cmp	r3, r6
    4366:	d021      	beq.n	43ac <get_tc_index+0x60>
    4368:	4631      	mov	r1, r6
    436a:	2301      	movs	r3, #1
    436c:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    4370:	428a      	cmp	r2, r1
    4372:	d01c      	beq.n	43ae <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    4374:	3301      	adds	r3, #1
    4376:	2b06      	cmp	r3, #6
    4378:	d1f8      	bne.n	436c <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    437a:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    437c:	4a0f      	ldr	r2, [pc, #60]	; (43bc <get_tc_index+0x70>)
    437e:	7812      	ldrb	r2, [r2, #0]
    4380:	429a      	cmp	r2, r3
    4382:	d016      	beq.n	43b2 <get_tc_index+0x66>
    4384:	4a0d      	ldr	r2, [pc, #52]	; (43bc <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4386:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    4388:	7d11      	ldrb	r1, [r2, #20]
    438a:	4299      	cmp	r1, r3
    438c:	d012      	beq.n	43b4 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    438e:	3001      	adds	r0, #1
    4390:	b2c0      	uxtb	r0, r0
    4392:	3214      	adds	r2, #20
    4394:	2806      	cmp	r0, #6
    4396:	d1f7      	bne.n	4388 <get_tc_index+0x3c>
	ASSERT(false);
    4398:	f240 2227 	movw	r2, #551	; 0x227
    439c:	4908      	ldr	r1, [pc, #32]	; (43c0 <get_tc_index+0x74>)
    439e:	2000      	movs	r0, #0
    43a0:	4b08      	ldr	r3, [pc, #32]	; (43c4 <get_tc_index+0x78>)
    43a2:	4798      	blx	r3
	return -1;
    43a4:	f04f 30ff 	mov.w	r0, #4294967295
}
    43a8:	b006      	add	sp, #24
    43aa:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    43ac:	2300      	movs	r3, #0
			return i;
    43ae:	b2db      	uxtb	r3, r3
    43b0:	e7e4      	b.n	437c <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    43b2:	2000      	movs	r0, #0
			return i;
    43b4:	b240      	sxtb	r0, r0
    43b6:	e7f7      	b.n	43a8 <get_tc_index+0x5c>
    43b8:	00008c20 	.word	0x00008c20
    43bc:	2000008c 	.word	0x2000008c
    43c0:	00008c38 	.word	0x00008c38
    43c4:	00003301 	.word	0x00003301

000043c8 <_tc_timer_init>:
{
    43c8:	b570      	push	{r4, r5, r6, lr}
    43ca:	4606      	mov	r6, r0
    43cc:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    43ce:	4608      	mov	r0, r1
    43d0:	4b48      	ldr	r3, [pc, #288]	; (44f4 <_tc_timer_init+0x12c>)
    43d2:	4798      	blx	r3
    43d4:	4605      	mov	r5, r0
	device->hw = hw;
    43d6:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    43d8:	22af      	movs	r2, #175	; 0xaf
    43da:	4947      	ldr	r1, [pc, #284]	; (44f8 <_tc_timer_init+0x130>)
    43dc:	2001      	movs	r0, #1
    43de:	4b47      	ldr	r3, [pc, #284]	; (44fc <_tc_timer_init+0x134>)
    43e0:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43e2:	6923      	ldr	r3, [r4, #16]
    43e4:	f013 0f01 	tst.w	r3, #1
    43e8:	d1fb      	bne.n	43e2 <_tc_timer_init+0x1a>
    43ea:	6923      	ldr	r3, [r4, #16]
    43ec:	f013 0f03 	tst.w	r3, #3
    43f0:	d1fb      	bne.n	43ea <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    43f2:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    43f4:	f013 0f02 	tst.w	r3, #2
    43f8:	d175      	bne.n	44e6 <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    43fa:	6923      	ldr	r3, [r4, #16]
    43fc:	f013 0f01 	tst.w	r3, #1
    4400:	d1fb      	bne.n	43fa <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    4402:	6823      	ldr	r3, [r4, #0]
    4404:	f043 0301 	orr.w	r3, r3, #1
    4408:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    440a:	6923      	ldr	r3, [r4, #16]
    440c:	f013 0f01 	tst.w	r3, #1
    4410:	d1fb      	bne.n	440a <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    4412:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4416:	4a3a      	ldr	r2, [pc, #232]	; (4500 <_tc_timer_init+0x138>)
    4418:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    441c:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    441e:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4420:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    4422:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    4424:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    4426:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    4428:	2201      	movs	r2, #1
    442a:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    442c:	685b      	ldr	r3, [r3, #4]
    442e:	f003 030c 	and.w	r3, r3, #12
    4432:	2b08      	cmp	r3, #8
    4434:	d03f      	beq.n	44b6 <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4436:	2b00      	cmp	r3, #0
    4438:	d147      	bne.n	44ca <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    443a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    443e:	4a30      	ldr	r2, [pc, #192]	; (4500 <_tc_timer_init+0x138>)
    4440:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4444:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4446:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    4448:	8a1b      	ldrh	r3, [r3, #16]
    444a:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    444c:	2301      	movs	r3, #1
    444e:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    4450:	4631      	mov	r1, r6
    4452:	4620      	mov	r0, r4
    4454:	4b2b      	ldr	r3, [pc, #172]	; (4504 <_tc_timer_init+0x13c>)
    4456:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    4458:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    445c:	4a28      	ldr	r2, [pc, #160]	; (4500 <_tc_timer_init+0x138>)
    445e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4462:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    4466:	2b00      	cmp	r3, #0
    4468:	db40      	blt.n	44ec <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    446a:	095a      	lsrs	r2, r3, #5
    446c:	f003 031f 	and.w	r3, r3, #31
    4470:	2101      	movs	r1, #1
    4472:	fa01 f303 	lsl.w	r3, r1, r3
    4476:	3220      	adds	r2, #32
    4478:	4923      	ldr	r1, [pc, #140]	; (4508 <_tc_timer_init+0x140>)
    447a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    447e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4482:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4486:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    448a:	4b1d      	ldr	r3, [pc, #116]	; (4500 <_tc_timer_init+0x138>)
    448c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4490:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    4494:	2b00      	cmp	r3, #0
    4496:	db2b      	blt.n	44f0 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4498:	0959      	lsrs	r1, r3, #5
    449a:	f003 031f 	and.w	r3, r3, #31
    449e:	2201      	movs	r2, #1
    44a0:	fa02 f303 	lsl.w	r3, r2, r3
    44a4:	4a18      	ldr	r2, [pc, #96]	; (4508 <_tc_timer_init+0x140>)
    44a6:	f101 0060 	add.w	r0, r1, #96	; 0x60
    44aa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    44ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    44b2:	2000      	movs	r0, #0
    44b4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    44b6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    44ba:	4a11      	ldr	r2, [pc, #68]	; (4500 <_tc_timer_init+0x138>)
    44bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    44c0:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    44c2:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    44c4:	691b      	ldr	r3, [r3, #16]
    44c6:	6223      	str	r3, [r4, #32]
    44c8:	e7c0      	b.n	444c <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    44ca:	2b04      	cmp	r3, #4
    44cc:	d1be      	bne.n	444c <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    44ce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    44d2:	4a0b      	ldr	r2, [pc, #44]	; (4500 <_tc_timer_init+0x138>)
    44d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    44d8:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    44da:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    44dc:	7c1a      	ldrb	r2, [r3, #16]
    44de:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    44e0:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    44e2:	76e3      	strb	r3, [r4, #27]
    44e4:	e7b2      	b.n	444c <_tc_timer_init+0x84>
		return ERR_DENIED;
    44e6:	f06f 0010 	mvn.w	r0, #16
    44ea:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    44ec:	2000      	movs	r0, #0
    44ee:	bd70      	pop	{r4, r5, r6, pc}
    44f0:	2000      	movs	r0, #0
}
    44f2:	bd70      	pop	{r4, r5, r6, pc}
    44f4:	0000434d 	.word	0x0000434d
    44f8:	00008c38 	.word	0x00008c38
    44fc:	00003301 	.word	0x00003301
    4500:	2000008c 	.word	0x2000008c
    4504:	000042e9 	.word	0x000042e9
    4508:	e000e100 	.word	0xe000e100

0000450c <_tc_timer_deinit>:
{
    450c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    450e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    4510:	4620      	mov	r0, r4
    4512:	4b18      	ldr	r3, [pc, #96]	; (4574 <_tc_timer_deinit+0x68>)
    4514:	4798      	blx	r3
    4516:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4518:	f240 1201 	movw	r2, #257	; 0x101
    451c:	4916      	ldr	r1, [pc, #88]	; (4578 <_tc_timer_deinit+0x6c>)
    451e:	2001      	movs	r0, #1
    4520:	4b16      	ldr	r3, [pc, #88]	; (457c <_tc_timer_deinit+0x70>)
    4522:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    4524:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4528:	4b15      	ldr	r3, [pc, #84]	; (4580 <_tc_timer_deinit+0x74>)
    452a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    452e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    4532:	2b00      	cmp	r3, #0
    4534:	db0d      	blt.n	4552 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4536:	095a      	lsrs	r2, r3, #5
    4538:	f003 031f 	and.w	r3, r3, #31
    453c:	2101      	movs	r1, #1
    453e:	fa01 f303 	lsl.w	r3, r1, r3
    4542:	3220      	adds	r2, #32
    4544:	490f      	ldr	r1, [pc, #60]	; (4584 <_tc_timer_deinit+0x78>)
    4546:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    454a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    454e:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4552:	6923      	ldr	r3, [r4, #16]
    4554:	f013 0f03 	tst.w	r3, #3
    4558:	d1fb      	bne.n	4552 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    455a:	6823      	ldr	r3, [r4, #0]
    455c:	f023 0302 	bic.w	r3, r3, #2
    4560:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4562:	6923      	ldr	r3, [r4, #16]
    4564:	f013 0f01 	tst.w	r3, #1
    4568:	d1fb      	bne.n	4562 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    456a:	6823      	ldr	r3, [r4, #0]
    456c:	f043 0301 	orr.w	r3, r3, #1
    4570:	6023      	str	r3, [r4, #0]
    4572:	bd38      	pop	{r3, r4, r5, pc}
    4574:	0000434d 	.word	0x0000434d
    4578:	00008c38 	.word	0x00008c38
    457c:	00003301 	.word	0x00003301
    4580:	2000008c 	.word	0x2000008c
    4584:	e000e100 	.word	0xe000e100

00004588 <_tc_timer_set_irq>:
{
    4588:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    458a:	68c0      	ldr	r0, [r0, #12]
    458c:	4b08      	ldr	r3, [pc, #32]	; (45b0 <_tc_timer_set_irq+0x28>)
    458e:	4798      	blx	r3
    4590:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4592:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    4596:	4907      	ldr	r1, [pc, #28]	; (45b4 <_tc_timer_set_irq+0x2c>)
    4598:	2001      	movs	r0, #1
    459a:	4b07      	ldr	r3, [pc, #28]	; (45b8 <_tc_timer_set_irq+0x30>)
    459c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    459e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    45a2:	4b06      	ldr	r3, [pc, #24]	; (45bc <_tc_timer_set_irq+0x34>)
    45a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    45a8:	78a0      	ldrb	r0, [r4, #2]
    45aa:	4b05      	ldr	r3, [pc, #20]	; (45c0 <_tc_timer_set_irq+0x38>)
    45ac:	4798      	blx	r3
    45ae:	bd10      	pop	{r4, pc}
    45b0:	0000434d 	.word	0x0000434d
    45b4:	00008c38 	.word	0x00008c38
    45b8:	00003301 	.word	0x00003301
    45bc:	2000008c 	.word	0x2000008c
    45c0:	00003625 	.word	0x00003625

000045c4 <_pwm_init>:
{
    45c4:	b570      	push	{r4, r5, r6, lr}
    45c6:	4606      	mov	r6, r0
    45c8:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    45ca:	4608      	mov	r0, r1
    45cc:	4b3f      	ldr	r3, [pc, #252]	; (46cc <_pwm_init+0x108>)
    45ce:	4798      	blx	r3
    45d0:	4605      	mov	r5, r0
	device->hw = hw;
    45d2:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    45d4:	6923      	ldr	r3, [r4, #16]
    45d6:	f013 0f01 	tst.w	r3, #1
    45da:	d1fb      	bne.n	45d4 <_pwm_init+0x10>
    45dc:	6923      	ldr	r3, [r4, #16]
    45de:	f013 0f03 	tst.w	r3, #3
    45e2:	d1fb      	bne.n	45dc <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    45e4:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    45e6:	f013 0f02 	tst.w	r3, #2
    45ea:	d165      	bne.n	46b8 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    45ec:	6923      	ldr	r3, [r4, #16]
    45ee:	f013 0f01 	tst.w	r3, #1
    45f2:	d1fb      	bne.n	45ec <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    45f4:	6823      	ldr	r3, [r4, #0]
    45f6:	f043 0301 	orr.w	r3, r3, #1
    45fa:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    45fc:	6923      	ldr	r3, [r4, #16]
    45fe:	f013 0f01 	tst.w	r3, #1
    4602:	d1fb      	bne.n	45fc <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    4604:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4608:	4a31      	ldr	r2, [pc, #196]	; (46d0 <_pwm_init+0x10c>)
    460a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    460e:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    4610:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4612:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    4614:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    4616:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    4618:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    461a:	2203      	movs	r2, #3
    461c:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    461e:	685b      	ldr	r3, [r3, #4]
    4620:	f003 030c 	and.w	r3, r3, #12
    4624:	2b08      	cmp	r3, #8
    4626:	d03d      	beq.n	46a4 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4628:	2b00      	cmp	r3, #0
    462a:	d148      	bne.n	46be <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    462c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4630:	4a27      	ldr	r2, [pc, #156]	; (46d0 <_pwm_init+0x10c>)
    4632:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4636:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4638:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    463a:	8a1b      	ldrh	r3, [r3, #16]
    463c:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    463e:	4631      	mov	r1, r6
    4640:	4620      	mov	r0, r4
    4642:	4b24      	ldr	r3, [pc, #144]	; (46d4 <_pwm_init+0x110>)
    4644:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    4646:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    464a:	4a21      	ldr	r2, [pc, #132]	; (46d0 <_pwm_init+0x10c>)
    464c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4650:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    4654:	2b00      	cmp	r3, #0
    4656:	db35      	blt.n	46c4 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4658:	095a      	lsrs	r2, r3, #5
    465a:	f003 031f 	and.w	r3, r3, #31
    465e:	2101      	movs	r1, #1
    4660:	fa01 f303 	lsl.w	r3, r1, r3
    4664:	3220      	adds	r2, #32
    4666:	491c      	ldr	r1, [pc, #112]	; (46d8 <_pwm_init+0x114>)
    4668:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    466c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4670:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4674:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4678:	4b15      	ldr	r3, [pc, #84]	; (46d0 <_pwm_init+0x10c>)
    467a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    467e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    4682:	2b00      	cmp	r3, #0
    4684:	db20      	blt.n	46c8 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4686:	0959      	lsrs	r1, r3, #5
    4688:	f003 031f 	and.w	r3, r3, #31
    468c:	2201      	movs	r2, #1
    468e:	fa02 f303 	lsl.w	r3, r2, r3
    4692:	4a11      	ldr	r2, [pc, #68]	; (46d8 <_pwm_init+0x114>)
    4694:	f101 0060 	add.w	r0, r1, #96	; 0x60
    4698:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    469c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    46a0:	2000      	movs	r0, #0
    46a2:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    46a4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    46a8:	4a09      	ldr	r2, [pc, #36]	; (46d0 <_pwm_init+0x10c>)
    46aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    46ae:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    46b0:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    46b2:	691b      	ldr	r3, [r3, #16]
    46b4:	6223      	str	r3, [r4, #32]
    46b6:	e7c2      	b.n	463e <_pwm_init+0x7a>
		return ERR_DENIED;
    46b8:	f06f 0010 	mvn.w	r0, #16
    46bc:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    46be:	f04f 30ff 	mov.w	r0, #4294967295
    46c2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    46c4:	2000      	movs	r0, #0
    46c6:	bd70      	pop	{r4, r5, r6, pc}
    46c8:	2000      	movs	r0, #0
}
    46ca:	bd70      	pop	{r4, r5, r6, pc}
    46cc:	0000434d 	.word	0x0000434d
    46d0:	2000008c 	.word	0x2000008c
    46d4:	000042e9 	.word	0x000042e9
    46d8:	e000e100 	.word	0xe000e100

000046dc <_tc_get_timer>:
}
    46dc:	4800      	ldr	r0, [pc, #0]	; (46e0 <_tc_get_timer+0x4>)
    46de:	4770      	bx	lr
    46e0:	20000104 	.word	0x20000104

000046e4 <_tc_get_pwm>:
}
    46e4:	2000      	movs	r0, #0
    46e6:	4770      	bx	lr

000046e8 <TC0_Handler>:
{
    46e8:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    46ea:	4b02      	ldr	r3, [pc, #8]	; (46f4 <TC0_Handler+0xc>)
    46ec:	6818      	ldr	r0, [r3, #0]
    46ee:	4b02      	ldr	r3, [pc, #8]	; (46f8 <TC0_Handler+0x10>)
    46f0:	4798      	blx	r3
    46f2:	bd08      	pop	{r3, pc}
    46f4:	20000af8 	.word	0x20000af8
    46f8:	000042b9 	.word	0x000042b9

000046fc <TC1_Handler>:
{
    46fc:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    46fe:	4b02      	ldr	r3, [pc, #8]	; (4708 <TC1_Handler+0xc>)
    4700:	6858      	ldr	r0, [r3, #4]
    4702:	4b02      	ldr	r3, [pc, #8]	; (470c <TC1_Handler+0x10>)
    4704:	4798      	blx	r3
    4706:	bd08      	pop	{r3, pc}
    4708:	20000af8 	.word	0x20000af8
    470c:	000042b9 	.word	0x000042b9

00004710 <TC2_Handler>:
{
    4710:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    4712:	4b02      	ldr	r3, [pc, #8]	; (471c <TC2_Handler+0xc>)
    4714:	6898      	ldr	r0, [r3, #8]
    4716:	4b02      	ldr	r3, [pc, #8]	; (4720 <TC2_Handler+0x10>)
    4718:	4798      	blx	r3
    471a:	bd08      	pop	{r3, pc}
    471c:	20000af8 	.word	0x20000af8
    4720:	000042b9 	.word	0x000042b9

00004724 <TC3_Handler>:
{
    4724:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    4726:	4b02      	ldr	r3, [pc, #8]	; (4730 <TC3_Handler+0xc>)
    4728:	68d8      	ldr	r0, [r3, #12]
    472a:	4b02      	ldr	r3, [pc, #8]	; (4734 <TC3_Handler+0x10>)
    472c:	4798      	blx	r3
    472e:	bd08      	pop	{r3, pc}
    4730:	20000af8 	.word	0x20000af8
    4734:	000042a1 	.word	0x000042a1

00004738 <TC4_Handler>:
{
    4738:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    473a:	4b02      	ldr	r3, [pc, #8]	; (4744 <TC4_Handler+0xc>)
    473c:	6918      	ldr	r0, [r3, #16]
    473e:	4b02      	ldr	r3, [pc, #8]	; (4748 <TC4_Handler+0x10>)
    4740:	4798      	blx	r3
    4742:	bd08      	pop	{r3, pc}
    4744:	20000af8 	.word	0x20000af8
    4748:	000042a1 	.word	0x000042a1

0000474c <TC5_Handler>:
{
    474c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    474e:	4b02      	ldr	r3, [pc, #8]	; (4758 <TC5_Handler+0xc>)
    4750:	6958      	ldr	r0, [r3, #20]
    4752:	4b02      	ldr	r3, [pc, #8]	; (475c <TC5_Handler+0x10>)
    4754:	4798      	blx	r3
    4756:	bd08      	pop	{r3, pc}
    4758:	20000af8 	.word	0x20000af8
    475c:	000042a1 	.word	0x000042a1

00004760 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    4760:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4762:	4604      	mov	r4, r0
    4764:	b330      	cbz	r0, 47b4 <_wdt_init+0x54>
    4766:	6800      	ldr	r0, [r0, #0]
    4768:	3000      	adds	r0, #0
    476a:	bf18      	it	ne
    476c:	2001      	movne	r0, #1
    476e:	225a      	movs	r2, #90	; 0x5a
    4770:	4914      	ldr	r1, [pc, #80]	; (47c4 <_wdt_init+0x64>)
    4772:	4b15      	ldr	r3, [pc, #84]	; (47c8 <_wdt_init+0x68>)
    4774:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    4776:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4778:	689a      	ldr	r2, [r3, #8]
    477a:	f012 0f0e 	tst.w	r2, #14
    477e:	d1fb      	bne.n	4778 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4780:	781a      	ldrb	r2, [r3, #0]
    4782:	09d2      	lsrs	r2, r2, #7
    4784:	d118      	bne.n	47b8 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4786:	689a      	ldr	r2, [r3, #8]
    4788:	f012 0f0e 	tst.w	r2, #14
    478c:	d1fb      	bne.n	4786 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    478e:	781a      	ldrb	r2, [r3, #0]
    4790:	f012 0f02 	tst.w	r2, #2
    4794:	d113      	bne.n	47be <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4796:	689a      	ldr	r2, [r3, #8]
    4798:	f012 0f0e 	tst.w	r2, #14
    479c:	d1fb      	bne.n	4796 <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    479e:	781a      	ldrb	r2, [r3, #0]
    47a0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    47a4:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    47a6:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    47a8:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    47aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    47ae:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    47b0:	2000      	movs	r0, #0
    47b2:	bd10      	pop	{r4, pc}
    47b4:	2000      	movs	r0, #0
    47b6:	e7da      	b.n	476e <_wdt_init+0xe>
		return ERR_DENIED;
    47b8:	f06f 0010 	mvn.w	r0, #16
    47bc:	bd10      	pop	{r4, pc}
    47be:	f06f 0010 	mvn.w	r0, #16
}
    47c2:	bd10      	pop	{r4, pc}
    47c4:	00008c4c 	.word	0x00008c4c
    47c8:	00003301 	.word	0x00003301

000047cc <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    47cc:	b570      	push	{r4, r5, r6, lr}
    47ce:	460d      	mov	r5, r1
    47d0:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    47d2:	4606      	mov	r6, r0
    47d4:	2800      	cmp	r0, #0
    47d6:	d044      	beq.n	4862 <_wdt_set_timeout_period+0x96>
    47d8:	6800      	ldr	r0, [r0, #0]
    47da:	3000      	adds	r0, #0
    47dc:	bf18      	it	ne
    47de:	2001      	movne	r0, #1
    47e0:	2284      	movs	r2, #132	; 0x84
    47e2:	493f      	ldr	r1, [pc, #252]	; (48e0 <_wdt_set_timeout_period+0x114>)
    47e4:	4b3f      	ldr	r3, [pc, #252]	; (48e4 <_wdt_set_timeout_period+0x118>)
    47e6:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    47e8:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    47ea:	6893      	ldr	r3, [r2, #8]
    47ec:	f013 0f0e 	tst.w	r3, #14
    47f0:	d1fb      	bne.n	47ea <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    47f2:	7813      	ldrb	r3, [r2, #0]
    47f4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    47f8:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    47fa:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    47fc:	688b      	ldr	r3, [r1, #8]
    47fe:	f013 0f0e 	tst.w	r3, #14
    4802:	d1fb      	bne.n	47fc <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    4804:	780b      	ldrb	r3, [r1, #0]
    4806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    480a:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    480c:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    480e:	6899      	ldr	r1, [r3, #8]
    4810:	f011 0f0e 	tst.w	r1, #14
    4814:	d1fb      	bne.n	480e <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4816:	781a      	ldrb	r2, [r3, #0]
    4818:	09d2      	lsrs	r2, r2, #7
    481a:	d158      	bne.n	48ce <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    481c:	6899      	ldr	r1, [r3, #8]
    481e:	f011 0f0e 	tst.w	r1, #14
    4822:	d1fb      	bne.n	481c <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4824:	781a      	ldrb	r2, [r3, #0]
    4826:	f012 0f02 	tst.w	r2, #2
    482a:	d153      	bne.n	48d4 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    482c:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    4830:	4628      	mov	r0, r5
    4832:	2100      	movs	r1, #0
    4834:	ea50 0201 	orrs.w	r2, r0, r1
    4838:	d14f      	bne.n	48da <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    483a:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    483e:	d038      	beq.n	48b2 <_wdt_set_timeout_period+0xe6>
    4840:	d911      	bls.n	4866 <_wdt_set_timeout_period+0x9a>
    4842:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    4846:	d038      	beq.n	48ba <_wdt_set_timeout_period+0xee>
    4848:	d927      	bls.n	489a <_wdt_set_timeout_period+0xce>
    484a:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    484e:	d038      	beq.n	48c2 <_wdt_set_timeout_period+0xf6>
    4850:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    4854:	d037      	beq.n	48c6 <_wdt_set_timeout_period+0xfa>
    4856:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    485a:	d030      	beq.n	48be <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    485c:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    4860:	bd70      	pop	{r4, r5, r6, pc}
    4862:	2000      	movs	r0, #0
    4864:	e7bc      	b.n	47e0 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    4866:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    486a:	d01e      	beq.n	48aa <_wdt_set_timeout_period+0xde>
    486c:	d80d      	bhi.n	488a <_wdt_set_timeout_period+0xbe>
    486e:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    4872:	d02a      	beq.n	48ca <_wdt_set_timeout_period+0xfe>
    4874:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    4878:	d1f0      	bne.n	485c <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    487a:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    487c:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    487e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    4882:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    4884:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    4886:	2000      	movs	r0, #0
    4888:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    488a:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    488e:	d00e      	beq.n	48ae <_wdt_set_timeout_period+0xe2>
    4890:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    4894:	d1e2      	bne.n	485c <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    4896:	2104      	movs	r1, #4
			break;
    4898:	e7f0      	b.n	487c <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    489a:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    489e:	d00a      	beq.n	48b6 <_wdt_set_timeout_period+0xea>
    48a0:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    48a4:	d1da      	bne.n	485c <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    48a6:	2107      	movs	r1, #7
			break;
    48a8:	e7e8      	b.n	487c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    48aa:	2102      	movs	r1, #2
			break;
    48ac:	e7e6      	b.n	487c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    48ae:	2103      	movs	r1, #3
			break;
    48b0:	e7e4      	b.n	487c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    48b2:	2105      	movs	r1, #5
			break;
    48b4:	e7e2      	b.n	487c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    48b6:	2106      	movs	r1, #6
			break;
    48b8:	e7e0      	b.n	487c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    48ba:	2108      	movs	r1, #8
			break;
    48bc:	e7de      	b.n	487c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    48be:	2109      	movs	r1, #9
			break;
    48c0:	e7dc      	b.n	487c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    48c2:	210a      	movs	r1, #10
			break;
    48c4:	e7da      	b.n	487c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    48c6:	210b      	movs	r1, #11
			break;
    48c8:	e7d8      	b.n	487c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    48ca:	2100      	movs	r1, #0
    48cc:	e7d6      	b.n	487c <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    48ce:	f06f 0010 	mvn.w	r0, #16
    48d2:	bd70      	pop	{r4, r5, r6, pc}
    48d4:	f06f 0010 	mvn.w	r0, #16
    48d8:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    48da:	f06f 000c 	mvn.w	r0, #12
    48de:	bd70      	pop	{r4, r5, r6, pc}
    48e0:	00008c4c 	.word	0x00008c4c
    48e4:	00003301 	.word	0x00003301

000048e8 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    48e8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    48ea:	4604      	mov	r4, r0
    48ec:	b198      	cbz	r0, 4916 <_wdt_enable+0x2e>
    48ee:	6800      	ldr	r0, [r0, #0]
    48f0:	3000      	adds	r0, #0
    48f2:	bf18      	it	ne
    48f4:	2001      	movne	r0, #1
    48f6:	f240 1207 	movw	r2, #263	; 0x107
    48fa:	4908      	ldr	r1, [pc, #32]	; (491c <_wdt_enable+0x34>)
    48fc:	4b08      	ldr	r3, [pc, #32]	; (4920 <_wdt_enable+0x38>)
    48fe:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    4900:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4902:	6893      	ldr	r3, [r2, #8]
    4904:	f013 0f0e 	tst.w	r3, #14
    4908:	d1fb      	bne.n	4902 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    490a:	7813      	ldrb	r3, [r2, #0]
    490c:	f043 0302 	orr.w	r3, r3, #2
    4910:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    4912:	2000      	movs	r0, #0
    4914:	bd10      	pop	{r4, pc}
    4916:	2000      	movs	r0, #0
    4918:	e7ed      	b.n	48f6 <_wdt_enable+0xe>
    491a:	bf00      	nop
    491c:	00008c4c 	.word	0x00008c4c
    4920:	00003301 	.word	0x00003301

00004924 <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    4924:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4926:	4604      	mov	r4, r0
    4928:	b1d0      	cbz	r0, 4960 <_wdt_disable+0x3c>
    492a:	6800      	ldr	r0, [r0, #0]
    492c:	3000      	adds	r0, #0
    492e:	bf18      	it	ne
    4930:	2001      	movne	r0, #1
    4932:	f44f 728a 	mov.w	r2, #276	; 0x114
    4936:	490d      	ldr	r1, [pc, #52]	; (496c <_wdt_disable+0x48>)
    4938:	4b0d      	ldr	r3, [pc, #52]	; (4970 <_wdt_disable+0x4c>)
    493a:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    493c:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    493e:	689a      	ldr	r2, [r3, #8]
    4940:	f012 0f0e 	tst.w	r2, #14
    4944:	d1fb      	bne.n	493e <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4946:	781a      	ldrb	r2, [r3, #0]
    4948:	09d2      	lsrs	r2, r2, #7
    494a:	d10b      	bne.n	4964 <_wdt_disable+0x40>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    494c:	689a      	ldr	r2, [r3, #8]
    494e:	f012 0f0e 	tst.w	r2, #14
    4952:	d1fb      	bne.n	494c <_wdt_disable+0x28>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    4954:	781a      	ldrb	r2, [r3, #0]
    4956:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    495a:	701a      	strb	r2, [r3, #0]
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    495c:	2000      	movs	r0, #0
    495e:	bd10      	pop	{r4, pc}
    4960:	2000      	movs	r0, #0
    4962:	e7e6      	b.n	4932 <_wdt_disable+0xe>
		return ERR_DENIED;
    4964:	f06f 0010 	mvn.w	r0, #16
}
    4968:	bd10      	pop	{r4, pc}
    496a:	bf00      	nop
    496c:	00008c4c 	.word	0x00008c4c
    4970:	00003301 	.word	0x00003301

00004974 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    4974:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4976:	4604      	mov	r4, r0
    4978:	b168      	cbz	r0, 4996 <_wdt_feed+0x22>
    497a:	6800      	ldr	r0, [r0, #0]
    497c:	3000      	adds	r0, #0
    497e:	bf18      	it	ne
    4980:	2001      	movne	r0, #1
    4982:	f240 1225 	movw	r2, #293	; 0x125
    4986:	4905      	ldr	r1, [pc, #20]	; (499c <_wdt_feed+0x28>)
    4988:	4b05      	ldr	r3, [pc, #20]	; (49a0 <_wdt_feed+0x2c>)
    498a:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    498c:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    498e:	22a5      	movs	r2, #165	; 0xa5
    4990:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    4992:	2000      	movs	r0, #0
    4994:	bd10      	pop	{r4, pc}
    4996:	2000      	movs	r0, #0
    4998:	e7f3      	b.n	4982 <_wdt_feed+0xe>
    499a:	bf00      	nop
    499c:	00008c4c 	.word	0x00008c4c
    49a0:	00003301 	.word	0x00003301

000049a4 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    49a4:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    49a6:	2200      	movs	r2, #0
    49a8:	2108      	movs	r1, #8
    49aa:	2001      	movs	r0, #1
    49ac:	4c13      	ldr	r4, [pc, #76]	; (49fc <createQueuesAndSemaphores+0x58>)
    49ae:	47a0      	blx	r4
    49b0:	4d13      	ldr	r5, [pc, #76]	; (4a00 <createQueuesAndSemaphores+0x5c>)
    49b2:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    49b4:	2200      	movs	r2, #0
    49b6:	2101      	movs	r1, #1
    49b8:	4608      	mov	r0, r1
    49ba:	47a0      	blx	r4
    49bc:	4b11      	ldr	r3, [pc, #68]	; (4a04 <createQueuesAndSemaphores+0x60>)
    49be:	6018      	str	r0, [r3, #0]
    CmdResponseQueue   = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    49c0:	2200      	movs	r2, #0
    49c2:	2108      	movs	r1, #8
    49c4:	2001      	movs	r0, #1
    49c6:	47a0      	blx	r4
    49c8:	4b0f      	ldr	r3, [pc, #60]	; (4a08 <createQueuesAndSemaphores+0x64>)
    49ca:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    49cc:	682b      	ldr	r3, [r5, #0]
    49ce:	b1a3      	cbz	r3, 49fa <createQueuesAndSemaphores+0x56>
       (AtReceiveQueue  != NULL) &&
    49d0:	4b0c      	ldr	r3, [pc, #48]	; (4a04 <createQueuesAndSemaphores+0x60>)
    if((AtTransmitQueue != NULL) &&
    49d2:	681b      	ldr	r3, [r3, #0]
    49d4:	b18b      	cbz	r3, 49fa <createQueuesAndSemaphores+0x56>
       (AtReceiveQueue  != NULL) &&
    49d6:	b180      	cbz	r0, 49fa <createQueuesAndSemaphores+0x56>
	   (CmdResponseQueue != NULL))
    {
    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    49d8:	2203      	movs	r2, #3
    49da:	2100      	movs	r1, #0
    49dc:	2001      	movs	r0, #1
    49de:	47a0      	blx	r4
    49e0:	4b0a      	ldr	r3, [pc, #40]	; (4a0c <createQueuesAndSemaphores+0x68>)
    49e2:	6018      	str	r0, [r3, #0]
    	SensorScanSemaphore    = xSemaphoreCreateBinary();
    49e4:	2203      	movs	r2, #3
    49e6:	2100      	movs	r1, #0
    49e8:	2001      	movs	r0, #1
    49ea:	47a0      	blx	r4
    49ec:	4b08      	ldr	r3, [pc, #32]	; (4a10 <createQueuesAndSemaphores+0x6c>)
    49ee:	6018      	str	r0, [r3, #0]
    	DebugPrintMutex        = xSemaphoreCreateMutex();
    49f0:	2001      	movs	r0, #1
    49f2:	4b08      	ldr	r3, [pc, #32]	; (4a14 <createQueuesAndSemaphores+0x70>)
    49f4:	4798      	blx	r3
    49f6:	4b08      	ldr	r3, [pc, #32]	; (4a18 <createQueuesAndSemaphores+0x74>)
    49f8:	6018      	str	r0, [r3, #0]
    }
    else
    {
    	status = false;
    }
}
    49fa:	bd38      	pop	{r3, r4, r5, pc}
    49fc:	000052d9 	.word	0x000052d9
    4a00:	20003490 	.word	0x20003490
    4a04:	200034a4 	.word	0x200034a4
    4a08:	20003470 	.word	0x20003470
    4a0c:	200034a0 	.word	0x200034a0
    4a10:	2000349c 	.word	0x2000349c
    4a14:	0000550d 	.word	0x0000550d
    4a18:	20003498 	.word	0x20003498

00004a1c <main>:
{
    4a1c:	b580      	push	{r7, lr}
    4a1e:	b082      	sub	sp, #8
    atmel_start_init();	
    4a20:	4b28      	ldr	r3, [pc, #160]	; (4ac4 <main+0xa8>)
    4a22:	4798      	blx	r3
    SensorTaskStatus = xTaskCreate( SensorTask, "SensorTask", 150, NULL, 2, &xSensorTaskHandle );
    4a24:	4b28      	ldr	r3, [pc, #160]	; (4ac8 <main+0xac>)
    4a26:	9301      	str	r3, [sp, #4]
    4a28:	2702      	movs	r7, #2
    4a2a:	9700      	str	r7, [sp, #0]
    4a2c:	2300      	movs	r3, #0
    4a2e:	2296      	movs	r2, #150	; 0x96
    4a30:	4926      	ldr	r1, [pc, #152]	; (4acc <main+0xb0>)
    4a32:	4827      	ldr	r0, [pc, #156]	; (4ad0 <main+0xb4>)
    4a34:	4d27      	ldr	r5, [pc, #156]	; (4ad4 <main+0xb8>)
    4a36:	47a8      	blx	r5
    4a38:	4c27      	ldr	r4, [pc, #156]	; (4ad8 <main+0xbc>)
    4a3a:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTxTask", 150, NULL, 1, &xModemTxTaskHandle );
    4a3c:	4b27      	ldr	r3, [pc, #156]	; (4adc <main+0xc0>)
    4a3e:	9301      	str	r3, [sp, #4]
    4a40:	2601      	movs	r6, #1
    4a42:	9600      	str	r6, [sp, #0]
    4a44:	2300      	movs	r3, #0
    4a46:	2296      	movs	r2, #150	; 0x96
    4a48:	4925      	ldr	r1, [pc, #148]	; (4ae0 <main+0xc4>)
    4a4a:	4826      	ldr	r0, [pc, #152]	; (4ae4 <main+0xc8>)
    4a4c:	47a8      	blx	r5
    4a4e:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    4a50:	4b25      	ldr	r3, [pc, #148]	; (4ae8 <main+0xcc>)
    4a52:	9301      	str	r3, [sp, #4]
    4a54:	9700      	str	r7, [sp, #0]
    4a56:	2300      	movs	r3, #0
    4a58:	2296      	movs	r2, #150	; 0x96
    4a5a:	4924      	ldr	r1, [pc, #144]	; (4aec <main+0xd0>)
    4a5c:	4824      	ldr	r0, [pc, #144]	; (4af0 <main+0xd4>)
    4a5e:	47a8      	blx	r5
    4a60:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    4a62:	4b24      	ldr	r3, [pc, #144]	; (4af4 <main+0xd8>)
    4a64:	9301      	str	r3, [sp, #4]
    4a66:	9600      	str	r6, [sp, #0]
    4a68:	2300      	movs	r3, #0
    4a6a:	2296      	movs	r2, #150	; 0x96
    4a6c:	4922      	ldr	r1, [pc, #136]	; (4af8 <main+0xdc>)
    4a6e:	4823      	ldr	r0, [pc, #140]	; (4afc <main+0xe0>)
    4a70:	47a8      	blx	r5
    4a72:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    4a74:	4b22      	ldr	r3, [pc, #136]	; (4b00 <main+0xe4>)
    4a76:	9301      	str	r3, [sp, #4]
    4a78:	9600      	str	r6, [sp, #0]
    4a7a:	2300      	movs	r3, #0
    4a7c:	2296      	movs	r2, #150	; 0x96
    4a7e:	4921      	ldr	r1, [pc, #132]	; (4b04 <main+0xe8>)
    4a80:	4821      	ldr	r0, [pc, #132]	; (4b08 <main+0xec>)
    4a82:	47a8      	blx	r5
    if((SensorTaskStatus == pdPASS) &&
    4a84:	6823      	ldr	r3, [r4, #0]
    4a86:	42b3      	cmp	r3, r6
    4a88:	d006      	beq.n	4a98 <main+0x7c>
    	DEBUG_PRINT("Failed to create tasks");
    4a8a:	4820      	ldr	r0, [pc, #128]	; (4b0c <main+0xf0>)
    4a8c:	4b20      	ldr	r3, [pc, #128]	; (4b10 <main+0xf4>)
    4a8e:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    4a90:	4820      	ldr	r0, [pc, #128]	; (4b14 <main+0xf8>)
    4a92:	4b1f      	ldr	r3, [pc, #124]	; (4b10 <main+0xf4>)
    4a94:	4798      	blx	r3
    4a96:	e7fe      	b.n	4a96 <main+0x7a>
    if((SensorTaskStatus == pdPASS) &&
    4a98:	68e3      	ldr	r3, [r4, #12]
    4a9a:	42b3      	cmp	r3, r6
    4a9c:	d1f5      	bne.n	4a8a <main+0x6e>
       (ModemProcessTaskStatus == pdPASS) &&
    4a9e:	6863      	ldr	r3, [r4, #4]
    4aa0:	42b3      	cmp	r3, r6
    4aa2:	d1f2      	bne.n	4a8a <main+0x6e>
       (ModemTxTaskStatus == pdPASS) &&
    4aa4:	68a3      	ldr	r3, [r4, #8]
    4aa6:	42b3      	cmp	r3, r6
    4aa8:	d1ef      	bne.n	4a8a <main+0x6e>
       (ModemRxTaskStatus == pdPASS) &&
    4aaa:	42b0      	cmp	r0, r6
    4aac:	d1ed      	bne.n	4a8a <main+0x6e>
    	if(false != createQueuesAndSemaphores())
    4aae:	4b1a      	ldr	r3, [pc, #104]	; (4b18 <main+0xfc>)
    4ab0:	4798      	blx	r3
    4ab2:	b110      	cbz	r0, 4aba <main+0x9e>
    		vTaskStartScheduler();
    4ab4:	4b19      	ldr	r3, [pc, #100]	; (4b1c <main+0x100>)
    4ab6:	4798      	blx	r3
    4ab8:	e7ea      	b.n	4a90 <main+0x74>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    4aba:	4819      	ldr	r0, [pc, #100]	; (4b20 <main+0x104>)
    4abc:	4b14      	ldr	r3, [pc, #80]	; (4b10 <main+0xf4>)
    4abe:	4798      	blx	r3
    4ac0:	e7e6      	b.n	4a90 <main+0x74>
    4ac2:	bf00      	nop
    4ac4:	00002701 	.word	0x00002701
    4ac8:	20003494 	.word	0x20003494
    4acc:	00008c64 	.word	0x00008c64
    4ad0:	000005a1 	.word	0x000005a1
    4ad4:	00005b09 	.word	0x00005b09
    4ad8:	20000b10 	.word	0x20000b10
    4adc:	20003474 	.word	0x20003474
    4ae0:	00008c70 	.word	0x00008c70
    4ae4:	0000241d 	.word	0x0000241d
    4ae8:	20003488 	.word	0x20003488
    4aec:	00008c7c 	.word	0x00008c7c
    4af0:	000023c9 	.word	0x000023c9
    4af4:	2000347c 	.word	0x2000347c
    4af8:	00008c88 	.word	0x00008c88
    4afc:	00002201 	.word	0x00002201
    4b00:	20003480 	.word	0x20003480
    4b04:	00008c9c 	.word	0x00008c9c
    4b08:	00001d5d 	.word	0x00001d5d
    4b0c:	00008ccc 	.word	0x00008ccc
    4b10:	000025a9 	.word	0x000025a9
    4b14:	00008ce4 	.word	0x00008ce4
    4b18:	000049a5 	.word	0x000049a5
    4b1c:	00005ce5 	.word	0x00005ce5
    4b20:	00008cac 	.word	0x00008cac

00004b24 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    4b24:	f100 0308 	add.w	r3, r0, #8
    4b28:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    4b2a:	f04f 32ff 	mov.w	r2, #4294967295
    4b2e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    4b30:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    4b32:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    4b34:	2300      	movs	r3, #0
    4b36:	6003      	str	r3, [r0, #0]
    4b38:	4770      	bx	lr

00004b3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4b3a:	2300      	movs	r3, #0
    4b3c:	6103      	str	r3, [r0, #16]
    4b3e:	4770      	bx	lr

00004b40 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    4b40:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    4b42:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    4b44:	689a      	ldr	r2, [r3, #8]
    4b46:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    4b48:	689a      	ldr	r2, [r3, #8]
    4b4a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    4b4c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    4b4e:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    4b50:	6803      	ldr	r3, [r0, #0]
    4b52:	3301      	adds	r3, #1
    4b54:	6003      	str	r3, [r0, #0]
    4b56:	4770      	bx	lr

00004b58 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    4b58:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    4b5a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    4b5c:	f1b5 3fff 	cmp.w	r5, #4294967295
    4b60:	d002      	beq.n	4b68 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    4b62:	f100 0208 	add.w	r2, r0, #8
    4b66:	e002      	b.n	4b6e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    4b68:	6902      	ldr	r2, [r0, #16]
    4b6a:	e004      	b.n	4b76 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    4b6c:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    4b6e:	6853      	ldr	r3, [r2, #4]
    4b70:	681c      	ldr	r4, [r3, #0]
    4b72:	42a5      	cmp	r5, r4
    4b74:	d2fa      	bcs.n	4b6c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    4b76:	6853      	ldr	r3, [r2, #4]
    4b78:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    4b7a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    4b7c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    4b7e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    4b80:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    4b82:	6803      	ldr	r3, [r0, #0]
    4b84:	3301      	adds	r3, #1
    4b86:	6003      	str	r3, [r0, #0]
}
    4b88:	bc30      	pop	{r4, r5}
    4b8a:	4770      	bx	lr

00004b8c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    4b8c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4b8e:	6842      	ldr	r2, [r0, #4]
    4b90:	6881      	ldr	r1, [r0, #8]
    4b92:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4b94:	6882      	ldr	r2, [r0, #8]
    4b96:	6841      	ldr	r1, [r0, #4]
    4b98:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    4b9a:	685a      	ldr	r2, [r3, #4]
    4b9c:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4b9e:	bf04      	itt	eq
    4ba0:	6882      	ldreq	r2, [r0, #8]
    4ba2:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    4ba4:	2200      	movs	r2, #0
    4ba6:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    4ba8:	681a      	ldr	r2, [r3, #0]
    4baa:	3a01      	subs	r2, #1
    4bac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    4bae:	6818      	ldr	r0, [r3, #0]
}
    4bb0:	4770      	bx	lr
	...

00004bb4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    4bb4:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    4bb6:	2300      	movs	r3, #0
    4bb8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    4bba:	4b0d      	ldr	r3, [pc, #52]	; (4bf0 <prvTaskExitError+0x3c>)
    4bbc:	681b      	ldr	r3, [r3, #0]
    4bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
    4bc2:	d008      	beq.n	4bd6 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    4bc4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4bc8:	f383 8811 	msr	BASEPRI, r3
    4bcc:	f3bf 8f6f 	isb	sy
    4bd0:	f3bf 8f4f 	dsb	sy
    4bd4:	e7fe      	b.n	4bd4 <prvTaskExitError+0x20>
    4bd6:	f04f 0380 	mov.w	r3, #128	; 0x80
    4bda:	f383 8811 	msr	BASEPRI, r3
    4bde:	f3bf 8f6f 	isb	sy
    4be2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    4be6:	9b01      	ldr	r3, [sp, #4]
    4be8:	2b00      	cmp	r3, #0
    4bea:	d0fc      	beq.n	4be6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    4bec:	b002      	add	sp, #8
    4bee:	4770      	bx	lr
    4bf0:	20000124 	.word	0x20000124

00004bf4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    4bf4:	4808      	ldr	r0, [pc, #32]	; (4c18 <prvPortStartFirstTask+0x24>)
    4bf6:	6800      	ldr	r0, [r0, #0]
    4bf8:	6800      	ldr	r0, [r0, #0]
    4bfa:	f380 8808 	msr	MSP, r0
    4bfe:	f04f 0000 	mov.w	r0, #0
    4c02:	f380 8814 	msr	CONTROL, r0
    4c06:	b662      	cpsie	i
    4c08:	b661      	cpsie	f
    4c0a:	f3bf 8f4f 	dsb	sy
    4c0e:	f3bf 8f6f 	isb	sy
    4c12:	df00      	svc	0
    4c14:	bf00      	nop
    4c16:	0000      	.short	0x0000
    4c18:	e000ed08 	.word	0xe000ed08

00004c1c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    4c1c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4c2c <vPortEnableVFP+0x10>
    4c20:	6801      	ldr	r1, [r0, #0]
    4c22:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4c26:	6001      	str	r1, [r0, #0]
    4c28:	4770      	bx	lr
    4c2a:	0000      	.short	0x0000
    4c2c:	e000ed88 	.word	0xe000ed88

00004c30 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    4c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4c34:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    4c38:	f021 0101 	bic.w	r1, r1, #1
    4c3c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    4c40:	4b05      	ldr	r3, [pc, #20]	; (4c58 <pxPortInitialiseStack+0x28>)
    4c42:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    4c46:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    4c4a:	f06f 0302 	mvn.w	r3, #2
    4c4e:	f840 3c24 	str.w	r3, [r0, #-36]
}
    4c52:	3844      	subs	r0, #68	; 0x44
    4c54:	4770      	bx	lr
    4c56:	bf00      	nop
    4c58:	00004bb5 	.word	0x00004bb5
    4c5c:	00000000 	.word	0x00000000

00004c60 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    4c60:	4b07      	ldr	r3, [pc, #28]	; (4c80 <pxCurrentTCBConst2>)
    4c62:	6819      	ldr	r1, [r3, #0]
    4c64:	6808      	ldr	r0, [r1, #0]
    4c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c6a:	f380 8809 	msr	PSP, r0
    4c6e:	f3bf 8f6f 	isb	sy
    4c72:	f04f 0000 	mov.w	r0, #0
    4c76:	f380 8811 	msr	BASEPRI, r0
    4c7a:	4770      	bx	lr
    4c7c:	f3af 8000 	nop.w

00004c80 <pxCurrentTCBConst2>:
    4c80:	200033d4 	.word	0x200033d4

00004c84 <vPortEnterCritical>:
    4c84:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c88:	f383 8811 	msr	BASEPRI, r3
    4c8c:	f3bf 8f6f 	isb	sy
    4c90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    4c94:	4a0a      	ldr	r2, [pc, #40]	; (4cc0 <vPortEnterCritical+0x3c>)
    4c96:	6813      	ldr	r3, [r2, #0]
    4c98:	3301      	adds	r3, #1
    4c9a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    4c9c:	2b01      	cmp	r3, #1
    4c9e:	d10d      	bne.n	4cbc <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    4ca0:	4b08      	ldr	r3, [pc, #32]	; (4cc4 <vPortEnterCritical+0x40>)
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	f013 0fff 	tst.w	r3, #255	; 0xff
    4ca8:	d008      	beq.n	4cbc <vPortEnterCritical+0x38>
    4caa:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cae:	f383 8811 	msr	BASEPRI, r3
    4cb2:	f3bf 8f6f 	isb	sy
    4cb6:	f3bf 8f4f 	dsb	sy
    4cba:	e7fe      	b.n	4cba <vPortEnterCritical+0x36>
    4cbc:	4770      	bx	lr
    4cbe:	bf00      	nop
    4cc0:	20000124 	.word	0x20000124
    4cc4:	e000ed04 	.word	0xe000ed04

00004cc8 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    4cc8:	4b09      	ldr	r3, [pc, #36]	; (4cf0 <vPortExitCritical+0x28>)
    4cca:	681b      	ldr	r3, [r3, #0]
    4ccc:	b943      	cbnz	r3, 4ce0 <vPortExitCritical+0x18>
    4cce:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cd2:	f383 8811 	msr	BASEPRI, r3
    4cd6:	f3bf 8f6f 	isb	sy
    4cda:	f3bf 8f4f 	dsb	sy
    4cde:	e7fe      	b.n	4cde <vPortExitCritical+0x16>
	uxCriticalNesting--;
    4ce0:	3b01      	subs	r3, #1
    4ce2:	4a03      	ldr	r2, [pc, #12]	; (4cf0 <vPortExitCritical+0x28>)
    4ce4:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    4ce6:	b90b      	cbnz	r3, 4cec <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4ce8:	f383 8811 	msr	BASEPRI, r3
    4cec:	4770      	bx	lr
    4cee:	bf00      	nop
    4cf0:	20000124 	.word	0x20000124
	...

00004d00 <PendSV_Handler>:
	__asm volatile(
    4d00:	f3ef 8009 	mrs	r0, PSP
    4d04:	f3bf 8f6f 	isb	sy
    4d08:	4b15      	ldr	r3, [pc, #84]	; (4d60 <pxCurrentTCBConst>)
    4d0a:	681a      	ldr	r2, [r3, #0]
    4d0c:	f01e 0f10 	tst.w	lr, #16
    4d10:	bf08      	it	eq
    4d12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4d16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d1a:	6010      	str	r0, [r2, #0]
    4d1c:	e92d 0009 	stmdb	sp!, {r0, r3}
    4d20:	f04f 0080 	mov.w	r0, #128	; 0x80
    4d24:	f380 8811 	msr	BASEPRI, r0
    4d28:	f3bf 8f4f 	dsb	sy
    4d2c:	f3bf 8f6f 	isb	sy
    4d30:	f001 f972 	bl	6018 <vTaskSwitchContext>
    4d34:	f04f 0000 	mov.w	r0, #0
    4d38:	f380 8811 	msr	BASEPRI, r0
    4d3c:	bc09      	pop	{r0, r3}
    4d3e:	6819      	ldr	r1, [r3, #0]
    4d40:	6808      	ldr	r0, [r1, #0]
    4d42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d46:	f01e 0f10 	tst.w	lr, #16
    4d4a:	bf08      	it	eq
    4d4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4d50:	f380 8809 	msr	PSP, r0
    4d54:	f3bf 8f6f 	isb	sy
    4d58:	4770      	bx	lr
    4d5a:	bf00      	nop
    4d5c:	f3af 8000 	nop.w

00004d60 <pxCurrentTCBConst>:
    4d60:	200033d4 	.word	0x200033d4

00004d64 <SysTick_Handler>:
{
    4d64:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    4d66:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d6a:	f383 8811 	msr	BASEPRI, r3
    4d6e:	f3bf 8f6f 	isb	sy
    4d72:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    4d76:	4b05      	ldr	r3, [pc, #20]	; (4d8c <SysTick_Handler+0x28>)
    4d78:	4798      	blx	r3
    4d7a:	b118      	cbz	r0, 4d84 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    4d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4d80:	4b03      	ldr	r3, [pc, #12]	; (4d90 <SysTick_Handler+0x2c>)
    4d82:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4d84:	2300      	movs	r3, #0
    4d86:	f383 8811 	msr	BASEPRI, r3
    4d8a:	bd08      	pop	{r3, pc}
    4d8c:	00005d8d 	.word	0x00005d8d
    4d90:	e000ed04 	.word	0xe000ed04

00004d94 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    4d94:	4b05      	ldr	r3, [pc, #20]	; (4dac <vPortSetupTimerInterrupt+0x18>)
    4d96:	2200      	movs	r2, #0
    4d98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    4d9a:	4905      	ldr	r1, [pc, #20]	; (4db0 <vPortSetupTimerInterrupt+0x1c>)
    4d9c:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    4d9e:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    4da2:	4a04      	ldr	r2, [pc, #16]	; (4db4 <vPortSetupTimerInterrupt+0x20>)
    4da4:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    4da6:	2207      	movs	r2, #7
    4da8:	601a      	str	r2, [r3, #0]
    4daa:	4770      	bx	lr
    4dac:	e000e010 	.word	0xe000e010
    4db0:	e000e018 	.word	0xe000e018
    4db4:	e000e014 	.word	0xe000e014

00004db8 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    4db8:	4b3b      	ldr	r3, [pc, #236]	; (4ea8 <xPortStartScheduler+0xf0>)
    4dba:	681a      	ldr	r2, [r3, #0]
    4dbc:	4b3b      	ldr	r3, [pc, #236]	; (4eac <xPortStartScheduler+0xf4>)
    4dbe:	429a      	cmp	r2, r3
    4dc0:	d108      	bne.n	4dd4 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    4dc2:	f04f 0380 	mov.w	r3, #128	; 0x80
    4dc6:	f383 8811 	msr	BASEPRI, r3
    4dca:	f3bf 8f6f 	isb	sy
    4dce:	f3bf 8f4f 	dsb	sy
    4dd2:	e7fe      	b.n	4dd2 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    4dd4:	4b34      	ldr	r3, [pc, #208]	; (4ea8 <xPortStartScheduler+0xf0>)
    4dd6:	681a      	ldr	r2, [r3, #0]
    4dd8:	4b35      	ldr	r3, [pc, #212]	; (4eb0 <xPortStartScheduler+0xf8>)
    4dda:	429a      	cmp	r2, r3
    4ddc:	d108      	bne.n	4df0 <xPortStartScheduler+0x38>
    4dde:	f04f 0380 	mov.w	r3, #128	; 0x80
    4de2:	f383 8811 	msr	BASEPRI, r3
    4de6:	f3bf 8f6f 	isb	sy
    4dea:	f3bf 8f4f 	dsb	sy
    4dee:	e7fe      	b.n	4dee <xPortStartScheduler+0x36>
{
    4df0:	b510      	push	{r4, lr}
    4df2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    4df4:	4b2f      	ldr	r3, [pc, #188]	; (4eb4 <xPortStartScheduler+0xfc>)
    4df6:	781a      	ldrb	r2, [r3, #0]
    4df8:	b2d2      	uxtb	r2, r2
    4dfa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    4dfc:	22ff      	movs	r2, #255	; 0xff
    4dfe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    4e00:	781b      	ldrb	r3, [r3, #0]
    4e02:	b2db      	uxtb	r3, r3
    4e04:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    4e08:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4e0c:	4a2a      	ldr	r2, [pc, #168]	; (4eb8 <xPortStartScheduler+0x100>)
    4e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4e12:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    4e14:	2307      	movs	r3, #7
    4e16:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4e18:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4e1c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4e20:	d012      	beq.n	4e48 <xPortStartScheduler+0x90>
    4e22:	2306      	movs	r3, #6
    4e24:	e000      	b.n	4e28 <xPortStartScheduler+0x70>
    4e26:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    4e28:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4e2c:	0052      	lsls	r2, r2, #1
    4e2e:	b2d2      	uxtb	r2, r2
    4e30:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4e34:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4e38:	1e59      	subs	r1, r3, #1
    4e3a:	f012 0f80 	tst.w	r2, #128	; 0x80
    4e3e:	d1f2      	bne.n	4e26 <xPortStartScheduler+0x6e>
    4e40:	4a1d      	ldr	r2, [pc, #116]	; (4eb8 <xPortStartScheduler+0x100>)
    4e42:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    4e44:	2b04      	cmp	r3, #4
    4e46:	d008      	beq.n	4e5a <xPortStartScheduler+0xa2>
    4e48:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e4c:	f383 8811 	msr	BASEPRI, r3
    4e50:	f3bf 8f6f 	isb	sy
    4e54:	f3bf 8f4f 	dsb	sy
    4e58:	e7fe      	b.n	4e58 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    4e5a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    4e5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4e60:	4a15      	ldr	r2, [pc, #84]	; (4eb8 <xPortStartScheduler+0x100>)
    4e62:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    4e64:	9b01      	ldr	r3, [sp, #4]
    4e66:	b2db      	uxtb	r3, r3
    4e68:	4a12      	ldr	r2, [pc, #72]	; (4eb4 <xPortStartScheduler+0xfc>)
    4e6a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    4e6c:	4b13      	ldr	r3, [pc, #76]	; (4ebc <xPortStartScheduler+0x104>)
    4e6e:	681a      	ldr	r2, [r3, #0]
    4e70:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    4e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    4e76:	681a      	ldr	r2, [r3, #0]
    4e78:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    4e7c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    4e7e:	4b10      	ldr	r3, [pc, #64]	; (4ec0 <xPortStartScheduler+0x108>)
    4e80:	4798      	blx	r3
	uxCriticalNesting = 0;
    4e82:	2400      	movs	r4, #0
    4e84:	4b0f      	ldr	r3, [pc, #60]	; (4ec4 <xPortStartScheduler+0x10c>)
    4e86:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    4e88:	4b0f      	ldr	r3, [pc, #60]	; (4ec8 <xPortStartScheduler+0x110>)
    4e8a:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    4e8c:	4a0f      	ldr	r2, [pc, #60]	; (4ecc <xPortStartScheduler+0x114>)
    4e8e:	6813      	ldr	r3, [r2, #0]
    4e90:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4e94:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    4e96:	4b0e      	ldr	r3, [pc, #56]	; (4ed0 <xPortStartScheduler+0x118>)
    4e98:	4798      	blx	r3
	vTaskSwitchContext();
    4e9a:	4b0e      	ldr	r3, [pc, #56]	; (4ed4 <xPortStartScheduler+0x11c>)
    4e9c:	4798      	blx	r3
	prvTaskExitError();
    4e9e:	4b0e      	ldr	r3, [pc, #56]	; (4ed8 <xPortStartScheduler+0x120>)
    4ea0:	4798      	blx	r3
}
    4ea2:	4620      	mov	r0, r4
    4ea4:	b002      	add	sp, #8
    4ea6:	bd10      	pop	{r4, pc}
    4ea8:	e000ed00 	.word	0xe000ed00
    4eac:	410fc271 	.word	0x410fc271
    4eb0:	410fc270 	.word	0x410fc270
    4eb4:	e000e400 	.word	0xe000e400
    4eb8:	20000b20 	.word	0x20000b20
    4ebc:	e000ed20 	.word	0xe000ed20
    4ec0:	00004d95 	.word	0x00004d95
    4ec4:	20000124 	.word	0x20000124
    4ec8:	00004c1d 	.word	0x00004c1d
    4ecc:	e000ef34 	.word	0xe000ef34
    4ed0:	00004bf5 	.word	0x00004bf5
    4ed4:	00006019 	.word	0x00006019
    4ed8:	00004bb5 	.word	0x00004bb5

00004edc <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    4edc:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    4ee0:	2b0f      	cmp	r3, #15
    4ee2:	d90f      	bls.n	4f04 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    4ee4:	4a10      	ldr	r2, [pc, #64]	; (4f28 <vPortValidateInterruptPriority+0x4c>)
    4ee6:	5c9b      	ldrb	r3, [r3, r2]
    4ee8:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    4eea:	4a10      	ldr	r2, [pc, #64]	; (4f2c <vPortValidateInterruptPriority+0x50>)
    4eec:	7812      	ldrb	r2, [r2, #0]
    4eee:	429a      	cmp	r2, r3
    4ef0:	d908      	bls.n	4f04 <vPortValidateInterruptPriority+0x28>
    4ef2:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ef6:	f383 8811 	msr	BASEPRI, r3
    4efa:	f3bf 8f6f 	isb	sy
    4efe:	f3bf 8f4f 	dsb	sy
    4f02:	e7fe      	b.n	4f02 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    4f04:	4b0a      	ldr	r3, [pc, #40]	; (4f30 <vPortValidateInterruptPriority+0x54>)
    4f06:	681b      	ldr	r3, [r3, #0]
    4f08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4f0c:	4a07      	ldr	r2, [pc, #28]	; (4f2c <vPortValidateInterruptPriority+0x50>)
    4f0e:	6852      	ldr	r2, [r2, #4]
    4f10:	4293      	cmp	r3, r2
    4f12:	d908      	bls.n	4f26 <vPortValidateInterruptPriority+0x4a>
    4f14:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f18:	f383 8811 	msr	BASEPRI, r3
    4f1c:	f3bf 8f6f 	isb	sy
    4f20:	f3bf 8f4f 	dsb	sy
    4f24:	e7fe      	b.n	4f24 <vPortValidateInterruptPriority+0x48>
    4f26:	4770      	bx	lr
    4f28:	e000e3f0 	.word	0xe000e3f0
    4f2c:	20000b20 	.word	0x20000b20
    4f30:	e000ed0c 	.word	0xe000ed0c

00004f34 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4f34:	b570      	push	{r4, r5, r6, lr}
    4f36:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    4f38:	4b2d      	ldr	r3, [pc, #180]	; (4ff0 <pvPortMalloc+0xbc>)
    4f3a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4f3c:	4b2d      	ldr	r3, [pc, #180]	; (4ff4 <pvPortMalloc+0xc0>)
    4f3e:	689b      	ldr	r3, [r3, #8]
    4f40:	b183      	cbz	r3, 4f64 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    4f42:	2c00      	cmp	r4, #0
    4f44:	d04d      	beq.n	4fe2 <pvPortMalloc+0xae>
		{
			xWantedSize += heapSTRUCT_SIZE;
    4f46:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    4f48:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    4f4c:	bf1c      	itt	ne
    4f4e:	f024 0407 	bicne.w	r4, r4, #7
    4f52:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    4f54:	1e62      	subs	r2, r4, #1
    4f56:	f242 73f6 	movw	r3, #10230	; 0x27f6
    4f5a:	429a      	cmp	r2, r3
    4f5c:	d843      	bhi.n	4fe6 <pvPortMalloc+0xb2>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    4f5e:	4925      	ldr	r1, [pc, #148]	; (4ff4 <pvPortMalloc+0xc0>)
    4f60:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    4f62:	e017      	b.n	4f94 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    4f64:	4923      	ldr	r1, [pc, #140]	; (4ff4 <pvPortMalloc+0xc0>)
    4f66:	f101 0314 	add.w	r3, r1, #20
    4f6a:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    4f6e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    4f70:	2500      	movs	r5, #0
    4f72:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    4f74:	4a20      	ldr	r2, [pc, #128]	; (4ff8 <pvPortMalloc+0xc4>)
    4f76:	f242 70f8 	movw	r0, #10232	; 0x27f8
    4f7a:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    4f7e:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    4f82:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    4f84:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    4f88:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    4f8a:	2301      	movs	r3, #1
    4f8c:	608b      	str	r3, [r1, #8]
    4f8e:	e7d8      	b.n	4f42 <pvPortMalloc+0xe>
    4f90:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    4f92:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    4f94:	685a      	ldr	r2, [r3, #4]
    4f96:	4294      	cmp	r4, r2
    4f98:	d902      	bls.n	4fa0 <pvPortMalloc+0x6c>
    4f9a:	681a      	ldr	r2, [r3, #0]
    4f9c:	2a00      	cmp	r2, #0
    4f9e:	d1f7      	bne.n	4f90 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    4fa0:	4a16      	ldr	r2, [pc, #88]	; (4ffc <pvPortMalloc+0xc8>)
    4fa2:	4293      	cmp	r3, r2
    4fa4:	d021      	beq.n	4fea <pvPortMalloc+0xb6>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    4fa6:	680d      	ldr	r5, [r1, #0]
    4fa8:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    4faa:	681a      	ldr	r2, [r3, #0]
    4fac:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    4fae:	685a      	ldr	r2, [r3, #4]
    4fb0:	1b12      	subs	r2, r2, r4
    4fb2:	2a10      	cmp	r2, #16
    4fb4:	d90c      	bls.n	4fd0 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    4fb6:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    4fb8:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    4fba:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    4fbc:	6874      	ldr	r4, [r6, #4]
    4fbe:	490d      	ldr	r1, [pc, #52]	; (4ff4 <pvPortMalloc+0xc0>)
    4fc0:	e000      	b.n	4fc4 <pvPortMalloc+0x90>
    4fc2:	4611      	mov	r1, r2
    4fc4:	680a      	ldr	r2, [r1, #0]
    4fc6:	6850      	ldr	r0, [r2, #4]
    4fc8:	4284      	cmp	r4, r0
    4fca:	d8fa      	bhi.n	4fc2 <pvPortMalloc+0x8e>
    4fcc:	6032      	str	r2, [r6, #0]
    4fce:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    4fd0:	490b      	ldr	r1, [pc, #44]	; (5000 <pvPortMalloc+0xcc>)
    4fd2:	680a      	ldr	r2, [r1, #0]
    4fd4:	685b      	ldr	r3, [r3, #4]
    4fd6:	1ad2      	subs	r2, r2, r3
    4fd8:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    4fda:	4b0a      	ldr	r3, [pc, #40]	; (5004 <pvPortMalloc+0xd0>)
    4fdc:	4798      	blx	r3
}
    4fde:	4628      	mov	r0, r5
    4fe0:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
    4fe2:	2500      	movs	r5, #0
    4fe4:	e7f9      	b.n	4fda <pvPortMalloc+0xa6>
    4fe6:	2500      	movs	r5, #0
    4fe8:	e7f7      	b.n	4fda <pvPortMalloc+0xa6>
    4fea:	2500      	movs	r5, #0
    4fec:	e7f5      	b.n	4fda <pvPortMalloc+0xa6>
    4fee:	bf00      	nop
    4ff0:	00005d6d 	.word	0x00005d6d
    4ff4:	20000b28 	.word	0x20000b28
    4ff8:	20002d18 	.word	0x20002d18
    4ffc:	20003334 	.word	0x20003334
    5000:	20000128 	.word	0x20000128
    5004:	00005eb5 	.word	0x00005eb5

00005008 <vPortFree>:
	if( pv != NULL )
    5008:	b1d0      	cbz	r0, 5040 <vPortFree+0x38>
{
    500a:	b570      	push	{r4, r5, r6, lr}
    500c:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    500e:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    5012:	4b0c      	ldr	r3, [pc, #48]	; (5044 <vPortFree+0x3c>)
    5014:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    5016:	f855 4c04 	ldr.w	r4, [r5, #-4]
    501a:	4a0b      	ldr	r2, [pc, #44]	; (5048 <vPortFree+0x40>)
    501c:	e000      	b.n	5020 <vPortFree+0x18>
    501e:	461a      	mov	r2, r3
    5020:	6813      	ldr	r3, [r2, #0]
    5022:	6859      	ldr	r1, [r3, #4]
    5024:	428c      	cmp	r4, r1
    5026:	d8fa      	bhi.n	501e <vPortFree+0x16>
    5028:	f845 3c08 	str.w	r3, [r5, #-8]
    502c:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    502e:	4a07      	ldr	r2, [pc, #28]	; (504c <vPortFree+0x44>)
    5030:	f855 3c04 	ldr.w	r3, [r5, #-4]
    5034:	6811      	ldr	r1, [r2, #0]
    5036:	440b      	add	r3, r1
    5038:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    503a:	4b05      	ldr	r3, [pc, #20]	; (5050 <vPortFree+0x48>)
    503c:	4798      	blx	r3
    503e:	bd70      	pop	{r4, r5, r6, pc}
    5040:	4770      	bx	lr
    5042:	bf00      	nop
    5044:	00005d6d 	.word	0x00005d6d
    5048:	20000b28 	.word	0x20000b28
    504c:	20000128 	.word	0x20000128
    5050:	00005eb5 	.word	0x00005eb5

00005054 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    5054:	b510      	push	{r4, lr}
    5056:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    5058:	4b04      	ldr	r3, [pc, #16]	; (506c <prvIsQueueEmpty+0x18>)
    505a:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    505c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    505e:	4b04      	ldr	r3, [pc, #16]	; (5070 <prvIsQueueEmpty+0x1c>)
    5060:	4798      	blx	r3

	return xReturn;
}
    5062:	fab4 f084 	clz	r0, r4
    5066:	0940      	lsrs	r0, r0, #5
    5068:	bd10      	pop	{r4, pc}
    506a:	bf00      	nop
    506c:	00004c85 	.word	0x00004c85
    5070:	00004cc9 	.word	0x00004cc9

00005074 <prvCopyDataToQueue>:
{
    5074:	b570      	push	{r4, r5, r6, lr}
    5076:	4604      	mov	r4, r0
    5078:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    507a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    507c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    507e:	b952      	cbnz	r2, 5096 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    5080:	6803      	ldr	r3, [r0, #0]
    5082:	2b00      	cmp	r3, #0
    5084:	d12a      	bne.n	50dc <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    5086:	6840      	ldr	r0, [r0, #4]
    5088:	4b18      	ldr	r3, [pc, #96]	; (50ec <prvCopyDataToQueue+0x78>)
    508a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    508c:	2300      	movs	r3, #0
    508e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    5090:	3501      	adds	r5, #1
    5092:	63a5      	str	r5, [r4, #56]	; 0x38
}
    5094:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    5096:	b96e      	cbnz	r6, 50b4 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    5098:	6880      	ldr	r0, [r0, #8]
    509a:	4b15      	ldr	r3, [pc, #84]	; (50f0 <prvCopyDataToQueue+0x7c>)
    509c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    509e:	68a3      	ldr	r3, [r4, #8]
    50a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
    50a2:	4413      	add	r3, r2
    50a4:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    50a6:	6862      	ldr	r2, [r4, #4]
    50a8:	4293      	cmp	r3, r2
    50aa:	d319      	bcc.n	50e0 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    50ac:	6823      	ldr	r3, [r4, #0]
    50ae:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    50b0:	2000      	movs	r0, #0
    50b2:	e7ed      	b.n	5090 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    50b4:	68c0      	ldr	r0, [r0, #12]
    50b6:	4b0e      	ldr	r3, [pc, #56]	; (50f0 <prvCopyDataToQueue+0x7c>)
    50b8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    50ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    50bc:	425b      	negs	r3, r3
    50be:	68e2      	ldr	r2, [r4, #12]
    50c0:	441a      	add	r2, r3
    50c2:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    50c4:	6821      	ldr	r1, [r4, #0]
    50c6:	428a      	cmp	r2, r1
    50c8:	d202      	bcs.n	50d0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    50ca:	6862      	ldr	r2, [r4, #4]
    50cc:	4413      	add	r3, r2
    50ce:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    50d0:	2e02      	cmp	r6, #2
    50d2:	d107      	bne.n	50e4 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    50d4:	b145      	cbz	r5, 50e8 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    50d6:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    50d8:	2000      	movs	r0, #0
    50da:	e7d9      	b.n	5090 <prvCopyDataToQueue+0x1c>
    50dc:	2000      	movs	r0, #0
    50de:	e7d7      	b.n	5090 <prvCopyDataToQueue+0x1c>
    50e0:	2000      	movs	r0, #0
    50e2:	e7d5      	b.n	5090 <prvCopyDataToQueue+0x1c>
    50e4:	2000      	movs	r0, #0
    50e6:	e7d3      	b.n	5090 <prvCopyDataToQueue+0x1c>
    50e8:	2000      	movs	r0, #0
    50ea:	e7d1      	b.n	5090 <prvCopyDataToQueue+0x1c>
    50ec:	00006359 	.word	0x00006359
    50f0:	00006b1b 	.word	0x00006b1b

000050f4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    50f4:	b570      	push	{r4, r5, r6, lr}
    50f6:	b082      	sub	sp, #8
    50f8:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    50fa:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    50fc:	b164      	cbz	r4, 5118 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    50fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5100:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5102:	429a      	cmp	r2, r3
    5104:	d311      	bcc.n	512a <prvNotifyQueueSetContainer+0x36>
    5106:	f04f 0380 	mov.w	r3, #128	; 0x80
    510a:	f383 8811 	msr	BASEPRI, r3
    510e:	f3bf 8f6f 	isb	sy
    5112:	f3bf 8f4f 	dsb	sy
    5116:	e7fe      	b.n	5116 <prvNotifyQueueSetContainer+0x22>
    5118:	f04f 0380 	mov.w	r3, #128	; 0x80
    511c:	f383 8811 	msr	BASEPRI, r3
    5120:	f3bf 8f6f 	isb	sy
    5124:	f3bf 8f4f 	dsb	sy
    5128:	e7fe      	b.n	5128 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    512a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    512c:	4293      	cmp	r3, r2
    512e:	d803      	bhi.n	5138 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    5130:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    5132:	4630      	mov	r0, r6
    5134:	b002      	add	sp, #8
    5136:	bd70      	pop	{r4, r5, r6, pc}
    5138:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    513a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    513e:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    5140:	a901      	add	r1, sp, #4
    5142:	4620      	mov	r0, r4
    5144:	4b0a      	ldr	r3, [pc, #40]	; (5170 <prvNotifyQueueSetContainer+0x7c>)
    5146:	4798      	blx	r3
    5148:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    514a:	f1b5 3fff 	cmp.w	r5, #4294967295
    514e:	d10a      	bne.n	5166 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    5150:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5152:	2b00      	cmp	r3, #0
    5154:	d0ed      	beq.n	5132 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    5156:	f104 0024 	add.w	r0, r4, #36	; 0x24
    515a:	4b06      	ldr	r3, [pc, #24]	; (5174 <prvNotifyQueueSetContainer+0x80>)
    515c:	4798      	blx	r3
    515e:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    5160:	bf18      	it	ne
    5162:	2601      	movne	r6, #1
    5164:	e7e5      	b.n	5132 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    5166:	1c6b      	adds	r3, r5, #1
    5168:	b25b      	sxtb	r3, r3
    516a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    516e:	e7e0      	b.n	5132 <prvNotifyQueueSetContainer+0x3e>
    5170:	00005075 	.word	0x00005075
    5174:	00006155 	.word	0x00006155

00005178 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    5178:	6c02      	ldr	r2, [r0, #64]	; 0x40
    517a:	b172      	cbz	r2, 519a <prvCopyDataFromQueue+0x22>
{
    517c:	b510      	push	{r4, lr}
    517e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    5180:	68c4      	ldr	r4, [r0, #12]
    5182:	4414      	add	r4, r2
    5184:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    5186:	6840      	ldr	r0, [r0, #4]
    5188:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    518a:	bf24      	itt	cs
    518c:	6818      	ldrcs	r0, [r3, #0]
    518e:	60d8      	strcs	r0, [r3, #12]
    5190:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    5192:	68d9      	ldr	r1, [r3, #12]
    5194:	4b01      	ldr	r3, [pc, #4]	; (519c <prvCopyDataFromQueue+0x24>)
    5196:	4798      	blx	r3
    5198:	bd10      	pop	{r4, pc}
    519a:	4770      	bx	lr
    519c:	00006b1b 	.word	0x00006b1b

000051a0 <prvUnlockQueue>:
{
    51a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51a4:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    51a6:	4b23      	ldr	r3, [pc, #140]	; (5234 <prvUnlockQueue+0x94>)
    51a8:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    51aa:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    51ae:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    51b0:	2c00      	cmp	r4, #0
    51b2:	dd19      	ble.n	51e8 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    51b4:	4e20      	ldr	r6, [pc, #128]	; (5238 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    51b6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 5244 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    51ba:	4f20      	ldr	r7, [pc, #128]	; (523c <prvUnlockQueue+0x9c>)
    51bc:	e008      	b.n	51d0 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    51be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    51c0:	b193      	cbz	r3, 51e8 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    51c2:	f105 0024 	add.w	r0, r5, #36	; 0x24
    51c6:	47b8      	blx	r7
    51c8:	b960      	cbnz	r0, 51e4 <prvUnlockQueue+0x44>
    51ca:	3c01      	subs	r4, #1
    51cc:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    51ce:	b15c      	cbz	r4, 51e8 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    51d0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    51d2:	2b00      	cmp	r3, #0
    51d4:	d0f3      	beq.n	51be <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    51d6:	2100      	movs	r1, #0
    51d8:	4628      	mov	r0, r5
    51da:	47b0      	blx	r6
    51dc:	2800      	cmp	r0, #0
    51de:	d0f4      	beq.n	51ca <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    51e0:	47c0      	blx	r8
    51e2:	e7f2      	b.n	51ca <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    51e4:	47c0      	blx	r8
    51e6:	e7f0      	b.n	51ca <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    51e8:	23ff      	movs	r3, #255	; 0xff
    51ea:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    51ee:	4b14      	ldr	r3, [pc, #80]	; (5240 <prvUnlockQueue+0xa0>)
    51f0:	4798      	blx	r3
	taskENTER_CRITICAL();
    51f2:	4b10      	ldr	r3, [pc, #64]	; (5234 <prvUnlockQueue+0x94>)
    51f4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    51f6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    51fa:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    51fc:	2c00      	cmp	r4, #0
    51fe:	dd12      	ble.n	5226 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5200:	692b      	ldr	r3, [r5, #16]
    5202:	b183      	cbz	r3, 5226 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5204:	f105 0710 	add.w	r7, r5, #16
    5208:	4e0c      	ldr	r6, [pc, #48]	; (523c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    520a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 5244 <prvUnlockQueue+0xa4>
    520e:	e004      	b.n	521a <prvUnlockQueue+0x7a>
    5210:	3c01      	subs	r4, #1
    5212:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    5214:	b13c      	cbz	r4, 5226 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5216:	692b      	ldr	r3, [r5, #16]
    5218:	b12b      	cbz	r3, 5226 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    521a:	4638      	mov	r0, r7
    521c:	47b0      	blx	r6
    521e:	2800      	cmp	r0, #0
    5220:	d0f6      	beq.n	5210 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    5222:	47c0      	blx	r8
    5224:	e7f4      	b.n	5210 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    5226:	23ff      	movs	r3, #255	; 0xff
    5228:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    522c:	4b04      	ldr	r3, [pc, #16]	; (5240 <prvUnlockQueue+0xa0>)
    522e:	4798      	blx	r3
    5230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5234:	00004c85 	.word	0x00004c85
    5238:	000050f5 	.word	0x000050f5
    523c:	00006155 	.word	0x00006155
    5240:	00004cc9 	.word	0x00004cc9
    5244:	00006285 	.word	0x00006285

00005248 <xQueueGenericReset>:
{
    5248:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    524a:	b330      	cbz	r0, 529a <xQueueGenericReset+0x52>
    524c:	4604      	mov	r4, r0
    524e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    5250:	4b1c      	ldr	r3, [pc, #112]	; (52c4 <xQueueGenericReset+0x7c>)
    5252:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    5254:	6822      	ldr	r2, [r4, #0]
    5256:	6c21      	ldr	r1, [r4, #64]	; 0x40
    5258:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    525a:	fb03 f301 	mul.w	r3, r3, r1
    525e:	18d0      	adds	r0, r2, r3
    5260:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    5262:	2000      	movs	r0, #0
    5264:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    5266:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    5268:	1a5b      	subs	r3, r3, r1
    526a:	4413      	add	r3, r2
    526c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    526e:	23ff      	movs	r3, #255	; 0xff
    5270:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    5274:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    5278:	b9c5      	cbnz	r5, 52ac <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    527a:	6923      	ldr	r3, [r4, #16]
    527c:	b1eb      	cbz	r3, 52ba <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    527e:	f104 0010 	add.w	r0, r4, #16
    5282:	4b11      	ldr	r3, [pc, #68]	; (52c8 <xQueueGenericReset+0x80>)
    5284:	4798      	blx	r3
    5286:	b1c0      	cbz	r0, 52ba <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    5288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    528c:	4b0f      	ldr	r3, [pc, #60]	; (52cc <xQueueGenericReset+0x84>)
    528e:	601a      	str	r2, [r3, #0]
    5290:	f3bf 8f4f 	dsb	sy
    5294:	f3bf 8f6f 	isb	sy
    5298:	e00f      	b.n	52ba <xQueueGenericReset+0x72>
    529a:	f04f 0380 	mov.w	r3, #128	; 0x80
    529e:	f383 8811 	msr	BASEPRI, r3
    52a2:	f3bf 8f6f 	isb	sy
    52a6:	f3bf 8f4f 	dsb	sy
    52aa:	e7fe      	b.n	52aa <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    52ac:	f104 0010 	add.w	r0, r4, #16
    52b0:	4d07      	ldr	r5, [pc, #28]	; (52d0 <xQueueGenericReset+0x88>)
    52b2:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    52b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    52b8:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    52ba:	4b06      	ldr	r3, [pc, #24]	; (52d4 <xQueueGenericReset+0x8c>)
    52bc:	4798      	blx	r3
}
    52be:	2001      	movs	r0, #1
    52c0:	bd38      	pop	{r3, r4, r5, pc}
    52c2:	bf00      	nop
    52c4:	00004c85 	.word	0x00004c85
    52c8:	00006155 	.word	0x00006155
    52cc:	e000ed04 	.word	0xe000ed04
    52d0:	00004b25 	.word	0x00004b25
    52d4:	00004cc9 	.word	0x00004cc9

000052d8 <xQueueGenericCreate>:
{
    52d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    52da:	b940      	cbnz	r0, 52ee <xQueueGenericCreate+0x16>
    52dc:	f04f 0380 	mov.w	r3, #128	; 0x80
    52e0:	f383 8811 	msr	BASEPRI, r3
    52e4:	f3bf 8f6f 	isb	sy
    52e8:	f3bf 8f4f 	dsb	sy
    52ec:	e7fe      	b.n	52ec <xQueueGenericCreate+0x14>
    52ee:	4606      	mov	r6, r0
    52f0:	4617      	mov	r7, r2
    52f2:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    52f4:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    52f8:	3054      	adds	r0, #84	; 0x54
    52fa:	4b0b      	ldr	r3, [pc, #44]	; (5328 <xQueueGenericCreate+0x50>)
    52fc:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    52fe:	4604      	mov	r4, r0
    5300:	b178      	cbz	r0, 5322 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    5302:	b11d      	cbz	r5, 530c <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    5304:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    5308:	6003      	str	r3, [r0, #0]
    530a:	e000      	b.n	530e <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    530c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    530e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    5310:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    5312:	2101      	movs	r1, #1
    5314:	4620      	mov	r0, r4
    5316:	4b05      	ldr	r3, [pc, #20]	; (532c <xQueueGenericCreate+0x54>)
    5318:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    531a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    531e:	2300      	movs	r3, #0
    5320:	64a3      	str	r3, [r4, #72]	; 0x48
}
    5322:	4620      	mov	r0, r4
    5324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5326:	bf00      	nop
    5328:	00004f35 	.word	0x00004f35
    532c:	00005249 	.word	0x00005249

00005330 <xQueueGenericSend>:
{
    5330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5334:	b085      	sub	sp, #20
    5336:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    5338:	b198      	cbz	r0, 5362 <xQueueGenericSend+0x32>
    533a:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    533c:	b1d1      	cbz	r1, 5374 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    533e:	2b02      	cmp	r3, #2
    5340:	d024      	beq.n	538c <xQueueGenericSend+0x5c>
    5342:	461e      	mov	r6, r3
    5344:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    5346:	4b64      	ldr	r3, [pc, #400]	; (54d8 <xQueueGenericSend+0x1a8>)
    5348:	4798      	blx	r3
    534a:	bb58      	cbnz	r0, 53a4 <xQueueGenericSend+0x74>
    534c:	9b01      	ldr	r3, [sp, #4]
    534e:	b38b      	cbz	r3, 53b4 <xQueueGenericSend+0x84>
    5350:	f04f 0380 	mov.w	r3, #128	; 0x80
    5354:	f383 8811 	msr	BASEPRI, r3
    5358:	f3bf 8f6f 	isb	sy
    535c:	f3bf 8f4f 	dsb	sy
    5360:	e7fe      	b.n	5360 <xQueueGenericSend+0x30>
    5362:	f04f 0380 	mov.w	r3, #128	; 0x80
    5366:	f383 8811 	msr	BASEPRI, r3
    536a:	f3bf 8f6f 	isb	sy
    536e:	f3bf 8f4f 	dsb	sy
    5372:	e7fe      	b.n	5372 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    5374:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5376:	2a00      	cmp	r2, #0
    5378:	d0e1      	beq.n	533e <xQueueGenericSend+0xe>
    537a:	f04f 0380 	mov.w	r3, #128	; 0x80
    537e:	f383 8811 	msr	BASEPRI, r3
    5382:	f3bf 8f6f 	isb	sy
    5386:	f3bf 8f4f 	dsb	sy
    538a:	e7fe      	b.n	538a <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    538c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    538e:	2a01      	cmp	r2, #1
    5390:	d0d7      	beq.n	5342 <xQueueGenericSend+0x12>
    5392:	f04f 0380 	mov.w	r3, #128	; 0x80
    5396:	f383 8811 	msr	BASEPRI, r3
    539a:	f3bf 8f6f 	isb	sy
    539e:	f3bf 8f4f 	dsb	sy
    53a2:	e7fe      	b.n	53a2 <xQueueGenericSend+0x72>
    53a4:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    53a6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 5504 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    53aa:	f8df a15c 	ldr.w	sl, [pc, #348]	; 5508 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    53ae:	f8df 9134 	ldr.w	r9, [pc, #308]	; 54e4 <xQueueGenericSend+0x1b4>
    53b2:	e041      	b.n	5438 <xQueueGenericSend+0x108>
    53b4:	2500      	movs	r5, #0
    53b6:	e7f6      	b.n	53a6 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    53b8:	4632      	mov	r2, r6
    53ba:	4639      	mov	r1, r7
    53bc:	4620      	mov	r0, r4
    53be:	4b47      	ldr	r3, [pc, #284]	; (54dc <xQueueGenericSend+0x1ac>)
    53c0:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    53c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    53c4:	b193      	cbz	r3, 53ec <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    53c6:	4631      	mov	r1, r6
    53c8:	4620      	mov	r0, r4
    53ca:	4b45      	ldr	r3, [pc, #276]	; (54e0 <xQueueGenericSend+0x1b0>)
    53cc:	4798      	blx	r3
    53ce:	b138      	cbz	r0, 53e0 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    53d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    53d4:	4b43      	ldr	r3, [pc, #268]	; (54e4 <xQueueGenericSend+0x1b4>)
    53d6:	601a      	str	r2, [r3, #0]
    53d8:	f3bf 8f4f 	dsb	sy
    53dc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    53e0:	4b41      	ldr	r3, [pc, #260]	; (54e8 <xQueueGenericSend+0x1b8>)
    53e2:	4798      	blx	r3
				return pdPASS;
    53e4:	2001      	movs	r0, #1
}
    53e6:	b005      	add	sp, #20
    53e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    53ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    53ee:	b173      	cbz	r3, 540e <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    53f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    53f4:	4b3d      	ldr	r3, [pc, #244]	; (54ec <xQueueGenericSend+0x1bc>)
    53f6:	4798      	blx	r3
    53f8:	2800      	cmp	r0, #0
    53fa:	d0f1      	beq.n	53e0 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    53fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5400:	4b38      	ldr	r3, [pc, #224]	; (54e4 <xQueueGenericSend+0x1b4>)
    5402:	601a      	str	r2, [r3, #0]
    5404:	f3bf 8f4f 	dsb	sy
    5408:	f3bf 8f6f 	isb	sy
    540c:	e7e8      	b.n	53e0 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    540e:	2800      	cmp	r0, #0
    5410:	d0e6      	beq.n	53e0 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    5412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5416:	4b33      	ldr	r3, [pc, #204]	; (54e4 <xQueueGenericSend+0x1b4>)
    5418:	601a      	str	r2, [r3, #0]
    541a:	f3bf 8f4f 	dsb	sy
    541e:	f3bf 8f6f 	isb	sy
    5422:	e7dd      	b.n	53e0 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    5424:	4b30      	ldr	r3, [pc, #192]	; (54e8 <xQueueGenericSend+0x1b8>)
    5426:	4798      	blx	r3
					return errQUEUE_FULL;
    5428:	2000      	movs	r0, #0
    542a:	e7dc      	b.n	53e6 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    542c:	4620      	mov	r0, r4
    542e:	4b30      	ldr	r3, [pc, #192]	; (54f0 <xQueueGenericSend+0x1c0>)
    5430:	4798      	blx	r3
				(void)xTaskResumeAll();
    5432:	4b30      	ldr	r3, [pc, #192]	; (54f4 <xQueueGenericSend+0x1c4>)
    5434:	4798      	blx	r3
    5436:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    5438:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    543a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    543c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    543e:	429a      	cmp	r2, r3
    5440:	d3ba      	bcc.n	53b8 <xQueueGenericSend+0x88>
    5442:	2e02      	cmp	r6, #2
    5444:	d0b8      	beq.n	53b8 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    5446:	9b01      	ldr	r3, [sp, #4]
    5448:	2b00      	cmp	r3, #0
    544a:	d0eb      	beq.n	5424 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    544c:	b90d      	cbnz	r5, 5452 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    544e:	a802      	add	r0, sp, #8
    5450:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    5452:	4b25      	ldr	r3, [pc, #148]	; (54e8 <xQueueGenericSend+0x1b8>)
    5454:	4798      	blx	r3
		vTaskSuspendAll();
    5456:	4b28      	ldr	r3, [pc, #160]	; (54f8 <xQueueGenericSend+0x1c8>)
    5458:	4798      	blx	r3
		prvLockQueue(pxQueue);
    545a:	47c0      	blx	r8
    545c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5460:	b25b      	sxtb	r3, r3
    5462:	f1b3 3fff 	cmp.w	r3, #4294967295
    5466:	bf04      	itt	eq
    5468:	2300      	moveq	r3, #0
    546a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    546e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5472:	b25b      	sxtb	r3, r3
    5474:	f1b3 3fff 	cmp.w	r3, #4294967295
    5478:	bf04      	itt	eq
    547a:	2300      	moveq	r3, #0
    547c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5480:	4b19      	ldr	r3, [pc, #100]	; (54e8 <xQueueGenericSend+0x1b8>)
    5482:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    5484:	a901      	add	r1, sp, #4
    5486:	a802      	add	r0, sp, #8
    5488:	4b1c      	ldr	r3, [pc, #112]	; (54fc <xQueueGenericSend+0x1cc>)
    548a:	4798      	blx	r3
    548c:	b9e0      	cbnz	r0, 54c8 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    548e:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    5490:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    5494:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    5496:	4b14      	ldr	r3, [pc, #80]	; (54e8 <xQueueGenericSend+0x1b8>)
    5498:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    549a:	45ab      	cmp	fp, r5
    549c:	d1c6      	bne.n	542c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    549e:	9901      	ldr	r1, [sp, #4]
    54a0:	f104 0010 	add.w	r0, r4, #16
    54a4:	4b16      	ldr	r3, [pc, #88]	; (5500 <xQueueGenericSend+0x1d0>)
    54a6:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    54a8:	4620      	mov	r0, r4
    54aa:	4b11      	ldr	r3, [pc, #68]	; (54f0 <xQueueGenericSend+0x1c0>)
    54ac:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    54ae:	4b11      	ldr	r3, [pc, #68]	; (54f4 <xQueueGenericSend+0x1c4>)
    54b0:	4798      	blx	r3
    54b2:	2800      	cmp	r0, #0
    54b4:	d1bf      	bne.n	5436 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    54b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    54ba:	f8c9 3000 	str.w	r3, [r9]
    54be:	f3bf 8f4f 	dsb	sy
    54c2:	f3bf 8f6f 	isb	sy
    54c6:	e7b6      	b.n	5436 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    54c8:	4620      	mov	r0, r4
    54ca:	4b09      	ldr	r3, [pc, #36]	; (54f0 <xQueueGenericSend+0x1c0>)
    54cc:	4798      	blx	r3
			(void)xTaskResumeAll();
    54ce:	4b09      	ldr	r3, [pc, #36]	; (54f4 <xQueueGenericSend+0x1c4>)
    54d0:	4798      	blx	r3
			return errQUEUE_FULL;
    54d2:	2000      	movs	r0, #0
    54d4:	e787      	b.n	53e6 <xQueueGenericSend+0xb6>
    54d6:	bf00      	nop
    54d8:	00006295 	.word	0x00006295
    54dc:	00005075 	.word	0x00005075
    54e0:	000050f5 	.word	0x000050f5
    54e4:	e000ed04 	.word	0xe000ed04
    54e8:	00004cc9 	.word	0x00004cc9
    54ec:	00006155 	.word	0x00006155
    54f0:	000051a1 	.word	0x000051a1
    54f4:	00005eb5 	.word	0x00005eb5
    54f8:	00005d6d 	.word	0x00005d6d
    54fc:	000061f9 	.word	0x000061f9
    5500:	000060d5 	.word	0x000060d5
    5504:	00004c85 	.word	0x00004c85
    5508:	000061e5 	.word	0x000061e5

0000550c <xQueueCreateMutex>:
{
    550c:	b538      	push	{r3, r4, r5, lr}
	pxNewQueue = (Queue_t *)xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType);
    550e:	4602      	mov	r2, r0
    5510:	2100      	movs	r1, #0
    5512:	2001      	movs	r0, #1
    5514:	4b06      	ldr	r3, [pc, #24]	; (5530 <xQueueCreateMutex+0x24>)
    5516:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    5518:	4604      	mov	r4, r0
    551a:	b138      	cbz	r0, 552c <xQueueCreateMutex+0x20>
		pxNewQueue->pxMutexHolder = NULL;
    551c:	2100      	movs	r1, #0
    551e:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    5520:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    5522:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    5524:	460b      	mov	r3, r1
    5526:	460a      	mov	r2, r1
    5528:	4d02      	ldr	r5, [pc, #8]	; (5534 <xQueueCreateMutex+0x28>)
    552a:	47a8      	blx	r5
}
    552c:	4620      	mov	r0, r4
    552e:	bd38      	pop	{r3, r4, r5, pc}
    5530:	000052d9 	.word	0x000052d9
    5534:	00005331 	.word	0x00005331

00005538 <xQueueGenericSendFromISR>:
{
    5538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    553c:	2800      	cmp	r0, #0
    553e:	d036      	beq.n	55ae <xQueueGenericSendFromISR+0x76>
    5540:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    5542:	2900      	cmp	r1, #0
    5544:	d03c      	beq.n	55c0 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    5546:	2b02      	cmp	r3, #2
    5548:	d046      	beq.n	55d8 <xQueueGenericSendFromISR+0xa0>
    554a:	461f      	mov	r7, r3
    554c:	4690      	mov	r8, r2
    554e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    5550:	4b37      	ldr	r3, [pc, #220]	; (5630 <xQueueGenericSendFromISR+0xf8>)
    5552:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    5554:	f3ef 8611 	mrs	r6, BASEPRI
    5558:	f04f 0380 	mov.w	r3, #128	; 0x80
    555c:	f383 8811 	msr	BASEPRI, r3
    5560:	f3bf 8f6f 	isb	sy
    5564:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    5568:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    556a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    556c:	429a      	cmp	r2, r3
    556e:	d301      	bcc.n	5574 <xQueueGenericSendFromISR+0x3c>
    5570:	2f02      	cmp	r7, #2
    5572:	d151      	bne.n	5618 <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    5574:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    5578:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    557a:	463a      	mov	r2, r7
    557c:	4649      	mov	r1, r9
    557e:	4620      	mov	r0, r4
    5580:	4b2c      	ldr	r3, [pc, #176]	; (5634 <xQueueGenericSendFromISR+0xfc>)
    5582:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    5584:	f1b5 3fff 	cmp.w	r5, #4294967295
    5588:	d140      	bne.n	560c <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    558a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    558c:	b383      	cbz	r3, 55f0 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    558e:	4639      	mov	r1, r7
    5590:	4620      	mov	r0, r4
    5592:	4b29      	ldr	r3, [pc, #164]	; (5638 <xQueueGenericSendFromISR+0x100>)
    5594:	4798      	blx	r3
    5596:	2800      	cmp	r0, #0
    5598:	d040      	beq.n	561c <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    559a:	f1b8 0f00 	cmp.w	r8, #0
    559e:	d03f      	beq.n	5620 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    55a0:	2001      	movs	r0, #1
    55a2:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    55a6:	f386 8811 	msr	BASEPRI, r6
}
    55aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    55ae:	f04f 0380 	mov.w	r3, #128	; 0x80
    55b2:	f383 8811 	msr	BASEPRI, r3
    55b6:	f3bf 8f6f 	isb	sy
    55ba:	f3bf 8f4f 	dsb	sy
    55be:	e7fe      	b.n	55be <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    55c0:	6c00      	ldr	r0, [r0, #64]	; 0x40
    55c2:	2800      	cmp	r0, #0
    55c4:	d0bf      	beq.n	5546 <xQueueGenericSendFromISR+0xe>
    55c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    55ca:	f383 8811 	msr	BASEPRI, r3
    55ce:	f3bf 8f6f 	isb	sy
    55d2:	f3bf 8f4f 	dsb	sy
    55d6:	e7fe      	b.n	55d6 <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    55d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    55da:	2801      	cmp	r0, #1
    55dc:	d0b5      	beq.n	554a <xQueueGenericSendFromISR+0x12>
    55de:	f04f 0380 	mov.w	r3, #128	; 0x80
    55e2:	f383 8811 	msr	BASEPRI, r3
    55e6:	f3bf 8f6f 	isb	sy
    55ea:	f3bf 8f4f 	dsb	sy
    55ee:	e7fe      	b.n	55ee <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    55f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    55f2:	b1bb      	cbz	r3, 5624 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    55f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    55f8:	4b10      	ldr	r3, [pc, #64]	; (563c <xQueueGenericSendFromISR+0x104>)
    55fa:	4798      	blx	r3
    55fc:	b1a0      	cbz	r0, 5628 <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    55fe:	f1b8 0f00 	cmp.w	r8, #0
    5602:	d013      	beq.n	562c <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    5604:	2001      	movs	r0, #1
    5606:	f8c8 0000 	str.w	r0, [r8]
    560a:	e7cc      	b.n	55a6 <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    560c:	1c6b      	adds	r3, r5, #1
    560e:	b25b      	sxtb	r3, r3
    5610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    5614:	2001      	movs	r0, #1
    5616:	e7c6      	b.n	55a6 <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    5618:	2000      	movs	r0, #0
    561a:	e7c4      	b.n	55a6 <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    561c:	2001      	movs	r0, #1
    561e:	e7c2      	b.n	55a6 <xQueueGenericSendFromISR+0x6e>
    5620:	2001      	movs	r0, #1
    5622:	e7c0      	b.n	55a6 <xQueueGenericSendFromISR+0x6e>
    5624:	2001      	movs	r0, #1
    5626:	e7be      	b.n	55a6 <xQueueGenericSendFromISR+0x6e>
    5628:	2001      	movs	r0, #1
    562a:	e7bc      	b.n	55a6 <xQueueGenericSendFromISR+0x6e>
    562c:	2001      	movs	r0, #1
    562e:	e7ba      	b.n	55a6 <xQueueGenericSendFromISR+0x6e>
    5630:	00004edd 	.word	0x00004edd
    5634:	00005075 	.word	0x00005075
    5638:	000050f5 	.word	0x000050f5
    563c:	00006155 	.word	0x00006155

00005640 <xQueueReceive>:
{
    5640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5644:	b084      	sub	sp, #16
    5646:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    5648:	b180      	cbz	r0, 566c <xQueueReceive+0x2c>
    564a:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    564c:	b1b9      	cbz	r1, 567e <xQueueReceive+0x3e>
    564e:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    5650:	4b50      	ldr	r3, [pc, #320]	; (5794 <xQueueReceive+0x154>)
    5652:	4798      	blx	r3
    5654:	b9f8      	cbnz	r0, 5696 <xQueueReceive+0x56>
    5656:	9b01      	ldr	r3, [sp, #4]
    5658:	b32b      	cbz	r3, 56a6 <xQueueReceive+0x66>
    565a:	f04f 0380 	mov.w	r3, #128	; 0x80
    565e:	f383 8811 	msr	BASEPRI, r3
    5662:	f3bf 8f6f 	isb	sy
    5666:	f3bf 8f4f 	dsb	sy
    566a:	e7fe      	b.n	566a <xQueueReceive+0x2a>
    566c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5670:	f383 8811 	msr	BASEPRI, r3
    5674:	f3bf 8f6f 	isb	sy
    5678:	f3bf 8f4f 	dsb	sy
    567c:	e7fe      	b.n	567c <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    567e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5680:	2b00      	cmp	r3, #0
    5682:	d0e4      	beq.n	564e <xQueueReceive+0xe>
    5684:	f04f 0380 	mov.w	r3, #128	; 0x80
    5688:	f383 8811 	msr	BASEPRI, r3
    568c:	f3bf 8f6f 	isb	sy
    5690:	f3bf 8f4f 	dsb	sy
    5694:	e7fe      	b.n	5694 <xQueueReceive+0x54>
    5696:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    5698:	f8df 8124 	ldr.w	r8, [pc, #292]	; 57c0 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    569c:	f8df a124 	ldr.w	sl, [pc, #292]	; 57c4 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    56a0:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 57a0 <xQueueReceive+0x160>
    56a4:	e029      	b.n	56fa <xQueueReceive+0xba>
    56a6:	2700      	movs	r7, #0
    56a8:	e7f6      	b.n	5698 <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    56aa:	4631      	mov	r1, r6
    56ac:	4620      	mov	r0, r4
    56ae:	4b3a      	ldr	r3, [pc, #232]	; (5798 <xQueueReceive+0x158>)
    56b0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    56b2:	3d01      	subs	r5, #1
    56b4:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    56b6:	6923      	ldr	r3, [r4, #16]
    56b8:	b163      	cbz	r3, 56d4 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    56ba:	f104 0010 	add.w	r0, r4, #16
    56be:	4b37      	ldr	r3, [pc, #220]	; (579c <xQueueReceive+0x15c>)
    56c0:	4798      	blx	r3
    56c2:	b138      	cbz	r0, 56d4 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    56c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    56c8:	4b35      	ldr	r3, [pc, #212]	; (57a0 <xQueueReceive+0x160>)
    56ca:	601a      	str	r2, [r3, #0]
    56cc:	f3bf 8f4f 	dsb	sy
    56d0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    56d4:	4b33      	ldr	r3, [pc, #204]	; (57a4 <xQueueReceive+0x164>)
    56d6:	4798      	blx	r3
				return pdPASS;
    56d8:	2001      	movs	r0, #1
}
    56da:	b004      	add	sp, #16
    56dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    56e0:	4b30      	ldr	r3, [pc, #192]	; (57a4 <xQueueReceive+0x164>)
    56e2:	4798      	blx	r3
					return errQUEUE_EMPTY;
    56e4:	2000      	movs	r0, #0
    56e6:	e7f8      	b.n	56da <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    56e8:	a802      	add	r0, sp, #8
    56ea:	47d0      	blx	sl
    56ec:	e00e      	b.n	570c <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    56ee:	4620      	mov	r0, r4
    56f0:	4b2d      	ldr	r3, [pc, #180]	; (57a8 <xQueueReceive+0x168>)
    56f2:	4798      	blx	r3
				(void)xTaskResumeAll();
    56f4:	4b2d      	ldr	r3, [pc, #180]	; (57ac <xQueueReceive+0x16c>)
    56f6:	4798      	blx	r3
    56f8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    56fa:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    56fc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    56fe:	2d00      	cmp	r5, #0
    5700:	d1d3      	bne.n	56aa <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    5702:	9b01      	ldr	r3, [sp, #4]
    5704:	2b00      	cmp	r3, #0
    5706:	d0eb      	beq.n	56e0 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    5708:	2f00      	cmp	r7, #0
    570a:	d0ed      	beq.n	56e8 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    570c:	4b25      	ldr	r3, [pc, #148]	; (57a4 <xQueueReceive+0x164>)
    570e:	4798      	blx	r3
		vTaskSuspendAll();
    5710:	4b27      	ldr	r3, [pc, #156]	; (57b0 <xQueueReceive+0x170>)
    5712:	4798      	blx	r3
		prvLockQueue(pxQueue);
    5714:	47c0      	blx	r8
    5716:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    571a:	b25b      	sxtb	r3, r3
    571c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5720:	bf04      	itt	eq
    5722:	2300      	moveq	r3, #0
    5724:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5728:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    572c:	b25b      	sxtb	r3, r3
    572e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5732:	bf04      	itt	eq
    5734:	2300      	moveq	r3, #0
    5736:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    573a:	4b1a      	ldr	r3, [pc, #104]	; (57a4 <xQueueReceive+0x164>)
    573c:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    573e:	a901      	add	r1, sp, #4
    5740:	a802      	add	r0, sp, #8
    5742:	4b1c      	ldr	r3, [pc, #112]	; (57b4 <xQueueReceive+0x174>)
    5744:	4798      	blx	r3
    5746:	b9c8      	cbnz	r0, 577c <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5748:	4620      	mov	r0, r4
    574a:	4b1b      	ldr	r3, [pc, #108]	; (57b8 <xQueueReceive+0x178>)
    574c:	4798      	blx	r3
    574e:	2800      	cmp	r0, #0
    5750:	d0cd      	beq.n	56ee <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    5752:	9901      	ldr	r1, [sp, #4]
    5754:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5758:	4b18      	ldr	r3, [pc, #96]	; (57bc <xQueueReceive+0x17c>)
    575a:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    575c:	4620      	mov	r0, r4
    575e:	4b12      	ldr	r3, [pc, #72]	; (57a8 <xQueueReceive+0x168>)
    5760:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    5762:	4b12      	ldr	r3, [pc, #72]	; (57ac <xQueueReceive+0x16c>)
    5764:	4798      	blx	r3
    5766:	2800      	cmp	r0, #0
    5768:	d1c6      	bne.n	56f8 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    576a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    576e:	f8c9 3000 	str.w	r3, [r9]
    5772:	f3bf 8f4f 	dsb	sy
    5776:	f3bf 8f6f 	isb	sy
    577a:	e7bd      	b.n	56f8 <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    577c:	4620      	mov	r0, r4
    577e:	4b0a      	ldr	r3, [pc, #40]	; (57a8 <xQueueReceive+0x168>)
    5780:	4798      	blx	r3
			(void)xTaskResumeAll();
    5782:	4b0a      	ldr	r3, [pc, #40]	; (57ac <xQueueReceive+0x16c>)
    5784:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5786:	4620      	mov	r0, r4
    5788:	4b0b      	ldr	r3, [pc, #44]	; (57b8 <xQueueReceive+0x178>)
    578a:	4798      	blx	r3
    578c:	2800      	cmp	r0, #0
    578e:	d0b3      	beq.n	56f8 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    5790:	2000      	movs	r0, #0
    5792:	e7a2      	b.n	56da <xQueueReceive+0x9a>
    5794:	00006295 	.word	0x00006295
    5798:	00005179 	.word	0x00005179
    579c:	00006155 	.word	0x00006155
    57a0:	e000ed04 	.word	0xe000ed04
    57a4:	00004cc9 	.word	0x00004cc9
    57a8:	000051a1 	.word	0x000051a1
    57ac:	00005eb5 	.word	0x00005eb5
    57b0:	00005d6d 	.word	0x00005d6d
    57b4:	000061f9 	.word	0x000061f9
    57b8:	00005055 	.word	0x00005055
    57bc:	000060d5 	.word	0x000060d5
    57c0:	00004c85 	.word	0x00004c85
    57c4:	000061e5 	.word	0x000061e5

000057c8 <xQueueSemaphoreTake>:
{
    57c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    57cc:	b085      	sub	sp, #20
    57ce:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    57d0:	b158      	cbz	r0, 57ea <xQueueSemaphoreTake+0x22>
    57d2:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    57d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    57d6:	b18b      	cbz	r3, 57fc <xQueueSemaphoreTake+0x34>
    57d8:	f04f 0380 	mov.w	r3, #128	; 0x80
    57dc:	f383 8811 	msr	BASEPRI, r3
    57e0:	f3bf 8f6f 	isb	sy
    57e4:	f3bf 8f4f 	dsb	sy
    57e8:	e7fe      	b.n	57e8 <xQueueSemaphoreTake+0x20>
    57ea:	f04f 0380 	mov.w	r3, #128	; 0x80
    57ee:	f383 8811 	msr	BASEPRI, r3
    57f2:	f3bf 8f6f 	isb	sy
    57f6:	f3bf 8f4f 	dsb	sy
    57fa:	e7fe      	b.n	57fa <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    57fc:	4b5b      	ldr	r3, [pc, #364]	; (596c <xQueueSemaphoreTake+0x1a4>)
    57fe:	4798      	blx	r3
    5800:	b950      	cbnz	r0, 5818 <xQueueSemaphoreTake+0x50>
    5802:	9b01      	ldr	r3, [sp, #4]
    5804:	b183      	cbz	r3, 5828 <xQueueSemaphoreTake+0x60>
    5806:	f04f 0380 	mov.w	r3, #128	; 0x80
    580a:	f383 8811 	msr	BASEPRI, r3
    580e:	f3bf 8f6f 	isb	sy
    5812:	f3bf 8f4f 	dsb	sy
    5816:	e7fe      	b.n	5816 <xQueueSemaphoreTake+0x4e>
    5818:	2500      	movs	r5, #0
    581a:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    581c:	4e54      	ldr	r6, [pc, #336]	; (5970 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    581e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 59a4 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    5822:	f8df 8158 	ldr.w	r8, [pc, #344]	; 597c <xQueueSemaphoreTake+0x1b4>
    5826:	e048      	b.n	58ba <xQueueSemaphoreTake+0xf2>
    5828:	2500      	movs	r5, #0
    582a:	462f      	mov	r7, r5
    582c:	e7f6      	b.n	581c <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    582e:	3b01      	subs	r3, #1
    5830:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    5832:	6823      	ldr	r3, [r4, #0]
    5834:	b913      	cbnz	r3, 583c <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    5836:	4b4f      	ldr	r3, [pc, #316]	; (5974 <xQueueSemaphoreTake+0x1ac>)
    5838:	4798      	blx	r3
    583a:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    583c:	6923      	ldr	r3, [r4, #16]
    583e:	b163      	cbz	r3, 585a <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5840:	f104 0010 	add.w	r0, r4, #16
    5844:	4b4c      	ldr	r3, [pc, #304]	; (5978 <xQueueSemaphoreTake+0x1b0>)
    5846:	4798      	blx	r3
    5848:	b138      	cbz	r0, 585a <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    584a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    584e:	4b4b      	ldr	r3, [pc, #300]	; (597c <xQueueSemaphoreTake+0x1b4>)
    5850:	601a      	str	r2, [r3, #0]
    5852:	f3bf 8f4f 	dsb	sy
    5856:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    585a:	4b49      	ldr	r3, [pc, #292]	; (5980 <xQueueSemaphoreTake+0x1b8>)
    585c:	4798      	blx	r3
				return pdPASS;
    585e:	2501      	movs	r5, #1
}
    5860:	4628      	mov	r0, r5
    5862:	b005      	add	sp, #20
    5864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    5868:	b145      	cbz	r5, 587c <xQueueSemaphoreTake+0xb4>
    586a:	f04f 0380 	mov.w	r3, #128	; 0x80
    586e:	f383 8811 	msr	BASEPRI, r3
    5872:	f3bf 8f6f 	isb	sy
    5876:	f3bf 8f4f 	dsb	sy
    587a:	e7fe      	b.n	587a <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    587c:	4b40      	ldr	r3, [pc, #256]	; (5980 <xQueueSemaphoreTake+0x1b8>)
    587e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    5880:	e7ee      	b.n	5860 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5882:	a802      	add	r0, sp, #8
    5884:	47c8      	blx	r9
    5886:	e021      	b.n	58cc <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    5888:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    588a:	6860      	ldr	r0, [r4, #4]
    588c:	4b3d      	ldr	r3, [pc, #244]	; (5984 <xQueueSemaphoreTake+0x1bc>)
    588e:	4798      	blx	r3
    5890:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    5892:	4b3b      	ldr	r3, [pc, #236]	; (5980 <xQueueSemaphoreTake+0x1b8>)
    5894:	4798      	blx	r3
    5896:	e040      	b.n	591a <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    5898:	4620      	mov	r0, r4
    589a:	4b3b      	ldr	r3, [pc, #236]	; (5988 <xQueueSemaphoreTake+0x1c0>)
    589c:	4798      	blx	r3
				(void)xTaskResumeAll();
    589e:	4b3b      	ldr	r3, [pc, #236]	; (598c <xQueueSemaphoreTake+0x1c4>)
    58a0:	4798      	blx	r3
    58a2:	e009      	b.n	58b8 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    58a4:	4620      	mov	r0, r4
    58a6:	4b38      	ldr	r3, [pc, #224]	; (5988 <xQueueSemaphoreTake+0x1c0>)
    58a8:	4798      	blx	r3
			(void)xTaskResumeAll();
    58aa:	4b38      	ldr	r3, [pc, #224]	; (598c <xQueueSemaphoreTake+0x1c4>)
    58ac:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    58ae:	4620      	mov	r0, r4
    58b0:	4b37      	ldr	r3, [pc, #220]	; (5990 <xQueueSemaphoreTake+0x1c8>)
    58b2:	4798      	blx	r3
    58b4:	2800      	cmp	r0, #0
    58b6:	d145      	bne.n	5944 <xQueueSemaphoreTake+0x17c>
    58b8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    58ba:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    58bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    58be:	2b00      	cmp	r3, #0
    58c0:	d1b5      	bne.n	582e <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    58c2:	9b01      	ldr	r3, [sp, #4]
    58c4:	2b00      	cmp	r3, #0
    58c6:	d0cf      	beq.n	5868 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    58c8:	2f00      	cmp	r7, #0
    58ca:	d0da      	beq.n	5882 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    58cc:	4b2c      	ldr	r3, [pc, #176]	; (5980 <xQueueSemaphoreTake+0x1b8>)
    58ce:	4798      	blx	r3
		vTaskSuspendAll();
    58d0:	4b30      	ldr	r3, [pc, #192]	; (5994 <xQueueSemaphoreTake+0x1cc>)
    58d2:	4798      	blx	r3
		prvLockQueue(pxQueue);
    58d4:	47b0      	blx	r6
    58d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    58da:	b25b      	sxtb	r3, r3
    58dc:	f1b3 3fff 	cmp.w	r3, #4294967295
    58e0:	bf04      	itt	eq
    58e2:	2300      	moveq	r3, #0
    58e4:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    58e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    58ec:	b25b      	sxtb	r3, r3
    58ee:	f1b3 3fff 	cmp.w	r3, #4294967295
    58f2:	bf04      	itt	eq
    58f4:	2300      	moveq	r3, #0
    58f6:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    58fa:	4b21      	ldr	r3, [pc, #132]	; (5980 <xQueueSemaphoreTake+0x1b8>)
    58fc:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    58fe:	a901      	add	r1, sp, #4
    5900:	a802      	add	r0, sp, #8
    5902:	4b25      	ldr	r3, [pc, #148]	; (5998 <xQueueSemaphoreTake+0x1d0>)
    5904:	4798      	blx	r3
    5906:	2800      	cmp	r0, #0
    5908:	d1cc      	bne.n	58a4 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    590a:	4620      	mov	r0, r4
    590c:	4b20      	ldr	r3, [pc, #128]	; (5990 <xQueueSemaphoreTake+0x1c8>)
    590e:	4798      	blx	r3
    5910:	2800      	cmp	r0, #0
    5912:	d0c1      	beq.n	5898 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    5914:	6823      	ldr	r3, [r4, #0]
    5916:	2b00      	cmp	r3, #0
    5918:	d0b6      	beq.n	5888 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    591a:	9901      	ldr	r1, [sp, #4]
    591c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5920:	4b1e      	ldr	r3, [pc, #120]	; (599c <xQueueSemaphoreTake+0x1d4>)
    5922:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5924:	4620      	mov	r0, r4
    5926:	4b18      	ldr	r3, [pc, #96]	; (5988 <xQueueSemaphoreTake+0x1c0>)
    5928:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    592a:	4b18      	ldr	r3, [pc, #96]	; (598c <xQueueSemaphoreTake+0x1c4>)
    592c:	4798      	blx	r3
    592e:	2800      	cmp	r0, #0
    5930:	d1c2      	bne.n	58b8 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    5932:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5936:	f8c8 3000 	str.w	r3, [r8]
    593a:	f3bf 8f4f 	dsb	sy
    593e:	f3bf 8f6f 	isb	sy
    5942:	e7b9      	b.n	58b8 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    5944:	2d00      	cmp	r5, #0
    5946:	d08b      	beq.n	5860 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    5948:	4b09      	ldr	r3, [pc, #36]	; (5970 <xQueueSemaphoreTake+0x1a8>)
    594a:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    594c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    594e:	b153      	cbz	r3, 5966 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    5950:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5952:	6819      	ldr	r1, [r3, #0]
    5954:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    5958:	6860      	ldr	r0, [r4, #4]
    595a:	4b11      	ldr	r3, [pc, #68]	; (59a0 <xQueueSemaphoreTake+0x1d8>)
    595c:	4798      	blx	r3
						taskEXIT_CRITICAL();
    595e:	4b08      	ldr	r3, [pc, #32]	; (5980 <xQueueSemaphoreTake+0x1b8>)
    5960:	4798      	blx	r3
				return errQUEUE_EMPTY;
    5962:	2500      	movs	r5, #0
    5964:	e77c      	b.n	5860 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    5966:	2100      	movs	r1, #0
    5968:	e7f6      	b.n	5958 <xQueueSemaphoreTake+0x190>
    596a:	bf00      	nop
    596c:	00006295 	.word	0x00006295
    5970:	00004c85 	.word	0x00004c85
    5974:	000064a1 	.word	0x000064a1
    5978:	00006155 	.word	0x00006155
    597c:	e000ed04 	.word	0xe000ed04
    5980:	00004cc9 	.word	0x00004cc9
    5984:	000062b5 	.word	0x000062b5
    5988:	000051a1 	.word	0x000051a1
    598c:	00005eb5 	.word	0x00005eb5
    5990:	00005055 	.word	0x00005055
    5994:	00005d6d 	.word	0x00005d6d
    5998:	000061f9 	.word	0x000061f9
    599c:	000060d5 	.word	0x000060d5
    59a0:	000063f5 	.word	0x000063f5
    59a4:	000061e5 	.word	0x000061e5

000059a8 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    59a8:	b940      	cbnz	r0, 59bc <uxQueueMessagesWaiting+0x14>
    59aa:	f04f 0380 	mov.w	r3, #128	; 0x80
    59ae:	f383 8811 	msr	BASEPRI, r3
    59b2:	f3bf 8f6f 	isb	sy
    59b6:	f3bf 8f4f 	dsb	sy
    59ba:	e7fe      	b.n	59ba <uxQueueMessagesWaiting+0x12>
{
    59bc:	b510      	push	{r4, lr}
    59be:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    59c0:	4b03      	ldr	r3, [pc, #12]	; (59d0 <uxQueueMessagesWaiting+0x28>)
    59c2:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    59c4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    59c6:	4b03      	ldr	r3, [pc, #12]	; (59d4 <uxQueueMessagesWaiting+0x2c>)
    59c8:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    59ca:	4620      	mov	r0, r4
    59cc:	bd10      	pop	{r4, pc}
    59ce:	bf00      	nop
    59d0:	00004c85 	.word	0x00004c85
    59d4:	00004cc9 	.word	0x00004cc9

000059d8 <vQueueWaitForMessageRestricted>:
{
    59d8:	b570      	push	{r4, r5, r6, lr}
    59da:	4604      	mov	r4, r0
    59dc:	460d      	mov	r5, r1
    59de:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    59e0:	4b11      	ldr	r3, [pc, #68]	; (5a28 <vQueueWaitForMessageRestricted+0x50>)
    59e2:	4798      	blx	r3
    59e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    59e8:	b25b      	sxtb	r3, r3
    59ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    59ee:	bf04      	itt	eq
    59f0:	2300      	moveq	r3, #0
    59f2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    59f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    59fa:	b25b      	sxtb	r3, r3
    59fc:	f1b3 3fff 	cmp.w	r3, #4294967295
    5a00:	bf04      	itt	eq
    5a02:	2300      	moveq	r3, #0
    5a04:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5a08:	4b08      	ldr	r3, [pc, #32]	; (5a2c <vQueueWaitForMessageRestricted+0x54>)
    5a0a:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    5a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5a0e:	b11b      	cbz	r3, 5a18 <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    5a10:	4620      	mov	r0, r4
    5a12:	4b07      	ldr	r3, [pc, #28]	; (5a30 <vQueueWaitForMessageRestricted+0x58>)
    5a14:	4798      	blx	r3
    5a16:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    5a18:	4632      	mov	r2, r6
    5a1a:	4629      	mov	r1, r5
    5a1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5a20:	4b04      	ldr	r3, [pc, #16]	; (5a34 <vQueueWaitForMessageRestricted+0x5c>)
    5a22:	4798      	blx	r3
    5a24:	e7f4      	b.n	5a10 <vQueueWaitForMessageRestricted+0x38>
    5a26:	bf00      	nop
    5a28:	00004c85 	.word	0x00004c85
    5a2c:	00004cc9 	.word	0x00004cc9
    5a30:	000051a1 	.word	0x000051a1
    5a34:	00006111 	.word	0x00006111

00005a38 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5a38:	4a06      	ldr	r2, [pc, #24]	; (5a54 <prvIdleTask+0x1c>)
				taskYIELD();
    5a3a:	4807      	ldr	r0, [pc, #28]	; (5a58 <prvIdleTask+0x20>)
    5a3c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5a40:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5a42:	2b01      	cmp	r3, #1
    5a44:	d9fc      	bls.n	5a40 <prvIdleTask+0x8>
				taskYIELD();
    5a46:	6001      	str	r1, [r0, #0]
    5a48:	f3bf 8f4f 	dsb	sy
    5a4c:	f3bf 8f6f 	isb	sy
    5a50:	e7f6      	b.n	5a40 <prvIdleTask+0x8>
    5a52:	bf00      	nop
    5a54:	2000333c 	.word	0x2000333c
    5a58:	e000ed04 	.word	0xe000ed04

00005a5c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5a5c:	4b09      	ldr	r3, [pc, #36]	; (5a84 <prvResetNextTaskUnblockTime+0x28>)
    5a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    5a62:	681b      	ldr	r3, [r3, #0]
    5a64:	b143      	cbz	r3, 5a78 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5a66:	4b07      	ldr	r3, [pc, #28]	; (5a84 <prvResetNextTaskUnblockTime+0x28>)
    5a68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    5a6c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    5a6e:	68d2      	ldr	r2, [r2, #12]
    5a70:	6852      	ldr	r2, [r2, #4]
    5a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5a76:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    5a78:	f04f 32ff 	mov.w	r2, #4294967295
    5a7c:	4b01      	ldr	r3, [pc, #4]	; (5a84 <prvResetNextTaskUnblockTime+0x28>)
    5a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5a82:	4770      	bx	lr
    5a84:	2000333c 	.word	0x2000333c

00005a88 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    5a88:	b570      	push	{r4, r5, r6, lr}
    5a8a:	4604      	mov	r4, r0
    5a8c:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    5a8e:	4b1a      	ldr	r3, [pc, #104]	; (5af8 <prvAddCurrentTaskToDelayedList+0x70>)
    5a90:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    5a94:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    5a98:	3004      	adds	r0, #4
    5a9a:	4b18      	ldr	r3, [pc, #96]	; (5afc <prvAddCurrentTaskToDelayedList+0x74>)
    5a9c:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    5a9e:	f1b4 3fff 	cmp.w	r4, #4294967295
    5aa2:	d016      	beq.n	5ad2 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5aa4:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    5aa6:	4b14      	ldr	r3, [pc, #80]	; (5af8 <prvAddCurrentTaskToDelayedList+0x70>)
    5aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5aac:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    5aae:	42a5      	cmp	r5, r4
    5ab0:	d818      	bhi.n	5ae4 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    5ab2:	4d11      	ldr	r5, [pc, #68]	; (5af8 <prvAddCurrentTaskToDelayedList+0x70>)
    5ab4:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    5ab8:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    5abc:	3104      	adds	r1, #4
    5abe:	4b10      	ldr	r3, [pc, #64]	; (5b00 <prvAddCurrentTaskToDelayedList+0x78>)
    5ac0:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    5ac2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    5ac6:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    5ac8:	bf3c      	itt	cc
    5aca:	462b      	movcc	r3, r5
    5acc:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    5ad0:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    5ad2:	2e00      	cmp	r6, #0
    5ad4:	d0e6      	beq.n	5aa4 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    5ad6:	4808      	ldr	r0, [pc, #32]	; (5af8 <prvAddCurrentTaskToDelayedList+0x70>)
    5ad8:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    5adc:	3104      	adds	r1, #4
    5ade:	4b09      	ldr	r3, [pc, #36]	; (5b04 <prvAddCurrentTaskToDelayedList+0x7c>)
    5ae0:	4798      	blx	r3
    5ae2:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    5ae4:	4b04      	ldr	r3, [pc, #16]	; (5af8 <prvAddCurrentTaskToDelayedList+0x70>)
    5ae6:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    5aea:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    5aee:	3104      	adds	r1, #4
    5af0:	4b03      	ldr	r3, [pc, #12]	; (5b00 <prvAddCurrentTaskToDelayedList+0x78>)
    5af2:	4798      	blx	r3
    5af4:	bd70      	pop	{r4, r5, r6, pc}
    5af6:	bf00      	nop
    5af8:	2000333c 	.word	0x2000333c
    5afc:	00004b8d 	.word	0x00004b8d
    5b00:	00004b59 	.word	0x00004b59
    5b04:	00004b41 	.word	0x00004b41

00005b08 <xTaskCreate>:
{
    5b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b0c:	b083      	sub	sp, #12
    5b0e:	4683      	mov	fp, r0
    5b10:	460d      	mov	r5, r1
    5b12:	9301      	str	r3, [sp, #4]
    5b14:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    5b18:	0096      	lsls	r6, r2, #2
    5b1a:	4630      	mov	r0, r6
    5b1c:	4b66      	ldr	r3, [pc, #408]	; (5cb8 <xTaskCreate+0x1b0>)
    5b1e:	4798      	blx	r3
		if (pxStack != NULL) {
    5b20:	2800      	cmp	r0, #0
    5b22:	f000 8096 	beq.w	5c52 <xTaskCreate+0x14a>
    5b26:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    5b28:	2054      	movs	r0, #84	; 0x54
    5b2a:	4b63      	ldr	r3, [pc, #396]	; (5cb8 <xTaskCreate+0x1b0>)
    5b2c:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    5b2e:	4604      	mov	r4, r0
    5b30:	2800      	cmp	r0, #0
    5b32:	f000 808b 	beq.w	5c4c <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    5b36:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    5b38:	4632      	mov	r2, r6
    5b3a:	21a5      	movs	r1, #165	; 0xa5
    5b3c:	4638      	mov	r0, r7
    5b3e:	4b5f      	ldr	r3, [pc, #380]	; (5cbc <xTaskCreate+0x1b4>)
    5b40:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    5b42:	3e04      	subs	r6, #4
    5b44:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5b46:	441e      	add	r6, r3
		                      & (~(
    5b48:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    5b4c:	782b      	ldrb	r3, [r5, #0]
    5b4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    5b52:	782b      	ldrb	r3, [r5, #0]
    5b54:	b15b      	cbz	r3, 5b6e <xTaskCreate+0x66>
    5b56:	462b      	mov	r3, r5
    5b58:	f104 0235 	add.w	r2, r4, #53	; 0x35
    5b5c:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    5b5e:	7858      	ldrb	r0, [r3, #1]
    5b60:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    5b64:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    5b68:	b108      	cbz	r0, 5b6e <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    5b6a:	4299      	cmp	r1, r3
    5b6c:	d1f7      	bne.n	5b5e <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    5b6e:	2700      	movs	r7, #0
    5b70:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    5b74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5b76:	2d04      	cmp	r5, #4
    5b78:	bf28      	it	cs
    5b7a:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    5b7c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    5b7e:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    5b80:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    5b82:	f104 0804 	add.w	r8, r4, #4
    5b86:	4640      	mov	r0, r8
    5b88:	f8df 9154 	ldr.w	r9, [pc, #340]	; 5ce0 <xTaskCreate+0x1d8>
    5b8c:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    5b8e:	f104 0018 	add.w	r0, r4, #24
    5b92:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    5b94:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    5b96:	f1c5 0505 	rsb	r5, r5, #5
    5b9a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    5b9c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    5b9e:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    5ba0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    5ba4:	9a01      	ldr	r2, [sp, #4]
    5ba6:	4659      	mov	r1, fp
    5ba8:	4630      	mov	r0, r6
    5baa:	4b45      	ldr	r3, [pc, #276]	; (5cc0 <xTaskCreate+0x1b8>)
    5bac:	4798      	blx	r3
    5bae:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    5bb0:	f1ba 0f00 	cmp.w	sl, #0
    5bb4:	d001      	beq.n	5bba <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    5bb6:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    5bba:	4b42      	ldr	r3, [pc, #264]	; (5cc4 <xTaskCreate+0x1bc>)
    5bbc:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    5bbe:	4b42      	ldr	r3, [pc, #264]	; (5cc8 <xTaskCreate+0x1c0>)
    5bc0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    5bc4:	3201      	adds	r2, #1
    5bc6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    5bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5bce:	2b00      	cmp	r3, #0
    5bd0:	d042      	beq.n	5c58 <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    5bd2:	4b3d      	ldr	r3, [pc, #244]	; (5cc8 <xTaskCreate+0x1c0>)
    5bd4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    5bd8:	b94b      	cbnz	r3, 5bee <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    5bda:	4b3b      	ldr	r3, [pc, #236]	; (5cc8 <xTaskCreate+0x1c0>)
    5bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5be2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5be4:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    5be6:	bf9c      	itt	ls
    5be8:	4b37      	ldrls	r3, [pc, #220]	; (5cc8 <xTaskCreate+0x1c0>)
    5bea:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    5bee:	4a36      	ldr	r2, [pc, #216]	; (5cc8 <xTaskCreate+0x1c0>)
    5bf0:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    5bf4:	3301      	adds	r3, #1
    5bf6:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    5bfa:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    5bfc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5bfe:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    5c02:	4293      	cmp	r3, r2
    5c04:	bf84      	itt	hi
    5c06:	4a30      	ldrhi	r2, [pc, #192]	; (5cc8 <xTaskCreate+0x1c0>)
    5c08:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    5c0c:	4d2e      	ldr	r5, [pc, #184]	; (5cc8 <xTaskCreate+0x1c0>)
    5c0e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5c12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5c16:	4641      	mov	r1, r8
    5c18:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5c1c:	4b2b      	ldr	r3, [pc, #172]	; (5ccc <xTaskCreate+0x1c4>)
    5c1e:	4798      	blx	r3
	taskEXIT_CRITICAL();
    5c20:	4b2b      	ldr	r3, [pc, #172]	; (5cd0 <xTaskCreate+0x1c8>)
    5c22:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    5c24:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    5c28:	2b00      	cmp	r3, #0
    5c2a:	d03f      	beq.n	5cac <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    5c2c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5c34:	429a      	cmp	r2, r3
    5c36:	d23d      	bcs.n	5cb4 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    5c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c3c:	4b25      	ldr	r3, [pc, #148]	; (5cd4 <xTaskCreate+0x1cc>)
    5c3e:	601a      	str	r2, [r3, #0]
    5c40:	f3bf 8f4f 	dsb	sy
    5c44:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    5c48:	2001      	movs	r0, #1
    5c4a:	e030      	b.n	5cae <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    5c4c:	4638      	mov	r0, r7
    5c4e:	4b22      	ldr	r3, [pc, #136]	; (5cd8 <xTaskCreate+0x1d0>)
    5c50:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    5c52:	f04f 30ff 	mov.w	r0, #4294967295
    5c56:	e02a      	b.n	5cae <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    5c58:	4b1b      	ldr	r3, [pc, #108]	; (5cc8 <xTaskCreate+0x1c0>)
    5c5a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    5c5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5c62:	2b01      	cmp	r3, #1
    5c64:	d1c3      	bne.n	5bee <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    5c66:	4d18      	ldr	r5, [pc, #96]	; (5cc8 <xTaskCreate+0x1c0>)
    5c68:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5c6c:	4e1b      	ldr	r6, [pc, #108]	; (5cdc <xTaskCreate+0x1d4>)
    5c6e:	47b0      	blx	r6
    5c70:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    5c74:	47b0      	blx	r6
    5c76:	f105 0050 	add.w	r0, r5, #80	; 0x50
    5c7a:	47b0      	blx	r6
    5c7c:	f105 0064 	add.w	r0, r5, #100	; 0x64
    5c80:	47b0      	blx	r6
    5c82:	f105 0078 	add.w	r0, r5, #120	; 0x78
    5c86:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    5c88:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    5c8c:	4648      	mov	r0, r9
    5c8e:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    5c90:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    5c94:	4638      	mov	r0, r7
    5c96:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    5c98:	f105 0014 	add.w	r0, r5, #20
    5c9c:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    5c9e:	4628      	mov	r0, r5
    5ca0:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    5ca2:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5ca6:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    5caa:	e7a0      	b.n	5bee <xTaskCreate+0xe6>
		xReturn = pdPASS;
    5cac:	2001      	movs	r0, #1
}
    5cae:	b003      	add	sp, #12
    5cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    5cb4:	2001      	movs	r0, #1
	return xReturn;
    5cb6:	e7fa      	b.n	5cae <xTaskCreate+0x1a6>
    5cb8:	00004f35 	.word	0x00004f35
    5cbc:	00006b65 	.word	0x00006b65
    5cc0:	00004c31 	.word	0x00004c31
    5cc4:	00004c85 	.word	0x00004c85
    5cc8:	2000333c 	.word	0x2000333c
    5ccc:	00004b41 	.word	0x00004b41
    5cd0:	00004cc9 	.word	0x00004cc9
    5cd4:	e000ed04 	.word	0xe000ed04
    5cd8:	00005009 	.word	0x00005009
    5cdc:	00004b25 	.word	0x00004b25
    5ce0:	00004b3b 	.word	0x00004b3b

00005ce4 <vTaskStartScheduler>:
{
    5ce4:	b510      	push	{r4, lr}
    5ce6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    5ce8:	4b19      	ldr	r3, [pc, #100]	; (5d50 <vTaskStartScheduler+0x6c>)
    5cea:	9301      	str	r3, [sp, #4]
    5cec:	2300      	movs	r3, #0
    5cee:	9300      	str	r3, [sp, #0]
    5cf0:	2280      	movs	r2, #128	; 0x80
    5cf2:	4918      	ldr	r1, [pc, #96]	; (5d54 <vTaskStartScheduler+0x70>)
    5cf4:	4818      	ldr	r0, [pc, #96]	; (5d58 <vTaskStartScheduler+0x74>)
    5cf6:	4c19      	ldr	r4, [pc, #100]	; (5d5c <vTaskStartScheduler+0x78>)
    5cf8:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    5cfa:	2801      	cmp	r0, #1
    5cfc:	d004      	beq.n	5d08 <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    5cfe:	f1b0 3fff 	cmp.w	r0, #4294967295
    5d02:	d01b      	beq.n	5d3c <vTaskStartScheduler+0x58>
}
    5d04:	b002      	add	sp, #8
    5d06:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    5d08:	4b15      	ldr	r3, [pc, #84]	; (5d60 <vTaskStartScheduler+0x7c>)
    5d0a:	4798      	blx	r3
	if (xReturn == pdPASS) {
    5d0c:	2801      	cmp	r0, #1
    5d0e:	d1f6      	bne.n	5cfe <vTaskStartScheduler+0x1a>
    5d10:	f04f 0380 	mov.w	r3, #128	; 0x80
    5d14:	f383 8811 	msr	BASEPRI, r3
    5d18:	f3bf 8f6f 	isb	sy
    5d1c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    5d20:	4b10      	ldr	r3, [pc, #64]	; (5d64 <vTaskStartScheduler+0x80>)
    5d22:	f04f 32ff 	mov.w	r2, #4294967295
    5d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    5d2a:	2201      	movs	r2, #1
    5d2c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    5d30:	2200      	movs	r2, #0
    5d32:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    5d36:	4b0c      	ldr	r3, [pc, #48]	; (5d68 <vTaskStartScheduler+0x84>)
    5d38:	4798      	blx	r3
    5d3a:	e7e3      	b.n	5d04 <vTaskStartScheduler+0x20>
    5d3c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5d40:	f383 8811 	msr	BASEPRI, r3
    5d44:	f3bf 8f6f 	isb	sy
    5d48:	f3bf 8f4f 	dsb	sy
    5d4c:	e7fe      	b.n	5d4c <vTaskStartScheduler+0x68>
    5d4e:	bf00      	nop
    5d50:	20003418 	.word	0x20003418
    5d54:	00008cfc 	.word	0x00008cfc
    5d58:	00005a39 	.word	0x00005a39
    5d5c:	00005b09 	.word	0x00005b09
    5d60:	0000672d 	.word	0x0000672d
    5d64:	2000333c 	.word	0x2000333c
    5d68:	00004db9 	.word	0x00004db9

00005d6c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    5d6c:	4a03      	ldr	r2, [pc, #12]	; (5d7c <vTaskSuspendAll+0x10>)
    5d6e:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    5d72:	3301      	adds	r3, #1
    5d74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    5d78:	4770      	bx	lr
    5d7a:	bf00      	nop
    5d7c:	2000333c 	.word	0x2000333c

00005d80 <xTaskGetTickCount>:
		xTicks = xTickCount;
    5d80:	4b01      	ldr	r3, [pc, #4]	; (5d88 <xTaskGetTickCount+0x8>)
    5d82:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    5d86:	4770      	bx	lr
    5d88:	2000333c 	.word	0x2000333c

00005d8c <xTaskIncrementTick>:
{
    5d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5d90:	4b44      	ldr	r3, [pc, #272]	; (5ea4 <xTaskIncrementTick+0x118>)
    5d92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5d96:	2b00      	cmp	r3, #0
    5d98:	d173      	bne.n	5e82 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    5d9a:	4b42      	ldr	r3, [pc, #264]	; (5ea4 <xTaskIncrementTick+0x118>)
    5d9c:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    5da0:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    5da2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    5da6:	b9e6      	cbnz	r6, 5de2 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    5da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    5dac:	681b      	ldr	r3, [r3, #0]
    5dae:	b143      	cbz	r3, 5dc2 <xTaskIncrementTick+0x36>
    5db0:	f04f 0380 	mov.w	r3, #128	; 0x80
    5db4:	f383 8811 	msr	BASEPRI, r3
    5db8:	f3bf 8f6f 	isb	sy
    5dbc:	f3bf 8f4f 	dsb	sy
    5dc0:	e7fe      	b.n	5dc0 <xTaskIncrementTick+0x34>
    5dc2:	4b38      	ldr	r3, [pc, #224]	; (5ea4 <xTaskIncrementTick+0x118>)
    5dc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    5dc8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    5dcc:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    5dd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    5dd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    5dd8:	3201      	adds	r2, #1
    5dda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    5dde:	4b32      	ldr	r3, [pc, #200]	; (5ea8 <xTaskIncrementTick+0x11c>)
    5de0:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    5de2:	4b30      	ldr	r3, [pc, #192]	; (5ea4 <xTaskIncrementTick+0x118>)
    5de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    5de8:	429e      	cmp	r6, r3
    5dea:	d20d      	bcs.n	5e08 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    5dec:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    5dee:	4b2d      	ldr	r3, [pc, #180]	; (5ea4 <xTaskIncrementTick+0x118>)
    5df0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5df4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    5df6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5dfa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    5e00:	2b02      	cmp	r3, #2
    5e02:	bf28      	it	cs
    5e04:	2401      	movcs	r4, #1
    5e06:	e043      	b.n	5e90 <xTaskIncrementTick+0x104>
    5e08:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5e0a:	4d26      	ldr	r5, [pc, #152]	; (5ea4 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5e0c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5eb0 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    5e10:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    5e14:	e021      	b.n	5e5a <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5e16:	f04f 32ff 	mov.w	r2, #4294967295
    5e1a:	4b22      	ldr	r3, [pc, #136]	; (5ea4 <xTaskIncrementTick+0x118>)
    5e1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    5e20:	e7e5      	b.n	5dee <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    5e22:	4a20      	ldr	r2, [pc, #128]	; (5ea4 <xTaskIncrementTick+0x118>)
    5e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    5e28:	e7e1      	b.n	5dee <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    5e2a:	f107 0018 	add.w	r0, r7, #24
    5e2e:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    5e30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5e32:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    5e36:	4298      	cmp	r0, r3
    5e38:	bf88      	it	hi
    5e3a:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    5e3e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5e42:	4649      	mov	r1, r9
    5e44:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    5e48:	4b18      	ldr	r3, [pc, #96]	; (5eac <xTaskIncrementTick+0x120>)
    5e4a:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5e4c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    5e54:	429a      	cmp	r2, r3
    5e56:	bf28      	it	cs
    5e58:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5e5a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    5e5e:	681b      	ldr	r3, [r3, #0]
    5e60:	2b00      	cmp	r3, #0
    5e62:	d0d8      	beq.n	5e16 <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5e64:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    5e68:	68db      	ldr	r3, [r3, #12]
    5e6a:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    5e6c:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    5e6e:	429e      	cmp	r6, r3
    5e70:	d3d7      	bcc.n	5e22 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5e72:	f107 0904 	add.w	r9, r7, #4
    5e76:	4648      	mov	r0, r9
    5e78:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    5e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	d1d4      	bne.n	5e2a <xTaskIncrementTick+0x9e>
    5e80:	e7d6      	b.n	5e30 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    5e82:	4a08      	ldr	r2, [pc, #32]	; (5ea4 <xTaskIncrementTick+0x118>)
    5e84:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    5e88:	3301      	adds	r3, #1
    5e8a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    5e8e:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    5e90:	4b04      	ldr	r3, [pc, #16]	; (5ea4 <xTaskIncrementTick+0x118>)
    5e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    5e96:	2b00      	cmp	r3, #0
}
    5e98:	bf0c      	ite	eq
    5e9a:	4620      	moveq	r0, r4
    5e9c:	2001      	movne	r0, #1
    5e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ea2:	bf00      	nop
    5ea4:	2000333c 	.word	0x2000333c
    5ea8:	00005a5d 	.word	0x00005a5d
    5eac:	00004b41 	.word	0x00004b41
    5eb0:	00004b8d 	.word	0x00004b8d

00005eb4 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    5eb4:	4b3a      	ldr	r3, [pc, #232]	; (5fa0 <xTaskResumeAll+0xec>)
    5eb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5eba:	b943      	cbnz	r3, 5ece <xTaskResumeAll+0x1a>
    5ebc:	f04f 0380 	mov.w	r3, #128	; 0x80
    5ec0:	f383 8811 	msr	BASEPRI, r3
    5ec4:	f3bf 8f6f 	isb	sy
    5ec8:	f3bf 8f4f 	dsb	sy
    5ecc:	e7fe      	b.n	5ecc <xTaskResumeAll+0x18>
{
    5ece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    5ed2:	4b34      	ldr	r3, [pc, #208]	; (5fa4 <xTaskResumeAll+0xf0>)
    5ed4:	4798      	blx	r3
		--uxSchedulerSuspended;
    5ed6:	4b32      	ldr	r3, [pc, #200]	; (5fa0 <xTaskResumeAll+0xec>)
    5ed8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    5edc:	3a01      	subs	r2, #1
    5ede:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5ee2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5ee6:	2b00      	cmp	r3, #0
    5ee8:	d155      	bne.n	5f96 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    5eea:	4b2d      	ldr	r3, [pc, #180]	; (5fa0 <xTaskResumeAll+0xec>)
    5eec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5ef0:	b92b      	cbnz	r3, 5efe <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    5ef2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    5ef4:	4b2c      	ldr	r3, [pc, #176]	; (5fa8 <xTaskResumeAll+0xf4>)
    5ef6:	4798      	blx	r3
}
    5ef8:	4620      	mov	r0, r4
    5efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5efe:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5f00:	4c27      	ldr	r4, [pc, #156]	; (5fa0 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5f02:	4e2a      	ldr	r6, [pc, #168]	; (5fac <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    5f04:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5f08:	6963      	ldr	r3, [r4, #20]
    5f0a:	b1fb      	cbz	r3, 5f4c <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    5f0c:	6a23      	ldr	r3, [r4, #32]
    5f0e:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5f10:	f105 0018 	add.w	r0, r5, #24
    5f14:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5f16:	1d2f      	adds	r7, r5, #4
    5f18:	4638      	mov	r0, r7
    5f1a:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    5f1c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5f1e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    5f22:	4298      	cmp	r0, r3
    5f24:	bf88      	it	hi
    5f26:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    5f2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5f2e:	4639      	mov	r1, r7
    5f30:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    5f34:	4b1e      	ldr	r3, [pc, #120]	; (5fb0 <xTaskResumeAll+0xfc>)
    5f36:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5f38:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5f3c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    5f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5f40:	429a      	cmp	r2, r3
    5f42:	d3e1      	bcc.n	5f08 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    5f44:	2301      	movs	r3, #1
    5f46:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    5f4a:	e7dd      	b.n	5f08 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    5f4c:	b10d      	cbz	r5, 5f52 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    5f4e:	4b19      	ldr	r3, [pc, #100]	; (5fb4 <xTaskResumeAll+0x100>)
    5f50:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    5f52:	4b13      	ldr	r3, [pc, #76]	; (5fa0 <xTaskResumeAll+0xec>)
    5f54:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    5f58:	b17c      	cbz	r4, 5f7a <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    5f5a:	4f17      	ldr	r7, [pc, #92]	; (5fb8 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    5f5c:	461e      	mov	r6, r3
    5f5e:	2501      	movs	r5, #1
    5f60:	e001      	b.n	5f66 <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    5f62:	3c01      	subs	r4, #1
    5f64:	d005      	beq.n	5f72 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    5f66:	47b8      	blx	r7
    5f68:	2800      	cmp	r0, #0
    5f6a:	d0fa      	beq.n	5f62 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    5f6c:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    5f70:	e7f7      	b.n	5f62 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    5f72:	2200      	movs	r2, #0
    5f74:	4b0a      	ldr	r3, [pc, #40]	; (5fa0 <xTaskResumeAll+0xec>)
    5f76:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    5f7a:	4b09      	ldr	r3, [pc, #36]	; (5fa0 <xTaskResumeAll+0xec>)
    5f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    5f80:	b15b      	cbz	r3, 5f9a <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    5f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5f86:	4b0d      	ldr	r3, [pc, #52]	; (5fbc <xTaskResumeAll+0x108>)
    5f88:	601a      	str	r2, [r3, #0]
    5f8a:	f3bf 8f4f 	dsb	sy
    5f8e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    5f92:	2401      	movs	r4, #1
    5f94:	e7ae      	b.n	5ef4 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    5f96:	2400      	movs	r4, #0
    5f98:	e7ac      	b.n	5ef4 <xTaskResumeAll+0x40>
    5f9a:	2400      	movs	r4, #0
    5f9c:	e7aa      	b.n	5ef4 <xTaskResumeAll+0x40>
    5f9e:	bf00      	nop
    5fa0:	2000333c 	.word	0x2000333c
    5fa4:	00004c85 	.word	0x00004c85
    5fa8:	00004cc9 	.word	0x00004cc9
    5fac:	00004b8d 	.word	0x00004b8d
    5fb0:	00004b41 	.word	0x00004b41
    5fb4:	00005a5d 	.word	0x00005a5d
    5fb8:	00005d8d 	.word	0x00005d8d
    5fbc:	e000ed04 	.word	0xe000ed04

00005fc0 <vTaskDelay>:
{
    5fc0:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    5fc2:	b1b0      	cbz	r0, 5ff2 <vTaskDelay+0x32>
    5fc4:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    5fc6:	4b0f      	ldr	r3, [pc, #60]	; (6004 <vTaskDelay+0x44>)
    5fc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5fcc:	b143      	cbz	r3, 5fe0 <vTaskDelay+0x20>
    5fce:	f04f 0380 	mov.w	r3, #128	; 0x80
    5fd2:	f383 8811 	msr	BASEPRI, r3
    5fd6:	f3bf 8f6f 	isb	sy
    5fda:	f3bf 8f4f 	dsb	sy
    5fde:	e7fe      	b.n	5fde <vTaskDelay+0x1e>
		vTaskSuspendAll();
    5fe0:	4b09      	ldr	r3, [pc, #36]	; (6008 <vTaskDelay+0x48>)
    5fe2:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    5fe4:	2100      	movs	r1, #0
    5fe6:	4620      	mov	r0, r4
    5fe8:	4b08      	ldr	r3, [pc, #32]	; (600c <vTaskDelay+0x4c>)
    5fea:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    5fec:	4b08      	ldr	r3, [pc, #32]	; (6010 <vTaskDelay+0x50>)
    5fee:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    5ff0:	b938      	cbnz	r0, 6002 <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    5ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5ff6:	4b07      	ldr	r3, [pc, #28]	; (6014 <vTaskDelay+0x54>)
    5ff8:	601a      	str	r2, [r3, #0]
    5ffa:	f3bf 8f4f 	dsb	sy
    5ffe:	f3bf 8f6f 	isb	sy
    6002:	bd10      	pop	{r4, pc}
    6004:	2000333c 	.word	0x2000333c
    6008:	00005d6d 	.word	0x00005d6d
    600c:	00005a89 	.word	0x00005a89
    6010:	00005eb5 	.word	0x00005eb5
    6014:	e000ed04 	.word	0xe000ed04

00006018 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    6018:	4b2c      	ldr	r3, [pc, #176]	; (60cc <vTaskSwitchContext+0xb4>)
    601a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    601e:	bb8b      	cbnz	r3, 6084 <vTaskSwitchContext+0x6c>
{
    6020:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    6022:	4b2a      	ldr	r3, [pc, #168]	; (60cc <vTaskSwitchContext+0xb4>)
    6024:	2200      	movs	r2, #0
    6026:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    602a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    602e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6032:	6812      	ldr	r2, [r2, #0]
    6034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6036:	429a      	cmp	r2, r3
    6038:	d807      	bhi.n	604a <vTaskSwitchContext+0x32>
    603a:	4b24      	ldr	r3, [pc, #144]	; (60cc <vTaskSwitchContext+0xb4>)
    603c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    6040:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    6044:	3134      	adds	r1, #52	; 0x34
    6046:	4b22      	ldr	r3, [pc, #136]	; (60d0 <vTaskSwitchContext+0xb8>)
    6048:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    604a:	4a20      	ldr	r2, [pc, #128]	; (60cc <vTaskSwitchContext+0xb4>)
    604c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    6050:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6054:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    6058:	6a92      	ldr	r2, [r2, #40]	; 0x28
    605a:	b9c2      	cbnz	r2, 608e <vTaskSwitchContext+0x76>
    605c:	b14b      	cbz	r3, 6072 <vTaskSwitchContext+0x5a>
    605e:	491b      	ldr	r1, [pc, #108]	; (60cc <vTaskSwitchContext+0xb4>)
    6060:	3b01      	subs	r3, #1
    6062:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    6066:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    606a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    606c:	b97a      	cbnz	r2, 608e <vTaskSwitchContext+0x76>
    606e:	2b00      	cmp	r3, #0
    6070:	d1f6      	bne.n	6060 <vTaskSwitchContext+0x48>
    6072:	f04f 0380 	mov.w	r3, #128	; 0x80
    6076:	f383 8811 	msr	BASEPRI, r3
    607a:	f3bf 8f6f 	isb	sy
    607e:	f3bf 8f4f 	dsb	sy
    6082:	e7fe      	b.n	6082 <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    6084:	2201      	movs	r2, #1
    6086:	4b11      	ldr	r3, [pc, #68]	; (60cc <vTaskSwitchContext+0xb4>)
    6088:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    608c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    608e:	4a0f      	ldr	r2, [pc, #60]	; (60cc <vTaskSwitchContext+0xb4>)
    6090:	0099      	lsls	r1, r3, #2
    6092:	18c8      	adds	r0, r1, r3
    6094:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    6098:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    609a:	6864      	ldr	r4, [r4, #4]
    609c:	62c4      	str	r4, [r0, #44]	; 0x2c
    609e:	4419      	add	r1, r3
    60a0:	4602      	mov	r2, r0
    60a2:	3230      	adds	r2, #48	; 0x30
    60a4:	4294      	cmp	r4, r2
    60a6:	d00b      	beq.n	60c0 <vTaskSwitchContext+0xa8>
    60a8:	4a08      	ldr	r2, [pc, #32]	; (60cc <vTaskSwitchContext+0xb4>)
    60aa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    60ae:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    60b2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    60b4:	68c9      	ldr	r1, [r1, #12]
    60b6:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    60ba:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    60be:	bd10      	pop	{r4, pc}
    60c0:	6860      	ldr	r0, [r4, #4]
    60c2:	4a02      	ldr	r2, [pc, #8]	; (60cc <vTaskSwitchContext+0xb4>)
    60c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    60c8:	62d0      	str	r0, [r2, #44]	; 0x2c
    60ca:	e7ed      	b.n	60a8 <vTaskSwitchContext+0x90>
    60cc:	2000333c 	.word	0x2000333c
    60d0:	000002d1 	.word	0x000002d1

000060d4 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    60d4:	b940      	cbnz	r0, 60e8 <vTaskPlaceOnEventList+0x14>
    60d6:	f04f 0380 	mov.w	r3, #128	; 0x80
    60da:	f383 8811 	msr	BASEPRI, r3
    60de:	f3bf 8f6f 	isb	sy
    60e2:	f3bf 8f4f 	dsb	sy
    60e6:	e7fe      	b.n	60e6 <vTaskPlaceOnEventList+0x12>
{
    60e8:	b510      	push	{r4, lr}
    60ea:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    60ec:	4b05      	ldr	r3, [pc, #20]	; (6104 <vTaskPlaceOnEventList+0x30>)
    60ee:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    60f2:	3118      	adds	r1, #24
    60f4:	4b04      	ldr	r3, [pc, #16]	; (6108 <vTaskPlaceOnEventList+0x34>)
    60f6:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    60f8:	2101      	movs	r1, #1
    60fa:	4620      	mov	r0, r4
    60fc:	4b03      	ldr	r3, [pc, #12]	; (610c <vTaskPlaceOnEventList+0x38>)
    60fe:	4798      	blx	r3
    6100:	bd10      	pop	{r4, pc}
    6102:	bf00      	nop
    6104:	2000333c 	.word	0x2000333c
    6108:	00004b59 	.word	0x00004b59
    610c:	00005a89 	.word	0x00005a89

00006110 <vTaskPlaceOnEventListRestricted>:
{
    6110:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    6112:	b180      	cbz	r0, 6136 <vTaskPlaceOnEventListRestricted+0x26>
    6114:	4614      	mov	r4, r2
    6116:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    6118:	4b0b      	ldr	r3, [pc, #44]	; (6148 <vTaskPlaceOnEventListRestricted+0x38>)
    611a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    611e:	3118      	adds	r1, #24
    6120:	4b0a      	ldr	r3, [pc, #40]	; (614c <vTaskPlaceOnEventListRestricted+0x3c>)
    6122:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    6124:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    6126:	4621      	mov	r1, r4
    6128:	bf0c      	ite	eq
    612a:	4628      	moveq	r0, r5
    612c:	f04f 30ff 	movne.w	r0, #4294967295
    6130:	4b07      	ldr	r3, [pc, #28]	; (6150 <vTaskPlaceOnEventListRestricted+0x40>)
    6132:	4798      	blx	r3
    6134:	bd38      	pop	{r3, r4, r5, pc}
    6136:	f04f 0380 	mov.w	r3, #128	; 0x80
    613a:	f383 8811 	msr	BASEPRI, r3
    613e:	f3bf 8f6f 	isb	sy
    6142:	f3bf 8f4f 	dsb	sy
    6146:	e7fe      	b.n	6146 <vTaskPlaceOnEventListRestricted+0x36>
    6148:	2000333c 	.word	0x2000333c
    614c:	00004b41 	.word	0x00004b41
    6150:	00005a89 	.word	0x00005a89

00006154 <xTaskRemoveFromEventList>:
{
    6154:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    6156:	68c3      	ldr	r3, [r0, #12]
    6158:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    615a:	2c00      	cmp	r4, #0
    615c:	d02a      	beq.n	61b4 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    615e:	f104 0518 	add.w	r5, r4, #24
    6162:	4628      	mov	r0, r5
    6164:	4b1a      	ldr	r3, [pc, #104]	; (61d0 <xTaskRemoveFromEventList+0x7c>)
    6166:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    6168:	4b1a      	ldr	r3, [pc, #104]	; (61d4 <xTaskRemoveFromEventList+0x80>)
    616a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    616e:	bb53      	cbnz	r3, 61c6 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    6170:	1d25      	adds	r5, r4, #4
    6172:	4628      	mov	r0, r5
    6174:	4b16      	ldr	r3, [pc, #88]	; (61d0 <xTaskRemoveFromEventList+0x7c>)
    6176:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    6178:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    617a:	4b16      	ldr	r3, [pc, #88]	; (61d4 <xTaskRemoveFromEventList+0x80>)
    617c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6180:	4298      	cmp	r0, r3
    6182:	bf84      	itt	hi
    6184:	4b13      	ldrhi	r3, [pc, #76]	; (61d4 <xTaskRemoveFromEventList+0x80>)
    6186:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    618a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    618e:	4629      	mov	r1, r5
    6190:	4b11      	ldr	r3, [pc, #68]	; (61d8 <xTaskRemoveFromEventList+0x84>)
    6192:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6196:	4b11      	ldr	r3, [pc, #68]	; (61dc <xTaskRemoveFromEventList+0x88>)
    6198:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    619a:	4b0e      	ldr	r3, [pc, #56]	; (61d4 <xTaskRemoveFromEventList+0x80>)
    619c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    61a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    61a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    61a4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    61a6:	bf83      	ittte	hi
    61a8:	2001      	movhi	r0, #1
    61aa:	4b0a      	ldrhi	r3, [pc, #40]	; (61d4 <xTaskRemoveFromEventList+0x80>)
    61ac:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    61b0:	2000      	movls	r0, #0
}
    61b2:	bd38      	pop	{r3, r4, r5, pc}
    61b4:	f04f 0380 	mov.w	r3, #128	; 0x80
    61b8:	f383 8811 	msr	BASEPRI, r3
    61bc:	f3bf 8f6f 	isb	sy
    61c0:	f3bf 8f4f 	dsb	sy
    61c4:	e7fe      	b.n	61c4 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    61c6:	4629      	mov	r1, r5
    61c8:	4805      	ldr	r0, [pc, #20]	; (61e0 <xTaskRemoveFromEventList+0x8c>)
    61ca:	4b04      	ldr	r3, [pc, #16]	; (61dc <xTaskRemoveFromEventList+0x88>)
    61cc:	4798      	blx	r3
    61ce:	e7e4      	b.n	619a <xTaskRemoveFromEventList+0x46>
    61d0:	00004b8d 	.word	0x00004b8d
    61d4:	2000333c 	.word	0x2000333c
    61d8:	20003364 	.word	0x20003364
    61dc:	00004b41 	.word	0x00004b41
    61e0:	20003350 	.word	0x20003350

000061e4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    61e4:	4b03      	ldr	r3, [pc, #12]	; (61f4 <vTaskInternalSetTimeOutState+0x10>)
    61e6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    61ea:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    61ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    61f0:	6043      	str	r3, [r0, #4]
    61f2:	4770      	bx	lr
    61f4:	2000333c 	.word	0x2000333c

000061f8 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    61f8:	b1f8      	cbz	r0, 623a <xTaskCheckForTimeOut+0x42>
{
    61fa:	b570      	push	{r4, r5, r6, lr}
    61fc:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    61fe:	b329      	cbz	r1, 624c <xTaskCheckForTimeOut+0x54>
    6200:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    6202:	4b1c      	ldr	r3, [pc, #112]	; (6274 <xTaskCheckForTimeOut+0x7c>)
    6204:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    6206:	4b1c      	ldr	r3, [pc, #112]	; (6278 <xTaskCheckForTimeOut+0x80>)
    6208:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    620c:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    620e:	6823      	ldr	r3, [r4, #0]
    6210:	f1b3 3fff 	cmp.w	r3, #4294967295
    6214:	d02a      	beq.n	626c <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    6216:	4818      	ldr	r0, [pc, #96]	; (6278 <xTaskCheckForTimeOut+0x80>)
    6218:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    621c:	682e      	ldr	r6, [r5, #0]
    621e:	4286      	cmp	r6, r0
    6220:	d001      	beq.n	6226 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    6222:	428a      	cmp	r2, r1
    6224:	d224      	bcs.n	6270 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    6226:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    6228:	429a      	cmp	r2, r3
    622a:	d318      	bcc.n	625e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    622c:	2300      	movs	r3, #0
    622e:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    6230:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    6232:	4b12      	ldr	r3, [pc, #72]	; (627c <xTaskCheckForTimeOut+0x84>)
    6234:	4798      	blx	r3
}
    6236:	4620      	mov	r0, r4
    6238:	bd70      	pop	{r4, r5, r6, pc}
    623a:	f04f 0380 	mov.w	r3, #128	; 0x80
    623e:	f383 8811 	msr	BASEPRI, r3
    6242:	f3bf 8f6f 	isb	sy
    6246:	f3bf 8f4f 	dsb	sy
    624a:	e7fe      	b.n	624a <xTaskCheckForTimeOut+0x52>
    624c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6250:	f383 8811 	msr	BASEPRI, r3
    6254:	f3bf 8f6f 	isb	sy
    6258:	f3bf 8f4f 	dsb	sy
    625c:	e7fe      	b.n	625c <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    625e:	1a9b      	subs	r3, r3, r2
    6260:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    6262:	4628      	mov	r0, r5
    6264:	4b06      	ldr	r3, [pc, #24]	; (6280 <xTaskCheckForTimeOut+0x88>)
    6266:	4798      	blx	r3
			xReturn = pdFALSE;
    6268:	2400      	movs	r4, #0
    626a:	e7e2      	b.n	6232 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    626c:	2400      	movs	r4, #0
    626e:	e7e0      	b.n	6232 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    6270:	2401      	movs	r4, #1
    6272:	e7de      	b.n	6232 <xTaskCheckForTimeOut+0x3a>
    6274:	00004c85 	.word	0x00004c85
    6278:	2000333c 	.word	0x2000333c
    627c:	00004cc9 	.word	0x00004cc9
    6280:	000061e5 	.word	0x000061e5

00006284 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    6284:	2201      	movs	r2, #1
    6286:	4b02      	ldr	r3, [pc, #8]	; (6290 <vTaskMissedYield+0xc>)
    6288:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    628c:	4770      	bx	lr
    628e:	bf00      	nop
    6290:	2000333c 	.word	0x2000333c

00006294 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    6294:	4b06      	ldr	r3, [pc, #24]	; (62b0 <xTaskGetSchedulerState+0x1c>)
    6296:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    629a:	b13b      	cbz	r3, 62ac <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    629c:	4b04      	ldr	r3, [pc, #16]	; (62b0 <xTaskGetSchedulerState+0x1c>)
    629e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    62a2:	2b00      	cmp	r3, #0
    62a4:	bf0c      	ite	eq
    62a6:	2002      	moveq	r0, #2
    62a8:	2000      	movne	r0, #0
    62aa:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    62ac:	2001      	movs	r0, #1
}
    62ae:	4770      	bx	lr
    62b0:	2000333c 	.word	0x2000333c

000062b4 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    62b4:	2800      	cmp	r0, #0
    62b6:	d045      	beq.n	6344 <xTaskPriorityInherit+0x90>
{
    62b8:	b538      	push	{r3, r4, r5, lr}
    62ba:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    62bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    62be:	4922      	ldr	r1, [pc, #136]	; (6348 <xTaskPriorityInherit+0x94>)
    62c0:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    62c4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    62c6:	428a      	cmp	r2, r1
    62c8:	d232      	bcs.n	6330 <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    62ca:	6981      	ldr	r1, [r0, #24]
    62cc:	2900      	cmp	r1, #0
    62ce:	db06      	blt.n	62de <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    62d0:	491d      	ldr	r1, [pc, #116]	; (6348 <xTaskPriorityInherit+0x94>)
    62d2:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    62d6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    62d8:	f1c1 0105 	rsb	r1, r1, #5
    62dc:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    62de:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    62e2:	491a      	ldr	r1, [pc, #104]	; (634c <xTaskPriorityInherit+0x98>)
    62e4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    62e8:	6969      	ldr	r1, [r5, #20]
    62ea:	4291      	cmp	r1, r2
    62ec:	d006      	beq.n	62fc <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    62ee:	4a16      	ldr	r2, [pc, #88]	; (6348 <xTaskPriorityInherit+0x94>)
    62f0:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    62f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    62f6:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    62f8:	2001      	movs	r0, #1
    62fa:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    62fc:	1d2c      	adds	r4, r5, #4
    62fe:	4620      	mov	r0, r4
    6300:	4b13      	ldr	r3, [pc, #76]	; (6350 <xTaskPriorityInherit+0x9c>)
    6302:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    6304:	4b10      	ldr	r3, [pc, #64]	; (6348 <xTaskPriorityInherit+0x94>)
    6306:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    630a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    630c:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    630e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6312:	4298      	cmp	r0, r3
    6314:	bf84      	itt	hi
    6316:	4b0c      	ldrhi	r3, [pc, #48]	; (6348 <xTaskPriorityInherit+0x94>)
    6318:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    631c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6320:	4621      	mov	r1, r4
    6322:	4b0a      	ldr	r3, [pc, #40]	; (634c <xTaskPriorityInherit+0x98>)
    6324:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6328:	4b0a      	ldr	r3, [pc, #40]	; (6354 <xTaskPriorityInherit+0xa0>)
    632a:	4798      	blx	r3
			xReturn = pdTRUE;
    632c:	2001      	movs	r0, #1
    632e:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    6330:	4a05      	ldr	r2, [pc, #20]	; (6348 <xTaskPriorityInherit+0x94>)
    6332:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    6336:	6c40      	ldr	r0, [r0, #68]	; 0x44
    6338:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    633a:	4298      	cmp	r0, r3
    633c:	bf2c      	ite	cs
    633e:	2000      	movcs	r0, #0
    6340:	2001      	movcc	r0, #1
    6342:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    6344:	2000      	movs	r0, #0
	return xReturn;
    6346:	4770      	bx	lr
    6348:	2000333c 	.word	0x2000333c
    634c:	20003364 	.word	0x20003364
    6350:	00004b8d 	.word	0x00004b8d
    6354:	00004b41 	.word	0x00004b41

00006358 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    6358:	2800      	cmp	r0, #0
    635a:	d03c      	beq.n	63d6 <xTaskPriorityDisinherit+0x7e>
{
    635c:	b538      	push	{r3, r4, r5, lr}
    635e:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    6360:	4a20      	ldr	r2, [pc, #128]	; (63e4 <xTaskPriorityDisinherit+0x8c>)
    6362:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    6366:	4290      	cmp	r0, r2
    6368:	d008      	beq.n	637c <xTaskPriorityDisinherit+0x24>
    636a:	f04f 0380 	mov.w	r3, #128	; 0x80
    636e:	f383 8811 	msr	BASEPRI, r3
    6372:	f3bf 8f6f 	isb	sy
    6376:	f3bf 8f4f 	dsb	sy
    637a:	e7fe      	b.n	637a <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    637c:	6c82      	ldr	r2, [r0, #72]	; 0x48
    637e:	b942      	cbnz	r2, 6392 <xTaskPriorityDisinherit+0x3a>
    6380:	f04f 0380 	mov.w	r3, #128	; 0x80
    6384:	f383 8811 	msr	BASEPRI, r3
    6388:	f3bf 8f6f 	isb	sy
    638c:	f3bf 8f4f 	dsb	sy
    6390:	e7fe      	b.n	6390 <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    6392:	3a01      	subs	r2, #1
    6394:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    6396:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    6398:	6c61      	ldr	r1, [r4, #68]	; 0x44
    639a:	4288      	cmp	r0, r1
    639c:	d01d      	beq.n	63da <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    639e:	b9f2      	cbnz	r2, 63de <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    63a0:	1d25      	adds	r5, r4, #4
    63a2:	4628      	mov	r0, r5
    63a4:	4b10      	ldr	r3, [pc, #64]	; (63e8 <xTaskPriorityDisinherit+0x90>)
    63a6:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    63a8:	6c60      	ldr	r0, [r4, #68]	; 0x44
    63aa:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    63ac:	f1c0 0305 	rsb	r3, r0, #5
    63b0:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    63b2:	4b0c      	ldr	r3, [pc, #48]	; (63e4 <xTaskPriorityDisinherit+0x8c>)
    63b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    63b8:	4298      	cmp	r0, r3
    63ba:	bf84      	itt	hi
    63bc:	4b09      	ldrhi	r3, [pc, #36]	; (63e4 <xTaskPriorityDisinherit+0x8c>)
    63be:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    63c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    63c6:	4629      	mov	r1, r5
    63c8:	4b08      	ldr	r3, [pc, #32]	; (63ec <xTaskPriorityDisinherit+0x94>)
    63ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    63ce:	4b08      	ldr	r3, [pc, #32]	; (63f0 <xTaskPriorityDisinherit+0x98>)
    63d0:	4798      	blx	r3
				xReturn = pdTRUE;
    63d2:	2001      	movs	r0, #1
    63d4:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    63d6:	2000      	movs	r0, #0
    63d8:	4770      	bx	lr
    63da:	2000      	movs	r0, #0
    63dc:	bd38      	pop	{r3, r4, r5, pc}
    63de:	2000      	movs	r0, #0
}
    63e0:	bd38      	pop	{r3, r4, r5, pc}
    63e2:	bf00      	nop
    63e4:	2000333c 	.word	0x2000333c
    63e8:	00004b8d 	.word	0x00004b8d
    63ec:	20003364 	.word	0x20003364
    63f0:	00004b41 	.word	0x00004b41

000063f4 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    63f4:	2800      	cmp	r0, #0
    63f6:	d049      	beq.n	648c <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    63f8:	b538      	push	{r3, r4, r5, lr}
    63fa:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    63fc:	6c80      	ldr	r0, [r0, #72]	; 0x48
    63fe:	b940      	cbnz	r0, 6412 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    6400:	f04f 0380 	mov.w	r3, #128	; 0x80
    6404:	f383 8811 	msr	BASEPRI, r3
    6408:	f3bf 8f6f 	isb	sy
    640c:	f3bf 8f4f 	dsb	sy
    6410:	e7fe      	b.n	6410 <vTaskPriorityDisinheritAfterTimeout+0x1c>
    6412:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6414:	428a      	cmp	r2, r1
    6416:	bf38      	it	cc
    6418:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    641a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    641c:	4291      	cmp	r1, r2
    641e:	d001      	beq.n	6424 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    6420:	2801      	cmp	r0, #1
    6422:	d000      	beq.n	6426 <vTaskPriorityDisinheritAfterTimeout+0x32>
    6424:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    6426:	481a      	ldr	r0, [pc, #104]	; (6490 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    6428:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    642c:	4284      	cmp	r4, r0
    642e:	d108      	bne.n	6442 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    6430:	f04f 0380 	mov.w	r3, #128	; 0x80
    6434:	f383 8811 	msr	BASEPRI, r3
    6438:	f3bf 8f6f 	isb	sy
    643c:	f3bf 8f4f 	dsb	sy
    6440:	e7fe      	b.n	6440 <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    6442:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    6444:	69a0      	ldr	r0, [r4, #24]
    6446:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    6448:	bfa4      	itt	ge
    644a:	f1c2 0205 	rsbge	r2, r2, #5
    644e:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    6450:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    6454:	4a0f      	ldr	r2, [pc, #60]	; (6494 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    6456:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    645a:	6962      	ldr	r2, [r4, #20]
    645c:	428a      	cmp	r2, r1
    645e:	d1e1      	bne.n	6424 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    6460:	1d25      	adds	r5, r4, #4
    6462:	4628      	mov	r0, r5
    6464:	4b0c      	ldr	r3, [pc, #48]	; (6498 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    6466:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    6468:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    646a:	4b09      	ldr	r3, [pc, #36]	; (6490 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    646c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6470:	4298      	cmp	r0, r3
    6472:	bf84      	itt	hi
    6474:	4b06      	ldrhi	r3, [pc, #24]	; (6490 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    6476:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    647a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    647e:	4629      	mov	r1, r5
    6480:	4b04      	ldr	r3, [pc, #16]	; (6494 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    6482:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6486:	4b05      	ldr	r3, [pc, #20]	; (649c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    6488:	4798      	blx	r3
}
    648a:	e7cb      	b.n	6424 <vTaskPriorityDisinheritAfterTimeout+0x30>
    648c:	4770      	bx	lr
    648e:	bf00      	nop
    6490:	2000333c 	.word	0x2000333c
    6494:	20003364 	.word	0x20003364
    6498:	00004b8d 	.word	0x00004b8d
    649c:	00004b41 	.word	0x00004b41

000064a0 <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    64a0:	4b06      	ldr	r3, [pc, #24]	; (64bc <pvTaskIncrementMutexHeldCount+0x1c>)
    64a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    64a6:	b12b      	cbz	r3, 64b4 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    64a8:	4b04      	ldr	r3, [pc, #16]	; (64bc <pvTaskIncrementMutexHeldCount+0x1c>)
    64aa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    64ae:	6c93      	ldr	r3, [r2, #72]	; 0x48
    64b0:	3301      	adds	r3, #1
    64b2:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    64b4:	4b01      	ldr	r3, [pc, #4]	; (64bc <pvTaskIncrementMutexHeldCount+0x1c>)
    64b6:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    64ba:	4770      	bx	lr
    64bc:	2000333c 	.word	0x2000333c

000064c0 <xTaskNotifyWait>:
{
    64c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64c2:	4607      	mov	r7, r0
    64c4:	460d      	mov	r5, r1
    64c6:	4614      	mov	r4, r2
    64c8:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    64ca:	4b25      	ldr	r3, [pc, #148]	; (6560 <xTaskNotifyWait+0xa0>)
    64cc:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    64ce:	4b25      	ldr	r3, [pc, #148]	; (6564 <xTaskNotifyWait+0xa4>)
    64d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    64d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    64d8:	b2db      	uxtb	r3, r3
    64da:	2b02      	cmp	r3, #2
    64dc:	d00c      	beq.n	64f8 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    64de:	4b21      	ldr	r3, [pc, #132]	; (6564 <xTaskNotifyWait+0xa4>)
    64e0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    64e4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    64e6:	ea20 0007 	bic.w	r0, r0, r7
    64ea:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    64ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    64f0:	2201      	movs	r2, #1
    64f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    64f6:	b9e6      	cbnz	r6, 6532 <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    64f8:	4b1b      	ldr	r3, [pc, #108]	; (6568 <xTaskNotifyWait+0xa8>)
    64fa:	4798      	blx	r3
	taskENTER_CRITICAL();
    64fc:	4b18      	ldr	r3, [pc, #96]	; (6560 <xTaskNotifyWait+0xa0>)
    64fe:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    6500:	b124      	cbz	r4, 650c <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    6502:	4b18      	ldr	r3, [pc, #96]	; (6564 <xTaskNotifyWait+0xa4>)
    6504:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    650a:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    650c:	4b15      	ldr	r3, [pc, #84]	; (6564 <xTaskNotifyWait+0xa4>)
    650e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6512:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    6516:	b2db      	uxtb	r3, r3
    6518:	2b02      	cmp	r3, #2
    651a:	d017      	beq.n	654c <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    651c:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    651e:	4b11      	ldr	r3, [pc, #68]	; (6564 <xTaskNotifyWait+0xa4>)
    6520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6524:	2200      	movs	r2, #0
    6526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    652a:	4b0f      	ldr	r3, [pc, #60]	; (6568 <xTaskNotifyWait+0xa8>)
    652c:	4798      	blx	r3
}
    652e:	4620      	mov	r0, r4
    6530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    6532:	4611      	mov	r1, r2
    6534:	4630      	mov	r0, r6
    6536:	4b0d      	ldr	r3, [pc, #52]	; (656c <xTaskNotifyWait+0xac>)
    6538:	4798      	blx	r3
				portYIELD_WITHIN_API();
    653a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    653e:	4b0c      	ldr	r3, [pc, #48]	; (6570 <xTaskNotifyWait+0xb0>)
    6540:	601a      	str	r2, [r3, #0]
    6542:	f3bf 8f4f 	dsb	sy
    6546:	f3bf 8f6f 	isb	sy
    654a:	e7d5      	b.n	64f8 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    654c:	4b05      	ldr	r3, [pc, #20]	; (6564 <xTaskNotifyWait+0xa4>)
    654e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6552:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    6554:	ea23 0505 	bic.w	r5, r3, r5
    6558:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    655a:	2401      	movs	r4, #1
    655c:	e7df      	b.n	651e <xTaskNotifyWait+0x5e>
    655e:	bf00      	nop
    6560:	00004c85 	.word	0x00004c85
    6564:	2000333c 	.word	0x2000333c
    6568:	00004cc9 	.word	0x00004cc9
    656c:	00005a89 	.word	0x00005a89
    6570:	e000ed04 	.word	0xe000ed04

00006574 <xTaskGenericNotifyFromISR>:
{
    6574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6578:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    657a:	b310      	cbz	r0, 65c2 <xTaskGenericNotifyFromISR+0x4e>
    657c:	4604      	mov	r4, r0
    657e:	4699      	mov	r9, r3
    6580:	4617      	mov	r7, r2
    6582:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    6584:	4b3e      	ldr	r3, [pc, #248]	; (6680 <xTaskGenericNotifyFromISR+0x10c>)
    6586:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    6588:	f3ef 8511 	mrs	r5, BASEPRI
    658c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6590:	f383 8811 	msr	BASEPRI, r3
    6594:	f3bf 8f6f 	isb	sy
    6598:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    659c:	f1b9 0f00 	cmp.w	r9, #0
    65a0:	d002      	beq.n	65a8 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    65a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    65a4:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    65a8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    65ac:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    65ae:	2202      	movs	r2, #2
    65b0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    65b4:	1e7a      	subs	r2, r7, #1
    65b6:	2a03      	cmp	r2, #3
    65b8:	d810      	bhi.n	65dc <xTaskGenericNotifyFromISR+0x68>
    65ba:	e8df f002 	tbb	[pc, r2]
    65be:	1c0b      	.short	0x1c0b
    65c0:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    65c2:	f04f 0380 	mov.w	r3, #128	; 0x80
    65c6:	f383 8811 	msr	BASEPRI, r3
    65ca:	f3bf 8f6f 	isb	sy
    65ce:	f3bf 8f4f 	dsb	sy
    65d2:	e7fe      	b.n	65d2 <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    65d4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    65d6:	ea42 0208 	orr.w	r2, r2, r8
    65da:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    65dc:	2b01      	cmp	r3, #1
    65de:	d147      	bne.n	6670 <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    65e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    65e2:	b1a3      	cbz	r3, 660e <xTaskGenericNotifyFromISR+0x9a>
    65e4:	f04f 0380 	mov.w	r3, #128	; 0x80
    65e8:	f383 8811 	msr	BASEPRI, r3
    65ec:	f3bf 8f6f 	isb	sy
    65f0:	f3bf 8f4f 	dsb	sy
    65f4:	e7fe      	b.n	65f4 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    65f6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    65f8:	3201      	adds	r2, #1
    65fa:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    65fc:	e7ee      	b.n	65dc <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    65fe:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    6602:	e7eb      	b.n	65dc <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    6604:	2b02      	cmp	r3, #2
    6606:	d031      	beq.n	666c <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    6608:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    660c:	e7e6      	b.n	65dc <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    660e:	4b1d      	ldr	r3, [pc, #116]	; (6684 <xTaskGenericNotifyFromISR+0x110>)
    6610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    6614:	b9fb      	cbnz	r3, 6656 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    6616:	1d27      	adds	r7, r4, #4
    6618:	4638      	mov	r0, r7
    661a:	4b1b      	ldr	r3, [pc, #108]	; (6688 <xTaskGenericNotifyFromISR+0x114>)
    661c:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    661e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6620:	4b18      	ldr	r3, [pc, #96]	; (6684 <xTaskGenericNotifyFromISR+0x110>)
    6622:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6626:	4298      	cmp	r0, r3
    6628:	bf84      	itt	hi
    662a:	4b16      	ldrhi	r3, [pc, #88]	; (6684 <xTaskGenericNotifyFromISR+0x110>)
    662c:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    6630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6634:	4639      	mov	r1, r7
    6636:	4b15      	ldr	r3, [pc, #84]	; (668c <xTaskGenericNotifyFromISR+0x118>)
    6638:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    663c:	4b14      	ldr	r3, [pc, #80]	; (6690 <xTaskGenericNotifyFromISR+0x11c>)
    663e:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    6640:	4b10      	ldr	r3, [pc, #64]	; (6684 <xTaskGenericNotifyFromISR+0x110>)
    6642:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6646:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    664a:	429a      	cmp	r2, r3
    664c:	d915      	bls.n	667a <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    664e:	b146      	cbz	r6, 6662 <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    6650:	2001      	movs	r0, #1
    6652:	6030      	str	r0, [r6, #0]
    6654:	e00d      	b.n	6672 <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    6656:	f104 0118 	add.w	r1, r4, #24
    665a:	480e      	ldr	r0, [pc, #56]	; (6694 <xTaskGenericNotifyFromISR+0x120>)
    665c:	4b0c      	ldr	r3, [pc, #48]	; (6690 <xTaskGenericNotifyFromISR+0x11c>)
    665e:	4798      	blx	r3
    6660:	e7ee      	b.n	6640 <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    6662:	2001      	movs	r0, #1
    6664:	4b07      	ldr	r3, [pc, #28]	; (6684 <xTaskGenericNotifyFromISR+0x110>)
    6666:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    666a:	e002      	b.n	6672 <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    666c:	2000      	movs	r0, #0
    666e:	e000      	b.n	6672 <xTaskGenericNotifyFromISR+0xfe>
    6670:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    6672:	f385 8811 	msr	BASEPRI, r5
}
    6676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    667a:	2001      	movs	r0, #1
    667c:	e7f9      	b.n	6672 <xTaskGenericNotifyFromISR+0xfe>
    667e:	bf00      	nop
    6680:	00004edd 	.word	0x00004edd
    6684:	2000333c 	.word	0x2000333c
    6688:	00004b8d 	.word	0x00004b8d
    668c:	20003364 	.word	0x20003364
    6690:	00004b41 	.word	0x00004b41
    6694:	20003350 	.word	0x20003350

00006698 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    6698:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    669a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    669c:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    669e:	4291      	cmp	r1, r2
    66a0:	d80c      	bhi.n	66bc <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    66a2:	1ad2      	subs	r2, r2, r3
    66a4:	6983      	ldr	r3, [r0, #24]
    66a6:	429a      	cmp	r2, r3
    66a8:	d301      	bcc.n	66ae <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    66aa:	2001      	movs	r0, #1
    66ac:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    66ae:	1d01      	adds	r1, r0, #4
    66b0:	4b09      	ldr	r3, [pc, #36]	; (66d8 <prvInsertTimerInActiveList+0x40>)
    66b2:	6818      	ldr	r0, [r3, #0]
    66b4:	4b09      	ldr	r3, [pc, #36]	; (66dc <prvInsertTimerInActiveList+0x44>)
    66b6:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    66b8:	2000      	movs	r0, #0
    66ba:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    66bc:	429a      	cmp	r2, r3
    66be:	d201      	bcs.n	66c4 <prvInsertTimerInActiveList+0x2c>
    66c0:	4299      	cmp	r1, r3
    66c2:	d206      	bcs.n	66d2 <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    66c4:	1d01      	adds	r1, r0, #4
    66c6:	4b04      	ldr	r3, [pc, #16]	; (66d8 <prvInsertTimerInActiveList+0x40>)
    66c8:	6858      	ldr	r0, [r3, #4]
    66ca:	4b04      	ldr	r3, [pc, #16]	; (66dc <prvInsertTimerInActiveList+0x44>)
    66cc:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    66ce:	2000      	movs	r0, #0
    66d0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    66d2:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    66d4:	bd08      	pop	{r3, pc}
    66d6:	bf00      	nop
    66d8:	20003428 	.word	0x20003428
    66dc:	00004b59 	.word	0x00004b59

000066e0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    66e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    66e2:	4b0d      	ldr	r3, [pc, #52]	; (6718 <prvCheckForValidListAndQueue+0x38>)
    66e4:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    66e6:	4b0d      	ldr	r3, [pc, #52]	; (671c <prvCheckForValidListAndQueue+0x3c>)
    66e8:	689b      	ldr	r3, [r3, #8]
    66ea:	b113      	cbz	r3, 66f2 <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    66ec:	4b0c      	ldr	r3, [pc, #48]	; (6720 <prvCheckForValidListAndQueue+0x40>)
    66ee:	4798      	blx	r3
    66f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    66f2:	4c0a      	ldr	r4, [pc, #40]	; (671c <prvCheckForValidListAndQueue+0x3c>)
    66f4:	f104 060c 	add.w	r6, r4, #12
    66f8:	4630      	mov	r0, r6
    66fa:	4f0a      	ldr	r7, [pc, #40]	; (6724 <prvCheckForValidListAndQueue+0x44>)
    66fc:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    66fe:	f104 0520 	add.w	r5, r4, #32
    6702:	4628      	mov	r0, r5
    6704:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    6706:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    6708:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    670a:	2200      	movs	r2, #0
    670c:	210c      	movs	r1, #12
    670e:	2014      	movs	r0, #20
    6710:	4b05      	ldr	r3, [pc, #20]	; (6728 <prvCheckForValidListAndQueue+0x48>)
    6712:	4798      	blx	r3
    6714:	60a0      	str	r0, [r4, #8]
    6716:	e7e9      	b.n	66ec <prvCheckForValidListAndQueue+0xc>
    6718:	00004c85 	.word	0x00004c85
    671c:	20003428 	.word	0x20003428
    6720:	00004cc9 	.word	0x00004cc9
    6724:	00004b25 	.word	0x00004b25
    6728:	000052d9 	.word	0x000052d9

0000672c <xTimerCreateTimerTask>:
{
    672c:	b510      	push	{r4, lr}
    672e:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    6730:	4b0d      	ldr	r3, [pc, #52]	; (6768 <xTimerCreateTimerTask+0x3c>)
    6732:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    6734:	4b0d      	ldr	r3, [pc, #52]	; (676c <xTimerCreateTimerTask+0x40>)
    6736:	689b      	ldr	r3, [r3, #8]
    6738:	b163      	cbz	r3, 6754 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    673a:	4b0d      	ldr	r3, [pc, #52]	; (6770 <xTimerCreateTimerTask+0x44>)
    673c:	9301      	str	r3, [sp, #4]
    673e:	2303      	movs	r3, #3
    6740:	9300      	str	r3, [sp, #0]
    6742:	2300      	movs	r3, #0
    6744:	2280      	movs	r2, #128	; 0x80
    6746:	490b      	ldr	r1, [pc, #44]	; (6774 <xTimerCreateTimerTask+0x48>)
    6748:	480b      	ldr	r0, [pc, #44]	; (6778 <xTimerCreateTimerTask+0x4c>)
    674a:	4c0c      	ldr	r4, [pc, #48]	; (677c <xTimerCreateTimerTask+0x50>)
    674c:	47a0      	blx	r4
	configASSERT(xReturn);
    674e:	b108      	cbz	r0, 6754 <xTimerCreateTimerTask+0x28>
}
    6750:	b002      	add	sp, #8
    6752:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    6754:	f04f 0380 	mov.w	r3, #128	; 0x80
    6758:	f383 8811 	msr	BASEPRI, r3
    675c:	f3bf 8f6f 	isb	sy
    6760:	f3bf 8f4f 	dsb	sy
    6764:	e7fe      	b.n	6764 <xTimerCreateTimerTask+0x38>
    6766:	bf00      	nop
    6768:	000066e1 	.word	0x000066e1
    676c:	20003428 	.word	0x20003428
    6770:	2000345c 	.word	0x2000345c
    6774:	00008d14 	.word	0x00008d14
    6778:	000068ed 	.word	0x000068ed
    677c:	00005b09 	.word	0x00005b09

00006780 <xTimerCreate>:
{
    6780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6784:	4680      	mov	r8, r0
    6786:	460d      	mov	r5, r1
    6788:	4617      	mov	r7, r2
    678a:	461e      	mov	r6, r3
	pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t));
    678c:	202c      	movs	r0, #44	; 0x2c
    678e:	4b0e      	ldr	r3, [pc, #56]	; (67c8 <xTimerCreate+0x48>)
    6790:	4798      	blx	r3
	if (pxNewTimer != NULL) {
    6792:	4604      	mov	r4, r0
    6794:	b1a8      	cbz	r0, 67c2 <xTimerCreate+0x42>
	configASSERT((xTimerPeriodInTicks > 0));
    6796:	b945      	cbnz	r5, 67aa <xTimerCreate+0x2a>
    6798:	f04f 0380 	mov.w	r3, #128	; 0x80
    679c:	f383 8811 	msr	BASEPRI, r3
    67a0:	f3bf 8f6f 	isb	sy
    67a4:	f3bf 8f4f 	dsb	sy
    67a8:	e7fe      	b.n	67a8 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
    67aa:	4b08      	ldr	r3, [pc, #32]	; (67cc <xTimerCreate+0x4c>)
    67ac:	4798      	blx	r3
		pxNewTimer->pcTimerName         = pcTimerName;
    67ae:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    67b2:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload        = uxAutoReload;
    67b4:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID           = pvTimerID;
    67b6:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction  = pxCallbackFunction;
    67b8:	9b06      	ldr	r3, [sp, #24]
    67ba:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem(&(pxNewTimer->xTimerListItem));
    67bc:	1d20      	adds	r0, r4, #4
    67be:	4b04      	ldr	r3, [pc, #16]	; (67d0 <xTimerCreate+0x50>)
    67c0:	4798      	blx	r3
}
    67c2:	4620      	mov	r0, r4
    67c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67c8:	00004f35 	.word	0x00004f35
    67cc:	000066e1 	.word	0x000066e1
    67d0:	00004b3b 	.word	0x00004b3b

000067d4 <xTimerGenericCommand>:
	configASSERT(xTimer);
    67d4:	b1d8      	cbz	r0, 680e <xTimerGenericCommand+0x3a>
{
    67d6:	b530      	push	{r4, r5, lr}
    67d8:	b085      	sub	sp, #20
    67da:	4615      	mov	r5, r2
    67dc:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    67de:	4a14      	ldr	r2, [pc, #80]	; (6830 <xTimerGenericCommand+0x5c>)
    67e0:	6890      	ldr	r0, [r2, #8]
    67e2:	b310      	cbz	r0, 682a <xTimerGenericCommand+0x56>
    67e4:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    67e6:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    67e8:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    67ea:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    67ec:	2905      	cmp	r1, #5
    67ee:	dc17      	bgt.n	6820 <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    67f0:	4b10      	ldr	r3, [pc, #64]	; (6834 <xTimerGenericCommand+0x60>)
    67f2:	4798      	blx	r3
    67f4:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    67f6:	f04f 0300 	mov.w	r3, #0
    67fa:	bf0c      	ite	eq
    67fc:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    67fe:	461a      	movne	r2, r3
    6800:	a901      	add	r1, sp, #4
    6802:	480b      	ldr	r0, [pc, #44]	; (6830 <xTimerGenericCommand+0x5c>)
    6804:	6880      	ldr	r0, [r0, #8]
    6806:	4c0c      	ldr	r4, [pc, #48]	; (6838 <xTimerGenericCommand+0x64>)
    6808:	47a0      	blx	r4
}
    680a:	b005      	add	sp, #20
    680c:	bd30      	pop	{r4, r5, pc}
    680e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6812:	f383 8811 	msr	BASEPRI, r3
    6816:	f3bf 8f6f 	isb	sy
    681a:	f3bf 8f4f 	dsb	sy
    681e:	e7fe      	b.n	681e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    6820:	2300      	movs	r3, #0
    6822:	a901      	add	r1, sp, #4
    6824:	4c05      	ldr	r4, [pc, #20]	; (683c <xTimerGenericCommand+0x68>)
    6826:	47a0      	blx	r4
    6828:	e7ef      	b.n	680a <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    682a:	2000      	movs	r0, #0
	return xReturn;
    682c:	e7ed      	b.n	680a <xTimerGenericCommand+0x36>
    682e:	bf00      	nop
    6830:	20003428 	.word	0x20003428
    6834:	00006295 	.word	0x00006295
    6838:	00005331 	.word	0x00005331
    683c:	00005539 	.word	0x00005539

00006840 <prvSampleTimeNow>:
{
    6840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6844:	b082      	sub	sp, #8
    6846:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    6848:	4b23      	ldr	r3, [pc, #140]	; (68d8 <prvSampleTimeNow+0x98>)
    684a:	4798      	blx	r3
    684c:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    684e:	4b23      	ldr	r3, [pc, #140]	; (68dc <prvSampleTimeNow+0x9c>)
    6850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6852:	4298      	cmp	r0, r3
    6854:	d319      	bcc.n	688a <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    6856:	2300      	movs	r3, #0
    6858:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    685c:	4b1f      	ldr	r3, [pc, #124]	; (68dc <prvSampleTimeNow+0x9c>)
    685e:	639f      	str	r7, [r3, #56]	; 0x38
}
    6860:	4638      	mov	r0, r7
    6862:	b002      	add	sp, #8
    6864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6868:	2100      	movs	r1, #0
    686a:	9100      	str	r1, [sp, #0]
    686c:	460b      	mov	r3, r1
    686e:	4652      	mov	r2, sl
    6870:	4620      	mov	r0, r4
    6872:	4c1b      	ldr	r4, [pc, #108]	; (68e0 <prvSampleTimeNow+0xa0>)
    6874:	47a0      	blx	r4
				configASSERT(xResult);
    6876:	b950      	cbnz	r0, 688e <prvSampleTimeNow+0x4e>
    6878:	f04f 0380 	mov.w	r3, #128	; 0x80
    687c:	f383 8811 	msr	BASEPRI, r3
    6880:	f3bf 8f6f 	isb	sy
    6884:	f3bf 8f4f 	dsb	sy
    6888:	e7fe      	b.n	6888 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    688a:	4d14      	ldr	r5, [pc, #80]	; (68dc <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    688c:	4e15      	ldr	r6, [pc, #84]	; (68e4 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    688e:	686b      	ldr	r3, [r5, #4]
    6890:	681a      	ldr	r2, [r3, #0]
    6892:	b1c2      	cbz	r2, 68c6 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6894:	68db      	ldr	r3, [r3, #12]
    6896:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    689a:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    689c:	f104 0904 	add.w	r9, r4, #4
    68a0:	4648      	mov	r0, r9
    68a2:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    68a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    68a6:	4620      	mov	r0, r4
    68a8:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    68aa:	69e3      	ldr	r3, [r4, #28]
    68ac:	2b01      	cmp	r3, #1
    68ae:	d1ee      	bne.n	688e <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    68b0:	69a3      	ldr	r3, [r4, #24]
    68b2:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    68b4:	459a      	cmp	sl, r3
    68b6:	d2d7      	bcs.n	6868 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    68b8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    68ba:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    68bc:	4649      	mov	r1, r9
    68be:	6868      	ldr	r0, [r5, #4]
    68c0:	4b09      	ldr	r3, [pc, #36]	; (68e8 <prvSampleTimeNow+0xa8>)
    68c2:	4798      	blx	r3
    68c4:	e7e3      	b.n	688e <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    68c6:	4a05      	ldr	r2, [pc, #20]	; (68dc <prvSampleTimeNow+0x9c>)
    68c8:	6811      	ldr	r1, [r2, #0]
    68ca:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    68cc:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    68ce:	2301      	movs	r3, #1
    68d0:	f8c8 3000 	str.w	r3, [r8]
    68d4:	e7c2      	b.n	685c <prvSampleTimeNow+0x1c>
    68d6:	bf00      	nop
    68d8:	00005d81 	.word	0x00005d81
    68dc:	20003428 	.word	0x20003428
    68e0:	000067d5 	.word	0x000067d5
    68e4:	00004b8d 	.word	0x00004b8d
    68e8:	00004b59 	.word	0x00004b59

000068ec <prvTimerTask>:
{
    68ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68f0:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    68f2:	4c65      	ldr	r4, [pc, #404]	; (6a88 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    68f4:	4f65      	ldr	r7, [pc, #404]	; (6a8c <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    68f6:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 6aac <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    68fa:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 6ab0 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    68fe:	6863      	ldr	r3, [r4, #4]
    6900:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    6902:	b172      	cbz	r2, 6922 <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6904:	68db      	ldr	r3, [r3, #12]
    6906:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    6908:	4b61      	ldr	r3, [pc, #388]	; (6a90 <prvTimerTask+0x1a4>)
    690a:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    690c:	a803      	add	r0, sp, #12
    690e:	4b61      	ldr	r3, [pc, #388]	; (6a94 <prvTimerTask+0x1a8>)
    6910:	4798      	blx	r3
    6912:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    6914:	9b03      	ldr	r3, [sp, #12]
    6916:	2b00      	cmp	r3, #0
    6918:	d179      	bne.n	6a0e <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    691a:	42a8      	cmp	r0, r5
    691c:	d24a      	bcs.n	69b4 <prvTimerTask+0xc8>
    691e:	2200      	movs	r2, #0
    6920:	e00e      	b.n	6940 <prvTimerTask+0x54>
	vTaskSuspendAll();
    6922:	4b5b      	ldr	r3, [pc, #364]	; (6a90 <prvTimerTask+0x1a4>)
    6924:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6926:	a803      	add	r0, sp, #12
    6928:	4b5a      	ldr	r3, [pc, #360]	; (6a94 <prvTimerTask+0x1a8>)
    692a:	4798      	blx	r3
    692c:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    692e:	9b03      	ldr	r3, [sp, #12]
    6930:	2b00      	cmp	r3, #0
    6932:	d16c      	bne.n	6a0e <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    6934:	6823      	ldr	r3, [r4, #0]
    6936:	681a      	ldr	r2, [r3, #0]
    6938:	fab2 f282 	clz	r2, r2
    693c:	0952      	lsrs	r2, r2, #5
    693e:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    6940:	1ba9      	subs	r1, r5, r6
    6942:	68a0      	ldr	r0, [r4, #8]
    6944:	4b54      	ldr	r3, [pc, #336]	; (6a98 <prvTimerTask+0x1ac>)
    6946:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    6948:	47b8      	blx	r7
    694a:	b938      	cbnz	r0, 695c <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    694c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6950:	f8c9 3000 	str.w	r3, [r9]
    6954:	f3bf 8f4f 	dsb	sy
    6958:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    695c:	4d4f      	ldr	r5, [pc, #316]	; (6a9c <prvTimerTask+0x1b0>)
    695e:	2200      	movs	r2, #0
    6960:	a903      	add	r1, sp, #12
    6962:	68a0      	ldr	r0, [r4, #8]
    6964:	47a8      	blx	r5
    6966:	2800      	cmp	r0, #0
    6968:	d0c9      	beq.n	68fe <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    696a:	9b03      	ldr	r3, [sp, #12]
    696c:	2b00      	cmp	r3, #0
    696e:	dbf6      	blt.n	695e <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6970:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    6972:	6973      	ldr	r3, [r6, #20]
    6974:	b10b      	cbz	r3, 697a <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    6976:	1d30      	adds	r0, r6, #4
    6978:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    697a:	a802      	add	r0, sp, #8
    697c:	4b45      	ldr	r3, [pc, #276]	; (6a94 <prvTimerTask+0x1a8>)
    697e:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    6980:	9b03      	ldr	r3, [sp, #12]
    6982:	2b09      	cmp	r3, #9
    6984:	d8eb      	bhi.n	695e <prvTimerTask+0x72>
    6986:	a201      	add	r2, pc, #4	; (adr r2, 698c <prvTimerTask+0xa0>)
    6988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    698c:	00006a13 	.word	0x00006a13
    6990:	00006a13 	.word	0x00006a13
    6994:	00006a13 	.word	0x00006a13
    6998:	0000695f 	.word	0x0000695f
    699c:	00006a5b 	.word	0x00006a5b
    69a0:	00006a81 	.word	0x00006a81
    69a4:	00006a13 	.word	0x00006a13
    69a8:	00006a13 	.word	0x00006a13
    69ac:	0000695f 	.word	0x0000695f
    69b0:	00006a5b 	.word	0x00006a5b
				(void)xTaskResumeAll();
    69b4:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    69b6:	6863      	ldr	r3, [r4, #4]
    69b8:	68db      	ldr	r3, [r3, #12]
    69ba:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    69be:	f10a 0004 	add.w	r0, sl, #4
    69c2:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    69c4:	f8da 301c 	ldr.w	r3, [sl, #28]
    69c8:	2b01      	cmp	r3, #1
    69ca:	d004      	beq.n	69d6 <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    69cc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    69d0:	4650      	mov	r0, sl
    69d2:	4798      	blx	r3
    69d4:	e7c2      	b.n	695c <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    69d6:	f8da 1018 	ldr.w	r1, [sl, #24]
    69da:	462b      	mov	r3, r5
    69dc:	4632      	mov	r2, r6
    69de:	4429      	add	r1, r5
    69e0:	4650      	mov	r0, sl
    69e2:	4e2f      	ldr	r6, [pc, #188]	; (6aa0 <prvTimerTask+0x1b4>)
    69e4:	47b0      	blx	r6
    69e6:	2800      	cmp	r0, #0
    69e8:	d0f0      	beq.n	69cc <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    69ea:	2100      	movs	r1, #0
    69ec:	9100      	str	r1, [sp, #0]
    69ee:	460b      	mov	r3, r1
    69f0:	462a      	mov	r2, r5
    69f2:	4650      	mov	r0, sl
    69f4:	4d2b      	ldr	r5, [pc, #172]	; (6aa4 <prvTimerTask+0x1b8>)
    69f6:	47a8      	blx	r5
			configASSERT(xResult);
    69f8:	2800      	cmp	r0, #0
    69fa:	d1e7      	bne.n	69cc <prvTimerTask+0xe0>
    69fc:	f04f 0380 	mov.w	r3, #128	; 0x80
    6a00:	f383 8811 	msr	BASEPRI, r3
    6a04:	f3bf 8f6f 	isb	sy
    6a08:	f3bf 8f4f 	dsb	sy
    6a0c:	e7fe      	b.n	6a0c <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    6a0e:	47b8      	blx	r7
    6a10:	e7a4      	b.n	695c <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    6a12:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    6a14:	69b1      	ldr	r1, [r6, #24]
    6a16:	462b      	mov	r3, r5
    6a18:	4602      	mov	r2, r0
    6a1a:	4429      	add	r1, r5
    6a1c:	4630      	mov	r0, r6
    6a1e:	4d20      	ldr	r5, [pc, #128]	; (6aa0 <prvTimerTask+0x1b4>)
    6a20:	47a8      	blx	r5
    6a22:	2800      	cmp	r0, #0
    6a24:	d09a      	beq.n	695c <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6a26:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6a28:	4630      	mov	r0, r6
    6a2a:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6a2c:	69f3      	ldr	r3, [r6, #28]
    6a2e:	2b01      	cmp	r3, #1
    6a30:	d194      	bne.n	695c <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    6a32:	69b2      	ldr	r2, [r6, #24]
    6a34:	2100      	movs	r1, #0
    6a36:	9100      	str	r1, [sp, #0]
    6a38:	460b      	mov	r3, r1
    6a3a:	9804      	ldr	r0, [sp, #16]
    6a3c:	4402      	add	r2, r0
    6a3e:	4630      	mov	r0, r6
    6a40:	4d18      	ldr	r5, [pc, #96]	; (6aa4 <prvTimerTask+0x1b8>)
    6a42:	47a8      	blx	r5
						configASSERT(xResult);
    6a44:	2800      	cmp	r0, #0
    6a46:	d189      	bne.n	695c <prvTimerTask+0x70>
    6a48:	f04f 0380 	mov.w	r3, #128	; 0x80
    6a4c:	f383 8811 	msr	BASEPRI, r3
    6a50:	f3bf 8f6f 	isb	sy
    6a54:	f3bf 8f4f 	dsb	sy
    6a58:	e7fe      	b.n	6a58 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    6a5a:	9904      	ldr	r1, [sp, #16]
    6a5c:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    6a5e:	b131      	cbz	r1, 6a6e <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    6a60:	4603      	mov	r3, r0
    6a62:	4602      	mov	r2, r0
    6a64:	4401      	add	r1, r0
    6a66:	4630      	mov	r0, r6
    6a68:	4d0d      	ldr	r5, [pc, #52]	; (6aa0 <prvTimerTask+0x1b4>)
    6a6a:	47a8      	blx	r5
    6a6c:	e776      	b.n	695c <prvTimerTask+0x70>
    6a6e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6a72:	f383 8811 	msr	BASEPRI, r3
    6a76:	f3bf 8f6f 	isb	sy
    6a7a:	f3bf 8f4f 	dsb	sy
    6a7e:	e7fe      	b.n	6a7e <prvTimerTask+0x192>
				vPortFree(pxTimer);
    6a80:	4630      	mov	r0, r6
    6a82:	4b09      	ldr	r3, [pc, #36]	; (6aa8 <prvTimerTask+0x1bc>)
    6a84:	4798      	blx	r3
    6a86:	e769      	b.n	695c <prvTimerTask+0x70>
    6a88:	20003428 	.word	0x20003428
    6a8c:	00005eb5 	.word	0x00005eb5
    6a90:	00005d6d 	.word	0x00005d6d
    6a94:	00006841 	.word	0x00006841
    6a98:	000059d9 	.word	0x000059d9
    6a9c:	00005641 	.word	0x00005641
    6aa0:	00006699 	.word	0x00006699
    6aa4:	000067d5 	.word	0x000067d5
    6aa8:	00005009 	.word	0x00005009
    6aac:	e000ed04 	.word	0xe000ed04
    6ab0:	00004b8d 	.word	0x00004b8d

00006ab4 <__libc_init_array>:
    6ab4:	b570      	push	{r4, r5, r6, lr}
    6ab6:	4e0d      	ldr	r6, [pc, #52]	; (6aec <__libc_init_array+0x38>)
    6ab8:	4c0d      	ldr	r4, [pc, #52]	; (6af0 <__libc_init_array+0x3c>)
    6aba:	1ba4      	subs	r4, r4, r6
    6abc:	10a4      	asrs	r4, r4, #2
    6abe:	2500      	movs	r5, #0
    6ac0:	42a5      	cmp	r5, r4
    6ac2:	d109      	bne.n	6ad8 <__libc_init_array+0x24>
    6ac4:	4e0b      	ldr	r6, [pc, #44]	; (6af4 <__libc_init_array+0x40>)
    6ac6:	4c0c      	ldr	r4, [pc, #48]	; (6af8 <__libc_init_array+0x44>)
    6ac8:	f002 f972 	bl	8db0 <_init>
    6acc:	1ba4      	subs	r4, r4, r6
    6ace:	10a4      	asrs	r4, r4, #2
    6ad0:	2500      	movs	r5, #0
    6ad2:	42a5      	cmp	r5, r4
    6ad4:	d105      	bne.n	6ae2 <__libc_init_array+0x2e>
    6ad6:	bd70      	pop	{r4, r5, r6, pc}
    6ad8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6adc:	4798      	blx	r3
    6ade:	3501      	adds	r5, #1
    6ae0:	e7ee      	b.n	6ac0 <__libc_init_array+0xc>
    6ae2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6ae6:	4798      	blx	r3
    6ae8:	3501      	adds	r5, #1
    6aea:	e7f2      	b.n	6ad2 <__libc_init_array+0x1e>
    6aec:	00008dbc 	.word	0x00008dbc
    6af0:	00008dbc 	.word	0x00008dbc
    6af4:	00008dbc 	.word	0x00008dbc
    6af8:	00008dc0 	.word	0x00008dc0

00006afc <memcmp>:
    6afc:	b510      	push	{r4, lr}
    6afe:	3901      	subs	r1, #1
    6b00:	4402      	add	r2, r0
    6b02:	4290      	cmp	r0, r2
    6b04:	d101      	bne.n	6b0a <memcmp+0xe>
    6b06:	2000      	movs	r0, #0
    6b08:	bd10      	pop	{r4, pc}
    6b0a:	f810 3b01 	ldrb.w	r3, [r0], #1
    6b0e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    6b12:	42a3      	cmp	r3, r4
    6b14:	d0f5      	beq.n	6b02 <memcmp+0x6>
    6b16:	1b18      	subs	r0, r3, r4
    6b18:	bd10      	pop	{r4, pc}

00006b1a <memcpy>:
    6b1a:	b510      	push	{r4, lr}
    6b1c:	1e43      	subs	r3, r0, #1
    6b1e:	440a      	add	r2, r1
    6b20:	4291      	cmp	r1, r2
    6b22:	d100      	bne.n	6b26 <memcpy+0xc>
    6b24:	bd10      	pop	{r4, pc}
    6b26:	f811 4b01 	ldrb.w	r4, [r1], #1
    6b2a:	f803 4f01 	strb.w	r4, [r3, #1]!
    6b2e:	e7f7      	b.n	6b20 <memcpy+0x6>

00006b30 <memmove>:
    6b30:	4288      	cmp	r0, r1
    6b32:	b510      	push	{r4, lr}
    6b34:	eb01 0302 	add.w	r3, r1, r2
    6b38:	d803      	bhi.n	6b42 <memmove+0x12>
    6b3a:	1e42      	subs	r2, r0, #1
    6b3c:	4299      	cmp	r1, r3
    6b3e:	d10c      	bne.n	6b5a <memmove+0x2a>
    6b40:	bd10      	pop	{r4, pc}
    6b42:	4298      	cmp	r0, r3
    6b44:	d2f9      	bcs.n	6b3a <memmove+0xa>
    6b46:	1881      	adds	r1, r0, r2
    6b48:	1ad2      	subs	r2, r2, r3
    6b4a:	42d3      	cmn	r3, r2
    6b4c:	d100      	bne.n	6b50 <memmove+0x20>
    6b4e:	bd10      	pop	{r4, pc}
    6b50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    6b54:	f801 4d01 	strb.w	r4, [r1, #-1]!
    6b58:	e7f7      	b.n	6b4a <memmove+0x1a>
    6b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
    6b5e:	f802 4f01 	strb.w	r4, [r2, #1]!
    6b62:	e7eb      	b.n	6b3c <memmove+0xc>

00006b64 <memset>:
    6b64:	4402      	add	r2, r0
    6b66:	4603      	mov	r3, r0
    6b68:	4293      	cmp	r3, r2
    6b6a:	d100      	bne.n	6b6e <memset+0xa>
    6b6c:	4770      	bx	lr
    6b6e:	f803 1b01 	strb.w	r1, [r3], #1
    6b72:	e7f9      	b.n	6b68 <memset+0x4>

00006b74 <_free_r>:
    6b74:	b538      	push	{r3, r4, r5, lr}
    6b76:	4605      	mov	r5, r0
    6b78:	2900      	cmp	r1, #0
    6b7a:	d045      	beq.n	6c08 <_free_r+0x94>
    6b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6b80:	1f0c      	subs	r4, r1, #4
    6b82:	2b00      	cmp	r3, #0
    6b84:	bfb8      	it	lt
    6b86:	18e4      	addlt	r4, r4, r3
    6b88:	f000 f90b 	bl	6da2 <__malloc_lock>
    6b8c:	4a1f      	ldr	r2, [pc, #124]	; (6c0c <_free_r+0x98>)
    6b8e:	6813      	ldr	r3, [r2, #0]
    6b90:	4610      	mov	r0, r2
    6b92:	b933      	cbnz	r3, 6ba2 <_free_r+0x2e>
    6b94:	6063      	str	r3, [r4, #4]
    6b96:	6014      	str	r4, [r2, #0]
    6b98:	4628      	mov	r0, r5
    6b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6b9e:	f000 b901 	b.w	6da4 <__malloc_unlock>
    6ba2:	42a3      	cmp	r3, r4
    6ba4:	d90c      	bls.n	6bc0 <_free_r+0x4c>
    6ba6:	6821      	ldr	r1, [r4, #0]
    6ba8:	1862      	adds	r2, r4, r1
    6baa:	4293      	cmp	r3, r2
    6bac:	bf04      	itt	eq
    6bae:	681a      	ldreq	r2, [r3, #0]
    6bb0:	685b      	ldreq	r3, [r3, #4]
    6bb2:	6063      	str	r3, [r4, #4]
    6bb4:	bf04      	itt	eq
    6bb6:	1852      	addeq	r2, r2, r1
    6bb8:	6022      	streq	r2, [r4, #0]
    6bba:	6004      	str	r4, [r0, #0]
    6bbc:	e7ec      	b.n	6b98 <_free_r+0x24>
    6bbe:	4613      	mov	r3, r2
    6bc0:	685a      	ldr	r2, [r3, #4]
    6bc2:	b10a      	cbz	r2, 6bc8 <_free_r+0x54>
    6bc4:	42a2      	cmp	r2, r4
    6bc6:	d9fa      	bls.n	6bbe <_free_r+0x4a>
    6bc8:	6819      	ldr	r1, [r3, #0]
    6bca:	1858      	adds	r0, r3, r1
    6bcc:	42a0      	cmp	r0, r4
    6bce:	d10b      	bne.n	6be8 <_free_r+0x74>
    6bd0:	6820      	ldr	r0, [r4, #0]
    6bd2:	4401      	add	r1, r0
    6bd4:	1858      	adds	r0, r3, r1
    6bd6:	4282      	cmp	r2, r0
    6bd8:	6019      	str	r1, [r3, #0]
    6bda:	d1dd      	bne.n	6b98 <_free_r+0x24>
    6bdc:	6810      	ldr	r0, [r2, #0]
    6bde:	6852      	ldr	r2, [r2, #4]
    6be0:	605a      	str	r2, [r3, #4]
    6be2:	4401      	add	r1, r0
    6be4:	6019      	str	r1, [r3, #0]
    6be6:	e7d7      	b.n	6b98 <_free_r+0x24>
    6be8:	d902      	bls.n	6bf0 <_free_r+0x7c>
    6bea:	230c      	movs	r3, #12
    6bec:	602b      	str	r3, [r5, #0]
    6bee:	e7d3      	b.n	6b98 <_free_r+0x24>
    6bf0:	6820      	ldr	r0, [r4, #0]
    6bf2:	1821      	adds	r1, r4, r0
    6bf4:	428a      	cmp	r2, r1
    6bf6:	bf04      	itt	eq
    6bf8:	6811      	ldreq	r1, [r2, #0]
    6bfa:	6852      	ldreq	r2, [r2, #4]
    6bfc:	6062      	str	r2, [r4, #4]
    6bfe:	bf04      	itt	eq
    6c00:	1809      	addeq	r1, r1, r0
    6c02:	6021      	streq	r1, [r4, #0]
    6c04:	605c      	str	r4, [r3, #4]
    6c06:	e7c7      	b.n	6b98 <_free_r+0x24>
    6c08:	bd38      	pop	{r3, r4, r5, pc}
    6c0a:	bf00      	nop
    6c0c:	20003464 	.word	0x20003464

00006c10 <_malloc_r>:
    6c10:	b570      	push	{r4, r5, r6, lr}
    6c12:	1ccd      	adds	r5, r1, #3
    6c14:	f025 0503 	bic.w	r5, r5, #3
    6c18:	3508      	adds	r5, #8
    6c1a:	2d0c      	cmp	r5, #12
    6c1c:	bf38      	it	cc
    6c1e:	250c      	movcc	r5, #12
    6c20:	2d00      	cmp	r5, #0
    6c22:	4606      	mov	r6, r0
    6c24:	db01      	blt.n	6c2a <_malloc_r+0x1a>
    6c26:	42a9      	cmp	r1, r5
    6c28:	d903      	bls.n	6c32 <_malloc_r+0x22>
    6c2a:	230c      	movs	r3, #12
    6c2c:	6033      	str	r3, [r6, #0]
    6c2e:	2000      	movs	r0, #0
    6c30:	bd70      	pop	{r4, r5, r6, pc}
    6c32:	f000 f8b6 	bl	6da2 <__malloc_lock>
    6c36:	4a23      	ldr	r2, [pc, #140]	; (6cc4 <_malloc_r+0xb4>)
    6c38:	6814      	ldr	r4, [r2, #0]
    6c3a:	4621      	mov	r1, r4
    6c3c:	b991      	cbnz	r1, 6c64 <_malloc_r+0x54>
    6c3e:	4c22      	ldr	r4, [pc, #136]	; (6cc8 <_malloc_r+0xb8>)
    6c40:	6823      	ldr	r3, [r4, #0]
    6c42:	b91b      	cbnz	r3, 6c4c <_malloc_r+0x3c>
    6c44:	4630      	mov	r0, r6
    6c46:	f000 f841 	bl	6ccc <_sbrk_r>
    6c4a:	6020      	str	r0, [r4, #0]
    6c4c:	4629      	mov	r1, r5
    6c4e:	4630      	mov	r0, r6
    6c50:	f000 f83c 	bl	6ccc <_sbrk_r>
    6c54:	1c43      	adds	r3, r0, #1
    6c56:	d126      	bne.n	6ca6 <_malloc_r+0x96>
    6c58:	230c      	movs	r3, #12
    6c5a:	6033      	str	r3, [r6, #0]
    6c5c:	4630      	mov	r0, r6
    6c5e:	f000 f8a1 	bl	6da4 <__malloc_unlock>
    6c62:	e7e4      	b.n	6c2e <_malloc_r+0x1e>
    6c64:	680b      	ldr	r3, [r1, #0]
    6c66:	1b5b      	subs	r3, r3, r5
    6c68:	d41a      	bmi.n	6ca0 <_malloc_r+0x90>
    6c6a:	2b0b      	cmp	r3, #11
    6c6c:	d90f      	bls.n	6c8e <_malloc_r+0x7e>
    6c6e:	600b      	str	r3, [r1, #0]
    6c70:	50cd      	str	r5, [r1, r3]
    6c72:	18cc      	adds	r4, r1, r3
    6c74:	4630      	mov	r0, r6
    6c76:	f000 f895 	bl	6da4 <__malloc_unlock>
    6c7a:	f104 000b 	add.w	r0, r4, #11
    6c7e:	1d23      	adds	r3, r4, #4
    6c80:	f020 0007 	bic.w	r0, r0, #7
    6c84:	1ac3      	subs	r3, r0, r3
    6c86:	d01b      	beq.n	6cc0 <_malloc_r+0xb0>
    6c88:	425a      	negs	r2, r3
    6c8a:	50e2      	str	r2, [r4, r3]
    6c8c:	bd70      	pop	{r4, r5, r6, pc}
    6c8e:	428c      	cmp	r4, r1
    6c90:	bf0d      	iteet	eq
    6c92:	6863      	ldreq	r3, [r4, #4]
    6c94:	684b      	ldrne	r3, [r1, #4]
    6c96:	6063      	strne	r3, [r4, #4]
    6c98:	6013      	streq	r3, [r2, #0]
    6c9a:	bf18      	it	ne
    6c9c:	460c      	movne	r4, r1
    6c9e:	e7e9      	b.n	6c74 <_malloc_r+0x64>
    6ca0:	460c      	mov	r4, r1
    6ca2:	6849      	ldr	r1, [r1, #4]
    6ca4:	e7ca      	b.n	6c3c <_malloc_r+0x2c>
    6ca6:	1cc4      	adds	r4, r0, #3
    6ca8:	f024 0403 	bic.w	r4, r4, #3
    6cac:	42a0      	cmp	r0, r4
    6cae:	d005      	beq.n	6cbc <_malloc_r+0xac>
    6cb0:	1a21      	subs	r1, r4, r0
    6cb2:	4630      	mov	r0, r6
    6cb4:	f000 f80a 	bl	6ccc <_sbrk_r>
    6cb8:	3001      	adds	r0, #1
    6cba:	d0cd      	beq.n	6c58 <_malloc_r+0x48>
    6cbc:	6025      	str	r5, [r4, #0]
    6cbe:	e7d9      	b.n	6c74 <_malloc_r+0x64>
    6cc0:	bd70      	pop	{r4, r5, r6, pc}
    6cc2:	bf00      	nop
    6cc4:	20003464 	.word	0x20003464
    6cc8:	20003468 	.word	0x20003468

00006ccc <_sbrk_r>:
    6ccc:	b538      	push	{r3, r4, r5, lr}
    6cce:	4c06      	ldr	r4, [pc, #24]	; (6ce8 <_sbrk_r+0x1c>)
    6cd0:	2300      	movs	r3, #0
    6cd2:	4605      	mov	r5, r0
    6cd4:	4608      	mov	r0, r1
    6cd6:	6023      	str	r3, [r4, #0]
    6cd8:	f7fc fbd4 	bl	3484 <_sbrk>
    6cdc:	1c43      	adds	r3, r0, #1
    6cde:	d102      	bne.n	6ce6 <_sbrk_r+0x1a>
    6ce0:	6823      	ldr	r3, [r4, #0]
    6ce2:	b103      	cbz	r3, 6ce6 <_sbrk_r+0x1a>
    6ce4:	602b      	str	r3, [r5, #0]
    6ce6:	bd38      	pop	{r3, r4, r5, pc}
    6ce8:	20003e88 	.word	0x20003e88

00006cec <siprintf>:
    6cec:	b40e      	push	{r1, r2, r3}
    6cee:	b500      	push	{lr}
    6cf0:	b09c      	sub	sp, #112	; 0x70
    6cf2:	f44f 7102 	mov.w	r1, #520	; 0x208
    6cf6:	ab1d      	add	r3, sp, #116	; 0x74
    6cf8:	f8ad 1014 	strh.w	r1, [sp, #20]
    6cfc:	9002      	str	r0, [sp, #8]
    6cfe:	9006      	str	r0, [sp, #24]
    6d00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6d04:	480a      	ldr	r0, [pc, #40]	; (6d30 <siprintf+0x44>)
    6d06:	9104      	str	r1, [sp, #16]
    6d08:	9107      	str	r1, [sp, #28]
    6d0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6d0e:	f853 2b04 	ldr.w	r2, [r3], #4
    6d12:	f8ad 1016 	strh.w	r1, [sp, #22]
    6d16:	6800      	ldr	r0, [r0, #0]
    6d18:	9301      	str	r3, [sp, #4]
    6d1a:	a902      	add	r1, sp, #8
    6d1c:	f000 f89e 	bl	6e5c <_svfiprintf_r>
    6d20:	9b02      	ldr	r3, [sp, #8]
    6d22:	2200      	movs	r2, #0
    6d24:	701a      	strb	r2, [r3, #0]
    6d26:	b01c      	add	sp, #112	; 0x70
    6d28:	f85d eb04 	ldr.w	lr, [sp], #4
    6d2c:	b003      	add	sp, #12
    6d2e:	4770      	bx	lr
    6d30:	2000012c 	.word	0x2000012c

00006d34 <strcpy>:
    6d34:	4603      	mov	r3, r0
    6d36:	f811 2b01 	ldrb.w	r2, [r1], #1
    6d3a:	f803 2b01 	strb.w	r2, [r3], #1
    6d3e:	2a00      	cmp	r2, #0
    6d40:	d1f9      	bne.n	6d36 <strcpy+0x2>
    6d42:	4770      	bx	lr

00006d44 <strlen>:
    6d44:	4603      	mov	r3, r0
    6d46:	f813 2b01 	ldrb.w	r2, [r3], #1
    6d4a:	2a00      	cmp	r2, #0
    6d4c:	d1fb      	bne.n	6d46 <strlen+0x2>
    6d4e:	1a18      	subs	r0, r3, r0
    6d50:	3801      	subs	r0, #1
    6d52:	4770      	bx	lr

00006d54 <strncmp>:
    6d54:	b510      	push	{r4, lr}
    6d56:	b16a      	cbz	r2, 6d74 <strncmp+0x20>
    6d58:	3901      	subs	r1, #1
    6d5a:	1884      	adds	r4, r0, r2
    6d5c:	f810 3b01 	ldrb.w	r3, [r0], #1
    6d60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6d64:	4293      	cmp	r3, r2
    6d66:	d103      	bne.n	6d70 <strncmp+0x1c>
    6d68:	42a0      	cmp	r0, r4
    6d6a:	d001      	beq.n	6d70 <strncmp+0x1c>
    6d6c:	2b00      	cmp	r3, #0
    6d6e:	d1f5      	bne.n	6d5c <strncmp+0x8>
    6d70:	1a98      	subs	r0, r3, r2
    6d72:	bd10      	pop	{r4, pc}
    6d74:	4610      	mov	r0, r2
    6d76:	bd10      	pop	{r4, pc}

00006d78 <strncpy>:
    6d78:	b570      	push	{r4, r5, r6, lr}
    6d7a:	4604      	mov	r4, r0
    6d7c:	b902      	cbnz	r2, 6d80 <strncpy+0x8>
    6d7e:	bd70      	pop	{r4, r5, r6, pc}
    6d80:	4623      	mov	r3, r4
    6d82:	f811 5b01 	ldrb.w	r5, [r1], #1
    6d86:	f803 5b01 	strb.w	r5, [r3], #1
    6d8a:	1e56      	subs	r6, r2, #1
    6d8c:	b91d      	cbnz	r5, 6d96 <strncpy+0x1e>
    6d8e:	4414      	add	r4, r2
    6d90:	42a3      	cmp	r3, r4
    6d92:	d103      	bne.n	6d9c <strncpy+0x24>
    6d94:	bd70      	pop	{r4, r5, r6, pc}
    6d96:	461c      	mov	r4, r3
    6d98:	4632      	mov	r2, r6
    6d9a:	e7ef      	b.n	6d7c <strncpy+0x4>
    6d9c:	f803 5b01 	strb.w	r5, [r3], #1
    6da0:	e7f6      	b.n	6d90 <strncpy+0x18>

00006da2 <__malloc_lock>:
    6da2:	4770      	bx	lr

00006da4 <__malloc_unlock>:
    6da4:	4770      	bx	lr

00006da6 <__ssputs_r>:
    6da6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6daa:	688e      	ldr	r6, [r1, #8]
    6dac:	429e      	cmp	r6, r3
    6dae:	4682      	mov	sl, r0
    6db0:	460c      	mov	r4, r1
    6db2:	4691      	mov	r9, r2
    6db4:	4698      	mov	r8, r3
    6db6:	d835      	bhi.n	6e24 <__ssputs_r+0x7e>
    6db8:	898a      	ldrh	r2, [r1, #12]
    6dba:	f412 6f90 	tst.w	r2, #1152	; 0x480
    6dbe:	d031      	beq.n	6e24 <__ssputs_r+0x7e>
    6dc0:	6825      	ldr	r5, [r4, #0]
    6dc2:	6909      	ldr	r1, [r1, #16]
    6dc4:	1a6f      	subs	r7, r5, r1
    6dc6:	6965      	ldr	r5, [r4, #20]
    6dc8:	2302      	movs	r3, #2
    6dca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6dce:	fb95 f5f3 	sdiv	r5, r5, r3
    6dd2:	f108 0301 	add.w	r3, r8, #1
    6dd6:	443b      	add	r3, r7
    6dd8:	429d      	cmp	r5, r3
    6dda:	bf38      	it	cc
    6ddc:	461d      	movcc	r5, r3
    6dde:	0553      	lsls	r3, r2, #21
    6de0:	d531      	bpl.n	6e46 <__ssputs_r+0xa0>
    6de2:	4629      	mov	r1, r5
    6de4:	f7ff ff14 	bl	6c10 <_malloc_r>
    6de8:	4606      	mov	r6, r0
    6dea:	b950      	cbnz	r0, 6e02 <__ssputs_r+0x5c>
    6dec:	230c      	movs	r3, #12
    6dee:	f8ca 3000 	str.w	r3, [sl]
    6df2:	89a3      	ldrh	r3, [r4, #12]
    6df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6df8:	81a3      	strh	r3, [r4, #12]
    6dfa:	f04f 30ff 	mov.w	r0, #4294967295
    6dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e02:	463a      	mov	r2, r7
    6e04:	6921      	ldr	r1, [r4, #16]
    6e06:	f7ff fe88 	bl	6b1a <memcpy>
    6e0a:	89a3      	ldrh	r3, [r4, #12]
    6e0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    6e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6e14:	81a3      	strh	r3, [r4, #12]
    6e16:	6126      	str	r6, [r4, #16]
    6e18:	6165      	str	r5, [r4, #20]
    6e1a:	443e      	add	r6, r7
    6e1c:	1bed      	subs	r5, r5, r7
    6e1e:	6026      	str	r6, [r4, #0]
    6e20:	60a5      	str	r5, [r4, #8]
    6e22:	4646      	mov	r6, r8
    6e24:	4546      	cmp	r6, r8
    6e26:	bf28      	it	cs
    6e28:	4646      	movcs	r6, r8
    6e2a:	4632      	mov	r2, r6
    6e2c:	4649      	mov	r1, r9
    6e2e:	6820      	ldr	r0, [r4, #0]
    6e30:	f7ff fe7e 	bl	6b30 <memmove>
    6e34:	68a3      	ldr	r3, [r4, #8]
    6e36:	1b9b      	subs	r3, r3, r6
    6e38:	60a3      	str	r3, [r4, #8]
    6e3a:	6823      	ldr	r3, [r4, #0]
    6e3c:	441e      	add	r6, r3
    6e3e:	6026      	str	r6, [r4, #0]
    6e40:	2000      	movs	r0, #0
    6e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e46:	462a      	mov	r2, r5
    6e48:	f000 fae2 	bl	7410 <_realloc_r>
    6e4c:	4606      	mov	r6, r0
    6e4e:	2800      	cmp	r0, #0
    6e50:	d1e1      	bne.n	6e16 <__ssputs_r+0x70>
    6e52:	6921      	ldr	r1, [r4, #16]
    6e54:	4650      	mov	r0, sl
    6e56:	f7ff fe8d 	bl	6b74 <_free_r>
    6e5a:	e7c7      	b.n	6dec <__ssputs_r+0x46>

00006e5c <_svfiprintf_r>:
    6e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e60:	b09d      	sub	sp, #116	; 0x74
    6e62:	4680      	mov	r8, r0
    6e64:	9303      	str	r3, [sp, #12]
    6e66:	898b      	ldrh	r3, [r1, #12]
    6e68:	061c      	lsls	r4, r3, #24
    6e6a:	460d      	mov	r5, r1
    6e6c:	4616      	mov	r6, r2
    6e6e:	d50f      	bpl.n	6e90 <_svfiprintf_r+0x34>
    6e70:	690b      	ldr	r3, [r1, #16]
    6e72:	b96b      	cbnz	r3, 6e90 <_svfiprintf_r+0x34>
    6e74:	2140      	movs	r1, #64	; 0x40
    6e76:	f7ff fecb 	bl	6c10 <_malloc_r>
    6e7a:	6028      	str	r0, [r5, #0]
    6e7c:	6128      	str	r0, [r5, #16]
    6e7e:	b928      	cbnz	r0, 6e8c <_svfiprintf_r+0x30>
    6e80:	230c      	movs	r3, #12
    6e82:	f8c8 3000 	str.w	r3, [r8]
    6e86:	f04f 30ff 	mov.w	r0, #4294967295
    6e8a:	e0c5      	b.n	7018 <_svfiprintf_r+0x1bc>
    6e8c:	2340      	movs	r3, #64	; 0x40
    6e8e:	616b      	str	r3, [r5, #20]
    6e90:	2300      	movs	r3, #0
    6e92:	9309      	str	r3, [sp, #36]	; 0x24
    6e94:	2320      	movs	r3, #32
    6e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    6e9a:	2330      	movs	r3, #48	; 0x30
    6e9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    6ea0:	f04f 0b01 	mov.w	fp, #1
    6ea4:	4637      	mov	r7, r6
    6ea6:	463c      	mov	r4, r7
    6ea8:	f814 3b01 	ldrb.w	r3, [r4], #1
    6eac:	2b00      	cmp	r3, #0
    6eae:	d13c      	bne.n	6f2a <_svfiprintf_r+0xce>
    6eb0:	ebb7 0a06 	subs.w	sl, r7, r6
    6eb4:	d00b      	beq.n	6ece <_svfiprintf_r+0x72>
    6eb6:	4653      	mov	r3, sl
    6eb8:	4632      	mov	r2, r6
    6eba:	4629      	mov	r1, r5
    6ebc:	4640      	mov	r0, r8
    6ebe:	f7ff ff72 	bl	6da6 <__ssputs_r>
    6ec2:	3001      	adds	r0, #1
    6ec4:	f000 80a3 	beq.w	700e <_svfiprintf_r+0x1b2>
    6ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6eca:	4453      	add	r3, sl
    6ecc:	9309      	str	r3, [sp, #36]	; 0x24
    6ece:	783b      	ldrb	r3, [r7, #0]
    6ed0:	2b00      	cmp	r3, #0
    6ed2:	f000 809c 	beq.w	700e <_svfiprintf_r+0x1b2>
    6ed6:	2300      	movs	r3, #0
    6ed8:	f04f 32ff 	mov.w	r2, #4294967295
    6edc:	9304      	str	r3, [sp, #16]
    6ede:	9307      	str	r3, [sp, #28]
    6ee0:	9205      	str	r2, [sp, #20]
    6ee2:	9306      	str	r3, [sp, #24]
    6ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    6ee8:	931a      	str	r3, [sp, #104]	; 0x68
    6eea:	2205      	movs	r2, #5
    6eec:	7821      	ldrb	r1, [r4, #0]
    6eee:	4850      	ldr	r0, [pc, #320]	; (7030 <_svfiprintf_r+0x1d4>)
    6ef0:	f000 fa3e 	bl	7370 <memchr>
    6ef4:	1c67      	adds	r7, r4, #1
    6ef6:	9b04      	ldr	r3, [sp, #16]
    6ef8:	b9d8      	cbnz	r0, 6f32 <_svfiprintf_r+0xd6>
    6efa:	06d9      	lsls	r1, r3, #27
    6efc:	bf44      	itt	mi
    6efe:	2220      	movmi	r2, #32
    6f00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6f04:	071a      	lsls	r2, r3, #28
    6f06:	bf44      	itt	mi
    6f08:	222b      	movmi	r2, #43	; 0x2b
    6f0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6f0e:	7822      	ldrb	r2, [r4, #0]
    6f10:	2a2a      	cmp	r2, #42	; 0x2a
    6f12:	d016      	beq.n	6f42 <_svfiprintf_r+0xe6>
    6f14:	9a07      	ldr	r2, [sp, #28]
    6f16:	2100      	movs	r1, #0
    6f18:	200a      	movs	r0, #10
    6f1a:	4627      	mov	r7, r4
    6f1c:	3401      	adds	r4, #1
    6f1e:	783b      	ldrb	r3, [r7, #0]
    6f20:	3b30      	subs	r3, #48	; 0x30
    6f22:	2b09      	cmp	r3, #9
    6f24:	d951      	bls.n	6fca <_svfiprintf_r+0x16e>
    6f26:	b1c9      	cbz	r1, 6f5c <_svfiprintf_r+0x100>
    6f28:	e011      	b.n	6f4e <_svfiprintf_r+0xf2>
    6f2a:	2b25      	cmp	r3, #37	; 0x25
    6f2c:	d0c0      	beq.n	6eb0 <_svfiprintf_r+0x54>
    6f2e:	4627      	mov	r7, r4
    6f30:	e7b9      	b.n	6ea6 <_svfiprintf_r+0x4a>
    6f32:	4a3f      	ldr	r2, [pc, #252]	; (7030 <_svfiprintf_r+0x1d4>)
    6f34:	1a80      	subs	r0, r0, r2
    6f36:	fa0b f000 	lsl.w	r0, fp, r0
    6f3a:	4318      	orrs	r0, r3
    6f3c:	9004      	str	r0, [sp, #16]
    6f3e:	463c      	mov	r4, r7
    6f40:	e7d3      	b.n	6eea <_svfiprintf_r+0x8e>
    6f42:	9a03      	ldr	r2, [sp, #12]
    6f44:	1d11      	adds	r1, r2, #4
    6f46:	6812      	ldr	r2, [r2, #0]
    6f48:	9103      	str	r1, [sp, #12]
    6f4a:	2a00      	cmp	r2, #0
    6f4c:	db01      	blt.n	6f52 <_svfiprintf_r+0xf6>
    6f4e:	9207      	str	r2, [sp, #28]
    6f50:	e004      	b.n	6f5c <_svfiprintf_r+0x100>
    6f52:	4252      	negs	r2, r2
    6f54:	f043 0302 	orr.w	r3, r3, #2
    6f58:	9207      	str	r2, [sp, #28]
    6f5a:	9304      	str	r3, [sp, #16]
    6f5c:	783b      	ldrb	r3, [r7, #0]
    6f5e:	2b2e      	cmp	r3, #46	; 0x2e
    6f60:	d10e      	bne.n	6f80 <_svfiprintf_r+0x124>
    6f62:	787b      	ldrb	r3, [r7, #1]
    6f64:	2b2a      	cmp	r3, #42	; 0x2a
    6f66:	f107 0101 	add.w	r1, r7, #1
    6f6a:	d132      	bne.n	6fd2 <_svfiprintf_r+0x176>
    6f6c:	9b03      	ldr	r3, [sp, #12]
    6f6e:	1d1a      	adds	r2, r3, #4
    6f70:	681b      	ldr	r3, [r3, #0]
    6f72:	9203      	str	r2, [sp, #12]
    6f74:	2b00      	cmp	r3, #0
    6f76:	bfb8      	it	lt
    6f78:	f04f 33ff 	movlt.w	r3, #4294967295
    6f7c:	3702      	adds	r7, #2
    6f7e:	9305      	str	r3, [sp, #20]
    6f80:	4c2c      	ldr	r4, [pc, #176]	; (7034 <_svfiprintf_r+0x1d8>)
    6f82:	7839      	ldrb	r1, [r7, #0]
    6f84:	2203      	movs	r2, #3
    6f86:	4620      	mov	r0, r4
    6f88:	f000 f9f2 	bl	7370 <memchr>
    6f8c:	b138      	cbz	r0, 6f9e <_svfiprintf_r+0x142>
    6f8e:	2340      	movs	r3, #64	; 0x40
    6f90:	1b00      	subs	r0, r0, r4
    6f92:	fa03 f000 	lsl.w	r0, r3, r0
    6f96:	9b04      	ldr	r3, [sp, #16]
    6f98:	4303      	orrs	r3, r0
    6f9a:	9304      	str	r3, [sp, #16]
    6f9c:	3701      	adds	r7, #1
    6f9e:	7839      	ldrb	r1, [r7, #0]
    6fa0:	4825      	ldr	r0, [pc, #148]	; (7038 <_svfiprintf_r+0x1dc>)
    6fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    6fa6:	2206      	movs	r2, #6
    6fa8:	1c7e      	adds	r6, r7, #1
    6faa:	f000 f9e1 	bl	7370 <memchr>
    6fae:	2800      	cmp	r0, #0
    6fb0:	d035      	beq.n	701e <_svfiprintf_r+0x1c2>
    6fb2:	4b22      	ldr	r3, [pc, #136]	; (703c <_svfiprintf_r+0x1e0>)
    6fb4:	b9fb      	cbnz	r3, 6ff6 <_svfiprintf_r+0x19a>
    6fb6:	9b03      	ldr	r3, [sp, #12]
    6fb8:	3307      	adds	r3, #7
    6fba:	f023 0307 	bic.w	r3, r3, #7
    6fbe:	3308      	adds	r3, #8
    6fc0:	9303      	str	r3, [sp, #12]
    6fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6fc4:	444b      	add	r3, r9
    6fc6:	9309      	str	r3, [sp, #36]	; 0x24
    6fc8:	e76c      	b.n	6ea4 <_svfiprintf_r+0x48>
    6fca:	fb00 3202 	mla	r2, r0, r2, r3
    6fce:	2101      	movs	r1, #1
    6fd0:	e7a3      	b.n	6f1a <_svfiprintf_r+0xbe>
    6fd2:	2300      	movs	r3, #0
    6fd4:	9305      	str	r3, [sp, #20]
    6fd6:	4618      	mov	r0, r3
    6fd8:	240a      	movs	r4, #10
    6fda:	460f      	mov	r7, r1
    6fdc:	3101      	adds	r1, #1
    6fde:	783a      	ldrb	r2, [r7, #0]
    6fe0:	3a30      	subs	r2, #48	; 0x30
    6fe2:	2a09      	cmp	r2, #9
    6fe4:	d903      	bls.n	6fee <_svfiprintf_r+0x192>
    6fe6:	2b00      	cmp	r3, #0
    6fe8:	d0ca      	beq.n	6f80 <_svfiprintf_r+0x124>
    6fea:	9005      	str	r0, [sp, #20]
    6fec:	e7c8      	b.n	6f80 <_svfiprintf_r+0x124>
    6fee:	fb04 2000 	mla	r0, r4, r0, r2
    6ff2:	2301      	movs	r3, #1
    6ff4:	e7f1      	b.n	6fda <_svfiprintf_r+0x17e>
    6ff6:	ab03      	add	r3, sp, #12
    6ff8:	9300      	str	r3, [sp, #0]
    6ffa:	462a      	mov	r2, r5
    6ffc:	4b10      	ldr	r3, [pc, #64]	; (7040 <_svfiprintf_r+0x1e4>)
    6ffe:	a904      	add	r1, sp, #16
    7000:	4640      	mov	r0, r8
    7002:	f3af 8000 	nop.w
    7006:	f1b0 3fff 	cmp.w	r0, #4294967295
    700a:	4681      	mov	r9, r0
    700c:	d1d9      	bne.n	6fc2 <_svfiprintf_r+0x166>
    700e:	89ab      	ldrh	r3, [r5, #12]
    7010:	065b      	lsls	r3, r3, #25
    7012:	f53f af38 	bmi.w	6e86 <_svfiprintf_r+0x2a>
    7016:	9809      	ldr	r0, [sp, #36]	; 0x24
    7018:	b01d      	add	sp, #116	; 0x74
    701a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    701e:	ab03      	add	r3, sp, #12
    7020:	9300      	str	r3, [sp, #0]
    7022:	462a      	mov	r2, r5
    7024:	4b06      	ldr	r3, [pc, #24]	; (7040 <_svfiprintf_r+0x1e4>)
    7026:	a904      	add	r1, sp, #16
    7028:	4640      	mov	r0, r8
    702a:	f000 f881 	bl	7130 <_printf_i>
    702e:	e7ea      	b.n	7006 <_svfiprintf_r+0x1aa>
    7030:	00008d7c 	.word	0x00008d7c
    7034:	00008d82 	.word	0x00008d82
    7038:	00008d86 	.word	0x00008d86
    703c:	00000000 	.word	0x00000000
    7040:	00006da7 	.word	0x00006da7

00007044 <_printf_common>:
    7044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7048:	4691      	mov	r9, r2
    704a:	461f      	mov	r7, r3
    704c:	688a      	ldr	r2, [r1, #8]
    704e:	690b      	ldr	r3, [r1, #16]
    7050:	f8dd 8020 	ldr.w	r8, [sp, #32]
    7054:	4293      	cmp	r3, r2
    7056:	bfb8      	it	lt
    7058:	4613      	movlt	r3, r2
    705a:	f8c9 3000 	str.w	r3, [r9]
    705e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    7062:	4606      	mov	r6, r0
    7064:	460c      	mov	r4, r1
    7066:	b112      	cbz	r2, 706e <_printf_common+0x2a>
    7068:	3301      	adds	r3, #1
    706a:	f8c9 3000 	str.w	r3, [r9]
    706e:	6823      	ldr	r3, [r4, #0]
    7070:	0699      	lsls	r1, r3, #26
    7072:	bf42      	ittt	mi
    7074:	f8d9 3000 	ldrmi.w	r3, [r9]
    7078:	3302      	addmi	r3, #2
    707a:	f8c9 3000 	strmi.w	r3, [r9]
    707e:	6825      	ldr	r5, [r4, #0]
    7080:	f015 0506 	ands.w	r5, r5, #6
    7084:	d107      	bne.n	7096 <_printf_common+0x52>
    7086:	f104 0a19 	add.w	sl, r4, #25
    708a:	68e3      	ldr	r3, [r4, #12]
    708c:	f8d9 2000 	ldr.w	r2, [r9]
    7090:	1a9b      	subs	r3, r3, r2
    7092:	429d      	cmp	r5, r3
    7094:	db29      	blt.n	70ea <_printf_common+0xa6>
    7096:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    709a:	6822      	ldr	r2, [r4, #0]
    709c:	3300      	adds	r3, #0
    709e:	bf18      	it	ne
    70a0:	2301      	movne	r3, #1
    70a2:	0692      	lsls	r2, r2, #26
    70a4:	d42e      	bmi.n	7104 <_printf_common+0xc0>
    70a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
    70aa:	4639      	mov	r1, r7
    70ac:	4630      	mov	r0, r6
    70ae:	47c0      	blx	r8
    70b0:	3001      	adds	r0, #1
    70b2:	d021      	beq.n	70f8 <_printf_common+0xb4>
    70b4:	6823      	ldr	r3, [r4, #0]
    70b6:	68e5      	ldr	r5, [r4, #12]
    70b8:	f8d9 2000 	ldr.w	r2, [r9]
    70bc:	f003 0306 	and.w	r3, r3, #6
    70c0:	2b04      	cmp	r3, #4
    70c2:	bf08      	it	eq
    70c4:	1aad      	subeq	r5, r5, r2
    70c6:	68a3      	ldr	r3, [r4, #8]
    70c8:	6922      	ldr	r2, [r4, #16]
    70ca:	bf0c      	ite	eq
    70cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    70d0:	2500      	movne	r5, #0
    70d2:	4293      	cmp	r3, r2
    70d4:	bfc4      	itt	gt
    70d6:	1a9b      	subgt	r3, r3, r2
    70d8:	18ed      	addgt	r5, r5, r3
    70da:	f04f 0900 	mov.w	r9, #0
    70de:	341a      	adds	r4, #26
    70e0:	454d      	cmp	r5, r9
    70e2:	d11b      	bne.n	711c <_printf_common+0xd8>
    70e4:	2000      	movs	r0, #0
    70e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70ea:	2301      	movs	r3, #1
    70ec:	4652      	mov	r2, sl
    70ee:	4639      	mov	r1, r7
    70f0:	4630      	mov	r0, r6
    70f2:	47c0      	blx	r8
    70f4:	3001      	adds	r0, #1
    70f6:	d103      	bne.n	7100 <_printf_common+0xbc>
    70f8:	f04f 30ff 	mov.w	r0, #4294967295
    70fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7100:	3501      	adds	r5, #1
    7102:	e7c2      	b.n	708a <_printf_common+0x46>
    7104:	18e1      	adds	r1, r4, r3
    7106:	1c5a      	adds	r2, r3, #1
    7108:	2030      	movs	r0, #48	; 0x30
    710a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    710e:	4422      	add	r2, r4
    7110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    7114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    7118:	3302      	adds	r3, #2
    711a:	e7c4      	b.n	70a6 <_printf_common+0x62>
    711c:	2301      	movs	r3, #1
    711e:	4622      	mov	r2, r4
    7120:	4639      	mov	r1, r7
    7122:	4630      	mov	r0, r6
    7124:	47c0      	blx	r8
    7126:	3001      	adds	r0, #1
    7128:	d0e6      	beq.n	70f8 <_printf_common+0xb4>
    712a:	f109 0901 	add.w	r9, r9, #1
    712e:	e7d7      	b.n	70e0 <_printf_common+0x9c>

00007130 <_printf_i>:
    7130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7134:	4617      	mov	r7, r2
    7136:	7e0a      	ldrb	r2, [r1, #24]
    7138:	b085      	sub	sp, #20
    713a:	2a6e      	cmp	r2, #110	; 0x6e
    713c:	4698      	mov	r8, r3
    713e:	4606      	mov	r6, r0
    7140:	460c      	mov	r4, r1
    7142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7144:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    7148:	f000 80bc 	beq.w	72c4 <_printf_i+0x194>
    714c:	d81a      	bhi.n	7184 <_printf_i+0x54>
    714e:	2a63      	cmp	r2, #99	; 0x63
    7150:	d02e      	beq.n	71b0 <_printf_i+0x80>
    7152:	d80a      	bhi.n	716a <_printf_i+0x3a>
    7154:	2a00      	cmp	r2, #0
    7156:	f000 80c8 	beq.w	72ea <_printf_i+0x1ba>
    715a:	2a58      	cmp	r2, #88	; 0x58
    715c:	f000 808a 	beq.w	7274 <_printf_i+0x144>
    7160:	f104 0542 	add.w	r5, r4, #66	; 0x42
    7164:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    7168:	e02a      	b.n	71c0 <_printf_i+0x90>
    716a:	2a64      	cmp	r2, #100	; 0x64
    716c:	d001      	beq.n	7172 <_printf_i+0x42>
    716e:	2a69      	cmp	r2, #105	; 0x69
    7170:	d1f6      	bne.n	7160 <_printf_i+0x30>
    7172:	6821      	ldr	r1, [r4, #0]
    7174:	681a      	ldr	r2, [r3, #0]
    7176:	f011 0f80 	tst.w	r1, #128	; 0x80
    717a:	d023      	beq.n	71c4 <_printf_i+0x94>
    717c:	1d11      	adds	r1, r2, #4
    717e:	6019      	str	r1, [r3, #0]
    7180:	6813      	ldr	r3, [r2, #0]
    7182:	e027      	b.n	71d4 <_printf_i+0xa4>
    7184:	2a73      	cmp	r2, #115	; 0x73
    7186:	f000 80b4 	beq.w	72f2 <_printf_i+0x1c2>
    718a:	d808      	bhi.n	719e <_printf_i+0x6e>
    718c:	2a6f      	cmp	r2, #111	; 0x6f
    718e:	d02a      	beq.n	71e6 <_printf_i+0xb6>
    7190:	2a70      	cmp	r2, #112	; 0x70
    7192:	d1e5      	bne.n	7160 <_printf_i+0x30>
    7194:	680a      	ldr	r2, [r1, #0]
    7196:	f042 0220 	orr.w	r2, r2, #32
    719a:	600a      	str	r2, [r1, #0]
    719c:	e003      	b.n	71a6 <_printf_i+0x76>
    719e:	2a75      	cmp	r2, #117	; 0x75
    71a0:	d021      	beq.n	71e6 <_printf_i+0xb6>
    71a2:	2a78      	cmp	r2, #120	; 0x78
    71a4:	d1dc      	bne.n	7160 <_printf_i+0x30>
    71a6:	2278      	movs	r2, #120	; 0x78
    71a8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    71ac:	496e      	ldr	r1, [pc, #440]	; (7368 <_printf_i+0x238>)
    71ae:	e064      	b.n	727a <_printf_i+0x14a>
    71b0:	681a      	ldr	r2, [r3, #0]
    71b2:	f101 0542 	add.w	r5, r1, #66	; 0x42
    71b6:	1d11      	adds	r1, r2, #4
    71b8:	6019      	str	r1, [r3, #0]
    71ba:	6813      	ldr	r3, [r2, #0]
    71bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    71c0:	2301      	movs	r3, #1
    71c2:	e0a3      	b.n	730c <_printf_i+0x1dc>
    71c4:	f011 0f40 	tst.w	r1, #64	; 0x40
    71c8:	f102 0104 	add.w	r1, r2, #4
    71cc:	6019      	str	r1, [r3, #0]
    71ce:	d0d7      	beq.n	7180 <_printf_i+0x50>
    71d0:	f9b2 3000 	ldrsh.w	r3, [r2]
    71d4:	2b00      	cmp	r3, #0
    71d6:	da03      	bge.n	71e0 <_printf_i+0xb0>
    71d8:	222d      	movs	r2, #45	; 0x2d
    71da:	425b      	negs	r3, r3
    71dc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    71e0:	4962      	ldr	r1, [pc, #392]	; (736c <_printf_i+0x23c>)
    71e2:	220a      	movs	r2, #10
    71e4:	e017      	b.n	7216 <_printf_i+0xe6>
    71e6:	6820      	ldr	r0, [r4, #0]
    71e8:	6819      	ldr	r1, [r3, #0]
    71ea:	f010 0f80 	tst.w	r0, #128	; 0x80
    71ee:	d003      	beq.n	71f8 <_printf_i+0xc8>
    71f0:	1d08      	adds	r0, r1, #4
    71f2:	6018      	str	r0, [r3, #0]
    71f4:	680b      	ldr	r3, [r1, #0]
    71f6:	e006      	b.n	7206 <_printf_i+0xd6>
    71f8:	f010 0f40 	tst.w	r0, #64	; 0x40
    71fc:	f101 0004 	add.w	r0, r1, #4
    7200:	6018      	str	r0, [r3, #0]
    7202:	d0f7      	beq.n	71f4 <_printf_i+0xc4>
    7204:	880b      	ldrh	r3, [r1, #0]
    7206:	4959      	ldr	r1, [pc, #356]	; (736c <_printf_i+0x23c>)
    7208:	2a6f      	cmp	r2, #111	; 0x6f
    720a:	bf14      	ite	ne
    720c:	220a      	movne	r2, #10
    720e:	2208      	moveq	r2, #8
    7210:	2000      	movs	r0, #0
    7212:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    7216:	6865      	ldr	r5, [r4, #4]
    7218:	60a5      	str	r5, [r4, #8]
    721a:	2d00      	cmp	r5, #0
    721c:	f2c0 809c 	blt.w	7358 <_printf_i+0x228>
    7220:	6820      	ldr	r0, [r4, #0]
    7222:	f020 0004 	bic.w	r0, r0, #4
    7226:	6020      	str	r0, [r4, #0]
    7228:	2b00      	cmp	r3, #0
    722a:	d13f      	bne.n	72ac <_printf_i+0x17c>
    722c:	2d00      	cmp	r5, #0
    722e:	f040 8095 	bne.w	735c <_printf_i+0x22c>
    7232:	4675      	mov	r5, lr
    7234:	2a08      	cmp	r2, #8
    7236:	d10b      	bne.n	7250 <_printf_i+0x120>
    7238:	6823      	ldr	r3, [r4, #0]
    723a:	07da      	lsls	r2, r3, #31
    723c:	d508      	bpl.n	7250 <_printf_i+0x120>
    723e:	6923      	ldr	r3, [r4, #16]
    7240:	6862      	ldr	r2, [r4, #4]
    7242:	429a      	cmp	r2, r3
    7244:	bfde      	ittt	le
    7246:	2330      	movle	r3, #48	; 0x30
    7248:	f805 3c01 	strble.w	r3, [r5, #-1]
    724c:	f105 35ff 	addle.w	r5, r5, #4294967295
    7250:	ebae 0305 	sub.w	r3, lr, r5
    7254:	6123      	str	r3, [r4, #16]
    7256:	f8cd 8000 	str.w	r8, [sp]
    725a:	463b      	mov	r3, r7
    725c:	aa03      	add	r2, sp, #12
    725e:	4621      	mov	r1, r4
    7260:	4630      	mov	r0, r6
    7262:	f7ff feef 	bl	7044 <_printf_common>
    7266:	3001      	adds	r0, #1
    7268:	d155      	bne.n	7316 <_printf_i+0x1e6>
    726a:	f04f 30ff 	mov.w	r0, #4294967295
    726e:	b005      	add	sp, #20
    7270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7274:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    7278:	493c      	ldr	r1, [pc, #240]	; (736c <_printf_i+0x23c>)
    727a:	6822      	ldr	r2, [r4, #0]
    727c:	6818      	ldr	r0, [r3, #0]
    727e:	f012 0f80 	tst.w	r2, #128	; 0x80
    7282:	f100 0504 	add.w	r5, r0, #4
    7286:	601d      	str	r5, [r3, #0]
    7288:	d001      	beq.n	728e <_printf_i+0x15e>
    728a:	6803      	ldr	r3, [r0, #0]
    728c:	e002      	b.n	7294 <_printf_i+0x164>
    728e:	0655      	lsls	r5, r2, #25
    7290:	d5fb      	bpl.n	728a <_printf_i+0x15a>
    7292:	8803      	ldrh	r3, [r0, #0]
    7294:	07d0      	lsls	r0, r2, #31
    7296:	bf44      	itt	mi
    7298:	f042 0220 	orrmi.w	r2, r2, #32
    729c:	6022      	strmi	r2, [r4, #0]
    729e:	b91b      	cbnz	r3, 72a8 <_printf_i+0x178>
    72a0:	6822      	ldr	r2, [r4, #0]
    72a2:	f022 0220 	bic.w	r2, r2, #32
    72a6:	6022      	str	r2, [r4, #0]
    72a8:	2210      	movs	r2, #16
    72aa:	e7b1      	b.n	7210 <_printf_i+0xe0>
    72ac:	4675      	mov	r5, lr
    72ae:	fbb3 f0f2 	udiv	r0, r3, r2
    72b2:	fb02 3310 	mls	r3, r2, r0, r3
    72b6:	5ccb      	ldrb	r3, [r1, r3]
    72b8:	f805 3d01 	strb.w	r3, [r5, #-1]!
    72bc:	4603      	mov	r3, r0
    72be:	2800      	cmp	r0, #0
    72c0:	d1f5      	bne.n	72ae <_printf_i+0x17e>
    72c2:	e7b7      	b.n	7234 <_printf_i+0x104>
    72c4:	6808      	ldr	r0, [r1, #0]
    72c6:	681a      	ldr	r2, [r3, #0]
    72c8:	6949      	ldr	r1, [r1, #20]
    72ca:	f010 0f80 	tst.w	r0, #128	; 0x80
    72ce:	d004      	beq.n	72da <_printf_i+0x1aa>
    72d0:	1d10      	adds	r0, r2, #4
    72d2:	6018      	str	r0, [r3, #0]
    72d4:	6813      	ldr	r3, [r2, #0]
    72d6:	6019      	str	r1, [r3, #0]
    72d8:	e007      	b.n	72ea <_printf_i+0x1ba>
    72da:	f010 0f40 	tst.w	r0, #64	; 0x40
    72de:	f102 0004 	add.w	r0, r2, #4
    72e2:	6018      	str	r0, [r3, #0]
    72e4:	6813      	ldr	r3, [r2, #0]
    72e6:	d0f6      	beq.n	72d6 <_printf_i+0x1a6>
    72e8:	8019      	strh	r1, [r3, #0]
    72ea:	2300      	movs	r3, #0
    72ec:	6123      	str	r3, [r4, #16]
    72ee:	4675      	mov	r5, lr
    72f0:	e7b1      	b.n	7256 <_printf_i+0x126>
    72f2:	681a      	ldr	r2, [r3, #0]
    72f4:	1d11      	adds	r1, r2, #4
    72f6:	6019      	str	r1, [r3, #0]
    72f8:	6815      	ldr	r5, [r2, #0]
    72fa:	6862      	ldr	r2, [r4, #4]
    72fc:	2100      	movs	r1, #0
    72fe:	4628      	mov	r0, r5
    7300:	f000 f836 	bl	7370 <memchr>
    7304:	b108      	cbz	r0, 730a <_printf_i+0x1da>
    7306:	1b40      	subs	r0, r0, r5
    7308:	6060      	str	r0, [r4, #4]
    730a:	6863      	ldr	r3, [r4, #4]
    730c:	6123      	str	r3, [r4, #16]
    730e:	2300      	movs	r3, #0
    7310:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    7314:	e79f      	b.n	7256 <_printf_i+0x126>
    7316:	6923      	ldr	r3, [r4, #16]
    7318:	462a      	mov	r2, r5
    731a:	4639      	mov	r1, r7
    731c:	4630      	mov	r0, r6
    731e:	47c0      	blx	r8
    7320:	3001      	adds	r0, #1
    7322:	d0a2      	beq.n	726a <_printf_i+0x13a>
    7324:	6823      	ldr	r3, [r4, #0]
    7326:	079b      	lsls	r3, r3, #30
    7328:	d507      	bpl.n	733a <_printf_i+0x20a>
    732a:	2500      	movs	r5, #0
    732c:	f104 0919 	add.w	r9, r4, #25
    7330:	68e3      	ldr	r3, [r4, #12]
    7332:	9a03      	ldr	r2, [sp, #12]
    7334:	1a9b      	subs	r3, r3, r2
    7336:	429d      	cmp	r5, r3
    7338:	db05      	blt.n	7346 <_printf_i+0x216>
    733a:	68e0      	ldr	r0, [r4, #12]
    733c:	9b03      	ldr	r3, [sp, #12]
    733e:	4298      	cmp	r0, r3
    7340:	bfb8      	it	lt
    7342:	4618      	movlt	r0, r3
    7344:	e793      	b.n	726e <_printf_i+0x13e>
    7346:	2301      	movs	r3, #1
    7348:	464a      	mov	r2, r9
    734a:	4639      	mov	r1, r7
    734c:	4630      	mov	r0, r6
    734e:	47c0      	blx	r8
    7350:	3001      	adds	r0, #1
    7352:	d08a      	beq.n	726a <_printf_i+0x13a>
    7354:	3501      	adds	r5, #1
    7356:	e7eb      	b.n	7330 <_printf_i+0x200>
    7358:	2b00      	cmp	r3, #0
    735a:	d1a7      	bne.n	72ac <_printf_i+0x17c>
    735c:	780b      	ldrb	r3, [r1, #0]
    735e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    7362:	f104 0542 	add.w	r5, r4, #66	; 0x42
    7366:	e765      	b.n	7234 <_printf_i+0x104>
    7368:	00008d9e 	.word	0x00008d9e
    736c:	00008d8d 	.word	0x00008d8d

00007370 <memchr>:
    7370:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7374:	2a10      	cmp	r2, #16
    7376:	db2b      	blt.n	73d0 <memchr+0x60>
    7378:	f010 0f07 	tst.w	r0, #7
    737c:	d008      	beq.n	7390 <memchr+0x20>
    737e:	f810 3b01 	ldrb.w	r3, [r0], #1
    7382:	3a01      	subs	r2, #1
    7384:	428b      	cmp	r3, r1
    7386:	d02d      	beq.n	73e4 <memchr+0x74>
    7388:	f010 0f07 	tst.w	r0, #7
    738c:	b342      	cbz	r2, 73e0 <memchr+0x70>
    738e:	d1f6      	bne.n	737e <memchr+0xe>
    7390:	b4f0      	push	{r4, r5, r6, r7}
    7392:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    7396:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    739a:	f022 0407 	bic.w	r4, r2, #7
    739e:	f07f 0700 	mvns.w	r7, #0
    73a2:	2300      	movs	r3, #0
    73a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    73a8:	3c08      	subs	r4, #8
    73aa:	ea85 0501 	eor.w	r5, r5, r1
    73ae:	ea86 0601 	eor.w	r6, r6, r1
    73b2:	fa85 f547 	uadd8	r5, r5, r7
    73b6:	faa3 f587 	sel	r5, r3, r7
    73ba:	fa86 f647 	uadd8	r6, r6, r7
    73be:	faa5 f687 	sel	r6, r5, r7
    73c2:	b98e      	cbnz	r6, 73e8 <memchr+0x78>
    73c4:	d1ee      	bne.n	73a4 <memchr+0x34>
    73c6:	bcf0      	pop	{r4, r5, r6, r7}
    73c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    73cc:	f002 0207 	and.w	r2, r2, #7
    73d0:	b132      	cbz	r2, 73e0 <memchr+0x70>
    73d2:	f810 3b01 	ldrb.w	r3, [r0], #1
    73d6:	3a01      	subs	r2, #1
    73d8:	ea83 0301 	eor.w	r3, r3, r1
    73dc:	b113      	cbz	r3, 73e4 <memchr+0x74>
    73de:	d1f8      	bne.n	73d2 <memchr+0x62>
    73e0:	2000      	movs	r0, #0
    73e2:	4770      	bx	lr
    73e4:	3801      	subs	r0, #1
    73e6:	4770      	bx	lr
    73e8:	2d00      	cmp	r5, #0
    73ea:	bf06      	itte	eq
    73ec:	4635      	moveq	r5, r6
    73ee:	3803      	subeq	r0, #3
    73f0:	3807      	subne	r0, #7
    73f2:	f015 0f01 	tst.w	r5, #1
    73f6:	d107      	bne.n	7408 <memchr+0x98>
    73f8:	3001      	adds	r0, #1
    73fa:	f415 7f80 	tst.w	r5, #256	; 0x100
    73fe:	bf02      	ittt	eq
    7400:	3001      	addeq	r0, #1
    7402:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    7406:	3001      	addeq	r0, #1
    7408:	bcf0      	pop	{r4, r5, r6, r7}
    740a:	3801      	subs	r0, #1
    740c:	4770      	bx	lr
    740e:	bf00      	nop

00007410 <_realloc_r>:
    7410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7412:	4607      	mov	r7, r0
    7414:	4614      	mov	r4, r2
    7416:	460e      	mov	r6, r1
    7418:	b921      	cbnz	r1, 7424 <_realloc_r+0x14>
    741a:	4611      	mov	r1, r2
    741c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7420:	f7ff bbf6 	b.w	6c10 <_malloc_r>
    7424:	b922      	cbnz	r2, 7430 <_realloc_r+0x20>
    7426:	f7ff fba5 	bl	6b74 <_free_r>
    742a:	4625      	mov	r5, r4
    742c:	4628      	mov	r0, r5
    742e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7430:	f000 f814 	bl	745c <_malloc_usable_size_r>
    7434:	4284      	cmp	r4, r0
    7436:	d90f      	bls.n	7458 <_realloc_r+0x48>
    7438:	4621      	mov	r1, r4
    743a:	4638      	mov	r0, r7
    743c:	f7ff fbe8 	bl	6c10 <_malloc_r>
    7440:	4605      	mov	r5, r0
    7442:	2800      	cmp	r0, #0
    7444:	d0f2      	beq.n	742c <_realloc_r+0x1c>
    7446:	4631      	mov	r1, r6
    7448:	4622      	mov	r2, r4
    744a:	f7ff fb66 	bl	6b1a <memcpy>
    744e:	4631      	mov	r1, r6
    7450:	4638      	mov	r0, r7
    7452:	f7ff fb8f 	bl	6b74 <_free_r>
    7456:	e7e9      	b.n	742c <_realloc_r+0x1c>
    7458:	4635      	mov	r5, r6
    745a:	e7e7      	b.n	742c <_realloc_r+0x1c>

0000745c <_malloc_usable_size_r>:
    745c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    7460:	2800      	cmp	r0, #0
    7462:	f1a0 0004 	sub.w	r0, r0, #4
    7466:	bfbc      	itt	lt
    7468:	580b      	ldrlt	r3, [r1, r0]
    746a:	18c0      	addlt	r0, r0, r3
    746c:	4770      	bx	lr
    746e:	0000      	movs	r0, r0
    7470:	2a2a2a2a 	.word	0x2a2a2a2a
    7474:	2a2a2a2a 	.word	0x2a2a2a2a
    7478:	2a2a2a2a 	.word	0x2a2a2a2a
    747c:	2a2a2a2a 	.word	0x2a2a2a2a
    7480:	2a2a2a2a 	.word	0x2a2a2a2a
    7484:	2a2a2a2a 	.word	0x2a2a2a2a
    7488:	2a2a2a2a 	.word	0x2a2a2a2a
    748c:	2a2a2a2a 	.word	0x2a2a2a2a
    7490:	2a2a2a2a 	.word	0x2a2a2a2a
    7494:	2a2a2a2a 	.word	0x2a2a2a2a
    7498:	2a2a2a2a 	.word	0x2a2a2a2a
    749c:	2a2a2a2a 	.word	0x2a2a2a2a
    74a0:	2a2a2a2a 	.word	0x2a2a2a2a
    74a4:	2a2a2a2a 	.word	0x2a2a2a2a
    74a8:	00002a2a 	.word	0x00002a2a
    74ac:	2a2a2a2a 	.word	0x2a2a2a2a
    74b0:	2a2a2a2a 	.word	0x2a2a2a2a
    74b4:	2a2a2a2a 	.word	0x2a2a2a2a
    74b8:	532a2a2a 	.word	0x532a2a2a
    74bc:	4b434154 	.word	0x4b434154
    74c0:	45564f20 	.word	0x45564f20
    74c4:	4f4c4652 	.word	0x4f4c4652
    74c8:	45442057 	.word	0x45442057
    74cc:	54434554 	.word	0x54434554
    74d0:	2a2a4445 	.word	0x2a2a4445
    74d4:	2a2a2a2a 	.word	0x2a2a2a2a
    74d8:	2a2a2a2a 	.word	0x2a2a2a2a
    74dc:	2a2a2a2a 	.word	0x2a2a2a2a
    74e0:	2a2a2a2a 	.word	0x2a2a2a2a
    74e4:	00002a2a 	.word	0x00002a2a
    74e8:	6b736154 	.word	0x6b736154
    74ec:	6e614820 	.word	0x6e614820
    74f0:	20656c64 	.word	0x20656c64
    74f4:	6425202d 	.word	0x6425202d
    74f8:	00000a0d 	.word	0x00000a0d
    74fc:	69746f4e 	.word	0x69746f4e
    7500:	61636966 	.word	0x61636966
    7504:	6e6f6974 	.word	0x6e6f6974
    7508:	63657220 	.word	0x63657220
    750c:	65766965 	.word	0x65766965
    7510:	6e692064 	.word	0x6e692064
    7514:	6e655320 	.word	0x6e655320
    7518:	20726f73 	.word	0x20726f73
    751c:	6b736174 	.word	0x6b736174
    7520:	00000000 	.word	0x00000000
    7524:	656c6553 	.word	0x656c6553
    7528:	4c207463 	.word	0x4c207463
    752c:	20656e69 	.word	0x20656e69
    7530:	00776f4c 	.word	0x00776f4c
    7534:	656c6553 	.word	0x656c6553
    7538:	4c207463 	.word	0x4c207463
    753c:	20656e69 	.word	0x20656e69
    7540:	68676948 	.word	0x68676948
    7544:	00000000 	.word	0x00000000
    7548:	53206f4e 	.word	0x53206f4e
    754c:	6f736e65 	.word	0x6f736e65
    7550:	43207372 	.word	0x43207372
    7554:	656e6e6f 	.word	0x656e6e6f
    7558:	64657463 	.word	0x64657463
    755c:	00000000 	.word	0x00000000

00007560 <ModemCmdData>:
    7560:	00000200 00008564 00000000 000022fd     ....d........"..
    7570:	00000000 00000001 00007a40 00020003     ........@z......
    7580:	000022fd 00000009 00000002 00007a44     ."..........Dz..
    7590:	000f0008 000022fd 0000001b 00000003     ....."..........
    75a0:	00007a50 000e000c 000022fd 0000001e     Pz......."......
    75b0:	00000004 00007a60 000c0008 000022fd     ....`z......."..
    75c0:	00000018 00000005 00007a6c 00080005     ........lz......
    75d0:	000022fd 00000011 00000006 00007a78     ."..........xz..
    75e0:	000b000a 000022fd 00000019 00000007     ....."..........
    75f0:	00007a84 0015000a 000022fd 00000023     .z......."..#...
    7600:	00000008 00007a90 00020005 000022fd     .....z......."..
    7610:	0000000b 00000109 00007a98 003d0027     .........z..'.=.
    7620:	000022fd 00000068 0000010a 00007ac0     ."..h........z..
    7630:	00020012 000022fd 00000018 0000010b     ....."..........
    7640:	00007ad4 00020012 000022fd 00000018     .z......."......
    7650:	0000010c 00007ae8 00020012 000022fd     .....z......."..
    7660:	00000018 0000010d 00007afc 00020012     .........z......
    7670:	000022fd 00000018 0000010e 00007b10     ."...........{..
    7680:	00020012 000022fd 00000018 0000010f     ....."..........
    7690:	00007b24 00020012 000022fd 00000018     ${......."......
    76a0:	00000110 00007b38 00020012 000022fd     ....8{......."..
    76b0:	00000018 00000111 00007b4c 00020012     ........L{......
    76c0:	000022fd 00000018 00000112 00007b60     ."..........`{..
    76d0:	00020012 000022fd 00000018 00000113     ....."..........
    76e0:	00007b74 00020013 000022fd 00000019     t{......."......
    76f0:	00000114 00007b88 0002001f 000022fd     .....{......."..
    7700:	00000025 00000115 00007ba8 00020023     %........{..#...
    7710:	000022fd 00000029 00000116 00007bcc     ."..)........{..
    7720:	0002001a 000022fd 00000020 00000117     .....".. .......
    7730:	20000000 00070011 000022fd 0000001c     ... ....."......
    7740:	00000118 200001c4 00bf003a 000022fd     ....... :...."..
    7750:	000000fd 00000119 00007be8 00020010     .........{......
    7760:	000022fd 00000016 0000011a 00007bfc     ."...........{..
    7770:	00020010 000022fd 00000016 0000011b     ....."..........
    7780:	00007c10 0002000b 000022fd 00000011     .|......."......
	...
    7a10:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    7a20:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    7a30:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    7a40:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    7a50:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    7a60:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    7a70:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    7a80:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    7a90:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    7aa0:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    7ab0:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    7ac0:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    7ad0:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    7ae0:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    7af0:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    7b00:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    7b10:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    7b20:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    7b30:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    7b40:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    7b50:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    7b60:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    7b70:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    7b80:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    7b90:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    7ba0:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    7bb0:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    7bc0:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    7bd0:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    7be0:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    7bf0:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    7c00:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    7c10:	432b5441 54544147 000d303d 6f727245     AT+CGATT=0..Erro
    7c20:	48203a72 20706165 6f6c6c61 69746163     r: Heap allocati
    7c30:	66206e6f 7020726f 65737261 74616420     on for parse dat
    7c40:	75622061 72656666 69616620 0064656c     a buffer failed.
    7c50:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    7c60:	76206f74 66697265 68742079 6f632065     to verify the co
    7c70:	6e616d6d 74732064 676e6972 72756420     mmand string dur
    7c80:	20676e69 73726170 00676e69 6f727245     ing parsing.Erro
    7c90:	4e203a72 6120746f 20656c62 72206f74     r: Not able to r
    7ca0:	20646165 61746164 6f726620 6572206d     ead data from re
    7cb0:	76696563 69722065 6220676e 65666675     ceive ring buffe
    7cc0:	75642072 676e6972 72617020 00726573     r during parser.
    7cd0:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    7ce0:	69746163 66206e6f 7220726f 6f707365     cation for respo
    7cf0:	2065736e 61746164 66756220 20726566     nse data buffer 
    7d00:	6c696166 00006465 00004b4f 6e6e6f43     failed..OK..Conn
    7d10:	69746365 74206e6f 6874206f 65732065     ection to the se
    7d20:	72657672 20736920 74736f6c 2e2e2e2e     rver is lost....
    7d30:	0000002e 69797254 7420676e 7365206f     ....Trying to es
    7d40:	6c626174 20687369 20656874 6e6e6f63     tablish the conn
    7d50:	69746365 74206e6f 6573206f 72657672     ection to server
    7d60:	502e2e2e 7361656c 61772065 2e2e7469     ...Please wait..
    7d70:	2e2e2e2e 00000a0d 6c696146 74206465     ........Failed t
    7d80:	6573206f 7420746e 53206568 69737365     o sent the Sessi
    7d90:	43206e6f 65736f6c 71657220 74736575     on Close request
    7da0:	206f7420 54207854 006b7361 6f727245      to Tx Task.Erro
    7db0:	203a2072 20746f4e 656c6261 206f7420     r : Not able to 
    7dc0:	6174626f 54206e69 65532078 6170616d     obtain Tx Semapa
    7dd0:	65726f68 00000000 6e617254 74696d73     hore....Transmit
    7de0:	65755120 69206575 6f6e2073 6d652074      Queue is not em
    7df0:	00797470 4d206f4e 2065726f 69746341     pty.No More Acti
    7e00:	43206576 656e6e6f 6f697463 7420736e     ve Connections t
    7e10:	6c63206f 0065736f 736f6c43 41206465     o close.Closed A
    7e20:	41206c6c 76697463 6f432065 63656e6e     ll Active Connec
    7e30:	6e6f6974 00000073 6c696146 74206465     tions...Failed t
    7e40:	6572206f 76696563 6f632065 63656e6e     o receive connec
    7e50:	6e6f6974 73657220 736e6f70 6e692065     tion response in
    7e60:	20585220 65646f6d 00000000 756f7242      RX mode....Brou
    7e70:	20746867 20656874 20504450 6e6e6f63     ght the PDP conn
    7e80:	69746365 44206e6f 004e574f 65707845     ection DOWN.Expe
    7e90:	64657463 73655220 736e6f70 6f4e2065     cted Response No
    7ea0:	65522074 76696563 2e2e6465 0000002e     t Received......
    7eb0:	6c696146 74206465 6573206f 7420746e     Failed to sent t
    7ec0:	50206568 65442053 68636174 71657220     he PS Detach req
    7ed0:	74736575 206f7420 54207854 006b7361     uest to Tx Task.
    7ee0:	61746544 64656863 65687420 50445020     Detached the PDP
    7ef0:	00535020 656c6544 20646574 206c6c61      PS.Deleted all 
    7f00:	7420666f 70206568 69766572 2073756f     of the previous 
    7f10:	6e6e6f63 69746365 63206e6f 69666e6f     connection confi
    7f20:	61727567 6e6f6974 00000073 6c696146     gurations...Fail
    7f30:	74206465 6573206f 7420746e 45206568     ed to sent the E
    7f40:	7020464f 65747461 74206e72 7854206f     OF pattern to Tx
    7f50:	73615420 0000006b 20464f45 74746150      Task...EOF Patt
    7f60:	206e7265 666e6f63 72756769 00006465     ern configured..
    7f70:	6c696146 74206465 6573206f 6120746e     Failed to sent a
    7f80:	73656363 6f702073 20746e69 20646d63     ccess point cmd 
    7f90:	54206f74 61542078 00006b73 65636341     to Tx Task..Acce
    7fa0:	50207373 746e696f 6e6f6320 75676966     ss Point configu
    7fb0:	00646572 6c696146 74206465 6573206f     red.Failed to se
    7fc0:	6320746e 656e6e6f 6f697463 6974206e     nt connection ti
    7fd0:	2072656d 20646d63 54206f74 61542078     mer cmd to Tx Ta
    7fe0:	00006b73 6e6e6f43 69746365 54206e6f     sk..Connection T
    7ff0:	72656d69 6f632073 6769666e 64657275     imers configured
    8000:	00000000 6e6e6f43 69746365 53206e6f     ....Connection S
    8010:	75746174 203a2073 43534944 454e4e4f     tatus : DISCONNE
    8020:	44455443 45554420 204f5420 5754454e     CTED DUE TO NETW
    8030:	004b524f 6e6e6f43 69746365 53206e6f     ORK.Connection S
    8040:	75746174 203a2073 4e4e4f43 45544345     tatus : CONNECTE
    8050:	00000044 6e6e6f43 69746365 73206e6f     D...Connection s
    8060:	65636375 75667373 2e2e2e6c 756f6c43     uccessful...Clou
    8070:	65532064 72657672 6e6f6320 75676966     d Server configu
    8080:	00646572 6e6e6f43 69746365 53206e6f     red.Connection S
    8090:	75746174 203a2073 4c494146 54204445     tatus : FAILED T
    80a0:	4f43204f 43454e4e 00000054 6e6e6f43     O CONNECT...Conn
    80b0:	69746365 53206e6f 75746174 203a2073     ection Status : 
    80c0:	4e4e4f43 49544345 43204e4f 45534f4c     CONNECTION CLOSE
    80d0:	00000044 6e6e6f43 69746365 53206e6f     D...Connection S
    80e0:	75746174 203a2073 4e4e4f43 49544345     tatus : CONNECTI
    80f0:	49204e4f 5250204e 4552474f 00005353     ON IN PROGRESS..
    8100:	6e6e6f43 69746365 53206e6f 75746174     Connection Statu
    8110:	203a2073 454c4449 4d495420 53205245     s : IDLE TIMER S
    8120:	54524154 46204445 4420524f 4f435349     TARTED FOR DISCO
    8130:	43454e4e 4e4f4954 00000000 6e6e6f43     NNECTION....Conn
    8140:	69746365 53206e6f 75746174 203a2073     ection Status : 
    8150:	454c4449 4d495420 43205245 45434e41     IDLE TIMER CANCE
    8160:	44454c4c 00000000 6f727245 203a2072     LLED....Error : 
    8170:	6e6e6f43 69746365 46206e6f 756c6961     Connection Failu
    8180:	00006572 74736552 69747261 7420676e     re..Restarting t
    8190:	63206568 656e6e6f 6f697463 6e69206e     he connection in
    81a0:	61697469 617a696c 6e6f6974 002e2e2e     itialization....
    81b0:	4e4e4f43 00544345 736f6c43 20676e69     CONNECT.Closing 
    81c0:	69746341 43206576 656e6e6f 6f697463     Active Connectio
    81d0:	0000736e 69746f4e 61636966 6e6f6974     ns..Notification
    81e0:	6e657320 72662074 63206d6f 656e6e6f      sent from conne
    81f0:	6f697463 6174206e 00006b73 20746f47     ction task..Got 
    8200:	20656874 616d6573 726f6870 61622065     the semaphore ba
    8210:	69206b63 6f63206e 63656e6e 6e6f6974     ck in connection
    8220:	73617420 0000006b 4e4e4f43 0d544345      task...CONNECT.
    8230:	5454480a 2e312f50 30322031 4b4f2030     .HTTP/1.1 200 OK
    8240:	00000000 65500a0d 726f6672 676e696d     ......Performing
    8250:	65687420 72724520 5220726f 766f6365      the Error Recov
    8260:	0d797265 0000000a 736f6c43 20676e69     ery.....Closing 
    8270:	20656874 69746361 63206576 656e6e6f     the active conne
    8280:	6f697463 0000006e 626f7250 206d656c     ction...Problem 
    8290:	41206e69 206f7475 6f636552 79726576     in Auto Recovery
    82a0:	0000002e 69797254 7420676e 6572206f     ....Trying to re
    82b0:	7473652d 696c6261 74206873 63206568     -establish the c
    82c0:	656e6e6f 6f697463 6874206e 67756f72     onnection throug
    82d0:	20612068 65646f6d 6572206d 72617473     h a modem restar
    82e0:	2e2e2e74 000a0d2e 6978614d 206d756d     t.......Maximum 
    82f0:	72746572 6f632079 20746e75 20726f66     retry count for 
    8300:	6f747561 63657220 7265766f 73692079     auto recovery is
    8310:	70786520 64657269 0000002e 69797254      expired....Tryi
    8320:	7420676e 6572206f 7473652d 696c6261     ng to re-establi
    8330:	74206873 63206568 656e6e6f 6f697463     sh the connectio
    8340:	6874206e 67756f72 20612068 6c6f6877     n through a whol
    8350:	79732065 6d657473 73657220 74726174     e system restart
    8360:	2e2e2e2e 00000a0d 6f727245 65522072     ........Error Re
    8370:	65766f63 43207972 6c706d6f 64657465     covery Completed
    8380:	00000a0d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ....============
    8390:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    83a0:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    83b0:	3d3d3d3d 000a0d3d 61747345 73696c62     =====...Establis
    83c0:	676e6968 6e206120 63207765 656e6e6f     hing a new conne
    83d0:	6f697463 6977206e 73206874 65767265     ction with serve
    83e0:	00000072 74737953 69206d65 75612073     r...System is au
    83f0:	72206f74 766f6365 64657265 726f6620     to recovered for
    8400:	726f6d20 68742065 33206e61 6d697420      more than 3 tim
    8410:	002e7365 66726550 696d726f 6120676e     es..Performing a
    8420:	73797320 206d6574 74736572 2e747261      system restart.
    8430:	2e2e2e2e 2e2e2e2e 2e2e2e2e 2e2e2e2e     ................
    8440:	0d2e2e2e 0000000a 6c696146 74206465     ........Failed t
    8450:	6573206f 7420746e 44206568 20676169     o sent the Diag 
    8460:	61746164 206f7420 54207854 006b7361     data to Tx Task.
    8470:	69726556 6e697966 68742067 41552065     Verifying the UA
    8480:	4c205452 206b6e69 74617473 77207375     RT Link status w
    8490:	20687469 65646f4d 0000006d 63637553     ith Modem...Succ
    84a0:	46737365 796c6c75 72657620 65696669     essFully verifie
    84b0:	68742064 41552065 4c205452 206b6e69     d the UART Link 
    84c0:	77746562 206e6565 444d4153 43203135     between SAMD51 C
    84d0:	72746e6f 656c6c6f 20262072 65646f4d     ontroller & Mode
    84e0:	0000006d 72746552 65766569 68742064     m...Retrieved th
    84f0:	6f4d2065 206d6564 49454d49 6d754e20     e Modem IMEI Num
    8500:	00726562 72746552 65766569 68742064     ber.Retrieved th
    8510:	6f4d2065 206d6564 69726573 4e206c61     e Modem serial N
    8520:	65626d75 00000072 72756f48 5320796c     umber...Hourly S
    8530:	65747379 6552206d 72617473 69742074     ystem Restart ti
    8540:	2072656d 69707865 2e646572 62655220     mer expired. Reb
    8550:	69746f6f 7420676e 73206568 65747379     ooting the syste
    8560:	0a0d2e6d 00000000 72756f48 7953796c     m.......HourlySy
    8570:	6d657473 74736552 54747261 72656d69     stemRestartTimer
    8580:	00000000 6b636150 72547465 6d736e61     ....PacketTransm
    8590:	65507469 646f6972 69546369 0072656d     itPeriodicTimer.
    85a0:	65646f4d 6974206d 7372656d 65726120     Modem timers are
    85b0:	61747320 64657472 00000000 6c696146      started....Fail
    85c0:	74206465 6e69206f 61697469 657a696c     ed to initialize
    85d0:	65687420 646f6d20 74206d65 72656d69      the modem timer
    85e0:	52202e73 6f6f6265 676e6974 65687420     s. Rebooting the
    85f0:	73797320 006d6574 6c696146 74206465      system.Failed t
    8600:	6f70206f 74207473 63206568 656e6e6f     o post the conne
    8610:	6f697463 6552206e 6e6f7073 74206573     ction Response t
    8620:	7551206f 00657565 6f727245 203a2072     o Queue.Error : 
    8630:	6d6d6f43 20646e61 70736552 65736e6f     Command Response
    8640:	65755120 69206575 6f6e2073 6d652074      Queue is not em
    8650:	00797470 4f525245 52203a52 69656365     pty.ERROR: Recei
    8660:	20646576 65206e61 7974706d 73657220     ved an empty res
    8670:	736e6f70 74732065 676e6972 206e6920     ponse string in 
    8680:	6d6d6f63 20646e61 70736572 65736e6f     command response
    8690:	6e616820 72656c64 00000000 4f525245      handler....ERRO
    86a0:	43203a52 616d6d6f 5020646e 69737261     R: Command Parsi
    86b0:	4620676e 656c6961 00000064 73207854     ng Failed...Tx s
    86c0:	61697265 6544206c 20677562 656e6f44     erial Debug Done
    86d0:	00000a0d 44207852 0d656e6f 0000000a     ....Rx Done.....
    86e0:	2d207325 20642520 00000a0d 682f2e2e     %s - %d ....../h
    86f0:	692f6c61 756c636e 682f6564 775f6c61     al/include/hal_w
    8700:	682e7464 00000000 6f626552 6e69746f     dt.h....Rebootin
    8710:	2e2e2e67 61656c50 77206573 2e746961     g...Please wait.
    8720:	00002e2e 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    8730:	615f6c61 79735f63 632e636e 00000000     al_ac_sync.c....
    8740:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
    8750:	735f6364 2e636e79 00000063 682f2e2e     dc_sync.c...../h
    8760:	732f6c61 682f6372 645f6c61 735f6361     al/src/hal_dac_s
    8770:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    8780:	682f6372 665f6c61 6873616c 0000632e     rc/hal_flash.c..
    8790:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
    87a0:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
    87b0:	682f6372 745f6c61 72656d69 0000632e     rc/hal_timer.c..
    87c0:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    87d0:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...
    87e0:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    87f0:	6974752f 725f736c 62676e69 65666675     /utils_ringbuffe
    8800:	00632e72 682f2e2e 612f6c70 70682f63     r.c.../hpl/ac/hp
    8810:	63615f6c 0000632e                       l_ac.c..

00008818 <_adcs>:
    8818:	00c00000 00830002 00001900 00000000     ................
    8828:	00000000 00010001 00000000 00000000     ................
	...
    8844:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    8854:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    8864:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00008874 <_cfgs>:
	...

00008974 <user_mux_confs>:
	...

000089b8 <channel_confs>:
	...

000089f8 <interrupt_cfg>:
	...
    8a78:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    8a88:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    8a98:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    8aa8:	43000000 43000400                       ...C...C

00008ab0 <_usarts>:
    8ab0:	00000003 40200004 00030000 00700002     ...... @......p.
    8ac0:	0000f62b 00000000 00000004 40300184     +.............0@
    8ad0:	00030300 00700002 0000ff2e 00000000     ......p.........
    8ae0:	00000005 40300004 00030000 00700002     ......0@......p.
    8af0:	0000f62b 00000000                       +.......

00008af8 <_i2cms>:
	...

00008b10 <sercomspi_regs>:
	...
    8b24:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    8b34:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    8b44:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00008b54 <_tccs>:
    8b54:	00000000 00000300 00000000 00000000     ................
    8b64:	00001770 00000000 00000000 00000000     p...............
    8b74:	00000000 00000001 00000300 00000000     ................
    8b84:	00000000 00001770 00000000 00000000     ....p...........
	...
    8b9c:	00000002 00000300 00000000 00000000     ................
    8bac:	00001770 00000000 00000000 00000000     p...............
    8bbc:	00000000 00000003 00000300 00000000     ................
    8bcc:	00000000 00001770 00000000 00000000     ....p...........
	...
    8be4:	00000004 00000300 00000000 00000000     ................
    8bf4:	00001770 00000000 00000000 00000000     p...............
    8c04:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    8c14:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    8c24:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    8c34:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    8c44:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    8c54:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    8c64:	736e6553 6154726f 00006b73 65646f4d     SensorTask..Mode
    8c74:	5478546d 006b7361 65646f4d 5478526d     mTxTask.ModemRxT
    8c84:	006b7361 65646f4d 6f72506d 73736563     ask.ModemProcess
    8c94:	6b736154 00000000 65646f4d 6169446d     Task....ModemDia
    8ca4:	73615467 0000006b 65657246 4f545220     gTask...Free RTO
    8cb4:	63532053 75646568 2072656c 20746f6e     S Scheduler not 
    8cc4:	72617473 00646574 6c696146 74206465     started.Failed t
    8cd4:	7263206f 65746165 73617420 0000736b     o create tasks..
    8ce4:	6f727245 53203a72 64656863 72656c75     Error: Scheduler
    8cf4:	69786520 00646574 454c4449 00000000      exited.IDLE....
    8d04:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    8d14:	20726d54 00637653                       Tmr Svc.

00008d1c <__sf_fake_stderr>:
	...

00008d3c <__sf_fake_stdin>:
	...

00008d5c <__sf_fake_stdout>:
	...
    8d7c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8d8c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8d9c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8dac:	00006665                                ef..

00008db0 <_init>:
    8db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8db2:	bf00      	nop
    8db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8db6:	bc08      	pop	{r3}
    8db8:	469e      	mov	lr, r3
    8dba:	4770      	bx	lr

00008dbc <__init_array_start>:
    8dbc:	00000289 	.word	0x00000289

00008dc0 <_fini>:
    8dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8dc2:	bf00      	nop
    8dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8dc6:	bc08      	pop	{r3}
    8dc8:	469e      	mov	lr, r3
    8dca:	4770      	bx	lr

00008dcc <__fini_array_start>:
    8dcc:	00000265 	.word	0x00000265
