
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008368  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000190  20000000  00008368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020190  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020190  2**0
                  CONTENTS
  4 .bss          00003ce8  20000190  00008500  00020190  2**4
                  ALLOC
  5 .stack        00010000  20003e78  0000c1e8  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201be  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005c28c  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009467  00000000  00000000  0007c4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ac8e  00000000  00000000  0008590a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b68  00000000  00000000  000a0598  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002230  00000000  00000000  000a2100  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001b268  00000000  00000000  000a4330  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002da5a  00000000  00000000  000bf598  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108801  00000000  00000000  000ecff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000495c  00000000  00000000  001f57f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 3e 01 20 fd 1d 00 00 f9 1d 00 00 f9 1d 00 00     x>. ............
      10:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 00 00 00 00     ................
	...
      2c:	c1 42 00 00 f9 1d 00 00 00 00 00 00 61 43 00 00     .B..........aC..
      3c:	c5 43 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     .C..............
      4c:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
      5c:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
      6c:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
      7c:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
      8c:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
      9c:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
      ac:	f9 1d 00 00 f9 1d 00 00 85 31 00 00 99 31 00 00     .........1...1..
      bc:	15 2f 00 00 21 2f 00 00 2d 2f 00 00 39 2f 00 00     ./..!/..-/..9/..
      cc:	45 2f 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     E/..............
      dc:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
      ec:	f9 1d 00 00 00 00 00 00 95 32 00 00 f9 1d 00 00     .........2......
      fc:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
     10c:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
     11c:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 21 13 00 00     ............!...
     12c:	2d 13 00 00 39 13 00 00 f9 1d 00 00 f9 1d 00 00     -...9...........
     13c:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
     14c:	f9 1d 00 00 b5 1c 00 00 f9 1d 00 00 00 00 00 00     ................
	...
     180:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
     190:	00 00 00 00 35 38 00 00 f9 1d 00 00 f9 1d 00 00     ....58..........
     1a0:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
     1b0:	49 38 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     I8..............
     1c0:	f9 1d 00 00 5d 38 00 00 f9 1d 00 00 f9 1d 00 00     ....]8..........
     1d0:	f9 1d 00 00 71 38 00 00 f9 1d 00 00 f9 1d 00 00     ....q8..........
     1e0:	85 38 00 00 f9 1d 00 00 f9 1d 00 00 79 3d 00 00     .8..........y=..
     1f0:	8d 3d 00 00 a1 3d 00 00 b5 3d 00 00 c9 3d 00 00     .=...=...=...=..
     200:	dd 3d 00 00 00 00 00 00 00 00 00 00 f9 1d 00 00     .=..............
     210:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
     220:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
     230:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
     240:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
     250:	f9 1d 00 00 f9 1d 00 00 f9 1d 00 00 f9 1d 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	00008368 	.word	0x00008368

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00008368 	.word	0x00008368
     2c4:	20000194 	.word	0x20000194
     2c8:	00008368 	.word	0x00008368
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Apps/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b500      	push	{lr}
     2d2:	b089      	sub	sp, #36	; 0x24
     2d4:	4606      	mov	r6, r0
	uint8_t dbgBuffer[30];
	memset(dbgBuffer,'0',30);
     2d6:	221e      	movs	r2, #30
     2d8:	2130      	movs	r1, #48	; 0x30
     2da:	4668      	mov	r0, sp
     2dc:	4b0c      	ldr	r3, [pc, #48]	; (310 <vApplicationStackOverflowHook+0x40>)
     2de:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e0:	4d0c      	ldr	r5, [pc, #48]	; (314 <vApplicationStackOverflowHook+0x44>)
     2e2:	4628      	mov	r0, r5
     2e4:	4c0c      	ldr	r4, [pc, #48]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e6:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2e8:	480c      	ldr	r0, [pc, #48]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2ea:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ec:	4628      	mov	r0, r5
     2ee:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f0:	480b      	ldr	r0, [pc, #44]	; (320 <vApplicationStackOverflowHook+0x50>)
     2f2:	47a0      	blx	r4

	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2f4:	4632      	mov	r2, r6
     2f6:	490b      	ldr	r1, [pc, #44]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f8:	4668      	mov	r0, sp
     2fa:	4b0b      	ldr	r3, [pc, #44]	; (328 <vApplicationStackOverflowHook+0x58>)
     2fc:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     2fe:	4668      	mov	r0, sp
     300:	4b0a      	ldr	r3, [pc, #40]	; (32c <vApplicationStackOverflowHook+0x5c>)
     302:	4798      	blx	r3
     304:	b281      	uxth	r1, r0
     306:	4668      	mov	r0, sp
     308:	4b09      	ldr	r3, [pc, #36]	; (330 <vApplicationStackOverflowHook+0x60>)
     30a:	4798      	blx	r3
     30c:	e7fe      	b.n	30c <vApplicationStackOverflowHook+0x3c>
     30e:	bf00      	nop
     310:	00006271 	.word	0x00006271
     314:	00006b80 	.word	0x00006b80
     318:	00001c69 	.word	0x00001c69
     31c:	00006bbc 	.word	0x00006bbc
     320:	00007c0c 	.word	0x00007c0c
     324:	00006bf8 	.word	0x00006bf8
     328:	000063f9 	.word	0x000063f9
     32c:	00006451 	.word	0x00006451
     330:	00001c25 	.word	0x00001c25

00000334 <DispatchTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "Apps/SerialDebug/SerialDebug.h"


void DispatchTask( void *DispatchTaskParam)
{
     334:	b570      	push	{r4, r5, r6, lr}
     336:	b082      	sub	sp, #8
	TickType_t xLastWakeTime;
	const TickType_t xDelayMs = pdMS_TO_TICKS(700UL);
	const TickType_t xDebugPrintDelayMs = pdMS_TO_TICKS(500UL);
	xLastWakeTime = xTaskGetTickCount();
     338:	4b06      	ldr	r3, [pc, #24]	; (354 <DispatchTask+0x20>)
     33a:	4798      	blx	r3
     33c:	ac02      	add	r4, sp, #8
     33e:	f844 0d04 	str.w	r0, [r4, #-4]!

	while(1)
	{
		kickWatchDog();
     342:	4e05      	ldr	r6, [pc, #20]	; (358 <DispatchTask+0x24>)
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     344:	4d05      	ldr	r5, [pc, #20]	; (35c <DispatchTask+0x28>)
		kickWatchDog();
     346:	47b0      	blx	r6
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     348:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     34c:	4620      	mov	r0, r4
     34e:	47a8      	blx	r5
     350:	e7f9      	b.n	346 <DispatchTask+0x12>
     352:	bf00      	nop
     354:	000053e1 	.word	0x000053e1
     358:	00001dad 	.word	0x00001dad
     35c:	00005621 	.word	0x00005621

00000360 <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     360:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     362:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     366:	460d      	mov	r5, r1
     368:	4c04      	ldr	r4, [pc, #16]	; (37c <getModemCommandData+0x1c>)
     36a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     36e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     372:	6823      	ldr	r3, [r4, #0]
     374:	602b      	str	r3, [r5, #0]
}
     376:	bc30      	pop	{r4, r5}
     378:	4770      	bx	lr
     37a:	bf00      	nop
     37c:	00006c0c 	.word	0x00006c0c

00000380 <buildHttpHeaderWithActiveSessionID>:
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildHttpHeaderWithActiveSessionID(const uint8_t* activeSessionId)
{
	switch (*activeSessionId)
     380:	7803      	ldrb	r3, [r0, #0]
     382:	3b31      	subs	r3, #49	; 0x31
     384:	2b08      	cmp	r3, #8
     386:	d83b      	bhi.n	400 <buildHttpHeaderWithActiveSessionID+0x80>
     388:	e8df f003 	tbb	[pc, r3]
     38c:	17110b05 	.word	0x17110b05
     390:	2f29231d 	.word	0x2f29231d
     394:	35          	.byte	0x35
     395:	00          	.byte	0x00
	{
		case SESSION_ID_1:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '1';
     396:	4b1b      	ldr	r3, [pc, #108]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     398:	2231      	movs	r2, #49	; 0x31
     39a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '1';
     39c:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3a0:	4770      	bx	lr

		case SESSION_ID_2:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '2';
     3a2:	4b18      	ldr	r3, [pc, #96]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3a4:	2232      	movs	r2, #50	; 0x32
     3a6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '2';
     3a8:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3ac:	4770      	bx	lr

		case SESSION_ID_3:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '3';
     3ae:	4b15      	ldr	r3, [pc, #84]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3b0:	2233      	movs	r2, #51	; 0x33
     3b2:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '3';
     3b4:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3b8:	4770      	bx	lr

		case SESSION_ID_4:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '4';
     3ba:	4b12      	ldr	r3, [pc, #72]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3bc:	2234      	movs	r2, #52	; 0x34
     3be:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '4';
     3c0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3c4:	4770      	bx	lr

		case SESSION_ID_5:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '5';
     3c6:	4b0f      	ldr	r3, [pc, #60]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3c8:	2235      	movs	r2, #53	; 0x35
     3ca:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '5';
     3cc:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3d0:	4770      	bx	lr

		case SESSION_ID_6:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '6';
     3d2:	4b0c      	ldr	r3, [pc, #48]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3d4:	2236      	movs	r2, #54	; 0x36
     3d6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '6';
     3d8:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3dc:	4770      	bx	lr

		case SESSION_ID_7:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '7';
     3de:	4b09      	ldr	r3, [pc, #36]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3e0:	2237      	movs	r2, #55	; 0x37
     3e2:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '7';
     3e4:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3e8:	4770      	bx	lr

		case SESSION_ID_8:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '8';
     3ea:	4b06      	ldr	r3, [pc, #24]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3ec:	2238      	movs	r2, #56	; 0x38
     3ee:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '8';
     3f0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3f4:	4770      	bx	lr

		case SESSION_ID_9:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '9';
     3f6:	4b03      	ldr	r3, [pc, #12]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3f8:	2239      	movs	r2, #57	; 0x39
     3fa:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '9';
     3fc:	f883 2020 	strb.w	r2, [r3, #32]
     400:	4770      	bx	lr
     402:	bf00      	nop
     404:	20000000 	.word	0x20000000

00000408 <buildDataPacketsToServer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildDataPacketsToServer(void)
{
     408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	strncpy(kHttpGetCompleteData,kHttpGetString,15);
     40a:	4c0f      	ldr	r4, [pc, #60]	; (448 <buildDataPacketsToServer+0x40>)
     40c:	220f      	movs	r2, #15
     40e:	490f      	ldr	r1, [pc, #60]	; (44c <buildDataPacketsToServer+0x44>)
     410:	4620      	mov	r0, r4
     412:	4b0f      	ldr	r3, [pc, #60]	; (450 <buildDataPacketsToServer+0x48>)
     414:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
     416:	4620      	mov	r0, r4
     418:	4b0e      	ldr	r3, [pc, #56]	; (454 <buildDataPacketsToServer+0x4c>)
     41a:	4798      	blx	r3
     41c:	4d0e      	ldr	r5, [pc, #56]	; (458 <buildDataPacketsToServer+0x50>)
     41e:	4404      	add	r4, r0
     420:	f105 0720 	add.w	r7, r5, #32
     424:	462e      	mov	r6, r5
     426:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     428:	6020      	str	r0, [r4, #0]
     42a:	6061      	str	r1, [r4, #4]
     42c:	60a2      	str	r2, [r4, #8]
     42e:	60e3      	str	r3, [r4, #12]
     430:	4635      	mov	r5, r6
     432:	3410      	adds	r4, #16
     434:	42be      	cmp	r6, r7
     436:	d1f5      	bne.n	424 <buildDataPacketsToServer+0x1c>
     438:	cd07      	ldmia	r5!, {r0, r1, r2}
     43a:	6020      	str	r0, [r4, #0]
     43c:	6061      	str	r1, [r4, #4]
     43e:	60a2      	str	r2, [r4, #8]
     440:	782b      	ldrb	r3, [r5, #0]
     442:	7323      	strb	r3, [r4, #12]
     444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     446:	bf00      	nop
     448:	200001ac 	.word	0x200001ac
     44c:	20000014 	.word	0x20000014
     450:	00006485 	.word	0x00006485
     454:	00006451 	.word	0x00006451
     458:	000070bc 	.word	0x000070bc

0000045c <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
     45c:	b5f0      	push	{r4, r5, r6, r7, lr}
     45e:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
     460:	a901      	add	r1, sp, #4
     462:	4b2e      	ldr	r3, [pc, #184]	; (51c <mdmParser_solicitedCmdParser+0xc0>)
     464:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     466:	f89d 700c 	ldrb.w	r7, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
     46a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
     46e:	4b2c      	ldr	r3, [pc, #176]	; (520 <mdmParser_solicitedCmdParser+0xc4>)
     470:	4798      	blx	r3

	if(responseBuffer != NULL)
     472:	2800      	cmp	r0, #0
     474:	d04d      	beq.n	512 <mdmParser_solicitedCmdParser+0xb6>
     476:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
     478:	f8bd 1014 	ldrh.w	r1, [sp, #20]
     47c:	4b29      	ldr	r3, [pc, #164]	; (524 <mdmParser_solicitedCmdParser+0xc8>)
     47e:	4798      	blx	r3

		if(readStatus != false)
     480:	4606      	mov	r6, r0
     482:	2800      	cmp	r0, #0
     484:	d041      	beq.n	50a <mdmParser_solicitedCmdParser+0xae>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
     486:	f89d 200c 	ldrb.w	r2, [sp, #12]
     48a:	4621      	mov	r1, r4
     48c:	9802      	ldr	r0, [sp, #8]
     48e:	4b26      	ldr	r3, [pc, #152]	; (528 <mdmParser_solicitedCmdParser+0xcc>)
     490:	4798      	blx	r3
     492:	bb70      	cbnz	r0, 4f2 <mdmParser_solicitedCmdParser+0x96>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
     494:	f8bd 000e 	ldrh.w	r0, [sp, #14]
     498:	3001      	adds	r0, #1
     49a:	4b21      	ldr	r3, [pc, #132]	; (520 <mdmParser_solicitedCmdParser+0xc4>)
     49c:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
     49e:	4605      	mov	r5, r0
     4a0:	b310      	cbz	r0, 4e8 <mdmParser_solicitedCmdParser+0x8c>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
     4a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
     4a6:	b1eb      	cbz	r3, 4e4 <mdmParser_solicitedCmdParser+0x88>
     4a8:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     4aa:	1cb9      	adds	r1, r7, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
     4ac:	b2c9      	uxtb	r1, r1
     4ae:	18e2      	adds	r2, r4, r3
     4b0:	5c52      	ldrb	r2, [r2, r1]
     4b2:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
     4b4:	3301      	adds	r3, #1
     4b6:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
     4b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     4bc:	429a      	cmp	r2, r3
     4be:	d8f6      	bhi.n	4ae <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
     4c0:	2200      	movs	r2, #0
     4c2:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt+1);
     4c4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     4c8:	3201      	adds	r2, #1
     4ca:	b292      	uxth	r2, r2
     4cc:	4629      	mov	r1, r5
     4ce:	f89d 0004 	ldrb.w	r0, [sp, #4]
     4d2:	9b04      	ldr	r3, [sp, #16]
     4d4:	4798      	blx	r3
					DEBUG_PRINT("\r\n");
     4d6:	4815      	ldr	r0, [pc, #84]	; (52c <mdmParser_solicitedCmdParser+0xd0>)
     4d8:	4b15      	ldr	r3, [pc, #84]	; (530 <mdmParser_solicitedCmdParser+0xd4>)
     4da:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
     4dc:	4628      	mov	r0, r5
     4de:	4b15      	ldr	r3, [pc, #84]	; (534 <mdmParser_solicitedCmdParser+0xd8>)
     4e0:	4798      	blx	r3
     4e2:	e00a      	b.n	4fa <mdmParser_solicitedCmdParser+0x9e>
					while(parseCnt < cmdData.validDataCnt)
     4e4:	2300      	movs	r3, #0
     4e6:	e7eb      	b.n	4c0 <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
     4e8:	4813      	ldr	r0, [pc, #76]	; (538 <mdmParser_solicitedCmdParser+0xdc>)
     4ea:	4b11      	ldr	r3, [pc, #68]	; (530 <mdmParser_solicitedCmdParser+0xd4>)
     4ec:	4798      	blx	r3
	bool parseStatus = false;
     4ee:	2600      	movs	r6, #0
     4f0:	e003      	b.n	4fa <mdmParser_solicitedCmdParser+0x9e>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
     4f2:	4812      	ldr	r0, [pc, #72]	; (53c <mdmParser_solicitedCmdParser+0xe0>)
     4f4:	4b0e      	ldr	r3, [pc, #56]	; (530 <mdmParser_solicitedCmdParser+0xd4>)
     4f6:	4798      	blx	r3
				parseStatus = false;
     4f8:	2600      	movs	r6, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
     4fa:	4620      	mov	r0, r4
     4fc:	4b0d      	ldr	r3, [pc, #52]	; (534 <mdmParser_solicitedCmdParser+0xd8>)
     4fe:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
     500:	4b0f      	ldr	r3, [pc, #60]	; (540 <mdmParser_solicitedCmdParser+0xe4>)
     502:	4798      	blx	r3

	return parseStatus;
}
     504:	4630      	mov	r0, r6
     506:	b007      	add	sp, #28
     508:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
     50a:	480e      	ldr	r0, [pc, #56]	; (544 <mdmParser_solicitedCmdParser+0xe8>)
     50c:	4b08      	ldr	r3, [pc, #32]	; (530 <mdmParser_solicitedCmdParser+0xd4>)
     50e:	4798      	blx	r3
     510:	e7f3      	b.n	4fa <mdmParser_solicitedCmdParser+0x9e>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
     512:	480d      	ldr	r0, [pc, #52]	; (548 <mdmParser_solicitedCmdParser+0xec>)
     514:	4b06      	ldr	r3, [pc, #24]	; (530 <mdmParser_solicitedCmdParser+0xd4>)
     516:	4798      	blx	r3
	bool parseStatus = false;
     518:	2600      	movs	r6, #0
     51a:	e7f1      	b.n	500 <mdmParser_solicitedCmdParser+0xa4>
     51c:	00000361 	.word	0x00000361
     520:	00004595 	.word	0x00004595
     524:	00001401 	.word	0x00001401
     528:	00006461 	.word	0x00006461
     52c:	00007c0c 	.word	0x00007c0c
     530:	00001c69 	.word	0x00001c69
     534:	00004669 	.word	0x00004669
     538:	000072c8 	.word	0x000072c8
     53c:	000072fc 	.word	0x000072fc
     540:	00001455 	.word	0x00001455
     544:	00007338 	.word	0x00007338
     548:	0000737c 	.word	0x0000737c

0000054c <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     54c:	4b01      	ldr	r3, [pc, #4]	; (554 <mdmParser_SetLastCmdProcessed+0x8>)
     54e:	7018      	strb	r0, [r3, #0]
     550:	4770      	bx	lr
     552:	bf00      	nop
     554:	20000023 	.word	0x20000023

00000558 <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     558:	4b01      	ldr	r3, [pc, #4]	; (560 <mdmParser_SetLastSentAtCommand+0x8>)
     55a:	7018      	strb	r0, [r3, #0]
     55c:	4770      	bx	lr
     55e:	bf00      	nop
     560:	200001e8 	.word	0x200001e8

00000564 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     564:	4b01      	ldr	r3, [pc, #4]	; (56c <mdmParser_GetLastSentAtCommand+0x8>)
     566:	7818      	ldrb	r0, [r3, #0]
     568:	4770      	bx	lr
     56a:	bf00      	nop
     56c:	200001e8 	.word	0x200001e8

00000570 <getCloseActiveSessionCmd>:
**===========================================================================*/
static AT_CMD_TYPE getCloseActiveSessionCmd(uint8_t sessionID)
{
	AT_CMD_TYPE sessionCloseCmd;

	switch(sessionID)
     570:	3801      	subs	r0, #1
     572:	2809      	cmp	r0, #9
     574:	d81a      	bhi.n	5ac <getCloseActiveSessionCmd+0x3c>
     576:	e8df f000 	tbb	[pc, r0]
     57a:	0705      	.short	0x0705
     57c:	0f0d0b09 	.word	0x0f0d0b09
     580:	17151311 	.word	0x17151311
	{
		case 1:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_1;
     584:	200a      	movs	r0, #10
     586:	4770      	bx	lr
		}
		break;

		case 2:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_2;
     588:	200b      	movs	r0, #11
		}
		break;
     58a:	4770      	bx	lr

		case 3:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_3;
     58c:	200c      	movs	r0, #12
		}
		break;
     58e:	4770      	bx	lr

		case 4:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_4;
     590:	200d      	movs	r0, #13
		}
		break;
     592:	4770      	bx	lr

		case 5:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_5;
     594:	200e      	movs	r0, #14
		}
		break;
     596:	4770      	bx	lr

		case 6:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_6;
     598:	200f      	movs	r0, #15
		}
		break;
     59a:	4770      	bx	lr

		case 7:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_7;
     59c:	2010      	movs	r0, #16
		}
		break;
     59e:	4770      	bx	lr

		case 8:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_8;
     5a0:	2011      	movs	r0, #17
		}
		break;
     5a2:	4770      	bx	lr

		case 9:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_9;
     5a4:	2012      	movs	r0, #18
		}
		break;
     5a6:	4770      	bx	lr

		case 10:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_10;
     5a8:	2013      	movs	r0, #19
		}
		break;
     5aa:	4770      	bx	lr
	switch(sessionID)
     5ac:	2000      	movs	r0, #0
		default:
		break;
	}
	
	return sessionCloseCmd;
}
     5ae:	4770      	bx	lr

000005b0 <MdmConnect_HttpConnectionInit>:
	gHttpConnectionState = MDM_HTTP_DISCONNECTED;
     5b0:	4b07      	ldr	r3, [pc, #28]	; (5d0 <MdmConnect_HttpConnectionInit+0x20>)
     5b2:	2200      	movs	r2, #0
     5b4:	701a      	strb	r2, [r3, #0]
	gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     5b6:	705a      	strb	r2, [r3, #1]
	gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     5b8:	709a      	strb	r2, [r3, #2]
	gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
     5ba:	70da      	strb	r2, [r3, #3]
	gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
     5bc:	711a      	strb	r2, [r3, #4]
	sessionIdCount = 5;
     5be:	2105      	movs	r1, #5
     5c0:	7159      	strb	r1, [r3, #5]
	ConnectionResponse.atCmd = CMD_AT_MAX;
     5c2:	721a      	strb	r2, [r3, #8]
	ConnectionResponse.length = 0;
     5c4:	815a      	strh	r2, [r3, #10]
	ConnectionResponse.response = NULL;
     5c6:	60da      	str	r2, [r3, #12]
	currentSessionId = '0';
     5c8:	2230      	movs	r2, #48	; 0x30
     5ca:	741a      	strb	r2, [r3, #16]
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop
     5d0:	200001ec 	.word	0x200001ec

000005d4 <MdmCnct_ConnectInProgressSubStateMachine>:
{
     5d4:	b530      	push	{r4, r5, lr}
     5d6:	b083      	sub	sp, #12
	switch (gHttpConnectionInProgressSubstate)
     5d8:	4b8a      	ldr	r3, [pc, #552]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     5da:	785b      	ldrb	r3, [r3, #1]
     5dc:	2b05      	cmp	r3, #5
     5de:	f200 808b 	bhi.w	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
     5e2:	e8df f013 	tbh	[pc, r3, lsl #1]
     5e6:	0006      	.short	0x0006
     5e8:	00f10084 	.word	0x00f10084
     5ec:	01f9018c 	.word	0x01f9018c
     5f0:	0295      	.short	0x0295
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     5f2:	4b84      	ldr	r3, [pc, #528]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     5f4:	789b      	ldrb	r3, [r3, #2]
     5f6:	2b00      	cmp	r3, #0
     5f8:	d149      	bne.n	68e <MdmCnct_ConnectInProgressSubStateMachine+0xba>
        		if(sessionIdCount > 0)
     5fa:	4b82      	ldr	r3, [pc, #520]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     5fc:	795b      	ldrb	r3, [r3, #5]
     5fe:	2b00      	cmp	r3, #0
     600:	d03e      	beq.n	680 <MdmCnct_ConnectInProgressSubStateMachine+0xac>
        		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     602:	4b81      	ldr	r3, [pc, #516]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
     604:	6818      	ldr	r0, [r3, #0]
     606:	4b81      	ldr	r3, [pc, #516]	; (80c <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     608:	4798      	blx	r3
     60a:	2800      	cmp	r0, #0
     60c:	d134      	bne.n	678 <MdmCnct_ConnectInProgressSubStateMachine+0xa4>
        		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     60e:	2100      	movs	r1, #0
     610:	4b7f      	ldr	r3, [pc, #508]	; (810 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     612:	6818      	ldr	r0, [r3, #0]
     614:	4b7f      	ldr	r3, [pc, #508]	; (814 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     616:	4798      	blx	r3
     618:	2801      	cmp	r0, #1
     61a:	d003      	beq.n	624 <MdmCnct_ConnectInProgressSubStateMachine+0x50>
        		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     61c:	487e      	ldr	r0, [pc, #504]	; (818 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     61e:	4b7f      	ldr	r3, [pc, #508]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     620:	4798      	blx	r3
     622:	e069      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     624:	2301      	movs	r3, #1
     626:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
     62a:	4b76      	ldr	r3, [pc, #472]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     62c:	7958      	ldrb	r0, [r3, #5]
     62e:	4b7c      	ldr	r3, [pc, #496]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     630:	4798      	blx	r3
     632:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
     636:	2300      	movs	r3, #0
     638:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     63a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     63e:	4669      	mov	r1, sp
     640:	4871      	ldr	r0, [pc, #452]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
     642:	6800      	ldr	r0, [r0, #0]
     644:	4c77      	ldr	r4, [pc, #476]	; (824 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     646:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
     648:	2801      	cmp	r0, #1
     64a:	d007      	beq.n	65c <MdmCnct_ConnectInProgressSubStateMachine+0x88>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     64c:	4876      	ldr	r0, [pc, #472]	; (828 <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
     64e:	4b73      	ldr	r3, [pc, #460]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     650:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
     652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     656:	4b75      	ldr	r3, [pc, #468]	; (82c <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     658:	4798      	blx	r3
     65a:	e04d      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
     65c:	2300      	movs	r3, #0
     65e:	461a      	mov	r2, r3
     660:	4619      	mov	r1, r3
     662:	486b      	ldr	r0, [pc, #428]	; (810 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     664:	6800      	ldr	r0, [r0, #0]
     666:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     668:	2201      	movs	r2, #1
     66a:	4b66      	ldr	r3, [pc, #408]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     66c:	709a      	strb	r2, [r3, #2]
                                vTaskDelay(TransmitDelayMs);
     66e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     672:	4b6e      	ldr	r3, [pc, #440]	; (82c <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     674:	4798      	blx	r3
     676:	e03f      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        		    	DEBUG_PRINT("Transmit Queue is not empty");
     678:	486d      	ldr	r0, [pc, #436]	; (830 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
     67a:	4b68      	ldr	r3, [pc, #416]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     67c:	4798      	blx	r3
     67e:	e03b      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        			DEBUG_PRINT("No More Active Connections to close");
     680:	486c      	ldr	r0, [pc, #432]	; (834 <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
     682:	4b66      	ldr	r3, [pc, #408]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     684:	4798      	blx	r3
        			gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     686:	2201      	movs	r2, #1
     688:	4b5e      	ldr	r3, [pc, #376]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     68a:	705a      	strb	r2, [r3, #1]
     68c:	e034      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     68e:	2b01      	cmp	r3, #1
     690:	d132      	bne.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     692:	f44f 7296 	mov.w	r2, #300	; 0x12c
     696:	4968      	ldr	r1, [pc, #416]	; (838 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     698:	4b68      	ldr	r3, [pc, #416]	; (83c <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     69a:	6818      	ldr	r0, [r3, #0]
     69c:	4b68      	ldr	r3, [pc, #416]	; (840 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     69e:	4798      	blx	r3
     6a0:	2801      	cmp	r0, #1
     6a2:	d129      	bne.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
	        		if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
     6a4:	4b57      	ldr	r3, [pc, #348]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     6a6:	7a1d      	ldrb	r5, [r3, #8]
     6a8:	795c      	ldrb	r4, [r3, #5]
     6aa:	4620      	mov	r0, r4
     6ac:	4b5c      	ldr	r3, [pc, #368]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     6ae:	4798      	blx	r3
     6b0:	4285      	cmp	r5, r0
     6b2:	d112      	bne.n	6da <MdmCnct_ConnectInProgressSubStateMachine+0x106>
		        		if(sessionIdCount > 0)
     6b4:	b14c      	cbz	r4, 6ca <MdmCnct_ConnectInProgressSubStateMachine+0xf6>
			        		sessionIdCount--;
     6b6:	4b53      	ldr	r3, [pc, #332]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     6b8:	3c01      	subs	r4, #1
     6ba:	715c      	strb	r4, [r3, #5]
			        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     6bc:	2200      	movs	r2, #0
     6be:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     6c0:	4b50      	ldr	r3, [pc, #320]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     6c2:	68d8      	ldr	r0, [r3, #12]
     6c4:	4b5f      	ldr	r3, [pc, #380]	; (844 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     6c6:	4798      	blx	r3
     6c8:	e016      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
			        		gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     6ca:	2201      	movs	r2, #1
     6cc:	4b4d      	ldr	r3, [pc, #308]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     6ce:	705a      	strb	r2, [r3, #1]
			        		SerialDebugPrint("Closed All Active Connections\r\n",31);
     6d0:	211f      	movs	r1, #31
     6d2:	485d      	ldr	r0, [pc, #372]	; (848 <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
     6d4:	4b5d      	ldr	r3, [pc, #372]	; (84c <MdmCnct_ConnectInProgressSubStateMachine+0x278>)
     6d6:	4798      	blx	r3
     6d8:	e7f2      	b.n	6c0 <MdmCnct_ConnectInProgressSubStateMachine+0xec>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     6da:	485d      	ldr	r0, [pc, #372]	; (850 <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
     6dc:	4b4f      	ldr	r3, [pc, #316]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     6de:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     6e0:	4b48      	ldr	r3, [pc, #288]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     6e2:	2200      	movs	r2, #0
     6e4:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     6e6:	68d8      	ldr	r0, [r3, #12]
     6e8:	4b56      	ldr	r3, [pc, #344]	; (844 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     6ea:	4798      	blx	r3
     6ec:	e004      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     6ee:	4b45      	ldr	r3, [pc, #276]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     6f0:	789b      	ldrb	r3, [r3, #2]
     6f2:	b11b      	cbz	r3, 6fc <MdmCnct_ConnectInProgressSubStateMachine+0x128>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     6f4:	2b01      	cmp	r3, #1
     6f6:	d03d      	beq.n	774 <MdmCnct_ConnectInProgressSubStateMachine+0x1a0>
}
     6f8:	b003      	add	sp, #12
     6fa:	bd30      	pop	{r4, r5, pc}
    		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     6fc:	4b42      	ldr	r3, [pc, #264]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
     6fe:	6818      	ldr	r0, [r3, #0]
     700:	4b42      	ldr	r3, [pc, #264]	; (80c <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     702:	4798      	blx	r3
     704:	2800      	cmp	r0, #0
     706:	d131      	bne.n	76c <MdmCnct_ConnectInProgressSubStateMachine+0x198>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     708:	2100      	movs	r1, #0
     70a:	4b41      	ldr	r3, [pc, #260]	; (810 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     70c:	6818      	ldr	r0, [r3, #0]
     70e:	4b41      	ldr	r3, [pc, #260]	; (814 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     710:	4798      	blx	r3
     712:	2801      	cmp	r0, #1
     714:	d003      	beq.n	71e <MdmCnct_ConnectInProgressSubStateMachine+0x14a>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     716:	4840      	ldr	r0, [pc, #256]	; (818 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     718:	4b40      	ldr	r3, [pc, #256]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     71a:	4798      	blx	r3
     71c:	e7ec      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     71e:	2301      	movs	r3, #1
     720:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KPATTERN;
     724:	2314      	movs	r3, #20
     726:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     72a:	2300      	movs	r3, #0
     72c:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     72e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     732:	4669      	mov	r1, sp
     734:	4834      	ldr	r0, [pc, #208]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
     736:	6800      	ldr	r0, [r0, #0]
     738:	4c3a      	ldr	r4, [pc, #232]	; (824 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     73a:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     73c:	2801      	cmp	r0, #1
     73e:	d007      	beq.n	750 <MdmCnct_ConnectInProgressSubStateMachine+0x17c>
                            DEBUG_PRINT("Failed to sent the EOF pattern to Tx Task");
     740:	4844      	ldr	r0, [pc, #272]	; (854 <MdmCnct_ConnectInProgressSubStateMachine+0x280>)
     742:	4b36      	ldr	r3, [pc, #216]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     744:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     74a:	4b38      	ldr	r3, [pc, #224]	; (82c <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     74c:	4798      	blx	r3
     74e:	e7d3      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     750:	2300      	movs	r3, #0
     752:	461a      	mov	r2, r3
     754:	4619      	mov	r1, r3
     756:	482e      	ldr	r0, [pc, #184]	; (810 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     758:	6800      	ldr	r0, [r0, #0]
     75a:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     75c:	2201      	movs	r2, #1
     75e:	4b29      	ldr	r3, [pc, #164]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     760:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     766:	4b31      	ldr	r3, [pc, #196]	; (82c <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     768:	4798      	blx	r3
     76a:	e7c5      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
     76c:	4830      	ldr	r0, [pc, #192]	; (830 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
     76e:	4b2b      	ldr	r3, [pc, #172]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     770:	4798      	blx	r3
     772:	e7c1      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     774:	f44f 7296 	mov.w	r2, #300	; 0x12c
     778:	492f      	ldr	r1, [pc, #188]	; (838 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     77a:	4b30      	ldr	r3, [pc, #192]	; (83c <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     77c:	6818      	ldr	r0, [r3, #0]
     77e:	4b30      	ldr	r3, [pc, #192]	; (840 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     780:	4798      	blx	r3
     782:	2801      	cmp	r0, #1
     784:	d1b8      	bne.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
	        		if(ConnectionResponse.atCmd == CMD_AT_KPATTERN)
     786:	4b1f      	ldr	r3, [pc, #124]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     788:	7a1b      	ldrb	r3, [r3, #8]
     78a:	2b14      	cmp	r3, #20
     78c:	d009      	beq.n	7a2 <MdmCnct_ConnectInProgressSubStateMachine+0x1ce>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     78e:	4830      	ldr	r0, [pc, #192]	; (850 <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
     790:	4b22      	ldr	r3, [pc, #136]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     792:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     794:	4b1b      	ldr	r3, [pc, #108]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     796:	2200      	movs	r2, #0
     798:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     79a:	68d8      	ldr	r0, [r3, #12]
     79c:	4b29      	ldr	r3, [pc, #164]	; (844 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     79e:	4798      	blx	r3
     7a0:	e7aa      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
	        			SerialDebugPrint("EOF Pattern configured\r\n",24);
     7a2:	2118      	movs	r1, #24
     7a4:	482c      	ldr	r0, [pc, #176]	; (858 <MdmCnct_ConnectInProgressSubStateMachine+0x284>)
     7a6:	4d29      	ldr	r5, [pc, #164]	; (84c <MdmCnct_ConnectInProgressSubStateMachine+0x278>)
     7a8:	47a8      	blx	r5
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     7aa:	4c16      	ldr	r4, [pc, #88]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     7ac:	8961      	ldrh	r1, [r4, #10]
     7ae:	68e0      	ldr	r0, [r4, #12]
     7b0:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
     7b2:	2102      	movs	r1, #2
     7b4:	4829      	ldr	r0, [pc, #164]	; (85c <MdmCnct_ConnectInProgressSubStateMachine+0x288>)
     7b6:	47a8      	blx	r5
						gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_ACCESS_POINT;
     7b8:	2302      	movs	r3, #2
     7ba:	7063      	strb	r3, [r4, #1]
						gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     7bc:	2300      	movs	r3, #0
     7be:	70a3      	strb	r3, [r4, #2]
		        		vPortFree(ConnectionResponse.response);
     7c0:	68e0      	ldr	r0, [r4, #12]
     7c2:	4b20      	ldr	r3, [pc, #128]	; (844 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     7c4:	4798      	blx	r3
     7c6:	e797      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     7c8:	4b0e      	ldr	r3, [pc, #56]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     7ca:	789b      	ldrb	r3, [r3, #2]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d047      	beq.n	860 <MdmCnct_ConnectInProgressSubStateMachine+0x28c>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     7d0:	2b01      	cmp	r3, #1
     7d2:	d191      	bne.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     7d4:	f44f 7296 	mov.w	r2, #300	; 0x12c
     7d8:	4917      	ldr	r1, [pc, #92]	; (838 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     7da:	4b18      	ldr	r3, [pc, #96]	; (83c <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     7dc:	6818      	ldr	r0, [r3, #0]
     7de:	4b18      	ldr	r3, [pc, #96]	; (840 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     7e0:	4798      	blx	r3
     7e2:	2801      	cmp	r0, #1
     7e4:	d188      	bne.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
	        		if(ConnectionResponse.atCmd == CMD_AT_KCNXCFG)
     7e6:	4b07      	ldr	r3, [pc, #28]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     7e8:	7a1b      	ldrb	r3, [r3, #8]
     7ea:	2b15      	cmp	r3, #21
     7ec:	d074      	beq.n	8d8 <MdmCnct_ConnectInProgressSubStateMachine+0x304>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     7ee:	4818      	ldr	r0, [pc, #96]	; (850 <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
     7f0:	4b0a      	ldr	r3, [pc, #40]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     7f2:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     7f4:	4b03      	ldr	r3, [pc, #12]	; (804 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     7f6:	2200      	movs	r2, #0
     7f8:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     7fa:	68d8      	ldr	r0, [r3, #12]
     7fc:	4b11      	ldr	r3, [pc, #68]	; (844 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     7fe:	4798      	blx	r3
     800:	e77a      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
     802:	bf00      	nop
     804:	200001ec 	.word	0x200001ec
     808:	20003484 	.word	0x20003484
     80c:	00005009 	.word	0x00005009
     810:	2000348c 	.word	0x2000348c
     814:	00004e29 	.word	0x00004e29
     818:	000073e8 	.word	0x000073e8
     81c:	00001c69 	.word	0x00001c69
     820:	00000571 	.word	0x00000571
     824:	00004991 	.word	0x00004991
     828:	000073b4 	.word	0x000073b4
     82c:	000056cd 	.word	0x000056cd
     830:	00007414 	.word	0x00007414
     834:	00007430 	.word	0x00007430
     838:	200001f4 	.word	0x200001f4
     83c:	20003460 	.word	0x20003460
     840:	00004ca1 	.word	0x00004ca1
     844:	00004669 	.word	0x00004669
     848:	00007454 	.word	0x00007454
     84c:	00001c25 	.word	0x00001c25
     850:	00007474 	.word	0x00007474
     854:	000074a8 	.word	0x000074a8
     858:	000074d4 	.word	0x000074d4
     85c:	00007c0c 	.word	0x00007c0c
    		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     860:	4b95      	ldr	r3, [pc, #596]	; (ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     862:	6818      	ldr	r0, [r3, #0]
     864:	4b95      	ldr	r3, [pc, #596]	; (abc <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     866:	4798      	blx	r3
     868:	2800      	cmp	r0, #0
     86a:	d131      	bne.n	8d0 <MdmCnct_ConnectInProgressSubStateMachine+0x2fc>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     86c:	2100      	movs	r1, #0
     86e:	4b94      	ldr	r3, [pc, #592]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     870:	6818      	ldr	r0, [r3, #0]
     872:	4b94      	ldr	r3, [pc, #592]	; (ac4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
     874:	4798      	blx	r3
     876:	2801      	cmp	r0, #1
     878:	d003      	beq.n	882 <MdmCnct_ConnectInProgressSubStateMachine+0x2ae>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     87a:	4893      	ldr	r0, [pc, #588]	; (ac8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     87c:	4b93      	ldr	r3, [pc, #588]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     87e:	4798      	blx	r3
     880:	e73a      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     882:	2301      	movs	r3, #1
     884:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXCFG;
     888:	2315      	movs	r3, #21
     88a:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     88e:	2300      	movs	r3, #0
     890:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     892:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     896:	4669      	mov	r1, sp
     898:	4887      	ldr	r0, [pc, #540]	; (ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     89a:	6800      	ldr	r0, [r0, #0]
     89c:	4c8c      	ldr	r4, [pc, #560]	; (ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     89e:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     8a0:	2801      	cmp	r0, #1
     8a2:	d007      	beq.n	8b4 <MdmCnct_ConnectInProgressSubStateMachine+0x2e0>
                            DEBUG_PRINT("Failed to sent access point cmd to Tx Task");
     8a4:	488b      	ldr	r0, [pc, #556]	; (ad4 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     8a6:	4b89      	ldr	r3, [pc, #548]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     8a8:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     8aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8ae:	4b8a      	ldr	r3, [pc, #552]	; (ad8 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     8b0:	4798      	blx	r3
     8b2:	e721      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     8b4:	2300      	movs	r3, #0
     8b6:	461a      	mov	r2, r3
     8b8:	4619      	mov	r1, r3
     8ba:	4881      	ldr	r0, [pc, #516]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     8bc:	6800      	ldr	r0, [r0, #0]
     8be:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     8c0:	2201      	movs	r2, #1
     8c2:	4b86      	ldr	r3, [pc, #536]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     8c4:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     8c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8ca:	4b83      	ldr	r3, [pc, #524]	; (ad8 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     8cc:	4798      	blx	r3
     8ce:	e713      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
     8d0:	4883      	ldr	r0, [pc, #524]	; (ae0 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     8d2:	4b7e      	ldr	r3, [pc, #504]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     8d4:	4798      	blx	r3
     8d6:	e70f      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
	        			SerialDebugPrint("Access Point configured\r\n",25);
     8d8:	2119      	movs	r1, #25
     8da:	4882      	ldr	r0, [pc, #520]	; (ae4 <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     8dc:	4d82      	ldr	r5, [pc, #520]	; (ae8 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     8de:	47a8      	blx	r5
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     8e0:	4c7e      	ldr	r4, [pc, #504]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     8e2:	8961      	ldrh	r1, [r4, #10]
     8e4:	68e0      	ldr	r0, [r4, #12]
     8e6:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
     8e8:	2102      	movs	r1, #2
     8ea:	4880      	ldr	r0, [pc, #512]	; (aec <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     8ec:	47a8      	blx	r5
						gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_CONNECT_TIMERS;
     8ee:	2303      	movs	r3, #3
     8f0:	7063      	strb	r3, [r4, #1]
						gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     8f2:	2300      	movs	r3, #0
     8f4:	70a3      	strb	r3, [r4, #2]
		        		vPortFree(ConnectionResponse.response);
     8f6:	68e0      	ldr	r0, [r4, #12]
     8f8:	4b7d      	ldr	r3, [pc, #500]	; (af0 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     8fa:	4798      	blx	r3
     8fc:	e6fc      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     8fe:	4b77      	ldr	r3, [pc, #476]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     900:	789b      	ldrb	r3, [r3, #2]
     902:	b1d3      	cbz	r3, 93a <MdmCnct_ConnectInProgressSubStateMachine+0x366>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     904:	2b01      	cmp	r3, #1
     906:	f47f aef7 	bne.w	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     90a:	f44f 7296 	mov.w	r2, #300	; 0x12c
     90e:	4979      	ldr	r1, [pc, #484]	; (af4 <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
     910:	4b79      	ldr	r3, [pc, #484]	; (af8 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
     912:	6818      	ldr	r0, [r3, #0]
     914:	4b79      	ldr	r3, [pc, #484]	; (afc <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
     916:	4798      	blx	r3
     918:	2801      	cmp	r0, #1
     91a:	f47f aeed 	bne.w	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
	        		if(ConnectionResponse.atCmd == CMD_AT_KCNXTIMER)
     91e:	4b6f      	ldr	r3, [pc, #444]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     920:	7a1b      	ldrb	r3, [r3, #8]
     922:	2b16      	cmp	r3, #22
     924:	d045      	beq.n	9b2 <MdmCnct_ConnectInProgressSubStateMachine+0x3de>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     926:	4876      	ldr	r0, [pc, #472]	; (b00 <MdmCnct_ConnectInProgressSubStateMachine+0x52c>)
     928:	4b68      	ldr	r3, [pc, #416]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     92a:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     92c:	4b6b      	ldr	r3, [pc, #428]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     92e:	2200      	movs	r2, #0
     930:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     932:	68d8      	ldr	r0, [r3, #12]
     934:	4b6e      	ldr	r3, [pc, #440]	; (af0 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     936:	4798      	blx	r3
     938:	e6de      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
    		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     93a:	4b5f      	ldr	r3, [pc, #380]	; (ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     93c:	6818      	ldr	r0, [r3, #0]
     93e:	4b5f      	ldr	r3, [pc, #380]	; (abc <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     940:	4798      	blx	r3
     942:	2800      	cmp	r0, #0
     944:	d131      	bne.n	9aa <MdmCnct_ConnectInProgressSubStateMachine+0x3d6>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     946:	2100      	movs	r1, #0
     948:	4b5d      	ldr	r3, [pc, #372]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     94a:	6818      	ldr	r0, [r3, #0]
     94c:	4b5d      	ldr	r3, [pc, #372]	; (ac4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
     94e:	4798      	blx	r3
     950:	2801      	cmp	r0, #1
     952:	d003      	beq.n	95c <MdmCnct_ConnectInProgressSubStateMachine+0x388>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     954:	485c      	ldr	r0, [pc, #368]	; (ac8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     956:	4b5d      	ldr	r3, [pc, #372]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     958:	4798      	blx	r3
     95a:	e6cd      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     95c:	2301      	movs	r3, #1
     95e:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXTIMER;
     962:	2316      	movs	r3, #22
     964:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     968:	2300      	movs	r3, #0
     96a:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     96c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     970:	4669      	mov	r1, sp
     972:	4851      	ldr	r0, [pc, #324]	; (ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     974:	6800      	ldr	r0, [r0, #0]
     976:	4c56      	ldr	r4, [pc, #344]	; (ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     978:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     97a:	2801      	cmp	r0, #1
     97c:	d007      	beq.n	98e <MdmCnct_ConnectInProgressSubStateMachine+0x3ba>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
     97e:	4861      	ldr	r0, [pc, #388]	; (b04 <MdmCnct_ConnectInProgressSubStateMachine+0x530>)
     980:	4b52      	ldr	r3, [pc, #328]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     982:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     984:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     988:	4b53      	ldr	r3, [pc, #332]	; (ad8 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     98a:	4798      	blx	r3
     98c:	e6b4      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     98e:	2300      	movs	r3, #0
     990:	461a      	mov	r2, r3
     992:	4619      	mov	r1, r3
     994:	484a      	ldr	r0, [pc, #296]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     996:	6800      	ldr	r0, [r0, #0]
     998:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     99a:	2201      	movs	r2, #1
     99c:	4b4f      	ldr	r3, [pc, #316]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     99e:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     9a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     9a4:	4b4c      	ldr	r3, [pc, #304]	; (ad8 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     9a6:	4798      	blx	r3
     9a8:	e6a6      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
     9aa:	484d      	ldr	r0, [pc, #308]	; (ae0 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     9ac:	4b47      	ldr	r3, [pc, #284]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     9ae:	4798      	blx	r3
     9b0:	e6a2      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
	        			SerialDebugPrint("Connection Timers configured\r\n",30);
     9b2:	211e      	movs	r1, #30
     9b4:	4854      	ldr	r0, [pc, #336]	; (b08 <MdmCnct_ConnectInProgressSubStateMachine+0x534>)
     9b6:	4d4c      	ldr	r5, [pc, #304]	; (ae8 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     9b8:	47a8      	blx	r5
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     9ba:	4c48      	ldr	r4, [pc, #288]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     9bc:	8961      	ldrh	r1, [r4, #10]
     9be:	68e0      	ldr	r0, [r4, #12]
     9c0:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
     9c2:	2102      	movs	r1, #2
     9c4:	4849      	ldr	r0, [pc, #292]	; (aec <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     9c6:	47a8      	blx	r5
						gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_SERVER_ADDRESS;
     9c8:	2304      	movs	r3, #4
     9ca:	7063      	strb	r3, [r4, #1]
						gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     9cc:	2300      	movs	r3, #0
     9ce:	70a3      	strb	r3, [r4, #2]
		        		vPortFree(ConnectionResponse.response);
     9d0:	68e0      	ldr	r0, [r4, #12]
     9d2:	4b47      	ldr	r3, [pc, #284]	; (af0 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     9d4:	4798      	blx	r3
     9d6:	e68f      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     9d8:	4b40      	ldr	r3, [pc, #256]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     9da:	789b      	ldrb	r3, [r3, #2]
     9dc:	b1d3      	cbz	r3, a14 <MdmCnct_ConnectInProgressSubStateMachine+0x440>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     9de:	2b01      	cmp	r3, #1
     9e0:	f47f ae8a 	bne.w	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     9e4:	f44f 7296 	mov.w	r2, #300	; 0x12c
     9e8:	4942      	ldr	r1, [pc, #264]	; (af4 <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
     9ea:	4b43      	ldr	r3, [pc, #268]	; (af8 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
     9ec:	6818      	ldr	r0, [r3, #0]
     9ee:	4b43      	ldr	r3, [pc, #268]	; (afc <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
     9f0:	4798      	blx	r3
     9f2:	2801      	cmp	r0, #1
     9f4:	f47f ae80 	bne.w	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
	        		if(ConnectionResponse.atCmd == CMD_AT_KHTTP_CFG)
     9f8:	4b38      	ldr	r3, [pc, #224]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     9fa:	7a1b      	ldrb	r3, [r3, #8]
     9fc:	2b09      	cmp	r3, #9
     9fe:	d045      	beq.n	a8c <MdmCnct_ConnectInProgressSubStateMachine+0x4b8>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     a00:	483f      	ldr	r0, [pc, #252]	; (b00 <MdmCnct_ConnectInProgressSubStateMachine+0x52c>)
     a02:	4b32      	ldr	r3, [pc, #200]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     a04:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     a06:	4b35      	ldr	r3, [pc, #212]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     a08:	2200      	movs	r2, #0
     a0a:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     a0c:	68d8      	ldr	r0, [r3, #12]
     a0e:	4b38      	ldr	r3, [pc, #224]	; (af0 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     a10:	4798      	blx	r3
     a12:	e671      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
    		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     a14:	4b28      	ldr	r3, [pc, #160]	; (ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     a16:	6818      	ldr	r0, [r3, #0]
     a18:	4b28      	ldr	r3, [pc, #160]	; (abc <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     a1a:	4798      	blx	r3
     a1c:	2800      	cmp	r0, #0
     a1e:	d131      	bne.n	a84 <MdmCnct_ConnectInProgressSubStateMachine+0x4b0>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     a20:	2100      	movs	r1, #0
     a22:	4b27      	ldr	r3, [pc, #156]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     a24:	6818      	ldr	r0, [r3, #0]
     a26:	4b27      	ldr	r3, [pc, #156]	; (ac4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
     a28:	4798      	blx	r3
     a2a:	2801      	cmp	r0, #1
     a2c:	d003      	beq.n	a36 <MdmCnct_ConnectInProgressSubStateMachine+0x462>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     a2e:	4826      	ldr	r0, [pc, #152]	; (ac8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     a30:	4b26      	ldr	r3, [pc, #152]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     a32:	4798      	blx	r3
     a34:	e660      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     a36:	2301      	movs	r3, #1
     a38:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_CFG;
     a3c:	2309      	movs	r3, #9
     a3e:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     a42:	2300      	movs	r3, #0
     a44:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     a46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a4a:	4669      	mov	r1, sp
     a4c:	481a      	ldr	r0, [pc, #104]	; (ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     a4e:	6800      	ldr	r0, [r0, #0]
     a50:	4c1f      	ldr	r4, [pc, #124]	; (ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     a52:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     a54:	2801      	cmp	r0, #1
     a56:	d007      	beq.n	a68 <MdmCnct_ConnectInProgressSubStateMachine+0x494>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
     a58:	482a      	ldr	r0, [pc, #168]	; (b04 <MdmCnct_ConnectInProgressSubStateMachine+0x530>)
     a5a:	4b1c      	ldr	r3, [pc, #112]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     a5c:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a62:	4b1d      	ldr	r3, [pc, #116]	; (ad8 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     a64:	4798      	blx	r3
     a66:	e647      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     a68:	2300      	movs	r3, #0
     a6a:	461a      	mov	r2, r3
     a6c:	4619      	mov	r1, r3
     a6e:	4814      	ldr	r0, [pc, #80]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     a70:	6800      	ldr	r0, [r0, #0]
     a72:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     a74:	2201      	movs	r2, #1
     a76:	4b19      	ldr	r3, [pc, #100]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     a78:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     a7a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a7e:	4b16      	ldr	r3, [pc, #88]	; (ad8 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     a80:	4798      	blx	r3
     a82:	e639      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
     a84:	4816      	ldr	r0, [pc, #88]	; (ae0 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     a86:	4b11      	ldr	r3, [pc, #68]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     a88:	4798      	blx	r3
     a8a:	e635      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
	        			SerialDebugPrint("Cloud Server configured\r\n",25);
     a8c:	2119      	movs	r1, #25
     a8e:	481f      	ldr	r0, [pc, #124]	; (b0c <MdmCnct_ConnectInProgressSubStateMachine+0x538>)
     a90:	4d15      	ldr	r5, [pc, #84]	; (ae8 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     a92:	47a8      	blx	r5
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     a94:	4c11      	ldr	r4, [pc, #68]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     a96:	8961      	ldrh	r1, [r4, #10]
     a98:	68e0      	ldr	r0, [r4, #12]
     a9a:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
     a9c:	2102      	movs	r1, #2
     a9e:	4813      	ldr	r0, [pc, #76]	; (aec <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     aa0:	47a8      	blx	r5
						MdmCnct_ExtractSessionIdFromConfigResponse(ConnectionResponse.response);
     aa2:	68e0      	ldr	r0, [r4, #12]
	currentSessionId = cfgResponse[SESSION_ID_POSITION];
     aa4:	7ac3      	ldrb	r3, [r0, #11]
     aa6:	7423      	strb	r3, [r4, #16]
						gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_HTTP_HEADER;
     aa8:	2305      	movs	r3, #5
     aaa:	7063      	strb	r3, [r4, #1]
						gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     aac:	2300      	movs	r3, #0
     aae:	70a3      	strb	r3, [r4, #2]
		        		vPortFree(ConnectionResponse.response);
     ab0:	4b0f      	ldr	r3, [pc, #60]	; (af0 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     ab2:	4798      	blx	r3
     ab4:	e620      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
     ab6:	bf00      	nop
     ab8:	20003484 	.word	0x20003484
     abc:	00005009 	.word	0x00005009
     ac0:	2000348c 	.word	0x2000348c
     ac4:	00004e29 	.word	0x00004e29
     ac8:	000073e8 	.word	0x000073e8
     acc:	00001c69 	.word	0x00001c69
     ad0:	00004991 	.word	0x00004991
     ad4:	000074f0 	.word	0x000074f0
     ad8:	000056cd 	.word	0x000056cd
     adc:	200001ec 	.word	0x200001ec
     ae0:	00007414 	.word	0x00007414
     ae4:	0000751c 	.word	0x0000751c
     ae8:	00001c25 	.word	0x00001c25
     aec:	00007c0c 	.word	0x00007c0c
     af0:	00004669 	.word	0x00004669
     af4:	200001f4 	.word	0x200001f4
     af8:	20003460 	.word	0x20003460
     afc:	00004ca1 	.word	0x00004ca1
     b00:	00007474 	.word	0x00007474
     b04:	00007538 	.word	0x00007538
     b08:	00007568 	.word	0x00007568
     b0c:	00007588 	.word	0x00007588
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     b10:	4b43      	ldr	r3, [pc, #268]	; (c20 <MdmCnct_ConnectInProgressSubStateMachine+0x64c>)
     b12:	789b      	ldrb	r3, [r3, #2]
     b14:	b1d3      	cbz	r3, b4c <MdmCnct_ConnectInProgressSubStateMachine+0x578>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     b16:	2b01      	cmp	r3, #1
     b18:	f47f adee 	bne.w	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     b1c:	f44f 7296 	mov.w	r2, #300	; 0x12c
     b20:	4940      	ldr	r1, [pc, #256]	; (c24 <MdmCnct_ConnectInProgressSubStateMachine+0x650>)
     b22:	4b41      	ldr	r3, [pc, #260]	; (c28 <MdmCnct_ConnectInProgressSubStateMachine+0x654>)
     b24:	6818      	ldr	r0, [r3, #0]
     b26:	4b41      	ldr	r3, [pc, #260]	; (c2c <MdmCnct_ConnectInProgressSubStateMachine+0x658>)
     b28:	4798      	blx	r3
     b2a:	2801      	cmp	r0, #1
     b2c:	f47f ade4 	bne.w	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
	        		if(ConnectionResponse.atCmd == CMD_AT_KHTTP_HEADER)
     b30:	4b3b      	ldr	r3, [pc, #236]	; (c20 <MdmCnct_ConnectInProgressSubStateMachine+0x64c>)
     b32:	7a1b      	ldrb	r3, [r3, #8]
     b34:	2b17      	cmp	r3, #23
     b36:	d048      	beq.n	bca <MdmCnct_ConnectInProgressSubStateMachine+0x5f6>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     b38:	483d      	ldr	r0, [pc, #244]	; (c30 <MdmCnct_ConnectInProgressSubStateMachine+0x65c>)
     b3a:	4b3e      	ldr	r3, [pc, #248]	; (c34 <MdmCnct_ConnectInProgressSubStateMachine+0x660>)
     b3c:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     b3e:	4b38      	ldr	r3, [pc, #224]	; (c20 <MdmCnct_ConnectInProgressSubStateMachine+0x64c>)
     b40:	2200      	movs	r2, #0
     b42:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     b44:	68d8      	ldr	r0, [r3, #12]
     b46:	4b3c      	ldr	r3, [pc, #240]	; (c38 <MdmCnct_ConnectInProgressSubStateMachine+0x664>)
     b48:	4798      	blx	r3
}
     b4a:	e5d5      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
        		buildHttpHeaderWithActiveSessionID(&currentSessionId);
     b4c:	483b      	ldr	r0, [pc, #236]	; (c3c <MdmCnct_ConnectInProgressSubStateMachine+0x668>)
     b4e:	4b3c      	ldr	r3, [pc, #240]	; (c40 <MdmCnct_ConnectInProgressSubStateMachine+0x66c>)
     b50:	4798      	blx	r3
    		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     b52:	4b3c      	ldr	r3, [pc, #240]	; (c44 <MdmCnct_ConnectInProgressSubStateMachine+0x670>)
     b54:	6818      	ldr	r0, [r3, #0]
     b56:	4b3c      	ldr	r3, [pc, #240]	; (c48 <MdmCnct_ConnectInProgressSubStateMachine+0x674>)
     b58:	4798      	blx	r3
     b5a:	2800      	cmp	r0, #0
     b5c:	d131      	bne.n	bc2 <MdmCnct_ConnectInProgressSubStateMachine+0x5ee>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     b5e:	2100      	movs	r1, #0
     b60:	4b3a      	ldr	r3, [pc, #232]	; (c4c <MdmCnct_ConnectInProgressSubStateMachine+0x678>)
     b62:	6818      	ldr	r0, [r3, #0]
     b64:	4b3a      	ldr	r3, [pc, #232]	; (c50 <MdmCnct_ConnectInProgressSubStateMachine+0x67c>)
     b66:	4798      	blx	r3
     b68:	2801      	cmp	r0, #1
     b6a:	d003      	beq.n	b74 <MdmCnct_ConnectInProgressSubStateMachine+0x5a0>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     b6c:	4839      	ldr	r0, [pc, #228]	; (c54 <MdmCnct_ConnectInProgressSubStateMachine+0x680>)
     b6e:	4b31      	ldr	r3, [pc, #196]	; (c34 <MdmCnct_ConnectInProgressSubStateMachine+0x660>)
     b70:	4798      	blx	r3
     b72:	e5c1      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     b74:	2301      	movs	r3, #1
     b76:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_HEADER;
     b7a:	2317      	movs	r3, #23
     b7c:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     b80:	2300      	movs	r3, #0
     b82:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     b84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     b88:	4669      	mov	r1, sp
     b8a:	482e      	ldr	r0, [pc, #184]	; (c44 <MdmCnct_ConnectInProgressSubStateMachine+0x670>)
     b8c:	6800      	ldr	r0, [r0, #0]
     b8e:	4c32      	ldr	r4, [pc, #200]	; (c58 <MdmCnct_ConnectInProgressSubStateMachine+0x684>)
     b90:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     b92:	2801      	cmp	r0, #1
     b94:	d007      	beq.n	ba6 <MdmCnct_ConnectInProgressSubStateMachine+0x5d2>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
     b96:	4831      	ldr	r0, [pc, #196]	; (c5c <MdmCnct_ConnectInProgressSubStateMachine+0x688>)
     b98:	4b26      	ldr	r3, [pc, #152]	; (c34 <MdmCnct_ConnectInProgressSubStateMachine+0x660>)
     b9a:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     b9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     ba0:	4b2f      	ldr	r3, [pc, #188]	; (c60 <MdmCnct_ConnectInProgressSubStateMachine+0x68c>)
     ba2:	4798      	blx	r3
     ba4:	e5a8      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     ba6:	2300      	movs	r3, #0
     ba8:	461a      	mov	r2, r3
     baa:	4619      	mov	r1, r3
     bac:	4827      	ldr	r0, [pc, #156]	; (c4c <MdmCnct_ConnectInProgressSubStateMachine+0x678>)
     bae:	6800      	ldr	r0, [r0, #0]
     bb0:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     bb2:	2201      	movs	r2, #1
     bb4:	4b1a      	ldr	r3, [pc, #104]	; (c20 <MdmCnct_ConnectInProgressSubStateMachine+0x64c>)
     bb6:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     bb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     bbc:	4b28      	ldr	r3, [pc, #160]	; (c60 <MdmCnct_ConnectInProgressSubStateMachine+0x68c>)
     bbe:	4798      	blx	r3
     bc0:	e59a      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
     bc2:	4828      	ldr	r0, [pc, #160]	; (c64 <MdmCnct_ConnectInProgressSubStateMachine+0x690>)
     bc4:	4b1b      	ldr	r3, [pc, #108]	; (c34 <MdmCnct_ConnectInProgressSubStateMachine+0x660>)
     bc6:	4798      	blx	r3
     bc8:	e596      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     bca:	4c15      	ldr	r4, [pc, #84]	; (c20 <MdmCnct_ConnectInProgressSubStateMachine+0x64c>)
     bcc:	8961      	ldrh	r1, [r4, #10]
     bce:	68e0      	ldr	r0, [r4, #12]
     bd0:	4d25      	ldr	r5, [pc, #148]	; (c68 <MdmCnct_ConnectInProgressSubStateMachine+0x694>)
     bd2:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
     bd4:	2102      	movs	r1, #2
     bd6:	4825      	ldr	r0, [pc, #148]	; (c6c <MdmCnct_ConnectInProgressSubStateMachine+0x698>)
     bd8:	47a8      	blx	r5
    if(0==memcmp(response,"CONNECT",7))
     bda:	2207      	movs	r2, #7
     bdc:	4924      	ldr	r1, [pc, #144]	; (c70 <MdmCnct_ConnectInProgressSubStateMachine+0x69c>)
     bde:	68e0      	ldr	r0, [r4, #12]
     be0:	4b24      	ldr	r3, [pc, #144]	; (c74 <MdmCnct_ConnectInProgressSubStateMachine+0x6a0>)
     be2:	4798      	blx	r3
     be4:	b138      	cbz	r0, bf6 <MdmCnct_ConnectInProgressSubStateMachine+0x622>
							gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     be6:	2200      	movs	r2, #0
     be8:	4b0d      	ldr	r3, [pc, #52]	; (c20 <MdmCnct_ConnectInProgressSubStateMachine+0x64c>)
     bea:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     bec:	4b0c      	ldr	r3, [pc, #48]	; (c20 <MdmCnct_ConnectInProgressSubStateMachine+0x64c>)
     bee:	68d8      	ldr	r0, [r3, #12]
     bf0:	4b11      	ldr	r3, [pc, #68]	; (c38 <MdmCnct_ConnectInProgressSubStateMachine+0x664>)
     bf2:	4798      	blx	r3
     bf4:	e580      	b.n	6f8 <MdmCnct_ConnectInProgressSubStateMachine+0x124>
    	mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
     bf6:	2110      	movs	r1, #16
     bf8:	481f      	ldr	r0, [pc, #124]	; (c78 <MdmCnct_ConnectInProgressSubStateMachine+0x6a4>)
     bfa:	4b20      	ldr	r3, [pc, #128]	; (c7c <MdmCnct_ConnectInProgressSubStateMachine+0x6a8>)
     bfc:	4798      	blx	r3
    	mdmCtrlr_FlushRxBuffer();
     bfe:	4b20      	ldr	r3, [pc, #128]	; (c80 <MdmCnct_ConnectInProgressSubStateMachine+0x6ac>)
     c00:	4798      	blx	r3
							gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     c02:	2200      	movs	r2, #0
     c04:	7062      	strb	r2, [r4, #1]
							gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     c06:	70a2      	strb	r2, [r4, #2]
							gHttpConnectionState = MDM_HTTP_CONNECTED;
     c08:	2102      	movs	r1, #2
     c0a:	7021      	strb	r1, [r4, #0]
							gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
     c0c:	70e2      	strb	r2, [r4, #3]
							SerialDebugPrint("Successfully Established the connection with server\r\n",53);
     c0e:	2135      	movs	r1, #53	; 0x35
     c10:	481c      	ldr	r0, [pc, #112]	; (c84 <MdmCnct_ConnectInProgressSubStateMachine+0x6b0>)
     c12:	47a8      	blx	r5
							vTaskDelay(PacketTransmitDelayMs);
     c14:	f240 50dc 	movw	r0, #1500	; 0x5dc
     c18:	4b11      	ldr	r3, [pc, #68]	; (c60 <MdmCnct_ConnectInProgressSubStateMachine+0x68c>)
     c1a:	4798      	blx	r3
     c1c:	e7e6      	b.n	bec <MdmCnct_ConnectInProgressSubStateMachine+0x618>
     c1e:	bf00      	nop
     c20:	200001ec 	.word	0x200001ec
     c24:	200001f4 	.word	0x200001f4
     c28:	20003460 	.word	0x20003460
     c2c:	00004ca1 	.word	0x00004ca1
     c30:	00007474 	.word	0x00007474
     c34:	00001c69 	.word	0x00001c69
     c38:	00004669 	.word	0x00004669
     c3c:	200001fc 	.word	0x200001fc
     c40:	00000381 	.word	0x00000381
     c44:	20003484 	.word	0x20003484
     c48:	00005009 	.word	0x00005009
     c4c:	2000348c 	.word	0x2000348c
     c50:	00004e29 	.word	0x00004e29
     c54:	000073e8 	.word	0x000073e8
     c58:	00004991 	.word	0x00004991
     c5c:	00007538 	.word	0x00007538
     c60:	000056cd 	.word	0x000056cd
     c64:	00007414 	.word	0x00007414
     c68:	00001c25 	.word	0x00001c25
     c6c:	00007c0c 	.word	0x00007c0c
     c70:	000075a4 	.word	0x000075a4
     c74:	00006209 	.word	0x00006209
     c78:	00007294 	.word	0x00007294
     c7c:	000013d9 	.word	0x000013d9
     c80:	00001455 	.word	0x00001455
     c84:	000075ac 	.word	0x000075ac

00000c88 <MdmConnect_HttpConnectionSchedule>:
{
     c88:	b530      	push	{r4, r5, lr}
     c8a:	b083      	sub	sp, #12
	switch (gHttpConnectionState)
     c8c:	4b9a      	ldr	r3, [pc, #616]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     c8e:	781b      	ldrb	r3, [r3, #0]
     c90:	2b01      	cmp	r3, #1
     c92:	d013      	beq.n	cbc <MdmConnect_HttpConnectionSchedule+0x34>
     c94:	b11b      	cbz	r3, c9e <MdmConnect_HttpConnectionSchedule+0x16>
     c96:	2b02      	cmp	r3, #2
     c98:	d013      	beq.n	cc2 <MdmConnect_HttpConnectionSchedule+0x3a>
}
     c9a:	b003      	add	sp, #12
     c9c:	bd30      	pop	{r4, r5, pc}
			if(isModemDiagDataBaseUpdated() != false)
     c9e:	4b97      	ldr	r3, [pc, #604]	; (efc <MdmConnect_HttpConnectionSchedule+0x274>)
     ca0:	4798      	blx	r3
     ca2:	2800      	cmp	r0, #0
     ca4:	d0f9      	beq.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
	        	gHttpConnectionState = MDM_HTTP_CONNECTION_IN_PROGRESS;
     ca6:	4b94      	ldr	r3, [pc, #592]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     ca8:	2201      	movs	r2, #1
     caa:	701a      	strb	r2, [r3, #0]
	        	gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     cac:	2200      	movs	r2, #0
     cae:	705a      	strb	r2, [r3, #1]
	        	gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     cb0:	709a      	strb	r2, [r3, #2]
	        	SerialDebugPrint("Closing Active Connections\r\n",28);
     cb2:	211c      	movs	r1, #28
     cb4:	4892      	ldr	r0, [pc, #584]	; (f00 <MdmConnect_HttpConnectionSchedule+0x278>)
     cb6:	4b93      	ldr	r3, [pc, #588]	; (f04 <MdmConnect_HttpConnectionSchedule+0x27c>)
     cb8:	4798      	blx	r3
     cba:	e7ee      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
        	MdmCnct_ConnectInProgressSubStateMachine();
     cbc:	4b92      	ldr	r3, [pc, #584]	; (f08 <MdmConnect_HttpConnectionSchedule+0x280>)
     cbe:	4798      	blx	r3
        break;
     cc0:	e7eb      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
	switch(gHttpConnectedSubState)
     cc2:	4b8d      	ldr	r3, [pc, #564]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     cc4:	78db      	ldrb	r3, [r3, #3]
     cc6:	2b06      	cmp	r3, #6
     cc8:	d8e7      	bhi.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
     cca:	a201      	add	r2, pc, #4	; (adr r2, cd0 <MdmConnect_HttpConnectionSchedule+0x48>)
     ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     cd0:	00000ced 	.word	0x00000ced
     cd4:	00000c9b 	.word	0x00000c9b
     cd8:	00000cf9 	.word	0x00000cf9
     cdc:	00000d0d 	.word	0x00000d0d
     ce0:	00000d85 	.word	0x00000d85
     ce4:	00000e1f 	.word	0x00000e1f
     ce8:	00000e47 	.word	0x00000e47
			mdmCtrlr_FlushRxBuffer();
     cec:	4b87      	ldr	r3, [pc, #540]	; (f0c <MdmConnect_HttpConnectionSchedule+0x284>)
     cee:	4798      	blx	r3
			gHttpConnectedSubState = CONNECTED_BUILD_DATA_PACKET_TO_SERVER;
     cf0:	2202      	movs	r2, #2
     cf2:	4b81      	ldr	r3, [pc, #516]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     cf4:	70da      	strb	r2, [r3, #3]
     cf6:	e7d0      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
			buildDataPacketsToServer();
     cf8:	4b85      	ldr	r3, [pc, #532]	; (f10 <MdmConnect_HttpConnectionSchedule+0x288>)
     cfa:	4798      	blx	r3
			gHttpConnectedSubState = CONNECTED_SEND_DATA_PACKETS_TO_SERVER;
     cfc:	2203      	movs	r2, #3
     cfe:	4b7e      	ldr	r3, [pc, #504]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     d00:	70da      	strb	r2, [r3, #3]
			vTaskDelay(BuildPacketDelayMs);
     d02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     d06:	4b83      	ldr	r3, [pc, #524]	; (f14 <MdmConnect_HttpConnectionSchedule+0x28c>)
     d08:	4798      	blx	r3
     d0a:	e7c6      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     d0c:	4b82      	ldr	r3, [pc, #520]	; (f18 <MdmConnect_HttpConnectionSchedule+0x290>)
     d0e:	6818      	ldr	r0, [r3, #0]
     d10:	4b82      	ldr	r3, [pc, #520]	; (f1c <MdmConnect_HttpConnectionSchedule+0x294>)
     d12:	4798      	blx	r3
     d14:	2800      	cmp	r0, #0
     d16:	d131      	bne.n	d7c <MdmConnect_HttpConnectionSchedule+0xf4>
		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     d18:	2100      	movs	r1, #0
     d1a:	4b81      	ldr	r3, [pc, #516]	; (f20 <MdmConnect_HttpConnectionSchedule+0x298>)
     d1c:	6818      	ldr	r0, [r3, #0]
     d1e:	4b81      	ldr	r3, [pc, #516]	; (f24 <MdmConnect_HttpConnectionSchedule+0x29c>)
     d20:	4798      	blx	r3
     d22:	2801      	cmp	r0, #1
     d24:	d003      	beq.n	d2e <MdmConnect_HttpConnectionSchedule+0xa6>
		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     d26:	4880      	ldr	r0, [pc, #512]	; (f28 <MdmConnect_HttpConnectionSchedule+0x2a0>)
     d28:	4b80      	ldr	r3, [pc, #512]	; (f2c <MdmConnect_HttpConnectionSchedule+0x2a4>)
     d2a:	4798      	blx	r3
     d2c:	e7b5      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
                    TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     d2e:	2301      	movs	r3, #1
     d30:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KHTTP_GET;
     d34:	2318      	movs	r3, #24
     d36:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     d3a:	2300      	movs	r3, #0
     d3c:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     d3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     d42:	4669      	mov	r1, sp
     d44:	4874      	ldr	r0, [pc, #464]	; (f18 <MdmConnect_HttpConnectionSchedule+0x290>)
     d46:	6800      	ldr	r0, [r0, #0]
     d48:	4c79      	ldr	r4, [pc, #484]	; (f30 <MdmConnect_HttpConnectionSchedule+0x2a8>)
     d4a:	47a0      	blx	r4
                    if(TxQueuePushStatus == pdPASS)
     d4c:	2801      	cmp	r0, #1
     d4e:	d007      	beq.n	d60 <MdmConnect_HttpConnectionSchedule+0xd8>
                        DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
     d50:	4878      	ldr	r0, [pc, #480]	; (f34 <MdmConnect_HttpConnectionSchedule+0x2ac>)
     d52:	4b76      	ldr	r3, [pc, #472]	; (f2c <MdmConnect_HttpConnectionSchedule+0x2a4>)
     d54:	4798      	blx	r3
                        vTaskDelay(TransmitDelayMs);
     d56:	f640 10c4 	movw	r0, #2500	; 0x9c4
     d5a:	4b6e      	ldr	r3, [pc, #440]	; (f14 <MdmConnect_HttpConnectionSchedule+0x28c>)
     d5c:	4798      	blx	r3
     d5e:	e79c      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     d60:	2300      	movs	r3, #0
     d62:	461a      	mov	r2, r3
     d64:	4619      	mov	r1, r3
     d66:	486e      	ldr	r0, [pc, #440]	; (f20 <MdmConnect_HttpConnectionSchedule+0x298>)
     d68:	6800      	ldr	r0, [r0, #0]
     d6a:	47a0      	blx	r4
                        gHttpConnectedSubState = CONNECTED_RECEIVE_RESPONSE_FROM_SERVER;
     d6c:	2204      	movs	r2, #4
     d6e:	4b62      	ldr	r3, [pc, #392]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     d70:	70da      	strb	r2, [r3, #3]
                        vTaskDelay(TransmitDelayMs);
     d72:	f640 10c4 	movw	r0, #2500	; 0x9c4
     d76:	4b67      	ldr	r3, [pc, #412]	; (f14 <MdmConnect_HttpConnectionSchedule+0x28c>)
     d78:	4798      	blx	r3
     d7a:	e78e      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
		    	DEBUG_PRINT("Transmit Queue is not empty");
     d7c:	486e      	ldr	r0, [pc, #440]	; (f38 <MdmConnect_HttpConnectionSchedule+0x2b0>)
     d7e:	4b6b      	ldr	r3, [pc, #428]	; (f2c <MdmConnect_HttpConnectionSchedule+0x2a4>)
     d80:	4798      	blx	r3
     d82:	e78a      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
    		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     d84:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
     d88:	496c      	ldr	r1, [pc, #432]	; (f3c <MdmConnect_HttpConnectionSchedule+0x2b4>)
     d8a:	4b6d      	ldr	r3, [pc, #436]	; (f40 <MdmConnect_HttpConnectionSchedule+0x2b8>)
     d8c:	6818      	ldr	r0, [r3, #0]
     d8e:	4b6d      	ldr	r3, [pc, #436]	; (f44 <MdmConnect_HttpConnectionSchedule+0x2bc>)
     d90:	4798      	blx	r3
     d92:	2801      	cmp	r0, #1
     d94:	d13b      	bne.n	e0e <MdmConnect_HttpConnectionSchedule+0x186>
        		if(ConnectionResponse.atCmd == CMD_AT_KHTTP_GET)
     d96:	4b58      	ldr	r3, [pc, #352]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     d98:	7a1b      	ldrb	r3, [r3, #8]
     d9a:	2b18      	cmp	r3, #24
     d9c:	d129      	bne.n	df2 <MdmConnect_HttpConnectionSchedule+0x16a>
					if(ConnectionResponse.length > 23)
     d9e:	4b56      	ldr	r3, [pc, #344]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     da0:	895c      	ldrh	r4, [r3, #10]
     da2:	2c17      	cmp	r4, #23
     da4:	d919      	bls.n	dda <MdmConnect_HttpConnectionSchedule+0x152>
	        			if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
     da6:	68dd      	ldr	r5, [r3, #12]
    if(0==memcmp(response,"CONNECT\r\nHTTP/1.1 200 OK",24))
     da8:	2218      	movs	r2, #24
     daa:	4967      	ldr	r1, [pc, #412]	; (f48 <MdmConnect_HttpConnectionSchedule+0x2c0>)
     dac:	4628      	mov	r0, r5
     dae:	4b67      	ldr	r3, [pc, #412]	; (f4c <MdmConnect_HttpConnectionSchedule+0x2c4>)
     db0:	4798      	blx	r3
	        			if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
     db2:	b118      	cbz	r0, dbc <MdmConnect_HttpConnectionSchedule+0x134>
		        			gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
     db4:	2205      	movs	r2, #5
     db6:	4b50      	ldr	r3, [pc, #320]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     db8:	70da      	strb	r2, [r3, #3]
     dba:	e011      	b.n	de0 <MdmConnect_HttpConnectionSchedule+0x158>
		        			SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     dbc:	4621      	mov	r1, r4
     dbe:	4628      	mov	r0, r5
     dc0:	4c50      	ldr	r4, [pc, #320]	; (f04 <MdmConnect_HttpConnectionSchedule+0x27c>)
     dc2:	47a0      	blx	r4
		        			SerialDebugPrint("\r\n",2);
     dc4:	4d62      	ldr	r5, [pc, #392]	; (f50 <MdmConnect_HttpConnectionSchedule+0x2c8>)
     dc6:	2102      	movs	r1, #2
     dc8:	4628      	mov	r0, r5
     dca:	47a0      	blx	r4
		        			SerialDebugPrint("\r\n",2);
     dcc:	2102      	movs	r1, #2
     dce:	4628      	mov	r0, r5
     dd0:	47a0      	blx	r4
		        			gHttpConnectedSubState = CONNECTED_SEND_DATA_PACKETS_TO_SERVER;
     dd2:	2203      	movs	r2, #3
     dd4:	4b48      	ldr	r3, [pc, #288]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     dd6:	70da      	strb	r2, [r3, #3]
     dd8:	e002      	b.n	de0 <MdmConnect_HttpConnectionSchedule+0x158>
						gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
     dda:	2205      	movs	r2, #5
     ddc:	4b46      	ldr	r3, [pc, #280]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     dde:	70da      	strb	r2, [r3, #3]
	        		vPortFree(ConnectionResponse.response);
     de0:	4b45      	ldr	r3, [pc, #276]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     de2:	68d8      	ldr	r0, [r3, #12]
     de4:	4b5b      	ldr	r3, [pc, #364]	; (f54 <MdmConnect_HttpConnectionSchedule+0x2cc>)
     de6:	4798      	blx	r3
	        		vTaskDelay(reTransmissionDelayMs);
     de8:	f641 3058 	movw	r0, #7000	; 0x1b58
     dec:	4b49      	ldr	r3, [pc, #292]	; (f14 <MdmConnect_HttpConnectionSchedule+0x28c>)
     dee:	4798      	blx	r3
     df0:	e753      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
	        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     df2:	4859      	ldr	r0, [pc, #356]	; (f58 <MdmConnect_HttpConnectionSchedule+0x2d0>)
     df4:	4b4d      	ldr	r3, [pc, #308]	; (f2c <MdmConnect_HttpConnectionSchedule+0x2a4>)
     df6:	4798      	blx	r3
	        		gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
     df8:	4b3f      	ldr	r3, [pc, #252]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     dfa:	2205      	movs	r2, #5
     dfc:	70da      	strb	r2, [r3, #3]
	        		vPortFree(ConnectionResponse.response);
     dfe:	68d8      	ldr	r0, [r3, #12]
     e00:	4b54      	ldr	r3, [pc, #336]	; (f54 <MdmConnect_HttpConnectionSchedule+0x2cc>)
     e02:	4798      	blx	r3
	        		vTaskDelay(reTransmissionDelayMs);
     e04:	f641 3058 	movw	r0, #7000	; 0x1b58
     e08:	4b42      	ldr	r3, [pc, #264]	; (f14 <MdmConnect_HttpConnectionSchedule+0x28c>)
     e0a:	4798      	blx	r3
     e0c:	e745      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
    			gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
     e0e:	2205      	movs	r2, #5
     e10:	4b39      	ldr	r3, [pc, #228]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     e12:	70da      	strb	r2, [r3, #3]
    			vTaskDelay(reTransmissionDelayMs);
     e14:	f641 3058 	movw	r0, #7000	; 0x1b58
     e18:	4b3e      	ldr	r3, [pc, #248]	; (f14 <MdmConnect_HttpConnectionSchedule+0x28c>)
     e1a:	4798      	blx	r3
     e1c:	e73d      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
			gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
     e1e:	4b36      	ldr	r3, [pc, #216]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     e20:	2206      	movs	r2, #6
     e22:	70da      	strb	r2, [r3, #3]
			gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
     e24:	2200      	movs	r2, #0
     e26:	711a      	strb	r2, [r3, #4]
			sessionIdCount = 5;
     e28:	2105      	movs	r1, #5
     e2a:	7159      	strb	r1, [r3, #5]
			gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     e2c:	709a      	strb	r2, [r3, #2]
			SerialDebugPrint("\r\nPerforming the Error Recovery\r\n",31);
     e2e:	211f      	movs	r1, #31
     e30:	484a      	ldr	r0, [pc, #296]	; (f5c <MdmConnect_HttpConnectionSchedule+0x2d4>)
     e32:	4c34      	ldr	r4, [pc, #208]	; (f04 <MdmConnect_HttpConnectionSchedule+0x27c>)
     e34:	47a0      	blx	r4
			SerialDebugPrint("Closing the active connection.\r\n",33);
     e36:	2121      	movs	r1, #33	; 0x21
     e38:	4849      	ldr	r0, [pc, #292]	; (f60 <MdmConnect_HttpConnectionSchedule+0x2d8>)
     e3a:	47a0      	blx	r4
			vTaskDelay(QueuePushDelayMs);
     e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     e40:	4b34      	ldr	r3, [pc, #208]	; (f14 <MdmConnect_HttpConnectionSchedule+0x28c>)
     e42:	4798      	blx	r3
     e44:	e729      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
	switch(gErrorRecoveryState)
     e46:	4b2c      	ldr	r3, [pc, #176]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     e48:	791b      	ldrb	r3, [r3, #4]
     e4a:	2b01      	cmp	r3, #1
     e4c:	f000 80e9 	beq.w	1022 <MdmConnect_HttpConnectionSchedule+0x39a>
     e50:	b1db      	cbz	r3, e8a <MdmConnect_HttpConnectionSchedule+0x202>
     e52:	2b02      	cmp	r3, #2
     e54:	f47f af21 	bne.w	c9a <MdmConnect_HttpConnectionSchedule+0x12>
			if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     e58:	4b27      	ldr	r3, [pc, #156]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     e5a:	789b      	ldrb	r3, [r3, #2]
     e5c:	2b00      	cmp	r3, #0
     e5e:	f000 8157 	beq.w	1110 <MdmConnect_HttpConnectionSchedule+0x488>
			else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     e62:	2b01      	cmp	r3, #1
     e64:	f47f af19 	bne.w	c9a <MdmConnect_HttpConnectionSchedule+0x12>
				if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     e68:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     e6c:	4933      	ldr	r1, [pc, #204]	; (f3c <MdmConnect_HttpConnectionSchedule+0x2b4>)
     e6e:	4b34      	ldr	r3, [pc, #208]	; (f40 <MdmConnect_HttpConnectionSchedule+0x2b8>)
     e70:	6818      	ldr	r0, [r3, #0]
     e72:	4b34      	ldr	r3, [pc, #208]	; (f44 <MdmConnect_HttpConnectionSchedule+0x2bc>)
     e74:	4798      	blx	r3
     e76:	2801      	cmp	r0, #1
     e78:	f000 8188 	beq.w	118c <MdmConnect_HttpConnectionSchedule+0x504>
        			SerialDebugPrint("Problem in Auto Recovery. Rebooting the system....\r\n",41);
     e7c:	2129      	movs	r1, #41	; 0x29
     e7e:	4839      	ldr	r0, [pc, #228]	; (f64 <MdmConnect_HttpConnectionSchedule+0x2dc>)
     e80:	4b20      	ldr	r3, [pc, #128]	; (f04 <MdmConnect_HttpConnectionSchedule+0x27c>)
     e82:	4798      	blx	r3
        			requestWatchDogForcedReset();
     e84:	4b38      	ldr	r3, [pc, #224]	; (f68 <MdmConnect_HttpConnectionSchedule+0x2e0>)
     e86:	4798      	blx	r3
}
     e88:	e707      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     e8a:	4b1b      	ldr	r3, [pc, #108]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     e8c:	789b      	ldrb	r3, [r3, #2]
     e8e:	2b00      	cmp	r3, #0
     e90:	f040 808d 	bne.w	fae <MdmConnect_HttpConnectionSchedule+0x326>
        		if(sessionIdCount > 0)
     e94:	4b18      	ldr	r3, [pc, #96]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     e96:	795b      	ldrb	r3, [r3, #5]
     e98:	2b00      	cmp	r3, #0
     e9a:	d07f      	beq.n	f9c <MdmConnect_HttpConnectionSchedule+0x314>
        		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     e9c:	4b1e      	ldr	r3, [pc, #120]	; (f18 <MdmConnect_HttpConnectionSchedule+0x290>)
     e9e:	6818      	ldr	r0, [r3, #0]
     ea0:	4b1e      	ldr	r3, [pc, #120]	; (f1c <MdmConnect_HttpConnectionSchedule+0x294>)
     ea2:	4798      	blx	r3
     ea4:	2800      	cmp	r0, #0
     ea6:	d175      	bne.n	f94 <MdmConnect_HttpConnectionSchedule+0x30c>
        		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     ea8:	2100      	movs	r1, #0
     eaa:	4b1d      	ldr	r3, [pc, #116]	; (f20 <MdmConnect_HttpConnectionSchedule+0x298>)
     eac:	6818      	ldr	r0, [r3, #0]
     eae:	4b1d      	ldr	r3, [pc, #116]	; (f24 <MdmConnect_HttpConnectionSchedule+0x29c>)
     eb0:	4798      	blx	r3
     eb2:	2801      	cmp	r0, #1
     eb4:	d003      	beq.n	ebe <MdmConnect_HttpConnectionSchedule+0x236>
        		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     eb6:	481c      	ldr	r0, [pc, #112]	; (f28 <MdmConnect_HttpConnectionSchedule+0x2a0>)
     eb8:	4b1c      	ldr	r3, [pc, #112]	; (f2c <MdmConnect_HttpConnectionSchedule+0x2a4>)
     eba:	4798      	blx	r3
     ebc:	e6ed      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     ebe:	2301      	movs	r3, #1
     ec0:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
     ec4:	4b0c      	ldr	r3, [pc, #48]	; (ef8 <MdmConnect_HttpConnectionSchedule+0x270>)
     ec6:	7958      	ldrb	r0, [r3, #5]
     ec8:	4b28      	ldr	r3, [pc, #160]	; (f6c <MdmConnect_HttpConnectionSchedule+0x2e4>)
     eca:	4798      	blx	r3
     ecc:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
     ed0:	2300      	movs	r3, #0
     ed2:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     ed4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ed8:	4669      	mov	r1, sp
     eda:	480f      	ldr	r0, [pc, #60]	; (f18 <MdmConnect_HttpConnectionSchedule+0x290>)
     edc:	6800      	ldr	r0, [r0, #0]
     ede:	4c14      	ldr	r4, [pc, #80]	; (f30 <MdmConnect_HttpConnectionSchedule+0x2a8>)
     ee0:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
     ee2:	2801      	cmp	r0, #1
     ee4:	d046      	beq.n	f74 <MdmConnect_HttpConnectionSchedule+0x2ec>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     ee6:	4822      	ldr	r0, [pc, #136]	; (f70 <MdmConnect_HttpConnectionSchedule+0x2e8>)
     ee8:	4b10      	ldr	r3, [pc, #64]	; (f2c <MdmConnect_HttpConnectionSchedule+0x2a4>)
     eea:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
     eec:	f640 10c4 	movw	r0, #2500	; 0x9c4
     ef0:	4b08      	ldr	r3, [pc, #32]	; (f14 <MdmConnect_HttpConnectionSchedule+0x28c>)
     ef2:	4798      	blx	r3
     ef4:	e6d1      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
     ef6:	bf00      	nop
     ef8:	200001ec 	.word	0x200001ec
     efc:	0000170d 	.word	0x0000170d
     f00:	000075e4 	.word	0x000075e4
     f04:	00001c25 	.word	0x00001c25
     f08:	000005d5 	.word	0x000005d5
     f0c:	00001455 	.word	0x00001455
     f10:	00000409 	.word	0x00000409
     f14:	000056cd 	.word	0x000056cd
     f18:	20003484 	.word	0x20003484
     f1c:	00005009 	.word	0x00005009
     f20:	2000348c 	.word	0x2000348c
     f24:	00004e29 	.word	0x00004e29
     f28:	000073e8 	.word	0x000073e8
     f2c:	00001c69 	.word	0x00001c69
     f30:	00004991 	.word	0x00004991
     f34:	00007538 	.word	0x00007538
     f38:	00007414 	.word	0x00007414
     f3c:	200001f4 	.word	0x200001f4
     f40:	20003460 	.word	0x20003460
     f44:	00004ca1 	.word	0x00004ca1
     f48:	00007604 	.word	0x00007604
     f4c:	00006209 	.word	0x00006209
     f50:	00007c0c 	.word	0x00007c0c
     f54:	00004669 	.word	0x00004669
     f58:	00007474 	.word	0x00007474
     f5c:	00007620 	.word	0x00007620
     f60:	00007644 	.word	0x00007644
     f64:	00007668 	.word	0x00007668
     f68:	00001ded 	.word	0x00001ded
     f6c:	00000571 	.word	0x00000571
     f70:	000073b4 	.word	0x000073b4
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
     f74:	2300      	movs	r3, #0
     f76:	461a      	mov	r2, r3
     f78:	4619      	mov	r1, r3
     f7a:	488c      	ldr	r0, [pc, #560]	; (11ac <MdmConnect_HttpConnectionSchedule+0x524>)
     f7c:	6800      	ldr	r0, [r0, #0]
     f7e:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     f80:	4b8b      	ldr	r3, [pc, #556]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
     f82:	2201      	movs	r2, #1
     f84:	709a      	strb	r2, [r3, #2]
                                gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
     f86:	2206      	movs	r2, #6
     f88:	70da      	strb	r2, [r3, #3]
                                vTaskDelay(TransmitDelayMs);
     f8a:	f640 10c4 	movw	r0, #2500	; 0x9c4
     f8e:	4b89      	ldr	r3, [pc, #548]	; (11b4 <MdmConnect_HttpConnectionSchedule+0x52c>)
     f90:	4798      	blx	r3
     f92:	e682      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
        		    	DEBUG_PRINT("Transmit Queue is not empty");
     f94:	4888      	ldr	r0, [pc, #544]	; (11b8 <MdmConnect_HttpConnectionSchedule+0x530>)
     f96:	4b89      	ldr	r3, [pc, #548]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
     f98:	4798      	blx	r3
     f9a:	e67e      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
        			DEBUG_PRINT("No More Active Connections to close");
     f9c:	4888      	ldr	r0, [pc, #544]	; (11c0 <MdmConnect_HttpConnectionSchedule+0x538>)
     f9e:	4b87      	ldr	r3, [pc, #540]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
     fa0:	4798      	blx	r3
        			gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
     fa2:	4b83      	ldr	r3, [pc, #524]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
     fa4:	2201      	movs	r2, #1
     fa6:	711a      	strb	r2, [r3, #4]
        			gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
     fa8:	2206      	movs	r2, #6
     faa:	70da      	strb	r2, [r3, #3]
     fac:	e675      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     fae:	2b01      	cmp	r3, #1
     fb0:	f47f ae73 	bne.w	c9a <MdmConnect_HttpConnectionSchedule+0x12>
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     fb4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     fb8:	4982      	ldr	r1, [pc, #520]	; (11c4 <MdmConnect_HttpConnectionSchedule+0x53c>)
     fba:	4b83      	ldr	r3, [pc, #524]	; (11c8 <MdmConnect_HttpConnectionSchedule+0x540>)
     fbc:	6818      	ldr	r0, [r3, #0]
     fbe:	4b83      	ldr	r3, [pc, #524]	; (11cc <MdmConnect_HttpConnectionSchedule+0x544>)
     fc0:	4798      	blx	r3
     fc2:	2801      	cmp	r0, #1
     fc4:	d126      	bne.n	1014 <MdmConnect_HttpConnectionSchedule+0x38c>
	        		if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
     fc6:	4b7a      	ldr	r3, [pc, #488]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
     fc8:	7a1d      	ldrb	r5, [r3, #8]
     fca:	795c      	ldrb	r4, [r3, #5]
     fcc:	4620      	mov	r0, r4
     fce:	4b80      	ldr	r3, [pc, #512]	; (11d0 <MdmConnect_HttpConnectionSchedule+0x548>)
     fd0:	4798      	blx	r3
     fd2:	4285      	cmp	r5, r0
     fd4:	d114      	bne.n	1000 <MdmConnect_HttpConnectionSchedule+0x378>
		        		if(sessionIdCount > 0)
     fd6:	b14c      	cbz	r4, fec <MdmConnect_HttpConnectionSchedule+0x364>
			        		sessionIdCount--;
     fd8:	4b75      	ldr	r3, [pc, #468]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
     fda:	3c01      	subs	r4, #1
     fdc:	715c      	strb	r4, [r3, #5]
			        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     fde:	2200      	movs	r2, #0
     fe0:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     fe2:	4b73      	ldr	r3, [pc, #460]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
     fe4:	68d8      	ldr	r0, [r3, #12]
     fe6:	4b7b      	ldr	r3, [pc, #492]	; (11d4 <MdmConnect_HttpConnectionSchedule+0x54c>)
     fe8:	4798      	blx	r3
     fea:	e656      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
		        			gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
     fec:	4b70      	ldr	r3, [pc, #448]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
     fee:	2201      	movs	r2, #1
     ff0:	711a      	strb	r2, [r3, #4]
		        			gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
     ff2:	2206      	movs	r2, #6
     ff4:	70da      	strb	r2, [r3, #3]
			        		SerialDebugPrint("Closed All Active Connections\r\n",31);
     ff6:	211f      	movs	r1, #31
     ff8:	4877      	ldr	r0, [pc, #476]	; (11d8 <MdmConnect_HttpConnectionSchedule+0x550>)
     ffa:	4b78      	ldr	r3, [pc, #480]	; (11dc <MdmConnect_HttpConnectionSchedule+0x554>)
     ffc:	4798      	blx	r3
     ffe:	e7f0      	b.n	fe2 <MdmConnect_HttpConnectionSchedule+0x35a>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
    1000:	4877      	ldr	r0, [pc, #476]	; (11e0 <MdmConnect_HttpConnectionSchedule+0x558>)
    1002:	4b6e      	ldr	r3, [pc, #440]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
    1004:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1006:	4b6a      	ldr	r3, [pc, #424]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
    1008:	2200      	movs	r2, #0
    100a:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
    100c:	68d8      	ldr	r0, [r3, #12]
    100e:	4b71      	ldr	r3, [pc, #452]	; (11d4 <MdmConnect_HttpConnectionSchedule+0x54c>)
    1010:	4798      	blx	r3
    1012:	e642      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
        			SerialDebugPrint("Problem in Auto Recovery. Rebooting the system....\r\n",41);
    1014:	2129      	movs	r1, #41	; 0x29
    1016:	4873      	ldr	r0, [pc, #460]	; (11e4 <MdmConnect_HttpConnectionSchedule+0x55c>)
    1018:	4b70      	ldr	r3, [pc, #448]	; (11dc <MdmConnect_HttpConnectionSchedule+0x554>)
    101a:	4798      	blx	r3
        			requestWatchDogForcedReset();
    101c:	4b72      	ldr	r3, [pc, #456]	; (11e8 <MdmConnect_HttpConnectionSchedule+0x560>)
    101e:	4798      	blx	r3
    1020:	e63b      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
			if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1022:	4b63      	ldr	r3, [pc, #396]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
    1024:	789b      	ldrb	r3, [r3, #2]
    1026:	b1cb      	cbz	r3, 105c <MdmConnect_HttpConnectionSchedule+0x3d4>
			else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1028:	2b01      	cmp	r3, #1
    102a:	f47f ae36 	bne.w	c9a <MdmConnect_HttpConnectionSchedule+0x12>
				if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    102e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1032:	4964      	ldr	r1, [pc, #400]	; (11c4 <MdmConnect_HttpConnectionSchedule+0x53c>)
    1034:	4b64      	ldr	r3, [pc, #400]	; (11c8 <MdmConnect_HttpConnectionSchedule+0x540>)
    1036:	6818      	ldr	r0, [r3, #0]
    1038:	4b64      	ldr	r3, [pc, #400]	; (11cc <MdmConnect_HttpConnectionSchedule+0x544>)
    103a:	4798      	blx	r3
    103c:	2801      	cmp	r0, #1
    103e:	d160      	bne.n	1102 <MdmConnect_HttpConnectionSchedule+0x47a>
	        		if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
    1040:	4b5b      	ldr	r3, [pc, #364]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
    1042:	7a1b      	ldrb	r3, [r3, #8]
    1044:	2b1a      	cmp	r3, #26
    1046:	d047      	beq.n	10d8 <MdmConnect_HttpConnectionSchedule+0x450>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
    1048:	4865      	ldr	r0, [pc, #404]	; (11e0 <MdmConnect_HttpConnectionSchedule+0x558>)
    104a:	4b5c      	ldr	r3, [pc, #368]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
    104c:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    104e:	4b58      	ldr	r3, [pc, #352]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
    1050:	2200      	movs	r2, #0
    1052:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
    1054:	68d8      	ldr	r0, [r3, #12]
    1056:	4b5f      	ldr	r3, [pc, #380]	; (11d4 <MdmConnect_HttpConnectionSchedule+0x54c>)
    1058:	4798      	blx	r3
    105a:	e61e      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
				if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    105c:	4b63      	ldr	r3, [pc, #396]	; (11ec <MdmConnect_HttpConnectionSchedule+0x564>)
    105e:	6818      	ldr	r0, [r3, #0]
    1060:	4b63      	ldr	r3, [pc, #396]	; (11f0 <MdmConnect_HttpConnectionSchedule+0x568>)
    1062:	4798      	blx	r3
    1064:	2800      	cmp	r0, #0
    1066:	d133      	bne.n	10d0 <MdmConnect_HttpConnectionSchedule+0x448>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1068:	2100      	movs	r1, #0
    106a:	4b50      	ldr	r3, [pc, #320]	; (11ac <MdmConnect_HttpConnectionSchedule+0x524>)
    106c:	6818      	ldr	r0, [r3, #0]
    106e:	4b61      	ldr	r3, [pc, #388]	; (11f4 <MdmConnect_HttpConnectionSchedule+0x56c>)
    1070:	4798      	blx	r3
    1072:	2801      	cmp	r0, #1
    1074:	d003      	beq.n	107e <MdmConnect_HttpConnectionSchedule+0x3f6>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1076:	4860      	ldr	r0, [pc, #384]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x570>)
    1078:	4b50      	ldr	r3, [pc, #320]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
    107a:	4798      	blx	r3
    107c:	e60d      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    107e:	2301      	movs	r3, #1
    1080:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
    1084:	231a      	movs	r3, #26
    1086:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    108a:	2300      	movs	r3, #0
    108c:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    108e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1092:	4669      	mov	r1, sp
    1094:	4855      	ldr	r0, [pc, #340]	; (11ec <MdmConnect_HttpConnectionSchedule+0x564>)
    1096:	6800      	ldr	r0, [r0, #0]
    1098:	4c58      	ldr	r4, [pc, #352]	; (11fc <MdmConnect_HttpConnectionSchedule+0x574>)
    109a:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    109c:	2801      	cmp	r0, #1
    109e:	d007      	beq.n	10b0 <MdmConnect_HttpConnectionSchedule+0x428>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    10a0:	4857      	ldr	r0, [pc, #348]	; (1200 <MdmConnect_HttpConnectionSchedule+0x578>)
    10a2:	4b46      	ldr	r3, [pc, #280]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
    10a4:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    10a6:	f640 10c4 	movw	r0, #2500	; 0x9c4
    10aa:	4b42      	ldr	r3, [pc, #264]	; (11b4 <MdmConnect_HttpConnectionSchedule+0x52c>)
    10ac:	4798      	blx	r3
    10ae:	e5f4      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    10b0:	2300      	movs	r3, #0
    10b2:	461a      	mov	r2, r3
    10b4:	4619      	mov	r1, r3
    10b6:	483d      	ldr	r0, [pc, #244]	; (11ac <MdmConnect_HttpConnectionSchedule+0x524>)
    10b8:	6800      	ldr	r0, [r0, #0]
    10ba:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    10bc:	4b3c      	ldr	r3, [pc, #240]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
    10be:	2201      	movs	r2, #1
    10c0:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    10c2:	2206      	movs	r2, #6
    10c4:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    10c6:	f640 10c4 	movw	r0, #2500	; 0x9c4
    10ca:	4b3a      	ldr	r3, [pc, #232]	; (11b4 <MdmConnect_HttpConnectionSchedule+0x52c>)
    10cc:	4798      	blx	r3
    10ce:	e5e4      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
    10d0:	4839      	ldr	r0, [pc, #228]	; (11b8 <MdmConnect_HttpConnectionSchedule+0x530>)
    10d2:	4b3a      	ldr	r3, [pc, #232]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
    10d4:	4798      	blx	r3
    10d6:	e5e0      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
	        			SerialDebugPrint("Brought the PDP connection DOWN\r\n",33);
    10d8:	2121      	movs	r1, #33	; 0x21
    10da:	484a      	ldr	r0, [pc, #296]	; (1204 <MdmConnect_HttpConnectionSchedule+0x57c>)
    10dc:	4d3f      	ldr	r5, [pc, #252]	; (11dc <MdmConnect_HttpConnectionSchedule+0x554>)
    10de:	47a8      	blx	r5
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    10e0:	4c33      	ldr	r4, [pc, #204]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
    10e2:	8961      	ldrh	r1, [r4, #10]
    10e4:	68e0      	ldr	r0, [r4, #12]
    10e6:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
    10e8:	2102      	movs	r1, #2
    10ea:	4847      	ldr	r0, [pc, #284]	; (1208 <MdmConnect_HttpConnectionSchedule+0x580>)
    10ec:	47a8      	blx	r5
						gErrorRecoveryState = PDP_PERFORM_PS_CONNECTION_DETACH;
    10ee:	2302      	movs	r3, #2
    10f0:	7123      	strb	r3, [r4, #4]
						gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    10f2:	2300      	movs	r3, #0
    10f4:	70a3      	strb	r3, [r4, #2]
						gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    10f6:	2306      	movs	r3, #6
    10f8:	70e3      	strb	r3, [r4, #3]
		        		vPortFree(ConnectionResponse.response);
    10fa:	68e0      	ldr	r0, [r4, #12]
    10fc:	4b35      	ldr	r3, [pc, #212]	; (11d4 <MdmConnect_HttpConnectionSchedule+0x54c>)
    10fe:	4798      	blx	r3
    1100:	e5cb      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
        			SerialDebugPrint("Problem in Auto Recovery. Rebooting the system....\r\n",41);
    1102:	2129      	movs	r1, #41	; 0x29
    1104:	4837      	ldr	r0, [pc, #220]	; (11e4 <MdmConnect_HttpConnectionSchedule+0x55c>)
    1106:	4b35      	ldr	r3, [pc, #212]	; (11dc <MdmConnect_HttpConnectionSchedule+0x554>)
    1108:	4798      	blx	r3
        			requestWatchDogForcedReset();
    110a:	4b37      	ldr	r3, [pc, #220]	; (11e8 <MdmConnect_HttpConnectionSchedule+0x560>)
    110c:	4798      	blx	r3
    110e:	e5c4      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
				if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1110:	4b36      	ldr	r3, [pc, #216]	; (11ec <MdmConnect_HttpConnectionSchedule+0x564>)
    1112:	6818      	ldr	r0, [r3, #0]
    1114:	4b36      	ldr	r3, [pc, #216]	; (11f0 <MdmConnect_HttpConnectionSchedule+0x568>)
    1116:	4798      	blx	r3
    1118:	2800      	cmp	r0, #0
    111a:	d133      	bne.n	1184 <MdmConnect_HttpConnectionSchedule+0x4fc>
    		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    111c:	2100      	movs	r1, #0
    111e:	4b23      	ldr	r3, [pc, #140]	; (11ac <MdmConnect_HttpConnectionSchedule+0x524>)
    1120:	6818      	ldr	r0, [r3, #0]
    1122:	4b34      	ldr	r3, [pc, #208]	; (11f4 <MdmConnect_HttpConnectionSchedule+0x56c>)
    1124:	4798      	blx	r3
    1126:	2801      	cmp	r0, #1
    1128:	d003      	beq.n	1132 <MdmConnect_HttpConnectionSchedule+0x4aa>
    		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    112a:	4833      	ldr	r0, [pc, #204]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x570>)
    112c:	4b23      	ldr	r3, [pc, #140]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
    112e:	4798      	blx	r3
    1130:	e5b3      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1132:	2301      	movs	r3, #1
    1134:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
    1138:	231b      	movs	r3, #27
    113a:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    113e:	2300      	movs	r3, #0
    1140:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1142:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1146:	4669      	mov	r1, sp
    1148:	4828      	ldr	r0, [pc, #160]	; (11ec <MdmConnect_HttpConnectionSchedule+0x564>)
    114a:	6800      	ldr	r0, [r0, #0]
    114c:	4c2b      	ldr	r4, [pc, #172]	; (11fc <MdmConnect_HttpConnectionSchedule+0x574>)
    114e:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1150:	2801      	cmp	r0, #1
    1152:	d007      	beq.n	1164 <MdmConnect_HttpConnectionSchedule+0x4dc>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    1154:	482a      	ldr	r0, [pc, #168]	; (1200 <MdmConnect_HttpConnectionSchedule+0x578>)
    1156:	4b19      	ldr	r3, [pc, #100]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
    1158:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    115a:	f640 10c4 	movw	r0, #2500	; 0x9c4
    115e:	4b15      	ldr	r3, [pc, #84]	; (11b4 <MdmConnect_HttpConnectionSchedule+0x52c>)
    1160:	4798      	blx	r3
    1162:	e59a      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1164:	2300      	movs	r3, #0
    1166:	461a      	mov	r2, r3
    1168:	4619      	mov	r1, r3
    116a:	4810      	ldr	r0, [pc, #64]	; (11ac <MdmConnect_HttpConnectionSchedule+0x524>)
    116c:	6800      	ldr	r0, [r0, #0]
    116e:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1170:	4b0f      	ldr	r3, [pc, #60]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
    1172:	2201      	movs	r2, #1
    1174:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1176:	2206      	movs	r2, #6
    1178:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    117a:	f640 10c4 	movw	r0, #2500	; 0x9c4
    117e:	4b0d      	ldr	r3, [pc, #52]	; (11b4 <MdmConnect_HttpConnectionSchedule+0x52c>)
    1180:	4798      	blx	r3
    1182:	e58a      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
    		    	DEBUG_PRINT("Transmit Queue is not empty");
    1184:	480c      	ldr	r0, [pc, #48]	; (11b8 <MdmConnect_HttpConnectionSchedule+0x530>)
    1186:	4b0d      	ldr	r3, [pc, #52]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
    1188:	4798      	blx	r3
    118a:	e586      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
	        		if(ConnectionResponse.atCmd == CMD_AT_CGATT)
    118c:	4b08      	ldr	r3, [pc, #32]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
    118e:	7a1b      	ldrb	r3, [r3, #8]
    1190:	2b1b      	cmp	r3, #27
    1192:	d03b      	beq.n	120c <MdmConnect_HttpConnectionSchedule+0x584>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
    1194:	4812      	ldr	r0, [pc, #72]	; (11e0 <MdmConnect_HttpConnectionSchedule+0x558>)
    1196:	4b09      	ldr	r3, [pc, #36]	; (11bc <MdmConnect_HttpConnectionSchedule+0x534>)
    1198:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    119a:	4b05      	ldr	r3, [pc, #20]	; (11b0 <MdmConnect_HttpConnectionSchedule+0x528>)
    119c:	2200      	movs	r2, #0
    119e:	709a      	strb	r2, [r3, #2]
		        		gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    11a0:	2206      	movs	r2, #6
    11a2:	70da      	strb	r2, [r3, #3]
		        		vPortFree(ConnectionResponse.response);
    11a4:	68d8      	ldr	r0, [r3, #12]
    11a6:	4b0b      	ldr	r3, [pc, #44]	; (11d4 <MdmConnect_HttpConnectionSchedule+0x54c>)
    11a8:	4798      	blx	r3
    11aa:	e576      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
    11ac:	2000348c 	.word	0x2000348c
    11b0:	200001ec 	.word	0x200001ec
    11b4:	000056cd 	.word	0x000056cd
    11b8:	00007414 	.word	0x00007414
    11bc:	00001c69 	.word	0x00001c69
    11c0:	00007430 	.word	0x00007430
    11c4:	200001f4 	.word	0x200001f4
    11c8:	20003460 	.word	0x20003460
    11cc:	00004ca1 	.word	0x00004ca1
    11d0:	00000571 	.word	0x00000571
    11d4:	00004669 	.word	0x00004669
    11d8:	00007454 	.word	0x00007454
    11dc:	00001c25 	.word	0x00001c25
    11e0:	00007474 	.word	0x00007474
    11e4:	00007668 	.word	0x00007668
    11e8:	00001ded 	.word	0x00001ded
    11ec:	20003484 	.word	0x20003484
    11f0:	00005009 	.word	0x00005009
    11f4:	00004e29 	.word	0x00004e29
    11f8:	000073e8 	.word	0x000073e8
    11fc:	00004991 	.word	0x00004991
    1200:	000073b4 	.word	0x000073b4
    1204:	000076a0 	.word	0x000076a0
    1208:	00007c0c 	.word	0x00007c0c
	        			SerialDebugPrint("Detached the PDP PS\r\n",21);
    120c:	2115      	movs	r1, #21
    120e:	4818      	ldr	r0, [pc, #96]	; (1270 <MdmConnect_HttpConnectionSchedule+0x5e8>)
    1210:	4d18      	ldr	r5, [pc, #96]	; (1274 <MdmConnect_HttpConnectionSchedule+0x5ec>)
    1212:	47a8      	blx	r5
		        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1214:	4c18      	ldr	r4, [pc, #96]	; (1278 <MdmConnect_HttpConnectionSchedule+0x5f0>)
    1216:	8961      	ldrh	r1, [r4, #10]
    1218:	68e0      	ldr	r0, [r4, #12]
    121a:	47a8      	blx	r5
						SerialDebugPrint("\r\n",2);
    121c:	2102      	movs	r1, #2
    121e:	4817      	ldr	r0, [pc, #92]	; (127c <MdmConnect_HttpConnectionSchedule+0x5f4>)
    1220:	47a8      	blx	r5
						gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    1222:	2300      	movs	r3, #0
    1224:	7123      	strb	r3, [r4, #4]
						gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1226:	70a3      	strb	r3, [r4, #2]
						gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    1228:	70e3      	strb	r3, [r4, #3]
						gHttpConnectionState = MDM_HTTP_DISCONNECTED;
    122a:	7023      	strb	r3, [r4, #0]
						gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    122c:	7063      	strb	r3, [r4, #1]
						sessionIdCount = 5;
    122e:	2305      	movs	r3, #5
    1230:	7163      	strb	r3, [r4, #5]
						SerialDebugPrint("Error Recovery Completed\r\n\r\n",28);
    1232:	211c      	movs	r1, #28
    1234:	4812      	ldr	r0, [pc, #72]	; (1280 <MdmConnect_HttpConnectionSchedule+0x5f8>)
    1236:	47a8      	blx	r5
						SerialDebugPrint("=================================================\r\n\r\n",54);
    1238:	2136      	movs	r1, #54	; 0x36
    123a:	4812      	ldr	r0, [pc, #72]	; (1284 <MdmConnect_HttpConnectionSchedule+0x5fc>)
    123c:	47a8      	blx	r5
						SerialDebugPrint("Establishing a new connection with server\r\n",43);
    123e:	212b      	movs	r1, #43	; 0x2b
    1240:	4811      	ldr	r0, [pc, #68]	; (1288 <MdmConnect_HttpConnectionSchedule+0x600>)
    1242:	47a8      	blx	r5
						errorRecoveryCnt++;
    1244:	7c63      	ldrb	r3, [r4, #17]
    1246:	3301      	adds	r3, #1
    1248:	7463      	strb	r3, [r4, #17]
		        		vPortFree(ConnectionResponse.response);
    124a:	68e0      	ldr	r0, [r4, #12]
    124c:	4b0f      	ldr	r3, [pc, #60]	; (128c <MdmConnect_HttpConnectionSchedule+0x604>)
    124e:	4798      	blx	r3
		        		if(errorRecoveryCnt >=3)
    1250:	7c63      	ldrb	r3, [r4, #17]
    1252:	2b02      	cmp	r3, #2
    1254:	f67f ad21 	bls.w	c9a <MdmConnect_HttpConnectionSchedule+0x12>
		        			SerialDebugPrint("System is auto recovered for more than 3 times.\r\n",49);
    1258:	2131      	movs	r1, #49	; 0x31
    125a:	480d      	ldr	r0, [pc, #52]	; (1290 <MdmConnect_HttpConnectionSchedule+0x608>)
    125c:	47a8      	blx	r5
		        			SerialDebugPrint("Performing a system restart....................\r\n",49);
    125e:	2131      	movs	r1, #49	; 0x31
    1260:	480c      	ldr	r0, [pc, #48]	; (1294 <MdmConnect_HttpConnectionSchedule+0x60c>)
    1262:	47a8      	blx	r5
		        			errorRecoveryCnt = 0;
    1264:	2200      	movs	r2, #0
    1266:	4b04      	ldr	r3, [pc, #16]	; (1278 <MdmConnect_HttpConnectionSchedule+0x5f0>)
    1268:	745a      	strb	r2, [r3, #17]
		        			requestWatchDogForcedReset();
    126a:	4b0b      	ldr	r3, [pc, #44]	; (1298 <MdmConnect_HttpConnectionSchedule+0x610>)
    126c:	4798      	blx	r3
    126e:	e514      	b.n	c9a <MdmConnect_HttpConnectionSchedule+0x12>
    1270:	000076c4 	.word	0x000076c4
    1274:	00001c25 	.word	0x00001c25
    1278:	200001ec 	.word	0x200001ec
    127c:	00007c0c 	.word	0x00007c0c
    1280:	000076dc 	.word	0x000076dc
    1284:	000076fc 	.word	0x000076fc
    1288:	00007734 	.word	0x00007734
    128c:	00004669 	.word	0x00004669
    1290:	00007760 	.word	0x00007760
    1294:	00007794 	.word	0x00007794
    1298:	00001ded 	.word	0x00001ded

0000129c <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
    129c:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
    129e:	4912      	ldr	r1, [pc, #72]	; (12e8 <mdmCtrlr_DataCommInit+0x4c>)
    12a0:	4812      	ldr	r0, [pc, #72]	; (12ec <mdmCtrlr_DataCommInit+0x50>)
    12a2:	4b13      	ldr	r3, [pc, #76]	; (12f0 <mdmCtrlr_DataCommInit+0x54>)
    12a4:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
    12a6:	b118      	cbz	r0, 12b0 <mdmCtrlr_DataCommInit+0x14>
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
		
	}
	else
	{
		DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
    12a8:	4812      	ldr	r0, [pc, #72]	; (12f4 <mdmCtrlr_DataCommInit+0x58>)
    12aa:	4b13      	ldr	r3, [pc, #76]	; (12f8 <mdmCtrlr_DataCommInit+0x5c>)
    12ac:	4798      	blx	r3
    12ae:	bd10      	pop	{r4, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
    12b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    12b4:	4911      	ldr	r1, [pc, #68]	; (12fc <mdmCtrlr_DataCommInit+0x60>)
    12b6:	4812      	ldr	r0, [pc, #72]	; (1300 <mdmCtrlr_DataCommInit+0x64>)
    12b8:	4b12      	ldr	r3, [pc, #72]	; (1304 <mdmCtrlr_DataCommInit+0x68>)
    12ba:	4798      	blx	r3
	if(initStatus == ERR_NONE)
    12bc:	2800      	cmp	r0, #0
    12be:	d1f3      	bne.n	12a8 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
    12c0:	4c0a      	ldr	r4, [pc, #40]	; (12ec <mdmCtrlr_DataCommInit+0x50>)
    12c2:	2201      	movs	r2, #1
    12c4:	4611      	mov	r1, r2
    12c6:	4620      	mov	r0, r4
    12c8:	4b0f      	ldr	r3, [pc, #60]	; (1308 <mdmCtrlr_DataCommInit+0x6c>)
    12ca:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
    12cc:	4620      	mov	r0, r4
    12ce:	4b0f      	ldr	r3, [pc, #60]	; (130c <mdmCtrlr_DataCommInit+0x70>)
    12d0:	4798      	blx	r3
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
    12d2:	480f      	ldr	r0, [pc, #60]	; (1310 <mdmCtrlr_DataCommInit+0x74>)
    12d4:	4b08      	ldr	r3, [pc, #32]	; (12f8 <mdmCtrlr_DataCommInit+0x5c>)
    12d6:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
    12d8:	4b0e      	ldr	r3, [pc, #56]	; (1314 <mdmCtrlr_DataCommInit+0x78>)
    12da:	f893 133c 	ldrb.w	r1, [r3, #828]	; 0x33c
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
    12de:	0949      	lsrs	r1, r1, #5
    12e0:	480d      	ldr	r0, [pc, #52]	; (1318 <mdmCtrlr_DataCommInit+0x7c>)
    12e2:	4b0e      	ldr	r3, [pc, #56]	; (131c <mdmCtrlr_DataCommInit+0x80>)
    12e4:	4798      	blx	r3
    12e6:	bd10      	pop	{r4, pc}
    12e8:	41014000 	.word	0x41014000
    12ec:	20000024 	.word	0x20000024
    12f0:	00003411 	.word	0x00003411
    12f4:	00007804 	.word	0x00007804
    12f8:	00001c69 	.word	0x00001c69
    12fc:	20003498 	.word	0x20003498
    1300:	20003c98 	.word	0x20003c98
    1304:	000029f9 	.word	0x000029f9
    1308:	000034bd 	.word	0x000034bd
    130c:	00003485 	.word	0x00003485
    1310:	000077c8 	.word	0x000077c8
    1314:	e000e100 	.word	0xe000e100
    1318:	000077f0 	.word	0x000077f0
    131c:	00001c6d 	.word	0x00001c6d

00001320 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    1320:	2201      	movs	r2, #1
    1322:	4b01      	ldr	r3, [pc, #4]	; (1328 <SERCOM3_0_Handler+0x8>)
    1324:	761a      	strb	r2, [r3, #24]
    1326:	4770      	bx	lr
    1328:	41014000 	.word	0x41014000

0000132c <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    132c:	2202      	movs	r2, #2
    132e:	4b01      	ldr	r3, [pc, #4]	; (1334 <SERCOM3_1_Handler+0x8>)
    1330:	761a      	strb	r2, [r3, #24]
    1332:	4770      	bx	lr
    1334:	41014000 	.word	0x41014000

00001338 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
    1338:	b530      	push	{r4, r5, lr}
    133a:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
    133c:	4d1a      	ldr	r5, [pc, #104]	; (13a8 <SERCOM3_2_Handler+0x70>)
    133e:	4c1b      	ldr	r4, [pc, #108]	; (13ac <SERCOM3_2_Handler+0x74>)
    1340:	4628      	mov	r0, r5
    1342:	47a0      	blx	r4
    1344:	2800      	cmp	r0, #0
    1346:	d0fb      	beq.n	1340 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
    1348:	4817      	ldr	r0, [pc, #92]	; (13a8 <SERCOM3_2_Handler+0x70>)
    134a:	4b19      	ldr	r3, [pc, #100]	; (13b0 <SERCOM3_2_Handler+0x78>)
    134c:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
    134e:	4601      	mov	r1, r0
    1350:	4818      	ldr	r0, [pc, #96]	; (13b4 <SERCOM3_2_Handler+0x7c>)
    1352:	4b19      	ldr	r3, [pc, #100]	; (13b8 <SERCOM3_2_Handler+0x80>)
    1354:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
    1356:	4b19      	ldr	r3, [pc, #100]	; (13bc <SERCOM3_2_Handler+0x84>)
    1358:	4798      	blx	r3
    135a:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
    135c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    1360:	d101      	bne.n	1366 <SERCOM3_2_Handler+0x2e>

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}

}
    1362:	b009      	add	sp, #36	; 0x24
    1364:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
    1366:	a902      	add	r1, sp, #8
    1368:	4b15      	ldr	r3, [pc, #84]	; (13c0 <SERCOM3_2_Handler+0x88>)
    136a:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
    136c:	4811      	ldr	r0, [pc, #68]	; (13b4 <SERCOM3_2_Handler+0x7c>)
    136e:	4b15      	ldr	r3, [pc, #84]	; (13c4 <SERCOM3_2_Handler+0x8c>)
    1370:	4798      	blx	r3
    1372:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    1376:	4298      	cmp	r0, r3
    1378:	d3f3      	bcc.n	1362 <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
    137a:	4b13      	ldr	r3, [pc, #76]	; (13c8 <SERCOM3_2_Handler+0x90>)
    137c:	6818      	ldr	r0, [r3, #0]
    137e:	ab07      	add	r3, sp, #28
    1380:	9300      	str	r3, [sp, #0]
    1382:	2300      	movs	r3, #0
    1384:	2203      	movs	r2, #3
    1386:	b2e1      	uxtb	r1, r4
    1388:	4c10      	ldr	r4, [pc, #64]	; (13cc <SERCOM3_2_Handler+0x94>)
    138a:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    138c:	9b07      	ldr	r3, [sp, #28]
    138e:	b13b      	cbz	r3, 13a0 <SERCOM3_2_Handler+0x68>
    1390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1394:	4b0e      	ldr	r3, [pc, #56]	; (13d0 <SERCOM3_2_Handler+0x98>)
    1396:	601a      	str	r2, [r3, #0]
    1398:	f3bf 8f4f 	dsb	sy
    139c:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
    13a0:	2000      	movs	r0, #0
    13a2:	4b0c      	ldr	r3, [pc, #48]	; (13d4 <SERCOM3_2_Handler+0x9c>)
    13a4:	4798      	blx	r3
}
    13a6:	e7dc      	b.n	1362 <SERCOM3_2_Handler+0x2a>
    13a8:	20000024 	.word	0x20000024
    13ac:	000034b1 	.word	0x000034b1
    13b0:	0000349f 	.word	0x0000349f
    13b4:	20003c98 	.word	0x20003c98
    13b8:	00002a8d 	.word	0x00002a8d
    13bc:	00000565 	.word	0x00000565
    13c0:	00000361 	.word	0x00000361
    13c4:	00002acd 	.word	0x00002acd
    13c8:	20003478 	.word	0x20003478
    13cc:	00005c81 	.word	0x00005c81
    13d0:	e000ed04 	.word	0xe000ed04
    13d4:	00000559 	.word	0x00000559

000013d8 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
    13d8:	b570      	push	{r4, r5, r6, lr}
    13da:	4605      	mov	r5, r0
    13dc:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
    13de:	4c05      	ldr	r4, [pc, #20]	; (13f4 <mdmCtrlr_SendDataToModem+0x1c>)
    13e0:	4620      	mov	r0, r4
    13e2:	4b05      	ldr	r3, [pc, #20]	; (13f8 <mdmCtrlr_SendDataToModem+0x20>)
    13e4:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
    13e6:	4632      	mov	r2, r6
    13e8:	4629      	mov	r1, r5
    13ea:	4620      	mov	r0, r4
    13ec:	4b03      	ldr	r3, [pc, #12]	; (13fc <mdmCtrlr_SendDataToModem+0x24>)
    13ee:	4798      	blx	r3
}
    13f0:	bd70      	pop	{r4, r5, r6, pc}
    13f2:	bf00      	nop
    13f4:	20000024 	.word	0x20000024
    13f8:	00003485 	.word	0x00003485
    13fc:	00001ba1 	.word	0x00001ba1

00001400 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
    1400:	b5f0      	push	{r4, r5, r6, r7, lr}
    1402:	b083      	sub	sp, #12
    1404:	4605      	mov	r5, r0
    1406:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
    1408:	480d      	ldr	r0, [pc, #52]	; (1440 <mdmCtrlr_ReadResponseFromModem+0x40>)
    140a:	4b0e      	ldr	r3, [pc, #56]	; (1444 <mdmCtrlr_ReadResponseFromModem+0x44>)
    140c:	4798      	blx	r3
    140e:	42b0      	cmp	r0, r6
    1410:	d201      	bcs.n	1416 <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
    1412:	b003      	add	sp, #12
    1414:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
    1416:	a801      	add	r0, sp, #4
    1418:	4b0b      	ldr	r3, [pc, #44]	; (1448 <mdmCtrlr_ReadResponseFromModem+0x48>)
    141a:	4798      	blx	r3
		while (readCnt < length)
    141c:	b166      	cbz	r6, 1438 <mdmCtrlr_ReadResponseFromModem+0x38>
    141e:	462c      	mov	r4, r5
    1420:	3e01      	subs	r6, #1
    1422:	b2b6      	uxth	r6, r6
    1424:	3601      	adds	r6, #1
    1426:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
    1428:	4f05      	ldr	r7, [pc, #20]	; (1440 <mdmCtrlr_ReadResponseFromModem+0x40>)
    142a:	4e08      	ldr	r6, [pc, #32]	; (144c <mdmCtrlr_ReadResponseFromModem+0x4c>)
    142c:	4621      	mov	r1, r4
    142e:	4638      	mov	r0, r7
    1430:	47b0      	blx	r6
    1432:	3401      	adds	r4, #1
		while (readCnt < length)
    1434:	42ac      	cmp	r4, r5
    1436:	d1f9      	bne.n	142c <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
    1438:	a801      	add	r0, sp, #4
    143a:	4b05      	ldr	r3, [pc, #20]	; (1450 <mdmCtrlr_ReadResponseFromModem+0x50>)
    143c:	4798      	blx	r3
    143e:	e7e8      	b.n	1412 <mdmCtrlr_ReadResponseFromModem+0x12>
    1440:	20003c98 	.word	0x20003c98
    1444:	00002acd 	.word	0x00002acd
    1448:	000026c9 	.word	0x000026c9
    144c:	00002a49 	.word	0x00002a49
    1450:	000026d7 	.word	0x000026d7

00001454 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
    1454:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
    1456:	4802      	ldr	r0, [pc, #8]	; (1460 <mdmCtrlr_FlushRxBuffer+0xc>)
    1458:	4b02      	ldr	r3, [pc, #8]	; (1464 <mdmCtrlr_FlushRxBuffer+0x10>)
    145a:	4798      	blx	r3
    145c:	bd08      	pop	{r3, pc}
    145e:	bf00      	nop
    1460:	20003c98 	.word	0x20003c98
    1464:	00002af1 	.word	0x00002af1

00001468 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
    1468:	b5f0      	push	{r4, r5, r6, r7, lr}
    146a:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
    146c:	2300      	movs	r3, #0
    146e:	4a6c      	ldr	r2, [pc, #432]	; (1620 <ModemDiagTask+0x1b8>)
    1470:	7013      	strb	r3, [r2, #0]
	bModemDiagDataBaseUpdated = false;
    1472:	4a6c      	ldr	r2, [pc, #432]	; (1624 <ModemDiagTask+0x1bc>)
    1474:	4611      	mov	r1, r2
    1476:	f801 3b04 	strb.w	r3, [r1], #4
	
    memset(atResponseData,0,sizeof(atResponseData));
    147a:	8093      	strh	r3, [r2, #4]
    147c:	708b      	strb	r3, [r1, #2]
    memset(atCgsnResponseData,0,sizeof(atCgsnResponseData));
    147e:	6093      	str	r3, [r2, #8]
    1480:	60d3      	str	r3, [r2, #12]
    1482:	6113      	str	r3, [r2, #16]
    1484:	6153      	str	r3, [r2, #20]
    memset(atKgsnResponseData,0,sizeof(atKgsnResponseData));
    1486:	6193      	str	r3, [r2, #24]
    1488:	61d3      	str	r3, [r2, #28]
    148a:	6213      	str	r3, [r2, #32]
    148c:	f8c2 3023 	str.w	r3, [r2, #35]	; 0x23
    memset(atCarrierResponseData,0,sizeof(atCarrierResponseData));
    1490:	6293      	str	r3, [r2, #40]	; 0x28
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1492:	4c65      	ldr	r4, [pc, #404]	; (1628 <ModemDiagTask+0x1c0>)
    const TickType_t powerUpDelayMs = pdMS_TO_TICKS(7000UL);
    BaseType_t TxQueuePushStatus;
    AtTxMsgType TxMsgQueueData;
    CmdResponseType cmdResponse;

    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1494:	4e65      	ldr	r6, [pc, #404]	; (162c <ModemDiagTask+0x1c4>)
                        ModemDiagState = 100;
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
                        vTaskDelay(DiagDelayMs);
    1496:	4d66      	ldr	r5, [pc, #408]	; (1630 <ModemDiagTask+0x1c8>)
    1498:	e0a3      	b.n	15e2 <ModemDiagTask+0x17a>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    149a:	2304      	movs	r3, #4
    149c:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
    14a0:	2301      	movs	r3, #1
    14a2:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    14a6:	2300      	movs	r3, #0
    14a8:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    14aa:	2264      	movs	r2, #100	; 0x64
    14ac:	4669      	mov	r1, sp
    14ae:	6830      	ldr	r0, [r6, #0]
    14b0:	4f60      	ldr	r7, [pc, #384]	; (1634 <ModemDiagTask+0x1cc>)
    14b2:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    14b4:	2801      	cmp	r0, #1
    14b6:	d006      	beq.n	14c6 <ModemDiagTask+0x5e>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    14b8:	485f      	ldr	r0, [pc, #380]	; (1638 <ModemDiagTask+0x1d0>)
    14ba:	4b60      	ldr	r3, [pc, #384]	; (163c <ModemDiagTask+0x1d4>)
    14bc:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    14be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    14c2:	47a8      	blx	r5
    14c4:	e088      	b.n	15d8 <ModemDiagTask+0x170>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
    14c6:	485e      	ldr	r0, [pc, #376]	; (1640 <ModemDiagTask+0x1d8>)
    14c8:	4b5c      	ldr	r3, [pc, #368]	; (163c <ModemDiagTask+0x1d4>)
    14ca:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    14cc:	2300      	movs	r3, #0
    14ce:	461a      	mov	r2, r3
    14d0:	4619      	mov	r1, r3
    14d2:	485c      	ldr	r0, [pc, #368]	; (1644 <ModemDiagTask+0x1dc>)
    14d4:	6800      	ldr	r0, [r0, #0]
    14d6:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    14d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    14dc:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
    14de:	2201      	movs	r2, #1
    14e0:	4b4f      	ldr	r3, [pc, #316]	; (1620 <ModemDiagTask+0x1b8>)
    14e2:	701a      	strb	r2, [r3, #0]
    14e4:	e078      	b.n	15d8 <ModemDiagTask+0x170>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    14e6:	2304      	movs	r3, #4
    14e8:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
    14ec:	2302      	movs	r3, #2
    14ee:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    14f2:	2300      	movs	r3, #0
    14f4:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    14f6:	2264      	movs	r2, #100	; 0x64
    14f8:	4669      	mov	r1, sp
    14fa:	6830      	ldr	r0, [r6, #0]
    14fc:	4f4d      	ldr	r7, [pc, #308]	; (1634 <ModemDiagTask+0x1cc>)
    14fe:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1500:	2801      	cmp	r0, #1
    1502:	d006      	beq.n	1512 <ModemDiagTask+0xaa>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1504:	484c      	ldr	r0, [pc, #304]	; (1638 <ModemDiagTask+0x1d0>)
    1506:	4b4d      	ldr	r3, [pc, #308]	; (163c <ModemDiagTask+0x1d4>)
    1508:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    150a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    150e:	47a8      	blx	r5
    1510:	e062      	b.n	15d8 <ModemDiagTask+0x170>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
    1512:	484b      	ldr	r0, [pc, #300]	; (1640 <ModemDiagTask+0x1d8>)
    1514:	4b49      	ldr	r3, [pc, #292]	; (163c <ModemDiagTask+0x1d4>)
    1516:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1518:	2300      	movs	r3, #0
    151a:	461a      	mov	r2, r3
    151c:	4619      	mov	r1, r3
    151e:	4849      	ldr	r0, [pc, #292]	; (1644 <ModemDiagTask+0x1dc>)
    1520:	6800      	ldr	r0, [r0, #0]
    1522:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1524:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    1528:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
    152a:	2202      	movs	r2, #2
    152c:	4b3c      	ldr	r3, [pc, #240]	; (1620 <ModemDiagTask+0x1b8>)
    152e:	701a      	strb	r2, [r3, #0]
    1530:	e052      	b.n	15d8 <ModemDiagTask+0x170>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1532:	2304      	movs	r3, #4
    1534:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
    1538:	2307      	movs	r3, #7
    153a:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    153e:	2300      	movs	r3, #0
    1540:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1542:	2264      	movs	r2, #100	; 0x64
    1544:	4669      	mov	r1, sp
    1546:	6830      	ldr	r0, [r6, #0]
    1548:	4f3a      	ldr	r7, [pc, #232]	; (1634 <ModemDiagTask+0x1cc>)
    154a:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    154c:	2801      	cmp	r0, #1
    154e:	d006      	beq.n	155e <ModemDiagTask+0xf6>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1550:	4839      	ldr	r0, [pc, #228]	; (1638 <ModemDiagTask+0x1d0>)
    1552:	4b3a      	ldr	r3, [pc, #232]	; (163c <ModemDiagTask+0x1d4>)
    1554:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    1556:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    155a:	47a8      	blx	r5
    155c:	e03c      	b.n	15d8 <ModemDiagTask+0x170>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
    155e:	4838      	ldr	r0, [pc, #224]	; (1640 <ModemDiagTask+0x1d8>)
    1560:	4b36      	ldr	r3, [pc, #216]	; (163c <ModemDiagTask+0x1d4>)
    1562:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1564:	2300      	movs	r3, #0
    1566:	461a      	mov	r2, r3
    1568:	4619      	mov	r1, r3
    156a:	4836      	ldr	r0, [pc, #216]	; (1644 <ModemDiagTask+0x1dc>)
    156c:	6800      	ldr	r0, [r0, #0]
    156e:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1570:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    1574:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_MAX_STATE;
    1576:	2204      	movs	r2, #4
    1578:	4b29      	ldr	r3, [pc, #164]	; (1620 <ModemDiagTask+0x1b8>)
    157a:	701a      	strb	r2, [r3, #0]
    157c:	e02c      	b.n	15d8 <ModemDiagTask+0x170>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    157e:	2304      	movs	r3, #4
    1580:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
    1584:	2303      	movs	r3, #3
    1586:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    158a:	2300      	movs	r3, #0
    158c:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    158e:	2264      	movs	r2, #100	; 0x64
    1590:	4669      	mov	r1, sp
    1592:	6830      	ldr	r0, [r6, #0]
    1594:	4f27      	ldr	r7, [pc, #156]	; (1634 <ModemDiagTask+0x1cc>)
    1596:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1598:	2801      	cmp	r0, #1
    159a:	d006      	beq.n	15aa <ModemDiagTask+0x142>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    159c:	4826      	ldr	r0, [pc, #152]	; (1638 <ModemDiagTask+0x1d0>)
    159e:	4b27      	ldr	r3, [pc, #156]	; (163c <ModemDiagTask+0x1d4>)
    15a0:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    15a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    15a6:	47a8      	blx	r5
    15a8:	e016      	b.n	15d8 <ModemDiagTask+0x170>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
    15aa:	4825      	ldr	r0, [pc, #148]	; (1640 <ModemDiagTask+0x1d8>)
    15ac:	4b23      	ldr	r3, [pc, #140]	; (163c <ModemDiagTask+0x1d4>)
    15ae:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    15b0:	2300      	movs	r3, #0
    15b2:	461a      	mov	r2, r3
    15b4:	4619      	mov	r1, r3
    15b6:	4823      	ldr	r0, [pc, #140]	; (1644 <ModemDiagTask+0x1dc>)
    15b8:	6800      	ldr	r0, [r0, #0]
    15ba:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    15bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    15c0:	47a8      	blx	r5
                        ModemDiagState = 100;
    15c2:	2264      	movs	r2, #100	; 0x64
    15c4:	4b16      	ldr	r3, [pc, #88]	; (1620 <ModemDiagTask+0x1b8>)
    15c6:	701a      	strb	r2, [r3, #0]
    15c8:	e006      	b.n	15d8 <ModemDiagTask+0x170>
                }
                break;

                default:
                {
                	xSemaphoreGive(AtTxQueueLoadSemaphore);
    15ca:	2300      	movs	r3, #0
    15cc:	461a      	mov	r2, r3
    15ce:	4619      	mov	r1, r3
    15d0:	481c      	ldr	r0, [pc, #112]	; (1644 <ModemDiagTask+0x1dc>)
    15d2:	6800      	ldr	r0, [r0, #0]
    15d4:	4f17      	ldr	r7, [pc, #92]	; (1634 <ModemDiagTask+0x1cc>)
    15d6:	47b8      	blx	r7
            kickWatchDog();
    15d8:	4b1b      	ldr	r3, [pc, #108]	; (1648 <ModemDiagTask+0x1e0>)
    15da:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    15dc:	f44f 7016 	mov.w	r0, #600	; 0x258
    15e0:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    15e2:	47a0      	blx	r4
    15e4:	2804      	cmp	r0, #4
    15e6:	d1fc      	bne.n	15e2 <ModemDiagTask+0x17a>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    15e8:	6830      	ldr	r0, [r6, #0]
    15ea:	4b18      	ldr	r3, [pc, #96]	; (164c <ModemDiagTask+0x1e4>)
    15ec:	4798      	blx	r3
    15ee:	2800      	cmp	r0, #0
    15f0:	d1f2      	bne.n	15d8 <ModemDiagTask+0x170>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    15f2:	2100      	movs	r1, #0
    15f4:	4b13      	ldr	r3, [pc, #76]	; (1644 <ModemDiagTask+0x1dc>)
    15f6:	6818      	ldr	r0, [r3, #0]
    15f8:	4b15      	ldr	r3, [pc, #84]	; (1650 <ModemDiagTask+0x1e8>)
    15fa:	4798      	blx	r3
    15fc:	2801      	cmp	r0, #1
    15fe:	d1eb      	bne.n	15d8 <ModemDiagTask+0x170>
            switch(ModemDiagState)
    1600:	4b07      	ldr	r3, [pc, #28]	; (1620 <ModemDiagTask+0x1b8>)
    1602:	781b      	ldrb	r3, [r3, #0]
    1604:	2b03      	cmp	r3, #3
    1606:	d8e0      	bhi.n	15ca <ModemDiagTask+0x162>
    1608:	a201      	add	r2, pc, #4	; (adr r2, 1610 <ModemDiagTask+0x1a8>)
    160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    160e:	bf00      	nop
    1610:	0000149b 	.word	0x0000149b
    1614:	000014e7 	.word	0x000014e7
    1618:	00001533 	.word	0x00001533
    161c:	0000157f 	.word	0x0000157f
    1620:	20003ca8 	.word	0x20003ca8
    1624:	20000200 	.word	0x20000200
    1628:	00001719 	.word	0x00001719
    162c:	20003484 	.word	0x20003484
    1630:	000056cd 	.word	0x000056cd
    1634:	00004991 	.word	0x00004991
    1638:	00007850 	.word	0x00007850
    163c:	00001c69 	.word	0x00001c69
    1640:	00007830 	.word	0x00007830
    1644:	2000348c 	.word	0x2000348c
    1648:	00001dad 	.word	0x00001dad
    164c:	00005009 	.word	0x00005009
    1650:	00004e29 	.word	0x00004e29

00001654 <ModemDiagUpdateDataBase>:
{
    1654:	b570      	push	{r4, r5, r6, lr}
    1656:	4604      	mov	r4, r0
    switch(cmd)
    1658:	780b      	ldrb	r3, [r1, #0]
    165a:	3b01      	subs	r3, #1
    165c:	2b06      	cmp	r3, #6
    165e:	d827      	bhi.n	16b0 <ModemDiagUpdateDataBase+0x5c>
    1660:	e8df f003 	tbb	[pc, r3]
    1664:	26253326 	.word	0x26253326
    1668:	2626      	.short	0x2626
    166a:	04          	.byte	0x04
    166b:	00          	.byte	0x00
			while(parseCnt <= (cmdResponse->length - startIndex))
    166c:	884b      	ldrh	r3, [r1, #2]
    166e:	2b07      	cmp	r3, #7
    1670:	d40d      	bmi.n	168e <ModemDiagUpdateDataBase+0x3a>
    1672:	2200      	movs	r2, #0
    1674:	4613      	mov	r3, r2
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
    1676:	4d1f      	ldr	r5, [pc, #124]	; (16f4 <ModemDiagUpdateDataBase+0xa0>)
    1678:	18a0      	adds	r0, r4, r2
    167a:	79c0      	ldrb	r0, [r0, #7]
    167c:	442a      	add	r2, r5
    167e:	7610      	strb	r0, [r2, #24]
				parseCnt++;
    1680:	3301      	adds	r3, #1
    1682:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
    1684:	461a      	mov	r2, r3
    1686:	8848      	ldrh	r0, [r1, #2]
    1688:	3807      	subs	r0, #7
    168a:	4283      	cmp	r3, r0
    168c:	ddf4      	ble.n	1678 <ModemDiagUpdateDataBase+0x24>
			bModemDiagDataBaseUpdated = true;
    168e:	4d19      	ldr	r5, [pc, #100]	; (16f4 <ModemDiagUpdateDataBase+0xa0>)
    1690:	2601      	movs	r6, #1
    1692:	462c      	mov	r4, r5
    1694:	f804 6b18 	strb.w	r6, [r4], #24
			DEBUG_PRINT("Retrieved the Modem serial Number");
    1698:	4817      	ldr	r0, [pc, #92]	; (16f8 <ModemDiagUpdateDataBase+0xa4>)
    169a:	4b18      	ldr	r3, [pc, #96]	; (16fc <ModemDiagUpdateDataBase+0xa8>)
    169c:	4798      	blx	r3
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
    169e:	210f      	movs	r1, #15
    16a0:	4620      	mov	r0, r4
    16a2:	4c17      	ldr	r4, [pc, #92]	; (1700 <ModemDiagUpdateDataBase+0xac>)
    16a4:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    16a6:	2102      	movs	r1, #2
    16a8:	4816      	ldr	r0, [pc, #88]	; (1704 <ModemDiagUpdateDataBase+0xb0>)
    16aa:	47a0      	blx	r4
			bModemDiagDataBaseUpdated = true;
    16ac:	702e      	strb	r6, [r5, #0]
    16ae:	bd70      	pop	{r4, r5, r6, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
    16b0:	4b10      	ldr	r3, [pc, #64]	; (16f4 <ModemDiagUpdateDataBase+0xa0>)
    16b2:	1d18      	adds	r0, r3, #4
    16b4:	8821      	ldrh	r1, [r4, #0]
    16b6:	78a2      	ldrb	r2, [r4, #2]
    16b8:	8099      	strh	r1, [r3, #4]
    16ba:	7082      	strb	r2, [r0, #2]
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
    16bc:	2103      	movs	r1, #3
    16be:	4c10      	ldr	r4, [pc, #64]	; (1700 <ModemDiagUpdateDataBase+0xac>)
    16c0:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    16c2:	2102      	movs	r1, #2
    16c4:	480f      	ldr	r0, [pc, #60]	; (1704 <ModemDiagUpdateDataBase+0xb0>)
    16c6:	47a0      	blx	r4
        break;
    16c8:	bd70      	pop	{r4, r5, r6, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
    16ca:	4e0a      	ldr	r6, [pc, #40]	; (16f4 <ModemDiagUpdateDataBase+0xa0>)
    16cc:	f106 0508 	add.w	r5, r6, #8
    16d0:	6800      	ldr	r0, [r0, #0]
    16d2:	6861      	ldr	r1, [r4, #4]
    16d4:	68a2      	ldr	r2, [r4, #8]
    16d6:	68e3      	ldr	r3, [r4, #12]
    16d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
    16da:	480b      	ldr	r0, [pc, #44]	; (1708 <ModemDiagUpdateDataBase+0xb4>)
    16dc:	4b07      	ldr	r3, [pc, #28]	; (16fc <ModemDiagUpdateDataBase+0xa8>)
    16de:	4798      	blx	r3
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
    16e0:	2110      	movs	r1, #16
    16e2:	f106 0008 	add.w	r0, r6, #8
    16e6:	4c06      	ldr	r4, [pc, #24]	; (1700 <ModemDiagUpdateDataBase+0xac>)
    16e8:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    16ea:	2102      	movs	r1, #2
    16ec:	4805      	ldr	r0, [pc, #20]	; (1704 <ModemDiagUpdateDataBase+0xb0>)
    16ee:	47a0      	blx	r4
        break;
    16f0:	bd70      	pop	{r4, r5, r6, pc}
    16f2:	bf00      	nop
    16f4:	20000200 	.word	0x20000200
    16f8:	00007898 	.word	0x00007898
    16fc:	00001c69 	.word	0x00001c69
    1700:	00001c25 	.word	0x00001c25
    1704:	00007c0c 	.word	0x00007c0c
    1708:	00007878 	.word	0x00007878

0000170c <isModemDiagDataBaseUpdated>:
*
********************************************************************************/
bool isModemDiagDataBaseUpdated(void)
{
	return bModemDiagDataBaseUpdated;
}
    170c:	4b01      	ldr	r3, [pc, #4]	; (1714 <isModemDiagDataBaseUpdated+0x8>)
    170e:	7818      	ldrb	r0, [r3, #0]
    1710:	4770      	bx	lr
    1712:	bf00      	nop
    1714:	20000200 	.word	0x20000200

00001718 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
    1718:	4b01      	ldr	r3, [pc, #4]	; (1720 <getModemPowerStatus+0x8>)
    171a:	7818      	ldrb	r0, [r3, #0]
    171c:	4770      	bx	lr
    171e:	bf00      	nop
    1720:	2000022c 	.word	0x2000022c

00001724 <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_SHUTDOWN;
    1724:	4b03      	ldr	r3, [pc, #12]	; (1734 <modemPowerStateInit+0x10>)
    1726:	2200      	movs	r2, #0
    1728:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    172a:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
    172c:	2201      	movs	r2, #1
    172e:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    1730:	70da      	strb	r2, [r3, #3]
    1732:	4770      	bx	lr
    1734:	2000022c 	.word	0x2000022c

00001738 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
    1738:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemSigInitDelay = pdMS_TO_TICKS(500UL);
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);

    switch(ModemPwrState)
    173a:	4b5d      	ldr	r3, [pc, #372]	; (18b0 <modemPowerSchedule+0x178>)
    173c:	781b      	ldrb	r3, [r3, #0]
    173e:	2b06      	cmp	r3, #6
    1740:	f000 8089 	beq.w	1856 <modemPowerSchedule+0x11e>
    1744:	2b07      	cmp	r3, #7
    1746:	d054      	beq.n	17f2 <modemPowerSchedule+0xba>
    1748:	b103      	cbz	r3, 174c <modemPowerSchedule+0x14>
    174a:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
    174c:	4b58      	ldr	r3, [pc, #352]	; (18b0 <modemPowerSchedule+0x178>)
    174e:	785b      	ldrb	r3, [r3, #1]
    1750:	2b03      	cmp	r3, #3
    1752:	d8fa      	bhi.n	174a <modemPowerSchedule+0x12>
    1754:	e8df f003 	tbb	[pc, r3]
    1758:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    175c:	4b55      	ldr	r3, [pc, #340]	; (18b4 <modemPowerSchedule+0x17c>)
    175e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1766:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    176a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    176e:	4c52      	ldr	r4, [pc, #328]	; (18b8 <modemPowerSchedule+0x180>)
    1770:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1774:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    1778:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    177c:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1780:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1784:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    1788:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    178a:	6299      	str	r1, [r3, #40]	; 0x28
    178c:	484b      	ldr	r0, [pc, #300]	; (18bc <modemPowerSchedule+0x184>)
    178e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1790:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    1794:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1798:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    179c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    179e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    17a0:	6299      	str	r1, [r3, #40]	; 0x28
    17a2:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    17a4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
    17a8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    17ac:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    17b0:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
    17b2:	2201      	movs	r2, #1
    17b4:	4b3e      	ldr	r3, [pc, #248]	; (18b0 <modemPowerSchedule+0x178>)
    17b6:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
    17b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    17bc:	4b40      	ldr	r3, [pc, #256]	; (18c0 <modemPowerSchedule+0x188>)
    17be:	4798      	blx	r3
                }
                break;
    17c0:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    17c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    17c6:	4b3b      	ldr	r3, [pc, #236]	; (18b4 <modemPowerSchedule+0x17c>)
    17c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
    17cc:	2202      	movs	r2, #2
    17ce:	4b38      	ldr	r3, [pc, #224]	; (18b0 <modemPowerSchedule+0x178>)
    17d0:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
    17d2:	2032      	movs	r0, #50	; 0x32
    17d4:	4b3a      	ldr	r3, [pc, #232]	; (18c0 <modemPowerSchedule+0x188>)
    17d6:	4798      	blx	r3
                }
                break;
    17d8:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
    17da:	2203      	movs	r2, #3
    17dc:	4b34      	ldr	r3, [pc, #208]	; (18b0 <modemPowerSchedule+0x178>)
    17de:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
    17e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
    17e4:	4b36      	ldr	r3, [pc, #216]	; (18c0 <modemPowerSchedule+0x188>)
    17e6:	4798      	blx	r3
                }
                break;
    17e8:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
    17ea:	2204      	movs	r2, #4
    17ec:	4b30      	ldr	r3, [pc, #192]	; (18b0 <modemPowerSchedule+0x178>)
    17ee:	701a      	strb	r2, [r3, #0]
                }
                break;
    17f0:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
    17f2:	4b2f      	ldr	r3, [pc, #188]	; (18b0 <modemPowerSchedule+0x178>)
    17f4:	789b      	ldrb	r3, [r3, #2]
    17f6:	b113      	cbz	r3, 17fe <modemPowerSchedule+0xc6>
    17f8:	2b01      	cmp	r3, #1
    17fa:	d017      	beq.n	182c <modemPowerSchedule+0xf4>
    17fc:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    17fe:	4b2d      	ldr	r3, [pc, #180]	; (18b4 <modemPowerSchedule+0x17c>)
    1800:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    1804:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    180a:	629a      	str	r2, [r3, #40]	; 0x28
    180c:	4a2b      	ldr	r2, [pc, #172]	; (18bc <modemPowerSchedule+0x184>)
    180e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1810:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    1814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1818:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    181c:	6199      	str	r1, [r3, #24]
                case MDM_PWR_RESET_ASSERT:
                {
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
    181e:	2201      	movs	r2, #1
    1820:	4b23      	ldr	r3, [pc, #140]	; (18b0 <modemPowerSchedule+0x178>)
    1822:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
    1824:	2019      	movs	r0, #25
    1826:	4b26      	ldr	r3, [pc, #152]	; (18c0 <modemPowerSchedule+0x188>)
    1828:	4798      	blx	r3
                }
                break;
    182a:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    182c:	4b21      	ldr	r3, [pc, #132]	; (18b4 <modemPowerSchedule+0x17c>)
    182e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    1832:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1838:	629a      	str	r2, [r3, #40]	; 0x28
    183a:	4a20      	ldr	r2, [pc, #128]	; (18bc <modemPowerSchedule+0x184>)
    183c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    183e:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    1842:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1846:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    184a:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
    184c:	4b18      	ldr	r3, [pc, #96]	; (18b0 <modemPowerSchedule+0x178>)
    184e:	2200      	movs	r2, #0
    1850:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    1852:	705a      	strb	r2, [r3, #1]
                }
                break;
    1854:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
    1856:	4b16      	ldr	r3, [pc, #88]	; (18b0 <modemPowerSchedule+0x178>)
    1858:	78db      	ldrb	r3, [r3, #3]
    185a:	2b00      	cmp	r3, #0
    185c:	f47f af75 	bne.w	174a <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1860:	4b14      	ldr	r3, [pc, #80]	; (18b4 <modemPowerSchedule+0x17c>)
    1862:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1866:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    186a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    186e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    1872:	4a11      	ldr	r2, [pc, #68]	; (18b8 <modemPowerSchedule+0x180>)
    1874:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1878:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    187c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1880:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1884:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1888:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    188c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    188e:	6298      	str	r0, [r3, #40]	; 0x28
    1890:	4a0a      	ldr	r2, [pc, #40]	; (18bc <modemPowerSchedule+0x184>)
    1892:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1894:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    1898:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    189c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    18a0:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    18a2:	2201      	movs	r2, #1
    18a4:	4b02      	ldr	r3, [pc, #8]	; (18b0 <modemPowerSchedule+0x178>)
    18a6:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
    18a8:	2019      	movs	r0, #25
    18aa:	4b05      	ldr	r3, [pc, #20]	; (18c0 <modemPowerSchedule+0x188>)
    18ac:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
    18ae:	e74c      	b.n	174a <modemPowerSchedule+0x12>
    18b0:	2000022c 	.word	0x2000022c
    18b4:	41008000 	.word	0x41008000
    18b8:	c0000001 	.word	0xc0000001
    18bc:	c0000008 	.word	0xc0000008
    18c0:	000056cd 	.word	0x000056cd

000018c4 <SystemAutoRestartTimerCallBack>:
        }
    }
}

static void SystemAutoRestartTimerCallBack(void* param)
{
    18c4:	b508      	push	{r3, lr}
	SerialDebugPrint("Hourly System Restart timer expired. Rebooting the system.\r\n",60);
    18c6:	213c      	movs	r1, #60	; 0x3c
    18c8:	4802      	ldr	r0, [pc, #8]	; (18d4 <SystemAutoRestartTimerCallBack+0x10>)
    18ca:	4b03      	ldr	r3, [pc, #12]	; (18d8 <SystemAutoRestartTimerCallBack+0x14>)
    18cc:	4798      	blx	r3
	requestWatchDogForcedReset();
    18ce:	4b03      	ldr	r3, [pc, #12]	; (18dc <SystemAutoRestartTimerCallBack+0x18>)
    18d0:	4798      	blx	r3
    18d2:	bd08      	pop	{r3, pc}
    18d4:	000078bc 	.word	0x000078bc
    18d8:	00001c25 	.word	0x00001c25
    18dc:	00001ded 	.word	0x00001ded

000018e0 <ModemProcessTask>:
{
    18e0:	b570      	push	{r4, r5, r6, lr}
    18e2:	b082      	sub	sp, #8
    modemPowerStateInit();
    18e4:	4b16      	ldr	r3, [pc, #88]	; (1940 <ModemProcessTask+0x60>)
    18e6:	4798      	blx	r3
    MdmConnect_HttpConnectionInit();
    18e8:	4b16      	ldr	r3, [pc, #88]	; (1944 <ModemProcessTask+0x64>)
    18ea:	4798      	blx	r3
    xAutoReloadHourlyTimer = xTimerCreate("HourlySystemRestartTimer",HOURLY_RESTART_TIMER_LOAD_VALUE,pdTRUE,0,SystemAutoRestartTimerCallBack);
    18ec:	4b16      	ldr	r3, [pc, #88]	; (1948 <ModemProcessTask+0x68>)
    18ee:	9300      	str	r3, [sp, #0]
    18f0:	2300      	movs	r3, #0
    18f2:	2201      	movs	r2, #1
    18f4:	f64e 2160 	movw	r1, #60000	; 0xea60
    18f8:	4814      	ldr	r0, [pc, #80]	; (194c <ModemProcessTask+0x6c>)
    18fa:	4c15      	ldr	r4, [pc, #84]	; (1950 <ModemProcessTask+0x70>)
    18fc:	47a0      	blx	r4
    if(xAutoReloadHourlyTimer != NULL)
    18fe:	b178      	cbz	r0, 1920 <ModemProcessTask+0x40>
    1900:	4604      	mov	r4, r0
    	if(pdPASS == xTimerStart(xAutoReloadHourlyTimer,0))
    1902:	4b14      	ldr	r3, [pc, #80]	; (1954 <ModemProcessTask+0x74>)
    1904:	4798      	blx	r3
    1906:	2300      	movs	r3, #0
    1908:	9300      	str	r3, [sp, #0]
    190a:	4602      	mov	r2, r0
    190c:	2101      	movs	r1, #1
    190e:	4620      	mov	r0, r4
    1910:	4c11      	ldr	r4, [pc, #68]	; (1958 <ModemProcessTask+0x78>)
    1912:	47a0      	blx	r4
    1914:	2801      	cmp	r0, #1
    1916:	d103      	bne.n	1920 <ModemProcessTask+0x40>
    		SerialDebugPrint("Hourly Modem Restart timer is started.\r\n",40);
    1918:	2128      	movs	r1, #40	; 0x28
    191a:	4810      	ldr	r0, [pc, #64]	; (195c <ModemProcessTask+0x7c>)
    191c:	4b10      	ldr	r3, [pc, #64]	; (1960 <ModemProcessTask+0x80>)
    191e:	4798      	blx	r3
        modemPowerSchedule();
    1920:	4d10      	ldr	r5, [pc, #64]	; (1964 <ModemProcessTask+0x84>)
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1922:	4c11      	ldr	r4, [pc, #68]	; (1968 <ModemProcessTask+0x88>)
            MdmConnect_HttpConnectionSchedule();
    1924:	4e11      	ldr	r6, [pc, #68]	; (196c <ModemProcessTask+0x8c>)
        modemPowerSchedule();
    1926:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1928:	47a0      	blx	r4
    192a:	2804      	cmp	r0, #4
    192c:	d1fb      	bne.n	1926 <ModemProcessTask+0x46>
            MdmConnect_HttpConnectionSchedule();
    192e:	47b0      	blx	r6
			kickWatchDog();
    1930:	4b0f      	ldr	r3, [pc, #60]	; (1970 <ModemProcessTask+0x90>)
    1932:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    1934:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1938:	4b0e      	ldr	r3, [pc, #56]	; (1974 <ModemProcessTask+0x94>)
    193a:	4798      	blx	r3
    193c:	e7f3      	b.n	1926 <ModemProcessTask+0x46>
    193e:	bf00      	nop
    1940:	00001725 	.word	0x00001725
    1944:	000005b1 	.word	0x000005b1
    1948:	000018c5 	.word	0x000018c5
    194c:	000078fc 	.word	0x000078fc
    1950:	00005e8d 	.word	0x00005e8d
    1954:	000053e1 	.word	0x000053e1
    1958:	00005ee1 	.word	0x00005ee1
    195c:	00007918 	.word	0x00007918
    1960:	00001c25 	.word	0x00001c25
    1964:	00001739 	.word	0x00001739
    1968:	00001719 	.word	0x00001719
    196c:	00000c89 	.word	0x00000c89
    1970:	00001dad 	.word	0x00001dad
    1974:	000056cd 	.word	0x000056cd

00001978 <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
    1978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    197a:	4607      	mov	r7, r0
    197c:	460c      	mov	r4, r1
    197e:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
    1980:	492d      	ldr	r1, [pc, #180]	; (1a38 <modemResponseHandler+0xc0>)
    1982:	4b2e      	ldr	r3, [pc, #184]	; (1a3c <modemResponseHandler+0xc4>)
    1984:	4798      	blx	r3

    if(response != NULL)
    1986:	2c00      	cmp	r4, #0
    1988:	d052      	beq.n	1a30 <modemResponseHandler+0xb8>
    {
        switch (cmdData.cmdSet)
    198a:	4b2b      	ldr	r3, [pc, #172]	; (1a38 <modemResponseHandler+0xc0>)
    198c:	785b      	ldrb	r3, [r3, #1]
    198e:	b113      	cbz	r3, 1996 <modemResponseHandler+0x1e>
    1990:	2b01      	cmp	r3, #1
    1992:	d016      	beq.n	19c2 <modemResponseHandler+0x4a>
    1994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
    1996:	4e28      	ldr	r6, [pc, #160]	; (1a38 <modemResponseHandler+0xc0>)
    1998:	7537      	strb	r7, [r6, #20]
            	cmdResponse.length = length;
    199a:	82f5      	strh	r5, [r6, #22]
            	memset(responseBuffer,0,700);
    199c:	f106 071c 	add.w	r7, r6, #28
    19a0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
    19a4:	2100      	movs	r1, #0
    19a6:	4638      	mov	r0, r7
    19a8:	4b25      	ldr	r3, [pc, #148]	; (1a40 <modemResponseHandler+0xc8>)
    19aa:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
    19ac:	462a      	mov	r2, r5
    19ae:	4621      	mov	r1, r4
    19b0:	4638      	mov	r0, r7
    19b2:	4b24      	ldr	r3, [pc, #144]	; (1a44 <modemResponseHandler+0xcc>)
    19b4:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
    19b6:	f106 0114 	add.w	r1, r6, #20
    19ba:	4638      	mov	r0, r7
    19bc:	4b22      	ldr	r3, [pc, #136]	; (1a48 <modemResponseHandler+0xd0>)
    19be:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
    19c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if( xSemaphoreTake( DebugPrintMutex,portMAX_DELAY) == pdTRUE )
    19c2:	f04f 31ff 	mov.w	r1, #4294967295
    19c6:	4b21      	ldr	r3, [pc, #132]	; (1a4c <modemResponseHandler+0xd4>)
    19c8:	6818      	ldr	r0, [r3, #0]
    19ca:	4b21      	ldr	r3, [pc, #132]	; (1a50 <modemResponseHandler+0xd8>)
    19cc:	4798      	blx	r3
    19ce:	2801      	cmp	r0, #1
    19d0:	d01f      	beq.n	1a12 <modemResponseHandler+0x9a>
                {
                	DEBUG_PRINT("Received Connection response in handle");
                	xSemaphoreGive(DebugPrintMutex);
                }

                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
    19d2:	4b20      	ldr	r3, [pc, #128]	; (1a54 <modemResponseHandler+0xdc>)
    19d4:	6818      	ldr	r0, [r3, #0]
    19d6:	4b20      	ldr	r3, [pc, #128]	; (1a58 <modemResponseHandler+0xe0>)
    19d8:	4798      	blx	r3
    19da:	bb28      	cbnz	r0, 1a28 <modemResponseHandler+0xb0>
                {
                	cmdResponse.atCmd = cmd;
    19dc:	4e16      	ldr	r6, [pc, #88]	; (1a38 <modemResponseHandler+0xc0>)
    19de:	7537      	strb	r7, [r6, #20]
                	cmdResponse.length = length;
    19e0:	82f5      	strh	r5, [r6, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    19e2:	4628      	mov	r0, r5
    19e4:	4b1d      	ldr	r3, [pc, #116]	; (1a5c <modemResponseHandler+0xe4>)
    19e6:	4798      	blx	r3
    19e8:	61b0      	str	r0, [r6, #24]

                	if(cmdResponse.response != NULL)
    19ea:	b320      	cbz	r0, 1a36 <modemResponseHandler+0xbe>
                	{
                		memcpy(cmdResponse.response,response,length);
    19ec:	462a      	mov	r2, r5
    19ee:	4621      	mov	r1, r4
    19f0:	4b14      	ldr	r3, [pc, #80]	; (1a44 <modemResponseHandler+0xcc>)
    19f2:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
    19f4:	2300      	movs	r3, #0
    19f6:	2264      	movs	r2, #100	; 0x64
    19f8:	f106 0114 	add.w	r1, r6, #20
    19fc:	4815      	ldr	r0, [pc, #84]	; (1a54 <modemResponseHandler+0xdc>)
    19fe:	6800      	ldr	r0, [r0, #0]
    1a00:	4c17      	ldr	r4, [pc, #92]	; (1a60 <modemResponseHandler+0xe8>)
    1a02:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
    1a04:	2801      	cmp	r0, #1
                		{
                			DEBUG_PRINT("Successfully posted connection Response to Queue");
    1a06:	bf0c      	ite	eq
    1a08:	4816      	ldreq	r0, [pc, #88]	; (1a64 <modemResponseHandler+0xec>)
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
    1a0a:	4817      	ldrne	r0, [pc, #92]	; (1a68 <modemResponseHandler+0xf0>)
    1a0c:	4b17      	ldr	r3, [pc, #92]	; (1a6c <modemResponseHandler+0xf4>)
    1a0e:	4798      	blx	r3
    1a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                	DEBUG_PRINT("Received Connection response in handle");
    1a12:	4817      	ldr	r0, [pc, #92]	; (1a70 <modemResponseHandler+0xf8>)
    1a14:	4b15      	ldr	r3, [pc, #84]	; (1a6c <modemResponseHandler+0xf4>)
    1a16:	4798      	blx	r3
                	xSemaphoreGive(DebugPrintMutex);
    1a18:	2300      	movs	r3, #0
    1a1a:	461a      	mov	r2, r3
    1a1c:	4619      	mov	r1, r3
    1a1e:	480b      	ldr	r0, [pc, #44]	; (1a4c <modemResponseHandler+0xd4>)
    1a20:	6800      	ldr	r0, [r0, #0]
    1a22:	4e0f      	ldr	r6, [pc, #60]	; (1a60 <modemResponseHandler+0xe8>)
    1a24:	47b0      	blx	r6
    1a26:	e7d4      	b.n	19d2 <modemResponseHandler+0x5a>
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    1a28:	4812      	ldr	r0, [pc, #72]	; (1a74 <modemResponseHandler+0xfc>)
    1a2a:	4b10      	ldr	r3, [pc, #64]	; (1a6c <modemResponseHandler+0xf4>)
    1a2c:	4798      	blx	r3
    1a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
    1a30:	4811      	ldr	r0, [pc, #68]	; (1a78 <modemResponseHandler+0x100>)
    1a32:	4b0e      	ldr	r3, [pc, #56]	; (1a6c <modemResponseHandler+0xf4>)
    1a34:	4798      	blx	r3
    1a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a38:	20000230 	.word	0x20000230
    1a3c:	00000361 	.word	0x00000361
    1a40:	00006271 	.word	0x00006271
    1a44:	00006227 	.word	0x00006227
    1a48:	00001655 	.word	0x00001655
    1a4c:	20003488 	.word	0x20003488
    1a50:	00004e29 	.word	0x00004e29
    1a54:	20003460 	.word	0x20003460
    1a58:	00005009 	.word	0x00005009
    1a5c:	00004595 	.word	0x00004595
    1a60:	00004991 	.word	0x00004991
    1a64:	0000796c 	.word	0x0000796c
    1a68:	000079a0 	.word	0x000079a0
    1a6c:	00001c69 	.word	0x00001c69
    1a70:	00007944 	.word	0x00007944
    1a74:	000079d0 	.word	0x000079d0
    1a78:	000079fc 	.word	0x000079fc

00001a7c <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Apps/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
    1a7c:	b570      	push	{r4, r5, r6, lr}
    1a7e:	b086      	sub	sp, #24

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    1a80:	4c0f      	ldr	r4, [pc, #60]	; (1ac0 <ModemRxTask+0x44>)
		
		if(xResult == pdPASS)
		{
			getModemCommandData(atCmd, &cmdData);
    1a82:	4e10      	ldr	r6, [pc, #64]	; (1ac4 <ModemRxTask+0x48>)
			DEBUG_PRINT("Notification Received to Rx Task from ISR");
    1a84:	4d10      	ldr	r5, [pc, #64]	; (1ac8 <ModemRxTask+0x4c>)
    1a86:	e001      	b.n	1a8c <ModemRxTask+0x10>
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
		}
		kickWatchDog();
    1a88:	4b10      	ldr	r3, [pc, #64]	; (1acc <ModemRxTask+0x50>)
    1a8a:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    1a8c:	f04f 33ff 	mov.w	r3, #4294967295
    1a90:	f10d 0217 	add.w	r2, sp, #23
    1a94:	4619      	mov	r1, r3
    1a96:	2000      	movs	r0, #0
    1a98:	47a0      	blx	r4
		if(xResult == pdPASS)
    1a9a:	2801      	cmp	r0, #1
    1a9c:	d1f4      	bne.n	1a88 <ModemRxTask+0xc>
			getModemCommandData(atCmd, &cmdData);
    1a9e:	4669      	mov	r1, sp
    1aa0:	f89d 0017 	ldrb.w	r0, [sp, #23]
    1aa4:	47b0      	blx	r6
			DEBUG_PRINT("Notification Received to Rx Task from ISR");
    1aa6:	4628      	mov	r0, r5
    1aa8:	4b09      	ldr	r3, [pc, #36]	; (1ad0 <ModemRxTask+0x54>)
    1aaa:	4798      	blx	r3
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    1aac:	f89d 0000 	ldrb.w	r0, [sp]
    1ab0:	4b08      	ldr	r3, [pc, #32]	; (1ad4 <ModemRxTask+0x58>)
    1ab2:	4798      	blx	r3
    1ab4:	2800      	cmp	r0, #0
    1ab6:	d1e7      	bne.n	1a88 <ModemRxTask+0xc>
				DEBUG_PRINT("ERROR: Command Parsing Failed");
    1ab8:	4807      	ldr	r0, [pc, #28]	; (1ad8 <ModemRxTask+0x5c>)
    1aba:	4b05      	ldr	r3, [pc, #20]	; (1ad0 <ModemRxTask+0x54>)
    1abc:	4798      	blx	r3
    1abe:	e7e3      	b.n	1a88 <ModemRxTask+0xc>
    1ac0:	00005bcd 	.word	0x00005bcd
    1ac4:	00000361 	.word	0x00000361
    1ac8:	00007b94 	.word	0x00007b94
    1acc:	00001dad 	.word	0x00001dad
    1ad0:	00001c69 	.word	0x00001c69
    1ad4:	0000045d 	.word	0x0000045d
    1ad8:	00007bc0 	.word	0x00007bc0

00001adc <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
    1adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(100UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
    1ade:	2300      	movs	r3, #0
    1ae0:	461a      	mov	r2, r3
    1ae2:	4619      	mov	r1, r3
    1ae4:	481f      	ldr	r0, [pc, #124]	; (1b64 <ModemTxTask+0x88>)
    1ae6:	6800      	ldr	r0, [r0, #0]
    1ae8:	4c1f      	ldr	r4, [pc, #124]	; (1b68 <ModemTxTask+0x8c>)
    1aea:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1aec:	4c1f      	ldr	r4, [pc, #124]	; (1b6c <ModemTxTask+0x90>)
	
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
		{
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    1aee:	4d20      	ldr	r5, [pc, #128]	; (1b70 <ModemTxTask+0x94>)
** Description:        Transmits Data to Modem
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	getModemCommandData(atCmd, &ModemCmdData);
    1af0:	f105 0608 	add.w	r6, r5, #8
    1af4:	e004      	b.n	1b00 <ModemTxTask+0x24>
			kickWatchDog();
    1af6:	4b1f      	ldr	r3, [pc, #124]	; (1b74 <ModemTxTask+0x98>)
    1af8:	4798      	blx	r3
			vTaskDelay(xDelayMs);
    1afa:	2064      	movs	r0, #100	; 0x64
    1afc:	4b1e      	ldr	r3, [pc, #120]	; (1b78 <ModemTxTask+0x9c>)
    1afe:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1b00:	47a0      	blx	r4
    1b02:	2804      	cmp	r0, #4
    1b04:	d1fc      	bne.n	1b00 <ModemTxTask+0x24>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
    1b06:	4b1d      	ldr	r3, [pc, #116]	; (1b7c <ModemTxTask+0xa0>)
    1b08:	6818      	ldr	r0, [r3, #0]
    1b0a:	4b1d      	ldr	r3, [pc, #116]	; (1b80 <ModemTxTask+0xa4>)
    1b0c:	4798      	blx	r3
    1b0e:	2800      	cmp	r0, #0
    1b10:	d0f1      	beq.n	1af6 <ModemTxTask+0x1a>
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1b12:	2100      	movs	r1, #0
    1b14:	4b13      	ldr	r3, [pc, #76]	; (1b64 <ModemTxTask+0x88>)
    1b16:	6818      	ldr	r0, [r3, #0]
    1b18:	4b1a      	ldr	r3, [pc, #104]	; (1b84 <ModemTxTask+0xa8>)
    1b1a:	4798      	blx	r3
    1b1c:	2801      	cmp	r0, #1
    1b1e:	d1ea      	bne.n	1af6 <ModemTxTask+0x1a>
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    1b20:	2264      	movs	r2, #100	; 0x64
    1b22:	4629      	mov	r1, r5
    1b24:	4b15      	ldr	r3, [pc, #84]	; (1b7c <ModemTxTask+0xa0>)
    1b26:	6818      	ldr	r0, [r3, #0]
    1b28:	4b17      	ldr	r3, [pc, #92]	; (1b88 <ModemTxTask+0xac>)
    1b2a:	4798      	blx	r3
			if(xResult == pdPASS)
    1b2c:	2801      	cmp	r0, #1
    1b2e:	d1e2      	bne.n	1af6 <ModemTxTask+0x1a>
				ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
    1b30:	786f      	ldrb	r7, [r5, #1]
	getModemCommandData(atCmd, &ModemCmdData);
    1b32:	4631      	mov	r1, r6
    1b34:	4638      	mov	r0, r7
    1b36:	4b15      	ldr	r3, [pc, #84]	; (1b8c <ModemTxTask+0xb0>)
    1b38:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
    1b3a:	4b15      	ldr	r3, [pc, #84]	; (1b90 <ModemTxTask+0xb4>)
    1b3c:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
    1b3e:	7c29      	ldrb	r1, [r5, #16]
    1b40:	68e8      	ldr	r0, [r5, #12]
    1b42:	4b14      	ldr	r3, [pc, #80]	; (1b94 <ModemTxTask+0xb8>)
    1b44:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
    1b46:	4638      	mov	r0, r7
    1b48:	4b13      	ldr	r3, [pc, #76]	; (1b98 <ModemTxTask+0xbc>)
    1b4a:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
    1b4c:	2000      	movs	r0, #0
    1b4e:	4b13      	ldr	r3, [pc, #76]	; (1b9c <ModemTxTask+0xc0>)
    1b50:	4798      	blx	r3
				xSemaphoreGive(AtTxQueueLoadSemaphore);				
    1b52:	2300      	movs	r3, #0
    1b54:	461a      	mov	r2, r3
    1b56:	4619      	mov	r1, r3
    1b58:	4802      	ldr	r0, [pc, #8]	; (1b64 <ModemTxTask+0x88>)
    1b5a:	6800      	ldr	r0, [r0, #0]
    1b5c:	4f02      	ldr	r7, [pc, #8]	; (1b68 <ModemTxTask+0x8c>)
    1b5e:	47b8      	blx	r7
    1b60:	e7c9      	b.n	1af6 <ModemTxTask+0x1a>
    1b62:	bf00      	nop
    1b64:	2000348c 	.word	0x2000348c
    1b68:	00004991 	.word	0x00004991
    1b6c:	00001719 	.word	0x00001719
    1b70:	2000050c 	.word	0x2000050c
    1b74:	00001dad 	.word	0x00001dad
    1b78:	000056cd 	.word	0x000056cd
    1b7c:	20003484 	.word	0x20003484
    1b80:	00005009 	.word	0x00005009
    1b84:	00004e29 	.word	0x00004e29
    1b88:	00004ca1 	.word	0x00004ca1
    1b8c:	00000361 	.word	0x00000361
    1b90:	00001455 	.word	0x00001455
    1b94:	000013d9 	.word	0x000013d9
    1b98:	00000559 	.word	0x00000559
    1b9c:	0000054d 	.word	0x0000054d

00001ba0 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
    1ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1ba4:	4604      	mov	r4, r0
    1ba6:	460e      	mov	r6, r1
    1ba8:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
    1baa:	4d0e      	ldr	r5, [pc, #56]	; (1be4 <usart_async_write+0x44>)
    1bac:	4620      	mov	r0, r4
    1bae:	47a8      	blx	r5
    1bb0:	2800      	cmp	r0, #0
    1bb2:	d0fb      	beq.n	1bac <usart_async_write+0xc>
    1bb4:	3e01      	subs	r6, #1
    1bb6:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1be8 <usart_async_write+0x48>
    1bba:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
    1bbc:	f8df a02c 	ldr.w	sl, [pc, #44]	; 1bec <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
    1bc0:	4d08      	ldr	r5, [pc, #32]	; (1be4 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
    1bc2:	7873      	ldrb	r3, [r6, #1]
    1bc4:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
    1bc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1bcc:	4620      	mov	r0, r4
    1bce:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
    1bd0:	4620      	mov	r0, r4
    1bd2:	47a8      	blx	r5
    1bd4:	2800      	cmp	r0, #0
    1bd6:	d0fb      	beq.n	1bd0 <usart_async_write+0x30>
		;
	} while (++offset < length);
    1bd8:	3701      	adds	r7, #1
    1bda:	454f      	cmp	r7, r9
    1bdc:	d3f1      	bcc.n	1bc2 <usart_async_write+0x22>

	return (int32_t)offset;
}
    1bde:	4638      	mov	r0, r7
    1be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1be4:	000034a7 	.word	0x000034a7
    1be8:	20000528 	.word	0x20000528
    1bec:	00003499 	.word	0x00003499

00001bf0 <SerialDebugTxByteSentCallBack>:
    1bf0:	2302      	movs	r3, #2
    1bf2:	7603      	strb	r3, [r0, #24]
    1bf4:	4770      	bx	lr

00001bf6 <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1bf6:	2380      	movs	r3, #128	; 0x80
    1bf8:	7603      	strb	r3, [r0, #24]
    1bfa:	4770      	bx	lr

00001bfc <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
    1bfc:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
    1bfe:	4c05      	ldr	r4, [pc, #20]	; (1c14 <SerialDebugPrintInit+0x18>)
    1c00:	4905      	ldr	r1, [pc, #20]	; (1c18 <SerialDebugPrintInit+0x1c>)
    1c02:	4620      	mov	r0, r4
    1c04:	4b05      	ldr	r3, [pc, #20]	; (1c1c <SerialDebugPrintInit+0x20>)
    1c06:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
    1c08:	2201      	movs	r2, #1
    1c0a:	4611      	mov	r1, r2
    1c0c:	4620      	mov	r0, r4
    1c0e:	4b04      	ldr	r3, [pc, #16]	; (1c20 <SerialDebugPrintInit+0x24>)
    1c10:	4798      	blx	r3
    1c12:	bd10      	pop	{r4, pc}
    1c14:	20000040 	.word	0x20000040
    1c18:	43000400 	.word	0x43000400
    1c1c:	00003411 	.word	0x00003411
    1c20:	000034bd 	.word	0x000034bd

00001c24 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
    1c24:	b570      	push	{r4, r5, r6, lr}
    1c26:	4605      	mov	r5, r0
    1c28:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
    1c2a:	4c05      	ldr	r4, [pc, #20]	; (1c40 <SerialDebugPrint+0x1c>)
    1c2c:	4620      	mov	r0, r4
    1c2e:	4b05      	ldr	r3, [pc, #20]	; (1c44 <SerialDebugPrint+0x20>)
    1c30:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
    1c32:	4632      	mov	r2, r6
    1c34:	4629      	mov	r1, r5
    1c36:	4620      	mov	r0, r4
    1c38:	4b03      	ldr	r3, [pc, #12]	; (1c48 <SerialDebugPrint+0x24>)
    1c3a:	4798      	blx	r3
    1c3c:	bd70      	pop	{r4, r5, r6, pc}
    1c3e:	bf00      	nop
    1c40:	20000040 	.word	0x20000040
    1c44:	00003485 	.word	0x00003485
    1c48:	00001ba1 	.word	0x00001ba1

00001c4c <SerialDebugTxDoneCallBack>:
{
    1c4c:	b510      	push	{r4, lr}
    1c4e:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    1c50:	2116      	movs	r1, #22
    1c52:	4803      	ldr	r0, [pc, #12]	; (1c60 <SerialDebugTxDoneCallBack+0x14>)
    1c54:	4b03      	ldr	r3, [pc, #12]	; (1c64 <SerialDebugTxDoneCallBack+0x18>)
    1c56:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    1c58:	2301      	movs	r3, #1
    1c5a:	7623      	strb	r3, [r4, #24]
    1c5c:	bd10      	pop	{r4, pc}
    1c5e:	bf00      	nop
    1c60:	00007be0 	.word	0x00007be0
    1c64:	00001c25 	.word	0x00001c25

00001c68 <SerialStringPrint>:
}


void SerialStringPrint(const uint8_t *const dataToPrint)
{
    1c68:	4770      	bx	lr
	...

00001c6c <ConsoleDebugPrint>:
	
	#endif
}

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
    1c6c:	b530      	push	{r4, r5, lr}
    1c6e:	b09b      	sub	sp, #108	; 0x6c
    1c70:	4605      	mov	r5, r0
    1c72:	460c      	mov	r4, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
    1c74:	2264      	movs	r2, #100	; 0x64
    1c76:	2100      	movs	r1, #0
    1c78:	a801      	add	r0, sp, #4
    1c7a:	4b09      	ldr	r3, [pc, #36]	; (1ca0 <ConsoleDebugPrint+0x34>)
    1c7c:	4798      	blx	r3

	if(intData != 0)
    1c7e:	b90c      	cbnz	r4, 1c84 <ConsoleDebugPrint+0x18>
	{
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
	}
}
    1c80:	b01b      	add	sp, #108	; 0x6c
    1c82:	bd30      	pop	{r4, r5, pc}
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    1c84:	4623      	mov	r3, r4
    1c86:	462a      	mov	r2, r5
    1c88:	4906      	ldr	r1, [pc, #24]	; (1ca4 <ConsoleDebugPrint+0x38>)
    1c8a:	a801      	add	r0, sp, #4
    1c8c:	4c06      	ldr	r4, [pc, #24]	; (1ca8 <ConsoleDebugPrint+0x3c>)
    1c8e:	47a0      	blx	r4
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    1c90:	a801      	add	r0, sp, #4
    1c92:	4b06      	ldr	r3, [pc, #24]	; (1cac <ConsoleDebugPrint+0x40>)
    1c94:	4798      	blx	r3
    1c96:	b281      	uxth	r1, r0
    1c98:	a801      	add	r0, sp, #4
    1c9a:	4b05      	ldr	r3, [pc, #20]	; (1cb0 <ConsoleDebugPrint+0x44>)
    1c9c:	4798      	blx	r3
}
    1c9e:	e7ef      	b.n	1c80 <ConsoleDebugPrint+0x14>
    1ca0:	00006271 	.word	0x00006271
    1ca4:	00007c04 	.word	0x00007c04
    1ca8:	000063f9 	.word	0x000063f9
    1cac:	00006451 	.word	0x00006451
    1cb0:	00001c25 	.word	0x00001c25

00001cb4 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    1cb4:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    1cb6:	2204      	movs	r2, #4
    1cb8:	4b0b      	ldr	r3, [pc, #44]	; (1ce8 <SERCOM5_2_Handler+0x34>)
    1cba:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    1cbc:	4d0b      	ldr	r5, [pc, #44]	; (1cec <SERCOM5_2_Handler+0x38>)
    1cbe:	4c0c      	ldr	r4, [pc, #48]	; (1cf0 <SERCOM5_2_Handler+0x3c>)
    1cc0:	4628      	mov	r0, r5
    1cc2:	47a0      	blx	r4
    1cc4:	2800      	cmp	r0, #0
    1cc6:	d0fb      	beq.n	1cc0 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    1cc8:	4808      	ldr	r0, [pc, #32]	; (1cec <SERCOM5_2_Handler+0x38>)
    1cca:	4b0a      	ldr	r3, [pc, #40]	; (1cf4 <SERCOM5_2_Handler+0x40>)
    1ccc:	4798      	blx	r3
    1cce:	490a      	ldr	r1, [pc, #40]	; (1cf8 <SERCOM5_2_Handler+0x44>)
    1cd0:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    1cd2:	2300      	movs	r3, #0
    1cd4:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    1cd6:	4c09      	ldr	r4, [pc, #36]	; (1cfc <SERCOM5_2_Handler+0x48>)
    1cd8:	4620      	mov	r0, r4
    1cda:	4b09      	ldr	r3, [pc, #36]	; (1d00 <SERCOM5_2_Handler+0x4c>)
    1cdc:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    1cde:	2105      	movs	r1, #5
    1ce0:	4620      	mov	r0, r4
    1ce2:	4b08      	ldr	r3, [pc, #32]	; (1d04 <SERCOM5_2_Handler+0x50>)
    1ce4:	4798      	blx	r3
    1ce6:	bd38      	pop	{r3, r4, r5, pc}
    1ce8:	43000400 	.word	0x43000400
    1cec:	20000040 	.word	0x20000040
    1cf0:	000034b1 	.word	0x000034b1
    1cf4:	0000349f 	.word	0x0000349f
    1cf8:	20003cac 	.word	0x20003cac
    1cfc:	20003cb0 	.word	0x20003cb0
    1d00:	00006441 	.word	0x00006441
    1d04:	00001c25 	.word	0x00001c25

00001d08 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    1d08:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    1d0a:	4b0a      	ldr	r3, [pc, #40]	; (1d34 <configureWatchDogTimeOut+0x2c>)
    1d0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1d10:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    1d12:	4c09      	ldr	r4, [pc, #36]	; (1d38 <configureWatchDogTimeOut+0x30>)
    1d14:	6820      	ldr	r0, [r4, #0]
    1d16:	2279      	movs	r2, #121	; 0x79
    1d18:	4908      	ldr	r1, [pc, #32]	; (1d3c <configureWatchDogTimeOut+0x34>)
    1d1a:	3000      	adds	r0, #0
    1d1c:	bf18      	it	ne
    1d1e:	2001      	movne	r0, #1
    1d20:	4b07      	ldr	r3, [pc, #28]	; (1d40 <configureWatchDogTimeOut+0x38>)
    1d22:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    1d24:	462a      	mov	r2, r5
    1d26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    1d2a:	4620      	mov	r0, r4
    1d2c:	4b05      	ldr	r3, [pc, #20]	; (1d44 <configureWatchDogTimeOut+0x3c>)
    1d2e:	4798      	blx	r3
    1d30:	bd38      	pop	{r3, r4, r5, pc}
    1d32:	bf00      	nop
    1d34:	2000005c 	.word	0x2000005c
    1d38:	20003d8c 	.word	0x20003d8c
    1d3c:	00007c10 	.word	0x00007c10
    1d40:	00002991 	.word	0x00002991
    1d44:	00003e5d 	.word	0x00003e5d

00001d48 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    1d48:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    1d4a:	2002      	movs	r0, #2
    1d4c:	4b07      	ldr	r3, [pc, #28]	; (1d6c <enableWatchDogTimer+0x24>)
    1d4e:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1d50:	4c07      	ldr	r4, [pc, #28]	; (1d70 <enableWatchDogTimer+0x28>)
    1d52:	6820      	ldr	r0, [r4, #0]
    1d54:	2296      	movs	r2, #150	; 0x96
    1d56:	4907      	ldr	r1, [pc, #28]	; (1d74 <enableWatchDogTimer+0x2c>)
    1d58:	3000      	adds	r0, #0
    1d5a:	bf18      	it	ne
    1d5c:	2001      	movne	r0, #1
    1d5e:	4b06      	ldr	r3, [pc, #24]	; (1d78 <enableWatchDogTimer+0x30>)
    1d60:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    1d62:	4620      	mov	r0, r4
    1d64:	4b05      	ldr	r3, [pc, #20]	; (1d7c <enableWatchDogTimer+0x34>)
    1d66:	4798      	blx	r3
    1d68:	bd10      	pop	{r4, pc}
    1d6a:	bf00      	nop
    1d6c:	00001d09 	.word	0x00001d09
    1d70:	20003d8c 	.word	0x20003d8c
    1d74:	00007c10 	.word	0x00007c10
    1d78:	00002991 	.word	0x00002991
    1d7c:	00003f79 	.word	0x00003f79

00001d80 <atmel_start_init>:
{
    1d80:	b508      	push	{r3, lr}
    system_init();
    1d82:	4b06      	ldr	r3, [pc, #24]	; (1d9c <atmel_start_init+0x1c>)
    1d84:	4798      	blx	r3
    delay_ms(1000);
    1d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1d8a:	4b05      	ldr	r3, [pc, #20]	; (1da0 <atmel_start_init+0x20>)
    1d8c:	4798      	blx	r3
    ForcedResetRequested = WDT_FORCED_RESET_OFF;
    1d8e:	2201      	movs	r2, #1
    1d90:	4b04      	ldr	r3, [pc, #16]	; (1da4 <atmel_start_init+0x24>)
    1d92:	731a      	strb	r2, [r3, #12]
    enableWatchDogTimer();
    1d94:	4b04      	ldr	r3, [pc, #16]	; (1da8 <atmel_start_init+0x28>)
    1d96:	4798      	blx	r3
    1d98:	bd08      	pop	{r3, pc}
    1d9a:	bf00      	nop
    1d9c:	00002549 	.word	0x00002549
    1da0:	00002739 	.word	0x00002739
    1da4:	2000005c 	.word	0x2000005c
    1da8:	00001d49 	.word	0x00001d49

00001dac <kickWatchDog>:
********************************************************************************/
int32_t kickWatchDog(void)
{	
	int32_t status = ERR_NONE;

	if(WDT_FORCED_RESET_OFF == ForcedResetRequested)
    1dac:	4b0a      	ldr	r3, [pc, #40]	; (1dd8 <kickWatchDog+0x2c>)
    1dae:	7b1b      	ldrb	r3, [r3, #12]
    1db0:	2b01      	cmp	r3, #1
    1db2:	d10d      	bne.n	1dd0 <kickWatchDog+0x24>
{	
    1db4:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1db6:	4c09      	ldr	r4, [pc, #36]	; (1ddc <kickWatchDog+0x30>)
    1db8:	6820      	ldr	r0, [r4, #0]
    1dba:	22b3      	movs	r2, #179	; 0xb3
    1dbc:	4908      	ldr	r1, [pc, #32]	; (1de0 <kickWatchDog+0x34>)
    1dbe:	3000      	adds	r0, #0
    1dc0:	bf18      	it	ne
    1dc2:	2001      	movne	r0, #1
    1dc4:	4b07      	ldr	r3, [pc, #28]	; (1de4 <kickWatchDog+0x38>)
    1dc6:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    1dc8:	4620      	mov	r0, r4
    1dca:	4b07      	ldr	r3, [pc, #28]	; (1de8 <kickWatchDog+0x3c>)
    1dcc:	4798      	blx	r3
    1dce:	bd10      	pop	{r4, pc}
	{
		status = wdt_feed(&WDT_0);
	}
	else
	{
		status = ERR_DENIED;
    1dd0:	f06f 0010 	mvn.w	r0, #16
	}

	return status;
    1dd4:	4770      	bx	lr
    1dd6:	bf00      	nop
    1dd8:	2000005c 	.word	0x2000005c
    1ddc:	20003d8c 	.word	0x20003d8c
    1de0:	00007c10 	.word	0x00007c10
    1de4:	00002991 	.word	0x00002991
    1de8:	00003fb5 	.word	0x00003fb5

00001dec <requestWatchDogForcedReset>:
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
void requestWatchDogForcedReset(void)
{
	ForcedResetRequested = WDT_FORCED_RESET_ON;
    1dec:	2200      	movs	r2, #0
    1dee:	4b01      	ldr	r3, [pc, #4]	; (1df4 <requestWatchDogForcedReset+0x8>)
    1df0:	731a      	strb	r2, [r3, #12]
    1df2:	4770      	bx	lr
    1df4:	2000005c 	.word	0x2000005c

00001df8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1df8:	e7fe      	b.n	1df8 <Dummy_Handler>
	...

00001dfc <Reset_Handler>:
{
    1dfc:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    1dfe:	4b1c      	ldr	r3, [pc, #112]	; (1e70 <Reset_Handler+0x74>)
    1e00:	4a1c      	ldr	r2, [pc, #112]	; (1e74 <Reset_Handler+0x78>)
    1e02:	429a      	cmp	r2, r3
    1e04:	d010      	beq.n	1e28 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    1e06:	4b1c      	ldr	r3, [pc, #112]	; (1e78 <Reset_Handler+0x7c>)
    1e08:	4a19      	ldr	r2, [pc, #100]	; (1e70 <Reset_Handler+0x74>)
    1e0a:	429a      	cmp	r2, r3
    1e0c:	d20c      	bcs.n	1e28 <Reset_Handler+0x2c>
    1e0e:	3b01      	subs	r3, #1
    1e10:	1a9b      	subs	r3, r3, r2
    1e12:	f023 0303 	bic.w	r3, r3, #3
    1e16:	3304      	adds	r3, #4
    1e18:	4413      	add	r3, r2
    1e1a:	4916      	ldr	r1, [pc, #88]	; (1e74 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    1e1c:	f851 0b04 	ldr.w	r0, [r1], #4
    1e20:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    1e24:	429a      	cmp	r2, r3
    1e26:	d1f9      	bne.n	1e1c <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    1e28:	4b14      	ldr	r3, [pc, #80]	; (1e7c <Reset_Handler+0x80>)
    1e2a:	4a15      	ldr	r2, [pc, #84]	; (1e80 <Reset_Handler+0x84>)
    1e2c:	429a      	cmp	r2, r3
    1e2e:	d20a      	bcs.n	1e46 <Reset_Handler+0x4a>
    1e30:	3b01      	subs	r3, #1
    1e32:	1a9b      	subs	r3, r3, r2
    1e34:	f023 0303 	bic.w	r3, r3, #3
    1e38:	3304      	adds	r3, #4
    1e3a:	4413      	add	r3, r2
                *pDest++ = 0;
    1e3c:	2100      	movs	r1, #0
    1e3e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1e42:	4293      	cmp	r3, r2
    1e44:	d1fb      	bne.n	1e3e <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1e46:	4b0f      	ldr	r3, [pc, #60]	; (1e84 <Reset_Handler+0x88>)
    1e48:	4a0f      	ldr	r2, [pc, #60]	; (1e88 <Reset_Handler+0x8c>)
    1e4a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1e4e:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    1e50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1e54:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    1e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1e5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e60:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    1e64:	4b09      	ldr	r3, [pc, #36]	; (1e8c <Reset_Handler+0x90>)
    1e66:	4798      	blx	r3
        main();
    1e68:	4b09      	ldr	r3, [pc, #36]	; (1e90 <Reset_Handler+0x94>)
    1e6a:	4798      	blx	r3
    1e6c:	e7fe      	b.n	1e6c <Reset_Handler+0x70>
    1e6e:	bf00      	nop
    1e70:	20000000 	.word	0x20000000
    1e74:	00008368 	.word	0x00008368
    1e78:	20000190 	.word	0x20000190
    1e7c:	20003e78 	.word	0x20003e78
    1e80:	20000190 	.word	0x20000190
    1e84:	e000ed00 	.word	0xe000ed00
    1e88:	00000000 	.word	0x00000000
    1e8c:	000061c1 	.word	0x000061c1
    1e90:	0000406d 	.word	0x0000406d

00001e94 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
    1e94:	4a04      	ldr	r2, [pc, #16]	; (1ea8 <AC_0_CLOCK_init+0x14>)
    1e96:	69d3      	ldr	r3, [r2, #28]
    1e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1e9c:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1e9e:	2240      	movs	r2, #64	; 0x40
    1ea0:	4b02      	ldr	r3, [pc, #8]	; (1eac <AC_0_CLOCK_init+0x18>)
    1ea2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    1ea6:	4770      	bx	lr
    1ea8:	40000800 	.word	0x40000800
    1eac:	40001c00 	.word	0x40001c00

00001eb0 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
    1eb0:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
    1eb2:	4b03      	ldr	r3, [pc, #12]	; (1ec0 <AC_0_init+0x10>)
    1eb4:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
    1eb6:	4903      	ldr	r1, [pc, #12]	; (1ec4 <AC_0_init+0x14>)
    1eb8:	4803      	ldr	r0, [pc, #12]	; (1ec8 <AC_0_init+0x18>)
    1eba:	4b04      	ldr	r3, [pc, #16]	; (1ecc <AC_0_init+0x1c>)
    1ebc:	4798      	blx	r3
    1ebe:	bd08      	pop	{r3, pc}
    1ec0:	00001e95 	.word	0x00001e95
    1ec4:	42002000 	.word	0x42002000
    1ec8:	20003d58 	.word	0x20003d58
    1ecc:	00002669 	.word	0x00002669

00001ed0 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ed0:	4b5d      	ldr	r3, [pc, #372]	; (2048 <ADC_0_PORT_init+0x178>)
    1ed2:	2204      	movs	r2, #4
    1ed4:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ed6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1eda:	629a      	str	r2, [r3, #40]	; 0x28
    1edc:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1ee0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ee2:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ee6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1eea:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1eee:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1ef2:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1ef6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1efa:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1efe:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f02:	2108      	movs	r1, #8
    1f04:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f06:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1f0a:	6299      	str	r1, [r3, #40]	; 0x28
    1f0c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f0e:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f12:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f16:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f1a:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f1e:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1f22:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1f26:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f2a:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
    1f32:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f36:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1f3a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1f3e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f42:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f46:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f4a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f4e:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f52:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1f56:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1f5a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f5e:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f62:	f44f 7100 	mov.w	r1, #512	; 0x200
    1f66:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f6a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1f6e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1f72:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f76:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f7a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f7e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f82:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f86:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1f8a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1f8e:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f92:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f96:	2110      	movs	r1, #16
    1f98:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f9a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1f9e:	6299      	str	r1, [r3, #40]	; 0x28
    1fa0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1fa2:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    1fa6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1faa:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1fae:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1fb2:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1fb6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1fba:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1fbe:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1fc2:	2120      	movs	r1, #32
    1fc4:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1fc6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1fca:	6299      	str	r1, [r3, #40]	; 0x28
    1fcc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1fce:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    1fd2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1fd6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1fda:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1fde:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1fe2:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1fe6:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1fea:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1fee:	2140      	movs	r1, #64	; 0x40
    1ff0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ff2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1ff6:	6299      	str	r1, [r3, #40]	; 0x28
    1ff8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ffa:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ffe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2002:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2006:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    200a:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    200e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2012:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2016:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    201a:	2180      	movs	r1, #128	; 0x80
    201c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    201e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2022:	6299      	str	r1, [r3, #40]	; 0x28
    2024:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2026:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    202a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    202e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2032:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2036:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    203a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    203e:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2042:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    2046:	4770      	bx	lr
    2048:	41008000 	.word	0x41008000

0000204c <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    204c:	4a04      	ldr	r2, [pc, #16]	; (2060 <ADC_0_CLOCK_init+0x14>)
    204e:	6a13      	ldr	r3, [r2, #32]
    2050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2054:	6213      	str	r3, [r2, #32]
    2056:	2241      	movs	r2, #65	; 0x41
    2058:	4b02      	ldr	r3, [pc, #8]	; (2064 <ADC_0_CLOCK_init+0x18>)
    205a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    205e:	4770      	bx	lr
    2060:	40000800 	.word	0x40000800
    2064:	40001c00 	.word	0x40001c00

00002068 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    2068:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    206a:	4b05      	ldr	r3, [pc, #20]	; (2080 <ADC_0_init+0x18>)
    206c:	4798      	blx	r3
	ADC_0_PORT_init();
    206e:	4b05      	ldr	r3, [pc, #20]	; (2084 <ADC_0_init+0x1c>)
    2070:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    2072:	2200      	movs	r2, #0
    2074:	4904      	ldr	r1, [pc, #16]	; (2088 <ADC_0_init+0x20>)
    2076:	4805      	ldr	r0, [pc, #20]	; (208c <ADC_0_init+0x24>)
    2078:	4b05      	ldr	r3, [pc, #20]	; (2090 <ADC_0_init+0x28>)
    207a:	4798      	blx	r3
    207c:	bd08      	pop	{r3, pc}
    207e:	bf00      	nop
    2080:	0000204d 	.word	0x0000204d
    2084:	00001ed1 	.word	0x00001ed1
    2088:	43001c00 	.word	0x43001c00
    208c:	20003d68 	.word	0x20003d68
    2090:	00002699 	.word	0x00002699

00002094 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    2094:	4a04      	ldr	r2, [pc, #16]	; (20a8 <ADC_1_CLOCK_init+0x14>)
    2096:	6a13      	ldr	r3, [r2, #32]
    2098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    209c:	6213      	str	r3, [r2, #32]
    209e:	2240      	movs	r2, #64	; 0x40
    20a0:	4b02      	ldr	r3, [pc, #8]	; (20ac <ADC_1_CLOCK_init+0x18>)
    20a2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    20a6:	4770      	bx	lr
    20a8:	40000800 	.word	0x40000800
    20ac:	40001c00 	.word	0x40001c00

000020b0 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
    20b0:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
    20b2:	4b04      	ldr	r3, [pc, #16]	; (20c4 <ADC_1_init+0x14>)
    20b4:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
    20b6:	2200      	movs	r2, #0
    20b8:	4903      	ldr	r1, [pc, #12]	; (20c8 <ADC_1_init+0x18>)
    20ba:	4804      	ldr	r0, [pc, #16]	; (20cc <ADC_1_init+0x1c>)
    20bc:	4b04      	ldr	r3, [pc, #16]	; (20d0 <ADC_1_init+0x20>)
    20be:	4798      	blx	r3
    20c0:	bd08      	pop	{r3, pc}
    20c2:	bf00      	nop
    20c4:	00002095 	.word	0x00002095
    20c8:	43002000 	.word	0x43002000
    20cc:	20003e20 	.word	0x20003e20
    20d0:	00002699 	.word	0x00002699

000020d4 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    20d4:	4a04      	ldr	r2, [pc, #16]	; (20e8 <DAC_0_CLOCK_init+0x14>)
    20d6:	6a13      	ldr	r3, [r2, #32]
    20d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    20dc:	6213      	str	r3, [r2, #32]
    20de:	2240      	movs	r2, #64	; 0x40
    20e0:	4b02      	ldr	r3, [pc, #8]	; (20ec <DAC_0_CLOCK_init+0x18>)
    20e2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    20e6:	4770      	bx	lr
    20e8:	40000800 	.word	0x40000800
    20ec:	40001c00 	.word	0x40001c00

000020f0 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    20f0:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    20f2:	4b03      	ldr	r3, [pc, #12]	; (2100 <DAC_0_init+0x10>)
    20f4:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    20f6:	4903      	ldr	r1, [pc, #12]	; (2104 <DAC_0_init+0x14>)
    20f8:	4803      	ldr	r0, [pc, #12]	; (2108 <DAC_0_init+0x18>)
    20fa:	4b04      	ldr	r3, [pc, #16]	; (210c <DAC_0_init+0x1c>)
    20fc:	4798      	blx	r3
    20fe:	bd08      	pop	{r3, pc}
    2100:	000020d5 	.word	0x000020d5
    2104:	43002400 	.word	0x43002400
    2108:	20003d90 	.word	0x20003d90
    210c:	000026e5 	.word	0x000026e5

00002110 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    2110:	b508      	push	{r3, lr}
    2112:	2240      	movs	r2, #64	; 0x40
    2114:	4b05      	ldr	r3, [pc, #20]	; (212c <EXTERNAL_IRQ_0_init+0x1c>)
    2116:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    211a:	4a05      	ldr	r2, [pc, #20]	; (2130 <EXTERNAL_IRQ_0_init+0x20>)
    211c:	6953      	ldr	r3, [r2, #20]
    211e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2122:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    2124:	4b03      	ldr	r3, [pc, #12]	; (2134 <EXTERNAL_IRQ_0_init+0x24>)
    2126:	4798      	blx	r3
    2128:	bd08      	pop	{r3, pc}
    212a:	bf00      	nop
    212c:	40001c00 	.word	0x40001c00
    2130:	40000800 	.word	0x40000800
    2134:	0000279d 	.word	0x0000279d

00002138 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    2138:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    213a:	4a04      	ldr	r2, [pc, #16]	; (214c <EVENT_SYSTEM_0_init+0x14>)
    213c:	6993      	ldr	r3, [r2, #24]
    213e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2142:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    2144:	4b02      	ldr	r3, [pc, #8]	; (2150 <EVENT_SYSTEM_0_init+0x18>)
    2146:	4798      	blx	r3
    2148:	bd08      	pop	{r3, pc}
    214a:	bf00      	nop
    214c:	40000800 	.word	0x40000800
    2150:	00002759 	.word	0x00002759

00002154 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    2154:	4a02      	ldr	r2, [pc, #8]	; (2160 <FLASH_0_CLOCK_init+0xc>)
    2156:	6913      	ldr	r3, [r2, #16]
    2158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    215c:	6113      	str	r3, [r2, #16]
    215e:	4770      	bx	lr
    2160:	40000800 	.word	0x40000800

00002164 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    2164:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    2166:	4b03      	ldr	r3, [pc, #12]	; (2174 <FLASH_0_init+0x10>)
    2168:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    216a:	4903      	ldr	r1, [pc, #12]	; (2178 <FLASH_0_init+0x14>)
    216c:	4803      	ldr	r0, [pc, #12]	; (217c <FLASH_0_init+0x18>)
    216e:	4b04      	ldr	r3, [pc, #16]	; (2180 <FLASH_0_init+0x1c>)
    2170:	4798      	blx	r3
    2172:	bd08      	pop	{r3, pc}
    2174:	00002155 	.word	0x00002155
    2178:	41004000 	.word	0x41004000
    217c:	20003d1c 	.word	0x20003d1c
    2180:	000027d5 	.word	0x000027d5

00002184 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2184:	4b10      	ldr	r3, [pc, #64]	; (21c8 <ModemData_PORT_init+0x44>)
    2186:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    218a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    218e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2192:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2196:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    219a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    219e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    21a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    21a6:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    21aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    21ae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    21b2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    21b6:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    21ba:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    21be:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    21c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    21c6:	4770      	bx	lr
    21c8:	41008000 	.word	0x41008000

000021cc <ModemData_CLOCK_init>:
    21cc:	4b06      	ldr	r3, [pc, #24]	; (21e8 <ModemData_CLOCK_init+0x1c>)
    21ce:	2240      	movs	r2, #64	; 0x40
    21d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    21d4:	224a      	movs	r2, #74	; 0x4a
    21d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    21da:	4a04      	ldr	r2, [pc, #16]	; (21ec <ModemData_CLOCK_init+0x20>)
    21dc:	6993      	ldr	r3, [r2, #24]
    21de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    21e2:	6193      	str	r3, [r2, #24]
    21e4:	4770      	bx	lr
    21e6:	bf00      	nop
    21e8:	40001c00 	.word	0x40001c00
    21ec:	40000800 	.word	0x40000800

000021f0 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    21f0:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    21f2:	4b03      	ldr	r3, [pc, #12]	; (2200 <ModemData_init+0x10>)
    21f4:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    21f6:	4b03      	ldr	r3, [pc, #12]	; (2204 <ModemData_init+0x14>)
    21f8:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    21fa:	4b03      	ldr	r3, [pc, #12]	; (2208 <ModemData_init+0x18>)
    21fc:	4798      	blx	r3
    21fe:	bd08      	pop	{r3, pc}
    2200:	000021cd 	.word	0x000021cd
    2204:	0000129d 	.word	0x0000129d
    2208:	00002185 	.word	0x00002185

0000220c <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    220c:	4b10      	ldr	r3, [pc, #64]	; (2250 <SerialDebug_PORT_init+0x44>)
    220e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    2212:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2216:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    221a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    221e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2222:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2226:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    222a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    222e:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    2232:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2236:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    223a:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    223e:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2242:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2246:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    224a:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    224e:	4770      	bx	lr
    2250:	41008000 	.word	0x41008000

00002254 <SerialDebug_CLOCK_init>:
    2254:	4b06      	ldr	r3, [pc, #24]	; (2270 <SerialDebug_CLOCK_init+0x1c>)
    2256:	2240      	movs	r2, #64	; 0x40
    2258:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    225c:	224a      	movs	r2, #74	; 0x4a
    225e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2262:	4a04      	ldr	r2, [pc, #16]	; (2274 <SerialDebug_CLOCK_init+0x20>)
    2264:	6a13      	ldr	r3, [r2, #32]
    2266:	f043 0302 	orr.w	r3, r3, #2
    226a:	6213      	str	r3, [r2, #32]
    226c:	4770      	bx	lr
    226e:	bf00      	nop
    2270:	40001c00 	.word	0x40001c00
    2274:	40000800 	.word	0x40000800

00002278 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    2278:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    227a:	4b03      	ldr	r3, [pc, #12]	; (2288 <SerialDebug_init+0x10>)
    227c:	4798      	blx	r3
	SerialDebugPrintInit();
    227e:	4b03      	ldr	r3, [pc, #12]	; (228c <SerialDebug_init+0x14>)
    2280:	4798      	blx	r3
	SerialDebug_PORT_init();
    2282:	4b03      	ldr	r3, [pc, #12]	; (2290 <SerialDebug_init+0x18>)
    2284:	4798      	blx	r3
    2286:	bd08      	pop	{r3, pc}
    2288:	00002255 	.word	0x00002255
    228c:	00001bfd 	.word	0x00001bfd
    2290:	0000220d 	.word	0x0000220d

00002294 <delay_driver_init>:
}

void delay_driver_init(void)
{
    2294:	b508      	push	{r3, lr}
	delay_init(SysTick);
    2296:	4802      	ldr	r0, [pc, #8]	; (22a0 <delay_driver_init+0xc>)
    2298:	4b02      	ldr	r3, [pc, #8]	; (22a4 <delay_driver_init+0x10>)
    229a:	4798      	blx	r3
    229c:	bd08      	pop	{r3, pc}
    229e:	bf00      	nop
    22a0:	e000e010 	.word	0xe000e010
    22a4:	00002725 	.word	0x00002725

000022a8 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    22a8:	4a04      	ldr	r2, [pc, #16]	; (22bc <PWM_0_CLOCK_init+0x14>)
    22aa:	6953      	ldr	r3, [r2, #20]
    22ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    22b0:	6153      	str	r3, [r2, #20]
    22b2:	2240      	movs	r2, #64	; 0x40
    22b4:	4b02      	ldr	r3, [pc, #8]	; (22c0 <PWM_0_CLOCK_init+0x18>)
    22b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    22ba:	4770      	bx	lr
    22bc:	40000800 	.word	0x40000800
    22c0:	40001c00 	.word	0x40001c00

000022c4 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    22c4:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    22c6:	4b05      	ldr	r3, [pc, #20]	; (22dc <PWM_0_init+0x18>)
    22c8:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    22ca:	4b05      	ldr	r3, [pc, #20]	; (22e0 <PWM_0_init+0x1c>)
    22cc:	4798      	blx	r3
    22ce:	4602      	mov	r2, r0
    22d0:	4904      	ldr	r1, [pc, #16]	; (22e4 <PWM_0_init+0x20>)
    22d2:	4805      	ldr	r0, [pc, #20]	; (22e8 <PWM_0_init+0x24>)
    22d4:	4b05      	ldr	r3, [pc, #20]	; (22ec <PWM_0_init+0x28>)
    22d6:	4798      	blx	r3
    22d8:	bd08      	pop	{r3, pc}
    22da:	bf00      	nop
    22dc:	000022a9 	.word	0x000022a9
    22e0:	00003d75 	.word	0x00003d75
    22e4:	40003800 	.word	0x40003800
    22e8:	20003ce4 	.word	0x20003ce4
    22ec:	00002831 	.word	0x00002831

000022f0 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    22f0:	4a04      	ldr	r2, [pc, #16]	; (2304 <PWM_1_CLOCK_init+0x14>)
    22f2:	6953      	ldr	r3, [r2, #20]
    22f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    22f8:	6153      	str	r3, [r2, #20]
    22fa:	2240      	movs	r2, #64	; 0x40
    22fc:	4b02      	ldr	r3, [pc, #8]	; (2308 <PWM_1_CLOCK_init+0x18>)
    22fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    2302:	4770      	bx	lr
    2304:	40000800 	.word	0x40000800
    2308:	40001c00 	.word	0x40001c00

0000230c <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    230c:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    230e:	4b05      	ldr	r3, [pc, #20]	; (2324 <PWM_1_init+0x18>)
    2310:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    2312:	4b05      	ldr	r3, [pc, #20]	; (2328 <PWM_1_init+0x1c>)
    2314:	4798      	blx	r3
    2316:	4602      	mov	r2, r0
    2318:	4904      	ldr	r1, [pc, #16]	; (232c <PWM_1_init+0x20>)
    231a:	4805      	ldr	r0, [pc, #20]	; (2330 <PWM_1_init+0x24>)
    231c:	4b05      	ldr	r3, [pc, #20]	; (2334 <PWM_1_init+0x28>)
    231e:	4798      	blx	r3
    2320:	bd08      	pop	{r3, pc}
    2322:	bf00      	nop
    2324:	000022f1 	.word	0x000022f1
    2328:	00003d75 	.word	0x00003d75
    232c:	40003c00 	.word	0x40003c00
    2330:	20003e04 	.word	0x20003e04
    2334:	00002831 	.word	0x00002831

00002338 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2338:	4a04      	ldr	r2, [pc, #16]	; (234c <PWM_2_CLOCK_init+0x14>)
    233a:	6993      	ldr	r3, [r2, #24]
    233c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2340:	6193      	str	r3, [r2, #24]
    2342:	2240      	movs	r2, #64	; 0x40
    2344:	4b02      	ldr	r3, [pc, #8]	; (2350 <PWM_2_CLOCK_init+0x18>)
    2346:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    234a:	4770      	bx	lr
    234c:	40000800 	.word	0x40000800
    2350:	40001c00 	.word	0x40001c00

00002354 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    2354:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    2356:	4b05      	ldr	r3, [pc, #20]	; (236c <PWM_2_init+0x18>)
    2358:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    235a:	4b05      	ldr	r3, [pc, #20]	; (2370 <PWM_2_init+0x1c>)
    235c:	4798      	blx	r3
    235e:	4602      	mov	r2, r0
    2360:	4904      	ldr	r1, [pc, #16]	; (2374 <PWM_2_init+0x20>)
    2362:	4805      	ldr	r0, [pc, #20]	; (2378 <PWM_2_init+0x24>)
    2364:	4b05      	ldr	r3, [pc, #20]	; (237c <PWM_2_init+0x28>)
    2366:	4798      	blx	r3
    2368:	bd08      	pop	{r3, pc}
    236a:	bf00      	nop
    236c:	00002339 	.word	0x00002339
    2370:	00003d75 	.word	0x00003d75
    2374:	4101a000 	.word	0x4101a000
    2378:	20003d00 	.word	0x20003d00
    237c:	00002831 	.word	0x00002831

00002380 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    2380:	4a04      	ldr	r2, [pc, #16]	; (2394 <TIMER_3_CLOCK_init+0x14>)
    2382:	6993      	ldr	r3, [r2, #24]
    2384:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    2388:	6193      	str	r3, [r2, #24]
    238a:	2240      	movs	r2, #64	; 0x40
    238c:	4b02      	ldr	r3, [pc, #8]	; (2398 <TIMER_3_CLOCK_init+0x18>)
    238e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    2392:	4770      	bx	lr
    2394:	40000800 	.word	0x40000800
    2398:	40001c00 	.word	0x40001c00

0000239c <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    239c:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    239e:	4b05      	ldr	r3, [pc, #20]	; (23b4 <TIMER_3_init+0x18>)
    23a0:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    23a2:	4b05      	ldr	r3, [pc, #20]	; (23b8 <TIMER_3_init+0x1c>)
    23a4:	4798      	blx	r3
    23a6:	4602      	mov	r2, r0
    23a8:	4904      	ldr	r1, [pc, #16]	; (23bc <TIMER_3_init+0x20>)
    23aa:	4805      	ldr	r0, [pc, #20]	; (23c0 <TIMER_3_init+0x24>)
    23ac:	4b05      	ldr	r3, [pc, #20]	; (23c4 <TIMER_3_init+0x28>)
    23ae:	4798      	blx	r3
    23b0:	bd08      	pop	{r3, pc}
    23b2:	bf00      	nop
    23b4:	00002381 	.word	0x00002381
    23b8:	0000382d 	.word	0x0000382d
    23bc:	41016000 	.word	0x41016000
    23c0:	20003e24 	.word	0x20003e24
    23c4:	0000294d 	.word	0x0000294d

000023c8 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    23c8:	4a04      	ldr	r2, [pc, #16]	; (23dc <TIMER_4_CLOCK_init+0x14>)
    23ca:	6993      	ldr	r3, [r2, #24]
    23cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    23d0:	6193      	str	r3, [r2, #24]
    23d2:	2240      	movs	r2, #64	; 0x40
    23d4:	4b02      	ldr	r3, [pc, #8]	; (23e0 <TIMER_4_CLOCK_init+0x18>)
    23d6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    23da:	4770      	bx	lr
    23dc:	40000800 	.word	0x40000800
    23e0:	40001c00 	.word	0x40001c00

000023e4 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    23e4:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    23e6:	4b05      	ldr	r3, [pc, #20]	; (23fc <TIMER_4_init+0x18>)
    23e8:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    23ea:	4b05      	ldr	r3, [pc, #20]	; (2400 <TIMER_4_init+0x1c>)
    23ec:	4798      	blx	r3
    23ee:	4602      	mov	r2, r0
    23f0:	4904      	ldr	r1, [pc, #16]	; (2404 <TIMER_4_init+0x20>)
    23f2:	4805      	ldr	r0, [pc, #20]	; (2408 <TIMER_4_init+0x24>)
    23f4:	4b05      	ldr	r3, [pc, #20]	; (240c <TIMER_4_init+0x28>)
    23f6:	4798      	blx	r3
    23f8:	bd08      	pop	{r3, pc}
    23fa:	bf00      	nop
    23fc:	000023c9 	.word	0x000023c9
    2400:	0000382d 	.word	0x0000382d
    2404:	41018000 	.word	0x41018000
    2408:	20003d6c 	.word	0x20003d6c
    240c:	0000294d 	.word	0x0000294d

00002410 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    2410:	4a04      	ldr	r2, [pc, #16]	; (2424 <TIMER_5_CLOCK_init+0x14>)
    2412:	69d3      	ldr	r3, [r2, #28]
    2414:	f043 0308 	orr.w	r3, r3, #8
    2418:	61d3      	str	r3, [r2, #28]
    241a:	2240      	movs	r2, #64	; 0x40
    241c:	4b02      	ldr	r3, [pc, #8]	; (2428 <TIMER_5_CLOCK_init+0x18>)
    241e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    2422:	4770      	bx	lr
    2424:	40000800 	.word	0x40000800
    2428:	40001c00 	.word	0x40001c00

0000242c <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    242c:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    242e:	4b05      	ldr	r3, [pc, #20]	; (2444 <TIMER_5_init+0x18>)
    2430:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    2432:	4b05      	ldr	r3, [pc, #20]	; (2448 <TIMER_5_init+0x1c>)
    2434:	4798      	blx	r3
    2436:	4602      	mov	r2, r0
    2438:	4904      	ldr	r1, [pc, #16]	; (244c <TIMER_5_init+0x20>)
    243a:	4805      	ldr	r0, [pc, #20]	; (2450 <TIMER_5_init+0x24>)
    243c:	4b05      	ldr	r3, [pc, #20]	; (2454 <TIMER_5_init+0x28>)
    243e:	4798      	blx	r3
    2440:	bd08      	pop	{r3, pc}
    2442:	bf00      	nop
    2444:	00002411 	.word	0x00002411
    2448:	0000382d 	.word	0x0000382d
    244c:	42000c00 	.word	0x42000c00
    2450:	20003dc4 	.word	0x20003dc4
    2454:	0000294d 	.word	0x0000294d

00002458 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    2458:	4a04      	ldr	r2, [pc, #16]	; (246c <TIMER_6_CLOCK_init+0x14>)
    245a:	69d3      	ldr	r3, [r2, #28]
    245c:	f043 0310 	orr.w	r3, r3, #16
    2460:	61d3      	str	r3, [r2, #28]
    2462:	2240      	movs	r2, #64	; 0x40
    2464:	4b02      	ldr	r3, [pc, #8]	; (2470 <TIMER_6_CLOCK_init+0x18>)
    2466:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    246a:	4770      	bx	lr
    246c:	40000800 	.word	0x40000800
    2470:	40001c00 	.word	0x40001c00

00002474 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    2474:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    2476:	4b05      	ldr	r3, [pc, #20]	; (248c <TIMER_6_init+0x18>)
    2478:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    247a:	4b05      	ldr	r3, [pc, #20]	; (2490 <TIMER_6_init+0x1c>)
    247c:	4798      	blx	r3
    247e:	4602      	mov	r2, r0
    2480:	4904      	ldr	r1, [pc, #16]	; (2494 <TIMER_6_init+0x20>)
    2482:	4805      	ldr	r0, [pc, #20]	; (2498 <TIMER_6_init+0x24>)
    2484:	4b05      	ldr	r3, [pc, #20]	; (249c <TIMER_6_init+0x28>)
    2486:	4798      	blx	r3
    2488:	bd08      	pop	{r3, pc}
    248a:	bf00      	nop
    248c:	00002459 	.word	0x00002459
    2490:	0000382d 	.word	0x0000382d
    2494:	42001000 	.word	0x42001000
    2498:	20003de4 	.word	0x20003de4
    249c:	0000294d 	.word	0x0000294d

000024a0 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    24a0:	4a04      	ldr	r2, [pc, #16]	; (24b4 <TIMER_7_CLOCK_init+0x14>)
    24a2:	6a13      	ldr	r3, [r2, #32]
    24a4:	f043 0310 	orr.w	r3, r3, #16
    24a8:	6213      	str	r3, [r2, #32]
    24aa:	2240      	movs	r2, #64	; 0x40
    24ac:	4b02      	ldr	r3, [pc, #8]	; (24b8 <TIMER_7_CLOCK_init+0x18>)
    24ae:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    24b2:	4770      	bx	lr
    24b4:	40000800 	.word	0x40000800
    24b8:	40001c00 	.word	0x40001c00

000024bc <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    24bc:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    24be:	4b05      	ldr	r3, [pc, #20]	; (24d4 <TIMER_7_init+0x18>)
    24c0:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    24c2:	4b05      	ldr	r3, [pc, #20]	; (24d8 <TIMER_7_init+0x1c>)
    24c4:	4798      	blx	r3
    24c6:	4602      	mov	r2, r0
    24c8:	4904      	ldr	r1, [pc, #16]	; (24dc <TIMER_7_init+0x20>)
    24ca:	4805      	ldr	r0, [pc, #20]	; (24e0 <TIMER_7_init+0x24>)
    24cc:	4b05      	ldr	r3, [pc, #20]	; (24e4 <TIMER_7_init+0x28>)
    24ce:	4798      	blx	r3
    24d0:	bd08      	pop	{r3, pc}
    24d2:	bf00      	nop
    24d4:	000024a1 	.word	0x000024a1
    24d8:	0000382d 	.word	0x0000382d
    24dc:	43001000 	.word	0x43001000
    24e0:	20003d38 	.word	0x20003d38
    24e4:	0000294d 	.word	0x0000294d

000024e8 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    24e8:	4a02      	ldr	r2, [pc, #8]	; (24f4 <WDT_0_CLOCK_init+0xc>)
    24ea:	6953      	ldr	r3, [r2, #20]
    24ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    24f0:	6153      	str	r3, [r2, #20]
    24f2:	4770      	bx	lr
    24f4:	40000800 	.word	0x40000800

000024f8 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    24f8:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    24fa:	4b0a      	ldr	r3, [pc, #40]	; (2524 <WDT_0_init+0x2c>)
    24fc:	4798      	blx	r3
	ASSERT(wdt && hw);
    24fe:	2252      	movs	r2, #82	; 0x52
    2500:	4909      	ldr	r1, [pc, #36]	; (2528 <WDT_0_init+0x30>)
    2502:	2001      	movs	r0, #1
    2504:	4b09      	ldr	r3, [pc, #36]	; (252c <WDT_0_init+0x34>)
    2506:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    2508:	4809      	ldr	r0, [pc, #36]	; (2530 <WDT_0_init+0x38>)
    250a:	4b0a      	ldr	r3, [pc, #40]	; (2534 <WDT_0_init+0x3c>)
    250c:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    250e:	4b0a      	ldr	r3, [pc, #40]	; (2538 <WDT_0_init+0x40>)
    2510:	4798      	blx	r3

	if(0 == wdt_init(&WDT_0, WDT))
    2512:	b118      	cbz	r0, 251c <WDT_0_init+0x24>
	{
		DEBUG_PRINT("WDT Initialised");
	}
	else
	{
		DEBUG_PRINT("WDT Failed to initialize");
    2514:	4809      	ldr	r0, [pc, #36]	; (253c <WDT_0_init+0x44>)
    2516:	4b0a      	ldr	r3, [pc, #40]	; (2540 <WDT_0_init+0x48>)
    2518:	4798      	blx	r3
    251a:	bd08      	pop	{r3, pc}
		DEBUG_PRINT("WDT Initialised");
    251c:	4809      	ldr	r0, [pc, #36]	; (2544 <WDT_0_init+0x4c>)
    251e:	4b08      	ldr	r3, [pc, #32]	; (2540 <WDT_0_init+0x48>)
    2520:	4798      	blx	r3
    2522:	bd08      	pop	{r3, pc}
    2524:	000024e9 	.word	0x000024e9
    2528:	00007c10 	.word	0x00007c10
    252c:	00002991 	.word	0x00002991
    2530:	20003d8c 	.word	0x20003d8c
    2534:	40002000 	.word	0x40002000
    2538:	00003df1 	.word	0x00003df1
    253c:	00007c3c 	.word	0x00007c3c
    2540:	00001c69 	.word	0x00001c69
    2544:	00007c2c 	.word	0x00007c2c

00002548 <system_init>:
	}
}

void system_init(void)
{
    2548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    254c:	4b28      	ldr	r3, [pc, #160]	; (25f0 <system_init+0xa8>)
    254e:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    2550:	4b28      	ldr	r3, [pc, #160]	; (25f4 <system_init+0xac>)
    2552:	4798      	blx	r3

	AC_0_init();
    2554:	4b28      	ldr	r3, [pc, #160]	; (25f8 <system_init+0xb0>)
    2556:	4798      	blx	r3

	ADC_0_init();
    2558:	4b28      	ldr	r3, [pc, #160]	; (25fc <system_init+0xb4>)
    255a:	4798      	blx	r3

	ADC_1_init();
    255c:	4b28      	ldr	r3, [pc, #160]	; (2600 <system_init+0xb8>)
    255e:	4798      	blx	r3

	DAC_0_init();
    2560:	4b28      	ldr	r3, [pc, #160]	; (2604 <system_init+0xbc>)
    2562:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    2564:	4b28      	ldr	r3, [pc, #160]	; (2608 <system_init+0xc0>)
    2566:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    2568:	4b28      	ldr	r3, [pc, #160]	; (260c <system_init+0xc4>)
    256a:	4798      	blx	r3

	FLASH_0_init();
    256c:	4b28      	ldr	r3, [pc, #160]	; (2610 <system_init+0xc8>)
    256e:	4798      	blx	r3

	SerialDebug_init();
    2570:	4b28      	ldr	r3, [pc, #160]	; (2614 <system_init+0xcc>)
    2572:	4798      	blx	r3
	
	ModemData_init();
    2574:	4b28      	ldr	r3, [pc, #160]	; (2618 <system_init+0xd0>)
    2576:	4798      	blx	r3

	PWM_0_init();
    2578:	4b28      	ldr	r3, [pc, #160]	; (261c <system_init+0xd4>)
    257a:	4798      	blx	r3

	PWM_1_init();
    257c:	4b28      	ldr	r3, [pc, #160]	; (2620 <system_init+0xd8>)
    257e:	4798      	blx	r3

	PWM_2_init();
    2580:	4b28      	ldr	r3, [pc, #160]	; (2624 <system_init+0xdc>)
    2582:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    2584:	4c28      	ldr	r4, [pc, #160]	; (2628 <system_init+0xe0>)
    2586:	69a3      	ldr	r3, [r4, #24]
    2588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    258c:	61a3      	str	r3, [r4, #24]
    258e:	4f27      	ldr	r7, [pc, #156]	; (262c <system_init+0xe4>)
    2590:	f04f 0840 	mov.w	r8, #64	; 0x40
    2594:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    2598:	4e25      	ldr	r6, [pc, #148]	; (2630 <system_init+0xe8>)
    259a:	47b0      	blx	r6
    259c:	4602      	mov	r2, r0
    259e:	4925      	ldr	r1, [pc, #148]	; (2634 <system_init+0xec>)
    25a0:	4825      	ldr	r0, [pc, #148]	; (2638 <system_init+0xf0>)
    25a2:	4d26      	ldr	r5, [pc, #152]	; (263c <system_init+0xf4>)
    25a4:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    25a6:	69e3      	ldr	r3, [r4, #28]
    25a8:	f043 0320 	orr.w	r3, r3, #32
    25ac:	61e3      	str	r3, [r4, #28]
    25ae:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    25b2:	47b0      	blx	r6
    25b4:	4602      	mov	r2, r0
    25b6:	4922      	ldr	r1, [pc, #136]	; (2640 <system_init+0xf8>)
    25b8:	4822      	ldr	r0, [pc, #136]	; (2644 <system_init+0xfc>)
    25ba:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    25bc:	69e3      	ldr	r3, [r4, #28]
    25be:	ea43 0308 	orr.w	r3, r3, r8
    25c2:	61e3      	str	r3, [r4, #28]
    25c4:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    25c8:	47b0      	blx	r6
    25ca:	4602      	mov	r2, r0
    25cc:	491e      	ldr	r1, [pc, #120]	; (2648 <system_init+0x100>)
    25ce:	481f      	ldr	r0, [pc, #124]	; (264c <system_init+0x104>)
    25d0:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    25d2:	4b1f      	ldr	r3, [pc, #124]	; (2650 <system_init+0x108>)
    25d4:	4798      	blx	r3

	TIMER_4_init();
    25d6:	4b1f      	ldr	r3, [pc, #124]	; (2654 <system_init+0x10c>)
    25d8:	4798      	blx	r3

	TIMER_5_init();
    25da:	4b1f      	ldr	r3, [pc, #124]	; (2658 <system_init+0x110>)
    25dc:	4798      	blx	r3

	TIMER_6_init();
    25de:	4b1f      	ldr	r3, [pc, #124]	; (265c <system_init+0x114>)
    25e0:	4798      	blx	r3

	TIMER_7_init();
    25e2:	4b1f      	ldr	r3, [pc, #124]	; (2660 <system_init+0x118>)
    25e4:	4798      	blx	r3
	
	WDT_0_init();
    25e6:	4b1f      	ldr	r3, [pc, #124]	; (2664 <system_init+0x11c>)
    25e8:	4798      	blx	r3
    25ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25ee:	bf00      	nop
    25f0:	00002cdd 	.word	0x00002cdd
    25f4:	00002295 	.word	0x00002295
    25f8:	00001eb1 	.word	0x00001eb1
    25fc:	00002069 	.word	0x00002069
    2600:	000020b1 	.word	0x000020b1
    2604:	000020f1 	.word	0x000020f1
    2608:	00002111 	.word	0x00002111
    260c:	00002139 	.word	0x00002139
    2610:	00002165 	.word	0x00002165
    2614:	00002279 	.word	0x00002279
    2618:	000021f1 	.word	0x000021f1
    261c:	000022c5 	.word	0x000022c5
    2620:	0000230d 	.word	0x0000230d
    2624:	00002355 	.word	0x00002355
    2628:	40000800 	.word	0x40000800
    262c:	40001c00 	.word	0x40001c00
    2630:	00003d6d 	.word	0x00003d6d
    2634:	4101c000 	.word	0x4101c000
    2638:	20003e44 	.word	0x20003e44
    263c:	0000294d 	.word	0x0000294d
    2640:	42001400 	.word	0x42001400
    2644:	20003da4 	.word	0x20003da4
    2648:	42001800 	.word	0x42001800
    264c:	20003cc4 	.word	0x20003cc4
    2650:	0000239d 	.word	0x0000239d
    2654:	000023e5 	.word	0x000023e5
    2658:	0000242d 	.word	0x0000242d
    265c:	00002475 	.word	0x00002475
    2660:	000024bd 	.word	0x000024bd
    2664:	000024f9 	.word	0x000024f9

00002668 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    2668:	b538      	push	{r3, r4, r5, lr}
    266a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    266c:	4605      	mov	r5, r0
    266e:	b158      	cbz	r0, 2688 <ac_sync_init+0x20>
    2670:	1c08      	adds	r0, r1, #0
    2672:	bf18      	it	ne
    2674:	2001      	movne	r0, #1
    2676:	223b      	movs	r2, #59	; 0x3b
    2678:	4904      	ldr	r1, [pc, #16]	; (268c <ac_sync_init+0x24>)
    267a:	4b05      	ldr	r3, [pc, #20]	; (2690 <ac_sync_init+0x28>)
    267c:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    267e:	4621      	mov	r1, r4
    2680:	4628      	mov	r0, r5
    2682:	4b04      	ldr	r3, [pc, #16]	; (2694 <ac_sync_init+0x2c>)
    2684:	4798      	blx	r3
}
    2686:	bd38      	pop	{r3, r4, r5, pc}
    2688:	2000      	movs	r0, #0
    268a:	e7f4      	b.n	2676 <ac_sync_init+0xe>
    268c:	00007c58 	.word	0x00007c58
    2690:	00002991 	.word	0x00002991
    2694:	00002ba5 	.word	0x00002ba5

00002698 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    2698:	b538      	push	{r3, r4, r5, lr}
    269a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    269c:	4605      	mov	r5, r0
    269e:	b158      	cbz	r0, 26b8 <adc_sync_init+0x20>
    26a0:	1c08      	adds	r0, r1, #0
    26a2:	bf18      	it	ne
    26a4:	2001      	movne	r0, #1
    26a6:	2243      	movs	r2, #67	; 0x43
    26a8:	4904      	ldr	r1, [pc, #16]	; (26bc <adc_sync_init+0x24>)
    26aa:	4b05      	ldr	r3, [pc, #20]	; (26c0 <adc_sync_init+0x28>)
    26ac:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    26ae:	4621      	mov	r1, r4
    26b0:	4628      	mov	r0, r5
    26b2:	4b04      	ldr	r3, [pc, #16]	; (26c4 <adc_sync_init+0x2c>)
    26b4:	4798      	blx	r3
}
    26b6:	bd38      	pop	{r3, r4, r5, pc}
    26b8:	2000      	movs	r0, #0
    26ba:	e7f4      	b.n	26a6 <adc_sync_init+0xe>
    26bc:	00007c74 	.word	0x00007c74
    26c0:	00002991 	.word	0x00002991
    26c4:	00002c7d 	.word	0x00002c7d

000026c8 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    26c8:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    26cc:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    26ce:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    26d0:	f3bf 8f5f 	dmb	sy
    26d4:	4770      	bx	lr

000026d6 <atomic_leave_critical>:
    26d6:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    26da:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    26dc:	f383 8810 	msr	PRIMASK, r3
    26e0:	4770      	bx	lr
	...

000026e4 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    26e4:	b538      	push	{r3, r4, r5, lr}
    26e6:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    26e8:	4604      	mov	r4, r0
    26ea:	b198      	cbz	r0, 2714 <dac_sync_init+0x30>
    26ec:	1c08      	adds	r0, r1, #0
    26ee:	bf18      	it	ne
    26f0:	2001      	movne	r0, #1
    26f2:	223c      	movs	r2, #60	; 0x3c
    26f4:	4908      	ldr	r1, [pc, #32]	; (2718 <dac_sync_init+0x34>)
    26f6:	4b09      	ldr	r3, [pc, #36]	; (271c <dac_sync_init+0x38>)
    26f8:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    26fa:	4629      	mov	r1, r5
    26fc:	4620      	mov	r0, r4
    26fe:	4b08      	ldr	r3, [pc, #32]	; (2720 <dac_sync_init+0x3c>)
    2700:	4798      	blx	r3
	if (rc) {
    2702:	4602      	mov	r2, r0
    2704:	b920      	cbnz	r0, 2710 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    2706:	2300      	movs	r3, #0
    2708:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    270a:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    270c:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    270e:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    2710:	4610      	mov	r0, r2
    2712:	bd38      	pop	{r3, r4, r5, pc}
    2714:	2000      	movs	r0, #0
    2716:	e7ec      	b.n	26f2 <dac_sync_init+0xe>
    2718:	00007c90 	.word	0x00007c90
    271c:	00002991 	.word	0x00002991
    2720:	00002d95 	.word	0x00002d95

00002724 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    2724:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    2726:	4b02      	ldr	r3, [pc, #8]	; (2730 <delay_init+0xc>)
    2728:	6018      	str	r0, [r3, #0]
    272a:	4b02      	ldr	r3, [pc, #8]	; (2734 <delay_init+0x10>)
    272c:	4798      	blx	r3
    272e:	bd08      	pop	{r3, pc}
    2730:	20000534 	.word	0x20000534
    2734:	00003529 	.word	0x00003529

00002738 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2738:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    273a:	4b04      	ldr	r3, [pc, #16]	; (274c <delay_ms+0x14>)
    273c:	681c      	ldr	r4, [r3, #0]
    273e:	4b04      	ldr	r3, [pc, #16]	; (2750 <delay_ms+0x18>)
    2740:	4798      	blx	r3
    2742:	4601      	mov	r1, r0
    2744:	4620      	mov	r0, r4
    2746:	4b03      	ldr	r3, [pc, #12]	; (2754 <delay_ms+0x1c>)
    2748:	4798      	blx	r3
    274a:	bd10      	pop	{r4, pc}
    274c:	20000534 	.word	0x20000534
    2750:	00002cd1 	.word	0x00002cd1
    2754:	0000353d 	.word	0x0000353d

00002758 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2758:	b508      	push	{r3, lr}
	return _event_system_init();
    275a:	4b01      	ldr	r3, [pc, #4]	; (2760 <event_system_init+0x8>)
    275c:	4798      	blx	r3
}
    275e:	bd08      	pop	{r3, pc}
    2760:	00002fd1 	.word	0x00002fd1

00002764 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2764:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2766:	4b0c      	ldr	r3, [pc, #48]	; (2798 <process_ext_irq+0x34>)
    2768:	685c      	ldr	r4, [r3, #4]
    276a:	42a0      	cmp	r0, r4
    276c:	d00e      	beq.n	278c <process_ext_irq+0x28>
    276e:	2301      	movs	r3, #1
    2770:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    2772:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    2774:	25ff      	movs	r5, #255	; 0xff
    2776:	e003      	b.n	2780 <process_ext_irq+0x1c>
    2778:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    277a:	185a      	adds	r2, r3, r1
    277c:	0852      	lsrs	r2, r2, #1
    277e:	d104      	bne.n	278a <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    2780:	42a0      	cmp	r0, r4
    2782:	d9f9      	bls.n	2778 <process_ext_irq+0x14>
	while (upper >= lower) {
    2784:	b13b      	cbz	r3, 2796 <process_ext_irq+0x32>
			lower = middle + 1;
    2786:	4631      	mov	r1, r6
    2788:	e7f7      	b.n	277a <process_ext_irq+0x16>
    278a:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    278c:	4b02      	ldr	r3, [pc, #8]	; (2798 <process_ext_irq+0x34>)
    278e:	681b      	ldr	r3, [r3, #0]
    2790:	b10b      	cbz	r3, 2796 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    2792:	4798      	blx	r3
    2794:	bd70      	pop	{r4, r5, r6, pc}
    2796:	bd70      	pop	{r4, r5, r6, pc}
    2798:	20000538 	.word	0x20000538

0000279c <ext_irq_init>:
{
    279c:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    279e:	4b05      	ldr	r3, [pc, #20]	; (27b4 <ext_irq_init+0x18>)
    27a0:	f04f 32ff 	mov.w	r2, #4294967295
    27a4:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    27a6:	2200      	movs	r2, #0
    27a8:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    27aa:	4803      	ldr	r0, [pc, #12]	; (27b8 <ext_irq_init+0x1c>)
    27ac:	4b03      	ldr	r3, [pc, #12]	; (27bc <ext_irq_init+0x20>)
    27ae:	4798      	blx	r3
}
    27b0:	bd08      	pop	{r3, pc}
    27b2:	bf00      	nop
    27b4:	20000538 	.word	0x20000538
    27b8:	00002765 	.word	0x00002765
    27bc:	00002f51 	.word	0x00002f51

000027c0 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    27c0:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    27c2:	6943      	ldr	r3, [r0, #20]
    27c4:	b103      	cbz	r3, 27c8 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    27c6:	4798      	blx	r3
    27c8:	bd08      	pop	{r3, pc}

000027ca <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    27ca:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    27cc:	6983      	ldr	r3, [r0, #24]
    27ce:	b103      	cbz	r3, 27d2 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    27d0:	4798      	blx	r3
    27d2:	bd08      	pop	{r3, pc}

000027d4 <flash_init>:
{
    27d4:	b538      	push	{r3, r4, r5, lr}
    27d6:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    27d8:	4604      	mov	r4, r0
    27da:	b190      	cbz	r0, 2802 <flash_init+0x2e>
    27dc:	1c08      	adds	r0, r1, #0
    27de:	bf18      	it	ne
    27e0:	2001      	movne	r0, #1
    27e2:	2242      	movs	r2, #66	; 0x42
    27e4:	4908      	ldr	r1, [pc, #32]	; (2808 <flash_init+0x34>)
    27e6:	4b09      	ldr	r3, [pc, #36]	; (280c <flash_init+0x38>)
    27e8:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    27ea:	4629      	mov	r1, r5
    27ec:	4620      	mov	r0, r4
    27ee:	4b08      	ldr	r3, [pc, #32]	; (2810 <flash_init+0x3c>)
    27f0:	4798      	blx	r3
	if (rc) {
    27f2:	4603      	mov	r3, r0
    27f4:	b918      	cbnz	r0, 27fe <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    27f6:	4a07      	ldr	r2, [pc, #28]	; (2814 <flash_init+0x40>)
    27f8:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    27fa:	4a07      	ldr	r2, [pc, #28]	; (2818 <flash_init+0x44>)
    27fc:	6062      	str	r2, [r4, #4]
}
    27fe:	4618      	mov	r0, r3
    2800:	bd38      	pop	{r3, r4, r5, pc}
    2802:	2000      	movs	r0, #0
    2804:	e7ed      	b.n	27e2 <flash_init+0xe>
    2806:	bf00      	nop
    2808:	00007cac 	.word	0x00007cac
    280c:	00002991 	.word	0x00002991
    2810:	0000310d 	.word	0x0000310d
    2814:	000027c1 	.word	0x000027c1
    2818:	000027cb 	.word	0x000027cb

0000281c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    281c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    281e:	6943      	ldr	r3, [r0, #20]
    2820:	b103      	cbz	r3, 2824 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    2822:	4798      	blx	r3
    2824:	bd08      	pop	{r3, pc}

00002826 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2826:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    2828:	6983      	ldr	r3, [r0, #24]
    282a:	b103      	cbz	r3, 282e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    282c:	4798      	blx	r3
    282e:	bd08      	pop	{r3, pc}

00002830 <pwm_init>:
{
    2830:	b538      	push	{r3, r4, r5, lr}
    2832:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    2834:	4604      	mov	r4, r0
    2836:	b180      	cbz	r0, 285a <pwm_init+0x2a>
    2838:	1c08      	adds	r0, r1, #0
    283a:	bf18      	it	ne
    283c:	2001      	movne	r0, #1
    283e:	223d      	movs	r2, #61	; 0x3d
    2840:	4907      	ldr	r1, [pc, #28]	; (2860 <pwm_init+0x30>)
    2842:	4b08      	ldr	r3, [pc, #32]	; (2864 <pwm_init+0x34>)
    2844:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2846:	4629      	mov	r1, r5
    2848:	4620      	mov	r0, r4
    284a:	4b07      	ldr	r3, [pc, #28]	; (2868 <pwm_init+0x38>)
    284c:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    284e:	4b07      	ldr	r3, [pc, #28]	; (286c <pwm_init+0x3c>)
    2850:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2852:	4b07      	ldr	r3, [pc, #28]	; (2870 <pwm_init+0x40>)
    2854:	6063      	str	r3, [r4, #4]
}
    2856:	2000      	movs	r0, #0
    2858:	bd38      	pop	{r3, r4, r5, pc}
    285a:	2000      	movs	r0, #0
    285c:	e7ef      	b.n	283e <pwm_init+0xe>
    285e:	bf00      	nop
    2860:	00007cc4 	.word	0x00007cc4
    2864:	00002991 	.word	0x00002991
    2868:	00003c55 	.word	0x00003c55
    286c:	0000281d 	.word	0x0000281d
    2870:	00002827 	.word	0x00002827

00002874 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2876:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    2878:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    287a:	b12f      	cbz	r7, 2888 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    287c:	688d      	ldr	r5, [r1, #8]
    287e:	463c      	mov	r4, r7
    2880:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2882:	f1c2 0e01 	rsb	lr, r2, #1
    2886:	e00b      	b.n	28a0 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    2888:	4b0e      	ldr	r3, [pc, #56]	; (28c4 <timer_add_timer_task+0x50>)
    288a:	4798      	blx	r3
		return;
    288c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    288e:	4473      	add	r3, lr
    2890:	68a0      	ldr	r0, [r4, #8]
    2892:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    2894:	42ab      	cmp	r3, r5
    2896:	d20a      	bcs.n	28ae <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    2898:	6823      	ldr	r3, [r4, #0]
    289a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    289c:	b153      	cbz	r3, 28b4 <timer_add_timer_task+0x40>
    289e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    28a0:	6863      	ldr	r3, [r4, #4]
    28a2:	4293      	cmp	r3, r2
    28a4:	d8f3      	bhi.n	288e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    28a6:	68a0      	ldr	r0, [r4, #8]
    28a8:	4403      	add	r3, r0
    28aa:	1a9b      	subs	r3, r3, r2
    28ac:	e7f2      	b.n	2894 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    28ae:	42a7      	cmp	r7, r4
    28b0:	d004      	beq.n	28bc <timer_add_timer_task+0x48>
    28b2:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    28b4:	4620      	mov	r0, r4
    28b6:	4b04      	ldr	r3, [pc, #16]	; (28c8 <timer_add_timer_task+0x54>)
    28b8:	4798      	blx	r3
    28ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    28bc:	4660      	mov	r0, ip
    28be:	4b01      	ldr	r3, [pc, #4]	; (28c4 <timer_add_timer_task+0x50>)
    28c0:	4798      	blx	r3
    28c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28c4:	000029b9 	.word	0x000029b9
    28c8:	000029e5 	.word	0x000029e5

000028cc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    28cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    28d0:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    28d2:	6907      	ldr	r7, [r0, #16]
    28d4:	3701      	adds	r7, #1
    28d6:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    28d8:	7e03      	ldrb	r3, [r0, #24]
    28da:	f013 0f01 	tst.w	r3, #1
    28de:	d113      	bne.n	2908 <timer_process_counted+0x3c>
    28e0:	7e03      	ldrb	r3, [r0, #24]
    28e2:	f013 0f02 	tst.w	r3, #2
    28e6:	d10f      	bne.n	2908 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    28e8:	b354      	cbz	r4, 2940 <timer_process_counted+0x74>
    28ea:	6863      	ldr	r3, [r4, #4]
    28ec:	1afb      	subs	r3, r7, r3
    28ee:	68a2      	ldr	r2, [r4, #8]
    28f0:	4293      	cmp	r3, r2
    28f2:	d307      	bcc.n	2904 <timer_process_counted+0x38>
    28f4:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    28f6:	f100 0814 	add.w	r8, r0, #20
    28fa:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2944 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    28fe:	f8df a048 	ldr.w	sl, [pc, #72]	; 2948 <timer_process_counted+0x7c>
    2902:	e012      	b.n	292a <timer_process_counted+0x5e>
    2904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2908:	7e03      	ldrb	r3, [r0, #24]
    290a:	f043 0302 	orr.w	r3, r3, #2
    290e:	7603      	strb	r3, [r0, #24]
		return;
    2910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2914:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    2916:	68e3      	ldr	r3, [r4, #12]
    2918:	4620      	mov	r0, r4
    291a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    291c:	b185      	cbz	r5, 2940 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    291e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    2920:	686b      	ldr	r3, [r5, #4]
    2922:	1afb      	subs	r3, r7, r3
    2924:	68aa      	ldr	r2, [r5, #8]
    2926:	4293      	cmp	r3, r2
    2928:	d30a      	bcc.n	2940 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    292a:	4640      	mov	r0, r8
    292c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    292e:	7c23      	ldrb	r3, [r4, #16]
    2930:	2b01      	cmp	r3, #1
    2932:	d1ef      	bne.n	2914 <timer_process_counted+0x48>
			tmp->time_label = time;
    2934:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2936:	463a      	mov	r2, r7
    2938:	4621      	mov	r1, r4
    293a:	4640      	mov	r0, r8
    293c:	47d0      	blx	sl
    293e:	e7e9      	b.n	2914 <timer_process_counted+0x48>
    2940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2944:	000029ed 	.word	0x000029ed
    2948:	00002875 	.word	0x00002875

0000294c <timer_init>:
{
    294c:	b570      	push	{r4, r5, r6, lr}
    294e:	460e      	mov	r6, r1
    2950:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    2952:	4604      	mov	r4, r0
    2954:	b190      	cbz	r0, 297c <timer_init+0x30>
    2956:	b199      	cbz	r1, 2980 <timer_init+0x34>
    2958:	1c10      	adds	r0, r2, #0
    295a:	bf18      	it	ne
    295c:	2001      	movne	r0, #1
    295e:	2245      	movs	r2, #69	; 0x45
    2960:	4908      	ldr	r1, [pc, #32]	; (2984 <timer_init+0x38>)
    2962:	4b09      	ldr	r3, [pc, #36]	; (2988 <timer_init+0x3c>)
    2964:	4798      	blx	r3
	descr->func = func;
    2966:	4620      	mov	r0, r4
    2968:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    296c:	682b      	ldr	r3, [r5, #0]
    296e:	4631      	mov	r1, r6
    2970:	4798      	blx	r3
	descr->time                           = 0;
    2972:	2000      	movs	r0, #0
    2974:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2976:	4b05      	ldr	r3, [pc, #20]	; (298c <timer_init+0x40>)
    2978:	6063      	str	r3, [r4, #4]
}
    297a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    297c:	2000      	movs	r0, #0
    297e:	e7ee      	b.n	295e <timer_init+0x12>
    2980:	2000      	movs	r0, #0
    2982:	e7ec      	b.n	295e <timer_init+0x12>
    2984:	00007cdc 	.word	0x00007cdc
    2988:	00002991 	.word	0x00002991
    298c:	000028cd 	.word	0x000028cd

00002990 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2990:	b900      	cbnz	r0, 2994 <assert+0x4>
		__asm("BKPT #0");
    2992:	be00      	bkpt	0x0000
    2994:	4770      	bx	lr

00002996 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2996:	6803      	ldr	r3, [r0, #0]
    2998:	b14b      	cbz	r3, 29ae <is_list_element+0x18>
		if (it == element) {
    299a:	428b      	cmp	r3, r1
    299c:	d009      	beq.n	29b2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    299e:	681b      	ldr	r3, [r3, #0]
    29a0:	b11b      	cbz	r3, 29aa <is_list_element+0x14>
		if (it == element) {
    29a2:	4299      	cmp	r1, r3
    29a4:	d1fb      	bne.n	299e <is_list_element+0x8>
			return true;
    29a6:	2001      	movs	r0, #1
		}
	}

	return false;
}
    29a8:	4770      	bx	lr
	return false;
    29aa:	2000      	movs	r0, #0
    29ac:	4770      	bx	lr
    29ae:	2000      	movs	r0, #0
    29b0:	4770      	bx	lr
			return true;
    29b2:	2001      	movs	r0, #1
    29b4:	4770      	bx	lr
	...

000029b8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    29b8:	b538      	push	{r3, r4, r5, lr}
    29ba:	4604      	mov	r4, r0
    29bc:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    29be:	4b06      	ldr	r3, [pc, #24]	; (29d8 <list_insert_as_head+0x20>)
    29c0:	4798      	blx	r3
    29c2:	f080 0001 	eor.w	r0, r0, #1
    29c6:	2243      	movs	r2, #67	; 0x43
    29c8:	4904      	ldr	r1, [pc, #16]	; (29dc <list_insert_as_head+0x24>)
    29ca:	b2c0      	uxtb	r0, r0
    29cc:	4b04      	ldr	r3, [pc, #16]	; (29e0 <list_insert_as_head+0x28>)
    29ce:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    29d0:	6823      	ldr	r3, [r4, #0]
    29d2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    29d4:	6025      	str	r5, [r4, #0]
    29d6:	bd38      	pop	{r3, r4, r5, pc}
    29d8:	00002997 	.word	0x00002997
    29dc:	00007cf4 	.word	0x00007cf4
    29e0:	00002991 	.word	0x00002991

000029e4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    29e4:	6803      	ldr	r3, [r0, #0]
    29e6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    29e8:	6001      	str	r1, [r0, #0]
    29ea:	4770      	bx	lr

000029ec <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    29ec:	6803      	ldr	r3, [r0, #0]
    29ee:	b10b      	cbz	r3, 29f4 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    29f0:	681a      	ldr	r2, [r3, #0]
    29f2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    29f4:	4618      	mov	r0, r3
    29f6:	4770      	bx	lr

000029f8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    29f8:	b570      	push	{r4, r5, r6, lr}
    29fa:	460e      	mov	r6, r1
    29fc:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    29fe:	4604      	mov	r4, r0
    2a00:	b178      	cbz	r0, 2a22 <ringbuffer_init+0x2a>
    2a02:	b181      	cbz	r1, 2a26 <ringbuffer_init+0x2e>
    2a04:	b1a2      	cbz	r2, 2a30 <ringbuffer_init+0x38>
    2a06:	2001      	movs	r0, #1
    2a08:	2232      	movs	r2, #50	; 0x32
    2a0a:	490d      	ldr	r1, [pc, #52]	; (2a40 <ringbuffer_init+0x48>)
    2a0c:	4b0d      	ldr	r3, [pc, #52]	; (2a44 <ringbuffer_init+0x4c>)
    2a0e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    2a10:	1e6b      	subs	r3, r5, #1
    2a12:	421d      	tst	r5, r3
    2a14:	d109      	bne.n	2a2a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    2a16:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    2a18:	2000      	movs	r0, #0
    2a1a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    2a1c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    2a1e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    2a20:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2a22:	2000      	movs	r0, #0
    2a24:	e7f0      	b.n	2a08 <ringbuffer_init+0x10>
    2a26:	2000      	movs	r0, #0
    2a28:	e7ee      	b.n	2a08 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    2a2a:	f06f 000c 	mvn.w	r0, #12
    2a2e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2a30:	2232      	movs	r2, #50	; 0x32
    2a32:	4903      	ldr	r1, [pc, #12]	; (2a40 <ringbuffer_init+0x48>)
    2a34:	2000      	movs	r0, #0
    2a36:	4b03      	ldr	r3, [pc, #12]	; (2a44 <ringbuffer_init+0x4c>)
    2a38:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    2a3a:	1e6b      	subs	r3, r5, #1
    2a3c:	e7eb      	b.n	2a16 <ringbuffer_init+0x1e>
    2a3e:	bf00      	nop
    2a40:	00007d14 	.word	0x00007d14
    2a44:	00002991 	.word	0x00002991

00002a48 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    2a48:	b538      	push	{r3, r4, r5, lr}
    2a4a:	460d      	mov	r5, r1
	ASSERT(rb && data);
    2a4c:	4604      	mov	r4, r0
    2a4e:	b1a0      	cbz	r0, 2a7a <ringbuffer_get+0x32>
    2a50:	1c08      	adds	r0, r1, #0
    2a52:	bf18      	it	ne
    2a54:	2001      	movne	r0, #1
    2a56:	224a      	movs	r2, #74	; 0x4a
    2a58:	490a      	ldr	r1, [pc, #40]	; (2a84 <ringbuffer_get+0x3c>)
    2a5a:	4b0b      	ldr	r3, [pc, #44]	; (2a88 <ringbuffer_get+0x40>)
    2a5c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    2a5e:	68a3      	ldr	r3, [r4, #8]
    2a60:	68e2      	ldr	r2, [r4, #12]
    2a62:	429a      	cmp	r2, r3
    2a64:	d00b      	beq.n	2a7e <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    2a66:	6862      	ldr	r2, [r4, #4]
    2a68:	4013      	ands	r3, r2
    2a6a:	6822      	ldr	r2, [r4, #0]
    2a6c:	5cd3      	ldrb	r3, [r2, r3]
    2a6e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    2a70:	68a3      	ldr	r3, [r4, #8]
    2a72:	3301      	adds	r3, #1
    2a74:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    2a76:	2000      	movs	r0, #0
    2a78:	bd38      	pop	{r3, r4, r5, pc}
    2a7a:	2000      	movs	r0, #0
    2a7c:	e7eb      	b.n	2a56 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    2a7e:	f06f 0009 	mvn.w	r0, #9
}
    2a82:	bd38      	pop	{r3, r4, r5, pc}
    2a84:	00007d14 	.word	0x00007d14
    2a88:	00002991 	.word	0x00002991

00002a8c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2a8c:	b538      	push	{r3, r4, r5, lr}
    2a8e:	460d      	mov	r5, r1
	ASSERT(rb);
    2a90:	4604      	mov	r4, r0
    2a92:	225b      	movs	r2, #91	; 0x5b
    2a94:	490b      	ldr	r1, [pc, #44]	; (2ac4 <ringbuffer_put+0x38>)
    2a96:	3000      	adds	r0, #0
    2a98:	bf18      	it	ne
    2a9a:	2001      	movne	r0, #1
    2a9c:	4b0a      	ldr	r3, [pc, #40]	; (2ac8 <ringbuffer_put+0x3c>)
    2a9e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2aa0:	68e3      	ldr	r3, [r4, #12]
    2aa2:	6862      	ldr	r2, [r4, #4]
    2aa4:	4013      	ands	r3, r2
    2aa6:	6822      	ldr	r2, [r4, #0]
    2aa8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2aaa:	68e3      	ldr	r3, [r4, #12]
    2aac:	6861      	ldr	r1, [r4, #4]
    2aae:	68a2      	ldr	r2, [r4, #8]
    2ab0:	1a9a      	subs	r2, r3, r2
    2ab2:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    2ab4:	bf84      	itt	hi
    2ab6:	1a59      	subhi	r1, r3, r1
    2ab8:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    2aba:	3301      	adds	r3, #1
    2abc:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    2abe:	2000      	movs	r0, #0
    2ac0:	bd38      	pop	{r3, r4, r5, pc}
    2ac2:	bf00      	nop
    2ac4:	00007d14 	.word	0x00007d14
    2ac8:	00002991 	.word	0x00002991

00002acc <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2acc:	b510      	push	{r4, lr}
	ASSERT(rb);
    2ace:	4604      	mov	r4, r0
    2ad0:	2271      	movs	r2, #113	; 0x71
    2ad2:	4905      	ldr	r1, [pc, #20]	; (2ae8 <ringbuffer_num+0x1c>)
    2ad4:	3000      	adds	r0, #0
    2ad6:	bf18      	it	ne
    2ad8:	2001      	movne	r0, #1
    2ada:	4b04      	ldr	r3, [pc, #16]	; (2aec <ringbuffer_num+0x20>)
    2adc:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2ade:	68e0      	ldr	r0, [r4, #12]
    2ae0:	68a3      	ldr	r3, [r4, #8]
}
    2ae2:	1ac0      	subs	r0, r0, r3
    2ae4:	bd10      	pop	{r4, pc}
    2ae6:	bf00      	nop
    2ae8:	00007d14 	.word	0x00007d14
    2aec:	00002991 	.word	0x00002991

00002af0 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    2af0:	b510      	push	{r4, lr}
	ASSERT(rb);
    2af2:	4604      	mov	r4, r0
    2af4:	227b      	movs	r2, #123	; 0x7b
    2af6:	4905      	ldr	r1, [pc, #20]	; (2b0c <ringbuffer_flush+0x1c>)
    2af8:	3000      	adds	r0, #0
    2afa:	bf18      	it	ne
    2afc:	2001      	movne	r0, #1
    2afe:	4b04      	ldr	r3, [pc, #16]	; (2b10 <ringbuffer_flush+0x20>)
    2b00:	4798      	blx	r3

	rb->read_index = rb->write_index;
    2b02:	68e3      	ldr	r3, [r4, #12]
    2b04:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    2b06:	2000      	movs	r0, #0
    2b08:	bd10      	pop	{r4, pc}
    2b0a:	bf00      	nop
    2b0c:	00007d14 	.word	0x00007d14
    2b10:	00002991 	.word	0x00002991

00002b14 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2b14:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2b16:	4a06      	ldr	r2, [pc, #24]	; (2b30 <_sbrk+0x1c>)
    2b18:	6812      	ldr	r2, [r2, #0]
    2b1a:	b122      	cbz	r2, 2b26 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2b1c:	4a04      	ldr	r2, [pc, #16]	; (2b30 <_sbrk+0x1c>)
    2b1e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2b20:	4403      	add	r3, r0
    2b22:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2b24:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2b26:	4903      	ldr	r1, [pc, #12]	; (2b34 <_sbrk+0x20>)
    2b28:	4a01      	ldr	r2, [pc, #4]	; (2b30 <_sbrk+0x1c>)
    2b2a:	6011      	str	r1, [r2, #0]
    2b2c:	e7f6      	b.n	2b1c <_sbrk+0x8>
    2b2e:	bf00      	nop
    2b30:	20000540 	.word	0x20000540
    2b34:	20013e78 	.word	0x20013e78

00002b38 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    2b38:	b510      	push	{r4, lr}
    2b3a:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    2b3c:	f44f 7281 	mov.w	r2, #258	; 0x102
    2b40:	4915      	ldr	r1, [pc, #84]	; (2b98 <_ac_init+0x60>)
    2b42:	4816      	ldr	r0, [pc, #88]	; (2b9c <_ac_init+0x64>)
    2b44:	4284      	cmp	r4, r0
    2b46:	bf14      	ite	ne
    2b48:	2000      	movne	r0, #0
    2b4a:	2001      	moveq	r0, #1
    2b4c:	4b14      	ldr	r3, [pc, #80]	; (2ba0 <_ac_init+0x68>)
    2b4e:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    2b50:	6a23      	ldr	r3, [r4, #32]
    2b52:	f013 0f01 	tst.w	r3, #1
    2b56:	d1fb      	bne.n	2b50 <_ac_init+0x18>
    2b58:	6a23      	ldr	r3, [r4, #32]
    2b5a:	f013 0f03 	tst.w	r3, #3
    2b5e:	d1fb      	bne.n	2b58 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    2b60:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    2b62:	f013 0f02 	tst.w	r3, #2
    2b66:	d114      	bne.n	2b92 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    2b68:	6a23      	ldr	r3, [r4, #32]
    2b6a:	f013 0f01 	tst.w	r3, #1
    2b6e:	d1fb      	bne.n	2b68 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    2b70:	7823      	ldrb	r3, [r4, #0]
    2b72:	f043 0301 	orr.w	r3, r3, #1
    2b76:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    2b78:	6a23      	ldr	r3, [r4, #32]
    2b7a:	f013 0f01 	tst.w	r3, #1
    2b7e:	d1fb      	bne.n	2b78 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    2b80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    2b84:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    2b86:	2000      	movs	r0, #0
    2b88:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    2b8a:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    2b8c:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    2b8e:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    2b90:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2b92:	f06f 0010 	mvn.w	r0, #16
}
    2b96:	bd10      	pop	{r4, pc}
    2b98:	00007d38 	.word	0x00007d38
    2b9c:	42002000 	.word	0x42002000
    2ba0:	00002991 	.word	0x00002991

00002ba4 <_ac_sync_init>:
{
    2ba4:	b538      	push	{r3, r4, r5, lr}
    2ba6:	460c      	mov	r4, r1
	ASSERT(device);
    2ba8:	4605      	mov	r5, r0
    2baa:	226c      	movs	r2, #108	; 0x6c
    2bac:	4905      	ldr	r1, [pc, #20]	; (2bc4 <_ac_sync_init+0x20>)
    2bae:	3000      	adds	r0, #0
    2bb0:	bf18      	it	ne
    2bb2:	2001      	movne	r0, #1
    2bb4:	4b04      	ldr	r3, [pc, #16]	; (2bc8 <_ac_sync_init+0x24>)
    2bb6:	4798      	blx	r3
	device->hw = hw;
    2bb8:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    2bba:	4620      	mov	r0, r4
    2bbc:	4b03      	ldr	r3, [pc, #12]	; (2bcc <_ac_sync_init+0x28>)
    2bbe:	4798      	blx	r3
}
    2bc0:	bd38      	pop	{r3, r4, r5, pc}
    2bc2:	bf00      	nop
    2bc4:	00007d38 	.word	0x00007d38
    2bc8:	00002991 	.word	0x00002991
    2bcc:	00002b39 	.word	0x00002b39

00002bd0 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2bd0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2bd2:	f013 0f01 	tst.w	r3, #1
    2bd6:	d1fb      	bne.n	2bd0 <_adc_init>
    2bd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2bda:	f013 0f03 	tst.w	r3, #3
    2bde:	d1fb      	bne.n	2bd8 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    2be0:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    2be2:	f013 0f02 	tst.w	r3, #2
    2be6:	d12a      	bne.n	2c3e <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2be8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2bea:	f013 0f01 	tst.w	r3, #1
    2bee:	d1fb      	bne.n	2be8 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    2bf0:	8803      	ldrh	r3, [r0, #0]
    2bf2:	b29b      	uxth	r3, r3
    2bf4:	f043 0301 	orr.w	r3, r3, #1
    2bf8:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2bfa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2bfc:	f013 0f01 	tst.w	r3, #1
    2c00:	d1fb      	bne.n	2bfa <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2c02:	2216      	movs	r2, #22
    2c04:	4b0f      	ldr	r3, [pc, #60]	; (2c44 <_adc_init+0x74>)
    2c06:	fb02 3101 	mla	r1, r2, r1, r3
    2c0a:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    2c0c:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2c0e:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2c10:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2c12:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    2c14:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2c16:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    2c18:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    2c1a:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2c1c:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2c1e:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2c20:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    2c22:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2c24:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    2c26:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2c28:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    2c2a:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2c2c:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2c2e:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2c30:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2c32:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    2c34:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    2c36:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    2c38:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    2c3a:	2000      	movs	r0, #0
    2c3c:	4770      	bx	lr
		return ERR_DENIED;
    2c3e:	f06f 0010 	mvn.w	r0, #16
}
    2c42:	4770      	bx	lr
    2c44:	00007d4c 	.word	0x00007d4c

00002c48 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2c48:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2c4c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2c50:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    2c54:	b148      	cbz	r0, 2c6a <_adc_get_regs+0x22>
    2c56:	2801      	cmp	r0, #1
    2c58:	d009      	beq.n	2c6e <_adc_get_regs+0x26>
{
    2c5a:	b508      	push	{r3, lr}
	ASSERT(false);
    2c5c:	2291      	movs	r2, #145	; 0x91
    2c5e:	4905      	ldr	r1, [pc, #20]	; (2c74 <_adc_get_regs+0x2c>)
    2c60:	2000      	movs	r0, #0
    2c62:	4b05      	ldr	r3, [pc, #20]	; (2c78 <_adc_get_regs+0x30>)
    2c64:	4798      	blx	r3
	return 0;
    2c66:	2000      	movs	r0, #0
    2c68:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    2c6a:	2000      	movs	r0, #0
    2c6c:	4770      	bx	lr
    2c6e:	2001      	movs	r0, #1
    2c70:	4770      	bx	lr
    2c72:	bf00      	nop
    2c74:	00007d78 	.word	0x00007d78
    2c78:	00002991 	.word	0x00002991

00002c7c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2c7c:	b538      	push	{r3, r4, r5, lr}
    2c7e:	460c      	mov	r4, r1
	ASSERT(device);
    2c80:	4605      	mov	r5, r0
    2c82:	22d5      	movs	r2, #213	; 0xd5
    2c84:	4907      	ldr	r1, [pc, #28]	; (2ca4 <_adc_sync_init+0x28>)
    2c86:	3000      	adds	r0, #0
    2c88:	bf18      	it	ne
    2c8a:	2001      	movne	r0, #1
    2c8c:	4b06      	ldr	r3, [pc, #24]	; (2ca8 <_adc_sync_init+0x2c>)
    2c8e:	4798      	blx	r3

	device->hw = hw;
    2c90:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2c92:	4620      	mov	r0, r4
    2c94:	4b05      	ldr	r3, [pc, #20]	; (2cac <_adc_sync_init+0x30>)
    2c96:	4798      	blx	r3
    2c98:	4601      	mov	r1, r0
    2c9a:	4620      	mov	r0, r4
    2c9c:	4b04      	ldr	r3, [pc, #16]	; (2cb0 <_adc_sync_init+0x34>)
    2c9e:	4798      	blx	r3
}
    2ca0:	bd38      	pop	{r3, r4, r5, pc}
    2ca2:	bf00      	nop
    2ca4:	00007d78 	.word	0x00007d78
    2ca8:	00002991 	.word	0x00002991
    2cac:	00002c49 	.word	0x00002c49
    2cb0:	00002bd1 	.word	0x00002bd1

00002cb4 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2cb4:	0943      	lsrs	r3, r0, #5
    2cb6:	f000 001f 	and.w	r0, r0, #31
    2cba:	2201      	movs	r2, #1
    2cbc:	fa02 f000 	lsl.w	r0, r2, r0
    2cc0:	3340      	adds	r3, #64	; 0x40
    2cc2:	4a02      	ldr	r2, [pc, #8]	; (2ccc <_irq_set+0x18>)
    2cc4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2cc8:	4770      	bx	lr
    2cca:	bf00      	nop
    2ccc:	e000e100 	.word	0xe000e100

00002cd0 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2cd0:	f64b 3380 	movw	r3, #48000	; 0xbb80
    2cd4:	fb03 f000 	mul.w	r0, r3, r0
    2cd8:	4770      	bx	lr
	...

00002cdc <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2cdc:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2cde:	4a0c      	ldr	r2, [pc, #48]	; (2d10 <_init_chip+0x34>)
    2ce0:	8813      	ldrh	r3, [r2, #0]
    2ce2:	b29b      	uxth	r3, r3
    2ce4:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    2ce6:	4b0b      	ldr	r3, [pc, #44]	; (2d14 <_init_chip+0x38>)
    2ce8:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    2cea:	4b0b      	ldr	r3, [pc, #44]	; (2d18 <_init_chip+0x3c>)
    2cec:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2cee:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2cf2:	4c0a      	ldr	r4, [pc, #40]	; (2d1c <_init_chip+0x40>)
    2cf4:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    2cf6:	4b0a      	ldr	r3, [pc, #40]	; (2d20 <_init_chip+0x44>)
    2cf8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2cfa:	f240 70ff 	movw	r0, #2047	; 0x7ff
    2cfe:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2d00:	4a08      	ldr	r2, [pc, #32]	; (2d24 <_init_chip+0x48>)
    2d02:	6913      	ldr	r3, [r2, #16]
    2d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2d08:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    2d0a:	4b07      	ldr	r3, [pc, #28]	; (2d28 <_init_chip+0x4c>)
    2d0c:	4798      	blx	r3
    2d0e:	bd10      	pop	{r4, pc}
    2d10:	41004000 	.word	0x41004000
    2d14:	000031ad 	.word	0x000031ad
    2d18:	000030d5 	.word	0x000030d5
    2d1c:	0000302d 	.word	0x0000302d
    2d20:	000031d9 	.word	0x000031d9
    2d24:	40000800 	.word	0x40000800
    2d28:	00002e35 	.word	0x00002e35

00002d2c <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    2d2c:	b510      	push	{r4, lr}
    2d2e:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    2d30:	22f3      	movs	r2, #243	; 0xf3
    2d32:	4915      	ldr	r1, [pc, #84]	; (2d88 <_dac_init+0x5c>)
    2d34:	4815      	ldr	r0, [pc, #84]	; (2d8c <_dac_init+0x60>)
    2d36:	4284      	cmp	r4, r0
    2d38:	bf14      	ite	ne
    2d3a:	2000      	movne	r0, #0
    2d3c:	2001      	moveq	r0, #1
    2d3e:	4b14      	ldr	r3, [pc, #80]	; (2d90 <_dac_init+0x64>)
    2d40:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    2d42:	68a3      	ldr	r3, [r4, #8]
    2d44:	f013 0f01 	tst.w	r3, #1
    2d48:	d1fb      	bne.n	2d42 <_dac_init+0x16>
    2d4a:	68a3      	ldr	r3, [r4, #8]
    2d4c:	f013 0f03 	tst.w	r3, #3
    2d50:	d1fb      	bne.n	2d4a <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    2d52:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    2d54:	f013 0f02 	tst.w	r3, #2
    2d58:	d113      	bne.n	2d82 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    2d5a:	68a3      	ldr	r3, [r4, #8]
    2d5c:	f013 0f01 	tst.w	r3, #1
    2d60:	d1fb      	bne.n	2d5a <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    2d62:	7823      	ldrb	r3, [r4, #0]
    2d64:	f043 0301 	orr.w	r3, r3, #1
    2d68:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    2d6a:	68a3      	ldr	r3, [r4, #8]
    2d6c:	f013 0f01 	tst.w	r3, #1
    2d70:	d1fb      	bne.n	2d6a <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    2d72:	2000      	movs	r0, #0
    2d74:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    2d76:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    2d78:	81a0      	strh	r0, [r4, #12]
    2d7a:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    2d7c:	2301      	movs	r3, #1
    2d7e:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    2d80:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    2d82:	f06f 0003 	mvn.w	r0, #3
}
    2d86:	bd10      	pop	{r4, pc}
    2d88:	00007d90 	.word	0x00007d90
    2d8c:	43002400 	.word	0x43002400
    2d90:	00002991 	.word	0x00002991

00002d94 <_dac_sync_init>:
{
    2d94:	b538      	push	{r3, r4, r5, lr}
    2d96:	460c      	mov	r4, r1
	ASSERT(device);
    2d98:	4605      	mov	r5, r0
    2d9a:	2261      	movs	r2, #97	; 0x61
    2d9c:	4905      	ldr	r1, [pc, #20]	; (2db4 <_dac_sync_init+0x20>)
    2d9e:	3000      	adds	r0, #0
    2da0:	bf18      	it	ne
    2da2:	2001      	movne	r0, #1
    2da4:	4b04      	ldr	r3, [pc, #16]	; (2db8 <_dac_sync_init+0x24>)
    2da6:	4798      	blx	r3
	device->hw = hw;
    2da8:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    2daa:	4620      	mov	r0, r4
    2dac:	4b03      	ldr	r3, [pc, #12]	; (2dbc <_dac_sync_init+0x28>)
    2dae:	4798      	blx	r3
}
    2db0:	bd38      	pop	{r3, r4, r5, pc}
    2db2:	bf00      	nop
    2db4:	00007d90 	.word	0x00007d90
    2db8:	00002991 	.word	0x00002991
    2dbc:	00002d2d 	.word	0x00002d2d

00002dc0 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2dc0:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2dc2:	4a1a      	ldr	r2, [pc, #104]	; (2e2c <_dmac_handler+0x6c>)
    2dc4:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    2dc6:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    2dca:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    2dce:	4818      	ldr	r0, [pc, #96]	; (2e30 <_dmac_handler+0x70>)
    2dd0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2dd4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2dd8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2ddc:	f012 0f01 	tst.w	r2, #1
    2de0:	d10a      	bne.n	2df8 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    2de2:	011a      	lsls	r2, r3, #4
    2de4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2de8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2dec:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    2df0:	f012 0f02 	tst.w	r2, #2
    2df4:	d10b      	bne.n	2e0e <_dmac_handler+0x4e>
    2df6:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2df8:	011a      	lsls	r2, r3, #4
    2dfa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2dfe:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2e02:	2101      	movs	r1, #1
    2e04:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    2e08:	6843      	ldr	r3, [r0, #4]
    2e0a:	4798      	blx	r3
    2e0c:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2e0e:	011a      	lsls	r2, r3, #4
    2e10:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2e14:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2e18:	2102      	movs	r1, #2
    2e1a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2e1e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2e22:	4a03      	ldr	r2, [pc, #12]	; (2e30 <_dmac_handler+0x70>)
    2e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e28:	4798      	blx	r3
	}
}
    2e2a:	e7e4      	b.n	2df6 <_dmac_handler+0x36>
    2e2c:	4100a000 	.word	0x4100a000
    2e30:	20000550 	.word	0x20000550

00002e34 <_dma_init>:
{
    2e34:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    2e36:	4a33      	ldr	r2, [pc, #204]	; (2f04 <_dma_init+0xd0>)
    2e38:	8813      	ldrh	r3, [r2, #0]
    2e3a:	f023 0302 	bic.w	r3, r3, #2
    2e3e:	041b      	lsls	r3, r3, #16
    2e40:	0c1b      	lsrs	r3, r3, #16
    2e42:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2e44:	8853      	ldrh	r3, [r2, #2]
    2e46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    2e4a:	041b      	lsls	r3, r3, #16
    2e4c:	0c1b      	lsrs	r3, r3, #16
    2e4e:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2e50:	8813      	ldrh	r3, [r2, #0]
    2e52:	b29b      	uxth	r3, r3
    2e54:	f043 0301 	orr.w	r3, r3, #1
    2e58:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    2e5a:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2e5c:	f013 0f01 	tst.w	r3, #1
    2e60:	d1fb      	bne.n	2e5a <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    2e62:	4b28      	ldr	r3, [pc, #160]	; (2f04 <_dma_init+0xd0>)
    2e64:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2e68:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2e6a:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2e70:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2e72:	2000      	movs	r0, #0
    2e74:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2e76:	4a24      	ldr	r2, [pc, #144]	; (2f08 <_dma_init+0xd4>)
    2e78:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    2e7c:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2e7e:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    2e82:	639a      	str	r2, [r3, #56]	; 0x38
    2e84:	4b21      	ldr	r3, [pc, #132]	; (2f0c <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2e86:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    2e8a:	681c      	ldr	r4, [r3, #0]
    2e8c:	0101      	lsls	r1, r0, #4
    2e8e:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    2e92:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    2e96:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    2e98:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2e9a:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2e9e:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2ea0:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2ea4:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    2ea6:	4429      	add	r1, r5
    2ea8:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    2eac:	3001      	adds	r0, #1
    2eae:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2eb0:	2820      	cmp	r0, #32
    2eb2:	d1ea      	bne.n	2e8a <_dma_init+0x56>
    2eb4:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2eb6:	2001      	movs	r0, #1
    2eb8:	4915      	ldr	r1, [pc, #84]	; (2f10 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    2eba:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2ebc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2ec0:	d00b      	beq.n	2eda <_dma_init+0xa6>
    2ec2:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    2ec4:	2b24      	cmp	r3, #36	; 0x24
    2ec6:	d1f8      	bne.n	2eba <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2ec8:	4a0e      	ldr	r2, [pc, #56]	; (2f04 <_dma_init+0xd0>)
    2eca:	8813      	ldrh	r3, [r2, #0]
    2ecc:	b29b      	uxth	r3, r3
    2ece:	f043 0302 	orr.w	r3, r3, #2
    2ed2:	8013      	strh	r3, [r2, #0]
}
    2ed4:	2000      	movs	r0, #0
    2ed6:	bc30      	pop	{r4, r5}
    2ed8:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2eda:	095c      	lsrs	r4, r3, #5
    2edc:	f002 021f 	and.w	r2, r2, #31
    2ee0:	fa00 f202 	lsl.w	r2, r0, r2
    2ee4:	f104 0520 	add.w	r5, r4, #32
    2ee8:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2eec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ef0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ef4:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2ef8:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2efc:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    2f00:	e7df      	b.n	2ec2 <_dma_init+0x8e>
    2f02:	bf00      	nop
    2f04:	4100a000 	.word	0x4100a000
    2f08:	20000550 	.word	0x20000550
    2f0c:	00007da8 	.word	0x00007da8
    2f10:	e000e100 	.word	0xe000e100

00002f14 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    2f14:	b508      	push	{r3, lr}
	_dmac_handler();
    2f16:	4b01      	ldr	r3, [pc, #4]	; (2f1c <DMAC_0_Handler+0x8>)
    2f18:	4798      	blx	r3
    2f1a:	bd08      	pop	{r3, pc}
    2f1c:	00002dc1 	.word	0x00002dc1

00002f20 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    2f20:	b508      	push	{r3, lr}
	_dmac_handler();
    2f22:	4b01      	ldr	r3, [pc, #4]	; (2f28 <DMAC_1_Handler+0x8>)
    2f24:	4798      	blx	r3
    2f26:	bd08      	pop	{r3, pc}
    2f28:	00002dc1 	.word	0x00002dc1

00002f2c <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    2f2c:	b508      	push	{r3, lr}
	_dmac_handler();
    2f2e:	4b01      	ldr	r3, [pc, #4]	; (2f34 <DMAC_2_Handler+0x8>)
    2f30:	4798      	blx	r3
    2f32:	bd08      	pop	{r3, pc}
    2f34:	00002dc1 	.word	0x00002dc1

00002f38 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    2f38:	b508      	push	{r3, lr}
	_dmac_handler();
    2f3a:	4b01      	ldr	r3, [pc, #4]	; (2f40 <DMAC_3_Handler+0x8>)
    2f3c:	4798      	blx	r3
    2f3e:	bd08      	pop	{r3, pc}
    2f40:	00002dc1 	.word	0x00002dc1

00002f44 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    2f44:	b508      	push	{r3, lr}
	_dmac_handler();
    2f46:	4b01      	ldr	r3, [pc, #4]	; (2f4c <DMAC_4_Handler+0x8>)
    2f48:	4798      	blx	r3
    2f4a:	bd08      	pop	{r3, pc}
    2f4c:	00002dc1 	.word	0x00002dc1

00002f50 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2f50:	4a1e      	ldr	r2, [pc, #120]	; (2fcc <_ext_irq_init+0x7c>)
    2f52:	6853      	ldr	r3, [r2, #4]
    2f54:	f013 0f01 	tst.w	r3, #1
    2f58:	d1fb      	bne.n	2f52 <_ext_irq_init+0x2>
    2f5a:	4a1c      	ldr	r2, [pc, #112]	; (2fcc <_ext_irq_init+0x7c>)
    2f5c:	6853      	ldr	r3, [r2, #4]
    2f5e:	f013 0f03 	tst.w	r3, #3
    2f62:	d1fb      	bne.n	2f5c <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    2f64:	4b19      	ldr	r3, [pc, #100]	; (2fcc <_ext_irq_init+0x7c>)
    2f66:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    2f68:	f013 0f02 	tst.w	r3, #2
    2f6c:	d12b      	bne.n	2fc6 <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2f6e:	4a17      	ldr	r2, [pc, #92]	; (2fcc <_ext_irq_init+0x7c>)
    2f70:	6853      	ldr	r3, [r2, #4]
    2f72:	f013 0f01 	tst.w	r3, #1
    2f76:	d1fb      	bne.n	2f70 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    2f78:	4a14      	ldr	r2, [pc, #80]	; (2fcc <_ext_irq_init+0x7c>)
    2f7a:	7813      	ldrb	r3, [r2, #0]
    2f7c:	f043 0301 	orr.w	r3, r3, #1
    2f80:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2f82:	6853      	ldr	r3, [r2, #4]
    2f84:	f013 0f01 	tst.w	r3, #1
    2f88:	d1fb      	bne.n	2f82 <_ext_irq_init+0x32>
    2f8a:	4a10      	ldr	r2, [pc, #64]	; (2fcc <_ext_irq_init+0x7c>)
    2f8c:	6853      	ldr	r3, [r2, #4]
    2f8e:	f013 0f03 	tst.w	r3, #3
    2f92:	d1fb      	bne.n	2f8c <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    2f94:	4b0d      	ldr	r3, [pc, #52]	; (2fcc <_ext_irq_init+0x7c>)
    2f96:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    2f98:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    2f9c:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    2f9e:	2200      	movs	r2, #0
    2fa0:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2fa2:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    2fa4:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    2fa6:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    2fa8:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    2faa:	61da      	str	r2, [r3, #28]
    2fac:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2fae:	461a      	mov	r2, r3
    2fb0:	6853      	ldr	r3, [r2, #4]
    2fb2:	f013 0f03 	tst.w	r3, #3
    2fb6:	d1fb      	bne.n	2fb0 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    2fb8:	4a04      	ldr	r2, [pc, #16]	; (2fcc <_ext_irq_init+0x7c>)
    2fba:	7813      	ldrb	r3, [r2, #0]
    2fbc:	f043 0302 	orr.w	r3, r3, #2
    2fc0:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    2fc2:	2000      	movs	r0, #0
    2fc4:	4770      	bx	lr
		return ERR_DENIED;
    2fc6:	f06f 0010 	mvn.w	r0, #16
}
    2fca:	4770      	bx	lr
    2fcc:	40002800 	.word	0x40002800

00002fd0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2fd0:	b430      	push	{r4, r5}
    2fd2:	4814      	ldr	r0, [pc, #80]	; (3024 <_event_system_init+0x54>)
    2fd4:	f100 0543 	add.w	r5, r0, #67	; 0x43
    2fd8:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2fda:	4c13      	ldr	r4, [pc, #76]	; (3028 <_event_system_init+0x58>)
    2fdc:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2fde:	f813 1b01 	ldrb.w	r1, [r3], #1
    2fe2:	3248      	adds	r2, #72	; 0x48
    2fe4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    2fe8:	42ab      	cmp	r3, r5
    2fea:	d1f7      	bne.n	2fdc <_event_system_init+0xc>
    2fec:	480d      	ldr	r0, [pc, #52]	; (3024 <_event_system_init+0x54>)
    2fee:	f100 0442 	add.w	r4, r0, #66	; 0x42
    2ff2:	3080      	adds	r0, #128	; 0x80
    2ff4:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2ff6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2ffa:	00ca      	lsls	r2, r1, #3
    2ffc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3000:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    3004:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    3006:	f850 3f04 	ldr.w	r3, [r0, #4]!
    300a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    300c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    3010:	43db      	mvns	r3, r3
    3012:	b2db      	uxtb	r3, r3
    3014:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3018:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    301a:	2920      	cmp	r1, #32
    301c:	d1eb      	bne.n	2ff6 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    301e:	2000      	movs	r0, #0
    3020:	bc30      	pop	{r4, r5}
    3022:	4770      	bx	lr
    3024:	00007ea8 	.word	0x00007ea8
    3028:	4100e000 	.word	0x4100e000

0000302c <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    302c:	f010 0f01 	tst.w	r0, #1
    3030:	d002      	beq.n	3038 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3032:	4a23      	ldr	r2, [pc, #140]	; (30c0 <_gclk_init_generators_by_fref+0x94>)
    3034:	4b23      	ldr	r3, [pc, #140]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    3036:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    3038:	f010 0f02 	tst.w	r0, #2
    303c:	d002      	beq.n	3044 <_gclk_init_generators_by_fref+0x18>
    303e:	4a22      	ldr	r2, [pc, #136]	; (30c8 <_gclk_init_generators_by_fref+0x9c>)
    3040:	4b20      	ldr	r3, [pc, #128]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    3042:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    3044:	f010 0f04 	tst.w	r0, #4
    3048:	d002      	beq.n	3050 <_gclk_init_generators_by_fref+0x24>
    304a:	4a1d      	ldr	r2, [pc, #116]	; (30c0 <_gclk_init_generators_by_fref+0x94>)
    304c:	4b1d      	ldr	r3, [pc, #116]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    304e:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    3050:	f010 0f08 	tst.w	r0, #8
    3054:	d002      	beq.n	305c <_gclk_init_generators_by_fref+0x30>
    3056:	4a1a      	ldr	r2, [pc, #104]	; (30c0 <_gclk_init_generators_by_fref+0x94>)
    3058:	4b1a      	ldr	r3, [pc, #104]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    305a:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    305c:	f010 0f10 	tst.w	r0, #16
    3060:	d002      	beq.n	3068 <_gclk_init_generators_by_fref+0x3c>
    3062:	4a17      	ldr	r2, [pc, #92]	; (30c0 <_gclk_init_generators_by_fref+0x94>)
    3064:	4b17      	ldr	r3, [pc, #92]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    3066:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    3068:	f010 0f20 	tst.w	r0, #32
    306c:	d002      	beq.n	3074 <_gclk_init_generators_by_fref+0x48>
    306e:	4a14      	ldr	r2, [pc, #80]	; (30c0 <_gclk_init_generators_by_fref+0x94>)
    3070:	4b14      	ldr	r3, [pc, #80]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    3072:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    3074:	f010 0f40 	tst.w	r0, #64	; 0x40
    3078:	d002      	beq.n	3080 <_gclk_init_generators_by_fref+0x54>
    307a:	4a11      	ldr	r2, [pc, #68]	; (30c0 <_gclk_init_generators_by_fref+0x94>)
    307c:	4b11      	ldr	r3, [pc, #68]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    307e:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    3080:	f010 0f80 	tst.w	r0, #128	; 0x80
    3084:	d002      	beq.n	308c <_gclk_init_generators_by_fref+0x60>
    3086:	4a0e      	ldr	r2, [pc, #56]	; (30c0 <_gclk_init_generators_by_fref+0x94>)
    3088:	4b0e      	ldr	r3, [pc, #56]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    308a:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    308c:	f410 7f80 	tst.w	r0, #256	; 0x100
    3090:	d002      	beq.n	3098 <_gclk_init_generators_by_fref+0x6c>
    3092:	4a0b      	ldr	r2, [pc, #44]	; (30c0 <_gclk_init_generators_by_fref+0x94>)
    3094:	4b0b      	ldr	r3, [pc, #44]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    3096:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    3098:	f410 7f00 	tst.w	r0, #512	; 0x200
    309c:	d002      	beq.n	30a4 <_gclk_init_generators_by_fref+0x78>
    309e:	4a08      	ldr	r2, [pc, #32]	; (30c0 <_gclk_init_generators_by_fref+0x94>)
    30a0:	4b08      	ldr	r3, [pc, #32]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    30a2:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    30a4:	f410 6f80 	tst.w	r0, #1024	; 0x400
    30a8:	d002      	beq.n	30b0 <_gclk_init_generators_by_fref+0x84>
    30aa:	4a08      	ldr	r2, [pc, #32]	; (30cc <_gclk_init_generators_by_fref+0xa0>)
    30ac:	4b05      	ldr	r3, [pc, #20]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    30ae:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    30b0:	f410 6f00 	tst.w	r0, #2048	; 0x800
    30b4:	d002      	beq.n	30bc <_gclk_init_generators_by_fref+0x90>
    30b6:	4a06      	ldr	r2, [pc, #24]	; (30d0 <_gclk_init_generators_by_fref+0xa4>)
    30b8:	4b02      	ldr	r3, [pc, #8]	; (30c4 <_gclk_init_generators_by_fref+0x98>)
    30ba:	64da      	str	r2, [r3, #76]	; 0x4c
    30bc:	4770      	bx	lr
    30be:	bf00      	nop
    30c0:	00012b06 	.word	0x00012b06
    30c4:	40001c00 	.word	0x40001c00
    30c8:	00012306 	.word	0x00012306
    30cc:	00012b05 	.word	0x00012b05
    30d0:	00013b05 	.word	0x00013b05

000030d4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    30d4:	2201      	movs	r2, #1
    30d6:	4b01      	ldr	r3, [pc, #4]	; (30dc <_mclk_init+0x8>)
    30d8:	715a      	strb	r2, [r3, #5]
    30da:	4770      	bx	lr
    30dc:	40000800 	.word	0x40000800

000030e0 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    30e0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    30e2:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    30e4:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    30e6:	f012 0f01 	tst.w	r2, #1
    30ea:	d005      	beq.n	30f8 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    30ec:	2201      	movs	r2, #1
    30ee:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    30f0:	6803      	ldr	r3, [r0, #0]
    30f2:	b153      	cbz	r3, 310a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    30f4:	4798      	blx	r3
    30f6:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    30f8:	8a1a      	ldrh	r2, [r3, #16]
    30fa:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    30fc:	b12a      	cbz	r2, 310a <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    30fe:	f240 225e 	movw	r2, #606	; 0x25e
    3102:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    3104:	6843      	ldr	r3, [r0, #4]
    3106:	b103      	cbz	r3, 310a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    3108:	4798      	blx	r3
    310a:	bd08      	pop	{r3, pc}

0000310c <_flash_init>:
{
    310c:	b538      	push	{r3, r4, r5, lr}
    310e:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    3110:	4605      	mov	r5, r0
    3112:	b350      	cbz	r0, 316a <_flash_init+0x5e>
    3114:	4816      	ldr	r0, [pc, #88]	; (3170 <_flash_init+0x64>)
    3116:	4281      	cmp	r1, r0
    3118:	bf14      	ite	ne
    311a:	2000      	movne	r0, #0
    311c:	2001      	moveq	r0, #1
    311e:	2256      	movs	r2, #86	; 0x56
    3120:	4914      	ldr	r1, [pc, #80]	; (3174 <_flash_init+0x68>)
    3122:	4b15      	ldr	r3, [pc, #84]	; (3178 <_flash_init+0x6c>)
    3124:	4798      	blx	r3
	device->hw = hw;
    3126:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    3128:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    312a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    312e:	049b      	lsls	r3, r3, #18
    3130:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    3132:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    3134:	4b11      	ldr	r3, [pc, #68]	; (317c <_flash_init+0x70>)
    3136:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3138:	4b11      	ldr	r3, [pc, #68]	; (3180 <_flash_init+0x74>)
    313a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    313e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3142:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3146:	f3bf 8f6f 	isb	sy
    314a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    314e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3152:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3156:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    315a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    315e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3162:	6019      	str	r1, [r3, #0]
    3164:	601a      	str	r2, [r3, #0]
}
    3166:	2000      	movs	r0, #0
    3168:	bd38      	pop	{r3, r4, r5, pc}
    316a:	2000      	movs	r0, #0
    316c:	e7d7      	b.n	311e <_flash_init+0x12>
    316e:	bf00      	nop
    3170:	41004000 	.word	0x41004000
    3174:	00007fac 	.word	0x00007fac
    3178:	00002991 	.word	0x00002991
    317c:	20000ad0 	.word	0x20000ad0
    3180:	e000e100 	.word	0xe000e100

00003184 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    3184:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    3186:	4b02      	ldr	r3, [pc, #8]	; (3190 <NVMCTRL_0_Handler+0xc>)
    3188:	6818      	ldr	r0, [r3, #0]
    318a:	4b02      	ldr	r3, [pc, #8]	; (3194 <NVMCTRL_0_Handler+0x10>)
    318c:	4798      	blx	r3
    318e:	bd08      	pop	{r3, pc}
    3190:	20000ad0 	.word	0x20000ad0
    3194:	000030e1 	.word	0x000030e1

00003198 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    3198:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    319a:	4b02      	ldr	r3, [pc, #8]	; (31a4 <NVMCTRL_1_Handler+0xc>)
    319c:	6818      	ldr	r0, [r3, #0]
    319e:	4b02      	ldr	r3, [pc, #8]	; (31a8 <NVMCTRL_1_Handler+0x10>)
    31a0:	4798      	blx	r3
    31a2:	bd08      	pop	{r3, pc}
    31a4:	20000ad0 	.word	0x20000ad0
    31a8:	000030e1 	.word	0x000030e1

000031ac <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    31ac:	4b09      	ldr	r3, [pc, #36]	; (31d4 <_osc32kctrl_init_sources+0x28>)
    31ae:	f242 024e 	movw	r2, #8270	; 0x204e
    31b2:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    31b4:	2201      	movs	r2, #1
    31b6:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    31b8:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    31ba:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    31bc:	2200      	movs	r2, #0
    31be:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    31c0:	461a      	mov	r2, r3
    31c2:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    31c4:	f013 0f01 	tst.w	r3, #1
    31c8:	d0fb      	beq.n	31c2 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    31ca:	2204      	movs	r2, #4
    31cc:	4b01      	ldr	r3, [pc, #4]	; (31d4 <_osc32kctrl_init_sources+0x28>)
    31ce:	741a      	strb	r2, [r3, #16]
    31d0:	4770      	bx	lr
    31d2:	bf00      	nop
    31d4:	40001400 	.word	0x40001400

000031d8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    31d8:	4a2b      	ldr	r2, [pc, #172]	; (3288 <_oscctrl_init_referenced_generators+0xb0>)
    31da:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    31dc:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    31e0:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    31e4:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    31e6:	4b29      	ldr	r3, [pc, #164]	; (328c <_oscctrl_init_referenced_generators+0xb4>)
    31e8:	2200      	movs	r2, #0
    31ea:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    31ec:	4a28      	ldr	r2, [pc, #160]	; (3290 <_oscctrl_init_referenced_generators+0xb8>)
    31ee:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    31f0:	461a      	mov	r2, r3
    31f2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    31f6:	f013 0f10 	tst.w	r3, #16
    31fa:	d1fa      	bne.n	31f2 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    31fc:	2200      	movs	r2, #0
    31fe:	4b23      	ldr	r3, [pc, #140]	; (328c <_oscctrl_init_referenced_generators+0xb4>)
    3200:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3204:	461a      	mov	r2, r3
    3206:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    320a:	f013 0f04 	tst.w	r3, #4
    320e:	d1fa      	bne.n	3206 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3210:	2242      	movs	r2, #66	; 0x42
    3212:	4b1e      	ldr	r3, [pc, #120]	; (328c <_oscctrl_init_referenced_generators+0xb4>)
    3214:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3216:	461a      	mov	r2, r3
    3218:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    321c:	f013 0f02 	tst.w	r3, #2
    3220:	d1fa      	bne.n	3218 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    3222:	4b1a      	ldr	r3, [pc, #104]	; (328c <_oscctrl_init_referenced_generators+0xb4>)
    3224:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    3226:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3228:	461a      	mov	r2, r3
    322a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    322e:	f013 0f08 	tst.w	r3, #8
    3232:	d1fa      	bne.n	322a <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3234:	2282      	movs	r2, #130	; 0x82
    3236:	4b15      	ldr	r3, [pc, #84]	; (328c <_oscctrl_init_referenced_generators+0xb4>)
    3238:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    323c:	461a      	mov	r2, r3
    323e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    3242:	f013 0f04 	tst.w	r3, #4
    3246:	d1fa      	bne.n	323e <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    3248:	4b10      	ldr	r3, [pc, #64]	; (328c <_oscctrl_init_referenced_generators+0xb4>)
    324a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    324e:	f013 0f01 	tst.w	r3, #1
    3252:	d012      	beq.n	327a <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    3254:	4a0d      	ldr	r2, [pc, #52]	; (328c <_oscctrl_init_referenced_generators+0xb4>)
    3256:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    3258:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    325c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    3260:	d1f9      	bne.n	3256 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    3262:	4a09      	ldr	r2, [pc, #36]	; (3288 <_oscctrl_init_referenced_generators+0xb0>)
    3264:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    3266:	2b00      	cmp	r3, #0
    3268:	d1fc      	bne.n	3264 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    326a:	4a07      	ldr	r2, [pc, #28]	; (3288 <_oscctrl_init_referenced_generators+0xb0>)
    326c:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    326e:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3272:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3276:	6213      	str	r3, [r2, #32]
    3278:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    327a:	4a04      	ldr	r2, [pc, #16]	; (328c <_oscctrl_init_referenced_generators+0xb4>)
    327c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    327e:	f413 7f80 	tst.w	r3, #256	; 0x100
    3282:	d0fb      	beq.n	327c <_oscctrl_init_referenced_generators+0xa4>
    3284:	e7ed      	b.n	3262 <_oscctrl_init_referenced_generators+0x8a>
    3286:	bf00      	nop
    3288:	40001c00 	.word	0x40001c00
    328c:	40001000 	.word	0x40001000
    3290:	04010000 	.word	0x04010000

00003294 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    3294:	b500      	push	{lr}
    3296:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    3298:	4b0d      	ldr	r3, [pc, #52]	; (32d0 <RAMECC_Handler+0x3c>)
    329a:	789b      	ldrb	r3, [r3, #2]
    329c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    329e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    32a0:	9b01      	ldr	r3, [sp, #4]
    32a2:	f013 0f02 	tst.w	r3, #2
    32a6:	d006      	beq.n	32b6 <RAMECC_Handler+0x22>
    32a8:	4b0a      	ldr	r3, [pc, #40]	; (32d4 <RAMECC_Handler+0x40>)
    32aa:	681b      	ldr	r3, [r3, #0]
    32ac:	b11b      	cbz	r3, 32b6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    32ae:	4a08      	ldr	r2, [pc, #32]	; (32d0 <RAMECC_Handler+0x3c>)
    32b0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    32b2:	4798      	blx	r3
    32b4:	e009      	b.n	32ca <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    32b6:	9b01      	ldr	r3, [sp, #4]
    32b8:	f013 0f01 	tst.w	r3, #1
    32bc:	d005      	beq.n	32ca <RAMECC_Handler+0x36>
    32be:	4b05      	ldr	r3, [pc, #20]	; (32d4 <RAMECC_Handler+0x40>)
    32c0:	685b      	ldr	r3, [r3, #4]
    32c2:	b113      	cbz	r3, 32ca <RAMECC_Handler+0x36>
    32c4:	4a02      	ldr	r2, [pc, #8]	; (32d0 <RAMECC_Handler+0x3c>)
    32c6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    32c8:	4798      	blx	r3
	} else {
		return;
	}
}
    32ca:	b003      	add	sp, #12
    32cc:	f85d fb04 	ldr.w	pc, [sp], #4
    32d0:	41020000 	.word	0x41020000
    32d4:	20003e64 	.word	0x20003e64

000032d8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    32d8:	b470      	push	{r4, r5, r6}
    32da:	b087      	sub	sp, #28
    32dc:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    32de:	466c      	mov	r4, sp
    32e0:	4d0c      	ldr	r5, [pc, #48]	; (3314 <_sercom_get_hardware_index+0x3c>)
    32e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    32e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    32e6:	e895 0003 	ldmia.w	r5, {r0, r1}
    32ea:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    32ee:	9b00      	ldr	r3, [sp, #0]
    32f0:	42b3      	cmp	r3, r6
    32f2:	d00c      	beq.n	330e <_sercom_get_hardware_index+0x36>
    32f4:	4632      	mov	r2, r6
    32f6:	2001      	movs	r0, #1
    32f8:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    32fc:	4293      	cmp	r3, r2
    32fe:	d007      	beq.n	3310 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3300:	3001      	adds	r0, #1
    3302:	2806      	cmp	r0, #6
    3304:	d1f8      	bne.n	32f8 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    3306:	2000      	movs	r0, #0
}
    3308:	b007      	add	sp, #28
    330a:	bc70      	pop	{r4, r5, r6}
    330c:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    330e:	2000      	movs	r0, #0
			return i;
    3310:	b2c0      	uxtb	r0, r0
    3312:	e7f9      	b.n	3308 <_sercom_get_hardware_index+0x30>
    3314:	00007fcc 	.word	0x00007fcc

00003318 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3318:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    331a:	4b03      	ldr	r3, [pc, #12]	; (3328 <_sercom_get_irq_num+0x10>)
    331c:	4798      	blx	r3
    331e:	0080      	lsls	r0, r0, #2
    3320:	302e      	adds	r0, #46	; 0x2e
}
    3322:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    3326:	bd08      	pop	{r3, pc}
    3328:	000032d9 	.word	0x000032d9

0000332c <_usart_init>:
{
    332c:	b538      	push	{r3, r4, r5, lr}
    332e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3330:	4b33      	ldr	r3, [pc, #204]	; (3400 <_usart_init+0xd4>)
    3332:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    3334:	2803      	cmp	r0, #3
    3336:	d056      	beq.n	33e6 <_usart_init+0xba>
    3338:	2804      	cmp	r0, #4
    333a:	d052      	beq.n	33e2 <_usart_init+0xb6>
    333c:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    333e:	bf08      	it	eq
    3340:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    3342:	d006      	beq.n	3352 <_usart_init+0x26>
	ASSERT(false);
    3344:	f240 2263 	movw	r2, #611	; 0x263
    3348:	492e      	ldr	r1, [pc, #184]	; (3404 <_usart_init+0xd8>)
    334a:	2000      	movs	r0, #0
    334c:	4b2e      	ldr	r3, [pc, #184]	; (3408 <_usart_init+0xdc>)
    334e:	4798      	blx	r3
	return 0;
    3350:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3352:	69e3      	ldr	r3, [r4, #28]
    3354:	f013 0f01 	tst.w	r3, #1
    3358:	d1fb      	bne.n	3352 <_usart_init+0x26>
    335a:	69e3      	ldr	r3, [r4, #28]
    335c:	f013 0f03 	tst.w	r3, #3
    3360:	d1fb      	bne.n	335a <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3362:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    3364:	f013 0f02 	tst.w	r3, #2
    3368:	d147      	bne.n	33fa <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    336a:	69e3      	ldr	r3, [r4, #28]
    336c:	f013 0f01 	tst.w	r3, #1
    3370:	d1fb      	bne.n	336a <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    3372:	6823      	ldr	r3, [r4, #0]
    3374:	f043 0301 	orr.w	r3, r3, #1
    3378:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    337a:	69e3      	ldr	r3, [r4, #28]
    337c:	f013 0f01 	tst.w	r3, #1
    3380:	d1fb      	bne.n	337a <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    3382:	4610      	mov	r0, r2
    3384:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    3388:	4920      	ldr	r1, [pc, #128]	; (340c <_usart_init+0xe0>)
    338a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    338e:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3390:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    3392:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3394:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    3396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    3398:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    339a:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    339e:	d024      	beq.n	33ea <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    33a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    33a4:	4b19      	ldr	r3, [pc, #100]	; (340c <_usart_init+0xe0>)
    33a6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    33aa:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    33ac:	89a3      	ldrh	r3, [r4, #12]
    33ae:	f361 030c 	bfi	r3, r1, #0, #13
    33b2:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    33b4:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    33b8:	89a3      	ldrh	r3, [r4, #12]
    33ba:	f362 334f 	bfi	r3, r2, #13, #3
    33be:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    33c0:	4b12      	ldr	r3, [pc, #72]	; (340c <_usart_init+0xe0>)
    33c2:	0042      	lsls	r2, r0, #1
    33c4:	1811      	adds	r1, r2, r0
    33c6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    33ca:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    33ce:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    33d0:	4402      	add	r2, r0
    33d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    33d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    33da:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    33de:	2000      	movs	r0, #0
    33e0:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    33e2:	2201      	movs	r2, #1
    33e4:	e7b5      	b.n	3352 <_usart_init+0x26>
    33e6:	2200      	movs	r2, #0
    33e8:	e7b3      	b.n	3352 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    33ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    33ee:	4b07      	ldr	r3, [pc, #28]	; (340c <_usart_init+0xe0>)
    33f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    33f4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    33f6:	81a3      	strh	r3, [r4, #12]
    33f8:	e7e2      	b.n	33c0 <_usart_init+0x94>
		return ERR_DENIED;
    33fa:	f06f 0010 	mvn.w	r0, #16
}
    33fe:	bd38      	pop	{r3, r4, r5, pc}
    3400:	000032d9 	.word	0x000032d9
    3404:	00008058 	.word	0x00008058
    3408:	00002991 	.word	0x00002991
    340c:	00007fcc 	.word	0x00007fcc

00003410 <_usart_async_init>:
{
    3410:	b570      	push	{r4, r5, r6, lr}
    3412:	460d      	mov	r5, r1
	ASSERT(device);
    3414:	4606      	mov	r6, r0
    3416:	22da      	movs	r2, #218	; 0xda
    3418:	4916      	ldr	r1, [pc, #88]	; (3474 <_usart_async_init+0x64>)
    341a:	3000      	adds	r0, #0
    341c:	bf18      	it	ne
    341e:	2001      	movne	r0, #1
    3420:	4b15      	ldr	r3, [pc, #84]	; (3478 <_usart_async_init+0x68>)
    3422:	4798      	blx	r3
	init_status = _usart_init(hw);
    3424:	4628      	mov	r0, r5
    3426:	4b15      	ldr	r3, [pc, #84]	; (347c <_usart_async_init+0x6c>)
    3428:	4798      	blx	r3
	if (init_status) {
    342a:	4604      	mov	r4, r0
    342c:	b9f8      	cbnz	r0, 346e <_usart_async_init+0x5e>
	device->hw = hw;
    342e:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    3430:	4628      	mov	r0, r5
    3432:	4b13      	ldr	r3, [pc, #76]	; (3480 <_usart_async_init+0x70>)
    3434:	4798      	blx	r3
		irq = irq +2;
    3436:	3002      	adds	r0, #2
    3438:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    343a:	f000 031f 	and.w	r3, r0, #31
    343e:	2201      	movs	r2, #1
    3440:	409a      	lsls	r2, r3
    3442:	0943      	lsrs	r3, r0, #5
    3444:	009b      	lsls	r3, r3, #2
    3446:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    344a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    344e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3452:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3456:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    345a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    345e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    3462:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    3466:	21e0      	movs	r1, #224	; 0xe0
    3468:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    346c:	601a      	str	r2, [r3, #0]
}
    346e:	4620      	mov	r0, r4
    3470:	bd70      	pop	{r4, r5, r6, pc}
    3472:	bf00      	nop
    3474:	00008058 	.word	0x00008058
    3478:	00002991 	.word	0x00002991
    347c:	0000332d 	.word	0x0000332d
    3480:	00003319 	.word	0x00003319

00003484 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3484:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3486:	69d3      	ldr	r3, [r2, #28]
    3488:	f013 0f03 	tst.w	r3, #3
    348c:	d1fb      	bne.n	3486 <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    348e:	6813      	ldr	r3, [r2, #0]
    3490:	f043 0302 	orr.w	r3, r3, #2
    3494:	6013      	str	r3, [r2, #0]
    3496:	4770      	bx	lr

00003498 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3498:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    349a:	6299      	str	r1, [r3, #40]	; 0x28
    349c:	4770      	bx	lr

0000349e <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    349e:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    34a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    34a2:	b2c0      	uxtb	r0, r0
    34a4:	4770      	bx	lr

000034a6 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    34a6:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    34a8:	7e18      	ldrb	r0, [r3, #24]
}
    34aa:	f000 0001 	and.w	r0, r0, #1
    34ae:	4770      	bx	lr

000034b0 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    34b0:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    34b2:	7e18      	ldrb	r0, [r3, #24]
}
    34b4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    34b8:	4770      	bx	lr
	...

000034bc <_usart_async_set_irq_state>:
{
    34bc:	b570      	push	{r4, r5, r6, lr}
    34be:	460c      	mov	r4, r1
    34c0:	4616      	mov	r6, r2
	ASSERT(device);
    34c2:	4605      	mov	r5, r0
    34c4:	f240 2245 	movw	r2, #581	; 0x245
    34c8:	4915      	ldr	r1, [pc, #84]	; (3520 <_usart_async_set_irq_state+0x64>)
    34ca:	3000      	adds	r0, #0
    34cc:	bf18      	it	ne
    34ce:	2001      	movne	r0, #1
    34d0:	4b14      	ldr	r3, [pc, #80]	; (3524 <_usart_async_set_irq_state+0x68>)
    34d2:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    34d4:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    34d8:	d10d      	bne.n	34f6 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    34da:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    34dc:	b92e      	cbnz	r6, 34ea <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    34de:	2201      	movs	r2, #1
    34e0:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    34e2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    34e4:	2202      	movs	r2, #2
    34e6:	751a      	strb	r2, [r3, #20]
    34e8:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    34ea:	2201      	movs	r2, #1
    34ec:	759a      	strb	r2, [r3, #22]
    34ee:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    34f0:	2202      	movs	r2, #2
    34f2:	759a      	strb	r2, [r3, #22]
    34f4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    34f6:	2c01      	cmp	r4, #1
    34f8:	d002      	beq.n	3500 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    34fa:	2c03      	cmp	r4, #3
    34fc:	d008      	beq.n	3510 <_usart_async_set_irq_state+0x54>
    34fe:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    3500:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3502:	b916      	cbnz	r6, 350a <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    3504:	2204      	movs	r2, #4
    3506:	751a      	strb	r2, [r3, #20]
    3508:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    350a:	2204      	movs	r2, #4
    350c:	759a      	strb	r2, [r3, #22]
    350e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    3510:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3512:	b116      	cbz	r6, 351a <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    3514:	2280      	movs	r2, #128	; 0x80
    3516:	759a      	strb	r2, [r3, #22]
}
    3518:	e7f1      	b.n	34fe <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    351a:	2280      	movs	r2, #128	; 0x80
    351c:	751a      	strb	r2, [r3, #20]
    351e:	bd70      	pop	{r4, r5, r6, pc}
    3520:	00008058 	.word	0x00008058
    3524:	00002991 	.word	0x00002991

00003528 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3528:	4b03      	ldr	r3, [pc, #12]	; (3538 <_delay_init+0x10>)
    352a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    352e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3530:	2205      	movs	r2, #5
    3532:	601a      	str	r2, [r3, #0]
    3534:	4770      	bx	lr
    3536:	bf00      	nop
    3538:	e000e010 	.word	0xe000e010

0000353c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    353c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    353e:	b303      	cbz	r3, 3582 <_delay_cycles+0x46>
{
    3540:	b430      	push	{r4, r5}
    3542:	1e5d      	subs	r5, r3, #1
    3544:	b2ed      	uxtb	r5, r5
	while (n--) {
    3546:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    3548:	4a12      	ldr	r2, [pc, #72]	; (3594 <_delay_cycles+0x58>)
    354a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    354e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    3550:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3552:	6813      	ldr	r3, [r2, #0]
    3554:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3558:	d0fb      	beq.n	3552 <_delay_cycles+0x16>
	while (n--) {
    355a:	3801      	subs	r0, #1
    355c:	b2c0      	uxtb	r0, r0
    355e:	28ff      	cmp	r0, #255	; 0xff
    3560:	d1f5      	bne.n	354e <_delay_cycles+0x12>
    3562:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    3566:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    356a:	3101      	adds	r1, #1
    356c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    356e:	4b09      	ldr	r3, [pc, #36]	; (3594 <_delay_cycles+0x58>)
    3570:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3572:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3574:	461a      	mov	r2, r3
    3576:	6813      	ldr	r3, [r2, #0]
    3578:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    357c:	d0fb      	beq.n	3576 <_delay_cycles+0x3a>
		;
}
    357e:	bc30      	pop	{r4, r5}
    3580:	4770      	bx	lr
	SysTick->LOAD = buf;
    3582:	4b04      	ldr	r3, [pc, #16]	; (3594 <_delay_cycles+0x58>)
    3584:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    3586:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    3588:	461a      	mov	r2, r3
    358a:	6813      	ldr	r3, [r2, #0]
    358c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3590:	d0fb      	beq.n	358a <_delay_cycles+0x4e>
    3592:	4770      	bx	lr
    3594:	e000e010 	.word	0xe000e010

00003598 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    3598:	b470      	push	{r4, r5, r6}
    359a:	b087      	sub	sp, #28
    359c:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    359e:	ac01      	add	r4, sp, #4
    35a0:	4d14      	ldr	r5, [pc, #80]	; (35f4 <_get_irq_num+0x5c>)
    35a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    35a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    35a6:	682b      	ldr	r3, [r5, #0]
    35a8:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    35aa:	42b0      	cmp	r0, r6
    35ac:	d017      	beq.n	35de <_get_irq_num+0x46>
    35ae:	4631      	mov	r1, r6
    35b0:	2301      	movs	r3, #1
    35b2:	a801      	add	r0, sp, #4
    35b4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    35b8:	428a      	cmp	r2, r1
    35ba:	d006      	beq.n	35ca <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    35bc:	3301      	adds	r3, #1
    35be:	2b05      	cmp	r3, #5
    35c0:	d1f8      	bne.n	35b4 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    35c2:	2055      	movs	r0, #85	; 0x55
}
    35c4:	b007      	add	sp, #28
    35c6:	bc70      	pop	{r4, r5, r6}
    35c8:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    35ca:	b2db      	uxtb	r3, r3
    35cc:	2b04      	cmp	r3, #4
    35ce:	d80c      	bhi.n	35ea <_get_irq_num+0x52>
    35d0:	e8df f003 	tbb	[pc, r3]
    35d4:	070d0305 	.word	0x070d0305
    35d8:	09          	.byte	0x09
    35d9:	00          	.byte	0x00
		return TCC1_0_IRQn;
    35da:	205c      	movs	r0, #92	; 0x5c
    35dc:	e7f2      	b.n	35c4 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    35de:	2055      	movs	r0, #85	; 0x55
    35e0:	e7f0      	b.n	35c4 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    35e2:	2065      	movs	r0, #101	; 0x65
    35e4:	e7ee      	b.n	35c4 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    35e6:	2068      	movs	r0, #104	; 0x68
    35e8:	e7ec      	b.n	35c4 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    35ea:	2089      	movs	r0, #137	; 0x89
    35ec:	e7ea      	b.n	35c4 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    35ee:	2061      	movs	r0, #97	; 0x61
    35f0:	e7e8      	b.n	35c4 <_get_irq_num+0x2c>
    35f2:	bf00      	nop
    35f4:	00008074 	.word	0x00008074

000035f8 <_tcc_timer_deinit>:
{
    35f8:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    35fa:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    35fc:	4620      	mov	r0, r4
    35fe:	4b10      	ldr	r3, [pc, #64]	; (3640 <_tcc_timer_deinit+0x48>)
    3600:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3602:	0943      	lsrs	r3, r0, #5
    3604:	f000 001f 	and.w	r0, r0, #31
    3608:	2201      	movs	r2, #1
    360a:	fa02 f000 	lsl.w	r0, r2, r0
    360e:	3320      	adds	r3, #32
    3610:	4a0c      	ldr	r2, [pc, #48]	; (3644 <_tcc_timer_deinit+0x4c>)
    3612:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3616:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    361a:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    361e:	68a3      	ldr	r3, [r4, #8]
    3620:	f013 0f03 	tst.w	r3, #3
    3624:	d1fb      	bne.n	361e <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    3626:	6823      	ldr	r3, [r4, #0]
    3628:	f023 0302 	bic.w	r3, r3, #2
    362c:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    362e:	68a3      	ldr	r3, [r4, #8]
    3630:	f013 0f01 	tst.w	r3, #1
    3634:	d1fb      	bne.n	362e <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    3636:	6823      	ldr	r3, [r4, #0]
    3638:	f043 0301 	orr.w	r3, r3, #1
    363c:	6023      	str	r3, [r4, #0]
    363e:	bd10      	pop	{r4, pc}
    3640:	00003599 	.word	0x00003599
    3644:	e000e100 	.word	0xe000e100

00003648 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    3648:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    364a:	6893      	ldr	r3, [r2, #8]
    364c:	f013 0f03 	tst.w	r3, #3
    3650:	d1fb      	bne.n	364a <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    3652:	6813      	ldr	r3, [r2, #0]
    3654:	f043 0302 	orr.w	r3, r3, #2
    3658:	6013      	str	r3, [r2, #0]
    365a:	4770      	bx	lr

0000365c <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    365c:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    365e:	6893      	ldr	r3, [r2, #8]
    3660:	f013 0f03 	tst.w	r3, #3
    3664:	d1fb      	bne.n	365e <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    3666:	6813      	ldr	r3, [r2, #0]
    3668:	f023 0302 	bic.w	r3, r3, #2
    366c:	6013      	str	r3, [r2, #0]
    366e:	4770      	bx	lr

00003670 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    3670:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    3672:	6419      	str	r1, [r3, #64]	; 0x40
    3674:	4770      	bx	lr

00003676 <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    3676:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    3678:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    367a:	4770      	bx	lr

0000367c <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    367c:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    367e:	6893      	ldr	r3, [r2, #8]
    3680:	f013 0f03 	tst.w	r3, #3
    3684:	d1fb      	bne.n	367e <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    3686:	6810      	ldr	r0, [r2, #0]
}
    3688:	f3c0 0040 	ubfx	r0, r0, #1, #1
    368c:	4770      	bx	lr

0000368e <tcc_interrupt_handler>:
{
    368e:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    3690:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    3692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    3694:	f012 0f01 	tst.w	r2, #1
    3698:	d100      	bne.n	369c <tcc_interrupt_handler+0xe>
    369a:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    369c:	2201      	movs	r2, #1
    369e:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    36a0:	6803      	ldr	r3, [r0, #0]
    36a2:	4798      	blx	r3
}
    36a4:	e7f9      	b.n	369a <tcc_interrupt_handler+0xc>
	...

000036a8 <_tcc_timer_init>:
{
    36a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36aa:	b087      	sub	sp, #28
    36ac:	4605      	mov	r5, r0
    36ae:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    36b0:	ae01      	add	r6, sp, #4
    36b2:	4f4e      	ldr	r7, [pc, #312]	; (37ec <_tcc_timer_init+0x144>)
    36b4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    36b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    36b8:	683b      	ldr	r3, [r7, #0]
    36ba:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    36bc:	42a0      	cmp	r0, r4
    36be:	d00c      	beq.n	36da <_tcc_timer_init+0x32>
    36c0:	4621      	mov	r1, r4
    36c2:	2301      	movs	r3, #1
    36c4:	a801      	add	r0, sp, #4
    36c6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    36ca:	428a      	cmp	r2, r1
    36cc:	d006      	beq.n	36dc <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    36ce:	3301      	adds	r3, #1
    36d0:	2b05      	cmp	r3, #5
    36d2:	d1f8      	bne.n	36c6 <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    36d4:	2600      	movs	r6, #0
			return i;
    36d6:	b276      	sxtb	r6, r6
    36d8:	e015      	b.n	3706 <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    36da:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    36dc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    36e0:	d073      	beq.n	37ca <_tcc_timer_init+0x122>
    36e2:	2b01      	cmp	r3, #1
    36e4:	d06b      	beq.n	37be <_tcc_timer_init+0x116>
    36e6:	2b02      	cmp	r3, #2
    36e8:	d06b      	beq.n	37c2 <_tcc_timer_init+0x11a>
    36ea:	2b03      	cmp	r3, #3
    36ec:	d06b      	beq.n	37c6 <_tcc_timer_init+0x11e>
    36ee:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    36f0:	bf08      	it	eq
    36f2:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    36f4:	d0ef      	beq.n	36d6 <_tcc_timer_init+0x2e>
	ASSERT(false);
    36f6:	f240 128b 	movw	r2, #395	; 0x18b
    36fa:	493d      	ldr	r1, [pc, #244]	; (37f0 <_tcc_timer_init+0x148>)
    36fc:	2000      	movs	r0, #0
    36fe:	4b3d      	ldr	r3, [pc, #244]	; (37f4 <_tcc_timer_init+0x14c>)
    3700:	4798      	blx	r3
	return -1;
    3702:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    3706:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    3708:	22e4      	movs	r2, #228	; 0xe4
    370a:	4939      	ldr	r1, [pc, #228]	; (37f0 <_tcc_timer_init+0x148>)
    370c:	2001      	movs	r0, #1
    370e:	4b39      	ldr	r3, [pc, #228]	; (37f4 <_tcc_timer_init+0x14c>)
    3710:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3712:	68a3      	ldr	r3, [r4, #8]
    3714:	f013 0f01 	tst.w	r3, #1
    3718:	d1fb      	bne.n	3712 <_tcc_timer_init+0x6a>
    371a:	68a3      	ldr	r3, [r4, #8]
    371c:	f013 0f03 	tst.w	r3, #3
    3720:	d1fb      	bne.n	371a <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    3722:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    3724:	f013 0f02 	tst.w	r3, #2
    3728:	d15d      	bne.n	37e6 <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    372a:	68a3      	ldr	r3, [r4, #8]
    372c:	f013 0f01 	tst.w	r3, #1
    3730:	d1fb      	bne.n	372a <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    3732:	6823      	ldr	r3, [r4, #0]
    3734:	f043 0301 	orr.w	r3, r3, #1
    3738:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    373a:	68a3      	ldr	r3, [r4, #8]
    373c:	f013 0f01 	tst.w	r3, #1
    3740:	d1fb      	bne.n	373a <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    3742:	4a2a      	ldr	r2, [pc, #168]	; (37ec <_tcc_timer_init+0x144>)
    3744:	00f1      	lsls	r1, r6, #3
    3746:	198b      	adds	r3, r1, r6
    3748:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    374c:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    374e:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    3750:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    3752:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    3754:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    3756:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    3758:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    375a:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    375c:	440e      	add	r6, r1
    375e:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    3762:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    3764:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    3766:	2301      	movs	r3, #1
    3768:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    376a:	4b23      	ldr	r3, [pc, #140]	; (37f8 <_tcc_timer_init+0x150>)
    376c:	429c      	cmp	r4, r3
    376e:	d02e      	beq.n	37ce <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    3770:	4b22      	ldr	r3, [pc, #136]	; (37fc <_tcc_timer_init+0x154>)
    3772:	429c      	cmp	r4, r3
    3774:	d02e      	beq.n	37d4 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    3776:	4b22      	ldr	r3, [pc, #136]	; (3800 <_tcc_timer_init+0x158>)
    3778:	429c      	cmp	r4, r3
    377a:	d02e      	beq.n	37da <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    377c:	4b21      	ldr	r3, [pc, #132]	; (3804 <_tcc_timer_init+0x15c>)
    377e:	429c      	cmp	r4, r3
    3780:	d02e      	beq.n	37e0 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    3782:	4b21      	ldr	r3, [pc, #132]	; (3808 <_tcc_timer_init+0x160>)
    3784:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    3786:	bf04      	itt	eq
    3788:	4b20      	ldreq	r3, [pc, #128]	; (380c <_tcc_timer_init+0x164>)
    378a:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    378c:	4620      	mov	r0, r4
    378e:	4b20      	ldr	r3, [pc, #128]	; (3810 <_tcc_timer_init+0x168>)
    3790:	4798      	blx	r3
    3792:	f000 031f 	and.w	r3, r0, #31
    3796:	2201      	movs	r2, #1
    3798:	409a      	lsls	r2, r3
    379a:	0943      	lsrs	r3, r0, #5
    379c:	009b      	lsls	r3, r3, #2
    379e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    37a2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    37a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    37aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    37ae:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    37b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    37b6:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    37b8:	2000      	movs	r0, #0
}
    37ba:	b007      	add	sp, #28
    37bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    37be:	2601      	movs	r6, #1
    37c0:	e789      	b.n	36d6 <_tcc_timer_init+0x2e>
    37c2:	2602      	movs	r6, #2
    37c4:	e787      	b.n	36d6 <_tcc_timer_init+0x2e>
    37c6:	2603      	movs	r6, #3
    37c8:	e785      	b.n	36d6 <_tcc_timer_init+0x2e>
    37ca:	2600      	movs	r6, #0
    37cc:	e783      	b.n	36d6 <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    37ce:	4b0f      	ldr	r3, [pc, #60]	; (380c <_tcc_timer_init+0x164>)
    37d0:	601d      	str	r5, [r3, #0]
    37d2:	e7d3      	b.n	377c <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    37d4:	4b0d      	ldr	r3, [pc, #52]	; (380c <_tcc_timer_init+0x164>)
    37d6:	605d      	str	r5, [r3, #4]
    37d8:	e7d3      	b.n	3782 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    37da:	4b0c      	ldr	r3, [pc, #48]	; (380c <_tcc_timer_init+0x164>)
    37dc:	609d      	str	r5, [r3, #8]
    37de:	e7d5      	b.n	378c <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    37e0:	4b0a      	ldr	r3, [pc, #40]	; (380c <_tcc_timer_init+0x164>)
    37e2:	60dd      	str	r5, [r3, #12]
    37e4:	e7d2      	b.n	378c <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    37e6:	f06f 0010 	mvn.w	r0, #16
    37ea:	e7e6      	b.n	37ba <_tcc_timer_init+0x112>
    37ec:	00008074 	.word	0x00008074
    37f0:	0000813c 	.word	0x0000813c
    37f4:	00002991 	.word	0x00002991
    37f8:	41016000 	.word	0x41016000
    37fc:	41018000 	.word	0x41018000
    3800:	42000c00 	.word	0x42000c00
    3804:	42001000 	.word	0x42001000
    3808:	43001000 	.word	0x43001000
    380c:	20000ad4 	.word	0x20000ad4
    3810:	00003599 	.word	0x00003599

00003814 <_tcc_timer_set_irq>:
{
    3814:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    3816:	68c0      	ldr	r0, [r0, #12]
    3818:	4b02      	ldr	r3, [pc, #8]	; (3824 <_tcc_timer_set_irq+0x10>)
    381a:	4798      	blx	r3
    381c:	4b02      	ldr	r3, [pc, #8]	; (3828 <_tcc_timer_set_irq+0x14>)
    381e:	4798      	blx	r3
    3820:	bd08      	pop	{r3, pc}
    3822:	bf00      	nop
    3824:	00003599 	.word	0x00003599
    3828:	00002cb5 	.word	0x00002cb5

0000382c <_tcc_get_timer>:
}
    382c:	4800      	ldr	r0, [pc, #0]	; (3830 <_tcc_get_timer+0x4>)
    382e:	4770      	bx	lr
    3830:	2000006c 	.word	0x2000006c

00003834 <TCC0_0_Handler>:
{
    3834:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    3836:	4b02      	ldr	r3, [pc, #8]	; (3840 <TCC0_0_Handler+0xc>)
    3838:	6818      	ldr	r0, [r3, #0]
    383a:	4b02      	ldr	r3, [pc, #8]	; (3844 <TCC0_0_Handler+0x10>)
    383c:	4798      	blx	r3
    383e:	bd08      	pop	{r3, pc}
    3840:	20000ad4 	.word	0x20000ad4
    3844:	0000368f 	.word	0x0000368f

00003848 <TCC1_0_Handler>:
{
    3848:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    384a:	4b02      	ldr	r3, [pc, #8]	; (3854 <TCC1_0_Handler+0xc>)
    384c:	6858      	ldr	r0, [r3, #4]
    384e:	4b02      	ldr	r3, [pc, #8]	; (3858 <TCC1_0_Handler+0x10>)
    3850:	4798      	blx	r3
    3852:	bd08      	pop	{r3, pc}
    3854:	20000ad4 	.word	0x20000ad4
    3858:	0000368f 	.word	0x0000368f

0000385c <TCC2_0_Handler>:
{
    385c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    385e:	4b02      	ldr	r3, [pc, #8]	; (3868 <TCC2_0_Handler+0xc>)
    3860:	6898      	ldr	r0, [r3, #8]
    3862:	4b02      	ldr	r3, [pc, #8]	; (386c <TCC2_0_Handler+0x10>)
    3864:	4798      	blx	r3
    3866:	bd08      	pop	{r3, pc}
    3868:	20000ad4 	.word	0x20000ad4
    386c:	0000368f 	.word	0x0000368f

00003870 <TCC3_0_Handler>:
{
    3870:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    3872:	4b02      	ldr	r3, [pc, #8]	; (387c <TCC3_0_Handler+0xc>)
    3874:	68d8      	ldr	r0, [r3, #12]
    3876:	4b02      	ldr	r3, [pc, #8]	; (3880 <TCC3_0_Handler+0x10>)
    3878:	4798      	blx	r3
    387a:	bd08      	pop	{r3, pc}
    387c:	20000ad4 	.word	0x20000ad4
    3880:	0000368f 	.word	0x0000368f

00003884 <TCC4_0_Handler>:
{
    3884:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    3886:	4b02      	ldr	r3, [pc, #8]	; (3890 <TCC4_0_Handler+0xc>)
    3888:	6918      	ldr	r0, [r3, #16]
    388a:	4b02      	ldr	r3, [pc, #8]	; (3894 <TCC4_0_Handler+0x10>)
    388c:	4798      	blx	r3
    388e:	bd08      	pop	{r3, pc}
    3890:	20000ad4 	.word	0x20000ad4
    3894:	0000368f 	.word	0x0000368f

00003898 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3898:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    389a:	6913      	ldr	r3, [r2, #16]
    389c:	f013 0f03 	tst.w	r3, #3
    38a0:	d1fb      	bne.n	389a <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    38a2:	6813      	ldr	r3, [r2, #0]
    38a4:	f043 0302 	orr.w	r3, r3, #2
    38a8:	6013      	str	r3, [r2, #0]
    38aa:	4770      	bx	lr

000038ac <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    38ac:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    38ae:	6913      	ldr	r3, [r2, #16]
    38b0:	f013 0f03 	tst.w	r3, #3
    38b4:	d1fb      	bne.n	38ae <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    38b6:	6813      	ldr	r3, [r2, #0]
    38b8:	f023 0302 	bic.w	r3, r3, #2
    38bc:	6013      	str	r3, [r2, #0]
    38be:	4770      	bx	lr

000038c0 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    38c0:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    38c2:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    38c4:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    38c8:	2b02      	cmp	r3, #2
    38ca:	d00b      	beq.n	38e4 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    38cc:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    38ce:	f013 0f0c 	tst.w	r3, #12
    38d2:	d009      	beq.n	38e8 <_tc_timer_set_period+0x28>
    38d4:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    38d6:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    38da:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    38dc:	bf04      	itt	eq
    38de:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    38e0:	76d1      	strbeq	r1, [r2, #27]
    38e2:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    38e4:	61d1      	str	r1, [r2, #28]
    38e6:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    38e8:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    38ea:	8391      	strh	r1, [r2, #28]
    38ec:	4770      	bx	lr

000038ee <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    38ee:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    38f0:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    38f2:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    38f6:	2b02      	cmp	r3, #2
    38f8:	d00c      	beq.n	3914 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    38fa:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    38fc:	f013 0f0c 	tst.w	r3, #12
    3900:	d00a      	beq.n	3918 <_tc_timer_get_period+0x2a>
    3902:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3904:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3908:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    390a:	bf06      	itte	eq
    390c:	7ed0      	ldrbeq	r0, [r2, #27]
    390e:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    3910:	2000      	movne	r0, #0
}
    3912:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    3914:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    3916:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    3918:	8b90      	ldrh	r0, [r2, #28]
    391a:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    391c:	4770      	bx	lr

0000391e <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    391e:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3920:	6913      	ldr	r3, [r2, #16]
    3922:	f013 0f03 	tst.w	r3, #3
    3926:	d1fb      	bne.n	3920 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3928:	6810      	ldr	r0, [r2, #0]
}
    392a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    392e:	4770      	bx	lr

00003930 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    3930:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    3932:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3934:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3936:	f012 0f01 	tst.w	r2, #1
    393a:	d100      	bne.n	393e <tc_interrupt_handler+0xe>
    393c:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    393e:	2201      	movs	r2, #1
    3940:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    3942:	6803      	ldr	r3, [r0, #0]
    3944:	4798      	blx	r3
	}
}
    3946:	e7f9      	b.n	393c <tc_interrupt_handler+0xc>

00003948 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    3948:	b538      	push	{r3, r4, r5, lr}
    394a:	4605      	mov	r5, r0
	void *const hw = device->hw;
    394c:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    394e:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3950:	f013 0f01 	tst.w	r3, #1
    3954:	d004      	beq.n	3960 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3956:	2301      	movs	r3, #1
    3958:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    395a:	6803      	ldr	r3, [r0, #0]
    395c:	b103      	cbz	r3, 3960 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    395e:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    3960:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    3962:	f013 0f02 	tst.w	r3, #2
    3966:	d005      	beq.n	3974 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3968:	2302      	movs	r3, #2
    396a:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    396c:	686b      	ldr	r3, [r5, #4]
    396e:	b10b      	cbz	r3, 3974 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    3970:	4628      	mov	r0, r5
    3972:	4798      	blx	r3
    3974:	bd38      	pop	{r3, r4, r5, pc}
	...

00003978 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    3978:	4b11      	ldr	r3, [pc, #68]	; (39c0 <_tc_init_irq_param+0x48>)
    397a:	4298      	cmp	r0, r3
    397c:	d011      	beq.n	39a2 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    397e:	4b11      	ldr	r3, [pc, #68]	; (39c4 <_tc_init_irq_param+0x4c>)
    3980:	4298      	cmp	r0, r3
    3982:	d011      	beq.n	39a8 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    3984:	4b10      	ldr	r3, [pc, #64]	; (39c8 <_tc_init_irq_param+0x50>)
    3986:	4298      	cmp	r0, r3
    3988:	d011      	beq.n	39ae <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    398a:	4b10      	ldr	r3, [pc, #64]	; (39cc <_tc_init_irq_param+0x54>)
    398c:	4298      	cmp	r0, r3
    398e:	d011      	beq.n	39b4 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    3990:	4b0f      	ldr	r3, [pc, #60]	; (39d0 <_tc_init_irq_param+0x58>)
    3992:	4298      	cmp	r0, r3
    3994:	d011      	beq.n	39ba <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    3996:	4b0f      	ldr	r3, [pc, #60]	; (39d4 <_tc_init_irq_param+0x5c>)
    3998:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    399a:	bf04      	itt	eq
    399c:	4b0e      	ldreq	r3, [pc, #56]	; (39d8 <_tc_init_irq_param+0x60>)
    399e:	6159      	streq	r1, [r3, #20]
    39a0:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    39a2:	4b0d      	ldr	r3, [pc, #52]	; (39d8 <_tc_init_irq_param+0x60>)
    39a4:	6019      	str	r1, [r3, #0]
    39a6:	e7f0      	b.n	398a <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    39a8:	4b0b      	ldr	r3, [pc, #44]	; (39d8 <_tc_init_irq_param+0x60>)
    39aa:	6059      	str	r1, [r3, #4]
    39ac:	e7f0      	b.n	3990 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    39ae:	4b0a      	ldr	r3, [pc, #40]	; (39d8 <_tc_init_irq_param+0x60>)
    39b0:	6099      	str	r1, [r3, #8]
    39b2:	e7f0      	b.n	3996 <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    39b4:	4b08      	ldr	r3, [pc, #32]	; (39d8 <_tc_init_irq_param+0x60>)
    39b6:	60d9      	str	r1, [r3, #12]
    39b8:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    39ba:	4b07      	ldr	r3, [pc, #28]	; (39d8 <_tc_init_irq_param+0x60>)
    39bc:	6119      	str	r1, [r3, #16]
    39be:	4770      	bx	lr
    39c0:	40003800 	.word	0x40003800
    39c4:	40003c00 	.word	0x40003c00
    39c8:	4101a000 	.word	0x4101a000
    39cc:	4101c000 	.word	0x4101c000
    39d0:	42001400 	.word	0x42001400
    39d4:	42001800 	.word	0x42001800
    39d8:	20000ae8 	.word	0x20000ae8

000039dc <get_tc_index>:
{
    39dc:	b570      	push	{r4, r5, r6, lr}
    39de:	b086      	sub	sp, #24
    39e0:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    39e2:	466c      	mov	r4, sp
    39e4:	4d18      	ldr	r5, [pc, #96]	; (3a48 <get_tc_index+0x6c>)
    39e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    39e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    39ea:	e895 0003 	ldmia.w	r5, {r0, r1}
    39ee:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    39f2:	9b00      	ldr	r3, [sp, #0]
    39f4:	42b3      	cmp	r3, r6
    39f6:	d021      	beq.n	3a3c <get_tc_index+0x60>
    39f8:	4631      	mov	r1, r6
    39fa:	2301      	movs	r3, #1
    39fc:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    3a00:	428a      	cmp	r2, r1
    3a02:	d01c      	beq.n	3a3e <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3a04:	3301      	adds	r3, #1
    3a06:	2b06      	cmp	r3, #6
    3a08:	d1f8      	bne.n	39fc <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    3a0a:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    3a0c:	4a0f      	ldr	r2, [pc, #60]	; (3a4c <get_tc_index+0x70>)
    3a0e:	7812      	ldrb	r2, [r2, #0]
    3a10:	429a      	cmp	r2, r3
    3a12:	d016      	beq.n	3a42 <get_tc_index+0x66>
    3a14:	4a0d      	ldr	r2, [pc, #52]	; (3a4c <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3a16:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    3a18:	7d11      	ldrb	r1, [r2, #20]
    3a1a:	4299      	cmp	r1, r3
    3a1c:	d012      	beq.n	3a44 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3a1e:	3001      	adds	r0, #1
    3a20:	b2c0      	uxtb	r0, r0
    3a22:	3214      	adds	r2, #20
    3a24:	2806      	cmp	r0, #6
    3a26:	d1f7      	bne.n	3a18 <get_tc_index+0x3c>
	ASSERT(false);
    3a28:	f240 2227 	movw	r2, #551	; 0x227
    3a2c:	4908      	ldr	r1, [pc, #32]	; (3a50 <get_tc_index+0x74>)
    3a2e:	2000      	movs	r0, #0
    3a30:	4b08      	ldr	r3, [pc, #32]	; (3a54 <get_tc_index+0x78>)
    3a32:	4798      	blx	r3
	return -1;
    3a34:	f04f 30ff 	mov.w	r0, #4294967295
}
    3a38:	b006      	add	sp, #24
    3a3a:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3a3c:	2300      	movs	r3, #0
			return i;
    3a3e:	b2db      	uxtb	r3, r3
    3a40:	e7e4      	b.n	3a0c <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3a42:	2000      	movs	r0, #0
			return i;
    3a44:	b240      	sxtb	r0, r0
    3a46:	e7f7      	b.n	3a38 <get_tc_index+0x5c>
    3a48:	00008154 	.word	0x00008154
    3a4c:	2000008c 	.word	0x2000008c
    3a50:	0000816c 	.word	0x0000816c
    3a54:	00002991 	.word	0x00002991

00003a58 <_tc_timer_init>:
{
    3a58:	b570      	push	{r4, r5, r6, lr}
    3a5a:	4606      	mov	r6, r0
    3a5c:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    3a5e:	4608      	mov	r0, r1
    3a60:	4b48      	ldr	r3, [pc, #288]	; (3b84 <_tc_timer_init+0x12c>)
    3a62:	4798      	blx	r3
    3a64:	4605      	mov	r5, r0
	device->hw = hw;
    3a66:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    3a68:	22af      	movs	r2, #175	; 0xaf
    3a6a:	4947      	ldr	r1, [pc, #284]	; (3b88 <_tc_timer_init+0x130>)
    3a6c:	2001      	movs	r0, #1
    3a6e:	4b47      	ldr	r3, [pc, #284]	; (3b8c <_tc_timer_init+0x134>)
    3a70:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3a72:	6923      	ldr	r3, [r4, #16]
    3a74:	f013 0f01 	tst.w	r3, #1
    3a78:	d1fb      	bne.n	3a72 <_tc_timer_init+0x1a>
    3a7a:	6923      	ldr	r3, [r4, #16]
    3a7c:	f013 0f03 	tst.w	r3, #3
    3a80:	d1fb      	bne.n	3a7a <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3a82:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    3a84:	f013 0f02 	tst.w	r3, #2
    3a88:	d175      	bne.n	3b76 <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3a8a:	6923      	ldr	r3, [r4, #16]
    3a8c:	f013 0f01 	tst.w	r3, #1
    3a90:	d1fb      	bne.n	3a8a <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    3a92:	6823      	ldr	r3, [r4, #0]
    3a94:	f043 0301 	orr.w	r3, r3, #1
    3a98:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3a9a:	6923      	ldr	r3, [r4, #16]
    3a9c:	f013 0f01 	tst.w	r3, #1
    3aa0:	d1fb      	bne.n	3a9a <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3aa2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3aa6:	4a3a      	ldr	r2, [pc, #232]	; (3b90 <_tc_timer_init+0x138>)
    3aa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3aac:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3aae:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3ab0:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    3ab2:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3ab4:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    3ab6:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    3ab8:	2201      	movs	r2, #1
    3aba:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3abc:	685b      	ldr	r3, [r3, #4]
    3abe:	f003 030c 	and.w	r3, r3, #12
    3ac2:	2b08      	cmp	r3, #8
    3ac4:	d03f      	beq.n	3b46 <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	d147      	bne.n	3b5a <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3aca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3ace:	4a30      	ldr	r2, [pc, #192]	; (3b90 <_tc_timer_init+0x138>)
    3ad0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ad4:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3ad6:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    3ad8:	8a1b      	ldrh	r3, [r3, #16]
    3ada:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    3adc:	2301      	movs	r3, #1
    3ade:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    3ae0:	4631      	mov	r1, r6
    3ae2:	4620      	mov	r0, r4
    3ae4:	4b2b      	ldr	r3, [pc, #172]	; (3b94 <_tc_timer_init+0x13c>)
    3ae6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3ae8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3aec:	4a28      	ldr	r2, [pc, #160]	; (3b90 <_tc_timer_init+0x138>)
    3aee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3af2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3af6:	2b00      	cmp	r3, #0
    3af8:	db40      	blt.n	3b7c <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3afa:	095a      	lsrs	r2, r3, #5
    3afc:	f003 031f 	and.w	r3, r3, #31
    3b00:	2101      	movs	r1, #1
    3b02:	fa01 f303 	lsl.w	r3, r1, r3
    3b06:	3220      	adds	r2, #32
    3b08:	4923      	ldr	r1, [pc, #140]	; (3b98 <_tc_timer_init+0x140>)
    3b0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3b0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b12:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3b16:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3b1a:	4b1d      	ldr	r3, [pc, #116]	; (3b90 <_tc_timer_init+0x138>)
    3b1c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3b20:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    3b24:	2b00      	cmp	r3, #0
    3b26:	db2b      	blt.n	3b80 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3b28:	0959      	lsrs	r1, r3, #5
    3b2a:	f003 031f 	and.w	r3, r3, #31
    3b2e:	2201      	movs	r2, #1
    3b30:	fa02 f303 	lsl.w	r3, r2, r3
    3b34:	4a18      	ldr	r2, [pc, #96]	; (3b98 <_tc_timer_init+0x140>)
    3b36:	f101 0060 	add.w	r0, r1, #96	; 0x60
    3b3a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3b3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    3b42:	2000      	movs	r0, #0
    3b44:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3b46:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3b4a:	4a11      	ldr	r2, [pc, #68]	; (3b90 <_tc_timer_init+0x138>)
    3b4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b50:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3b52:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3b54:	691b      	ldr	r3, [r3, #16]
    3b56:	6223      	str	r3, [r4, #32]
    3b58:	e7c0      	b.n	3adc <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3b5a:	2b04      	cmp	r3, #4
    3b5c:	d1be      	bne.n	3adc <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    3b5e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3b62:	4a0b      	ldr	r2, [pc, #44]	; (3b90 <_tc_timer_init+0x138>)
    3b64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b68:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3b6a:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    3b6c:	7c1a      	ldrb	r2, [r3, #16]
    3b6e:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    3b70:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3b72:	76e3      	strb	r3, [r4, #27]
    3b74:	e7b2      	b.n	3adc <_tc_timer_init+0x84>
		return ERR_DENIED;
    3b76:	f06f 0010 	mvn.w	r0, #16
    3b7a:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    3b7c:	2000      	movs	r0, #0
    3b7e:	bd70      	pop	{r4, r5, r6, pc}
    3b80:	2000      	movs	r0, #0
}
    3b82:	bd70      	pop	{r4, r5, r6, pc}
    3b84:	000039dd 	.word	0x000039dd
    3b88:	0000816c 	.word	0x0000816c
    3b8c:	00002991 	.word	0x00002991
    3b90:	2000008c 	.word	0x2000008c
    3b94:	00003979 	.word	0x00003979
    3b98:	e000e100 	.word	0xe000e100

00003b9c <_tc_timer_deinit>:
{
    3b9c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    3b9e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    3ba0:	4620      	mov	r0, r4
    3ba2:	4b18      	ldr	r3, [pc, #96]	; (3c04 <_tc_timer_deinit+0x68>)
    3ba4:	4798      	blx	r3
    3ba6:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    3ba8:	f240 1201 	movw	r2, #257	; 0x101
    3bac:	4916      	ldr	r1, [pc, #88]	; (3c08 <_tc_timer_deinit+0x6c>)
    3bae:	2001      	movs	r0, #1
    3bb0:	4b16      	ldr	r3, [pc, #88]	; (3c0c <_tc_timer_deinit+0x70>)
    3bb2:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3bb4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3bb8:	4b15      	ldr	r3, [pc, #84]	; (3c10 <_tc_timer_deinit+0x74>)
    3bba:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3bbe:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    3bc2:	2b00      	cmp	r3, #0
    3bc4:	db0d      	blt.n	3be2 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3bc6:	095a      	lsrs	r2, r3, #5
    3bc8:	f003 031f 	and.w	r3, r3, #31
    3bcc:	2101      	movs	r1, #1
    3bce:	fa01 f303 	lsl.w	r3, r1, r3
    3bd2:	3220      	adds	r2, #32
    3bd4:	490f      	ldr	r1, [pc, #60]	; (3c14 <_tc_timer_deinit+0x78>)
    3bd6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3bda:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bde:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3be2:	6923      	ldr	r3, [r4, #16]
    3be4:	f013 0f03 	tst.w	r3, #3
    3be8:	d1fb      	bne.n	3be2 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3bea:	6823      	ldr	r3, [r4, #0]
    3bec:	f023 0302 	bic.w	r3, r3, #2
    3bf0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3bf2:	6923      	ldr	r3, [r4, #16]
    3bf4:	f013 0f01 	tst.w	r3, #1
    3bf8:	d1fb      	bne.n	3bf2 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    3bfa:	6823      	ldr	r3, [r4, #0]
    3bfc:	f043 0301 	orr.w	r3, r3, #1
    3c00:	6023      	str	r3, [r4, #0]
    3c02:	bd38      	pop	{r3, r4, r5, pc}
    3c04:	000039dd 	.word	0x000039dd
    3c08:	0000816c 	.word	0x0000816c
    3c0c:	00002991 	.word	0x00002991
    3c10:	2000008c 	.word	0x2000008c
    3c14:	e000e100 	.word	0xe000e100

00003c18 <_tc_timer_set_irq>:
{
    3c18:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    3c1a:	68c0      	ldr	r0, [r0, #12]
    3c1c:	4b08      	ldr	r3, [pc, #32]	; (3c40 <_tc_timer_set_irq+0x28>)
    3c1e:	4798      	blx	r3
    3c20:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    3c22:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    3c26:	4907      	ldr	r1, [pc, #28]	; (3c44 <_tc_timer_set_irq+0x2c>)
    3c28:	2001      	movs	r0, #1
    3c2a:	4b07      	ldr	r3, [pc, #28]	; (3c48 <_tc_timer_set_irq+0x30>)
    3c2c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    3c2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3c32:	4b06      	ldr	r3, [pc, #24]	; (3c4c <_tc_timer_set_irq+0x34>)
    3c34:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3c38:	78a0      	ldrb	r0, [r4, #2]
    3c3a:	4b05      	ldr	r3, [pc, #20]	; (3c50 <_tc_timer_set_irq+0x38>)
    3c3c:	4798      	blx	r3
    3c3e:	bd10      	pop	{r4, pc}
    3c40:	000039dd 	.word	0x000039dd
    3c44:	0000816c 	.word	0x0000816c
    3c48:	00002991 	.word	0x00002991
    3c4c:	2000008c 	.word	0x2000008c
    3c50:	00002cb5 	.word	0x00002cb5

00003c54 <_pwm_init>:
{
    3c54:	b570      	push	{r4, r5, r6, lr}
    3c56:	4606      	mov	r6, r0
    3c58:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    3c5a:	4608      	mov	r0, r1
    3c5c:	4b3f      	ldr	r3, [pc, #252]	; (3d5c <_pwm_init+0x108>)
    3c5e:	4798      	blx	r3
    3c60:	4605      	mov	r5, r0
	device->hw = hw;
    3c62:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c64:	6923      	ldr	r3, [r4, #16]
    3c66:	f013 0f01 	tst.w	r3, #1
    3c6a:	d1fb      	bne.n	3c64 <_pwm_init+0x10>
    3c6c:	6923      	ldr	r3, [r4, #16]
    3c6e:	f013 0f03 	tst.w	r3, #3
    3c72:	d1fb      	bne.n	3c6c <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3c74:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    3c76:	f013 0f02 	tst.w	r3, #2
    3c7a:	d165      	bne.n	3d48 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c7c:	6923      	ldr	r3, [r4, #16]
    3c7e:	f013 0f01 	tst.w	r3, #1
    3c82:	d1fb      	bne.n	3c7c <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    3c84:	6823      	ldr	r3, [r4, #0]
    3c86:	f043 0301 	orr.w	r3, r3, #1
    3c8a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c8c:	6923      	ldr	r3, [r4, #16]
    3c8e:	f013 0f01 	tst.w	r3, #1
    3c92:	d1fb      	bne.n	3c8c <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3c94:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3c98:	4a31      	ldr	r2, [pc, #196]	; (3d60 <_pwm_init+0x10c>)
    3c9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3c9e:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3ca0:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3ca2:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    3ca4:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3ca6:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    3ca8:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    3caa:	2203      	movs	r2, #3
    3cac:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3cae:	685b      	ldr	r3, [r3, #4]
    3cb0:	f003 030c 	and.w	r3, r3, #12
    3cb4:	2b08      	cmp	r3, #8
    3cb6:	d03d      	beq.n	3d34 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3cb8:	2b00      	cmp	r3, #0
    3cba:	d148      	bne.n	3d4e <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3cbc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3cc0:	4a27      	ldr	r2, [pc, #156]	; (3d60 <_pwm_init+0x10c>)
    3cc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3cc6:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3cc8:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    3cca:	8a1b      	ldrh	r3, [r3, #16]
    3ccc:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    3cce:	4631      	mov	r1, r6
    3cd0:	4620      	mov	r0, r4
    3cd2:	4b24      	ldr	r3, [pc, #144]	; (3d64 <_pwm_init+0x110>)
    3cd4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3cd6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3cda:	4a21      	ldr	r2, [pc, #132]	; (3d60 <_pwm_init+0x10c>)
    3cdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ce0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3ce4:	2b00      	cmp	r3, #0
    3ce6:	db35      	blt.n	3d54 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ce8:	095a      	lsrs	r2, r3, #5
    3cea:	f003 031f 	and.w	r3, r3, #31
    3cee:	2101      	movs	r1, #1
    3cf0:	fa01 f303 	lsl.w	r3, r1, r3
    3cf4:	3220      	adds	r2, #32
    3cf6:	491c      	ldr	r1, [pc, #112]	; (3d68 <_pwm_init+0x114>)
    3cf8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3cfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d00:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3d04:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3d08:	4b15      	ldr	r3, [pc, #84]	; (3d60 <_pwm_init+0x10c>)
    3d0a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3d0e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    3d12:	2b00      	cmp	r3, #0
    3d14:	db20      	blt.n	3d58 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3d16:	0959      	lsrs	r1, r3, #5
    3d18:	f003 031f 	and.w	r3, r3, #31
    3d1c:	2201      	movs	r2, #1
    3d1e:	fa02 f303 	lsl.w	r3, r2, r3
    3d22:	4a11      	ldr	r2, [pc, #68]	; (3d68 <_pwm_init+0x114>)
    3d24:	f101 0060 	add.w	r0, r1, #96	; 0x60
    3d28:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3d2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    3d30:	2000      	movs	r0, #0
    3d32:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3d34:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3d38:	4a09      	ldr	r2, [pc, #36]	; (3d60 <_pwm_init+0x10c>)
    3d3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3d3e:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3d40:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3d42:	691b      	ldr	r3, [r3, #16]
    3d44:	6223      	str	r3, [r4, #32]
    3d46:	e7c2      	b.n	3cce <_pwm_init+0x7a>
		return ERR_DENIED;
    3d48:	f06f 0010 	mvn.w	r0, #16
    3d4c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    3d4e:	f04f 30ff 	mov.w	r0, #4294967295
    3d52:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    3d54:	2000      	movs	r0, #0
    3d56:	bd70      	pop	{r4, r5, r6, pc}
    3d58:	2000      	movs	r0, #0
}
    3d5a:	bd70      	pop	{r4, r5, r6, pc}
    3d5c:	000039dd 	.word	0x000039dd
    3d60:	2000008c 	.word	0x2000008c
    3d64:	00003979 	.word	0x00003979
    3d68:	e000e100 	.word	0xe000e100

00003d6c <_tc_get_timer>:
}
    3d6c:	4800      	ldr	r0, [pc, #0]	; (3d70 <_tc_get_timer+0x4>)
    3d6e:	4770      	bx	lr
    3d70:	20000104 	.word	0x20000104

00003d74 <_tc_get_pwm>:
}
    3d74:	2000      	movs	r0, #0
    3d76:	4770      	bx	lr

00003d78 <TC0_Handler>:
{
    3d78:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    3d7a:	4b02      	ldr	r3, [pc, #8]	; (3d84 <TC0_Handler+0xc>)
    3d7c:	6818      	ldr	r0, [r3, #0]
    3d7e:	4b02      	ldr	r3, [pc, #8]	; (3d88 <TC0_Handler+0x10>)
    3d80:	4798      	blx	r3
    3d82:	bd08      	pop	{r3, pc}
    3d84:	20000ae8 	.word	0x20000ae8
    3d88:	00003949 	.word	0x00003949

00003d8c <TC1_Handler>:
{
    3d8c:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    3d8e:	4b02      	ldr	r3, [pc, #8]	; (3d98 <TC1_Handler+0xc>)
    3d90:	6858      	ldr	r0, [r3, #4]
    3d92:	4b02      	ldr	r3, [pc, #8]	; (3d9c <TC1_Handler+0x10>)
    3d94:	4798      	blx	r3
    3d96:	bd08      	pop	{r3, pc}
    3d98:	20000ae8 	.word	0x20000ae8
    3d9c:	00003949 	.word	0x00003949

00003da0 <TC2_Handler>:
{
    3da0:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    3da2:	4b02      	ldr	r3, [pc, #8]	; (3dac <TC2_Handler+0xc>)
    3da4:	6898      	ldr	r0, [r3, #8]
    3da6:	4b02      	ldr	r3, [pc, #8]	; (3db0 <TC2_Handler+0x10>)
    3da8:	4798      	blx	r3
    3daa:	bd08      	pop	{r3, pc}
    3dac:	20000ae8 	.word	0x20000ae8
    3db0:	00003949 	.word	0x00003949

00003db4 <TC3_Handler>:
{
    3db4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    3db6:	4b02      	ldr	r3, [pc, #8]	; (3dc0 <TC3_Handler+0xc>)
    3db8:	68d8      	ldr	r0, [r3, #12]
    3dba:	4b02      	ldr	r3, [pc, #8]	; (3dc4 <TC3_Handler+0x10>)
    3dbc:	4798      	blx	r3
    3dbe:	bd08      	pop	{r3, pc}
    3dc0:	20000ae8 	.word	0x20000ae8
    3dc4:	00003931 	.word	0x00003931

00003dc8 <TC4_Handler>:
{
    3dc8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    3dca:	4b02      	ldr	r3, [pc, #8]	; (3dd4 <TC4_Handler+0xc>)
    3dcc:	6918      	ldr	r0, [r3, #16]
    3dce:	4b02      	ldr	r3, [pc, #8]	; (3dd8 <TC4_Handler+0x10>)
    3dd0:	4798      	blx	r3
    3dd2:	bd08      	pop	{r3, pc}
    3dd4:	20000ae8 	.word	0x20000ae8
    3dd8:	00003931 	.word	0x00003931

00003ddc <TC5_Handler>:
{
    3ddc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    3dde:	4b02      	ldr	r3, [pc, #8]	; (3de8 <TC5_Handler+0xc>)
    3de0:	6958      	ldr	r0, [r3, #20]
    3de2:	4b02      	ldr	r3, [pc, #8]	; (3dec <TC5_Handler+0x10>)
    3de4:	4798      	blx	r3
    3de6:	bd08      	pop	{r3, pc}
    3de8:	20000ae8 	.word	0x20000ae8
    3dec:	00003931 	.word	0x00003931

00003df0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    3df0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3df2:	4604      	mov	r4, r0
    3df4:	b330      	cbz	r0, 3e44 <_wdt_init+0x54>
    3df6:	6800      	ldr	r0, [r0, #0]
    3df8:	3000      	adds	r0, #0
    3dfa:	bf18      	it	ne
    3dfc:	2001      	movne	r0, #1
    3dfe:	225a      	movs	r2, #90	; 0x5a
    3e00:	4914      	ldr	r1, [pc, #80]	; (3e54 <_wdt_init+0x64>)
    3e02:	4b15      	ldr	r3, [pc, #84]	; (3e58 <_wdt_init+0x68>)
    3e04:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    3e06:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3e08:	689a      	ldr	r2, [r3, #8]
    3e0a:	f012 0f0e 	tst.w	r2, #14
    3e0e:	d1fb      	bne.n	3e08 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3e10:	781a      	ldrb	r2, [r3, #0]
    3e12:	09d2      	lsrs	r2, r2, #7
    3e14:	d118      	bne.n	3e48 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3e16:	689a      	ldr	r2, [r3, #8]
    3e18:	f012 0f0e 	tst.w	r2, #14
    3e1c:	d1fb      	bne.n	3e16 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3e1e:	781a      	ldrb	r2, [r3, #0]
    3e20:	f012 0f02 	tst.w	r2, #2
    3e24:	d113      	bne.n	3e4e <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3e26:	689a      	ldr	r2, [r3, #8]
    3e28:	f012 0f0e 	tst.w	r2, #14
    3e2c:	d1fb      	bne.n	3e26 <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    3e2e:	781a      	ldrb	r2, [r3, #0]
    3e30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    3e34:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    3e36:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    3e38:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    3e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    3e3e:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    3e40:	2000      	movs	r0, #0
    3e42:	bd10      	pop	{r4, pc}
    3e44:	2000      	movs	r0, #0
    3e46:	e7da      	b.n	3dfe <_wdt_init+0xe>
		return ERR_DENIED;
    3e48:	f06f 0010 	mvn.w	r0, #16
    3e4c:	bd10      	pop	{r4, pc}
    3e4e:	f06f 0010 	mvn.w	r0, #16
}
    3e52:	bd10      	pop	{r4, pc}
    3e54:	00008180 	.word	0x00008180
    3e58:	00002991 	.word	0x00002991

00003e5c <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    3e5c:	b570      	push	{r4, r5, r6, lr}
    3e5e:	460d      	mov	r5, r1
    3e60:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3e62:	4606      	mov	r6, r0
    3e64:	2800      	cmp	r0, #0
    3e66:	d044      	beq.n	3ef2 <_wdt_set_timeout_period+0x96>
    3e68:	6800      	ldr	r0, [r0, #0]
    3e6a:	3000      	adds	r0, #0
    3e6c:	bf18      	it	ne
    3e6e:	2001      	movne	r0, #1
    3e70:	2284      	movs	r2, #132	; 0x84
    3e72:	493f      	ldr	r1, [pc, #252]	; (3f70 <_wdt_set_timeout_period+0x114>)
    3e74:	4b3f      	ldr	r3, [pc, #252]	; (3f74 <_wdt_set_timeout_period+0x118>)
    3e76:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    3e78:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3e7a:	6893      	ldr	r3, [r2, #8]
    3e7c:	f013 0f0e 	tst.w	r3, #14
    3e80:	d1fb      	bne.n	3e7a <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    3e82:	7813      	ldrb	r3, [r2, #0]
    3e84:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3e88:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    3e8a:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3e8c:	688b      	ldr	r3, [r1, #8]
    3e8e:	f013 0f0e 	tst.w	r3, #14
    3e92:	d1fb      	bne.n	3e8c <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    3e94:	780b      	ldrb	r3, [r1, #0]
    3e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3e9a:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    3e9c:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3e9e:	6899      	ldr	r1, [r3, #8]
    3ea0:	f011 0f0e 	tst.w	r1, #14
    3ea4:	d1fb      	bne.n	3e9e <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3ea6:	781a      	ldrb	r2, [r3, #0]
    3ea8:	09d2      	lsrs	r2, r2, #7
    3eaa:	d158      	bne.n	3f5e <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3eac:	6899      	ldr	r1, [r3, #8]
    3eae:	f011 0f0e 	tst.w	r1, #14
    3eb2:	d1fb      	bne.n	3eac <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3eb4:	781a      	ldrb	r2, [r3, #0]
    3eb6:	f012 0f02 	tst.w	r2, #2
    3eba:	d153      	bne.n	3f64 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    3ebc:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    3ec0:	4628      	mov	r0, r5
    3ec2:	2100      	movs	r1, #0
    3ec4:	ea50 0201 	orrs.w	r2, r0, r1
    3ec8:	d14f      	bne.n	3f6a <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    3eca:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    3ece:	d038      	beq.n	3f42 <_wdt_set_timeout_period+0xe6>
    3ed0:	d911      	bls.n	3ef6 <_wdt_set_timeout_period+0x9a>
    3ed2:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    3ed6:	d038      	beq.n	3f4a <_wdt_set_timeout_period+0xee>
    3ed8:	d927      	bls.n	3f2a <_wdt_set_timeout_period+0xce>
    3eda:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    3ede:	d038      	beq.n	3f52 <_wdt_set_timeout_period+0xf6>
    3ee0:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    3ee4:	d037      	beq.n	3f56 <_wdt_set_timeout_period+0xfa>
    3ee6:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    3eea:	d030      	beq.n	3f4e <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    3eec:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    3ef0:	bd70      	pop	{r4, r5, r6, pc}
    3ef2:	2000      	movs	r0, #0
    3ef4:	e7bc      	b.n	3e70 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    3ef6:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    3efa:	d01e      	beq.n	3f3a <_wdt_set_timeout_period+0xde>
    3efc:	d80d      	bhi.n	3f1a <_wdt_set_timeout_period+0xbe>
    3efe:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    3f02:	d02a      	beq.n	3f5a <_wdt_set_timeout_period+0xfe>
    3f04:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    3f08:	d1f0      	bne.n	3eec <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    3f0a:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    3f0c:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    3f0e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    3f12:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    3f14:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    3f16:	2000      	movs	r0, #0
    3f18:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    3f1a:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    3f1e:	d00e      	beq.n	3f3e <_wdt_set_timeout_period+0xe2>
    3f20:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    3f24:	d1e2      	bne.n	3eec <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    3f26:	2104      	movs	r1, #4
			break;
    3f28:	e7f0      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    3f2a:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    3f2e:	d00a      	beq.n	3f46 <_wdt_set_timeout_period+0xea>
    3f30:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    3f34:	d1da      	bne.n	3eec <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    3f36:	2107      	movs	r1, #7
			break;
    3f38:	e7e8      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    3f3a:	2102      	movs	r1, #2
			break;
    3f3c:	e7e6      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    3f3e:	2103      	movs	r1, #3
			break;
    3f40:	e7e4      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    3f42:	2105      	movs	r1, #5
			break;
    3f44:	e7e2      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    3f46:	2106      	movs	r1, #6
			break;
    3f48:	e7e0      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    3f4a:	2108      	movs	r1, #8
			break;
    3f4c:	e7de      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    3f4e:	2109      	movs	r1, #9
			break;
    3f50:	e7dc      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    3f52:	210a      	movs	r1, #10
			break;
    3f54:	e7da      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    3f56:	210b      	movs	r1, #11
			break;
    3f58:	e7d8      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    3f5a:	2100      	movs	r1, #0
    3f5c:	e7d6      	b.n	3f0c <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    3f5e:	f06f 0010 	mvn.w	r0, #16
    3f62:	bd70      	pop	{r4, r5, r6, pc}
    3f64:	f06f 0010 	mvn.w	r0, #16
    3f68:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    3f6a:	f06f 000c 	mvn.w	r0, #12
    3f6e:	bd70      	pop	{r4, r5, r6, pc}
    3f70:	00008180 	.word	0x00008180
    3f74:	00002991 	.word	0x00002991

00003f78 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    3f78:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3f7a:	4604      	mov	r4, r0
    3f7c:	b198      	cbz	r0, 3fa6 <_wdt_enable+0x2e>
    3f7e:	6800      	ldr	r0, [r0, #0]
    3f80:	3000      	adds	r0, #0
    3f82:	bf18      	it	ne
    3f84:	2001      	movne	r0, #1
    3f86:	f240 1207 	movw	r2, #263	; 0x107
    3f8a:	4908      	ldr	r1, [pc, #32]	; (3fac <_wdt_enable+0x34>)
    3f8c:	4b08      	ldr	r3, [pc, #32]	; (3fb0 <_wdt_enable+0x38>)
    3f8e:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    3f90:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3f92:	6893      	ldr	r3, [r2, #8]
    3f94:	f013 0f0e 	tst.w	r3, #14
    3f98:	d1fb      	bne.n	3f92 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    3f9a:	7813      	ldrb	r3, [r2, #0]
    3f9c:	f043 0302 	orr.w	r3, r3, #2
    3fa0:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    3fa2:	2000      	movs	r0, #0
    3fa4:	bd10      	pop	{r4, pc}
    3fa6:	2000      	movs	r0, #0
    3fa8:	e7ed      	b.n	3f86 <_wdt_enable+0xe>
    3faa:	bf00      	nop
    3fac:	00008180 	.word	0x00008180
    3fb0:	00002991 	.word	0x00002991

00003fb4 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    3fb4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3fb6:	4604      	mov	r4, r0
    3fb8:	b168      	cbz	r0, 3fd6 <_wdt_feed+0x22>
    3fba:	6800      	ldr	r0, [r0, #0]
    3fbc:	3000      	adds	r0, #0
    3fbe:	bf18      	it	ne
    3fc0:	2001      	movne	r0, #1
    3fc2:	f240 1225 	movw	r2, #293	; 0x125
    3fc6:	4905      	ldr	r1, [pc, #20]	; (3fdc <_wdt_feed+0x28>)
    3fc8:	4b05      	ldr	r3, [pc, #20]	; (3fe0 <_wdt_feed+0x2c>)
    3fca:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    3fcc:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    3fce:	22a5      	movs	r2, #165	; 0xa5
    3fd0:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    3fd2:	2000      	movs	r0, #0
    3fd4:	bd10      	pop	{r4, pc}
    3fd6:	2000      	movs	r0, #0
    3fd8:	e7f3      	b.n	3fc2 <_wdt_feed+0xe>
    3fda:	bf00      	nop
    3fdc:	00008180 	.word	0x00008180
    3fe0:	00002991 	.word	0x00002991

00003fe4 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    3fe4:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    3fe6:	2200      	movs	r2, #0
    3fe8:	2108      	movs	r1, #8
    3fea:	2001      	movs	r0, #1
    3fec:	4c15      	ldr	r4, [pc, #84]	; (4044 <createQueuesAndSemaphores+0x60>)
    3fee:	47a0      	blx	r4
    3ff0:	4d15      	ldr	r5, [pc, #84]	; (4048 <createQueuesAndSemaphores+0x64>)
    3ff2:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    3ff4:	2200      	movs	r2, #0
    3ff6:	2101      	movs	r1, #1
    3ff8:	4608      	mov	r0, r1
    3ffa:	47a0      	blx	r4
    3ffc:	4b13      	ldr	r3, [pc, #76]	; (404c <createQueuesAndSemaphores+0x68>)
    3ffe:	6018      	str	r0, [r3, #0]
    CmdResponseQueue  = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    4000:	2200      	movs	r2, #0
    4002:	2108      	movs	r1, #8
    4004:	2001      	movs	r0, #1
    4006:	47a0      	blx	r4
    4008:	4b11      	ldr	r3, [pc, #68]	; (4050 <createQueuesAndSemaphores+0x6c>)
    400a:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    400c:	682b      	ldr	r3, [r5, #0]
    400e:	b1bb      	cbz	r3, 4040 <createQueuesAndSemaphores+0x5c>
       (AtReceiveQueue  != NULL) &&
    4010:	4b0e      	ldr	r3, [pc, #56]	; (404c <createQueuesAndSemaphores+0x68>)
    if((AtTransmitQueue != NULL) &&
    4012:	681b      	ldr	r3, [r3, #0]
    4014:	b1a3      	cbz	r3, 4040 <createQueuesAndSemaphores+0x5c>
       (AtReceiveQueue  != NULL) &&
    4016:	b198      	cbz	r0, 4040 <createQueuesAndSemaphores+0x5c>
	   (CmdResponseQueue != NULL))
    {
    	DEBUG_PRINT("Tx & Rx Queues are created");
    4018:	480e      	ldr	r0, [pc, #56]	; (4054 <createQueuesAndSemaphores+0x70>)
    401a:	4b0f      	ldr	r3, [pc, #60]	; (4058 <createQueuesAndSemaphores+0x74>)
    401c:	4798      	blx	r3

    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    401e:	2203      	movs	r2, #3
    4020:	2100      	movs	r1, #0
    4022:	2001      	movs	r0, #1
    4024:	47a0      	blx	r4
    4026:	4c0d      	ldr	r4, [pc, #52]	; (405c <createQueuesAndSemaphores+0x78>)
    4028:	6020      	str	r0, [r4, #0]
    	DebugPrintMutex        = xSemaphoreCreateMutex();
    402a:	2001      	movs	r0, #1
    402c:	4b0c      	ldr	r3, [pc, #48]	; (4060 <createQueuesAndSemaphores+0x7c>)
    402e:	4798      	blx	r3
    4030:	4b0c      	ldr	r3, [pc, #48]	; (4064 <createQueuesAndSemaphores+0x80>)
    4032:	6018      	str	r0, [r3, #0]
		
		if((AtTxQueueLoadSemaphore != NULL) &&
    4034:	6823      	ldr	r3, [r4, #0]
    4036:	b11b      	cbz	r3, 4040 <createQueuesAndSemaphores+0x5c>
    4038:	b110      	cbz	r0, 4040 <createQueuesAndSemaphores+0x5c>
		   (DebugPrintMutex != NULL))
		{
			DEBUG_PRINT("Semaphores and Mutexes are created");
    403a:	480b      	ldr	r0, [pc, #44]	; (4068 <createQueuesAndSemaphores+0x84>)
    403c:	4b06      	ldr	r3, [pc, #24]	; (4058 <createQueuesAndSemaphores+0x74>)
    403e:	4798      	blx	r3
    }
    else
    {
    	status = false;
    }
}
    4040:	bd38      	pop	{r3, r4, r5, pc}
    4042:	bf00      	nop
    4044:	00004939 	.word	0x00004939
    4048:	20003484 	.word	0x20003484
    404c:	20003490 	.word	0x20003490
    4050:	20003460 	.word	0x20003460
    4054:	00008198 	.word	0x00008198
    4058:	00001c69 	.word	0x00001c69
    405c:	2000348c 	.word	0x2000348c
    4060:	00004b6d 	.word	0x00004b6d
    4064:	20003488 	.word	0x20003488
    4068:	000081b4 	.word	0x000081b4

0000406c <main>:
{
    406c:	b580      	push	{r7, lr}
    406e:	b082      	sub	sp, #8
    atmel_start_init();	
    4070:	4b29      	ldr	r3, [pc, #164]	; (4118 <main+0xac>)
    4072:	4798      	blx	r3
    DispatchTaskStatus = xTaskCreate( DispatchTask, "DispatchTask", 150, NULL, 2, &xDispatchTaskHandle );
    4074:	4b29      	ldr	r3, [pc, #164]	; (411c <main+0xb0>)
    4076:	9301      	str	r3, [sp, #4]
    4078:	2702      	movs	r7, #2
    407a:	9700      	str	r7, [sp, #0]
    407c:	2300      	movs	r3, #0
    407e:	2296      	movs	r2, #150	; 0x96
    4080:	4927      	ldr	r1, [pc, #156]	; (4120 <main+0xb4>)
    4082:	4828      	ldr	r0, [pc, #160]	; (4124 <main+0xb8>)
    4084:	4d28      	ldr	r5, [pc, #160]	; (4128 <main+0xbc>)
    4086:	47a8      	blx	r5
    4088:	4c28      	ldr	r4, [pc, #160]	; (412c <main+0xc0>)
    408a:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTask", 150, NULL, 1, &xModemTxTaskHandle );
    408c:	4b28      	ldr	r3, [pc, #160]	; (4130 <main+0xc4>)
    408e:	9301      	str	r3, [sp, #4]
    4090:	2601      	movs	r6, #1
    4092:	9600      	str	r6, [sp, #0]
    4094:	2300      	movs	r3, #0
    4096:	2296      	movs	r2, #150	; 0x96
    4098:	4926      	ldr	r1, [pc, #152]	; (4134 <main+0xc8>)
    409a:	4827      	ldr	r0, [pc, #156]	; (4138 <main+0xcc>)
    409c:	47a8      	blx	r5
    409e:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    40a0:	4b26      	ldr	r3, [pc, #152]	; (413c <main+0xd0>)
    40a2:	9301      	str	r3, [sp, #4]
    40a4:	9700      	str	r7, [sp, #0]
    40a6:	2300      	movs	r3, #0
    40a8:	2296      	movs	r2, #150	; 0x96
    40aa:	4925      	ldr	r1, [pc, #148]	; (4140 <main+0xd4>)
    40ac:	4825      	ldr	r0, [pc, #148]	; (4144 <main+0xd8>)
    40ae:	47a8      	blx	r5
    40b0:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    40b2:	4b25      	ldr	r3, [pc, #148]	; (4148 <main+0xdc>)
    40b4:	9301      	str	r3, [sp, #4]
    40b6:	9600      	str	r6, [sp, #0]
    40b8:	2300      	movs	r3, #0
    40ba:	2296      	movs	r2, #150	; 0x96
    40bc:	4923      	ldr	r1, [pc, #140]	; (414c <main+0xe0>)
    40be:	4824      	ldr	r0, [pc, #144]	; (4150 <main+0xe4>)
    40c0:	47a8      	blx	r5
    40c2:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    40c4:	4b23      	ldr	r3, [pc, #140]	; (4154 <main+0xe8>)
    40c6:	9301      	str	r3, [sp, #4]
    40c8:	9600      	str	r6, [sp, #0]
    40ca:	2300      	movs	r3, #0
    40cc:	2296      	movs	r2, #150	; 0x96
    40ce:	4922      	ldr	r1, [pc, #136]	; (4158 <main+0xec>)
    40d0:	4822      	ldr	r0, [pc, #136]	; (415c <main+0xf0>)
    40d2:	47a8      	blx	r5
    if((DispatchTaskStatus == pdPASS) &&
    40d4:	6823      	ldr	r3, [r4, #0]
    40d6:	42b3      	cmp	r3, r6
    40d8:	d006      	beq.n	40e8 <main+0x7c>
    	DEBUG_PRINT("Failed to create tasks");
    40da:	4821      	ldr	r0, [pc, #132]	; (4160 <main+0xf4>)
    40dc:	4b21      	ldr	r3, [pc, #132]	; (4164 <main+0xf8>)
    40de:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    40e0:	4821      	ldr	r0, [pc, #132]	; (4168 <main+0xfc>)
    40e2:	4b20      	ldr	r3, [pc, #128]	; (4164 <main+0xf8>)
    40e4:	4798      	blx	r3
    40e6:	e7fe      	b.n	40e6 <main+0x7a>
    if((DispatchTaskStatus == pdPASS) &&
    40e8:	68e3      	ldr	r3, [r4, #12]
    40ea:	42b3      	cmp	r3, r6
    40ec:	d1f5      	bne.n	40da <main+0x6e>
       (ModemProcessTaskStatus == pdPASS) &&
    40ee:	6863      	ldr	r3, [r4, #4]
    40f0:	42b3      	cmp	r3, r6
    40f2:	d1f2      	bne.n	40da <main+0x6e>
       (ModemTxTaskStatus == pdPASS) &&
    40f4:	68a3      	ldr	r3, [r4, #8]
    40f6:	42b3      	cmp	r3, r6
    40f8:	d1ef      	bne.n	40da <main+0x6e>
       (ModemRxTaskStatus == pdPASS) &&
    40fa:	42b0      	cmp	r0, r6
    40fc:	d1ed      	bne.n	40da <main+0x6e>
    	DEBUG_PRINT("Successfully Created the Tasks");
    40fe:	481b      	ldr	r0, [pc, #108]	; (416c <main+0x100>)
    4100:	4b18      	ldr	r3, [pc, #96]	; (4164 <main+0xf8>)
    4102:	4798      	blx	r3
    	if(false != createQueuesAndSemaphores())
    4104:	4b1a      	ldr	r3, [pc, #104]	; (4170 <main+0x104>)
    4106:	4798      	blx	r3
    4108:	b110      	cbz	r0, 4110 <main+0xa4>
    		vTaskStartScheduler();
    410a:	4b1a      	ldr	r3, [pc, #104]	; (4174 <main+0x108>)
    410c:	4798      	blx	r3
    410e:	e7e7      	b.n	40e0 <main+0x74>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    4110:	4819      	ldr	r0, [pc, #100]	; (4178 <main+0x10c>)
    4112:	4b14      	ldr	r3, [pc, #80]	; (4164 <main+0xf8>)
    4114:	4798      	blx	r3
    4116:	e7e3      	b.n	40e0 <main+0x74>
    4118:	00001d81 	.word	0x00001d81
    411c:	2000347c 	.word	0x2000347c
    4120:	000081d8 	.word	0x000081d8
    4124:	00000335 	.word	0x00000335
    4128:	00005169 	.word	0x00005169
    412c:	20000b00 	.word	0x20000b00
    4130:	20003464 	.word	0x20003464
    4134:	000081e8 	.word	0x000081e8
    4138:	00001add 	.word	0x00001add
    413c:	20003478 	.word	0x20003478
    4140:	000081f4 	.word	0x000081f4
    4144:	00001a7d 	.word	0x00001a7d
    4148:	2000346c 	.word	0x2000346c
    414c:	00008200 	.word	0x00008200
    4150:	000018e1 	.word	0x000018e1
    4154:	20003470 	.word	0x20003470
    4158:	00008214 	.word	0x00008214
    415c:	00001469 	.word	0x00001469
    4160:	00008264 	.word	0x00008264
    4164:	00001c69 	.word	0x00001c69
    4168:	0000827c 	.word	0x0000827c
    416c:	00008224 	.word	0x00008224
    4170:	00003fe5 	.word	0x00003fe5
    4174:	00005345 	.word	0x00005345
    4178:	00008244 	.word	0x00008244

0000417c <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    417c:	f100 0308 	add.w	r3, r0, #8
    4180:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    4182:	f04f 32ff 	mov.w	r2, #4294967295
    4186:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    4188:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    418a:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    418c:	2300      	movs	r3, #0
    418e:	6003      	str	r3, [r0, #0]
    4190:	4770      	bx	lr

00004192 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4192:	2300      	movs	r3, #0
    4194:	6103      	str	r3, [r0, #16]
    4196:	4770      	bx	lr

00004198 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    4198:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    419a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    419c:	689a      	ldr	r2, [r3, #8]
    419e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    41a0:	689a      	ldr	r2, [r3, #8]
    41a2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    41a4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    41a6:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    41a8:	6803      	ldr	r3, [r0, #0]
    41aa:	3301      	adds	r3, #1
    41ac:	6003      	str	r3, [r0, #0]
    41ae:	4770      	bx	lr

000041b0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    41b0:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    41b2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    41b4:	f1b5 3fff 	cmp.w	r5, #4294967295
    41b8:	d002      	beq.n	41c0 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    41ba:	f100 0208 	add.w	r2, r0, #8
    41be:	e002      	b.n	41c6 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    41c0:	6902      	ldr	r2, [r0, #16]
    41c2:	e004      	b.n	41ce <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    41c4:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    41c6:	6853      	ldr	r3, [r2, #4]
    41c8:	681c      	ldr	r4, [r3, #0]
    41ca:	42a5      	cmp	r5, r4
    41cc:	d2fa      	bcs.n	41c4 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    41ce:	6853      	ldr	r3, [r2, #4]
    41d0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    41d2:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    41d4:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    41d6:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    41d8:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    41da:	6803      	ldr	r3, [r0, #0]
    41dc:	3301      	adds	r3, #1
    41de:	6003      	str	r3, [r0, #0]
}
    41e0:	bc30      	pop	{r4, r5}
    41e2:	4770      	bx	lr

000041e4 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    41e4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    41e6:	6842      	ldr	r2, [r0, #4]
    41e8:	6881      	ldr	r1, [r0, #8]
    41ea:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    41ec:	6882      	ldr	r2, [r0, #8]
    41ee:	6841      	ldr	r1, [r0, #4]
    41f0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    41f2:	685a      	ldr	r2, [r3, #4]
    41f4:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    41f6:	bf04      	itt	eq
    41f8:	6882      	ldreq	r2, [r0, #8]
    41fa:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    41fc:	2200      	movs	r2, #0
    41fe:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    4200:	681a      	ldr	r2, [r3, #0]
    4202:	3a01      	subs	r2, #1
    4204:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    4206:	6818      	ldr	r0, [r3, #0]
}
    4208:	4770      	bx	lr
	...

0000420c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    420c:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    420e:	2300      	movs	r3, #0
    4210:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    4212:	4b0d      	ldr	r3, [pc, #52]	; (4248 <prvTaskExitError+0x3c>)
    4214:	681b      	ldr	r3, [r3, #0]
    4216:	f1b3 3fff 	cmp.w	r3, #4294967295
    421a:	d008      	beq.n	422e <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    421c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4220:	f383 8811 	msr	BASEPRI, r3
    4224:	f3bf 8f6f 	isb	sy
    4228:	f3bf 8f4f 	dsb	sy
    422c:	e7fe      	b.n	422c <prvTaskExitError+0x20>
    422e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4232:	f383 8811 	msr	BASEPRI, r3
    4236:	f3bf 8f6f 	isb	sy
    423a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    423e:	9b01      	ldr	r3, [sp, #4]
    4240:	2b00      	cmp	r3, #0
    4242:	d0fc      	beq.n	423e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    4244:	b002      	add	sp, #8
    4246:	4770      	bx	lr
    4248:	20000124 	.word	0x20000124

0000424c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    424c:	4808      	ldr	r0, [pc, #32]	; (4270 <prvPortStartFirstTask+0x24>)
    424e:	6800      	ldr	r0, [r0, #0]
    4250:	6800      	ldr	r0, [r0, #0]
    4252:	f380 8808 	msr	MSP, r0
    4256:	f04f 0000 	mov.w	r0, #0
    425a:	f380 8814 	msr	CONTROL, r0
    425e:	b662      	cpsie	i
    4260:	b661      	cpsie	f
    4262:	f3bf 8f4f 	dsb	sy
    4266:	f3bf 8f6f 	isb	sy
    426a:	df00      	svc	0
    426c:	bf00      	nop
    426e:	0000      	.short	0x0000
    4270:	e000ed08 	.word	0xe000ed08

00004274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    4274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4284 <vPortEnableVFP+0x10>
    4278:	6801      	ldr	r1, [r0, #0]
    427a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    427e:	6001      	str	r1, [r0, #0]
    4280:	4770      	bx	lr
    4282:	0000      	.short	0x0000
    4284:	e000ed88 	.word	0xe000ed88

00004288 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    4288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    428c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    4290:	f021 0101 	bic.w	r1, r1, #1
    4294:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    4298:	4b05      	ldr	r3, [pc, #20]	; (42b0 <pxPortInitialiseStack+0x28>)
    429a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    429e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    42a2:	f06f 0302 	mvn.w	r3, #2
    42a6:	f840 3c24 	str.w	r3, [r0, #-36]
}
    42aa:	3844      	subs	r0, #68	; 0x44
    42ac:	4770      	bx	lr
    42ae:	bf00      	nop
    42b0:	0000420d 	.word	0x0000420d
	...

000042c0 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    42c0:	4b07      	ldr	r3, [pc, #28]	; (42e0 <pxCurrentTCBConst2>)
    42c2:	6819      	ldr	r1, [r3, #0]
    42c4:	6808      	ldr	r0, [r1, #0]
    42c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42ca:	f380 8809 	msr	PSP, r0
    42ce:	f3bf 8f6f 	isb	sy
    42d2:	f04f 0000 	mov.w	r0, #0
    42d6:	f380 8811 	msr	BASEPRI, r0
    42da:	4770      	bx	lr
    42dc:	f3af 8000 	nop.w

000042e0 <pxCurrentTCBConst2>:
    42e0:	200033c4 	.word	0x200033c4

000042e4 <vPortEnterCritical>:
    42e4:	f04f 0380 	mov.w	r3, #128	; 0x80
    42e8:	f383 8811 	msr	BASEPRI, r3
    42ec:	f3bf 8f6f 	isb	sy
    42f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    42f4:	4a0a      	ldr	r2, [pc, #40]	; (4320 <vPortEnterCritical+0x3c>)
    42f6:	6813      	ldr	r3, [r2, #0]
    42f8:	3301      	adds	r3, #1
    42fa:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    42fc:	2b01      	cmp	r3, #1
    42fe:	d10d      	bne.n	431c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    4300:	4b08      	ldr	r3, [pc, #32]	; (4324 <vPortEnterCritical+0x40>)
    4302:	681b      	ldr	r3, [r3, #0]
    4304:	f013 0fff 	tst.w	r3, #255	; 0xff
    4308:	d008      	beq.n	431c <vPortEnterCritical+0x38>
    430a:	f04f 0380 	mov.w	r3, #128	; 0x80
    430e:	f383 8811 	msr	BASEPRI, r3
    4312:	f3bf 8f6f 	isb	sy
    4316:	f3bf 8f4f 	dsb	sy
    431a:	e7fe      	b.n	431a <vPortEnterCritical+0x36>
    431c:	4770      	bx	lr
    431e:	bf00      	nop
    4320:	20000124 	.word	0x20000124
    4324:	e000ed04 	.word	0xe000ed04

00004328 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    4328:	4b09      	ldr	r3, [pc, #36]	; (4350 <vPortExitCritical+0x28>)
    432a:	681b      	ldr	r3, [r3, #0]
    432c:	b943      	cbnz	r3, 4340 <vPortExitCritical+0x18>
    432e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4332:	f383 8811 	msr	BASEPRI, r3
    4336:	f3bf 8f6f 	isb	sy
    433a:	f3bf 8f4f 	dsb	sy
    433e:	e7fe      	b.n	433e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    4340:	3b01      	subs	r3, #1
    4342:	4a03      	ldr	r2, [pc, #12]	; (4350 <vPortExitCritical+0x28>)
    4344:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    4346:	b90b      	cbnz	r3, 434c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4348:	f383 8811 	msr	BASEPRI, r3
    434c:	4770      	bx	lr
    434e:	bf00      	nop
    4350:	20000124 	.word	0x20000124
	...

00004360 <PendSV_Handler>:
	__asm volatile(
    4360:	f3ef 8009 	mrs	r0, PSP
    4364:	f3bf 8f6f 	isb	sy
    4368:	4b15      	ldr	r3, [pc, #84]	; (43c0 <pxCurrentTCBConst>)
    436a:	681a      	ldr	r2, [r3, #0]
    436c:	f01e 0f10 	tst.w	lr, #16
    4370:	bf08      	it	eq
    4372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    437a:	6010      	str	r0, [r2, #0]
    437c:	e92d 0009 	stmdb	sp!, {r0, r3}
    4380:	f04f 0080 	mov.w	r0, #128	; 0x80
    4384:	f380 8811 	msr	BASEPRI, r0
    4388:	f3bf 8f4f 	dsb	sy
    438c:	f3bf 8f6f 	isb	sy
    4390:	f001 f9c8 	bl	5724 <vTaskSwitchContext>
    4394:	f04f 0000 	mov.w	r0, #0
    4398:	f380 8811 	msr	BASEPRI, r0
    439c:	bc09      	pop	{r0, r3}
    439e:	6819      	ldr	r1, [r3, #0]
    43a0:	6808      	ldr	r0, [r1, #0]
    43a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    43a6:	f01e 0f10 	tst.w	lr, #16
    43aa:	bf08      	it	eq
    43ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    43b0:	f380 8809 	msr	PSP, r0
    43b4:	f3bf 8f6f 	isb	sy
    43b8:	4770      	bx	lr
    43ba:	bf00      	nop
    43bc:	f3af 8000 	nop.w

000043c0 <pxCurrentTCBConst>:
    43c0:	200033c4 	.word	0x200033c4

000043c4 <SysTick_Handler>:
{
    43c4:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    43c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    43ca:	f383 8811 	msr	BASEPRI, r3
    43ce:	f3bf 8f6f 	isb	sy
    43d2:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    43d6:	4b05      	ldr	r3, [pc, #20]	; (43ec <SysTick_Handler+0x28>)
    43d8:	4798      	blx	r3
    43da:	b118      	cbz	r0, 43e4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    43dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    43e0:	4b03      	ldr	r3, [pc, #12]	; (43f0 <SysTick_Handler+0x2c>)
    43e2:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    43e4:	2300      	movs	r3, #0
    43e6:	f383 8811 	msr	BASEPRI, r3
    43ea:	bd08      	pop	{r3, pc}
    43ec:	000053ed 	.word	0x000053ed
    43f0:	e000ed04 	.word	0xe000ed04

000043f4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    43f4:	4b05      	ldr	r3, [pc, #20]	; (440c <vPortSetupTimerInterrupt+0x18>)
    43f6:	2200      	movs	r2, #0
    43f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    43fa:	4905      	ldr	r1, [pc, #20]	; (4410 <vPortSetupTimerInterrupt+0x1c>)
    43fc:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    43fe:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    4402:	4a04      	ldr	r2, [pc, #16]	; (4414 <vPortSetupTimerInterrupt+0x20>)
    4404:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    4406:	2207      	movs	r2, #7
    4408:	601a      	str	r2, [r3, #0]
    440a:	4770      	bx	lr
    440c:	e000e010 	.word	0xe000e010
    4410:	e000e018 	.word	0xe000e018
    4414:	e000e014 	.word	0xe000e014

00004418 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    4418:	4b3b      	ldr	r3, [pc, #236]	; (4508 <xPortStartScheduler+0xf0>)
    441a:	681a      	ldr	r2, [r3, #0]
    441c:	4b3b      	ldr	r3, [pc, #236]	; (450c <xPortStartScheduler+0xf4>)
    441e:	429a      	cmp	r2, r3
    4420:	d108      	bne.n	4434 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    4422:	f04f 0380 	mov.w	r3, #128	; 0x80
    4426:	f383 8811 	msr	BASEPRI, r3
    442a:	f3bf 8f6f 	isb	sy
    442e:	f3bf 8f4f 	dsb	sy
    4432:	e7fe      	b.n	4432 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    4434:	4b34      	ldr	r3, [pc, #208]	; (4508 <xPortStartScheduler+0xf0>)
    4436:	681a      	ldr	r2, [r3, #0]
    4438:	4b35      	ldr	r3, [pc, #212]	; (4510 <xPortStartScheduler+0xf8>)
    443a:	429a      	cmp	r2, r3
    443c:	d108      	bne.n	4450 <xPortStartScheduler+0x38>
    443e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4442:	f383 8811 	msr	BASEPRI, r3
    4446:	f3bf 8f6f 	isb	sy
    444a:	f3bf 8f4f 	dsb	sy
    444e:	e7fe      	b.n	444e <xPortStartScheduler+0x36>
{
    4450:	b510      	push	{r4, lr}
    4452:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    4454:	4b2f      	ldr	r3, [pc, #188]	; (4514 <xPortStartScheduler+0xfc>)
    4456:	781a      	ldrb	r2, [r3, #0]
    4458:	b2d2      	uxtb	r2, r2
    445a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    445c:	22ff      	movs	r2, #255	; 0xff
    445e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    4460:	781b      	ldrb	r3, [r3, #0]
    4462:	b2db      	uxtb	r3, r3
    4464:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    4468:	f89d 3003 	ldrb.w	r3, [sp, #3]
    446c:	4a2a      	ldr	r2, [pc, #168]	; (4518 <xPortStartScheduler+0x100>)
    446e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4472:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    4474:	2307      	movs	r3, #7
    4476:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4478:	f89d 3003 	ldrb.w	r3, [sp, #3]
    447c:	f013 0f80 	tst.w	r3, #128	; 0x80
    4480:	d012      	beq.n	44a8 <xPortStartScheduler+0x90>
    4482:	2306      	movs	r3, #6
    4484:	e000      	b.n	4488 <xPortStartScheduler+0x70>
    4486:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    4488:	f89d 2003 	ldrb.w	r2, [sp, #3]
    448c:	0052      	lsls	r2, r2, #1
    448e:	b2d2      	uxtb	r2, r2
    4490:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4494:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4498:	1e59      	subs	r1, r3, #1
    449a:	f012 0f80 	tst.w	r2, #128	; 0x80
    449e:	d1f2      	bne.n	4486 <xPortStartScheduler+0x6e>
    44a0:	4a1d      	ldr	r2, [pc, #116]	; (4518 <xPortStartScheduler+0x100>)
    44a2:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    44a4:	2b04      	cmp	r3, #4
    44a6:	d008      	beq.n	44ba <xPortStartScheduler+0xa2>
    44a8:	f04f 0380 	mov.w	r3, #128	; 0x80
    44ac:	f383 8811 	msr	BASEPRI, r3
    44b0:	f3bf 8f6f 	isb	sy
    44b4:	f3bf 8f4f 	dsb	sy
    44b8:	e7fe      	b.n	44b8 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    44ba:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    44bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    44c0:	4a15      	ldr	r2, [pc, #84]	; (4518 <xPortStartScheduler+0x100>)
    44c2:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    44c4:	9b01      	ldr	r3, [sp, #4]
    44c6:	b2db      	uxtb	r3, r3
    44c8:	4a12      	ldr	r2, [pc, #72]	; (4514 <xPortStartScheduler+0xfc>)
    44ca:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    44cc:	4b13      	ldr	r3, [pc, #76]	; (451c <xPortStartScheduler+0x104>)
    44ce:	681a      	ldr	r2, [r3, #0]
    44d0:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    44d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    44d6:	681a      	ldr	r2, [r3, #0]
    44d8:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    44dc:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    44de:	4b10      	ldr	r3, [pc, #64]	; (4520 <xPortStartScheduler+0x108>)
    44e0:	4798      	blx	r3
	uxCriticalNesting = 0;
    44e2:	2400      	movs	r4, #0
    44e4:	4b0f      	ldr	r3, [pc, #60]	; (4524 <xPortStartScheduler+0x10c>)
    44e6:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    44e8:	4b0f      	ldr	r3, [pc, #60]	; (4528 <xPortStartScheduler+0x110>)
    44ea:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    44ec:	4a0f      	ldr	r2, [pc, #60]	; (452c <xPortStartScheduler+0x114>)
    44ee:	6813      	ldr	r3, [r2, #0]
    44f0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    44f4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    44f6:	4b0e      	ldr	r3, [pc, #56]	; (4530 <xPortStartScheduler+0x118>)
    44f8:	4798      	blx	r3
	vTaskSwitchContext();
    44fa:	4b0e      	ldr	r3, [pc, #56]	; (4534 <xPortStartScheduler+0x11c>)
    44fc:	4798      	blx	r3
	prvTaskExitError();
    44fe:	4b0e      	ldr	r3, [pc, #56]	; (4538 <xPortStartScheduler+0x120>)
    4500:	4798      	blx	r3
}
    4502:	4620      	mov	r0, r4
    4504:	b002      	add	sp, #8
    4506:	bd10      	pop	{r4, pc}
    4508:	e000ed00 	.word	0xe000ed00
    450c:	410fc271 	.word	0x410fc271
    4510:	410fc270 	.word	0x410fc270
    4514:	e000e400 	.word	0xe000e400
    4518:	20000b10 	.word	0x20000b10
    451c:	e000ed20 	.word	0xe000ed20
    4520:	000043f5 	.word	0x000043f5
    4524:	20000124 	.word	0x20000124
    4528:	00004275 	.word	0x00004275
    452c:	e000ef34 	.word	0xe000ef34
    4530:	0000424d 	.word	0x0000424d
    4534:	00005725 	.word	0x00005725
    4538:	0000420d 	.word	0x0000420d

0000453c <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    453c:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    4540:	2b0f      	cmp	r3, #15
    4542:	d90f      	bls.n	4564 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    4544:	4a10      	ldr	r2, [pc, #64]	; (4588 <vPortValidateInterruptPriority+0x4c>)
    4546:	5c9b      	ldrb	r3, [r3, r2]
    4548:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    454a:	4a10      	ldr	r2, [pc, #64]	; (458c <vPortValidateInterruptPriority+0x50>)
    454c:	7812      	ldrb	r2, [r2, #0]
    454e:	429a      	cmp	r2, r3
    4550:	d908      	bls.n	4564 <vPortValidateInterruptPriority+0x28>
    4552:	f04f 0380 	mov.w	r3, #128	; 0x80
    4556:	f383 8811 	msr	BASEPRI, r3
    455a:	f3bf 8f6f 	isb	sy
    455e:	f3bf 8f4f 	dsb	sy
    4562:	e7fe      	b.n	4562 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    4564:	4b0a      	ldr	r3, [pc, #40]	; (4590 <vPortValidateInterruptPriority+0x54>)
    4566:	681b      	ldr	r3, [r3, #0]
    4568:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    456c:	4a07      	ldr	r2, [pc, #28]	; (458c <vPortValidateInterruptPriority+0x50>)
    456e:	6852      	ldr	r2, [r2, #4]
    4570:	4293      	cmp	r3, r2
    4572:	d908      	bls.n	4586 <vPortValidateInterruptPriority+0x4a>
    4574:	f04f 0380 	mov.w	r3, #128	; 0x80
    4578:	f383 8811 	msr	BASEPRI, r3
    457c:	f3bf 8f6f 	isb	sy
    4580:	f3bf 8f4f 	dsb	sy
    4584:	e7fe      	b.n	4584 <vPortValidateInterruptPriority+0x48>
    4586:	4770      	bx	lr
    4588:	e000e3f0 	.word	0xe000e3f0
    458c:	20000b10 	.word	0x20000b10
    4590:	e000ed0c 	.word	0xe000ed0c

00004594 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4594:	b570      	push	{r4, r5, r6, lr}
    4596:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    4598:	4b2d      	ldr	r3, [pc, #180]	; (4650 <pvPortMalloc+0xbc>)
    459a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    459c:	4b2d      	ldr	r3, [pc, #180]	; (4654 <pvPortMalloc+0xc0>)
    459e:	689b      	ldr	r3, [r3, #8]
    45a0:	b183      	cbz	r3, 45c4 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    45a2:	2c00      	cmp	r4, #0
    45a4:	d04d      	beq.n	4642 <pvPortMalloc+0xae>
		{
			xWantedSize += heapSTRUCT_SIZE;
    45a6:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    45a8:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    45ac:	bf1c      	itt	ne
    45ae:	f024 0407 	bicne.w	r4, r4, #7
    45b2:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    45b4:	1e62      	subs	r2, r4, #1
    45b6:	f242 73f6 	movw	r3, #10230	; 0x27f6
    45ba:	429a      	cmp	r2, r3
    45bc:	d843      	bhi.n	4646 <pvPortMalloc+0xb2>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    45be:	4925      	ldr	r1, [pc, #148]	; (4654 <pvPortMalloc+0xc0>)
    45c0:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    45c2:	e017      	b.n	45f4 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    45c4:	4923      	ldr	r1, [pc, #140]	; (4654 <pvPortMalloc+0xc0>)
    45c6:	f101 0314 	add.w	r3, r1, #20
    45ca:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    45ce:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    45d0:	2500      	movs	r5, #0
    45d2:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    45d4:	4a20      	ldr	r2, [pc, #128]	; (4658 <pvPortMalloc+0xc4>)
    45d6:	f242 70f8 	movw	r0, #10232	; 0x27f8
    45da:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    45de:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    45e2:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    45e4:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    45e8:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    45ea:	2301      	movs	r3, #1
    45ec:	608b      	str	r3, [r1, #8]
    45ee:	e7d8      	b.n	45a2 <pvPortMalloc+0xe>
    45f0:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    45f2:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    45f4:	685a      	ldr	r2, [r3, #4]
    45f6:	4294      	cmp	r4, r2
    45f8:	d902      	bls.n	4600 <pvPortMalloc+0x6c>
    45fa:	681a      	ldr	r2, [r3, #0]
    45fc:	2a00      	cmp	r2, #0
    45fe:	d1f7      	bne.n	45f0 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    4600:	4a16      	ldr	r2, [pc, #88]	; (465c <pvPortMalloc+0xc8>)
    4602:	4293      	cmp	r3, r2
    4604:	d021      	beq.n	464a <pvPortMalloc+0xb6>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    4606:	680d      	ldr	r5, [r1, #0]
    4608:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    460a:	681a      	ldr	r2, [r3, #0]
    460c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    460e:	685a      	ldr	r2, [r3, #4]
    4610:	1b12      	subs	r2, r2, r4
    4612:	2a10      	cmp	r2, #16
    4614:	d90c      	bls.n	4630 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    4616:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    4618:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    461a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    461c:	6874      	ldr	r4, [r6, #4]
    461e:	490d      	ldr	r1, [pc, #52]	; (4654 <pvPortMalloc+0xc0>)
    4620:	e000      	b.n	4624 <pvPortMalloc+0x90>
    4622:	4611      	mov	r1, r2
    4624:	680a      	ldr	r2, [r1, #0]
    4626:	6850      	ldr	r0, [r2, #4]
    4628:	4284      	cmp	r4, r0
    462a:	d8fa      	bhi.n	4622 <pvPortMalloc+0x8e>
    462c:	6032      	str	r2, [r6, #0]
    462e:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    4630:	490b      	ldr	r1, [pc, #44]	; (4660 <pvPortMalloc+0xcc>)
    4632:	680a      	ldr	r2, [r1, #0]
    4634:	685b      	ldr	r3, [r3, #4]
    4636:	1ad2      	subs	r2, r2, r3
    4638:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    463a:	4b0a      	ldr	r3, [pc, #40]	; (4664 <pvPortMalloc+0xd0>)
    463c:	4798      	blx	r3
}
    463e:	4628      	mov	r0, r5
    4640:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
    4642:	2500      	movs	r5, #0
    4644:	e7f9      	b.n	463a <pvPortMalloc+0xa6>
    4646:	2500      	movs	r5, #0
    4648:	e7f7      	b.n	463a <pvPortMalloc+0xa6>
    464a:	2500      	movs	r5, #0
    464c:	e7f5      	b.n	463a <pvPortMalloc+0xa6>
    464e:	bf00      	nop
    4650:	000053cd 	.word	0x000053cd
    4654:	20000b18 	.word	0x20000b18
    4658:	20002d08 	.word	0x20002d08
    465c:	20003324 	.word	0x20003324
    4660:	20000128 	.word	0x20000128
    4664:	00005515 	.word	0x00005515

00004668 <vPortFree>:
	if( pv != NULL )
    4668:	b1d0      	cbz	r0, 46a0 <vPortFree+0x38>
{
    466a:	b570      	push	{r4, r5, r6, lr}
    466c:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    466e:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    4672:	4b0c      	ldr	r3, [pc, #48]	; (46a4 <vPortFree+0x3c>)
    4674:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    4676:	f855 4c04 	ldr.w	r4, [r5, #-4]
    467a:	4a0b      	ldr	r2, [pc, #44]	; (46a8 <vPortFree+0x40>)
    467c:	e000      	b.n	4680 <vPortFree+0x18>
    467e:	461a      	mov	r2, r3
    4680:	6813      	ldr	r3, [r2, #0]
    4682:	6859      	ldr	r1, [r3, #4]
    4684:	428c      	cmp	r4, r1
    4686:	d8fa      	bhi.n	467e <vPortFree+0x16>
    4688:	f845 3c08 	str.w	r3, [r5, #-8]
    468c:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    468e:	4a07      	ldr	r2, [pc, #28]	; (46ac <vPortFree+0x44>)
    4690:	f855 3c04 	ldr.w	r3, [r5, #-4]
    4694:	6811      	ldr	r1, [r2, #0]
    4696:	440b      	add	r3, r1
    4698:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    469a:	4b05      	ldr	r3, [pc, #20]	; (46b0 <vPortFree+0x48>)
    469c:	4798      	blx	r3
    469e:	bd70      	pop	{r4, r5, r6, pc}
    46a0:	4770      	bx	lr
    46a2:	bf00      	nop
    46a4:	000053cd 	.word	0x000053cd
    46a8:	20000b18 	.word	0x20000b18
    46ac:	20000128 	.word	0x20000128
    46b0:	00005515 	.word	0x00005515

000046b4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    46b4:	b510      	push	{r4, lr}
    46b6:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    46b8:	4b04      	ldr	r3, [pc, #16]	; (46cc <prvIsQueueEmpty+0x18>)
    46ba:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    46bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    46be:	4b04      	ldr	r3, [pc, #16]	; (46d0 <prvIsQueueEmpty+0x1c>)
    46c0:	4798      	blx	r3

	return xReturn;
}
    46c2:	fab4 f084 	clz	r0, r4
    46c6:	0940      	lsrs	r0, r0, #5
    46c8:	bd10      	pop	{r4, pc}
    46ca:	bf00      	nop
    46cc:	000042e5 	.word	0x000042e5
    46d0:	00004329 	.word	0x00004329

000046d4 <prvCopyDataToQueue>:
{
    46d4:	b570      	push	{r4, r5, r6, lr}
    46d6:	4604      	mov	r4, r0
    46d8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    46da:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    46dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    46de:	b952      	cbnz	r2, 46f6 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    46e0:	6803      	ldr	r3, [r0, #0]
    46e2:	2b00      	cmp	r3, #0
    46e4:	d12a      	bne.n	473c <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    46e6:	6840      	ldr	r0, [r0, #4]
    46e8:	4b18      	ldr	r3, [pc, #96]	; (474c <prvCopyDataToQueue+0x78>)
    46ea:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    46ec:	2300      	movs	r3, #0
    46ee:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    46f0:	3501      	adds	r5, #1
    46f2:	63a5      	str	r5, [r4, #56]	; 0x38
}
    46f4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    46f6:	b96e      	cbnz	r6, 4714 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    46f8:	6880      	ldr	r0, [r0, #8]
    46fa:	4b15      	ldr	r3, [pc, #84]	; (4750 <prvCopyDataToQueue+0x7c>)
    46fc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    46fe:	68a3      	ldr	r3, [r4, #8]
    4700:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4702:	4413      	add	r3, r2
    4704:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    4706:	6862      	ldr	r2, [r4, #4]
    4708:	4293      	cmp	r3, r2
    470a:	d319      	bcc.n	4740 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    470c:	6823      	ldr	r3, [r4, #0]
    470e:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    4710:	2000      	movs	r0, #0
    4712:	e7ed      	b.n	46f0 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    4714:	68c0      	ldr	r0, [r0, #12]
    4716:	4b0e      	ldr	r3, [pc, #56]	; (4750 <prvCopyDataToQueue+0x7c>)
    4718:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    471a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    471c:	425b      	negs	r3, r3
    471e:	68e2      	ldr	r2, [r4, #12]
    4720:	441a      	add	r2, r3
    4722:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    4724:	6821      	ldr	r1, [r4, #0]
    4726:	428a      	cmp	r2, r1
    4728:	d202      	bcs.n	4730 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    472a:	6862      	ldr	r2, [r4, #4]
    472c:	4413      	add	r3, r2
    472e:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    4730:	2e02      	cmp	r6, #2
    4732:	d107      	bne.n	4744 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    4734:	b145      	cbz	r5, 4748 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    4736:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    4738:	2000      	movs	r0, #0
    473a:	e7d9      	b.n	46f0 <prvCopyDataToQueue+0x1c>
    473c:	2000      	movs	r0, #0
    473e:	e7d7      	b.n	46f0 <prvCopyDataToQueue+0x1c>
    4740:	2000      	movs	r0, #0
    4742:	e7d5      	b.n	46f0 <prvCopyDataToQueue+0x1c>
    4744:	2000      	movs	r0, #0
    4746:	e7d3      	b.n	46f0 <prvCopyDataToQueue+0x1c>
    4748:	2000      	movs	r0, #0
    474a:	e7d1      	b.n	46f0 <prvCopyDataToQueue+0x1c>
    474c:	00005a65 	.word	0x00005a65
    4750:	00006227 	.word	0x00006227

00004754 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    4754:	b570      	push	{r4, r5, r6, lr}
    4756:	b082      	sub	sp, #8
    4758:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    475a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    475c:	b164      	cbz	r4, 4778 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    475e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4760:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4762:	429a      	cmp	r2, r3
    4764:	d311      	bcc.n	478a <prvNotifyQueueSetContainer+0x36>
    4766:	f04f 0380 	mov.w	r3, #128	; 0x80
    476a:	f383 8811 	msr	BASEPRI, r3
    476e:	f3bf 8f6f 	isb	sy
    4772:	f3bf 8f4f 	dsb	sy
    4776:	e7fe      	b.n	4776 <prvNotifyQueueSetContainer+0x22>
    4778:	f04f 0380 	mov.w	r3, #128	; 0x80
    477c:	f383 8811 	msr	BASEPRI, r3
    4780:	f3bf 8f6f 	isb	sy
    4784:	f3bf 8f4f 	dsb	sy
    4788:	e7fe      	b.n	4788 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    478a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    478c:	4293      	cmp	r3, r2
    478e:	d803      	bhi.n	4798 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    4790:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    4792:	4630      	mov	r0, r6
    4794:	b002      	add	sp, #8
    4796:	bd70      	pop	{r4, r5, r6, pc}
    4798:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    479a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    479e:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    47a0:	a901      	add	r1, sp, #4
    47a2:	4620      	mov	r0, r4
    47a4:	4b0a      	ldr	r3, [pc, #40]	; (47d0 <prvNotifyQueueSetContainer+0x7c>)
    47a6:	4798      	blx	r3
    47a8:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    47aa:	f1b5 3fff 	cmp.w	r5, #4294967295
    47ae:	d10a      	bne.n	47c6 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    47b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    47b2:	2b00      	cmp	r3, #0
    47b4:	d0ed      	beq.n	4792 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    47b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    47ba:	4b06      	ldr	r3, [pc, #24]	; (47d4 <prvNotifyQueueSetContainer+0x80>)
    47bc:	4798      	blx	r3
    47be:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    47c0:	bf18      	it	ne
    47c2:	2601      	movne	r6, #1
    47c4:	e7e5      	b.n	4792 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    47c6:	1c6b      	adds	r3, r5, #1
    47c8:	b25b      	sxtb	r3, r3
    47ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    47ce:	e7e0      	b.n	4792 <prvNotifyQueueSetContainer+0x3e>
    47d0:	000046d5 	.word	0x000046d5
    47d4:	00005861 	.word	0x00005861

000047d8 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    47d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    47da:	b172      	cbz	r2, 47fa <prvCopyDataFromQueue+0x22>
{
    47dc:	b510      	push	{r4, lr}
    47de:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    47e0:	68c4      	ldr	r4, [r0, #12]
    47e2:	4414      	add	r4, r2
    47e4:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    47e6:	6840      	ldr	r0, [r0, #4]
    47e8:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    47ea:	bf24      	itt	cs
    47ec:	6818      	ldrcs	r0, [r3, #0]
    47ee:	60d8      	strcs	r0, [r3, #12]
    47f0:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    47f2:	68d9      	ldr	r1, [r3, #12]
    47f4:	4b01      	ldr	r3, [pc, #4]	; (47fc <prvCopyDataFromQueue+0x24>)
    47f6:	4798      	blx	r3
    47f8:	bd10      	pop	{r4, pc}
    47fa:	4770      	bx	lr
    47fc:	00006227 	.word	0x00006227

00004800 <prvUnlockQueue>:
{
    4800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4804:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    4806:	4b23      	ldr	r3, [pc, #140]	; (4894 <prvUnlockQueue+0x94>)
    4808:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    480a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    480e:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    4810:	2c00      	cmp	r4, #0
    4812:	dd19      	ble.n	4848 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    4814:	4e20      	ldr	r6, [pc, #128]	; (4898 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    4816:	f8df 808c 	ldr.w	r8, [pc, #140]	; 48a4 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    481a:	4f20      	ldr	r7, [pc, #128]	; (489c <prvUnlockQueue+0x9c>)
    481c:	e008      	b.n	4830 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    481e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4820:	b193      	cbz	r3, 4848 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4822:	f105 0024 	add.w	r0, r5, #36	; 0x24
    4826:	47b8      	blx	r7
    4828:	b960      	cbnz	r0, 4844 <prvUnlockQueue+0x44>
    482a:	3c01      	subs	r4, #1
    482c:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    482e:	b15c      	cbz	r4, 4848 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    4830:	6cab      	ldr	r3, [r5, #72]	; 0x48
    4832:	2b00      	cmp	r3, #0
    4834:	d0f3      	beq.n	481e <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    4836:	2100      	movs	r1, #0
    4838:	4628      	mov	r0, r5
    483a:	47b0      	blx	r6
    483c:	2800      	cmp	r0, #0
    483e:	d0f4      	beq.n	482a <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    4840:	47c0      	blx	r8
    4842:	e7f2      	b.n	482a <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    4844:	47c0      	blx	r8
    4846:	e7f0      	b.n	482a <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    4848:	23ff      	movs	r3, #255	; 0xff
    484a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    484e:	4b14      	ldr	r3, [pc, #80]	; (48a0 <prvUnlockQueue+0xa0>)
    4850:	4798      	blx	r3
	taskENTER_CRITICAL();
    4852:	4b10      	ldr	r3, [pc, #64]	; (4894 <prvUnlockQueue+0x94>)
    4854:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    4856:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    485a:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    485c:	2c00      	cmp	r4, #0
    485e:	dd12      	ble.n	4886 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4860:	692b      	ldr	r3, [r5, #16]
    4862:	b183      	cbz	r3, 4886 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4864:	f105 0710 	add.w	r7, r5, #16
    4868:	4e0c      	ldr	r6, [pc, #48]	; (489c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    486a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 48a4 <prvUnlockQueue+0xa4>
    486e:	e004      	b.n	487a <prvUnlockQueue+0x7a>
    4870:	3c01      	subs	r4, #1
    4872:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    4874:	b13c      	cbz	r4, 4886 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4876:	692b      	ldr	r3, [r5, #16]
    4878:	b12b      	cbz	r3, 4886 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    487a:	4638      	mov	r0, r7
    487c:	47b0      	blx	r6
    487e:	2800      	cmp	r0, #0
    4880:	d0f6      	beq.n	4870 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    4882:	47c0      	blx	r8
    4884:	e7f4      	b.n	4870 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    4886:	23ff      	movs	r3, #255	; 0xff
    4888:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    488c:	4b04      	ldr	r3, [pc, #16]	; (48a0 <prvUnlockQueue+0xa0>)
    488e:	4798      	blx	r3
    4890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4894:	000042e5 	.word	0x000042e5
    4898:	00004755 	.word	0x00004755
    489c:	00005861 	.word	0x00005861
    48a0:	00004329 	.word	0x00004329
    48a4:	00005991 	.word	0x00005991

000048a8 <xQueueGenericReset>:
{
    48a8:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    48aa:	b330      	cbz	r0, 48fa <xQueueGenericReset+0x52>
    48ac:	4604      	mov	r4, r0
    48ae:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    48b0:	4b1c      	ldr	r3, [pc, #112]	; (4924 <xQueueGenericReset+0x7c>)
    48b2:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    48b4:	6822      	ldr	r2, [r4, #0]
    48b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    48b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    48ba:	fb03 f301 	mul.w	r3, r3, r1
    48be:	18d0      	adds	r0, r2, r3
    48c0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    48c2:	2000      	movs	r0, #0
    48c4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    48c6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    48c8:	1a5b      	subs	r3, r3, r1
    48ca:	4413      	add	r3, r2
    48cc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    48ce:	23ff      	movs	r3, #255	; 0xff
    48d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    48d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    48d8:	b9c5      	cbnz	r5, 490c <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    48da:	6923      	ldr	r3, [r4, #16]
    48dc:	b1eb      	cbz	r3, 491a <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    48de:	f104 0010 	add.w	r0, r4, #16
    48e2:	4b11      	ldr	r3, [pc, #68]	; (4928 <xQueueGenericReset+0x80>)
    48e4:	4798      	blx	r3
    48e6:	b1c0      	cbz	r0, 491a <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    48e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    48ec:	4b0f      	ldr	r3, [pc, #60]	; (492c <xQueueGenericReset+0x84>)
    48ee:	601a      	str	r2, [r3, #0]
    48f0:	f3bf 8f4f 	dsb	sy
    48f4:	f3bf 8f6f 	isb	sy
    48f8:	e00f      	b.n	491a <xQueueGenericReset+0x72>
    48fa:	f04f 0380 	mov.w	r3, #128	; 0x80
    48fe:	f383 8811 	msr	BASEPRI, r3
    4902:	f3bf 8f6f 	isb	sy
    4906:	f3bf 8f4f 	dsb	sy
    490a:	e7fe      	b.n	490a <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    490c:	f104 0010 	add.w	r0, r4, #16
    4910:	4d07      	ldr	r5, [pc, #28]	; (4930 <xQueueGenericReset+0x88>)
    4912:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    4914:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4918:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    491a:	4b06      	ldr	r3, [pc, #24]	; (4934 <xQueueGenericReset+0x8c>)
    491c:	4798      	blx	r3
}
    491e:	2001      	movs	r0, #1
    4920:	bd38      	pop	{r3, r4, r5, pc}
    4922:	bf00      	nop
    4924:	000042e5 	.word	0x000042e5
    4928:	00005861 	.word	0x00005861
    492c:	e000ed04 	.word	0xe000ed04
    4930:	0000417d 	.word	0x0000417d
    4934:	00004329 	.word	0x00004329

00004938 <xQueueGenericCreate>:
{
    4938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    493a:	b940      	cbnz	r0, 494e <xQueueGenericCreate+0x16>
    493c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4940:	f383 8811 	msr	BASEPRI, r3
    4944:	f3bf 8f6f 	isb	sy
    4948:	f3bf 8f4f 	dsb	sy
    494c:	e7fe      	b.n	494c <xQueueGenericCreate+0x14>
    494e:	4606      	mov	r6, r0
    4950:	4617      	mov	r7, r2
    4952:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    4954:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    4958:	3054      	adds	r0, #84	; 0x54
    495a:	4b0b      	ldr	r3, [pc, #44]	; (4988 <xQueueGenericCreate+0x50>)
    495c:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    495e:	4604      	mov	r4, r0
    4960:	b178      	cbz	r0, 4982 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    4962:	b11d      	cbz	r5, 496c <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    4964:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    4968:	6003      	str	r3, [r0, #0]
    496a:	e000      	b.n	496e <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    496c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    496e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    4970:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    4972:	2101      	movs	r1, #1
    4974:	4620      	mov	r0, r4
    4976:	4b05      	ldr	r3, [pc, #20]	; (498c <xQueueGenericCreate+0x54>)
    4978:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    497a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    497e:	2300      	movs	r3, #0
    4980:	64a3      	str	r3, [r4, #72]	; 0x48
}
    4982:	4620      	mov	r0, r4
    4984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4986:	bf00      	nop
    4988:	00004595 	.word	0x00004595
    498c:	000048a9 	.word	0x000048a9

00004990 <xQueueGenericSend>:
{
    4990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4994:	b085      	sub	sp, #20
    4996:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    4998:	b198      	cbz	r0, 49c2 <xQueueGenericSend+0x32>
    499a:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    499c:	b1d1      	cbz	r1, 49d4 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    499e:	2b02      	cmp	r3, #2
    49a0:	d024      	beq.n	49ec <xQueueGenericSend+0x5c>
    49a2:	461e      	mov	r6, r3
    49a4:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    49a6:	4b64      	ldr	r3, [pc, #400]	; (4b38 <xQueueGenericSend+0x1a8>)
    49a8:	4798      	blx	r3
    49aa:	bb58      	cbnz	r0, 4a04 <xQueueGenericSend+0x74>
    49ac:	9b01      	ldr	r3, [sp, #4]
    49ae:	b38b      	cbz	r3, 4a14 <xQueueGenericSend+0x84>
    49b0:	f04f 0380 	mov.w	r3, #128	; 0x80
    49b4:	f383 8811 	msr	BASEPRI, r3
    49b8:	f3bf 8f6f 	isb	sy
    49bc:	f3bf 8f4f 	dsb	sy
    49c0:	e7fe      	b.n	49c0 <xQueueGenericSend+0x30>
    49c2:	f04f 0380 	mov.w	r3, #128	; 0x80
    49c6:	f383 8811 	msr	BASEPRI, r3
    49ca:	f3bf 8f6f 	isb	sy
    49ce:	f3bf 8f4f 	dsb	sy
    49d2:	e7fe      	b.n	49d2 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    49d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    49d6:	2a00      	cmp	r2, #0
    49d8:	d0e1      	beq.n	499e <xQueueGenericSend+0xe>
    49da:	f04f 0380 	mov.w	r3, #128	; 0x80
    49de:	f383 8811 	msr	BASEPRI, r3
    49e2:	f3bf 8f6f 	isb	sy
    49e6:	f3bf 8f4f 	dsb	sy
    49ea:	e7fe      	b.n	49ea <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    49ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    49ee:	2a01      	cmp	r2, #1
    49f0:	d0d7      	beq.n	49a2 <xQueueGenericSend+0x12>
    49f2:	f04f 0380 	mov.w	r3, #128	; 0x80
    49f6:	f383 8811 	msr	BASEPRI, r3
    49fa:	f3bf 8f6f 	isb	sy
    49fe:	f3bf 8f4f 	dsb	sy
    4a02:	e7fe      	b.n	4a02 <xQueueGenericSend+0x72>
    4a04:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    4a06:	f8df 815c 	ldr.w	r8, [pc, #348]	; 4b64 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4a0a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 4b68 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    4a0e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 4b44 <xQueueGenericSend+0x1b4>
    4a12:	e041      	b.n	4a98 <xQueueGenericSend+0x108>
    4a14:	2500      	movs	r5, #0
    4a16:	e7f6      	b.n	4a06 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4a18:	4632      	mov	r2, r6
    4a1a:	4639      	mov	r1, r7
    4a1c:	4620      	mov	r0, r4
    4a1e:	4b47      	ldr	r3, [pc, #284]	; (4b3c <xQueueGenericSend+0x1ac>)
    4a20:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    4a22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4a24:	b193      	cbz	r3, 4a4c <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4a26:	4631      	mov	r1, r6
    4a28:	4620      	mov	r0, r4
    4a2a:	4b45      	ldr	r3, [pc, #276]	; (4b40 <xQueueGenericSend+0x1b0>)
    4a2c:	4798      	blx	r3
    4a2e:	b138      	cbz	r0, 4a40 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    4a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4a34:	4b43      	ldr	r3, [pc, #268]	; (4b44 <xQueueGenericSend+0x1b4>)
    4a36:	601a      	str	r2, [r3, #0]
    4a38:	f3bf 8f4f 	dsb	sy
    4a3c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    4a40:	4b41      	ldr	r3, [pc, #260]	; (4b48 <xQueueGenericSend+0x1b8>)
    4a42:	4798      	blx	r3
				return pdPASS;
    4a44:	2001      	movs	r0, #1
}
    4a46:	b005      	add	sp, #20
    4a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4a4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a4e:	b173      	cbz	r3, 4a6e <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4a50:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4a54:	4b3d      	ldr	r3, [pc, #244]	; (4b4c <xQueueGenericSend+0x1bc>)
    4a56:	4798      	blx	r3
    4a58:	2800      	cmp	r0, #0
    4a5a:	d0f1      	beq.n	4a40 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    4a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4a60:	4b38      	ldr	r3, [pc, #224]	; (4b44 <xQueueGenericSend+0x1b4>)
    4a62:	601a      	str	r2, [r3, #0]
    4a64:	f3bf 8f4f 	dsb	sy
    4a68:	f3bf 8f6f 	isb	sy
    4a6c:	e7e8      	b.n	4a40 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    4a6e:	2800      	cmp	r0, #0
    4a70:	d0e6      	beq.n	4a40 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    4a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4a76:	4b33      	ldr	r3, [pc, #204]	; (4b44 <xQueueGenericSend+0x1b4>)
    4a78:	601a      	str	r2, [r3, #0]
    4a7a:	f3bf 8f4f 	dsb	sy
    4a7e:	f3bf 8f6f 	isb	sy
    4a82:	e7dd      	b.n	4a40 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    4a84:	4b30      	ldr	r3, [pc, #192]	; (4b48 <xQueueGenericSend+0x1b8>)
    4a86:	4798      	blx	r3
					return errQUEUE_FULL;
    4a88:	2000      	movs	r0, #0
    4a8a:	e7dc      	b.n	4a46 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    4a8c:	4620      	mov	r0, r4
    4a8e:	4b30      	ldr	r3, [pc, #192]	; (4b50 <xQueueGenericSend+0x1c0>)
    4a90:	4798      	blx	r3
				(void)xTaskResumeAll();
    4a92:	4b30      	ldr	r3, [pc, #192]	; (4b54 <xQueueGenericSend+0x1c4>)
    4a94:	4798      	blx	r3
    4a96:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    4a98:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4a9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4a9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4a9e:	429a      	cmp	r2, r3
    4aa0:	d3ba      	bcc.n	4a18 <xQueueGenericSend+0x88>
    4aa2:	2e02      	cmp	r6, #2
    4aa4:	d0b8      	beq.n	4a18 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    4aa6:	9b01      	ldr	r3, [sp, #4]
    4aa8:	2b00      	cmp	r3, #0
    4aaa:	d0eb      	beq.n	4a84 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    4aac:	b90d      	cbnz	r5, 4ab2 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4aae:	a802      	add	r0, sp, #8
    4ab0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    4ab2:	4b25      	ldr	r3, [pc, #148]	; (4b48 <xQueueGenericSend+0x1b8>)
    4ab4:	4798      	blx	r3
		vTaskSuspendAll();
    4ab6:	4b28      	ldr	r3, [pc, #160]	; (4b58 <xQueueGenericSend+0x1c8>)
    4ab8:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4aba:	47c0      	blx	r8
    4abc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4ac0:	b25b      	sxtb	r3, r3
    4ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
    4ac6:	bf04      	itt	eq
    4ac8:	2300      	moveq	r3, #0
    4aca:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4ace:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4ad2:	b25b      	sxtb	r3, r3
    4ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
    4ad8:	bf04      	itt	eq
    4ada:	2300      	moveq	r3, #0
    4adc:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    4ae0:	4b19      	ldr	r3, [pc, #100]	; (4b48 <xQueueGenericSend+0x1b8>)
    4ae2:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4ae4:	a901      	add	r1, sp, #4
    4ae6:	a802      	add	r0, sp, #8
    4ae8:	4b1c      	ldr	r3, [pc, #112]	; (4b5c <xQueueGenericSend+0x1cc>)
    4aea:	4798      	blx	r3
    4aec:	b9e0      	cbnz	r0, 4b28 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    4aee:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    4af0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    4af4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    4af6:	4b14      	ldr	r3, [pc, #80]	; (4b48 <xQueueGenericSend+0x1b8>)
    4af8:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    4afa:	45ab      	cmp	fp, r5
    4afc:	d1c6      	bne.n	4a8c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    4afe:	9901      	ldr	r1, [sp, #4]
    4b00:	f104 0010 	add.w	r0, r4, #16
    4b04:	4b16      	ldr	r3, [pc, #88]	; (4b60 <xQueueGenericSend+0x1d0>)
    4b06:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4b08:	4620      	mov	r0, r4
    4b0a:	4b11      	ldr	r3, [pc, #68]	; (4b50 <xQueueGenericSend+0x1c0>)
    4b0c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    4b0e:	4b11      	ldr	r3, [pc, #68]	; (4b54 <xQueueGenericSend+0x1c4>)
    4b10:	4798      	blx	r3
    4b12:	2800      	cmp	r0, #0
    4b14:	d1bf      	bne.n	4a96 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    4b16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4b1a:	f8c9 3000 	str.w	r3, [r9]
    4b1e:	f3bf 8f4f 	dsb	sy
    4b22:	f3bf 8f6f 	isb	sy
    4b26:	e7b6      	b.n	4a96 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    4b28:	4620      	mov	r0, r4
    4b2a:	4b09      	ldr	r3, [pc, #36]	; (4b50 <xQueueGenericSend+0x1c0>)
    4b2c:	4798      	blx	r3
			(void)xTaskResumeAll();
    4b2e:	4b09      	ldr	r3, [pc, #36]	; (4b54 <xQueueGenericSend+0x1c4>)
    4b30:	4798      	blx	r3
			return errQUEUE_FULL;
    4b32:	2000      	movs	r0, #0
    4b34:	e787      	b.n	4a46 <xQueueGenericSend+0xb6>
    4b36:	bf00      	nop
    4b38:	000059a1 	.word	0x000059a1
    4b3c:	000046d5 	.word	0x000046d5
    4b40:	00004755 	.word	0x00004755
    4b44:	e000ed04 	.word	0xe000ed04
    4b48:	00004329 	.word	0x00004329
    4b4c:	00005861 	.word	0x00005861
    4b50:	00004801 	.word	0x00004801
    4b54:	00005515 	.word	0x00005515
    4b58:	000053cd 	.word	0x000053cd
    4b5c:	00005905 	.word	0x00005905
    4b60:	000057e1 	.word	0x000057e1
    4b64:	000042e5 	.word	0x000042e5
    4b68:	000058f1 	.word	0x000058f1

00004b6c <xQueueCreateMutex>:
{
    4b6c:	b538      	push	{r3, r4, r5, lr}
	pxNewQueue = (Queue_t *)xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType);
    4b6e:	4602      	mov	r2, r0
    4b70:	2100      	movs	r1, #0
    4b72:	2001      	movs	r0, #1
    4b74:	4b06      	ldr	r3, [pc, #24]	; (4b90 <xQueueCreateMutex+0x24>)
    4b76:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    4b78:	4604      	mov	r4, r0
    4b7a:	b138      	cbz	r0, 4b8c <xQueueCreateMutex+0x20>
		pxNewQueue->pxMutexHolder = NULL;
    4b7c:	2100      	movs	r1, #0
    4b7e:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    4b80:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    4b82:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    4b84:	460b      	mov	r3, r1
    4b86:	460a      	mov	r2, r1
    4b88:	4d02      	ldr	r5, [pc, #8]	; (4b94 <xQueueCreateMutex+0x28>)
    4b8a:	47a8      	blx	r5
}
    4b8c:	4620      	mov	r0, r4
    4b8e:	bd38      	pop	{r3, r4, r5, pc}
    4b90:	00004939 	.word	0x00004939
    4b94:	00004991 	.word	0x00004991

00004b98 <xQueueGenericSendFromISR>:
{
    4b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    4b9c:	2800      	cmp	r0, #0
    4b9e:	d036      	beq.n	4c0e <xQueueGenericSendFromISR+0x76>
    4ba0:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4ba2:	2900      	cmp	r1, #0
    4ba4:	d03c      	beq.n	4c20 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4ba6:	2b02      	cmp	r3, #2
    4ba8:	d046      	beq.n	4c38 <xQueueGenericSendFromISR+0xa0>
    4baa:	461f      	mov	r7, r3
    4bac:	4690      	mov	r8, r2
    4bae:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    4bb0:	4b37      	ldr	r3, [pc, #220]	; (4c90 <xQueueGenericSendFromISR+0xf8>)
    4bb2:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    4bb4:	f3ef 8611 	mrs	r6, BASEPRI
    4bb8:	f04f 0380 	mov.w	r3, #128	; 0x80
    4bbc:	f383 8811 	msr	BASEPRI, r3
    4bc0:	f3bf 8f6f 	isb	sy
    4bc4:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4bc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4bca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4bcc:	429a      	cmp	r2, r3
    4bce:	d301      	bcc.n	4bd4 <xQueueGenericSendFromISR+0x3c>
    4bd0:	2f02      	cmp	r7, #2
    4bd2:	d151      	bne.n	4c78 <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    4bd4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    4bd8:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4bda:	463a      	mov	r2, r7
    4bdc:	4649      	mov	r1, r9
    4bde:	4620      	mov	r0, r4
    4be0:	4b2c      	ldr	r3, [pc, #176]	; (4c94 <xQueueGenericSendFromISR+0xfc>)
    4be2:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    4be4:	f1b5 3fff 	cmp.w	r5, #4294967295
    4be8:	d140      	bne.n	4c6c <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    4bea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4bec:	b383      	cbz	r3, 4c50 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4bee:	4639      	mov	r1, r7
    4bf0:	4620      	mov	r0, r4
    4bf2:	4b29      	ldr	r3, [pc, #164]	; (4c98 <xQueueGenericSendFromISR+0x100>)
    4bf4:	4798      	blx	r3
    4bf6:	2800      	cmp	r0, #0
    4bf8:	d040      	beq.n	4c7c <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    4bfa:	f1b8 0f00 	cmp.w	r8, #0
    4bfe:	d03f      	beq.n	4c80 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4c00:	2001      	movs	r0, #1
    4c02:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4c06:	f386 8811 	msr	BASEPRI, r6
}
    4c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    4c0e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c12:	f383 8811 	msr	BASEPRI, r3
    4c16:	f3bf 8f6f 	isb	sy
    4c1a:	f3bf 8f4f 	dsb	sy
    4c1e:	e7fe      	b.n	4c1e <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4c20:	6c00      	ldr	r0, [r0, #64]	; 0x40
    4c22:	2800      	cmp	r0, #0
    4c24:	d0bf      	beq.n	4ba6 <xQueueGenericSendFromISR+0xe>
    4c26:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c2a:	f383 8811 	msr	BASEPRI, r3
    4c2e:	f3bf 8f6f 	isb	sy
    4c32:	f3bf 8f4f 	dsb	sy
    4c36:	e7fe      	b.n	4c36 <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4c38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4c3a:	2801      	cmp	r0, #1
    4c3c:	d0b5      	beq.n	4baa <xQueueGenericSendFromISR+0x12>
    4c3e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c42:	f383 8811 	msr	BASEPRI, r3
    4c46:	f3bf 8f6f 	isb	sy
    4c4a:	f3bf 8f4f 	dsb	sy
    4c4e:	e7fe      	b.n	4c4e <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c52:	b1bb      	cbz	r3, 4c84 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4c54:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4c58:	4b10      	ldr	r3, [pc, #64]	; (4c9c <xQueueGenericSendFromISR+0x104>)
    4c5a:	4798      	blx	r3
    4c5c:	b1a0      	cbz	r0, 4c88 <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    4c5e:	f1b8 0f00 	cmp.w	r8, #0
    4c62:	d013      	beq.n	4c8c <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    4c64:	2001      	movs	r0, #1
    4c66:	f8c8 0000 	str.w	r0, [r8]
    4c6a:	e7cc      	b.n	4c06 <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    4c6c:	1c6b      	adds	r3, r5, #1
    4c6e:	b25b      	sxtb	r3, r3
    4c70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    4c74:	2001      	movs	r0, #1
    4c76:	e7c6      	b.n	4c06 <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    4c78:	2000      	movs	r0, #0
    4c7a:	e7c4      	b.n	4c06 <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    4c7c:	2001      	movs	r0, #1
    4c7e:	e7c2      	b.n	4c06 <xQueueGenericSendFromISR+0x6e>
    4c80:	2001      	movs	r0, #1
    4c82:	e7c0      	b.n	4c06 <xQueueGenericSendFromISR+0x6e>
    4c84:	2001      	movs	r0, #1
    4c86:	e7be      	b.n	4c06 <xQueueGenericSendFromISR+0x6e>
    4c88:	2001      	movs	r0, #1
    4c8a:	e7bc      	b.n	4c06 <xQueueGenericSendFromISR+0x6e>
    4c8c:	2001      	movs	r0, #1
    4c8e:	e7ba      	b.n	4c06 <xQueueGenericSendFromISR+0x6e>
    4c90:	0000453d 	.word	0x0000453d
    4c94:	000046d5 	.word	0x000046d5
    4c98:	00004755 	.word	0x00004755
    4c9c:	00005861 	.word	0x00005861

00004ca0 <xQueueReceive>:
{
    4ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ca4:	b084      	sub	sp, #16
    4ca6:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    4ca8:	b180      	cbz	r0, 4ccc <xQueueReceive+0x2c>
    4caa:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    4cac:	b1b9      	cbz	r1, 4cde <xQueueReceive+0x3e>
    4cae:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4cb0:	4b50      	ldr	r3, [pc, #320]	; (4df4 <xQueueReceive+0x154>)
    4cb2:	4798      	blx	r3
    4cb4:	b9f8      	cbnz	r0, 4cf6 <xQueueReceive+0x56>
    4cb6:	9b01      	ldr	r3, [sp, #4]
    4cb8:	b32b      	cbz	r3, 4d06 <xQueueReceive+0x66>
    4cba:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cbe:	f383 8811 	msr	BASEPRI, r3
    4cc2:	f3bf 8f6f 	isb	sy
    4cc6:	f3bf 8f4f 	dsb	sy
    4cca:	e7fe      	b.n	4cca <xQueueReceive+0x2a>
    4ccc:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cd0:	f383 8811 	msr	BASEPRI, r3
    4cd4:	f3bf 8f6f 	isb	sy
    4cd8:	f3bf 8f4f 	dsb	sy
    4cdc:	e7fe      	b.n	4cdc <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    4cde:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4ce0:	2b00      	cmp	r3, #0
    4ce2:	d0e4      	beq.n	4cae <xQueueReceive+0xe>
    4ce4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ce8:	f383 8811 	msr	BASEPRI, r3
    4cec:	f3bf 8f6f 	isb	sy
    4cf0:	f3bf 8f4f 	dsb	sy
    4cf4:	e7fe      	b.n	4cf4 <xQueueReceive+0x54>
    4cf6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    4cf8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4e20 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4cfc:	f8df a124 	ldr.w	sl, [pc, #292]	; 4e24 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    4d00:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4e00 <xQueueReceive+0x160>
    4d04:	e029      	b.n	4d5a <xQueueReceive+0xba>
    4d06:	2700      	movs	r7, #0
    4d08:	e7f6      	b.n	4cf8 <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    4d0a:	4631      	mov	r1, r6
    4d0c:	4620      	mov	r0, r4
    4d0e:	4b3a      	ldr	r3, [pc, #232]	; (4df8 <xQueueReceive+0x158>)
    4d10:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    4d12:	3d01      	subs	r5, #1
    4d14:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4d16:	6923      	ldr	r3, [r4, #16]
    4d18:	b163      	cbz	r3, 4d34 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4d1a:	f104 0010 	add.w	r0, r4, #16
    4d1e:	4b37      	ldr	r3, [pc, #220]	; (4dfc <xQueueReceive+0x15c>)
    4d20:	4798      	blx	r3
    4d22:	b138      	cbz	r0, 4d34 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    4d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4d28:	4b35      	ldr	r3, [pc, #212]	; (4e00 <xQueueReceive+0x160>)
    4d2a:	601a      	str	r2, [r3, #0]
    4d2c:	f3bf 8f4f 	dsb	sy
    4d30:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    4d34:	4b33      	ldr	r3, [pc, #204]	; (4e04 <xQueueReceive+0x164>)
    4d36:	4798      	blx	r3
				return pdPASS;
    4d38:	2001      	movs	r0, #1
}
    4d3a:	b004      	add	sp, #16
    4d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    4d40:	4b30      	ldr	r3, [pc, #192]	; (4e04 <xQueueReceive+0x164>)
    4d42:	4798      	blx	r3
					return errQUEUE_EMPTY;
    4d44:	2000      	movs	r0, #0
    4d46:	e7f8      	b.n	4d3a <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4d48:	a802      	add	r0, sp, #8
    4d4a:	47d0      	blx	sl
    4d4c:	e00e      	b.n	4d6c <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    4d4e:	4620      	mov	r0, r4
    4d50:	4b2d      	ldr	r3, [pc, #180]	; (4e08 <xQueueReceive+0x168>)
    4d52:	4798      	blx	r3
				(void)xTaskResumeAll();
    4d54:	4b2d      	ldr	r3, [pc, #180]	; (4e0c <xQueueReceive+0x16c>)
    4d56:	4798      	blx	r3
    4d58:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    4d5a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4d5c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    4d5e:	2d00      	cmp	r5, #0
    4d60:	d1d3      	bne.n	4d0a <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    4d62:	9b01      	ldr	r3, [sp, #4]
    4d64:	2b00      	cmp	r3, #0
    4d66:	d0eb      	beq.n	4d40 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    4d68:	2f00      	cmp	r7, #0
    4d6a:	d0ed      	beq.n	4d48 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    4d6c:	4b25      	ldr	r3, [pc, #148]	; (4e04 <xQueueReceive+0x164>)
    4d6e:	4798      	blx	r3
		vTaskSuspendAll();
    4d70:	4b27      	ldr	r3, [pc, #156]	; (4e10 <xQueueReceive+0x170>)
    4d72:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4d74:	47c0      	blx	r8
    4d76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4d7a:	b25b      	sxtb	r3, r3
    4d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4d80:	bf04      	itt	eq
    4d82:	2300      	moveq	r3, #0
    4d84:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4d88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4d8c:	b25b      	sxtb	r3, r3
    4d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4d92:	bf04      	itt	eq
    4d94:	2300      	moveq	r3, #0
    4d96:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    4d9a:	4b1a      	ldr	r3, [pc, #104]	; (4e04 <xQueueReceive+0x164>)
    4d9c:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4d9e:	a901      	add	r1, sp, #4
    4da0:	a802      	add	r0, sp, #8
    4da2:	4b1c      	ldr	r3, [pc, #112]	; (4e14 <xQueueReceive+0x174>)
    4da4:	4798      	blx	r3
    4da6:	b9c8      	cbnz	r0, 4ddc <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4da8:	4620      	mov	r0, r4
    4daa:	4b1b      	ldr	r3, [pc, #108]	; (4e18 <xQueueReceive+0x178>)
    4dac:	4798      	blx	r3
    4dae:	2800      	cmp	r0, #0
    4db0:	d0cd      	beq.n	4d4e <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    4db2:	9901      	ldr	r1, [sp, #4]
    4db4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4db8:	4b18      	ldr	r3, [pc, #96]	; (4e1c <xQueueReceive+0x17c>)
    4dba:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4dbc:	4620      	mov	r0, r4
    4dbe:	4b12      	ldr	r3, [pc, #72]	; (4e08 <xQueueReceive+0x168>)
    4dc0:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    4dc2:	4b12      	ldr	r3, [pc, #72]	; (4e0c <xQueueReceive+0x16c>)
    4dc4:	4798      	blx	r3
    4dc6:	2800      	cmp	r0, #0
    4dc8:	d1c6      	bne.n	4d58 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    4dca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4dce:	f8c9 3000 	str.w	r3, [r9]
    4dd2:	f3bf 8f4f 	dsb	sy
    4dd6:	f3bf 8f6f 	isb	sy
    4dda:	e7bd      	b.n	4d58 <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    4ddc:	4620      	mov	r0, r4
    4dde:	4b0a      	ldr	r3, [pc, #40]	; (4e08 <xQueueReceive+0x168>)
    4de0:	4798      	blx	r3
			(void)xTaskResumeAll();
    4de2:	4b0a      	ldr	r3, [pc, #40]	; (4e0c <xQueueReceive+0x16c>)
    4de4:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4de6:	4620      	mov	r0, r4
    4de8:	4b0b      	ldr	r3, [pc, #44]	; (4e18 <xQueueReceive+0x178>)
    4dea:	4798      	blx	r3
    4dec:	2800      	cmp	r0, #0
    4dee:	d0b3      	beq.n	4d58 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    4df0:	2000      	movs	r0, #0
    4df2:	e7a2      	b.n	4d3a <xQueueReceive+0x9a>
    4df4:	000059a1 	.word	0x000059a1
    4df8:	000047d9 	.word	0x000047d9
    4dfc:	00005861 	.word	0x00005861
    4e00:	e000ed04 	.word	0xe000ed04
    4e04:	00004329 	.word	0x00004329
    4e08:	00004801 	.word	0x00004801
    4e0c:	00005515 	.word	0x00005515
    4e10:	000053cd 	.word	0x000053cd
    4e14:	00005905 	.word	0x00005905
    4e18:	000046b5 	.word	0x000046b5
    4e1c:	000057e1 	.word	0x000057e1
    4e20:	000042e5 	.word	0x000042e5
    4e24:	000058f1 	.word	0x000058f1

00004e28 <xQueueSemaphoreTake>:
{
    4e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4e2c:	b085      	sub	sp, #20
    4e2e:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    4e30:	b158      	cbz	r0, 4e4a <xQueueSemaphoreTake+0x22>
    4e32:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    4e34:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4e36:	b18b      	cbz	r3, 4e5c <xQueueSemaphoreTake+0x34>
    4e38:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e3c:	f383 8811 	msr	BASEPRI, r3
    4e40:	f3bf 8f6f 	isb	sy
    4e44:	f3bf 8f4f 	dsb	sy
    4e48:	e7fe      	b.n	4e48 <xQueueSemaphoreTake+0x20>
    4e4a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e4e:	f383 8811 	msr	BASEPRI, r3
    4e52:	f3bf 8f6f 	isb	sy
    4e56:	f3bf 8f4f 	dsb	sy
    4e5a:	e7fe      	b.n	4e5a <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4e5c:	4b5b      	ldr	r3, [pc, #364]	; (4fcc <xQueueSemaphoreTake+0x1a4>)
    4e5e:	4798      	blx	r3
    4e60:	b950      	cbnz	r0, 4e78 <xQueueSemaphoreTake+0x50>
    4e62:	9b01      	ldr	r3, [sp, #4]
    4e64:	b183      	cbz	r3, 4e88 <xQueueSemaphoreTake+0x60>
    4e66:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e6a:	f383 8811 	msr	BASEPRI, r3
    4e6e:	f3bf 8f6f 	isb	sy
    4e72:	f3bf 8f4f 	dsb	sy
    4e76:	e7fe      	b.n	4e76 <xQueueSemaphoreTake+0x4e>
    4e78:	2500      	movs	r5, #0
    4e7a:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    4e7c:	4e54      	ldr	r6, [pc, #336]	; (4fd0 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    4e7e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 5004 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    4e82:	f8df 8158 	ldr.w	r8, [pc, #344]	; 4fdc <xQueueSemaphoreTake+0x1b4>
    4e86:	e048      	b.n	4f1a <xQueueSemaphoreTake+0xf2>
    4e88:	2500      	movs	r5, #0
    4e8a:	462f      	mov	r7, r5
    4e8c:	e7f6      	b.n	4e7c <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    4e8e:	3b01      	subs	r3, #1
    4e90:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4e92:	6823      	ldr	r3, [r4, #0]
    4e94:	b913      	cbnz	r3, 4e9c <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    4e96:	4b4f      	ldr	r3, [pc, #316]	; (4fd4 <xQueueSemaphoreTake+0x1ac>)
    4e98:	4798      	blx	r3
    4e9a:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4e9c:	6923      	ldr	r3, [r4, #16]
    4e9e:	b163      	cbz	r3, 4eba <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4ea0:	f104 0010 	add.w	r0, r4, #16
    4ea4:	4b4c      	ldr	r3, [pc, #304]	; (4fd8 <xQueueSemaphoreTake+0x1b0>)
    4ea6:	4798      	blx	r3
    4ea8:	b138      	cbz	r0, 4eba <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    4eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4eae:	4b4b      	ldr	r3, [pc, #300]	; (4fdc <xQueueSemaphoreTake+0x1b4>)
    4eb0:	601a      	str	r2, [r3, #0]
    4eb2:	f3bf 8f4f 	dsb	sy
    4eb6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    4eba:	4b49      	ldr	r3, [pc, #292]	; (4fe0 <xQueueSemaphoreTake+0x1b8>)
    4ebc:	4798      	blx	r3
				return pdPASS;
    4ebe:	2501      	movs	r5, #1
}
    4ec0:	4628      	mov	r0, r5
    4ec2:	b005      	add	sp, #20
    4ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    4ec8:	b145      	cbz	r5, 4edc <xQueueSemaphoreTake+0xb4>
    4eca:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ece:	f383 8811 	msr	BASEPRI, r3
    4ed2:	f3bf 8f6f 	isb	sy
    4ed6:	f3bf 8f4f 	dsb	sy
    4eda:	e7fe      	b.n	4eda <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    4edc:	4b40      	ldr	r3, [pc, #256]	; (4fe0 <xQueueSemaphoreTake+0x1b8>)
    4ede:	4798      	blx	r3
					return errQUEUE_EMPTY;
    4ee0:	e7ee      	b.n	4ec0 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4ee2:	a802      	add	r0, sp, #8
    4ee4:	47c8      	blx	r9
    4ee6:	e021      	b.n	4f2c <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    4ee8:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    4eea:	6860      	ldr	r0, [r4, #4]
    4eec:	4b3d      	ldr	r3, [pc, #244]	; (4fe4 <xQueueSemaphoreTake+0x1bc>)
    4eee:	4798      	blx	r3
    4ef0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    4ef2:	4b3b      	ldr	r3, [pc, #236]	; (4fe0 <xQueueSemaphoreTake+0x1b8>)
    4ef4:	4798      	blx	r3
    4ef6:	e040      	b.n	4f7a <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    4ef8:	4620      	mov	r0, r4
    4efa:	4b3b      	ldr	r3, [pc, #236]	; (4fe8 <xQueueSemaphoreTake+0x1c0>)
    4efc:	4798      	blx	r3
				(void)xTaskResumeAll();
    4efe:	4b3b      	ldr	r3, [pc, #236]	; (4fec <xQueueSemaphoreTake+0x1c4>)
    4f00:	4798      	blx	r3
    4f02:	e009      	b.n	4f18 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    4f04:	4620      	mov	r0, r4
    4f06:	4b38      	ldr	r3, [pc, #224]	; (4fe8 <xQueueSemaphoreTake+0x1c0>)
    4f08:	4798      	blx	r3
			(void)xTaskResumeAll();
    4f0a:	4b38      	ldr	r3, [pc, #224]	; (4fec <xQueueSemaphoreTake+0x1c4>)
    4f0c:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4f0e:	4620      	mov	r0, r4
    4f10:	4b37      	ldr	r3, [pc, #220]	; (4ff0 <xQueueSemaphoreTake+0x1c8>)
    4f12:	4798      	blx	r3
    4f14:	2800      	cmp	r0, #0
    4f16:	d145      	bne.n	4fa4 <xQueueSemaphoreTake+0x17c>
    4f18:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    4f1a:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    4f1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    4f1e:	2b00      	cmp	r3, #0
    4f20:	d1b5      	bne.n	4e8e <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    4f22:	9b01      	ldr	r3, [sp, #4]
    4f24:	2b00      	cmp	r3, #0
    4f26:	d0cf      	beq.n	4ec8 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    4f28:	2f00      	cmp	r7, #0
    4f2a:	d0da      	beq.n	4ee2 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    4f2c:	4b2c      	ldr	r3, [pc, #176]	; (4fe0 <xQueueSemaphoreTake+0x1b8>)
    4f2e:	4798      	blx	r3
		vTaskSuspendAll();
    4f30:	4b30      	ldr	r3, [pc, #192]	; (4ff4 <xQueueSemaphoreTake+0x1cc>)
    4f32:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4f34:	47b0      	blx	r6
    4f36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4f3a:	b25b      	sxtb	r3, r3
    4f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f40:	bf04      	itt	eq
    4f42:	2300      	moveq	r3, #0
    4f44:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4f48:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4f4c:	b25b      	sxtb	r3, r3
    4f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4f52:	bf04      	itt	eq
    4f54:	2300      	moveq	r3, #0
    4f56:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    4f5a:	4b21      	ldr	r3, [pc, #132]	; (4fe0 <xQueueSemaphoreTake+0x1b8>)
    4f5c:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4f5e:	a901      	add	r1, sp, #4
    4f60:	a802      	add	r0, sp, #8
    4f62:	4b25      	ldr	r3, [pc, #148]	; (4ff8 <xQueueSemaphoreTake+0x1d0>)
    4f64:	4798      	blx	r3
    4f66:	2800      	cmp	r0, #0
    4f68:	d1cc      	bne.n	4f04 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4f6a:	4620      	mov	r0, r4
    4f6c:	4b20      	ldr	r3, [pc, #128]	; (4ff0 <xQueueSemaphoreTake+0x1c8>)
    4f6e:	4798      	blx	r3
    4f70:	2800      	cmp	r0, #0
    4f72:	d0c1      	beq.n	4ef8 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4f74:	6823      	ldr	r3, [r4, #0]
    4f76:	2b00      	cmp	r3, #0
    4f78:	d0b6      	beq.n	4ee8 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    4f7a:	9901      	ldr	r1, [sp, #4]
    4f7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4f80:	4b1e      	ldr	r3, [pc, #120]	; (4ffc <xQueueSemaphoreTake+0x1d4>)
    4f82:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4f84:	4620      	mov	r0, r4
    4f86:	4b18      	ldr	r3, [pc, #96]	; (4fe8 <xQueueSemaphoreTake+0x1c0>)
    4f88:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    4f8a:	4b18      	ldr	r3, [pc, #96]	; (4fec <xQueueSemaphoreTake+0x1c4>)
    4f8c:	4798      	blx	r3
    4f8e:	2800      	cmp	r0, #0
    4f90:	d1c2      	bne.n	4f18 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    4f92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4f96:	f8c8 3000 	str.w	r3, [r8]
    4f9a:	f3bf 8f4f 	dsb	sy
    4f9e:	f3bf 8f6f 	isb	sy
    4fa2:	e7b9      	b.n	4f18 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    4fa4:	2d00      	cmp	r5, #0
    4fa6:	d08b      	beq.n	4ec0 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    4fa8:	4b09      	ldr	r3, [pc, #36]	; (4fd0 <xQueueSemaphoreTake+0x1a8>)
    4faa:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    4fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4fae:	b153      	cbz	r3, 4fc6 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    4fb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4fb2:	6819      	ldr	r1, [r3, #0]
    4fb4:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    4fb8:	6860      	ldr	r0, [r4, #4]
    4fba:	4b11      	ldr	r3, [pc, #68]	; (5000 <xQueueSemaphoreTake+0x1d8>)
    4fbc:	4798      	blx	r3
						taskEXIT_CRITICAL();
    4fbe:	4b08      	ldr	r3, [pc, #32]	; (4fe0 <xQueueSemaphoreTake+0x1b8>)
    4fc0:	4798      	blx	r3
				return errQUEUE_EMPTY;
    4fc2:	2500      	movs	r5, #0
    4fc4:	e77c      	b.n	4ec0 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    4fc6:	2100      	movs	r1, #0
    4fc8:	e7f6      	b.n	4fb8 <xQueueSemaphoreTake+0x190>
    4fca:	bf00      	nop
    4fcc:	000059a1 	.word	0x000059a1
    4fd0:	000042e5 	.word	0x000042e5
    4fd4:	00005bad 	.word	0x00005bad
    4fd8:	00005861 	.word	0x00005861
    4fdc:	e000ed04 	.word	0xe000ed04
    4fe0:	00004329 	.word	0x00004329
    4fe4:	000059c1 	.word	0x000059c1
    4fe8:	00004801 	.word	0x00004801
    4fec:	00005515 	.word	0x00005515
    4ff0:	000046b5 	.word	0x000046b5
    4ff4:	000053cd 	.word	0x000053cd
    4ff8:	00005905 	.word	0x00005905
    4ffc:	000057e1 	.word	0x000057e1
    5000:	00005b01 	.word	0x00005b01
    5004:	000058f1 	.word	0x000058f1

00005008 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    5008:	b940      	cbnz	r0, 501c <uxQueueMessagesWaiting+0x14>
    500a:	f04f 0380 	mov.w	r3, #128	; 0x80
    500e:	f383 8811 	msr	BASEPRI, r3
    5012:	f3bf 8f6f 	isb	sy
    5016:	f3bf 8f4f 	dsb	sy
    501a:	e7fe      	b.n	501a <uxQueueMessagesWaiting+0x12>
{
    501c:	b510      	push	{r4, lr}
    501e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    5020:	4b03      	ldr	r3, [pc, #12]	; (5030 <uxQueueMessagesWaiting+0x28>)
    5022:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    5024:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    5026:	4b03      	ldr	r3, [pc, #12]	; (5034 <uxQueueMessagesWaiting+0x2c>)
    5028:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    502a:	4620      	mov	r0, r4
    502c:	bd10      	pop	{r4, pc}
    502e:	bf00      	nop
    5030:	000042e5 	.word	0x000042e5
    5034:	00004329 	.word	0x00004329

00005038 <vQueueWaitForMessageRestricted>:
{
    5038:	b570      	push	{r4, r5, r6, lr}
    503a:	4604      	mov	r4, r0
    503c:	460d      	mov	r5, r1
    503e:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    5040:	4b11      	ldr	r3, [pc, #68]	; (5088 <vQueueWaitForMessageRestricted+0x50>)
    5042:	4798      	blx	r3
    5044:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5048:	b25b      	sxtb	r3, r3
    504a:	f1b3 3fff 	cmp.w	r3, #4294967295
    504e:	bf04      	itt	eq
    5050:	2300      	moveq	r3, #0
    5052:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5056:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    505a:	b25b      	sxtb	r3, r3
    505c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5060:	bf04      	itt	eq
    5062:	2300      	moveq	r3, #0
    5064:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5068:	4b08      	ldr	r3, [pc, #32]	; (508c <vQueueWaitForMessageRestricted+0x54>)
    506a:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    506c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    506e:	b11b      	cbz	r3, 5078 <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    5070:	4620      	mov	r0, r4
    5072:	4b07      	ldr	r3, [pc, #28]	; (5090 <vQueueWaitForMessageRestricted+0x58>)
    5074:	4798      	blx	r3
    5076:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    5078:	4632      	mov	r2, r6
    507a:	4629      	mov	r1, r5
    507c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5080:	4b04      	ldr	r3, [pc, #16]	; (5094 <vQueueWaitForMessageRestricted+0x5c>)
    5082:	4798      	blx	r3
    5084:	e7f4      	b.n	5070 <vQueueWaitForMessageRestricted+0x38>
    5086:	bf00      	nop
    5088:	000042e5 	.word	0x000042e5
    508c:	00004329 	.word	0x00004329
    5090:	00004801 	.word	0x00004801
    5094:	0000581d 	.word	0x0000581d

00005098 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5098:	4a06      	ldr	r2, [pc, #24]	; (50b4 <prvIdleTask+0x1c>)
				taskYIELD();
    509a:	4807      	ldr	r0, [pc, #28]	; (50b8 <prvIdleTask+0x20>)
    509c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    50a0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    50a2:	2b01      	cmp	r3, #1
    50a4:	d9fc      	bls.n	50a0 <prvIdleTask+0x8>
				taskYIELD();
    50a6:	6001      	str	r1, [r0, #0]
    50a8:	f3bf 8f4f 	dsb	sy
    50ac:	f3bf 8f6f 	isb	sy
    50b0:	e7f6      	b.n	50a0 <prvIdleTask+0x8>
    50b2:	bf00      	nop
    50b4:	2000332c 	.word	0x2000332c
    50b8:	e000ed04 	.word	0xe000ed04

000050bc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    50bc:	4b09      	ldr	r3, [pc, #36]	; (50e4 <prvResetNextTaskUnblockTime+0x28>)
    50be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    50c2:	681b      	ldr	r3, [r3, #0]
    50c4:	b143      	cbz	r3, 50d8 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    50c6:	4b07      	ldr	r3, [pc, #28]	; (50e4 <prvResetNextTaskUnblockTime+0x28>)
    50c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    50cc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    50ce:	68d2      	ldr	r2, [r2, #12]
    50d0:	6852      	ldr	r2, [r2, #4]
    50d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    50d6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    50d8:	f04f 32ff 	mov.w	r2, #4294967295
    50dc:	4b01      	ldr	r3, [pc, #4]	; (50e4 <prvResetNextTaskUnblockTime+0x28>)
    50de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    50e2:	4770      	bx	lr
    50e4:	2000332c 	.word	0x2000332c

000050e8 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    50e8:	b570      	push	{r4, r5, r6, lr}
    50ea:	4604      	mov	r4, r0
    50ec:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    50ee:	4b1a      	ldr	r3, [pc, #104]	; (5158 <prvAddCurrentTaskToDelayedList+0x70>)
    50f0:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    50f4:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    50f8:	3004      	adds	r0, #4
    50fa:	4b18      	ldr	r3, [pc, #96]	; (515c <prvAddCurrentTaskToDelayedList+0x74>)
    50fc:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    50fe:	f1b4 3fff 	cmp.w	r4, #4294967295
    5102:	d016      	beq.n	5132 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5104:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    5106:	4b14      	ldr	r3, [pc, #80]	; (5158 <prvAddCurrentTaskToDelayedList+0x70>)
    5108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    510c:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    510e:	42a5      	cmp	r5, r4
    5110:	d818      	bhi.n	5144 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    5112:	4d11      	ldr	r5, [pc, #68]	; (5158 <prvAddCurrentTaskToDelayedList+0x70>)
    5114:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    5118:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    511c:	3104      	adds	r1, #4
    511e:	4b10      	ldr	r3, [pc, #64]	; (5160 <prvAddCurrentTaskToDelayedList+0x78>)
    5120:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    5122:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    5126:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    5128:	bf3c      	itt	cc
    512a:	462b      	movcc	r3, r5
    512c:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    5130:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    5132:	2e00      	cmp	r6, #0
    5134:	d0e6      	beq.n	5104 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    5136:	4808      	ldr	r0, [pc, #32]	; (5158 <prvAddCurrentTaskToDelayedList+0x70>)
    5138:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    513c:	3104      	adds	r1, #4
    513e:	4b09      	ldr	r3, [pc, #36]	; (5164 <prvAddCurrentTaskToDelayedList+0x7c>)
    5140:	4798      	blx	r3
    5142:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    5144:	4b04      	ldr	r3, [pc, #16]	; (5158 <prvAddCurrentTaskToDelayedList+0x70>)
    5146:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    514a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    514e:	3104      	adds	r1, #4
    5150:	4b03      	ldr	r3, [pc, #12]	; (5160 <prvAddCurrentTaskToDelayedList+0x78>)
    5152:	4798      	blx	r3
    5154:	bd70      	pop	{r4, r5, r6, pc}
    5156:	bf00      	nop
    5158:	2000332c 	.word	0x2000332c
    515c:	000041e5 	.word	0x000041e5
    5160:	000041b1 	.word	0x000041b1
    5164:	00004199 	.word	0x00004199

00005168 <xTaskCreate>:
{
    5168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    516c:	b083      	sub	sp, #12
    516e:	4683      	mov	fp, r0
    5170:	460d      	mov	r5, r1
    5172:	9301      	str	r3, [sp, #4]
    5174:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    5178:	0096      	lsls	r6, r2, #2
    517a:	4630      	mov	r0, r6
    517c:	4b66      	ldr	r3, [pc, #408]	; (5318 <xTaskCreate+0x1b0>)
    517e:	4798      	blx	r3
		if (pxStack != NULL) {
    5180:	2800      	cmp	r0, #0
    5182:	f000 8096 	beq.w	52b2 <xTaskCreate+0x14a>
    5186:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    5188:	2054      	movs	r0, #84	; 0x54
    518a:	4b63      	ldr	r3, [pc, #396]	; (5318 <xTaskCreate+0x1b0>)
    518c:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    518e:	4604      	mov	r4, r0
    5190:	2800      	cmp	r0, #0
    5192:	f000 808b 	beq.w	52ac <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    5196:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    5198:	4632      	mov	r2, r6
    519a:	21a5      	movs	r1, #165	; 0xa5
    519c:	4638      	mov	r0, r7
    519e:	4b5f      	ldr	r3, [pc, #380]	; (531c <xTaskCreate+0x1b4>)
    51a0:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    51a2:	3e04      	subs	r6, #4
    51a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    51a6:	441e      	add	r6, r3
		                      & (~(
    51a8:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    51ac:	782b      	ldrb	r3, [r5, #0]
    51ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    51b2:	782b      	ldrb	r3, [r5, #0]
    51b4:	b15b      	cbz	r3, 51ce <xTaskCreate+0x66>
    51b6:	462b      	mov	r3, r5
    51b8:	f104 0235 	add.w	r2, r4, #53	; 0x35
    51bc:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    51be:	7858      	ldrb	r0, [r3, #1]
    51c0:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    51c4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    51c8:	b108      	cbz	r0, 51ce <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    51ca:	4299      	cmp	r1, r3
    51cc:	d1f7      	bne.n	51be <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    51ce:	2700      	movs	r7, #0
    51d0:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    51d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    51d6:	2d04      	cmp	r5, #4
    51d8:	bf28      	it	cs
    51da:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    51dc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    51de:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    51e0:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    51e2:	f104 0804 	add.w	r8, r4, #4
    51e6:	4640      	mov	r0, r8
    51e8:	f8df 9154 	ldr.w	r9, [pc, #340]	; 5340 <xTaskCreate+0x1d8>
    51ec:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    51ee:	f104 0018 	add.w	r0, r4, #24
    51f2:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    51f4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    51f6:	f1c5 0505 	rsb	r5, r5, #5
    51fa:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    51fc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    51fe:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    5200:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    5204:	9a01      	ldr	r2, [sp, #4]
    5206:	4659      	mov	r1, fp
    5208:	4630      	mov	r0, r6
    520a:	4b45      	ldr	r3, [pc, #276]	; (5320 <xTaskCreate+0x1b8>)
    520c:	4798      	blx	r3
    520e:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    5210:	f1ba 0f00 	cmp.w	sl, #0
    5214:	d001      	beq.n	521a <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    5216:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    521a:	4b42      	ldr	r3, [pc, #264]	; (5324 <xTaskCreate+0x1bc>)
    521c:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    521e:	4b42      	ldr	r3, [pc, #264]	; (5328 <xTaskCreate+0x1c0>)
    5220:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    5224:	3201      	adds	r2, #1
    5226:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    522a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    522e:	2b00      	cmp	r3, #0
    5230:	d042      	beq.n	52b8 <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    5232:	4b3d      	ldr	r3, [pc, #244]	; (5328 <xTaskCreate+0x1c0>)
    5234:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    5238:	b94b      	cbnz	r3, 524e <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    523a:	4b3b      	ldr	r3, [pc, #236]	; (5328 <xTaskCreate+0x1c0>)
    523c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5242:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5244:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    5246:	bf9c      	itt	ls
    5248:	4b37      	ldrls	r3, [pc, #220]	; (5328 <xTaskCreate+0x1c0>)
    524a:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    524e:	4a36      	ldr	r2, [pc, #216]	; (5328 <xTaskCreate+0x1c0>)
    5250:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    5254:	3301      	adds	r3, #1
    5256:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    525a:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    525c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    525e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    5262:	4293      	cmp	r3, r2
    5264:	bf84      	itt	hi
    5266:	4a30      	ldrhi	r2, [pc, #192]	; (5328 <xTaskCreate+0x1c0>)
    5268:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    526c:	4d2e      	ldr	r5, [pc, #184]	; (5328 <xTaskCreate+0x1c0>)
    526e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5272:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5276:	4641      	mov	r1, r8
    5278:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    527c:	4b2b      	ldr	r3, [pc, #172]	; (532c <xTaskCreate+0x1c4>)
    527e:	4798      	blx	r3
	taskEXIT_CRITICAL();
    5280:	4b2b      	ldr	r3, [pc, #172]	; (5330 <xTaskCreate+0x1c8>)
    5282:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    5284:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    5288:	2b00      	cmp	r3, #0
    528a:	d03f      	beq.n	530c <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    528c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5294:	429a      	cmp	r2, r3
    5296:	d23d      	bcs.n	5314 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    5298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    529c:	4b25      	ldr	r3, [pc, #148]	; (5334 <xTaskCreate+0x1cc>)
    529e:	601a      	str	r2, [r3, #0]
    52a0:	f3bf 8f4f 	dsb	sy
    52a4:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    52a8:	2001      	movs	r0, #1
    52aa:	e030      	b.n	530e <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    52ac:	4638      	mov	r0, r7
    52ae:	4b22      	ldr	r3, [pc, #136]	; (5338 <xTaskCreate+0x1d0>)
    52b0:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    52b2:	f04f 30ff 	mov.w	r0, #4294967295
    52b6:	e02a      	b.n	530e <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    52b8:	4b1b      	ldr	r3, [pc, #108]	; (5328 <xTaskCreate+0x1c0>)
    52ba:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    52be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    52c2:	2b01      	cmp	r3, #1
    52c4:	d1c3      	bne.n	524e <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    52c6:	4d18      	ldr	r5, [pc, #96]	; (5328 <xTaskCreate+0x1c0>)
    52c8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    52cc:	4e1b      	ldr	r6, [pc, #108]	; (533c <xTaskCreate+0x1d4>)
    52ce:	47b0      	blx	r6
    52d0:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    52d4:	47b0      	blx	r6
    52d6:	f105 0050 	add.w	r0, r5, #80	; 0x50
    52da:	47b0      	blx	r6
    52dc:	f105 0064 	add.w	r0, r5, #100	; 0x64
    52e0:	47b0      	blx	r6
    52e2:	f105 0078 	add.w	r0, r5, #120	; 0x78
    52e6:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    52e8:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    52ec:	4648      	mov	r0, r9
    52ee:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    52f0:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    52f4:	4638      	mov	r0, r7
    52f6:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    52f8:	f105 0014 	add.w	r0, r5, #20
    52fc:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    52fe:	4628      	mov	r0, r5
    5300:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    5302:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5306:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    530a:	e7a0      	b.n	524e <xTaskCreate+0xe6>
		xReturn = pdPASS;
    530c:	2001      	movs	r0, #1
}
    530e:	b003      	add	sp, #12
    5310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    5314:	2001      	movs	r0, #1
	return xReturn;
    5316:	e7fa      	b.n	530e <xTaskCreate+0x1a6>
    5318:	00004595 	.word	0x00004595
    531c:	00006271 	.word	0x00006271
    5320:	00004289 	.word	0x00004289
    5324:	000042e5 	.word	0x000042e5
    5328:	2000332c 	.word	0x2000332c
    532c:	00004199 	.word	0x00004199
    5330:	00004329 	.word	0x00004329
    5334:	e000ed04 	.word	0xe000ed04
    5338:	00004669 	.word	0x00004669
    533c:	0000417d 	.word	0x0000417d
    5340:	00004193 	.word	0x00004193

00005344 <vTaskStartScheduler>:
{
    5344:	b510      	push	{r4, lr}
    5346:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    5348:	4b19      	ldr	r3, [pc, #100]	; (53b0 <vTaskStartScheduler+0x6c>)
    534a:	9301      	str	r3, [sp, #4]
    534c:	2300      	movs	r3, #0
    534e:	9300      	str	r3, [sp, #0]
    5350:	2280      	movs	r2, #128	; 0x80
    5352:	4918      	ldr	r1, [pc, #96]	; (53b4 <vTaskStartScheduler+0x70>)
    5354:	4818      	ldr	r0, [pc, #96]	; (53b8 <vTaskStartScheduler+0x74>)
    5356:	4c19      	ldr	r4, [pc, #100]	; (53bc <vTaskStartScheduler+0x78>)
    5358:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    535a:	2801      	cmp	r0, #1
    535c:	d004      	beq.n	5368 <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    535e:	f1b0 3fff 	cmp.w	r0, #4294967295
    5362:	d01b      	beq.n	539c <vTaskStartScheduler+0x58>
}
    5364:	b002      	add	sp, #8
    5366:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    5368:	4b15      	ldr	r3, [pc, #84]	; (53c0 <vTaskStartScheduler+0x7c>)
    536a:	4798      	blx	r3
	if (xReturn == pdPASS) {
    536c:	2801      	cmp	r0, #1
    536e:	d1f6      	bne.n	535e <vTaskStartScheduler+0x1a>
    5370:	f04f 0380 	mov.w	r3, #128	; 0x80
    5374:	f383 8811 	msr	BASEPRI, r3
    5378:	f3bf 8f6f 	isb	sy
    537c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    5380:	4b10      	ldr	r3, [pc, #64]	; (53c4 <vTaskStartScheduler+0x80>)
    5382:	f04f 32ff 	mov.w	r2, #4294967295
    5386:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    538a:	2201      	movs	r2, #1
    538c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    5390:	2200      	movs	r2, #0
    5392:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    5396:	4b0c      	ldr	r3, [pc, #48]	; (53c8 <vTaskStartScheduler+0x84>)
    5398:	4798      	blx	r3
    539a:	e7e3      	b.n	5364 <vTaskStartScheduler+0x20>
    539c:	f04f 0380 	mov.w	r3, #128	; 0x80
    53a0:	f383 8811 	msr	BASEPRI, r3
    53a4:	f3bf 8f6f 	isb	sy
    53a8:	f3bf 8f4f 	dsb	sy
    53ac:	e7fe      	b.n	53ac <vTaskStartScheduler+0x68>
    53ae:	bf00      	nop
    53b0:	20003408 	.word	0x20003408
    53b4:	00008294 	.word	0x00008294
    53b8:	00005099 	.word	0x00005099
    53bc:	00005169 	.word	0x00005169
    53c0:	00005e39 	.word	0x00005e39
    53c4:	2000332c 	.word	0x2000332c
    53c8:	00004419 	.word	0x00004419

000053cc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    53cc:	4a03      	ldr	r2, [pc, #12]	; (53dc <vTaskSuspendAll+0x10>)
    53ce:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    53d2:	3301      	adds	r3, #1
    53d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    53d8:	4770      	bx	lr
    53da:	bf00      	nop
    53dc:	2000332c 	.word	0x2000332c

000053e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
    53e0:	4b01      	ldr	r3, [pc, #4]	; (53e8 <xTaskGetTickCount+0x8>)
    53e2:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    53e6:	4770      	bx	lr
    53e8:	2000332c 	.word	0x2000332c

000053ec <xTaskIncrementTick>:
{
    53ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    53f0:	4b44      	ldr	r3, [pc, #272]	; (5504 <xTaskIncrementTick+0x118>)
    53f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    53f6:	2b00      	cmp	r3, #0
    53f8:	d173      	bne.n	54e2 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    53fa:	4b42      	ldr	r3, [pc, #264]	; (5504 <xTaskIncrementTick+0x118>)
    53fc:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    5400:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    5402:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    5406:	b9e6      	cbnz	r6, 5442 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    5408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	b143      	cbz	r3, 5422 <xTaskIncrementTick+0x36>
    5410:	f04f 0380 	mov.w	r3, #128	; 0x80
    5414:	f383 8811 	msr	BASEPRI, r3
    5418:	f3bf 8f6f 	isb	sy
    541c:	f3bf 8f4f 	dsb	sy
    5420:	e7fe      	b.n	5420 <xTaskIncrementTick+0x34>
    5422:	4b38      	ldr	r3, [pc, #224]	; (5504 <xTaskIncrementTick+0x118>)
    5424:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    5428:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    542c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    5430:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    5434:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    5438:	3201      	adds	r2, #1
    543a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    543e:	4b32      	ldr	r3, [pc, #200]	; (5508 <xTaskIncrementTick+0x11c>)
    5440:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    5442:	4b30      	ldr	r3, [pc, #192]	; (5504 <xTaskIncrementTick+0x118>)
    5444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    5448:	429e      	cmp	r6, r3
    544a:	d20d      	bcs.n	5468 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    544c:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    544e:	4b2d      	ldr	r3, [pc, #180]	; (5504 <xTaskIncrementTick+0x118>)
    5450:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5454:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    5456:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    545a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    5460:	2b02      	cmp	r3, #2
    5462:	bf28      	it	cs
    5464:	2401      	movcs	r4, #1
    5466:	e043      	b.n	54f0 <xTaskIncrementTick+0x104>
    5468:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    546a:	4d26      	ldr	r5, [pc, #152]	; (5504 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    546c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5510 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    5470:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    5474:	e021      	b.n	54ba <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5476:	f04f 32ff 	mov.w	r2, #4294967295
    547a:	4b22      	ldr	r3, [pc, #136]	; (5504 <xTaskIncrementTick+0x118>)
    547c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    5480:	e7e5      	b.n	544e <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    5482:	4a20      	ldr	r2, [pc, #128]	; (5504 <xTaskIncrementTick+0x118>)
    5484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    5488:	e7e1      	b.n	544e <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    548a:	f107 0018 	add.w	r0, r7, #24
    548e:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    5490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5492:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    5496:	4298      	cmp	r0, r3
    5498:	bf88      	it	hi
    549a:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    549e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    54a2:	4649      	mov	r1, r9
    54a4:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    54a8:	4b18      	ldr	r3, [pc, #96]	; (550c <xTaskIncrementTick+0x120>)
    54aa:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    54ac:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    54b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    54b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    54b4:	429a      	cmp	r2, r3
    54b6:	bf28      	it	cs
    54b8:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    54ba:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    54be:	681b      	ldr	r3, [r3, #0]
    54c0:	2b00      	cmp	r3, #0
    54c2:	d0d8      	beq.n	5476 <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    54c4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    54c8:	68db      	ldr	r3, [r3, #12]
    54ca:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    54cc:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    54ce:	429e      	cmp	r6, r3
    54d0:	d3d7      	bcc.n	5482 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    54d2:	f107 0904 	add.w	r9, r7, #4
    54d6:	4648      	mov	r0, r9
    54d8:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    54da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    54dc:	2b00      	cmp	r3, #0
    54de:	d1d4      	bne.n	548a <xTaskIncrementTick+0x9e>
    54e0:	e7d6      	b.n	5490 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    54e2:	4a08      	ldr	r2, [pc, #32]	; (5504 <xTaskIncrementTick+0x118>)
    54e4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    54e8:	3301      	adds	r3, #1
    54ea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    54ee:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    54f0:	4b04      	ldr	r3, [pc, #16]	; (5504 <xTaskIncrementTick+0x118>)
    54f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    54f6:	2b00      	cmp	r3, #0
}
    54f8:	bf0c      	ite	eq
    54fa:	4620      	moveq	r0, r4
    54fc:	2001      	movne	r0, #1
    54fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5502:	bf00      	nop
    5504:	2000332c 	.word	0x2000332c
    5508:	000050bd 	.word	0x000050bd
    550c:	00004199 	.word	0x00004199
    5510:	000041e5 	.word	0x000041e5

00005514 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    5514:	4b3a      	ldr	r3, [pc, #232]	; (5600 <xTaskResumeAll+0xec>)
    5516:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    551a:	b943      	cbnz	r3, 552e <xTaskResumeAll+0x1a>
    551c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5520:	f383 8811 	msr	BASEPRI, r3
    5524:	f3bf 8f6f 	isb	sy
    5528:	f3bf 8f4f 	dsb	sy
    552c:	e7fe      	b.n	552c <xTaskResumeAll+0x18>
{
    552e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    5532:	4b34      	ldr	r3, [pc, #208]	; (5604 <xTaskResumeAll+0xf0>)
    5534:	4798      	blx	r3
		--uxSchedulerSuspended;
    5536:	4b32      	ldr	r3, [pc, #200]	; (5600 <xTaskResumeAll+0xec>)
    5538:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    553c:	3a01      	subs	r2, #1
    553e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5542:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5546:	2b00      	cmp	r3, #0
    5548:	d155      	bne.n	55f6 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    554a:	4b2d      	ldr	r3, [pc, #180]	; (5600 <xTaskResumeAll+0xec>)
    554c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5550:	b92b      	cbnz	r3, 555e <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    5552:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    5554:	4b2c      	ldr	r3, [pc, #176]	; (5608 <xTaskResumeAll+0xf4>)
    5556:	4798      	blx	r3
}
    5558:	4620      	mov	r0, r4
    555a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    555e:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5560:	4c27      	ldr	r4, [pc, #156]	; (5600 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5562:	4e2a      	ldr	r6, [pc, #168]	; (560c <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    5564:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5568:	6963      	ldr	r3, [r4, #20]
    556a:	b1fb      	cbz	r3, 55ac <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    556c:	6a23      	ldr	r3, [r4, #32]
    556e:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5570:	f105 0018 	add.w	r0, r5, #24
    5574:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5576:	1d2f      	adds	r7, r5, #4
    5578:	4638      	mov	r0, r7
    557a:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    557c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    557e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    5582:	4298      	cmp	r0, r3
    5584:	bf88      	it	hi
    5586:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    558a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    558e:	4639      	mov	r1, r7
    5590:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    5594:	4b1e      	ldr	r3, [pc, #120]	; (5610 <xTaskResumeAll+0xfc>)
    5596:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5598:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    559c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    55a0:	429a      	cmp	r2, r3
    55a2:	d3e1      	bcc.n	5568 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    55a4:	2301      	movs	r3, #1
    55a6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    55aa:	e7dd      	b.n	5568 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    55ac:	b10d      	cbz	r5, 55b2 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    55ae:	4b19      	ldr	r3, [pc, #100]	; (5614 <xTaskResumeAll+0x100>)
    55b0:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    55b2:	4b13      	ldr	r3, [pc, #76]	; (5600 <xTaskResumeAll+0xec>)
    55b4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    55b8:	b17c      	cbz	r4, 55da <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    55ba:	4f17      	ldr	r7, [pc, #92]	; (5618 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    55bc:	461e      	mov	r6, r3
    55be:	2501      	movs	r5, #1
    55c0:	e001      	b.n	55c6 <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    55c2:	3c01      	subs	r4, #1
    55c4:	d005      	beq.n	55d2 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    55c6:	47b8      	blx	r7
    55c8:	2800      	cmp	r0, #0
    55ca:	d0fa      	beq.n	55c2 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    55cc:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    55d0:	e7f7      	b.n	55c2 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    55d2:	2200      	movs	r2, #0
    55d4:	4b0a      	ldr	r3, [pc, #40]	; (5600 <xTaskResumeAll+0xec>)
    55d6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    55da:	4b09      	ldr	r3, [pc, #36]	; (5600 <xTaskResumeAll+0xec>)
    55dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    55e0:	b15b      	cbz	r3, 55fa <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    55e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    55e6:	4b0d      	ldr	r3, [pc, #52]	; (561c <xTaskResumeAll+0x108>)
    55e8:	601a      	str	r2, [r3, #0]
    55ea:	f3bf 8f4f 	dsb	sy
    55ee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    55f2:	2401      	movs	r4, #1
    55f4:	e7ae      	b.n	5554 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    55f6:	2400      	movs	r4, #0
    55f8:	e7ac      	b.n	5554 <xTaskResumeAll+0x40>
    55fa:	2400      	movs	r4, #0
    55fc:	e7aa      	b.n	5554 <xTaskResumeAll+0x40>
    55fe:	bf00      	nop
    5600:	2000332c 	.word	0x2000332c
    5604:	000042e5 	.word	0x000042e5
    5608:	00004329 	.word	0x00004329
    560c:	000041e5 	.word	0x000041e5
    5610:	00004199 	.word	0x00004199
    5614:	000050bd 	.word	0x000050bd
    5618:	000053ed 	.word	0x000053ed
    561c:	e000ed04 	.word	0xe000ed04

00005620 <vTaskDelayUntil>:
{
    5620:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxPreviousWakeTime);
    5622:	b150      	cbz	r0, 563a <vTaskDelayUntil+0x1a>
    5624:	4605      	mov	r5, r0
	configASSERT((xTimeIncrement > 0U));
    5626:	b989      	cbnz	r1, 564c <vTaskDelayUntil+0x2c>
    5628:	f04f 0380 	mov.w	r3, #128	; 0x80
    562c:	f383 8811 	msr	BASEPRI, r3
    5630:	f3bf 8f6f 	isb	sy
    5634:	f3bf 8f4f 	dsb	sy
    5638:	e7fe      	b.n	5638 <vTaskDelayUntil+0x18>
    563a:	f04f 0380 	mov.w	r3, #128	; 0x80
    563e:	f383 8811 	msr	BASEPRI, r3
    5642:	f3bf 8f6f 	isb	sy
    5646:	f3bf 8f4f 	dsb	sy
    564a:	e7fe      	b.n	564a <vTaskDelayUntil+0x2a>
	configASSERT(uxSchedulerSuspended == 0);
    564c:	4b1a      	ldr	r3, [pc, #104]	; (56b8 <vTaskDelayUntil+0x98>)
    564e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5652:	b143      	cbz	r3, 5666 <vTaskDelayUntil+0x46>
    5654:	f04f 0380 	mov.w	r3, #128	; 0x80
    5658:	f383 8811 	msr	BASEPRI, r3
    565c:	f3bf 8f6f 	isb	sy
    5660:	f3bf 8f4f 	dsb	sy
    5664:	e7fe      	b.n	5664 <vTaskDelayUntil+0x44>
    5666:	460c      	mov	r4, r1
	vTaskSuspendAll();
    5668:	4b14      	ldr	r3, [pc, #80]	; (56bc <vTaskDelayUntil+0x9c>)
    566a:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    566c:	4b12      	ldr	r3, [pc, #72]	; (56b8 <vTaskDelayUntil+0x98>)
    566e:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    5672:	682a      	ldr	r2, [r5, #0]
    5674:	4414      	add	r4, r2
		if (xConstTickCount < *pxPreviousWakeTime) {
    5676:	4290      	cmp	r0, r2
    5678:	d214      	bcs.n	56a4 <vTaskDelayUntil+0x84>
			if ((xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount)) {
    567a:	42a2      	cmp	r2, r4
    567c:	d916      	bls.n	56ac <vTaskDelayUntil+0x8c>
		*pxPreviousWakeTime = xTimeToWake;
    567e:	602c      	str	r4, [r5, #0]
		if (xShouldDelay != pdFALSE) {
    5680:	42a0      	cmp	r0, r4
    5682:	d203      	bcs.n	568c <vTaskDelayUntil+0x6c>
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount, pdFALSE);
    5684:	2100      	movs	r1, #0
    5686:	1a20      	subs	r0, r4, r0
    5688:	4b0d      	ldr	r3, [pc, #52]	; (56c0 <vTaskDelayUntil+0xa0>)
    568a:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
    568c:	4b0d      	ldr	r3, [pc, #52]	; (56c4 <vTaskDelayUntil+0xa4>)
    568e:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    5690:	b980      	cbnz	r0, 56b4 <vTaskDelayUntil+0x94>
		portYIELD_WITHIN_API();
    5692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5696:	4b0c      	ldr	r3, [pc, #48]	; (56c8 <vTaskDelayUntil+0xa8>)
    5698:	601a      	str	r2, [r3, #0]
    569a:	f3bf 8f4f 	dsb	sy
    569e:	f3bf 8f6f 	isb	sy
}
    56a2:	bd38      	pop	{r3, r4, r5, pc}
			if ((xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount)) {
    56a4:	42a2      	cmp	r2, r4
    56a6:	d803      	bhi.n	56b0 <vTaskDelayUntil+0x90>
    56a8:	42a0      	cmp	r0, r4
    56aa:	d301      	bcc.n	56b0 <vTaskDelayUntil+0x90>
		*pxPreviousWakeTime = xTimeToWake;
    56ac:	602c      	str	r4, [r5, #0]
    56ae:	e7ed      	b.n	568c <vTaskDelayUntil+0x6c>
    56b0:	602c      	str	r4, [r5, #0]
    56b2:	e7e7      	b.n	5684 <vTaskDelayUntil+0x64>
    56b4:	bd38      	pop	{r3, r4, r5, pc}
    56b6:	bf00      	nop
    56b8:	2000332c 	.word	0x2000332c
    56bc:	000053cd 	.word	0x000053cd
    56c0:	000050e9 	.word	0x000050e9
    56c4:	00005515 	.word	0x00005515
    56c8:	e000ed04 	.word	0xe000ed04

000056cc <vTaskDelay>:
{
    56cc:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    56ce:	b1b0      	cbz	r0, 56fe <vTaskDelay+0x32>
    56d0:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    56d2:	4b0f      	ldr	r3, [pc, #60]	; (5710 <vTaskDelay+0x44>)
    56d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    56d8:	b143      	cbz	r3, 56ec <vTaskDelay+0x20>
    56da:	f04f 0380 	mov.w	r3, #128	; 0x80
    56de:	f383 8811 	msr	BASEPRI, r3
    56e2:	f3bf 8f6f 	isb	sy
    56e6:	f3bf 8f4f 	dsb	sy
    56ea:	e7fe      	b.n	56ea <vTaskDelay+0x1e>
		vTaskSuspendAll();
    56ec:	4b09      	ldr	r3, [pc, #36]	; (5714 <vTaskDelay+0x48>)
    56ee:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    56f0:	2100      	movs	r1, #0
    56f2:	4620      	mov	r0, r4
    56f4:	4b08      	ldr	r3, [pc, #32]	; (5718 <vTaskDelay+0x4c>)
    56f6:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    56f8:	4b08      	ldr	r3, [pc, #32]	; (571c <vTaskDelay+0x50>)
    56fa:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    56fc:	b938      	cbnz	r0, 570e <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    56fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5702:	4b07      	ldr	r3, [pc, #28]	; (5720 <vTaskDelay+0x54>)
    5704:	601a      	str	r2, [r3, #0]
    5706:	f3bf 8f4f 	dsb	sy
    570a:	f3bf 8f6f 	isb	sy
    570e:	bd10      	pop	{r4, pc}
    5710:	2000332c 	.word	0x2000332c
    5714:	000053cd 	.word	0x000053cd
    5718:	000050e9 	.word	0x000050e9
    571c:	00005515 	.word	0x00005515
    5720:	e000ed04 	.word	0xe000ed04

00005724 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    5724:	4b2c      	ldr	r3, [pc, #176]	; (57d8 <vTaskSwitchContext+0xb4>)
    5726:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    572a:	bb8b      	cbnz	r3, 5790 <vTaskSwitchContext+0x6c>
{
    572c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    572e:	4b2a      	ldr	r3, [pc, #168]	; (57d8 <vTaskSwitchContext+0xb4>)
    5730:	2200      	movs	r2, #0
    5732:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    5736:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    573a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    573e:	6812      	ldr	r2, [r2, #0]
    5740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5742:	429a      	cmp	r2, r3
    5744:	d807      	bhi.n	5756 <vTaskSwitchContext+0x32>
    5746:	4b24      	ldr	r3, [pc, #144]	; (57d8 <vTaskSwitchContext+0xb4>)
    5748:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    574c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    5750:	3134      	adds	r1, #52	; 0x34
    5752:	4b22      	ldr	r3, [pc, #136]	; (57dc <vTaskSwitchContext+0xb8>)
    5754:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5756:	4a20      	ldr	r2, [pc, #128]	; (57d8 <vTaskSwitchContext+0xb4>)
    5758:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    575c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    5760:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5764:	6a92      	ldr	r2, [r2, #40]	; 0x28
    5766:	b9c2      	cbnz	r2, 579a <vTaskSwitchContext+0x76>
    5768:	b14b      	cbz	r3, 577e <vTaskSwitchContext+0x5a>
    576a:	491b      	ldr	r1, [pc, #108]	; (57d8 <vTaskSwitchContext+0xb4>)
    576c:	3b01      	subs	r3, #1
    576e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5772:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5776:	6a92      	ldr	r2, [r2, #40]	; 0x28
    5778:	b97a      	cbnz	r2, 579a <vTaskSwitchContext+0x76>
    577a:	2b00      	cmp	r3, #0
    577c:	d1f6      	bne.n	576c <vTaskSwitchContext+0x48>
    577e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5782:	f383 8811 	msr	BASEPRI, r3
    5786:	f3bf 8f6f 	isb	sy
    578a:	f3bf 8f4f 	dsb	sy
    578e:	e7fe      	b.n	578e <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    5790:	2201      	movs	r2, #1
    5792:	4b11      	ldr	r3, [pc, #68]	; (57d8 <vTaskSwitchContext+0xb4>)
    5794:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    5798:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    579a:	4a0f      	ldr	r2, [pc, #60]	; (57d8 <vTaskSwitchContext+0xb4>)
    579c:	0099      	lsls	r1, r3, #2
    579e:	18c8      	adds	r0, r1, r3
    57a0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    57a4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    57a6:	6864      	ldr	r4, [r4, #4]
    57a8:	62c4      	str	r4, [r0, #44]	; 0x2c
    57aa:	4419      	add	r1, r3
    57ac:	4602      	mov	r2, r0
    57ae:	3230      	adds	r2, #48	; 0x30
    57b0:	4294      	cmp	r4, r2
    57b2:	d00b      	beq.n	57cc <vTaskSwitchContext+0xa8>
    57b4:	4a08      	ldr	r2, [pc, #32]	; (57d8 <vTaskSwitchContext+0xb4>)
    57b6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    57ba:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    57be:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    57c0:	68c9      	ldr	r1, [r1, #12]
    57c2:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    57c6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    57ca:	bd10      	pop	{r4, pc}
    57cc:	6860      	ldr	r0, [r4, #4]
    57ce:	4a02      	ldr	r2, [pc, #8]	; (57d8 <vTaskSwitchContext+0xb4>)
    57d0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    57d4:	62d0      	str	r0, [r2, #44]	; 0x2c
    57d6:	e7ed      	b.n	57b4 <vTaskSwitchContext+0x90>
    57d8:	2000332c 	.word	0x2000332c
    57dc:	000002d1 	.word	0x000002d1

000057e0 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    57e0:	b940      	cbnz	r0, 57f4 <vTaskPlaceOnEventList+0x14>
    57e2:	f04f 0380 	mov.w	r3, #128	; 0x80
    57e6:	f383 8811 	msr	BASEPRI, r3
    57ea:	f3bf 8f6f 	isb	sy
    57ee:	f3bf 8f4f 	dsb	sy
    57f2:	e7fe      	b.n	57f2 <vTaskPlaceOnEventList+0x12>
{
    57f4:	b510      	push	{r4, lr}
    57f6:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    57f8:	4b05      	ldr	r3, [pc, #20]	; (5810 <vTaskPlaceOnEventList+0x30>)
    57fa:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    57fe:	3118      	adds	r1, #24
    5800:	4b04      	ldr	r3, [pc, #16]	; (5814 <vTaskPlaceOnEventList+0x34>)
    5802:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    5804:	2101      	movs	r1, #1
    5806:	4620      	mov	r0, r4
    5808:	4b03      	ldr	r3, [pc, #12]	; (5818 <vTaskPlaceOnEventList+0x38>)
    580a:	4798      	blx	r3
    580c:	bd10      	pop	{r4, pc}
    580e:	bf00      	nop
    5810:	2000332c 	.word	0x2000332c
    5814:	000041b1 	.word	0x000041b1
    5818:	000050e9 	.word	0x000050e9

0000581c <vTaskPlaceOnEventListRestricted>:
{
    581c:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    581e:	b180      	cbz	r0, 5842 <vTaskPlaceOnEventListRestricted+0x26>
    5820:	4614      	mov	r4, r2
    5822:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    5824:	4b0b      	ldr	r3, [pc, #44]	; (5854 <vTaskPlaceOnEventListRestricted+0x38>)
    5826:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    582a:	3118      	adds	r1, #24
    582c:	4b0a      	ldr	r3, [pc, #40]	; (5858 <vTaskPlaceOnEventListRestricted+0x3c>)
    582e:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    5830:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    5832:	4621      	mov	r1, r4
    5834:	bf0c      	ite	eq
    5836:	4628      	moveq	r0, r5
    5838:	f04f 30ff 	movne.w	r0, #4294967295
    583c:	4b07      	ldr	r3, [pc, #28]	; (585c <vTaskPlaceOnEventListRestricted+0x40>)
    583e:	4798      	blx	r3
    5840:	bd38      	pop	{r3, r4, r5, pc}
    5842:	f04f 0380 	mov.w	r3, #128	; 0x80
    5846:	f383 8811 	msr	BASEPRI, r3
    584a:	f3bf 8f6f 	isb	sy
    584e:	f3bf 8f4f 	dsb	sy
    5852:	e7fe      	b.n	5852 <vTaskPlaceOnEventListRestricted+0x36>
    5854:	2000332c 	.word	0x2000332c
    5858:	00004199 	.word	0x00004199
    585c:	000050e9 	.word	0x000050e9

00005860 <xTaskRemoveFromEventList>:
{
    5860:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    5862:	68c3      	ldr	r3, [r0, #12]
    5864:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    5866:	2c00      	cmp	r4, #0
    5868:	d02a      	beq.n	58c0 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    586a:	f104 0518 	add.w	r5, r4, #24
    586e:	4628      	mov	r0, r5
    5870:	4b1a      	ldr	r3, [pc, #104]	; (58dc <xTaskRemoveFromEventList+0x7c>)
    5872:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5874:	4b1a      	ldr	r3, [pc, #104]	; (58e0 <xTaskRemoveFromEventList+0x80>)
    5876:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    587a:	bb53      	cbnz	r3, 58d2 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    587c:	1d25      	adds	r5, r4, #4
    587e:	4628      	mov	r0, r5
    5880:	4b16      	ldr	r3, [pc, #88]	; (58dc <xTaskRemoveFromEventList+0x7c>)
    5882:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    5884:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5886:	4b16      	ldr	r3, [pc, #88]	; (58e0 <xTaskRemoveFromEventList+0x80>)
    5888:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    588c:	4298      	cmp	r0, r3
    588e:	bf84      	itt	hi
    5890:	4b13      	ldrhi	r3, [pc, #76]	; (58e0 <xTaskRemoveFromEventList+0x80>)
    5892:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5896:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    589a:	4629      	mov	r1, r5
    589c:	4b11      	ldr	r3, [pc, #68]	; (58e4 <xTaskRemoveFromEventList+0x84>)
    589e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    58a2:	4b11      	ldr	r3, [pc, #68]	; (58e8 <xTaskRemoveFromEventList+0x88>)
    58a4:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    58a6:	4b0e      	ldr	r3, [pc, #56]	; (58e0 <xTaskRemoveFromEventList+0x80>)
    58a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    58ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    58ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58b0:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    58b2:	bf83      	ittte	hi
    58b4:	2001      	movhi	r0, #1
    58b6:	4b0a      	ldrhi	r3, [pc, #40]	; (58e0 <xTaskRemoveFromEventList+0x80>)
    58b8:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    58bc:	2000      	movls	r0, #0
}
    58be:	bd38      	pop	{r3, r4, r5, pc}
    58c0:	f04f 0380 	mov.w	r3, #128	; 0x80
    58c4:	f383 8811 	msr	BASEPRI, r3
    58c8:	f3bf 8f6f 	isb	sy
    58cc:	f3bf 8f4f 	dsb	sy
    58d0:	e7fe      	b.n	58d0 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    58d2:	4629      	mov	r1, r5
    58d4:	4805      	ldr	r0, [pc, #20]	; (58ec <xTaskRemoveFromEventList+0x8c>)
    58d6:	4b04      	ldr	r3, [pc, #16]	; (58e8 <xTaskRemoveFromEventList+0x88>)
    58d8:	4798      	blx	r3
    58da:	e7e4      	b.n	58a6 <xTaskRemoveFromEventList+0x46>
    58dc:	000041e5 	.word	0x000041e5
    58e0:	2000332c 	.word	0x2000332c
    58e4:	20003354 	.word	0x20003354
    58e8:	00004199 	.word	0x00004199
    58ec:	20003340 	.word	0x20003340

000058f0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    58f0:	4b03      	ldr	r3, [pc, #12]	; (5900 <vTaskInternalSetTimeOutState+0x10>)
    58f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    58f6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    58f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    58fc:	6043      	str	r3, [r0, #4]
    58fe:	4770      	bx	lr
    5900:	2000332c 	.word	0x2000332c

00005904 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    5904:	b1f8      	cbz	r0, 5946 <xTaskCheckForTimeOut+0x42>
{
    5906:	b570      	push	{r4, r5, r6, lr}
    5908:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    590a:	b329      	cbz	r1, 5958 <xTaskCheckForTimeOut+0x54>
    590c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    590e:	4b1c      	ldr	r3, [pc, #112]	; (5980 <xTaskCheckForTimeOut+0x7c>)
    5910:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    5912:	4b1c      	ldr	r3, [pc, #112]	; (5984 <xTaskCheckForTimeOut+0x80>)
    5914:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5918:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    591a:	6823      	ldr	r3, [r4, #0]
    591c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5920:	d02a      	beq.n	5978 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    5922:	4818      	ldr	r0, [pc, #96]	; (5984 <xTaskCheckForTimeOut+0x80>)
    5924:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    5928:	682e      	ldr	r6, [r5, #0]
    592a:	4286      	cmp	r6, r0
    592c:	d001      	beq.n	5932 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    592e:	428a      	cmp	r2, r1
    5930:	d224      	bcs.n	597c <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5932:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    5934:	429a      	cmp	r2, r3
    5936:	d318      	bcc.n	596a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    5938:	2300      	movs	r3, #0
    593a:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    593c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    593e:	4b12      	ldr	r3, [pc, #72]	; (5988 <xTaskCheckForTimeOut+0x84>)
    5940:	4798      	blx	r3
}
    5942:	4620      	mov	r0, r4
    5944:	bd70      	pop	{r4, r5, r6, pc}
    5946:	f04f 0380 	mov.w	r3, #128	; 0x80
    594a:	f383 8811 	msr	BASEPRI, r3
    594e:	f3bf 8f6f 	isb	sy
    5952:	f3bf 8f4f 	dsb	sy
    5956:	e7fe      	b.n	5956 <xTaskCheckForTimeOut+0x52>
    5958:	f04f 0380 	mov.w	r3, #128	; 0x80
    595c:	f383 8811 	msr	BASEPRI, r3
    5960:	f3bf 8f6f 	isb	sy
    5964:	f3bf 8f4f 	dsb	sy
    5968:	e7fe      	b.n	5968 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    596a:	1a9b      	subs	r3, r3, r2
    596c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    596e:	4628      	mov	r0, r5
    5970:	4b06      	ldr	r3, [pc, #24]	; (598c <xTaskCheckForTimeOut+0x88>)
    5972:	4798      	blx	r3
			xReturn = pdFALSE;
    5974:	2400      	movs	r4, #0
    5976:	e7e2      	b.n	593e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    5978:	2400      	movs	r4, #0
    597a:	e7e0      	b.n	593e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    597c:	2401      	movs	r4, #1
    597e:	e7de      	b.n	593e <xTaskCheckForTimeOut+0x3a>
    5980:	000042e5 	.word	0x000042e5
    5984:	2000332c 	.word	0x2000332c
    5988:	00004329 	.word	0x00004329
    598c:	000058f1 	.word	0x000058f1

00005990 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    5990:	2201      	movs	r2, #1
    5992:	4b02      	ldr	r3, [pc, #8]	; (599c <vTaskMissedYield+0xc>)
    5994:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    5998:	4770      	bx	lr
    599a:	bf00      	nop
    599c:	2000332c 	.word	0x2000332c

000059a0 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    59a0:	4b06      	ldr	r3, [pc, #24]	; (59bc <xTaskGetSchedulerState+0x1c>)
    59a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    59a6:	b13b      	cbz	r3, 59b8 <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    59a8:	4b04      	ldr	r3, [pc, #16]	; (59bc <xTaskGetSchedulerState+0x1c>)
    59aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    59ae:	2b00      	cmp	r3, #0
    59b0:	bf0c      	ite	eq
    59b2:	2002      	moveq	r0, #2
    59b4:	2000      	movne	r0, #0
    59b6:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    59b8:	2001      	movs	r0, #1
}
    59ba:	4770      	bx	lr
    59bc:	2000332c 	.word	0x2000332c

000059c0 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    59c0:	2800      	cmp	r0, #0
    59c2:	d045      	beq.n	5a50 <xTaskPriorityInherit+0x90>
{
    59c4:	b538      	push	{r3, r4, r5, lr}
    59c6:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    59c8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    59ca:	4922      	ldr	r1, [pc, #136]	; (5a54 <xTaskPriorityInherit+0x94>)
    59cc:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    59d0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    59d2:	428a      	cmp	r2, r1
    59d4:	d232      	bcs.n	5a3c <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    59d6:	6981      	ldr	r1, [r0, #24]
    59d8:	2900      	cmp	r1, #0
    59da:	db06      	blt.n	59ea <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    59dc:	491d      	ldr	r1, [pc, #116]	; (5a54 <xTaskPriorityInherit+0x94>)
    59de:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    59e2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    59e4:	f1c1 0105 	rsb	r1, r1, #5
    59e8:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    59ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    59ee:	491a      	ldr	r1, [pc, #104]	; (5a58 <xTaskPriorityInherit+0x98>)
    59f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    59f4:	6969      	ldr	r1, [r5, #20]
    59f6:	4291      	cmp	r1, r2
    59f8:	d006      	beq.n	5a08 <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    59fa:	4a16      	ldr	r2, [pc, #88]	; (5a54 <xTaskPriorityInherit+0x94>)
    59fc:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    5a00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    5a02:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    5a04:	2001      	movs	r0, #1
    5a06:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    5a08:	1d2c      	adds	r4, r5, #4
    5a0a:	4620      	mov	r0, r4
    5a0c:	4b13      	ldr	r3, [pc, #76]	; (5a5c <xTaskPriorityInherit+0x9c>)
    5a0e:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    5a10:	4b10      	ldr	r3, [pc, #64]	; (5a54 <xTaskPriorityInherit+0x94>)
    5a12:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5a16:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    5a18:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    5a1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5a1e:	4298      	cmp	r0, r3
    5a20:	bf84      	itt	hi
    5a22:	4b0c      	ldrhi	r3, [pc, #48]	; (5a54 <xTaskPriorityInherit+0x94>)
    5a24:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5a28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5a2c:	4621      	mov	r1, r4
    5a2e:	4b0a      	ldr	r3, [pc, #40]	; (5a58 <xTaskPriorityInherit+0x98>)
    5a30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5a34:	4b0a      	ldr	r3, [pc, #40]	; (5a60 <xTaskPriorityInherit+0xa0>)
    5a36:	4798      	blx	r3
			xReturn = pdTRUE;
    5a38:	2001      	movs	r0, #1
    5a3a:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    5a3c:	4a05      	ldr	r2, [pc, #20]	; (5a54 <xTaskPriorityInherit+0x94>)
    5a3e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    5a42:	6c40      	ldr	r0, [r0, #68]	; 0x44
    5a44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5a46:	4298      	cmp	r0, r3
    5a48:	bf2c      	ite	cs
    5a4a:	2000      	movcs	r0, #0
    5a4c:	2001      	movcc	r0, #1
    5a4e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    5a50:	2000      	movs	r0, #0
	return xReturn;
    5a52:	4770      	bx	lr
    5a54:	2000332c 	.word	0x2000332c
    5a58:	20003354 	.word	0x20003354
    5a5c:	000041e5 	.word	0x000041e5
    5a60:	00004199 	.word	0x00004199

00005a64 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    5a64:	2800      	cmp	r0, #0
    5a66:	d03c      	beq.n	5ae2 <xTaskPriorityDisinherit+0x7e>
{
    5a68:	b538      	push	{r3, r4, r5, lr}
    5a6a:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    5a6c:	4a20      	ldr	r2, [pc, #128]	; (5af0 <xTaskPriorityDisinherit+0x8c>)
    5a6e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    5a72:	4290      	cmp	r0, r2
    5a74:	d008      	beq.n	5a88 <xTaskPriorityDisinherit+0x24>
    5a76:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a7a:	f383 8811 	msr	BASEPRI, r3
    5a7e:	f3bf 8f6f 	isb	sy
    5a82:	f3bf 8f4f 	dsb	sy
    5a86:	e7fe      	b.n	5a86 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    5a88:	6c82      	ldr	r2, [r0, #72]	; 0x48
    5a8a:	b942      	cbnz	r2, 5a9e <xTaskPriorityDisinherit+0x3a>
    5a8c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a90:	f383 8811 	msr	BASEPRI, r3
    5a94:	f3bf 8f6f 	isb	sy
    5a98:	f3bf 8f4f 	dsb	sy
    5a9c:	e7fe      	b.n	5a9c <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    5a9e:	3a01      	subs	r2, #1
    5aa0:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    5aa2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5aa4:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5aa6:	4288      	cmp	r0, r1
    5aa8:	d01d      	beq.n	5ae6 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    5aaa:	b9f2      	cbnz	r2, 5aea <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    5aac:	1d25      	adds	r5, r4, #4
    5aae:	4628      	mov	r0, r5
    5ab0:	4b10      	ldr	r3, [pc, #64]	; (5af4 <xTaskPriorityDisinherit+0x90>)
    5ab2:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5ab4:	6c60      	ldr	r0, [r4, #68]	; 0x44
    5ab6:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    5ab8:	f1c0 0305 	rsb	r3, r0, #5
    5abc:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    5abe:	4b0c      	ldr	r3, [pc, #48]	; (5af0 <xTaskPriorityDisinherit+0x8c>)
    5ac0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5ac4:	4298      	cmp	r0, r3
    5ac6:	bf84      	itt	hi
    5ac8:	4b09      	ldrhi	r3, [pc, #36]	; (5af0 <xTaskPriorityDisinherit+0x8c>)
    5aca:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5ace:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5ad2:	4629      	mov	r1, r5
    5ad4:	4b08      	ldr	r3, [pc, #32]	; (5af8 <xTaskPriorityDisinherit+0x94>)
    5ad6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5ada:	4b08      	ldr	r3, [pc, #32]	; (5afc <xTaskPriorityDisinherit+0x98>)
    5adc:	4798      	blx	r3
				xReturn = pdTRUE;
    5ade:	2001      	movs	r0, #1
    5ae0:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    5ae2:	2000      	movs	r0, #0
    5ae4:	4770      	bx	lr
    5ae6:	2000      	movs	r0, #0
    5ae8:	bd38      	pop	{r3, r4, r5, pc}
    5aea:	2000      	movs	r0, #0
}
    5aec:	bd38      	pop	{r3, r4, r5, pc}
    5aee:	bf00      	nop
    5af0:	2000332c 	.word	0x2000332c
    5af4:	000041e5 	.word	0x000041e5
    5af8:	20003354 	.word	0x20003354
    5afc:	00004199 	.word	0x00004199

00005b00 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    5b00:	2800      	cmp	r0, #0
    5b02:	d049      	beq.n	5b98 <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    5b04:	b538      	push	{r3, r4, r5, lr}
    5b06:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    5b08:	6c80      	ldr	r0, [r0, #72]	; 0x48
    5b0a:	b940      	cbnz	r0, 5b1e <vTaskPriorityDisinheritAfterTimeout+0x1e>
    5b0c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5b10:	f383 8811 	msr	BASEPRI, r3
    5b14:	f3bf 8f6f 	isb	sy
    5b18:	f3bf 8f4f 	dsb	sy
    5b1c:	e7fe      	b.n	5b1c <vTaskPriorityDisinheritAfterTimeout+0x1c>
    5b1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    5b20:	428a      	cmp	r2, r1
    5b22:	bf38      	it	cc
    5b24:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    5b26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5b28:	4291      	cmp	r1, r2
    5b2a:	d001      	beq.n	5b30 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    5b2c:	2801      	cmp	r0, #1
    5b2e:	d000      	beq.n	5b32 <vTaskPriorityDisinheritAfterTimeout+0x32>
    5b30:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    5b32:	481a      	ldr	r0, [pc, #104]	; (5b9c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    5b34:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    5b38:	4284      	cmp	r4, r0
    5b3a:	d108      	bne.n	5b4e <vTaskPriorityDisinheritAfterTimeout+0x4e>
    5b3c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5b40:	f383 8811 	msr	BASEPRI, r3
    5b44:	f3bf 8f6f 	isb	sy
    5b48:	f3bf 8f4f 	dsb	sy
    5b4c:	e7fe      	b.n	5b4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    5b4e:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    5b50:	69a0      	ldr	r0, [r4, #24]
    5b52:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    5b54:	bfa4      	itt	ge
    5b56:	f1c2 0205 	rsbge	r2, r2, #5
    5b5a:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    5b5c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5b60:	4a0f      	ldr	r2, [pc, #60]	; (5ba0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    5b62:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    5b66:	6962      	ldr	r2, [r4, #20]
    5b68:	428a      	cmp	r2, r1
    5b6a:	d1e1      	bne.n	5b30 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    5b6c:	1d25      	adds	r5, r4, #4
    5b6e:	4628      	mov	r0, r5
    5b70:	4b0c      	ldr	r3, [pc, #48]	; (5ba4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    5b72:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    5b74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5b76:	4b09      	ldr	r3, [pc, #36]	; (5b9c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    5b78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5b7c:	4298      	cmp	r0, r3
    5b7e:	bf84      	itt	hi
    5b80:	4b06      	ldrhi	r3, [pc, #24]	; (5b9c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    5b82:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5b86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5b8a:	4629      	mov	r1, r5
    5b8c:	4b04      	ldr	r3, [pc, #16]	; (5ba0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    5b8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5b92:	4b05      	ldr	r3, [pc, #20]	; (5ba8 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    5b94:	4798      	blx	r3
}
    5b96:	e7cb      	b.n	5b30 <vTaskPriorityDisinheritAfterTimeout+0x30>
    5b98:	4770      	bx	lr
    5b9a:	bf00      	nop
    5b9c:	2000332c 	.word	0x2000332c
    5ba0:	20003354 	.word	0x20003354
    5ba4:	000041e5 	.word	0x000041e5
    5ba8:	00004199 	.word	0x00004199

00005bac <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    5bac:	4b06      	ldr	r3, [pc, #24]	; (5bc8 <pvTaskIncrementMutexHeldCount+0x1c>)
    5bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5bb2:	b12b      	cbz	r3, 5bc0 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    5bb4:	4b04      	ldr	r3, [pc, #16]	; (5bc8 <pvTaskIncrementMutexHeldCount+0x1c>)
    5bb6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5bba:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5bbc:	3301      	adds	r3, #1
    5bbe:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    5bc0:	4b01      	ldr	r3, [pc, #4]	; (5bc8 <pvTaskIncrementMutexHeldCount+0x1c>)
    5bc2:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    5bc6:	4770      	bx	lr
    5bc8:	2000332c 	.word	0x2000332c

00005bcc <xTaskNotifyWait>:
{
    5bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bce:	4607      	mov	r7, r0
    5bd0:	460d      	mov	r5, r1
    5bd2:	4614      	mov	r4, r2
    5bd4:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    5bd6:	4b25      	ldr	r3, [pc, #148]	; (5c6c <xTaskNotifyWait+0xa0>)
    5bd8:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    5bda:	4b25      	ldr	r3, [pc, #148]	; (5c70 <xTaskNotifyWait+0xa4>)
    5bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5be0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    5be4:	b2db      	uxtb	r3, r3
    5be6:	2b02      	cmp	r3, #2
    5be8:	d00c      	beq.n	5c04 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    5bea:	4b21      	ldr	r3, [pc, #132]	; (5c70 <xTaskNotifyWait+0xa4>)
    5bec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5bf0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    5bf2:	ea20 0007 	bic.w	r0, r0, r7
    5bf6:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    5bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5bfc:	2201      	movs	r2, #1
    5bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    5c02:	b9e6      	cbnz	r6, 5c3e <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    5c04:	4b1b      	ldr	r3, [pc, #108]	; (5c74 <xTaskNotifyWait+0xa8>)
    5c06:	4798      	blx	r3
	taskENTER_CRITICAL();
    5c08:	4b18      	ldr	r3, [pc, #96]	; (5c6c <xTaskNotifyWait+0xa0>)
    5c0a:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    5c0c:	b124      	cbz	r4, 5c18 <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    5c0e:	4b18      	ldr	r3, [pc, #96]	; (5c70 <xTaskNotifyWait+0xa4>)
    5c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5c16:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    5c18:	4b15      	ldr	r3, [pc, #84]	; (5c70 <xTaskNotifyWait+0xa4>)
    5c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5c1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    5c22:	b2db      	uxtb	r3, r3
    5c24:	2b02      	cmp	r3, #2
    5c26:	d017      	beq.n	5c58 <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    5c28:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5c2a:	4b11      	ldr	r3, [pc, #68]	; (5c70 <xTaskNotifyWait+0xa4>)
    5c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5c30:	2200      	movs	r2, #0
    5c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    5c36:	4b0f      	ldr	r3, [pc, #60]	; (5c74 <xTaskNotifyWait+0xa8>)
    5c38:	4798      	blx	r3
}
    5c3a:	4620      	mov	r0, r4
    5c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    5c3e:	4611      	mov	r1, r2
    5c40:	4630      	mov	r0, r6
    5c42:	4b0d      	ldr	r3, [pc, #52]	; (5c78 <xTaskNotifyWait+0xac>)
    5c44:	4798      	blx	r3
				portYIELD_WITHIN_API();
    5c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c4a:	4b0c      	ldr	r3, [pc, #48]	; (5c7c <xTaskNotifyWait+0xb0>)
    5c4c:	601a      	str	r2, [r3, #0]
    5c4e:	f3bf 8f4f 	dsb	sy
    5c52:	f3bf 8f6f 	isb	sy
    5c56:	e7d5      	b.n	5c04 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    5c58:	4b05      	ldr	r3, [pc, #20]	; (5c70 <xTaskNotifyWait+0xa4>)
    5c5a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5c5e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    5c60:	ea23 0505 	bic.w	r5, r3, r5
    5c64:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    5c66:	2401      	movs	r4, #1
    5c68:	e7df      	b.n	5c2a <xTaskNotifyWait+0x5e>
    5c6a:	bf00      	nop
    5c6c:	000042e5 	.word	0x000042e5
    5c70:	2000332c 	.word	0x2000332c
    5c74:	00004329 	.word	0x00004329
    5c78:	000050e9 	.word	0x000050e9
    5c7c:	e000ed04 	.word	0xe000ed04

00005c80 <xTaskGenericNotifyFromISR>:
{
    5c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5c84:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    5c86:	b310      	cbz	r0, 5cce <xTaskGenericNotifyFromISR+0x4e>
    5c88:	4604      	mov	r4, r0
    5c8a:	4699      	mov	r9, r3
    5c8c:	4617      	mov	r7, r2
    5c8e:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    5c90:	4b3e      	ldr	r3, [pc, #248]	; (5d8c <xTaskGenericNotifyFromISR+0x10c>)
    5c92:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    5c94:	f3ef 8511 	mrs	r5, BASEPRI
    5c98:	f04f 0380 	mov.w	r3, #128	; 0x80
    5c9c:	f383 8811 	msr	BASEPRI, r3
    5ca0:	f3bf 8f6f 	isb	sy
    5ca4:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    5ca8:	f1b9 0f00 	cmp.w	r9, #0
    5cac:	d002      	beq.n	5cb4 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    5cae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5cb0:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    5cb4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    5cb8:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    5cba:	2202      	movs	r2, #2
    5cbc:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    5cc0:	1e7a      	subs	r2, r7, #1
    5cc2:	2a03      	cmp	r2, #3
    5cc4:	d810      	bhi.n	5ce8 <xTaskGenericNotifyFromISR+0x68>
    5cc6:	e8df f002 	tbb	[pc, r2]
    5cca:	1c0b      	.short	0x1c0b
    5ccc:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    5cce:	f04f 0380 	mov.w	r3, #128	; 0x80
    5cd2:	f383 8811 	msr	BASEPRI, r3
    5cd6:	f3bf 8f6f 	isb	sy
    5cda:	f3bf 8f4f 	dsb	sy
    5cde:	e7fe      	b.n	5cde <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    5ce0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5ce2:	ea42 0208 	orr.w	r2, r2, r8
    5ce6:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    5ce8:	2b01      	cmp	r3, #1
    5cea:	d147      	bne.n	5d7c <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    5cec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5cee:	b1a3      	cbz	r3, 5d1a <xTaskGenericNotifyFromISR+0x9a>
    5cf0:	f04f 0380 	mov.w	r3, #128	; 0x80
    5cf4:	f383 8811 	msr	BASEPRI, r3
    5cf8:	f3bf 8f6f 	isb	sy
    5cfc:	f3bf 8f4f 	dsb	sy
    5d00:	e7fe      	b.n	5d00 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    5d02:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5d04:	3201      	adds	r2, #1
    5d06:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    5d08:	e7ee      	b.n	5ce8 <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    5d0a:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    5d0e:	e7eb      	b.n	5ce8 <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    5d10:	2b02      	cmp	r3, #2
    5d12:	d031      	beq.n	5d78 <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    5d14:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    5d18:	e7e6      	b.n	5ce8 <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5d1a:	4b1d      	ldr	r3, [pc, #116]	; (5d90 <xTaskGenericNotifyFromISR+0x110>)
    5d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5d20:	b9fb      	cbnz	r3, 5d62 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    5d22:	1d27      	adds	r7, r4, #4
    5d24:	4638      	mov	r0, r7
    5d26:	4b1b      	ldr	r3, [pc, #108]	; (5d94 <xTaskGenericNotifyFromISR+0x114>)
    5d28:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    5d2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5d2c:	4b18      	ldr	r3, [pc, #96]	; (5d90 <xTaskGenericNotifyFromISR+0x110>)
    5d2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5d32:	4298      	cmp	r0, r3
    5d34:	bf84      	itt	hi
    5d36:	4b16      	ldrhi	r3, [pc, #88]	; (5d90 <xTaskGenericNotifyFromISR+0x110>)
    5d38:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5d3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5d40:	4639      	mov	r1, r7
    5d42:	4b15      	ldr	r3, [pc, #84]	; (5d98 <xTaskGenericNotifyFromISR+0x118>)
    5d44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5d48:	4b14      	ldr	r3, [pc, #80]	; (5d9c <xTaskGenericNotifyFromISR+0x11c>)
    5d4a:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    5d4c:	4b10      	ldr	r3, [pc, #64]	; (5d90 <xTaskGenericNotifyFromISR+0x110>)
    5d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5d52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5d56:	429a      	cmp	r2, r3
    5d58:	d915      	bls.n	5d86 <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    5d5a:	b146      	cbz	r6, 5d6e <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    5d5c:	2001      	movs	r0, #1
    5d5e:	6030      	str	r0, [r6, #0]
    5d60:	e00d      	b.n	5d7e <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    5d62:	f104 0118 	add.w	r1, r4, #24
    5d66:	480e      	ldr	r0, [pc, #56]	; (5da0 <xTaskGenericNotifyFromISR+0x120>)
    5d68:	4b0c      	ldr	r3, [pc, #48]	; (5d9c <xTaskGenericNotifyFromISR+0x11c>)
    5d6a:	4798      	blx	r3
    5d6c:	e7ee      	b.n	5d4c <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    5d6e:	2001      	movs	r0, #1
    5d70:	4b07      	ldr	r3, [pc, #28]	; (5d90 <xTaskGenericNotifyFromISR+0x110>)
    5d72:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    5d76:	e002      	b.n	5d7e <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    5d78:	2000      	movs	r0, #0
    5d7a:	e000      	b.n	5d7e <xTaskGenericNotifyFromISR+0xfe>
    5d7c:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    5d7e:	f385 8811 	msr	BASEPRI, r5
}
    5d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5d86:	2001      	movs	r0, #1
    5d88:	e7f9      	b.n	5d7e <xTaskGenericNotifyFromISR+0xfe>
    5d8a:	bf00      	nop
    5d8c:	0000453d 	.word	0x0000453d
    5d90:	2000332c 	.word	0x2000332c
    5d94:	000041e5 	.word	0x000041e5
    5d98:	20003354 	.word	0x20003354
    5d9c:	00004199 	.word	0x00004199
    5da0:	20003340 	.word	0x20003340

00005da4 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    5da4:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    5da6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    5da8:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    5daa:	4291      	cmp	r1, r2
    5dac:	d80c      	bhi.n	5dc8 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    5dae:	1ad2      	subs	r2, r2, r3
    5db0:	6983      	ldr	r3, [r0, #24]
    5db2:	429a      	cmp	r2, r3
    5db4:	d301      	bcc.n	5dba <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    5db6:	2001      	movs	r0, #1
    5db8:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    5dba:	1d01      	adds	r1, r0, #4
    5dbc:	4b09      	ldr	r3, [pc, #36]	; (5de4 <prvInsertTimerInActiveList+0x40>)
    5dbe:	6818      	ldr	r0, [r3, #0]
    5dc0:	4b09      	ldr	r3, [pc, #36]	; (5de8 <prvInsertTimerInActiveList+0x44>)
    5dc2:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    5dc4:	2000      	movs	r0, #0
    5dc6:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    5dc8:	429a      	cmp	r2, r3
    5dca:	d201      	bcs.n	5dd0 <prvInsertTimerInActiveList+0x2c>
    5dcc:	4299      	cmp	r1, r3
    5dce:	d206      	bcs.n	5dde <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    5dd0:	1d01      	adds	r1, r0, #4
    5dd2:	4b04      	ldr	r3, [pc, #16]	; (5de4 <prvInsertTimerInActiveList+0x40>)
    5dd4:	6858      	ldr	r0, [r3, #4]
    5dd6:	4b04      	ldr	r3, [pc, #16]	; (5de8 <prvInsertTimerInActiveList+0x44>)
    5dd8:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    5dda:	2000      	movs	r0, #0
    5ddc:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    5dde:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    5de0:	bd08      	pop	{r3, pc}
    5de2:	bf00      	nop
    5de4:	20003418 	.word	0x20003418
    5de8:	000041b1 	.word	0x000041b1

00005dec <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    5dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    5dee:	4b0d      	ldr	r3, [pc, #52]	; (5e24 <prvCheckForValidListAndQueue+0x38>)
    5df0:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    5df2:	4b0d      	ldr	r3, [pc, #52]	; (5e28 <prvCheckForValidListAndQueue+0x3c>)
    5df4:	689b      	ldr	r3, [r3, #8]
    5df6:	b113      	cbz	r3, 5dfe <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5df8:	4b0c      	ldr	r3, [pc, #48]	; (5e2c <prvCheckForValidListAndQueue+0x40>)
    5dfa:	4798      	blx	r3
    5dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    5dfe:	4c0a      	ldr	r4, [pc, #40]	; (5e28 <prvCheckForValidListAndQueue+0x3c>)
    5e00:	f104 060c 	add.w	r6, r4, #12
    5e04:	4630      	mov	r0, r6
    5e06:	4f0a      	ldr	r7, [pc, #40]	; (5e30 <prvCheckForValidListAndQueue+0x44>)
    5e08:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    5e0a:	f104 0520 	add.w	r5, r4, #32
    5e0e:	4628      	mov	r0, r5
    5e10:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    5e12:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    5e14:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    5e16:	2200      	movs	r2, #0
    5e18:	210c      	movs	r1, #12
    5e1a:	2014      	movs	r0, #20
    5e1c:	4b05      	ldr	r3, [pc, #20]	; (5e34 <prvCheckForValidListAndQueue+0x48>)
    5e1e:	4798      	blx	r3
    5e20:	60a0      	str	r0, [r4, #8]
    5e22:	e7e9      	b.n	5df8 <prvCheckForValidListAndQueue+0xc>
    5e24:	000042e5 	.word	0x000042e5
    5e28:	20003418 	.word	0x20003418
    5e2c:	00004329 	.word	0x00004329
    5e30:	0000417d 	.word	0x0000417d
    5e34:	00004939 	.word	0x00004939

00005e38 <xTimerCreateTimerTask>:
{
    5e38:	b510      	push	{r4, lr}
    5e3a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    5e3c:	4b0d      	ldr	r3, [pc, #52]	; (5e74 <xTimerCreateTimerTask+0x3c>)
    5e3e:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    5e40:	4b0d      	ldr	r3, [pc, #52]	; (5e78 <xTimerCreateTimerTask+0x40>)
    5e42:	689b      	ldr	r3, [r3, #8]
    5e44:	b163      	cbz	r3, 5e60 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    5e46:	4b0d      	ldr	r3, [pc, #52]	; (5e7c <xTimerCreateTimerTask+0x44>)
    5e48:	9301      	str	r3, [sp, #4]
    5e4a:	2303      	movs	r3, #3
    5e4c:	9300      	str	r3, [sp, #0]
    5e4e:	2300      	movs	r3, #0
    5e50:	2280      	movs	r2, #128	; 0x80
    5e52:	490b      	ldr	r1, [pc, #44]	; (5e80 <xTimerCreateTimerTask+0x48>)
    5e54:	480b      	ldr	r0, [pc, #44]	; (5e84 <xTimerCreateTimerTask+0x4c>)
    5e56:	4c0c      	ldr	r4, [pc, #48]	; (5e88 <xTimerCreateTimerTask+0x50>)
    5e58:	47a0      	blx	r4
	configASSERT(xReturn);
    5e5a:	b108      	cbz	r0, 5e60 <xTimerCreateTimerTask+0x28>
}
    5e5c:	b002      	add	sp, #8
    5e5e:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    5e60:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e64:	f383 8811 	msr	BASEPRI, r3
    5e68:	f3bf 8f6f 	isb	sy
    5e6c:	f3bf 8f4f 	dsb	sy
    5e70:	e7fe      	b.n	5e70 <xTimerCreateTimerTask+0x38>
    5e72:	bf00      	nop
    5e74:	00005ded 	.word	0x00005ded
    5e78:	20003418 	.word	0x20003418
    5e7c:	2000344c 	.word	0x2000344c
    5e80:	000082ac 	.word	0x000082ac
    5e84:	00005ff9 	.word	0x00005ff9
    5e88:	00005169 	.word	0x00005169

00005e8c <xTimerCreate>:
{
    5e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e90:	4680      	mov	r8, r0
    5e92:	460d      	mov	r5, r1
    5e94:	4617      	mov	r7, r2
    5e96:	461e      	mov	r6, r3
	pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t));
    5e98:	202c      	movs	r0, #44	; 0x2c
    5e9a:	4b0e      	ldr	r3, [pc, #56]	; (5ed4 <xTimerCreate+0x48>)
    5e9c:	4798      	blx	r3
	if (pxNewTimer != NULL) {
    5e9e:	4604      	mov	r4, r0
    5ea0:	b1a8      	cbz	r0, 5ece <xTimerCreate+0x42>
	configASSERT((xTimerPeriodInTicks > 0));
    5ea2:	b945      	cbnz	r5, 5eb6 <xTimerCreate+0x2a>
    5ea4:	f04f 0380 	mov.w	r3, #128	; 0x80
    5ea8:	f383 8811 	msr	BASEPRI, r3
    5eac:	f3bf 8f6f 	isb	sy
    5eb0:	f3bf 8f4f 	dsb	sy
    5eb4:	e7fe      	b.n	5eb4 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
    5eb6:	4b08      	ldr	r3, [pc, #32]	; (5ed8 <xTimerCreate+0x4c>)
    5eb8:	4798      	blx	r3
		pxNewTimer->pcTimerName         = pcTimerName;
    5eba:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    5ebe:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload        = uxAutoReload;
    5ec0:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID           = pvTimerID;
    5ec2:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction  = pxCallbackFunction;
    5ec4:	9b06      	ldr	r3, [sp, #24]
    5ec6:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem(&(pxNewTimer->xTimerListItem));
    5ec8:	1d20      	adds	r0, r4, #4
    5eca:	4b04      	ldr	r3, [pc, #16]	; (5edc <xTimerCreate+0x50>)
    5ecc:	4798      	blx	r3
}
    5ece:	4620      	mov	r0, r4
    5ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ed4:	00004595 	.word	0x00004595
    5ed8:	00005ded 	.word	0x00005ded
    5edc:	00004193 	.word	0x00004193

00005ee0 <xTimerGenericCommand>:
	configASSERT(xTimer);
    5ee0:	b1d8      	cbz	r0, 5f1a <xTimerGenericCommand+0x3a>
{
    5ee2:	b530      	push	{r4, r5, lr}
    5ee4:	b085      	sub	sp, #20
    5ee6:	4615      	mov	r5, r2
    5ee8:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    5eea:	4a14      	ldr	r2, [pc, #80]	; (5f3c <xTimerGenericCommand+0x5c>)
    5eec:	6890      	ldr	r0, [r2, #8]
    5eee:	b310      	cbz	r0, 5f36 <xTimerGenericCommand+0x56>
    5ef0:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    5ef2:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    5ef4:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    5ef6:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    5ef8:	2905      	cmp	r1, #5
    5efa:	dc17      	bgt.n	5f2c <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    5efc:	4b10      	ldr	r3, [pc, #64]	; (5f40 <xTimerGenericCommand+0x60>)
    5efe:	4798      	blx	r3
    5f00:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    5f02:	f04f 0300 	mov.w	r3, #0
    5f06:	bf0c      	ite	eq
    5f08:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    5f0a:	461a      	movne	r2, r3
    5f0c:	a901      	add	r1, sp, #4
    5f0e:	480b      	ldr	r0, [pc, #44]	; (5f3c <xTimerGenericCommand+0x5c>)
    5f10:	6880      	ldr	r0, [r0, #8]
    5f12:	4c0c      	ldr	r4, [pc, #48]	; (5f44 <xTimerGenericCommand+0x64>)
    5f14:	47a0      	blx	r4
}
    5f16:	b005      	add	sp, #20
    5f18:	bd30      	pop	{r4, r5, pc}
    5f1a:	f04f 0380 	mov.w	r3, #128	; 0x80
    5f1e:	f383 8811 	msr	BASEPRI, r3
    5f22:	f3bf 8f6f 	isb	sy
    5f26:	f3bf 8f4f 	dsb	sy
    5f2a:	e7fe      	b.n	5f2a <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    5f2c:	2300      	movs	r3, #0
    5f2e:	a901      	add	r1, sp, #4
    5f30:	4c05      	ldr	r4, [pc, #20]	; (5f48 <xTimerGenericCommand+0x68>)
    5f32:	47a0      	blx	r4
    5f34:	e7ef      	b.n	5f16 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    5f36:	2000      	movs	r0, #0
	return xReturn;
    5f38:	e7ed      	b.n	5f16 <xTimerGenericCommand+0x36>
    5f3a:	bf00      	nop
    5f3c:	20003418 	.word	0x20003418
    5f40:	000059a1 	.word	0x000059a1
    5f44:	00004991 	.word	0x00004991
    5f48:	00004b99 	.word	0x00004b99

00005f4c <prvSampleTimeNow>:
{
    5f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f50:	b082      	sub	sp, #8
    5f52:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    5f54:	4b23      	ldr	r3, [pc, #140]	; (5fe4 <prvSampleTimeNow+0x98>)
    5f56:	4798      	blx	r3
    5f58:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    5f5a:	4b23      	ldr	r3, [pc, #140]	; (5fe8 <prvSampleTimeNow+0x9c>)
    5f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5f5e:	4298      	cmp	r0, r3
    5f60:	d319      	bcc.n	5f96 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    5f62:	2300      	movs	r3, #0
    5f64:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    5f68:	4b1f      	ldr	r3, [pc, #124]	; (5fe8 <prvSampleTimeNow+0x9c>)
    5f6a:	639f      	str	r7, [r3, #56]	; 0x38
}
    5f6c:	4638      	mov	r0, r7
    5f6e:	b002      	add	sp, #8
    5f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    5f74:	2100      	movs	r1, #0
    5f76:	9100      	str	r1, [sp, #0]
    5f78:	460b      	mov	r3, r1
    5f7a:	4652      	mov	r2, sl
    5f7c:	4620      	mov	r0, r4
    5f7e:	4c1b      	ldr	r4, [pc, #108]	; (5fec <prvSampleTimeNow+0xa0>)
    5f80:	47a0      	blx	r4
				configASSERT(xResult);
    5f82:	b950      	cbnz	r0, 5f9a <prvSampleTimeNow+0x4e>
    5f84:	f04f 0380 	mov.w	r3, #128	; 0x80
    5f88:	f383 8811 	msr	BASEPRI, r3
    5f8c:	f3bf 8f6f 	isb	sy
    5f90:	f3bf 8f4f 	dsb	sy
    5f94:	e7fe      	b.n	5f94 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    5f96:	4d14      	ldr	r5, [pc, #80]	; (5fe8 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    5f98:	4e15      	ldr	r6, [pc, #84]	; (5ff0 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    5f9a:	686b      	ldr	r3, [r5, #4]
    5f9c:	681a      	ldr	r2, [r3, #0]
    5f9e:	b1c2      	cbz	r2, 5fd2 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    5fa0:	68db      	ldr	r3, [r3, #12]
    5fa2:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    5fa6:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    5fa8:	f104 0904 	add.w	r9, r4, #4
    5fac:	4648      	mov	r0, r9
    5fae:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    5fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5fb2:	4620      	mov	r0, r4
    5fb4:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    5fb6:	69e3      	ldr	r3, [r4, #28]
    5fb8:	2b01      	cmp	r3, #1
    5fba:	d1ee      	bne.n	5f9a <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    5fbc:	69a3      	ldr	r3, [r4, #24]
    5fbe:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    5fc0:	459a      	cmp	sl, r3
    5fc2:	d2d7      	bcs.n	5f74 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    5fc4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    5fc6:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    5fc8:	4649      	mov	r1, r9
    5fca:	6868      	ldr	r0, [r5, #4]
    5fcc:	4b09      	ldr	r3, [pc, #36]	; (5ff4 <prvSampleTimeNow+0xa8>)
    5fce:	4798      	blx	r3
    5fd0:	e7e3      	b.n	5f9a <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    5fd2:	4a05      	ldr	r2, [pc, #20]	; (5fe8 <prvSampleTimeNow+0x9c>)
    5fd4:	6811      	ldr	r1, [r2, #0]
    5fd6:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    5fd8:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    5fda:	2301      	movs	r3, #1
    5fdc:	f8c8 3000 	str.w	r3, [r8]
    5fe0:	e7c2      	b.n	5f68 <prvSampleTimeNow+0x1c>
    5fe2:	bf00      	nop
    5fe4:	000053e1 	.word	0x000053e1
    5fe8:	20003418 	.word	0x20003418
    5fec:	00005ee1 	.word	0x00005ee1
    5ff0:	000041e5 	.word	0x000041e5
    5ff4:	000041b1 	.word	0x000041b1

00005ff8 <prvTimerTask>:
{
    5ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ffc:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    5ffe:	4c65      	ldr	r4, [pc, #404]	; (6194 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    6000:	4f65      	ldr	r7, [pc, #404]	; (6198 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    6002:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 61b8 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    6006:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 61bc <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    600a:	6863      	ldr	r3, [r4, #4]
    600c:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    600e:	b172      	cbz	r2, 602e <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6010:	68db      	ldr	r3, [r3, #12]
    6012:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    6014:	4b61      	ldr	r3, [pc, #388]	; (619c <prvTimerTask+0x1a4>)
    6016:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6018:	a803      	add	r0, sp, #12
    601a:	4b61      	ldr	r3, [pc, #388]	; (61a0 <prvTimerTask+0x1a8>)
    601c:	4798      	blx	r3
    601e:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    6020:	9b03      	ldr	r3, [sp, #12]
    6022:	2b00      	cmp	r3, #0
    6024:	d179      	bne.n	611a <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    6026:	42a8      	cmp	r0, r5
    6028:	d24a      	bcs.n	60c0 <prvTimerTask+0xc8>
    602a:	2200      	movs	r2, #0
    602c:	e00e      	b.n	604c <prvTimerTask+0x54>
	vTaskSuspendAll();
    602e:	4b5b      	ldr	r3, [pc, #364]	; (619c <prvTimerTask+0x1a4>)
    6030:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6032:	a803      	add	r0, sp, #12
    6034:	4b5a      	ldr	r3, [pc, #360]	; (61a0 <prvTimerTask+0x1a8>)
    6036:	4798      	blx	r3
    6038:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    603a:	9b03      	ldr	r3, [sp, #12]
    603c:	2b00      	cmp	r3, #0
    603e:	d16c      	bne.n	611a <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    6040:	6823      	ldr	r3, [r4, #0]
    6042:	681a      	ldr	r2, [r3, #0]
    6044:	fab2 f282 	clz	r2, r2
    6048:	0952      	lsrs	r2, r2, #5
    604a:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    604c:	1ba9      	subs	r1, r5, r6
    604e:	68a0      	ldr	r0, [r4, #8]
    6050:	4b54      	ldr	r3, [pc, #336]	; (61a4 <prvTimerTask+0x1ac>)
    6052:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    6054:	47b8      	blx	r7
    6056:	b938      	cbnz	r0, 6068 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    6058:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    605c:	f8c9 3000 	str.w	r3, [r9]
    6060:	f3bf 8f4f 	dsb	sy
    6064:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    6068:	4d4f      	ldr	r5, [pc, #316]	; (61a8 <prvTimerTask+0x1b0>)
    606a:	2200      	movs	r2, #0
    606c:	a903      	add	r1, sp, #12
    606e:	68a0      	ldr	r0, [r4, #8]
    6070:	47a8      	blx	r5
    6072:	2800      	cmp	r0, #0
    6074:	d0c9      	beq.n	600a <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    6076:	9b03      	ldr	r3, [sp, #12]
    6078:	2b00      	cmp	r3, #0
    607a:	dbf6      	blt.n	606a <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    607c:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    607e:	6973      	ldr	r3, [r6, #20]
    6080:	b10b      	cbz	r3, 6086 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    6082:	1d30      	adds	r0, r6, #4
    6084:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6086:	a802      	add	r0, sp, #8
    6088:	4b45      	ldr	r3, [pc, #276]	; (61a0 <prvTimerTask+0x1a8>)
    608a:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    608c:	9b03      	ldr	r3, [sp, #12]
    608e:	2b09      	cmp	r3, #9
    6090:	d8eb      	bhi.n	606a <prvTimerTask+0x72>
    6092:	a201      	add	r2, pc, #4	; (adr r2, 6098 <prvTimerTask+0xa0>)
    6094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6098:	0000611f 	.word	0x0000611f
    609c:	0000611f 	.word	0x0000611f
    60a0:	0000611f 	.word	0x0000611f
    60a4:	0000606b 	.word	0x0000606b
    60a8:	00006167 	.word	0x00006167
    60ac:	0000618d 	.word	0x0000618d
    60b0:	0000611f 	.word	0x0000611f
    60b4:	0000611f 	.word	0x0000611f
    60b8:	0000606b 	.word	0x0000606b
    60bc:	00006167 	.word	0x00006167
				(void)xTaskResumeAll();
    60c0:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    60c2:	6863      	ldr	r3, [r4, #4]
    60c4:	68db      	ldr	r3, [r3, #12]
    60c6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    60ca:	f10a 0004 	add.w	r0, sl, #4
    60ce:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    60d0:	f8da 301c 	ldr.w	r3, [sl, #28]
    60d4:	2b01      	cmp	r3, #1
    60d6:	d004      	beq.n	60e2 <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    60d8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    60dc:	4650      	mov	r0, sl
    60de:	4798      	blx	r3
    60e0:	e7c2      	b.n	6068 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    60e2:	f8da 1018 	ldr.w	r1, [sl, #24]
    60e6:	462b      	mov	r3, r5
    60e8:	4632      	mov	r2, r6
    60ea:	4429      	add	r1, r5
    60ec:	4650      	mov	r0, sl
    60ee:	4e2f      	ldr	r6, [pc, #188]	; (61ac <prvTimerTask+0x1b4>)
    60f0:	47b0      	blx	r6
    60f2:	2800      	cmp	r0, #0
    60f4:	d0f0      	beq.n	60d8 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    60f6:	2100      	movs	r1, #0
    60f8:	9100      	str	r1, [sp, #0]
    60fa:	460b      	mov	r3, r1
    60fc:	462a      	mov	r2, r5
    60fe:	4650      	mov	r0, sl
    6100:	4d2b      	ldr	r5, [pc, #172]	; (61b0 <prvTimerTask+0x1b8>)
    6102:	47a8      	blx	r5
			configASSERT(xResult);
    6104:	2800      	cmp	r0, #0
    6106:	d1e7      	bne.n	60d8 <prvTimerTask+0xe0>
    6108:	f04f 0380 	mov.w	r3, #128	; 0x80
    610c:	f383 8811 	msr	BASEPRI, r3
    6110:	f3bf 8f6f 	isb	sy
    6114:	f3bf 8f4f 	dsb	sy
    6118:	e7fe      	b.n	6118 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    611a:	47b8      	blx	r7
    611c:	e7a4      	b.n	6068 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    611e:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    6120:	69b1      	ldr	r1, [r6, #24]
    6122:	462b      	mov	r3, r5
    6124:	4602      	mov	r2, r0
    6126:	4429      	add	r1, r5
    6128:	4630      	mov	r0, r6
    612a:	4d20      	ldr	r5, [pc, #128]	; (61ac <prvTimerTask+0x1b4>)
    612c:	47a8      	blx	r5
    612e:	2800      	cmp	r0, #0
    6130:	d09a      	beq.n	6068 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6132:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6134:	4630      	mov	r0, r6
    6136:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6138:	69f3      	ldr	r3, [r6, #28]
    613a:	2b01      	cmp	r3, #1
    613c:	d194      	bne.n	6068 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    613e:	69b2      	ldr	r2, [r6, #24]
    6140:	2100      	movs	r1, #0
    6142:	9100      	str	r1, [sp, #0]
    6144:	460b      	mov	r3, r1
    6146:	9804      	ldr	r0, [sp, #16]
    6148:	4402      	add	r2, r0
    614a:	4630      	mov	r0, r6
    614c:	4d18      	ldr	r5, [pc, #96]	; (61b0 <prvTimerTask+0x1b8>)
    614e:	47a8      	blx	r5
						configASSERT(xResult);
    6150:	2800      	cmp	r0, #0
    6152:	d189      	bne.n	6068 <prvTimerTask+0x70>
    6154:	f04f 0380 	mov.w	r3, #128	; 0x80
    6158:	f383 8811 	msr	BASEPRI, r3
    615c:	f3bf 8f6f 	isb	sy
    6160:	f3bf 8f4f 	dsb	sy
    6164:	e7fe      	b.n	6164 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    6166:	9904      	ldr	r1, [sp, #16]
    6168:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    616a:	b131      	cbz	r1, 617a <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    616c:	4603      	mov	r3, r0
    616e:	4602      	mov	r2, r0
    6170:	4401      	add	r1, r0
    6172:	4630      	mov	r0, r6
    6174:	4d0d      	ldr	r5, [pc, #52]	; (61ac <prvTimerTask+0x1b4>)
    6176:	47a8      	blx	r5
    6178:	e776      	b.n	6068 <prvTimerTask+0x70>
    617a:	f04f 0380 	mov.w	r3, #128	; 0x80
    617e:	f383 8811 	msr	BASEPRI, r3
    6182:	f3bf 8f6f 	isb	sy
    6186:	f3bf 8f4f 	dsb	sy
    618a:	e7fe      	b.n	618a <prvTimerTask+0x192>
				vPortFree(pxTimer);
    618c:	4630      	mov	r0, r6
    618e:	4b09      	ldr	r3, [pc, #36]	; (61b4 <prvTimerTask+0x1bc>)
    6190:	4798      	blx	r3
    6192:	e769      	b.n	6068 <prvTimerTask+0x70>
    6194:	20003418 	.word	0x20003418
    6198:	00005515 	.word	0x00005515
    619c:	000053cd 	.word	0x000053cd
    61a0:	00005f4d 	.word	0x00005f4d
    61a4:	00005039 	.word	0x00005039
    61a8:	00004ca1 	.word	0x00004ca1
    61ac:	00005da5 	.word	0x00005da5
    61b0:	00005ee1 	.word	0x00005ee1
    61b4:	00004669 	.word	0x00004669
    61b8:	e000ed04 	.word	0xe000ed04
    61bc:	000041e5 	.word	0x000041e5

000061c0 <__libc_init_array>:
    61c0:	b570      	push	{r4, r5, r6, lr}
    61c2:	4e0d      	ldr	r6, [pc, #52]	; (61f8 <__libc_init_array+0x38>)
    61c4:	4c0d      	ldr	r4, [pc, #52]	; (61fc <__libc_init_array+0x3c>)
    61c6:	1ba4      	subs	r4, r4, r6
    61c8:	10a4      	asrs	r4, r4, #2
    61ca:	2500      	movs	r5, #0
    61cc:	42a5      	cmp	r5, r4
    61ce:	d109      	bne.n	61e4 <__libc_init_array+0x24>
    61d0:	4e0b      	ldr	r6, [pc, #44]	; (6200 <__libc_init_array+0x40>)
    61d2:	4c0c      	ldr	r4, [pc, #48]	; (6204 <__libc_init_array+0x44>)
    61d4:	f002 f8b8 	bl	8348 <_init>
    61d8:	1ba4      	subs	r4, r4, r6
    61da:	10a4      	asrs	r4, r4, #2
    61dc:	2500      	movs	r5, #0
    61de:	42a5      	cmp	r5, r4
    61e0:	d105      	bne.n	61ee <__libc_init_array+0x2e>
    61e2:	bd70      	pop	{r4, r5, r6, pc}
    61e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    61e8:	4798      	blx	r3
    61ea:	3501      	adds	r5, #1
    61ec:	e7ee      	b.n	61cc <__libc_init_array+0xc>
    61ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    61f2:	4798      	blx	r3
    61f4:	3501      	adds	r5, #1
    61f6:	e7f2      	b.n	61de <__libc_init_array+0x1e>
    61f8:	00008354 	.word	0x00008354
    61fc:	00008354 	.word	0x00008354
    6200:	00008354 	.word	0x00008354
    6204:	00008358 	.word	0x00008358

00006208 <memcmp>:
    6208:	b510      	push	{r4, lr}
    620a:	3901      	subs	r1, #1
    620c:	4402      	add	r2, r0
    620e:	4290      	cmp	r0, r2
    6210:	d101      	bne.n	6216 <memcmp+0xe>
    6212:	2000      	movs	r0, #0
    6214:	bd10      	pop	{r4, pc}
    6216:	f810 3b01 	ldrb.w	r3, [r0], #1
    621a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    621e:	42a3      	cmp	r3, r4
    6220:	d0f5      	beq.n	620e <memcmp+0x6>
    6222:	1b18      	subs	r0, r3, r4
    6224:	bd10      	pop	{r4, pc}

00006226 <memcpy>:
    6226:	b510      	push	{r4, lr}
    6228:	1e43      	subs	r3, r0, #1
    622a:	440a      	add	r2, r1
    622c:	4291      	cmp	r1, r2
    622e:	d100      	bne.n	6232 <memcpy+0xc>
    6230:	bd10      	pop	{r4, pc}
    6232:	f811 4b01 	ldrb.w	r4, [r1], #1
    6236:	f803 4f01 	strb.w	r4, [r3, #1]!
    623a:	e7f7      	b.n	622c <memcpy+0x6>

0000623c <memmove>:
    623c:	4288      	cmp	r0, r1
    623e:	b510      	push	{r4, lr}
    6240:	eb01 0302 	add.w	r3, r1, r2
    6244:	d803      	bhi.n	624e <memmove+0x12>
    6246:	1e42      	subs	r2, r0, #1
    6248:	4299      	cmp	r1, r3
    624a:	d10c      	bne.n	6266 <memmove+0x2a>
    624c:	bd10      	pop	{r4, pc}
    624e:	4298      	cmp	r0, r3
    6250:	d2f9      	bcs.n	6246 <memmove+0xa>
    6252:	1881      	adds	r1, r0, r2
    6254:	1ad2      	subs	r2, r2, r3
    6256:	42d3      	cmn	r3, r2
    6258:	d100      	bne.n	625c <memmove+0x20>
    625a:	bd10      	pop	{r4, pc}
    625c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    6260:	f801 4d01 	strb.w	r4, [r1, #-1]!
    6264:	e7f7      	b.n	6256 <memmove+0x1a>
    6266:	f811 4b01 	ldrb.w	r4, [r1], #1
    626a:	f802 4f01 	strb.w	r4, [r2, #1]!
    626e:	e7eb      	b.n	6248 <memmove+0xc>

00006270 <memset>:
    6270:	4402      	add	r2, r0
    6272:	4603      	mov	r3, r0
    6274:	4293      	cmp	r3, r2
    6276:	d100      	bne.n	627a <memset+0xa>
    6278:	4770      	bx	lr
    627a:	f803 1b01 	strb.w	r1, [r3], #1
    627e:	e7f9      	b.n	6274 <memset+0x4>

00006280 <_free_r>:
    6280:	b538      	push	{r3, r4, r5, lr}
    6282:	4605      	mov	r5, r0
    6284:	2900      	cmp	r1, #0
    6286:	d045      	beq.n	6314 <_free_r+0x94>
    6288:	f851 3c04 	ldr.w	r3, [r1, #-4]
    628c:	1f0c      	subs	r4, r1, #4
    628e:	2b00      	cmp	r3, #0
    6290:	bfb8      	it	lt
    6292:	18e4      	addlt	r4, r4, r3
    6294:	f000 f90b 	bl	64ae <__malloc_lock>
    6298:	4a1f      	ldr	r2, [pc, #124]	; (6318 <_free_r+0x98>)
    629a:	6813      	ldr	r3, [r2, #0]
    629c:	4610      	mov	r0, r2
    629e:	b933      	cbnz	r3, 62ae <_free_r+0x2e>
    62a0:	6063      	str	r3, [r4, #4]
    62a2:	6014      	str	r4, [r2, #0]
    62a4:	4628      	mov	r0, r5
    62a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    62aa:	f000 b901 	b.w	64b0 <__malloc_unlock>
    62ae:	42a3      	cmp	r3, r4
    62b0:	d90c      	bls.n	62cc <_free_r+0x4c>
    62b2:	6821      	ldr	r1, [r4, #0]
    62b4:	1862      	adds	r2, r4, r1
    62b6:	4293      	cmp	r3, r2
    62b8:	bf04      	itt	eq
    62ba:	681a      	ldreq	r2, [r3, #0]
    62bc:	685b      	ldreq	r3, [r3, #4]
    62be:	6063      	str	r3, [r4, #4]
    62c0:	bf04      	itt	eq
    62c2:	1852      	addeq	r2, r2, r1
    62c4:	6022      	streq	r2, [r4, #0]
    62c6:	6004      	str	r4, [r0, #0]
    62c8:	e7ec      	b.n	62a4 <_free_r+0x24>
    62ca:	4613      	mov	r3, r2
    62cc:	685a      	ldr	r2, [r3, #4]
    62ce:	b10a      	cbz	r2, 62d4 <_free_r+0x54>
    62d0:	42a2      	cmp	r2, r4
    62d2:	d9fa      	bls.n	62ca <_free_r+0x4a>
    62d4:	6819      	ldr	r1, [r3, #0]
    62d6:	1858      	adds	r0, r3, r1
    62d8:	42a0      	cmp	r0, r4
    62da:	d10b      	bne.n	62f4 <_free_r+0x74>
    62dc:	6820      	ldr	r0, [r4, #0]
    62de:	4401      	add	r1, r0
    62e0:	1858      	adds	r0, r3, r1
    62e2:	4282      	cmp	r2, r0
    62e4:	6019      	str	r1, [r3, #0]
    62e6:	d1dd      	bne.n	62a4 <_free_r+0x24>
    62e8:	6810      	ldr	r0, [r2, #0]
    62ea:	6852      	ldr	r2, [r2, #4]
    62ec:	605a      	str	r2, [r3, #4]
    62ee:	4401      	add	r1, r0
    62f0:	6019      	str	r1, [r3, #0]
    62f2:	e7d7      	b.n	62a4 <_free_r+0x24>
    62f4:	d902      	bls.n	62fc <_free_r+0x7c>
    62f6:	230c      	movs	r3, #12
    62f8:	602b      	str	r3, [r5, #0]
    62fa:	e7d3      	b.n	62a4 <_free_r+0x24>
    62fc:	6820      	ldr	r0, [r4, #0]
    62fe:	1821      	adds	r1, r4, r0
    6300:	428a      	cmp	r2, r1
    6302:	bf04      	itt	eq
    6304:	6811      	ldreq	r1, [r2, #0]
    6306:	6852      	ldreq	r2, [r2, #4]
    6308:	6062      	str	r2, [r4, #4]
    630a:	bf04      	itt	eq
    630c:	1809      	addeq	r1, r1, r0
    630e:	6021      	streq	r1, [r4, #0]
    6310:	605c      	str	r4, [r3, #4]
    6312:	e7c7      	b.n	62a4 <_free_r+0x24>
    6314:	bd38      	pop	{r3, r4, r5, pc}
    6316:	bf00      	nop
    6318:	20003454 	.word	0x20003454

0000631c <_malloc_r>:
    631c:	b570      	push	{r4, r5, r6, lr}
    631e:	1ccd      	adds	r5, r1, #3
    6320:	f025 0503 	bic.w	r5, r5, #3
    6324:	3508      	adds	r5, #8
    6326:	2d0c      	cmp	r5, #12
    6328:	bf38      	it	cc
    632a:	250c      	movcc	r5, #12
    632c:	2d00      	cmp	r5, #0
    632e:	4606      	mov	r6, r0
    6330:	db01      	blt.n	6336 <_malloc_r+0x1a>
    6332:	42a9      	cmp	r1, r5
    6334:	d903      	bls.n	633e <_malloc_r+0x22>
    6336:	230c      	movs	r3, #12
    6338:	6033      	str	r3, [r6, #0]
    633a:	2000      	movs	r0, #0
    633c:	bd70      	pop	{r4, r5, r6, pc}
    633e:	f000 f8b6 	bl	64ae <__malloc_lock>
    6342:	4a23      	ldr	r2, [pc, #140]	; (63d0 <_malloc_r+0xb4>)
    6344:	6814      	ldr	r4, [r2, #0]
    6346:	4621      	mov	r1, r4
    6348:	b991      	cbnz	r1, 6370 <_malloc_r+0x54>
    634a:	4c22      	ldr	r4, [pc, #136]	; (63d4 <_malloc_r+0xb8>)
    634c:	6823      	ldr	r3, [r4, #0]
    634e:	b91b      	cbnz	r3, 6358 <_malloc_r+0x3c>
    6350:	4630      	mov	r0, r6
    6352:	f000 f841 	bl	63d8 <_sbrk_r>
    6356:	6020      	str	r0, [r4, #0]
    6358:	4629      	mov	r1, r5
    635a:	4630      	mov	r0, r6
    635c:	f000 f83c 	bl	63d8 <_sbrk_r>
    6360:	1c43      	adds	r3, r0, #1
    6362:	d126      	bne.n	63b2 <_malloc_r+0x96>
    6364:	230c      	movs	r3, #12
    6366:	6033      	str	r3, [r6, #0]
    6368:	4630      	mov	r0, r6
    636a:	f000 f8a1 	bl	64b0 <__malloc_unlock>
    636e:	e7e4      	b.n	633a <_malloc_r+0x1e>
    6370:	680b      	ldr	r3, [r1, #0]
    6372:	1b5b      	subs	r3, r3, r5
    6374:	d41a      	bmi.n	63ac <_malloc_r+0x90>
    6376:	2b0b      	cmp	r3, #11
    6378:	d90f      	bls.n	639a <_malloc_r+0x7e>
    637a:	600b      	str	r3, [r1, #0]
    637c:	50cd      	str	r5, [r1, r3]
    637e:	18cc      	adds	r4, r1, r3
    6380:	4630      	mov	r0, r6
    6382:	f000 f895 	bl	64b0 <__malloc_unlock>
    6386:	f104 000b 	add.w	r0, r4, #11
    638a:	1d23      	adds	r3, r4, #4
    638c:	f020 0007 	bic.w	r0, r0, #7
    6390:	1ac3      	subs	r3, r0, r3
    6392:	d01b      	beq.n	63cc <_malloc_r+0xb0>
    6394:	425a      	negs	r2, r3
    6396:	50e2      	str	r2, [r4, r3]
    6398:	bd70      	pop	{r4, r5, r6, pc}
    639a:	428c      	cmp	r4, r1
    639c:	bf0d      	iteet	eq
    639e:	6863      	ldreq	r3, [r4, #4]
    63a0:	684b      	ldrne	r3, [r1, #4]
    63a2:	6063      	strne	r3, [r4, #4]
    63a4:	6013      	streq	r3, [r2, #0]
    63a6:	bf18      	it	ne
    63a8:	460c      	movne	r4, r1
    63aa:	e7e9      	b.n	6380 <_malloc_r+0x64>
    63ac:	460c      	mov	r4, r1
    63ae:	6849      	ldr	r1, [r1, #4]
    63b0:	e7ca      	b.n	6348 <_malloc_r+0x2c>
    63b2:	1cc4      	adds	r4, r0, #3
    63b4:	f024 0403 	bic.w	r4, r4, #3
    63b8:	42a0      	cmp	r0, r4
    63ba:	d005      	beq.n	63c8 <_malloc_r+0xac>
    63bc:	1a21      	subs	r1, r4, r0
    63be:	4630      	mov	r0, r6
    63c0:	f000 f80a 	bl	63d8 <_sbrk_r>
    63c4:	3001      	adds	r0, #1
    63c6:	d0cd      	beq.n	6364 <_malloc_r+0x48>
    63c8:	6025      	str	r5, [r4, #0]
    63ca:	e7d9      	b.n	6380 <_malloc_r+0x64>
    63cc:	bd70      	pop	{r4, r5, r6, pc}
    63ce:	bf00      	nop
    63d0:	20003454 	.word	0x20003454
    63d4:	20003458 	.word	0x20003458

000063d8 <_sbrk_r>:
    63d8:	b538      	push	{r3, r4, r5, lr}
    63da:	4c06      	ldr	r4, [pc, #24]	; (63f4 <_sbrk_r+0x1c>)
    63dc:	2300      	movs	r3, #0
    63de:	4605      	mov	r5, r0
    63e0:	4608      	mov	r0, r1
    63e2:	6023      	str	r3, [r4, #0]
    63e4:	f7fc fb96 	bl	2b14 <_sbrk>
    63e8:	1c43      	adds	r3, r0, #1
    63ea:	d102      	bne.n	63f2 <_sbrk_r+0x1a>
    63ec:	6823      	ldr	r3, [r4, #0]
    63ee:	b103      	cbz	r3, 63f2 <_sbrk_r+0x1a>
    63f0:	602b      	str	r3, [r5, #0]
    63f2:	bd38      	pop	{r3, r4, r5, pc}
    63f4:	20003e74 	.word	0x20003e74

000063f8 <siprintf>:
    63f8:	b40e      	push	{r1, r2, r3}
    63fa:	b500      	push	{lr}
    63fc:	b09c      	sub	sp, #112	; 0x70
    63fe:	f44f 7102 	mov.w	r1, #520	; 0x208
    6402:	ab1d      	add	r3, sp, #116	; 0x74
    6404:	f8ad 1014 	strh.w	r1, [sp, #20]
    6408:	9002      	str	r0, [sp, #8]
    640a:	9006      	str	r0, [sp, #24]
    640c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6410:	480a      	ldr	r0, [pc, #40]	; (643c <siprintf+0x44>)
    6412:	9104      	str	r1, [sp, #16]
    6414:	9107      	str	r1, [sp, #28]
    6416:	f64f 71ff 	movw	r1, #65535	; 0xffff
    641a:	f853 2b04 	ldr.w	r2, [r3], #4
    641e:	f8ad 1016 	strh.w	r1, [sp, #22]
    6422:	6800      	ldr	r0, [r0, #0]
    6424:	9301      	str	r3, [sp, #4]
    6426:	a902      	add	r1, sp, #8
    6428:	f000 f89e 	bl	6568 <_svfiprintf_r>
    642c:	9b02      	ldr	r3, [sp, #8]
    642e:	2200      	movs	r2, #0
    6430:	701a      	strb	r2, [r3, #0]
    6432:	b01c      	add	sp, #112	; 0x70
    6434:	f85d eb04 	ldr.w	lr, [sp], #4
    6438:	b003      	add	sp, #12
    643a:	4770      	bx	lr
    643c:	2000012c 	.word	0x2000012c

00006440 <strcpy>:
    6440:	4603      	mov	r3, r0
    6442:	f811 2b01 	ldrb.w	r2, [r1], #1
    6446:	f803 2b01 	strb.w	r2, [r3], #1
    644a:	2a00      	cmp	r2, #0
    644c:	d1f9      	bne.n	6442 <strcpy+0x2>
    644e:	4770      	bx	lr

00006450 <strlen>:
    6450:	4603      	mov	r3, r0
    6452:	f813 2b01 	ldrb.w	r2, [r3], #1
    6456:	2a00      	cmp	r2, #0
    6458:	d1fb      	bne.n	6452 <strlen+0x2>
    645a:	1a18      	subs	r0, r3, r0
    645c:	3801      	subs	r0, #1
    645e:	4770      	bx	lr

00006460 <strncmp>:
    6460:	b510      	push	{r4, lr}
    6462:	b16a      	cbz	r2, 6480 <strncmp+0x20>
    6464:	3901      	subs	r1, #1
    6466:	1884      	adds	r4, r0, r2
    6468:	f810 3b01 	ldrb.w	r3, [r0], #1
    646c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6470:	4293      	cmp	r3, r2
    6472:	d103      	bne.n	647c <strncmp+0x1c>
    6474:	42a0      	cmp	r0, r4
    6476:	d001      	beq.n	647c <strncmp+0x1c>
    6478:	2b00      	cmp	r3, #0
    647a:	d1f5      	bne.n	6468 <strncmp+0x8>
    647c:	1a98      	subs	r0, r3, r2
    647e:	bd10      	pop	{r4, pc}
    6480:	4610      	mov	r0, r2
    6482:	bd10      	pop	{r4, pc}

00006484 <strncpy>:
    6484:	b570      	push	{r4, r5, r6, lr}
    6486:	4604      	mov	r4, r0
    6488:	b902      	cbnz	r2, 648c <strncpy+0x8>
    648a:	bd70      	pop	{r4, r5, r6, pc}
    648c:	4623      	mov	r3, r4
    648e:	f811 5b01 	ldrb.w	r5, [r1], #1
    6492:	f803 5b01 	strb.w	r5, [r3], #1
    6496:	1e56      	subs	r6, r2, #1
    6498:	b91d      	cbnz	r5, 64a2 <strncpy+0x1e>
    649a:	4414      	add	r4, r2
    649c:	42a3      	cmp	r3, r4
    649e:	d103      	bne.n	64a8 <strncpy+0x24>
    64a0:	bd70      	pop	{r4, r5, r6, pc}
    64a2:	461c      	mov	r4, r3
    64a4:	4632      	mov	r2, r6
    64a6:	e7ef      	b.n	6488 <strncpy+0x4>
    64a8:	f803 5b01 	strb.w	r5, [r3], #1
    64ac:	e7f6      	b.n	649c <strncpy+0x18>

000064ae <__malloc_lock>:
    64ae:	4770      	bx	lr

000064b0 <__malloc_unlock>:
    64b0:	4770      	bx	lr

000064b2 <__ssputs_r>:
    64b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64b6:	688e      	ldr	r6, [r1, #8]
    64b8:	429e      	cmp	r6, r3
    64ba:	4682      	mov	sl, r0
    64bc:	460c      	mov	r4, r1
    64be:	4691      	mov	r9, r2
    64c0:	4698      	mov	r8, r3
    64c2:	d835      	bhi.n	6530 <__ssputs_r+0x7e>
    64c4:	898a      	ldrh	r2, [r1, #12]
    64c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
    64ca:	d031      	beq.n	6530 <__ssputs_r+0x7e>
    64cc:	6825      	ldr	r5, [r4, #0]
    64ce:	6909      	ldr	r1, [r1, #16]
    64d0:	1a6f      	subs	r7, r5, r1
    64d2:	6965      	ldr	r5, [r4, #20]
    64d4:	2302      	movs	r3, #2
    64d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    64da:	fb95 f5f3 	sdiv	r5, r5, r3
    64de:	f108 0301 	add.w	r3, r8, #1
    64e2:	443b      	add	r3, r7
    64e4:	429d      	cmp	r5, r3
    64e6:	bf38      	it	cc
    64e8:	461d      	movcc	r5, r3
    64ea:	0553      	lsls	r3, r2, #21
    64ec:	d531      	bpl.n	6552 <__ssputs_r+0xa0>
    64ee:	4629      	mov	r1, r5
    64f0:	f7ff ff14 	bl	631c <_malloc_r>
    64f4:	4606      	mov	r6, r0
    64f6:	b950      	cbnz	r0, 650e <__ssputs_r+0x5c>
    64f8:	230c      	movs	r3, #12
    64fa:	f8ca 3000 	str.w	r3, [sl]
    64fe:	89a3      	ldrh	r3, [r4, #12]
    6500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6504:	81a3      	strh	r3, [r4, #12]
    6506:	f04f 30ff 	mov.w	r0, #4294967295
    650a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    650e:	463a      	mov	r2, r7
    6510:	6921      	ldr	r1, [r4, #16]
    6512:	f7ff fe88 	bl	6226 <memcpy>
    6516:	89a3      	ldrh	r3, [r4, #12]
    6518:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    651c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6520:	81a3      	strh	r3, [r4, #12]
    6522:	6126      	str	r6, [r4, #16]
    6524:	6165      	str	r5, [r4, #20]
    6526:	443e      	add	r6, r7
    6528:	1bed      	subs	r5, r5, r7
    652a:	6026      	str	r6, [r4, #0]
    652c:	60a5      	str	r5, [r4, #8]
    652e:	4646      	mov	r6, r8
    6530:	4546      	cmp	r6, r8
    6532:	bf28      	it	cs
    6534:	4646      	movcs	r6, r8
    6536:	4632      	mov	r2, r6
    6538:	4649      	mov	r1, r9
    653a:	6820      	ldr	r0, [r4, #0]
    653c:	f7ff fe7e 	bl	623c <memmove>
    6540:	68a3      	ldr	r3, [r4, #8]
    6542:	1b9b      	subs	r3, r3, r6
    6544:	60a3      	str	r3, [r4, #8]
    6546:	6823      	ldr	r3, [r4, #0]
    6548:	441e      	add	r6, r3
    654a:	6026      	str	r6, [r4, #0]
    654c:	2000      	movs	r0, #0
    654e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6552:	462a      	mov	r2, r5
    6554:	f000 fae4 	bl	6b20 <_realloc_r>
    6558:	4606      	mov	r6, r0
    655a:	2800      	cmp	r0, #0
    655c:	d1e1      	bne.n	6522 <__ssputs_r+0x70>
    655e:	6921      	ldr	r1, [r4, #16]
    6560:	4650      	mov	r0, sl
    6562:	f7ff fe8d 	bl	6280 <_free_r>
    6566:	e7c7      	b.n	64f8 <__ssputs_r+0x46>

00006568 <_svfiprintf_r>:
    6568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    656c:	b09d      	sub	sp, #116	; 0x74
    656e:	4680      	mov	r8, r0
    6570:	9303      	str	r3, [sp, #12]
    6572:	898b      	ldrh	r3, [r1, #12]
    6574:	061c      	lsls	r4, r3, #24
    6576:	460d      	mov	r5, r1
    6578:	4616      	mov	r6, r2
    657a:	d50f      	bpl.n	659c <_svfiprintf_r+0x34>
    657c:	690b      	ldr	r3, [r1, #16]
    657e:	b96b      	cbnz	r3, 659c <_svfiprintf_r+0x34>
    6580:	2140      	movs	r1, #64	; 0x40
    6582:	f7ff fecb 	bl	631c <_malloc_r>
    6586:	6028      	str	r0, [r5, #0]
    6588:	6128      	str	r0, [r5, #16]
    658a:	b928      	cbnz	r0, 6598 <_svfiprintf_r+0x30>
    658c:	230c      	movs	r3, #12
    658e:	f8c8 3000 	str.w	r3, [r8]
    6592:	f04f 30ff 	mov.w	r0, #4294967295
    6596:	e0c5      	b.n	6724 <_svfiprintf_r+0x1bc>
    6598:	2340      	movs	r3, #64	; 0x40
    659a:	616b      	str	r3, [r5, #20]
    659c:	2300      	movs	r3, #0
    659e:	9309      	str	r3, [sp, #36]	; 0x24
    65a0:	2320      	movs	r3, #32
    65a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    65a6:	2330      	movs	r3, #48	; 0x30
    65a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    65ac:	f04f 0b01 	mov.w	fp, #1
    65b0:	4637      	mov	r7, r6
    65b2:	463c      	mov	r4, r7
    65b4:	f814 3b01 	ldrb.w	r3, [r4], #1
    65b8:	2b00      	cmp	r3, #0
    65ba:	d13c      	bne.n	6636 <_svfiprintf_r+0xce>
    65bc:	ebb7 0a06 	subs.w	sl, r7, r6
    65c0:	d00b      	beq.n	65da <_svfiprintf_r+0x72>
    65c2:	4653      	mov	r3, sl
    65c4:	4632      	mov	r2, r6
    65c6:	4629      	mov	r1, r5
    65c8:	4640      	mov	r0, r8
    65ca:	f7ff ff72 	bl	64b2 <__ssputs_r>
    65ce:	3001      	adds	r0, #1
    65d0:	f000 80a3 	beq.w	671a <_svfiprintf_r+0x1b2>
    65d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    65d6:	4453      	add	r3, sl
    65d8:	9309      	str	r3, [sp, #36]	; 0x24
    65da:	783b      	ldrb	r3, [r7, #0]
    65dc:	2b00      	cmp	r3, #0
    65de:	f000 809c 	beq.w	671a <_svfiprintf_r+0x1b2>
    65e2:	2300      	movs	r3, #0
    65e4:	f04f 32ff 	mov.w	r2, #4294967295
    65e8:	9304      	str	r3, [sp, #16]
    65ea:	9307      	str	r3, [sp, #28]
    65ec:	9205      	str	r2, [sp, #20]
    65ee:	9306      	str	r3, [sp, #24]
    65f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    65f4:	931a      	str	r3, [sp, #104]	; 0x68
    65f6:	2205      	movs	r2, #5
    65f8:	7821      	ldrb	r1, [r4, #0]
    65fa:	4850      	ldr	r0, [pc, #320]	; (673c <_svfiprintf_r+0x1d4>)
    65fc:	f000 fa40 	bl	6a80 <memchr>
    6600:	1c67      	adds	r7, r4, #1
    6602:	9b04      	ldr	r3, [sp, #16]
    6604:	b9d8      	cbnz	r0, 663e <_svfiprintf_r+0xd6>
    6606:	06d9      	lsls	r1, r3, #27
    6608:	bf44      	itt	mi
    660a:	2220      	movmi	r2, #32
    660c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6610:	071a      	lsls	r2, r3, #28
    6612:	bf44      	itt	mi
    6614:	222b      	movmi	r2, #43	; 0x2b
    6616:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    661a:	7822      	ldrb	r2, [r4, #0]
    661c:	2a2a      	cmp	r2, #42	; 0x2a
    661e:	d016      	beq.n	664e <_svfiprintf_r+0xe6>
    6620:	9a07      	ldr	r2, [sp, #28]
    6622:	2100      	movs	r1, #0
    6624:	200a      	movs	r0, #10
    6626:	4627      	mov	r7, r4
    6628:	3401      	adds	r4, #1
    662a:	783b      	ldrb	r3, [r7, #0]
    662c:	3b30      	subs	r3, #48	; 0x30
    662e:	2b09      	cmp	r3, #9
    6630:	d951      	bls.n	66d6 <_svfiprintf_r+0x16e>
    6632:	b1c9      	cbz	r1, 6668 <_svfiprintf_r+0x100>
    6634:	e011      	b.n	665a <_svfiprintf_r+0xf2>
    6636:	2b25      	cmp	r3, #37	; 0x25
    6638:	d0c0      	beq.n	65bc <_svfiprintf_r+0x54>
    663a:	4627      	mov	r7, r4
    663c:	e7b9      	b.n	65b2 <_svfiprintf_r+0x4a>
    663e:	4a3f      	ldr	r2, [pc, #252]	; (673c <_svfiprintf_r+0x1d4>)
    6640:	1a80      	subs	r0, r0, r2
    6642:	fa0b f000 	lsl.w	r0, fp, r0
    6646:	4318      	orrs	r0, r3
    6648:	9004      	str	r0, [sp, #16]
    664a:	463c      	mov	r4, r7
    664c:	e7d3      	b.n	65f6 <_svfiprintf_r+0x8e>
    664e:	9a03      	ldr	r2, [sp, #12]
    6650:	1d11      	adds	r1, r2, #4
    6652:	6812      	ldr	r2, [r2, #0]
    6654:	9103      	str	r1, [sp, #12]
    6656:	2a00      	cmp	r2, #0
    6658:	db01      	blt.n	665e <_svfiprintf_r+0xf6>
    665a:	9207      	str	r2, [sp, #28]
    665c:	e004      	b.n	6668 <_svfiprintf_r+0x100>
    665e:	4252      	negs	r2, r2
    6660:	f043 0302 	orr.w	r3, r3, #2
    6664:	9207      	str	r2, [sp, #28]
    6666:	9304      	str	r3, [sp, #16]
    6668:	783b      	ldrb	r3, [r7, #0]
    666a:	2b2e      	cmp	r3, #46	; 0x2e
    666c:	d10e      	bne.n	668c <_svfiprintf_r+0x124>
    666e:	787b      	ldrb	r3, [r7, #1]
    6670:	2b2a      	cmp	r3, #42	; 0x2a
    6672:	f107 0101 	add.w	r1, r7, #1
    6676:	d132      	bne.n	66de <_svfiprintf_r+0x176>
    6678:	9b03      	ldr	r3, [sp, #12]
    667a:	1d1a      	adds	r2, r3, #4
    667c:	681b      	ldr	r3, [r3, #0]
    667e:	9203      	str	r2, [sp, #12]
    6680:	2b00      	cmp	r3, #0
    6682:	bfb8      	it	lt
    6684:	f04f 33ff 	movlt.w	r3, #4294967295
    6688:	3702      	adds	r7, #2
    668a:	9305      	str	r3, [sp, #20]
    668c:	4c2c      	ldr	r4, [pc, #176]	; (6740 <_svfiprintf_r+0x1d8>)
    668e:	7839      	ldrb	r1, [r7, #0]
    6690:	2203      	movs	r2, #3
    6692:	4620      	mov	r0, r4
    6694:	f000 f9f4 	bl	6a80 <memchr>
    6698:	b138      	cbz	r0, 66aa <_svfiprintf_r+0x142>
    669a:	2340      	movs	r3, #64	; 0x40
    669c:	1b00      	subs	r0, r0, r4
    669e:	fa03 f000 	lsl.w	r0, r3, r0
    66a2:	9b04      	ldr	r3, [sp, #16]
    66a4:	4303      	orrs	r3, r0
    66a6:	9304      	str	r3, [sp, #16]
    66a8:	3701      	adds	r7, #1
    66aa:	7839      	ldrb	r1, [r7, #0]
    66ac:	4825      	ldr	r0, [pc, #148]	; (6744 <_svfiprintf_r+0x1dc>)
    66ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    66b2:	2206      	movs	r2, #6
    66b4:	1c7e      	adds	r6, r7, #1
    66b6:	f000 f9e3 	bl	6a80 <memchr>
    66ba:	2800      	cmp	r0, #0
    66bc:	d035      	beq.n	672a <_svfiprintf_r+0x1c2>
    66be:	4b22      	ldr	r3, [pc, #136]	; (6748 <_svfiprintf_r+0x1e0>)
    66c0:	b9fb      	cbnz	r3, 6702 <_svfiprintf_r+0x19a>
    66c2:	9b03      	ldr	r3, [sp, #12]
    66c4:	3307      	adds	r3, #7
    66c6:	f023 0307 	bic.w	r3, r3, #7
    66ca:	3308      	adds	r3, #8
    66cc:	9303      	str	r3, [sp, #12]
    66ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
    66d0:	444b      	add	r3, r9
    66d2:	9309      	str	r3, [sp, #36]	; 0x24
    66d4:	e76c      	b.n	65b0 <_svfiprintf_r+0x48>
    66d6:	fb00 3202 	mla	r2, r0, r2, r3
    66da:	2101      	movs	r1, #1
    66dc:	e7a3      	b.n	6626 <_svfiprintf_r+0xbe>
    66de:	2300      	movs	r3, #0
    66e0:	9305      	str	r3, [sp, #20]
    66e2:	4618      	mov	r0, r3
    66e4:	240a      	movs	r4, #10
    66e6:	460f      	mov	r7, r1
    66e8:	3101      	adds	r1, #1
    66ea:	783a      	ldrb	r2, [r7, #0]
    66ec:	3a30      	subs	r2, #48	; 0x30
    66ee:	2a09      	cmp	r2, #9
    66f0:	d903      	bls.n	66fa <_svfiprintf_r+0x192>
    66f2:	2b00      	cmp	r3, #0
    66f4:	d0ca      	beq.n	668c <_svfiprintf_r+0x124>
    66f6:	9005      	str	r0, [sp, #20]
    66f8:	e7c8      	b.n	668c <_svfiprintf_r+0x124>
    66fa:	fb04 2000 	mla	r0, r4, r0, r2
    66fe:	2301      	movs	r3, #1
    6700:	e7f1      	b.n	66e6 <_svfiprintf_r+0x17e>
    6702:	ab03      	add	r3, sp, #12
    6704:	9300      	str	r3, [sp, #0]
    6706:	462a      	mov	r2, r5
    6708:	4b10      	ldr	r3, [pc, #64]	; (674c <_svfiprintf_r+0x1e4>)
    670a:	a904      	add	r1, sp, #16
    670c:	4640      	mov	r0, r8
    670e:	f3af 8000 	nop.w
    6712:	f1b0 3fff 	cmp.w	r0, #4294967295
    6716:	4681      	mov	r9, r0
    6718:	d1d9      	bne.n	66ce <_svfiprintf_r+0x166>
    671a:	89ab      	ldrh	r3, [r5, #12]
    671c:	065b      	lsls	r3, r3, #25
    671e:	f53f af38 	bmi.w	6592 <_svfiprintf_r+0x2a>
    6722:	9809      	ldr	r0, [sp, #36]	; 0x24
    6724:	b01d      	add	sp, #116	; 0x74
    6726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    672a:	ab03      	add	r3, sp, #12
    672c:	9300      	str	r3, [sp, #0]
    672e:	462a      	mov	r2, r5
    6730:	4b06      	ldr	r3, [pc, #24]	; (674c <_svfiprintf_r+0x1e4>)
    6732:	a904      	add	r1, sp, #16
    6734:	4640      	mov	r0, r8
    6736:	f000 f881 	bl	683c <_printf_i>
    673a:	e7ea      	b.n	6712 <_svfiprintf_r+0x1aa>
    673c:	00008314 	.word	0x00008314
    6740:	0000831a 	.word	0x0000831a
    6744:	0000831e 	.word	0x0000831e
    6748:	00000000 	.word	0x00000000
    674c:	000064b3 	.word	0x000064b3

00006750 <_printf_common>:
    6750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6754:	4691      	mov	r9, r2
    6756:	461f      	mov	r7, r3
    6758:	688a      	ldr	r2, [r1, #8]
    675a:	690b      	ldr	r3, [r1, #16]
    675c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    6760:	4293      	cmp	r3, r2
    6762:	bfb8      	it	lt
    6764:	4613      	movlt	r3, r2
    6766:	f8c9 3000 	str.w	r3, [r9]
    676a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    676e:	4606      	mov	r6, r0
    6770:	460c      	mov	r4, r1
    6772:	b112      	cbz	r2, 677a <_printf_common+0x2a>
    6774:	3301      	adds	r3, #1
    6776:	f8c9 3000 	str.w	r3, [r9]
    677a:	6823      	ldr	r3, [r4, #0]
    677c:	0699      	lsls	r1, r3, #26
    677e:	bf42      	ittt	mi
    6780:	f8d9 3000 	ldrmi.w	r3, [r9]
    6784:	3302      	addmi	r3, #2
    6786:	f8c9 3000 	strmi.w	r3, [r9]
    678a:	6825      	ldr	r5, [r4, #0]
    678c:	f015 0506 	ands.w	r5, r5, #6
    6790:	d107      	bne.n	67a2 <_printf_common+0x52>
    6792:	f104 0a19 	add.w	sl, r4, #25
    6796:	68e3      	ldr	r3, [r4, #12]
    6798:	f8d9 2000 	ldr.w	r2, [r9]
    679c:	1a9b      	subs	r3, r3, r2
    679e:	429d      	cmp	r5, r3
    67a0:	db29      	blt.n	67f6 <_printf_common+0xa6>
    67a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    67a6:	6822      	ldr	r2, [r4, #0]
    67a8:	3300      	adds	r3, #0
    67aa:	bf18      	it	ne
    67ac:	2301      	movne	r3, #1
    67ae:	0692      	lsls	r2, r2, #26
    67b0:	d42e      	bmi.n	6810 <_printf_common+0xc0>
    67b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
    67b6:	4639      	mov	r1, r7
    67b8:	4630      	mov	r0, r6
    67ba:	47c0      	blx	r8
    67bc:	3001      	adds	r0, #1
    67be:	d021      	beq.n	6804 <_printf_common+0xb4>
    67c0:	6823      	ldr	r3, [r4, #0]
    67c2:	68e5      	ldr	r5, [r4, #12]
    67c4:	f8d9 2000 	ldr.w	r2, [r9]
    67c8:	f003 0306 	and.w	r3, r3, #6
    67cc:	2b04      	cmp	r3, #4
    67ce:	bf08      	it	eq
    67d0:	1aad      	subeq	r5, r5, r2
    67d2:	68a3      	ldr	r3, [r4, #8]
    67d4:	6922      	ldr	r2, [r4, #16]
    67d6:	bf0c      	ite	eq
    67d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    67dc:	2500      	movne	r5, #0
    67de:	4293      	cmp	r3, r2
    67e0:	bfc4      	itt	gt
    67e2:	1a9b      	subgt	r3, r3, r2
    67e4:	18ed      	addgt	r5, r5, r3
    67e6:	f04f 0900 	mov.w	r9, #0
    67ea:	341a      	adds	r4, #26
    67ec:	454d      	cmp	r5, r9
    67ee:	d11b      	bne.n	6828 <_printf_common+0xd8>
    67f0:	2000      	movs	r0, #0
    67f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    67f6:	2301      	movs	r3, #1
    67f8:	4652      	mov	r2, sl
    67fa:	4639      	mov	r1, r7
    67fc:	4630      	mov	r0, r6
    67fe:	47c0      	blx	r8
    6800:	3001      	adds	r0, #1
    6802:	d103      	bne.n	680c <_printf_common+0xbc>
    6804:	f04f 30ff 	mov.w	r0, #4294967295
    6808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    680c:	3501      	adds	r5, #1
    680e:	e7c2      	b.n	6796 <_printf_common+0x46>
    6810:	18e1      	adds	r1, r4, r3
    6812:	1c5a      	adds	r2, r3, #1
    6814:	2030      	movs	r0, #48	; 0x30
    6816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    681a:	4422      	add	r2, r4
    681c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    6820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    6824:	3302      	adds	r3, #2
    6826:	e7c4      	b.n	67b2 <_printf_common+0x62>
    6828:	2301      	movs	r3, #1
    682a:	4622      	mov	r2, r4
    682c:	4639      	mov	r1, r7
    682e:	4630      	mov	r0, r6
    6830:	47c0      	blx	r8
    6832:	3001      	adds	r0, #1
    6834:	d0e6      	beq.n	6804 <_printf_common+0xb4>
    6836:	f109 0901 	add.w	r9, r9, #1
    683a:	e7d7      	b.n	67ec <_printf_common+0x9c>

0000683c <_printf_i>:
    683c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6840:	4617      	mov	r7, r2
    6842:	7e0a      	ldrb	r2, [r1, #24]
    6844:	b085      	sub	sp, #20
    6846:	2a6e      	cmp	r2, #110	; 0x6e
    6848:	4698      	mov	r8, r3
    684a:	4606      	mov	r6, r0
    684c:	460c      	mov	r4, r1
    684e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6850:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    6854:	f000 80bc 	beq.w	69d0 <_printf_i+0x194>
    6858:	d81a      	bhi.n	6890 <_printf_i+0x54>
    685a:	2a63      	cmp	r2, #99	; 0x63
    685c:	d02e      	beq.n	68bc <_printf_i+0x80>
    685e:	d80a      	bhi.n	6876 <_printf_i+0x3a>
    6860:	2a00      	cmp	r2, #0
    6862:	f000 80c8 	beq.w	69f6 <_printf_i+0x1ba>
    6866:	2a58      	cmp	r2, #88	; 0x58
    6868:	f000 808a 	beq.w	6980 <_printf_i+0x144>
    686c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    6870:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    6874:	e02a      	b.n	68cc <_printf_i+0x90>
    6876:	2a64      	cmp	r2, #100	; 0x64
    6878:	d001      	beq.n	687e <_printf_i+0x42>
    687a:	2a69      	cmp	r2, #105	; 0x69
    687c:	d1f6      	bne.n	686c <_printf_i+0x30>
    687e:	6821      	ldr	r1, [r4, #0]
    6880:	681a      	ldr	r2, [r3, #0]
    6882:	f011 0f80 	tst.w	r1, #128	; 0x80
    6886:	d023      	beq.n	68d0 <_printf_i+0x94>
    6888:	1d11      	adds	r1, r2, #4
    688a:	6019      	str	r1, [r3, #0]
    688c:	6813      	ldr	r3, [r2, #0]
    688e:	e027      	b.n	68e0 <_printf_i+0xa4>
    6890:	2a73      	cmp	r2, #115	; 0x73
    6892:	f000 80b4 	beq.w	69fe <_printf_i+0x1c2>
    6896:	d808      	bhi.n	68aa <_printf_i+0x6e>
    6898:	2a6f      	cmp	r2, #111	; 0x6f
    689a:	d02a      	beq.n	68f2 <_printf_i+0xb6>
    689c:	2a70      	cmp	r2, #112	; 0x70
    689e:	d1e5      	bne.n	686c <_printf_i+0x30>
    68a0:	680a      	ldr	r2, [r1, #0]
    68a2:	f042 0220 	orr.w	r2, r2, #32
    68a6:	600a      	str	r2, [r1, #0]
    68a8:	e003      	b.n	68b2 <_printf_i+0x76>
    68aa:	2a75      	cmp	r2, #117	; 0x75
    68ac:	d021      	beq.n	68f2 <_printf_i+0xb6>
    68ae:	2a78      	cmp	r2, #120	; 0x78
    68b0:	d1dc      	bne.n	686c <_printf_i+0x30>
    68b2:	2278      	movs	r2, #120	; 0x78
    68b4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    68b8:	496e      	ldr	r1, [pc, #440]	; (6a74 <_printf_i+0x238>)
    68ba:	e064      	b.n	6986 <_printf_i+0x14a>
    68bc:	681a      	ldr	r2, [r3, #0]
    68be:	f101 0542 	add.w	r5, r1, #66	; 0x42
    68c2:	1d11      	adds	r1, r2, #4
    68c4:	6019      	str	r1, [r3, #0]
    68c6:	6813      	ldr	r3, [r2, #0]
    68c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    68cc:	2301      	movs	r3, #1
    68ce:	e0a3      	b.n	6a18 <_printf_i+0x1dc>
    68d0:	f011 0f40 	tst.w	r1, #64	; 0x40
    68d4:	f102 0104 	add.w	r1, r2, #4
    68d8:	6019      	str	r1, [r3, #0]
    68da:	d0d7      	beq.n	688c <_printf_i+0x50>
    68dc:	f9b2 3000 	ldrsh.w	r3, [r2]
    68e0:	2b00      	cmp	r3, #0
    68e2:	da03      	bge.n	68ec <_printf_i+0xb0>
    68e4:	222d      	movs	r2, #45	; 0x2d
    68e6:	425b      	negs	r3, r3
    68e8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    68ec:	4962      	ldr	r1, [pc, #392]	; (6a78 <_printf_i+0x23c>)
    68ee:	220a      	movs	r2, #10
    68f0:	e017      	b.n	6922 <_printf_i+0xe6>
    68f2:	6820      	ldr	r0, [r4, #0]
    68f4:	6819      	ldr	r1, [r3, #0]
    68f6:	f010 0f80 	tst.w	r0, #128	; 0x80
    68fa:	d003      	beq.n	6904 <_printf_i+0xc8>
    68fc:	1d08      	adds	r0, r1, #4
    68fe:	6018      	str	r0, [r3, #0]
    6900:	680b      	ldr	r3, [r1, #0]
    6902:	e006      	b.n	6912 <_printf_i+0xd6>
    6904:	f010 0f40 	tst.w	r0, #64	; 0x40
    6908:	f101 0004 	add.w	r0, r1, #4
    690c:	6018      	str	r0, [r3, #0]
    690e:	d0f7      	beq.n	6900 <_printf_i+0xc4>
    6910:	880b      	ldrh	r3, [r1, #0]
    6912:	4959      	ldr	r1, [pc, #356]	; (6a78 <_printf_i+0x23c>)
    6914:	2a6f      	cmp	r2, #111	; 0x6f
    6916:	bf14      	ite	ne
    6918:	220a      	movne	r2, #10
    691a:	2208      	moveq	r2, #8
    691c:	2000      	movs	r0, #0
    691e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    6922:	6865      	ldr	r5, [r4, #4]
    6924:	60a5      	str	r5, [r4, #8]
    6926:	2d00      	cmp	r5, #0
    6928:	f2c0 809c 	blt.w	6a64 <_printf_i+0x228>
    692c:	6820      	ldr	r0, [r4, #0]
    692e:	f020 0004 	bic.w	r0, r0, #4
    6932:	6020      	str	r0, [r4, #0]
    6934:	2b00      	cmp	r3, #0
    6936:	d13f      	bne.n	69b8 <_printf_i+0x17c>
    6938:	2d00      	cmp	r5, #0
    693a:	f040 8095 	bne.w	6a68 <_printf_i+0x22c>
    693e:	4675      	mov	r5, lr
    6940:	2a08      	cmp	r2, #8
    6942:	d10b      	bne.n	695c <_printf_i+0x120>
    6944:	6823      	ldr	r3, [r4, #0]
    6946:	07da      	lsls	r2, r3, #31
    6948:	d508      	bpl.n	695c <_printf_i+0x120>
    694a:	6923      	ldr	r3, [r4, #16]
    694c:	6862      	ldr	r2, [r4, #4]
    694e:	429a      	cmp	r2, r3
    6950:	bfde      	ittt	le
    6952:	2330      	movle	r3, #48	; 0x30
    6954:	f805 3c01 	strble.w	r3, [r5, #-1]
    6958:	f105 35ff 	addle.w	r5, r5, #4294967295
    695c:	ebae 0305 	sub.w	r3, lr, r5
    6960:	6123      	str	r3, [r4, #16]
    6962:	f8cd 8000 	str.w	r8, [sp]
    6966:	463b      	mov	r3, r7
    6968:	aa03      	add	r2, sp, #12
    696a:	4621      	mov	r1, r4
    696c:	4630      	mov	r0, r6
    696e:	f7ff feef 	bl	6750 <_printf_common>
    6972:	3001      	adds	r0, #1
    6974:	d155      	bne.n	6a22 <_printf_i+0x1e6>
    6976:	f04f 30ff 	mov.w	r0, #4294967295
    697a:	b005      	add	sp, #20
    697c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6980:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    6984:	493c      	ldr	r1, [pc, #240]	; (6a78 <_printf_i+0x23c>)
    6986:	6822      	ldr	r2, [r4, #0]
    6988:	6818      	ldr	r0, [r3, #0]
    698a:	f012 0f80 	tst.w	r2, #128	; 0x80
    698e:	f100 0504 	add.w	r5, r0, #4
    6992:	601d      	str	r5, [r3, #0]
    6994:	d001      	beq.n	699a <_printf_i+0x15e>
    6996:	6803      	ldr	r3, [r0, #0]
    6998:	e002      	b.n	69a0 <_printf_i+0x164>
    699a:	0655      	lsls	r5, r2, #25
    699c:	d5fb      	bpl.n	6996 <_printf_i+0x15a>
    699e:	8803      	ldrh	r3, [r0, #0]
    69a0:	07d0      	lsls	r0, r2, #31
    69a2:	bf44      	itt	mi
    69a4:	f042 0220 	orrmi.w	r2, r2, #32
    69a8:	6022      	strmi	r2, [r4, #0]
    69aa:	b91b      	cbnz	r3, 69b4 <_printf_i+0x178>
    69ac:	6822      	ldr	r2, [r4, #0]
    69ae:	f022 0220 	bic.w	r2, r2, #32
    69b2:	6022      	str	r2, [r4, #0]
    69b4:	2210      	movs	r2, #16
    69b6:	e7b1      	b.n	691c <_printf_i+0xe0>
    69b8:	4675      	mov	r5, lr
    69ba:	fbb3 f0f2 	udiv	r0, r3, r2
    69be:	fb02 3310 	mls	r3, r2, r0, r3
    69c2:	5ccb      	ldrb	r3, [r1, r3]
    69c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
    69c8:	4603      	mov	r3, r0
    69ca:	2800      	cmp	r0, #0
    69cc:	d1f5      	bne.n	69ba <_printf_i+0x17e>
    69ce:	e7b7      	b.n	6940 <_printf_i+0x104>
    69d0:	6808      	ldr	r0, [r1, #0]
    69d2:	681a      	ldr	r2, [r3, #0]
    69d4:	6949      	ldr	r1, [r1, #20]
    69d6:	f010 0f80 	tst.w	r0, #128	; 0x80
    69da:	d004      	beq.n	69e6 <_printf_i+0x1aa>
    69dc:	1d10      	adds	r0, r2, #4
    69de:	6018      	str	r0, [r3, #0]
    69e0:	6813      	ldr	r3, [r2, #0]
    69e2:	6019      	str	r1, [r3, #0]
    69e4:	e007      	b.n	69f6 <_printf_i+0x1ba>
    69e6:	f010 0f40 	tst.w	r0, #64	; 0x40
    69ea:	f102 0004 	add.w	r0, r2, #4
    69ee:	6018      	str	r0, [r3, #0]
    69f0:	6813      	ldr	r3, [r2, #0]
    69f2:	d0f6      	beq.n	69e2 <_printf_i+0x1a6>
    69f4:	8019      	strh	r1, [r3, #0]
    69f6:	2300      	movs	r3, #0
    69f8:	6123      	str	r3, [r4, #16]
    69fa:	4675      	mov	r5, lr
    69fc:	e7b1      	b.n	6962 <_printf_i+0x126>
    69fe:	681a      	ldr	r2, [r3, #0]
    6a00:	1d11      	adds	r1, r2, #4
    6a02:	6019      	str	r1, [r3, #0]
    6a04:	6815      	ldr	r5, [r2, #0]
    6a06:	6862      	ldr	r2, [r4, #4]
    6a08:	2100      	movs	r1, #0
    6a0a:	4628      	mov	r0, r5
    6a0c:	f000 f838 	bl	6a80 <memchr>
    6a10:	b108      	cbz	r0, 6a16 <_printf_i+0x1da>
    6a12:	1b40      	subs	r0, r0, r5
    6a14:	6060      	str	r0, [r4, #4]
    6a16:	6863      	ldr	r3, [r4, #4]
    6a18:	6123      	str	r3, [r4, #16]
    6a1a:	2300      	movs	r3, #0
    6a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    6a20:	e79f      	b.n	6962 <_printf_i+0x126>
    6a22:	6923      	ldr	r3, [r4, #16]
    6a24:	462a      	mov	r2, r5
    6a26:	4639      	mov	r1, r7
    6a28:	4630      	mov	r0, r6
    6a2a:	47c0      	blx	r8
    6a2c:	3001      	adds	r0, #1
    6a2e:	d0a2      	beq.n	6976 <_printf_i+0x13a>
    6a30:	6823      	ldr	r3, [r4, #0]
    6a32:	079b      	lsls	r3, r3, #30
    6a34:	d507      	bpl.n	6a46 <_printf_i+0x20a>
    6a36:	2500      	movs	r5, #0
    6a38:	f104 0919 	add.w	r9, r4, #25
    6a3c:	68e3      	ldr	r3, [r4, #12]
    6a3e:	9a03      	ldr	r2, [sp, #12]
    6a40:	1a9b      	subs	r3, r3, r2
    6a42:	429d      	cmp	r5, r3
    6a44:	db05      	blt.n	6a52 <_printf_i+0x216>
    6a46:	68e0      	ldr	r0, [r4, #12]
    6a48:	9b03      	ldr	r3, [sp, #12]
    6a4a:	4298      	cmp	r0, r3
    6a4c:	bfb8      	it	lt
    6a4e:	4618      	movlt	r0, r3
    6a50:	e793      	b.n	697a <_printf_i+0x13e>
    6a52:	2301      	movs	r3, #1
    6a54:	464a      	mov	r2, r9
    6a56:	4639      	mov	r1, r7
    6a58:	4630      	mov	r0, r6
    6a5a:	47c0      	blx	r8
    6a5c:	3001      	adds	r0, #1
    6a5e:	d08a      	beq.n	6976 <_printf_i+0x13a>
    6a60:	3501      	adds	r5, #1
    6a62:	e7eb      	b.n	6a3c <_printf_i+0x200>
    6a64:	2b00      	cmp	r3, #0
    6a66:	d1a7      	bne.n	69b8 <_printf_i+0x17c>
    6a68:	780b      	ldrb	r3, [r1, #0]
    6a6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    6a6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
    6a72:	e765      	b.n	6940 <_printf_i+0x104>
    6a74:	00008336 	.word	0x00008336
    6a78:	00008325 	.word	0x00008325
    6a7c:	00000000 	.word	0x00000000

00006a80 <memchr>:
    6a80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6a84:	2a10      	cmp	r2, #16
    6a86:	db2b      	blt.n	6ae0 <memchr+0x60>
    6a88:	f010 0f07 	tst.w	r0, #7
    6a8c:	d008      	beq.n	6aa0 <memchr+0x20>
    6a8e:	f810 3b01 	ldrb.w	r3, [r0], #1
    6a92:	3a01      	subs	r2, #1
    6a94:	428b      	cmp	r3, r1
    6a96:	d02d      	beq.n	6af4 <memchr+0x74>
    6a98:	f010 0f07 	tst.w	r0, #7
    6a9c:	b342      	cbz	r2, 6af0 <memchr+0x70>
    6a9e:	d1f6      	bne.n	6a8e <memchr+0xe>
    6aa0:	b4f0      	push	{r4, r5, r6, r7}
    6aa2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    6aa6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    6aaa:	f022 0407 	bic.w	r4, r2, #7
    6aae:	f07f 0700 	mvns.w	r7, #0
    6ab2:	2300      	movs	r3, #0
    6ab4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    6ab8:	3c08      	subs	r4, #8
    6aba:	ea85 0501 	eor.w	r5, r5, r1
    6abe:	ea86 0601 	eor.w	r6, r6, r1
    6ac2:	fa85 f547 	uadd8	r5, r5, r7
    6ac6:	faa3 f587 	sel	r5, r3, r7
    6aca:	fa86 f647 	uadd8	r6, r6, r7
    6ace:	faa5 f687 	sel	r6, r5, r7
    6ad2:	b98e      	cbnz	r6, 6af8 <memchr+0x78>
    6ad4:	d1ee      	bne.n	6ab4 <memchr+0x34>
    6ad6:	bcf0      	pop	{r4, r5, r6, r7}
    6ad8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6adc:	f002 0207 	and.w	r2, r2, #7
    6ae0:	b132      	cbz	r2, 6af0 <memchr+0x70>
    6ae2:	f810 3b01 	ldrb.w	r3, [r0], #1
    6ae6:	3a01      	subs	r2, #1
    6ae8:	ea83 0301 	eor.w	r3, r3, r1
    6aec:	b113      	cbz	r3, 6af4 <memchr+0x74>
    6aee:	d1f8      	bne.n	6ae2 <memchr+0x62>
    6af0:	2000      	movs	r0, #0
    6af2:	4770      	bx	lr
    6af4:	3801      	subs	r0, #1
    6af6:	4770      	bx	lr
    6af8:	2d00      	cmp	r5, #0
    6afa:	bf06      	itte	eq
    6afc:	4635      	moveq	r5, r6
    6afe:	3803      	subeq	r0, #3
    6b00:	3807      	subne	r0, #7
    6b02:	f015 0f01 	tst.w	r5, #1
    6b06:	d107      	bne.n	6b18 <memchr+0x98>
    6b08:	3001      	adds	r0, #1
    6b0a:	f415 7f80 	tst.w	r5, #256	; 0x100
    6b0e:	bf02      	ittt	eq
    6b10:	3001      	addeq	r0, #1
    6b12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    6b16:	3001      	addeq	r0, #1
    6b18:	bcf0      	pop	{r4, r5, r6, r7}
    6b1a:	3801      	subs	r0, #1
    6b1c:	4770      	bx	lr
    6b1e:	bf00      	nop

00006b20 <_realloc_r>:
    6b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b22:	4607      	mov	r7, r0
    6b24:	4614      	mov	r4, r2
    6b26:	460e      	mov	r6, r1
    6b28:	b921      	cbnz	r1, 6b34 <_realloc_r+0x14>
    6b2a:	4611      	mov	r1, r2
    6b2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6b30:	f7ff bbf4 	b.w	631c <_malloc_r>
    6b34:	b922      	cbnz	r2, 6b40 <_realloc_r+0x20>
    6b36:	f7ff fba3 	bl	6280 <_free_r>
    6b3a:	4625      	mov	r5, r4
    6b3c:	4628      	mov	r0, r5
    6b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b40:	f000 f814 	bl	6b6c <_malloc_usable_size_r>
    6b44:	4284      	cmp	r4, r0
    6b46:	d90f      	bls.n	6b68 <_realloc_r+0x48>
    6b48:	4621      	mov	r1, r4
    6b4a:	4638      	mov	r0, r7
    6b4c:	f7ff fbe6 	bl	631c <_malloc_r>
    6b50:	4605      	mov	r5, r0
    6b52:	2800      	cmp	r0, #0
    6b54:	d0f2      	beq.n	6b3c <_realloc_r+0x1c>
    6b56:	4631      	mov	r1, r6
    6b58:	4622      	mov	r2, r4
    6b5a:	f7ff fb64 	bl	6226 <memcpy>
    6b5e:	4631      	mov	r1, r6
    6b60:	4638      	mov	r0, r7
    6b62:	f7ff fb8d 	bl	6280 <_free_r>
    6b66:	e7e9      	b.n	6b3c <_realloc_r+0x1c>
    6b68:	4635      	mov	r5, r6
    6b6a:	e7e7      	b.n	6b3c <_realloc_r+0x1c>

00006b6c <_malloc_usable_size_r>:
    6b6c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    6b70:	2800      	cmp	r0, #0
    6b72:	f1a0 0004 	sub.w	r0, r0, #4
    6b76:	bfbc      	itt	lt
    6b78:	580b      	ldrlt	r3, [r1, r0]
    6b7a:	18c0      	addlt	r0, r0, r3
    6b7c:	4770      	bx	lr
    6b7e:	0000      	movs	r0, r0
    6b80:	2a2a2a2a 	.word	0x2a2a2a2a
    6b84:	2a2a2a2a 	.word	0x2a2a2a2a
    6b88:	2a2a2a2a 	.word	0x2a2a2a2a
    6b8c:	2a2a2a2a 	.word	0x2a2a2a2a
    6b90:	2a2a2a2a 	.word	0x2a2a2a2a
    6b94:	2a2a2a2a 	.word	0x2a2a2a2a
    6b98:	2a2a2a2a 	.word	0x2a2a2a2a
    6b9c:	2a2a2a2a 	.word	0x2a2a2a2a
    6ba0:	2a2a2a2a 	.word	0x2a2a2a2a
    6ba4:	2a2a2a2a 	.word	0x2a2a2a2a
    6ba8:	2a2a2a2a 	.word	0x2a2a2a2a
    6bac:	2a2a2a2a 	.word	0x2a2a2a2a
    6bb0:	2a2a2a2a 	.word	0x2a2a2a2a
    6bb4:	2a2a2a2a 	.word	0x2a2a2a2a
    6bb8:	00002a2a 	.word	0x00002a2a
    6bbc:	2a2a2a2a 	.word	0x2a2a2a2a
    6bc0:	2a2a2a2a 	.word	0x2a2a2a2a
    6bc4:	2a2a2a2a 	.word	0x2a2a2a2a
    6bc8:	532a2a2a 	.word	0x532a2a2a
    6bcc:	4b434154 	.word	0x4b434154
    6bd0:	45564f20 	.word	0x45564f20
    6bd4:	4f4c4652 	.word	0x4f4c4652
    6bd8:	45442057 	.word	0x45442057
    6bdc:	54434554 	.word	0x54434554
    6be0:	2a2a4445 	.word	0x2a2a4445
    6be4:	2a2a2a2a 	.word	0x2a2a2a2a
    6be8:	2a2a2a2a 	.word	0x2a2a2a2a
    6bec:	2a2a2a2a 	.word	0x2a2a2a2a
    6bf0:	2a2a2a2a 	.word	0x2a2a2a2a
    6bf4:	00002a2a 	.word	0x00002a2a
    6bf8:	6b736154 	.word	0x6b736154
    6bfc:	6e614820 	.word	0x6e614820
    6c00:	20656c64 	.word	0x20656c64
    6c04:	6425202d 	.word	0x6425202d
    6c08:	00000a0d 	.word	0x00000a0d

00006c0c <ModemCmdData>:
    6c0c:	00000200 000076f8 00000000 00001979     .....v......y...
    6c1c:	00000000 00000001 000070ec 00020003     .........p......
    6c2c:	00001979 00000009 00000002 000070f0     y............p..
    6c3c:	000f0008 00001979 0000001b 00000003     ....y...........
    6c4c:	000070fc 000e000c 00001979 0000001e     .p......y.......
    6c5c:	00000004 0000710c 000c0008 00001979     .....q......y...
    6c6c:	00000018 00000005 00007118 00080005     .........q......
    6c7c:	00001979 00000011 00000006 00007124     y...........$q..
    6c8c:	000b000a 00001979 00000019 00000007     ....y...........
    6c9c:	00007130 0015000a 00001979 00000023     0q......y...#...
    6cac:	00000008 0000713c 00020005 00001979     ....<q......y...
    6cbc:	0000000b 00000109 00007144 000c0027     ........Dq..'...
    6ccc:	00001979 00000037 0000010a 0000716c     y...7.......lq..
    6cdc:	00020012 00001979 00000018 0000010b     ....y...........
    6cec:	00007180 00020012 00001979 00000018     .q......y.......
    6cfc:	0000010c 00007194 00020012 00001979     .....q......y...
    6d0c:	00000018 0000010d 000071a8 00020012     .........q......
    6d1c:	00001979 00000018 0000010e 000071bc     y............q..
    6d2c:	00020012 00001979 00000018 0000010f     ....y...........
    6d3c:	000071d0 00020012 00001979 00000018     .q......y.......
    6d4c:	00000110 000071e4 00020012 00001979     .....q......y...
    6d5c:	00000018 00000111 000071f8 00020012     .........q......
    6d6c:	00001979 00000018 00000112 0000720c     y............r..
    6d7c:	00020012 00001979 00000018 00000113     ....y...........
    6d8c:	00007220 00020013 00001979 00000019      r......y.......
    6d9c:	00000114 00007234 0002001f 00001979     ....4r......y...
    6dac:	00000025 00000115 00007254 00020023     %.......Tr..#...
    6dbc:	00001979 00000029 00000116 00007278     y...).......xr..
    6dcc:	0002001a 00001979 00000020 00000117     ....y... .......
    6ddc:	20000000 00070011 00001979 0000001c     ... ....y.......
    6dec:	00000118 200001ac 00bf003a 00001979     ....... :...y...
    6dfc:	000000fd 00000119 00007294 00020010     .........r......
    6e0c:	00001979 00000016 0000011a 000072a8     y............r..
    6e1c:	00020010 00001979 00000016 0000011b     ....y...........
    6e2c:	000072bc 0002000b 00001979 00000011     .r......y.......
	...
    70bc:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    70cc:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    70dc:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    70ec:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    70fc:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    710c:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    711c:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    712c:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    713c:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    714c:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    715c:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    716c:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    717c:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    718c:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    719c:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    71ac:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    71bc:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    71cc:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    71dc:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    71ec:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    71fc:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    720c:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    721c:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    722c:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    723c:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    724c:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    725c:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    726c:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    727c:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    728c:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    729c:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    72ac:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    72bc:	432b5441 54544147 000d303d 6f727245     AT+CGATT=0..Erro
    72cc:	48203a72 20706165 6f6c6c61 69746163     r: Heap allocati
    72dc:	66206e6f 7020726f 65737261 74616420     on for parse dat
    72ec:	75622061 72656666 69616620 0064656c     a buffer failed.
    72fc:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    730c:	76206f74 66697265 68742079 6f632065     to verify the co
    731c:	6e616d6d 74732064 676e6972 72756420     mmand string dur
    732c:	20676e69 73726170 00676e69 6f727245     ing parsing.Erro
    733c:	4e203a72 6120746f 20656c62 72206f74     r: Not able to r
    734c:	20646165 61746164 6f726620 6572206d     ead data from re
    735c:	76696563 69722065 6220676e 65666675     ceive ring buffe
    736c:	75642072 676e6972 72617020 00726573     r during parser.
    737c:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    738c:	69746163 66206e6f 7220726f 6f707365     cation for respo
    739c:	2065736e 61746164 66756220 20726566     nse data buffer 
    73ac:	6c696166 00006465 6c696146 74206465     failed..Failed t
    73bc:	6573206f 7420746e 53206568 69737365     o sent the Sessi
    73cc:	43206e6f 65736f6c 71657220 74736575     on Close request
    73dc:	206f7420 54207854 006b7361 6f727245      to Tx Task.Erro
    73ec:	203a2072 20746f4e 656c6261 206f7420     r : Not able to 
    73fc:	6174626f 54206e69 65532078 6170616d     obtain Tx Semapa
    740c:	65726f68 00000000 6e617254 74696d73     hore....Transmit
    741c:	65755120 69206575 6f6e2073 6d652074      Queue is not em
    742c:	00797470 4d206f4e 2065726f 69746341     pty.No More Acti
    743c:	43206576 656e6e6f 6f697463 7420736e     ve Connections t
    744c:	6c63206f 0065736f 736f6c43 41206465     o close.Closed A
    745c:	41206c6c 76697463 6f432065 63656e6e     ll Active Connec
    746c:	6e6f6974 000a0d73 6c696146 74206465     tions...Failed t
    747c:	6572206f 76696563 6f632065 63656e6e     o receive connec
    748c:	6e6f6974 73657220 736e6f70 6e692065     tion response in
    749c:	20585220 65646f6d 00000000 6c696146      RX mode....Fail
    74ac:	74206465 6573206f 7420746e 45206568     ed to sent the E
    74bc:	7020464f 65747461 74206e72 7854206f     OF pattern to Tx
    74cc:	73615420 0000006b 20464f45 74746150      Task...EOF Patt
    74dc:	206e7265 666e6f63 72756769 0a0d6465     ern configured..
    74ec:	00000000 6c696146 74206465 6573206f     ....Failed to se
    74fc:	6120746e 73656363 6f702073 20746e69     nt access point 
    750c:	20646d63 54206f74 61542078 00006b73     cmd to Tx Task..
    751c:	65636341 50207373 746e696f 6e6f6320     Access Point con
    752c:	75676966 0d646572 0000000a 6c696146     figured.....Fail
    753c:	74206465 6573206f 6320746e 656e6e6f     ed to sent conne
    754c:	6f697463 6974206e 2072656d 20646d63     ction timer cmd 
    755c:	54206f74 61542078 00006b73 6e6e6f43     to Tx Task..Conn
    756c:	69746365 54206e6f 72656d69 6f632073     ection Timers co
    757c:	6769666e 64657275 00000a0d 756f6c43     nfigured....Clou
    758c:	65532064 72657672 6e6f6320 75676966     d Server configu
    759c:	0d646572 0000000a 4e4e4f43 00544345     red.....CONNECT.
    75ac:	63637553 66737365 796c6c75 74734520     Successfully Est
    75bc:	696c6261 64656873 65687420 6e6f6320     ablished the con
    75cc:	7463656e 206e6f69 68746977 72657320     nection with ser
    75dc:	0d726576 0000000a 736f6c43 20676e69     ver.....Closing 
    75ec:	69746341 43206576 656e6e6f 6f697463     Active Connectio
    75fc:	0a0d736e 00000000 4e4e4f43 0d544345     ns......CONNECT.
    760c:	5454480a 2e312f50 30322031 4b4f2030     .HTTP/1.1 200 OK
    761c:	00000000 65500a0d 726f6672 676e696d     ......Performing
    762c:	65687420 72724520 5220726f 766f6365      the Error Recov
    763c:	0d797265 0000000a 736f6c43 20676e69     ery.....Closing 
    764c:	20656874 69746361 63206576 656e6e6f     the active conne
    765c:	6f697463 0a0d2e6e 00000000 626f7250     ction.......Prob
    766c:	206d656c 41206e69 206f7475 6f636552     lem in Auto Reco
    767c:	79726576 6552202e 746f6f62 20676e69     very. Rebooting 
    768c:	20656874 74737973 2e2e6d65 0a0d2e2e     the system......
    769c:	00000000 756f7242 20746867 20656874     ....Brought the 
    76ac:	20504450 6e6e6f63 69746365 44206e6f     PDP connection D
    76bc:	0d4e574f 0000000a 61746544 64656863     OWN.....Detached
    76cc:	65687420 50445020 0d535020 0000000a      the PDP PS.....
    76dc:	6f727245 65522072 65766f63 43207972     Error Recovery C
    76ec:	6c706d6f 64657465 0a0d0a0d 00000000     ompleted........
    76fc:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    770c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    771c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    772c:	0d0a0d3d 0000000a 61747345 73696c62     =.......Establis
    773c:	676e6968 6e206120 63207765 656e6e6f     hing a new conne
    774c:	6f697463 6977206e 73206874 65767265     ction with serve
    775c:	000a0d72 74737953 69206d65 75612073     r...System is au
    776c:	72206f74 766f6365 64657265 726f6620     to recovered for
    777c:	726f6d20 68742065 33206e61 6d697420      more than 3 tim
    778c:	0d2e7365 0000000a 66726550 696d726f     es......Performi
    779c:	6120676e 73797320 206d6574 74736572     ng a system rest
    77ac:	2e747261 2e2e2e2e 2e2e2e2e 2e2e2e2e     art.............
    77bc:	2e2e2e2e 0d2e2e2e 0000000a 45444f4d     ............MODE
    77cc:	4144204d 55204154 20545241 52455328     M DATA UART (SER
    77dc:	334d4f43 6e692029 61697469 657a696c     COM3) initialize
    77ec:	00000064 43524553 20334d4f 4f495250     d...SERCOM3 PRIO
    77fc:	59544952 00000000 6c696146 74206465     RITY....Failed t
    780c:	6e69206f 61697469 657a696c 65687420     o initialize the
    781c:	444f4d20 44204d45 20415441 54524155      MODEM DATA UART
    782c:	00000000 746e6553 65687420 61694420     ....Sent the Dia
    783c:	61642067 74206174 7854206f 73615420     g data to Tx Tas
    784c:	0000006b 6c696146 74206465 6573206f     k...Failed to se
    785c:	7420746e 44206568 20676169 61746164     nt the Diag data
    786c:	206f7420 54207854 006b7361 72746552      to Tx Task.Retr
    787c:	65766569 68742064 6f4d2065 206d6564     ieved the Modem 
    788c:	49454d49 6d754e20 00726562 72746552     IMEI Number.Retr
    789c:	65766569 68742064 6f4d2065 206d6564     ieved the Modem 
    78ac:	69726573 4e206c61 65626d75 00000072     serial Number...
    78bc:	72756f48 5320796c 65747379 6552206d     Hourly System Re
    78cc:	72617473 69742074 2072656d 69707865     start timer expi
    78dc:	2e646572 62655220 69746f6f 7420676e     red. Rebooting t
    78ec:	73206568 65747379 0a0d2e6d 00000000     he system.......
    78fc:	72756f48 7953796c 6d657473 74736552     HourlySystemRest
    790c:	54747261 72656d69 00000000 72756f48     artTimer....Hour
    791c:	4d20796c 6d65646f 73655220 74726174     ly Modem Restart
    792c:	6d697420 69207265 74732073 65747261      timer is starte
    793c:	0a0d2e64 00000000 65636552 64657669     d.......Received
    794c:	6e6f4320 7463656e 206e6f69 70736572      Connection resp
    795c:	65736e6f 206e6920 646e6168 0000656c     onse in handle..
    796c:	63637553 66737365 796c6c75 736f7020     Successfully pos
    797c:	20646574 6e6e6f63 69746365 52206e6f     ted connection R
    798c:	6f707365 2065736e 51206f74 65756575     esponse to Queue
    799c:	00000000 6c696146 74206465 6f70206f     ....Failed to po
    79ac:	74207473 63206568 656e6e6f 6f697463     st the connectio
    79bc:	6552206e 6e6f7073 74206573 7551206f     n Response to Qu
    79cc:	00657565 6f727245 203a2072 6d6d6f43     eue.Error : Comm
    79dc:	20646e61 70736552 65736e6f 65755120     and Response Que
    79ec:	69206575 6f6e2073 6d652074 00797470     ue is not empty.
    79fc:	4f525245 52203a52 69656365 20646576     ERROR: Received 
    7a0c:	65206e61 7974706d 73657220 736e6f70     an empty respons
    7a1c:	74732065 676e6972 206e6920 6d6d6f63     e string in comm
    7a2c:	20646e61 70736572 65736e6f 6e616820     and response han
    7a3c:	72656c64 00000000 6c430a0d 6465736f     dler......Closed
    7a4c:	206e6120 69746361 63206576 656e6e6f      an active conne
    7a5c:	6f697463 0000006e 72656854 73692065     ction...There is
    7a6c:	206f6e20 6e6e6f63 69746365 65206e6f      no connection e
    7a7c:	62617473 6873696c 77206465 20687469     stablished with 
    7a8c:	73696874 73657320 6e6f6973 2e444920     this session ID.
    7a9c:	00002e2e 63656843 676e696b 726f6620     ....Checking for
    7aac:	206e6120 69746361 63206576 656e6e6f      an active conne
    7abc:	6f697463 6977206e 6e206874 20747865     ction with next 
    7acc:	73736573 206e6f69 2e2e4449 00000a2e     session ID......
    7adc:	4b206e49 54544150 204e5245 646e6168     In KPATTERN hand
    7aec:	0072656c 4b206e49 43584e43 68204746     ler.In KCNXCFG h
    7afc:	6c646e61 00007265 4b206e49 54584e43     andler..In KCNXT
    7b0c:	52454d49 6e616820 72656c64 00000000     IMER handler....
    7b1c:	4b206e49 50545448 20474643 646e6168     In KHTTPCFG hand
    7b2c:	0072656c 4b206e49 50545448 41454820     ler.In KHTTP HEA
    7b3c:	20524544 646e6168 0072656c 64616548     DER handler.Head
    7b4c:	52207265 6f707365 2065736e 00006b4f     er Response Ok..
    7b5c:	64616548 52207265 6f707365 2065736e     Header Response 
    7b6c:	20746f4e 00006b4f 000a0a0d 54206e49     Not Ok......In T
    7b7c:	494d5245 4554414e 41454820 20524544     ERMINATE HEADER 
    7b8c:	646e6168 0072656c 69746f4e 61636966     handler.Notifica
    7b9c:	6e6f6974 63655220 65766965 6f742064     tion Received to
    7bac:	20785220 6b736154 6f726620 5349206d      Rx Task from IS
    7bbc:	00000052 4f525245 43203a52 616d6d6f     R...ERROR: Comma
    7bcc:	5020646e 69737261 4620676e 656c6961     nd Parsing Faile
    7bdc:	00000064 73207854 61697265 6544206c     d...Tx serial De
    7bec:	20677562 656e6f44 00000a0d 44207852     bug Done....Rx D
    7bfc:	0d656e6f 0000000a 2d207325 20642520     one.....%s - %d 
    7c0c:	00000a0d 682f2e2e 692f6c61 756c636e     ....../hal/inclu
    7c1c:	682f6564 775f6c61 682e7464 00000000     de/hal_wdt.h....
    7c2c:	20544457 74696e49 696c6169 00646573     WDT Initialised.
    7c3c:	20544457 6c696146 74206465 6e69206f     WDT Failed to in
    7c4c:	61697469 657a696c 00000000 682f2e2e     itialize....../h
    7c5c:	732f6c61 682f6372 615f6c61 79735f63     al/src/hal_ac_sy
    7c6c:	632e636e 00000000 682f2e2e 732f6c61     nc.c....../hal/s
    7c7c:	682f6372 615f6c61 735f6364 2e636e79     rc/hal_adc_sync.
    7c8c:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
    7c9c:	645f6c61 735f6361 2e636e79 00000063     al_dac_sync.c...
    7cac:	682f2e2e 732f6c61 682f6372 665f6c61     ../hal/src/hal_f
    7cbc:	6873616c 0000632e 682f2e2e 732f6c61     lash.c..../hal/s
    7ccc:	682f6372 705f6c61 632e6d77 00000000     rc/hal_pwm.c....
    7cdc:	682f2e2e 732f6c61 682f6372 745f6c61     ../hal/src/hal_t
    7cec:	72656d69 0000632e 682f2e2e 752f6c61     imer.c..../hal/u
    7cfc:	736c6974 6372732f 6974752f 6c5f736c     tils/src/utils_l
    7d0c:	2e747369 00000063 682f2e2e 752f6c61     ist.c...../hal/u
    7d1c:	736c6974 6372732f 6974752f 725f736c     tils/src/utils_r
    7d2c:	62676e69 65666675 00632e72 682f2e2e     ingbuffer.c.../h
    7d3c:	612f6c70 70682f63 63615f6c 0000632e     pl/ac/hpl_ac.c..

00007d4c <_adcs>:
    7d4c:	00c00000 00830002 00001900 00000000     ................
    7d5c:	00000000 00010001 00000000 00000000     ................
	...
    7d78:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    7d88:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    7d98:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00007da8 <_cfgs>:
	...

00007ea8 <user_mux_confs>:
	...

00007eec <channel_confs>:
	...

00007f2c <interrupt_cfg>:
	...
    7fac:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    7fbc:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    7fcc:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    7fdc:	43000000 43000400                       ...C...C

00007fe4 <_usarts>:
    7fe4:	00000003 40200004 00030000 00700002     ...... @......p.
    7ff4:	0000f62b 00000000 00000004 40300184     +.............0@
    8004:	00030300 00700002 0000ff2e 00000000     ......p.........
    8014:	00000005 40300004 00030000 00700002     ......0@......p.
    8024:	0000f62b 00000000                       +.......

0000802c <_i2cms>:
	...

00008044 <sercomspi_regs>:
	...
    8058:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    8068:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    8078:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00008088 <_tccs>:
    8088:	00000000 00000300 00000000 00000000     ................
    8098:	00001770 00000000 00000000 00000000     p...............
    80a8:	00000000 00000001 00000300 00000000     ................
    80b8:	00000000 00001770 00000000 00000000     ....p...........
	...
    80d0:	00000002 00000300 00000000 00000000     ................
    80e0:	00001770 00000000 00000000 00000000     p...............
    80f0:	00000000 00000003 00000300 00000000     ................
    8100:	00000000 00001770 00000000 00000000     ....p...........
	...
    8118:	00000004 00000300 00000000 00000000     ................
    8128:	00001770 00000000 00000000 00000000     p...............
    8138:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    8148:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    8158:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    8168:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    8178:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    8188:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    8198:	26207854 20785220 75657551 61207365     Tx & Rx Queues a
    81a8:	63206572 74616572 00006465 616d6553     re created..Sema
    81b8:	726f6870 61207365 4d20646e 78657475     phores and Mutex
    81c8:	61207365 63206572 74616572 00006465     es are created..
    81d8:	70736944 68637461 6b736154 00000000     DispatchTask....
    81e8:	65646f4d 7361546d 0000006b 65646f4d     ModemTask...Mode
    81f8:	5478526d 006b7361 65646f4d 6f72506d     mRxTask.ModemPro
    8208:	73736563 6b736154 00000000 65646f4d     cessTask....Mode
    8218:	6169446d 73615467 0000006b 63637553     mDiagTask...Succ
    8228:	66737365 796c6c75 65724320 64657461     essfully Created
    8238:	65687420 73615420 0000736b 65657246      the Tasks..Free
    8248:	4f545220 63532053 75646568 2072656c      RTOS Scheduler 
    8258:	20746f6e 72617473 00646574 6c696146     not started.Fail
    8268:	74206465 7263206f 65746165 73617420     ed to create tas
    8278:	0000736b 6f727245 53203a72 64656863     ks..Error: Sched
    8288:	72656c75 69786520 00646574 454c4449     uler exited.IDLE
    8298:	00000000 09632509 25097525 75250975     .....%c.%u.%u.%u
    82a8:	00000a0d 20726d54 00637653              ....Tmr Svc.

000082b4 <__sf_fake_stderr>:
	...

000082d4 <__sf_fake_stdin>:
	...

000082f4 <__sf_fake_stdout>:
	...
    8314:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    8324:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    8334:	31300046 35343332 39383736 64636261     F.0123456789abcd
    8344:	00006665                                ef..

00008348 <_init>:
    8348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    834a:	bf00      	nop
    834c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    834e:	bc08      	pop	{r3}
    8350:	469e      	mov	lr, r3
    8352:	4770      	bx	lr

00008354 <__init_array_start>:
    8354:	00000289 	.word	0x00000289

00008358 <_fini>:
    8358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    835a:	bf00      	nop
    835c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    835e:	bc08      	pop	{r3}
    8360:	469e      	mov	lr, r3
    8362:	4770      	bx	lr

00008364 <__fini_array_start>:
    8364:	00000265 	.word	0x00000265
