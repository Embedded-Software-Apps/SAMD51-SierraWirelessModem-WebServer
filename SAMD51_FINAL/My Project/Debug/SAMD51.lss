
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000056f8  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000158  20000000  000056f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020158  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020158  2**0
                  CONTENTS
  4 .bss          00002d40  20000160  00005860  00020160  2**4
                  ALLOC
  5 .stack        00010000  20002ea0  000085a0  00020160  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020186  2**0
                  CONTENTS, READONLY
  8 .debug_info   00054904  00000000  00000000  000201df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000838c  00000000  00000000  00074ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019cd2  00000000  00000000  0007ce6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000019b0  00000000  00000000  00096b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002000  00000000  00000000  000984f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001898e  00000000  00000000  0009a4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028f11  00000000  00000000  000b2e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00106946  00000000  00000000  000dbd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000044f8  00000000  00000000  001e26d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 2e 01 20 a9 08 00 00 a5 08 00 00 a5 08 00 00     ... ............
      10:	a5 08 00 00 a5 08 00 00 a5 08 00 00 00 00 00 00     ................
	...
      2c:	11 2c 00 00 a5 08 00 00 00 00 00 00 b1 2c 00 00     .,...........,..
      3c:	15 2d 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     .-..............
      4c:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
      5c:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
      6c:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
      7c:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
      8c:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
      9c:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
      ac:	a5 08 00 00 a5 08 00 00 89 1b 00 00 9d 1b 00 00     ................
      bc:	19 19 00 00 25 19 00 00 31 19 00 00 3d 19 00 00     ....%...1...=...
      cc:	49 19 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     I...............
      dc:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
      ec:	a5 08 00 00 00 00 00 00 99 1c 00 00 a5 08 00 00     ................
      fc:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
     10c:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
     11c:	a5 08 00 00 a5 08 00 00 a5 08 00 00 d5 03 00 00     ................
     12c:	e1 03 00 00 ed 03 00 00 a5 08 00 00 a5 08 00 00     ................
     13c:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
     14c:	a5 08 00 00 61 07 00 00 a5 08 00 00 00 00 00 00     ....a...........
	...
     180:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
     190:	00 00 00 00 29 22 00 00 a5 08 00 00 a5 08 00 00     ....)"..........
     1a0:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
     1b0:	3d 22 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ="..............
     1c0:	a5 08 00 00 51 22 00 00 a5 08 00 00 a5 08 00 00     ....Q"..........
     1d0:	a5 08 00 00 65 22 00 00 a5 08 00 00 a5 08 00 00     ....e"..........
     1e0:	79 22 00 00 a5 08 00 00 a5 08 00 00 6d 27 00 00     y"..........m'..
     1f0:	81 27 00 00 95 27 00 00 a9 27 00 00 bd 27 00 00     .'...'...'...'..
     200:	d1 27 00 00 00 00 00 00 00 00 00 00 a5 08 00 00     .'..............
     210:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
     220:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
     230:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
     240:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
     250:	a5 08 00 00 a5 08 00 00 a5 08 00 00 a5 08 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000160 	.word	0x20000160
     280:	00000000 	.word	0x00000000
     284:	000056f8 	.word	0x000056f8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000056f8 	.word	0x000056f8
     2c4:	20000164 	.word	0x20000164
     2c8:	000056f8 	.word	0x000056f8
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Apps/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b09a      	sub	sp, #104	; 0x68
     2d4:	4606      	mov	r6, r0
     2d6:	460f      	mov	r7, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
     2d8:	2264      	movs	r2, #100	; 0x64
     2da:	2100      	movs	r1, #0
     2dc:	a801      	add	r0, sp, #4
     2de:	4b0d      	ldr	r3, [pc, #52]	; (314 <vApplicationStackOverflowHook+0x44>)
     2e0:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e2:	4d0d      	ldr	r5, [pc, #52]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e4:	4628      	mov	r0, r5
     2e6:	4c0d      	ldr	r4, [pc, #52]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2e8:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2ea:	480d      	ldr	r0, [pc, #52]	; (320 <vApplicationStackOverflowHook+0x50>)
     2ec:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ee:	4628      	mov	r0, r5
     2f0:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f2:	480c      	ldr	r0, [pc, #48]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f4:	47a0      	blx	r4
	sprintf((int8_t*)dbgBuffer," Task Handle - %d ### Task Name - %s",xTask,pcTaskName);
     2f6:	463b      	mov	r3, r7
     2f8:	4632      	mov	r2, r6
     2fa:	490b      	ldr	r1, [pc, #44]	; (328 <vApplicationStackOverflowHook+0x58>)
     2fc:	a801      	add	r0, sp, #4
     2fe:	4c0b      	ldr	r4, [pc, #44]	; (32c <vApplicationStackOverflowHook+0x5c>)
     300:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     302:	a801      	add	r0, sp, #4
     304:	4b0a      	ldr	r3, [pc, #40]	; (330 <vApplicationStackOverflowHook+0x60>)
     306:	4798      	blx	r3
     308:	b281      	uxth	r1, r0
     30a:	a801      	add	r0, sp, #4
     30c:	4b09      	ldr	r3, [pc, #36]	; (334 <vApplicationStackOverflowHook+0x64>)
     30e:	4798      	blx	r3
     310:	e7fe      	b.n	310 <vApplicationStackOverflowHook+0x40>
     312:	bf00      	nop
     314:	0000452b 	.word	0x0000452b
     318:	00004df0 	.word	0x00004df0
     31c:	00000719 	.word	0x00000719
     320:	00004e2c 	.word	0x00004e2c
     324:	00004f8c 	.word	0x00004f8c
     328:	00004e68 	.word	0x00004e68
     32c:	000046b5 	.word	0x000046b5
     330:	0000470d 	.word	0x0000470d
     334:	000006d5 	.word	0x000006d5

00000338 <DispatchTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "Apps/SerialDebug/SerialDebug.h"


void DispatchTask( void *DispatchTaskParam)
{
     338:	b570      	push	{r4, r5, r6, lr}
     33a:	b082      	sub	sp, #8
	TickType_t xLastWakeTime;
	const TickType_t xDelayMs = pdMS_TO_TICKS(10000UL);
	xLastWakeTime = xTaskGetTickCount();
     33c:	4b06      	ldr	r3, [pc, #24]	; (358 <DispatchTask+0x20>)
     33e:	4798      	blx	r3
     340:	9001      	str	r0, [sp, #4]

	while(1)
	{
		DEBUG_PRINT("Running Dispatch Task successfully");
     342:	4e06      	ldr	r6, [pc, #24]	; (35c <DispatchTask+0x24>)
     344:	4d06      	ldr	r5, [pc, #24]	; (360 <DispatchTask+0x28>)
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     346:	4c07      	ldr	r4, [pc, #28]	; (364 <DispatchTask+0x2c>)
		DEBUG_PRINT("Running Dispatch Task successfully");
     348:	4630      	mov	r0, r6
     34a:	47a8      	blx	r5
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     34c:	f242 7110 	movw	r1, #10000	; 0x2710
     350:	a801      	add	r0, sp, #4
     352:	47a0      	blx	r4
     354:	e7f8      	b.n	348 <DispatchTask+0x10>
     356:	bf00      	nop
     358:	00003a55 	.word	0x00003a55
     35c:	00004e90 	.word	0x00004e90
     360:	00000719 	.word	0x00000719
     364:	00003c95 	.word	0x00003c95

00000368 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     368:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&MODEM_DATA,SERCOM3);
     36a:	490f      	ldr	r1, [pc, #60]	; (3a8 <mdmCtrlr_DataCommInit+0x40>)
     36c:	480f      	ldr	r0, [pc, #60]	; (3ac <mdmCtrlr_DataCommInit+0x44>)
     36e:	4b10      	ldr	r3, [pc, #64]	; (3b0 <mdmCtrlr_DataCommInit+0x48>)
     370:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     372:	b118      	cbz	r0, 37c <mdmCtrlr_DataCommInit+0x14>
		_usart_async_enable(&MODEM_DATA);
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
	}
	else
	{
		DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
     374:	480f      	ldr	r0, [pc, #60]	; (3b4 <mdmCtrlr_DataCommInit+0x4c>)
     376:	4b10      	ldr	r3, [pc, #64]	; (3b8 <mdmCtrlr_DataCommInit+0x50>)
     378:	4798      	blx	r3
     37a:	bd10      	pop	{r4, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     37c:	f44f 6200 	mov.w	r2, #2048	; 0x800
     380:	490e      	ldr	r1, [pc, #56]	; (3bc <mdmCtrlr_DataCommInit+0x54>)
     382:	480f      	ldr	r0, [pc, #60]	; (3c0 <mdmCtrlr_DataCommInit+0x58>)
     384:	4b0f      	ldr	r3, [pc, #60]	; (3c4 <mdmCtrlr_DataCommInit+0x5c>)
     386:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     388:	2800      	cmp	r0, #0
     38a:	d1f3      	bne.n	374 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_DATA,USART_ASYNC_RX_DONE,true);
     38c:	4c07      	ldr	r4, [pc, #28]	; (3ac <mdmCtrlr_DataCommInit+0x44>)
     38e:	2201      	movs	r2, #1
     390:	4611      	mov	r1, r2
     392:	4620      	mov	r0, r4
     394:	4b0c      	ldr	r3, [pc, #48]	; (3c8 <mdmCtrlr_DataCommInit+0x60>)
     396:	4798      	blx	r3
		_usart_async_enable(&MODEM_DATA);
     398:	4620      	mov	r0, r4
     39a:	4b0c      	ldr	r3, [pc, #48]	; (3cc <mdmCtrlr_DataCommInit+0x64>)
     39c:	4798      	blx	r3
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
     39e:	480c      	ldr	r0, [pc, #48]	; (3d0 <mdmCtrlr_DataCommInit+0x68>)
     3a0:	4b05      	ldr	r3, [pc, #20]	; (3b8 <mdmCtrlr_DataCommInit+0x50>)
     3a2:	4798      	blx	r3
     3a4:	bd10      	pop	{r4, pc}
     3a6:	bf00      	nop
     3a8:	41014000 	.word	0x41014000
     3ac:	20000000 	.word	0x20000000
     3b0:	00001e15 	.word	0x00001e15
     3b4:	00004edc 	.word	0x00004edc
     3b8:	00000719 	.word	0x00000719
     3bc:	200024b4 	.word	0x200024b4
     3c0:	20002cb4 	.word	0x20002cb4
     3c4:	00001489 	.word	0x00001489
     3c8:	00001eb1 	.word	0x00001eb1
     3cc:	00001e79 	.word	0x00001e79
     3d0:	00004eb4 	.word	0x00004eb4

000003d4 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     3d4:	2201      	movs	r2, #1
     3d6:	4b01      	ldr	r3, [pc, #4]	; (3dc <SERCOM3_0_Handler+0x8>)
     3d8:	761a      	strb	r2, [r3, #24]
     3da:	4770      	bx	lr
     3dc:	41014000 	.word	0x41014000

000003e0 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     3e0:	2202      	movs	r2, #2
     3e2:	4b01      	ldr	r3, [pc, #4]	; (3e8 <SERCOM3_1_Handler+0x8>)
     3e4:	761a      	strb	r2, [r3, #24]
     3e6:	4770      	bx	lr
     3e8:	41014000 	.word	0x41014000

000003ec <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     3ec:	b538      	push	{r3, r4, r5, lr}
	uint8_t rcvdChar[2];
	uint8_t rxPrint[2];
	
	while (!_usart_async_is_byte_received(&MODEM_DATA));
     3ee:	4d07      	ldr	r5, [pc, #28]	; (40c <SERCOM3_2_Handler+0x20>)
     3f0:	4c07      	ldr	r4, [pc, #28]	; (410 <SERCOM3_2_Handler+0x24>)
     3f2:	4628      	mov	r0, r5
     3f4:	47a0      	blx	r4
     3f6:	2800      	cmp	r0, #0
     3f8:	d0fb      	beq.n	3f2 <SERCOM3_2_Handler+0x6>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_DATA);
     3fa:	4804      	ldr	r0, [pc, #16]	; (40c <SERCOM3_2_Handler+0x20>)
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <SERCOM3_2_Handler+0x28>)
     3fe:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
     400:	4601      	mov	r1, r0
     402:	4805      	ldr	r0, [pc, #20]	; (418 <SERCOM3_2_Handler+0x2c>)
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <SERCOM3_2_Handler+0x30>)
     406:	4798      	blx	r3
     408:	bd38      	pop	{r3, r4, r5, pc}
     40a:	bf00      	nop
     40c:	20000000 	.word	0x20000000
     410:	00001ea5 	.word	0x00001ea5
     414:	00001e93 	.word	0x00001e93
     418:	20002cb4 	.word	0x20002cb4
     41c:	000014d9 	.word	0x000014d9

00000420 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
     420:	4b01      	ldr	r3, [pc, #4]	; (428 <getModemPowerStatus+0x8>)
     422:	7818      	ldrb	r0, [r3, #0]
     424:	4770      	bx	lr
     426:	bf00      	nop
     428:	2000017c 	.word	0x2000017c

0000042c <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_SHUTDOWN;
     42c:	4b03      	ldr	r3, [pc, #12]	; (43c <modemPowerStateInit+0x10>)
     42e:	2200      	movs	r2, #0
     430:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     432:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     434:	2201      	movs	r2, #1
     436:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     438:	70da      	strb	r2, [r3, #3]
     43a:	4770      	bx	lr
     43c:	2000017c 	.word	0x2000017c

00000440 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
     440:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemSigInitDelay = pdMS_TO_TICKS(500UL);
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);

    switch(ModemPwrState)
     442:	4b5d      	ldr	r3, [pc, #372]	; (5b8 <modemPowerSchedule+0x178>)
     444:	781b      	ldrb	r3, [r3, #0]
     446:	2b06      	cmp	r3, #6
     448:	f000 8089 	beq.w	55e <modemPowerSchedule+0x11e>
     44c:	2b07      	cmp	r3, #7
     44e:	d054      	beq.n	4fa <modemPowerSchedule+0xba>
     450:	b103      	cbz	r3, 454 <modemPowerSchedule+0x14>
     452:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
     454:	4b58      	ldr	r3, [pc, #352]	; (5b8 <modemPowerSchedule+0x178>)
     456:	785b      	ldrb	r3, [r3, #1]
     458:	2b03      	cmp	r3, #3
     45a:	d8fa      	bhi.n	452 <modemPowerSchedule+0x12>
     45c:	e8df f003 	tbb	[pc, r3]
     460:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     464:	4b55      	ldr	r3, [pc, #340]	; (5bc <modemPowerSchedule+0x17c>)
     466:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     46a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     46e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     472:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     476:	4c52      	ldr	r4, [pc, #328]	; (5c0 <modemPowerSchedule+0x180>)
     478:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     47c:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     480:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     484:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     488:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     48c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
     490:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     492:	6299      	str	r1, [r3, #40]	; 0x28
     494:	484b      	ldr	r0, [pc, #300]	; (5c4 <modemPowerSchedule+0x184>)
     496:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     498:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     49c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a0:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4a4:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4a6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a8:	6299      	str	r1, [r3, #40]	; 0x28
     4aa:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ac:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4b4:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4b8:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
     4ba:	2201      	movs	r2, #1
     4bc:	4b3e      	ldr	r3, [pc, #248]	; (5b8 <modemPowerSchedule+0x178>)
     4be:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
     4c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     4c4:	4b40      	ldr	r3, [pc, #256]	; (5c8 <modemPowerSchedule+0x188>)
     4c6:	4798      	blx	r3
                }
                break;
     4c8:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     4ce:	4b3b      	ldr	r3, [pc, #236]	; (5bc <modemPowerSchedule+0x17c>)
     4d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
     4d4:	2202      	movs	r2, #2
     4d6:	4b38      	ldr	r3, [pc, #224]	; (5b8 <modemPowerSchedule+0x178>)
     4d8:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
     4da:	2032      	movs	r0, #50	; 0x32
     4dc:	4b3a      	ldr	r3, [pc, #232]	; (5c8 <modemPowerSchedule+0x188>)
     4de:	4798      	blx	r3
                }
                break;
     4e0:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
     4e2:	2203      	movs	r2, #3
     4e4:	4b34      	ldr	r3, [pc, #208]	; (5b8 <modemPowerSchedule+0x178>)
     4e6:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
     4e8:	f640 30b8 	movw	r0, #3000	; 0xbb8
     4ec:	4b36      	ldr	r3, [pc, #216]	; (5c8 <modemPowerSchedule+0x188>)
     4ee:	4798      	blx	r3
                }
                break;
     4f0:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
     4f2:	2204      	movs	r2, #4
     4f4:	4b30      	ldr	r3, [pc, #192]	; (5b8 <modemPowerSchedule+0x178>)
     4f6:	701a      	strb	r2, [r3, #0]
                }
                break;
     4f8:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
     4fa:	4b2f      	ldr	r3, [pc, #188]	; (5b8 <modemPowerSchedule+0x178>)
     4fc:	789b      	ldrb	r3, [r3, #2]
     4fe:	b113      	cbz	r3, 506 <modemPowerSchedule+0xc6>
     500:	2b01      	cmp	r3, #1
     502:	d017      	beq.n	534 <modemPowerSchedule+0xf4>
     504:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     506:	4b2d      	ldr	r3, [pc, #180]	; (5bc <modemPowerSchedule+0x17c>)
     508:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     50c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     50e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     512:	629a      	str	r2, [r3, #40]	; 0x28
     514:	4a2b      	ldr	r2, [pc, #172]	; (5c4 <modemPowerSchedule+0x184>)
     516:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     518:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     51c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     520:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     524:	6199      	str	r1, [r3, #24]
                case MDM_PWR_RESET_ASSERT:
                {
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     526:	2201      	movs	r2, #1
     528:	4b23      	ldr	r3, [pc, #140]	; (5b8 <modemPowerSchedule+0x178>)
     52a:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
     52c:	2019      	movs	r0, #25
     52e:	4b26      	ldr	r3, [pc, #152]	; (5c8 <modemPowerSchedule+0x188>)
     530:	4798      	blx	r3
                }
                break;
     532:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     534:	4b21      	ldr	r3, [pc, #132]	; (5bc <modemPowerSchedule+0x17c>)
     536:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     53a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     53c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     540:	629a      	str	r2, [r3, #40]	; 0x28
     542:	4a20      	ldr	r2, [pc, #128]	; (5c4 <modemPowerSchedule+0x184>)
     544:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     546:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     54a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     54e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     552:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
     554:	4b18      	ldr	r3, [pc, #96]	; (5b8 <modemPowerSchedule+0x178>)
     556:	2200      	movs	r2, #0
     558:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     55a:	705a      	strb	r2, [r3, #1]
                }
                break;
     55c:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
     55e:	4b16      	ldr	r3, [pc, #88]	; (5b8 <modemPowerSchedule+0x178>)
     560:	78db      	ldrb	r3, [r3, #3]
     562:	2b00      	cmp	r3, #0
     564:	f47f af75 	bne.w	452 <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     568:	4b14      	ldr	r3, [pc, #80]	; (5bc <modemPowerSchedule+0x17c>)
     56a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     56e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     572:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     576:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     57a:	4a11      	ldr	r2, [pc, #68]	; (5c0 <modemPowerSchedule+0x180>)
     57c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     580:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     584:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     588:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     58c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     590:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     594:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     596:	6298      	str	r0, [r3, #40]	; 0x28
     598:	4a0a      	ldr	r2, [pc, #40]	; (5c4 <modemPowerSchedule+0x184>)
     59a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     59c:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     5a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     5a8:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     5aa:	2201      	movs	r2, #1
     5ac:	4b02      	ldr	r3, [pc, #8]	; (5b8 <modemPowerSchedule+0x178>)
     5ae:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
     5b0:	2019      	movs	r0, #25
     5b2:	4b05      	ldr	r3, [pc, #20]	; (5c8 <modemPowerSchedule+0x188>)
     5b4:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
     5b6:	e74c      	b.n	452 <modemPowerSchedule+0x12>
     5b8:	2000017c 	.word	0x2000017c
     5bc:	41008000 	.word	0x41008000
     5c0:	c0000001 	.word	0xc0000001
     5c4:	c0000008 	.word	0xc0000008
     5c8:	00003d41 	.word	0x00003d41

000005cc <ModemProcessTask>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
void ModemProcessTask( void *ModemTaskParam)
{
     5cc:	b570      	push	{r4, r5, r6, lr}
    const TickType_t xDelayMs = pdMS_TO_TICKS(5000UL);

    modemPowerStateInit();
     5ce:	4b08      	ldr	r3, [pc, #32]	; (5f0 <ModemProcessTask+0x24>)
     5d0:	4798      	blx	r3

    while(1)
    {
        modemPowerSchedule();
     5d2:	4d08      	ldr	r5, [pc, #32]	; (5f4 <ModemProcessTask+0x28>)

        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     5d4:	4c08      	ldr	r4, [pc, #32]	; (5f8 <ModemProcessTask+0x2c>)
        {
            DEBUG_PRINT("Running Modem Process Task successfully");
     5d6:	4e09      	ldr	r6, [pc, #36]	; (5fc <ModemProcessTask+0x30>)
        modemPowerSchedule();
     5d8:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     5da:	47a0      	blx	r4
     5dc:	2804      	cmp	r0, #4
     5de:	d1fb      	bne.n	5d8 <ModemProcessTask+0xc>
            DEBUG_PRINT("Running Modem Process Task successfully");
     5e0:	4630      	mov	r0, r6
     5e2:	4b07      	ldr	r3, [pc, #28]	; (600 <ModemProcessTask+0x34>)
     5e4:	4798      	blx	r3
            vTaskDelay(xDelayMs);
     5e6:	f241 3088 	movw	r0, #5000	; 0x1388
     5ea:	4b06      	ldr	r3, [pc, #24]	; (604 <ModemProcessTask+0x38>)
     5ec:	4798      	blx	r3
     5ee:	e7f3      	b.n	5d8 <ModemProcessTask+0xc>
     5f0:	0000042d 	.word	0x0000042d
     5f4:	00000441 	.word	0x00000441
     5f8:	00000421 	.word	0x00000421
     5fc:	00004f08 	.word	0x00004f08
     600:	00000719 	.word	0x00000719
     604:	00003d41 	.word	0x00003d41

00000608 <ModemRxTask>:
#include "apps/Tasks/ModemTask/include/ModemPowerControl.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"

void ModemRxTask( void *ModemTaskParam)
{
     608:	b570      	push	{r4, r5, r6, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(3000UL);

	while(1)
	{
		DEBUG_PRINT("Running Modem Rx Task successfully");
     60a:	4e04      	ldr	r6, [pc, #16]	; (61c <ModemRxTask+0x14>)
     60c:	4d04      	ldr	r5, [pc, #16]	; (620 <ModemRxTask+0x18>)
		vTaskDelay(xDelayMs);
     60e:	4c05      	ldr	r4, [pc, #20]	; (624 <ModemRxTask+0x1c>)
		DEBUG_PRINT("Running Modem Rx Task successfully");
     610:	4630      	mov	r0, r6
     612:	47a8      	blx	r5
		vTaskDelay(xDelayMs);
     614:	f640 30b8 	movw	r0, #3000	; 0xbb8
     618:	47a0      	blx	r4
     61a:	e7f9      	b.n	610 <ModemRxTask+0x8>
     61c:	00004f30 	.word	0x00004f30
     620:	00000719 	.word	0x00000719
     624:	00003d41 	.word	0x00003d41

00000628 <ModemTxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"


void ModemTxTask( void *ModemTaskParam)
{
     628:	b570      	push	{r4, r5, r6, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(1000UL);

	while(1)
	{
		DEBUG_PRINT("Running Modem Tx Task successfully");
     62a:	4e05      	ldr	r6, [pc, #20]	; (640 <ModemTxTask+0x18>)
     62c:	4d05      	ldr	r5, [pc, #20]	; (644 <ModemTxTask+0x1c>)
		vTaskDelay(xDelayMs);
     62e:	4c06      	ldr	r4, [pc, #24]	; (648 <ModemTxTask+0x20>)
		DEBUG_PRINT("Running Modem Tx Task successfully");
     630:	4630      	mov	r0, r6
     632:	47a8      	blx	r5
		vTaskDelay(xDelayMs);
     634:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     638:	47a0      	blx	r4
		kickWatchDog();
     63a:	4b04      	ldr	r3, [pc, #16]	; (64c <ModemTxTask+0x24>)
     63c:	4798      	blx	r3
     63e:	e7f7      	b.n	630 <ModemTxTask+0x8>
     640:	00004f54 	.word	0x00004f54
     644:	00000719 	.word	0x00000719
     648:	00003d41 	.word	0x00003d41
     64c:	00000879 	.word	0x00000879

00000650 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     654:	4604      	mov	r4, r0
     656:	460e      	mov	r6, r1
     658:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     65a:	4d0e      	ldr	r5, [pc, #56]	; (694 <usart_async_write+0x44>)
     65c:	4620      	mov	r0, r4
     65e:	47a8      	blx	r5
     660:	2800      	cmp	r0, #0
     662:	d0fb      	beq.n	65c <usart_async_write+0xc>
     664:	3e01      	subs	r6, #1
     666:	f8df 8030 	ldr.w	r8, [pc, #48]	; 698 <usart_async_write+0x48>
     66a:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     66c:	f8df a02c 	ldr.w	sl, [pc, #44]	; 69c <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     670:	4d08      	ldr	r5, [pc, #32]	; (694 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     672:	7873      	ldrb	r3, [r6, #1]
     674:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     678:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     67c:	4620      	mov	r0, r4
     67e:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     680:	4620      	mov	r0, r4
     682:	47a8      	blx	r5
     684:	2800      	cmp	r0, #0
     686:	d0fb      	beq.n	680 <usart_async_write+0x30>
		;
	} while (++offset < length);
     688:	3701      	adds	r7, #1
     68a:	454f      	cmp	r7, r9
     68c:	d3f1      	bcc.n	672 <usart_async_write+0x22>

	return (int32_t)offset;
}
     68e:	4638      	mov	r0, r7
     690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     694:	00001e9b 	.word	0x00001e9b
     698:	20000180 	.word	0x20000180
     69c:	00001e8d 	.word	0x00001e8d

000006a0 <SerialDebugTxByteSentCallBack>:
     6a0:	2302      	movs	r3, #2
     6a2:	7603      	strb	r3, [r0, #24]
     6a4:	4770      	bx	lr

000006a6 <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     6a6:	2380      	movs	r3, #128	; 0x80
     6a8:	7603      	strb	r3, [r0, #24]
     6aa:	4770      	bx	lr

000006ac <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     6ac:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
     6ae:	4c05      	ldr	r4, [pc, #20]	; (6c4 <SerialDebugPrintInit+0x18>)
     6b0:	4905      	ldr	r1, [pc, #20]	; (6c8 <SerialDebugPrintInit+0x1c>)
     6b2:	4620      	mov	r0, r4
     6b4:	4b05      	ldr	r3, [pc, #20]	; (6cc <SerialDebugPrintInit+0x20>)
     6b6:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     6b8:	2201      	movs	r2, #1
     6ba:	4611      	mov	r1, r2
     6bc:	4620      	mov	r0, r4
     6be:	4b04      	ldr	r3, [pc, #16]	; (6d0 <SerialDebugPrintInit+0x24>)
     6c0:	4798      	blx	r3
     6c2:	bd10      	pop	{r4, pc}
     6c4:	2000001c 	.word	0x2000001c
     6c8:	43000400 	.word	0x43000400
     6cc:	00001e15 	.word	0x00001e15
     6d0:	00001eb1 	.word	0x00001eb1

000006d4 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     6d4:	b570      	push	{r4, r5, r6, lr}
     6d6:	4605      	mov	r5, r0
     6d8:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
     6da:	4c05      	ldr	r4, [pc, #20]	; (6f0 <SerialDebugPrint+0x1c>)
     6dc:	4620      	mov	r0, r4
     6de:	4b05      	ldr	r3, [pc, #20]	; (6f4 <SerialDebugPrint+0x20>)
     6e0:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
     6e2:	4632      	mov	r2, r6
     6e4:	4629      	mov	r1, r5
     6e6:	4620      	mov	r0, r4
     6e8:	4b03      	ldr	r3, [pc, #12]	; (6f8 <SerialDebugPrint+0x24>)
     6ea:	4798      	blx	r3
     6ec:	bd70      	pop	{r4, r5, r6, pc}
     6ee:	bf00      	nop
     6f0:	2000001c 	.word	0x2000001c
     6f4:	00001e79 	.word	0x00001e79
     6f8:	00000651 	.word	0x00000651

000006fc <SerialDebugTxDoneCallBack>:
{
     6fc:	b510      	push	{r4, lr}
     6fe:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     700:	2116      	movs	r1, #22
     702:	4803      	ldr	r0, [pc, #12]	; (710 <SerialDebugTxDoneCallBack+0x14>)
     704:	4b03      	ldr	r3, [pc, #12]	; (714 <SerialDebugTxDoneCallBack+0x18>)
     706:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     708:	2301      	movs	r3, #1
     70a:	7623      	strb	r3, [r4, #24]
     70c:	bd10      	pop	{r4, pc}
     70e:	bf00      	nop
     710:	00004f78 	.word	0x00004f78
     714:	000006d5 	.word	0x000006d5

00000718 <ConsoleDebugPrint>:
}


void ConsoleDebugPrint(const uint8_t *const dataToPrint)
{
     718:	b510      	push	{r4, lr}
     71a:	b09a      	sub	sp, #104	; 0x68
     71c:	4604      	mov	r4, r0
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
     71e:	2264      	movs	r2, #100	; 0x64
     720:	2100      	movs	r1, #0
     722:	a801      	add	r0, sp, #4
     724:	4b08      	ldr	r3, [pc, #32]	; (748 <ConsoleDebugPrint+0x30>)
     726:	4798      	blx	r3
	sprintf((int8_t*)dbgBuffer,"%s %s",dataToPrint,"\r\n");
     728:	4b08      	ldr	r3, [pc, #32]	; (74c <ConsoleDebugPrint+0x34>)
     72a:	4622      	mov	r2, r4
     72c:	4908      	ldr	r1, [pc, #32]	; (750 <ConsoleDebugPrint+0x38>)
     72e:	a801      	add	r0, sp, #4
     730:	4c08      	ldr	r4, [pc, #32]	; (754 <ConsoleDebugPrint+0x3c>)
     732:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     734:	a801      	add	r0, sp, #4
     736:	4b08      	ldr	r3, [pc, #32]	; (758 <ConsoleDebugPrint+0x40>)
     738:	4798      	blx	r3
     73a:	b281      	uxth	r1, r0
     73c:	a801      	add	r0, sp, #4
     73e:	4b07      	ldr	r3, [pc, #28]	; (75c <ConsoleDebugPrint+0x44>)
     740:	4798      	blx	r3
}
     742:	b01a      	add	sp, #104	; 0x68
     744:	bd10      	pop	{r4, pc}
     746:	bf00      	nop
     748:	0000452b 	.word	0x0000452b
     74c:	00004f8c 	.word	0x00004f8c
     750:	00004f9c 	.word	0x00004f9c
     754:	000046b5 	.word	0x000046b5
     758:	0000470d 	.word	0x0000470d
     75c:	000006d5 	.word	0x000006d5

00000760 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
     760:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     762:	2204      	movs	r2, #4
     764:	4b0b      	ldr	r3, [pc, #44]	; (794 <SERCOM5_2_Handler+0x34>)
     766:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
     768:	4d0b      	ldr	r5, [pc, #44]	; (798 <SERCOM5_2_Handler+0x38>)
     76a:	4c0c      	ldr	r4, [pc, #48]	; (79c <SERCOM5_2_Handler+0x3c>)
     76c:	4628      	mov	r0, r5
     76e:	47a0      	blx	r4
     770:	2800      	cmp	r0, #0
     772:	d0fb      	beq.n	76c <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
     774:	4808      	ldr	r0, [pc, #32]	; (798 <SERCOM5_2_Handler+0x38>)
     776:	4b0a      	ldr	r3, [pc, #40]	; (7a0 <SERCOM5_2_Handler+0x40>)
     778:	4798      	blx	r3
     77a:	490a      	ldr	r1, [pc, #40]	; (7a4 <SERCOM5_2_Handler+0x44>)
     77c:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
     77e:	2300      	movs	r3, #0
     780:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
     782:	4c09      	ldr	r4, [pc, #36]	; (7a8 <SERCOM5_2_Handler+0x48>)
     784:	4620      	mov	r0, r4
     786:	4b09      	ldr	r3, [pc, #36]	; (7ac <SERCOM5_2_Handler+0x4c>)
     788:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
     78a:	2105      	movs	r1, #5
     78c:	4620      	mov	r0, r4
     78e:	4b08      	ldr	r3, [pc, #32]	; (7b0 <SERCOM5_2_Handler+0x50>)
     790:	4798      	blx	r3
     792:	bd38      	pop	{r3, r4, r5, pc}
     794:	43000400 	.word	0x43000400
     798:	2000001c 	.word	0x2000001c
     79c:	00001ea5 	.word	0x00001ea5
     7a0:	00001e93 	.word	0x00001e93
     7a4:	20002cc4 	.word	0x20002cc4
     7a8:	20002cc8 	.word	0x20002cc8
     7ac:	000046fd 	.word	0x000046fd
     7b0:	000006d5 	.word	0x000006d5

000007b4 <configureWatchDogTimeOut>:
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
static int32_t cfgstatus;
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
     7b4:	b510      	push	{r4, lr}
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
     7b6:	4c0c      	ldr	r4, [pc, #48]	; (7e8 <configureWatchDogTimeOut+0x34>)
     7b8:	6820      	ldr	r0, [r4, #0]
     7ba:	2279      	movs	r2, #121	; 0x79
     7bc:	490b      	ldr	r1, [pc, #44]	; (7ec <configureWatchDogTimeOut+0x38>)
     7be:	3000      	adds	r0, #0
     7c0:	bf18      	it	ne
     7c2:	2001      	movne	r0, #1
     7c4:	4b0a      	ldr	r3, [pc, #40]	; (7f0 <configureWatchDogTimeOut+0x3c>)
     7c6:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
     7c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     7cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     7d0:	4620      	mov	r0, r4
     7d2:	4b08      	ldr	r3, [pc, #32]	; (7f4 <configureWatchDogTimeOut+0x40>)
     7d4:	4798      	blx	r3
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, 4096);

	if(0 == cfgstatus)
     7d6:	b118      	cbz	r0, 7e0 <configureWatchDogTimeOut+0x2c>
	{
		DEBUG_PRINT("Set the WDT timeout successfully");
	}
	else
	{
		DEBUG_PRINT("Failed to set the WDT time out");
     7d8:	4807      	ldr	r0, [pc, #28]	; (7f8 <configureWatchDogTimeOut+0x44>)
     7da:	4b08      	ldr	r3, [pc, #32]	; (7fc <configureWatchDogTimeOut+0x48>)
     7dc:	4798      	blx	r3
     7de:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Set the WDT timeout successfully");
     7e0:	4807      	ldr	r0, [pc, #28]	; (800 <configureWatchDogTimeOut+0x4c>)
     7e2:	4b06      	ldr	r3, [pc, #24]	; (7fc <configureWatchDogTimeOut+0x48>)
     7e4:	4798      	blx	r3
     7e6:	bd10      	pop	{r4, pc}
     7e8:	20002da4 	.word	0x20002da4
     7ec:	00004fa4 	.word	0x00004fa4
     7f0:	00001421 	.word	0x00001421
     7f4:	00002851 	.word	0x00002851
     7f8:	00004fe4 	.word	0x00004fe4
     7fc:	00000719 	.word	0x00000719
     800:	00004fc0 	.word	0x00004fc0

00000804 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
     804:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
     806:	2002      	movs	r0, #2
     808:	4b0b      	ldr	r3, [pc, #44]	; (838 <enableWatchDogTimer+0x34>)
     80a:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
     80c:	4c0b      	ldr	r4, [pc, #44]	; (83c <enableWatchDogTimer+0x38>)
     80e:	6820      	ldr	r0, [r4, #0]
     810:	2296      	movs	r2, #150	; 0x96
     812:	490b      	ldr	r1, [pc, #44]	; (840 <enableWatchDogTimer+0x3c>)
     814:	3000      	adds	r0, #0
     816:	bf18      	it	ne
     818:	2001      	movne	r0, #1
     81a:	4b0a      	ldr	r3, [pc, #40]	; (844 <enableWatchDogTimer+0x40>)
     81c:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
     81e:	4620      	mov	r0, r4
     820:	4b09      	ldr	r3, [pc, #36]	; (848 <enableWatchDogTimer+0x44>)
     822:	4798      	blx	r3
    
	if(0 == wdt_enable(&WDT_0))
     824:	b118      	cbz	r0, 82e <enableWatchDogTimer+0x2a>
    {
    	DEBUG_PRINT("Enabled the WDT");
    }
    else
    {
    	DEBUG_PRINT("Failed to enable WDT");
     826:	4809      	ldr	r0, [pc, #36]	; (84c <enableWatchDogTimer+0x48>)
     828:	4b09      	ldr	r3, [pc, #36]	; (850 <enableWatchDogTimer+0x4c>)
     82a:	4798      	blx	r3
     82c:	bd10      	pop	{r4, pc}
    	DEBUG_PRINT("Enabled the WDT");
     82e:	4809      	ldr	r0, [pc, #36]	; (854 <enableWatchDogTimer+0x50>)
     830:	4b07      	ldr	r3, [pc, #28]	; (850 <enableWatchDogTimer+0x4c>)
     832:	4798      	blx	r3
     834:	bd10      	pop	{r4, pc}
     836:	bf00      	nop
     838:	000007b5 	.word	0x000007b5
     83c:	20002da4 	.word	0x20002da4
     840:	00004fa4 	.word	0x00004fa4
     844:	00001421 	.word	0x00001421
     848:	0000296d 	.word	0x0000296d
     84c:	00005014 	.word	0x00005014
     850:	00000719 	.word	0x00000719
     854:	00005004 	.word	0x00005004

00000858 <atmel_start_init>:
{
     858:	b508      	push	{r3, lr}
    system_init();
     85a:	4b04      	ldr	r3, [pc, #16]	; (86c <atmel_start_init+0x14>)
     85c:	4798      	blx	r3
    delay_ms(1000);
     85e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     862:	4b03      	ldr	r3, [pc, #12]	; (870 <atmel_start_init+0x18>)
     864:	4798      	blx	r3
    enableWatchDogTimer();
     866:	4b03      	ldr	r3, [pc, #12]	; (874 <atmel_start_init+0x1c>)
     868:	4798      	blx	r3
     86a:	bd08      	pop	{r3, pc}
     86c:	00000ff5 	.word	0x00000ff5
     870:	000011c9 	.word	0x000011c9
     874:	00000805 	.word	0x00000805

00000878 <kickWatchDog>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void kickWatchDog(void)
{
     878:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
     87a:	4c06      	ldr	r4, [pc, #24]	; (894 <kickWatchDog+0x1c>)
     87c:	6820      	ldr	r0, [r4, #0]
     87e:	22b3      	movs	r2, #179	; 0xb3
     880:	4905      	ldr	r1, [pc, #20]	; (898 <kickWatchDog+0x20>)
     882:	3000      	adds	r0, #0
     884:	bf18      	it	ne
     886:	2001      	movne	r0, #1
     888:	4b04      	ldr	r3, [pc, #16]	; (89c <kickWatchDog+0x24>)
     88a:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
     88c:	4620      	mov	r0, r4
     88e:	4b04      	ldr	r3, [pc, #16]	; (8a0 <kickWatchDog+0x28>)
     890:	4798      	blx	r3
     892:	bd10      	pop	{r4, pc}
     894:	20002da4 	.word	0x20002da4
     898:	00004fa4 	.word	0x00004fa4
     89c:	00001421 	.word	0x00001421
     8a0:	000029a9 	.word	0x000029a9

000008a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     8a4:	e7fe      	b.n	8a4 <Dummy_Handler>
	...

000008a8 <Reset_Handler>:
{
     8a8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     8aa:	4b1c      	ldr	r3, [pc, #112]	; (91c <Reset_Handler+0x74>)
     8ac:	4a1c      	ldr	r2, [pc, #112]	; (920 <Reset_Handler+0x78>)
     8ae:	429a      	cmp	r2, r3
     8b0:	d010      	beq.n	8d4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     8b2:	4b1c      	ldr	r3, [pc, #112]	; (924 <Reset_Handler+0x7c>)
     8b4:	4a19      	ldr	r2, [pc, #100]	; (91c <Reset_Handler+0x74>)
     8b6:	429a      	cmp	r2, r3
     8b8:	d20c      	bcs.n	8d4 <Reset_Handler+0x2c>
     8ba:	3b01      	subs	r3, #1
     8bc:	1a9b      	subs	r3, r3, r2
     8be:	f023 0303 	bic.w	r3, r3, #3
     8c2:	3304      	adds	r3, #4
     8c4:	4413      	add	r3, r2
     8c6:	4916      	ldr	r1, [pc, #88]	; (920 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     8c8:	f851 0b04 	ldr.w	r0, [r1], #4
     8cc:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     8d0:	429a      	cmp	r2, r3
     8d2:	d1f9      	bne.n	8c8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     8d4:	4b14      	ldr	r3, [pc, #80]	; (928 <Reset_Handler+0x80>)
     8d6:	4a15      	ldr	r2, [pc, #84]	; (92c <Reset_Handler+0x84>)
     8d8:	429a      	cmp	r2, r3
     8da:	d20a      	bcs.n	8f2 <Reset_Handler+0x4a>
     8dc:	3b01      	subs	r3, #1
     8de:	1a9b      	subs	r3, r3, r2
     8e0:	f023 0303 	bic.w	r3, r3, #3
     8e4:	3304      	adds	r3, #4
     8e6:	4413      	add	r3, r2
                *pDest++ = 0;
     8e8:	2100      	movs	r1, #0
     8ea:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     8ee:	4293      	cmp	r3, r2
     8f0:	d1fb      	bne.n	8ea <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     8f2:	4b0f      	ldr	r3, [pc, #60]	; (930 <Reset_Handler+0x88>)
     8f4:	4a0f      	ldr	r2, [pc, #60]	; (934 <Reset_Handler+0x8c>)
     8f6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     8fa:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     8fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     900:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     908:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     90c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     910:	4b09      	ldr	r3, [pc, #36]	; (938 <Reset_Handler+0x90>)
     912:	4798      	blx	r3
        main();
     914:	4b09      	ldr	r3, [pc, #36]	; (93c <Reset_Handler+0x94>)
     916:	4798      	blx	r3
     918:	e7fe      	b.n	918 <Reset_Handler+0x70>
     91a:	bf00      	nop
     91c:	20000000 	.word	0x20000000
     920:	000056f8 	.word	0x000056f8
     924:	20000158 	.word	0x20000158
     928:	20002ea0 	.word	0x20002ea0
     92c:	20000160 	.word	0x20000160
     930:	e000ed00 	.word	0xe000ed00
     934:	00000000 	.word	0x00000000
     938:	00004499 	.word	0x00004499
     93c:	000029d9 	.word	0x000029d9

00000940 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
     940:	4a04      	ldr	r2, [pc, #16]	; (954 <AC_0_CLOCK_init+0x14>)
     942:	69d3      	ldr	r3, [r2, #28]
     944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     948:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     94a:	2240      	movs	r2, #64	; 0x40
     94c:	4b02      	ldr	r3, [pc, #8]	; (958 <AC_0_CLOCK_init+0x18>)
     94e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     952:	4770      	bx	lr
     954:	40000800 	.word	0x40000800
     958:	40001c00 	.word	0x40001c00

0000095c <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
     95c:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
     95e:	4b03      	ldr	r3, [pc, #12]	; (96c <AC_0_init+0x10>)
     960:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     962:	4903      	ldr	r1, [pc, #12]	; (970 <AC_0_init+0x14>)
     964:	4803      	ldr	r0, [pc, #12]	; (974 <AC_0_init+0x18>)
     966:	4b04      	ldr	r3, [pc, #16]	; (978 <AC_0_init+0x1c>)
     968:	4798      	blx	r3
     96a:	bd08      	pop	{r3, pc}
     96c:	00000941 	.word	0x00000941
     970:	42002000 	.word	0x42002000
     974:	20002d70 	.word	0x20002d70
     978:	00001115 	.word	0x00001115

0000097c <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     97c:	4b5d      	ldr	r3, [pc, #372]	; (af4 <ADC_0_PORT_init+0x178>)
     97e:	2204      	movs	r2, #4
     980:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     982:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     986:	629a      	str	r2, [r3, #40]	; 0x28
     988:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     98c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     98e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     992:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     996:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     99a:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     99e:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9a2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9aa:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9ae:	2108      	movs	r1, #8
     9b0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9b6:	6299      	str	r1, [r3, #40]	; 0x28
     9b8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ba:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     9be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9c2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9c6:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9ca:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ce:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9d2:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9d6:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9da:	f44f 7180 	mov.w	r1, #256	; 0x100
     9de:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9e2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9e6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     9ea:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ee:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     9f2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9f6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9fa:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9fe:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a02:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a06:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a0a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a0e:	f44f 7100 	mov.w	r1, #512	; 0x200
     a12:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a16:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a1a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     a1e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a22:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     a26:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a2a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a2e:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a32:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a36:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a3a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a3e:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a42:	2110      	movs	r1, #16
     a44:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a46:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a4a:	6299      	str	r1, [r3, #40]	; 0x28
     a4c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a4e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     a52:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a56:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a5a:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a5e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a62:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a66:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a6a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a6e:	2120      	movs	r1, #32
     a70:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a72:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     a76:	6299      	str	r1, [r3, #40]	; 0x28
     a78:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a7a:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     a7e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a82:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a86:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a8a:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a8e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a92:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a96:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     a9a:	2140      	movs	r1, #64	; 0x40
     a9c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a9e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     aa2:	6299      	str	r1, [r3, #40]	; 0x28
     aa4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aa6:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     aaa:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     aae:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ab2:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ab6:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     aba:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     abe:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ac2:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     ac6:	2180      	movs	r1, #128	; 0x80
     ac8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     ace:	6299      	str	r1, [r3, #40]	; 0x28
     ad0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ad2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     ad6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ada:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ade:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ae2:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ae6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     aea:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     aee:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     af2:	4770      	bx	lr
     af4:	41008000 	.word	0x41008000

00000af8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     af8:	4a04      	ldr	r2, [pc, #16]	; (b0c <ADC_0_CLOCK_init+0x14>)
     afa:	6a13      	ldr	r3, [r2, #32]
     afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     b00:	6213      	str	r3, [r2, #32]
     b02:	2241      	movs	r2, #65	; 0x41
     b04:	4b02      	ldr	r3, [pc, #8]	; (b10 <ADC_0_CLOCK_init+0x18>)
     b06:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     b0a:	4770      	bx	lr
     b0c:	40000800 	.word	0x40000800
     b10:	40001c00 	.word	0x40001c00

00000b14 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     b14:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     b16:	4b05      	ldr	r3, [pc, #20]	; (b2c <ADC_0_init+0x18>)
     b18:	4798      	blx	r3
	ADC_0_PORT_init();
     b1a:	4b05      	ldr	r3, [pc, #20]	; (b30 <ADC_0_init+0x1c>)
     b1c:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     b1e:	2200      	movs	r2, #0
     b20:	4904      	ldr	r1, [pc, #16]	; (b34 <ADC_0_init+0x20>)
     b22:	4805      	ldr	r0, [pc, #20]	; (b38 <ADC_0_init+0x24>)
     b24:	4b05      	ldr	r3, [pc, #20]	; (b3c <ADC_0_init+0x28>)
     b26:	4798      	blx	r3
     b28:	bd08      	pop	{r3, pc}
     b2a:	bf00      	nop
     b2c:	00000af9 	.word	0x00000af9
     b30:	0000097d 	.word	0x0000097d
     b34:	43001c00 	.word	0x43001c00
     b38:	20002d80 	.word	0x20002d80
     b3c:	00001145 	.word	0x00001145

00000b40 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     b40:	4a04      	ldr	r2, [pc, #16]	; (b54 <ADC_1_CLOCK_init+0x14>)
     b42:	6a13      	ldr	r3, [r2, #32]
     b44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     b48:	6213      	str	r3, [r2, #32]
     b4a:	2240      	movs	r2, #64	; 0x40
     b4c:	4b02      	ldr	r3, [pc, #8]	; (b58 <ADC_1_CLOCK_init+0x18>)
     b4e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
     b52:	4770      	bx	lr
     b54:	40000800 	.word	0x40000800
     b58:	40001c00 	.word	0x40001c00

00000b5c <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
     b5c:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
     b5e:	4b04      	ldr	r3, [pc, #16]	; (b70 <ADC_1_init+0x14>)
     b60:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
     b62:	2200      	movs	r2, #0
     b64:	4903      	ldr	r1, [pc, #12]	; (b74 <ADC_1_init+0x18>)
     b66:	4804      	ldr	r0, [pc, #16]	; (b78 <ADC_1_init+0x1c>)
     b68:	4b04      	ldr	r3, [pc, #16]	; (b7c <ADC_1_init+0x20>)
     b6a:	4798      	blx	r3
     b6c:	bd08      	pop	{r3, pc}
     b6e:	bf00      	nop
     b70:	00000b41 	.word	0x00000b41
     b74:	43002000 	.word	0x43002000
     b78:	20002e38 	.word	0x20002e38
     b7c:	00001145 	.word	0x00001145

00000b80 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
     b80:	4a04      	ldr	r2, [pc, #16]	; (b94 <DAC_0_CLOCK_init+0x14>)
     b82:	6a13      	ldr	r3, [r2, #32]
     b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     b88:	6213      	str	r3, [r2, #32]
     b8a:	2240      	movs	r2, #64	; 0x40
     b8c:	4b02      	ldr	r3, [pc, #8]	; (b98 <DAC_0_CLOCK_init+0x18>)
     b8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     b92:	4770      	bx	lr
     b94:	40000800 	.word	0x40000800
     b98:	40001c00 	.word	0x40001c00

00000b9c <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
     b9c:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
     b9e:	4b03      	ldr	r3, [pc, #12]	; (bac <DAC_0_init+0x10>)
     ba0:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     ba2:	4903      	ldr	r1, [pc, #12]	; (bb0 <DAC_0_init+0x14>)
     ba4:	4803      	ldr	r0, [pc, #12]	; (bb4 <DAC_0_init+0x18>)
     ba6:	4b04      	ldr	r3, [pc, #16]	; (bb8 <DAC_0_init+0x1c>)
     ba8:	4798      	blx	r3
     baa:	bd08      	pop	{r3, pc}
     bac:	00000b81 	.word	0x00000b81
     bb0:	43002400 	.word	0x43002400
     bb4:	20002da8 	.word	0x20002da8
     bb8:	00001175 	.word	0x00001175

00000bbc <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
     bbc:	b508      	push	{r3, lr}
     bbe:	2240      	movs	r2, #64	; 0x40
     bc0:	4b05      	ldr	r3, [pc, #20]	; (bd8 <EXTERNAL_IRQ_0_init+0x1c>)
     bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     bc6:	4a05      	ldr	r2, [pc, #20]	; (bdc <EXTERNAL_IRQ_0_init+0x20>)
     bc8:	6953      	ldr	r3, [r2, #20]
     bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     bce:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
     bd0:	4b03      	ldr	r3, [pc, #12]	; (be0 <EXTERNAL_IRQ_0_init+0x24>)
     bd2:	4798      	blx	r3
     bd4:	bd08      	pop	{r3, pc}
     bd6:	bf00      	nop
     bd8:	40001c00 	.word	0x40001c00
     bdc:	40000800 	.word	0x40000800
     be0:	0000122d 	.word	0x0000122d

00000be4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     be4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     be6:	4a04      	ldr	r2, [pc, #16]	; (bf8 <EVENT_SYSTEM_0_init+0x14>)
     be8:	6993      	ldr	r3, [r2, #24]
     bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     bee:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
     bf0:	4b02      	ldr	r3, [pc, #8]	; (bfc <EVENT_SYSTEM_0_init+0x18>)
     bf2:	4798      	blx	r3
     bf4:	bd08      	pop	{r3, pc}
     bf6:	bf00      	nop
     bf8:	40000800 	.word	0x40000800
     bfc:	000011e9 	.word	0x000011e9

00000c00 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     c00:	4a02      	ldr	r2, [pc, #8]	; (c0c <FLASH_0_CLOCK_init+0xc>)
     c02:	6913      	ldr	r3, [r2, #16]
     c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     c08:	6113      	str	r3, [r2, #16]
     c0a:	4770      	bx	lr
     c0c:	40000800 	.word	0x40000800

00000c10 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     c10:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     c12:	4b03      	ldr	r3, [pc, #12]	; (c20 <FLASH_0_init+0x10>)
     c14:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     c16:	4903      	ldr	r1, [pc, #12]	; (c24 <FLASH_0_init+0x14>)
     c18:	4803      	ldr	r0, [pc, #12]	; (c28 <FLASH_0_init+0x18>)
     c1a:	4b04      	ldr	r3, [pc, #16]	; (c2c <FLASH_0_init+0x1c>)
     c1c:	4798      	blx	r3
     c1e:	bd08      	pop	{r3, pc}
     c20:	00000c01 	.word	0x00000c01
     c24:	41004000 	.word	0x41004000
     c28:	20002d34 	.word	0x20002d34
     c2c:	00001265 	.word	0x00001265

00000c30 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c30:	4b10      	ldr	r3, [pc, #64]	; (c74 <ModemData_PORT_init+0x44>)
     c32:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     c36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c3a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c42:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c46:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c4a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c52:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     c56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c62:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     c66:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     c6a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     c72:	4770      	bx	lr
     c74:	41008000 	.word	0x41008000

00000c78 <ModemData_CLOCK_init>:
     c78:	4b06      	ldr	r3, [pc, #24]	; (c94 <ModemData_CLOCK_init+0x1c>)
     c7a:	2240      	movs	r2, #64	; 0x40
     c7c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     c80:	224a      	movs	r2, #74	; 0x4a
     c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     c86:	4a04      	ldr	r2, [pc, #16]	; (c98 <ModemData_CLOCK_init+0x20>)
     c88:	6993      	ldr	r3, [r2, #24]
     c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     c8e:	6193      	str	r3, [r2, #24]
     c90:	4770      	bx	lr
     c92:	bf00      	nop
     c94:	40001c00 	.word	0x40001c00
     c98:	40000800 	.word	0x40000800

00000c9c <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
     c9c:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
     c9e:	4b03      	ldr	r3, [pc, #12]	; (cac <ModemData_init+0x10>)
     ca0:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
     ca2:	4b03      	ldr	r3, [pc, #12]	; (cb0 <ModemData_init+0x14>)
     ca4:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
     ca6:	4b03      	ldr	r3, [pc, #12]	; (cb4 <ModemData_init+0x18>)
     ca8:	4798      	blx	r3
     caa:	bd08      	pop	{r3, pc}
     cac:	00000c79 	.word	0x00000c79
     cb0:	00000369 	.word	0x00000369
     cb4:	00000c31 	.word	0x00000c31

00000cb8 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cb8:	4b10      	ldr	r3, [pc, #64]	; (cfc <SerialDebug_PORT_init+0x44>)
     cba:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     cbe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     cc2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cc6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cca:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     cce:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     cd2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cd6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cda:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     cde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ce2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ce6:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     cea:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     cee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     cf2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     cf6:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     cfa:	4770      	bx	lr
     cfc:	41008000 	.word	0x41008000

00000d00 <SerialDebug_CLOCK_init>:
     d00:	4b06      	ldr	r3, [pc, #24]	; (d1c <SerialDebug_CLOCK_init+0x1c>)
     d02:	2240      	movs	r2, #64	; 0x40
     d04:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     d08:	224a      	movs	r2, #74	; 0x4a
     d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     d0e:	4a04      	ldr	r2, [pc, #16]	; (d20 <SerialDebug_CLOCK_init+0x20>)
     d10:	6a13      	ldr	r3, [r2, #32]
     d12:	f043 0302 	orr.w	r3, r3, #2
     d16:	6213      	str	r3, [r2, #32]
     d18:	4770      	bx	lr
     d1a:	bf00      	nop
     d1c:	40001c00 	.word	0x40001c00
     d20:	40000800 	.word	0x40000800

00000d24 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
     d24:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
     d26:	4b03      	ldr	r3, [pc, #12]	; (d34 <SerialDebug_init+0x10>)
     d28:	4798      	blx	r3
	SerialDebugPrintInit();
     d2a:	4b03      	ldr	r3, [pc, #12]	; (d38 <SerialDebug_init+0x14>)
     d2c:	4798      	blx	r3
	SerialDebug_PORT_init();
     d2e:	4b03      	ldr	r3, [pc, #12]	; (d3c <SerialDebug_init+0x18>)
     d30:	4798      	blx	r3
     d32:	bd08      	pop	{r3, pc}
     d34:	00000d01 	.word	0x00000d01
     d38:	000006ad 	.word	0x000006ad
     d3c:	00000cb9 	.word	0x00000cb9

00000d40 <delay_driver_init>:
}

void delay_driver_init(void)
{
     d40:	b508      	push	{r3, lr}
	delay_init(SysTick);
     d42:	4802      	ldr	r0, [pc, #8]	; (d4c <delay_driver_init+0xc>)
     d44:	4b02      	ldr	r3, [pc, #8]	; (d50 <delay_driver_init+0x10>)
     d46:	4798      	blx	r3
     d48:	bd08      	pop	{r3, pc}
     d4a:	bf00      	nop
     d4c:	e000e010 	.word	0xe000e010
     d50:	000011b5 	.word	0x000011b5

00000d54 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     d54:	4a04      	ldr	r2, [pc, #16]	; (d68 <PWM_0_CLOCK_init+0x14>)
     d56:	6953      	ldr	r3, [r2, #20]
     d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d5c:	6153      	str	r3, [r2, #20]
     d5e:	2240      	movs	r2, #64	; 0x40
     d60:	4b02      	ldr	r3, [pc, #8]	; (d6c <PWM_0_CLOCK_init+0x18>)
     d62:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     d66:	4770      	bx	lr
     d68:	40000800 	.word	0x40000800
     d6c:	40001c00 	.word	0x40001c00

00000d70 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     d70:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     d72:	4b05      	ldr	r3, [pc, #20]	; (d88 <PWM_0_init+0x18>)
     d74:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     d76:	4b05      	ldr	r3, [pc, #20]	; (d8c <PWM_0_init+0x1c>)
     d78:	4798      	blx	r3
     d7a:	4602      	mov	r2, r0
     d7c:	4904      	ldr	r1, [pc, #16]	; (d90 <PWM_0_init+0x20>)
     d7e:	4805      	ldr	r0, [pc, #20]	; (d94 <PWM_0_init+0x24>)
     d80:	4b05      	ldr	r3, [pc, #20]	; (d98 <PWM_0_init+0x28>)
     d82:	4798      	blx	r3
     d84:	bd08      	pop	{r3, pc}
     d86:	bf00      	nop
     d88:	00000d55 	.word	0x00000d55
     d8c:	00002769 	.word	0x00002769
     d90:	40003800 	.word	0x40003800
     d94:	20002cfc 	.word	0x20002cfc
     d98:	000012c1 	.word	0x000012c1

00000d9c <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     d9c:	4a04      	ldr	r2, [pc, #16]	; (db0 <PWM_1_CLOCK_init+0x14>)
     d9e:	6953      	ldr	r3, [r2, #20]
     da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     da4:	6153      	str	r3, [r2, #20]
     da6:	2240      	movs	r2, #64	; 0x40
     da8:	4b02      	ldr	r3, [pc, #8]	; (db4 <PWM_1_CLOCK_init+0x18>)
     daa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     dae:	4770      	bx	lr
     db0:	40000800 	.word	0x40000800
     db4:	40001c00 	.word	0x40001c00

00000db8 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
     db8:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
     dba:	4b05      	ldr	r3, [pc, #20]	; (dd0 <PWM_1_init+0x18>)
     dbc:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
     dbe:	4b05      	ldr	r3, [pc, #20]	; (dd4 <PWM_1_init+0x1c>)
     dc0:	4798      	blx	r3
     dc2:	4602      	mov	r2, r0
     dc4:	4904      	ldr	r1, [pc, #16]	; (dd8 <PWM_1_init+0x20>)
     dc6:	4805      	ldr	r0, [pc, #20]	; (ddc <PWM_1_init+0x24>)
     dc8:	4b05      	ldr	r3, [pc, #20]	; (de0 <PWM_1_init+0x28>)
     dca:	4798      	blx	r3
     dcc:	bd08      	pop	{r3, pc}
     dce:	bf00      	nop
     dd0:	00000d9d 	.word	0x00000d9d
     dd4:	00002769 	.word	0x00002769
     dd8:	40003c00 	.word	0x40003c00
     ddc:	20002e1c 	.word	0x20002e1c
     de0:	000012c1 	.word	0x000012c1

00000de4 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     de4:	4a04      	ldr	r2, [pc, #16]	; (df8 <PWM_2_CLOCK_init+0x14>)
     de6:	6993      	ldr	r3, [r2, #24]
     de8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     dec:	6193      	str	r3, [r2, #24]
     dee:	2240      	movs	r2, #64	; 0x40
     df0:	4b02      	ldr	r3, [pc, #8]	; (dfc <PWM_2_CLOCK_init+0x18>)
     df2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     df6:	4770      	bx	lr
     df8:	40000800 	.word	0x40000800
     dfc:	40001c00 	.word	0x40001c00

00000e00 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
     e00:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
     e02:	4b05      	ldr	r3, [pc, #20]	; (e18 <PWM_2_init+0x18>)
     e04:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
     e06:	4b05      	ldr	r3, [pc, #20]	; (e1c <PWM_2_init+0x1c>)
     e08:	4798      	blx	r3
     e0a:	4602      	mov	r2, r0
     e0c:	4904      	ldr	r1, [pc, #16]	; (e20 <PWM_2_init+0x20>)
     e0e:	4805      	ldr	r0, [pc, #20]	; (e24 <PWM_2_init+0x24>)
     e10:	4b05      	ldr	r3, [pc, #20]	; (e28 <PWM_2_init+0x28>)
     e12:	4798      	blx	r3
     e14:	bd08      	pop	{r3, pc}
     e16:	bf00      	nop
     e18:	00000de5 	.word	0x00000de5
     e1c:	00002769 	.word	0x00002769
     e20:	4101a000 	.word	0x4101a000
     e24:	20002d18 	.word	0x20002d18
     e28:	000012c1 	.word	0x000012c1

00000e2c <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     e2c:	4a04      	ldr	r2, [pc, #16]	; (e40 <TIMER_3_CLOCK_init+0x14>)
     e2e:	6993      	ldr	r3, [r2, #24]
     e30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     e34:	6193      	str	r3, [r2, #24]
     e36:	2240      	movs	r2, #64	; 0x40
     e38:	4b02      	ldr	r3, [pc, #8]	; (e44 <TIMER_3_CLOCK_init+0x18>)
     e3a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     e3e:	4770      	bx	lr
     e40:	40000800 	.word	0x40000800
     e44:	40001c00 	.word	0x40001c00

00000e48 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
     e48:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
     e4a:	4b05      	ldr	r3, [pc, #20]	; (e60 <TIMER_3_init+0x18>)
     e4c:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
     e4e:	4b05      	ldr	r3, [pc, #20]	; (e64 <TIMER_3_init+0x1c>)
     e50:	4798      	blx	r3
     e52:	4602      	mov	r2, r0
     e54:	4904      	ldr	r1, [pc, #16]	; (e68 <TIMER_3_init+0x20>)
     e56:	4805      	ldr	r0, [pc, #20]	; (e6c <TIMER_3_init+0x24>)
     e58:	4b05      	ldr	r3, [pc, #20]	; (e70 <TIMER_3_init+0x28>)
     e5a:	4798      	blx	r3
     e5c:	bd08      	pop	{r3, pc}
     e5e:	bf00      	nop
     e60:	00000e2d 	.word	0x00000e2d
     e64:	00002221 	.word	0x00002221
     e68:	41016000 	.word	0x41016000
     e6c:	20002e3c 	.word	0x20002e3c
     e70:	000013dd 	.word	0x000013dd

00000e74 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     e74:	4a04      	ldr	r2, [pc, #16]	; (e88 <TIMER_4_CLOCK_init+0x14>)
     e76:	6993      	ldr	r3, [r2, #24]
     e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     e7c:	6193      	str	r3, [r2, #24]
     e7e:	2240      	movs	r2, #64	; 0x40
     e80:	4b02      	ldr	r3, [pc, #8]	; (e8c <TIMER_4_CLOCK_init+0x18>)
     e82:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     e86:	4770      	bx	lr
     e88:	40000800 	.word	0x40000800
     e8c:	40001c00 	.word	0x40001c00

00000e90 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
     e90:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
     e92:	4b05      	ldr	r3, [pc, #20]	; (ea8 <TIMER_4_init+0x18>)
     e94:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
     e96:	4b05      	ldr	r3, [pc, #20]	; (eac <TIMER_4_init+0x1c>)
     e98:	4798      	blx	r3
     e9a:	4602      	mov	r2, r0
     e9c:	4904      	ldr	r1, [pc, #16]	; (eb0 <TIMER_4_init+0x20>)
     e9e:	4805      	ldr	r0, [pc, #20]	; (eb4 <TIMER_4_init+0x24>)
     ea0:	4b05      	ldr	r3, [pc, #20]	; (eb8 <TIMER_4_init+0x28>)
     ea2:	4798      	blx	r3
     ea4:	bd08      	pop	{r3, pc}
     ea6:	bf00      	nop
     ea8:	00000e75 	.word	0x00000e75
     eac:	00002221 	.word	0x00002221
     eb0:	41018000 	.word	0x41018000
     eb4:	20002d84 	.word	0x20002d84
     eb8:	000013dd 	.word	0x000013dd

00000ebc <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     ebc:	4a04      	ldr	r2, [pc, #16]	; (ed0 <TIMER_5_CLOCK_init+0x14>)
     ebe:	69d3      	ldr	r3, [r2, #28]
     ec0:	f043 0308 	orr.w	r3, r3, #8
     ec4:	61d3      	str	r3, [r2, #28]
     ec6:	2240      	movs	r2, #64	; 0x40
     ec8:	4b02      	ldr	r3, [pc, #8]	; (ed4 <TIMER_5_CLOCK_init+0x18>)
     eca:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     ece:	4770      	bx	lr
     ed0:	40000800 	.word	0x40000800
     ed4:	40001c00 	.word	0x40001c00

00000ed8 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
     ed8:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
     eda:	4b05      	ldr	r3, [pc, #20]	; (ef0 <TIMER_5_init+0x18>)
     edc:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
     ede:	4b05      	ldr	r3, [pc, #20]	; (ef4 <TIMER_5_init+0x1c>)
     ee0:	4798      	blx	r3
     ee2:	4602      	mov	r2, r0
     ee4:	4904      	ldr	r1, [pc, #16]	; (ef8 <TIMER_5_init+0x20>)
     ee6:	4805      	ldr	r0, [pc, #20]	; (efc <TIMER_5_init+0x24>)
     ee8:	4b05      	ldr	r3, [pc, #20]	; (f00 <TIMER_5_init+0x28>)
     eea:	4798      	blx	r3
     eec:	bd08      	pop	{r3, pc}
     eee:	bf00      	nop
     ef0:	00000ebd 	.word	0x00000ebd
     ef4:	00002221 	.word	0x00002221
     ef8:	42000c00 	.word	0x42000c00
     efc:	20002ddc 	.word	0x20002ddc
     f00:	000013dd 	.word	0x000013dd

00000f04 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
     f04:	4a04      	ldr	r2, [pc, #16]	; (f18 <TIMER_6_CLOCK_init+0x14>)
     f06:	69d3      	ldr	r3, [r2, #28]
     f08:	f043 0310 	orr.w	r3, r3, #16
     f0c:	61d3      	str	r3, [r2, #28]
     f0e:	2240      	movs	r2, #64	; 0x40
     f10:	4b02      	ldr	r3, [pc, #8]	; (f1c <TIMER_6_CLOCK_init+0x18>)
     f12:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     f16:	4770      	bx	lr
     f18:	40000800 	.word	0x40000800
     f1c:	40001c00 	.word	0x40001c00

00000f20 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
     f20:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
     f22:	4b05      	ldr	r3, [pc, #20]	; (f38 <TIMER_6_init+0x18>)
     f24:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
     f26:	4b05      	ldr	r3, [pc, #20]	; (f3c <TIMER_6_init+0x1c>)
     f28:	4798      	blx	r3
     f2a:	4602      	mov	r2, r0
     f2c:	4904      	ldr	r1, [pc, #16]	; (f40 <TIMER_6_init+0x20>)
     f2e:	4805      	ldr	r0, [pc, #20]	; (f44 <TIMER_6_init+0x24>)
     f30:	4b05      	ldr	r3, [pc, #20]	; (f48 <TIMER_6_init+0x28>)
     f32:	4798      	blx	r3
     f34:	bd08      	pop	{r3, pc}
     f36:	bf00      	nop
     f38:	00000f05 	.word	0x00000f05
     f3c:	00002221 	.word	0x00002221
     f40:	42001000 	.word	0x42001000
     f44:	20002dfc 	.word	0x20002dfc
     f48:	000013dd 	.word	0x000013dd

00000f4c <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
     f4c:	4a04      	ldr	r2, [pc, #16]	; (f60 <TIMER_7_CLOCK_init+0x14>)
     f4e:	6a13      	ldr	r3, [r2, #32]
     f50:	f043 0310 	orr.w	r3, r3, #16
     f54:	6213      	str	r3, [r2, #32]
     f56:	2240      	movs	r2, #64	; 0x40
     f58:	4b02      	ldr	r3, [pc, #8]	; (f64 <TIMER_7_CLOCK_init+0x18>)
     f5a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     f5e:	4770      	bx	lr
     f60:	40000800 	.word	0x40000800
     f64:	40001c00 	.word	0x40001c00

00000f68 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
     f68:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
     f6a:	4b05      	ldr	r3, [pc, #20]	; (f80 <TIMER_7_init+0x18>)
     f6c:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
     f6e:	4b05      	ldr	r3, [pc, #20]	; (f84 <TIMER_7_init+0x1c>)
     f70:	4798      	blx	r3
     f72:	4602      	mov	r2, r0
     f74:	4904      	ldr	r1, [pc, #16]	; (f88 <TIMER_7_init+0x20>)
     f76:	4805      	ldr	r0, [pc, #20]	; (f8c <TIMER_7_init+0x24>)
     f78:	4b05      	ldr	r3, [pc, #20]	; (f90 <TIMER_7_init+0x28>)
     f7a:	4798      	blx	r3
     f7c:	bd08      	pop	{r3, pc}
     f7e:	bf00      	nop
     f80:	00000f4d 	.word	0x00000f4d
     f84:	00002221 	.word	0x00002221
     f88:	43001000 	.word	0x43001000
     f8c:	20002d50 	.word	0x20002d50
     f90:	000013dd 	.word	0x000013dd

00000f94 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     f94:	4a02      	ldr	r2, [pc, #8]	; (fa0 <WDT_0_CLOCK_init+0xc>)
     f96:	6953      	ldr	r3, [r2, #20]
     f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     f9c:	6153      	str	r3, [r2, #20]
     f9e:	4770      	bx	lr
     fa0:	40000800 	.word	0x40000800

00000fa4 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     fa4:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     fa6:	4b0a      	ldr	r3, [pc, #40]	; (fd0 <WDT_0_init+0x2c>)
     fa8:	4798      	blx	r3
	ASSERT(wdt && hw);
     faa:	2252      	movs	r2, #82	; 0x52
     fac:	4909      	ldr	r1, [pc, #36]	; (fd4 <WDT_0_init+0x30>)
     fae:	2001      	movs	r0, #1
     fb0:	4b09      	ldr	r3, [pc, #36]	; (fd8 <WDT_0_init+0x34>)
     fb2:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
     fb4:	4809      	ldr	r0, [pc, #36]	; (fdc <WDT_0_init+0x38>)
     fb6:	4b0a      	ldr	r3, [pc, #40]	; (fe0 <WDT_0_init+0x3c>)
     fb8:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
     fba:	4b0a      	ldr	r3, [pc, #40]	; (fe4 <WDT_0_init+0x40>)
     fbc:	4798      	blx	r3

	if(0 == wdt_init(&WDT_0, WDT))
     fbe:	b118      	cbz	r0, fc8 <WDT_0_init+0x24>
	{
		DEBUG_PRINT("WDT Initialised");
	}
	else
	{
		DEBUG_PRINT("WDT Failed to initialize");
     fc0:	4809      	ldr	r0, [pc, #36]	; (fe8 <WDT_0_init+0x44>)
     fc2:	4b0a      	ldr	r3, [pc, #40]	; (fec <WDT_0_init+0x48>)
     fc4:	4798      	blx	r3
     fc6:	bd08      	pop	{r3, pc}
		DEBUG_PRINT("WDT Initialised");
     fc8:	4809      	ldr	r0, [pc, #36]	; (ff0 <WDT_0_init+0x4c>)
     fca:	4b08      	ldr	r3, [pc, #32]	; (fec <WDT_0_init+0x48>)
     fcc:	4798      	blx	r3
     fce:	bd08      	pop	{r3, pc}
     fd0:	00000f95 	.word	0x00000f95
     fd4:	00004fa4 	.word	0x00004fa4
     fd8:	00001421 	.word	0x00001421
     fdc:	20002da4 	.word	0x20002da4
     fe0:	40002000 	.word	0x40002000
     fe4:	000027e5 	.word	0x000027e5
     fe8:	0000503c 	.word	0x0000503c
     fec:	00000719 	.word	0x00000719
     ff0:	0000502c 	.word	0x0000502c

00000ff4 <system_init>:
	}
}

void system_init(void)
{
     ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     ff8:	4b28      	ldr	r3, [pc, #160]	; (109c <system_init+0xa8>)
     ffa:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
     ffc:	4b28      	ldr	r3, [pc, #160]	; (10a0 <system_init+0xac>)
     ffe:	4798      	blx	r3

	AC_0_init();
    1000:	4b28      	ldr	r3, [pc, #160]	; (10a4 <system_init+0xb0>)
    1002:	4798      	blx	r3

	ADC_0_init();
    1004:	4b28      	ldr	r3, [pc, #160]	; (10a8 <system_init+0xb4>)
    1006:	4798      	blx	r3

	ADC_1_init();
    1008:	4b28      	ldr	r3, [pc, #160]	; (10ac <system_init+0xb8>)
    100a:	4798      	blx	r3

	DAC_0_init();
    100c:	4b28      	ldr	r3, [pc, #160]	; (10b0 <system_init+0xbc>)
    100e:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    1010:	4b28      	ldr	r3, [pc, #160]	; (10b4 <system_init+0xc0>)
    1012:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1014:	4b28      	ldr	r3, [pc, #160]	; (10b8 <system_init+0xc4>)
    1016:	4798      	blx	r3

	FLASH_0_init();
    1018:	4b28      	ldr	r3, [pc, #160]	; (10bc <system_init+0xc8>)
    101a:	4798      	blx	r3

	SerialDebug_init();
    101c:	4b28      	ldr	r3, [pc, #160]	; (10c0 <system_init+0xcc>)
    101e:	4798      	blx	r3
	
	ModemData_init();
    1020:	4b28      	ldr	r3, [pc, #160]	; (10c4 <system_init+0xd0>)
    1022:	4798      	blx	r3

	PWM_0_init();
    1024:	4b28      	ldr	r3, [pc, #160]	; (10c8 <system_init+0xd4>)
    1026:	4798      	blx	r3

	PWM_1_init();
    1028:	4b28      	ldr	r3, [pc, #160]	; (10cc <system_init+0xd8>)
    102a:	4798      	blx	r3

	PWM_2_init();
    102c:	4b28      	ldr	r3, [pc, #160]	; (10d0 <system_init+0xdc>)
    102e:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1030:	4c28      	ldr	r4, [pc, #160]	; (10d4 <system_init+0xe0>)
    1032:	69a3      	ldr	r3, [r4, #24]
    1034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1038:	61a3      	str	r3, [r4, #24]
    103a:	4f27      	ldr	r7, [pc, #156]	; (10d8 <system_init+0xe4>)
    103c:	f04f 0840 	mov.w	r8, #64	; 0x40
    1040:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    1044:	4e25      	ldr	r6, [pc, #148]	; (10dc <system_init+0xe8>)
    1046:	47b0      	blx	r6
    1048:	4602      	mov	r2, r0
    104a:	4925      	ldr	r1, [pc, #148]	; (10e0 <system_init+0xec>)
    104c:	4825      	ldr	r0, [pc, #148]	; (10e4 <system_init+0xf0>)
    104e:	4d26      	ldr	r5, [pc, #152]	; (10e8 <system_init+0xf4>)
    1050:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1052:	69e3      	ldr	r3, [r4, #28]
    1054:	f043 0320 	orr.w	r3, r3, #32
    1058:	61e3      	str	r3, [r4, #28]
    105a:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    105e:	47b0      	blx	r6
    1060:	4602      	mov	r2, r0
    1062:	4922      	ldr	r1, [pc, #136]	; (10ec <system_init+0xf8>)
    1064:	4822      	ldr	r0, [pc, #136]	; (10f0 <system_init+0xfc>)
    1066:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1068:	69e3      	ldr	r3, [r4, #28]
    106a:	ea43 0308 	orr.w	r3, r3, r8
    106e:	61e3      	str	r3, [r4, #28]
    1070:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    1074:	47b0      	blx	r6
    1076:	4602      	mov	r2, r0
    1078:	491e      	ldr	r1, [pc, #120]	; (10f4 <system_init+0x100>)
    107a:	481f      	ldr	r0, [pc, #124]	; (10f8 <system_init+0x104>)
    107c:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    107e:	4b1f      	ldr	r3, [pc, #124]	; (10fc <system_init+0x108>)
    1080:	4798      	blx	r3

	TIMER_4_init();
    1082:	4b1f      	ldr	r3, [pc, #124]	; (1100 <system_init+0x10c>)
    1084:	4798      	blx	r3

	TIMER_5_init();
    1086:	4b1f      	ldr	r3, [pc, #124]	; (1104 <system_init+0x110>)
    1088:	4798      	blx	r3

	TIMER_6_init();
    108a:	4b1f      	ldr	r3, [pc, #124]	; (1108 <system_init+0x114>)
    108c:	4798      	blx	r3

	TIMER_7_init();
    108e:	4b1f      	ldr	r3, [pc, #124]	; (110c <system_init+0x118>)
    1090:	4798      	blx	r3
	
	WDT_0_init();
    1092:	4b1f      	ldr	r3, [pc, #124]	; (1110 <system_init+0x11c>)
    1094:	4798      	blx	r3
    1096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    109a:	bf00      	nop
    109c:	000016e1 	.word	0x000016e1
    10a0:	00000d41 	.word	0x00000d41
    10a4:	0000095d 	.word	0x0000095d
    10a8:	00000b15 	.word	0x00000b15
    10ac:	00000b5d 	.word	0x00000b5d
    10b0:	00000b9d 	.word	0x00000b9d
    10b4:	00000bbd 	.word	0x00000bbd
    10b8:	00000be5 	.word	0x00000be5
    10bc:	00000c11 	.word	0x00000c11
    10c0:	00000d25 	.word	0x00000d25
    10c4:	00000c9d 	.word	0x00000c9d
    10c8:	00000d71 	.word	0x00000d71
    10cc:	00000db9 	.word	0x00000db9
    10d0:	00000e01 	.word	0x00000e01
    10d4:	40000800 	.word	0x40000800
    10d8:	40001c00 	.word	0x40001c00
    10dc:	00002761 	.word	0x00002761
    10e0:	4101c000 	.word	0x4101c000
    10e4:	20002e5c 	.word	0x20002e5c
    10e8:	000013dd 	.word	0x000013dd
    10ec:	42001400 	.word	0x42001400
    10f0:	20002dbc 	.word	0x20002dbc
    10f4:	42001800 	.word	0x42001800
    10f8:	20002cdc 	.word	0x20002cdc
    10fc:	00000e49 	.word	0x00000e49
    1100:	00000e91 	.word	0x00000e91
    1104:	00000ed9 	.word	0x00000ed9
    1108:	00000f21 	.word	0x00000f21
    110c:	00000f69 	.word	0x00000f69
    1110:	00000fa5 	.word	0x00000fa5

00001114 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    1114:	b538      	push	{r3, r4, r5, lr}
    1116:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1118:	4605      	mov	r5, r0
    111a:	b158      	cbz	r0, 1134 <ac_sync_init+0x20>
    111c:	1c08      	adds	r0, r1, #0
    111e:	bf18      	it	ne
    1120:	2001      	movne	r0, #1
    1122:	223b      	movs	r2, #59	; 0x3b
    1124:	4904      	ldr	r1, [pc, #16]	; (1138 <ac_sync_init+0x24>)
    1126:	4b05      	ldr	r3, [pc, #20]	; (113c <ac_sync_init+0x28>)
    1128:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    112a:	4621      	mov	r1, r4
    112c:	4628      	mov	r0, r5
    112e:	4b04      	ldr	r3, [pc, #16]	; (1140 <ac_sync_init+0x2c>)
    1130:	4798      	blx	r3
}
    1132:	bd38      	pop	{r3, r4, r5, pc}
    1134:	2000      	movs	r0, #0
    1136:	e7f4      	b.n	1122 <ac_sync_init+0xe>
    1138:	00005058 	.word	0x00005058
    113c:	00001421 	.word	0x00001421
    1140:	000015a9 	.word	0x000015a9

00001144 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1144:	b538      	push	{r3, r4, r5, lr}
    1146:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1148:	4605      	mov	r5, r0
    114a:	b158      	cbz	r0, 1164 <adc_sync_init+0x20>
    114c:	1c08      	adds	r0, r1, #0
    114e:	bf18      	it	ne
    1150:	2001      	movne	r0, #1
    1152:	2243      	movs	r2, #67	; 0x43
    1154:	4904      	ldr	r1, [pc, #16]	; (1168 <adc_sync_init+0x24>)
    1156:	4b05      	ldr	r3, [pc, #20]	; (116c <adc_sync_init+0x28>)
    1158:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    115a:	4621      	mov	r1, r4
    115c:	4628      	mov	r0, r5
    115e:	4b04      	ldr	r3, [pc, #16]	; (1170 <adc_sync_init+0x2c>)
    1160:	4798      	blx	r3
}
    1162:	bd38      	pop	{r3, r4, r5, pc}
    1164:	2000      	movs	r0, #0
    1166:	e7f4      	b.n	1152 <adc_sync_init+0xe>
    1168:	00005074 	.word	0x00005074
    116c:	00001421 	.word	0x00001421
    1170:	00001681 	.word	0x00001681

00001174 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1174:	b538      	push	{r3, r4, r5, lr}
    1176:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    1178:	4604      	mov	r4, r0
    117a:	b198      	cbz	r0, 11a4 <dac_sync_init+0x30>
    117c:	1c08      	adds	r0, r1, #0
    117e:	bf18      	it	ne
    1180:	2001      	movne	r0, #1
    1182:	223c      	movs	r2, #60	; 0x3c
    1184:	4908      	ldr	r1, [pc, #32]	; (11a8 <dac_sync_init+0x34>)
    1186:	4b09      	ldr	r3, [pc, #36]	; (11ac <dac_sync_init+0x38>)
    1188:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    118a:	4629      	mov	r1, r5
    118c:	4620      	mov	r0, r4
    118e:	4b08      	ldr	r3, [pc, #32]	; (11b0 <dac_sync_init+0x3c>)
    1190:	4798      	blx	r3
	if (rc) {
    1192:	4602      	mov	r2, r0
    1194:	b920      	cbnz	r0, 11a0 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    1196:	2300      	movs	r3, #0
    1198:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    119a:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    119c:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    119e:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    11a0:	4610      	mov	r0, r2
    11a2:	bd38      	pop	{r3, r4, r5, pc}
    11a4:	2000      	movs	r0, #0
    11a6:	e7ec      	b.n	1182 <dac_sync_init+0xe>
    11a8:	00005090 	.word	0x00005090
    11ac:	00001421 	.word	0x00001421
    11b0:	00001799 	.word	0x00001799

000011b4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    11b4:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    11b6:	4b02      	ldr	r3, [pc, #8]	; (11c0 <delay_init+0xc>)
    11b8:	6018      	str	r0, [r3, #0]
    11ba:	4b02      	ldr	r3, [pc, #8]	; (11c4 <delay_init+0x10>)
    11bc:	4798      	blx	r3
    11be:	bd08      	pop	{r3, pc}
    11c0:	2000018c 	.word	0x2000018c
    11c4:	00001f1d 	.word	0x00001f1d

000011c8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    11c8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    11ca:	4b04      	ldr	r3, [pc, #16]	; (11dc <delay_ms+0x14>)
    11cc:	681c      	ldr	r4, [r3, #0]
    11ce:	4b04      	ldr	r3, [pc, #16]	; (11e0 <delay_ms+0x18>)
    11d0:	4798      	blx	r3
    11d2:	4601      	mov	r1, r0
    11d4:	4620      	mov	r0, r4
    11d6:	4b03      	ldr	r3, [pc, #12]	; (11e4 <delay_ms+0x1c>)
    11d8:	4798      	blx	r3
    11da:	bd10      	pop	{r4, pc}
    11dc:	2000018c 	.word	0x2000018c
    11e0:	000016d5 	.word	0x000016d5
    11e4:	00001f31 	.word	0x00001f31

000011e8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    11e8:	b508      	push	{r3, lr}
	return _event_system_init();
    11ea:	4b01      	ldr	r3, [pc, #4]	; (11f0 <event_system_init+0x8>)
    11ec:	4798      	blx	r3
}
    11ee:	bd08      	pop	{r3, pc}
    11f0:	000019d5 	.word	0x000019d5

000011f4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    11f4:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    11f6:	4b0c      	ldr	r3, [pc, #48]	; (1228 <process_ext_irq+0x34>)
    11f8:	685c      	ldr	r4, [r3, #4]
    11fa:	42a0      	cmp	r0, r4
    11fc:	d00e      	beq.n	121c <process_ext_irq+0x28>
    11fe:	2301      	movs	r3, #1
    1200:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    1202:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    1204:	25ff      	movs	r5, #255	; 0xff
    1206:	e003      	b.n	1210 <process_ext_irq+0x1c>
    1208:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    120a:	185a      	adds	r2, r3, r1
    120c:	0852      	lsrs	r2, r2, #1
    120e:	d104      	bne.n	121a <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    1210:	42a0      	cmp	r0, r4
    1212:	d9f9      	bls.n	1208 <process_ext_irq+0x14>
	while (upper >= lower) {
    1214:	b13b      	cbz	r3, 1226 <process_ext_irq+0x32>
			lower = middle + 1;
    1216:	4631      	mov	r1, r6
    1218:	e7f7      	b.n	120a <process_ext_irq+0x16>
    121a:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    121c:	4b02      	ldr	r3, [pc, #8]	; (1228 <process_ext_irq+0x34>)
    121e:	681b      	ldr	r3, [r3, #0]
    1220:	b10b      	cbz	r3, 1226 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    1222:	4798      	blx	r3
    1224:	bd70      	pop	{r4, r5, r6, pc}
    1226:	bd70      	pop	{r4, r5, r6, pc}
    1228:	20000190 	.word	0x20000190

0000122c <ext_irq_init>:
{
    122c:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    122e:	4b05      	ldr	r3, [pc, #20]	; (1244 <ext_irq_init+0x18>)
    1230:	f04f 32ff 	mov.w	r2, #4294967295
    1234:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1236:	2200      	movs	r2, #0
    1238:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    123a:	4803      	ldr	r0, [pc, #12]	; (1248 <ext_irq_init+0x1c>)
    123c:	4b03      	ldr	r3, [pc, #12]	; (124c <ext_irq_init+0x20>)
    123e:	4798      	blx	r3
}
    1240:	bd08      	pop	{r3, pc}
    1242:	bf00      	nop
    1244:	20000190 	.word	0x20000190
    1248:	000011f5 	.word	0x000011f5
    124c:	00001955 	.word	0x00001955

00001250 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1250:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1252:	6943      	ldr	r3, [r0, #20]
    1254:	b103      	cbz	r3, 1258 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1256:	4798      	blx	r3
    1258:	bd08      	pop	{r3, pc}

0000125a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    125a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    125c:	6983      	ldr	r3, [r0, #24]
    125e:	b103      	cbz	r3, 1262 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1260:	4798      	blx	r3
    1262:	bd08      	pop	{r3, pc}

00001264 <flash_init>:
{
    1264:	b538      	push	{r3, r4, r5, lr}
    1266:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1268:	4604      	mov	r4, r0
    126a:	b190      	cbz	r0, 1292 <flash_init+0x2e>
    126c:	1c08      	adds	r0, r1, #0
    126e:	bf18      	it	ne
    1270:	2001      	movne	r0, #1
    1272:	2242      	movs	r2, #66	; 0x42
    1274:	4908      	ldr	r1, [pc, #32]	; (1298 <flash_init+0x34>)
    1276:	4b09      	ldr	r3, [pc, #36]	; (129c <flash_init+0x38>)
    1278:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    127a:	4629      	mov	r1, r5
    127c:	4620      	mov	r0, r4
    127e:	4b08      	ldr	r3, [pc, #32]	; (12a0 <flash_init+0x3c>)
    1280:	4798      	blx	r3
	if (rc) {
    1282:	4603      	mov	r3, r0
    1284:	b918      	cbnz	r0, 128e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1286:	4a07      	ldr	r2, [pc, #28]	; (12a4 <flash_init+0x40>)
    1288:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    128a:	4a07      	ldr	r2, [pc, #28]	; (12a8 <flash_init+0x44>)
    128c:	6062      	str	r2, [r4, #4]
}
    128e:	4618      	mov	r0, r3
    1290:	bd38      	pop	{r3, r4, r5, pc}
    1292:	2000      	movs	r0, #0
    1294:	e7ed      	b.n	1272 <flash_init+0xe>
    1296:	bf00      	nop
    1298:	000050ac 	.word	0x000050ac
    129c:	00001421 	.word	0x00001421
    12a0:	00001b11 	.word	0x00001b11
    12a4:	00001251 	.word	0x00001251
    12a8:	0000125b 	.word	0x0000125b

000012ac <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    12ac:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    12ae:	6943      	ldr	r3, [r0, #20]
    12b0:	b103      	cbz	r3, 12b4 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    12b2:	4798      	blx	r3
    12b4:	bd08      	pop	{r3, pc}

000012b6 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    12b6:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    12b8:	6983      	ldr	r3, [r0, #24]
    12ba:	b103      	cbz	r3, 12be <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    12bc:	4798      	blx	r3
    12be:	bd08      	pop	{r3, pc}

000012c0 <pwm_init>:
{
    12c0:	b538      	push	{r3, r4, r5, lr}
    12c2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    12c4:	4604      	mov	r4, r0
    12c6:	b180      	cbz	r0, 12ea <pwm_init+0x2a>
    12c8:	1c08      	adds	r0, r1, #0
    12ca:	bf18      	it	ne
    12cc:	2001      	movne	r0, #1
    12ce:	223d      	movs	r2, #61	; 0x3d
    12d0:	4907      	ldr	r1, [pc, #28]	; (12f0 <pwm_init+0x30>)
    12d2:	4b08      	ldr	r3, [pc, #32]	; (12f4 <pwm_init+0x34>)
    12d4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    12d6:	4629      	mov	r1, r5
    12d8:	4620      	mov	r0, r4
    12da:	4b07      	ldr	r3, [pc, #28]	; (12f8 <pwm_init+0x38>)
    12dc:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    12de:	4b07      	ldr	r3, [pc, #28]	; (12fc <pwm_init+0x3c>)
    12e0:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    12e2:	4b07      	ldr	r3, [pc, #28]	; (1300 <pwm_init+0x40>)
    12e4:	6063      	str	r3, [r4, #4]
}
    12e6:	2000      	movs	r0, #0
    12e8:	bd38      	pop	{r3, r4, r5, pc}
    12ea:	2000      	movs	r0, #0
    12ec:	e7ef      	b.n	12ce <pwm_init+0xe>
    12ee:	bf00      	nop
    12f0:	000050c4 	.word	0x000050c4
    12f4:	00001421 	.word	0x00001421
    12f8:	00002649 	.word	0x00002649
    12fc:	000012ad 	.word	0x000012ad
    1300:	000012b7 	.word	0x000012b7

00001304 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1306:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1308:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    130a:	b12f      	cbz	r7, 1318 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    130c:	688d      	ldr	r5, [r1, #8]
    130e:	463c      	mov	r4, r7
    1310:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1312:	f1c2 0e01 	rsb	lr, r2, #1
    1316:	e00b      	b.n	1330 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1318:	4b0e      	ldr	r3, [pc, #56]	; (1354 <timer_add_timer_task+0x50>)
    131a:	4798      	blx	r3
		return;
    131c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    131e:	4473      	add	r3, lr
    1320:	68a0      	ldr	r0, [r4, #8]
    1322:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1324:	42ab      	cmp	r3, r5
    1326:	d20a      	bcs.n	133e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1328:	6823      	ldr	r3, [r4, #0]
    132a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    132c:	b153      	cbz	r3, 1344 <timer_add_timer_task+0x40>
    132e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1330:	6863      	ldr	r3, [r4, #4]
    1332:	4293      	cmp	r3, r2
    1334:	d8f3      	bhi.n	131e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1336:	68a0      	ldr	r0, [r4, #8]
    1338:	4403      	add	r3, r0
    133a:	1a9b      	subs	r3, r3, r2
    133c:	e7f2      	b.n	1324 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    133e:	42a7      	cmp	r7, r4
    1340:	d004      	beq.n	134c <timer_add_timer_task+0x48>
    1342:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1344:	4620      	mov	r0, r4
    1346:	4b04      	ldr	r3, [pc, #16]	; (1358 <timer_add_timer_task+0x54>)
    1348:	4798      	blx	r3
    134a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    134c:	4660      	mov	r0, ip
    134e:	4b01      	ldr	r3, [pc, #4]	; (1354 <timer_add_timer_task+0x50>)
    1350:	4798      	blx	r3
    1352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1354:	00001449 	.word	0x00001449
    1358:	00001475 	.word	0x00001475

0000135c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    135c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1360:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1362:	6907      	ldr	r7, [r0, #16]
    1364:	3701      	adds	r7, #1
    1366:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1368:	7e03      	ldrb	r3, [r0, #24]
    136a:	f013 0f01 	tst.w	r3, #1
    136e:	d113      	bne.n	1398 <timer_process_counted+0x3c>
    1370:	7e03      	ldrb	r3, [r0, #24]
    1372:	f013 0f02 	tst.w	r3, #2
    1376:	d10f      	bne.n	1398 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1378:	b354      	cbz	r4, 13d0 <timer_process_counted+0x74>
    137a:	6863      	ldr	r3, [r4, #4]
    137c:	1afb      	subs	r3, r7, r3
    137e:	68a2      	ldr	r2, [r4, #8]
    1380:	4293      	cmp	r3, r2
    1382:	d307      	bcc.n	1394 <timer_process_counted+0x38>
    1384:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1386:	f100 0814 	add.w	r8, r0, #20
    138a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 13d4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    138e:	f8df a048 	ldr.w	sl, [pc, #72]	; 13d8 <timer_process_counted+0x7c>
    1392:	e012      	b.n	13ba <timer_process_counted+0x5e>
    1394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1398:	7e03      	ldrb	r3, [r0, #24]
    139a:	f043 0302 	orr.w	r3, r3, #2
    139e:	7603      	strb	r3, [r0, #24]
		return;
    13a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13a4:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    13a6:	68e3      	ldr	r3, [r4, #12]
    13a8:	4620      	mov	r0, r4
    13aa:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    13ac:	b185      	cbz	r5, 13d0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    13ae:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    13b0:	686b      	ldr	r3, [r5, #4]
    13b2:	1afb      	subs	r3, r7, r3
    13b4:	68aa      	ldr	r2, [r5, #8]
    13b6:	4293      	cmp	r3, r2
    13b8:	d30a      	bcc.n	13d0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    13ba:	4640      	mov	r0, r8
    13bc:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    13be:	7c23      	ldrb	r3, [r4, #16]
    13c0:	2b01      	cmp	r3, #1
    13c2:	d1ef      	bne.n	13a4 <timer_process_counted+0x48>
			tmp->time_label = time;
    13c4:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    13c6:	463a      	mov	r2, r7
    13c8:	4621      	mov	r1, r4
    13ca:	4640      	mov	r0, r8
    13cc:	47d0      	blx	sl
    13ce:	e7e9      	b.n	13a4 <timer_process_counted+0x48>
    13d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13d4:	0000147d 	.word	0x0000147d
    13d8:	00001305 	.word	0x00001305

000013dc <timer_init>:
{
    13dc:	b570      	push	{r4, r5, r6, lr}
    13de:	460e      	mov	r6, r1
    13e0:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    13e2:	4604      	mov	r4, r0
    13e4:	b190      	cbz	r0, 140c <timer_init+0x30>
    13e6:	b199      	cbz	r1, 1410 <timer_init+0x34>
    13e8:	1c10      	adds	r0, r2, #0
    13ea:	bf18      	it	ne
    13ec:	2001      	movne	r0, #1
    13ee:	2245      	movs	r2, #69	; 0x45
    13f0:	4908      	ldr	r1, [pc, #32]	; (1414 <timer_init+0x38>)
    13f2:	4b09      	ldr	r3, [pc, #36]	; (1418 <timer_init+0x3c>)
    13f4:	4798      	blx	r3
	descr->func = func;
    13f6:	4620      	mov	r0, r4
    13f8:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    13fc:	682b      	ldr	r3, [r5, #0]
    13fe:	4631      	mov	r1, r6
    1400:	4798      	blx	r3
	descr->time                           = 0;
    1402:	2000      	movs	r0, #0
    1404:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1406:	4b05      	ldr	r3, [pc, #20]	; (141c <timer_init+0x40>)
    1408:	6063      	str	r3, [r4, #4]
}
    140a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    140c:	2000      	movs	r0, #0
    140e:	e7ee      	b.n	13ee <timer_init+0x12>
    1410:	2000      	movs	r0, #0
    1412:	e7ec      	b.n	13ee <timer_init+0x12>
    1414:	000050dc 	.word	0x000050dc
    1418:	00001421 	.word	0x00001421
    141c:	0000135d 	.word	0x0000135d

00001420 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1420:	b900      	cbnz	r0, 1424 <assert+0x4>
		__asm("BKPT #0");
    1422:	be00      	bkpt	0x0000
    1424:	4770      	bx	lr

00001426 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1426:	6803      	ldr	r3, [r0, #0]
    1428:	b14b      	cbz	r3, 143e <is_list_element+0x18>
		if (it == element) {
    142a:	428b      	cmp	r3, r1
    142c:	d009      	beq.n	1442 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    142e:	681b      	ldr	r3, [r3, #0]
    1430:	b11b      	cbz	r3, 143a <is_list_element+0x14>
		if (it == element) {
    1432:	4299      	cmp	r1, r3
    1434:	d1fb      	bne.n	142e <is_list_element+0x8>
			return true;
    1436:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1438:	4770      	bx	lr
	return false;
    143a:	2000      	movs	r0, #0
    143c:	4770      	bx	lr
    143e:	2000      	movs	r0, #0
    1440:	4770      	bx	lr
			return true;
    1442:	2001      	movs	r0, #1
    1444:	4770      	bx	lr
	...

00001448 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1448:	b538      	push	{r3, r4, r5, lr}
    144a:	4604      	mov	r4, r0
    144c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    144e:	4b06      	ldr	r3, [pc, #24]	; (1468 <list_insert_as_head+0x20>)
    1450:	4798      	blx	r3
    1452:	f080 0001 	eor.w	r0, r0, #1
    1456:	2243      	movs	r2, #67	; 0x43
    1458:	4904      	ldr	r1, [pc, #16]	; (146c <list_insert_as_head+0x24>)
    145a:	b2c0      	uxtb	r0, r0
    145c:	4b04      	ldr	r3, [pc, #16]	; (1470 <list_insert_as_head+0x28>)
    145e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1460:	6823      	ldr	r3, [r4, #0]
    1462:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1464:	6025      	str	r5, [r4, #0]
    1466:	bd38      	pop	{r3, r4, r5, pc}
    1468:	00001427 	.word	0x00001427
    146c:	000050f4 	.word	0x000050f4
    1470:	00001421 	.word	0x00001421

00001474 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1474:	6803      	ldr	r3, [r0, #0]
    1476:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1478:	6001      	str	r1, [r0, #0]
    147a:	4770      	bx	lr

0000147c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    147c:	6803      	ldr	r3, [r0, #0]
    147e:	b10b      	cbz	r3, 1484 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1480:	681a      	ldr	r2, [r3, #0]
    1482:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1484:	4618      	mov	r0, r3
    1486:	4770      	bx	lr

00001488 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1488:	b570      	push	{r4, r5, r6, lr}
    148a:	460e      	mov	r6, r1
    148c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    148e:	4604      	mov	r4, r0
    1490:	b178      	cbz	r0, 14b2 <ringbuffer_init+0x2a>
    1492:	b181      	cbz	r1, 14b6 <ringbuffer_init+0x2e>
    1494:	b1a2      	cbz	r2, 14c0 <ringbuffer_init+0x38>
    1496:	2001      	movs	r0, #1
    1498:	2232      	movs	r2, #50	; 0x32
    149a:	490d      	ldr	r1, [pc, #52]	; (14d0 <ringbuffer_init+0x48>)
    149c:	4b0d      	ldr	r3, [pc, #52]	; (14d4 <ringbuffer_init+0x4c>)
    149e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    14a0:	1e6b      	subs	r3, r5, #1
    14a2:	421d      	tst	r5, r3
    14a4:	d109      	bne.n	14ba <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    14a6:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    14a8:	2000      	movs	r0, #0
    14aa:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    14ac:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    14ae:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    14b0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    14b2:	2000      	movs	r0, #0
    14b4:	e7f0      	b.n	1498 <ringbuffer_init+0x10>
    14b6:	2000      	movs	r0, #0
    14b8:	e7ee      	b.n	1498 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    14ba:	f06f 000c 	mvn.w	r0, #12
    14be:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    14c0:	2232      	movs	r2, #50	; 0x32
    14c2:	4903      	ldr	r1, [pc, #12]	; (14d0 <ringbuffer_init+0x48>)
    14c4:	2000      	movs	r0, #0
    14c6:	4b03      	ldr	r3, [pc, #12]	; (14d4 <ringbuffer_init+0x4c>)
    14c8:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    14ca:	1e6b      	subs	r3, r5, #1
    14cc:	e7eb      	b.n	14a6 <ringbuffer_init+0x1e>
    14ce:	bf00      	nop
    14d0:	00005114 	.word	0x00005114
    14d4:	00001421 	.word	0x00001421

000014d8 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    14d8:	b538      	push	{r3, r4, r5, lr}
    14da:	460d      	mov	r5, r1
	ASSERT(rb);
    14dc:	4604      	mov	r4, r0
    14de:	225b      	movs	r2, #91	; 0x5b
    14e0:	490b      	ldr	r1, [pc, #44]	; (1510 <ringbuffer_put+0x38>)
    14e2:	3000      	adds	r0, #0
    14e4:	bf18      	it	ne
    14e6:	2001      	movne	r0, #1
    14e8:	4b0a      	ldr	r3, [pc, #40]	; (1514 <ringbuffer_put+0x3c>)
    14ea:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    14ec:	68e3      	ldr	r3, [r4, #12]
    14ee:	6862      	ldr	r2, [r4, #4]
    14f0:	4013      	ands	r3, r2
    14f2:	6822      	ldr	r2, [r4, #0]
    14f4:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    14f6:	68e3      	ldr	r3, [r4, #12]
    14f8:	6861      	ldr	r1, [r4, #4]
    14fa:	68a2      	ldr	r2, [r4, #8]
    14fc:	1a9a      	subs	r2, r3, r2
    14fe:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1500:	bf84      	itt	hi
    1502:	1a59      	subhi	r1, r3, r1
    1504:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1506:	3301      	adds	r3, #1
    1508:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    150a:	2000      	movs	r0, #0
    150c:	bd38      	pop	{r3, r4, r5, pc}
    150e:	bf00      	nop
    1510:	00005114 	.word	0x00005114
    1514:	00001421 	.word	0x00001421

00001518 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1518:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    151a:	4a06      	ldr	r2, [pc, #24]	; (1534 <_sbrk+0x1c>)
    151c:	6812      	ldr	r2, [r2, #0]
    151e:	b122      	cbz	r2, 152a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1520:	4a04      	ldr	r2, [pc, #16]	; (1534 <_sbrk+0x1c>)
    1522:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1524:	4403      	add	r3, r0
    1526:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1528:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    152a:	4903      	ldr	r1, [pc, #12]	; (1538 <_sbrk+0x20>)
    152c:	4a01      	ldr	r2, [pc, #4]	; (1534 <_sbrk+0x1c>)
    152e:	6011      	str	r1, [r2, #0]
    1530:	e7f6      	b.n	1520 <_sbrk+0x8>
    1532:	bf00      	nop
    1534:	20000198 	.word	0x20000198
    1538:	20012ea0 	.word	0x20012ea0

0000153c <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    153c:	b510      	push	{r4, lr}
    153e:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    1540:	f44f 7281 	mov.w	r2, #258	; 0x102
    1544:	4915      	ldr	r1, [pc, #84]	; (159c <_ac_init+0x60>)
    1546:	4816      	ldr	r0, [pc, #88]	; (15a0 <_ac_init+0x64>)
    1548:	4284      	cmp	r4, r0
    154a:	bf14      	ite	ne
    154c:	2000      	movne	r0, #0
    154e:	2001      	moveq	r0, #1
    1550:	4b14      	ldr	r3, [pc, #80]	; (15a4 <_ac_init+0x68>)
    1552:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1554:	6a23      	ldr	r3, [r4, #32]
    1556:	f013 0f01 	tst.w	r3, #1
    155a:	d1fb      	bne.n	1554 <_ac_init+0x18>
    155c:	6a23      	ldr	r3, [r4, #32]
    155e:	f013 0f03 	tst.w	r3, #3
    1562:	d1fb      	bne.n	155c <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1564:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    1566:	f013 0f02 	tst.w	r3, #2
    156a:	d114      	bne.n	1596 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    156c:	6a23      	ldr	r3, [r4, #32]
    156e:	f013 0f01 	tst.w	r3, #1
    1572:	d1fb      	bne.n	156c <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    1574:	7823      	ldrb	r3, [r4, #0]
    1576:	f043 0301 	orr.w	r3, r3, #1
    157a:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    157c:	6a23      	ldr	r3, [r4, #32]
    157e:	f013 0f01 	tst.w	r3, #1
    1582:	d1fb      	bne.n	157c <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1584:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1588:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    158a:	2000      	movs	r0, #0
    158c:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    158e:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    1590:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    1592:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    1594:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1596:	f06f 0010 	mvn.w	r0, #16
}
    159a:	bd10      	pop	{r4, pc}
    159c:	00005138 	.word	0x00005138
    15a0:	42002000 	.word	0x42002000
    15a4:	00001421 	.word	0x00001421

000015a8 <_ac_sync_init>:
{
    15a8:	b538      	push	{r3, r4, r5, lr}
    15aa:	460c      	mov	r4, r1
	ASSERT(device);
    15ac:	4605      	mov	r5, r0
    15ae:	226c      	movs	r2, #108	; 0x6c
    15b0:	4905      	ldr	r1, [pc, #20]	; (15c8 <_ac_sync_init+0x20>)
    15b2:	3000      	adds	r0, #0
    15b4:	bf18      	it	ne
    15b6:	2001      	movne	r0, #1
    15b8:	4b04      	ldr	r3, [pc, #16]	; (15cc <_ac_sync_init+0x24>)
    15ba:	4798      	blx	r3
	device->hw = hw;
    15bc:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    15be:	4620      	mov	r0, r4
    15c0:	4b03      	ldr	r3, [pc, #12]	; (15d0 <_ac_sync_init+0x28>)
    15c2:	4798      	blx	r3
}
    15c4:	bd38      	pop	{r3, r4, r5, pc}
    15c6:	bf00      	nop
    15c8:	00005138 	.word	0x00005138
    15cc:	00001421 	.word	0x00001421
    15d0:	0000153d 	.word	0x0000153d

000015d4 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15d6:	f013 0f01 	tst.w	r3, #1
    15da:	d1fb      	bne.n	15d4 <_adc_init>
    15dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15de:	f013 0f03 	tst.w	r3, #3
    15e2:	d1fb      	bne.n	15dc <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    15e4:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    15e6:	f013 0f02 	tst.w	r3, #2
    15ea:	d12a      	bne.n	1642 <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    15ee:	f013 0f01 	tst.w	r3, #1
    15f2:	d1fb      	bne.n	15ec <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    15f4:	8803      	ldrh	r3, [r0, #0]
    15f6:	b29b      	uxth	r3, r3
    15f8:	f043 0301 	orr.w	r3, r3, #1
    15fc:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    15fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1600:	f013 0f01 	tst.w	r3, #1
    1604:	d1fb      	bne.n	15fe <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1606:	2216      	movs	r2, #22
    1608:	4b0f      	ldr	r3, [pc, #60]	; (1648 <_adc_init+0x74>)
    160a:	fb02 3101 	mla	r1, r2, r1, r3
    160e:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1610:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1612:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1614:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1616:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1618:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    161a:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    161c:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    161e:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1620:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1622:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1624:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1626:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1628:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    162a:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    162c:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    162e:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1630:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1632:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1634:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1636:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1638:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    163a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    163c:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    163e:	2000      	movs	r0, #0
    1640:	4770      	bx	lr
		return ERR_DENIED;
    1642:	f06f 0010 	mvn.w	r0, #16
}
    1646:	4770      	bx	lr
    1648:	0000514c 	.word	0x0000514c

0000164c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    164c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1650:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1654:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    1658:	b148      	cbz	r0, 166e <_adc_get_regs+0x22>
    165a:	2801      	cmp	r0, #1
    165c:	d009      	beq.n	1672 <_adc_get_regs+0x26>
{
    165e:	b508      	push	{r3, lr}
	ASSERT(false);
    1660:	2291      	movs	r2, #145	; 0x91
    1662:	4905      	ldr	r1, [pc, #20]	; (1678 <_adc_get_regs+0x2c>)
    1664:	2000      	movs	r0, #0
    1666:	4b05      	ldr	r3, [pc, #20]	; (167c <_adc_get_regs+0x30>)
    1668:	4798      	blx	r3
	return 0;
    166a:	2000      	movs	r0, #0
    166c:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    166e:	2000      	movs	r0, #0
    1670:	4770      	bx	lr
    1672:	2001      	movs	r0, #1
    1674:	4770      	bx	lr
    1676:	bf00      	nop
    1678:	00005178 	.word	0x00005178
    167c:	00001421 	.word	0x00001421

00001680 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1680:	b538      	push	{r3, r4, r5, lr}
    1682:	460c      	mov	r4, r1
	ASSERT(device);
    1684:	4605      	mov	r5, r0
    1686:	22d5      	movs	r2, #213	; 0xd5
    1688:	4907      	ldr	r1, [pc, #28]	; (16a8 <_adc_sync_init+0x28>)
    168a:	3000      	adds	r0, #0
    168c:	bf18      	it	ne
    168e:	2001      	movne	r0, #1
    1690:	4b06      	ldr	r3, [pc, #24]	; (16ac <_adc_sync_init+0x2c>)
    1692:	4798      	blx	r3

	device->hw = hw;
    1694:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1696:	4620      	mov	r0, r4
    1698:	4b05      	ldr	r3, [pc, #20]	; (16b0 <_adc_sync_init+0x30>)
    169a:	4798      	blx	r3
    169c:	4601      	mov	r1, r0
    169e:	4620      	mov	r0, r4
    16a0:	4b04      	ldr	r3, [pc, #16]	; (16b4 <_adc_sync_init+0x34>)
    16a2:	4798      	blx	r3
}
    16a4:	bd38      	pop	{r3, r4, r5, pc}
    16a6:	bf00      	nop
    16a8:	00005178 	.word	0x00005178
    16ac:	00001421 	.word	0x00001421
    16b0:	0000164d 	.word	0x0000164d
    16b4:	000015d5 	.word	0x000015d5

000016b8 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    16b8:	0943      	lsrs	r3, r0, #5
    16ba:	f000 001f 	and.w	r0, r0, #31
    16be:	2201      	movs	r2, #1
    16c0:	fa02 f000 	lsl.w	r0, r2, r0
    16c4:	3340      	adds	r3, #64	; 0x40
    16c6:	4a02      	ldr	r2, [pc, #8]	; (16d0 <_irq_set+0x18>)
    16c8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    16cc:	4770      	bx	lr
    16ce:	bf00      	nop
    16d0:	e000e100 	.word	0xe000e100

000016d4 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    16d4:	f64b 3380 	movw	r3, #48000	; 0xbb80
    16d8:	fb03 f000 	mul.w	r0, r3, r0
    16dc:	4770      	bx	lr
	...

000016e0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    16e0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    16e2:	4a0c      	ldr	r2, [pc, #48]	; (1714 <_init_chip+0x34>)
    16e4:	8813      	ldrh	r3, [r2, #0]
    16e6:	b29b      	uxth	r3, r3
    16e8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    16ea:	4b0b      	ldr	r3, [pc, #44]	; (1718 <_init_chip+0x38>)
    16ec:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    16ee:	4b0b      	ldr	r3, [pc, #44]	; (171c <_init_chip+0x3c>)
    16f0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    16f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    16f6:	4c0a      	ldr	r4, [pc, #40]	; (1720 <_init_chip+0x40>)
    16f8:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    16fa:	4b0a      	ldr	r3, [pc, #40]	; (1724 <_init_chip+0x44>)
    16fc:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    16fe:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1702:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1704:	4a08      	ldr	r2, [pc, #32]	; (1728 <_init_chip+0x48>)
    1706:	6913      	ldr	r3, [r2, #16]
    1708:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    170c:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    170e:	4b07      	ldr	r3, [pc, #28]	; (172c <_init_chip+0x4c>)
    1710:	4798      	blx	r3
    1712:	bd10      	pop	{r4, pc}
    1714:	41004000 	.word	0x41004000
    1718:	00001bb1 	.word	0x00001bb1
    171c:	00001ad9 	.word	0x00001ad9
    1720:	00001a31 	.word	0x00001a31
    1724:	00001bdd 	.word	0x00001bdd
    1728:	40000800 	.word	0x40000800
    172c:	00001839 	.word	0x00001839

00001730 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    1730:	b510      	push	{r4, lr}
    1732:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    1734:	22f3      	movs	r2, #243	; 0xf3
    1736:	4915      	ldr	r1, [pc, #84]	; (178c <_dac_init+0x5c>)
    1738:	4815      	ldr	r0, [pc, #84]	; (1790 <_dac_init+0x60>)
    173a:	4284      	cmp	r4, r0
    173c:	bf14      	ite	ne
    173e:	2000      	movne	r0, #0
    1740:	2001      	moveq	r0, #1
    1742:	4b14      	ldr	r3, [pc, #80]	; (1794 <_dac_init+0x64>)
    1744:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1746:	68a3      	ldr	r3, [r4, #8]
    1748:	f013 0f01 	tst.w	r3, #1
    174c:	d1fb      	bne.n	1746 <_dac_init+0x16>
    174e:	68a3      	ldr	r3, [r4, #8]
    1750:	f013 0f03 	tst.w	r3, #3
    1754:	d1fb      	bne.n	174e <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1756:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    1758:	f013 0f02 	tst.w	r3, #2
    175c:	d113      	bne.n	1786 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    175e:	68a3      	ldr	r3, [r4, #8]
    1760:	f013 0f01 	tst.w	r3, #1
    1764:	d1fb      	bne.n	175e <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    1766:	7823      	ldrb	r3, [r4, #0]
    1768:	f043 0301 	orr.w	r3, r3, #1
    176c:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    176e:	68a3      	ldr	r3, [r4, #8]
    1770:	f013 0f01 	tst.w	r3, #1
    1774:	d1fb      	bne.n	176e <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    1776:	2000      	movs	r0, #0
    1778:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    177a:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    177c:	81a0      	strh	r0, [r4, #12]
    177e:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    1780:	2301      	movs	r3, #1
    1782:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    1784:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    1786:	f06f 0003 	mvn.w	r0, #3
}
    178a:	bd10      	pop	{r4, pc}
    178c:	00005190 	.word	0x00005190
    1790:	43002400 	.word	0x43002400
    1794:	00001421 	.word	0x00001421

00001798 <_dac_sync_init>:
{
    1798:	b538      	push	{r3, r4, r5, lr}
    179a:	460c      	mov	r4, r1
	ASSERT(device);
    179c:	4605      	mov	r5, r0
    179e:	2261      	movs	r2, #97	; 0x61
    17a0:	4905      	ldr	r1, [pc, #20]	; (17b8 <_dac_sync_init+0x20>)
    17a2:	3000      	adds	r0, #0
    17a4:	bf18      	it	ne
    17a6:	2001      	movne	r0, #1
    17a8:	4b04      	ldr	r3, [pc, #16]	; (17bc <_dac_sync_init+0x24>)
    17aa:	4798      	blx	r3
	device->hw = hw;
    17ac:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    17ae:	4620      	mov	r0, r4
    17b0:	4b03      	ldr	r3, [pc, #12]	; (17c0 <_dac_sync_init+0x28>)
    17b2:	4798      	blx	r3
}
    17b4:	bd38      	pop	{r3, r4, r5, pc}
    17b6:	bf00      	nop
    17b8:	00005190 	.word	0x00005190
    17bc:	00001421 	.word	0x00001421
    17c0:	00001731 	.word	0x00001731

000017c4 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    17c4:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    17c6:	4a1a      	ldr	r2, [pc, #104]	; (1830 <_dmac_handler+0x6c>)
    17c8:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    17ca:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    17ce:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    17d2:	4818      	ldr	r0, [pc, #96]	; (1834 <_dmac_handler+0x70>)
    17d4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    17d8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    17dc:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    17e0:	f012 0f01 	tst.w	r2, #1
    17e4:	d10a      	bne.n	17fc <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    17e6:	011a      	lsls	r2, r3, #4
    17e8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    17ec:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    17f0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    17f4:	f012 0f02 	tst.w	r2, #2
    17f8:	d10b      	bne.n	1812 <_dmac_handler+0x4e>
    17fa:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    17fc:	011a      	lsls	r2, r3, #4
    17fe:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1802:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1806:	2101      	movs	r1, #1
    1808:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    180c:	6843      	ldr	r3, [r0, #4]
    180e:	4798      	blx	r3
    1810:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1812:	011a      	lsls	r2, r3, #4
    1814:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1818:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    181c:	2102      	movs	r1, #2
    181e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1822:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1826:	4a03      	ldr	r2, [pc, #12]	; (1834 <_dmac_handler+0x70>)
    1828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    182c:	4798      	blx	r3
	}
}
    182e:	e7e4      	b.n	17fa <_dmac_handler+0x36>
    1830:	4100a000 	.word	0x4100a000
    1834:	200001a0 	.word	0x200001a0

00001838 <_dma_init>:
{
    1838:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    183a:	4a33      	ldr	r2, [pc, #204]	; (1908 <_dma_init+0xd0>)
    183c:	8813      	ldrh	r3, [r2, #0]
    183e:	f023 0302 	bic.w	r3, r3, #2
    1842:	041b      	lsls	r3, r3, #16
    1844:	0c1b      	lsrs	r3, r3, #16
    1846:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1848:	8853      	ldrh	r3, [r2, #2]
    184a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    184e:	041b      	lsls	r3, r3, #16
    1850:	0c1b      	lsrs	r3, r3, #16
    1852:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1854:	8813      	ldrh	r3, [r2, #0]
    1856:	b29b      	uxth	r3, r3
    1858:	f043 0301 	orr.w	r3, r3, #1
    185c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    185e:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1860:	f013 0f01 	tst.w	r3, #1
    1864:	d1fb      	bne.n	185e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1866:	4b28      	ldr	r3, [pc, #160]	; (1908 <_dma_init+0xd0>)
    1868:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    186c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    186e:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1870:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1874:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1876:	2000      	movs	r0, #0
    1878:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    187a:	4a24      	ldr	r2, [pc, #144]	; (190c <_dma_init+0xd4>)
    187c:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    1880:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1882:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    1886:	639a      	str	r2, [r3, #56]	; 0x38
    1888:	4b21      	ldr	r3, [pc, #132]	; (1910 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    188a:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    188e:	681c      	ldr	r4, [r3, #0]
    1890:	0101      	lsls	r1, r0, #4
    1892:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    1896:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    189a:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    189c:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    189e:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    18a2:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    18a4:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    18a8:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    18aa:	4429      	add	r1, r5
    18ac:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    18b0:	3001      	adds	r0, #1
    18b2:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    18b4:	2820      	cmp	r0, #32
    18b6:	d1ea      	bne.n	188e <_dma_init+0x56>
    18b8:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    18ba:	2001      	movs	r0, #1
    18bc:	4915      	ldr	r1, [pc, #84]	; (1914 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    18be:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    18c0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    18c4:	d00b      	beq.n	18de <_dma_init+0xa6>
    18c6:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    18c8:	2b24      	cmp	r3, #36	; 0x24
    18ca:	d1f8      	bne.n	18be <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    18cc:	4a0e      	ldr	r2, [pc, #56]	; (1908 <_dma_init+0xd0>)
    18ce:	8813      	ldrh	r3, [r2, #0]
    18d0:	b29b      	uxth	r3, r3
    18d2:	f043 0302 	orr.w	r3, r3, #2
    18d6:	8013      	strh	r3, [r2, #0]
}
    18d8:	2000      	movs	r0, #0
    18da:	bc30      	pop	{r4, r5}
    18dc:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    18de:	095c      	lsrs	r4, r3, #5
    18e0:	f002 021f 	and.w	r2, r2, #31
    18e4:	fa00 f202 	lsl.w	r2, r0, r2
    18e8:	f104 0520 	add.w	r5, r4, #32
    18ec:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    18f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18f4:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    18f8:	f104 0560 	add.w	r5, r4, #96	; 0x60
    18fc:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1900:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    1904:	e7df      	b.n	18c6 <_dma_init+0x8e>
    1906:	bf00      	nop
    1908:	4100a000 	.word	0x4100a000
    190c:	200001a0 	.word	0x200001a0
    1910:	000051a8 	.word	0x000051a8
    1914:	e000e100 	.word	0xe000e100

00001918 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    1918:	b508      	push	{r3, lr}
	_dmac_handler();
    191a:	4b01      	ldr	r3, [pc, #4]	; (1920 <DMAC_0_Handler+0x8>)
    191c:	4798      	blx	r3
    191e:	bd08      	pop	{r3, pc}
    1920:	000017c5 	.word	0x000017c5

00001924 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    1924:	b508      	push	{r3, lr}
	_dmac_handler();
    1926:	4b01      	ldr	r3, [pc, #4]	; (192c <DMAC_1_Handler+0x8>)
    1928:	4798      	blx	r3
    192a:	bd08      	pop	{r3, pc}
    192c:	000017c5 	.word	0x000017c5

00001930 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    1930:	b508      	push	{r3, lr}
	_dmac_handler();
    1932:	4b01      	ldr	r3, [pc, #4]	; (1938 <DMAC_2_Handler+0x8>)
    1934:	4798      	blx	r3
    1936:	bd08      	pop	{r3, pc}
    1938:	000017c5 	.word	0x000017c5

0000193c <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    193c:	b508      	push	{r3, lr}
	_dmac_handler();
    193e:	4b01      	ldr	r3, [pc, #4]	; (1944 <DMAC_3_Handler+0x8>)
    1940:	4798      	blx	r3
    1942:	bd08      	pop	{r3, pc}
    1944:	000017c5 	.word	0x000017c5

00001948 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    1948:	b508      	push	{r3, lr}
	_dmac_handler();
    194a:	4b01      	ldr	r3, [pc, #4]	; (1950 <DMAC_4_Handler+0x8>)
    194c:	4798      	blx	r3
    194e:	bd08      	pop	{r3, pc}
    1950:	000017c5 	.word	0x000017c5

00001954 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1954:	4a1e      	ldr	r2, [pc, #120]	; (19d0 <_ext_irq_init+0x7c>)
    1956:	6853      	ldr	r3, [r2, #4]
    1958:	f013 0f01 	tst.w	r3, #1
    195c:	d1fb      	bne.n	1956 <_ext_irq_init+0x2>
    195e:	4a1c      	ldr	r2, [pc, #112]	; (19d0 <_ext_irq_init+0x7c>)
    1960:	6853      	ldr	r3, [r2, #4]
    1962:	f013 0f03 	tst.w	r3, #3
    1966:	d1fb      	bne.n	1960 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1968:	4b19      	ldr	r3, [pc, #100]	; (19d0 <_ext_irq_init+0x7c>)
    196a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    196c:	f013 0f02 	tst.w	r3, #2
    1970:	d12b      	bne.n	19ca <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1972:	4a17      	ldr	r2, [pc, #92]	; (19d0 <_ext_irq_init+0x7c>)
    1974:	6853      	ldr	r3, [r2, #4]
    1976:	f013 0f01 	tst.w	r3, #1
    197a:	d1fb      	bne.n	1974 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    197c:	4a14      	ldr	r2, [pc, #80]	; (19d0 <_ext_irq_init+0x7c>)
    197e:	7813      	ldrb	r3, [r2, #0]
    1980:	f043 0301 	orr.w	r3, r3, #1
    1984:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1986:	6853      	ldr	r3, [r2, #4]
    1988:	f013 0f01 	tst.w	r3, #1
    198c:	d1fb      	bne.n	1986 <_ext_irq_init+0x32>
    198e:	4a10      	ldr	r2, [pc, #64]	; (19d0 <_ext_irq_init+0x7c>)
    1990:	6853      	ldr	r3, [r2, #4]
    1992:	f013 0f03 	tst.w	r3, #3
    1996:	d1fb      	bne.n	1990 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1998:	4b0d      	ldr	r3, [pc, #52]	; (19d0 <_ext_irq_init+0x7c>)
    199a:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    199c:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    19a0:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    19a2:	2200      	movs	r2, #0
    19a4:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    19a6:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    19a8:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    19aa:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    19ac:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    19ae:	61da      	str	r2, [r3, #28]
    19b0:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    19b2:	461a      	mov	r2, r3
    19b4:	6853      	ldr	r3, [r2, #4]
    19b6:	f013 0f03 	tst.w	r3, #3
    19ba:	d1fb      	bne.n	19b4 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    19bc:	4a04      	ldr	r2, [pc, #16]	; (19d0 <_ext_irq_init+0x7c>)
    19be:	7813      	ldrb	r3, [r2, #0]
    19c0:	f043 0302 	orr.w	r3, r3, #2
    19c4:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    19c6:	2000      	movs	r0, #0
    19c8:	4770      	bx	lr
		return ERR_DENIED;
    19ca:	f06f 0010 	mvn.w	r0, #16
}
    19ce:	4770      	bx	lr
    19d0:	40002800 	.word	0x40002800

000019d4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    19d4:	b430      	push	{r4, r5}
    19d6:	4814      	ldr	r0, [pc, #80]	; (1a28 <_event_system_init+0x54>)
    19d8:	f100 0543 	add.w	r5, r0, #67	; 0x43
    19dc:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    19de:	4c13      	ldr	r4, [pc, #76]	; (1a2c <_event_system_init+0x58>)
    19e0:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    19e2:	f813 1b01 	ldrb.w	r1, [r3], #1
    19e6:	3248      	adds	r2, #72	; 0x48
    19e8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    19ec:	42ab      	cmp	r3, r5
    19ee:	d1f7      	bne.n	19e0 <_event_system_init+0xc>
    19f0:	480d      	ldr	r0, [pc, #52]	; (1a28 <_event_system_init+0x54>)
    19f2:	f100 0442 	add.w	r4, r0, #66	; 0x42
    19f6:	3080      	adds	r0, #128	; 0x80
    19f8:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    19fa:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    19fe:	00ca      	lsls	r2, r1, #3
    1a00:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1a04:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1a08:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1a0a:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1a0e:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1a10:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1a14:	43db      	mvns	r3, r3
    1a16:	b2db      	uxtb	r3, r3
    1a18:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1a1c:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1a1e:	2920      	cmp	r1, #32
    1a20:	d1eb      	bne.n	19fa <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    1a22:	2000      	movs	r0, #0
    1a24:	bc30      	pop	{r4, r5}
    1a26:	4770      	bx	lr
    1a28:	000052a8 	.word	0x000052a8
    1a2c:	4100e000 	.word	0x4100e000

00001a30 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    1a30:	f010 0f01 	tst.w	r0, #1
    1a34:	d002      	beq.n	1a3c <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1a36:	4a23      	ldr	r2, [pc, #140]	; (1ac4 <_gclk_init_generators_by_fref+0x94>)
    1a38:	4b23      	ldr	r3, [pc, #140]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1a3a:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    1a3c:	f010 0f02 	tst.w	r0, #2
    1a40:	d002      	beq.n	1a48 <_gclk_init_generators_by_fref+0x18>
    1a42:	4a22      	ldr	r2, [pc, #136]	; (1acc <_gclk_init_generators_by_fref+0x9c>)
    1a44:	4b20      	ldr	r3, [pc, #128]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1a46:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    1a48:	f010 0f04 	tst.w	r0, #4
    1a4c:	d002      	beq.n	1a54 <_gclk_init_generators_by_fref+0x24>
    1a4e:	4a1d      	ldr	r2, [pc, #116]	; (1ac4 <_gclk_init_generators_by_fref+0x94>)
    1a50:	4b1d      	ldr	r3, [pc, #116]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1a52:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    1a54:	f010 0f08 	tst.w	r0, #8
    1a58:	d002      	beq.n	1a60 <_gclk_init_generators_by_fref+0x30>
    1a5a:	4a1a      	ldr	r2, [pc, #104]	; (1ac4 <_gclk_init_generators_by_fref+0x94>)
    1a5c:	4b1a      	ldr	r3, [pc, #104]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1a5e:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    1a60:	f010 0f10 	tst.w	r0, #16
    1a64:	d002      	beq.n	1a6c <_gclk_init_generators_by_fref+0x3c>
    1a66:	4a17      	ldr	r2, [pc, #92]	; (1ac4 <_gclk_init_generators_by_fref+0x94>)
    1a68:	4b17      	ldr	r3, [pc, #92]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1a6a:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    1a6c:	f010 0f20 	tst.w	r0, #32
    1a70:	d002      	beq.n	1a78 <_gclk_init_generators_by_fref+0x48>
    1a72:	4a14      	ldr	r2, [pc, #80]	; (1ac4 <_gclk_init_generators_by_fref+0x94>)
    1a74:	4b14      	ldr	r3, [pc, #80]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1a76:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    1a78:	f010 0f40 	tst.w	r0, #64	; 0x40
    1a7c:	d002      	beq.n	1a84 <_gclk_init_generators_by_fref+0x54>
    1a7e:	4a11      	ldr	r2, [pc, #68]	; (1ac4 <_gclk_init_generators_by_fref+0x94>)
    1a80:	4b11      	ldr	r3, [pc, #68]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1a82:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    1a84:	f010 0f80 	tst.w	r0, #128	; 0x80
    1a88:	d002      	beq.n	1a90 <_gclk_init_generators_by_fref+0x60>
    1a8a:	4a0e      	ldr	r2, [pc, #56]	; (1ac4 <_gclk_init_generators_by_fref+0x94>)
    1a8c:	4b0e      	ldr	r3, [pc, #56]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1a8e:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    1a90:	f410 7f80 	tst.w	r0, #256	; 0x100
    1a94:	d002      	beq.n	1a9c <_gclk_init_generators_by_fref+0x6c>
    1a96:	4a0b      	ldr	r2, [pc, #44]	; (1ac4 <_gclk_init_generators_by_fref+0x94>)
    1a98:	4b0b      	ldr	r3, [pc, #44]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1a9a:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    1a9c:	f410 7f00 	tst.w	r0, #512	; 0x200
    1aa0:	d002      	beq.n	1aa8 <_gclk_init_generators_by_fref+0x78>
    1aa2:	4a08      	ldr	r2, [pc, #32]	; (1ac4 <_gclk_init_generators_by_fref+0x94>)
    1aa4:	4b08      	ldr	r3, [pc, #32]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1aa6:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    1aa8:	f410 6f80 	tst.w	r0, #1024	; 0x400
    1aac:	d002      	beq.n	1ab4 <_gclk_init_generators_by_fref+0x84>
    1aae:	4a08      	ldr	r2, [pc, #32]	; (1ad0 <_gclk_init_generators_by_fref+0xa0>)
    1ab0:	4b05      	ldr	r3, [pc, #20]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1ab2:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    1ab4:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1ab8:	d002      	beq.n	1ac0 <_gclk_init_generators_by_fref+0x90>
    1aba:	4a06      	ldr	r2, [pc, #24]	; (1ad4 <_gclk_init_generators_by_fref+0xa4>)
    1abc:	4b02      	ldr	r3, [pc, #8]	; (1ac8 <_gclk_init_generators_by_fref+0x98>)
    1abe:	64da      	str	r2, [r3, #76]	; 0x4c
    1ac0:	4770      	bx	lr
    1ac2:	bf00      	nop
    1ac4:	00012b06 	.word	0x00012b06
    1ac8:	40001c00 	.word	0x40001c00
    1acc:	00012306 	.word	0x00012306
    1ad0:	00012b05 	.word	0x00012b05
    1ad4:	00013b05 	.word	0x00013b05

00001ad8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1ad8:	2201      	movs	r2, #1
    1ada:	4b01      	ldr	r3, [pc, #4]	; (1ae0 <_mclk_init+0x8>)
    1adc:	715a      	strb	r2, [r3, #5]
    1ade:	4770      	bx	lr
    1ae0:	40000800 	.word	0x40000800

00001ae4 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    1ae4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1ae6:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1ae8:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1aea:	f012 0f01 	tst.w	r2, #1
    1aee:	d005      	beq.n	1afc <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1af0:	2201      	movs	r2, #1
    1af2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    1af4:	6803      	ldr	r3, [r0, #0]
    1af6:	b153      	cbz	r3, 1b0e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    1af8:	4798      	blx	r3
    1afa:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1afc:	8a1a      	ldrh	r2, [r3, #16]
    1afe:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1b00:	b12a      	cbz	r2, 1b0e <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1b02:	f240 225e 	movw	r2, #606	; 0x25e
    1b06:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1b08:	6843      	ldr	r3, [r0, #4]
    1b0a:	b103      	cbz	r3, 1b0e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1b0c:	4798      	blx	r3
    1b0e:	bd08      	pop	{r3, pc}

00001b10 <_flash_init>:
{
    1b10:	b538      	push	{r3, r4, r5, lr}
    1b12:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1b14:	4605      	mov	r5, r0
    1b16:	b350      	cbz	r0, 1b6e <_flash_init+0x5e>
    1b18:	4816      	ldr	r0, [pc, #88]	; (1b74 <_flash_init+0x64>)
    1b1a:	4281      	cmp	r1, r0
    1b1c:	bf14      	ite	ne
    1b1e:	2000      	movne	r0, #0
    1b20:	2001      	moveq	r0, #1
    1b22:	2256      	movs	r2, #86	; 0x56
    1b24:	4914      	ldr	r1, [pc, #80]	; (1b78 <_flash_init+0x68>)
    1b26:	4b15      	ldr	r3, [pc, #84]	; (1b7c <_flash_init+0x6c>)
    1b28:	4798      	blx	r3
	device->hw = hw;
    1b2a:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    1b2c:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    1b2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    1b32:	049b      	lsls	r3, r3, #18
    1b34:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1b36:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    1b38:	4b11      	ldr	r3, [pc, #68]	; (1b80 <_flash_init+0x70>)
    1b3a:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1b3c:	4b11      	ldr	r3, [pc, #68]	; (1b84 <_flash_init+0x74>)
    1b3e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1b42:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1b46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b4a:	f3bf 8f6f 	isb	sy
    1b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1b56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b5a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1b5e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    1b62:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1b66:	6019      	str	r1, [r3, #0]
    1b68:	601a      	str	r2, [r3, #0]
}
    1b6a:	2000      	movs	r0, #0
    1b6c:	bd38      	pop	{r3, r4, r5, pc}
    1b6e:	2000      	movs	r0, #0
    1b70:	e7d7      	b.n	1b22 <_flash_init+0x12>
    1b72:	bf00      	nop
    1b74:	41004000 	.word	0x41004000
    1b78:	000053ac 	.word	0x000053ac
    1b7c:	00001421 	.word	0x00001421
    1b80:	20000720 	.word	0x20000720
    1b84:	e000e100 	.word	0xe000e100

00001b88 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1b88:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1b8a:	4b02      	ldr	r3, [pc, #8]	; (1b94 <NVMCTRL_0_Handler+0xc>)
    1b8c:	6818      	ldr	r0, [r3, #0]
    1b8e:	4b02      	ldr	r3, [pc, #8]	; (1b98 <NVMCTRL_0_Handler+0x10>)
    1b90:	4798      	blx	r3
    1b92:	bd08      	pop	{r3, pc}
    1b94:	20000720 	.word	0x20000720
    1b98:	00001ae5 	.word	0x00001ae5

00001b9c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1b9c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1b9e:	4b02      	ldr	r3, [pc, #8]	; (1ba8 <NVMCTRL_1_Handler+0xc>)
    1ba0:	6818      	ldr	r0, [r3, #0]
    1ba2:	4b02      	ldr	r3, [pc, #8]	; (1bac <NVMCTRL_1_Handler+0x10>)
    1ba4:	4798      	blx	r3
    1ba6:	bd08      	pop	{r3, pc}
    1ba8:	20000720 	.word	0x20000720
    1bac:	00001ae5 	.word	0x00001ae5

00001bb0 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1bb0:	4b09      	ldr	r3, [pc, #36]	; (1bd8 <_osc32kctrl_init_sources+0x28>)
    1bb2:	f242 024e 	movw	r2, #8270	; 0x204e
    1bb6:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1bb8:	2201      	movs	r2, #1
    1bba:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1bbc:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    1bbe:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    1bc0:	2200      	movs	r2, #0
    1bc2:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    1bc4:	461a      	mov	r2, r3
    1bc6:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    1bc8:	f013 0f01 	tst.w	r3, #1
    1bcc:	d0fb      	beq.n	1bc6 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1bce:	2204      	movs	r2, #4
    1bd0:	4b01      	ldr	r3, [pc, #4]	; (1bd8 <_osc32kctrl_init_sources+0x28>)
    1bd2:	741a      	strb	r2, [r3, #16]
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop
    1bd8:	40001400 	.word	0x40001400

00001bdc <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1bdc:	4a2b      	ldr	r2, [pc, #172]	; (1c8c <_oscctrl_init_referenced_generators+0xb0>)
    1bde:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1be0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1be4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1be8:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1bea:	4b29      	ldr	r3, [pc, #164]	; (1c90 <_oscctrl_init_referenced_generators+0xb4>)
    1bec:	2200      	movs	r2, #0
    1bee:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1bf0:	4a28      	ldr	r2, [pc, #160]	; (1c94 <_oscctrl_init_referenced_generators+0xb8>)
    1bf2:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1bf4:	461a      	mov	r2, r3
    1bf6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1bfa:	f013 0f10 	tst.w	r3, #16
    1bfe:	d1fa      	bne.n	1bf6 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1c00:	2200      	movs	r2, #0
    1c02:	4b23      	ldr	r3, [pc, #140]	; (1c90 <_oscctrl_init_referenced_generators+0xb4>)
    1c04:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c08:	461a      	mov	r2, r3
    1c0a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1c0e:	f013 0f04 	tst.w	r3, #4
    1c12:	d1fa      	bne.n	1c0a <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1c14:	2242      	movs	r2, #66	; 0x42
    1c16:	4b1e      	ldr	r3, [pc, #120]	; (1c90 <_oscctrl_init_referenced_generators+0xb4>)
    1c18:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c1a:	461a      	mov	r2, r3
    1c1c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1c20:	f013 0f02 	tst.w	r3, #2
    1c24:	d1fa      	bne.n	1c1c <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1c26:	4b1a      	ldr	r3, [pc, #104]	; (1c90 <_oscctrl_init_referenced_generators+0xb4>)
    1c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1c2a:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c2c:	461a      	mov	r2, r3
    1c2e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1c32:	f013 0f08 	tst.w	r3, #8
    1c36:	d1fa      	bne.n	1c2e <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1c38:	2282      	movs	r2, #130	; 0x82
    1c3a:	4b15      	ldr	r3, [pc, #84]	; (1c90 <_oscctrl_init_referenced_generators+0xb4>)
    1c3c:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1c40:	461a      	mov	r2, r3
    1c42:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1c46:	f013 0f04 	tst.w	r3, #4
    1c4a:	d1fa      	bne.n	1c42 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1c4c:	4b10      	ldr	r3, [pc, #64]	; (1c90 <_oscctrl_init_referenced_generators+0xb4>)
    1c4e:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1c52:	f013 0f01 	tst.w	r3, #1
    1c56:	d012      	beq.n	1c7e <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1c58:	4a0d      	ldr	r2, [pc, #52]	; (1c90 <_oscctrl_init_referenced_generators+0xb4>)
    1c5a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1c5c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1c60:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1c64:	d1f9      	bne.n	1c5a <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1c66:	4a09      	ldr	r2, [pc, #36]	; (1c8c <_oscctrl_init_referenced_generators+0xb0>)
    1c68:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d1fc      	bne.n	1c68 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1c6e:	4a07      	ldr	r2, [pc, #28]	; (1c8c <_oscctrl_init_referenced_generators+0xb0>)
    1c70:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1c72:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1c76:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1c7a:	6213      	str	r3, [r2, #32]
    1c7c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1c7e:	4a04      	ldr	r2, [pc, #16]	; (1c90 <_oscctrl_init_referenced_generators+0xb4>)
    1c80:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1c82:	f413 7f80 	tst.w	r3, #256	; 0x100
    1c86:	d0fb      	beq.n	1c80 <_oscctrl_init_referenced_generators+0xa4>
    1c88:	e7ed      	b.n	1c66 <_oscctrl_init_referenced_generators+0x8a>
    1c8a:	bf00      	nop
    1c8c:	40001c00 	.word	0x40001c00
    1c90:	40001000 	.word	0x40001000
    1c94:	04010000 	.word	0x04010000

00001c98 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1c98:	b500      	push	{lr}
    1c9a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1c9c:	4b0d      	ldr	r3, [pc, #52]	; (1cd4 <RAMECC_Handler+0x3c>)
    1c9e:	789b      	ldrb	r3, [r3, #2]
    1ca0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1ca2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1ca4:	9b01      	ldr	r3, [sp, #4]
    1ca6:	f013 0f02 	tst.w	r3, #2
    1caa:	d006      	beq.n	1cba <RAMECC_Handler+0x22>
    1cac:	4b0a      	ldr	r3, [pc, #40]	; (1cd8 <RAMECC_Handler+0x40>)
    1cae:	681b      	ldr	r3, [r3, #0]
    1cb0:	b11b      	cbz	r3, 1cba <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1cb2:	4a08      	ldr	r2, [pc, #32]	; (1cd4 <RAMECC_Handler+0x3c>)
    1cb4:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1cb6:	4798      	blx	r3
    1cb8:	e009      	b.n	1cce <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1cba:	9b01      	ldr	r3, [sp, #4]
    1cbc:	f013 0f01 	tst.w	r3, #1
    1cc0:	d005      	beq.n	1cce <RAMECC_Handler+0x36>
    1cc2:	4b05      	ldr	r3, [pc, #20]	; (1cd8 <RAMECC_Handler+0x40>)
    1cc4:	685b      	ldr	r3, [r3, #4]
    1cc6:	b113      	cbz	r3, 1cce <RAMECC_Handler+0x36>
    1cc8:	4a02      	ldr	r2, [pc, #8]	; (1cd4 <RAMECC_Handler+0x3c>)
    1cca:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1ccc:	4798      	blx	r3
	} else {
		return;
	}
}
    1cce:	b003      	add	sp, #12
    1cd0:	f85d fb04 	ldr.w	pc, [sp], #4
    1cd4:	41020000 	.word	0x41020000
    1cd8:	20002e7c 	.word	0x20002e7c

00001cdc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1cdc:	b470      	push	{r4, r5, r6}
    1cde:	b087      	sub	sp, #28
    1ce0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1ce2:	466c      	mov	r4, sp
    1ce4:	4d0c      	ldr	r5, [pc, #48]	; (1d18 <_sercom_get_hardware_index+0x3c>)
    1ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1cea:	e895 0003 	ldmia.w	r5, {r0, r1}
    1cee:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1cf2:	9b00      	ldr	r3, [sp, #0]
    1cf4:	42b3      	cmp	r3, r6
    1cf6:	d00c      	beq.n	1d12 <_sercom_get_hardware_index+0x36>
    1cf8:	4632      	mov	r2, r6
    1cfa:	2001      	movs	r0, #1
    1cfc:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    1d00:	4293      	cmp	r3, r2
    1d02:	d007      	beq.n	1d14 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d04:	3001      	adds	r0, #1
    1d06:	2806      	cmp	r0, #6
    1d08:	d1f8      	bne.n	1cfc <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    1d0a:	2000      	movs	r0, #0
}
    1d0c:	b007      	add	sp, #28
    1d0e:	bc70      	pop	{r4, r5, r6}
    1d10:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1d12:	2000      	movs	r0, #0
			return i;
    1d14:	b2c0      	uxtb	r0, r0
    1d16:	e7f9      	b.n	1d0c <_sercom_get_hardware_index+0x30>
    1d18:	000053cc 	.word	0x000053cc

00001d1c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1d1c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1d1e:	4b03      	ldr	r3, [pc, #12]	; (1d2c <_sercom_get_irq_num+0x10>)
    1d20:	4798      	blx	r3
    1d22:	0080      	lsls	r0, r0, #2
    1d24:	302e      	adds	r0, #46	; 0x2e
}
    1d26:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1d2a:	bd08      	pop	{r3, pc}
    1d2c:	00001cdd 	.word	0x00001cdd

00001d30 <_usart_init>:
{
    1d30:	b538      	push	{r3, r4, r5, lr}
    1d32:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1d34:	4b33      	ldr	r3, [pc, #204]	; (1e04 <_usart_init+0xd4>)
    1d36:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1d38:	2803      	cmp	r0, #3
    1d3a:	d056      	beq.n	1dea <_usart_init+0xba>
    1d3c:	2804      	cmp	r0, #4
    1d3e:	d052      	beq.n	1de6 <_usart_init+0xb6>
    1d40:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1d42:	bf08      	it	eq
    1d44:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    1d46:	d006      	beq.n	1d56 <_usart_init+0x26>
	ASSERT(false);
    1d48:	f240 2262 	movw	r2, #610	; 0x262
    1d4c:	492e      	ldr	r1, [pc, #184]	; (1e08 <_usart_init+0xd8>)
    1d4e:	2000      	movs	r0, #0
    1d50:	4b2e      	ldr	r3, [pc, #184]	; (1e0c <_usart_init+0xdc>)
    1d52:	4798      	blx	r3
	return 0;
    1d54:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d56:	69e3      	ldr	r3, [r4, #28]
    1d58:	f013 0f01 	tst.w	r3, #1
    1d5c:	d1fb      	bne.n	1d56 <_usart_init+0x26>
    1d5e:	69e3      	ldr	r3, [r4, #28]
    1d60:	f013 0f03 	tst.w	r3, #3
    1d64:	d1fb      	bne.n	1d5e <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1d66:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    1d68:	f013 0f02 	tst.w	r3, #2
    1d6c:	d147      	bne.n	1dfe <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d6e:	69e3      	ldr	r3, [r4, #28]
    1d70:	f013 0f01 	tst.w	r3, #1
    1d74:	d1fb      	bne.n	1d6e <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    1d76:	6823      	ldr	r3, [r4, #0]
    1d78:	f043 0301 	orr.w	r3, r3, #1
    1d7c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1d7e:	69e3      	ldr	r3, [r4, #28]
    1d80:	f013 0f01 	tst.w	r3, #1
    1d84:	d1fb      	bne.n	1d7e <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1d86:	4610      	mov	r0, r2
    1d88:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    1d8c:	4920      	ldr	r1, [pc, #128]	; (1e10 <_usart_init+0xe0>)
    1d8e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1d92:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1d94:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1d96:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1d98:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1d9c:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1d9e:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    1da2:	d024      	beq.n	1dee <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1da4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1da8:	4b19      	ldr	r3, [pc, #100]	; (1e10 <_usart_init+0xe0>)
    1daa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1dae:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    1db0:	89a3      	ldrh	r3, [r4, #12]
    1db2:	f361 030c 	bfi	r3, r1, #0, #13
    1db6:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1db8:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    1dbc:	89a3      	ldrh	r3, [r4, #12]
    1dbe:	f362 334f 	bfi	r3, r2, #13, #3
    1dc2:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1dc4:	4b12      	ldr	r3, [pc, #72]	; (1e10 <_usart_init+0xe0>)
    1dc6:	0042      	lsls	r2, r0, #1
    1dc8:	1811      	adds	r1, r2, r0
    1dca:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1dce:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1dd2:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1dd4:	4402      	add	r2, r0
    1dd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1dda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1dde:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    1de2:	2000      	movs	r0, #0
    1de4:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1de6:	2201      	movs	r2, #1
    1de8:	e7b5      	b.n	1d56 <_usart_init+0x26>
    1dea:	2200      	movs	r2, #0
    1dec:	e7b3      	b.n	1d56 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1dee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1df2:	4b07      	ldr	r3, [pc, #28]	; (1e10 <_usart_init+0xe0>)
    1df4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1df8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    1dfa:	81a3      	strh	r3, [r4, #12]
    1dfc:	e7e2      	b.n	1dc4 <_usart_init+0x94>
		return ERR_DENIED;
    1dfe:	f06f 0010 	mvn.w	r0, #16
}
    1e02:	bd38      	pop	{r3, r4, r5, pc}
    1e04:	00001cdd 	.word	0x00001cdd
    1e08:	00005458 	.word	0x00005458
    1e0c:	00001421 	.word	0x00001421
    1e10:	000053cc 	.word	0x000053cc

00001e14 <_usart_async_init>:
{
    1e14:	b570      	push	{r4, r5, r6, lr}
    1e16:	460d      	mov	r5, r1
	ASSERT(device);
    1e18:	4606      	mov	r6, r0
    1e1a:	22da      	movs	r2, #218	; 0xda
    1e1c:	4912      	ldr	r1, [pc, #72]	; (1e68 <_usart_async_init+0x54>)
    1e1e:	3000      	adds	r0, #0
    1e20:	bf18      	it	ne
    1e22:	2001      	movne	r0, #1
    1e24:	4b11      	ldr	r3, [pc, #68]	; (1e6c <_usart_async_init+0x58>)
    1e26:	4798      	blx	r3
	init_status = _usart_init(hw);
    1e28:	4628      	mov	r0, r5
    1e2a:	4b11      	ldr	r3, [pc, #68]	; (1e70 <_usart_async_init+0x5c>)
    1e2c:	4798      	blx	r3
	if (init_status) {
    1e2e:	4604      	mov	r4, r0
    1e30:	b9c0      	cbnz	r0, 1e64 <_usart_async_init+0x50>
	device->hw = hw;
    1e32:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    1e34:	4628      	mov	r0, r5
    1e36:	4b0f      	ldr	r3, [pc, #60]	; (1e74 <_usart_async_init+0x60>)
    1e38:	4798      	blx	r3
		irq = irq +2;
    1e3a:	3002      	adds	r0, #2
    1e3c:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e3e:	f000 031f 	and.w	r3, r0, #31
    1e42:	2201      	movs	r2, #1
    1e44:	409a      	lsls	r2, r3
    1e46:	0943      	lsrs	r3, r0, #5
    1e48:	009b      	lsls	r3, r3, #2
    1e4a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1e4e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1e56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e5a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e62:	601a      	str	r2, [r3, #0]
}
    1e64:	4620      	mov	r0, r4
    1e66:	bd70      	pop	{r4, r5, r6, pc}
    1e68:	00005458 	.word	0x00005458
    1e6c:	00001421 	.word	0x00001421
    1e70:	00001d31 	.word	0x00001d31
    1e74:	00001d1d 	.word	0x00001d1d

00001e78 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1e78:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e7a:	69d3      	ldr	r3, [r2, #28]
    1e7c:	f013 0f03 	tst.w	r3, #3
    1e80:	d1fb      	bne.n	1e7a <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1e82:	6813      	ldr	r3, [r2, #0]
    1e84:	f043 0302 	orr.w	r3, r3, #2
    1e88:	6013      	str	r3, [r2, #0]
    1e8a:	4770      	bx	lr

00001e8c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1e8c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    1e8e:	6299      	str	r1, [r3, #40]	; 0x28
    1e90:	4770      	bx	lr

00001e92 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1e92:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    1e94:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1e96:	b2c0      	uxtb	r0, r0
    1e98:	4770      	bx	lr

00001e9a <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1e9a:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1e9c:	7e18      	ldrb	r0, [r3, #24]
}
    1e9e:	f000 0001 	and.w	r0, r0, #1
    1ea2:	4770      	bx	lr

00001ea4 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1ea4:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1ea6:	7e18      	ldrb	r0, [r3, #24]
}
    1ea8:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1eac:	4770      	bx	lr
	...

00001eb0 <_usart_async_set_irq_state>:
{
    1eb0:	b570      	push	{r4, r5, r6, lr}
    1eb2:	460c      	mov	r4, r1
    1eb4:	4616      	mov	r6, r2
	ASSERT(device);
    1eb6:	4605      	mov	r5, r0
    1eb8:	f44f 7211 	mov.w	r2, #580	; 0x244
    1ebc:	4915      	ldr	r1, [pc, #84]	; (1f14 <_usart_async_set_irq_state+0x64>)
    1ebe:	3000      	adds	r0, #0
    1ec0:	bf18      	it	ne
    1ec2:	2001      	movne	r0, #1
    1ec4:	4b14      	ldr	r3, [pc, #80]	; (1f18 <_usart_async_set_irq_state+0x68>)
    1ec6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1ec8:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    1ecc:	d10d      	bne.n	1eea <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1ece:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1ed0:	b92e      	cbnz	r6, 1ede <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1ed2:	2201      	movs	r2, #1
    1ed4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1ed6:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1ed8:	2202      	movs	r2, #2
    1eda:	751a      	strb	r2, [r3, #20]
    1edc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1ede:	2201      	movs	r2, #1
    1ee0:	759a      	strb	r2, [r3, #22]
    1ee2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1ee4:	2202      	movs	r2, #2
    1ee6:	759a      	strb	r2, [r3, #22]
    1ee8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    1eea:	2c01      	cmp	r4, #1
    1eec:	d002      	beq.n	1ef4 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    1eee:	2c03      	cmp	r4, #3
    1ef0:	d008      	beq.n	1f04 <_usart_async_set_irq_state+0x54>
    1ef2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1ef4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1ef6:	b916      	cbnz	r6, 1efe <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1ef8:	2204      	movs	r2, #4
    1efa:	751a      	strb	r2, [r3, #20]
    1efc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1efe:	2204      	movs	r2, #4
    1f00:	759a      	strb	r2, [r3, #22]
    1f02:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1f04:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1f06:	b116      	cbz	r6, 1f0e <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1f08:	2280      	movs	r2, #128	; 0x80
    1f0a:	759a      	strb	r2, [r3, #22]
}
    1f0c:	e7f1      	b.n	1ef2 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1f0e:	2280      	movs	r2, #128	; 0x80
    1f10:	751a      	strb	r2, [r3, #20]
    1f12:	bd70      	pop	{r4, r5, r6, pc}
    1f14:	00005458 	.word	0x00005458
    1f18:	00001421 	.word	0x00001421

00001f1c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1f1c:	4b03      	ldr	r3, [pc, #12]	; (1f2c <_delay_init+0x10>)
    1f1e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1f22:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1f24:	2205      	movs	r2, #5
    1f26:	601a      	str	r2, [r3, #0]
    1f28:	4770      	bx	lr
    1f2a:	bf00      	nop
    1f2c:	e000e010 	.word	0xe000e010

00001f30 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1f30:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1f32:	b303      	cbz	r3, 1f76 <_delay_cycles+0x46>
{
    1f34:	b430      	push	{r4, r5}
    1f36:	1e5d      	subs	r5, r3, #1
    1f38:	b2ed      	uxtb	r5, r5
	while (n--) {
    1f3a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1f3c:	4a12      	ldr	r2, [pc, #72]	; (1f88 <_delay_cycles+0x58>)
    1f3e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    1f42:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1f44:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1f46:	6813      	ldr	r3, [r2, #0]
    1f48:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1f4c:	d0fb      	beq.n	1f46 <_delay_cycles+0x16>
	while (n--) {
    1f4e:	3801      	subs	r0, #1
    1f50:	b2c0      	uxtb	r0, r0
    1f52:	28ff      	cmp	r0, #255	; 0xff
    1f54:	d1f5      	bne.n	1f42 <_delay_cycles+0x12>
    1f56:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    1f5a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1f5e:	3101      	adds	r1, #1
    1f60:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1f62:	4b09      	ldr	r3, [pc, #36]	; (1f88 <_delay_cycles+0x58>)
    1f64:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1f66:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1f68:	461a      	mov	r2, r3
    1f6a:	6813      	ldr	r3, [r2, #0]
    1f6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1f70:	d0fb      	beq.n	1f6a <_delay_cycles+0x3a>
		;
}
    1f72:	bc30      	pop	{r4, r5}
    1f74:	4770      	bx	lr
	SysTick->LOAD = buf;
    1f76:	4b04      	ldr	r3, [pc, #16]	; (1f88 <_delay_cycles+0x58>)
    1f78:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1f7a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1f7c:	461a      	mov	r2, r3
    1f7e:	6813      	ldr	r3, [r2, #0]
    1f80:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1f84:	d0fb      	beq.n	1f7e <_delay_cycles+0x4e>
    1f86:	4770      	bx	lr
    1f88:	e000e010 	.word	0xe000e010

00001f8c <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    1f8c:	b470      	push	{r4, r5, r6}
    1f8e:	b087      	sub	sp, #28
    1f90:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    1f92:	ac01      	add	r4, sp, #4
    1f94:	4d14      	ldr	r5, [pc, #80]	; (1fe8 <_get_irq_num+0x5c>)
    1f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f9a:	682b      	ldr	r3, [r5, #0]
    1f9c:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    1f9e:	42b0      	cmp	r0, r6
    1fa0:	d017      	beq.n	1fd2 <_get_irq_num+0x46>
    1fa2:	4631      	mov	r1, r6
    1fa4:	2301      	movs	r3, #1
    1fa6:	a801      	add	r0, sp, #4
    1fa8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    1fac:	428a      	cmp	r2, r1
    1fae:	d006      	beq.n	1fbe <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1fb0:	3301      	adds	r3, #1
    1fb2:	2b05      	cmp	r3, #5
    1fb4:	d1f8      	bne.n	1fa8 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    1fb6:	2055      	movs	r0, #85	; 0x55
}
    1fb8:	b007      	add	sp, #28
    1fba:	bc70      	pop	{r4, r5, r6}
    1fbc:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    1fbe:	b2db      	uxtb	r3, r3
    1fc0:	2b04      	cmp	r3, #4
    1fc2:	d80c      	bhi.n	1fde <_get_irq_num+0x52>
    1fc4:	e8df f003 	tbb	[pc, r3]
    1fc8:	070d0305 	.word	0x070d0305
    1fcc:	09          	.byte	0x09
    1fcd:	00          	.byte	0x00
		return TCC1_0_IRQn;
    1fce:	205c      	movs	r0, #92	; 0x5c
    1fd0:	e7f2      	b.n	1fb8 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    1fd2:	2055      	movs	r0, #85	; 0x55
    1fd4:	e7f0      	b.n	1fb8 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    1fd6:	2065      	movs	r0, #101	; 0x65
    1fd8:	e7ee      	b.n	1fb8 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    1fda:	2068      	movs	r0, #104	; 0x68
    1fdc:	e7ec      	b.n	1fb8 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    1fde:	2089      	movs	r0, #137	; 0x89
    1fe0:	e7ea      	b.n	1fb8 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    1fe2:	2061      	movs	r0, #97	; 0x61
    1fe4:	e7e8      	b.n	1fb8 <_get_irq_num+0x2c>
    1fe6:	bf00      	nop
    1fe8:	00005474 	.word	0x00005474

00001fec <_tcc_timer_deinit>:
{
    1fec:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1fee:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    1ff0:	4620      	mov	r0, r4
    1ff2:	4b10      	ldr	r3, [pc, #64]	; (2034 <_tcc_timer_deinit+0x48>)
    1ff4:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1ff6:	0943      	lsrs	r3, r0, #5
    1ff8:	f000 001f 	and.w	r0, r0, #31
    1ffc:	2201      	movs	r2, #1
    1ffe:	fa02 f000 	lsl.w	r0, r2, r0
    2002:	3320      	adds	r3, #32
    2004:	4a0c      	ldr	r2, [pc, #48]	; (2038 <_tcc_timer_deinit+0x4c>)
    2006:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    200a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    200e:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2012:	68a3      	ldr	r3, [r4, #8]
    2014:	f013 0f03 	tst.w	r3, #3
    2018:	d1fb      	bne.n	2012 <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    201a:	6823      	ldr	r3, [r4, #0]
    201c:	f023 0302 	bic.w	r3, r3, #2
    2020:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2022:	68a3      	ldr	r3, [r4, #8]
    2024:	f013 0f01 	tst.w	r3, #1
    2028:	d1fb      	bne.n	2022 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    202a:	6823      	ldr	r3, [r4, #0]
    202c:	f043 0301 	orr.w	r3, r3, #1
    2030:	6023      	str	r3, [r4, #0]
    2032:	bd10      	pop	{r4, pc}
    2034:	00001f8d 	.word	0x00001f8d
    2038:	e000e100 	.word	0xe000e100

0000203c <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    203c:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    203e:	6893      	ldr	r3, [r2, #8]
    2040:	f013 0f03 	tst.w	r3, #3
    2044:	d1fb      	bne.n	203e <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2046:	6813      	ldr	r3, [r2, #0]
    2048:	f043 0302 	orr.w	r3, r3, #2
    204c:	6013      	str	r3, [r2, #0]
    204e:	4770      	bx	lr

00002050 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    2050:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2052:	6893      	ldr	r3, [r2, #8]
    2054:	f013 0f03 	tst.w	r3, #3
    2058:	d1fb      	bne.n	2052 <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    205a:	6813      	ldr	r3, [r2, #0]
    205c:	f023 0302 	bic.w	r3, r3, #2
    2060:	6013      	str	r3, [r2, #0]
    2062:	4770      	bx	lr

00002064 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    2064:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    2066:	6419      	str	r1, [r3, #64]	; 0x40
    2068:	4770      	bx	lr

0000206a <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    206a:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    206c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    206e:	4770      	bx	lr

00002070 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    2070:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2072:	6893      	ldr	r3, [r2, #8]
    2074:	f013 0f03 	tst.w	r3, #3
    2078:	d1fb      	bne.n	2072 <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    207a:	6810      	ldr	r0, [r2, #0]
}
    207c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2080:	4770      	bx	lr

00002082 <tcc_interrupt_handler>:
{
    2082:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2084:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    2086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    2088:	f012 0f01 	tst.w	r2, #1
    208c:	d100      	bne.n	2090 <tcc_interrupt_handler+0xe>
    208e:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    2090:	2201      	movs	r2, #1
    2092:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    2094:	6803      	ldr	r3, [r0, #0]
    2096:	4798      	blx	r3
}
    2098:	e7f9      	b.n	208e <tcc_interrupt_handler+0xc>
	...

0000209c <_tcc_timer_init>:
{
    209c:	b5f0      	push	{r4, r5, r6, r7, lr}
    209e:	b087      	sub	sp, #28
    20a0:	4605      	mov	r5, r0
    20a2:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    20a4:	ae01      	add	r6, sp, #4
    20a6:	4f4e      	ldr	r7, [pc, #312]	; (21e0 <_tcc_timer_init+0x144>)
    20a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    20aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    20ac:	683b      	ldr	r3, [r7, #0]
    20ae:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    20b0:	42a0      	cmp	r0, r4
    20b2:	d00c      	beq.n	20ce <_tcc_timer_init+0x32>
    20b4:	4621      	mov	r1, r4
    20b6:	2301      	movs	r3, #1
    20b8:	a801      	add	r0, sp, #4
    20ba:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    20be:	428a      	cmp	r2, r1
    20c0:	d006      	beq.n	20d0 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    20c2:	3301      	adds	r3, #1
    20c4:	2b05      	cmp	r3, #5
    20c6:	d1f8      	bne.n	20ba <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    20c8:	2600      	movs	r6, #0
			return i;
    20ca:	b276      	sxtb	r6, r6
    20cc:	e015      	b.n	20fa <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    20ce:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    20d0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    20d4:	d073      	beq.n	21be <_tcc_timer_init+0x122>
    20d6:	2b01      	cmp	r3, #1
    20d8:	d06b      	beq.n	21b2 <_tcc_timer_init+0x116>
    20da:	2b02      	cmp	r3, #2
    20dc:	d06b      	beq.n	21b6 <_tcc_timer_init+0x11a>
    20de:	2b03      	cmp	r3, #3
    20e0:	d06b      	beq.n	21ba <_tcc_timer_init+0x11e>
    20e2:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    20e4:	bf08      	it	eq
    20e6:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    20e8:	d0ef      	beq.n	20ca <_tcc_timer_init+0x2e>
	ASSERT(false);
    20ea:	f240 128b 	movw	r2, #395	; 0x18b
    20ee:	493d      	ldr	r1, [pc, #244]	; (21e4 <_tcc_timer_init+0x148>)
    20f0:	2000      	movs	r0, #0
    20f2:	4b3d      	ldr	r3, [pc, #244]	; (21e8 <_tcc_timer_init+0x14c>)
    20f4:	4798      	blx	r3
	return -1;
    20f6:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    20fa:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    20fc:	22e4      	movs	r2, #228	; 0xe4
    20fe:	4939      	ldr	r1, [pc, #228]	; (21e4 <_tcc_timer_init+0x148>)
    2100:	2001      	movs	r0, #1
    2102:	4b39      	ldr	r3, [pc, #228]	; (21e8 <_tcc_timer_init+0x14c>)
    2104:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2106:	68a3      	ldr	r3, [r4, #8]
    2108:	f013 0f01 	tst.w	r3, #1
    210c:	d1fb      	bne.n	2106 <_tcc_timer_init+0x6a>
    210e:	68a3      	ldr	r3, [r4, #8]
    2110:	f013 0f03 	tst.w	r3, #3
    2114:	d1fb      	bne.n	210e <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2116:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    2118:	f013 0f02 	tst.w	r3, #2
    211c:	d15d      	bne.n	21da <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    211e:	68a3      	ldr	r3, [r4, #8]
    2120:	f013 0f01 	tst.w	r3, #1
    2124:	d1fb      	bne.n	211e <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2126:	6823      	ldr	r3, [r4, #0]
    2128:	f043 0301 	orr.w	r3, r3, #1
    212c:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    212e:	68a3      	ldr	r3, [r4, #8]
    2130:	f013 0f01 	tst.w	r3, #1
    2134:	d1fb      	bne.n	212e <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    2136:	4a2a      	ldr	r2, [pc, #168]	; (21e0 <_tcc_timer_init+0x144>)
    2138:	00f1      	lsls	r1, r6, #3
    213a:	198b      	adds	r3, r1, r6
    213c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2140:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    2142:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    2144:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    2146:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    2148:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    214a:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    214c:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    214e:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    2150:	440e      	add	r6, r1
    2152:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    2156:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    2158:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    215a:	2301      	movs	r3, #1
    215c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    215e:	4b23      	ldr	r3, [pc, #140]	; (21ec <_tcc_timer_init+0x150>)
    2160:	429c      	cmp	r4, r3
    2162:	d02e      	beq.n	21c2 <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    2164:	4b22      	ldr	r3, [pc, #136]	; (21f0 <_tcc_timer_init+0x154>)
    2166:	429c      	cmp	r4, r3
    2168:	d02e      	beq.n	21c8 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    216a:	4b22      	ldr	r3, [pc, #136]	; (21f4 <_tcc_timer_init+0x158>)
    216c:	429c      	cmp	r4, r3
    216e:	d02e      	beq.n	21ce <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    2170:	4b21      	ldr	r3, [pc, #132]	; (21f8 <_tcc_timer_init+0x15c>)
    2172:	429c      	cmp	r4, r3
    2174:	d02e      	beq.n	21d4 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    2176:	4b21      	ldr	r3, [pc, #132]	; (21fc <_tcc_timer_init+0x160>)
    2178:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    217a:	bf04      	itt	eq
    217c:	4b20      	ldreq	r3, [pc, #128]	; (2200 <_tcc_timer_init+0x164>)
    217e:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2180:	4620      	mov	r0, r4
    2182:	4b20      	ldr	r3, [pc, #128]	; (2204 <_tcc_timer_init+0x168>)
    2184:	4798      	blx	r3
    2186:	f000 031f 	and.w	r3, r0, #31
    218a:	2201      	movs	r2, #1
    218c:	409a      	lsls	r2, r3
    218e:	0943      	lsrs	r3, r0, #5
    2190:	009b      	lsls	r3, r3, #2
    2192:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2196:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    219a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    219e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21a2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    21a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    21aa:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    21ac:	2000      	movs	r0, #0
}
    21ae:	b007      	add	sp, #28
    21b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    21b2:	2601      	movs	r6, #1
    21b4:	e789      	b.n	20ca <_tcc_timer_init+0x2e>
    21b6:	2602      	movs	r6, #2
    21b8:	e787      	b.n	20ca <_tcc_timer_init+0x2e>
    21ba:	2603      	movs	r6, #3
    21bc:	e785      	b.n	20ca <_tcc_timer_init+0x2e>
    21be:	2600      	movs	r6, #0
    21c0:	e783      	b.n	20ca <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    21c2:	4b0f      	ldr	r3, [pc, #60]	; (2200 <_tcc_timer_init+0x164>)
    21c4:	601d      	str	r5, [r3, #0]
    21c6:	e7d3      	b.n	2170 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    21c8:	4b0d      	ldr	r3, [pc, #52]	; (2200 <_tcc_timer_init+0x164>)
    21ca:	605d      	str	r5, [r3, #4]
    21cc:	e7d3      	b.n	2176 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    21ce:	4b0c      	ldr	r3, [pc, #48]	; (2200 <_tcc_timer_init+0x164>)
    21d0:	609d      	str	r5, [r3, #8]
    21d2:	e7d5      	b.n	2180 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    21d4:	4b0a      	ldr	r3, [pc, #40]	; (2200 <_tcc_timer_init+0x164>)
    21d6:	60dd      	str	r5, [r3, #12]
    21d8:	e7d2      	b.n	2180 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    21da:	f06f 0010 	mvn.w	r0, #16
    21de:	e7e6      	b.n	21ae <_tcc_timer_init+0x112>
    21e0:	00005474 	.word	0x00005474
    21e4:	0000553c 	.word	0x0000553c
    21e8:	00001421 	.word	0x00001421
    21ec:	41016000 	.word	0x41016000
    21f0:	41018000 	.word	0x41018000
    21f4:	42000c00 	.word	0x42000c00
    21f8:	42001000 	.word	0x42001000
    21fc:	43001000 	.word	0x43001000
    2200:	20000724 	.word	0x20000724
    2204:	00001f8d 	.word	0x00001f8d

00002208 <_tcc_timer_set_irq>:
{
    2208:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    220a:	68c0      	ldr	r0, [r0, #12]
    220c:	4b02      	ldr	r3, [pc, #8]	; (2218 <_tcc_timer_set_irq+0x10>)
    220e:	4798      	blx	r3
    2210:	4b02      	ldr	r3, [pc, #8]	; (221c <_tcc_timer_set_irq+0x14>)
    2212:	4798      	blx	r3
    2214:	bd08      	pop	{r3, pc}
    2216:	bf00      	nop
    2218:	00001f8d 	.word	0x00001f8d
    221c:	000016b9 	.word	0x000016b9

00002220 <_tcc_get_timer>:
}
    2220:	4800      	ldr	r0, [pc, #0]	; (2224 <_tcc_get_timer+0x4>)
    2222:	4770      	bx	lr
    2224:	20000038 	.word	0x20000038

00002228 <TCC0_0_Handler>:
{
    2228:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    222a:	4b02      	ldr	r3, [pc, #8]	; (2234 <TCC0_0_Handler+0xc>)
    222c:	6818      	ldr	r0, [r3, #0]
    222e:	4b02      	ldr	r3, [pc, #8]	; (2238 <TCC0_0_Handler+0x10>)
    2230:	4798      	blx	r3
    2232:	bd08      	pop	{r3, pc}
    2234:	20000724 	.word	0x20000724
    2238:	00002083 	.word	0x00002083

0000223c <TCC1_0_Handler>:
{
    223c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    223e:	4b02      	ldr	r3, [pc, #8]	; (2248 <TCC1_0_Handler+0xc>)
    2240:	6858      	ldr	r0, [r3, #4]
    2242:	4b02      	ldr	r3, [pc, #8]	; (224c <TCC1_0_Handler+0x10>)
    2244:	4798      	blx	r3
    2246:	bd08      	pop	{r3, pc}
    2248:	20000724 	.word	0x20000724
    224c:	00002083 	.word	0x00002083

00002250 <TCC2_0_Handler>:
{
    2250:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    2252:	4b02      	ldr	r3, [pc, #8]	; (225c <TCC2_0_Handler+0xc>)
    2254:	6898      	ldr	r0, [r3, #8]
    2256:	4b02      	ldr	r3, [pc, #8]	; (2260 <TCC2_0_Handler+0x10>)
    2258:	4798      	blx	r3
    225a:	bd08      	pop	{r3, pc}
    225c:	20000724 	.word	0x20000724
    2260:	00002083 	.word	0x00002083

00002264 <TCC3_0_Handler>:
{
    2264:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    2266:	4b02      	ldr	r3, [pc, #8]	; (2270 <TCC3_0_Handler+0xc>)
    2268:	68d8      	ldr	r0, [r3, #12]
    226a:	4b02      	ldr	r3, [pc, #8]	; (2274 <TCC3_0_Handler+0x10>)
    226c:	4798      	blx	r3
    226e:	bd08      	pop	{r3, pc}
    2270:	20000724 	.word	0x20000724
    2274:	00002083 	.word	0x00002083

00002278 <TCC4_0_Handler>:
{
    2278:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    227a:	4b02      	ldr	r3, [pc, #8]	; (2284 <TCC4_0_Handler+0xc>)
    227c:	6918      	ldr	r0, [r3, #16]
    227e:	4b02      	ldr	r3, [pc, #8]	; (2288 <TCC4_0_Handler+0x10>)
    2280:	4798      	blx	r3
    2282:	bd08      	pop	{r3, pc}
    2284:	20000724 	.word	0x20000724
    2288:	00002083 	.word	0x00002083

0000228c <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    228c:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    228e:	6913      	ldr	r3, [r2, #16]
    2290:	f013 0f03 	tst.w	r3, #3
    2294:	d1fb      	bne.n	228e <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    2296:	6813      	ldr	r3, [r2, #0]
    2298:	f043 0302 	orr.w	r3, r3, #2
    229c:	6013      	str	r3, [r2, #0]
    229e:	4770      	bx	lr

000022a0 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    22a0:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22a2:	6913      	ldr	r3, [r2, #16]
    22a4:	f013 0f03 	tst.w	r3, #3
    22a8:	d1fb      	bne.n	22a2 <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    22aa:	6813      	ldr	r3, [r2, #0]
    22ac:	f023 0302 	bic.w	r3, r3, #2
    22b0:	6013      	str	r3, [r2, #0]
    22b2:	4770      	bx	lr

000022b4 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    22b4:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    22b6:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    22b8:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    22bc:	2b02      	cmp	r3, #2
    22be:	d00b      	beq.n	22d8 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    22c0:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    22c2:	f013 0f0c 	tst.w	r3, #12
    22c6:	d009      	beq.n	22dc <_tc_timer_set_period+0x28>
    22c8:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    22ca:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    22ce:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    22d0:	bf04      	itt	eq
    22d2:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    22d4:	76d1      	strbeq	r1, [r2, #27]
    22d6:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    22d8:	61d1      	str	r1, [r2, #28]
    22da:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    22dc:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    22de:	8391      	strh	r1, [r2, #28]
    22e0:	4770      	bx	lr

000022e2 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    22e2:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    22e4:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    22e6:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    22ea:	2b02      	cmp	r3, #2
    22ec:	d00c      	beq.n	2308 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    22ee:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    22f0:	f013 0f0c 	tst.w	r3, #12
    22f4:	d00a      	beq.n	230c <_tc_timer_get_period+0x2a>
    22f6:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    22f8:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    22fc:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    22fe:	bf06      	itte	eq
    2300:	7ed0      	ldrbeq	r0, [r2, #27]
    2302:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    2304:	2000      	movne	r0, #0
}
    2306:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    2308:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    230a:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    230c:	8b90      	ldrh	r0, [r2, #28]
    230e:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2310:	4770      	bx	lr

00002312 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2312:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2314:	6913      	ldr	r3, [r2, #16]
    2316:	f013 0f03 	tst.w	r3, #3
    231a:	d1fb      	bne.n	2314 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    231c:	6810      	ldr	r0, [r2, #0]
}
    231e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2322:	4770      	bx	lr

00002324 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2324:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2326:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2328:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    232a:	f012 0f01 	tst.w	r2, #1
    232e:	d100      	bne.n	2332 <tc_interrupt_handler+0xe>
    2330:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2332:	2201      	movs	r2, #1
    2334:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2336:	6803      	ldr	r3, [r0, #0]
    2338:	4798      	blx	r3
	}
}
    233a:	e7f9      	b.n	2330 <tc_interrupt_handler+0xc>

0000233c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    233c:	b538      	push	{r3, r4, r5, lr}
    233e:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2340:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2342:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2344:	f013 0f01 	tst.w	r3, #1
    2348:	d004      	beq.n	2354 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    234a:	2301      	movs	r3, #1
    234c:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    234e:	6803      	ldr	r3, [r0, #0]
    2350:	b103      	cbz	r3, 2354 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2352:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2354:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2356:	f013 0f02 	tst.w	r3, #2
    235a:	d005      	beq.n	2368 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    235c:	2302      	movs	r3, #2
    235e:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2360:	686b      	ldr	r3, [r5, #4]
    2362:	b10b      	cbz	r3, 2368 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2364:	4628      	mov	r0, r5
    2366:	4798      	blx	r3
    2368:	bd38      	pop	{r3, r4, r5, pc}
	...

0000236c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    236c:	4b11      	ldr	r3, [pc, #68]	; (23b4 <_tc_init_irq_param+0x48>)
    236e:	4298      	cmp	r0, r3
    2370:	d011      	beq.n	2396 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2372:	4b11      	ldr	r3, [pc, #68]	; (23b8 <_tc_init_irq_param+0x4c>)
    2374:	4298      	cmp	r0, r3
    2376:	d011      	beq.n	239c <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    2378:	4b10      	ldr	r3, [pc, #64]	; (23bc <_tc_init_irq_param+0x50>)
    237a:	4298      	cmp	r0, r3
    237c:	d011      	beq.n	23a2 <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    237e:	4b10      	ldr	r3, [pc, #64]	; (23c0 <_tc_init_irq_param+0x54>)
    2380:	4298      	cmp	r0, r3
    2382:	d011      	beq.n	23a8 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2384:	4b0f      	ldr	r3, [pc, #60]	; (23c4 <_tc_init_irq_param+0x58>)
    2386:	4298      	cmp	r0, r3
    2388:	d011      	beq.n	23ae <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    238a:	4b0f      	ldr	r3, [pc, #60]	; (23c8 <_tc_init_irq_param+0x5c>)
    238c:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    238e:	bf04      	itt	eq
    2390:	4b0e      	ldreq	r3, [pc, #56]	; (23cc <_tc_init_irq_param+0x60>)
    2392:	6159      	streq	r1, [r3, #20]
    2394:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2396:	4b0d      	ldr	r3, [pc, #52]	; (23cc <_tc_init_irq_param+0x60>)
    2398:	6019      	str	r1, [r3, #0]
    239a:	e7f0      	b.n	237e <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    239c:	4b0b      	ldr	r3, [pc, #44]	; (23cc <_tc_init_irq_param+0x60>)
    239e:	6059      	str	r1, [r3, #4]
    23a0:	e7f0      	b.n	2384 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    23a2:	4b0a      	ldr	r3, [pc, #40]	; (23cc <_tc_init_irq_param+0x60>)
    23a4:	6099      	str	r1, [r3, #8]
    23a6:	e7f0      	b.n	238a <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    23a8:	4b08      	ldr	r3, [pc, #32]	; (23cc <_tc_init_irq_param+0x60>)
    23aa:	60d9      	str	r1, [r3, #12]
    23ac:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    23ae:	4b07      	ldr	r3, [pc, #28]	; (23cc <_tc_init_irq_param+0x60>)
    23b0:	6119      	str	r1, [r3, #16]
    23b2:	4770      	bx	lr
    23b4:	40003800 	.word	0x40003800
    23b8:	40003c00 	.word	0x40003c00
    23bc:	4101a000 	.word	0x4101a000
    23c0:	4101c000 	.word	0x4101c000
    23c4:	42001400 	.word	0x42001400
    23c8:	42001800 	.word	0x42001800
    23cc:	20000738 	.word	0x20000738

000023d0 <get_tc_index>:
{
    23d0:	b570      	push	{r4, r5, r6, lr}
    23d2:	b086      	sub	sp, #24
    23d4:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    23d6:	466c      	mov	r4, sp
    23d8:	4d18      	ldr	r5, [pc, #96]	; (243c <get_tc_index+0x6c>)
    23da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    23dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    23de:	e895 0003 	ldmia.w	r5, {r0, r1}
    23e2:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    23e6:	9b00      	ldr	r3, [sp, #0]
    23e8:	42b3      	cmp	r3, r6
    23ea:	d021      	beq.n	2430 <get_tc_index+0x60>
    23ec:	4631      	mov	r1, r6
    23ee:	2301      	movs	r3, #1
    23f0:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    23f4:	428a      	cmp	r2, r1
    23f6:	d01c      	beq.n	2432 <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    23f8:	3301      	adds	r3, #1
    23fa:	2b06      	cmp	r3, #6
    23fc:	d1f8      	bne.n	23f0 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    23fe:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2400:	4a0f      	ldr	r2, [pc, #60]	; (2440 <get_tc_index+0x70>)
    2402:	7812      	ldrb	r2, [r2, #0]
    2404:	429a      	cmp	r2, r3
    2406:	d016      	beq.n	2436 <get_tc_index+0x66>
    2408:	4a0d      	ldr	r2, [pc, #52]	; (2440 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    240a:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    240c:	7d11      	ldrb	r1, [r2, #20]
    240e:	4299      	cmp	r1, r3
    2410:	d012      	beq.n	2438 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2412:	3001      	adds	r0, #1
    2414:	b2c0      	uxtb	r0, r0
    2416:	3214      	adds	r2, #20
    2418:	2806      	cmp	r0, #6
    241a:	d1f7      	bne.n	240c <get_tc_index+0x3c>
	ASSERT(false);
    241c:	f240 2227 	movw	r2, #551	; 0x227
    2420:	4908      	ldr	r1, [pc, #32]	; (2444 <get_tc_index+0x74>)
    2422:	2000      	movs	r0, #0
    2424:	4b08      	ldr	r3, [pc, #32]	; (2448 <get_tc_index+0x78>)
    2426:	4798      	blx	r3
	return -1;
    2428:	f04f 30ff 	mov.w	r0, #4294967295
}
    242c:	b006      	add	sp, #24
    242e:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2430:	2300      	movs	r3, #0
			return i;
    2432:	b2db      	uxtb	r3, r3
    2434:	e7e4      	b.n	2400 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2436:	2000      	movs	r0, #0
			return i;
    2438:	b240      	sxtb	r0, r0
    243a:	e7f7      	b.n	242c <get_tc_index+0x5c>
    243c:	00005554 	.word	0x00005554
    2440:	20000058 	.word	0x20000058
    2444:	0000556c 	.word	0x0000556c
    2448:	00001421 	.word	0x00001421

0000244c <_tc_timer_init>:
{
    244c:	b570      	push	{r4, r5, r6, lr}
    244e:	4606      	mov	r6, r0
    2450:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2452:	4608      	mov	r0, r1
    2454:	4b48      	ldr	r3, [pc, #288]	; (2578 <_tc_timer_init+0x12c>)
    2456:	4798      	blx	r3
    2458:	4605      	mov	r5, r0
	device->hw = hw;
    245a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    245c:	22af      	movs	r2, #175	; 0xaf
    245e:	4947      	ldr	r1, [pc, #284]	; (257c <_tc_timer_init+0x130>)
    2460:	2001      	movs	r0, #1
    2462:	4b47      	ldr	r3, [pc, #284]	; (2580 <_tc_timer_init+0x134>)
    2464:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2466:	6923      	ldr	r3, [r4, #16]
    2468:	f013 0f01 	tst.w	r3, #1
    246c:	d1fb      	bne.n	2466 <_tc_timer_init+0x1a>
    246e:	6923      	ldr	r3, [r4, #16]
    2470:	f013 0f03 	tst.w	r3, #3
    2474:	d1fb      	bne.n	246e <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2476:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2478:	f013 0f02 	tst.w	r3, #2
    247c:	d175      	bne.n	256a <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    247e:	6923      	ldr	r3, [r4, #16]
    2480:	f013 0f01 	tst.w	r3, #1
    2484:	d1fb      	bne.n	247e <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2486:	6823      	ldr	r3, [r4, #0]
    2488:	f043 0301 	orr.w	r3, r3, #1
    248c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    248e:	6923      	ldr	r3, [r4, #16]
    2490:	f013 0f01 	tst.w	r3, #1
    2494:	d1fb      	bne.n	248e <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2496:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    249a:	4a3a      	ldr	r2, [pc, #232]	; (2584 <_tc_timer_init+0x138>)
    249c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24a0:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    24a2:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    24a4:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    24a6:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    24a8:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    24aa:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    24ac:	2201      	movs	r2, #1
    24ae:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    24b0:	685b      	ldr	r3, [r3, #4]
    24b2:	f003 030c 	and.w	r3, r3, #12
    24b6:	2b08      	cmp	r3, #8
    24b8:	d03f      	beq.n	253a <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    24ba:	2b00      	cmp	r3, #0
    24bc:	d147      	bne.n	254e <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    24be:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    24c2:	4a30      	ldr	r2, [pc, #192]	; (2584 <_tc_timer_init+0x138>)
    24c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24c8:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    24ca:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    24cc:	8a1b      	ldrh	r3, [r3, #16]
    24ce:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    24d0:	2301      	movs	r3, #1
    24d2:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    24d4:	4631      	mov	r1, r6
    24d6:	4620      	mov	r0, r4
    24d8:	4b2b      	ldr	r3, [pc, #172]	; (2588 <_tc_timer_init+0x13c>)
    24da:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    24dc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    24e0:	4a28      	ldr	r2, [pc, #160]	; (2584 <_tc_timer_init+0x138>)
    24e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    24ea:	2b00      	cmp	r3, #0
    24ec:	db40      	blt.n	2570 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24ee:	095a      	lsrs	r2, r3, #5
    24f0:	f003 031f 	and.w	r3, r3, #31
    24f4:	2101      	movs	r1, #1
    24f6:	fa01 f303 	lsl.w	r3, r1, r3
    24fa:	3220      	adds	r2, #32
    24fc:	4923      	ldr	r1, [pc, #140]	; (258c <_tc_timer_init+0x140>)
    24fe:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2502:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2506:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    250a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    250e:	4b1d      	ldr	r3, [pc, #116]	; (2584 <_tc_timer_init+0x138>)
    2510:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2514:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2518:	2b00      	cmp	r3, #0
    251a:	db2b      	blt.n	2574 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    251c:	0959      	lsrs	r1, r3, #5
    251e:	f003 031f 	and.w	r3, r3, #31
    2522:	2201      	movs	r2, #1
    2524:	fa02 f303 	lsl.w	r3, r2, r3
    2528:	4a18      	ldr	r2, [pc, #96]	; (258c <_tc_timer_init+0x140>)
    252a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    252e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2532:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    2536:	2000      	movs	r0, #0
    2538:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    253a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    253e:	4a11      	ldr	r2, [pc, #68]	; (2584 <_tc_timer_init+0x138>)
    2540:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2544:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2546:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2548:	691b      	ldr	r3, [r3, #16]
    254a:	6223      	str	r3, [r4, #32]
    254c:	e7c0      	b.n	24d0 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    254e:	2b04      	cmp	r3, #4
    2550:	d1be      	bne.n	24d0 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2552:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2556:	4a0b      	ldr	r2, [pc, #44]	; (2584 <_tc_timer_init+0x138>)
    2558:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    255c:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    255e:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2560:	7c1a      	ldrb	r2, [r3, #16]
    2562:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    2564:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2566:	76e3      	strb	r3, [r4, #27]
    2568:	e7b2      	b.n	24d0 <_tc_timer_init+0x84>
		return ERR_DENIED;
    256a:	f06f 0010 	mvn.w	r0, #16
    256e:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    2570:	2000      	movs	r0, #0
    2572:	bd70      	pop	{r4, r5, r6, pc}
    2574:	2000      	movs	r0, #0
}
    2576:	bd70      	pop	{r4, r5, r6, pc}
    2578:	000023d1 	.word	0x000023d1
    257c:	0000556c 	.word	0x0000556c
    2580:	00001421 	.word	0x00001421
    2584:	20000058 	.word	0x20000058
    2588:	0000236d 	.word	0x0000236d
    258c:	e000e100 	.word	0xe000e100

00002590 <_tc_timer_deinit>:
{
    2590:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    2592:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2594:	4620      	mov	r0, r4
    2596:	4b18      	ldr	r3, [pc, #96]	; (25f8 <_tc_timer_deinit+0x68>)
    2598:	4798      	blx	r3
    259a:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    259c:	f240 1201 	movw	r2, #257	; 0x101
    25a0:	4916      	ldr	r1, [pc, #88]	; (25fc <_tc_timer_deinit+0x6c>)
    25a2:	2001      	movs	r0, #1
    25a4:	4b16      	ldr	r3, [pc, #88]	; (2600 <_tc_timer_deinit+0x70>)
    25a6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    25a8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    25ac:	4b15      	ldr	r3, [pc, #84]	; (2604 <_tc_timer_deinit+0x74>)
    25ae:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    25b2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    25b6:	2b00      	cmp	r3, #0
    25b8:	db0d      	blt.n	25d6 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    25ba:	095a      	lsrs	r2, r3, #5
    25bc:	f003 031f 	and.w	r3, r3, #31
    25c0:	2101      	movs	r1, #1
    25c2:	fa01 f303 	lsl.w	r3, r1, r3
    25c6:	3220      	adds	r2, #32
    25c8:	490f      	ldr	r1, [pc, #60]	; (2608 <_tc_timer_deinit+0x78>)
    25ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    25ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25d2:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    25d6:	6923      	ldr	r3, [r4, #16]
    25d8:	f013 0f03 	tst.w	r3, #3
    25dc:	d1fb      	bne.n	25d6 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    25de:	6823      	ldr	r3, [r4, #0]
    25e0:	f023 0302 	bic.w	r3, r3, #2
    25e4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    25e6:	6923      	ldr	r3, [r4, #16]
    25e8:	f013 0f01 	tst.w	r3, #1
    25ec:	d1fb      	bne.n	25e6 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    25ee:	6823      	ldr	r3, [r4, #0]
    25f0:	f043 0301 	orr.w	r3, r3, #1
    25f4:	6023      	str	r3, [r4, #0]
    25f6:	bd38      	pop	{r3, r4, r5, pc}
    25f8:	000023d1 	.word	0x000023d1
    25fc:	0000556c 	.word	0x0000556c
    2600:	00001421 	.word	0x00001421
    2604:	20000058 	.word	0x20000058
    2608:	e000e100 	.word	0xe000e100

0000260c <_tc_timer_set_irq>:
{
    260c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    260e:	68c0      	ldr	r0, [r0, #12]
    2610:	4b08      	ldr	r3, [pc, #32]	; (2634 <_tc_timer_set_irq+0x28>)
    2612:	4798      	blx	r3
    2614:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2616:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    261a:	4907      	ldr	r1, [pc, #28]	; (2638 <_tc_timer_set_irq+0x2c>)
    261c:	2001      	movs	r0, #1
    261e:	4b07      	ldr	r3, [pc, #28]	; (263c <_tc_timer_set_irq+0x30>)
    2620:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2622:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2626:	4b06      	ldr	r3, [pc, #24]	; (2640 <_tc_timer_set_irq+0x34>)
    2628:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    262c:	78a0      	ldrb	r0, [r4, #2]
    262e:	4b05      	ldr	r3, [pc, #20]	; (2644 <_tc_timer_set_irq+0x38>)
    2630:	4798      	blx	r3
    2632:	bd10      	pop	{r4, pc}
    2634:	000023d1 	.word	0x000023d1
    2638:	0000556c 	.word	0x0000556c
    263c:	00001421 	.word	0x00001421
    2640:	20000058 	.word	0x20000058
    2644:	000016b9 	.word	0x000016b9

00002648 <_pwm_init>:
{
    2648:	b570      	push	{r4, r5, r6, lr}
    264a:	4606      	mov	r6, r0
    264c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    264e:	4608      	mov	r0, r1
    2650:	4b3f      	ldr	r3, [pc, #252]	; (2750 <_pwm_init+0x108>)
    2652:	4798      	blx	r3
    2654:	4605      	mov	r5, r0
	device->hw = hw;
    2656:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2658:	6923      	ldr	r3, [r4, #16]
    265a:	f013 0f01 	tst.w	r3, #1
    265e:	d1fb      	bne.n	2658 <_pwm_init+0x10>
    2660:	6923      	ldr	r3, [r4, #16]
    2662:	f013 0f03 	tst.w	r3, #3
    2666:	d1fb      	bne.n	2660 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2668:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    266a:	f013 0f02 	tst.w	r3, #2
    266e:	d165      	bne.n	273c <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2670:	6923      	ldr	r3, [r4, #16]
    2672:	f013 0f01 	tst.w	r3, #1
    2676:	d1fb      	bne.n	2670 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2678:	6823      	ldr	r3, [r4, #0]
    267a:	f043 0301 	orr.w	r3, r3, #1
    267e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2680:	6923      	ldr	r3, [r4, #16]
    2682:	f013 0f01 	tst.w	r3, #1
    2686:	d1fb      	bne.n	2680 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2688:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    268c:	4a31      	ldr	r2, [pc, #196]	; (2754 <_pwm_init+0x10c>)
    268e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2692:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2694:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2696:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2698:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    269a:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    269c:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    269e:	2203      	movs	r2, #3
    26a0:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    26a2:	685b      	ldr	r3, [r3, #4]
    26a4:	f003 030c 	and.w	r3, r3, #12
    26a8:	2b08      	cmp	r3, #8
    26aa:	d03d      	beq.n	2728 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    26ac:	2b00      	cmp	r3, #0
    26ae:	d148      	bne.n	2742 <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    26b0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26b4:	4a27      	ldr	r2, [pc, #156]	; (2754 <_pwm_init+0x10c>)
    26b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26ba:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    26bc:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    26be:	8a1b      	ldrh	r3, [r3, #16]
    26c0:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    26c2:	4631      	mov	r1, r6
    26c4:	4620      	mov	r0, r4
    26c6:	4b24      	ldr	r3, [pc, #144]	; (2758 <_pwm_init+0x110>)
    26c8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    26ca:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26ce:	4a21      	ldr	r2, [pc, #132]	; (2754 <_pwm_init+0x10c>)
    26d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    26d8:	2b00      	cmp	r3, #0
    26da:	db35      	blt.n	2748 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    26dc:	095a      	lsrs	r2, r3, #5
    26de:	f003 031f 	and.w	r3, r3, #31
    26e2:	2101      	movs	r1, #1
    26e4:	fa01 f303 	lsl.w	r3, r1, r3
    26e8:	3220      	adds	r2, #32
    26ea:	491c      	ldr	r1, [pc, #112]	; (275c <_pwm_init+0x114>)
    26ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    26f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26f4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    26f8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    26fc:	4b15      	ldr	r3, [pc, #84]	; (2754 <_pwm_init+0x10c>)
    26fe:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2702:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2706:	2b00      	cmp	r3, #0
    2708:	db20      	blt.n	274c <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    270a:	0959      	lsrs	r1, r3, #5
    270c:	f003 031f 	and.w	r3, r3, #31
    2710:	2201      	movs	r2, #1
    2712:	fa02 f303 	lsl.w	r3, r2, r3
    2716:	4a11      	ldr	r2, [pc, #68]	; (275c <_pwm_init+0x114>)
    2718:	f101 0060 	add.w	r0, r1, #96	; 0x60
    271c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2720:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2724:	2000      	movs	r0, #0
    2726:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2728:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    272c:	4a09      	ldr	r2, [pc, #36]	; (2754 <_pwm_init+0x10c>)
    272e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2732:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2734:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2736:	691b      	ldr	r3, [r3, #16]
    2738:	6223      	str	r3, [r4, #32]
    273a:	e7c2      	b.n	26c2 <_pwm_init+0x7a>
		return ERR_DENIED;
    273c:	f06f 0010 	mvn.w	r0, #16
    2740:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2742:	f04f 30ff 	mov.w	r0, #4294967295
    2746:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    2748:	2000      	movs	r0, #0
    274a:	bd70      	pop	{r4, r5, r6, pc}
    274c:	2000      	movs	r0, #0
}
    274e:	bd70      	pop	{r4, r5, r6, pc}
    2750:	000023d1 	.word	0x000023d1
    2754:	20000058 	.word	0x20000058
    2758:	0000236d 	.word	0x0000236d
    275c:	e000e100 	.word	0xe000e100

00002760 <_tc_get_timer>:
}
    2760:	4800      	ldr	r0, [pc, #0]	; (2764 <_tc_get_timer+0x4>)
    2762:	4770      	bx	lr
    2764:	200000d0 	.word	0x200000d0

00002768 <_tc_get_pwm>:
}
    2768:	2000      	movs	r0, #0
    276a:	4770      	bx	lr

0000276c <TC0_Handler>:
{
    276c:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    276e:	4b02      	ldr	r3, [pc, #8]	; (2778 <TC0_Handler+0xc>)
    2770:	6818      	ldr	r0, [r3, #0]
    2772:	4b02      	ldr	r3, [pc, #8]	; (277c <TC0_Handler+0x10>)
    2774:	4798      	blx	r3
    2776:	bd08      	pop	{r3, pc}
    2778:	20000738 	.word	0x20000738
    277c:	0000233d 	.word	0x0000233d

00002780 <TC1_Handler>:
{
    2780:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    2782:	4b02      	ldr	r3, [pc, #8]	; (278c <TC1_Handler+0xc>)
    2784:	6858      	ldr	r0, [r3, #4]
    2786:	4b02      	ldr	r3, [pc, #8]	; (2790 <TC1_Handler+0x10>)
    2788:	4798      	blx	r3
    278a:	bd08      	pop	{r3, pc}
    278c:	20000738 	.word	0x20000738
    2790:	0000233d 	.word	0x0000233d

00002794 <TC2_Handler>:
{
    2794:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    2796:	4b02      	ldr	r3, [pc, #8]	; (27a0 <TC2_Handler+0xc>)
    2798:	6898      	ldr	r0, [r3, #8]
    279a:	4b02      	ldr	r3, [pc, #8]	; (27a4 <TC2_Handler+0x10>)
    279c:	4798      	blx	r3
    279e:	bd08      	pop	{r3, pc}
    27a0:	20000738 	.word	0x20000738
    27a4:	0000233d 	.word	0x0000233d

000027a8 <TC3_Handler>:
{
    27a8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    27aa:	4b02      	ldr	r3, [pc, #8]	; (27b4 <TC3_Handler+0xc>)
    27ac:	68d8      	ldr	r0, [r3, #12]
    27ae:	4b02      	ldr	r3, [pc, #8]	; (27b8 <TC3_Handler+0x10>)
    27b0:	4798      	blx	r3
    27b2:	bd08      	pop	{r3, pc}
    27b4:	20000738 	.word	0x20000738
    27b8:	00002325 	.word	0x00002325

000027bc <TC4_Handler>:
{
    27bc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    27be:	4b02      	ldr	r3, [pc, #8]	; (27c8 <TC4_Handler+0xc>)
    27c0:	6918      	ldr	r0, [r3, #16]
    27c2:	4b02      	ldr	r3, [pc, #8]	; (27cc <TC4_Handler+0x10>)
    27c4:	4798      	blx	r3
    27c6:	bd08      	pop	{r3, pc}
    27c8:	20000738 	.word	0x20000738
    27cc:	00002325 	.word	0x00002325

000027d0 <TC5_Handler>:
{
    27d0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    27d2:	4b02      	ldr	r3, [pc, #8]	; (27dc <TC5_Handler+0xc>)
    27d4:	6958      	ldr	r0, [r3, #20]
    27d6:	4b02      	ldr	r3, [pc, #8]	; (27e0 <TC5_Handler+0x10>)
    27d8:	4798      	blx	r3
    27da:	bd08      	pop	{r3, pc}
    27dc:	20000738 	.word	0x20000738
    27e0:	00002325 	.word	0x00002325

000027e4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    27e4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    27e6:	4604      	mov	r4, r0
    27e8:	b330      	cbz	r0, 2838 <_wdt_init+0x54>
    27ea:	6800      	ldr	r0, [r0, #0]
    27ec:	3000      	adds	r0, #0
    27ee:	bf18      	it	ne
    27f0:	2001      	movne	r0, #1
    27f2:	225a      	movs	r2, #90	; 0x5a
    27f4:	4914      	ldr	r1, [pc, #80]	; (2848 <_wdt_init+0x64>)
    27f6:	4b15      	ldr	r3, [pc, #84]	; (284c <_wdt_init+0x68>)
    27f8:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    27fa:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    27fc:	689a      	ldr	r2, [r3, #8]
    27fe:	f012 0f0e 	tst.w	r2, #14
    2802:	d1fb      	bne.n	27fc <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2804:	781a      	ldrb	r2, [r3, #0]
    2806:	09d2      	lsrs	r2, r2, #7
    2808:	d118      	bne.n	283c <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    280a:	689a      	ldr	r2, [r3, #8]
    280c:	f012 0f0e 	tst.w	r2, #14
    2810:	d1fb      	bne.n	280a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2812:	781a      	ldrb	r2, [r3, #0]
    2814:	f012 0f02 	tst.w	r2, #2
    2818:	d113      	bne.n	2842 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    281a:	689a      	ldr	r2, [r3, #8]
    281c:	f012 0f0e 	tst.w	r2, #14
    2820:	d1fb      	bne.n	281a <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    2822:	781a      	ldrb	r2, [r3, #0]
    2824:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2828:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    282a:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    282c:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    282e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    2832:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    2834:	2000      	movs	r0, #0
    2836:	bd10      	pop	{r4, pc}
    2838:	2000      	movs	r0, #0
    283a:	e7da      	b.n	27f2 <_wdt_init+0xe>
		return ERR_DENIED;
    283c:	f06f 0010 	mvn.w	r0, #16
    2840:	bd10      	pop	{r4, pc}
    2842:	f06f 0010 	mvn.w	r0, #16
}
    2846:	bd10      	pop	{r4, pc}
    2848:	00005580 	.word	0x00005580
    284c:	00001421 	.word	0x00001421

00002850 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    2850:	b570      	push	{r4, r5, r6, lr}
    2852:	460d      	mov	r5, r1
    2854:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2856:	4606      	mov	r6, r0
    2858:	2800      	cmp	r0, #0
    285a:	d044      	beq.n	28e6 <_wdt_set_timeout_period+0x96>
    285c:	6800      	ldr	r0, [r0, #0]
    285e:	3000      	adds	r0, #0
    2860:	bf18      	it	ne
    2862:	2001      	movne	r0, #1
    2864:	2284      	movs	r2, #132	; 0x84
    2866:	493f      	ldr	r1, [pc, #252]	; (2964 <_wdt_set_timeout_period+0x114>)
    2868:	4b3f      	ldr	r3, [pc, #252]	; (2968 <_wdt_set_timeout_period+0x118>)
    286a:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    286c:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    286e:	6893      	ldr	r3, [r2, #8]
    2870:	f013 0f0e 	tst.w	r3, #14
    2874:	d1fb      	bne.n	286e <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    2876:	7813      	ldrb	r3, [r2, #0]
    2878:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    287c:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    287e:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2880:	688b      	ldr	r3, [r1, #8]
    2882:	f013 0f0e 	tst.w	r3, #14
    2886:	d1fb      	bne.n	2880 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    2888:	780b      	ldrb	r3, [r1, #0]
    288a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    288e:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    2890:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2892:	6899      	ldr	r1, [r3, #8]
    2894:	f011 0f0e 	tst.w	r1, #14
    2898:	d1fb      	bne.n	2892 <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    289a:	781a      	ldrb	r2, [r3, #0]
    289c:	09d2      	lsrs	r2, r2, #7
    289e:	d158      	bne.n	2952 <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    28a0:	6899      	ldr	r1, [r3, #8]
    28a2:	f011 0f0e 	tst.w	r1, #14
    28a6:	d1fb      	bne.n	28a0 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    28a8:	781a      	ldrb	r2, [r3, #0]
    28aa:	f012 0f02 	tst.w	r2, #2
    28ae:	d153      	bne.n	2958 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    28b0:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    28b4:	4628      	mov	r0, r5
    28b6:	2100      	movs	r1, #0
    28b8:	ea50 0201 	orrs.w	r2, r0, r1
    28bc:	d14f      	bne.n	295e <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    28be:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    28c2:	d038      	beq.n	2936 <_wdt_set_timeout_period+0xe6>
    28c4:	d911      	bls.n	28ea <_wdt_set_timeout_period+0x9a>
    28c6:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    28ca:	d038      	beq.n	293e <_wdt_set_timeout_period+0xee>
    28cc:	d927      	bls.n	291e <_wdt_set_timeout_period+0xce>
    28ce:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    28d2:	d038      	beq.n	2946 <_wdt_set_timeout_period+0xf6>
    28d4:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    28d8:	d037      	beq.n	294a <_wdt_set_timeout_period+0xfa>
    28da:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    28de:	d030      	beq.n	2942 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    28e0:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    28e4:	bd70      	pop	{r4, r5, r6, pc}
    28e6:	2000      	movs	r0, #0
    28e8:	e7bc      	b.n	2864 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    28ea:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    28ee:	d01e      	beq.n	292e <_wdt_set_timeout_period+0xde>
    28f0:	d80d      	bhi.n	290e <_wdt_set_timeout_period+0xbe>
    28f2:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    28f6:	d02a      	beq.n	294e <_wdt_set_timeout_period+0xfe>
    28f8:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    28fc:	d1f0      	bne.n	28e0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    28fe:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    2900:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    2902:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    2906:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    2908:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    290a:	2000      	movs	r0, #0
    290c:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    290e:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    2912:	d00e      	beq.n	2932 <_wdt_set_timeout_period+0xe2>
    2914:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    2918:	d1e2      	bne.n	28e0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    291a:	2104      	movs	r1, #4
			break;
    291c:	e7f0      	b.n	2900 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    291e:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    2922:	d00a      	beq.n	293a <_wdt_set_timeout_period+0xea>
    2924:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    2928:	d1da      	bne.n	28e0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    292a:	2107      	movs	r1, #7
			break;
    292c:	e7e8      	b.n	2900 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    292e:	2102      	movs	r1, #2
			break;
    2930:	e7e6      	b.n	2900 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    2932:	2103      	movs	r1, #3
			break;
    2934:	e7e4      	b.n	2900 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    2936:	2105      	movs	r1, #5
			break;
    2938:	e7e2      	b.n	2900 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    293a:	2106      	movs	r1, #6
			break;
    293c:	e7e0      	b.n	2900 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    293e:	2108      	movs	r1, #8
			break;
    2940:	e7de      	b.n	2900 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    2942:	2109      	movs	r1, #9
			break;
    2944:	e7dc      	b.n	2900 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    2946:	210a      	movs	r1, #10
			break;
    2948:	e7da      	b.n	2900 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    294a:	210b      	movs	r1, #11
			break;
    294c:	e7d8      	b.n	2900 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    294e:	2100      	movs	r1, #0
    2950:	e7d6      	b.n	2900 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    2952:	f06f 0010 	mvn.w	r0, #16
    2956:	bd70      	pop	{r4, r5, r6, pc}
    2958:	f06f 0010 	mvn.w	r0, #16
    295c:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    295e:	f06f 000c 	mvn.w	r0, #12
    2962:	bd70      	pop	{r4, r5, r6, pc}
    2964:	00005580 	.word	0x00005580
    2968:	00001421 	.word	0x00001421

0000296c <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    296c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    296e:	4604      	mov	r4, r0
    2970:	b198      	cbz	r0, 299a <_wdt_enable+0x2e>
    2972:	6800      	ldr	r0, [r0, #0]
    2974:	3000      	adds	r0, #0
    2976:	bf18      	it	ne
    2978:	2001      	movne	r0, #1
    297a:	f240 1207 	movw	r2, #263	; 0x107
    297e:	4908      	ldr	r1, [pc, #32]	; (29a0 <_wdt_enable+0x34>)
    2980:	4b08      	ldr	r3, [pc, #32]	; (29a4 <_wdt_enable+0x38>)
    2982:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    2984:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2986:	6893      	ldr	r3, [r2, #8]
    2988:	f013 0f0e 	tst.w	r3, #14
    298c:	d1fb      	bne.n	2986 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    298e:	7813      	ldrb	r3, [r2, #0]
    2990:	f043 0302 	orr.w	r3, r3, #2
    2994:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    2996:	2000      	movs	r0, #0
    2998:	bd10      	pop	{r4, pc}
    299a:	2000      	movs	r0, #0
    299c:	e7ed      	b.n	297a <_wdt_enable+0xe>
    299e:	bf00      	nop
    29a0:	00005580 	.word	0x00005580
    29a4:	00001421 	.word	0x00001421

000029a8 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    29a8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    29aa:	4604      	mov	r4, r0
    29ac:	b168      	cbz	r0, 29ca <_wdt_feed+0x22>
    29ae:	6800      	ldr	r0, [r0, #0]
    29b0:	3000      	adds	r0, #0
    29b2:	bf18      	it	ne
    29b4:	2001      	movne	r0, #1
    29b6:	f240 1225 	movw	r2, #293	; 0x125
    29ba:	4905      	ldr	r1, [pc, #20]	; (29d0 <_wdt_feed+0x28>)
    29bc:	4b05      	ldr	r3, [pc, #20]	; (29d4 <_wdt_feed+0x2c>)
    29be:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    29c0:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    29c2:	22a5      	movs	r2, #165	; 0xa5
    29c4:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    29c6:	2000      	movs	r0, #0
    29c8:	bd10      	pop	{r4, pc}
    29ca:	2000      	movs	r0, #0
    29cc:	e7f3      	b.n	29b6 <_wdt_feed+0xe>
    29ce:	bf00      	nop
    29d0:	00005580 	.word	0x00005580
    29d4:	00001421 	.word	0x00001421

000029d8 <main>:
BaseType_t ModemProcessTaskStatus;
BaseType_t ModemTxTaskStatus;
BaseType_t ModemRxTaskStatus;

int main(void)
{
    29d8:	b580      	push	{r7, lr}
    29da:	b082      	sub	sp, #8
    /* Initializes MCU, drivers and middleware */
    atmel_start_init();	
    29dc:	4b25      	ldr	r3, [pc, #148]	; (2a74 <main+0x9c>)
    29de:	4798      	blx	r3

    /* Create Dispatch Task */
    DispatchTaskStatus = xTaskCreate( DispatchTask, "DispatchTask", 150, NULL, 2, xDispatchTaskHandle );
    29e0:	4b25      	ldr	r3, [pc, #148]	; (2a78 <main+0xa0>)
    29e2:	681b      	ldr	r3, [r3, #0]
    29e4:	9301      	str	r3, [sp, #4]
    29e6:	2702      	movs	r7, #2
    29e8:	9700      	str	r7, [sp, #0]
    29ea:	2300      	movs	r3, #0
    29ec:	2296      	movs	r2, #150	; 0x96
    29ee:	4923      	ldr	r1, [pc, #140]	; (2a7c <main+0xa4>)
    29f0:	4823      	ldr	r0, [pc, #140]	; (2a80 <main+0xa8>)
    29f2:	4c24      	ldr	r4, [pc, #144]	; (2a84 <main+0xac>)
    29f4:	47a0      	blx	r4
    29f6:	4d24      	ldr	r5, [pc, #144]	; (2a88 <main+0xb0>)
    29f8:	6028      	str	r0, [r5, #0]

    /* Create Modem Tx Task */
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTask", 150, NULL, 1, xModemTxTaskHandle );
    29fa:	4b24      	ldr	r3, [pc, #144]	; (2a8c <main+0xb4>)
    29fc:	681b      	ldr	r3, [r3, #0]
    29fe:	9301      	str	r3, [sp, #4]
    2a00:	2601      	movs	r6, #1
    2a02:	9600      	str	r6, [sp, #0]
    2a04:	2300      	movs	r3, #0
    2a06:	2296      	movs	r2, #150	; 0x96
    2a08:	4921      	ldr	r1, [pc, #132]	; (2a90 <main+0xb8>)
    2a0a:	4822      	ldr	r0, [pc, #136]	; (2a94 <main+0xbc>)
    2a0c:	47a0      	blx	r4
    2a0e:	4b22      	ldr	r3, [pc, #136]	; (2a98 <main+0xc0>)
    2a10:	6018      	str	r0, [r3, #0]

    /* Create Modem Rx Task */
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, xModemRxTaskHandle);
    2a12:	4b22      	ldr	r3, [pc, #136]	; (2a9c <main+0xc4>)
    2a14:	681b      	ldr	r3, [r3, #0]
    2a16:	9301      	str	r3, [sp, #4]
    2a18:	9700      	str	r7, [sp, #0]
    2a1a:	2300      	movs	r3, #0
    2a1c:	2296      	movs	r2, #150	; 0x96
    2a1e:	4920      	ldr	r1, [pc, #128]	; (2aa0 <main+0xc8>)
    2a20:	4820      	ldr	r0, [pc, #128]	; (2aa4 <main+0xcc>)
    2a22:	47a0      	blx	r4
    2a24:	4b20      	ldr	r3, [pc, #128]	; (2aa8 <main+0xd0>)
    2a26:	6018      	str	r0, [r3, #0]

    /* Create Modem Process Task */
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, xModemProcessTaskHandle);
    2a28:	4b20      	ldr	r3, [pc, #128]	; (2aac <main+0xd4>)
    2a2a:	681b      	ldr	r3, [r3, #0]
    2a2c:	9301      	str	r3, [sp, #4]
    2a2e:	9600      	str	r6, [sp, #0]
    2a30:	2300      	movs	r3, #0
    2a32:	2296      	movs	r2, #150	; 0x96
    2a34:	491e      	ldr	r1, [pc, #120]	; (2ab0 <main+0xd8>)
    2a36:	481f      	ldr	r0, [pc, #124]	; (2ab4 <main+0xdc>)
    2a38:	47a0      	blx	r4
    2a3a:	4b1f      	ldr	r3, [pc, #124]	; (2ab8 <main+0xe0>)
    2a3c:	6018      	str	r0, [r3, #0]

    if((DispatchTaskStatus == pdPASS) &&
    2a3e:	682b      	ldr	r3, [r5, #0]
    2a40:	42b3      	cmp	r3, r6
    2a42:	d006      	beq.n	2a52 <main+0x7a>
    	DEBUG_PRINT("Successfully Created the Tasks");
    	vTaskStartScheduler();
    }
    else
    {
    	DEBUG_PRINT("Failed to create tasks");
    2a44:	481d      	ldr	r0, [pc, #116]	; (2abc <main+0xe4>)
    2a46:	4b1e      	ldr	r3, [pc, #120]	; (2ac0 <main+0xe8>)
    2a48:	4798      	blx	r3
    }

    DEBUG_PRINT("Error: Scheduler exited");
    2a4a:	481e      	ldr	r0, [pc, #120]	; (2ac4 <main+0xec>)
    2a4c:	4b1c      	ldr	r3, [pc, #112]	; (2ac0 <main+0xe8>)
    2a4e:	4798      	blx	r3
    2a50:	e7fe      	b.n	2a50 <main+0x78>
    if((DispatchTaskStatus == pdPASS) &&
    2a52:	42b0      	cmp	r0, r6
    2a54:	d1f6      	bne.n	2a44 <main+0x6c>
       (ModemTxTaskStatus == pdPASS) &&
    2a56:	4b10      	ldr	r3, [pc, #64]	; (2a98 <main+0xc0>)
       (ModemProcessTaskStatus == pdPASS) &&
    2a58:	681b      	ldr	r3, [r3, #0]
    2a5a:	42b3      	cmp	r3, r6
    2a5c:	d1f2      	bne.n	2a44 <main+0x6c>
       (ModemRxTaskStatus == pdPASS))
    2a5e:	4b12      	ldr	r3, [pc, #72]	; (2aa8 <main+0xd0>)
       (ModemTxTaskStatus == pdPASS) &&
    2a60:	681b      	ldr	r3, [r3, #0]
    2a62:	42b3      	cmp	r3, r6
    2a64:	d1ee      	bne.n	2a44 <main+0x6c>
    	DEBUG_PRINT("Successfully Created the Tasks");
    2a66:	4818      	ldr	r0, [pc, #96]	; (2ac8 <main+0xf0>)
    2a68:	4b15      	ldr	r3, [pc, #84]	; (2ac0 <main+0xe8>)
    2a6a:	4798      	blx	r3
    	vTaskStartScheduler();
    2a6c:	4b17      	ldr	r3, [pc, #92]	; (2acc <main+0xf4>)
    2a6e:	4798      	blx	r3
    2a70:	e7eb      	b.n	2a4a <main+0x72>
    2a72:	bf00      	nop
    2a74:	00000859 	.word	0x00000859
    2a78:	200024a8 	.word	0x200024a8
    2a7c:	00005598 	.word	0x00005598
    2a80:	00000339 	.word	0x00000339
    2a84:	000037dd 	.word	0x000037dd
    2a88:	20002e94 	.word	0x20002e94
    2a8c:	20002494 	.word	0x20002494
    2a90:	000055a8 	.word	0x000055a8
    2a94:	00000629 	.word	0x00000629
    2a98:	20002e90 	.word	0x20002e90
    2a9c:	200024a4 	.word	0x200024a4
    2aa0:	000055b4 	.word	0x000055b4
    2aa4:	00000609 	.word	0x00000609
    2aa8:	20002e98 	.word	0x20002e98
    2aac:	2000249c 	.word	0x2000249c
    2ab0:	000055c0 	.word	0x000055c0
    2ab4:	000005cd 	.word	0x000005cd
    2ab8:	20002e8c 	.word	0x20002e8c
    2abc:	000055f4 	.word	0x000055f4
    2ac0:	00000719 	.word	0x00000719
    2ac4:	0000560c 	.word	0x0000560c
    2ac8:	000055d4 	.word	0x000055d4
    2acc:	000039b9 	.word	0x000039b9

00002ad0 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    2ad0:	f100 0308 	add.w	r3, r0, #8
    2ad4:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2ad6:	f04f 32ff 	mov.w	r2, #4294967295
    2ada:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    2adc:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    2ade:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    2ae0:	2300      	movs	r3, #0
    2ae2:	6003      	str	r3, [r0, #0]
    2ae4:	4770      	bx	lr

00002ae6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2ae6:	2300      	movs	r3, #0
    2ae8:	6103      	str	r3, [r0, #16]
    2aea:	4770      	bx	lr

00002aec <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    2aec:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    2aee:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2af0:	689a      	ldr	r2, [r3, #8]
    2af2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2af4:	689a      	ldr	r2, [r3, #8]
    2af6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    2af8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    2afa:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    2afc:	6803      	ldr	r3, [r0, #0]
    2afe:	3301      	adds	r3, #1
    2b00:	6003      	str	r3, [r0, #0]
    2b02:	4770      	bx	lr

00002b04 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    2b04:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2b06:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    2b08:	f1b5 3fff 	cmp.w	r5, #4294967295
    2b0c:	d002      	beq.n	2b14 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    2b0e:	f100 0208 	add.w	r2, r0, #8
    2b12:	e002      	b.n	2b1a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    2b14:	6902      	ldr	r2, [r0, #16]
    2b16:	e004      	b.n	2b22 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    2b18:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    2b1a:	6853      	ldr	r3, [r2, #4]
    2b1c:	681c      	ldr	r4, [r3, #0]
    2b1e:	42a5      	cmp	r5, r4
    2b20:	d2fa      	bcs.n	2b18 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    2b22:	6853      	ldr	r3, [r2, #4]
    2b24:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2b26:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    2b28:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    2b2a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    2b2c:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    2b2e:	6803      	ldr	r3, [r0, #0]
    2b30:	3301      	adds	r3, #1
    2b32:	6003      	str	r3, [r0, #0]
}
    2b34:	bc30      	pop	{r4, r5}
    2b36:	4770      	bx	lr

00002b38 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    2b38:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2b3a:	6842      	ldr	r2, [r0, #4]
    2b3c:	6881      	ldr	r1, [r0, #8]
    2b3e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2b40:	6882      	ldr	r2, [r0, #8]
    2b42:	6841      	ldr	r1, [r0, #4]
    2b44:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    2b46:	685a      	ldr	r2, [r3, #4]
    2b48:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2b4a:	bf04      	itt	eq
    2b4c:	6882      	ldreq	r2, [r0, #8]
    2b4e:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2b50:	2200      	movs	r2, #0
    2b52:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    2b54:	681a      	ldr	r2, [r3, #0]
    2b56:	3a01      	subs	r2, #1
    2b58:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2b5a:	6818      	ldr	r0, [r3, #0]
}
    2b5c:	4770      	bx	lr
	...

00002b60 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    2b60:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    2b62:	2300      	movs	r3, #0
    2b64:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    2b66:	4b0d      	ldr	r3, [pc, #52]	; (2b9c <prvTaskExitError+0x3c>)
    2b68:	681b      	ldr	r3, [r3, #0]
    2b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
    2b6e:	d008      	beq.n	2b82 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    2b70:	f04f 0380 	mov.w	r3, #128	; 0x80
    2b74:	f383 8811 	msr	BASEPRI, r3
    2b78:	f3bf 8f6f 	isb	sy
    2b7c:	f3bf 8f4f 	dsb	sy
    2b80:	e7fe      	b.n	2b80 <prvTaskExitError+0x20>
    2b82:	f04f 0380 	mov.w	r3, #128	; 0x80
    2b86:	f383 8811 	msr	BASEPRI, r3
    2b8a:	f3bf 8f6f 	isb	sy
    2b8e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    2b92:	9b01      	ldr	r3, [sp, #4]
    2b94:	2b00      	cmp	r3, #0
    2b96:	d0fc      	beq.n	2b92 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    2b98:	b002      	add	sp, #8
    2b9a:	4770      	bx	lr
    2b9c:	200000f0 	.word	0x200000f0

00002ba0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    2ba0:	4808      	ldr	r0, [pc, #32]	; (2bc4 <prvPortStartFirstTask+0x24>)
    2ba2:	6800      	ldr	r0, [r0, #0]
    2ba4:	6800      	ldr	r0, [r0, #0]
    2ba6:	f380 8808 	msr	MSP, r0
    2baa:	f04f 0000 	mov.w	r0, #0
    2bae:	f380 8814 	msr	CONTROL, r0
    2bb2:	b662      	cpsie	i
    2bb4:	b661      	cpsie	f
    2bb6:	f3bf 8f4f 	dsb	sy
    2bba:	f3bf 8f6f 	isb	sy
    2bbe:	df00      	svc	0
    2bc0:	bf00      	nop
    2bc2:	0000      	.short	0x0000
    2bc4:	e000ed08 	.word	0xe000ed08

00002bc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    2bc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 2bd8 <vPortEnableVFP+0x10>
    2bcc:	6801      	ldr	r1, [r0, #0]
    2bce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    2bd2:	6001      	str	r1, [r0, #0]
    2bd4:	4770      	bx	lr
    2bd6:	0000      	.short	0x0000
    2bd8:	e000ed88 	.word	0xe000ed88

00002bdc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    2bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2be0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    2be4:	f021 0101 	bic.w	r1, r1, #1
    2be8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    2bec:	4b05      	ldr	r3, [pc, #20]	; (2c04 <pxPortInitialiseStack+0x28>)
    2bee:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    2bf2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    2bf6:	f06f 0302 	mvn.w	r3, #2
    2bfa:	f840 3c24 	str.w	r3, [r0, #-36]
}
    2bfe:	3844      	subs	r0, #68	; 0x44
    2c00:	4770      	bx	lr
    2c02:	bf00      	nop
    2c04:	00002b61 	.word	0x00002b61
	...

00002c10 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    2c10:	4b07      	ldr	r3, [pc, #28]	; (2c30 <pxCurrentTCBConst2>)
    2c12:	6819      	ldr	r1, [r3, #0]
    2c14:	6808      	ldr	r0, [r1, #0]
    2c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c1a:	f380 8809 	msr	PSP, r0
    2c1e:	f3bf 8f6f 	isb	sy
    2c22:	f04f 0000 	mov.w	r0, #0
    2c26:	f380 8811 	msr	BASEPRI, r0
    2c2a:	4770      	bx	lr
    2c2c:	f3af 8000 	nop.w

00002c30 <pxCurrentTCBConst2>:
    2c30:	200023f8 	.word	0x200023f8

00002c34 <vPortEnterCritical>:
    2c34:	f04f 0380 	mov.w	r3, #128	; 0x80
    2c38:	f383 8811 	msr	BASEPRI, r3
    2c3c:	f3bf 8f6f 	isb	sy
    2c40:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    2c44:	4a0a      	ldr	r2, [pc, #40]	; (2c70 <vPortEnterCritical+0x3c>)
    2c46:	6813      	ldr	r3, [r2, #0]
    2c48:	3301      	adds	r3, #1
    2c4a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    2c4c:	2b01      	cmp	r3, #1
    2c4e:	d10d      	bne.n	2c6c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    2c50:	4b08      	ldr	r3, [pc, #32]	; (2c74 <vPortEnterCritical+0x40>)
    2c52:	681b      	ldr	r3, [r3, #0]
    2c54:	f013 0fff 	tst.w	r3, #255	; 0xff
    2c58:	d008      	beq.n	2c6c <vPortEnterCritical+0x38>
    2c5a:	f04f 0380 	mov.w	r3, #128	; 0x80
    2c5e:	f383 8811 	msr	BASEPRI, r3
    2c62:	f3bf 8f6f 	isb	sy
    2c66:	f3bf 8f4f 	dsb	sy
    2c6a:	e7fe      	b.n	2c6a <vPortEnterCritical+0x36>
    2c6c:	4770      	bx	lr
    2c6e:	bf00      	nop
    2c70:	200000f0 	.word	0x200000f0
    2c74:	e000ed04 	.word	0xe000ed04

00002c78 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    2c78:	4b09      	ldr	r3, [pc, #36]	; (2ca0 <vPortExitCritical+0x28>)
    2c7a:	681b      	ldr	r3, [r3, #0]
    2c7c:	b943      	cbnz	r3, 2c90 <vPortExitCritical+0x18>
    2c7e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2c82:	f383 8811 	msr	BASEPRI, r3
    2c86:	f3bf 8f6f 	isb	sy
    2c8a:	f3bf 8f4f 	dsb	sy
    2c8e:	e7fe      	b.n	2c8e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    2c90:	3b01      	subs	r3, #1
    2c92:	4a03      	ldr	r2, [pc, #12]	; (2ca0 <vPortExitCritical+0x28>)
    2c94:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    2c96:	b90b      	cbnz	r3, 2c9c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    2c98:	f383 8811 	msr	BASEPRI, r3
    2c9c:	4770      	bx	lr
    2c9e:	bf00      	nop
    2ca0:	200000f0 	.word	0x200000f0
	...

00002cb0 <PendSV_Handler>:
	__asm volatile(
    2cb0:	f3ef 8009 	mrs	r0, PSP
    2cb4:	f3bf 8f6f 	isb	sy
    2cb8:	4b15      	ldr	r3, [pc, #84]	; (2d10 <pxCurrentTCBConst>)
    2cba:	681a      	ldr	r2, [r3, #0]
    2cbc:	f01e 0f10 	tst.w	lr, #16
    2cc0:	bf08      	it	eq
    2cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    2cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cca:	6010      	str	r0, [r2, #0]
    2ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
    2cd0:	f04f 0080 	mov.w	r0, #128	; 0x80
    2cd4:	f380 8811 	msr	BASEPRI, r0
    2cd8:	f3bf 8f4f 	dsb	sy
    2cdc:	f3bf 8f6f 	isb	sy
    2ce0:	f001 f85a 	bl	3d98 <vTaskSwitchContext>
    2ce4:	f04f 0000 	mov.w	r0, #0
    2ce8:	f380 8811 	msr	BASEPRI, r0
    2cec:	bc09      	pop	{r0, r3}
    2cee:	6819      	ldr	r1, [r3, #0]
    2cf0:	6808      	ldr	r0, [r1, #0]
    2cf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cf6:	f01e 0f10 	tst.w	lr, #16
    2cfa:	bf08      	it	eq
    2cfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    2d00:	f380 8809 	msr	PSP, r0
    2d04:	f3bf 8f6f 	isb	sy
    2d08:	4770      	bx	lr
    2d0a:	bf00      	nop
    2d0c:	f3af 8000 	nop.w

00002d10 <pxCurrentTCBConst>:
    2d10:	200023f8 	.word	0x200023f8

00002d14 <SysTick_Handler>:
{
    2d14:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    2d16:	f04f 0380 	mov.w	r3, #128	; 0x80
    2d1a:	f383 8811 	msr	BASEPRI, r3
    2d1e:	f3bf 8f6f 	isb	sy
    2d22:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    2d26:	4b05      	ldr	r3, [pc, #20]	; (2d3c <SysTick_Handler+0x28>)
    2d28:	4798      	blx	r3
    2d2a:	b118      	cbz	r0, 2d34 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    2d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2d30:	4b03      	ldr	r3, [pc, #12]	; (2d40 <SysTick_Handler+0x2c>)
    2d32:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    2d34:	2300      	movs	r3, #0
    2d36:	f383 8811 	msr	BASEPRI, r3
    2d3a:	bd08      	pop	{r3, pc}
    2d3c:	00003a61 	.word	0x00003a61
    2d40:	e000ed04 	.word	0xe000ed04

00002d44 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    2d44:	4b05      	ldr	r3, [pc, #20]	; (2d5c <vPortSetupTimerInterrupt+0x18>)
    2d46:	2200      	movs	r2, #0
    2d48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    2d4a:	4905      	ldr	r1, [pc, #20]	; (2d60 <vPortSetupTimerInterrupt+0x1c>)
    2d4c:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    2d4e:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    2d52:	4a04      	ldr	r2, [pc, #16]	; (2d64 <vPortSetupTimerInterrupt+0x20>)
    2d54:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    2d56:	2207      	movs	r2, #7
    2d58:	601a      	str	r2, [r3, #0]
    2d5a:	4770      	bx	lr
    2d5c:	e000e010 	.word	0xe000e010
    2d60:	e000e018 	.word	0xe000e018
    2d64:	e000e014 	.word	0xe000e014

00002d68 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    2d68:	4b3b      	ldr	r3, [pc, #236]	; (2e58 <xPortStartScheduler+0xf0>)
    2d6a:	681a      	ldr	r2, [r3, #0]
    2d6c:	4b3b      	ldr	r3, [pc, #236]	; (2e5c <xPortStartScheduler+0xf4>)
    2d6e:	429a      	cmp	r2, r3
    2d70:	d108      	bne.n	2d84 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    2d72:	f04f 0380 	mov.w	r3, #128	; 0x80
    2d76:	f383 8811 	msr	BASEPRI, r3
    2d7a:	f3bf 8f6f 	isb	sy
    2d7e:	f3bf 8f4f 	dsb	sy
    2d82:	e7fe      	b.n	2d82 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    2d84:	4b34      	ldr	r3, [pc, #208]	; (2e58 <xPortStartScheduler+0xf0>)
    2d86:	681a      	ldr	r2, [r3, #0]
    2d88:	4b35      	ldr	r3, [pc, #212]	; (2e60 <xPortStartScheduler+0xf8>)
    2d8a:	429a      	cmp	r2, r3
    2d8c:	d108      	bne.n	2da0 <xPortStartScheduler+0x38>
    2d8e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2d92:	f383 8811 	msr	BASEPRI, r3
    2d96:	f3bf 8f6f 	isb	sy
    2d9a:	f3bf 8f4f 	dsb	sy
    2d9e:	e7fe      	b.n	2d9e <xPortStartScheduler+0x36>
{
    2da0:	b510      	push	{r4, lr}
    2da2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    2da4:	4b2f      	ldr	r3, [pc, #188]	; (2e64 <xPortStartScheduler+0xfc>)
    2da6:	781a      	ldrb	r2, [r3, #0]
    2da8:	b2d2      	uxtb	r2, r2
    2daa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    2dac:	22ff      	movs	r2, #255	; 0xff
    2dae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    2db0:	781b      	ldrb	r3, [r3, #0]
    2db2:	b2db      	uxtb	r3, r3
    2db4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    2db8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2dbc:	4a2a      	ldr	r2, [pc, #168]	; (2e68 <xPortStartScheduler+0x100>)
    2dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2dc2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    2dc4:	2307      	movs	r3, #7
    2dc6:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    2dc8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2dcc:	f013 0f80 	tst.w	r3, #128	; 0x80
    2dd0:	d012      	beq.n	2df8 <xPortStartScheduler+0x90>
    2dd2:	2306      	movs	r3, #6
    2dd4:	e000      	b.n	2dd8 <xPortStartScheduler+0x70>
    2dd6:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    2dd8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    2ddc:	0052      	lsls	r2, r2, #1
    2dde:	b2d2      	uxtb	r2, r2
    2de0:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    2de4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    2de8:	1e59      	subs	r1, r3, #1
    2dea:	f012 0f80 	tst.w	r2, #128	; 0x80
    2dee:	d1f2      	bne.n	2dd6 <xPortStartScheduler+0x6e>
    2df0:	4a1d      	ldr	r2, [pc, #116]	; (2e68 <xPortStartScheduler+0x100>)
    2df2:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    2df4:	2b04      	cmp	r3, #4
    2df6:	d008      	beq.n	2e0a <xPortStartScheduler+0xa2>
    2df8:	f04f 0380 	mov.w	r3, #128	; 0x80
    2dfc:	f383 8811 	msr	BASEPRI, r3
    2e00:	f3bf 8f6f 	isb	sy
    2e04:	f3bf 8f4f 	dsb	sy
    2e08:	e7fe      	b.n	2e08 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    2e0a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    2e0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2e10:	4a15      	ldr	r2, [pc, #84]	; (2e68 <xPortStartScheduler+0x100>)
    2e12:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    2e14:	9b01      	ldr	r3, [sp, #4]
    2e16:	b2db      	uxtb	r3, r3
    2e18:	4a12      	ldr	r2, [pc, #72]	; (2e64 <xPortStartScheduler+0xfc>)
    2e1a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    2e1c:	4b13      	ldr	r3, [pc, #76]	; (2e6c <xPortStartScheduler+0x104>)
    2e1e:	681a      	ldr	r2, [r3, #0]
    2e20:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    2e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    2e26:	681a      	ldr	r2, [r3, #0]
    2e28:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    2e2c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    2e2e:	4b10      	ldr	r3, [pc, #64]	; (2e70 <xPortStartScheduler+0x108>)
    2e30:	4798      	blx	r3
	uxCriticalNesting = 0;
    2e32:	2400      	movs	r4, #0
    2e34:	4b0f      	ldr	r3, [pc, #60]	; (2e74 <xPortStartScheduler+0x10c>)
    2e36:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    2e38:	4b0f      	ldr	r3, [pc, #60]	; (2e78 <xPortStartScheduler+0x110>)
    2e3a:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    2e3c:	4a0f      	ldr	r2, [pc, #60]	; (2e7c <xPortStartScheduler+0x114>)
    2e3e:	6813      	ldr	r3, [r2, #0]
    2e40:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    2e44:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    2e46:	4b0e      	ldr	r3, [pc, #56]	; (2e80 <xPortStartScheduler+0x118>)
    2e48:	4798      	blx	r3
	vTaskSwitchContext();
    2e4a:	4b0e      	ldr	r3, [pc, #56]	; (2e84 <xPortStartScheduler+0x11c>)
    2e4c:	4798      	blx	r3
	prvTaskExitError();
    2e4e:	4b0e      	ldr	r3, [pc, #56]	; (2e88 <xPortStartScheduler+0x120>)
    2e50:	4798      	blx	r3
}
    2e52:	4620      	mov	r0, r4
    2e54:	b002      	add	sp, #8
    2e56:	bd10      	pop	{r4, pc}
    2e58:	e000ed00 	.word	0xe000ed00
    2e5c:	410fc271 	.word	0x410fc271
    2e60:	410fc270 	.word	0x410fc270
    2e64:	e000e400 	.word	0xe000e400
    2e68:	20000750 	.word	0x20000750
    2e6c:	e000ed20 	.word	0xe000ed20
    2e70:	00002d45 	.word	0x00002d45
    2e74:	200000f0 	.word	0x200000f0
    2e78:	00002bc9 	.word	0x00002bc9
    2e7c:	e000ef34 	.word	0xe000ef34
    2e80:	00002ba1 	.word	0x00002ba1
    2e84:	00003d99 	.word	0x00003d99
    2e88:	00002b61 	.word	0x00002b61

00002e8c <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    2e8c:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    2e90:	2b0f      	cmp	r3, #15
    2e92:	d90f      	bls.n	2eb4 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    2e94:	4a10      	ldr	r2, [pc, #64]	; (2ed8 <vPortValidateInterruptPriority+0x4c>)
    2e96:	5c9b      	ldrb	r3, [r3, r2]
    2e98:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    2e9a:	4a10      	ldr	r2, [pc, #64]	; (2edc <vPortValidateInterruptPriority+0x50>)
    2e9c:	7812      	ldrb	r2, [r2, #0]
    2e9e:	429a      	cmp	r2, r3
    2ea0:	d908      	bls.n	2eb4 <vPortValidateInterruptPriority+0x28>
    2ea2:	f04f 0380 	mov.w	r3, #128	; 0x80
    2ea6:	f383 8811 	msr	BASEPRI, r3
    2eaa:	f3bf 8f6f 	isb	sy
    2eae:	f3bf 8f4f 	dsb	sy
    2eb2:	e7fe      	b.n	2eb2 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    2eb4:	4b0a      	ldr	r3, [pc, #40]	; (2ee0 <vPortValidateInterruptPriority+0x54>)
    2eb6:	681b      	ldr	r3, [r3, #0]
    2eb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2ebc:	4a07      	ldr	r2, [pc, #28]	; (2edc <vPortValidateInterruptPriority+0x50>)
    2ebe:	6852      	ldr	r2, [r2, #4]
    2ec0:	4293      	cmp	r3, r2
    2ec2:	d908      	bls.n	2ed6 <vPortValidateInterruptPriority+0x4a>
    2ec4:	f04f 0380 	mov.w	r3, #128	; 0x80
    2ec8:	f383 8811 	msr	BASEPRI, r3
    2ecc:	f3bf 8f6f 	isb	sy
    2ed0:	f3bf 8f4f 	dsb	sy
    2ed4:	e7fe      	b.n	2ed4 <vPortValidateInterruptPriority+0x48>
    2ed6:	4770      	bx	lr
    2ed8:	e000e3f0 	.word	0xe000e3f0
    2edc:	20000750 	.word	0x20000750
    2ee0:	e000ed0c 	.word	0xe000ed0c

00002ee4 <pvPortMalloc>:
static size_t xNextFreeByte = (size_t)0;

/*-----------------------------------------------------------*/

void *pvPortMalloc(size_t xWantedSize)
{
    2ee4:	b538      	push	{r3, r4, r5, lr}
    2ee6:	4604      	mov	r4, r0
	static uint8_t *pucAlignedHeap = NULL;

/* Ensure that blocks are always aligned to the required number of bytes. */
#if (portBYTE_ALIGNMENT != 1)
	{
		if (xWantedSize & portBYTE_ALIGNMENT_MASK) {
    2ee8:	f010 0f07 	tst.w	r0, #7
			/* Byte alignment required. */
			xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    2eec:	bf1c      	itt	ne
    2eee:	f020 0407 	bicne.w	r4, r0, #7
    2ef2:	3408      	addne	r4, #8
		}
	}
#endif

	vTaskSuspendAll();
    2ef4:	4b11      	ldr	r3, [pc, #68]	; (2f3c <pvPortMalloc+0x58>)
    2ef6:	4798      	blx	r3
	{
		if (pucAlignedHeap == NULL) {
    2ef8:	4b11      	ldr	r3, [pc, #68]	; (2f40 <pvPortMalloc+0x5c>)
    2efa:	681b      	ldr	r3, [r3, #0]
    2efc:	b19b      	cbz	r3, 2f26 <pvPortMalloc+0x42>
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
		}

		/* Check there is enough room left for the allocation. */
		if (((xNextFreeByte + xWantedSize) < configADJUSTED_HEAP_SIZE)
    2efe:	4b11      	ldr	r3, [pc, #68]	; (2f44 <pvPortMalloc+0x60>)
    2f00:	f8d3 3b0c 	ldr.w	r3, [r3, #2828]	; 0xb0c
    2f04:	441c      	add	r4, r3
    2f06:	f641 32f7 	movw	r2, #7159	; 0x1bf7
    2f0a:	4294      	cmp	r4, r2
    2f0c:	d812      	bhi.n	2f34 <pvPortMalloc+0x50>
		    && ((xNextFreeByte + xWantedSize) > xNextFreeByte)) /* Check for overflow. */
    2f0e:	42a3      	cmp	r3, r4
    2f10:	d212      	bcs.n	2f38 <pvPortMalloc+0x54>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2f12:	4a0b      	ldr	r2, [pc, #44]	; (2f40 <pvPortMalloc+0x5c>)
    2f14:	6815      	ldr	r5, [r2, #0]
    2f16:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
    2f18:	4b0a      	ldr	r3, [pc, #40]	; (2f44 <pvPortMalloc+0x60>)
    2f1a:	f8c3 4b0c 	str.w	r4, [r3, #2828]	; 0xb0c
		}

		traceMALLOC(pvReturn, xWantedSize);
	}
	(void)xTaskResumeAll();
    2f1e:	4b0a      	ldr	r3, [pc, #40]	; (2f48 <pvPortMalloc+0x64>)
    2f20:	4798      	blx	r3
		}
	}
#endif

	return pvReturn;
}
    2f22:	4628      	mov	r0, r5
    2f24:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    2f26:	4a06      	ldr	r2, [pc, #24]	; (2f40 <pvPortMalloc+0x5c>)
    2f28:	f102 030c 	add.w	r3, r2, #12
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
    2f2c:	f023 0307 	bic.w	r3, r3, #7
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    2f30:	6013      	str	r3, [r2, #0]
    2f32:	e7e4      	b.n	2efe <pvPortMalloc+0x1a>
	void *          pvReturn       = NULL;
    2f34:	2500      	movs	r5, #0
    2f36:	e7f2      	b.n	2f1e <pvPortMalloc+0x3a>
    2f38:	2500      	movs	r5, #0
    2f3a:	e7f0      	b.n	2f1e <pvPortMalloc+0x3a>
    2f3c:	00003a41 	.word	0x00003a41
    2f40:	20000758 	.word	0x20000758
    2f44:	20001850 	.word	0x20001850
    2f48:	00003b89 	.word	0x00003b89

00002f4c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	(void)pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT(pv == NULL);
    2f4c:	b140      	cbz	r0, 2f60 <vPortFree+0x14>
    2f4e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2f52:	f383 8811 	msr	BASEPRI, r3
    2f56:	f3bf 8f6f 	isb	sy
    2f5a:	f3bf 8f4f 	dsb	sy
    2f5e:	e7fe      	b.n	2f5e <vPortFree+0x12>
    2f60:	4770      	bx	lr
	...

00002f64 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    2f64:	b510      	push	{r4, lr}
    2f66:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    2f68:	4b04      	ldr	r3, [pc, #16]	; (2f7c <prvIsQueueEmpty+0x18>)
    2f6a:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    2f6c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2f6e:	4b04      	ldr	r3, [pc, #16]	; (2f80 <prvIsQueueEmpty+0x1c>)
    2f70:	4798      	blx	r3

	return xReturn;
}
    2f72:	fab4 f084 	clz	r0, r4
    2f76:	0940      	lsrs	r0, r0, #5
    2f78:	bd10      	pop	{r4, pc}
    2f7a:	bf00      	nop
    2f7c:	00002c35 	.word	0x00002c35
    2f80:	00002c79 	.word	0x00002c79

00002f84 <prvCopyDataToQueue>:
{
    2f84:	b570      	push	{r4, r5, r6, lr}
    2f86:	4604      	mov	r4, r0
    2f88:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2f8a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    2f8c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2f8e:	b952      	cbnz	r2, 2fa6 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    2f90:	6803      	ldr	r3, [r0, #0]
    2f92:	2b00      	cmp	r3, #0
    2f94:	d12a      	bne.n	2fec <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    2f96:	6840      	ldr	r0, [r0, #4]
    2f98:	4b18      	ldr	r3, [pc, #96]	; (2ffc <prvCopyDataToQueue+0x78>)
    2f9a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    2f9c:	2300      	movs	r3, #0
    2f9e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    2fa0:	3501      	adds	r5, #1
    2fa2:	63a5      	str	r5, [r4, #56]	; 0x38
}
    2fa4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    2fa6:	b96e      	cbnz	r6, 2fc4 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    2fa8:	6880      	ldr	r0, [r0, #8]
    2faa:	4b15      	ldr	r3, [pc, #84]	; (3000 <prvCopyDataToQueue+0x7c>)
    2fac:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2fae:	68a3      	ldr	r3, [r4, #8]
    2fb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2fb2:	4413      	add	r3, r2
    2fb4:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    2fb6:	6862      	ldr	r2, [r4, #4]
    2fb8:	4293      	cmp	r3, r2
    2fba:	d319      	bcc.n	2ff0 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2fbc:	6823      	ldr	r3, [r4, #0]
    2fbe:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    2fc0:	2000      	movs	r0, #0
    2fc2:	e7ed      	b.n	2fa0 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    2fc4:	68c0      	ldr	r0, [r0, #12]
    2fc6:	4b0e      	ldr	r3, [pc, #56]	; (3000 <prvCopyDataToQueue+0x7c>)
    2fc8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2fca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2fcc:	425b      	negs	r3, r3
    2fce:	68e2      	ldr	r2, [r4, #12]
    2fd0:	441a      	add	r2, r3
    2fd2:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    2fd4:	6821      	ldr	r1, [r4, #0]
    2fd6:	428a      	cmp	r2, r1
    2fd8:	d202      	bcs.n	2fe0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    2fda:	6862      	ldr	r2, [r4, #4]
    2fdc:	4413      	add	r3, r2
    2fde:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    2fe0:	2e02      	cmp	r6, #2
    2fe2:	d107      	bne.n	2ff4 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    2fe4:	b145      	cbz	r5, 2ff8 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    2fe6:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    2fe8:	2000      	movs	r0, #0
    2fea:	e7d9      	b.n	2fa0 <prvCopyDataToQueue+0x1c>
    2fec:	2000      	movs	r0, #0
    2fee:	e7d7      	b.n	2fa0 <prvCopyDataToQueue+0x1c>
    2ff0:	2000      	movs	r0, #0
    2ff2:	e7d5      	b.n	2fa0 <prvCopyDataToQueue+0x1c>
    2ff4:	2000      	movs	r0, #0
    2ff6:	e7d3      	b.n	2fa0 <prvCopyDataToQueue+0x1c>
    2ff8:	2000      	movs	r0, #0
    2ffa:	e7d1      	b.n	2fa0 <prvCopyDataToQueue+0x1c>
    2ffc:	00004035 	.word	0x00004035
    3000:	000044e1 	.word	0x000044e1

00003004 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    3004:	b570      	push	{r4, r5, r6, lr}
    3006:	b082      	sub	sp, #8
    3008:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    300a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    300c:	b164      	cbz	r4, 3028 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    300e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3010:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3012:	429a      	cmp	r2, r3
    3014:	d311      	bcc.n	303a <prvNotifyQueueSetContainer+0x36>
    3016:	f04f 0380 	mov.w	r3, #128	; 0x80
    301a:	f383 8811 	msr	BASEPRI, r3
    301e:	f3bf 8f6f 	isb	sy
    3022:	f3bf 8f4f 	dsb	sy
    3026:	e7fe      	b.n	3026 <prvNotifyQueueSetContainer+0x22>
    3028:	f04f 0380 	mov.w	r3, #128	; 0x80
    302c:	f383 8811 	msr	BASEPRI, r3
    3030:	f3bf 8f6f 	isb	sy
    3034:	f3bf 8f4f 	dsb	sy
    3038:	e7fe      	b.n	3038 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    303a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    303c:	4293      	cmp	r3, r2
    303e:	d803      	bhi.n	3048 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    3040:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    3042:	4630      	mov	r0, r6
    3044:	b002      	add	sp, #8
    3046:	bd70      	pop	{r4, r5, r6, pc}
    3048:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    304a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    304e:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    3050:	a901      	add	r1, sp, #4
    3052:	4620      	mov	r0, r4
    3054:	4b0a      	ldr	r3, [pc, #40]	; (3080 <prvNotifyQueueSetContainer+0x7c>)
    3056:	4798      	blx	r3
    3058:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    305a:	f1b5 3fff 	cmp.w	r5, #4294967295
    305e:	d10a      	bne.n	3076 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    3060:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3062:	2b00      	cmp	r3, #0
    3064:	d0ed      	beq.n	3042 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    3066:	f104 0024 	add.w	r0, r4, #36	; 0x24
    306a:	4b06      	ldr	r3, [pc, #24]	; (3084 <prvNotifyQueueSetContainer+0x80>)
    306c:	4798      	blx	r3
    306e:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    3070:	bf18      	it	ne
    3072:	2601      	movne	r6, #1
    3074:	e7e5      	b.n	3042 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    3076:	1c6b      	adds	r3, r5, #1
    3078:	b25b      	sxtb	r3, r3
    307a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    307e:	e7e0      	b.n	3042 <prvNotifyQueueSetContainer+0x3e>
    3080:	00002f85 	.word	0x00002f85
    3084:	00003ed5 	.word	0x00003ed5

00003088 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    3088:	6c02      	ldr	r2, [r0, #64]	; 0x40
    308a:	b172      	cbz	r2, 30aa <prvCopyDataFromQueue+0x22>
{
    308c:	b510      	push	{r4, lr}
    308e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3090:	68c4      	ldr	r4, [r0, #12]
    3092:	4414      	add	r4, r2
    3094:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    3096:	6840      	ldr	r0, [r0, #4]
    3098:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    309a:	bf24      	itt	cs
    309c:	6818      	ldrcs	r0, [r3, #0]
    309e:	60d8      	strcs	r0, [r3, #12]
    30a0:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    30a2:	68d9      	ldr	r1, [r3, #12]
    30a4:	4b01      	ldr	r3, [pc, #4]	; (30ac <prvCopyDataFromQueue+0x24>)
    30a6:	4798      	blx	r3
    30a8:	bd10      	pop	{r4, pc}
    30aa:	4770      	bx	lr
    30ac:	000044e1 	.word	0x000044e1

000030b0 <prvUnlockQueue>:
{
    30b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30b4:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    30b6:	4b23      	ldr	r3, [pc, #140]	; (3144 <prvUnlockQueue+0x94>)
    30b8:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    30ba:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    30be:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    30c0:	2c00      	cmp	r4, #0
    30c2:	dd19      	ble.n	30f8 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    30c4:	4e20      	ldr	r6, [pc, #128]	; (3148 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    30c6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3154 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    30ca:	4f20      	ldr	r7, [pc, #128]	; (314c <prvUnlockQueue+0x9c>)
    30cc:	e008      	b.n	30e0 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    30ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    30d0:	b193      	cbz	r3, 30f8 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    30d2:	f105 0024 	add.w	r0, r5, #36	; 0x24
    30d6:	47b8      	blx	r7
    30d8:	b960      	cbnz	r0, 30f4 <prvUnlockQueue+0x44>
    30da:	3c01      	subs	r4, #1
    30dc:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    30de:	b15c      	cbz	r4, 30f8 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    30e0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    30e2:	2b00      	cmp	r3, #0
    30e4:	d0f3      	beq.n	30ce <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    30e6:	2100      	movs	r1, #0
    30e8:	4628      	mov	r0, r5
    30ea:	47b0      	blx	r6
    30ec:	2800      	cmp	r0, #0
    30ee:	d0f4      	beq.n	30da <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    30f0:	47c0      	blx	r8
    30f2:	e7f2      	b.n	30da <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    30f4:	47c0      	blx	r8
    30f6:	e7f0      	b.n	30da <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    30f8:	23ff      	movs	r3, #255	; 0xff
    30fa:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    30fe:	4b14      	ldr	r3, [pc, #80]	; (3150 <prvUnlockQueue+0xa0>)
    3100:	4798      	blx	r3
	taskENTER_CRITICAL();
    3102:	4b10      	ldr	r3, [pc, #64]	; (3144 <prvUnlockQueue+0x94>)
    3104:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    3106:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    310a:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    310c:	2c00      	cmp	r4, #0
    310e:	dd12      	ble.n	3136 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3110:	692b      	ldr	r3, [r5, #16]
    3112:	b183      	cbz	r3, 3136 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3114:	f105 0710 	add.w	r7, r5, #16
    3118:	4e0c      	ldr	r6, [pc, #48]	; (314c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    311a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3154 <prvUnlockQueue+0xa4>
    311e:	e004      	b.n	312a <prvUnlockQueue+0x7a>
    3120:	3c01      	subs	r4, #1
    3122:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3124:	b13c      	cbz	r4, 3136 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3126:	692b      	ldr	r3, [r5, #16]
    3128:	b12b      	cbz	r3, 3136 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    312a:	4638      	mov	r0, r7
    312c:	47b0      	blx	r6
    312e:	2800      	cmp	r0, #0
    3130:	d0f6      	beq.n	3120 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    3132:	47c0      	blx	r8
    3134:	e7f4      	b.n	3120 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    3136:	23ff      	movs	r3, #255	; 0xff
    3138:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    313c:	4b04      	ldr	r3, [pc, #16]	; (3150 <prvUnlockQueue+0xa0>)
    313e:	4798      	blx	r3
    3140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3144:	00002c35 	.word	0x00002c35
    3148:	00003005 	.word	0x00003005
    314c:	00003ed5 	.word	0x00003ed5
    3150:	00002c79 	.word	0x00002c79
    3154:	00004005 	.word	0x00004005

00003158 <xQueueGenericReset>:
{
    3158:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    315a:	b330      	cbz	r0, 31aa <xQueueGenericReset+0x52>
    315c:	4604      	mov	r4, r0
    315e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    3160:	4b1c      	ldr	r3, [pc, #112]	; (31d4 <xQueueGenericReset+0x7c>)
    3162:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    3164:	6822      	ldr	r2, [r4, #0]
    3166:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    316a:	fb03 f301 	mul.w	r3, r3, r1
    316e:	18d0      	adds	r0, r2, r3
    3170:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    3172:	2000      	movs	r0, #0
    3174:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    3176:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    3178:	1a5b      	subs	r3, r3, r1
    317a:	4413      	add	r3, r2
    317c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    317e:	23ff      	movs	r3, #255	; 0xff
    3180:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    3184:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    3188:	b9c5      	cbnz	r5, 31bc <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    318a:	6923      	ldr	r3, [r4, #16]
    318c:	b1eb      	cbz	r3, 31ca <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    318e:	f104 0010 	add.w	r0, r4, #16
    3192:	4b11      	ldr	r3, [pc, #68]	; (31d8 <xQueueGenericReset+0x80>)
    3194:	4798      	blx	r3
    3196:	b1c0      	cbz	r0, 31ca <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    3198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    319c:	4b0f      	ldr	r3, [pc, #60]	; (31dc <xQueueGenericReset+0x84>)
    319e:	601a      	str	r2, [r3, #0]
    31a0:	f3bf 8f4f 	dsb	sy
    31a4:	f3bf 8f6f 	isb	sy
    31a8:	e00f      	b.n	31ca <xQueueGenericReset+0x72>
    31aa:	f04f 0380 	mov.w	r3, #128	; 0x80
    31ae:	f383 8811 	msr	BASEPRI, r3
    31b2:	f3bf 8f6f 	isb	sy
    31b6:	f3bf 8f4f 	dsb	sy
    31ba:	e7fe      	b.n	31ba <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    31bc:	f104 0010 	add.w	r0, r4, #16
    31c0:	4d07      	ldr	r5, [pc, #28]	; (31e0 <xQueueGenericReset+0x88>)
    31c2:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    31c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    31c8:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    31ca:	4b06      	ldr	r3, [pc, #24]	; (31e4 <xQueueGenericReset+0x8c>)
    31cc:	4798      	blx	r3
}
    31ce:	2001      	movs	r0, #1
    31d0:	bd38      	pop	{r3, r4, r5, pc}
    31d2:	bf00      	nop
    31d4:	00002c35 	.word	0x00002c35
    31d8:	00003ed5 	.word	0x00003ed5
    31dc:	e000ed04 	.word	0xe000ed04
    31e0:	00002ad1 	.word	0x00002ad1
    31e4:	00002c79 	.word	0x00002c79

000031e8 <xQueueGenericCreate>:
{
    31e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    31ea:	b940      	cbnz	r0, 31fe <xQueueGenericCreate+0x16>
    31ec:	f04f 0380 	mov.w	r3, #128	; 0x80
    31f0:	f383 8811 	msr	BASEPRI, r3
    31f4:	f3bf 8f6f 	isb	sy
    31f8:	f3bf 8f4f 	dsb	sy
    31fc:	e7fe      	b.n	31fc <xQueueGenericCreate+0x14>
    31fe:	4606      	mov	r6, r0
    3200:	4617      	mov	r7, r2
    3202:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    3204:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    3208:	3054      	adds	r0, #84	; 0x54
    320a:	4b0b      	ldr	r3, [pc, #44]	; (3238 <xQueueGenericCreate+0x50>)
    320c:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    320e:	4604      	mov	r4, r0
    3210:	b178      	cbz	r0, 3232 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    3212:	b11d      	cbz	r5, 321c <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    3214:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    3218:	6003      	str	r3, [r0, #0]
    321a:	e000      	b.n	321e <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    321c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    321e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    3220:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    3222:	2101      	movs	r1, #1
    3224:	4620      	mov	r0, r4
    3226:	4b05      	ldr	r3, [pc, #20]	; (323c <xQueueGenericCreate+0x54>)
    3228:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    322a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    322e:	2300      	movs	r3, #0
    3230:	64a3      	str	r3, [r4, #72]	; 0x48
}
    3232:	4620      	mov	r0, r4
    3234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3236:	bf00      	nop
    3238:	00002ee5 	.word	0x00002ee5
    323c:	00003159 	.word	0x00003159

00003240 <xQueueGenericSend>:
{
    3240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3244:	b085      	sub	sp, #20
    3246:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    3248:	b198      	cbz	r0, 3272 <xQueueGenericSend+0x32>
    324a:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    324c:	b1d1      	cbz	r1, 3284 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    324e:	2b02      	cmp	r3, #2
    3250:	d024      	beq.n	329c <xQueueGenericSend+0x5c>
    3252:	461e      	mov	r6, r3
    3254:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3256:	4b64      	ldr	r3, [pc, #400]	; (33e8 <xQueueGenericSend+0x1a8>)
    3258:	4798      	blx	r3
    325a:	bb58      	cbnz	r0, 32b4 <xQueueGenericSend+0x74>
    325c:	9b01      	ldr	r3, [sp, #4]
    325e:	b38b      	cbz	r3, 32c4 <xQueueGenericSend+0x84>
    3260:	f04f 0380 	mov.w	r3, #128	; 0x80
    3264:	f383 8811 	msr	BASEPRI, r3
    3268:	f3bf 8f6f 	isb	sy
    326c:	f3bf 8f4f 	dsb	sy
    3270:	e7fe      	b.n	3270 <xQueueGenericSend+0x30>
    3272:	f04f 0380 	mov.w	r3, #128	; 0x80
    3276:	f383 8811 	msr	BASEPRI, r3
    327a:	f3bf 8f6f 	isb	sy
    327e:	f3bf 8f4f 	dsb	sy
    3282:	e7fe      	b.n	3282 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3284:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3286:	2a00      	cmp	r2, #0
    3288:	d0e1      	beq.n	324e <xQueueGenericSend+0xe>
    328a:	f04f 0380 	mov.w	r3, #128	; 0x80
    328e:	f383 8811 	msr	BASEPRI, r3
    3292:	f3bf 8f6f 	isb	sy
    3296:	f3bf 8f4f 	dsb	sy
    329a:	e7fe      	b.n	329a <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    329c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    329e:	2a01      	cmp	r2, #1
    32a0:	d0d7      	beq.n	3252 <xQueueGenericSend+0x12>
    32a2:	f04f 0380 	mov.w	r3, #128	; 0x80
    32a6:	f383 8811 	msr	BASEPRI, r3
    32aa:	f3bf 8f6f 	isb	sy
    32ae:	f3bf 8f4f 	dsb	sy
    32b2:	e7fe      	b.n	32b2 <xQueueGenericSend+0x72>
    32b4:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    32b6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3414 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    32ba:	f8df a15c 	ldr.w	sl, [pc, #348]	; 3418 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    32be:	f8df 9134 	ldr.w	r9, [pc, #308]	; 33f4 <xQueueGenericSend+0x1b4>
    32c2:	e041      	b.n	3348 <xQueueGenericSend+0x108>
    32c4:	2500      	movs	r5, #0
    32c6:	e7f6      	b.n	32b6 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    32c8:	4632      	mov	r2, r6
    32ca:	4639      	mov	r1, r7
    32cc:	4620      	mov	r0, r4
    32ce:	4b47      	ldr	r3, [pc, #284]	; (33ec <xQueueGenericSend+0x1ac>)
    32d0:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    32d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    32d4:	b193      	cbz	r3, 32fc <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    32d6:	4631      	mov	r1, r6
    32d8:	4620      	mov	r0, r4
    32da:	4b45      	ldr	r3, [pc, #276]	; (33f0 <xQueueGenericSend+0x1b0>)
    32dc:	4798      	blx	r3
    32de:	b138      	cbz	r0, 32f0 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    32e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    32e4:	4b43      	ldr	r3, [pc, #268]	; (33f4 <xQueueGenericSend+0x1b4>)
    32e6:	601a      	str	r2, [r3, #0]
    32e8:	f3bf 8f4f 	dsb	sy
    32ec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    32f0:	4b41      	ldr	r3, [pc, #260]	; (33f8 <xQueueGenericSend+0x1b8>)
    32f2:	4798      	blx	r3
				return pdPASS;
    32f4:	2001      	movs	r0, #1
}
    32f6:	b005      	add	sp, #20
    32f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    32fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    32fe:	b173      	cbz	r3, 331e <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3300:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3304:	4b3d      	ldr	r3, [pc, #244]	; (33fc <xQueueGenericSend+0x1bc>)
    3306:	4798      	blx	r3
    3308:	2800      	cmp	r0, #0
    330a:	d0f1      	beq.n	32f0 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    330c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3310:	4b38      	ldr	r3, [pc, #224]	; (33f4 <xQueueGenericSend+0x1b4>)
    3312:	601a      	str	r2, [r3, #0]
    3314:	f3bf 8f4f 	dsb	sy
    3318:	f3bf 8f6f 	isb	sy
    331c:	e7e8      	b.n	32f0 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    331e:	2800      	cmp	r0, #0
    3320:	d0e6      	beq.n	32f0 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3326:	4b33      	ldr	r3, [pc, #204]	; (33f4 <xQueueGenericSend+0x1b4>)
    3328:	601a      	str	r2, [r3, #0]
    332a:	f3bf 8f4f 	dsb	sy
    332e:	f3bf 8f6f 	isb	sy
    3332:	e7dd      	b.n	32f0 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    3334:	4b30      	ldr	r3, [pc, #192]	; (33f8 <xQueueGenericSend+0x1b8>)
    3336:	4798      	blx	r3
					return errQUEUE_FULL;
    3338:	2000      	movs	r0, #0
    333a:	e7dc      	b.n	32f6 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    333c:	4620      	mov	r0, r4
    333e:	4b30      	ldr	r3, [pc, #192]	; (3400 <xQueueGenericSend+0x1c0>)
    3340:	4798      	blx	r3
				(void)xTaskResumeAll();
    3342:	4b30      	ldr	r3, [pc, #192]	; (3404 <xQueueGenericSend+0x1c4>)
    3344:	4798      	blx	r3
    3346:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    3348:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    334a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    334c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    334e:	429a      	cmp	r2, r3
    3350:	d3ba      	bcc.n	32c8 <xQueueGenericSend+0x88>
    3352:	2e02      	cmp	r6, #2
    3354:	d0b8      	beq.n	32c8 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    3356:	9b01      	ldr	r3, [sp, #4]
    3358:	2b00      	cmp	r3, #0
    335a:	d0eb      	beq.n	3334 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    335c:	b90d      	cbnz	r5, 3362 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    335e:	a802      	add	r0, sp, #8
    3360:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    3362:	4b25      	ldr	r3, [pc, #148]	; (33f8 <xQueueGenericSend+0x1b8>)
    3364:	4798      	blx	r3
		vTaskSuspendAll();
    3366:	4b28      	ldr	r3, [pc, #160]	; (3408 <xQueueGenericSend+0x1c8>)
    3368:	4798      	blx	r3
		prvLockQueue(pxQueue);
    336a:	47c0      	blx	r8
    336c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3370:	b25b      	sxtb	r3, r3
    3372:	f1b3 3fff 	cmp.w	r3, #4294967295
    3376:	bf04      	itt	eq
    3378:	2300      	moveq	r3, #0
    337a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    337e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3382:	b25b      	sxtb	r3, r3
    3384:	f1b3 3fff 	cmp.w	r3, #4294967295
    3388:	bf04      	itt	eq
    338a:	2300      	moveq	r3, #0
    338c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    3390:	4b19      	ldr	r3, [pc, #100]	; (33f8 <xQueueGenericSend+0x1b8>)
    3392:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3394:	a901      	add	r1, sp, #4
    3396:	a802      	add	r0, sp, #8
    3398:	4b1c      	ldr	r3, [pc, #112]	; (340c <xQueueGenericSend+0x1cc>)
    339a:	4798      	blx	r3
    339c:	b9e0      	cbnz	r0, 33d8 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    339e:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    33a0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    33a4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    33a6:	4b14      	ldr	r3, [pc, #80]	; (33f8 <xQueueGenericSend+0x1b8>)
    33a8:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    33aa:	45ab      	cmp	fp, r5
    33ac:	d1c6      	bne.n	333c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    33ae:	9901      	ldr	r1, [sp, #4]
    33b0:	f104 0010 	add.w	r0, r4, #16
    33b4:	4b16      	ldr	r3, [pc, #88]	; (3410 <xQueueGenericSend+0x1d0>)
    33b6:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    33b8:	4620      	mov	r0, r4
    33ba:	4b11      	ldr	r3, [pc, #68]	; (3400 <xQueueGenericSend+0x1c0>)
    33bc:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    33be:	4b11      	ldr	r3, [pc, #68]	; (3404 <xQueueGenericSend+0x1c4>)
    33c0:	4798      	blx	r3
    33c2:	2800      	cmp	r0, #0
    33c4:	d1bf      	bne.n	3346 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    33c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    33ca:	f8c9 3000 	str.w	r3, [r9]
    33ce:	f3bf 8f4f 	dsb	sy
    33d2:	f3bf 8f6f 	isb	sy
    33d6:	e7b6      	b.n	3346 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    33d8:	4620      	mov	r0, r4
    33da:	4b09      	ldr	r3, [pc, #36]	; (3400 <xQueueGenericSend+0x1c0>)
    33dc:	4798      	blx	r3
			(void)xTaskResumeAll();
    33de:	4b09      	ldr	r3, [pc, #36]	; (3404 <xQueueGenericSend+0x1c4>)
    33e0:	4798      	blx	r3
			return errQUEUE_FULL;
    33e2:	2000      	movs	r0, #0
    33e4:	e787      	b.n	32f6 <xQueueGenericSend+0xb6>
    33e6:	bf00      	nop
    33e8:	00004015 	.word	0x00004015
    33ec:	00002f85 	.word	0x00002f85
    33f0:	00003005 	.word	0x00003005
    33f4:	e000ed04 	.word	0xe000ed04
    33f8:	00002c79 	.word	0x00002c79
    33fc:	00003ed5 	.word	0x00003ed5
    3400:	000030b1 	.word	0x000030b1
    3404:	00003b89 	.word	0x00003b89
    3408:	00003a41 	.word	0x00003a41
    340c:	00003f79 	.word	0x00003f79
    3410:	00003e55 	.word	0x00003e55
    3414:	00002c35 	.word	0x00002c35
    3418:	00003f65 	.word	0x00003f65

0000341c <xQueueGenericSendFromISR>:
{
    341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    3420:	2800      	cmp	r0, #0
    3422:	d036      	beq.n	3492 <xQueueGenericSendFromISR+0x76>
    3424:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3426:	2900      	cmp	r1, #0
    3428:	d03c      	beq.n	34a4 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    342a:	2b02      	cmp	r3, #2
    342c:	d046      	beq.n	34bc <xQueueGenericSendFromISR+0xa0>
    342e:	461f      	mov	r7, r3
    3430:	4690      	mov	r8, r2
    3432:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    3434:	4b37      	ldr	r3, [pc, #220]	; (3514 <xQueueGenericSendFromISR+0xf8>)
    3436:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    3438:	f3ef 8611 	mrs	r6, BASEPRI
    343c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3440:	f383 8811 	msr	BASEPRI, r3
    3444:	f3bf 8f6f 	isb	sy
    3448:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    344c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    344e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3450:	429a      	cmp	r2, r3
    3452:	d301      	bcc.n	3458 <xQueueGenericSendFromISR+0x3c>
    3454:	2f02      	cmp	r7, #2
    3456:	d151      	bne.n	34fc <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    3458:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    345c:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    345e:	463a      	mov	r2, r7
    3460:	4649      	mov	r1, r9
    3462:	4620      	mov	r0, r4
    3464:	4b2c      	ldr	r3, [pc, #176]	; (3518 <xQueueGenericSendFromISR+0xfc>)
    3466:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    3468:	f1b5 3fff 	cmp.w	r5, #4294967295
    346c:	d140      	bne.n	34f0 <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    346e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3470:	b383      	cbz	r3, 34d4 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3472:	4639      	mov	r1, r7
    3474:	4620      	mov	r0, r4
    3476:	4b29      	ldr	r3, [pc, #164]	; (351c <xQueueGenericSendFromISR+0x100>)
    3478:	4798      	blx	r3
    347a:	2800      	cmp	r0, #0
    347c:	d040      	beq.n	3500 <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    347e:	f1b8 0f00 	cmp.w	r8, #0
    3482:	d03f      	beq.n	3504 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    3484:	2001      	movs	r0, #1
    3486:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    348a:	f386 8811 	msr	BASEPRI, r6
}
    348e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    3492:	f04f 0380 	mov.w	r3, #128	; 0x80
    3496:	f383 8811 	msr	BASEPRI, r3
    349a:	f3bf 8f6f 	isb	sy
    349e:	f3bf 8f4f 	dsb	sy
    34a2:	e7fe      	b.n	34a2 <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    34a4:	6c00      	ldr	r0, [r0, #64]	; 0x40
    34a6:	2800      	cmp	r0, #0
    34a8:	d0bf      	beq.n	342a <xQueueGenericSendFromISR+0xe>
    34aa:	f04f 0380 	mov.w	r3, #128	; 0x80
    34ae:	f383 8811 	msr	BASEPRI, r3
    34b2:	f3bf 8f6f 	isb	sy
    34b6:	f3bf 8f4f 	dsb	sy
    34ba:	e7fe      	b.n	34ba <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    34bc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    34be:	2801      	cmp	r0, #1
    34c0:	d0b5      	beq.n	342e <xQueueGenericSendFromISR+0x12>
    34c2:	f04f 0380 	mov.w	r3, #128	; 0x80
    34c6:	f383 8811 	msr	BASEPRI, r3
    34ca:	f3bf 8f6f 	isb	sy
    34ce:	f3bf 8f4f 	dsb	sy
    34d2:	e7fe      	b.n	34d2 <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    34d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    34d6:	b1bb      	cbz	r3, 3508 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    34d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    34dc:	4b10      	ldr	r3, [pc, #64]	; (3520 <xQueueGenericSendFromISR+0x104>)
    34de:	4798      	blx	r3
    34e0:	b1a0      	cbz	r0, 350c <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    34e2:	f1b8 0f00 	cmp.w	r8, #0
    34e6:	d013      	beq.n	3510 <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    34e8:	2001      	movs	r0, #1
    34ea:	f8c8 0000 	str.w	r0, [r8]
    34ee:	e7cc      	b.n	348a <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    34f0:	1c6b      	adds	r3, r5, #1
    34f2:	b25b      	sxtb	r3, r3
    34f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    34f8:	2001      	movs	r0, #1
    34fa:	e7c6      	b.n	348a <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    34fc:	2000      	movs	r0, #0
    34fe:	e7c4      	b.n	348a <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    3500:	2001      	movs	r0, #1
    3502:	e7c2      	b.n	348a <xQueueGenericSendFromISR+0x6e>
    3504:	2001      	movs	r0, #1
    3506:	e7c0      	b.n	348a <xQueueGenericSendFromISR+0x6e>
    3508:	2001      	movs	r0, #1
    350a:	e7be      	b.n	348a <xQueueGenericSendFromISR+0x6e>
    350c:	2001      	movs	r0, #1
    350e:	e7bc      	b.n	348a <xQueueGenericSendFromISR+0x6e>
    3510:	2001      	movs	r0, #1
    3512:	e7ba      	b.n	348a <xQueueGenericSendFromISR+0x6e>
    3514:	00002e8d 	.word	0x00002e8d
    3518:	00002f85 	.word	0x00002f85
    351c:	00003005 	.word	0x00003005
    3520:	00003ed5 	.word	0x00003ed5

00003524 <xQueueReceive>:
{
    3524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3528:	b084      	sub	sp, #16
    352a:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    352c:	b180      	cbz	r0, 3550 <xQueueReceive+0x2c>
    352e:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    3530:	b1b9      	cbz	r1, 3562 <xQueueReceive+0x3e>
    3532:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3534:	4b50      	ldr	r3, [pc, #320]	; (3678 <xQueueReceive+0x154>)
    3536:	4798      	blx	r3
    3538:	b9f8      	cbnz	r0, 357a <xQueueReceive+0x56>
    353a:	9b01      	ldr	r3, [sp, #4]
    353c:	b32b      	cbz	r3, 358a <xQueueReceive+0x66>
    353e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3542:	f383 8811 	msr	BASEPRI, r3
    3546:	f3bf 8f6f 	isb	sy
    354a:	f3bf 8f4f 	dsb	sy
    354e:	e7fe      	b.n	354e <xQueueReceive+0x2a>
    3550:	f04f 0380 	mov.w	r3, #128	; 0x80
    3554:	f383 8811 	msr	BASEPRI, r3
    3558:	f3bf 8f6f 	isb	sy
    355c:	f3bf 8f4f 	dsb	sy
    3560:	e7fe      	b.n	3560 <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    3562:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3564:	2b00      	cmp	r3, #0
    3566:	d0e4      	beq.n	3532 <xQueueReceive+0xe>
    3568:	f04f 0380 	mov.w	r3, #128	; 0x80
    356c:	f383 8811 	msr	BASEPRI, r3
    3570:	f3bf 8f6f 	isb	sy
    3574:	f3bf 8f4f 	dsb	sy
    3578:	e7fe      	b.n	3578 <xQueueReceive+0x54>
    357a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    357c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 36a4 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3580:	f8df a124 	ldr.w	sl, [pc, #292]	; 36a8 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    3584:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 3684 <xQueueReceive+0x160>
    3588:	e029      	b.n	35de <xQueueReceive+0xba>
    358a:	2700      	movs	r7, #0
    358c:	e7f6      	b.n	357c <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    358e:	4631      	mov	r1, r6
    3590:	4620      	mov	r0, r4
    3592:	4b3a      	ldr	r3, [pc, #232]	; (367c <xQueueReceive+0x158>)
    3594:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    3596:	3d01      	subs	r5, #1
    3598:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    359a:	6923      	ldr	r3, [r4, #16]
    359c:	b163      	cbz	r3, 35b8 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    359e:	f104 0010 	add.w	r0, r4, #16
    35a2:	4b37      	ldr	r3, [pc, #220]	; (3680 <xQueueReceive+0x15c>)
    35a4:	4798      	blx	r3
    35a6:	b138      	cbz	r0, 35b8 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    35a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    35ac:	4b35      	ldr	r3, [pc, #212]	; (3684 <xQueueReceive+0x160>)
    35ae:	601a      	str	r2, [r3, #0]
    35b0:	f3bf 8f4f 	dsb	sy
    35b4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    35b8:	4b33      	ldr	r3, [pc, #204]	; (3688 <xQueueReceive+0x164>)
    35ba:	4798      	blx	r3
				return pdPASS;
    35bc:	2001      	movs	r0, #1
}
    35be:	b004      	add	sp, #16
    35c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    35c4:	4b30      	ldr	r3, [pc, #192]	; (3688 <xQueueReceive+0x164>)
    35c6:	4798      	blx	r3
					return errQUEUE_EMPTY;
    35c8:	2000      	movs	r0, #0
    35ca:	e7f8      	b.n	35be <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    35cc:	a802      	add	r0, sp, #8
    35ce:	47d0      	blx	sl
    35d0:	e00e      	b.n	35f0 <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    35d2:	4620      	mov	r0, r4
    35d4:	4b2d      	ldr	r3, [pc, #180]	; (368c <xQueueReceive+0x168>)
    35d6:	4798      	blx	r3
				(void)xTaskResumeAll();
    35d8:	4b2d      	ldr	r3, [pc, #180]	; (3690 <xQueueReceive+0x16c>)
    35da:	4798      	blx	r3
    35dc:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    35de:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    35e0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    35e2:	2d00      	cmp	r5, #0
    35e4:	d1d3      	bne.n	358e <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    35e6:	9b01      	ldr	r3, [sp, #4]
    35e8:	2b00      	cmp	r3, #0
    35ea:	d0eb      	beq.n	35c4 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    35ec:	2f00      	cmp	r7, #0
    35ee:	d0ed      	beq.n	35cc <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    35f0:	4b25      	ldr	r3, [pc, #148]	; (3688 <xQueueReceive+0x164>)
    35f2:	4798      	blx	r3
		vTaskSuspendAll();
    35f4:	4b27      	ldr	r3, [pc, #156]	; (3694 <xQueueReceive+0x170>)
    35f6:	4798      	blx	r3
		prvLockQueue(pxQueue);
    35f8:	47c0      	blx	r8
    35fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    35fe:	b25b      	sxtb	r3, r3
    3600:	f1b3 3fff 	cmp.w	r3, #4294967295
    3604:	bf04      	itt	eq
    3606:	2300      	moveq	r3, #0
    3608:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    360c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3610:	b25b      	sxtb	r3, r3
    3612:	f1b3 3fff 	cmp.w	r3, #4294967295
    3616:	bf04      	itt	eq
    3618:	2300      	moveq	r3, #0
    361a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    361e:	4b1a      	ldr	r3, [pc, #104]	; (3688 <xQueueReceive+0x164>)
    3620:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3622:	a901      	add	r1, sp, #4
    3624:	a802      	add	r0, sp, #8
    3626:	4b1c      	ldr	r3, [pc, #112]	; (3698 <xQueueReceive+0x174>)
    3628:	4798      	blx	r3
    362a:	b9c8      	cbnz	r0, 3660 <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    362c:	4620      	mov	r0, r4
    362e:	4b1b      	ldr	r3, [pc, #108]	; (369c <xQueueReceive+0x178>)
    3630:	4798      	blx	r3
    3632:	2800      	cmp	r0, #0
    3634:	d0cd      	beq.n	35d2 <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    3636:	9901      	ldr	r1, [sp, #4]
    3638:	f104 0024 	add.w	r0, r4, #36	; 0x24
    363c:	4b18      	ldr	r3, [pc, #96]	; (36a0 <xQueueReceive+0x17c>)
    363e:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3640:	4620      	mov	r0, r4
    3642:	4b12      	ldr	r3, [pc, #72]	; (368c <xQueueReceive+0x168>)
    3644:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    3646:	4b12      	ldr	r3, [pc, #72]	; (3690 <xQueueReceive+0x16c>)
    3648:	4798      	blx	r3
    364a:	2800      	cmp	r0, #0
    364c:	d1c6      	bne.n	35dc <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    364e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3652:	f8c9 3000 	str.w	r3, [r9]
    3656:	f3bf 8f4f 	dsb	sy
    365a:	f3bf 8f6f 	isb	sy
    365e:	e7bd      	b.n	35dc <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    3660:	4620      	mov	r0, r4
    3662:	4b0a      	ldr	r3, [pc, #40]	; (368c <xQueueReceive+0x168>)
    3664:	4798      	blx	r3
			(void)xTaskResumeAll();
    3666:	4b0a      	ldr	r3, [pc, #40]	; (3690 <xQueueReceive+0x16c>)
    3668:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    366a:	4620      	mov	r0, r4
    366c:	4b0b      	ldr	r3, [pc, #44]	; (369c <xQueueReceive+0x178>)
    366e:	4798      	blx	r3
    3670:	2800      	cmp	r0, #0
    3672:	d0b3      	beq.n	35dc <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    3674:	2000      	movs	r0, #0
    3676:	e7a2      	b.n	35be <xQueueReceive+0x9a>
    3678:	00004015 	.word	0x00004015
    367c:	00003089 	.word	0x00003089
    3680:	00003ed5 	.word	0x00003ed5
    3684:	e000ed04 	.word	0xe000ed04
    3688:	00002c79 	.word	0x00002c79
    368c:	000030b1 	.word	0x000030b1
    3690:	00003b89 	.word	0x00003b89
    3694:	00003a41 	.word	0x00003a41
    3698:	00003f79 	.word	0x00003f79
    369c:	00002f65 	.word	0x00002f65
    36a0:	00003e55 	.word	0x00003e55
    36a4:	00002c35 	.word	0x00002c35
    36a8:	00003f65 	.word	0x00003f65

000036ac <vQueueWaitForMessageRestricted>:
{
    36ac:	b570      	push	{r4, r5, r6, lr}
    36ae:	4604      	mov	r4, r0
    36b0:	460d      	mov	r5, r1
    36b2:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    36b4:	4b11      	ldr	r3, [pc, #68]	; (36fc <vQueueWaitForMessageRestricted+0x50>)
    36b6:	4798      	blx	r3
    36b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    36bc:	b25b      	sxtb	r3, r3
    36be:	f1b3 3fff 	cmp.w	r3, #4294967295
    36c2:	bf04      	itt	eq
    36c4:	2300      	moveq	r3, #0
    36c6:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    36ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    36ce:	b25b      	sxtb	r3, r3
    36d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    36d4:	bf04      	itt	eq
    36d6:	2300      	moveq	r3, #0
    36d8:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    36dc:	4b08      	ldr	r3, [pc, #32]	; (3700 <vQueueWaitForMessageRestricted+0x54>)
    36de:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    36e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    36e2:	b11b      	cbz	r3, 36ec <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    36e4:	4620      	mov	r0, r4
    36e6:	4b07      	ldr	r3, [pc, #28]	; (3704 <vQueueWaitForMessageRestricted+0x58>)
    36e8:	4798      	blx	r3
    36ea:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    36ec:	4632      	mov	r2, r6
    36ee:	4629      	mov	r1, r5
    36f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    36f4:	4b04      	ldr	r3, [pc, #16]	; (3708 <vQueueWaitForMessageRestricted+0x5c>)
    36f6:	4798      	blx	r3
    36f8:	e7f4      	b.n	36e4 <vQueueWaitForMessageRestricted+0x38>
    36fa:	bf00      	nop
    36fc:	00002c35 	.word	0x00002c35
    3700:	00002c79 	.word	0x00002c79
    3704:	000030b1 	.word	0x000030b1
    3708:	00003e91 	.word	0x00003e91

0000370c <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    370c:	4a06      	ldr	r2, [pc, #24]	; (3728 <prvIdleTask+0x1c>)
				taskYIELD();
    370e:	4807      	ldr	r0, [pc, #28]	; (372c <prvIdleTask+0x20>)
    3710:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    3714:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3716:	2b01      	cmp	r3, #1
    3718:	d9fc      	bls.n	3714 <prvIdleTask+0x8>
				taskYIELD();
    371a:	6001      	str	r1, [r0, #0]
    371c:	f3bf 8f4f 	dsb	sy
    3720:	f3bf 8f6f 	isb	sy
    3724:	e7f6      	b.n	3714 <prvIdleTask+0x8>
    3726:	bf00      	nop
    3728:	20002360 	.word	0x20002360
    372c:	e000ed04 	.word	0xe000ed04

00003730 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    3730:	4b09      	ldr	r3, [pc, #36]	; (3758 <prvResetNextTaskUnblockTime+0x28>)
    3732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    3736:	681b      	ldr	r3, [r3, #0]
    3738:	b143      	cbz	r3, 374c <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    373a:	4b07      	ldr	r3, [pc, #28]	; (3758 <prvResetNextTaskUnblockTime+0x28>)
    373c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    3740:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    3742:	68d2      	ldr	r2, [r2, #12]
    3744:	6852      	ldr	r2, [r2, #4]
    3746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    374a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    374c:	f04f 32ff 	mov.w	r2, #4294967295
    3750:	4b01      	ldr	r3, [pc, #4]	; (3758 <prvResetNextTaskUnblockTime+0x28>)
    3752:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3756:	4770      	bx	lr
    3758:	20002360 	.word	0x20002360

0000375c <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    375c:	b570      	push	{r4, r5, r6, lr}
    375e:	4604      	mov	r4, r0
    3760:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    3762:	4b1a      	ldr	r3, [pc, #104]	; (37cc <prvAddCurrentTaskToDelayedList+0x70>)
    3764:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    3768:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    376c:	3004      	adds	r0, #4
    376e:	4b18      	ldr	r3, [pc, #96]	; (37d0 <prvAddCurrentTaskToDelayedList+0x74>)
    3770:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    3772:	f1b4 3fff 	cmp.w	r4, #4294967295
    3776:	d016      	beq.n	37a6 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    3778:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    377a:	4b14      	ldr	r3, [pc, #80]	; (37cc <prvAddCurrentTaskToDelayedList+0x70>)
    377c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    3780:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    3782:	42a5      	cmp	r5, r4
    3784:	d818      	bhi.n	37b8 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    3786:	4d11      	ldr	r5, [pc, #68]	; (37cc <prvAddCurrentTaskToDelayedList+0x70>)
    3788:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    378c:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    3790:	3104      	adds	r1, #4
    3792:	4b10      	ldr	r3, [pc, #64]	; (37d4 <prvAddCurrentTaskToDelayedList+0x78>)
    3794:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    3796:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    379a:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    379c:	bf3c      	itt	cc
    379e:	462b      	movcc	r3, r5
    37a0:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    37a4:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    37a6:	2e00      	cmp	r6, #0
    37a8:	d0e6      	beq.n	3778 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    37aa:	4808      	ldr	r0, [pc, #32]	; (37cc <prvAddCurrentTaskToDelayedList+0x70>)
    37ac:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    37b0:	3104      	adds	r1, #4
    37b2:	4b09      	ldr	r3, [pc, #36]	; (37d8 <prvAddCurrentTaskToDelayedList+0x7c>)
    37b4:	4798      	blx	r3
    37b6:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    37b8:	4b04      	ldr	r3, [pc, #16]	; (37cc <prvAddCurrentTaskToDelayedList+0x70>)
    37ba:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    37be:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    37c2:	3104      	adds	r1, #4
    37c4:	4b03      	ldr	r3, [pc, #12]	; (37d4 <prvAddCurrentTaskToDelayedList+0x78>)
    37c6:	4798      	blx	r3
    37c8:	bd70      	pop	{r4, r5, r6, pc}
    37ca:	bf00      	nop
    37cc:	20002360 	.word	0x20002360
    37d0:	00002b39 	.word	0x00002b39
    37d4:	00002b05 	.word	0x00002b05
    37d8:	00002aed 	.word	0x00002aed

000037dc <xTaskCreate>:
{
    37dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37e0:	b083      	sub	sp, #12
    37e2:	4683      	mov	fp, r0
    37e4:	460d      	mov	r5, r1
    37e6:	9301      	str	r3, [sp, #4]
    37e8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    37ec:	0096      	lsls	r6, r2, #2
    37ee:	4630      	mov	r0, r6
    37f0:	4b66      	ldr	r3, [pc, #408]	; (398c <xTaskCreate+0x1b0>)
    37f2:	4798      	blx	r3
		if (pxStack != NULL) {
    37f4:	2800      	cmp	r0, #0
    37f6:	f000 8096 	beq.w	3926 <xTaskCreate+0x14a>
    37fa:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    37fc:	2054      	movs	r0, #84	; 0x54
    37fe:	4b63      	ldr	r3, [pc, #396]	; (398c <xTaskCreate+0x1b0>)
    3800:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    3802:	4604      	mov	r4, r0
    3804:	2800      	cmp	r0, #0
    3806:	f000 808b 	beq.w	3920 <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    380a:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    380c:	4632      	mov	r2, r6
    380e:	21a5      	movs	r1, #165	; 0xa5
    3810:	4638      	mov	r0, r7
    3812:	4b5f      	ldr	r3, [pc, #380]	; (3990 <xTaskCreate+0x1b4>)
    3814:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    3816:	3e04      	subs	r6, #4
    3818:	6b23      	ldr	r3, [r4, #48]	; 0x30
    381a:	441e      	add	r6, r3
		                      & (~(
    381c:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    3820:	782b      	ldrb	r3, [r5, #0]
    3822:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    3826:	782b      	ldrb	r3, [r5, #0]
    3828:	b15b      	cbz	r3, 3842 <xTaskCreate+0x66>
    382a:	462b      	mov	r3, r5
    382c:	f104 0235 	add.w	r2, r4, #53	; 0x35
    3830:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    3832:	7858      	ldrb	r0, [r3, #1]
    3834:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    3838:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    383c:	b108      	cbz	r0, 3842 <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    383e:	4299      	cmp	r1, r3
    3840:	d1f7      	bne.n	3832 <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    3842:	2700      	movs	r7, #0
    3844:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    3848:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    384a:	2d04      	cmp	r5, #4
    384c:	bf28      	it	cs
    384e:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    3850:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    3852:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    3854:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    3856:	f104 0804 	add.w	r8, r4, #4
    385a:	4640      	mov	r0, r8
    385c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 39b4 <xTaskCreate+0x1d8>
    3860:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    3862:	f104 0018 	add.w	r0, r4, #24
    3866:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    3868:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    386a:	f1c5 0505 	rsb	r5, r5, #5
    386e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    3870:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    3872:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    3874:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    3878:	9a01      	ldr	r2, [sp, #4]
    387a:	4659      	mov	r1, fp
    387c:	4630      	mov	r0, r6
    387e:	4b45      	ldr	r3, [pc, #276]	; (3994 <xTaskCreate+0x1b8>)
    3880:	4798      	blx	r3
    3882:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    3884:	f1ba 0f00 	cmp.w	sl, #0
    3888:	d001      	beq.n	388e <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    388a:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    388e:	4b42      	ldr	r3, [pc, #264]	; (3998 <xTaskCreate+0x1bc>)
    3890:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    3892:	4b42      	ldr	r3, [pc, #264]	; (399c <xTaskCreate+0x1c0>)
    3894:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    3898:	3201      	adds	r2, #1
    389a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    389e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    38a2:	2b00      	cmp	r3, #0
    38a4:	d042      	beq.n	392c <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    38a6:	4b3d      	ldr	r3, [pc, #244]	; (399c <xTaskCreate+0x1c0>)
    38a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    38ac:	b94b      	cbnz	r3, 38c2 <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    38ae:	4b3b      	ldr	r3, [pc, #236]	; (399c <xTaskCreate+0x1c0>)
    38b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    38b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    38b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    38b8:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    38ba:	bf9c      	itt	ls
    38bc:	4b37      	ldrls	r3, [pc, #220]	; (399c <xTaskCreate+0x1c0>)
    38be:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    38c2:	4a36      	ldr	r2, [pc, #216]	; (399c <xTaskCreate+0x1c0>)
    38c4:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    38c8:	3301      	adds	r3, #1
    38ca:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    38ce:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    38d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    38d2:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    38d6:	4293      	cmp	r3, r2
    38d8:	bf84      	itt	hi
    38da:	4a30      	ldrhi	r2, [pc, #192]	; (399c <xTaskCreate+0x1c0>)
    38dc:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    38e0:	4d2e      	ldr	r5, [pc, #184]	; (399c <xTaskCreate+0x1c0>)
    38e2:	f105 0028 	add.w	r0, r5, #40	; 0x28
    38e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    38ea:	4641      	mov	r1, r8
    38ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    38f0:	4b2b      	ldr	r3, [pc, #172]	; (39a0 <xTaskCreate+0x1c4>)
    38f2:	4798      	blx	r3
	taskEXIT_CRITICAL();
    38f4:	4b2b      	ldr	r3, [pc, #172]	; (39a4 <xTaskCreate+0x1c8>)
    38f6:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    38f8:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    38fc:	2b00      	cmp	r3, #0
    38fe:	d03f      	beq.n	3980 <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    3900:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    3904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    3906:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3908:	429a      	cmp	r2, r3
    390a:	d23d      	bcs.n	3988 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    390c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3910:	4b25      	ldr	r3, [pc, #148]	; (39a8 <xTaskCreate+0x1cc>)
    3912:	601a      	str	r2, [r3, #0]
    3914:	f3bf 8f4f 	dsb	sy
    3918:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    391c:	2001      	movs	r0, #1
    391e:	e030      	b.n	3982 <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    3920:	4638      	mov	r0, r7
    3922:	4b22      	ldr	r3, [pc, #136]	; (39ac <xTaskCreate+0x1d0>)
    3924:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3926:	f04f 30ff 	mov.w	r0, #4294967295
    392a:	e02a      	b.n	3982 <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    392c:	4b1b      	ldr	r3, [pc, #108]	; (399c <xTaskCreate+0x1c0>)
    392e:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    3932:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    3936:	2b01      	cmp	r3, #1
    3938:	d1c3      	bne.n	38c2 <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    393a:	4d18      	ldr	r5, [pc, #96]	; (399c <xTaskCreate+0x1c0>)
    393c:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3940:	4e1b      	ldr	r6, [pc, #108]	; (39b0 <xTaskCreate+0x1d4>)
    3942:	47b0      	blx	r6
    3944:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    3948:	47b0      	blx	r6
    394a:	f105 0050 	add.w	r0, r5, #80	; 0x50
    394e:	47b0      	blx	r6
    3950:	f105 0064 	add.w	r0, r5, #100	; 0x64
    3954:	47b0      	blx	r6
    3956:	f105 0078 	add.w	r0, r5, #120	; 0x78
    395a:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    395c:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    3960:	4648      	mov	r0, r9
    3962:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    3964:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    3968:	4638      	mov	r0, r7
    396a:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    396c:	f105 0014 	add.w	r0, r5, #20
    3970:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    3972:	4628      	mov	r0, r5
    3974:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    3976:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    397a:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    397e:	e7a0      	b.n	38c2 <xTaskCreate+0xe6>
		xReturn = pdPASS;
    3980:	2001      	movs	r0, #1
}
    3982:	b003      	add	sp, #12
    3984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    3988:	2001      	movs	r0, #1
	return xReturn;
    398a:	e7fa      	b.n	3982 <xTaskCreate+0x1a6>
    398c:	00002ee5 	.word	0x00002ee5
    3990:	0000452b 	.word	0x0000452b
    3994:	00002bdd 	.word	0x00002bdd
    3998:	00002c35 	.word	0x00002c35
    399c:	20002360 	.word	0x20002360
    39a0:	00002aed 	.word	0x00002aed
    39a4:	00002c79 	.word	0x00002c79
    39a8:	e000ed04 	.word	0xe000ed04
    39ac:	00002f4d 	.word	0x00002f4d
    39b0:	00002ad1 	.word	0x00002ad1
    39b4:	00002ae7 	.word	0x00002ae7

000039b8 <vTaskStartScheduler>:
{
    39b8:	b510      	push	{r4, lr}
    39ba:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    39bc:	4b19      	ldr	r3, [pc, #100]	; (3a24 <vTaskStartScheduler+0x6c>)
    39be:	9301      	str	r3, [sp, #4]
    39c0:	2300      	movs	r3, #0
    39c2:	9300      	str	r3, [sp, #0]
    39c4:	2280      	movs	r2, #128	; 0x80
    39c6:	4918      	ldr	r1, [pc, #96]	; (3a28 <vTaskStartScheduler+0x70>)
    39c8:	4818      	ldr	r0, [pc, #96]	; (3a2c <vTaskStartScheduler+0x74>)
    39ca:	4c19      	ldr	r4, [pc, #100]	; (3a30 <vTaskStartScheduler+0x78>)
    39cc:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    39ce:	2801      	cmp	r0, #1
    39d0:	d004      	beq.n	39dc <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    39d2:	f1b0 3fff 	cmp.w	r0, #4294967295
    39d6:	d01b      	beq.n	3a10 <vTaskStartScheduler+0x58>
}
    39d8:	b002      	add	sp, #8
    39da:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    39dc:	4b15      	ldr	r3, [pc, #84]	; (3a34 <vTaskStartScheduler+0x7c>)
    39de:	4798      	blx	r3
	if (xReturn == pdPASS) {
    39e0:	2801      	cmp	r0, #1
    39e2:	d1f6      	bne.n	39d2 <vTaskStartScheduler+0x1a>
    39e4:	f04f 0380 	mov.w	r3, #128	; 0x80
    39e8:	f383 8811 	msr	BASEPRI, r3
    39ec:	f3bf 8f6f 	isb	sy
    39f0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    39f4:	4b10      	ldr	r3, [pc, #64]	; (3a38 <vTaskStartScheduler+0x80>)
    39f6:	f04f 32ff 	mov.w	r2, #4294967295
    39fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    39fe:	2201      	movs	r2, #1
    3a00:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    3a04:	2200      	movs	r2, #0
    3a06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    3a0a:	4b0c      	ldr	r3, [pc, #48]	; (3a3c <vTaskStartScheduler+0x84>)
    3a0c:	4798      	blx	r3
    3a0e:	e7e3      	b.n	39d8 <vTaskStartScheduler+0x20>
    3a10:	f04f 0380 	mov.w	r3, #128	; 0x80
    3a14:	f383 8811 	msr	BASEPRI, r3
    3a18:	f3bf 8f6f 	isb	sy
    3a1c:	f3bf 8f4f 	dsb	sy
    3a20:	e7fe      	b.n	3a20 <vTaskStartScheduler+0x68>
    3a22:	bf00      	nop
    3a24:	2000243c 	.word	0x2000243c
    3a28:	00005624 	.word	0x00005624
    3a2c:	0000370d 	.word	0x0000370d
    3a30:	000037dd 	.word	0x000037dd
    3a34:	00004165 	.word	0x00004165
    3a38:	20002360 	.word	0x20002360
    3a3c:	00002d69 	.word	0x00002d69

00003a40 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    3a40:	4a03      	ldr	r2, [pc, #12]	; (3a50 <vTaskSuspendAll+0x10>)
    3a42:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    3a46:	3301      	adds	r3, #1
    3a48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    3a4c:	4770      	bx	lr
    3a4e:	bf00      	nop
    3a50:	20002360 	.word	0x20002360

00003a54 <xTaskGetTickCount>:
		xTicks = xTickCount;
    3a54:	4b01      	ldr	r3, [pc, #4]	; (3a5c <xTaskGetTickCount+0x8>)
    3a56:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    3a5a:	4770      	bx	lr
    3a5c:	20002360 	.word	0x20002360

00003a60 <xTaskIncrementTick>:
{
    3a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    3a64:	4b44      	ldr	r3, [pc, #272]	; (3b78 <xTaskIncrementTick+0x118>)
    3a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    3a6a:	2b00      	cmp	r3, #0
    3a6c:	d173      	bne.n	3b56 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    3a6e:	4b42      	ldr	r3, [pc, #264]	; (3b78 <xTaskIncrementTick+0x118>)
    3a70:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    3a74:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    3a76:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    3a7a:	b9e6      	cbnz	r6, 3ab6 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    3a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    3a80:	681b      	ldr	r3, [r3, #0]
    3a82:	b143      	cbz	r3, 3a96 <xTaskIncrementTick+0x36>
    3a84:	f04f 0380 	mov.w	r3, #128	; 0x80
    3a88:	f383 8811 	msr	BASEPRI, r3
    3a8c:	f3bf 8f6f 	isb	sy
    3a90:	f3bf 8f4f 	dsb	sy
    3a94:	e7fe      	b.n	3a94 <xTaskIncrementTick+0x34>
    3a96:	4b38      	ldr	r3, [pc, #224]	; (3b78 <xTaskIncrementTick+0x118>)
    3a98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    3a9c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    3aa0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    3aa4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    3aa8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    3aac:	3201      	adds	r2, #1
    3aae:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    3ab2:	4b32      	ldr	r3, [pc, #200]	; (3b7c <xTaskIncrementTick+0x11c>)
    3ab4:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    3ab6:	4b30      	ldr	r3, [pc, #192]	; (3b78 <xTaskIncrementTick+0x118>)
    3ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    3abc:	429e      	cmp	r6, r3
    3abe:	d20d      	bcs.n	3adc <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    3ac0:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    3ac2:	4b2d      	ldr	r3, [pc, #180]	; (3b78 <xTaskIncrementTick+0x118>)
    3ac4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3ac8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3aca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    3ace:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    3ad4:	2b02      	cmp	r3, #2
    3ad6:	bf28      	it	cs
    3ad8:	2401      	movcs	r4, #1
    3ada:	e043      	b.n	3b64 <xTaskIncrementTick+0x104>
    3adc:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    3ade:	4d26      	ldr	r5, [pc, #152]	; (3b78 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    3ae0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3b84 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    3ae4:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    3ae8:	e021      	b.n	3b2e <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3aea:	f04f 32ff 	mov.w	r2, #4294967295
    3aee:	4b22      	ldr	r3, [pc, #136]	; (3b78 <xTaskIncrementTick+0x118>)
    3af0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    3af4:	e7e5      	b.n	3ac2 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    3af6:	4a20      	ldr	r2, [pc, #128]	; (3b78 <xTaskIncrementTick+0x118>)
    3af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    3afc:	e7e1      	b.n	3ac2 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    3afe:	f107 0018 	add.w	r0, r7, #24
    3b02:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    3b04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    3b06:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    3b0a:	4298      	cmp	r0, r3
    3b0c:	bf88      	it	hi
    3b0e:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    3b12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3b16:	4649      	mov	r1, r9
    3b18:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    3b1c:	4b18      	ldr	r3, [pc, #96]	; (3b80 <xTaskIncrementTick+0x120>)
    3b1e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    3b20:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    3b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    3b28:	429a      	cmp	r2, r3
    3b2a:	bf28      	it	cs
    3b2c:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    3b2e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    3b32:	681b      	ldr	r3, [r3, #0]
    3b34:	2b00      	cmp	r3, #0
    3b36:	d0d8      	beq.n	3aea <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    3b38:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    3b3c:	68db      	ldr	r3, [r3, #12]
    3b3e:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    3b40:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    3b42:	429e      	cmp	r6, r3
    3b44:	d3d7      	bcc.n	3af6 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    3b46:	f107 0904 	add.w	r9, r7, #4
    3b4a:	4648      	mov	r0, r9
    3b4c:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    3b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3b50:	2b00      	cmp	r3, #0
    3b52:	d1d4      	bne.n	3afe <xTaskIncrementTick+0x9e>
    3b54:	e7d6      	b.n	3b04 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    3b56:	4a08      	ldr	r2, [pc, #32]	; (3b78 <xTaskIncrementTick+0x118>)
    3b58:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    3b5c:	3301      	adds	r3, #1
    3b5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    3b62:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    3b64:	4b04      	ldr	r3, [pc, #16]	; (3b78 <xTaskIncrementTick+0x118>)
    3b66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    3b6a:	2b00      	cmp	r3, #0
}
    3b6c:	bf0c      	ite	eq
    3b6e:	4620      	moveq	r0, r4
    3b70:	2001      	movne	r0, #1
    3b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b76:	bf00      	nop
    3b78:	20002360 	.word	0x20002360
    3b7c:	00003731 	.word	0x00003731
    3b80:	00002aed 	.word	0x00002aed
    3b84:	00002b39 	.word	0x00002b39

00003b88 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    3b88:	4b3a      	ldr	r3, [pc, #232]	; (3c74 <xTaskResumeAll+0xec>)
    3b8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    3b8e:	b943      	cbnz	r3, 3ba2 <xTaskResumeAll+0x1a>
    3b90:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b94:	f383 8811 	msr	BASEPRI, r3
    3b98:	f3bf 8f6f 	isb	sy
    3b9c:	f3bf 8f4f 	dsb	sy
    3ba0:	e7fe      	b.n	3ba0 <xTaskResumeAll+0x18>
{
    3ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    3ba6:	4b34      	ldr	r3, [pc, #208]	; (3c78 <xTaskResumeAll+0xf0>)
    3ba8:	4798      	blx	r3
		--uxSchedulerSuspended;
    3baa:	4b32      	ldr	r3, [pc, #200]	; (3c74 <xTaskResumeAll+0xec>)
    3bac:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    3bb0:	3a01      	subs	r2, #1
    3bb2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    3bb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    3bba:	2b00      	cmp	r3, #0
    3bbc:	d155      	bne.n	3c6a <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    3bbe:	4b2d      	ldr	r3, [pc, #180]	; (3c74 <xTaskResumeAll+0xec>)
    3bc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    3bc4:	b92b      	cbnz	r3, 3bd2 <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    3bc6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    3bc8:	4b2c      	ldr	r3, [pc, #176]	; (3c7c <xTaskResumeAll+0xf4>)
    3bca:	4798      	blx	r3
}
    3bcc:	4620      	mov	r0, r4
    3bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bd2:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    3bd4:	4c27      	ldr	r4, [pc, #156]	; (3c74 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    3bd6:	4e2a      	ldr	r6, [pc, #168]	; (3c80 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    3bd8:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    3bdc:	6963      	ldr	r3, [r4, #20]
    3bde:	b1fb      	cbz	r3, 3c20 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    3be0:	6a23      	ldr	r3, [r4, #32]
    3be2:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    3be4:	f105 0018 	add.w	r0, r5, #24
    3be8:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    3bea:	1d2f      	adds	r7, r5, #4
    3bec:	4638      	mov	r0, r7
    3bee:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    3bf0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    3bf2:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    3bf6:	4298      	cmp	r0, r3
    3bf8:	bf88      	it	hi
    3bfa:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    3bfe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3c02:	4639      	mov	r1, r7
    3c04:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    3c08:	4b1e      	ldr	r3, [pc, #120]	; (3c84 <xTaskResumeAll+0xfc>)
    3c0a:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    3c0c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    3c10:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    3c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c14:	429a      	cmp	r2, r3
    3c16:	d3e1      	bcc.n	3bdc <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    3c18:	2301      	movs	r3, #1
    3c1a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    3c1e:	e7dd      	b.n	3bdc <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    3c20:	b10d      	cbz	r5, 3c26 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    3c22:	4b19      	ldr	r3, [pc, #100]	; (3c88 <xTaskResumeAll+0x100>)
    3c24:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    3c26:	4b13      	ldr	r3, [pc, #76]	; (3c74 <xTaskResumeAll+0xec>)
    3c28:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    3c2c:	b17c      	cbz	r4, 3c4e <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    3c2e:	4f17      	ldr	r7, [pc, #92]	; (3c8c <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    3c30:	461e      	mov	r6, r3
    3c32:	2501      	movs	r5, #1
    3c34:	e001      	b.n	3c3a <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    3c36:	3c01      	subs	r4, #1
    3c38:	d005      	beq.n	3c46 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    3c3a:	47b8      	blx	r7
    3c3c:	2800      	cmp	r0, #0
    3c3e:	d0fa      	beq.n	3c36 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    3c40:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    3c44:	e7f7      	b.n	3c36 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    3c46:	2200      	movs	r2, #0
    3c48:	4b0a      	ldr	r3, [pc, #40]	; (3c74 <xTaskResumeAll+0xec>)
    3c4a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    3c4e:	4b09      	ldr	r3, [pc, #36]	; (3c74 <xTaskResumeAll+0xec>)
    3c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    3c54:	b15b      	cbz	r3, 3c6e <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    3c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3c5a:	4b0d      	ldr	r3, [pc, #52]	; (3c90 <xTaskResumeAll+0x108>)
    3c5c:	601a      	str	r2, [r3, #0]
    3c5e:	f3bf 8f4f 	dsb	sy
    3c62:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    3c66:	2401      	movs	r4, #1
    3c68:	e7ae      	b.n	3bc8 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    3c6a:	2400      	movs	r4, #0
    3c6c:	e7ac      	b.n	3bc8 <xTaskResumeAll+0x40>
    3c6e:	2400      	movs	r4, #0
    3c70:	e7aa      	b.n	3bc8 <xTaskResumeAll+0x40>
    3c72:	bf00      	nop
    3c74:	20002360 	.word	0x20002360
    3c78:	00002c35 	.word	0x00002c35
    3c7c:	00002c79 	.word	0x00002c79
    3c80:	00002b39 	.word	0x00002b39
    3c84:	00002aed 	.word	0x00002aed
    3c88:	00003731 	.word	0x00003731
    3c8c:	00003a61 	.word	0x00003a61
    3c90:	e000ed04 	.word	0xe000ed04

00003c94 <vTaskDelayUntil>:
{
    3c94:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxPreviousWakeTime);
    3c96:	b150      	cbz	r0, 3cae <vTaskDelayUntil+0x1a>
    3c98:	4605      	mov	r5, r0
	configASSERT((xTimeIncrement > 0U));
    3c9a:	b989      	cbnz	r1, 3cc0 <vTaskDelayUntil+0x2c>
    3c9c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3ca0:	f383 8811 	msr	BASEPRI, r3
    3ca4:	f3bf 8f6f 	isb	sy
    3ca8:	f3bf 8f4f 	dsb	sy
    3cac:	e7fe      	b.n	3cac <vTaskDelayUntil+0x18>
    3cae:	f04f 0380 	mov.w	r3, #128	; 0x80
    3cb2:	f383 8811 	msr	BASEPRI, r3
    3cb6:	f3bf 8f6f 	isb	sy
    3cba:	f3bf 8f4f 	dsb	sy
    3cbe:	e7fe      	b.n	3cbe <vTaskDelayUntil+0x2a>
	configASSERT(uxSchedulerSuspended == 0);
    3cc0:	4b1a      	ldr	r3, [pc, #104]	; (3d2c <vTaskDelayUntil+0x98>)
    3cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    3cc6:	b143      	cbz	r3, 3cda <vTaskDelayUntil+0x46>
    3cc8:	f04f 0380 	mov.w	r3, #128	; 0x80
    3ccc:	f383 8811 	msr	BASEPRI, r3
    3cd0:	f3bf 8f6f 	isb	sy
    3cd4:	f3bf 8f4f 	dsb	sy
    3cd8:	e7fe      	b.n	3cd8 <vTaskDelayUntil+0x44>
    3cda:	460c      	mov	r4, r1
	vTaskSuspendAll();
    3cdc:	4b14      	ldr	r3, [pc, #80]	; (3d30 <vTaskDelayUntil+0x9c>)
    3cde:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    3ce0:	4b12      	ldr	r3, [pc, #72]	; (3d2c <vTaskDelayUntil+0x98>)
    3ce2:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3ce6:	682a      	ldr	r2, [r5, #0]
    3ce8:	4414      	add	r4, r2
		if (xConstTickCount < *pxPreviousWakeTime) {
    3cea:	4290      	cmp	r0, r2
    3cec:	d214      	bcs.n	3d18 <vTaskDelayUntil+0x84>
			if ((xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount)) {
    3cee:	42a2      	cmp	r2, r4
    3cf0:	d916      	bls.n	3d20 <vTaskDelayUntil+0x8c>
		*pxPreviousWakeTime = xTimeToWake;
    3cf2:	602c      	str	r4, [r5, #0]
		if (xShouldDelay != pdFALSE) {
    3cf4:	42a0      	cmp	r0, r4
    3cf6:	d203      	bcs.n	3d00 <vTaskDelayUntil+0x6c>
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount, pdFALSE);
    3cf8:	2100      	movs	r1, #0
    3cfa:	1a20      	subs	r0, r4, r0
    3cfc:	4b0d      	ldr	r3, [pc, #52]	; (3d34 <vTaskDelayUntil+0xa0>)
    3cfe:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
    3d00:	4b0d      	ldr	r3, [pc, #52]	; (3d38 <vTaskDelayUntil+0xa4>)
    3d02:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    3d04:	b980      	cbnz	r0, 3d28 <vTaskDelayUntil+0x94>
		portYIELD_WITHIN_API();
    3d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3d0a:	4b0c      	ldr	r3, [pc, #48]	; (3d3c <vTaskDelayUntil+0xa8>)
    3d0c:	601a      	str	r2, [r3, #0]
    3d0e:	f3bf 8f4f 	dsb	sy
    3d12:	f3bf 8f6f 	isb	sy
}
    3d16:	bd38      	pop	{r3, r4, r5, pc}
			if ((xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount)) {
    3d18:	42a2      	cmp	r2, r4
    3d1a:	d803      	bhi.n	3d24 <vTaskDelayUntil+0x90>
    3d1c:	42a0      	cmp	r0, r4
    3d1e:	d301      	bcc.n	3d24 <vTaskDelayUntil+0x90>
		*pxPreviousWakeTime = xTimeToWake;
    3d20:	602c      	str	r4, [r5, #0]
    3d22:	e7ed      	b.n	3d00 <vTaskDelayUntil+0x6c>
    3d24:	602c      	str	r4, [r5, #0]
    3d26:	e7e7      	b.n	3cf8 <vTaskDelayUntil+0x64>
    3d28:	bd38      	pop	{r3, r4, r5, pc}
    3d2a:	bf00      	nop
    3d2c:	20002360 	.word	0x20002360
    3d30:	00003a41 	.word	0x00003a41
    3d34:	0000375d 	.word	0x0000375d
    3d38:	00003b89 	.word	0x00003b89
    3d3c:	e000ed04 	.word	0xe000ed04

00003d40 <vTaskDelay>:
{
    3d40:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    3d42:	b1b0      	cbz	r0, 3d72 <vTaskDelay+0x32>
    3d44:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    3d46:	4b0f      	ldr	r3, [pc, #60]	; (3d84 <vTaskDelay+0x44>)
    3d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    3d4c:	b143      	cbz	r3, 3d60 <vTaskDelay+0x20>
    3d4e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3d52:	f383 8811 	msr	BASEPRI, r3
    3d56:	f3bf 8f6f 	isb	sy
    3d5a:	f3bf 8f4f 	dsb	sy
    3d5e:	e7fe      	b.n	3d5e <vTaskDelay+0x1e>
		vTaskSuspendAll();
    3d60:	4b09      	ldr	r3, [pc, #36]	; (3d88 <vTaskDelay+0x48>)
    3d62:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    3d64:	2100      	movs	r1, #0
    3d66:	4620      	mov	r0, r4
    3d68:	4b08      	ldr	r3, [pc, #32]	; (3d8c <vTaskDelay+0x4c>)
    3d6a:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    3d6c:	4b08      	ldr	r3, [pc, #32]	; (3d90 <vTaskDelay+0x50>)
    3d6e:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    3d70:	b938      	cbnz	r0, 3d82 <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    3d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3d76:	4b07      	ldr	r3, [pc, #28]	; (3d94 <vTaskDelay+0x54>)
    3d78:	601a      	str	r2, [r3, #0]
    3d7a:	f3bf 8f4f 	dsb	sy
    3d7e:	f3bf 8f6f 	isb	sy
    3d82:	bd10      	pop	{r4, pc}
    3d84:	20002360 	.word	0x20002360
    3d88:	00003a41 	.word	0x00003a41
    3d8c:	0000375d 	.word	0x0000375d
    3d90:	00003b89 	.word	0x00003b89
    3d94:	e000ed04 	.word	0xe000ed04

00003d98 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    3d98:	4b2c      	ldr	r3, [pc, #176]	; (3e4c <vTaskSwitchContext+0xb4>)
    3d9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    3d9e:	bb8b      	cbnz	r3, 3e04 <vTaskSwitchContext+0x6c>
{
    3da0:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    3da2:	4b2a      	ldr	r3, [pc, #168]	; (3e4c <vTaskSwitchContext+0xb4>)
    3da4:	2200      	movs	r2, #0
    3da6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    3daa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    3db2:	6812      	ldr	r2, [r2, #0]
    3db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    3db6:	429a      	cmp	r2, r3
    3db8:	d807      	bhi.n	3dca <vTaskSwitchContext+0x32>
    3dba:	4b24      	ldr	r3, [pc, #144]	; (3e4c <vTaskSwitchContext+0xb4>)
    3dbc:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    3dc0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    3dc4:	3134      	adds	r1, #52	; 0x34
    3dc6:	4b22      	ldr	r3, [pc, #136]	; (3e50 <vTaskSwitchContext+0xb8>)
    3dc8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3dca:	4a20      	ldr	r2, [pc, #128]	; (3e4c <vTaskSwitchContext+0xb4>)
    3dcc:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    3dd0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    3dd4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3dd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3dda:	b9c2      	cbnz	r2, 3e0e <vTaskSwitchContext+0x76>
    3ddc:	b14b      	cbz	r3, 3df2 <vTaskSwitchContext+0x5a>
    3dde:	491b      	ldr	r1, [pc, #108]	; (3e4c <vTaskSwitchContext+0xb4>)
    3de0:	3b01      	subs	r3, #1
    3de2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    3de6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3dea:	6a92      	ldr	r2, [r2, #40]	; 0x28
    3dec:	b97a      	cbnz	r2, 3e0e <vTaskSwitchContext+0x76>
    3dee:	2b00      	cmp	r3, #0
    3df0:	d1f6      	bne.n	3de0 <vTaskSwitchContext+0x48>
    3df2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3df6:	f383 8811 	msr	BASEPRI, r3
    3dfa:	f3bf 8f6f 	isb	sy
    3dfe:	f3bf 8f4f 	dsb	sy
    3e02:	e7fe      	b.n	3e02 <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    3e04:	2201      	movs	r2, #1
    3e06:	4b11      	ldr	r3, [pc, #68]	; (3e4c <vTaskSwitchContext+0xb4>)
    3e08:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    3e0c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3e0e:	4a0f      	ldr	r2, [pc, #60]	; (3e4c <vTaskSwitchContext+0xb4>)
    3e10:	0099      	lsls	r1, r3, #2
    3e12:	18c8      	adds	r0, r1, r3
    3e14:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    3e18:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    3e1a:	6864      	ldr	r4, [r4, #4]
    3e1c:	62c4      	str	r4, [r0, #44]	; 0x2c
    3e1e:	4419      	add	r1, r3
    3e20:	4602      	mov	r2, r0
    3e22:	3230      	adds	r2, #48	; 0x30
    3e24:	4294      	cmp	r4, r2
    3e26:	d00b      	beq.n	3e40 <vTaskSwitchContext+0xa8>
    3e28:	4a08      	ldr	r2, [pc, #32]	; (3e4c <vTaskSwitchContext+0xb4>)
    3e2a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    3e2e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    3e32:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    3e34:	68c9      	ldr	r1, [r1, #12]
    3e36:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    3e3a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    3e3e:	bd10      	pop	{r4, pc}
    3e40:	6860      	ldr	r0, [r4, #4]
    3e42:	4a02      	ldr	r2, [pc, #8]	; (3e4c <vTaskSwitchContext+0xb4>)
    3e44:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3e48:	62d0      	str	r0, [r2, #44]	; 0x2c
    3e4a:	e7ed      	b.n	3e28 <vTaskSwitchContext+0x90>
    3e4c:	20002360 	.word	0x20002360
    3e50:	000002d1 	.word	0x000002d1

00003e54 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    3e54:	b940      	cbnz	r0, 3e68 <vTaskPlaceOnEventList+0x14>
    3e56:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e5a:	f383 8811 	msr	BASEPRI, r3
    3e5e:	f3bf 8f6f 	isb	sy
    3e62:	f3bf 8f4f 	dsb	sy
    3e66:	e7fe      	b.n	3e66 <vTaskPlaceOnEventList+0x12>
{
    3e68:	b510      	push	{r4, lr}
    3e6a:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    3e6c:	4b05      	ldr	r3, [pc, #20]	; (3e84 <vTaskPlaceOnEventList+0x30>)
    3e6e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    3e72:	3118      	adds	r1, #24
    3e74:	4b04      	ldr	r3, [pc, #16]	; (3e88 <vTaskPlaceOnEventList+0x34>)
    3e76:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    3e78:	2101      	movs	r1, #1
    3e7a:	4620      	mov	r0, r4
    3e7c:	4b03      	ldr	r3, [pc, #12]	; (3e8c <vTaskPlaceOnEventList+0x38>)
    3e7e:	4798      	blx	r3
    3e80:	bd10      	pop	{r4, pc}
    3e82:	bf00      	nop
    3e84:	20002360 	.word	0x20002360
    3e88:	00002b05 	.word	0x00002b05
    3e8c:	0000375d 	.word	0x0000375d

00003e90 <vTaskPlaceOnEventListRestricted>:
{
    3e90:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    3e92:	b180      	cbz	r0, 3eb6 <vTaskPlaceOnEventListRestricted+0x26>
    3e94:	4614      	mov	r4, r2
    3e96:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    3e98:	4b0b      	ldr	r3, [pc, #44]	; (3ec8 <vTaskPlaceOnEventListRestricted+0x38>)
    3e9a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    3e9e:	3118      	adds	r1, #24
    3ea0:	4b0a      	ldr	r3, [pc, #40]	; (3ecc <vTaskPlaceOnEventListRestricted+0x3c>)
    3ea2:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    3ea4:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    3ea6:	4621      	mov	r1, r4
    3ea8:	bf0c      	ite	eq
    3eaa:	4628      	moveq	r0, r5
    3eac:	f04f 30ff 	movne.w	r0, #4294967295
    3eb0:	4b07      	ldr	r3, [pc, #28]	; (3ed0 <vTaskPlaceOnEventListRestricted+0x40>)
    3eb2:	4798      	blx	r3
    3eb4:	bd38      	pop	{r3, r4, r5, pc}
    3eb6:	f04f 0380 	mov.w	r3, #128	; 0x80
    3eba:	f383 8811 	msr	BASEPRI, r3
    3ebe:	f3bf 8f6f 	isb	sy
    3ec2:	f3bf 8f4f 	dsb	sy
    3ec6:	e7fe      	b.n	3ec6 <vTaskPlaceOnEventListRestricted+0x36>
    3ec8:	20002360 	.word	0x20002360
    3ecc:	00002aed 	.word	0x00002aed
    3ed0:	0000375d 	.word	0x0000375d

00003ed4 <xTaskRemoveFromEventList>:
{
    3ed4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    3ed6:	68c3      	ldr	r3, [r0, #12]
    3ed8:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    3eda:	2c00      	cmp	r4, #0
    3edc:	d02a      	beq.n	3f34 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    3ede:	f104 0518 	add.w	r5, r4, #24
    3ee2:	4628      	mov	r0, r5
    3ee4:	4b1a      	ldr	r3, [pc, #104]	; (3f50 <xTaskRemoveFromEventList+0x7c>)
    3ee6:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    3ee8:	4b1a      	ldr	r3, [pc, #104]	; (3f54 <xTaskRemoveFromEventList+0x80>)
    3eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    3eee:	bb53      	cbnz	r3, 3f46 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    3ef0:	1d25      	adds	r5, r4, #4
    3ef2:	4628      	mov	r0, r5
    3ef4:	4b16      	ldr	r3, [pc, #88]	; (3f50 <xTaskRemoveFromEventList+0x7c>)
    3ef6:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    3ef8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3efa:	4b16      	ldr	r3, [pc, #88]	; (3f54 <xTaskRemoveFromEventList+0x80>)
    3efc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    3f00:	4298      	cmp	r0, r3
    3f02:	bf84      	itt	hi
    3f04:	4b13      	ldrhi	r3, [pc, #76]	; (3f54 <xTaskRemoveFromEventList+0x80>)
    3f06:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    3f0a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3f0e:	4629      	mov	r1, r5
    3f10:	4b11      	ldr	r3, [pc, #68]	; (3f58 <xTaskRemoveFromEventList+0x84>)
    3f12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3f16:	4b11      	ldr	r3, [pc, #68]	; (3f5c <xTaskRemoveFromEventList+0x88>)
    3f18:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    3f1a:	4b0e      	ldr	r3, [pc, #56]	; (3f54 <xTaskRemoveFromEventList+0x80>)
    3f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    3f20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3f24:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    3f26:	bf83      	ittte	hi
    3f28:	2001      	movhi	r0, #1
    3f2a:	4b0a      	ldrhi	r3, [pc, #40]	; (3f54 <xTaskRemoveFromEventList+0x80>)
    3f2c:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    3f30:	2000      	movls	r0, #0
}
    3f32:	bd38      	pop	{r3, r4, r5, pc}
    3f34:	f04f 0380 	mov.w	r3, #128	; 0x80
    3f38:	f383 8811 	msr	BASEPRI, r3
    3f3c:	f3bf 8f6f 	isb	sy
    3f40:	f3bf 8f4f 	dsb	sy
    3f44:	e7fe      	b.n	3f44 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    3f46:	4629      	mov	r1, r5
    3f48:	4805      	ldr	r0, [pc, #20]	; (3f60 <xTaskRemoveFromEventList+0x8c>)
    3f4a:	4b04      	ldr	r3, [pc, #16]	; (3f5c <xTaskRemoveFromEventList+0x88>)
    3f4c:	4798      	blx	r3
    3f4e:	e7e4      	b.n	3f1a <xTaskRemoveFromEventList+0x46>
    3f50:	00002b39 	.word	0x00002b39
    3f54:	20002360 	.word	0x20002360
    3f58:	20002388 	.word	0x20002388
    3f5c:	00002aed 	.word	0x00002aed
    3f60:	20002374 	.word	0x20002374

00003f64 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    3f64:	4b03      	ldr	r3, [pc, #12]	; (3f74 <vTaskInternalSetTimeOutState+0x10>)
    3f66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    3f6a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    3f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    3f70:	6043      	str	r3, [r0, #4]
    3f72:	4770      	bx	lr
    3f74:	20002360 	.word	0x20002360

00003f78 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    3f78:	b1f8      	cbz	r0, 3fba <xTaskCheckForTimeOut+0x42>
{
    3f7a:	b570      	push	{r4, r5, r6, lr}
    3f7c:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    3f7e:	b329      	cbz	r1, 3fcc <xTaskCheckForTimeOut+0x54>
    3f80:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    3f82:	4b1c      	ldr	r3, [pc, #112]	; (3ff4 <xTaskCheckForTimeOut+0x7c>)
    3f84:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    3f86:	4b1c      	ldr	r3, [pc, #112]	; (3ff8 <xTaskCheckForTimeOut+0x80>)
    3f88:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3f8c:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    3f8e:	6823      	ldr	r3, [r4, #0]
    3f90:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f94:	d02a      	beq.n	3fec <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    3f96:	4818      	ldr	r0, [pc, #96]	; (3ff8 <xTaskCheckForTimeOut+0x80>)
    3f98:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    3f9c:	682e      	ldr	r6, [r5, #0]
    3f9e:	4286      	cmp	r6, r0
    3fa0:	d001      	beq.n	3fa6 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    3fa2:	428a      	cmp	r2, r1
    3fa4:	d224      	bcs.n	3ff0 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3fa6:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    3fa8:	429a      	cmp	r2, r3
    3faa:	d318      	bcc.n	3fde <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    3fac:	2300      	movs	r3, #0
    3fae:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    3fb0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    3fb2:	4b12      	ldr	r3, [pc, #72]	; (3ffc <xTaskCheckForTimeOut+0x84>)
    3fb4:	4798      	blx	r3
}
    3fb6:	4620      	mov	r0, r4
    3fb8:	bd70      	pop	{r4, r5, r6, pc}
    3fba:	f04f 0380 	mov.w	r3, #128	; 0x80
    3fbe:	f383 8811 	msr	BASEPRI, r3
    3fc2:	f3bf 8f6f 	isb	sy
    3fc6:	f3bf 8f4f 	dsb	sy
    3fca:	e7fe      	b.n	3fca <xTaskCheckForTimeOut+0x52>
    3fcc:	f04f 0380 	mov.w	r3, #128	; 0x80
    3fd0:	f383 8811 	msr	BASEPRI, r3
    3fd4:	f3bf 8f6f 	isb	sy
    3fd8:	f3bf 8f4f 	dsb	sy
    3fdc:	e7fe      	b.n	3fdc <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    3fde:	1a9b      	subs	r3, r3, r2
    3fe0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    3fe2:	4628      	mov	r0, r5
    3fe4:	4b06      	ldr	r3, [pc, #24]	; (4000 <xTaskCheckForTimeOut+0x88>)
    3fe6:	4798      	blx	r3
			xReturn = pdFALSE;
    3fe8:	2400      	movs	r4, #0
    3fea:	e7e2      	b.n	3fb2 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    3fec:	2400      	movs	r4, #0
    3fee:	e7e0      	b.n	3fb2 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    3ff0:	2401      	movs	r4, #1
    3ff2:	e7de      	b.n	3fb2 <xTaskCheckForTimeOut+0x3a>
    3ff4:	00002c35 	.word	0x00002c35
    3ff8:	20002360 	.word	0x20002360
    3ffc:	00002c79 	.word	0x00002c79
    4000:	00003f65 	.word	0x00003f65

00004004 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    4004:	2201      	movs	r2, #1
    4006:	4b02      	ldr	r3, [pc, #8]	; (4010 <vTaskMissedYield+0xc>)
    4008:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    400c:	4770      	bx	lr
    400e:	bf00      	nop
    4010:	20002360 	.word	0x20002360

00004014 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    4014:	4b06      	ldr	r3, [pc, #24]	; (4030 <xTaskGetSchedulerState+0x1c>)
    4016:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    401a:	b13b      	cbz	r3, 402c <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    401c:	4b04      	ldr	r3, [pc, #16]	; (4030 <xTaskGetSchedulerState+0x1c>)
    401e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    4022:	2b00      	cmp	r3, #0
    4024:	bf0c      	ite	eq
    4026:	2002      	moveq	r0, #2
    4028:	2000      	movne	r0, #0
    402a:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    402c:	2001      	movs	r0, #1
}
    402e:	4770      	bx	lr
    4030:	20002360 	.word	0x20002360

00004034 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    4034:	2800      	cmp	r0, #0
    4036:	d03c      	beq.n	40b2 <xTaskPriorityDisinherit+0x7e>
{
    4038:	b538      	push	{r3, r4, r5, lr}
    403a:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    403c:	4a20      	ldr	r2, [pc, #128]	; (40c0 <xTaskPriorityDisinherit+0x8c>)
    403e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4042:	4290      	cmp	r0, r2
    4044:	d008      	beq.n	4058 <xTaskPriorityDisinherit+0x24>
    4046:	f04f 0380 	mov.w	r3, #128	; 0x80
    404a:	f383 8811 	msr	BASEPRI, r3
    404e:	f3bf 8f6f 	isb	sy
    4052:	f3bf 8f4f 	dsb	sy
    4056:	e7fe      	b.n	4056 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    4058:	6c82      	ldr	r2, [r0, #72]	; 0x48
    405a:	b942      	cbnz	r2, 406e <xTaskPriorityDisinherit+0x3a>
    405c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4060:	f383 8811 	msr	BASEPRI, r3
    4064:	f3bf 8f6f 	isb	sy
    4068:	f3bf 8f4f 	dsb	sy
    406c:	e7fe      	b.n	406c <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    406e:	3a01      	subs	r2, #1
    4070:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    4072:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4074:	6c61      	ldr	r1, [r4, #68]	; 0x44
    4076:	4288      	cmp	r0, r1
    4078:	d01d      	beq.n	40b6 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    407a:	b9f2      	cbnz	r2, 40ba <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    407c:	1d25      	adds	r5, r4, #4
    407e:	4628      	mov	r0, r5
    4080:	4b10      	ldr	r3, [pc, #64]	; (40c4 <xTaskPriorityDisinherit+0x90>)
    4082:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4084:	6c60      	ldr	r0, [r4, #68]	; 0x44
    4086:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    4088:	f1c0 0305 	rsb	r3, r0, #5
    408c:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    408e:	4b0c      	ldr	r3, [pc, #48]	; (40c0 <xTaskPriorityDisinherit+0x8c>)
    4090:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4094:	4298      	cmp	r0, r3
    4096:	bf84      	itt	hi
    4098:	4b09      	ldrhi	r3, [pc, #36]	; (40c0 <xTaskPriorityDisinherit+0x8c>)
    409a:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    409e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    40a2:	4629      	mov	r1, r5
    40a4:	4b08      	ldr	r3, [pc, #32]	; (40c8 <xTaskPriorityDisinherit+0x94>)
    40a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    40aa:	4b08      	ldr	r3, [pc, #32]	; (40cc <xTaskPriorityDisinherit+0x98>)
    40ac:	4798      	blx	r3
				xReturn = pdTRUE;
    40ae:	2001      	movs	r0, #1
    40b0:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    40b2:	2000      	movs	r0, #0
    40b4:	4770      	bx	lr
    40b6:	2000      	movs	r0, #0
    40b8:	bd38      	pop	{r3, r4, r5, pc}
    40ba:	2000      	movs	r0, #0
}
    40bc:	bd38      	pop	{r3, r4, r5, pc}
    40be:	bf00      	nop
    40c0:	20002360 	.word	0x20002360
    40c4:	00002b39 	.word	0x00002b39
    40c8:	20002388 	.word	0x20002388
    40cc:	00002aed 	.word	0x00002aed

000040d0 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    40d0:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    40d2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    40d4:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    40d6:	4291      	cmp	r1, r2
    40d8:	d80c      	bhi.n	40f4 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    40da:	1ad2      	subs	r2, r2, r3
    40dc:	6983      	ldr	r3, [r0, #24]
    40de:	429a      	cmp	r2, r3
    40e0:	d301      	bcc.n	40e6 <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    40e2:	2001      	movs	r0, #1
    40e4:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    40e6:	1d01      	adds	r1, r0, #4
    40e8:	4b09      	ldr	r3, [pc, #36]	; (4110 <prvInsertTimerInActiveList+0x40>)
    40ea:	6818      	ldr	r0, [r3, #0]
    40ec:	4b09      	ldr	r3, [pc, #36]	; (4114 <prvInsertTimerInActiveList+0x44>)
    40ee:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    40f0:	2000      	movs	r0, #0
    40f2:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    40f4:	429a      	cmp	r2, r3
    40f6:	d201      	bcs.n	40fc <prvInsertTimerInActiveList+0x2c>
    40f8:	4299      	cmp	r1, r3
    40fa:	d206      	bcs.n	410a <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    40fc:	1d01      	adds	r1, r0, #4
    40fe:	4b04      	ldr	r3, [pc, #16]	; (4110 <prvInsertTimerInActiveList+0x40>)
    4100:	6858      	ldr	r0, [r3, #4]
    4102:	4b04      	ldr	r3, [pc, #16]	; (4114 <prvInsertTimerInActiveList+0x44>)
    4104:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    4106:	2000      	movs	r0, #0
    4108:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    410a:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    410c:	bd08      	pop	{r3, pc}
    410e:	bf00      	nop
    4110:	2000244c 	.word	0x2000244c
    4114:	00002b05 	.word	0x00002b05

00004118 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    4118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    411a:	4b0d      	ldr	r3, [pc, #52]	; (4150 <prvCheckForValidListAndQueue+0x38>)
    411c:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    411e:	4b0d      	ldr	r3, [pc, #52]	; (4154 <prvCheckForValidListAndQueue+0x3c>)
    4120:	689b      	ldr	r3, [r3, #8]
    4122:	b113      	cbz	r3, 412a <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    4124:	4b0c      	ldr	r3, [pc, #48]	; (4158 <prvCheckForValidListAndQueue+0x40>)
    4126:	4798      	blx	r3
    4128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    412a:	4c0a      	ldr	r4, [pc, #40]	; (4154 <prvCheckForValidListAndQueue+0x3c>)
    412c:	f104 060c 	add.w	r6, r4, #12
    4130:	4630      	mov	r0, r6
    4132:	4f0a      	ldr	r7, [pc, #40]	; (415c <prvCheckForValidListAndQueue+0x44>)
    4134:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    4136:	f104 0520 	add.w	r5, r4, #32
    413a:	4628      	mov	r0, r5
    413c:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    413e:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    4140:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    4142:	2200      	movs	r2, #0
    4144:	210c      	movs	r1, #12
    4146:	2014      	movs	r0, #20
    4148:	4b05      	ldr	r3, [pc, #20]	; (4160 <prvCheckForValidListAndQueue+0x48>)
    414a:	4798      	blx	r3
    414c:	60a0      	str	r0, [r4, #8]
    414e:	e7e9      	b.n	4124 <prvCheckForValidListAndQueue+0xc>
    4150:	00002c35 	.word	0x00002c35
    4154:	2000244c 	.word	0x2000244c
    4158:	00002c79 	.word	0x00002c79
    415c:	00002ad1 	.word	0x00002ad1
    4160:	000031e9 	.word	0x000031e9

00004164 <xTimerCreateTimerTask>:
{
    4164:	b510      	push	{r4, lr}
    4166:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    4168:	4b0d      	ldr	r3, [pc, #52]	; (41a0 <xTimerCreateTimerTask+0x3c>)
    416a:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    416c:	4b0d      	ldr	r3, [pc, #52]	; (41a4 <xTimerCreateTimerTask+0x40>)
    416e:	689b      	ldr	r3, [r3, #8]
    4170:	b163      	cbz	r3, 418c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    4172:	4b0d      	ldr	r3, [pc, #52]	; (41a8 <xTimerCreateTimerTask+0x44>)
    4174:	9301      	str	r3, [sp, #4]
    4176:	2303      	movs	r3, #3
    4178:	9300      	str	r3, [sp, #0]
    417a:	2300      	movs	r3, #0
    417c:	2280      	movs	r2, #128	; 0x80
    417e:	490b      	ldr	r1, [pc, #44]	; (41ac <xTimerCreateTimerTask+0x48>)
    4180:	480b      	ldr	r0, [pc, #44]	; (41b0 <xTimerCreateTimerTask+0x4c>)
    4182:	4c0c      	ldr	r4, [pc, #48]	; (41b4 <xTimerCreateTimerTask+0x50>)
    4184:	47a0      	blx	r4
	configASSERT(xReturn);
    4186:	b108      	cbz	r0, 418c <xTimerCreateTimerTask+0x28>
}
    4188:	b002      	add	sp, #8
    418a:	bd10      	pop	{r4, pc}
    418c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4190:	f383 8811 	msr	BASEPRI, r3
    4194:	f3bf 8f6f 	isb	sy
    4198:	f3bf 8f4f 	dsb	sy
    419c:	e7fe      	b.n	419c <xTimerCreateTimerTask+0x38>
    419e:	bf00      	nop
    41a0:	00004119 	.word	0x00004119
    41a4:	2000244c 	.word	0x2000244c
    41a8:	20002480 	.word	0x20002480
    41ac:	0000563c 	.word	0x0000563c
    41b0:	000042d1 	.word	0x000042d1
    41b4:	000037dd 	.word	0x000037dd

000041b8 <xTimerGenericCommand>:
	configASSERT(xTimer);
    41b8:	b1d8      	cbz	r0, 41f2 <xTimerGenericCommand+0x3a>
{
    41ba:	b530      	push	{r4, r5, lr}
    41bc:	b085      	sub	sp, #20
    41be:	4615      	mov	r5, r2
    41c0:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    41c2:	4a14      	ldr	r2, [pc, #80]	; (4214 <xTimerGenericCommand+0x5c>)
    41c4:	6890      	ldr	r0, [r2, #8]
    41c6:	b310      	cbz	r0, 420e <xTimerGenericCommand+0x56>
    41c8:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    41ca:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    41cc:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    41ce:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    41d0:	2905      	cmp	r1, #5
    41d2:	dc17      	bgt.n	4204 <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    41d4:	4b10      	ldr	r3, [pc, #64]	; (4218 <xTimerGenericCommand+0x60>)
    41d6:	4798      	blx	r3
    41d8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    41da:	f04f 0300 	mov.w	r3, #0
    41de:	bf0c      	ite	eq
    41e0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    41e2:	461a      	movne	r2, r3
    41e4:	a901      	add	r1, sp, #4
    41e6:	480b      	ldr	r0, [pc, #44]	; (4214 <xTimerGenericCommand+0x5c>)
    41e8:	6880      	ldr	r0, [r0, #8]
    41ea:	4c0c      	ldr	r4, [pc, #48]	; (421c <xTimerGenericCommand+0x64>)
    41ec:	47a0      	blx	r4
}
    41ee:	b005      	add	sp, #20
    41f0:	bd30      	pop	{r4, r5, pc}
    41f2:	f04f 0380 	mov.w	r3, #128	; 0x80
    41f6:	f383 8811 	msr	BASEPRI, r3
    41fa:	f3bf 8f6f 	isb	sy
    41fe:	f3bf 8f4f 	dsb	sy
    4202:	e7fe      	b.n	4202 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    4204:	2300      	movs	r3, #0
    4206:	a901      	add	r1, sp, #4
    4208:	4c05      	ldr	r4, [pc, #20]	; (4220 <xTimerGenericCommand+0x68>)
    420a:	47a0      	blx	r4
    420c:	e7ef      	b.n	41ee <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    420e:	2000      	movs	r0, #0
	return xReturn;
    4210:	e7ed      	b.n	41ee <xTimerGenericCommand+0x36>
    4212:	bf00      	nop
    4214:	2000244c 	.word	0x2000244c
    4218:	00004015 	.word	0x00004015
    421c:	00003241 	.word	0x00003241
    4220:	0000341d 	.word	0x0000341d

00004224 <prvSampleTimeNow>:
{
    4224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4228:	b082      	sub	sp, #8
    422a:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    422c:	4b23      	ldr	r3, [pc, #140]	; (42bc <prvSampleTimeNow+0x98>)
    422e:	4798      	blx	r3
    4230:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    4232:	4b23      	ldr	r3, [pc, #140]	; (42c0 <prvSampleTimeNow+0x9c>)
    4234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4236:	4298      	cmp	r0, r3
    4238:	d319      	bcc.n	426e <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    423a:	2300      	movs	r3, #0
    423c:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    4240:	4b1f      	ldr	r3, [pc, #124]	; (42c0 <prvSampleTimeNow+0x9c>)
    4242:	639f      	str	r7, [r3, #56]	; 0x38
}
    4244:	4638      	mov	r0, r7
    4246:	b002      	add	sp, #8
    4248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    424c:	2100      	movs	r1, #0
    424e:	9100      	str	r1, [sp, #0]
    4250:	460b      	mov	r3, r1
    4252:	4652      	mov	r2, sl
    4254:	4620      	mov	r0, r4
    4256:	4c1b      	ldr	r4, [pc, #108]	; (42c4 <prvSampleTimeNow+0xa0>)
    4258:	47a0      	blx	r4
				configASSERT(xResult);
    425a:	b950      	cbnz	r0, 4272 <prvSampleTimeNow+0x4e>
    425c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4260:	f383 8811 	msr	BASEPRI, r3
    4264:	f3bf 8f6f 	isb	sy
    4268:	f3bf 8f4f 	dsb	sy
    426c:	e7fe      	b.n	426c <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    426e:	4d14      	ldr	r5, [pc, #80]	; (42c0 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    4270:	4e15      	ldr	r6, [pc, #84]	; (42c8 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    4272:	686b      	ldr	r3, [r5, #4]
    4274:	681a      	ldr	r2, [r3, #0]
    4276:	b1c2      	cbz	r2, 42aa <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    4278:	68db      	ldr	r3, [r3, #12]
    427a:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    427e:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    4280:	f104 0904 	add.w	r9, r4, #4
    4284:	4648      	mov	r0, r9
    4286:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    4288:	6a63      	ldr	r3, [r4, #36]	; 0x24
    428a:	4620      	mov	r0, r4
    428c:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    428e:	69e3      	ldr	r3, [r4, #28]
    4290:	2b01      	cmp	r3, #1
    4292:	d1ee      	bne.n	4272 <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    4294:	69a3      	ldr	r3, [r4, #24]
    4296:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    4298:	459a      	cmp	sl, r3
    429a:	d2d7      	bcs.n	424c <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    429c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    429e:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    42a0:	4649      	mov	r1, r9
    42a2:	6868      	ldr	r0, [r5, #4]
    42a4:	4b09      	ldr	r3, [pc, #36]	; (42cc <prvSampleTimeNow+0xa8>)
    42a6:	4798      	blx	r3
    42a8:	e7e3      	b.n	4272 <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    42aa:	4a05      	ldr	r2, [pc, #20]	; (42c0 <prvSampleTimeNow+0x9c>)
    42ac:	6811      	ldr	r1, [r2, #0]
    42ae:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    42b0:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    42b2:	2301      	movs	r3, #1
    42b4:	f8c8 3000 	str.w	r3, [r8]
    42b8:	e7c2      	b.n	4240 <prvSampleTimeNow+0x1c>
    42ba:	bf00      	nop
    42bc:	00003a55 	.word	0x00003a55
    42c0:	2000244c 	.word	0x2000244c
    42c4:	000041b9 	.word	0x000041b9
    42c8:	00002b39 	.word	0x00002b39
    42cc:	00002b05 	.word	0x00002b05

000042d0 <prvTimerTask>:
{
    42d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42d4:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    42d6:	4c65      	ldr	r4, [pc, #404]	; (446c <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    42d8:	4f65      	ldr	r7, [pc, #404]	; (4470 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    42da:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 4490 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    42de:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 4494 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    42e2:	6863      	ldr	r3, [r4, #4]
    42e4:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    42e6:	b172      	cbz	r2, 4306 <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    42e8:	68db      	ldr	r3, [r3, #12]
    42ea:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    42ec:	4b61      	ldr	r3, [pc, #388]	; (4474 <prvTimerTask+0x1a4>)
    42ee:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    42f0:	a803      	add	r0, sp, #12
    42f2:	4b61      	ldr	r3, [pc, #388]	; (4478 <prvTimerTask+0x1a8>)
    42f4:	4798      	blx	r3
    42f6:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    42f8:	9b03      	ldr	r3, [sp, #12]
    42fa:	2b00      	cmp	r3, #0
    42fc:	d179      	bne.n	43f2 <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    42fe:	42a8      	cmp	r0, r5
    4300:	d24a      	bcs.n	4398 <prvTimerTask+0xc8>
    4302:	2200      	movs	r2, #0
    4304:	e00e      	b.n	4324 <prvTimerTask+0x54>
	vTaskSuspendAll();
    4306:	4b5b      	ldr	r3, [pc, #364]	; (4474 <prvTimerTask+0x1a4>)
    4308:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    430a:	a803      	add	r0, sp, #12
    430c:	4b5a      	ldr	r3, [pc, #360]	; (4478 <prvTimerTask+0x1a8>)
    430e:	4798      	blx	r3
    4310:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    4312:	9b03      	ldr	r3, [sp, #12]
    4314:	2b00      	cmp	r3, #0
    4316:	d16c      	bne.n	43f2 <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    4318:	6823      	ldr	r3, [r4, #0]
    431a:	681a      	ldr	r2, [r3, #0]
    431c:	fab2 f282 	clz	r2, r2
    4320:	0952      	lsrs	r2, r2, #5
    4322:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    4324:	1ba9      	subs	r1, r5, r6
    4326:	68a0      	ldr	r0, [r4, #8]
    4328:	4b54      	ldr	r3, [pc, #336]	; (447c <prvTimerTask+0x1ac>)
    432a:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    432c:	47b8      	blx	r7
    432e:	b938      	cbnz	r0, 4340 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    4330:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4334:	f8c9 3000 	str.w	r3, [r9]
    4338:	f3bf 8f4f 	dsb	sy
    433c:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    4340:	4d4f      	ldr	r5, [pc, #316]	; (4480 <prvTimerTask+0x1b0>)
    4342:	2200      	movs	r2, #0
    4344:	a903      	add	r1, sp, #12
    4346:	68a0      	ldr	r0, [r4, #8]
    4348:	47a8      	blx	r5
    434a:	2800      	cmp	r0, #0
    434c:	d0c9      	beq.n	42e2 <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    434e:	9b03      	ldr	r3, [sp, #12]
    4350:	2b00      	cmp	r3, #0
    4352:	dbf6      	blt.n	4342 <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    4354:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    4356:	6973      	ldr	r3, [r6, #20]
    4358:	b10b      	cbz	r3, 435e <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    435a:	1d30      	adds	r0, r6, #4
    435c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    435e:	a802      	add	r0, sp, #8
    4360:	4b45      	ldr	r3, [pc, #276]	; (4478 <prvTimerTask+0x1a8>)
    4362:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    4364:	9b03      	ldr	r3, [sp, #12]
    4366:	2b09      	cmp	r3, #9
    4368:	d8eb      	bhi.n	4342 <prvTimerTask+0x72>
    436a:	a201      	add	r2, pc, #4	; (adr r2, 4370 <prvTimerTask+0xa0>)
    436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4370:	000043f7 	.word	0x000043f7
    4374:	000043f7 	.word	0x000043f7
    4378:	000043f7 	.word	0x000043f7
    437c:	00004343 	.word	0x00004343
    4380:	0000443f 	.word	0x0000443f
    4384:	00004465 	.word	0x00004465
    4388:	000043f7 	.word	0x000043f7
    438c:	000043f7 	.word	0x000043f7
    4390:	00004343 	.word	0x00004343
    4394:	0000443f 	.word	0x0000443f
				(void)xTaskResumeAll();
    4398:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    439a:	6863      	ldr	r3, [r4, #4]
    439c:	68db      	ldr	r3, [r3, #12]
    439e:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    43a2:	f10a 0004 	add.w	r0, sl, #4
    43a6:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    43a8:	f8da 301c 	ldr.w	r3, [sl, #28]
    43ac:	2b01      	cmp	r3, #1
    43ae:	d004      	beq.n	43ba <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    43b0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    43b4:	4650      	mov	r0, sl
    43b6:	4798      	blx	r3
    43b8:	e7c2      	b.n	4340 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    43ba:	f8da 1018 	ldr.w	r1, [sl, #24]
    43be:	462b      	mov	r3, r5
    43c0:	4632      	mov	r2, r6
    43c2:	4429      	add	r1, r5
    43c4:	4650      	mov	r0, sl
    43c6:	4e2f      	ldr	r6, [pc, #188]	; (4484 <prvTimerTask+0x1b4>)
    43c8:	47b0      	blx	r6
    43ca:	2800      	cmp	r0, #0
    43cc:	d0f0      	beq.n	43b0 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    43ce:	2100      	movs	r1, #0
    43d0:	9100      	str	r1, [sp, #0]
    43d2:	460b      	mov	r3, r1
    43d4:	462a      	mov	r2, r5
    43d6:	4650      	mov	r0, sl
    43d8:	4d2b      	ldr	r5, [pc, #172]	; (4488 <prvTimerTask+0x1b8>)
    43da:	47a8      	blx	r5
			configASSERT(xResult);
    43dc:	2800      	cmp	r0, #0
    43de:	d1e7      	bne.n	43b0 <prvTimerTask+0xe0>
    43e0:	f04f 0380 	mov.w	r3, #128	; 0x80
    43e4:	f383 8811 	msr	BASEPRI, r3
    43e8:	f3bf 8f6f 	isb	sy
    43ec:	f3bf 8f4f 	dsb	sy
    43f0:	e7fe      	b.n	43f0 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    43f2:	47b8      	blx	r7
    43f4:	e7a4      	b.n	4340 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    43f6:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    43f8:	69b1      	ldr	r1, [r6, #24]
    43fa:	462b      	mov	r3, r5
    43fc:	4602      	mov	r2, r0
    43fe:	4429      	add	r1, r5
    4400:	4630      	mov	r0, r6
    4402:	4d20      	ldr	r5, [pc, #128]	; (4484 <prvTimerTask+0x1b4>)
    4404:	47a8      	blx	r5
    4406:	2800      	cmp	r0, #0
    4408:	d09a      	beq.n	4340 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    440a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    440c:	4630      	mov	r0, r6
    440e:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    4410:	69f3      	ldr	r3, [r6, #28]
    4412:	2b01      	cmp	r3, #1
    4414:	d194      	bne.n	4340 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    4416:	69b2      	ldr	r2, [r6, #24]
    4418:	2100      	movs	r1, #0
    441a:	9100      	str	r1, [sp, #0]
    441c:	460b      	mov	r3, r1
    441e:	9804      	ldr	r0, [sp, #16]
    4420:	4402      	add	r2, r0
    4422:	4630      	mov	r0, r6
    4424:	4d18      	ldr	r5, [pc, #96]	; (4488 <prvTimerTask+0x1b8>)
    4426:	47a8      	blx	r5
						configASSERT(xResult);
    4428:	2800      	cmp	r0, #0
    442a:	d189      	bne.n	4340 <prvTimerTask+0x70>
    442c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4430:	f383 8811 	msr	BASEPRI, r3
    4434:	f3bf 8f6f 	isb	sy
    4438:	f3bf 8f4f 	dsb	sy
    443c:	e7fe      	b.n	443c <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    443e:	9904      	ldr	r1, [sp, #16]
    4440:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    4442:	b131      	cbz	r1, 4452 <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    4444:	4603      	mov	r3, r0
    4446:	4602      	mov	r2, r0
    4448:	4401      	add	r1, r0
    444a:	4630      	mov	r0, r6
    444c:	4d0d      	ldr	r5, [pc, #52]	; (4484 <prvTimerTask+0x1b4>)
    444e:	47a8      	blx	r5
    4450:	e776      	b.n	4340 <prvTimerTask+0x70>
    4452:	f04f 0380 	mov.w	r3, #128	; 0x80
    4456:	f383 8811 	msr	BASEPRI, r3
    445a:	f3bf 8f6f 	isb	sy
    445e:	f3bf 8f4f 	dsb	sy
    4462:	e7fe      	b.n	4462 <prvTimerTask+0x192>
				vPortFree(pxTimer);
    4464:	4630      	mov	r0, r6
    4466:	4b09      	ldr	r3, [pc, #36]	; (448c <prvTimerTask+0x1bc>)
    4468:	4798      	blx	r3
    446a:	e769      	b.n	4340 <prvTimerTask+0x70>
    446c:	2000244c 	.word	0x2000244c
    4470:	00003b89 	.word	0x00003b89
    4474:	00003a41 	.word	0x00003a41
    4478:	00004225 	.word	0x00004225
    447c:	000036ad 	.word	0x000036ad
    4480:	00003525 	.word	0x00003525
    4484:	000040d1 	.word	0x000040d1
    4488:	000041b9 	.word	0x000041b9
    448c:	00002f4d 	.word	0x00002f4d
    4490:	e000ed04 	.word	0xe000ed04
    4494:	00002b39 	.word	0x00002b39

00004498 <__libc_init_array>:
    4498:	b570      	push	{r4, r5, r6, lr}
    449a:	4e0d      	ldr	r6, [pc, #52]	; (44d0 <__libc_init_array+0x38>)
    449c:	4c0d      	ldr	r4, [pc, #52]	; (44d4 <__libc_init_array+0x3c>)
    449e:	1ba4      	subs	r4, r4, r6
    44a0:	10a4      	asrs	r4, r4, #2
    44a2:	2500      	movs	r5, #0
    44a4:	42a5      	cmp	r5, r4
    44a6:	d109      	bne.n	44bc <__libc_init_array+0x24>
    44a8:	4e0b      	ldr	r6, [pc, #44]	; (44d8 <__libc_init_array+0x40>)
    44aa:	4c0c      	ldr	r4, [pc, #48]	; (44dc <__libc_init_array+0x44>)
    44ac:	f001 f914 	bl	56d8 <_init>
    44b0:	1ba4      	subs	r4, r4, r6
    44b2:	10a4      	asrs	r4, r4, #2
    44b4:	2500      	movs	r5, #0
    44b6:	42a5      	cmp	r5, r4
    44b8:	d105      	bne.n	44c6 <__libc_init_array+0x2e>
    44ba:	bd70      	pop	{r4, r5, r6, pc}
    44bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    44c0:	4798      	blx	r3
    44c2:	3501      	adds	r5, #1
    44c4:	e7ee      	b.n	44a4 <__libc_init_array+0xc>
    44c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    44ca:	4798      	blx	r3
    44cc:	3501      	adds	r5, #1
    44ce:	e7f2      	b.n	44b6 <__libc_init_array+0x1e>
    44d0:	000056e4 	.word	0x000056e4
    44d4:	000056e4 	.word	0x000056e4
    44d8:	000056e4 	.word	0x000056e4
    44dc:	000056e8 	.word	0x000056e8

000044e0 <memcpy>:
    44e0:	b510      	push	{r4, lr}
    44e2:	1e43      	subs	r3, r0, #1
    44e4:	440a      	add	r2, r1
    44e6:	4291      	cmp	r1, r2
    44e8:	d100      	bne.n	44ec <memcpy+0xc>
    44ea:	bd10      	pop	{r4, pc}
    44ec:	f811 4b01 	ldrb.w	r4, [r1], #1
    44f0:	f803 4f01 	strb.w	r4, [r3, #1]!
    44f4:	e7f7      	b.n	44e6 <memcpy+0x6>

000044f6 <memmove>:
    44f6:	4288      	cmp	r0, r1
    44f8:	b510      	push	{r4, lr}
    44fa:	eb01 0302 	add.w	r3, r1, r2
    44fe:	d803      	bhi.n	4508 <memmove+0x12>
    4500:	1e42      	subs	r2, r0, #1
    4502:	4299      	cmp	r1, r3
    4504:	d10c      	bne.n	4520 <memmove+0x2a>
    4506:	bd10      	pop	{r4, pc}
    4508:	4298      	cmp	r0, r3
    450a:	d2f9      	bcs.n	4500 <memmove+0xa>
    450c:	1881      	adds	r1, r0, r2
    450e:	1ad2      	subs	r2, r2, r3
    4510:	42d3      	cmn	r3, r2
    4512:	d100      	bne.n	4516 <memmove+0x20>
    4514:	bd10      	pop	{r4, pc}
    4516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    451a:	f801 4d01 	strb.w	r4, [r1, #-1]!
    451e:	e7f7      	b.n	4510 <memmove+0x1a>
    4520:	f811 4b01 	ldrb.w	r4, [r1], #1
    4524:	f802 4f01 	strb.w	r4, [r2, #1]!
    4528:	e7eb      	b.n	4502 <memmove+0xc>

0000452a <memset>:
    452a:	4402      	add	r2, r0
    452c:	4603      	mov	r3, r0
    452e:	4293      	cmp	r3, r2
    4530:	d100      	bne.n	4534 <memset+0xa>
    4532:	4770      	bx	lr
    4534:	f803 1b01 	strb.w	r1, [r3], #1
    4538:	e7f9      	b.n	452e <memset+0x4>
	...

0000453c <_free_r>:
    453c:	b538      	push	{r3, r4, r5, lr}
    453e:	4605      	mov	r5, r0
    4540:	2900      	cmp	r1, #0
    4542:	d045      	beq.n	45d0 <_free_r+0x94>
    4544:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4548:	1f0c      	subs	r4, r1, #4
    454a:	2b00      	cmp	r3, #0
    454c:	bfb8      	it	lt
    454e:	18e4      	addlt	r4, r4, r3
    4550:	f000 f8e4 	bl	471c <__malloc_lock>
    4554:	4a1f      	ldr	r2, [pc, #124]	; (45d4 <_free_r+0x98>)
    4556:	6813      	ldr	r3, [r2, #0]
    4558:	4610      	mov	r0, r2
    455a:	b933      	cbnz	r3, 456a <_free_r+0x2e>
    455c:	6063      	str	r3, [r4, #4]
    455e:	6014      	str	r4, [r2, #0]
    4560:	4628      	mov	r0, r5
    4562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4566:	f000 b8da 	b.w	471e <__malloc_unlock>
    456a:	42a3      	cmp	r3, r4
    456c:	d90c      	bls.n	4588 <_free_r+0x4c>
    456e:	6821      	ldr	r1, [r4, #0]
    4570:	1862      	adds	r2, r4, r1
    4572:	4293      	cmp	r3, r2
    4574:	bf04      	itt	eq
    4576:	681a      	ldreq	r2, [r3, #0]
    4578:	685b      	ldreq	r3, [r3, #4]
    457a:	6063      	str	r3, [r4, #4]
    457c:	bf04      	itt	eq
    457e:	1852      	addeq	r2, r2, r1
    4580:	6022      	streq	r2, [r4, #0]
    4582:	6004      	str	r4, [r0, #0]
    4584:	e7ec      	b.n	4560 <_free_r+0x24>
    4586:	4613      	mov	r3, r2
    4588:	685a      	ldr	r2, [r3, #4]
    458a:	b10a      	cbz	r2, 4590 <_free_r+0x54>
    458c:	42a2      	cmp	r2, r4
    458e:	d9fa      	bls.n	4586 <_free_r+0x4a>
    4590:	6819      	ldr	r1, [r3, #0]
    4592:	1858      	adds	r0, r3, r1
    4594:	42a0      	cmp	r0, r4
    4596:	d10b      	bne.n	45b0 <_free_r+0x74>
    4598:	6820      	ldr	r0, [r4, #0]
    459a:	4401      	add	r1, r0
    459c:	1858      	adds	r0, r3, r1
    459e:	4282      	cmp	r2, r0
    45a0:	6019      	str	r1, [r3, #0]
    45a2:	d1dd      	bne.n	4560 <_free_r+0x24>
    45a4:	6810      	ldr	r0, [r2, #0]
    45a6:	6852      	ldr	r2, [r2, #4]
    45a8:	605a      	str	r2, [r3, #4]
    45aa:	4401      	add	r1, r0
    45ac:	6019      	str	r1, [r3, #0]
    45ae:	e7d7      	b.n	4560 <_free_r+0x24>
    45b0:	d902      	bls.n	45b8 <_free_r+0x7c>
    45b2:	230c      	movs	r3, #12
    45b4:	602b      	str	r3, [r5, #0]
    45b6:	e7d3      	b.n	4560 <_free_r+0x24>
    45b8:	6820      	ldr	r0, [r4, #0]
    45ba:	1821      	adds	r1, r4, r0
    45bc:	428a      	cmp	r2, r1
    45be:	bf04      	itt	eq
    45c0:	6811      	ldreq	r1, [r2, #0]
    45c2:	6852      	ldreq	r2, [r2, #4]
    45c4:	6062      	str	r2, [r4, #4]
    45c6:	bf04      	itt	eq
    45c8:	1809      	addeq	r1, r1, r0
    45ca:	6021      	streq	r1, [r4, #0]
    45cc:	605c      	str	r4, [r3, #4]
    45ce:	e7c7      	b.n	4560 <_free_r+0x24>
    45d0:	bd38      	pop	{r3, r4, r5, pc}
    45d2:	bf00      	nop
    45d4:	20002488 	.word	0x20002488

000045d8 <_malloc_r>:
    45d8:	b570      	push	{r4, r5, r6, lr}
    45da:	1ccd      	adds	r5, r1, #3
    45dc:	f025 0503 	bic.w	r5, r5, #3
    45e0:	3508      	adds	r5, #8
    45e2:	2d0c      	cmp	r5, #12
    45e4:	bf38      	it	cc
    45e6:	250c      	movcc	r5, #12
    45e8:	2d00      	cmp	r5, #0
    45ea:	4606      	mov	r6, r0
    45ec:	db01      	blt.n	45f2 <_malloc_r+0x1a>
    45ee:	42a9      	cmp	r1, r5
    45f0:	d903      	bls.n	45fa <_malloc_r+0x22>
    45f2:	230c      	movs	r3, #12
    45f4:	6033      	str	r3, [r6, #0]
    45f6:	2000      	movs	r0, #0
    45f8:	bd70      	pop	{r4, r5, r6, pc}
    45fa:	f000 f88f 	bl	471c <__malloc_lock>
    45fe:	4a23      	ldr	r2, [pc, #140]	; (468c <_malloc_r+0xb4>)
    4600:	6814      	ldr	r4, [r2, #0]
    4602:	4621      	mov	r1, r4
    4604:	b991      	cbnz	r1, 462c <_malloc_r+0x54>
    4606:	4c22      	ldr	r4, [pc, #136]	; (4690 <_malloc_r+0xb8>)
    4608:	6823      	ldr	r3, [r4, #0]
    460a:	b91b      	cbnz	r3, 4614 <_malloc_r+0x3c>
    460c:	4630      	mov	r0, r6
    460e:	f000 f841 	bl	4694 <_sbrk_r>
    4612:	6020      	str	r0, [r4, #0]
    4614:	4629      	mov	r1, r5
    4616:	4630      	mov	r0, r6
    4618:	f000 f83c 	bl	4694 <_sbrk_r>
    461c:	1c43      	adds	r3, r0, #1
    461e:	d126      	bne.n	466e <_malloc_r+0x96>
    4620:	230c      	movs	r3, #12
    4622:	6033      	str	r3, [r6, #0]
    4624:	4630      	mov	r0, r6
    4626:	f000 f87a 	bl	471e <__malloc_unlock>
    462a:	e7e4      	b.n	45f6 <_malloc_r+0x1e>
    462c:	680b      	ldr	r3, [r1, #0]
    462e:	1b5b      	subs	r3, r3, r5
    4630:	d41a      	bmi.n	4668 <_malloc_r+0x90>
    4632:	2b0b      	cmp	r3, #11
    4634:	d90f      	bls.n	4656 <_malloc_r+0x7e>
    4636:	600b      	str	r3, [r1, #0]
    4638:	50cd      	str	r5, [r1, r3]
    463a:	18cc      	adds	r4, r1, r3
    463c:	4630      	mov	r0, r6
    463e:	f000 f86e 	bl	471e <__malloc_unlock>
    4642:	f104 000b 	add.w	r0, r4, #11
    4646:	1d23      	adds	r3, r4, #4
    4648:	f020 0007 	bic.w	r0, r0, #7
    464c:	1ac3      	subs	r3, r0, r3
    464e:	d01b      	beq.n	4688 <_malloc_r+0xb0>
    4650:	425a      	negs	r2, r3
    4652:	50e2      	str	r2, [r4, r3]
    4654:	bd70      	pop	{r4, r5, r6, pc}
    4656:	428c      	cmp	r4, r1
    4658:	bf0d      	iteet	eq
    465a:	6863      	ldreq	r3, [r4, #4]
    465c:	684b      	ldrne	r3, [r1, #4]
    465e:	6063      	strne	r3, [r4, #4]
    4660:	6013      	streq	r3, [r2, #0]
    4662:	bf18      	it	ne
    4664:	460c      	movne	r4, r1
    4666:	e7e9      	b.n	463c <_malloc_r+0x64>
    4668:	460c      	mov	r4, r1
    466a:	6849      	ldr	r1, [r1, #4]
    466c:	e7ca      	b.n	4604 <_malloc_r+0x2c>
    466e:	1cc4      	adds	r4, r0, #3
    4670:	f024 0403 	bic.w	r4, r4, #3
    4674:	42a0      	cmp	r0, r4
    4676:	d005      	beq.n	4684 <_malloc_r+0xac>
    4678:	1a21      	subs	r1, r4, r0
    467a:	4630      	mov	r0, r6
    467c:	f000 f80a 	bl	4694 <_sbrk_r>
    4680:	3001      	adds	r0, #1
    4682:	d0cd      	beq.n	4620 <_malloc_r+0x48>
    4684:	6025      	str	r5, [r4, #0]
    4686:	e7d9      	b.n	463c <_malloc_r+0x64>
    4688:	bd70      	pop	{r4, r5, r6, pc}
    468a:	bf00      	nop
    468c:	20002488 	.word	0x20002488
    4690:	2000248c 	.word	0x2000248c

00004694 <_sbrk_r>:
    4694:	b538      	push	{r3, r4, r5, lr}
    4696:	4c06      	ldr	r4, [pc, #24]	; (46b0 <_sbrk_r+0x1c>)
    4698:	2300      	movs	r3, #0
    469a:	4605      	mov	r5, r0
    469c:	4608      	mov	r0, r1
    469e:	6023      	str	r3, [r4, #0]
    46a0:	f7fc ff3a 	bl	1518 <_sbrk>
    46a4:	1c43      	adds	r3, r0, #1
    46a6:	d102      	bne.n	46ae <_sbrk_r+0x1a>
    46a8:	6823      	ldr	r3, [r4, #0]
    46aa:	b103      	cbz	r3, 46ae <_sbrk_r+0x1a>
    46ac:	602b      	str	r3, [r5, #0]
    46ae:	bd38      	pop	{r3, r4, r5, pc}
    46b0:	20002e9c 	.word	0x20002e9c

000046b4 <siprintf>:
    46b4:	b40e      	push	{r1, r2, r3}
    46b6:	b500      	push	{lr}
    46b8:	b09c      	sub	sp, #112	; 0x70
    46ba:	f44f 7102 	mov.w	r1, #520	; 0x208
    46be:	ab1d      	add	r3, sp, #116	; 0x74
    46c0:	f8ad 1014 	strh.w	r1, [sp, #20]
    46c4:	9002      	str	r0, [sp, #8]
    46c6:	9006      	str	r0, [sp, #24]
    46c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    46cc:	480a      	ldr	r0, [pc, #40]	; (46f8 <siprintf+0x44>)
    46ce:	9104      	str	r1, [sp, #16]
    46d0:	9107      	str	r1, [sp, #28]
    46d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    46d6:	f853 2b04 	ldr.w	r2, [r3], #4
    46da:	f8ad 1016 	strh.w	r1, [sp, #22]
    46de:	6800      	ldr	r0, [r0, #0]
    46e0:	9301      	str	r3, [sp, #4]
    46e2:	a902      	add	r1, sp, #8
    46e4:	f000 f878 	bl	47d8 <_svfiprintf_r>
    46e8:	9b02      	ldr	r3, [sp, #8]
    46ea:	2200      	movs	r2, #0
    46ec:	701a      	strb	r2, [r3, #0]
    46ee:	b01c      	add	sp, #112	; 0x70
    46f0:	f85d eb04 	ldr.w	lr, [sp], #4
    46f4:	b003      	add	sp, #12
    46f6:	4770      	bx	lr
    46f8:	200000f4 	.word	0x200000f4

000046fc <strcpy>:
    46fc:	4603      	mov	r3, r0
    46fe:	f811 2b01 	ldrb.w	r2, [r1], #1
    4702:	f803 2b01 	strb.w	r2, [r3], #1
    4706:	2a00      	cmp	r2, #0
    4708:	d1f9      	bne.n	46fe <strcpy+0x2>
    470a:	4770      	bx	lr

0000470c <strlen>:
    470c:	4603      	mov	r3, r0
    470e:	f813 2b01 	ldrb.w	r2, [r3], #1
    4712:	2a00      	cmp	r2, #0
    4714:	d1fb      	bne.n	470e <strlen+0x2>
    4716:	1a18      	subs	r0, r3, r0
    4718:	3801      	subs	r0, #1
    471a:	4770      	bx	lr

0000471c <__malloc_lock>:
    471c:	4770      	bx	lr

0000471e <__malloc_unlock>:
    471e:	4770      	bx	lr

00004720 <__ssputs_r>:
    4720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4724:	688e      	ldr	r6, [r1, #8]
    4726:	429e      	cmp	r6, r3
    4728:	4682      	mov	sl, r0
    472a:	460c      	mov	r4, r1
    472c:	4691      	mov	r9, r2
    472e:	4698      	mov	r8, r3
    4730:	d835      	bhi.n	479e <__ssputs_r+0x7e>
    4732:	898a      	ldrh	r2, [r1, #12]
    4734:	f412 6f90 	tst.w	r2, #1152	; 0x480
    4738:	d031      	beq.n	479e <__ssputs_r+0x7e>
    473a:	6825      	ldr	r5, [r4, #0]
    473c:	6909      	ldr	r1, [r1, #16]
    473e:	1a6f      	subs	r7, r5, r1
    4740:	6965      	ldr	r5, [r4, #20]
    4742:	2302      	movs	r3, #2
    4744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4748:	fb95 f5f3 	sdiv	r5, r5, r3
    474c:	f108 0301 	add.w	r3, r8, #1
    4750:	443b      	add	r3, r7
    4752:	429d      	cmp	r5, r3
    4754:	bf38      	it	cc
    4756:	461d      	movcc	r5, r3
    4758:	0553      	lsls	r3, r2, #21
    475a:	d531      	bpl.n	47c0 <__ssputs_r+0xa0>
    475c:	4629      	mov	r1, r5
    475e:	f7ff ff3b 	bl	45d8 <_malloc_r>
    4762:	4606      	mov	r6, r0
    4764:	b950      	cbnz	r0, 477c <__ssputs_r+0x5c>
    4766:	230c      	movs	r3, #12
    4768:	f8ca 3000 	str.w	r3, [sl]
    476c:	89a3      	ldrh	r3, [r4, #12]
    476e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4772:	81a3      	strh	r3, [r4, #12]
    4774:	f04f 30ff 	mov.w	r0, #4294967295
    4778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    477c:	463a      	mov	r2, r7
    477e:	6921      	ldr	r1, [r4, #16]
    4780:	f7ff feae 	bl	44e0 <memcpy>
    4784:	89a3      	ldrh	r3, [r4, #12]
    4786:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    478a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    478e:	81a3      	strh	r3, [r4, #12]
    4790:	6126      	str	r6, [r4, #16]
    4792:	6165      	str	r5, [r4, #20]
    4794:	443e      	add	r6, r7
    4796:	1bed      	subs	r5, r5, r7
    4798:	6026      	str	r6, [r4, #0]
    479a:	60a5      	str	r5, [r4, #8]
    479c:	4646      	mov	r6, r8
    479e:	4546      	cmp	r6, r8
    47a0:	bf28      	it	cs
    47a2:	4646      	movcs	r6, r8
    47a4:	4632      	mov	r2, r6
    47a6:	4649      	mov	r1, r9
    47a8:	6820      	ldr	r0, [r4, #0]
    47aa:	f7ff fea4 	bl	44f6 <memmove>
    47ae:	68a3      	ldr	r3, [r4, #8]
    47b0:	1b9b      	subs	r3, r3, r6
    47b2:	60a3      	str	r3, [r4, #8]
    47b4:	6823      	ldr	r3, [r4, #0]
    47b6:	441e      	add	r6, r3
    47b8:	6026      	str	r6, [r4, #0]
    47ba:	2000      	movs	r0, #0
    47bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    47c0:	462a      	mov	r2, r5
    47c2:	f000 fae5 	bl	4d90 <_realloc_r>
    47c6:	4606      	mov	r6, r0
    47c8:	2800      	cmp	r0, #0
    47ca:	d1e1      	bne.n	4790 <__ssputs_r+0x70>
    47cc:	6921      	ldr	r1, [r4, #16]
    47ce:	4650      	mov	r0, sl
    47d0:	f7ff feb4 	bl	453c <_free_r>
    47d4:	e7c7      	b.n	4766 <__ssputs_r+0x46>
	...

000047d8 <_svfiprintf_r>:
    47d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47dc:	b09d      	sub	sp, #116	; 0x74
    47de:	4680      	mov	r8, r0
    47e0:	9303      	str	r3, [sp, #12]
    47e2:	898b      	ldrh	r3, [r1, #12]
    47e4:	061c      	lsls	r4, r3, #24
    47e6:	460d      	mov	r5, r1
    47e8:	4616      	mov	r6, r2
    47ea:	d50f      	bpl.n	480c <_svfiprintf_r+0x34>
    47ec:	690b      	ldr	r3, [r1, #16]
    47ee:	b96b      	cbnz	r3, 480c <_svfiprintf_r+0x34>
    47f0:	2140      	movs	r1, #64	; 0x40
    47f2:	f7ff fef1 	bl	45d8 <_malloc_r>
    47f6:	6028      	str	r0, [r5, #0]
    47f8:	6128      	str	r0, [r5, #16]
    47fa:	b928      	cbnz	r0, 4808 <_svfiprintf_r+0x30>
    47fc:	230c      	movs	r3, #12
    47fe:	f8c8 3000 	str.w	r3, [r8]
    4802:	f04f 30ff 	mov.w	r0, #4294967295
    4806:	e0c5      	b.n	4994 <_svfiprintf_r+0x1bc>
    4808:	2340      	movs	r3, #64	; 0x40
    480a:	616b      	str	r3, [r5, #20]
    480c:	2300      	movs	r3, #0
    480e:	9309      	str	r3, [sp, #36]	; 0x24
    4810:	2320      	movs	r3, #32
    4812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    4816:	2330      	movs	r3, #48	; 0x30
    4818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    481c:	f04f 0b01 	mov.w	fp, #1
    4820:	4637      	mov	r7, r6
    4822:	463c      	mov	r4, r7
    4824:	f814 3b01 	ldrb.w	r3, [r4], #1
    4828:	2b00      	cmp	r3, #0
    482a:	d13c      	bne.n	48a6 <_svfiprintf_r+0xce>
    482c:	ebb7 0a06 	subs.w	sl, r7, r6
    4830:	d00b      	beq.n	484a <_svfiprintf_r+0x72>
    4832:	4653      	mov	r3, sl
    4834:	4632      	mov	r2, r6
    4836:	4629      	mov	r1, r5
    4838:	4640      	mov	r0, r8
    483a:	f7ff ff71 	bl	4720 <__ssputs_r>
    483e:	3001      	adds	r0, #1
    4840:	f000 80a3 	beq.w	498a <_svfiprintf_r+0x1b2>
    4844:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4846:	4453      	add	r3, sl
    4848:	9309      	str	r3, [sp, #36]	; 0x24
    484a:	783b      	ldrb	r3, [r7, #0]
    484c:	2b00      	cmp	r3, #0
    484e:	f000 809c 	beq.w	498a <_svfiprintf_r+0x1b2>
    4852:	2300      	movs	r3, #0
    4854:	f04f 32ff 	mov.w	r2, #4294967295
    4858:	9304      	str	r3, [sp, #16]
    485a:	9307      	str	r3, [sp, #28]
    485c:	9205      	str	r2, [sp, #20]
    485e:	9306      	str	r3, [sp, #24]
    4860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    4864:	931a      	str	r3, [sp, #104]	; 0x68
    4866:	2205      	movs	r2, #5
    4868:	7821      	ldrb	r1, [r4, #0]
    486a:	4850      	ldr	r0, [pc, #320]	; (49ac <_svfiprintf_r+0x1d4>)
    486c:	f000 fa40 	bl	4cf0 <memchr>
    4870:	1c67      	adds	r7, r4, #1
    4872:	9b04      	ldr	r3, [sp, #16]
    4874:	b9d8      	cbnz	r0, 48ae <_svfiprintf_r+0xd6>
    4876:	06d9      	lsls	r1, r3, #27
    4878:	bf44      	itt	mi
    487a:	2220      	movmi	r2, #32
    487c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    4880:	071a      	lsls	r2, r3, #28
    4882:	bf44      	itt	mi
    4884:	222b      	movmi	r2, #43	; 0x2b
    4886:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    488a:	7822      	ldrb	r2, [r4, #0]
    488c:	2a2a      	cmp	r2, #42	; 0x2a
    488e:	d016      	beq.n	48be <_svfiprintf_r+0xe6>
    4890:	9a07      	ldr	r2, [sp, #28]
    4892:	2100      	movs	r1, #0
    4894:	200a      	movs	r0, #10
    4896:	4627      	mov	r7, r4
    4898:	3401      	adds	r4, #1
    489a:	783b      	ldrb	r3, [r7, #0]
    489c:	3b30      	subs	r3, #48	; 0x30
    489e:	2b09      	cmp	r3, #9
    48a0:	d951      	bls.n	4946 <_svfiprintf_r+0x16e>
    48a2:	b1c9      	cbz	r1, 48d8 <_svfiprintf_r+0x100>
    48a4:	e011      	b.n	48ca <_svfiprintf_r+0xf2>
    48a6:	2b25      	cmp	r3, #37	; 0x25
    48a8:	d0c0      	beq.n	482c <_svfiprintf_r+0x54>
    48aa:	4627      	mov	r7, r4
    48ac:	e7b9      	b.n	4822 <_svfiprintf_r+0x4a>
    48ae:	4a3f      	ldr	r2, [pc, #252]	; (49ac <_svfiprintf_r+0x1d4>)
    48b0:	1a80      	subs	r0, r0, r2
    48b2:	fa0b f000 	lsl.w	r0, fp, r0
    48b6:	4318      	orrs	r0, r3
    48b8:	9004      	str	r0, [sp, #16]
    48ba:	463c      	mov	r4, r7
    48bc:	e7d3      	b.n	4866 <_svfiprintf_r+0x8e>
    48be:	9a03      	ldr	r2, [sp, #12]
    48c0:	1d11      	adds	r1, r2, #4
    48c2:	6812      	ldr	r2, [r2, #0]
    48c4:	9103      	str	r1, [sp, #12]
    48c6:	2a00      	cmp	r2, #0
    48c8:	db01      	blt.n	48ce <_svfiprintf_r+0xf6>
    48ca:	9207      	str	r2, [sp, #28]
    48cc:	e004      	b.n	48d8 <_svfiprintf_r+0x100>
    48ce:	4252      	negs	r2, r2
    48d0:	f043 0302 	orr.w	r3, r3, #2
    48d4:	9207      	str	r2, [sp, #28]
    48d6:	9304      	str	r3, [sp, #16]
    48d8:	783b      	ldrb	r3, [r7, #0]
    48da:	2b2e      	cmp	r3, #46	; 0x2e
    48dc:	d10e      	bne.n	48fc <_svfiprintf_r+0x124>
    48de:	787b      	ldrb	r3, [r7, #1]
    48e0:	2b2a      	cmp	r3, #42	; 0x2a
    48e2:	f107 0101 	add.w	r1, r7, #1
    48e6:	d132      	bne.n	494e <_svfiprintf_r+0x176>
    48e8:	9b03      	ldr	r3, [sp, #12]
    48ea:	1d1a      	adds	r2, r3, #4
    48ec:	681b      	ldr	r3, [r3, #0]
    48ee:	9203      	str	r2, [sp, #12]
    48f0:	2b00      	cmp	r3, #0
    48f2:	bfb8      	it	lt
    48f4:	f04f 33ff 	movlt.w	r3, #4294967295
    48f8:	3702      	adds	r7, #2
    48fa:	9305      	str	r3, [sp, #20]
    48fc:	4c2c      	ldr	r4, [pc, #176]	; (49b0 <_svfiprintf_r+0x1d8>)
    48fe:	7839      	ldrb	r1, [r7, #0]
    4900:	2203      	movs	r2, #3
    4902:	4620      	mov	r0, r4
    4904:	f000 f9f4 	bl	4cf0 <memchr>
    4908:	b138      	cbz	r0, 491a <_svfiprintf_r+0x142>
    490a:	2340      	movs	r3, #64	; 0x40
    490c:	1b00      	subs	r0, r0, r4
    490e:	fa03 f000 	lsl.w	r0, r3, r0
    4912:	9b04      	ldr	r3, [sp, #16]
    4914:	4303      	orrs	r3, r0
    4916:	9304      	str	r3, [sp, #16]
    4918:	3701      	adds	r7, #1
    491a:	7839      	ldrb	r1, [r7, #0]
    491c:	4825      	ldr	r0, [pc, #148]	; (49b4 <_svfiprintf_r+0x1dc>)
    491e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    4922:	2206      	movs	r2, #6
    4924:	1c7e      	adds	r6, r7, #1
    4926:	f000 f9e3 	bl	4cf0 <memchr>
    492a:	2800      	cmp	r0, #0
    492c:	d035      	beq.n	499a <_svfiprintf_r+0x1c2>
    492e:	4b22      	ldr	r3, [pc, #136]	; (49b8 <_svfiprintf_r+0x1e0>)
    4930:	b9fb      	cbnz	r3, 4972 <_svfiprintf_r+0x19a>
    4932:	9b03      	ldr	r3, [sp, #12]
    4934:	3307      	adds	r3, #7
    4936:	f023 0307 	bic.w	r3, r3, #7
    493a:	3308      	adds	r3, #8
    493c:	9303      	str	r3, [sp, #12]
    493e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4940:	444b      	add	r3, r9
    4942:	9309      	str	r3, [sp, #36]	; 0x24
    4944:	e76c      	b.n	4820 <_svfiprintf_r+0x48>
    4946:	fb00 3202 	mla	r2, r0, r2, r3
    494a:	2101      	movs	r1, #1
    494c:	e7a3      	b.n	4896 <_svfiprintf_r+0xbe>
    494e:	2300      	movs	r3, #0
    4950:	9305      	str	r3, [sp, #20]
    4952:	4618      	mov	r0, r3
    4954:	240a      	movs	r4, #10
    4956:	460f      	mov	r7, r1
    4958:	3101      	adds	r1, #1
    495a:	783a      	ldrb	r2, [r7, #0]
    495c:	3a30      	subs	r2, #48	; 0x30
    495e:	2a09      	cmp	r2, #9
    4960:	d903      	bls.n	496a <_svfiprintf_r+0x192>
    4962:	2b00      	cmp	r3, #0
    4964:	d0ca      	beq.n	48fc <_svfiprintf_r+0x124>
    4966:	9005      	str	r0, [sp, #20]
    4968:	e7c8      	b.n	48fc <_svfiprintf_r+0x124>
    496a:	fb04 2000 	mla	r0, r4, r0, r2
    496e:	2301      	movs	r3, #1
    4970:	e7f1      	b.n	4956 <_svfiprintf_r+0x17e>
    4972:	ab03      	add	r3, sp, #12
    4974:	9300      	str	r3, [sp, #0]
    4976:	462a      	mov	r2, r5
    4978:	4b10      	ldr	r3, [pc, #64]	; (49bc <_svfiprintf_r+0x1e4>)
    497a:	a904      	add	r1, sp, #16
    497c:	4640      	mov	r0, r8
    497e:	f3af 8000 	nop.w
    4982:	f1b0 3fff 	cmp.w	r0, #4294967295
    4986:	4681      	mov	r9, r0
    4988:	d1d9      	bne.n	493e <_svfiprintf_r+0x166>
    498a:	89ab      	ldrh	r3, [r5, #12]
    498c:	065b      	lsls	r3, r3, #25
    498e:	f53f af38 	bmi.w	4802 <_svfiprintf_r+0x2a>
    4992:	9809      	ldr	r0, [sp, #36]	; 0x24
    4994:	b01d      	add	sp, #116	; 0x74
    4996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    499a:	ab03      	add	r3, sp, #12
    499c:	9300      	str	r3, [sp, #0]
    499e:	462a      	mov	r2, r5
    49a0:	4b06      	ldr	r3, [pc, #24]	; (49bc <_svfiprintf_r+0x1e4>)
    49a2:	a904      	add	r1, sp, #16
    49a4:	4640      	mov	r0, r8
    49a6:	f000 f881 	bl	4aac <_printf_i>
    49aa:	e7ea      	b.n	4982 <_svfiprintf_r+0x1aa>
    49ac:	000056a4 	.word	0x000056a4
    49b0:	000056aa 	.word	0x000056aa
    49b4:	000056ae 	.word	0x000056ae
    49b8:	00000000 	.word	0x00000000
    49bc:	00004721 	.word	0x00004721

000049c0 <_printf_common>:
    49c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    49c4:	4691      	mov	r9, r2
    49c6:	461f      	mov	r7, r3
    49c8:	688a      	ldr	r2, [r1, #8]
    49ca:	690b      	ldr	r3, [r1, #16]
    49cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    49d0:	4293      	cmp	r3, r2
    49d2:	bfb8      	it	lt
    49d4:	4613      	movlt	r3, r2
    49d6:	f8c9 3000 	str.w	r3, [r9]
    49da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    49de:	4606      	mov	r6, r0
    49e0:	460c      	mov	r4, r1
    49e2:	b112      	cbz	r2, 49ea <_printf_common+0x2a>
    49e4:	3301      	adds	r3, #1
    49e6:	f8c9 3000 	str.w	r3, [r9]
    49ea:	6823      	ldr	r3, [r4, #0]
    49ec:	0699      	lsls	r1, r3, #26
    49ee:	bf42      	ittt	mi
    49f0:	f8d9 3000 	ldrmi.w	r3, [r9]
    49f4:	3302      	addmi	r3, #2
    49f6:	f8c9 3000 	strmi.w	r3, [r9]
    49fa:	6825      	ldr	r5, [r4, #0]
    49fc:	f015 0506 	ands.w	r5, r5, #6
    4a00:	d107      	bne.n	4a12 <_printf_common+0x52>
    4a02:	f104 0a19 	add.w	sl, r4, #25
    4a06:	68e3      	ldr	r3, [r4, #12]
    4a08:	f8d9 2000 	ldr.w	r2, [r9]
    4a0c:	1a9b      	subs	r3, r3, r2
    4a0e:	429d      	cmp	r5, r3
    4a10:	db29      	blt.n	4a66 <_printf_common+0xa6>
    4a12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    4a16:	6822      	ldr	r2, [r4, #0]
    4a18:	3300      	adds	r3, #0
    4a1a:	bf18      	it	ne
    4a1c:	2301      	movne	r3, #1
    4a1e:	0692      	lsls	r2, r2, #26
    4a20:	d42e      	bmi.n	4a80 <_printf_common+0xc0>
    4a22:	f104 0243 	add.w	r2, r4, #67	; 0x43
    4a26:	4639      	mov	r1, r7
    4a28:	4630      	mov	r0, r6
    4a2a:	47c0      	blx	r8
    4a2c:	3001      	adds	r0, #1
    4a2e:	d021      	beq.n	4a74 <_printf_common+0xb4>
    4a30:	6823      	ldr	r3, [r4, #0]
    4a32:	68e5      	ldr	r5, [r4, #12]
    4a34:	f8d9 2000 	ldr.w	r2, [r9]
    4a38:	f003 0306 	and.w	r3, r3, #6
    4a3c:	2b04      	cmp	r3, #4
    4a3e:	bf08      	it	eq
    4a40:	1aad      	subeq	r5, r5, r2
    4a42:	68a3      	ldr	r3, [r4, #8]
    4a44:	6922      	ldr	r2, [r4, #16]
    4a46:	bf0c      	ite	eq
    4a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    4a4c:	2500      	movne	r5, #0
    4a4e:	4293      	cmp	r3, r2
    4a50:	bfc4      	itt	gt
    4a52:	1a9b      	subgt	r3, r3, r2
    4a54:	18ed      	addgt	r5, r5, r3
    4a56:	f04f 0900 	mov.w	r9, #0
    4a5a:	341a      	adds	r4, #26
    4a5c:	454d      	cmp	r5, r9
    4a5e:	d11b      	bne.n	4a98 <_printf_common+0xd8>
    4a60:	2000      	movs	r0, #0
    4a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a66:	2301      	movs	r3, #1
    4a68:	4652      	mov	r2, sl
    4a6a:	4639      	mov	r1, r7
    4a6c:	4630      	mov	r0, r6
    4a6e:	47c0      	blx	r8
    4a70:	3001      	adds	r0, #1
    4a72:	d103      	bne.n	4a7c <_printf_common+0xbc>
    4a74:	f04f 30ff 	mov.w	r0, #4294967295
    4a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a7c:	3501      	adds	r5, #1
    4a7e:	e7c2      	b.n	4a06 <_printf_common+0x46>
    4a80:	18e1      	adds	r1, r4, r3
    4a82:	1c5a      	adds	r2, r3, #1
    4a84:	2030      	movs	r0, #48	; 0x30
    4a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    4a8a:	4422      	add	r2, r4
    4a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    4a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    4a94:	3302      	adds	r3, #2
    4a96:	e7c4      	b.n	4a22 <_printf_common+0x62>
    4a98:	2301      	movs	r3, #1
    4a9a:	4622      	mov	r2, r4
    4a9c:	4639      	mov	r1, r7
    4a9e:	4630      	mov	r0, r6
    4aa0:	47c0      	blx	r8
    4aa2:	3001      	adds	r0, #1
    4aa4:	d0e6      	beq.n	4a74 <_printf_common+0xb4>
    4aa6:	f109 0901 	add.w	r9, r9, #1
    4aaa:	e7d7      	b.n	4a5c <_printf_common+0x9c>

00004aac <_printf_i>:
    4aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4ab0:	4617      	mov	r7, r2
    4ab2:	7e0a      	ldrb	r2, [r1, #24]
    4ab4:	b085      	sub	sp, #20
    4ab6:	2a6e      	cmp	r2, #110	; 0x6e
    4ab8:	4698      	mov	r8, r3
    4aba:	4606      	mov	r6, r0
    4abc:	460c      	mov	r4, r1
    4abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ac0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    4ac4:	f000 80bc 	beq.w	4c40 <_printf_i+0x194>
    4ac8:	d81a      	bhi.n	4b00 <_printf_i+0x54>
    4aca:	2a63      	cmp	r2, #99	; 0x63
    4acc:	d02e      	beq.n	4b2c <_printf_i+0x80>
    4ace:	d80a      	bhi.n	4ae6 <_printf_i+0x3a>
    4ad0:	2a00      	cmp	r2, #0
    4ad2:	f000 80c8 	beq.w	4c66 <_printf_i+0x1ba>
    4ad6:	2a58      	cmp	r2, #88	; 0x58
    4ad8:	f000 808a 	beq.w	4bf0 <_printf_i+0x144>
    4adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
    4ae0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    4ae4:	e02a      	b.n	4b3c <_printf_i+0x90>
    4ae6:	2a64      	cmp	r2, #100	; 0x64
    4ae8:	d001      	beq.n	4aee <_printf_i+0x42>
    4aea:	2a69      	cmp	r2, #105	; 0x69
    4aec:	d1f6      	bne.n	4adc <_printf_i+0x30>
    4aee:	6821      	ldr	r1, [r4, #0]
    4af0:	681a      	ldr	r2, [r3, #0]
    4af2:	f011 0f80 	tst.w	r1, #128	; 0x80
    4af6:	d023      	beq.n	4b40 <_printf_i+0x94>
    4af8:	1d11      	adds	r1, r2, #4
    4afa:	6019      	str	r1, [r3, #0]
    4afc:	6813      	ldr	r3, [r2, #0]
    4afe:	e027      	b.n	4b50 <_printf_i+0xa4>
    4b00:	2a73      	cmp	r2, #115	; 0x73
    4b02:	f000 80b4 	beq.w	4c6e <_printf_i+0x1c2>
    4b06:	d808      	bhi.n	4b1a <_printf_i+0x6e>
    4b08:	2a6f      	cmp	r2, #111	; 0x6f
    4b0a:	d02a      	beq.n	4b62 <_printf_i+0xb6>
    4b0c:	2a70      	cmp	r2, #112	; 0x70
    4b0e:	d1e5      	bne.n	4adc <_printf_i+0x30>
    4b10:	680a      	ldr	r2, [r1, #0]
    4b12:	f042 0220 	orr.w	r2, r2, #32
    4b16:	600a      	str	r2, [r1, #0]
    4b18:	e003      	b.n	4b22 <_printf_i+0x76>
    4b1a:	2a75      	cmp	r2, #117	; 0x75
    4b1c:	d021      	beq.n	4b62 <_printf_i+0xb6>
    4b1e:	2a78      	cmp	r2, #120	; 0x78
    4b20:	d1dc      	bne.n	4adc <_printf_i+0x30>
    4b22:	2278      	movs	r2, #120	; 0x78
    4b24:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    4b28:	496e      	ldr	r1, [pc, #440]	; (4ce4 <_printf_i+0x238>)
    4b2a:	e064      	b.n	4bf6 <_printf_i+0x14a>
    4b2c:	681a      	ldr	r2, [r3, #0]
    4b2e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    4b32:	1d11      	adds	r1, r2, #4
    4b34:	6019      	str	r1, [r3, #0]
    4b36:	6813      	ldr	r3, [r2, #0]
    4b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    4b3c:	2301      	movs	r3, #1
    4b3e:	e0a3      	b.n	4c88 <_printf_i+0x1dc>
    4b40:	f011 0f40 	tst.w	r1, #64	; 0x40
    4b44:	f102 0104 	add.w	r1, r2, #4
    4b48:	6019      	str	r1, [r3, #0]
    4b4a:	d0d7      	beq.n	4afc <_printf_i+0x50>
    4b4c:	f9b2 3000 	ldrsh.w	r3, [r2]
    4b50:	2b00      	cmp	r3, #0
    4b52:	da03      	bge.n	4b5c <_printf_i+0xb0>
    4b54:	222d      	movs	r2, #45	; 0x2d
    4b56:	425b      	negs	r3, r3
    4b58:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    4b5c:	4962      	ldr	r1, [pc, #392]	; (4ce8 <_printf_i+0x23c>)
    4b5e:	220a      	movs	r2, #10
    4b60:	e017      	b.n	4b92 <_printf_i+0xe6>
    4b62:	6820      	ldr	r0, [r4, #0]
    4b64:	6819      	ldr	r1, [r3, #0]
    4b66:	f010 0f80 	tst.w	r0, #128	; 0x80
    4b6a:	d003      	beq.n	4b74 <_printf_i+0xc8>
    4b6c:	1d08      	adds	r0, r1, #4
    4b6e:	6018      	str	r0, [r3, #0]
    4b70:	680b      	ldr	r3, [r1, #0]
    4b72:	e006      	b.n	4b82 <_printf_i+0xd6>
    4b74:	f010 0f40 	tst.w	r0, #64	; 0x40
    4b78:	f101 0004 	add.w	r0, r1, #4
    4b7c:	6018      	str	r0, [r3, #0]
    4b7e:	d0f7      	beq.n	4b70 <_printf_i+0xc4>
    4b80:	880b      	ldrh	r3, [r1, #0]
    4b82:	4959      	ldr	r1, [pc, #356]	; (4ce8 <_printf_i+0x23c>)
    4b84:	2a6f      	cmp	r2, #111	; 0x6f
    4b86:	bf14      	ite	ne
    4b88:	220a      	movne	r2, #10
    4b8a:	2208      	moveq	r2, #8
    4b8c:	2000      	movs	r0, #0
    4b8e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    4b92:	6865      	ldr	r5, [r4, #4]
    4b94:	60a5      	str	r5, [r4, #8]
    4b96:	2d00      	cmp	r5, #0
    4b98:	f2c0 809c 	blt.w	4cd4 <_printf_i+0x228>
    4b9c:	6820      	ldr	r0, [r4, #0]
    4b9e:	f020 0004 	bic.w	r0, r0, #4
    4ba2:	6020      	str	r0, [r4, #0]
    4ba4:	2b00      	cmp	r3, #0
    4ba6:	d13f      	bne.n	4c28 <_printf_i+0x17c>
    4ba8:	2d00      	cmp	r5, #0
    4baa:	f040 8095 	bne.w	4cd8 <_printf_i+0x22c>
    4bae:	4675      	mov	r5, lr
    4bb0:	2a08      	cmp	r2, #8
    4bb2:	d10b      	bne.n	4bcc <_printf_i+0x120>
    4bb4:	6823      	ldr	r3, [r4, #0]
    4bb6:	07da      	lsls	r2, r3, #31
    4bb8:	d508      	bpl.n	4bcc <_printf_i+0x120>
    4bba:	6923      	ldr	r3, [r4, #16]
    4bbc:	6862      	ldr	r2, [r4, #4]
    4bbe:	429a      	cmp	r2, r3
    4bc0:	bfde      	ittt	le
    4bc2:	2330      	movle	r3, #48	; 0x30
    4bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
    4bc8:	f105 35ff 	addle.w	r5, r5, #4294967295
    4bcc:	ebae 0305 	sub.w	r3, lr, r5
    4bd0:	6123      	str	r3, [r4, #16]
    4bd2:	f8cd 8000 	str.w	r8, [sp]
    4bd6:	463b      	mov	r3, r7
    4bd8:	aa03      	add	r2, sp, #12
    4bda:	4621      	mov	r1, r4
    4bdc:	4630      	mov	r0, r6
    4bde:	f7ff feef 	bl	49c0 <_printf_common>
    4be2:	3001      	adds	r0, #1
    4be4:	d155      	bne.n	4c92 <_printf_i+0x1e6>
    4be6:	f04f 30ff 	mov.w	r0, #4294967295
    4bea:	b005      	add	sp, #20
    4bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4bf0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    4bf4:	493c      	ldr	r1, [pc, #240]	; (4ce8 <_printf_i+0x23c>)
    4bf6:	6822      	ldr	r2, [r4, #0]
    4bf8:	6818      	ldr	r0, [r3, #0]
    4bfa:	f012 0f80 	tst.w	r2, #128	; 0x80
    4bfe:	f100 0504 	add.w	r5, r0, #4
    4c02:	601d      	str	r5, [r3, #0]
    4c04:	d001      	beq.n	4c0a <_printf_i+0x15e>
    4c06:	6803      	ldr	r3, [r0, #0]
    4c08:	e002      	b.n	4c10 <_printf_i+0x164>
    4c0a:	0655      	lsls	r5, r2, #25
    4c0c:	d5fb      	bpl.n	4c06 <_printf_i+0x15a>
    4c0e:	8803      	ldrh	r3, [r0, #0]
    4c10:	07d0      	lsls	r0, r2, #31
    4c12:	bf44      	itt	mi
    4c14:	f042 0220 	orrmi.w	r2, r2, #32
    4c18:	6022      	strmi	r2, [r4, #0]
    4c1a:	b91b      	cbnz	r3, 4c24 <_printf_i+0x178>
    4c1c:	6822      	ldr	r2, [r4, #0]
    4c1e:	f022 0220 	bic.w	r2, r2, #32
    4c22:	6022      	str	r2, [r4, #0]
    4c24:	2210      	movs	r2, #16
    4c26:	e7b1      	b.n	4b8c <_printf_i+0xe0>
    4c28:	4675      	mov	r5, lr
    4c2a:	fbb3 f0f2 	udiv	r0, r3, r2
    4c2e:	fb02 3310 	mls	r3, r2, r0, r3
    4c32:	5ccb      	ldrb	r3, [r1, r3]
    4c34:	f805 3d01 	strb.w	r3, [r5, #-1]!
    4c38:	4603      	mov	r3, r0
    4c3a:	2800      	cmp	r0, #0
    4c3c:	d1f5      	bne.n	4c2a <_printf_i+0x17e>
    4c3e:	e7b7      	b.n	4bb0 <_printf_i+0x104>
    4c40:	6808      	ldr	r0, [r1, #0]
    4c42:	681a      	ldr	r2, [r3, #0]
    4c44:	6949      	ldr	r1, [r1, #20]
    4c46:	f010 0f80 	tst.w	r0, #128	; 0x80
    4c4a:	d004      	beq.n	4c56 <_printf_i+0x1aa>
    4c4c:	1d10      	adds	r0, r2, #4
    4c4e:	6018      	str	r0, [r3, #0]
    4c50:	6813      	ldr	r3, [r2, #0]
    4c52:	6019      	str	r1, [r3, #0]
    4c54:	e007      	b.n	4c66 <_printf_i+0x1ba>
    4c56:	f010 0f40 	tst.w	r0, #64	; 0x40
    4c5a:	f102 0004 	add.w	r0, r2, #4
    4c5e:	6018      	str	r0, [r3, #0]
    4c60:	6813      	ldr	r3, [r2, #0]
    4c62:	d0f6      	beq.n	4c52 <_printf_i+0x1a6>
    4c64:	8019      	strh	r1, [r3, #0]
    4c66:	2300      	movs	r3, #0
    4c68:	6123      	str	r3, [r4, #16]
    4c6a:	4675      	mov	r5, lr
    4c6c:	e7b1      	b.n	4bd2 <_printf_i+0x126>
    4c6e:	681a      	ldr	r2, [r3, #0]
    4c70:	1d11      	adds	r1, r2, #4
    4c72:	6019      	str	r1, [r3, #0]
    4c74:	6815      	ldr	r5, [r2, #0]
    4c76:	6862      	ldr	r2, [r4, #4]
    4c78:	2100      	movs	r1, #0
    4c7a:	4628      	mov	r0, r5
    4c7c:	f000 f838 	bl	4cf0 <memchr>
    4c80:	b108      	cbz	r0, 4c86 <_printf_i+0x1da>
    4c82:	1b40      	subs	r0, r0, r5
    4c84:	6060      	str	r0, [r4, #4]
    4c86:	6863      	ldr	r3, [r4, #4]
    4c88:	6123      	str	r3, [r4, #16]
    4c8a:	2300      	movs	r3, #0
    4c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    4c90:	e79f      	b.n	4bd2 <_printf_i+0x126>
    4c92:	6923      	ldr	r3, [r4, #16]
    4c94:	462a      	mov	r2, r5
    4c96:	4639      	mov	r1, r7
    4c98:	4630      	mov	r0, r6
    4c9a:	47c0      	blx	r8
    4c9c:	3001      	adds	r0, #1
    4c9e:	d0a2      	beq.n	4be6 <_printf_i+0x13a>
    4ca0:	6823      	ldr	r3, [r4, #0]
    4ca2:	079b      	lsls	r3, r3, #30
    4ca4:	d507      	bpl.n	4cb6 <_printf_i+0x20a>
    4ca6:	2500      	movs	r5, #0
    4ca8:	f104 0919 	add.w	r9, r4, #25
    4cac:	68e3      	ldr	r3, [r4, #12]
    4cae:	9a03      	ldr	r2, [sp, #12]
    4cb0:	1a9b      	subs	r3, r3, r2
    4cb2:	429d      	cmp	r5, r3
    4cb4:	db05      	blt.n	4cc2 <_printf_i+0x216>
    4cb6:	68e0      	ldr	r0, [r4, #12]
    4cb8:	9b03      	ldr	r3, [sp, #12]
    4cba:	4298      	cmp	r0, r3
    4cbc:	bfb8      	it	lt
    4cbe:	4618      	movlt	r0, r3
    4cc0:	e793      	b.n	4bea <_printf_i+0x13e>
    4cc2:	2301      	movs	r3, #1
    4cc4:	464a      	mov	r2, r9
    4cc6:	4639      	mov	r1, r7
    4cc8:	4630      	mov	r0, r6
    4cca:	47c0      	blx	r8
    4ccc:	3001      	adds	r0, #1
    4cce:	d08a      	beq.n	4be6 <_printf_i+0x13a>
    4cd0:	3501      	adds	r5, #1
    4cd2:	e7eb      	b.n	4cac <_printf_i+0x200>
    4cd4:	2b00      	cmp	r3, #0
    4cd6:	d1a7      	bne.n	4c28 <_printf_i+0x17c>
    4cd8:	780b      	ldrb	r3, [r1, #0]
    4cda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    4cde:	f104 0542 	add.w	r5, r4, #66	; 0x42
    4ce2:	e765      	b.n	4bb0 <_printf_i+0x104>
    4ce4:	000056c6 	.word	0x000056c6
    4ce8:	000056b5 	.word	0x000056b5
    4cec:	00000000 	.word	0x00000000

00004cf0 <memchr>:
    4cf0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4cf4:	2a10      	cmp	r2, #16
    4cf6:	db2b      	blt.n	4d50 <memchr+0x60>
    4cf8:	f010 0f07 	tst.w	r0, #7
    4cfc:	d008      	beq.n	4d10 <memchr+0x20>
    4cfe:	f810 3b01 	ldrb.w	r3, [r0], #1
    4d02:	3a01      	subs	r2, #1
    4d04:	428b      	cmp	r3, r1
    4d06:	d02d      	beq.n	4d64 <memchr+0x74>
    4d08:	f010 0f07 	tst.w	r0, #7
    4d0c:	b342      	cbz	r2, 4d60 <memchr+0x70>
    4d0e:	d1f6      	bne.n	4cfe <memchr+0xe>
    4d10:	b4f0      	push	{r4, r5, r6, r7}
    4d12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    4d16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    4d1a:	f022 0407 	bic.w	r4, r2, #7
    4d1e:	f07f 0700 	mvns.w	r7, #0
    4d22:	2300      	movs	r3, #0
    4d24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    4d28:	3c08      	subs	r4, #8
    4d2a:	ea85 0501 	eor.w	r5, r5, r1
    4d2e:	ea86 0601 	eor.w	r6, r6, r1
    4d32:	fa85 f547 	uadd8	r5, r5, r7
    4d36:	faa3 f587 	sel	r5, r3, r7
    4d3a:	fa86 f647 	uadd8	r6, r6, r7
    4d3e:	faa5 f687 	sel	r6, r5, r7
    4d42:	b98e      	cbnz	r6, 4d68 <memchr+0x78>
    4d44:	d1ee      	bne.n	4d24 <memchr+0x34>
    4d46:	bcf0      	pop	{r4, r5, r6, r7}
    4d48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    4d4c:	f002 0207 	and.w	r2, r2, #7
    4d50:	b132      	cbz	r2, 4d60 <memchr+0x70>
    4d52:	f810 3b01 	ldrb.w	r3, [r0], #1
    4d56:	3a01      	subs	r2, #1
    4d58:	ea83 0301 	eor.w	r3, r3, r1
    4d5c:	b113      	cbz	r3, 4d64 <memchr+0x74>
    4d5e:	d1f8      	bne.n	4d52 <memchr+0x62>
    4d60:	2000      	movs	r0, #0
    4d62:	4770      	bx	lr
    4d64:	3801      	subs	r0, #1
    4d66:	4770      	bx	lr
    4d68:	2d00      	cmp	r5, #0
    4d6a:	bf06      	itte	eq
    4d6c:	4635      	moveq	r5, r6
    4d6e:	3803      	subeq	r0, #3
    4d70:	3807      	subne	r0, #7
    4d72:	f015 0f01 	tst.w	r5, #1
    4d76:	d107      	bne.n	4d88 <memchr+0x98>
    4d78:	3001      	adds	r0, #1
    4d7a:	f415 7f80 	tst.w	r5, #256	; 0x100
    4d7e:	bf02      	ittt	eq
    4d80:	3001      	addeq	r0, #1
    4d82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    4d86:	3001      	addeq	r0, #1
    4d88:	bcf0      	pop	{r4, r5, r6, r7}
    4d8a:	3801      	subs	r0, #1
    4d8c:	4770      	bx	lr
    4d8e:	bf00      	nop

00004d90 <_realloc_r>:
    4d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d92:	4607      	mov	r7, r0
    4d94:	4614      	mov	r4, r2
    4d96:	460e      	mov	r6, r1
    4d98:	b921      	cbnz	r1, 4da4 <_realloc_r+0x14>
    4d9a:	4611      	mov	r1, r2
    4d9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4da0:	f7ff bc1a 	b.w	45d8 <_malloc_r>
    4da4:	b922      	cbnz	r2, 4db0 <_realloc_r+0x20>
    4da6:	f7ff fbc9 	bl	453c <_free_r>
    4daa:	4625      	mov	r5, r4
    4dac:	4628      	mov	r0, r5
    4dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4db0:	f000 f814 	bl	4ddc <_malloc_usable_size_r>
    4db4:	4284      	cmp	r4, r0
    4db6:	d90f      	bls.n	4dd8 <_realloc_r+0x48>
    4db8:	4621      	mov	r1, r4
    4dba:	4638      	mov	r0, r7
    4dbc:	f7ff fc0c 	bl	45d8 <_malloc_r>
    4dc0:	4605      	mov	r5, r0
    4dc2:	2800      	cmp	r0, #0
    4dc4:	d0f2      	beq.n	4dac <_realloc_r+0x1c>
    4dc6:	4631      	mov	r1, r6
    4dc8:	4622      	mov	r2, r4
    4dca:	f7ff fb89 	bl	44e0 <memcpy>
    4dce:	4631      	mov	r1, r6
    4dd0:	4638      	mov	r0, r7
    4dd2:	f7ff fbb3 	bl	453c <_free_r>
    4dd6:	e7e9      	b.n	4dac <_realloc_r+0x1c>
    4dd8:	4635      	mov	r5, r6
    4dda:	e7e7      	b.n	4dac <_realloc_r+0x1c>

00004ddc <_malloc_usable_size_r>:
    4ddc:	f851 0c04 	ldr.w	r0, [r1, #-4]
    4de0:	2800      	cmp	r0, #0
    4de2:	f1a0 0004 	sub.w	r0, r0, #4
    4de6:	bfbc      	itt	lt
    4de8:	580b      	ldrlt	r3, [r1, r0]
    4dea:	18c0      	addlt	r0, r0, r3
    4dec:	4770      	bx	lr
    4dee:	0000      	movs	r0, r0
    4df0:	2a2a2a2a 	.word	0x2a2a2a2a
    4df4:	2a2a2a2a 	.word	0x2a2a2a2a
    4df8:	2a2a2a2a 	.word	0x2a2a2a2a
    4dfc:	2a2a2a2a 	.word	0x2a2a2a2a
    4e00:	2a2a2a2a 	.word	0x2a2a2a2a
    4e04:	2a2a2a2a 	.word	0x2a2a2a2a
    4e08:	2a2a2a2a 	.word	0x2a2a2a2a
    4e0c:	2a2a2a2a 	.word	0x2a2a2a2a
    4e10:	2a2a2a2a 	.word	0x2a2a2a2a
    4e14:	2a2a2a2a 	.word	0x2a2a2a2a
    4e18:	2a2a2a2a 	.word	0x2a2a2a2a
    4e1c:	2a2a2a2a 	.word	0x2a2a2a2a
    4e20:	2a2a2a2a 	.word	0x2a2a2a2a
    4e24:	2a2a2a2a 	.word	0x2a2a2a2a
    4e28:	00002a2a 	.word	0x00002a2a
    4e2c:	2a2a2a2a 	.word	0x2a2a2a2a
    4e30:	2a2a2a2a 	.word	0x2a2a2a2a
    4e34:	2a2a2a2a 	.word	0x2a2a2a2a
    4e38:	532a2a2a 	.word	0x532a2a2a
    4e3c:	4b434154 	.word	0x4b434154
    4e40:	45564f20 	.word	0x45564f20
    4e44:	4f4c4652 	.word	0x4f4c4652
    4e48:	45442057 	.word	0x45442057
    4e4c:	54434554 	.word	0x54434554
    4e50:	2a2a4445 	.word	0x2a2a4445
    4e54:	2a2a2a2a 	.word	0x2a2a2a2a
    4e58:	2a2a2a2a 	.word	0x2a2a2a2a
    4e5c:	2a2a2a2a 	.word	0x2a2a2a2a
    4e60:	2a2a2a2a 	.word	0x2a2a2a2a
    4e64:	00002a2a 	.word	0x00002a2a
    4e68:	73615420 	.word	0x73615420
    4e6c:	6148206b 	.word	0x6148206b
    4e70:	656c646e 	.word	0x656c646e
    4e74:	25202d20 	.word	0x25202d20
    4e78:	23232064 	.word	0x23232064
    4e7c:	61542023 	.word	0x61542023
    4e80:	4e206b73 	.word	0x4e206b73
    4e84:	20656d61 	.word	0x20656d61
    4e88:	7325202d 	.word	0x7325202d
    4e8c:	00000000 	.word	0x00000000
    4e90:	6e6e7552 	.word	0x6e6e7552
    4e94:	20676e69 	.word	0x20676e69
    4e98:	70736944 	.word	0x70736944
    4e9c:	68637461 	.word	0x68637461
    4ea0:	73615420 	.word	0x73615420
    4ea4:	7573206b 	.word	0x7573206b
    4ea8:	73656363 	.word	0x73656363
    4eac:	6c756673 	.word	0x6c756673
    4eb0:	0000796c 	.word	0x0000796c
    4eb4:	45444f4d 	.word	0x45444f4d
    4eb8:	4144204d 	.word	0x4144204d
    4ebc:	55204154 	.word	0x55204154
    4ec0:	20545241 	.word	0x20545241
    4ec4:	52455328 	.word	0x52455328
    4ec8:	334d4f43 	.word	0x334d4f43
    4ecc:	6e692029 	.word	0x6e692029
    4ed0:	61697469 	.word	0x61697469
    4ed4:	657a696c 	.word	0x657a696c
    4ed8:	00000064 	.word	0x00000064
    4edc:	6c696146 	.word	0x6c696146
    4ee0:	74206465 	.word	0x74206465
    4ee4:	6e69206f 	.word	0x6e69206f
    4ee8:	61697469 	.word	0x61697469
    4eec:	657a696c 	.word	0x657a696c
    4ef0:	65687420 	.word	0x65687420
    4ef4:	444f4d20 	.word	0x444f4d20
    4ef8:	44204d45 	.word	0x44204d45
    4efc:	20415441 	.word	0x20415441
    4f00:	54524155 	.word	0x54524155
    4f04:	00000000 	.word	0x00000000
    4f08:	6e6e7552 	.word	0x6e6e7552
    4f0c:	20676e69 	.word	0x20676e69
    4f10:	65646f4d 	.word	0x65646f4d
    4f14:	7250206d 	.word	0x7250206d
    4f18:	7365636f 	.word	0x7365636f
    4f1c:	61542073 	.word	0x61542073
    4f20:	73206b73 	.word	0x73206b73
    4f24:	65636375 	.word	0x65636375
    4f28:	75667373 	.word	0x75667373
    4f2c:	00796c6c 	.word	0x00796c6c
    4f30:	6e6e7552 	.word	0x6e6e7552
    4f34:	20676e69 	.word	0x20676e69
    4f38:	65646f4d 	.word	0x65646f4d
    4f3c:	7852206d 	.word	0x7852206d
    4f40:	73615420 	.word	0x73615420
    4f44:	7573206b 	.word	0x7573206b
    4f48:	73656363 	.word	0x73656363
    4f4c:	6c756673 	.word	0x6c756673
    4f50:	0000796c 	.word	0x0000796c
    4f54:	6e6e7552 	.word	0x6e6e7552
    4f58:	20676e69 	.word	0x20676e69
    4f5c:	65646f4d 	.word	0x65646f4d
    4f60:	7854206d 	.word	0x7854206d
    4f64:	73615420 	.word	0x73615420
    4f68:	7573206b 	.word	0x7573206b
    4f6c:	73656363 	.word	0x73656363
    4f70:	6c756673 	.word	0x6c756673
    4f74:	0000796c 	.word	0x0000796c
    4f78:	73207854 	.word	0x73207854
    4f7c:	61697265 	.word	0x61697265
    4f80:	6544206c 	.word	0x6544206c
    4f84:	20677562 	.word	0x20677562
    4f88:	656e6f44 	.word	0x656e6f44
    4f8c:	00000a0d 	.word	0x00000a0d
    4f90:	44207852 	.word	0x44207852
    4f94:	0d656e6f 	.word	0x0d656e6f
    4f98:	0000000a 	.word	0x0000000a
    4f9c:	25207325 	.word	0x25207325
    4fa0:	00000073 	.word	0x00000073
    4fa4:	682f2e2e 	.word	0x682f2e2e
    4fa8:	692f6c61 	.word	0x692f6c61
    4fac:	756c636e 	.word	0x756c636e
    4fb0:	682f6564 	.word	0x682f6564
    4fb4:	775f6c61 	.word	0x775f6c61
    4fb8:	682e7464 	.word	0x682e7464
    4fbc:	00000000 	.word	0x00000000
    4fc0:	20746553 	.word	0x20746553
    4fc4:	20656874 	.word	0x20656874
    4fc8:	20544457 	.word	0x20544457
    4fcc:	656d6974 	.word	0x656d6974
    4fd0:	2074756f 	.word	0x2074756f
    4fd4:	63637573 	.word	0x63637573
    4fd8:	66737365 	.word	0x66737365
    4fdc:	796c6c75 	.word	0x796c6c75
    4fe0:	00000000 	.word	0x00000000
    4fe4:	6c696146 	.word	0x6c696146
    4fe8:	74206465 	.word	0x74206465
    4fec:	6573206f 	.word	0x6573206f
    4ff0:	68742074 	.word	0x68742074
    4ff4:	44572065 	.word	0x44572065
    4ff8:	69742054 	.word	0x69742054
    4ffc:	6f20656d 	.word	0x6f20656d
    5000:	00007475 	.word	0x00007475
    5004:	62616e45 	.word	0x62616e45
    5008:	2064656c 	.word	0x2064656c
    500c:	20656874 	.word	0x20656874
    5010:	00544457 	.word	0x00544457
    5014:	6c696146 	.word	0x6c696146
    5018:	74206465 	.word	0x74206465
    501c:	6e65206f 	.word	0x6e65206f
    5020:	656c6261 	.word	0x656c6261
    5024:	54445720 	.word	0x54445720
    5028:	00000000 	.word	0x00000000
    502c:	20544457 	.word	0x20544457
    5030:	74696e49 	.word	0x74696e49
    5034:	696c6169 	.word	0x696c6169
    5038:	00646573 	.word	0x00646573
    503c:	20544457 	.word	0x20544457
    5040:	6c696146 	.word	0x6c696146
    5044:	74206465 	.word	0x74206465
    5048:	6e69206f 	.word	0x6e69206f
    504c:	61697469 	.word	0x61697469
    5050:	657a696c 	.word	0x657a696c
    5054:	00000000 	.word	0x00000000
    5058:	682f2e2e 	.word	0x682f2e2e
    505c:	732f6c61 	.word	0x732f6c61
    5060:	682f6372 	.word	0x682f6372
    5064:	615f6c61 	.word	0x615f6c61
    5068:	79735f63 	.word	0x79735f63
    506c:	632e636e 	.word	0x632e636e
    5070:	00000000 	.word	0x00000000
    5074:	682f2e2e 	.word	0x682f2e2e
    5078:	732f6c61 	.word	0x732f6c61
    507c:	682f6372 	.word	0x682f6372
    5080:	615f6c61 	.word	0x615f6c61
    5084:	735f6364 	.word	0x735f6364
    5088:	2e636e79 	.word	0x2e636e79
    508c:	00000063 	.word	0x00000063
    5090:	682f2e2e 	.word	0x682f2e2e
    5094:	732f6c61 	.word	0x732f6c61
    5098:	682f6372 	.word	0x682f6372
    509c:	645f6c61 	.word	0x645f6c61
    50a0:	735f6361 	.word	0x735f6361
    50a4:	2e636e79 	.word	0x2e636e79
    50a8:	00000063 	.word	0x00000063
    50ac:	682f2e2e 	.word	0x682f2e2e
    50b0:	732f6c61 	.word	0x732f6c61
    50b4:	682f6372 	.word	0x682f6372
    50b8:	665f6c61 	.word	0x665f6c61
    50bc:	6873616c 	.word	0x6873616c
    50c0:	0000632e 	.word	0x0000632e
    50c4:	682f2e2e 	.word	0x682f2e2e
    50c8:	732f6c61 	.word	0x732f6c61
    50cc:	682f6372 	.word	0x682f6372
    50d0:	705f6c61 	.word	0x705f6c61
    50d4:	632e6d77 	.word	0x632e6d77
    50d8:	00000000 	.word	0x00000000
    50dc:	682f2e2e 	.word	0x682f2e2e
    50e0:	732f6c61 	.word	0x732f6c61
    50e4:	682f6372 	.word	0x682f6372
    50e8:	745f6c61 	.word	0x745f6c61
    50ec:	72656d69 	.word	0x72656d69
    50f0:	0000632e 	.word	0x0000632e
    50f4:	682f2e2e 	.word	0x682f2e2e
    50f8:	752f6c61 	.word	0x752f6c61
    50fc:	736c6974 	.word	0x736c6974
    5100:	6372732f 	.word	0x6372732f
    5104:	6974752f 	.word	0x6974752f
    5108:	6c5f736c 	.word	0x6c5f736c
    510c:	2e747369 	.word	0x2e747369
    5110:	00000063 	.word	0x00000063
    5114:	682f2e2e 	.word	0x682f2e2e
    5118:	752f6c61 	.word	0x752f6c61
    511c:	736c6974 	.word	0x736c6974
    5120:	6372732f 	.word	0x6372732f
    5124:	6974752f 	.word	0x6974752f
    5128:	725f736c 	.word	0x725f736c
    512c:	62676e69 	.word	0x62676e69
    5130:	65666675 	.word	0x65666675
    5134:	00632e72 	.word	0x00632e72
    5138:	682f2e2e 	.word	0x682f2e2e
    513c:	612f6c70 	.word	0x612f6c70
    5140:	70682f63 	.word	0x70682f63
    5144:	63615f6c 	.word	0x63615f6c
    5148:	0000632e 	.word	0x0000632e

0000514c <_adcs>:
    514c:	00c00000 00830002 00001900 00000000     ................
    515c:	00000000 00010001 00000000 00000000     ................
	...
    5178:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    5188:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    5198:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

000051a8 <_cfgs>:
	...

000052a8 <user_mux_confs>:
	...

000052ec <channel_confs>:
	...

0000532c <interrupt_cfg>:
	...
    53ac:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    53bc:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    53cc:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    53dc:	43000000 43000400                       ...C...C

000053e4 <_usarts>:
    53e4:	00000003 40200004 00030000 00700002     ...... @......p.
    53f4:	0000f62b 00000000 00000004 40300184     +.............0@
    5404:	00030300 00700002 0000ff2e 00000000     ......p.........
    5414:	00000005 40300004 00030000 00700002     ......0@......p.
    5424:	0000f62b 00000000                       +.......

0000542c <_i2cms>:
	...

00005444 <sercomspi_regs>:
	...
    5458:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    5468:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    5478:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00005488 <_tccs>:
    5488:	00000000 00000300 00000000 00000000     ................
    5498:	00001770 00000000 00000000 00000000     p...............
    54a8:	00000000 00000001 00000300 00000000     ................
    54b8:	00000000 00001770 00000000 00000000     ....p...........
	...
    54d0:	00000002 00000300 00000000 00000000     ................
    54e0:	00001770 00000000 00000000 00000000     p...............
    54f0:	00000000 00000003 00000300 00000000     ................
    5500:	00000000 00001770 00000000 00000000     ....p...........
	...
    5518:	00000004 00000300 00000000 00000000     ................
    5528:	00001770 00000000 00000000 00000000     p...............
    5538:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    5548:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    5558:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    5568:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    5578:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    5588:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    5598:	70736944 68637461 6b736154 00000000     DispatchTask....
    55a8:	65646f4d 7361546d 0000006b 65646f4d     ModemTask...Mode
    55b8:	5478526d 006b7361 65646f4d 6f72506d     mRxTask.ModemPro
    55c8:	73736563 6b736154 00000000 63637553     cessTask....Succ
    55d8:	66737365 796c6c75 65724320 64657461     essfully Created
    55e8:	65687420 73615420 0000736b 6c696146      the Tasks..Fail
    55f8:	74206465 7263206f 65746165 73617420     ed to create tas
    5608:	0000736b 6f727245 53203a72 64656863     ks..Error: Sched
    5618:	72656c75 69786520 00646574 454c4449     uler exited.IDLE
    5628:	00000000 09632509 25097525 75250975     .....%c.%u.%u.%u
    5638:	00000a0d 20726d54 00637653              ....Tmr Svc.

00005644 <__sf_fake_stderr>:
	...

00005664 <__sf_fake_stdin>:
	...

00005684 <__sf_fake_stdout>:
	...
    56a4:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    56b4:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    56c4:	31300046 35343332 39383736 64636261     F.0123456789abcd
    56d4:	00006665                                ef..

000056d8 <_init>:
    56d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56da:	bf00      	nop
    56dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    56de:	bc08      	pop	{r3}
    56e0:	469e      	mov	lr, r3
    56e2:	4770      	bx	lr

000056e4 <__init_array_start>:
    56e4:	00000289 	.word	0x00000289

000056e8 <_fini>:
    56e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56ea:	bf00      	nop
    56ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    56ee:	bc08      	pop	{r3}
    56f0:	469e      	mov	lr, r3
    56f2:	4770      	bx	lr

000056f4 <__fini_array_start>:
    56f4:	00000265 	.word	0x00000265
