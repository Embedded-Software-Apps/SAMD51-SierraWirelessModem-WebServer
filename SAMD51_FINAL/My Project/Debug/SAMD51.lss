
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007560  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000018c  20000000  00007560  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002018c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002018c  2**0
                  CONTENTS
  4 .bss          00003cc8  20000190  000076f0  0002018c  2**4
                  ALLOC
  5 .stack        00010000  20003e58  0000b3b8  0002018c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005b2a6  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009377  00000000  00000000  0007b4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ab77  00000000  00000000  00084830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b50  00000000  00000000  0009f3a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000021b8  00000000  00000000  000a0ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001b0d8  00000000  00000000  000a30af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d752  00000000  00000000  000be187  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108269  00000000  00000000  000eb8d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000048f0  00000000  00000000  001f3b44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 3e 01 20 c1 11 00 00 bd 11 00 00 bd 11 00 00     X>. ............
      10:	bd 11 00 00 bd 11 00 00 bd 11 00 00 00 00 00 00     ................
	...
      2c:	81 36 00 00 bd 11 00 00 00 00 00 00 21 37 00 00     .6..........!7..
      3c:	85 37 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     .7..............
      4c:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
      5c:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
      6c:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
      7c:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
      8c:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
      9c:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
      ac:	bd 11 00 00 bd 11 00 00 49 25 00 00 5d 25 00 00     ........I%..]%..
      bc:	d9 22 00 00 e5 22 00 00 f1 22 00 00 fd 22 00 00     ."..."..."..."..
      cc:	09 23 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     .#..............
      dc:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
      ec:	bd 11 00 00 00 00 00 00 59 26 00 00 bd 11 00 00     ........Y&......
      fc:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
     10c:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
     11c:	bd 11 00 00 bd 11 00 00 bd 11 00 00 f9 06 00 00     ................
     12c:	05 07 00 00 11 07 00 00 bd 11 00 00 bd 11 00 00     ................
     13c:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
     14c:	bd 11 00 00 a5 10 00 00 bd 11 00 00 00 00 00 00     ................
	...
     180:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
     190:	00 00 00 00 f9 2b 00 00 bd 11 00 00 bd 11 00 00     .....+..........
     1a0:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
     1b0:	0d 2c 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     .,..............
     1c0:	bd 11 00 00 21 2c 00 00 bd 11 00 00 bd 11 00 00     ....!,..........
     1d0:	bd 11 00 00 35 2c 00 00 bd 11 00 00 bd 11 00 00     ....5,..........
     1e0:	49 2c 00 00 bd 11 00 00 bd 11 00 00 3d 31 00 00     I,..........=1..
     1f0:	51 31 00 00 65 31 00 00 79 31 00 00 8d 31 00 00     Q1..e1..y1...1..
     200:	a1 31 00 00 00 00 00 00 00 00 00 00 bd 11 00 00     .1..............
     210:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
     220:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
     230:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
     240:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
     250:	bd 11 00 00 bd 11 00 00 bd 11 00 00 bd 11 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	00007560 	.word	0x00007560

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00007560 	.word	0x00007560
     2c4:	20000194 	.word	0x20000194
     2c8:	00007560 	.word	0x00007560
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Apps/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b090      	sub	sp, #64	; 0x40
     2d4:	4607      	mov	r7, r0
     2d6:	460e      	mov	r6, r1
	uint8_t dbgBuffer[30];
	uint8_t taskNameBuffer[30];
	
	memset(dbgBuffer,'0',30);
     2d8:	221e      	movs	r2, #30
     2da:	2130      	movs	r1, #48	; 0x30
     2dc:	a808      	add	r0, sp, #32
     2de:	4c14      	ldr	r4, [pc, #80]	; (330 <vApplicationStackOverflowHook+0x60>)
     2e0:	47a0      	blx	r4
    memset(taskNameBuffer,'0',30);
     2e2:	221e      	movs	r2, #30
     2e4:	2130      	movs	r1, #48	; 0x30
     2e6:	4668      	mov	r0, sp
     2e8:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ea:	4d12      	ldr	r5, [pc, #72]	; (334 <vApplicationStackOverflowHook+0x64>)
     2ec:	4628      	mov	r0, r5
     2ee:	4c12      	ldr	r4, [pc, #72]	; (338 <vApplicationStackOverflowHook+0x68>)
     2f0:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2f2:	4812      	ldr	r0, [pc, #72]	; (33c <vApplicationStackOverflowHook+0x6c>)
     2f4:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2f6:	4628      	mov	r0, r5
     2f8:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2fa:	4811      	ldr	r0, [pc, #68]	; (340 <vApplicationStackOverflowHook+0x70>)
     2fc:	47a0      	blx	r4
	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2fe:	463a      	mov	r2, r7
     300:	4910      	ldr	r1, [pc, #64]	; (344 <vApplicationStackOverflowHook+0x74>)
     302:	a808      	add	r0, sp, #32
     304:	4b10      	ldr	r3, [pc, #64]	; (348 <vApplicationStackOverflowHook+0x78>)
     306:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     308:	a808      	add	r0, sp, #32
     30a:	4c10      	ldr	r4, [pc, #64]	; (34c <vApplicationStackOverflowHook+0x7c>)
     30c:	47a0      	blx	r4
     30e:	b281      	uxth	r1, r0
     310:	a808      	add	r0, sp, #32
     312:	4d0f      	ldr	r5, [pc, #60]	; (350 <vApplicationStackOverflowHook+0x80>)
     314:	47a8      	blx	r5
	memcpy(taskNameBuffer,pcTaskName,strlen(pcTaskName)+1);
     316:	4630      	mov	r0, r6
     318:	47a0      	blx	r4
     31a:	1c42      	adds	r2, r0, #1
     31c:	4631      	mov	r1, r6
     31e:	4668      	mov	r0, sp
     320:	4b0c      	ldr	r3, [pc, #48]	; (354 <vApplicationStackOverflowHook+0x84>)
     322:	4798      	blx	r3
	SerialDebugPrint(taskNameBuffer,strlen(taskNameBuffer));
     324:	4668      	mov	r0, sp
     326:	47a0      	blx	r4
     328:	b281      	uxth	r1, r0
     32a:	4668      	mov	r0, sp
     32c:	47a8      	blx	r5
     32e:	e7fe      	b.n	32e <vApplicationStackOverflowHook+0x5e>
     330:	000055bf 	.word	0x000055bf
     334:	00005eb0 	.word	0x00005eb0
     338:	00001015 	.word	0x00001015
     33c:	00005eec 	.word	0x00005eec
     340:	00006e04 	.word	0x00006e04
     344:	00005f28 	.word	0x00005f28
     348:	00005749 	.word	0x00005749
     34c:	000057a1 	.word	0x000057a1
     350:	00000fd1 	.word	0x00000fd1
     354:	00005575 	.word	0x00005575

00000358 <DispatchTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "Apps/SerialDebug/SerialDebug.h"


void DispatchTask( void *DispatchTaskParam)
{
     358:	b5f0      	push	{r4, r5, r6, r7, lr}
     35a:	b083      	sub	sp, #12
	TickType_t xLastWakeTime;
	const TickType_t xDelayMs = pdMS_TO_TICKS(7000UL);
	const TickType_t xDebugPrintDelayMs = pdMS_TO_TICKS(500UL);
	xLastWakeTime = xTaskGetTickCount();
     35c:	4b0e      	ldr	r3, [pc, #56]	; (398 <DispatchTask+0x40>)
     35e:	4798      	blx	r3
     360:	9001      	str	r0, [sp, #4]

	while(1)
	{
        if( xSemaphoreTake( DebugPrintMutex,xDebugPrintDelayMs) == pdTRUE )
     362:	4c0e      	ldr	r4, [pc, #56]	; (39c <DispatchTask+0x44>)
     364:	4d0e      	ldr	r5, [pc, #56]	; (3a0 <DispatchTask+0x48>)
        {
        	DEBUG_PRINT("Running Dispatch Task successfully");
     366:	4f0f      	ldr	r7, [pc, #60]	; (3a4 <DispatchTask+0x4c>)
     368:	e006      	b.n	378 <DispatchTask+0x20>
        	xSemaphoreGive(DebugPrintMutex);
        }
		kickWatchDog();
     36a:	4b0f      	ldr	r3, [pc, #60]	; (3a8 <DispatchTask+0x50>)
     36c:	4798      	blx	r3
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     36e:	f641 3158 	movw	r1, #7000	; 0x1b58
     372:	a801      	add	r0, sp, #4
     374:	4b0d      	ldr	r3, [pc, #52]	; (3ac <DispatchTask+0x54>)
     376:	4798      	blx	r3
        if( xSemaphoreTake( DebugPrintMutex,xDebugPrintDelayMs) == pdTRUE )
     378:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     37c:	6820      	ldr	r0, [r4, #0]
     37e:	47a8      	blx	r5
     380:	2801      	cmp	r0, #1
     382:	d1f2      	bne.n	36a <DispatchTask+0x12>
        	DEBUG_PRINT("Running Dispatch Task successfully");
     384:	4638      	mov	r0, r7
     386:	4b0a      	ldr	r3, [pc, #40]	; (3b0 <DispatchTask+0x58>)
     388:	4798      	blx	r3
        	xSemaphoreGive(DebugPrintMutex);
     38a:	2300      	movs	r3, #0
     38c:	461a      	mov	r2, r3
     38e:	4619      	mov	r1, r3
     390:	6820      	ldr	r0, [r4, #0]
     392:	4e08      	ldr	r6, [pc, #32]	; (3b4 <DispatchTask+0x5c>)
     394:	47b0      	blx	r6
     396:	e7e8      	b.n	36a <DispatchTask+0x12>
     398:	000047a1 	.word	0x000047a1
     39c:	20003468 	.word	0x20003468
     3a0:	000041e9 	.word	0x000041e9
     3a4:	00005f3c 	.word	0x00005f3c
     3a8:	00001191 	.word	0x00001191
     3ac:	000049e1 	.word	0x000049e1
     3b0:	00001015 	.word	0x00001015
     3b4:	00003d51 	.word	0x00003d51

000003b8 <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     3b8:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     3ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     3be:	460d      	mov	r5, r1
     3c0:	4c04      	ldr	r4, [pc, #16]	; (3d4 <getModemCommandData+0x1c>)
     3c2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     3c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     3c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     3ca:	6823      	ldr	r3, [r4, #0]
     3cc:	602b      	str	r3, [r5, #0]
}
     3ce:	bc30      	pop	{r4, r5}
     3d0:	4770      	bx	lr
     3d2:	bf00      	nop
     3d4:	00005f60 	.word	0x00005f60

000003d8 <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
     3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3da:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
     3dc:	a901      	add	r1, sp, #4
     3de:	4b2e      	ldr	r3, [pc, #184]	; (498 <mdmParser_solicitedCmdParser+0xc0>)
     3e0:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     3e2:	f89d 700c 	ldrb.w	r7, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
     3e6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
     3ea:	4b2c      	ldr	r3, [pc, #176]	; (49c <mdmParser_solicitedCmdParser+0xc4>)
     3ec:	4798      	blx	r3

	if(responseBuffer != NULL)
     3ee:	2800      	cmp	r0, #0
     3f0:	d04d      	beq.n	48e <mdmParser_solicitedCmdParser+0xb6>
     3f2:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
     3f4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
     3f8:	4b29      	ldr	r3, [pc, #164]	; (4a0 <mdmParser_solicitedCmdParser+0xc8>)
     3fa:	4798      	blx	r3

		if(readStatus != false)
     3fc:	4606      	mov	r6, r0
     3fe:	2800      	cmp	r0, #0
     400:	d041      	beq.n	486 <mdmParser_solicitedCmdParser+0xae>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
     402:	f89d 200c 	ldrb.w	r2, [sp, #12]
     406:	4621      	mov	r1, r4
     408:	9802      	ldr	r0, [sp, #8]
     40a:	4b26      	ldr	r3, [pc, #152]	; (4a4 <mdmParser_solicitedCmdParser+0xcc>)
     40c:	4798      	blx	r3
     40e:	bb70      	cbnz	r0, 46e <mdmParser_solicitedCmdParser+0x96>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
     410:	f8bd 000e 	ldrh.w	r0, [sp, #14]
     414:	3001      	adds	r0, #1
     416:	4b21      	ldr	r3, [pc, #132]	; (49c <mdmParser_solicitedCmdParser+0xc4>)
     418:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
     41a:	4605      	mov	r5, r0
     41c:	b310      	cbz	r0, 464 <mdmParser_solicitedCmdParser+0x8c>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
     41e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
     422:	b1eb      	cbz	r3, 460 <mdmParser_solicitedCmdParser+0x88>
     424:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     426:	1cb9      	adds	r1, r7, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
     428:	b2c9      	uxtb	r1, r1
     42a:	18e2      	adds	r2, r4, r3
     42c:	5c52      	ldrb	r2, [r2, r1]
     42e:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
     430:	3301      	adds	r3, #1
     432:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
     434:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     438:	429a      	cmp	r2, r3
     43a:	d8f6      	bhi.n	42a <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
     43c:	2200      	movs	r2, #0
     43e:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt+1);
     440:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     444:	3201      	adds	r2, #1
     446:	b292      	uxth	r2, r2
     448:	4629      	mov	r1, r5
     44a:	f89d 0004 	ldrb.w	r0, [sp, #4]
     44e:	9b04      	ldr	r3, [sp, #16]
     450:	4798      	blx	r3
					DEBUG_PRINT("\r\n");
     452:	4815      	ldr	r0, [pc, #84]	; (4a8 <mdmParser_solicitedCmdParser+0xd0>)
     454:	4b15      	ldr	r3, [pc, #84]	; (4ac <mdmParser_solicitedCmdParser+0xd4>)
     456:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
     458:	4628      	mov	r0, r5
     45a:	4b15      	ldr	r3, [pc, #84]	; (4b0 <mdmParser_solicitedCmdParser+0xd8>)
     45c:	4798      	blx	r3
     45e:	e00a      	b.n	476 <mdmParser_solicitedCmdParser+0x9e>
					while(parseCnt < cmdData.validDataCnt)
     460:	2300      	movs	r3, #0
     462:	e7eb      	b.n	43c <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
     464:	4813      	ldr	r0, [pc, #76]	; (4b4 <mdmParser_solicitedCmdParser+0xdc>)
     466:	4b11      	ldr	r3, [pc, #68]	; (4ac <mdmParser_solicitedCmdParser+0xd4>)
     468:	4798      	blx	r3
	bool parseStatus = false;
     46a:	2600      	movs	r6, #0
     46c:	e003      	b.n	476 <mdmParser_solicitedCmdParser+0x9e>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
     46e:	4812      	ldr	r0, [pc, #72]	; (4b8 <mdmParser_solicitedCmdParser+0xe0>)
     470:	4b0e      	ldr	r3, [pc, #56]	; (4ac <mdmParser_solicitedCmdParser+0xd4>)
     472:	4798      	blx	r3
				parseStatus = false;
     474:	2600      	movs	r6, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
     476:	4620      	mov	r0, r4
     478:	4b0d      	ldr	r3, [pc, #52]	; (4b0 <mdmParser_solicitedCmdParser+0xd8>)
     47a:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
     47c:	4b0f      	ldr	r3, [pc, #60]	; (4bc <mdmParser_solicitedCmdParser+0xe4>)
     47e:	4798      	blx	r3

	return parseStatus;
}
     480:	4630      	mov	r0, r6
     482:	b007      	add	sp, #28
     484:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
     486:	480e      	ldr	r0, [pc, #56]	; (4c0 <mdmParser_solicitedCmdParser+0xe8>)
     488:	4b08      	ldr	r3, [pc, #32]	; (4ac <mdmParser_solicitedCmdParser+0xd4>)
     48a:	4798      	blx	r3
     48c:	e7f3      	b.n	476 <mdmParser_solicitedCmdParser+0x9e>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
     48e:	480d      	ldr	r0, [pc, #52]	; (4c4 <mdmParser_solicitedCmdParser+0xec>)
     490:	4b06      	ldr	r3, [pc, #24]	; (4ac <mdmParser_solicitedCmdParser+0xd4>)
     492:	4798      	blx	r3
	bool parseStatus = false;
     494:	2600      	movs	r6, #0
     496:	e7f1      	b.n	47c <mdmParser_solicitedCmdParser+0xa4>
     498:	000003b9 	.word	0x000003b9
     49c:	00003955 	.word	0x00003955
     4a0:	000007d9 	.word	0x000007d9
     4a4:	000057b1 	.word	0x000057b1
     4a8:	00006e04 	.word	0x00006e04
     4ac:	00001015 	.word	0x00001015
     4b0:	00003a29 	.word	0x00003a29
     4b4:	000066dc 	.word	0x000066dc
     4b8:	00006710 	.word	0x00006710
     4bc:	0000082d 	.word	0x0000082d
     4c0:	0000674c 	.word	0x0000674c
     4c4:	00006790 	.word	0x00006790

000004c8 <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     4c8:	4b01      	ldr	r3, [pc, #4]	; (4d0 <mdmParser_SetLastCmdProcessed+0x8>)
     4ca:	7018      	strb	r0, [r3, #0]
     4cc:	4770      	bx	lr
     4ce:	bf00      	nop
     4d0:	20000023 	.word	0x20000023

000004d4 <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     4d4:	4b01      	ldr	r3, [pc, #4]	; (4dc <mdmParser_SetLastSentAtCommand+0x8>)
     4d6:	7018      	strb	r0, [r3, #0]
     4d8:	4770      	bx	lr
     4da:	bf00      	nop
     4dc:	200001e8 	.word	0x200001e8

000004e0 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     4e0:	4b01      	ldr	r3, [pc, #4]	; (4e8 <mdmParser_GetLastSentAtCommand+0x8>)
     4e2:	7818      	ldrb	r0, [r3, #0]
     4e4:	4770      	bx	lr
     4e6:	bf00      	nop
     4e8:	200001e8 	.word	0x200001e8

000004ec <MdmConnect_HttpConnectionInit>:
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void MdmConnect_HttpConnectionInit(void)
{
	gHttpConnectionState = MDM_HTTP_DISCONNECTED;
     4ec:	4b05      	ldr	r3, [pc, #20]	; (504 <MdmConnect_HttpConnectionInit+0x18>)
     4ee:	2200      	movs	r2, #0
     4f0:	701a      	strb	r2, [r3, #0]
	gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     4f2:	705a      	strb	r2, [r3, #1]
	gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     4f4:	709a      	strb	r2, [r3, #2]
	gHttpCloseConnectionsState = GET_TOTAL_NO_OF_ACTIVE_CONNECTIONS;
	sessionIdCount = 3;
     4f6:	2103      	movs	r1, #3
     4f8:	70d9      	strb	r1, [r3, #3]

	ConnectionResponse.atCmd = CMD_AT_MAX;
     4fa:	711a      	strb	r2, [r3, #4]
	ConnectionResponse.length = 0;
     4fc:	80da      	strh	r2, [r3, #6]
	ConnectionResponse.response = NULL;
     4fe:	609a      	str	r2, [r3, #8]
     500:	4770      	bx	lr
     502:	bf00      	nop
     504:	200001ec 	.word	0x200001ec

00000508 <MdmCnct_ConnectInProgressSubStateMachine>:
    AtTxMsgType TxMsgQueueData;
    BaseType_t TxQueuePushStatus;
    const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(500UL);
    const TickType_t TransmitDelayMs = pdMS_TO_TICKS(1000UL);

	switch (gHttpConnectionInProgressSubstate)
     508:	4b3c      	ldr	r3, [pc, #240]	; (5fc <MdmCnct_ConnectInProgressSubStateMachine+0xf4>)
     50a:	785b      	ldrb	r3, [r3, #1]
     50c:	2b00      	cmp	r3, #0
     50e:	d174      	bne.n	5fa <MdmCnct_ConnectInProgressSubStateMachine+0xf2>
{
     510:	b510      	push	{r4, lr}
     512:	b082      	sub	sp, #8
	{
        case CONNECT_IN_PROGRESS_CLOSE_CONNECTION:
        {
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     514:	4b39      	ldr	r3, [pc, #228]	; (5fc <MdmCnct_ConnectInProgressSubStateMachine+0xf4>)
     516:	789b      	ldrb	r3, [r3, #2]
     518:	2b00      	cmp	r3, #0
     51a:	d140      	bne.n	59e <MdmCnct_ConnectInProgressSubStateMachine+0x96>
        	{
        		if(sessionIdCount > 0)
     51c:	4b37      	ldr	r3, [pc, #220]	; (5fc <MdmCnct_ConnectInProgressSubStateMachine+0xf4>)
     51e:	78db      	ldrb	r3, [r3, #3]
     520:	2b00      	cmp	r3, #0
     522:	d035      	beq.n	590 <MdmCnct_ConnectInProgressSubStateMachine+0x88>
        		{
        		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     524:	4b36      	ldr	r3, [pc, #216]	; (600 <MdmCnct_ConnectInProgressSubStateMachine+0xf8>)
     526:	6818      	ldr	r0, [r3, #0]
     528:	4b36      	ldr	r3, [pc, #216]	; (604 <MdmCnct_ConnectInProgressSubStateMachine+0xfc>)
     52a:	4798      	blx	r3
     52c:	2800      	cmp	r0, #0
     52e:	d138      	bne.n	5a2 <MdmCnct_ConnectInProgressSubStateMachine+0x9a>
        		    {
        		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     530:	2100      	movs	r1, #0
     532:	4b35      	ldr	r3, [pc, #212]	; (608 <MdmCnct_ConnectInProgressSubStateMachine+0x100>)
     534:	6818      	ldr	r0, [r3, #0]
     536:	4b35      	ldr	r3, [pc, #212]	; (60c <MdmCnct_ConnectInProgressSubStateMachine+0x104>)
     538:	4798      	blx	r3
     53a:	2801      	cmp	r0, #1
     53c:	d131      	bne.n	5a2 <MdmCnct_ConnectInProgressSubStateMachine+0x9a>
        		        {
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     53e:	2301      	movs	r3, #1
     540:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
     544:	2300      	movs	r3, #0
     546:	f88d 3001 	strb.w	r3, [sp, #1]
                            TxMsgQueueData.pData = NULL;
     54a:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     54c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     550:	4669      	mov	r1, sp
     552:	482b      	ldr	r0, [pc, #172]	; (600 <MdmCnct_ConnectInProgressSubStateMachine+0xf8>)
     554:	6800      	ldr	r0, [r0, #0]
     556:	4c2e      	ldr	r4, [pc, #184]	; (610 <MdmCnct_ConnectInProgressSubStateMachine+0x108>)
     558:	47a0      	blx	r4

                            if(TxQueuePushStatus == pdPASS)
     55a:	2801      	cmp	r0, #1
     55c:	d007      	beq.n	56e <MdmCnct_ConnectInProgressSubStateMachine+0x66>
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
                                vTaskDelay(TransmitDelayMs);
                            }
                            else
                            {
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     55e:	482d      	ldr	r0, [pc, #180]	; (614 <MdmCnct_ConnectInProgressSubStateMachine+0x10c>)
     560:	4b2d      	ldr	r3, [pc, #180]	; (618 <MdmCnct_ConnectInProgressSubStateMachine+0x110>)
     562:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
     564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     568:	4b2c      	ldr	r3, [pc, #176]	; (61c <MdmCnct_ConnectInProgressSubStateMachine+0x114>)
     56a:	4798      	blx	r3
     56c:	e019      	b.n	5a2 <MdmCnct_ConnectInProgressSubStateMachine+0x9a>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
     56e:	2300      	movs	r3, #0
     570:	461a      	mov	r2, r3
     572:	4619      	mov	r1, r3
     574:	4824      	ldr	r0, [pc, #144]	; (608 <MdmCnct_ConnectInProgressSubStateMachine+0x100>)
     576:	6800      	ldr	r0, [r0, #0]
     578:	47a0      	blx	r4
                                DEBUG_PRINT("Sent the Session Close request to Tx Task");
     57a:	4829      	ldr	r0, [pc, #164]	; (620 <MdmCnct_ConnectInProgressSubStateMachine+0x118>)
     57c:	4b26      	ldr	r3, [pc, #152]	; (618 <MdmCnct_ConnectInProgressSubStateMachine+0x110>)
     57e:	4798      	blx	r3
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     580:	2201      	movs	r2, #1
     582:	4b1e      	ldr	r3, [pc, #120]	; (5fc <MdmCnct_ConnectInProgressSubStateMachine+0xf4>)
     584:	709a      	strb	r2, [r3, #2]
                                vTaskDelay(TransmitDelayMs);
     586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     58a:	4b24      	ldr	r3, [pc, #144]	; (61c <MdmCnct_ConnectInProgressSubStateMachine+0x114>)
     58c:	4798      	blx	r3
     58e:	e008      	b.n	5a2 <MdmCnct_ConnectInProgressSubStateMachine+0x9a>
        		        }
        		    }
        		}
        		else
        		{
        			DEBUG_PRINT("No More Active Connections to close");
     590:	4824      	ldr	r0, [pc, #144]	; (624 <MdmCnct_ConnectInProgressSubStateMachine+0x11c>)
     592:	4b21      	ldr	r3, [pc, #132]	; (618 <MdmCnct_ConnectInProgressSubStateMachine+0x110>)
     594:	4798      	blx	r3
        			gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     596:	2201      	movs	r2, #1
     598:	4b18      	ldr	r3, [pc, #96]	; (5fc <MdmCnct_ConnectInProgressSubStateMachine+0xf4>)
     59a:	705a      	strb	r2, [r3, #1]
     59c:	e001      	b.n	5a2 <MdmCnct_ConnectInProgressSubStateMachine+0x9a>
        		}

        	}
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     59e:	2b01      	cmp	r3, #1
     5a0:	d001      	beq.n	5a6 <MdmCnct_ConnectInProgressSubStateMachine+0x9e>

        default:
        break;
	}

}
     5a2:	b002      	add	sp, #8
     5a4:	bd10      	pop	{r4, pc}
        		xQueueReceive( CmdResponseQueue, &ConnectionResponse, portMAX_DELAY );
     5a6:	4c15      	ldr	r4, [pc, #84]	; (5fc <MdmCnct_ConnectInProgressSubStateMachine+0xf4>)
     5a8:	f04f 32ff 	mov.w	r2, #4294967295
     5ac:	1d21      	adds	r1, r4, #4
     5ae:	4b1e      	ldr	r3, [pc, #120]	; (628 <MdmCnct_ConnectInProgressSubStateMachine+0x120>)
     5b0:	6818      	ldr	r0, [r3, #0]
     5b2:	4b1e      	ldr	r3, [pc, #120]	; (62c <MdmCnct_ConnectInProgressSubStateMachine+0x124>)
     5b4:	4798      	blx	r3
        		if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
     5b6:	7923      	ldrb	r3, [r4, #4]
     5b8:	b14b      	cbz	r3, 5ce <MdmCnct_ConnectInProgressSubStateMachine+0xc6>
        			DEBUG_PRINT("Failed to receive connection response in RX mode");
     5ba:	481d      	ldr	r0, [pc, #116]	; (630 <MdmCnct_ConnectInProgressSubStateMachine+0x128>)
     5bc:	4b16      	ldr	r3, [pc, #88]	; (618 <MdmCnct_ConnectInProgressSubStateMachine+0x110>)
     5be:	4798      	blx	r3
        			gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     5c0:	4b0e      	ldr	r3, [pc, #56]	; (5fc <MdmCnct_ConnectInProgressSubStateMachine+0xf4>)
     5c2:	2200      	movs	r2, #0
     5c4:	709a      	strb	r2, [r3, #2]
        			vPortFree(ConnectionResponse.response);
     5c6:	6898      	ldr	r0, [r3, #8]
     5c8:	4b1a      	ldr	r3, [pc, #104]	; (634 <MdmCnct_ConnectInProgressSubStateMachine+0x12c>)
     5ca:	4798      	blx	r3
}
     5cc:	e7e9      	b.n	5a2 <MdmCnct_ConnectInProgressSubStateMachine+0x9a>
        			DEBUG_PRINT("Received a connection response in RX Mode");
     5ce:	481a      	ldr	r0, [pc, #104]	; (638 <MdmCnct_ConnectInProgressSubStateMachine+0x130>)
     5d0:	4b11      	ldr	r3, [pc, #68]	; (618 <MdmCnct_ConnectInProgressSubStateMachine+0x110>)
     5d2:	4798      	blx	r3
        			if(sessionIdCount > 0)
     5d4:	78e3      	ldrb	r3, [r4, #3]
     5d6:	b93b      	cbnz	r3, 5e8 <MdmCnct_ConnectInProgressSubStateMachine+0xe0>
        				gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     5d8:	2201      	movs	r2, #1
     5da:	4b08      	ldr	r3, [pc, #32]	; (5fc <MdmCnct_ConnectInProgressSubStateMachine+0xf4>)
     5dc:	705a      	strb	r2, [r3, #1]
        			vPortFree(ConnectionResponse.response);
     5de:	4b07      	ldr	r3, [pc, #28]	; (5fc <MdmCnct_ConnectInProgressSubStateMachine+0xf4>)
     5e0:	6898      	ldr	r0, [r3, #8]
     5e2:	4b14      	ldr	r3, [pc, #80]	; (634 <MdmCnct_ConnectInProgressSubStateMachine+0x12c>)
     5e4:	4798      	blx	r3
     5e6:	e7dc      	b.n	5a2 <MdmCnct_ConnectInProgressSubStateMachine+0x9a>
        				sessionIdCount--;
     5e8:	3b01      	subs	r3, #1
     5ea:	70e3      	strb	r3, [r4, #3]
        				gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     5ec:	2300      	movs	r3, #0
     5ee:	70a3      	strb	r3, [r4, #2]
        				SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     5f0:	88e1      	ldrh	r1, [r4, #6]
     5f2:	68a0      	ldr	r0, [r4, #8]
     5f4:	4b11      	ldr	r3, [pc, #68]	; (63c <MdmCnct_ConnectInProgressSubStateMachine+0x134>)
     5f6:	4798      	blx	r3
     5f8:	e7f1      	b.n	5de <MdmCnct_ConnectInProgressSubStateMachine+0xd6>
     5fa:	4770      	bx	lr
     5fc:	200001ec 	.word	0x200001ec
     600:	20003464 	.word	0x20003464
     604:	000043c9 	.word	0x000043c9
     608:	2000346c 	.word	0x2000346c
     60c:	000041e9 	.word	0x000041e9
     610:	00003d51 	.word	0x00003d51
     614:	00006908 	.word	0x00006908
     618:	00001015 	.word	0x00001015
     61c:	00004a8d 	.word	0x00004a8d
     620:	000068dc 	.word	0x000068dc
     624:	0000693c 	.word	0x0000693c
     628:	20003440 	.word	0x20003440
     62c:	00004061 	.word	0x00004061
     630:	0000698c 	.word	0x0000698c
     634:	00003a29 	.word	0x00003a29
     638:	00006960 	.word	0x00006960
     63c:	00000fd1 	.word	0x00000fd1

00000640 <MdmConnect_HttpConnectionSchedule>:
{
     640:	b508      	push	{r3, lr}
	switch (gHttpConnectionState)
     642:	4b09      	ldr	r3, [pc, #36]	; (668 <MdmConnect_HttpConnectionSchedule+0x28>)
     644:	781b      	ldrb	r3, [r3, #0]
     646:	b113      	cbz	r3, 64e <MdmConnect_HttpConnectionSchedule+0xe>
     648:	2b01      	cmp	r3, #1
     64a:	d00a      	beq.n	662 <MdmConnect_HttpConnectionSchedule+0x22>
     64c:	bd08      	pop	{r3, pc}
			if(isModemDiagDataBaseUpdated() != false)
     64e:	4b07      	ldr	r3, [pc, #28]	; (66c <MdmConnect_HttpConnectionSchedule+0x2c>)
     650:	4798      	blx	r3
     652:	b140      	cbz	r0, 666 <MdmConnect_HttpConnectionSchedule+0x26>
	        	gHttpConnectionState = MDM_HTTP_CONNECTION_IN_PROGRESS;
     654:	4b04      	ldr	r3, [pc, #16]	; (668 <MdmConnect_HttpConnectionSchedule+0x28>)
     656:	2201      	movs	r2, #1
     658:	701a      	strb	r2, [r3, #0]
	        	gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     65a:	2200      	movs	r2, #0
     65c:	705a      	strb	r2, [r3, #1]
	        	gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     65e:	709a      	strb	r2, [r3, #2]
     660:	bd08      	pop	{r3, pc}
        	MdmCnct_ConnectInProgressSubStateMachine();
     662:	4b03      	ldr	r3, [pc, #12]	; (670 <MdmConnect_HttpConnectionSchedule+0x30>)
     664:	4798      	blx	r3
     666:	bd08      	pop	{r3, pc}
     668:	200001ec 	.word	0x200001ec
     66c:	00000aed 	.word	0x00000aed
     670:	00000509 	.word	0x00000509

00000674 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     674:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
     676:	4912      	ldr	r1, [pc, #72]	; (6c0 <mdmCtrlr_DataCommInit+0x4c>)
     678:	4812      	ldr	r0, [pc, #72]	; (6c4 <mdmCtrlr_DataCommInit+0x50>)
     67a:	4b13      	ldr	r3, [pc, #76]	; (6c8 <mdmCtrlr_DataCommInit+0x54>)
     67c:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     67e:	b118      	cbz	r0, 688 <mdmCtrlr_DataCommInit+0x14>
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
		
	}
	else
	{
		DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
     680:	4812      	ldr	r0, [pc, #72]	; (6cc <mdmCtrlr_DataCommInit+0x58>)
     682:	4b13      	ldr	r3, [pc, #76]	; (6d0 <mdmCtrlr_DataCommInit+0x5c>)
     684:	4798      	blx	r3
     686:	bd10      	pop	{r4, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     688:	f44f 6200 	mov.w	r2, #2048	; 0x800
     68c:	4911      	ldr	r1, [pc, #68]	; (6d4 <mdmCtrlr_DataCommInit+0x60>)
     68e:	4812      	ldr	r0, [pc, #72]	; (6d8 <mdmCtrlr_DataCommInit+0x64>)
     690:	4b12      	ldr	r3, [pc, #72]	; (6dc <mdmCtrlr_DataCommInit+0x68>)
     692:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     694:	2800      	cmp	r0, #0
     696:	d1f3      	bne.n	680 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
     698:	4c0a      	ldr	r4, [pc, #40]	; (6c4 <mdmCtrlr_DataCommInit+0x50>)
     69a:	2201      	movs	r2, #1
     69c:	4611      	mov	r1, r2
     69e:	4620      	mov	r0, r4
     6a0:	4b0f      	ldr	r3, [pc, #60]	; (6e0 <mdmCtrlr_DataCommInit+0x6c>)
     6a2:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
     6a4:	4620      	mov	r0, r4
     6a6:	4b0f      	ldr	r3, [pc, #60]	; (6e4 <mdmCtrlr_DataCommInit+0x70>)
     6a8:	4798      	blx	r3
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
     6aa:	480f      	ldr	r0, [pc, #60]	; (6e8 <mdmCtrlr_DataCommInit+0x74>)
     6ac:	4b08      	ldr	r3, [pc, #32]	; (6d0 <mdmCtrlr_DataCommInit+0x5c>)
     6ae:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
     6b0:	4b0e      	ldr	r3, [pc, #56]	; (6ec <mdmCtrlr_DataCommInit+0x78>)
     6b2:	f893 133c 	ldrb.w	r1, [r3, #828]	; 0x33c
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
     6b6:	0949      	lsrs	r1, r1, #5
     6b8:	480d      	ldr	r0, [pc, #52]	; (6f0 <mdmCtrlr_DataCommInit+0x7c>)
     6ba:	4b0e      	ldr	r3, [pc, #56]	; (6f4 <mdmCtrlr_DataCommInit+0x80>)
     6bc:	4798      	blx	r3
     6be:	bd10      	pop	{r4, pc}
     6c0:	41014000 	.word	0x41014000
     6c4:	20000024 	.word	0x20000024
     6c8:	000027d5 	.word	0x000027d5
     6cc:	000069fc 	.word	0x000069fc
     6d0:	00001015 	.word	0x00001015
     6d4:	20003478 	.word	0x20003478
     6d8:	20003c78 	.word	0x20003c78
     6dc:	00001dbd 	.word	0x00001dbd
     6e0:	00002881 	.word	0x00002881
     6e4:	00002849 	.word	0x00002849
     6e8:	000069c0 	.word	0x000069c0
     6ec:	e000e100 	.word	0xe000e100
     6f0:	000069e8 	.word	0x000069e8
     6f4:	0000105d 	.word	0x0000105d

000006f8 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     6f8:	2201      	movs	r2, #1
     6fa:	4b01      	ldr	r3, [pc, #4]	; (700 <SERCOM3_0_Handler+0x8>)
     6fc:	761a      	strb	r2, [r3, #24]
     6fe:	4770      	bx	lr
     700:	41014000 	.word	0x41014000

00000704 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     704:	2202      	movs	r2, #2
     706:	4b01      	ldr	r3, [pc, #4]	; (70c <SERCOM3_1_Handler+0x8>)
     708:	761a      	strb	r2, [r3, #24]
     70a:	4770      	bx	lr
     70c:	41014000 	.word	0x41014000

00000710 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     710:	b530      	push	{r4, r5, lr}
     712:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
     714:	4d1a      	ldr	r5, [pc, #104]	; (780 <SERCOM3_2_Handler+0x70>)
     716:	4c1b      	ldr	r4, [pc, #108]	; (784 <SERCOM3_2_Handler+0x74>)
     718:	4628      	mov	r0, r5
     71a:	47a0      	blx	r4
     71c:	2800      	cmp	r0, #0
     71e:	d0fb      	beq.n	718 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
     720:	4817      	ldr	r0, [pc, #92]	; (780 <SERCOM3_2_Handler+0x70>)
     722:	4b19      	ldr	r3, [pc, #100]	; (788 <SERCOM3_2_Handler+0x78>)
     724:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
     726:	4601      	mov	r1, r0
     728:	4818      	ldr	r0, [pc, #96]	; (78c <SERCOM3_2_Handler+0x7c>)
     72a:	4b19      	ldr	r3, [pc, #100]	; (790 <SERCOM3_2_Handler+0x80>)
     72c:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
     72e:	4b19      	ldr	r3, [pc, #100]	; (794 <SERCOM3_2_Handler+0x84>)
     730:	4798      	blx	r3
     732:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
     734:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     738:	d101      	bne.n	73e <SERCOM3_2_Handler+0x2e>

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}

}
     73a:	b009      	add	sp, #36	; 0x24
     73c:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
     73e:	a902      	add	r1, sp, #8
     740:	4b15      	ldr	r3, [pc, #84]	; (798 <SERCOM3_2_Handler+0x88>)
     742:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
     744:	4811      	ldr	r0, [pc, #68]	; (78c <SERCOM3_2_Handler+0x7c>)
     746:	4b15      	ldr	r3, [pc, #84]	; (79c <SERCOM3_2_Handler+0x8c>)
     748:	4798      	blx	r3
     74a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     74e:	4298      	cmp	r0, r3
     750:	d3f3      	bcc.n	73a <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
     752:	4b13      	ldr	r3, [pc, #76]	; (7a0 <SERCOM3_2_Handler+0x90>)
     754:	6818      	ldr	r0, [r3, #0]
     756:	ab07      	add	r3, sp, #28
     758:	9300      	str	r3, [sp, #0]
     75a:	2300      	movs	r3, #0
     75c:	2203      	movs	r2, #3
     75e:	b2e1      	uxtb	r1, r4
     760:	4c10      	ldr	r4, [pc, #64]	; (7a4 <SERCOM3_2_Handler+0x94>)
     762:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     764:	9b07      	ldr	r3, [sp, #28]
     766:	b13b      	cbz	r3, 778 <SERCOM3_2_Handler+0x68>
     768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     76c:	4b0e      	ldr	r3, [pc, #56]	; (7a8 <SERCOM3_2_Handler+0x98>)
     76e:	601a      	str	r2, [r3, #0]
     770:	f3bf 8f4f 	dsb	sy
     774:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
     778:	2000      	movs	r0, #0
     77a:	4b0c      	ldr	r3, [pc, #48]	; (7ac <SERCOM3_2_Handler+0x9c>)
     77c:	4798      	blx	r3
}
     77e:	e7dc      	b.n	73a <SERCOM3_2_Handler+0x2a>
     780:	20000024 	.word	0x20000024
     784:	00002875 	.word	0x00002875
     788:	00002863 	.word	0x00002863
     78c:	20003c78 	.word	0x20003c78
     790:	00001e51 	.word	0x00001e51
     794:	000004e1 	.word	0x000004e1
     798:	000003b9 	.word	0x000003b9
     79c:	00001e91 	.word	0x00001e91
     7a0:	20003458 	.word	0x20003458
     7a4:	00005041 	.word	0x00005041
     7a8:	e000ed04 	.word	0xe000ed04
     7ac:	000004d5 	.word	0x000004d5

000007b0 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     7b0:	b570      	push	{r4, r5, r6, lr}
     7b2:	4605      	mov	r5, r0
     7b4:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
     7b6:	4c05      	ldr	r4, [pc, #20]	; (7cc <mdmCtrlr_SendDataToModem+0x1c>)
     7b8:	4620      	mov	r0, r4
     7ba:	4b05      	ldr	r3, [pc, #20]	; (7d0 <mdmCtrlr_SendDataToModem+0x20>)
     7bc:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
     7be:	4632      	mov	r2, r6
     7c0:	4629      	mov	r1, r5
     7c2:	4620      	mov	r0, r4
     7c4:	4b03      	ldr	r3, [pc, #12]	; (7d4 <mdmCtrlr_SendDataToModem+0x24>)
     7c6:	4798      	blx	r3
}
     7c8:	bd70      	pop	{r4, r5, r6, pc}
     7ca:	bf00      	nop
     7cc:	20000024 	.word	0x20000024
     7d0:	00002849 	.word	0x00002849
     7d4:	00000f4d 	.word	0x00000f4d

000007d8 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7da:	b083      	sub	sp, #12
     7dc:	4605      	mov	r5, r0
     7de:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     7e0:	480d      	ldr	r0, [pc, #52]	; (818 <mdmCtrlr_ReadResponseFromModem+0x40>)
     7e2:	4b0e      	ldr	r3, [pc, #56]	; (81c <mdmCtrlr_ReadResponseFromModem+0x44>)
     7e4:	4798      	blx	r3
     7e6:	42b0      	cmp	r0, r6
     7e8:	d201      	bcs.n	7ee <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     7ea:	b003      	add	sp, #12
     7ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
     7ee:	a801      	add	r0, sp, #4
     7f0:	4b0b      	ldr	r3, [pc, #44]	; (820 <mdmCtrlr_ReadResponseFromModem+0x48>)
     7f2:	4798      	blx	r3
		while (readCnt < length)
     7f4:	b166      	cbz	r6, 810 <mdmCtrlr_ReadResponseFromModem+0x38>
     7f6:	462c      	mov	r4, r5
     7f8:	3e01      	subs	r6, #1
     7fa:	b2b6      	uxth	r6, r6
     7fc:	3601      	adds	r6, #1
     7fe:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     800:	4f05      	ldr	r7, [pc, #20]	; (818 <mdmCtrlr_ReadResponseFromModem+0x40>)
     802:	4e08      	ldr	r6, [pc, #32]	; (824 <mdmCtrlr_ReadResponseFromModem+0x4c>)
     804:	4621      	mov	r1, r4
     806:	4638      	mov	r0, r7
     808:	47b0      	blx	r6
     80a:	3401      	adds	r4, #1
		while (readCnt < length)
     80c:	42ac      	cmp	r4, r5
     80e:	d1f9      	bne.n	804 <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
     810:	a801      	add	r0, sp, #4
     812:	4b05      	ldr	r3, [pc, #20]	; (828 <mdmCtrlr_ReadResponseFromModem+0x50>)
     814:	4798      	blx	r3
     816:	e7e8      	b.n	7ea <mdmCtrlr_ReadResponseFromModem+0x12>
     818:	20003c78 	.word	0x20003c78
     81c:	00001e91 	.word	0x00001e91
     820:	00001a8d 	.word	0x00001a8d
     824:	00001e0d 	.word	0x00001e0d
     828:	00001a9b 	.word	0x00001a9b

0000082c <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     82c:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     82e:	4802      	ldr	r0, [pc, #8]	; (838 <mdmCtrlr_FlushRxBuffer+0xc>)
     830:	4b02      	ldr	r3, [pc, #8]	; (83c <mdmCtrlr_FlushRxBuffer+0x10>)
     832:	4798      	blx	r3
     834:	bd08      	pop	{r3, pc}
     836:	bf00      	nop
     838:	20003c78 	.word	0x20003c78
     83c:	00001eb5 	.word	0x00001eb5

00000840 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
     840:	b5f0      	push	{r4, r5, r6, r7, lr}
     842:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
     844:	2300      	movs	r3, #0
     846:	4a73      	ldr	r2, [pc, #460]	; (a14 <ModemDiagTask+0x1d4>)
     848:	7013      	strb	r3, [r2, #0]
	bModemDiagDataBaseUpdated = false;
     84a:	4a73      	ldr	r2, [pc, #460]	; (a18 <ModemDiagTask+0x1d8>)
     84c:	4611      	mov	r1, r2
     84e:	f801 3b04 	strb.w	r3, [r1], #4
	
    memset(atResponseData,0,sizeof(atResponseData));
     852:	8093      	strh	r3, [r2, #4]
     854:	708b      	strb	r3, [r1, #2]
    memset(atCgsnResponseData,0,sizeof(atCgsnResponseData));
     856:	6093      	str	r3, [r2, #8]
     858:	60d3      	str	r3, [r2, #12]
     85a:	6113      	str	r3, [r2, #16]
     85c:	6153      	str	r3, [r2, #20]
    memset(atKgsnResponseData,0,sizeof(atKgsnResponseData));
     85e:	6193      	str	r3, [r2, #24]
     860:	61d3      	str	r3, [r2, #28]
     862:	6213      	str	r3, [r2, #32]
     864:	f8c2 3023 	str.w	r3, [r2, #35]	; 0x23
    memset(atCarrierResponseData,0,sizeof(atCarrierResponseData));
     868:	6293      	str	r3, [r2, #40]	; 0x28
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     86a:	4c6c      	ldr	r4, [pc, #432]	; (a1c <ModemDiagTask+0x1dc>)
    AtTxMsgType TxMsgQueueData;
    CmdResponseType cmdResponse;

    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    {
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     86c:	4d6c      	ldr	r5, [pc, #432]	; (a20 <ModemDiagTask+0x1e0>)
                        ModemDiagState = 100;
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
                        vTaskDelay(DiagDelayMs);
     86e:	4e6d      	ldr	r6, [pc, #436]	; (a24 <ModemDiagTask+0x1e4>)
     870:	e096      	b.n	9a0 <ModemDiagTask+0x160>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     872:	2304      	movs	r3, #4
     874:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
     878:	2301      	movs	r3, #1
     87a:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     87e:	2300      	movs	r3, #0
     880:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     882:	2264      	movs	r2, #100	; 0x64
     884:	4669      	mov	r1, sp
     886:	4868      	ldr	r0, [pc, #416]	; (a28 <ModemDiagTask+0x1e8>)
     888:	6800      	ldr	r0, [r0, #0]
     88a:	4f68      	ldr	r7, [pc, #416]	; (a2c <ModemDiagTask+0x1ec>)
     88c:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     88e:	2801      	cmp	r0, #1
     890:	d006      	beq.n	8a0 <ModemDiagTask+0x60>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     892:	4867      	ldr	r0, [pc, #412]	; (a30 <ModemDiagTask+0x1f0>)
     894:	4b67      	ldr	r3, [pc, #412]	; (a34 <ModemDiagTask+0x1f4>)
     896:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     898:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     89c:	47b0      	blx	r6
     89e:	e073      	b.n	988 <ModemDiagTask+0x148>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     8a0:	4865      	ldr	r0, [pc, #404]	; (a38 <ModemDiagTask+0x1f8>)
     8a2:	4b64      	ldr	r3, [pc, #400]	; (a34 <ModemDiagTask+0x1f4>)
     8a4:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     8a6:	2300      	movs	r3, #0
     8a8:	461a      	mov	r2, r3
     8aa:	4619      	mov	r1, r3
     8ac:	4863      	ldr	r0, [pc, #396]	; (a3c <ModemDiagTask+0x1fc>)
     8ae:	6800      	ldr	r0, [r0, #0]
     8b0:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     8b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     8b6:	47b0      	blx	r6
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
     8b8:	2201      	movs	r2, #1
     8ba:	4b56      	ldr	r3, [pc, #344]	; (a14 <ModemDiagTask+0x1d4>)
     8bc:	701a      	strb	r2, [r3, #0]
     8be:	e063      	b.n	988 <ModemDiagTask+0x148>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     8c0:	2304      	movs	r3, #4
     8c2:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
     8c6:	2302      	movs	r3, #2
     8c8:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     8cc:	2300      	movs	r3, #0
     8ce:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     8d0:	2264      	movs	r2, #100	; 0x64
     8d2:	4669      	mov	r1, sp
     8d4:	4854      	ldr	r0, [pc, #336]	; (a28 <ModemDiagTask+0x1e8>)
     8d6:	6800      	ldr	r0, [r0, #0]
     8d8:	4f54      	ldr	r7, [pc, #336]	; (a2c <ModemDiagTask+0x1ec>)
     8da:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     8dc:	2801      	cmp	r0, #1
     8de:	d006      	beq.n	8ee <ModemDiagTask+0xae>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     8e0:	4853      	ldr	r0, [pc, #332]	; (a30 <ModemDiagTask+0x1f0>)
     8e2:	4b54      	ldr	r3, [pc, #336]	; (a34 <ModemDiagTask+0x1f4>)
     8e4:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     8e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     8ea:	47b0      	blx	r6
     8ec:	e04c      	b.n	988 <ModemDiagTask+0x148>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     8ee:	4852      	ldr	r0, [pc, #328]	; (a38 <ModemDiagTask+0x1f8>)
     8f0:	4b50      	ldr	r3, [pc, #320]	; (a34 <ModemDiagTask+0x1f4>)
     8f2:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     8f4:	2300      	movs	r3, #0
     8f6:	461a      	mov	r2, r3
     8f8:	4619      	mov	r1, r3
     8fa:	4850      	ldr	r0, [pc, #320]	; (a3c <ModemDiagTask+0x1fc>)
     8fc:	6800      	ldr	r0, [r0, #0]
     8fe:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     900:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     904:	47b0      	blx	r6
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
     906:	2202      	movs	r2, #2
     908:	4b42      	ldr	r3, [pc, #264]	; (a14 <ModemDiagTask+0x1d4>)
     90a:	701a      	strb	r2, [r3, #0]
     90c:	e03c      	b.n	988 <ModemDiagTask+0x148>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     90e:	2304      	movs	r3, #4
     910:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
     914:	2307      	movs	r3, #7
     916:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     91a:	2300      	movs	r3, #0
     91c:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     91e:	2264      	movs	r2, #100	; 0x64
     920:	4669      	mov	r1, sp
     922:	4841      	ldr	r0, [pc, #260]	; (a28 <ModemDiagTask+0x1e8>)
     924:	6800      	ldr	r0, [r0, #0]
     926:	4f41      	ldr	r7, [pc, #260]	; (a2c <ModemDiagTask+0x1ec>)
     928:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     92a:	2801      	cmp	r0, #1
     92c:	d006      	beq.n	93c <ModemDiagTask+0xfc>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     92e:	4840      	ldr	r0, [pc, #256]	; (a30 <ModemDiagTask+0x1f0>)
     930:	4b40      	ldr	r3, [pc, #256]	; (a34 <ModemDiagTask+0x1f4>)
     932:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     934:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     938:	47b0      	blx	r6
     93a:	e025      	b.n	988 <ModemDiagTask+0x148>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     93c:	483e      	ldr	r0, [pc, #248]	; (a38 <ModemDiagTask+0x1f8>)
     93e:	4b3d      	ldr	r3, [pc, #244]	; (a34 <ModemDiagTask+0x1f4>)
     940:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     942:	2300      	movs	r3, #0
     944:	461a      	mov	r2, r3
     946:	4619      	mov	r1, r3
     948:	483c      	ldr	r0, [pc, #240]	; (a3c <ModemDiagTask+0x1fc>)
     94a:	6800      	ldr	r0, [r0, #0]
     94c:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     94e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     952:	47b0      	blx	r6
                        ModemDiagState = MODEM_DIAG_MAX_STATE;
     954:	2204      	movs	r2, #4
     956:	4b2f      	ldr	r3, [pc, #188]	; (a14 <ModemDiagTask+0x1d4>)
     958:	701a      	strb	r2, [r3, #0]
     95a:	e015      	b.n	988 <ModemDiagTask+0x148>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     95c:	2304      	movs	r3, #4
     95e:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
     962:	2303      	movs	r3, #3
     964:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     968:	2300      	movs	r3, #0
     96a:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     96c:	2264      	movs	r2, #100	; 0x64
     96e:	4669      	mov	r1, sp
     970:	482d      	ldr	r0, [pc, #180]	; (a28 <ModemDiagTask+0x1e8>)
     972:	6800      	ldr	r0, [r0, #0]
     974:	4f2d      	ldr	r7, [pc, #180]	; (a2c <ModemDiagTask+0x1ec>)
     976:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     978:	2801      	cmp	r0, #1
     97a:	d02f      	beq.n	9dc <ModemDiagTask+0x19c>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     97c:	482c      	ldr	r0, [pc, #176]	; (a30 <ModemDiagTask+0x1f0>)
     97e:	4b2d      	ldr	r3, [pc, #180]	; (a34 <ModemDiagTask+0x1f4>)
     980:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     982:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     986:	47b0      	blx	r6
            kickWatchDog();
     988:	4b2d      	ldr	r3, [pc, #180]	; (a40 <ModemDiagTask+0x200>)
     98a:	4798      	blx	r3
            if( xSemaphoreTake( DebugPrintMutex,xDebugPrintDelayMs) == pdTRUE )
     98c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     990:	4b2c      	ldr	r3, [pc, #176]	; (a44 <ModemDiagTask+0x204>)
     992:	6818      	ldr	r0, [r3, #0]
     994:	47a8      	blx	r5
     996:	2801      	cmp	r0, #1
     998:	d030      	beq.n	9fc <ModemDiagTask+0x1bc>
            vTaskDelay(xDelayMs);
     99a:	f640 50ac 	movw	r0, #3500	; 0xdac
     99e:	47b0      	blx	r6
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     9a0:	47a0      	blx	r4
     9a2:	2804      	cmp	r0, #4
     9a4:	d1fc      	bne.n	9a0 <ModemDiagTask+0x160>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     9a6:	4b20      	ldr	r3, [pc, #128]	; (a28 <ModemDiagTask+0x1e8>)
     9a8:	6818      	ldr	r0, [r3, #0]
     9aa:	4b27      	ldr	r3, [pc, #156]	; (a48 <ModemDiagTask+0x208>)
     9ac:	4798      	blx	r3
     9ae:	2800      	cmp	r0, #0
     9b0:	d1ea      	bne.n	988 <ModemDiagTask+0x148>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     9b2:	2100      	movs	r1, #0
     9b4:	4b21      	ldr	r3, [pc, #132]	; (a3c <ModemDiagTask+0x1fc>)
     9b6:	6818      	ldr	r0, [r3, #0]
     9b8:	47a8      	blx	r5
     9ba:	2801      	cmp	r0, #1
     9bc:	d1e4      	bne.n	988 <ModemDiagTask+0x148>
            switch(ModemDiagState)
     9be:	4b15      	ldr	r3, [pc, #84]	; (a14 <ModemDiagTask+0x1d4>)
     9c0:	781b      	ldrb	r3, [r3, #0]
     9c2:	2b03      	cmp	r3, #3
     9c4:	d8e0      	bhi.n	988 <ModemDiagTask+0x148>
     9c6:	a201      	add	r2, pc, #4	; (adr r2, 9cc <ModemDiagTask+0x18c>)
     9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     9cc:	00000873 	.word	0x00000873
     9d0:	000008c1 	.word	0x000008c1
     9d4:	0000090f 	.word	0x0000090f
     9d8:	0000095d 	.word	0x0000095d
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     9dc:	4816      	ldr	r0, [pc, #88]	; (a38 <ModemDiagTask+0x1f8>)
     9de:	4b15      	ldr	r3, [pc, #84]	; (a34 <ModemDiagTask+0x1f4>)
     9e0:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     9e2:	2300      	movs	r3, #0
     9e4:	461a      	mov	r2, r3
     9e6:	4619      	mov	r1, r3
     9e8:	4814      	ldr	r0, [pc, #80]	; (a3c <ModemDiagTask+0x1fc>)
     9ea:	6800      	ldr	r0, [r0, #0]
     9ec:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     9ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     9f2:	47b0      	blx	r6
                        ModemDiagState = 100;
     9f4:	2264      	movs	r2, #100	; 0x64
     9f6:	4b07      	ldr	r3, [pc, #28]	; (a14 <ModemDiagTask+0x1d4>)
     9f8:	701a      	strb	r2, [r3, #0]
     9fa:	e7c5      	b.n	988 <ModemDiagTask+0x148>
            	DEBUG_PRINT("Running Modem Diag Task successfully");
     9fc:	4813      	ldr	r0, [pc, #76]	; (a4c <ModemDiagTask+0x20c>)
     9fe:	4b0d      	ldr	r3, [pc, #52]	; (a34 <ModemDiagTask+0x1f4>)
     a00:	4798      	blx	r3
            	xSemaphoreGive(DebugPrintMutex);
     a02:	2300      	movs	r3, #0
     a04:	461a      	mov	r2, r3
     a06:	4619      	mov	r1, r3
     a08:	480e      	ldr	r0, [pc, #56]	; (a44 <ModemDiagTask+0x204>)
     a0a:	6800      	ldr	r0, [r0, #0]
     a0c:	4f07      	ldr	r7, [pc, #28]	; (a2c <ModemDiagTask+0x1ec>)
     a0e:	47b8      	blx	r7
     a10:	e7c3      	b.n	99a <ModemDiagTask+0x15a>
     a12:	bf00      	nop
     a14:	20003c88 	.word	0x20003c88
     a18:	200001f8 	.word	0x200001f8
     a1c:	00000af9 	.word	0x00000af9
     a20:	000041e9 	.word	0x000041e9
     a24:	00004a8d 	.word	0x00004a8d
     a28:	20003464 	.word	0x20003464
     a2c:	00003d51 	.word	0x00003d51
     a30:	00006a48 	.word	0x00006a48
     a34:	00001015 	.word	0x00001015
     a38:	00006a28 	.word	0x00006a28
     a3c:	2000346c 	.word	0x2000346c
     a40:	00001191 	.word	0x00001191
     a44:	20003468 	.word	0x20003468
     a48:	000043c9 	.word	0x000043c9
     a4c:	00006a70 	.word	0x00006a70

00000a50 <ModemDiagUpdateDataBase>:
{
     a50:	b570      	push	{r4, r5, r6, lr}
     a52:	4604      	mov	r4, r0
    switch(cmd)
     a54:	780b      	ldrb	r3, [r1, #0]
     a56:	3b01      	subs	r3, #1
     a58:	2b06      	cmp	r3, #6
     a5a:	d822      	bhi.n	aa2 <ModemDiagUpdateDataBase+0x52>
     a5c:	e8df f003 	tbb	[pc, r3]
     a60:	21202b21 	.word	0x21202b21
     a64:	2121      	.short	0x2121
     a66:	04          	.byte	0x04
     a67:	00          	.byte	0x00
			while(parseCnt <= (cmdResponse->length - startIndex))
     a68:	884b      	ldrh	r3, [r1, #2]
     a6a:	2b07      	cmp	r3, #7
     a6c:	d40d      	bmi.n	a8a <ModemDiagUpdateDataBase+0x3a>
     a6e:	2200      	movs	r2, #0
     a70:	4613      	mov	r3, r2
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
     a72:	4d19      	ldr	r5, [pc, #100]	; (ad8 <ModemDiagUpdateDataBase+0x88>)
     a74:	18a0      	adds	r0, r4, r2
     a76:	79c0      	ldrb	r0, [r0, #7]
     a78:	442a      	add	r2, r5
     a7a:	7610      	strb	r0, [r2, #24]
				parseCnt++;
     a7c:	3301      	adds	r3, #1
     a7e:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
     a80:	461a      	mov	r2, r3
     a82:	8848      	ldrh	r0, [r1, #2]
     a84:	3807      	subs	r0, #7
     a86:	4283      	cmp	r3, r0
     a88:	ddf4      	ble.n	a74 <ModemDiagUpdateDataBase+0x24>
			DEBUG_PRINT("Retrieved the Modem serial Number");
     a8a:	4814      	ldr	r0, [pc, #80]	; (adc <ModemDiagUpdateDataBase+0x8c>)
     a8c:	4b14      	ldr	r3, [pc, #80]	; (ae0 <ModemDiagUpdateDataBase+0x90>)
     a8e:	4798      	blx	r3
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
     a90:	4c11      	ldr	r4, [pc, #68]	; (ad8 <ModemDiagUpdateDataBase+0x88>)
     a92:	210f      	movs	r1, #15
     a94:	f104 0018 	add.w	r0, r4, #24
     a98:	4b12      	ldr	r3, [pc, #72]	; (ae4 <ModemDiagUpdateDataBase+0x94>)
     a9a:	4798      	blx	r3
			bModemDiagDataBaseUpdated = true;
     a9c:	2301      	movs	r3, #1
     a9e:	7023      	strb	r3, [r4, #0]
     aa0:	bd70      	pop	{r4, r5, r6, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
     aa2:	4b0d      	ldr	r3, [pc, #52]	; (ad8 <ModemDiagUpdateDataBase+0x88>)
     aa4:	1d18      	adds	r0, r3, #4
     aa6:	8821      	ldrh	r1, [r4, #0]
     aa8:	78a2      	ldrb	r2, [r4, #2]
     aaa:	8099      	strh	r1, [r3, #4]
     aac:	7082      	strb	r2, [r0, #2]
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
     aae:	2103      	movs	r1, #3
     ab0:	4b0c      	ldr	r3, [pc, #48]	; (ae4 <ModemDiagUpdateDataBase+0x94>)
     ab2:	4798      	blx	r3
        break;
     ab4:	bd70      	pop	{r4, r5, r6, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
     ab6:	4e08      	ldr	r6, [pc, #32]	; (ad8 <ModemDiagUpdateDataBase+0x88>)
     ab8:	f106 0508 	add.w	r5, r6, #8
     abc:	6800      	ldr	r0, [r0, #0]
     abe:	6861      	ldr	r1, [r4, #4]
     ac0:	68a2      	ldr	r2, [r4, #8]
     ac2:	68e3      	ldr	r3, [r4, #12]
     ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
     ac6:	4808      	ldr	r0, [pc, #32]	; (ae8 <ModemDiagUpdateDataBase+0x98>)
     ac8:	4b05      	ldr	r3, [pc, #20]	; (ae0 <ModemDiagUpdateDataBase+0x90>)
     aca:	4798      	blx	r3
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
     acc:	2110      	movs	r1, #16
     ace:	f106 0008 	add.w	r0, r6, #8
     ad2:	4b04      	ldr	r3, [pc, #16]	; (ae4 <ModemDiagUpdateDataBase+0x94>)
     ad4:	4798      	blx	r3
        break;
     ad6:	bd70      	pop	{r4, r5, r6, pc}
     ad8:	200001f8 	.word	0x200001f8
     adc:	00006ab8 	.word	0x00006ab8
     ae0:	00001015 	.word	0x00001015
     ae4:	00000fd1 	.word	0x00000fd1
     ae8:	00006a98 	.word	0x00006a98

00000aec <isModemDiagDataBaseUpdated>:
*
********************************************************************************/
bool isModemDiagDataBaseUpdated(void)
{
	return bModemDiagDataBaseUpdated;
     aec:	4b01      	ldr	r3, [pc, #4]	; (af4 <isModemDiagDataBaseUpdated+0x8>)
     aee:	7818      	ldrb	r0, [r3, #0]
     af0:	4770      	bx	lr
     af2:	bf00      	nop
     af4:	200001f8 	.word	0x200001f8

00000af8 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
     af8:	4b01      	ldr	r3, [pc, #4]	; (b00 <getModemPowerStatus+0x8>)
     afa:	7818      	ldrb	r0, [r3, #0]
     afc:	4770      	bx	lr
     afe:	bf00      	nop
     b00:	20000224 	.word	0x20000224

00000b04 <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_SHUTDOWN;
     b04:	4b03      	ldr	r3, [pc, #12]	; (b14 <modemPowerStateInit+0x10>)
     b06:	2200      	movs	r2, #0
     b08:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     b0a:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     b0c:	2201      	movs	r2, #1
     b0e:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     b10:	70da      	strb	r2, [r3, #3]
     b12:	4770      	bx	lr
     b14:	20000224 	.word	0x20000224

00000b18 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
     b18:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemSigInitDelay = pdMS_TO_TICKS(500UL);
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);

    switch(ModemPwrState)
     b1a:	4b5d      	ldr	r3, [pc, #372]	; (c90 <modemPowerSchedule+0x178>)
     b1c:	781b      	ldrb	r3, [r3, #0]
     b1e:	2b06      	cmp	r3, #6
     b20:	f000 8089 	beq.w	c36 <modemPowerSchedule+0x11e>
     b24:	2b07      	cmp	r3, #7
     b26:	d054      	beq.n	bd2 <modemPowerSchedule+0xba>
     b28:	b103      	cbz	r3, b2c <modemPowerSchedule+0x14>
     b2a:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
     b2c:	4b58      	ldr	r3, [pc, #352]	; (c90 <modemPowerSchedule+0x178>)
     b2e:	785b      	ldrb	r3, [r3, #1]
     b30:	2b03      	cmp	r3, #3
     b32:	d8fa      	bhi.n	b2a <modemPowerSchedule+0x12>
     b34:	e8df f003 	tbb	[pc, r3]
     b38:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b3c:	4b55      	ldr	r3, [pc, #340]	; (c94 <modemPowerSchedule+0x17c>)
     b3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     b4a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     b4e:	4c52      	ldr	r4, [pc, #328]	; (c98 <modemPowerSchedule+0x180>)
     b50:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b54:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     b58:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5c:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b64:	f44f 2500 	mov.w	r5, #524288	; 0x80000
     b68:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6a:	6299      	str	r1, [r3, #40]	; 0x28
     b6c:	484b      	ldr	r0, [pc, #300]	; (c9c <modemPowerSchedule+0x184>)
     b6e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b70:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     b74:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b78:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b7c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b7e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b80:	6299      	str	r1, [r3, #40]	; 0x28
     b82:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b84:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     b88:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b8c:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b90:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
     b92:	2201      	movs	r2, #1
     b94:	4b3e      	ldr	r3, [pc, #248]	; (c90 <modemPowerSchedule+0x178>)
     b96:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
     b98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     b9c:	4b40      	ldr	r3, [pc, #256]	; (ca0 <modemPowerSchedule+0x188>)
     b9e:	4798      	blx	r3
                }
                break;
     ba0:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ba2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     ba6:	4b3b      	ldr	r3, [pc, #236]	; (c94 <modemPowerSchedule+0x17c>)
     ba8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
     bac:	2202      	movs	r2, #2
     bae:	4b38      	ldr	r3, [pc, #224]	; (c90 <modemPowerSchedule+0x178>)
     bb0:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
     bb2:	2032      	movs	r0, #50	; 0x32
     bb4:	4b3a      	ldr	r3, [pc, #232]	; (ca0 <modemPowerSchedule+0x188>)
     bb6:	4798      	blx	r3
                }
                break;
     bb8:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
     bba:	2203      	movs	r2, #3
     bbc:	4b34      	ldr	r3, [pc, #208]	; (c90 <modemPowerSchedule+0x178>)
     bbe:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
     bc0:	f640 30b8 	movw	r0, #3000	; 0xbb8
     bc4:	4b36      	ldr	r3, [pc, #216]	; (ca0 <modemPowerSchedule+0x188>)
     bc6:	4798      	blx	r3
                }
                break;
     bc8:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
     bca:	2204      	movs	r2, #4
     bcc:	4b30      	ldr	r3, [pc, #192]	; (c90 <modemPowerSchedule+0x178>)
     bce:	701a      	strb	r2, [r3, #0]
                }
                break;
     bd0:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
     bd2:	4b2f      	ldr	r3, [pc, #188]	; (c90 <modemPowerSchedule+0x178>)
     bd4:	789b      	ldrb	r3, [r3, #2]
     bd6:	b113      	cbz	r3, bde <modemPowerSchedule+0xc6>
     bd8:	2b01      	cmp	r3, #1
     bda:	d017      	beq.n	c0c <modemPowerSchedule+0xf4>
     bdc:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bde:	4b2d      	ldr	r3, [pc, #180]	; (c94 <modemPowerSchedule+0x17c>)
     be0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     be4:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     be6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     bea:	629a      	str	r2, [r3, #40]	; 0x28
     bec:	4a2b      	ldr	r2, [pc, #172]	; (c9c <modemPowerSchedule+0x184>)
     bee:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bf0:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     bf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bf8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bfc:	6199      	str	r1, [r3, #24]
                case MDM_PWR_RESET_ASSERT:
                {
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     bfe:	2201      	movs	r2, #1
     c00:	4b23      	ldr	r3, [pc, #140]	; (c90 <modemPowerSchedule+0x178>)
     c02:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
     c04:	2019      	movs	r0, #25
     c06:	4b26      	ldr	r3, [pc, #152]	; (ca0 <modemPowerSchedule+0x188>)
     c08:	4798      	blx	r3
                }
                break;
     c0a:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c0c:	4b21      	ldr	r3, [pc, #132]	; (c94 <modemPowerSchedule+0x17c>)
     c0e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     c12:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     c18:	629a      	str	r2, [r3, #40]	; 0x28
     c1a:	4a20      	ldr	r2, [pc, #128]	; (c9c <modemPowerSchedule+0x184>)
     c1c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c1e:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     c22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c26:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c2a:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
     c2c:	4b18      	ldr	r3, [pc, #96]	; (c90 <modemPowerSchedule+0x178>)
     c2e:	2200      	movs	r2, #0
     c30:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     c32:	705a      	strb	r2, [r3, #1]
                }
                break;
     c34:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
     c36:	4b16      	ldr	r3, [pc, #88]	; (c90 <modemPowerSchedule+0x178>)
     c38:	78db      	ldrb	r3, [r3, #3]
     c3a:	2b00      	cmp	r3, #0
     c3c:	f47f af75 	bne.w	b2a <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c40:	4b14      	ldr	r3, [pc, #80]	; (c94 <modemPowerSchedule+0x17c>)
     c42:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     c46:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     c4e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     c52:	4a11      	ldr	r2, [pc, #68]	; (c98 <modemPowerSchedule+0x180>)
     c54:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c58:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     c5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c60:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c64:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     c6c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c6e:	6298      	str	r0, [r3, #40]	; 0x28
     c70:	4a0a      	ldr	r2, [pc, #40]	; (c9c <modemPowerSchedule+0x184>)
     c72:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c74:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     c78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c7c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c80:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     c82:	2201      	movs	r2, #1
     c84:	4b02      	ldr	r3, [pc, #8]	; (c90 <modemPowerSchedule+0x178>)
     c86:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
     c88:	2019      	movs	r0, #25
     c8a:	4b05      	ldr	r3, [pc, #20]	; (ca0 <modemPowerSchedule+0x188>)
     c8c:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
     c8e:	e74c      	b.n	b2a <modemPowerSchedule+0x12>
     c90:	20000224 	.word	0x20000224
     c94:	41008000 	.word	0x41008000
     c98:	c0000001 	.word	0xc0000001
     c9c:	c0000008 	.word	0xc0000008
     ca0:	00004a8d 	.word	0x00004a8d

00000ca4 <ModemProcessTask>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
void ModemProcessTask( void *ModemTaskParam)
{
     ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const TickType_t xDelayMs = pdMS_TO_TICKS(5000UL);
    const TickType_t xDebugPrintDelayMs = pdMS_TO_TICKS(500UL);

    modemPowerStateInit();
     ca6:	4b12      	ldr	r3, [pc, #72]	; (cf0 <ModemProcessTask+0x4c>)
     ca8:	4798      	blx	r3
    MdmConnect_HttpConnectionInit();
     caa:	4b12      	ldr	r3, [pc, #72]	; (cf4 <ModemProcessTask+0x50>)
     cac:	4798      	blx	r3

    while(1)
    {
        modemPowerSchedule();
     cae:	4d12      	ldr	r5, [pc, #72]	; (cf8 <ModemProcessTask+0x54>)

        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     cb0:	4c12      	ldr	r4, [pc, #72]	; (cfc <ModemProcessTask+0x58>)
        {
            if( xSemaphoreTake( DebugPrintMutex,xDebugPrintDelayMs) == pdTRUE )
     cb2:	4e13      	ldr	r6, [pc, #76]	; (d00 <ModemProcessTask+0x5c>)
     cb4:	e007      	b.n	cc6 <ModemProcessTask+0x22>
            {
            	DEBUG_PRINT("Running Modem Process Task successfully");
            	xSemaphoreGive(DebugPrintMutex);
            }

            MdmConnect_HttpConnectionSchedule();
     cb6:	4b13      	ldr	r3, [pc, #76]	; (d04 <ModemProcessTask+0x60>)
     cb8:	4798      	blx	r3
			kickWatchDog();
     cba:	4b13      	ldr	r3, [pc, #76]	; (d08 <ModemProcessTask+0x64>)
     cbc:	4798      	blx	r3
            vTaskDelay(xDelayMs);
     cbe:	f241 3088 	movw	r0, #5000	; 0x1388
     cc2:	4b12      	ldr	r3, [pc, #72]	; (d0c <ModemProcessTask+0x68>)
     cc4:	4798      	blx	r3
        modemPowerSchedule();
     cc6:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     cc8:	47a0      	blx	r4
     cca:	2804      	cmp	r0, #4
     ccc:	d1fb      	bne.n	cc6 <ModemProcessTask+0x22>
            if( xSemaphoreTake( DebugPrintMutex,xDebugPrintDelayMs) == pdTRUE )
     cce:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     cd2:	6830      	ldr	r0, [r6, #0]
     cd4:	4b0e      	ldr	r3, [pc, #56]	; (d10 <ModemProcessTask+0x6c>)
     cd6:	4798      	blx	r3
     cd8:	2801      	cmp	r0, #1
     cda:	d1ec      	bne.n	cb6 <ModemProcessTask+0x12>
            	DEBUG_PRINT("Running Modem Process Task successfully");
     cdc:	480d      	ldr	r0, [pc, #52]	; (d14 <ModemProcessTask+0x70>)
     cde:	4b0e      	ldr	r3, [pc, #56]	; (d18 <ModemProcessTask+0x74>)
     ce0:	4798      	blx	r3
            	xSemaphoreGive(DebugPrintMutex);
     ce2:	2300      	movs	r3, #0
     ce4:	461a      	mov	r2, r3
     ce6:	4619      	mov	r1, r3
     ce8:	6830      	ldr	r0, [r6, #0]
     cea:	4f0c      	ldr	r7, [pc, #48]	; (d1c <ModemProcessTask+0x78>)
     cec:	47b8      	blx	r7
     cee:	e7e2      	b.n	cb6 <ModemProcessTask+0x12>
     cf0:	00000b05 	.word	0x00000b05
     cf4:	000004ed 	.word	0x000004ed
     cf8:	00000b19 	.word	0x00000b19
     cfc:	00000af9 	.word	0x00000af9
     d00:	20003468 	.word	0x20003468
     d04:	00000641 	.word	0x00000641
     d08:	00001191 	.word	0x00001191
     d0c:	00004a8d 	.word	0x00004a8d
     d10:	000041e9 	.word	0x000041e9
     d14:	00006adc 	.word	0x00006adc
     d18:	00001015 	.word	0x00001015
     d1c:	00003d51 	.word	0x00003d51

00000d20 <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
     d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d22:	4607      	mov	r7, r0
     d24:	460c      	mov	r4, r1
     d26:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
     d28:	4924      	ldr	r1, [pc, #144]	; (dbc <modemResponseHandler+0x9c>)
     d2a:	4b25      	ldr	r3, [pc, #148]	; (dc0 <modemResponseHandler+0xa0>)
     d2c:	4798      	blx	r3

    if(response != NULL)
     d2e:	2c00      	cmp	r4, #0
     d30:	d03f      	beq.n	db2 <modemResponseHandler+0x92>
    {
        switch (cmdData.cmdSet)
     d32:	4b22      	ldr	r3, [pc, #136]	; (dbc <modemResponseHandler+0x9c>)
     d34:	785b      	ldrb	r3, [r3, #1]
     d36:	b113      	cbz	r3, d3e <modemResponseHandler+0x1e>
     d38:	2b01      	cmp	r3, #1
     d3a:	d016      	beq.n	d6a <modemResponseHandler+0x4a>
     d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
     d3e:	4e1f      	ldr	r6, [pc, #124]	; (dbc <modemResponseHandler+0x9c>)
     d40:	7537      	strb	r7, [r6, #20]
            	cmdResponse.length = length;
     d42:	82f5      	strh	r5, [r6, #22]
            	memset(responseBuffer,0,700);
     d44:	f106 071c 	add.w	r7, r6, #28
     d48:	f44f 722f 	mov.w	r2, #700	; 0x2bc
     d4c:	2100      	movs	r1, #0
     d4e:	4638      	mov	r0, r7
     d50:	4b1c      	ldr	r3, [pc, #112]	; (dc4 <modemResponseHandler+0xa4>)
     d52:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
     d54:	462a      	mov	r2, r5
     d56:	4621      	mov	r1, r4
     d58:	4638      	mov	r0, r7
     d5a:	4b1b      	ldr	r3, [pc, #108]	; (dc8 <modemResponseHandler+0xa8>)
     d5c:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
     d5e:	f106 0114 	add.w	r1, r6, #20
     d62:	4638      	mov	r0, r7
     d64:	4b19      	ldr	r3, [pc, #100]	; (dcc <modemResponseHandler+0xac>)
     d66:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
     d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
     d6a:	4b19      	ldr	r3, [pc, #100]	; (dd0 <modemResponseHandler+0xb0>)
     d6c:	6818      	ldr	r0, [r3, #0]
     d6e:	4b19      	ldr	r3, [pc, #100]	; (dd4 <modemResponseHandler+0xb4>)
     d70:	4798      	blx	r3
     d72:	b9d0      	cbnz	r0, daa <modemResponseHandler+0x8a>
                {
                	cmdResponse.atCmd = cmd;
     d74:	4e11      	ldr	r6, [pc, #68]	; (dbc <modemResponseHandler+0x9c>)
     d76:	7537      	strb	r7, [r6, #20]
                	cmdResponse.length = length;
     d78:	82f5      	strh	r5, [r6, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
     d7a:	4628      	mov	r0, r5
     d7c:	4b16      	ldr	r3, [pc, #88]	; (dd8 <modemResponseHandler+0xb8>)
     d7e:	4798      	blx	r3
     d80:	61b0      	str	r0, [r6, #24]

                	if(cmdResponse.response != NULL)
     d82:	b1c8      	cbz	r0, db8 <modemResponseHandler+0x98>
                	{
                		memcpy(cmdResponse.response,response,length);
     d84:	462a      	mov	r2, r5
     d86:	4621      	mov	r1, r4
     d88:	4b0f      	ldr	r3, [pc, #60]	; (dc8 <modemResponseHandler+0xa8>)
     d8a:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
     d8c:	2300      	movs	r3, #0
     d8e:	2264      	movs	r2, #100	; 0x64
     d90:	f106 0114 	add.w	r1, r6, #20
     d94:	480e      	ldr	r0, [pc, #56]	; (dd0 <modemResponseHandler+0xb0>)
     d96:	6800      	ldr	r0, [r0, #0]
     d98:	4c10      	ldr	r4, [pc, #64]	; (ddc <modemResponseHandler+0xbc>)
     d9a:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
     d9c:	2801      	cmp	r0, #1
                		{
                			DEBUG_PRINT("Successfully posted connection Response to Queue");
     d9e:	bf0c      	ite	eq
     da0:	480f      	ldreq	r0, [pc, #60]	; (de0 <modemResponseHandler+0xc0>)
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
     da2:	4810      	ldrne	r0, [pc, #64]	; (de4 <modemResponseHandler+0xc4>)
     da4:	4b10      	ldr	r3, [pc, #64]	; (de8 <modemResponseHandler+0xc8>)
     da6:	4798      	blx	r3
     da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
     daa:	4810      	ldr	r0, [pc, #64]	; (dec <modemResponseHandler+0xcc>)
     dac:	4b0e      	ldr	r3, [pc, #56]	; (de8 <modemResponseHandler+0xc8>)
     dae:	4798      	blx	r3
     db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
     db2:	480f      	ldr	r0, [pc, #60]	; (df0 <modemResponseHandler+0xd0>)
     db4:	4b0c      	ldr	r3, [pc, #48]	; (de8 <modemResponseHandler+0xc8>)
     db6:	4798      	blx	r3
     db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dba:	bf00      	nop
     dbc:	20000228 	.word	0x20000228
     dc0:	000003b9 	.word	0x000003b9
     dc4:	000055bf 	.word	0x000055bf
     dc8:	00005575 	.word	0x00005575
     dcc:	00000a51 	.word	0x00000a51
     dd0:	20003440 	.word	0x20003440
     dd4:	000043c9 	.word	0x000043c9
     dd8:	00003955 	.word	0x00003955
     ddc:	00003d51 	.word	0x00003d51
     de0:	00006b04 	.word	0x00006b04
     de4:	00006b38 	.word	0x00006b38
     de8:	00001015 	.word	0x00001015
     dec:	00006b68 	.word	0x00006b68
     df0:	00006b94 	.word	0x00006b94

00000df4 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Apps/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
     df4:	b570      	push	{r4, r5, r6, lr}
     df6:	b086      	sub	sp, #24

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
     df8:	4c12      	ldr	r4, [pc, #72]	; (e44 <ModemRxTask+0x50>)
		
		if(xResult == pdPASS)
		{
			getModemCommandData(atCmd, &cmdData);
     dfa:	4e13      	ldr	r6, [pc, #76]	; (e48 <ModemRxTask+0x54>)
			DEBUG_PRINT("Notification Received to Rx Task from ISR");
     dfc:	4d13      	ldr	r5, [pc, #76]	; (e4c <ModemRxTask+0x58>)
     dfe:	e004      	b.n	e0a <ModemRxTask+0x16>
				DEBUG_PRINT("Successfully Parsed the last command");
				mdmParser_SetLastCmdProcessed(true);
			}
			else
			{
				DEBUG_PRINT("ERROR: Command Parsing Failed");
     e00:	4813      	ldr	r0, [pc, #76]	; (e50 <ModemRxTask+0x5c>)
     e02:	4b14      	ldr	r3, [pc, #80]	; (e54 <ModemRxTask+0x60>)
     e04:	4798      	blx	r3
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
			//DEBUG_PRINT("Notification Not Received to Rx Task");
		}
		kickWatchDog();
     e06:	4b14      	ldr	r3, [pc, #80]	; (e58 <ModemRxTask+0x64>)
     e08:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
     e0a:	f04f 33ff 	mov.w	r3, #4294967295
     e0e:	f10d 0217 	add.w	r2, sp, #23
     e12:	4619      	mov	r1, r3
     e14:	2000      	movs	r0, #0
     e16:	47a0      	blx	r4
		if(xResult == pdPASS)
     e18:	2801      	cmp	r0, #1
     e1a:	d1f4      	bne.n	e06 <ModemRxTask+0x12>
			getModemCommandData(atCmd, &cmdData);
     e1c:	4669      	mov	r1, sp
     e1e:	f89d 0017 	ldrb.w	r0, [sp, #23]
     e22:	47b0      	blx	r6
			DEBUG_PRINT("Notification Received to Rx Task from ISR");
     e24:	4628      	mov	r0, r5
     e26:	4b0b      	ldr	r3, [pc, #44]	; (e54 <ModemRxTask+0x60>)
     e28:	4798      	blx	r3
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
     e2a:	f89d 0000 	ldrb.w	r0, [sp]
     e2e:	4b0b      	ldr	r3, [pc, #44]	; (e5c <ModemRxTask+0x68>)
     e30:	4798      	blx	r3
     e32:	2800      	cmp	r0, #0
     e34:	d0e4      	beq.n	e00 <ModemRxTask+0xc>
				DEBUG_PRINT("Successfully Parsed the last command");
     e36:	480a      	ldr	r0, [pc, #40]	; (e60 <ModemRxTask+0x6c>)
     e38:	4b06      	ldr	r3, [pc, #24]	; (e54 <ModemRxTask+0x60>)
     e3a:	4798      	blx	r3
				mdmParser_SetLastCmdProcessed(true);
     e3c:	2001      	movs	r0, #1
     e3e:	4b09      	ldr	r3, [pc, #36]	; (e64 <ModemRxTask+0x70>)
     e40:	4798      	blx	r3
     e42:	e7e0      	b.n	e06 <ModemRxTask+0x12>
     e44:	00004f8d 	.word	0x00004f8d
     e48:	000003b9 	.word	0x000003b9
     e4c:	00006d34 	.word	0x00006d34
     e50:	00006d88 	.word	0x00006d88
     e54:	00001015 	.word	0x00001015
     e58:	00001191 	.word	0x00001191
     e5c:	000003d9 	.word	0x000003d9
     e60:	00006d60 	.word	0x00006d60
     e64:	000004c9 	.word	0x000004c9

00000e68 <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
     e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e6c:	b086      	sub	sp, #24
	const TickType_t xDelayMs = pdMS_TO_TICKS(1000UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
     e6e:	2300      	movs	r3, #0
     e70:	461a      	mov	r2, r3
     e72:	4619      	mov	r1, r3
     e74:	4822      	ldr	r0, [pc, #136]	; (f00 <ModemTxTask+0x98>)
     e76:	6800      	ldr	r0, [r0, #0]
     e78:	4c22      	ldr	r4, [pc, #136]	; (f04 <ModemTxTask+0x9c>)
     e7a:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     e7c:	4c22      	ldr	r4, [pc, #136]	; (f08 <ModemTxTask+0xa0>)
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemTxTaskSchedule(void)
{
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     e7e:	4d23      	ldr	r5, [pc, #140]	; (f0c <ModemTxTask+0xa4>)
     e80:	4e23      	ldr	r6, [pc, #140]	; (f10 <ModemTxTask+0xa8>)
     e82:	e005      	b.n	e90 <ModemTxTask+0x28>
			kickWatchDog();
     e84:	4b23      	ldr	r3, [pc, #140]	; (f14 <ModemTxTask+0xac>)
     e86:	4798      	blx	r3
			vTaskDelay(xDelayMs);
     e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     e8c:	4b22      	ldr	r3, [pc, #136]	; (f18 <ModemTxTask+0xb0>)
     e8e:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     e90:	47a0      	blx	r4
     e92:	2804      	cmp	r0, #4
     e94:	d1fc      	bne.n	e90 <ModemTxTask+0x28>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     e96:	6828      	ldr	r0, [r5, #0]
     e98:	47b0      	blx	r6
     e9a:	2800      	cmp	r0, #0
     e9c:	d0f2      	beq.n	e84 <ModemTxTask+0x1c>
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     e9e:	2100      	movs	r1, #0
     ea0:	4b17      	ldr	r3, [pc, #92]	; (f00 <ModemTxTask+0x98>)
     ea2:	6818      	ldr	r0, [r3, #0]
     ea4:	4b1d      	ldr	r3, [pc, #116]	; (f1c <ModemTxTask+0xb4>)
     ea6:	4798      	blx	r3
     ea8:	2801      	cmp	r0, #1
     eaa:	d1eb      	bne.n	e84 <ModemTxTask+0x1c>
		{
			xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, portMAX_DELAY );
     eac:	4f1c      	ldr	r7, [pc, #112]	; (f20 <ModemTxTask+0xb8>)
     eae:	f04f 32ff 	mov.w	r2, #4294967295
     eb2:	4639      	mov	r1, r7
     eb4:	6828      	ldr	r0, [r5, #0]
     eb6:	4b1b      	ldr	r3, [pc, #108]	; (f24 <ModemTxTask+0xbc>)
     eb8:	4798      	blx	r3
			ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
     eba:	f897 8001 	ldrb.w	r8, [r7, #1]
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	MODEM_CMD_DATA ModemCmdData;
	getModemCommandData(atCmd, &ModemCmdData);
     ebe:	a901      	add	r1, sp, #4
     ec0:	4640      	mov	r0, r8
     ec2:	4b19      	ldr	r3, [pc, #100]	; (f28 <ModemTxTask+0xc0>)
     ec4:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
     ec6:	4b19      	ldr	r3, [pc, #100]	; (f2c <ModemTxTask+0xc4>)
     ec8:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
     eca:	f89d 100c 	ldrb.w	r1, [sp, #12]
     ece:	9802      	ldr	r0, [sp, #8]
     ed0:	4b17      	ldr	r3, [pc, #92]	; (f30 <ModemTxTask+0xc8>)
     ed2:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
     ed4:	4640      	mov	r0, r8
     ed6:	4b17      	ldr	r3, [pc, #92]	; (f34 <ModemTxTask+0xcc>)
     ed8:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
     eda:	2000      	movs	r0, #0
     edc:	4b16      	ldr	r3, [pc, #88]	; (f38 <ModemTxTask+0xd0>)
     ede:	4798      	blx	r3
			ConsoleDebugPrint("Task ID",AtTxQueueReceivedData.taskID);
     ee0:	7839      	ldrb	r1, [r7, #0]
     ee2:	4816      	ldr	r0, [pc, #88]	; (f3c <ModemTxTask+0xd4>)
     ee4:	4b16      	ldr	r3, [pc, #88]	; (f40 <ModemTxTask+0xd8>)
     ee6:	4798      	blx	r3
			DEBUG_PRINT("Transmitted a command to Modem");
     ee8:	4816      	ldr	r0, [pc, #88]	; (f44 <ModemTxTask+0xdc>)
     eea:	4b17      	ldr	r3, [pc, #92]	; (f48 <ModemTxTask+0xe0>)
     eec:	4798      	blx	r3
			xSemaphoreGive(AtTxQueueLoadSemaphore);
     eee:	2300      	movs	r3, #0
     ef0:	461a      	mov	r2, r3
     ef2:	4619      	mov	r1, r3
     ef4:	4802      	ldr	r0, [pc, #8]	; (f00 <ModemTxTask+0x98>)
     ef6:	6800      	ldr	r0, [r0, #0]
     ef8:	4f02      	ldr	r7, [pc, #8]	; (f04 <ModemTxTask+0x9c>)
     efa:	47b8      	blx	r7
     efc:	e7c2      	b.n	e84 <ModemTxTask+0x1c>
     efe:	bf00      	nop
     f00:	2000346c 	.word	0x2000346c
     f04:	00003d51 	.word	0x00003d51
     f08:	00000af9 	.word	0x00000af9
     f0c:	20003464 	.word	0x20003464
     f10:	000043c9 	.word	0x000043c9
     f14:	00001191 	.word	0x00001191
     f18:	00004a8d 	.word	0x00004a8d
     f1c:	000041e9 	.word	0x000041e9
     f20:	20000504 	.word	0x20000504
     f24:	00004061 	.word	0x00004061
     f28:	000003b9 	.word	0x000003b9
     f2c:	0000082d 	.word	0x0000082d
     f30:	000007b1 	.word	0x000007b1
     f34:	000004d5 	.word	0x000004d5
     f38:	000004c9 	.word	0x000004c9
     f3c:	00006da8 	.word	0x00006da8
     f40:	0000105d 	.word	0x0000105d
     f44:	00006db0 	.word	0x00006db0
     f48:	00001015 	.word	0x00001015

00000f4c <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f50:	4604      	mov	r4, r0
     f52:	460e      	mov	r6, r1
     f54:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     f56:	4d0e      	ldr	r5, [pc, #56]	; (f90 <usart_async_write+0x44>)
     f58:	4620      	mov	r0, r4
     f5a:	47a8      	blx	r5
     f5c:	2800      	cmp	r0, #0
     f5e:	d0fb      	beq.n	f58 <usart_async_write+0xc>
     f60:	3e01      	subs	r6, #1
     f62:	f8df 8030 	ldr.w	r8, [pc, #48]	; f94 <usart_async_write+0x48>
     f66:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     f68:	f8df a02c 	ldr.w	sl, [pc, #44]	; f98 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     f6c:	4d08      	ldr	r5, [pc, #32]	; (f90 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     f6e:	7873      	ldrb	r3, [r6, #1]
     f70:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     f74:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     f78:	4620      	mov	r0, r4
     f7a:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     f7c:	4620      	mov	r0, r4
     f7e:	47a8      	blx	r5
     f80:	2800      	cmp	r0, #0
     f82:	d0fb      	beq.n	f7c <usart_async_write+0x30>
		;
	} while (++offset < length);
     f84:	3701      	adds	r7, #1
     f86:	454f      	cmp	r7, r9
     f88:	d3f1      	bcc.n	f6e <usart_async_write+0x22>

	return (int32_t)offset;
}
     f8a:	4638      	mov	r0, r7
     f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f90:	0000286b 	.word	0x0000286b
     f94:	2000050c 	.word	0x2000050c
     f98:	0000285d 	.word	0x0000285d

00000f9c <SerialDebugTxByteSentCallBack>:
     f9c:	2302      	movs	r3, #2
     f9e:	7603      	strb	r3, [r0, #24]
     fa0:	4770      	bx	lr

00000fa2 <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     fa2:	2380      	movs	r3, #128	; 0x80
     fa4:	7603      	strb	r3, [r0, #24]
     fa6:	4770      	bx	lr

00000fa8 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     fa8:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
     faa:	4c05      	ldr	r4, [pc, #20]	; (fc0 <SerialDebugPrintInit+0x18>)
     fac:	4905      	ldr	r1, [pc, #20]	; (fc4 <SerialDebugPrintInit+0x1c>)
     fae:	4620      	mov	r0, r4
     fb0:	4b05      	ldr	r3, [pc, #20]	; (fc8 <SerialDebugPrintInit+0x20>)
     fb2:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     fb4:	2201      	movs	r2, #1
     fb6:	4611      	mov	r1, r2
     fb8:	4620      	mov	r0, r4
     fba:	4b04      	ldr	r3, [pc, #16]	; (fcc <SerialDebugPrintInit+0x24>)
     fbc:	4798      	blx	r3
     fbe:	bd10      	pop	{r4, pc}
     fc0:	20000040 	.word	0x20000040
     fc4:	43000400 	.word	0x43000400
     fc8:	000027d5 	.word	0x000027d5
     fcc:	00002881 	.word	0x00002881

00000fd0 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	4605      	mov	r5, r0
     fd4:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
     fd6:	4c05      	ldr	r4, [pc, #20]	; (fec <SerialDebugPrint+0x1c>)
     fd8:	4620      	mov	r0, r4
     fda:	4b05      	ldr	r3, [pc, #20]	; (ff0 <SerialDebugPrint+0x20>)
     fdc:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
     fde:	4632      	mov	r2, r6
     fe0:	4629      	mov	r1, r5
     fe2:	4620      	mov	r0, r4
     fe4:	4b03      	ldr	r3, [pc, #12]	; (ff4 <SerialDebugPrint+0x24>)
     fe6:	4798      	blx	r3
     fe8:	bd70      	pop	{r4, r5, r6, pc}
     fea:	bf00      	nop
     fec:	20000040 	.word	0x20000040
     ff0:	00002849 	.word	0x00002849
     ff4:	00000f4d 	.word	0x00000f4d

00000ff8 <SerialDebugTxDoneCallBack>:
{
     ff8:	b510      	push	{r4, lr}
     ffa:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     ffc:	2116      	movs	r1, #22
     ffe:	4803      	ldr	r0, [pc, #12]	; (100c <SerialDebugTxDoneCallBack+0x14>)
    1000:	4b03      	ldr	r3, [pc, #12]	; (1010 <SerialDebugTxDoneCallBack+0x18>)
    1002:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    1004:	2301      	movs	r3, #1
    1006:	7623      	strb	r3, [r4, #24]
    1008:	bd10      	pop	{r4, pc}
    100a:	bf00      	nop
    100c:	00006dd0 	.word	0x00006dd0
    1010:	00000fd1 	.word	0x00000fd1

00001014 <SerialStringPrint>:
}


void SerialStringPrint(const uint8_t *const dataToPrint)
{
    1014:	b510      	push	{r4, lr}
    1016:	b09a      	sub	sp, #104	; 0x68
    1018:	4604      	mov	r4, r0
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
    101a:	2264      	movs	r2, #100	; 0x64
    101c:	2100      	movs	r1, #0
    101e:	a801      	add	r0, sp, #4
    1020:	4b08      	ldr	r3, [pc, #32]	; (1044 <SerialStringPrint+0x30>)
    1022:	4798      	blx	r3
	sprintf((int8_t*)dbgBuffer,"%s %s",dataToPrint,"\r\n");
    1024:	4b08      	ldr	r3, [pc, #32]	; (1048 <SerialStringPrint+0x34>)
    1026:	4622      	mov	r2, r4
    1028:	4908      	ldr	r1, [pc, #32]	; (104c <SerialStringPrint+0x38>)
    102a:	a801      	add	r0, sp, #4
    102c:	4c08      	ldr	r4, [pc, #32]	; (1050 <SerialStringPrint+0x3c>)
    102e:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    1030:	a801      	add	r0, sp, #4
    1032:	4b08      	ldr	r3, [pc, #32]	; (1054 <SerialStringPrint+0x40>)
    1034:	4798      	blx	r3
    1036:	b281      	uxth	r1, r0
    1038:	a801      	add	r0, sp, #4
    103a:	4b07      	ldr	r3, [pc, #28]	; (1058 <SerialStringPrint+0x44>)
    103c:	4798      	blx	r3
}
    103e:	b01a      	add	sp, #104	; 0x68
    1040:	bd10      	pop	{r4, pc}
    1042:	bf00      	nop
    1044:	000055bf 	.word	0x000055bf
    1048:	00006e04 	.word	0x00006e04
    104c:	00006df4 	.word	0x00006df4
    1050:	00005749 	.word	0x00005749
    1054:	000057a1 	.word	0x000057a1
    1058:	00000fd1 	.word	0x00000fd1

0000105c <ConsoleDebugPrint>:

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
    105c:	b530      	push	{r4, r5, lr}
    105e:	b09b      	sub	sp, #108	; 0x6c
    1060:	4605      	mov	r5, r0
    1062:	460c      	mov	r4, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
    1064:	2264      	movs	r2, #100	; 0x64
    1066:	2100      	movs	r1, #0
    1068:	a801      	add	r0, sp, #4
    106a:	4b09      	ldr	r3, [pc, #36]	; (1090 <ConsoleDebugPrint+0x34>)
    106c:	4798      	blx	r3

	if(intData != 0)
    106e:	b90c      	cbnz	r4, 1074 <ConsoleDebugPrint+0x18>
	{
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
	}
}
    1070:	b01b      	add	sp, #108	; 0x6c
    1072:	bd30      	pop	{r4, r5, pc}
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    1074:	4623      	mov	r3, r4
    1076:	462a      	mov	r2, r5
    1078:	4906      	ldr	r1, [pc, #24]	; (1094 <ConsoleDebugPrint+0x38>)
    107a:	a801      	add	r0, sp, #4
    107c:	4c06      	ldr	r4, [pc, #24]	; (1098 <ConsoleDebugPrint+0x3c>)
    107e:	47a0      	blx	r4
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    1080:	a801      	add	r0, sp, #4
    1082:	4b06      	ldr	r3, [pc, #24]	; (109c <ConsoleDebugPrint+0x40>)
    1084:	4798      	blx	r3
    1086:	b281      	uxth	r1, r0
    1088:	a801      	add	r0, sp, #4
    108a:	4b05      	ldr	r3, [pc, #20]	; (10a0 <ConsoleDebugPrint+0x44>)
    108c:	4798      	blx	r3
}
    108e:	e7ef      	b.n	1070 <ConsoleDebugPrint+0x14>
    1090:	000055bf 	.word	0x000055bf
    1094:	00006dfc 	.word	0x00006dfc
    1098:	00005749 	.word	0x00005749
    109c:	000057a1 	.word	0x000057a1
    10a0:	00000fd1 	.word	0x00000fd1

000010a4 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    10a4:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    10a6:	2204      	movs	r2, #4
    10a8:	4b0b      	ldr	r3, [pc, #44]	; (10d8 <SERCOM5_2_Handler+0x34>)
    10aa:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    10ac:	4d0b      	ldr	r5, [pc, #44]	; (10dc <SERCOM5_2_Handler+0x38>)
    10ae:	4c0c      	ldr	r4, [pc, #48]	; (10e0 <SERCOM5_2_Handler+0x3c>)
    10b0:	4628      	mov	r0, r5
    10b2:	47a0      	blx	r4
    10b4:	2800      	cmp	r0, #0
    10b6:	d0fb      	beq.n	10b0 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    10b8:	4808      	ldr	r0, [pc, #32]	; (10dc <SERCOM5_2_Handler+0x38>)
    10ba:	4b0a      	ldr	r3, [pc, #40]	; (10e4 <SERCOM5_2_Handler+0x40>)
    10bc:	4798      	blx	r3
    10be:	490a      	ldr	r1, [pc, #40]	; (10e8 <SERCOM5_2_Handler+0x44>)
    10c0:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    10c2:	2300      	movs	r3, #0
    10c4:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    10c6:	4c09      	ldr	r4, [pc, #36]	; (10ec <SERCOM5_2_Handler+0x48>)
    10c8:	4620      	mov	r0, r4
    10ca:	4b09      	ldr	r3, [pc, #36]	; (10f0 <SERCOM5_2_Handler+0x4c>)
    10cc:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    10ce:	2105      	movs	r1, #5
    10d0:	4620      	mov	r0, r4
    10d2:	4b08      	ldr	r3, [pc, #32]	; (10f4 <SERCOM5_2_Handler+0x50>)
    10d4:	4798      	blx	r3
    10d6:	bd38      	pop	{r3, r4, r5, pc}
    10d8:	43000400 	.word	0x43000400
    10dc:	20000040 	.word	0x20000040
    10e0:	00002875 	.word	0x00002875
    10e4:	00002863 	.word	0x00002863
    10e8:	20003c8c 	.word	0x20003c8c
    10ec:	20003c90 	.word	0x20003c90
    10f0:	00005791 	.word	0x00005791
    10f4:	00000fd1 	.word	0x00000fd1

000010f8 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    10f8:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    10fa:	4b0a      	ldr	r3, [pc, #40]	; (1124 <configureWatchDogTimeOut+0x2c>)
    10fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1100:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    1102:	4c09      	ldr	r4, [pc, #36]	; (1128 <configureWatchDogTimeOut+0x30>)
    1104:	6820      	ldr	r0, [r4, #0]
    1106:	2279      	movs	r2, #121	; 0x79
    1108:	4908      	ldr	r1, [pc, #32]	; (112c <configureWatchDogTimeOut+0x34>)
    110a:	3000      	adds	r0, #0
    110c:	bf18      	it	ne
    110e:	2001      	movne	r0, #1
    1110:	4b07      	ldr	r3, [pc, #28]	; (1130 <configureWatchDogTimeOut+0x38>)
    1112:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    1114:	462a      	mov	r2, r5
    1116:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    111a:	4620      	mov	r0, r4
    111c:	4b05      	ldr	r3, [pc, #20]	; (1134 <configureWatchDogTimeOut+0x3c>)
    111e:	4798      	blx	r3
    1120:	bd38      	pop	{r3, r4, r5, pc}
    1122:	bf00      	nop
    1124:	2000005c 	.word	0x2000005c
    1128:	20003d6c 	.word	0x20003d6c
    112c:	00006e08 	.word	0x00006e08
    1130:	00001d55 	.word	0x00001d55
    1134:	00003221 	.word	0x00003221

00001138 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    1138:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    113a:	2002      	movs	r0, #2
    113c:	4b07      	ldr	r3, [pc, #28]	; (115c <enableWatchDogTimer+0x24>)
    113e:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1140:	4c07      	ldr	r4, [pc, #28]	; (1160 <enableWatchDogTimer+0x28>)
    1142:	6820      	ldr	r0, [r4, #0]
    1144:	2296      	movs	r2, #150	; 0x96
    1146:	4907      	ldr	r1, [pc, #28]	; (1164 <enableWatchDogTimer+0x2c>)
    1148:	3000      	adds	r0, #0
    114a:	bf18      	it	ne
    114c:	2001      	movne	r0, #1
    114e:	4b06      	ldr	r3, [pc, #24]	; (1168 <enableWatchDogTimer+0x30>)
    1150:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    1152:	4620      	mov	r0, r4
    1154:	4b05      	ldr	r3, [pc, #20]	; (116c <enableWatchDogTimer+0x34>)
    1156:	4798      	blx	r3
    1158:	bd10      	pop	{r4, pc}
    115a:	bf00      	nop
    115c:	000010f9 	.word	0x000010f9
    1160:	20003d6c 	.word	0x20003d6c
    1164:	00006e08 	.word	0x00006e08
    1168:	00001d55 	.word	0x00001d55
    116c:	0000333d 	.word	0x0000333d

00001170 <atmel_start_init>:
{
    1170:	b508      	push	{r3, lr}
    system_init();
    1172:	4b04      	ldr	r3, [pc, #16]	; (1184 <atmel_start_init+0x14>)
    1174:	4798      	blx	r3
    delay_ms(1000);
    1176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    117a:	4b03      	ldr	r3, [pc, #12]	; (1188 <atmel_start_init+0x18>)
    117c:	4798      	blx	r3
    enableWatchDogTimer();
    117e:	4b03      	ldr	r3, [pc, #12]	; (118c <atmel_start_init+0x1c>)
    1180:	4798      	blx	r3
    1182:	bd08      	pop	{r3, pc}
    1184:	0000190d 	.word	0x0000190d
    1188:	00001afd 	.word	0x00001afd
    118c:	00001139 	.word	0x00001139

00001190 <kickWatchDog>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
int32_t kickWatchDog(void)
{	
    1190:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1192:	4c06      	ldr	r4, [pc, #24]	; (11ac <kickWatchDog+0x1c>)
    1194:	6820      	ldr	r0, [r4, #0]
    1196:	22b3      	movs	r2, #179	; 0xb3
    1198:	4905      	ldr	r1, [pc, #20]	; (11b0 <kickWatchDog+0x20>)
    119a:	3000      	adds	r0, #0
    119c:	bf18      	it	ne
    119e:	2001      	movne	r0, #1
    11a0:	4b04      	ldr	r3, [pc, #16]	; (11b4 <kickWatchDog+0x24>)
    11a2:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    11a4:	4620      	mov	r0, r4
    11a6:	4b04      	ldr	r3, [pc, #16]	; (11b8 <kickWatchDog+0x28>)
    11a8:	4798      	blx	r3
		status = ERR_DENIED;
		//DEBUG_PRINT("Not able to Kick WDT");
	}

	return status;
}
    11aa:	bd10      	pop	{r4, pc}
    11ac:	20003d6c 	.word	0x20003d6c
    11b0:	00006e08 	.word	0x00006e08
    11b4:	00001d55 	.word	0x00001d55
    11b8:	00003379 	.word	0x00003379

000011bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    11bc:	e7fe      	b.n	11bc <Dummy_Handler>
	...

000011c0 <Reset_Handler>:
{
    11c0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    11c2:	4b1c      	ldr	r3, [pc, #112]	; (1234 <Reset_Handler+0x74>)
    11c4:	4a1c      	ldr	r2, [pc, #112]	; (1238 <Reset_Handler+0x78>)
    11c6:	429a      	cmp	r2, r3
    11c8:	d010      	beq.n	11ec <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    11ca:	4b1c      	ldr	r3, [pc, #112]	; (123c <Reset_Handler+0x7c>)
    11cc:	4a19      	ldr	r2, [pc, #100]	; (1234 <Reset_Handler+0x74>)
    11ce:	429a      	cmp	r2, r3
    11d0:	d20c      	bcs.n	11ec <Reset_Handler+0x2c>
    11d2:	3b01      	subs	r3, #1
    11d4:	1a9b      	subs	r3, r3, r2
    11d6:	f023 0303 	bic.w	r3, r3, #3
    11da:	3304      	adds	r3, #4
    11dc:	4413      	add	r3, r2
    11de:	4916      	ldr	r1, [pc, #88]	; (1238 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    11e0:	f851 0b04 	ldr.w	r0, [r1], #4
    11e4:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    11e8:	429a      	cmp	r2, r3
    11ea:	d1f9      	bne.n	11e0 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    11ec:	4b14      	ldr	r3, [pc, #80]	; (1240 <Reset_Handler+0x80>)
    11ee:	4a15      	ldr	r2, [pc, #84]	; (1244 <Reset_Handler+0x84>)
    11f0:	429a      	cmp	r2, r3
    11f2:	d20a      	bcs.n	120a <Reset_Handler+0x4a>
    11f4:	3b01      	subs	r3, #1
    11f6:	1a9b      	subs	r3, r3, r2
    11f8:	f023 0303 	bic.w	r3, r3, #3
    11fc:	3304      	adds	r3, #4
    11fe:	4413      	add	r3, r2
                *pDest++ = 0;
    1200:	2100      	movs	r1, #0
    1202:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1206:	4293      	cmp	r3, r2
    1208:	d1fb      	bne.n	1202 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    120a:	4b0f      	ldr	r3, [pc, #60]	; (1248 <Reset_Handler+0x88>)
    120c:	4a0f      	ldr	r2, [pc, #60]	; (124c <Reset_Handler+0x8c>)
    120e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1212:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    1214:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1218:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    121c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1220:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1224:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    1228:	4b09      	ldr	r3, [pc, #36]	; (1250 <Reset_Handler+0x90>)
    122a:	4798      	blx	r3
        main();
    122c:	4b09      	ldr	r3, [pc, #36]	; (1254 <Reset_Handler+0x94>)
    122e:	4798      	blx	r3
    1230:	e7fe      	b.n	1230 <Reset_Handler+0x70>
    1232:	bf00      	nop
    1234:	20000000 	.word	0x20000000
    1238:	00007560 	.word	0x00007560
    123c:	2000018c 	.word	0x2000018c
    1240:	20003e58 	.word	0x20003e58
    1244:	20000190 	.word	0x20000190
    1248:	e000ed00 	.word	0xe000ed00
    124c:	00000000 	.word	0x00000000
    1250:	0000552d 	.word	0x0000552d
    1254:	00003431 	.word	0x00003431

00001258 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
    1258:	4a04      	ldr	r2, [pc, #16]	; (126c <AC_0_CLOCK_init+0x14>)
    125a:	69d3      	ldr	r3, [r2, #28]
    125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1260:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1262:	2240      	movs	r2, #64	; 0x40
    1264:	4b02      	ldr	r3, [pc, #8]	; (1270 <AC_0_CLOCK_init+0x18>)
    1266:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    126a:	4770      	bx	lr
    126c:	40000800 	.word	0x40000800
    1270:	40001c00 	.word	0x40001c00

00001274 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
    1274:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
    1276:	4b03      	ldr	r3, [pc, #12]	; (1284 <AC_0_init+0x10>)
    1278:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
    127a:	4903      	ldr	r1, [pc, #12]	; (1288 <AC_0_init+0x14>)
    127c:	4803      	ldr	r0, [pc, #12]	; (128c <AC_0_init+0x18>)
    127e:	4b04      	ldr	r3, [pc, #16]	; (1290 <AC_0_init+0x1c>)
    1280:	4798      	blx	r3
    1282:	bd08      	pop	{r3, pc}
    1284:	00001259 	.word	0x00001259
    1288:	42002000 	.word	0x42002000
    128c:	20003d38 	.word	0x20003d38
    1290:	00001a2d 	.word	0x00001a2d

00001294 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1294:	4b5d      	ldr	r3, [pc, #372]	; (140c <ADC_0_PORT_init+0x178>)
    1296:	2204      	movs	r2, #4
    1298:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    129a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    129e:	629a      	str	r2, [r3, #40]	; 0x28
    12a0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    12a4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12a6:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    12aa:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12ae:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12b2:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12b6:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    12ba:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    12be:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12c2:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12c6:	2108      	movs	r1, #8
    12c8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12ca:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    12ce:	6299      	str	r1, [r3, #40]	; 0x28
    12d0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12d2:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    12d6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12da:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12de:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12e2:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    12e6:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    12ea:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12ee:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12f2:	f44f 7180 	mov.w	r1, #256	; 0x100
    12f6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    12fe:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1302:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1306:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    130a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    130e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1312:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1316:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    131a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    131e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1322:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1326:	f44f 7100 	mov.w	r1, #512	; 0x200
    132a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    132e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1332:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1336:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    133a:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    133e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1342:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1346:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    134a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    134e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1352:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1356:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    135a:	2110      	movs	r1, #16
    135c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    135e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1362:	6299      	str	r1, [r3, #40]	; 0x28
    1364:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1366:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    136a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    136e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1372:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1376:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    137a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    137e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1382:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1386:	2120      	movs	r1, #32
    1388:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    138a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    138e:	6299      	str	r1, [r3, #40]	; 0x28
    1390:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1392:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    1396:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    139a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    139e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13a2:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    13a6:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    13aa:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13ae:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13b2:	2140      	movs	r1, #64	; 0x40
    13b4:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13b6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    13ba:	6299      	str	r1, [r3, #40]	; 0x28
    13bc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13be:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    13c2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13c6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13ca:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13ce:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    13d2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    13d6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13da:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13de:	2180      	movs	r1, #128	; 0x80
    13e0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13e2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    13e6:	6299      	str	r1, [r3, #40]	; 0x28
    13e8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13ea:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    13ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13fa:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    13fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1402:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1406:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    140a:	4770      	bx	lr
    140c:	41008000 	.word	0x41008000

00001410 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    1410:	4a04      	ldr	r2, [pc, #16]	; (1424 <ADC_0_CLOCK_init+0x14>)
    1412:	6a13      	ldr	r3, [r2, #32]
    1414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1418:	6213      	str	r3, [r2, #32]
    141a:	2241      	movs	r2, #65	; 0x41
    141c:	4b02      	ldr	r3, [pc, #8]	; (1428 <ADC_0_CLOCK_init+0x18>)
    141e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    1422:	4770      	bx	lr
    1424:	40000800 	.word	0x40000800
    1428:	40001c00 	.word	0x40001c00

0000142c <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    142c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    142e:	4b05      	ldr	r3, [pc, #20]	; (1444 <ADC_0_init+0x18>)
    1430:	4798      	blx	r3
	ADC_0_PORT_init();
    1432:	4b05      	ldr	r3, [pc, #20]	; (1448 <ADC_0_init+0x1c>)
    1434:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    1436:	2200      	movs	r2, #0
    1438:	4904      	ldr	r1, [pc, #16]	; (144c <ADC_0_init+0x20>)
    143a:	4805      	ldr	r0, [pc, #20]	; (1450 <ADC_0_init+0x24>)
    143c:	4b05      	ldr	r3, [pc, #20]	; (1454 <ADC_0_init+0x28>)
    143e:	4798      	blx	r3
    1440:	bd08      	pop	{r3, pc}
    1442:	bf00      	nop
    1444:	00001411 	.word	0x00001411
    1448:	00001295 	.word	0x00001295
    144c:	43001c00 	.word	0x43001c00
    1450:	20003d48 	.word	0x20003d48
    1454:	00001a5d 	.word	0x00001a5d

00001458 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    1458:	4a04      	ldr	r2, [pc, #16]	; (146c <ADC_1_CLOCK_init+0x14>)
    145a:	6a13      	ldr	r3, [r2, #32]
    145c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1460:	6213      	str	r3, [r2, #32]
    1462:	2240      	movs	r2, #64	; 0x40
    1464:	4b02      	ldr	r3, [pc, #8]	; (1470 <ADC_1_CLOCK_init+0x18>)
    1466:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    146a:	4770      	bx	lr
    146c:	40000800 	.word	0x40000800
    1470:	40001c00 	.word	0x40001c00

00001474 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
    1474:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
    1476:	4b04      	ldr	r3, [pc, #16]	; (1488 <ADC_1_init+0x14>)
    1478:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
    147a:	2200      	movs	r2, #0
    147c:	4903      	ldr	r1, [pc, #12]	; (148c <ADC_1_init+0x18>)
    147e:	4804      	ldr	r0, [pc, #16]	; (1490 <ADC_1_init+0x1c>)
    1480:	4b04      	ldr	r3, [pc, #16]	; (1494 <ADC_1_init+0x20>)
    1482:	4798      	blx	r3
    1484:	bd08      	pop	{r3, pc}
    1486:	bf00      	nop
    1488:	00001459 	.word	0x00001459
    148c:	43002000 	.word	0x43002000
    1490:	20003e00 	.word	0x20003e00
    1494:	00001a5d 	.word	0x00001a5d

00001498 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    1498:	4a04      	ldr	r2, [pc, #16]	; (14ac <DAC_0_CLOCK_init+0x14>)
    149a:	6a13      	ldr	r3, [r2, #32]
    149c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    14a0:	6213      	str	r3, [r2, #32]
    14a2:	2240      	movs	r2, #64	; 0x40
    14a4:	4b02      	ldr	r3, [pc, #8]	; (14b0 <DAC_0_CLOCK_init+0x18>)
    14a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    14aa:	4770      	bx	lr
    14ac:	40000800 	.word	0x40000800
    14b0:	40001c00 	.word	0x40001c00

000014b4 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    14b4:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    14b6:	4b03      	ldr	r3, [pc, #12]	; (14c4 <DAC_0_init+0x10>)
    14b8:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    14ba:	4903      	ldr	r1, [pc, #12]	; (14c8 <DAC_0_init+0x14>)
    14bc:	4803      	ldr	r0, [pc, #12]	; (14cc <DAC_0_init+0x18>)
    14be:	4b04      	ldr	r3, [pc, #16]	; (14d0 <DAC_0_init+0x1c>)
    14c0:	4798      	blx	r3
    14c2:	bd08      	pop	{r3, pc}
    14c4:	00001499 	.word	0x00001499
    14c8:	43002400 	.word	0x43002400
    14cc:	20003d70 	.word	0x20003d70
    14d0:	00001aa9 	.word	0x00001aa9

000014d4 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    14d4:	b508      	push	{r3, lr}
    14d6:	2240      	movs	r2, #64	; 0x40
    14d8:	4b05      	ldr	r3, [pc, #20]	; (14f0 <EXTERNAL_IRQ_0_init+0x1c>)
    14da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    14de:	4a05      	ldr	r2, [pc, #20]	; (14f4 <EXTERNAL_IRQ_0_init+0x20>)
    14e0:	6953      	ldr	r3, [r2, #20]
    14e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    14e6:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    14e8:	4b03      	ldr	r3, [pc, #12]	; (14f8 <EXTERNAL_IRQ_0_init+0x24>)
    14ea:	4798      	blx	r3
    14ec:	bd08      	pop	{r3, pc}
    14ee:	bf00      	nop
    14f0:	40001c00 	.word	0x40001c00
    14f4:	40000800 	.word	0x40000800
    14f8:	00001b61 	.word	0x00001b61

000014fc <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    14fc:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    14fe:	4a04      	ldr	r2, [pc, #16]	; (1510 <EVENT_SYSTEM_0_init+0x14>)
    1500:	6993      	ldr	r3, [r2, #24]
    1502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1506:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    1508:	4b02      	ldr	r3, [pc, #8]	; (1514 <EVENT_SYSTEM_0_init+0x18>)
    150a:	4798      	blx	r3
    150c:	bd08      	pop	{r3, pc}
    150e:	bf00      	nop
    1510:	40000800 	.word	0x40000800
    1514:	00001b1d 	.word	0x00001b1d

00001518 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    1518:	4a02      	ldr	r2, [pc, #8]	; (1524 <FLASH_0_CLOCK_init+0xc>)
    151a:	6913      	ldr	r3, [r2, #16]
    151c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1520:	6113      	str	r3, [r2, #16]
    1522:	4770      	bx	lr
    1524:	40000800 	.word	0x40000800

00001528 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    1528:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    152a:	4b03      	ldr	r3, [pc, #12]	; (1538 <FLASH_0_init+0x10>)
    152c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    152e:	4903      	ldr	r1, [pc, #12]	; (153c <FLASH_0_init+0x14>)
    1530:	4803      	ldr	r0, [pc, #12]	; (1540 <FLASH_0_init+0x18>)
    1532:	4b04      	ldr	r3, [pc, #16]	; (1544 <FLASH_0_init+0x1c>)
    1534:	4798      	blx	r3
    1536:	bd08      	pop	{r3, pc}
    1538:	00001519 	.word	0x00001519
    153c:	41004000 	.word	0x41004000
    1540:	20003cfc 	.word	0x20003cfc
    1544:	00001b99 	.word	0x00001b99

00001548 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1548:	4b10      	ldr	r3, [pc, #64]	; (158c <ModemData_PORT_init+0x44>)
    154a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    154e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1552:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    155a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    155e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1562:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1566:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    156a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    156e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1572:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1576:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    157a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    157e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1582:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1586:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    158a:	4770      	bx	lr
    158c:	41008000 	.word	0x41008000

00001590 <ModemData_CLOCK_init>:
    1590:	4b06      	ldr	r3, [pc, #24]	; (15ac <ModemData_CLOCK_init+0x1c>)
    1592:	2240      	movs	r2, #64	; 0x40
    1594:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    1598:	224a      	movs	r2, #74	; 0x4a
    159a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    159e:	4a04      	ldr	r2, [pc, #16]	; (15b0 <ModemData_CLOCK_init+0x20>)
    15a0:	6993      	ldr	r3, [r2, #24]
    15a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    15a6:	6193      	str	r3, [r2, #24]
    15a8:	4770      	bx	lr
    15aa:	bf00      	nop
    15ac:	40001c00 	.word	0x40001c00
    15b0:	40000800 	.word	0x40000800

000015b4 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    15b4:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    15b6:	4b03      	ldr	r3, [pc, #12]	; (15c4 <ModemData_init+0x10>)
    15b8:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    15ba:	4b03      	ldr	r3, [pc, #12]	; (15c8 <ModemData_init+0x14>)
    15bc:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    15be:	4b03      	ldr	r3, [pc, #12]	; (15cc <ModemData_init+0x18>)
    15c0:	4798      	blx	r3
    15c2:	bd08      	pop	{r3, pc}
    15c4:	00001591 	.word	0x00001591
    15c8:	00000675 	.word	0x00000675
    15cc:	00001549 	.word	0x00001549

000015d0 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    15d0:	4b10      	ldr	r3, [pc, #64]	; (1614 <SerialDebug_PORT_init+0x44>)
    15d2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    15d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    15da:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    15de:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    15e2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    15e6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    15ea:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    15ee:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    15f2:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    15f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    15fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    15fe:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1602:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1606:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    160a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    160e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    1612:	4770      	bx	lr
    1614:	41008000 	.word	0x41008000

00001618 <SerialDebug_CLOCK_init>:
    1618:	4b06      	ldr	r3, [pc, #24]	; (1634 <SerialDebug_CLOCK_init+0x1c>)
    161a:	2240      	movs	r2, #64	; 0x40
    161c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    1620:	224a      	movs	r2, #74	; 0x4a
    1622:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1626:	4a04      	ldr	r2, [pc, #16]	; (1638 <SerialDebug_CLOCK_init+0x20>)
    1628:	6a13      	ldr	r3, [r2, #32]
    162a:	f043 0302 	orr.w	r3, r3, #2
    162e:	6213      	str	r3, [r2, #32]
    1630:	4770      	bx	lr
    1632:	bf00      	nop
    1634:	40001c00 	.word	0x40001c00
    1638:	40000800 	.word	0x40000800

0000163c <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    163c:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    163e:	4b03      	ldr	r3, [pc, #12]	; (164c <SerialDebug_init+0x10>)
    1640:	4798      	blx	r3
	SerialDebugPrintInit();
    1642:	4b03      	ldr	r3, [pc, #12]	; (1650 <SerialDebug_init+0x14>)
    1644:	4798      	blx	r3
	SerialDebug_PORT_init();
    1646:	4b03      	ldr	r3, [pc, #12]	; (1654 <SerialDebug_init+0x18>)
    1648:	4798      	blx	r3
    164a:	bd08      	pop	{r3, pc}
    164c:	00001619 	.word	0x00001619
    1650:	00000fa9 	.word	0x00000fa9
    1654:	000015d1 	.word	0x000015d1

00001658 <delay_driver_init>:
}

void delay_driver_init(void)
{
    1658:	b508      	push	{r3, lr}
	delay_init(SysTick);
    165a:	4802      	ldr	r0, [pc, #8]	; (1664 <delay_driver_init+0xc>)
    165c:	4b02      	ldr	r3, [pc, #8]	; (1668 <delay_driver_init+0x10>)
    165e:	4798      	blx	r3
    1660:	bd08      	pop	{r3, pc}
    1662:	bf00      	nop
    1664:	e000e010 	.word	0xe000e010
    1668:	00001ae9 	.word	0x00001ae9

0000166c <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    166c:	4a04      	ldr	r2, [pc, #16]	; (1680 <PWM_0_CLOCK_init+0x14>)
    166e:	6953      	ldr	r3, [r2, #20]
    1670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1674:	6153      	str	r3, [r2, #20]
    1676:	2240      	movs	r2, #64	; 0x40
    1678:	4b02      	ldr	r3, [pc, #8]	; (1684 <PWM_0_CLOCK_init+0x18>)
    167a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    167e:	4770      	bx	lr
    1680:	40000800 	.word	0x40000800
    1684:	40001c00 	.word	0x40001c00

00001688 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    1688:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    168a:	4b05      	ldr	r3, [pc, #20]	; (16a0 <PWM_0_init+0x18>)
    168c:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    168e:	4b05      	ldr	r3, [pc, #20]	; (16a4 <PWM_0_init+0x1c>)
    1690:	4798      	blx	r3
    1692:	4602      	mov	r2, r0
    1694:	4904      	ldr	r1, [pc, #16]	; (16a8 <PWM_0_init+0x20>)
    1696:	4805      	ldr	r0, [pc, #20]	; (16ac <PWM_0_init+0x24>)
    1698:	4b05      	ldr	r3, [pc, #20]	; (16b0 <PWM_0_init+0x28>)
    169a:	4798      	blx	r3
    169c:	bd08      	pop	{r3, pc}
    169e:	bf00      	nop
    16a0:	0000166d 	.word	0x0000166d
    16a4:	00003139 	.word	0x00003139
    16a8:	40003800 	.word	0x40003800
    16ac:	20003cc4 	.word	0x20003cc4
    16b0:	00001bf5 	.word	0x00001bf5

000016b4 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    16b4:	4a04      	ldr	r2, [pc, #16]	; (16c8 <PWM_1_CLOCK_init+0x14>)
    16b6:	6953      	ldr	r3, [r2, #20]
    16b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    16bc:	6153      	str	r3, [r2, #20]
    16be:	2240      	movs	r2, #64	; 0x40
    16c0:	4b02      	ldr	r3, [pc, #8]	; (16cc <PWM_1_CLOCK_init+0x18>)
    16c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    16c6:	4770      	bx	lr
    16c8:	40000800 	.word	0x40000800
    16cc:	40001c00 	.word	0x40001c00

000016d0 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    16d0:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    16d2:	4b05      	ldr	r3, [pc, #20]	; (16e8 <PWM_1_init+0x18>)
    16d4:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    16d6:	4b05      	ldr	r3, [pc, #20]	; (16ec <PWM_1_init+0x1c>)
    16d8:	4798      	blx	r3
    16da:	4602      	mov	r2, r0
    16dc:	4904      	ldr	r1, [pc, #16]	; (16f0 <PWM_1_init+0x20>)
    16de:	4805      	ldr	r0, [pc, #20]	; (16f4 <PWM_1_init+0x24>)
    16e0:	4b05      	ldr	r3, [pc, #20]	; (16f8 <PWM_1_init+0x28>)
    16e2:	4798      	blx	r3
    16e4:	bd08      	pop	{r3, pc}
    16e6:	bf00      	nop
    16e8:	000016b5 	.word	0x000016b5
    16ec:	00003139 	.word	0x00003139
    16f0:	40003c00 	.word	0x40003c00
    16f4:	20003de4 	.word	0x20003de4
    16f8:	00001bf5 	.word	0x00001bf5

000016fc <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    16fc:	4a04      	ldr	r2, [pc, #16]	; (1710 <PWM_2_CLOCK_init+0x14>)
    16fe:	6993      	ldr	r3, [r2, #24]
    1700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1704:	6193      	str	r3, [r2, #24]
    1706:	2240      	movs	r2, #64	; 0x40
    1708:	4b02      	ldr	r3, [pc, #8]	; (1714 <PWM_2_CLOCK_init+0x18>)
    170a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    170e:	4770      	bx	lr
    1710:	40000800 	.word	0x40000800
    1714:	40001c00 	.word	0x40001c00

00001718 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    1718:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    171a:	4b05      	ldr	r3, [pc, #20]	; (1730 <PWM_2_init+0x18>)
    171c:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    171e:	4b05      	ldr	r3, [pc, #20]	; (1734 <PWM_2_init+0x1c>)
    1720:	4798      	blx	r3
    1722:	4602      	mov	r2, r0
    1724:	4904      	ldr	r1, [pc, #16]	; (1738 <PWM_2_init+0x20>)
    1726:	4805      	ldr	r0, [pc, #20]	; (173c <PWM_2_init+0x24>)
    1728:	4b05      	ldr	r3, [pc, #20]	; (1740 <PWM_2_init+0x28>)
    172a:	4798      	blx	r3
    172c:	bd08      	pop	{r3, pc}
    172e:	bf00      	nop
    1730:	000016fd 	.word	0x000016fd
    1734:	00003139 	.word	0x00003139
    1738:	4101a000 	.word	0x4101a000
    173c:	20003ce0 	.word	0x20003ce0
    1740:	00001bf5 	.word	0x00001bf5

00001744 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1744:	4a04      	ldr	r2, [pc, #16]	; (1758 <TIMER_3_CLOCK_init+0x14>)
    1746:	6993      	ldr	r3, [r2, #24]
    1748:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    174c:	6193      	str	r3, [r2, #24]
    174e:	2240      	movs	r2, #64	; 0x40
    1750:	4b02      	ldr	r3, [pc, #8]	; (175c <TIMER_3_CLOCK_init+0x18>)
    1752:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    1756:	4770      	bx	lr
    1758:	40000800 	.word	0x40000800
    175c:	40001c00 	.word	0x40001c00

00001760 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    1760:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    1762:	4b05      	ldr	r3, [pc, #20]	; (1778 <TIMER_3_init+0x18>)
    1764:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    1766:	4b05      	ldr	r3, [pc, #20]	; (177c <TIMER_3_init+0x1c>)
    1768:	4798      	blx	r3
    176a:	4602      	mov	r2, r0
    176c:	4904      	ldr	r1, [pc, #16]	; (1780 <TIMER_3_init+0x20>)
    176e:	4805      	ldr	r0, [pc, #20]	; (1784 <TIMER_3_init+0x24>)
    1770:	4b05      	ldr	r3, [pc, #20]	; (1788 <TIMER_3_init+0x28>)
    1772:	4798      	blx	r3
    1774:	bd08      	pop	{r3, pc}
    1776:	bf00      	nop
    1778:	00001745 	.word	0x00001745
    177c:	00002bf1 	.word	0x00002bf1
    1780:	41016000 	.word	0x41016000
    1784:	20003e04 	.word	0x20003e04
    1788:	00001d11 	.word	0x00001d11

0000178c <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    178c:	4a04      	ldr	r2, [pc, #16]	; (17a0 <TIMER_4_CLOCK_init+0x14>)
    178e:	6993      	ldr	r3, [r2, #24]
    1790:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1794:	6193      	str	r3, [r2, #24]
    1796:	2240      	movs	r2, #64	; 0x40
    1798:	4b02      	ldr	r3, [pc, #8]	; (17a4 <TIMER_4_CLOCK_init+0x18>)
    179a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    179e:	4770      	bx	lr
    17a0:	40000800 	.word	0x40000800
    17a4:	40001c00 	.word	0x40001c00

000017a8 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    17a8:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    17aa:	4b05      	ldr	r3, [pc, #20]	; (17c0 <TIMER_4_init+0x18>)
    17ac:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    17ae:	4b05      	ldr	r3, [pc, #20]	; (17c4 <TIMER_4_init+0x1c>)
    17b0:	4798      	blx	r3
    17b2:	4602      	mov	r2, r0
    17b4:	4904      	ldr	r1, [pc, #16]	; (17c8 <TIMER_4_init+0x20>)
    17b6:	4805      	ldr	r0, [pc, #20]	; (17cc <TIMER_4_init+0x24>)
    17b8:	4b05      	ldr	r3, [pc, #20]	; (17d0 <TIMER_4_init+0x28>)
    17ba:	4798      	blx	r3
    17bc:	bd08      	pop	{r3, pc}
    17be:	bf00      	nop
    17c0:	0000178d 	.word	0x0000178d
    17c4:	00002bf1 	.word	0x00002bf1
    17c8:	41018000 	.word	0x41018000
    17cc:	20003d4c 	.word	0x20003d4c
    17d0:	00001d11 	.word	0x00001d11

000017d4 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    17d4:	4a04      	ldr	r2, [pc, #16]	; (17e8 <TIMER_5_CLOCK_init+0x14>)
    17d6:	69d3      	ldr	r3, [r2, #28]
    17d8:	f043 0308 	orr.w	r3, r3, #8
    17dc:	61d3      	str	r3, [r2, #28]
    17de:	2240      	movs	r2, #64	; 0x40
    17e0:	4b02      	ldr	r3, [pc, #8]	; (17ec <TIMER_5_CLOCK_init+0x18>)
    17e2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    17e6:	4770      	bx	lr
    17e8:	40000800 	.word	0x40000800
    17ec:	40001c00 	.word	0x40001c00

000017f0 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    17f0:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    17f2:	4b05      	ldr	r3, [pc, #20]	; (1808 <TIMER_5_init+0x18>)
    17f4:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    17f6:	4b05      	ldr	r3, [pc, #20]	; (180c <TIMER_5_init+0x1c>)
    17f8:	4798      	blx	r3
    17fa:	4602      	mov	r2, r0
    17fc:	4904      	ldr	r1, [pc, #16]	; (1810 <TIMER_5_init+0x20>)
    17fe:	4805      	ldr	r0, [pc, #20]	; (1814 <TIMER_5_init+0x24>)
    1800:	4b05      	ldr	r3, [pc, #20]	; (1818 <TIMER_5_init+0x28>)
    1802:	4798      	blx	r3
    1804:	bd08      	pop	{r3, pc}
    1806:	bf00      	nop
    1808:	000017d5 	.word	0x000017d5
    180c:	00002bf1 	.word	0x00002bf1
    1810:	42000c00 	.word	0x42000c00
    1814:	20003da4 	.word	0x20003da4
    1818:	00001d11 	.word	0x00001d11

0000181c <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    181c:	4a04      	ldr	r2, [pc, #16]	; (1830 <TIMER_6_CLOCK_init+0x14>)
    181e:	69d3      	ldr	r3, [r2, #28]
    1820:	f043 0310 	orr.w	r3, r3, #16
    1824:	61d3      	str	r3, [r2, #28]
    1826:	2240      	movs	r2, #64	; 0x40
    1828:	4b02      	ldr	r3, [pc, #8]	; (1834 <TIMER_6_CLOCK_init+0x18>)
    182a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    182e:	4770      	bx	lr
    1830:	40000800 	.word	0x40000800
    1834:	40001c00 	.word	0x40001c00

00001838 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    1838:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    183a:	4b05      	ldr	r3, [pc, #20]	; (1850 <TIMER_6_init+0x18>)
    183c:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    183e:	4b05      	ldr	r3, [pc, #20]	; (1854 <TIMER_6_init+0x1c>)
    1840:	4798      	blx	r3
    1842:	4602      	mov	r2, r0
    1844:	4904      	ldr	r1, [pc, #16]	; (1858 <TIMER_6_init+0x20>)
    1846:	4805      	ldr	r0, [pc, #20]	; (185c <TIMER_6_init+0x24>)
    1848:	4b05      	ldr	r3, [pc, #20]	; (1860 <TIMER_6_init+0x28>)
    184a:	4798      	blx	r3
    184c:	bd08      	pop	{r3, pc}
    184e:	bf00      	nop
    1850:	0000181d 	.word	0x0000181d
    1854:	00002bf1 	.word	0x00002bf1
    1858:	42001000 	.word	0x42001000
    185c:	20003dc4 	.word	0x20003dc4
    1860:	00001d11 	.word	0x00001d11

00001864 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    1864:	4a04      	ldr	r2, [pc, #16]	; (1878 <TIMER_7_CLOCK_init+0x14>)
    1866:	6a13      	ldr	r3, [r2, #32]
    1868:	f043 0310 	orr.w	r3, r3, #16
    186c:	6213      	str	r3, [r2, #32]
    186e:	2240      	movs	r2, #64	; 0x40
    1870:	4b02      	ldr	r3, [pc, #8]	; (187c <TIMER_7_CLOCK_init+0x18>)
    1872:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1876:	4770      	bx	lr
    1878:	40000800 	.word	0x40000800
    187c:	40001c00 	.word	0x40001c00

00001880 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    1880:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    1882:	4b05      	ldr	r3, [pc, #20]	; (1898 <TIMER_7_init+0x18>)
    1884:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    1886:	4b05      	ldr	r3, [pc, #20]	; (189c <TIMER_7_init+0x1c>)
    1888:	4798      	blx	r3
    188a:	4602      	mov	r2, r0
    188c:	4904      	ldr	r1, [pc, #16]	; (18a0 <TIMER_7_init+0x20>)
    188e:	4805      	ldr	r0, [pc, #20]	; (18a4 <TIMER_7_init+0x24>)
    1890:	4b05      	ldr	r3, [pc, #20]	; (18a8 <TIMER_7_init+0x28>)
    1892:	4798      	blx	r3
    1894:	bd08      	pop	{r3, pc}
    1896:	bf00      	nop
    1898:	00001865 	.word	0x00001865
    189c:	00002bf1 	.word	0x00002bf1
    18a0:	43001000 	.word	0x43001000
    18a4:	20003d18 	.word	0x20003d18
    18a8:	00001d11 	.word	0x00001d11

000018ac <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    18ac:	4a02      	ldr	r2, [pc, #8]	; (18b8 <WDT_0_CLOCK_init+0xc>)
    18ae:	6953      	ldr	r3, [r2, #20]
    18b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    18b4:	6153      	str	r3, [r2, #20]
    18b6:	4770      	bx	lr
    18b8:	40000800 	.word	0x40000800

000018bc <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    18bc:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    18be:	4b0a      	ldr	r3, [pc, #40]	; (18e8 <WDT_0_init+0x2c>)
    18c0:	4798      	blx	r3
	ASSERT(wdt && hw);
    18c2:	2252      	movs	r2, #82	; 0x52
    18c4:	4909      	ldr	r1, [pc, #36]	; (18ec <WDT_0_init+0x30>)
    18c6:	2001      	movs	r0, #1
    18c8:	4b09      	ldr	r3, [pc, #36]	; (18f0 <WDT_0_init+0x34>)
    18ca:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    18cc:	4809      	ldr	r0, [pc, #36]	; (18f4 <WDT_0_init+0x38>)
    18ce:	4b0a      	ldr	r3, [pc, #40]	; (18f8 <WDT_0_init+0x3c>)
    18d0:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    18d2:	4b0a      	ldr	r3, [pc, #40]	; (18fc <WDT_0_init+0x40>)
    18d4:	4798      	blx	r3

	if(0 == wdt_init(&WDT_0, WDT))
    18d6:	b118      	cbz	r0, 18e0 <WDT_0_init+0x24>
	{
		DEBUG_PRINT("WDT Initialised");
	}
	else
	{
		DEBUG_PRINT("WDT Failed to initialize");
    18d8:	4809      	ldr	r0, [pc, #36]	; (1900 <WDT_0_init+0x44>)
    18da:	4b0a      	ldr	r3, [pc, #40]	; (1904 <WDT_0_init+0x48>)
    18dc:	4798      	blx	r3
    18de:	bd08      	pop	{r3, pc}
		DEBUG_PRINT("WDT Initialised");
    18e0:	4809      	ldr	r0, [pc, #36]	; (1908 <WDT_0_init+0x4c>)
    18e2:	4b08      	ldr	r3, [pc, #32]	; (1904 <WDT_0_init+0x48>)
    18e4:	4798      	blx	r3
    18e6:	bd08      	pop	{r3, pc}
    18e8:	000018ad 	.word	0x000018ad
    18ec:	00006e08 	.word	0x00006e08
    18f0:	00001d55 	.word	0x00001d55
    18f4:	20003d6c 	.word	0x20003d6c
    18f8:	40002000 	.word	0x40002000
    18fc:	000031b5 	.word	0x000031b5
    1900:	00006e34 	.word	0x00006e34
    1904:	00001015 	.word	0x00001015
    1908:	00006e24 	.word	0x00006e24

0000190c <system_init>:
	}
}

void system_init(void)
{
    190c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1910:	4b28      	ldr	r3, [pc, #160]	; (19b4 <system_init+0xa8>)
    1912:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    1914:	4b28      	ldr	r3, [pc, #160]	; (19b8 <system_init+0xac>)
    1916:	4798      	blx	r3

	AC_0_init();
    1918:	4b28      	ldr	r3, [pc, #160]	; (19bc <system_init+0xb0>)
    191a:	4798      	blx	r3

	ADC_0_init();
    191c:	4b28      	ldr	r3, [pc, #160]	; (19c0 <system_init+0xb4>)
    191e:	4798      	blx	r3

	ADC_1_init();
    1920:	4b28      	ldr	r3, [pc, #160]	; (19c4 <system_init+0xb8>)
    1922:	4798      	blx	r3

	DAC_0_init();
    1924:	4b28      	ldr	r3, [pc, #160]	; (19c8 <system_init+0xbc>)
    1926:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    1928:	4b28      	ldr	r3, [pc, #160]	; (19cc <system_init+0xc0>)
    192a:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    192c:	4b28      	ldr	r3, [pc, #160]	; (19d0 <system_init+0xc4>)
    192e:	4798      	blx	r3

	FLASH_0_init();
    1930:	4b28      	ldr	r3, [pc, #160]	; (19d4 <system_init+0xc8>)
    1932:	4798      	blx	r3

	SerialDebug_init();
    1934:	4b28      	ldr	r3, [pc, #160]	; (19d8 <system_init+0xcc>)
    1936:	4798      	blx	r3
	
	ModemData_init();
    1938:	4b28      	ldr	r3, [pc, #160]	; (19dc <system_init+0xd0>)
    193a:	4798      	blx	r3

	PWM_0_init();
    193c:	4b28      	ldr	r3, [pc, #160]	; (19e0 <system_init+0xd4>)
    193e:	4798      	blx	r3

	PWM_1_init();
    1940:	4b28      	ldr	r3, [pc, #160]	; (19e4 <system_init+0xd8>)
    1942:	4798      	blx	r3

	PWM_2_init();
    1944:	4b28      	ldr	r3, [pc, #160]	; (19e8 <system_init+0xdc>)
    1946:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1948:	4c28      	ldr	r4, [pc, #160]	; (19ec <system_init+0xe0>)
    194a:	69a3      	ldr	r3, [r4, #24]
    194c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1950:	61a3      	str	r3, [r4, #24]
    1952:	4f27      	ldr	r7, [pc, #156]	; (19f0 <system_init+0xe4>)
    1954:	f04f 0840 	mov.w	r8, #64	; 0x40
    1958:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    195c:	4e25      	ldr	r6, [pc, #148]	; (19f4 <system_init+0xe8>)
    195e:	47b0      	blx	r6
    1960:	4602      	mov	r2, r0
    1962:	4925      	ldr	r1, [pc, #148]	; (19f8 <system_init+0xec>)
    1964:	4825      	ldr	r0, [pc, #148]	; (19fc <system_init+0xf0>)
    1966:	4d26      	ldr	r5, [pc, #152]	; (1a00 <system_init+0xf4>)
    1968:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    196a:	69e3      	ldr	r3, [r4, #28]
    196c:	f043 0320 	orr.w	r3, r3, #32
    1970:	61e3      	str	r3, [r4, #28]
    1972:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    1976:	47b0      	blx	r6
    1978:	4602      	mov	r2, r0
    197a:	4922      	ldr	r1, [pc, #136]	; (1a04 <system_init+0xf8>)
    197c:	4822      	ldr	r0, [pc, #136]	; (1a08 <system_init+0xfc>)
    197e:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1980:	69e3      	ldr	r3, [r4, #28]
    1982:	ea43 0308 	orr.w	r3, r3, r8
    1986:	61e3      	str	r3, [r4, #28]
    1988:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    198c:	47b0      	blx	r6
    198e:	4602      	mov	r2, r0
    1990:	491e      	ldr	r1, [pc, #120]	; (1a0c <system_init+0x100>)
    1992:	481f      	ldr	r0, [pc, #124]	; (1a10 <system_init+0x104>)
    1994:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    1996:	4b1f      	ldr	r3, [pc, #124]	; (1a14 <system_init+0x108>)
    1998:	4798      	blx	r3

	TIMER_4_init();
    199a:	4b1f      	ldr	r3, [pc, #124]	; (1a18 <system_init+0x10c>)
    199c:	4798      	blx	r3

	TIMER_5_init();
    199e:	4b1f      	ldr	r3, [pc, #124]	; (1a1c <system_init+0x110>)
    19a0:	4798      	blx	r3

	TIMER_6_init();
    19a2:	4b1f      	ldr	r3, [pc, #124]	; (1a20 <system_init+0x114>)
    19a4:	4798      	blx	r3

	TIMER_7_init();
    19a6:	4b1f      	ldr	r3, [pc, #124]	; (1a24 <system_init+0x118>)
    19a8:	4798      	blx	r3
	
	WDT_0_init();
    19aa:	4b1f      	ldr	r3, [pc, #124]	; (1a28 <system_init+0x11c>)
    19ac:	4798      	blx	r3
    19ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19b2:	bf00      	nop
    19b4:	000020a1 	.word	0x000020a1
    19b8:	00001659 	.word	0x00001659
    19bc:	00001275 	.word	0x00001275
    19c0:	0000142d 	.word	0x0000142d
    19c4:	00001475 	.word	0x00001475
    19c8:	000014b5 	.word	0x000014b5
    19cc:	000014d5 	.word	0x000014d5
    19d0:	000014fd 	.word	0x000014fd
    19d4:	00001529 	.word	0x00001529
    19d8:	0000163d 	.word	0x0000163d
    19dc:	000015b5 	.word	0x000015b5
    19e0:	00001689 	.word	0x00001689
    19e4:	000016d1 	.word	0x000016d1
    19e8:	00001719 	.word	0x00001719
    19ec:	40000800 	.word	0x40000800
    19f0:	40001c00 	.word	0x40001c00
    19f4:	00003131 	.word	0x00003131
    19f8:	4101c000 	.word	0x4101c000
    19fc:	20003e24 	.word	0x20003e24
    1a00:	00001d11 	.word	0x00001d11
    1a04:	42001400 	.word	0x42001400
    1a08:	20003d84 	.word	0x20003d84
    1a0c:	42001800 	.word	0x42001800
    1a10:	20003ca4 	.word	0x20003ca4
    1a14:	00001761 	.word	0x00001761
    1a18:	000017a9 	.word	0x000017a9
    1a1c:	000017f1 	.word	0x000017f1
    1a20:	00001839 	.word	0x00001839
    1a24:	00001881 	.word	0x00001881
    1a28:	000018bd 	.word	0x000018bd

00001a2c <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    1a2c:	b538      	push	{r3, r4, r5, lr}
    1a2e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1a30:	4605      	mov	r5, r0
    1a32:	b158      	cbz	r0, 1a4c <ac_sync_init+0x20>
    1a34:	1c08      	adds	r0, r1, #0
    1a36:	bf18      	it	ne
    1a38:	2001      	movne	r0, #1
    1a3a:	223b      	movs	r2, #59	; 0x3b
    1a3c:	4904      	ldr	r1, [pc, #16]	; (1a50 <ac_sync_init+0x24>)
    1a3e:	4b05      	ldr	r3, [pc, #20]	; (1a54 <ac_sync_init+0x28>)
    1a40:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    1a42:	4621      	mov	r1, r4
    1a44:	4628      	mov	r0, r5
    1a46:	4b04      	ldr	r3, [pc, #16]	; (1a58 <ac_sync_init+0x2c>)
    1a48:	4798      	blx	r3
}
    1a4a:	bd38      	pop	{r3, r4, r5, pc}
    1a4c:	2000      	movs	r0, #0
    1a4e:	e7f4      	b.n	1a3a <ac_sync_init+0xe>
    1a50:	00006e50 	.word	0x00006e50
    1a54:	00001d55 	.word	0x00001d55
    1a58:	00001f69 	.word	0x00001f69

00001a5c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1a5c:	b538      	push	{r3, r4, r5, lr}
    1a5e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1a60:	4605      	mov	r5, r0
    1a62:	b158      	cbz	r0, 1a7c <adc_sync_init+0x20>
    1a64:	1c08      	adds	r0, r1, #0
    1a66:	bf18      	it	ne
    1a68:	2001      	movne	r0, #1
    1a6a:	2243      	movs	r2, #67	; 0x43
    1a6c:	4904      	ldr	r1, [pc, #16]	; (1a80 <adc_sync_init+0x24>)
    1a6e:	4b05      	ldr	r3, [pc, #20]	; (1a84 <adc_sync_init+0x28>)
    1a70:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    1a72:	4621      	mov	r1, r4
    1a74:	4628      	mov	r0, r5
    1a76:	4b04      	ldr	r3, [pc, #16]	; (1a88 <adc_sync_init+0x2c>)
    1a78:	4798      	blx	r3
}
    1a7a:	bd38      	pop	{r3, r4, r5, pc}
    1a7c:	2000      	movs	r0, #0
    1a7e:	e7f4      	b.n	1a6a <adc_sync_init+0xe>
    1a80:	00006e6c 	.word	0x00006e6c
    1a84:	00001d55 	.word	0x00001d55
    1a88:	00002041 	.word	0x00002041

00001a8c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a8c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1a90:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1a92:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1a94:	f3bf 8f5f 	dmb	sy
    1a98:	4770      	bx	lr

00001a9a <atomic_leave_critical>:
    1a9a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1a9e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1aa0:	f383 8810 	msr	PRIMASK, r3
    1aa4:	4770      	bx	lr
	...

00001aa8 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1aa8:	b538      	push	{r3, r4, r5, lr}
    1aaa:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    1aac:	4604      	mov	r4, r0
    1aae:	b198      	cbz	r0, 1ad8 <dac_sync_init+0x30>
    1ab0:	1c08      	adds	r0, r1, #0
    1ab2:	bf18      	it	ne
    1ab4:	2001      	movne	r0, #1
    1ab6:	223c      	movs	r2, #60	; 0x3c
    1ab8:	4908      	ldr	r1, [pc, #32]	; (1adc <dac_sync_init+0x34>)
    1aba:	4b09      	ldr	r3, [pc, #36]	; (1ae0 <dac_sync_init+0x38>)
    1abc:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    1abe:	4629      	mov	r1, r5
    1ac0:	4620      	mov	r0, r4
    1ac2:	4b08      	ldr	r3, [pc, #32]	; (1ae4 <dac_sync_init+0x3c>)
    1ac4:	4798      	blx	r3
	if (rc) {
    1ac6:	4602      	mov	r2, r0
    1ac8:	b920      	cbnz	r0, 1ad4 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    1aca:	2300      	movs	r3, #0
    1acc:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    1ace:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    1ad0:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    1ad2:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    1ad4:	4610      	mov	r0, r2
    1ad6:	bd38      	pop	{r3, r4, r5, pc}
    1ad8:	2000      	movs	r0, #0
    1ada:	e7ec      	b.n	1ab6 <dac_sync_init+0xe>
    1adc:	00006e88 	.word	0x00006e88
    1ae0:	00001d55 	.word	0x00001d55
    1ae4:	00002159 	.word	0x00002159

00001ae8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1ae8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1aea:	4b02      	ldr	r3, [pc, #8]	; (1af4 <delay_init+0xc>)
    1aec:	6018      	str	r0, [r3, #0]
    1aee:	4b02      	ldr	r3, [pc, #8]	; (1af8 <delay_init+0x10>)
    1af0:	4798      	blx	r3
    1af2:	bd08      	pop	{r3, pc}
    1af4:	20000518 	.word	0x20000518
    1af8:	000028ed 	.word	0x000028ed

00001afc <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1afc:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1afe:	4b04      	ldr	r3, [pc, #16]	; (1b10 <delay_ms+0x14>)
    1b00:	681c      	ldr	r4, [r3, #0]
    1b02:	4b04      	ldr	r3, [pc, #16]	; (1b14 <delay_ms+0x18>)
    1b04:	4798      	blx	r3
    1b06:	4601      	mov	r1, r0
    1b08:	4620      	mov	r0, r4
    1b0a:	4b03      	ldr	r3, [pc, #12]	; (1b18 <delay_ms+0x1c>)
    1b0c:	4798      	blx	r3
    1b0e:	bd10      	pop	{r4, pc}
    1b10:	20000518 	.word	0x20000518
    1b14:	00002095 	.word	0x00002095
    1b18:	00002901 	.word	0x00002901

00001b1c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1b1c:	b508      	push	{r3, lr}
	return _event_system_init();
    1b1e:	4b01      	ldr	r3, [pc, #4]	; (1b24 <event_system_init+0x8>)
    1b20:	4798      	blx	r3
}
    1b22:	bd08      	pop	{r3, pc}
    1b24:	00002395 	.word	0x00002395

00001b28 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1b28:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1b2a:	4b0c      	ldr	r3, [pc, #48]	; (1b5c <process_ext_irq+0x34>)
    1b2c:	685c      	ldr	r4, [r3, #4]
    1b2e:	42a0      	cmp	r0, r4
    1b30:	d00e      	beq.n	1b50 <process_ext_irq+0x28>
    1b32:	2301      	movs	r3, #1
    1b34:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    1b36:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    1b38:	25ff      	movs	r5, #255	; 0xff
    1b3a:	e003      	b.n	1b44 <process_ext_irq+0x1c>
    1b3c:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    1b3e:	185a      	adds	r2, r3, r1
    1b40:	0852      	lsrs	r2, r2, #1
    1b42:	d104      	bne.n	1b4e <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    1b44:	42a0      	cmp	r0, r4
    1b46:	d9f9      	bls.n	1b3c <process_ext_irq+0x14>
	while (upper >= lower) {
    1b48:	b13b      	cbz	r3, 1b5a <process_ext_irq+0x32>
			lower = middle + 1;
    1b4a:	4631      	mov	r1, r6
    1b4c:	e7f7      	b.n	1b3e <process_ext_irq+0x16>
    1b4e:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    1b50:	4b02      	ldr	r3, [pc, #8]	; (1b5c <process_ext_irq+0x34>)
    1b52:	681b      	ldr	r3, [r3, #0]
    1b54:	b10b      	cbz	r3, 1b5a <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    1b56:	4798      	blx	r3
    1b58:	bd70      	pop	{r4, r5, r6, pc}
    1b5a:	bd70      	pop	{r4, r5, r6, pc}
    1b5c:	2000051c 	.word	0x2000051c

00001b60 <ext_irq_init>:
{
    1b60:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    1b62:	4b05      	ldr	r3, [pc, #20]	; (1b78 <ext_irq_init+0x18>)
    1b64:	f04f 32ff 	mov.w	r2, #4294967295
    1b68:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1b6a:	2200      	movs	r2, #0
    1b6c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    1b6e:	4803      	ldr	r0, [pc, #12]	; (1b7c <ext_irq_init+0x1c>)
    1b70:	4b03      	ldr	r3, [pc, #12]	; (1b80 <ext_irq_init+0x20>)
    1b72:	4798      	blx	r3
}
    1b74:	bd08      	pop	{r3, pc}
    1b76:	bf00      	nop
    1b78:	2000051c 	.word	0x2000051c
    1b7c:	00001b29 	.word	0x00001b29
    1b80:	00002315 	.word	0x00002315

00001b84 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1b84:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1b86:	6943      	ldr	r3, [r0, #20]
    1b88:	b103      	cbz	r3, 1b8c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1b8a:	4798      	blx	r3
    1b8c:	bd08      	pop	{r3, pc}

00001b8e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    1b8e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1b90:	6983      	ldr	r3, [r0, #24]
    1b92:	b103      	cbz	r3, 1b96 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1b94:	4798      	blx	r3
    1b96:	bd08      	pop	{r3, pc}

00001b98 <flash_init>:
{
    1b98:	b538      	push	{r3, r4, r5, lr}
    1b9a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1b9c:	4604      	mov	r4, r0
    1b9e:	b190      	cbz	r0, 1bc6 <flash_init+0x2e>
    1ba0:	1c08      	adds	r0, r1, #0
    1ba2:	bf18      	it	ne
    1ba4:	2001      	movne	r0, #1
    1ba6:	2242      	movs	r2, #66	; 0x42
    1ba8:	4908      	ldr	r1, [pc, #32]	; (1bcc <flash_init+0x34>)
    1baa:	4b09      	ldr	r3, [pc, #36]	; (1bd0 <flash_init+0x38>)
    1bac:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    1bae:	4629      	mov	r1, r5
    1bb0:	4620      	mov	r0, r4
    1bb2:	4b08      	ldr	r3, [pc, #32]	; (1bd4 <flash_init+0x3c>)
    1bb4:	4798      	blx	r3
	if (rc) {
    1bb6:	4603      	mov	r3, r0
    1bb8:	b918      	cbnz	r0, 1bc2 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1bba:	4a07      	ldr	r2, [pc, #28]	; (1bd8 <flash_init+0x40>)
    1bbc:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    1bbe:	4a07      	ldr	r2, [pc, #28]	; (1bdc <flash_init+0x44>)
    1bc0:	6062      	str	r2, [r4, #4]
}
    1bc2:	4618      	mov	r0, r3
    1bc4:	bd38      	pop	{r3, r4, r5, pc}
    1bc6:	2000      	movs	r0, #0
    1bc8:	e7ed      	b.n	1ba6 <flash_init+0xe>
    1bca:	bf00      	nop
    1bcc:	00006ea4 	.word	0x00006ea4
    1bd0:	00001d55 	.word	0x00001d55
    1bd4:	000024d1 	.word	0x000024d1
    1bd8:	00001b85 	.word	0x00001b85
    1bdc:	00001b8f 	.word	0x00001b8f

00001be0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1be0:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1be2:	6943      	ldr	r3, [r0, #20]
    1be4:	b103      	cbz	r3, 1be8 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    1be6:	4798      	blx	r3
    1be8:	bd08      	pop	{r3, pc}

00001bea <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1bea:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1bec:	6983      	ldr	r3, [r0, #24]
    1bee:	b103      	cbz	r3, 1bf2 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1bf0:	4798      	blx	r3
    1bf2:	bd08      	pop	{r3, pc}

00001bf4 <pwm_init>:
{
    1bf4:	b538      	push	{r3, r4, r5, lr}
    1bf6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1bf8:	4604      	mov	r4, r0
    1bfa:	b180      	cbz	r0, 1c1e <pwm_init+0x2a>
    1bfc:	1c08      	adds	r0, r1, #0
    1bfe:	bf18      	it	ne
    1c00:	2001      	movne	r0, #1
    1c02:	223d      	movs	r2, #61	; 0x3d
    1c04:	4907      	ldr	r1, [pc, #28]	; (1c24 <pwm_init+0x30>)
    1c06:	4b08      	ldr	r3, [pc, #32]	; (1c28 <pwm_init+0x34>)
    1c08:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1c0a:	4629      	mov	r1, r5
    1c0c:	4620      	mov	r0, r4
    1c0e:	4b07      	ldr	r3, [pc, #28]	; (1c2c <pwm_init+0x38>)
    1c10:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1c12:	4b07      	ldr	r3, [pc, #28]	; (1c30 <pwm_init+0x3c>)
    1c14:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1c16:	4b07      	ldr	r3, [pc, #28]	; (1c34 <pwm_init+0x40>)
    1c18:	6063      	str	r3, [r4, #4]
}
    1c1a:	2000      	movs	r0, #0
    1c1c:	bd38      	pop	{r3, r4, r5, pc}
    1c1e:	2000      	movs	r0, #0
    1c20:	e7ef      	b.n	1c02 <pwm_init+0xe>
    1c22:	bf00      	nop
    1c24:	00006ebc 	.word	0x00006ebc
    1c28:	00001d55 	.word	0x00001d55
    1c2c:	00003019 	.word	0x00003019
    1c30:	00001be1 	.word	0x00001be1
    1c34:	00001beb 	.word	0x00001beb

00001c38 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c3a:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1c3c:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1c3e:	b12f      	cbz	r7, 1c4c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1c40:	688d      	ldr	r5, [r1, #8]
    1c42:	463c      	mov	r4, r7
    1c44:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1c46:	f1c2 0e01 	rsb	lr, r2, #1
    1c4a:	e00b      	b.n	1c64 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1c4c:	4b0e      	ldr	r3, [pc, #56]	; (1c88 <timer_add_timer_task+0x50>)
    1c4e:	4798      	blx	r3
		return;
    1c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1c52:	4473      	add	r3, lr
    1c54:	68a0      	ldr	r0, [r4, #8]
    1c56:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1c58:	42ab      	cmp	r3, r5
    1c5a:	d20a      	bcs.n	1c72 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1c5c:	6823      	ldr	r3, [r4, #0]
    1c5e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1c60:	b153      	cbz	r3, 1c78 <timer_add_timer_task+0x40>
    1c62:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1c64:	6863      	ldr	r3, [r4, #4]
    1c66:	4293      	cmp	r3, r2
    1c68:	d8f3      	bhi.n	1c52 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1c6a:	68a0      	ldr	r0, [r4, #8]
    1c6c:	4403      	add	r3, r0
    1c6e:	1a9b      	subs	r3, r3, r2
    1c70:	e7f2      	b.n	1c58 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1c72:	42a7      	cmp	r7, r4
    1c74:	d004      	beq.n	1c80 <timer_add_timer_task+0x48>
    1c76:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1c78:	4620      	mov	r0, r4
    1c7a:	4b04      	ldr	r3, [pc, #16]	; (1c8c <timer_add_timer_task+0x54>)
    1c7c:	4798      	blx	r3
    1c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1c80:	4660      	mov	r0, ip
    1c82:	4b01      	ldr	r3, [pc, #4]	; (1c88 <timer_add_timer_task+0x50>)
    1c84:	4798      	blx	r3
    1c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c88:	00001d7d 	.word	0x00001d7d
    1c8c:	00001da9 	.word	0x00001da9

00001c90 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1c94:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1c96:	6907      	ldr	r7, [r0, #16]
    1c98:	3701      	adds	r7, #1
    1c9a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1c9c:	7e03      	ldrb	r3, [r0, #24]
    1c9e:	f013 0f01 	tst.w	r3, #1
    1ca2:	d113      	bne.n	1ccc <timer_process_counted+0x3c>
    1ca4:	7e03      	ldrb	r3, [r0, #24]
    1ca6:	f013 0f02 	tst.w	r3, #2
    1caa:	d10f      	bne.n	1ccc <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1cac:	b354      	cbz	r4, 1d04 <timer_process_counted+0x74>
    1cae:	6863      	ldr	r3, [r4, #4]
    1cb0:	1afb      	subs	r3, r7, r3
    1cb2:	68a2      	ldr	r2, [r4, #8]
    1cb4:	4293      	cmp	r3, r2
    1cb6:	d307      	bcc.n	1cc8 <timer_process_counted+0x38>
    1cb8:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1cba:	f100 0814 	add.w	r8, r0, #20
    1cbe:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1d08 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1cc2:	f8df a048 	ldr.w	sl, [pc, #72]	; 1d0c <timer_process_counted+0x7c>
    1cc6:	e012      	b.n	1cee <timer_process_counted+0x5e>
    1cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1ccc:	7e03      	ldrb	r3, [r0, #24]
    1cce:	f043 0302 	orr.w	r3, r3, #2
    1cd2:	7603      	strb	r3, [r0, #24]
		return;
    1cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1cd8:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1cda:	68e3      	ldr	r3, [r4, #12]
    1cdc:	4620      	mov	r0, r4
    1cde:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1ce0:	b185      	cbz	r5, 1d04 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1ce2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1ce4:	686b      	ldr	r3, [r5, #4]
    1ce6:	1afb      	subs	r3, r7, r3
    1ce8:	68aa      	ldr	r2, [r5, #8]
    1cea:	4293      	cmp	r3, r2
    1cec:	d30a      	bcc.n	1d04 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1cee:	4640      	mov	r0, r8
    1cf0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1cf2:	7c23      	ldrb	r3, [r4, #16]
    1cf4:	2b01      	cmp	r3, #1
    1cf6:	d1ef      	bne.n	1cd8 <timer_process_counted+0x48>
			tmp->time_label = time;
    1cf8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1cfa:	463a      	mov	r2, r7
    1cfc:	4621      	mov	r1, r4
    1cfe:	4640      	mov	r0, r8
    1d00:	47d0      	blx	sl
    1d02:	e7e9      	b.n	1cd8 <timer_process_counted+0x48>
    1d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d08:	00001db1 	.word	0x00001db1
    1d0c:	00001c39 	.word	0x00001c39

00001d10 <timer_init>:
{
    1d10:	b570      	push	{r4, r5, r6, lr}
    1d12:	460e      	mov	r6, r1
    1d14:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    1d16:	4604      	mov	r4, r0
    1d18:	b190      	cbz	r0, 1d40 <timer_init+0x30>
    1d1a:	b199      	cbz	r1, 1d44 <timer_init+0x34>
    1d1c:	1c10      	adds	r0, r2, #0
    1d1e:	bf18      	it	ne
    1d20:	2001      	movne	r0, #1
    1d22:	2245      	movs	r2, #69	; 0x45
    1d24:	4908      	ldr	r1, [pc, #32]	; (1d48 <timer_init+0x38>)
    1d26:	4b09      	ldr	r3, [pc, #36]	; (1d4c <timer_init+0x3c>)
    1d28:	4798      	blx	r3
	descr->func = func;
    1d2a:	4620      	mov	r0, r4
    1d2c:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1d30:	682b      	ldr	r3, [r5, #0]
    1d32:	4631      	mov	r1, r6
    1d34:	4798      	blx	r3
	descr->time                           = 0;
    1d36:	2000      	movs	r0, #0
    1d38:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1d3a:	4b05      	ldr	r3, [pc, #20]	; (1d50 <timer_init+0x40>)
    1d3c:	6063      	str	r3, [r4, #4]
}
    1d3e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1d40:	2000      	movs	r0, #0
    1d42:	e7ee      	b.n	1d22 <timer_init+0x12>
    1d44:	2000      	movs	r0, #0
    1d46:	e7ec      	b.n	1d22 <timer_init+0x12>
    1d48:	00006ed4 	.word	0x00006ed4
    1d4c:	00001d55 	.word	0x00001d55
    1d50:	00001c91 	.word	0x00001c91

00001d54 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1d54:	b900      	cbnz	r0, 1d58 <assert+0x4>
		__asm("BKPT #0");
    1d56:	be00      	bkpt	0x0000
    1d58:	4770      	bx	lr

00001d5a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1d5a:	6803      	ldr	r3, [r0, #0]
    1d5c:	b14b      	cbz	r3, 1d72 <is_list_element+0x18>
		if (it == element) {
    1d5e:	428b      	cmp	r3, r1
    1d60:	d009      	beq.n	1d76 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1d62:	681b      	ldr	r3, [r3, #0]
    1d64:	b11b      	cbz	r3, 1d6e <is_list_element+0x14>
		if (it == element) {
    1d66:	4299      	cmp	r1, r3
    1d68:	d1fb      	bne.n	1d62 <is_list_element+0x8>
			return true;
    1d6a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1d6c:	4770      	bx	lr
	return false;
    1d6e:	2000      	movs	r0, #0
    1d70:	4770      	bx	lr
    1d72:	2000      	movs	r0, #0
    1d74:	4770      	bx	lr
			return true;
    1d76:	2001      	movs	r0, #1
    1d78:	4770      	bx	lr
	...

00001d7c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1d7c:	b538      	push	{r3, r4, r5, lr}
    1d7e:	4604      	mov	r4, r0
    1d80:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1d82:	4b06      	ldr	r3, [pc, #24]	; (1d9c <list_insert_as_head+0x20>)
    1d84:	4798      	blx	r3
    1d86:	f080 0001 	eor.w	r0, r0, #1
    1d8a:	2243      	movs	r2, #67	; 0x43
    1d8c:	4904      	ldr	r1, [pc, #16]	; (1da0 <list_insert_as_head+0x24>)
    1d8e:	b2c0      	uxtb	r0, r0
    1d90:	4b04      	ldr	r3, [pc, #16]	; (1da4 <list_insert_as_head+0x28>)
    1d92:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1d94:	6823      	ldr	r3, [r4, #0]
    1d96:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1d98:	6025      	str	r5, [r4, #0]
    1d9a:	bd38      	pop	{r3, r4, r5, pc}
    1d9c:	00001d5b 	.word	0x00001d5b
    1da0:	00006eec 	.word	0x00006eec
    1da4:	00001d55 	.word	0x00001d55

00001da8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1da8:	6803      	ldr	r3, [r0, #0]
    1daa:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1dac:	6001      	str	r1, [r0, #0]
    1dae:	4770      	bx	lr

00001db0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1db0:	6803      	ldr	r3, [r0, #0]
    1db2:	b10b      	cbz	r3, 1db8 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1db4:	681a      	ldr	r2, [r3, #0]
    1db6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1db8:	4618      	mov	r0, r3
    1dba:	4770      	bx	lr

00001dbc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1dbc:	b570      	push	{r4, r5, r6, lr}
    1dbe:	460e      	mov	r6, r1
    1dc0:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1dc2:	4604      	mov	r4, r0
    1dc4:	b178      	cbz	r0, 1de6 <ringbuffer_init+0x2a>
    1dc6:	b181      	cbz	r1, 1dea <ringbuffer_init+0x2e>
    1dc8:	b1a2      	cbz	r2, 1df4 <ringbuffer_init+0x38>
    1dca:	2001      	movs	r0, #1
    1dcc:	2232      	movs	r2, #50	; 0x32
    1dce:	490d      	ldr	r1, [pc, #52]	; (1e04 <ringbuffer_init+0x48>)
    1dd0:	4b0d      	ldr	r3, [pc, #52]	; (1e08 <ringbuffer_init+0x4c>)
    1dd2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1dd4:	1e6b      	subs	r3, r5, #1
    1dd6:	421d      	tst	r5, r3
    1dd8:	d109      	bne.n	1dee <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1dda:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1ddc:	2000      	movs	r0, #0
    1dde:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1de0:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1de2:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1de4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1de6:	2000      	movs	r0, #0
    1de8:	e7f0      	b.n	1dcc <ringbuffer_init+0x10>
    1dea:	2000      	movs	r0, #0
    1dec:	e7ee      	b.n	1dcc <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1dee:	f06f 000c 	mvn.w	r0, #12
    1df2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1df4:	2232      	movs	r2, #50	; 0x32
    1df6:	4903      	ldr	r1, [pc, #12]	; (1e04 <ringbuffer_init+0x48>)
    1df8:	2000      	movs	r0, #0
    1dfa:	4b03      	ldr	r3, [pc, #12]	; (1e08 <ringbuffer_init+0x4c>)
    1dfc:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1dfe:	1e6b      	subs	r3, r5, #1
    1e00:	e7eb      	b.n	1dda <ringbuffer_init+0x1e>
    1e02:	bf00      	nop
    1e04:	00006f0c 	.word	0x00006f0c
    1e08:	00001d55 	.word	0x00001d55

00001e0c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1e0c:	b538      	push	{r3, r4, r5, lr}
    1e0e:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1e10:	4604      	mov	r4, r0
    1e12:	b1a0      	cbz	r0, 1e3e <ringbuffer_get+0x32>
    1e14:	1c08      	adds	r0, r1, #0
    1e16:	bf18      	it	ne
    1e18:	2001      	movne	r0, #1
    1e1a:	224a      	movs	r2, #74	; 0x4a
    1e1c:	490a      	ldr	r1, [pc, #40]	; (1e48 <ringbuffer_get+0x3c>)
    1e1e:	4b0b      	ldr	r3, [pc, #44]	; (1e4c <ringbuffer_get+0x40>)
    1e20:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1e22:	68a3      	ldr	r3, [r4, #8]
    1e24:	68e2      	ldr	r2, [r4, #12]
    1e26:	429a      	cmp	r2, r3
    1e28:	d00b      	beq.n	1e42 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1e2a:	6862      	ldr	r2, [r4, #4]
    1e2c:	4013      	ands	r3, r2
    1e2e:	6822      	ldr	r2, [r4, #0]
    1e30:	5cd3      	ldrb	r3, [r2, r3]
    1e32:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1e34:	68a3      	ldr	r3, [r4, #8]
    1e36:	3301      	adds	r3, #1
    1e38:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1e3a:	2000      	movs	r0, #0
    1e3c:	bd38      	pop	{r3, r4, r5, pc}
    1e3e:	2000      	movs	r0, #0
    1e40:	e7eb      	b.n	1e1a <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    1e42:	f06f 0009 	mvn.w	r0, #9
}
    1e46:	bd38      	pop	{r3, r4, r5, pc}
    1e48:	00006f0c 	.word	0x00006f0c
    1e4c:	00001d55 	.word	0x00001d55

00001e50 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1e50:	b538      	push	{r3, r4, r5, lr}
    1e52:	460d      	mov	r5, r1
	ASSERT(rb);
    1e54:	4604      	mov	r4, r0
    1e56:	225b      	movs	r2, #91	; 0x5b
    1e58:	490b      	ldr	r1, [pc, #44]	; (1e88 <ringbuffer_put+0x38>)
    1e5a:	3000      	adds	r0, #0
    1e5c:	bf18      	it	ne
    1e5e:	2001      	movne	r0, #1
    1e60:	4b0a      	ldr	r3, [pc, #40]	; (1e8c <ringbuffer_put+0x3c>)
    1e62:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1e64:	68e3      	ldr	r3, [r4, #12]
    1e66:	6862      	ldr	r2, [r4, #4]
    1e68:	4013      	ands	r3, r2
    1e6a:	6822      	ldr	r2, [r4, #0]
    1e6c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1e6e:	68e3      	ldr	r3, [r4, #12]
    1e70:	6861      	ldr	r1, [r4, #4]
    1e72:	68a2      	ldr	r2, [r4, #8]
    1e74:	1a9a      	subs	r2, r3, r2
    1e76:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1e78:	bf84      	itt	hi
    1e7a:	1a59      	subhi	r1, r3, r1
    1e7c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1e7e:	3301      	adds	r3, #1
    1e80:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1e82:	2000      	movs	r0, #0
    1e84:	bd38      	pop	{r3, r4, r5, pc}
    1e86:	bf00      	nop
    1e88:	00006f0c 	.word	0x00006f0c
    1e8c:	00001d55 	.word	0x00001d55

00001e90 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1e90:	b510      	push	{r4, lr}
	ASSERT(rb);
    1e92:	4604      	mov	r4, r0
    1e94:	2271      	movs	r2, #113	; 0x71
    1e96:	4905      	ldr	r1, [pc, #20]	; (1eac <ringbuffer_num+0x1c>)
    1e98:	3000      	adds	r0, #0
    1e9a:	bf18      	it	ne
    1e9c:	2001      	movne	r0, #1
    1e9e:	4b04      	ldr	r3, [pc, #16]	; (1eb0 <ringbuffer_num+0x20>)
    1ea0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1ea2:	68e0      	ldr	r0, [r4, #12]
    1ea4:	68a3      	ldr	r3, [r4, #8]
}
    1ea6:	1ac0      	subs	r0, r0, r3
    1ea8:	bd10      	pop	{r4, pc}
    1eaa:	bf00      	nop
    1eac:	00006f0c 	.word	0x00006f0c
    1eb0:	00001d55 	.word	0x00001d55

00001eb4 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    1eb4:	b510      	push	{r4, lr}
	ASSERT(rb);
    1eb6:	4604      	mov	r4, r0
    1eb8:	227b      	movs	r2, #123	; 0x7b
    1eba:	4905      	ldr	r1, [pc, #20]	; (1ed0 <ringbuffer_flush+0x1c>)
    1ebc:	3000      	adds	r0, #0
    1ebe:	bf18      	it	ne
    1ec0:	2001      	movne	r0, #1
    1ec2:	4b04      	ldr	r3, [pc, #16]	; (1ed4 <ringbuffer_flush+0x20>)
    1ec4:	4798      	blx	r3

	rb->read_index = rb->write_index;
    1ec6:	68e3      	ldr	r3, [r4, #12]
    1ec8:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    1eca:	2000      	movs	r0, #0
    1ecc:	bd10      	pop	{r4, pc}
    1ece:	bf00      	nop
    1ed0:	00006f0c 	.word	0x00006f0c
    1ed4:	00001d55 	.word	0x00001d55

00001ed8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1ed8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1eda:	4a06      	ldr	r2, [pc, #24]	; (1ef4 <_sbrk+0x1c>)
    1edc:	6812      	ldr	r2, [r2, #0]
    1ede:	b122      	cbz	r2, 1eea <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1ee0:	4a04      	ldr	r2, [pc, #16]	; (1ef4 <_sbrk+0x1c>)
    1ee2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1ee4:	4403      	add	r3, r0
    1ee6:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1ee8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1eea:	4903      	ldr	r1, [pc, #12]	; (1ef8 <_sbrk+0x20>)
    1eec:	4a01      	ldr	r2, [pc, #4]	; (1ef4 <_sbrk+0x1c>)
    1eee:	6011      	str	r1, [r2, #0]
    1ef0:	e7f6      	b.n	1ee0 <_sbrk+0x8>
    1ef2:	bf00      	nop
    1ef4:	20000524 	.word	0x20000524
    1ef8:	20013e58 	.word	0x20013e58

00001efc <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    1efc:	b510      	push	{r4, lr}
    1efe:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    1f00:	f44f 7281 	mov.w	r2, #258	; 0x102
    1f04:	4915      	ldr	r1, [pc, #84]	; (1f5c <_ac_init+0x60>)
    1f06:	4816      	ldr	r0, [pc, #88]	; (1f60 <_ac_init+0x64>)
    1f08:	4284      	cmp	r4, r0
    1f0a:	bf14      	ite	ne
    1f0c:	2000      	movne	r0, #0
    1f0e:	2001      	moveq	r0, #1
    1f10:	4b14      	ldr	r3, [pc, #80]	; (1f64 <_ac_init+0x68>)
    1f12:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1f14:	6a23      	ldr	r3, [r4, #32]
    1f16:	f013 0f01 	tst.w	r3, #1
    1f1a:	d1fb      	bne.n	1f14 <_ac_init+0x18>
    1f1c:	6a23      	ldr	r3, [r4, #32]
    1f1e:	f013 0f03 	tst.w	r3, #3
    1f22:	d1fb      	bne.n	1f1c <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1f24:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    1f26:	f013 0f02 	tst.w	r3, #2
    1f2a:	d114      	bne.n	1f56 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1f2c:	6a23      	ldr	r3, [r4, #32]
    1f2e:	f013 0f01 	tst.w	r3, #1
    1f32:	d1fb      	bne.n	1f2c <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    1f34:	7823      	ldrb	r3, [r4, #0]
    1f36:	f043 0301 	orr.w	r3, r3, #1
    1f3a:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1f3c:	6a23      	ldr	r3, [r4, #32]
    1f3e:	f013 0f01 	tst.w	r3, #1
    1f42:	d1fb      	bne.n	1f3c <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1f44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1f48:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    1f4a:	2000      	movs	r0, #0
    1f4c:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1f4e:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    1f50:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    1f52:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    1f54:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1f56:	f06f 0010 	mvn.w	r0, #16
}
    1f5a:	bd10      	pop	{r4, pc}
    1f5c:	00006f30 	.word	0x00006f30
    1f60:	42002000 	.word	0x42002000
    1f64:	00001d55 	.word	0x00001d55

00001f68 <_ac_sync_init>:
{
    1f68:	b538      	push	{r3, r4, r5, lr}
    1f6a:	460c      	mov	r4, r1
	ASSERT(device);
    1f6c:	4605      	mov	r5, r0
    1f6e:	226c      	movs	r2, #108	; 0x6c
    1f70:	4905      	ldr	r1, [pc, #20]	; (1f88 <_ac_sync_init+0x20>)
    1f72:	3000      	adds	r0, #0
    1f74:	bf18      	it	ne
    1f76:	2001      	movne	r0, #1
    1f78:	4b04      	ldr	r3, [pc, #16]	; (1f8c <_ac_sync_init+0x24>)
    1f7a:	4798      	blx	r3
	device->hw = hw;
    1f7c:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    1f7e:	4620      	mov	r0, r4
    1f80:	4b03      	ldr	r3, [pc, #12]	; (1f90 <_ac_sync_init+0x28>)
    1f82:	4798      	blx	r3
}
    1f84:	bd38      	pop	{r3, r4, r5, pc}
    1f86:	bf00      	nop
    1f88:	00006f30 	.word	0x00006f30
    1f8c:	00001d55 	.word	0x00001d55
    1f90:	00001efd 	.word	0x00001efd

00001f94 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1f94:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1f96:	f013 0f01 	tst.w	r3, #1
    1f9a:	d1fb      	bne.n	1f94 <_adc_init>
    1f9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1f9e:	f013 0f03 	tst.w	r3, #3
    1fa2:	d1fb      	bne.n	1f9c <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1fa4:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    1fa6:	f013 0f02 	tst.w	r3, #2
    1faa:	d12a      	bne.n	2002 <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1fac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fae:	f013 0f01 	tst.w	r3, #1
    1fb2:	d1fb      	bne.n	1fac <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    1fb4:	8803      	ldrh	r3, [r0, #0]
    1fb6:	b29b      	uxth	r3, r3
    1fb8:	f043 0301 	orr.w	r3, r3, #1
    1fbc:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1fbe:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fc0:	f013 0f01 	tst.w	r3, #1
    1fc4:	d1fb      	bne.n	1fbe <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1fc6:	2216      	movs	r2, #22
    1fc8:	4b0f      	ldr	r3, [pc, #60]	; (2008 <_adc_init+0x74>)
    1fca:	fb02 3101 	mla	r1, r2, r1, r3
    1fce:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1fd0:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1fd2:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1fd4:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1fd6:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1fd8:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1fda:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1fdc:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1fde:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1fe0:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1fe2:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1fe4:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1fe6:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1fe8:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1fea:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1fec:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1fee:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1ff0:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1ff2:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1ff4:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1ff6:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1ff8:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    1ffa:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    1ffc:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    1ffe:	2000      	movs	r0, #0
    2000:	4770      	bx	lr
		return ERR_DENIED;
    2002:	f06f 0010 	mvn.w	r0, #16
}
    2006:	4770      	bx	lr
    2008:	00006f44 	.word	0x00006f44

0000200c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    200c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2010:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2014:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    2018:	b148      	cbz	r0, 202e <_adc_get_regs+0x22>
    201a:	2801      	cmp	r0, #1
    201c:	d009      	beq.n	2032 <_adc_get_regs+0x26>
{
    201e:	b508      	push	{r3, lr}
	ASSERT(false);
    2020:	2291      	movs	r2, #145	; 0x91
    2022:	4905      	ldr	r1, [pc, #20]	; (2038 <_adc_get_regs+0x2c>)
    2024:	2000      	movs	r0, #0
    2026:	4b05      	ldr	r3, [pc, #20]	; (203c <_adc_get_regs+0x30>)
    2028:	4798      	blx	r3
	return 0;
    202a:	2000      	movs	r0, #0
    202c:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    202e:	2000      	movs	r0, #0
    2030:	4770      	bx	lr
    2032:	2001      	movs	r0, #1
    2034:	4770      	bx	lr
    2036:	bf00      	nop
    2038:	00006f70 	.word	0x00006f70
    203c:	00001d55 	.word	0x00001d55

00002040 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2040:	b538      	push	{r3, r4, r5, lr}
    2042:	460c      	mov	r4, r1
	ASSERT(device);
    2044:	4605      	mov	r5, r0
    2046:	22d5      	movs	r2, #213	; 0xd5
    2048:	4907      	ldr	r1, [pc, #28]	; (2068 <_adc_sync_init+0x28>)
    204a:	3000      	adds	r0, #0
    204c:	bf18      	it	ne
    204e:	2001      	movne	r0, #1
    2050:	4b06      	ldr	r3, [pc, #24]	; (206c <_adc_sync_init+0x2c>)
    2052:	4798      	blx	r3

	device->hw = hw;
    2054:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2056:	4620      	mov	r0, r4
    2058:	4b05      	ldr	r3, [pc, #20]	; (2070 <_adc_sync_init+0x30>)
    205a:	4798      	blx	r3
    205c:	4601      	mov	r1, r0
    205e:	4620      	mov	r0, r4
    2060:	4b04      	ldr	r3, [pc, #16]	; (2074 <_adc_sync_init+0x34>)
    2062:	4798      	blx	r3
}
    2064:	bd38      	pop	{r3, r4, r5, pc}
    2066:	bf00      	nop
    2068:	00006f70 	.word	0x00006f70
    206c:	00001d55 	.word	0x00001d55
    2070:	0000200d 	.word	0x0000200d
    2074:	00001f95 	.word	0x00001f95

00002078 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2078:	0943      	lsrs	r3, r0, #5
    207a:	f000 001f 	and.w	r0, r0, #31
    207e:	2201      	movs	r2, #1
    2080:	fa02 f000 	lsl.w	r0, r2, r0
    2084:	3340      	adds	r3, #64	; 0x40
    2086:	4a02      	ldr	r2, [pc, #8]	; (2090 <_irq_set+0x18>)
    2088:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    208c:	4770      	bx	lr
    208e:	bf00      	nop
    2090:	e000e100 	.word	0xe000e100

00002094 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2094:	f64b 3380 	movw	r3, #48000	; 0xbb80
    2098:	fb03 f000 	mul.w	r0, r3, r0
    209c:	4770      	bx	lr
	...

000020a0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    20a0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    20a2:	4a0c      	ldr	r2, [pc, #48]	; (20d4 <_init_chip+0x34>)
    20a4:	8813      	ldrh	r3, [r2, #0]
    20a6:	b29b      	uxth	r3, r3
    20a8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    20aa:	4b0b      	ldr	r3, [pc, #44]	; (20d8 <_init_chip+0x38>)
    20ac:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    20ae:	4b0b      	ldr	r3, [pc, #44]	; (20dc <_init_chip+0x3c>)
    20b0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    20b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    20b6:	4c0a      	ldr	r4, [pc, #40]	; (20e0 <_init_chip+0x40>)
    20b8:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    20ba:	4b0a      	ldr	r3, [pc, #40]	; (20e4 <_init_chip+0x44>)
    20bc:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    20be:	f240 70ff 	movw	r0, #2047	; 0x7ff
    20c2:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    20c4:	4a08      	ldr	r2, [pc, #32]	; (20e8 <_init_chip+0x48>)
    20c6:	6913      	ldr	r3, [r2, #16]
    20c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    20cc:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    20ce:	4b07      	ldr	r3, [pc, #28]	; (20ec <_init_chip+0x4c>)
    20d0:	4798      	blx	r3
    20d2:	bd10      	pop	{r4, pc}
    20d4:	41004000 	.word	0x41004000
    20d8:	00002571 	.word	0x00002571
    20dc:	00002499 	.word	0x00002499
    20e0:	000023f1 	.word	0x000023f1
    20e4:	0000259d 	.word	0x0000259d
    20e8:	40000800 	.word	0x40000800
    20ec:	000021f9 	.word	0x000021f9

000020f0 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    20f0:	b510      	push	{r4, lr}
    20f2:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    20f4:	22f3      	movs	r2, #243	; 0xf3
    20f6:	4915      	ldr	r1, [pc, #84]	; (214c <_dac_init+0x5c>)
    20f8:	4815      	ldr	r0, [pc, #84]	; (2150 <_dac_init+0x60>)
    20fa:	4284      	cmp	r4, r0
    20fc:	bf14      	ite	ne
    20fe:	2000      	movne	r0, #0
    2100:	2001      	moveq	r0, #1
    2102:	4b14      	ldr	r3, [pc, #80]	; (2154 <_dac_init+0x64>)
    2104:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    2106:	68a3      	ldr	r3, [r4, #8]
    2108:	f013 0f01 	tst.w	r3, #1
    210c:	d1fb      	bne.n	2106 <_dac_init+0x16>
    210e:	68a3      	ldr	r3, [r4, #8]
    2110:	f013 0f03 	tst.w	r3, #3
    2114:	d1fb      	bne.n	210e <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    2116:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    2118:	f013 0f02 	tst.w	r3, #2
    211c:	d113      	bne.n	2146 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    211e:	68a3      	ldr	r3, [r4, #8]
    2120:	f013 0f01 	tst.w	r3, #1
    2124:	d1fb      	bne.n	211e <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    2126:	7823      	ldrb	r3, [r4, #0]
    2128:	f043 0301 	orr.w	r3, r3, #1
    212c:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    212e:	68a3      	ldr	r3, [r4, #8]
    2130:	f013 0f01 	tst.w	r3, #1
    2134:	d1fb      	bne.n	212e <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    2136:	2000      	movs	r0, #0
    2138:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    213a:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    213c:	81a0      	strh	r0, [r4, #12]
    213e:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    2140:	2301      	movs	r3, #1
    2142:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    2144:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    2146:	f06f 0003 	mvn.w	r0, #3
}
    214a:	bd10      	pop	{r4, pc}
    214c:	00006f88 	.word	0x00006f88
    2150:	43002400 	.word	0x43002400
    2154:	00001d55 	.word	0x00001d55

00002158 <_dac_sync_init>:
{
    2158:	b538      	push	{r3, r4, r5, lr}
    215a:	460c      	mov	r4, r1
	ASSERT(device);
    215c:	4605      	mov	r5, r0
    215e:	2261      	movs	r2, #97	; 0x61
    2160:	4905      	ldr	r1, [pc, #20]	; (2178 <_dac_sync_init+0x20>)
    2162:	3000      	adds	r0, #0
    2164:	bf18      	it	ne
    2166:	2001      	movne	r0, #1
    2168:	4b04      	ldr	r3, [pc, #16]	; (217c <_dac_sync_init+0x24>)
    216a:	4798      	blx	r3
	device->hw = hw;
    216c:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    216e:	4620      	mov	r0, r4
    2170:	4b03      	ldr	r3, [pc, #12]	; (2180 <_dac_sync_init+0x28>)
    2172:	4798      	blx	r3
}
    2174:	bd38      	pop	{r3, r4, r5, pc}
    2176:	bf00      	nop
    2178:	00006f88 	.word	0x00006f88
    217c:	00001d55 	.word	0x00001d55
    2180:	000020f1 	.word	0x000020f1

00002184 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2184:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2186:	4a1a      	ldr	r2, [pc, #104]	; (21f0 <_dmac_handler+0x6c>)
    2188:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    218a:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    218e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    2192:	4818      	ldr	r0, [pc, #96]	; (21f4 <_dmac_handler+0x70>)
    2194:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2198:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    219c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    21a0:	f012 0f01 	tst.w	r2, #1
    21a4:	d10a      	bne.n	21bc <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    21a6:	011a      	lsls	r2, r3, #4
    21a8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    21ac:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    21b0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    21b4:	f012 0f02 	tst.w	r2, #2
    21b8:	d10b      	bne.n	21d2 <_dmac_handler+0x4e>
    21ba:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    21bc:	011a      	lsls	r2, r3, #4
    21be:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    21c2:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    21c6:	2101      	movs	r1, #1
    21c8:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    21cc:	6843      	ldr	r3, [r0, #4]
    21ce:	4798      	blx	r3
    21d0:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    21d2:	011a      	lsls	r2, r3, #4
    21d4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    21d8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    21dc:	2102      	movs	r1, #2
    21de:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    21e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    21e6:	4a03      	ldr	r2, [pc, #12]	; (21f4 <_dmac_handler+0x70>)
    21e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    21ec:	4798      	blx	r3
	}
}
    21ee:	e7e4      	b.n	21ba <_dmac_handler+0x36>
    21f0:	4100a000 	.word	0x4100a000
    21f4:	20000530 	.word	0x20000530

000021f8 <_dma_init>:
{
    21f8:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    21fa:	4a33      	ldr	r2, [pc, #204]	; (22c8 <_dma_init+0xd0>)
    21fc:	8813      	ldrh	r3, [r2, #0]
    21fe:	f023 0302 	bic.w	r3, r3, #2
    2202:	041b      	lsls	r3, r3, #16
    2204:	0c1b      	lsrs	r3, r3, #16
    2206:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2208:	8853      	ldrh	r3, [r2, #2]
    220a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    220e:	041b      	lsls	r3, r3, #16
    2210:	0c1b      	lsrs	r3, r3, #16
    2212:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2214:	8813      	ldrh	r3, [r2, #0]
    2216:	b29b      	uxth	r3, r3
    2218:	f043 0301 	orr.w	r3, r3, #1
    221c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    221e:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2220:	f013 0f01 	tst.w	r3, #1
    2224:	d1fb      	bne.n	221e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    2226:	4b28      	ldr	r3, [pc, #160]	; (22c8 <_dma_init+0xd0>)
    2228:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    222c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    222e:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2230:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2234:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2236:	2000      	movs	r0, #0
    2238:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    223a:	4a24      	ldr	r2, [pc, #144]	; (22cc <_dma_init+0xd4>)
    223c:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    2240:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2242:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    2246:	639a      	str	r2, [r3, #56]	; 0x38
    2248:	4b21      	ldr	r3, [pc, #132]	; (22d0 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    224a:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    224e:	681c      	ldr	r4, [r3, #0]
    2250:	0101      	lsls	r1, r0, #4
    2252:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    2256:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    225a:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    225c:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    225e:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2262:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2264:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2268:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    226a:	4429      	add	r1, r5
    226c:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    2270:	3001      	adds	r0, #1
    2272:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2274:	2820      	cmp	r0, #32
    2276:	d1ea      	bne.n	224e <_dma_init+0x56>
    2278:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    227a:	2001      	movs	r0, #1
    227c:	4915      	ldr	r1, [pc, #84]	; (22d4 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    227e:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2280:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2284:	d00b      	beq.n	229e <_dma_init+0xa6>
    2286:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    2288:	2b24      	cmp	r3, #36	; 0x24
    228a:	d1f8      	bne.n	227e <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    228c:	4a0e      	ldr	r2, [pc, #56]	; (22c8 <_dma_init+0xd0>)
    228e:	8813      	ldrh	r3, [r2, #0]
    2290:	b29b      	uxth	r3, r3
    2292:	f043 0302 	orr.w	r3, r3, #2
    2296:	8013      	strh	r3, [r2, #0]
}
    2298:	2000      	movs	r0, #0
    229a:	bc30      	pop	{r4, r5}
    229c:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    229e:	095c      	lsrs	r4, r3, #5
    22a0:	f002 021f 	and.w	r2, r2, #31
    22a4:	fa00 f202 	lsl.w	r2, r0, r2
    22a8:	f104 0520 	add.w	r5, r4, #32
    22ac:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    22b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22b4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    22b8:	f104 0560 	add.w	r5, r4, #96	; 0x60
    22bc:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    22c0:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    22c4:	e7df      	b.n	2286 <_dma_init+0x8e>
    22c6:	bf00      	nop
    22c8:	4100a000 	.word	0x4100a000
    22cc:	20000530 	.word	0x20000530
    22d0:	00006fa0 	.word	0x00006fa0
    22d4:	e000e100 	.word	0xe000e100

000022d8 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    22d8:	b508      	push	{r3, lr}
	_dmac_handler();
    22da:	4b01      	ldr	r3, [pc, #4]	; (22e0 <DMAC_0_Handler+0x8>)
    22dc:	4798      	blx	r3
    22de:	bd08      	pop	{r3, pc}
    22e0:	00002185 	.word	0x00002185

000022e4 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    22e4:	b508      	push	{r3, lr}
	_dmac_handler();
    22e6:	4b01      	ldr	r3, [pc, #4]	; (22ec <DMAC_1_Handler+0x8>)
    22e8:	4798      	blx	r3
    22ea:	bd08      	pop	{r3, pc}
    22ec:	00002185 	.word	0x00002185

000022f0 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    22f0:	b508      	push	{r3, lr}
	_dmac_handler();
    22f2:	4b01      	ldr	r3, [pc, #4]	; (22f8 <DMAC_2_Handler+0x8>)
    22f4:	4798      	blx	r3
    22f6:	bd08      	pop	{r3, pc}
    22f8:	00002185 	.word	0x00002185

000022fc <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    22fc:	b508      	push	{r3, lr}
	_dmac_handler();
    22fe:	4b01      	ldr	r3, [pc, #4]	; (2304 <DMAC_3_Handler+0x8>)
    2300:	4798      	blx	r3
    2302:	bd08      	pop	{r3, pc}
    2304:	00002185 	.word	0x00002185

00002308 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    2308:	b508      	push	{r3, lr}
	_dmac_handler();
    230a:	4b01      	ldr	r3, [pc, #4]	; (2310 <DMAC_4_Handler+0x8>)
    230c:	4798      	blx	r3
    230e:	bd08      	pop	{r3, pc}
    2310:	00002185 	.word	0x00002185

00002314 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2314:	4a1e      	ldr	r2, [pc, #120]	; (2390 <_ext_irq_init+0x7c>)
    2316:	6853      	ldr	r3, [r2, #4]
    2318:	f013 0f01 	tst.w	r3, #1
    231c:	d1fb      	bne.n	2316 <_ext_irq_init+0x2>
    231e:	4a1c      	ldr	r2, [pc, #112]	; (2390 <_ext_irq_init+0x7c>)
    2320:	6853      	ldr	r3, [r2, #4]
    2322:	f013 0f03 	tst.w	r3, #3
    2326:	d1fb      	bne.n	2320 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    2328:	4b19      	ldr	r3, [pc, #100]	; (2390 <_ext_irq_init+0x7c>)
    232a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    232c:	f013 0f02 	tst.w	r3, #2
    2330:	d12b      	bne.n	238a <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2332:	4a17      	ldr	r2, [pc, #92]	; (2390 <_ext_irq_init+0x7c>)
    2334:	6853      	ldr	r3, [r2, #4]
    2336:	f013 0f01 	tst.w	r3, #1
    233a:	d1fb      	bne.n	2334 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    233c:	4a14      	ldr	r2, [pc, #80]	; (2390 <_ext_irq_init+0x7c>)
    233e:	7813      	ldrb	r3, [r2, #0]
    2340:	f043 0301 	orr.w	r3, r3, #1
    2344:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2346:	6853      	ldr	r3, [r2, #4]
    2348:	f013 0f01 	tst.w	r3, #1
    234c:	d1fb      	bne.n	2346 <_ext_irq_init+0x32>
    234e:	4a10      	ldr	r2, [pc, #64]	; (2390 <_ext_irq_init+0x7c>)
    2350:	6853      	ldr	r3, [r2, #4]
    2352:	f013 0f03 	tst.w	r3, #3
    2356:	d1fb      	bne.n	2350 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    2358:	4b0d      	ldr	r3, [pc, #52]	; (2390 <_ext_irq_init+0x7c>)
    235a:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    235c:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    2360:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    2362:	2200      	movs	r2, #0
    2364:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2366:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    2368:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    236a:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    236c:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    236e:	61da      	str	r2, [r3, #28]
    2370:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2372:	461a      	mov	r2, r3
    2374:	6853      	ldr	r3, [r2, #4]
    2376:	f013 0f03 	tst.w	r3, #3
    237a:	d1fb      	bne.n	2374 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    237c:	4a04      	ldr	r2, [pc, #16]	; (2390 <_ext_irq_init+0x7c>)
    237e:	7813      	ldrb	r3, [r2, #0]
    2380:	f043 0302 	orr.w	r3, r3, #2
    2384:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    2386:	2000      	movs	r0, #0
    2388:	4770      	bx	lr
		return ERR_DENIED;
    238a:	f06f 0010 	mvn.w	r0, #16
}
    238e:	4770      	bx	lr
    2390:	40002800 	.word	0x40002800

00002394 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2394:	b430      	push	{r4, r5}
    2396:	4814      	ldr	r0, [pc, #80]	; (23e8 <_event_system_init+0x54>)
    2398:	f100 0543 	add.w	r5, r0, #67	; 0x43
    239c:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    239e:	4c13      	ldr	r4, [pc, #76]	; (23ec <_event_system_init+0x58>)
    23a0:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    23a2:	f813 1b01 	ldrb.w	r1, [r3], #1
    23a6:	3248      	adds	r2, #72	; 0x48
    23a8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    23ac:	42ab      	cmp	r3, r5
    23ae:	d1f7      	bne.n	23a0 <_event_system_init+0xc>
    23b0:	480d      	ldr	r0, [pc, #52]	; (23e8 <_event_system_init+0x54>)
    23b2:	f100 0442 	add.w	r4, r0, #66	; 0x42
    23b6:	3080      	adds	r0, #128	; 0x80
    23b8:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    23ba:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    23be:	00ca      	lsls	r2, r1, #3
    23c0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    23c4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    23c8:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    23ca:	f850 3f04 	ldr.w	r3, [r0, #4]!
    23ce:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    23d0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    23d4:	43db      	mvns	r3, r3
    23d6:	b2db      	uxtb	r3, r3
    23d8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    23dc:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    23de:	2920      	cmp	r1, #32
    23e0:	d1eb      	bne.n	23ba <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    23e2:	2000      	movs	r0, #0
    23e4:	bc30      	pop	{r4, r5}
    23e6:	4770      	bx	lr
    23e8:	000070a0 	.word	0x000070a0
    23ec:	4100e000 	.word	0x4100e000

000023f0 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    23f0:	f010 0f01 	tst.w	r0, #1
    23f4:	d002      	beq.n	23fc <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    23f6:	4a23      	ldr	r2, [pc, #140]	; (2484 <_gclk_init_generators_by_fref+0x94>)
    23f8:	4b23      	ldr	r3, [pc, #140]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    23fa:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    23fc:	f010 0f02 	tst.w	r0, #2
    2400:	d002      	beq.n	2408 <_gclk_init_generators_by_fref+0x18>
    2402:	4a22      	ldr	r2, [pc, #136]	; (248c <_gclk_init_generators_by_fref+0x9c>)
    2404:	4b20      	ldr	r3, [pc, #128]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    2406:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    2408:	f010 0f04 	tst.w	r0, #4
    240c:	d002      	beq.n	2414 <_gclk_init_generators_by_fref+0x24>
    240e:	4a1d      	ldr	r2, [pc, #116]	; (2484 <_gclk_init_generators_by_fref+0x94>)
    2410:	4b1d      	ldr	r3, [pc, #116]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    2412:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    2414:	f010 0f08 	tst.w	r0, #8
    2418:	d002      	beq.n	2420 <_gclk_init_generators_by_fref+0x30>
    241a:	4a1a      	ldr	r2, [pc, #104]	; (2484 <_gclk_init_generators_by_fref+0x94>)
    241c:	4b1a      	ldr	r3, [pc, #104]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    241e:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    2420:	f010 0f10 	tst.w	r0, #16
    2424:	d002      	beq.n	242c <_gclk_init_generators_by_fref+0x3c>
    2426:	4a17      	ldr	r2, [pc, #92]	; (2484 <_gclk_init_generators_by_fref+0x94>)
    2428:	4b17      	ldr	r3, [pc, #92]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    242a:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    242c:	f010 0f20 	tst.w	r0, #32
    2430:	d002      	beq.n	2438 <_gclk_init_generators_by_fref+0x48>
    2432:	4a14      	ldr	r2, [pc, #80]	; (2484 <_gclk_init_generators_by_fref+0x94>)
    2434:	4b14      	ldr	r3, [pc, #80]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    2436:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    2438:	f010 0f40 	tst.w	r0, #64	; 0x40
    243c:	d002      	beq.n	2444 <_gclk_init_generators_by_fref+0x54>
    243e:	4a11      	ldr	r2, [pc, #68]	; (2484 <_gclk_init_generators_by_fref+0x94>)
    2440:	4b11      	ldr	r3, [pc, #68]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    2442:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    2444:	f010 0f80 	tst.w	r0, #128	; 0x80
    2448:	d002      	beq.n	2450 <_gclk_init_generators_by_fref+0x60>
    244a:	4a0e      	ldr	r2, [pc, #56]	; (2484 <_gclk_init_generators_by_fref+0x94>)
    244c:	4b0e      	ldr	r3, [pc, #56]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    244e:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    2450:	f410 7f80 	tst.w	r0, #256	; 0x100
    2454:	d002      	beq.n	245c <_gclk_init_generators_by_fref+0x6c>
    2456:	4a0b      	ldr	r2, [pc, #44]	; (2484 <_gclk_init_generators_by_fref+0x94>)
    2458:	4b0b      	ldr	r3, [pc, #44]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    245a:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    245c:	f410 7f00 	tst.w	r0, #512	; 0x200
    2460:	d002      	beq.n	2468 <_gclk_init_generators_by_fref+0x78>
    2462:	4a08      	ldr	r2, [pc, #32]	; (2484 <_gclk_init_generators_by_fref+0x94>)
    2464:	4b08      	ldr	r3, [pc, #32]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    2466:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    2468:	f410 6f80 	tst.w	r0, #1024	; 0x400
    246c:	d002      	beq.n	2474 <_gclk_init_generators_by_fref+0x84>
    246e:	4a08      	ldr	r2, [pc, #32]	; (2490 <_gclk_init_generators_by_fref+0xa0>)
    2470:	4b05      	ldr	r3, [pc, #20]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    2472:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    2474:	f410 6f00 	tst.w	r0, #2048	; 0x800
    2478:	d002      	beq.n	2480 <_gclk_init_generators_by_fref+0x90>
    247a:	4a06      	ldr	r2, [pc, #24]	; (2494 <_gclk_init_generators_by_fref+0xa4>)
    247c:	4b02      	ldr	r3, [pc, #8]	; (2488 <_gclk_init_generators_by_fref+0x98>)
    247e:	64da      	str	r2, [r3, #76]	; 0x4c
    2480:	4770      	bx	lr
    2482:	bf00      	nop
    2484:	00012b06 	.word	0x00012b06
    2488:	40001c00 	.word	0x40001c00
    248c:	00012306 	.word	0x00012306
    2490:	00012b05 	.word	0x00012b05
    2494:	00013b05 	.word	0x00013b05

00002498 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2498:	2201      	movs	r2, #1
    249a:	4b01      	ldr	r3, [pc, #4]	; (24a0 <_mclk_init+0x8>)
    249c:	715a      	strb	r2, [r3, #5]
    249e:	4770      	bx	lr
    24a0:	40000800 	.word	0x40000800

000024a4 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    24a4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    24a6:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    24a8:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    24aa:	f012 0f01 	tst.w	r2, #1
    24ae:	d005      	beq.n	24bc <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    24b0:	2201      	movs	r2, #1
    24b2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    24b4:	6803      	ldr	r3, [r0, #0]
    24b6:	b153      	cbz	r3, 24ce <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    24b8:	4798      	blx	r3
    24ba:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    24bc:	8a1a      	ldrh	r2, [r3, #16]
    24be:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    24c0:	b12a      	cbz	r2, 24ce <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    24c2:	f240 225e 	movw	r2, #606	; 0x25e
    24c6:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    24c8:	6843      	ldr	r3, [r0, #4]
    24ca:	b103      	cbz	r3, 24ce <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    24cc:	4798      	blx	r3
    24ce:	bd08      	pop	{r3, pc}

000024d0 <_flash_init>:
{
    24d0:	b538      	push	{r3, r4, r5, lr}
    24d2:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    24d4:	4605      	mov	r5, r0
    24d6:	b350      	cbz	r0, 252e <_flash_init+0x5e>
    24d8:	4816      	ldr	r0, [pc, #88]	; (2534 <_flash_init+0x64>)
    24da:	4281      	cmp	r1, r0
    24dc:	bf14      	ite	ne
    24de:	2000      	movne	r0, #0
    24e0:	2001      	moveq	r0, #1
    24e2:	2256      	movs	r2, #86	; 0x56
    24e4:	4914      	ldr	r1, [pc, #80]	; (2538 <_flash_init+0x68>)
    24e6:	4b15      	ldr	r3, [pc, #84]	; (253c <_flash_init+0x6c>)
    24e8:	4798      	blx	r3
	device->hw = hw;
    24ea:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    24ec:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    24ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    24f2:	049b      	lsls	r3, r3, #18
    24f4:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    24f6:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    24f8:	4b11      	ldr	r3, [pc, #68]	; (2540 <_flash_init+0x70>)
    24fa:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24fc:	4b11      	ldr	r3, [pc, #68]	; (2544 <_flash_init+0x74>)
    24fe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2502:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2506:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    250a:	f3bf 8f6f 	isb	sy
    250e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2516:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    251a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    251e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2522:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2526:	6019      	str	r1, [r3, #0]
    2528:	601a      	str	r2, [r3, #0]
}
    252a:	2000      	movs	r0, #0
    252c:	bd38      	pop	{r3, r4, r5, pc}
    252e:	2000      	movs	r0, #0
    2530:	e7d7      	b.n	24e2 <_flash_init+0x12>
    2532:	bf00      	nop
    2534:	41004000 	.word	0x41004000
    2538:	000071a4 	.word	0x000071a4
    253c:	00001d55 	.word	0x00001d55
    2540:	20000ab0 	.word	0x20000ab0
    2544:	e000e100 	.word	0xe000e100

00002548 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    2548:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    254a:	4b02      	ldr	r3, [pc, #8]	; (2554 <NVMCTRL_0_Handler+0xc>)
    254c:	6818      	ldr	r0, [r3, #0]
    254e:	4b02      	ldr	r3, [pc, #8]	; (2558 <NVMCTRL_0_Handler+0x10>)
    2550:	4798      	blx	r3
    2552:	bd08      	pop	{r3, pc}
    2554:	20000ab0 	.word	0x20000ab0
    2558:	000024a5 	.word	0x000024a5

0000255c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    255c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    255e:	4b02      	ldr	r3, [pc, #8]	; (2568 <NVMCTRL_1_Handler+0xc>)
    2560:	6818      	ldr	r0, [r3, #0]
    2562:	4b02      	ldr	r3, [pc, #8]	; (256c <NVMCTRL_1_Handler+0x10>)
    2564:	4798      	blx	r3
    2566:	bd08      	pop	{r3, pc}
    2568:	20000ab0 	.word	0x20000ab0
    256c:	000024a5 	.word	0x000024a5

00002570 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2570:	4b09      	ldr	r3, [pc, #36]	; (2598 <_osc32kctrl_init_sources+0x28>)
    2572:	f242 024e 	movw	r2, #8270	; 0x204e
    2576:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2578:	2201      	movs	r2, #1
    257a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    257c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    257e:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2580:	2200      	movs	r2, #0
    2582:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    2584:	461a      	mov	r2, r3
    2586:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    2588:	f013 0f01 	tst.w	r3, #1
    258c:	d0fb      	beq.n	2586 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    258e:	2204      	movs	r2, #4
    2590:	4b01      	ldr	r3, [pc, #4]	; (2598 <_osc32kctrl_init_sources+0x28>)
    2592:	741a      	strb	r2, [r3, #16]
    2594:	4770      	bx	lr
    2596:	bf00      	nop
    2598:	40001400 	.word	0x40001400

0000259c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    259c:	4a2b      	ldr	r2, [pc, #172]	; (264c <_oscctrl_init_referenced_generators+0xb0>)
    259e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    25a0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    25a4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    25a8:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    25aa:	4b29      	ldr	r3, [pc, #164]	; (2650 <_oscctrl_init_referenced_generators+0xb4>)
    25ac:	2200      	movs	r2, #0
    25ae:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    25b0:	4a28      	ldr	r2, [pc, #160]	; (2654 <_oscctrl_init_referenced_generators+0xb8>)
    25b2:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    25b4:	461a      	mov	r2, r3
    25b6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    25ba:	f013 0f10 	tst.w	r3, #16
    25be:	d1fa      	bne.n	25b6 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    25c0:	2200      	movs	r2, #0
    25c2:	4b23      	ldr	r3, [pc, #140]	; (2650 <_oscctrl_init_referenced_generators+0xb4>)
    25c4:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    25c8:	461a      	mov	r2, r3
    25ca:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    25ce:	f013 0f04 	tst.w	r3, #4
    25d2:	d1fa      	bne.n	25ca <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    25d4:	2242      	movs	r2, #66	; 0x42
    25d6:	4b1e      	ldr	r3, [pc, #120]	; (2650 <_oscctrl_init_referenced_generators+0xb4>)
    25d8:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    25da:	461a      	mov	r2, r3
    25dc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    25e0:	f013 0f02 	tst.w	r3, #2
    25e4:	d1fa      	bne.n	25dc <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    25e6:	4b1a      	ldr	r3, [pc, #104]	; (2650 <_oscctrl_init_referenced_generators+0xb4>)
    25e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    25ea:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    25ec:	461a      	mov	r2, r3
    25ee:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    25f2:	f013 0f08 	tst.w	r3, #8
    25f6:	d1fa      	bne.n	25ee <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    25f8:	2282      	movs	r2, #130	; 0x82
    25fa:	4b15      	ldr	r3, [pc, #84]	; (2650 <_oscctrl_init_referenced_generators+0xb4>)
    25fc:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2600:	461a      	mov	r2, r3
    2602:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2606:	f013 0f04 	tst.w	r3, #4
    260a:	d1fa      	bne.n	2602 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    260c:	4b10      	ldr	r3, [pc, #64]	; (2650 <_oscctrl_init_referenced_generators+0xb4>)
    260e:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2612:	f013 0f01 	tst.w	r3, #1
    2616:	d012      	beq.n	263e <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2618:	4a0d      	ldr	r2, [pc, #52]	; (2650 <_oscctrl_init_referenced_generators+0xb4>)
    261a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    261c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2620:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2624:	d1f9      	bne.n	261a <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2626:	4a09      	ldr	r2, [pc, #36]	; (264c <_oscctrl_init_referenced_generators+0xb0>)
    2628:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    262a:	2b00      	cmp	r3, #0
    262c:	d1fc      	bne.n	2628 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    262e:	4a07      	ldr	r2, [pc, #28]	; (264c <_oscctrl_init_referenced_generators+0xb0>)
    2630:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2632:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2636:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    263a:	6213      	str	r3, [r2, #32]
    263c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    263e:	4a04      	ldr	r2, [pc, #16]	; (2650 <_oscctrl_init_referenced_generators+0xb4>)
    2640:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2642:	f413 7f80 	tst.w	r3, #256	; 0x100
    2646:	d0fb      	beq.n	2640 <_oscctrl_init_referenced_generators+0xa4>
    2648:	e7ed      	b.n	2626 <_oscctrl_init_referenced_generators+0x8a>
    264a:	bf00      	nop
    264c:	40001c00 	.word	0x40001c00
    2650:	40001000 	.word	0x40001000
    2654:	04010000 	.word	0x04010000

00002658 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2658:	b500      	push	{lr}
    265a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    265c:	4b0d      	ldr	r3, [pc, #52]	; (2694 <RAMECC_Handler+0x3c>)
    265e:	789b      	ldrb	r3, [r3, #2]
    2660:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2662:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2664:	9b01      	ldr	r3, [sp, #4]
    2666:	f013 0f02 	tst.w	r3, #2
    266a:	d006      	beq.n	267a <RAMECC_Handler+0x22>
    266c:	4b0a      	ldr	r3, [pc, #40]	; (2698 <RAMECC_Handler+0x40>)
    266e:	681b      	ldr	r3, [r3, #0]
    2670:	b11b      	cbz	r3, 267a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2672:	4a08      	ldr	r2, [pc, #32]	; (2694 <RAMECC_Handler+0x3c>)
    2674:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2676:	4798      	blx	r3
    2678:	e009      	b.n	268e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    267a:	9b01      	ldr	r3, [sp, #4]
    267c:	f013 0f01 	tst.w	r3, #1
    2680:	d005      	beq.n	268e <RAMECC_Handler+0x36>
    2682:	4b05      	ldr	r3, [pc, #20]	; (2698 <RAMECC_Handler+0x40>)
    2684:	685b      	ldr	r3, [r3, #4]
    2686:	b113      	cbz	r3, 268e <RAMECC_Handler+0x36>
    2688:	4a02      	ldr	r2, [pc, #8]	; (2694 <RAMECC_Handler+0x3c>)
    268a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    268c:	4798      	blx	r3
	} else {
		return;
	}
}
    268e:	b003      	add	sp, #12
    2690:	f85d fb04 	ldr.w	pc, [sp], #4
    2694:	41020000 	.word	0x41020000
    2698:	20003e44 	.word	0x20003e44

0000269c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    269c:	b470      	push	{r4, r5, r6}
    269e:	b087      	sub	sp, #28
    26a0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    26a2:	466c      	mov	r4, sp
    26a4:	4d0c      	ldr	r5, [pc, #48]	; (26d8 <_sercom_get_hardware_index+0x3c>)
    26a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    26a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    26aa:	e895 0003 	ldmia.w	r5, {r0, r1}
    26ae:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    26b2:	9b00      	ldr	r3, [sp, #0]
    26b4:	42b3      	cmp	r3, r6
    26b6:	d00c      	beq.n	26d2 <_sercom_get_hardware_index+0x36>
    26b8:	4632      	mov	r2, r6
    26ba:	2001      	movs	r0, #1
    26bc:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    26c0:	4293      	cmp	r3, r2
    26c2:	d007      	beq.n	26d4 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    26c4:	3001      	adds	r0, #1
    26c6:	2806      	cmp	r0, #6
    26c8:	d1f8      	bne.n	26bc <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    26ca:	2000      	movs	r0, #0
}
    26cc:	b007      	add	sp, #28
    26ce:	bc70      	pop	{r4, r5, r6}
    26d0:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    26d2:	2000      	movs	r0, #0
			return i;
    26d4:	b2c0      	uxtb	r0, r0
    26d6:	e7f9      	b.n	26cc <_sercom_get_hardware_index+0x30>
    26d8:	000071c4 	.word	0x000071c4

000026dc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    26dc:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    26de:	4b03      	ldr	r3, [pc, #12]	; (26ec <_sercom_get_irq_num+0x10>)
    26e0:	4798      	blx	r3
    26e2:	0080      	lsls	r0, r0, #2
    26e4:	302e      	adds	r0, #46	; 0x2e
}
    26e6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    26ea:	bd08      	pop	{r3, pc}
    26ec:	0000269d 	.word	0x0000269d

000026f0 <_usart_init>:
{
    26f0:	b538      	push	{r3, r4, r5, lr}
    26f2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    26f4:	4b33      	ldr	r3, [pc, #204]	; (27c4 <_usart_init+0xd4>)
    26f6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    26f8:	2803      	cmp	r0, #3
    26fa:	d056      	beq.n	27aa <_usart_init+0xba>
    26fc:	2804      	cmp	r0, #4
    26fe:	d052      	beq.n	27a6 <_usart_init+0xb6>
    2700:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2702:	bf08      	it	eq
    2704:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    2706:	d006      	beq.n	2716 <_usart_init+0x26>
	ASSERT(false);
    2708:	f240 2263 	movw	r2, #611	; 0x263
    270c:	492e      	ldr	r1, [pc, #184]	; (27c8 <_usart_init+0xd8>)
    270e:	2000      	movs	r0, #0
    2710:	4b2e      	ldr	r3, [pc, #184]	; (27cc <_usart_init+0xdc>)
    2712:	4798      	blx	r3
	return 0;
    2714:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2716:	69e3      	ldr	r3, [r4, #28]
    2718:	f013 0f01 	tst.w	r3, #1
    271c:	d1fb      	bne.n	2716 <_usart_init+0x26>
    271e:	69e3      	ldr	r3, [r4, #28]
    2720:	f013 0f03 	tst.w	r3, #3
    2724:	d1fb      	bne.n	271e <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2726:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    2728:	f013 0f02 	tst.w	r3, #2
    272c:	d147      	bne.n	27be <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    272e:	69e3      	ldr	r3, [r4, #28]
    2730:	f013 0f01 	tst.w	r3, #1
    2734:	d1fb      	bne.n	272e <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    2736:	6823      	ldr	r3, [r4, #0]
    2738:	f043 0301 	orr.w	r3, r3, #1
    273c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    273e:	69e3      	ldr	r3, [r4, #28]
    2740:	f013 0f01 	tst.w	r3, #1
    2744:	d1fb      	bne.n	273e <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2746:	4610      	mov	r0, r2
    2748:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    274c:	4920      	ldr	r1, [pc, #128]	; (27d0 <_usart_init+0xe0>)
    274e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2752:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2754:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2756:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2758:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    275c:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    275e:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    2762:	d024      	beq.n	27ae <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2764:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2768:	4b19      	ldr	r3, [pc, #100]	; (27d0 <_usart_init+0xe0>)
    276a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    276e:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    2770:	89a3      	ldrh	r3, [r4, #12]
    2772:	f361 030c 	bfi	r3, r1, #0, #13
    2776:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2778:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    277c:	89a3      	ldrh	r3, [r4, #12]
    277e:	f362 334f 	bfi	r3, r2, #13, #3
    2782:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2784:	4b12      	ldr	r3, [pc, #72]	; (27d0 <_usart_init+0xe0>)
    2786:	0042      	lsls	r2, r0, #1
    2788:	1811      	adds	r1, r2, r0
    278a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    278e:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    2792:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2794:	4402      	add	r2, r0
    2796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    279a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    279e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    27a2:	2000      	movs	r0, #0
    27a4:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    27a6:	2201      	movs	r2, #1
    27a8:	e7b5      	b.n	2716 <_usart_init+0x26>
    27aa:	2200      	movs	r2, #0
    27ac:	e7b3      	b.n	2716 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    27ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    27b2:	4b07      	ldr	r3, [pc, #28]	; (27d0 <_usart_init+0xe0>)
    27b4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    27b8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    27ba:	81a3      	strh	r3, [r4, #12]
    27bc:	e7e2      	b.n	2784 <_usart_init+0x94>
		return ERR_DENIED;
    27be:	f06f 0010 	mvn.w	r0, #16
}
    27c2:	bd38      	pop	{r3, r4, r5, pc}
    27c4:	0000269d 	.word	0x0000269d
    27c8:	00007250 	.word	0x00007250
    27cc:	00001d55 	.word	0x00001d55
    27d0:	000071c4 	.word	0x000071c4

000027d4 <_usart_async_init>:
{
    27d4:	b570      	push	{r4, r5, r6, lr}
    27d6:	460d      	mov	r5, r1
	ASSERT(device);
    27d8:	4606      	mov	r6, r0
    27da:	22da      	movs	r2, #218	; 0xda
    27dc:	4916      	ldr	r1, [pc, #88]	; (2838 <_usart_async_init+0x64>)
    27de:	3000      	adds	r0, #0
    27e0:	bf18      	it	ne
    27e2:	2001      	movne	r0, #1
    27e4:	4b15      	ldr	r3, [pc, #84]	; (283c <_usart_async_init+0x68>)
    27e6:	4798      	blx	r3
	init_status = _usart_init(hw);
    27e8:	4628      	mov	r0, r5
    27ea:	4b15      	ldr	r3, [pc, #84]	; (2840 <_usart_async_init+0x6c>)
    27ec:	4798      	blx	r3
	if (init_status) {
    27ee:	4604      	mov	r4, r0
    27f0:	b9f8      	cbnz	r0, 2832 <_usart_async_init+0x5e>
	device->hw = hw;
    27f2:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    27f4:	4628      	mov	r0, r5
    27f6:	4b13      	ldr	r3, [pc, #76]	; (2844 <_usart_async_init+0x70>)
    27f8:	4798      	blx	r3
		irq = irq +2;
    27fa:	3002      	adds	r0, #2
    27fc:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    27fe:	f000 031f 	and.w	r3, r0, #31
    2802:	2201      	movs	r2, #1
    2804:	409a      	lsls	r2, r3
    2806:	0943      	lsrs	r3, r0, #5
    2808:	009b      	lsls	r3, r3, #2
    280a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    280e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2816:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    281a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    281e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2822:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2826:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    282a:	21e0      	movs	r1, #224	; 0xe0
    282c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2830:	601a      	str	r2, [r3, #0]
}
    2832:	4620      	mov	r0, r4
    2834:	bd70      	pop	{r4, r5, r6, pc}
    2836:	bf00      	nop
    2838:	00007250 	.word	0x00007250
    283c:	00001d55 	.word	0x00001d55
    2840:	000026f1 	.word	0x000026f1
    2844:	000026dd 	.word	0x000026dd

00002848 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2848:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    284a:	69d3      	ldr	r3, [r2, #28]
    284c:	f013 0f03 	tst.w	r3, #3
    2850:	d1fb      	bne.n	284a <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2852:	6813      	ldr	r3, [r2, #0]
    2854:	f043 0302 	orr.w	r3, r3, #2
    2858:	6013      	str	r3, [r2, #0]
    285a:	4770      	bx	lr

0000285c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    285c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    285e:	6299      	str	r1, [r3, #40]	; 0x28
    2860:	4770      	bx	lr

00002862 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    2862:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    2864:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    2866:	b2c0      	uxtb	r0, r0
    2868:	4770      	bx	lr

0000286a <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    286a:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    286c:	7e18      	ldrb	r0, [r3, #24]
}
    286e:	f000 0001 	and.w	r0, r0, #1
    2872:	4770      	bx	lr

00002874 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2874:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2876:	7e18      	ldrb	r0, [r3, #24]
}
    2878:	f3c0 0080 	ubfx	r0, r0, #2, #1
    287c:	4770      	bx	lr
	...

00002880 <_usart_async_set_irq_state>:
{
    2880:	b570      	push	{r4, r5, r6, lr}
    2882:	460c      	mov	r4, r1
    2884:	4616      	mov	r6, r2
	ASSERT(device);
    2886:	4605      	mov	r5, r0
    2888:	f240 2245 	movw	r2, #581	; 0x245
    288c:	4915      	ldr	r1, [pc, #84]	; (28e4 <_usart_async_set_irq_state+0x64>)
    288e:	3000      	adds	r0, #0
    2890:	bf18      	it	ne
    2892:	2001      	movne	r0, #1
    2894:	4b14      	ldr	r3, [pc, #80]	; (28e8 <_usart_async_set_irq_state+0x68>)
    2896:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    2898:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    289c:	d10d      	bne.n	28ba <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    289e:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    28a0:	b92e      	cbnz	r6, 28ae <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    28a2:	2201      	movs	r2, #1
    28a4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    28a6:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    28a8:	2202      	movs	r2, #2
    28aa:	751a      	strb	r2, [r3, #20]
    28ac:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    28ae:	2201      	movs	r2, #1
    28b0:	759a      	strb	r2, [r3, #22]
    28b2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    28b4:	2202      	movs	r2, #2
    28b6:	759a      	strb	r2, [r3, #22]
    28b8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    28ba:	2c01      	cmp	r4, #1
    28bc:	d002      	beq.n	28c4 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    28be:	2c03      	cmp	r4, #3
    28c0:	d008      	beq.n	28d4 <_usart_async_set_irq_state+0x54>
    28c2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    28c4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    28c6:	b916      	cbnz	r6, 28ce <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    28c8:	2204      	movs	r2, #4
    28ca:	751a      	strb	r2, [r3, #20]
    28cc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    28ce:	2204      	movs	r2, #4
    28d0:	759a      	strb	r2, [r3, #22]
    28d2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    28d4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    28d6:	b116      	cbz	r6, 28de <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    28d8:	2280      	movs	r2, #128	; 0x80
    28da:	759a      	strb	r2, [r3, #22]
}
    28dc:	e7f1      	b.n	28c2 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    28de:	2280      	movs	r2, #128	; 0x80
    28e0:	751a      	strb	r2, [r3, #20]
    28e2:	bd70      	pop	{r4, r5, r6, pc}
    28e4:	00007250 	.word	0x00007250
    28e8:	00001d55 	.word	0x00001d55

000028ec <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    28ec:	4b03      	ldr	r3, [pc, #12]	; (28fc <_delay_init+0x10>)
    28ee:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    28f2:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    28f4:	2205      	movs	r2, #5
    28f6:	601a      	str	r2, [r3, #0]
    28f8:	4770      	bx	lr
    28fa:	bf00      	nop
    28fc:	e000e010 	.word	0xe000e010

00002900 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2900:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2902:	b303      	cbz	r3, 2946 <_delay_cycles+0x46>
{
    2904:	b430      	push	{r4, r5}
    2906:	1e5d      	subs	r5, r3, #1
    2908:	b2ed      	uxtb	r5, r5
	while (n--) {
    290a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    290c:	4a12      	ldr	r2, [pc, #72]	; (2958 <_delay_cycles+0x58>)
    290e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2912:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2914:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2916:	6813      	ldr	r3, [r2, #0]
    2918:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    291c:	d0fb      	beq.n	2916 <_delay_cycles+0x16>
	while (n--) {
    291e:	3801      	subs	r0, #1
    2920:	b2c0      	uxtb	r0, r0
    2922:	28ff      	cmp	r0, #255	; 0xff
    2924:	d1f5      	bne.n	2912 <_delay_cycles+0x12>
    2926:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    292a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    292e:	3101      	adds	r1, #1
    2930:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2932:	4b09      	ldr	r3, [pc, #36]	; (2958 <_delay_cycles+0x58>)
    2934:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2936:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2938:	461a      	mov	r2, r3
    293a:	6813      	ldr	r3, [r2, #0]
    293c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2940:	d0fb      	beq.n	293a <_delay_cycles+0x3a>
		;
}
    2942:	bc30      	pop	{r4, r5}
    2944:	4770      	bx	lr
	SysTick->LOAD = buf;
    2946:	4b04      	ldr	r3, [pc, #16]	; (2958 <_delay_cycles+0x58>)
    2948:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    294a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    294c:	461a      	mov	r2, r3
    294e:	6813      	ldr	r3, [r2, #0]
    2950:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2954:	d0fb      	beq.n	294e <_delay_cycles+0x4e>
    2956:	4770      	bx	lr
    2958:	e000e010 	.word	0xe000e010

0000295c <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    295c:	b470      	push	{r4, r5, r6}
    295e:	b087      	sub	sp, #28
    2960:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2962:	ac01      	add	r4, sp, #4
    2964:	4d14      	ldr	r5, [pc, #80]	; (29b8 <_get_irq_num+0x5c>)
    2966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    296a:	682b      	ldr	r3, [r5, #0]
    296c:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    296e:	42b0      	cmp	r0, r6
    2970:	d017      	beq.n	29a2 <_get_irq_num+0x46>
    2972:	4631      	mov	r1, r6
    2974:	2301      	movs	r3, #1
    2976:	a801      	add	r0, sp, #4
    2978:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    297c:	428a      	cmp	r2, r1
    297e:	d006      	beq.n	298e <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2980:	3301      	adds	r3, #1
    2982:	2b05      	cmp	r3, #5
    2984:	d1f8      	bne.n	2978 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    2986:	2055      	movs	r0, #85	; 0x55
}
    2988:	b007      	add	sp, #28
    298a:	bc70      	pop	{r4, r5, r6}
    298c:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    298e:	b2db      	uxtb	r3, r3
    2990:	2b04      	cmp	r3, #4
    2992:	d80c      	bhi.n	29ae <_get_irq_num+0x52>
    2994:	e8df f003 	tbb	[pc, r3]
    2998:	070d0305 	.word	0x070d0305
    299c:	09          	.byte	0x09
    299d:	00          	.byte	0x00
		return TCC1_0_IRQn;
    299e:	205c      	movs	r0, #92	; 0x5c
    29a0:	e7f2      	b.n	2988 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    29a2:	2055      	movs	r0, #85	; 0x55
    29a4:	e7f0      	b.n	2988 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    29a6:	2065      	movs	r0, #101	; 0x65
    29a8:	e7ee      	b.n	2988 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    29aa:	2068      	movs	r0, #104	; 0x68
    29ac:	e7ec      	b.n	2988 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    29ae:	2089      	movs	r0, #137	; 0x89
    29b0:	e7ea      	b.n	2988 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    29b2:	2061      	movs	r0, #97	; 0x61
    29b4:	e7e8      	b.n	2988 <_get_irq_num+0x2c>
    29b6:	bf00      	nop
    29b8:	0000726c 	.word	0x0000726c

000029bc <_tcc_timer_deinit>:
{
    29bc:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    29be:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    29c0:	4620      	mov	r0, r4
    29c2:	4b10      	ldr	r3, [pc, #64]	; (2a04 <_tcc_timer_deinit+0x48>)
    29c4:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    29c6:	0943      	lsrs	r3, r0, #5
    29c8:	f000 001f 	and.w	r0, r0, #31
    29cc:	2201      	movs	r2, #1
    29ce:	fa02 f000 	lsl.w	r0, r2, r0
    29d2:	3320      	adds	r3, #32
    29d4:	4a0c      	ldr	r2, [pc, #48]	; (2a08 <_tcc_timer_deinit+0x4c>)
    29d6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    29da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29de:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    29e2:	68a3      	ldr	r3, [r4, #8]
    29e4:	f013 0f03 	tst.w	r3, #3
    29e8:	d1fb      	bne.n	29e2 <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    29ea:	6823      	ldr	r3, [r4, #0]
    29ec:	f023 0302 	bic.w	r3, r3, #2
    29f0:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    29f2:	68a3      	ldr	r3, [r4, #8]
    29f4:	f013 0f01 	tst.w	r3, #1
    29f8:	d1fb      	bne.n	29f2 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    29fa:	6823      	ldr	r3, [r4, #0]
    29fc:	f043 0301 	orr.w	r3, r3, #1
    2a00:	6023      	str	r3, [r4, #0]
    2a02:	bd10      	pop	{r4, pc}
    2a04:	0000295d 	.word	0x0000295d
    2a08:	e000e100 	.word	0xe000e100

00002a0c <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    2a0c:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a0e:	6893      	ldr	r3, [r2, #8]
    2a10:	f013 0f03 	tst.w	r3, #3
    2a14:	d1fb      	bne.n	2a0e <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2a16:	6813      	ldr	r3, [r2, #0]
    2a18:	f043 0302 	orr.w	r3, r3, #2
    2a1c:	6013      	str	r3, [r2, #0]
    2a1e:	4770      	bx	lr

00002a20 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    2a20:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a22:	6893      	ldr	r3, [r2, #8]
    2a24:	f013 0f03 	tst.w	r3, #3
    2a28:	d1fb      	bne.n	2a22 <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2a2a:	6813      	ldr	r3, [r2, #0]
    2a2c:	f023 0302 	bic.w	r3, r3, #2
    2a30:	6013      	str	r3, [r2, #0]
    2a32:	4770      	bx	lr

00002a34 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    2a34:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    2a36:	6419      	str	r1, [r3, #64]	; 0x40
    2a38:	4770      	bx	lr

00002a3a <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    2a3a:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    2a3c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2a3e:	4770      	bx	lr

00002a40 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    2a40:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a42:	6893      	ldr	r3, [r2, #8]
    2a44:	f013 0f03 	tst.w	r3, #3
    2a48:	d1fb      	bne.n	2a42 <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2a4a:	6810      	ldr	r0, [r2, #0]
}
    2a4c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2a50:	4770      	bx	lr

00002a52 <tcc_interrupt_handler>:
{
    2a52:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2a54:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    2a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    2a58:	f012 0f01 	tst.w	r2, #1
    2a5c:	d100      	bne.n	2a60 <tcc_interrupt_handler+0xe>
    2a5e:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    2a60:	2201      	movs	r2, #1
    2a62:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    2a64:	6803      	ldr	r3, [r0, #0]
    2a66:	4798      	blx	r3
}
    2a68:	e7f9      	b.n	2a5e <tcc_interrupt_handler+0xc>
	...

00002a6c <_tcc_timer_init>:
{
    2a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a6e:	b087      	sub	sp, #28
    2a70:	4605      	mov	r5, r0
    2a72:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2a74:	ae01      	add	r6, sp, #4
    2a76:	4f4e      	ldr	r7, [pc, #312]	; (2bb0 <_tcc_timer_init+0x144>)
    2a78:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2a7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2a7c:	683b      	ldr	r3, [r7, #0]
    2a7e:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    2a80:	42a0      	cmp	r0, r4
    2a82:	d00c      	beq.n	2a9e <_tcc_timer_init+0x32>
    2a84:	4621      	mov	r1, r4
    2a86:	2301      	movs	r3, #1
    2a88:	a801      	add	r0, sp, #4
    2a8a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    2a8e:	428a      	cmp	r2, r1
    2a90:	d006      	beq.n	2aa0 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2a92:	3301      	adds	r3, #1
    2a94:	2b05      	cmp	r3, #5
    2a96:	d1f8      	bne.n	2a8a <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2a98:	2600      	movs	r6, #0
			return i;
    2a9a:	b276      	sxtb	r6, r6
    2a9c:	e015      	b.n	2aca <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2a9e:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    2aa0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    2aa4:	d073      	beq.n	2b8e <_tcc_timer_init+0x122>
    2aa6:	2b01      	cmp	r3, #1
    2aa8:	d06b      	beq.n	2b82 <_tcc_timer_init+0x116>
    2aaa:	2b02      	cmp	r3, #2
    2aac:	d06b      	beq.n	2b86 <_tcc_timer_init+0x11a>
    2aae:	2b03      	cmp	r3, #3
    2ab0:	d06b      	beq.n	2b8a <_tcc_timer_init+0x11e>
    2ab2:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2ab4:	bf08      	it	eq
    2ab6:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    2ab8:	d0ef      	beq.n	2a9a <_tcc_timer_init+0x2e>
	ASSERT(false);
    2aba:	f240 128b 	movw	r2, #395	; 0x18b
    2abe:	493d      	ldr	r1, [pc, #244]	; (2bb4 <_tcc_timer_init+0x148>)
    2ac0:	2000      	movs	r0, #0
    2ac2:	4b3d      	ldr	r3, [pc, #244]	; (2bb8 <_tcc_timer_init+0x14c>)
    2ac4:	4798      	blx	r3
	return -1;
    2ac6:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    2aca:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    2acc:	22e4      	movs	r2, #228	; 0xe4
    2ace:	4939      	ldr	r1, [pc, #228]	; (2bb4 <_tcc_timer_init+0x148>)
    2ad0:	2001      	movs	r0, #1
    2ad2:	4b39      	ldr	r3, [pc, #228]	; (2bb8 <_tcc_timer_init+0x14c>)
    2ad4:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2ad6:	68a3      	ldr	r3, [r4, #8]
    2ad8:	f013 0f01 	tst.w	r3, #1
    2adc:	d1fb      	bne.n	2ad6 <_tcc_timer_init+0x6a>
    2ade:	68a3      	ldr	r3, [r4, #8]
    2ae0:	f013 0f03 	tst.w	r3, #3
    2ae4:	d1fb      	bne.n	2ade <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2ae6:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    2ae8:	f013 0f02 	tst.w	r3, #2
    2aec:	d15d      	bne.n	2baa <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2aee:	68a3      	ldr	r3, [r4, #8]
    2af0:	f013 0f01 	tst.w	r3, #1
    2af4:	d1fb      	bne.n	2aee <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2af6:	6823      	ldr	r3, [r4, #0]
    2af8:	f043 0301 	orr.w	r3, r3, #1
    2afc:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2afe:	68a3      	ldr	r3, [r4, #8]
    2b00:	f013 0f01 	tst.w	r3, #1
    2b04:	d1fb      	bne.n	2afe <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    2b06:	4a2a      	ldr	r2, [pc, #168]	; (2bb0 <_tcc_timer_init+0x144>)
    2b08:	00f1      	lsls	r1, r6, #3
    2b0a:	198b      	adds	r3, r1, r6
    2b0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b10:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    2b12:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    2b14:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    2b16:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    2b18:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    2b1a:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    2b1c:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    2b1e:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    2b20:	440e      	add	r6, r1
    2b22:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    2b26:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    2b28:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    2b2a:	2301      	movs	r3, #1
    2b2c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    2b2e:	4b23      	ldr	r3, [pc, #140]	; (2bbc <_tcc_timer_init+0x150>)
    2b30:	429c      	cmp	r4, r3
    2b32:	d02e      	beq.n	2b92 <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    2b34:	4b22      	ldr	r3, [pc, #136]	; (2bc0 <_tcc_timer_init+0x154>)
    2b36:	429c      	cmp	r4, r3
    2b38:	d02e      	beq.n	2b98 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    2b3a:	4b22      	ldr	r3, [pc, #136]	; (2bc4 <_tcc_timer_init+0x158>)
    2b3c:	429c      	cmp	r4, r3
    2b3e:	d02e      	beq.n	2b9e <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    2b40:	4b21      	ldr	r3, [pc, #132]	; (2bc8 <_tcc_timer_init+0x15c>)
    2b42:	429c      	cmp	r4, r3
    2b44:	d02e      	beq.n	2ba4 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    2b46:	4b21      	ldr	r3, [pc, #132]	; (2bcc <_tcc_timer_init+0x160>)
    2b48:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    2b4a:	bf04      	itt	eq
    2b4c:	4b20      	ldreq	r3, [pc, #128]	; (2bd0 <_tcc_timer_init+0x164>)
    2b4e:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2b50:	4620      	mov	r0, r4
    2b52:	4b20      	ldr	r3, [pc, #128]	; (2bd4 <_tcc_timer_init+0x168>)
    2b54:	4798      	blx	r3
    2b56:	f000 031f 	and.w	r3, r0, #31
    2b5a:	2201      	movs	r2, #1
    2b5c:	409a      	lsls	r2, r3
    2b5e:	0943      	lsrs	r3, r0, #5
    2b60:	009b      	lsls	r3, r3, #2
    2b62:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2b66:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2b6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2b6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b72:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b76:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b7a:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2b7c:	2000      	movs	r0, #0
}
    2b7e:	b007      	add	sp, #28
    2b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2b82:	2601      	movs	r6, #1
    2b84:	e789      	b.n	2a9a <_tcc_timer_init+0x2e>
    2b86:	2602      	movs	r6, #2
    2b88:	e787      	b.n	2a9a <_tcc_timer_init+0x2e>
    2b8a:	2603      	movs	r6, #3
    2b8c:	e785      	b.n	2a9a <_tcc_timer_init+0x2e>
    2b8e:	2600      	movs	r6, #0
    2b90:	e783      	b.n	2a9a <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    2b92:	4b0f      	ldr	r3, [pc, #60]	; (2bd0 <_tcc_timer_init+0x164>)
    2b94:	601d      	str	r5, [r3, #0]
    2b96:	e7d3      	b.n	2b40 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    2b98:	4b0d      	ldr	r3, [pc, #52]	; (2bd0 <_tcc_timer_init+0x164>)
    2b9a:	605d      	str	r5, [r3, #4]
    2b9c:	e7d3      	b.n	2b46 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    2b9e:	4b0c      	ldr	r3, [pc, #48]	; (2bd0 <_tcc_timer_init+0x164>)
    2ba0:	609d      	str	r5, [r3, #8]
    2ba2:	e7d5      	b.n	2b50 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    2ba4:	4b0a      	ldr	r3, [pc, #40]	; (2bd0 <_tcc_timer_init+0x164>)
    2ba6:	60dd      	str	r5, [r3, #12]
    2ba8:	e7d2      	b.n	2b50 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    2baa:	f06f 0010 	mvn.w	r0, #16
    2bae:	e7e6      	b.n	2b7e <_tcc_timer_init+0x112>
    2bb0:	0000726c 	.word	0x0000726c
    2bb4:	00007334 	.word	0x00007334
    2bb8:	00001d55 	.word	0x00001d55
    2bbc:	41016000 	.word	0x41016000
    2bc0:	41018000 	.word	0x41018000
    2bc4:	42000c00 	.word	0x42000c00
    2bc8:	42001000 	.word	0x42001000
    2bcc:	43001000 	.word	0x43001000
    2bd0:	20000ab4 	.word	0x20000ab4
    2bd4:	0000295d 	.word	0x0000295d

00002bd8 <_tcc_timer_set_irq>:
{
    2bd8:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    2bda:	68c0      	ldr	r0, [r0, #12]
    2bdc:	4b02      	ldr	r3, [pc, #8]	; (2be8 <_tcc_timer_set_irq+0x10>)
    2bde:	4798      	blx	r3
    2be0:	4b02      	ldr	r3, [pc, #8]	; (2bec <_tcc_timer_set_irq+0x14>)
    2be2:	4798      	blx	r3
    2be4:	bd08      	pop	{r3, pc}
    2be6:	bf00      	nop
    2be8:	0000295d 	.word	0x0000295d
    2bec:	00002079 	.word	0x00002079

00002bf0 <_tcc_get_timer>:
}
    2bf0:	4800      	ldr	r0, [pc, #0]	; (2bf4 <_tcc_get_timer+0x4>)
    2bf2:	4770      	bx	lr
    2bf4:	20000068 	.word	0x20000068

00002bf8 <TCC0_0_Handler>:
{
    2bf8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    2bfa:	4b02      	ldr	r3, [pc, #8]	; (2c04 <TCC0_0_Handler+0xc>)
    2bfc:	6818      	ldr	r0, [r3, #0]
    2bfe:	4b02      	ldr	r3, [pc, #8]	; (2c08 <TCC0_0_Handler+0x10>)
    2c00:	4798      	blx	r3
    2c02:	bd08      	pop	{r3, pc}
    2c04:	20000ab4 	.word	0x20000ab4
    2c08:	00002a53 	.word	0x00002a53

00002c0c <TCC1_0_Handler>:
{
    2c0c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    2c0e:	4b02      	ldr	r3, [pc, #8]	; (2c18 <TCC1_0_Handler+0xc>)
    2c10:	6858      	ldr	r0, [r3, #4]
    2c12:	4b02      	ldr	r3, [pc, #8]	; (2c1c <TCC1_0_Handler+0x10>)
    2c14:	4798      	blx	r3
    2c16:	bd08      	pop	{r3, pc}
    2c18:	20000ab4 	.word	0x20000ab4
    2c1c:	00002a53 	.word	0x00002a53

00002c20 <TCC2_0_Handler>:
{
    2c20:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    2c22:	4b02      	ldr	r3, [pc, #8]	; (2c2c <TCC2_0_Handler+0xc>)
    2c24:	6898      	ldr	r0, [r3, #8]
    2c26:	4b02      	ldr	r3, [pc, #8]	; (2c30 <TCC2_0_Handler+0x10>)
    2c28:	4798      	blx	r3
    2c2a:	bd08      	pop	{r3, pc}
    2c2c:	20000ab4 	.word	0x20000ab4
    2c30:	00002a53 	.word	0x00002a53

00002c34 <TCC3_0_Handler>:
{
    2c34:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    2c36:	4b02      	ldr	r3, [pc, #8]	; (2c40 <TCC3_0_Handler+0xc>)
    2c38:	68d8      	ldr	r0, [r3, #12]
    2c3a:	4b02      	ldr	r3, [pc, #8]	; (2c44 <TCC3_0_Handler+0x10>)
    2c3c:	4798      	blx	r3
    2c3e:	bd08      	pop	{r3, pc}
    2c40:	20000ab4 	.word	0x20000ab4
    2c44:	00002a53 	.word	0x00002a53

00002c48 <TCC4_0_Handler>:
{
    2c48:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    2c4a:	4b02      	ldr	r3, [pc, #8]	; (2c54 <TCC4_0_Handler+0xc>)
    2c4c:	6918      	ldr	r0, [r3, #16]
    2c4e:	4b02      	ldr	r3, [pc, #8]	; (2c58 <TCC4_0_Handler+0x10>)
    2c50:	4798      	blx	r3
    2c52:	bd08      	pop	{r3, pc}
    2c54:	20000ab4 	.word	0x20000ab4
    2c58:	00002a53 	.word	0x00002a53

00002c5c <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2c5c:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c5e:	6913      	ldr	r3, [r2, #16]
    2c60:	f013 0f03 	tst.w	r3, #3
    2c64:	d1fb      	bne.n	2c5e <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    2c66:	6813      	ldr	r3, [r2, #0]
    2c68:	f043 0302 	orr.w	r3, r3, #2
    2c6c:	6013      	str	r3, [r2, #0]
    2c6e:	4770      	bx	lr

00002c70 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2c70:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c72:	6913      	ldr	r3, [r2, #16]
    2c74:	f013 0f03 	tst.w	r3, #3
    2c78:	d1fb      	bne.n	2c72 <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2c7a:	6813      	ldr	r3, [r2, #0]
    2c7c:	f023 0302 	bic.w	r3, r3, #2
    2c80:	6013      	str	r3, [r2, #0]
    2c82:	4770      	bx	lr

00002c84 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    2c84:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2c86:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2c88:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2c8c:	2b02      	cmp	r3, #2
    2c8e:	d00b      	beq.n	2ca8 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2c90:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2c92:	f013 0f0c 	tst.w	r3, #12
    2c96:	d009      	beq.n	2cac <_tc_timer_set_period+0x28>
    2c98:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2c9a:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2c9e:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    2ca0:	bf04      	itt	eq
    2ca2:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2ca4:	76d1      	strbeq	r1, [r2, #27]
    2ca6:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2ca8:	61d1      	str	r1, [r2, #28]
    2caa:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    2cac:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2cae:	8391      	strh	r1, [r2, #28]
    2cb0:	4770      	bx	lr

00002cb2 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    2cb2:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2cb4:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2cb6:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2cba:	2b02      	cmp	r3, #2
    2cbc:	d00c      	beq.n	2cd8 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2cbe:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2cc0:	f013 0f0c 	tst.w	r3, #12
    2cc4:	d00a      	beq.n	2cdc <_tc_timer_get_period+0x2a>
    2cc6:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2cc8:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2ccc:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    2cce:	bf06      	itte	eq
    2cd0:	7ed0      	ldrbeq	r0, [r2, #27]
    2cd2:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    2cd4:	2000      	movne	r0, #0
}
    2cd6:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    2cd8:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    2cda:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    2cdc:	8b90      	ldrh	r0, [r2, #28]
    2cde:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2ce0:	4770      	bx	lr

00002ce2 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2ce2:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ce4:	6913      	ldr	r3, [r2, #16]
    2ce6:	f013 0f03 	tst.w	r3, #3
    2cea:	d1fb      	bne.n	2ce4 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2cec:	6810      	ldr	r0, [r2, #0]
}
    2cee:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2cf2:	4770      	bx	lr

00002cf4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2cf4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2cf6:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2cf8:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2cfa:	f012 0f01 	tst.w	r2, #1
    2cfe:	d100      	bne.n	2d02 <tc_interrupt_handler+0xe>
    2d00:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2d02:	2201      	movs	r2, #1
    2d04:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2d06:	6803      	ldr	r3, [r0, #0]
    2d08:	4798      	blx	r3
	}
}
    2d0a:	e7f9      	b.n	2d00 <tc_interrupt_handler+0xc>

00002d0c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2d0c:	b538      	push	{r3, r4, r5, lr}
    2d0e:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2d10:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2d12:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2d14:	f013 0f01 	tst.w	r3, #1
    2d18:	d004      	beq.n	2d24 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2d1a:	2301      	movs	r3, #1
    2d1c:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2d1e:	6803      	ldr	r3, [r0, #0]
    2d20:	b103      	cbz	r3, 2d24 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2d22:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2d24:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2d26:	f013 0f02 	tst.w	r3, #2
    2d2a:	d005      	beq.n	2d38 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2d2c:	2302      	movs	r3, #2
    2d2e:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2d30:	686b      	ldr	r3, [r5, #4]
    2d32:	b10b      	cbz	r3, 2d38 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2d34:	4628      	mov	r0, r5
    2d36:	4798      	blx	r3
    2d38:	bd38      	pop	{r3, r4, r5, pc}
	...

00002d3c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2d3c:	4b11      	ldr	r3, [pc, #68]	; (2d84 <_tc_init_irq_param+0x48>)
    2d3e:	4298      	cmp	r0, r3
    2d40:	d011      	beq.n	2d66 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2d42:	4b11      	ldr	r3, [pc, #68]	; (2d88 <_tc_init_irq_param+0x4c>)
    2d44:	4298      	cmp	r0, r3
    2d46:	d011      	beq.n	2d6c <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    2d48:	4b10      	ldr	r3, [pc, #64]	; (2d8c <_tc_init_irq_param+0x50>)
    2d4a:	4298      	cmp	r0, r3
    2d4c:	d011      	beq.n	2d72 <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    2d4e:	4b10      	ldr	r3, [pc, #64]	; (2d90 <_tc_init_irq_param+0x54>)
    2d50:	4298      	cmp	r0, r3
    2d52:	d011      	beq.n	2d78 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2d54:	4b0f      	ldr	r3, [pc, #60]	; (2d94 <_tc_init_irq_param+0x58>)
    2d56:	4298      	cmp	r0, r3
    2d58:	d011      	beq.n	2d7e <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    2d5a:	4b0f      	ldr	r3, [pc, #60]	; (2d98 <_tc_init_irq_param+0x5c>)
    2d5c:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    2d5e:	bf04      	itt	eq
    2d60:	4b0e      	ldreq	r3, [pc, #56]	; (2d9c <_tc_init_irq_param+0x60>)
    2d62:	6159      	streq	r1, [r3, #20]
    2d64:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2d66:	4b0d      	ldr	r3, [pc, #52]	; (2d9c <_tc_init_irq_param+0x60>)
    2d68:	6019      	str	r1, [r3, #0]
    2d6a:	e7f0      	b.n	2d4e <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    2d6c:	4b0b      	ldr	r3, [pc, #44]	; (2d9c <_tc_init_irq_param+0x60>)
    2d6e:	6059      	str	r1, [r3, #4]
    2d70:	e7f0      	b.n	2d54 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    2d72:	4b0a      	ldr	r3, [pc, #40]	; (2d9c <_tc_init_irq_param+0x60>)
    2d74:	6099      	str	r1, [r3, #8]
    2d76:	e7f0      	b.n	2d5a <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    2d78:	4b08      	ldr	r3, [pc, #32]	; (2d9c <_tc_init_irq_param+0x60>)
    2d7a:	60d9      	str	r1, [r3, #12]
    2d7c:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    2d7e:	4b07      	ldr	r3, [pc, #28]	; (2d9c <_tc_init_irq_param+0x60>)
    2d80:	6119      	str	r1, [r3, #16]
    2d82:	4770      	bx	lr
    2d84:	40003800 	.word	0x40003800
    2d88:	40003c00 	.word	0x40003c00
    2d8c:	4101a000 	.word	0x4101a000
    2d90:	4101c000 	.word	0x4101c000
    2d94:	42001400 	.word	0x42001400
    2d98:	42001800 	.word	0x42001800
    2d9c:	20000ac8 	.word	0x20000ac8

00002da0 <get_tc_index>:
{
    2da0:	b570      	push	{r4, r5, r6, lr}
    2da2:	b086      	sub	sp, #24
    2da4:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2da6:	466c      	mov	r4, sp
    2da8:	4d18      	ldr	r5, [pc, #96]	; (2e0c <get_tc_index+0x6c>)
    2daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2dac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2dae:	e895 0003 	ldmia.w	r5, {r0, r1}
    2db2:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2db6:	9b00      	ldr	r3, [sp, #0]
    2db8:	42b3      	cmp	r3, r6
    2dba:	d021      	beq.n	2e00 <get_tc_index+0x60>
    2dbc:	4631      	mov	r1, r6
    2dbe:	2301      	movs	r3, #1
    2dc0:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2dc4:	428a      	cmp	r2, r1
    2dc6:	d01c      	beq.n	2e02 <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2dc8:	3301      	adds	r3, #1
    2dca:	2b06      	cmp	r3, #6
    2dcc:	d1f8      	bne.n	2dc0 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    2dce:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2dd0:	4a0f      	ldr	r2, [pc, #60]	; (2e10 <get_tc_index+0x70>)
    2dd2:	7812      	ldrb	r2, [r2, #0]
    2dd4:	429a      	cmp	r2, r3
    2dd6:	d016      	beq.n	2e06 <get_tc_index+0x66>
    2dd8:	4a0d      	ldr	r2, [pc, #52]	; (2e10 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2dda:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    2ddc:	7d11      	ldrb	r1, [r2, #20]
    2dde:	4299      	cmp	r1, r3
    2de0:	d012      	beq.n	2e08 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2de2:	3001      	adds	r0, #1
    2de4:	b2c0      	uxtb	r0, r0
    2de6:	3214      	adds	r2, #20
    2de8:	2806      	cmp	r0, #6
    2dea:	d1f7      	bne.n	2ddc <get_tc_index+0x3c>
	ASSERT(false);
    2dec:	f240 2227 	movw	r2, #551	; 0x227
    2df0:	4908      	ldr	r1, [pc, #32]	; (2e14 <get_tc_index+0x74>)
    2df2:	2000      	movs	r0, #0
    2df4:	4b08      	ldr	r3, [pc, #32]	; (2e18 <get_tc_index+0x78>)
    2df6:	4798      	blx	r3
	return -1;
    2df8:	f04f 30ff 	mov.w	r0, #4294967295
}
    2dfc:	b006      	add	sp, #24
    2dfe:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2e00:	2300      	movs	r3, #0
			return i;
    2e02:	b2db      	uxtb	r3, r3
    2e04:	e7e4      	b.n	2dd0 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2e06:	2000      	movs	r0, #0
			return i;
    2e08:	b240      	sxtb	r0, r0
    2e0a:	e7f7      	b.n	2dfc <get_tc_index+0x5c>
    2e0c:	0000734c 	.word	0x0000734c
    2e10:	20000088 	.word	0x20000088
    2e14:	00007364 	.word	0x00007364
    2e18:	00001d55 	.word	0x00001d55

00002e1c <_tc_timer_init>:
{
    2e1c:	b570      	push	{r4, r5, r6, lr}
    2e1e:	4606      	mov	r6, r0
    2e20:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2e22:	4608      	mov	r0, r1
    2e24:	4b48      	ldr	r3, [pc, #288]	; (2f48 <_tc_timer_init+0x12c>)
    2e26:	4798      	blx	r3
    2e28:	4605      	mov	r5, r0
	device->hw = hw;
    2e2a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2e2c:	22af      	movs	r2, #175	; 0xaf
    2e2e:	4947      	ldr	r1, [pc, #284]	; (2f4c <_tc_timer_init+0x130>)
    2e30:	2001      	movs	r0, #1
    2e32:	4b47      	ldr	r3, [pc, #284]	; (2f50 <_tc_timer_init+0x134>)
    2e34:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e36:	6923      	ldr	r3, [r4, #16]
    2e38:	f013 0f01 	tst.w	r3, #1
    2e3c:	d1fb      	bne.n	2e36 <_tc_timer_init+0x1a>
    2e3e:	6923      	ldr	r3, [r4, #16]
    2e40:	f013 0f03 	tst.w	r3, #3
    2e44:	d1fb      	bne.n	2e3e <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2e46:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2e48:	f013 0f02 	tst.w	r3, #2
    2e4c:	d175      	bne.n	2f3a <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e4e:	6923      	ldr	r3, [r4, #16]
    2e50:	f013 0f01 	tst.w	r3, #1
    2e54:	d1fb      	bne.n	2e4e <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2e56:	6823      	ldr	r3, [r4, #0]
    2e58:	f043 0301 	orr.w	r3, r3, #1
    2e5c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e5e:	6923      	ldr	r3, [r4, #16]
    2e60:	f013 0f01 	tst.w	r3, #1
    2e64:	d1fb      	bne.n	2e5e <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2e66:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e6a:	4a3a      	ldr	r2, [pc, #232]	; (2f54 <_tc_timer_init+0x138>)
    2e6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e70:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2e72:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2e74:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2e76:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2e78:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2e7a:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2e7c:	2201      	movs	r2, #1
    2e7e:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2e80:	685b      	ldr	r3, [r3, #4]
    2e82:	f003 030c 	and.w	r3, r3, #12
    2e86:	2b08      	cmp	r3, #8
    2e88:	d03f      	beq.n	2f0a <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2e8a:	2b00      	cmp	r3, #0
    2e8c:	d147      	bne.n	2f1e <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2e8e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e92:	4a30      	ldr	r2, [pc, #192]	; (2f54 <_tc_timer_init+0x138>)
    2e94:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e98:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2e9a:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2e9c:	8a1b      	ldrh	r3, [r3, #16]
    2e9e:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    2ea0:	2301      	movs	r3, #1
    2ea2:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2ea4:	4631      	mov	r1, r6
    2ea6:	4620      	mov	r0, r4
    2ea8:	4b2b      	ldr	r3, [pc, #172]	; (2f58 <_tc_timer_init+0x13c>)
    2eaa:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2eac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2eb0:	4a28      	ldr	r2, [pc, #160]	; (2f54 <_tc_timer_init+0x138>)
    2eb2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2eb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2eba:	2b00      	cmp	r3, #0
    2ebc:	db40      	blt.n	2f40 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ebe:	095a      	lsrs	r2, r3, #5
    2ec0:	f003 031f 	and.w	r3, r3, #31
    2ec4:	2101      	movs	r1, #1
    2ec6:	fa01 f303 	lsl.w	r3, r1, r3
    2eca:	3220      	adds	r2, #32
    2ecc:	4923      	ldr	r1, [pc, #140]	; (2f5c <_tc_timer_init+0x140>)
    2ece:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2ed2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ed6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2eda:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2ede:	4b1d      	ldr	r3, [pc, #116]	; (2f54 <_tc_timer_init+0x138>)
    2ee0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2ee4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2ee8:	2b00      	cmp	r3, #0
    2eea:	db2b      	blt.n	2f44 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2eec:	0959      	lsrs	r1, r3, #5
    2eee:	f003 031f 	and.w	r3, r3, #31
    2ef2:	2201      	movs	r2, #1
    2ef4:	fa02 f303 	lsl.w	r3, r2, r3
    2ef8:	4a18      	ldr	r2, [pc, #96]	; (2f5c <_tc_timer_init+0x140>)
    2efa:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2efe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2f02:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    2f06:	2000      	movs	r0, #0
    2f08:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2f0a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f0e:	4a11      	ldr	r2, [pc, #68]	; (2f54 <_tc_timer_init+0x138>)
    2f10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f14:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2f16:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2f18:	691b      	ldr	r3, [r3, #16]
    2f1a:	6223      	str	r3, [r4, #32]
    2f1c:	e7c0      	b.n	2ea0 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2f1e:	2b04      	cmp	r3, #4
    2f20:	d1be      	bne.n	2ea0 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2f22:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f26:	4a0b      	ldr	r2, [pc, #44]	; (2f54 <_tc_timer_init+0x138>)
    2f28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f2c:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2f2e:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2f30:	7c1a      	ldrb	r2, [r3, #16]
    2f32:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    2f34:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2f36:	76e3      	strb	r3, [r4, #27]
    2f38:	e7b2      	b.n	2ea0 <_tc_timer_init+0x84>
		return ERR_DENIED;
    2f3a:	f06f 0010 	mvn.w	r0, #16
    2f3e:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    2f40:	2000      	movs	r0, #0
    2f42:	bd70      	pop	{r4, r5, r6, pc}
    2f44:	2000      	movs	r0, #0
}
    2f46:	bd70      	pop	{r4, r5, r6, pc}
    2f48:	00002da1 	.word	0x00002da1
    2f4c:	00007364 	.word	0x00007364
    2f50:	00001d55 	.word	0x00001d55
    2f54:	20000088 	.word	0x20000088
    2f58:	00002d3d 	.word	0x00002d3d
    2f5c:	e000e100 	.word	0xe000e100

00002f60 <_tc_timer_deinit>:
{
    2f60:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    2f62:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2f64:	4620      	mov	r0, r4
    2f66:	4b18      	ldr	r3, [pc, #96]	; (2fc8 <_tc_timer_deinit+0x68>)
    2f68:	4798      	blx	r3
    2f6a:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2f6c:	f240 1201 	movw	r2, #257	; 0x101
    2f70:	4916      	ldr	r1, [pc, #88]	; (2fcc <_tc_timer_deinit+0x6c>)
    2f72:	2001      	movs	r0, #1
    2f74:	4b16      	ldr	r3, [pc, #88]	; (2fd0 <_tc_timer_deinit+0x70>)
    2f76:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2f78:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2f7c:	4b15      	ldr	r3, [pc, #84]	; (2fd4 <_tc_timer_deinit+0x74>)
    2f7e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2f82:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2f86:	2b00      	cmp	r3, #0
    2f88:	db0d      	blt.n	2fa6 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2f8a:	095a      	lsrs	r2, r3, #5
    2f8c:	f003 031f 	and.w	r3, r3, #31
    2f90:	2101      	movs	r1, #1
    2f92:	fa01 f303 	lsl.w	r3, r1, r3
    2f96:	3220      	adds	r2, #32
    2f98:	490f      	ldr	r1, [pc, #60]	; (2fd8 <_tc_timer_deinit+0x78>)
    2f9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2f9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fa2:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2fa6:	6923      	ldr	r3, [r4, #16]
    2fa8:	f013 0f03 	tst.w	r3, #3
    2fac:	d1fb      	bne.n	2fa6 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2fae:	6823      	ldr	r3, [r4, #0]
    2fb0:	f023 0302 	bic.w	r3, r3, #2
    2fb4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2fb6:	6923      	ldr	r3, [r4, #16]
    2fb8:	f013 0f01 	tst.w	r3, #1
    2fbc:	d1fb      	bne.n	2fb6 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2fbe:	6823      	ldr	r3, [r4, #0]
    2fc0:	f043 0301 	orr.w	r3, r3, #1
    2fc4:	6023      	str	r3, [r4, #0]
    2fc6:	bd38      	pop	{r3, r4, r5, pc}
    2fc8:	00002da1 	.word	0x00002da1
    2fcc:	00007364 	.word	0x00007364
    2fd0:	00001d55 	.word	0x00001d55
    2fd4:	20000088 	.word	0x20000088
    2fd8:	e000e100 	.word	0xe000e100

00002fdc <_tc_timer_set_irq>:
{
    2fdc:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2fde:	68c0      	ldr	r0, [r0, #12]
    2fe0:	4b08      	ldr	r3, [pc, #32]	; (3004 <_tc_timer_set_irq+0x28>)
    2fe2:	4798      	blx	r3
    2fe4:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2fe6:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    2fea:	4907      	ldr	r1, [pc, #28]	; (3008 <_tc_timer_set_irq+0x2c>)
    2fec:	2001      	movs	r0, #1
    2fee:	4b07      	ldr	r3, [pc, #28]	; (300c <_tc_timer_set_irq+0x30>)
    2ff0:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2ff2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    2ff6:	4b06      	ldr	r3, [pc, #24]	; (3010 <_tc_timer_set_irq+0x34>)
    2ff8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2ffc:	78a0      	ldrb	r0, [r4, #2]
    2ffe:	4b05      	ldr	r3, [pc, #20]	; (3014 <_tc_timer_set_irq+0x38>)
    3000:	4798      	blx	r3
    3002:	bd10      	pop	{r4, pc}
    3004:	00002da1 	.word	0x00002da1
    3008:	00007364 	.word	0x00007364
    300c:	00001d55 	.word	0x00001d55
    3010:	20000088 	.word	0x20000088
    3014:	00002079 	.word	0x00002079

00003018 <_pwm_init>:
{
    3018:	b570      	push	{r4, r5, r6, lr}
    301a:	4606      	mov	r6, r0
    301c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    301e:	4608      	mov	r0, r1
    3020:	4b3f      	ldr	r3, [pc, #252]	; (3120 <_pwm_init+0x108>)
    3022:	4798      	blx	r3
    3024:	4605      	mov	r5, r0
	device->hw = hw;
    3026:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3028:	6923      	ldr	r3, [r4, #16]
    302a:	f013 0f01 	tst.w	r3, #1
    302e:	d1fb      	bne.n	3028 <_pwm_init+0x10>
    3030:	6923      	ldr	r3, [r4, #16]
    3032:	f013 0f03 	tst.w	r3, #3
    3036:	d1fb      	bne.n	3030 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3038:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    303a:	f013 0f02 	tst.w	r3, #2
    303e:	d165      	bne.n	310c <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3040:	6923      	ldr	r3, [r4, #16]
    3042:	f013 0f01 	tst.w	r3, #1
    3046:	d1fb      	bne.n	3040 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    3048:	6823      	ldr	r3, [r4, #0]
    304a:	f043 0301 	orr.w	r3, r3, #1
    304e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3050:	6923      	ldr	r3, [r4, #16]
    3052:	f013 0f01 	tst.w	r3, #1
    3056:	d1fb      	bne.n	3050 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3058:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    305c:	4a31      	ldr	r2, [pc, #196]	; (3124 <_pwm_init+0x10c>)
    305e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3062:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3064:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3066:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    3068:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    306a:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    306c:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    306e:	2203      	movs	r2, #3
    3070:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3072:	685b      	ldr	r3, [r3, #4]
    3074:	f003 030c 	and.w	r3, r3, #12
    3078:	2b08      	cmp	r3, #8
    307a:	d03d      	beq.n	30f8 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    307c:	2b00      	cmp	r3, #0
    307e:	d148      	bne.n	3112 <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3080:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3084:	4a27      	ldr	r2, [pc, #156]	; (3124 <_pwm_init+0x10c>)
    3086:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    308a:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    308c:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    308e:	8a1b      	ldrh	r3, [r3, #16]
    3090:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    3092:	4631      	mov	r1, r6
    3094:	4620      	mov	r0, r4
    3096:	4b24      	ldr	r3, [pc, #144]	; (3128 <_pwm_init+0x110>)
    3098:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    309a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    309e:	4a21      	ldr	r2, [pc, #132]	; (3124 <_pwm_init+0x10c>)
    30a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    30a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    30a8:	2b00      	cmp	r3, #0
    30aa:	db35      	blt.n	3118 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    30ac:	095a      	lsrs	r2, r3, #5
    30ae:	f003 031f 	and.w	r3, r3, #31
    30b2:	2101      	movs	r1, #1
    30b4:	fa01 f303 	lsl.w	r3, r1, r3
    30b8:	3220      	adds	r2, #32
    30ba:	491c      	ldr	r1, [pc, #112]	; (312c <_pwm_init+0x114>)
    30bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    30c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30c4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    30c8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    30cc:	4b15      	ldr	r3, [pc, #84]	; (3124 <_pwm_init+0x10c>)
    30ce:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    30d2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    30d6:	2b00      	cmp	r3, #0
    30d8:	db20      	blt.n	311c <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    30da:	0959      	lsrs	r1, r3, #5
    30dc:	f003 031f 	and.w	r3, r3, #31
    30e0:	2201      	movs	r2, #1
    30e2:	fa02 f303 	lsl.w	r3, r2, r3
    30e6:	4a11      	ldr	r2, [pc, #68]	; (312c <_pwm_init+0x114>)
    30e8:	f101 0060 	add.w	r0, r1, #96	; 0x60
    30ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    30f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    30f4:	2000      	movs	r0, #0
    30f6:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    30f8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    30fc:	4a09      	ldr	r2, [pc, #36]	; (3124 <_pwm_init+0x10c>)
    30fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3102:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3104:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3106:	691b      	ldr	r3, [r3, #16]
    3108:	6223      	str	r3, [r4, #32]
    310a:	e7c2      	b.n	3092 <_pwm_init+0x7a>
		return ERR_DENIED;
    310c:	f06f 0010 	mvn.w	r0, #16
    3110:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    3112:	f04f 30ff 	mov.w	r0, #4294967295
    3116:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    3118:	2000      	movs	r0, #0
    311a:	bd70      	pop	{r4, r5, r6, pc}
    311c:	2000      	movs	r0, #0
}
    311e:	bd70      	pop	{r4, r5, r6, pc}
    3120:	00002da1 	.word	0x00002da1
    3124:	20000088 	.word	0x20000088
    3128:	00002d3d 	.word	0x00002d3d
    312c:	e000e100 	.word	0xe000e100

00003130 <_tc_get_timer>:
}
    3130:	4800      	ldr	r0, [pc, #0]	; (3134 <_tc_get_timer+0x4>)
    3132:	4770      	bx	lr
    3134:	20000100 	.word	0x20000100

00003138 <_tc_get_pwm>:
}
    3138:	2000      	movs	r0, #0
    313a:	4770      	bx	lr

0000313c <TC0_Handler>:
{
    313c:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    313e:	4b02      	ldr	r3, [pc, #8]	; (3148 <TC0_Handler+0xc>)
    3140:	6818      	ldr	r0, [r3, #0]
    3142:	4b02      	ldr	r3, [pc, #8]	; (314c <TC0_Handler+0x10>)
    3144:	4798      	blx	r3
    3146:	bd08      	pop	{r3, pc}
    3148:	20000ac8 	.word	0x20000ac8
    314c:	00002d0d 	.word	0x00002d0d

00003150 <TC1_Handler>:
{
    3150:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    3152:	4b02      	ldr	r3, [pc, #8]	; (315c <TC1_Handler+0xc>)
    3154:	6858      	ldr	r0, [r3, #4]
    3156:	4b02      	ldr	r3, [pc, #8]	; (3160 <TC1_Handler+0x10>)
    3158:	4798      	blx	r3
    315a:	bd08      	pop	{r3, pc}
    315c:	20000ac8 	.word	0x20000ac8
    3160:	00002d0d 	.word	0x00002d0d

00003164 <TC2_Handler>:
{
    3164:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    3166:	4b02      	ldr	r3, [pc, #8]	; (3170 <TC2_Handler+0xc>)
    3168:	6898      	ldr	r0, [r3, #8]
    316a:	4b02      	ldr	r3, [pc, #8]	; (3174 <TC2_Handler+0x10>)
    316c:	4798      	blx	r3
    316e:	bd08      	pop	{r3, pc}
    3170:	20000ac8 	.word	0x20000ac8
    3174:	00002d0d 	.word	0x00002d0d

00003178 <TC3_Handler>:
{
    3178:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    317a:	4b02      	ldr	r3, [pc, #8]	; (3184 <TC3_Handler+0xc>)
    317c:	68d8      	ldr	r0, [r3, #12]
    317e:	4b02      	ldr	r3, [pc, #8]	; (3188 <TC3_Handler+0x10>)
    3180:	4798      	blx	r3
    3182:	bd08      	pop	{r3, pc}
    3184:	20000ac8 	.word	0x20000ac8
    3188:	00002cf5 	.word	0x00002cf5

0000318c <TC4_Handler>:
{
    318c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    318e:	4b02      	ldr	r3, [pc, #8]	; (3198 <TC4_Handler+0xc>)
    3190:	6918      	ldr	r0, [r3, #16]
    3192:	4b02      	ldr	r3, [pc, #8]	; (319c <TC4_Handler+0x10>)
    3194:	4798      	blx	r3
    3196:	bd08      	pop	{r3, pc}
    3198:	20000ac8 	.word	0x20000ac8
    319c:	00002cf5 	.word	0x00002cf5

000031a0 <TC5_Handler>:
{
    31a0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    31a2:	4b02      	ldr	r3, [pc, #8]	; (31ac <TC5_Handler+0xc>)
    31a4:	6958      	ldr	r0, [r3, #20]
    31a6:	4b02      	ldr	r3, [pc, #8]	; (31b0 <TC5_Handler+0x10>)
    31a8:	4798      	blx	r3
    31aa:	bd08      	pop	{r3, pc}
    31ac:	20000ac8 	.word	0x20000ac8
    31b0:	00002cf5 	.word	0x00002cf5

000031b4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    31b4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    31b6:	4604      	mov	r4, r0
    31b8:	b330      	cbz	r0, 3208 <_wdt_init+0x54>
    31ba:	6800      	ldr	r0, [r0, #0]
    31bc:	3000      	adds	r0, #0
    31be:	bf18      	it	ne
    31c0:	2001      	movne	r0, #1
    31c2:	225a      	movs	r2, #90	; 0x5a
    31c4:	4914      	ldr	r1, [pc, #80]	; (3218 <_wdt_init+0x64>)
    31c6:	4b15      	ldr	r3, [pc, #84]	; (321c <_wdt_init+0x68>)
    31c8:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    31ca:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    31cc:	689a      	ldr	r2, [r3, #8]
    31ce:	f012 0f0e 	tst.w	r2, #14
    31d2:	d1fb      	bne.n	31cc <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    31d4:	781a      	ldrb	r2, [r3, #0]
    31d6:	09d2      	lsrs	r2, r2, #7
    31d8:	d118      	bne.n	320c <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    31da:	689a      	ldr	r2, [r3, #8]
    31dc:	f012 0f0e 	tst.w	r2, #14
    31e0:	d1fb      	bne.n	31da <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    31e2:	781a      	ldrb	r2, [r3, #0]
    31e4:	f012 0f02 	tst.w	r2, #2
    31e8:	d113      	bne.n	3212 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    31ea:	689a      	ldr	r2, [r3, #8]
    31ec:	f012 0f0e 	tst.w	r2, #14
    31f0:	d1fb      	bne.n	31ea <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    31f2:	781a      	ldrb	r2, [r3, #0]
    31f4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    31f8:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    31fa:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    31fc:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    31fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    3202:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    3204:	2000      	movs	r0, #0
    3206:	bd10      	pop	{r4, pc}
    3208:	2000      	movs	r0, #0
    320a:	e7da      	b.n	31c2 <_wdt_init+0xe>
		return ERR_DENIED;
    320c:	f06f 0010 	mvn.w	r0, #16
    3210:	bd10      	pop	{r4, pc}
    3212:	f06f 0010 	mvn.w	r0, #16
}
    3216:	bd10      	pop	{r4, pc}
    3218:	00007378 	.word	0x00007378
    321c:	00001d55 	.word	0x00001d55

00003220 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    3220:	b570      	push	{r4, r5, r6, lr}
    3222:	460d      	mov	r5, r1
    3224:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3226:	4606      	mov	r6, r0
    3228:	2800      	cmp	r0, #0
    322a:	d044      	beq.n	32b6 <_wdt_set_timeout_period+0x96>
    322c:	6800      	ldr	r0, [r0, #0]
    322e:	3000      	adds	r0, #0
    3230:	bf18      	it	ne
    3232:	2001      	movne	r0, #1
    3234:	2284      	movs	r2, #132	; 0x84
    3236:	493f      	ldr	r1, [pc, #252]	; (3334 <_wdt_set_timeout_period+0x114>)
    3238:	4b3f      	ldr	r3, [pc, #252]	; (3338 <_wdt_set_timeout_period+0x118>)
    323a:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    323c:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    323e:	6893      	ldr	r3, [r2, #8]
    3240:	f013 0f0e 	tst.w	r3, #14
    3244:	d1fb      	bne.n	323e <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    3246:	7813      	ldrb	r3, [r2, #0]
    3248:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    324c:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    324e:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3250:	688b      	ldr	r3, [r1, #8]
    3252:	f013 0f0e 	tst.w	r3, #14
    3256:	d1fb      	bne.n	3250 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    3258:	780b      	ldrb	r3, [r1, #0]
    325a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    325e:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    3260:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3262:	6899      	ldr	r1, [r3, #8]
    3264:	f011 0f0e 	tst.w	r1, #14
    3268:	d1fb      	bne.n	3262 <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    326a:	781a      	ldrb	r2, [r3, #0]
    326c:	09d2      	lsrs	r2, r2, #7
    326e:	d158      	bne.n	3322 <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3270:	6899      	ldr	r1, [r3, #8]
    3272:	f011 0f0e 	tst.w	r1, #14
    3276:	d1fb      	bne.n	3270 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3278:	781a      	ldrb	r2, [r3, #0]
    327a:	f012 0f02 	tst.w	r2, #2
    327e:	d153      	bne.n	3328 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    3280:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    3284:	4628      	mov	r0, r5
    3286:	2100      	movs	r1, #0
    3288:	ea50 0201 	orrs.w	r2, r0, r1
    328c:	d14f      	bne.n	332e <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    328e:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    3292:	d038      	beq.n	3306 <_wdt_set_timeout_period+0xe6>
    3294:	d911      	bls.n	32ba <_wdt_set_timeout_period+0x9a>
    3296:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    329a:	d038      	beq.n	330e <_wdt_set_timeout_period+0xee>
    329c:	d927      	bls.n	32ee <_wdt_set_timeout_period+0xce>
    329e:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    32a2:	d038      	beq.n	3316 <_wdt_set_timeout_period+0xf6>
    32a4:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    32a8:	d037      	beq.n	331a <_wdt_set_timeout_period+0xfa>
    32aa:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    32ae:	d030      	beq.n	3312 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    32b0:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    32b4:	bd70      	pop	{r4, r5, r6, pc}
    32b6:	2000      	movs	r0, #0
    32b8:	e7bc      	b.n	3234 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    32ba:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    32be:	d01e      	beq.n	32fe <_wdt_set_timeout_period+0xde>
    32c0:	d80d      	bhi.n	32de <_wdt_set_timeout_period+0xbe>
    32c2:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    32c6:	d02a      	beq.n	331e <_wdt_set_timeout_period+0xfe>
    32c8:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    32cc:	d1f0      	bne.n	32b0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    32ce:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    32d0:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    32d2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    32d6:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    32d8:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    32da:	2000      	movs	r0, #0
    32dc:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    32de:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    32e2:	d00e      	beq.n	3302 <_wdt_set_timeout_period+0xe2>
    32e4:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    32e8:	d1e2      	bne.n	32b0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    32ea:	2104      	movs	r1, #4
			break;
    32ec:	e7f0      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    32ee:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    32f2:	d00a      	beq.n	330a <_wdt_set_timeout_period+0xea>
    32f4:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    32f8:	d1da      	bne.n	32b0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    32fa:	2107      	movs	r1, #7
			break;
    32fc:	e7e8      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    32fe:	2102      	movs	r1, #2
			break;
    3300:	e7e6      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    3302:	2103      	movs	r1, #3
			break;
    3304:	e7e4      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    3306:	2105      	movs	r1, #5
			break;
    3308:	e7e2      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    330a:	2106      	movs	r1, #6
			break;
    330c:	e7e0      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    330e:	2108      	movs	r1, #8
			break;
    3310:	e7de      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    3312:	2109      	movs	r1, #9
			break;
    3314:	e7dc      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    3316:	210a      	movs	r1, #10
			break;
    3318:	e7da      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    331a:	210b      	movs	r1, #11
			break;
    331c:	e7d8      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    331e:	2100      	movs	r1, #0
    3320:	e7d6      	b.n	32d0 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    3322:	f06f 0010 	mvn.w	r0, #16
    3326:	bd70      	pop	{r4, r5, r6, pc}
    3328:	f06f 0010 	mvn.w	r0, #16
    332c:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    332e:	f06f 000c 	mvn.w	r0, #12
    3332:	bd70      	pop	{r4, r5, r6, pc}
    3334:	00007378 	.word	0x00007378
    3338:	00001d55 	.word	0x00001d55

0000333c <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    333c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    333e:	4604      	mov	r4, r0
    3340:	b198      	cbz	r0, 336a <_wdt_enable+0x2e>
    3342:	6800      	ldr	r0, [r0, #0]
    3344:	3000      	adds	r0, #0
    3346:	bf18      	it	ne
    3348:	2001      	movne	r0, #1
    334a:	f240 1207 	movw	r2, #263	; 0x107
    334e:	4908      	ldr	r1, [pc, #32]	; (3370 <_wdt_enable+0x34>)
    3350:	4b08      	ldr	r3, [pc, #32]	; (3374 <_wdt_enable+0x38>)
    3352:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    3354:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3356:	6893      	ldr	r3, [r2, #8]
    3358:	f013 0f0e 	tst.w	r3, #14
    335c:	d1fb      	bne.n	3356 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    335e:	7813      	ldrb	r3, [r2, #0]
    3360:	f043 0302 	orr.w	r3, r3, #2
    3364:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    3366:	2000      	movs	r0, #0
    3368:	bd10      	pop	{r4, pc}
    336a:	2000      	movs	r0, #0
    336c:	e7ed      	b.n	334a <_wdt_enable+0xe>
    336e:	bf00      	nop
    3370:	00007378 	.word	0x00007378
    3374:	00001d55 	.word	0x00001d55

00003378 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    3378:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    337a:	4604      	mov	r4, r0
    337c:	b168      	cbz	r0, 339a <_wdt_feed+0x22>
    337e:	6800      	ldr	r0, [r0, #0]
    3380:	3000      	adds	r0, #0
    3382:	bf18      	it	ne
    3384:	2001      	movne	r0, #1
    3386:	f240 1225 	movw	r2, #293	; 0x125
    338a:	4905      	ldr	r1, [pc, #20]	; (33a0 <_wdt_feed+0x28>)
    338c:	4b05      	ldr	r3, [pc, #20]	; (33a4 <_wdt_feed+0x2c>)
    338e:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    3390:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    3392:	22a5      	movs	r2, #165	; 0xa5
    3394:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    3396:	2000      	movs	r0, #0
    3398:	bd10      	pop	{r4, pc}
    339a:	2000      	movs	r0, #0
    339c:	e7f3      	b.n	3386 <_wdt_feed+0xe>
    339e:	bf00      	nop
    33a0:	00007378 	.word	0x00007378
    33a4:	00001d55 	.word	0x00001d55

000033a8 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    33a8:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    33aa:	2200      	movs	r2, #0
    33ac:	2108      	movs	r1, #8
    33ae:	2001      	movs	r0, #1
    33b0:	4c15      	ldr	r4, [pc, #84]	; (3408 <createQueuesAndSemaphores+0x60>)
    33b2:	47a0      	blx	r4
    33b4:	4d15      	ldr	r5, [pc, #84]	; (340c <createQueuesAndSemaphores+0x64>)
    33b6:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    33b8:	2200      	movs	r2, #0
    33ba:	2101      	movs	r1, #1
    33bc:	4608      	mov	r0, r1
    33be:	47a0      	blx	r4
    33c0:	4b13      	ldr	r3, [pc, #76]	; (3410 <createQueuesAndSemaphores+0x68>)
    33c2:	6018      	str	r0, [r3, #0]
    CmdResponseQueue  = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    33c4:	2200      	movs	r2, #0
    33c6:	2108      	movs	r1, #8
    33c8:	2001      	movs	r0, #1
    33ca:	47a0      	blx	r4
    33cc:	4b11      	ldr	r3, [pc, #68]	; (3414 <createQueuesAndSemaphores+0x6c>)
    33ce:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    33d0:	682b      	ldr	r3, [r5, #0]
    33d2:	b1bb      	cbz	r3, 3404 <createQueuesAndSemaphores+0x5c>
       (AtReceiveQueue  != NULL) &&
    33d4:	4b0e      	ldr	r3, [pc, #56]	; (3410 <createQueuesAndSemaphores+0x68>)
    if((AtTransmitQueue != NULL) &&
    33d6:	681b      	ldr	r3, [r3, #0]
    33d8:	b1a3      	cbz	r3, 3404 <createQueuesAndSemaphores+0x5c>
       (AtReceiveQueue  != NULL) &&
    33da:	b198      	cbz	r0, 3404 <createQueuesAndSemaphores+0x5c>
	   (CmdResponseQueue != NULL))
    {
    	DEBUG_PRINT("Tx & Rx Queues are created");
    33dc:	480e      	ldr	r0, [pc, #56]	; (3418 <createQueuesAndSemaphores+0x70>)
    33de:	4b0f      	ldr	r3, [pc, #60]	; (341c <createQueuesAndSemaphores+0x74>)
    33e0:	4798      	blx	r3

    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    33e2:	2203      	movs	r2, #3
    33e4:	2100      	movs	r1, #0
    33e6:	2001      	movs	r0, #1
    33e8:	47a0      	blx	r4
    33ea:	4c0d      	ldr	r4, [pc, #52]	; (3420 <createQueuesAndSemaphores+0x78>)
    33ec:	6020      	str	r0, [r4, #0]
    	DebugPrintMutex        = xSemaphoreCreateMutex();
    33ee:	2001      	movs	r0, #1
    33f0:	4b0c      	ldr	r3, [pc, #48]	; (3424 <createQueuesAndSemaphores+0x7c>)
    33f2:	4798      	blx	r3
    33f4:	4b0c      	ldr	r3, [pc, #48]	; (3428 <createQueuesAndSemaphores+0x80>)
    33f6:	6018      	str	r0, [r3, #0]
		
		if((AtTxQueueLoadSemaphore != NULL) &&
    33f8:	6823      	ldr	r3, [r4, #0]
    33fa:	b11b      	cbz	r3, 3404 <createQueuesAndSemaphores+0x5c>
    33fc:	b110      	cbz	r0, 3404 <createQueuesAndSemaphores+0x5c>
		   (DebugPrintMutex != NULL))
		{
			DEBUG_PRINT("Semaphores and Mutexes are created");
    33fe:	480b      	ldr	r0, [pc, #44]	; (342c <createQueuesAndSemaphores+0x84>)
    3400:	4b06      	ldr	r3, [pc, #24]	; (341c <createQueuesAndSemaphores+0x74>)
    3402:	4798      	blx	r3
    }
    else
    {
    	status = false;
    }
}
    3404:	bd38      	pop	{r3, r4, r5, pc}
    3406:	bf00      	nop
    3408:	00003cf9 	.word	0x00003cf9
    340c:	20003464 	.word	0x20003464
    3410:	20003470 	.word	0x20003470
    3414:	20003440 	.word	0x20003440
    3418:	00007390 	.word	0x00007390
    341c:	00001015 	.word	0x00001015
    3420:	2000346c 	.word	0x2000346c
    3424:	00003f2d 	.word	0x00003f2d
    3428:	20003468 	.word	0x20003468
    342c:	000073ac 	.word	0x000073ac

00003430 <main>:
{
    3430:	b580      	push	{r7, lr}
    3432:	b082      	sub	sp, #8
    atmel_start_init();	
    3434:	4b29      	ldr	r3, [pc, #164]	; (34dc <main+0xac>)
    3436:	4798      	blx	r3
    DispatchTaskStatus = xTaskCreate( DispatchTask, "DispatchTask", 150, NULL, 2, &xDispatchTaskHandle );
    3438:	4b29      	ldr	r3, [pc, #164]	; (34e0 <main+0xb0>)
    343a:	9301      	str	r3, [sp, #4]
    343c:	2702      	movs	r7, #2
    343e:	9700      	str	r7, [sp, #0]
    3440:	2300      	movs	r3, #0
    3442:	2296      	movs	r2, #150	; 0x96
    3444:	4927      	ldr	r1, [pc, #156]	; (34e4 <main+0xb4>)
    3446:	4828      	ldr	r0, [pc, #160]	; (34e8 <main+0xb8>)
    3448:	4d28      	ldr	r5, [pc, #160]	; (34ec <main+0xbc>)
    344a:	47a8      	blx	r5
    344c:	4c28      	ldr	r4, [pc, #160]	; (34f0 <main+0xc0>)
    344e:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTask", 150, NULL, 1, &xModemTxTaskHandle );
    3450:	4b28      	ldr	r3, [pc, #160]	; (34f4 <main+0xc4>)
    3452:	9301      	str	r3, [sp, #4]
    3454:	2601      	movs	r6, #1
    3456:	9600      	str	r6, [sp, #0]
    3458:	2300      	movs	r3, #0
    345a:	2296      	movs	r2, #150	; 0x96
    345c:	4926      	ldr	r1, [pc, #152]	; (34f8 <main+0xc8>)
    345e:	4827      	ldr	r0, [pc, #156]	; (34fc <main+0xcc>)
    3460:	47a8      	blx	r5
    3462:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    3464:	4b26      	ldr	r3, [pc, #152]	; (3500 <main+0xd0>)
    3466:	9301      	str	r3, [sp, #4]
    3468:	9700      	str	r7, [sp, #0]
    346a:	2300      	movs	r3, #0
    346c:	2296      	movs	r2, #150	; 0x96
    346e:	4925      	ldr	r1, [pc, #148]	; (3504 <main+0xd4>)
    3470:	4825      	ldr	r0, [pc, #148]	; (3508 <main+0xd8>)
    3472:	47a8      	blx	r5
    3474:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    3476:	4b25      	ldr	r3, [pc, #148]	; (350c <main+0xdc>)
    3478:	9301      	str	r3, [sp, #4]
    347a:	9600      	str	r6, [sp, #0]
    347c:	2300      	movs	r3, #0
    347e:	2296      	movs	r2, #150	; 0x96
    3480:	4923      	ldr	r1, [pc, #140]	; (3510 <main+0xe0>)
    3482:	4824      	ldr	r0, [pc, #144]	; (3514 <main+0xe4>)
    3484:	47a8      	blx	r5
    3486:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    3488:	4b23      	ldr	r3, [pc, #140]	; (3518 <main+0xe8>)
    348a:	9301      	str	r3, [sp, #4]
    348c:	9600      	str	r6, [sp, #0]
    348e:	2300      	movs	r3, #0
    3490:	2296      	movs	r2, #150	; 0x96
    3492:	4922      	ldr	r1, [pc, #136]	; (351c <main+0xec>)
    3494:	4822      	ldr	r0, [pc, #136]	; (3520 <main+0xf0>)
    3496:	47a8      	blx	r5
    if((DispatchTaskStatus == pdPASS) &&
    3498:	6823      	ldr	r3, [r4, #0]
    349a:	42b3      	cmp	r3, r6
    349c:	d006      	beq.n	34ac <main+0x7c>
    	DEBUG_PRINT("Failed to create tasks");
    349e:	4821      	ldr	r0, [pc, #132]	; (3524 <main+0xf4>)
    34a0:	4b21      	ldr	r3, [pc, #132]	; (3528 <main+0xf8>)
    34a2:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    34a4:	4821      	ldr	r0, [pc, #132]	; (352c <main+0xfc>)
    34a6:	4b20      	ldr	r3, [pc, #128]	; (3528 <main+0xf8>)
    34a8:	4798      	blx	r3
    34aa:	e7fe      	b.n	34aa <main+0x7a>
    if((DispatchTaskStatus == pdPASS) &&
    34ac:	68e3      	ldr	r3, [r4, #12]
    34ae:	42b3      	cmp	r3, r6
    34b0:	d1f5      	bne.n	349e <main+0x6e>
       (ModemProcessTaskStatus == pdPASS) &&
    34b2:	6863      	ldr	r3, [r4, #4]
    34b4:	42b3      	cmp	r3, r6
    34b6:	d1f2      	bne.n	349e <main+0x6e>
       (ModemTxTaskStatus == pdPASS) &&
    34b8:	68a3      	ldr	r3, [r4, #8]
    34ba:	42b3      	cmp	r3, r6
    34bc:	d1ef      	bne.n	349e <main+0x6e>
       (ModemRxTaskStatus == pdPASS) &&
    34be:	42b0      	cmp	r0, r6
    34c0:	d1ed      	bne.n	349e <main+0x6e>
    	DEBUG_PRINT("Successfully Created the Tasks");
    34c2:	481b      	ldr	r0, [pc, #108]	; (3530 <main+0x100>)
    34c4:	4b18      	ldr	r3, [pc, #96]	; (3528 <main+0xf8>)
    34c6:	4798      	blx	r3
    	if(false != createQueuesAndSemaphores())
    34c8:	4b1a      	ldr	r3, [pc, #104]	; (3534 <main+0x104>)
    34ca:	4798      	blx	r3
    34cc:	b110      	cbz	r0, 34d4 <main+0xa4>
    		vTaskStartScheduler();
    34ce:	4b1a      	ldr	r3, [pc, #104]	; (3538 <main+0x108>)
    34d0:	4798      	blx	r3
    34d2:	e7e7      	b.n	34a4 <main+0x74>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    34d4:	4819      	ldr	r0, [pc, #100]	; (353c <main+0x10c>)
    34d6:	4b14      	ldr	r3, [pc, #80]	; (3528 <main+0xf8>)
    34d8:	4798      	blx	r3
    34da:	e7e3      	b.n	34a4 <main+0x74>
    34dc:	00001171 	.word	0x00001171
    34e0:	2000345c 	.word	0x2000345c
    34e4:	000073d0 	.word	0x000073d0
    34e8:	00000359 	.word	0x00000359
    34ec:	00004529 	.word	0x00004529
    34f0:	20000ae0 	.word	0x20000ae0
    34f4:	20003444 	.word	0x20003444
    34f8:	000073e0 	.word	0x000073e0
    34fc:	00000e69 	.word	0x00000e69
    3500:	20003458 	.word	0x20003458
    3504:	000073ec 	.word	0x000073ec
    3508:	00000df5 	.word	0x00000df5
    350c:	2000344c 	.word	0x2000344c
    3510:	000073f8 	.word	0x000073f8
    3514:	00000ca5 	.word	0x00000ca5
    3518:	20003450 	.word	0x20003450
    351c:	0000740c 	.word	0x0000740c
    3520:	00000841 	.word	0x00000841
    3524:	0000745c 	.word	0x0000745c
    3528:	00001015 	.word	0x00001015
    352c:	00007474 	.word	0x00007474
    3530:	0000741c 	.word	0x0000741c
    3534:	000033a9 	.word	0x000033a9
    3538:	00004705 	.word	0x00004705
    353c:	0000743c 	.word	0x0000743c

00003540 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    3540:	f100 0308 	add.w	r3, r0, #8
    3544:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    3546:	f04f 32ff 	mov.w	r2, #4294967295
    354a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    354c:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    354e:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    3550:	2300      	movs	r3, #0
    3552:	6003      	str	r3, [r0, #0]
    3554:	4770      	bx	lr

00003556 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    3556:	2300      	movs	r3, #0
    3558:	6103      	str	r3, [r0, #16]
    355a:	4770      	bx	lr

0000355c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    355c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    355e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3560:	689a      	ldr	r2, [r3, #8]
    3562:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3564:	689a      	ldr	r2, [r3, #8]
    3566:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    3568:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    356a:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    356c:	6803      	ldr	r3, [r0, #0]
    356e:	3301      	adds	r3, #1
    3570:	6003      	str	r3, [r0, #0]
    3572:	4770      	bx	lr

00003574 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    3574:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    3576:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    3578:	f1b5 3fff 	cmp.w	r5, #4294967295
    357c:	d002      	beq.n	3584 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    357e:	f100 0208 	add.w	r2, r0, #8
    3582:	e002      	b.n	358a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    3584:	6902      	ldr	r2, [r0, #16]
    3586:	e004      	b.n	3592 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    3588:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    358a:	6853      	ldr	r3, [r2, #4]
    358c:	681c      	ldr	r4, [r3, #0]
    358e:	42a5      	cmp	r5, r4
    3590:	d2fa      	bcs.n	3588 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    3592:	6853      	ldr	r3, [r2, #4]
    3594:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    3596:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    3598:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    359a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    359c:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    359e:	6803      	ldr	r3, [r0, #0]
    35a0:	3301      	adds	r3, #1
    35a2:	6003      	str	r3, [r0, #0]
}
    35a4:	bc30      	pop	{r4, r5}
    35a6:	4770      	bx	lr

000035a8 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    35a8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    35aa:	6842      	ldr	r2, [r0, #4]
    35ac:	6881      	ldr	r1, [r0, #8]
    35ae:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    35b0:	6882      	ldr	r2, [r0, #8]
    35b2:	6841      	ldr	r1, [r0, #4]
    35b4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    35b6:	685a      	ldr	r2, [r3, #4]
    35b8:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    35ba:	bf04      	itt	eq
    35bc:	6882      	ldreq	r2, [r0, #8]
    35be:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    35c0:	2200      	movs	r2, #0
    35c2:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    35c4:	681a      	ldr	r2, [r3, #0]
    35c6:	3a01      	subs	r2, #1
    35c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    35ca:	6818      	ldr	r0, [r3, #0]
}
    35cc:	4770      	bx	lr
	...

000035d0 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    35d0:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    35d2:	2300      	movs	r3, #0
    35d4:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    35d6:	4b0d      	ldr	r3, [pc, #52]	; (360c <prvTaskExitError+0x3c>)
    35d8:	681b      	ldr	r3, [r3, #0]
    35da:	f1b3 3fff 	cmp.w	r3, #4294967295
    35de:	d008      	beq.n	35f2 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    35e0:	f04f 0380 	mov.w	r3, #128	; 0x80
    35e4:	f383 8811 	msr	BASEPRI, r3
    35e8:	f3bf 8f6f 	isb	sy
    35ec:	f3bf 8f4f 	dsb	sy
    35f0:	e7fe      	b.n	35f0 <prvTaskExitError+0x20>
    35f2:	f04f 0380 	mov.w	r3, #128	; 0x80
    35f6:	f383 8811 	msr	BASEPRI, r3
    35fa:	f3bf 8f6f 	isb	sy
    35fe:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    3602:	9b01      	ldr	r3, [sp, #4]
    3604:	2b00      	cmp	r3, #0
    3606:	d0fc      	beq.n	3602 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    3608:	b002      	add	sp, #8
    360a:	4770      	bx	lr
    360c:	20000120 	.word	0x20000120

00003610 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    3610:	4808      	ldr	r0, [pc, #32]	; (3634 <prvPortStartFirstTask+0x24>)
    3612:	6800      	ldr	r0, [r0, #0]
    3614:	6800      	ldr	r0, [r0, #0]
    3616:	f380 8808 	msr	MSP, r0
    361a:	f04f 0000 	mov.w	r0, #0
    361e:	f380 8814 	msr	CONTROL, r0
    3622:	b662      	cpsie	i
    3624:	b661      	cpsie	f
    3626:	f3bf 8f4f 	dsb	sy
    362a:	f3bf 8f6f 	isb	sy
    362e:	df00      	svc	0
    3630:	bf00      	nop
    3632:	0000      	.short	0x0000
    3634:	e000ed08 	.word	0xe000ed08

00003638 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    3638:	f8df 000c 	ldr.w	r0, [pc, #12]	; 3648 <vPortEnableVFP+0x10>
    363c:	6801      	ldr	r1, [r0, #0]
    363e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3642:	6001      	str	r1, [r0, #0]
    3644:	4770      	bx	lr
    3646:	0000      	.short	0x0000
    3648:	e000ed88 	.word	0xe000ed88

0000364c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    364c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3650:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    3654:	f021 0101 	bic.w	r1, r1, #1
    3658:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    365c:	4b05      	ldr	r3, [pc, #20]	; (3674 <pxPortInitialiseStack+0x28>)
    365e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    3662:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    3666:	f06f 0302 	mvn.w	r3, #2
    366a:	f840 3c24 	str.w	r3, [r0, #-36]
}
    366e:	3844      	subs	r0, #68	; 0x44
    3670:	4770      	bx	lr
    3672:	bf00      	nop
    3674:	000035d1 	.word	0x000035d1
	...

00003680 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    3680:	4b07      	ldr	r3, [pc, #28]	; (36a0 <pxCurrentTCBConst2>)
    3682:	6819      	ldr	r1, [r3, #0]
    3684:	6808      	ldr	r0, [r1, #0]
    3686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    368a:	f380 8809 	msr	PSP, r0
    368e:	f3bf 8f6f 	isb	sy
    3692:	f04f 0000 	mov.w	r0, #0
    3696:	f380 8811 	msr	BASEPRI, r0
    369a:	4770      	bx	lr
    369c:	f3af 8000 	nop.w

000036a0 <pxCurrentTCBConst2>:
    36a0:	200033a4 	.word	0x200033a4

000036a4 <vPortEnterCritical>:
    36a4:	f04f 0380 	mov.w	r3, #128	; 0x80
    36a8:	f383 8811 	msr	BASEPRI, r3
    36ac:	f3bf 8f6f 	isb	sy
    36b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    36b4:	4a0a      	ldr	r2, [pc, #40]	; (36e0 <vPortEnterCritical+0x3c>)
    36b6:	6813      	ldr	r3, [r2, #0]
    36b8:	3301      	adds	r3, #1
    36ba:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    36bc:	2b01      	cmp	r3, #1
    36be:	d10d      	bne.n	36dc <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    36c0:	4b08      	ldr	r3, [pc, #32]	; (36e4 <vPortEnterCritical+0x40>)
    36c2:	681b      	ldr	r3, [r3, #0]
    36c4:	f013 0fff 	tst.w	r3, #255	; 0xff
    36c8:	d008      	beq.n	36dc <vPortEnterCritical+0x38>
    36ca:	f04f 0380 	mov.w	r3, #128	; 0x80
    36ce:	f383 8811 	msr	BASEPRI, r3
    36d2:	f3bf 8f6f 	isb	sy
    36d6:	f3bf 8f4f 	dsb	sy
    36da:	e7fe      	b.n	36da <vPortEnterCritical+0x36>
    36dc:	4770      	bx	lr
    36de:	bf00      	nop
    36e0:	20000120 	.word	0x20000120
    36e4:	e000ed04 	.word	0xe000ed04

000036e8 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    36e8:	4b09      	ldr	r3, [pc, #36]	; (3710 <vPortExitCritical+0x28>)
    36ea:	681b      	ldr	r3, [r3, #0]
    36ec:	b943      	cbnz	r3, 3700 <vPortExitCritical+0x18>
    36ee:	f04f 0380 	mov.w	r3, #128	; 0x80
    36f2:	f383 8811 	msr	BASEPRI, r3
    36f6:	f3bf 8f6f 	isb	sy
    36fa:	f3bf 8f4f 	dsb	sy
    36fe:	e7fe      	b.n	36fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
    3700:	3b01      	subs	r3, #1
    3702:	4a03      	ldr	r2, [pc, #12]	; (3710 <vPortExitCritical+0x28>)
    3704:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    3706:	b90b      	cbnz	r3, 370c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3708:	f383 8811 	msr	BASEPRI, r3
    370c:	4770      	bx	lr
    370e:	bf00      	nop
    3710:	20000120 	.word	0x20000120
	...

00003720 <PendSV_Handler>:
	__asm volatile(
    3720:	f3ef 8009 	mrs	r0, PSP
    3724:	f3bf 8f6f 	isb	sy
    3728:	4b15      	ldr	r3, [pc, #84]	; (3780 <pxCurrentTCBConst>)
    372a:	681a      	ldr	r2, [r3, #0]
    372c:	f01e 0f10 	tst.w	lr, #16
    3730:	bf08      	it	eq
    3732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    3736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    373a:	6010      	str	r0, [r2, #0]
    373c:	e92d 0009 	stmdb	sp!, {r0, r3}
    3740:	f04f 0080 	mov.w	r0, #128	; 0x80
    3744:	f380 8811 	msr	BASEPRI, r0
    3748:	f3bf 8f4f 	dsb	sy
    374c:	f3bf 8f6f 	isb	sy
    3750:	f001 f9c8 	bl	4ae4 <vTaskSwitchContext>
    3754:	f04f 0000 	mov.w	r0, #0
    3758:	f380 8811 	msr	BASEPRI, r0
    375c:	bc09      	pop	{r0, r3}
    375e:	6819      	ldr	r1, [r3, #0]
    3760:	6808      	ldr	r0, [r1, #0]
    3762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3766:	f01e 0f10 	tst.w	lr, #16
    376a:	bf08      	it	eq
    376c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    3770:	f380 8809 	msr	PSP, r0
    3774:	f3bf 8f6f 	isb	sy
    3778:	4770      	bx	lr
    377a:	bf00      	nop
    377c:	f3af 8000 	nop.w

00003780 <pxCurrentTCBConst>:
    3780:	200033a4 	.word	0x200033a4

00003784 <SysTick_Handler>:
{
    3784:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    3786:	f04f 0380 	mov.w	r3, #128	; 0x80
    378a:	f383 8811 	msr	BASEPRI, r3
    378e:	f3bf 8f6f 	isb	sy
    3792:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    3796:	4b05      	ldr	r3, [pc, #20]	; (37ac <SysTick_Handler+0x28>)
    3798:	4798      	blx	r3
    379a:	b118      	cbz	r0, 37a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    379c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    37a0:	4b03      	ldr	r3, [pc, #12]	; (37b0 <SysTick_Handler+0x2c>)
    37a2:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    37a4:	2300      	movs	r3, #0
    37a6:	f383 8811 	msr	BASEPRI, r3
    37aa:	bd08      	pop	{r3, pc}
    37ac:	000047ad 	.word	0x000047ad
    37b0:	e000ed04 	.word	0xe000ed04

000037b4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    37b4:	4b05      	ldr	r3, [pc, #20]	; (37cc <vPortSetupTimerInterrupt+0x18>)
    37b6:	2200      	movs	r2, #0
    37b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    37ba:	4905      	ldr	r1, [pc, #20]	; (37d0 <vPortSetupTimerInterrupt+0x1c>)
    37bc:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    37be:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    37c2:	4a04      	ldr	r2, [pc, #16]	; (37d4 <vPortSetupTimerInterrupt+0x20>)
    37c4:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    37c6:	2207      	movs	r2, #7
    37c8:	601a      	str	r2, [r3, #0]
    37ca:	4770      	bx	lr
    37cc:	e000e010 	.word	0xe000e010
    37d0:	e000e018 	.word	0xe000e018
    37d4:	e000e014 	.word	0xe000e014

000037d8 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    37d8:	4b3b      	ldr	r3, [pc, #236]	; (38c8 <xPortStartScheduler+0xf0>)
    37da:	681a      	ldr	r2, [r3, #0]
    37dc:	4b3b      	ldr	r3, [pc, #236]	; (38cc <xPortStartScheduler+0xf4>)
    37de:	429a      	cmp	r2, r3
    37e0:	d108      	bne.n	37f4 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    37e2:	f04f 0380 	mov.w	r3, #128	; 0x80
    37e6:	f383 8811 	msr	BASEPRI, r3
    37ea:	f3bf 8f6f 	isb	sy
    37ee:	f3bf 8f4f 	dsb	sy
    37f2:	e7fe      	b.n	37f2 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    37f4:	4b34      	ldr	r3, [pc, #208]	; (38c8 <xPortStartScheduler+0xf0>)
    37f6:	681a      	ldr	r2, [r3, #0]
    37f8:	4b35      	ldr	r3, [pc, #212]	; (38d0 <xPortStartScheduler+0xf8>)
    37fa:	429a      	cmp	r2, r3
    37fc:	d108      	bne.n	3810 <xPortStartScheduler+0x38>
    37fe:	f04f 0380 	mov.w	r3, #128	; 0x80
    3802:	f383 8811 	msr	BASEPRI, r3
    3806:	f3bf 8f6f 	isb	sy
    380a:	f3bf 8f4f 	dsb	sy
    380e:	e7fe      	b.n	380e <xPortStartScheduler+0x36>
{
    3810:	b510      	push	{r4, lr}
    3812:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    3814:	4b2f      	ldr	r3, [pc, #188]	; (38d4 <xPortStartScheduler+0xfc>)
    3816:	781a      	ldrb	r2, [r3, #0]
    3818:	b2d2      	uxtb	r2, r2
    381a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    381c:	22ff      	movs	r2, #255	; 0xff
    381e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    3820:	781b      	ldrb	r3, [r3, #0]
    3822:	b2db      	uxtb	r3, r3
    3824:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    3828:	f89d 3003 	ldrb.w	r3, [sp, #3]
    382c:	4a2a      	ldr	r2, [pc, #168]	; (38d8 <xPortStartScheduler+0x100>)
    382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3832:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    3834:	2307      	movs	r3, #7
    3836:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3838:	f89d 3003 	ldrb.w	r3, [sp, #3]
    383c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3840:	d012      	beq.n	3868 <xPortStartScheduler+0x90>
    3842:	2306      	movs	r3, #6
    3844:	e000      	b.n	3848 <xPortStartScheduler+0x70>
    3846:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    3848:	f89d 2003 	ldrb.w	r2, [sp, #3]
    384c:	0052      	lsls	r2, r2, #1
    384e:	b2d2      	uxtb	r2, r2
    3850:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3854:	f89d 2003 	ldrb.w	r2, [sp, #3]
    3858:	1e59      	subs	r1, r3, #1
    385a:	f012 0f80 	tst.w	r2, #128	; 0x80
    385e:	d1f2      	bne.n	3846 <xPortStartScheduler+0x6e>
    3860:	4a1d      	ldr	r2, [pc, #116]	; (38d8 <xPortStartScheduler+0x100>)
    3862:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    3864:	2b04      	cmp	r3, #4
    3866:	d008      	beq.n	387a <xPortStartScheduler+0xa2>
    3868:	f04f 0380 	mov.w	r3, #128	; 0x80
    386c:	f383 8811 	msr	BASEPRI, r3
    3870:	f3bf 8f6f 	isb	sy
    3874:	f3bf 8f4f 	dsb	sy
    3878:	e7fe      	b.n	3878 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    387a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    387c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3880:	4a15      	ldr	r2, [pc, #84]	; (38d8 <xPortStartScheduler+0x100>)
    3882:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    3884:	9b01      	ldr	r3, [sp, #4]
    3886:	b2db      	uxtb	r3, r3
    3888:	4a12      	ldr	r2, [pc, #72]	; (38d4 <xPortStartScheduler+0xfc>)
    388a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    388c:	4b13      	ldr	r3, [pc, #76]	; (38dc <xPortStartScheduler+0x104>)
    388e:	681a      	ldr	r2, [r3, #0]
    3890:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    3894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    3896:	681a      	ldr	r2, [r3, #0]
    3898:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    389c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    389e:	4b10      	ldr	r3, [pc, #64]	; (38e0 <xPortStartScheduler+0x108>)
    38a0:	4798      	blx	r3
	uxCriticalNesting = 0;
    38a2:	2400      	movs	r4, #0
    38a4:	4b0f      	ldr	r3, [pc, #60]	; (38e4 <xPortStartScheduler+0x10c>)
    38a6:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    38a8:	4b0f      	ldr	r3, [pc, #60]	; (38e8 <xPortStartScheduler+0x110>)
    38aa:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    38ac:	4a0f      	ldr	r2, [pc, #60]	; (38ec <xPortStartScheduler+0x114>)
    38ae:	6813      	ldr	r3, [r2, #0]
    38b0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    38b4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    38b6:	4b0e      	ldr	r3, [pc, #56]	; (38f0 <xPortStartScheduler+0x118>)
    38b8:	4798      	blx	r3
	vTaskSwitchContext();
    38ba:	4b0e      	ldr	r3, [pc, #56]	; (38f4 <xPortStartScheduler+0x11c>)
    38bc:	4798      	blx	r3
	prvTaskExitError();
    38be:	4b0e      	ldr	r3, [pc, #56]	; (38f8 <xPortStartScheduler+0x120>)
    38c0:	4798      	blx	r3
}
    38c2:	4620      	mov	r0, r4
    38c4:	b002      	add	sp, #8
    38c6:	bd10      	pop	{r4, pc}
    38c8:	e000ed00 	.word	0xe000ed00
    38cc:	410fc271 	.word	0x410fc271
    38d0:	410fc270 	.word	0x410fc270
    38d4:	e000e400 	.word	0xe000e400
    38d8:	20000af0 	.word	0x20000af0
    38dc:	e000ed20 	.word	0xe000ed20
    38e0:	000037b5 	.word	0x000037b5
    38e4:	20000120 	.word	0x20000120
    38e8:	00003639 	.word	0x00003639
    38ec:	e000ef34 	.word	0xe000ef34
    38f0:	00003611 	.word	0x00003611
    38f4:	00004ae5 	.word	0x00004ae5
    38f8:	000035d1 	.word	0x000035d1

000038fc <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    38fc:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    3900:	2b0f      	cmp	r3, #15
    3902:	d90f      	bls.n	3924 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    3904:	4a10      	ldr	r2, [pc, #64]	; (3948 <vPortValidateInterruptPriority+0x4c>)
    3906:	5c9b      	ldrb	r3, [r3, r2]
    3908:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    390a:	4a10      	ldr	r2, [pc, #64]	; (394c <vPortValidateInterruptPriority+0x50>)
    390c:	7812      	ldrb	r2, [r2, #0]
    390e:	429a      	cmp	r2, r3
    3910:	d908      	bls.n	3924 <vPortValidateInterruptPriority+0x28>
    3912:	f04f 0380 	mov.w	r3, #128	; 0x80
    3916:	f383 8811 	msr	BASEPRI, r3
    391a:	f3bf 8f6f 	isb	sy
    391e:	f3bf 8f4f 	dsb	sy
    3922:	e7fe      	b.n	3922 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    3924:	4b0a      	ldr	r3, [pc, #40]	; (3950 <vPortValidateInterruptPriority+0x54>)
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    392c:	4a07      	ldr	r2, [pc, #28]	; (394c <vPortValidateInterruptPriority+0x50>)
    392e:	6852      	ldr	r2, [r2, #4]
    3930:	4293      	cmp	r3, r2
    3932:	d908      	bls.n	3946 <vPortValidateInterruptPriority+0x4a>
    3934:	f04f 0380 	mov.w	r3, #128	; 0x80
    3938:	f383 8811 	msr	BASEPRI, r3
    393c:	f3bf 8f6f 	isb	sy
    3940:	f3bf 8f4f 	dsb	sy
    3944:	e7fe      	b.n	3944 <vPortValidateInterruptPriority+0x48>
    3946:	4770      	bx	lr
    3948:	e000e3f0 	.word	0xe000e3f0
    394c:	20000af0 	.word	0x20000af0
    3950:	e000ed0c 	.word	0xe000ed0c

00003954 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3954:	b570      	push	{r4, r5, r6, lr}
    3956:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    3958:	4b2d      	ldr	r3, [pc, #180]	; (3a10 <pvPortMalloc+0xbc>)
    395a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    395c:	4b2d      	ldr	r3, [pc, #180]	; (3a14 <pvPortMalloc+0xc0>)
    395e:	689b      	ldr	r3, [r3, #8]
    3960:	b183      	cbz	r3, 3984 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    3962:	2c00      	cmp	r4, #0
    3964:	d04d      	beq.n	3a02 <pvPortMalloc+0xae>
		{
			xWantedSize += heapSTRUCT_SIZE;
    3966:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    3968:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    396c:	bf1c      	itt	ne
    396e:	f024 0407 	bicne.w	r4, r4, #7
    3972:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    3974:	1e62      	subs	r2, r4, #1
    3976:	f242 73f6 	movw	r3, #10230	; 0x27f6
    397a:	429a      	cmp	r2, r3
    397c:	d843      	bhi.n	3a06 <pvPortMalloc+0xb2>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    397e:	4925      	ldr	r1, [pc, #148]	; (3a14 <pvPortMalloc+0xc0>)
    3980:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    3982:	e017      	b.n	39b4 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    3984:	4923      	ldr	r1, [pc, #140]	; (3a14 <pvPortMalloc+0xc0>)
    3986:	f101 0314 	add.w	r3, r1, #20
    398a:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    398e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    3990:	2500      	movs	r5, #0
    3992:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    3994:	4a20      	ldr	r2, [pc, #128]	; (3a18 <pvPortMalloc+0xc4>)
    3996:	f242 70f8 	movw	r0, #10232	; 0x27f8
    399a:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    399e:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    39a2:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    39a4:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    39a8:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    39aa:	2301      	movs	r3, #1
    39ac:	608b      	str	r3, [r1, #8]
    39ae:	e7d8      	b.n	3962 <pvPortMalloc+0xe>
    39b0:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    39b2:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    39b4:	685a      	ldr	r2, [r3, #4]
    39b6:	4294      	cmp	r4, r2
    39b8:	d902      	bls.n	39c0 <pvPortMalloc+0x6c>
    39ba:	681a      	ldr	r2, [r3, #0]
    39bc:	2a00      	cmp	r2, #0
    39be:	d1f7      	bne.n	39b0 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    39c0:	4a16      	ldr	r2, [pc, #88]	; (3a1c <pvPortMalloc+0xc8>)
    39c2:	4293      	cmp	r3, r2
    39c4:	d021      	beq.n	3a0a <pvPortMalloc+0xb6>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    39c6:	680d      	ldr	r5, [r1, #0]
    39c8:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    39ca:	681a      	ldr	r2, [r3, #0]
    39cc:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    39ce:	685a      	ldr	r2, [r3, #4]
    39d0:	1b12      	subs	r2, r2, r4
    39d2:	2a10      	cmp	r2, #16
    39d4:	d90c      	bls.n	39f0 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    39d6:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    39d8:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    39da:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    39dc:	6874      	ldr	r4, [r6, #4]
    39de:	490d      	ldr	r1, [pc, #52]	; (3a14 <pvPortMalloc+0xc0>)
    39e0:	e000      	b.n	39e4 <pvPortMalloc+0x90>
    39e2:	4611      	mov	r1, r2
    39e4:	680a      	ldr	r2, [r1, #0]
    39e6:	6850      	ldr	r0, [r2, #4]
    39e8:	4284      	cmp	r4, r0
    39ea:	d8fa      	bhi.n	39e2 <pvPortMalloc+0x8e>
    39ec:	6032      	str	r2, [r6, #0]
    39ee:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    39f0:	490b      	ldr	r1, [pc, #44]	; (3a20 <pvPortMalloc+0xcc>)
    39f2:	680a      	ldr	r2, [r1, #0]
    39f4:	685b      	ldr	r3, [r3, #4]
    39f6:	1ad2      	subs	r2, r2, r3
    39f8:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    39fa:	4b0a      	ldr	r3, [pc, #40]	; (3a24 <pvPortMalloc+0xd0>)
    39fc:	4798      	blx	r3
}
    39fe:	4628      	mov	r0, r5
    3a00:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
    3a02:	2500      	movs	r5, #0
    3a04:	e7f9      	b.n	39fa <pvPortMalloc+0xa6>
    3a06:	2500      	movs	r5, #0
    3a08:	e7f7      	b.n	39fa <pvPortMalloc+0xa6>
    3a0a:	2500      	movs	r5, #0
    3a0c:	e7f5      	b.n	39fa <pvPortMalloc+0xa6>
    3a0e:	bf00      	nop
    3a10:	0000478d 	.word	0x0000478d
    3a14:	20000af8 	.word	0x20000af8
    3a18:	20002ce8 	.word	0x20002ce8
    3a1c:	20003304 	.word	0x20003304
    3a20:	20000124 	.word	0x20000124
    3a24:	000048d5 	.word	0x000048d5

00003a28 <vPortFree>:
	if( pv != NULL )
    3a28:	b1d0      	cbz	r0, 3a60 <vPortFree+0x38>
{
    3a2a:	b570      	push	{r4, r5, r6, lr}
    3a2c:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    3a2e:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    3a32:	4b0c      	ldr	r3, [pc, #48]	; (3a64 <vPortFree+0x3c>)
    3a34:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    3a36:	f855 4c04 	ldr.w	r4, [r5, #-4]
    3a3a:	4a0b      	ldr	r2, [pc, #44]	; (3a68 <vPortFree+0x40>)
    3a3c:	e000      	b.n	3a40 <vPortFree+0x18>
    3a3e:	461a      	mov	r2, r3
    3a40:	6813      	ldr	r3, [r2, #0]
    3a42:	6859      	ldr	r1, [r3, #4]
    3a44:	428c      	cmp	r4, r1
    3a46:	d8fa      	bhi.n	3a3e <vPortFree+0x16>
    3a48:	f845 3c08 	str.w	r3, [r5, #-8]
    3a4c:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    3a4e:	4a07      	ldr	r2, [pc, #28]	; (3a6c <vPortFree+0x44>)
    3a50:	f855 3c04 	ldr.w	r3, [r5, #-4]
    3a54:	6811      	ldr	r1, [r2, #0]
    3a56:	440b      	add	r3, r1
    3a58:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    3a5a:	4b05      	ldr	r3, [pc, #20]	; (3a70 <vPortFree+0x48>)
    3a5c:	4798      	blx	r3
    3a5e:	bd70      	pop	{r4, r5, r6, pc}
    3a60:	4770      	bx	lr
    3a62:	bf00      	nop
    3a64:	0000478d 	.word	0x0000478d
    3a68:	20000af8 	.word	0x20000af8
    3a6c:	20000124 	.word	0x20000124
    3a70:	000048d5 	.word	0x000048d5

00003a74 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    3a74:	b510      	push	{r4, lr}
    3a76:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    3a78:	4b04      	ldr	r3, [pc, #16]	; (3a8c <prvIsQueueEmpty+0x18>)
    3a7a:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    3a7c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3a7e:	4b04      	ldr	r3, [pc, #16]	; (3a90 <prvIsQueueEmpty+0x1c>)
    3a80:	4798      	blx	r3

	return xReturn;
}
    3a82:	fab4 f084 	clz	r0, r4
    3a86:	0940      	lsrs	r0, r0, #5
    3a88:	bd10      	pop	{r4, pc}
    3a8a:	bf00      	nop
    3a8c:	000036a5 	.word	0x000036a5
    3a90:	000036e9 	.word	0x000036e9

00003a94 <prvCopyDataToQueue>:
{
    3a94:	b570      	push	{r4, r5, r6, lr}
    3a96:	4604      	mov	r4, r0
    3a98:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3a9a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    3a9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3a9e:	b952      	cbnz	r2, 3ab6 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    3aa0:	6803      	ldr	r3, [r0, #0]
    3aa2:	2b00      	cmp	r3, #0
    3aa4:	d12a      	bne.n	3afc <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    3aa6:	6840      	ldr	r0, [r0, #4]
    3aa8:	4b18      	ldr	r3, [pc, #96]	; (3b0c <prvCopyDataToQueue+0x78>)
    3aaa:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    3aac:	2300      	movs	r3, #0
    3aae:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    3ab0:	3501      	adds	r5, #1
    3ab2:	63a5      	str	r5, [r4, #56]	; 0x38
}
    3ab4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    3ab6:	b96e      	cbnz	r6, 3ad4 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    3ab8:	6880      	ldr	r0, [r0, #8]
    3aba:	4b15      	ldr	r3, [pc, #84]	; (3b10 <prvCopyDataToQueue+0x7c>)
    3abc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3abe:	68a3      	ldr	r3, [r4, #8]
    3ac0:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3ac2:	4413      	add	r3, r2
    3ac4:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    3ac6:	6862      	ldr	r2, [r4, #4]
    3ac8:	4293      	cmp	r3, r2
    3aca:	d319      	bcc.n	3b00 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3acc:	6823      	ldr	r3, [r4, #0]
    3ace:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    3ad0:	2000      	movs	r0, #0
    3ad2:	e7ed      	b.n	3ab0 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    3ad4:	68c0      	ldr	r0, [r0, #12]
    3ad6:	4b0e      	ldr	r3, [pc, #56]	; (3b10 <prvCopyDataToQueue+0x7c>)
    3ad8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    3ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3adc:	425b      	negs	r3, r3
    3ade:	68e2      	ldr	r2, [r4, #12]
    3ae0:	441a      	add	r2, r3
    3ae2:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    3ae4:	6821      	ldr	r1, [r4, #0]
    3ae6:	428a      	cmp	r2, r1
    3ae8:	d202      	bcs.n	3af0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    3aea:	6862      	ldr	r2, [r4, #4]
    3aec:	4413      	add	r3, r2
    3aee:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    3af0:	2e02      	cmp	r6, #2
    3af2:	d107      	bne.n	3b04 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    3af4:	b145      	cbz	r5, 3b08 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    3af6:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    3af8:	2000      	movs	r0, #0
    3afa:	e7d9      	b.n	3ab0 <prvCopyDataToQueue+0x1c>
    3afc:	2000      	movs	r0, #0
    3afe:	e7d7      	b.n	3ab0 <prvCopyDataToQueue+0x1c>
    3b00:	2000      	movs	r0, #0
    3b02:	e7d5      	b.n	3ab0 <prvCopyDataToQueue+0x1c>
    3b04:	2000      	movs	r0, #0
    3b06:	e7d3      	b.n	3ab0 <prvCopyDataToQueue+0x1c>
    3b08:	2000      	movs	r0, #0
    3b0a:	e7d1      	b.n	3ab0 <prvCopyDataToQueue+0x1c>
    3b0c:	00004e25 	.word	0x00004e25
    3b10:	00005575 	.word	0x00005575

00003b14 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    3b14:	b570      	push	{r4, r5, r6, lr}
    3b16:	b082      	sub	sp, #8
    3b18:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    3b1a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    3b1c:	b164      	cbz	r4, 3b38 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    3b1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3b20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3b22:	429a      	cmp	r2, r3
    3b24:	d311      	bcc.n	3b4a <prvNotifyQueueSetContainer+0x36>
    3b26:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b2a:	f383 8811 	msr	BASEPRI, r3
    3b2e:	f3bf 8f6f 	isb	sy
    3b32:	f3bf 8f4f 	dsb	sy
    3b36:	e7fe      	b.n	3b36 <prvNotifyQueueSetContainer+0x22>
    3b38:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b3c:	f383 8811 	msr	BASEPRI, r3
    3b40:	f3bf 8f6f 	isb	sy
    3b44:	f3bf 8f4f 	dsb	sy
    3b48:	e7fe      	b.n	3b48 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    3b4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3b4c:	4293      	cmp	r3, r2
    3b4e:	d803      	bhi.n	3b58 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    3b50:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    3b52:	4630      	mov	r0, r6
    3b54:	b002      	add	sp, #8
    3b56:	bd70      	pop	{r4, r5, r6, pc}
    3b58:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    3b5a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    3b5e:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    3b60:	a901      	add	r1, sp, #4
    3b62:	4620      	mov	r0, r4
    3b64:	4b0a      	ldr	r3, [pc, #40]	; (3b90 <prvNotifyQueueSetContainer+0x7c>)
    3b66:	4798      	blx	r3
    3b68:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    3b6a:	f1b5 3fff 	cmp.w	r5, #4294967295
    3b6e:	d10a      	bne.n	3b86 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    3b70:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3b72:	2b00      	cmp	r3, #0
    3b74:	d0ed      	beq.n	3b52 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    3b76:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3b7a:	4b06      	ldr	r3, [pc, #24]	; (3b94 <prvNotifyQueueSetContainer+0x80>)
    3b7c:	4798      	blx	r3
    3b7e:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    3b80:	bf18      	it	ne
    3b82:	2601      	movne	r6, #1
    3b84:	e7e5      	b.n	3b52 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    3b86:	1c6b      	adds	r3, r5, #1
    3b88:	b25b      	sxtb	r3, r3
    3b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    3b8e:	e7e0      	b.n	3b52 <prvNotifyQueueSetContainer+0x3e>
    3b90:	00003a95 	.word	0x00003a95
    3b94:	00004c21 	.word	0x00004c21

00003b98 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    3b98:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3b9a:	b172      	cbz	r2, 3bba <prvCopyDataFromQueue+0x22>
{
    3b9c:	b510      	push	{r4, lr}
    3b9e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3ba0:	68c4      	ldr	r4, [r0, #12]
    3ba2:	4414      	add	r4, r2
    3ba4:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    3ba6:	6840      	ldr	r0, [r0, #4]
    3ba8:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3baa:	bf24      	itt	cs
    3bac:	6818      	ldrcs	r0, [r3, #0]
    3bae:	60d8      	strcs	r0, [r3, #12]
    3bb0:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    3bb2:	68d9      	ldr	r1, [r3, #12]
    3bb4:	4b01      	ldr	r3, [pc, #4]	; (3bbc <prvCopyDataFromQueue+0x24>)
    3bb6:	4798      	blx	r3
    3bb8:	bd10      	pop	{r4, pc}
    3bba:	4770      	bx	lr
    3bbc:	00005575 	.word	0x00005575

00003bc0 <prvUnlockQueue>:
{
    3bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3bc4:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    3bc6:	4b23      	ldr	r3, [pc, #140]	; (3c54 <prvUnlockQueue+0x94>)
    3bc8:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    3bca:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    3bce:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3bd0:	2c00      	cmp	r4, #0
    3bd2:	dd19      	ble.n	3c08 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3bd4:	4e20      	ldr	r6, [pc, #128]	; (3c58 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    3bd6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3c64 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3bda:	4f20      	ldr	r7, [pc, #128]	; (3c5c <prvUnlockQueue+0x9c>)
    3bdc:	e008      	b.n	3bf0 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3bde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3be0:	b193      	cbz	r3, 3c08 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3be2:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3be6:	47b8      	blx	r7
    3be8:	b960      	cbnz	r0, 3c04 <prvUnlockQueue+0x44>
    3bea:	3c01      	subs	r4, #1
    3bec:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3bee:	b15c      	cbz	r4, 3c08 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    3bf0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d0f3      	beq.n	3bde <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3bf6:	2100      	movs	r1, #0
    3bf8:	4628      	mov	r0, r5
    3bfa:	47b0      	blx	r6
    3bfc:	2800      	cmp	r0, #0
    3bfe:	d0f4      	beq.n	3bea <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    3c00:	47c0      	blx	r8
    3c02:	e7f2      	b.n	3bea <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    3c04:	47c0      	blx	r8
    3c06:	e7f0      	b.n	3bea <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    3c08:	23ff      	movs	r3, #255	; 0xff
    3c0a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    3c0e:	4b14      	ldr	r3, [pc, #80]	; (3c60 <prvUnlockQueue+0xa0>)
    3c10:	4798      	blx	r3
	taskENTER_CRITICAL();
    3c12:	4b10      	ldr	r3, [pc, #64]	; (3c54 <prvUnlockQueue+0x94>)
    3c14:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    3c16:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    3c1a:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3c1c:	2c00      	cmp	r4, #0
    3c1e:	dd12      	ble.n	3c46 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3c20:	692b      	ldr	r3, [r5, #16]
    3c22:	b183      	cbz	r3, 3c46 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3c24:	f105 0710 	add.w	r7, r5, #16
    3c28:	4e0c      	ldr	r6, [pc, #48]	; (3c5c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    3c2a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3c64 <prvUnlockQueue+0xa4>
    3c2e:	e004      	b.n	3c3a <prvUnlockQueue+0x7a>
    3c30:	3c01      	subs	r4, #1
    3c32:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3c34:	b13c      	cbz	r4, 3c46 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3c36:	692b      	ldr	r3, [r5, #16]
    3c38:	b12b      	cbz	r3, 3c46 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3c3a:	4638      	mov	r0, r7
    3c3c:	47b0      	blx	r6
    3c3e:	2800      	cmp	r0, #0
    3c40:	d0f6      	beq.n	3c30 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    3c42:	47c0      	blx	r8
    3c44:	e7f4      	b.n	3c30 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    3c46:	23ff      	movs	r3, #255	; 0xff
    3c48:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    3c4c:	4b04      	ldr	r3, [pc, #16]	; (3c60 <prvUnlockQueue+0xa0>)
    3c4e:	4798      	blx	r3
    3c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c54:	000036a5 	.word	0x000036a5
    3c58:	00003b15 	.word	0x00003b15
    3c5c:	00004c21 	.word	0x00004c21
    3c60:	000036e9 	.word	0x000036e9
    3c64:	00004d51 	.word	0x00004d51

00003c68 <xQueueGenericReset>:
{
    3c68:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    3c6a:	b330      	cbz	r0, 3cba <xQueueGenericReset+0x52>
    3c6c:	4604      	mov	r4, r0
    3c6e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    3c70:	4b1c      	ldr	r3, [pc, #112]	; (3ce4 <xQueueGenericReset+0x7c>)
    3c72:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    3c74:	6822      	ldr	r2, [r4, #0]
    3c76:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3c78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3c7a:	fb03 f301 	mul.w	r3, r3, r1
    3c7e:	18d0      	adds	r0, r2, r3
    3c80:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    3c82:	2000      	movs	r0, #0
    3c84:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    3c86:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    3c88:	1a5b      	subs	r3, r3, r1
    3c8a:	4413      	add	r3, r2
    3c8c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    3c8e:	23ff      	movs	r3, #255	; 0xff
    3c90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    3c94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    3c98:	b9c5      	cbnz	r5, 3ccc <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3c9a:	6923      	ldr	r3, [r4, #16]
    3c9c:	b1eb      	cbz	r3, 3cda <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3c9e:	f104 0010 	add.w	r0, r4, #16
    3ca2:	4b11      	ldr	r3, [pc, #68]	; (3ce8 <xQueueGenericReset+0x80>)
    3ca4:	4798      	blx	r3
    3ca6:	b1c0      	cbz	r0, 3cda <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    3ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3cac:	4b0f      	ldr	r3, [pc, #60]	; (3cec <xQueueGenericReset+0x84>)
    3cae:	601a      	str	r2, [r3, #0]
    3cb0:	f3bf 8f4f 	dsb	sy
    3cb4:	f3bf 8f6f 	isb	sy
    3cb8:	e00f      	b.n	3cda <xQueueGenericReset+0x72>
    3cba:	f04f 0380 	mov.w	r3, #128	; 0x80
    3cbe:	f383 8811 	msr	BASEPRI, r3
    3cc2:	f3bf 8f6f 	isb	sy
    3cc6:	f3bf 8f4f 	dsb	sy
    3cca:	e7fe      	b.n	3cca <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    3ccc:	f104 0010 	add.w	r0, r4, #16
    3cd0:	4d07      	ldr	r5, [pc, #28]	; (3cf0 <xQueueGenericReset+0x88>)
    3cd2:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    3cd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3cd8:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    3cda:	4b06      	ldr	r3, [pc, #24]	; (3cf4 <xQueueGenericReset+0x8c>)
    3cdc:	4798      	blx	r3
}
    3cde:	2001      	movs	r0, #1
    3ce0:	bd38      	pop	{r3, r4, r5, pc}
    3ce2:	bf00      	nop
    3ce4:	000036a5 	.word	0x000036a5
    3ce8:	00004c21 	.word	0x00004c21
    3cec:	e000ed04 	.word	0xe000ed04
    3cf0:	00003541 	.word	0x00003541
    3cf4:	000036e9 	.word	0x000036e9

00003cf8 <xQueueGenericCreate>:
{
    3cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    3cfa:	b940      	cbnz	r0, 3d0e <xQueueGenericCreate+0x16>
    3cfc:	f04f 0380 	mov.w	r3, #128	; 0x80
    3d00:	f383 8811 	msr	BASEPRI, r3
    3d04:	f3bf 8f6f 	isb	sy
    3d08:	f3bf 8f4f 	dsb	sy
    3d0c:	e7fe      	b.n	3d0c <xQueueGenericCreate+0x14>
    3d0e:	4606      	mov	r6, r0
    3d10:	4617      	mov	r7, r2
    3d12:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    3d14:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    3d18:	3054      	adds	r0, #84	; 0x54
    3d1a:	4b0b      	ldr	r3, [pc, #44]	; (3d48 <xQueueGenericCreate+0x50>)
    3d1c:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    3d1e:	4604      	mov	r4, r0
    3d20:	b178      	cbz	r0, 3d42 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    3d22:	b11d      	cbz	r5, 3d2c <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    3d24:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    3d28:	6003      	str	r3, [r0, #0]
    3d2a:	e000      	b.n	3d2e <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    3d2c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    3d2e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    3d30:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    3d32:	2101      	movs	r1, #1
    3d34:	4620      	mov	r0, r4
    3d36:	4b05      	ldr	r3, [pc, #20]	; (3d4c <xQueueGenericCreate+0x54>)
    3d38:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    3d3a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    3d3e:	2300      	movs	r3, #0
    3d40:	64a3      	str	r3, [r4, #72]	; 0x48
}
    3d42:	4620      	mov	r0, r4
    3d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3d46:	bf00      	nop
    3d48:	00003955 	.word	0x00003955
    3d4c:	00003c69 	.word	0x00003c69

00003d50 <xQueueGenericSend>:
{
    3d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d54:	b085      	sub	sp, #20
    3d56:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    3d58:	b198      	cbz	r0, 3d82 <xQueueGenericSend+0x32>
    3d5a:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3d5c:	b1d1      	cbz	r1, 3d94 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3d5e:	2b02      	cmp	r3, #2
    3d60:	d024      	beq.n	3dac <xQueueGenericSend+0x5c>
    3d62:	461e      	mov	r6, r3
    3d64:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3d66:	4b64      	ldr	r3, [pc, #400]	; (3ef8 <xQueueGenericSend+0x1a8>)
    3d68:	4798      	blx	r3
    3d6a:	bb58      	cbnz	r0, 3dc4 <xQueueGenericSend+0x74>
    3d6c:	9b01      	ldr	r3, [sp, #4]
    3d6e:	b38b      	cbz	r3, 3dd4 <xQueueGenericSend+0x84>
    3d70:	f04f 0380 	mov.w	r3, #128	; 0x80
    3d74:	f383 8811 	msr	BASEPRI, r3
    3d78:	f3bf 8f6f 	isb	sy
    3d7c:	f3bf 8f4f 	dsb	sy
    3d80:	e7fe      	b.n	3d80 <xQueueGenericSend+0x30>
    3d82:	f04f 0380 	mov.w	r3, #128	; 0x80
    3d86:	f383 8811 	msr	BASEPRI, r3
    3d8a:	f3bf 8f6f 	isb	sy
    3d8e:	f3bf 8f4f 	dsb	sy
    3d92:	e7fe      	b.n	3d92 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3d94:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3d96:	2a00      	cmp	r2, #0
    3d98:	d0e1      	beq.n	3d5e <xQueueGenericSend+0xe>
    3d9a:	f04f 0380 	mov.w	r3, #128	; 0x80
    3d9e:	f383 8811 	msr	BASEPRI, r3
    3da2:	f3bf 8f6f 	isb	sy
    3da6:	f3bf 8f4f 	dsb	sy
    3daa:	e7fe      	b.n	3daa <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3dac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3dae:	2a01      	cmp	r2, #1
    3db0:	d0d7      	beq.n	3d62 <xQueueGenericSend+0x12>
    3db2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3db6:	f383 8811 	msr	BASEPRI, r3
    3dba:	f3bf 8f6f 	isb	sy
    3dbe:	f3bf 8f4f 	dsb	sy
    3dc2:	e7fe      	b.n	3dc2 <xQueueGenericSend+0x72>
    3dc4:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    3dc6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3f24 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3dca:	f8df a15c 	ldr.w	sl, [pc, #348]	; 3f28 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    3dce:	f8df 9134 	ldr.w	r9, [pc, #308]	; 3f04 <xQueueGenericSend+0x1b4>
    3dd2:	e041      	b.n	3e58 <xQueueGenericSend+0x108>
    3dd4:	2500      	movs	r5, #0
    3dd6:	e7f6      	b.n	3dc6 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3dd8:	4632      	mov	r2, r6
    3dda:	4639      	mov	r1, r7
    3ddc:	4620      	mov	r0, r4
    3dde:	4b47      	ldr	r3, [pc, #284]	; (3efc <xQueueGenericSend+0x1ac>)
    3de0:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    3de2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3de4:	b193      	cbz	r3, 3e0c <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3de6:	4631      	mov	r1, r6
    3de8:	4620      	mov	r0, r4
    3dea:	4b45      	ldr	r3, [pc, #276]	; (3f00 <xQueueGenericSend+0x1b0>)
    3dec:	4798      	blx	r3
    3dee:	b138      	cbz	r0, 3e00 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3df4:	4b43      	ldr	r3, [pc, #268]	; (3f04 <xQueueGenericSend+0x1b4>)
    3df6:	601a      	str	r2, [r3, #0]
    3df8:	f3bf 8f4f 	dsb	sy
    3dfc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    3e00:	4b41      	ldr	r3, [pc, #260]	; (3f08 <xQueueGenericSend+0x1b8>)
    3e02:	4798      	blx	r3
				return pdPASS;
    3e04:	2001      	movs	r0, #1
}
    3e06:	b005      	add	sp, #20
    3e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e0e:	b173      	cbz	r3, 3e2e <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3e10:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3e14:	4b3d      	ldr	r3, [pc, #244]	; (3f0c <xQueueGenericSend+0x1bc>)
    3e16:	4798      	blx	r3
    3e18:	2800      	cmp	r0, #0
    3e1a:	d0f1      	beq.n	3e00 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    3e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3e20:	4b38      	ldr	r3, [pc, #224]	; (3f04 <xQueueGenericSend+0x1b4>)
    3e22:	601a      	str	r2, [r3, #0]
    3e24:	f3bf 8f4f 	dsb	sy
    3e28:	f3bf 8f6f 	isb	sy
    3e2c:	e7e8      	b.n	3e00 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    3e2e:	2800      	cmp	r0, #0
    3e30:	d0e6      	beq.n	3e00 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3e36:	4b33      	ldr	r3, [pc, #204]	; (3f04 <xQueueGenericSend+0x1b4>)
    3e38:	601a      	str	r2, [r3, #0]
    3e3a:	f3bf 8f4f 	dsb	sy
    3e3e:	f3bf 8f6f 	isb	sy
    3e42:	e7dd      	b.n	3e00 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    3e44:	4b30      	ldr	r3, [pc, #192]	; (3f08 <xQueueGenericSend+0x1b8>)
    3e46:	4798      	blx	r3
					return errQUEUE_FULL;
    3e48:	2000      	movs	r0, #0
    3e4a:	e7dc      	b.n	3e06 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    3e4c:	4620      	mov	r0, r4
    3e4e:	4b30      	ldr	r3, [pc, #192]	; (3f10 <xQueueGenericSend+0x1c0>)
    3e50:	4798      	blx	r3
				(void)xTaskResumeAll();
    3e52:	4b30      	ldr	r3, [pc, #192]	; (3f14 <xQueueGenericSend+0x1c4>)
    3e54:	4798      	blx	r3
    3e56:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    3e58:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3e5a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3e5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3e5e:	429a      	cmp	r2, r3
    3e60:	d3ba      	bcc.n	3dd8 <xQueueGenericSend+0x88>
    3e62:	2e02      	cmp	r6, #2
    3e64:	d0b8      	beq.n	3dd8 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    3e66:	9b01      	ldr	r3, [sp, #4]
    3e68:	2b00      	cmp	r3, #0
    3e6a:	d0eb      	beq.n	3e44 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    3e6c:	b90d      	cbnz	r5, 3e72 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3e6e:	a802      	add	r0, sp, #8
    3e70:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    3e72:	4b25      	ldr	r3, [pc, #148]	; (3f08 <xQueueGenericSend+0x1b8>)
    3e74:	4798      	blx	r3
		vTaskSuspendAll();
    3e76:	4b28      	ldr	r3, [pc, #160]	; (3f18 <xQueueGenericSend+0x1c8>)
    3e78:	4798      	blx	r3
		prvLockQueue(pxQueue);
    3e7a:	47c0      	blx	r8
    3e7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3e80:	b25b      	sxtb	r3, r3
    3e82:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e86:	bf04      	itt	eq
    3e88:	2300      	moveq	r3, #0
    3e8a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    3e8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3e92:	b25b      	sxtb	r3, r3
    3e94:	f1b3 3fff 	cmp.w	r3, #4294967295
    3e98:	bf04      	itt	eq
    3e9a:	2300      	moveq	r3, #0
    3e9c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    3ea0:	4b19      	ldr	r3, [pc, #100]	; (3f08 <xQueueGenericSend+0x1b8>)
    3ea2:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3ea4:	a901      	add	r1, sp, #4
    3ea6:	a802      	add	r0, sp, #8
    3ea8:	4b1c      	ldr	r3, [pc, #112]	; (3f1c <xQueueGenericSend+0x1cc>)
    3eaa:	4798      	blx	r3
    3eac:	b9e0      	cbnz	r0, 3ee8 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    3eae:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    3eb0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    3eb4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    3eb6:	4b14      	ldr	r3, [pc, #80]	; (3f08 <xQueueGenericSend+0x1b8>)
    3eb8:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    3eba:	45ab      	cmp	fp, r5
    3ebc:	d1c6      	bne.n	3e4c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    3ebe:	9901      	ldr	r1, [sp, #4]
    3ec0:	f104 0010 	add.w	r0, r4, #16
    3ec4:	4b16      	ldr	r3, [pc, #88]	; (3f20 <xQueueGenericSend+0x1d0>)
    3ec6:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3ec8:	4620      	mov	r0, r4
    3eca:	4b11      	ldr	r3, [pc, #68]	; (3f10 <xQueueGenericSend+0x1c0>)
    3ecc:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    3ece:	4b11      	ldr	r3, [pc, #68]	; (3f14 <xQueueGenericSend+0x1c4>)
    3ed0:	4798      	blx	r3
    3ed2:	2800      	cmp	r0, #0
    3ed4:	d1bf      	bne.n	3e56 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    3ed6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3eda:	f8c9 3000 	str.w	r3, [r9]
    3ede:	f3bf 8f4f 	dsb	sy
    3ee2:	f3bf 8f6f 	isb	sy
    3ee6:	e7b6      	b.n	3e56 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    3ee8:	4620      	mov	r0, r4
    3eea:	4b09      	ldr	r3, [pc, #36]	; (3f10 <xQueueGenericSend+0x1c0>)
    3eec:	4798      	blx	r3
			(void)xTaskResumeAll();
    3eee:	4b09      	ldr	r3, [pc, #36]	; (3f14 <xQueueGenericSend+0x1c4>)
    3ef0:	4798      	blx	r3
			return errQUEUE_FULL;
    3ef2:	2000      	movs	r0, #0
    3ef4:	e787      	b.n	3e06 <xQueueGenericSend+0xb6>
    3ef6:	bf00      	nop
    3ef8:	00004d61 	.word	0x00004d61
    3efc:	00003a95 	.word	0x00003a95
    3f00:	00003b15 	.word	0x00003b15
    3f04:	e000ed04 	.word	0xe000ed04
    3f08:	000036e9 	.word	0x000036e9
    3f0c:	00004c21 	.word	0x00004c21
    3f10:	00003bc1 	.word	0x00003bc1
    3f14:	000048d5 	.word	0x000048d5
    3f18:	0000478d 	.word	0x0000478d
    3f1c:	00004cc5 	.word	0x00004cc5
    3f20:	00004ba1 	.word	0x00004ba1
    3f24:	000036a5 	.word	0x000036a5
    3f28:	00004cb1 	.word	0x00004cb1

00003f2c <xQueueCreateMutex>:
{
    3f2c:	b538      	push	{r3, r4, r5, lr}
	pxNewQueue = (Queue_t *)xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType);
    3f2e:	4602      	mov	r2, r0
    3f30:	2100      	movs	r1, #0
    3f32:	2001      	movs	r0, #1
    3f34:	4b06      	ldr	r3, [pc, #24]	; (3f50 <xQueueCreateMutex+0x24>)
    3f36:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    3f38:	4604      	mov	r4, r0
    3f3a:	b138      	cbz	r0, 3f4c <xQueueCreateMutex+0x20>
		pxNewQueue->pxMutexHolder = NULL;
    3f3c:	2100      	movs	r1, #0
    3f3e:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    3f40:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    3f42:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    3f44:	460b      	mov	r3, r1
    3f46:	460a      	mov	r2, r1
    3f48:	4d02      	ldr	r5, [pc, #8]	; (3f54 <xQueueCreateMutex+0x28>)
    3f4a:	47a8      	blx	r5
}
    3f4c:	4620      	mov	r0, r4
    3f4e:	bd38      	pop	{r3, r4, r5, pc}
    3f50:	00003cf9 	.word	0x00003cf9
    3f54:	00003d51 	.word	0x00003d51

00003f58 <xQueueGenericSendFromISR>:
{
    3f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    3f5c:	2800      	cmp	r0, #0
    3f5e:	d036      	beq.n	3fce <xQueueGenericSendFromISR+0x76>
    3f60:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3f62:	2900      	cmp	r1, #0
    3f64:	d03c      	beq.n	3fe0 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3f66:	2b02      	cmp	r3, #2
    3f68:	d046      	beq.n	3ff8 <xQueueGenericSendFromISR+0xa0>
    3f6a:	461f      	mov	r7, r3
    3f6c:	4690      	mov	r8, r2
    3f6e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    3f70:	4b37      	ldr	r3, [pc, #220]	; (4050 <xQueueGenericSendFromISR+0xf8>)
    3f72:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    3f74:	f3ef 8611 	mrs	r6, BASEPRI
    3f78:	f04f 0380 	mov.w	r3, #128	; 0x80
    3f7c:	f383 8811 	msr	BASEPRI, r3
    3f80:	f3bf 8f6f 	isb	sy
    3f84:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3f88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3f8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3f8c:	429a      	cmp	r2, r3
    3f8e:	d301      	bcc.n	3f94 <xQueueGenericSendFromISR+0x3c>
    3f90:	2f02      	cmp	r7, #2
    3f92:	d151      	bne.n	4038 <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    3f94:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    3f98:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3f9a:	463a      	mov	r2, r7
    3f9c:	4649      	mov	r1, r9
    3f9e:	4620      	mov	r0, r4
    3fa0:	4b2c      	ldr	r3, [pc, #176]	; (4054 <xQueueGenericSendFromISR+0xfc>)
    3fa2:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    3fa4:	f1b5 3fff 	cmp.w	r5, #4294967295
    3fa8:	d140      	bne.n	402c <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    3faa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3fac:	b383      	cbz	r3, 4010 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3fae:	4639      	mov	r1, r7
    3fb0:	4620      	mov	r0, r4
    3fb2:	4b29      	ldr	r3, [pc, #164]	; (4058 <xQueueGenericSendFromISR+0x100>)
    3fb4:	4798      	blx	r3
    3fb6:	2800      	cmp	r0, #0
    3fb8:	d040      	beq.n	403c <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    3fba:	f1b8 0f00 	cmp.w	r8, #0
    3fbe:	d03f      	beq.n	4040 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    3fc0:	2001      	movs	r0, #1
    3fc2:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3fc6:	f386 8811 	msr	BASEPRI, r6
}
    3fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    3fce:	f04f 0380 	mov.w	r3, #128	; 0x80
    3fd2:	f383 8811 	msr	BASEPRI, r3
    3fd6:	f3bf 8f6f 	isb	sy
    3fda:	f3bf 8f4f 	dsb	sy
    3fde:	e7fe      	b.n	3fde <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3fe0:	6c00      	ldr	r0, [r0, #64]	; 0x40
    3fe2:	2800      	cmp	r0, #0
    3fe4:	d0bf      	beq.n	3f66 <xQueueGenericSendFromISR+0xe>
    3fe6:	f04f 0380 	mov.w	r3, #128	; 0x80
    3fea:	f383 8811 	msr	BASEPRI, r3
    3fee:	f3bf 8f6f 	isb	sy
    3ff2:	f3bf 8f4f 	dsb	sy
    3ff6:	e7fe      	b.n	3ff6 <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3ff8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3ffa:	2801      	cmp	r0, #1
    3ffc:	d0b5      	beq.n	3f6a <xQueueGenericSendFromISR+0x12>
    3ffe:	f04f 0380 	mov.w	r3, #128	; 0x80
    4002:	f383 8811 	msr	BASEPRI, r3
    4006:	f3bf 8f6f 	isb	sy
    400a:	f3bf 8f4f 	dsb	sy
    400e:	e7fe      	b.n	400e <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4010:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4012:	b1bb      	cbz	r3, 4044 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4014:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4018:	4b10      	ldr	r3, [pc, #64]	; (405c <xQueueGenericSendFromISR+0x104>)
    401a:	4798      	blx	r3
    401c:	b1a0      	cbz	r0, 4048 <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    401e:	f1b8 0f00 	cmp.w	r8, #0
    4022:	d013      	beq.n	404c <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    4024:	2001      	movs	r0, #1
    4026:	f8c8 0000 	str.w	r0, [r8]
    402a:	e7cc      	b.n	3fc6 <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    402c:	1c6b      	adds	r3, r5, #1
    402e:	b25b      	sxtb	r3, r3
    4030:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    4034:	2001      	movs	r0, #1
    4036:	e7c6      	b.n	3fc6 <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    4038:	2000      	movs	r0, #0
    403a:	e7c4      	b.n	3fc6 <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    403c:	2001      	movs	r0, #1
    403e:	e7c2      	b.n	3fc6 <xQueueGenericSendFromISR+0x6e>
    4040:	2001      	movs	r0, #1
    4042:	e7c0      	b.n	3fc6 <xQueueGenericSendFromISR+0x6e>
    4044:	2001      	movs	r0, #1
    4046:	e7be      	b.n	3fc6 <xQueueGenericSendFromISR+0x6e>
    4048:	2001      	movs	r0, #1
    404a:	e7bc      	b.n	3fc6 <xQueueGenericSendFromISR+0x6e>
    404c:	2001      	movs	r0, #1
    404e:	e7ba      	b.n	3fc6 <xQueueGenericSendFromISR+0x6e>
    4050:	000038fd 	.word	0x000038fd
    4054:	00003a95 	.word	0x00003a95
    4058:	00003b15 	.word	0x00003b15
    405c:	00004c21 	.word	0x00004c21

00004060 <xQueueReceive>:
{
    4060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4064:	b084      	sub	sp, #16
    4066:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    4068:	b180      	cbz	r0, 408c <xQueueReceive+0x2c>
    406a:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    406c:	b1b9      	cbz	r1, 409e <xQueueReceive+0x3e>
    406e:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4070:	4b50      	ldr	r3, [pc, #320]	; (41b4 <xQueueReceive+0x154>)
    4072:	4798      	blx	r3
    4074:	b9f8      	cbnz	r0, 40b6 <xQueueReceive+0x56>
    4076:	9b01      	ldr	r3, [sp, #4]
    4078:	b32b      	cbz	r3, 40c6 <xQueueReceive+0x66>
    407a:	f04f 0380 	mov.w	r3, #128	; 0x80
    407e:	f383 8811 	msr	BASEPRI, r3
    4082:	f3bf 8f6f 	isb	sy
    4086:	f3bf 8f4f 	dsb	sy
    408a:	e7fe      	b.n	408a <xQueueReceive+0x2a>
    408c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4090:	f383 8811 	msr	BASEPRI, r3
    4094:	f3bf 8f6f 	isb	sy
    4098:	f3bf 8f4f 	dsb	sy
    409c:	e7fe      	b.n	409c <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    409e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    40a0:	2b00      	cmp	r3, #0
    40a2:	d0e4      	beq.n	406e <xQueueReceive+0xe>
    40a4:	f04f 0380 	mov.w	r3, #128	; 0x80
    40a8:	f383 8811 	msr	BASEPRI, r3
    40ac:	f3bf 8f6f 	isb	sy
    40b0:	f3bf 8f4f 	dsb	sy
    40b4:	e7fe      	b.n	40b4 <xQueueReceive+0x54>
    40b6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    40b8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 41e0 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    40bc:	f8df a124 	ldr.w	sl, [pc, #292]	; 41e4 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    40c0:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 41c0 <xQueueReceive+0x160>
    40c4:	e029      	b.n	411a <xQueueReceive+0xba>
    40c6:	2700      	movs	r7, #0
    40c8:	e7f6      	b.n	40b8 <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    40ca:	4631      	mov	r1, r6
    40cc:	4620      	mov	r0, r4
    40ce:	4b3a      	ldr	r3, [pc, #232]	; (41b8 <xQueueReceive+0x158>)
    40d0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    40d2:	3d01      	subs	r5, #1
    40d4:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    40d6:	6923      	ldr	r3, [r4, #16]
    40d8:	b163      	cbz	r3, 40f4 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    40da:	f104 0010 	add.w	r0, r4, #16
    40de:	4b37      	ldr	r3, [pc, #220]	; (41bc <xQueueReceive+0x15c>)
    40e0:	4798      	blx	r3
    40e2:	b138      	cbz	r0, 40f4 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    40e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    40e8:	4b35      	ldr	r3, [pc, #212]	; (41c0 <xQueueReceive+0x160>)
    40ea:	601a      	str	r2, [r3, #0]
    40ec:	f3bf 8f4f 	dsb	sy
    40f0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    40f4:	4b33      	ldr	r3, [pc, #204]	; (41c4 <xQueueReceive+0x164>)
    40f6:	4798      	blx	r3
				return pdPASS;
    40f8:	2001      	movs	r0, #1
}
    40fa:	b004      	add	sp, #16
    40fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    4100:	4b30      	ldr	r3, [pc, #192]	; (41c4 <xQueueReceive+0x164>)
    4102:	4798      	blx	r3
					return errQUEUE_EMPTY;
    4104:	2000      	movs	r0, #0
    4106:	e7f8      	b.n	40fa <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4108:	a802      	add	r0, sp, #8
    410a:	47d0      	blx	sl
    410c:	e00e      	b.n	412c <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    410e:	4620      	mov	r0, r4
    4110:	4b2d      	ldr	r3, [pc, #180]	; (41c8 <xQueueReceive+0x168>)
    4112:	4798      	blx	r3
				(void)xTaskResumeAll();
    4114:	4b2d      	ldr	r3, [pc, #180]	; (41cc <xQueueReceive+0x16c>)
    4116:	4798      	blx	r3
    4118:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    411a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    411c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    411e:	2d00      	cmp	r5, #0
    4120:	d1d3      	bne.n	40ca <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    4122:	9b01      	ldr	r3, [sp, #4]
    4124:	2b00      	cmp	r3, #0
    4126:	d0eb      	beq.n	4100 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    4128:	2f00      	cmp	r7, #0
    412a:	d0ed      	beq.n	4108 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    412c:	4b25      	ldr	r3, [pc, #148]	; (41c4 <xQueueReceive+0x164>)
    412e:	4798      	blx	r3
		vTaskSuspendAll();
    4130:	4b27      	ldr	r3, [pc, #156]	; (41d0 <xQueueReceive+0x170>)
    4132:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4134:	47c0      	blx	r8
    4136:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    413a:	b25b      	sxtb	r3, r3
    413c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4140:	bf04      	itt	eq
    4142:	2300      	moveq	r3, #0
    4144:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4148:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    414c:	b25b      	sxtb	r3, r3
    414e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4152:	bf04      	itt	eq
    4154:	2300      	moveq	r3, #0
    4156:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    415a:	4b1a      	ldr	r3, [pc, #104]	; (41c4 <xQueueReceive+0x164>)
    415c:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    415e:	a901      	add	r1, sp, #4
    4160:	a802      	add	r0, sp, #8
    4162:	4b1c      	ldr	r3, [pc, #112]	; (41d4 <xQueueReceive+0x174>)
    4164:	4798      	blx	r3
    4166:	b9c8      	cbnz	r0, 419c <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4168:	4620      	mov	r0, r4
    416a:	4b1b      	ldr	r3, [pc, #108]	; (41d8 <xQueueReceive+0x178>)
    416c:	4798      	blx	r3
    416e:	2800      	cmp	r0, #0
    4170:	d0cd      	beq.n	410e <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    4172:	9901      	ldr	r1, [sp, #4]
    4174:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4178:	4b18      	ldr	r3, [pc, #96]	; (41dc <xQueueReceive+0x17c>)
    417a:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    417c:	4620      	mov	r0, r4
    417e:	4b12      	ldr	r3, [pc, #72]	; (41c8 <xQueueReceive+0x168>)
    4180:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    4182:	4b12      	ldr	r3, [pc, #72]	; (41cc <xQueueReceive+0x16c>)
    4184:	4798      	blx	r3
    4186:	2800      	cmp	r0, #0
    4188:	d1c6      	bne.n	4118 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    418a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    418e:	f8c9 3000 	str.w	r3, [r9]
    4192:	f3bf 8f4f 	dsb	sy
    4196:	f3bf 8f6f 	isb	sy
    419a:	e7bd      	b.n	4118 <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    419c:	4620      	mov	r0, r4
    419e:	4b0a      	ldr	r3, [pc, #40]	; (41c8 <xQueueReceive+0x168>)
    41a0:	4798      	blx	r3
			(void)xTaskResumeAll();
    41a2:	4b0a      	ldr	r3, [pc, #40]	; (41cc <xQueueReceive+0x16c>)
    41a4:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    41a6:	4620      	mov	r0, r4
    41a8:	4b0b      	ldr	r3, [pc, #44]	; (41d8 <xQueueReceive+0x178>)
    41aa:	4798      	blx	r3
    41ac:	2800      	cmp	r0, #0
    41ae:	d0b3      	beq.n	4118 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    41b0:	2000      	movs	r0, #0
    41b2:	e7a2      	b.n	40fa <xQueueReceive+0x9a>
    41b4:	00004d61 	.word	0x00004d61
    41b8:	00003b99 	.word	0x00003b99
    41bc:	00004c21 	.word	0x00004c21
    41c0:	e000ed04 	.word	0xe000ed04
    41c4:	000036e9 	.word	0x000036e9
    41c8:	00003bc1 	.word	0x00003bc1
    41cc:	000048d5 	.word	0x000048d5
    41d0:	0000478d 	.word	0x0000478d
    41d4:	00004cc5 	.word	0x00004cc5
    41d8:	00003a75 	.word	0x00003a75
    41dc:	00004ba1 	.word	0x00004ba1
    41e0:	000036a5 	.word	0x000036a5
    41e4:	00004cb1 	.word	0x00004cb1

000041e8 <xQueueSemaphoreTake>:
{
    41e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    41ec:	b085      	sub	sp, #20
    41ee:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    41f0:	b158      	cbz	r0, 420a <xQueueSemaphoreTake+0x22>
    41f2:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    41f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    41f6:	b18b      	cbz	r3, 421c <xQueueSemaphoreTake+0x34>
    41f8:	f04f 0380 	mov.w	r3, #128	; 0x80
    41fc:	f383 8811 	msr	BASEPRI, r3
    4200:	f3bf 8f6f 	isb	sy
    4204:	f3bf 8f4f 	dsb	sy
    4208:	e7fe      	b.n	4208 <xQueueSemaphoreTake+0x20>
    420a:	f04f 0380 	mov.w	r3, #128	; 0x80
    420e:	f383 8811 	msr	BASEPRI, r3
    4212:	f3bf 8f6f 	isb	sy
    4216:	f3bf 8f4f 	dsb	sy
    421a:	e7fe      	b.n	421a <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    421c:	4b5b      	ldr	r3, [pc, #364]	; (438c <xQueueSemaphoreTake+0x1a4>)
    421e:	4798      	blx	r3
    4220:	b950      	cbnz	r0, 4238 <xQueueSemaphoreTake+0x50>
    4222:	9b01      	ldr	r3, [sp, #4]
    4224:	b183      	cbz	r3, 4248 <xQueueSemaphoreTake+0x60>
    4226:	f04f 0380 	mov.w	r3, #128	; 0x80
    422a:	f383 8811 	msr	BASEPRI, r3
    422e:	f3bf 8f6f 	isb	sy
    4232:	f3bf 8f4f 	dsb	sy
    4236:	e7fe      	b.n	4236 <xQueueSemaphoreTake+0x4e>
    4238:	2500      	movs	r5, #0
    423a:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    423c:	4e54      	ldr	r6, [pc, #336]	; (4390 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    423e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 43c4 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    4242:	f8df 8158 	ldr.w	r8, [pc, #344]	; 439c <xQueueSemaphoreTake+0x1b4>
    4246:	e048      	b.n	42da <xQueueSemaphoreTake+0xf2>
    4248:	2500      	movs	r5, #0
    424a:	462f      	mov	r7, r5
    424c:	e7f6      	b.n	423c <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    424e:	3b01      	subs	r3, #1
    4250:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4252:	6823      	ldr	r3, [r4, #0]
    4254:	b913      	cbnz	r3, 425c <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    4256:	4b4f      	ldr	r3, [pc, #316]	; (4394 <xQueueSemaphoreTake+0x1ac>)
    4258:	4798      	blx	r3
    425a:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    425c:	6923      	ldr	r3, [r4, #16]
    425e:	b163      	cbz	r3, 427a <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4260:	f104 0010 	add.w	r0, r4, #16
    4264:	4b4c      	ldr	r3, [pc, #304]	; (4398 <xQueueSemaphoreTake+0x1b0>)
    4266:	4798      	blx	r3
    4268:	b138      	cbz	r0, 427a <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    426a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    426e:	4b4b      	ldr	r3, [pc, #300]	; (439c <xQueueSemaphoreTake+0x1b4>)
    4270:	601a      	str	r2, [r3, #0]
    4272:	f3bf 8f4f 	dsb	sy
    4276:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    427a:	4b49      	ldr	r3, [pc, #292]	; (43a0 <xQueueSemaphoreTake+0x1b8>)
    427c:	4798      	blx	r3
				return pdPASS;
    427e:	2501      	movs	r5, #1
}
    4280:	4628      	mov	r0, r5
    4282:	b005      	add	sp, #20
    4284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    4288:	b145      	cbz	r5, 429c <xQueueSemaphoreTake+0xb4>
    428a:	f04f 0380 	mov.w	r3, #128	; 0x80
    428e:	f383 8811 	msr	BASEPRI, r3
    4292:	f3bf 8f6f 	isb	sy
    4296:	f3bf 8f4f 	dsb	sy
    429a:	e7fe      	b.n	429a <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    429c:	4b40      	ldr	r3, [pc, #256]	; (43a0 <xQueueSemaphoreTake+0x1b8>)
    429e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    42a0:	e7ee      	b.n	4280 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    42a2:	a802      	add	r0, sp, #8
    42a4:	47c8      	blx	r9
    42a6:	e021      	b.n	42ec <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    42a8:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    42aa:	6860      	ldr	r0, [r4, #4]
    42ac:	4b3d      	ldr	r3, [pc, #244]	; (43a4 <xQueueSemaphoreTake+0x1bc>)
    42ae:	4798      	blx	r3
    42b0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    42b2:	4b3b      	ldr	r3, [pc, #236]	; (43a0 <xQueueSemaphoreTake+0x1b8>)
    42b4:	4798      	blx	r3
    42b6:	e040      	b.n	433a <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    42b8:	4620      	mov	r0, r4
    42ba:	4b3b      	ldr	r3, [pc, #236]	; (43a8 <xQueueSemaphoreTake+0x1c0>)
    42bc:	4798      	blx	r3
				(void)xTaskResumeAll();
    42be:	4b3b      	ldr	r3, [pc, #236]	; (43ac <xQueueSemaphoreTake+0x1c4>)
    42c0:	4798      	blx	r3
    42c2:	e009      	b.n	42d8 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    42c4:	4620      	mov	r0, r4
    42c6:	4b38      	ldr	r3, [pc, #224]	; (43a8 <xQueueSemaphoreTake+0x1c0>)
    42c8:	4798      	blx	r3
			(void)xTaskResumeAll();
    42ca:	4b38      	ldr	r3, [pc, #224]	; (43ac <xQueueSemaphoreTake+0x1c4>)
    42cc:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    42ce:	4620      	mov	r0, r4
    42d0:	4b37      	ldr	r3, [pc, #220]	; (43b0 <xQueueSemaphoreTake+0x1c8>)
    42d2:	4798      	blx	r3
    42d4:	2800      	cmp	r0, #0
    42d6:	d145      	bne.n	4364 <xQueueSemaphoreTake+0x17c>
    42d8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    42da:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    42dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    42de:	2b00      	cmp	r3, #0
    42e0:	d1b5      	bne.n	424e <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    42e2:	9b01      	ldr	r3, [sp, #4]
    42e4:	2b00      	cmp	r3, #0
    42e6:	d0cf      	beq.n	4288 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    42e8:	2f00      	cmp	r7, #0
    42ea:	d0da      	beq.n	42a2 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    42ec:	4b2c      	ldr	r3, [pc, #176]	; (43a0 <xQueueSemaphoreTake+0x1b8>)
    42ee:	4798      	blx	r3
		vTaskSuspendAll();
    42f0:	4b30      	ldr	r3, [pc, #192]	; (43b4 <xQueueSemaphoreTake+0x1cc>)
    42f2:	4798      	blx	r3
		prvLockQueue(pxQueue);
    42f4:	47b0      	blx	r6
    42f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    42fa:	b25b      	sxtb	r3, r3
    42fc:	f1b3 3fff 	cmp.w	r3, #4294967295
    4300:	bf04      	itt	eq
    4302:	2300      	moveq	r3, #0
    4304:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4308:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    430c:	b25b      	sxtb	r3, r3
    430e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4312:	bf04      	itt	eq
    4314:	2300      	moveq	r3, #0
    4316:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    431a:	4b21      	ldr	r3, [pc, #132]	; (43a0 <xQueueSemaphoreTake+0x1b8>)
    431c:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    431e:	a901      	add	r1, sp, #4
    4320:	a802      	add	r0, sp, #8
    4322:	4b25      	ldr	r3, [pc, #148]	; (43b8 <xQueueSemaphoreTake+0x1d0>)
    4324:	4798      	blx	r3
    4326:	2800      	cmp	r0, #0
    4328:	d1cc      	bne.n	42c4 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    432a:	4620      	mov	r0, r4
    432c:	4b20      	ldr	r3, [pc, #128]	; (43b0 <xQueueSemaphoreTake+0x1c8>)
    432e:	4798      	blx	r3
    4330:	2800      	cmp	r0, #0
    4332:	d0c1      	beq.n	42b8 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4334:	6823      	ldr	r3, [r4, #0]
    4336:	2b00      	cmp	r3, #0
    4338:	d0b6      	beq.n	42a8 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    433a:	9901      	ldr	r1, [sp, #4]
    433c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4340:	4b1e      	ldr	r3, [pc, #120]	; (43bc <xQueueSemaphoreTake+0x1d4>)
    4342:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4344:	4620      	mov	r0, r4
    4346:	4b18      	ldr	r3, [pc, #96]	; (43a8 <xQueueSemaphoreTake+0x1c0>)
    4348:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    434a:	4b18      	ldr	r3, [pc, #96]	; (43ac <xQueueSemaphoreTake+0x1c4>)
    434c:	4798      	blx	r3
    434e:	2800      	cmp	r0, #0
    4350:	d1c2      	bne.n	42d8 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    4352:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4356:	f8c8 3000 	str.w	r3, [r8]
    435a:	f3bf 8f4f 	dsb	sy
    435e:	f3bf 8f6f 	isb	sy
    4362:	e7b9      	b.n	42d8 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    4364:	2d00      	cmp	r5, #0
    4366:	d08b      	beq.n	4280 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    4368:	4b09      	ldr	r3, [pc, #36]	; (4390 <xQueueSemaphoreTake+0x1a8>)
    436a:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    436c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    436e:	b153      	cbz	r3, 4386 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    4370:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4372:	6819      	ldr	r1, [r3, #0]
    4374:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    4378:	6860      	ldr	r0, [r4, #4]
    437a:	4b11      	ldr	r3, [pc, #68]	; (43c0 <xQueueSemaphoreTake+0x1d8>)
    437c:	4798      	blx	r3
						taskEXIT_CRITICAL();
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <xQueueSemaphoreTake+0x1b8>)
    4380:	4798      	blx	r3
				return errQUEUE_EMPTY;
    4382:	2500      	movs	r5, #0
    4384:	e77c      	b.n	4280 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    4386:	2100      	movs	r1, #0
    4388:	e7f6      	b.n	4378 <xQueueSemaphoreTake+0x190>
    438a:	bf00      	nop
    438c:	00004d61 	.word	0x00004d61
    4390:	000036a5 	.word	0x000036a5
    4394:	00004f6d 	.word	0x00004f6d
    4398:	00004c21 	.word	0x00004c21
    439c:	e000ed04 	.word	0xe000ed04
    43a0:	000036e9 	.word	0x000036e9
    43a4:	00004d81 	.word	0x00004d81
    43a8:	00003bc1 	.word	0x00003bc1
    43ac:	000048d5 	.word	0x000048d5
    43b0:	00003a75 	.word	0x00003a75
    43b4:	0000478d 	.word	0x0000478d
    43b8:	00004cc5 	.word	0x00004cc5
    43bc:	00004ba1 	.word	0x00004ba1
    43c0:	00004ec1 	.word	0x00004ec1
    43c4:	00004cb1 	.word	0x00004cb1

000043c8 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    43c8:	b940      	cbnz	r0, 43dc <uxQueueMessagesWaiting+0x14>
    43ca:	f04f 0380 	mov.w	r3, #128	; 0x80
    43ce:	f383 8811 	msr	BASEPRI, r3
    43d2:	f3bf 8f6f 	isb	sy
    43d6:	f3bf 8f4f 	dsb	sy
    43da:	e7fe      	b.n	43da <uxQueueMessagesWaiting+0x12>
{
    43dc:	b510      	push	{r4, lr}
    43de:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    43e0:	4b03      	ldr	r3, [pc, #12]	; (43f0 <uxQueueMessagesWaiting+0x28>)
    43e2:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    43e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    43e6:	4b03      	ldr	r3, [pc, #12]	; (43f4 <uxQueueMessagesWaiting+0x2c>)
    43e8:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    43ea:	4620      	mov	r0, r4
    43ec:	bd10      	pop	{r4, pc}
    43ee:	bf00      	nop
    43f0:	000036a5 	.word	0x000036a5
    43f4:	000036e9 	.word	0x000036e9

000043f8 <vQueueWaitForMessageRestricted>:
{
    43f8:	b570      	push	{r4, r5, r6, lr}
    43fa:	4604      	mov	r4, r0
    43fc:	460d      	mov	r5, r1
    43fe:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    4400:	4b11      	ldr	r3, [pc, #68]	; (4448 <vQueueWaitForMessageRestricted+0x50>)
    4402:	4798      	blx	r3
    4404:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4408:	b25b      	sxtb	r3, r3
    440a:	f1b3 3fff 	cmp.w	r3, #4294967295
    440e:	bf04      	itt	eq
    4410:	2300      	moveq	r3, #0
    4412:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4416:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    441a:	b25b      	sxtb	r3, r3
    441c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4420:	bf04      	itt	eq
    4422:	2300      	moveq	r3, #0
    4424:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    4428:	4b08      	ldr	r3, [pc, #32]	; (444c <vQueueWaitForMessageRestricted+0x54>)
    442a:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    442c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    442e:	b11b      	cbz	r3, 4438 <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    4430:	4620      	mov	r0, r4
    4432:	4b07      	ldr	r3, [pc, #28]	; (4450 <vQueueWaitForMessageRestricted+0x58>)
    4434:	4798      	blx	r3
    4436:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    4438:	4632      	mov	r2, r6
    443a:	4629      	mov	r1, r5
    443c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4440:	4b04      	ldr	r3, [pc, #16]	; (4454 <vQueueWaitForMessageRestricted+0x5c>)
    4442:	4798      	blx	r3
    4444:	e7f4      	b.n	4430 <vQueueWaitForMessageRestricted+0x38>
    4446:	bf00      	nop
    4448:	000036a5 	.word	0x000036a5
    444c:	000036e9 	.word	0x000036e9
    4450:	00003bc1 	.word	0x00003bc1
    4454:	00004bdd 	.word	0x00004bdd

00004458 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    4458:	4a06      	ldr	r2, [pc, #24]	; (4474 <prvIdleTask+0x1c>)
				taskYIELD();
    445a:	4807      	ldr	r0, [pc, #28]	; (4478 <prvIdleTask+0x20>)
    445c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    4460:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4462:	2b01      	cmp	r3, #1
    4464:	d9fc      	bls.n	4460 <prvIdleTask+0x8>
				taskYIELD();
    4466:	6001      	str	r1, [r0, #0]
    4468:	f3bf 8f4f 	dsb	sy
    446c:	f3bf 8f6f 	isb	sy
    4470:	e7f6      	b.n	4460 <prvIdleTask+0x8>
    4472:	bf00      	nop
    4474:	2000330c 	.word	0x2000330c
    4478:	e000ed04 	.word	0xe000ed04

0000447c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    447c:	4b09      	ldr	r3, [pc, #36]	; (44a4 <prvResetNextTaskUnblockTime+0x28>)
    447e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    4482:	681b      	ldr	r3, [r3, #0]
    4484:	b143      	cbz	r3, 4498 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    4486:	4b07      	ldr	r3, [pc, #28]	; (44a4 <prvResetNextTaskUnblockTime+0x28>)
    4488:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    448c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    448e:	68d2      	ldr	r2, [r2, #12]
    4490:	6852      	ldr	r2, [r2, #4]
    4492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4496:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    4498:	f04f 32ff 	mov.w	r2, #4294967295
    449c:	4b01      	ldr	r3, [pc, #4]	; (44a4 <prvResetNextTaskUnblockTime+0x28>)
    449e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    44a2:	4770      	bx	lr
    44a4:	2000330c 	.word	0x2000330c

000044a8 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    44a8:	b570      	push	{r4, r5, r6, lr}
    44aa:	4604      	mov	r4, r0
    44ac:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    44ae:	4b1a      	ldr	r3, [pc, #104]	; (4518 <prvAddCurrentTaskToDelayedList+0x70>)
    44b0:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    44b4:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    44b8:	3004      	adds	r0, #4
    44ba:	4b18      	ldr	r3, [pc, #96]	; (451c <prvAddCurrentTaskToDelayedList+0x74>)
    44bc:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    44be:	f1b4 3fff 	cmp.w	r4, #4294967295
    44c2:	d016      	beq.n	44f2 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    44c4:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    44c6:	4b14      	ldr	r3, [pc, #80]	; (4518 <prvAddCurrentTaskToDelayedList+0x70>)
    44c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    44cc:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    44ce:	42a5      	cmp	r5, r4
    44d0:	d818      	bhi.n	4504 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    44d2:	4d11      	ldr	r5, [pc, #68]	; (4518 <prvAddCurrentTaskToDelayedList+0x70>)
    44d4:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    44d8:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    44dc:	3104      	adds	r1, #4
    44de:	4b10      	ldr	r3, [pc, #64]	; (4520 <prvAddCurrentTaskToDelayedList+0x78>)
    44e0:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    44e2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    44e6:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    44e8:	bf3c      	itt	cc
    44ea:	462b      	movcc	r3, r5
    44ec:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    44f0:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    44f2:	2e00      	cmp	r6, #0
    44f4:	d0e6      	beq.n	44c4 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    44f6:	4808      	ldr	r0, [pc, #32]	; (4518 <prvAddCurrentTaskToDelayedList+0x70>)
    44f8:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    44fc:	3104      	adds	r1, #4
    44fe:	4b09      	ldr	r3, [pc, #36]	; (4524 <prvAddCurrentTaskToDelayedList+0x7c>)
    4500:	4798      	blx	r3
    4502:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    4504:	4b04      	ldr	r3, [pc, #16]	; (4518 <prvAddCurrentTaskToDelayedList+0x70>)
    4506:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    450a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    450e:	3104      	adds	r1, #4
    4510:	4b03      	ldr	r3, [pc, #12]	; (4520 <prvAddCurrentTaskToDelayedList+0x78>)
    4512:	4798      	blx	r3
    4514:	bd70      	pop	{r4, r5, r6, pc}
    4516:	bf00      	nop
    4518:	2000330c 	.word	0x2000330c
    451c:	000035a9 	.word	0x000035a9
    4520:	00003575 	.word	0x00003575
    4524:	0000355d 	.word	0x0000355d

00004528 <xTaskCreate>:
{
    4528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    452c:	b083      	sub	sp, #12
    452e:	4683      	mov	fp, r0
    4530:	460d      	mov	r5, r1
    4532:	9301      	str	r3, [sp, #4]
    4534:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    4538:	0096      	lsls	r6, r2, #2
    453a:	4630      	mov	r0, r6
    453c:	4b66      	ldr	r3, [pc, #408]	; (46d8 <xTaskCreate+0x1b0>)
    453e:	4798      	blx	r3
		if (pxStack != NULL) {
    4540:	2800      	cmp	r0, #0
    4542:	f000 8096 	beq.w	4672 <xTaskCreate+0x14a>
    4546:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    4548:	2054      	movs	r0, #84	; 0x54
    454a:	4b63      	ldr	r3, [pc, #396]	; (46d8 <xTaskCreate+0x1b0>)
    454c:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    454e:	4604      	mov	r4, r0
    4550:	2800      	cmp	r0, #0
    4552:	f000 808b 	beq.w	466c <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    4556:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    4558:	4632      	mov	r2, r6
    455a:	21a5      	movs	r1, #165	; 0xa5
    455c:	4638      	mov	r0, r7
    455e:	4b5f      	ldr	r3, [pc, #380]	; (46dc <xTaskCreate+0x1b4>)
    4560:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    4562:	3e04      	subs	r6, #4
    4564:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4566:	441e      	add	r6, r3
		                      & (~(
    4568:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    456c:	782b      	ldrb	r3, [r5, #0]
    456e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    4572:	782b      	ldrb	r3, [r5, #0]
    4574:	b15b      	cbz	r3, 458e <xTaskCreate+0x66>
    4576:	462b      	mov	r3, r5
    4578:	f104 0235 	add.w	r2, r4, #53	; 0x35
    457c:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    457e:	7858      	ldrb	r0, [r3, #1]
    4580:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    4584:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    4588:	b108      	cbz	r0, 458e <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    458a:	4299      	cmp	r1, r3
    458c:	d1f7      	bne.n	457e <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    458e:	2700      	movs	r7, #0
    4590:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    4594:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4596:	2d04      	cmp	r5, #4
    4598:	bf28      	it	cs
    459a:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    459c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    459e:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    45a0:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    45a2:	f104 0804 	add.w	r8, r4, #4
    45a6:	4640      	mov	r0, r8
    45a8:	f8df 9154 	ldr.w	r9, [pc, #340]	; 4700 <xTaskCreate+0x1d8>
    45ac:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    45ae:	f104 0018 	add.w	r0, r4, #24
    45b2:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    45b4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    45b6:	f1c5 0505 	rsb	r5, r5, #5
    45ba:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    45bc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    45be:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    45c0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    45c4:	9a01      	ldr	r2, [sp, #4]
    45c6:	4659      	mov	r1, fp
    45c8:	4630      	mov	r0, r6
    45ca:	4b45      	ldr	r3, [pc, #276]	; (46e0 <xTaskCreate+0x1b8>)
    45cc:	4798      	blx	r3
    45ce:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    45d0:	f1ba 0f00 	cmp.w	sl, #0
    45d4:	d001      	beq.n	45da <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    45d6:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    45da:	4b42      	ldr	r3, [pc, #264]	; (46e4 <xTaskCreate+0x1bc>)
    45dc:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    45de:	4b42      	ldr	r3, [pc, #264]	; (46e8 <xTaskCreate+0x1c0>)
    45e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    45e4:	3201      	adds	r2, #1
    45e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    45ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    45ee:	2b00      	cmp	r3, #0
    45f0:	d042      	beq.n	4678 <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    45f2:	4b3d      	ldr	r3, [pc, #244]	; (46e8 <xTaskCreate+0x1c0>)
    45f4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    45f8:	b94b      	cbnz	r3, 460e <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    45fa:	4b3b      	ldr	r3, [pc, #236]	; (46e8 <xTaskCreate+0x1c0>)
    45fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4604:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    4606:	bf9c      	itt	ls
    4608:	4b37      	ldrls	r3, [pc, #220]	; (46e8 <xTaskCreate+0x1c0>)
    460a:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    460e:	4a36      	ldr	r2, [pc, #216]	; (46e8 <xTaskCreate+0x1c0>)
    4610:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    4614:	3301      	adds	r3, #1
    4616:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    461a:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    461c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    461e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    4622:	4293      	cmp	r3, r2
    4624:	bf84      	itt	hi
    4626:	4a30      	ldrhi	r2, [pc, #192]	; (46e8 <xTaskCreate+0x1c0>)
    4628:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    462c:	4d2e      	ldr	r5, [pc, #184]	; (46e8 <xTaskCreate+0x1c0>)
    462e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4632:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4636:	4641      	mov	r1, r8
    4638:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    463c:	4b2b      	ldr	r3, [pc, #172]	; (46ec <xTaskCreate+0x1c4>)
    463e:	4798      	blx	r3
	taskEXIT_CRITICAL();
    4640:	4b2b      	ldr	r3, [pc, #172]	; (46f0 <xTaskCreate+0x1c8>)
    4642:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    4644:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    4648:	2b00      	cmp	r3, #0
    464a:	d03f      	beq.n	46cc <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    464c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4652:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4654:	429a      	cmp	r2, r3
    4656:	d23d      	bcs.n	46d4 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    4658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    465c:	4b25      	ldr	r3, [pc, #148]	; (46f4 <xTaskCreate+0x1cc>)
    465e:	601a      	str	r2, [r3, #0]
    4660:	f3bf 8f4f 	dsb	sy
    4664:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    4668:	2001      	movs	r0, #1
    466a:	e030      	b.n	46ce <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    466c:	4638      	mov	r0, r7
    466e:	4b22      	ldr	r3, [pc, #136]	; (46f8 <xTaskCreate+0x1d0>)
    4670:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4672:	f04f 30ff 	mov.w	r0, #4294967295
    4676:	e02a      	b.n	46ce <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    4678:	4b1b      	ldr	r3, [pc, #108]	; (46e8 <xTaskCreate+0x1c0>)
    467a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    467e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4682:	2b01      	cmp	r3, #1
    4684:	d1c3      	bne.n	460e <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    4686:	4d18      	ldr	r5, [pc, #96]	; (46e8 <xTaskCreate+0x1c0>)
    4688:	f105 0028 	add.w	r0, r5, #40	; 0x28
    468c:	4e1b      	ldr	r6, [pc, #108]	; (46fc <xTaskCreate+0x1d4>)
    468e:	47b0      	blx	r6
    4690:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    4694:	47b0      	blx	r6
    4696:	f105 0050 	add.w	r0, r5, #80	; 0x50
    469a:	47b0      	blx	r6
    469c:	f105 0064 	add.w	r0, r5, #100	; 0x64
    46a0:	47b0      	blx	r6
    46a2:	f105 0078 	add.w	r0, r5, #120	; 0x78
    46a6:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    46a8:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    46ac:	4648      	mov	r0, r9
    46ae:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    46b0:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    46b4:	4638      	mov	r0, r7
    46b6:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    46b8:	f105 0014 	add.w	r0, r5, #20
    46bc:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    46be:	4628      	mov	r0, r5
    46c0:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    46c2:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    46c6:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    46ca:	e7a0      	b.n	460e <xTaskCreate+0xe6>
		xReturn = pdPASS;
    46cc:	2001      	movs	r0, #1
}
    46ce:	b003      	add	sp, #12
    46d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    46d4:	2001      	movs	r0, #1
	return xReturn;
    46d6:	e7fa      	b.n	46ce <xTaskCreate+0x1a6>
    46d8:	00003955 	.word	0x00003955
    46dc:	000055bf 	.word	0x000055bf
    46e0:	0000364d 	.word	0x0000364d
    46e4:	000036a5 	.word	0x000036a5
    46e8:	2000330c 	.word	0x2000330c
    46ec:	0000355d 	.word	0x0000355d
    46f0:	000036e9 	.word	0x000036e9
    46f4:	e000ed04 	.word	0xe000ed04
    46f8:	00003a29 	.word	0x00003a29
    46fc:	00003541 	.word	0x00003541
    4700:	00003557 	.word	0x00003557

00004704 <vTaskStartScheduler>:
{
    4704:	b510      	push	{r4, lr}
    4706:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    4708:	4b19      	ldr	r3, [pc, #100]	; (4770 <vTaskStartScheduler+0x6c>)
    470a:	9301      	str	r3, [sp, #4]
    470c:	2300      	movs	r3, #0
    470e:	9300      	str	r3, [sp, #0]
    4710:	2280      	movs	r2, #128	; 0x80
    4712:	4918      	ldr	r1, [pc, #96]	; (4774 <vTaskStartScheduler+0x70>)
    4714:	4818      	ldr	r0, [pc, #96]	; (4778 <vTaskStartScheduler+0x74>)
    4716:	4c19      	ldr	r4, [pc, #100]	; (477c <vTaskStartScheduler+0x78>)
    4718:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    471a:	2801      	cmp	r0, #1
    471c:	d004      	beq.n	4728 <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    471e:	f1b0 3fff 	cmp.w	r0, #4294967295
    4722:	d01b      	beq.n	475c <vTaskStartScheduler+0x58>
}
    4724:	b002      	add	sp, #8
    4726:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    4728:	4b15      	ldr	r3, [pc, #84]	; (4780 <vTaskStartScheduler+0x7c>)
    472a:	4798      	blx	r3
	if (xReturn == pdPASS) {
    472c:	2801      	cmp	r0, #1
    472e:	d1f6      	bne.n	471e <vTaskStartScheduler+0x1a>
    4730:	f04f 0380 	mov.w	r3, #128	; 0x80
    4734:	f383 8811 	msr	BASEPRI, r3
    4738:	f3bf 8f6f 	isb	sy
    473c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    4740:	4b10      	ldr	r3, [pc, #64]	; (4784 <vTaskStartScheduler+0x80>)
    4742:	f04f 32ff 	mov.w	r2, #4294967295
    4746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    474a:	2201      	movs	r2, #1
    474c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    4750:	2200      	movs	r2, #0
    4752:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    4756:	4b0c      	ldr	r3, [pc, #48]	; (4788 <vTaskStartScheduler+0x84>)
    4758:	4798      	blx	r3
    475a:	e7e3      	b.n	4724 <vTaskStartScheduler+0x20>
    475c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4760:	f383 8811 	msr	BASEPRI, r3
    4764:	f3bf 8f6f 	isb	sy
    4768:	f3bf 8f4f 	dsb	sy
    476c:	e7fe      	b.n	476c <vTaskStartScheduler+0x68>
    476e:	bf00      	nop
    4770:	200033e8 	.word	0x200033e8
    4774:	0000748c 	.word	0x0000748c
    4778:	00004459 	.word	0x00004459
    477c:	00004529 	.word	0x00004529
    4780:	000051f9 	.word	0x000051f9
    4784:	2000330c 	.word	0x2000330c
    4788:	000037d9 	.word	0x000037d9

0000478c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    478c:	4a03      	ldr	r2, [pc, #12]	; (479c <vTaskSuspendAll+0x10>)
    478e:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    4792:	3301      	adds	r3, #1
    4794:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    4798:	4770      	bx	lr
    479a:	bf00      	nop
    479c:	2000330c 	.word	0x2000330c

000047a0 <xTaskGetTickCount>:
		xTicks = xTickCount;
    47a0:	4b01      	ldr	r3, [pc, #4]	; (47a8 <xTaskGetTickCount+0x8>)
    47a2:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    47a6:	4770      	bx	lr
    47a8:	2000330c 	.word	0x2000330c

000047ac <xTaskIncrementTick>:
{
    47ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    47b0:	4b44      	ldr	r3, [pc, #272]	; (48c4 <xTaskIncrementTick+0x118>)
    47b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    47b6:	2b00      	cmp	r3, #0
    47b8:	d173      	bne.n	48a2 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    47ba:	4b42      	ldr	r3, [pc, #264]	; (48c4 <xTaskIncrementTick+0x118>)
    47bc:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    47c0:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    47c2:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    47c6:	b9e6      	cbnz	r6, 4802 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    47c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    47cc:	681b      	ldr	r3, [r3, #0]
    47ce:	b143      	cbz	r3, 47e2 <xTaskIncrementTick+0x36>
    47d0:	f04f 0380 	mov.w	r3, #128	; 0x80
    47d4:	f383 8811 	msr	BASEPRI, r3
    47d8:	f3bf 8f6f 	isb	sy
    47dc:	f3bf 8f4f 	dsb	sy
    47e0:	e7fe      	b.n	47e0 <xTaskIncrementTick+0x34>
    47e2:	4b38      	ldr	r3, [pc, #224]	; (48c4 <xTaskIncrementTick+0x118>)
    47e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    47e8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    47ec:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    47f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    47f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    47f8:	3201      	adds	r2, #1
    47fa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    47fe:	4b32      	ldr	r3, [pc, #200]	; (48c8 <xTaskIncrementTick+0x11c>)
    4800:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    4802:	4b30      	ldr	r3, [pc, #192]	; (48c4 <xTaskIncrementTick+0x118>)
    4804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    4808:	429e      	cmp	r6, r3
    480a:	d20d      	bcs.n	4828 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    480c:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    480e:	4b2d      	ldr	r3, [pc, #180]	; (48c4 <xTaskIncrementTick+0x118>)
    4810:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4814:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4816:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    481a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    4820:	2b02      	cmp	r3, #2
    4822:	bf28      	it	cs
    4824:	2401      	movcs	r4, #1
    4826:	e043      	b.n	48b0 <xTaskIncrementTick+0x104>
    4828:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    482a:	4d26      	ldr	r5, [pc, #152]	; (48c4 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    482c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 48d0 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    4830:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    4834:	e021      	b.n	487a <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4836:	f04f 32ff 	mov.w	r2, #4294967295
    483a:	4b22      	ldr	r3, [pc, #136]	; (48c4 <xTaskIncrementTick+0x118>)
    483c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    4840:	e7e5      	b.n	480e <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    4842:	4a20      	ldr	r2, [pc, #128]	; (48c4 <xTaskIncrementTick+0x118>)
    4844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    4848:	e7e1      	b.n	480e <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    484a:	f107 0018 	add.w	r0, r7, #24
    484e:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    4850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    4852:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    4856:	4298      	cmp	r0, r3
    4858:	bf88      	it	hi
    485a:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    485e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4862:	4649      	mov	r1, r9
    4864:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    4868:	4b18      	ldr	r3, [pc, #96]	; (48cc <xTaskIncrementTick+0x120>)
    486a:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    486c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    4874:	429a      	cmp	r2, r3
    4876:	bf28      	it	cs
    4878:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    487a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    487e:	681b      	ldr	r3, [r3, #0]
    4880:	2b00      	cmp	r3, #0
    4882:	d0d8      	beq.n	4836 <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    4884:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    4888:	68db      	ldr	r3, [r3, #12]
    488a:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    488c:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    488e:	429e      	cmp	r6, r3
    4890:	d3d7      	bcc.n	4842 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4892:	f107 0904 	add.w	r9, r7, #4
    4896:	4648      	mov	r0, r9
    4898:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    489c:	2b00      	cmp	r3, #0
    489e:	d1d4      	bne.n	484a <xTaskIncrementTick+0x9e>
    48a0:	e7d6      	b.n	4850 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    48a2:	4a08      	ldr	r2, [pc, #32]	; (48c4 <xTaskIncrementTick+0x118>)
    48a4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    48a8:	3301      	adds	r3, #1
    48aa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    48ae:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    48b0:	4b04      	ldr	r3, [pc, #16]	; (48c4 <xTaskIncrementTick+0x118>)
    48b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    48b6:	2b00      	cmp	r3, #0
}
    48b8:	bf0c      	ite	eq
    48ba:	4620      	moveq	r0, r4
    48bc:	2001      	movne	r0, #1
    48be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    48c2:	bf00      	nop
    48c4:	2000330c 	.word	0x2000330c
    48c8:	0000447d 	.word	0x0000447d
    48cc:	0000355d 	.word	0x0000355d
    48d0:	000035a9 	.word	0x000035a9

000048d4 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    48d4:	4b3a      	ldr	r3, [pc, #232]	; (49c0 <xTaskResumeAll+0xec>)
    48d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    48da:	b943      	cbnz	r3, 48ee <xTaskResumeAll+0x1a>
    48dc:	f04f 0380 	mov.w	r3, #128	; 0x80
    48e0:	f383 8811 	msr	BASEPRI, r3
    48e4:	f3bf 8f6f 	isb	sy
    48e8:	f3bf 8f4f 	dsb	sy
    48ec:	e7fe      	b.n	48ec <xTaskResumeAll+0x18>
{
    48ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    48f2:	4b34      	ldr	r3, [pc, #208]	; (49c4 <xTaskResumeAll+0xf0>)
    48f4:	4798      	blx	r3
		--uxSchedulerSuspended;
    48f6:	4b32      	ldr	r3, [pc, #200]	; (49c0 <xTaskResumeAll+0xec>)
    48f8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    48fc:	3a01      	subs	r2, #1
    48fe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4906:	2b00      	cmp	r3, #0
    4908:	d155      	bne.n	49b6 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    490a:	4b2d      	ldr	r3, [pc, #180]	; (49c0 <xTaskResumeAll+0xec>)
    490c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4910:	b92b      	cbnz	r3, 491e <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    4912:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    4914:	4b2c      	ldr	r3, [pc, #176]	; (49c8 <xTaskResumeAll+0xf4>)
    4916:	4798      	blx	r3
}
    4918:	4620      	mov	r0, r4
    491a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    491e:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    4920:	4c27      	ldr	r4, [pc, #156]	; (49c0 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4922:	4e2a      	ldr	r6, [pc, #168]	; (49cc <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    4924:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    4928:	6963      	ldr	r3, [r4, #20]
    492a:	b1fb      	cbz	r3, 496c <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    492c:	6a23      	ldr	r3, [r4, #32]
    492e:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4930:	f105 0018 	add.w	r0, r5, #24
    4934:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4936:	1d2f      	adds	r7, r5, #4
    4938:	4638      	mov	r0, r7
    493a:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    493c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    493e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    4942:	4298      	cmp	r0, r3
    4944:	bf88      	it	hi
    4946:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    494a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    494e:	4639      	mov	r1, r7
    4950:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    4954:	4b1e      	ldr	r3, [pc, #120]	; (49d0 <xTaskResumeAll+0xfc>)
    4956:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    4958:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    495c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4960:	429a      	cmp	r2, r3
    4962:	d3e1      	bcc.n	4928 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    4964:	2301      	movs	r3, #1
    4966:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    496a:	e7dd      	b.n	4928 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    496c:	b10d      	cbz	r5, 4972 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    496e:	4b19      	ldr	r3, [pc, #100]	; (49d4 <xTaskResumeAll+0x100>)
    4970:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4972:	4b13      	ldr	r3, [pc, #76]	; (49c0 <xTaskResumeAll+0xec>)
    4974:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    4978:	b17c      	cbz	r4, 499a <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    497a:	4f17      	ldr	r7, [pc, #92]	; (49d8 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    497c:	461e      	mov	r6, r3
    497e:	2501      	movs	r5, #1
    4980:	e001      	b.n	4986 <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    4982:	3c01      	subs	r4, #1
    4984:	d005      	beq.n	4992 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    4986:	47b8      	blx	r7
    4988:	2800      	cmp	r0, #0
    498a:	d0fa      	beq.n	4982 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    498c:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    4990:	e7f7      	b.n	4982 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    4992:	2200      	movs	r2, #0
    4994:	4b0a      	ldr	r3, [pc, #40]	; (49c0 <xTaskResumeAll+0xec>)
    4996:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    499a:	4b09      	ldr	r3, [pc, #36]	; (49c0 <xTaskResumeAll+0xec>)
    499c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    49a0:	b15b      	cbz	r3, 49ba <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    49a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    49a6:	4b0d      	ldr	r3, [pc, #52]	; (49dc <xTaskResumeAll+0x108>)
    49a8:	601a      	str	r2, [r3, #0]
    49aa:	f3bf 8f4f 	dsb	sy
    49ae:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    49b2:	2401      	movs	r4, #1
    49b4:	e7ae      	b.n	4914 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    49b6:	2400      	movs	r4, #0
    49b8:	e7ac      	b.n	4914 <xTaskResumeAll+0x40>
    49ba:	2400      	movs	r4, #0
    49bc:	e7aa      	b.n	4914 <xTaskResumeAll+0x40>
    49be:	bf00      	nop
    49c0:	2000330c 	.word	0x2000330c
    49c4:	000036a5 	.word	0x000036a5
    49c8:	000036e9 	.word	0x000036e9
    49cc:	000035a9 	.word	0x000035a9
    49d0:	0000355d 	.word	0x0000355d
    49d4:	0000447d 	.word	0x0000447d
    49d8:	000047ad 	.word	0x000047ad
    49dc:	e000ed04 	.word	0xe000ed04

000049e0 <vTaskDelayUntil>:
{
    49e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxPreviousWakeTime);
    49e2:	b150      	cbz	r0, 49fa <vTaskDelayUntil+0x1a>
    49e4:	4605      	mov	r5, r0
	configASSERT((xTimeIncrement > 0U));
    49e6:	b989      	cbnz	r1, 4a0c <vTaskDelayUntil+0x2c>
    49e8:	f04f 0380 	mov.w	r3, #128	; 0x80
    49ec:	f383 8811 	msr	BASEPRI, r3
    49f0:	f3bf 8f6f 	isb	sy
    49f4:	f3bf 8f4f 	dsb	sy
    49f8:	e7fe      	b.n	49f8 <vTaskDelayUntil+0x18>
    49fa:	f04f 0380 	mov.w	r3, #128	; 0x80
    49fe:	f383 8811 	msr	BASEPRI, r3
    4a02:	f3bf 8f6f 	isb	sy
    4a06:	f3bf 8f4f 	dsb	sy
    4a0a:	e7fe      	b.n	4a0a <vTaskDelayUntil+0x2a>
	configASSERT(uxSchedulerSuspended == 0);
    4a0c:	4b1a      	ldr	r3, [pc, #104]	; (4a78 <vTaskDelayUntil+0x98>)
    4a0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4a12:	b143      	cbz	r3, 4a26 <vTaskDelayUntil+0x46>
    4a14:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a18:	f383 8811 	msr	BASEPRI, r3
    4a1c:	f3bf 8f6f 	isb	sy
    4a20:	f3bf 8f4f 	dsb	sy
    4a24:	e7fe      	b.n	4a24 <vTaskDelayUntil+0x44>
    4a26:	460c      	mov	r4, r1
	vTaskSuspendAll();
    4a28:	4b14      	ldr	r3, [pc, #80]	; (4a7c <vTaskDelayUntil+0x9c>)
    4a2a:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4a2c:	4b12      	ldr	r3, [pc, #72]	; (4a78 <vTaskDelayUntil+0x98>)
    4a2e:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4a32:	682a      	ldr	r2, [r5, #0]
    4a34:	4414      	add	r4, r2
		if (xConstTickCount < *pxPreviousWakeTime) {
    4a36:	4290      	cmp	r0, r2
    4a38:	d214      	bcs.n	4a64 <vTaskDelayUntil+0x84>
			if ((xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount)) {
    4a3a:	42a2      	cmp	r2, r4
    4a3c:	d916      	bls.n	4a6c <vTaskDelayUntil+0x8c>
		*pxPreviousWakeTime = xTimeToWake;
    4a3e:	602c      	str	r4, [r5, #0]
		if (xShouldDelay != pdFALSE) {
    4a40:	42a0      	cmp	r0, r4
    4a42:	d203      	bcs.n	4a4c <vTaskDelayUntil+0x6c>
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount, pdFALSE);
    4a44:	2100      	movs	r1, #0
    4a46:	1a20      	subs	r0, r4, r0
    4a48:	4b0d      	ldr	r3, [pc, #52]	; (4a80 <vTaskDelayUntil+0xa0>)
    4a4a:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
    4a4c:	4b0d      	ldr	r3, [pc, #52]	; (4a84 <vTaskDelayUntil+0xa4>)
    4a4e:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    4a50:	b980      	cbnz	r0, 4a74 <vTaskDelayUntil+0x94>
		portYIELD_WITHIN_API();
    4a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4a56:	4b0c      	ldr	r3, [pc, #48]	; (4a88 <vTaskDelayUntil+0xa8>)
    4a58:	601a      	str	r2, [r3, #0]
    4a5a:	f3bf 8f4f 	dsb	sy
    4a5e:	f3bf 8f6f 	isb	sy
}
    4a62:	bd38      	pop	{r3, r4, r5, pc}
			if ((xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount)) {
    4a64:	42a2      	cmp	r2, r4
    4a66:	d803      	bhi.n	4a70 <vTaskDelayUntil+0x90>
    4a68:	42a0      	cmp	r0, r4
    4a6a:	d301      	bcc.n	4a70 <vTaskDelayUntil+0x90>
		*pxPreviousWakeTime = xTimeToWake;
    4a6c:	602c      	str	r4, [r5, #0]
    4a6e:	e7ed      	b.n	4a4c <vTaskDelayUntil+0x6c>
    4a70:	602c      	str	r4, [r5, #0]
    4a72:	e7e7      	b.n	4a44 <vTaskDelayUntil+0x64>
    4a74:	bd38      	pop	{r3, r4, r5, pc}
    4a76:	bf00      	nop
    4a78:	2000330c 	.word	0x2000330c
    4a7c:	0000478d 	.word	0x0000478d
    4a80:	000044a9 	.word	0x000044a9
    4a84:	000048d5 	.word	0x000048d5
    4a88:	e000ed04 	.word	0xe000ed04

00004a8c <vTaskDelay>:
{
    4a8c:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    4a8e:	b1b0      	cbz	r0, 4abe <vTaskDelay+0x32>
    4a90:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    4a92:	4b0f      	ldr	r3, [pc, #60]	; (4ad0 <vTaskDelay+0x44>)
    4a94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4a98:	b143      	cbz	r3, 4aac <vTaskDelay+0x20>
    4a9a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a9e:	f383 8811 	msr	BASEPRI, r3
    4aa2:	f3bf 8f6f 	isb	sy
    4aa6:	f3bf 8f4f 	dsb	sy
    4aaa:	e7fe      	b.n	4aaa <vTaskDelay+0x1e>
		vTaskSuspendAll();
    4aac:	4b09      	ldr	r3, [pc, #36]	; (4ad4 <vTaskDelay+0x48>)
    4aae:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    4ab0:	2100      	movs	r1, #0
    4ab2:	4620      	mov	r0, r4
    4ab4:	4b08      	ldr	r3, [pc, #32]	; (4ad8 <vTaskDelay+0x4c>)
    4ab6:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    4ab8:	4b08      	ldr	r3, [pc, #32]	; (4adc <vTaskDelay+0x50>)
    4aba:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    4abc:	b938      	cbnz	r0, 4ace <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    4abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4ac2:	4b07      	ldr	r3, [pc, #28]	; (4ae0 <vTaskDelay+0x54>)
    4ac4:	601a      	str	r2, [r3, #0]
    4ac6:	f3bf 8f4f 	dsb	sy
    4aca:	f3bf 8f6f 	isb	sy
    4ace:	bd10      	pop	{r4, pc}
    4ad0:	2000330c 	.word	0x2000330c
    4ad4:	0000478d 	.word	0x0000478d
    4ad8:	000044a9 	.word	0x000044a9
    4adc:	000048d5 	.word	0x000048d5
    4ae0:	e000ed04 	.word	0xe000ed04

00004ae4 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    4ae4:	4b2c      	ldr	r3, [pc, #176]	; (4b98 <vTaskSwitchContext+0xb4>)
    4ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4aea:	bb8b      	cbnz	r3, 4b50 <vTaskSwitchContext+0x6c>
{
    4aec:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    4aee:	4b2a      	ldr	r3, [pc, #168]	; (4b98 <vTaskSwitchContext+0xb4>)
    4af0:	2200      	movs	r2, #0
    4af2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    4af6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4afe:	6812      	ldr	r2, [r2, #0]
    4b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4b02:	429a      	cmp	r2, r3
    4b04:	d807      	bhi.n	4b16 <vTaskSwitchContext+0x32>
    4b06:	4b24      	ldr	r3, [pc, #144]	; (4b98 <vTaskSwitchContext+0xb4>)
    4b08:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4b0c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4b10:	3134      	adds	r1, #52	; 0x34
    4b12:	4b22      	ldr	r3, [pc, #136]	; (4b9c <vTaskSwitchContext+0xb8>)
    4b14:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4b16:	4a20      	ldr	r2, [pc, #128]	; (4b98 <vTaskSwitchContext+0xb4>)
    4b18:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    4b1c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    4b20:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4b24:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4b26:	b9c2      	cbnz	r2, 4b5a <vTaskSwitchContext+0x76>
    4b28:	b14b      	cbz	r3, 4b3e <vTaskSwitchContext+0x5a>
    4b2a:	491b      	ldr	r1, [pc, #108]	; (4b98 <vTaskSwitchContext+0xb4>)
    4b2c:	3b01      	subs	r3, #1
    4b2e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4b32:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4b36:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4b38:	b97a      	cbnz	r2, 4b5a <vTaskSwitchContext+0x76>
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	d1f6      	bne.n	4b2c <vTaskSwitchContext+0x48>
    4b3e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b42:	f383 8811 	msr	BASEPRI, r3
    4b46:	f3bf 8f6f 	isb	sy
    4b4a:	f3bf 8f4f 	dsb	sy
    4b4e:	e7fe      	b.n	4b4e <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    4b50:	2201      	movs	r2, #1
    4b52:	4b11      	ldr	r3, [pc, #68]	; (4b98 <vTaskSwitchContext+0xb4>)
    4b54:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    4b58:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4b5a:	4a0f      	ldr	r2, [pc, #60]	; (4b98 <vTaskSwitchContext+0xb4>)
    4b5c:	0099      	lsls	r1, r3, #2
    4b5e:	18c8      	adds	r0, r1, r3
    4b60:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4b64:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    4b66:	6864      	ldr	r4, [r4, #4]
    4b68:	62c4      	str	r4, [r0, #44]	; 0x2c
    4b6a:	4419      	add	r1, r3
    4b6c:	4602      	mov	r2, r0
    4b6e:	3230      	adds	r2, #48	; 0x30
    4b70:	4294      	cmp	r4, r2
    4b72:	d00b      	beq.n	4b8c <vTaskSwitchContext+0xa8>
    4b74:	4a08      	ldr	r2, [pc, #32]	; (4b98 <vTaskSwitchContext+0xb4>)
    4b76:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    4b7a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4b7e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4b80:	68c9      	ldr	r1, [r1, #12]
    4b82:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    4b86:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    4b8a:	bd10      	pop	{r4, pc}
    4b8c:	6860      	ldr	r0, [r4, #4]
    4b8e:	4a02      	ldr	r2, [pc, #8]	; (4b98 <vTaskSwitchContext+0xb4>)
    4b90:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4b94:	62d0      	str	r0, [r2, #44]	; 0x2c
    4b96:	e7ed      	b.n	4b74 <vTaskSwitchContext+0x90>
    4b98:	2000330c 	.word	0x2000330c
    4b9c:	000002d1 	.word	0x000002d1

00004ba0 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    4ba0:	b940      	cbnz	r0, 4bb4 <vTaskPlaceOnEventList+0x14>
    4ba2:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ba6:	f383 8811 	msr	BASEPRI, r3
    4baa:	f3bf 8f6f 	isb	sy
    4bae:	f3bf 8f4f 	dsb	sy
    4bb2:	e7fe      	b.n	4bb2 <vTaskPlaceOnEventList+0x12>
{
    4bb4:	b510      	push	{r4, lr}
    4bb6:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    4bb8:	4b05      	ldr	r3, [pc, #20]	; (4bd0 <vTaskPlaceOnEventList+0x30>)
    4bba:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4bbe:	3118      	adds	r1, #24
    4bc0:	4b04      	ldr	r3, [pc, #16]	; (4bd4 <vTaskPlaceOnEventList+0x34>)
    4bc2:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    4bc4:	2101      	movs	r1, #1
    4bc6:	4620      	mov	r0, r4
    4bc8:	4b03      	ldr	r3, [pc, #12]	; (4bd8 <vTaskPlaceOnEventList+0x38>)
    4bca:	4798      	blx	r3
    4bcc:	bd10      	pop	{r4, pc}
    4bce:	bf00      	nop
    4bd0:	2000330c 	.word	0x2000330c
    4bd4:	00003575 	.word	0x00003575
    4bd8:	000044a9 	.word	0x000044a9

00004bdc <vTaskPlaceOnEventListRestricted>:
{
    4bdc:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    4bde:	b180      	cbz	r0, 4c02 <vTaskPlaceOnEventListRestricted+0x26>
    4be0:	4614      	mov	r4, r2
    4be2:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    4be4:	4b0b      	ldr	r3, [pc, #44]	; (4c14 <vTaskPlaceOnEventListRestricted+0x38>)
    4be6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4bea:	3118      	adds	r1, #24
    4bec:	4b0a      	ldr	r3, [pc, #40]	; (4c18 <vTaskPlaceOnEventListRestricted+0x3c>)
    4bee:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    4bf0:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    4bf2:	4621      	mov	r1, r4
    4bf4:	bf0c      	ite	eq
    4bf6:	4628      	moveq	r0, r5
    4bf8:	f04f 30ff 	movne.w	r0, #4294967295
    4bfc:	4b07      	ldr	r3, [pc, #28]	; (4c1c <vTaskPlaceOnEventListRestricted+0x40>)
    4bfe:	4798      	blx	r3
    4c00:	bd38      	pop	{r3, r4, r5, pc}
    4c02:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c06:	f383 8811 	msr	BASEPRI, r3
    4c0a:	f3bf 8f6f 	isb	sy
    4c0e:	f3bf 8f4f 	dsb	sy
    4c12:	e7fe      	b.n	4c12 <vTaskPlaceOnEventListRestricted+0x36>
    4c14:	2000330c 	.word	0x2000330c
    4c18:	0000355d 	.word	0x0000355d
    4c1c:	000044a9 	.word	0x000044a9

00004c20 <xTaskRemoveFromEventList>:
{
    4c20:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    4c22:	68c3      	ldr	r3, [r0, #12]
    4c24:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    4c26:	2c00      	cmp	r4, #0
    4c28:	d02a      	beq.n	4c80 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    4c2a:	f104 0518 	add.w	r5, r4, #24
    4c2e:	4628      	mov	r0, r5
    4c30:	4b1a      	ldr	r3, [pc, #104]	; (4c9c <xTaskRemoveFromEventList+0x7c>)
    4c32:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4c34:	4b1a      	ldr	r3, [pc, #104]	; (4ca0 <xTaskRemoveFromEventList+0x80>)
    4c36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4c3a:	bb53      	cbnz	r3, 4c92 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    4c3c:	1d25      	adds	r5, r4, #4
    4c3e:	4628      	mov	r0, r5
    4c40:	4b16      	ldr	r3, [pc, #88]	; (4c9c <xTaskRemoveFromEventList+0x7c>)
    4c42:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    4c44:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4c46:	4b16      	ldr	r3, [pc, #88]	; (4ca0 <xTaskRemoveFromEventList+0x80>)
    4c48:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4c4c:	4298      	cmp	r0, r3
    4c4e:	bf84      	itt	hi
    4c50:	4b13      	ldrhi	r3, [pc, #76]	; (4ca0 <xTaskRemoveFromEventList+0x80>)
    4c52:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4c56:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4c5a:	4629      	mov	r1, r5
    4c5c:	4b11      	ldr	r3, [pc, #68]	; (4ca4 <xTaskRemoveFromEventList+0x84>)
    4c5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4c62:	4b11      	ldr	r3, [pc, #68]	; (4ca8 <xTaskRemoveFromEventList+0x88>)
    4c64:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    4c66:	4b0e      	ldr	r3, [pc, #56]	; (4ca0 <xTaskRemoveFromEventList+0x80>)
    4c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4c6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4c70:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    4c72:	bf83      	ittte	hi
    4c74:	2001      	movhi	r0, #1
    4c76:	4b0a      	ldrhi	r3, [pc, #40]	; (4ca0 <xTaskRemoveFromEventList+0x80>)
    4c78:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    4c7c:	2000      	movls	r0, #0
}
    4c7e:	bd38      	pop	{r3, r4, r5, pc}
    4c80:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c84:	f383 8811 	msr	BASEPRI, r3
    4c88:	f3bf 8f6f 	isb	sy
    4c8c:	f3bf 8f4f 	dsb	sy
    4c90:	e7fe      	b.n	4c90 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    4c92:	4629      	mov	r1, r5
    4c94:	4805      	ldr	r0, [pc, #20]	; (4cac <xTaskRemoveFromEventList+0x8c>)
    4c96:	4b04      	ldr	r3, [pc, #16]	; (4ca8 <xTaskRemoveFromEventList+0x88>)
    4c98:	4798      	blx	r3
    4c9a:	e7e4      	b.n	4c66 <xTaskRemoveFromEventList+0x46>
    4c9c:	000035a9 	.word	0x000035a9
    4ca0:	2000330c 	.word	0x2000330c
    4ca4:	20003334 	.word	0x20003334
    4ca8:	0000355d 	.word	0x0000355d
    4cac:	20003320 	.word	0x20003320

00004cb0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    4cb0:	4b03      	ldr	r3, [pc, #12]	; (4cc0 <vTaskInternalSetTimeOutState+0x10>)
    4cb2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    4cb6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    4cbc:	6043      	str	r3, [r0, #4]
    4cbe:	4770      	bx	lr
    4cc0:	2000330c 	.word	0x2000330c

00004cc4 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    4cc4:	b1f8      	cbz	r0, 4d06 <xTaskCheckForTimeOut+0x42>
{
    4cc6:	b570      	push	{r4, r5, r6, lr}
    4cc8:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    4cca:	b329      	cbz	r1, 4d18 <xTaskCheckForTimeOut+0x54>
    4ccc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    4cce:	4b1c      	ldr	r3, [pc, #112]	; (4d40 <xTaskCheckForTimeOut+0x7c>)
    4cd0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4cd2:	4b1c      	ldr	r3, [pc, #112]	; (4d44 <xTaskCheckForTimeOut+0x80>)
    4cd4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4cd8:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    4cda:	6823      	ldr	r3, [r4, #0]
    4cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
    4ce0:	d02a      	beq.n	4d38 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    4ce2:	4818      	ldr	r0, [pc, #96]	; (4d44 <xTaskCheckForTimeOut+0x80>)
    4ce4:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    4ce8:	682e      	ldr	r6, [r5, #0]
    4cea:	4286      	cmp	r6, r0
    4cec:	d001      	beq.n	4cf2 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    4cee:	428a      	cmp	r2, r1
    4cf0:	d224      	bcs.n	4d3c <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4cf2:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    4cf4:	429a      	cmp	r2, r3
    4cf6:	d318      	bcc.n	4d2a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    4cf8:	2300      	movs	r3, #0
    4cfa:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    4cfc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    4cfe:	4b12      	ldr	r3, [pc, #72]	; (4d48 <xTaskCheckForTimeOut+0x84>)
    4d00:	4798      	blx	r3
}
    4d02:	4620      	mov	r0, r4
    4d04:	bd70      	pop	{r4, r5, r6, pc}
    4d06:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d0a:	f383 8811 	msr	BASEPRI, r3
    4d0e:	f3bf 8f6f 	isb	sy
    4d12:	f3bf 8f4f 	dsb	sy
    4d16:	e7fe      	b.n	4d16 <xTaskCheckForTimeOut+0x52>
    4d18:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d1c:	f383 8811 	msr	BASEPRI, r3
    4d20:	f3bf 8f6f 	isb	sy
    4d24:	f3bf 8f4f 	dsb	sy
    4d28:	e7fe      	b.n	4d28 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    4d2a:	1a9b      	subs	r3, r3, r2
    4d2c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    4d2e:	4628      	mov	r0, r5
    4d30:	4b06      	ldr	r3, [pc, #24]	; (4d4c <xTaskCheckForTimeOut+0x88>)
    4d32:	4798      	blx	r3
			xReturn = pdFALSE;
    4d34:	2400      	movs	r4, #0
    4d36:	e7e2      	b.n	4cfe <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    4d38:	2400      	movs	r4, #0
    4d3a:	e7e0      	b.n	4cfe <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    4d3c:	2401      	movs	r4, #1
    4d3e:	e7de      	b.n	4cfe <xTaskCheckForTimeOut+0x3a>
    4d40:	000036a5 	.word	0x000036a5
    4d44:	2000330c 	.word	0x2000330c
    4d48:	000036e9 	.word	0x000036e9
    4d4c:	00004cb1 	.word	0x00004cb1

00004d50 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    4d50:	2201      	movs	r2, #1
    4d52:	4b02      	ldr	r3, [pc, #8]	; (4d5c <vTaskMissedYield+0xc>)
    4d54:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    4d58:	4770      	bx	lr
    4d5a:	bf00      	nop
    4d5c:	2000330c 	.word	0x2000330c

00004d60 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    4d60:	4b06      	ldr	r3, [pc, #24]	; (4d7c <xTaskGetSchedulerState+0x1c>)
    4d62:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4d66:	b13b      	cbz	r3, 4d78 <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4d68:	4b04      	ldr	r3, [pc, #16]	; (4d7c <xTaskGetSchedulerState+0x1c>)
    4d6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    4d6e:	2b00      	cmp	r3, #0
    4d70:	bf0c      	ite	eq
    4d72:	2002      	moveq	r0, #2
    4d74:	2000      	movne	r0, #0
    4d76:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    4d78:	2001      	movs	r0, #1
}
    4d7a:	4770      	bx	lr
    4d7c:	2000330c 	.word	0x2000330c

00004d80 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    4d80:	2800      	cmp	r0, #0
    4d82:	d045      	beq.n	4e10 <xTaskPriorityInherit+0x90>
{
    4d84:	b538      	push	{r3, r4, r5, lr}
    4d86:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    4d88:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4d8a:	4922      	ldr	r1, [pc, #136]	; (4e14 <xTaskPriorityInherit+0x94>)
    4d8c:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4d90:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4d92:	428a      	cmp	r2, r1
    4d94:	d232      	bcs.n	4dfc <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    4d96:	6981      	ldr	r1, [r0, #24]
    4d98:	2900      	cmp	r1, #0
    4d9a:	db06      	blt.n	4daa <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    4d9c:	491d      	ldr	r1, [pc, #116]	; (4e14 <xTaskPriorityInherit+0x94>)
    4d9e:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4da2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4da4:	f1c1 0105 	rsb	r1, r1, #5
    4da8:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    4daa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4dae:	491a      	ldr	r1, [pc, #104]	; (4e18 <xTaskPriorityInherit+0x98>)
    4db0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4db4:	6969      	ldr	r1, [r5, #20]
    4db6:	4291      	cmp	r1, r2
    4db8:	d006      	beq.n	4dc8 <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4dba:	4a16      	ldr	r2, [pc, #88]	; (4e14 <xTaskPriorityInherit+0x94>)
    4dbc:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4dc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4dc2:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    4dc4:	2001      	movs	r0, #1
    4dc6:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    4dc8:	1d2c      	adds	r4, r5, #4
    4dca:	4620      	mov	r0, r4
    4dcc:	4b13      	ldr	r3, [pc, #76]	; (4e1c <xTaskPriorityInherit+0x9c>)
    4dce:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4dd0:	4b10      	ldr	r3, [pc, #64]	; (4e14 <xTaskPriorityInherit+0x94>)
    4dd2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4dd6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    4dd8:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    4dda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4dde:	4298      	cmp	r0, r3
    4de0:	bf84      	itt	hi
    4de2:	4b0c      	ldrhi	r3, [pc, #48]	; (4e14 <xTaskPriorityInherit+0x94>)
    4de4:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4de8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4dec:	4621      	mov	r1, r4
    4dee:	4b0a      	ldr	r3, [pc, #40]	; (4e18 <xTaskPriorityInherit+0x98>)
    4df0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4df4:	4b0a      	ldr	r3, [pc, #40]	; (4e20 <xTaskPriorityInherit+0xa0>)
    4df6:	4798      	blx	r3
			xReturn = pdTRUE;
    4df8:	2001      	movs	r0, #1
    4dfa:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    4dfc:	4a05      	ldr	r2, [pc, #20]	; (4e14 <xTaskPriorityInherit+0x94>)
    4dfe:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4e02:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4e04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4e06:	4298      	cmp	r0, r3
    4e08:	bf2c      	ite	cs
    4e0a:	2000      	movcs	r0, #0
    4e0c:	2001      	movcc	r0, #1
    4e0e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    4e10:	2000      	movs	r0, #0
	return xReturn;
    4e12:	4770      	bx	lr
    4e14:	2000330c 	.word	0x2000330c
    4e18:	20003334 	.word	0x20003334
    4e1c:	000035a9 	.word	0x000035a9
    4e20:	0000355d 	.word	0x0000355d

00004e24 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    4e24:	2800      	cmp	r0, #0
    4e26:	d03c      	beq.n	4ea2 <xTaskPriorityDisinherit+0x7e>
{
    4e28:	b538      	push	{r3, r4, r5, lr}
    4e2a:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    4e2c:	4a20      	ldr	r2, [pc, #128]	; (4eb0 <xTaskPriorityDisinherit+0x8c>)
    4e2e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4e32:	4290      	cmp	r0, r2
    4e34:	d008      	beq.n	4e48 <xTaskPriorityDisinherit+0x24>
    4e36:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e3a:	f383 8811 	msr	BASEPRI, r3
    4e3e:	f3bf 8f6f 	isb	sy
    4e42:	f3bf 8f4f 	dsb	sy
    4e46:	e7fe      	b.n	4e46 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    4e48:	6c82      	ldr	r2, [r0, #72]	; 0x48
    4e4a:	b942      	cbnz	r2, 4e5e <xTaskPriorityDisinherit+0x3a>
    4e4c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e50:	f383 8811 	msr	BASEPRI, r3
    4e54:	f3bf 8f6f 	isb	sy
    4e58:	f3bf 8f4f 	dsb	sy
    4e5c:	e7fe      	b.n	4e5c <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    4e5e:	3a01      	subs	r2, #1
    4e60:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    4e62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4e64:	6c61      	ldr	r1, [r4, #68]	; 0x44
    4e66:	4288      	cmp	r0, r1
    4e68:	d01d      	beq.n	4ea6 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    4e6a:	b9f2      	cbnz	r2, 4eaa <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4e6c:	1d25      	adds	r5, r4, #4
    4e6e:	4628      	mov	r0, r5
    4e70:	4b10      	ldr	r3, [pc, #64]	; (4eb4 <xTaskPriorityDisinherit+0x90>)
    4e72:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4e74:	6c60      	ldr	r0, [r4, #68]	; 0x44
    4e76:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    4e78:	f1c0 0305 	rsb	r3, r0, #5
    4e7c:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    4e7e:	4b0c      	ldr	r3, [pc, #48]	; (4eb0 <xTaskPriorityDisinherit+0x8c>)
    4e80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4e84:	4298      	cmp	r0, r3
    4e86:	bf84      	itt	hi
    4e88:	4b09      	ldrhi	r3, [pc, #36]	; (4eb0 <xTaskPriorityDisinherit+0x8c>)
    4e8a:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4e8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4e92:	4629      	mov	r1, r5
    4e94:	4b08      	ldr	r3, [pc, #32]	; (4eb8 <xTaskPriorityDisinherit+0x94>)
    4e96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4e9a:	4b08      	ldr	r3, [pc, #32]	; (4ebc <xTaskPriorityDisinherit+0x98>)
    4e9c:	4798      	blx	r3
				xReturn = pdTRUE;
    4e9e:	2001      	movs	r0, #1
    4ea0:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    4ea2:	2000      	movs	r0, #0
    4ea4:	4770      	bx	lr
    4ea6:	2000      	movs	r0, #0
    4ea8:	bd38      	pop	{r3, r4, r5, pc}
    4eaa:	2000      	movs	r0, #0
}
    4eac:	bd38      	pop	{r3, r4, r5, pc}
    4eae:	bf00      	nop
    4eb0:	2000330c 	.word	0x2000330c
    4eb4:	000035a9 	.word	0x000035a9
    4eb8:	20003334 	.word	0x20003334
    4ebc:	0000355d 	.word	0x0000355d

00004ec0 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    4ec0:	2800      	cmp	r0, #0
    4ec2:	d049      	beq.n	4f58 <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    4ec4:	b538      	push	{r3, r4, r5, lr}
    4ec6:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    4ec8:	6c80      	ldr	r0, [r0, #72]	; 0x48
    4eca:	b940      	cbnz	r0, 4ede <vTaskPriorityDisinheritAfterTimeout+0x1e>
    4ecc:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ed0:	f383 8811 	msr	BASEPRI, r3
    4ed4:	f3bf 8f6f 	isb	sy
    4ed8:	f3bf 8f4f 	dsb	sy
    4edc:	e7fe      	b.n	4edc <vTaskPriorityDisinheritAfterTimeout+0x1c>
    4ede:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4ee0:	428a      	cmp	r2, r1
    4ee2:	bf38      	it	cc
    4ee4:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    4ee6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4ee8:	4291      	cmp	r1, r2
    4eea:	d001      	beq.n	4ef0 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    4eec:	2801      	cmp	r0, #1
    4eee:	d000      	beq.n	4ef2 <vTaskPriorityDisinheritAfterTimeout+0x32>
    4ef0:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    4ef2:	481a      	ldr	r0, [pc, #104]	; (4f5c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4ef4:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    4ef8:	4284      	cmp	r4, r0
    4efa:	d108      	bne.n	4f0e <vTaskPriorityDisinheritAfterTimeout+0x4e>
    4efc:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f00:	f383 8811 	msr	BASEPRI, r3
    4f04:	f3bf 8f6f 	isb	sy
    4f08:	f3bf 8f4f 	dsb	sy
    4f0c:	e7fe      	b.n	4f0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    4f0e:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    4f10:	69a0      	ldr	r0, [r4, #24]
    4f12:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    4f14:	bfa4      	itt	ge
    4f16:	f1c2 0205 	rsbge	r2, r2, #5
    4f1a:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    4f1c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4f20:	4a0f      	ldr	r2, [pc, #60]	; (4f60 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4f22:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4f26:	6962      	ldr	r2, [r4, #20]
    4f28:	428a      	cmp	r2, r1
    4f2a:	d1e1      	bne.n	4ef0 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4f2c:	1d25      	adds	r5, r4, #4
    4f2e:	4628      	mov	r0, r5
    4f30:	4b0c      	ldr	r3, [pc, #48]	; (4f64 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    4f32:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    4f34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4f36:	4b09      	ldr	r3, [pc, #36]	; (4f5c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4f38:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4f3c:	4298      	cmp	r0, r3
    4f3e:	bf84      	itt	hi
    4f40:	4b06      	ldrhi	r3, [pc, #24]	; (4f5c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4f42:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4f46:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4f4a:	4629      	mov	r1, r5
    4f4c:	4b04      	ldr	r3, [pc, #16]	; (4f60 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4f4e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4f52:	4b05      	ldr	r3, [pc, #20]	; (4f68 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    4f54:	4798      	blx	r3
}
    4f56:	e7cb      	b.n	4ef0 <vTaskPriorityDisinheritAfterTimeout+0x30>
    4f58:	4770      	bx	lr
    4f5a:	bf00      	nop
    4f5c:	2000330c 	.word	0x2000330c
    4f60:	20003334 	.word	0x20003334
    4f64:	000035a9 	.word	0x000035a9
    4f68:	0000355d 	.word	0x0000355d

00004f6c <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    4f6c:	4b06      	ldr	r3, [pc, #24]	; (4f88 <pvTaskIncrementMutexHeldCount+0x1c>)
    4f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4f72:	b12b      	cbz	r3, 4f80 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    4f74:	4b04      	ldr	r3, [pc, #16]	; (4f88 <pvTaskIncrementMutexHeldCount+0x1c>)
    4f76:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4f7a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    4f7c:	3301      	adds	r3, #1
    4f7e:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    4f80:	4b01      	ldr	r3, [pc, #4]	; (4f88 <pvTaskIncrementMutexHeldCount+0x1c>)
    4f82:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    4f86:	4770      	bx	lr
    4f88:	2000330c 	.word	0x2000330c

00004f8c <xTaskNotifyWait>:
{
    4f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f8e:	4607      	mov	r7, r0
    4f90:	460d      	mov	r5, r1
    4f92:	4614      	mov	r4, r2
    4f94:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    4f96:	4b25      	ldr	r3, [pc, #148]	; (502c <xTaskNotifyWait+0xa0>)
    4f98:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    4f9a:	4b25      	ldr	r3, [pc, #148]	; (5030 <xTaskNotifyWait+0xa4>)
    4f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4fa0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4fa4:	b2db      	uxtb	r3, r3
    4fa6:	2b02      	cmp	r3, #2
    4fa8:	d00c      	beq.n	4fc4 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    4faa:	4b21      	ldr	r3, [pc, #132]	; (5030 <xTaskNotifyWait+0xa4>)
    4fac:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4fb0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4fb2:	ea20 0007 	bic.w	r0, r0, r7
    4fb6:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4fbc:	2201      	movs	r2, #1
    4fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    4fc2:	b9e6      	cbnz	r6, 4ffe <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    4fc4:	4b1b      	ldr	r3, [pc, #108]	; (5034 <xTaskNotifyWait+0xa8>)
    4fc6:	4798      	blx	r3
	taskENTER_CRITICAL();
    4fc8:	4b18      	ldr	r3, [pc, #96]	; (502c <xTaskNotifyWait+0xa0>)
    4fca:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    4fcc:	b124      	cbz	r4, 4fd8 <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4fce:	4b18      	ldr	r3, [pc, #96]	; (5030 <xTaskNotifyWait+0xa4>)
    4fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4fd6:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    4fd8:	4b15      	ldr	r3, [pc, #84]	; (5030 <xTaskNotifyWait+0xa4>)
    4fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4fde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4fe2:	b2db      	uxtb	r3, r3
    4fe4:	2b02      	cmp	r3, #2
    4fe6:	d017      	beq.n	5018 <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    4fe8:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4fea:	4b11      	ldr	r3, [pc, #68]	; (5030 <xTaskNotifyWait+0xa4>)
    4fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4ff0:	2200      	movs	r2, #0
    4ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    4ff6:	4b0f      	ldr	r3, [pc, #60]	; (5034 <xTaskNotifyWait+0xa8>)
    4ff8:	4798      	blx	r3
}
    4ffa:	4620      	mov	r0, r4
    4ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    4ffe:	4611      	mov	r1, r2
    5000:	4630      	mov	r0, r6
    5002:	4b0d      	ldr	r3, [pc, #52]	; (5038 <xTaskNotifyWait+0xac>)
    5004:	4798      	blx	r3
				portYIELD_WITHIN_API();
    5006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    500a:	4b0c      	ldr	r3, [pc, #48]	; (503c <xTaskNotifyWait+0xb0>)
    500c:	601a      	str	r2, [r3, #0]
    500e:	f3bf 8f4f 	dsb	sy
    5012:	f3bf 8f6f 	isb	sy
    5016:	e7d5      	b.n	4fc4 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    5018:	4b05      	ldr	r3, [pc, #20]	; (5030 <xTaskNotifyWait+0xa4>)
    501a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    501e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    5020:	ea23 0505 	bic.w	r5, r3, r5
    5024:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    5026:	2401      	movs	r4, #1
    5028:	e7df      	b.n	4fea <xTaskNotifyWait+0x5e>
    502a:	bf00      	nop
    502c:	000036a5 	.word	0x000036a5
    5030:	2000330c 	.word	0x2000330c
    5034:	000036e9 	.word	0x000036e9
    5038:	000044a9 	.word	0x000044a9
    503c:	e000ed04 	.word	0xe000ed04

00005040 <xTaskGenericNotifyFromISR>:
{
    5040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5044:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    5046:	b310      	cbz	r0, 508e <xTaskGenericNotifyFromISR+0x4e>
    5048:	4604      	mov	r4, r0
    504a:	4699      	mov	r9, r3
    504c:	4617      	mov	r7, r2
    504e:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    5050:	4b3e      	ldr	r3, [pc, #248]	; (514c <xTaskGenericNotifyFromISR+0x10c>)
    5052:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    5054:	f3ef 8511 	mrs	r5, BASEPRI
    5058:	f04f 0380 	mov.w	r3, #128	; 0x80
    505c:	f383 8811 	msr	BASEPRI, r3
    5060:	f3bf 8f6f 	isb	sy
    5064:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    5068:	f1b9 0f00 	cmp.w	r9, #0
    506c:	d002      	beq.n	5074 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    506e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5070:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    5074:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    5078:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    507a:	2202      	movs	r2, #2
    507c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    5080:	1e7a      	subs	r2, r7, #1
    5082:	2a03      	cmp	r2, #3
    5084:	d810      	bhi.n	50a8 <xTaskGenericNotifyFromISR+0x68>
    5086:	e8df f002 	tbb	[pc, r2]
    508a:	1c0b      	.short	0x1c0b
    508c:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    508e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5092:	f383 8811 	msr	BASEPRI, r3
    5096:	f3bf 8f6f 	isb	sy
    509a:	f3bf 8f4f 	dsb	sy
    509e:	e7fe      	b.n	509e <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    50a0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    50a2:	ea42 0208 	orr.w	r2, r2, r8
    50a6:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    50a8:	2b01      	cmp	r3, #1
    50aa:	d147      	bne.n	513c <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    50ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    50ae:	b1a3      	cbz	r3, 50da <xTaskGenericNotifyFromISR+0x9a>
    50b0:	f04f 0380 	mov.w	r3, #128	; 0x80
    50b4:	f383 8811 	msr	BASEPRI, r3
    50b8:	f3bf 8f6f 	isb	sy
    50bc:	f3bf 8f4f 	dsb	sy
    50c0:	e7fe      	b.n	50c0 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    50c2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    50c4:	3201      	adds	r2, #1
    50c6:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    50c8:	e7ee      	b.n	50a8 <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    50ca:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    50ce:	e7eb      	b.n	50a8 <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    50d0:	2b02      	cmp	r3, #2
    50d2:	d031      	beq.n	5138 <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    50d4:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    50d8:	e7e6      	b.n	50a8 <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    50da:	4b1d      	ldr	r3, [pc, #116]	; (5150 <xTaskGenericNotifyFromISR+0x110>)
    50dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    50e0:	b9fb      	cbnz	r3, 5122 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    50e2:	1d27      	adds	r7, r4, #4
    50e4:	4638      	mov	r0, r7
    50e6:	4b1b      	ldr	r3, [pc, #108]	; (5154 <xTaskGenericNotifyFromISR+0x114>)
    50e8:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    50ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    50ec:	4b18      	ldr	r3, [pc, #96]	; (5150 <xTaskGenericNotifyFromISR+0x110>)
    50ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    50f2:	4298      	cmp	r0, r3
    50f4:	bf84      	itt	hi
    50f6:	4b16      	ldrhi	r3, [pc, #88]	; (5150 <xTaskGenericNotifyFromISR+0x110>)
    50f8:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    50fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5100:	4639      	mov	r1, r7
    5102:	4b15      	ldr	r3, [pc, #84]	; (5158 <xTaskGenericNotifyFromISR+0x118>)
    5104:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5108:	4b14      	ldr	r3, [pc, #80]	; (515c <xTaskGenericNotifyFromISR+0x11c>)
    510a:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    510c:	4b10      	ldr	r3, [pc, #64]	; (5150 <xTaskGenericNotifyFromISR+0x110>)
    510e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5112:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5116:	429a      	cmp	r2, r3
    5118:	d915      	bls.n	5146 <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    511a:	b146      	cbz	r6, 512e <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    511c:	2001      	movs	r0, #1
    511e:	6030      	str	r0, [r6, #0]
    5120:	e00d      	b.n	513e <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    5122:	f104 0118 	add.w	r1, r4, #24
    5126:	480e      	ldr	r0, [pc, #56]	; (5160 <xTaskGenericNotifyFromISR+0x120>)
    5128:	4b0c      	ldr	r3, [pc, #48]	; (515c <xTaskGenericNotifyFromISR+0x11c>)
    512a:	4798      	blx	r3
    512c:	e7ee      	b.n	510c <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    512e:	2001      	movs	r0, #1
    5130:	4b07      	ldr	r3, [pc, #28]	; (5150 <xTaskGenericNotifyFromISR+0x110>)
    5132:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    5136:	e002      	b.n	513e <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    5138:	2000      	movs	r0, #0
    513a:	e000      	b.n	513e <xTaskGenericNotifyFromISR+0xfe>
    513c:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    513e:	f385 8811 	msr	BASEPRI, r5
}
    5142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5146:	2001      	movs	r0, #1
    5148:	e7f9      	b.n	513e <xTaskGenericNotifyFromISR+0xfe>
    514a:	bf00      	nop
    514c:	000038fd 	.word	0x000038fd
    5150:	2000330c 	.word	0x2000330c
    5154:	000035a9 	.word	0x000035a9
    5158:	20003334 	.word	0x20003334
    515c:	0000355d 	.word	0x0000355d
    5160:	20003320 	.word	0x20003320

00005164 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    5164:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    5166:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    5168:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    516a:	4291      	cmp	r1, r2
    516c:	d80c      	bhi.n	5188 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    516e:	1ad2      	subs	r2, r2, r3
    5170:	6983      	ldr	r3, [r0, #24]
    5172:	429a      	cmp	r2, r3
    5174:	d301      	bcc.n	517a <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    5176:	2001      	movs	r0, #1
    5178:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    517a:	1d01      	adds	r1, r0, #4
    517c:	4b09      	ldr	r3, [pc, #36]	; (51a4 <prvInsertTimerInActiveList+0x40>)
    517e:	6818      	ldr	r0, [r3, #0]
    5180:	4b09      	ldr	r3, [pc, #36]	; (51a8 <prvInsertTimerInActiveList+0x44>)
    5182:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    5184:	2000      	movs	r0, #0
    5186:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    5188:	429a      	cmp	r2, r3
    518a:	d201      	bcs.n	5190 <prvInsertTimerInActiveList+0x2c>
    518c:	4299      	cmp	r1, r3
    518e:	d206      	bcs.n	519e <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    5190:	1d01      	adds	r1, r0, #4
    5192:	4b04      	ldr	r3, [pc, #16]	; (51a4 <prvInsertTimerInActiveList+0x40>)
    5194:	6858      	ldr	r0, [r3, #4]
    5196:	4b04      	ldr	r3, [pc, #16]	; (51a8 <prvInsertTimerInActiveList+0x44>)
    5198:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    519a:	2000      	movs	r0, #0
    519c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    519e:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    51a0:	bd08      	pop	{r3, pc}
    51a2:	bf00      	nop
    51a4:	200033f8 	.word	0x200033f8
    51a8:	00003575 	.word	0x00003575

000051ac <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    51ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    51ae:	4b0d      	ldr	r3, [pc, #52]	; (51e4 <prvCheckForValidListAndQueue+0x38>)
    51b0:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    51b2:	4b0d      	ldr	r3, [pc, #52]	; (51e8 <prvCheckForValidListAndQueue+0x3c>)
    51b4:	689b      	ldr	r3, [r3, #8]
    51b6:	b113      	cbz	r3, 51be <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    51b8:	4b0c      	ldr	r3, [pc, #48]	; (51ec <prvCheckForValidListAndQueue+0x40>)
    51ba:	4798      	blx	r3
    51bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    51be:	4c0a      	ldr	r4, [pc, #40]	; (51e8 <prvCheckForValidListAndQueue+0x3c>)
    51c0:	f104 060c 	add.w	r6, r4, #12
    51c4:	4630      	mov	r0, r6
    51c6:	4f0a      	ldr	r7, [pc, #40]	; (51f0 <prvCheckForValidListAndQueue+0x44>)
    51c8:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    51ca:	f104 0520 	add.w	r5, r4, #32
    51ce:	4628      	mov	r0, r5
    51d0:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    51d2:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    51d4:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    51d6:	2200      	movs	r2, #0
    51d8:	210c      	movs	r1, #12
    51da:	2014      	movs	r0, #20
    51dc:	4b05      	ldr	r3, [pc, #20]	; (51f4 <prvCheckForValidListAndQueue+0x48>)
    51de:	4798      	blx	r3
    51e0:	60a0      	str	r0, [r4, #8]
    51e2:	e7e9      	b.n	51b8 <prvCheckForValidListAndQueue+0xc>
    51e4:	000036a5 	.word	0x000036a5
    51e8:	200033f8 	.word	0x200033f8
    51ec:	000036e9 	.word	0x000036e9
    51f0:	00003541 	.word	0x00003541
    51f4:	00003cf9 	.word	0x00003cf9

000051f8 <xTimerCreateTimerTask>:
{
    51f8:	b510      	push	{r4, lr}
    51fa:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    51fc:	4b0d      	ldr	r3, [pc, #52]	; (5234 <xTimerCreateTimerTask+0x3c>)
    51fe:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    5200:	4b0d      	ldr	r3, [pc, #52]	; (5238 <xTimerCreateTimerTask+0x40>)
    5202:	689b      	ldr	r3, [r3, #8]
    5204:	b163      	cbz	r3, 5220 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    5206:	4b0d      	ldr	r3, [pc, #52]	; (523c <xTimerCreateTimerTask+0x44>)
    5208:	9301      	str	r3, [sp, #4]
    520a:	2303      	movs	r3, #3
    520c:	9300      	str	r3, [sp, #0]
    520e:	2300      	movs	r3, #0
    5210:	2280      	movs	r2, #128	; 0x80
    5212:	490b      	ldr	r1, [pc, #44]	; (5240 <xTimerCreateTimerTask+0x48>)
    5214:	480b      	ldr	r0, [pc, #44]	; (5244 <xTimerCreateTimerTask+0x4c>)
    5216:	4c0c      	ldr	r4, [pc, #48]	; (5248 <xTimerCreateTimerTask+0x50>)
    5218:	47a0      	blx	r4
	configASSERT(xReturn);
    521a:	b108      	cbz	r0, 5220 <xTimerCreateTimerTask+0x28>
}
    521c:	b002      	add	sp, #8
    521e:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    5220:	f04f 0380 	mov.w	r3, #128	; 0x80
    5224:	f383 8811 	msr	BASEPRI, r3
    5228:	f3bf 8f6f 	isb	sy
    522c:	f3bf 8f4f 	dsb	sy
    5230:	e7fe      	b.n	5230 <xTimerCreateTimerTask+0x38>
    5232:	bf00      	nop
    5234:	000051ad 	.word	0x000051ad
    5238:	200033f8 	.word	0x200033f8
    523c:	2000342c 	.word	0x2000342c
    5240:	000074a4 	.word	0x000074a4
    5244:	00005365 	.word	0x00005365
    5248:	00004529 	.word	0x00004529

0000524c <xTimerGenericCommand>:
	configASSERT(xTimer);
    524c:	b1d8      	cbz	r0, 5286 <xTimerGenericCommand+0x3a>
{
    524e:	b530      	push	{r4, r5, lr}
    5250:	b085      	sub	sp, #20
    5252:	4615      	mov	r5, r2
    5254:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    5256:	4a14      	ldr	r2, [pc, #80]	; (52a8 <xTimerGenericCommand+0x5c>)
    5258:	6890      	ldr	r0, [r2, #8]
    525a:	b310      	cbz	r0, 52a2 <xTimerGenericCommand+0x56>
    525c:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    525e:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    5260:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    5262:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    5264:	2905      	cmp	r1, #5
    5266:	dc17      	bgt.n	5298 <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    5268:	4b10      	ldr	r3, [pc, #64]	; (52ac <xTimerGenericCommand+0x60>)
    526a:	4798      	blx	r3
    526c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    526e:	f04f 0300 	mov.w	r3, #0
    5272:	bf0c      	ite	eq
    5274:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    5276:	461a      	movne	r2, r3
    5278:	a901      	add	r1, sp, #4
    527a:	480b      	ldr	r0, [pc, #44]	; (52a8 <xTimerGenericCommand+0x5c>)
    527c:	6880      	ldr	r0, [r0, #8]
    527e:	4c0c      	ldr	r4, [pc, #48]	; (52b0 <xTimerGenericCommand+0x64>)
    5280:	47a0      	blx	r4
}
    5282:	b005      	add	sp, #20
    5284:	bd30      	pop	{r4, r5, pc}
    5286:	f04f 0380 	mov.w	r3, #128	; 0x80
    528a:	f383 8811 	msr	BASEPRI, r3
    528e:	f3bf 8f6f 	isb	sy
    5292:	f3bf 8f4f 	dsb	sy
    5296:	e7fe      	b.n	5296 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    5298:	2300      	movs	r3, #0
    529a:	a901      	add	r1, sp, #4
    529c:	4c05      	ldr	r4, [pc, #20]	; (52b4 <xTimerGenericCommand+0x68>)
    529e:	47a0      	blx	r4
    52a0:	e7ef      	b.n	5282 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    52a2:	2000      	movs	r0, #0
	return xReturn;
    52a4:	e7ed      	b.n	5282 <xTimerGenericCommand+0x36>
    52a6:	bf00      	nop
    52a8:	200033f8 	.word	0x200033f8
    52ac:	00004d61 	.word	0x00004d61
    52b0:	00003d51 	.word	0x00003d51
    52b4:	00003f59 	.word	0x00003f59

000052b8 <prvSampleTimeNow>:
{
    52b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52bc:	b082      	sub	sp, #8
    52be:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    52c0:	4b23      	ldr	r3, [pc, #140]	; (5350 <prvSampleTimeNow+0x98>)
    52c2:	4798      	blx	r3
    52c4:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    52c6:	4b23      	ldr	r3, [pc, #140]	; (5354 <prvSampleTimeNow+0x9c>)
    52c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    52ca:	4298      	cmp	r0, r3
    52cc:	d319      	bcc.n	5302 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    52ce:	2300      	movs	r3, #0
    52d0:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    52d4:	4b1f      	ldr	r3, [pc, #124]	; (5354 <prvSampleTimeNow+0x9c>)
    52d6:	639f      	str	r7, [r3, #56]	; 0x38
}
    52d8:	4638      	mov	r0, r7
    52da:	b002      	add	sp, #8
    52dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    52e0:	2100      	movs	r1, #0
    52e2:	9100      	str	r1, [sp, #0]
    52e4:	460b      	mov	r3, r1
    52e6:	4652      	mov	r2, sl
    52e8:	4620      	mov	r0, r4
    52ea:	4c1b      	ldr	r4, [pc, #108]	; (5358 <prvSampleTimeNow+0xa0>)
    52ec:	47a0      	blx	r4
				configASSERT(xResult);
    52ee:	b950      	cbnz	r0, 5306 <prvSampleTimeNow+0x4e>
    52f0:	f04f 0380 	mov.w	r3, #128	; 0x80
    52f4:	f383 8811 	msr	BASEPRI, r3
    52f8:	f3bf 8f6f 	isb	sy
    52fc:	f3bf 8f4f 	dsb	sy
    5300:	e7fe      	b.n	5300 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    5302:	4d14      	ldr	r5, [pc, #80]	; (5354 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    5304:	4e15      	ldr	r6, [pc, #84]	; (535c <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    5306:	686b      	ldr	r3, [r5, #4]
    5308:	681a      	ldr	r2, [r3, #0]
    530a:	b1c2      	cbz	r2, 533e <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    530c:	68db      	ldr	r3, [r3, #12]
    530e:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    5312:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    5314:	f104 0904 	add.w	r9, r4, #4
    5318:	4648      	mov	r0, r9
    531a:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    531c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    531e:	4620      	mov	r0, r4
    5320:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    5322:	69e3      	ldr	r3, [r4, #28]
    5324:	2b01      	cmp	r3, #1
    5326:	d1ee      	bne.n	5306 <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    5328:	69a3      	ldr	r3, [r4, #24]
    532a:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    532c:	459a      	cmp	sl, r3
    532e:	d2d7      	bcs.n	52e0 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    5330:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    5332:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    5334:	4649      	mov	r1, r9
    5336:	6868      	ldr	r0, [r5, #4]
    5338:	4b09      	ldr	r3, [pc, #36]	; (5360 <prvSampleTimeNow+0xa8>)
    533a:	4798      	blx	r3
    533c:	e7e3      	b.n	5306 <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    533e:	4a05      	ldr	r2, [pc, #20]	; (5354 <prvSampleTimeNow+0x9c>)
    5340:	6811      	ldr	r1, [r2, #0]
    5342:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    5344:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    5346:	2301      	movs	r3, #1
    5348:	f8c8 3000 	str.w	r3, [r8]
    534c:	e7c2      	b.n	52d4 <prvSampleTimeNow+0x1c>
    534e:	bf00      	nop
    5350:	000047a1 	.word	0x000047a1
    5354:	200033f8 	.word	0x200033f8
    5358:	0000524d 	.word	0x0000524d
    535c:	000035a9 	.word	0x000035a9
    5360:	00003575 	.word	0x00003575

00005364 <prvTimerTask>:
{
    5364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5368:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    536a:	4c65      	ldr	r4, [pc, #404]	; (5500 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    536c:	4f65      	ldr	r7, [pc, #404]	; (5504 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    536e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 5524 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    5372:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 5528 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    5376:	6863      	ldr	r3, [r4, #4]
    5378:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    537a:	b172      	cbz	r2, 539a <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    537c:	68db      	ldr	r3, [r3, #12]
    537e:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    5380:	4b61      	ldr	r3, [pc, #388]	; (5508 <prvTimerTask+0x1a4>)
    5382:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    5384:	a803      	add	r0, sp, #12
    5386:	4b61      	ldr	r3, [pc, #388]	; (550c <prvTimerTask+0x1a8>)
    5388:	4798      	blx	r3
    538a:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    538c:	9b03      	ldr	r3, [sp, #12]
    538e:	2b00      	cmp	r3, #0
    5390:	d179      	bne.n	5486 <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    5392:	42a8      	cmp	r0, r5
    5394:	d24a      	bcs.n	542c <prvTimerTask+0xc8>
    5396:	2200      	movs	r2, #0
    5398:	e00e      	b.n	53b8 <prvTimerTask+0x54>
	vTaskSuspendAll();
    539a:	4b5b      	ldr	r3, [pc, #364]	; (5508 <prvTimerTask+0x1a4>)
    539c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    539e:	a803      	add	r0, sp, #12
    53a0:	4b5a      	ldr	r3, [pc, #360]	; (550c <prvTimerTask+0x1a8>)
    53a2:	4798      	blx	r3
    53a4:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    53a6:	9b03      	ldr	r3, [sp, #12]
    53a8:	2b00      	cmp	r3, #0
    53aa:	d16c      	bne.n	5486 <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    53ac:	6823      	ldr	r3, [r4, #0]
    53ae:	681a      	ldr	r2, [r3, #0]
    53b0:	fab2 f282 	clz	r2, r2
    53b4:	0952      	lsrs	r2, r2, #5
    53b6:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    53b8:	1ba9      	subs	r1, r5, r6
    53ba:	68a0      	ldr	r0, [r4, #8]
    53bc:	4b54      	ldr	r3, [pc, #336]	; (5510 <prvTimerTask+0x1ac>)
    53be:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    53c0:	47b8      	blx	r7
    53c2:	b938      	cbnz	r0, 53d4 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    53c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    53c8:	f8c9 3000 	str.w	r3, [r9]
    53cc:	f3bf 8f4f 	dsb	sy
    53d0:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    53d4:	4d4f      	ldr	r5, [pc, #316]	; (5514 <prvTimerTask+0x1b0>)
    53d6:	2200      	movs	r2, #0
    53d8:	a903      	add	r1, sp, #12
    53da:	68a0      	ldr	r0, [r4, #8]
    53dc:	47a8      	blx	r5
    53de:	2800      	cmp	r0, #0
    53e0:	d0c9      	beq.n	5376 <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    53e2:	9b03      	ldr	r3, [sp, #12]
    53e4:	2b00      	cmp	r3, #0
    53e6:	dbf6      	blt.n	53d6 <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    53e8:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    53ea:	6973      	ldr	r3, [r6, #20]
    53ec:	b10b      	cbz	r3, 53f2 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    53ee:	1d30      	adds	r0, r6, #4
    53f0:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    53f2:	a802      	add	r0, sp, #8
    53f4:	4b45      	ldr	r3, [pc, #276]	; (550c <prvTimerTask+0x1a8>)
    53f6:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    53f8:	9b03      	ldr	r3, [sp, #12]
    53fa:	2b09      	cmp	r3, #9
    53fc:	d8eb      	bhi.n	53d6 <prvTimerTask+0x72>
    53fe:	a201      	add	r2, pc, #4	; (adr r2, 5404 <prvTimerTask+0xa0>)
    5400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5404:	0000548b 	.word	0x0000548b
    5408:	0000548b 	.word	0x0000548b
    540c:	0000548b 	.word	0x0000548b
    5410:	000053d7 	.word	0x000053d7
    5414:	000054d3 	.word	0x000054d3
    5418:	000054f9 	.word	0x000054f9
    541c:	0000548b 	.word	0x0000548b
    5420:	0000548b 	.word	0x0000548b
    5424:	000053d7 	.word	0x000053d7
    5428:	000054d3 	.word	0x000054d3
				(void)xTaskResumeAll();
    542c:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    542e:	6863      	ldr	r3, [r4, #4]
    5430:	68db      	ldr	r3, [r3, #12]
    5432:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    5436:	f10a 0004 	add.w	r0, sl, #4
    543a:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    543c:	f8da 301c 	ldr.w	r3, [sl, #28]
    5440:	2b01      	cmp	r3, #1
    5442:	d004      	beq.n	544e <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    5444:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    5448:	4650      	mov	r0, sl
    544a:	4798      	blx	r3
    544c:	e7c2      	b.n	53d4 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    544e:	f8da 1018 	ldr.w	r1, [sl, #24]
    5452:	462b      	mov	r3, r5
    5454:	4632      	mov	r2, r6
    5456:	4429      	add	r1, r5
    5458:	4650      	mov	r0, sl
    545a:	4e2f      	ldr	r6, [pc, #188]	; (5518 <prvTimerTask+0x1b4>)
    545c:	47b0      	blx	r6
    545e:	2800      	cmp	r0, #0
    5460:	d0f0      	beq.n	5444 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    5462:	2100      	movs	r1, #0
    5464:	9100      	str	r1, [sp, #0]
    5466:	460b      	mov	r3, r1
    5468:	462a      	mov	r2, r5
    546a:	4650      	mov	r0, sl
    546c:	4d2b      	ldr	r5, [pc, #172]	; (551c <prvTimerTask+0x1b8>)
    546e:	47a8      	blx	r5
			configASSERT(xResult);
    5470:	2800      	cmp	r0, #0
    5472:	d1e7      	bne.n	5444 <prvTimerTask+0xe0>
    5474:	f04f 0380 	mov.w	r3, #128	; 0x80
    5478:	f383 8811 	msr	BASEPRI, r3
    547c:	f3bf 8f6f 	isb	sy
    5480:	f3bf 8f4f 	dsb	sy
    5484:	e7fe      	b.n	5484 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    5486:	47b8      	blx	r7
    5488:	e7a4      	b.n	53d4 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    548a:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    548c:	69b1      	ldr	r1, [r6, #24]
    548e:	462b      	mov	r3, r5
    5490:	4602      	mov	r2, r0
    5492:	4429      	add	r1, r5
    5494:	4630      	mov	r0, r6
    5496:	4d20      	ldr	r5, [pc, #128]	; (5518 <prvTimerTask+0x1b4>)
    5498:	47a8      	blx	r5
    549a:	2800      	cmp	r0, #0
    549c:	d09a      	beq.n	53d4 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    549e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    54a0:	4630      	mov	r0, r6
    54a2:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    54a4:	69f3      	ldr	r3, [r6, #28]
    54a6:	2b01      	cmp	r3, #1
    54a8:	d194      	bne.n	53d4 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    54aa:	69b2      	ldr	r2, [r6, #24]
    54ac:	2100      	movs	r1, #0
    54ae:	9100      	str	r1, [sp, #0]
    54b0:	460b      	mov	r3, r1
    54b2:	9804      	ldr	r0, [sp, #16]
    54b4:	4402      	add	r2, r0
    54b6:	4630      	mov	r0, r6
    54b8:	4d18      	ldr	r5, [pc, #96]	; (551c <prvTimerTask+0x1b8>)
    54ba:	47a8      	blx	r5
						configASSERT(xResult);
    54bc:	2800      	cmp	r0, #0
    54be:	d189      	bne.n	53d4 <prvTimerTask+0x70>
    54c0:	f04f 0380 	mov.w	r3, #128	; 0x80
    54c4:	f383 8811 	msr	BASEPRI, r3
    54c8:	f3bf 8f6f 	isb	sy
    54cc:	f3bf 8f4f 	dsb	sy
    54d0:	e7fe      	b.n	54d0 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    54d2:	9904      	ldr	r1, [sp, #16]
    54d4:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    54d6:	b131      	cbz	r1, 54e6 <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    54d8:	4603      	mov	r3, r0
    54da:	4602      	mov	r2, r0
    54dc:	4401      	add	r1, r0
    54de:	4630      	mov	r0, r6
    54e0:	4d0d      	ldr	r5, [pc, #52]	; (5518 <prvTimerTask+0x1b4>)
    54e2:	47a8      	blx	r5
    54e4:	e776      	b.n	53d4 <prvTimerTask+0x70>
    54e6:	f04f 0380 	mov.w	r3, #128	; 0x80
    54ea:	f383 8811 	msr	BASEPRI, r3
    54ee:	f3bf 8f6f 	isb	sy
    54f2:	f3bf 8f4f 	dsb	sy
    54f6:	e7fe      	b.n	54f6 <prvTimerTask+0x192>
				vPortFree(pxTimer);
    54f8:	4630      	mov	r0, r6
    54fa:	4b09      	ldr	r3, [pc, #36]	; (5520 <prvTimerTask+0x1bc>)
    54fc:	4798      	blx	r3
    54fe:	e769      	b.n	53d4 <prvTimerTask+0x70>
    5500:	200033f8 	.word	0x200033f8
    5504:	000048d5 	.word	0x000048d5
    5508:	0000478d 	.word	0x0000478d
    550c:	000052b9 	.word	0x000052b9
    5510:	000043f9 	.word	0x000043f9
    5514:	00004061 	.word	0x00004061
    5518:	00005165 	.word	0x00005165
    551c:	0000524d 	.word	0x0000524d
    5520:	00003a29 	.word	0x00003a29
    5524:	e000ed04 	.word	0xe000ed04
    5528:	000035a9 	.word	0x000035a9

0000552c <__libc_init_array>:
    552c:	b570      	push	{r4, r5, r6, lr}
    552e:	4e0d      	ldr	r6, [pc, #52]	; (5564 <__libc_init_array+0x38>)
    5530:	4c0d      	ldr	r4, [pc, #52]	; (5568 <__libc_init_array+0x3c>)
    5532:	1ba4      	subs	r4, r4, r6
    5534:	10a4      	asrs	r4, r4, #2
    5536:	2500      	movs	r5, #0
    5538:	42a5      	cmp	r5, r4
    553a:	d109      	bne.n	5550 <__libc_init_array+0x24>
    553c:	4e0b      	ldr	r6, [pc, #44]	; (556c <__libc_init_array+0x40>)
    553e:	4c0c      	ldr	r4, [pc, #48]	; (5570 <__libc_init_array+0x44>)
    5540:	f001 fffe 	bl	7540 <_init>
    5544:	1ba4      	subs	r4, r4, r6
    5546:	10a4      	asrs	r4, r4, #2
    5548:	2500      	movs	r5, #0
    554a:	42a5      	cmp	r5, r4
    554c:	d105      	bne.n	555a <__libc_init_array+0x2e>
    554e:	bd70      	pop	{r4, r5, r6, pc}
    5550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5554:	4798      	blx	r3
    5556:	3501      	adds	r5, #1
    5558:	e7ee      	b.n	5538 <__libc_init_array+0xc>
    555a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    555e:	4798      	blx	r3
    5560:	3501      	adds	r5, #1
    5562:	e7f2      	b.n	554a <__libc_init_array+0x1e>
    5564:	0000754c 	.word	0x0000754c
    5568:	0000754c 	.word	0x0000754c
    556c:	0000754c 	.word	0x0000754c
    5570:	00007550 	.word	0x00007550

00005574 <memcpy>:
    5574:	b510      	push	{r4, lr}
    5576:	1e43      	subs	r3, r0, #1
    5578:	440a      	add	r2, r1
    557a:	4291      	cmp	r1, r2
    557c:	d100      	bne.n	5580 <memcpy+0xc>
    557e:	bd10      	pop	{r4, pc}
    5580:	f811 4b01 	ldrb.w	r4, [r1], #1
    5584:	f803 4f01 	strb.w	r4, [r3, #1]!
    5588:	e7f7      	b.n	557a <memcpy+0x6>

0000558a <memmove>:
    558a:	4288      	cmp	r0, r1
    558c:	b510      	push	{r4, lr}
    558e:	eb01 0302 	add.w	r3, r1, r2
    5592:	d803      	bhi.n	559c <memmove+0x12>
    5594:	1e42      	subs	r2, r0, #1
    5596:	4299      	cmp	r1, r3
    5598:	d10c      	bne.n	55b4 <memmove+0x2a>
    559a:	bd10      	pop	{r4, pc}
    559c:	4298      	cmp	r0, r3
    559e:	d2f9      	bcs.n	5594 <memmove+0xa>
    55a0:	1881      	adds	r1, r0, r2
    55a2:	1ad2      	subs	r2, r2, r3
    55a4:	42d3      	cmn	r3, r2
    55a6:	d100      	bne.n	55aa <memmove+0x20>
    55a8:	bd10      	pop	{r4, pc}
    55aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    55ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
    55b2:	e7f7      	b.n	55a4 <memmove+0x1a>
    55b4:	f811 4b01 	ldrb.w	r4, [r1], #1
    55b8:	f802 4f01 	strb.w	r4, [r2, #1]!
    55bc:	e7eb      	b.n	5596 <memmove+0xc>

000055be <memset>:
    55be:	4402      	add	r2, r0
    55c0:	4603      	mov	r3, r0
    55c2:	4293      	cmp	r3, r2
    55c4:	d100      	bne.n	55c8 <memset+0xa>
    55c6:	4770      	bx	lr
    55c8:	f803 1b01 	strb.w	r1, [r3], #1
    55cc:	e7f9      	b.n	55c2 <memset+0x4>
	...

000055d0 <_free_r>:
    55d0:	b538      	push	{r3, r4, r5, lr}
    55d2:	4605      	mov	r5, r0
    55d4:	2900      	cmp	r1, #0
    55d6:	d045      	beq.n	5664 <_free_r+0x94>
    55d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    55dc:	1f0c      	subs	r4, r1, #4
    55de:	2b00      	cmp	r3, #0
    55e0:	bfb8      	it	lt
    55e2:	18e4      	addlt	r4, r4, r3
    55e4:	f000 f8f6 	bl	57d4 <__malloc_lock>
    55e8:	4a1f      	ldr	r2, [pc, #124]	; (5668 <_free_r+0x98>)
    55ea:	6813      	ldr	r3, [r2, #0]
    55ec:	4610      	mov	r0, r2
    55ee:	b933      	cbnz	r3, 55fe <_free_r+0x2e>
    55f0:	6063      	str	r3, [r4, #4]
    55f2:	6014      	str	r4, [r2, #0]
    55f4:	4628      	mov	r0, r5
    55f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    55fa:	f000 b8ec 	b.w	57d6 <__malloc_unlock>
    55fe:	42a3      	cmp	r3, r4
    5600:	d90c      	bls.n	561c <_free_r+0x4c>
    5602:	6821      	ldr	r1, [r4, #0]
    5604:	1862      	adds	r2, r4, r1
    5606:	4293      	cmp	r3, r2
    5608:	bf04      	itt	eq
    560a:	681a      	ldreq	r2, [r3, #0]
    560c:	685b      	ldreq	r3, [r3, #4]
    560e:	6063      	str	r3, [r4, #4]
    5610:	bf04      	itt	eq
    5612:	1852      	addeq	r2, r2, r1
    5614:	6022      	streq	r2, [r4, #0]
    5616:	6004      	str	r4, [r0, #0]
    5618:	e7ec      	b.n	55f4 <_free_r+0x24>
    561a:	4613      	mov	r3, r2
    561c:	685a      	ldr	r2, [r3, #4]
    561e:	b10a      	cbz	r2, 5624 <_free_r+0x54>
    5620:	42a2      	cmp	r2, r4
    5622:	d9fa      	bls.n	561a <_free_r+0x4a>
    5624:	6819      	ldr	r1, [r3, #0]
    5626:	1858      	adds	r0, r3, r1
    5628:	42a0      	cmp	r0, r4
    562a:	d10b      	bne.n	5644 <_free_r+0x74>
    562c:	6820      	ldr	r0, [r4, #0]
    562e:	4401      	add	r1, r0
    5630:	1858      	adds	r0, r3, r1
    5632:	4282      	cmp	r2, r0
    5634:	6019      	str	r1, [r3, #0]
    5636:	d1dd      	bne.n	55f4 <_free_r+0x24>
    5638:	6810      	ldr	r0, [r2, #0]
    563a:	6852      	ldr	r2, [r2, #4]
    563c:	605a      	str	r2, [r3, #4]
    563e:	4401      	add	r1, r0
    5640:	6019      	str	r1, [r3, #0]
    5642:	e7d7      	b.n	55f4 <_free_r+0x24>
    5644:	d902      	bls.n	564c <_free_r+0x7c>
    5646:	230c      	movs	r3, #12
    5648:	602b      	str	r3, [r5, #0]
    564a:	e7d3      	b.n	55f4 <_free_r+0x24>
    564c:	6820      	ldr	r0, [r4, #0]
    564e:	1821      	adds	r1, r4, r0
    5650:	428a      	cmp	r2, r1
    5652:	bf04      	itt	eq
    5654:	6811      	ldreq	r1, [r2, #0]
    5656:	6852      	ldreq	r2, [r2, #4]
    5658:	6062      	str	r2, [r4, #4]
    565a:	bf04      	itt	eq
    565c:	1809      	addeq	r1, r1, r0
    565e:	6021      	streq	r1, [r4, #0]
    5660:	605c      	str	r4, [r3, #4]
    5662:	e7c7      	b.n	55f4 <_free_r+0x24>
    5664:	bd38      	pop	{r3, r4, r5, pc}
    5666:	bf00      	nop
    5668:	20003434 	.word	0x20003434

0000566c <_malloc_r>:
    566c:	b570      	push	{r4, r5, r6, lr}
    566e:	1ccd      	adds	r5, r1, #3
    5670:	f025 0503 	bic.w	r5, r5, #3
    5674:	3508      	adds	r5, #8
    5676:	2d0c      	cmp	r5, #12
    5678:	bf38      	it	cc
    567a:	250c      	movcc	r5, #12
    567c:	2d00      	cmp	r5, #0
    567e:	4606      	mov	r6, r0
    5680:	db01      	blt.n	5686 <_malloc_r+0x1a>
    5682:	42a9      	cmp	r1, r5
    5684:	d903      	bls.n	568e <_malloc_r+0x22>
    5686:	230c      	movs	r3, #12
    5688:	6033      	str	r3, [r6, #0]
    568a:	2000      	movs	r0, #0
    568c:	bd70      	pop	{r4, r5, r6, pc}
    568e:	f000 f8a1 	bl	57d4 <__malloc_lock>
    5692:	4a23      	ldr	r2, [pc, #140]	; (5720 <_malloc_r+0xb4>)
    5694:	6814      	ldr	r4, [r2, #0]
    5696:	4621      	mov	r1, r4
    5698:	b991      	cbnz	r1, 56c0 <_malloc_r+0x54>
    569a:	4c22      	ldr	r4, [pc, #136]	; (5724 <_malloc_r+0xb8>)
    569c:	6823      	ldr	r3, [r4, #0]
    569e:	b91b      	cbnz	r3, 56a8 <_malloc_r+0x3c>
    56a0:	4630      	mov	r0, r6
    56a2:	f000 f841 	bl	5728 <_sbrk_r>
    56a6:	6020      	str	r0, [r4, #0]
    56a8:	4629      	mov	r1, r5
    56aa:	4630      	mov	r0, r6
    56ac:	f000 f83c 	bl	5728 <_sbrk_r>
    56b0:	1c43      	adds	r3, r0, #1
    56b2:	d126      	bne.n	5702 <_malloc_r+0x96>
    56b4:	230c      	movs	r3, #12
    56b6:	6033      	str	r3, [r6, #0]
    56b8:	4630      	mov	r0, r6
    56ba:	f000 f88c 	bl	57d6 <__malloc_unlock>
    56be:	e7e4      	b.n	568a <_malloc_r+0x1e>
    56c0:	680b      	ldr	r3, [r1, #0]
    56c2:	1b5b      	subs	r3, r3, r5
    56c4:	d41a      	bmi.n	56fc <_malloc_r+0x90>
    56c6:	2b0b      	cmp	r3, #11
    56c8:	d90f      	bls.n	56ea <_malloc_r+0x7e>
    56ca:	600b      	str	r3, [r1, #0]
    56cc:	50cd      	str	r5, [r1, r3]
    56ce:	18cc      	adds	r4, r1, r3
    56d0:	4630      	mov	r0, r6
    56d2:	f000 f880 	bl	57d6 <__malloc_unlock>
    56d6:	f104 000b 	add.w	r0, r4, #11
    56da:	1d23      	adds	r3, r4, #4
    56dc:	f020 0007 	bic.w	r0, r0, #7
    56e0:	1ac3      	subs	r3, r0, r3
    56e2:	d01b      	beq.n	571c <_malloc_r+0xb0>
    56e4:	425a      	negs	r2, r3
    56e6:	50e2      	str	r2, [r4, r3]
    56e8:	bd70      	pop	{r4, r5, r6, pc}
    56ea:	428c      	cmp	r4, r1
    56ec:	bf0d      	iteet	eq
    56ee:	6863      	ldreq	r3, [r4, #4]
    56f0:	684b      	ldrne	r3, [r1, #4]
    56f2:	6063      	strne	r3, [r4, #4]
    56f4:	6013      	streq	r3, [r2, #0]
    56f6:	bf18      	it	ne
    56f8:	460c      	movne	r4, r1
    56fa:	e7e9      	b.n	56d0 <_malloc_r+0x64>
    56fc:	460c      	mov	r4, r1
    56fe:	6849      	ldr	r1, [r1, #4]
    5700:	e7ca      	b.n	5698 <_malloc_r+0x2c>
    5702:	1cc4      	adds	r4, r0, #3
    5704:	f024 0403 	bic.w	r4, r4, #3
    5708:	42a0      	cmp	r0, r4
    570a:	d005      	beq.n	5718 <_malloc_r+0xac>
    570c:	1a21      	subs	r1, r4, r0
    570e:	4630      	mov	r0, r6
    5710:	f000 f80a 	bl	5728 <_sbrk_r>
    5714:	3001      	adds	r0, #1
    5716:	d0cd      	beq.n	56b4 <_malloc_r+0x48>
    5718:	6025      	str	r5, [r4, #0]
    571a:	e7d9      	b.n	56d0 <_malloc_r+0x64>
    571c:	bd70      	pop	{r4, r5, r6, pc}
    571e:	bf00      	nop
    5720:	20003434 	.word	0x20003434
    5724:	20003438 	.word	0x20003438

00005728 <_sbrk_r>:
    5728:	b538      	push	{r3, r4, r5, lr}
    572a:	4c06      	ldr	r4, [pc, #24]	; (5744 <_sbrk_r+0x1c>)
    572c:	2300      	movs	r3, #0
    572e:	4605      	mov	r5, r0
    5730:	4608      	mov	r0, r1
    5732:	6023      	str	r3, [r4, #0]
    5734:	f7fc fbd0 	bl	1ed8 <_sbrk>
    5738:	1c43      	adds	r3, r0, #1
    573a:	d102      	bne.n	5742 <_sbrk_r+0x1a>
    573c:	6823      	ldr	r3, [r4, #0]
    573e:	b103      	cbz	r3, 5742 <_sbrk_r+0x1a>
    5740:	602b      	str	r3, [r5, #0]
    5742:	bd38      	pop	{r3, r4, r5, pc}
    5744:	20003e54 	.word	0x20003e54

00005748 <siprintf>:
    5748:	b40e      	push	{r1, r2, r3}
    574a:	b500      	push	{lr}
    574c:	b09c      	sub	sp, #112	; 0x70
    574e:	f44f 7102 	mov.w	r1, #520	; 0x208
    5752:	ab1d      	add	r3, sp, #116	; 0x74
    5754:	f8ad 1014 	strh.w	r1, [sp, #20]
    5758:	9002      	str	r0, [sp, #8]
    575a:	9006      	str	r0, [sp, #24]
    575c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5760:	480a      	ldr	r0, [pc, #40]	; (578c <siprintf+0x44>)
    5762:	9104      	str	r1, [sp, #16]
    5764:	9107      	str	r1, [sp, #28]
    5766:	f64f 71ff 	movw	r1, #65535	; 0xffff
    576a:	f853 2b04 	ldr.w	r2, [r3], #4
    576e:	f8ad 1016 	strh.w	r1, [sp, #22]
    5772:	6800      	ldr	r0, [r0, #0]
    5774:	9301      	str	r3, [sp, #4]
    5776:	a902      	add	r1, sp, #8
    5778:	f000 f88a 	bl	5890 <_svfiprintf_r>
    577c:	9b02      	ldr	r3, [sp, #8]
    577e:	2200      	movs	r2, #0
    5780:	701a      	strb	r2, [r3, #0]
    5782:	b01c      	add	sp, #112	; 0x70
    5784:	f85d eb04 	ldr.w	lr, [sp], #4
    5788:	b003      	add	sp, #12
    578a:	4770      	bx	lr
    578c:	20000128 	.word	0x20000128

00005790 <strcpy>:
    5790:	4603      	mov	r3, r0
    5792:	f811 2b01 	ldrb.w	r2, [r1], #1
    5796:	f803 2b01 	strb.w	r2, [r3], #1
    579a:	2a00      	cmp	r2, #0
    579c:	d1f9      	bne.n	5792 <strcpy+0x2>
    579e:	4770      	bx	lr

000057a0 <strlen>:
    57a0:	4603      	mov	r3, r0
    57a2:	f813 2b01 	ldrb.w	r2, [r3], #1
    57a6:	2a00      	cmp	r2, #0
    57a8:	d1fb      	bne.n	57a2 <strlen+0x2>
    57aa:	1a18      	subs	r0, r3, r0
    57ac:	3801      	subs	r0, #1
    57ae:	4770      	bx	lr

000057b0 <strncmp>:
    57b0:	b510      	push	{r4, lr}
    57b2:	b16a      	cbz	r2, 57d0 <strncmp+0x20>
    57b4:	3901      	subs	r1, #1
    57b6:	1884      	adds	r4, r0, r2
    57b8:	f810 3b01 	ldrb.w	r3, [r0], #1
    57bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    57c0:	4293      	cmp	r3, r2
    57c2:	d103      	bne.n	57cc <strncmp+0x1c>
    57c4:	42a0      	cmp	r0, r4
    57c6:	d001      	beq.n	57cc <strncmp+0x1c>
    57c8:	2b00      	cmp	r3, #0
    57ca:	d1f5      	bne.n	57b8 <strncmp+0x8>
    57cc:	1a98      	subs	r0, r3, r2
    57ce:	bd10      	pop	{r4, pc}
    57d0:	4610      	mov	r0, r2
    57d2:	bd10      	pop	{r4, pc}

000057d4 <__malloc_lock>:
    57d4:	4770      	bx	lr

000057d6 <__malloc_unlock>:
    57d6:	4770      	bx	lr

000057d8 <__ssputs_r>:
    57d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    57dc:	688e      	ldr	r6, [r1, #8]
    57de:	429e      	cmp	r6, r3
    57e0:	4682      	mov	sl, r0
    57e2:	460c      	mov	r4, r1
    57e4:	4691      	mov	r9, r2
    57e6:	4698      	mov	r8, r3
    57e8:	d835      	bhi.n	5856 <__ssputs_r+0x7e>
    57ea:	898a      	ldrh	r2, [r1, #12]
    57ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
    57f0:	d031      	beq.n	5856 <__ssputs_r+0x7e>
    57f2:	6825      	ldr	r5, [r4, #0]
    57f4:	6909      	ldr	r1, [r1, #16]
    57f6:	1a6f      	subs	r7, r5, r1
    57f8:	6965      	ldr	r5, [r4, #20]
    57fa:	2302      	movs	r3, #2
    57fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    5800:	fb95 f5f3 	sdiv	r5, r5, r3
    5804:	f108 0301 	add.w	r3, r8, #1
    5808:	443b      	add	r3, r7
    580a:	429d      	cmp	r5, r3
    580c:	bf38      	it	cc
    580e:	461d      	movcc	r5, r3
    5810:	0553      	lsls	r3, r2, #21
    5812:	d531      	bpl.n	5878 <__ssputs_r+0xa0>
    5814:	4629      	mov	r1, r5
    5816:	f7ff ff29 	bl	566c <_malloc_r>
    581a:	4606      	mov	r6, r0
    581c:	b950      	cbnz	r0, 5834 <__ssputs_r+0x5c>
    581e:	230c      	movs	r3, #12
    5820:	f8ca 3000 	str.w	r3, [sl]
    5824:	89a3      	ldrh	r3, [r4, #12]
    5826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    582a:	81a3      	strh	r3, [r4, #12]
    582c:	f04f 30ff 	mov.w	r0, #4294967295
    5830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5834:	463a      	mov	r2, r7
    5836:	6921      	ldr	r1, [r4, #16]
    5838:	f7ff fe9c 	bl	5574 <memcpy>
    583c:	89a3      	ldrh	r3, [r4, #12]
    583e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    5842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5846:	81a3      	strh	r3, [r4, #12]
    5848:	6126      	str	r6, [r4, #16]
    584a:	6165      	str	r5, [r4, #20]
    584c:	443e      	add	r6, r7
    584e:	1bed      	subs	r5, r5, r7
    5850:	6026      	str	r6, [r4, #0]
    5852:	60a5      	str	r5, [r4, #8]
    5854:	4646      	mov	r6, r8
    5856:	4546      	cmp	r6, r8
    5858:	bf28      	it	cs
    585a:	4646      	movcs	r6, r8
    585c:	4632      	mov	r2, r6
    585e:	4649      	mov	r1, r9
    5860:	6820      	ldr	r0, [r4, #0]
    5862:	f7ff fe92 	bl	558a <memmove>
    5866:	68a3      	ldr	r3, [r4, #8]
    5868:	1b9b      	subs	r3, r3, r6
    586a:	60a3      	str	r3, [r4, #8]
    586c:	6823      	ldr	r3, [r4, #0]
    586e:	441e      	add	r6, r3
    5870:	6026      	str	r6, [r4, #0]
    5872:	2000      	movs	r0, #0
    5874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5878:	462a      	mov	r2, r5
    587a:	f000 fae9 	bl	5e50 <_realloc_r>
    587e:	4606      	mov	r6, r0
    5880:	2800      	cmp	r0, #0
    5882:	d1e1      	bne.n	5848 <__ssputs_r+0x70>
    5884:	6921      	ldr	r1, [r4, #16]
    5886:	4650      	mov	r0, sl
    5888:	f7ff fea2 	bl	55d0 <_free_r>
    588c:	e7c7      	b.n	581e <__ssputs_r+0x46>
	...

00005890 <_svfiprintf_r>:
    5890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5894:	b09d      	sub	sp, #116	; 0x74
    5896:	4680      	mov	r8, r0
    5898:	9303      	str	r3, [sp, #12]
    589a:	898b      	ldrh	r3, [r1, #12]
    589c:	061c      	lsls	r4, r3, #24
    589e:	460d      	mov	r5, r1
    58a0:	4616      	mov	r6, r2
    58a2:	d50f      	bpl.n	58c4 <_svfiprintf_r+0x34>
    58a4:	690b      	ldr	r3, [r1, #16]
    58a6:	b96b      	cbnz	r3, 58c4 <_svfiprintf_r+0x34>
    58a8:	2140      	movs	r1, #64	; 0x40
    58aa:	f7ff fedf 	bl	566c <_malloc_r>
    58ae:	6028      	str	r0, [r5, #0]
    58b0:	6128      	str	r0, [r5, #16]
    58b2:	b928      	cbnz	r0, 58c0 <_svfiprintf_r+0x30>
    58b4:	230c      	movs	r3, #12
    58b6:	f8c8 3000 	str.w	r3, [r8]
    58ba:	f04f 30ff 	mov.w	r0, #4294967295
    58be:	e0c5      	b.n	5a4c <_svfiprintf_r+0x1bc>
    58c0:	2340      	movs	r3, #64	; 0x40
    58c2:	616b      	str	r3, [r5, #20]
    58c4:	2300      	movs	r3, #0
    58c6:	9309      	str	r3, [sp, #36]	; 0x24
    58c8:	2320      	movs	r3, #32
    58ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    58ce:	2330      	movs	r3, #48	; 0x30
    58d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    58d4:	f04f 0b01 	mov.w	fp, #1
    58d8:	4637      	mov	r7, r6
    58da:	463c      	mov	r4, r7
    58dc:	f814 3b01 	ldrb.w	r3, [r4], #1
    58e0:	2b00      	cmp	r3, #0
    58e2:	d13c      	bne.n	595e <_svfiprintf_r+0xce>
    58e4:	ebb7 0a06 	subs.w	sl, r7, r6
    58e8:	d00b      	beq.n	5902 <_svfiprintf_r+0x72>
    58ea:	4653      	mov	r3, sl
    58ec:	4632      	mov	r2, r6
    58ee:	4629      	mov	r1, r5
    58f0:	4640      	mov	r0, r8
    58f2:	f7ff ff71 	bl	57d8 <__ssputs_r>
    58f6:	3001      	adds	r0, #1
    58f8:	f000 80a3 	beq.w	5a42 <_svfiprintf_r+0x1b2>
    58fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    58fe:	4453      	add	r3, sl
    5900:	9309      	str	r3, [sp, #36]	; 0x24
    5902:	783b      	ldrb	r3, [r7, #0]
    5904:	2b00      	cmp	r3, #0
    5906:	f000 809c 	beq.w	5a42 <_svfiprintf_r+0x1b2>
    590a:	2300      	movs	r3, #0
    590c:	f04f 32ff 	mov.w	r2, #4294967295
    5910:	9304      	str	r3, [sp, #16]
    5912:	9307      	str	r3, [sp, #28]
    5914:	9205      	str	r2, [sp, #20]
    5916:	9306      	str	r3, [sp, #24]
    5918:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    591c:	931a      	str	r3, [sp, #104]	; 0x68
    591e:	2205      	movs	r2, #5
    5920:	7821      	ldrb	r1, [r4, #0]
    5922:	4850      	ldr	r0, [pc, #320]	; (5a64 <_svfiprintf_r+0x1d4>)
    5924:	f000 fa44 	bl	5db0 <memchr>
    5928:	1c67      	adds	r7, r4, #1
    592a:	9b04      	ldr	r3, [sp, #16]
    592c:	b9d8      	cbnz	r0, 5966 <_svfiprintf_r+0xd6>
    592e:	06d9      	lsls	r1, r3, #27
    5930:	bf44      	itt	mi
    5932:	2220      	movmi	r2, #32
    5934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5938:	071a      	lsls	r2, r3, #28
    593a:	bf44      	itt	mi
    593c:	222b      	movmi	r2, #43	; 0x2b
    593e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5942:	7822      	ldrb	r2, [r4, #0]
    5944:	2a2a      	cmp	r2, #42	; 0x2a
    5946:	d016      	beq.n	5976 <_svfiprintf_r+0xe6>
    5948:	9a07      	ldr	r2, [sp, #28]
    594a:	2100      	movs	r1, #0
    594c:	200a      	movs	r0, #10
    594e:	4627      	mov	r7, r4
    5950:	3401      	adds	r4, #1
    5952:	783b      	ldrb	r3, [r7, #0]
    5954:	3b30      	subs	r3, #48	; 0x30
    5956:	2b09      	cmp	r3, #9
    5958:	d951      	bls.n	59fe <_svfiprintf_r+0x16e>
    595a:	b1c9      	cbz	r1, 5990 <_svfiprintf_r+0x100>
    595c:	e011      	b.n	5982 <_svfiprintf_r+0xf2>
    595e:	2b25      	cmp	r3, #37	; 0x25
    5960:	d0c0      	beq.n	58e4 <_svfiprintf_r+0x54>
    5962:	4627      	mov	r7, r4
    5964:	e7b9      	b.n	58da <_svfiprintf_r+0x4a>
    5966:	4a3f      	ldr	r2, [pc, #252]	; (5a64 <_svfiprintf_r+0x1d4>)
    5968:	1a80      	subs	r0, r0, r2
    596a:	fa0b f000 	lsl.w	r0, fp, r0
    596e:	4318      	orrs	r0, r3
    5970:	9004      	str	r0, [sp, #16]
    5972:	463c      	mov	r4, r7
    5974:	e7d3      	b.n	591e <_svfiprintf_r+0x8e>
    5976:	9a03      	ldr	r2, [sp, #12]
    5978:	1d11      	adds	r1, r2, #4
    597a:	6812      	ldr	r2, [r2, #0]
    597c:	9103      	str	r1, [sp, #12]
    597e:	2a00      	cmp	r2, #0
    5980:	db01      	blt.n	5986 <_svfiprintf_r+0xf6>
    5982:	9207      	str	r2, [sp, #28]
    5984:	e004      	b.n	5990 <_svfiprintf_r+0x100>
    5986:	4252      	negs	r2, r2
    5988:	f043 0302 	orr.w	r3, r3, #2
    598c:	9207      	str	r2, [sp, #28]
    598e:	9304      	str	r3, [sp, #16]
    5990:	783b      	ldrb	r3, [r7, #0]
    5992:	2b2e      	cmp	r3, #46	; 0x2e
    5994:	d10e      	bne.n	59b4 <_svfiprintf_r+0x124>
    5996:	787b      	ldrb	r3, [r7, #1]
    5998:	2b2a      	cmp	r3, #42	; 0x2a
    599a:	f107 0101 	add.w	r1, r7, #1
    599e:	d132      	bne.n	5a06 <_svfiprintf_r+0x176>
    59a0:	9b03      	ldr	r3, [sp, #12]
    59a2:	1d1a      	adds	r2, r3, #4
    59a4:	681b      	ldr	r3, [r3, #0]
    59a6:	9203      	str	r2, [sp, #12]
    59a8:	2b00      	cmp	r3, #0
    59aa:	bfb8      	it	lt
    59ac:	f04f 33ff 	movlt.w	r3, #4294967295
    59b0:	3702      	adds	r7, #2
    59b2:	9305      	str	r3, [sp, #20]
    59b4:	4c2c      	ldr	r4, [pc, #176]	; (5a68 <_svfiprintf_r+0x1d8>)
    59b6:	7839      	ldrb	r1, [r7, #0]
    59b8:	2203      	movs	r2, #3
    59ba:	4620      	mov	r0, r4
    59bc:	f000 f9f8 	bl	5db0 <memchr>
    59c0:	b138      	cbz	r0, 59d2 <_svfiprintf_r+0x142>
    59c2:	2340      	movs	r3, #64	; 0x40
    59c4:	1b00      	subs	r0, r0, r4
    59c6:	fa03 f000 	lsl.w	r0, r3, r0
    59ca:	9b04      	ldr	r3, [sp, #16]
    59cc:	4303      	orrs	r3, r0
    59ce:	9304      	str	r3, [sp, #16]
    59d0:	3701      	adds	r7, #1
    59d2:	7839      	ldrb	r1, [r7, #0]
    59d4:	4825      	ldr	r0, [pc, #148]	; (5a6c <_svfiprintf_r+0x1dc>)
    59d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    59da:	2206      	movs	r2, #6
    59dc:	1c7e      	adds	r6, r7, #1
    59de:	f000 f9e7 	bl	5db0 <memchr>
    59e2:	2800      	cmp	r0, #0
    59e4:	d035      	beq.n	5a52 <_svfiprintf_r+0x1c2>
    59e6:	4b22      	ldr	r3, [pc, #136]	; (5a70 <_svfiprintf_r+0x1e0>)
    59e8:	b9fb      	cbnz	r3, 5a2a <_svfiprintf_r+0x19a>
    59ea:	9b03      	ldr	r3, [sp, #12]
    59ec:	3307      	adds	r3, #7
    59ee:	f023 0307 	bic.w	r3, r3, #7
    59f2:	3308      	adds	r3, #8
    59f4:	9303      	str	r3, [sp, #12]
    59f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59f8:	444b      	add	r3, r9
    59fa:	9309      	str	r3, [sp, #36]	; 0x24
    59fc:	e76c      	b.n	58d8 <_svfiprintf_r+0x48>
    59fe:	fb00 3202 	mla	r2, r0, r2, r3
    5a02:	2101      	movs	r1, #1
    5a04:	e7a3      	b.n	594e <_svfiprintf_r+0xbe>
    5a06:	2300      	movs	r3, #0
    5a08:	9305      	str	r3, [sp, #20]
    5a0a:	4618      	mov	r0, r3
    5a0c:	240a      	movs	r4, #10
    5a0e:	460f      	mov	r7, r1
    5a10:	3101      	adds	r1, #1
    5a12:	783a      	ldrb	r2, [r7, #0]
    5a14:	3a30      	subs	r2, #48	; 0x30
    5a16:	2a09      	cmp	r2, #9
    5a18:	d903      	bls.n	5a22 <_svfiprintf_r+0x192>
    5a1a:	2b00      	cmp	r3, #0
    5a1c:	d0ca      	beq.n	59b4 <_svfiprintf_r+0x124>
    5a1e:	9005      	str	r0, [sp, #20]
    5a20:	e7c8      	b.n	59b4 <_svfiprintf_r+0x124>
    5a22:	fb04 2000 	mla	r0, r4, r0, r2
    5a26:	2301      	movs	r3, #1
    5a28:	e7f1      	b.n	5a0e <_svfiprintf_r+0x17e>
    5a2a:	ab03      	add	r3, sp, #12
    5a2c:	9300      	str	r3, [sp, #0]
    5a2e:	462a      	mov	r2, r5
    5a30:	4b10      	ldr	r3, [pc, #64]	; (5a74 <_svfiprintf_r+0x1e4>)
    5a32:	a904      	add	r1, sp, #16
    5a34:	4640      	mov	r0, r8
    5a36:	f3af 8000 	nop.w
    5a3a:	f1b0 3fff 	cmp.w	r0, #4294967295
    5a3e:	4681      	mov	r9, r0
    5a40:	d1d9      	bne.n	59f6 <_svfiprintf_r+0x166>
    5a42:	89ab      	ldrh	r3, [r5, #12]
    5a44:	065b      	lsls	r3, r3, #25
    5a46:	f53f af38 	bmi.w	58ba <_svfiprintf_r+0x2a>
    5a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
    5a4c:	b01d      	add	sp, #116	; 0x74
    5a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a52:	ab03      	add	r3, sp, #12
    5a54:	9300      	str	r3, [sp, #0]
    5a56:	462a      	mov	r2, r5
    5a58:	4b06      	ldr	r3, [pc, #24]	; (5a74 <_svfiprintf_r+0x1e4>)
    5a5a:	a904      	add	r1, sp, #16
    5a5c:	4640      	mov	r0, r8
    5a5e:	f000 f881 	bl	5b64 <_printf_i>
    5a62:	e7ea      	b.n	5a3a <_svfiprintf_r+0x1aa>
    5a64:	0000750c 	.word	0x0000750c
    5a68:	00007512 	.word	0x00007512
    5a6c:	00007516 	.word	0x00007516
    5a70:	00000000 	.word	0x00000000
    5a74:	000057d9 	.word	0x000057d9

00005a78 <_printf_common>:
    5a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a7c:	4691      	mov	r9, r2
    5a7e:	461f      	mov	r7, r3
    5a80:	688a      	ldr	r2, [r1, #8]
    5a82:	690b      	ldr	r3, [r1, #16]
    5a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
    5a88:	4293      	cmp	r3, r2
    5a8a:	bfb8      	it	lt
    5a8c:	4613      	movlt	r3, r2
    5a8e:	f8c9 3000 	str.w	r3, [r9]
    5a92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    5a96:	4606      	mov	r6, r0
    5a98:	460c      	mov	r4, r1
    5a9a:	b112      	cbz	r2, 5aa2 <_printf_common+0x2a>
    5a9c:	3301      	adds	r3, #1
    5a9e:	f8c9 3000 	str.w	r3, [r9]
    5aa2:	6823      	ldr	r3, [r4, #0]
    5aa4:	0699      	lsls	r1, r3, #26
    5aa6:	bf42      	ittt	mi
    5aa8:	f8d9 3000 	ldrmi.w	r3, [r9]
    5aac:	3302      	addmi	r3, #2
    5aae:	f8c9 3000 	strmi.w	r3, [r9]
    5ab2:	6825      	ldr	r5, [r4, #0]
    5ab4:	f015 0506 	ands.w	r5, r5, #6
    5ab8:	d107      	bne.n	5aca <_printf_common+0x52>
    5aba:	f104 0a19 	add.w	sl, r4, #25
    5abe:	68e3      	ldr	r3, [r4, #12]
    5ac0:	f8d9 2000 	ldr.w	r2, [r9]
    5ac4:	1a9b      	subs	r3, r3, r2
    5ac6:	429d      	cmp	r5, r3
    5ac8:	db29      	blt.n	5b1e <_printf_common+0xa6>
    5aca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    5ace:	6822      	ldr	r2, [r4, #0]
    5ad0:	3300      	adds	r3, #0
    5ad2:	bf18      	it	ne
    5ad4:	2301      	movne	r3, #1
    5ad6:	0692      	lsls	r2, r2, #26
    5ad8:	d42e      	bmi.n	5b38 <_printf_common+0xc0>
    5ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
    5ade:	4639      	mov	r1, r7
    5ae0:	4630      	mov	r0, r6
    5ae2:	47c0      	blx	r8
    5ae4:	3001      	adds	r0, #1
    5ae6:	d021      	beq.n	5b2c <_printf_common+0xb4>
    5ae8:	6823      	ldr	r3, [r4, #0]
    5aea:	68e5      	ldr	r5, [r4, #12]
    5aec:	f8d9 2000 	ldr.w	r2, [r9]
    5af0:	f003 0306 	and.w	r3, r3, #6
    5af4:	2b04      	cmp	r3, #4
    5af6:	bf08      	it	eq
    5af8:	1aad      	subeq	r5, r5, r2
    5afa:	68a3      	ldr	r3, [r4, #8]
    5afc:	6922      	ldr	r2, [r4, #16]
    5afe:	bf0c      	ite	eq
    5b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5b04:	2500      	movne	r5, #0
    5b06:	4293      	cmp	r3, r2
    5b08:	bfc4      	itt	gt
    5b0a:	1a9b      	subgt	r3, r3, r2
    5b0c:	18ed      	addgt	r5, r5, r3
    5b0e:	f04f 0900 	mov.w	r9, #0
    5b12:	341a      	adds	r4, #26
    5b14:	454d      	cmp	r5, r9
    5b16:	d11b      	bne.n	5b50 <_printf_common+0xd8>
    5b18:	2000      	movs	r0, #0
    5b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b1e:	2301      	movs	r3, #1
    5b20:	4652      	mov	r2, sl
    5b22:	4639      	mov	r1, r7
    5b24:	4630      	mov	r0, r6
    5b26:	47c0      	blx	r8
    5b28:	3001      	adds	r0, #1
    5b2a:	d103      	bne.n	5b34 <_printf_common+0xbc>
    5b2c:	f04f 30ff 	mov.w	r0, #4294967295
    5b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b34:	3501      	adds	r5, #1
    5b36:	e7c2      	b.n	5abe <_printf_common+0x46>
    5b38:	18e1      	adds	r1, r4, r3
    5b3a:	1c5a      	adds	r2, r3, #1
    5b3c:	2030      	movs	r0, #48	; 0x30
    5b3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    5b42:	4422      	add	r2, r4
    5b44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    5b48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    5b4c:	3302      	adds	r3, #2
    5b4e:	e7c4      	b.n	5ada <_printf_common+0x62>
    5b50:	2301      	movs	r3, #1
    5b52:	4622      	mov	r2, r4
    5b54:	4639      	mov	r1, r7
    5b56:	4630      	mov	r0, r6
    5b58:	47c0      	blx	r8
    5b5a:	3001      	adds	r0, #1
    5b5c:	d0e6      	beq.n	5b2c <_printf_common+0xb4>
    5b5e:	f109 0901 	add.w	r9, r9, #1
    5b62:	e7d7      	b.n	5b14 <_printf_common+0x9c>

00005b64 <_printf_i>:
    5b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5b68:	4617      	mov	r7, r2
    5b6a:	7e0a      	ldrb	r2, [r1, #24]
    5b6c:	b085      	sub	sp, #20
    5b6e:	2a6e      	cmp	r2, #110	; 0x6e
    5b70:	4698      	mov	r8, r3
    5b72:	4606      	mov	r6, r0
    5b74:	460c      	mov	r4, r1
    5b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b78:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    5b7c:	f000 80bc 	beq.w	5cf8 <_printf_i+0x194>
    5b80:	d81a      	bhi.n	5bb8 <_printf_i+0x54>
    5b82:	2a63      	cmp	r2, #99	; 0x63
    5b84:	d02e      	beq.n	5be4 <_printf_i+0x80>
    5b86:	d80a      	bhi.n	5b9e <_printf_i+0x3a>
    5b88:	2a00      	cmp	r2, #0
    5b8a:	f000 80c8 	beq.w	5d1e <_printf_i+0x1ba>
    5b8e:	2a58      	cmp	r2, #88	; 0x58
    5b90:	f000 808a 	beq.w	5ca8 <_printf_i+0x144>
    5b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5b98:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    5b9c:	e02a      	b.n	5bf4 <_printf_i+0x90>
    5b9e:	2a64      	cmp	r2, #100	; 0x64
    5ba0:	d001      	beq.n	5ba6 <_printf_i+0x42>
    5ba2:	2a69      	cmp	r2, #105	; 0x69
    5ba4:	d1f6      	bne.n	5b94 <_printf_i+0x30>
    5ba6:	6821      	ldr	r1, [r4, #0]
    5ba8:	681a      	ldr	r2, [r3, #0]
    5baa:	f011 0f80 	tst.w	r1, #128	; 0x80
    5bae:	d023      	beq.n	5bf8 <_printf_i+0x94>
    5bb0:	1d11      	adds	r1, r2, #4
    5bb2:	6019      	str	r1, [r3, #0]
    5bb4:	6813      	ldr	r3, [r2, #0]
    5bb6:	e027      	b.n	5c08 <_printf_i+0xa4>
    5bb8:	2a73      	cmp	r2, #115	; 0x73
    5bba:	f000 80b4 	beq.w	5d26 <_printf_i+0x1c2>
    5bbe:	d808      	bhi.n	5bd2 <_printf_i+0x6e>
    5bc0:	2a6f      	cmp	r2, #111	; 0x6f
    5bc2:	d02a      	beq.n	5c1a <_printf_i+0xb6>
    5bc4:	2a70      	cmp	r2, #112	; 0x70
    5bc6:	d1e5      	bne.n	5b94 <_printf_i+0x30>
    5bc8:	680a      	ldr	r2, [r1, #0]
    5bca:	f042 0220 	orr.w	r2, r2, #32
    5bce:	600a      	str	r2, [r1, #0]
    5bd0:	e003      	b.n	5bda <_printf_i+0x76>
    5bd2:	2a75      	cmp	r2, #117	; 0x75
    5bd4:	d021      	beq.n	5c1a <_printf_i+0xb6>
    5bd6:	2a78      	cmp	r2, #120	; 0x78
    5bd8:	d1dc      	bne.n	5b94 <_printf_i+0x30>
    5bda:	2278      	movs	r2, #120	; 0x78
    5bdc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    5be0:	496e      	ldr	r1, [pc, #440]	; (5d9c <_printf_i+0x238>)
    5be2:	e064      	b.n	5cae <_printf_i+0x14a>
    5be4:	681a      	ldr	r2, [r3, #0]
    5be6:	f101 0542 	add.w	r5, r1, #66	; 0x42
    5bea:	1d11      	adds	r1, r2, #4
    5bec:	6019      	str	r1, [r3, #0]
    5bee:	6813      	ldr	r3, [r2, #0]
    5bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5bf4:	2301      	movs	r3, #1
    5bf6:	e0a3      	b.n	5d40 <_printf_i+0x1dc>
    5bf8:	f011 0f40 	tst.w	r1, #64	; 0x40
    5bfc:	f102 0104 	add.w	r1, r2, #4
    5c00:	6019      	str	r1, [r3, #0]
    5c02:	d0d7      	beq.n	5bb4 <_printf_i+0x50>
    5c04:	f9b2 3000 	ldrsh.w	r3, [r2]
    5c08:	2b00      	cmp	r3, #0
    5c0a:	da03      	bge.n	5c14 <_printf_i+0xb0>
    5c0c:	222d      	movs	r2, #45	; 0x2d
    5c0e:	425b      	negs	r3, r3
    5c10:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    5c14:	4962      	ldr	r1, [pc, #392]	; (5da0 <_printf_i+0x23c>)
    5c16:	220a      	movs	r2, #10
    5c18:	e017      	b.n	5c4a <_printf_i+0xe6>
    5c1a:	6820      	ldr	r0, [r4, #0]
    5c1c:	6819      	ldr	r1, [r3, #0]
    5c1e:	f010 0f80 	tst.w	r0, #128	; 0x80
    5c22:	d003      	beq.n	5c2c <_printf_i+0xc8>
    5c24:	1d08      	adds	r0, r1, #4
    5c26:	6018      	str	r0, [r3, #0]
    5c28:	680b      	ldr	r3, [r1, #0]
    5c2a:	e006      	b.n	5c3a <_printf_i+0xd6>
    5c2c:	f010 0f40 	tst.w	r0, #64	; 0x40
    5c30:	f101 0004 	add.w	r0, r1, #4
    5c34:	6018      	str	r0, [r3, #0]
    5c36:	d0f7      	beq.n	5c28 <_printf_i+0xc4>
    5c38:	880b      	ldrh	r3, [r1, #0]
    5c3a:	4959      	ldr	r1, [pc, #356]	; (5da0 <_printf_i+0x23c>)
    5c3c:	2a6f      	cmp	r2, #111	; 0x6f
    5c3e:	bf14      	ite	ne
    5c40:	220a      	movne	r2, #10
    5c42:	2208      	moveq	r2, #8
    5c44:	2000      	movs	r0, #0
    5c46:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5c4a:	6865      	ldr	r5, [r4, #4]
    5c4c:	60a5      	str	r5, [r4, #8]
    5c4e:	2d00      	cmp	r5, #0
    5c50:	f2c0 809c 	blt.w	5d8c <_printf_i+0x228>
    5c54:	6820      	ldr	r0, [r4, #0]
    5c56:	f020 0004 	bic.w	r0, r0, #4
    5c5a:	6020      	str	r0, [r4, #0]
    5c5c:	2b00      	cmp	r3, #0
    5c5e:	d13f      	bne.n	5ce0 <_printf_i+0x17c>
    5c60:	2d00      	cmp	r5, #0
    5c62:	f040 8095 	bne.w	5d90 <_printf_i+0x22c>
    5c66:	4675      	mov	r5, lr
    5c68:	2a08      	cmp	r2, #8
    5c6a:	d10b      	bne.n	5c84 <_printf_i+0x120>
    5c6c:	6823      	ldr	r3, [r4, #0]
    5c6e:	07da      	lsls	r2, r3, #31
    5c70:	d508      	bpl.n	5c84 <_printf_i+0x120>
    5c72:	6923      	ldr	r3, [r4, #16]
    5c74:	6862      	ldr	r2, [r4, #4]
    5c76:	429a      	cmp	r2, r3
    5c78:	bfde      	ittt	le
    5c7a:	2330      	movle	r3, #48	; 0x30
    5c7c:	f805 3c01 	strble.w	r3, [r5, #-1]
    5c80:	f105 35ff 	addle.w	r5, r5, #4294967295
    5c84:	ebae 0305 	sub.w	r3, lr, r5
    5c88:	6123      	str	r3, [r4, #16]
    5c8a:	f8cd 8000 	str.w	r8, [sp]
    5c8e:	463b      	mov	r3, r7
    5c90:	aa03      	add	r2, sp, #12
    5c92:	4621      	mov	r1, r4
    5c94:	4630      	mov	r0, r6
    5c96:	f7ff feef 	bl	5a78 <_printf_common>
    5c9a:	3001      	adds	r0, #1
    5c9c:	d155      	bne.n	5d4a <_printf_i+0x1e6>
    5c9e:	f04f 30ff 	mov.w	r0, #4294967295
    5ca2:	b005      	add	sp, #20
    5ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5ca8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    5cac:	493c      	ldr	r1, [pc, #240]	; (5da0 <_printf_i+0x23c>)
    5cae:	6822      	ldr	r2, [r4, #0]
    5cb0:	6818      	ldr	r0, [r3, #0]
    5cb2:	f012 0f80 	tst.w	r2, #128	; 0x80
    5cb6:	f100 0504 	add.w	r5, r0, #4
    5cba:	601d      	str	r5, [r3, #0]
    5cbc:	d001      	beq.n	5cc2 <_printf_i+0x15e>
    5cbe:	6803      	ldr	r3, [r0, #0]
    5cc0:	e002      	b.n	5cc8 <_printf_i+0x164>
    5cc2:	0655      	lsls	r5, r2, #25
    5cc4:	d5fb      	bpl.n	5cbe <_printf_i+0x15a>
    5cc6:	8803      	ldrh	r3, [r0, #0]
    5cc8:	07d0      	lsls	r0, r2, #31
    5cca:	bf44      	itt	mi
    5ccc:	f042 0220 	orrmi.w	r2, r2, #32
    5cd0:	6022      	strmi	r2, [r4, #0]
    5cd2:	b91b      	cbnz	r3, 5cdc <_printf_i+0x178>
    5cd4:	6822      	ldr	r2, [r4, #0]
    5cd6:	f022 0220 	bic.w	r2, r2, #32
    5cda:	6022      	str	r2, [r4, #0]
    5cdc:	2210      	movs	r2, #16
    5cde:	e7b1      	b.n	5c44 <_printf_i+0xe0>
    5ce0:	4675      	mov	r5, lr
    5ce2:	fbb3 f0f2 	udiv	r0, r3, r2
    5ce6:	fb02 3310 	mls	r3, r2, r0, r3
    5cea:	5ccb      	ldrb	r3, [r1, r3]
    5cec:	f805 3d01 	strb.w	r3, [r5, #-1]!
    5cf0:	4603      	mov	r3, r0
    5cf2:	2800      	cmp	r0, #0
    5cf4:	d1f5      	bne.n	5ce2 <_printf_i+0x17e>
    5cf6:	e7b7      	b.n	5c68 <_printf_i+0x104>
    5cf8:	6808      	ldr	r0, [r1, #0]
    5cfa:	681a      	ldr	r2, [r3, #0]
    5cfc:	6949      	ldr	r1, [r1, #20]
    5cfe:	f010 0f80 	tst.w	r0, #128	; 0x80
    5d02:	d004      	beq.n	5d0e <_printf_i+0x1aa>
    5d04:	1d10      	adds	r0, r2, #4
    5d06:	6018      	str	r0, [r3, #0]
    5d08:	6813      	ldr	r3, [r2, #0]
    5d0a:	6019      	str	r1, [r3, #0]
    5d0c:	e007      	b.n	5d1e <_printf_i+0x1ba>
    5d0e:	f010 0f40 	tst.w	r0, #64	; 0x40
    5d12:	f102 0004 	add.w	r0, r2, #4
    5d16:	6018      	str	r0, [r3, #0]
    5d18:	6813      	ldr	r3, [r2, #0]
    5d1a:	d0f6      	beq.n	5d0a <_printf_i+0x1a6>
    5d1c:	8019      	strh	r1, [r3, #0]
    5d1e:	2300      	movs	r3, #0
    5d20:	6123      	str	r3, [r4, #16]
    5d22:	4675      	mov	r5, lr
    5d24:	e7b1      	b.n	5c8a <_printf_i+0x126>
    5d26:	681a      	ldr	r2, [r3, #0]
    5d28:	1d11      	adds	r1, r2, #4
    5d2a:	6019      	str	r1, [r3, #0]
    5d2c:	6815      	ldr	r5, [r2, #0]
    5d2e:	6862      	ldr	r2, [r4, #4]
    5d30:	2100      	movs	r1, #0
    5d32:	4628      	mov	r0, r5
    5d34:	f000 f83c 	bl	5db0 <memchr>
    5d38:	b108      	cbz	r0, 5d3e <_printf_i+0x1da>
    5d3a:	1b40      	subs	r0, r0, r5
    5d3c:	6060      	str	r0, [r4, #4]
    5d3e:	6863      	ldr	r3, [r4, #4]
    5d40:	6123      	str	r3, [r4, #16]
    5d42:	2300      	movs	r3, #0
    5d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    5d48:	e79f      	b.n	5c8a <_printf_i+0x126>
    5d4a:	6923      	ldr	r3, [r4, #16]
    5d4c:	462a      	mov	r2, r5
    5d4e:	4639      	mov	r1, r7
    5d50:	4630      	mov	r0, r6
    5d52:	47c0      	blx	r8
    5d54:	3001      	adds	r0, #1
    5d56:	d0a2      	beq.n	5c9e <_printf_i+0x13a>
    5d58:	6823      	ldr	r3, [r4, #0]
    5d5a:	079b      	lsls	r3, r3, #30
    5d5c:	d507      	bpl.n	5d6e <_printf_i+0x20a>
    5d5e:	2500      	movs	r5, #0
    5d60:	f104 0919 	add.w	r9, r4, #25
    5d64:	68e3      	ldr	r3, [r4, #12]
    5d66:	9a03      	ldr	r2, [sp, #12]
    5d68:	1a9b      	subs	r3, r3, r2
    5d6a:	429d      	cmp	r5, r3
    5d6c:	db05      	blt.n	5d7a <_printf_i+0x216>
    5d6e:	68e0      	ldr	r0, [r4, #12]
    5d70:	9b03      	ldr	r3, [sp, #12]
    5d72:	4298      	cmp	r0, r3
    5d74:	bfb8      	it	lt
    5d76:	4618      	movlt	r0, r3
    5d78:	e793      	b.n	5ca2 <_printf_i+0x13e>
    5d7a:	2301      	movs	r3, #1
    5d7c:	464a      	mov	r2, r9
    5d7e:	4639      	mov	r1, r7
    5d80:	4630      	mov	r0, r6
    5d82:	47c0      	blx	r8
    5d84:	3001      	adds	r0, #1
    5d86:	d08a      	beq.n	5c9e <_printf_i+0x13a>
    5d88:	3501      	adds	r5, #1
    5d8a:	e7eb      	b.n	5d64 <_printf_i+0x200>
    5d8c:	2b00      	cmp	r3, #0
    5d8e:	d1a7      	bne.n	5ce0 <_printf_i+0x17c>
    5d90:	780b      	ldrb	r3, [r1, #0]
    5d92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5d96:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5d9a:	e765      	b.n	5c68 <_printf_i+0x104>
    5d9c:	0000752e 	.word	0x0000752e
    5da0:	0000751d 	.word	0x0000751d
	...

00005db0 <memchr>:
    5db0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5db4:	2a10      	cmp	r2, #16
    5db6:	db2b      	blt.n	5e10 <memchr+0x60>
    5db8:	f010 0f07 	tst.w	r0, #7
    5dbc:	d008      	beq.n	5dd0 <memchr+0x20>
    5dbe:	f810 3b01 	ldrb.w	r3, [r0], #1
    5dc2:	3a01      	subs	r2, #1
    5dc4:	428b      	cmp	r3, r1
    5dc6:	d02d      	beq.n	5e24 <memchr+0x74>
    5dc8:	f010 0f07 	tst.w	r0, #7
    5dcc:	b342      	cbz	r2, 5e20 <memchr+0x70>
    5dce:	d1f6      	bne.n	5dbe <memchr+0xe>
    5dd0:	b4f0      	push	{r4, r5, r6, r7}
    5dd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5dd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    5dda:	f022 0407 	bic.w	r4, r2, #7
    5dde:	f07f 0700 	mvns.w	r7, #0
    5de2:	2300      	movs	r3, #0
    5de4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5de8:	3c08      	subs	r4, #8
    5dea:	ea85 0501 	eor.w	r5, r5, r1
    5dee:	ea86 0601 	eor.w	r6, r6, r1
    5df2:	fa85 f547 	uadd8	r5, r5, r7
    5df6:	faa3 f587 	sel	r5, r3, r7
    5dfa:	fa86 f647 	uadd8	r6, r6, r7
    5dfe:	faa5 f687 	sel	r6, r5, r7
    5e02:	b98e      	cbnz	r6, 5e28 <memchr+0x78>
    5e04:	d1ee      	bne.n	5de4 <memchr+0x34>
    5e06:	bcf0      	pop	{r4, r5, r6, r7}
    5e08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5e0c:	f002 0207 	and.w	r2, r2, #7
    5e10:	b132      	cbz	r2, 5e20 <memchr+0x70>
    5e12:	f810 3b01 	ldrb.w	r3, [r0], #1
    5e16:	3a01      	subs	r2, #1
    5e18:	ea83 0301 	eor.w	r3, r3, r1
    5e1c:	b113      	cbz	r3, 5e24 <memchr+0x74>
    5e1e:	d1f8      	bne.n	5e12 <memchr+0x62>
    5e20:	2000      	movs	r0, #0
    5e22:	4770      	bx	lr
    5e24:	3801      	subs	r0, #1
    5e26:	4770      	bx	lr
    5e28:	2d00      	cmp	r5, #0
    5e2a:	bf06      	itte	eq
    5e2c:	4635      	moveq	r5, r6
    5e2e:	3803      	subeq	r0, #3
    5e30:	3807      	subne	r0, #7
    5e32:	f015 0f01 	tst.w	r5, #1
    5e36:	d107      	bne.n	5e48 <memchr+0x98>
    5e38:	3001      	adds	r0, #1
    5e3a:	f415 7f80 	tst.w	r5, #256	; 0x100
    5e3e:	bf02      	ittt	eq
    5e40:	3001      	addeq	r0, #1
    5e42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5e46:	3001      	addeq	r0, #1
    5e48:	bcf0      	pop	{r4, r5, r6, r7}
    5e4a:	3801      	subs	r0, #1
    5e4c:	4770      	bx	lr
    5e4e:	bf00      	nop

00005e50 <_realloc_r>:
    5e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e52:	4607      	mov	r7, r0
    5e54:	4614      	mov	r4, r2
    5e56:	460e      	mov	r6, r1
    5e58:	b921      	cbnz	r1, 5e64 <_realloc_r+0x14>
    5e5a:	4611      	mov	r1, r2
    5e5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5e60:	f7ff bc04 	b.w	566c <_malloc_r>
    5e64:	b922      	cbnz	r2, 5e70 <_realloc_r+0x20>
    5e66:	f7ff fbb3 	bl	55d0 <_free_r>
    5e6a:	4625      	mov	r5, r4
    5e6c:	4628      	mov	r0, r5
    5e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e70:	f000 f814 	bl	5e9c <_malloc_usable_size_r>
    5e74:	4284      	cmp	r4, r0
    5e76:	d90f      	bls.n	5e98 <_realloc_r+0x48>
    5e78:	4621      	mov	r1, r4
    5e7a:	4638      	mov	r0, r7
    5e7c:	f7ff fbf6 	bl	566c <_malloc_r>
    5e80:	4605      	mov	r5, r0
    5e82:	2800      	cmp	r0, #0
    5e84:	d0f2      	beq.n	5e6c <_realloc_r+0x1c>
    5e86:	4631      	mov	r1, r6
    5e88:	4622      	mov	r2, r4
    5e8a:	f7ff fb73 	bl	5574 <memcpy>
    5e8e:	4631      	mov	r1, r6
    5e90:	4638      	mov	r0, r7
    5e92:	f7ff fb9d 	bl	55d0 <_free_r>
    5e96:	e7e9      	b.n	5e6c <_realloc_r+0x1c>
    5e98:	4635      	mov	r5, r6
    5e9a:	e7e7      	b.n	5e6c <_realloc_r+0x1c>

00005e9c <_malloc_usable_size_r>:
    5e9c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    5ea0:	2800      	cmp	r0, #0
    5ea2:	f1a0 0004 	sub.w	r0, r0, #4
    5ea6:	bfbc      	itt	lt
    5ea8:	580b      	ldrlt	r3, [r1, r0]
    5eaa:	18c0      	addlt	r0, r0, r3
    5eac:	4770      	bx	lr
    5eae:	0000      	movs	r0, r0
    5eb0:	2a2a2a2a 	.word	0x2a2a2a2a
    5eb4:	2a2a2a2a 	.word	0x2a2a2a2a
    5eb8:	2a2a2a2a 	.word	0x2a2a2a2a
    5ebc:	2a2a2a2a 	.word	0x2a2a2a2a
    5ec0:	2a2a2a2a 	.word	0x2a2a2a2a
    5ec4:	2a2a2a2a 	.word	0x2a2a2a2a
    5ec8:	2a2a2a2a 	.word	0x2a2a2a2a
    5ecc:	2a2a2a2a 	.word	0x2a2a2a2a
    5ed0:	2a2a2a2a 	.word	0x2a2a2a2a
    5ed4:	2a2a2a2a 	.word	0x2a2a2a2a
    5ed8:	2a2a2a2a 	.word	0x2a2a2a2a
    5edc:	2a2a2a2a 	.word	0x2a2a2a2a
    5ee0:	2a2a2a2a 	.word	0x2a2a2a2a
    5ee4:	2a2a2a2a 	.word	0x2a2a2a2a
    5ee8:	00002a2a 	.word	0x00002a2a
    5eec:	2a2a2a2a 	.word	0x2a2a2a2a
    5ef0:	2a2a2a2a 	.word	0x2a2a2a2a
    5ef4:	2a2a2a2a 	.word	0x2a2a2a2a
    5ef8:	532a2a2a 	.word	0x532a2a2a
    5efc:	4b434154 	.word	0x4b434154
    5f00:	45564f20 	.word	0x45564f20
    5f04:	4f4c4652 	.word	0x4f4c4652
    5f08:	45442057 	.word	0x45442057
    5f0c:	54434554 	.word	0x54434554
    5f10:	2a2a4445 	.word	0x2a2a4445
    5f14:	2a2a2a2a 	.word	0x2a2a2a2a
    5f18:	2a2a2a2a 	.word	0x2a2a2a2a
    5f1c:	2a2a2a2a 	.word	0x2a2a2a2a
    5f20:	2a2a2a2a 	.word	0x2a2a2a2a
    5f24:	00002a2a 	.word	0x00002a2a
    5f28:	6b736154 	.word	0x6b736154
    5f2c:	6e614820 	.word	0x6e614820
    5f30:	20656c64 	.word	0x20656c64
    5f34:	6425202d 	.word	0x6425202d
    5f38:	00000a0d 	.word	0x00000a0d
    5f3c:	6e6e7552 	.word	0x6e6e7552
    5f40:	20676e69 	.word	0x20676e69
    5f44:	70736944 	.word	0x70736944
    5f48:	68637461 	.word	0x68637461
    5f4c:	73615420 	.word	0x73615420
    5f50:	7573206b 	.word	0x7573206b
    5f54:	73656363 	.word	0x73656363
    5f58:	6c756673 	.word	0x6c756673
    5f5c:	0000796c 	.word	0x0000796c

00005f60 <ModemCmdData>:
    5f60:	00000200 000064fc 00000000 00000d21     .....d......!...
    5f70:	00000000 00000001 00006500 00020003     .........e......
    5f80:	00000d21 00000009 00000002 00006504     !............e..
    5f90:	000f0008 00000d21 0000001b 00000003     ....!...........
    5fa0:	00006510 000e000c 00000d21 0000001e     .e......!.......
    5fb0:	00000004 00006520 000c0008 00000d21     .... e......!...
    5fc0:	00000018 00000005 0000652c 00080005     ........,e......
    5fd0:	00000d21 00000011 00000006 00006538     !...........8e..
    5fe0:	000b000a 00000d21 00000019 00000007     ....!...........
    5ff0:	00006544 0015000a 00000d21 00000023     De......!...#...
    6000:	00000008 00006550 00020005 00000d21     ....Pe......!...
    6010:	0000000b 00000109 00006558 000c0027     ........Xe..'...
    6020:	00000d21 00000037 0000010a 00006580     !...7........e..
    6030:	00020012 00000d21 00000018 0000010b     ....!...........
    6040:	00006594 00020012 00000d21 00000018     .e......!.......
    6050:	0000010c 000065a8 00020012 00000d21     .....e......!...
    6060:	00000018 0000010d 000065bc 00020012     .........e......
    6070:	00000d21 00000018 0000010e 000065d0     !............e..
    6080:	00020012 00000d21 00000018 0000010f     ....!...........
    6090:	000065e4 00020012 00000d21 00000018     .e......!.......
    60a0:	00000110 000065f8 00020012 00000d21     .....e......!...
    60b0:	00000018 00000111 0000660c 00020012     .........f......
    60c0:	00000d21 00000018 00000112 00006620     !........... f..
    60d0:	00020012 00000d21 00000018 00000113     ....!...........
    60e0:	00006634 00020013 00000d21 00000019     4f......!.......
    60f0:	00000114 00006648 0002001f 00000d21     ....Hf......!...
    6100:	00000025 00000115 00006668 00020023     %.......hf..#...
    6110:	00000d21 00000029 00000116 0000668c     !...)........f..
    6120:	0002001a 00000d21 00000020 00000117     ....!... .......
    6130:	20000000 00070011 00000d21 0000001c     ... ....!.......
    6140:	00000118 200001ac 00bf003a 00000d21     ....... :...!...
    6150:	000000fd 00000119 000066a8 00020010     .........f......
    6160:	00000d21 00000016 0000011a 000066bc     !............f..
    6170:	00020010 00000d21 00000016 0000011b     ....!...........
    6180:	000066d0 0002000b 00000d21 00000011     .f......!.......
	...
    6410:	73736553 206e6f69 2d204449 00003120     Session ID - 1..
    6420:	73736553 206e6f69 2d204449 00003220     Session ID - 2..
    6430:	73736553 206e6f69 2d204449 00003320     Session ID - 3..
    6440:	73736553 206e6f69 2d204449 00003420     Session ID - 4..
    6450:	73736553 206e6f69 2d204449 00003520     Session ID - 5..
    6460:	73736553 206e6f69 2d204449 00003620     Session ID - 6..
    6470:	73736553 206e6f69 2d204449 00003720     Session ID - 7..
    6480:	73736553 206e6f69 2d204449 00003820     Session ID - 8..
    6490:	73736553 206e6f69 76204449 65756c61     Session ID value
    64a0:	63786520 73646565 65687420 78616d20      exceeds the max
    64b0:	6c617620 00006575 5454484b 45482050      value..KHTTP HE
    64c0:	52454441 72745320 20676e69 00207369     ADER String is .
    64d0:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    64e0:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    64f0:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    6500:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    6510:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    6520:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    6530:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    6540:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    6550:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    6560:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    6570:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    6580:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    6590:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    65a0:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    65b0:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    65c0:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    65d0:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    65e0:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    65f0:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    6600:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    6610:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    6620:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    6630:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6640:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    6650:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    6660:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    6670:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    6680:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    6690:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    66a0:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    66b0:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    66c0:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    66d0:	432b5441 54544147 000d303d 6f727245     AT+CGATT=0..Erro
    66e0:	48203a72 20706165 6f6c6c61 69746163     r: Heap allocati
    66f0:	66206e6f 7020726f 65737261 74616420     on for parse dat
    6700:	75622061 72656666 69616620 0064656c     a buffer failed.
    6710:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    6720:	76206f74 66697265 68742079 6f632065     to verify the co
    6730:	6e616d6d 74732064 676e6972 72756420     mmand string dur
    6740:	20676e69 73726170 00676e69 6f727245     ing parsing.Erro
    6750:	4e203a72 6120746f 20656c62 72206f74     r: Not able to r
    6760:	20646165 61746164 6f726620 6572206d     ead data from re
    6770:	76696563 69722065 6220676e 65666675     ceive ring buffe
    6780:	75642072 676e6972 72617020 00726573     r during parser.
    6790:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    67a0:	69746163 66206e6f 7220726f 6f707365     cation for respo
    67b0:	2065736e 61746164 66756220 20726566     nse data buffer 
    67c0:	6c696166 00006465 65707845 64657463     failed..Expected
    67d0:	646f6d20 72206d65 6f707365 2065736e      modem response 
    67e0:	6e207369 7220746f 69656365 00646576     is not received.
    67f0:	52206f4e 6f707365 2065736e 6d6f7266     No Response from
    6800:	62655720 76655320 2e2e7265 6f502e2e      Web Sever....Po
    6810:	6e697473 61642067 74206174 6573206f     sting data to se
    6820:	20726576 66207369 656c6961 00000064     ver is failed...
    6830:	66726550 696d726f 7420676e 45206568     Performing the E
    6840:	726f7272 63655220 7265766f 72502079     rror Recovery Pr
    6850:	6465636f 73657275 00002e2e 736f6c43     ocedures....Clos
    6860:	61206465 5220646e 65706f65 2064656e     ed and Reopened 
    6870:	20656874 73736573 2e6e6f69 2e2e2e2e     the session.....
    6880:	0000002e 6f747541 63657220 7265766f     ....Auto recover
    6890:	6f632079 656c706d 2e646574 2e2e2e2e     y completed.....
    68a0:	0000002e 6f727245 203a2072 636f7250     ....Error : Proc
    68b0:	20737365 70736572 65736e6f 69616620     ess response fai
    68c0:	2064656c 614c202d 43207473 616d6d6f     led - Last Comma
    68d0:	4920646e 6c61766e 00006469 746e6553     nd Invalid..Sent
    68e0:	65687420 73655320 6e6f6973 6f6c4320      the Session Clo
    68f0:	72206573 65757165 74207473 7854206f     se request to Tx
    6900:	73615420 0000006b 6c696146 74206465      Task...Failed t
    6910:	6573206f 7420746e 53206568 69737365     o sent the Sessi
    6920:	43206e6f 65736f6c 71657220 74736575     on Close request
    6930:	206f7420 54207854 006b7361 4d206f4e      to Tx Task.No M
    6940:	2065726f 69746341 43206576 656e6e6f     ore Active Conne
    6950:	6f697463 7420736e 6c63206f 0065736f     ctions to close.
    6960:	65636552 64657669 63206120 656e6e6f     Received a conne
    6970:	6f697463 6572206e 6e6f7073 69206573     ction response i
    6980:	5852206e 646f4d20 00000065 6c696146     n RX Mode...Fail
    6990:	74206465 6572206f 76696563 6f632065     ed to receive co
    69a0:	63656e6e 6e6f6974 73657220 736e6f70     nnection respons
    69b0:	6e692065 20585220 65646f6d 00000000     e in RX mode....
    69c0:	45444f4d 4144204d 55204154 20545241     MODEM DATA UART 
    69d0:	52455328 334d4f43 6e692029 61697469     (SERCOM3) initia
    69e0:	657a696c 00000064 43524553 20334d4f     lized...SERCOM3 
    69f0:	4f495250 59544952 00000000 6c696146     PRIORITY....Fail
    6a00:	74206465 6e69206f 61697469 657a696c     ed to initialize
    6a10:	65687420 444f4d20 44204d45 20415441      the MODEM DATA 
    6a20:	54524155 00000000 746e6553 65687420     UART....Sent the
    6a30:	61694420 61642067 74206174 7854206f      Diag data to Tx
    6a40:	73615420 0000006b 6c696146 74206465      Task...Failed t
    6a50:	6573206f 7420746e 44206568 20676169     o sent the Diag 
    6a60:	61746164 206f7420 54207854 006b7361     data to Tx Task.
    6a70:	6e6e7552 20676e69 65646f4d 6944206d     Running Modem Di
    6a80:	54206761 206b7361 63637573 66737365     ag Task successf
    6a90:	796c6c75 00000000 72746552 65766569     ully....Retrieve
    6aa0:	68742064 6f4d2065 206d6564 49454d49     d the Modem IMEI
    6ab0:	6d754e20 00726562 72746552 65766569      Number.Retrieve
    6ac0:	68742064 6f4d2065 206d6564 69726573     d the Modem seri
    6ad0:	4e206c61 65626d75 00000072 6e6e7552     al Number...Runn
    6ae0:	20676e69 65646f4d 7250206d 7365636f     ing Modem Proces
    6af0:	61542073 73206b73 65636375 75667373     s Task successfu
    6b00:	00796c6c 63637553 66737365 796c6c75     lly.Successfully
    6b10:	736f7020 20646574 6e6e6f63 69746365      posted connecti
    6b20:	52206e6f 6f707365 2065736e 51206f74     on Response to Q
    6b30:	65756575 00000000 6c696146 74206465     ueue....Failed t
    6b40:	6f70206f 74207473 63206568 656e6e6f     o post the conne
    6b50:	6f697463 6552206e 6e6f7073 74206573     ction Response t
    6b60:	7551206f 00657565 6f727245 203a2072     o Queue.Error : 
    6b70:	6d6d6f43 20646e61 70736552 65736e6f     Command Response
    6b80:	65755120 69206575 6f6e2073 6d652074      Queue is not em
    6b90:	00797470 4f525245 52203a52 69656365     pty.ERROR: Recei
    6ba0:	20646576 65206e61 7974706d 73657220     ved an empty res
    6bb0:	736e6f70 74732065 676e6972 206e6920     ponse string in 
    6bc0:	6d6d6f63 20646e61 70736572 65736e6f     command response
    6bd0:	6e616820 72656c64 00000000 6c430a0d      handler......Cl
    6be0:	6465736f 206e6120 69746361 63206576     osed an active c
    6bf0:	656e6e6f 6f697463 0000006e 72656854     onnection...Ther
    6c00:	73692065 206f6e20 6e6e6f63 69746365     e is no connecti
    6c10:	65206e6f 62617473 6873696c 77206465     on established w
    6c20:	20687469 73696874 73657320 6e6f6973     ith this session
    6c30:	2e444920 00002e2e 63656843 676e696b      ID.....Checking
    6c40:	726f6620 206e6120 69746361 63206576      for an active c
    6c50:	656e6e6f 6f697463 6977206e 6e206874     onnection with n
    6c60:	20747865 73736573 206e6f69 2e2e4449     ext session ID..
    6c70:	00000a2e 4b206e49 54544150 204e5245     ....In KPATTERN 
    6c80:	646e6168 0072656c 4b206e49 43584e43     handler.In KCNXC
    6c90:	68204746 6c646e61 00007265 4b206e49     FG handler..In K
    6ca0:	54584e43 52454d49 6e616820 72656c64     CNXTIMER handler
    6cb0:	00000000 4b206e49 50545448 20474643     ....In KHTTPCFG 
    6cc0:	646e6168 0072656c 4b206e49 50545448     handler.In KHTTP
    6cd0:	41454820 20524544 646e6168 0072656c      HEADER handler.
    6ce0:	4e4e4f43 00544345 64616548 52207265     CONNECT.Header R
    6cf0:	6f707365 2065736e 00006b4f 64616548     esponse Ok..Head
    6d00:	52207265 6f707365 2065736e 20746f4e     er Response Not 
    6d10:	00006b4f 000a0a0d 54206e49 494d5245     Ok......In TERMI
    6d20:	4554414e 41454820 20524544 646e6168     NATE HEADER hand
    6d30:	0072656c 69746f4e 61636966 6e6f6974     ler.Notification
    6d40:	63655220 65766965 6f742064 20785220      Received to Rx 
    6d50:	6b736154 6f726620 5349206d 00000052     Task from ISR...
    6d60:	63637553 66737365 796c6c75 72615020     Successfully Par
    6d70:	20646573 20656874 7473616c 6d6f6320     sed the last com
    6d80:	646e616d 00000000 4f525245 43203a52     mand....ERROR: C
    6d90:	616d6d6f 5020646e 69737261 4620676e     ommand Parsing F
    6da0:	656c6961 00000064 6b736154 00444920     ailed...Task ID.
    6db0:	6e617254 74696d73 20646574 6f632061     Transmitted a co
    6dc0:	6e616d6d 6f742064 646f4d20 00006d65     mmand to Modem..
    6dd0:	73207854 61697265 6544206c 20677562     Tx serial Debug 
    6de0:	656e6f44 00000a0d 44207852 0d656e6f     Done....Rx Done.
    6df0:	0000000a 25207325 00000073 2d207325     ....%s %s...%s -
    6e00:	20642520 00000a0d 682f2e2e 692f6c61      %d ....../hal/i
    6e10:	756c636e 682f6564 775f6c61 682e7464     nclude/hal_wdt.h
    6e20:	00000000 20544457 74696e49 696c6169     ....WDT Initiali
    6e30:	00646573 20544457 6c696146 74206465     sed.WDT Failed t
    6e40:	6e69206f 61697469 657a696c 00000000     o initialize....
    6e50:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
    6e60:	79735f63 632e636e 00000000 682f2e2e     c_sync.c....../h
    6e70:	732f6c61 682f6372 615f6c61 735f6364     al/src/hal_adc_s
    6e80:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    6e90:	682f6372 645f6c61 735f6361 2e636e79     rc/hal_dac_sync.
    6ea0:	00000063 682f2e2e 732f6c61 682f6372     c...../hal/src/h
    6eb0:	665f6c61 6873616c 0000632e 682f2e2e     al_flash.c..../h
    6ec0:	732f6c61 682f6372 705f6c61 632e6d77     al/src/hal_pwm.c
    6ed0:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    6ee0:	745f6c61 72656d69 0000632e 682f2e2e     al_timer.c..../h
    6ef0:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    6f00:	6c5f736c 2e747369 00000063 682f2e2e     ls_list.c...../h
    6f10:	752f6c61 736c6974 6372732f 6974752f     al/utils/src/uti
    6f20:	725f736c 62676e69 65666675 00632e72     ls_ringbuffer.c.
    6f30:	682f2e2e 612f6c70 70682f63 63615f6c     ../hpl/ac/hpl_ac
    6f40:	0000632e                                .c..

00006f44 <_adcs>:
    6f44:	00c00000 00830002 00001900 00000000     ................
    6f54:	00000000 00010001 00000000 00000000     ................
	...
    6f70:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    6f80:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    6f90:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00006fa0 <_cfgs>:
	...

000070a0 <user_mux_confs>:
	...

000070e4 <channel_confs>:
	...

00007124 <interrupt_cfg>:
	...
    71a4:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    71b4:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    71c4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    71d4:	43000000 43000400                       ...C...C

000071dc <_usarts>:
    71dc:	00000003 40200004 00030000 00700002     ...... @......p.
    71ec:	0000f62b 00000000 00000004 40300184     +.............0@
    71fc:	00030300 00700002 0000ff2e 00000000     ......p.........
    720c:	00000005 40300004 00030000 00700002     ......0@......p.
    721c:	0000f62b 00000000                       +.......

00007224 <_i2cms>:
	...

0000723c <sercomspi_regs>:
	...
    7250:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    7260:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    7270:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00007280 <_tccs>:
    7280:	00000000 00000300 00000000 00000000     ................
    7290:	00001770 00000000 00000000 00000000     p...............
    72a0:	00000000 00000001 00000300 00000000     ................
    72b0:	00000000 00001770 00000000 00000000     ....p...........
	...
    72c8:	00000002 00000300 00000000 00000000     ................
    72d8:	00001770 00000000 00000000 00000000     p...............
    72e8:	00000000 00000003 00000300 00000000     ................
    72f8:	00000000 00001770 00000000 00000000     ....p...........
	...
    7310:	00000004 00000300 00000000 00000000     ................
    7320:	00001770 00000000 00000000 00000000     p...............
    7330:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    7340:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    7350:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    7360:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    7370:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    7380:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    7390:	26207854 20785220 75657551 61207365     Tx & Rx Queues a
    73a0:	63206572 74616572 00006465 616d6553     re created..Sema
    73b0:	726f6870 61207365 4d20646e 78657475     phores and Mutex
    73c0:	61207365 63206572 74616572 00006465     es are created..
    73d0:	70736944 68637461 6b736154 00000000     DispatchTask....
    73e0:	65646f4d 7361546d 0000006b 65646f4d     ModemTask...Mode
    73f0:	5478526d 006b7361 65646f4d 6f72506d     mRxTask.ModemPro
    7400:	73736563 6b736154 00000000 65646f4d     cessTask....Mode
    7410:	6169446d 73615467 0000006b 63637553     mDiagTask...Succ
    7420:	66737365 796c6c75 65724320 64657461     essfully Created
    7430:	65687420 73615420 0000736b 65657246      the Tasks..Free
    7440:	4f545220 63532053 75646568 2072656c      RTOS Scheduler 
    7450:	20746f6e 72617473 00646574 6c696146     not started.Fail
    7460:	74206465 7263206f 65746165 73617420     ed to create tas
    7470:	0000736b 6f727245 53203a72 64656863     ks..Error: Sched
    7480:	72656c75 69786520 00646574 454c4449     uler exited.IDLE
    7490:	00000000 09632509 25097525 75250975     .....%c.%u.%u.%u
    74a0:	00000a0d 20726d54 00637653              ....Tmr Svc.

000074ac <__sf_fake_stderr>:
	...

000074cc <__sf_fake_stdin>:
	...

000074ec <__sf_fake_stdout>:
	...
    750c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    751c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    752c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    753c:	00006665                                ef..

00007540 <_init>:
    7540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7542:	bf00      	nop
    7544:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7546:	bc08      	pop	{r3}
    7548:	469e      	mov	lr, r3
    754a:	4770      	bx	lr

0000754c <__init_array_start>:
    754c:	00000289 	.word	0x00000289

00007550 <_fini>:
    7550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7552:	bf00      	nop
    7554:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7556:	bc08      	pop	{r3}
    7558:	469e      	mov	lr, r3
    755a:	4770      	bx	lr

0000755c <__fini_array_start>:
    755c:	00000265 	.word	0x00000265
