
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007644  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000018c  20000000  00007644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002018c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002018c  2**0
                  CONTENTS
  4 .bss          00003cd8  20000190  000077e0  00020190  2**4
                  ALLOC
  5 .stack        00010000  20003e68  0000b4b8  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005b3d4  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009394  00000000  00000000  0007b5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001abe9  00000000  00000000  0008497b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b58  00000000  00000000  0009f564  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000021d8  00000000  00000000  000a10bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001b0d8  00000000  00000000  000a3294  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d79f  00000000  00000000  000be36c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010827e  00000000  00000000  000ebb0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000048ec  00000000  00000000  001f3d8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 3e 01 20 95 12 00 00 91 12 00 00 91 12 00 00     h>. ............
      10:	91 12 00 00 91 12 00 00 91 12 00 00 00 00 00 00     ................
	...
      2c:	51 37 00 00 91 12 00 00 00 00 00 00 f1 37 00 00     Q7...........7..
      3c:	55 38 00 00 91 12 00 00 91 12 00 00 91 12 00 00     U8..............
      4c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      5c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      6c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      7c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      8c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      9c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      ac:	91 12 00 00 91 12 00 00 1d 26 00 00 31 26 00 00     .........&..1&..
      bc:	ad 23 00 00 b9 23 00 00 c5 23 00 00 d1 23 00 00     .#...#...#...#..
      cc:	dd 23 00 00 91 12 00 00 91 12 00 00 91 12 00 00     .#..............
      dc:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
      ec:	91 12 00 00 00 00 00 00 2d 27 00 00 91 12 00 00     ........-'......
      fc:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
     10c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
     11c:	91 12 00 00 91 12 00 00 91 12 00 00 b1 07 00 00     ................
     12c:	bd 07 00 00 c9 07 00 00 91 12 00 00 91 12 00 00     ................
     13c:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
     14c:	91 12 00 00 79 11 00 00 91 12 00 00 00 00 00 00     ....y...........
	...
     180:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
     190:	00 00 00 00 cd 2c 00 00 91 12 00 00 91 12 00 00     .....,..........
     1a0:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
     1b0:	e1 2c 00 00 91 12 00 00 91 12 00 00 91 12 00 00     .,..............
     1c0:	91 12 00 00 f5 2c 00 00 91 12 00 00 91 12 00 00     .....,..........
     1d0:	91 12 00 00 09 2d 00 00 91 12 00 00 91 12 00 00     .....-..........
     1e0:	1d 2d 00 00 91 12 00 00 91 12 00 00 11 32 00 00     .-...........2..
     1f0:	25 32 00 00 39 32 00 00 4d 32 00 00 61 32 00 00     %2..92..M2..a2..
     200:	75 32 00 00 00 00 00 00 00 00 00 00 91 12 00 00     u2..............
     210:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
     220:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
     230:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
     240:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
     250:	91 12 00 00 91 12 00 00 91 12 00 00 91 12 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	00007644 	.word	0x00007644

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00007644 	.word	0x00007644
     2c4:	20000194 	.word	0x20000194
     2c8:	00007644 	.word	0x00007644
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Apps/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b090      	sub	sp, #64	; 0x40
     2d4:	4607      	mov	r7, r0
     2d6:	460e      	mov	r6, r1
	uint8_t dbgBuffer[30];
	uint8_t taskNameBuffer[30];
	
	memset(dbgBuffer,'0',30);
     2d8:	221e      	movs	r2, #30
     2da:	2130      	movs	r1, #48	; 0x30
     2dc:	a808      	add	r0, sp, #32
     2de:	4c14      	ldr	r4, [pc, #80]	; (330 <vApplicationStackOverflowHook+0x60>)
     2e0:	47a0      	blx	r4
    memset(taskNameBuffer,'0',30);
     2e2:	221e      	movs	r2, #30
     2e4:	2130      	movs	r1, #48	; 0x30
     2e6:	4668      	mov	r0, sp
     2e8:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ea:	4d12      	ldr	r5, [pc, #72]	; (334 <vApplicationStackOverflowHook+0x64>)
     2ec:	4628      	mov	r0, r5
     2ee:	4c12      	ldr	r4, [pc, #72]	; (338 <vApplicationStackOverflowHook+0x68>)
     2f0:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2f2:	4812      	ldr	r0, [pc, #72]	; (33c <vApplicationStackOverflowHook+0x6c>)
     2f4:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2f6:	4628      	mov	r0, r5
     2f8:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2fa:	4811      	ldr	r0, [pc, #68]	; (340 <vApplicationStackOverflowHook+0x70>)
     2fc:	47a0      	blx	r4
	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2fe:	463a      	mov	r2, r7
     300:	4910      	ldr	r1, [pc, #64]	; (344 <vApplicationStackOverflowHook+0x74>)
     302:	a808      	add	r0, sp, #32
     304:	4b10      	ldr	r3, [pc, #64]	; (348 <vApplicationStackOverflowHook+0x78>)
     306:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     308:	a808      	add	r0, sp, #32
     30a:	4c10      	ldr	r4, [pc, #64]	; (34c <vApplicationStackOverflowHook+0x7c>)
     30c:	47a0      	blx	r4
     30e:	b281      	uxth	r1, r0
     310:	a808      	add	r0, sp, #32
     312:	4d0f      	ldr	r5, [pc, #60]	; (350 <vApplicationStackOverflowHook+0x80>)
     314:	47a8      	blx	r5
	memcpy(taskNameBuffer,pcTaskName,strlen(pcTaskName)+1);
     316:	4630      	mov	r0, r6
     318:	47a0      	blx	r4
     31a:	1c42      	adds	r2, r0, #1
     31c:	4631      	mov	r1, r6
     31e:	4668      	mov	r0, sp
     320:	4b0c      	ldr	r3, [pc, #48]	; (354 <vApplicationStackOverflowHook+0x84>)
     322:	4798      	blx	r3
	SerialDebugPrint(taskNameBuffer,strlen(taskNameBuffer));
     324:	4668      	mov	r0, sp
     326:	47a0      	blx	r4
     328:	b281      	uxth	r1, r0
     32a:	4668      	mov	r0, sp
     32c:	47a8      	blx	r5
     32e:	e7fe      	b.n	32e <vApplicationStackOverflowHook+0x5e>
     330:	0000568f 	.word	0x0000568f
     334:	00005f80 	.word	0x00005f80
     338:	0000112d 	.word	0x0000112d
     33c:	00005fbc 	.word	0x00005fbc
     340:	00006ee8 	.word	0x00006ee8
     344:	00005ff8 	.word	0x00005ff8
     348:	00005819 	.word	0x00005819
     34c:	00005871 	.word	0x00005871
     350:	000010e9 	.word	0x000010e9
     354:	00005645 	.word	0x00005645

00000358 <DispatchTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "Apps/SerialDebug/SerialDebug.h"


void DispatchTask( void *DispatchTaskParam)
{
     358:	b570      	push	{r4, r5, r6, lr}
     35a:	b082      	sub	sp, #8
	TickType_t xLastWakeTime;
	const TickType_t xDelayMs = pdMS_TO_TICKS(7000UL);
	const TickType_t xDebugPrintDelayMs = pdMS_TO_TICKS(500UL);
	xLastWakeTime = xTaskGetTickCount();
     35c:	4b0c      	ldr	r3, [pc, #48]	; (390 <DispatchTask+0x38>)
     35e:	4798      	blx	r3
     360:	9001      	str	r0, [sp, #4]

	while(1)
	{
        if( xSemaphoreTake( DebugPrintMutex,xDebugPrintDelayMs) == pdTRUE )
     362:	4c0c      	ldr	r4, [pc, #48]	; (394 <DispatchTask+0x3c>)
     364:	4d0c      	ldr	r5, [pc, #48]	; (398 <DispatchTask+0x40>)
        {
        	//DEBUG_PRINT("Running Dispatch Task successfully");
        	xSemaphoreGive(DebugPrintMutex);
     366:	4e0d      	ldr	r6, [pc, #52]	; (39c <DispatchTask+0x44>)
     368:	e006      	b.n	378 <DispatchTask+0x20>
        }
		kickWatchDog();
     36a:	4b0d      	ldr	r3, [pc, #52]	; (3a0 <DispatchTask+0x48>)
     36c:	4798      	blx	r3
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     36e:	f641 3158 	movw	r1, #7000	; 0x1b58
     372:	a801      	add	r0, sp, #4
     374:	4b0b      	ldr	r3, [pc, #44]	; (3a4 <DispatchTask+0x4c>)
     376:	4798      	blx	r3
        if( xSemaphoreTake( DebugPrintMutex,xDebugPrintDelayMs) == pdTRUE )
     378:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     37c:	6820      	ldr	r0, [r4, #0]
     37e:	47a8      	blx	r5
     380:	2801      	cmp	r0, #1
     382:	d1f2      	bne.n	36a <DispatchTask+0x12>
        	xSemaphoreGive(DebugPrintMutex);
     384:	2300      	movs	r3, #0
     386:	461a      	mov	r2, r3
     388:	4619      	mov	r1, r3
     38a:	6820      	ldr	r0, [r4, #0]
     38c:	47b0      	blx	r6
     38e:	e7ec      	b.n	36a <DispatchTask+0x12>
     390:	00004871 	.word	0x00004871
     394:	20003478 	.word	0x20003478
     398:	000042b9 	.word	0x000042b9
     39c:	00003e21 	.word	0x00003e21
     3a0:	00001265 	.word	0x00001265
     3a4:	00004ab1 	.word	0x00004ab1

000003a8 <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     3a8:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     3aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     3ae:	460d      	mov	r5, r1
     3b0:	4c04      	ldr	r4, [pc, #16]	; (3c4 <getModemCommandData+0x1c>)
     3b2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     3b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     3b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     3ba:	6823      	ldr	r3, [r4, #0]
     3bc:	602b      	str	r3, [r5, #0]
}
     3be:	bc30      	pop	{r4, r5}
     3c0:	4770      	bx	lr
     3c2:	bf00      	nop
     3c4:	0000600c 	.word	0x0000600c

000003c8 <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
     3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ca:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
     3cc:	a901      	add	r1, sp, #4
     3ce:	4b2e      	ldr	r3, [pc, #184]	; (488 <mdmParser_solicitedCmdParser+0xc0>)
     3d0:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     3d2:	f89d 700c 	ldrb.w	r7, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
     3d6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
     3da:	4b2c      	ldr	r3, [pc, #176]	; (48c <mdmParser_solicitedCmdParser+0xc4>)
     3dc:	4798      	blx	r3

	if(responseBuffer != NULL)
     3de:	2800      	cmp	r0, #0
     3e0:	d04d      	beq.n	47e <mdmParser_solicitedCmdParser+0xb6>
     3e2:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
     3e4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
     3e8:	4b29      	ldr	r3, [pc, #164]	; (490 <mdmParser_solicitedCmdParser+0xc8>)
     3ea:	4798      	blx	r3

		if(readStatus != false)
     3ec:	4606      	mov	r6, r0
     3ee:	2800      	cmp	r0, #0
     3f0:	d041      	beq.n	476 <mdmParser_solicitedCmdParser+0xae>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
     3f2:	f89d 200c 	ldrb.w	r2, [sp, #12]
     3f6:	4621      	mov	r1, r4
     3f8:	9802      	ldr	r0, [sp, #8]
     3fa:	4b26      	ldr	r3, [pc, #152]	; (494 <mdmParser_solicitedCmdParser+0xcc>)
     3fc:	4798      	blx	r3
     3fe:	bb70      	cbnz	r0, 45e <mdmParser_solicitedCmdParser+0x96>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
     400:	f8bd 000e 	ldrh.w	r0, [sp, #14]
     404:	3001      	adds	r0, #1
     406:	4b21      	ldr	r3, [pc, #132]	; (48c <mdmParser_solicitedCmdParser+0xc4>)
     408:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
     40a:	4605      	mov	r5, r0
     40c:	b310      	cbz	r0, 454 <mdmParser_solicitedCmdParser+0x8c>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
     40e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
     412:	b1eb      	cbz	r3, 450 <mdmParser_solicitedCmdParser+0x88>
     414:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     416:	1cb9      	adds	r1, r7, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
     418:	b2c9      	uxtb	r1, r1
     41a:	18e2      	adds	r2, r4, r3
     41c:	5c52      	ldrb	r2, [r2, r1]
     41e:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
     420:	3301      	adds	r3, #1
     422:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
     424:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     428:	429a      	cmp	r2, r3
     42a:	d8f6      	bhi.n	41a <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
     42c:	2200      	movs	r2, #0
     42e:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt+1);
     430:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     434:	3201      	adds	r2, #1
     436:	b292      	uxth	r2, r2
     438:	4629      	mov	r1, r5
     43a:	f89d 0004 	ldrb.w	r0, [sp, #4]
     43e:	9b04      	ldr	r3, [sp, #16]
     440:	4798      	blx	r3
					DEBUG_PRINT("\r\n");
     442:	4815      	ldr	r0, [pc, #84]	; (498 <mdmParser_solicitedCmdParser+0xd0>)
     444:	4b15      	ldr	r3, [pc, #84]	; (49c <mdmParser_solicitedCmdParser+0xd4>)
     446:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
     448:	4628      	mov	r0, r5
     44a:	4b15      	ldr	r3, [pc, #84]	; (4a0 <mdmParser_solicitedCmdParser+0xd8>)
     44c:	4798      	blx	r3
     44e:	e00a      	b.n	466 <mdmParser_solicitedCmdParser+0x9e>
					while(parseCnt < cmdData.validDataCnt)
     450:	2300      	movs	r3, #0
     452:	e7eb      	b.n	42c <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
     454:	4813      	ldr	r0, [pc, #76]	; (4a4 <mdmParser_solicitedCmdParser+0xdc>)
     456:	4b11      	ldr	r3, [pc, #68]	; (49c <mdmParser_solicitedCmdParser+0xd4>)
     458:	4798      	blx	r3
	bool parseStatus = false;
     45a:	2600      	movs	r6, #0
     45c:	e003      	b.n	466 <mdmParser_solicitedCmdParser+0x9e>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
     45e:	4812      	ldr	r0, [pc, #72]	; (4a8 <mdmParser_solicitedCmdParser+0xe0>)
     460:	4b0e      	ldr	r3, [pc, #56]	; (49c <mdmParser_solicitedCmdParser+0xd4>)
     462:	4798      	blx	r3
				parseStatus = false;
     464:	2600      	movs	r6, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
     466:	4620      	mov	r0, r4
     468:	4b0d      	ldr	r3, [pc, #52]	; (4a0 <mdmParser_solicitedCmdParser+0xd8>)
     46a:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
     46c:	4b0f      	ldr	r3, [pc, #60]	; (4ac <mdmParser_solicitedCmdParser+0xe4>)
     46e:	4798      	blx	r3

	return parseStatus;
}
     470:	4630      	mov	r0, r6
     472:	b007      	add	sp, #28
     474:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
     476:	480e      	ldr	r0, [pc, #56]	; (4b0 <mdmParser_solicitedCmdParser+0xe8>)
     478:	4b08      	ldr	r3, [pc, #32]	; (49c <mdmParser_solicitedCmdParser+0xd4>)
     47a:	4798      	blx	r3
     47c:	e7f3      	b.n	466 <mdmParser_solicitedCmdParser+0x9e>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
     47e:	480d      	ldr	r0, [pc, #52]	; (4b4 <mdmParser_solicitedCmdParser+0xec>)
     480:	4b06      	ldr	r3, [pc, #24]	; (49c <mdmParser_solicitedCmdParser+0xd4>)
     482:	4798      	blx	r3
	bool parseStatus = false;
     484:	2600      	movs	r6, #0
     486:	e7f1      	b.n	46c <mdmParser_solicitedCmdParser+0xa4>
     488:	000003a9 	.word	0x000003a9
     48c:	00003a25 	.word	0x00003a25
     490:	00000891 	.word	0x00000891
     494:	00005881 	.word	0x00005881
     498:	00006ee8 	.word	0x00006ee8
     49c:	0000112d 	.word	0x0000112d
     4a0:	00003af9 	.word	0x00003af9
     4a4:	00006788 	.word	0x00006788
     4a8:	000067bc 	.word	0x000067bc
     4ac:	000008e5 	.word	0x000008e5
     4b0:	000067f8 	.word	0x000067f8
     4b4:	0000683c 	.word	0x0000683c

000004b8 <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     4b8:	4b01      	ldr	r3, [pc, #4]	; (4c0 <mdmParser_SetLastCmdProcessed+0x8>)
     4ba:	7018      	strb	r0, [r3, #0]
     4bc:	4770      	bx	lr
     4be:	bf00      	nop
     4c0:	20000023 	.word	0x20000023

000004c4 <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     4c4:	4b01      	ldr	r3, [pc, #4]	; (4cc <mdmParser_SetLastSentAtCommand+0x8>)
     4c6:	7018      	strb	r0, [r3, #0]
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop
     4cc:	200001e8 	.word	0x200001e8

000004d0 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     4d0:	4b01      	ldr	r3, [pc, #4]	; (4d8 <mdmParser_GetLastSentAtCommand+0x8>)
     4d2:	7818      	ldrb	r0, [r3, #0]
     4d4:	4770      	bx	lr
     4d6:	bf00      	nop
     4d8:	200001e8 	.word	0x200001e8

000004dc <getCloseActiveSessionCmd>:
**===========================================================================*/
static AT_CMD_TYPE getCloseActiveSessionCmd(uint8_t sessionID)
{
	AT_CMD_TYPE sessionCloseCmd;

	switch(sessionID)
     4dc:	3801      	subs	r0, #1
     4de:	2809      	cmp	r0, #9
     4e0:	d81a      	bhi.n	518 <getCloseActiveSessionCmd+0x3c>
     4e2:	e8df f000 	tbb	[pc, r0]
     4e6:	0705      	.short	0x0705
     4e8:	0f0d0b09 	.word	0x0f0d0b09
     4ec:	17151311 	.word	0x17151311
	{
		case 1:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_1;
     4f0:	200a      	movs	r0, #10
     4f2:	4770      	bx	lr
		}
		break;

		case 2:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_2;
     4f4:	200b      	movs	r0, #11
		}
		break;
     4f6:	4770      	bx	lr

		case 3:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_3;
     4f8:	200c      	movs	r0, #12
		}
		break;
     4fa:	4770      	bx	lr

		case 4:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_4;
     4fc:	200d      	movs	r0, #13
		}
		break;
     4fe:	4770      	bx	lr

		case 5:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_5;
     500:	200e      	movs	r0, #14
		}
		break;
     502:	4770      	bx	lr

		case 6:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_6;
     504:	200f      	movs	r0, #15
		}
		break;
     506:	4770      	bx	lr

		case 7:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_7;
     508:	2010      	movs	r0, #16
		}
		break;
     50a:	4770      	bx	lr

		case 8:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_8;
     50c:	2011      	movs	r0, #17
		}
		break;
     50e:	4770      	bx	lr

		case 9:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_9;
     510:	2012      	movs	r0, #18
		}
		break;
     512:	4770      	bx	lr

		case 10:
		{
			sessionCloseCmd = CMD_AT_KHTTP_CLOSE_10;
     514:	2013      	movs	r0, #19
		}
		break;
     516:	4770      	bx	lr
	switch(sessionID)
     518:	2000      	movs	r0, #0
		default:
		break;
	}
	
	return sessionCloseCmd;
}
     51a:	4770      	bx	lr

0000051c <MdmConnect_HttpConnectionInit>:
	gHttpConnectionState = MDM_HTTP_DISCONNECTED;
     51c:	4b05      	ldr	r3, [pc, #20]	; (534 <MdmConnect_HttpConnectionInit+0x18>)
     51e:	2200      	movs	r2, #0
     520:	701a      	strb	r2, [r3, #0]
	gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     522:	705a      	strb	r2, [r3, #1]
	gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     524:	709a      	strb	r2, [r3, #2]
	sessionIdCount = 10;
     526:	210a      	movs	r1, #10
     528:	70d9      	strb	r1, [r3, #3]
	ConnectionResponse.atCmd = CMD_AT_MAX;
     52a:	711a      	strb	r2, [r3, #4]
	ConnectionResponse.length = 0;
     52c:	80da      	strh	r2, [r3, #6]
	ConnectionResponse.response = NULL;
     52e:	609a      	str	r2, [r3, #8]
     530:	4770      	bx	lr
     532:	bf00      	nop
     534:	200001ec 	.word	0x200001ec

00000538 <MdmCnct_ConnectInProgressSubStateMachine>:
	switch (gHttpConnectionInProgressSubstate)
     538:	4b58      	ldr	r3, [pc, #352]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     53a:	785b      	ldrb	r3, [r3, #1]
     53c:	2b00      	cmp	r3, #0
     53e:	f040 80ab 	bne.w	698 <MdmCnct_ConnectInProgressSubStateMachine+0x160>
{
     542:	b510      	push	{r4, lr}
     544:	b082      	sub	sp, #8
        	if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     546:	4b55      	ldr	r3, [pc, #340]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     548:	789b      	ldrb	r3, [r3, #2]
     54a:	2b00      	cmp	r3, #0
     54c:	d15b      	bne.n	606 <MdmCnct_ConnectInProgressSubStateMachine+0xce>
        		if(sessionIdCount > 0)
     54e:	4b53      	ldr	r3, [pc, #332]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     550:	78db      	ldrb	r3, [r3, #3]
     552:	2b00      	cmp	r3, #0
     554:	d050      	beq.n	5f8 <MdmCnct_ConnectInProgressSubStateMachine+0xc0>
        		    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     556:	4b52      	ldr	r3, [pc, #328]	; (6a0 <MdmCnct_ConnectInProgressSubStateMachine+0x168>)
     558:	6818      	ldr	r0, [r3, #0]
     55a:	4b52      	ldr	r3, [pc, #328]	; (6a4 <MdmCnct_ConnectInProgressSubStateMachine+0x16c>)
     55c:	4798      	blx	r3
     55e:	2800      	cmp	r0, #0
     560:	d146      	bne.n	5f0 <MdmCnct_ConnectInProgressSubStateMachine+0xb8>
        		        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     562:	2100      	movs	r1, #0
     564:	4b50      	ldr	r3, [pc, #320]	; (6a8 <MdmCnct_ConnectInProgressSubStateMachine+0x170>)
     566:	6818      	ldr	r0, [r3, #0]
     568:	4b50      	ldr	r3, [pc, #320]	; (6ac <MdmCnct_ConnectInProgressSubStateMachine+0x174>)
     56a:	4798      	blx	r3
     56c:	2801      	cmp	r0, #1
     56e:	d003      	beq.n	578 <MdmCnct_ConnectInProgressSubStateMachine+0x40>
        		        	DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     570:	484f      	ldr	r0, [pc, #316]	; (6b0 <MdmCnct_ConnectInProgressSubStateMachine+0x178>)
     572:	4b50      	ldr	r3, [pc, #320]	; (6b4 <MdmCnct_ConnectInProgressSubStateMachine+0x17c>)
     574:	4798      	blx	r3
     576:	e048      	b.n	60a <MdmCnct_ConnectInProgressSubStateMachine+0xd2>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     578:	2301      	movs	r3, #1
     57a:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
     57e:	4b47      	ldr	r3, [pc, #284]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     580:	78d8      	ldrb	r0, [r3, #3]
     582:	4b4d      	ldr	r3, [pc, #308]	; (6b8 <MdmCnct_ConnectInProgressSubStateMachine+0x180>)
     584:	4798      	blx	r3
     586:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
     58a:	2300      	movs	r3, #0
     58c:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     58e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     592:	4669      	mov	r1, sp
     594:	4842      	ldr	r0, [pc, #264]	; (6a0 <MdmCnct_ConnectInProgressSubStateMachine+0x168>)
     596:	6800      	ldr	r0, [r0, #0]
     598:	4c48      	ldr	r4, [pc, #288]	; (6bc <MdmCnct_ConnectInProgressSubStateMachine+0x184>)
     59a:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
     59c:	2801      	cmp	r0, #1
     59e:	d007      	beq.n	5b0 <MdmCnct_ConnectInProgressSubStateMachine+0x78>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     5a0:	4847      	ldr	r0, [pc, #284]	; (6c0 <MdmCnct_ConnectInProgressSubStateMachine+0x188>)
     5a2:	4b44      	ldr	r3, [pc, #272]	; (6b4 <MdmCnct_ConnectInProgressSubStateMachine+0x17c>)
     5a4:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
     5a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     5aa:	4b46      	ldr	r3, [pc, #280]	; (6c4 <MdmCnct_ConnectInProgressSubStateMachine+0x18c>)
     5ac:	4798      	blx	r3
     5ae:	e02c      	b.n	60a <MdmCnct_ConnectInProgressSubStateMachine+0xd2>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
     5b0:	2300      	movs	r3, #0
     5b2:	461a      	mov	r2, r3
     5b4:	4619      	mov	r1, r3
     5b6:	483c      	ldr	r0, [pc, #240]	; (6a8 <MdmCnct_ConnectInProgressSubStateMachine+0x170>)
     5b8:	6800      	ldr	r0, [r0, #0]
     5ba:	47a0      	blx	r4
                                if( xSemaphoreTake( DebugPrintMutex,portMAX_DELAY) == pdTRUE )
     5bc:	f04f 31ff 	mov.w	r1, #4294967295
     5c0:	4b41      	ldr	r3, [pc, #260]	; (6c8 <MdmCnct_ConnectInProgressSubStateMachine+0x190>)
     5c2:	6818      	ldr	r0, [r3, #0]
     5c4:	4b39      	ldr	r3, [pc, #228]	; (6ac <MdmCnct_ConnectInProgressSubStateMachine+0x174>)
     5c6:	4798      	blx	r3
     5c8:	2801      	cmp	r0, #1
     5ca:	d007      	beq.n	5dc <MdmCnct_ConnectInProgressSubStateMachine+0xa4>
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     5cc:	2201      	movs	r2, #1
     5ce:	4b33      	ldr	r3, [pc, #204]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     5d0:	709a      	strb	r2, [r3, #2]
                                vTaskDelay(TransmitDelayMs);
     5d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     5d6:	4b3b      	ldr	r3, [pc, #236]	; (6c4 <MdmCnct_ConnectInProgressSubStateMachine+0x18c>)
     5d8:	4798      	blx	r3
     5da:	e016      	b.n	60a <MdmCnct_ConnectInProgressSubStateMachine+0xd2>
                                	DEBUG_PRINT("Sent the Session Close request to Tx Task");
     5dc:	483b      	ldr	r0, [pc, #236]	; (6cc <MdmCnct_ConnectInProgressSubStateMachine+0x194>)
     5de:	4b35      	ldr	r3, [pc, #212]	; (6b4 <MdmCnct_ConnectInProgressSubStateMachine+0x17c>)
     5e0:	4798      	blx	r3
                                	xSemaphoreGive(DebugPrintMutex);
     5e2:	2300      	movs	r3, #0
     5e4:	461a      	mov	r2, r3
     5e6:	4619      	mov	r1, r3
     5e8:	4837      	ldr	r0, [pc, #220]	; (6c8 <MdmCnct_ConnectInProgressSubStateMachine+0x190>)
     5ea:	6800      	ldr	r0, [r0, #0]
     5ec:	47a0      	blx	r4
     5ee:	e7ed      	b.n	5cc <MdmCnct_ConnectInProgressSubStateMachine+0x94>
        		    	DEBUG_PRINT("Transmit Queue is not empty");
     5f0:	4837      	ldr	r0, [pc, #220]	; (6d0 <MdmCnct_ConnectInProgressSubStateMachine+0x198>)
     5f2:	4b30      	ldr	r3, [pc, #192]	; (6b4 <MdmCnct_ConnectInProgressSubStateMachine+0x17c>)
     5f4:	4798      	blx	r3
     5f6:	e008      	b.n	60a <MdmCnct_ConnectInProgressSubStateMachine+0xd2>
        			DEBUG_PRINT("No More Active Connections to close");
     5f8:	4836      	ldr	r0, [pc, #216]	; (6d4 <MdmCnct_ConnectInProgressSubStateMachine+0x19c>)
     5fa:	4b2e      	ldr	r3, [pc, #184]	; (6b4 <MdmCnct_ConnectInProgressSubStateMachine+0x17c>)
     5fc:	4798      	blx	r3
        			gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     5fe:	2201      	movs	r2, #1
     600:	4b26      	ldr	r3, [pc, #152]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     602:	705a      	strb	r2, [r3, #1]
     604:	e001      	b.n	60a <MdmCnct_ConnectInProgressSubStateMachine+0xd2>
        	else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     606:	2b01      	cmp	r3, #1
     608:	d001      	beq.n	60e <MdmCnct_ConnectInProgressSubStateMachine+0xd6>
}
     60a:	b002      	add	sp, #8
     60c:	bd10      	pop	{r4, pc}
        		if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaittDelayMs))
     60e:	f44f 7296 	mov.w	r2, #300	; 0x12c
     612:	4931      	ldr	r1, [pc, #196]	; (6d8 <MdmCnct_ConnectInProgressSubStateMachine+0x1a0>)
     614:	4b31      	ldr	r3, [pc, #196]	; (6dc <MdmCnct_ConnectInProgressSubStateMachine+0x1a4>)
     616:	6818      	ldr	r0, [r3, #0]
     618:	4b31      	ldr	r3, [pc, #196]	; (6e0 <MdmCnct_ConnectInProgressSubStateMachine+0x1a8>)
     61a:	4798      	blx	r3
     61c:	2801      	cmp	r0, #1
     61e:	d1f4      	bne.n	60a <MdmCnct_ConnectInProgressSubStateMachine+0xd2>
	        		if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
     620:	4b1e      	ldr	r3, [pc, #120]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     622:	791c      	ldrb	r4, [r3, #4]
     624:	78d8      	ldrb	r0, [r3, #3]
     626:	4b24      	ldr	r3, [pc, #144]	; (6b8 <MdmCnct_ConnectInProgressSubStateMachine+0x180>)
     628:	4798      	blx	r3
     62a:	4284      	cmp	r4, r0
     62c:	d009      	beq.n	642 <MdmCnct_ConnectInProgressSubStateMachine+0x10a>
		        		DEBUG_PRINT("Failed to receive connection response in RX mode");
     62e:	482d      	ldr	r0, [pc, #180]	; (6e4 <MdmCnct_ConnectInProgressSubStateMachine+0x1ac>)
     630:	4b20      	ldr	r3, [pc, #128]	; (6b4 <MdmCnct_ConnectInProgressSubStateMachine+0x17c>)
     632:	4798      	blx	r3
		        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     634:	4b19      	ldr	r3, [pc, #100]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     636:	2200      	movs	r2, #0
     638:	709a      	strb	r2, [r3, #2]
		        		vPortFree(ConnectionResponse.response);
     63a:	6898      	ldr	r0, [r3, #8]
     63c:	4b2a      	ldr	r3, [pc, #168]	; (6e8 <MdmCnct_ConnectInProgressSubStateMachine+0x1b0>)
     63e:	4798      	blx	r3
}
     640:	e7e3      	b.n	60a <MdmCnct_ConnectInProgressSubStateMachine+0xd2>
		        		if( xSemaphoreTake( DebugPrintMutex,portMAX_DELAY) == pdTRUE )
     642:	f04f 31ff 	mov.w	r1, #4294967295
     646:	4b20      	ldr	r3, [pc, #128]	; (6c8 <MdmCnct_ConnectInProgressSubStateMachine+0x190>)
     648:	6818      	ldr	r0, [r3, #0]
     64a:	4b18      	ldr	r3, [pc, #96]	; (6ac <MdmCnct_ConnectInProgressSubStateMachine+0x174>)
     64c:	4798      	blx	r3
     64e:	2801      	cmp	r0, #1
     650:	d00a      	beq.n	668 <MdmCnct_ConnectInProgressSubStateMachine+0x130>
		        		if(sessionIdCount > 0)
     652:	4b12      	ldr	r3, [pc, #72]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     654:	78db      	ldrb	r3, [r3, #3]
     656:	b993      	cbnz	r3, 67e <MdmCnct_ConnectInProgressSubStateMachine+0x146>
			        		gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     658:	2201      	movs	r2, #1
     65a:	4b10      	ldr	r3, [pc, #64]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     65c:	705a      	strb	r2, [r3, #1]
		        		vPortFree(ConnectionResponse.response);
     65e:	4b0f      	ldr	r3, [pc, #60]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     660:	6898      	ldr	r0, [r3, #8]
     662:	4b21      	ldr	r3, [pc, #132]	; (6e8 <MdmCnct_ConnectInProgressSubStateMachine+0x1b0>)
     664:	4798      	blx	r3
     666:	e7d0      	b.n	60a <MdmCnct_ConnectInProgressSubStateMachine+0xd2>
			        		DEBUG_PRINT("Received a connection response in RX Mode");
     668:	4820      	ldr	r0, [pc, #128]	; (6ec <MdmCnct_ConnectInProgressSubStateMachine+0x1b4>)
     66a:	4b12      	ldr	r3, [pc, #72]	; (6b4 <MdmCnct_ConnectInProgressSubStateMachine+0x17c>)
     66c:	4798      	blx	r3
			        		xSemaphoreGive(DebugPrintMutex);
     66e:	2300      	movs	r3, #0
     670:	461a      	mov	r2, r3
     672:	4619      	mov	r1, r3
     674:	4814      	ldr	r0, [pc, #80]	; (6c8 <MdmCnct_ConnectInProgressSubStateMachine+0x190>)
     676:	6800      	ldr	r0, [r0, #0]
     678:	4c10      	ldr	r4, [pc, #64]	; (6bc <MdmCnct_ConnectInProgressSubStateMachine+0x184>)
     67a:	47a0      	blx	r4
     67c:	e7e9      	b.n	652 <MdmCnct_ConnectInProgressSubStateMachine+0x11a>
			        		sessionIdCount--;
     67e:	4a07      	ldr	r2, [pc, #28]	; (69c <MdmCnct_ConnectInProgressSubStateMachine+0x164>)
     680:	3b01      	subs	r3, #1
     682:	70d3      	strb	r3, [r2, #3]
			        		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     684:	2300      	movs	r3, #0
     686:	7093      	strb	r3, [r2, #2]
			        		SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     688:	88d1      	ldrh	r1, [r2, #6]
     68a:	6890      	ldr	r0, [r2, #8]
     68c:	4c18      	ldr	r4, [pc, #96]	; (6f0 <MdmCnct_ConnectInProgressSubStateMachine+0x1b8>)
     68e:	47a0      	blx	r4
							SerialDebugPrint("\r\n",2);
     690:	2102      	movs	r1, #2
     692:	4818      	ldr	r0, [pc, #96]	; (6f4 <MdmCnct_ConnectInProgressSubStateMachine+0x1bc>)
     694:	47a0      	blx	r4
     696:	e7e2      	b.n	65e <MdmCnct_ConnectInProgressSubStateMachine+0x126>
     698:	4770      	bx	lr
     69a:	bf00      	nop
     69c:	200001ec 	.word	0x200001ec
     6a0:	20003474 	.word	0x20003474
     6a4:	00004499 	.word	0x00004499
     6a8:	2000347c 	.word	0x2000347c
     6ac:	000042b9 	.word	0x000042b9
     6b0:	000069e8 	.word	0x000069e8
     6b4:	0000112d 	.word	0x0000112d
     6b8:	000004dd 	.word	0x000004dd
     6bc:	00003e21 	.word	0x00003e21
     6c0:	000069b4 	.word	0x000069b4
     6c4:	00004b5d 	.word	0x00004b5d
     6c8:	20003478 	.word	0x20003478
     6cc:	00006988 	.word	0x00006988
     6d0:	00006a14 	.word	0x00006a14
     6d4:	00006a30 	.word	0x00006a30
     6d8:	200001f0 	.word	0x200001f0
     6dc:	20003450 	.word	0x20003450
     6e0:	00004131 	.word	0x00004131
     6e4:	00006a80 	.word	0x00006a80
     6e8:	00003af9 	.word	0x00003af9
     6ec:	00006a54 	.word	0x00006a54
     6f0:	000010e9 	.word	0x000010e9
     6f4:	00006ee8 	.word	0x00006ee8

000006f8 <MdmConnect_HttpConnectionSchedule>:
{
     6f8:	b508      	push	{r3, lr}
	switch (gHttpConnectionState)
     6fa:	4b09      	ldr	r3, [pc, #36]	; (720 <MdmConnect_HttpConnectionSchedule+0x28>)
     6fc:	781b      	ldrb	r3, [r3, #0]
     6fe:	b113      	cbz	r3, 706 <MdmConnect_HttpConnectionSchedule+0xe>
     700:	2b01      	cmp	r3, #1
     702:	d00a      	beq.n	71a <MdmConnect_HttpConnectionSchedule+0x22>
     704:	bd08      	pop	{r3, pc}
			if(isModemDiagDataBaseUpdated() != false)
     706:	4b07      	ldr	r3, [pc, #28]	; (724 <MdmConnect_HttpConnectionSchedule+0x2c>)
     708:	4798      	blx	r3
     70a:	b140      	cbz	r0, 71e <MdmConnect_HttpConnectionSchedule+0x26>
	        	gHttpConnectionState = MDM_HTTP_CONNECTION_IN_PROGRESS;
     70c:	4b04      	ldr	r3, [pc, #16]	; (720 <MdmConnect_HttpConnectionSchedule+0x28>)
     70e:	2201      	movs	r2, #1
     710:	701a      	strb	r2, [r3, #0]
	        	gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     712:	2200      	movs	r2, #0
     714:	705a      	strb	r2, [r3, #1]
	        	gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     716:	709a      	strb	r2, [r3, #2]
     718:	bd08      	pop	{r3, pc}
        	MdmCnct_ConnectInProgressSubStateMachine();
     71a:	4b03      	ldr	r3, [pc, #12]	; (728 <MdmConnect_HttpConnectionSchedule+0x30>)
     71c:	4798      	blx	r3
     71e:	bd08      	pop	{r3, pc}
     720:	200001ec 	.word	0x200001ec
     724:	00000bc5 	.word	0x00000bc5
     728:	00000539 	.word	0x00000539

0000072c <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     72c:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
     72e:	4912      	ldr	r1, [pc, #72]	; (778 <mdmCtrlr_DataCommInit+0x4c>)
     730:	4812      	ldr	r0, [pc, #72]	; (77c <mdmCtrlr_DataCommInit+0x50>)
     732:	4b13      	ldr	r3, [pc, #76]	; (780 <mdmCtrlr_DataCommInit+0x54>)
     734:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     736:	b118      	cbz	r0, 740 <mdmCtrlr_DataCommInit+0x14>
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
		
	}
	else
	{
		DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
     738:	4812      	ldr	r0, [pc, #72]	; (784 <mdmCtrlr_DataCommInit+0x58>)
     73a:	4b13      	ldr	r3, [pc, #76]	; (788 <mdmCtrlr_DataCommInit+0x5c>)
     73c:	4798      	blx	r3
     73e:	bd10      	pop	{r4, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     740:	f44f 6200 	mov.w	r2, #2048	; 0x800
     744:	4911      	ldr	r1, [pc, #68]	; (78c <mdmCtrlr_DataCommInit+0x60>)
     746:	4812      	ldr	r0, [pc, #72]	; (790 <mdmCtrlr_DataCommInit+0x64>)
     748:	4b12      	ldr	r3, [pc, #72]	; (794 <mdmCtrlr_DataCommInit+0x68>)
     74a:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     74c:	2800      	cmp	r0, #0
     74e:	d1f3      	bne.n	738 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
     750:	4c0a      	ldr	r4, [pc, #40]	; (77c <mdmCtrlr_DataCommInit+0x50>)
     752:	2201      	movs	r2, #1
     754:	4611      	mov	r1, r2
     756:	4620      	mov	r0, r4
     758:	4b0f      	ldr	r3, [pc, #60]	; (798 <mdmCtrlr_DataCommInit+0x6c>)
     75a:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
     75c:	4620      	mov	r0, r4
     75e:	4b0f      	ldr	r3, [pc, #60]	; (79c <mdmCtrlr_DataCommInit+0x70>)
     760:	4798      	blx	r3
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
     762:	480f      	ldr	r0, [pc, #60]	; (7a0 <mdmCtrlr_DataCommInit+0x74>)
     764:	4b08      	ldr	r3, [pc, #32]	; (788 <mdmCtrlr_DataCommInit+0x5c>)
     766:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
     768:	4b0e      	ldr	r3, [pc, #56]	; (7a4 <mdmCtrlr_DataCommInit+0x78>)
     76a:	f893 133c 	ldrb.w	r1, [r3, #828]	; 0x33c
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
     76e:	0949      	lsrs	r1, r1, #5
     770:	480d      	ldr	r0, [pc, #52]	; (7a8 <mdmCtrlr_DataCommInit+0x7c>)
     772:	4b0e      	ldr	r3, [pc, #56]	; (7ac <mdmCtrlr_DataCommInit+0x80>)
     774:	4798      	blx	r3
     776:	bd10      	pop	{r4, pc}
     778:	41014000 	.word	0x41014000
     77c:	20000024 	.word	0x20000024
     780:	000028a9 	.word	0x000028a9
     784:	00006af0 	.word	0x00006af0
     788:	0000112d 	.word	0x0000112d
     78c:	20003488 	.word	0x20003488
     790:	20003c88 	.word	0x20003c88
     794:	00001e91 	.word	0x00001e91
     798:	00002955 	.word	0x00002955
     79c:	0000291d 	.word	0x0000291d
     7a0:	00006ab4 	.word	0x00006ab4
     7a4:	e000e100 	.word	0xe000e100
     7a8:	00006adc 	.word	0x00006adc
     7ac:	00001131 	.word	0x00001131

000007b0 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     7b0:	2201      	movs	r2, #1
     7b2:	4b01      	ldr	r3, [pc, #4]	; (7b8 <SERCOM3_0_Handler+0x8>)
     7b4:	761a      	strb	r2, [r3, #24]
     7b6:	4770      	bx	lr
     7b8:	41014000 	.word	0x41014000

000007bc <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     7bc:	2202      	movs	r2, #2
     7be:	4b01      	ldr	r3, [pc, #4]	; (7c4 <SERCOM3_1_Handler+0x8>)
     7c0:	761a      	strb	r2, [r3, #24]
     7c2:	4770      	bx	lr
     7c4:	41014000 	.word	0x41014000

000007c8 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     7c8:	b530      	push	{r4, r5, lr}
     7ca:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
     7cc:	4d1a      	ldr	r5, [pc, #104]	; (838 <SERCOM3_2_Handler+0x70>)
     7ce:	4c1b      	ldr	r4, [pc, #108]	; (83c <SERCOM3_2_Handler+0x74>)
     7d0:	4628      	mov	r0, r5
     7d2:	47a0      	blx	r4
     7d4:	2800      	cmp	r0, #0
     7d6:	d0fb      	beq.n	7d0 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
     7d8:	4817      	ldr	r0, [pc, #92]	; (838 <SERCOM3_2_Handler+0x70>)
     7da:	4b19      	ldr	r3, [pc, #100]	; (840 <SERCOM3_2_Handler+0x78>)
     7dc:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
     7de:	4601      	mov	r1, r0
     7e0:	4818      	ldr	r0, [pc, #96]	; (844 <SERCOM3_2_Handler+0x7c>)
     7e2:	4b19      	ldr	r3, [pc, #100]	; (848 <SERCOM3_2_Handler+0x80>)
     7e4:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
     7e6:	4b19      	ldr	r3, [pc, #100]	; (84c <SERCOM3_2_Handler+0x84>)
     7e8:	4798      	blx	r3
     7ea:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
     7ec:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     7f0:	d101      	bne.n	7f6 <SERCOM3_2_Handler+0x2e>

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}

}
     7f2:	b009      	add	sp, #36	; 0x24
     7f4:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
     7f6:	a902      	add	r1, sp, #8
     7f8:	4b15      	ldr	r3, [pc, #84]	; (850 <SERCOM3_2_Handler+0x88>)
     7fa:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
     7fc:	4811      	ldr	r0, [pc, #68]	; (844 <SERCOM3_2_Handler+0x7c>)
     7fe:	4b15      	ldr	r3, [pc, #84]	; (854 <SERCOM3_2_Handler+0x8c>)
     800:	4798      	blx	r3
     802:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     806:	4298      	cmp	r0, r3
     808:	d3f3      	bcc.n	7f2 <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
     80a:	4b13      	ldr	r3, [pc, #76]	; (858 <SERCOM3_2_Handler+0x90>)
     80c:	6818      	ldr	r0, [r3, #0]
     80e:	ab07      	add	r3, sp, #28
     810:	9300      	str	r3, [sp, #0]
     812:	2300      	movs	r3, #0
     814:	2203      	movs	r2, #3
     816:	b2e1      	uxtb	r1, r4
     818:	4c10      	ldr	r4, [pc, #64]	; (85c <SERCOM3_2_Handler+0x94>)
     81a:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     81c:	9b07      	ldr	r3, [sp, #28]
     81e:	b13b      	cbz	r3, 830 <SERCOM3_2_Handler+0x68>
     820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     824:	4b0e      	ldr	r3, [pc, #56]	; (860 <SERCOM3_2_Handler+0x98>)
     826:	601a      	str	r2, [r3, #0]
     828:	f3bf 8f4f 	dsb	sy
     82c:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
     830:	2000      	movs	r0, #0
     832:	4b0c      	ldr	r3, [pc, #48]	; (864 <SERCOM3_2_Handler+0x9c>)
     834:	4798      	blx	r3
}
     836:	e7dc      	b.n	7f2 <SERCOM3_2_Handler+0x2a>
     838:	20000024 	.word	0x20000024
     83c:	00002949 	.word	0x00002949
     840:	00002937 	.word	0x00002937
     844:	20003c88 	.word	0x20003c88
     848:	00001f25 	.word	0x00001f25
     84c:	000004d1 	.word	0x000004d1
     850:	000003a9 	.word	0x000003a9
     854:	00001f65 	.word	0x00001f65
     858:	20003468 	.word	0x20003468
     85c:	00005111 	.word	0x00005111
     860:	e000ed04 	.word	0xe000ed04
     864:	000004c5 	.word	0x000004c5

00000868 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     868:	b570      	push	{r4, r5, r6, lr}
     86a:	4605      	mov	r5, r0
     86c:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
     86e:	4c05      	ldr	r4, [pc, #20]	; (884 <mdmCtrlr_SendDataToModem+0x1c>)
     870:	4620      	mov	r0, r4
     872:	4b05      	ldr	r3, [pc, #20]	; (888 <mdmCtrlr_SendDataToModem+0x20>)
     874:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
     876:	4632      	mov	r2, r6
     878:	4629      	mov	r1, r5
     87a:	4620      	mov	r0, r4
     87c:	4b03      	ldr	r3, [pc, #12]	; (88c <mdmCtrlr_SendDataToModem+0x24>)
     87e:	4798      	blx	r3
}
     880:	bd70      	pop	{r4, r5, r6, pc}
     882:	bf00      	nop
     884:	20000024 	.word	0x20000024
     888:	0000291d 	.word	0x0000291d
     88c:	00001065 	.word	0x00001065

00000890 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     890:	b5f0      	push	{r4, r5, r6, r7, lr}
     892:	b083      	sub	sp, #12
     894:	4605      	mov	r5, r0
     896:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     898:	480d      	ldr	r0, [pc, #52]	; (8d0 <mdmCtrlr_ReadResponseFromModem+0x40>)
     89a:	4b0e      	ldr	r3, [pc, #56]	; (8d4 <mdmCtrlr_ReadResponseFromModem+0x44>)
     89c:	4798      	blx	r3
     89e:	42b0      	cmp	r0, r6
     8a0:	d201      	bcs.n	8a6 <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     8a2:	b003      	add	sp, #12
     8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
     8a6:	a801      	add	r0, sp, #4
     8a8:	4b0b      	ldr	r3, [pc, #44]	; (8d8 <mdmCtrlr_ReadResponseFromModem+0x48>)
     8aa:	4798      	blx	r3
		while (readCnt < length)
     8ac:	b166      	cbz	r6, 8c8 <mdmCtrlr_ReadResponseFromModem+0x38>
     8ae:	462c      	mov	r4, r5
     8b0:	3e01      	subs	r6, #1
     8b2:	b2b6      	uxth	r6, r6
     8b4:	3601      	adds	r6, #1
     8b6:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     8b8:	4f05      	ldr	r7, [pc, #20]	; (8d0 <mdmCtrlr_ReadResponseFromModem+0x40>)
     8ba:	4e08      	ldr	r6, [pc, #32]	; (8dc <mdmCtrlr_ReadResponseFromModem+0x4c>)
     8bc:	4621      	mov	r1, r4
     8be:	4638      	mov	r0, r7
     8c0:	47b0      	blx	r6
     8c2:	3401      	adds	r4, #1
		while (readCnt < length)
     8c4:	42ac      	cmp	r4, r5
     8c6:	d1f9      	bne.n	8bc <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
     8c8:	a801      	add	r0, sp, #4
     8ca:	4b05      	ldr	r3, [pc, #20]	; (8e0 <mdmCtrlr_ReadResponseFromModem+0x50>)
     8cc:	4798      	blx	r3
     8ce:	e7e8      	b.n	8a2 <mdmCtrlr_ReadResponseFromModem+0x12>
     8d0:	20003c88 	.word	0x20003c88
     8d4:	00001f65 	.word	0x00001f65
     8d8:	00001b61 	.word	0x00001b61
     8dc:	00001ee1 	.word	0x00001ee1
     8e0:	00001b6f 	.word	0x00001b6f

000008e4 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     8e4:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     8e6:	4802      	ldr	r0, [pc, #8]	; (8f0 <mdmCtrlr_FlushRxBuffer+0xc>)
     8e8:	4b02      	ldr	r3, [pc, #8]	; (8f4 <mdmCtrlr_FlushRxBuffer+0x10>)
     8ea:	4798      	blx	r3
     8ec:	bd08      	pop	{r3, pc}
     8ee:	bf00      	nop
     8f0:	20003c88 	.word	0x20003c88
     8f4:	00001f89 	.word	0x00001f89

000008f8 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
     8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8fa:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
     8fc:	2300      	movs	r3, #0
     8fe:	4a75      	ldr	r2, [pc, #468]	; (ad4 <ModemDiagTask+0x1dc>)
     900:	7013      	strb	r3, [r2, #0]
	bModemDiagDataBaseUpdated = false;
     902:	4a75      	ldr	r2, [pc, #468]	; (ad8 <ModemDiagTask+0x1e0>)
     904:	4611      	mov	r1, r2
     906:	f801 3b04 	strb.w	r3, [r1], #4
	
    memset(atResponseData,0,sizeof(atResponseData));
     90a:	8093      	strh	r3, [r2, #4]
     90c:	708b      	strb	r3, [r1, #2]
    memset(atCgsnResponseData,0,sizeof(atCgsnResponseData));
     90e:	6093      	str	r3, [r2, #8]
     910:	60d3      	str	r3, [r2, #12]
     912:	6113      	str	r3, [r2, #16]
     914:	6153      	str	r3, [r2, #20]
    memset(atKgsnResponseData,0,sizeof(atKgsnResponseData));
     916:	6193      	str	r3, [r2, #24]
     918:	61d3      	str	r3, [r2, #28]
     91a:	6213      	str	r3, [r2, #32]
     91c:	f8c2 3023 	str.w	r3, [r2, #35]	; 0x23
    memset(atCarrierResponseData,0,sizeof(atCarrierResponseData));
     920:	6293      	str	r3, [r2, #40]	; 0x28
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     922:	4c6e      	ldr	r4, [pc, #440]	; (adc <ModemDiagTask+0x1e4>)
    AtTxMsgType TxMsgQueueData;
    CmdResponseType cmdResponse;

    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    {
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     924:	4d6e      	ldr	r5, [pc, #440]	; (ae0 <ModemDiagTask+0x1e8>)
                        ModemDiagState = 100;
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
                        vTaskDelay(DiagDelayMs);
     926:	4e6f      	ldr	r6, [pc, #444]	; (ae4 <ModemDiagTask+0x1ec>)
     928:	e0ae      	b.n	a88 <ModemDiagTask+0x190>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     92a:	2304      	movs	r3, #4
     92c:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
     930:	2301      	movs	r3, #1
     932:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     936:	2300      	movs	r3, #0
     938:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     93a:	2264      	movs	r2, #100	; 0x64
     93c:	4669      	mov	r1, sp
     93e:	486a      	ldr	r0, [pc, #424]	; (ae8 <ModemDiagTask+0x1f0>)
     940:	6800      	ldr	r0, [r0, #0]
     942:	4f6a      	ldr	r7, [pc, #424]	; (aec <ModemDiagTask+0x1f4>)
     944:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     946:	2801      	cmp	r0, #1
     948:	d006      	beq.n	958 <ModemDiagTask+0x60>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     94a:	4869      	ldr	r0, [pc, #420]	; (af0 <ModemDiagTask+0x1f8>)
     94c:	4b69      	ldr	r3, [pc, #420]	; (af4 <ModemDiagTask+0x1fc>)
     94e:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     950:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     954:	47b0      	blx	r6
     956:	e08b      	b.n	a70 <ModemDiagTask+0x178>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     958:	4867      	ldr	r0, [pc, #412]	; (af8 <ModemDiagTask+0x200>)
     95a:	4b66      	ldr	r3, [pc, #408]	; (af4 <ModemDiagTask+0x1fc>)
     95c:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     95e:	2300      	movs	r3, #0
     960:	461a      	mov	r2, r3
     962:	4619      	mov	r1, r3
     964:	4865      	ldr	r0, [pc, #404]	; (afc <ModemDiagTask+0x204>)
     966:	6800      	ldr	r0, [r0, #0]
     968:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     96a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     96e:	47b0      	blx	r6
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
     970:	2201      	movs	r2, #1
     972:	4b58      	ldr	r3, [pc, #352]	; (ad4 <ModemDiagTask+0x1dc>)
     974:	701a      	strb	r2, [r3, #0]
     976:	e07b      	b.n	a70 <ModemDiagTask+0x178>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     978:	2304      	movs	r3, #4
     97a:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
     97e:	2302      	movs	r3, #2
     980:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     984:	2300      	movs	r3, #0
     986:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     988:	2264      	movs	r2, #100	; 0x64
     98a:	4669      	mov	r1, sp
     98c:	4856      	ldr	r0, [pc, #344]	; (ae8 <ModemDiagTask+0x1f0>)
     98e:	6800      	ldr	r0, [r0, #0]
     990:	4f56      	ldr	r7, [pc, #344]	; (aec <ModemDiagTask+0x1f4>)
     992:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     994:	2801      	cmp	r0, #1
     996:	d006      	beq.n	9a6 <ModemDiagTask+0xae>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     998:	4855      	ldr	r0, [pc, #340]	; (af0 <ModemDiagTask+0x1f8>)
     99a:	4b56      	ldr	r3, [pc, #344]	; (af4 <ModemDiagTask+0x1fc>)
     99c:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     99e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     9a2:	47b0      	blx	r6
     9a4:	e064      	b.n	a70 <ModemDiagTask+0x178>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     9a6:	4854      	ldr	r0, [pc, #336]	; (af8 <ModemDiagTask+0x200>)
     9a8:	4b52      	ldr	r3, [pc, #328]	; (af4 <ModemDiagTask+0x1fc>)
     9aa:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     9ac:	2300      	movs	r3, #0
     9ae:	461a      	mov	r2, r3
     9b0:	4619      	mov	r1, r3
     9b2:	4852      	ldr	r0, [pc, #328]	; (afc <ModemDiagTask+0x204>)
     9b4:	6800      	ldr	r0, [r0, #0]
     9b6:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     9b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     9bc:	47b0      	blx	r6
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
     9be:	2202      	movs	r2, #2
     9c0:	4b44      	ldr	r3, [pc, #272]	; (ad4 <ModemDiagTask+0x1dc>)
     9c2:	701a      	strb	r2, [r3, #0]
     9c4:	e054      	b.n	a70 <ModemDiagTask+0x178>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     9c6:	2304      	movs	r3, #4
     9c8:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
     9cc:	2307      	movs	r3, #7
     9ce:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     9d2:	2300      	movs	r3, #0
     9d4:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     9d6:	2264      	movs	r2, #100	; 0x64
     9d8:	4669      	mov	r1, sp
     9da:	4843      	ldr	r0, [pc, #268]	; (ae8 <ModemDiagTask+0x1f0>)
     9dc:	6800      	ldr	r0, [r0, #0]
     9de:	4f43      	ldr	r7, [pc, #268]	; (aec <ModemDiagTask+0x1f4>)
     9e0:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     9e2:	2801      	cmp	r0, #1
     9e4:	d006      	beq.n	9f4 <ModemDiagTask+0xfc>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     9e6:	4842      	ldr	r0, [pc, #264]	; (af0 <ModemDiagTask+0x1f8>)
     9e8:	4b42      	ldr	r3, [pc, #264]	; (af4 <ModemDiagTask+0x1fc>)
     9ea:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     9ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     9f0:	47b0      	blx	r6
     9f2:	e03d      	b.n	a70 <ModemDiagTask+0x178>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     9f4:	4840      	ldr	r0, [pc, #256]	; (af8 <ModemDiagTask+0x200>)
     9f6:	4b3f      	ldr	r3, [pc, #252]	; (af4 <ModemDiagTask+0x1fc>)
     9f8:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     9fa:	2300      	movs	r3, #0
     9fc:	461a      	mov	r2, r3
     9fe:	4619      	mov	r1, r3
     a00:	483e      	ldr	r0, [pc, #248]	; (afc <ModemDiagTask+0x204>)
     a02:	6800      	ldr	r0, [r0, #0]
     a04:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     a06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a0a:	47b0      	blx	r6
                        ModemDiagState = MODEM_DIAG_MAX_STATE;
     a0c:	2204      	movs	r2, #4
     a0e:	4b31      	ldr	r3, [pc, #196]	; (ad4 <ModemDiagTask+0x1dc>)
     a10:	701a      	strb	r2, [r3, #0]
     a12:	e02d      	b.n	a70 <ModemDiagTask+0x178>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     a14:	2304      	movs	r3, #4
     a16:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
     a1a:	2303      	movs	r3, #3
     a1c:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
     a20:	2300      	movs	r3, #0
     a22:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     a24:	2264      	movs	r2, #100	; 0x64
     a26:	4669      	mov	r1, sp
     a28:	482f      	ldr	r0, [pc, #188]	; (ae8 <ModemDiagTask+0x1f0>)
     a2a:	6800      	ldr	r0, [r0, #0]
     a2c:	4f2f      	ldr	r7, [pc, #188]	; (aec <ModemDiagTask+0x1f4>)
     a2e:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
     a30:	2801      	cmp	r0, #1
     a32:	d006      	beq.n	a42 <ModemDiagTask+0x14a>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     a34:	482e      	ldr	r0, [pc, #184]	; (af0 <ModemDiagTask+0x1f8>)
     a36:	4b2f      	ldr	r3, [pc, #188]	; (af4 <ModemDiagTask+0x1fc>)
     a38:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
     a3a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a3e:	47b0      	blx	r6
     a40:	e016      	b.n	a70 <ModemDiagTask+0x178>
                        DEBUG_PRINT("Sent the Diag data to Tx Task");
     a42:	482d      	ldr	r0, [pc, #180]	; (af8 <ModemDiagTask+0x200>)
     a44:	4b2b      	ldr	r3, [pc, #172]	; (af4 <ModemDiagTask+0x1fc>)
     a46:	4798      	blx	r3
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
     a48:	2300      	movs	r3, #0
     a4a:	461a      	mov	r2, r3
     a4c:	4619      	mov	r1, r3
     a4e:	482b      	ldr	r0, [pc, #172]	; (afc <ModemDiagTask+0x204>)
     a50:	6800      	ldr	r0, [r0, #0]
     a52:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
     a54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a58:	47b0      	blx	r6
                        ModemDiagState = 100;
     a5a:	2264      	movs	r2, #100	; 0x64
     a5c:	4b1d      	ldr	r3, [pc, #116]	; (ad4 <ModemDiagTask+0x1dc>)
     a5e:	701a      	strb	r2, [r3, #0]
     a60:	e006      	b.n	a70 <ModemDiagTask+0x178>
                }
                break;

                default:
                {
                	xSemaphoreGive(AtTxQueueLoadSemaphore);
     a62:	2300      	movs	r3, #0
     a64:	461a      	mov	r2, r3
     a66:	4619      	mov	r1, r3
     a68:	4824      	ldr	r0, [pc, #144]	; (afc <ModemDiagTask+0x204>)
     a6a:	6800      	ldr	r0, [r0, #0]
     a6c:	4f1f      	ldr	r7, [pc, #124]	; (aec <ModemDiagTask+0x1f4>)
     a6e:	47b8      	blx	r7
            kickWatchDog();
     a70:	4b23      	ldr	r3, [pc, #140]	; (b00 <ModemDiagTask+0x208>)
     a72:	4798      	blx	r3
            if( xSemaphoreTake( DebugPrintMutex,xDebugPrintDelayMs) == pdTRUE )
     a74:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     a78:	4b22      	ldr	r3, [pc, #136]	; (b04 <ModemDiagTask+0x20c>)
     a7a:	6818      	ldr	r0, [r3, #0]
     a7c:	47a8      	blx	r5
     a7e:	2801      	cmp	r0, #1
     a80:	d020      	beq.n	ac4 <ModemDiagTask+0x1cc>
            vTaskDelay(xDelayMs);
     a82:	f640 50ac 	movw	r0, #3500	; 0xdac
     a86:	47b0      	blx	r6
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     a88:	47a0      	blx	r4
     a8a:	2804      	cmp	r0, #4
     a8c:	d1fc      	bne.n	a88 <ModemDiagTask+0x190>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     a8e:	4b16      	ldr	r3, [pc, #88]	; (ae8 <ModemDiagTask+0x1f0>)
     a90:	6818      	ldr	r0, [r3, #0]
     a92:	4b1d      	ldr	r3, [pc, #116]	; (b08 <ModemDiagTask+0x210>)
     a94:	4798      	blx	r3
     a96:	2800      	cmp	r0, #0
     a98:	d1ea      	bne.n	a70 <ModemDiagTask+0x178>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     a9a:	2100      	movs	r1, #0
     a9c:	4b17      	ldr	r3, [pc, #92]	; (afc <ModemDiagTask+0x204>)
     a9e:	6818      	ldr	r0, [r3, #0]
     aa0:	47a8      	blx	r5
     aa2:	2801      	cmp	r0, #1
     aa4:	d1e4      	bne.n	a70 <ModemDiagTask+0x178>
            switch(ModemDiagState)
     aa6:	4b0b      	ldr	r3, [pc, #44]	; (ad4 <ModemDiagTask+0x1dc>)
     aa8:	781b      	ldrb	r3, [r3, #0]
     aaa:	2b03      	cmp	r3, #3
     aac:	d8d9      	bhi.n	a62 <ModemDiagTask+0x16a>
     aae:	a201      	add	r2, pc, #4	; (adr r2, ab4 <ModemDiagTask+0x1bc>)
     ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ab4:	0000092b 	.word	0x0000092b
     ab8:	00000979 	.word	0x00000979
     abc:	000009c7 	.word	0x000009c7
     ac0:	00000a15 	.word	0x00000a15
            	xSemaphoreGive(DebugPrintMutex);
     ac4:	2300      	movs	r3, #0
     ac6:	461a      	mov	r2, r3
     ac8:	4619      	mov	r1, r3
     aca:	480e      	ldr	r0, [pc, #56]	; (b04 <ModemDiagTask+0x20c>)
     acc:	6800      	ldr	r0, [r0, #0]
     ace:	4f07      	ldr	r7, [pc, #28]	; (aec <ModemDiagTask+0x1f4>)
     ad0:	47b8      	blx	r7
     ad2:	e7d6      	b.n	a82 <ModemDiagTask+0x18a>
     ad4:	20003c98 	.word	0x20003c98
     ad8:	200001f8 	.word	0x200001f8
     adc:	00000bd1 	.word	0x00000bd1
     ae0:	000042b9 	.word	0x000042b9
     ae4:	00004b5d 	.word	0x00004b5d
     ae8:	20003474 	.word	0x20003474
     aec:	00003e21 	.word	0x00003e21
     af0:	00006b3c 	.word	0x00006b3c
     af4:	0000112d 	.word	0x0000112d
     af8:	00006b1c 	.word	0x00006b1c
     afc:	2000347c 	.word	0x2000347c
     b00:	00001265 	.word	0x00001265
     b04:	20003478 	.word	0x20003478
     b08:	00004499 	.word	0x00004499

00000b0c <ModemDiagUpdateDataBase>:
{
     b0c:	b570      	push	{r4, r5, r6, lr}
     b0e:	4604      	mov	r4, r0
    switch(cmd)
     b10:	780b      	ldrb	r3, [r1, #0]
     b12:	3b01      	subs	r3, #1
     b14:	2b06      	cmp	r3, #6
     b16:	d827      	bhi.n	b68 <ModemDiagUpdateDataBase+0x5c>
     b18:	e8df f003 	tbb	[pc, r3]
     b1c:	26253326 	.word	0x26253326
     b20:	2626      	.short	0x2626
     b22:	04          	.byte	0x04
     b23:	00          	.byte	0x00
			while(parseCnt <= (cmdResponse->length - startIndex))
     b24:	884b      	ldrh	r3, [r1, #2]
     b26:	2b07      	cmp	r3, #7
     b28:	d40d      	bmi.n	b46 <ModemDiagUpdateDataBase+0x3a>
     b2a:	2200      	movs	r2, #0
     b2c:	4613      	mov	r3, r2
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
     b2e:	4d1f      	ldr	r5, [pc, #124]	; (bac <ModemDiagUpdateDataBase+0xa0>)
     b30:	18a0      	adds	r0, r4, r2
     b32:	79c0      	ldrb	r0, [r0, #7]
     b34:	442a      	add	r2, r5
     b36:	7610      	strb	r0, [r2, #24]
				parseCnt++;
     b38:	3301      	adds	r3, #1
     b3a:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
     b3c:	461a      	mov	r2, r3
     b3e:	8848      	ldrh	r0, [r1, #2]
     b40:	3807      	subs	r0, #7
     b42:	4283      	cmp	r3, r0
     b44:	ddf4      	ble.n	b30 <ModemDiagUpdateDataBase+0x24>
			bModemDiagDataBaseUpdated = true;
     b46:	4d19      	ldr	r5, [pc, #100]	; (bac <ModemDiagUpdateDataBase+0xa0>)
     b48:	2601      	movs	r6, #1
     b4a:	462c      	mov	r4, r5
     b4c:	f804 6b18 	strb.w	r6, [r4], #24
			DEBUG_PRINT("Retrieved the Modem serial Number");
     b50:	4817      	ldr	r0, [pc, #92]	; (bb0 <ModemDiagUpdateDataBase+0xa4>)
     b52:	4b18      	ldr	r3, [pc, #96]	; (bb4 <ModemDiagUpdateDataBase+0xa8>)
     b54:	4798      	blx	r3
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
     b56:	210f      	movs	r1, #15
     b58:	4620      	mov	r0, r4
     b5a:	4c17      	ldr	r4, [pc, #92]	; (bb8 <ModemDiagUpdateDataBase+0xac>)
     b5c:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
     b5e:	2102      	movs	r1, #2
     b60:	4816      	ldr	r0, [pc, #88]	; (bbc <ModemDiagUpdateDataBase+0xb0>)
     b62:	47a0      	blx	r4
			bModemDiagDataBaseUpdated = true;
     b64:	702e      	strb	r6, [r5, #0]
     b66:	bd70      	pop	{r4, r5, r6, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
     b68:	4b10      	ldr	r3, [pc, #64]	; (bac <ModemDiagUpdateDataBase+0xa0>)
     b6a:	1d18      	adds	r0, r3, #4
     b6c:	8821      	ldrh	r1, [r4, #0]
     b6e:	78a2      	ldrb	r2, [r4, #2]
     b70:	8099      	strh	r1, [r3, #4]
     b72:	7082      	strb	r2, [r0, #2]
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
     b74:	2103      	movs	r1, #3
     b76:	4c10      	ldr	r4, [pc, #64]	; (bb8 <ModemDiagUpdateDataBase+0xac>)
     b78:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
     b7a:	2102      	movs	r1, #2
     b7c:	480f      	ldr	r0, [pc, #60]	; (bbc <ModemDiagUpdateDataBase+0xb0>)
     b7e:	47a0      	blx	r4
        break;
     b80:	bd70      	pop	{r4, r5, r6, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
     b82:	4e0a      	ldr	r6, [pc, #40]	; (bac <ModemDiagUpdateDataBase+0xa0>)
     b84:	f106 0508 	add.w	r5, r6, #8
     b88:	6800      	ldr	r0, [r0, #0]
     b8a:	6861      	ldr	r1, [r4, #4]
     b8c:	68a2      	ldr	r2, [r4, #8]
     b8e:	68e3      	ldr	r3, [r4, #12]
     b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
     b92:	480b      	ldr	r0, [pc, #44]	; (bc0 <ModemDiagUpdateDataBase+0xb4>)
     b94:	4b07      	ldr	r3, [pc, #28]	; (bb4 <ModemDiagUpdateDataBase+0xa8>)
     b96:	4798      	blx	r3
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
     b98:	2110      	movs	r1, #16
     b9a:	f106 0008 	add.w	r0, r6, #8
     b9e:	4c06      	ldr	r4, [pc, #24]	; (bb8 <ModemDiagUpdateDataBase+0xac>)
     ba0:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
     ba2:	2102      	movs	r1, #2
     ba4:	4805      	ldr	r0, [pc, #20]	; (bbc <ModemDiagUpdateDataBase+0xb0>)
     ba6:	47a0      	blx	r4
        break;
     ba8:	bd70      	pop	{r4, r5, r6, pc}
     baa:	bf00      	nop
     bac:	200001f8 	.word	0x200001f8
     bb0:	00006b84 	.word	0x00006b84
     bb4:	0000112d 	.word	0x0000112d
     bb8:	000010e9 	.word	0x000010e9
     bbc:	00006ee8 	.word	0x00006ee8
     bc0:	00006b64 	.word	0x00006b64

00000bc4 <isModemDiagDataBaseUpdated>:
*
********************************************************************************/
bool isModemDiagDataBaseUpdated(void)
{
	return bModemDiagDataBaseUpdated;
}
     bc4:	4b01      	ldr	r3, [pc, #4]	; (bcc <isModemDiagDataBaseUpdated+0x8>)
     bc6:	7818      	ldrb	r0, [r3, #0]
     bc8:	4770      	bx	lr
     bca:	bf00      	nop
     bcc:	200001f8 	.word	0x200001f8

00000bd0 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
     bd0:	4b01      	ldr	r3, [pc, #4]	; (bd8 <getModemPowerStatus+0x8>)
     bd2:	7818      	ldrb	r0, [r3, #0]
     bd4:	4770      	bx	lr
     bd6:	bf00      	nop
     bd8:	20000224 	.word	0x20000224

00000bdc <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_SHUTDOWN;
     bdc:	4b03      	ldr	r3, [pc, #12]	; (bec <modemPowerStateInit+0x10>)
     bde:	2200      	movs	r2, #0
     be0:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     be2:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     be4:	2201      	movs	r2, #1
     be6:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     be8:	70da      	strb	r2, [r3, #3]
     bea:	4770      	bx	lr
     bec:	20000224 	.word	0x20000224

00000bf0 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
     bf0:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemSigInitDelay = pdMS_TO_TICKS(500UL);
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);

    switch(ModemPwrState)
     bf2:	4b5d      	ldr	r3, [pc, #372]	; (d68 <modemPowerSchedule+0x178>)
     bf4:	781b      	ldrb	r3, [r3, #0]
     bf6:	2b06      	cmp	r3, #6
     bf8:	f000 8089 	beq.w	d0e <modemPowerSchedule+0x11e>
     bfc:	2b07      	cmp	r3, #7
     bfe:	d054      	beq.n	caa <modemPowerSchedule+0xba>
     c00:	b103      	cbz	r3, c04 <modemPowerSchedule+0x14>
     c02:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
     c04:	4b58      	ldr	r3, [pc, #352]	; (d68 <modemPowerSchedule+0x178>)
     c06:	785b      	ldrb	r3, [r3, #1]
     c08:	2b03      	cmp	r3, #3
     c0a:	d8fa      	bhi.n	c02 <modemPowerSchedule+0x12>
     c0c:	e8df f003 	tbb	[pc, r3]
     c10:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c14:	4b55      	ldr	r3, [pc, #340]	; (d6c <modemPowerSchedule+0x17c>)
     c16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     c22:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     c26:	4c52      	ldr	r4, [pc, #328]	; (d70 <modemPowerSchedule+0x180>)
     c28:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c2c:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     c30:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c34:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c3c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
     c40:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c42:	6299      	str	r1, [r3, #40]	; 0x28
     c44:	484b      	ldr	r0, [pc, #300]	; (d74 <modemPowerSchedule+0x184>)
     c46:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c48:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     c4c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c50:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c54:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     c56:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     c58:	6299      	str	r1, [r3, #40]	; 0x28
     c5a:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     c5c:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     c60:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c64:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c68:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
     c6a:	2201      	movs	r2, #1
     c6c:	4b3e      	ldr	r3, [pc, #248]	; (d68 <modemPowerSchedule+0x178>)
     c6e:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
     c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     c74:	4b40      	ldr	r3, [pc, #256]	; (d78 <modemPowerSchedule+0x188>)
     c76:	4798      	blx	r3
                }
                break;
     c78:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     c7e:	4b3b      	ldr	r3, [pc, #236]	; (d6c <modemPowerSchedule+0x17c>)
     c80:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
     c84:	2202      	movs	r2, #2
     c86:	4b38      	ldr	r3, [pc, #224]	; (d68 <modemPowerSchedule+0x178>)
     c88:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
     c8a:	2032      	movs	r0, #50	; 0x32
     c8c:	4b3a      	ldr	r3, [pc, #232]	; (d78 <modemPowerSchedule+0x188>)
     c8e:	4798      	blx	r3
                }
                break;
     c90:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
     c92:	2203      	movs	r2, #3
     c94:	4b34      	ldr	r3, [pc, #208]	; (d68 <modemPowerSchedule+0x178>)
     c96:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
     c98:	f640 30b8 	movw	r0, #3000	; 0xbb8
     c9c:	4b36      	ldr	r3, [pc, #216]	; (d78 <modemPowerSchedule+0x188>)
     c9e:	4798      	blx	r3
                }
                break;
     ca0:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
     ca2:	2204      	movs	r2, #4
     ca4:	4b30      	ldr	r3, [pc, #192]	; (d68 <modemPowerSchedule+0x178>)
     ca6:	701a      	strb	r2, [r3, #0]
                }
                break;
     ca8:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
     caa:	4b2f      	ldr	r3, [pc, #188]	; (d68 <modemPowerSchedule+0x178>)
     cac:	789b      	ldrb	r3, [r3, #2]
     cae:	b113      	cbz	r3, cb6 <modemPowerSchedule+0xc6>
     cb0:	2b01      	cmp	r3, #1
     cb2:	d017      	beq.n	ce4 <modemPowerSchedule+0xf4>
     cb4:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     cb6:	4b2d      	ldr	r3, [pc, #180]	; (d6c <modemPowerSchedule+0x17c>)
     cb8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     cbc:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     cc2:	629a      	str	r2, [r3, #40]	; 0x28
     cc4:	4a2b      	ldr	r2, [pc, #172]	; (d74 <modemPowerSchedule+0x184>)
     cc6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cc8:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     ccc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cd0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cd4:	6199      	str	r1, [r3, #24]
                case MDM_PWR_RESET_ASSERT:
                {
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     cd6:	2201      	movs	r2, #1
     cd8:	4b23      	ldr	r3, [pc, #140]	; (d68 <modemPowerSchedule+0x178>)
     cda:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
     cdc:	2019      	movs	r0, #25
     cde:	4b26      	ldr	r3, [pc, #152]	; (d78 <modemPowerSchedule+0x188>)
     ce0:	4798      	blx	r3
                }
                break;
     ce2:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ce4:	4b21      	ldr	r3, [pc, #132]	; (d6c <modemPowerSchedule+0x17c>)
     ce6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     cea:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     cf0:	629a      	str	r2, [r3, #40]	; 0x28
     cf2:	4a20      	ldr	r2, [pc, #128]	; (d74 <modemPowerSchedule+0x184>)
     cf4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     cf6:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     cfa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     cfe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d02:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
     d04:	4b18      	ldr	r3, [pc, #96]	; (d68 <modemPowerSchedule+0x178>)
     d06:	2200      	movs	r2, #0
     d08:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     d0a:	705a      	strb	r2, [r3, #1]
                }
                break;
     d0c:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
     d0e:	4b16      	ldr	r3, [pc, #88]	; (d68 <modemPowerSchedule+0x178>)
     d10:	78db      	ldrb	r3, [r3, #3]
     d12:	2b00      	cmp	r3, #0
     d14:	f47f af75 	bne.w	c02 <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d18:	4b14      	ldr	r3, [pc, #80]	; (d6c <modemPowerSchedule+0x17c>)
     d1a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     d1e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d22:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     d26:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     d2a:	4a11      	ldr	r2, [pc, #68]	; (d70 <modemPowerSchedule+0x180>)
     d2c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d30:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     d34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d38:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     d3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     d40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     d44:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     d46:	6298      	str	r0, [r3, #40]	; 0x28
     d48:	4a0a      	ldr	r2, [pc, #40]	; (d74 <modemPowerSchedule+0x184>)
     d4a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     d4c:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     d54:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d58:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     d5a:	2201      	movs	r2, #1
     d5c:	4b02      	ldr	r3, [pc, #8]	; (d68 <modemPowerSchedule+0x178>)
     d5e:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
     d60:	2019      	movs	r0, #25
     d62:	4b05      	ldr	r3, [pc, #20]	; (d78 <modemPowerSchedule+0x188>)
     d64:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
     d66:	e74c      	b.n	c02 <modemPowerSchedule+0x12>
     d68:	20000224 	.word	0x20000224
     d6c:	41008000 	.word	0x41008000
     d70:	c0000001 	.word	0xc0000001
     d74:	c0000008 	.word	0xc0000008
     d78:	00004b5d 	.word	0x00004b5d

00000d7c <ModemProcessTask>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
void ModemProcessTask( void *ModemTaskParam)
{
     d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const TickType_t xDelayMs = pdMS_TO_TICKS(5000UL);
    const TickType_t xDebugPrintDelayMs = pdMS_TO_TICKS(500UL);

    modemPowerStateInit();
     d7e:	4b11      	ldr	r3, [pc, #68]	; (dc4 <ModemProcessTask+0x48>)
     d80:	4798      	blx	r3
    MdmConnect_HttpConnectionInit();
     d82:	4b11      	ldr	r3, [pc, #68]	; (dc8 <ModemProcessTask+0x4c>)
     d84:	4798      	blx	r3

    while(1)
    {
        modemPowerSchedule();
     d86:	4d11      	ldr	r5, [pc, #68]	; (dcc <ModemProcessTask+0x50>)

        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     d88:	4c11      	ldr	r4, [pc, #68]	; (dd0 <ModemProcessTask+0x54>)
        {
            if( xSemaphoreTake( DebugPrintMutex,xDebugPrintDelayMs) == pdTRUE )
     d8a:	4e12      	ldr	r6, [pc, #72]	; (dd4 <ModemProcessTask+0x58>)
     d8c:	e007      	b.n	d9e <ModemProcessTask+0x22>
            {
            	//DEBUG_PRINT("Running Modem Process Task successfully");
            	xSemaphoreGive(DebugPrintMutex);
            }

            MdmConnect_HttpConnectionSchedule();
     d8e:	4b12      	ldr	r3, [pc, #72]	; (dd8 <ModemProcessTask+0x5c>)
     d90:	4798      	blx	r3
			kickWatchDog();
     d92:	4b12      	ldr	r3, [pc, #72]	; (ddc <ModemProcessTask+0x60>)
     d94:	4798      	blx	r3
            vTaskDelay(xDelayMs);
     d96:	f241 3088 	movw	r0, #5000	; 0x1388
     d9a:	4b11      	ldr	r3, [pc, #68]	; (de0 <ModemProcessTask+0x64>)
     d9c:	4798      	blx	r3
        modemPowerSchedule();
     d9e:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     da0:	47a0      	blx	r4
     da2:	2804      	cmp	r0, #4
     da4:	d1fb      	bne.n	d9e <ModemProcessTask+0x22>
            if( xSemaphoreTake( DebugPrintMutex,xDebugPrintDelayMs) == pdTRUE )
     da6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     daa:	6830      	ldr	r0, [r6, #0]
     dac:	4b0d      	ldr	r3, [pc, #52]	; (de4 <ModemProcessTask+0x68>)
     dae:	4798      	blx	r3
     db0:	2801      	cmp	r0, #1
     db2:	d1ec      	bne.n	d8e <ModemProcessTask+0x12>
            	xSemaphoreGive(DebugPrintMutex);
     db4:	2300      	movs	r3, #0
     db6:	461a      	mov	r2, r3
     db8:	4619      	mov	r1, r3
     dba:	6830      	ldr	r0, [r6, #0]
     dbc:	4f0a      	ldr	r7, [pc, #40]	; (de8 <ModemProcessTask+0x6c>)
     dbe:	47b8      	blx	r7
     dc0:	e7e5      	b.n	d8e <ModemProcessTask+0x12>
     dc2:	bf00      	nop
     dc4:	00000bdd 	.word	0x00000bdd
     dc8:	0000051d 	.word	0x0000051d
     dcc:	00000bf1 	.word	0x00000bf1
     dd0:	00000bd1 	.word	0x00000bd1
     dd4:	20003478 	.word	0x20003478
     dd8:	000006f9 	.word	0x000006f9
     ddc:	00001265 	.word	0x00001265
     de0:	00004b5d 	.word	0x00004b5d
     de4:	000042b9 	.word	0x000042b9
     de8:	00003e21 	.word	0x00003e21

00000dec <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
     dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     dee:	4607      	mov	r7, r0
     df0:	460c      	mov	r4, r1
     df2:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
     df4:	492d      	ldr	r1, [pc, #180]	; (eac <modemResponseHandler+0xc0>)
     df6:	4b2e      	ldr	r3, [pc, #184]	; (eb0 <modemResponseHandler+0xc4>)
     df8:	4798      	blx	r3

    if(response != NULL)
     dfa:	2c00      	cmp	r4, #0
     dfc:	d052      	beq.n	ea4 <modemResponseHandler+0xb8>
    {
        switch (cmdData.cmdSet)
     dfe:	4b2b      	ldr	r3, [pc, #172]	; (eac <modemResponseHandler+0xc0>)
     e00:	785b      	ldrb	r3, [r3, #1]
     e02:	b113      	cbz	r3, e0a <modemResponseHandler+0x1e>
     e04:	2b01      	cmp	r3, #1
     e06:	d016      	beq.n	e36 <modemResponseHandler+0x4a>
     e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
     e0a:	4e28      	ldr	r6, [pc, #160]	; (eac <modemResponseHandler+0xc0>)
     e0c:	7537      	strb	r7, [r6, #20]
            	cmdResponse.length = length;
     e0e:	82f5      	strh	r5, [r6, #22]
            	memset(responseBuffer,0,700);
     e10:	f106 071c 	add.w	r7, r6, #28
     e14:	f44f 722f 	mov.w	r2, #700	; 0x2bc
     e18:	2100      	movs	r1, #0
     e1a:	4638      	mov	r0, r7
     e1c:	4b25      	ldr	r3, [pc, #148]	; (eb4 <modemResponseHandler+0xc8>)
     e1e:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
     e20:	462a      	mov	r2, r5
     e22:	4621      	mov	r1, r4
     e24:	4638      	mov	r0, r7
     e26:	4b24      	ldr	r3, [pc, #144]	; (eb8 <modemResponseHandler+0xcc>)
     e28:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
     e2a:	f106 0114 	add.w	r1, r6, #20
     e2e:	4638      	mov	r0, r7
     e30:	4b22      	ldr	r3, [pc, #136]	; (ebc <modemResponseHandler+0xd0>)
     e32:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
     e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if( xSemaphoreTake( DebugPrintMutex,portMAX_DELAY) == pdTRUE )
     e36:	f04f 31ff 	mov.w	r1, #4294967295
     e3a:	4b21      	ldr	r3, [pc, #132]	; (ec0 <modemResponseHandler+0xd4>)
     e3c:	6818      	ldr	r0, [r3, #0]
     e3e:	4b21      	ldr	r3, [pc, #132]	; (ec4 <modemResponseHandler+0xd8>)
     e40:	4798      	blx	r3
     e42:	2801      	cmp	r0, #1
     e44:	d01f      	beq.n	e86 <modemResponseHandler+0x9a>
                {
                	DEBUG_PRINT("Received Connection response in handle");
                	xSemaphoreGive(DebugPrintMutex);
                }

                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
     e46:	4b20      	ldr	r3, [pc, #128]	; (ec8 <modemResponseHandler+0xdc>)
     e48:	6818      	ldr	r0, [r3, #0]
     e4a:	4b20      	ldr	r3, [pc, #128]	; (ecc <modemResponseHandler+0xe0>)
     e4c:	4798      	blx	r3
     e4e:	bb28      	cbnz	r0, e9c <modemResponseHandler+0xb0>
                {
                	cmdResponse.atCmd = cmd;
     e50:	4e16      	ldr	r6, [pc, #88]	; (eac <modemResponseHandler+0xc0>)
     e52:	7537      	strb	r7, [r6, #20]
                	cmdResponse.length = length;
     e54:	82f5      	strh	r5, [r6, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
     e56:	4628      	mov	r0, r5
     e58:	4b1d      	ldr	r3, [pc, #116]	; (ed0 <modemResponseHandler+0xe4>)
     e5a:	4798      	blx	r3
     e5c:	61b0      	str	r0, [r6, #24]

                	if(cmdResponse.response != NULL)
     e5e:	b320      	cbz	r0, eaa <modemResponseHandler+0xbe>
                	{
                		memcpy(cmdResponse.response,response,length);
     e60:	462a      	mov	r2, r5
     e62:	4621      	mov	r1, r4
     e64:	4b14      	ldr	r3, [pc, #80]	; (eb8 <modemResponseHandler+0xcc>)
     e66:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
     e68:	2300      	movs	r3, #0
     e6a:	2264      	movs	r2, #100	; 0x64
     e6c:	f106 0114 	add.w	r1, r6, #20
     e70:	4815      	ldr	r0, [pc, #84]	; (ec8 <modemResponseHandler+0xdc>)
     e72:	6800      	ldr	r0, [r0, #0]
     e74:	4c17      	ldr	r4, [pc, #92]	; (ed4 <modemResponseHandler+0xe8>)
     e76:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
     e78:	2801      	cmp	r0, #1
                		{
                			DEBUG_PRINT("Successfully posted connection Response to Queue");
     e7a:	bf0c      	ite	eq
     e7c:	4816      	ldreq	r0, [pc, #88]	; (ed8 <modemResponseHandler+0xec>)
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
     e7e:	4817      	ldrne	r0, [pc, #92]	; (edc <modemResponseHandler+0xf0>)
     e80:	4b17      	ldr	r3, [pc, #92]	; (ee0 <modemResponseHandler+0xf4>)
     e82:	4798      	blx	r3
     e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                	DEBUG_PRINT("Received Connection response in handle");
     e86:	4817      	ldr	r0, [pc, #92]	; (ee4 <modemResponseHandler+0xf8>)
     e88:	4b15      	ldr	r3, [pc, #84]	; (ee0 <modemResponseHandler+0xf4>)
     e8a:	4798      	blx	r3
                	xSemaphoreGive(DebugPrintMutex);
     e8c:	2300      	movs	r3, #0
     e8e:	461a      	mov	r2, r3
     e90:	4619      	mov	r1, r3
     e92:	480b      	ldr	r0, [pc, #44]	; (ec0 <modemResponseHandler+0xd4>)
     e94:	6800      	ldr	r0, [r0, #0]
     e96:	4e0f      	ldr	r6, [pc, #60]	; (ed4 <modemResponseHandler+0xe8>)
     e98:	47b0      	blx	r6
     e9a:	e7d4      	b.n	e46 <modemResponseHandler+0x5a>
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
     e9c:	4812      	ldr	r0, [pc, #72]	; (ee8 <modemResponseHandler+0xfc>)
     e9e:	4b10      	ldr	r3, [pc, #64]	; (ee0 <modemResponseHandler+0xf4>)
     ea0:	4798      	blx	r3
     ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
     ea4:	4811      	ldr	r0, [pc, #68]	; (eec <modemResponseHandler+0x100>)
     ea6:	4b0e      	ldr	r3, [pc, #56]	; (ee0 <modemResponseHandler+0xf4>)
     ea8:	4798      	blx	r3
     eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     eac:	20000228 	.word	0x20000228
     eb0:	000003a9 	.word	0x000003a9
     eb4:	0000568f 	.word	0x0000568f
     eb8:	00005645 	.word	0x00005645
     ebc:	00000b0d 	.word	0x00000b0d
     ec0:	20003478 	.word	0x20003478
     ec4:	000042b9 	.word	0x000042b9
     ec8:	20003450 	.word	0x20003450
     ecc:	00004499 	.word	0x00004499
     ed0:	00003a25 	.word	0x00003a25
     ed4:	00003e21 	.word	0x00003e21
     ed8:	00006bd0 	.word	0x00006bd0
     edc:	00006c04 	.word	0x00006c04
     ee0:	0000112d 	.word	0x0000112d
     ee4:	00006ba8 	.word	0x00006ba8
     ee8:	00006c34 	.word	0x00006c34
     eec:	00006c60 	.word	0x00006c60

00000ef0 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Apps/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
     ef0:	b570      	push	{r4, r5, r6, lr}
     ef2:	b086      	sub	sp, #24

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
     ef4:	4d12      	ldr	r5, [pc, #72]	; (f40 <ModemRxTask+0x50>)
		else
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
			DEBUG_PRINT("Notification Not Received to Rx Task");
     ef6:	4e13      	ldr	r6, [pc, #76]	; (f44 <ModemRxTask+0x54>)
     ef8:	4c13      	ldr	r4, [pc, #76]	; (f48 <ModemRxTask+0x58>)
     efa:	e012      	b.n	f22 <ModemRxTask+0x32>
			getModemCommandData(atCmd, &cmdData);
     efc:	4669      	mov	r1, sp
     efe:	f89d 0017 	ldrb.w	r0, [sp, #23]
     f02:	4b12      	ldr	r3, [pc, #72]	; (f4c <ModemRxTask+0x5c>)
     f04:	4798      	blx	r3
			DEBUG_PRINT("Notification Received to Rx Task from ISR");
     f06:	4812      	ldr	r0, [pc, #72]	; (f50 <ModemRxTask+0x60>)
     f08:	47a0      	blx	r4
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
     f0a:	f89d 0000 	ldrb.w	r0, [sp]
     f0e:	4b11      	ldr	r3, [pc, #68]	; (f54 <ModemRxTask+0x64>)
     f10:	4798      	blx	r3
     f12:	b190      	cbz	r0, f3a <ModemRxTask+0x4a>
				DEBUG_PRINT("Successfully Parsed the last command");
     f14:	4810      	ldr	r0, [pc, #64]	; (f58 <ModemRxTask+0x68>)
     f16:	47a0      	blx	r4
				mdmParser_SetLastCmdProcessed(true);
     f18:	2001      	movs	r0, #1
     f1a:	4b10      	ldr	r3, [pc, #64]	; (f5c <ModemRxTask+0x6c>)
     f1c:	4798      	blx	r3
		}
		kickWatchDog();
     f1e:	4b10      	ldr	r3, [pc, #64]	; (f60 <ModemRxTask+0x70>)
     f20:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
     f22:	f04f 33ff 	mov.w	r3, #4294967295
     f26:	f10d 0217 	add.w	r2, sp, #23
     f2a:	4619      	mov	r1, r3
     f2c:	2000      	movs	r0, #0
     f2e:	47a8      	blx	r5
		if(xResult == pdPASS)
     f30:	2801      	cmp	r0, #1
     f32:	d0e3      	beq.n	efc <ModemRxTask+0xc>
			DEBUG_PRINT("Notification Not Received to Rx Task");
     f34:	4630      	mov	r0, r6
     f36:	47a0      	blx	r4
     f38:	e7f1      	b.n	f1e <ModemRxTask+0x2e>
				DEBUG_PRINT("ERROR: Command Parsing Failed");
     f3a:	480a      	ldr	r0, [pc, #40]	; (f64 <ModemRxTask+0x74>)
     f3c:	47a0      	blx	r4
     f3e:	e7ee      	b.n	f1e <ModemRxTask+0x2e>
     f40:	0000505d 	.word	0x0000505d
     f44:	00006e74 	.word	0x00006e74
     f48:	0000112d 	.word	0x0000112d
     f4c:	000003a9 	.word	0x000003a9
     f50:	00006e00 	.word	0x00006e00
     f54:	000003c9 	.word	0x000003c9
     f58:	00006e2c 	.word	0x00006e2c
     f5c:	000004b9 	.word	0x000004b9
     f60:	00001265 	.word	0x00001265
     f64:	00006e54 	.word	0x00006e54

00000f68 <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
     f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(1000UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
     f6a:	2300      	movs	r3, #0
     f6c:	461a      	mov	r2, r3
     f6e:	4619      	mov	r1, r3
     f70:	482a      	ldr	r0, [pc, #168]	; (101c <ModemTxTask+0xb4>)
     f72:	6800      	ldr	r0, [r0, #0]
     f74:	4c2a      	ldr	r4, [pc, #168]	; (1020 <ModemTxTask+0xb8>)
     f76:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     f78:	4c2a      	ldr	r4, [pc, #168]	; (1024 <ModemTxTask+0xbc>)
	
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
		{
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
     f7a:	4d2b      	ldr	r5, [pc, #172]	; (1028 <ModemTxTask+0xc0>)
** Description:        Transmits Data to Modem
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	getModemCommandData(atCmd, &ModemCmdData);
     f7c:	f105 0608 	add.w	r6, r5, #8
     f80:	e00c      	b.n	f9c <ModemTxTask+0x34>
				xSemaphoreGive(AtTxQueueLoadSemaphore);				
     f82:	2300      	movs	r3, #0
     f84:	461a      	mov	r2, r3
     f86:	4619      	mov	r1, r3
     f88:	4824      	ldr	r0, [pc, #144]	; (101c <ModemTxTask+0xb4>)
     f8a:	6800      	ldr	r0, [r0, #0]
     f8c:	4f24      	ldr	r7, [pc, #144]	; (1020 <ModemTxTask+0xb8>)
     f8e:	47b8      	blx	r7
			kickWatchDog();
     f90:	4b26      	ldr	r3, [pc, #152]	; (102c <ModemTxTask+0xc4>)
     f92:	4798      	blx	r3
			vTaskDelay(xDelayMs);
     f94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f98:	4b25      	ldr	r3, [pc, #148]	; (1030 <ModemTxTask+0xc8>)
     f9a:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     f9c:	47a0      	blx	r4
     f9e:	2804      	cmp	r0, #4
     fa0:	d1fc      	bne.n	f9c <ModemTxTask+0x34>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     fa2:	4b24      	ldr	r3, [pc, #144]	; (1034 <ModemTxTask+0xcc>)
     fa4:	6818      	ldr	r0, [r3, #0]
     fa6:	4b24      	ldr	r3, [pc, #144]	; (1038 <ModemTxTask+0xd0>)
     fa8:	4798      	blx	r3
     faa:	2800      	cmp	r0, #0
     fac:	d0f0      	beq.n	f90 <ModemTxTask+0x28>
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     fae:	2100      	movs	r1, #0
     fb0:	4b1a      	ldr	r3, [pc, #104]	; (101c <ModemTxTask+0xb4>)
     fb2:	6818      	ldr	r0, [r3, #0]
     fb4:	4b21      	ldr	r3, [pc, #132]	; (103c <ModemTxTask+0xd4>)
     fb6:	4798      	blx	r3
     fb8:	2801      	cmp	r0, #1
     fba:	d1e9      	bne.n	f90 <ModemTxTask+0x28>
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
     fbc:	2264      	movs	r2, #100	; 0x64
     fbe:	4629      	mov	r1, r5
     fc0:	4b1c      	ldr	r3, [pc, #112]	; (1034 <ModemTxTask+0xcc>)
     fc2:	6818      	ldr	r0, [r3, #0]
     fc4:	4b1e      	ldr	r3, [pc, #120]	; (1040 <ModemTxTask+0xd8>)
     fc6:	4798      	blx	r3
			if(xResult == pdPASS)
     fc8:	2801      	cmp	r0, #1
     fca:	d1e1      	bne.n	f90 <ModemTxTask+0x28>
				ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
     fcc:	786f      	ldrb	r7, [r5, #1]
	getModemCommandData(atCmd, &ModemCmdData);
     fce:	4631      	mov	r1, r6
     fd0:	4638      	mov	r0, r7
     fd2:	4b1c      	ldr	r3, [pc, #112]	; (1044 <ModemTxTask+0xdc>)
     fd4:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
     fd6:	4b1c      	ldr	r3, [pc, #112]	; (1048 <ModemTxTask+0xe0>)
     fd8:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
     fda:	7c29      	ldrb	r1, [r5, #16]
     fdc:	68e8      	ldr	r0, [r5, #12]
     fde:	4b1b      	ldr	r3, [pc, #108]	; (104c <ModemTxTask+0xe4>)
     fe0:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
     fe2:	4638      	mov	r0, r7
     fe4:	4b1a      	ldr	r3, [pc, #104]	; (1050 <ModemTxTask+0xe8>)
     fe6:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
     fe8:	2000      	movs	r0, #0
     fea:	4b1a      	ldr	r3, [pc, #104]	; (1054 <ModemTxTask+0xec>)
     fec:	4798      	blx	r3
				DEBUG_PRINT("Transmitted a command to Modem");
     fee:	481a      	ldr	r0, [pc, #104]	; (1058 <ModemTxTask+0xf0>)
     ff0:	4b1a      	ldr	r3, [pc, #104]	; (105c <ModemTxTask+0xf4>)
     ff2:	4798      	blx	r3
				if( xSemaphoreTake( DebugPrintMutex,portMAX_DELAY) == pdTRUE )
     ff4:	f04f 31ff 	mov.w	r1, #4294967295
     ff8:	4b19      	ldr	r3, [pc, #100]	; (1060 <ModemTxTask+0xf8>)
     ffa:	6818      	ldr	r0, [r3, #0]
     ffc:	4b0f      	ldr	r3, [pc, #60]	; (103c <ModemTxTask+0xd4>)
     ffe:	4798      	blx	r3
    1000:	2801      	cmp	r0, #1
    1002:	d1be      	bne.n	f82 <ModemTxTask+0x1a>
					DEBUG_PRINT("Transmitted a command to Modem");
    1004:	4814      	ldr	r0, [pc, #80]	; (1058 <ModemTxTask+0xf0>)
    1006:	4b15      	ldr	r3, [pc, #84]	; (105c <ModemTxTask+0xf4>)
    1008:	4798      	blx	r3
					xSemaphoreGive(DebugPrintMutex);
    100a:	2300      	movs	r3, #0
    100c:	461a      	mov	r2, r3
    100e:	4619      	mov	r1, r3
    1010:	4813      	ldr	r0, [pc, #76]	; (1060 <ModemTxTask+0xf8>)
    1012:	6800      	ldr	r0, [r0, #0]
    1014:	4f02      	ldr	r7, [pc, #8]	; (1020 <ModemTxTask+0xb8>)
    1016:	47b8      	blx	r7
    1018:	e7b3      	b.n	f82 <ModemTxTask+0x1a>
    101a:	bf00      	nop
    101c:	2000347c 	.word	0x2000347c
    1020:	00003e21 	.word	0x00003e21
    1024:	00000bd1 	.word	0x00000bd1
    1028:	20000504 	.word	0x20000504
    102c:	00001265 	.word	0x00001265
    1030:	00004b5d 	.word	0x00004b5d
    1034:	20003474 	.word	0x20003474
    1038:	00004499 	.word	0x00004499
    103c:	000042b9 	.word	0x000042b9
    1040:	00004131 	.word	0x00004131
    1044:	000003a9 	.word	0x000003a9
    1048:	000008e5 	.word	0x000008e5
    104c:	00000869 	.word	0x00000869
    1050:	000004c5 	.word	0x000004c5
    1054:	000004b9 	.word	0x000004b9
    1058:	00006e9c 	.word	0x00006e9c
    105c:	0000112d 	.word	0x0000112d
    1060:	20003478 	.word	0x20003478

00001064 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
    1064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1068:	4604      	mov	r4, r0
    106a:	460e      	mov	r6, r1
    106c:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
    106e:	4d0e      	ldr	r5, [pc, #56]	; (10a8 <usart_async_write+0x44>)
    1070:	4620      	mov	r0, r4
    1072:	47a8      	blx	r5
    1074:	2800      	cmp	r0, #0
    1076:	d0fb      	beq.n	1070 <usart_async_write+0xc>
    1078:	3e01      	subs	r6, #1
    107a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 10ac <usart_async_write+0x48>
    107e:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
    1080:	f8df a02c 	ldr.w	sl, [pc, #44]	; 10b0 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
    1084:	4d08      	ldr	r5, [pc, #32]	; (10a8 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
    1086:	7873      	ldrb	r3, [r6, #1]
    1088:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
    108c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1090:	4620      	mov	r0, r4
    1092:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
    1094:	4620      	mov	r0, r4
    1096:	47a8      	blx	r5
    1098:	2800      	cmp	r0, #0
    109a:	d0fb      	beq.n	1094 <usart_async_write+0x30>
		;
	} while (++offset < length);
    109c:	3701      	adds	r7, #1
    109e:	454f      	cmp	r7, r9
    10a0:	d3f1      	bcc.n	1086 <usart_async_write+0x22>

	return (int32_t)offset;
}
    10a2:	4638      	mov	r0, r7
    10a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10a8:	0000293f 	.word	0x0000293f
    10ac:	20000520 	.word	0x20000520
    10b0:	00002931 	.word	0x00002931

000010b4 <SerialDebugTxByteSentCallBack>:
    10b4:	2302      	movs	r3, #2
    10b6:	7603      	strb	r3, [r0, #24]
    10b8:	4770      	bx	lr

000010ba <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    10ba:	2380      	movs	r3, #128	; 0x80
    10bc:	7603      	strb	r3, [r0, #24]
    10be:	4770      	bx	lr

000010c0 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
    10c0:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
    10c2:	4c05      	ldr	r4, [pc, #20]	; (10d8 <SerialDebugPrintInit+0x18>)
    10c4:	4905      	ldr	r1, [pc, #20]	; (10dc <SerialDebugPrintInit+0x1c>)
    10c6:	4620      	mov	r0, r4
    10c8:	4b05      	ldr	r3, [pc, #20]	; (10e0 <SerialDebugPrintInit+0x20>)
    10ca:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
    10cc:	2201      	movs	r2, #1
    10ce:	4611      	mov	r1, r2
    10d0:	4620      	mov	r0, r4
    10d2:	4b04      	ldr	r3, [pc, #16]	; (10e4 <SerialDebugPrintInit+0x24>)
    10d4:	4798      	blx	r3
    10d6:	bd10      	pop	{r4, pc}
    10d8:	20000040 	.word	0x20000040
    10dc:	43000400 	.word	0x43000400
    10e0:	000028a9 	.word	0x000028a9
    10e4:	00002955 	.word	0x00002955

000010e8 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
    10e8:	b570      	push	{r4, r5, r6, lr}
    10ea:	4605      	mov	r5, r0
    10ec:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
    10ee:	4c05      	ldr	r4, [pc, #20]	; (1104 <SerialDebugPrint+0x1c>)
    10f0:	4620      	mov	r0, r4
    10f2:	4b05      	ldr	r3, [pc, #20]	; (1108 <SerialDebugPrint+0x20>)
    10f4:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
    10f6:	4632      	mov	r2, r6
    10f8:	4629      	mov	r1, r5
    10fa:	4620      	mov	r0, r4
    10fc:	4b03      	ldr	r3, [pc, #12]	; (110c <SerialDebugPrint+0x24>)
    10fe:	4798      	blx	r3
    1100:	bd70      	pop	{r4, r5, r6, pc}
    1102:	bf00      	nop
    1104:	20000040 	.word	0x20000040
    1108:	0000291d 	.word	0x0000291d
    110c:	00001065 	.word	0x00001065

00001110 <SerialDebugTxDoneCallBack>:
{
    1110:	b510      	push	{r4, lr}
    1112:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    1114:	2116      	movs	r1, #22
    1116:	4803      	ldr	r0, [pc, #12]	; (1124 <SerialDebugTxDoneCallBack+0x14>)
    1118:	4b03      	ldr	r3, [pc, #12]	; (1128 <SerialDebugTxDoneCallBack+0x18>)
    111a:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    111c:	2301      	movs	r3, #1
    111e:	7623      	strb	r3, [r4, #24]
    1120:	bd10      	pop	{r4, pc}
    1122:	bf00      	nop
    1124:	00006ebc 	.word	0x00006ebc
    1128:	000010e9 	.word	0x000010e9

0000112c <SerialStringPrint>:
}


void SerialStringPrint(const uint8_t *const dataToPrint)
{
    112c:	4770      	bx	lr
	...

00001130 <ConsoleDebugPrint>:
	
	#endif
}

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
    1130:	b530      	push	{r4, r5, lr}
    1132:	b09b      	sub	sp, #108	; 0x6c
    1134:	4605      	mov	r5, r0
    1136:	460c      	mov	r4, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
    1138:	2264      	movs	r2, #100	; 0x64
    113a:	2100      	movs	r1, #0
    113c:	a801      	add	r0, sp, #4
    113e:	4b09      	ldr	r3, [pc, #36]	; (1164 <ConsoleDebugPrint+0x34>)
    1140:	4798      	blx	r3

	if(intData != 0)
    1142:	b90c      	cbnz	r4, 1148 <ConsoleDebugPrint+0x18>
	{
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
	}
}
    1144:	b01b      	add	sp, #108	; 0x6c
    1146:	bd30      	pop	{r4, r5, pc}
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    1148:	4623      	mov	r3, r4
    114a:	462a      	mov	r2, r5
    114c:	4906      	ldr	r1, [pc, #24]	; (1168 <ConsoleDebugPrint+0x38>)
    114e:	a801      	add	r0, sp, #4
    1150:	4c06      	ldr	r4, [pc, #24]	; (116c <ConsoleDebugPrint+0x3c>)
    1152:	47a0      	blx	r4
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    1154:	a801      	add	r0, sp, #4
    1156:	4b06      	ldr	r3, [pc, #24]	; (1170 <ConsoleDebugPrint+0x40>)
    1158:	4798      	blx	r3
    115a:	b281      	uxth	r1, r0
    115c:	a801      	add	r0, sp, #4
    115e:	4b05      	ldr	r3, [pc, #20]	; (1174 <ConsoleDebugPrint+0x44>)
    1160:	4798      	blx	r3
}
    1162:	e7ef      	b.n	1144 <ConsoleDebugPrint+0x14>
    1164:	0000568f 	.word	0x0000568f
    1168:	00006ee0 	.word	0x00006ee0
    116c:	00005819 	.word	0x00005819
    1170:	00005871 	.word	0x00005871
    1174:	000010e9 	.word	0x000010e9

00001178 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    1178:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    117a:	2204      	movs	r2, #4
    117c:	4b0b      	ldr	r3, [pc, #44]	; (11ac <SERCOM5_2_Handler+0x34>)
    117e:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    1180:	4d0b      	ldr	r5, [pc, #44]	; (11b0 <SERCOM5_2_Handler+0x38>)
    1182:	4c0c      	ldr	r4, [pc, #48]	; (11b4 <SERCOM5_2_Handler+0x3c>)
    1184:	4628      	mov	r0, r5
    1186:	47a0      	blx	r4
    1188:	2800      	cmp	r0, #0
    118a:	d0fb      	beq.n	1184 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    118c:	4808      	ldr	r0, [pc, #32]	; (11b0 <SERCOM5_2_Handler+0x38>)
    118e:	4b0a      	ldr	r3, [pc, #40]	; (11b8 <SERCOM5_2_Handler+0x40>)
    1190:	4798      	blx	r3
    1192:	490a      	ldr	r1, [pc, #40]	; (11bc <SERCOM5_2_Handler+0x44>)
    1194:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    1196:	2300      	movs	r3, #0
    1198:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    119a:	4c09      	ldr	r4, [pc, #36]	; (11c0 <SERCOM5_2_Handler+0x48>)
    119c:	4620      	mov	r0, r4
    119e:	4b09      	ldr	r3, [pc, #36]	; (11c4 <SERCOM5_2_Handler+0x4c>)
    11a0:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    11a2:	2105      	movs	r1, #5
    11a4:	4620      	mov	r0, r4
    11a6:	4b08      	ldr	r3, [pc, #32]	; (11c8 <SERCOM5_2_Handler+0x50>)
    11a8:	4798      	blx	r3
    11aa:	bd38      	pop	{r3, r4, r5, pc}
    11ac:	43000400 	.word	0x43000400
    11b0:	20000040 	.word	0x20000040
    11b4:	00002949 	.word	0x00002949
    11b8:	00002937 	.word	0x00002937
    11bc:	20003c9c 	.word	0x20003c9c
    11c0:	20003ca0 	.word	0x20003ca0
    11c4:	00005861 	.word	0x00005861
    11c8:	000010e9 	.word	0x000010e9

000011cc <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    11cc:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    11ce:	4b0a      	ldr	r3, [pc, #40]	; (11f8 <configureWatchDogTimeOut+0x2c>)
    11d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    11d4:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    11d6:	4c09      	ldr	r4, [pc, #36]	; (11fc <configureWatchDogTimeOut+0x30>)
    11d8:	6820      	ldr	r0, [r4, #0]
    11da:	2279      	movs	r2, #121	; 0x79
    11dc:	4908      	ldr	r1, [pc, #32]	; (1200 <configureWatchDogTimeOut+0x34>)
    11de:	3000      	adds	r0, #0
    11e0:	bf18      	it	ne
    11e2:	2001      	movne	r0, #1
    11e4:	4b07      	ldr	r3, [pc, #28]	; (1204 <configureWatchDogTimeOut+0x38>)
    11e6:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    11e8:	462a      	mov	r2, r5
    11ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    11ee:	4620      	mov	r0, r4
    11f0:	4b05      	ldr	r3, [pc, #20]	; (1208 <configureWatchDogTimeOut+0x3c>)
    11f2:	4798      	blx	r3
    11f4:	bd38      	pop	{r3, r4, r5, pc}
    11f6:	bf00      	nop
    11f8:	2000005c 	.word	0x2000005c
    11fc:	20003d7c 	.word	0x20003d7c
    1200:	00006eec 	.word	0x00006eec
    1204:	00001e29 	.word	0x00001e29
    1208:	000032f5 	.word	0x000032f5

0000120c <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    120c:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    120e:	2002      	movs	r0, #2
    1210:	4b07      	ldr	r3, [pc, #28]	; (1230 <enableWatchDogTimer+0x24>)
    1212:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1214:	4c07      	ldr	r4, [pc, #28]	; (1234 <enableWatchDogTimer+0x28>)
    1216:	6820      	ldr	r0, [r4, #0]
    1218:	2296      	movs	r2, #150	; 0x96
    121a:	4907      	ldr	r1, [pc, #28]	; (1238 <enableWatchDogTimer+0x2c>)
    121c:	3000      	adds	r0, #0
    121e:	bf18      	it	ne
    1220:	2001      	movne	r0, #1
    1222:	4b06      	ldr	r3, [pc, #24]	; (123c <enableWatchDogTimer+0x30>)
    1224:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    1226:	4620      	mov	r0, r4
    1228:	4b05      	ldr	r3, [pc, #20]	; (1240 <enableWatchDogTimer+0x34>)
    122a:	4798      	blx	r3
    122c:	bd10      	pop	{r4, pc}
    122e:	bf00      	nop
    1230:	000011cd 	.word	0x000011cd
    1234:	20003d7c 	.word	0x20003d7c
    1238:	00006eec 	.word	0x00006eec
    123c:	00001e29 	.word	0x00001e29
    1240:	00003411 	.word	0x00003411

00001244 <atmel_start_init>:
{
    1244:	b508      	push	{r3, lr}
    system_init();
    1246:	4b04      	ldr	r3, [pc, #16]	; (1258 <atmel_start_init+0x14>)
    1248:	4798      	blx	r3
    delay_ms(1000);
    124a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    124e:	4b03      	ldr	r3, [pc, #12]	; (125c <atmel_start_init+0x18>)
    1250:	4798      	blx	r3
    enableWatchDogTimer();
    1252:	4b03      	ldr	r3, [pc, #12]	; (1260 <atmel_start_init+0x1c>)
    1254:	4798      	blx	r3
    1256:	bd08      	pop	{r3, pc}
    1258:	000019e1 	.word	0x000019e1
    125c:	00001bd1 	.word	0x00001bd1
    1260:	0000120d 	.word	0x0000120d

00001264 <kickWatchDog>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
int32_t kickWatchDog(void)
{	
    1264:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1266:	4c06      	ldr	r4, [pc, #24]	; (1280 <kickWatchDog+0x1c>)
    1268:	6820      	ldr	r0, [r4, #0]
    126a:	22b3      	movs	r2, #179	; 0xb3
    126c:	4905      	ldr	r1, [pc, #20]	; (1284 <kickWatchDog+0x20>)
    126e:	3000      	adds	r0, #0
    1270:	bf18      	it	ne
    1272:	2001      	movne	r0, #1
    1274:	4b04      	ldr	r3, [pc, #16]	; (1288 <kickWatchDog+0x24>)
    1276:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    1278:	4620      	mov	r0, r4
    127a:	4b04      	ldr	r3, [pc, #16]	; (128c <kickWatchDog+0x28>)
    127c:	4798      	blx	r3
		status = ERR_DENIED;
		//DEBUG_PRINT("Not able to Kick WDT");
	}

	return status;
}
    127e:	bd10      	pop	{r4, pc}
    1280:	20003d7c 	.word	0x20003d7c
    1284:	00006eec 	.word	0x00006eec
    1288:	00001e29 	.word	0x00001e29
    128c:	0000344d 	.word	0x0000344d

00001290 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1290:	e7fe      	b.n	1290 <Dummy_Handler>
	...

00001294 <Reset_Handler>:
{
    1294:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    1296:	4b1c      	ldr	r3, [pc, #112]	; (1308 <Reset_Handler+0x74>)
    1298:	4a1c      	ldr	r2, [pc, #112]	; (130c <Reset_Handler+0x78>)
    129a:	429a      	cmp	r2, r3
    129c:	d010      	beq.n	12c0 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    129e:	4b1c      	ldr	r3, [pc, #112]	; (1310 <Reset_Handler+0x7c>)
    12a0:	4a19      	ldr	r2, [pc, #100]	; (1308 <Reset_Handler+0x74>)
    12a2:	429a      	cmp	r2, r3
    12a4:	d20c      	bcs.n	12c0 <Reset_Handler+0x2c>
    12a6:	3b01      	subs	r3, #1
    12a8:	1a9b      	subs	r3, r3, r2
    12aa:	f023 0303 	bic.w	r3, r3, #3
    12ae:	3304      	adds	r3, #4
    12b0:	4413      	add	r3, r2
    12b2:	4916      	ldr	r1, [pc, #88]	; (130c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    12b4:	f851 0b04 	ldr.w	r0, [r1], #4
    12b8:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    12bc:	429a      	cmp	r2, r3
    12be:	d1f9      	bne.n	12b4 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    12c0:	4b14      	ldr	r3, [pc, #80]	; (1314 <Reset_Handler+0x80>)
    12c2:	4a15      	ldr	r2, [pc, #84]	; (1318 <Reset_Handler+0x84>)
    12c4:	429a      	cmp	r2, r3
    12c6:	d20a      	bcs.n	12de <Reset_Handler+0x4a>
    12c8:	3b01      	subs	r3, #1
    12ca:	1a9b      	subs	r3, r3, r2
    12cc:	f023 0303 	bic.w	r3, r3, #3
    12d0:	3304      	adds	r3, #4
    12d2:	4413      	add	r3, r2
                *pDest++ = 0;
    12d4:	2100      	movs	r1, #0
    12d6:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    12da:	4293      	cmp	r3, r2
    12dc:	d1fb      	bne.n	12d6 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    12de:	4b0f      	ldr	r3, [pc, #60]	; (131c <Reset_Handler+0x88>)
    12e0:	4a0f      	ldr	r2, [pc, #60]	; (1320 <Reset_Handler+0x8c>)
    12e2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    12e6:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    12e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    12ec:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    12f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12f8:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    12fc:	4b09      	ldr	r3, [pc, #36]	; (1324 <Reset_Handler+0x90>)
    12fe:	4798      	blx	r3
        main();
    1300:	4b09      	ldr	r3, [pc, #36]	; (1328 <Reset_Handler+0x94>)
    1302:	4798      	blx	r3
    1304:	e7fe      	b.n	1304 <Reset_Handler+0x70>
    1306:	bf00      	nop
    1308:	20000000 	.word	0x20000000
    130c:	00007644 	.word	0x00007644
    1310:	2000018c 	.word	0x2000018c
    1314:	20003e68 	.word	0x20003e68
    1318:	20000190 	.word	0x20000190
    131c:	e000ed00 	.word	0xe000ed00
    1320:	00000000 	.word	0x00000000
    1324:	000055fd 	.word	0x000055fd
    1328:	00003505 	.word	0x00003505

0000132c <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
    132c:	4a04      	ldr	r2, [pc, #16]	; (1340 <AC_0_CLOCK_init+0x14>)
    132e:	69d3      	ldr	r3, [r2, #28]
    1330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1334:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1336:	2240      	movs	r2, #64	; 0x40
    1338:	4b02      	ldr	r3, [pc, #8]	; (1344 <AC_0_CLOCK_init+0x18>)
    133a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    133e:	4770      	bx	lr
    1340:	40000800 	.word	0x40000800
    1344:	40001c00 	.word	0x40001c00

00001348 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
    1348:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
    134a:	4b03      	ldr	r3, [pc, #12]	; (1358 <AC_0_init+0x10>)
    134c:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
    134e:	4903      	ldr	r1, [pc, #12]	; (135c <AC_0_init+0x14>)
    1350:	4803      	ldr	r0, [pc, #12]	; (1360 <AC_0_init+0x18>)
    1352:	4b04      	ldr	r3, [pc, #16]	; (1364 <AC_0_init+0x1c>)
    1354:	4798      	blx	r3
    1356:	bd08      	pop	{r3, pc}
    1358:	0000132d 	.word	0x0000132d
    135c:	42002000 	.word	0x42002000
    1360:	20003d48 	.word	0x20003d48
    1364:	00001b01 	.word	0x00001b01

00001368 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1368:	4b5d      	ldr	r3, [pc, #372]	; (14e0 <ADC_0_PORT_init+0x178>)
    136a:	2204      	movs	r2, #4
    136c:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    136e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1372:	629a      	str	r2, [r3, #40]	; 0x28
    1374:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1378:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    137a:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    137e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1382:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1386:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    138a:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    138e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1392:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1396:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    139a:	2108      	movs	r1, #8
    139c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    139e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    13a2:	6299      	str	r1, [r3, #40]	; 0x28
    13a4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13a6:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    13aa:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13ae:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13b2:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13b6:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    13ba:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    13be:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13c2:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13c6:	f44f 7180 	mov.w	r1, #256	; 0x100
    13ca:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13ce:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    13d2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    13d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13da:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    13de:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13e2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13e6:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13ea:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    13ee:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    13f2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13f6:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13fa:	f44f 7100 	mov.w	r1, #512	; 0x200
    13fe:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1402:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1406:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    140a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    140e:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    1412:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1416:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    141a:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    141e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1422:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1426:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    142a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    142e:	2110      	movs	r1, #16
    1430:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1432:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1436:	6299      	str	r1, [r3, #40]	; 0x28
    1438:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    143a:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    143e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1442:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1446:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    144a:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    144e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1452:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1456:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    145a:	2120      	movs	r1, #32
    145c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    145e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1462:	6299      	str	r1, [r3, #40]	; 0x28
    1464:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1466:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    146a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    146e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1472:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1476:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    147a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    147e:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1482:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1486:	2140      	movs	r1, #64	; 0x40
    1488:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    148a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    148e:	6299      	str	r1, [r3, #40]	; 0x28
    1490:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1492:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    1496:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    149a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    149e:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    14a2:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    14a6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    14aa:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    14ae:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    14b2:	2180      	movs	r1, #128	; 0x80
    14b4:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    14b6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    14ba:	6299      	str	r1, [r3, #40]	; 0x28
    14bc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    14be:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    14c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    14c6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    14ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    14ce:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    14d2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    14d6:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    14da:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    14de:	4770      	bx	lr
    14e0:	41008000 	.word	0x41008000

000014e4 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    14e4:	4a04      	ldr	r2, [pc, #16]	; (14f8 <ADC_0_CLOCK_init+0x14>)
    14e6:	6a13      	ldr	r3, [r2, #32]
    14e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    14ec:	6213      	str	r3, [r2, #32]
    14ee:	2241      	movs	r2, #65	; 0x41
    14f0:	4b02      	ldr	r3, [pc, #8]	; (14fc <ADC_0_CLOCK_init+0x18>)
    14f2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    14f6:	4770      	bx	lr
    14f8:	40000800 	.word	0x40000800
    14fc:	40001c00 	.word	0x40001c00

00001500 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    1500:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    1502:	4b05      	ldr	r3, [pc, #20]	; (1518 <ADC_0_init+0x18>)
    1504:	4798      	blx	r3
	ADC_0_PORT_init();
    1506:	4b05      	ldr	r3, [pc, #20]	; (151c <ADC_0_init+0x1c>)
    1508:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    150a:	2200      	movs	r2, #0
    150c:	4904      	ldr	r1, [pc, #16]	; (1520 <ADC_0_init+0x20>)
    150e:	4805      	ldr	r0, [pc, #20]	; (1524 <ADC_0_init+0x24>)
    1510:	4b05      	ldr	r3, [pc, #20]	; (1528 <ADC_0_init+0x28>)
    1512:	4798      	blx	r3
    1514:	bd08      	pop	{r3, pc}
    1516:	bf00      	nop
    1518:	000014e5 	.word	0x000014e5
    151c:	00001369 	.word	0x00001369
    1520:	43001c00 	.word	0x43001c00
    1524:	20003d58 	.word	0x20003d58
    1528:	00001b31 	.word	0x00001b31

0000152c <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    152c:	4a04      	ldr	r2, [pc, #16]	; (1540 <ADC_1_CLOCK_init+0x14>)
    152e:	6a13      	ldr	r3, [r2, #32]
    1530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1534:	6213      	str	r3, [r2, #32]
    1536:	2240      	movs	r2, #64	; 0x40
    1538:	4b02      	ldr	r3, [pc, #8]	; (1544 <ADC_1_CLOCK_init+0x18>)
    153a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    153e:	4770      	bx	lr
    1540:	40000800 	.word	0x40000800
    1544:	40001c00 	.word	0x40001c00

00001548 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
    1548:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
    154a:	4b04      	ldr	r3, [pc, #16]	; (155c <ADC_1_init+0x14>)
    154c:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
    154e:	2200      	movs	r2, #0
    1550:	4903      	ldr	r1, [pc, #12]	; (1560 <ADC_1_init+0x18>)
    1552:	4804      	ldr	r0, [pc, #16]	; (1564 <ADC_1_init+0x1c>)
    1554:	4b04      	ldr	r3, [pc, #16]	; (1568 <ADC_1_init+0x20>)
    1556:	4798      	blx	r3
    1558:	bd08      	pop	{r3, pc}
    155a:	bf00      	nop
    155c:	0000152d 	.word	0x0000152d
    1560:	43002000 	.word	0x43002000
    1564:	20003e10 	.word	0x20003e10
    1568:	00001b31 	.word	0x00001b31

0000156c <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    156c:	4a04      	ldr	r2, [pc, #16]	; (1580 <DAC_0_CLOCK_init+0x14>)
    156e:	6a13      	ldr	r3, [r2, #32]
    1570:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1574:	6213      	str	r3, [r2, #32]
    1576:	2240      	movs	r2, #64	; 0x40
    1578:	4b02      	ldr	r3, [pc, #8]	; (1584 <DAC_0_CLOCK_init+0x18>)
    157a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    157e:	4770      	bx	lr
    1580:	40000800 	.word	0x40000800
    1584:	40001c00 	.word	0x40001c00

00001588 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    1588:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    158a:	4b03      	ldr	r3, [pc, #12]	; (1598 <DAC_0_init+0x10>)
    158c:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    158e:	4903      	ldr	r1, [pc, #12]	; (159c <DAC_0_init+0x14>)
    1590:	4803      	ldr	r0, [pc, #12]	; (15a0 <DAC_0_init+0x18>)
    1592:	4b04      	ldr	r3, [pc, #16]	; (15a4 <DAC_0_init+0x1c>)
    1594:	4798      	blx	r3
    1596:	bd08      	pop	{r3, pc}
    1598:	0000156d 	.word	0x0000156d
    159c:	43002400 	.word	0x43002400
    15a0:	20003d80 	.word	0x20003d80
    15a4:	00001b7d 	.word	0x00001b7d

000015a8 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    15a8:	b508      	push	{r3, lr}
    15aa:	2240      	movs	r2, #64	; 0x40
    15ac:	4b05      	ldr	r3, [pc, #20]	; (15c4 <EXTERNAL_IRQ_0_init+0x1c>)
    15ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    15b2:	4a05      	ldr	r2, [pc, #20]	; (15c8 <EXTERNAL_IRQ_0_init+0x20>)
    15b4:	6953      	ldr	r3, [r2, #20]
    15b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    15ba:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    15bc:	4b03      	ldr	r3, [pc, #12]	; (15cc <EXTERNAL_IRQ_0_init+0x24>)
    15be:	4798      	blx	r3
    15c0:	bd08      	pop	{r3, pc}
    15c2:	bf00      	nop
    15c4:	40001c00 	.word	0x40001c00
    15c8:	40000800 	.word	0x40000800
    15cc:	00001c35 	.word	0x00001c35

000015d0 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    15d0:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    15d2:	4a04      	ldr	r2, [pc, #16]	; (15e4 <EVENT_SYSTEM_0_init+0x14>)
    15d4:	6993      	ldr	r3, [r2, #24]
    15d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    15da:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    15dc:	4b02      	ldr	r3, [pc, #8]	; (15e8 <EVENT_SYSTEM_0_init+0x18>)
    15de:	4798      	blx	r3
    15e0:	bd08      	pop	{r3, pc}
    15e2:	bf00      	nop
    15e4:	40000800 	.word	0x40000800
    15e8:	00001bf1 	.word	0x00001bf1

000015ec <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    15ec:	4a02      	ldr	r2, [pc, #8]	; (15f8 <FLASH_0_CLOCK_init+0xc>)
    15ee:	6913      	ldr	r3, [r2, #16]
    15f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    15f4:	6113      	str	r3, [r2, #16]
    15f6:	4770      	bx	lr
    15f8:	40000800 	.word	0x40000800

000015fc <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    15fc:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    15fe:	4b03      	ldr	r3, [pc, #12]	; (160c <FLASH_0_init+0x10>)
    1600:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    1602:	4903      	ldr	r1, [pc, #12]	; (1610 <FLASH_0_init+0x14>)
    1604:	4803      	ldr	r0, [pc, #12]	; (1614 <FLASH_0_init+0x18>)
    1606:	4b04      	ldr	r3, [pc, #16]	; (1618 <FLASH_0_init+0x1c>)
    1608:	4798      	blx	r3
    160a:	bd08      	pop	{r3, pc}
    160c:	000015ed 	.word	0x000015ed
    1610:	41004000 	.word	0x41004000
    1614:	20003d0c 	.word	0x20003d0c
    1618:	00001c6d 	.word	0x00001c6d

0000161c <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    161c:	4b10      	ldr	r3, [pc, #64]	; (1660 <ModemData_PORT_init+0x44>)
    161e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    1622:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1626:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    162a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    162e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1632:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1636:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    163a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    163e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    1642:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1646:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    164a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    164e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1652:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1656:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    165a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    165e:	4770      	bx	lr
    1660:	41008000 	.word	0x41008000

00001664 <ModemData_CLOCK_init>:
    1664:	4b06      	ldr	r3, [pc, #24]	; (1680 <ModemData_CLOCK_init+0x1c>)
    1666:	2240      	movs	r2, #64	; 0x40
    1668:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    166c:	224a      	movs	r2, #74	; 0x4a
    166e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    1672:	4a04      	ldr	r2, [pc, #16]	; (1684 <ModemData_CLOCK_init+0x20>)
    1674:	6993      	ldr	r3, [r2, #24]
    1676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    167a:	6193      	str	r3, [r2, #24]
    167c:	4770      	bx	lr
    167e:	bf00      	nop
    1680:	40001c00 	.word	0x40001c00
    1684:	40000800 	.word	0x40000800

00001688 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    1688:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    168a:	4b03      	ldr	r3, [pc, #12]	; (1698 <ModemData_init+0x10>)
    168c:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    168e:	4b03      	ldr	r3, [pc, #12]	; (169c <ModemData_init+0x14>)
    1690:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    1692:	4b03      	ldr	r3, [pc, #12]	; (16a0 <ModemData_init+0x18>)
    1694:	4798      	blx	r3
    1696:	bd08      	pop	{r3, pc}
    1698:	00001665 	.word	0x00001665
    169c:	0000072d 	.word	0x0000072d
    16a0:	0000161d 	.word	0x0000161d

000016a4 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    16a4:	4b10      	ldr	r3, [pc, #64]	; (16e8 <SerialDebug_PORT_init+0x44>)
    16a6:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    16aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    16ae:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    16b2:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    16b6:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    16ba:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    16be:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    16c2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    16c6:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    16ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    16ce:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    16d2:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    16d6:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    16da:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    16de:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    16e2:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    16e6:	4770      	bx	lr
    16e8:	41008000 	.word	0x41008000

000016ec <SerialDebug_CLOCK_init>:
    16ec:	4b06      	ldr	r3, [pc, #24]	; (1708 <SerialDebug_CLOCK_init+0x1c>)
    16ee:	2240      	movs	r2, #64	; 0x40
    16f0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    16f4:	224a      	movs	r2, #74	; 0x4a
    16f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    16fa:	4a04      	ldr	r2, [pc, #16]	; (170c <SerialDebug_CLOCK_init+0x20>)
    16fc:	6a13      	ldr	r3, [r2, #32]
    16fe:	f043 0302 	orr.w	r3, r3, #2
    1702:	6213      	str	r3, [r2, #32]
    1704:	4770      	bx	lr
    1706:	bf00      	nop
    1708:	40001c00 	.word	0x40001c00
    170c:	40000800 	.word	0x40000800

00001710 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    1710:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    1712:	4b03      	ldr	r3, [pc, #12]	; (1720 <SerialDebug_init+0x10>)
    1714:	4798      	blx	r3
	SerialDebugPrintInit();
    1716:	4b03      	ldr	r3, [pc, #12]	; (1724 <SerialDebug_init+0x14>)
    1718:	4798      	blx	r3
	SerialDebug_PORT_init();
    171a:	4b03      	ldr	r3, [pc, #12]	; (1728 <SerialDebug_init+0x18>)
    171c:	4798      	blx	r3
    171e:	bd08      	pop	{r3, pc}
    1720:	000016ed 	.word	0x000016ed
    1724:	000010c1 	.word	0x000010c1
    1728:	000016a5 	.word	0x000016a5

0000172c <delay_driver_init>:
}

void delay_driver_init(void)
{
    172c:	b508      	push	{r3, lr}
	delay_init(SysTick);
    172e:	4802      	ldr	r0, [pc, #8]	; (1738 <delay_driver_init+0xc>)
    1730:	4b02      	ldr	r3, [pc, #8]	; (173c <delay_driver_init+0x10>)
    1732:	4798      	blx	r3
    1734:	bd08      	pop	{r3, pc}
    1736:	bf00      	nop
    1738:	e000e010 	.word	0xe000e010
    173c:	00001bbd 	.word	0x00001bbd

00001740 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    1740:	4a04      	ldr	r2, [pc, #16]	; (1754 <PWM_0_CLOCK_init+0x14>)
    1742:	6953      	ldr	r3, [r2, #20]
    1744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1748:	6153      	str	r3, [r2, #20]
    174a:	2240      	movs	r2, #64	; 0x40
    174c:	4b02      	ldr	r3, [pc, #8]	; (1758 <PWM_0_CLOCK_init+0x18>)
    174e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    1752:	4770      	bx	lr
    1754:	40000800 	.word	0x40000800
    1758:	40001c00 	.word	0x40001c00

0000175c <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    175c:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    175e:	4b05      	ldr	r3, [pc, #20]	; (1774 <PWM_0_init+0x18>)
    1760:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    1762:	4b05      	ldr	r3, [pc, #20]	; (1778 <PWM_0_init+0x1c>)
    1764:	4798      	blx	r3
    1766:	4602      	mov	r2, r0
    1768:	4904      	ldr	r1, [pc, #16]	; (177c <PWM_0_init+0x20>)
    176a:	4805      	ldr	r0, [pc, #20]	; (1780 <PWM_0_init+0x24>)
    176c:	4b05      	ldr	r3, [pc, #20]	; (1784 <PWM_0_init+0x28>)
    176e:	4798      	blx	r3
    1770:	bd08      	pop	{r3, pc}
    1772:	bf00      	nop
    1774:	00001741 	.word	0x00001741
    1778:	0000320d 	.word	0x0000320d
    177c:	40003800 	.word	0x40003800
    1780:	20003cd4 	.word	0x20003cd4
    1784:	00001cc9 	.word	0x00001cc9

00001788 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1788:	4a04      	ldr	r2, [pc, #16]	; (179c <PWM_1_CLOCK_init+0x14>)
    178a:	6953      	ldr	r3, [r2, #20]
    178c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1790:	6153      	str	r3, [r2, #20]
    1792:	2240      	movs	r2, #64	; 0x40
    1794:	4b02      	ldr	r3, [pc, #8]	; (17a0 <PWM_1_CLOCK_init+0x18>)
    1796:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    179a:	4770      	bx	lr
    179c:	40000800 	.word	0x40000800
    17a0:	40001c00 	.word	0x40001c00

000017a4 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    17a4:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <PWM_1_init+0x18>)
    17a8:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    17aa:	4b05      	ldr	r3, [pc, #20]	; (17c0 <PWM_1_init+0x1c>)
    17ac:	4798      	blx	r3
    17ae:	4602      	mov	r2, r0
    17b0:	4904      	ldr	r1, [pc, #16]	; (17c4 <PWM_1_init+0x20>)
    17b2:	4805      	ldr	r0, [pc, #20]	; (17c8 <PWM_1_init+0x24>)
    17b4:	4b05      	ldr	r3, [pc, #20]	; (17cc <PWM_1_init+0x28>)
    17b6:	4798      	blx	r3
    17b8:	bd08      	pop	{r3, pc}
    17ba:	bf00      	nop
    17bc:	00001789 	.word	0x00001789
    17c0:	0000320d 	.word	0x0000320d
    17c4:	40003c00 	.word	0x40003c00
    17c8:	20003df4 	.word	0x20003df4
    17cc:	00001cc9 	.word	0x00001cc9

000017d0 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    17d0:	4a04      	ldr	r2, [pc, #16]	; (17e4 <PWM_2_CLOCK_init+0x14>)
    17d2:	6993      	ldr	r3, [r2, #24]
    17d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    17d8:	6193      	str	r3, [r2, #24]
    17da:	2240      	movs	r2, #64	; 0x40
    17dc:	4b02      	ldr	r3, [pc, #8]	; (17e8 <PWM_2_CLOCK_init+0x18>)
    17de:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    17e2:	4770      	bx	lr
    17e4:	40000800 	.word	0x40000800
    17e8:	40001c00 	.word	0x40001c00

000017ec <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    17ec:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    17ee:	4b05      	ldr	r3, [pc, #20]	; (1804 <PWM_2_init+0x18>)
    17f0:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    17f2:	4b05      	ldr	r3, [pc, #20]	; (1808 <PWM_2_init+0x1c>)
    17f4:	4798      	blx	r3
    17f6:	4602      	mov	r2, r0
    17f8:	4904      	ldr	r1, [pc, #16]	; (180c <PWM_2_init+0x20>)
    17fa:	4805      	ldr	r0, [pc, #20]	; (1810 <PWM_2_init+0x24>)
    17fc:	4b05      	ldr	r3, [pc, #20]	; (1814 <PWM_2_init+0x28>)
    17fe:	4798      	blx	r3
    1800:	bd08      	pop	{r3, pc}
    1802:	bf00      	nop
    1804:	000017d1 	.word	0x000017d1
    1808:	0000320d 	.word	0x0000320d
    180c:	4101a000 	.word	0x4101a000
    1810:	20003cf0 	.word	0x20003cf0
    1814:	00001cc9 	.word	0x00001cc9

00001818 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1818:	4a04      	ldr	r2, [pc, #16]	; (182c <TIMER_3_CLOCK_init+0x14>)
    181a:	6993      	ldr	r3, [r2, #24]
    181c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1820:	6193      	str	r3, [r2, #24]
    1822:	2240      	movs	r2, #64	; 0x40
    1824:	4b02      	ldr	r3, [pc, #8]	; (1830 <TIMER_3_CLOCK_init+0x18>)
    1826:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    182a:	4770      	bx	lr
    182c:	40000800 	.word	0x40000800
    1830:	40001c00 	.word	0x40001c00

00001834 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    1834:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    1836:	4b05      	ldr	r3, [pc, #20]	; (184c <TIMER_3_init+0x18>)
    1838:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    183a:	4b05      	ldr	r3, [pc, #20]	; (1850 <TIMER_3_init+0x1c>)
    183c:	4798      	blx	r3
    183e:	4602      	mov	r2, r0
    1840:	4904      	ldr	r1, [pc, #16]	; (1854 <TIMER_3_init+0x20>)
    1842:	4805      	ldr	r0, [pc, #20]	; (1858 <TIMER_3_init+0x24>)
    1844:	4b05      	ldr	r3, [pc, #20]	; (185c <TIMER_3_init+0x28>)
    1846:	4798      	blx	r3
    1848:	bd08      	pop	{r3, pc}
    184a:	bf00      	nop
    184c:	00001819 	.word	0x00001819
    1850:	00002cc5 	.word	0x00002cc5
    1854:	41016000 	.word	0x41016000
    1858:	20003e14 	.word	0x20003e14
    185c:	00001de5 	.word	0x00001de5

00001860 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    1860:	4a04      	ldr	r2, [pc, #16]	; (1874 <TIMER_4_CLOCK_init+0x14>)
    1862:	6993      	ldr	r3, [r2, #24]
    1864:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1868:	6193      	str	r3, [r2, #24]
    186a:	2240      	movs	r2, #64	; 0x40
    186c:	4b02      	ldr	r3, [pc, #8]	; (1878 <TIMER_4_CLOCK_init+0x18>)
    186e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    1872:	4770      	bx	lr
    1874:	40000800 	.word	0x40000800
    1878:	40001c00 	.word	0x40001c00

0000187c <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    187c:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    187e:	4b05      	ldr	r3, [pc, #20]	; (1894 <TIMER_4_init+0x18>)
    1880:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    1882:	4b05      	ldr	r3, [pc, #20]	; (1898 <TIMER_4_init+0x1c>)
    1884:	4798      	blx	r3
    1886:	4602      	mov	r2, r0
    1888:	4904      	ldr	r1, [pc, #16]	; (189c <TIMER_4_init+0x20>)
    188a:	4805      	ldr	r0, [pc, #20]	; (18a0 <TIMER_4_init+0x24>)
    188c:	4b05      	ldr	r3, [pc, #20]	; (18a4 <TIMER_4_init+0x28>)
    188e:	4798      	blx	r3
    1890:	bd08      	pop	{r3, pc}
    1892:	bf00      	nop
    1894:	00001861 	.word	0x00001861
    1898:	00002cc5 	.word	0x00002cc5
    189c:	41018000 	.word	0x41018000
    18a0:	20003d5c 	.word	0x20003d5c
    18a4:	00001de5 	.word	0x00001de5

000018a8 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    18a8:	4a04      	ldr	r2, [pc, #16]	; (18bc <TIMER_5_CLOCK_init+0x14>)
    18aa:	69d3      	ldr	r3, [r2, #28]
    18ac:	f043 0308 	orr.w	r3, r3, #8
    18b0:	61d3      	str	r3, [r2, #28]
    18b2:	2240      	movs	r2, #64	; 0x40
    18b4:	4b02      	ldr	r3, [pc, #8]	; (18c0 <TIMER_5_CLOCK_init+0x18>)
    18b6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    18ba:	4770      	bx	lr
    18bc:	40000800 	.word	0x40000800
    18c0:	40001c00 	.word	0x40001c00

000018c4 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    18c4:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    18c6:	4b05      	ldr	r3, [pc, #20]	; (18dc <TIMER_5_init+0x18>)
    18c8:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    18ca:	4b05      	ldr	r3, [pc, #20]	; (18e0 <TIMER_5_init+0x1c>)
    18cc:	4798      	blx	r3
    18ce:	4602      	mov	r2, r0
    18d0:	4904      	ldr	r1, [pc, #16]	; (18e4 <TIMER_5_init+0x20>)
    18d2:	4805      	ldr	r0, [pc, #20]	; (18e8 <TIMER_5_init+0x24>)
    18d4:	4b05      	ldr	r3, [pc, #20]	; (18ec <TIMER_5_init+0x28>)
    18d6:	4798      	blx	r3
    18d8:	bd08      	pop	{r3, pc}
    18da:	bf00      	nop
    18dc:	000018a9 	.word	0x000018a9
    18e0:	00002cc5 	.word	0x00002cc5
    18e4:	42000c00 	.word	0x42000c00
    18e8:	20003db4 	.word	0x20003db4
    18ec:	00001de5 	.word	0x00001de5

000018f0 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    18f0:	4a04      	ldr	r2, [pc, #16]	; (1904 <TIMER_6_CLOCK_init+0x14>)
    18f2:	69d3      	ldr	r3, [r2, #28]
    18f4:	f043 0310 	orr.w	r3, r3, #16
    18f8:	61d3      	str	r3, [r2, #28]
    18fa:	2240      	movs	r2, #64	; 0x40
    18fc:	4b02      	ldr	r3, [pc, #8]	; (1908 <TIMER_6_CLOCK_init+0x18>)
    18fe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    1902:	4770      	bx	lr
    1904:	40000800 	.word	0x40000800
    1908:	40001c00 	.word	0x40001c00

0000190c <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    190c:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    190e:	4b05      	ldr	r3, [pc, #20]	; (1924 <TIMER_6_init+0x18>)
    1910:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    1912:	4b05      	ldr	r3, [pc, #20]	; (1928 <TIMER_6_init+0x1c>)
    1914:	4798      	blx	r3
    1916:	4602      	mov	r2, r0
    1918:	4904      	ldr	r1, [pc, #16]	; (192c <TIMER_6_init+0x20>)
    191a:	4805      	ldr	r0, [pc, #20]	; (1930 <TIMER_6_init+0x24>)
    191c:	4b05      	ldr	r3, [pc, #20]	; (1934 <TIMER_6_init+0x28>)
    191e:	4798      	blx	r3
    1920:	bd08      	pop	{r3, pc}
    1922:	bf00      	nop
    1924:	000018f1 	.word	0x000018f1
    1928:	00002cc5 	.word	0x00002cc5
    192c:	42001000 	.word	0x42001000
    1930:	20003dd4 	.word	0x20003dd4
    1934:	00001de5 	.word	0x00001de5

00001938 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    1938:	4a04      	ldr	r2, [pc, #16]	; (194c <TIMER_7_CLOCK_init+0x14>)
    193a:	6a13      	ldr	r3, [r2, #32]
    193c:	f043 0310 	orr.w	r3, r3, #16
    1940:	6213      	str	r3, [r2, #32]
    1942:	2240      	movs	r2, #64	; 0x40
    1944:	4b02      	ldr	r3, [pc, #8]	; (1950 <TIMER_7_CLOCK_init+0x18>)
    1946:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    194a:	4770      	bx	lr
    194c:	40000800 	.word	0x40000800
    1950:	40001c00 	.word	0x40001c00

00001954 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    1954:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    1956:	4b05      	ldr	r3, [pc, #20]	; (196c <TIMER_7_init+0x18>)
    1958:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    195a:	4b05      	ldr	r3, [pc, #20]	; (1970 <TIMER_7_init+0x1c>)
    195c:	4798      	blx	r3
    195e:	4602      	mov	r2, r0
    1960:	4904      	ldr	r1, [pc, #16]	; (1974 <TIMER_7_init+0x20>)
    1962:	4805      	ldr	r0, [pc, #20]	; (1978 <TIMER_7_init+0x24>)
    1964:	4b05      	ldr	r3, [pc, #20]	; (197c <TIMER_7_init+0x28>)
    1966:	4798      	blx	r3
    1968:	bd08      	pop	{r3, pc}
    196a:	bf00      	nop
    196c:	00001939 	.word	0x00001939
    1970:	00002cc5 	.word	0x00002cc5
    1974:	43001000 	.word	0x43001000
    1978:	20003d28 	.word	0x20003d28
    197c:	00001de5 	.word	0x00001de5

00001980 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    1980:	4a02      	ldr	r2, [pc, #8]	; (198c <WDT_0_CLOCK_init+0xc>)
    1982:	6953      	ldr	r3, [r2, #20]
    1984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1988:	6153      	str	r3, [r2, #20]
    198a:	4770      	bx	lr
    198c:	40000800 	.word	0x40000800

00001990 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    1990:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    1992:	4b0a      	ldr	r3, [pc, #40]	; (19bc <WDT_0_init+0x2c>)
    1994:	4798      	blx	r3
	ASSERT(wdt && hw);
    1996:	2252      	movs	r2, #82	; 0x52
    1998:	4909      	ldr	r1, [pc, #36]	; (19c0 <WDT_0_init+0x30>)
    199a:	2001      	movs	r0, #1
    199c:	4b09      	ldr	r3, [pc, #36]	; (19c4 <WDT_0_init+0x34>)
    199e:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    19a0:	4809      	ldr	r0, [pc, #36]	; (19c8 <WDT_0_init+0x38>)
    19a2:	4b0a      	ldr	r3, [pc, #40]	; (19cc <WDT_0_init+0x3c>)
    19a4:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    19a6:	4b0a      	ldr	r3, [pc, #40]	; (19d0 <WDT_0_init+0x40>)
    19a8:	4798      	blx	r3

	if(0 == wdt_init(&WDT_0, WDT))
    19aa:	b118      	cbz	r0, 19b4 <WDT_0_init+0x24>
	{
		DEBUG_PRINT("WDT Initialised");
	}
	else
	{
		DEBUG_PRINT("WDT Failed to initialize");
    19ac:	4809      	ldr	r0, [pc, #36]	; (19d4 <WDT_0_init+0x44>)
    19ae:	4b0a      	ldr	r3, [pc, #40]	; (19d8 <WDT_0_init+0x48>)
    19b0:	4798      	blx	r3
    19b2:	bd08      	pop	{r3, pc}
		DEBUG_PRINT("WDT Initialised");
    19b4:	4809      	ldr	r0, [pc, #36]	; (19dc <WDT_0_init+0x4c>)
    19b6:	4b08      	ldr	r3, [pc, #32]	; (19d8 <WDT_0_init+0x48>)
    19b8:	4798      	blx	r3
    19ba:	bd08      	pop	{r3, pc}
    19bc:	00001981 	.word	0x00001981
    19c0:	00006eec 	.word	0x00006eec
    19c4:	00001e29 	.word	0x00001e29
    19c8:	20003d7c 	.word	0x20003d7c
    19cc:	40002000 	.word	0x40002000
    19d0:	00003289 	.word	0x00003289
    19d4:	00006f18 	.word	0x00006f18
    19d8:	0000112d 	.word	0x0000112d
    19dc:	00006f08 	.word	0x00006f08

000019e0 <system_init>:
	}
}

void system_init(void)
{
    19e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    19e4:	4b28      	ldr	r3, [pc, #160]	; (1a88 <system_init+0xa8>)
    19e6:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    19e8:	4b28      	ldr	r3, [pc, #160]	; (1a8c <system_init+0xac>)
    19ea:	4798      	blx	r3

	AC_0_init();
    19ec:	4b28      	ldr	r3, [pc, #160]	; (1a90 <system_init+0xb0>)
    19ee:	4798      	blx	r3

	ADC_0_init();
    19f0:	4b28      	ldr	r3, [pc, #160]	; (1a94 <system_init+0xb4>)
    19f2:	4798      	blx	r3

	ADC_1_init();
    19f4:	4b28      	ldr	r3, [pc, #160]	; (1a98 <system_init+0xb8>)
    19f6:	4798      	blx	r3

	DAC_0_init();
    19f8:	4b28      	ldr	r3, [pc, #160]	; (1a9c <system_init+0xbc>)
    19fa:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    19fc:	4b28      	ldr	r3, [pc, #160]	; (1aa0 <system_init+0xc0>)
    19fe:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    1a00:	4b28      	ldr	r3, [pc, #160]	; (1aa4 <system_init+0xc4>)
    1a02:	4798      	blx	r3

	FLASH_0_init();
    1a04:	4b28      	ldr	r3, [pc, #160]	; (1aa8 <system_init+0xc8>)
    1a06:	4798      	blx	r3

	SerialDebug_init();
    1a08:	4b28      	ldr	r3, [pc, #160]	; (1aac <system_init+0xcc>)
    1a0a:	4798      	blx	r3
	
	ModemData_init();
    1a0c:	4b28      	ldr	r3, [pc, #160]	; (1ab0 <system_init+0xd0>)
    1a0e:	4798      	blx	r3

	PWM_0_init();
    1a10:	4b28      	ldr	r3, [pc, #160]	; (1ab4 <system_init+0xd4>)
    1a12:	4798      	blx	r3

	PWM_1_init();
    1a14:	4b28      	ldr	r3, [pc, #160]	; (1ab8 <system_init+0xd8>)
    1a16:	4798      	blx	r3

	PWM_2_init();
    1a18:	4b28      	ldr	r3, [pc, #160]	; (1abc <system_init+0xdc>)
    1a1a:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1a1c:	4c28      	ldr	r4, [pc, #160]	; (1ac0 <system_init+0xe0>)
    1a1e:	69a3      	ldr	r3, [r4, #24]
    1a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1a24:	61a3      	str	r3, [r4, #24]
    1a26:	4f27      	ldr	r7, [pc, #156]	; (1ac4 <system_init+0xe4>)
    1a28:	f04f 0840 	mov.w	r8, #64	; 0x40
    1a2c:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    1a30:	4e25      	ldr	r6, [pc, #148]	; (1ac8 <system_init+0xe8>)
    1a32:	47b0      	blx	r6
    1a34:	4602      	mov	r2, r0
    1a36:	4925      	ldr	r1, [pc, #148]	; (1acc <system_init+0xec>)
    1a38:	4825      	ldr	r0, [pc, #148]	; (1ad0 <system_init+0xf0>)
    1a3a:	4d26      	ldr	r5, [pc, #152]	; (1ad4 <system_init+0xf4>)
    1a3c:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1a3e:	69e3      	ldr	r3, [r4, #28]
    1a40:	f043 0320 	orr.w	r3, r3, #32
    1a44:	61e3      	str	r3, [r4, #28]
    1a46:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    1a4a:	47b0      	blx	r6
    1a4c:	4602      	mov	r2, r0
    1a4e:	4922      	ldr	r1, [pc, #136]	; (1ad8 <system_init+0xf8>)
    1a50:	4822      	ldr	r0, [pc, #136]	; (1adc <system_init+0xfc>)
    1a52:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1a54:	69e3      	ldr	r3, [r4, #28]
    1a56:	ea43 0308 	orr.w	r3, r3, r8
    1a5a:	61e3      	str	r3, [r4, #28]
    1a5c:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    1a60:	47b0      	blx	r6
    1a62:	4602      	mov	r2, r0
    1a64:	491e      	ldr	r1, [pc, #120]	; (1ae0 <system_init+0x100>)
    1a66:	481f      	ldr	r0, [pc, #124]	; (1ae4 <system_init+0x104>)
    1a68:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    1a6a:	4b1f      	ldr	r3, [pc, #124]	; (1ae8 <system_init+0x108>)
    1a6c:	4798      	blx	r3

	TIMER_4_init();
    1a6e:	4b1f      	ldr	r3, [pc, #124]	; (1aec <system_init+0x10c>)
    1a70:	4798      	blx	r3

	TIMER_5_init();
    1a72:	4b1f      	ldr	r3, [pc, #124]	; (1af0 <system_init+0x110>)
    1a74:	4798      	blx	r3

	TIMER_6_init();
    1a76:	4b1f      	ldr	r3, [pc, #124]	; (1af4 <system_init+0x114>)
    1a78:	4798      	blx	r3

	TIMER_7_init();
    1a7a:	4b1f      	ldr	r3, [pc, #124]	; (1af8 <system_init+0x118>)
    1a7c:	4798      	blx	r3
	
	WDT_0_init();
    1a7e:	4b1f      	ldr	r3, [pc, #124]	; (1afc <system_init+0x11c>)
    1a80:	4798      	blx	r3
    1a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a86:	bf00      	nop
    1a88:	00002175 	.word	0x00002175
    1a8c:	0000172d 	.word	0x0000172d
    1a90:	00001349 	.word	0x00001349
    1a94:	00001501 	.word	0x00001501
    1a98:	00001549 	.word	0x00001549
    1a9c:	00001589 	.word	0x00001589
    1aa0:	000015a9 	.word	0x000015a9
    1aa4:	000015d1 	.word	0x000015d1
    1aa8:	000015fd 	.word	0x000015fd
    1aac:	00001711 	.word	0x00001711
    1ab0:	00001689 	.word	0x00001689
    1ab4:	0000175d 	.word	0x0000175d
    1ab8:	000017a5 	.word	0x000017a5
    1abc:	000017ed 	.word	0x000017ed
    1ac0:	40000800 	.word	0x40000800
    1ac4:	40001c00 	.word	0x40001c00
    1ac8:	00003205 	.word	0x00003205
    1acc:	4101c000 	.word	0x4101c000
    1ad0:	20003e34 	.word	0x20003e34
    1ad4:	00001de5 	.word	0x00001de5
    1ad8:	42001400 	.word	0x42001400
    1adc:	20003d94 	.word	0x20003d94
    1ae0:	42001800 	.word	0x42001800
    1ae4:	20003cb4 	.word	0x20003cb4
    1ae8:	00001835 	.word	0x00001835
    1aec:	0000187d 	.word	0x0000187d
    1af0:	000018c5 	.word	0x000018c5
    1af4:	0000190d 	.word	0x0000190d
    1af8:	00001955 	.word	0x00001955
    1afc:	00001991 	.word	0x00001991

00001b00 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    1b00:	b538      	push	{r3, r4, r5, lr}
    1b02:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1b04:	4605      	mov	r5, r0
    1b06:	b158      	cbz	r0, 1b20 <ac_sync_init+0x20>
    1b08:	1c08      	adds	r0, r1, #0
    1b0a:	bf18      	it	ne
    1b0c:	2001      	movne	r0, #1
    1b0e:	223b      	movs	r2, #59	; 0x3b
    1b10:	4904      	ldr	r1, [pc, #16]	; (1b24 <ac_sync_init+0x24>)
    1b12:	4b05      	ldr	r3, [pc, #20]	; (1b28 <ac_sync_init+0x28>)
    1b14:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    1b16:	4621      	mov	r1, r4
    1b18:	4628      	mov	r0, r5
    1b1a:	4b04      	ldr	r3, [pc, #16]	; (1b2c <ac_sync_init+0x2c>)
    1b1c:	4798      	blx	r3
}
    1b1e:	bd38      	pop	{r3, r4, r5, pc}
    1b20:	2000      	movs	r0, #0
    1b22:	e7f4      	b.n	1b0e <ac_sync_init+0xe>
    1b24:	00006f34 	.word	0x00006f34
    1b28:	00001e29 	.word	0x00001e29
    1b2c:	0000203d 	.word	0x0000203d

00001b30 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1b30:	b538      	push	{r3, r4, r5, lr}
    1b32:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1b34:	4605      	mov	r5, r0
    1b36:	b158      	cbz	r0, 1b50 <adc_sync_init+0x20>
    1b38:	1c08      	adds	r0, r1, #0
    1b3a:	bf18      	it	ne
    1b3c:	2001      	movne	r0, #1
    1b3e:	2243      	movs	r2, #67	; 0x43
    1b40:	4904      	ldr	r1, [pc, #16]	; (1b54 <adc_sync_init+0x24>)
    1b42:	4b05      	ldr	r3, [pc, #20]	; (1b58 <adc_sync_init+0x28>)
    1b44:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    1b46:	4621      	mov	r1, r4
    1b48:	4628      	mov	r0, r5
    1b4a:	4b04      	ldr	r3, [pc, #16]	; (1b5c <adc_sync_init+0x2c>)
    1b4c:	4798      	blx	r3
}
    1b4e:	bd38      	pop	{r3, r4, r5, pc}
    1b50:	2000      	movs	r0, #0
    1b52:	e7f4      	b.n	1b3e <adc_sync_init+0xe>
    1b54:	00006f50 	.word	0x00006f50
    1b58:	00001e29 	.word	0x00001e29
    1b5c:	00002115 	.word	0x00002115

00001b60 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b60:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1b64:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1b66:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1b68:	f3bf 8f5f 	dmb	sy
    1b6c:	4770      	bx	lr

00001b6e <atomic_leave_critical>:
    1b6e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1b72:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1b74:	f383 8810 	msr	PRIMASK, r3
    1b78:	4770      	bx	lr
	...

00001b7c <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1b7c:	b538      	push	{r3, r4, r5, lr}
    1b7e:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    1b80:	4604      	mov	r4, r0
    1b82:	b198      	cbz	r0, 1bac <dac_sync_init+0x30>
    1b84:	1c08      	adds	r0, r1, #0
    1b86:	bf18      	it	ne
    1b88:	2001      	movne	r0, #1
    1b8a:	223c      	movs	r2, #60	; 0x3c
    1b8c:	4908      	ldr	r1, [pc, #32]	; (1bb0 <dac_sync_init+0x34>)
    1b8e:	4b09      	ldr	r3, [pc, #36]	; (1bb4 <dac_sync_init+0x38>)
    1b90:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    1b92:	4629      	mov	r1, r5
    1b94:	4620      	mov	r0, r4
    1b96:	4b08      	ldr	r3, [pc, #32]	; (1bb8 <dac_sync_init+0x3c>)
    1b98:	4798      	blx	r3
	if (rc) {
    1b9a:	4602      	mov	r2, r0
    1b9c:	b920      	cbnz	r0, 1ba8 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    1b9e:	2300      	movs	r3, #0
    1ba0:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    1ba2:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    1ba4:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    1ba6:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    1ba8:	4610      	mov	r0, r2
    1baa:	bd38      	pop	{r3, r4, r5, pc}
    1bac:	2000      	movs	r0, #0
    1bae:	e7ec      	b.n	1b8a <dac_sync_init+0xe>
    1bb0:	00006f6c 	.word	0x00006f6c
    1bb4:	00001e29 	.word	0x00001e29
    1bb8:	0000222d 	.word	0x0000222d

00001bbc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1bbc:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1bbe:	4b02      	ldr	r3, [pc, #8]	; (1bc8 <delay_init+0xc>)
    1bc0:	6018      	str	r0, [r3, #0]
    1bc2:	4b02      	ldr	r3, [pc, #8]	; (1bcc <delay_init+0x10>)
    1bc4:	4798      	blx	r3
    1bc6:	bd08      	pop	{r3, pc}
    1bc8:	2000052c 	.word	0x2000052c
    1bcc:	000029c1 	.word	0x000029c1

00001bd0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1bd0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1bd2:	4b04      	ldr	r3, [pc, #16]	; (1be4 <delay_ms+0x14>)
    1bd4:	681c      	ldr	r4, [r3, #0]
    1bd6:	4b04      	ldr	r3, [pc, #16]	; (1be8 <delay_ms+0x18>)
    1bd8:	4798      	blx	r3
    1bda:	4601      	mov	r1, r0
    1bdc:	4620      	mov	r0, r4
    1bde:	4b03      	ldr	r3, [pc, #12]	; (1bec <delay_ms+0x1c>)
    1be0:	4798      	blx	r3
    1be2:	bd10      	pop	{r4, pc}
    1be4:	2000052c 	.word	0x2000052c
    1be8:	00002169 	.word	0x00002169
    1bec:	000029d5 	.word	0x000029d5

00001bf0 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1bf0:	b508      	push	{r3, lr}
	return _event_system_init();
    1bf2:	4b01      	ldr	r3, [pc, #4]	; (1bf8 <event_system_init+0x8>)
    1bf4:	4798      	blx	r3
}
    1bf6:	bd08      	pop	{r3, pc}
    1bf8:	00002469 	.word	0x00002469

00001bfc <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1bfc:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1bfe:	4b0c      	ldr	r3, [pc, #48]	; (1c30 <process_ext_irq+0x34>)
    1c00:	685c      	ldr	r4, [r3, #4]
    1c02:	42a0      	cmp	r0, r4
    1c04:	d00e      	beq.n	1c24 <process_ext_irq+0x28>
    1c06:	2301      	movs	r3, #1
    1c08:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    1c0a:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    1c0c:	25ff      	movs	r5, #255	; 0xff
    1c0e:	e003      	b.n	1c18 <process_ext_irq+0x1c>
    1c10:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    1c12:	185a      	adds	r2, r3, r1
    1c14:	0852      	lsrs	r2, r2, #1
    1c16:	d104      	bne.n	1c22 <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    1c18:	42a0      	cmp	r0, r4
    1c1a:	d9f9      	bls.n	1c10 <process_ext_irq+0x14>
	while (upper >= lower) {
    1c1c:	b13b      	cbz	r3, 1c2e <process_ext_irq+0x32>
			lower = middle + 1;
    1c1e:	4631      	mov	r1, r6
    1c20:	e7f7      	b.n	1c12 <process_ext_irq+0x16>
    1c22:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    1c24:	4b02      	ldr	r3, [pc, #8]	; (1c30 <process_ext_irq+0x34>)
    1c26:	681b      	ldr	r3, [r3, #0]
    1c28:	b10b      	cbz	r3, 1c2e <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    1c2a:	4798      	blx	r3
    1c2c:	bd70      	pop	{r4, r5, r6, pc}
    1c2e:	bd70      	pop	{r4, r5, r6, pc}
    1c30:	20000530 	.word	0x20000530

00001c34 <ext_irq_init>:
{
    1c34:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    1c36:	4b05      	ldr	r3, [pc, #20]	; (1c4c <ext_irq_init+0x18>)
    1c38:	f04f 32ff 	mov.w	r2, #4294967295
    1c3c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1c3e:	2200      	movs	r2, #0
    1c40:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    1c42:	4803      	ldr	r0, [pc, #12]	; (1c50 <ext_irq_init+0x1c>)
    1c44:	4b03      	ldr	r3, [pc, #12]	; (1c54 <ext_irq_init+0x20>)
    1c46:	4798      	blx	r3
}
    1c48:	bd08      	pop	{r3, pc}
    1c4a:	bf00      	nop
    1c4c:	20000530 	.word	0x20000530
    1c50:	00001bfd 	.word	0x00001bfd
    1c54:	000023e9 	.word	0x000023e9

00001c58 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1c58:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1c5a:	6943      	ldr	r3, [r0, #20]
    1c5c:	b103      	cbz	r3, 1c60 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1c5e:	4798      	blx	r3
    1c60:	bd08      	pop	{r3, pc}

00001c62 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    1c62:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1c64:	6983      	ldr	r3, [r0, #24]
    1c66:	b103      	cbz	r3, 1c6a <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1c68:	4798      	blx	r3
    1c6a:	bd08      	pop	{r3, pc}

00001c6c <flash_init>:
{
    1c6c:	b538      	push	{r3, r4, r5, lr}
    1c6e:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1c70:	4604      	mov	r4, r0
    1c72:	b190      	cbz	r0, 1c9a <flash_init+0x2e>
    1c74:	1c08      	adds	r0, r1, #0
    1c76:	bf18      	it	ne
    1c78:	2001      	movne	r0, #1
    1c7a:	2242      	movs	r2, #66	; 0x42
    1c7c:	4908      	ldr	r1, [pc, #32]	; (1ca0 <flash_init+0x34>)
    1c7e:	4b09      	ldr	r3, [pc, #36]	; (1ca4 <flash_init+0x38>)
    1c80:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    1c82:	4629      	mov	r1, r5
    1c84:	4620      	mov	r0, r4
    1c86:	4b08      	ldr	r3, [pc, #32]	; (1ca8 <flash_init+0x3c>)
    1c88:	4798      	blx	r3
	if (rc) {
    1c8a:	4603      	mov	r3, r0
    1c8c:	b918      	cbnz	r0, 1c96 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1c8e:	4a07      	ldr	r2, [pc, #28]	; (1cac <flash_init+0x40>)
    1c90:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    1c92:	4a07      	ldr	r2, [pc, #28]	; (1cb0 <flash_init+0x44>)
    1c94:	6062      	str	r2, [r4, #4]
}
    1c96:	4618      	mov	r0, r3
    1c98:	bd38      	pop	{r3, r4, r5, pc}
    1c9a:	2000      	movs	r0, #0
    1c9c:	e7ed      	b.n	1c7a <flash_init+0xe>
    1c9e:	bf00      	nop
    1ca0:	00006f88 	.word	0x00006f88
    1ca4:	00001e29 	.word	0x00001e29
    1ca8:	000025a5 	.word	0x000025a5
    1cac:	00001c59 	.word	0x00001c59
    1cb0:	00001c63 	.word	0x00001c63

00001cb4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1cb4:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1cb6:	6943      	ldr	r3, [r0, #20]
    1cb8:	b103      	cbz	r3, 1cbc <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    1cba:	4798      	blx	r3
    1cbc:	bd08      	pop	{r3, pc}

00001cbe <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1cbe:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1cc0:	6983      	ldr	r3, [r0, #24]
    1cc2:	b103      	cbz	r3, 1cc6 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1cc4:	4798      	blx	r3
    1cc6:	bd08      	pop	{r3, pc}

00001cc8 <pwm_init>:
{
    1cc8:	b538      	push	{r3, r4, r5, lr}
    1cca:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1ccc:	4604      	mov	r4, r0
    1cce:	b180      	cbz	r0, 1cf2 <pwm_init+0x2a>
    1cd0:	1c08      	adds	r0, r1, #0
    1cd2:	bf18      	it	ne
    1cd4:	2001      	movne	r0, #1
    1cd6:	223d      	movs	r2, #61	; 0x3d
    1cd8:	4907      	ldr	r1, [pc, #28]	; (1cf8 <pwm_init+0x30>)
    1cda:	4b08      	ldr	r3, [pc, #32]	; (1cfc <pwm_init+0x34>)
    1cdc:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1cde:	4629      	mov	r1, r5
    1ce0:	4620      	mov	r0, r4
    1ce2:	4b07      	ldr	r3, [pc, #28]	; (1d00 <pwm_init+0x38>)
    1ce4:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1ce6:	4b07      	ldr	r3, [pc, #28]	; (1d04 <pwm_init+0x3c>)
    1ce8:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1cea:	4b07      	ldr	r3, [pc, #28]	; (1d08 <pwm_init+0x40>)
    1cec:	6063      	str	r3, [r4, #4]
}
    1cee:	2000      	movs	r0, #0
    1cf0:	bd38      	pop	{r3, r4, r5, pc}
    1cf2:	2000      	movs	r0, #0
    1cf4:	e7ef      	b.n	1cd6 <pwm_init+0xe>
    1cf6:	bf00      	nop
    1cf8:	00006fa0 	.word	0x00006fa0
    1cfc:	00001e29 	.word	0x00001e29
    1d00:	000030ed 	.word	0x000030ed
    1d04:	00001cb5 	.word	0x00001cb5
    1d08:	00001cbf 	.word	0x00001cbf

00001d0c <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d0e:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1d10:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1d12:	b12f      	cbz	r7, 1d20 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1d14:	688d      	ldr	r5, [r1, #8]
    1d16:	463c      	mov	r4, r7
    1d18:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1d1a:	f1c2 0e01 	rsb	lr, r2, #1
    1d1e:	e00b      	b.n	1d38 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1d20:	4b0e      	ldr	r3, [pc, #56]	; (1d5c <timer_add_timer_task+0x50>)
    1d22:	4798      	blx	r3
		return;
    1d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1d26:	4473      	add	r3, lr
    1d28:	68a0      	ldr	r0, [r4, #8]
    1d2a:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1d2c:	42ab      	cmp	r3, r5
    1d2e:	d20a      	bcs.n	1d46 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1d30:	6823      	ldr	r3, [r4, #0]
    1d32:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1d34:	b153      	cbz	r3, 1d4c <timer_add_timer_task+0x40>
    1d36:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1d38:	6863      	ldr	r3, [r4, #4]
    1d3a:	4293      	cmp	r3, r2
    1d3c:	d8f3      	bhi.n	1d26 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1d3e:	68a0      	ldr	r0, [r4, #8]
    1d40:	4403      	add	r3, r0
    1d42:	1a9b      	subs	r3, r3, r2
    1d44:	e7f2      	b.n	1d2c <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1d46:	42a7      	cmp	r7, r4
    1d48:	d004      	beq.n	1d54 <timer_add_timer_task+0x48>
    1d4a:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1d4c:	4620      	mov	r0, r4
    1d4e:	4b04      	ldr	r3, [pc, #16]	; (1d60 <timer_add_timer_task+0x54>)
    1d50:	4798      	blx	r3
    1d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1d54:	4660      	mov	r0, ip
    1d56:	4b01      	ldr	r3, [pc, #4]	; (1d5c <timer_add_timer_task+0x50>)
    1d58:	4798      	blx	r3
    1d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d5c:	00001e51 	.word	0x00001e51
    1d60:	00001e7d 	.word	0x00001e7d

00001d64 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1d68:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1d6a:	6907      	ldr	r7, [r0, #16]
    1d6c:	3701      	adds	r7, #1
    1d6e:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1d70:	7e03      	ldrb	r3, [r0, #24]
    1d72:	f013 0f01 	tst.w	r3, #1
    1d76:	d113      	bne.n	1da0 <timer_process_counted+0x3c>
    1d78:	7e03      	ldrb	r3, [r0, #24]
    1d7a:	f013 0f02 	tst.w	r3, #2
    1d7e:	d10f      	bne.n	1da0 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1d80:	b354      	cbz	r4, 1dd8 <timer_process_counted+0x74>
    1d82:	6863      	ldr	r3, [r4, #4]
    1d84:	1afb      	subs	r3, r7, r3
    1d86:	68a2      	ldr	r2, [r4, #8]
    1d88:	4293      	cmp	r3, r2
    1d8a:	d307      	bcc.n	1d9c <timer_process_counted+0x38>
    1d8c:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1d8e:	f100 0814 	add.w	r8, r0, #20
    1d92:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1ddc <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1d96:	f8df a048 	ldr.w	sl, [pc, #72]	; 1de0 <timer_process_counted+0x7c>
    1d9a:	e012      	b.n	1dc2 <timer_process_counted+0x5e>
    1d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1da0:	7e03      	ldrb	r3, [r0, #24]
    1da2:	f043 0302 	orr.w	r3, r3, #2
    1da6:	7603      	strb	r3, [r0, #24]
		return;
    1da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1dac:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1dae:	68e3      	ldr	r3, [r4, #12]
    1db0:	4620      	mov	r0, r4
    1db2:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1db4:	b185      	cbz	r5, 1dd8 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1db6:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1db8:	686b      	ldr	r3, [r5, #4]
    1dba:	1afb      	subs	r3, r7, r3
    1dbc:	68aa      	ldr	r2, [r5, #8]
    1dbe:	4293      	cmp	r3, r2
    1dc0:	d30a      	bcc.n	1dd8 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1dc2:	4640      	mov	r0, r8
    1dc4:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1dc6:	7c23      	ldrb	r3, [r4, #16]
    1dc8:	2b01      	cmp	r3, #1
    1dca:	d1ef      	bne.n	1dac <timer_process_counted+0x48>
			tmp->time_label = time;
    1dcc:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1dce:	463a      	mov	r2, r7
    1dd0:	4621      	mov	r1, r4
    1dd2:	4640      	mov	r0, r8
    1dd4:	47d0      	blx	sl
    1dd6:	e7e9      	b.n	1dac <timer_process_counted+0x48>
    1dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ddc:	00001e85 	.word	0x00001e85
    1de0:	00001d0d 	.word	0x00001d0d

00001de4 <timer_init>:
{
    1de4:	b570      	push	{r4, r5, r6, lr}
    1de6:	460e      	mov	r6, r1
    1de8:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    1dea:	4604      	mov	r4, r0
    1dec:	b190      	cbz	r0, 1e14 <timer_init+0x30>
    1dee:	b199      	cbz	r1, 1e18 <timer_init+0x34>
    1df0:	1c10      	adds	r0, r2, #0
    1df2:	bf18      	it	ne
    1df4:	2001      	movne	r0, #1
    1df6:	2245      	movs	r2, #69	; 0x45
    1df8:	4908      	ldr	r1, [pc, #32]	; (1e1c <timer_init+0x38>)
    1dfa:	4b09      	ldr	r3, [pc, #36]	; (1e20 <timer_init+0x3c>)
    1dfc:	4798      	blx	r3
	descr->func = func;
    1dfe:	4620      	mov	r0, r4
    1e00:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1e04:	682b      	ldr	r3, [r5, #0]
    1e06:	4631      	mov	r1, r6
    1e08:	4798      	blx	r3
	descr->time                           = 0;
    1e0a:	2000      	movs	r0, #0
    1e0c:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1e0e:	4b05      	ldr	r3, [pc, #20]	; (1e24 <timer_init+0x40>)
    1e10:	6063      	str	r3, [r4, #4]
}
    1e12:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1e14:	2000      	movs	r0, #0
    1e16:	e7ee      	b.n	1df6 <timer_init+0x12>
    1e18:	2000      	movs	r0, #0
    1e1a:	e7ec      	b.n	1df6 <timer_init+0x12>
    1e1c:	00006fb8 	.word	0x00006fb8
    1e20:	00001e29 	.word	0x00001e29
    1e24:	00001d65 	.word	0x00001d65

00001e28 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1e28:	b900      	cbnz	r0, 1e2c <assert+0x4>
		__asm("BKPT #0");
    1e2a:	be00      	bkpt	0x0000
    1e2c:	4770      	bx	lr

00001e2e <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1e2e:	6803      	ldr	r3, [r0, #0]
    1e30:	b14b      	cbz	r3, 1e46 <is_list_element+0x18>
		if (it == element) {
    1e32:	428b      	cmp	r3, r1
    1e34:	d009      	beq.n	1e4a <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1e36:	681b      	ldr	r3, [r3, #0]
    1e38:	b11b      	cbz	r3, 1e42 <is_list_element+0x14>
		if (it == element) {
    1e3a:	4299      	cmp	r1, r3
    1e3c:	d1fb      	bne.n	1e36 <is_list_element+0x8>
			return true;
    1e3e:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1e40:	4770      	bx	lr
	return false;
    1e42:	2000      	movs	r0, #0
    1e44:	4770      	bx	lr
    1e46:	2000      	movs	r0, #0
    1e48:	4770      	bx	lr
			return true;
    1e4a:	2001      	movs	r0, #1
    1e4c:	4770      	bx	lr
	...

00001e50 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1e50:	b538      	push	{r3, r4, r5, lr}
    1e52:	4604      	mov	r4, r0
    1e54:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1e56:	4b06      	ldr	r3, [pc, #24]	; (1e70 <list_insert_as_head+0x20>)
    1e58:	4798      	blx	r3
    1e5a:	f080 0001 	eor.w	r0, r0, #1
    1e5e:	2243      	movs	r2, #67	; 0x43
    1e60:	4904      	ldr	r1, [pc, #16]	; (1e74 <list_insert_as_head+0x24>)
    1e62:	b2c0      	uxtb	r0, r0
    1e64:	4b04      	ldr	r3, [pc, #16]	; (1e78 <list_insert_as_head+0x28>)
    1e66:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1e68:	6823      	ldr	r3, [r4, #0]
    1e6a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1e6c:	6025      	str	r5, [r4, #0]
    1e6e:	bd38      	pop	{r3, r4, r5, pc}
    1e70:	00001e2f 	.word	0x00001e2f
    1e74:	00006fd0 	.word	0x00006fd0
    1e78:	00001e29 	.word	0x00001e29

00001e7c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1e7c:	6803      	ldr	r3, [r0, #0]
    1e7e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1e80:	6001      	str	r1, [r0, #0]
    1e82:	4770      	bx	lr

00001e84 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1e84:	6803      	ldr	r3, [r0, #0]
    1e86:	b10b      	cbz	r3, 1e8c <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1e88:	681a      	ldr	r2, [r3, #0]
    1e8a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1e8c:	4618      	mov	r0, r3
    1e8e:	4770      	bx	lr

00001e90 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1e90:	b570      	push	{r4, r5, r6, lr}
    1e92:	460e      	mov	r6, r1
    1e94:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1e96:	4604      	mov	r4, r0
    1e98:	b178      	cbz	r0, 1eba <ringbuffer_init+0x2a>
    1e9a:	b181      	cbz	r1, 1ebe <ringbuffer_init+0x2e>
    1e9c:	b1a2      	cbz	r2, 1ec8 <ringbuffer_init+0x38>
    1e9e:	2001      	movs	r0, #1
    1ea0:	2232      	movs	r2, #50	; 0x32
    1ea2:	490d      	ldr	r1, [pc, #52]	; (1ed8 <ringbuffer_init+0x48>)
    1ea4:	4b0d      	ldr	r3, [pc, #52]	; (1edc <ringbuffer_init+0x4c>)
    1ea6:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1ea8:	1e6b      	subs	r3, r5, #1
    1eaa:	421d      	tst	r5, r3
    1eac:	d109      	bne.n	1ec2 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1eae:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1eb0:	2000      	movs	r0, #0
    1eb2:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1eb4:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1eb6:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1eb8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1eba:	2000      	movs	r0, #0
    1ebc:	e7f0      	b.n	1ea0 <ringbuffer_init+0x10>
    1ebe:	2000      	movs	r0, #0
    1ec0:	e7ee      	b.n	1ea0 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1ec2:	f06f 000c 	mvn.w	r0, #12
    1ec6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1ec8:	2232      	movs	r2, #50	; 0x32
    1eca:	4903      	ldr	r1, [pc, #12]	; (1ed8 <ringbuffer_init+0x48>)
    1ecc:	2000      	movs	r0, #0
    1ece:	4b03      	ldr	r3, [pc, #12]	; (1edc <ringbuffer_init+0x4c>)
    1ed0:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1ed2:	1e6b      	subs	r3, r5, #1
    1ed4:	e7eb      	b.n	1eae <ringbuffer_init+0x1e>
    1ed6:	bf00      	nop
    1ed8:	00006ff0 	.word	0x00006ff0
    1edc:	00001e29 	.word	0x00001e29

00001ee0 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1ee0:	b538      	push	{r3, r4, r5, lr}
    1ee2:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1ee4:	4604      	mov	r4, r0
    1ee6:	b1a0      	cbz	r0, 1f12 <ringbuffer_get+0x32>
    1ee8:	1c08      	adds	r0, r1, #0
    1eea:	bf18      	it	ne
    1eec:	2001      	movne	r0, #1
    1eee:	224a      	movs	r2, #74	; 0x4a
    1ef0:	490a      	ldr	r1, [pc, #40]	; (1f1c <ringbuffer_get+0x3c>)
    1ef2:	4b0b      	ldr	r3, [pc, #44]	; (1f20 <ringbuffer_get+0x40>)
    1ef4:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1ef6:	68a3      	ldr	r3, [r4, #8]
    1ef8:	68e2      	ldr	r2, [r4, #12]
    1efa:	429a      	cmp	r2, r3
    1efc:	d00b      	beq.n	1f16 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1efe:	6862      	ldr	r2, [r4, #4]
    1f00:	4013      	ands	r3, r2
    1f02:	6822      	ldr	r2, [r4, #0]
    1f04:	5cd3      	ldrb	r3, [r2, r3]
    1f06:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1f08:	68a3      	ldr	r3, [r4, #8]
    1f0a:	3301      	adds	r3, #1
    1f0c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1f0e:	2000      	movs	r0, #0
    1f10:	bd38      	pop	{r3, r4, r5, pc}
    1f12:	2000      	movs	r0, #0
    1f14:	e7eb      	b.n	1eee <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    1f16:	f06f 0009 	mvn.w	r0, #9
}
    1f1a:	bd38      	pop	{r3, r4, r5, pc}
    1f1c:	00006ff0 	.word	0x00006ff0
    1f20:	00001e29 	.word	0x00001e29

00001f24 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1f24:	b538      	push	{r3, r4, r5, lr}
    1f26:	460d      	mov	r5, r1
	ASSERT(rb);
    1f28:	4604      	mov	r4, r0
    1f2a:	225b      	movs	r2, #91	; 0x5b
    1f2c:	490b      	ldr	r1, [pc, #44]	; (1f5c <ringbuffer_put+0x38>)
    1f2e:	3000      	adds	r0, #0
    1f30:	bf18      	it	ne
    1f32:	2001      	movne	r0, #1
    1f34:	4b0a      	ldr	r3, [pc, #40]	; (1f60 <ringbuffer_put+0x3c>)
    1f36:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1f38:	68e3      	ldr	r3, [r4, #12]
    1f3a:	6862      	ldr	r2, [r4, #4]
    1f3c:	4013      	ands	r3, r2
    1f3e:	6822      	ldr	r2, [r4, #0]
    1f40:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1f42:	68e3      	ldr	r3, [r4, #12]
    1f44:	6861      	ldr	r1, [r4, #4]
    1f46:	68a2      	ldr	r2, [r4, #8]
    1f48:	1a9a      	subs	r2, r3, r2
    1f4a:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1f4c:	bf84      	itt	hi
    1f4e:	1a59      	subhi	r1, r3, r1
    1f50:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1f52:	3301      	adds	r3, #1
    1f54:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1f56:	2000      	movs	r0, #0
    1f58:	bd38      	pop	{r3, r4, r5, pc}
    1f5a:	bf00      	nop
    1f5c:	00006ff0 	.word	0x00006ff0
    1f60:	00001e29 	.word	0x00001e29

00001f64 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1f64:	b510      	push	{r4, lr}
	ASSERT(rb);
    1f66:	4604      	mov	r4, r0
    1f68:	2271      	movs	r2, #113	; 0x71
    1f6a:	4905      	ldr	r1, [pc, #20]	; (1f80 <ringbuffer_num+0x1c>)
    1f6c:	3000      	adds	r0, #0
    1f6e:	bf18      	it	ne
    1f70:	2001      	movne	r0, #1
    1f72:	4b04      	ldr	r3, [pc, #16]	; (1f84 <ringbuffer_num+0x20>)
    1f74:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1f76:	68e0      	ldr	r0, [r4, #12]
    1f78:	68a3      	ldr	r3, [r4, #8]
}
    1f7a:	1ac0      	subs	r0, r0, r3
    1f7c:	bd10      	pop	{r4, pc}
    1f7e:	bf00      	nop
    1f80:	00006ff0 	.word	0x00006ff0
    1f84:	00001e29 	.word	0x00001e29

00001f88 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    1f88:	b510      	push	{r4, lr}
	ASSERT(rb);
    1f8a:	4604      	mov	r4, r0
    1f8c:	227b      	movs	r2, #123	; 0x7b
    1f8e:	4905      	ldr	r1, [pc, #20]	; (1fa4 <ringbuffer_flush+0x1c>)
    1f90:	3000      	adds	r0, #0
    1f92:	bf18      	it	ne
    1f94:	2001      	movne	r0, #1
    1f96:	4b04      	ldr	r3, [pc, #16]	; (1fa8 <ringbuffer_flush+0x20>)
    1f98:	4798      	blx	r3

	rb->read_index = rb->write_index;
    1f9a:	68e3      	ldr	r3, [r4, #12]
    1f9c:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    1f9e:	2000      	movs	r0, #0
    1fa0:	bd10      	pop	{r4, pc}
    1fa2:	bf00      	nop
    1fa4:	00006ff0 	.word	0x00006ff0
    1fa8:	00001e29 	.word	0x00001e29

00001fac <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1fac:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1fae:	4a06      	ldr	r2, [pc, #24]	; (1fc8 <_sbrk+0x1c>)
    1fb0:	6812      	ldr	r2, [r2, #0]
    1fb2:	b122      	cbz	r2, 1fbe <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1fb4:	4a04      	ldr	r2, [pc, #16]	; (1fc8 <_sbrk+0x1c>)
    1fb6:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1fb8:	4403      	add	r3, r0
    1fba:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1fbc:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1fbe:	4903      	ldr	r1, [pc, #12]	; (1fcc <_sbrk+0x20>)
    1fc0:	4a01      	ldr	r2, [pc, #4]	; (1fc8 <_sbrk+0x1c>)
    1fc2:	6011      	str	r1, [r2, #0]
    1fc4:	e7f6      	b.n	1fb4 <_sbrk+0x8>
    1fc6:	bf00      	nop
    1fc8:	20000538 	.word	0x20000538
    1fcc:	20013e68 	.word	0x20013e68

00001fd0 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    1fd0:	b510      	push	{r4, lr}
    1fd2:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    1fd4:	f44f 7281 	mov.w	r2, #258	; 0x102
    1fd8:	4915      	ldr	r1, [pc, #84]	; (2030 <_ac_init+0x60>)
    1fda:	4816      	ldr	r0, [pc, #88]	; (2034 <_ac_init+0x64>)
    1fdc:	4284      	cmp	r4, r0
    1fde:	bf14      	ite	ne
    1fe0:	2000      	movne	r0, #0
    1fe2:	2001      	moveq	r0, #1
    1fe4:	4b14      	ldr	r3, [pc, #80]	; (2038 <_ac_init+0x68>)
    1fe6:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1fe8:	6a23      	ldr	r3, [r4, #32]
    1fea:	f013 0f01 	tst.w	r3, #1
    1fee:	d1fb      	bne.n	1fe8 <_ac_init+0x18>
    1ff0:	6a23      	ldr	r3, [r4, #32]
    1ff2:	f013 0f03 	tst.w	r3, #3
    1ff6:	d1fb      	bne.n	1ff0 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1ff8:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    1ffa:	f013 0f02 	tst.w	r3, #2
    1ffe:	d114      	bne.n	202a <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    2000:	6a23      	ldr	r3, [r4, #32]
    2002:	f013 0f01 	tst.w	r3, #1
    2006:	d1fb      	bne.n	2000 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    2008:	7823      	ldrb	r3, [r4, #0]
    200a:	f043 0301 	orr.w	r3, r3, #1
    200e:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    2010:	6a23      	ldr	r3, [r4, #32]
    2012:	f013 0f01 	tst.w	r3, #1
    2016:	d1fb      	bne.n	2010 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    2018:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    201c:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    201e:	2000      	movs	r0, #0
    2020:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    2022:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    2024:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    2026:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    2028:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    202a:	f06f 0010 	mvn.w	r0, #16
}
    202e:	bd10      	pop	{r4, pc}
    2030:	00007014 	.word	0x00007014
    2034:	42002000 	.word	0x42002000
    2038:	00001e29 	.word	0x00001e29

0000203c <_ac_sync_init>:
{
    203c:	b538      	push	{r3, r4, r5, lr}
    203e:	460c      	mov	r4, r1
	ASSERT(device);
    2040:	4605      	mov	r5, r0
    2042:	226c      	movs	r2, #108	; 0x6c
    2044:	4905      	ldr	r1, [pc, #20]	; (205c <_ac_sync_init+0x20>)
    2046:	3000      	adds	r0, #0
    2048:	bf18      	it	ne
    204a:	2001      	movne	r0, #1
    204c:	4b04      	ldr	r3, [pc, #16]	; (2060 <_ac_sync_init+0x24>)
    204e:	4798      	blx	r3
	device->hw = hw;
    2050:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    2052:	4620      	mov	r0, r4
    2054:	4b03      	ldr	r3, [pc, #12]	; (2064 <_ac_sync_init+0x28>)
    2056:	4798      	blx	r3
}
    2058:	bd38      	pop	{r3, r4, r5, pc}
    205a:	bf00      	nop
    205c:	00007014 	.word	0x00007014
    2060:	00001e29 	.word	0x00001e29
    2064:	00001fd1 	.word	0x00001fd1

00002068 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2068:	6b03      	ldr	r3, [r0, #48]	; 0x30
    206a:	f013 0f01 	tst.w	r3, #1
    206e:	d1fb      	bne.n	2068 <_adc_init>
    2070:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2072:	f013 0f03 	tst.w	r3, #3
    2076:	d1fb      	bne.n	2070 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    2078:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    207a:	f013 0f02 	tst.w	r3, #2
    207e:	d12a      	bne.n	20d6 <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2080:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2082:	f013 0f01 	tst.w	r3, #1
    2086:	d1fb      	bne.n	2080 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    2088:	8803      	ldrh	r3, [r0, #0]
    208a:	b29b      	uxth	r3, r3
    208c:	f043 0301 	orr.w	r3, r3, #1
    2090:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2092:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2094:	f013 0f01 	tst.w	r3, #1
    2098:	d1fb      	bne.n	2092 <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    209a:	2216      	movs	r2, #22
    209c:	4b0f      	ldr	r3, [pc, #60]	; (20dc <_adc_init+0x74>)
    209e:	fb02 3101 	mla	r1, r2, r1, r3
    20a2:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    20a4:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    20a6:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    20a8:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    20aa:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    20ac:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    20ae:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    20b0:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    20b2:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    20b4:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    20b6:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    20b8:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    20ba:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    20bc:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    20be:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    20c0:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    20c2:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    20c4:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    20c6:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    20c8:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    20ca:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    20cc:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    20ce:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    20d0:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    20d2:	2000      	movs	r0, #0
    20d4:	4770      	bx	lr
		return ERR_DENIED;
    20d6:	f06f 0010 	mvn.w	r0, #16
}
    20da:	4770      	bx	lr
    20dc:	00007028 	.word	0x00007028

000020e0 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    20e0:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    20e4:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    20e8:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    20ec:	b148      	cbz	r0, 2102 <_adc_get_regs+0x22>
    20ee:	2801      	cmp	r0, #1
    20f0:	d009      	beq.n	2106 <_adc_get_regs+0x26>
{
    20f2:	b508      	push	{r3, lr}
	ASSERT(false);
    20f4:	2291      	movs	r2, #145	; 0x91
    20f6:	4905      	ldr	r1, [pc, #20]	; (210c <_adc_get_regs+0x2c>)
    20f8:	2000      	movs	r0, #0
    20fa:	4b05      	ldr	r3, [pc, #20]	; (2110 <_adc_get_regs+0x30>)
    20fc:	4798      	blx	r3
	return 0;
    20fe:	2000      	movs	r0, #0
    2100:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    2102:	2000      	movs	r0, #0
    2104:	4770      	bx	lr
    2106:	2001      	movs	r0, #1
    2108:	4770      	bx	lr
    210a:	bf00      	nop
    210c:	00007054 	.word	0x00007054
    2110:	00001e29 	.word	0x00001e29

00002114 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2114:	b538      	push	{r3, r4, r5, lr}
    2116:	460c      	mov	r4, r1
	ASSERT(device);
    2118:	4605      	mov	r5, r0
    211a:	22d5      	movs	r2, #213	; 0xd5
    211c:	4907      	ldr	r1, [pc, #28]	; (213c <_adc_sync_init+0x28>)
    211e:	3000      	adds	r0, #0
    2120:	bf18      	it	ne
    2122:	2001      	movne	r0, #1
    2124:	4b06      	ldr	r3, [pc, #24]	; (2140 <_adc_sync_init+0x2c>)
    2126:	4798      	blx	r3

	device->hw = hw;
    2128:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    212a:	4620      	mov	r0, r4
    212c:	4b05      	ldr	r3, [pc, #20]	; (2144 <_adc_sync_init+0x30>)
    212e:	4798      	blx	r3
    2130:	4601      	mov	r1, r0
    2132:	4620      	mov	r0, r4
    2134:	4b04      	ldr	r3, [pc, #16]	; (2148 <_adc_sync_init+0x34>)
    2136:	4798      	blx	r3
}
    2138:	bd38      	pop	{r3, r4, r5, pc}
    213a:	bf00      	nop
    213c:	00007054 	.word	0x00007054
    2140:	00001e29 	.word	0x00001e29
    2144:	000020e1 	.word	0x000020e1
    2148:	00002069 	.word	0x00002069

0000214c <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    214c:	0943      	lsrs	r3, r0, #5
    214e:	f000 001f 	and.w	r0, r0, #31
    2152:	2201      	movs	r2, #1
    2154:	fa02 f000 	lsl.w	r0, r2, r0
    2158:	3340      	adds	r3, #64	; 0x40
    215a:	4a02      	ldr	r2, [pc, #8]	; (2164 <_irq_set+0x18>)
    215c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    2160:	4770      	bx	lr
    2162:	bf00      	nop
    2164:	e000e100 	.word	0xe000e100

00002168 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2168:	f64b 3380 	movw	r3, #48000	; 0xbb80
    216c:	fb03 f000 	mul.w	r0, r3, r0
    2170:	4770      	bx	lr
	...

00002174 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2174:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2176:	4a0c      	ldr	r2, [pc, #48]	; (21a8 <_init_chip+0x34>)
    2178:	8813      	ldrh	r3, [r2, #0]
    217a:	b29b      	uxth	r3, r3
    217c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    217e:	4b0b      	ldr	r3, [pc, #44]	; (21ac <_init_chip+0x38>)
    2180:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    2182:	4b0b      	ldr	r3, [pc, #44]	; (21b0 <_init_chip+0x3c>)
    2184:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2186:	f44f 6000 	mov.w	r0, #2048	; 0x800
    218a:	4c0a      	ldr	r4, [pc, #40]	; (21b4 <_init_chip+0x40>)
    218c:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    218e:	4b0a      	ldr	r3, [pc, #40]	; (21b8 <_init_chip+0x44>)
    2190:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    2192:	f240 70ff 	movw	r0, #2047	; 0x7ff
    2196:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2198:	4a08      	ldr	r2, [pc, #32]	; (21bc <_init_chip+0x48>)
    219a:	6913      	ldr	r3, [r2, #16]
    219c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    21a0:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    21a2:	4b07      	ldr	r3, [pc, #28]	; (21c0 <_init_chip+0x4c>)
    21a4:	4798      	blx	r3
    21a6:	bd10      	pop	{r4, pc}
    21a8:	41004000 	.word	0x41004000
    21ac:	00002645 	.word	0x00002645
    21b0:	0000256d 	.word	0x0000256d
    21b4:	000024c5 	.word	0x000024c5
    21b8:	00002671 	.word	0x00002671
    21bc:	40000800 	.word	0x40000800
    21c0:	000022cd 	.word	0x000022cd

000021c4 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    21c4:	b510      	push	{r4, lr}
    21c6:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    21c8:	22f3      	movs	r2, #243	; 0xf3
    21ca:	4915      	ldr	r1, [pc, #84]	; (2220 <_dac_init+0x5c>)
    21cc:	4815      	ldr	r0, [pc, #84]	; (2224 <_dac_init+0x60>)
    21ce:	4284      	cmp	r4, r0
    21d0:	bf14      	ite	ne
    21d2:	2000      	movne	r0, #0
    21d4:	2001      	moveq	r0, #1
    21d6:	4b14      	ldr	r3, [pc, #80]	; (2228 <_dac_init+0x64>)
    21d8:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    21da:	68a3      	ldr	r3, [r4, #8]
    21dc:	f013 0f01 	tst.w	r3, #1
    21e0:	d1fb      	bne.n	21da <_dac_init+0x16>
    21e2:	68a3      	ldr	r3, [r4, #8]
    21e4:	f013 0f03 	tst.w	r3, #3
    21e8:	d1fb      	bne.n	21e2 <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    21ea:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    21ec:	f013 0f02 	tst.w	r3, #2
    21f0:	d113      	bne.n	221a <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    21f2:	68a3      	ldr	r3, [r4, #8]
    21f4:	f013 0f01 	tst.w	r3, #1
    21f8:	d1fb      	bne.n	21f2 <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    21fa:	7823      	ldrb	r3, [r4, #0]
    21fc:	f043 0301 	orr.w	r3, r3, #1
    2200:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    2202:	68a3      	ldr	r3, [r4, #8]
    2204:	f013 0f01 	tst.w	r3, #1
    2208:	d1fb      	bne.n	2202 <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    220a:	2000      	movs	r0, #0
    220c:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    220e:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    2210:	81a0      	strh	r0, [r4, #12]
    2212:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    2214:	2301      	movs	r3, #1
    2216:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    2218:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    221a:	f06f 0003 	mvn.w	r0, #3
}
    221e:	bd10      	pop	{r4, pc}
    2220:	0000706c 	.word	0x0000706c
    2224:	43002400 	.word	0x43002400
    2228:	00001e29 	.word	0x00001e29

0000222c <_dac_sync_init>:
{
    222c:	b538      	push	{r3, r4, r5, lr}
    222e:	460c      	mov	r4, r1
	ASSERT(device);
    2230:	4605      	mov	r5, r0
    2232:	2261      	movs	r2, #97	; 0x61
    2234:	4905      	ldr	r1, [pc, #20]	; (224c <_dac_sync_init+0x20>)
    2236:	3000      	adds	r0, #0
    2238:	bf18      	it	ne
    223a:	2001      	movne	r0, #1
    223c:	4b04      	ldr	r3, [pc, #16]	; (2250 <_dac_sync_init+0x24>)
    223e:	4798      	blx	r3
	device->hw = hw;
    2240:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    2242:	4620      	mov	r0, r4
    2244:	4b03      	ldr	r3, [pc, #12]	; (2254 <_dac_sync_init+0x28>)
    2246:	4798      	blx	r3
}
    2248:	bd38      	pop	{r3, r4, r5, pc}
    224a:	bf00      	nop
    224c:	0000706c 	.word	0x0000706c
    2250:	00001e29 	.word	0x00001e29
    2254:	000021c5 	.word	0x000021c5

00002258 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2258:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    225a:	4a1a      	ldr	r2, [pc, #104]	; (22c4 <_dmac_handler+0x6c>)
    225c:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    225e:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    2262:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    2266:	4818      	ldr	r0, [pc, #96]	; (22c8 <_dmac_handler+0x70>)
    2268:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    226c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2270:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2274:	f012 0f01 	tst.w	r2, #1
    2278:	d10a      	bne.n	2290 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    227a:	011a      	lsls	r2, r3, #4
    227c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2280:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2284:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    2288:	f012 0f02 	tst.w	r2, #2
    228c:	d10b      	bne.n	22a6 <_dmac_handler+0x4e>
    228e:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2290:	011a      	lsls	r2, r3, #4
    2292:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2296:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    229a:	2101      	movs	r1, #1
    229c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    22a0:	6843      	ldr	r3, [r0, #4]
    22a2:	4798      	blx	r3
    22a4:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    22a6:	011a      	lsls	r2, r3, #4
    22a8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    22ac:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    22b0:	2102      	movs	r1, #2
    22b2:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    22b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    22ba:	4a03      	ldr	r2, [pc, #12]	; (22c8 <_dmac_handler+0x70>)
    22bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    22c0:	4798      	blx	r3
	}
}
    22c2:	e7e4      	b.n	228e <_dmac_handler+0x36>
    22c4:	4100a000 	.word	0x4100a000
    22c8:	20000540 	.word	0x20000540

000022cc <_dma_init>:
{
    22cc:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    22ce:	4a33      	ldr	r2, [pc, #204]	; (239c <_dma_init+0xd0>)
    22d0:	8813      	ldrh	r3, [r2, #0]
    22d2:	f023 0302 	bic.w	r3, r3, #2
    22d6:	041b      	lsls	r3, r3, #16
    22d8:	0c1b      	lsrs	r3, r3, #16
    22da:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    22dc:	8853      	ldrh	r3, [r2, #2]
    22de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    22e2:	041b      	lsls	r3, r3, #16
    22e4:	0c1b      	lsrs	r3, r3, #16
    22e6:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    22e8:	8813      	ldrh	r3, [r2, #0]
    22ea:	b29b      	uxth	r3, r3
    22ec:	f043 0301 	orr.w	r3, r3, #1
    22f0:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    22f2:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    22f4:	f013 0f01 	tst.w	r3, #1
    22f8:	d1fb      	bne.n	22f2 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    22fa:	4b28      	ldr	r3, [pc, #160]	; (239c <_dma_init+0xd0>)
    22fc:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    2300:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    2302:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2304:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2308:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    230a:	2000      	movs	r0, #0
    230c:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    230e:	4a24      	ldr	r2, [pc, #144]	; (23a0 <_dma_init+0xd4>)
    2310:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    2314:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2316:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    231a:	639a      	str	r2, [r3, #56]	; 0x38
    231c:	4b21      	ldr	r3, [pc, #132]	; (23a4 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    231e:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    2322:	681c      	ldr	r4, [r3, #0]
    2324:	0101      	lsls	r1, r0, #4
    2326:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    232a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    232e:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    2330:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2332:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2336:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2338:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    233c:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    233e:	4429      	add	r1, r5
    2340:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    2344:	3001      	adds	r0, #1
    2346:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2348:	2820      	cmp	r0, #32
    234a:	d1ea      	bne.n	2322 <_dma_init+0x56>
    234c:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    234e:	2001      	movs	r0, #1
    2350:	4915      	ldr	r1, [pc, #84]	; (23a8 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    2352:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2354:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2358:	d00b      	beq.n	2372 <_dma_init+0xa6>
    235a:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    235c:	2b24      	cmp	r3, #36	; 0x24
    235e:	d1f8      	bne.n	2352 <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    2360:	4a0e      	ldr	r2, [pc, #56]	; (239c <_dma_init+0xd0>)
    2362:	8813      	ldrh	r3, [r2, #0]
    2364:	b29b      	uxth	r3, r3
    2366:	f043 0302 	orr.w	r3, r3, #2
    236a:	8013      	strh	r3, [r2, #0]
}
    236c:	2000      	movs	r0, #0
    236e:	bc30      	pop	{r4, r5}
    2370:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2372:	095c      	lsrs	r4, r3, #5
    2374:	f002 021f 	and.w	r2, r2, #31
    2378:	fa00 f202 	lsl.w	r2, r0, r2
    237c:	f104 0520 	add.w	r5, r4, #32
    2380:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2384:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2388:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    238c:	f104 0560 	add.w	r5, r4, #96	; 0x60
    2390:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2394:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    2398:	e7df      	b.n	235a <_dma_init+0x8e>
    239a:	bf00      	nop
    239c:	4100a000 	.word	0x4100a000
    23a0:	20000540 	.word	0x20000540
    23a4:	00007084 	.word	0x00007084
    23a8:	e000e100 	.word	0xe000e100

000023ac <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    23ac:	b508      	push	{r3, lr}
	_dmac_handler();
    23ae:	4b01      	ldr	r3, [pc, #4]	; (23b4 <DMAC_0_Handler+0x8>)
    23b0:	4798      	blx	r3
    23b2:	bd08      	pop	{r3, pc}
    23b4:	00002259 	.word	0x00002259

000023b8 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    23b8:	b508      	push	{r3, lr}
	_dmac_handler();
    23ba:	4b01      	ldr	r3, [pc, #4]	; (23c0 <DMAC_1_Handler+0x8>)
    23bc:	4798      	blx	r3
    23be:	bd08      	pop	{r3, pc}
    23c0:	00002259 	.word	0x00002259

000023c4 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    23c4:	b508      	push	{r3, lr}
	_dmac_handler();
    23c6:	4b01      	ldr	r3, [pc, #4]	; (23cc <DMAC_2_Handler+0x8>)
    23c8:	4798      	blx	r3
    23ca:	bd08      	pop	{r3, pc}
    23cc:	00002259 	.word	0x00002259

000023d0 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    23d0:	b508      	push	{r3, lr}
	_dmac_handler();
    23d2:	4b01      	ldr	r3, [pc, #4]	; (23d8 <DMAC_3_Handler+0x8>)
    23d4:	4798      	blx	r3
    23d6:	bd08      	pop	{r3, pc}
    23d8:	00002259 	.word	0x00002259

000023dc <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    23dc:	b508      	push	{r3, lr}
	_dmac_handler();
    23de:	4b01      	ldr	r3, [pc, #4]	; (23e4 <DMAC_4_Handler+0x8>)
    23e0:	4798      	blx	r3
    23e2:	bd08      	pop	{r3, pc}
    23e4:	00002259 	.word	0x00002259

000023e8 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    23e8:	4a1e      	ldr	r2, [pc, #120]	; (2464 <_ext_irq_init+0x7c>)
    23ea:	6853      	ldr	r3, [r2, #4]
    23ec:	f013 0f01 	tst.w	r3, #1
    23f0:	d1fb      	bne.n	23ea <_ext_irq_init+0x2>
    23f2:	4a1c      	ldr	r2, [pc, #112]	; (2464 <_ext_irq_init+0x7c>)
    23f4:	6853      	ldr	r3, [r2, #4]
    23f6:	f013 0f03 	tst.w	r3, #3
    23fa:	d1fb      	bne.n	23f4 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    23fc:	4b19      	ldr	r3, [pc, #100]	; (2464 <_ext_irq_init+0x7c>)
    23fe:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    2400:	f013 0f02 	tst.w	r3, #2
    2404:	d12b      	bne.n	245e <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2406:	4a17      	ldr	r2, [pc, #92]	; (2464 <_ext_irq_init+0x7c>)
    2408:	6853      	ldr	r3, [r2, #4]
    240a:	f013 0f01 	tst.w	r3, #1
    240e:	d1fb      	bne.n	2408 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    2410:	4a14      	ldr	r2, [pc, #80]	; (2464 <_ext_irq_init+0x7c>)
    2412:	7813      	ldrb	r3, [r2, #0]
    2414:	f043 0301 	orr.w	r3, r3, #1
    2418:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    241a:	6853      	ldr	r3, [r2, #4]
    241c:	f013 0f01 	tst.w	r3, #1
    2420:	d1fb      	bne.n	241a <_ext_irq_init+0x32>
    2422:	4a10      	ldr	r2, [pc, #64]	; (2464 <_ext_irq_init+0x7c>)
    2424:	6853      	ldr	r3, [r2, #4]
    2426:	f013 0f03 	tst.w	r3, #3
    242a:	d1fb      	bne.n	2424 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    242c:	4b0d      	ldr	r3, [pc, #52]	; (2464 <_ext_irq_init+0x7c>)
    242e:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    2430:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    2434:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    2436:	2200      	movs	r2, #0
    2438:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    243a:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    243c:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    243e:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    2440:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    2442:	61da      	str	r2, [r3, #28]
    2444:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2446:	461a      	mov	r2, r3
    2448:	6853      	ldr	r3, [r2, #4]
    244a:	f013 0f03 	tst.w	r3, #3
    244e:	d1fb      	bne.n	2448 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    2450:	4a04      	ldr	r2, [pc, #16]	; (2464 <_ext_irq_init+0x7c>)
    2452:	7813      	ldrb	r3, [r2, #0]
    2454:	f043 0302 	orr.w	r3, r3, #2
    2458:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    245a:	2000      	movs	r0, #0
    245c:	4770      	bx	lr
		return ERR_DENIED;
    245e:	f06f 0010 	mvn.w	r0, #16
}
    2462:	4770      	bx	lr
    2464:	40002800 	.word	0x40002800

00002468 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2468:	b430      	push	{r4, r5}
    246a:	4814      	ldr	r0, [pc, #80]	; (24bc <_event_system_init+0x54>)
    246c:	f100 0543 	add.w	r5, r0, #67	; 0x43
    2470:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2472:	4c13      	ldr	r4, [pc, #76]	; (24c0 <_event_system_init+0x58>)
    2474:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2476:	f813 1b01 	ldrb.w	r1, [r3], #1
    247a:	3248      	adds	r2, #72	; 0x48
    247c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    2480:	42ab      	cmp	r3, r5
    2482:	d1f7      	bne.n	2474 <_event_system_init+0xc>
    2484:	480d      	ldr	r0, [pc, #52]	; (24bc <_event_system_init+0x54>)
    2486:	f100 0442 	add.w	r4, r0, #66	; 0x42
    248a:	3080      	adds	r0, #128	; 0x80
    248c:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    248e:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2492:	00ca      	lsls	r2, r1, #3
    2494:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2498:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    249c:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    249e:	f850 3f04 	ldr.w	r3, [r0, #4]!
    24a2:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    24a4:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    24a8:	43db      	mvns	r3, r3
    24aa:	b2db      	uxtb	r3, r3
    24ac:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    24b0:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    24b2:	2920      	cmp	r1, #32
    24b4:	d1eb      	bne.n	248e <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    24b6:	2000      	movs	r0, #0
    24b8:	bc30      	pop	{r4, r5}
    24ba:	4770      	bx	lr
    24bc:	00007184 	.word	0x00007184
    24c0:	4100e000 	.word	0x4100e000

000024c4 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    24c4:	f010 0f01 	tst.w	r0, #1
    24c8:	d002      	beq.n	24d0 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    24ca:	4a23      	ldr	r2, [pc, #140]	; (2558 <_gclk_init_generators_by_fref+0x94>)
    24cc:	4b23      	ldr	r3, [pc, #140]	; (255c <_gclk_init_generators_by_fref+0x98>)
    24ce:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    24d0:	f010 0f02 	tst.w	r0, #2
    24d4:	d002      	beq.n	24dc <_gclk_init_generators_by_fref+0x18>
    24d6:	4a22      	ldr	r2, [pc, #136]	; (2560 <_gclk_init_generators_by_fref+0x9c>)
    24d8:	4b20      	ldr	r3, [pc, #128]	; (255c <_gclk_init_generators_by_fref+0x98>)
    24da:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    24dc:	f010 0f04 	tst.w	r0, #4
    24e0:	d002      	beq.n	24e8 <_gclk_init_generators_by_fref+0x24>
    24e2:	4a1d      	ldr	r2, [pc, #116]	; (2558 <_gclk_init_generators_by_fref+0x94>)
    24e4:	4b1d      	ldr	r3, [pc, #116]	; (255c <_gclk_init_generators_by_fref+0x98>)
    24e6:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    24e8:	f010 0f08 	tst.w	r0, #8
    24ec:	d002      	beq.n	24f4 <_gclk_init_generators_by_fref+0x30>
    24ee:	4a1a      	ldr	r2, [pc, #104]	; (2558 <_gclk_init_generators_by_fref+0x94>)
    24f0:	4b1a      	ldr	r3, [pc, #104]	; (255c <_gclk_init_generators_by_fref+0x98>)
    24f2:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    24f4:	f010 0f10 	tst.w	r0, #16
    24f8:	d002      	beq.n	2500 <_gclk_init_generators_by_fref+0x3c>
    24fa:	4a17      	ldr	r2, [pc, #92]	; (2558 <_gclk_init_generators_by_fref+0x94>)
    24fc:	4b17      	ldr	r3, [pc, #92]	; (255c <_gclk_init_generators_by_fref+0x98>)
    24fe:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    2500:	f010 0f20 	tst.w	r0, #32
    2504:	d002      	beq.n	250c <_gclk_init_generators_by_fref+0x48>
    2506:	4a14      	ldr	r2, [pc, #80]	; (2558 <_gclk_init_generators_by_fref+0x94>)
    2508:	4b14      	ldr	r3, [pc, #80]	; (255c <_gclk_init_generators_by_fref+0x98>)
    250a:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    250c:	f010 0f40 	tst.w	r0, #64	; 0x40
    2510:	d002      	beq.n	2518 <_gclk_init_generators_by_fref+0x54>
    2512:	4a11      	ldr	r2, [pc, #68]	; (2558 <_gclk_init_generators_by_fref+0x94>)
    2514:	4b11      	ldr	r3, [pc, #68]	; (255c <_gclk_init_generators_by_fref+0x98>)
    2516:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    2518:	f010 0f80 	tst.w	r0, #128	; 0x80
    251c:	d002      	beq.n	2524 <_gclk_init_generators_by_fref+0x60>
    251e:	4a0e      	ldr	r2, [pc, #56]	; (2558 <_gclk_init_generators_by_fref+0x94>)
    2520:	4b0e      	ldr	r3, [pc, #56]	; (255c <_gclk_init_generators_by_fref+0x98>)
    2522:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    2524:	f410 7f80 	tst.w	r0, #256	; 0x100
    2528:	d002      	beq.n	2530 <_gclk_init_generators_by_fref+0x6c>
    252a:	4a0b      	ldr	r2, [pc, #44]	; (2558 <_gclk_init_generators_by_fref+0x94>)
    252c:	4b0b      	ldr	r3, [pc, #44]	; (255c <_gclk_init_generators_by_fref+0x98>)
    252e:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    2530:	f410 7f00 	tst.w	r0, #512	; 0x200
    2534:	d002      	beq.n	253c <_gclk_init_generators_by_fref+0x78>
    2536:	4a08      	ldr	r2, [pc, #32]	; (2558 <_gclk_init_generators_by_fref+0x94>)
    2538:	4b08      	ldr	r3, [pc, #32]	; (255c <_gclk_init_generators_by_fref+0x98>)
    253a:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    253c:	f410 6f80 	tst.w	r0, #1024	; 0x400
    2540:	d002      	beq.n	2548 <_gclk_init_generators_by_fref+0x84>
    2542:	4a08      	ldr	r2, [pc, #32]	; (2564 <_gclk_init_generators_by_fref+0xa0>)
    2544:	4b05      	ldr	r3, [pc, #20]	; (255c <_gclk_init_generators_by_fref+0x98>)
    2546:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    2548:	f410 6f00 	tst.w	r0, #2048	; 0x800
    254c:	d002      	beq.n	2554 <_gclk_init_generators_by_fref+0x90>
    254e:	4a06      	ldr	r2, [pc, #24]	; (2568 <_gclk_init_generators_by_fref+0xa4>)
    2550:	4b02      	ldr	r3, [pc, #8]	; (255c <_gclk_init_generators_by_fref+0x98>)
    2552:	64da      	str	r2, [r3, #76]	; 0x4c
    2554:	4770      	bx	lr
    2556:	bf00      	nop
    2558:	00012b06 	.word	0x00012b06
    255c:	40001c00 	.word	0x40001c00
    2560:	00012306 	.word	0x00012306
    2564:	00012b05 	.word	0x00012b05
    2568:	00013b05 	.word	0x00013b05

0000256c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    256c:	2201      	movs	r2, #1
    256e:	4b01      	ldr	r3, [pc, #4]	; (2574 <_mclk_init+0x8>)
    2570:	715a      	strb	r2, [r3, #5]
    2572:	4770      	bx	lr
    2574:	40000800 	.word	0x40000800

00002578 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2578:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    257a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    257c:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    257e:	f012 0f01 	tst.w	r2, #1
    2582:	d005      	beq.n	2590 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2584:	2201      	movs	r2, #1
    2586:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2588:	6803      	ldr	r3, [r0, #0]
    258a:	b153      	cbz	r3, 25a2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    258c:	4798      	blx	r3
    258e:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    2590:	8a1a      	ldrh	r2, [r3, #16]
    2592:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2594:	b12a      	cbz	r2, 25a2 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2596:	f240 225e 	movw	r2, #606	; 0x25e
    259a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    259c:	6843      	ldr	r3, [r0, #4]
    259e:	b103      	cbz	r3, 25a2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    25a0:	4798      	blx	r3
    25a2:	bd08      	pop	{r3, pc}

000025a4 <_flash_init>:
{
    25a4:	b538      	push	{r3, r4, r5, lr}
    25a6:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    25a8:	4605      	mov	r5, r0
    25aa:	b350      	cbz	r0, 2602 <_flash_init+0x5e>
    25ac:	4816      	ldr	r0, [pc, #88]	; (2608 <_flash_init+0x64>)
    25ae:	4281      	cmp	r1, r0
    25b0:	bf14      	ite	ne
    25b2:	2000      	movne	r0, #0
    25b4:	2001      	moveq	r0, #1
    25b6:	2256      	movs	r2, #86	; 0x56
    25b8:	4914      	ldr	r1, [pc, #80]	; (260c <_flash_init+0x68>)
    25ba:	4b15      	ldr	r3, [pc, #84]	; (2610 <_flash_init+0x6c>)
    25bc:	4798      	blx	r3
	device->hw = hw;
    25be:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    25c0:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    25c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    25c6:	049b      	lsls	r3, r3, #18
    25c8:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    25ca:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    25cc:	4b11      	ldr	r3, [pc, #68]	; (2614 <_flash_init+0x70>)
    25ce:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    25d0:	4b11      	ldr	r3, [pc, #68]	; (2618 <_flash_init+0x74>)
    25d2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    25d6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    25da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25de:	f3bf 8f6f 	isb	sy
    25e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    25e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    25ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25ee:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    25f2:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    25f6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    25fa:	6019      	str	r1, [r3, #0]
    25fc:	601a      	str	r2, [r3, #0]
}
    25fe:	2000      	movs	r0, #0
    2600:	bd38      	pop	{r3, r4, r5, pc}
    2602:	2000      	movs	r0, #0
    2604:	e7d7      	b.n	25b6 <_flash_init+0x12>
    2606:	bf00      	nop
    2608:	41004000 	.word	0x41004000
    260c:	00007288 	.word	0x00007288
    2610:	00001e29 	.word	0x00001e29
    2614:	20000ac0 	.word	0x20000ac0
    2618:	e000e100 	.word	0xe000e100

0000261c <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    261c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    261e:	4b02      	ldr	r3, [pc, #8]	; (2628 <NVMCTRL_0_Handler+0xc>)
    2620:	6818      	ldr	r0, [r3, #0]
    2622:	4b02      	ldr	r3, [pc, #8]	; (262c <NVMCTRL_0_Handler+0x10>)
    2624:	4798      	blx	r3
    2626:	bd08      	pop	{r3, pc}
    2628:	20000ac0 	.word	0x20000ac0
    262c:	00002579 	.word	0x00002579

00002630 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    2630:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    2632:	4b02      	ldr	r3, [pc, #8]	; (263c <NVMCTRL_1_Handler+0xc>)
    2634:	6818      	ldr	r0, [r3, #0]
    2636:	4b02      	ldr	r3, [pc, #8]	; (2640 <NVMCTRL_1_Handler+0x10>)
    2638:	4798      	blx	r3
    263a:	bd08      	pop	{r3, pc}
    263c:	20000ac0 	.word	0x20000ac0
    2640:	00002579 	.word	0x00002579

00002644 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2644:	4b09      	ldr	r3, [pc, #36]	; (266c <_osc32kctrl_init_sources+0x28>)
    2646:	f242 024e 	movw	r2, #8270	; 0x204e
    264a:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    264c:	2201      	movs	r2, #1
    264e:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    2650:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    2652:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2654:	2200      	movs	r2, #0
    2656:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    2658:	461a      	mov	r2, r3
    265a:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    265c:	f013 0f01 	tst.w	r3, #1
    2660:	d0fb      	beq.n	265a <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    2662:	2204      	movs	r2, #4
    2664:	4b01      	ldr	r3, [pc, #4]	; (266c <_osc32kctrl_init_sources+0x28>)
    2666:	741a      	strb	r2, [r3, #16]
    2668:	4770      	bx	lr
    266a:	bf00      	nop
    266c:	40001400 	.word	0x40001400

00002670 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2670:	4a2b      	ldr	r2, [pc, #172]	; (2720 <_oscctrl_init_referenced_generators+0xb0>)
    2672:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2674:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2678:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    267c:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    267e:	4b29      	ldr	r3, [pc, #164]	; (2724 <_oscctrl_init_referenced_generators+0xb4>)
    2680:	2200      	movs	r2, #0
    2682:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2684:	4a28      	ldr	r2, [pc, #160]	; (2728 <_oscctrl_init_referenced_generators+0xb8>)
    2686:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2688:	461a      	mov	r2, r3
    268a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    268e:	f013 0f10 	tst.w	r3, #16
    2692:	d1fa      	bne.n	268a <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2694:	2200      	movs	r2, #0
    2696:	4b23      	ldr	r3, [pc, #140]	; (2724 <_oscctrl_init_referenced_generators+0xb4>)
    2698:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    269c:	461a      	mov	r2, r3
    269e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    26a2:	f013 0f04 	tst.w	r3, #4
    26a6:	d1fa      	bne.n	269e <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    26a8:	2242      	movs	r2, #66	; 0x42
    26aa:	4b1e      	ldr	r3, [pc, #120]	; (2724 <_oscctrl_init_referenced_generators+0xb4>)
    26ac:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    26ae:	461a      	mov	r2, r3
    26b0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    26b4:	f013 0f02 	tst.w	r3, #2
    26b8:	d1fa      	bne.n	26b0 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    26ba:	4b1a      	ldr	r3, [pc, #104]	; (2724 <_oscctrl_init_referenced_generators+0xb4>)
    26bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    26be:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    26c0:	461a      	mov	r2, r3
    26c2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    26c6:	f013 0f08 	tst.w	r3, #8
    26ca:	d1fa      	bne.n	26c2 <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    26cc:	2282      	movs	r2, #130	; 0x82
    26ce:	4b15      	ldr	r3, [pc, #84]	; (2724 <_oscctrl_init_referenced_generators+0xb4>)
    26d0:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    26d4:	461a      	mov	r2, r3
    26d6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    26da:	f013 0f04 	tst.w	r3, #4
    26de:	d1fa      	bne.n	26d6 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    26e0:	4b10      	ldr	r3, [pc, #64]	; (2724 <_oscctrl_init_referenced_generators+0xb4>)
    26e2:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    26e6:	f013 0f01 	tst.w	r3, #1
    26ea:	d012      	beq.n	2712 <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    26ec:	4a0d      	ldr	r2, [pc, #52]	; (2724 <_oscctrl_init_referenced_generators+0xb4>)
    26ee:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    26f0:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    26f4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    26f8:	d1f9      	bne.n	26ee <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    26fa:	4a09      	ldr	r2, [pc, #36]	; (2720 <_oscctrl_init_referenced_generators+0xb0>)
    26fc:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    26fe:	2b00      	cmp	r3, #0
    2700:	d1fc      	bne.n	26fc <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    2702:	4a07      	ldr	r2, [pc, #28]	; (2720 <_oscctrl_init_referenced_generators+0xb0>)
    2704:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2706:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    270a:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    270e:	6213      	str	r3, [r2, #32]
    2710:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    2712:	4a04      	ldr	r2, [pc, #16]	; (2724 <_oscctrl_init_referenced_generators+0xb4>)
    2714:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2716:	f413 7f80 	tst.w	r3, #256	; 0x100
    271a:	d0fb      	beq.n	2714 <_oscctrl_init_referenced_generators+0xa4>
    271c:	e7ed      	b.n	26fa <_oscctrl_init_referenced_generators+0x8a>
    271e:	bf00      	nop
    2720:	40001c00 	.word	0x40001c00
    2724:	40001000 	.word	0x40001000
    2728:	04010000 	.word	0x04010000

0000272c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    272c:	b500      	push	{lr}
    272e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    2730:	4b0d      	ldr	r3, [pc, #52]	; (2768 <RAMECC_Handler+0x3c>)
    2732:	789b      	ldrb	r3, [r3, #2]
    2734:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2736:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2738:	9b01      	ldr	r3, [sp, #4]
    273a:	f013 0f02 	tst.w	r3, #2
    273e:	d006      	beq.n	274e <RAMECC_Handler+0x22>
    2740:	4b0a      	ldr	r3, [pc, #40]	; (276c <RAMECC_Handler+0x40>)
    2742:	681b      	ldr	r3, [r3, #0]
    2744:	b11b      	cbz	r3, 274e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2746:	4a08      	ldr	r2, [pc, #32]	; (2768 <RAMECC_Handler+0x3c>)
    2748:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    274a:	4798      	blx	r3
    274c:	e009      	b.n	2762 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    274e:	9b01      	ldr	r3, [sp, #4]
    2750:	f013 0f01 	tst.w	r3, #1
    2754:	d005      	beq.n	2762 <RAMECC_Handler+0x36>
    2756:	4b05      	ldr	r3, [pc, #20]	; (276c <RAMECC_Handler+0x40>)
    2758:	685b      	ldr	r3, [r3, #4]
    275a:	b113      	cbz	r3, 2762 <RAMECC_Handler+0x36>
    275c:	4a02      	ldr	r2, [pc, #8]	; (2768 <RAMECC_Handler+0x3c>)
    275e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2760:	4798      	blx	r3
	} else {
		return;
	}
}
    2762:	b003      	add	sp, #12
    2764:	f85d fb04 	ldr.w	pc, [sp], #4
    2768:	41020000 	.word	0x41020000
    276c:	20003e54 	.word	0x20003e54

00002770 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    2770:	b470      	push	{r4, r5, r6}
    2772:	b087      	sub	sp, #28
    2774:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2776:	466c      	mov	r4, sp
    2778:	4d0c      	ldr	r5, [pc, #48]	; (27ac <_sercom_get_hardware_index+0x3c>)
    277a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    277c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    277e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2782:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2786:	9b00      	ldr	r3, [sp, #0]
    2788:	42b3      	cmp	r3, r6
    278a:	d00c      	beq.n	27a6 <_sercom_get_hardware_index+0x36>
    278c:	4632      	mov	r2, r6
    278e:	2001      	movs	r0, #1
    2790:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    2794:	4293      	cmp	r3, r2
    2796:	d007      	beq.n	27a8 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2798:	3001      	adds	r0, #1
    279a:	2806      	cmp	r0, #6
    279c:	d1f8      	bne.n	2790 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    279e:	2000      	movs	r0, #0
}
    27a0:	b007      	add	sp, #28
    27a2:	bc70      	pop	{r4, r5, r6}
    27a4:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    27a6:	2000      	movs	r0, #0
			return i;
    27a8:	b2c0      	uxtb	r0, r0
    27aa:	e7f9      	b.n	27a0 <_sercom_get_hardware_index+0x30>
    27ac:	000072a8 	.word	0x000072a8

000027b0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    27b0:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    27b2:	4b03      	ldr	r3, [pc, #12]	; (27c0 <_sercom_get_irq_num+0x10>)
    27b4:	4798      	blx	r3
    27b6:	0080      	lsls	r0, r0, #2
    27b8:	302e      	adds	r0, #46	; 0x2e
}
    27ba:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    27be:	bd08      	pop	{r3, pc}
    27c0:	00002771 	.word	0x00002771

000027c4 <_usart_init>:
{
    27c4:	b538      	push	{r3, r4, r5, lr}
    27c6:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    27c8:	4b33      	ldr	r3, [pc, #204]	; (2898 <_usart_init+0xd4>)
    27ca:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    27cc:	2803      	cmp	r0, #3
    27ce:	d056      	beq.n	287e <_usart_init+0xba>
    27d0:	2804      	cmp	r0, #4
    27d2:	d052      	beq.n	287a <_usart_init+0xb6>
    27d4:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    27d6:	bf08      	it	eq
    27d8:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    27da:	d006      	beq.n	27ea <_usart_init+0x26>
	ASSERT(false);
    27dc:	f240 2263 	movw	r2, #611	; 0x263
    27e0:	492e      	ldr	r1, [pc, #184]	; (289c <_usart_init+0xd8>)
    27e2:	2000      	movs	r0, #0
    27e4:	4b2e      	ldr	r3, [pc, #184]	; (28a0 <_usart_init+0xdc>)
    27e6:	4798      	blx	r3
	return 0;
    27e8:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27ea:	69e3      	ldr	r3, [r4, #28]
    27ec:	f013 0f01 	tst.w	r3, #1
    27f0:	d1fb      	bne.n	27ea <_usart_init+0x26>
    27f2:	69e3      	ldr	r3, [r4, #28]
    27f4:	f013 0f03 	tst.w	r3, #3
    27f8:	d1fb      	bne.n	27f2 <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    27fa:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    27fc:	f013 0f02 	tst.w	r3, #2
    2800:	d147      	bne.n	2892 <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2802:	69e3      	ldr	r3, [r4, #28]
    2804:	f013 0f01 	tst.w	r3, #1
    2808:	d1fb      	bne.n	2802 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    280a:	6823      	ldr	r3, [r4, #0]
    280c:	f043 0301 	orr.w	r3, r3, #1
    2810:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2812:	69e3      	ldr	r3, [r4, #28]
    2814:	f013 0f01 	tst.w	r3, #1
    2818:	d1fb      	bne.n	2812 <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    281a:	4610      	mov	r0, r2
    281c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    2820:	4920      	ldr	r1, [pc, #128]	; (28a4 <_usart_init+0xe0>)
    2822:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2826:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2828:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    282a:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    282c:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    2830:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    2832:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    2836:	d024      	beq.n	2882 <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2838:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    283c:	4b19      	ldr	r3, [pc, #100]	; (28a4 <_usart_init+0xe0>)
    283e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2842:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    2844:	89a3      	ldrh	r3, [r4, #12]
    2846:	f361 030c 	bfi	r3, r1, #0, #13
    284a:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    284c:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    2850:	89a3      	ldrh	r3, [r4, #12]
    2852:	f362 334f 	bfi	r3, r2, #13, #3
    2856:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2858:	4b12      	ldr	r3, [pc, #72]	; (28a4 <_usart_init+0xe0>)
    285a:	0042      	lsls	r2, r0, #1
    285c:	1811      	adds	r1, r2, r0
    285e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    2862:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    2866:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2868:	4402      	add	r2, r0
    286a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    286e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    2872:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    2876:	2000      	movs	r0, #0
    2878:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    287a:	2201      	movs	r2, #1
    287c:	e7b5      	b.n	27ea <_usart_init+0x26>
    287e:	2200      	movs	r2, #0
    2880:	e7b3      	b.n	27ea <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    2882:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2886:	4b07      	ldr	r3, [pc, #28]	; (28a4 <_usart_init+0xe0>)
    2888:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    288c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    288e:	81a3      	strh	r3, [r4, #12]
    2890:	e7e2      	b.n	2858 <_usart_init+0x94>
		return ERR_DENIED;
    2892:	f06f 0010 	mvn.w	r0, #16
}
    2896:	bd38      	pop	{r3, r4, r5, pc}
    2898:	00002771 	.word	0x00002771
    289c:	00007334 	.word	0x00007334
    28a0:	00001e29 	.word	0x00001e29
    28a4:	000072a8 	.word	0x000072a8

000028a8 <_usart_async_init>:
{
    28a8:	b570      	push	{r4, r5, r6, lr}
    28aa:	460d      	mov	r5, r1
	ASSERT(device);
    28ac:	4606      	mov	r6, r0
    28ae:	22da      	movs	r2, #218	; 0xda
    28b0:	4916      	ldr	r1, [pc, #88]	; (290c <_usart_async_init+0x64>)
    28b2:	3000      	adds	r0, #0
    28b4:	bf18      	it	ne
    28b6:	2001      	movne	r0, #1
    28b8:	4b15      	ldr	r3, [pc, #84]	; (2910 <_usart_async_init+0x68>)
    28ba:	4798      	blx	r3
	init_status = _usart_init(hw);
    28bc:	4628      	mov	r0, r5
    28be:	4b15      	ldr	r3, [pc, #84]	; (2914 <_usart_async_init+0x6c>)
    28c0:	4798      	blx	r3
	if (init_status) {
    28c2:	4604      	mov	r4, r0
    28c4:	b9f8      	cbnz	r0, 2906 <_usart_async_init+0x5e>
	device->hw = hw;
    28c6:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    28c8:	4628      	mov	r0, r5
    28ca:	4b13      	ldr	r3, [pc, #76]	; (2918 <_usart_async_init+0x70>)
    28cc:	4798      	blx	r3
		irq = irq +2;
    28ce:	3002      	adds	r0, #2
    28d0:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    28d2:	f000 031f 	and.w	r3, r0, #31
    28d6:	2201      	movs	r2, #1
    28d8:	409a      	lsls	r2, r3
    28da:	0943      	lsrs	r3, r0, #5
    28dc:	009b      	lsls	r3, r3, #2
    28de:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    28e2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    28e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    28ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28ee:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    28f2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    28f6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    28fa:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    28fe:	21e0      	movs	r1, #224	; 0xe0
    2900:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2904:	601a      	str	r2, [r3, #0]
}
    2906:	4620      	mov	r0, r4
    2908:	bd70      	pop	{r4, r5, r6, pc}
    290a:	bf00      	nop
    290c:	00007334 	.word	0x00007334
    2910:	00001e29 	.word	0x00001e29
    2914:	000027c5 	.word	0x000027c5
    2918:	000027b1 	.word	0x000027b1

0000291c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    291c:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    291e:	69d3      	ldr	r3, [r2, #28]
    2920:	f013 0f03 	tst.w	r3, #3
    2924:	d1fb      	bne.n	291e <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2926:	6813      	ldr	r3, [r2, #0]
    2928:	f043 0302 	orr.w	r3, r3, #2
    292c:	6013      	str	r3, [r2, #0]
    292e:	4770      	bx	lr

00002930 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    2930:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    2932:	6299      	str	r1, [r3, #40]	; 0x28
    2934:	4770      	bx	lr

00002936 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    2936:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    2938:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    293a:	b2c0      	uxtb	r0, r0
    293c:	4770      	bx	lr

0000293e <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    293e:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    2940:	7e18      	ldrb	r0, [r3, #24]
}
    2942:	f000 0001 	and.w	r0, r0, #1
    2946:	4770      	bx	lr

00002948 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2948:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    294a:	7e18      	ldrb	r0, [r3, #24]
}
    294c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    2950:	4770      	bx	lr
	...

00002954 <_usart_async_set_irq_state>:
{
    2954:	b570      	push	{r4, r5, r6, lr}
    2956:	460c      	mov	r4, r1
    2958:	4616      	mov	r6, r2
	ASSERT(device);
    295a:	4605      	mov	r5, r0
    295c:	f240 2245 	movw	r2, #581	; 0x245
    2960:	4915      	ldr	r1, [pc, #84]	; (29b8 <_usart_async_set_irq_state+0x64>)
    2962:	3000      	adds	r0, #0
    2964:	bf18      	it	ne
    2966:	2001      	movne	r0, #1
    2968:	4b14      	ldr	r3, [pc, #80]	; (29bc <_usart_async_set_irq_state+0x68>)
    296a:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    296c:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    2970:	d10d      	bne.n	298e <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    2972:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    2974:	b92e      	cbnz	r6, 2982 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2976:	2201      	movs	r2, #1
    2978:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    297a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    297c:	2202      	movs	r2, #2
    297e:	751a      	strb	r2, [r3, #20]
    2980:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2982:	2201      	movs	r2, #1
    2984:	759a      	strb	r2, [r3, #22]
    2986:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2988:	2202      	movs	r2, #2
    298a:	759a      	strb	r2, [r3, #22]
    298c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    298e:	2c01      	cmp	r4, #1
    2990:	d002      	beq.n	2998 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    2992:	2c03      	cmp	r4, #3
    2994:	d008      	beq.n	29a8 <_usart_async_set_irq_state+0x54>
    2996:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    2998:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    299a:	b916      	cbnz	r6, 29a2 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    299c:	2204      	movs	r2, #4
    299e:	751a      	strb	r2, [r3, #20]
    29a0:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    29a2:	2204      	movs	r2, #4
    29a4:	759a      	strb	r2, [r3, #22]
    29a6:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    29a8:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    29aa:	b116      	cbz	r6, 29b2 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    29ac:	2280      	movs	r2, #128	; 0x80
    29ae:	759a      	strb	r2, [r3, #22]
}
    29b0:	e7f1      	b.n	2996 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    29b2:	2280      	movs	r2, #128	; 0x80
    29b4:	751a      	strb	r2, [r3, #20]
    29b6:	bd70      	pop	{r4, r5, r6, pc}
    29b8:	00007334 	.word	0x00007334
    29bc:	00001e29 	.word	0x00001e29

000029c0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    29c0:	4b03      	ldr	r3, [pc, #12]	; (29d0 <_delay_init+0x10>)
    29c2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    29c6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    29c8:	2205      	movs	r2, #5
    29ca:	601a      	str	r2, [r3, #0]
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop
    29d0:	e000e010 	.word	0xe000e010

000029d4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    29d4:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    29d6:	b303      	cbz	r3, 2a1a <_delay_cycles+0x46>
{
    29d8:	b430      	push	{r4, r5}
    29da:	1e5d      	subs	r5, r3, #1
    29dc:	b2ed      	uxtb	r5, r5
	while (n--) {
    29de:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    29e0:	4a12      	ldr	r2, [pc, #72]	; (2a2c <_delay_cycles+0x58>)
    29e2:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    29e6:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    29e8:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    29ea:	6813      	ldr	r3, [r2, #0]
    29ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    29f0:	d0fb      	beq.n	29ea <_delay_cycles+0x16>
	while (n--) {
    29f2:	3801      	subs	r0, #1
    29f4:	b2c0      	uxtb	r0, r0
    29f6:	28ff      	cmp	r0, #255	; 0xff
    29f8:	d1f5      	bne.n	29e6 <_delay_cycles+0x12>
    29fa:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    29fe:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2a02:	3101      	adds	r1, #1
    2a04:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2a06:	4b09      	ldr	r3, [pc, #36]	; (2a2c <_delay_cycles+0x58>)
    2a08:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2a0a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2a0c:	461a      	mov	r2, r3
    2a0e:	6813      	ldr	r3, [r2, #0]
    2a10:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a14:	d0fb      	beq.n	2a0e <_delay_cycles+0x3a>
		;
}
    2a16:	bc30      	pop	{r4, r5}
    2a18:	4770      	bx	lr
	SysTick->LOAD = buf;
    2a1a:	4b04      	ldr	r3, [pc, #16]	; (2a2c <_delay_cycles+0x58>)
    2a1c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2a1e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2a20:	461a      	mov	r2, r3
    2a22:	6813      	ldr	r3, [r2, #0]
    2a24:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2a28:	d0fb      	beq.n	2a22 <_delay_cycles+0x4e>
    2a2a:	4770      	bx	lr
    2a2c:	e000e010 	.word	0xe000e010

00002a30 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    2a30:	b470      	push	{r4, r5, r6}
    2a32:	b087      	sub	sp, #28
    2a34:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2a36:	ac01      	add	r4, sp, #4
    2a38:	4d14      	ldr	r5, [pc, #80]	; (2a8c <_get_irq_num+0x5c>)
    2a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2a3e:	682b      	ldr	r3, [r5, #0]
    2a40:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    2a42:	42b0      	cmp	r0, r6
    2a44:	d017      	beq.n	2a76 <_get_irq_num+0x46>
    2a46:	4631      	mov	r1, r6
    2a48:	2301      	movs	r3, #1
    2a4a:	a801      	add	r0, sp, #4
    2a4c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    2a50:	428a      	cmp	r2, r1
    2a52:	d006      	beq.n	2a62 <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2a54:	3301      	adds	r3, #1
    2a56:	2b05      	cmp	r3, #5
    2a58:	d1f8      	bne.n	2a4c <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    2a5a:	2055      	movs	r0, #85	; 0x55
}
    2a5c:	b007      	add	sp, #28
    2a5e:	bc70      	pop	{r4, r5, r6}
    2a60:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    2a62:	b2db      	uxtb	r3, r3
    2a64:	2b04      	cmp	r3, #4
    2a66:	d80c      	bhi.n	2a82 <_get_irq_num+0x52>
    2a68:	e8df f003 	tbb	[pc, r3]
    2a6c:	070d0305 	.word	0x070d0305
    2a70:	09          	.byte	0x09
    2a71:	00          	.byte	0x00
		return TCC1_0_IRQn;
    2a72:	205c      	movs	r0, #92	; 0x5c
    2a74:	e7f2      	b.n	2a5c <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    2a76:	2055      	movs	r0, #85	; 0x55
    2a78:	e7f0      	b.n	2a5c <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    2a7a:	2065      	movs	r0, #101	; 0x65
    2a7c:	e7ee      	b.n	2a5c <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    2a7e:	2068      	movs	r0, #104	; 0x68
    2a80:	e7ec      	b.n	2a5c <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    2a82:	2089      	movs	r0, #137	; 0x89
    2a84:	e7ea      	b.n	2a5c <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    2a86:	2061      	movs	r0, #97	; 0x61
    2a88:	e7e8      	b.n	2a5c <_get_irq_num+0x2c>
    2a8a:	bf00      	nop
    2a8c:	00007350 	.word	0x00007350

00002a90 <_tcc_timer_deinit>:
{
    2a90:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    2a92:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2a94:	4620      	mov	r0, r4
    2a96:	4b10      	ldr	r3, [pc, #64]	; (2ad8 <_tcc_timer_deinit+0x48>)
    2a98:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a9a:	0943      	lsrs	r3, r0, #5
    2a9c:	f000 001f 	and.w	r0, r0, #31
    2aa0:	2201      	movs	r2, #1
    2aa2:	fa02 f000 	lsl.w	r0, r2, r0
    2aa6:	3320      	adds	r3, #32
    2aa8:	4a0c      	ldr	r2, [pc, #48]	; (2adc <_tcc_timer_deinit+0x4c>)
    2aaa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2aae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ab2:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2ab6:	68a3      	ldr	r3, [r4, #8]
    2ab8:	f013 0f03 	tst.w	r3, #3
    2abc:	d1fb      	bne.n	2ab6 <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2abe:	6823      	ldr	r3, [r4, #0]
    2ac0:	f023 0302 	bic.w	r3, r3, #2
    2ac4:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2ac6:	68a3      	ldr	r3, [r4, #8]
    2ac8:	f013 0f01 	tst.w	r3, #1
    2acc:	d1fb      	bne.n	2ac6 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2ace:	6823      	ldr	r3, [r4, #0]
    2ad0:	f043 0301 	orr.w	r3, r3, #1
    2ad4:	6023      	str	r3, [r4, #0]
    2ad6:	bd10      	pop	{r4, pc}
    2ad8:	00002a31 	.word	0x00002a31
    2adc:	e000e100 	.word	0xe000e100

00002ae0 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    2ae0:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2ae2:	6893      	ldr	r3, [r2, #8]
    2ae4:	f013 0f03 	tst.w	r3, #3
    2ae8:	d1fb      	bne.n	2ae2 <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2aea:	6813      	ldr	r3, [r2, #0]
    2aec:	f043 0302 	orr.w	r3, r3, #2
    2af0:	6013      	str	r3, [r2, #0]
    2af2:	4770      	bx	lr

00002af4 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    2af4:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2af6:	6893      	ldr	r3, [r2, #8]
    2af8:	f013 0f03 	tst.w	r3, #3
    2afc:	d1fb      	bne.n	2af6 <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2afe:	6813      	ldr	r3, [r2, #0]
    2b00:	f023 0302 	bic.w	r3, r3, #2
    2b04:	6013      	str	r3, [r2, #0]
    2b06:	4770      	bx	lr

00002b08 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    2b08:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    2b0a:	6419      	str	r1, [r3, #64]	; 0x40
    2b0c:	4770      	bx	lr

00002b0e <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    2b0e:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    2b10:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2b12:	4770      	bx	lr

00002b14 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    2b14:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2b16:	6893      	ldr	r3, [r2, #8]
    2b18:	f013 0f03 	tst.w	r3, #3
    2b1c:	d1fb      	bne.n	2b16 <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2b1e:	6810      	ldr	r0, [r2, #0]
}
    2b20:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2b24:	4770      	bx	lr

00002b26 <tcc_interrupt_handler>:
{
    2b26:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2b28:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    2b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    2b2c:	f012 0f01 	tst.w	r2, #1
    2b30:	d100      	bne.n	2b34 <tcc_interrupt_handler+0xe>
    2b32:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    2b34:	2201      	movs	r2, #1
    2b36:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    2b38:	6803      	ldr	r3, [r0, #0]
    2b3a:	4798      	blx	r3
}
    2b3c:	e7f9      	b.n	2b32 <tcc_interrupt_handler+0xc>
	...

00002b40 <_tcc_timer_init>:
{
    2b40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b42:	b087      	sub	sp, #28
    2b44:	4605      	mov	r5, r0
    2b46:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2b48:	ae01      	add	r6, sp, #4
    2b4a:	4f4e      	ldr	r7, [pc, #312]	; (2c84 <_tcc_timer_init+0x144>)
    2b4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2b4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2b50:	683b      	ldr	r3, [r7, #0]
    2b52:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    2b54:	42a0      	cmp	r0, r4
    2b56:	d00c      	beq.n	2b72 <_tcc_timer_init+0x32>
    2b58:	4621      	mov	r1, r4
    2b5a:	2301      	movs	r3, #1
    2b5c:	a801      	add	r0, sp, #4
    2b5e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    2b62:	428a      	cmp	r2, r1
    2b64:	d006      	beq.n	2b74 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2b66:	3301      	adds	r3, #1
    2b68:	2b05      	cmp	r3, #5
    2b6a:	d1f8      	bne.n	2b5e <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2b6c:	2600      	movs	r6, #0
			return i;
    2b6e:	b276      	sxtb	r6, r6
    2b70:	e015      	b.n	2b9e <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2b72:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    2b74:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    2b78:	d073      	beq.n	2c62 <_tcc_timer_init+0x122>
    2b7a:	2b01      	cmp	r3, #1
    2b7c:	d06b      	beq.n	2c56 <_tcc_timer_init+0x116>
    2b7e:	2b02      	cmp	r3, #2
    2b80:	d06b      	beq.n	2c5a <_tcc_timer_init+0x11a>
    2b82:	2b03      	cmp	r3, #3
    2b84:	d06b      	beq.n	2c5e <_tcc_timer_init+0x11e>
    2b86:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2b88:	bf08      	it	eq
    2b8a:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    2b8c:	d0ef      	beq.n	2b6e <_tcc_timer_init+0x2e>
	ASSERT(false);
    2b8e:	f240 128b 	movw	r2, #395	; 0x18b
    2b92:	493d      	ldr	r1, [pc, #244]	; (2c88 <_tcc_timer_init+0x148>)
    2b94:	2000      	movs	r0, #0
    2b96:	4b3d      	ldr	r3, [pc, #244]	; (2c8c <_tcc_timer_init+0x14c>)
    2b98:	4798      	blx	r3
	return -1;
    2b9a:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    2b9e:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    2ba0:	22e4      	movs	r2, #228	; 0xe4
    2ba2:	4939      	ldr	r1, [pc, #228]	; (2c88 <_tcc_timer_init+0x148>)
    2ba4:	2001      	movs	r0, #1
    2ba6:	4b39      	ldr	r3, [pc, #228]	; (2c8c <_tcc_timer_init+0x14c>)
    2ba8:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2baa:	68a3      	ldr	r3, [r4, #8]
    2bac:	f013 0f01 	tst.w	r3, #1
    2bb0:	d1fb      	bne.n	2baa <_tcc_timer_init+0x6a>
    2bb2:	68a3      	ldr	r3, [r4, #8]
    2bb4:	f013 0f03 	tst.w	r3, #3
    2bb8:	d1fb      	bne.n	2bb2 <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2bba:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    2bbc:	f013 0f02 	tst.w	r3, #2
    2bc0:	d15d      	bne.n	2c7e <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2bc2:	68a3      	ldr	r3, [r4, #8]
    2bc4:	f013 0f01 	tst.w	r3, #1
    2bc8:	d1fb      	bne.n	2bc2 <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2bca:	6823      	ldr	r3, [r4, #0]
    2bcc:	f043 0301 	orr.w	r3, r3, #1
    2bd0:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2bd2:	68a3      	ldr	r3, [r4, #8]
    2bd4:	f013 0f01 	tst.w	r3, #1
    2bd8:	d1fb      	bne.n	2bd2 <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    2bda:	4a2a      	ldr	r2, [pc, #168]	; (2c84 <_tcc_timer_init+0x144>)
    2bdc:	00f1      	lsls	r1, r6, #3
    2bde:	198b      	adds	r3, r1, r6
    2be0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2be4:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    2be6:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    2be8:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    2bea:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    2bec:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    2bee:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    2bf0:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    2bf2:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    2bf4:	440e      	add	r6, r1
    2bf6:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    2bfa:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    2bfc:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    2bfe:	2301      	movs	r3, #1
    2c00:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    2c02:	4b23      	ldr	r3, [pc, #140]	; (2c90 <_tcc_timer_init+0x150>)
    2c04:	429c      	cmp	r4, r3
    2c06:	d02e      	beq.n	2c66 <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    2c08:	4b22      	ldr	r3, [pc, #136]	; (2c94 <_tcc_timer_init+0x154>)
    2c0a:	429c      	cmp	r4, r3
    2c0c:	d02e      	beq.n	2c6c <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    2c0e:	4b22      	ldr	r3, [pc, #136]	; (2c98 <_tcc_timer_init+0x158>)
    2c10:	429c      	cmp	r4, r3
    2c12:	d02e      	beq.n	2c72 <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    2c14:	4b21      	ldr	r3, [pc, #132]	; (2c9c <_tcc_timer_init+0x15c>)
    2c16:	429c      	cmp	r4, r3
    2c18:	d02e      	beq.n	2c78 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    2c1a:	4b21      	ldr	r3, [pc, #132]	; (2ca0 <_tcc_timer_init+0x160>)
    2c1c:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    2c1e:	bf04      	itt	eq
    2c20:	4b20      	ldreq	r3, [pc, #128]	; (2ca4 <_tcc_timer_init+0x164>)
    2c22:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2c24:	4620      	mov	r0, r4
    2c26:	4b20      	ldr	r3, [pc, #128]	; (2ca8 <_tcc_timer_init+0x168>)
    2c28:	4798      	blx	r3
    2c2a:	f000 031f 	and.w	r3, r0, #31
    2c2e:	2201      	movs	r2, #1
    2c30:	409a      	lsls	r2, r3
    2c32:	0943      	lsrs	r3, r0, #5
    2c34:	009b      	lsls	r3, r3, #2
    2c36:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2c3a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2c3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2c42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c46:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c4e:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2c50:	2000      	movs	r0, #0
}
    2c52:	b007      	add	sp, #28
    2c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2c56:	2601      	movs	r6, #1
    2c58:	e789      	b.n	2b6e <_tcc_timer_init+0x2e>
    2c5a:	2602      	movs	r6, #2
    2c5c:	e787      	b.n	2b6e <_tcc_timer_init+0x2e>
    2c5e:	2603      	movs	r6, #3
    2c60:	e785      	b.n	2b6e <_tcc_timer_init+0x2e>
    2c62:	2600      	movs	r6, #0
    2c64:	e783      	b.n	2b6e <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    2c66:	4b0f      	ldr	r3, [pc, #60]	; (2ca4 <_tcc_timer_init+0x164>)
    2c68:	601d      	str	r5, [r3, #0]
    2c6a:	e7d3      	b.n	2c14 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    2c6c:	4b0d      	ldr	r3, [pc, #52]	; (2ca4 <_tcc_timer_init+0x164>)
    2c6e:	605d      	str	r5, [r3, #4]
    2c70:	e7d3      	b.n	2c1a <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    2c72:	4b0c      	ldr	r3, [pc, #48]	; (2ca4 <_tcc_timer_init+0x164>)
    2c74:	609d      	str	r5, [r3, #8]
    2c76:	e7d5      	b.n	2c24 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    2c78:	4b0a      	ldr	r3, [pc, #40]	; (2ca4 <_tcc_timer_init+0x164>)
    2c7a:	60dd      	str	r5, [r3, #12]
    2c7c:	e7d2      	b.n	2c24 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    2c7e:	f06f 0010 	mvn.w	r0, #16
    2c82:	e7e6      	b.n	2c52 <_tcc_timer_init+0x112>
    2c84:	00007350 	.word	0x00007350
    2c88:	00007418 	.word	0x00007418
    2c8c:	00001e29 	.word	0x00001e29
    2c90:	41016000 	.word	0x41016000
    2c94:	41018000 	.word	0x41018000
    2c98:	42000c00 	.word	0x42000c00
    2c9c:	42001000 	.word	0x42001000
    2ca0:	43001000 	.word	0x43001000
    2ca4:	20000ac4 	.word	0x20000ac4
    2ca8:	00002a31 	.word	0x00002a31

00002cac <_tcc_timer_set_irq>:
{
    2cac:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    2cae:	68c0      	ldr	r0, [r0, #12]
    2cb0:	4b02      	ldr	r3, [pc, #8]	; (2cbc <_tcc_timer_set_irq+0x10>)
    2cb2:	4798      	blx	r3
    2cb4:	4b02      	ldr	r3, [pc, #8]	; (2cc0 <_tcc_timer_set_irq+0x14>)
    2cb6:	4798      	blx	r3
    2cb8:	bd08      	pop	{r3, pc}
    2cba:	bf00      	nop
    2cbc:	00002a31 	.word	0x00002a31
    2cc0:	0000214d 	.word	0x0000214d

00002cc4 <_tcc_get_timer>:
}
    2cc4:	4800      	ldr	r0, [pc, #0]	; (2cc8 <_tcc_get_timer+0x4>)
    2cc6:	4770      	bx	lr
    2cc8:	20000068 	.word	0x20000068

00002ccc <TCC0_0_Handler>:
{
    2ccc:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    2cce:	4b02      	ldr	r3, [pc, #8]	; (2cd8 <TCC0_0_Handler+0xc>)
    2cd0:	6818      	ldr	r0, [r3, #0]
    2cd2:	4b02      	ldr	r3, [pc, #8]	; (2cdc <TCC0_0_Handler+0x10>)
    2cd4:	4798      	blx	r3
    2cd6:	bd08      	pop	{r3, pc}
    2cd8:	20000ac4 	.word	0x20000ac4
    2cdc:	00002b27 	.word	0x00002b27

00002ce0 <TCC1_0_Handler>:
{
    2ce0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    2ce2:	4b02      	ldr	r3, [pc, #8]	; (2cec <TCC1_0_Handler+0xc>)
    2ce4:	6858      	ldr	r0, [r3, #4]
    2ce6:	4b02      	ldr	r3, [pc, #8]	; (2cf0 <TCC1_0_Handler+0x10>)
    2ce8:	4798      	blx	r3
    2cea:	bd08      	pop	{r3, pc}
    2cec:	20000ac4 	.word	0x20000ac4
    2cf0:	00002b27 	.word	0x00002b27

00002cf4 <TCC2_0_Handler>:
{
    2cf4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    2cf6:	4b02      	ldr	r3, [pc, #8]	; (2d00 <TCC2_0_Handler+0xc>)
    2cf8:	6898      	ldr	r0, [r3, #8]
    2cfa:	4b02      	ldr	r3, [pc, #8]	; (2d04 <TCC2_0_Handler+0x10>)
    2cfc:	4798      	blx	r3
    2cfe:	bd08      	pop	{r3, pc}
    2d00:	20000ac4 	.word	0x20000ac4
    2d04:	00002b27 	.word	0x00002b27

00002d08 <TCC3_0_Handler>:
{
    2d08:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    2d0a:	4b02      	ldr	r3, [pc, #8]	; (2d14 <TCC3_0_Handler+0xc>)
    2d0c:	68d8      	ldr	r0, [r3, #12]
    2d0e:	4b02      	ldr	r3, [pc, #8]	; (2d18 <TCC3_0_Handler+0x10>)
    2d10:	4798      	blx	r3
    2d12:	bd08      	pop	{r3, pc}
    2d14:	20000ac4 	.word	0x20000ac4
    2d18:	00002b27 	.word	0x00002b27

00002d1c <TCC4_0_Handler>:
{
    2d1c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    2d1e:	4b02      	ldr	r3, [pc, #8]	; (2d28 <TCC4_0_Handler+0xc>)
    2d20:	6918      	ldr	r0, [r3, #16]
    2d22:	4b02      	ldr	r3, [pc, #8]	; (2d2c <TCC4_0_Handler+0x10>)
    2d24:	4798      	blx	r3
    2d26:	bd08      	pop	{r3, pc}
    2d28:	20000ac4 	.word	0x20000ac4
    2d2c:	00002b27 	.word	0x00002b27

00002d30 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2d30:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d32:	6913      	ldr	r3, [r2, #16]
    2d34:	f013 0f03 	tst.w	r3, #3
    2d38:	d1fb      	bne.n	2d32 <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    2d3a:	6813      	ldr	r3, [r2, #0]
    2d3c:	f043 0302 	orr.w	r3, r3, #2
    2d40:	6013      	str	r3, [r2, #0]
    2d42:	4770      	bx	lr

00002d44 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2d44:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d46:	6913      	ldr	r3, [r2, #16]
    2d48:	f013 0f03 	tst.w	r3, #3
    2d4c:	d1fb      	bne.n	2d46 <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2d4e:	6813      	ldr	r3, [r2, #0]
    2d50:	f023 0302 	bic.w	r3, r3, #2
    2d54:	6013      	str	r3, [r2, #0]
    2d56:	4770      	bx	lr

00002d58 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    2d58:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2d5a:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2d5c:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d60:	2b02      	cmp	r3, #2
    2d62:	d00b      	beq.n	2d7c <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2d64:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d66:	f013 0f0c 	tst.w	r3, #12
    2d6a:	d009      	beq.n	2d80 <_tc_timer_set_period+0x28>
    2d6c:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2d6e:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d72:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    2d74:	bf04      	itt	eq
    2d76:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2d78:	76d1      	strbeq	r1, [r2, #27]
    2d7a:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2d7c:	61d1      	str	r1, [r2, #28]
    2d7e:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    2d80:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2d82:	8391      	strh	r1, [r2, #28]
    2d84:	4770      	bx	lr

00002d86 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    2d86:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2d88:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2d8a:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d8e:	2b02      	cmp	r3, #2
    2d90:	d00c      	beq.n	2dac <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2d92:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d94:	f013 0f0c 	tst.w	r3, #12
    2d98:	d00a      	beq.n	2db0 <_tc_timer_get_period+0x2a>
    2d9a:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2d9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2da0:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    2da2:	bf06      	itte	eq
    2da4:	7ed0      	ldrbeq	r0, [r2, #27]
    2da6:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    2da8:	2000      	movne	r0, #0
}
    2daa:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    2dac:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    2dae:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    2db0:	8b90      	ldrh	r0, [r2, #28]
    2db2:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2db4:	4770      	bx	lr

00002db6 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2db6:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2db8:	6913      	ldr	r3, [r2, #16]
    2dba:	f013 0f03 	tst.w	r3, #3
    2dbe:	d1fb      	bne.n	2db8 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2dc0:	6810      	ldr	r0, [r2, #0]
}
    2dc2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2dc6:	4770      	bx	lr

00002dc8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2dc8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2dca:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2dcc:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2dce:	f012 0f01 	tst.w	r2, #1
    2dd2:	d100      	bne.n	2dd6 <tc_interrupt_handler+0xe>
    2dd4:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2dd6:	2201      	movs	r2, #1
    2dd8:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2dda:	6803      	ldr	r3, [r0, #0]
    2ddc:	4798      	blx	r3
	}
}
    2dde:	e7f9      	b.n	2dd4 <tc_interrupt_handler+0xc>

00002de0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2de0:	b538      	push	{r3, r4, r5, lr}
    2de2:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2de4:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2de6:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2de8:	f013 0f01 	tst.w	r3, #1
    2dec:	d004      	beq.n	2df8 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2dee:	2301      	movs	r3, #1
    2df0:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2df2:	6803      	ldr	r3, [r0, #0]
    2df4:	b103      	cbz	r3, 2df8 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2df6:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2df8:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2dfa:	f013 0f02 	tst.w	r3, #2
    2dfe:	d005      	beq.n	2e0c <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2e00:	2302      	movs	r3, #2
    2e02:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2e04:	686b      	ldr	r3, [r5, #4]
    2e06:	b10b      	cbz	r3, 2e0c <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2e08:	4628      	mov	r0, r5
    2e0a:	4798      	blx	r3
    2e0c:	bd38      	pop	{r3, r4, r5, pc}
	...

00002e10 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2e10:	4b11      	ldr	r3, [pc, #68]	; (2e58 <_tc_init_irq_param+0x48>)
    2e12:	4298      	cmp	r0, r3
    2e14:	d011      	beq.n	2e3a <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2e16:	4b11      	ldr	r3, [pc, #68]	; (2e5c <_tc_init_irq_param+0x4c>)
    2e18:	4298      	cmp	r0, r3
    2e1a:	d011      	beq.n	2e40 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    2e1c:	4b10      	ldr	r3, [pc, #64]	; (2e60 <_tc_init_irq_param+0x50>)
    2e1e:	4298      	cmp	r0, r3
    2e20:	d011      	beq.n	2e46 <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    2e22:	4b10      	ldr	r3, [pc, #64]	; (2e64 <_tc_init_irq_param+0x54>)
    2e24:	4298      	cmp	r0, r3
    2e26:	d011      	beq.n	2e4c <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2e28:	4b0f      	ldr	r3, [pc, #60]	; (2e68 <_tc_init_irq_param+0x58>)
    2e2a:	4298      	cmp	r0, r3
    2e2c:	d011      	beq.n	2e52 <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    2e2e:	4b0f      	ldr	r3, [pc, #60]	; (2e6c <_tc_init_irq_param+0x5c>)
    2e30:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    2e32:	bf04      	itt	eq
    2e34:	4b0e      	ldreq	r3, [pc, #56]	; (2e70 <_tc_init_irq_param+0x60>)
    2e36:	6159      	streq	r1, [r3, #20]
    2e38:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2e3a:	4b0d      	ldr	r3, [pc, #52]	; (2e70 <_tc_init_irq_param+0x60>)
    2e3c:	6019      	str	r1, [r3, #0]
    2e3e:	e7f0      	b.n	2e22 <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    2e40:	4b0b      	ldr	r3, [pc, #44]	; (2e70 <_tc_init_irq_param+0x60>)
    2e42:	6059      	str	r1, [r3, #4]
    2e44:	e7f0      	b.n	2e28 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    2e46:	4b0a      	ldr	r3, [pc, #40]	; (2e70 <_tc_init_irq_param+0x60>)
    2e48:	6099      	str	r1, [r3, #8]
    2e4a:	e7f0      	b.n	2e2e <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    2e4c:	4b08      	ldr	r3, [pc, #32]	; (2e70 <_tc_init_irq_param+0x60>)
    2e4e:	60d9      	str	r1, [r3, #12]
    2e50:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    2e52:	4b07      	ldr	r3, [pc, #28]	; (2e70 <_tc_init_irq_param+0x60>)
    2e54:	6119      	str	r1, [r3, #16]
    2e56:	4770      	bx	lr
    2e58:	40003800 	.word	0x40003800
    2e5c:	40003c00 	.word	0x40003c00
    2e60:	4101a000 	.word	0x4101a000
    2e64:	4101c000 	.word	0x4101c000
    2e68:	42001400 	.word	0x42001400
    2e6c:	42001800 	.word	0x42001800
    2e70:	20000ad8 	.word	0x20000ad8

00002e74 <get_tc_index>:
{
    2e74:	b570      	push	{r4, r5, r6, lr}
    2e76:	b086      	sub	sp, #24
    2e78:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2e7a:	466c      	mov	r4, sp
    2e7c:	4d18      	ldr	r5, [pc, #96]	; (2ee0 <get_tc_index+0x6c>)
    2e7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e82:	e895 0003 	ldmia.w	r5, {r0, r1}
    2e86:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2e8a:	9b00      	ldr	r3, [sp, #0]
    2e8c:	42b3      	cmp	r3, r6
    2e8e:	d021      	beq.n	2ed4 <get_tc_index+0x60>
    2e90:	4631      	mov	r1, r6
    2e92:	2301      	movs	r3, #1
    2e94:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2e98:	428a      	cmp	r2, r1
    2e9a:	d01c      	beq.n	2ed6 <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2e9c:	3301      	adds	r3, #1
    2e9e:	2b06      	cmp	r3, #6
    2ea0:	d1f8      	bne.n	2e94 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    2ea2:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2ea4:	4a0f      	ldr	r2, [pc, #60]	; (2ee4 <get_tc_index+0x70>)
    2ea6:	7812      	ldrb	r2, [r2, #0]
    2ea8:	429a      	cmp	r2, r3
    2eaa:	d016      	beq.n	2eda <get_tc_index+0x66>
    2eac:	4a0d      	ldr	r2, [pc, #52]	; (2ee4 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2eae:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    2eb0:	7d11      	ldrb	r1, [r2, #20]
    2eb2:	4299      	cmp	r1, r3
    2eb4:	d012      	beq.n	2edc <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2eb6:	3001      	adds	r0, #1
    2eb8:	b2c0      	uxtb	r0, r0
    2eba:	3214      	adds	r2, #20
    2ebc:	2806      	cmp	r0, #6
    2ebe:	d1f7      	bne.n	2eb0 <get_tc_index+0x3c>
	ASSERT(false);
    2ec0:	f240 2227 	movw	r2, #551	; 0x227
    2ec4:	4908      	ldr	r1, [pc, #32]	; (2ee8 <get_tc_index+0x74>)
    2ec6:	2000      	movs	r0, #0
    2ec8:	4b08      	ldr	r3, [pc, #32]	; (2eec <get_tc_index+0x78>)
    2eca:	4798      	blx	r3
	return -1;
    2ecc:	f04f 30ff 	mov.w	r0, #4294967295
}
    2ed0:	b006      	add	sp, #24
    2ed2:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2ed4:	2300      	movs	r3, #0
			return i;
    2ed6:	b2db      	uxtb	r3, r3
    2ed8:	e7e4      	b.n	2ea4 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2eda:	2000      	movs	r0, #0
			return i;
    2edc:	b240      	sxtb	r0, r0
    2ede:	e7f7      	b.n	2ed0 <get_tc_index+0x5c>
    2ee0:	00007430 	.word	0x00007430
    2ee4:	20000088 	.word	0x20000088
    2ee8:	00007448 	.word	0x00007448
    2eec:	00001e29 	.word	0x00001e29

00002ef0 <_tc_timer_init>:
{
    2ef0:	b570      	push	{r4, r5, r6, lr}
    2ef2:	4606      	mov	r6, r0
    2ef4:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2ef6:	4608      	mov	r0, r1
    2ef8:	4b48      	ldr	r3, [pc, #288]	; (301c <_tc_timer_init+0x12c>)
    2efa:	4798      	blx	r3
    2efc:	4605      	mov	r5, r0
	device->hw = hw;
    2efe:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2f00:	22af      	movs	r2, #175	; 0xaf
    2f02:	4947      	ldr	r1, [pc, #284]	; (3020 <_tc_timer_init+0x130>)
    2f04:	2001      	movs	r0, #1
    2f06:	4b47      	ldr	r3, [pc, #284]	; (3024 <_tc_timer_init+0x134>)
    2f08:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f0a:	6923      	ldr	r3, [r4, #16]
    2f0c:	f013 0f01 	tst.w	r3, #1
    2f10:	d1fb      	bne.n	2f0a <_tc_timer_init+0x1a>
    2f12:	6923      	ldr	r3, [r4, #16]
    2f14:	f013 0f03 	tst.w	r3, #3
    2f18:	d1fb      	bne.n	2f12 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2f1a:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2f1c:	f013 0f02 	tst.w	r3, #2
    2f20:	d175      	bne.n	300e <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f22:	6923      	ldr	r3, [r4, #16]
    2f24:	f013 0f01 	tst.w	r3, #1
    2f28:	d1fb      	bne.n	2f22 <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2f2a:	6823      	ldr	r3, [r4, #0]
    2f2c:	f043 0301 	orr.w	r3, r3, #1
    2f30:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2f32:	6923      	ldr	r3, [r4, #16]
    2f34:	f013 0f01 	tst.w	r3, #1
    2f38:	d1fb      	bne.n	2f32 <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2f3a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f3e:	4a3a      	ldr	r2, [pc, #232]	; (3028 <_tc_timer_init+0x138>)
    2f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f44:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2f46:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2f48:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2f4a:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2f4c:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2f4e:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2f50:	2201      	movs	r2, #1
    2f52:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2f54:	685b      	ldr	r3, [r3, #4]
    2f56:	f003 030c 	and.w	r3, r3, #12
    2f5a:	2b08      	cmp	r3, #8
    2f5c:	d03f      	beq.n	2fde <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2f5e:	2b00      	cmp	r3, #0
    2f60:	d147      	bne.n	2ff2 <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2f62:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f66:	4a30      	ldr	r2, [pc, #192]	; (3028 <_tc_timer_init+0x138>)
    2f68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f6c:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2f6e:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2f70:	8a1b      	ldrh	r3, [r3, #16]
    2f72:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    2f74:	2301      	movs	r3, #1
    2f76:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2f78:	4631      	mov	r1, r6
    2f7a:	4620      	mov	r0, r4
    2f7c:	4b2b      	ldr	r3, [pc, #172]	; (302c <_tc_timer_init+0x13c>)
    2f7e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2f80:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f84:	4a28      	ldr	r2, [pc, #160]	; (3028 <_tc_timer_init+0x138>)
    2f86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2f8e:	2b00      	cmp	r3, #0
    2f90:	db40      	blt.n	3014 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2f92:	095a      	lsrs	r2, r3, #5
    2f94:	f003 031f 	and.w	r3, r3, #31
    2f98:	2101      	movs	r1, #1
    2f9a:	fa01 f303 	lsl.w	r3, r1, r3
    2f9e:	3220      	adds	r2, #32
    2fa0:	4923      	ldr	r1, [pc, #140]	; (3030 <_tc_timer_init+0x140>)
    2fa2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2fa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2faa:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2fae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2fb2:	4b1d      	ldr	r3, [pc, #116]	; (3028 <_tc_timer_init+0x138>)
    2fb4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2fb8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	db2b      	blt.n	3018 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2fc0:	0959      	lsrs	r1, r3, #5
    2fc2:	f003 031f 	and.w	r3, r3, #31
    2fc6:	2201      	movs	r2, #1
    2fc8:	fa02 f303 	lsl.w	r3, r2, r3
    2fcc:	4a18      	ldr	r2, [pc, #96]	; (3030 <_tc_timer_init+0x140>)
    2fce:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2fd2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2fd6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    2fda:	2000      	movs	r0, #0
    2fdc:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2fde:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2fe2:	4a11      	ldr	r2, [pc, #68]	; (3028 <_tc_timer_init+0x138>)
    2fe4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2fe8:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2fea:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2fec:	691b      	ldr	r3, [r3, #16]
    2fee:	6223      	str	r3, [r4, #32]
    2ff0:	e7c0      	b.n	2f74 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2ff2:	2b04      	cmp	r3, #4
    2ff4:	d1be      	bne.n	2f74 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2ff6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ffa:	4a0b      	ldr	r2, [pc, #44]	; (3028 <_tc_timer_init+0x138>)
    2ffc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3000:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3002:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    3004:	7c1a      	ldrb	r2, [r3, #16]
    3006:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    3008:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    300a:	76e3      	strb	r3, [r4, #27]
    300c:	e7b2      	b.n	2f74 <_tc_timer_init+0x84>
		return ERR_DENIED;
    300e:	f06f 0010 	mvn.w	r0, #16
    3012:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    3014:	2000      	movs	r0, #0
    3016:	bd70      	pop	{r4, r5, r6, pc}
    3018:	2000      	movs	r0, #0
}
    301a:	bd70      	pop	{r4, r5, r6, pc}
    301c:	00002e75 	.word	0x00002e75
    3020:	00007448 	.word	0x00007448
    3024:	00001e29 	.word	0x00001e29
    3028:	20000088 	.word	0x20000088
    302c:	00002e11 	.word	0x00002e11
    3030:	e000e100 	.word	0xe000e100

00003034 <_tc_timer_deinit>:
{
    3034:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    3036:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    3038:	4620      	mov	r0, r4
    303a:	4b18      	ldr	r3, [pc, #96]	; (309c <_tc_timer_deinit+0x68>)
    303c:	4798      	blx	r3
    303e:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    3040:	f240 1201 	movw	r2, #257	; 0x101
    3044:	4916      	ldr	r1, [pc, #88]	; (30a0 <_tc_timer_deinit+0x6c>)
    3046:	2001      	movs	r0, #1
    3048:	4b16      	ldr	r3, [pc, #88]	; (30a4 <_tc_timer_deinit+0x70>)
    304a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    304c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3050:	4b15      	ldr	r3, [pc, #84]	; (30a8 <_tc_timer_deinit+0x74>)
    3052:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3056:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    305a:	2b00      	cmp	r3, #0
    305c:	db0d      	blt.n	307a <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    305e:	095a      	lsrs	r2, r3, #5
    3060:	f003 031f 	and.w	r3, r3, #31
    3064:	2101      	movs	r1, #1
    3066:	fa01 f303 	lsl.w	r3, r1, r3
    306a:	3220      	adds	r2, #32
    306c:	490f      	ldr	r1, [pc, #60]	; (30ac <_tc_timer_deinit+0x78>)
    306e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3072:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3076:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    307a:	6923      	ldr	r3, [r4, #16]
    307c:	f013 0f03 	tst.w	r3, #3
    3080:	d1fb      	bne.n	307a <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3082:	6823      	ldr	r3, [r4, #0]
    3084:	f023 0302 	bic.w	r3, r3, #2
    3088:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    308a:	6923      	ldr	r3, [r4, #16]
    308c:	f013 0f01 	tst.w	r3, #1
    3090:	d1fb      	bne.n	308a <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    3092:	6823      	ldr	r3, [r4, #0]
    3094:	f043 0301 	orr.w	r3, r3, #1
    3098:	6023      	str	r3, [r4, #0]
    309a:	bd38      	pop	{r3, r4, r5, pc}
    309c:	00002e75 	.word	0x00002e75
    30a0:	00007448 	.word	0x00007448
    30a4:	00001e29 	.word	0x00001e29
    30a8:	20000088 	.word	0x20000088
    30ac:	e000e100 	.word	0xe000e100

000030b0 <_tc_timer_set_irq>:
{
    30b0:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    30b2:	68c0      	ldr	r0, [r0, #12]
    30b4:	4b08      	ldr	r3, [pc, #32]	; (30d8 <_tc_timer_set_irq+0x28>)
    30b6:	4798      	blx	r3
    30b8:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    30ba:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    30be:	4907      	ldr	r1, [pc, #28]	; (30dc <_tc_timer_set_irq+0x2c>)
    30c0:	2001      	movs	r0, #1
    30c2:	4b07      	ldr	r3, [pc, #28]	; (30e0 <_tc_timer_set_irq+0x30>)
    30c4:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    30c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    30ca:	4b06      	ldr	r3, [pc, #24]	; (30e4 <_tc_timer_set_irq+0x34>)
    30cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    30d0:	78a0      	ldrb	r0, [r4, #2]
    30d2:	4b05      	ldr	r3, [pc, #20]	; (30e8 <_tc_timer_set_irq+0x38>)
    30d4:	4798      	blx	r3
    30d6:	bd10      	pop	{r4, pc}
    30d8:	00002e75 	.word	0x00002e75
    30dc:	00007448 	.word	0x00007448
    30e0:	00001e29 	.word	0x00001e29
    30e4:	20000088 	.word	0x20000088
    30e8:	0000214d 	.word	0x0000214d

000030ec <_pwm_init>:
{
    30ec:	b570      	push	{r4, r5, r6, lr}
    30ee:	4606      	mov	r6, r0
    30f0:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    30f2:	4608      	mov	r0, r1
    30f4:	4b3f      	ldr	r3, [pc, #252]	; (31f4 <_pwm_init+0x108>)
    30f6:	4798      	blx	r3
    30f8:	4605      	mov	r5, r0
	device->hw = hw;
    30fa:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30fc:	6923      	ldr	r3, [r4, #16]
    30fe:	f013 0f01 	tst.w	r3, #1
    3102:	d1fb      	bne.n	30fc <_pwm_init+0x10>
    3104:	6923      	ldr	r3, [r4, #16]
    3106:	f013 0f03 	tst.w	r3, #3
    310a:	d1fb      	bne.n	3104 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    310c:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    310e:	f013 0f02 	tst.w	r3, #2
    3112:	d165      	bne.n	31e0 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3114:	6923      	ldr	r3, [r4, #16]
    3116:	f013 0f01 	tst.w	r3, #1
    311a:	d1fb      	bne.n	3114 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    311c:	6823      	ldr	r3, [r4, #0]
    311e:	f043 0301 	orr.w	r3, r3, #1
    3122:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3124:	6923      	ldr	r3, [r4, #16]
    3126:	f013 0f01 	tst.w	r3, #1
    312a:	d1fb      	bne.n	3124 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    312c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3130:	4a31      	ldr	r2, [pc, #196]	; (31f8 <_pwm_init+0x10c>)
    3132:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3136:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3138:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    313a:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    313c:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    313e:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    3140:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    3142:	2203      	movs	r2, #3
    3144:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3146:	685b      	ldr	r3, [r3, #4]
    3148:	f003 030c 	and.w	r3, r3, #12
    314c:	2b08      	cmp	r3, #8
    314e:	d03d      	beq.n	31cc <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3150:	2b00      	cmp	r3, #0
    3152:	d148      	bne.n	31e6 <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3154:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3158:	4a27      	ldr	r2, [pc, #156]	; (31f8 <_pwm_init+0x10c>)
    315a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    315e:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3160:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    3162:	8a1b      	ldrh	r3, [r3, #16]
    3164:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    3166:	4631      	mov	r1, r6
    3168:	4620      	mov	r0, r4
    316a:	4b24      	ldr	r3, [pc, #144]	; (31fc <_pwm_init+0x110>)
    316c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    316e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3172:	4a21      	ldr	r2, [pc, #132]	; (31f8 <_pwm_init+0x10c>)
    3174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3178:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    317c:	2b00      	cmp	r3, #0
    317e:	db35      	blt.n	31ec <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3180:	095a      	lsrs	r2, r3, #5
    3182:	f003 031f 	and.w	r3, r3, #31
    3186:	2101      	movs	r1, #1
    3188:	fa01 f303 	lsl.w	r3, r1, r3
    318c:	3220      	adds	r2, #32
    318e:	491c      	ldr	r1, [pc, #112]	; (3200 <_pwm_init+0x114>)
    3190:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3194:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3198:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    319c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    31a0:	4b15      	ldr	r3, [pc, #84]	; (31f8 <_pwm_init+0x10c>)
    31a2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    31a6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    31aa:	2b00      	cmp	r3, #0
    31ac:	db20      	blt.n	31f0 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    31ae:	0959      	lsrs	r1, r3, #5
    31b0:	f003 031f 	and.w	r3, r3, #31
    31b4:	2201      	movs	r2, #1
    31b6:	fa02 f303 	lsl.w	r3, r2, r3
    31ba:	4a11      	ldr	r2, [pc, #68]	; (3200 <_pwm_init+0x114>)
    31bc:	f101 0060 	add.w	r0, r1, #96	; 0x60
    31c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    31c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    31c8:	2000      	movs	r0, #0
    31ca:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    31cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    31d0:	4a09      	ldr	r2, [pc, #36]	; (31f8 <_pwm_init+0x10c>)
    31d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    31d6:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    31d8:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    31da:	691b      	ldr	r3, [r3, #16]
    31dc:	6223      	str	r3, [r4, #32]
    31de:	e7c2      	b.n	3166 <_pwm_init+0x7a>
		return ERR_DENIED;
    31e0:	f06f 0010 	mvn.w	r0, #16
    31e4:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    31e6:	f04f 30ff 	mov.w	r0, #4294967295
    31ea:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    31ec:	2000      	movs	r0, #0
    31ee:	bd70      	pop	{r4, r5, r6, pc}
    31f0:	2000      	movs	r0, #0
}
    31f2:	bd70      	pop	{r4, r5, r6, pc}
    31f4:	00002e75 	.word	0x00002e75
    31f8:	20000088 	.word	0x20000088
    31fc:	00002e11 	.word	0x00002e11
    3200:	e000e100 	.word	0xe000e100

00003204 <_tc_get_timer>:
}
    3204:	4800      	ldr	r0, [pc, #0]	; (3208 <_tc_get_timer+0x4>)
    3206:	4770      	bx	lr
    3208:	20000100 	.word	0x20000100

0000320c <_tc_get_pwm>:
}
    320c:	2000      	movs	r0, #0
    320e:	4770      	bx	lr

00003210 <TC0_Handler>:
{
    3210:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    3212:	4b02      	ldr	r3, [pc, #8]	; (321c <TC0_Handler+0xc>)
    3214:	6818      	ldr	r0, [r3, #0]
    3216:	4b02      	ldr	r3, [pc, #8]	; (3220 <TC0_Handler+0x10>)
    3218:	4798      	blx	r3
    321a:	bd08      	pop	{r3, pc}
    321c:	20000ad8 	.word	0x20000ad8
    3220:	00002de1 	.word	0x00002de1

00003224 <TC1_Handler>:
{
    3224:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    3226:	4b02      	ldr	r3, [pc, #8]	; (3230 <TC1_Handler+0xc>)
    3228:	6858      	ldr	r0, [r3, #4]
    322a:	4b02      	ldr	r3, [pc, #8]	; (3234 <TC1_Handler+0x10>)
    322c:	4798      	blx	r3
    322e:	bd08      	pop	{r3, pc}
    3230:	20000ad8 	.word	0x20000ad8
    3234:	00002de1 	.word	0x00002de1

00003238 <TC2_Handler>:
{
    3238:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    323a:	4b02      	ldr	r3, [pc, #8]	; (3244 <TC2_Handler+0xc>)
    323c:	6898      	ldr	r0, [r3, #8]
    323e:	4b02      	ldr	r3, [pc, #8]	; (3248 <TC2_Handler+0x10>)
    3240:	4798      	blx	r3
    3242:	bd08      	pop	{r3, pc}
    3244:	20000ad8 	.word	0x20000ad8
    3248:	00002de1 	.word	0x00002de1

0000324c <TC3_Handler>:
{
    324c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    324e:	4b02      	ldr	r3, [pc, #8]	; (3258 <TC3_Handler+0xc>)
    3250:	68d8      	ldr	r0, [r3, #12]
    3252:	4b02      	ldr	r3, [pc, #8]	; (325c <TC3_Handler+0x10>)
    3254:	4798      	blx	r3
    3256:	bd08      	pop	{r3, pc}
    3258:	20000ad8 	.word	0x20000ad8
    325c:	00002dc9 	.word	0x00002dc9

00003260 <TC4_Handler>:
{
    3260:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    3262:	4b02      	ldr	r3, [pc, #8]	; (326c <TC4_Handler+0xc>)
    3264:	6918      	ldr	r0, [r3, #16]
    3266:	4b02      	ldr	r3, [pc, #8]	; (3270 <TC4_Handler+0x10>)
    3268:	4798      	blx	r3
    326a:	bd08      	pop	{r3, pc}
    326c:	20000ad8 	.word	0x20000ad8
    3270:	00002dc9 	.word	0x00002dc9

00003274 <TC5_Handler>:
{
    3274:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    3276:	4b02      	ldr	r3, [pc, #8]	; (3280 <TC5_Handler+0xc>)
    3278:	6958      	ldr	r0, [r3, #20]
    327a:	4b02      	ldr	r3, [pc, #8]	; (3284 <TC5_Handler+0x10>)
    327c:	4798      	blx	r3
    327e:	bd08      	pop	{r3, pc}
    3280:	20000ad8 	.word	0x20000ad8
    3284:	00002dc9 	.word	0x00002dc9

00003288 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    3288:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    328a:	4604      	mov	r4, r0
    328c:	b330      	cbz	r0, 32dc <_wdt_init+0x54>
    328e:	6800      	ldr	r0, [r0, #0]
    3290:	3000      	adds	r0, #0
    3292:	bf18      	it	ne
    3294:	2001      	movne	r0, #1
    3296:	225a      	movs	r2, #90	; 0x5a
    3298:	4914      	ldr	r1, [pc, #80]	; (32ec <_wdt_init+0x64>)
    329a:	4b15      	ldr	r3, [pc, #84]	; (32f0 <_wdt_init+0x68>)
    329c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    329e:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    32a0:	689a      	ldr	r2, [r3, #8]
    32a2:	f012 0f0e 	tst.w	r2, #14
    32a6:	d1fb      	bne.n	32a0 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    32a8:	781a      	ldrb	r2, [r3, #0]
    32aa:	09d2      	lsrs	r2, r2, #7
    32ac:	d118      	bne.n	32e0 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    32ae:	689a      	ldr	r2, [r3, #8]
    32b0:	f012 0f0e 	tst.w	r2, #14
    32b4:	d1fb      	bne.n	32ae <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    32b6:	781a      	ldrb	r2, [r3, #0]
    32b8:	f012 0f02 	tst.w	r2, #2
    32bc:	d113      	bne.n	32e6 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    32be:	689a      	ldr	r2, [r3, #8]
    32c0:	f012 0f0e 	tst.w	r2, #14
    32c4:	d1fb      	bne.n	32be <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    32c6:	781a      	ldrb	r2, [r3, #0]
    32c8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    32cc:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    32ce:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    32d0:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    32d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    32d6:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    32d8:	2000      	movs	r0, #0
    32da:	bd10      	pop	{r4, pc}
    32dc:	2000      	movs	r0, #0
    32de:	e7da      	b.n	3296 <_wdt_init+0xe>
		return ERR_DENIED;
    32e0:	f06f 0010 	mvn.w	r0, #16
    32e4:	bd10      	pop	{r4, pc}
    32e6:	f06f 0010 	mvn.w	r0, #16
}
    32ea:	bd10      	pop	{r4, pc}
    32ec:	0000745c 	.word	0x0000745c
    32f0:	00001e29 	.word	0x00001e29

000032f4 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    32f4:	b570      	push	{r4, r5, r6, lr}
    32f6:	460d      	mov	r5, r1
    32f8:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    32fa:	4606      	mov	r6, r0
    32fc:	2800      	cmp	r0, #0
    32fe:	d044      	beq.n	338a <_wdt_set_timeout_period+0x96>
    3300:	6800      	ldr	r0, [r0, #0]
    3302:	3000      	adds	r0, #0
    3304:	bf18      	it	ne
    3306:	2001      	movne	r0, #1
    3308:	2284      	movs	r2, #132	; 0x84
    330a:	493f      	ldr	r1, [pc, #252]	; (3408 <_wdt_set_timeout_period+0x114>)
    330c:	4b3f      	ldr	r3, [pc, #252]	; (340c <_wdt_set_timeout_period+0x118>)
    330e:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    3310:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3312:	6893      	ldr	r3, [r2, #8]
    3314:	f013 0f0e 	tst.w	r3, #14
    3318:	d1fb      	bne.n	3312 <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    331a:	7813      	ldrb	r3, [r2, #0]
    331c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    3320:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    3322:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3324:	688b      	ldr	r3, [r1, #8]
    3326:	f013 0f0e 	tst.w	r3, #14
    332a:	d1fb      	bne.n	3324 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    332c:	780b      	ldrb	r3, [r1, #0]
    332e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3332:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    3334:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3336:	6899      	ldr	r1, [r3, #8]
    3338:	f011 0f0e 	tst.w	r1, #14
    333c:	d1fb      	bne.n	3336 <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    333e:	781a      	ldrb	r2, [r3, #0]
    3340:	09d2      	lsrs	r2, r2, #7
    3342:	d158      	bne.n	33f6 <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3344:	6899      	ldr	r1, [r3, #8]
    3346:	f011 0f0e 	tst.w	r1, #14
    334a:	d1fb      	bne.n	3344 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    334c:	781a      	ldrb	r2, [r3, #0]
    334e:	f012 0f02 	tst.w	r2, #2
    3352:	d153      	bne.n	33fc <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    3354:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    3358:	4628      	mov	r0, r5
    335a:	2100      	movs	r1, #0
    335c:	ea50 0201 	orrs.w	r2, r0, r1
    3360:	d14f      	bne.n	3402 <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    3362:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    3366:	d038      	beq.n	33da <_wdt_set_timeout_period+0xe6>
    3368:	d911      	bls.n	338e <_wdt_set_timeout_period+0x9a>
    336a:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    336e:	d038      	beq.n	33e2 <_wdt_set_timeout_period+0xee>
    3370:	d927      	bls.n	33c2 <_wdt_set_timeout_period+0xce>
    3372:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    3376:	d038      	beq.n	33ea <_wdt_set_timeout_period+0xf6>
    3378:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    337c:	d037      	beq.n	33ee <_wdt_set_timeout_period+0xfa>
    337e:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    3382:	d030      	beq.n	33e6 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    3384:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    3388:	bd70      	pop	{r4, r5, r6, pc}
    338a:	2000      	movs	r0, #0
    338c:	e7bc      	b.n	3308 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    338e:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    3392:	d01e      	beq.n	33d2 <_wdt_set_timeout_period+0xde>
    3394:	d80d      	bhi.n	33b2 <_wdt_set_timeout_period+0xbe>
    3396:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    339a:	d02a      	beq.n	33f2 <_wdt_set_timeout_period+0xfe>
    339c:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    33a0:	d1f0      	bne.n	3384 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    33a2:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    33a4:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    33a6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    33aa:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    33ac:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    33ae:	2000      	movs	r0, #0
    33b0:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    33b2:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    33b6:	d00e      	beq.n	33d6 <_wdt_set_timeout_period+0xe2>
    33b8:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    33bc:	d1e2      	bne.n	3384 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    33be:	2104      	movs	r1, #4
			break;
    33c0:	e7f0      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    33c2:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    33c6:	d00a      	beq.n	33de <_wdt_set_timeout_period+0xea>
    33c8:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    33cc:	d1da      	bne.n	3384 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    33ce:	2107      	movs	r1, #7
			break;
    33d0:	e7e8      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    33d2:	2102      	movs	r1, #2
			break;
    33d4:	e7e6      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    33d6:	2103      	movs	r1, #3
			break;
    33d8:	e7e4      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    33da:	2105      	movs	r1, #5
			break;
    33dc:	e7e2      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    33de:	2106      	movs	r1, #6
			break;
    33e0:	e7e0      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    33e2:	2108      	movs	r1, #8
			break;
    33e4:	e7de      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    33e6:	2109      	movs	r1, #9
			break;
    33e8:	e7dc      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    33ea:	210a      	movs	r1, #10
			break;
    33ec:	e7da      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    33ee:	210b      	movs	r1, #11
			break;
    33f0:	e7d8      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    33f2:	2100      	movs	r1, #0
    33f4:	e7d6      	b.n	33a4 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    33f6:	f06f 0010 	mvn.w	r0, #16
    33fa:	bd70      	pop	{r4, r5, r6, pc}
    33fc:	f06f 0010 	mvn.w	r0, #16
    3400:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    3402:	f06f 000c 	mvn.w	r0, #12
    3406:	bd70      	pop	{r4, r5, r6, pc}
    3408:	0000745c 	.word	0x0000745c
    340c:	00001e29 	.word	0x00001e29

00003410 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    3410:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3412:	4604      	mov	r4, r0
    3414:	b198      	cbz	r0, 343e <_wdt_enable+0x2e>
    3416:	6800      	ldr	r0, [r0, #0]
    3418:	3000      	adds	r0, #0
    341a:	bf18      	it	ne
    341c:	2001      	movne	r0, #1
    341e:	f240 1207 	movw	r2, #263	; 0x107
    3422:	4908      	ldr	r1, [pc, #32]	; (3444 <_wdt_enable+0x34>)
    3424:	4b08      	ldr	r3, [pc, #32]	; (3448 <_wdt_enable+0x38>)
    3426:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    3428:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    342a:	6893      	ldr	r3, [r2, #8]
    342c:	f013 0f0e 	tst.w	r3, #14
    3430:	d1fb      	bne.n	342a <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    3432:	7813      	ldrb	r3, [r2, #0]
    3434:	f043 0302 	orr.w	r3, r3, #2
    3438:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    343a:	2000      	movs	r0, #0
    343c:	bd10      	pop	{r4, pc}
    343e:	2000      	movs	r0, #0
    3440:	e7ed      	b.n	341e <_wdt_enable+0xe>
    3442:	bf00      	nop
    3444:	0000745c 	.word	0x0000745c
    3448:	00001e29 	.word	0x00001e29

0000344c <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    344c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    344e:	4604      	mov	r4, r0
    3450:	b168      	cbz	r0, 346e <_wdt_feed+0x22>
    3452:	6800      	ldr	r0, [r0, #0]
    3454:	3000      	adds	r0, #0
    3456:	bf18      	it	ne
    3458:	2001      	movne	r0, #1
    345a:	f240 1225 	movw	r2, #293	; 0x125
    345e:	4905      	ldr	r1, [pc, #20]	; (3474 <_wdt_feed+0x28>)
    3460:	4b05      	ldr	r3, [pc, #20]	; (3478 <_wdt_feed+0x2c>)
    3462:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    3464:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    3466:	22a5      	movs	r2, #165	; 0xa5
    3468:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    346a:	2000      	movs	r0, #0
    346c:	bd10      	pop	{r4, pc}
    346e:	2000      	movs	r0, #0
    3470:	e7f3      	b.n	345a <_wdt_feed+0xe>
    3472:	bf00      	nop
    3474:	0000745c 	.word	0x0000745c
    3478:	00001e29 	.word	0x00001e29

0000347c <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    347c:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    347e:	2200      	movs	r2, #0
    3480:	2108      	movs	r1, #8
    3482:	2001      	movs	r0, #1
    3484:	4c15      	ldr	r4, [pc, #84]	; (34dc <createQueuesAndSemaphores+0x60>)
    3486:	47a0      	blx	r4
    3488:	4d15      	ldr	r5, [pc, #84]	; (34e0 <createQueuesAndSemaphores+0x64>)
    348a:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    348c:	2200      	movs	r2, #0
    348e:	2101      	movs	r1, #1
    3490:	4608      	mov	r0, r1
    3492:	47a0      	blx	r4
    3494:	4b13      	ldr	r3, [pc, #76]	; (34e4 <createQueuesAndSemaphores+0x68>)
    3496:	6018      	str	r0, [r3, #0]
    CmdResponseQueue  = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    3498:	2200      	movs	r2, #0
    349a:	2108      	movs	r1, #8
    349c:	2001      	movs	r0, #1
    349e:	47a0      	blx	r4
    34a0:	4b11      	ldr	r3, [pc, #68]	; (34e8 <createQueuesAndSemaphores+0x6c>)
    34a2:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    34a4:	682b      	ldr	r3, [r5, #0]
    34a6:	b1bb      	cbz	r3, 34d8 <createQueuesAndSemaphores+0x5c>
       (AtReceiveQueue  != NULL) &&
    34a8:	4b0e      	ldr	r3, [pc, #56]	; (34e4 <createQueuesAndSemaphores+0x68>)
    if((AtTransmitQueue != NULL) &&
    34aa:	681b      	ldr	r3, [r3, #0]
    34ac:	b1a3      	cbz	r3, 34d8 <createQueuesAndSemaphores+0x5c>
       (AtReceiveQueue  != NULL) &&
    34ae:	b198      	cbz	r0, 34d8 <createQueuesAndSemaphores+0x5c>
	   (CmdResponseQueue != NULL))
    {
    	DEBUG_PRINT("Tx & Rx Queues are created");
    34b0:	480e      	ldr	r0, [pc, #56]	; (34ec <createQueuesAndSemaphores+0x70>)
    34b2:	4b0f      	ldr	r3, [pc, #60]	; (34f0 <createQueuesAndSemaphores+0x74>)
    34b4:	4798      	blx	r3

    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    34b6:	2203      	movs	r2, #3
    34b8:	2100      	movs	r1, #0
    34ba:	2001      	movs	r0, #1
    34bc:	47a0      	blx	r4
    34be:	4c0d      	ldr	r4, [pc, #52]	; (34f4 <createQueuesAndSemaphores+0x78>)
    34c0:	6020      	str	r0, [r4, #0]
    	DebugPrintMutex        = xSemaphoreCreateMutex();
    34c2:	2001      	movs	r0, #1
    34c4:	4b0c      	ldr	r3, [pc, #48]	; (34f8 <createQueuesAndSemaphores+0x7c>)
    34c6:	4798      	blx	r3
    34c8:	4b0c      	ldr	r3, [pc, #48]	; (34fc <createQueuesAndSemaphores+0x80>)
    34ca:	6018      	str	r0, [r3, #0]
		
		if((AtTxQueueLoadSemaphore != NULL) &&
    34cc:	6823      	ldr	r3, [r4, #0]
    34ce:	b11b      	cbz	r3, 34d8 <createQueuesAndSemaphores+0x5c>
    34d0:	b110      	cbz	r0, 34d8 <createQueuesAndSemaphores+0x5c>
		   (DebugPrintMutex != NULL))
		{
			DEBUG_PRINT("Semaphores and Mutexes are created");
    34d2:	480b      	ldr	r0, [pc, #44]	; (3500 <createQueuesAndSemaphores+0x84>)
    34d4:	4b06      	ldr	r3, [pc, #24]	; (34f0 <createQueuesAndSemaphores+0x74>)
    34d6:	4798      	blx	r3
    }
    else
    {
    	status = false;
    }
}
    34d8:	bd38      	pop	{r3, r4, r5, pc}
    34da:	bf00      	nop
    34dc:	00003dc9 	.word	0x00003dc9
    34e0:	20003474 	.word	0x20003474
    34e4:	20003480 	.word	0x20003480
    34e8:	20003450 	.word	0x20003450
    34ec:	00007474 	.word	0x00007474
    34f0:	0000112d 	.word	0x0000112d
    34f4:	2000347c 	.word	0x2000347c
    34f8:	00003ffd 	.word	0x00003ffd
    34fc:	20003478 	.word	0x20003478
    3500:	00007490 	.word	0x00007490

00003504 <main>:
{
    3504:	b580      	push	{r7, lr}
    3506:	b082      	sub	sp, #8
    atmel_start_init();	
    3508:	4b29      	ldr	r3, [pc, #164]	; (35b0 <main+0xac>)
    350a:	4798      	blx	r3
    DispatchTaskStatus = xTaskCreate( DispatchTask, "DispatchTask", 150, NULL, 2, &xDispatchTaskHandle );
    350c:	4b29      	ldr	r3, [pc, #164]	; (35b4 <main+0xb0>)
    350e:	9301      	str	r3, [sp, #4]
    3510:	2702      	movs	r7, #2
    3512:	9700      	str	r7, [sp, #0]
    3514:	2300      	movs	r3, #0
    3516:	2296      	movs	r2, #150	; 0x96
    3518:	4927      	ldr	r1, [pc, #156]	; (35b8 <main+0xb4>)
    351a:	4828      	ldr	r0, [pc, #160]	; (35bc <main+0xb8>)
    351c:	4d28      	ldr	r5, [pc, #160]	; (35c0 <main+0xbc>)
    351e:	47a8      	blx	r5
    3520:	4c28      	ldr	r4, [pc, #160]	; (35c4 <main+0xc0>)
    3522:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTask", 150, NULL, 1, &xModemTxTaskHandle );
    3524:	4b28      	ldr	r3, [pc, #160]	; (35c8 <main+0xc4>)
    3526:	9301      	str	r3, [sp, #4]
    3528:	2601      	movs	r6, #1
    352a:	9600      	str	r6, [sp, #0]
    352c:	2300      	movs	r3, #0
    352e:	2296      	movs	r2, #150	; 0x96
    3530:	4926      	ldr	r1, [pc, #152]	; (35cc <main+0xc8>)
    3532:	4827      	ldr	r0, [pc, #156]	; (35d0 <main+0xcc>)
    3534:	47a8      	blx	r5
    3536:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    3538:	4b26      	ldr	r3, [pc, #152]	; (35d4 <main+0xd0>)
    353a:	9301      	str	r3, [sp, #4]
    353c:	9700      	str	r7, [sp, #0]
    353e:	2300      	movs	r3, #0
    3540:	2296      	movs	r2, #150	; 0x96
    3542:	4925      	ldr	r1, [pc, #148]	; (35d8 <main+0xd4>)
    3544:	4825      	ldr	r0, [pc, #148]	; (35dc <main+0xd8>)
    3546:	47a8      	blx	r5
    3548:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    354a:	4b25      	ldr	r3, [pc, #148]	; (35e0 <main+0xdc>)
    354c:	9301      	str	r3, [sp, #4]
    354e:	9600      	str	r6, [sp, #0]
    3550:	2300      	movs	r3, #0
    3552:	2296      	movs	r2, #150	; 0x96
    3554:	4923      	ldr	r1, [pc, #140]	; (35e4 <main+0xe0>)
    3556:	4824      	ldr	r0, [pc, #144]	; (35e8 <main+0xe4>)
    3558:	47a8      	blx	r5
    355a:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    355c:	4b23      	ldr	r3, [pc, #140]	; (35ec <main+0xe8>)
    355e:	9301      	str	r3, [sp, #4]
    3560:	9600      	str	r6, [sp, #0]
    3562:	2300      	movs	r3, #0
    3564:	2296      	movs	r2, #150	; 0x96
    3566:	4922      	ldr	r1, [pc, #136]	; (35f0 <main+0xec>)
    3568:	4822      	ldr	r0, [pc, #136]	; (35f4 <main+0xf0>)
    356a:	47a8      	blx	r5
    if((DispatchTaskStatus == pdPASS) &&
    356c:	6823      	ldr	r3, [r4, #0]
    356e:	42b3      	cmp	r3, r6
    3570:	d006      	beq.n	3580 <main+0x7c>
    	DEBUG_PRINT("Failed to create tasks");
    3572:	4821      	ldr	r0, [pc, #132]	; (35f8 <main+0xf4>)
    3574:	4b21      	ldr	r3, [pc, #132]	; (35fc <main+0xf8>)
    3576:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    3578:	4821      	ldr	r0, [pc, #132]	; (3600 <main+0xfc>)
    357a:	4b20      	ldr	r3, [pc, #128]	; (35fc <main+0xf8>)
    357c:	4798      	blx	r3
    357e:	e7fe      	b.n	357e <main+0x7a>
    if((DispatchTaskStatus == pdPASS) &&
    3580:	68e3      	ldr	r3, [r4, #12]
    3582:	42b3      	cmp	r3, r6
    3584:	d1f5      	bne.n	3572 <main+0x6e>
       (ModemProcessTaskStatus == pdPASS) &&
    3586:	6863      	ldr	r3, [r4, #4]
    3588:	42b3      	cmp	r3, r6
    358a:	d1f2      	bne.n	3572 <main+0x6e>
       (ModemTxTaskStatus == pdPASS) &&
    358c:	68a3      	ldr	r3, [r4, #8]
    358e:	42b3      	cmp	r3, r6
    3590:	d1ef      	bne.n	3572 <main+0x6e>
       (ModemRxTaskStatus == pdPASS) &&
    3592:	42b0      	cmp	r0, r6
    3594:	d1ed      	bne.n	3572 <main+0x6e>
    	DEBUG_PRINT("Successfully Created the Tasks");
    3596:	481b      	ldr	r0, [pc, #108]	; (3604 <main+0x100>)
    3598:	4b18      	ldr	r3, [pc, #96]	; (35fc <main+0xf8>)
    359a:	4798      	blx	r3
    	if(false != createQueuesAndSemaphores())
    359c:	4b1a      	ldr	r3, [pc, #104]	; (3608 <main+0x104>)
    359e:	4798      	blx	r3
    35a0:	b110      	cbz	r0, 35a8 <main+0xa4>
    		vTaskStartScheduler();
    35a2:	4b1a      	ldr	r3, [pc, #104]	; (360c <main+0x108>)
    35a4:	4798      	blx	r3
    35a6:	e7e7      	b.n	3578 <main+0x74>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    35a8:	4819      	ldr	r0, [pc, #100]	; (3610 <main+0x10c>)
    35aa:	4b14      	ldr	r3, [pc, #80]	; (35fc <main+0xf8>)
    35ac:	4798      	blx	r3
    35ae:	e7e3      	b.n	3578 <main+0x74>
    35b0:	00001245 	.word	0x00001245
    35b4:	2000346c 	.word	0x2000346c
    35b8:	000074b4 	.word	0x000074b4
    35bc:	00000359 	.word	0x00000359
    35c0:	000045f9 	.word	0x000045f9
    35c4:	20000af0 	.word	0x20000af0
    35c8:	20003454 	.word	0x20003454
    35cc:	000074c4 	.word	0x000074c4
    35d0:	00000f69 	.word	0x00000f69
    35d4:	20003468 	.word	0x20003468
    35d8:	000074d0 	.word	0x000074d0
    35dc:	00000ef1 	.word	0x00000ef1
    35e0:	2000345c 	.word	0x2000345c
    35e4:	000074dc 	.word	0x000074dc
    35e8:	00000d7d 	.word	0x00000d7d
    35ec:	20003460 	.word	0x20003460
    35f0:	000074f0 	.word	0x000074f0
    35f4:	000008f9 	.word	0x000008f9
    35f8:	00007540 	.word	0x00007540
    35fc:	0000112d 	.word	0x0000112d
    3600:	00007558 	.word	0x00007558
    3604:	00007500 	.word	0x00007500
    3608:	0000347d 	.word	0x0000347d
    360c:	000047d5 	.word	0x000047d5
    3610:	00007520 	.word	0x00007520

00003614 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    3614:	f100 0308 	add.w	r3, r0, #8
    3618:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    361a:	f04f 32ff 	mov.w	r2, #4294967295
    361e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    3620:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    3622:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    3624:	2300      	movs	r3, #0
    3626:	6003      	str	r3, [r0, #0]
    3628:	4770      	bx	lr

0000362a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    362a:	2300      	movs	r3, #0
    362c:	6103      	str	r3, [r0, #16]
    362e:	4770      	bx	lr

00003630 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    3630:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    3632:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3634:	689a      	ldr	r2, [r3, #8]
    3636:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3638:	689a      	ldr	r2, [r3, #8]
    363a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    363c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    363e:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    3640:	6803      	ldr	r3, [r0, #0]
    3642:	3301      	adds	r3, #1
    3644:	6003      	str	r3, [r0, #0]
    3646:	4770      	bx	lr

00003648 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    3648:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    364a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    364c:	f1b5 3fff 	cmp.w	r5, #4294967295
    3650:	d002      	beq.n	3658 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    3652:	f100 0208 	add.w	r2, r0, #8
    3656:	e002      	b.n	365e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    3658:	6902      	ldr	r2, [r0, #16]
    365a:	e004      	b.n	3666 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    365c:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    365e:	6853      	ldr	r3, [r2, #4]
    3660:	681c      	ldr	r4, [r3, #0]
    3662:	42a5      	cmp	r5, r4
    3664:	d2fa      	bcs.n	365c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    3666:	6853      	ldr	r3, [r2, #4]
    3668:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    366a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    366c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    366e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    3670:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    3672:	6803      	ldr	r3, [r0, #0]
    3674:	3301      	adds	r3, #1
    3676:	6003      	str	r3, [r0, #0]
}
    3678:	bc30      	pop	{r4, r5}
    367a:	4770      	bx	lr

0000367c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    367c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    367e:	6842      	ldr	r2, [r0, #4]
    3680:	6881      	ldr	r1, [r0, #8]
    3682:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3684:	6882      	ldr	r2, [r0, #8]
    3686:	6841      	ldr	r1, [r0, #4]
    3688:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    368a:	685a      	ldr	r2, [r3, #4]
    368c:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    368e:	bf04      	itt	eq
    3690:	6882      	ldreq	r2, [r0, #8]
    3692:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3694:	2200      	movs	r2, #0
    3696:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    3698:	681a      	ldr	r2, [r3, #0]
    369a:	3a01      	subs	r2, #1
    369c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    369e:	6818      	ldr	r0, [r3, #0]
}
    36a0:	4770      	bx	lr
	...

000036a4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    36a4:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    36a6:	2300      	movs	r3, #0
    36a8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    36aa:	4b0d      	ldr	r3, [pc, #52]	; (36e0 <prvTaskExitError+0x3c>)
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	f1b3 3fff 	cmp.w	r3, #4294967295
    36b2:	d008      	beq.n	36c6 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    36b4:	f04f 0380 	mov.w	r3, #128	; 0x80
    36b8:	f383 8811 	msr	BASEPRI, r3
    36bc:	f3bf 8f6f 	isb	sy
    36c0:	f3bf 8f4f 	dsb	sy
    36c4:	e7fe      	b.n	36c4 <prvTaskExitError+0x20>
    36c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    36ca:	f383 8811 	msr	BASEPRI, r3
    36ce:	f3bf 8f6f 	isb	sy
    36d2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    36d6:	9b01      	ldr	r3, [sp, #4]
    36d8:	2b00      	cmp	r3, #0
    36da:	d0fc      	beq.n	36d6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    36dc:	b002      	add	sp, #8
    36de:	4770      	bx	lr
    36e0:	20000120 	.word	0x20000120

000036e4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    36e4:	4808      	ldr	r0, [pc, #32]	; (3708 <prvPortStartFirstTask+0x24>)
    36e6:	6800      	ldr	r0, [r0, #0]
    36e8:	6800      	ldr	r0, [r0, #0]
    36ea:	f380 8808 	msr	MSP, r0
    36ee:	f04f 0000 	mov.w	r0, #0
    36f2:	f380 8814 	msr	CONTROL, r0
    36f6:	b662      	cpsie	i
    36f8:	b661      	cpsie	f
    36fa:	f3bf 8f4f 	dsb	sy
    36fe:	f3bf 8f6f 	isb	sy
    3702:	df00      	svc	0
    3704:	bf00      	nop
    3706:	0000      	.short	0x0000
    3708:	e000ed08 	.word	0xe000ed08

0000370c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    370c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 371c <vPortEnableVFP+0x10>
    3710:	6801      	ldr	r1, [r0, #0]
    3712:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3716:	6001      	str	r1, [r0, #0]
    3718:	4770      	bx	lr
    371a:	0000      	.short	0x0000
    371c:	e000ed88 	.word	0xe000ed88

00003720 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    3720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3724:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    3728:	f021 0101 	bic.w	r1, r1, #1
    372c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    3730:	4b05      	ldr	r3, [pc, #20]	; (3748 <pxPortInitialiseStack+0x28>)
    3732:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    3736:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    373a:	f06f 0302 	mvn.w	r3, #2
    373e:	f840 3c24 	str.w	r3, [r0, #-36]
}
    3742:	3844      	subs	r0, #68	; 0x44
    3744:	4770      	bx	lr
    3746:	bf00      	nop
    3748:	000036a5 	.word	0x000036a5
    374c:	00000000 	.word	0x00000000

00003750 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    3750:	4b07      	ldr	r3, [pc, #28]	; (3770 <pxCurrentTCBConst2>)
    3752:	6819      	ldr	r1, [r3, #0]
    3754:	6808      	ldr	r0, [r1, #0]
    3756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    375a:	f380 8809 	msr	PSP, r0
    375e:	f3bf 8f6f 	isb	sy
    3762:	f04f 0000 	mov.w	r0, #0
    3766:	f380 8811 	msr	BASEPRI, r0
    376a:	4770      	bx	lr
    376c:	f3af 8000 	nop.w

00003770 <pxCurrentTCBConst2>:
    3770:	200033b4 	.word	0x200033b4

00003774 <vPortEnterCritical>:
    3774:	f04f 0380 	mov.w	r3, #128	; 0x80
    3778:	f383 8811 	msr	BASEPRI, r3
    377c:	f3bf 8f6f 	isb	sy
    3780:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    3784:	4a0a      	ldr	r2, [pc, #40]	; (37b0 <vPortEnterCritical+0x3c>)
    3786:	6813      	ldr	r3, [r2, #0]
    3788:	3301      	adds	r3, #1
    378a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    378c:	2b01      	cmp	r3, #1
    378e:	d10d      	bne.n	37ac <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    3790:	4b08      	ldr	r3, [pc, #32]	; (37b4 <vPortEnterCritical+0x40>)
    3792:	681b      	ldr	r3, [r3, #0]
    3794:	f013 0fff 	tst.w	r3, #255	; 0xff
    3798:	d008      	beq.n	37ac <vPortEnterCritical+0x38>
    379a:	f04f 0380 	mov.w	r3, #128	; 0x80
    379e:	f383 8811 	msr	BASEPRI, r3
    37a2:	f3bf 8f6f 	isb	sy
    37a6:	f3bf 8f4f 	dsb	sy
    37aa:	e7fe      	b.n	37aa <vPortEnterCritical+0x36>
    37ac:	4770      	bx	lr
    37ae:	bf00      	nop
    37b0:	20000120 	.word	0x20000120
    37b4:	e000ed04 	.word	0xe000ed04

000037b8 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    37b8:	4b09      	ldr	r3, [pc, #36]	; (37e0 <vPortExitCritical+0x28>)
    37ba:	681b      	ldr	r3, [r3, #0]
    37bc:	b943      	cbnz	r3, 37d0 <vPortExitCritical+0x18>
    37be:	f04f 0380 	mov.w	r3, #128	; 0x80
    37c2:	f383 8811 	msr	BASEPRI, r3
    37c6:	f3bf 8f6f 	isb	sy
    37ca:	f3bf 8f4f 	dsb	sy
    37ce:	e7fe      	b.n	37ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
    37d0:	3b01      	subs	r3, #1
    37d2:	4a03      	ldr	r2, [pc, #12]	; (37e0 <vPortExitCritical+0x28>)
    37d4:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    37d6:	b90b      	cbnz	r3, 37dc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    37d8:	f383 8811 	msr	BASEPRI, r3
    37dc:	4770      	bx	lr
    37de:	bf00      	nop
    37e0:	20000120 	.word	0x20000120
	...

000037f0 <PendSV_Handler>:
	__asm volatile(
    37f0:	f3ef 8009 	mrs	r0, PSP
    37f4:	f3bf 8f6f 	isb	sy
    37f8:	4b15      	ldr	r3, [pc, #84]	; (3850 <pxCurrentTCBConst>)
    37fa:	681a      	ldr	r2, [r3, #0]
    37fc:	f01e 0f10 	tst.w	lr, #16
    3800:	bf08      	it	eq
    3802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    3806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    380a:	6010      	str	r0, [r2, #0]
    380c:	e92d 0009 	stmdb	sp!, {r0, r3}
    3810:	f04f 0080 	mov.w	r0, #128	; 0x80
    3814:	f380 8811 	msr	BASEPRI, r0
    3818:	f3bf 8f4f 	dsb	sy
    381c:	f3bf 8f6f 	isb	sy
    3820:	f001 f9c8 	bl	4bb4 <vTaskSwitchContext>
    3824:	f04f 0000 	mov.w	r0, #0
    3828:	f380 8811 	msr	BASEPRI, r0
    382c:	bc09      	pop	{r0, r3}
    382e:	6819      	ldr	r1, [r3, #0]
    3830:	6808      	ldr	r0, [r1, #0]
    3832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3836:	f01e 0f10 	tst.w	lr, #16
    383a:	bf08      	it	eq
    383c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    3840:	f380 8809 	msr	PSP, r0
    3844:	f3bf 8f6f 	isb	sy
    3848:	4770      	bx	lr
    384a:	bf00      	nop
    384c:	f3af 8000 	nop.w

00003850 <pxCurrentTCBConst>:
    3850:	200033b4 	.word	0x200033b4

00003854 <SysTick_Handler>:
{
    3854:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    3856:	f04f 0380 	mov.w	r3, #128	; 0x80
    385a:	f383 8811 	msr	BASEPRI, r3
    385e:	f3bf 8f6f 	isb	sy
    3862:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    3866:	4b05      	ldr	r3, [pc, #20]	; (387c <SysTick_Handler+0x28>)
    3868:	4798      	blx	r3
    386a:	b118      	cbz	r0, 3874 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    386c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3870:	4b03      	ldr	r3, [pc, #12]	; (3880 <SysTick_Handler+0x2c>)
    3872:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3874:	2300      	movs	r3, #0
    3876:	f383 8811 	msr	BASEPRI, r3
    387a:	bd08      	pop	{r3, pc}
    387c:	0000487d 	.word	0x0000487d
    3880:	e000ed04 	.word	0xe000ed04

00003884 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    3884:	4b05      	ldr	r3, [pc, #20]	; (389c <vPortSetupTimerInterrupt+0x18>)
    3886:	2200      	movs	r2, #0
    3888:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    388a:	4905      	ldr	r1, [pc, #20]	; (38a0 <vPortSetupTimerInterrupt+0x1c>)
    388c:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    388e:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    3892:	4a04      	ldr	r2, [pc, #16]	; (38a4 <vPortSetupTimerInterrupt+0x20>)
    3894:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    3896:	2207      	movs	r2, #7
    3898:	601a      	str	r2, [r3, #0]
    389a:	4770      	bx	lr
    389c:	e000e010 	.word	0xe000e010
    38a0:	e000e018 	.word	0xe000e018
    38a4:	e000e014 	.word	0xe000e014

000038a8 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    38a8:	4b3b      	ldr	r3, [pc, #236]	; (3998 <xPortStartScheduler+0xf0>)
    38aa:	681a      	ldr	r2, [r3, #0]
    38ac:	4b3b      	ldr	r3, [pc, #236]	; (399c <xPortStartScheduler+0xf4>)
    38ae:	429a      	cmp	r2, r3
    38b0:	d108      	bne.n	38c4 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    38b2:	f04f 0380 	mov.w	r3, #128	; 0x80
    38b6:	f383 8811 	msr	BASEPRI, r3
    38ba:	f3bf 8f6f 	isb	sy
    38be:	f3bf 8f4f 	dsb	sy
    38c2:	e7fe      	b.n	38c2 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    38c4:	4b34      	ldr	r3, [pc, #208]	; (3998 <xPortStartScheduler+0xf0>)
    38c6:	681a      	ldr	r2, [r3, #0]
    38c8:	4b35      	ldr	r3, [pc, #212]	; (39a0 <xPortStartScheduler+0xf8>)
    38ca:	429a      	cmp	r2, r3
    38cc:	d108      	bne.n	38e0 <xPortStartScheduler+0x38>
    38ce:	f04f 0380 	mov.w	r3, #128	; 0x80
    38d2:	f383 8811 	msr	BASEPRI, r3
    38d6:	f3bf 8f6f 	isb	sy
    38da:	f3bf 8f4f 	dsb	sy
    38de:	e7fe      	b.n	38de <xPortStartScheduler+0x36>
{
    38e0:	b510      	push	{r4, lr}
    38e2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    38e4:	4b2f      	ldr	r3, [pc, #188]	; (39a4 <xPortStartScheduler+0xfc>)
    38e6:	781a      	ldrb	r2, [r3, #0]
    38e8:	b2d2      	uxtb	r2, r2
    38ea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    38ec:	22ff      	movs	r2, #255	; 0xff
    38ee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    38f0:	781b      	ldrb	r3, [r3, #0]
    38f2:	b2db      	uxtb	r3, r3
    38f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    38f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    38fc:	4a2a      	ldr	r2, [pc, #168]	; (39a8 <xPortStartScheduler+0x100>)
    38fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3902:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    3904:	2307      	movs	r3, #7
    3906:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3908:	f89d 3003 	ldrb.w	r3, [sp, #3]
    390c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3910:	d012      	beq.n	3938 <xPortStartScheduler+0x90>
    3912:	2306      	movs	r3, #6
    3914:	e000      	b.n	3918 <xPortStartScheduler+0x70>
    3916:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    3918:	f89d 2003 	ldrb.w	r2, [sp, #3]
    391c:	0052      	lsls	r2, r2, #1
    391e:	b2d2      	uxtb	r2, r2
    3920:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3924:	f89d 2003 	ldrb.w	r2, [sp, #3]
    3928:	1e59      	subs	r1, r3, #1
    392a:	f012 0f80 	tst.w	r2, #128	; 0x80
    392e:	d1f2      	bne.n	3916 <xPortStartScheduler+0x6e>
    3930:	4a1d      	ldr	r2, [pc, #116]	; (39a8 <xPortStartScheduler+0x100>)
    3932:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    3934:	2b04      	cmp	r3, #4
    3936:	d008      	beq.n	394a <xPortStartScheduler+0xa2>
    3938:	f04f 0380 	mov.w	r3, #128	; 0x80
    393c:	f383 8811 	msr	BASEPRI, r3
    3940:	f3bf 8f6f 	isb	sy
    3944:	f3bf 8f4f 	dsb	sy
    3948:	e7fe      	b.n	3948 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    394a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    394c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3950:	4a15      	ldr	r2, [pc, #84]	; (39a8 <xPortStartScheduler+0x100>)
    3952:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    3954:	9b01      	ldr	r3, [sp, #4]
    3956:	b2db      	uxtb	r3, r3
    3958:	4a12      	ldr	r2, [pc, #72]	; (39a4 <xPortStartScheduler+0xfc>)
    395a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    395c:	4b13      	ldr	r3, [pc, #76]	; (39ac <xPortStartScheduler+0x104>)
    395e:	681a      	ldr	r2, [r3, #0]
    3960:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    3964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    3966:	681a      	ldr	r2, [r3, #0]
    3968:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    396c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    396e:	4b10      	ldr	r3, [pc, #64]	; (39b0 <xPortStartScheduler+0x108>)
    3970:	4798      	blx	r3
	uxCriticalNesting = 0;
    3972:	2400      	movs	r4, #0
    3974:	4b0f      	ldr	r3, [pc, #60]	; (39b4 <xPortStartScheduler+0x10c>)
    3976:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    3978:	4b0f      	ldr	r3, [pc, #60]	; (39b8 <xPortStartScheduler+0x110>)
    397a:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    397c:	4a0f      	ldr	r2, [pc, #60]	; (39bc <xPortStartScheduler+0x114>)
    397e:	6813      	ldr	r3, [r2, #0]
    3980:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    3984:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    3986:	4b0e      	ldr	r3, [pc, #56]	; (39c0 <xPortStartScheduler+0x118>)
    3988:	4798      	blx	r3
	vTaskSwitchContext();
    398a:	4b0e      	ldr	r3, [pc, #56]	; (39c4 <xPortStartScheduler+0x11c>)
    398c:	4798      	blx	r3
	prvTaskExitError();
    398e:	4b0e      	ldr	r3, [pc, #56]	; (39c8 <xPortStartScheduler+0x120>)
    3990:	4798      	blx	r3
}
    3992:	4620      	mov	r0, r4
    3994:	b002      	add	sp, #8
    3996:	bd10      	pop	{r4, pc}
    3998:	e000ed00 	.word	0xe000ed00
    399c:	410fc271 	.word	0x410fc271
    39a0:	410fc270 	.word	0x410fc270
    39a4:	e000e400 	.word	0xe000e400
    39a8:	20000b00 	.word	0x20000b00
    39ac:	e000ed20 	.word	0xe000ed20
    39b0:	00003885 	.word	0x00003885
    39b4:	20000120 	.word	0x20000120
    39b8:	0000370d 	.word	0x0000370d
    39bc:	e000ef34 	.word	0xe000ef34
    39c0:	000036e5 	.word	0x000036e5
    39c4:	00004bb5 	.word	0x00004bb5
    39c8:	000036a5 	.word	0x000036a5

000039cc <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    39cc:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    39d0:	2b0f      	cmp	r3, #15
    39d2:	d90f      	bls.n	39f4 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    39d4:	4a10      	ldr	r2, [pc, #64]	; (3a18 <vPortValidateInterruptPriority+0x4c>)
    39d6:	5c9b      	ldrb	r3, [r3, r2]
    39d8:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    39da:	4a10      	ldr	r2, [pc, #64]	; (3a1c <vPortValidateInterruptPriority+0x50>)
    39dc:	7812      	ldrb	r2, [r2, #0]
    39de:	429a      	cmp	r2, r3
    39e0:	d908      	bls.n	39f4 <vPortValidateInterruptPriority+0x28>
    39e2:	f04f 0380 	mov.w	r3, #128	; 0x80
    39e6:	f383 8811 	msr	BASEPRI, r3
    39ea:	f3bf 8f6f 	isb	sy
    39ee:	f3bf 8f4f 	dsb	sy
    39f2:	e7fe      	b.n	39f2 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    39f4:	4b0a      	ldr	r3, [pc, #40]	; (3a20 <vPortValidateInterruptPriority+0x54>)
    39f6:	681b      	ldr	r3, [r3, #0]
    39f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    39fc:	4a07      	ldr	r2, [pc, #28]	; (3a1c <vPortValidateInterruptPriority+0x50>)
    39fe:	6852      	ldr	r2, [r2, #4]
    3a00:	4293      	cmp	r3, r2
    3a02:	d908      	bls.n	3a16 <vPortValidateInterruptPriority+0x4a>
    3a04:	f04f 0380 	mov.w	r3, #128	; 0x80
    3a08:	f383 8811 	msr	BASEPRI, r3
    3a0c:	f3bf 8f6f 	isb	sy
    3a10:	f3bf 8f4f 	dsb	sy
    3a14:	e7fe      	b.n	3a14 <vPortValidateInterruptPriority+0x48>
    3a16:	4770      	bx	lr
    3a18:	e000e3f0 	.word	0xe000e3f0
    3a1c:	20000b00 	.word	0x20000b00
    3a20:	e000ed0c 	.word	0xe000ed0c

00003a24 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    3a24:	b570      	push	{r4, r5, r6, lr}
    3a26:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    3a28:	4b2d      	ldr	r3, [pc, #180]	; (3ae0 <pvPortMalloc+0xbc>)
    3a2a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    3a2c:	4b2d      	ldr	r3, [pc, #180]	; (3ae4 <pvPortMalloc+0xc0>)
    3a2e:	689b      	ldr	r3, [r3, #8]
    3a30:	b183      	cbz	r3, 3a54 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    3a32:	2c00      	cmp	r4, #0
    3a34:	d04d      	beq.n	3ad2 <pvPortMalloc+0xae>
		{
			xWantedSize += heapSTRUCT_SIZE;
    3a36:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    3a38:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    3a3c:	bf1c      	itt	ne
    3a3e:	f024 0407 	bicne.w	r4, r4, #7
    3a42:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    3a44:	1e62      	subs	r2, r4, #1
    3a46:	f242 73f6 	movw	r3, #10230	; 0x27f6
    3a4a:	429a      	cmp	r2, r3
    3a4c:	d843      	bhi.n	3ad6 <pvPortMalloc+0xb2>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    3a4e:	4925      	ldr	r1, [pc, #148]	; (3ae4 <pvPortMalloc+0xc0>)
    3a50:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    3a52:	e017      	b.n	3a84 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    3a54:	4923      	ldr	r1, [pc, #140]	; (3ae4 <pvPortMalloc+0xc0>)
    3a56:	f101 0314 	add.w	r3, r1, #20
    3a5a:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    3a5e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    3a60:	2500      	movs	r5, #0
    3a62:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    3a64:	4a20      	ldr	r2, [pc, #128]	; (3ae8 <pvPortMalloc+0xc4>)
    3a66:	f242 70f8 	movw	r0, #10232	; 0x27f8
    3a6a:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    3a6e:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    3a72:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    3a74:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    3a78:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    3a7a:	2301      	movs	r3, #1
    3a7c:	608b      	str	r3, [r1, #8]
    3a7e:	e7d8      	b.n	3a32 <pvPortMalloc+0xe>
    3a80:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    3a82:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    3a84:	685a      	ldr	r2, [r3, #4]
    3a86:	4294      	cmp	r4, r2
    3a88:	d902      	bls.n	3a90 <pvPortMalloc+0x6c>
    3a8a:	681a      	ldr	r2, [r3, #0]
    3a8c:	2a00      	cmp	r2, #0
    3a8e:	d1f7      	bne.n	3a80 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    3a90:	4a16      	ldr	r2, [pc, #88]	; (3aec <pvPortMalloc+0xc8>)
    3a92:	4293      	cmp	r3, r2
    3a94:	d021      	beq.n	3ada <pvPortMalloc+0xb6>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    3a96:	680d      	ldr	r5, [r1, #0]
    3a98:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    3a9a:	681a      	ldr	r2, [r3, #0]
    3a9c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    3a9e:	685a      	ldr	r2, [r3, #4]
    3aa0:	1b12      	subs	r2, r2, r4
    3aa2:	2a10      	cmp	r2, #16
    3aa4:	d90c      	bls.n	3ac0 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    3aa6:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    3aa8:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    3aaa:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    3aac:	6874      	ldr	r4, [r6, #4]
    3aae:	490d      	ldr	r1, [pc, #52]	; (3ae4 <pvPortMalloc+0xc0>)
    3ab0:	e000      	b.n	3ab4 <pvPortMalloc+0x90>
    3ab2:	4611      	mov	r1, r2
    3ab4:	680a      	ldr	r2, [r1, #0]
    3ab6:	6850      	ldr	r0, [r2, #4]
    3ab8:	4284      	cmp	r4, r0
    3aba:	d8fa      	bhi.n	3ab2 <pvPortMalloc+0x8e>
    3abc:	6032      	str	r2, [r6, #0]
    3abe:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    3ac0:	490b      	ldr	r1, [pc, #44]	; (3af0 <pvPortMalloc+0xcc>)
    3ac2:	680a      	ldr	r2, [r1, #0]
    3ac4:	685b      	ldr	r3, [r3, #4]
    3ac6:	1ad2      	subs	r2, r2, r3
    3ac8:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    3aca:	4b0a      	ldr	r3, [pc, #40]	; (3af4 <pvPortMalloc+0xd0>)
    3acc:	4798      	blx	r3
}
    3ace:	4628      	mov	r0, r5
    3ad0:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
    3ad2:	2500      	movs	r5, #0
    3ad4:	e7f9      	b.n	3aca <pvPortMalloc+0xa6>
    3ad6:	2500      	movs	r5, #0
    3ad8:	e7f7      	b.n	3aca <pvPortMalloc+0xa6>
    3ada:	2500      	movs	r5, #0
    3adc:	e7f5      	b.n	3aca <pvPortMalloc+0xa6>
    3ade:	bf00      	nop
    3ae0:	0000485d 	.word	0x0000485d
    3ae4:	20000b08 	.word	0x20000b08
    3ae8:	20002cf8 	.word	0x20002cf8
    3aec:	20003314 	.word	0x20003314
    3af0:	20000124 	.word	0x20000124
    3af4:	000049a5 	.word	0x000049a5

00003af8 <vPortFree>:
	if( pv != NULL )
    3af8:	b1d0      	cbz	r0, 3b30 <vPortFree+0x38>
{
    3afa:	b570      	push	{r4, r5, r6, lr}
    3afc:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    3afe:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    3b02:	4b0c      	ldr	r3, [pc, #48]	; (3b34 <vPortFree+0x3c>)
    3b04:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    3b06:	f855 4c04 	ldr.w	r4, [r5, #-4]
    3b0a:	4a0b      	ldr	r2, [pc, #44]	; (3b38 <vPortFree+0x40>)
    3b0c:	e000      	b.n	3b10 <vPortFree+0x18>
    3b0e:	461a      	mov	r2, r3
    3b10:	6813      	ldr	r3, [r2, #0]
    3b12:	6859      	ldr	r1, [r3, #4]
    3b14:	428c      	cmp	r4, r1
    3b16:	d8fa      	bhi.n	3b0e <vPortFree+0x16>
    3b18:	f845 3c08 	str.w	r3, [r5, #-8]
    3b1c:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    3b1e:	4a07      	ldr	r2, [pc, #28]	; (3b3c <vPortFree+0x44>)
    3b20:	f855 3c04 	ldr.w	r3, [r5, #-4]
    3b24:	6811      	ldr	r1, [r2, #0]
    3b26:	440b      	add	r3, r1
    3b28:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    3b2a:	4b05      	ldr	r3, [pc, #20]	; (3b40 <vPortFree+0x48>)
    3b2c:	4798      	blx	r3
    3b2e:	bd70      	pop	{r4, r5, r6, pc}
    3b30:	4770      	bx	lr
    3b32:	bf00      	nop
    3b34:	0000485d 	.word	0x0000485d
    3b38:	20000b08 	.word	0x20000b08
    3b3c:	20000124 	.word	0x20000124
    3b40:	000049a5 	.word	0x000049a5

00003b44 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    3b44:	b510      	push	{r4, lr}
    3b46:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    3b48:	4b04      	ldr	r3, [pc, #16]	; (3b5c <prvIsQueueEmpty+0x18>)
    3b4a:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    3b4c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3b4e:	4b04      	ldr	r3, [pc, #16]	; (3b60 <prvIsQueueEmpty+0x1c>)
    3b50:	4798      	blx	r3

	return xReturn;
}
    3b52:	fab4 f084 	clz	r0, r4
    3b56:	0940      	lsrs	r0, r0, #5
    3b58:	bd10      	pop	{r4, pc}
    3b5a:	bf00      	nop
    3b5c:	00003775 	.word	0x00003775
    3b60:	000037b9 	.word	0x000037b9

00003b64 <prvCopyDataToQueue>:
{
    3b64:	b570      	push	{r4, r5, r6, lr}
    3b66:	4604      	mov	r4, r0
    3b68:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3b6a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    3b6c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3b6e:	b952      	cbnz	r2, 3b86 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    3b70:	6803      	ldr	r3, [r0, #0]
    3b72:	2b00      	cmp	r3, #0
    3b74:	d12a      	bne.n	3bcc <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    3b76:	6840      	ldr	r0, [r0, #4]
    3b78:	4b18      	ldr	r3, [pc, #96]	; (3bdc <prvCopyDataToQueue+0x78>)
    3b7a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    3b7c:	2300      	movs	r3, #0
    3b7e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    3b80:	3501      	adds	r5, #1
    3b82:	63a5      	str	r5, [r4, #56]	; 0x38
}
    3b84:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    3b86:	b96e      	cbnz	r6, 3ba4 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    3b88:	6880      	ldr	r0, [r0, #8]
    3b8a:	4b15      	ldr	r3, [pc, #84]	; (3be0 <prvCopyDataToQueue+0x7c>)
    3b8c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3b8e:	68a3      	ldr	r3, [r4, #8]
    3b90:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3b92:	4413      	add	r3, r2
    3b94:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    3b96:	6862      	ldr	r2, [r4, #4]
    3b98:	4293      	cmp	r3, r2
    3b9a:	d319      	bcc.n	3bd0 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3b9c:	6823      	ldr	r3, [r4, #0]
    3b9e:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    3ba0:	2000      	movs	r0, #0
    3ba2:	e7ed      	b.n	3b80 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    3ba4:	68c0      	ldr	r0, [r0, #12]
    3ba6:	4b0e      	ldr	r3, [pc, #56]	; (3be0 <prvCopyDataToQueue+0x7c>)
    3ba8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    3baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3bac:	425b      	negs	r3, r3
    3bae:	68e2      	ldr	r2, [r4, #12]
    3bb0:	441a      	add	r2, r3
    3bb2:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    3bb4:	6821      	ldr	r1, [r4, #0]
    3bb6:	428a      	cmp	r2, r1
    3bb8:	d202      	bcs.n	3bc0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    3bba:	6862      	ldr	r2, [r4, #4]
    3bbc:	4413      	add	r3, r2
    3bbe:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    3bc0:	2e02      	cmp	r6, #2
    3bc2:	d107      	bne.n	3bd4 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    3bc4:	b145      	cbz	r5, 3bd8 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    3bc6:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    3bc8:	2000      	movs	r0, #0
    3bca:	e7d9      	b.n	3b80 <prvCopyDataToQueue+0x1c>
    3bcc:	2000      	movs	r0, #0
    3bce:	e7d7      	b.n	3b80 <prvCopyDataToQueue+0x1c>
    3bd0:	2000      	movs	r0, #0
    3bd2:	e7d5      	b.n	3b80 <prvCopyDataToQueue+0x1c>
    3bd4:	2000      	movs	r0, #0
    3bd6:	e7d3      	b.n	3b80 <prvCopyDataToQueue+0x1c>
    3bd8:	2000      	movs	r0, #0
    3bda:	e7d1      	b.n	3b80 <prvCopyDataToQueue+0x1c>
    3bdc:	00004ef5 	.word	0x00004ef5
    3be0:	00005645 	.word	0x00005645

00003be4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    3be4:	b570      	push	{r4, r5, r6, lr}
    3be6:	b082      	sub	sp, #8
    3be8:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    3bea:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    3bec:	b164      	cbz	r4, 3c08 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    3bee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3bf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3bf2:	429a      	cmp	r2, r3
    3bf4:	d311      	bcc.n	3c1a <prvNotifyQueueSetContainer+0x36>
    3bf6:	f04f 0380 	mov.w	r3, #128	; 0x80
    3bfa:	f383 8811 	msr	BASEPRI, r3
    3bfe:	f3bf 8f6f 	isb	sy
    3c02:	f3bf 8f4f 	dsb	sy
    3c06:	e7fe      	b.n	3c06 <prvNotifyQueueSetContainer+0x22>
    3c08:	f04f 0380 	mov.w	r3, #128	; 0x80
    3c0c:	f383 8811 	msr	BASEPRI, r3
    3c10:	f3bf 8f6f 	isb	sy
    3c14:	f3bf 8f4f 	dsb	sy
    3c18:	e7fe      	b.n	3c18 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    3c1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3c1c:	4293      	cmp	r3, r2
    3c1e:	d803      	bhi.n	3c28 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    3c20:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    3c22:	4630      	mov	r0, r6
    3c24:	b002      	add	sp, #8
    3c26:	bd70      	pop	{r4, r5, r6, pc}
    3c28:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    3c2a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    3c2e:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    3c30:	a901      	add	r1, sp, #4
    3c32:	4620      	mov	r0, r4
    3c34:	4b0a      	ldr	r3, [pc, #40]	; (3c60 <prvNotifyQueueSetContainer+0x7c>)
    3c36:	4798      	blx	r3
    3c38:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    3c3a:	f1b5 3fff 	cmp.w	r5, #4294967295
    3c3e:	d10a      	bne.n	3c56 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    3c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3c42:	2b00      	cmp	r3, #0
    3c44:	d0ed      	beq.n	3c22 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    3c46:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3c4a:	4b06      	ldr	r3, [pc, #24]	; (3c64 <prvNotifyQueueSetContainer+0x80>)
    3c4c:	4798      	blx	r3
    3c4e:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    3c50:	bf18      	it	ne
    3c52:	2601      	movne	r6, #1
    3c54:	e7e5      	b.n	3c22 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    3c56:	1c6b      	adds	r3, r5, #1
    3c58:	b25b      	sxtb	r3, r3
    3c5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    3c5e:	e7e0      	b.n	3c22 <prvNotifyQueueSetContainer+0x3e>
    3c60:	00003b65 	.word	0x00003b65
    3c64:	00004cf1 	.word	0x00004cf1

00003c68 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    3c68:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3c6a:	b172      	cbz	r2, 3c8a <prvCopyDataFromQueue+0x22>
{
    3c6c:	b510      	push	{r4, lr}
    3c6e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3c70:	68c4      	ldr	r4, [r0, #12]
    3c72:	4414      	add	r4, r2
    3c74:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    3c76:	6840      	ldr	r0, [r0, #4]
    3c78:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3c7a:	bf24      	itt	cs
    3c7c:	6818      	ldrcs	r0, [r3, #0]
    3c7e:	60d8      	strcs	r0, [r3, #12]
    3c80:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    3c82:	68d9      	ldr	r1, [r3, #12]
    3c84:	4b01      	ldr	r3, [pc, #4]	; (3c8c <prvCopyDataFromQueue+0x24>)
    3c86:	4798      	blx	r3
    3c88:	bd10      	pop	{r4, pc}
    3c8a:	4770      	bx	lr
    3c8c:	00005645 	.word	0x00005645

00003c90 <prvUnlockQueue>:
{
    3c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c94:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    3c96:	4b23      	ldr	r3, [pc, #140]	; (3d24 <prvUnlockQueue+0x94>)
    3c98:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    3c9a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    3c9e:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3ca0:	2c00      	cmp	r4, #0
    3ca2:	dd19      	ble.n	3cd8 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3ca4:	4e20      	ldr	r6, [pc, #128]	; (3d28 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    3ca6:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3d34 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3caa:	4f20      	ldr	r7, [pc, #128]	; (3d2c <prvUnlockQueue+0x9c>)
    3cac:	e008      	b.n	3cc0 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3cb0:	b193      	cbz	r3, 3cd8 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3cb2:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3cb6:	47b8      	blx	r7
    3cb8:	b960      	cbnz	r0, 3cd4 <prvUnlockQueue+0x44>
    3cba:	3c01      	subs	r4, #1
    3cbc:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3cbe:	b15c      	cbz	r4, 3cd8 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    3cc0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3cc2:	2b00      	cmp	r3, #0
    3cc4:	d0f3      	beq.n	3cae <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3cc6:	2100      	movs	r1, #0
    3cc8:	4628      	mov	r0, r5
    3cca:	47b0      	blx	r6
    3ccc:	2800      	cmp	r0, #0
    3cce:	d0f4      	beq.n	3cba <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    3cd0:	47c0      	blx	r8
    3cd2:	e7f2      	b.n	3cba <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    3cd4:	47c0      	blx	r8
    3cd6:	e7f0      	b.n	3cba <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    3cd8:	23ff      	movs	r3, #255	; 0xff
    3cda:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    3cde:	4b14      	ldr	r3, [pc, #80]	; (3d30 <prvUnlockQueue+0xa0>)
    3ce0:	4798      	blx	r3
	taskENTER_CRITICAL();
    3ce2:	4b10      	ldr	r3, [pc, #64]	; (3d24 <prvUnlockQueue+0x94>)
    3ce4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    3ce6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    3cea:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3cec:	2c00      	cmp	r4, #0
    3cee:	dd12      	ble.n	3d16 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3cf0:	692b      	ldr	r3, [r5, #16]
    3cf2:	b183      	cbz	r3, 3d16 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3cf4:	f105 0710 	add.w	r7, r5, #16
    3cf8:	4e0c      	ldr	r6, [pc, #48]	; (3d2c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    3cfa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3d34 <prvUnlockQueue+0xa4>
    3cfe:	e004      	b.n	3d0a <prvUnlockQueue+0x7a>
    3d00:	3c01      	subs	r4, #1
    3d02:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3d04:	b13c      	cbz	r4, 3d16 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3d06:	692b      	ldr	r3, [r5, #16]
    3d08:	b12b      	cbz	r3, 3d16 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3d0a:	4638      	mov	r0, r7
    3d0c:	47b0      	blx	r6
    3d0e:	2800      	cmp	r0, #0
    3d10:	d0f6      	beq.n	3d00 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    3d12:	47c0      	blx	r8
    3d14:	e7f4      	b.n	3d00 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    3d16:	23ff      	movs	r3, #255	; 0xff
    3d18:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    3d1c:	4b04      	ldr	r3, [pc, #16]	; (3d30 <prvUnlockQueue+0xa0>)
    3d1e:	4798      	blx	r3
    3d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d24:	00003775 	.word	0x00003775
    3d28:	00003be5 	.word	0x00003be5
    3d2c:	00004cf1 	.word	0x00004cf1
    3d30:	000037b9 	.word	0x000037b9
    3d34:	00004e21 	.word	0x00004e21

00003d38 <xQueueGenericReset>:
{
    3d38:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    3d3a:	b330      	cbz	r0, 3d8a <xQueueGenericReset+0x52>
    3d3c:	4604      	mov	r4, r0
    3d3e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    3d40:	4b1c      	ldr	r3, [pc, #112]	; (3db4 <xQueueGenericReset+0x7c>)
    3d42:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    3d44:	6822      	ldr	r2, [r4, #0]
    3d46:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3d48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3d4a:	fb03 f301 	mul.w	r3, r3, r1
    3d4e:	18d0      	adds	r0, r2, r3
    3d50:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    3d52:	2000      	movs	r0, #0
    3d54:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    3d56:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    3d58:	1a5b      	subs	r3, r3, r1
    3d5a:	4413      	add	r3, r2
    3d5c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    3d5e:	23ff      	movs	r3, #255	; 0xff
    3d60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    3d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    3d68:	b9c5      	cbnz	r5, 3d9c <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3d6a:	6923      	ldr	r3, [r4, #16]
    3d6c:	b1eb      	cbz	r3, 3daa <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3d6e:	f104 0010 	add.w	r0, r4, #16
    3d72:	4b11      	ldr	r3, [pc, #68]	; (3db8 <xQueueGenericReset+0x80>)
    3d74:	4798      	blx	r3
    3d76:	b1c0      	cbz	r0, 3daa <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    3d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3d7c:	4b0f      	ldr	r3, [pc, #60]	; (3dbc <xQueueGenericReset+0x84>)
    3d7e:	601a      	str	r2, [r3, #0]
    3d80:	f3bf 8f4f 	dsb	sy
    3d84:	f3bf 8f6f 	isb	sy
    3d88:	e00f      	b.n	3daa <xQueueGenericReset+0x72>
    3d8a:	f04f 0380 	mov.w	r3, #128	; 0x80
    3d8e:	f383 8811 	msr	BASEPRI, r3
    3d92:	f3bf 8f6f 	isb	sy
    3d96:	f3bf 8f4f 	dsb	sy
    3d9a:	e7fe      	b.n	3d9a <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    3d9c:	f104 0010 	add.w	r0, r4, #16
    3da0:	4d07      	ldr	r5, [pc, #28]	; (3dc0 <xQueueGenericReset+0x88>)
    3da2:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    3da4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3da8:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    3daa:	4b06      	ldr	r3, [pc, #24]	; (3dc4 <xQueueGenericReset+0x8c>)
    3dac:	4798      	blx	r3
}
    3dae:	2001      	movs	r0, #1
    3db0:	bd38      	pop	{r3, r4, r5, pc}
    3db2:	bf00      	nop
    3db4:	00003775 	.word	0x00003775
    3db8:	00004cf1 	.word	0x00004cf1
    3dbc:	e000ed04 	.word	0xe000ed04
    3dc0:	00003615 	.word	0x00003615
    3dc4:	000037b9 	.word	0x000037b9

00003dc8 <xQueueGenericCreate>:
{
    3dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    3dca:	b940      	cbnz	r0, 3dde <xQueueGenericCreate+0x16>
    3dcc:	f04f 0380 	mov.w	r3, #128	; 0x80
    3dd0:	f383 8811 	msr	BASEPRI, r3
    3dd4:	f3bf 8f6f 	isb	sy
    3dd8:	f3bf 8f4f 	dsb	sy
    3ddc:	e7fe      	b.n	3ddc <xQueueGenericCreate+0x14>
    3dde:	4606      	mov	r6, r0
    3de0:	4617      	mov	r7, r2
    3de2:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    3de4:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    3de8:	3054      	adds	r0, #84	; 0x54
    3dea:	4b0b      	ldr	r3, [pc, #44]	; (3e18 <xQueueGenericCreate+0x50>)
    3dec:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    3dee:	4604      	mov	r4, r0
    3df0:	b178      	cbz	r0, 3e12 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    3df2:	b11d      	cbz	r5, 3dfc <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    3df4:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    3df8:	6003      	str	r3, [r0, #0]
    3dfa:	e000      	b.n	3dfe <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    3dfc:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    3dfe:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    3e00:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    3e02:	2101      	movs	r1, #1
    3e04:	4620      	mov	r0, r4
    3e06:	4b05      	ldr	r3, [pc, #20]	; (3e1c <xQueueGenericCreate+0x54>)
    3e08:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    3e0a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    3e0e:	2300      	movs	r3, #0
    3e10:	64a3      	str	r3, [r4, #72]	; 0x48
}
    3e12:	4620      	mov	r0, r4
    3e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e16:	bf00      	nop
    3e18:	00003a25 	.word	0x00003a25
    3e1c:	00003d39 	.word	0x00003d39

00003e20 <xQueueGenericSend>:
{
    3e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3e24:	b085      	sub	sp, #20
    3e26:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    3e28:	b198      	cbz	r0, 3e52 <xQueueGenericSend+0x32>
    3e2a:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3e2c:	b1d1      	cbz	r1, 3e64 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3e2e:	2b02      	cmp	r3, #2
    3e30:	d024      	beq.n	3e7c <xQueueGenericSend+0x5c>
    3e32:	461e      	mov	r6, r3
    3e34:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3e36:	4b64      	ldr	r3, [pc, #400]	; (3fc8 <xQueueGenericSend+0x1a8>)
    3e38:	4798      	blx	r3
    3e3a:	bb58      	cbnz	r0, 3e94 <xQueueGenericSend+0x74>
    3e3c:	9b01      	ldr	r3, [sp, #4]
    3e3e:	b38b      	cbz	r3, 3ea4 <xQueueGenericSend+0x84>
    3e40:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e44:	f383 8811 	msr	BASEPRI, r3
    3e48:	f3bf 8f6f 	isb	sy
    3e4c:	f3bf 8f4f 	dsb	sy
    3e50:	e7fe      	b.n	3e50 <xQueueGenericSend+0x30>
    3e52:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e56:	f383 8811 	msr	BASEPRI, r3
    3e5a:	f3bf 8f6f 	isb	sy
    3e5e:	f3bf 8f4f 	dsb	sy
    3e62:	e7fe      	b.n	3e62 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3e64:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3e66:	2a00      	cmp	r2, #0
    3e68:	d0e1      	beq.n	3e2e <xQueueGenericSend+0xe>
    3e6a:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e6e:	f383 8811 	msr	BASEPRI, r3
    3e72:	f3bf 8f6f 	isb	sy
    3e76:	f3bf 8f4f 	dsb	sy
    3e7a:	e7fe      	b.n	3e7a <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3e7c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3e7e:	2a01      	cmp	r2, #1
    3e80:	d0d7      	beq.n	3e32 <xQueueGenericSend+0x12>
    3e82:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e86:	f383 8811 	msr	BASEPRI, r3
    3e8a:	f3bf 8f6f 	isb	sy
    3e8e:	f3bf 8f4f 	dsb	sy
    3e92:	e7fe      	b.n	3e92 <xQueueGenericSend+0x72>
    3e94:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    3e96:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3ff4 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3e9a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 3ff8 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    3e9e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 3fd4 <xQueueGenericSend+0x1b4>
    3ea2:	e041      	b.n	3f28 <xQueueGenericSend+0x108>
    3ea4:	2500      	movs	r5, #0
    3ea6:	e7f6      	b.n	3e96 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3ea8:	4632      	mov	r2, r6
    3eaa:	4639      	mov	r1, r7
    3eac:	4620      	mov	r0, r4
    3eae:	4b47      	ldr	r3, [pc, #284]	; (3fcc <xQueueGenericSend+0x1ac>)
    3eb0:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    3eb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3eb4:	b193      	cbz	r3, 3edc <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3eb6:	4631      	mov	r1, r6
    3eb8:	4620      	mov	r0, r4
    3eba:	4b45      	ldr	r3, [pc, #276]	; (3fd0 <xQueueGenericSend+0x1b0>)
    3ebc:	4798      	blx	r3
    3ebe:	b138      	cbz	r0, 3ed0 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3ec4:	4b43      	ldr	r3, [pc, #268]	; (3fd4 <xQueueGenericSend+0x1b4>)
    3ec6:	601a      	str	r2, [r3, #0]
    3ec8:	f3bf 8f4f 	dsb	sy
    3ecc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    3ed0:	4b41      	ldr	r3, [pc, #260]	; (3fd8 <xQueueGenericSend+0x1b8>)
    3ed2:	4798      	blx	r3
				return pdPASS;
    3ed4:	2001      	movs	r0, #1
}
    3ed6:	b005      	add	sp, #20
    3ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3edc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ede:	b173      	cbz	r3, 3efe <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3ee0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3ee4:	4b3d      	ldr	r3, [pc, #244]	; (3fdc <xQueueGenericSend+0x1bc>)
    3ee6:	4798      	blx	r3
    3ee8:	2800      	cmp	r0, #0
    3eea:	d0f1      	beq.n	3ed0 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    3eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3ef0:	4b38      	ldr	r3, [pc, #224]	; (3fd4 <xQueueGenericSend+0x1b4>)
    3ef2:	601a      	str	r2, [r3, #0]
    3ef4:	f3bf 8f4f 	dsb	sy
    3ef8:	f3bf 8f6f 	isb	sy
    3efc:	e7e8      	b.n	3ed0 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    3efe:	2800      	cmp	r0, #0
    3f00:	d0e6      	beq.n	3ed0 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3f06:	4b33      	ldr	r3, [pc, #204]	; (3fd4 <xQueueGenericSend+0x1b4>)
    3f08:	601a      	str	r2, [r3, #0]
    3f0a:	f3bf 8f4f 	dsb	sy
    3f0e:	f3bf 8f6f 	isb	sy
    3f12:	e7dd      	b.n	3ed0 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    3f14:	4b30      	ldr	r3, [pc, #192]	; (3fd8 <xQueueGenericSend+0x1b8>)
    3f16:	4798      	blx	r3
					return errQUEUE_FULL;
    3f18:	2000      	movs	r0, #0
    3f1a:	e7dc      	b.n	3ed6 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    3f1c:	4620      	mov	r0, r4
    3f1e:	4b30      	ldr	r3, [pc, #192]	; (3fe0 <xQueueGenericSend+0x1c0>)
    3f20:	4798      	blx	r3
				(void)xTaskResumeAll();
    3f22:	4b30      	ldr	r3, [pc, #192]	; (3fe4 <xQueueGenericSend+0x1c4>)
    3f24:	4798      	blx	r3
    3f26:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    3f28:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3f2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3f2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3f2e:	429a      	cmp	r2, r3
    3f30:	d3ba      	bcc.n	3ea8 <xQueueGenericSend+0x88>
    3f32:	2e02      	cmp	r6, #2
    3f34:	d0b8      	beq.n	3ea8 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    3f36:	9b01      	ldr	r3, [sp, #4]
    3f38:	2b00      	cmp	r3, #0
    3f3a:	d0eb      	beq.n	3f14 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    3f3c:	b90d      	cbnz	r5, 3f42 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3f3e:	a802      	add	r0, sp, #8
    3f40:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    3f42:	4b25      	ldr	r3, [pc, #148]	; (3fd8 <xQueueGenericSend+0x1b8>)
    3f44:	4798      	blx	r3
		vTaskSuspendAll();
    3f46:	4b28      	ldr	r3, [pc, #160]	; (3fe8 <xQueueGenericSend+0x1c8>)
    3f48:	4798      	blx	r3
		prvLockQueue(pxQueue);
    3f4a:	47c0      	blx	r8
    3f4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3f50:	b25b      	sxtb	r3, r3
    3f52:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f56:	bf04      	itt	eq
    3f58:	2300      	moveq	r3, #0
    3f5a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    3f5e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3f62:	b25b      	sxtb	r3, r3
    3f64:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f68:	bf04      	itt	eq
    3f6a:	2300      	moveq	r3, #0
    3f6c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    3f70:	4b19      	ldr	r3, [pc, #100]	; (3fd8 <xQueueGenericSend+0x1b8>)
    3f72:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3f74:	a901      	add	r1, sp, #4
    3f76:	a802      	add	r0, sp, #8
    3f78:	4b1c      	ldr	r3, [pc, #112]	; (3fec <xQueueGenericSend+0x1cc>)
    3f7a:	4798      	blx	r3
    3f7c:	b9e0      	cbnz	r0, 3fb8 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    3f7e:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    3f80:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    3f84:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    3f86:	4b14      	ldr	r3, [pc, #80]	; (3fd8 <xQueueGenericSend+0x1b8>)
    3f88:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    3f8a:	45ab      	cmp	fp, r5
    3f8c:	d1c6      	bne.n	3f1c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    3f8e:	9901      	ldr	r1, [sp, #4]
    3f90:	f104 0010 	add.w	r0, r4, #16
    3f94:	4b16      	ldr	r3, [pc, #88]	; (3ff0 <xQueueGenericSend+0x1d0>)
    3f96:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3f98:	4620      	mov	r0, r4
    3f9a:	4b11      	ldr	r3, [pc, #68]	; (3fe0 <xQueueGenericSend+0x1c0>)
    3f9c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    3f9e:	4b11      	ldr	r3, [pc, #68]	; (3fe4 <xQueueGenericSend+0x1c4>)
    3fa0:	4798      	blx	r3
    3fa2:	2800      	cmp	r0, #0
    3fa4:	d1bf      	bne.n	3f26 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    3fa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3faa:	f8c9 3000 	str.w	r3, [r9]
    3fae:	f3bf 8f4f 	dsb	sy
    3fb2:	f3bf 8f6f 	isb	sy
    3fb6:	e7b6      	b.n	3f26 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    3fb8:	4620      	mov	r0, r4
    3fba:	4b09      	ldr	r3, [pc, #36]	; (3fe0 <xQueueGenericSend+0x1c0>)
    3fbc:	4798      	blx	r3
			(void)xTaskResumeAll();
    3fbe:	4b09      	ldr	r3, [pc, #36]	; (3fe4 <xQueueGenericSend+0x1c4>)
    3fc0:	4798      	blx	r3
			return errQUEUE_FULL;
    3fc2:	2000      	movs	r0, #0
    3fc4:	e787      	b.n	3ed6 <xQueueGenericSend+0xb6>
    3fc6:	bf00      	nop
    3fc8:	00004e31 	.word	0x00004e31
    3fcc:	00003b65 	.word	0x00003b65
    3fd0:	00003be5 	.word	0x00003be5
    3fd4:	e000ed04 	.word	0xe000ed04
    3fd8:	000037b9 	.word	0x000037b9
    3fdc:	00004cf1 	.word	0x00004cf1
    3fe0:	00003c91 	.word	0x00003c91
    3fe4:	000049a5 	.word	0x000049a5
    3fe8:	0000485d 	.word	0x0000485d
    3fec:	00004d95 	.word	0x00004d95
    3ff0:	00004c71 	.word	0x00004c71
    3ff4:	00003775 	.word	0x00003775
    3ff8:	00004d81 	.word	0x00004d81

00003ffc <xQueueCreateMutex>:
{
    3ffc:	b538      	push	{r3, r4, r5, lr}
	pxNewQueue = (Queue_t *)xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType);
    3ffe:	4602      	mov	r2, r0
    4000:	2100      	movs	r1, #0
    4002:	2001      	movs	r0, #1
    4004:	4b06      	ldr	r3, [pc, #24]	; (4020 <xQueueCreateMutex+0x24>)
    4006:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    4008:	4604      	mov	r4, r0
    400a:	b138      	cbz	r0, 401c <xQueueCreateMutex+0x20>
		pxNewQueue->pxMutexHolder = NULL;
    400c:	2100      	movs	r1, #0
    400e:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    4010:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    4012:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    4014:	460b      	mov	r3, r1
    4016:	460a      	mov	r2, r1
    4018:	4d02      	ldr	r5, [pc, #8]	; (4024 <xQueueCreateMutex+0x28>)
    401a:	47a8      	blx	r5
}
    401c:	4620      	mov	r0, r4
    401e:	bd38      	pop	{r3, r4, r5, pc}
    4020:	00003dc9 	.word	0x00003dc9
    4024:	00003e21 	.word	0x00003e21

00004028 <xQueueGenericSendFromISR>:
{
    4028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    402c:	2800      	cmp	r0, #0
    402e:	d036      	beq.n	409e <xQueueGenericSendFromISR+0x76>
    4030:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4032:	2900      	cmp	r1, #0
    4034:	d03c      	beq.n	40b0 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4036:	2b02      	cmp	r3, #2
    4038:	d046      	beq.n	40c8 <xQueueGenericSendFromISR+0xa0>
    403a:	461f      	mov	r7, r3
    403c:	4690      	mov	r8, r2
    403e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    4040:	4b37      	ldr	r3, [pc, #220]	; (4120 <xQueueGenericSendFromISR+0xf8>)
    4042:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    4044:	f3ef 8611 	mrs	r6, BASEPRI
    4048:	f04f 0380 	mov.w	r3, #128	; 0x80
    404c:	f383 8811 	msr	BASEPRI, r3
    4050:	f3bf 8f6f 	isb	sy
    4054:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4058:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    405a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    405c:	429a      	cmp	r2, r3
    405e:	d301      	bcc.n	4064 <xQueueGenericSendFromISR+0x3c>
    4060:	2f02      	cmp	r7, #2
    4062:	d151      	bne.n	4108 <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    4064:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    4068:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    406a:	463a      	mov	r2, r7
    406c:	4649      	mov	r1, r9
    406e:	4620      	mov	r0, r4
    4070:	4b2c      	ldr	r3, [pc, #176]	; (4124 <xQueueGenericSendFromISR+0xfc>)
    4072:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    4074:	f1b5 3fff 	cmp.w	r5, #4294967295
    4078:	d140      	bne.n	40fc <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    407a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    407c:	b383      	cbz	r3, 40e0 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    407e:	4639      	mov	r1, r7
    4080:	4620      	mov	r0, r4
    4082:	4b29      	ldr	r3, [pc, #164]	; (4128 <xQueueGenericSendFromISR+0x100>)
    4084:	4798      	blx	r3
    4086:	2800      	cmp	r0, #0
    4088:	d040      	beq.n	410c <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    408a:	f1b8 0f00 	cmp.w	r8, #0
    408e:	d03f      	beq.n	4110 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4090:	2001      	movs	r0, #1
    4092:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4096:	f386 8811 	msr	BASEPRI, r6
}
    409a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    409e:	f04f 0380 	mov.w	r3, #128	; 0x80
    40a2:	f383 8811 	msr	BASEPRI, r3
    40a6:	f3bf 8f6f 	isb	sy
    40aa:	f3bf 8f4f 	dsb	sy
    40ae:	e7fe      	b.n	40ae <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    40b0:	6c00      	ldr	r0, [r0, #64]	; 0x40
    40b2:	2800      	cmp	r0, #0
    40b4:	d0bf      	beq.n	4036 <xQueueGenericSendFromISR+0xe>
    40b6:	f04f 0380 	mov.w	r3, #128	; 0x80
    40ba:	f383 8811 	msr	BASEPRI, r3
    40be:	f3bf 8f6f 	isb	sy
    40c2:	f3bf 8f4f 	dsb	sy
    40c6:	e7fe      	b.n	40c6 <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    40c8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    40ca:	2801      	cmp	r0, #1
    40cc:	d0b5      	beq.n	403a <xQueueGenericSendFromISR+0x12>
    40ce:	f04f 0380 	mov.w	r3, #128	; 0x80
    40d2:	f383 8811 	msr	BASEPRI, r3
    40d6:	f3bf 8f6f 	isb	sy
    40da:	f3bf 8f4f 	dsb	sy
    40de:	e7fe      	b.n	40de <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    40e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    40e2:	b1bb      	cbz	r3, 4114 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    40e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    40e8:	4b10      	ldr	r3, [pc, #64]	; (412c <xQueueGenericSendFromISR+0x104>)
    40ea:	4798      	blx	r3
    40ec:	b1a0      	cbz	r0, 4118 <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    40ee:	f1b8 0f00 	cmp.w	r8, #0
    40f2:	d013      	beq.n	411c <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    40f4:	2001      	movs	r0, #1
    40f6:	f8c8 0000 	str.w	r0, [r8]
    40fa:	e7cc      	b.n	4096 <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    40fc:	1c6b      	adds	r3, r5, #1
    40fe:	b25b      	sxtb	r3, r3
    4100:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    4104:	2001      	movs	r0, #1
    4106:	e7c6      	b.n	4096 <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    4108:	2000      	movs	r0, #0
    410a:	e7c4      	b.n	4096 <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    410c:	2001      	movs	r0, #1
    410e:	e7c2      	b.n	4096 <xQueueGenericSendFromISR+0x6e>
    4110:	2001      	movs	r0, #1
    4112:	e7c0      	b.n	4096 <xQueueGenericSendFromISR+0x6e>
    4114:	2001      	movs	r0, #1
    4116:	e7be      	b.n	4096 <xQueueGenericSendFromISR+0x6e>
    4118:	2001      	movs	r0, #1
    411a:	e7bc      	b.n	4096 <xQueueGenericSendFromISR+0x6e>
    411c:	2001      	movs	r0, #1
    411e:	e7ba      	b.n	4096 <xQueueGenericSendFromISR+0x6e>
    4120:	000039cd 	.word	0x000039cd
    4124:	00003b65 	.word	0x00003b65
    4128:	00003be5 	.word	0x00003be5
    412c:	00004cf1 	.word	0x00004cf1

00004130 <xQueueReceive>:
{
    4130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4134:	b084      	sub	sp, #16
    4136:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    4138:	b180      	cbz	r0, 415c <xQueueReceive+0x2c>
    413a:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    413c:	b1b9      	cbz	r1, 416e <xQueueReceive+0x3e>
    413e:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4140:	4b50      	ldr	r3, [pc, #320]	; (4284 <xQueueReceive+0x154>)
    4142:	4798      	blx	r3
    4144:	b9f8      	cbnz	r0, 4186 <xQueueReceive+0x56>
    4146:	9b01      	ldr	r3, [sp, #4]
    4148:	b32b      	cbz	r3, 4196 <xQueueReceive+0x66>
    414a:	f04f 0380 	mov.w	r3, #128	; 0x80
    414e:	f383 8811 	msr	BASEPRI, r3
    4152:	f3bf 8f6f 	isb	sy
    4156:	f3bf 8f4f 	dsb	sy
    415a:	e7fe      	b.n	415a <xQueueReceive+0x2a>
    415c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4160:	f383 8811 	msr	BASEPRI, r3
    4164:	f3bf 8f6f 	isb	sy
    4168:	f3bf 8f4f 	dsb	sy
    416c:	e7fe      	b.n	416c <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    416e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    4170:	2b00      	cmp	r3, #0
    4172:	d0e4      	beq.n	413e <xQueueReceive+0xe>
    4174:	f04f 0380 	mov.w	r3, #128	; 0x80
    4178:	f383 8811 	msr	BASEPRI, r3
    417c:	f3bf 8f6f 	isb	sy
    4180:	f3bf 8f4f 	dsb	sy
    4184:	e7fe      	b.n	4184 <xQueueReceive+0x54>
    4186:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    4188:	f8df 8124 	ldr.w	r8, [pc, #292]	; 42b0 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    418c:	f8df a124 	ldr.w	sl, [pc, #292]	; 42b4 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    4190:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4290 <xQueueReceive+0x160>
    4194:	e029      	b.n	41ea <xQueueReceive+0xba>
    4196:	2700      	movs	r7, #0
    4198:	e7f6      	b.n	4188 <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    419a:	4631      	mov	r1, r6
    419c:	4620      	mov	r0, r4
    419e:	4b3a      	ldr	r3, [pc, #232]	; (4288 <xQueueReceive+0x158>)
    41a0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    41a2:	3d01      	subs	r5, #1
    41a4:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    41a6:	6923      	ldr	r3, [r4, #16]
    41a8:	b163      	cbz	r3, 41c4 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    41aa:	f104 0010 	add.w	r0, r4, #16
    41ae:	4b37      	ldr	r3, [pc, #220]	; (428c <xQueueReceive+0x15c>)
    41b0:	4798      	blx	r3
    41b2:	b138      	cbz	r0, 41c4 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    41b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    41b8:	4b35      	ldr	r3, [pc, #212]	; (4290 <xQueueReceive+0x160>)
    41ba:	601a      	str	r2, [r3, #0]
    41bc:	f3bf 8f4f 	dsb	sy
    41c0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    41c4:	4b33      	ldr	r3, [pc, #204]	; (4294 <xQueueReceive+0x164>)
    41c6:	4798      	blx	r3
				return pdPASS;
    41c8:	2001      	movs	r0, #1
}
    41ca:	b004      	add	sp, #16
    41cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    41d0:	4b30      	ldr	r3, [pc, #192]	; (4294 <xQueueReceive+0x164>)
    41d2:	4798      	blx	r3
					return errQUEUE_EMPTY;
    41d4:	2000      	movs	r0, #0
    41d6:	e7f8      	b.n	41ca <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    41d8:	a802      	add	r0, sp, #8
    41da:	47d0      	blx	sl
    41dc:	e00e      	b.n	41fc <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    41de:	4620      	mov	r0, r4
    41e0:	4b2d      	ldr	r3, [pc, #180]	; (4298 <xQueueReceive+0x168>)
    41e2:	4798      	blx	r3
				(void)xTaskResumeAll();
    41e4:	4b2d      	ldr	r3, [pc, #180]	; (429c <xQueueReceive+0x16c>)
    41e6:	4798      	blx	r3
    41e8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    41ea:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    41ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    41ee:	2d00      	cmp	r5, #0
    41f0:	d1d3      	bne.n	419a <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    41f2:	9b01      	ldr	r3, [sp, #4]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d0eb      	beq.n	41d0 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    41f8:	2f00      	cmp	r7, #0
    41fa:	d0ed      	beq.n	41d8 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    41fc:	4b25      	ldr	r3, [pc, #148]	; (4294 <xQueueReceive+0x164>)
    41fe:	4798      	blx	r3
		vTaskSuspendAll();
    4200:	4b27      	ldr	r3, [pc, #156]	; (42a0 <xQueueReceive+0x170>)
    4202:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4204:	47c0      	blx	r8
    4206:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    420a:	b25b      	sxtb	r3, r3
    420c:	f1b3 3fff 	cmp.w	r3, #4294967295
    4210:	bf04      	itt	eq
    4212:	2300      	moveq	r3, #0
    4214:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4218:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    421c:	b25b      	sxtb	r3, r3
    421e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4222:	bf04      	itt	eq
    4224:	2300      	moveq	r3, #0
    4226:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    422a:	4b1a      	ldr	r3, [pc, #104]	; (4294 <xQueueReceive+0x164>)
    422c:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    422e:	a901      	add	r1, sp, #4
    4230:	a802      	add	r0, sp, #8
    4232:	4b1c      	ldr	r3, [pc, #112]	; (42a4 <xQueueReceive+0x174>)
    4234:	4798      	blx	r3
    4236:	b9c8      	cbnz	r0, 426c <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4238:	4620      	mov	r0, r4
    423a:	4b1b      	ldr	r3, [pc, #108]	; (42a8 <xQueueReceive+0x178>)
    423c:	4798      	blx	r3
    423e:	2800      	cmp	r0, #0
    4240:	d0cd      	beq.n	41de <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    4242:	9901      	ldr	r1, [sp, #4]
    4244:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4248:	4b18      	ldr	r3, [pc, #96]	; (42ac <xQueueReceive+0x17c>)
    424a:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    424c:	4620      	mov	r0, r4
    424e:	4b12      	ldr	r3, [pc, #72]	; (4298 <xQueueReceive+0x168>)
    4250:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    4252:	4b12      	ldr	r3, [pc, #72]	; (429c <xQueueReceive+0x16c>)
    4254:	4798      	blx	r3
    4256:	2800      	cmp	r0, #0
    4258:	d1c6      	bne.n	41e8 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    425a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    425e:	f8c9 3000 	str.w	r3, [r9]
    4262:	f3bf 8f4f 	dsb	sy
    4266:	f3bf 8f6f 	isb	sy
    426a:	e7bd      	b.n	41e8 <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    426c:	4620      	mov	r0, r4
    426e:	4b0a      	ldr	r3, [pc, #40]	; (4298 <xQueueReceive+0x168>)
    4270:	4798      	blx	r3
			(void)xTaskResumeAll();
    4272:	4b0a      	ldr	r3, [pc, #40]	; (429c <xQueueReceive+0x16c>)
    4274:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4276:	4620      	mov	r0, r4
    4278:	4b0b      	ldr	r3, [pc, #44]	; (42a8 <xQueueReceive+0x178>)
    427a:	4798      	blx	r3
    427c:	2800      	cmp	r0, #0
    427e:	d0b3      	beq.n	41e8 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    4280:	2000      	movs	r0, #0
    4282:	e7a2      	b.n	41ca <xQueueReceive+0x9a>
    4284:	00004e31 	.word	0x00004e31
    4288:	00003c69 	.word	0x00003c69
    428c:	00004cf1 	.word	0x00004cf1
    4290:	e000ed04 	.word	0xe000ed04
    4294:	000037b9 	.word	0x000037b9
    4298:	00003c91 	.word	0x00003c91
    429c:	000049a5 	.word	0x000049a5
    42a0:	0000485d 	.word	0x0000485d
    42a4:	00004d95 	.word	0x00004d95
    42a8:	00003b45 	.word	0x00003b45
    42ac:	00004c71 	.word	0x00004c71
    42b0:	00003775 	.word	0x00003775
    42b4:	00004d81 	.word	0x00004d81

000042b8 <xQueueSemaphoreTake>:
{
    42b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    42bc:	b085      	sub	sp, #20
    42be:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    42c0:	b158      	cbz	r0, 42da <xQueueSemaphoreTake+0x22>
    42c2:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    42c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    42c6:	b18b      	cbz	r3, 42ec <xQueueSemaphoreTake+0x34>
    42c8:	f04f 0380 	mov.w	r3, #128	; 0x80
    42cc:	f383 8811 	msr	BASEPRI, r3
    42d0:	f3bf 8f6f 	isb	sy
    42d4:	f3bf 8f4f 	dsb	sy
    42d8:	e7fe      	b.n	42d8 <xQueueSemaphoreTake+0x20>
    42da:	f04f 0380 	mov.w	r3, #128	; 0x80
    42de:	f383 8811 	msr	BASEPRI, r3
    42e2:	f3bf 8f6f 	isb	sy
    42e6:	f3bf 8f4f 	dsb	sy
    42ea:	e7fe      	b.n	42ea <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    42ec:	4b5b      	ldr	r3, [pc, #364]	; (445c <xQueueSemaphoreTake+0x1a4>)
    42ee:	4798      	blx	r3
    42f0:	b950      	cbnz	r0, 4308 <xQueueSemaphoreTake+0x50>
    42f2:	9b01      	ldr	r3, [sp, #4]
    42f4:	b183      	cbz	r3, 4318 <xQueueSemaphoreTake+0x60>
    42f6:	f04f 0380 	mov.w	r3, #128	; 0x80
    42fa:	f383 8811 	msr	BASEPRI, r3
    42fe:	f3bf 8f6f 	isb	sy
    4302:	f3bf 8f4f 	dsb	sy
    4306:	e7fe      	b.n	4306 <xQueueSemaphoreTake+0x4e>
    4308:	2500      	movs	r5, #0
    430a:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    430c:	4e54      	ldr	r6, [pc, #336]	; (4460 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    430e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 4494 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    4312:	f8df 8158 	ldr.w	r8, [pc, #344]	; 446c <xQueueSemaphoreTake+0x1b4>
    4316:	e048      	b.n	43aa <xQueueSemaphoreTake+0xf2>
    4318:	2500      	movs	r5, #0
    431a:	462f      	mov	r7, r5
    431c:	e7f6      	b.n	430c <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    431e:	3b01      	subs	r3, #1
    4320:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4322:	6823      	ldr	r3, [r4, #0]
    4324:	b913      	cbnz	r3, 432c <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    4326:	4b4f      	ldr	r3, [pc, #316]	; (4464 <xQueueSemaphoreTake+0x1ac>)
    4328:	4798      	blx	r3
    432a:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    432c:	6923      	ldr	r3, [r4, #16]
    432e:	b163      	cbz	r3, 434a <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4330:	f104 0010 	add.w	r0, r4, #16
    4334:	4b4c      	ldr	r3, [pc, #304]	; (4468 <xQueueSemaphoreTake+0x1b0>)
    4336:	4798      	blx	r3
    4338:	b138      	cbz	r0, 434a <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    433a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    433e:	4b4b      	ldr	r3, [pc, #300]	; (446c <xQueueSemaphoreTake+0x1b4>)
    4340:	601a      	str	r2, [r3, #0]
    4342:	f3bf 8f4f 	dsb	sy
    4346:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    434a:	4b49      	ldr	r3, [pc, #292]	; (4470 <xQueueSemaphoreTake+0x1b8>)
    434c:	4798      	blx	r3
				return pdPASS;
    434e:	2501      	movs	r5, #1
}
    4350:	4628      	mov	r0, r5
    4352:	b005      	add	sp, #20
    4354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    4358:	b145      	cbz	r5, 436c <xQueueSemaphoreTake+0xb4>
    435a:	f04f 0380 	mov.w	r3, #128	; 0x80
    435e:	f383 8811 	msr	BASEPRI, r3
    4362:	f3bf 8f6f 	isb	sy
    4366:	f3bf 8f4f 	dsb	sy
    436a:	e7fe      	b.n	436a <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    436c:	4b40      	ldr	r3, [pc, #256]	; (4470 <xQueueSemaphoreTake+0x1b8>)
    436e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    4370:	e7ee      	b.n	4350 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4372:	a802      	add	r0, sp, #8
    4374:	47c8      	blx	r9
    4376:	e021      	b.n	43bc <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    4378:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    437a:	6860      	ldr	r0, [r4, #4]
    437c:	4b3d      	ldr	r3, [pc, #244]	; (4474 <xQueueSemaphoreTake+0x1bc>)
    437e:	4798      	blx	r3
    4380:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    4382:	4b3b      	ldr	r3, [pc, #236]	; (4470 <xQueueSemaphoreTake+0x1b8>)
    4384:	4798      	blx	r3
    4386:	e040      	b.n	440a <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    4388:	4620      	mov	r0, r4
    438a:	4b3b      	ldr	r3, [pc, #236]	; (4478 <xQueueSemaphoreTake+0x1c0>)
    438c:	4798      	blx	r3
				(void)xTaskResumeAll();
    438e:	4b3b      	ldr	r3, [pc, #236]	; (447c <xQueueSemaphoreTake+0x1c4>)
    4390:	4798      	blx	r3
    4392:	e009      	b.n	43a8 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    4394:	4620      	mov	r0, r4
    4396:	4b38      	ldr	r3, [pc, #224]	; (4478 <xQueueSemaphoreTake+0x1c0>)
    4398:	4798      	blx	r3
			(void)xTaskResumeAll();
    439a:	4b38      	ldr	r3, [pc, #224]	; (447c <xQueueSemaphoreTake+0x1c4>)
    439c:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    439e:	4620      	mov	r0, r4
    43a0:	4b37      	ldr	r3, [pc, #220]	; (4480 <xQueueSemaphoreTake+0x1c8>)
    43a2:	4798      	blx	r3
    43a4:	2800      	cmp	r0, #0
    43a6:	d145      	bne.n	4434 <xQueueSemaphoreTake+0x17c>
    43a8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    43aa:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    43ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    43ae:	2b00      	cmp	r3, #0
    43b0:	d1b5      	bne.n	431e <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    43b2:	9b01      	ldr	r3, [sp, #4]
    43b4:	2b00      	cmp	r3, #0
    43b6:	d0cf      	beq.n	4358 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    43b8:	2f00      	cmp	r7, #0
    43ba:	d0da      	beq.n	4372 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    43bc:	4b2c      	ldr	r3, [pc, #176]	; (4470 <xQueueSemaphoreTake+0x1b8>)
    43be:	4798      	blx	r3
		vTaskSuspendAll();
    43c0:	4b30      	ldr	r3, [pc, #192]	; (4484 <xQueueSemaphoreTake+0x1cc>)
    43c2:	4798      	blx	r3
		prvLockQueue(pxQueue);
    43c4:	47b0      	blx	r6
    43c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    43ca:	b25b      	sxtb	r3, r3
    43cc:	f1b3 3fff 	cmp.w	r3, #4294967295
    43d0:	bf04      	itt	eq
    43d2:	2300      	moveq	r3, #0
    43d4:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    43d8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    43dc:	b25b      	sxtb	r3, r3
    43de:	f1b3 3fff 	cmp.w	r3, #4294967295
    43e2:	bf04      	itt	eq
    43e4:	2300      	moveq	r3, #0
    43e6:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    43ea:	4b21      	ldr	r3, [pc, #132]	; (4470 <xQueueSemaphoreTake+0x1b8>)
    43ec:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    43ee:	a901      	add	r1, sp, #4
    43f0:	a802      	add	r0, sp, #8
    43f2:	4b25      	ldr	r3, [pc, #148]	; (4488 <xQueueSemaphoreTake+0x1d0>)
    43f4:	4798      	blx	r3
    43f6:	2800      	cmp	r0, #0
    43f8:	d1cc      	bne.n	4394 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    43fa:	4620      	mov	r0, r4
    43fc:	4b20      	ldr	r3, [pc, #128]	; (4480 <xQueueSemaphoreTake+0x1c8>)
    43fe:	4798      	blx	r3
    4400:	2800      	cmp	r0, #0
    4402:	d0c1      	beq.n	4388 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4404:	6823      	ldr	r3, [r4, #0]
    4406:	2b00      	cmp	r3, #0
    4408:	d0b6      	beq.n	4378 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    440a:	9901      	ldr	r1, [sp, #4]
    440c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4410:	4b1e      	ldr	r3, [pc, #120]	; (448c <xQueueSemaphoreTake+0x1d4>)
    4412:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4414:	4620      	mov	r0, r4
    4416:	4b18      	ldr	r3, [pc, #96]	; (4478 <xQueueSemaphoreTake+0x1c0>)
    4418:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    441a:	4b18      	ldr	r3, [pc, #96]	; (447c <xQueueSemaphoreTake+0x1c4>)
    441c:	4798      	blx	r3
    441e:	2800      	cmp	r0, #0
    4420:	d1c2      	bne.n	43a8 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    4422:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4426:	f8c8 3000 	str.w	r3, [r8]
    442a:	f3bf 8f4f 	dsb	sy
    442e:	f3bf 8f6f 	isb	sy
    4432:	e7b9      	b.n	43a8 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    4434:	2d00      	cmp	r5, #0
    4436:	d08b      	beq.n	4350 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    4438:	4b09      	ldr	r3, [pc, #36]	; (4460 <xQueueSemaphoreTake+0x1a8>)
    443a:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    443c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    443e:	b153      	cbz	r3, 4456 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    4440:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4442:	6819      	ldr	r1, [r3, #0]
    4444:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    4448:	6860      	ldr	r0, [r4, #4]
    444a:	4b11      	ldr	r3, [pc, #68]	; (4490 <xQueueSemaphoreTake+0x1d8>)
    444c:	4798      	blx	r3
						taskEXIT_CRITICAL();
    444e:	4b08      	ldr	r3, [pc, #32]	; (4470 <xQueueSemaphoreTake+0x1b8>)
    4450:	4798      	blx	r3
				return errQUEUE_EMPTY;
    4452:	2500      	movs	r5, #0
    4454:	e77c      	b.n	4350 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    4456:	2100      	movs	r1, #0
    4458:	e7f6      	b.n	4448 <xQueueSemaphoreTake+0x190>
    445a:	bf00      	nop
    445c:	00004e31 	.word	0x00004e31
    4460:	00003775 	.word	0x00003775
    4464:	0000503d 	.word	0x0000503d
    4468:	00004cf1 	.word	0x00004cf1
    446c:	e000ed04 	.word	0xe000ed04
    4470:	000037b9 	.word	0x000037b9
    4474:	00004e51 	.word	0x00004e51
    4478:	00003c91 	.word	0x00003c91
    447c:	000049a5 	.word	0x000049a5
    4480:	00003b45 	.word	0x00003b45
    4484:	0000485d 	.word	0x0000485d
    4488:	00004d95 	.word	0x00004d95
    448c:	00004c71 	.word	0x00004c71
    4490:	00004f91 	.word	0x00004f91
    4494:	00004d81 	.word	0x00004d81

00004498 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    4498:	b940      	cbnz	r0, 44ac <uxQueueMessagesWaiting+0x14>
    449a:	f04f 0380 	mov.w	r3, #128	; 0x80
    449e:	f383 8811 	msr	BASEPRI, r3
    44a2:	f3bf 8f6f 	isb	sy
    44a6:	f3bf 8f4f 	dsb	sy
    44aa:	e7fe      	b.n	44aa <uxQueueMessagesWaiting+0x12>
{
    44ac:	b510      	push	{r4, lr}
    44ae:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    44b0:	4b03      	ldr	r3, [pc, #12]	; (44c0 <uxQueueMessagesWaiting+0x28>)
    44b2:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    44b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    44b6:	4b03      	ldr	r3, [pc, #12]	; (44c4 <uxQueueMessagesWaiting+0x2c>)
    44b8:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    44ba:	4620      	mov	r0, r4
    44bc:	bd10      	pop	{r4, pc}
    44be:	bf00      	nop
    44c0:	00003775 	.word	0x00003775
    44c4:	000037b9 	.word	0x000037b9

000044c8 <vQueueWaitForMessageRestricted>:
{
    44c8:	b570      	push	{r4, r5, r6, lr}
    44ca:	4604      	mov	r4, r0
    44cc:	460d      	mov	r5, r1
    44ce:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    44d0:	4b11      	ldr	r3, [pc, #68]	; (4518 <vQueueWaitForMessageRestricted+0x50>)
    44d2:	4798      	blx	r3
    44d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    44d8:	b25b      	sxtb	r3, r3
    44da:	f1b3 3fff 	cmp.w	r3, #4294967295
    44de:	bf04      	itt	eq
    44e0:	2300      	moveq	r3, #0
    44e2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    44e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    44ea:	b25b      	sxtb	r3, r3
    44ec:	f1b3 3fff 	cmp.w	r3, #4294967295
    44f0:	bf04      	itt	eq
    44f2:	2300      	moveq	r3, #0
    44f4:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    44f8:	4b08      	ldr	r3, [pc, #32]	; (451c <vQueueWaitForMessageRestricted+0x54>)
    44fa:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    44fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    44fe:	b11b      	cbz	r3, 4508 <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    4500:	4620      	mov	r0, r4
    4502:	4b07      	ldr	r3, [pc, #28]	; (4520 <vQueueWaitForMessageRestricted+0x58>)
    4504:	4798      	blx	r3
    4506:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    4508:	4632      	mov	r2, r6
    450a:	4629      	mov	r1, r5
    450c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4510:	4b04      	ldr	r3, [pc, #16]	; (4524 <vQueueWaitForMessageRestricted+0x5c>)
    4512:	4798      	blx	r3
    4514:	e7f4      	b.n	4500 <vQueueWaitForMessageRestricted+0x38>
    4516:	bf00      	nop
    4518:	00003775 	.word	0x00003775
    451c:	000037b9 	.word	0x000037b9
    4520:	00003c91 	.word	0x00003c91
    4524:	00004cad 	.word	0x00004cad

00004528 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    4528:	4a06      	ldr	r2, [pc, #24]	; (4544 <prvIdleTask+0x1c>)
				taskYIELD();
    452a:	4807      	ldr	r0, [pc, #28]	; (4548 <prvIdleTask+0x20>)
    452c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    4530:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4532:	2b01      	cmp	r3, #1
    4534:	d9fc      	bls.n	4530 <prvIdleTask+0x8>
				taskYIELD();
    4536:	6001      	str	r1, [r0, #0]
    4538:	f3bf 8f4f 	dsb	sy
    453c:	f3bf 8f6f 	isb	sy
    4540:	e7f6      	b.n	4530 <prvIdleTask+0x8>
    4542:	bf00      	nop
    4544:	2000331c 	.word	0x2000331c
    4548:	e000ed04 	.word	0xe000ed04

0000454c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    454c:	4b09      	ldr	r3, [pc, #36]	; (4574 <prvResetNextTaskUnblockTime+0x28>)
    454e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    4552:	681b      	ldr	r3, [r3, #0]
    4554:	b143      	cbz	r3, 4568 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    4556:	4b07      	ldr	r3, [pc, #28]	; (4574 <prvResetNextTaskUnblockTime+0x28>)
    4558:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    455c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    455e:	68d2      	ldr	r2, [r2, #12]
    4560:	6852      	ldr	r2, [r2, #4]
    4562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4566:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    4568:	f04f 32ff 	mov.w	r2, #4294967295
    456c:	4b01      	ldr	r3, [pc, #4]	; (4574 <prvResetNextTaskUnblockTime+0x28>)
    456e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4572:	4770      	bx	lr
    4574:	2000331c 	.word	0x2000331c

00004578 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    4578:	b570      	push	{r4, r5, r6, lr}
    457a:	4604      	mov	r4, r0
    457c:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    457e:	4b1a      	ldr	r3, [pc, #104]	; (45e8 <prvAddCurrentTaskToDelayedList+0x70>)
    4580:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    4584:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4588:	3004      	adds	r0, #4
    458a:	4b18      	ldr	r3, [pc, #96]	; (45ec <prvAddCurrentTaskToDelayedList+0x74>)
    458c:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    458e:	f1b4 3fff 	cmp.w	r4, #4294967295
    4592:	d016      	beq.n	45c2 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    4594:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    4596:	4b14      	ldr	r3, [pc, #80]	; (45e8 <prvAddCurrentTaskToDelayedList+0x70>)
    4598:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    459c:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    459e:	42a5      	cmp	r5, r4
    45a0:	d818      	bhi.n	45d4 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    45a2:	4d11      	ldr	r5, [pc, #68]	; (45e8 <prvAddCurrentTaskToDelayedList+0x70>)
    45a4:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    45a8:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    45ac:	3104      	adds	r1, #4
    45ae:	4b10      	ldr	r3, [pc, #64]	; (45f0 <prvAddCurrentTaskToDelayedList+0x78>)
    45b0:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    45b2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    45b6:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    45b8:	bf3c      	itt	cc
    45ba:	462b      	movcc	r3, r5
    45bc:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    45c0:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    45c2:	2e00      	cmp	r6, #0
    45c4:	d0e6      	beq.n	4594 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    45c6:	4808      	ldr	r0, [pc, #32]	; (45e8 <prvAddCurrentTaskToDelayedList+0x70>)
    45c8:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    45cc:	3104      	adds	r1, #4
    45ce:	4b09      	ldr	r3, [pc, #36]	; (45f4 <prvAddCurrentTaskToDelayedList+0x7c>)
    45d0:	4798      	blx	r3
    45d2:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    45d4:	4b04      	ldr	r3, [pc, #16]	; (45e8 <prvAddCurrentTaskToDelayedList+0x70>)
    45d6:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    45da:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    45de:	3104      	adds	r1, #4
    45e0:	4b03      	ldr	r3, [pc, #12]	; (45f0 <prvAddCurrentTaskToDelayedList+0x78>)
    45e2:	4798      	blx	r3
    45e4:	bd70      	pop	{r4, r5, r6, pc}
    45e6:	bf00      	nop
    45e8:	2000331c 	.word	0x2000331c
    45ec:	0000367d 	.word	0x0000367d
    45f0:	00003649 	.word	0x00003649
    45f4:	00003631 	.word	0x00003631

000045f8 <xTaskCreate>:
{
    45f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45fc:	b083      	sub	sp, #12
    45fe:	4683      	mov	fp, r0
    4600:	460d      	mov	r5, r1
    4602:	9301      	str	r3, [sp, #4]
    4604:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    4608:	0096      	lsls	r6, r2, #2
    460a:	4630      	mov	r0, r6
    460c:	4b66      	ldr	r3, [pc, #408]	; (47a8 <xTaskCreate+0x1b0>)
    460e:	4798      	blx	r3
		if (pxStack != NULL) {
    4610:	2800      	cmp	r0, #0
    4612:	f000 8096 	beq.w	4742 <xTaskCreate+0x14a>
    4616:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    4618:	2054      	movs	r0, #84	; 0x54
    461a:	4b63      	ldr	r3, [pc, #396]	; (47a8 <xTaskCreate+0x1b0>)
    461c:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    461e:	4604      	mov	r4, r0
    4620:	2800      	cmp	r0, #0
    4622:	f000 808b 	beq.w	473c <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    4626:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    4628:	4632      	mov	r2, r6
    462a:	21a5      	movs	r1, #165	; 0xa5
    462c:	4638      	mov	r0, r7
    462e:	4b5f      	ldr	r3, [pc, #380]	; (47ac <xTaskCreate+0x1b4>)
    4630:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    4632:	3e04      	subs	r6, #4
    4634:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4636:	441e      	add	r6, r3
		                      & (~(
    4638:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    463c:	782b      	ldrb	r3, [r5, #0]
    463e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    4642:	782b      	ldrb	r3, [r5, #0]
    4644:	b15b      	cbz	r3, 465e <xTaskCreate+0x66>
    4646:	462b      	mov	r3, r5
    4648:	f104 0235 	add.w	r2, r4, #53	; 0x35
    464c:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    464e:	7858      	ldrb	r0, [r3, #1]
    4650:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    4654:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    4658:	b108      	cbz	r0, 465e <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    465a:	4299      	cmp	r1, r3
    465c:	d1f7      	bne.n	464e <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    465e:	2700      	movs	r7, #0
    4660:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    4664:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    4666:	2d04      	cmp	r5, #4
    4668:	bf28      	it	cs
    466a:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    466c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    466e:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    4670:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    4672:	f104 0804 	add.w	r8, r4, #4
    4676:	4640      	mov	r0, r8
    4678:	f8df 9154 	ldr.w	r9, [pc, #340]	; 47d0 <xTaskCreate+0x1d8>
    467c:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    467e:	f104 0018 	add.w	r0, r4, #24
    4682:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    4684:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    4686:	f1c5 0505 	rsb	r5, r5, #5
    468a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    468c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    468e:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    4690:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    4694:	9a01      	ldr	r2, [sp, #4]
    4696:	4659      	mov	r1, fp
    4698:	4630      	mov	r0, r6
    469a:	4b45      	ldr	r3, [pc, #276]	; (47b0 <xTaskCreate+0x1b8>)
    469c:	4798      	blx	r3
    469e:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    46a0:	f1ba 0f00 	cmp.w	sl, #0
    46a4:	d001      	beq.n	46aa <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    46a6:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    46aa:	4b42      	ldr	r3, [pc, #264]	; (47b4 <xTaskCreate+0x1bc>)
    46ac:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    46ae:	4b42      	ldr	r3, [pc, #264]	; (47b8 <xTaskCreate+0x1c0>)
    46b0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    46b4:	3201      	adds	r2, #1
    46b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    46ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    46be:	2b00      	cmp	r3, #0
    46c0:	d042      	beq.n	4748 <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    46c2:	4b3d      	ldr	r3, [pc, #244]	; (47b8 <xTaskCreate+0x1c0>)
    46c4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    46c8:	b94b      	cbnz	r3, 46de <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    46ca:	4b3b      	ldr	r3, [pc, #236]	; (47b8 <xTaskCreate+0x1c0>)
    46cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    46d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    46d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    46d4:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    46d6:	bf9c      	itt	ls
    46d8:	4b37      	ldrls	r3, [pc, #220]	; (47b8 <xTaskCreate+0x1c0>)
    46da:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    46de:	4a36      	ldr	r2, [pc, #216]	; (47b8 <xTaskCreate+0x1c0>)
    46e0:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    46e4:	3301      	adds	r3, #1
    46e6:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    46ea:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    46ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    46ee:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    46f2:	4293      	cmp	r3, r2
    46f4:	bf84      	itt	hi
    46f6:	4a30      	ldrhi	r2, [pc, #192]	; (47b8 <xTaskCreate+0x1c0>)
    46f8:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    46fc:	4d2e      	ldr	r5, [pc, #184]	; (47b8 <xTaskCreate+0x1c0>)
    46fe:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4702:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4706:	4641      	mov	r1, r8
    4708:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    470c:	4b2b      	ldr	r3, [pc, #172]	; (47bc <xTaskCreate+0x1c4>)
    470e:	4798      	blx	r3
	taskEXIT_CRITICAL();
    4710:	4b2b      	ldr	r3, [pc, #172]	; (47c0 <xTaskCreate+0x1c8>)
    4712:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    4714:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    4718:	2b00      	cmp	r3, #0
    471a:	d03f      	beq.n	479c <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    471c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4722:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4724:	429a      	cmp	r2, r3
    4726:	d23d      	bcs.n	47a4 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    4728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    472c:	4b25      	ldr	r3, [pc, #148]	; (47c4 <xTaskCreate+0x1cc>)
    472e:	601a      	str	r2, [r3, #0]
    4730:	f3bf 8f4f 	dsb	sy
    4734:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    4738:	2001      	movs	r0, #1
    473a:	e030      	b.n	479e <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    473c:	4638      	mov	r0, r7
    473e:	4b22      	ldr	r3, [pc, #136]	; (47c8 <xTaskCreate+0x1d0>)
    4740:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4742:	f04f 30ff 	mov.w	r0, #4294967295
    4746:	e02a      	b.n	479e <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    4748:	4b1b      	ldr	r3, [pc, #108]	; (47b8 <xTaskCreate+0x1c0>)
    474a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    474e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4752:	2b01      	cmp	r3, #1
    4754:	d1c3      	bne.n	46de <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    4756:	4d18      	ldr	r5, [pc, #96]	; (47b8 <xTaskCreate+0x1c0>)
    4758:	f105 0028 	add.w	r0, r5, #40	; 0x28
    475c:	4e1b      	ldr	r6, [pc, #108]	; (47cc <xTaskCreate+0x1d4>)
    475e:	47b0      	blx	r6
    4760:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    4764:	47b0      	blx	r6
    4766:	f105 0050 	add.w	r0, r5, #80	; 0x50
    476a:	47b0      	blx	r6
    476c:	f105 0064 	add.w	r0, r5, #100	; 0x64
    4770:	47b0      	blx	r6
    4772:	f105 0078 	add.w	r0, r5, #120	; 0x78
    4776:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    4778:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    477c:	4648      	mov	r0, r9
    477e:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    4780:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    4784:	4638      	mov	r0, r7
    4786:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    4788:	f105 0014 	add.w	r0, r5, #20
    478c:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    478e:	4628      	mov	r0, r5
    4790:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    4792:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4796:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    479a:	e7a0      	b.n	46de <xTaskCreate+0xe6>
		xReturn = pdPASS;
    479c:	2001      	movs	r0, #1
}
    479e:	b003      	add	sp, #12
    47a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    47a4:	2001      	movs	r0, #1
	return xReturn;
    47a6:	e7fa      	b.n	479e <xTaskCreate+0x1a6>
    47a8:	00003a25 	.word	0x00003a25
    47ac:	0000568f 	.word	0x0000568f
    47b0:	00003721 	.word	0x00003721
    47b4:	00003775 	.word	0x00003775
    47b8:	2000331c 	.word	0x2000331c
    47bc:	00003631 	.word	0x00003631
    47c0:	000037b9 	.word	0x000037b9
    47c4:	e000ed04 	.word	0xe000ed04
    47c8:	00003af9 	.word	0x00003af9
    47cc:	00003615 	.word	0x00003615
    47d0:	0000362b 	.word	0x0000362b

000047d4 <vTaskStartScheduler>:
{
    47d4:	b510      	push	{r4, lr}
    47d6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    47d8:	4b19      	ldr	r3, [pc, #100]	; (4840 <vTaskStartScheduler+0x6c>)
    47da:	9301      	str	r3, [sp, #4]
    47dc:	2300      	movs	r3, #0
    47de:	9300      	str	r3, [sp, #0]
    47e0:	2280      	movs	r2, #128	; 0x80
    47e2:	4918      	ldr	r1, [pc, #96]	; (4844 <vTaskStartScheduler+0x70>)
    47e4:	4818      	ldr	r0, [pc, #96]	; (4848 <vTaskStartScheduler+0x74>)
    47e6:	4c19      	ldr	r4, [pc, #100]	; (484c <vTaskStartScheduler+0x78>)
    47e8:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    47ea:	2801      	cmp	r0, #1
    47ec:	d004      	beq.n	47f8 <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    47ee:	f1b0 3fff 	cmp.w	r0, #4294967295
    47f2:	d01b      	beq.n	482c <vTaskStartScheduler+0x58>
}
    47f4:	b002      	add	sp, #8
    47f6:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    47f8:	4b15      	ldr	r3, [pc, #84]	; (4850 <vTaskStartScheduler+0x7c>)
    47fa:	4798      	blx	r3
	if (xReturn == pdPASS) {
    47fc:	2801      	cmp	r0, #1
    47fe:	d1f6      	bne.n	47ee <vTaskStartScheduler+0x1a>
    4800:	f04f 0380 	mov.w	r3, #128	; 0x80
    4804:	f383 8811 	msr	BASEPRI, r3
    4808:	f3bf 8f6f 	isb	sy
    480c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    4810:	4b10      	ldr	r3, [pc, #64]	; (4854 <vTaskStartScheduler+0x80>)
    4812:	f04f 32ff 	mov.w	r2, #4294967295
    4816:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    481a:	2201      	movs	r2, #1
    481c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    4820:	2200      	movs	r2, #0
    4822:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    4826:	4b0c      	ldr	r3, [pc, #48]	; (4858 <vTaskStartScheduler+0x84>)
    4828:	4798      	blx	r3
    482a:	e7e3      	b.n	47f4 <vTaskStartScheduler+0x20>
    482c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4830:	f383 8811 	msr	BASEPRI, r3
    4834:	f3bf 8f6f 	isb	sy
    4838:	f3bf 8f4f 	dsb	sy
    483c:	e7fe      	b.n	483c <vTaskStartScheduler+0x68>
    483e:	bf00      	nop
    4840:	200033f8 	.word	0x200033f8
    4844:	00007570 	.word	0x00007570
    4848:	00004529 	.word	0x00004529
    484c:	000045f9 	.word	0x000045f9
    4850:	000052c9 	.word	0x000052c9
    4854:	2000331c 	.word	0x2000331c
    4858:	000038a9 	.word	0x000038a9

0000485c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    485c:	4a03      	ldr	r2, [pc, #12]	; (486c <vTaskSuspendAll+0x10>)
    485e:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    4862:	3301      	adds	r3, #1
    4864:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    4868:	4770      	bx	lr
    486a:	bf00      	nop
    486c:	2000331c 	.word	0x2000331c

00004870 <xTaskGetTickCount>:
		xTicks = xTickCount;
    4870:	4b01      	ldr	r3, [pc, #4]	; (4878 <xTaskGetTickCount+0x8>)
    4872:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    4876:	4770      	bx	lr
    4878:	2000331c 	.word	0x2000331c

0000487c <xTaskIncrementTick>:
{
    487c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4880:	4b44      	ldr	r3, [pc, #272]	; (4994 <xTaskIncrementTick+0x118>)
    4882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4886:	2b00      	cmp	r3, #0
    4888:	d173      	bne.n	4972 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    488a:	4b42      	ldr	r3, [pc, #264]	; (4994 <xTaskIncrementTick+0x118>)
    488c:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    4890:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    4892:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    4896:	b9e6      	cbnz	r6, 48d2 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    4898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    489c:	681b      	ldr	r3, [r3, #0]
    489e:	b143      	cbz	r3, 48b2 <xTaskIncrementTick+0x36>
    48a0:	f04f 0380 	mov.w	r3, #128	; 0x80
    48a4:	f383 8811 	msr	BASEPRI, r3
    48a8:	f3bf 8f6f 	isb	sy
    48ac:	f3bf 8f4f 	dsb	sy
    48b0:	e7fe      	b.n	48b0 <xTaskIncrementTick+0x34>
    48b2:	4b38      	ldr	r3, [pc, #224]	; (4994 <xTaskIncrementTick+0x118>)
    48b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    48b8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    48bc:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    48c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    48c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    48c8:	3201      	adds	r2, #1
    48ca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    48ce:	4b32      	ldr	r3, [pc, #200]	; (4998 <xTaskIncrementTick+0x11c>)
    48d0:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    48d2:	4b30      	ldr	r3, [pc, #192]	; (4994 <xTaskIncrementTick+0x118>)
    48d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    48d8:	429e      	cmp	r6, r3
    48da:	d20d      	bcs.n	48f8 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    48dc:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    48de:	4b2d      	ldr	r3, [pc, #180]	; (4994 <xTaskIncrementTick+0x118>)
    48e0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    48e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    48e6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    48ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    48ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    48f0:	2b02      	cmp	r3, #2
    48f2:	bf28      	it	cs
    48f4:	2401      	movcs	r4, #1
    48f6:	e043      	b.n	4980 <xTaskIncrementTick+0x104>
    48f8:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    48fa:	4d26      	ldr	r5, [pc, #152]	; (4994 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    48fc:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 49a0 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    4900:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    4904:	e021      	b.n	494a <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4906:	f04f 32ff 	mov.w	r2, #4294967295
    490a:	4b22      	ldr	r3, [pc, #136]	; (4994 <xTaskIncrementTick+0x118>)
    490c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    4910:	e7e5      	b.n	48de <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    4912:	4a20      	ldr	r2, [pc, #128]	; (4994 <xTaskIncrementTick+0x118>)
    4914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    4918:	e7e1      	b.n	48de <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    491a:	f107 0018 	add.w	r0, r7, #24
    491e:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    4920:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    4922:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    4926:	4298      	cmp	r0, r3
    4928:	bf88      	it	hi
    492a:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    492e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4932:	4649      	mov	r1, r9
    4934:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    4938:	4b18      	ldr	r3, [pc, #96]	; (499c <xTaskIncrementTick+0x120>)
    493a:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    493c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    4944:	429a      	cmp	r2, r3
    4946:	bf28      	it	cs
    4948:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    494a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    494e:	681b      	ldr	r3, [r3, #0]
    4950:	2b00      	cmp	r3, #0
    4952:	d0d8      	beq.n	4906 <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    4954:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    4958:	68db      	ldr	r3, [r3, #12]
    495a:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    495c:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    495e:	429e      	cmp	r6, r3
    4960:	d3d7      	bcc.n	4912 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4962:	f107 0904 	add.w	r9, r7, #4
    4966:	4648      	mov	r0, r9
    4968:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    496c:	2b00      	cmp	r3, #0
    496e:	d1d4      	bne.n	491a <xTaskIncrementTick+0x9e>
    4970:	e7d6      	b.n	4920 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    4972:	4a08      	ldr	r2, [pc, #32]	; (4994 <xTaskIncrementTick+0x118>)
    4974:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    4978:	3301      	adds	r3, #1
    497a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    497e:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    4980:	4b04      	ldr	r3, [pc, #16]	; (4994 <xTaskIncrementTick+0x118>)
    4982:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    4986:	2b00      	cmp	r3, #0
}
    4988:	bf0c      	ite	eq
    498a:	4620      	moveq	r0, r4
    498c:	2001      	movne	r0, #1
    498e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4992:	bf00      	nop
    4994:	2000331c 	.word	0x2000331c
    4998:	0000454d 	.word	0x0000454d
    499c:	00003631 	.word	0x00003631
    49a0:	0000367d 	.word	0x0000367d

000049a4 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    49a4:	4b3a      	ldr	r3, [pc, #232]	; (4a90 <xTaskResumeAll+0xec>)
    49a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    49aa:	b943      	cbnz	r3, 49be <xTaskResumeAll+0x1a>
    49ac:	f04f 0380 	mov.w	r3, #128	; 0x80
    49b0:	f383 8811 	msr	BASEPRI, r3
    49b4:	f3bf 8f6f 	isb	sy
    49b8:	f3bf 8f4f 	dsb	sy
    49bc:	e7fe      	b.n	49bc <xTaskResumeAll+0x18>
{
    49be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    49c2:	4b34      	ldr	r3, [pc, #208]	; (4a94 <xTaskResumeAll+0xf0>)
    49c4:	4798      	blx	r3
		--uxSchedulerSuspended;
    49c6:	4b32      	ldr	r3, [pc, #200]	; (4a90 <xTaskResumeAll+0xec>)
    49c8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    49cc:	3a01      	subs	r2, #1
    49ce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    49d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    49d6:	2b00      	cmp	r3, #0
    49d8:	d155      	bne.n	4a86 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    49da:	4b2d      	ldr	r3, [pc, #180]	; (4a90 <xTaskResumeAll+0xec>)
    49dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    49e0:	b92b      	cbnz	r3, 49ee <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    49e2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    49e4:	4b2c      	ldr	r3, [pc, #176]	; (4a98 <xTaskResumeAll+0xf4>)
    49e6:	4798      	blx	r3
}
    49e8:	4620      	mov	r0, r4
    49ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49ee:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    49f0:	4c27      	ldr	r4, [pc, #156]	; (4a90 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    49f2:	4e2a      	ldr	r6, [pc, #168]	; (4a9c <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    49f4:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    49f8:	6963      	ldr	r3, [r4, #20]
    49fa:	b1fb      	cbz	r3, 4a3c <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    49fc:	6a23      	ldr	r3, [r4, #32]
    49fe:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4a00:	f105 0018 	add.w	r0, r5, #24
    4a04:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4a06:	1d2f      	adds	r7, r5, #4
    4a08:	4638      	mov	r0, r7
    4a0a:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    4a0c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4a0e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    4a12:	4298      	cmp	r0, r3
    4a14:	bf88      	it	hi
    4a16:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    4a1a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4a1e:	4639      	mov	r1, r7
    4a20:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    4a24:	4b1e      	ldr	r3, [pc, #120]	; (4aa0 <xTaskResumeAll+0xfc>)
    4a26:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    4a28:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4a2c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a30:	429a      	cmp	r2, r3
    4a32:	d3e1      	bcc.n	49f8 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    4a34:	2301      	movs	r3, #1
    4a36:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    4a3a:	e7dd      	b.n	49f8 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    4a3c:	b10d      	cbz	r5, 4a42 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    4a3e:	4b19      	ldr	r3, [pc, #100]	; (4aa4 <xTaskResumeAll+0x100>)
    4a40:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4a42:	4b13      	ldr	r3, [pc, #76]	; (4a90 <xTaskResumeAll+0xec>)
    4a44:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    4a48:	b17c      	cbz	r4, 4a6a <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    4a4a:	4f17      	ldr	r7, [pc, #92]	; (4aa8 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    4a4c:	461e      	mov	r6, r3
    4a4e:	2501      	movs	r5, #1
    4a50:	e001      	b.n	4a56 <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    4a52:	3c01      	subs	r4, #1
    4a54:	d005      	beq.n	4a62 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    4a56:	47b8      	blx	r7
    4a58:	2800      	cmp	r0, #0
    4a5a:	d0fa      	beq.n	4a52 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    4a5c:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    4a60:	e7f7      	b.n	4a52 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    4a62:	2200      	movs	r2, #0
    4a64:	4b0a      	ldr	r3, [pc, #40]	; (4a90 <xTaskResumeAll+0xec>)
    4a66:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    4a6a:	4b09      	ldr	r3, [pc, #36]	; (4a90 <xTaskResumeAll+0xec>)
    4a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    4a70:	b15b      	cbz	r3, 4a8a <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    4a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4a76:	4b0d      	ldr	r3, [pc, #52]	; (4aac <xTaskResumeAll+0x108>)
    4a78:	601a      	str	r2, [r3, #0]
    4a7a:	f3bf 8f4f 	dsb	sy
    4a7e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    4a82:	2401      	movs	r4, #1
    4a84:	e7ae      	b.n	49e4 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    4a86:	2400      	movs	r4, #0
    4a88:	e7ac      	b.n	49e4 <xTaskResumeAll+0x40>
    4a8a:	2400      	movs	r4, #0
    4a8c:	e7aa      	b.n	49e4 <xTaskResumeAll+0x40>
    4a8e:	bf00      	nop
    4a90:	2000331c 	.word	0x2000331c
    4a94:	00003775 	.word	0x00003775
    4a98:	000037b9 	.word	0x000037b9
    4a9c:	0000367d 	.word	0x0000367d
    4aa0:	00003631 	.word	0x00003631
    4aa4:	0000454d 	.word	0x0000454d
    4aa8:	0000487d 	.word	0x0000487d
    4aac:	e000ed04 	.word	0xe000ed04

00004ab0 <vTaskDelayUntil>:
{
    4ab0:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxPreviousWakeTime);
    4ab2:	b150      	cbz	r0, 4aca <vTaskDelayUntil+0x1a>
    4ab4:	4605      	mov	r5, r0
	configASSERT((xTimeIncrement > 0U));
    4ab6:	b989      	cbnz	r1, 4adc <vTaskDelayUntil+0x2c>
    4ab8:	f04f 0380 	mov.w	r3, #128	; 0x80
    4abc:	f383 8811 	msr	BASEPRI, r3
    4ac0:	f3bf 8f6f 	isb	sy
    4ac4:	f3bf 8f4f 	dsb	sy
    4ac8:	e7fe      	b.n	4ac8 <vTaskDelayUntil+0x18>
    4aca:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ace:	f383 8811 	msr	BASEPRI, r3
    4ad2:	f3bf 8f6f 	isb	sy
    4ad6:	f3bf 8f4f 	dsb	sy
    4ada:	e7fe      	b.n	4ada <vTaskDelayUntil+0x2a>
	configASSERT(uxSchedulerSuspended == 0);
    4adc:	4b1a      	ldr	r3, [pc, #104]	; (4b48 <vTaskDelayUntil+0x98>)
    4ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4ae2:	b143      	cbz	r3, 4af6 <vTaskDelayUntil+0x46>
    4ae4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ae8:	f383 8811 	msr	BASEPRI, r3
    4aec:	f3bf 8f6f 	isb	sy
    4af0:	f3bf 8f4f 	dsb	sy
    4af4:	e7fe      	b.n	4af4 <vTaskDelayUntil+0x44>
    4af6:	460c      	mov	r4, r1
	vTaskSuspendAll();
    4af8:	4b14      	ldr	r3, [pc, #80]	; (4b4c <vTaskDelayUntil+0x9c>)
    4afa:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4afc:	4b12      	ldr	r3, [pc, #72]	; (4b48 <vTaskDelayUntil+0x98>)
    4afe:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4b02:	682a      	ldr	r2, [r5, #0]
    4b04:	4414      	add	r4, r2
		if (xConstTickCount < *pxPreviousWakeTime) {
    4b06:	4290      	cmp	r0, r2
    4b08:	d214      	bcs.n	4b34 <vTaskDelayUntil+0x84>
			if ((xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount)) {
    4b0a:	42a2      	cmp	r2, r4
    4b0c:	d916      	bls.n	4b3c <vTaskDelayUntil+0x8c>
		*pxPreviousWakeTime = xTimeToWake;
    4b0e:	602c      	str	r4, [r5, #0]
		if (xShouldDelay != pdFALSE) {
    4b10:	42a0      	cmp	r0, r4
    4b12:	d203      	bcs.n	4b1c <vTaskDelayUntil+0x6c>
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount, pdFALSE);
    4b14:	2100      	movs	r1, #0
    4b16:	1a20      	subs	r0, r4, r0
    4b18:	4b0d      	ldr	r3, [pc, #52]	; (4b50 <vTaskDelayUntil+0xa0>)
    4b1a:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
    4b1c:	4b0d      	ldr	r3, [pc, #52]	; (4b54 <vTaskDelayUntil+0xa4>)
    4b1e:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    4b20:	b980      	cbnz	r0, 4b44 <vTaskDelayUntil+0x94>
		portYIELD_WITHIN_API();
    4b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4b26:	4b0c      	ldr	r3, [pc, #48]	; (4b58 <vTaskDelayUntil+0xa8>)
    4b28:	601a      	str	r2, [r3, #0]
    4b2a:	f3bf 8f4f 	dsb	sy
    4b2e:	f3bf 8f6f 	isb	sy
}
    4b32:	bd38      	pop	{r3, r4, r5, pc}
			if ((xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount)) {
    4b34:	42a2      	cmp	r2, r4
    4b36:	d803      	bhi.n	4b40 <vTaskDelayUntil+0x90>
    4b38:	42a0      	cmp	r0, r4
    4b3a:	d301      	bcc.n	4b40 <vTaskDelayUntil+0x90>
		*pxPreviousWakeTime = xTimeToWake;
    4b3c:	602c      	str	r4, [r5, #0]
    4b3e:	e7ed      	b.n	4b1c <vTaskDelayUntil+0x6c>
    4b40:	602c      	str	r4, [r5, #0]
    4b42:	e7e7      	b.n	4b14 <vTaskDelayUntil+0x64>
    4b44:	bd38      	pop	{r3, r4, r5, pc}
    4b46:	bf00      	nop
    4b48:	2000331c 	.word	0x2000331c
    4b4c:	0000485d 	.word	0x0000485d
    4b50:	00004579 	.word	0x00004579
    4b54:	000049a5 	.word	0x000049a5
    4b58:	e000ed04 	.word	0xe000ed04

00004b5c <vTaskDelay>:
{
    4b5c:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    4b5e:	b1b0      	cbz	r0, 4b8e <vTaskDelay+0x32>
    4b60:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    4b62:	4b0f      	ldr	r3, [pc, #60]	; (4ba0 <vTaskDelay+0x44>)
    4b64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4b68:	b143      	cbz	r3, 4b7c <vTaskDelay+0x20>
    4b6a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b6e:	f383 8811 	msr	BASEPRI, r3
    4b72:	f3bf 8f6f 	isb	sy
    4b76:	f3bf 8f4f 	dsb	sy
    4b7a:	e7fe      	b.n	4b7a <vTaskDelay+0x1e>
		vTaskSuspendAll();
    4b7c:	4b09      	ldr	r3, [pc, #36]	; (4ba4 <vTaskDelay+0x48>)
    4b7e:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    4b80:	2100      	movs	r1, #0
    4b82:	4620      	mov	r0, r4
    4b84:	4b08      	ldr	r3, [pc, #32]	; (4ba8 <vTaskDelay+0x4c>)
    4b86:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    4b88:	4b08      	ldr	r3, [pc, #32]	; (4bac <vTaskDelay+0x50>)
    4b8a:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    4b8c:	b938      	cbnz	r0, 4b9e <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    4b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4b92:	4b07      	ldr	r3, [pc, #28]	; (4bb0 <vTaskDelay+0x54>)
    4b94:	601a      	str	r2, [r3, #0]
    4b96:	f3bf 8f4f 	dsb	sy
    4b9a:	f3bf 8f6f 	isb	sy
    4b9e:	bd10      	pop	{r4, pc}
    4ba0:	2000331c 	.word	0x2000331c
    4ba4:	0000485d 	.word	0x0000485d
    4ba8:	00004579 	.word	0x00004579
    4bac:	000049a5 	.word	0x000049a5
    4bb0:	e000ed04 	.word	0xe000ed04

00004bb4 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    4bb4:	4b2c      	ldr	r3, [pc, #176]	; (4c68 <vTaskSwitchContext+0xb4>)
    4bb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4bba:	bb8b      	cbnz	r3, 4c20 <vTaskSwitchContext+0x6c>
{
    4bbc:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    4bbe:	4b2a      	ldr	r3, [pc, #168]	; (4c68 <vTaskSwitchContext+0xb4>)
    4bc0:	2200      	movs	r2, #0
    4bc2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    4bc6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4bce:	6812      	ldr	r2, [r2, #0]
    4bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4bd2:	429a      	cmp	r2, r3
    4bd4:	d807      	bhi.n	4be6 <vTaskSwitchContext+0x32>
    4bd6:	4b24      	ldr	r3, [pc, #144]	; (4c68 <vTaskSwitchContext+0xb4>)
    4bd8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4bdc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4be0:	3134      	adds	r1, #52	; 0x34
    4be2:	4b22      	ldr	r3, [pc, #136]	; (4c6c <vTaskSwitchContext+0xb8>)
    4be4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4be6:	4a20      	ldr	r2, [pc, #128]	; (4c68 <vTaskSwitchContext+0xb4>)
    4be8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    4bec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    4bf0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4bf4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4bf6:	b9c2      	cbnz	r2, 4c2a <vTaskSwitchContext+0x76>
    4bf8:	b14b      	cbz	r3, 4c0e <vTaskSwitchContext+0x5a>
    4bfa:	491b      	ldr	r1, [pc, #108]	; (4c68 <vTaskSwitchContext+0xb4>)
    4bfc:	3b01      	subs	r3, #1
    4bfe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4c02:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4c06:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4c08:	b97a      	cbnz	r2, 4c2a <vTaskSwitchContext+0x76>
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	d1f6      	bne.n	4bfc <vTaskSwitchContext+0x48>
    4c0e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c12:	f383 8811 	msr	BASEPRI, r3
    4c16:	f3bf 8f6f 	isb	sy
    4c1a:	f3bf 8f4f 	dsb	sy
    4c1e:	e7fe      	b.n	4c1e <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    4c20:	2201      	movs	r2, #1
    4c22:	4b11      	ldr	r3, [pc, #68]	; (4c68 <vTaskSwitchContext+0xb4>)
    4c24:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    4c28:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4c2a:	4a0f      	ldr	r2, [pc, #60]	; (4c68 <vTaskSwitchContext+0xb4>)
    4c2c:	0099      	lsls	r1, r3, #2
    4c2e:	18c8      	adds	r0, r1, r3
    4c30:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4c34:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    4c36:	6864      	ldr	r4, [r4, #4]
    4c38:	62c4      	str	r4, [r0, #44]	; 0x2c
    4c3a:	4419      	add	r1, r3
    4c3c:	4602      	mov	r2, r0
    4c3e:	3230      	adds	r2, #48	; 0x30
    4c40:	4294      	cmp	r4, r2
    4c42:	d00b      	beq.n	4c5c <vTaskSwitchContext+0xa8>
    4c44:	4a08      	ldr	r2, [pc, #32]	; (4c68 <vTaskSwitchContext+0xb4>)
    4c46:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    4c4a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4c4e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4c50:	68c9      	ldr	r1, [r1, #12]
    4c52:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    4c56:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    4c5a:	bd10      	pop	{r4, pc}
    4c5c:	6860      	ldr	r0, [r4, #4]
    4c5e:	4a02      	ldr	r2, [pc, #8]	; (4c68 <vTaskSwitchContext+0xb4>)
    4c60:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4c64:	62d0      	str	r0, [r2, #44]	; 0x2c
    4c66:	e7ed      	b.n	4c44 <vTaskSwitchContext+0x90>
    4c68:	2000331c 	.word	0x2000331c
    4c6c:	000002d1 	.word	0x000002d1

00004c70 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    4c70:	b940      	cbnz	r0, 4c84 <vTaskPlaceOnEventList+0x14>
    4c72:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c76:	f383 8811 	msr	BASEPRI, r3
    4c7a:	f3bf 8f6f 	isb	sy
    4c7e:	f3bf 8f4f 	dsb	sy
    4c82:	e7fe      	b.n	4c82 <vTaskPlaceOnEventList+0x12>
{
    4c84:	b510      	push	{r4, lr}
    4c86:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    4c88:	4b05      	ldr	r3, [pc, #20]	; (4ca0 <vTaskPlaceOnEventList+0x30>)
    4c8a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4c8e:	3118      	adds	r1, #24
    4c90:	4b04      	ldr	r3, [pc, #16]	; (4ca4 <vTaskPlaceOnEventList+0x34>)
    4c92:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    4c94:	2101      	movs	r1, #1
    4c96:	4620      	mov	r0, r4
    4c98:	4b03      	ldr	r3, [pc, #12]	; (4ca8 <vTaskPlaceOnEventList+0x38>)
    4c9a:	4798      	blx	r3
    4c9c:	bd10      	pop	{r4, pc}
    4c9e:	bf00      	nop
    4ca0:	2000331c 	.word	0x2000331c
    4ca4:	00003649 	.word	0x00003649
    4ca8:	00004579 	.word	0x00004579

00004cac <vTaskPlaceOnEventListRestricted>:
{
    4cac:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    4cae:	b180      	cbz	r0, 4cd2 <vTaskPlaceOnEventListRestricted+0x26>
    4cb0:	4614      	mov	r4, r2
    4cb2:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    4cb4:	4b0b      	ldr	r3, [pc, #44]	; (4ce4 <vTaskPlaceOnEventListRestricted+0x38>)
    4cb6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4cba:	3118      	adds	r1, #24
    4cbc:	4b0a      	ldr	r3, [pc, #40]	; (4ce8 <vTaskPlaceOnEventListRestricted+0x3c>)
    4cbe:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    4cc0:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    4cc2:	4621      	mov	r1, r4
    4cc4:	bf0c      	ite	eq
    4cc6:	4628      	moveq	r0, r5
    4cc8:	f04f 30ff 	movne.w	r0, #4294967295
    4ccc:	4b07      	ldr	r3, [pc, #28]	; (4cec <vTaskPlaceOnEventListRestricted+0x40>)
    4cce:	4798      	blx	r3
    4cd0:	bd38      	pop	{r3, r4, r5, pc}
    4cd2:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cd6:	f383 8811 	msr	BASEPRI, r3
    4cda:	f3bf 8f6f 	isb	sy
    4cde:	f3bf 8f4f 	dsb	sy
    4ce2:	e7fe      	b.n	4ce2 <vTaskPlaceOnEventListRestricted+0x36>
    4ce4:	2000331c 	.word	0x2000331c
    4ce8:	00003631 	.word	0x00003631
    4cec:	00004579 	.word	0x00004579

00004cf0 <xTaskRemoveFromEventList>:
{
    4cf0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    4cf2:	68c3      	ldr	r3, [r0, #12]
    4cf4:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    4cf6:	2c00      	cmp	r4, #0
    4cf8:	d02a      	beq.n	4d50 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    4cfa:	f104 0518 	add.w	r5, r4, #24
    4cfe:	4628      	mov	r0, r5
    4d00:	4b1a      	ldr	r3, [pc, #104]	; (4d6c <xTaskRemoveFromEventList+0x7c>)
    4d02:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4d04:	4b1a      	ldr	r3, [pc, #104]	; (4d70 <xTaskRemoveFromEventList+0x80>)
    4d06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4d0a:	bb53      	cbnz	r3, 4d62 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    4d0c:	1d25      	adds	r5, r4, #4
    4d0e:	4628      	mov	r0, r5
    4d10:	4b16      	ldr	r3, [pc, #88]	; (4d6c <xTaskRemoveFromEventList+0x7c>)
    4d12:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    4d14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4d16:	4b16      	ldr	r3, [pc, #88]	; (4d70 <xTaskRemoveFromEventList+0x80>)
    4d18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4d1c:	4298      	cmp	r0, r3
    4d1e:	bf84      	itt	hi
    4d20:	4b13      	ldrhi	r3, [pc, #76]	; (4d70 <xTaskRemoveFromEventList+0x80>)
    4d22:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4d26:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4d2a:	4629      	mov	r1, r5
    4d2c:	4b11      	ldr	r3, [pc, #68]	; (4d74 <xTaskRemoveFromEventList+0x84>)
    4d2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4d32:	4b11      	ldr	r3, [pc, #68]	; (4d78 <xTaskRemoveFromEventList+0x88>)
    4d34:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    4d36:	4b0e      	ldr	r3, [pc, #56]	; (4d70 <xTaskRemoveFromEventList+0x80>)
    4d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4d3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d40:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    4d42:	bf83      	ittte	hi
    4d44:	2001      	movhi	r0, #1
    4d46:	4b0a      	ldrhi	r3, [pc, #40]	; (4d70 <xTaskRemoveFromEventList+0x80>)
    4d48:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    4d4c:	2000      	movls	r0, #0
}
    4d4e:	bd38      	pop	{r3, r4, r5, pc}
    4d50:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d54:	f383 8811 	msr	BASEPRI, r3
    4d58:	f3bf 8f6f 	isb	sy
    4d5c:	f3bf 8f4f 	dsb	sy
    4d60:	e7fe      	b.n	4d60 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    4d62:	4629      	mov	r1, r5
    4d64:	4805      	ldr	r0, [pc, #20]	; (4d7c <xTaskRemoveFromEventList+0x8c>)
    4d66:	4b04      	ldr	r3, [pc, #16]	; (4d78 <xTaskRemoveFromEventList+0x88>)
    4d68:	4798      	blx	r3
    4d6a:	e7e4      	b.n	4d36 <xTaskRemoveFromEventList+0x46>
    4d6c:	0000367d 	.word	0x0000367d
    4d70:	2000331c 	.word	0x2000331c
    4d74:	20003344 	.word	0x20003344
    4d78:	00003631 	.word	0x00003631
    4d7c:	20003330 	.word	0x20003330

00004d80 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    4d80:	4b03      	ldr	r3, [pc, #12]	; (4d90 <vTaskInternalSetTimeOutState+0x10>)
    4d82:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    4d86:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    4d8c:	6043      	str	r3, [r0, #4]
    4d8e:	4770      	bx	lr
    4d90:	2000331c 	.word	0x2000331c

00004d94 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    4d94:	b1f8      	cbz	r0, 4dd6 <xTaskCheckForTimeOut+0x42>
{
    4d96:	b570      	push	{r4, r5, r6, lr}
    4d98:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    4d9a:	b329      	cbz	r1, 4de8 <xTaskCheckForTimeOut+0x54>
    4d9c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    4d9e:	4b1c      	ldr	r3, [pc, #112]	; (4e10 <xTaskCheckForTimeOut+0x7c>)
    4da0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4da2:	4b1c      	ldr	r3, [pc, #112]	; (4e14 <xTaskCheckForTimeOut+0x80>)
    4da4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4da8:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    4daa:	6823      	ldr	r3, [r4, #0]
    4dac:	f1b3 3fff 	cmp.w	r3, #4294967295
    4db0:	d02a      	beq.n	4e08 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    4db2:	4818      	ldr	r0, [pc, #96]	; (4e14 <xTaskCheckForTimeOut+0x80>)
    4db4:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    4db8:	682e      	ldr	r6, [r5, #0]
    4dba:	4286      	cmp	r6, r0
    4dbc:	d001      	beq.n	4dc2 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    4dbe:	428a      	cmp	r2, r1
    4dc0:	d224      	bcs.n	4e0c <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4dc2:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    4dc4:	429a      	cmp	r2, r3
    4dc6:	d318      	bcc.n	4dfa <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    4dc8:	2300      	movs	r3, #0
    4dca:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    4dcc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    4dce:	4b12      	ldr	r3, [pc, #72]	; (4e18 <xTaskCheckForTimeOut+0x84>)
    4dd0:	4798      	blx	r3
}
    4dd2:	4620      	mov	r0, r4
    4dd4:	bd70      	pop	{r4, r5, r6, pc}
    4dd6:	f04f 0380 	mov.w	r3, #128	; 0x80
    4dda:	f383 8811 	msr	BASEPRI, r3
    4dde:	f3bf 8f6f 	isb	sy
    4de2:	f3bf 8f4f 	dsb	sy
    4de6:	e7fe      	b.n	4de6 <xTaskCheckForTimeOut+0x52>
    4de8:	f04f 0380 	mov.w	r3, #128	; 0x80
    4dec:	f383 8811 	msr	BASEPRI, r3
    4df0:	f3bf 8f6f 	isb	sy
    4df4:	f3bf 8f4f 	dsb	sy
    4df8:	e7fe      	b.n	4df8 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    4dfa:	1a9b      	subs	r3, r3, r2
    4dfc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    4dfe:	4628      	mov	r0, r5
    4e00:	4b06      	ldr	r3, [pc, #24]	; (4e1c <xTaskCheckForTimeOut+0x88>)
    4e02:	4798      	blx	r3
			xReturn = pdFALSE;
    4e04:	2400      	movs	r4, #0
    4e06:	e7e2      	b.n	4dce <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    4e08:	2400      	movs	r4, #0
    4e0a:	e7e0      	b.n	4dce <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    4e0c:	2401      	movs	r4, #1
    4e0e:	e7de      	b.n	4dce <xTaskCheckForTimeOut+0x3a>
    4e10:	00003775 	.word	0x00003775
    4e14:	2000331c 	.word	0x2000331c
    4e18:	000037b9 	.word	0x000037b9
    4e1c:	00004d81 	.word	0x00004d81

00004e20 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    4e20:	2201      	movs	r2, #1
    4e22:	4b02      	ldr	r3, [pc, #8]	; (4e2c <vTaskMissedYield+0xc>)
    4e24:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    4e28:	4770      	bx	lr
    4e2a:	bf00      	nop
    4e2c:	2000331c 	.word	0x2000331c

00004e30 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    4e30:	4b06      	ldr	r3, [pc, #24]	; (4e4c <xTaskGetSchedulerState+0x1c>)
    4e32:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4e36:	b13b      	cbz	r3, 4e48 <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4e38:	4b04      	ldr	r3, [pc, #16]	; (4e4c <xTaskGetSchedulerState+0x1c>)
    4e3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    4e3e:	2b00      	cmp	r3, #0
    4e40:	bf0c      	ite	eq
    4e42:	2002      	moveq	r0, #2
    4e44:	2000      	movne	r0, #0
    4e46:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    4e48:	2001      	movs	r0, #1
}
    4e4a:	4770      	bx	lr
    4e4c:	2000331c 	.word	0x2000331c

00004e50 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    4e50:	2800      	cmp	r0, #0
    4e52:	d045      	beq.n	4ee0 <xTaskPriorityInherit+0x90>
{
    4e54:	b538      	push	{r3, r4, r5, lr}
    4e56:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    4e58:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4e5a:	4922      	ldr	r1, [pc, #136]	; (4ee4 <xTaskPriorityInherit+0x94>)
    4e5c:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4e60:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4e62:	428a      	cmp	r2, r1
    4e64:	d232      	bcs.n	4ecc <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    4e66:	6981      	ldr	r1, [r0, #24]
    4e68:	2900      	cmp	r1, #0
    4e6a:	db06      	blt.n	4e7a <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    4e6c:	491d      	ldr	r1, [pc, #116]	; (4ee4 <xTaskPriorityInherit+0x94>)
    4e6e:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4e72:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4e74:	f1c1 0105 	rsb	r1, r1, #5
    4e78:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    4e7a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4e7e:	491a      	ldr	r1, [pc, #104]	; (4ee8 <xTaskPriorityInherit+0x98>)
    4e80:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4e84:	6969      	ldr	r1, [r5, #20]
    4e86:	4291      	cmp	r1, r2
    4e88:	d006      	beq.n	4e98 <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4e8a:	4a16      	ldr	r2, [pc, #88]	; (4ee4 <xTaskPriorityInherit+0x94>)
    4e8c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4e90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4e92:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    4e94:	2001      	movs	r0, #1
    4e96:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    4e98:	1d2c      	adds	r4, r5, #4
    4e9a:	4620      	mov	r0, r4
    4e9c:	4b13      	ldr	r3, [pc, #76]	; (4eec <xTaskPriorityInherit+0x9c>)
    4e9e:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4ea0:	4b10      	ldr	r3, [pc, #64]	; (4ee4 <xTaskPriorityInherit+0x94>)
    4ea2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4ea6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    4ea8:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    4eaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4eae:	4298      	cmp	r0, r3
    4eb0:	bf84      	itt	hi
    4eb2:	4b0c      	ldrhi	r3, [pc, #48]	; (4ee4 <xTaskPriorityInherit+0x94>)
    4eb4:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4eb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4ebc:	4621      	mov	r1, r4
    4ebe:	4b0a      	ldr	r3, [pc, #40]	; (4ee8 <xTaskPriorityInherit+0x98>)
    4ec0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4ec4:	4b0a      	ldr	r3, [pc, #40]	; (4ef0 <xTaskPriorityInherit+0xa0>)
    4ec6:	4798      	blx	r3
			xReturn = pdTRUE;
    4ec8:	2001      	movs	r0, #1
    4eca:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    4ecc:	4a05      	ldr	r2, [pc, #20]	; (4ee4 <xTaskPriorityInherit+0x94>)
    4ece:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4ed2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4ed4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4ed6:	4298      	cmp	r0, r3
    4ed8:	bf2c      	ite	cs
    4eda:	2000      	movcs	r0, #0
    4edc:	2001      	movcc	r0, #1
    4ede:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    4ee0:	2000      	movs	r0, #0
	return xReturn;
    4ee2:	4770      	bx	lr
    4ee4:	2000331c 	.word	0x2000331c
    4ee8:	20003344 	.word	0x20003344
    4eec:	0000367d 	.word	0x0000367d
    4ef0:	00003631 	.word	0x00003631

00004ef4 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    4ef4:	2800      	cmp	r0, #0
    4ef6:	d03c      	beq.n	4f72 <xTaskPriorityDisinherit+0x7e>
{
    4ef8:	b538      	push	{r3, r4, r5, lr}
    4efa:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    4efc:	4a20      	ldr	r2, [pc, #128]	; (4f80 <xTaskPriorityDisinherit+0x8c>)
    4efe:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4f02:	4290      	cmp	r0, r2
    4f04:	d008      	beq.n	4f18 <xTaskPriorityDisinherit+0x24>
    4f06:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f0a:	f383 8811 	msr	BASEPRI, r3
    4f0e:	f3bf 8f6f 	isb	sy
    4f12:	f3bf 8f4f 	dsb	sy
    4f16:	e7fe      	b.n	4f16 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    4f18:	6c82      	ldr	r2, [r0, #72]	; 0x48
    4f1a:	b942      	cbnz	r2, 4f2e <xTaskPriorityDisinherit+0x3a>
    4f1c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f20:	f383 8811 	msr	BASEPRI, r3
    4f24:	f3bf 8f6f 	isb	sy
    4f28:	f3bf 8f4f 	dsb	sy
    4f2c:	e7fe      	b.n	4f2c <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    4f2e:	3a01      	subs	r2, #1
    4f30:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    4f32:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4f34:	6c61      	ldr	r1, [r4, #68]	; 0x44
    4f36:	4288      	cmp	r0, r1
    4f38:	d01d      	beq.n	4f76 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    4f3a:	b9f2      	cbnz	r2, 4f7a <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4f3c:	1d25      	adds	r5, r4, #4
    4f3e:	4628      	mov	r0, r5
    4f40:	4b10      	ldr	r3, [pc, #64]	; (4f84 <xTaskPriorityDisinherit+0x90>)
    4f42:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4f44:	6c60      	ldr	r0, [r4, #68]	; 0x44
    4f46:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    4f48:	f1c0 0305 	rsb	r3, r0, #5
    4f4c:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    4f4e:	4b0c      	ldr	r3, [pc, #48]	; (4f80 <xTaskPriorityDisinherit+0x8c>)
    4f50:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4f54:	4298      	cmp	r0, r3
    4f56:	bf84      	itt	hi
    4f58:	4b09      	ldrhi	r3, [pc, #36]	; (4f80 <xTaskPriorityDisinherit+0x8c>)
    4f5a:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4f5e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4f62:	4629      	mov	r1, r5
    4f64:	4b08      	ldr	r3, [pc, #32]	; (4f88 <xTaskPriorityDisinherit+0x94>)
    4f66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4f6a:	4b08      	ldr	r3, [pc, #32]	; (4f8c <xTaskPriorityDisinherit+0x98>)
    4f6c:	4798      	blx	r3
				xReturn = pdTRUE;
    4f6e:	2001      	movs	r0, #1
    4f70:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    4f72:	2000      	movs	r0, #0
    4f74:	4770      	bx	lr
    4f76:	2000      	movs	r0, #0
    4f78:	bd38      	pop	{r3, r4, r5, pc}
    4f7a:	2000      	movs	r0, #0
}
    4f7c:	bd38      	pop	{r3, r4, r5, pc}
    4f7e:	bf00      	nop
    4f80:	2000331c 	.word	0x2000331c
    4f84:	0000367d 	.word	0x0000367d
    4f88:	20003344 	.word	0x20003344
    4f8c:	00003631 	.word	0x00003631

00004f90 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    4f90:	2800      	cmp	r0, #0
    4f92:	d049      	beq.n	5028 <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    4f94:	b538      	push	{r3, r4, r5, lr}
    4f96:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    4f98:	6c80      	ldr	r0, [r0, #72]	; 0x48
    4f9a:	b940      	cbnz	r0, 4fae <vTaskPriorityDisinheritAfterTimeout+0x1e>
    4f9c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4fa0:	f383 8811 	msr	BASEPRI, r3
    4fa4:	f3bf 8f6f 	isb	sy
    4fa8:	f3bf 8f4f 	dsb	sy
    4fac:	e7fe      	b.n	4fac <vTaskPriorityDisinheritAfterTimeout+0x1c>
    4fae:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4fb0:	428a      	cmp	r2, r1
    4fb2:	bf38      	it	cc
    4fb4:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    4fb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4fb8:	4291      	cmp	r1, r2
    4fba:	d001      	beq.n	4fc0 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    4fbc:	2801      	cmp	r0, #1
    4fbe:	d000      	beq.n	4fc2 <vTaskPriorityDisinheritAfterTimeout+0x32>
    4fc0:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    4fc2:	481a      	ldr	r0, [pc, #104]	; (502c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4fc4:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    4fc8:	4284      	cmp	r4, r0
    4fca:	d108      	bne.n	4fde <vTaskPriorityDisinheritAfterTimeout+0x4e>
    4fcc:	f04f 0380 	mov.w	r3, #128	; 0x80
    4fd0:	f383 8811 	msr	BASEPRI, r3
    4fd4:	f3bf 8f6f 	isb	sy
    4fd8:	f3bf 8f4f 	dsb	sy
    4fdc:	e7fe      	b.n	4fdc <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    4fde:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    4fe0:	69a0      	ldr	r0, [r4, #24]
    4fe2:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    4fe4:	bfa4      	itt	ge
    4fe6:	f1c2 0205 	rsbge	r2, r2, #5
    4fea:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    4fec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4ff0:	4a0f      	ldr	r2, [pc, #60]	; (5030 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4ff2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4ff6:	6962      	ldr	r2, [r4, #20]
    4ff8:	428a      	cmp	r2, r1
    4ffa:	d1e1      	bne.n	4fc0 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4ffc:	1d25      	adds	r5, r4, #4
    4ffe:	4628      	mov	r0, r5
    5000:	4b0c      	ldr	r3, [pc, #48]	; (5034 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    5002:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    5004:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5006:	4b09      	ldr	r3, [pc, #36]	; (502c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    5008:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    500c:	4298      	cmp	r0, r3
    500e:	bf84      	itt	hi
    5010:	4b06      	ldrhi	r3, [pc, #24]	; (502c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    5012:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5016:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    501a:	4629      	mov	r1, r5
    501c:	4b04      	ldr	r3, [pc, #16]	; (5030 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    501e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5022:	4b05      	ldr	r3, [pc, #20]	; (5038 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    5024:	4798      	blx	r3
}
    5026:	e7cb      	b.n	4fc0 <vTaskPriorityDisinheritAfterTimeout+0x30>
    5028:	4770      	bx	lr
    502a:	bf00      	nop
    502c:	2000331c 	.word	0x2000331c
    5030:	20003344 	.word	0x20003344
    5034:	0000367d 	.word	0x0000367d
    5038:	00003631 	.word	0x00003631

0000503c <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    503c:	4b06      	ldr	r3, [pc, #24]	; (5058 <pvTaskIncrementMutexHeldCount+0x1c>)
    503e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5042:	b12b      	cbz	r3, 5050 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    5044:	4b04      	ldr	r3, [pc, #16]	; (5058 <pvTaskIncrementMutexHeldCount+0x1c>)
    5046:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    504a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    504c:	3301      	adds	r3, #1
    504e:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    5050:	4b01      	ldr	r3, [pc, #4]	; (5058 <pvTaskIncrementMutexHeldCount+0x1c>)
    5052:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    5056:	4770      	bx	lr
    5058:	2000331c 	.word	0x2000331c

0000505c <xTaskNotifyWait>:
{
    505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    505e:	4607      	mov	r7, r0
    5060:	460d      	mov	r5, r1
    5062:	4614      	mov	r4, r2
    5064:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    5066:	4b25      	ldr	r3, [pc, #148]	; (50fc <xTaskNotifyWait+0xa0>)
    5068:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    506a:	4b25      	ldr	r3, [pc, #148]	; (5100 <xTaskNotifyWait+0xa4>)
    506c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5070:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    5074:	b2db      	uxtb	r3, r3
    5076:	2b02      	cmp	r3, #2
    5078:	d00c      	beq.n	5094 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    507a:	4b21      	ldr	r3, [pc, #132]	; (5100 <xTaskNotifyWait+0xa4>)
    507c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5080:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    5082:	ea20 0007 	bic.w	r0, r0, r7
    5086:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    5088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    508c:	2201      	movs	r2, #1
    508e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    5092:	b9e6      	cbnz	r6, 50ce <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    5094:	4b1b      	ldr	r3, [pc, #108]	; (5104 <xTaskNotifyWait+0xa8>)
    5096:	4798      	blx	r3
	taskENTER_CRITICAL();
    5098:	4b18      	ldr	r3, [pc, #96]	; (50fc <xTaskNotifyWait+0xa0>)
    509a:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    509c:	b124      	cbz	r4, 50a8 <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    509e:	4b18      	ldr	r3, [pc, #96]	; (5100 <xTaskNotifyWait+0xa4>)
    50a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    50a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    50a6:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    50a8:	4b15      	ldr	r3, [pc, #84]	; (5100 <xTaskNotifyWait+0xa4>)
    50aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    50ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    50b2:	b2db      	uxtb	r3, r3
    50b4:	2b02      	cmp	r3, #2
    50b6:	d017      	beq.n	50e8 <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    50b8:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    50ba:	4b11      	ldr	r3, [pc, #68]	; (5100 <xTaskNotifyWait+0xa4>)
    50bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    50c0:	2200      	movs	r2, #0
    50c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    50c6:	4b0f      	ldr	r3, [pc, #60]	; (5104 <xTaskNotifyWait+0xa8>)
    50c8:	4798      	blx	r3
}
    50ca:	4620      	mov	r0, r4
    50cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    50ce:	4611      	mov	r1, r2
    50d0:	4630      	mov	r0, r6
    50d2:	4b0d      	ldr	r3, [pc, #52]	; (5108 <xTaskNotifyWait+0xac>)
    50d4:	4798      	blx	r3
				portYIELD_WITHIN_API();
    50d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    50da:	4b0c      	ldr	r3, [pc, #48]	; (510c <xTaskNotifyWait+0xb0>)
    50dc:	601a      	str	r2, [r3, #0]
    50de:	f3bf 8f4f 	dsb	sy
    50e2:	f3bf 8f6f 	isb	sy
    50e6:	e7d5      	b.n	5094 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    50e8:	4b05      	ldr	r3, [pc, #20]	; (5100 <xTaskNotifyWait+0xa4>)
    50ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    50ee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    50f0:	ea23 0505 	bic.w	r5, r3, r5
    50f4:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    50f6:	2401      	movs	r4, #1
    50f8:	e7df      	b.n	50ba <xTaskNotifyWait+0x5e>
    50fa:	bf00      	nop
    50fc:	00003775 	.word	0x00003775
    5100:	2000331c 	.word	0x2000331c
    5104:	000037b9 	.word	0x000037b9
    5108:	00004579 	.word	0x00004579
    510c:	e000ed04 	.word	0xe000ed04

00005110 <xTaskGenericNotifyFromISR>:
{
    5110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5114:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    5116:	b310      	cbz	r0, 515e <xTaskGenericNotifyFromISR+0x4e>
    5118:	4604      	mov	r4, r0
    511a:	4699      	mov	r9, r3
    511c:	4617      	mov	r7, r2
    511e:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    5120:	4b3e      	ldr	r3, [pc, #248]	; (521c <xTaskGenericNotifyFromISR+0x10c>)
    5122:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    5124:	f3ef 8511 	mrs	r5, BASEPRI
    5128:	f04f 0380 	mov.w	r3, #128	; 0x80
    512c:	f383 8811 	msr	BASEPRI, r3
    5130:	f3bf 8f6f 	isb	sy
    5134:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    5138:	f1b9 0f00 	cmp.w	r9, #0
    513c:	d002      	beq.n	5144 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    513e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5140:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    5144:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    5148:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    514a:	2202      	movs	r2, #2
    514c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    5150:	1e7a      	subs	r2, r7, #1
    5152:	2a03      	cmp	r2, #3
    5154:	d810      	bhi.n	5178 <xTaskGenericNotifyFromISR+0x68>
    5156:	e8df f002 	tbb	[pc, r2]
    515a:	1c0b      	.short	0x1c0b
    515c:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    515e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5162:	f383 8811 	msr	BASEPRI, r3
    5166:	f3bf 8f6f 	isb	sy
    516a:	f3bf 8f4f 	dsb	sy
    516e:	e7fe      	b.n	516e <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    5170:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5172:	ea42 0208 	orr.w	r2, r2, r8
    5176:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    5178:	2b01      	cmp	r3, #1
    517a:	d147      	bne.n	520c <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    517c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    517e:	b1a3      	cbz	r3, 51aa <xTaskGenericNotifyFromISR+0x9a>
    5180:	f04f 0380 	mov.w	r3, #128	; 0x80
    5184:	f383 8811 	msr	BASEPRI, r3
    5188:	f3bf 8f6f 	isb	sy
    518c:	f3bf 8f4f 	dsb	sy
    5190:	e7fe      	b.n	5190 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    5192:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5194:	3201      	adds	r2, #1
    5196:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    5198:	e7ee      	b.n	5178 <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    519a:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    519e:	e7eb      	b.n	5178 <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    51a0:	2b02      	cmp	r3, #2
    51a2:	d031      	beq.n	5208 <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    51a4:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    51a8:	e7e6      	b.n	5178 <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    51aa:	4b1d      	ldr	r3, [pc, #116]	; (5220 <xTaskGenericNotifyFromISR+0x110>)
    51ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    51b0:	b9fb      	cbnz	r3, 51f2 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    51b2:	1d27      	adds	r7, r4, #4
    51b4:	4638      	mov	r0, r7
    51b6:	4b1b      	ldr	r3, [pc, #108]	; (5224 <xTaskGenericNotifyFromISR+0x114>)
    51b8:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    51ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    51bc:	4b18      	ldr	r3, [pc, #96]	; (5220 <xTaskGenericNotifyFromISR+0x110>)
    51be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    51c2:	4298      	cmp	r0, r3
    51c4:	bf84      	itt	hi
    51c6:	4b16      	ldrhi	r3, [pc, #88]	; (5220 <xTaskGenericNotifyFromISR+0x110>)
    51c8:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    51cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    51d0:	4639      	mov	r1, r7
    51d2:	4b15      	ldr	r3, [pc, #84]	; (5228 <xTaskGenericNotifyFromISR+0x118>)
    51d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    51d8:	4b14      	ldr	r3, [pc, #80]	; (522c <xTaskGenericNotifyFromISR+0x11c>)
    51da:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    51dc:	4b10      	ldr	r3, [pc, #64]	; (5220 <xTaskGenericNotifyFromISR+0x110>)
    51de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    51e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    51e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    51e6:	429a      	cmp	r2, r3
    51e8:	d915      	bls.n	5216 <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    51ea:	b146      	cbz	r6, 51fe <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    51ec:	2001      	movs	r0, #1
    51ee:	6030      	str	r0, [r6, #0]
    51f0:	e00d      	b.n	520e <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    51f2:	f104 0118 	add.w	r1, r4, #24
    51f6:	480e      	ldr	r0, [pc, #56]	; (5230 <xTaskGenericNotifyFromISR+0x120>)
    51f8:	4b0c      	ldr	r3, [pc, #48]	; (522c <xTaskGenericNotifyFromISR+0x11c>)
    51fa:	4798      	blx	r3
    51fc:	e7ee      	b.n	51dc <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    51fe:	2001      	movs	r0, #1
    5200:	4b07      	ldr	r3, [pc, #28]	; (5220 <xTaskGenericNotifyFromISR+0x110>)
    5202:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    5206:	e002      	b.n	520e <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    5208:	2000      	movs	r0, #0
    520a:	e000      	b.n	520e <xTaskGenericNotifyFromISR+0xfe>
    520c:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    520e:	f385 8811 	msr	BASEPRI, r5
}
    5212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5216:	2001      	movs	r0, #1
    5218:	e7f9      	b.n	520e <xTaskGenericNotifyFromISR+0xfe>
    521a:	bf00      	nop
    521c:	000039cd 	.word	0x000039cd
    5220:	2000331c 	.word	0x2000331c
    5224:	0000367d 	.word	0x0000367d
    5228:	20003344 	.word	0x20003344
    522c:	00003631 	.word	0x00003631
    5230:	20003330 	.word	0x20003330

00005234 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    5234:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    5236:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    5238:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    523a:	4291      	cmp	r1, r2
    523c:	d80c      	bhi.n	5258 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    523e:	1ad2      	subs	r2, r2, r3
    5240:	6983      	ldr	r3, [r0, #24]
    5242:	429a      	cmp	r2, r3
    5244:	d301      	bcc.n	524a <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    5246:	2001      	movs	r0, #1
    5248:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    524a:	1d01      	adds	r1, r0, #4
    524c:	4b09      	ldr	r3, [pc, #36]	; (5274 <prvInsertTimerInActiveList+0x40>)
    524e:	6818      	ldr	r0, [r3, #0]
    5250:	4b09      	ldr	r3, [pc, #36]	; (5278 <prvInsertTimerInActiveList+0x44>)
    5252:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    5254:	2000      	movs	r0, #0
    5256:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    5258:	429a      	cmp	r2, r3
    525a:	d201      	bcs.n	5260 <prvInsertTimerInActiveList+0x2c>
    525c:	4299      	cmp	r1, r3
    525e:	d206      	bcs.n	526e <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    5260:	1d01      	adds	r1, r0, #4
    5262:	4b04      	ldr	r3, [pc, #16]	; (5274 <prvInsertTimerInActiveList+0x40>)
    5264:	6858      	ldr	r0, [r3, #4]
    5266:	4b04      	ldr	r3, [pc, #16]	; (5278 <prvInsertTimerInActiveList+0x44>)
    5268:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    526a:	2000      	movs	r0, #0
    526c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    526e:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    5270:	bd08      	pop	{r3, pc}
    5272:	bf00      	nop
    5274:	20003408 	.word	0x20003408
    5278:	00003649 	.word	0x00003649

0000527c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    527e:	4b0d      	ldr	r3, [pc, #52]	; (52b4 <prvCheckForValidListAndQueue+0x38>)
    5280:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    5282:	4b0d      	ldr	r3, [pc, #52]	; (52b8 <prvCheckForValidListAndQueue+0x3c>)
    5284:	689b      	ldr	r3, [r3, #8]
    5286:	b113      	cbz	r3, 528e <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    5288:	4b0c      	ldr	r3, [pc, #48]	; (52bc <prvCheckForValidListAndQueue+0x40>)
    528a:	4798      	blx	r3
    528c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    528e:	4c0a      	ldr	r4, [pc, #40]	; (52b8 <prvCheckForValidListAndQueue+0x3c>)
    5290:	f104 060c 	add.w	r6, r4, #12
    5294:	4630      	mov	r0, r6
    5296:	4f0a      	ldr	r7, [pc, #40]	; (52c0 <prvCheckForValidListAndQueue+0x44>)
    5298:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    529a:	f104 0520 	add.w	r5, r4, #32
    529e:	4628      	mov	r0, r5
    52a0:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    52a2:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    52a4:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    52a6:	2200      	movs	r2, #0
    52a8:	210c      	movs	r1, #12
    52aa:	2014      	movs	r0, #20
    52ac:	4b05      	ldr	r3, [pc, #20]	; (52c4 <prvCheckForValidListAndQueue+0x48>)
    52ae:	4798      	blx	r3
    52b0:	60a0      	str	r0, [r4, #8]
    52b2:	e7e9      	b.n	5288 <prvCheckForValidListAndQueue+0xc>
    52b4:	00003775 	.word	0x00003775
    52b8:	20003408 	.word	0x20003408
    52bc:	000037b9 	.word	0x000037b9
    52c0:	00003615 	.word	0x00003615
    52c4:	00003dc9 	.word	0x00003dc9

000052c8 <xTimerCreateTimerTask>:
{
    52c8:	b510      	push	{r4, lr}
    52ca:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    52cc:	4b0d      	ldr	r3, [pc, #52]	; (5304 <xTimerCreateTimerTask+0x3c>)
    52ce:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    52d0:	4b0d      	ldr	r3, [pc, #52]	; (5308 <xTimerCreateTimerTask+0x40>)
    52d2:	689b      	ldr	r3, [r3, #8]
    52d4:	b163      	cbz	r3, 52f0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    52d6:	4b0d      	ldr	r3, [pc, #52]	; (530c <xTimerCreateTimerTask+0x44>)
    52d8:	9301      	str	r3, [sp, #4]
    52da:	2303      	movs	r3, #3
    52dc:	9300      	str	r3, [sp, #0]
    52de:	2300      	movs	r3, #0
    52e0:	2280      	movs	r2, #128	; 0x80
    52e2:	490b      	ldr	r1, [pc, #44]	; (5310 <xTimerCreateTimerTask+0x48>)
    52e4:	480b      	ldr	r0, [pc, #44]	; (5314 <xTimerCreateTimerTask+0x4c>)
    52e6:	4c0c      	ldr	r4, [pc, #48]	; (5318 <xTimerCreateTimerTask+0x50>)
    52e8:	47a0      	blx	r4
	configASSERT(xReturn);
    52ea:	b108      	cbz	r0, 52f0 <xTimerCreateTimerTask+0x28>
}
    52ec:	b002      	add	sp, #8
    52ee:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    52f0:	f04f 0380 	mov.w	r3, #128	; 0x80
    52f4:	f383 8811 	msr	BASEPRI, r3
    52f8:	f3bf 8f6f 	isb	sy
    52fc:	f3bf 8f4f 	dsb	sy
    5300:	e7fe      	b.n	5300 <xTimerCreateTimerTask+0x38>
    5302:	bf00      	nop
    5304:	0000527d 	.word	0x0000527d
    5308:	20003408 	.word	0x20003408
    530c:	2000343c 	.word	0x2000343c
    5310:	00007588 	.word	0x00007588
    5314:	00005435 	.word	0x00005435
    5318:	000045f9 	.word	0x000045f9

0000531c <xTimerGenericCommand>:
	configASSERT(xTimer);
    531c:	b1d8      	cbz	r0, 5356 <xTimerGenericCommand+0x3a>
{
    531e:	b530      	push	{r4, r5, lr}
    5320:	b085      	sub	sp, #20
    5322:	4615      	mov	r5, r2
    5324:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    5326:	4a14      	ldr	r2, [pc, #80]	; (5378 <xTimerGenericCommand+0x5c>)
    5328:	6890      	ldr	r0, [r2, #8]
    532a:	b310      	cbz	r0, 5372 <xTimerGenericCommand+0x56>
    532c:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    532e:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    5330:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    5332:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    5334:	2905      	cmp	r1, #5
    5336:	dc17      	bgt.n	5368 <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    5338:	4b10      	ldr	r3, [pc, #64]	; (537c <xTimerGenericCommand+0x60>)
    533a:	4798      	blx	r3
    533c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    533e:	f04f 0300 	mov.w	r3, #0
    5342:	bf0c      	ite	eq
    5344:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    5346:	461a      	movne	r2, r3
    5348:	a901      	add	r1, sp, #4
    534a:	480b      	ldr	r0, [pc, #44]	; (5378 <xTimerGenericCommand+0x5c>)
    534c:	6880      	ldr	r0, [r0, #8]
    534e:	4c0c      	ldr	r4, [pc, #48]	; (5380 <xTimerGenericCommand+0x64>)
    5350:	47a0      	blx	r4
}
    5352:	b005      	add	sp, #20
    5354:	bd30      	pop	{r4, r5, pc}
    5356:	f04f 0380 	mov.w	r3, #128	; 0x80
    535a:	f383 8811 	msr	BASEPRI, r3
    535e:	f3bf 8f6f 	isb	sy
    5362:	f3bf 8f4f 	dsb	sy
    5366:	e7fe      	b.n	5366 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    5368:	2300      	movs	r3, #0
    536a:	a901      	add	r1, sp, #4
    536c:	4c05      	ldr	r4, [pc, #20]	; (5384 <xTimerGenericCommand+0x68>)
    536e:	47a0      	blx	r4
    5370:	e7ef      	b.n	5352 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    5372:	2000      	movs	r0, #0
	return xReturn;
    5374:	e7ed      	b.n	5352 <xTimerGenericCommand+0x36>
    5376:	bf00      	nop
    5378:	20003408 	.word	0x20003408
    537c:	00004e31 	.word	0x00004e31
    5380:	00003e21 	.word	0x00003e21
    5384:	00004029 	.word	0x00004029

00005388 <prvSampleTimeNow>:
{
    5388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    538c:	b082      	sub	sp, #8
    538e:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    5390:	4b23      	ldr	r3, [pc, #140]	; (5420 <prvSampleTimeNow+0x98>)
    5392:	4798      	blx	r3
    5394:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    5396:	4b23      	ldr	r3, [pc, #140]	; (5424 <prvSampleTimeNow+0x9c>)
    5398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    539a:	4298      	cmp	r0, r3
    539c:	d319      	bcc.n	53d2 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    539e:	2300      	movs	r3, #0
    53a0:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    53a4:	4b1f      	ldr	r3, [pc, #124]	; (5424 <prvSampleTimeNow+0x9c>)
    53a6:	639f      	str	r7, [r3, #56]	; 0x38
}
    53a8:	4638      	mov	r0, r7
    53aa:	b002      	add	sp, #8
    53ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    53b0:	2100      	movs	r1, #0
    53b2:	9100      	str	r1, [sp, #0]
    53b4:	460b      	mov	r3, r1
    53b6:	4652      	mov	r2, sl
    53b8:	4620      	mov	r0, r4
    53ba:	4c1b      	ldr	r4, [pc, #108]	; (5428 <prvSampleTimeNow+0xa0>)
    53bc:	47a0      	blx	r4
				configASSERT(xResult);
    53be:	b950      	cbnz	r0, 53d6 <prvSampleTimeNow+0x4e>
    53c0:	f04f 0380 	mov.w	r3, #128	; 0x80
    53c4:	f383 8811 	msr	BASEPRI, r3
    53c8:	f3bf 8f6f 	isb	sy
    53cc:	f3bf 8f4f 	dsb	sy
    53d0:	e7fe      	b.n	53d0 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    53d2:	4d14      	ldr	r5, [pc, #80]	; (5424 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    53d4:	4e15      	ldr	r6, [pc, #84]	; (542c <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    53d6:	686b      	ldr	r3, [r5, #4]
    53d8:	681a      	ldr	r2, [r3, #0]
    53da:	b1c2      	cbz	r2, 540e <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    53dc:	68db      	ldr	r3, [r3, #12]
    53de:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    53e2:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    53e4:	f104 0904 	add.w	r9, r4, #4
    53e8:	4648      	mov	r0, r9
    53ea:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    53ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    53ee:	4620      	mov	r0, r4
    53f0:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    53f2:	69e3      	ldr	r3, [r4, #28]
    53f4:	2b01      	cmp	r3, #1
    53f6:	d1ee      	bne.n	53d6 <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    53f8:	69a3      	ldr	r3, [r4, #24]
    53fa:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    53fc:	459a      	cmp	sl, r3
    53fe:	d2d7      	bcs.n	53b0 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    5400:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    5402:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    5404:	4649      	mov	r1, r9
    5406:	6868      	ldr	r0, [r5, #4]
    5408:	4b09      	ldr	r3, [pc, #36]	; (5430 <prvSampleTimeNow+0xa8>)
    540a:	4798      	blx	r3
    540c:	e7e3      	b.n	53d6 <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    540e:	4a05      	ldr	r2, [pc, #20]	; (5424 <prvSampleTimeNow+0x9c>)
    5410:	6811      	ldr	r1, [r2, #0]
    5412:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    5414:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    5416:	2301      	movs	r3, #1
    5418:	f8c8 3000 	str.w	r3, [r8]
    541c:	e7c2      	b.n	53a4 <prvSampleTimeNow+0x1c>
    541e:	bf00      	nop
    5420:	00004871 	.word	0x00004871
    5424:	20003408 	.word	0x20003408
    5428:	0000531d 	.word	0x0000531d
    542c:	0000367d 	.word	0x0000367d
    5430:	00003649 	.word	0x00003649

00005434 <prvTimerTask>:
{
    5434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5438:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    543a:	4c65      	ldr	r4, [pc, #404]	; (55d0 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    543c:	4f65      	ldr	r7, [pc, #404]	; (55d4 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    543e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 55f4 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    5442:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 55f8 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    5446:	6863      	ldr	r3, [r4, #4]
    5448:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    544a:	b172      	cbz	r2, 546a <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    544c:	68db      	ldr	r3, [r3, #12]
    544e:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    5450:	4b61      	ldr	r3, [pc, #388]	; (55d8 <prvTimerTask+0x1a4>)
    5452:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    5454:	a803      	add	r0, sp, #12
    5456:	4b61      	ldr	r3, [pc, #388]	; (55dc <prvTimerTask+0x1a8>)
    5458:	4798      	blx	r3
    545a:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    545c:	9b03      	ldr	r3, [sp, #12]
    545e:	2b00      	cmp	r3, #0
    5460:	d179      	bne.n	5556 <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    5462:	42a8      	cmp	r0, r5
    5464:	d24a      	bcs.n	54fc <prvTimerTask+0xc8>
    5466:	2200      	movs	r2, #0
    5468:	e00e      	b.n	5488 <prvTimerTask+0x54>
	vTaskSuspendAll();
    546a:	4b5b      	ldr	r3, [pc, #364]	; (55d8 <prvTimerTask+0x1a4>)
    546c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    546e:	a803      	add	r0, sp, #12
    5470:	4b5a      	ldr	r3, [pc, #360]	; (55dc <prvTimerTask+0x1a8>)
    5472:	4798      	blx	r3
    5474:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    5476:	9b03      	ldr	r3, [sp, #12]
    5478:	2b00      	cmp	r3, #0
    547a:	d16c      	bne.n	5556 <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    547c:	6823      	ldr	r3, [r4, #0]
    547e:	681a      	ldr	r2, [r3, #0]
    5480:	fab2 f282 	clz	r2, r2
    5484:	0952      	lsrs	r2, r2, #5
    5486:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    5488:	1ba9      	subs	r1, r5, r6
    548a:	68a0      	ldr	r0, [r4, #8]
    548c:	4b54      	ldr	r3, [pc, #336]	; (55e0 <prvTimerTask+0x1ac>)
    548e:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    5490:	47b8      	blx	r7
    5492:	b938      	cbnz	r0, 54a4 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    5494:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5498:	f8c9 3000 	str.w	r3, [r9]
    549c:	f3bf 8f4f 	dsb	sy
    54a0:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    54a4:	4d4f      	ldr	r5, [pc, #316]	; (55e4 <prvTimerTask+0x1b0>)
    54a6:	2200      	movs	r2, #0
    54a8:	a903      	add	r1, sp, #12
    54aa:	68a0      	ldr	r0, [r4, #8]
    54ac:	47a8      	blx	r5
    54ae:	2800      	cmp	r0, #0
    54b0:	d0c9      	beq.n	5446 <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    54b2:	9b03      	ldr	r3, [sp, #12]
    54b4:	2b00      	cmp	r3, #0
    54b6:	dbf6      	blt.n	54a6 <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    54b8:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    54ba:	6973      	ldr	r3, [r6, #20]
    54bc:	b10b      	cbz	r3, 54c2 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    54be:	1d30      	adds	r0, r6, #4
    54c0:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    54c2:	a802      	add	r0, sp, #8
    54c4:	4b45      	ldr	r3, [pc, #276]	; (55dc <prvTimerTask+0x1a8>)
    54c6:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    54c8:	9b03      	ldr	r3, [sp, #12]
    54ca:	2b09      	cmp	r3, #9
    54cc:	d8eb      	bhi.n	54a6 <prvTimerTask+0x72>
    54ce:	a201      	add	r2, pc, #4	; (adr r2, 54d4 <prvTimerTask+0xa0>)
    54d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    54d4:	0000555b 	.word	0x0000555b
    54d8:	0000555b 	.word	0x0000555b
    54dc:	0000555b 	.word	0x0000555b
    54e0:	000054a7 	.word	0x000054a7
    54e4:	000055a3 	.word	0x000055a3
    54e8:	000055c9 	.word	0x000055c9
    54ec:	0000555b 	.word	0x0000555b
    54f0:	0000555b 	.word	0x0000555b
    54f4:	000054a7 	.word	0x000054a7
    54f8:	000055a3 	.word	0x000055a3
				(void)xTaskResumeAll();
    54fc:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    54fe:	6863      	ldr	r3, [r4, #4]
    5500:	68db      	ldr	r3, [r3, #12]
    5502:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    5506:	f10a 0004 	add.w	r0, sl, #4
    550a:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    550c:	f8da 301c 	ldr.w	r3, [sl, #28]
    5510:	2b01      	cmp	r3, #1
    5512:	d004      	beq.n	551e <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    5514:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    5518:	4650      	mov	r0, sl
    551a:	4798      	blx	r3
    551c:	e7c2      	b.n	54a4 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    551e:	f8da 1018 	ldr.w	r1, [sl, #24]
    5522:	462b      	mov	r3, r5
    5524:	4632      	mov	r2, r6
    5526:	4429      	add	r1, r5
    5528:	4650      	mov	r0, sl
    552a:	4e2f      	ldr	r6, [pc, #188]	; (55e8 <prvTimerTask+0x1b4>)
    552c:	47b0      	blx	r6
    552e:	2800      	cmp	r0, #0
    5530:	d0f0      	beq.n	5514 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    5532:	2100      	movs	r1, #0
    5534:	9100      	str	r1, [sp, #0]
    5536:	460b      	mov	r3, r1
    5538:	462a      	mov	r2, r5
    553a:	4650      	mov	r0, sl
    553c:	4d2b      	ldr	r5, [pc, #172]	; (55ec <prvTimerTask+0x1b8>)
    553e:	47a8      	blx	r5
			configASSERT(xResult);
    5540:	2800      	cmp	r0, #0
    5542:	d1e7      	bne.n	5514 <prvTimerTask+0xe0>
    5544:	f04f 0380 	mov.w	r3, #128	; 0x80
    5548:	f383 8811 	msr	BASEPRI, r3
    554c:	f3bf 8f6f 	isb	sy
    5550:	f3bf 8f4f 	dsb	sy
    5554:	e7fe      	b.n	5554 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    5556:	47b8      	blx	r7
    5558:	e7a4      	b.n	54a4 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    555a:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    555c:	69b1      	ldr	r1, [r6, #24]
    555e:	462b      	mov	r3, r5
    5560:	4602      	mov	r2, r0
    5562:	4429      	add	r1, r5
    5564:	4630      	mov	r0, r6
    5566:	4d20      	ldr	r5, [pc, #128]	; (55e8 <prvTimerTask+0x1b4>)
    5568:	47a8      	blx	r5
    556a:	2800      	cmp	r0, #0
    556c:	d09a      	beq.n	54a4 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    556e:	6a73      	ldr	r3, [r6, #36]	; 0x24
    5570:	4630      	mov	r0, r6
    5572:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    5574:	69f3      	ldr	r3, [r6, #28]
    5576:	2b01      	cmp	r3, #1
    5578:	d194      	bne.n	54a4 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    557a:	69b2      	ldr	r2, [r6, #24]
    557c:	2100      	movs	r1, #0
    557e:	9100      	str	r1, [sp, #0]
    5580:	460b      	mov	r3, r1
    5582:	9804      	ldr	r0, [sp, #16]
    5584:	4402      	add	r2, r0
    5586:	4630      	mov	r0, r6
    5588:	4d18      	ldr	r5, [pc, #96]	; (55ec <prvTimerTask+0x1b8>)
    558a:	47a8      	blx	r5
						configASSERT(xResult);
    558c:	2800      	cmp	r0, #0
    558e:	d189      	bne.n	54a4 <prvTimerTask+0x70>
    5590:	f04f 0380 	mov.w	r3, #128	; 0x80
    5594:	f383 8811 	msr	BASEPRI, r3
    5598:	f3bf 8f6f 	isb	sy
    559c:	f3bf 8f4f 	dsb	sy
    55a0:	e7fe      	b.n	55a0 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    55a2:	9904      	ldr	r1, [sp, #16]
    55a4:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    55a6:	b131      	cbz	r1, 55b6 <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    55a8:	4603      	mov	r3, r0
    55aa:	4602      	mov	r2, r0
    55ac:	4401      	add	r1, r0
    55ae:	4630      	mov	r0, r6
    55b0:	4d0d      	ldr	r5, [pc, #52]	; (55e8 <prvTimerTask+0x1b4>)
    55b2:	47a8      	blx	r5
    55b4:	e776      	b.n	54a4 <prvTimerTask+0x70>
    55b6:	f04f 0380 	mov.w	r3, #128	; 0x80
    55ba:	f383 8811 	msr	BASEPRI, r3
    55be:	f3bf 8f6f 	isb	sy
    55c2:	f3bf 8f4f 	dsb	sy
    55c6:	e7fe      	b.n	55c6 <prvTimerTask+0x192>
				vPortFree(pxTimer);
    55c8:	4630      	mov	r0, r6
    55ca:	4b09      	ldr	r3, [pc, #36]	; (55f0 <prvTimerTask+0x1bc>)
    55cc:	4798      	blx	r3
    55ce:	e769      	b.n	54a4 <prvTimerTask+0x70>
    55d0:	20003408 	.word	0x20003408
    55d4:	000049a5 	.word	0x000049a5
    55d8:	0000485d 	.word	0x0000485d
    55dc:	00005389 	.word	0x00005389
    55e0:	000044c9 	.word	0x000044c9
    55e4:	00004131 	.word	0x00004131
    55e8:	00005235 	.word	0x00005235
    55ec:	0000531d 	.word	0x0000531d
    55f0:	00003af9 	.word	0x00003af9
    55f4:	e000ed04 	.word	0xe000ed04
    55f8:	0000367d 	.word	0x0000367d

000055fc <__libc_init_array>:
    55fc:	b570      	push	{r4, r5, r6, lr}
    55fe:	4e0d      	ldr	r6, [pc, #52]	; (5634 <__libc_init_array+0x38>)
    5600:	4c0d      	ldr	r4, [pc, #52]	; (5638 <__libc_init_array+0x3c>)
    5602:	1ba4      	subs	r4, r4, r6
    5604:	10a4      	asrs	r4, r4, #2
    5606:	2500      	movs	r5, #0
    5608:	42a5      	cmp	r5, r4
    560a:	d109      	bne.n	5620 <__libc_init_array+0x24>
    560c:	4e0b      	ldr	r6, [pc, #44]	; (563c <__libc_init_array+0x40>)
    560e:	4c0c      	ldr	r4, [pc, #48]	; (5640 <__libc_init_array+0x44>)
    5610:	f002 f808 	bl	7624 <_init>
    5614:	1ba4      	subs	r4, r4, r6
    5616:	10a4      	asrs	r4, r4, #2
    5618:	2500      	movs	r5, #0
    561a:	42a5      	cmp	r5, r4
    561c:	d105      	bne.n	562a <__libc_init_array+0x2e>
    561e:	bd70      	pop	{r4, r5, r6, pc}
    5620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5624:	4798      	blx	r3
    5626:	3501      	adds	r5, #1
    5628:	e7ee      	b.n	5608 <__libc_init_array+0xc>
    562a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    562e:	4798      	blx	r3
    5630:	3501      	adds	r5, #1
    5632:	e7f2      	b.n	561a <__libc_init_array+0x1e>
    5634:	00007630 	.word	0x00007630
    5638:	00007630 	.word	0x00007630
    563c:	00007630 	.word	0x00007630
    5640:	00007634 	.word	0x00007634

00005644 <memcpy>:
    5644:	b510      	push	{r4, lr}
    5646:	1e43      	subs	r3, r0, #1
    5648:	440a      	add	r2, r1
    564a:	4291      	cmp	r1, r2
    564c:	d100      	bne.n	5650 <memcpy+0xc>
    564e:	bd10      	pop	{r4, pc}
    5650:	f811 4b01 	ldrb.w	r4, [r1], #1
    5654:	f803 4f01 	strb.w	r4, [r3, #1]!
    5658:	e7f7      	b.n	564a <memcpy+0x6>

0000565a <memmove>:
    565a:	4288      	cmp	r0, r1
    565c:	b510      	push	{r4, lr}
    565e:	eb01 0302 	add.w	r3, r1, r2
    5662:	d803      	bhi.n	566c <memmove+0x12>
    5664:	1e42      	subs	r2, r0, #1
    5666:	4299      	cmp	r1, r3
    5668:	d10c      	bne.n	5684 <memmove+0x2a>
    566a:	bd10      	pop	{r4, pc}
    566c:	4298      	cmp	r0, r3
    566e:	d2f9      	bcs.n	5664 <memmove+0xa>
    5670:	1881      	adds	r1, r0, r2
    5672:	1ad2      	subs	r2, r2, r3
    5674:	42d3      	cmn	r3, r2
    5676:	d100      	bne.n	567a <memmove+0x20>
    5678:	bd10      	pop	{r4, pc}
    567a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    567e:	f801 4d01 	strb.w	r4, [r1, #-1]!
    5682:	e7f7      	b.n	5674 <memmove+0x1a>
    5684:	f811 4b01 	ldrb.w	r4, [r1], #1
    5688:	f802 4f01 	strb.w	r4, [r2, #1]!
    568c:	e7eb      	b.n	5666 <memmove+0xc>

0000568e <memset>:
    568e:	4402      	add	r2, r0
    5690:	4603      	mov	r3, r0
    5692:	4293      	cmp	r3, r2
    5694:	d100      	bne.n	5698 <memset+0xa>
    5696:	4770      	bx	lr
    5698:	f803 1b01 	strb.w	r1, [r3], #1
    569c:	e7f9      	b.n	5692 <memset+0x4>
	...

000056a0 <_free_r>:
    56a0:	b538      	push	{r3, r4, r5, lr}
    56a2:	4605      	mov	r5, r0
    56a4:	2900      	cmp	r1, #0
    56a6:	d045      	beq.n	5734 <_free_r+0x94>
    56a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
    56ac:	1f0c      	subs	r4, r1, #4
    56ae:	2b00      	cmp	r3, #0
    56b0:	bfb8      	it	lt
    56b2:	18e4      	addlt	r4, r4, r3
    56b4:	f000 f8f6 	bl	58a4 <__malloc_lock>
    56b8:	4a1f      	ldr	r2, [pc, #124]	; (5738 <_free_r+0x98>)
    56ba:	6813      	ldr	r3, [r2, #0]
    56bc:	4610      	mov	r0, r2
    56be:	b933      	cbnz	r3, 56ce <_free_r+0x2e>
    56c0:	6063      	str	r3, [r4, #4]
    56c2:	6014      	str	r4, [r2, #0]
    56c4:	4628      	mov	r0, r5
    56c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    56ca:	f000 b8ec 	b.w	58a6 <__malloc_unlock>
    56ce:	42a3      	cmp	r3, r4
    56d0:	d90c      	bls.n	56ec <_free_r+0x4c>
    56d2:	6821      	ldr	r1, [r4, #0]
    56d4:	1862      	adds	r2, r4, r1
    56d6:	4293      	cmp	r3, r2
    56d8:	bf04      	itt	eq
    56da:	681a      	ldreq	r2, [r3, #0]
    56dc:	685b      	ldreq	r3, [r3, #4]
    56de:	6063      	str	r3, [r4, #4]
    56e0:	bf04      	itt	eq
    56e2:	1852      	addeq	r2, r2, r1
    56e4:	6022      	streq	r2, [r4, #0]
    56e6:	6004      	str	r4, [r0, #0]
    56e8:	e7ec      	b.n	56c4 <_free_r+0x24>
    56ea:	4613      	mov	r3, r2
    56ec:	685a      	ldr	r2, [r3, #4]
    56ee:	b10a      	cbz	r2, 56f4 <_free_r+0x54>
    56f0:	42a2      	cmp	r2, r4
    56f2:	d9fa      	bls.n	56ea <_free_r+0x4a>
    56f4:	6819      	ldr	r1, [r3, #0]
    56f6:	1858      	adds	r0, r3, r1
    56f8:	42a0      	cmp	r0, r4
    56fa:	d10b      	bne.n	5714 <_free_r+0x74>
    56fc:	6820      	ldr	r0, [r4, #0]
    56fe:	4401      	add	r1, r0
    5700:	1858      	adds	r0, r3, r1
    5702:	4282      	cmp	r2, r0
    5704:	6019      	str	r1, [r3, #0]
    5706:	d1dd      	bne.n	56c4 <_free_r+0x24>
    5708:	6810      	ldr	r0, [r2, #0]
    570a:	6852      	ldr	r2, [r2, #4]
    570c:	605a      	str	r2, [r3, #4]
    570e:	4401      	add	r1, r0
    5710:	6019      	str	r1, [r3, #0]
    5712:	e7d7      	b.n	56c4 <_free_r+0x24>
    5714:	d902      	bls.n	571c <_free_r+0x7c>
    5716:	230c      	movs	r3, #12
    5718:	602b      	str	r3, [r5, #0]
    571a:	e7d3      	b.n	56c4 <_free_r+0x24>
    571c:	6820      	ldr	r0, [r4, #0]
    571e:	1821      	adds	r1, r4, r0
    5720:	428a      	cmp	r2, r1
    5722:	bf04      	itt	eq
    5724:	6811      	ldreq	r1, [r2, #0]
    5726:	6852      	ldreq	r2, [r2, #4]
    5728:	6062      	str	r2, [r4, #4]
    572a:	bf04      	itt	eq
    572c:	1809      	addeq	r1, r1, r0
    572e:	6021      	streq	r1, [r4, #0]
    5730:	605c      	str	r4, [r3, #4]
    5732:	e7c7      	b.n	56c4 <_free_r+0x24>
    5734:	bd38      	pop	{r3, r4, r5, pc}
    5736:	bf00      	nop
    5738:	20003444 	.word	0x20003444

0000573c <_malloc_r>:
    573c:	b570      	push	{r4, r5, r6, lr}
    573e:	1ccd      	adds	r5, r1, #3
    5740:	f025 0503 	bic.w	r5, r5, #3
    5744:	3508      	adds	r5, #8
    5746:	2d0c      	cmp	r5, #12
    5748:	bf38      	it	cc
    574a:	250c      	movcc	r5, #12
    574c:	2d00      	cmp	r5, #0
    574e:	4606      	mov	r6, r0
    5750:	db01      	blt.n	5756 <_malloc_r+0x1a>
    5752:	42a9      	cmp	r1, r5
    5754:	d903      	bls.n	575e <_malloc_r+0x22>
    5756:	230c      	movs	r3, #12
    5758:	6033      	str	r3, [r6, #0]
    575a:	2000      	movs	r0, #0
    575c:	bd70      	pop	{r4, r5, r6, pc}
    575e:	f000 f8a1 	bl	58a4 <__malloc_lock>
    5762:	4a23      	ldr	r2, [pc, #140]	; (57f0 <_malloc_r+0xb4>)
    5764:	6814      	ldr	r4, [r2, #0]
    5766:	4621      	mov	r1, r4
    5768:	b991      	cbnz	r1, 5790 <_malloc_r+0x54>
    576a:	4c22      	ldr	r4, [pc, #136]	; (57f4 <_malloc_r+0xb8>)
    576c:	6823      	ldr	r3, [r4, #0]
    576e:	b91b      	cbnz	r3, 5778 <_malloc_r+0x3c>
    5770:	4630      	mov	r0, r6
    5772:	f000 f841 	bl	57f8 <_sbrk_r>
    5776:	6020      	str	r0, [r4, #0]
    5778:	4629      	mov	r1, r5
    577a:	4630      	mov	r0, r6
    577c:	f000 f83c 	bl	57f8 <_sbrk_r>
    5780:	1c43      	adds	r3, r0, #1
    5782:	d126      	bne.n	57d2 <_malloc_r+0x96>
    5784:	230c      	movs	r3, #12
    5786:	6033      	str	r3, [r6, #0]
    5788:	4630      	mov	r0, r6
    578a:	f000 f88c 	bl	58a6 <__malloc_unlock>
    578e:	e7e4      	b.n	575a <_malloc_r+0x1e>
    5790:	680b      	ldr	r3, [r1, #0]
    5792:	1b5b      	subs	r3, r3, r5
    5794:	d41a      	bmi.n	57cc <_malloc_r+0x90>
    5796:	2b0b      	cmp	r3, #11
    5798:	d90f      	bls.n	57ba <_malloc_r+0x7e>
    579a:	600b      	str	r3, [r1, #0]
    579c:	50cd      	str	r5, [r1, r3]
    579e:	18cc      	adds	r4, r1, r3
    57a0:	4630      	mov	r0, r6
    57a2:	f000 f880 	bl	58a6 <__malloc_unlock>
    57a6:	f104 000b 	add.w	r0, r4, #11
    57aa:	1d23      	adds	r3, r4, #4
    57ac:	f020 0007 	bic.w	r0, r0, #7
    57b0:	1ac3      	subs	r3, r0, r3
    57b2:	d01b      	beq.n	57ec <_malloc_r+0xb0>
    57b4:	425a      	negs	r2, r3
    57b6:	50e2      	str	r2, [r4, r3]
    57b8:	bd70      	pop	{r4, r5, r6, pc}
    57ba:	428c      	cmp	r4, r1
    57bc:	bf0d      	iteet	eq
    57be:	6863      	ldreq	r3, [r4, #4]
    57c0:	684b      	ldrne	r3, [r1, #4]
    57c2:	6063      	strne	r3, [r4, #4]
    57c4:	6013      	streq	r3, [r2, #0]
    57c6:	bf18      	it	ne
    57c8:	460c      	movne	r4, r1
    57ca:	e7e9      	b.n	57a0 <_malloc_r+0x64>
    57cc:	460c      	mov	r4, r1
    57ce:	6849      	ldr	r1, [r1, #4]
    57d0:	e7ca      	b.n	5768 <_malloc_r+0x2c>
    57d2:	1cc4      	adds	r4, r0, #3
    57d4:	f024 0403 	bic.w	r4, r4, #3
    57d8:	42a0      	cmp	r0, r4
    57da:	d005      	beq.n	57e8 <_malloc_r+0xac>
    57dc:	1a21      	subs	r1, r4, r0
    57de:	4630      	mov	r0, r6
    57e0:	f000 f80a 	bl	57f8 <_sbrk_r>
    57e4:	3001      	adds	r0, #1
    57e6:	d0cd      	beq.n	5784 <_malloc_r+0x48>
    57e8:	6025      	str	r5, [r4, #0]
    57ea:	e7d9      	b.n	57a0 <_malloc_r+0x64>
    57ec:	bd70      	pop	{r4, r5, r6, pc}
    57ee:	bf00      	nop
    57f0:	20003444 	.word	0x20003444
    57f4:	20003448 	.word	0x20003448

000057f8 <_sbrk_r>:
    57f8:	b538      	push	{r3, r4, r5, lr}
    57fa:	4c06      	ldr	r4, [pc, #24]	; (5814 <_sbrk_r+0x1c>)
    57fc:	2300      	movs	r3, #0
    57fe:	4605      	mov	r5, r0
    5800:	4608      	mov	r0, r1
    5802:	6023      	str	r3, [r4, #0]
    5804:	f7fc fbd2 	bl	1fac <_sbrk>
    5808:	1c43      	adds	r3, r0, #1
    580a:	d102      	bne.n	5812 <_sbrk_r+0x1a>
    580c:	6823      	ldr	r3, [r4, #0]
    580e:	b103      	cbz	r3, 5812 <_sbrk_r+0x1a>
    5810:	602b      	str	r3, [r5, #0]
    5812:	bd38      	pop	{r3, r4, r5, pc}
    5814:	20003e64 	.word	0x20003e64

00005818 <siprintf>:
    5818:	b40e      	push	{r1, r2, r3}
    581a:	b500      	push	{lr}
    581c:	b09c      	sub	sp, #112	; 0x70
    581e:	f44f 7102 	mov.w	r1, #520	; 0x208
    5822:	ab1d      	add	r3, sp, #116	; 0x74
    5824:	f8ad 1014 	strh.w	r1, [sp, #20]
    5828:	9002      	str	r0, [sp, #8]
    582a:	9006      	str	r0, [sp, #24]
    582c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5830:	480a      	ldr	r0, [pc, #40]	; (585c <siprintf+0x44>)
    5832:	9104      	str	r1, [sp, #16]
    5834:	9107      	str	r1, [sp, #28]
    5836:	f64f 71ff 	movw	r1, #65535	; 0xffff
    583a:	f853 2b04 	ldr.w	r2, [r3], #4
    583e:	f8ad 1016 	strh.w	r1, [sp, #22]
    5842:	6800      	ldr	r0, [r0, #0]
    5844:	9301      	str	r3, [sp, #4]
    5846:	a902      	add	r1, sp, #8
    5848:	f000 f88a 	bl	5960 <_svfiprintf_r>
    584c:	9b02      	ldr	r3, [sp, #8]
    584e:	2200      	movs	r2, #0
    5850:	701a      	strb	r2, [r3, #0]
    5852:	b01c      	add	sp, #112	; 0x70
    5854:	f85d eb04 	ldr.w	lr, [sp], #4
    5858:	b003      	add	sp, #12
    585a:	4770      	bx	lr
    585c:	20000128 	.word	0x20000128

00005860 <strcpy>:
    5860:	4603      	mov	r3, r0
    5862:	f811 2b01 	ldrb.w	r2, [r1], #1
    5866:	f803 2b01 	strb.w	r2, [r3], #1
    586a:	2a00      	cmp	r2, #0
    586c:	d1f9      	bne.n	5862 <strcpy+0x2>
    586e:	4770      	bx	lr

00005870 <strlen>:
    5870:	4603      	mov	r3, r0
    5872:	f813 2b01 	ldrb.w	r2, [r3], #1
    5876:	2a00      	cmp	r2, #0
    5878:	d1fb      	bne.n	5872 <strlen+0x2>
    587a:	1a18      	subs	r0, r3, r0
    587c:	3801      	subs	r0, #1
    587e:	4770      	bx	lr

00005880 <strncmp>:
    5880:	b510      	push	{r4, lr}
    5882:	b16a      	cbz	r2, 58a0 <strncmp+0x20>
    5884:	3901      	subs	r1, #1
    5886:	1884      	adds	r4, r0, r2
    5888:	f810 3b01 	ldrb.w	r3, [r0], #1
    588c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5890:	4293      	cmp	r3, r2
    5892:	d103      	bne.n	589c <strncmp+0x1c>
    5894:	42a0      	cmp	r0, r4
    5896:	d001      	beq.n	589c <strncmp+0x1c>
    5898:	2b00      	cmp	r3, #0
    589a:	d1f5      	bne.n	5888 <strncmp+0x8>
    589c:	1a98      	subs	r0, r3, r2
    589e:	bd10      	pop	{r4, pc}
    58a0:	4610      	mov	r0, r2
    58a2:	bd10      	pop	{r4, pc}

000058a4 <__malloc_lock>:
    58a4:	4770      	bx	lr

000058a6 <__malloc_unlock>:
    58a6:	4770      	bx	lr

000058a8 <__ssputs_r>:
    58a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58ac:	688e      	ldr	r6, [r1, #8]
    58ae:	429e      	cmp	r6, r3
    58b0:	4682      	mov	sl, r0
    58b2:	460c      	mov	r4, r1
    58b4:	4691      	mov	r9, r2
    58b6:	4698      	mov	r8, r3
    58b8:	d835      	bhi.n	5926 <__ssputs_r+0x7e>
    58ba:	898a      	ldrh	r2, [r1, #12]
    58bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
    58c0:	d031      	beq.n	5926 <__ssputs_r+0x7e>
    58c2:	6825      	ldr	r5, [r4, #0]
    58c4:	6909      	ldr	r1, [r1, #16]
    58c6:	1a6f      	subs	r7, r5, r1
    58c8:	6965      	ldr	r5, [r4, #20]
    58ca:	2302      	movs	r3, #2
    58cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    58d0:	fb95 f5f3 	sdiv	r5, r5, r3
    58d4:	f108 0301 	add.w	r3, r8, #1
    58d8:	443b      	add	r3, r7
    58da:	429d      	cmp	r5, r3
    58dc:	bf38      	it	cc
    58de:	461d      	movcc	r5, r3
    58e0:	0553      	lsls	r3, r2, #21
    58e2:	d531      	bpl.n	5948 <__ssputs_r+0xa0>
    58e4:	4629      	mov	r1, r5
    58e6:	f7ff ff29 	bl	573c <_malloc_r>
    58ea:	4606      	mov	r6, r0
    58ec:	b950      	cbnz	r0, 5904 <__ssputs_r+0x5c>
    58ee:	230c      	movs	r3, #12
    58f0:	f8ca 3000 	str.w	r3, [sl]
    58f4:	89a3      	ldrh	r3, [r4, #12]
    58f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    58fa:	81a3      	strh	r3, [r4, #12]
    58fc:	f04f 30ff 	mov.w	r0, #4294967295
    5900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5904:	463a      	mov	r2, r7
    5906:	6921      	ldr	r1, [r4, #16]
    5908:	f7ff fe9c 	bl	5644 <memcpy>
    590c:	89a3      	ldrh	r3, [r4, #12]
    590e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    5912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5916:	81a3      	strh	r3, [r4, #12]
    5918:	6126      	str	r6, [r4, #16]
    591a:	6165      	str	r5, [r4, #20]
    591c:	443e      	add	r6, r7
    591e:	1bed      	subs	r5, r5, r7
    5920:	6026      	str	r6, [r4, #0]
    5922:	60a5      	str	r5, [r4, #8]
    5924:	4646      	mov	r6, r8
    5926:	4546      	cmp	r6, r8
    5928:	bf28      	it	cs
    592a:	4646      	movcs	r6, r8
    592c:	4632      	mov	r2, r6
    592e:	4649      	mov	r1, r9
    5930:	6820      	ldr	r0, [r4, #0]
    5932:	f7ff fe92 	bl	565a <memmove>
    5936:	68a3      	ldr	r3, [r4, #8]
    5938:	1b9b      	subs	r3, r3, r6
    593a:	60a3      	str	r3, [r4, #8]
    593c:	6823      	ldr	r3, [r4, #0]
    593e:	441e      	add	r6, r3
    5940:	6026      	str	r6, [r4, #0]
    5942:	2000      	movs	r0, #0
    5944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5948:	462a      	mov	r2, r5
    594a:	f000 fae9 	bl	5f20 <_realloc_r>
    594e:	4606      	mov	r6, r0
    5950:	2800      	cmp	r0, #0
    5952:	d1e1      	bne.n	5918 <__ssputs_r+0x70>
    5954:	6921      	ldr	r1, [r4, #16]
    5956:	4650      	mov	r0, sl
    5958:	f7ff fea2 	bl	56a0 <_free_r>
    595c:	e7c7      	b.n	58ee <__ssputs_r+0x46>
	...

00005960 <_svfiprintf_r>:
    5960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5964:	b09d      	sub	sp, #116	; 0x74
    5966:	4680      	mov	r8, r0
    5968:	9303      	str	r3, [sp, #12]
    596a:	898b      	ldrh	r3, [r1, #12]
    596c:	061c      	lsls	r4, r3, #24
    596e:	460d      	mov	r5, r1
    5970:	4616      	mov	r6, r2
    5972:	d50f      	bpl.n	5994 <_svfiprintf_r+0x34>
    5974:	690b      	ldr	r3, [r1, #16]
    5976:	b96b      	cbnz	r3, 5994 <_svfiprintf_r+0x34>
    5978:	2140      	movs	r1, #64	; 0x40
    597a:	f7ff fedf 	bl	573c <_malloc_r>
    597e:	6028      	str	r0, [r5, #0]
    5980:	6128      	str	r0, [r5, #16]
    5982:	b928      	cbnz	r0, 5990 <_svfiprintf_r+0x30>
    5984:	230c      	movs	r3, #12
    5986:	f8c8 3000 	str.w	r3, [r8]
    598a:	f04f 30ff 	mov.w	r0, #4294967295
    598e:	e0c5      	b.n	5b1c <_svfiprintf_r+0x1bc>
    5990:	2340      	movs	r3, #64	; 0x40
    5992:	616b      	str	r3, [r5, #20]
    5994:	2300      	movs	r3, #0
    5996:	9309      	str	r3, [sp, #36]	; 0x24
    5998:	2320      	movs	r3, #32
    599a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    599e:	2330      	movs	r3, #48	; 0x30
    59a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    59a4:	f04f 0b01 	mov.w	fp, #1
    59a8:	4637      	mov	r7, r6
    59aa:	463c      	mov	r4, r7
    59ac:	f814 3b01 	ldrb.w	r3, [r4], #1
    59b0:	2b00      	cmp	r3, #0
    59b2:	d13c      	bne.n	5a2e <_svfiprintf_r+0xce>
    59b4:	ebb7 0a06 	subs.w	sl, r7, r6
    59b8:	d00b      	beq.n	59d2 <_svfiprintf_r+0x72>
    59ba:	4653      	mov	r3, sl
    59bc:	4632      	mov	r2, r6
    59be:	4629      	mov	r1, r5
    59c0:	4640      	mov	r0, r8
    59c2:	f7ff ff71 	bl	58a8 <__ssputs_r>
    59c6:	3001      	adds	r0, #1
    59c8:	f000 80a3 	beq.w	5b12 <_svfiprintf_r+0x1b2>
    59cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59ce:	4453      	add	r3, sl
    59d0:	9309      	str	r3, [sp, #36]	; 0x24
    59d2:	783b      	ldrb	r3, [r7, #0]
    59d4:	2b00      	cmp	r3, #0
    59d6:	f000 809c 	beq.w	5b12 <_svfiprintf_r+0x1b2>
    59da:	2300      	movs	r3, #0
    59dc:	f04f 32ff 	mov.w	r2, #4294967295
    59e0:	9304      	str	r3, [sp, #16]
    59e2:	9307      	str	r3, [sp, #28]
    59e4:	9205      	str	r2, [sp, #20]
    59e6:	9306      	str	r3, [sp, #24]
    59e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    59ec:	931a      	str	r3, [sp, #104]	; 0x68
    59ee:	2205      	movs	r2, #5
    59f0:	7821      	ldrb	r1, [r4, #0]
    59f2:	4850      	ldr	r0, [pc, #320]	; (5b34 <_svfiprintf_r+0x1d4>)
    59f4:	f000 fa44 	bl	5e80 <memchr>
    59f8:	1c67      	adds	r7, r4, #1
    59fa:	9b04      	ldr	r3, [sp, #16]
    59fc:	b9d8      	cbnz	r0, 5a36 <_svfiprintf_r+0xd6>
    59fe:	06d9      	lsls	r1, r3, #27
    5a00:	bf44      	itt	mi
    5a02:	2220      	movmi	r2, #32
    5a04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5a08:	071a      	lsls	r2, r3, #28
    5a0a:	bf44      	itt	mi
    5a0c:	222b      	movmi	r2, #43	; 0x2b
    5a0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5a12:	7822      	ldrb	r2, [r4, #0]
    5a14:	2a2a      	cmp	r2, #42	; 0x2a
    5a16:	d016      	beq.n	5a46 <_svfiprintf_r+0xe6>
    5a18:	9a07      	ldr	r2, [sp, #28]
    5a1a:	2100      	movs	r1, #0
    5a1c:	200a      	movs	r0, #10
    5a1e:	4627      	mov	r7, r4
    5a20:	3401      	adds	r4, #1
    5a22:	783b      	ldrb	r3, [r7, #0]
    5a24:	3b30      	subs	r3, #48	; 0x30
    5a26:	2b09      	cmp	r3, #9
    5a28:	d951      	bls.n	5ace <_svfiprintf_r+0x16e>
    5a2a:	b1c9      	cbz	r1, 5a60 <_svfiprintf_r+0x100>
    5a2c:	e011      	b.n	5a52 <_svfiprintf_r+0xf2>
    5a2e:	2b25      	cmp	r3, #37	; 0x25
    5a30:	d0c0      	beq.n	59b4 <_svfiprintf_r+0x54>
    5a32:	4627      	mov	r7, r4
    5a34:	e7b9      	b.n	59aa <_svfiprintf_r+0x4a>
    5a36:	4a3f      	ldr	r2, [pc, #252]	; (5b34 <_svfiprintf_r+0x1d4>)
    5a38:	1a80      	subs	r0, r0, r2
    5a3a:	fa0b f000 	lsl.w	r0, fp, r0
    5a3e:	4318      	orrs	r0, r3
    5a40:	9004      	str	r0, [sp, #16]
    5a42:	463c      	mov	r4, r7
    5a44:	e7d3      	b.n	59ee <_svfiprintf_r+0x8e>
    5a46:	9a03      	ldr	r2, [sp, #12]
    5a48:	1d11      	adds	r1, r2, #4
    5a4a:	6812      	ldr	r2, [r2, #0]
    5a4c:	9103      	str	r1, [sp, #12]
    5a4e:	2a00      	cmp	r2, #0
    5a50:	db01      	blt.n	5a56 <_svfiprintf_r+0xf6>
    5a52:	9207      	str	r2, [sp, #28]
    5a54:	e004      	b.n	5a60 <_svfiprintf_r+0x100>
    5a56:	4252      	negs	r2, r2
    5a58:	f043 0302 	orr.w	r3, r3, #2
    5a5c:	9207      	str	r2, [sp, #28]
    5a5e:	9304      	str	r3, [sp, #16]
    5a60:	783b      	ldrb	r3, [r7, #0]
    5a62:	2b2e      	cmp	r3, #46	; 0x2e
    5a64:	d10e      	bne.n	5a84 <_svfiprintf_r+0x124>
    5a66:	787b      	ldrb	r3, [r7, #1]
    5a68:	2b2a      	cmp	r3, #42	; 0x2a
    5a6a:	f107 0101 	add.w	r1, r7, #1
    5a6e:	d132      	bne.n	5ad6 <_svfiprintf_r+0x176>
    5a70:	9b03      	ldr	r3, [sp, #12]
    5a72:	1d1a      	adds	r2, r3, #4
    5a74:	681b      	ldr	r3, [r3, #0]
    5a76:	9203      	str	r2, [sp, #12]
    5a78:	2b00      	cmp	r3, #0
    5a7a:	bfb8      	it	lt
    5a7c:	f04f 33ff 	movlt.w	r3, #4294967295
    5a80:	3702      	adds	r7, #2
    5a82:	9305      	str	r3, [sp, #20]
    5a84:	4c2c      	ldr	r4, [pc, #176]	; (5b38 <_svfiprintf_r+0x1d8>)
    5a86:	7839      	ldrb	r1, [r7, #0]
    5a88:	2203      	movs	r2, #3
    5a8a:	4620      	mov	r0, r4
    5a8c:	f000 f9f8 	bl	5e80 <memchr>
    5a90:	b138      	cbz	r0, 5aa2 <_svfiprintf_r+0x142>
    5a92:	2340      	movs	r3, #64	; 0x40
    5a94:	1b00      	subs	r0, r0, r4
    5a96:	fa03 f000 	lsl.w	r0, r3, r0
    5a9a:	9b04      	ldr	r3, [sp, #16]
    5a9c:	4303      	orrs	r3, r0
    5a9e:	9304      	str	r3, [sp, #16]
    5aa0:	3701      	adds	r7, #1
    5aa2:	7839      	ldrb	r1, [r7, #0]
    5aa4:	4825      	ldr	r0, [pc, #148]	; (5b3c <_svfiprintf_r+0x1dc>)
    5aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    5aaa:	2206      	movs	r2, #6
    5aac:	1c7e      	adds	r6, r7, #1
    5aae:	f000 f9e7 	bl	5e80 <memchr>
    5ab2:	2800      	cmp	r0, #0
    5ab4:	d035      	beq.n	5b22 <_svfiprintf_r+0x1c2>
    5ab6:	4b22      	ldr	r3, [pc, #136]	; (5b40 <_svfiprintf_r+0x1e0>)
    5ab8:	b9fb      	cbnz	r3, 5afa <_svfiprintf_r+0x19a>
    5aba:	9b03      	ldr	r3, [sp, #12]
    5abc:	3307      	adds	r3, #7
    5abe:	f023 0307 	bic.w	r3, r3, #7
    5ac2:	3308      	adds	r3, #8
    5ac4:	9303      	str	r3, [sp, #12]
    5ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5ac8:	444b      	add	r3, r9
    5aca:	9309      	str	r3, [sp, #36]	; 0x24
    5acc:	e76c      	b.n	59a8 <_svfiprintf_r+0x48>
    5ace:	fb00 3202 	mla	r2, r0, r2, r3
    5ad2:	2101      	movs	r1, #1
    5ad4:	e7a3      	b.n	5a1e <_svfiprintf_r+0xbe>
    5ad6:	2300      	movs	r3, #0
    5ad8:	9305      	str	r3, [sp, #20]
    5ada:	4618      	mov	r0, r3
    5adc:	240a      	movs	r4, #10
    5ade:	460f      	mov	r7, r1
    5ae0:	3101      	adds	r1, #1
    5ae2:	783a      	ldrb	r2, [r7, #0]
    5ae4:	3a30      	subs	r2, #48	; 0x30
    5ae6:	2a09      	cmp	r2, #9
    5ae8:	d903      	bls.n	5af2 <_svfiprintf_r+0x192>
    5aea:	2b00      	cmp	r3, #0
    5aec:	d0ca      	beq.n	5a84 <_svfiprintf_r+0x124>
    5aee:	9005      	str	r0, [sp, #20]
    5af0:	e7c8      	b.n	5a84 <_svfiprintf_r+0x124>
    5af2:	fb04 2000 	mla	r0, r4, r0, r2
    5af6:	2301      	movs	r3, #1
    5af8:	e7f1      	b.n	5ade <_svfiprintf_r+0x17e>
    5afa:	ab03      	add	r3, sp, #12
    5afc:	9300      	str	r3, [sp, #0]
    5afe:	462a      	mov	r2, r5
    5b00:	4b10      	ldr	r3, [pc, #64]	; (5b44 <_svfiprintf_r+0x1e4>)
    5b02:	a904      	add	r1, sp, #16
    5b04:	4640      	mov	r0, r8
    5b06:	f3af 8000 	nop.w
    5b0a:	f1b0 3fff 	cmp.w	r0, #4294967295
    5b0e:	4681      	mov	r9, r0
    5b10:	d1d9      	bne.n	5ac6 <_svfiprintf_r+0x166>
    5b12:	89ab      	ldrh	r3, [r5, #12]
    5b14:	065b      	lsls	r3, r3, #25
    5b16:	f53f af38 	bmi.w	598a <_svfiprintf_r+0x2a>
    5b1a:	9809      	ldr	r0, [sp, #36]	; 0x24
    5b1c:	b01d      	add	sp, #116	; 0x74
    5b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b22:	ab03      	add	r3, sp, #12
    5b24:	9300      	str	r3, [sp, #0]
    5b26:	462a      	mov	r2, r5
    5b28:	4b06      	ldr	r3, [pc, #24]	; (5b44 <_svfiprintf_r+0x1e4>)
    5b2a:	a904      	add	r1, sp, #16
    5b2c:	4640      	mov	r0, r8
    5b2e:	f000 f881 	bl	5c34 <_printf_i>
    5b32:	e7ea      	b.n	5b0a <_svfiprintf_r+0x1aa>
    5b34:	000075f0 	.word	0x000075f0
    5b38:	000075f6 	.word	0x000075f6
    5b3c:	000075fa 	.word	0x000075fa
    5b40:	00000000 	.word	0x00000000
    5b44:	000058a9 	.word	0x000058a9

00005b48 <_printf_common>:
    5b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b4c:	4691      	mov	r9, r2
    5b4e:	461f      	mov	r7, r3
    5b50:	688a      	ldr	r2, [r1, #8]
    5b52:	690b      	ldr	r3, [r1, #16]
    5b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
    5b58:	4293      	cmp	r3, r2
    5b5a:	bfb8      	it	lt
    5b5c:	4613      	movlt	r3, r2
    5b5e:	f8c9 3000 	str.w	r3, [r9]
    5b62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    5b66:	4606      	mov	r6, r0
    5b68:	460c      	mov	r4, r1
    5b6a:	b112      	cbz	r2, 5b72 <_printf_common+0x2a>
    5b6c:	3301      	adds	r3, #1
    5b6e:	f8c9 3000 	str.w	r3, [r9]
    5b72:	6823      	ldr	r3, [r4, #0]
    5b74:	0699      	lsls	r1, r3, #26
    5b76:	bf42      	ittt	mi
    5b78:	f8d9 3000 	ldrmi.w	r3, [r9]
    5b7c:	3302      	addmi	r3, #2
    5b7e:	f8c9 3000 	strmi.w	r3, [r9]
    5b82:	6825      	ldr	r5, [r4, #0]
    5b84:	f015 0506 	ands.w	r5, r5, #6
    5b88:	d107      	bne.n	5b9a <_printf_common+0x52>
    5b8a:	f104 0a19 	add.w	sl, r4, #25
    5b8e:	68e3      	ldr	r3, [r4, #12]
    5b90:	f8d9 2000 	ldr.w	r2, [r9]
    5b94:	1a9b      	subs	r3, r3, r2
    5b96:	429d      	cmp	r5, r3
    5b98:	db29      	blt.n	5bee <_printf_common+0xa6>
    5b9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    5b9e:	6822      	ldr	r2, [r4, #0]
    5ba0:	3300      	adds	r3, #0
    5ba2:	bf18      	it	ne
    5ba4:	2301      	movne	r3, #1
    5ba6:	0692      	lsls	r2, r2, #26
    5ba8:	d42e      	bmi.n	5c08 <_printf_common+0xc0>
    5baa:	f104 0243 	add.w	r2, r4, #67	; 0x43
    5bae:	4639      	mov	r1, r7
    5bb0:	4630      	mov	r0, r6
    5bb2:	47c0      	blx	r8
    5bb4:	3001      	adds	r0, #1
    5bb6:	d021      	beq.n	5bfc <_printf_common+0xb4>
    5bb8:	6823      	ldr	r3, [r4, #0]
    5bba:	68e5      	ldr	r5, [r4, #12]
    5bbc:	f8d9 2000 	ldr.w	r2, [r9]
    5bc0:	f003 0306 	and.w	r3, r3, #6
    5bc4:	2b04      	cmp	r3, #4
    5bc6:	bf08      	it	eq
    5bc8:	1aad      	subeq	r5, r5, r2
    5bca:	68a3      	ldr	r3, [r4, #8]
    5bcc:	6922      	ldr	r2, [r4, #16]
    5bce:	bf0c      	ite	eq
    5bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5bd4:	2500      	movne	r5, #0
    5bd6:	4293      	cmp	r3, r2
    5bd8:	bfc4      	itt	gt
    5bda:	1a9b      	subgt	r3, r3, r2
    5bdc:	18ed      	addgt	r5, r5, r3
    5bde:	f04f 0900 	mov.w	r9, #0
    5be2:	341a      	adds	r4, #26
    5be4:	454d      	cmp	r5, r9
    5be6:	d11b      	bne.n	5c20 <_printf_common+0xd8>
    5be8:	2000      	movs	r0, #0
    5bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bee:	2301      	movs	r3, #1
    5bf0:	4652      	mov	r2, sl
    5bf2:	4639      	mov	r1, r7
    5bf4:	4630      	mov	r0, r6
    5bf6:	47c0      	blx	r8
    5bf8:	3001      	adds	r0, #1
    5bfa:	d103      	bne.n	5c04 <_printf_common+0xbc>
    5bfc:	f04f 30ff 	mov.w	r0, #4294967295
    5c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5c04:	3501      	adds	r5, #1
    5c06:	e7c2      	b.n	5b8e <_printf_common+0x46>
    5c08:	18e1      	adds	r1, r4, r3
    5c0a:	1c5a      	adds	r2, r3, #1
    5c0c:	2030      	movs	r0, #48	; 0x30
    5c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    5c12:	4422      	add	r2, r4
    5c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    5c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    5c1c:	3302      	adds	r3, #2
    5c1e:	e7c4      	b.n	5baa <_printf_common+0x62>
    5c20:	2301      	movs	r3, #1
    5c22:	4622      	mov	r2, r4
    5c24:	4639      	mov	r1, r7
    5c26:	4630      	mov	r0, r6
    5c28:	47c0      	blx	r8
    5c2a:	3001      	adds	r0, #1
    5c2c:	d0e6      	beq.n	5bfc <_printf_common+0xb4>
    5c2e:	f109 0901 	add.w	r9, r9, #1
    5c32:	e7d7      	b.n	5be4 <_printf_common+0x9c>

00005c34 <_printf_i>:
    5c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5c38:	4617      	mov	r7, r2
    5c3a:	7e0a      	ldrb	r2, [r1, #24]
    5c3c:	b085      	sub	sp, #20
    5c3e:	2a6e      	cmp	r2, #110	; 0x6e
    5c40:	4698      	mov	r8, r3
    5c42:	4606      	mov	r6, r0
    5c44:	460c      	mov	r4, r1
    5c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c48:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    5c4c:	f000 80bc 	beq.w	5dc8 <_printf_i+0x194>
    5c50:	d81a      	bhi.n	5c88 <_printf_i+0x54>
    5c52:	2a63      	cmp	r2, #99	; 0x63
    5c54:	d02e      	beq.n	5cb4 <_printf_i+0x80>
    5c56:	d80a      	bhi.n	5c6e <_printf_i+0x3a>
    5c58:	2a00      	cmp	r2, #0
    5c5a:	f000 80c8 	beq.w	5dee <_printf_i+0x1ba>
    5c5e:	2a58      	cmp	r2, #88	; 0x58
    5c60:	f000 808a 	beq.w	5d78 <_printf_i+0x144>
    5c64:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5c68:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    5c6c:	e02a      	b.n	5cc4 <_printf_i+0x90>
    5c6e:	2a64      	cmp	r2, #100	; 0x64
    5c70:	d001      	beq.n	5c76 <_printf_i+0x42>
    5c72:	2a69      	cmp	r2, #105	; 0x69
    5c74:	d1f6      	bne.n	5c64 <_printf_i+0x30>
    5c76:	6821      	ldr	r1, [r4, #0]
    5c78:	681a      	ldr	r2, [r3, #0]
    5c7a:	f011 0f80 	tst.w	r1, #128	; 0x80
    5c7e:	d023      	beq.n	5cc8 <_printf_i+0x94>
    5c80:	1d11      	adds	r1, r2, #4
    5c82:	6019      	str	r1, [r3, #0]
    5c84:	6813      	ldr	r3, [r2, #0]
    5c86:	e027      	b.n	5cd8 <_printf_i+0xa4>
    5c88:	2a73      	cmp	r2, #115	; 0x73
    5c8a:	f000 80b4 	beq.w	5df6 <_printf_i+0x1c2>
    5c8e:	d808      	bhi.n	5ca2 <_printf_i+0x6e>
    5c90:	2a6f      	cmp	r2, #111	; 0x6f
    5c92:	d02a      	beq.n	5cea <_printf_i+0xb6>
    5c94:	2a70      	cmp	r2, #112	; 0x70
    5c96:	d1e5      	bne.n	5c64 <_printf_i+0x30>
    5c98:	680a      	ldr	r2, [r1, #0]
    5c9a:	f042 0220 	orr.w	r2, r2, #32
    5c9e:	600a      	str	r2, [r1, #0]
    5ca0:	e003      	b.n	5caa <_printf_i+0x76>
    5ca2:	2a75      	cmp	r2, #117	; 0x75
    5ca4:	d021      	beq.n	5cea <_printf_i+0xb6>
    5ca6:	2a78      	cmp	r2, #120	; 0x78
    5ca8:	d1dc      	bne.n	5c64 <_printf_i+0x30>
    5caa:	2278      	movs	r2, #120	; 0x78
    5cac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    5cb0:	496e      	ldr	r1, [pc, #440]	; (5e6c <_printf_i+0x238>)
    5cb2:	e064      	b.n	5d7e <_printf_i+0x14a>
    5cb4:	681a      	ldr	r2, [r3, #0]
    5cb6:	f101 0542 	add.w	r5, r1, #66	; 0x42
    5cba:	1d11      	adds	r1, r2, #4
    5cbc:	6019      	str	r1, [r3, #0]
    5cbe:	6813      	ldr	r3, [r2, #0]
    5cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5cc4:	2301      	movs	r3, #1
    5cc6:	e0a3      	b.n	5e10 <_printf_i+0x1dc>
    5cc8:	f011 0f40 	tst.w	r1, #64	; 0x40
    5ccc:	f102 0104 	add.w	r1, r2, #4
    5cd0:	6019      	str	r1, [r3, #0]
    5cd2:	d0d7      	beq.n	5c84 <_printf_i+0x50>
    5cd4:	f9b2 3000 	ldrsh.w	r3, [r2]
    5cd8:	2b00      	cmp	r3, #0
    5cda:	da03      	bge.n	5ce4 <_printf_i+0xb0>
    5cdc:	222d      	movs	r2, #45	; 0x2d
    5cde:	425b      	negs	r3, r3
    5ce0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    5ce4:	4962      	ldr	r1, [pc, #392]	; (5e70 <_printf_i+0x23c>)
    5ce6:	220a      	movs	r2, #10
    5ce8:	e017      	b.n	5d1a <_printf_i+0xe6>
    5cea:	6820      	ldr	r0, [r4, #0]
    5cec:	6819      	ldr	r1, [r3, #0]
    5cee:	f010 0f80 	tst.w	r0, #128	; 0x80
    5cf2:	d003      	beq.n	5cfc <_printf_i+0xc8>
    5cf4:	1d08      	adds	r0, r1, #4
    5cf6:	6018      	str	r0, [r3, #0]
    5cf8:	680b      	ldr	r3, [r1, #0]
    5cfa:	e006      	b.n	5d0a <_printf_i+0xd6>
    5cfc:	f010 0f40 	tst.w	r0, #64	; 0x40
    5d00:	f101 0004 	add.w	r0, r1, #4
    5d04:	6018      	str	r0, [r3, #0]
    5d06:	d0f7      	beq.n	5cf8 <_printf_i+0xc4>
    5d08:	880b      	ldrh	r3, [r1, #0]
    5d0a:	4959      	ldr	r1, [pc, #356]	; (5e70 <_printf_i+0x23c>)
    5d0c:	2a6f      	cmp	r2, #111	; 0x6f
    5d0e:	bf14      	ite	ne
    5d10:	220a      	movne	r2, #10
    5d12:	2208      	moveq	r2, #8
    5d14:	2000      	movs	r0, #0
    5d16:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5d1a:	6865      	ldr	r5, [r4, #4]
    5d1c:	60a5      	str	r5, [r4, #8]
    5d1e:	2d00      	cmp	r5, #0
    5d20:	f2c0 809c 	blt.w	5e5c <_printf_i+0x228>
    5d24:	6820      	ldr	r0, [r4, #0]
    5d26:	f020 0004 	bic.w	r0, r0, #4
    5d2a:	6020      	str	r0, [r4, #0]
    5d2c:	2b00      	cmp	r3, #0
    5d2e:	d13f      	bne.n	5db0 <_printf_i+0x17c>
    5d30:	2d00      	cmp	r5, #0
    5d32:	f040 8095 	bne.w	5e60 <_printf_i+0x22c>
    5d36:	4675      	mov	r5, lr
    5d38:	2a08      	cmp	r2, #8
    5d3a:	d10b      	bne.n	5d54 <_printf_i+0x120>
    5d3c:	6823      	ldr	r3, [r4, #0]
    5d3e:	07da      	lsls	r2, r3, #31
    5d40:	d508      	bpl.n	5d54 <_printf_i+0x120>
    5d42:	6923      	ldr	r3, [r4, #16]
    5d44:	6862      	ldr	r2, [r4, #4]
    5d46:	429a      	cmp	r2, r3
    5d48:	bfde      	ittt	le
    5d4a:	2330      	movle	r3, #48	; 0x30
    5d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
    5d50:	f105 35ff 	addle.w	r5, r5, #4294967295
    5d54:	ebae 0305 	sub.w	r3, lr, r5
    5d58:	6123      	str	r3, [r4, #16]
    5d5a:	f8cd 8000 	str.w	r8, [sp]
    5d5e:	463b      	mov	r3, r7
    5d60:	aa03      	add	r2, sp, #12
    5d62:	4621      	mov	r1, r4
    5d64:	4630      	mov	r0, r6
    5d66:	f7ff feef 	bl	5b48 <_printf_common>
    5d6a:	3001      	adds	r0, #1
    5d6c:	d155      	bne.n	5e1a <_printf_i+0x1e6>
    5d6e:	f04f 30ff 	mov.w	r0, #4294967295
    5d72:	b005      	add	sp, #20
    5d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5d78:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    5d7c:	493c      	ldr	r1, [pc, #240]	; (5e70 <_printf_i+0x23c>)
    5d7e:	6822      	ldr	r2, [r4, #0]
    5d80:	6818      	ldr	r0, [r3, #0]
    5d82:	f012 0f80 	tst.w	r2, #128	; 0x80
    5d86:	f100 0504 	add.w	r5, r0, #4
    5d8a:	601d      	str	r5, [r3, #0]
    5d8c:	d001      	beq.n	5d92 <_printf_i+0x15e>
    5d8e:	6803      	ldr	r3, [r0, #0]
    5d90:	e002      	b.n	5d98 <_printf_i+0x164>
    5d92:	0655      	lsls	r5, r2, #25
    5d94:	d5fb      	bpl.n	5d8e <_printf_i+0x15a>
    5d96:	8803      	ldrh	r3, [r0, #0]
    5d98:	07d0      	lsls	r0, r2, #31
    5d9a:	bf44      	itt	mi
    5d9c:	f042 0220 	orrmi.w	r2, r2, #32
    5da0:	6022      	strmi	r2, [r4, #0]
    5da2:	b91b      	cbnz	r3, 5dac <_printf_i+0x178>
    5da4:	6822      	ldr	r2, [r4, #0]
    5da6:	f022 0220 	bic.w	r2, r2, #32
    5daa:	6022      	str	r2, [r4, #0]
    5dac:	2210      	movs	r2, #16
    5dae:	e7b1      	b.n	5d14 <_printf_i+0xe0>
    5db0:	4675      	mov	r5, lr
    5db2:	fbb3 f0f2 	udiv	r0, r3, r2
    5db6:	fb02 3310 	mls	r3, r2, r0, r3
    5dba:	5ccb      	ldrb	r3, [r1, r3]
    5dbc:	f805 3d01 	strb.w	r3, [r5, #-1]!
    5dc0:	4603      	mov	r3, r0
    5dc2:	2800      	cmp	r0, #0
    5dc4:	d1f5      	bne.n	5db2 <_printf_i+0x17e>
    5dc6:	e7b7      	b.n	5d38 <_printf_i+0x104>
    5dc8:	6808      	ldr	r0, [r1, #0]
    5dca:	681a      	ldr	r2, [r3, #0]
    5dcc:	6949      	ldr	r1, [r1, #20]
    5dce:	f010 0f80 	tst.w	r0, #128	; 0x80
    5dd2:	d004      	beq.n	5dde <_printf_i+0x1aa>
    5dd4:	1d10      	adds	r0, r2, #4
    5dd6:	6018      	str	r0, [r3, #0]
    5dd8:	6813      	ldr	r3, [r2, #0]
    5dda:	6019      	str	r1, [r3, #0]
    5ddc:	e007      	b.n	5dee <_printf_i+0x1ba>
    5dde:	f010 0f40 	tst.w	r0, #64	; 0x40
    5de2:	f102 0004 	add.w	r0, r2, #4
    5de6:	6018      	str	r0, [r3, #0]
    5de8:	6813      	ldr	r3, [r2, #0]
    5dea:	d0f6      	beq.n	5dda <_printf_i+0x1a6>
    5dec:	8019      	strh	r1, [r3, #0]
    5dee:	2300      	movs	r3, #0
    5df0:	6123      	str	r3, [r4, #16]
    5df2:	4675      	mov	r5, lr
    5df4:	e7b1      	b.n	5d5a <_printf_i+0x126>
    5df6:	681a      	ldr	r2, [r3, #0]
    5df8:	1d11      	adds	r1, r2, #4
    5dfa:	6019      	str	r1, [r3, #0]
    5dfc:	6815      	ldr	r5, [r2, #0]
    5dfe:	6862      	ldr	r2, [r4, #4]
    5e00:	2100      	movs	r1, #0
    5e02:	4628      	mov	r0, r5
    5e04:	f000 f83c 	bl	5e80 <memchr>
    5e08:	b108      	cbz	r0, 5e0e <_printf_i+0x1da>
    5e0a:	1b40      	subs	r0, r0, r5
    5e0c:	6060      	str	r0, [r4, #4]
    5e0e:	6863      	ldr	r3, [r4, #4]
    5e10:	6123      	str	r3, [r4, #16]
    5e12:	2300      	movs	r3, #0
    5e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    5e18:	e79f      	b.n	5d5a <_printf_i+0x126>
    5e1a:	6923      	ldr	r3, [r4, #16]
    5e1c:	462a      	mov	r2, r5
    5e1e:	4639      	mov	r1, r7
    5e20:	4630      	mov	r0, r6
    5e22:	47c0      	blx	r8
    5e24:	3001      	adds	r0, #1
    5e26:	d0a2      	beq.n	5d6e <_printf_i+0x13a>
    5e28:	6823      	ldr	r3, [r4, #0]
    5e2a:	079b      	lsls	r3, r3, #30
    5e2c:	d507      	bpl.n	5e3e <_printf_i+0x20a>
    5e2e:	2500      	movs	r5, #0
    5e30:	f104 0919 	add.w	r9, r4, #25
    5e34:	68e3      	ldr	r3, [r4, #12]
    5e36:	9a03      	ldr	r2, [sp, #12]
    5e38:	1a9b      	subs	r3, r3, r2
    5e3a:	429d      	cmp	r5, r3
    5e3c:	db05      	blt.n	5e4a <_printf_i+0x216>
    5e3e:	68e0      	ldr	r0, [r4, #12]
    5e40:	9b03      	ldr	r3, [sp, #12]
    5e42:	4298      	cmp	r0, r3
    5e44:	bfb8      	it	lt
    5e46:	4618      	movlt	r0, r3
    5e48:	e793      	b.n	5d72 <_printf_i+0x13e>
    5e4a:	2301      	movs	r3, #1
    5e4c:	464a      	mov	r2, r9
    5e4e:	4639      	mov	r1, r7
    5e50:	4630      	mov	r0, r6
    5e52:	47c0      	blx	r8
    5e54:	3001      	adds	r0, #1
    5e56:	d08a      	beq.n	5d6e <_printf_i+0x13a>
    5e58:	3501      	adds	r5, #1
    5e5a:	e7eb      	b.n	5e34 <_printf_i+0x200>
    5e5c:	2b00      	cmp	r3, #0
    5e5e:	d1a7      	bne.n	5db0 <_printf_i+0x17c>
    5e60:	780b      	ldrb	r3, [r1, #0]
    5e62:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5e66:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5e6a:	e765      	b.n	5d38 <_printf_i+0x104>
    5e6c:	00007612 	.word	0x00007612
    5e70:	00007601 	.word	0x00007601
	...

00005e80 <memchr>:
    5e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5e84:	2a10      	cmp	r2, #16
    5e86:	db2b      	blt.n	5ee0 <memchr+0x60>
    5e88:	f010 0f07 	tst.w	r0, #7
    5e8c:	d008      	beq.n	5ea0 <memchr+0x20>
    5e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5e92:	3a01      	subs	r2, #1
    5e94:	428b      	cmp	r3, r1
    5e96:	d02d      	beq.n	5ef4 <memchr+0x74>
    5e98:	f010 0f07 	tst.w	r0, #7
    5e9c:	b342      	cbz	r2, 5ef0 <memchr+0x70>
    5e9e:	d1f6      	bne.n	5e8e <memchr+0xe>
    5ea0:	b4f0      	push	{r4, r5, r6, r7}
    5ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    5eaa:	f022 0407 	bic.w	r4, r2, #7
    5eae:	f07f 0700 	mvns.w	r7, #0
    5eb2:	2300      	movs	r3, #0
    5eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5eb8:	3c08      	subs	r4, #8
    5eba:	ea85 0501 	eor.w	r5, r5, r1
    5ebe:	ea86 0601 	eor.w	r6, r6, r1
    5ec2:	fa85 f547 	uadd8	r5, r5, r7
    5ec6:	faa3 f587 	sel	r5, r3, r7
    5eca:	fa86 f647 	uadd8	r6, r6, r7
    5ece:	faa5 f687 	sel	r6, r5, r7
    5ed2:	b98e      	cbnz	r6, 5ef8 <memchr+0x78>
    5ed4:	d1ee      	bne.n	5eb4 <memchr+0x34>
    5ed6:	bcf0      	pop	{r4, r5, r6, r7}
    5ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5edc:	f002 0207 	and.w	r2, r2, #7
    5ee0:	b132      	cbz	r2, 5ef0 <memchr+0x70>
    5ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
    5ee6:	3a01      	subs	r2, #1
    5ee8:	ea83 0301 	eor.w	r3, r3, r1
    5eec:	b113      	cbz	r3, 5ef4 <memchr+0x74>
    5eee:	d1f8      	bne.n	5ee2 <memchr+0x62>
    5ef0:	2000      	movs	r0, #0
    5ef2:	4770      	bx	lr
    5ef4:	3801      	subs	r0, #1
    5ef6:	4770      	bx	lr
    5ef8:	2d00      	cmp	r5, #0
    5efa:	bf06      	itte	eq
    5efc:	4635      	moveq	r5, r6
    5efe:	3803      	subeq	r0, #3
    5f00:	3807      	subne	r0, #7
    5f02:	f015 0f01 	tst.w	r5, #1
    5f06:	d107      	bne.n	5f18 <memchr+0x98>
    5f08:	3001      	adds	r0, #1
    5f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
    5f0e:	bf02      	ittt	eq
    5f10:	3001      	addeq	r0, #1
    5f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5f16:	3001      	addeq	r0, #1
    5f18:	bcf0      	pop	{r4, r5, r6, r7}
    5f1a:	3801      	subs	r0, #1
    5f1c:	4770      	bx	lr
    5f1e:	bf00      	nop

00005f20 <_realloc_r>:
    5f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f22:	4607      	mov	r7, r0
    5f24:	4614      	mov	r4, r2
    5f26:	460e      	mov	r6, r1
    5f28:	b921      	cbnz	r1, 5f34 <_realloc_r+0x14>
    5f2a:	4611      	mov	r1, r2
    5f2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5f30:	f7ff bc04 	b.w	573c <_malloc_r>
    5f34:	b922      	cbnz	r2, 5f40 <_realloc_r+0x20>
    5f36:	f7ff fbb3 	bl	56a0 <_free_r>
    5f3a:	4625      	mov	r5, r4
    5f3c:	4628      	mov	r0, r5
    5f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f40:	f000 f814 	bl	5f6c <_malloc_usable_size_r>
    5f44:	4284      	cmp	r4, r0
    5f46:	d90f      	bls.n	5f68 <_realloc_r+0x48>
    5f48:	4621      	mov	r1, r4
    5f4a:	4638      	mov	r0, r7
    5f4c:	f7ff fbf6 	bl	573c <_malloc_r>
    5f50:	4605      	mov	r5, r0
    5f52:	2800      	cmp	r0, #0
    5f54:	d0f2      	beq.n	5f3c <_realloc_r+0x1c>
    5f56:	4631      	mov	r1, r6
    5f58:	4622      	mov	r2, r4
    5f5a:	f7ff fb73 	bl	5644 <memcpy>
    5f5e:	4631      	mov	r1, r6
    5f60:	4638      	mov	r0, r7
    5f62:	f7ff fb9d 	bl	56a0 <_free_r>
    5f66:	e7e9      	b.n	5f3c <_realloc_r+0x1c>
    5f68:	4635      	mov	r5, r6
    5f6a:	e7e7      	b.n	5f3c <_realloc_r+0x1c>

00005f6c <_malloc_usable_size_r>:
    5f6c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    5f70:	2800      	cmp	r0, #0
    5f72:	f1a0 0004 	sub.w	r0, r0, #4
    5f76:	bfbc      	itt	lt
    5f78:	580b      	ldrlt	r3, [r1, r0]
    5f7a:	18c0      	addlt	r0, r0, r3
    5f7c:	4770      	bx	lr
    5f7e:	0000      	movs	r0, r0
    5f80:	2a2a2a2a 	.word	0x2a2a2a2a
    5f84:	2a2a2a2a 	.word	0x2a2a2a2a
    5f88:	2a2a2a2a 	.word	0x2a2a2a2a
    5f8c:	2a2a2a2a 	.word	0x2a2a2a2a
    5f90:	2a2a2a2a 	.word	0x2a2a2a2a
    5f94:	2a2a2a2a 	.word	0x2a2a2a2a
    5f98:	2a2a2a2a 	.word	0x2a2a2a2a
    5f9c:	2a2a2a2a 	.word	0x2a2a2a2a
    5fa0:	2a2a2a2a 	.word	0x2a2a2a2a
    5fa4:	2a2a2a2a 	.word	0x2a2a2a2a
    5fa8:	2a2a2a2a 	.word	0x2a2a2a2a
    5fac:	2a2a2a2a 	.word	0x2a2a2a2a
    5fb0:	2a2a2a2a 	.word	0x2a2a2a2a
    5fb4:	2a2a2a2a 	.word	0x2a2a2a2a
    5fb8:	00002a2a 	.word	0x00002a2a
    5fbc:	2a2a2a2a 	.word	0x2a2a2a2a
    5fc0:	2a2a2a2a 	.word	0x2a2a2a2a
    5fc4:	2a2a2a2a 	.word	0x2a2a2a2a
    5fc8:	532a2a2a 	.word	0x532a2a2a
    5fcc:	4b434154 	.word	0x4b434154
    5fd0:	45564f20 	.word	0x45564f20
    5fd4:	4f4c4652 	.word	0x4f4c4652
    5fd8:	45442057 	.word	0x45442057
    5fdc:	54434554 	.word	0x54434554
    5fe0:	2a2a4445 	.word	0x2a2a4445
    5fe4:	2a2a2a2a 	.word	0x2a2a2a2a
    5fe8:	2a2a2a2a 	.word	0x2a2a2a2a
    5fec:	2a2a2a2a 	.word	0x2a2a2a2a
    5ff0:	2a2a2a2a 	.word	0x2a2a2a2a
    5ff4:	00002a2a 	.word	0x00002a2a
    5ff8:	6b736154 	.word	0x6b736154
    5ffc:	6e614820 	.word	0x6e614820
    6000:	20656c64 	.word	0x20656c64
    6004:	6425202d 	.word	0x6425202d
    6008:	00000a0d 	.word	0x00000a0d

0000600c <ModemCmdData>:
    600c:	00000200 000065a8 00000000 00000ded     .....e..........
    601c:	00000000 00000001 000065ac 00020003     .........e......
    602c:	00000ded 00000009 00000002 000065b0     .............e..
    603c:	000f0008 00000ded 0000001b 00000003     ................
    604c:	000065bc 000e000c 00000ded 0000001e     .e..............
    605c:	00000004 000065cc 000c0008 00000ded     .....e..........
    606c:	00000018 00000005 000065d8 00080005     .........e......
    607c:	00000ded 00000011 00000006 000065e4     .............e..
    608c:	000b000a 00000ded 00000019 00000007     ................
    609c:	000065f0 0015000a 00000ded 00000023     .e..........#...
    60ac:	00000008 000065fc 00020005 00000ded     .....e..........
    60bc:	0000000b 00000109 00006604 000c0027     .........f..'...
    60cc:	00000ded 00000037 0000010a 0000662c     ....7.......,f..
    60dc:	00020012 00000ded 00000018 0000010b     ................
    60ec:	00006640 00020012 00000ded 00000018     @f..............
    60fc:	0000010c 00006654 00020012 00000ded     ....Tf..........
    610c:	00000018 0000010d 00006668 00020012     ........hf......
    611c:	00000ded 00000018 0000010e 0000667c     ............|f..
    612c:	00020012 00000ded 00000018 0000010f     ................
    613c:	00006690 00020012 00000ded 00000018     .f..............
    614c:	00000110 000066a4 00020012 00000ded     .....f..........
    615c:	00000018 00000111 000066b8 00020012     .........f......
    616c:	00000ded 00000018 00000112 000066cc     .............f..
    617c:	00020012 00000ded 00000018 00000113     ................
    618c:	000066e0 00020013 00000ded 00000019     .f..............
    619c:	00000114 000066f4 0002001f 00000ded     .....f..........
    61ac:	00000025 00000115 00006714 00020023     %........g..#...
    61bc:	00000ded 00000029 00000116 00006738     ....).......8g..
    61cc:	0002001a 00000ded 00000020 00000117     ........ .......
    61dc:	20000000 00070011 00000ded 0000001c     ... ............
    61ec:	00000118 200001ac 00bf003a 00000ded     ....... :.......
    61fc:	000000fd 00000119 00006754 00020010     ........Tg......
    620c:	00000ded 00000016 0000011a 00006768     ............hg..
    621c:	00020010 00000ded 00000016 0000011b     ................
    622c:	0000677c 0002000b 00000ded 00000011     |g..............
	...
    64bc:	73736553 206e6f69 2d204449 00003120     Session ID - 1..
    64cc:	73736553 206e6f69 2d204449 00003220     Session ID - 2..
    64dc:	73736553 206e6f69 2d204449 00003320     Session ID - 3..
    64ec:	73736553 206e6f69 2d204449 00003420     Session ID - 4..
    64fc:	73736553 206e6f69 2d204449 00003520     Session ID - 5..
    650c:	73736553 206e6f69 2d204449 00003620     Session ID - 6..
    651c:	73736553 206e6f69 2d204449 00003720     Session ID - 7..
    652c:	73736553 206e6f69 2d204449 00003820     Session ID - 8..
    653c:	73736553 206e6f69 76204449 65756c61     Session ID value
    654c:	63786520 73646565 65687420 78616d20      exceeds the max
    655c:	6c617620 00006575 5454484b 45482050      value..KHTTP HE
    656c:	52454441 72745320 20676e69 00207369     ADER String is .
    657c:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    658c:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    659c:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    65ac:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    65bc:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    65cc:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    65dc:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    65ec:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    65fc:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    660c:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    661c:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    662c:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    663c:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    664c:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    665c:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    666c:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    667c:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    668c:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    669c:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    66ac:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    66bc:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    66cc:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    66dc:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    66ec:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    66fc:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    670c:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    671c:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    672c:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    673c:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    674c:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    675c:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    676c:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    677c:	432b5441 54544147 000d303d 6f727245     AT+CGATT=0..Erro
    678c:	48203a72 20706165 6f6c6c61 69746163     r: Heap allocati
    679c:	66206e6f 7020726f 65737261 74616420     on for parse dat
    67ac:	75622061 72656666 69616620 0064656c     a buffer failed.
    67bc:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    67cc:	76206f74 66697265 68742079 6f632065     to verify the co
    67dc:	6e616d6d 74732064 676e6972 72756420     mmand string dur
    67ec:	20676e69 73726170 00676e69 6f727245     ing parsing.Erro
    67fc:	4e203a72 6120746f 20656c62 72206f74     r: Not able to r
    680c:	20646165 61746164 6f726620 6572206d     ead data from re
    681c:	76696563 69722065 6220676e 65666675     ceive ring buffe
    682c:	75642072 676e6972 72617020 00726573     r during parser.
    683c:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    684c:	69746163 66206e6f 7220726f 6f707365     cation for respo
    685c:	2065736e 61746164 66756220 20726566     nse data buffer 
    686c:	6c696166 00006465 65707845 64657463     failed..Expected
    687c:	646f6d20 72206d65 6f707365 2065736e      modem response 
    688c:	6e207369 7220746f 69656365 00646576     is not received.
    689c:	52206f4e 6f707365 2065736e 6d6f7266     No Response from
    68ac:	62655720 76655320 2e2e7265 6f502e2e      Web Sever....Po
    68bc:	6e697473 61642067 74206174 6573206f     sting data to se
    68cc:	20726576 66207369 656c6961 00000064     ver is failed...
    68dc:	66726550 696d726f 7420676e 45206568     Performing the E
    68ec:	726f7272 63655220 7265766f 72502079     rror Recovery Pr
    68fc:	6465636f 73657275 00002e2e 736f6c43     ocedures....Clos
    690c:	61206465 5220646e 65706f65 2064656e     ed and Reopened 
    691c:	20656874 73736573 2e6e6f69 2e2e2e2e     the session.....
    692c:	0000002e 6f747541 63657220 7265766f     ....Auto recover
    693c:	6f632079 656c706d 2e646574 2e2e2e2e     y completed.....
    694c:	0000002e 6f727245 203a2072 636f7250     ....Error : Proc
    695c:	20737365 70736572 65736e6f 69616620     ess response fai
    696c:	2064656c 614c202d 43207473 616d6d6f     led - Last Comma
    697c:	4920646e 6c61766e 00006469 746e6553     nd Invalid..Sent
    698c:	65687420 73655320 6e6f6973 6f6c4320      the Session Clo
    699c:	72206573 65757165 74207473 7854206f     se request to Tx
    69ac:	73615420 0000006b 6c696146 74206465      Task...Failed t
    69bc:	6573206f 7420746e 53206568 69737365     o sent the Sessi
    69cc:	43206e6f 65736f6c 71657220 74736575     on Close request
    69dc:	206f7420 54207854 006b7361 6f727245      to Tx Task.Erro
    69ec:	203a2072 20746f4e 656c6261 206f7420     r : Not able to 
    69fc:	6174626f 54206e69 65532078 6170616d     obtain Tx Semapa
    6a0c:	65726f68 00000000 6e617254 74696d73     hore....Transmit
    6a1c:	65755120 69206575 6f6e2073 6d652074      Queue is not em
    6a2c:	00797470 4d206f4e 2065726f 69746341     pty.No More Acti
    6a3c:	43206576 656e6e6f 6f697463 7420736e     ve Connections t
    6a4c:	6c63206f 0065736f 65636552 64657669     o close.Received
    6a5c:	63206120 656e6e6f 6f697463 6572206e      a connection re
    6a6c:	6e6f7073 69206573 5852206e 646f4d20     sponse in RX Mod
    6a7c:	00000065 6c696146 74206465 6572206f     e...Failed to re
    6a8c:	76696563 6f632065 63656e6e 6e6f6974     ceive connection
    6a9c:	73657220 736e6f70 6e692065 20585220      response in RX 
    6aac:	65646f6d 00000000 45444f4d 4144204d     mode....MODEM DA
    6abc:	55204154 20545241 52455328 334d4f43     TA UART (SERCOM3
    6acc:	6e692029 61697469 657a696c 00000064     ) initialized...
    6adc:	43524553 20334d4f 4f495250 59544952     SERCOM3 PRIORITY
    6aec:	00000000 6c696146 74206465 6e69206f     ....Failed to in
    6afc:	61697469 657a696c 65687420 444f4d20     itialize the MOD
    6b0c:	44204d45 20415441 54524155 00000000     EM DATA UART....
    6b1c:	746e6553 65687420 61694420 61642067     Sent the Diag da
    6b2c:	74206174 7854206f 73615420 0000006b     ta to Tx Task...
    6b3c:	6c696146 74206465 6573206f 7420746e     Failed to sent t
    6b4c:	44206568 20676169 61746164 206f7420     he Diag data to 
    6b5c:	54207854 006b7361 72746552 65766569     Tx Task.Retrieve
    6b6c:	68742064 6f4d2065 206d6564 49454d49     d the Modem IMEI
    6b7c:	6d754e20 00726562 72746552 65766569      Number.Retrieve
    6b8c:	68742064 6f4d2065 206d6564 69726573     d the Modem seri
    6b9c:	4e206c61 65626d75 00000072 65636552     al Number...Rece
    6bac:	64657669 6e6f4320 7463656e 206e6f69     ived Connection 
    6bbc:	70736572 65736e6f 206e6920 646e6168     response in hand
    6bcc:	0000656c 63637553 66737365 796c6c75     le..Successfully
    6bdc:	736f7020 20646574 6e6e6f63 69746365      posted connecti
    6bec:	52206e6f 6f707365 2065736e 51206f74     on Response to Q
    6bfc:	65756575 00000000 6c696146 74206465     ueue....Failed t
    6c0c:	6f70206f 74207473 63206568 656e6e6f     o post the conne
    6c1c:	6f697463 6552206e 6e6f7073 74206573     ction Response t
    6c2c:	7551206f 00657565 6f727245 203a2072     o Queue.Error : 
    6c3c:	6d6d6f43 20646e61 70736552 65736e6f     Command Response
    6c4c:	65755120 69206575 6f6e2073 6d652074      Queue is not em
    6c5c:	00797470 4f525245 52203a52 69656365     pty.ERROR: Recei
    6c6c:	20646576 65206e61 7974706d 73657220     ved an empty res
    6c7c:	736e6f70 74732065 676e6972 206e6920     ponse string in 
    6c8c:	6d6d6f63 20646e61 70736572 65736e6f     command response
    6c9c:	6e616820 72656c64 00000000 6c430a0d      handler......Cl
    6cac:	6465736f 206e6120 69746361 63206576     osed an active c
    6cbc:	656e6e6f 6f697463 0000006e 72656854     onnection...Ther
    6ccc:	73692065 206f6e20 6e6e6f63 69746365     e is no connecti
    6cdc:	65206e6f 62617473 6873696c 77206465     on established w
    6cec:	20687469 73696874 73657320 6e6f6973     ith this session
    6cfc:	2e444920 00002e2e 63656843 676e696b      ID.....Checking
    6d0c:	726f6620 206e6120 69746361 63206576      for an active c
    6d1c:	656e6e6f 6f697463 6977206e 6e206874     onnection with n
    6d2c:	20747865 73736573 206e6f69 2e2e4449     ext session ID..
    6d3c:	00000a2e 4b206e49 54544150 204e5245     ....In KPATTERN 
    6d4c:	646e6168 0072656c 4b206e49 43584e43     handler.In KCNXC
    6d5c:	68204746 6c646e61 00007265 4b206e49     FG handler..In K
    6d6c:	54584e43 52454d49 6e616820 72656c64     CNXTIMER handler
    6d7c:	00000000 4b206e49 50545448 20474643     ....In KHTTPCFG 
    6d8c:	646e6168 0072656c 4b206e49 50545448     handler.In KHTTP
    6d9c:	41454820 20524544 646e6168 0072656c      HEADER handler.
    6dac:	4e4e4f43 00544345 64616548 52207265     CONNECT.Header R
    6dbc:	6f707365 2065736e 00006b4f 64616548     esponse Ok..Head
    6dcc:	52207265 6f707365 2065736e 20746f4e     er Response Not 
    6ddc:	00006b4f 000a0a0d 54206e49 494d5245     Ok......In TERMI
    6dec:	4554414e 41454820 20524544 646e6168     NATE HEADER hand
    6dfc:	0072656c 69746f4e 61636966 6e6f6974     ler.Notification
    6e0c:	63655220 65766965 6f742064 20785220      Received to Rx 
    6e1c:	6b736154 6f726620 5349206d 00000052     Task from ISR...
    6e2c:	63637553 66737365 796c6c75 72615020     Successfully Par
    6e3c:	20646573 20656874 7473616c 6d6f6320     sed the last com
    6e4c:	646e616d 00000000 4f525245 43203a52     mand....ERROR: C
    6e5c:	616d6d6f 5020646e 69737261 4620676e     ommand Parsing F
    6e6c:	656c6961 00000064 69746f4e 61636966     ailed...Notifica
    6e7c:	6e6f6974 746f4e20 63655220 65766965     tion Not Receive
    6e8c:	6f742064 20785220 6b736154 00000000     d to Rx Task....
    6e9c:	6e617254 74696d73 20646574 6f632061     Transmitted a co
    6eac:	6e616d6d 6f742064 646f4d20 00006d65     mmand to Modem..
    6ebc:	73207854 61697265 6544206c 20677562     Tx serial Debug 
    6ecc:	656e6f44 00000a0d 44207852 0d656e6f     Done....Rx Done.
    6edc:	0000000a 2d207325 20642520 00000a0d     ....%s - %d ....
    6eec:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
    6efc:	775f6c61 682e7464 00000000 20544457     al_wdt.h....WDT 
    6f0c:	74696e49 696c6169 00646573 20544457     Initialised.WDT 
    6f1c:	6c696146 74206465 6e69206f 61697469     Failed to initia
    6f2c:	657a696c 00000000 682f2e2e 732f6c61     lize....../hal/s
    6f3c:	682f6372 615f6c61 79735f63 632e636e     rc/hal_ac_sync.c
    6f4c:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    6f5c:	615f6c61 735f6364 2e636e79 00000063     al_adc_sync.c...
    6f6c:	682f2e2e 732f6c61 682f6372 645f6c61     ../hal/src/hal_d
    6f7c:	735f6361 2e636e79 00000063 682f2e2e     ac_sync.c...../h
    6f8c:	732f6c61 682f6372 665f6c61 6873616c     al/src/hal_flash
    6f9c:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
    6fac:	705f6c61 632e6d77 00000000 682f2e2e     al_pwm.c....../h
    6fbc:	732f6c61 682f6372 745f6c61 72656d69     al/src/hal_timer
    6fcc:	0000632e 682f2e2e 752f6c61 736c6974     .c..../hal/utils
    6fdc:	6372732f 6974752f 6c5f736c 2e747369     /src/utils_list.
    6fec:	00000063 682f2e2e 752f6c61 736c6974     c...../hal/utils
    6ffc:	6372732f 6974752f 725f736c 62676e69     /src/utils_ringb
    700c:	65666675 00632e72 682f2e2e 612f6c70     uffer.c.../hpl/a
    701c:	70682f63 63615f6c 0000632e              c/hpl_ac.c..

00007028 <_adcs>:
    7028:	00c00000 00830002 00001900 00000000     ................
    7038:	00000000 00010001 00000000 00000000     ................
	...
    7054:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    7064:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    7074:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00007084 <_cfgs>:
	...

00007184 <user_mux_confs>:
	...

000071c8 <channel_confs>:
	...

00007208 <interrupt_cfg>:
	...
    7288:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    7298:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    72a8:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    72b8:	43000000 43000400                       ...C...C

000072c0 <_usarts>:
    72c0:	00000003 40200004 00030000 00700002     ...... @......p.
    72d0:	0000f62b 00000000 00000004 40300184     +.............0@
    72e0:	00030300 00700002 0000ff2e 00000000     ......p.........
    72f0:	00000005 40300004 00030000 00700002     ......0@......p.
    7300:	0000f62b 00000000                       +.......

00007308 <_i2cms>:
	...

00007320 <sercomspi_regs>:
	...
    7334:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    7344:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    7354:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00007364 <_tccs>:
    7364:	00000000 00000300 00000000 00000000     ................
    7374:	00001770 00000000 00000000 00000000     p...............
    7384:	00000000 00000001 00000300 00000000     ................
    7394:	00000000 00001770 00000000 00000000     ....p...........
	...
    73ac:	00000002 00000300 00000000 00000000     ................
    73bc:	00001770 00000000 00000000 00000000     p...............
    73cc:	00000000 00000003 00000300 00000000     ................
    73dc:	00000000 00001770 00000000 00000000     ....p...........
	...
    73f4:	00000004 00000300 00000000 00000000     ................
    7404:	00001770 00000000 00000000 00000000     p...............
    7414:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    7424:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    7434:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    7444:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    7454:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    7464:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    7474:	26207854 20785220 75657551 61207365     Tx & Rx Queues a
    7484:	63206572 74616572 00006465 616d6553     re created..Sema
    7494:	726f6870 61207365 4d20646e 78657475     phores and Mutex
    74a4:	61207365 63206572 74616572 00006465     es are created..
    74b4:	70736944 68637461 6b736154 00000000     DispatchTask....
    74c4:	65646f4d 7361546d 0000006b 65646f4d     ModemTask...Mode
    74d4:	5478526d 006b7361 65646f4d 6f72506d     mRxTask.ModemPro
    74e4:	73736563 6b736154 00000000 65646f4d     cessTask....Mode
    74f4:	6169446d 73615467 0000006b 63637553     mDiagTask...Succ
    7504:	66737365 796c6c75 65724320 64657461     essfully Created
    7514:	65687420 73615420 0000736b 65657246      the Tasks..Free
    7524:	4f545220 63532053 75646568 2072656c      RTOS Scheduler 
    7534:	20746f6e 72617473 00646574 6c696146     not started.Fail
    7544:	74206465 7263206f 65746165 73617420     ed to create tas
    7554:	0000736b 6f727245 53203a72 64656863     ks..Error: Sched
    7564:	72656c75 69786520 00646574 454c4449     uler exited.IDLE
    7574:	00000000 09632509 25097525 75250975     .....%c.%u.%u.%u
    7584:	00000a0d 20726d54 00637653              ....Tmr Svc.

00007590 <__sf_fake_stderr>:
	...

000075b0 <__sf_fake_stdin>:
	...

000075d0 <__sf_fake_stdout>:
	...
    75f0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7600:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7610:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7620:	00006665                                ef..

00007624 <_init>:
    7624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7626:	bf00      	nop
    7628:	bcf8      	pop	{r3, r4, r5, r6, r7}
    762a:	bc08      	pop	{r3}
    762c:	469e      	mov	lr, r3
    762e:	4770      	bx	lr

00007630 <__init_array_start>:
    7630:	00000289 	.word	0x00000289

00007634 <_fini>:
    7634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7636:	bf00      	nop
    7638:	bcf8      	pop	{r3, r4, r5, r6, r7}
    763a:	bc08      	pop	{r3}
    763c:	469e      	mov	lr, r3
    763e:	4770      	bx	lr

00007640 <__fini_array_start>:
    7640:	00000265 	.word	0x00000265
