
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000745c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000018c  20000000  0000745c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002018c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002018c  2**0
                  CONTENTS
  4 .bss          00003c70  20000190  000075f0  00020190  2**4
                  ALLOC
  5 .stack        00010000  20003e00  0000b260  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005ab27  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009270  00000000  00000000  0007ad3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001aa68  00000000  00000000  00083faa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b50  00000000  00000000  0009ea12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000021b8  00000000  00000000  000a0562  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001b0c4  00000000  00000000  000a271a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d6fa  00000000  00000000  000bd7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107f79  00000000  00000000  000eaed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000494c  00000000  00000000  001f2e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 3e 01 20 61 12 00 00 5d 12 00 00 5d 12 00 00     .>. a...]...]...
      10:	5d 12 00 00 5d 12 00 00 5d 12 00 00 00 00 00 00     ]...]...].......
	...
      2c:	f1 36 00 00 5d 12 00 00 00 00 00 00 91 37 00 00     .6..]........7..
      3c:	f5 37 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     .7..]...]...]...
      4c:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
      5c:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
      6c:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
      7c:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
      8c:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
      9c:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
      ac:	5d 12 00 00 5d 12 00 00 e9 25 00 00 fd 25 00 00     ]...]....%...%..
      bc:	79 23 00 00 85 23 00 00 91 23 00 00 9d 23 00 00     y#...#...#...#..
      cc:	a9 23 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     .#..]...]...]...
      dc:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
      ec:	5d 12 00 00 00 00 00 00 f9 26 00 00 5d 12 00 00     ]........&..]...
      fc:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
     10c:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
     11c:	5d 12 00 00 5d 12 00 00 5d 12 00 00 89 07 00 00     ]...]...].......
     12c:	95 07 00 00 a1 07 00 00 5d 12 00 00 5d 12 00 00     ........]...]...
     13c:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
     14c:	5d 12 00 00 45 11 00 00 5d 12 00 00 00 00 00 00     ]...E...].......
	...
     180:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
     190:	00 00 00 00 99 2c 00 00 5d 12 00 00 5d 12 00 00     .....,..]...]...
     1a0:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
     1b0:	ad 2c 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     .,..]...]...]...
     1c0:	5d 12 00 00 c1 2c 00 00 5d 12 00 00 5d 12 00 00     ]....,..]...]...
     1d0:	5d 12 00 00 d5 2c 00 00 5d 12 00 00 5d 12 00 00     ]....,..]...]...
     1e0:	e9 2c 00 00 5d 12 00 00 5d 12 00 00 dd 31 00 00     .,..]...]....1..
     1f0:	f1 31 00 00 05 32 00 00 19 32 00 00 2d 32 00 00     .1...2...2..-2..
     200:	41 32 00 00 00 00 00 00 00 00 00 00 5d 12 00 00     A2..........]...
     210:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
     220:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
     230:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
     240:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
     250:	5d 12 00 00 5d 12 00 00 5d 12 00 00 5d 12 00 00     ]...]...]...]...
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	0000745c 	.word	0x0000745c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000745c 	.word	0x0000745c
     2c4:	20000194 	.word	0x20000194
     2c8:	0000745c 	.word	0x0000745c
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Apps/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b09a      	sub	sp, #104	; 0x68
     2d4:	4606      	mov	r6, r0
     2d6:	460f      	mov	r7, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
     2d8:	2264      	movs	r2, #100	; 0x64
     2da:	2100      	movs	r1, #0
     2dc:	a801      	add	r0, sp, #4
     2de:	4b0d      	ldr	r3, [pc, #52]	; (314 <vApplicationStackOverflowHook+0x44>)
     2e0:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e2:	4d0d      	ldr	r5, [pc, #52]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e4:	4628      	mov	r0, r5
     2e6:	4c0d      	ldr	r4, [pc, #52]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2e8:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2ea:	480d      	ldr	r0, [pc, #52]	; (320 <vApplicationStackOverflowHook+0x50>)
     2ec:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ee:	4628      	mov	r0, r5
     2f0:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f2:	480c      	ldr	r0, [pc, #48]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f4:	47a0      	blx	r4
	sprintf((int8_t*)dbgBuffer," Task Handle - %d ### Task Name - %s",xTask,pcTaskName);
     2f6:	463b      	mov	r3, r7
     2f8:	4632      	mov	r2, r6
     2fa:	490b      	ldr	r1, [pc, #44]	; (328 <vApplicationStackOverflowHook+0x58>)
     2fc:	a801      	add	r0, sp, #4
     2fe:	4c0b      	ldr	r4, [pc, #44]	; (32c <vApplicationStackOverflowHook+0x5c>)
     300:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     302:	a801      	add	r0, sp, #4
     304:	4b0a      	ldr	r3, [pc, #40]	; (330 <vApplicationStackOverflowHook+0x60>)
     306:	4798      	blx	r3
     308:	b281      	uxth	r1, r0
     30a:	a801      	add	r0, sp, #4
     30c:	4b09      	ldr	r3, [pc, #36]	; (334 <vApplicationStackOverflowHook+0x64>)
     30e:	4798      	blx	r3
     310:	e7fe      	b.n	310 <vApplicationStackOverflowHook+0x40>
     312:	bf00      	nop
     314:	00005621 	.word	0x00005621
     318:	00005f30 	.word	0x00005f30
     31c:	000010b5 	.word	0x000010b5
     320:	00005f6c 	.word	0x00005f6c
     324:	00006d0c 	.word	0x00006d0c
     328:	00005fa8 	.word	0x00005fa8
     32c:	000057a9 	.word	0x000057a9
     330:	00005801 	.word	0x00005801
     334:	00001071 	.word	0x00001071

00000338 <DispatchTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "Apps/SerialDebug/SerialDebug.h"


void DispatchTask( void *DispatchTaskParam)
{
     338:	b570      	push	{r4, r5, r6, lr}
     33a:	b082      	sub	sp, #8
	TickType_t xLastWakeTime;
	const TickType_t xDelayMs = pdMS_TO_TICKS(10000UL);
	xLastWakeTime = xTaskGetTickCount();
     33c:	4b07      	ldr	r3, [pc, #28]	; (35c <DispatchTask+0x24>)
     33e:	4798      	blx	r3
     340:	9001      	str	r0, [sp, #4]

	while(1)
	{
		DEBUG_PRINT("Running Dispatch Task successfully");
     342:	4e07      	ldr	r6, [pc, #28]	; (360 <DispatchTask+0x28>)
     344:	4d07      	ldr	r5, [pc, #28]	; (364 <DispatchTask+0x2c>)
		kickWatchDog();
     346:	4c08      	ldr	r4, [pc, #32]	; (368 <DispatchTask+0x30>)
		DEBUG_PRINT("Running Dispatch Task successfully");
     348:	4630      	mov	r0, r6
     34a:	47a8      	blx	r5
		kickWatchDog();
     34c:	47a0      	blx	r4
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     34e:	f242 7110 	movw	r1, #10000	; 0x2710
     352:	a801      	add	r0, sp, #4
     354:	4b05      	ldr	r3, [pc, #20]	; (36c <DispatchTask+0x34>)
     356:	4798      	blx	r3
     358:	e7f6      	b.n	348 <DispatchTask+0x10>
     35a:	bf00      	nop
     35c:	000047e5 	.word	0x000047e5
     360:	00005fd0 	.word	0x00005fd0
     364:	000010b5 	.word	0x000010b5
     368:	00001231 	.word	0x00001231
     36c:	00004a25 	.word	0x00004a25

00000370 <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     370:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     372:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     376:	460d      	mov	r5, r1
     378:	4c04      	ldr	r4, [pc, #16]	; (38c <getModemCommandData+0x1c>)
     37a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     37e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     382:	6823      	ldr	r3, [r4, #0]
     384:	602b      	str	r3, [r5, #0]
}
     386:	bc30      	pop	{r4, r5}
     388:	4770      	bx	lr
     38a:	bf00      	nop
     38c:	00005ff4 	.word	0x00005ff4

00000390 <mdmParser_SetKhttpHeaderString>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetKhttpHeaderString(uint8_t* sessionID)
{
     390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (*sessionID)
     392:	7803      	ldrb	r3, [r0, #0]
     394:	3b31      	subs	r3, #49	; 0x31
     396:	2b07      	cmp	r3, #7
     398:	d86d      	bhi.n	476 <mdmParser_SetKhttpHeaderString+0xe6>
     39a:	e8df f003 	tbb	[pc, r3]
     39e:	2d04      	.short	0x2d04
     3a0:	51483f36 	.word	0x51483f36
     3a4:	635a      	.short	0x635a
	{
		case 49:
		{
			kHttpHeaderString[15] = '1';
     3a6:	4b36      	ldr	r3, [pc, #216]	; (480 <mdmParser_SetKhttpHeaderString+0xf0>)
     3a8:	2231      	movs	r2, #49	; 0x31
     3aa:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '1';
     3ac:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 1");
     3b0:	4834      	ldr	r0, [pc, #208]	; (484 <mdmParser_SetKhttpHeaderString+0xf4>)
     3b2:	4b35      	ldr	r3, [pc, #212]	; (488 <mdmParser_SetKhttpHeaderString+0xf8>)
     3b4:	4798      	blx	r3
			DEBUG_PRINT("Session ID value exceeds the max value");
		}
		break;
	}

	DEBUG_PRINT("KHTTP HEADER String is ");
     3b6:	4835      	ldr	r0, [pc, #212]	; (48c <mdmParser_SetKhttpHeaderString+0xfc>)
     3b8:	4b33      	ldr	r3, [pc, #204]	; (488 <mdmParser_SetKhttpHeaderString+0xf8>)
     3ba:	4798      	blx	r3

	strncpy(kHttpGetCompleteData,kHttpGetString,15);
     3bc:	4c34      	ldr	r4, [pc, #208]	; (490 <mdmParser_SetKhttpHeaderString+0x100>)
     3be:	220f      	movs	r2, #15
     3c0:	4934      	ldr	r1, [pc, #208]	; (494 <mdmParser_SetKhttpHeaderString+0x104>)
     3c2:	4620      	mov	r0, r4
     3c4:	4b34      	ldr	r3, [pc, #208]	; (498 <mdmParser_SetKhttpHeaderString+0x108>)
     3c6:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
     3c8:	4620      	mov	r0, r4
     3ca:	4b34      	ldr	r3, [pc, #208]	; (49c <mdmParser_SetKhttpHeaderString+0x10c>)
     3cc:	4798      	blx	r3
     3ce:	4d34      	ldr	r5, [pc, #208]	; (4a0 <mdmParser_SetKhttpHeaderString+0x110>)
     3d0:	4404      	add	r4, r0
     3d2:	f105 0720 	add.w	r7, r5, #32
     3d6:	462e      	mov	r6, r5
     3d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     3da:	6020      	str	r0, [r4, #0]
     3dc:	6061      	str	r1, [r4, #4]
     3de:	60a2      	str	r2, [r4, #8]
     3e0:	60e3      	str	r3, [r4, #12]
     3e2:	4635      	mov	r5, r6
     3e4:	3410      	adds	r4, #16
     3e6:	42be      	cmp	r6, r7
     3e8:	d1f5      	bne.n	3d6 <mdmParser_SetKhttpHeaderString+0x46>
     3ea:	cd07      	ldmia	r5!, {r0, r1, r2}
     3ec:	6020      	str	r0, [r4, #0]
     3ee:	6061      	str	r1, [r4, #4]
     3f0:	60a2      	str	r2, [r4, #8]
     3f2:	782b      	ldrb	r3, [r5, #0]
     3f4:	7323      	strb	r3, [r4, #12]
     3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kHttpHeaderString[15] = '2';
     3f8:	4b21      	ldr	r3, [pc, #132]	; (480 <mdmParser_SetKhttpHeaderString+0xf0>)
     3fa:	2232      	movs	r2, #50	; 0x32
     3fc:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '2';
     3fe:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 2");
     402:	4828      	ldr	r0, [pc, #160]	; (4a4 <mdmParser_SetKhttpHeaderString+0x114>)
     404:	4b20      	ldr	r3, [pc, #128]	; (488 <mdmParser_SetKhttpHeaderString+0xf8>)
     406:	4798      	blx	r3
		break;
     408:	e7d5      	b.n	3b6 <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '3';
     40a:	4b1d      	ldr	r3, [pc, #116]	; (480 <mdmParser_SetKhttpHeaderString+0xf0>)
     40c:	2233      	movs	r2, #51	; 0x33
     40e:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '3';
     410:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 3");
     414:	4824      	ldr	r0, [pc, #144]	; (4a8 <mdmParser_SetKhttpHeaderString+0x118>)
     416:	4b1c      	ldr	r3, [pc, #112]	; (488 <mdmParser_SetKhttpHeaderString+0xf8>)
     418:	4798      	blx	r3
		break;
     41a:	e7cc      	b.n	3b6 <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '4';
     41c:	4b18      	ldr	r3, [pc, #96]	; (480 <mdmParser_SetKhttpHeaderString+0xf0>)
     41e:	2234      	movs	r2, #52	; 0x34
     420:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '4';
     422:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 4");
     426:	4821      	ldr	r0, [pc, #132]	; (4ac <mdmParser_SetKhttpHeaderString+0x11c>)
     428:	4b17      	ldr	r3, [pc, #92]	; (488 <mdmParser_SetKhttpHeaderString+0xf8>)
     42a:	4798      	blx	r3
		break;
     42c:	e7c3      	b.n	3b6 <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '5';
     42e:	4b14      	ldr	r3, [pc, #80]	; (480 <mdmParser_SetKhttpHeaderString+0xf0>)
     430:	2235      	movs	r2, #53	; 0x35
     432:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '5';
     434:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 5");
     438:	481d      	ldr	r0, [pc, #116]	; (4b0 <mdmParser_SetKhttpHeaderString+0x120>)
     43a:	4b13      	ldr	r3, [pc, #76]	; (488 <mdmParser_SetKhttpHeaderString+0xf8>)
     43c:	4798      	blx	r3
		break;
     43e:	e7ba      	b.n	3b6 <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '6';
     440:	4b0f      	ldr	r3, [pc, #60]	; (480 <mdmParser_SetKhttpHeaderString+0xf0>)
     442:	2236      	movs	r2, #54	; 0x36
     444:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '6';
     446:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 6");
     44a:	481a      	ldr	r0, [pc, #104]	; (4b4 <mdmParser_SetKhttpHeaderString+0x124>)
     44c:	4b0e      	ldr	r3, [pc, #56]	; (488 <mdmParser_SetKhttpHeaderString+0xf8>)
     44e:	4798      	blx	r3
		break;
     450:	e7b1      	b.n	3b6 <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '7';
     452:	4b0b      	ldr	r3, [pc, #44]	; (480 <mdmParser_SetKhttpHeaderString+0xf0>)
     454:	2237      	movs	r2, #55	; 0x37
     456:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '7';
     458:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 7");
     45c:	4816      	ldr	r0, [pc, #88]	; (4b8 <mdmParser_SetKhttpHeaderString+0x128>)
     45e:	4b0a      	ldr	r3, [pc, #40]	; (488 <mdmParser_SetKhttpHeaderString+0xf8>)
     460:	4798      	blx	r3
		break;
     462:	e7a8      	b.n	3b6 <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '8';
     464:	4b06      	ldr	r3, [pc, #24]	; (480 <mdmParser_SetKhttpHeaderString+0xf0>)
     466:	2238      	movs	r2, #56	; 0x38
     468:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '8';
     46a:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 8");
     46e:	4813      	ldr	r0, [pc, #76]	; (4bc <mdmParser_SetKhttpHeaderString+0x12c>)
     470:	4b05      	ldr	r3, [pc, #20]	; (488 <mdmParser_SetKhttpHeaderString+0xf8>)
     472:	4798      	blx	r3
		break;
     474:	e79f      	b.n	3b6 <mdmParser_SetKhttpHeaderString+0x26>
			DEBUG_PRINT("Session ID value exceeds the max value");
     476:	4812      	ldr	r0, [pc, #72]	; (4c0 <mdmParser_SetKhttpHeaderString+0x130>)
     478:	4b03      	ldr	r3, [pc, #12]	; (488 <mdmParser_SetKhttpHeaderString+0xf8>)
     47a:	4798      	blx	r3
		break;
     47c:	e79b      	b.n	3b6 <mdmParser_SetKhttpHeaderString+0x26>
     47e:	bf00      	nop
     480:	20000000 	.word	0x20000000
     484:	000064a4 	.word	0x000064a4
     488:	000010b5 	.word	0x000010b5
     48c:	0000654c 	.word	0x0000654c
     490:	200001ac 	.word	0x200001ac
     494:	20000014 	.word	0x20000014
     498:	00005835 	.word	0x00005835
     49c:	00005801 	.word	0x00005801
     4a0:	00006564 	.word	0x00006564
     4a4:	000064b4 	.word	0x000064b4
     4a8:	000064c4 	.word	0x000064c4
     4ac:	000064d4 	.word	0x000064d4
     4b0:	000064e4 	.word	0x000064e4
     4b4:	000064f4 	.word	0x000064f4
     4b8:	00006504 	.word	0x00006504
     4bc:	00006514 	.word	0x00006514
     4c0:	00006524 	.word	0x00006524

000004c4 <mdmParser_SendCommandToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
void mdmParser_SendCommandToModem(AT_CMD_TYPE atCmd)
{
     4c4:	b510      	push	{r4, lr}
     4c6:	b086      	sub	sp, #24
     4c8:	4604      	mov	r4, r0
	MODEM_CMD_DATA ModemCmdData;
	getModemCommandData(atCmd, &ModemCmdData);
     4ca:	a901      	add	r1, sp, #4
     4cc:	4b0d      	ldr	r3, [pc, #52]	; (504 <mdmParser_SendCommandToModem+0x40>)
     4ce:	4798      	blx	r3

	if(atCmd == CMD_AT_KHTTP_GET)
     4d0:	2c18      	cmp	r4, #24
     4d2:	d011      	beq.n	4f8 <mdmParser_SendCommandToModem+0x34>
	{
		SerialDebugPrint("\r\n",2);
	}
	mdmCtrlr_FlushRxBuffer();
     4d4:	4b0c      	ldr	r3, [pc, #48]	; (508 <mdmParser_SendCommandToModem+0x44>)
     4d6:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
     4d8:	f89d 100c 	ldrb.w	r1, [sp, #12]
     4dc:	9802      	ldr	r0, [sp, #8]
     4de:	4b0b      	ldr	r3, [pc, #44]	; (50c <mdmParser_SendCommandToModem+0x48>)
     4e0:	4798      	blx	r3
	lastSendATCommand = atCmd;
     4e2:	4b0b      	ldr	r3, [pc, #44]	; (510 <mdmParser_SendCommandToModem+0x4c>)
     4e4:	701c      	strb	r4, [r3, #0]
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     4e6:	2200      	movs	r2, #0
     4e8:	4b0a      	ldr	r3, [pc, #40]	; (514 <mdmParser_SendCommandToModem+0x50>)
     4ea:	701a      	strb	r2, [r3, #0]
	delay_ms(1000);
     4ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     4f0:	4b09      	ldr	r3, [pc, #36]	; (518 <mdmParser_SendCommandToModem+0x54>)
     4f2:	4798      	blx	r3
}
     4f4:	b006      	add	sp, #24
     4f6:	bd10      	pop	{r4, pc}
		SerialDebugPrint("\r\n",2);
     4f8:	2102      	movs	r1, #2
     4fa:	4808      	ldr	r0, [pc, #32]	; (51c <mdmParser_SendCommandToModem+0x58>)
     4fc:	4b08      	ldr	r3, [pc, #32]	; (520 <mdmParser_SendCommandToModem+0x5c>)
     4fe:	4798      	blx	r3
     500:	e7e8      	b.n	4d4 <mdmParser_SendCommandToModem+0x10>
     502:	bf00      	nop
     504:	00000371 	.word	0x00000371
     508:	000008bd 	.word	0x000008bd
     50c:	00000841 	.word	0x00000841
     510:	200001e8 	.word	0x200001e8
     514:	20000023 	.word	0x20000023
     518:	00001b9d 	.word	0x00001b9d
     51c:	00006d0c 	.word	0x00006d0c
     520:	00001071 	.word	0x00001071

00000524 <mdmParser_solicitedCmdParser>:
{
     524:	b5f0      	push	{r4, r5, r6, r7, lr}
     526:	b087      	sub	sp, #28
	getModemCommandData(cmd, &cmdData);
     528:	a901      	add	r1, sp, #4
     52a:	4b2b      	ldr	r3, [pc, #172]	; (5d8 <mdmParser_solicitedCmdParser+0xb4>)
     52c:	4798      	blx	r3
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     52e:	f89d 700c 	ldrb.w	r7, [sp, #12]
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
     532:	f8bd 0014 	ldrh.w	r0, [sp, #20]
     536:	4b29      	ldr	r3, [pc, #164]	; (5dc <mdmParser_solicitedCmdParser+0xb8>)
     538:	4798      	blx	r3
	if(responseBuffer != NULL)
     53a:	2800      	cmp	r0, #0
     53c:	d046      	beq.n	5cc <mdmParser_solicitedCmdParser+0xa8>
     53e:	4604      	mov	r4, r0
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
     540:	f8bd 1014 	ldrh.w	r1, [sp, #20]
     544:	4b26      	ldr	r3, [pc, #152]	; (5e0 <mdmParser_solicitedCmdParser+0xbc>)
     546:	4798      	blx	r3
		if(readStatus != false)
     548:	4606      	mov	r6, r0
     54a:	2800      	cmp	r0, #0
     54c:	d03a      	beq.n	5c4 <mdmParser_solicitedCmdParser+0xa0>
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
     54e:	f89d 200c 	ldrb.w	r2, [sp, #12]
     552:	4621      	mov	r1, r4
     554:	9802      	ldr	r0, [sp, #8]
     556:	4b23      	ldr	r3, [pc, #140]	; (5e4 <mdmParser_solicitedCmdParser+0xc0>)
     558:	4798      	blx	r3
     55a:	bb38      	cbnz	r0, 5ac <mdmParser_solicitedCmdParser+0x88>
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
     55c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
     560:	3001      	adds	r0, #1
     562:	4b1e      	ldr	r3, [pc, #120]	; (5dc <mdmParser_solicitedCmdParser+0xb8>)
     564:	4798      	blx	r3
				if(parsedDataBuffer != NULL)
     566:	4605      	mov	r5, r0
     568:	b1d8      	cbz	r0, 5a2 <mdmParser_solicitedCmdParser+0x7e>
					while(parseCnt < cmdData.validDataCnt)
     56a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
     56e:	b1b3      	cbz	r3, 59e <mdmParser_solicitedCmdParser+0x7a>
     570:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     572:	1cb9      	adds	r1, r7, #2
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
     574:	b2c9      	uxtb	r1, r1
     576:	18e2      	adds	r2, r4, r3
     578:	5c52      	ldrb	r2, [r2, r1]
     57a:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
     57c:	3301      	adds	r3, #1
     57e:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
     580:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     584:	429a      	cmp	r2, r3
     586:	d8f6      	bhi.n	576 <mdmParser_solicitedCmdParser+0x52>
					parsedDataBuffer[parseCnt] = '\0';
     588:	2200      	movs	r2, #0
     58a:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(parsedDataBuffer,cmdData.validDataCnt);
     58c:	f89d 100e 	ldrb.w	r1, [sp, #14]
     590:	4628      	mov	r0, r5
     592:	9b04      	ldr	r3, [sp, #16]
     594:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
     596:	4628      	mov	r0, r5
     598:	4b13      	ldr	r3, [pc, #76]	; (5e8 <mdmParser_solicitedCmdParser+0xc4>)
     59a:	4798      	blx	r3
     59c:	e00a      	b.n	5b4 <mdmParser_solicitedCmdParser+0x90>
					while(parseCnt < cmdData.validDataCnt)
     59e:	2300      	movs	r3, #0
     5a0:	e7f2      	b.n	588 <mdmParser_solicitedCmdParser+0x64>
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
     5a2:	4812      	ldr	r0, [pc, #72]	; (5ec <mdmParser_solicitedCmdParser+0xc8>)
     5a4:	4b12      	ldr	r3, [pc, #72]	; (5f0 <mdmParser_solicitedCmdParser+0xcc>)
     5a6:	4798      	blx	r3
	bool parseStatus = false;
     5a8:	2600      	movs	r6, #0
     5aa:	e003      	b.n	5b4 <mdmParser_solicitedCmdParser+0x90>
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
     5ac:	4811      	ldr	r0, [pc, #68]	; (5f4 <mdmParser_solicitedCmdParser+0xd0>)
     5ae:	4b10      	ldr	r3, [pc, #64]	; (5f0 <mdmParser_solicitedCmdParser+0xcc>)
     5b0:	4798      	blx	r3
				parseStatus = false;
     5b2:	2600      	movs	r6, #0
		vPortFree(responseBuffer);
     5b4:	4620      	mov	r0, r4
     5b6:	4b0c      	ldr	r3, [pc, #48]	; (5e8 <mdmParser_solicitedCmdParser+0xc4>)
     5b8:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
     5ba:	4b0f      	ldr	r3, [pc, #60]	; (5f8 <mdmParser_solicitedCmdParser+0xd4>)
     5bc:	4798      	blx	r3
}
     5be:	4630      	mov	r0, r6
     5c0:	b007      	add	sp, #28
     5c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
     5c4:	480d      	ldr	r0, [pc, #52]	; (5fc <mdmParser_solicitedCmdParser+0xd8>)
     5c6:	4b0a      	ldr	r3, [pc, #40]	; (5f0 <mdmParser_solicitedCmdParser+0xcc>)
     5c8:	4798      	blx	r3
     5ca:	e7f3      	b.n	5b4 <mdmParser_solicitedCmdParser+0x90>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
     5cc:	480c      	ldr	r0, [pc, #48]	; (600 <mdmParser_solicitedCmdParser+0xdc>)
     5ce:	4b08      	ldr	r3, [pc, #32]	; (5f0 <mdmParser_solicitedCmdParser+0xcc>)
     5d0:	4798      	blx	r3
	bool parseStatus = false;
     5d2:	2600      	movs	r6, #0
     5d4:	e7f1      	b.n	5ba <mdmParser_solicitedCmdParser+0x96>
     5d6:	bf00      	nop
     5d8:	00000371 	.word	0x00000371
     5dc:	000039c5 	.word	0x000039c5
     5e0:	00000869 	.word	0x00000869
     5e4:	00005811 	.word	0x00005811
     5e8:	00003a99 	.word	0x00003a99
     5ec:	00006770 	.word	0x00006770
     5f0:	000010b5 	.word	0x000010b5
     5f4:	000067a4 	.word	0x000067a4
     5f8:	000008bd 	.word	0x000008bd
     5fc:	000067e0 	.word	0x000067e0
     600:	00006824 	.word	0x00006824

00000604 <mdmParser_ProcessModemResponse>:
{
     604:	b570      	push	{r4, r5, r6, lr}
     606:	b086      	sub	sp, #24
	getModemCommandData(lastSendATCommand, &cmdData);
     608:	4c27      	ldr	r4, [pc, #156]	; (6a8 <mdmParser_ProcessModemResponse+0xa4>)
     60a:	a901      	add	r1, sp, #4
     60c:	7820      	ldrb	r0, [r4, #0]
     60e:	4b27      	ldr	r3, [pc, #156]	; (6ac <mdmParser_ProcessModemResponse+0xa8>)
     610:	4798      	blx	r3
	if(lastSendATCommand != CMD_AT_MAX)
     612:	7820      	ldrb	r0, [r4, #0]
     614:	2800      	cmp	r0, #0
     616:	d042      	beq.n	69e <mdmParser_ProcessModemResponse+0x9a>
		if(false != mdmParser_solicitedCmdParser(lastSendATCommand))
     618:	4b25      	ldr	r3, [pc, #148]	; (6b0 <mdmParser_ProcessModemResponse+0xac>)
     61a:	4798      	blx	r3
     61c:	b190      	cbz	r0, 644 <mdmParser_ProcessModemResponse+0x40>
			if(lastSendATCommand == cmdData.AtCmd)
     61e:	f89d 2004 	ldrb.w	r2, [sp, #4]
     622:	7823      	ldrb	r3, [r4, #0]
     624:	429a      	cmp	r2, r3
     626:	d004      	beq.n	632 <mdmParser_ProcessModemResponse+0x2e>
		lastSendATCommand = CMD_AT_MAX;
     628:	2200      	movs	r2, #0
     62a:	4b1f      	ldr	r3, [pc, #124]	; (6a8 <mdmParser_ProcessModemResponse+0xa4>)
     62c:	701a      	strb	r2, [r3, #0]
}
     62e:	b006      	add	sp, #24
     630:	bd70      	pop	{r4, r5, r6, pc}
				cmdData.respHandler(responseDataBuffer,cmdData.validDataCnt);
     632:	f89d 100e 	ldrb.w	r1, [sp, #14]
     636:	1d20      	adds	r0, r4, #4
     638:	9b04      	ldr	r3, [sp, #16]
     63a:	4798      	blx	r3
	isPrevCmdRespProcessed = status;
     63c:	2201      	movs	r2, #1
     63e:	4b1d      	ldr	r3, [pc, #116]	; (6b4 <mdmParser_ProcessModemResponse+0xb0>)
     640:	701a      	strb	r2, [r3, #0]
     642:	e7f1      	b.n	628 <mdmParser_ProcessModemResponse+0x24>
			DEBUG_PRINT("Expected modem response is not received");
     644:	481c      	ldr	r0, [pc, #112]	; (6b8 <mdmParser_ProcessModemResponse+0xb4>)
     646:	4b1d      	ldr	r3, [pc, #116]	; (6bc <mdmParser_ProcessModemResponse+0xb8>)
     648:	4798      	blx	r3
			if (lastSendATCommand == CMD_AT_KHTTP_GET)
     64a:	4b17      	ldr	r3, [pc, #92]	; (6a8 <mdmParser_ProcessModemResponse+0xa4>)
     64c:	781b      	ldrb	r3, [r3, #0]
     64e:	2b18      	cmp	r3, #24
     650:	d1ea      	bne.n	628 <mdmParser_ProcessModemResponse+0x24>
				DEBUG_PRINT("No Response from Web Sever....Posting data to sever is failed");
     652:	481b      	ldr	r0, [pc, #108]	; (6c0 <mdmParser_ProcessModemResponse+0xbc>)
     654:	4c19      	ldr	r4, [pc, #100]	; (6bc <mdmParser_ProcessModemResponse+0xb8>)
     656:	47a0      	blx	r4
				DEBUG_PRINT("Performing the Error Recovery Procedures..");
     658:	481a      	ldr	r0, [pc, #104]	; (6c4 <mdmParser_ProcessModemResponse+0xc0>)
     65a:	47a0      	blx	r4
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_1);
     65c:	200a      	movs	r0, #10
     65e:	4e1a      	ldr	r6, [pc, #104]	; (6c8 <mdmParser_ProcessModemResponse+0xc4>)
     660:	47b0      	blx	r6
	delay_ms(1000);
     662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     666:	4d19      	ldr	r5, [pc, #100]	; (6cc <mdmParser_ProcessModemResponse+0xc8>)
     668:	47a8      	blx	r5
	mdmParser_ProcessModemResponse();
     66a:	f7ff ffcb 	bl	604 <mdmParser_ProcessModemResponse>
	mdmParser_SendCommandToModem(CMD_AT_KCNX_DOWN);
     66e:	201a      	movs	r0, #26
     670:	47b0      	blx	r6
	delay_ms(1000);
     672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     676:	47a8      	blx	r5
	mdmParser_ProcessModemResponse();
     678:	f7ff ffc4 	bl	604 <mdmParser_ProcessModemResponse>
	mdmParser_SendCommandToModem(CMD_AT_CGATT);
     67c:	201b      	movs	r0, #27
     67e:	47b0      	blx	r6
	delay_ms(1000);
     680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     684:	47a8      	blx	r5
	mdmParser_ProcessModemResponse();
     686:	f7ff ffbd 	bl	604 <mdmParser_ProcessModemResponse>
	delay_ms(3000);
     68a:	f640 30b8 	movw	r0, #3000	; 0xbb8
     68e:	47a8      	blx	r5
	mdmParam_InitiateConnection();
     690:	4b0f      	ldr	r3, [pc, #60]	; (6d0 <mdmParser_ProcessModemResponse+0xcc>)
     692:	4798      	blx	r3
	DEBUG_PRINT("Closed and Reopened the session......");
     694:	480f      	ldr	r0, [pc, #60]	; (6d4 <mdmParser_ProcessModemResponse+0xd0>)
     696:	47a0      	blx	r4
	DEBUG_PRINT("Auto recovery completed......");
     698:	480f      	ldr	r0, [pc, #60]	; (6d8 <mdmParser_ProcessModemResponse+0xd4>)
     69a:	47a0      	blx	r4
     69c:	e7c4      	b.n	628 <mdmParser_ProcessModemResponse+0x24>
		DEBUG_PRINT("Error : Process response failed - Last Command Invalid");
     69e:	480f      	ldr	r0, [pc, #60]	; (6dc <mdmParser_ProcessModemResponse+0xd8>)
     6a0:	4b06      	ldr	r3, [pc, #24]	; (6bc <mdmParser_ProcessModemResponse+0xb8>)
     6a2:	4798      	blx	r3
}
     6a4:	e7c3      	b.n	62e <mdmParser_ProcessModemResponse+0x2a>
     6a6:	bf00      	nop
     6a8:	200001e8 	.word	0x200001e8
     6ac:	00000371 	.word	0x00000371
     6b0:	00000525 	.word	0x00000525
     6b4:	20000023 	.word	0x20000023
     6b8:	0000685c 	.word	0x0000685c
     6bc:	000010b5 	.word	0x000010b5
     6c0:	00006884 	.word	0x00006884
     6c4:	000068c4 	.word	0x000068c4
     6c8:	000004c5 	.word	0x000004c5
     6cc:	00001b9d 	.word	0x00001b9d
     6d0:	000009b5 	.word	0x000009b5
     6d4:	000068f0 	.word	0x000068f0
     6d8:	00006918 	.word	0x00006918
     6dc:	00006938 	.word	0x00006938

000006e0 <mdmParser_SetLastCmdProcessed>:
	isPrevCmdRespProcessed = status;
     6e0:	4b01      	ldr	r3, [pc, #4]	; (6e8 <mdmParser_SetLastCmdProcessed+0x8>)
     6e2:	7018      	strb	r0, [r3, #0]
     6e4:	4770      	bx	lr
     6e6:	bf00      	nop
     6e8:	20000023 	.word	0x20000023

000006ec <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     6ec:	4b01      	ldr	r3, [pc, #4]	; (6f4 <mdmParser_SetLastSentAtCommand+0x8>)
     6ee:	7018      	strb	r0, [r3, #0]
     6f0:	4770      	bx	lr
     6f2:	bf00      	nop
     6f4:	200001e8 	.word	0x200001e8

000006f8 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     6f8:	4b01      	ldr	r3, [pc, #4]	; (700 <mdmParser_GetLastSentAtCommand+0x8>)
     6fa:	7818      	ldrb	r0, [r3, #0]
     6fc:	4770      	bx	lr
     6fe:	bf00      	nop
     700:	200001e8 	.word	0x200001e8

00000704 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     704:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
     706:	4912      	ldr	r1, [pc, #72]	; (750 <mdmCtrlr_DataCommInit+0x4c>)
     708:	4812      	ldr	r0, [pc, #72]	; (754 <mdmCtrlr_DataCommInit+0x50>)
     70a:	4b13      	ldr	r3, [pc, #76]	; (758 <mdmCtrlr_DataCommInit+0x54>)
     70c:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     70e:	b118      	cbz	r0, 718 <mdmCtrlr_DataCommInit+0x14>
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
		
	}
	else
	{
		DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
     710:	4812      	ldr	r0, [pc, #72]	; (75c <mdmCtrlr_DataCommInit+0x58>)
     712:	4b13      	ldr	r3, [pc, #76]	; (760 <mdmCtrlr_DataCommInit+0x5c>)
     714:	4798      	blx	r3
     716:	bd10      	pop	{r4, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     718:	f44f 6200 	mov.w	r2, #2048	; 0x800
     71c:	4911      	ldr	r1, [pc, #68]	; (764 <mdmCtrlr_DataCommInit+0x60>)
     71e:	4812      	ldr	r0, [pc, #72]	; (768 <mdmCtrlr_DataCommInit+0x64>)
     720:	4b12      	ldr	r3, [pc, #72]	; (76c <mdmCtrlr_DataCommInit+0x68>)
     722:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     724:	2800      	cmp	r0, #0
     726:	d1f3      	bne.n	710 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
     728:	4c0a      	ldr	r4, [pc, #40]	; (754 <mdmCtrlr_DataCommInit+0x50>)
     72a:	2201      	movs	r2, #1
     72c:	4611      	mov	r1, r2
     72e:	4620      	mov	r0, r4
     730:	4b0f      	ldr	r3, [pc, #60]	; (770 <mdmCtrlr_DataCommInit+0x6c>)
     732:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
     734:	4620      	mov	r0, r4
     736:	4b0f      	ldr	r3, [pc, #60]	; (774 <mdmCtrlr_DataCommInit+0x70>)
     738:	4798      	blx	r3
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
     73a:	480f      	ldr	r0, [pc, #60]	; (778 <mdmCtrlr_DataCommInit+0x74>)
     73c:	4b08      	ldr	r3, [pc, #32]	; (760 <mdmCtrlr_DataCommInit+0x5c>)
     73e:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
     740:	4b0e      	ldr	r3, [pc, #56]	; (77c <mdmCtrlr_DataCommInit+0x78>)
     742:	f893 133c 	ldrb.w	r1, [r3, #828]	; 0x33c
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
     746:	0949      	lsrs	r1, r1, #5
     748:	480d      	ldr	r0, [pc, #52]	; (780 <mdmCtrlr_DataCommInit+0x7c>)
     74a:	4b0e      	ldr	r3, [pc, #56]	; (784 <mdmCtrlr_DataCommInit+0x80>)
     74c:	4798      	blx	r3
     74e:	bd10      	pop	{r4, pc}
     750:	41014000 	.word	0x41014000
     754:	20000024 	.word	0x20000024
     758:	00002875 	.word	0x00002875
     75c:	000069ac 	.word	0x000069ac
     760:	000010b5 	.word	0x000010b5
     764:	20003420 	.word	0x20003420
     768:	20003c20 	.word	0x20003c20
     76c:	00001e5d 	.word	0x00001e5d
     770:	00002921 	.word	0x00002921
     774:	000028e9 	.word	0x000028e9
     778:	00006970 	.word	0x00006970
     77c:	e000e100 	.word	0xe000e100
     780:	00006998 	.word	0x00006998
     784:	000010fd 	.word	0x000010fd

00000788 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     788:	2201      	movs	r2, #1
     78a:	4b01      	ldr	r3, [pc, #4]	; (790 <SERCOM3_0_Handler+0x8>)
     78c:	761a      	strb	r2, [r3, #24]
     78e:	4770      	bx	lr
     790:	41014000 	.word	0x41014000

00000794 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     794:	2202      	movs	r2, #2
     796:	4b01      	ldr	r3, [pc, #4]	; (79c <SERCOM3_1_Handler+0x8>)
     798:	761a      	strb	r2, [r3, #24]
     79a:	4770      	bx	lr
     79c:	41014000 	.word	0x41014000

000007a0 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     7a0:	b530      	push	{r4, r5, lr}
     7a2:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
     7a4:	4d1a      	ldr	r5, [pc, #104]	; (810 <SERCOM3_2_Handler+0x70>)
     7a6:	4c1b      	ldr	r4, [pc, #108]	; (814 <SERCOM3_2_Handler+0x74>)
     7a8:	4628      	mov	r0, r5
     7aa:	47a0      	blx	r4
     7ac:	2800      	cmp	r0, #0
     7ae:	d0fb      	beq.n	7a8 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
     7b0:	4817      	ldr	r0, [pc, #92]	; (810 <SERCOM3_2_Handler+0x70>)
     7b2:	4b19      	ldr	r3, [pc, #100]	; (818 <SERCOM3_2_Handler+0x78>)
     7b4:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
     7b6:	4601      	mov	r1, r0
     7b8:	4818      	ldr	r0, [pc, #96]	; (81c <SERCOM3_2_Handler+0x7c>)
     7ba:	4b19      	ldr	r3, [pc, #100]	; (820 <SERCOM3_2_Handler+0x80>)
     7bc:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
     7be:	4b19      	ldr	r3, [pc, #100]	; (824 <SERCOM3_2_Handler+0x84>)
     7c0:	4798      	blx	r3
     7c2:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
     7c4:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     7c8:	d101      	bne.n	7ce <SERCOM3_2_Handler+0x2e>

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}

}
     7ca:	b009      	add	sp, #36	; 0x24
     7cc:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
     7ce:	a902      	add	r1, sp, #8
     7d0:	4b15      	ldr	r3, [pc, #84]	; (828 <SERCOM3_2_Handler+0x88>)
     7d2:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
     7d4:	4811      	ldr	r0, [pc, #68]	; (81c <SERCOM3_2_Handler+0x7c>)
     7d6:	4b15      	ldr	r3, [pc, #84]	; (82c <SERCOM3_2_Handler+0x8c>)
     7d8:	4798      	blx	r3
     7da:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     7de:	4298      	cmp	r0, r3
     7e0:	d3f3      	bcc.n	7ca <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
     7e2:	4b13      	ldr	r3, [pc, #76]	; (830 <SERCOM3_2_Handler+0x90>)
     7e4:	6818      	ldr	r0, [r3, #0]
     7e6:	ab07      	add	r3, sp, #28
     7e8:	9300      	str	r3, [sp, #0]
     7ea:	2300      	movs	r3, #0
     7ec:	2203      	movs	r2, #3
     7ee:	b2e1      	uxtb	r1, r4
     7f0:	4c10      	ldr	r4, [pc, #64]	; (834 <SERCOM3_2_Handler+0x94>)
     7f2:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     7f4:	9b07      	ldr	r3, [sp, #28]
     7f6:	b13b      	cbz	r3, 808 <SERCOM3_2_Handler+0x68>
     7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     7fc:	4b0e      	ldr	r3, [pc, #56]	; (838 <SERCOM3_2_Handler+0x98>)
     7fe:	601a      	str	r2, [r3, #0]
     800:	f3bf 8f4f 	dsb	sy
     804:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
     808:	2000      	movs	r0, #0
     80a:	4b0c      	ldr	r3, [pc, #48]	; (83c <SERCOM3_2_Handler+0x9c>)
     80c:	4798      	blx	r3
}
     80e:	e7dc      	b.n	7ca <SERCOM3_2_Handler+0x2a>
     810:	20000024 	.word	0x20000024
     814:	00002915 	.word	0x00002915
     818:	00002903 	.word	0x00002903
     81c:	20003c20 	.word	0x20003c20
     820:	00001ef1 	.word	0x00001ef1
     824:	000006f9 	.word	0x000006f9
     828:	00000371 	.word	0x00000371
     82c:	00001f31 	.word	0x00001f31
     830:	20003404 	.word	0x20003404
     834:	00005085 	.word	0x00005085
     838:	e000ed04 	.word	0xe000ed04
     83c:	000006ed 	.word	0x000006ed

00000840 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     840:	b570      	push	{r4, r5, r6, lr}
     842:	4605      	mov	r5, r0
     844:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
     846:	4c05      	ldr	r4, [pc, #20]	; (85c <mdmCtrlr_SendDataToModem+0x1c>)
     848:	4620      	mov	r0, r4
     84a:	4b05      	ldr	r3, [pc, #20]	; (860 <mdmCtrlr_SendDataToModem+0x20>)
     84c:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
     84e:	4632      	mov	r2, r6
     850:	4629      	mov	r1, r5
     852:	4620      	mov	r0, r4
     854:	4b03      	ldr	r3, [pc, #12]	; (864 <mdmCtrlr_SendDataToModem+0x24>)
     856:	4798      	blx	r3
}
     858:	bd70      	pop	{r4, r5, r6, pc}
     85a:	bf00      	nop
     85c:	20000024 	.word	0x20000024
     860:	000028e9 	.word	0x000028e9
     864:	00000fed 	.word	0x00000fed

00000868 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     868:	b5f0      	push	{r4, r5, r6, r7, lr}
     86a:	b083      	sub	sp, #12
     86c:	4605      	mov	r5, r0
     86e:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     870:	480d      	ldr	r0, [pc, #52]	; (8a8 <mdmCtrlr_ReadResponseFromModem+0x40>)
     872:	4b0e      	ldr	r3, [pc, #56]	; (8ac <mdmCtrlr_ReadResponseFromModem+0x44>)
     874:	4798      	blx	r3
     876:	42b0      	cmp	r0, r6
     878:	d201      	bcs.n	87e <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     87a:	b003      	add	sp, #12
     87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
     87e:	a801      	add	r0, sp, #4
     880:	4b0b      	ldr	r3, [pc, #44]	; (8b0 <mdmCtrlr_ReadResponseFromModem+0x48>)
     882:	4798      	blx	r3
		while (readCnt < length)
     884:	b166      	cbz	r6, 8a0 <mdmCtrlr_ReadResponseFromModem+0x38>
     886:	462c      	mov	r4, r5
     888:	3e01      	subs	r6, #1
     88a:	b2b6      	uxth	r6, r6
     88c:	3601      	adds	r6, #1
     88e:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     890:	4f05      	ldr	r7, [pc, #20]	; (8a8 <mdmCtrlr_ReadResponseFromModem+0x40>)
     892:	4e08      	ldr	r6, [pc, #32]	; (8b4 <mdmCtrlr_ReadResponseFromModem+0x4c>)
     894:	4621      	mov	r1, r4
     896:	4638      	mov	r0, r7
     898:	47b0      	blx	r6
     89a:	3401      	adds	r4, #1
		while (readCnt < length)
     89c:	42ac      	cmp	r4, r5
     89e:	d1f9      	bne.n	894 <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
     8a0:	a801      	add	r0, sp, #4
     8a2:	4b05      	ldr	r3, [pc, #20]	; (8b8 <mdmCtrlr_ReadResponseFromModem+0x50>)
     8a4:	4798      	blx	r3
     8a6:	e7e8      	b.n	87a <mdmCtrlr_ReadResponseFromModem+0x12>
     8a8:	20003c20 	.word	0x20003c20
     8ac:	00001f31 	.word	0x00001f31
     8b0:	00001b2d 	.word	0x00001b2d
     8b4:	00001ead 	.word	0x00001ead
     8b8:	00001b3b 	.word	0x00001b3b

000008bc <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     8bc:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     8be:	4802      	ldr	r0, [pc, #8]	; (8c8 <mdmCtrlr_FlushRxBuffer+0xc>)
     8c0:	4b02      	ldr	r3, [pc, #8]	; (8cc <mdmCtrlr_FlushRxBuffer+0x10>)
     8c2:	4798      	blx	r3
     8c4:	bd08      	pop	{r3, pc}
     8c6:	bf00      	nop
     8c8:	20003c20 	.word	0x20003c20
     8cc:	00001f55 	.word	0x00001f55

000008d0 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
     8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8d2:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
	ModemDiagState = MODEM_DIAG_TEST_AT;
     8d4:	2200      	movs	r2, #0
     8d6:	4b28      	ldr	r3, [pc, #160]	; (978 <ModemDiagTask+0xa8>)
     8d8:	701a      	strb	r2, [r3, #0]
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     8da:	4c28      	ldr	r4, [pc, #160]	; (97c <ModemDiagTask+0xac>)
		{
			switch(ModemDiagState)
			{
				case MODEM_DIAG_TEST_AT:
				{
					vTaskDelay(powerUpDelayMs);
     8dc:	4d28      	ldr	r5, [pc, #160]	; (980 <ModemDiagTask+0xb0>)
								vTaskDelay(DiagDelayMs);
							}
						}
						else
						{
							DEBUG_PRINT("Couldn't obtain the semaphore");
     8de:	4e29      	ldr	r6, [pc, #164]	; (984 <ModemDiagTask+0xb4>)
     8e0:	e01b      	b.n	91a <ModemDiagTask+0x4a>
							TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     8e2:	2304      	movs	r3, #4
     8e4:	f88d 3000 	strb.w	r3, [sp]
							TxMsgQueueData.atCmd = CMD_AT_CGSN;
     8e8:	2302      	movs	r3, #2
     8ea:	f88d 3001 	strb.w	r3, [sp, #1]
							TxMsgQueueData.pData = NULL;
     8ee:	2300      	movs	r3, #0
     8f0:	9301      	str	r3, [sp, #4]
							TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     8f2:	2264      	movs	r2, #100	; 0x64
     8f4:	4669      	mov	r1, sp
     8f6:	4824      	ldr	r0, [pc, #144]	; (988 <ModemDiagTask+0xb8>)
     8f8:	6800      	ldr	r0, [r0, #0]
     8fa:	4f24      	ldr	r7, [pc, #144]	; (98c <ModemDiagTask+0xbc>)
     8fc:	47b8      	blx	r7
							if(TxQueuePushStatus == pdPASS)
     8fe:	2801      	cmp	r0, #1
     900:	d029      	beq.n	956 <ModemDiagTask+0x86>
								DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     902:	4823      	ldr	r0, [pc, #140]	; (990 <ModemDiagTask+0xc0>)
     904:	47b0      	blx	r6
								vTaskDelay(DiagDelayMs);
     906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     90a:	47a8      	blx	r5
			kickWatchDog();
     90c:	4b21      	ldr	r3, [pc, #132]	; (994 <ModemDiagTask+0xc4>)
     90e:	4798      	blx	r3
			DEBUG_PRINT("Running Diag Process Task successfully");
     910:	4821      	ldr	r0, [pc, #132]	; (998 <ModemDiagTask+0xc8>)
     912:	47b0      	blx	r6
			vTaskDelay(xDelayMs);
     914:	f640 50ac 	movw	r0, #3500	; 0xdac
     918:	47a8      	blx	r5
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     91a:	47a0      	blx	r4
     91c:	2804      	cmp	r0, #4
     91e:	d1fc      	bne.n	91a <ModemDiagTask+0x4a>
	switch(ModemDiagOpMode)
     920:	4b1e      	ldr	r3, [pc, #120]	; (99c <ModemDiagTask+0xcc>)
     922:	781b      	ldrb	r3, [r3, #0]
     924:	2b00      	cmp	r3, #0
     926:	d1f1      	bne.n	90c <ModemDiagTask+0x3c>
			switch(ModemDiagState)
     928:	4b13      	ldr	r3, [pc, #76]	; (978 <ModemDiagTask+0xa8>)
     92a:	781b      	ldrb	r3, [r3, #0]
     92c:	2b00      	cmp	r3, #0
     92e:	d1ed      	bne.n	90c <ModemDiagTask+0x3c>
					vTaskDelay(powerUpDelayMs);
     930:	f641 3058 	movw	r0, #7000	; 0x1b58
     934:	47a8      	blx	r5
					if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     936:	4b14      	ldr	r3, [pc, #80]	; (988 <ModemDiagTask+0xb8>)
     938:	6818      	ldr	r0, [r3, #0]
     93a:	4b19      	ldr	r3, [pc, #100]	; (9a0 <ModemDiagTask+0xd0>)
     93c:	4798      	blx	r3
     93e:	2800      	cmp	r0, #0
     940:	d1e4      	bne.n	90c <ModemDiagTask+0x3c>
						if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     942:	2100      	movs	r1, #0
     944:	4b17      	ldr	r3, [pc, #92]	; (9a4 <ModemDiagTask+0xd4>)
     946:	6818      	ldr	r0, [r3, #0]
     948:	4b17      	ldr	r3, [pc, #92]	; (9a8 <ModemDiagTask+0xd8>)
     94a:	4798      	blx	r3
     94c:	2801      	cmp	r0, #1
     94e:	d0c8      	beq.n	8e2 <ModemDiagTask+0x12>
							DEBUG_PRINT("Couldn't obtain the semaphore");
     950:	4816      	ldr	r0, [pc, #88]	; (9ac <ModemDiagTask+0xdc>)
     952:	47b0      	blx	r6
     954:	e7da      	b.n	90c <ModemDiagTask+0x3c>
								DEBUG_PRINT("Sent the Diag data to Tx Task");
     956:	4816      	ldr	r0, [pc, #88]	; (9b0 <ModemDiagTask+0xe0>)
     958:	47b0      	blx	r6
								xSemaphoreGive(AtTxQueueLoadSemaphore);
     95a:	2300      	movs	r3, #0
     95c:	461a      	mov	r2, r3
     95e:	4619      	mov	r1, r3
     960:	4810      	ldr	r0, [pc, #64]	; (9a4 <ModemDiagTask+0xd4>)
     962:	6800      	ldr	r0, [r0, #0]
     964:	47b8      	blx	r7
								vTaskDelay(DiagDelayMs);
     966:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     96a:	47a8      	blx	r5
								ModemDiagState = MODEM_DIAG_GET_IMEI;
     96c:	2301      	movs	r3, #1
     96e:	4a02      	ldr	r2, [pc, #8]	; (978 <ModemDiagTask+0xa8>)
     970:	7013      	strb	r3, [r2, #0]
								ModemDiagOpMode = OP_RX_MODE;
     972:	4a0a      	ldr	r2, [pc, #40]	; (99c <ModemDiagTask+0xcc>)
     974:	7013      	strb	r3, [r2, #0]
     976:	e7c9      	b.n	90c <ModemDiagTask+0x3c>
     978:	20003c30 	.word	0x20003c30
     97c:	00000a51 	.word	0x00000a51
     980:	00004ad1 	.word	0x00004ad1
     984:	000010b5 	.word	0x000010b5
     988:	20003410 	.word	0x20003410
     98c:	00003dc1 	.word	0x00003dc1
     990:	000069f8 	.word	0x000069f8
     994:	00001231 	.word	0x00001231
     998:	00006a40 	.word	0x00006a40
     99c:	20003c31 	.word	0x20003c31
     9a0:	0000440d 	.word	0x0000440d
     9a4:	20003414 	.word	0x20003414
     9a8:	0000422d 	.word	0x0000422d
     9ac:	00006a20 	.word	0x00006a20
     9b0:	000069d8 	.word	0x000069d8

000009b4 <mdmParam_InitiateConnection>:




void mdmParam_InitiateConnection(void)
{
     9b4:	b570      	push	{r4, r5, r6, lr}
}


static void closeExistingConnections(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_1);
     9b6:	200a      	movs	r0, #10
     9b8:	4e21      	ldr	r6, [pc, #132]	; (a40 <mdmParam_InitiateConnection+0x8c>)
     9ba:	47b0      	blx	r6
	delay_ms(1000);
     9bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     9c0:	4c20      	ldr	r4, [pc, #128]	; (a44 <mdmParam_InitiateConnection+0x90>)
     9c2:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     9c4:	4d20      	ldr	r5, [pc, #128]	; (a48 <mdmParam_InitiateConnection+0x94>)
     9c6:	47a8      	blx	r5
	delay_ms(1000);
     9c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     9cc:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_2);
     9ce:	200b      	movs	r0, #11
     9d0:	47b0      	blx	r6
	delay_ms(1000);
     9d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     9d6:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     9d8:	47a8      	blx	r5
	delay_ms(1000);
     9da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     9de:	47a0      	blx	r4
	
}

static void sendAT_KPATTERN(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KPATTERN);
     9e0:	2014      	movs	r0, #20
     9e2:	47b0      	blx	r6
	delay_ms(2000);
     9e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     9e8:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     9ea:	47a8      	blx	r5
	delay_ms(2000);
     9ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     9f0:	47a0      	blx	r4
}

static void sendAT_KCNXCFG(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KCNXCFG);
     9f2:	2015      	movs	r0, #21
     9f4:	47b0      	blx	r6
	delay_ms(2000);
     9f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     9fa:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     9fc:	47a8      	blx	r5
	delay_ms(2000);
     9fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a02:	47a0      	blx	r4
}

static void sendAT_KCNXTIMER(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KCNXTIMER);
     a04:	2016      	movs	r0, #22
     a06:	47b0      	blx	r6
	delay_ms(2000);
     a08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a0c:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     a0e:	47a8      	blx	r5
	delay_ms(2000);
     a10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a14:	47a0      	blx	r4
}

static void sendAT_KHTTPCFG(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CFG);
     a16:	2009      	movs	r0, #9
     a18:	47b0      	blx	r6
	delay_ms(2000);
     a1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a1e:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     a20:	47a8      	blx	r5
	delay_ms(2000);
     a22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a26:	47a0      	blx	r4
}

static void sendAT_KHTTPHEADER(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_HEADER);
     a28:	2017      	movs	r0, #23
     a2a:	47b0      	blx	r6
	delay_ms(2000);
     a2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a30:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     a32:	47a8      	blx	r5
	delay_ms(2000);
     a34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     a38:	47a0      	blx	r4
	mdmCtrlr_FlushRxBuffer();
     a3a:	4b04      	ldr	r3, [pc, #16]	; (a4c <mdmParam_InitiateConnection+0x98>)
     a3c:	4798      	blx	r3
     a3e:	bd70      	pop	{r4, r5, r6, pc}
     a40:	000004c5 	.word	0x000004c5
     a44:	00001b9d 	.word	0x00001b9d
     a48:	00000605 	.word	0x00000605
     a4c:	000008bd 	.word	0x000008bd

00000a50 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
     a50:	4b01      	ldr	r3, [pc, #4]	; (a58 <getModemPowerStatus+0x8>)
     a52:	7818      	ldrb	r0, [r3, #0]
     a54:	4770      	bx	lr
     a56:	bf00      	nop
     a58:	200004a8 	.word	0x200004a8

00000a5c <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_SHUTDOWN;
     a5c:	4b03      	ldr	r3, [pc, #12]	; (a6c <modemPowerStateInit+0x10>)
     a5e:	2200      	movs	r2, #0
     a60:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     a62:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     a64:	2201      	movs	r2, #1
     a66:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     a68:	70da      	strb	r2, [r3, #3]
     a6a:	4770      	bx	lr
     a6c:	200004a8 	.word	0x200004a8

00000a70 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
     a70:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemSigInitDelay = pdMS_TO_TICKS(500UL);
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);

    switch(ModemPwrState)
     a72:	4b5d      	ldr	r3, [pc, #372]	; (be8 <modemPowerSchedule+0x178>)
     a74:	781b      	ldrb	r3, [r3, #0]
     a76:	2b06      	cmp	r3, #6
     a78:	f000 8089 	beq.w	b8e <modemPowerSchedule+0x11e>
     a7c:	2b07      	cmp	r3, #7
     a7e:	d054      	beq.n	b2a <modemPowerSchedule+0xba>
     a80:	b103      	cbz	r3, a84 <modemPowerSchedule+0x14>
     a82:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
     a84:	4b58      	ldr	r3, [pc, #352]	; (be8 <modemPowerSchedule+0x178>)
     a86:	785b      	ldrb	r3, [r3, #1]
     a88:	2b03      	cmp	r3, #3
     a8a:	d8fa      	bhi.n	a82 <modemPowerSchedule+0x12>
     a8c:	e8df f003 	tbb	[pc, r3]
     a90:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a94:	4b55      	ldr	r3, [pc, #340]	; (bec <modemPowerSchedule+0x17c>)
     a96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     aa2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     aa6:	4c52      	ldr	r4, [pc, #328]	; (bf0 <modemPowerSchedule+0x180>)
     aa8:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     aac:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     ab0:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ab4:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ab8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     abc:	f44f 2500 	mov.w	r5, #524288	; 0x80000
     ac0:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ac2:	6299      	str	r1, [r3, #40]	; 0x28
     ac4:	484b      	ldr	r0, [pc, #300]	; (bf4 <modemPowerSchedule+0x184>)
     ac6:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac8:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     acc:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ad0:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ad4:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ad6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ad8:	6299      	str	r1, [r3, #40]	; 0x28
     ada:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     adc:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     ae0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ae4:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     ae8:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
     aea:	2201      	movs	r2, #1
     aec:	4b3e      	ldr	r3, [pc, #248]	; (be8 <modemPowerSchedule+0x178>)
     aee:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
     af0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     af4:	4b40      	ldr	r3, [pc, #256]	; (bf8 <modemPowerSchedule+0x188>)
     af6:	4798      	blx	r3
                }
                break;
     af8:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     afa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     afe:	4b3b      	ldr	r3, [pc, #236]	; (bec <modemPowerSchedule+0x17c>)
     b00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
     b04:	2202      	movs	r2, #2
     b06:	4b38      	ldr	r3, [pc, #224]	; (be8 <modemPowerSchedule+0x178>)
     b08:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
     b0a:	2032      	movs	r0, #50	; 0x32
     b0c:	4b3a      	ldr	r3, [pc, #232]	; (bf8 <modemPowerSchedule+0x188>)
     b0e:	4798      	blx	r3
                }
                break;
     b10:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
     b12:	2203      	movs	r2, #3
     b14:	4b34      	ldr	r3, [pc, #208]	; (be8 <modemPowerSchedule+0x178>)
     b16:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
     b18:	f640 30b8 	movw	r0, #3000	; 0xbb8
     b1c:	4b36      	ldr	r3, [pc, #216]	; (bf8 <modemPowerSchedule+0x188>)
     b1e:	4798      	blx	r3
                }
                break;
     b20:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
     b22:	2204      	movs	r2, #4
     b24:	4b30      	ldr	r3, [pc, #192]	; (be8 <modemPowerSchedule+0x178>)
     b26:	701a      	strb	r2, [r3, #0]
                }
                break;
     b28:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
     b2a:	4b2f      	ldr	r3, [pc, #188]	; (be8 <modemPowerSchedule+0x178>)
     b2c:	789b      	ldrb	r3, [r3, #2]
     b2e:	b113      	cbz	r3, b36 <modemPowerSchedule+0xc6>
     b30:	2b01      	cmp	r3, #1
     b32:	d017      	beq.n	b64 <modemPowerSchedule+0xf4>
     b34:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b36:	4b2d      	ldr	r3, [pc, #180]	; (bec <modemPowerSchedule+0x17c>)
     b38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     b3c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     b42:	629a      	str	r2, [r3, #40]	; 0x28
     b44:	4a2b      	ldr	r2, [pc, #172]	; (bf4 <modemPowerSchedule+0x184>)
     b46:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b48:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     b4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b50:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b54:	6199      	str	r1, [r3, #24]
                case MDM_PWR_RESET_ASSERT:
                {
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     b56:	2201      	movs	r2, #1
     b58:	4b23      	ldr	r3, [pc, #140]	; (be8 <modemPowerSchedule+0x178>)
     b5a:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
     b5c:	2019      	movs	r0, #25
     b5e:	4b26      	ldr	r3, [pc, #152]	; (bf8 <modemPowerSchedule+0x188>)
     b60:	4798      	blx	r3
                }
                break;
     b62:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b64:	4b21      	ldr	r3, [pc, #132]	; (bec <modemPowerSchedule+0x17c>)
     b66:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     b6a:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     b70:	629a      	str	r2, [r3, #40]	; 0x28
     b72:	4a20      	ldr	r2, [pc, #128]	; (bf4 <modemPowerSchedule+0x184>)
     b74:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b76:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     b7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b7e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b82:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
     b84:	4b18      	ldr	r3, [pc, #96]	; (be8 <modemPowerSchedule+0x178>)
     b86:	2200      	movs	r2, #0
     b88:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     b8a:	705a      	strb	r2, [r3, #1]
                }
                break;
     b8c:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
     b8e:	4b16      	ldr	r3, [pc, #88]	; (be8 <modemPowerSchedule+0x178>)
     b90:	78db      	ldrb	r3, [r3, #3]
     b92:	2b00      	cmp	r3, #0
     b94:	f47f af75 	bne.w	a82 <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b98:	4b14      	ldr	r3, [pc, #80]	; (bec <modemPowerSchedule+0x17c>)
     b9a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     b9e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ba2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     ba6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     baa:	4a11      	ldr	r2, [pc, #68]	; (bf0 <modemPowerSchedule+0x180>)
     bac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bb0:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     bb4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bb8:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     bbc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     bc0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     bc4:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     bc6:	6298      	str	r0, [r3, #40]	; 0x28
     bc8:	4a0a      	ldr	r2, [pc, #40]	; (bf4 <modemPowerSchedule+0x184>)
     bca:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bcc:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     bd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     bd4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     bd8:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     bda:	2201      	movs	r2, #1
     bdc:	4b02      	ldr	r3, [pc, #8]	; (be8 <modemPowerSchedule+0x178>)
     bde:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
     be0:	2019      	movs	r0, #25
     be2:	4b05      	ldr	r3, [pc, #20]	; (bf8 <modemPowerSchedule+0x188>)
     be4:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
     be6:	e74c      	b.n	a82 <modemPowerSchedule+0x12>
     be8:	200004a8 	.word	0x200004a8
     bec:	41008000 	.word	0x41008000
     bf0:	c0000001 	.word	0xc0000001
     bf4:	c0000008 	.word	0xc0000008
     bf8:	00004ad1 	.word	0x00004ad1

00000bfc <ModemProcessTask>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
void ModemProcessTask( void *ModemTaskParam)
{
     bfc:	b570      	push	{r4, r5, r6, lr}
    const TickType_t xDelayMs = pdMS_TO_TICKS(5000UL);

    modemPowerStateInit();
     bfe:	4b09      	ldr	r3, [pc, #36]	; (c24 <ModemProcessTask+0x28>)
     c00:	4798      	blx	r3

    while(1)
    {
        modemPowerSchedule();
     c02:	4d09      	ldr	r5, [pc, #36]	; (c28 <ModemProcessTask+0x2c>)

        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     c04:	4c09      	ldr	r4, [pc, #36]	; (c2c <ModemProcessTask+0x30>)
        {
            DEBUG_PRINT("Running Modem Process Task successfully");
     c06:	4e0a      	ldr	r6, [pc, #40]	; (c30 <ModemProcessTask+0x34>)
        modemPowerSchedule();
     c08:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     c0a:	47a0      	blx	r4
     c0c:	2804      	cmp	r0, #4
     c0e:	d1fb      	bne.n	c08 <ModemProcessTask+0xc>
            DEBUG_PRINT("Running Modem Process Task successfully");
     c10:	4630      	mov	r0, r6
     c12:	4b08      	ldr	r3, [pc, #32]	; (c34 <ModemProcessTask+0x38>)
     c14:	4798      	blx	r3
			kickWatchDog();
     c16:	4b08      	ldr	r3, [pc, #32]	; (c38 <ModemProcessTask+0x3c>)
     c18:	4798      	blx	r3
            vTaskDelay(xDelayMs);
     c1a:	f241 3088 	movw	r0, #5000	; 0x1388
     c1e:	4b07      	ldr	r3, [pc, #28]	; (c3c <ModemProcessTask+0x40>)
     c20:	4798      	blx	r3
     c22:	e7f1      	b.n	c08 <ModemProcessTask+0xc>
     c24:	00000a5d 	.word	0x00000a5d
     c28:	00000a71 	.word	0x00000a71
     c2c:	00000a51 	.word	0x00000a51
     c30:	00006a68 	.word	0x00006a68
     c34:	000010b5 	.word	0x000010b5
     c38:	00001231 	.word	0x00001231
     c3c:	00004ad1 	.word	0x00004ad1

00000c40 <mdmResp_AtRespHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_AtRespHandler(uint8_t* response, uint8_t length)
{
     c40:	b570      	push	{r4, r5, r6, lr}
     c42:	4605      	mov	r5, r0
     c44:	460e      	mov	r6, r1
	SerialDebugPrint("In AT handler\r\n",15);
     c46:	210f      	movs	r1, #15
     c48:	4804      	ldr	r0, [pc, #16]	; (c5c <mdmResp_AtRespHandler+0x1c>)
     c4a:	4c05      	ldr	r4, [pc, #20]	; (c60 <mdmResp_AtRespHandler+0x20>)
     c4c:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     c4e:	4631      	mov	r1, r6
     c50:	4628      	mov	r0, r5
     c52:	47a0      	blx	r4
	SerialDebugPrint("\r\n",2);
     c54:	2102      	movs	r1, #2
     c56:	4803      	ldr	r0, [pc, #12]	; (c64 <mdmResp_AtRespHandler+0x24>)
     c58:	47a0      	blx	r4
     c5a:	bd70      	pop	{r4, r5, r6, pc}
     c5c:	00006a90 	.word	0x00006a90
     c60:	00001071 	.word	0x00001071
     c64:	00006d0c 	.word	0x00006d0c

00000c68 <defaultFunctionPointer>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void defaultFunctionPointer(uint8_t* response, uint8_t length)
{
     c68:	4770      	bx	lr
	...

00000c6c <mdmResp_IMEIRespHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_IMEIRespHandler(uint8_t* response, uint8_t length)
{
     c6c:	b538      	push	{r3, r4, r5, lr}
     c6e:	4604      	mov	r4, r0
     c70:	460d      	mov	r5, r1
	DEBUG_PRINT("In CGSN handler");
     c72:	4804      	ldr	r0, [pc, #16]	; (c84 <mdmResp_IMEIRespHandler+0x18>)
     c74:	4b04      	ldr	r3, [pc, #16]	; (c88 <mdmResp_IMEIRespHandler+0x1c>)
     c76:	4798      	blx	r3
	SerialDebugPrint(response,length);
     c78:	4629      	mov	r1, r5
     c7a:	4620      	mov	r0, r4
     c7c:	4b03      	ldr	r3, [pc, #12]	; (c8c <mdmResp_IMEIRespHandler+0x20>)
     c7e:	4798      	blx	r3
     c80:	bd38      	pop	{r3, r4, r5, pc}
     c82:	bf00      	nop
     c84:	00006aa0 	.word	0x00006aa0
     c88:	000010b5 	.word	0x000010b5
     c8c:	00001071 	.word	0x00001071

00000c90 <mdmResp_KhttpCloseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpCloseHandler(uint8_t* response, uint8_t length)
{
     c90:	b570      	push	{r4, r5, r6, lr}
	//DEBUG_PRINT("In KHTTP CLOSE handler");

	if(response[0] == 'O')
     c92:	7803      	ldrb	r3, [r0, #0]
     c94:	2b4f      	cmp	r3, #79	; 0x4f
     c96:	d008      	beq.n	caa <mdmResp_KhttpCloseHandler+0x1a>
		delay_ms(500);
		mdmCtrlr_FlushRxBuffer();
	}
	else
	{
		DEBUG_PRINT("There is no connection established with this session ID...");
     c98:	4812      	ldr	r0, [pc, #72]	; (ce4 <mdmResp_KhttpCloseHandler+0x54>)
     c9a:	4c13      	ldr	r4, [pc, #76]	; (ce8 <mdmResp_KhttpCloseHandler+0x58>)
     c9c:	47a0      	blx	r4
		DEBUG_PRINT("Checking for an active connection with next session ID...\n");
     c9e:	4813      	ldr	r0, [pc, #76]	; (cec <mdmResp_KhttpCloseHandler+0x5c>)
     ca0:	47a0      	blx	r4
	}

	DEBUG_PRINT("\r\n");
     ca2:	4813      	ldr	r0, [pc, #76]	; (cf0 <mdmResp_KhttpCloseHandler+0x60>)
     ca4:	4b10      	ldr	r3, [pc, #64]	; (ce8 <mdmResp_KhttpCloseHandler+0x58>)
     ca6:	4798      	blx	r3
     ca8:	bd70      	pop	{r4, r5, r6, pc}
		SerialDebugPrint(response,length);
     caa:	4b12      	ldr	r3, [pc, #72]	; (cf4 <mdmResp_KhttpCloseHandler+0x64>)
     cac:	4798      	blx	r3
		DEBUG_PRINT("\r\nClosed an active connection");
     cae:	4812      	ldr	r0, [pc, #72]	; (cf8 <mdmResp_KhttpCloseHandler+0x68>)
     cb0:	4b0d      	ldr	r3, [pc, #52]	; (ce8 <mdmResp_KhttpCloseHandler+0x58>)
     cb2:	4798      	blx	r3
		mdmParser_SendCommandToModem(CMD_AT_KCNX_DOWN);
     cb4:	201a      	movs	r0, #26
     cb6:	4e11      	ldr	r6, [pc, #68]	; (cfc <mdmResp_KhttpCloseHandler+0x6c>)
     cb8:	47b0      	blx	r6
		delay_ms(1000);
     cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     cbe:	4c10      	ldr	r4, [pc, #64]	; (d00 <mdmResp_KhttpCloseHandler+0x70>)
     cc0:	47a0      	blx	r4
		mdmParser_ProcessModemResponse();
     cc2:	4d10      	ldr	r5, [pc, #64]	; (d04 <mdmResp_KhttpCloseHandler+0x74>)
     cc4:	47a8      	blx	r5
		delay_ms(500);
     cc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     cca:	47a0      	blx	r4
		mdmParser_SendCommandToModem(CMD_AT_CGATT);
     ccc:	201b      	movs	r0, #27
     cce:	47b0      	blx	r6
		delay_ms(1000);
     cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     cd4:	47a0      	blx	r4
		mdmParser_ProcessModemResponse();
     cd6:	47a8      	blx	r5
		delay_ms(500);
     cd8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     cdc:	47a0      	blx	r4
		mdmCtrlr_FlushRxBuffer();
     cde:	4b0a      	ldr	r3, [pc, #40]	; (d08 <mdmResp_KhttpCloseHandler+0x78>)
     ce0:	4798      	blx	r3
     ce2:	e7de      	b.n	ca2 <mdmResp_KhttpCloseHandler+0x12>
     ce4:	00006ad0 	.word	0x00006ad0
     ce8:	000010b5 	.word	0x000010b5
     cec:	00006b0c 	.word	0x00006b0c
     cf0:	00006d0c 	.word	0x00006d0c
     cf4:	00001071 	.word	0x00001071
     cf8:	00006ab0 	.word	0x00006ab0
     cfc:	000004c5 	.word	0x000004c5
     d00:	00001b9d 	.word	0x00001b9d
     d04:	00000605 	.word	0x00000605
     d08:	000008bd 	.word	0x000008bd

00000d0c <mdmResp_KPatternHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KPatternHandler(uint8_t* response, uint8_t length)
{
     d0c:	b570      	push	{r4, r5, r6, lr}
     d0e:	4605      	mov	r5, r0
     d10:	460e      	mov	r6, r1
	DEBUG_PRINT("In KPATTERN handler");
     d12:	4805      	ldr	r0, [pc, #20]	; (d28 <mdmResp_KPatternHandler+0x1c>)
     d14:	4c05      	ldr	r4, [pc, #20]	; (d2c <mdmResp_KPatternHandler+0x20>)
     d16:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     d18:	4631      	mov	r1, r6
     d1a:	4628      	mov	r0, r5
     d1c:	4b04      	ldr	r3, [pc, #16]	; (d30 <mdmResp_KPatternHandler+0x24>)
     d1e:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     d20:	4804      	ldr	r0, [pc, #16]	; (d34 <mdmResp_KPatternHandler+0x28>)
     d22:	47a0      	blx	r4
     d24:	bd70      	pop	{r4, r5, r6, pc}
     d26:	bf00      	nop
     d28:	00006b48 	.word	0x00006b48
     d2c:	000010b5 	.word	0x000010b5
     d30:	00001071 	.word	0x00001071
     d34:	00006d0c 	.word	0x00006d0c

00000d38 <mdmResp_KcnxCfgHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KcnxCfgHandler(uint8_t* response, uint8_t length)
{
     d38:	b570      	push	{r4, r5, r6, lr}
     d3a:	4605      	mov	r5, r0
     d3c:	460e      	mov	r6, r1
	DEBUG_PRINT("In KCNXCFG handler");
     d3e:	4805      	ldr	r0, [pc, #20]	; (d54 <mdmResp_KcnxCfgHandler+0x1c>)
     d40:	4c05      	ldr	r4, [pc, #20]	; (d58 <mdmResp_KcnxCfgHandler+0x20>)
     d42:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     d44:	4631      	mov	r1, r6
     d46:	4628      	mov	r0, r5
     d48:	4b04      	ldr	r3, [pc, #16]	; (d5c <mdmResp_KcnxCfgHandler+0x24>)
     d4a:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     d4c:	4804      	ldr	r0, [pc, #16]	; (d60 <mdmResp_KcnxCfgHandler+0x28>)
     d4e:	47a0      	blx	r4
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	bf00      	nop
     d54:	00006b5c 	.word	0x00006b5c
     d58:	000010b5 	.word	0x000010b5
     d5c:	00001071 	.word	0x00001071
     d60:	00006d0c 	.word	0x00006d0c

00000d64 <mdmResp_KcnxTimerHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KcnxTimerHandler(uint8_t* response, uint8_t length)
{
     d64:	b570      	push	{r4, r5, r6, lr}
     d66:	4605      	mov	r5, r0
     d68:	460e      	mov	r6, r1
	DEBUG_PRINT("In KCNXTIMER handler");
     d6a:	4805      	ldr	r0, [pc, #20]	; (d80 <mdmResp_KcnxTimerHandler+0x1c>)
     d6c:	4c05      	ldr	r4, [pc, #20]	; (d84 <mdmResp_KcnxTimerHandler+0x20>)
     d6e:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     d70:	4631      	mov	r1, r6
     d72:	4628      	mov	r0, r5
     d74:	4b04      	ldr	r3, [pc, #16]	; (d88 <mdmResp_KcnxTimerHandler+0x24>)
     d76:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     d78:	4804      	ldr	r0, [pc, #16]	; (d8c <mdmResp_KcnxTimerHandler+0x28>)
     d7a:	47a0      	blx	r4
     d7c:	bd70      	pop	{r4, r5, r6, pc}
     d7e:	bf00      	nop
     d80:	00006b70 	.word	0x00006b70
     d84:	000010b5 	.word	0x000010b5
     d88:	00001071 	.word	0x00001071
     d8c:	00006d0c 	.word	0x00006d0c

00000d90 <mdmResp_KhttpCfgHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpCfgHandler(uint8_t* response, uint8_t length)
{
     d90:	b570      	push	{r4, r5, r6, lr}
     d92:	4604      	mov	r4, r0
     d94:	460e      	mov	r6, r1
	DEBUG_PRINT("In KHTTPCFG handler");
     d96:	4807      	ldr	r0, [pc, #28]	; (db4 <mdmResp_KhttpCfgHandler+0x24>)
     d98:	4d07      	ldr	r5, [pc, #28]	; (db8 <mdmResp_KhttpCfgHandler+0x28>)
     d9a:	47a8      	blx	r5
	SerialDebugPrint(response,length);
     d9c:	4631      	mov	r1, r6
     d9e:	4620      	mov	r0, r4
     da0:	4b06      	ldr	r3, [pc, #24]	; (dbc <mdmResp_KhttpCfgHandler+0x2c>)
     da2:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     da4:	4806      	ldr	r0, [pc, #24]	; (dc0 <mdmResp_KhttpCfgHandler+0x30>)
     da6:	47a8      	blx	r5

	sessionID = response[11];
     da8:	4806      	ldr	r0, [pc, #24]	; (dc4 <mdmResp_KhttpCfgHandler+0x34>)
     daa:	7ae3      	ldrb	r3, [r4, #11]
     dac:	7003      	strb	r3, [r0, #0]
	mdmParser_SetKhttpHeaderString(&sessionID);
     dae:	4b06      	ldr	r3, [pc, #24]	; (dc8 <mdmResp_KhttpCfgHandler+0x38>)
     db0:	4798      	blx	r3
     db2:	bd70      	pop	{r4, r5, r6, pc}
     db4:	00006b88 	.word	0x00006b88
     db8:	000010b5 	.word	0x000010b5
     dbc:	00001071 	.word	0x00001071
     dc0:	00006d0c 	.word	0x00006d0c
     dc4:	200004ac 	.word	0x200004ac
     dc8:	00000391 	.word	0x00000391

00000dcc <mdmResp_KhttpHeaderHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpHeaderHandler(uint8_t* response, uint8_t length)
{
     dcc:	b570      	push	{r4, r5, r6, lr}
     dce:	4604      	mov	r4, r0
     dd0:	460e      	mov	r6, r1
	DEBUG_PRINT("In KHTTP HEADER handler");
     dd2:	4814      	ldr	r0, [pc, #80]	; (e24 <mdmResp_KhttpHeaderHandler+0x58>)
     dd4:	4d14      	ldr	r5, [pc, #80]	; (e28 <mdmResp_KhttpHeaderHandler+0x5c>)
     dd6:	47a8      	blx	r5
	SerialDebugPrint(response,length);
     dd8:	4631      	mov	r1, r6
     dda:	4620      	mov	r0, r4
     ddc:	4b13      	ldr	r3, [pc, #76]	; (e2c <mdmResp_KhttpHeaderHandler+0x60>)
     dde:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     de0:	4813      	ldr	r0, [pc, #76]	; (e30 <mdmResp_KhttpHeaderHandler+0x64>)
     de2:	47a8      	blx	r5

	if(0==memcmp(response,"CONNECT",7))
     de4:	2207      	movs	r2, #7
     de6:	4913      	ldr	r1, [pc, #76]	; (e34 <mdmResp_KhttpHeaderHandler+0x68>)
     de8:	4620      	mov	r0, r4
     dea:	4b13      	ldr	r3, [pc, #76]	; (e38 <mdmResp_KhttpHeaderHandler+0x6c>)
     dec:	4798      	blx	r3
     dee:	b138      	cbz	r0, e00 <mdmResp_KhttpHeaderHandler+0x34>
		mdmCtrlr_FlushRxBuffer();
		dataPacketSentOk = true;
	}
	else
	{
		headerResponseOk = false;
     df0:	4b12      	ldr	r3, [pc, #72]	; (e3c <mdmResp_KhttpHeaderHandler+0x70>)
     df2:	2200      	movs	r2, #0
     df4:	705a      	strb	r2, [r3, #1]
		dataPacketSentOk = false;
     df6:	709a      	strb	r2, [r3, #2]
		DEBUG_PRINT("Header Response Not Ok");
     df8:	4811      	ldr	r0, [pc, #68]	; (e40 <mdmResp_KhttpHeaderHandler+0x74>)
     dfa:	4b0b      	ldr	r3, [pc, #44]	; (e28 <mdmResp_KhttpHeaderHandler+0x5c>)
     dfc:	4798      	blx	r3
     dfe:	bd70      	pop	{r4, r5, r6, pc}
		headerResponseOk = true;
     e00:	4c0e      	ldr	r4, [pc, #56]	; (e3c <mdmResp_KhttpHeaderHandler+0x70>)
     e02:	2501      	movs	r5, #1
     e04:	7065      	strb	r5, [r4, #1]
		DEBUG_PRINT("Header Response Ok");
     e06:	480f      	ldr	r0, [pc, #60]	; (e44 <mdmResp_KhttpHeaderHandler+0x78>)
     e08:	4b07      	ldr	r3, [pc, #28]	; (e28 <mdmResp_KhttpHeaderHandler+0x5c>)
     e0a:	4798      	blx	r3
		mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
     e0c:	2110      	movs	r1, #16
     e0e:	480e      	ldr	r0, [pc, #56]	; (e48 <mdmResp_KhttpHeaderHandler+0x7c>)
     e10:	4b0e      	ldr	r3, [pc, #56]	; (e4c <mdmResp_KhttpHeaderHandler+0x80>)
     e12:	4798      	blx	r3
		delay_ms(1000);
     e14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     e18:	4b0d      	ldr	r3, [pc, #52]	; (e50 <mdmResp_KhttpHeaderHandler+0x84>)
     e1a:	4798      	blx	r3
		mdmCtrlr_FlushRxBuffer();
     e1c:	4b0d      	ldr	r3, [pc, #52]	; (e54 <mdmResp_KhttpHeaderHandler+0x88>)
     e1e:	4798      	blx	r3
		dataPacketSentOk = true;
     e20:	70a5      	strb	r5, [r4, #2]
     e22:	bd70      	pop	{r4, r5, r6, pc}
     e24:	00006b9c 	.word	0x00006b9c
     e28:	000010b5 	.word	0x000010b5
     e2c:	00001071 	.word	0x00001071
     e30:	00006d0c 	.word	0x00006d0c
     e34:	00006bb4 	.word	0x00006bb4
     e38:	000055b9 	.word	0x000055b9
     e3c:	200004ac 	.word	0x200004ac
     e40:	00006bd0 	.word	0x00006bd0
     e44:	00006bbc 	.word	0x00006bbc
     e48:	0000673c 	.word	0x0000673c
     e4c:	00000841 	.word	0x00000841
     e50:	00001b9d 	.word	0x00001b9d
     e54:	000008bd 	.word	0x000008bd

00000e58 <mdmResp_KhttpGetHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpGetHandler(uint8_t* response, uint8_t length)
{
     e58:	b508      	push	{r3, lr}
	DEBUG_PRINT("\r\n\n");
     e5a:	4803      	ldr	r0, [pc, #12]	; (e68 <mdmResp_KhttpGetHandler+0x10>)
     e5c:	4b03      	ldr	r3, [pc, #12]	; (e6c <mdmResp_KhttpGetHandler+0x14>)
     e5e:	4798      	blx	r3
	//SerialDebugPrint(response,length);
	dataPacketSentOk = true;
     e60:	2201      	movs	r2, #1
     e62:	4b03      	ldr	r3, [pc, #12]	; (e70 <mdmResp_KhttpGetHandler+0x18>)
     e64:	709a      	strb	r2, [r3, #2]
     e66:	bd08      	pop	{r3, pc}
     e68:	00006be8 	.word	0x00006be8
     e6c:	000010b5 	.word	0x000010b5
     e70:	200004ac 	.word	0x200004ac

00000e74 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Apps/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
     e74:	b5f0      	push	{r4, r5, r6, r7, lr}
     e76:	b087      	sub	sp, #28

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,xMaxExpectedBlockTime);
     e78:	4e17      	ldr	r6, [pc, #92]	; (ed8 <ModemRxTask+0x64>)
		getModemCommandData(atCmd, &cmdData);
     e7a:	4d18      	ldr	r5, [pc, #96]	; (edc <ModemRxTask+0x68>)
		else
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
			DEBUG_PRINT("Notification Not Received to Rx Task");
     e7c:	4f18      	ldr	r7, [pc, #96]	; (ee0 <ModemRxTask+0x6c>)
     e7e:	e014      	b.n	eaa <ModemRxTask+0x36>
			DEBUG_PRINT("Notification Received to Rx Task from ISR");
     e80:	4818      	ldr	r0, [pc, #96]	; (ee4 <ModemRxTask+0x70>)
     e82:	4b19      	ldr	r3, [pc, #100]	; (ee8 <ModemRxTask+0x74>)
     e84:	4798      	blx	r3
			ConsoleDebugPrint("Response length",cmdData.ResponseLength);
     e86:	f8bd 1010 	ldrh.w	r1, [sp, #16]
     e8a:	4818      	ldr	r0, [pc, #96]	; (eec <ModemRxTask+0x78>)
     e8c:	4b18      	ldr	r3, [pc, #96]	; (ef0 <ModemRxTask+0x7c>)
     e8e:	4798      	blx	r3
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
     e90:	f89d 0000 	ldrb.w	r0, [sp]
     e94:	4b17      	ldr	r3, [pc, #92]	; (ef4 <ModemRxTask+0x80>)
     e96:	4798      	blx	r3
     e98:	b1d0      	cbz	r0, ed0 <ModemRxTask+0x5c>
				DEBUG_PRINT("Successfully Parsed the last command");
     e9a:	4817      	ldr	r0, [pc, #92]	; (ef8 <ModemRxTask+0x84>)
     e9c:	4b12      	ldr	r3, [pc, #72]	; (ee8 <ModemRxTask+0x74>)
     e9e:	4798      	blx	r3
				mdmParser_SetLastCmdProcessed(true);
     ea0:	2001      	movs	r0, #1
     ea2:	4b16      	ldr	r3, [pc, #88]	; (efc <ModemRxTask+0x88>)
     ea4:	4798      	blx	r3
		}
		kickWatchDog();
     ea6:	4b16      	ldr	r3, [pc, #88]	; (f00 <ModemRxTask+0x8c>)
     ea8:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,xMaxExpectedBlockTime);
     eaa:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
     eae:	f10d 0217 	add.w	r2, sp, #23
     eb2:	f04f 31ff 	mov.w	r1, #4294967295
     eb6:	2000      	movs	r0, #0
     eb8:	47b0      	blx	r6
     eba:	4604      	mov	r4, r0
		getModemCommandData(atCmd, &cmdData);
     ebc:	4669      	mov	r1, sp
     ebe:	f89d 0017 	ldrb.w	r0, [sp, #23]
     ec2:	47a8      	blx	r5
		if(xResult == pdPASS)
     ec4:	2c01      	cmp	r4, #1
     ec6:	d0db      	beq.n	e80 <ModemRxTask+0xc>
			DEBUG_PRINT("Notification Not Received to Rx Task");
     ec8:	4638      	mov	r0, r7
     eca:	4b07      	ldr	r3, [pc, #28]	; (ee8 <ModemRxTask+0x74>)
     ecc:	4798      	blx	r3
     ece:	e7ea      	b.n	ea6 <ModemRxTask+0x32>
				DEBUG_PRINT("Outside solicited parser");
     ed0:	480c      	ldr	r0, [pc, #48]	; (f04 <ModemRxTask+0x90>)
     ed2:	4b05      	ldr	r3, [pc, #20]	; (ee8 <ModemRxTask+0x74>)
     ed4:	4798      	blx	r3
     ed6:	e7e6      	b.n	ea6 <ModemRxTask+0x32>
     ed8:	00004fd1 	.word	0x00004fd1
     edc:	00000371 	.word	0x00000371
     ee0:	00006c88 	.word	0x00006c88
     ee4:	00006c08 	.word	0x00006c08
     ee8:	000010b5 	.word	0x000010b5
     eec:	00006c34 	.word	0x00006c34
     ef0:	000010fd 	.word	0x000010fd
     ef4:	00000525 	.word	0x00000525
     ef8:	00006c44 	.word	0x00006c44
     efc:	000006e1 	.word	0x000006e1
     f00:	00001231 	.word	0x00001231
     f04:	00006c6c 	.word	0x00006c6c

00000f08 <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
     f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f0c:	b086      	sub	sp, #24
	const TickType_t xDelayMs = pdMS_TO_TICKS(1000UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
     f0e:	2300      	movs	r3, #0
     f10:	461a      	mov	r2, r3
     f12:	4619      	mov	r1, r3
     f14:	4822      	ldr	r0, [pc, #136]	; (fa0 <ModemTxTask+0x98>)
     f16:	6800      	ldr	r0, [r0, #0]
     f18:	4c22      	ldr	r4, [pc, #136]	; (fa4 <ModemTxTask+0x9c>)
     f1a:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     f1c:	4c22      	ldr	r4, [pc, #136]	; (fa8 <ModemTxTask+0xa0>)
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemTxTaskSchedule(void)
{
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     f1e:	4d23      	ldr	r5, [pc, #140]	; (fac <ModemTxTask+0xa4>)
     f20:	4e23      	ldr	r6, [pc, #140]	; (fb0 <ModemTxTask+0xa8>)
     f22:	e005      	b.n	f30 <ModemTxTask+0x28>
			kickWatchDog();
     f24:	4b23      	ldr	r3, [pc, #140]	; (fb4 <ModemTxTask+0xac>)
     f26:	4798      	blx	r3
			vTaskDelay(xDelayMs);
     f28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f2c:	4b22      	ldr	r3, [pc, #136]	; (fb8 <ModemTxTask+0xb0>)
     f2e:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     f30:	47a0      	blx	r4
     f32:	2804      	cmp	r0, #4
     f34:	d1fc      	bne.n	f30 <ModemTxTask+0x28>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     f36:	6828      	ldr	r0, [r5, #0]
     f38:	47b0      	blx	r6
     f3a:	2800      	cmp	r0, #0
     f3c:	d0f2      	beq.n	f24 <ModemTxTask+0x1c>
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     f3e:	2100      	movs	r1, #0
     f40:	4b17      	ldr	r3, [pc, #92]	; (fa0 <ModemTxTask+0x98>)
     f42:	6818      	ldr	r0, [r3, #0]
     f44:	4b1d      	ldr	r3, [pc, #116]	; (fbc <ModemTxTask+0xb4>)
     f46:	4798      	blx	r3
     f48:	2801      	cmp	r0, #1
     f4a:	d1eb      	bne.n	f24 <ModemTxTask+0x1c>
		{
			xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, portMAX_DELAY );
     f4c:	4f1c      	ldr	r7, [pc, #112]	; (fc0 <ModemTxTask+0xb8>)
     f4e:	f04f 32ff 	mov.w	r2, #4294967295
     f52:	4639      	mov	r1, r7
     f54:	6828      	ldr	r0, [r5, #0]
     f56:	4b1b      	ldr	r3, [pc, #108]	; (fc4 <ModemTxTask+0xbc>)
     f58:	4798      	blx	r3
			ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
     f5a:	f897 8001 	ldrb.w	r8, [r7, #1]
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	MODEM_CMD_DATA ModemCmdData;
	getModemCommandData(atCmd, &ModemCmdData);
     f5e:	a901      	add	r1, sp, #4
     f60:	4640      	mov	r0, r8
     f62:	4b19      	ldr	r3, [pc, #100]	; (fc8 <ModemTxTask+0xc0>)
     f64:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
     f66:	4b19      	ldr	r3, [pc, #100]	; (fcc <ModemTxTask+0xc4>)
     f68:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
     f6a:	f89d 100c 	ldrb.w	r1, [sp, #12]
     f6e:	9802      	ldr	r0, [sp, #8]
     f70:	4b17      	ldr	r3, [pc, #92]	; (fd0 <ModemTxTask+0xc8>)
     f72:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
     f74:	4640      	mov	r0, r8
     f76:	4b17      	ldr	r3, [pc, #92]	; (fd4 <ModemTxTask+0xcc>)
     f78:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
     f7a:	2000      	movs	r0, #0
     f7c:	4b16      	ldr	r3, [pc, #88]	; (fd8 <ModemTxTask+0xd0>)
     f7e:	4798      	blx	r3
			ConsoleDebugPrint("Task ID",AtTxQueueReceivedData.taskID);
     f80:	7839      	ldrb	r1, [r7, #0]
     f82:	4816      	ldr	r0, [pc, #88]	; (fdc <ModemTxTask+0xd4>)
     f84:	4b16      	ldr	r3, [pc, #88]	; (fe0 <ModemTxTask+0xd8>)
     f86:	4798      	blx	r3
			DEBUG_PRINT("Transmitted a command to Modem");
     f88:	4816      	ldr	r0, [pc, #88]	; (fe4 <ModemTxTask+0xdc>)
     f8a:	4b17      	ldr	r3, [pc, #92]	; (fe8 <ModemTxTask+0xe0>)
     f8c:	4798      	blx	r3
			xSemaphoreGive(AtTxQueueLoadSemaphore);
     f8e:	2300      	movs	r3, #0
     f90:	461a      	mov	r2, r3
     f92:	4619      	mov	r1, r3
     f94:	4802      	ldr	r0, [pc, #8]	; (fa0 <ModemTxTask+0x98>)
     f96:	6800      	ldr	r0, [r0, #0]
     f98:	4f02      	ldr	r7, [pc, #8]	; (fa4 <ModemTxTask+0x9c>)
     f9a:	47b8      	blx	r7
     f9c:	e7c2      	b.n	f24 <ModemTxTask+0x1c>
     f9e:	bf00      	nop
     fa0:	20003414 	.word	0x20003414
     fa4:	00003dc1 	.word	0x00003dc1
     fa8:	00000a51 	.word	0x00000a51
     fac:	20003410 	.word	0x20003410
     fb0:	0000440d 	.word	0x0000440d
     fb4:	00001231 	.word	0x00001231
     fb8:	00004ad1 	.word	0x00004ad1
     fbc:	0000422d 	.word	0x0000422d
     fc0:	200004b0 	.word	0x200004b0
     fc4:	000040a5 	.word	0x000040a5
     fc8:	00000371 	.word	0x00000371
     fcc:	000008bd 	.word	0x000008bd
     fd0:	00000841 	.word	0x00000841
     fd4:	000006ed 	.word	0x000006ed
     fd8:	000006e1 	.word	0x000006e1
     fdc:	00006cb0 	.word	0x00006cb0
     fe0:	000010fd 	.word	0x000010fd
     fe4:	00006cb8 	.word	0x00006cb8
     fe8:	000010b5 	.word	0x000010b5

00000fec <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ff0:	4604      	mov	r4, r0
     ff2:	460e      	mov	r6, r1
     ff4:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     ff6:	4d0e      	ldr	r5, [pc, #56]	; (1030 <usart_async_write+0x44>)
     ff8:	4620      	mov	r0, r4
     ffa:	47a8      	blx	r5
     ffc:	2800      	cmp	r0, #0
     ffe:	d0fb      	beq.n	ff8 <usart_async_write+0xc>
    1000:	3e01      	subs	r6, #1
    1002:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1034 <usart_async_write+0x48>
    1006:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
    1008:	f8df a02c 	ldr.w	sl, [pc, #44]	; 1038 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
    100c:	4d08      	ldr	r5, [pc, #32]	; (1030 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
    100e:	7873      	ldrb	r3, [r6, #1]
    1010:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
    1014:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1018:	4620      	mov	r0, r4
    101a:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
    101c:	4620      	mov	r0, r4
    101e:	47a8      	blx	r5
    1020:	2800      	cmp	r0, #0
    1022:	d0fb      	beq.n	101c <usart_async_write+0x30>
		;
	} while (++offset < length);
    1024:	3701      	adds	r7, #1
    1026:	454f      	cmp	r7, r9
    1028:	d3f1      	bcc.n	100e <usart_async_write+0x22>

	return (int32_t)offset;
}
    102a:	4638      	mov	r0, r7
    102c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1030:	0000290b 	.word	0x0000290b
    1034:	200004b8 	.word	0x200004b8
    1038:	000028fd 	.word	0x000028fd

0000103c <SerialDebugTxByteSentCallBack>:
    103c:	2302      	movs	r3, #2
    103e:	7603      	strb	r3, [r0, #24]
    1040:	4770      	bx	lr

00001042 <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1042:	2380      	movs	r3, #128	; 0x80
    1044:	7603      	strb	r3, [r0, #24]
    1046:	4770      	bx	lr

00001048 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
    1048:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
    104a:	4c05      	ldr	r4, [pc, #20]	; (1060 <SerialDebugPrintInit+0x18>)
    104c:	4905      	ldr	r1, [pc, #20]	; (1064 <SerialDebugPrintInit+0x1c>)
    104e:	4620      	mov	r0, r4
    1050:	4b05      	ldr	r3, [pc, #20]	; (1068 <SerialDebugPrintInit+0x20>)
    1052:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
    1054:	2201      	movs	r2, #1
    1056:	4611      	mov	r1, r2
    1058:	4620      	mov	r0, r4
    105a:	4b04      	ldr	r3, [pc, #16]	; (106c <SerialDebugPrintInit+0x24>)
    105c:	4798      	blx	r3
    105e:	bd10      	pop	{r4, pc}
    1060:	20000040 	.word	0x20000040
    1064:	43000400 	.word	0x43000400
    1068:	00002875 	.word	0x00002875
    106c:	00002921 	.word	0x00002921

00001070 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
    1070:	b570      	push	{r4, r5, r6, lr}
    1072:	4605      	mov	r5, r0
    1074:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
    1076:	4c05      	ldr	r4, [pc, #20]	; (108c <SerialDebugPrint+0x1c>)
    1078:	4620      	mov	r0, r4
    107a:	4b05      	ldr	r3, [pc, #20]	; (1090 <SerialDebugPrint+0x20>)
    107c:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
    107e:	4632      	mov	r2, r6
    1080:	4629      	mov	r1, r5
    1082:	4620      	mov	r0, r4
    1084:	4b03      	ldr	r3, [pc, #12]	; (1094 <SerialDebugPrint+0x24>)
    1086:	4798      	blx	r3
    1088:	bd70      	pop	{r4, r5, r6, pc}
    108a:	bf00      	nop
    108c:	20000040 	.word	0x20000040
    1090:	000028e9 	.word	0x000028e9
    1094:	00000fed 	.word	0x00000fed

00001098 <SerialDebugTxDoneCallBack>:
{
    1098:	b510      	push	{r4, lr}
    109a:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    109c:	2116      	movs	r1, #22
    109e:	4803      	ldr	r0, [pc, #12]	; (10ac <SerialDebugTxDoneCallBack+0x14>)
    10a0:	4b03      	ldr	r3, [pc, #12]	; (10b0 <SerialDebugTxDoneCallBack+0x18>)
    10a2:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    10a4:	2301      	movs	r3, #1
    10a6:	7623      	strb	r3, [r4, #24]
    10a8:	bd10      	pop	{r4, pc}
    10aa:	bf00      	nop
    10ac:	00006cd8 	.word	0x00006cd8
    10b0:	00001071 	.word	0x00001071

000010b4 <SerialStringPrint>:
}


void SerialStringPrint(const uint8_t *const dataToPrint)
{
    10b4:	b510      	push	{r4, lr}
    10b6:	b09a      	sub	sp, #104	; 0x68
    10b8:	4604      	mov	r4, r0
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
    10ba:	2264      	movs	r2, #100	; 0x64
    10bc:	2100      	movs	r1, #0
    10be:	a801      	add	r0, sp, #4
    10c0:	4b08      	ldr	r3, [pc, #32]	; (10e4 <SerialStringPrint+0x30>)
    10c2:	4798      	blx	r3
	sprintf((int8_t*)dbgBuffer,"%s %s",dataToPrint,"\r\n");
    10c4:	4b08      	ldr	r3, [pc, #32]	; (10e8 <SerialStringPrint+0x34>)
    10c6:	4622      	mov	r2, r4
    10c8:	4908      	ldr	r1, [pc, #32]	; (10ec <SerialStringPrint+0x38>)
    10ca:	a801      	add	r0, sp, #4
    10cc:	4c08      	ldr	r4, [pc, #32]	; (10f0 <SerialStringPrint+0x3c>)
    10ce:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    10d0:	a801      	add	r0, sp, #4
    10d2:	4b08      	ldr	r3, [pc, #32]	; (10f4 <SerialStringPrint+0x40>)
    10d4:	4798      	blx	r3
    10d6:	b281      	uxth	r1, r0
    10d8:	a801      	add	r0, sp, #4
    10da:	4b07      	ldr	r3, [pc, #28]	; (10f8 <SerialStringPrint+0x44>)
    10dc:	4798      	blx	r3
}
    10de:	b01a      	add	sp, #104	; 0x68
    10e0:	bd10      	pop	{r4, pc}
    10e2:	bf00      	nop
    10e4:	00005621 	.word	0x00005621
    10e8:	00006d0c 	.word	0x00006d0c
    10ec:	00006cfc 	.word	0x00006cfc
    10f0:	000057a9 	.word	0x000057a9
    10f4:	00005801 	.word	0x00005801
    10f8:	00001071 	.word	0x00001071

000010fc <ConsoleDebugPrint>:

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
    10fc:	b530      	push	{r4, r5, lr}
    10fe:	b09b      	sub	sp, #108	; 0x6c
    1100:	4605      	mov	r5, r0
    1102:	460c      	mov	r4, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
    1104:	2264      	movs	r2, #100	; 0x64
    1106:	2100      	movs	r1, #0
    1108:	a801      	add	r0, sp, #4
    110a:	4b09      	ldr	r3, [pc, #36]	; (1130 <ConsoleDebugPrint+0x34>)
    110c:	4798      	blx	r3

	if(intData != 0)
    110e:	b90c      	cbnz	r4, 1114 <ConsoleDebugPrint+0x18>
	{
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
	}
}
    1110:	b01b      	add	sp, #108	; 0x6c
    1112:	bd30      	pop	{r4, r5, pc}
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    1114:	4623      	mov	r3, r4
    1116:	462a      	mov	r2, r5
    1118:	4906      	ldr	r1, [pc, #24]	; (1134 <ConsoleDebugPrint+0x38>)
    111a:	a801      	add	r0, sp, #4
    111c:	4c06      	ldr	r4, [pc, #24]	; (1138 <ConsoleDebugPrint+0x3c>)
    111e:	47a0      	blx	r4
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    1120:	a801      	add	r0, sp, #4
    1122:	4b06      	ldr	r3, [pc, #24]	; (113c <ConsoleDebugPrint+0x40>)
    1124:	4798      	blx	r3
    1126:	b281      	uxth	r1, r0
    1128:	a801      	add	r0, sp, #4
    112a:	4b05      	ldr	r3, [pc, #20]	; (1140 <ConsoleDebugPrint+0x44>)
    112c:	4798      	blx	r3
}
    112e:	e7ef      	b.n	1110 <ConsoleDebugPrint+0x14>
    1130:	00005621 	.word	0x00005621
    1134:	00006d04 	.word	0x00006d04
    1138:	000057a9 	.word	0x000057a9
    113c:	00005801 	.word	0x00005801
    1140:	00001071 	.word	0x00001071

00001144 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    1144:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    1146:	2204      	movs	r2, #4
    1148:	4b0b      	ldr	r3, [pc, #44]	; (1178 <SERCOM5_2_Handler+0x34>)
    114a:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    114c:	4d0b      	ldr	r5, [pc, #44]	; (117c <SERCOM5_2_Handler+0x38>)
    114e:	4c0c      	ldr	r4, [pc, #48]	; (1180 <SERCOM5_2_Handler+0x3c>)
    1150:	4628      	mov	r0, r5
    1152:	47a0      	blx	r4
    1154:	2800      	cmp	r0, #0
    1156:	d0fb      	beq.n	1150 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    1158:	4808      	ldr	r0, [pc, #32]	; (117c <SERCOM5_2_Handler+0x38>)
    115a:	4b0a      	ldr	r3, [pc, #40]	; (1184 <SERCOM5_2_Handler+0x40>)
    115c:	4798      	blx	r3
    115e:	490a      	ldr	r1, [pc, #40]	; (1188 <SERCOM5_2_Handler+0x44>)
    1160:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    1162:	2300      	movs	r3, #0
    1164:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    1166:	4c09      	ldr	r4, [pc, #36]	; (118c <SERCOM5_2_Handler+0x48>)
    1168:	4620      	mov	r0, r4
    116a:	4b09      	ldr	r3, [pc, #36]	; (1190 <SERCOM5_2_Handler+0x4c>)
    116c:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    116e:	2105      	movs	r1, #5
    1170:	4620      	mov	r0, r4
    1172:	4b08      	ldr	r3, [pc, #32]	; (1194 <SERCOM5_2_Handler+0x50>)
    1174:	4798      	blx	r3
    1176:	bd38      	pop	{r3, r4, r5, pc}
    1178:	43000400 	.word	0x43000400
    117c:	20000040 	.word	0x20000040
    1180:	00002915 	.word	0x00002915
    1184:	00002903 	.word	0x00002903
    1188:	20003c34 	.word	0x20003c34
    118c:	20003c38 	.word	0x20003c38
    1190:	000057f1 	.word	0x000057f1
    1194:	00001071 	.word	0x00001071

00001198 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    1198:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    119a:	4b0a      	ldr	r3, [pc, #40]	; (11c4 <configureWatchDogTimeOut+0x2c>)
    119c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    11a0:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    11a2:	4c09      	ldr	r4, [pc, #36]	; (11c8 <configureWatchDogTimeOut+0x30>)
    11a4:	6820      	ldr	r0, [r4, #0]
    11a6:	2279      	movs	r2, #121	; 0x79
    11a8:	4908      	ldr	r1, [pc, #32]	; (11cc <configureWatchDogTimeOut+0x34>)
    11aa:	3000      	adds	r0, #0
    11ac:	bf18      	it	ne
    11ae:	2001      	movne	r0, #1
    11b0:	4b07      	ldr	r3, [pc, #28]	; (11d0 <configureWatchDogTimeOut+0x38>)
    11b2:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    11b4:	462a      	mov	r2, r5
    11b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    11ba:	4620      	mov	r0, r4
    11bc:	4b05      	ldr	r3, [pc, #20]	; (11d4 <configureWatchDogTimeOut+0x3c>)
    11be:	4798      	blx	r3
    11c0:	bd38      	pop	{r3, r4, r5, pc}
    11c2:	bf00      	nop
    11c4:	2000005c 	.word	0x2000005c
    11c8:	20003d14 	.word	0x20003d14
    11cc:	00006d10 	.word	0x00006d10
    11d0:	00001df5 	.word	0x00001df5
    11d4:	000032c1 	.word	0x000032c1

000011d8 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    11d8:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    11da:	2002      	movs	r0, #2
    11dc:	4b07      	ldr	r3, [pc, #28]	; (11fc <enableWatchDogTimer+0x24>)
    11de:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    11e0:	4c07      	ldr	r4, [pc, #28]	; (1200 <enableWatchDogTimer+0x28>)
    11e2:	6820      	ldr	r0, [r4, #0]
    11e4:	2296      	movs	r2, #150	; 0x96
    11e6:	4907      	ldr	r1, [pc, #28]	; (1204 <enableWatchDogTimer+0x2c>)
    11e8:	3000      	adds	r0, #0
    11ea:	bf18      	it	ne
    11ec:	2001      	movne	r0, #1
    11ee:	4b06      	ldr	r3, [pc, #24]	; (1208 <enableWatchDogTimer+0x30>)
    11f0:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    11f2:	4620      	mov	r0, r4
    11f4:	4b05      	ldr	r3, [pc, #20]	; (120c <enableWatchDogTimer+0x34>)
    11f6:	4798      	blx	r3
    11f8:	bd10      	pop	{r4, pc}
    11fa:	bf00      	nop
    11fc:	00001199 	.word	0x00001199
    1200:	20003d14 	.word	0x20003d14
    1204:	00006d10 	.word	0x00006d10
    1208:	00001df5 	.word	0x00001df5
    120c:	000033dd 	.word	0x000033dd

00001210 <atmel_start_init>:
{
    1210:	b508      	push	{r3, lr}
    system_init();
    1212:	4b04      	ldr	r3, [pc, #16]	; (1224 <atmel_start_init+0x14>)
    1214:	4798      	blx	r3
    delay_ms(1000);
    1216:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    121a:	4b03      	ldr	r3, [pc, #12]	; (1228 <atmel_start_init+0x18>)
    121c:	4798      	blx	r3
    enableWatchDogTimer();
    121e:	4b03      	ldr	r3, [pc, #12]	; (122c <atmel_start_init+0x1c>)
    1220:	4798      	blx	r3
    1222:	bd08      	pop	{r3, pc}
    1224:	000019ad 	.word	0x000019ad
    1228:	00001b9d 	.word	0x00001b9d
    122c:	000011d9 	.word	0x000011d9

00001230 <kickWatchDog>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
int32_t kickWatchDog(void)
{	
    1230:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1232:	4c06      	ldr	r4, [pc, #24]	; (124c <kickWatchDog+0x1c>)
    1234:	6820      	ldr	r0, [r4, #0]
    1236:	22b3      	movs	r2, #179	; 0xb3
    1238:	4905      	ldr	r1, [pc, #20]	; (1250 <kickWatchDog+0x20>)
    123a:	3000      	adds	r0, #0
    123c:	bf18      	it	ne
    123e:	2001      	movne	r0, #1
    1240:	4b04      	ldr	r3, [pc, #16]	; (1254 <kickWatchDog+0x24>)
    1242:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    1244:	4620      	mov	r0, r4
    1246:	4b04      	ldr	r3, [pc, #16]	; (1258 <kickWatchDog+0x28>)
    1248:	4798      	blx	r3
		status = ERR_DENIED;
		//DEBUG_PRINT("Not able to Kick WDT");
	}

	return status;
}
    124a:	bd10      	pop	{r4, pc}
    124c:	20003d14 	.word	0x20003d14
    1250:	00006d10 	.word	0x00006d10
    1254:	00001df5 	.word	0x00001df5
    1258:	00003419 	.word	0x00003419

0000125c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    125c:	e7fe      	b.n	125c <Dummy_Handler>
	...

00001260 <Reset_Handler>:
{
    1260:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    1262:	4b1c      	ldr	r3, [pc, #112]	; (12d4 <Reset_Handler+0x74>)
    1264:	4a1c      	ldr	r2, [pc, #112]	; (12d8 <Reset_Handler+0x78>)
    1266:	429a      	cmp	r2, r3
    1268:	d010      	beq.n	128c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    126a:	4b1c      	ldr	r3, [pc, #112]	; (12dc <Reset_Handler+0x7c>)
    126c:	4a19      	ldr	r2, [pc, #100]	; (12d4 <Reset_Handler+0x74>)
    126e:	429a      	cmp	r2, r3
    1270:	d20c      	bcs.n	128c <Reset_Handler+0x2c>
    1272:	3b01      	subs	r3, #1
    1274:	1a9b      	subs	r3, r3, r2
    1276:	f023 0303 	bic.w	r3, r3, #3
    127a:	3304      	adds	r3, #4
    127c:	4413      	add	r3, r2
    127e:	4916      	ldr	r1, [pc, #88]	; (12d8 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    1280:	f851 0b04 	ldr.w	r0, [r1], #4
    1284:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    1288:	429a      	cmp	r2, r3
    128a:	d1f9      	bne.n	1280 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    128c:	4b14      	ldr	r3, [pc, #80]	; (12e0 <Reset_Handler+0x80>)
    128e:	4a15      	ldr	r2, [pc, #84]	; (12e4 <Reset_Handler+0x84>)
    1290:	429a      	cmp	r2, r3
    1292:	d20a      	bcs.n	12aa <Reset_Handler+0x4a>
    1294:	3b01      	subs	r3, #1
    1296:	1a9b      	subs	r3, r3, r2
    1298:	f023 0303 	bic.w	r3, r3, #3
    129c:	3304      	adds	r3, #4
    129e:	4413      	add	r3, r2
                *pDest++ = 0;
    12a0:	2100      	movs	r1, #0
    12a2:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    12a6:	4293      	cmp	r3, r2
    12a8:	d1fb      	bne.n	12a2 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    12aa:	4b0f      	ldr	r3, [pc, #60]	; (12e8 <Reset_Handler+0x88>)
    12ac:	4a0f      	ldr	r2, [pc, #60]	; (12ec <Reset_Handler+0x8c>)
    12ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    12b2:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    12b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    12b8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    12bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12c4:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    12c8:	4b09      	ldr	r3, [pc, #36]	; (12f0 <Reset_Handler+0x90>)
    12ca:	4798      	blx	r3
        main();
    12cc:	4b09      	ldr	r3, [pc, #36]	; (12f4 <Reset_Handler+0x94>)
    12ce:	4798      	blx	r3
    12d0:	e7fe      	b.n	12d0 <Reset_Handler+0x70>
    12d2:	bf00      	nop
    12d4:	20000000 	.word	0x20000000
    12d8:	0000745c 	.word	0x0000745c
    12dc:	2000018c 	.word	0x2000018c
    12e0:	20003e00 	.word	0x20003e00
    12e4:	20000190 	.word	0x20000190
    12e8:	e000ed00 	.word	0xe000ed00
    12ec:	00000000 	.word	0x00000000
    12f0:	00005571 	.word	0x00005571
    12f4:	000034a5 	.word	0x000034a5

000012f8 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
    12f8:	4a04      	ldr	r2, [pc, #16]	; (130c <AC_0_CLOCK_init+0x14>)
    12fa:	69d3      	ldr	r3, [r2, #28]
    12fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1300:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1302:	2240      	movs	r2, #64	; 0x40
    1304:	4b02      	ldr	r3, [pc, #8]	; (1310 <AC_0_CLOCK_init+0x18>)
    1306:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    130a:	4770      	bx	lr
    130c:	40000800 	.word	0x40000800
    1310:	40001c00 	.word	0x40001c00

00001314 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
    1314:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
    1316:	4b03      	ldr	r3, [pc, #12]	; (1324 <AC_0_init+0x10>)
    1318:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
    131a:	4903      	ldr	r1, [pc, #12]	; (1328 <AC_0_init+0x14>)
    131c:	4803      	ldr	r0, [pc, #12]	; (132c <AC_0_init+0x18>)
    131e:	4b04      	ldr	r3, [pc, #16]	; (1330 <AC_0_init+0x1c>)
    1320:	4798      	blx	r3
    1322:	bd08      	pop	{r3, pc}
    1324:	000012f9 	.word	0x000012f9
    1328:	42002000 	.word	0x42002000
    132c:	20003ce0 	.word	0x20003ce0
    1330:	00001acd 	.word	0x00001acd

00001334 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1334:	4b5d      	ldr	r3, [pc, #372]	; (14ac <ADC_0_PORT_init+0x178>)
    1336:	2204      	movs	r2, #4
    1338:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    133a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    133e:	629a      	str	r2, [r3, #40]	; 0x28
    1340:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1344:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1346:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    134a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    134e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1352:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1356:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    135a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    135e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1362:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1366:	2108      	movs	r1, #8
    1368:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    136a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    136e:	6299      	str	r1, [r3, #40]	; 0x28
    1370:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1372:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    1376:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    137a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    137e:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1382:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1386:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    138a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    138e:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1392:	f44f 7180 	mov.w	r1, #256	; 0x100
    1396:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    139a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    139e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    13a2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13a6:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    13aa:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13ae:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13b2:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13b6:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    13ba:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    13be:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13c2:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13c6:	f44f 7100 	mov.w	r1, #512	; 0x200
    13ca:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13ce:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    13d2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    13d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13da:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    13de:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13e2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13e6:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13ea:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    13ee:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    13f2:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13f6:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13fa:	2110      	movs	r1, #16
    13fc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1402:	6299      	str	r1, [r3, #40]	; 0x28
    1404:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1406:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    140a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    140e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1412:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1416:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    141a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    141e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1422:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1426:	2120      	movs	r1, #32
    1428:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    142a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    142e:	6299      	str	r1, [r3, #40]	; 0x28
    1430:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1432:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    1436:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    143a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    143e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1442:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1446:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    144a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    144e:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1452:	2140      	movs	r1, #64	; 0x40
    1454:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1456:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    145a:	6299      	str	r1, [r3, #40]	; 0x28
    145c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    145e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    1462:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1466:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    146a:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    146e:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1472:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1476:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    147a:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    147e:	2180      	movs	r1, #128	; 0x80
    1480:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1482:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1486:	6299      	str	r1, [r3, #40]	; 0x28
    1488:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    148a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    148e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1492:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1496:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    149a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    149e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    14a2:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    14a6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    14aa:	4770      	bx	lr
    14ac:	41008000 	.word	0x41008000

000014b0 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    14b0:	4a04      	ldr	r2, [pc, #16]	; (14c4 <ADC_0_CLOCK_init+0x14>)
    14b2:	6a13      	ldr	r3, [r2, #32]
    14b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    14b8:	6213      	str	r3, [r2, #32]
    14ba:	2241      	movs	r2, #65	; 0x41
    14bc:	4b02      	ldr	r3, [pc, #8]	; (14c8 <ADC_0_CLOCK_init+0x18>)
    14be:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    14c2:	4770      	bx	lr
    14c4:	40000800 	.word	0x40000800
    14c8:	40001c00 	.word	0x40001c00

000014cc <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    14cc:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <ADC_0_init+0x18>)
    14d0:	4798      	blx	r3
	ADC_0_PORT_init();
    14d2:	4b05      	ldr	r3, [pc, #20]	; (14e8 <ADC_0_init+0x1c>)
    14d4:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    14d6:	2200      	movs	r2, #0
    14d8:	4904      	ldr	r1, [pc, #16]	; (14ec <ADC_0_init+0x20>)
    14da:	4805      	ldr	r0, [pc, #20]	; (14f0 <ADC_0_init+0x24>)
    14dc:	4b05      	ldr	r3, [pc, #20]	; (14f4 <ADC_0_init+0x28>)
    14de:	4798      	blx	r3
    14e0:	bd08      	pop	{r3, pc}
    14e2:	bf00      	nop
    14e4:	000014b1 	.word	0x000014b1
    14e8:	00001335 	.word	0x00001335
    14ec:	43001c00 	.word	0x43001c00
    14f0:	20003cf0 	.word	0x20003cf0
    14f4:	00001afd 	.word	0x00001afd

000014f8 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    14f8:	4a04      	ldr	r2, [pc, #16]	; (150c <ADC_1_CLOCK_init+0x14>)
    14fa:	6a13      	ldr	r3, [r2, #32]
    14fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1500:	6213      	str	r3, [r2, #32]
    1502:	2240      	movs	r2, #64	; 0x40
    1504:	4b02      	ldr	r3, [pc, #8]	; (1510 <ADC_1_CLOCK_init+0x18>)
    1506:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    150a:	4770      	bx	lr
    150c:	40000800 	.word	0x40000800
    1510:	40001c00 	.word	0x40001c00

00001514 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
    1514:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
    1516:	4b04      	ldr	r3, [pc, #16]	; (1528 <ADC_1_init+0x14>)
    1518:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
    151a:	2200      	movs	r2, #0
    151c:	4903      	ldr	r1, [pc, #12]	; (152c <ADC_1_init+0x18>)
    151e:	4804      	ldr	r0, [pc, #16]	; (1530 <ADC_1_init+0x1c>)
    1520:	4b04      	ldr	r3, [pc, #16]	; (1534 <ADC_1_init+0x20>)
    1522:	4798      	blx	r3
    1524:	bd08      	pop	{r3, pc}
    1526:	bf00      	nop
    1528:	000014f9 	.word	0x000014f9
    152c:	43002000 	.word	0x43002000
    1530:	20003da8 	.word	0x20003da8
    1534:	00001afd 	.word	0x00001afd

00001538 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    1538:	4a04      	ldr	r2, [pc, #16]	; (154c <DAC_0_CLOCK_init+0x14>)
    153a:	6a13      	ldr	r3, [r2, #32]
    153c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1540:	6213      	str	r3, [r2, #32]
    1542:	2240      	movs	r2, #64	; 0x40
    1544:	4b02      	ldr	r3, [pc, #8]	; (1550 <DAC_0_CLOCK_init+0x18>)
    1546:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    154a:	4770      	bx	lr
    154c:	40000800 	.word	0x40000800
    1550:	40001c00 	.word	0x40001c00

00001554 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    1554:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    1556:	4b03      	ldr	r3, [pc, #12]	; (1564 <DAC_0_init+0x10>)
    1558:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    155a:	4903      	ldr	r1, [pc, #12]	; (1568 <DAC_0_init+0x14>)
    155c:	4803      	ldr	r0, [pc, #12]	; (156c <DAC_0_init+0x18>)
    155e:	4b04      	ldr	r3, [pc, #16]	; (1570 <DAC_0_init+0x1c>)
    1560:	4798      	blx	r3
    1562:	bd08      	pop	{r3, pc}
    1564:	00001539 	.word	0x00001539
    1568:	43002400 	.word	0x43002400
    156c:	20003d18 	.word	0x20003d18
    1570:	00001b49 	.word	0x00001b49

00001574 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    1574:	b508      	push	{r3, lr}
    1576:	2240      	movs	r2, #64	; 0x40
    1578:	4b05      	ldr	r3, [pc, #20]	; (1590 <EXTERNAL_IRQ_0_init+0x1c>)
    157a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    157e:	4a05      	ldr	r2, [pc, #20]	; (1594 <EXTERNAL_IRQ_0_init+0x20>)
    1580:	6953      	ldr	r3, [r2, #20]
    1582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1586:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    1588:	4b03      	ldr	r3, [pc, #12]	; (1598 <EXTERNAL_IRQ_0_init+0x24>)
    158a:	4798      	blx	r3
    158c:	bd08      	pop	{r3, pc}
    158e:	bf00      	nop
    1590:	40001c00 	.word	0x40001c00
    1594:	40000800 	.word	0x40000800
    1598:	00001c01 	.word	0x00001c01

0000159c <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    159c:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    159e:	4a04      	ldr	r2, [pc, #16]	; (15b0 <EVENT_SYSTEM_0_init+0x14>)
    15a0:	6993      	ldr	r3, [r2, #24]
    15a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    15a6:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    15a8:	4b02      	ldr	r3, [pc, #8]	; (15b4 <EVENT_SYSTEM_0_init+0x18>)
    15aa:	4798      	blx	r3
    15ac:	bd08      	pop	{r3, pc}
    15ae:	bf00      	nop
    15b0:	40000800 	.word	0x40000800
    15b4:	00001bbd 	.word	0x00001bbd

000015b8 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    15b8:	4a02      	ldr	r2, [pc, #8]	; (15c4 <FLASH_0_CLOCK_init+0xc>)
    15ba:	6913      	ldr	r3, [r2, #16]
    15bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    15c0:	6113      	str	r3, [r2, #16]
    15c2:	4770      	bx	lr
    15c4:	40000800 	.word	0x40000800

000015c8 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    15c8:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    15ca:	4b03      	ldr	r3, [pc, #12]	; (15d8 <FLASH_0_init+0x10>)
    15cc:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    15ce:	4903      	ldr	r1, [pc, #12]	; (15dc <FLASH_0_init+0x14>)
    15d0:	4803      	ldr	r0, [pc, #12]	; (15e0 <FLASH_0_init+0x18>)
    15d2:	4b04      	ldr	r3, [pc, #16]	; (15e4 <FLASH_0_init+0x1c>)
    15d4:	4798      	blx	r3
    15d6:	bd08      	pop	{r3, pc}
    15d8:	000015b9 	.word	0x000015b9
    15dc:	41004000 	.word	0x41004000
    15e0:	20003ca4 	.word	0x20003ca4
    15e4:	00001c39 	.word	0x00001c39

000015e8 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    15e8:	4b10      	ldr	r3, [pc, #64]	; (162c <ModemData_PORT_init+0x44>)
    15ea:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    15ee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    15f2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    15f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    15fa:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    15fe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1602:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    160a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    160e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1612:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1616:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    161a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    161e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1622:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1626:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    162a:	4770      	bx	lr
    162c:	41008000 	.word	0x41008000

00001630 <ModemData_CLOCK_init>:
    1630:	4b06      	ldr	r3, [pc, #24]	; (164c <ModemData_CLOCK_init+0x1c>)
    1632:	2240      	movs	r2, #64	; 0x40
    1634:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    1638:	224a      	movs	r2, #74	; 0x4a
    163a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    163e:	4a04      	ldr	r2, [pc, #16]	; (1650 <ModemData_CLOCK_init+0x20>)
    1640:	6993      	ldr	r3, [r2, #24]
    1642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    1646:	6193      	str	r3, [r2, #24]
    1648:	4770      	bx	lr
    164a:	bf00      	nop
    164c:	40001c00 	.word	0x40001c00
    1650:	40000800 	.word	0x40000800

00001654 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    1654:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    1656:	4b03      	ldr	r3, [pc, #12]	; (1664 <ModemData_init+0x10>)
    1658:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    165a:	4b03      	ldr	r3, [pc, #12]	; (1668 <ModemData_init+0x14>)
    165c:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    165e:	4b03      	ldr	r3, [pc, #12]	; (166c <ModemData_init+0x18>)
    1660:	4798      	blx	r3
    1662:	bd08      	pop	{r3, pc}
    1664:	00001631 	.word	0x00001631
    1668:	00000705 	.word	0x00000705
    166c:	000015e9 	.word	0x000015e9

00001670 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1670:	4b10      	ldr	r3, [pc, #64]	; (16b4 <SerialDebug_PORT_init+0x44>)
    1672:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    1676:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    167a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    167e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1682:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1686:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    168a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    168e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1692:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    1696:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    169a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    169e:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    16a2:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    16a6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    16aa:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    16ae:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    16b2:	4770      	bx	lr
    16b4:	41008000 	.word	0x41008000

000016b8 <SerialDebug_CLOCK_init>:
    16b8:	4b06      	ldr	r3, [pc, #24]	; (16d4 <SerialDebug_CLOCK_init+0x1c>)
    16ba:	2240      	movs	r2, #64	; 0x40
    16bc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    16c0:	224a      	movs	r2, #74	; 0x4a
    16c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    16c6:	4a04      	ldr	r2, [pc, #16]	; (16d8 <SerialDebug_CLOCK_init+0x20>)
    16c8:	6a13      	ldr	r3, [r2, #32]
    16ca:	f043 0302 	orr.w	r3, r3, #2
    16ce:	6213      	str	r3, [r2, #32]
    16d0:	4770      	bx	lr
    16d2:	bf00      	nop
    16d4:	40001c00 	.word	0x40001c00
    16d8:	40000800 	.word	0x40000800

000016dc <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    16dc:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    16de:	4b03      	ldr	r3, [pc, #12]	; (16ec <SerialDebug_init+0x10>)
    16e0:	4798      	blx	r3
	SerialDebugPrintInit();
    16e2:	4b03      	ldr	r3, [pc, #12]	; (16f0 <SerialDebug_init+0x14>)
    16e4:	4798      	blx	r3
	SerialDebug_PORT_init();
    16e6:	4b03      	ldr	r3, [pc, #12]	; (16f4 <SerialDebug_init+0x18>)
    16e8:	4798      	blx	r3
    16ea:	bd08      	pop	{r3, pc}
    16ec:	000016b9 	.word	0x000016b9
    16f0:	00001049 	.word	0x00001049
    16f4:	00001671 	.word	0x00001671

000016f8 <delay_driver_init>:
}

void delay_driver_init(void)
{
    16f8:	b508      	push	{r3, lr}
	delay_init(SysTick);
    16fa:	4802      	ldr	r0, [pc, #8]	; (1704 <delay_driver_init+0xc>)
    16fc:	4b02      	ldr	r3, [pc, #8]	; (1708 <delay_driver_init+0x10>)
    16fe:	4798      	blx	r3
    1700:	bd08      	pop	{r3, pc}
    1702:	bf00      	nop
    1704:	e000e010 	.word	0xe000e010
    1708:	00001b89 	.word	0x00001b89

0000170c <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    170c:	4a04      	ldr	r2, [pc, #16]	; (1720 <PWM_0_CLOCK_init+0x14>)
    170e:	6953      	ldr	r3, [r2, #20]
    1710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1714:	6153      	str	r3, [r2, #20]
    1716:	2240      	movs	r2, #64	; 0x40
    1718:	4b02      	ldr	r3, [pc, #8]	; (1724 <PWM_0_CLOCK_init+0x18>)
    171a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    171e:	4770      	bx	lr
    1720:	40000800 	.word	0x40000800
    1724:	40001c00 	.word	0x40001c00

00001728 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    1728:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    172a:	4b05      	ldr	r3, [pc, #20]	; (1740 <PWM_0_init+0x18>)
    172c:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    172e:	4b05      	ldr	r3, [pc, #20]	; (1744 <PWM_0_init+0x1c>)
    1730:	4798      	blx	r3
    1732:	4602      	mov	r2, r0
    1734:	4904      	ldr	r1, [pc, #16]	; (1748 <PWM_0_init+0x20>)
    1736:	4805      	ldr	r0, [pc, #20]	; (174c <PWM_0_init+0x24>)
    1738:	4b05      	ldr	r3, [pc, #20]	; (1750 <PWM_0_init+0x28>)
    173a:	4798      	blx	r3
    173c:	bd08      	pop	{r3, pc}
    173e:	bf00      	nop
    1740:	0000170d 	.word	0x0000170d
    1744:	000031d9 	.word	0x000031d9
    1748:	40003800 	.word	0x40003800
    174c:	20003c6c 	.word	0x20003c6c
    1750:	00001c95 	.word	0x00001c95

00001754 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    1754:	4a04      	ldr	r2, [pc, #16]	; (1768 <PWM_1_CLOCK_init+0x14>)
    1756:	6953      	ldr	r3, [r2, #20]
    1758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    175c:	6153      	str	r3, [r2, #20]
    175e:	2240      	movs	r2, #64	; 0x40
    1760:	4b02      	ldr	r3, [pc, #8]	; (176c <PWM_1_CLOCK_init+0x18>)
    1762:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    1766:	4770      	bx	lr
    1768:	40000800 	.word	0x40000800
    176c:	40001c00 	.word	0x40001c00

00001770 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    1770:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    1772:	4b05      	ldr	r3, [pc, #20]	; (1788 <PWM_1_init+0x18>)
    1774:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    1776:	4b05      	ldr	r3, [pc, #20]	; (178c <PWM_1_init+0x1c>)
    1778:	4798      	blx	r3
    177a:	4602      	mov	r2, r0
    177c:	4904      	ldr	r1, [pc, #16]	; (1790 <PWM_1_init+0x20>)
    177e:	4805      	ldr	r0, [pc, #20]	; (1794 <PWM_1_init+0x24>)
    1780:	4b05      	ldr	r3, [pc, #20]	; (1798 <PWM_1_init+0x28>)
    1782:	4798      	blx	r3
    1784:	bd08      	pop	{r3, pc}
    1786:	bf00      	nop
    1788:	00001755 	.word	0x00001755
    178c:	000031d9 	.word	0x000031d9
    1790:	40003c00 	.word	0x40003c00
    1794:	20003d8c 	.word	0x20003d8c
    1798:	00001c95 	.word	0x00001c95

0000179c <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    179c:	4a04      	ldr	r2, [pc, #16]	; (17b0 <PWM_2_CLOCK_init+0x14>)
    179e:	6993      	ldr	r3, [r2, #24]
    17a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    17a4:	6193      	str	r3, [r2, #24]
    17a6:	2240      	movs	r2, #64	; 0x40
    17a8:	4b02      	ldr	r3, [pc, #8]	; (17b4 <PWM_2_CLOCK_init+0x18>)
    17aa:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    17ae:	4770      	bx	lr
    17b0:	40000800 	.word	0x40000800
    17b4:	40001c00 	.word	0x40001c00

000017b8 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    17b8:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    17ba:	4b05      	ldr	r3, [pc, #20]	; (17d0 <PWM_2_init+0x18>)
    17bc:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    17be:	4b05      	ldr	r3, [pc, #20]	; (17d4 <PWM_2_init+0x1c>)
    17c0:	4798      	blx	r3
    17c2:	4602      	mov	r2, r0
    17c4:	4904      	ldr	r1, [pc, #16]	; (17d8 <PWM_2_init+0x20>)
    17c6:	4805      	ldr	r0, [pc, #20]	; (17dc <PWM_2_init+0x24>)
    17c8:	4b05      	ldr	r3, [pc, #20]	; (17e0 <PWM_2_init+0x28>)
    17ca:	4798      	blx	r3
    17cc:	bd08      	pop	{r3, pc}
    17ce:	bf00      	nop
    17d0:	0000179d 	.word	0x0000179d
    17d4:	000031d9 	.word	0x000031d9
    17d8:	4101a000 	.word	0x4101a000
    17dc:	20003c88 	.word	0x20003c88
    17e0:	00001c95 	.word	0x00001c95

000017e4 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    17e4:	4a04      	ldr	r2, [pc, #16]	; (17f8 <TIMER_3_CLOCK_init+0x14>)
    17e6:	6993      	ldr	r3, [r2, #24]
    17e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    17ec:	6193      	str	r3, [r2, #24]
    17ee:	2240      	movs	r2, #64	; 0x40
    17f0:	4b02      	ldr	r3, [pc, #8]	; (17fc <TIMER_3_CLOCK_init+0x18>)
    17f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    17f6:	4770      	bx	lr
    17f8:	40000800 	.word	0x40000800
    17fc:	40001c00 	.word	0x40001c00

00001800 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    1800:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    1802:	4b05      	ldr	r3, [pc, #20]	; (1818 <TIMER_3_init+0x18>)
    1804:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    1806:	4b05      	ldr	r3, [pc, #20]	; (181c <TIMER_3_init+0x1c>)
    1808:	4798      	blx	r3
    180a:	4602      	mov	r2, r0
    180c:	4904      	ldr	r1, [pc, #16]	; (1820 <TIMER_3_init+0x20>)
    180e:	4805      	ldr	r0, [pc, #20]	; (1824 <TIMER_3_init+0x24>)
    1810:	4b05      	ldr	r3, [pc, #20]	; (1828 <TIMER_3_init+0x28>)
    1812:	4798      	blx	r3
    1814:	bd08      	pop	{r3, pc}
    1816:	bf00      	nop
    1818:	000017e5 	.word	0x000017e5
    181c:	00002c91 	.word	0x00002c91
    1820:	41016000 	.word	0x41016000
    1824:	20003dac 	.word	0x20003dac
    1828:	00001db1 	.word	0x00001db1

0000182c <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    182c:	4a04      	ldr	r2, [pc, #16]	; (1840 <TIMER_4_CLOCK_init+0x14>)
    182e:	6993      	ldr	r3, [r2, #24]
    1830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1834:	6193      	str	r3, [r2, #24]
    1836:	2240      	movs	r2, #64	; 0x40
    1838:	4b02      	ldr	r3, [pc, #8]	; (1844 <TIMER_4_CLOCK_init+0x18>)
    183a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    183e:	4770      	bx	lr
    1840:	40000800 	.word	0x40000800
    1844:	40001c00 	.word	0x40001c00

00001848 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    1848:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    184a:	4b05      	ldr	r3, [pc, #20]	; (1860 <TIMER_4_init+0x18>)
    184c:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    184e:	4b05      	ldr	r3, [pc, #20]	; (1864 <TIMER_4_init+0x1c>)
    1850:	4798      	blx	r3
    1852:	4602      	mov	r2, r0
    1854:	4904      	ldr	r1, [pc, #16]	; (1868 <TIMER_4_init+0x20>)
    1856:	4805      	ldr	r0, [pc, #20]	; (186c <TIMER_4_init+0x24>)
    1858:	4b05      	ldr	r3, [pc, #20]	; (1870 <TIMER_4_init+0x28>)
    185a:	4798      	blx	r3
    185c:	bd08      	pop	{r3, pc}
    185e:	bf00      	nop
    1860:	0000182d 	.word	0x0000182d
    1864:	00002c91 	.word	0x00002c91
    1868:	41018000 	.word	0x41018000
    186c:	20003cf4 	.word	0x20003cf4
    1870:	00001db1 	.word	0x00001db1

00001874 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    1874:	4a04      	ldr	r2, [pc, #16]	; (1888 <TIMER_5_CLOCK_init+0x14>)
    1876:	69d3      	ldr	r3, [r2, #28]
    1878:	f043 0308 	orr.w	r3, r3, #8
    187c:	61d3      	str	r3, [r2, #28]
    187e:	2240      	movs	r2, #64	; 0x40
    1880:	4b02      	ldr	r3, [pc, #8]	; (188c <TIMER_5_CLOCK_init+0x18>)
    1882:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    1886:	4770      	bx	lr
    1888:	40000800 	.word	0x40000800
    188c:	40001c00 	.word	0x40001c00

00001890 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    1890:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    1892:	4b05      	ldr	r3, [pc, #20]	; (18a8 <TIMER_5_init+0x18>)
    1894:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    1896:	4b05      	ldr	r3, [pc, #20]	; (18ac <TIMER_5_init+0x1c>)
    1898:	4798      	blx	r3
    189a:	4602      	mov	r2, r0
    189c:	4904      	ldr	r1, [pc, #16]	; (18b0 <TIMER_5_init+0x20>)
    189e:	4805      	ldr	r0, [pc, #20]	; (18b4 <TIMER_5_init+0x24>)
    18a0:	4b05      	ldr	r3, [pc, #20]	; (18b8 <TIMER_5_init+0x28>)
    18a2:	4798      	blx	r3
    18a4:	bd08      	pop	{r3, pc}
    18a6:	bf00      	nop
    18a8:	00001875 	.word	0x00001875
    18ac:	00002c91 	.word	0x00002c91
    18b0:	42000c00 	.word	0x42000c00
    18b4:	20003d4c 	.word	0x20003d4c
    18b8:	00001db1 	.word	0x00001db1

000018bc <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    18bc:	4a04      	ldr	r2, [pc, #16]	; (18d0 <TIMER_6_CLOCK_init+0x14>)
    18be:	69d3      	ldr	r3, [r2, #28]
    18c0:	f043 0310 	orr.w	r3, r3, #16
    18c4:	61d3      	str	r3, [r2, #28]
    18c6:	2240      	movs	r2, #64	; 0x40
    18c8:	4b02      	ldr	r3, [pc, #8]	; (18d4 <TIMER_6_CLOCK_init+0x18>)
    18ca:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    18ce:	4770      	bx	lr
    18d0:	40000800 	.word	0x40000800
    18d4:	40001c00 	.word	0x40001c00

000018d8 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    18d8:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    18da:	4b05      	ldr	r3, [pc, #20]	; (18f0 <TIMER_6_init+0x18>)
    18dc:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    18de:	4b05      	ldr	r3, [pc, #20]	; (18f4 <TIMER_6_init+0x1c>)
    18e0:	4798      	blx	r3
    18e2:	4602      	mov	r2, r0
    18e4:	4904      	ldr	r1, [pc, #16]	; (18f8 <TIMER_6_init+0x20>)
    18e6:	4805      	ldr	r0, [pc, #20]	; (18fc <TIMER_6_init+0x24>)
    18e8:	4b05      	ldr	r3, [pc, #20]	; (1900 <TIMER_6_init+0x28>)
    18ea:	4798      	blx	r3
    18ec:	bd08      	pop	{r3, pc}
    18ee:	bf00      	nop
    18f0:	000018bd 	.word	0x000018bd
    18f4:	00002c91 	.word	0x00002c91
    18f8:	42001000 	.word	0x42001000
    18fc:	20003d6c 	.word	0x20003d6c
    1900:	00001db1 	.word	0x00001db1

00001904 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    1904:	4a04      	ldr	r2, [pc, #16]	; (1918 <TIMER_7_CLOCK_init+0x14>)
    1906:	6a13      	ldr	r3, [r2, #32]
    1908:	f043 0310 	orr.w	r3, r3, #16
    190c:	6213      	str	r3, [r2, #32]
    190e:	2240      	movs	r2, #64	; 0x40
    1910:	4b02      	ldr	r3, [pc, #8]	; (191c <TIMER_7_CLOCK_init+0x18>)
    1912:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1916:	4770      	bx	lr
    1918:	40000800 	.word	0x40000800
    191c:	40001c00 	.word	0x40001c00

00001920 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    1920:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    1922:	4b05      	ldr	r3, [pc, #20]	; (1938 <TIMER_7_init+0x18>)
    1924:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    1926:	4b05      	ldr	r3, [pc, #20]	; (193c <TIMER_7_init+0x1c>)
    1928:	4798      	blx	r3
    192a:	4602      	mov	r2, r0
    192c:	4904      	ldr	r1, [pc, #16]	; (1940 <TIMER_7_init+0x20>)
    192e:	4805      	ldr	r0, [pc, #20]	; (1944 <TIMER_7_init+0x24>)
    1930:	4b05      	ldr	r3, [pc, #20]	; (1948 <TIMER_7_init+0x28>)
    1932:	4798      	blx	r3
    1934:	bd08      	pop	{r3, pc}
    1936:	bf00      	nop
    1938:	00001905 	.word	0x00001905
    193c:	00002c91 	.word	0x00002c91
    1940:	43001000 	.word	0x43001000
    1944:	20003cc0 	.word	0x20003cc0
    1948:	00001db1 	.word	0x00001db1

0000194c <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    194c:	4a02      	ldr	r2, [pc, #8]	; (1958 <WDT_0_CLOCK_init+0xc>)
    194e:	6953      	ldr	r3, [r2, #20]
    1950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1954:	6153      	str	r3, [r2, #20]
    1956:	4770      	bx	lr
    1958:	40000800 	.word	0x40000800

0000195c <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    195c:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    195e:	4b0a      	ldr	r3, [pc, #40]	; (1988 <WDT_0_init+0x2c>)
    1960:	4798      	blx	r3
	ASSERT(wdt && hw);
    1962:	2252      	movs	r2, #82	; 0x52
    1964:	4909      	ldr	r1, [pc, #36]	; (198c <WDT_0_init+0x30>)
    1966:	2001      	movs	r0, #1
    1968:	4b09      	ldr	r3, [pc, #36]	; (1990 <WDT_0_init+0x34>)
    196a:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    196c:	4809      	ldr	r0, [pc, #36]	; (1994 <WDT_0_init+0x38>)
    196e:	4b0a      	ldr	r3, [pc, #40]	; (1998 <WDT_0_init+0x3c>)
    1970:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    1972:	4b0a      	ldr	r3, [pc, #40]	; (199c <WDT_0_init+0x40>)
    1974:	4798      	blx	r3

	if(0 == wdt_init(&WDT_0, WDT))
    1976:	b118      	cbz	r0, 1980 <WDT_0_init+0x24>
	{
		DEBUG_PRINT("WDT Initialised");
	}
	else
	{
		DEBUG_PRINT("WDT Failed to initialize");
    1978:	4809      	ldr	r0, [pc, #36]	; (19a0 <WDT_0_init+0x44>)
    197a:	4b0a      	ldr	r3, [pc, #40]	; (19a4 <WDT_0_init+0x48>)
    197c:	4798      	blx	r3
    197e:	bd08      	pop	{r3, pc}
		DEBUG_PRINT("WDT Initialised");
    1980:	4809      	ldr	r0, [pc, #36]	; (19a8 <WDT_0_init+0x4c>)
    1982:	4b08      	ldr	r3, [pc, #32]	; (19a4 <WDT_0_init+0x48>)
    1984:	4798      	blx	r3
    1986:	bd08      	pop	{r3, pc}
    1988:	0000194d 	.word	0x0000194d
    198c:	00006d10 	.word	0x00006d10
    1990:	00001df5 	.word	0x00001df5
    1994:	20003d14 	.word	0x20003d14
    1998:	40002000 	.word	0x40002000
    199c:	00003255 	.word	0x00003255
    19a0:	00006d3c 	.word	0x00006d3c
    19a4:	000010b5 	.word	0x000010b5
    19a8:	00006d2c 	.word	0x00006d2c

000019ac <system_init>:
	}
}

void system_init(void)
{
    19ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    19b0:	4b28      	ldr	r3, [pc, #160]	; (1a54 <system_init+0xa8>)
    19b2:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    19b4:	4b28      	ldr	r3, [pc, #160]	; (1a58 <system_init+0xac>)
    19b6:	4798      	blx	r3

	AC_0_init();
    19b8:	4b28      	ldr	r3, [pc, #160]	; (1a5c <system_init+0xb0>)
    19ba:	4798      	blx	r3

	ADC_0_init();
    19bc:	4b28      	ldr	r3, [pc, #160]	; (1a60 <system_init+0xb4>)
    19be:	4798      	blx	r3

	ADC_1_init();
    19c0:	4b28      	ldr	r3, [pc, #160]	; (1a64 <system_init+0xb8>)
    19c2:	4798      	blx	r3

	DAC_0_init();
    19c4:	4b28      	ldr	r3, [pc, #160]	; (1a68 <system_init+0xbc>)
    19c6:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    19c8:	4b28      	ldr	r3, [pc, #160]	; (1a6c <system_init+0xc0>)
    19ca:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    19cc:	4b28      	ldr	r3, [pc, #160]	; (1a70 <system_init+0xc4>)
    19ce:	4798      	blx	r3

	FLASH_0_init();
    19d0:	4b28      	ldr	r3, [pc, #160]	; (1a74 <system_init+0xc8>)
    19d2:	4798      	blx	r3

	SerialDebug_init();
    19d4:	4b28      	ldr	r3, [pc, #160]	; (1a78 <system_init+0xcc>)
    19d6:	4798      	blx	r3
	
	ModemData_init();
    19d8:	4b28      	ldr	r3, [pc, #160]	; (1a7c <system_init+0xd0>)
    19da:	4798      	blx	r3

	PWM_0_init();
    19dc:	4b28      	ldr	r3, [pc, #160]	; (1a80 <system_init+0xd4>)
    19de:	4798      	blx	r3

	PWM_1_init();
    19e0:	4b28      	ldr	r3, [pc, #160]	; (1a84 <system_init+0xd8>)
    19e2:	4798      	blx	r3

	PWM_2_init();
    19e4:	4b28      	ldr	r3, [pc, #160]	; (1a88 <system_init+0xdc>)
    19e6:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    19e8:	4c28      	ldr	r4, [pc, #160]	; (1a8c <system_init+0xe0>)
    19ea:	69a3      	ldr	r3, [r4, #24]
    19ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    19f0:	61a3      	str	r3, [r4, #24]
    19f2:	4f27      	ldr	r7, [pc, #156]	; (1a90 <system_init+0xe4>)
    19f4:	f04f 0840 	mov.w	r8, #64	; 0x40
    19f8:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    19fc:	4e25      	ldr	r6, [pc, #148]	; (1a94 <system_init+0xe8>)
    19fe:	47b0      	blx	r6
    1a00:	4602      	mov	r2, r0
    1a02:	4925      	ldr	r1, [pc, #148]	; (1a98 <system_init+0xec>)
    1a04:	4825      	ldr	r0, [pc, #148]	; (1a9c <system_init+0xf0>)
    1a06:	4d26      	ldr	r5, [pc, #152]	; (1aa0 <system_init+0xf4>)
    1a08:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    1a0a:	69e3      	ldr	r3, [r4, #28]
    1a0c:	f043 0320 	orr.w	r3, r3, #32
    1a10:	61e3      	str	r3, [r4, #28]
    1a12:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    1a16:	47b0      	blx	r6
    1a18:	4602      	mov	r2, r0
    1a1a:	4922      	ldr	r1, [pc, #136]	; (1aa4 <system_init+0xf8>)
    1a1c:	4822      	ldr	r0, [pc, #136]	; (1aa8 <system_init+0xfc>)
    1a1e:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1a20:	69e3      	ldr	r3, [r4, #28]
    1a22:	ea43 0308 	orr.w	r3, r3, r8
    1a26:	61e3      	str	r3, [r4, #28]
    1a28:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    1a2c:	47b0      	blx	r6
    1a2e:	4602      	mov	r2, r0
    1a30:	491e      	ldr	r1, [pc, #120]	; (1aac <system_init+0x100>)
    1a32:	481f      	ldr	r0, [pc, #124]	; (1ab0 <system_init+0x104>)
    1a34:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    1a36:	4b1f      	ldr	r3, [pc, #124]	; (1ab4 <system_init+0x108>)
    1a38:	4798      	blx	r3

	TIMER_4_init();
    1a3a:	4b1f      	ldr	r3, [pc, #124]	; (1ab8 <system_init+0x10c>)
    1a3c:	4798      	blx	r3

	TIMER_5_init();
    1a3e:	4b1f      	ldr	r3, [pc, #124]	; (1abc <system_init+0x110>)
    1a40:	4798      	blx	r3

	TIMER_6_init();
    1a42:	4b1f      	ldr	r3, [pc, #124]	; (1ac0 <system_init+0x114>)
    1a44:	4798      	blx	r3

	TIMER_7_init();
    1a46:	4b1f      	ldr	r3, [pc, #124]	; (1ac4 <system_init+0x118>)
    1a48:	4798      	blx	r3
	
	WDT_0_init();
    1a4a:	4b1f      	ldr	r3, [pc, #124]	; (1ac8 <system_init+0x11c>)
    1a4c:	4798      	blx	r3
    1a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a52:	bf00      	nop
    1a54:	00002141 	.word	0x00002141
    1a58:	000016f9 	.word	0x000016f9
    1a5c:	00001315 	.word	0x00001315
    1a60:	000014cd 	.word	0x000014cd
    1a64:	00001515 	.word	0x00001515
    1a68:	00001555 	.word	0x00001555
    1a6c:	00001575 	.word	0x00001575
    1a70:	0000159d 	.word	0x0000159d
    1a74:	000015c9 	.word	0x000015c9
    1a78:	000016dd 	.word	0x000016dd
    1a7c:	00001655 	.word	0x00001655
    1a80:	00001729 	.word	0x00001729
    1a84:	00001771 	.word	0x00001771
    1a88:	000017b9 	.word	0x000017b9
    1a8c:	40000800 	.word	0x40000800
    1a90:	40001c00 	.word	0x40001c00
    1a94:	000031d1 	.word	0x000031d1
    1a98:	4101c000 	.word	0x4101c000
    1a9c:	20003dcc 	.word	0x20003dcc
    1aa0:	00001db1 	.word	0x00001db1
    1aa4:	42001400 	.word	0x42001400
    1aa8:	20003d2c 	.word	0x20003d2c
    1aac:	42001800 	.word	0x42001800
    1ab0:	20003c4c 	.word	0x20003c4c
    1ab4:	00001801 	.word	0x00001801
    1ab8:	00001849 	.word	0x00001849
    1abc:	00001891 	.word	0x00001891
    1ac0:	000018d9 	.word	0x000018d9
    1ac4:	00001921 	.word	0x00001921
    1ac8:	0000195d 	.word	0x0000195d

00001acc <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    1acc:	b538      	push	{r3, r4, r5, lr}
    1ace:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1ad0:	4605      	mov	r5, r0
    1ad2:	b158      	cbz	r0, 1aec <ac_sync_init+0x20>
    1ad4:	1c08      	adds	r0, r1, #0
    1ad6:	bf18      	it	ne
    1ad8:	2001      	movne	r0, #1
    1ada:	223b      	movs	r2, #59	; 0x3b
    1adc:	4904      	ldr	r1, [pc, #16]	; (1af0 <ac_sync_init+0x24>)
    1ade:	4b05      	ldr	r3, [pc, #20]	; (1af4 <ac_sync_init+0x28>)
    1ae0:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    1ae2:	4621      	mov	r1, r4
    1ae4:	4628      	mov	r0, r5
    1ae6:	4b04      	ldr	r3, [pc, #16]	; (1af8 <ac_sync_init+0x2c>)
    1ae8:	4798      	blx	r3
}
    1aea:	bd38      	pop	{r3, r4, r5, pc}
    1aec:	2000      	movs	r0, #0
    1aee:	e7f4      	b.n	1ada <ac_sync_init+0xe>
    1af0:	00006d58 	.word	0x00006d58
    1af4:	00001df5 	.word	0x00001df5
    1af8:	00002009 	.word	0x00002009

00001afc <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1afc:	b538      	push	{r3, r4, r5, lr}
    1afe:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1b00:	4605      	mov	r5, r0
    1b02:	b158      	cbz	r0, 1b1c <adc_sync_init+0x20>
    1b04:	1c08      	adds	r0, r1, #0
    1b06:	bf18      	it	ne
    1b08:	2001      	movne	r0, #1
    1b0a:	2243      	movs	r2, #67	; 0x43
    1b0c:	4904      	ldr	r1, [pc, #16]	; (1b20 <adc_sync_init+0x24>)
    1b0e:	4b05      	ldr	r3, [pc, #20]	; (1b24 <adc_sync_init+0x28>)
    1b10:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    1b12:	4621      	mov	r1, r4
    1b14:	4628      	mov	r0, r5
    1b16:	4b04      	ldr	r3, [pc, #16]	; (1b28 <adc_sync_init+0x2c>)
    1b18:	4798      	blx	r3
}
    1b1a:	bd38      	pop	{r3, r4, r5, pc}
    1b1c:	2000      	movs	r0, #0
    1b1e:	e7f4      	b.n	1b0a <adc_sync_init+0xe>
    1b20:	00006d74 	.word	0x00006d74
    1b24:	00001df5 	.word	0x00001df5
    1b28:	000020e1 	.word	0x000020e1

00001b2c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1b2c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1b30:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1b32:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1b34:	f3bf 8f5f 	dmb	sy
    1b38:	4770      	bx	lr

00001b3a <atomic_leave_critical>:
    1b3a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1b3e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1b40:	f383 8810 	msr	PRIMASK, r3
    1b44:	4770      	bx	lr
	...

00001b48 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1b48:	b538      	push	{r3, r4, r5, lr}
    1b4a:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    1b4c:	4604      	mov	r4, r0
    1b4e:	b198      	cbz	r0, 1b78 <dac_sync_init+0x30>
    1b50:	1c08      	adds	r0, r1, #0
    1b52:	bf18      	it	ne
    1b54:	2001      	movne	r0, #1
    1b56:	223c      	movs	r2, #60	; 0x3c
    1b58:	4908      	ldr	r1, [pc, #32]	; (1b7c <dac_sync_init+0x34>)
    1b5a:	4b09      	ldr	r3, [pc, #36]	; (1b80 <dac_sync_init+0x38>)
    1b5c:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    1b5e:	4629      	mov	r1, r5
    1b60:	4620      	mov	r0, r4
    1b62:	4b08      	ldr	r3, [pc, #32]	; (1b84 <dac_sync_init+0x3c>)
    1b64:	4798      	blx	r3
	if (rc) {
    1b66:	4602      	mov	r2, r0
    1b68:	b920      	cbnz	r0, 1b74 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    1b6a:	2300      	movs	r3, #0
    1b6c:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    1b6e:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    1b70:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    1b72:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    1b74:	4610      	mov	r0, r2
    1b76:	bd38      	pop	{r3, r4, r5, pc}
    1b78:	2000      	movs	r0, #0
    1b7a:	e7ec      	b.n	1b56 <dac_sync_init+0xe>
    1b7c:	00006d90 	.word	0x00006d90
    1b80:	00001df5 	.word	0x00001df5
    1b84:	000021f9 	.word	0x000021f9

00001b88 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1b88:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1b8a:	4b02      	ldr	r3, [pc, #8]	; (1b94 <delay_init+0xc>)
    1b8c:	6018      	str	r0, [r3, #0]
    1b8e:	4b02      	ldr	r3, [pc, #8]	; (1b98 <delay_init+0x10>)
    1b90:	4798      	blx	r3
    1b92:	bd08      	pop	{r3, pc}
    1b94:	200004c4 	.word	0x200004c4
    1b98:	0000298d 	.word	0x0000298d

00001b9c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1b9c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1b9e:	4b04      	ldr	r3, [pc, #16]	; (1bb0 <delay_ms+0x14>)
    1ba0:	681c      	ldr	r4, [r3, #0]
    1ba2:	4b04      	ldr	r3, [pc, #16]	; (1bb4 <delay_ms+0x18>)
    1ba4:	4798      	blx	r3
    1ba6:	4601      	mov	r1, r0
    1ba8:	4620      	mov	r0, r4
    1baa:	4b03      	ldr	r3, [pc, #12]	; (1bb8 <delay_ms+0x1c>)
    1bac:	4798      	blx	r3
    1bae:	bd10      	pop	{r4, pc}
    1bb0:	200004c4 	.word	0x200004c4
    1bb4:	00002135 	.word	0x00002135
    1bb8:	000029a1 	.word	0x000029a1

00001bbc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1bbc:	b508      	push	{r3, lr}
	return _event_system_init();
    1bbe:	4b01      	ldr	r3, [pc, #4]	; (1bc4 <event_system_init+0x8>)
    1bc0:	4798      	blx	r3
}
    1bc2:	bd08      	pop	{r3, pc}
    1bc4:	00002435 	.word	0x00002435

00001bc8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1bc8:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1bca:	4b0c      	ldr	r3, [pc, #48]	; (1bfc <process_ext_irq+0x34>)
    1bcc:	685c      	ldr	r4, [r3, #4]
    1bce:	42a0      	cmp	r0, r4
    1bd0:	d00e      	beq.n	1bf0 <process_ext_irq+0x28>
    1bd2:	2301      	movs	r3, #1
    1bd4:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    1bd6:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    1bd8:	25ff      	movs	r5, #255	; 0xff
    1bda:	e003      	b.n	1be4 <process_ext_irq+0x1c>
    1bdc:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    1bde:	185a      	adds	r2, r3, r1
    1be0:	0852      	lsrs	r2, r2, #1
    1be2:	d104      	bne.n	1bee <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    1be4:	42a0      	cmp	r0, r4
    1be6:	d9f9      	bls.n	1bdc <process_ext_irq+0x14>
	while (upper >= lower) {
    1be8:	b13b      	cbz	r3, 1bfa <process_ext_irq+0x32>
			lower = middle + 1;
    1bea:	4631      	mov	r1, r6
    1bec:	e7f7      	b.n	1bde <process_ext_irq+0x16>
    1bee:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    1bf0:	4b02      	ldr	r3, [pc, #8]	; (1bfc <process_ext_irq+0x34>)
    1bf2:	681b      	ldr	r3, [r3, #0]
    1bf4:	b10b      	cbz	r3, 1bfa <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    1bf6:	4798      	blx	r3
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
    1bfa:	bd70      	pop	{r4, r5, r6, pc}
    1bfc:	200004c8 	.word	0x200004c8

00001c00 <ext_irq_init>:
{
    1c00:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    1c02:	4b05      	ldr	r3, [pc, #20]	; (1c18 <ext_irq_init+0x18>)
    1c04:	f04f 32ff 	mov.w	r2, #4294967295
    1c08:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1c0a:	2200      	movs	r2, #0
    1c0c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    1c0e:	4803      	ldr	r0, [pc, #12]	; (1c1c <ext_irq_init+0x1c>)
    1c10:	4b03      	ldr	r3, [pc, #12]	; (1c20 <ext_irq_init+0x20>)
    1c12:	4798      	blx	r3
}
    1c14:	bd08      	pop	{r3, pc}
    1c16:	bf00      	nop
    1c18:	200004c8 	.word	0x200004c8
    1c1c:	00001bc9 	.word	0x00001bc9
    1c20:	000023b5 	.word	0x000023b5

00001c24 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1c24:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1c26:	6943      	ldr	r3, [r0, #20]
    1c28:	b103      	cbz	r3, 1c2c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1c2a:	4798      	blx	r3
    1c2c:	bd08      	pop	{r3, pc}

00001c2e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    1c2e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1c30:	6983      	ldr	r3, [r0, #24]
    1c32:	b103      	cbz	r3, 1c36 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1c34:	4798      	blx	r3
    1c36:	bd08      	pop	{r3, pc}

00001c38 <flash_init>:
{
    1c38:	b538      	push	{r3, r4, r5, lr}
    1c3a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1c3c:	4604      	mov	r4, r0
    1c3e:	b190      	cbz	r0, 1c66 <flash_init+0x2e>
    1c40:	1c08      	adds	r0, r1, #0
    1c42:	bf18      	it	ne
    1c44:	2001      	movne	r0, #1
    1c46:	2242      	movs	r2, #66	; 0x42
    1c48:	4908      	ldr	r1, [pc, #32]	; (1c6c <flash_init+0x34>)
    1c4a:	4b09      	ldr	r3, [pc, #36]	; (1c70 <flash_init+0x38>)
    1c4c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    1c4e:	4629      	mov	r1, r5
    1c50:	4620      	mov	r0, r4
    1c52:	4b08      	ldr	r3, [pc, #32]	; (1c74 <flash_init+0x3c>)
    1c54:	4798      	blx	r3
	if (rc) {
    1c56:	4603      	mov	r3, r0
    1c58:	b918      	cbnz	r0, 1c62 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1c5a:	4a07      	ldr	r2, [pc, #28]	; (1c78 <flash_init+0x40>)
    1c5c:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    1c5e:	4a07      	ldr	r2, [pc, #28]	; (1c7c <flash_init+0x44>)
    1c60:	6062      	str	r2, [r4, #4]
}
    1c62:	4618      	mov	r0, r3
    1c64:	bd38      	pop	{r3, r4, r5, pc}
    1c66:	2000      	movs	r0, #0
    1c68:	e7ed      	b.n	1c46 <flash_init+0xe>
    1c6a:	bf00      	nop
    1c6c:	00006dac 	.word	0x00006dac
    1c70:	00001df5 	.word	0x00001df5
    1c74:	00002571 	.word	0x00002571
    1c78:	00001c25 	.word	0x00001c25
    1c7c:	00001c2f 	.word	0x00001c2f

00001c80 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1c80:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1c82:	6943      	ldr	r3, [r0, #20]
    1c84:	b103      	cbz	r3, 1c88 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    1c86:	4798      	blx	r3
    1c88:	bd08      	pop	{r3, pc}

00001c8a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1c8a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1c8c:	6983      	ldr	r3, [r0, #24]
    1c8e:	b103      	cbz	r3, 1c92 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1c90:	4798      	blx	r3
    1c92:	bd08      	pop	{r3, pc}

00001c94 <pwm_init>:
{
    1c94:	b538      	push	{r3, r4, r5, lr}
    1c96:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1c98:	4604      	mov	r4, r0
    1c9a:	b180      	cbz	r0, 1cbe <pwm_init+0x2a>
    1c9c:	1c08      	adds	r0, r1, #0
    1c9e:	bf18      	it	ne
    1ca0:	2001      	movne	r0, #1
    1ca2:	223d      	movs	r2, #61	; 0x3d
    1ca4:	4907      	ldr	r1, [pc, #28]	; (1cc4 <pwm_init+0x30>)
    1ca6:	4b08      	ldr	r3, [pc, #32]	; (1cc8 <pwm_init+0x34>)
    1ca8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1caa:	4629      	mov	r1, r5
    1cac:	4620      	mov	r0, r4
    1cae:	4b07      	ldr	r3, [pc, #28]	; (1ccc <pwm_init+0x38>)
    1cb0:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1cb2:	4b07      	ldr	r3, [pc, #28]	; (1cd0 <pwm_init+0x3c>)
    1cb4:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1cb6:	4b07      	ldr	r3, [pc, #28]	; (1cd4 <pwm_init+0x40>)
    1cb8:	6063      	str	r3, [r4, #4]
}
    1cba:	2000      	movs	r0, #0
    1cbc:	bd38      	pop	{r3, r4, r5, pc}
    1cbe:	2000      	movs	r0, #0
    1cc0:	e7ef      	b.n	1ca2 <pwm_init+0xe>
    1cc2:	bf00      	nop
    1cc4:	00006dc4 	.word	0x00006dc4
    1cc8:	00001df5 	.word	0x00001df5
    1ccc:	000030b9 	.word	0x000030b9
    1cd0:	00001c81 	.word	0x00001c81
    1cd4:	00001c8b 	.word	0x00001c8b

00001cd8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cda:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1cdc:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1cde:	b12f      	cbz	r7, 1cec <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1ce0:	688d      	ldr	r5, [r1, #8]
    1ce2:	463c      	mov	r4, r7
    1ce4:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1ce6:	f1c2 0e01 	rsb	lr, r2, #1
    1cea:	e00b      	b.n	1d04 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1cec:	4b0e      	ldr	r3, [pc, #56]	; (1d28 <timer_add_timer_task+0x50>)
    1cee:	4798      	blx	r3
		return;
    1cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1cf2:	4473      	add	r3, lr
    1cf4:	68a0      	ldr	r0, [r4, #8]
    1cf6:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1cf8:	42ab      	cmp	r3, r5
    1cfa:	d20a      	bcs.n	1d12 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1cfc:	6823      	ldr	r3, [r4, #0]
    1cfe:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1d00:	b153      	cbz	r3, 1d18 <timer_add_timer_task+0x40>
    1d02:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1d04:	6863      	ldr	r3, [r4, #4]
    1d06:	4293      	cmp	r3, r2
    1d08:	d8f3      	bhi.n	1cf2 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1d0a:	68a0      	ldr	r0, [r4, #8]
    1d0c:	4403      	add	r3, r0
    1d0e:	1a9b      	subs	r3, r3, r2
    1d10:	e7f2      	b.n	1cf8 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1d12:	42a7      	cmp	r7, r4
    1d14:	d004      	beq.n	1d20 <timer_add_timer_task+0x48>
    1d16:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1d18:	4620      	mov	r0, r4
    1d1a:	4b04      	ldr	r3, [pc, #16]	; (1d2c <timer_add_timer_task+0x54>)
    1d1c:	4798      	blx	r3
    1d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1d20:	4660      	mov	r0, ip
    1d22:	4b01      	ldr	r3, [pc, #4]	; (1d28 <timer_add_timer_task+0x50>)
    1d24:	4798      	blx	r3
    1d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d28:	00001e1d 	.word	0x00001e1d
    1d2c:	00001e49 	.word	0x00001e49

00001d30 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1d34:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1d36:	6907      	ldr	r7, [r0, #16]
    1d38:	3701      	adds	r7, #1
    1d3a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1d3c:	7e03      	ldrb	r3, [r0, #24]
    1d3e:	f013 0f01 	tst.w	r3, #1
    1d42:	d113      	bne.n	1d6c <timer_process_counted+0x3c>
    1d44:	7e03      	ldrb	r3, [r0, #24]
    1d46:	f013 0f02 	tst.w	r3, #2
    1d4a:	d10f      	bne.n	1d6c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1d4c:	b354      	cbz	r4, 1da4 <timer_process_counted+0x74>
    1d4e:	6863      	ldr	r3, [r4, #4]
    1d50:	1afb      	subs	r3, r7, r3
    1d52:	68a2      	ldr	r2, [r4, #8]
    1d54:	4293      	cmp	r3, r2
    1d56:	d307      	bcc.n	1d68 <timer_process_counted+0x38>
    1d58:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1d5a:	f100 0814 	add.w	r8, r0, #20
    1d5e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1da8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1d62:	f8df a048 	ldr.w	sl, [pc, #72]	; 1dac <timer_process_counted+0x7c>
    1d66:	e012      	b.n	1d8e <timer_process_counted+0x5e>
    1d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1d6c:	7e03      	ldrb	r3, [r0, #24]
    1d6e:	f043 0302 	orr.w	r3, r3, #2
    1d72:	7603      	strb	r3, [r0, #24]
		return;
    1d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d78:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1d7a:	68e3      	ldr	r3, [r4, #12]
    1d7c:	4620      	mov	r0, r4
    1d7e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1d80:	b185      	cbz	r5, 1da4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1d82:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1d84:	686b      	ldr	r3, [r5, #4]
    1d86:	1afb      	subs	r3, r7, r3
    1d88:	68aa      	ldr	r2, [r5, #8]
    1d8a:	4293      	cmp	r3, r2
    1d8c:	d30a      	bcc.n	1da4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1d8e:	4640      	mov	r0, r8
    1d90:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1d92:	7c23      	ldrb	r3, [r4, #16]
    1d94:	2b01      	cmp	r3, #1
    1d96:	d1ef      	bne.n	1d78 <timer_process_counted+0x48>
			tmp->time_label = time;
    1d98:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1d9a:	463a      	mov	r2, r7
    1d9c:	4621      	mov	r1, r4
    1d9e:	4640      	mov	r0, r8
    1da0:	47d0      	blx	sl
    1da2:	e7e9      	b.n	1d78 <timer_process_counted+0x48>
    1da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1da8:	00001e51 	.word	0x00001e51
    1dac:	00001cd9 	.word	0x00001cd9

00001db0 <timer_init>:
{
    1db0:	b570      	push	{r4, r5, r6, lr}
    1db2:	460e      	mov	r6, r1
    1db4:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    1db6:	4604      	mov	r4, r0
    1db8:	b190      	cbz	r0, 1de0 <timer_init+0x30>
    1dba:	b199      	cbz	r1, 1de4 <timer_init+0x34>
    1dbc:	1c10      	adds	r0, r2, #0
    1dbe:	bf18      	it	ne
    1dc0:	2001      	movne	r0, #1
    1dc2:	2245      	movs	r2, #69	; 0x45
    1dc4:	4908      	ldr	r1, [pc, #32]	; (1de8 <timer_init+0x38>)
    1dc6:	4b09      	ldr	r3, [pc, #36]	; (1dec <timer_init+0x3c>)
    1dc8:	4798      	blx	r3
	descr->func = func;
    1dca:	4620      	mov	r0, r4
    1dcc:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1dd0:	682b      	ldr	r3, [r5, #0]
    1dd2:	4631      	mov	r1, r6
    1dd4:	4798      	blx	r3
	descr->time                           = 0;
    1dd6:	2000      	movs	r0, #0
    1dd8:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1dda:	4b05      	ldr	r3, [pc, #20]	; (1df0 <timer_init+0x40>)
    1ddc:	6063      	str	r3, [r4, #4]
}
    1dde:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1de0:	2000      	movs	r0, #0
    1de2:	e7ee      	b.n	1dc2 <timer_init+0x12>
    1de4:	2000      	movs	r0, #0
    1de6:	e7ec      	b.n	1dc2 <timer_init+0x12>
    1de8:	00006ddc 	.word	0x00006ddc
    1dec:	00001df5 	.word	0x00001df5
    1df0:	00001d31 	.word	0x00001d31

00001df4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1df4:	b900      	cbnz	r0, 1df8 <assert+0x4>
		__asm("BKPT #0");
    1df6:	be00      	bkpt	0x0000
    1df8:	4770      	bx	lr

00001dfa <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1dfa:	6803      	ldr	r3, [r0, #0]
    1dfc:	b14b      	cbz	r3, 1e12 <is_list_element+0x18>
		if (it == element) {
    1dfe:	428b      	cmp	r3, r1
    1e00:	d009      	beq.n	1e16 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1e02:	681b      	ldr	r3, [r3, #0]
    1e04:	b11b      	cbz	r3, 1e0e <is_list_element+0x14>
		if (it == element) {
    1e06:	4299      	cmp	r1, r3
    1e08:	d1fb      	bne.n	1e02 <is_list_element+0x8>
			return true;
    1e0a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1e0c:	4770      	bx	lr
	return false;
    1e0e:	2000      	movs	r0, #0
    1e10:	4770      	bx	lr
    1e12:	2000      	movs	r0, #0
    1e14:	4770      	bx	lr
			return true;
    1e16:	2001      	movs	r0, #1
    1e18:	4770      	bx	lr
	...

00001e1c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1e1c:	b538      	push	{r3, r4, r5, lr}
    1e1e:	4604      	mov	r4, r0
    1e20:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1e22:	4b06      	ldr	r3, [pc, #24]	; (1e3c <list_insert_as_head+0x20>)
    1e24:	4798      	blx	r3
    1e26:	f080 0001 	eor.w	r0, r0, #1
    1e2a:	2243      	movs	r2, #67	; 0x43
    1e2c:	4904      	ldr	r1, [pc, #16]	; (1e40 <list_insert_as_head+0x24>)
    1e2e:	b2c0      	uxtb	r0, r0
    1e30:	4b04      	ldr	r3, [pc, #16]	; (1e44 <list_insert_as_head+0x28>)
    1e32:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1e34:	6823      	ldr	r3, [r4, #0]
    1e36:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1e38:	6025      	str	r5, [r4, #0]
    1e3a:	bd38      	pop	{r3, r4, r5, pc}
    1e3c:	00001dfb 	.word	0x00001dfb
    1e40:	00006df4 	.word	0x00006df4
    1e44:	00001df5 	.word	0x00001df5

00001e48 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1e48:	6803      	ldr	r3, [r0, #0]
    1e4a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1e4c:	6001      	str	r1, [r0, #0]
    1e4e:	4770      	bx	lr

00001e50 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1e50:	6803      	ldr	r3, [r0, #0]
    1e52:	b10b      	cbz	r3, 1e58 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1e54:	681a      	ldr	r2, [r3, #0]
    1e56:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1e58:	4618      	mov	r0, r3
    1e5a:	4770      	bx	lr

00001e5c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1e5c:	b570      	push	{r4, r5, r6, lr}
    1e5e:	460e      	mov	r6, r1
    1e60:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1e62:	4604      	mov	r4, r0
    1e64:	b178      	cbz	r0, 1e86 <ringbuffer_init+0x2a>
    1e66:	b181      	cbz	r1, 1e8a <ringbuffer_init+0x2e>
    1e68:	b1a2      	cbz	r2, 1e94 <ringbuffer_init+0x38>
    1e6a:	2001      	movs	r0, #1
    1e6c:	2232      	movs	r2, #50	; 0x32
    1e6e:	490d      	ldr	r1, [pc, #52]	; (1ea4 <ringbuffer_init+0x48>)
    1e70:	4b0d      	ldr	r3, [pc, #52]	; (1ea8 <ringbuffer_init+0x4c>)
    1e72:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1e74:	1e6b      	subs	r3, r5, #1
    1e76:	421d      	tst	r5, r3
    1e78:	d109      	bne.n	1e8e <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1e7a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1e7c:	2000      	movs	r0, #0
    1e7e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1e80:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1e82:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1e84:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1e86:	2000      	movs	r0, #0
    1e88:	e7f0      	b.n	1e6c <ringbuffer_init+0x10>
    1e8a:	2000      	movs	r0, #0
    1e8c:	e7ee      	b.n	1e6c <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1e8e:	f06f 000c 	mvn.w	r0, #12
    1e92:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1e94:	2232      	movs	r2, #50	; 0x32
    1e96:	4903      	ldr	r1, [pc, #12]	; (1ea4 <ringbuffer_init+0x48>)
    1e98:	2000      	movs	r0, #0
    1e9a:	4b03      	ldr	r3, [pc, #12]	; (1ea8 <ringbuffer_init+0x4c>)
    1e9c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1e9e:	1e6b      	subs	r3, r5, #1
    1ea0:	e7eb      	b.n	1e7a <ringbuffer_init+0x1e>
    1ea2:	bf00      	nop
    1ea4:	00006e14 	.word	0x00006e14
    1ea8:	00001df5 	.word	0x00001df5

00001eac <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1eac:	b538      	push	{r3, r4, r5, lr}
    1eae:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1eb0:	4604      	mov	r4, r0
    1eb2:	b1a0      	cbz	r0, 1ede <ringbuffer_get+0x32>
    1eb4:	1c08      	adds	r0, r1, #0
    1eb6:	bf18      	it	ne
    1eb8:	2001      	movne	r0, #1
    1eba:	224a      	movs	r2, #74	; 0x4a
    1ebc:	490a      	ldr	r1, [pc, #40]	; (1ee8 <ringbuffer_get+0x3c>)
    1ebe:	4b0b      	ldr	r3, [pc, #44]	; (1eec <ringbuffer_get+0x40>)
    1ec0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1ec2:	68a3      	ldr	r3, [r4, #8]
    1ec4:	68e2      	ldr	r2, [r4, #12]
    1ec6:	429a      	cmp	r2, r3
    1ec8:	d00b      	beq.n	1ee2 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1eca:	6862      	ldr	r2, [r4, #4]
    1ecc:	4013      	ands	r3, r2
    1ece:	6822      	ldr	r2, [r4, #0]
    1ed0:	5cd3      	ldrb	r3, [r2, r3]
    1ed2:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1ed4:	68a3      	ldr	r3, [r4, #8]
    1ed6:	3301      	adds	r3, #1
    1ed8:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1eda:	2000      	movs	r0, #0
    1edc:	bd38      	pop	{r3, r4, r5, pc}
    1ede:	2000      	movs	r0, #0
    1ee0:	e7eb      	b.n	1eba <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    1ee2:	f06f 0009 	mvn.w	r0, #9
}
    1ee6:	bd38      	pop	{r3, r4, r5, pc}
    1ee8:	00006e14 	.word	0x00006e14
    1eec:	00001df5 	.word	0x00001df5

00001ef0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1ef0:	b538      	push	{r3, r4, r5, lr}
    1ef2:	460d      	mov	r5, r1
	ASSERT(rb);
    1ef4:	4604      	mov	r4, r0
    1ef6:	225b      	movs	r2, #91	; 0x5b
    1ef8:	490b      	ldr	r1, [pc, #44]	; (1f28 <ringbuffer_put+0x38>)
    1efa:	3000      	adds	r0, #0
    1efc:	bf18      	it	ne
    1efe:	2001      	movne	r0, #1
    1f00:	4b0a      	ldr	r3, [pc, #40]	; (1f2c <ringbuffer_put+0x3c>)
    1f02:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1f04:	68e3      	ldr	r3, [r4, #12]
    1f06:	6862      	ldr	r2, [r4, #4]
    1f08:	4013      	ands	r3, r2
    1f0a:	6822      	ldr	r2, [r4, #0]
    1f0c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1f0e:	68e3      	ldr	r3, [r4, #12]
    1f10:	6861      	ldr	r1, [r4, #4]
    1f12:	68a2      	ldr	r2, [r4, #8]
    1f14:	1a9a      	subs	r2, r3, r2
    1f16:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1f18:	bf84      	itt	hi
    1f1a:	1a59      	subhi	r1, r3, r1
    1f1c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1f1e:	3301      	adds	r3, #1
    1f20:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1f22:	2000      	movs	r0, #0
    1f24:	bd38      	pop	{r3, r4, r5, pc}
    1f26:	bf00      	nop
    1f28:	00006e14 	.word	0x00006e14
    1f2c:	00001df5 	.word	0x00001df5

00001f30 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1f30:	b510      	push	{r4, lr}
	ASSERT(rb);
    1f32:	4604      	mov	r4, r0
    1f34:	2271      	movs	r2, #113	; 0x71
    1f36:	4905      	ldr	r1, [pc, #20]	; (1f4c <ringbuffer_num+0x1c>)
    1f38:	3000      	adds	r0, #0
    1f3a:	bf18      	it	ne
    1f3c:	2001      	movne	r0, #1
    1f3e:	4b04      	ldr	r3, [pc, #16]	; (1f50 <ringbuffer_num+0x20>)
    1f40:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1f42:	68e0      	ldr	r0, [r4, #12]
    1f44:	68a3      	ldr	r3, [r4, #8]
}
    1f46:	1ac0      	subs	r0, r0, r3
    1f48:	bd10      	pop	{r4, pc}
    1f4a:	bf00      	nop
    1f4c:	00006e14 	.word	0x00006e14
    1f50:	00001df5 	.word	0x00001df5

00001f54 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    1f54:	b510      	push	{r4, lr}
	ASSERT(rb);
    1f56:	4604      	mov	r4, r0
    1f58:	227b      	movs	r2, #123	; 0x7b
    1f5a:	4905      	ldr	r1, [pc, #20]	; (1f70 <ringbuffer_flush+0x1c>)
    1f5c:	3000      	adds	r0, #0
    1f5e:	bf18      	it	ne
    1f60:	2001      	movne	r0, #1
    1f62:	4b04      	ldr	r3, [pc, #16]	; (1f74 <ringbuffer_flush+0x20>)
    1f64:	4798      	blx	r3

	rb->read_index = rb->write_index;
    1f66:	68e3      	ldr	r3, [r4, #12]
    1f68:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    1f6a:	2000      	movs	r0, #0
    1f6c:	bd10      	pop	{r4, pc}
    1f6e:	bf00      	nop
    1f70:	00006e14 	.word	0x00006e14
    1f74:	00001df5 	.word	0x00001df5

00001f78 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1f78:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1f7a:	4a06      	ldr	r2, [pc, #24]	; (1f94 <_sbrk+0x1c>)
    1f7c:	6812      	ldr	r2, [r2, #0]
    1f7e:	b122      	cbz	r2, 1f8a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1f80:	4a04      	ldr	r2, [pc, #16]	; (1f94 <_sbrk+0x1c>)
    1f82:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1f84:	4403      	add	r3, r0
    1f86:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1f88:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1f8a:	4903      	ldr	r1, [pc, #12]	; (1f98 <_sbrk+0x20>)
    1f8c:	4a01      	ldr	r2, [pc, #4]	; (1f94 <_sbrk+0x1c>)
    1f8e:	6011      	str	r1, [r2, #0]
    1f90:	e7f6      	b.n	1f80 <_sbrk+0x8>
    1f92:	bf00      	nop
    1f94:	200004d0 	.word	0x200004d0
    1f98:	20013e00 	.word	0x20013e00

00001f9c <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    1f9c:	b510      	push	{r4, lr}
    1f9e:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    1fa0:	f44f 7281 	mov.w	r2, #258	; 0x102
    1fa4:	4915      	ldr	r1, [pc, #84]	; (1ffc <_ac_init+0x60>)
    1fa6:	4816      	ldr	r0, [pc, #88]	; (2000 <_ac_init+0x64>)
    1fa8:	4284      	cmp	r4, r0
    1faa:	bf14      	ite	ne
    1fac:	2000      	movne	r0, #0
    1fae:	2001      	moveq	r0, #1
    1fb0:	4b14      	ldr	r3, [pc, #80]	; (2004 <_ac_init+0x68>)
    1fb2:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1fb4:	6a23      	ldr	r3, [r4, #32]
    1fb6:	f013 0f01 	tst.w	r3, #1
    1fba:	d1fb      	bne.n	1fb4 <_ac_init+0x18>
    1fbc:	6a23      	ldr	r3, [r4, #32]
    1fbe:	f013 0f03 	tst.w	r3, #3
    1fc2:	d1fb      	bne.n	1fbc <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1fc4:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    1fc6:	f013 0f02 	tst.w	r3, #2
    1fca:	d114      	bne.n	1ff6 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1fcc:	6a23      	ldr	r3, [r4, #32]
    1fce:	f013 0f01 	tst.w	r3, #1
    1fd2:	d1fb      	bne.n	1fcc <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    1fd4:	7823      	ldrb	r3, [r4, #0]
    1fd6:	f043 0301 	orr.w	r3, r3, #1
    1fda:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1fdc:	6a23      	ldr	r3, [r4, #32]
    1fde:	f013 0f01 	tst.w	r3, #1
    1fe2:	d1fb      	bne.n	1fdc <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1fe4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1fe8:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    1fea:	2000      	movs	r0, #0
    1fec:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1fee:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    1ff0:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    1ff2:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    1ff4:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1ff6:	f06f 0010 	mvn.w	r0, #16
}
    1ffa:	bd10      	pop	{r4, pc}
    1ffc:	00006e38 	.word	0x00006e38
    2000:	42002000 	.word	0x42002000
    2004:	00001df5 	.word	0x00001df5

00002008 <_ac_sync_init>:
{
    2008:	b538      	push	{r3, r4, r5, lr}
    200a:	460c      	mov	r4, r1
	ASSERT(device);
    200c:	4605      	mov	r5, r0
    200e:	226c      	movs	r2, #108	; 0x6c
    2010:	4905      	ldr	r1, [pc, #20]	; (2028 <_ac_sync_init+0x20>)
    2012:	3000      	adds	r0, #0
    2014:	bf18      	it	ne
    2016:	2001      	movne	r0, #1
    2018:	4b04      	ldr	r3, [pc, #16]	; (202c <_ac_sync_init+0x24>)
    201a:	4798      	blx	r3
	device->hw = hw;
    201c:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    201e:	4620      	mov	r0, r4
    2020:	4b03      	ldr	r3, [pc, #12]	; (2030 <_ac_sync_init+0x28>)
    2022:	4798      	blx	r3
}
    2024:	bd38      	pop	{r3, r4, r5, pc}
    2026:	bf00      	nop
    2028:	00006e38 	.word	0x00006e38
    202c:	00001df5 	.word	0x00001df5
    2030:	00001f9d 	.word	0x00001f9d

00002034 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2034:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2036:	f013 0f01 	tst.w	r3, #1
    203a:	d1fb      	bne.n	2034 <_adc_init>
    203c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    203e:	f013 0f03 	tst.w	r3, #3
    2042:	d1fb      	bne.n	203c <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    2044:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    2046:	f013 0f02 	tst.w	r3, #2
    204a:	d12a      	bne.n	20a2 <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    204c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    204e:	f013 0f01 	tst.w	r3, #1
    2052:	d1fb      	bne.n	204c <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    2054:	8803      	ldrh	r3, [r0, #0]
    2056:	b29b      	uxth	r3, r3
    2058:	f043 0301 	orr.w	r3, r3, #1
    205c:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    205e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2060:	f013 0f01 	tst.w	r3, #1
    2064:	d1fb      	bne.n	205e <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2066:	2216      	movs	r2, #22
    2068:	4b0f      	ldr	r3, [pc, #60]	; (20a8 <_adc_init+0x74>)
    206a:	fb02 3101 	mla	r1, r2, r1, r3
    206e:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    2070:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2072:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2074:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2076:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    2078:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    207a:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    207c:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    207e:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2080:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2082:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2084:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    2086:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2088:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    208a:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    208c:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    208e:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2090:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2092:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2094:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2096:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    2098:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    209a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    209c:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    209e:	2000      	movs	r0, #0
    20a0:	4770      	bx	lr
		return ERR_DENIED;
    20a2:	f06f 0010 	mvn.w	r0, #16
}
    20a6:	4770      	bx	lr
    20a8:	00006e4c 	.word	0x00006e4c

000020ac <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    20ac:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    20b0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    20b4:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    20b8:	b148      	cbz	r0, 20ce <_adc_get_regs+0x22>
    20ba:	2801      	cmp	r0, #1
    20bc:	d009      	beq.n	20d2 <_adc_get_regs+0x26>
{
    20be:	b508      	push	{r3, lr}
	ASSERT(false);
    20c0:	2291      	movs	r2, #145	; 0x91
    20c2:	4905      	ldr	r1, [pc, #20]	; (20d8 <_adc_get_regs+0x2c>)
    20c4:	2000      	movs	r0, #0
    20c6:	4b05      	ldr	r3, [pc, #20]	; (20dc <_adc_get_regs+0x30>)
    20c8:	4798      	blx	r3
	return 0;
    20ca:	2000      	movs	r0, #0
    20cc:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    20ce:	2000      	movs	r0, #0
    20d0:	4770      	bx	lr
    20d2:	2001      	movs	r0, #1
    20d4:	4770      	bx	lr
    20d6:	bf00      	nop
    20d8:	00006e78 	.word	0x00006e78
    20dc:	00001df5 	.word	0x00001df5

000020e0 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    20e0:	b538      	push	{r3, r4, r5, lr}
    20e2:	460c      	mov	r4, r1
	ASSERT(device);
    20e4:	4605      	mov	r5, r0
    20e6:	22d5      	movs	r2, #213	; 0xd5
    20e8:	4907      	ldr	r1, [pc, #28]	; (2108 <_adc_sync_init+0x28>)
    20ea:	3000      	adds	r0, #0
    20ec:	bf18      	it	ne
    20ee:	2001      	movne	r0, #1
    20f0:	4b06      	ldr	r3, [pc, #24]	; (210c <_adc_sync_init+0x2c>)
    20f2:	4798      	blx	r3

	device->hw = hw;
    20f4:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    20f6:	4620      	mov	r0, r4
    20f8:	4b05      	ldr	r3, [pc, #20]	; (2110 <_adc_sync_init+0x30>)
    20fa:	4798      	blx	r3
    20fc:	4601      	mov	r1, r0
    20fe:	4620      	mov	r0, r4
    2100:	4b04      	ldr	r3, [pc, #16]	; (2114 <_adc_sync_init+0x34>)
    2102:	4798      	blx	r3
}
    2104:	bd38      	pop	{r3, r4, r5, pc}
    2106:	bf00      	nop
    2108:	00006e78 	.word	0x00006e78
    210c:	00001df5 	.word	0x00001df5
    2110:	000020ad 	.word	0x000020ad
    2114:	00002035 	.word	0x00002035

00002118 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2118:	0943      	lsrs	r3, r0, #5
    211a:	f000 001f 	and.w	r0, r0, #31
    211e:	2201      	movs	r2, #1
    2120:	fa02 f000 	lsl.w	r0, r2, r0
    2124:	3340      	adds	r3, #64	; 0x40
    2126:	4a02      	ldr	r2, [pc, #8]	; (2130 <_irq_set+0x18>)
    2128:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    212c:	4770      	bx	lr
    212e:	bf00      	nop
    2130:	e000e100 	.word	0xe000e100

00002134 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    2134:	f64b 3380 	movw	r3, #48000	; 0xbb80
    2138:	fb03 f000 	mul.w	r0, r3, r0
    213c:	4770      	bx	lr
	...

00002140 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    2140:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    2142:	4a0c      	ldr	r2, [pc, #48]	; (2174 <_init_chip+0x34>)
    2144:	8813      	ldrh	r3, [r2, #0]
    2146:	b29b      	uxth	r3, r3
    2148:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    214a:	4b0b      	ldr	r3, [pc, #44]	; (2178 <_init_chip+0x38>)
    214c:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    214e:	4b0b      	ldr	r3, [pc, #44]	; (217c <_init_chip+0x3c>)
    2150:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    2152:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2156:	4c0a      	ldr	r4, [pc, #40]	; (2180 <_init_chip+0x40>)
    2158:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    215a:	4b0a      	ldr	r3, [pc, #40]	; (2184 <_init_chip+0x44>)
    215c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    215e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    2162:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    2164:	4a08      	ldr	r2, [pc, #32]	; (2188 <_init_chip+0x48>)
    2166:	6913      	ldr	r3, [r2, #16]
    2168:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    216c:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    216e:	4b07      	ldr	r3, [pc, #28]	; (218c <_init_chip+0x4c>)
    2170:	4798      	blx	r3
    2172:	bd10      	pop	{r4, pc}
    2174:	41004000 	.word	0x41004000
    2178:	00002611 	.word	0x00002611
    217c:	00002539 	.word	0x00002539
    2180:	00002491 	.word	0x00002491
    2184:	0000263d 	.word	0x0000263d
    2188:	40000800 	.word	0x40000800
    218c:	00002299 	.word	0x00002299

00002190 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    2190:	b510      	push	{r4, lr}
    2192:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    2194:	22f3      	movs	r2, #243	; 0xf3
    2196:	4915      	ldr	r1, [pc, #84]	; (21ec <_dac_init+0x5c>)
    2198:	4815      	ldr	r0, [pc, #84]	; (21f0 <_dac_init+0x60>)
    219a:	4284      	cmp	r4, r0
    219c:	bf14      	ite	ne
    219e:	2000      	movne	r0, #0
    21a0:	2001      	moveq	r0, #1
    21a2:	4b14      	ldr	r3, [pc, #80]	; (21f4 <_dac_init+0x64>)
    21a4:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    21a6:	68a3      	ldr	r3, [r4, #8]
    21a8:	f013 0f01 	tst.w	r3, #1
    21ac:	d1fb      	bne.n	21a6 <_dac_init+0x16>
    21ae:	68a3      	ldr	r3, [r4, #8]
    21b0:	f013 0f03 	tst.w	r3, #3
    21b4:	d1fb      	bne.n	21ae <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    21b6:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    21b8:	f013 0f02 	tst.w	r3, #2
    21bc:	d113      	bne.n	21e6 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    21be:	68a3      	ldr	r3, [r4, #8]
    21c0:	f013 0f01 	tst.w	r3, #1
    21c4:	d1fb      	bne.n	21be <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    21c6:	7823      	ldrb	r3, [r4, #0]
    21c8:	f043 0301 	orr.w	r3, r3, #1
    21cc:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    21ce:	68a3      	ldr	r3, [r4, #8]
    21d0:	f013 0f01 	tst.w	r3, #1
    21d4:	d1fb      	bne.n	21ce <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    21d6:	2000      	movs	r0, #0
    21d8:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    21da:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    21dc:	81a0      	strh	r0, [r4, #12]
    21de:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    21e0:	2301      	movs	r3, #1
    21e2:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    21e4:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    21e6:	f06f 0003 	mvn.w	r0, #3
}
    21ea:	bd10      	pop	{r4, pc}
    21ec:	00006e90 	.word	0x00006e90
    21f0:	43002400 	.word	0x43002400
    21f4:	00001df5 	.word	0x00001df5

000021f8 <_dac_sync_init>:
{
    21f8:	b538      	push	{r3, r4, r5, lr}
    21fa:	460c      	mov	r4, r1
	ASSERT(device);
    21fc:	4605      	mov	r5, r0
    21fe:	2261      	movs	r2, #97	; 0x61
    2200:	4905      	ldr	r1, [pc, #20]	; (2218 <_dac_sync_init+0x20>)
    2202:	3000      	adds	r0, #0
    2204:	bf18      	it	ne
    2206:	2001      	movne	r0, #1
    2208:	4b04      	ldr	r3, [pc, #16]	; (221c <_dac_sync_init+0x24>)
    220a:	4798      	blx	r3
	device->hw = hw;
    220c:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    220e:	4620      	mov	r0, r4
    2210:	4b03      	ldr	r3, [pc, #12]	; (2220 <_dac_sync_init+0x28>)
    2212:	4798      	blx	r3
}
    2214:	bd38      	pop	{r3, r4, r5, pc}
    2216:	bf00      	nop
    2218:	00006e90 	.word	0x00006e90
    221c:	00001df5 	.word	0x00001df5
    2220:	00002191 	.word	0x00002191

00002224 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2224:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2226:	4a1a      	ldr	r2, [pc, #104]	; (2290 <_dmac_handler+0x6c>)
    2228:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    222a:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    222e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    2232:	4818      	ldr	r0, [pc, #96]	; (2294 <_dmac_handler+0x70>)
    2234:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2238:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    223c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2240:	f012 0f01 	tst.w	r2, #1
    2244:	d10a      	bne.n	225c <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    2246:	011a      	lsls	r2, r3, #4
    2248:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    224c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2250:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    2254:	f012 0f02 	tst.w	r2, #2
    2258:	d10b      	bne.n	2272 <_dmac_handler+0x4e>
    225a:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    225c:	011a      	lsls	r2, r3, #4
    225e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2262:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    2266:	2101      	movs	r1, #1
    2268:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    226c:	6843      	ldr	r3, [r0, #4]
    226e:	4798      	blx	r3
    2270:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    2272:	011a      	lsls	r2, r3, #4
    2274:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2278:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    227c:	2102      	movs	r1, #2
    227e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    2282:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2286:	4a03      	ldr	r2, [pc, #12]	; (2294 <_dmac_handler+0x70>)
    2288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    228c:	4798      	blx	r3
	}
}
    228e:	e7e4      	b.n	225a <_dmac_handler+0x36>
    2290:	4100a000 	.word	0x4100a000
    2294:	200004e0 	.word	0x200004e0

00002298 <_dma_init>:
{
    2298:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    229a:	4a33      	ldr	r2, [pc, #204]	; (2368 <_dma_init+0xd0>)
    229c:	8813      	ldrh	r3, [r2, #0]
    229e:	f023 0302 	bic.w	r3, r3, #2
    22a2:	041b      	lsls	r3, r3, #16
    22a4:	0c1b      	lsrs	r3, r3, #16
    22a6:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    22a8:	8853      	ldrh	r3, [r2, #2]
    22aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    22ae:	041b      	lsls	r3, r3, #16
    22b0:	0c1b      	lsrs	r3, r3, #16
    22b2:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    22b4:	8813      	ldrh	r3, [r2, #0]
    22b6:	b29b      	uxth	r3, r3
    22b8:	f043 0301 	orr.w	r3, r3, #1
    22bc:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    22be:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    22c0:	f013 0f01 	tst.w	r3, #1
    22c4:	d1fb      	bne.n	22be <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    22c6:	4b28      	ldr	r3, [pc, #160]	; (2368 <_dma_init+0xd0>)
    22c8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    22cc:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    22ce:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    22d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    22d4:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    22d6:	2000      	movs	r0, #0
    22d8:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    22da:	4a24      	ldr	r2, [pc, #144]	; (236c <_dma_init+0xd4>)
    22dc:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    22e0:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    22e2:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    22e6:	639a      	str	r2, [r3, #56]	; 0x38
    22e8:	4b21      	ldr	r3, [pc, #132]	; (2370 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    22ea:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    22ee:	681c      	ldr	r4, [r3, #0]
    22f0:	0101      	lsls	r1, r0, #4
    22f2:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    22f6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    22fa:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    22fc:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    22fe:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2302:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2304:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2308:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    230a:	4429      	add	r1, r5
    230c:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    2310:	3001      	adds	r0, #1
    2312:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2314:	2820      	cmp	r0, #32
    2316:	d1ea      	bne.n	22ee <_dma_init+0x56>
    2318:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    231a:	2001      	movs	r0, #1
    231c:	4915      	ldr	r1, [pc, #84]	; (2374 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    231e:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2320:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2324:	d00b      	beq.n	233e <_dma_init+0xa6>
    2326:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    2328:	2b24      	cmp	r3, #36	; 0x24
    232a:	d1f8      	bne.n	231e <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    232c:	4a0e      	ldr	r2, [pc, #56]	; (2368 <_dma_init+0xd0>)
    232e:	8813      	ldrh	r3, [r2, #0]
    2330:	b29b      	uxth	r3, r3
    2332:	f043 0302 	orr.w	r3, r3, #2
    2336:	8013      	strh	r3, [r2, #0]
}
    2338:	2000      	movs	r0, #0
    233a:	bc30      	pop	{r4, r5}
    233c:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    233e:	095c      	lsrs	r4, r3, #5
    2340:	f002 021f 	and.w	r2, r2, #31
    2344:	fa00 f202 	lsl.w	r2, r0, r2
    2348:	f104 0520 	add.w	r5, r4, #32
    234c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2350:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2354:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2358:	f104 0560 	add.w	r5, r4, #96	; 0x60
    235c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2360:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    2364:	e7df      	b.n	2326 <_dma_init+0x8e>
    2366:	bf00      	nop
    2368:	4100a000 	.word	0x4100a000
    236c:	200004e0 	.word	0x200004e0
    2370:	00006ea8 	.word	0x00006ea8
    2374:	e000e100 	.word	0xe000e100

00002378 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    2378:	b508      	push	{r3, lr}
	_dmac_handler();
    237a:	4b01      	ldr	r3, [pc, #4]	; (2380 <DMAC_0_Handler+0x8>)
    237c:	4798      	blx	r3
    237e:	bd08      	pop	{r3, pc}
    2380:	00002225 	.word	0x00002225

00002384 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    2384:	b508      	push	{r3, lr}
	_dmac_handler();
    2386:	4b01      	ldr	r3, [pc, #4]	; (238c <DMAC_1_Handler+0x8>)
    2388:	4798      	blx	r3
    238a:	bd08      	pop	{r3, pc}
    238c:	00002225 	.word	0x00002225

00002390 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    2390:	b508      	push	{r3, lr}
	_dmac_handler();
    2392:	4b01      	ldr	r3, [pc, #4]	; (2398 <DMAC_2_Handler+0x8>)
    2394:	4798      	blx	r3
    2396:	bd08      	pop	{r3, pc}
    2398:	00002225 	.word	0x00002225

0000239c <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    239c:	b508      	push	{r3, lr}
	_dmac_handler();
    239e:	4b01      	ldr	r3, [pc, #4]	; (23a4 <DMAC_3_Handler+0x8>)
    23a0:	4798      	blx	r3
    23a2:	bd08      	pop	{r3, pc}
    23a4:	00002225 	.word	0x00002225

000023a8 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    23a8:	b508      	push	{r3, lr}
	_dmac_handler();
    23aa:	4b01      	ldr	r3, [pc, #4]	; (23b0 <DMAC_4_Handler+0x8>)
    23ac:	4798      	blx	r3
    23ae:	bd08      	pop	{r3, pc}
    23b0:	00002225 	.word	0x00002225

000023b4 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    23b4:	4a1e      	ldr	r2, [pc, #120]	; (2430 <_ext_irq_init+0x7c>)
    23b6:	6853      	ldr	r3, [r2, #4]
    23b8:	f013 0f01 	tst.w	r3, #1
    23bc:	d1fb      	bne.n	23b6 <_ext_irq_init+0x2>
    23be:	4a1c      	ldr	r2, [pc, #112]	; (2430 <_ext_irq_init+0x7c>)
    23c0:	6853      	ldr	r3, [r2, #4]
    23c2:	f013 0f03 	tst.w	r3, #3
    23c6:	d1fb      	bne.n	23c0 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    23c8:	4b19      	ldr	r3, [pc, #100]	; (2430 <_ext_irq_init+0x7c>)
    23ca:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    23cc:	f013 0f02 	tst.w	r3, #2
    23d0:	d12b      	bne.n	242a <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    23d2:	4a17      	ldr	r2, [pc, #92]	; (2430 <_ext_irq_init+0x7c>)
    23d4:	6853      	ldr	r3, [r2, #4]
    23d6:	f013 0f01 	tst.w	r3, #1
    23da:	d1fb      	bne.n	23d4 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    23dc:	4a14      	ldr	r2, [pc, #80]	; (2430 <_ext_irq_init+0x7c>)
    23de:	7813      	ldrb	r3, [r2, #0]
    23e0:	f043 0301 	orr.w	r3, r3, #1
    23e4:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    23e6:	6853      	ldr	r3, [r2, #4]
    23e8:	f013 0f01 	tst.w	r3, #1
    23ec:	d1fb      	bne.n	23e6 <_ext_irq_init+0x32>
    23ee:	4a10      	ldr	r2, [pc, #64]	; (2430 <_ext_irq_init+0x7c>)
    23f0:	6853      	ldr	r3, [r2, #4]
    23f2:	f013 0f03 	tst.w	r3, #3
    23f6:	d1fb      	bne.n	23f0 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    23f8:	4b0d      	ldr	r3, [pc, #52]	; (2430 <_ext_irq_init+0x7c>)
    23fa:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    23fc:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    2400:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    2402:	2200      	movs	r2, #0
    2404:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2406:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    2408:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    240a:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    240c:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    240e:	61da      	str	r2, [r3, #28]
    2410:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2412:	461a      	mov	r2, r3
    2414:	6853      	ldr	r3, [r2, #4]
    2416:	f013 0f03 	tst.w	r3, #3
    241a:	d1fb      	bne.n	2414 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    241c:	4a04      	ldr	r2, [pc, #16]	; (2430 <_ext_irq_init+0x7c>)
    241e:	7813      	ldrb	r3, [r2, #0]
    2420:	f043 0302 	orr.w	r3, r3, #2
    2424:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    2426:	2000      	movs	r0, #0
    2428:	4770      	bx	lr
		return ERR_DENIED;
    242a:	f06f 0010 	mvn.w	r0, #16
}
    242e:	4770      	bx	lr
    2430:	40002800 	.word	0x40002800

00002434 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2434:	b430      	push	{r4, r5}
    2436:	4814      	ldr	r0, [pc, #80]	; (2488 <_event_system_init+0x54>)
    2438:	f100 0543 	add.w	r5, r0, #67	; 0x43
    243c:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    243e:	4c13      	ldr	r4, [pc, #76]	; (248c <_event_system_init+0x58>)
    2440:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2442:	f813 1b01 	ldrb.w	r1, [r3], #1
    2446:	3248      	adds	r2, #72	; 0x48
    2448:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    244c:	42ab      	cmp	r3, r5
    244e:	d1f7      	bne.n	2440 <_event_system_init+0xc>
    2450:	480d      	ldr	r0, [pc, #52]	; (2488 <_event_system_init+0x54>)
    2452:	f100 0442 	add.w	r4, r0, #66	; 0x42
    2456:	3080      	adds	r0, #128	; 0x80
    2458:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    245a:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    245e:	00ca      	lsls	r2, r1, #3
    2460:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    2464:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    2468:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    246a:	f850 3f04 	ldr.w	r3, [r0, #4]!
    246e:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2470:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    2474:	43db      	mvns	r3, r3
    2476:	b2db      	uxtb	r3, r3
    2478:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    247c:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    247e:	2920      	cmp	r1, #32
    2480:	d1eb      	bne.n	245a <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    2482:	2000      	movs	r0, #0
    2484:	bc30      	pop	{r4, r5}
    2486:	4770      	bx	lr
    2488:	00006fa8 	.word	0x00006fa8
    248c:	4100e000 	.word	0x4100e000

00002490 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    2490:	f010 0f01 	tst.w	r0, #1
    2494:	d002      	beq.n	249c <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2496:	4a23      	ldr	r2, [pc, #140]	; (2524 <_gclk_init_generators_by_fref+0x94>)
    2498:	4b23      	ldr	r3, [pc, #140]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    249a:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    249c:	f010 0f02 	tst.w	r0, #2
    24a0:	d002      	beq.n	24a8 <_gclk_init_generators_by_fref+0x18>
    24a2:	4a22      	ldr	r2, [pc, #136]	; (252c <_gclk_init_generators_by_fref+0x9c>)
    24a4:	4b20      	ldr	r3, [pc, #128]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    24a6:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    24a8:	f010 0f04 	tst.w	r0, #4
    24ac:	d002      	beq.n	24b4 <_gclk_init_generators_by_fref+0x24>
    24ae:	4a1d      	ldr	r2, [pc, #116]	; (2524 <_gclk_init_generators_by_fref+0x94>)
    24b0:	4b1d      	ldr	r3, [pc, #116]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    24b2:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    24b4:	f010 0f08 	tst.w	r0, #8
    24b8:	d002      	beq.n	24c0 <_gclk_init_generators_by_fref+0x30>
    24ba:	4a1a      	ldr	r2, [pc, #104]	; (2524 <_gclk_init_generators_by_fref+0x94>)
    24bc:	4b1a      	ldr	r3, [pc, #104]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    24be:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    24c0:	f010 0f10 	tst.w	r0, #16
    24c4:	d002      	beq.n	24cc <_gclk_init_generators_by_fref+0x3c>
    24c6:	4a17      	ldr	r2, [pc, #92]	; (2524 <_gclk_init_generators_by_fref+0x94>)
    24c8:	4b17      	ldr	r3, [pc, #92]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    24ca:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    24cc:	f010 0f20 	tst.w	r0, #32
    24d0:	d002      	beq.n	24d8 <_gclk_init_generators_by_fref+0x48>
    24d2:	4a14      	ldr	r2, [pc, #80]	; (2524 <_gclk_init_generators_by_fref+0x94>)
    24d4:	4b14      	ldr	r3, [pc, #80]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    24d6:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    24d8:	f010 0f40 	tst.w	r0, #64	; 0x40
    24dc:	d002      	beq.n	24e4 <_gclk_init_generators_by_fref+0x54>
    24de:	4a11      	ldr	r2, [pc, #68]	; (2524 <_gclk_init_generators_by_fref+0x94>)
    24e0:	4b11      	ldr	r3, [pc, #68]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    24e2:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    24e4:	f010 0f80 	tst.w	r0, #128	; 0x80
    24e8:	d002      	beq.n	24f0 <_gclk_init_generators_by_fref+0x60>
    24ea:	4a0e      	ldr	r2, [pc, #56]	; (2524 <_gclk_init_generators_by_fref+0x94>)
    24ec:	4b0e      	ldr	r3, [pc, #56]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    24ee:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    24f0:	f410 7f80 	tst.w	r0, #256	; 0x100
    24f4:	d002      	beq.n	24fc <_gclk_init_generators_by_fref+0x6c>
    24f6:	4a0b      	ldr	r2, [pc, #44]	; (2524 <_gclk_init_generators_by_fref+0x94>)
    24f8:	4b0b      	ldr	r3, [pc, #44]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    24fa:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    24fc:	f410 7f00 	tst.w	r0, #512	; 0x200
    2500:	d002      	beq.n	2508 <_gclk_init_generators_by_fref+0x78>
    2502:	4a08      	ldr	r2, [pc, #32]	; (2524 <_gclk_init_generators_by_fref+0x94>)
    2504:	4b08      	ldr	r3, [pc, #32]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    2506:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    2508:	f410 6f80 	tst.w	r0, #1024	; 0x400
    250c:	d002      	beq.n	2514 <_gclk_init_generators_by_fref+0x84>
    250e:	4a08      	ldr	r2, [pc, #32]	; (2530 <_gclk_init_generators_by_fref+0xa0>)
    2510:	4b05      	ldr	r3, [pc, #20]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    2512:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    2514:	f410 6f00 	tst.w	r0, #2048	; 0x800
    2518:	d002      	beq.n	2520 <_gclk_init_generators_by_fref+0x90>
    251a:	4a06      	ldr	r2, [pc, #24]	; (2534 <_gclk_init_generators_by_fref+0xa4>)
    251c:	4b02      	ldr	r3, [pc, #8]	; (2528 <_gclk_init_generators_by_fref+0x98>)
    251e:	64da      	str	r2, [r3, #76]	; 0x4c
    2520:	4770      	bx	lr
    2522:	bf00      	nop
    2524:	00012b06 	.word	0x00012b06
    2528:	40001c00 	.word	0x40001c00
    252c:	00012306 	.word	0x00012306
    2530:	00012b05 	.word	0x00012b05
    2534:	00013b05 	.word	0x00013b05

00002538 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    2538:	2201      	movs	r2, #1
    253a:	4b01      	ldr	r3, [pc, #4]	; (2540 <_mclk_init+0x8>)
    253c:	715a      	strb	r2, [r3, #5]
    253e:	4770      	bx	lr
    2540:	40000800 	.word	0x40000800

00002544 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    2544:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2546:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    2548:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    254a:	f012 0f01 	tst.w	r2, #1
    254e:	d005      	beq.n	255c <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    2550:	2201      	movs	r2, #1
    2552:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    2554:	6803      	ldr	r3, [r0, #0]
    2556:	b153      	cbz	r3, 256e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    2558:	4798      	blx	r3
    255a:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    255c:	8a1a      	ldrh	r2, [r3, #16]
    255e:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    2560:	b12a      	cbz	r2, 256e <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    2562:	f240 225e 	movw	r2, #606	; 0x25e
    2566:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    2568:	6843      	ldr	r3, [r0, #4]
    256a:	b103      	cbz	r3, 256e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    256c:	4798      	blx	r3
    256e:	bd08      	pop	{r3, pc}

00002570 <_flash_init>:
{
    2570:	b538      	push	{r3, r4, r5, lr}
    2572:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    2574:	4605      	mov	r5, r0
    2576:	b350      	cbz	r0, 25ce <_flash_init+0x5e>
    2578:	4816      	ldr	r0, [pc, #88]	; (25d4 <_flash_init+0x64>)
    257a:	4281      	cmp	r1, r0
    257c:	bf14      	ite	ne
    257e:	2000      	movne	r0, #0
    2580:	2001      	moveq	r0, #1
    2582:	2256      	movs	r2, #86	; 0x56
    2584:	4914      	ldr	r1, [pc, #80]	; (25d8 <_flash_init+0x68>)
    2586:	4b15      	ldr	r3, [pc, #84]	; (25dc <_flash_init+0x6c>)
    2588:	4798      	blx	r3
	device->hw = hw;
    258a:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    258c:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    258e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2592:	049b      	lsls	r3, r3, #18
    2594:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2596:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    2598:	4b11      	ldr	r3, [pc, #68]	; (25e0 <_flash_init+0x70>)
    259a:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    259c:	4b11      	ldr	r3, [pc, #68]	; (25e4 <_flash_init+0x74>)
    259e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    25a2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    25a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25aa:	f3bf 8f6f 	isb	sy
    25ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    25b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    25b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25ba:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    25be:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    25c2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    25c6:	6019      	str	r1, [r3, #0]
    25c8:	601a      	str	r2, [r3, #0]
}
    25ca:	2000      	movs	r0, #0
    25cc:	bd38      	pop	{r3, r4, r5, pc}
    25ce:	2000      	movs	r0, #0
    25d0:	e7d7      	b.n	2582 <_flash_init+0x12>
    25d2:	bf00      	nop
    25d4:	41004000 	.word	0x41004000
    25d8:	000070ac 	.word	0x000070ac
    25dc:	00001df5 	.word	0x00001df5
    25e0:	20000a60 	.word	0x20000a60
    25e4:	e000e100 	.word	0xe000e100

000025e8 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    25e8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    25ea:	4b02      	ldr	r3, [pc, #8]	; (25f4 <NVMCTRL_0_Handler+0xc>)
    25ec:	6818      	ldr	r0, [r3, #0]
    25ee:	4b02      	ldr	r3, [pc, #8]	; (25f8 <NVMCTRL_0_Handler+0x10>)
    25f0:	4798      	blx	r3
    25f2:	bd08      	pop	{r3, pc}
    25f4:	20000a60 	.word	0x20000a60
    25f8:	00002545 	.word	0x00002545

000025fc <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    25fc:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    25fe:	4b02      	ldr	r3, [pc, #8]	; (2608 <NVMCTRL_1_Handler+0xc>)
    2600:	6818      	ldr	r0, [r3, #0]
    2602:	4b02      	ldr	r3, [pc, #8]	; (260c <NVMCTRL_1_Handler+0x10>)
    2604:	4798      	blx	r3
    2606:	bd08      	pop	{r3, pc}
    2608:	20000a60 	.word	0x20000a60
    260c:	00002545 	.word	0x00002545

00002610 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2610:	4b09      	ldr	r3, [pc, #36]	; (2638 <_osc32kctrl_init_sources+0x28>)
    2612:	f242 024e 	movw	r2, #8270	; 0x204e
    2616:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2618:	2201      	movs	r2, #1
    261a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    261c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    261e:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2620:	2200      	movs	r2, #0
    2622:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    2624:	461a      	mov	r2, r3
    2626:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    2628:	f013 0f01 	tst.w	r3, #1
    262c:	d0fb      	beq.n	2626 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    262e:	2204      	movs	r2, #4
    2630:	4b01      	ldr	r3, [pc, #4]	; (2638 <_osc32kctrl_init_sources+0x28>)
    2632:	741a      	strb	r2, [r3, #16]
    2634:	4770      	bx	lr
    2636:	bf00      	nop
    2638:	40001400 	.word	0x40001400

0000263c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    263c:	4a2b      	ldr	r2, [pc, #172]	; (26ec <_oscctrl_init_referenced_generators+0xb0>)
    263e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2640:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2644:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    2648:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    264a:	4b29      	ldr	r3, [pc, #164]	; (26f0 <_oscctrl_init_referenced_generators+0xb4>)
    264c:	2200      	movs	r2, #0
    264e:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    2650:	4a28      	ldr	r2, [pc, #160]	; (26f4 <_oscctrl_init_referenced_generators+0xb8>)
    2652:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2654:	461a      	mov	r2, r3
    2656:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    265a:	f013 0f10 	tst.w	r3, #16
    265e:	d1fa      	bne.n	2656 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2660:	2200      	movs	r2, #0
    2662:	4b23      	ldr	r3, [pc, #140]	; (26f0 <_oscctrl_init_referenced_generators+0xb4>)
    2664:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2668:	461a      	mov	r2, r3
    266a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    266e:	f013 0f04 	tst.w	r3, #4
    2672:	d1fa      	bne.n	266a <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    2674:	2242      	movs	r2, #66	; 0x42
    2676:	4b1e      	ldr	r3, [pc, #120]	; (26f0 <_oscctrl_init_referenced_generators+0xb4>)
    2678:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    267a:	461a      	mov	r2, r3
    267c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    2680:	f013 0f02 	tst.w	r3, #2
    2684:	d1fa      	bne.n	267c <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    2686:	4b1a      	ldr	r3, [pc, #104]	; (26f0 <_oscctrl_init_referenced_generators+0xb4>)
    2688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    268a:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    268c:	461a      	mov	r2, r3
    268e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2692:	f013 0f08 	tst.w	r3, #8
    2696:	d1fa      	bne.n	268e <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2698:	2282      	movs	r2, #130	; 0x82
    269a:	4b15      	ldr	r3, [pc, #84]	; (26f0 <_oscctrl_init_referenced_generators+0xb4>)
    269c:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    26a0:	461a      	mov	r2, r3
    26a2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    26a6:	f013 0f04 	tst.w	r3, #4
    26aa:	d1fa      	bne.n	26a2 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    26ac:	4b10      	ldr	r3, [pc, #64]	; (26f0 <_oscctrl_init_referenced_generators+0xb4>)
    26ae:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    26b2:	f013 0f01 	tst.w	r3, #1
    26b6:	d012      	beq.n	26de <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    26b8:	4a0d      	ldr	r2, [pc, #52]	; (26f0 <_oscctrl_init_referenced_generators+0xb4>)
    26ba:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    26bc:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    26c0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    26c4:	d1f9      	bne.n	26ba <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    26c6:	4a09      	ldr	r2, [pc, #36]	; (26ec <_oscctrl_init_referenced_generators+0xb0>)
    26c8:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    26ca:	2b00      	cmp	r3, #0
    26cc:	d1fc      	bne.n	26c8 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    26ce:	4a07      	ldr	r2, [pc, #28]	; (26ec <_oscctrl_init_referenced_generators+0xb0>)
    26d0:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    26d2:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    26d6:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    26da:	6213      	str	r3, [r2, #32]
    26dc:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    26de:	4a04      	ldr	r2, [pc, #16]	; (26f0 <_oscctrl_init_referenced_generators+0xb4>)
    26e0:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    26e2:	f413 7f80 	tst.w	r3, #256	; 0x100
    26e6:	d0fb      	beq.n	26e0 <_oscctrl_init_referenced_generators+0xa4>
    26e8:	e7ed      	b.n	26c6 <_oscctrl_init_referenced_generators+0x8a>
    26ea:	bf00      	nop
    26ec:	40001c00 	.word	0x40001c00
    26f0:	40001000 	.word	0x40001000
    26f4:	04010000 	.word	0x04010000

000026f8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    26f8:	b500      	push	{lr}
    26fa:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    26fc:	4b0d      	ldr	r3, [pc, #52]	; (2734 <RAMECC_Handler+0x3c>)
    26fe:	789b      	ldrb	r3, [r3, #2]
    2700:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2702:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2704:	9b01      	ldr	r3, [sp, #4]
    2706:	f013 0f02 	tst.w	r3, #2
    270a:	d006      	beq.n	271a <RAMECC_Handler+0x22>
    270c:	4b0a      	ldr	r3, [pc, #40]	; (2738 <RAMECC_Handler+0x40>)
    270e:	681b      	ldr	r3, [r3, #0]
    2710:	b11b      	cbz	r3, 271a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2712:	4a08      	ldr	r2, [pc, #32]	; (2734 <RAMECC_Handler+0x3c>)
    2714:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2716:	4798      	blx	r3
    2718:	e009      	b.n	272e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    271a:	9b01      	ldr	r3, [sp, #4]
    271c:	f013 0f01 	tst.w	r3, #1
    2720:	d005      	beq.n	272e <RAMECC_Handler+0x36>
    2722:	4b05      	ldr	r3, [pc, #20]	; (2738 <RAMECC_Handler+0x40>)
    2724:	685b      	ldr	r3, [r3, #4]
    2726:	b113      	cbz	r3, 272e <RAMECC_Handler+0x36>
    2728:	4a02      	ldr	r2, [pc, #8]	; (2734 <RAMECC_Handler+0x3c>)
    272a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    272c:	4798      	blx	r3
	} else {
		return;
	}
}
    272e:	b003      	add	sp, #12
    2730:	f85d fb04 	ldr.w	pc, [sp], #4
    2734:	41020000 	.word	0x41020000
    2738:	20003dec 	.word	0x20003dec

0000273c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    273c:	b470      	push	{r4, r5, r6}
    273e:	b087      	sub	sp, #28
    2740:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    2742:	466c      	mov	r4, sp
    2744:	4d0c      	ldr	r5, [pc, #48]	; (2778 <_sercom_get_hardware_index+0x3c>)
    2746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    274a:	e895 0003 	ldmia.w	r5, {r0, r1}
    274e:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    2752:	9b00      	ldr	r3, [sp, #0]
    2754:	42b3      	cmp	r3, r6
    2756:	d00c      	beq.n	2772 <_sercom_get_hardware_index+0x36>
    2758:	4632      	mov	r2, r6
    275a:	2001      	movs	r0, #1
    275c:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    2760:	4293      	cmp	r3, r2
    2762:	d007      	beq.n	2774 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2764:	3001      	adds	r0, #1
    2766:	2806      	cmp	r0, #6
    2768:	d1f8      	bne.n	275c <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    276a:	2000      	movs	r0, #0
}
    276c:	b007      	add	sp, #28
    276e:	bc70      	pop	{r4, r5, r6}
    2770:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2772:	2000      	movs	r0, #0
			return i;
    2774:	b2c0      	uxtb	r0, r0
    2776:	e7f9      	b.n	276c <_sercom_get_hardware_index+0x30>
    2778:	000070cc 	.word	0x000070cc

0000277c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    277c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    277e:	4b03      	ldr	r3, [pc, #12]	; (278c <_sercom_get_irq_num+0x10>)
    2780:	4798      	blx	r3
    2782:	0080      	lsls	r0, r0, #2
    2784:	302e      	adds	r0, #46	; 0x2e
}
    2786:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    278a:	bd08      	pop	{r3, pc}
    278c:	0000273d 	.word	0x0000273d

00002790 <_usart_init>:
{
    2790:	b538      	push	{r3, r4, r5, lr}
    2792:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2794:	4b33      	ldr	r3, [pc, #204]	; (2864 <_usart_init+0xd4>)
    2796:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2798:	2803      	cmp	r0, #3
    279a:	d056      	beq.n	284a <_usart_init+0xba>
    279c:	2804      	cmp	r0, #4
    279e:	d052      	beq.n	2846 <_usart_init+0xb6>
    27a0:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    27a2:	bf08      	it	eq
    27a4:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    27a6:	d006      	beq.n	27b6 <_usart_init+0x26>
	ASSERT(false);
    27a8:	f240 2263 	movw	r2, #611	; 0x263
    27ac:	492e      	ldr	r1, [pc, #184]	; (2868 <_usart_init+0xd8>)
    27ae:	2000      	movs	r0, #0
    27b0:	4b2e      	ldr	r3, [pc, #184]	; (286c <_usart_init+0xdc>)
    27b2:	4798      	blx	r3
	return 0;
    27b4:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27b6:	69e3      	ldr	r3, [r4, #28]
    27b8:	f013 0f01 	tst.w	r3, #1
    27bc:	d1fb      	bne.n	27b6 <_usart_init+0x26>
    27be:	69e3      	ldr	r3, [r4, #28]
    27c0:	f013 0f03 	tst.w	r3, #3
    27c4:	d1fb      	bne.n	27be <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    27c6:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    27c8:	f013 0f02 	tst.w	r3, #2
    27cc:	d147      	bne.n	285e <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27ce:	69e3      	ldr	r3, [r4, #28]
    27d0:	f013 0f01 	tst.w	r3, #1
    27d4:	d1fb      	bne.n	27ce <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    27d6:	6823      	ldr	r3, [r4, #0]
    27d8:	f043 0301 	orr.w	r3, r3, #1
    27dc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    27de:	69e3      	ldr	r3, [r4, #28]
    27e0:	f013 0f01 	tst.w	r3, #1
    27e4:	d1fb      	bne.n	27de <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    27e6:	4610      	mov	r0, r2
    27e8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    27ec:	4920      	ldr	r1, [pc, #128]	; (2870 <_usart_init+0xe0>)
    27ee:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    27f2:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    27f4:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    27f6:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    27f8:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    27fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    27fc:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    27fe:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    2802:	d024      	beq.n	284e <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2804:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2808:	4b19      	ldr	r3, [pc, #100]	; (2870 <_usart_init+0xe0>)
    280a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    280e:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    2810:	89a3      	ldrh	r3, [r4, #12]
    2812:	f361 030c 	bfi	r3, r1, #0, #13
    2816:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2818:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    281c:	89a3      	ldrh	r3, [r4, #12]
    281e:	f362 334f 	bfi	r3, r2, #13, #3
    2822:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2824:	4b12      	ldr	r3, [pc, #72]	; (2870 <_usart_init+0xe0>)
    2826:	0042      	lsls	r2, r0, #1
    2828:	1811      	adds	r1, r2, r0
    282a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    282e:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    2832:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    2834:	4402      	add	r2, r0
    2836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    283a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    283e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    2842:	2000      	movs	r0, #0
    2844:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2846:	2201      	movs	r2, #1
    2848:	e7b5      	b.n	27b6 <_usart_init+0x26>
    284a:	2200      	movs	r2, #0
    284c:	e7b3      	b.n	27b6 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    284e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2852:	4b07      	ldr	r3, [pc, #28]	; (2870 <_usart_init+0xe0>)
    2854:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2858:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    285a:	81a3      	strh	r3, [r4, #12]
    285c:	e7e2      	b.n	2824 <_usart_init+0x94>
		return ERR_DENIED;
    285e:	f06f 0010 	mvn.w	r0, #16
}
    2862:	bd38      	pop	{r3, r4, r5, pc}
    2864:	0000273d 	.word	0x0000273d
    2868:	00007158 	.word	0x00007158
    286c:	00001df5 	.word	0x00001df5
    2870:	000070cc 	.word	0x000070cc

00002874 <_usart_async_init>:
{
    2874:	b570      	push	{r4, r5, r6, lr}
    2876:	460d      	mov	r5, r1
	ASSERT(device);
    2878:	4606      	mov	r6, r0
    287a:	22da      	movs	r2, #218	; 0xda
    287c:	4916      	ldr	r1, [pc, #88]	; (28d8 <_usart_async_init+0x64>)
    287e:	3000      	adds	r0, #0
    2880:	bf18      	it	ne
    2882:	2001      	movne	r0, #1
    2884:	4b15      	ldr	r3, [pc, #84]	; (28dc <_usart_async_init+0x68>)
    2886:	4798      	blx	r3
	init_status = _usart_init(hw);
    2888:	4628      	mov	r0, r5
    288a:	4b15      	ldr	r3, [pc, #84]	; (28e0 <_usart_async_init+0x6c>)
    288c:	4798      	blx	r3
	if (init_status) {
    288e:	4604      	mov	r4, r0
    2890:	b9f8      	cbnz	r0, 28d2 <_usart_async_init+0x5e>
	device->hw = hw;
    2892:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    2894:	4628      	mov	r0, r5
    2896:	4b13      	ldr	r3, [pc, #76]	; (28e4 <_usart_async_init+0x70>)
    2898:	4798      	blx	r3
		irq = irq +2;
    289a:	3002      	adds	r0, #2
    289c:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    289e:	f000 031f 	and.w	r3, r0, #31
    28a2:	2201      	movs	r2, #1
    28a4:	409a      	lsls	r2, r3
    28a6:	0943      	lsrs	r3, r0, #5
    28a8:	009b      	lsls	r3, r3, #2
    28aa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    28ae:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    28b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    28b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28ba:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    28be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    28c2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    28c6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    28ca:	21e0      	movs	r1, #224	; 0xe0
    28cc:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    28d0:	601a      	str	r2, [r3, #0]
}
    28d2:	4620      	mov	r0, r4
    28d4:	bd70      	pop	{r4, r5, r6, pc}
    28d6:	bf00      	nop
    28d8:	00007158 	.word	0x00007158
    28dc:	00001df5 	.word	0x00001df5
    28e0:	00002791 	.word	0x00002791
    28e4:	0000277d 	.word	0x0000277d

000028e8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    28e8:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    28ea:	69d3      	ldr	r3, [r2, #28]
    28ec:	f013 0f03 	tst.w	r3, #3
    28f0:	d1fb      	bne.n	28ea <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    28f2:	6813      	ldr	r3, [r2, #0]
    28f4:	f043 0302 	orr.w	r3, r3, #2
    28f8:	6013      	str	r3, [r2, #0]
    28fa:	4770      	bx	lr

000028fc <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    28fc:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    28fe:	6299      	str	r1, [r3, #40]	; 0x28
    2900:	4770      	bx	lr

00002902 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    2902:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    2904:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    2906:	b2c0      	uxtb	r0, r0
    2908:	4770      	bx	lr

0000290a <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    290a:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    290c:	7e18      	ldrb	r0, [r3, #24]
}
    290e:	f000 0001 	and.w	r0, r0, #1
    2912:	4770      	bx	lr

00002914 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2914:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2916:	7e18      	ldrb	r0, [r3, #24]
}
    2918:	f3c0 0080 	ubfx	r0, r0, #2, #1
    291c:	4770      	bx	lr
	...

00002920 <_usart_async_set_irq_state>:
{
    2920:	b570      	push	{r4, r5, r6, lr}
    2922:	460c      	mov	r4, r1
    2924:	4616      	mov	r6, r2
	ASSERT(device);
    2926:	4605      	mov	r5, r0
    2928:	f240 2245 	movw	r2, #581	; 0x245
    292c:	4915      	ldr	r1, [pc, #84]	; (2984 <_usart_async_set_irq_state+0x64>)
    292e:	3000      	adds	r0, #0
    2930:	bf18      	it	ne
    2932:	2001      	movne	r0, #1
    2934:	4b14      	ldr	r3, [pc, #80]	; (2988 <_usart_async_set_irq_state+0x68>)
    2936:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    2938:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    293c:	d10d      	bne.n	295a <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    293e:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    2940:	b92e      	cbnz	r6, 294e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    2942:	2201      	movs	r2, #1
    2944:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    2946:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    2948:	2202      	movs	r2, #2
    294a:	751a      	strb	r2, [r3, #20]
    294c:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    294e:	2201      	movs	r2, #1
    2950:	759a      	strb	r2, [r3, #22]
    2952:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2954:	2202      	movs	r2, #2
    2956:	759a      	strb	r2, [r3, #22]
    2958:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    295a:	2c01      	cmp	r4, #1
    295c:	d002      	beq.n	2964 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    295e:	2c03      	cmp	r4, #3
    2960:	d008      	beq.n	2974 <_usart_async_set_irq_state+0x54>
    2962:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    2964:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    2966:	b916      	cbnz	r6, 296e <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    2968:	2204      	movs	r2, #4
    296a:	751a      	strb	r2, [r3, #20]
    296c:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    296e:	2204      	movs	r2, #4
    2970:	759a      	strb	r2, [r3, #22]
    2972:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    2974:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    2976:	b116      	cbz	r6, 297e <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    2978:	2280      	movs	r2, #128	; 0x80
    297a:	759a      	strb	r2, [r3, #22]
}
    297c:	e7f1      	b.n	2962 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    297e:	2280      	movs	r2, #128	; 0x80
    2980:	751a      	strb	r2, [r3, #20]
    2982:	bd70      	pop	{r4, r5, r6, pc}
    2984:	00007158 	.word	0x00007158
    2988:	00001df5 	.word	0x00001df5

0000298c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    298c:	4b03      	ldr	r3, [pc, #12]	; (299c <_delay_init+0x10>)
    298e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2992:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2994:	2205      	movs	r2, #5
    2996:	601a      	str	r2, [r3, #0]
    2998:	4770      	bx	lr
    299a:	bf00      	nop
    299c:	e000e010 	.word	0xe000e010

000029a0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    29a0:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    29a2:	b303      	cbz	r3, 29e6 <_delay_cycles+0x46>
{
    29a4:	b430      	push	{r4, r5}
    29a6:	1e5d      	subs	r5, r3, #1
    29a8:	b2ed      	uxtb	r5, r5
	while (n--) {
    29aa:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    29ac:	4a12      	ldr	r2, [pc, #72]	; (29f8 <_delay_cycles+0x58>)
    29ae:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    29b2:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    29b4:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    29b6:	6813      	ldr	r3, [r2, #0]
    29b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    29bc:	d0fb      	beq.n	29b6 <_delay_cycles+0x16>
	while (n--) {
    29be:	3801      	subs	r0, #1
    29c0:	b2c0      	uxtb	r0, r0
    29c2:	28ff      	cmp	r0, #255	; 0xff
    29c4:	d1f5      	bne.n	29b2 <_delay_cycles+0x12>
    29c6:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    29ca:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    29ce:	3101      	adds	r1, #1
    29d0:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    29d2:	4b09      	ldr	r3, [pc, #36]	; (29f8 <_delay_cycles+0x58>)
    29d4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    29d6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    29d8:	461a      	mov	r2, r3
    29da:	6813      	ldr	r3, [r2, #0]
    29dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    29e0:	d0fb      	beq.n	29da <_delay_cycles+0x3a>
		;
}
    29e2:	bc30      	pop	{r4, r5}
    29e4:	4770      	bx	lr
	SysTick->LOAD = buf;
    29e6:	4b04      	ldr	r3, [pc, #16]	; (29f8 <_delay_cycles+0x58>)
    29e8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    29ea:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    29ec:	461a      	mov	r2, r3
    29ee:	6813      	ldr	r3, [r2, #0]
    29f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    29f4:	d0fb      	beq.n	29ee <_delay_cycles+0x4e>
    29f6:	4770      	bx	lr
    29f8:	e000e010 	.word	0xe000e010

000029fc <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    29fc:	b470      	push	{r4, r5, r6}
    29fe:	b087      	sub	sp, #28
    2a00:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2a02:	ac01      	add	r4, sp, #4
    2a04:	4d14      	ldr	r5, [pc, #80]	; (2a58 <_get_irq_num+0x5c>)
    2a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2a0a:	682b      	ldr	r3, [r5, #0]
    2a0c:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    2a0e:	42b0      	cmp	r0, r6
    2a10:	d017      	beq.n	2a42 <_get_irq_num+0x46>
    2a12:	4631      	mov	r1, r6
    2a14:	2301      	movs	r3, #1
    2a16:	a801      	add	r0, sp, #4
    2a18:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    2a1c:	428a      	cmp	r2, r1
    2a1e:	d006      	beq.n	2a2e <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2a20:	3301      	adds	r3, #1
    2a22:	2b05      	cmp	r3, #5
    2a24:	d1f8      	bne.n	2a18 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    2a26:	2055      	movs	r0, #85	; 0x55
}
    2a28:	b007      	add	sp, #28
    2a2a:	bc70      	pop	{r4, r5, r6}
    2a2c:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    2a2e:	b2db      	uxtb	r3, r3
    2a30:	2b04      	cmp	r3, #4
    2a32:	d80c      	bhi.n	2a4e <_get_irq_num+0x52>
    2a34:	e8df f003 	tbb	[pc, r3]
    2a38:	070d0305 	.word	0x070d0305
    2a3c:	09          	.byte	0x09
    2a3d:	00          	.byte	0x00
		return TCC1_0_IRQn;
    2a3e:	205c      	movs	r0, #92	; 0x5c
    2a40:	e7f2      	b.n	2a28 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    2a42:	2055      	movs	r0, #85	; 0x55
    2a44:	e7f0      	b.n	2a28 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    2a46:	2065      	movs	r0, #101	; 0x65
    2a48:	e7ee      	b.n	2a28 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    2a4a:	2068      	movs	r0, #104	; 0x68
    2a4c:	e7ec      	b.n	2a28 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    2a4e:	2089      	movs	r0, #137	; 0x89
    2a50:	e7ea      	b.n	2a28 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    2a52:	2061      	movs	r0, #97	; 0x61
    2a54:	e7e8      	b.n	2a28 <_get_irq_num+0x2c>
    2a56:	bf00      	nop
    2a58:	00007174 	.word	0x00007174

00002a5c <_tcc_timer_deinit>:
{
    2a5c:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    2a5e:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2a60:	4620      	mov	r0, r4
    2a62:	4b10      	ldr	r3, [pc, #64]	; (2aa4 <_tcc_timer_deinit+0x48>)
    2a64:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2a66:	0943      	lsrs	r3, r0, #5
    2a68:	f000 001f 	and.w	r0, r0, #31
    2a6c:	2201      	movs	r2, #1
    2a6e:	fa02 f000 	lsl.w	r0, r2, r0
    2a72:	3320      	adds	r3, #32
    2a74:	4a0c      	ldr	r2, [pc, #48]	; (2aa8 <_tcc_timer_deinit+0x4c>)
    2a76:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2a7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a7e:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a82:	68a3      	ldr	r3, [r4, #8]
    2a84:	f013 0f03 	tst.w	r3, #3
    2a88:	d1fb      	bne.n	2a82 <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2a8a:	6823      	ldr	r3, [r4, #0]
    2a8c:	f023 0302 	bic.w	r3, r3, #2
    2a90:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a92:	68a3      	ldr	r3, [r4, #8]
    2a94:	f013 0f01 	tst.w	r3, #1
    2a98:	d1fb      	bne.n	2a92 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2a9a:	6823      	ldr	r3, [r4, #0]
    2a9c:	f043 0301 	orr.w	r3, r3, #1
    2aa0:	6023      	str	r3, [r4, #0]
    2aa2:	bd10      	pop	{r4, pc}
    2aa4:	000029fd 	.word	0x000029fd
    2aa8:	e000e100 	.word	0xe000e100

00002aac <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    2aac:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2aae:	6893      	ldr	r3, [r2, #8]
    2ab0:	f013 0f03 	tst.w	r3, #3
    2ab4:	d1fb      	bne.n	2aae <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2ab6:	6813      	ldr	r3, [r2, #0]
    2ab8:	f043 0302 	orr.w	r3, r3, #2
    2abc:	6013      	str	r3, [r2, #0]
    2abe:	4770      	bx	lr

00002ac0 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    2ac0:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2ac2:	6893      	ldr	r3, [r2, #8]
    2ac4:	f013 0f03 	tst.w	r3, #3
    2ac8:	d1fb      	bne.n	2ac2 <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2aca:	6813      	ldr	r3, [r2, #0]
    2acc:	f023 0302 	bic.w	r3, r3, #2
    2ad0:	6013      	str	r3, [r2, #0]
    2ad2:	4770      	bx	lr

00002ad4 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    2ad4:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    2ad6:	6419      	str	r1, [r3, #64]	; 0x40
    2ad8:	4770      	bx	lr

00002ada <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    2ada:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    2adc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2ade:	4770      	bx	lr

00002ae0 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    2ae0:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2ae2:	6893      	ldr	r3, [r2, #8]
    2ae4:	f013 0f03 	tst.w	r3, #3
    2ae8:	d1fb      	bne.n	2ae2 <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2aea:	6810      	ldr	r0, [r2, #0]
}
    2aec:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2af0:	4770      	bx	lr

00002af2 <tcc_interrupt_handler>:
{
    2af2:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2af4:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    2af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    2af8:	f012 0f01 	tst.w	r2, #1
    2afc:	d100      	bne.n	2b00 <tcc_interrupt_handler+0xe>
    2afe:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    2b00:	2201      	movs	r2, #1
    2b02:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    2b04:	6803      	ldr	r3, [r0, #0]
    2b06:	4798      	blx	r3
}
    2b08:	e7f9      	b.n	2afe <tcc_interrupt_handler+0xc>
	...

00002b0c <_tcc_timer_init>:
{
    2b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b0e:	b087      	sub	sp, #28
    2b10:	4605      	mov	r5, r0
    2b12:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2b14:	ae01      	add	r6, sp, #4
    2b16:	4f4e      	ldr	r7, [pc, #312]	; (2c50 <_tcc_timer_init+0x144>)
    2b18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2b1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2b1c:	683b      	ldr	r3, [r7, #0]
    2b1e:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    2b20:	42a0      	cmp	r0, r4
    2b22:	d00c      	beq.n	2b3e <_tcc_timer_init+0x32>
    2b24:	4621      	mov	r1, r4
    2b26:	2301      	movs	r3, #1
    2b28:	a801      	add	r0, sp, #4
    2b2a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    2b2e:	428a      	cmp	r2, r1
    2b30:	d006      	beq.n	2b40 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2b32:	3301      	adds	r3, #1
    2b34:	2b05      	cmp	r3, #5
    2b36:	d1f8      	bne.n	2b2a <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2b38:	2600      	movs	r6, #0
			return i;
    2b3a:	b276      	sxtb	r6, r6
    2b3c:	e015      	b.n	2b6a <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2b3e:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    2b40:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    2b44:	d073      	beq.n	2c2e <_tcc_timer_init+0x122>
    2b46:	2b01      	cmp	r3, #1
    2b48:	d06b      	beq.n	2c22 <_tcc_timer_init+0x116>
    2b4a:	2b02      	cmp	r3, #2
    2b4c:	d06b      	beq.n	2c26 <_tcc_timer_init+0x11a>
    2b4e:	2b03      	cmp	r3, #3
    2b50:	d06b      	beq.n	2c2a <_tcc_timer_init+0x11e>
    2b52:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2b54:	bf08      	it	eq
    2b56:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    2b58:	d0ef      	beq.n	2b3a <_tcc_timer_init+0x2e>
	ASSERT(false);
    2b5a:	f240 128b 	movw	r2, #395	; 0x18b
    2b5e:	493d      	ldr	r1, [pc, #244]	; (2c54 <_tcc_timer_init+0x148>)
    2b60:	2000      	movs	r0, #0
    2b62:	4b3d      	ldr	r3, [pc, #244]	; (2c58 <_tcc_timer_init+0x14c>)
    2b64:	4798      	blx	r3
	return -1;
    2b66:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    2b6a:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    2b6c:	22e4      	movs	r2, #228	; 0xe4
    2b6e:	4939      	ldr	r1, [pc, #228]	; (2c54 <_tcc_timer_init+0x148>)
    2b70:	2001      	movs	r0, #1
    2b72:	4b39      	ldr	r3, [pc, #228]	; (2c58 <_tcc_timer_init+0x14c>)
    2b74:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2b76:	68a3      	ldr	r3, [r4, #8]
    2b78:	f013 0f01 	tst.w	r3, #1
    2b7c:	d1fb      	bne.n	2b76 <_tcc_timer_init+0x6a>
    2b7e:	68a3      	ldr	r3, [r4, #8]
    2b80:	f013 0f03 	tst.w	r3, #3
    2b84:	d1fb      	bne.n	2b7e <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2b86:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    2b88:	f013 0f02 	tst.w	r3, #2
    2b8c:	d15d      	bne.n	2c4a <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2b8e:	68a3      	ldr	r3, [r4, #8]
    2b90:	f013 0f01 	tst.w	r3, #1
    2b94:	d1fb      	bne.n	2b8e <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2b96:	6823      	ldr	r3, [r4, #0]
    2b98:	f043 0301 	orr.w	r3, r3, #1
    2b9c:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2b9e:	68a3      	ldr	r3, [r4, #8]
    2ba0:	f013 0f01 	tst.w	r3, #1
    2ba4:	d1fb      	bne.n	2b9e <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    2ba6:	4a2a      	ldr	r2, [pc, #168]	; (2c50 <_tcc_timer_init+0x144>)
    2ba8:	00f1      	lsls	r1, r6, #3
    2baa:	198b      	adds	r3, r1, r6
    2bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2bb0:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    2bb2:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    2bb4:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    2bb6:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    2bb8:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    2bba:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    2bbc:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    2bbe:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    2bc0:	440e      	add	r6, r1
    2bc2:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    2bc6:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    2bc8:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    2bca:	2301      	movs	r3, #1
    2bcc:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    2bce:	4b23      	ldr	r3, [pc, #140]	; (2c5c <_tcc_timer_init+0x150>)
    2bd0:	429c      	cmp	r4, r3
    2bd2:	d02e      	beq.n	2c32 <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    2bd4:	4b22      	ldr	r3, [pc, #136]	; (2c60 <_tcc_timer_init+0x154>)
    2bd6:	429c      	cmp	r4, r3
    2bd8:	d02e      	beq.n	2c38 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    2bda:	4b22      	ldr	r3, [pc, #136]	; (2c64 <_tcc_timer_init+0x158>)
    2bdc:	429c      	cmp	r4, r3
    2bde:	d02e      	beq.n	2c3e <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    2be0:	4b21      	ldr	r3, [pc, #132]	; (2c68 <_tcc_timer_init+0x15c>)
    2be2:	429c      	cmp	r4, r3
    2be4:	d02e      	beq.n	2c44 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    2be6:	4b21      	ldr	r3, [pc, #132]	; (2c6c <_tcc_timer_init+0x160>)
    2be8:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    2bea:	bf04      	itt	eq
    2bec:	4b20      	ldreq	r3, [pc, #128]	; (2c70 <_tcc_timer_init+0x164>)
    2bee:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2bf0:	4620      	mov	r0, r4
    2bf2:	4b20      	ldr	r3, [pc, #128]	; (2c74 <_tcc_timer_init+0x168>)
    2bf4:	4798      	blx	r3
    2bf6:	f000 031f 	and.w	r3, r0, #31
    2bfa:	2201      	movs	r2, #1
    2bfc:	409a      	lsls	r2, r3
    2bfe:	0943      	lsrs	r3, r0, #5
    2c00:	009b      	lsls	r3, r3, #2
    2c02:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2c06:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2c0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c12:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2c1a:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2c1c:	2000      	movs	r0, #0
}
    2c1e:	b007      	add	sp, #28
    2c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2c22:	2601      	movs	r6, #1
    2c24:	e789      	b.n	2b3a <_tcc_timer_init+0x2e>
    2c26:	2602      	movs	r6, #2
    2c28:	e787      	b.n	2b3a <_tcc_timer_init+0x2e>
    2c2a:	2603      	movs	r6, #3
    2c2c:	e785      	b.n	2b3a <_tcc_timer_init+0x2e>
    2c2e:	2600      	movs	r6, #0
    2c30:	e783      	b.n	2b3a <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    2c32:	4b0f      	ldr	r3, [pc, #60]	; (2c70 <_tcc_timer_init+0x164>)
    2c34:	601d      	str	r5, [r3, #0]
    2c36:	e7d3      	b.n	2be0 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    2c38:	4b0d      	ldr	r3, [pc, #52]	; (2c70 <_tcc_timer_init+0x164>)
    2c3a:	605d      	str	r5, [r3, #4]
    2c3c:	e7d3      	b.n	2be6 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    2c3e:	4b0c      	ldr	r3, [pc, #48]	; (2c70 <_tcc_timer_init+0x164>)
    2c40:	609d      	str	r5, [r3, #8]
    2c42:	e7d5      	b.n	2bf0 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    2c44:	4b0a      	ldr	r3, [pc, #40]	; (2c70 <_tcc_timer_init+0x164>)
    2c46:	60dd      	str	r5, [r3, #12]
    2c48:	e7d2      	b.n	2bf0 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    2c4a:	f06f 0010 	mvn.w	r0, #16
    2c4e:	e7e6      	b.n	2c1e <_tcc_timer_init+0x112>
    2c50:	00007174 	.word	0x00007174
    2c54:	0000723c 	.word	0x0000723c
    2c58:	00001df5 	.word	0x00001df5
    2c5c:	41016000 	.word	0x41016000
    2c60:	41018000 	.word	0x41018000
    2c64:	42000c00 	.word	0x42000c00
    2c68:	42001000 	.word	0x42001000
    2c6c:	43001000 	.word	0x43001000
    2c70:	20000a64 	.word	0x20000a64
    2c74:	000029fd 	.word	0x000029fd

00002c78 <_tcc_timer_set_irq>:
{
    2c78:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    2c7a:	68c0      	ldr	r0, [r0, #12]
    2c7c:	4b02      	ldr	r3, [pc, #8]	; (2c88 <_tcc_timer_set_irq+0x10>)
    2c7e:	4798      	blx	r3
    2c80:	4b02      	ldr	r3, [pc, #8]	; (2c8c <_tcc_timer_set_irq+0x14>)
    2c82:	4798      	blx	r3
    2c84:	bd08      	pop	{r3, pc}
    2c86:	bf00      	nop
    2c88:	000029fd 	.word	0x000029fd
    2c8c:	00002119 	.word	0x00002119

00002c90 <_tcc_get_timer>:
}
    2c90:	4800      	ldr	r0, [pc, #0]	; (2c94 <_tcc_get_timer+0x4>)
    2c92:	4770      	bx	lr
    2c94:	20000068 	.word	0x20000068

00002c98 <TCC0_0_Handler>:
{
    2c98:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    2c9a:	4b02      	ldr	r3, [pc, #8]	; (2ca4 <TCC0_0_Handler+0xc>)
    2c9c:	6818      	ldr	r0, [r3, #0]
    2c9e:	4b02      	ldr	r3, [pc, #8]	; (2ca8 <TCC0_0_Handler+0x10>)
    2ca0:	4798      	blx	r3
    2ca2:	bd08      	pop	{r3, pc}
    2ca4:	20000a64 	.word	0x20000a64
    2ca8:	00002af3 	.word	0x00002af3

00002cac <TCC1_0_Handler>:
{
    2cac:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    2cae:	4b02      	ldr	r3, [pc, #8]	; (2cb8 <TCC1_0_Handler+0xc>)
    2cb0:	6858      	ldr	r0, [r3, #4]
    2cb2:	4b02      	ldr	r3, [pc, #8]	; (2cbc <TCC1_0_Handler+0x10>)
    2cb4:	4798      	blx	r3
    2cb6:	bd08      	pop	{r3, pc}
    2cb8:	20000a64 	.word	0x20000a64
    2cbc:	00002af3 	.word	0x00002af3

00002cc0 <TCC2_0_Handler>:
{
    2cc0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    2cc2:	4b02      	ldr	r3, [pc, #8]	; (2ccc <TCC2_0_Handler+0xc>)
    2cc4:	6898      	ldr	r0, [r3, #8]
    2cc6:	4b02      	ldr	r3, [pc, #8]	; (2cd0 <TCC2_0_Handler+0x10>)
    2cc8:	4798      	blx	r3
    2cca:	bd08      	pop	{r3, pc}
    2ccc:	20000a64 	.word	0x20000a64
    2cd0:	00002af3 	.word	0x00002af3

00002cd4 <TCC3_0_Handler>:
{
    2cd4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    2cd6:	4b02      	ldr	r3, [pc, #8]	; (2ce0 <TCC3_0_Handler+0xc>)
    2cd8:	68d8      	ldr	r0, [r3, #12]
    2cda:	4b02      	ldr	r3, [pc, #8]	; (2ce4 <TCC3_0_Handler+0x10>)
    2cdc:	4798      	blx	r3
    2cde:	bd08      	pop	{r3, pc}
    2ce0:	20000a64 	.word	0x20000a64
    2ce4:	00002af3 	.word	0x00002af3

00002ce8 <TCC4_0_Handler>:
{
    2ce8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    2cea:	4b02      	ldr	r3, [pc, #8]	; (2cf4 <TCC4_0_Handler+0xc>)
    2cec:	6918      	ldr	r0, [r3, #16]
    2cee:	4b02      	ldr	r3, [pc, #8]	; (2cf8 <TCC4_0_Handler+0x10>)
    2cf0:	4798      	blx	r3
    2cf2:	bd08      	pop	{r3, pc}
    2cf4:	20000a64 	.word	0x20000a64
    2cf8:	00002af3 	.word	0x00002af3

00002cfc <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2cfc:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2cfe:	6913      	ldr	r3, [r2, #16]
    2d00:	f013 0f03 	tst.w	r3, #3
    2d04:	d1fb      	bne.n	2cfe <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    2d06:	6813      	ldr	r3, [r2, #0]
    2d08:	f043 0302 	orr.w	r3, r3, #2
    2d0c:	6013      	str	r3, [r2, #0]
    2d0e:	4770      	bx	lr

00002d10 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2d10:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d12:	6913      	ldr	r3, [r2, #16]
    2d14:	f013 0f03 	tst.w	r3, #3
    2d18:	d1fb      	bne.n	2d12 <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2d1a:	6813      	ldr	r3, [r2, #0]
    2d1c:	f023 0302 	bic.w	r3, r3, #2
    2d20:	6013      	str	r3, [r2, #0]
    2d22:	4770      	bx	lr

00002d24 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    2d24:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2d26:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2d28:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d2c:	2b02      	cmp	r3, #2
    2d2e:	d00b      	beq.n	2d48 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2d30:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d32:	f013 0f0c 	tst.w	r3, #12
    2d36:	d009      	beq.n	2d4c <_tc_timer_set_period+0x28>
    2d38:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2d3a:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d3e:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    2d40:	bf04      	itt	eq
    2d42:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2d44:	76d1      	strbeq	r1, [r2, #27]
    2d46:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2d48:	61d1      	str	r1, [r2, #28]
    2d4a:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    2d4c:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2d4e:	8391      	strh	r1, [r2, #28]
    2d50:	4770      	bx	lr

00002d52 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    2d52:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2d54:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2d56:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d5a:	2b02      	cmp	r3, #2
    2d5c:	d00c      	beq.n	2d78 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2d5e:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d60:	f013 0f0c 	tst.w	r3, #12
    2d64:	d00a      	beq.n	2d7c <_tc_timer_get_period+0x2a>
    2d66:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2d68:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2d6c:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    2d6e:	bf06      	itte	eq
    2d70:	7ed0      	ldrbeq	r0, [r2, #27]
    2d72:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    2d74:	2000      	movne	r0, #0
}
    2d76:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    2d78:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    2d7a:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    2d7c:	8b90      	ldrh	r0, [r2, #28]
    2d7e:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2d80:	4770      	bx	lr

00002d82 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2d82:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2d84:	6913      	ldr	r3, [r2, #16]
    2d86:	f013 0f03 	tst.w	r3, #3
    2d8a:	d1fb      	bne.n	2d84 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2d8c:	6810      	ldr	r0, [r2, #0]
}
    2d8e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2d92:	4770      	bx	lr

00002d94 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2d94:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2d96:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2d98:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2d9a:	f012 0f01 	tst.w	r2, #1
    2d9e:	d100      	bne.n	2da2 <tc_interrupt_handler+0xe>
    2da0:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2da2:	2201      	movs	r2, #1
    2da4:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2da6:	6803      	ldr	r3, [r0, #0]
    2da8:	4798      	blx	r3
	}
}
    2daa:	e7f9      	b.n	2da0 <tc_interrupt_handler+0xc>

00002dac <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2dac:	b538      	push	{r3, r4, r5, lr}
    2dae:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2db0:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2db2:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2db4:	f013 0f01 	tst.w	r3, #1
    2db8:	d004      	beq.n	2dc4 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2dba:	2301      	movs	r3, #1
    2dbc:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2dbe:	6803      	ldr	r3, [r0, #0]
    2dc0:	b103      	cbz	r3, 2dc4 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2dc2:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2dc4:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2dc6:	f013 0f02 	tst.w	r3, #2
    2dca:	d005      	beq.n	2dd8 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2dcc:	2302      	movs	r3, #2
    2dce:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2dd0:	686b      	ldr	r3, [r5, #4]
    2dd2:	b10b      	cbz	r3, 2dd8 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2dd4:	4628      	mov	r0, r5
    2dd6:	4798      	blx	r3
    2dd8:	bd38      	pop	{r3, r4, r5, pc}
	...

00002ddc <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2ddc:	4b11      	ldr	r3, [pc, #68]	; (2e24 <_tc_init_irq_param+0x48>)
    2dde:	4298      	cmp	r0, r3
    2de0:	d011      	beq.n	2e06 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2de2:	4b11      	ldr	r3, [pc, #68]	; (2e28 <_tc_init_irq_param+0x4c>)
    2de4:	4298      	cmp	r0, r3
    2de6:	d011      	beq.n	2e0c <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    2de8:	4b10      	ldr	r3, [pc, #64]	; (2e2c <_tc_init_irq_param+0x50>)
    2dea:	4298      	cmp	r0, r3
    2dec:	d011      	beq.n	2e12 <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    2dee:	4b10      	ldr	r3, [pc, #64]	; (2e30 <_tc_init_irq_param+0x54>)
    2df0:	4298      	cmp	r0, r3
    2df2:	d011      	beq.n	2e18 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2df4:	4b0f      	ldr	r3, [pc, #60]	; (2e34 <_tc_init_irq_param+0x58>)
    2df6:	4298      	cmp	r0, r3
    2df8:	d011      	beq.n	2e1e <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    2dfa:	4b0f      	ldr	r3, [pc, #60]	; (2e38 <_tc_init_irq_param+0x5c>)
    2dfc:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    2dfe:	bf04      	itt	eq
    2e00:	4b0e      	ldreq	r3, [pc, #56]	; (2e3c <_tc_init_irq_param+0x60>)
    2e02:	6159      	streq	r1, [r3, #20]
    2e04:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2e06:	4b0d      	ldr	r3, [pc, #52]	; (2e3c <_tc_init_irq_param+0x60>)
    2e08:	6019      	str	r1, [r3, #0]
    2e0a:	e7f0      	b.n	2dee <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    2e0c:	4b0b      	ldr	r3, [pc, #44]	; (2e3c <_tc_init_irq_param+0x60>)
    2e0e:	6059      	str	r1, [r3, #4]
    2e10:	e7f0      	b.n	2df4 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    2e12:	4b0a      	ldr	r3, [pc, #40]	; (2e3c <_tc_init_irq_param+0x60>)
    2e14:	6099      	str	r1, [r3, #8]
    2e16:	e7f0      	b.n	2dfa <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    2e18:	4b08      	ldr	r3, [pc, #32]	; (2e3c <_tc_init_irq_param+0x60>)
    2e1a:	60d9      	str	r1, [r3, #12]
    2e1c:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    2e1e:	4b07      	ldr	r3, [pc, #28]	; (2e3c <_tc_init_irq_param+0x60>)
    2e20:	6119      	str	r1, [r3, #16]
    2e22:	4770      	bx	lr
    2e24:	40003800 	.word	0x40003800
    2e28:	40003c00 	.word	0x40003c00
    2e2c:	4101a000 	.word	0x4101a000
    2e30:	4101c000 	.word	0x4101c000
    2e34:	42001400 	.word	0x42001400
    2e38:	42001800 	.word	0x42001800
    2e3c:	20000a78 	.word	0x20000a78

00002e40 <get_tc_index>:
{
    2e40:	b570      	push	{r4, r5, r6, lr}
    2e42:	b086      	sub	sp, #24
    2e44:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2e46:	466c      	mov	r4, sp
    2e48:	4d18      	ldr	r5, [pc, #96]	; (2eac <get_tc_index+0x6c>)
    2e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e4e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2e52:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2e56:	9b00      	ldr	r3, [sp, #0]
    2e58:	42b3      	cmp	r3, r6
    2e5a:	d021      	beq.n	2ea0 <get_tc_index+0x60>
    2e5c:	4631      	mov	r1, r6
    2e5e:	2301      	movs	r3, #1
    2e60:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2e64:	428a      	cmp	r2, r1
    2e66:	d01c      	beq.n	2ea2 <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2e68:	3301      	adds	r3, #1
    2e6a:	2b06      	cmp	r3, #6
    2e6c:	d1f8      	bne.n	2e60 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    2e6e:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2e70:	4a0f      	ldr	r2, [pc, #60]	; (2eb0 <get_tc_index+0x70>)
    2e72:	7812      	ldrb	r2, [r2, #0]
    2e74:	429a      	cmp	r2, r3
    2e76:	d016      	beq.n	2ea6 <get_tc_index+0x66>
    2e78:	4a0d      	ldr	r2, [pc, #52]	; (2eb0 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2e7a:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    2e7c:	7d11      	ldrb	r1, [r2, #20]
    2e7e:	4299      	cmp	r1, r3
    2e80:	d012      	beq.n	2ea8 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2e82:	3001      	adds	r0, #1
    2e84:	b2c0      	uxtb	r0, r0
    2e86:	3214      	adds	r2, #20
    2e88:	2806      	cmp	r0, #6
    2e8a:	d1f7      	bne.n	2e7c <get_tc_index+0x3c>
	ASSERT(false);
    2e8c:	f240 2227 	movw	r2, #551	; 0x227
    2e90:	4908      	ldr	r1, [pc, #32]	; (2eb4 <get_tc_index+0x74>)
    2e92:	2000      	movs	r0, #0
    2e94:	4b08      	ldr	r3, [pc, #32]	; (2eb8 <get_tc_index+0x78>)
    2e96:	4798      	blx	r3
	return -1;
    2e98:	f04f 30ff 	mov.w	r0, #4294967295
}
    2e9c:	b006      	add	sp, #24
    2e9e:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2ea0:	2300      	movs	r3, #0
			return i;
    2ea2:	b2db      	uxtb	r3, r3
    2ea4:	e7e4      	b.n	2e70 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2ea6:	2000      	movs	r0, #0
			return i;
    2ea8:	b240      	sxtb	r0, r0
    2eaa:	e7f7      	b.n	2e9c <get_tc_index+0x5c>
    2eac:	00007254 	.word	0x00007254
    2eb0:	20000088 	.word	0x20000088
    2eb4:	0000726c 	.word	0x0000726c
    2eb8:	00001df5 	.word	0x00001df5

00002ebc <_tc_timer_init>:
{
    2ebc:	b570      	push	{r4, r5, r6, lr}
    2ebe:	4606      	mov	r6, r0
    2ec0:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2ec2:	4608      	mov	r0, r1
    2ec4:	4b48      	ldr	r3, [pc, #288]	; (2fe8 <_tc_timer_init+0x12c>)
    2ec6:	4798      	blx	r3
    2ec8:	4605      	mov	r5, r0
	device->hw = hw;
    2eca:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2ecc:	22af      	movs	r2, #175	; 0xaf
    2ece:	4947      	ldr	r1, [pc, #284]	; (2fec <_tc_timer_init+0x130>)
    2ed0:	2001      	movs	r0, #1
    2ed2:	4b47      	ldr	r3, [pc, #284]	; (2ff0 <_tc_timer_init+0x134>)
    2ed4:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2ed6:	6923      	ldr	r3, [r4, #16]
    2ed8:	f013 0f01 	tst.w	r3, #1
    2edc:	d1fb      	bne.n	2ed6 <_tc_timer_init+0x1a>
    2ede:	6923      	ldr	r3, [r4, #16]
    2ee0:	f013 0f03 	tst.w	r3, #3
    2ee4:	d1fb      	bne.n	2ede <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2ee6:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2ee8:	f013 0f02 	tst.w	r3, #2
    2eec:	d175      	bne.n	2fda <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2eee:	6923      	ldr	r3, [r4, #16]
    2ef0:	f013 0f01 	tst.w	r3, #1
    2ef4:	d1fb      	bne.n	2eee <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2ef6:	6823      	ldr	r3, [r4, #0]
    2ef8:	f043 0301 	orr.w	r3, r3, #1
    2efc:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2efe:	6923      	ldr	r3, [r4, #16]
    2f00:	f013 0f01 	tst.w	r3, #1
    2f04:	d1fb      	bne.n	2efe <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2f06:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f0a:	4a3a      	ldr	r2, [pc, #232]	; (2ff4 <_tc_timer_init+0x138>)
    2f0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f10:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2f12:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2f14:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2f16:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2f18:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2f1a:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2f1c:	2201      	movs	r2, #1
    2f1e:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2f20:	685b      	ldr	r3, [r3, #4]
    2f22:	f003 030c 	and.w	r3, r3, #12
    2f26:	2b08      	cmp	r3, #8
    2f28:	d03f      	beq.n	2faa <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	d147      	bne.n	2fbe <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2f2e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f32:	4a30      	ldr	r2, [pc, #192]	; (2ff4 <_tc_timer_init+0x138>)
    2f34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f38:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2f3a:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2f3c:	8a1b      	ldrh	r3, [r3, #16]
    2f3e:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    2f40:	2301      	movs	r3, #1
    2f42:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2f44:	4631      	mov	r1, r6
    2f46:	4620      	mov	r0, r4
    2f48:	4b2b      	ldr	r3, [pc, #172]	; (2ff8 <_tc_timer_init+0x13c>)
    2f4a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2f4c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f50:	4a28      	ldr	r2, [pc, #160]	; (2ff4 <_tc_timer_init+0x138>)
    2f52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2f5a:	2b00      	cmp	r3, #0
    2f5c:	db40      	blt.n	2fe0 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2f5e:	095a      	lsrs	r2, r3, #5
    2f60:	f003 031f 	and.w	r3, r3, #31
    2f64:	2101      	movs	r1, #1
    2f66:	fa01 f303 	lsl.w	r3, r1, r3
    2f6a:	3220      	adds	r2, #32
    2f6c:	4923      	ldr	r1, [pc, #140]	; (2ffc <_tc_timer_init+0x140>)
    2f6e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2f72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2f76:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2f7a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2f7e:	4b1d      	ldr	r3, [pc, #116]	; (2ff4 <_tc_timer_init+0x138>)
    2f80:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2f84:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2f88:	2b00      	cmp	r3, #0
    2f8a:	db2b      	blt.n	2fe4 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2f8c:	0959      	lsrs	r1, r3, #5
    2f8e:	f003 031f 	and.w	r3, r3, #31
    2f92:	2201      	movs	r2, #1
    2f94:	fa02 f303 	lsl.w	r3, r2, r3
    2f98:	4a18      	ldr	r2, [pc, #96]	; (2ffc <_tc_timer_init+0x140>)
    2f9a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2f9e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2fa2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    2fa6:	2000      	movs	r0, #0
    2fa8:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2faa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2fae:	4a11      	ldr	r2, [pc, #68]	; (2ff4 <_tc_timer_init+0x138>)
    2fb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2fb4:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2fb6:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2fb8:	691b      	ldr	r3, [r3, #16]
    2fba:	6223      	str	r3, [r4, #32]
    2fbc:	e7c0      	b.n	2f40 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2fbe:	2b04      	cmp	r3, #4
    2fc0:	d1be      	bne.n	2f40 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2fc2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2fc6:	4a0b      	ldr	r2, [pc, #44]	; (2ff4 <_tc_timer_init+0x138>)
    2fc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2fcc:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2fce:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2fd0:	7c1a      	ldrb	r2, [r3, #16]
    2fd2:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    2fd4:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2fd6:	76e3      	strb	r3, [r4, #27]
    2fd8:	e7b2      	b.n	2f40 <_tc_timer_init+0x84>
		return ERR_DENIED;
    2fda:	f06f 0010 	mvn.w	r0, #16
    2fde:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    2fe0:	2000      	movs	r0, #0
    2fe2:	bd70      	pop	{r4, r5, r6, pc}
    2fe4:	2000      	movs	r0, #0
}
    2fe6:	bd70      	pop	{r4, r5, r6, pc}
    2fe8:	00002e41 	.word	0x00002e41
    2fec:	0000726c 	.word	0x0000726c
    2ff0:	00001df5 	.word	0x00001df5
    2ff4:	20000088 	.word	0x20000088
    2ff8:	00002ddd 	.word	0x00002ddd
    2ffc:	e000e100 	.word	0xe000e100

00003000 <_tc_timer_deinit>:
{
    3000:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    3002:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    3004:	4620      	mov	r0, r4
    3006:	4b18      	ldr	r3, [pc, #96]	; (3068 <_tc_timer_deinit+0x68>)
    3008:	4798      	blx	r3
    300a:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    300c:	f240 1201 	movw	r2, #257	; 0x101
    3010:	4916      	ldr	r1, [pc, #88]	; (306c <_tc_timer_deinit+0x6c>)
    3012:	2001      	movs	r0, #1
    3014:	4b16      	ldr	r3, [pc, #88]	; (3070 <_tc_timer_deinit+0x70>)
    3016:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3018:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    301c:	4b15      	ldr	r3, [pc, #84]	; (3074 <_tc_timer_deinit+0x74>)
    301e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3022:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    3026:	2b00      	cmp	r3, #0
    3028:	db0d      	blt.n	3046 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    302a:	095a      	lsrs	r2, r3, #5
    302c:	f003 031f 	and.w	r3, r3, #31
    3030:	2101      	movs	r1, #1
    3032:	fa01 f303 	lsl.w	r3, r1, r3
    3036:	3220      	adds	r2, #32
    3038:	490f      	ldr	r1, [pc, #60]	; (3078 <_tc_timer_deinit+0x78>)
    303a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    303e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3042:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3046:	6923      	ldr	r3, [r4, #16]
    3048:	f013 0f03 	tst.w	r3, #3
    304c:	d1fb      	bne.n	3046 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    304e:	6823      	ldr	r3, [r4, #0]
    3050:	f023 0302 	bic.w	r3, r3, #2
    3054:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3056:	6923      	ldr	r3, [r4, #16]
    3058:	f013 0f01 	tst.w	r3, #1
    305c:	d1fb      	bne.n	3056 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    305e:	6823      	ldr	r3, [r4, #0]
    3060:	f043 0301 	orr.w	r3, r3, #1
    3064:	6023      	str	r3, [r4, #0]
    3066:	bd38      	pop	{r3, r4, r5, pc}
    3068:	00002e41 	.word	0x00002e41
    306c:	0000726c 	.word	0x0000726c
    3070:	00001df5 	.word	0x00001df5
    3074:	20000088 	.word	0x20000088
    3078:	e000e100 	.word	0xe000e100

0000307c <_tc_timer_set_irq>:
{
    307c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    307e:	68c0      	ldr	r0, [r0, #12]
    3080:	4b08      	ldr	r3, [pc, #32]	; (30a4 <_tc_timer_set_irq+0x28>)
    3082:	4798      	blx	r3
    3084:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    3086:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    308a:	4907      	ldr	r1, [pc, #28]	; (30a8 <_tc_timer_set_irq+0x2c>)
    308c:	2001      	movs	r0, #1
    308e:	4b07      	ldr	r3, [pc, #28]	; (30ac <_tc_timer_set_irq+0x30>)
    3090:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    3092:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3096:	4b06      	ldr	r3, [pc, #24]	; (30b0 <_tc_timer_set_irq+0x34>)
    3098:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    309c:	78a0      	ldrb	r0, [r4, #2]
    309e:	4b05      	ldr	r3, [pc, #20]	; (30b4 <_tc_timer_set_irq+0x38>)
    30a0:	4798      	blx	r3
    30a2:	bd10      	pop	{r4, pc}
    30a4:	00002e41 	.word	0x00002e41
    30a8:	0000726c 	.word	0x0000726c
    30ac:	00001df5 	.word	0x00001df5
    30b0:	20000088 	.word	0x20000088
    30b4:	00002119 	.word	0x00002119

000030b8 <_pwm_init>:
{
    30b8:	b570      	push	{r4, r5, r6, lr}
    30ba:	4606      	mov	r6, r0
    30bc:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    30be:	4608      	mov	r0, r1
    30c0:	4b3f      	ldr	r3, [pc, #252]	; (31c0 <_pwm_init+0x108>)
    30c2:	4798      	blx	r3
    30c4:	4605      	mov	r5, r0
	device->hw = hw;
    30c6:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30c8:	6923      	ldr	r3, [r4, #16]
    30ca:	f013 0f01 	tst.w	r3, #1
    30ce:	d1fb      	bne.n	30c8 <_pwm_init+0x10>
    30d0:	6923      	ldr	r3, [r4, #16]
    30d2:	f013 0f03 	tst.w	r3, #3
    30d6:	d1fb      	bne.n	30d0 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    30d8:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    30da:	f013 0f02 	tst.w	r3, #2
    30de:	d165      	bne.n	31ac <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30e0:	6923      	ldr	r3, [r4, #16]
    30e2:	f013 0f01 	tst.w	r3, #1
    30e6:	d1fb      	bne.n	30e0 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    30e8:	6823      	ldr	r3, [r4, #0]
    30ea:	f043 0301 	orr.w	r3, r3, #1
    30ee:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    30f0:	6923      	ldr	r3, [r4, #16]
    30f2:	f013 0f01 	tst.w	r3, #1
    30f6:	d1fb      	bne.n	30f0 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    30f8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    30fc:	4a31      	ldr	r2, [pc, #196]	; (31c4 <_pwm_init+0x10c>)
    30fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3102:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3104:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3106:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    3108:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    310a:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    310c:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    310e:	2203      	movs	r2, #3
    3110:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3112:	685b      	ldr	r3, [r3, #4]
    3114:	f003 030c 	and.w	r3, r3, #12
    3118:	2b08      	cmp	r3, #8
    311a:	d03d      	beq.n	3198 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    311c:	2b00      	cmp	r3, #0
    311e:	d148      	bne.n	31b2 <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3120:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3124:	4a27      	ldr	r2, [pc, #156]	; (31c4 <_pwm_init+0x10c>)
    3126:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    312a:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    312c:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    312e:	8a1b      	ldrh	r3, [r3, #16]
    3130:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    3132:	4631      	mov	r1, r6
    3134:	4620      	mov	r0, r4
    3136:	4b24      	ldr	r3, [pc, #144]	; (31c8 <_pwm_init+0x110>)
    3138:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    313a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    313e:	4a21      	ldr	r2, [pc, #132]	; (31c4 <_pwm_init+0x10c>)
    3140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3144:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3148:	2b00      	cmp	r3, #0
    314a:	db35      	blt.n	31b8 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    314c:	095a      	lsrs	r2, r3, #5
    314e:	f003 031f 	and.w	r3, r3, #31
    3152:	2101      	movs	r1, #1
    3154:	fa01 f303 	lsl.w	r3, r1, r3
    3158:	3220      	adds	r2, #32
    315a:	491c      	ldr	r1, [pc, #112]	; (31cc <_pwm_init+0x114>)
    315c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3160:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3164:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3168:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    316c:	4b15      	ldr	r3, [pc, #84]	; (31c4 <_pwm_init+0x10c>)
    316e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3172:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    3176:	2b00      	cmp	r3, #0
    3178:	db20      	blt.n	31bc <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    317a:	0959      	lsrs	r1, r3, #5
    317c:	f003 031f 	and.w	r3, r3, #31
    3180:	2201      	movs	r2, #1
    3182:	fa02 f303 	lsl.w	r3, r2, r3
    3186:	4a11      	ldr	r2, [pc, #68]	; (31cc <_pwm_init+0x114>)
    3188:	f101 0060 	add.w	r0, r1, #96	; 0x60
    318c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3190:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    3194:	2000      	movs	r0, #0
    3196:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3198:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    319c:	4a09      	ldr	r2, [pc, #36]	; (31c4 <_pwm_init+0x10c>)
    319e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    31a2:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    31a4:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    31a6:	691b      	ldr	r3, [r3, #16]
    31a8:	6223      	str	r3, [r4, #32]
    31aa:	e7c2      	b.n	3132 <_pwm_init+0x7a>
		return ERR_DENIED;
    31ac:	f06f 0010 	mvn.w	r0, #16
    31b0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    31b2:	f04f 30ff 	mov.w	r0, #4294967295
    31b6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    31b8:	2000      	movs	r0, #0
    31ba:	bd70      	pop	{r4, r5, r6, pc}
    31bc:	2000      	movs	r0, #0
}
    31be:	bd70      	pop	{r4, r5, r6, pc}
    31c0:	00002e41 	.word	0x00002e41
    31c4:	20000088 	.word	0x20000088
    31c8:	00002ddd 	.word	0x00002ddd
    31cc:	e000e100 	.word	0xe000e100

000031d0 <_tc_get_timer>:
}
    31d0:	4800      	ldr	r0, [pc, #0]	; (31d4 <_tc_get_timer+0x4>)
    31d2:	4770      	bx	lr
    31d4:	20000100 	.word	0x20000100

000031d8 <_tc_get_pwm>:
}
    31d8:	2000      	movs	r0, #0
    31da:	4770      	bx	lr

000031dc <TC0_Handler>:
{
    31dc:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    31de:	4b02      	ldr	r3, [pc, #8]	; (31e8 <TC0_Handler+0xc>)
    31e0:	6818      	ldr	r0, [r3, #0]
    31e2:	4b02      	ldr	r3, [pc, #8]	; (31ec <TC0_Handler+0x10>)
    31e4:	4798      	blx	r3
    31e6:	bd08      	pop	{r3, pc}
    31e8:	20000a78 	.word	0x20000a78
    31ec:	00002dad 	.word	0x00002dad

000031f0 <TC1_Handler>:
{
    31f0:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    31f2:	4b02      	ldr	r3, [pc, #8]	; (31fc <TC1_Handler+0xc>)
    31f4:	6858      	ldr	r0, [r3, #4]
    31f6:	4b02      	ldr	r3, [pc, #8]	; (3200 <TC1_Handler+0x10>)
    31f8:	4798      	blx	r3
    31fa:	bd08      	pop	{r3, pc}
    31fc:	20000a78 	.word	0x20000a78
    3200:	00002dad 	.word	0x00002dad

00003204 <TC2_Handler>:
{
    3204:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    3206:	4b02      	ldr	r3, [pc, #8]	; (3210 <TC2_Handler+0xc>)
    3208:	6898      	ldr	r0, [r3, #8]
    320a:	4b02      	ldr	r3, [pc, #8]	; (3214 <TC2_Handler+0x10>)
    320c:	4798      	blx	r3
    320e:	bd08      	pop	{r3, pc}
    3210:	20000a78 	.word	0x20000a78
    3214:	00002dad 	.word	0x00002dad

00003218 <TC3_Handler>:
{
    3218:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    321a:	4b02      	ldr	r3, [pc, #8]	; (3224 <TC3_Handler+0xc>)
    321c:	68d8      	ldr	r0, [r3, #12]
    321e:	4b02      	ldr	r3, [pc, #8]	; (3228 <TC3_Handler+0x10>)
    3220:	4798      	blx	r3
    3222:	bd08      	pop	{r3, pc}
    3224:	20000a78 	.word	0x20000a78
    3228:	00002d95 	.word	0x00002d95

0000322c <TC4_Handler>:
{
    322c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    322e:	4b02      	ldr	r3, [pc, #8]	; (3238 <TC4_Handler+0xc>)
    3230:	6918      	ldr	r0, [r3, #16]
    3232:	4b02      	ldr	r3, [pc, #8]	; (323c <TC4_Handler+0x10>)
    3234:	4798      	blx	r3
    3236:	bd08      	pop	{r3, pc}
    3238:	20000a78 	.word	0x20000a78
    323c:	00002d95 	.word	0x00002d95

00003240 <TC5_Handler>:
{
    3240:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    3242:	4b02      	ldr	r3, [pc, #8]	; (324c <TC5_Handler+0xc>)
    3244:	6958      	ldr	r0, [r3, #20]
    3246:	4b02      	ldr	r3, [pc, #8]	; (3250 <TC5_Handler+0x10>)
    3248:	4798      	blx	r3
    324a:	bd08      	pop	{r3, pc}
    324c:	20000a78 	.word	0x20000a78
    3250:	00002d95 	.word	0x00002d95

00003254 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    3254:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3256:	4604      	mov	r4, r0
    3258:	b330      	cbz	r0, 32a8 <_wdt_init+0x54>
    325a:	6800      	ldr	r0, [r0, #0]
    325c:	3000      	adds	r0, #0
    325e:	bf18      	it	ne
    3260:	2001      	movne	r0, #1
    3262:	225a      	movs	r2, #90	; 0x5a
    3264:	4914      	ldr	r1, [pc, #80]	; (32b8 <_wdt_init+0x64>)
    3266:	4b15      	ldr	r3, [pc, #84]	; (32bc <_wdt_init+0x68>)
    3268:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    326a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    326c:	689a      	ldr	r2, [r3, #8]
    326e:	f012 0f0e 	tst.w	r2, #14
    3272:	d1fb      	bne.n	326c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3274:	781a      	ldrb	r2, [r3, #0]
    3276:	09d2      	lsrs	r2, r2, #7
    3278:	d118      	bne.n	32ac <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    327a:	689a      	ldr	r2, [r3, #8]
    327c:	f012 0f0e 	tst.w	r2, #14
    3280:	d1fb      	bne.n	327a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3282:	781a      	ldrb	r2, [r3, #0]
    3284:	f012 0f02 	tst.w	r2, #2
    3288:	d113      	bne.n	32b2 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    328a:	689a      	ldr	r2, [r3, #8]
    328c:	f012 0f0e 	tst.w	r2, #14
    3290:	d1fb      	bne.n	328a <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    3292:	781a      	ldrb	r2, [r3, #0]
    3294:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    3298:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    329a:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    329c:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    329e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    32a2:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    32a4:	2000      	movs	r0, #0
    32a6:	bd10      	pop	{r4, pc}
    32a8:	2000      	movs	r0, #0
    32aa:	e7da      	b.n	3262 <_wdt_init+0xe>
		return ERR_DENIED;
    32ac:	f06f 0010 	mvn.w	r0, #16
    32b0:	bd10      	pop	{r4, pc}
    32b2:	f06f 0010 	mvn.w	r0, #16
}
    32b6:	bd10      	pop	{r4, pc}
    32b8:	00007280 	.word	0x00007280
    32bc:	00001df5 	.word	0x00001df5

000032c0 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    32c0:	b570      	push	{r4, r5, r6, lr}
    32c2:	460d      	mov	r5, r1
    32c4:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    32c6:	4606      	mov	r6, r0
    32c8:	2800      	cmp	r0, #0
    32ca:	d044      	beq.n	3356 <_wdt_set_timeout_period+0x96>
    32cc:	6800      	ldr	r0, [r0, #0]
    32ce:	3000      	adds	r0, #0
    32d0:	bf18      	it	ne
    32d2:	2001      	movne	r0, #1
    32d4:	2284      	movs	r2, #132	; 0x84
    32d6:	493f      	ldr	r1, [pc, #252]	; (33d4 <_wdt_set_timeout_period+0x114>)
    32d8:	4b3f      	ldr	r3, [pc, #252]	; (33d8 <_wdt_set_timeout_period+0x118>)
    32da:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    32dc:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    32de:	6893      	ldr	r3, [r2, #8]
    32e0:	f013 0f0e 	tst.w	r3, #14
    32e4:	d1fb      	bne.n	32de <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    32e6:	7813      	ldrb	r3, [r2, #0]
    32e8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    32ec:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    32ee:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    32f0:	688b      	ldr	r3, [r1, #8]
    32f2:	f013 0f0e 	tst.w	r3, #14
    32f6:	d1fb      	bne.n	32f0 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    32f8:	780b      	ldrb	r3, [r1, #0]
    32fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    32fe:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    3300:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3302:	6899      	ldr	r1, [r3, #8]
    3304:	f011 0f0e 	tst.w	r1, #14
    3308:	d1fb      	bne.n	3302 <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    330a:	781a      	ldrb	r2, [r3, #0]
    330c:	09d2      	lsrs	r2, r2, #7
    330e:	d158      	bne.n	33c2 <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3310:	6899      	ldr	r1, [r3, #8]
    3312:	f011 0f0e 	tst.w	r1, #14
    3316:	d1fb      	bne.n	3310 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3318:	781a      	ldrb	r2, [r3, #0]
    331a:	f012 0f02 	tst.w	r2, #2
    331e:	d153      	bne.n	33c8 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    3320:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    3324:	4628      	mov	r0, r5
    3326:	2100      	movs	r1, #0
    3328:	ea50 0201 	orrs.w	r2, r0, r1
    332c:	d14f      	bne.n	33ce <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    332e:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    3332:	d038      	beq.n	33a6 <_wdt_set_timeout_period+0xe6>
    3334:	d911      	bls.n	335a <_wdt_set_timeout_period+0x9a>
    3336:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    333a:	d038      	beq.n	33ae <_wdt_set_timeout_period+0xee>
    333c:	d927      	bls.n	338e <_wdt_set_timeout_period+0xce>
    333e:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    3342:	d038      	beq.n	33b6 <_wdt_set_timeout_period+0xf6>
    3344:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    3348:	d037      	beq.n	33ba <_wdt_set_timeout_period+0xfa>
    334a:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    334e:	d030      	beq.n	33b2 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    3350:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    3354:	bd70      	pop	{r4, r5, r6, pc}
    3356:	2000      	movs	r0, #0
    3358:	e7bc      	b.n	32d4 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    335a:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    335e:	d01e      	beq.n	339e <_wdt_set_timeout_period+0xde>
    3360:	d80d      	bhi.n	337e <_wdt_set_timeout_period+0xbe>
    3362:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    3366:	d02a      	beq.n	33be <_wdt_set_timeout_period+0xfe>
    3368:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    336c:	d1f0      	bne.n	3350 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    336e:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    3370:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    3372:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    3376:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    3378:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    337a:	2000      	movs	r0, #0
    337c:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    337e:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    3382:	d00e      	beq.n	33a2 <_wdt_set_timeout_period+0xe2>
    3384:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    3388:	d1e2      	bne.n	3350 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    338a:	2104      	movs	r1, #4
			break;
    338c:	e7f0      	b.n	3370 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    338e:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    3392:	d00a      	beq.n	33aa <_wdt_set_timeout_period+0xea>
    3394:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    3398:	d1da      	bne.n	3350 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    339a:	2107      	movs	r1, #7
			break;
    339c:	e7e8      	b.n	3370 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    339e:	2102      	movs	r1, #2
			break;
    33a0:	e7e6      	b.n	3370 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    33a2:	2103      	movs	r1, #3
			break;
    33a4:	e7e4      	b.n	3370 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    33a6:	2105      	movs	r1, #5
			break;
    33a8:	e7e2      	b.n	3370 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    33aa:	2106      	movs	r1, #6
			break;
    33ac:	e7e0      	b.n	3370 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    33ae:	2108      	movs	r1, #8
			break;
    33b0:	e7de      	b.n	3370 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    33b2:	2109      	movs	r1, #9
			break;
    33b4:	e7dc      	b.n	3370 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    33b6:	210a      	movs	r1, #10
			break;
    33b8:	e7da      	b.n	3370 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    33ba:	210b      	movs	r1, #11
			break;
    33bc:	e7d8      	b.n	3370 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    33be:	2100      	movs	r1, #0
    33c0:	e7d6      	b.n	3370 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    33c2:	f06f 0010 	mvn.w	r0, #16
    33c6:	bd70      	pop	{r4, r5, r6, pc}
    33c8:	f06f 0010 	mvn.w	r0, #16
    33cc:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    33ce:	f06f 000c 	mvn.w	r0, #12
    33d2:	bd70      	pop	{r4, r5, r6, pc}
    33d4:	00007280 	.word	0x00007280
    33d8:	00001df5 	.word	0x00001df5

000033dc <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    33dc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    33de:	4604      	mov	r4, r0
    33e0:	b198      	cbz	r0, 340a <_wdt_enable+0x2e>
    33e2:	6800      	ldr	r0, [r0, #0]
    33e4:	3000      	adds	r0, #0
    33e6:	bf18      	it	ne
    33e8:	2001      	movne	r0, #1
    33ea:	f240 1207 	movw	r2, #263	; 0x107
    33ee:	4908      	ldr	r1, [pc, #32]	; (3410 <_wdt_enable+0x34>)
    33f0:	4b08      	ldr	r3, [pc, #32]	; (3414 <_wdt_enable+0x38>)
    33f2:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    33f4:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    33f6:	6893      	ldr	r3, [r2, #8]
    33f8:	f013 0f0e 	tst.w	r3, #14
    33fc:	d1fb      	bne.n	33f6 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    33fe:	7813      	ldrb	r3, [r2, #0]
    3400:	f043 0302 	orr.w	r3, r3, #2
    3404:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    3406:	2000      	movs	r0, #0
    3408:	bd10      	pop	{r4, pc}
    340a:	2000      	movs	r0, #0
    340c:	e7ed      	b.n	33ea <_wdt_enable+0xe>
    340e:	bf00      	nop
    3410:	00007280 	.word	0x00007280
    3414:	00001df5 	.word	0x00001df5

00003418 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    3418:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    341a:	4604      	mov	r4, r0
    341c:	b168      	cbz	r0, 343a <_wdt_feed+0x22>
    341e:	6800      	ldr	r0, [r0, #0]
    3420:	3000      	adds	r0, #0
    3422:	bf18      	it	ne
    3424:	2001      	movne	r0, #1
    3426:	f240 1225 	movw	r2, #293	; 0x125
    342a:	4905      	ldr	r1, [pc, #20]	; (3440 <_wdt_feed+0x28>)
    342c:	4b05      	ldr	r3, [pc, #20]	; (3444 <_wdt_feed+0x2c>)
    342e:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    3430:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    3432:	22a5      	movs	r2, #165	; 0xa5
    3434:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    3436:	2000      	movs	r0, #0
    3438:	bd10      	pop	{r4, pc}
    343a:	2000      	movs	r0, #0
    343c:	e7f3      	b.n	3426 <_wdt_feed+0xe>
    343e:	bf00      	nop
    3440:	00007280 	.word	0x00007280
    3444:	00001df5 	.word	0x00001df5

00003448 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    3448:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    344a:	2200      	movs	r2, #0
    344c:	2108      	movs	r1, #8
    344e:	2001      	movs	r0, #1
    3450:	4d0d      	ldr	r5, [pc, #52]	; (3488 <createQueuesAndSemaphores+0x40>)
    3452:	47a8      	blx	r5
    3454:	4c0d      	ldr	r4, [pc, #52]	; (348c <createQueuesAndSemaphores+0x44>)
    3456:	6020      	str	r0, [r4, #0]
    AtReceiveQueue  = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    3458:	2200      	movs	r2, #0
    345a:	2101      	movs	r1, #1
    345c:	4608      	mov	r0, r1
    345e:	47a8      	blx	r5
    3460:	4b0b      	ldr	r3, [pc, #44]	; (3490 <createQueuesAndSemaphores+0x48>)
    3462:	6018      	str	r0, [r3, #0]

    if((AtTransmitQueue != NULL) &&
    3464:	6823      	ldr	r3, [r4, #0]
    3466:	b16b      	cbz	r3, 3484 <createQueuesAndSemaphores+0x3c>
    3468:	b160      	cbz	r0, 3484 <createQueuesAndSemaphores+0x3c>
       (AtReceiveQueue  != NULL))
    {
    	DEBUG_PRINT("Tx & Rx Queues are created");
    346a:	480a      	ldr	r0, [pc, #40]	; (3494 <createQueuesAndSemaphores+0x4c>)
    346c:	4b0a      	ldr	r3, [pc, #40]	; (3498 <createQueuesAndSemaphores+0x50>)
    346e:	4798      	blx	r3

    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    3470:	2203      	movs	r2, #3
    3472:	2100      	movs	r1, #0
    3474:	2001      	movs	r0, #1
    3476:	47a8      	blx	r5
    3478:	4b08      	ldr	r3, [pc, #32]	; (349c <createQueuesAndSemaphores+0x54>)
    347a:	6018      	str	r0, [r3, #0]
		
		if((AtTxQueueLoadSemaphore != NULL))
    347c:	b110      	cbz	r0, 3484 <createQueuesAndSemaphores+0x3c>
		{
			DEBUG_PRINT("Semaphores are created");
    347e:	4808      	ldr	r0, [pc, #32]	; (34a0 <createQueuesAndSemaphores+0x58>)
    3480:	4b05      	ldr	r3, [pc, #20]	; (3498 <createQueuesAndSemaphores+0x50>)
    3482:	4798      	blx	r3
    }
    else
    {
    	status = false;
    }
}
    3484:	bd38      	pop	{r3, r4, r5, pc}
    3486:	bf00      	nop
    3488:	00003d69 	.word	0x00003d69
    348c:	20003410 	.word	0x20003410
    3490:	20003418 	.word	0x20003418
    3494:	00007298 	.word	0x00007298
    3498:	000010b5 	.word	0x000010b5
    349c:	20003414 	.word	0x20003414
    34a0:	000072b4 	.word	0x000072b4

000034a4 <main>:
{
    34a4:	b580      	push	{r7, lr}
    34a6:	b082      	sub	sp, #8
    atmel_start_init();	
    34a8:	4b29      	ldr	r3, [pc, #164]	; (3550 <main+0xac>)
    34aa:	4798      	blx	r3
    DispatchTaskStatus = xTaskCreate( DispatchTask, "DispatchTask", 150, NULL, 2, &xDispatchTaskHandle );
    34ac:	4b29      	ldr	r3, [pc, #164]	; (3554 <main+0xb0>)
    34ae:	9301      	str	r3, [sp, #4]
    34b0:	2702      	movs	r7, #2
    34b2:	9700      	str	r7, [sp, #0]
    34b4:	2300      	movs	r3, #0
    34b6:	2296      	movs	r2, #150	; 0x96
    34b8:	4927      	ldr	r1, [pc, #156]	; (3558 <main+0xb4>)
    34ba:	4828      	ldr	r0, [pc, #160]	; (355c <main+0xb8>)
    34bc:	4d28      	ldr	r5, [pc, #160]	; (3560 <main+0xbc>)
    34be:	47a8      	blx	r5
    34c0:	4c28      	ldr	r4, [pc, #160]	; (3564 <main+0xc0>)
    34c2:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTask", 150, NULL, 1, &xModemTxTaskHandle );
    34c4:	4b28      	ldr	r3, [pc, #160]	; (3568 <main+0xc4>)
    34c6:	9301      	str	r3, [sp, #4]
    34c8:	2601      	movs	r6, #1
    34ca:	9600      	str	r6, [sp, #0]
    34cc:	2300      	movs	r3, #0
    34ce:	2296      	movs	r2, #150	; 0x96
    34d0:	4926      	ldr	r1, [pc, #152]	; (356c <main+0xc8>)
    34d2:	4827      	ldr	r0, [pc, #156]	; (3570 <main+0xcc>)
    34d4:	47a8      	blx	r5
    34d6:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    34d8:	4b26      	ldr	r3, [pc, #152]	; (3574 <main+0xd0>)
    34da:	9301      	str	r3, [sp, #4]
    34dc:	9700      	str	r7, [sp, #0]
    34de:	2300      	movs	r3, #0
    34e0:	2296      	movs	r2, #150	; 0x96
    34e2:	4925      	ldr	r1, [pc, #148]	; (3578 <main+0xd4>)
    34e4:	4825      	ldr	r0, [pc, #148]	; (357c <main+0xd8>)
    34e6:	47a8      	blx	r5
    34e8:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    34ea:	4b25      	ldr	r3, [pc, #148]	; (3580 <main+0xdc>)
    34ec:	9301      	str	r3, [sp, #4]
    34ee:	9600      	str	r6, [sp, #0]
    34f0:	2300      	movs	r3, #0
    34f2:	2296      	movs	r2, #150	; 0x96
    34f4:	4923      	ldr	r1, [pc, #140]	; (3584 <main+0xe0>)
    34f6:	4824      	ldr	r0, [pc, #144]	; (3588 <main+0xe4>)
    34f8:	47a8      	blx	r5
    34fa:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    34fc:	4b23      	ldr	r3, [pc, #140]	; (358c <main+0xe8>)
    34fe:	9301      	str	r3, [sp, #4]
    3500:	9600      	str	r6, [sp, #0]
    3502:	2300      	movs	r3, #0
    3504:	2296      	movs	r2, #150	; 0x96
    3506:	4922      	ldr	r1, [pc, #136]	; (3590 <main+0xec>)
    3508:	4822      	ldr	r0, [pc, #136]	; (3594 <main+0xf0>)
    350a:	47a8      	blx	r5
    if((DispatchTaskStatus == pdPASS) &&
    350c:	6823      	ldr	r3, [r4, #0]
    350e:	42b3      	cmp	r3, r6
    3510:	d006      	beq.n	3520 <main+0x7c>
    	DEBUG_PRINT("Failed to create tasks");
    3512:	4821      	ldr	r0, [pc, #132]	; (3598 <main+0xf4>)
    3514:	4b21      	ldr	r3, [pc, #132]	; (359c <main+0xf8>)
    3516:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    3518:	4821      	ldr	r0, [pc, #132]	; (35a0 <main+0xfc>)
    351a:	4b20      	ldr	r3, [pc, #128]	; (359c <main+0xf8>)
    351c:	4798      	blx	r3
    351e:	e7fe      	b.n	351e <main+0x7a>
    if((DispatchTaskStatus == pdPASS) &&
    3520:	68e3      	ldr	r3, [r4, #12]
    3522:	42b3      	cmp	r3, r6
    3524:	d1f5      	bne.n	3512 <main+0x6e>
       (ModemProcessTaskStatus == pdPASS) &&
    3526:	6863      	ldr	r3, [r4, #4]
    3528:	42b3      	cmp	r3, r6
    352a:	d1f2      	bne.n	3512 <main+0x6e>
       (ModemTxTaskStatus == pdPASS) &&
    352c:	68a3      	ldr	r3, [r4, #8]
    352e:	42b3      	cmp	r3, r6
    3530:	d1ef      	bne.n	3512 <main+0x6e>
       (ModemRxTaskStatus == pdPASS) &&
    3532:	42b0      	cmp	r0, r6
    3534:	d1ed      	bne.n	3512 <main+0x6e>
    	DEBUG_PRINT("Successfully Created the Tasks");
    3536:	481b      	ldr	r0, [pc, #108]	; (35a4 <main+0x100>)
    3538:	4b18      	ldr	r3, [pc, #96]	; (359c <main+0xf8>)
    353a:	4798      	blx	r3
    	if(false != createQueuesAndSemaphores())
    353c:	4b1a      	ldr	r3, [pc, #104]	; (35a8 <main+0x104>)
    353e:	4798      	blx	r3
    3540:	b110      	cbz	r0, 3548 <main+0xa4>
    		vTaskStartScheduler();
    3542:	4b1a      	ldr	r3, [pc, #104]	; (35ac <main+0x108>)
    3544:	4798      	blx	r3
    3546:	e7e7      	b.n	3518 <main+0x74>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    3548:	4819      	ldr	r0, [pc, #100]	; (35b0 <main+0x10c>)
    354a:	4b14      	ldr	r3, [pc, #80]	; (359c <main+0xf8>)
    354c:	4798      	blx	r3
    354e:	e7e3      	b.n	3518 <main+0x74>
    3550:	00001211 	.word	0x00001211
    3554:	20003408 	.word	0x20003408
    3558:	000072cc 	.word	0x000072cc
    355c:	00000339 	.word	0x00000339
    3560:	0000456d 	.word	0x0000456d
    3564:	20000a90 	.word	0x20000a90
    3568:	200033f0 	.word	0x200033f0
    356c:	000072dc 	.word	0x000072dc
    3570:	00000f09 	.word	0x00000f09
    3574:	20003404 	.word	0x20003404
    3578:	000072e8 	.word	0x000072e8
    357c:	00000e75 	.word	0x00000e75
    3580:	200033f8 	.word	0x200033f8
    3584:	000072f4 	.word	0x000072f4
    3588:	00000bfd 	.word	0x00000bfd
    358c:	200033fc 	.word	0x200033fc
    3590:	00007308 	.word	0x00007308
    3594:	000008d1 	.word	0x000008d1
    3598:	00007358 	.word	0x00007358
    359c:	000010b5 	.word	0x000010b5
    35a0:	00007370 	.word	0x00007370
    35a4:	00007318 	.word	0x00007318
    35a8:	00003449 	.word	0x00003449
    35ac:	00004749 	.word	0x00004749
    35b0:	00007338 	.word	0x00007338

000035b4 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    35b4:	f100 0308 	add.w	r3, r0, #8
    35b8:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    35ba:	f04f 32ff 	mov.w	r2, #4294967295
    35be:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    35c0:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    35c2:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    35c4:	2300      	movs	r3, #0
    35c6:	6003      	str	r3, [r0, #0]
    35c8:	4770      	bx	lr

000035ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    35ca:	2300      	movs	r3, #0
    35cc:	6103      	str	r3, [r0, #16]
    35ce:	4770      	bx	lr

000035d0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    35d0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    35d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    35d4:	689a      	ldr	r2, [r3, #8]
    35d6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    35d8:	689a      	ldr	r2, [r3, #8]
    35da:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    35dc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    35de:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    35e0:	6803      	ldr	r3, [r0, #0]
    35e2:	3301      	adds	r3, #1
    35e4:	6003      	str	r3, [r0, #0]
    35e6:	4770      	bx	lr

000035e8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    35e8:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    35ea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    35ec:	f1b5 3fff 	cmp.w	r5, #4294967295
    35f0:	d002      	beq.n	35f8 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    35f2:	f100 0208 	add.w	r2, r0, #8
    35f6:	e002      	b.n	35fe <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    35f8:	6902      	ldr	r2, [r0, #16]
    35fa:	e004      	b.n	3606 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    35fc:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    35fe:	6853      	ldr	r3, [r2, #4]
    3600:	681c      	ldr	r4, [r3, #0]
    3602:	42a5      	cmp	r5, r4
    3604:	d2fa      	bcs.n	35fc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    3606:	6853      	ldr	r3, [r2, #4]
    3608:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    360a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    360c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    360e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    3610:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    3612:	6803      	ldr	r3, [r0, #0]
    3614:	3301      	adds	r3, #1
    3616:	6003      	str	r3, [r0, #0]
}
    3618:	bc30      	pop	{r4, r5}
    361a:	4770      	bx	lr

0000361c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    361c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    361e:	6842      	ldr	r2, [r0, #4]
    3620:	6881      	ldr	r1, [r0, #8]
    3622:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3624:	6882      	ldr	r2, [r0, #8]
    3626:	6841      	ldr	r1, [r0, #4]
    3628:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    362a:	685a      	ldr	r2, [r3, #4]
    362c:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    362e:	bf04      	itt	eq
    3630:	6882      	ldreq	r2, [r0, #8]
    3632:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    3634:	2200      	movs	r2, #0
    3636:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    3638:	681a      	ldr	r2, [r3, #0]
    363a:	3a01      	subs	r2, #1
    363c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    363e:	6818      	ldr	r0, [r3, #0]
}
    3640:	4770      	bx	lr
	...

00003644 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    3644:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    3646:	2300      	movs	r3, #0
    3648:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    364a:	4b0d      	ldr	r3, [pc, #52]	; (3680 <prvTaskExitError+0x3c>)
    364c:	681b      	ldr	r3, [r3, #0]
    364e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3652:	d008      	beq.n	3666 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    3654:	f04f 0380 	mov.w	r3, #128	; 0x80
    3658:	f383 8811 	msr	BASEPRI, r3
    365c:	f3bf 8f6f 	isb	sy
    3660:	f3bf 8f4f 	dsb	sy
    3664:	e7fe      	b.n	3664 <prvTaskExitError+0x20>
    3666:	f04f 0380 	mov.w	r3, #128	; 0x80
    366a:	f383 8811 	msr	BASEPRI, r3
    366e:	f3bf 8f6f 	isb	sy
    3672:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    3676:	9b01      	ldr	r3, [sp, #4]
    3678:	2b00      	cmp	r3, #0
    367a:	d0fc      	beq.n	3676 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    367c:	b002      	add	sp, #8
    367e:	4770      	bx	lr
    3680:	20000120 	.word	0x20000120

00003684 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    3684:	4808      	ldr	r0, [pc, #32]	; (36a8 <prvPortStartFirstTask+0x24>)
    3686:	6800      	ldr	r0, [r0, #0]
    3688:	6800      	ldr	r0, [r0, #0]
    368a:	f380 8808 	msr	MSP, r0
    368e:	f04f 0000 	mov.w	r0, #0
    3692:	f380 8814 	msr	CONTROL, r0
    3696:	b662      	cpsie	i
    3698:	b661      	cpsie	f
    369a:	f3bf 8f4f 	dsb	sy
    369e:	f3bf 8f6f 	isb	sy
    36a2:	df00      	svc	0
    36a4:	bf00      	nop
    36a6:	0000      	.short	0x0000
    36a8:	e000ed08 	.word	0xe000ed08

000036ac <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    36ac:	f8df 000c 	ldr.w	r0, [pc, #12]	; 36bc <vPortEnableVFP+0x10>
    36b0:	6801      	ldr	r1, [r0, #0]
    36b2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    36b6:	6001      	str	r1, [r0, #0]
    36b8:	4770      	bx	lr
    36ba:	0000      	.short	0x0000
    36bc:	e000ed88 	.word	0xe000ed88

000036c0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    36c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    36c4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    36c8:	f021 0101 	bic.w	r1, r1, #1
    36cc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    36d0:	4b05      	ldr	r3, [pc, #20]	; (36e8 <pxPortInitialiseStack+0x28>)
    36d2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    36d6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    36da:	f06f 0302 	mvn.w	r3, #2
    36de:	f840 3c24 	str.w	r3, [r0, #-36]
}
    36e2:	3844      	subs	r0, #68	; 0x44
    36e4:	4770      	bx	lr
    36e6:	bf00      	nop
    36e8:	00003645 	.word	0x00003645
    36ec:	00000000 	.word	0x00000000

000036f0 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    36f0:	4b07      	ldr	r3, [pc, #28]	; (3710 <pxCurrentTCBConst2>)
    36f2:	6819      	ldr	r1, [r3, #0]
    36f4:	6808      	ldr	r0, [r1, #0]
    36f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    36fa:	f380 8809 	msr	PSP, r0
    36fe:	f3bf 8f6f 	isb	sy
    3702:	f04f 0000 	mov.w	r0, #0
    3706:	f380 8811 	msr	BASEPRI, r0
    370a:	4770      	bx	lr
    370c:	f3af 8000 	nop.w

00003710 <pxCurrentTCBConst2>:
    3710:	20003354 	.word	0x20003354

00003714 <vPortEnterCritical>:
    3714:	f04f 0380 	mov.w	r3, #128	; 0x80
    3718:	f383 8811 	msr	BASEPRI, r3
    371c:	f3bf 8f6f 	isb	sy
    3720:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    3724:	4a0a      	ldr	r2, [pc, #40]	; (3750 <vPortEnterCritical+0x3c>)
    3726:	6813      	ldr	r3, [r2, #0]
    3728:	3301      	adds	r3, #1
    372a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    372c:	2b01      	cmp	r3, #1
    372e:	d10d      	bne.n	374c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    3730:	4b08      	ldr	r3, [pc, #32]	; (3754 <vPortEnterCritical+0x40>)
    3732:	681b      	ldr	r3, [r3, #0]
    3734:	f013 0fff 	tst.w	r3, #255	; 0xff
    3738:	d008      	beq.n	374c <vPortEnterCritical+0x38>
    373a:	f04f 0380 	mov.w	r3, #128	; 0x80
    373e:	f383 8811 	msr	BASEPRI, r3
    3742:	f3bf 8f6f 	isb	sy
    3746:	f3bf 8f4f 	dsb	sy
    374a:	e7fe      	b.n	374a <vPortEnterCritical+0x36>
    374c:	4770      	bx	lr
    374e:	bf00      	nop
    3750:	20000120 	.word	0x20000120
    3754:	e000ed04 	.word	0xe000ed04

00003758 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    3758:	4b09      	ldr	r3, [pc, #36]	; (3780 <vPortExitCritical+0x28>)
    375a:	681b      	ldr	r3, [r3, #0]
    375c:	b943      	cbnz	r3, 3770 <vPortExitCritical+0x18>
    375e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3762:	f383 8811 	msr	BASEPRI, r3
    3766:	f3bf 8f6f 	isb	sy
    376a:	f3bf 8f4f 	dsb	sy
    376e:	e7fe      	b.n	376e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    3770:	3b01      	subs	r3, #1
    3772:	4a03      	ldr	r2, [pc, #12]	; (3780 <vPortExitCritical+0x28>)
    3774:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    3776:	b90b      	cbnz	r3, 377c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3778:	f383 8811 	msr	BASEPRI, r3
    377c:	4770      	bx	lr
    377e:	bf00      	nop
    3780:	20000120 	.word	0x20000120
	...

00003790 <PendSV_Handler>:
	__asm volatile(
    3790:	f3ef 8009 	mrs	r0, PSP
    3794:	f3bf 8f6f 	isb	sy
    3798:	4b15      	ldr	r3, [pc, #84]	; (37f0 <pxCurrentTCBConst>)
    379a:	681a      	ldr	r2, [r3, #0]
    379c:	f01e 0f10 	tst.w	lr, #16
    37a0:	bf08      	it	eq
    37a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    37a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37aa:	6010      	str	r0, [r2, #0]
    37ac:	e92d 0009 	stmdb	sp!, {r0, r3}
    37b0:	f04f 0080 	mov.w	r0, #128	; 0x80
    37b4:	f380 8811 	msr	BASEPRI, r0
    37b8:	f3bf 8f4f 	dsb	sy
    37bc:	f3bf 8f6f 	isb	sy
    37c0:	f001 f9b2 	bl	4b28 <vTaskSwitchContext>
    37c4:	f04f 0000 	mov.w	r0, #0
    37c8:	f380 8811 	msr	BASEPRI, r0
    37cc:	bc09      	pop	{r0, r3}
    37ce:	6819      	ldr	r1, [r3, #0]
    37d0:	6808      	ldr	r0, [r1, #0]
    37d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37d6:	f01e 0f10 	tst.w	lr, #16
    37da:	bf08      	it	eq
    37dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    37e0:	f380 8809 	msr	PSP, r0
    37e4:	f3bf 8f6f 	isb	sy
    37e8:	4770      	bx	lr
    37ea:	bf00      	nop
    37ec:	f3af 8000 	nop.w

000037f0 <pxCurrentTCBConst>:
    37f0:	20003354 	.word	0x20003354

000037f4 <SysTick_Handler>:
{
    37f4:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    37f6:	f04f 0380 	mov.w	r3, #128	; 0x80
    37fa:	f383 8811 	msr	BASEPRI, r3
    37fe:	f3bf 8f6f 	isb	sy
    3802:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    3806:	4b05      	ldr	r3, [pc, #20]	; (381c <SysTick_Handler+0x28>)
    3808:	4798      	blx	r3
    380a:	b118      	cbz	r0, 3814 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    380c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3810:	4b03      	ldr	r3, [pc, #12]	; (3820 <SysTick_Handler+0x2c>)
    3812:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3814:	2300      	movs	r3, #0
    3816:	f383 8811 	msr	BASEPRI, r3
    381a:	bd08      	pop	{r3, pc}
    381c:	000047f1 	.word	0x000047f1
    3820:	e000ed04 	.word	0xe000ed04

00003824 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    3824:	4b05      	ldr	r3, [pc, #20]	; (383c <vPortSetupTimerInterrupt+0x18>)
    3826:	2200      	movs	r2, #0
    3828:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    382a:	4905      	ldr	r1, [pc, #20]	; (3840 <vPortSetupTimerInterrupt+0x1c>)
    382c:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    382e:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    3832:	4a04      	ldr	r2, [pc, #16]	; (3844 <vPortSetupTimerInterrupt+0x20>)
    3834:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    3836:	2207      	movs	r2, #7
    3838:	601a      	str	r2, [r3, #0]
    383a:	4770      	bx	lr
    383c:	e000e010 	.word	0xe000e010
    3840:	e000e018 	.word	0xe000e018
    3844:	e000e014 	.word	0xe000e014

00003848 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    3848:	4b3b      	ldr	r3, [pc, #236]	; (3938 <xPortStartScheduler+0xf0>)
    384a:	681a      	ldr	r2, [r3, #0]
    384c:	4b3b      	ldr	r3, [pc, #236]	; (393c <xPortStartScheduler+0xf4>)
    384e:	429a      	cmp	r2, r3
    3850:	d108      	bne.n	3864 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    3852:	f04f 0380 	mov.w	r3, #128	; 0x80
    3856:	f383 8811 	msr	BASEPRI, r3
    385a:	f3bf 8f6f 	isb	sy
    385e:	f3bf 8f4f 	dsb	sy
    3862:	e7fe      	b.n	3862 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    3864:	4b34      	ldr	r3, [pc, #208]	; (3938 <xPortStartScheduler+0xf0>)
    3866:	681a      	ldr	r2, [r3, #0]
    3868:	4b35      	ldr	r3, [pc, #212]	; (3940 <xPortStartScheduler+0xf8>)
    386a:	429a      	cmp	r2, r3
    386c:	d108      	bne.n	3880 <xPortStartScheduler+0x38>
    386e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3872:	f383 8811 	msr	BASEPRI, r3
    3876:	f3bf 8f6f 	isb	sy
    387a:	f3bf 8f4f 	dsb	sy
    387e:	e7fe      	b.n	387e <xPortStartScheduler+0x36>
{
    3880:	b510      	push	{r4, lr}
    3882:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    3884:	4b2f      	ldr	r3, [pc, #188]	; (3944 <xPortStartScheduler+0xfc>)
    3886:	781a      	ldrb	r2, [r3, #0]
    3888:	b2d2      	uxtb	r2, r2
    388a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    388c:	22ff      	movs	r2, #255	; 0xff
    388e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    3890:	781b      	ldrb	r3, [r3, #0]
    3892:	b2db      	uxtb	r3, r3
    3894:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    3898:	f89d 3003 	ldrb.w	r3, [sp, #3]
    389c:	4a2a      	ldr	r2, [pc, #168]	; (3948 <xPortStartScheduler+0x100>)
    389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    38a2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    38a4:	2307      	movs	r3, #7
    38a6:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    38a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    38ac:	f013 0f80 	tst.w	r3, #128	; 0x80
    38b0:	d012      	beq.n	38d8 <xPortStartScheduler+0x90>
    38b2:	2306      	movs	r3, #6
    38b4:	e000      	b.n	38b8 <xPortStartScheduler+0x70>
    38b6:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    38b8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    38bc:	0052      	lsls	r2, r2, #1
    38be:	b2d2      	uxtb	r2, r2
    38c0:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    38c4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    38c8:	1e59      	subs	r1, r3, #1
    38ca:	f012 0f80 	tst.w	r2, #128	; 0x80
    38ce:	d1f2      	bne.n	38b6 <xPortStartScheduler+0x6e>
    38d0:	4a1d      	ldr	r2, [pc, #116]	; (3948 <xPortStartScheduler+0x100>)
    38d2:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    38d4:	2b04      	cmp	r3, #4
    38d6:	d008      	beq.n	38ea <xPortStartScheduler+0xa2>
    38d8:	f04f 0380 	mov.w	r3, #128	; 0x80
    38dc:	f383 8811 	msr	BASEPRI, r3
    38e0:	f3bf 8f6f 	isb	sy
    38e4:	f3bf 8f4f 	dsb	sy
    38e8:	e7fe      	b.n	38e8 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    38ea:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    38ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    38f0:	4a15      	ldr	r2, [pc, #84]	; (3948 <xPortStartScheduler+0x100>)
    38f2:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    38f4:	9b01      	ldr	r3, [sp, #4]
    38f6:	b2db      	uxtb	r3, r3
    38f8:	4a12      	ldr	r2, [pc, #72]	; (3944 <xPortStartScheduler+0xfc>)
    38fa:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    38fc:	4b13      	ldr	r3, [pc, #76]	; (394c <xPortStartScheduler+0x104>)
    38fe:	681a      	ldr	r2, [r3, #0]
    3900:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    3904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    3906:	681a      	ldr	r2, [r3, #0]
    3908:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    390c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    390e:	4b10      	ldr	r3, [pc, #64]	; (3950 <xPortStartScheduler+0x108>)
    3910:	4798      	blx	r3
	uxCriticalNesting = 0;
    3912:	2400      	movs	r4, #0
    3914:	4b0f      	ldr	r3, [pc, #60]	; (3954 <xPortStartScheduler+0x10c>)
    3916:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    3918:	4b0f      	ldr	r3, [pc, #60]	; (3958 <xPortStartScheduler+0x110>)
    391a:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    391c:	4a0f      	ldr	r2, [pc, #60]	; (395c <xPortStartScheduler+0x114>)
    391e:	6813      	ldr	r3, [r2, #0]
    3920:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    3924:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    3926:	4b0e      	ldr	r3, [pc, #56]	; (3960 <xPortStartScheduler+0x118>)
    3928:	4798      	blx	r3
	vTaskSwitchContext();
    392a:	4b0e      	ldr	r3, [pc, #56]	; (3964 <xPortStartScheduler+0x11c>)
    392c:	4798      	blx	r3
	prvTaskExitError();
    392e:	4b0e      	ldr	r3, [pc, #56]	; (3968 <xPortStartScheduler+0x120>)
    3930:	4798      	blx	r3
}
    3932:	4620      	mov	r0, r4
    3934:	b002      	add	sp, #8
    3936:	bd10      	pop	{r4, pc}
    3938:	e000ed00 	.word	0xe000ed00
    393c:	410fc271 	.word	0x410fc271
    3940:	410fc270 	.word	0x410fc270
    3944:	e000e400 	.word	0xe000e400
    3948:	20000aa0 	.word	0x20000aa0
    394c:	e000ed20 	.word	0xe000ed20
    3950:	00003825 	.word	0x00003825
    3954:	20000120 	.word	0x20000120
    3958:	000036ad 	.word	0x000036ad
    395c:	e000ef34 	.word	0xe000ef34
    3960:	00003685 	.word	0x00003685
    3964:	00004b29 	.word	0x00004b29
    3968:	00003645 	.word	0x00003645

0000396c <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    396c:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    3970:	2b0f      	cmp	r3, #15
    3972:	d90f      	bls.n	3994 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    3974:	4a10      	ldr	r2, [pc, #64]	; (39b8 <vPortValidateInterruptPriority+0x4c>)
    3976:	5c9b      	ldrb	r3, [r3, r2]
    3978:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    397a:	4a10      	ldr	r2, [pc, #64]	; (39bc <vPortValidateInterruptPriority+0x50>)
    397c:	7812      	ldrb	r2, [r2, #0]
    397e:	429a      	cmp	r2, r3
    3980:	d908      	bls.n	3994 <vPortValidateInterruptPriority+0x28>
    3982:	f04f 0380 	mov.w	r3, #128	; 0x80
    3986:	f383 8811 	msr	BASEPRI, r3
    398a:	f3bf 8f6f 	isb	sy
    398e:	f3bf 8f4f 	dsb	sy
    3992:	e7fe      	b.n	3992 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    3994:	4b0a      	ldr	r3, [pc, #40]	; (39c0 <vPortValidateInterruptPriority+0x54>)
    3996:	681b      	ldr	r3, [r3, #0]
    3998:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    399c:	4a07      	ldr	r2, [pc, #28]	; (39bc <vPortValidateInterruptPriority+0x50>)
    399e:	6852      	ldr	r2, [r2, #4]
    39a0:	4293      	cmp	r3, r2
    39a2:	d908      	bls.n	39b6 <vPortValidateInterruptPriority+0x4a>
    39a4:	f04f 0380 	mov.w	r3, #128	; 0x80
    39a8:	f383 8811 	msr	BASEPRI, r3
    39ac:	f3bf 8f6f 	isb	sy
    39b0:	f3bf 8f4f 	dsb	sy
    39b4:	e7fe      	b.n	39b4 <vPortValidateInterruptPriority+0x48>
    39b6:	4770      	bx	lr
    39b8:	e000e3f0 	.word	0xe000e3f0
    39bc:	20000aa0 	.word	0x20000aa0
    39c0:	e000ed0c 	.word	0xe000ed0c

000039c4 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    39c4:	b570      	push	{r4, r5, r6, lr}
    39c6:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    39c8:	4b2d      	ldr	r3, [pc, #180]	; (3a80 <pvPortMalloc+0xbc>)
    39ca:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    39cc:	4b2d      	ldr	r3, [pc, #180]	; (3a84 <pvPortMalloc+0xc0>)
    39ce:	689b      	ldr	r3, [r3, #8]
    39d0:	b183      	cbz	r3, 39f4 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    39d2:	2c00      	cmp	r4, #0
    39d4:	d04d      	beq.n	3a72 <pvPortMalloc+0xae>
		{
			xWantedSize += heapSTRUCT_SIZE;
    39d6:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    39d8:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    39dc:	bf1c      	itt	ne
    39de:	f024 0407 	bicne.w	r4, r4, #7
    39e2:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    39e4:	1e62      	subs	r2, r4, #1
    39e6:	f242 73f6 	movw	r3, #10230	; 0x27f6
    39ea:	429a      	cmp	r2, r3
    39ec:	d843      	bhi.n	3a76 <pvPortMalloc+0xb2>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    39ee:	4925      	ldr	r1, [pc, #148]	; (3a84 <pvPortMalloc+0xc0>)
    39f0:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    39f2:	e017      	b.n	3a24 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    39f4:	4923      	ldr	r1, [pc, #140]	; (3a84 <pvPortMalloc+0xc0>)
    39f6:	f101 0314 	add.w	r3, r1, #20
    39fa:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    39fe:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    3a00:	2500      	movs	r5, #0
    3a02:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    3a04:	4a20      	ldr	r2, [pc, #128]	; (3a88 <pvPortMalloc+0xc4>)
    3a06:	f242 70f8 	movw	r0, #10232	; 0x27f8
    3a0a:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    3a0e:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    3a12:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    3a14:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    3a18:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    3a1a:	2301      	movs	r3, #1
    3a1c:	608b      	str	r3, [r1, #8]
    3a1e:	e7d8      	b.n	39d2 <pvPortMalloc+0xe>
    3a20:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    3a22:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    3a24:	685a      	ldr	r2, [r3, #4]
    3a26:	4294      	cmp	r4, r2
    3a28:	d902      	bls.n	3a30 <pvPortMalloc+0x6c>
    3a2a:	681a      	ldr	r2, [r3, #0]
    3a2c:	2a00      	cmp	r2, #0
    3a2e:	d1f7      	bne.n	3a20 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    3a30:	4a16      	ldr	r2, [pc, #88]	; (3a8c <pvPortMalloc+0xc8>)
    3a32:	4293      	cmp	r3, r2
    3a34:	d021      	beq.n	3a7a <pvPortMalloc+0xb6>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    3a36:	680d      	ldr	r5, [r1, #0]
    3a38:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    3a3a:	681a      	ldr	r2, [r3, #0]
    3a3c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    3a3e:	685a      	ldr	r2, [r3, #4]
    3a40:	1b12      	subs	r2, r2, r4
    3a42:	2a10      	cmp	r2, #16
    3a44:	d90c      	bls.n	3a60 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    3a46:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    3a48:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    3a4a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    3a4c:	6874      	ldr	r4, [r6, #4]
    3a4e:	490d      	ldr	r1, [pc, #52]	; (3a84 <pvPortMalloc+0xc0>)
    3a50:	e000      	b.n	3a54 <pvPortMalloc+0x90>
    3a52:	4611      	mov	r1, r2
    3a54:	680a      	ldr	r2, [r1, #0]
    3a56:	6850      	ldr	r0, [r2, #4]
    3a58:	4284      	cmp	r4, r0
    3a5a:	d8fa      	bhi.n	3a52 <pvPortMalloc+0x8e>
    3a5c:	6032      	str	r2, [r6, #0]
    3a5e:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    3a60:	490b      	ldr	r1, [pc, #44]	; (3a90 <pvPortMalloc+0xcc>)
    3a62:	680a      	ldr	r2, [r1, #0]
    3a64:	685b      	ldr	r3, [r3, #4]
    3a66:	1ad2      	subs	r2, r2, r3
    3a68:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    3a6a:	4b0a      	ldr	r3, [pc, #40]	; (3a94 <pvPortMalloc+0xd0>)
    3a6c:	4798      	blx	r3
}
    3a6e:	4628      	mov	r0, r5
    3a70:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
    3a72:	2500      	movs	r5, #0
    3a74:	e7f9      	b.n	3a6a <pvPortMalloc+0xa6>
    3a76:	2500      	movs	r5, #0
    3a78:	e7f7      	b.n	3a6a <pvPortMalloc+0xa6>
    3a7a:	2500      	movs	r5, #0
    3a7c:	e7f5      	b.n	3a6a <pvPortMalloc+0xa6>
    3a7e:	bf00      	nop
    3a80:	000047d1 	.word	0x000047d1
    3a84:	20000aa8 	.word	0x20000aa8
    3a88:	20002c98 	.word	0x20002c98
    3a8c:	200032b4 	.word	0x200032b4
    3a90:	20000124 	.word	0x20000124
    3a94:	00004919 	.word	0x00004919

00003a98 <vPortFree>:
	if( pv != NULL )
    3a98:	b1d0      	cbz	r0, 3ad0 <vPortFree+0x38>
{
    3a9a:	b570      	push	{r4, r5, r6, lr}
    3a9c:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    3a9e:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    3aa2:	4b0c      	ldr	r3, [pc, #48]	; (3ad4 <vPortFree+0x3c>)
    3aa4:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    3aa6:	f855 4c04 	ldr.w	r4, [r5, #-4]
    3aaa:	4a0b      	ldr	r2, [pc, #44]	; (3ad8 <vPortFree+0x40>)
    3aac:	e000      	b.n	3ab0 <vPortFree+0x18>
    3aae:	461a      	mov	r2, r3
    3ab0:	6813      	ldr	r3, [r2, #0]
    3ab2:	6859      	ldr	r1, [r3, #4]
    3ab4:	428c      	cmp	r4, r1
    3ab6:	d8fa      	bhi.n	3aae <vPortFree+0x16>
    3ab8:	f845 3c08 	str.w	r3, [r5, #-8]
    3abc:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    3abe:	4a07      	ldr	r2, [pc, #28]	; (3adc <vPortFree+0x44>)
    3ac0:	f855 3c04 	ldr.w	r3, [r5, #-4]
    3ac4:	6811      	ldr	r1, [r2, #0]
    3ac6:	440b      	add	r3, r1
    3ac8:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    3aca:	4b05      	ldr	r3, [pc, #20]	; (3ae0 <vPortFree+0x48>)
    3acc:	4798      	blx	r3
    3ace:	bd70      	pop	{r4, r5, r6, pc}
    3ad0:	4770      	bx	lr
    3ad2:	bf00      	nop
    3ad4:	000047d1 	.word	0x000047d1
    3ad8:	20000aa8 	.word	0x20000aa8
    3adc:	20000124 	.word	0x20000124
    3ae0:	00004919 	.word	0x00004919

00003ae4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    3ae4:	b510      	push	{r4, lr}
    3ae6:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    3ae8:	4b04      	ldr	r3, [pc, #16]	; (3afc <prvIsQueueEmpty+0x18>)
    3aea:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    3aec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    3aee:	4b04      	ldr	r3, [pc, #16]	; (3b00 <prvIsQueueEmpty+0x1c>)
    3af0:	4798      	blx	r3

	return xReturn;
}
    3af2:	fab4 f084 	clz	r0, r4
    3af6:	0940      	lsrs	r0, r0, #5
    3af8:	bd10      	pop	{r4, pc}
    3afa:	bf00      	nop
    3afc:	00003715 	.word	0x00003715
    3b00:	00003759 	.word	0x00003759

00003b04 <prvCopyDataToQueue>:
{
    3b04:	b570      	push	{r4, r5, r6, lr}
    3b06:	4604      	mov	r4, r0
    3b08:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3b0a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    3b0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3b0e:	b952      	cbnz	r2, 3b26 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    3b10:	6803      	ldr	r3, [r0, #0]
    3b12:	2b00      	cmp	r3, #0
    3b14:	d12a      	bne.n	3b6c <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    3b16:	6840      	ldr	r0, [r0, #4]
    3b18:	4b18      	ldr	r3, [pc, #96]	; (3b7c <prvCopyDataToQueue+0x78>)
    3b1a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    3b1c:	2300      	movs	r3, #0
    3b1e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    3b20:	3501      	adds	r5, #1
    3b22:	63a5      	str	r5, [r4, #56]	; 0x38
}
    3b24:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    3b26:	b96e      	cbnz	r6, 3b44 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    3b28:	6880      	ldr	r0, [r0, #8]
    3b2a:	4b15      	ldr	r3, [pc, #84]	; (3b80 <prvCopyDataToQueue+0x7c>)
    3b2c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3b2e:	68a3      	ldr	r3, [r4, #8]
    3b30:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3b32:	4413      	add	r3, r2
    3b34:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    3b36:	6862      	ldr	r2, [r4, #4]
    3b38:	4293      	cmp	r3, r2
    3b3a:	d319      	bcc.n	3b70 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3b3c:	6823      	ldr	r3, [r4, #0]
    3b3e:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    3b40:	2000      	movs	r0, #0
    3b42:	e7ed      	b.n	3b20 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    3b44:	68c0      	ldr	r0, [r0, #12]
    3b46:	4b0e      	ldr	r3, [pc, #56]	; (3b80 <prvCopyDataToQueue+0x7c>)
    3b48:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    3b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3b4c:	425b      	negs	r3, r3
    3b4e:	68e2      	ldr	r2, [r4, #12]
    3b50:	441a      	add	r2, r3
    3b52:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    3b54:	6821      	ldr	r1, [r4, #0]
    3b56:	428a      	cmp	r2, r1
    3b58:	d202      	bcs.n	3b60 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    3b5a:	6862      	ldr	r2, [r4, #4]
    3b5c:	4413      	add	r3, r2
    3b5e:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    3b60:	2e02      	cmp	r6, #2
    3b62:	d107      	bne.n	3b74 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    3b64:	b145      	cbz	r5, 3b78 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    3b66:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    3b68:	2000      	movs	r0, #0
    3b6a:	e7d9      	b.n	3b20 <prvCopyDataToQueue+0x1c>
    3b6c:	2000      	movs	r0, #0
    3b6e:	e7d7      	b.n	3b20 <prvCopyDataToQueue+0x1c>
    3b70:	2000      	movs	r0, #0
    3b72:	e7d5      	b.n	3b20 <prvCopyDataToQueue+0x1c>
    3b74:	2000      	movs	r0, #0
    3b76:	e7d3      	b.n	3b20 <prvCopyDataToQueue+0x1c>
    3b78:	2000      	movs	r0, #0
    3b7a:	e7d1      	b.n	3b20 <prvCopyDataToQueue+0x1c>
    3b7c:	00004e69 	.word	0x00004e69
    3b80:	000055d7 	.word	0x000055d7

00003b84 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    3b84:	b570      	push	{r4, r5, r6, lr}
    3b86:	b082      	sub	sp, #8
    3b88:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    3b8a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    3b8c:	b164      	cbz	r4, 3ba8 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    3b8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3b90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3b92:	429a      	cmp	r2, r3
    3b94:	d311      	bcc.n	3bba <prvNotifyQueueSetContainer+0x36>
    3b96:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b9a:	f383 8811 	msr	BASEPRI, r3
    3b9e:	f3bf 8f6f 	isb	sy
    3ba2:	f3bf 8f4f 	dsb	sy
    3ba6:	e7fe      	b.n	3ba6 <prvNotifyQueueSetContainer+0x22>
    3ba8:	f04f 0380 	mov.w	r3, #128	; 0x80
    3bac:	f383 8811 	msr	BASEPRI, r3
    3bb0:	f3bf 8f6f 	isb	sy
    3bb4:	f3bf 8f4f 	dsb	sy
    3bb8:	e7fe      	b.n	3bb8 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    3bba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3bbc:	4293      	cmp	r3, r2
    3bbe:	d803      	bhi.n	3bc8 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    3bc0:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    3bc2:	4630      	mov	r0, r6
    3bc4:	b002      	add	sp, #8
    3bc6:	bd70      	pop	{r4, r5, r6, pc}
    3bc8:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    3bca:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    3bce:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    3bd0:	a901      	add	r1, sp, #4
    3bd2:	4620      	mov	r0, r4
    3bd4:	4b0a      	ldr	r3, [pc, #40]	; (3c00 <prvNotifyQueueSetContainer+0x7c>)
    3bd6:	4798      	blx	r3
    3bd8:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    3bda:	f1b5 3fff 	cmp.w	r5, #4294967295
    3bde:	d10a      	bne.n	3bf6 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    3be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3be2:	2b00      	cmp	r3, #0
    3be4:	d0ed      	beq.n	3bc2 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    3be6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3bea:	4b06      	ldr	r3, [pc, #24]	; (3c04 <prvNotifyQueueSetContainer+0x80>)
    3bec:	4798      	blx	r3
    3bee:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    3bf0:	bf18      	it	ne
    3bf2:	2601      	movne	r6, #1
    3bf4:	e7e5      	b.n	3bc2 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    3bf6:	1c6b      	adds	r3, r5, #1
    3bf8:	b25b      	sxtb	r3, r3
    3bfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    3bfe:	e7e0      	b.n	3bc2 <prvNotifyQueueSetContainer+0x3e>
    3c00:	00003b05 	.word	0x00003b05
    3c04:	00004c65 	.word	0x00004c65

00003c08 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    3c08:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3c0a:	b172      	cbz	r2, 3c2a <prvCopyDataFromQueue+0x22>
{
    3c0c:	b510      	push	{r4, lr}
    3c0e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3c10:	68c4      	ldr	r4, [r0, #12]
    3c12:	4414      	add	r4, r2
    3c14:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    3c16:	6840      	ldr	r0, [r0, #4]
    3c18:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3c1a:	bf24      	itt	cs
    3c1c:	6818      	ldrcs	r0, [r3, #0]
    3c1e:	60d8      	strcs	r0, [r3, #12]
    3c20:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    3c22:	68d9      	ldr	r1, [r3, #12]
    3c24:	4b01      	ldr	r3, [pc, #4]	; (3c2c <prvCopyDataFromQueue+0x24>)
    3c26:	4798      	blx	r3
    3c28:	bd10      	pop	{r4, pc}
    3c2a:	4770      	bx	lr
    3c2c:	000055d7 	.word	0x000055d7

00003c30 <prvUnlockQueue>:
{
    3c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c34:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    3c36:	4b23      	ldr	r3, [pc, #140]	; (3cc4 <prvUnlockQueue+0x94>)
    3c38:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    3c3a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    3c3e:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3c40:	2c00      	cmp	r4, #0
    3c42:	dd19      	ble.n	3c78 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3c44:	4e20      	ldr	r6, [pc, #128]	; (3cc8 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    3c46:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3cd4 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3c4a:	4f20      	ldr	r7, [pc, #128]	; (3ccc <prvUnlockQueue+0x9c>)
    3c4c:	e008      	b.n	3c60 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3c4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3c50:	b193      	cbz	r3, 3c78 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3c52:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3c56:	47b8      	blx	r7
    3c58:	b960      	cbnz	r0, 3c74 <prvUnlockQueue+0x44>
    3c5a:	3c01      	subs	r4, #1
    3c5c:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3c5e:	b15c      	cbz	r4, 3c78 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    3c60:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3c62:	2b00      	cmp	r3, #0
    3c64:	d0f3      	beq.n	3c4e <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3c66:	2100      	movs	r1, #0
    3c68:	4628      	mov	r0, r5
    3c6a:	47b0      	blx	r6
    3c6c:	2800      	cmp	r0, #0
    3c6e:	d0f4      	beq.n	3c5a <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    3c70:	47c0      	blx	r8
    3c72:	e7f2      	b.n	3c5a <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    3c74:	47c0      	blx	r8
    3c76:	e7f0      	b.n	3c5a <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    3c78:	23ff      	movs	r3, #255	; 0xff
    3c7a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    3c7e:	4b14      	ldr	r3, [pc, #80]	; (3cd0 <prvUnlockQueue+0xa0>)
    3c80:	4798      	blx	r3
	taskENTER_CRITICAL();
    3c82:	4b10      	ldr	r3, [pc, #64]	; (3cc4 <prvUnlockQueue+0x94>)
    3c84:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    3c86:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    3c8a:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3c8c:	2c00      	cmp	r4, #0
    3c8e:	dd12      	ble.n	3cb6 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3c90:	692b      	ldr	r3, [r5, #16]
    3c92:	b183      	cbz	r3, 3cb6 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3c94:	f105 0710 	add.w	r7, r5, #16
    3c98:	4e0c      	ldr	r6, [pc, #48]	; (3ccc <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    3c9a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3cd4 <prvUnlockQueue+0xa4>
    3c9e:	e004      	b.n	3caa <prvUnlockQueue+0x7a>
    3ca0:	3c01      	subs	r4, #1
    3ca2:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3ca4:	b13c      	cbz	r4, 3cb6 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3ca6:	692b      	ldr	r3, [r5, #16]
    3ca8:	b12b      	cbz	r3, 3cb6 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3caa:	4638      	mov	r0, r7
    3cac:	47b0      	blx	r6
    3cae:	2800      	cmp	r0, #0
    3cb0:	d0f6      	beq.n	3ca0 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    3cb2:	47c0      	blx	r8
    3cb4:	e7f4      	b.n	3ca0 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    3cb6:	23ff      	movs	r3, #255	; 0xff
    3cb8:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    3cbc:	4b04      	ldr	r3, [pc, #16]	; (3cd0 <prvUnlockQueue+0xa0>)
    3cbe:	4798      	blx	r3
    3cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cc4:	00003715 	.word	0x00003715
    3cc8:	00003b85 	.word	0x00003b85
    3ccc:	00004c65 	.word	0x00004c65
    3cd0:	00003759 	.word	0x00003759
    3cd4:	00004d95 	.word	0x00004d95

00003cd8 <xQueueGenericReset>:
{
    3cd8:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    3cda:	b330      	cbz	r0, 3d2a <xQueueGenericReset+0x52>
    3cdc:	4604      	mov	r4, r0
    3cde:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    3ce0:	4b1c      	ldr	r3, [pc, #112]	; (3d54 <xQueueGenericReset+0x7c>)
    3ce2:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    3ce4:	6822      	ldr	r2, [r4, #0]
    3ce6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3ce8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3cea:	fb03 f301 	mul.w	r3, r3, r1
    3cee:	18d0      	adds	r0, r2, r3
    3cf0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    3cf2:	2000      	movs	r0, #0
    3cf4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    3cf6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    3cf8:	1a5b      	subs	r3, r3, r1
    3cfa:	4413      	add	r3, r2
    3cfc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    3cfe:	23ff      	movs	r3, #255	; 0xff
    3d00:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    3d04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    3d08:	b9c5      	cbnz	r5, 3d3c <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3d0a:	6923      	ldr	r3, [r4, #16]
    3d0c:	b1eb      	cbz	r3, 3d4a <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3d0e:	f104 0010 	add.w	r0, r4, #16
    3d12:	4b11      	ldr	r3, [pc, #68]	; (3d58 <xQueueGenericReset+0x80>)
    3d14:	4798      	blx	r3
    3d16:	b1c0      	cbz	r0, 3d4a <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    3d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3d1c:	4b0f      	ldr	r3, [pc, #60]	; (3d5c <xQueueGenericReset+0x84>)
    3d1e:	601a      	str	r2, [r3, #0]
    3d20:	f3bf 8f4f 	dsb	sy
    3d24:	f3bf 8f6f 	isb	sy
    3d28:	e00f      	b.n	3d4a <xQueueGenericReset+0x72>
    3d2a:	f04f 0380 	mov.w	r3, #128	; 0x80
    3d2e:	f383 8811 	msr	BASEPRI, r3
    3d32:	f3bf 8f6f 	isb	sy
    3d36:	f3bf 8f4f 	dsb	sy
    3d3a:	e7fe      	b.n	3d3a <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    3d3c:	f104 0010 	add.w	r0, r4, #16
    3d40:	4d07      	ldr	r5, [pc, #28]	; (3d60 <xQueueGenericReset+0x88>)
    3d42:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    3d44:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3d48:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    3d4a:	4b06      	ldr	r3, [pc, #24]	; (3d64 <xQueueGenericReset+0x8c>)
    3d4c:	4798      	blx	r3
}
    3d4e:	2001      	movs	r0, #1
    3d50:	bd38      	pop	{r3, r4, r5, pc}
    3d52:	bf00      	nop
    3d54:	00003715 	.word	0x00003715
    3d58:	00004c65 	.word	0x00004c65
    3d5c:	e000ed04 	.word	0xe000ed04
    3d60:	000035b5 	.word	0x000035b5
    3d64:	00003759 	.word	0x00003759

00003d68 <xQueueGenericCreate>:
{
    3d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    3d6a:	b940      	cbnz	r0, 3d7e <xQueueGenericCreate+0x16>
    3d6c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3d70:	f383 8811 	msr	BASEPRI, r3
    3d74:	f3bf 8f6f 	isb	sy
    3d78:	f3bf 8f4f 	dsb	sy
    3d7c:	e7fe      	b.n	3d7c <xQueueGenericCreate+0x14>
    3d7e:	4606      	mov	r6, r0
    3d80:	4617      	mov	r7, r2
    3d82:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    3d84:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    3d88:	3054      	adds	r0, #84	; 0x54
    3d8a:	4b0b      	ldr	r3, [pc, #44]	; (3db8 <xQueueGenericCreate+0x50>)
    3d8c:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    3d8e:	4604      	mov	r4, r0
    3d90:	b178      	cbz	r0, 3db2 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    3d92:	b11d      	cbz	r5, 3d9c <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    3d94:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    3d98:	6003      	str	r3, [r0, #0]
    3d9a:	e000      	b.n	3d9e <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    3d9c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    3d9e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    3da0:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    3da2:	2101      	movs	r1, #1
    3da4:	4620      	mov	r0, r4
    3da6:	4b05      	ldr	r3, [pc, #20]	; (3dbc <xQueueGenericCreate+0x54>)
    3da8:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    3daa:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    3dae:	2300      	movs	r3, #0
    3db0:	64a3      	str	r3, [r4, #72]	; 0x48
}
    3db2:	4620      	mov	r0, r4
    3db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3db6:	bf00      	nop
    3db8:	000039c5 	.word	0x000039c5
    3dbc:	00003cd9 	.word	0x00003cd9

00003dc0 <xQueueGenericSend>:
{
    3dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3dc4:	b085      	sub	sp, #20
    3dc6:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    3dc8:	b198      	cbz	r0, 3df2 <xQueueGenericSend+0x32>
    3dca:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3dcc:	b1d1      	cbz	r1, 3e04 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3dce:	2b02      	cmp	r3, #2
    3dd0:	d024      	beq.n	3e1c <xQueueGenericSend+0x5c>
    3dd2:	461e      	mov	r6, r3
    3dd4:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3dd6:	4b64      	ldr	r3, [pc, #400]	; (3f68 <xQueueGenericSend+0x1a8>)
    3dd8:	4798      	blx	r3
    3dda:	bb58      	cbnz	r0, 3e34 <xQueueGenericSend+0x74>
    3ddc:	9b01      	ldr	r3, [sp, #4]
    3dde:	b38b      	cbz	r3, 3e44 <xQueueGenericSend+0x84>
    3de0:	f04f 0380 	mov.w	r3, #128	; 0x80
    3de4:	f383 8811 	msr	BASEPRI, r3
    3de8:	f3bf 8f6f 	isb	sy
    3dec:	f3bf 8f4f 	dsb	sy
    3df0:	e7fe      	b.n	3df0 <xQueueGenericSend+0x30>
    3df2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3df6:	f383 8811 	msr	BASEPRI, r3
    3dfa:	f3bf 8f6f 	isb	sy
    3dfe:	f3bf 8f4f 	dsb	sy
    3e02:	e7fe      	b.n	3e02 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3e04:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3e06:	2a00      	cmp	r2, #0
    3e08:	d0e1      	beq.n	3dce <xQueueGenericSend+0xe>
    3e0a:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e0e:	f383 8811 	msr	BASEPRI, r3
    3e12:	f3bf 8f6f 	isb	sy
    3e16:	f3bf 8f4f 	dsb	sy
    3e1a:	e7fe      	b.n	3e1a <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3e1c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3e1e:	2a01      	cmp	r2, #1
    3e20:	d0d7      	beq.n	3dd2 <xQueueGenericSend+0x12>
    3e22:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e26:	f383 8811 	msr	BASEPRI, r3
    3e2a:	f3bf 8f6f 	isb	sy
    3e2e:	f3bf 8f4f 	dsb	sy
    3e32:	e7fe      	b.n	3e32 <xQueueGenericSend+0x72>
    3e34:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    3e36:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3f94 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3e3a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 3f98 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    3e3e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 3f74 <xQueueGenericSend+0x1b4>
    3e42:	e041      	b.n	3ec8 <xQueueGenericSend+0x108>
    3e44:	2500      	movs	r5, #0
    3e46:	e7f6      	b.n	3e36 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3e48:	4632      	mov	r2, r6
    3e4a:	4639      	mov	r1, r7
    3e4c:	4620      	mov	r0, r4
    3e4e:	4b47      	ldr	r3, [pc, #284]	; (3f6c <xQueueGenericSend+0x1ac>)
    3e50:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    3e52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3e54:	b193      	cbz	r3, 3e7c <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3e56:	4631      	mov	r1, r6
    3e58:	4620      	mov	r0, r4
    3e5a:	4b45      	ldr	r3, [pc, #276]	; (3f70 <xQueueGenericSend+0x1b0>)
    3e5c:	4798      	blx	r3
    3e5e:	b138      	cbz	r0, 3e70 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3e64:	4b43      	ldr	r3, [pc, #268]	; (3f74 <xQueueGenericSend+0x1b4>)
    3e66:	601a      	str	r2, [r3, #0]
    3e68:	f3bf 8f4f 	dsb	sy
    3e6c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    3e70:	4b41      	ldr	r3, [pc, #260]	; (3f78 <xQueueGenericSend+0x1b8>)
    3e72:	4798      	blx	r3
				return pdPASS;
    3e74:	2001      	movs	r0, #1
}
    3e76:	b005      	add	sp, #20
    3e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3e7e:	b173      	cbz	r3, 3e9e <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3e80:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3e84:	4b3d      	ldr	r3, [pc, #244]	; (3f7c <xQueueGenericSend+0x1bc>)
    3e86:	4798      	blx	r3
    3e88:	2800      	cmp	r0, #0
    3e8a:	d0f1      	beq.n	3e70 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    3e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3e90:	4b38      	ldr	r3, [pc, #224]	; (3f74 <xQueueGenericSend+0x1b4>)
    3e92:	601a      	str	r2, [r3, #0]
    3e94:	f3bf 8f4f 	dsb	sy
    3e98:	f3bf 8f6f 	isb	sy
    3e9c:	e7e8      	b.n	3e70 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    3e9e:	2800      	cmp	r0, #0
    3ea0:	d0e6      	beq.n	3e70 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3ea6:	4b33      	ldr	r3, [pc, #204]	; (3f74 <xQueueGenericSend+0x1b4>)
    3ea8:	601a      	str	r2, [r3, #0]
    3eaa:	f3bf 8f4f 	dsb	sy
    3eae:	f3bf 8f6f 	isb	sy
    3eb2:	e7dd      	b.n	3e70 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    3eb4:	4b30      	ldr	r3, [pc, #192]	; (3f78 <xQueueGenericSend+0x1b8>)
    3eb6:	4798      	blx	r3
					return errQUEUE_FULL;
    3eb8:	2000      	movs	r0, #0
    3eba:	e7dc      	b.n	3e76 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    3ebc:	4620      	mov	r0, r4
    3ebe:	4b30      	ldr	r3, [pc, #192]	; (3f80 <xQueueGenericSend+0x1c0>)
    3ec0:	4798      	blx	r3
				(void)xTaskResumeAll();
    3ec2:	4b30      	ldr	r3, [pc, #192]	; (3f84 <xQueueGenericSend+0x1c4>)
    3ec4:	4798      	blx	r3
    3ec6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    3ec8:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3eca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3ecc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3ece:	429a      	cmp	r2, r3
    3ed0:	d3ba      	bcc.n	3e48 <xQueueGenericSend+0x88>
    3ed2:	2e02      	cmp	r6, #2
    3ed4:	d0b8      	beq.n	3e48 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    3ed6:	9b01      	ldr	r3, [sp, #4]
    3ed8:	2b00      	cmp	r3, #0
    3eda:	d0eb      	beq.n	3eb4 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    3edc:	b90d      	cbnz	r5, 3ee2 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3ede:	a802      	add	r0, sp, #8
    3ee0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    3ee2:	4b25      	ldr	r3, [pc, #148]	; (3f78 <xQueueGenericSend+0x1b8>)
    3ee4:	4798      	blx	r3
		vTaskSuspendAll();
    3ee6:	4b28      	ldr	r3, [pc, #160]	; (3f88 <xQueueGenericSend+0x1c8>)
    3ee8:	4798      	blx	r3
		prvLockQueue(pxQueue);
    3eea:	47c0      	blx	r8
    3eec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3ef0:	b25b      	sxtb	r3, r3
    3ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3ef6:	bf04      	itt	eq
    3ef8:	2300      	moveq	r3, #0
    3efa:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    3efe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3f02:	b25b      	sxtb	r3, r3
    3f04:	f1b3 3fff 	cmp.w	r3, #4294967295
    3f08:	bf04      	itt	eq
    3f0a:	2300      	moveq	r3, #0
    3f0c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    3f10:	4b19      	ldr	r3, [pc, #100]	; (3f78 <xQueueGenericSend+0x1b8>)
    3f12:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3f14:	a901      	add	r1, sp, #4
    3f16:	a802      	add	r0, sp, #8
    3f18:	4b1c      	ldr	r3, [pc, #112]	; (3f8c <xQueueGenericSend+0x1cc>)
    3f1a:	4798      	blx	r3
    3f1c:	b9e0      	cbnz	r0, 3f58 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    3f1e:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    3f20:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    3f24:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    3f26:	4b14      	ldr	r3, [pc, #80]	; (3f78 <xQueueGenericSend+0x1b8>)
    3f28:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    3f2a:	45ab      	cmp	fp, r5
    3f2c:	d1c6      	bne.n	3ebc <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    3f2e:	9901      	ldr	r1, [sp, #4]
    3f30:	f104 0010 	add.w	r0, r4, #16
    3f34:	4b16      	ldr	r3, [pc, #88]	; (3f90 <xQueueGenericSend+0x1d0>)
    3f36:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3f38:	4620      	mov	r0, r4
    3f3a:	4b11      	ldr	r3, [pc, #68]	; (3f80 <xQueueGenericSend+0x1c0>)
    3f3c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    3f3e:	4b11      	ldr	r3, [pc, #68]	; (3f84 <xQueueGenericSend+0x1c4>)
    3f40:	4798      	blx	r3
    3f42:	2800      	cmp	r0, #0
    3f44:	d1bf      	bne.n	3ec6 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    3f46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3f4a:	f8c9 3000 	str.w	r3, [r9]
    3f4e:	f3bf 8f4f 	dsb	sy
    3f52:	f3bf 8f6f 	isb	sy
    3f56:	e7b6      	b.n	3ec6 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    3f58:	4620      	mov	r0, r4
    3f5a:	4b09      	ldr	r3, [pc, #36]	; (3f80 <xQueueGenericSend+0x1c0>)
    3f5c:	4798      	blx	r3
			(void)xTaskResumeAll();
    3f5e:	4b09      	ldr	r3, [pc, #36]	; (3f84 <xQueueGenericSend+0x1c4>)
    3f60:	4798      	blx	r3
			return errQUEUE_FULL;
    3f62:	2000      	movs	r0, #0
    3f64:	e787      	b.n	3e76 <xQueueGenericSend+0xb6>
    3f66:	bf00      	nop
    3f68:	00004da5 	.word	0x00004da5
    3f6c:	00003b05 	.word	0x00003b05
    3f70:	00003b85 	.word	0x00003b85
    3f74:	e000ed04 	.word	0xe000ed04
    3f78:	00003759 	.word	0x00003759
    3f7c:	00004c65 	.word	0x00004c65
    3f80:	00003c31 	.word	0x00003c31
    3f84:	00004919 	.word	0x00004919
    3f88:	000047d1 	.word	0x000047d1
    3f8c:	00004d09 	.word	0x00004d09
    3f90:	00004be5 	.word	0x00004be5
    3f94:	00003715 	.word	0x00003715
    3f98:	00004cf5 	.word	0x00004cf5

00003f9c <xQueueGenericSendFromISR>:
{
    3f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    3fa0:	2800      	cmp	r0, #0
    3fa2:	d036      	beq.n	4012 <xQueueGenericSendFromISR+0x76>
    3fa4:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3fa6:	2900      	cmp	r1, #0
    3fa8:	d03c      	beq.n	4024 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3faa:	2b02      	cmp	r3, #2
    3fac:	d046      	beq.n	403c <xQueueGenericSendFromISR+0xa0>
    3fae:	461f      	mov	r7, r3
    3fb0:	4690      	mov	r8, r2
    3fb2:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    3fb4:	4b37      	ldr	r3, [pc, #220]	; (4094 <xQueueGenericSendFromISR+0xf8>)
    3fb6:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    3fb8:	f3ef 8611 	mrs	r6, BASEPRI
    3fbc:	f04f 0380 	mov.w	r3, #128	; 0x80
    3fc0:	f383 8811 	msr	BASEPRI, r3
    3fc4:	f3bf 8f6f 	isb	sy
    3fc8:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3fcc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3fce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3fd0:	429a      	cmp	r2, r3
    3fd2:	d301      	bcc.n	3fd8 <xQueueGenericSendFromISR+0x3c>
    3fd4:	2f02      	cmp	r7, #2
    3fd6:	d151      	bne.n	407c <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    3fd8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    3fdc:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3fde:	463a      	mov	r2, r7
    3fe0:	4649      	mov	r1, r9
    3fe2:	4620      	mov	r0, r4
    3fe4:	4b2c      	ldr	r3, [pc, #176]	; (4098 <xQueueGenericSendFromISR+0xfc>)
    3fe6:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    3fe8:	f1b5 3fff 	cmp.w	r5, #4294967295
    3fec:	d140      	bne.n	4070 <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    3fee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3ff0:	b383      	cbz	r3, 4054 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3ff2:	4639      	mov	r1, r7
    3ff4:	4620      	mov	r0, r4
    3ff6:	4b29      	ldr	r3, [pc, #164]	; (409c <xQueueGenericSendFromISR+0x100>)
    3ff8:	4798      	blx	r3
    3ffa:	2800      	cmp	r0, #0
    3ffc:	d040      	beq.n	4080 <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    3ffe:	f1b8 0f00 	cmp.w	r8, #0
    4002:	d03f      	beq.n	4084 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4004:	2001      	movs	r0, #1
    4006:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    400a:	f386 8811 	msr	BASEPRI, r6
}
    400e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    4012:	f04f 0380 	mov.w	r3, #128	; 0x80
    4016:	f383 8811 	msr	BASEPRI, r3
    401a:	f3bf 8f6f 	isb	sy
    401e:	f3bf 8f4f 	dsb	sy
    4022:	e7fe      	b.n	4022 <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4024:	6c00      	ldr	r0, [r0, #64]	; 0x40
    4026:	2800      	cmp	r0, #0
    4028:	d0bf      	beq.n	3faa <xQueueGenericSendFromISR+0xe>
    402a:	f04f 0380 	mov.w	r3, #128	; 0x80
    402e:	f383 8811 	msr	BASEPRI, r3
    4032:	f3bf 8f6f 	isb	sy
    4036:	f3bf 8f4f 	dsb	sy
    403a:	e7fe      	b.n	403a <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    403c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    403e:	2801      	cmp	r0, #1
    4040:	d0b5      	beq.n	3fae <xQueueGenericSendFromISR+0x12>
    4042:	f04f 0380 	mov.w	r3, #128	; 0x80
    4046:	f383 8811 	msr	BASEPRI, r3
    404a:	f3bf 8f6f 	isb	sy
    404e:	f3bf 8f4f 	dsb	sy
    4052:	e7fe      	b.n	4052 <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4054:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4056:	b1bb      	cbz	r3, 4088 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4058:	f104 0024 	add.w	r0, r4, #36	; 0x24
    405c:	4b10      	ldr	r3, [pc, #64]	; (40a0 <xQueueGenericSendFromISR+0x104>)
    405e:	4798      	blx	r3
    4060:	b1a0      	cbz	r0, 408c <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    4062:	f1b8 0f00 	cmp.w	r8, #0
    4066:	d013      	beq.n	4090 <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    4068:	2001      	movs	r0, #1
    406a:	f8c8 0000 	str.w	r0, [r8]
    406e:	e7cc      	b.n	400a <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    4070:	1c6b      	adds	r3, r5, #1
    4072:	b25b      	sxtb	r3, r3
    4074:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    4078:	2001      	movs	r0, #1
    407a:	e7c6      	b.n	400a <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    407c:	2000      	movs	r0, #0
    407e:	e7c4      	b.n	400a <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    4080:	2001      	movs	r0, #1
    4082:	e7c2      	b.n	400a <xQueueGenericSendFromISR+0x6e>
    4084:	2001      	movs	r0, #1
    4086:	e7c0      	b.n	400a <xQueueGenericSendFromISR+0x6e>
    4088:	2001      	movs	r0, #1
    408a:	e7be      	b.n	400a <xQueueGenericSendFromISR+0x6e>
    408c:	2001      	movs	r0, #1
    408e:	e7bc      	b.n	400a <xQueueGenericSendFromISR+0x6e>
    4090:	2001      	movs	r0, #1
    4092:	e7ba      	b.n	400a <xQueueGenericSendFromISR+0x6e>
    4094:	0000396d 	.word	0x0000396d
    4098:	00003b05 	.word	0x00003b05
    409c:	00003b85 	.word	0x00003b85
    40a0:	00004c65 	.word	0x00004c65

000040a4 <xQueueReceive>:
{
    40a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40a8:	b084      	sub	sp, #16
    40aa:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    40ac:	b180      	cbz	r0, 40d0 <xQueueReceive+0x2c>
    40ae:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    40b0:	b1b9      	cbz	r1, 40e2 <xQueueReceive+0x3e>
    40b2:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    40b4:	4b50      	ldr	r3, [pc, #320]	; (41f8 <xQueueReceive+0x154>)
    40b6:	4798      	blx	r3
    40b8:	b9f8      	cbnz	r0, 40fa <xQueueReceive+0x56>
    40ba:	9b01      	ldr	r3, [sp, #4]
    40bc:	b32b      	cbz	r3, 410a <xQueueReceive+0x66>
    40be:	f04f 0380 	mov.w	r3, #128	; 0x80
    40c2:	f383 8811 	msr	BASEPRI, r3
    40c6:	f3bf 8f6f 	isb	sy
    40ca:	f3bf 8f4f 	dsb	sy
    40ce:	e7fe      	b.n	40ce <xQueueReceive+0x2a>
    40d0:	f04f 0380 	mov.w	r3, #128	; 0x80
    40d4:	f383 8811 	msr	BASEPRI, r3
    40d8:	f3bf 8f6f 	isb	sy
    40dc:	f3bf 8f4f 	dsb	sy
    40e0:	e7fe      	b.n	40e0 <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    40e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    40e4:	2b00      	cmp	r3, #0
    40e6:	d0e4      	beq.n	40b2 <xQueueReceive+0xe>
    40e8:	f04f 0380 	mov.w	r3, #128	; 0x80
    40ec:	f383 8811 	msr	BASEPRI, r3
    40f0:	f3bf 8f6f 	isb	sy
    40f4:	f3bf 8f4f 	dsb	sy
    40f8:	e7fe      	b.n	40f8 <xQueueReceive+0x54>
    40fa:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    40fc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 4224 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4100:	f8df a124 	ldr.w	sl, [pc, #292]	; 4228 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    4104:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 4204 <xQueueReceive+0x160>
    4108:	e029      	b.n	415e <xQueueReceive+0xba>
    410a:	2700      	movs	r7, #0
    410c:	e7f6      	b.n	40fc <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    410e:	4631      	mov	r1, r6
    4110:	4620      	mov	r0, r4
    4112:	4b3a      	ldr	r3, [pc, #232]	; (41fc <xQueueReceive+0x158>)
    4114:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    4116:	3d01      	subs	r5, #1
    4118:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    411a:	6923      	ldr	r3, [r4, #16]
    411c:	b163      	cbz	r3, 4138 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    411e:	f104 0010 	add.w	r0, r4, #16
    4122:	4b37      	ldr	r3, [pc, #220]	; (4200 <xQueueReceive+0x15c>)
    4124:	4798      	blx	r3
    4126:	b138      	cbz	r0, 4138 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    4128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    412c:	4b35      	ldr	r3, [pc, #212]	; (4204 <xQueueReceive+0x160>)
    412e:	601a      	str	r2, [r3, #0]
    4130:	f3bf 8f4f 	dsb	sy
    4134:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    4138:	4b33      	ldr	r3, [pc, #204]	; (4208 <xQueueReceive+0x164>)
    413a:	4798      	blx	r3
				return pdPASS;
    413c:	2001      	movs	r0, #1
}
    413e:	b004      	add	sp, #16
    4140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    4144:	4b30      	ldr	r3, [pc, #192]	; (4208 <xQueueReceive+0x164>)
    4146:	4798      	blx	r3
					return errQUEUE_EMPTY;
    4148:	2000      	movs	r0, #0
    414a:	e7f8      	b.n	413e <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    414c:	a802      	add	r0, sp, #8
    414e:	47d0      	blx	sl
    4150:	e00e      	b.n	4170 <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    4152:	4620      	mov	r0, r4
    4154:	4b2d      	ldr	r3, [pc, #180]	; (420c <xQueueReceive+0x168>)
    4156:	4798      	blx	r3
				(void)xTaskResumeAll();
    4158:	4b2d      	ldr	r3, [pc, #180]	; (4210 <xQueueReceive+0x16c>)
    415a:	4798      	blx	r3
    415c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    415e:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4160:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    4162:	2d00      	cmp	r5, #0
    4164:	d1d3      	bne.n	410e <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    4166:	9b01      	ldr	r3, [sp, #4]
    4168:	2b00      	cmp	r3, #0
    416a:	d0eb      	beq.n	4144 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    416c:	2f00      	cmp	r7, #0
    416e:	d0ed      	beq.n	414c <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    4170:	4b25      	ldr	r3, [pc, #148]	; (4208 <xQueueReceive+0x164>)
    4172:	4798      	blx	r3
		vTaskSuspendAll();
    4174:	4b27      	ldr	r3, [pc, #156]	; (4214 <xQueueReceive+0x170>)
    4176:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4178:	47c0      	blx	r8
    417a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    417e:	b25b      	sxtb	r3, r3
    4180:	f1b3 3fff 	cmp.w	r3, #4294967295
    4184:	bf04      	itt	eq
    4186:	2300      	moveq	r3, #0
    4188:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    418c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4190:	b25b      	sxtb	r3, r3
    4192:	f1b3 3fff 	cmp.w	r3, #4294967295
    4196:	bf04      	itt	eq
    4198:	2300      	moveq	r3, #0
    419a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    419e:	4b1a      	ldr	r3, [pc, #104]	; (4208 <xQueueReceive+0x164>)
    41a0:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    41a2:	a901      	add	r1, sp, #4
    41a4:	a802      	add	r0, sp, #8
    41a6:	4b1c      	ldr	r3, [pc, #112]	; (4218 <xQueueReceive+0x174>)
    41a8:	4798      	blx	r3
    41aa:	b9c8      	cbnz	r0, 41e0 <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    41ac:	4620      	mov	r0, r4
    41ae:	4b1b      	ldr	r3, [pc, #108]	; (421c <xQueueReceive+0x178>)
    41b0:	4798      	blx	r3
    41b2:	2800      	cmp	r0, #0
    41b4:	d0cd      	beq.n	4152 <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    41b6:	9901      	ldr	r1, [sp, #4]
    41b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    41bc:	4b18      	ldr	r3, [pc, #96]	; (4220 <xQueueReceive+0x17c>)
    41be:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    41c0:	4620      	mov	r0, r4
    41c2:	4b12      	ldr	r3, [pc, #72]	; (420c <xQueueReceive+0x168>)
    41c4:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    41c6:	4b12      	ldr	r3, [pc, #72]	; (4210 <xQueueReceive+0x16c>)
    41c8:	4798      	blx	r3
    41ca:	2800      	cmp	r0, #0
    41cc:	d1c6      	bne.n	415c <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    41ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    41d2:	f8c9 3000 	str.w	r3, [r9]
    41d6:	f3bf 8f4f 	dsb	sy
    41da:	f3bf 8f6f 	isb	sy
    41de:	e7bd      	b.n	415c <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    41e0:	4620      	mov	r0, r4
    41e2:	4b0a      	ldr	r3, [pc, #40]	; (420c <xQueueReceive+0x168>)
    41e4:	4798      	blx	r3
			(void)xTaskResumeAll();
    41e6:	4b0a      	ldr	r3, [pc, #40]	; (4210 <xQueueReceive+0x16c>)
    41e8:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    41ea:	4620      	mov	r0, r4
    41ec:	4b0b      	ldr	r3, [pc, #44]	; (421c <xQueueReceive+0x178>)
    41ee:	4798      	blx	r3
    41f0:	2800      	cmp	r0, #0
    41f2:	d0b3      	beq.n	415c <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    41f4:	2000      	movs	r0, #0
    41f6:	e7a2      	b.n	413e <xQueueReceive+0x9a>
    41f8:	00004da5 	.word	0x00004da5
    41fc:	00003c09 	.word	0x00003c09
    4200:	00004c65 	.word	0x00004c65
    4204:	e000ed04 	.word	0xe000ed04
    4208:	00003759 	.word	0x00003759
    420c:	00003c31 	.word	0x00003c31
    4210:	00004919 	.word	0x00004919
    4214:	000047d1 	.word	0x000047d1
    4218:	00004d09 	.word	0x00004d09
    421c:	00003ae5 	.word	0x00003ae5
    4220:	00004be5 	.word	0x00004be5
    4224:	00003715 	.word	0x00003715
    4228:	00004cf5 	.word	0x00004cf5

0000422c <xQueueSemaphoreTake>:
{
    422c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4230:	b085      	sub	sp, #20
    4232:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    4234:	b158      	cbz	r0, 424e <xQueueSemaphoreTake+0x22>
    4236:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    4238:	6c03      	ldr	r3, [r0, #64]	; 0x40
    423a:	b18b      	cbz	r3, 4260 <xQueueSemaphoreTake+0x34>
    423c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4240:	f383 8811 	msr	BASEPRI, r3
    4244:	f3bf 8f6f 	isb	sy
    4248:	f3bf 8f4f 	dsb	sy
    424c:	e7fe      	b.n	424c <xQueueSemaphoreTake+0x20>
    424e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4252:	f383 8811 	msr	BASEPRI, r3
    4256:	f3bf 8f6f 	isb	sy
    425a:	f3bf 8f4f 	dsb	sy
    425e:	e7fe      	b.n	425e <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4260:	4b5b      	ldr	r3, [pc, #364]	; (43d0 <xQueueSemaphoreTake+0x1a4>)
    4262:	4798      	blx	r3
    4264:	b950      	cbnz	r0, 427c <xQueueSemaphoreTake+0x50>
    4266:	9b01      	ldr	r3, [sp, #4]
    4268:	b183      	cbz	r3, 428c <xQueueSemaphoreTake+0x60>
    426a:	f04f 0380 	mov.w	r3, #128	; 0x80
    426e:	f383 8811 	msr	BASEPRI, r3
    4272:	f3bf 8f6f 	isb	sy
    4276:	f3bf 8f4f 	dsb	sy
    427a:	e7fe      	b.n	427a <xQueueSemaphoreTake+0x4e>
    427c:	2500      	movs	r5, #0
    427e:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    4280:	4e54      	ldr	r6, [pc, #336]	; (43d4 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    4282:	f8df 9184 	ldr.w	r9, [pc, #388]	; 4408 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    4286:	f8df 8158 	ldr.w	r8, [pc, #344]	; 43e0 <xQueueSemaphoreTake+0x1b4>
    428a:	e048      	b.n	431e <xQueueSemaphoreTake+0xf2>
    428c:	2500      	movs	r5, #0
    428e:	462f      	mov	r7, r5
    4290:	e7f6      	b.n	4280 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    4292:	3b01      	subs	r3, #1
    4294:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4296:	6823      	ldr	r3, [r4, #0]
    4298:	b913      	cbnz	r3, 42a0 <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    429a:	4b4f      	ldr	r3, [pc, #316]	; (43d8 <xQueueSemaphoreTake+0x1ac>)
    429c:	4798      	blx	r3
    429e:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    42a0:	6923      	ldr	r3, [r4, #16]
    42a2:	b163      	cbz	r3, 42be <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    42a4:	f104 0010 	add.w	r0, r4, #16
    42a8:	4b4c      	ldr	r3, [pc, #304]	; (43dc <xQueueSemaphoreTake+0x1b0>)
    42aa:	4798      	blx	r3
    42ac:	b138      	cbz	r0, 42be <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    42ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    42b2:	4b4b      	ldr	r3, [pc, #300]	; (43e0 <xQueueSemaphoreTake+0x1b4>)
    42b4:	601a      	str	r2, [r3, #0]
    42b6:	f3bf 8f4f 	dsb	sy
    42ba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    42be:	4b49      	ldr	r3, [pc, #292]	; (43e4 <xQueueSemaphoreTake+0x1b8>)
    42c0:	4798      	blx	r3
				return pdPASS;
    42c2:	2501      	movs	r5, #1
}
    42c4:	4628      	mov	r0, r5
    42c6:	b005      	add	sp, #20
    42c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    42cc:	b145      	cbz	r5, 42e0 <xQueueSemaphoreTake+0xb4>
    42ce:	f04f 0380 	mov.w	r3, #128	; 0x80
    42d2:	f383 8811 	msr	BASEPRI, r3
    42d6:	f3bf 8f6f 	isb	sy
    42da:	f3bf 8f4f 	dsb	sy
    42de:	e7fe      	b.n	42de <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    42e0:	4b40      	ldr	r3, [pc, #256]	; (43e4 <xQueueSemaphoreTake+0x1b8>)
    42e2:	4798      	blx	r3
					return errQUEUE_EMPTY;
    42e4:	e7ee      	b.n	42c4 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    42e6:	a802      	add	r0, sp, #8
    42e8:	47c8      	blx	r9
    42ea:	e021      	b.n	4330 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    42ec:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    42ee:	6860      	ldr	r0, [r4, #4]
    42f0:	4b3d      	ldr	r3, [pc, #244]	; (43e8 <xQueueSemaphoreTake+0x1bc>)
    42f2:	4798      	blx	r3
    42f4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    42f6:	4b3b      	ldr	r3, [pc, #236]	; (43e4 <xQueueSemaphoreTake+0x1b8>)
    42f8:	4798      	blx	r3
    42fa:	e040      	b.n	437e <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    42fc:	4620      	mov	r0, r4
    42fe:	4b3b      	ldr	r3, [pc, #236]	; (43ec <xQueueSemaphoreTake+0x1c0>)
    4300:	4798      	blx	r3
				(void)xTaskResumeAll();
    4302:	4b3b      	ldr	r3, [pc, #236]	; (43f0 <xQueueSemaphoreTake+0x1c4>)
    4304:	4798      	blx	r3
    4306:	e009      	b.n	431c <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    4308:	4620      	mov	r0, r4
    430a:	4b38      	ldr	r3, [pc, #224]	; (43ec <xQueueSemaphoreTake+0x1c0>)
    430c:	4798      	blx	r3
			(void)xTaskResumeAll();
    430e:	4b38      	ldr	r3, [pc, #224]	; (43f0 <xQueueSemaphoreTake+0x1c4>)
    4310:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    4312:	4620      	mov	r0, r4
    4314:	4b37      	ldr	r3, [pc, #220]	; (43f4 <xQueueSemaphoreTake+0x1c8>)
    4316:	4798      	blx	r3
    4318:	2800      	cmp	r0, #0
    431a:	d145      	bne.n	43a8 <xQueueSemaphoreTake+0x17c>
    431c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    431e:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    4320:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    4322:	2b00      	cmp	r3, #0
    4324:	d1b5      	bne.n	4292 <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    4326:	9b01      	ldr	r3, [sp, #4]
    4328:	2b00      	cmp	r3, #0
    432a:	d0cf      	beq.n	42cc <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    432c:	2f00      	cmp	r7, #0
    432e:	d0da      	beq.n	42e6 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    4330:	4b2c      	ldr	r3, [pc, #176]	; (43e4 <xQueueSemaphoreTake+0x1b8>)
    4332:	4798      	blx	r3
		vTaskSuspendAll();
    4334:	4b30      	ldr	r3, [pc, #192]	; (43f8 <xQueueSemaphoreTake+0x1cc>)
    4336:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4338:	47b0      	blx	r6
    433a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    433e:	b25b      	sxtb	r3, r3
    4340:	f1b3 3fff 	cmp.w	r3, #4294967295
    4344:	bf04      	itt	eq
    4346:	2300      	moveq	r3, #0
    4348:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    434c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4350:	b25b      	sxtb	r3, r3
    4352:	f1b3 3fff 	cmp.w	r3, #4294967295
    4356:	bf04      	itt	eq
    4358:	2300      	moveq	r3, #0
    435a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    435e:	4b21      	ldr	r3, [pc, #132]	; (43e4 <xQueueSemaphoreTake+0x1b8>)
    4360:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4362:	a901      	add	r1, sp, #4
    4364:	a802      	add	r0, sp, #8
    4366:	4b25      	ldr	r3, [pc, #148]	; (43fc <xQueueSemaphoreTake+0x1d0>)
    4368:	4798      	blx	r3
    436a:	2800      	cmp	r0, #0
    436c:	d1cc      	bne.n	4308 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    436e:	4620      	mov	r0, r4
    4370:	4b20      	ldr	r3, [pc, #128]	; (43f4 <xQueueSemaphoreTake+0x1c8>)
    4372:	4798      	blx	r3
    4374:	2800      	cmp	r0, #0
    4376:	d0c1      	beq.n	42fc <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4378:	6823      	ldr	r3, [r4, #0]
    437a:	2b00      	cmp	r3, #0
    437c:	d0b6      	beq.n	42ec <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    437e:	9901      	ldr	r1, [sp, #4]
    4380:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4384:	4b1e      	ldr	r3, [pc, #120]	; (4400 <xQueueSemaphoreTake+0x1d4>)
    4386:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4388:	4620      	mov	r0, r4
    438a:	4b18      	ldr	r3, [pc, #96]	; (43ec <xQueueSemaphoreTake+0x1c0>)
    438c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    438e:	4b18      	ldr	r3, [pc, #96]	; (43f0 <xQueueSemaphoreTake+0x1c4>)
    4390:	4798      	blx	r3
    4392:	2800      	cmp	r0, #0
    4394:	d1c2      	bne.n	431c <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    4396:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    439a:	f8c8 3000 	str.w	r3, [r8]
    439e:	f3bf 8f4f 	dsb	sy
    43a2:	f3bf 8f6f 	isb	sy
    43a6:	e7b9      	b.n	431c <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    43a8:	2d00      	cmp	r5, #0
    43aa:	d08b      	beq.n	42c4 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    43ac:	4b09      	ldr	r3, [pc, #36]	; (43d4 <xQueueSemaphoreTake+0x1a8>)
    43ae:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    43b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    43b2:	b153      	cbz	r3, 43ca <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    43b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    43b6:	6819      	ldr	r1, [r3, #0]
    43b8:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    43bc:	6860      	ldr	r0, [r4, #4]
    43be:	4b11      	ldr	r3, [pc, #68]	; (4404 <xQueueSemaphoreTake+0x1d8>)
    43c0:	4798      	blx	r3
						taskEXIT_CRITICAL();
    43c2:	4b08      	ldr	r3, [pc, #32]	; (43e4 <xQueueSemaphoreTake+0x1b8>)
    43c4:	4798      	blx	r3
				return errQUEUE_EMPTY;
    43c6:	2500      	movs	r5, #0
    43c8:	e77c      	b.n	42c4 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    43ca:	2100      	movs	r1, #0
    43cc:	e7f6      	b.n	43bc <xQueueSemaphoreTake+0x190>
    43ce:	bf00      	nop
    43d0:	00004da5 	.word	0x00004da5
    43d4:	00003715 	.word	0x00003715
    43d8:	00004fb1 	.word	0x00004fb1
    43dc:	00004c65 	.word	0x00004c65
    43e0:	e000ed04 	.word	0xe000ed04
    43e4:	00003759 	.word	0x00003759
    43e8:	00004dc5 	.word	0x00004dc5
    43ec:	00003c31 	.word	0x00003c31
    43f0:	00004919 	.word	0x00004919
    43f4:	00003ae5 	.word	0x00003ae5
    43f8:	000047d1 	.word	0x000047d1
    43fc:	00004d09 	.word	0x00004d09
    4400:	00004be5 	.word	0x00004be5
    4404:	00004f05 	.word	0x00004f05
    4408:	00004cf5 	.word	0x00004cf5

0000440c <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    440c:	b940      	cbnz	r0, 4420 <uxQueueMessagesWaiting+0x14>
    440e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4412:	f383 8811 	msr	BASEPRI, r3
    4416:	f3bf 8f6f 	isb	sy
    441a:	f3bf 8f4f 	dsb	sy
    441e:	e7fe      	b.n	441e <uxQueueMessagesWaiting+0x12>
{
    4420:	b510      	push	{r4, lr}
    4422:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    4424:	4b03      	ldr	r3, [pc, #12]	; (4434 <uxQueueMessagesWaiting+0x28>)
    4426:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    4428:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    442a:	4b03      	ldr	r3, [pc, #12]	; (4438 <uxQueueMessagesWaiting+0x2c>)
    442c:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    442e:	4620      	mov	r0, r4
    4430:	bd10      	pop	{r4, pc}
    4432:	bf00      	nop
    4434:	00003715 	.word	0x00003715
    4438:	00003759 	.word	0x00003759

0000443c <vQueueWaitForMessageRestricted>:
{
    443c:	b570      	push	{r4, r5, r6, lr}
    443e:	4604      	mov	r4, r0
    4440:	460d      	mov	r5, r1
    4442:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    4444:	4b11      	ldr	r3, [pc, #68]	; (448c <vQueueWaitForMessageRestricted+0x50>)
    4446:	4798      	blx	r3
    4448:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    444c:	b25b      	sxtb	r3, r3
    444e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4452:	bf04      	itt	eq
    4454:	2300      	moveq	r3, #0
    4456:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    445a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    445e:	b25b      	sxtb	r3, r3
    4460:	f1b3 3fff 	cmp.w	r3, #4294967295
    4464:	bf04      	itt	eq
    4466:	2300      	moveq	r3, #0
    4468:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    446c:	4b08      	ldr	r3, [pc, #32]	; (4490 <vQueueWaitForMessageRestricted+0x54>)
    446e:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    4470:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4472:	b11b      	cbz	r3, 447c <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    4474:	4620      	mov	r0, r4
    4476:	4b07      	ldr	r3, [pc, #28]	; (4494 <vQueueWaitForMessageRestricted+0x58>)
    4478:	4798      	blx	r3
    447a:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    447c:	4632      	mov	r2, r6
    447e:	4629      	mov	r1, r5
    4480:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4484:	4b04      	ldr	r3, [pc, #16]	; (4498 <vQueueWaitForMessageRestricted+0x5c>)
    4486:	4798      	blx	r3
    4488:	e7f4      	b.n	4474 <vQueueWaitForMessageRestricted+0x38>
    448a:	bf00      	nop
    448c:	00003715 	.word	0x00003715
    4490:	00003759 	.word	0x00003759
    4494:	00003c31 	.word	0x00003c31
    4498:	00004c21 	.word	0x00004c21

0000449c <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    449c:	4a06      	ldr	r2, [pc, #24]	; (44b8 <prvIdleTask+0x1c>)
				taskYIELD();
    449e:	4807      	ldr	r0, [pc, #28]	; (44bc <prvIdleTask+0x20>)
    44a0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    44a4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    44a6:	2b01      	cmp	r3, #1
    44a8:	d9fc      	bls.n	44a4 <prvIdleTask+0x8>
				taskYIELD();
    44aa:	6001      	str	r1, [r0, #0]
    44ac:	f3bf 8f4f 	dsb	sy
    44b0:	f3bf 8f6f 	isb	sy
    44b4:	e7f6      	b.n	44a4 <prvIdleTask+0x8>
    44b6:	bf00      	nop
    44b8:	200032bc 	.word	0x200032bc
    44bc:	e000ed04 	.word	0xe000ed04

000044c0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    44c0:	4b09      	ldr	r3, [pc, #36]	; (44e8 <prvResetNextTaskUnblockTime+0x28>)
    44c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    44c6:	681b      	ldr	r3, [r3, #0]
    44c8:	b143      	cbz	r3, 44dc <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    44ca:	4b07      	ldr	r3, [pc, #28]	; (44e8 <prvResetNextTaskUnblockTime+0x28>)
    44cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    44d0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    44d2:	68d2      	ldr	r2, [r2, #12]
    44d4:	6852      	ldr	r2, [r2, #4]
    44d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    44da:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    44dc:	f04f 32ff 	mov.w	r2, #4294967295
    44e0:	4b01      	ldr	r3, [pc, #4]	; (44e8 <prvResetNextTaskUnblockTime+0x28>)
    44e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    44e6:	4770      	bx	lr
    44e8:	200032bc 	.word	0x200032bc

000044ec <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    44ec:	b570      	push	{r4, r5, r6, lr}
    44ee:	4604      	mov	r4, r0
    44f0:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    44f2:	4b1a      	ldr	r3, [pc, #104]	; (455c <prvAddCurrentTaskToDelayedList+0x70>)
    44f4:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    44f8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    44fc:	3004      	adds	r0, #4
    44fe:	4b18      	ldr	r3, [pc, #96]	; (4560 <prvAddCurrentTaskToDelayedList+0x74>)
    4500:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    4502:	f1b4 3fff 	cmp.w	r4, #4294967295
    4506:	d016      	beq.n	4536 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    4508:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    450a:	4b14      	ldr	r3, [pc, #80]	; (455c <prvAddCurrentTaskToDelayedList+0x70>)
    450c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4510:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    4512:	42a5      	cmp	r5, r4
    4514:	d818      	bhi.n	4548 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    4516:	4d11      	ldr	r5, [pc, #68]	; (455c <prvAddCurrentTaskToDelayedList+0x70>)
    4518:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    451c:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    4520:	3104      	adds	r1, #4
    4522:	4b10      	ldr	r3, [pc, #64]	; (4564 <prvAddCurrentTaskToDelayedList+0x78>)
    4524:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    4526:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    452a:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    452c:	bf3c      	itt	cc
    452e:	462b      	movcc	r3, r5
    4530:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    4534:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    4536:	2e00      	cmp	r6, #0
    4538:	d0e6      	beq.n	4508 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    453a:	4808      	ldr	r0, [pc, #32]	; (455c <prvAddCurrentTaskToDelayedList+0x70>)
    453c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    4540:	3104      	adds	r1, #4
    4542:	4b09      	ldr	r3, [pc, #36]	; (4568 <prvAddCurrentTaskToDelayedList+0x7c>)
    4544:	4798      	blx	r3
    4546:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    4548:	4b04      	ldr	r3, [pc, #16]	; (455c <prvAddCurrentTaskToDelayedList+0x70>)
    454a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    454e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4552:	3104      	adds	r1, #4
    4554:	4b03      	ldr	r3, [pc, #12]	; (4564 <prvAddCurrentTaskToDelayedList+0x78>)
    4556:	4798      	blx	r3
    4558:	bd70      	pop	{r4, r5, r6, pc}
    455a:	bf00      	nop
    455c:	200032bc 	.word	0x200032bc
    4560:	0000361d 	.word	0x0000361d
    4564:	000035e9 	.word	0x000035e9
    4568:	000035d1 	.word	0x000035d1

0000456c <xTaskCreate>:
{
    456c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4570:	b083      	sub	sp, #12
    4572:	4683      	mov	fp, r0
    4574:	460d      	mov	r5, r1
    4576:	9301      	str	r3, [sp, #4]
    4578:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    457c:	0096      	lsls	r6, r2, #2
    457e:	4630      	mov	r0, r6
    4580:	4b66      	ldr	r3, [pc, #408]	; (471c <xTaskCreate+0x1b0>)
    4582:	4798      	blx	r3
		if (pxStack != NULL) {
    4584:	2800      	cmp	r0, #0
    4586:	f000 8096 	beq.w	46b6 <xTaskCreate+0x14a>
    458a:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    458c:	2054      	movs	r0, #84	; 0x54
    458e:	4b63      	ldr	r3, [pc, #396]	; (471c <xTaskCreate+0x1b0>)
    4590:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    4592:	4604      	mov	r4, r0
    4594:	2800      	cmp	r0, #0
    4596:	f000 808b 	beq.w	46b0 <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    459a:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    459c:	4632      	mov	r2, r6
    459e:	21a5      	movs	r1, #165	; 0xa5
    45a0:	4638      	mov	r0, r7
    45a2:	4b5f      	ldr	r3, [pc, #380]	; (4720 <xTaskCreate+0x1b4>)
    45a4:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    45a6:	3e04      	subs	r6, #4
    45a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    45aa:	441e      	add	r6, r3
		                      & (~(
    45ac:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    45b0:	782b      	ldrb	r3, [r5, #0]
    45b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    45b6:	782b      	ldrb	r3, [r5, #0]
    45b8:	b15b      	cbz	r3, 45d2 <xTaskCreate+0x66>
    45ba:	462b      	mov	r3, r5
    45bc:	f104 0235 	add.w	r2, r4, #53	; 0x35
    45c0:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    45c2:	7858      	ldrb	r0, [r3, #1]
    45c4:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    45c8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    45cc:	b108      	cbz	r0, 45d2 <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    45ce:	4299      	cmp	r1, r3
    45d0:	d1f7      	bne.n	45c2 <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    45d2:	2700      	movs	r7, #0
    45d4:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    45d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    45da:	2d04      	cmp	r5, #4
    45dc:	bf28      	it	cs
    45de:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    45e0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    45e2:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    45e4:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    45e6:	f104 0804 	add.w	r8, r4, #4
    45ea:	4640      	mov	r0, r8
    45ec:	f8df 9154 	ldr.w	r9, [pc, #340]	; 4744 <xTaskCreate+0x1d8>
    45f0:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    45f2:	f104 0018 	add.w	r0, r4, #24
    45f6:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    45f8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    45fa:	f1c5 0505 	rsb	r5, r5, #5
    45fe:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    4600:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    4602:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    4604:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    4608:	9a01      	ldr	r2, [sp, #4]
    460a:	4659      	mov	r1, fp
    460c:	4630      	mov	r0, r6
    460e:	4b45      	ldr	r3, [pc, #276]	; (4724 <xTaskCreate+0x1b8>)
    4610:	4798      	blx	r3
    4612:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    4614:	f1ba 0f00 	cmp.w	sl, #0
    4618:	d001      	beq.n	461e <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    461a:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    461e:	4b42      	ldr	r3, [pc, #264]	; (4728 <xTaskCreate+0x1bc>)
    4620:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    4622:	4b42      	ldr	r3, [pc, #264]	; (472c <xTaskCreate+0x1c0>)
    4624:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    4628:	3201      	adds	r2, #1
    462a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    462e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4632:	2b00      	cmp	r3, #0
    4634:	d042      	beq.n	46bc <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    4636:	4b3d      	ldr	r3, [pc, #244]	; (472c <xTaskCreate+0x1c0>)
    4638:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    463c:	b94b      	cbnz	r3, 4652 <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    463e:	4b3b      	ldr	r3, [pc, #236]	; (472c <xTaskCreate+0x1c0>)
    4640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4646:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4648:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    464a:	bf9c      	itt	ls
    464c:	4b37      	ldrls	r3, [pc, #220]	; (472c <xTaskCreate+0x1c0>)
    464e:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    4652:	4a36      	ldr	r2, [pc, #216]	; (472c <xTaskCreate+0x1c0>)
    4654:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    4658:	3301      	adds	r3, #1
    465a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    465e:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    4660:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4662:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    4666:	4293      	cmp	r3, r2
    4668:	bf84      	itt	hi
    466a:	4a30      	ldrhi	r2, [pc, #192]	; (472c <xTaskCreate+0x1c0>)
    466c:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    4670:	4d2e      	ldr	r5, [pc, #184]	; (472c <xTaskCreate+0x1c0>)
    4672:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4676:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    467a:	4641      	mov	r1, r8
    467c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4680:	4b2b      	ldr	r3, [pc, #172]	; (4730 <xTaskCreate+0x1c4>)
    4682:	4798      	blx	r3
	taskEXIT_CRITICAL();
    4684:	4b2b      	ldr	r3, [pc, #172]	; (4734 <xTaskCreate+0x1c8>)
    4686:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    4688:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    468c:	2b00      	cmp	r3, #0
    468e:	d03f      	beq.n	4710 <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    4690:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4696:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4698:	429a      	cmp	r2, r3
    469a:	d23d      	bcs.n	4718 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    469c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    46a0:	4b25      	ldr	r3, [pc, #148]	; (4738 <xTaskCreate+0x1cc>)
    46a2:	601a      	str	r2, [r3, #0]
    46a4:	f3bf 8f4f 	dsb	sy
    46a8:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    46ac:	2001      	movs	r0, #1
    46ae:	e030      	b.n	4712 <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    46b0:	4638      	mov	r0, r7
    46b2:	4b22      	ldr	r3, [pc, #136]	; (473c <xTaskCreate+0x1d0>)
    46b4:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    46b6:	f04f 30ff 	mov.w	r0, #4294967295
    46ba:	e02a      	b.n	4712 <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    46bc:	4b1b      	ldr	r3, [pc, #108]	; (472c <xTaskCreate+0x1c0>)
    46be:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    46c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    46c6:	2b01      	cmp	r3, #1
    46c8:	d1c3      	bne.n	4652 <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    46ca:	4d18      	ldr	r5, [pc, #96]	; (472c <xTaskCreate+0x1c0>)
    46cc:	f105 0028 	add.w	r0, r5, #40	; 0x28
    46d0:	4e1b      	ldr	r6, [pc, #108]	; (4740 <xTaskCreate+0x1d4>)
    46d2:	47b0      	blx	r6
    46d4:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    46d8:	47b0      	blx	r6
    46da:	f105 0050 	add.w	r0, r5, #80	; 0x50
    46de:	47b0      	blx	r6
    46e0:	f105 0064 	add.w	r0, r5, #100	; 0x64
    46e4:	47b0      	blx	r6
    46e6:	f105 0078 	add.w	r0, r5, #120	; 0x78
    46ea:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    46ec:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    46f0:	4648      	mov	r0, r9
    46f2:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    46f4:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    46f8:	4638      	mov	r0, r7
    46fa:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    46fc:	f105 0014 	add.w	r0, r5, #20
    4700:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    4702:	4628      	mov	r0, r5
    4704:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    4706:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    470a:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    470e:	e7a0      	b.n	4652 <xTaskCreate+0xe6>
		xReturn = pdPASS;
    4710:	2001      	movs	r0, #1
}
    4712:	b003      	add	sp, #12
    4714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    4718:	2001      	movs	r0, #1
	return xReturn;
    471a:	e7fa      	b.n	4712 <xTaskCreate+0x1a6>
    471c:	000039c5 	.word	0x000039c5
    4720:	00005621 	.word	0x00005621
    4724:	000036c1 	.word	0x000036c1
    4728:	00003715 	.word	0x00003715
    472c:	200032bc 	.word	0x200032bc
    4730:	000035d1 	.word	0x000035d1
    4734:	00003759 	.word	0x00003759
    4738:	e000ed04 	.word	0xe000ed04
    473c:	00003a99 	.word	0x00003a99
    4740:	000035b5 	.word	0x000035b5
    4744:	000035cb 	.word	0x000035cb

00004748 <vTaskStartScheduler>:
{
    4748:	b510      	push	{r4, lr}
    474a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    474c:	4b19      	ldr	r3, [pc, #100]	; (47b4 <vTaskStartScheduler+0x6c>)
    474e:	9301      	str	r3, [sp, #4]
    4750:	2300      	movs	r3, #0
    4752:	9300      	str	r3, [sp, #0]
    4754:	2280      	movs	r2, #128	; 0x80
    4756:	4918      	ldr	r1, [pc, #96]	; (47b8 <vTaskStartScheduler+0x70>)
    4758:	4818      	ldr	r0, [pc, #96]	; (47bc <vTaskStartScheduler+0x74>)
    475a:	4c19      	ldr	r4, [pc, #100]	; (47c0 <vTaskStartScheduler+0x78>)
    475c:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    475e:	2801      	cmp	r0, #1
    4760:	d004      	beq.n	476c <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    4762:	f1b0 3fff 	cmp.w	r0, #4294967295
    4766:	d01b      	beq.n	47a0 <vTaskStartScheduler+0x58>
}
    4768:	b002      	add	sp, #8
    476a:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    476c:	4b15      	ldr	r3, [pc, #84]	; (47c4 <vTaskStartScheduler+0x7c>)
    476e:	4798      	blx	r3
	if (xReturn == pdPASS) {
    4770:	2801      	cmp	r0, #1
    4772:	d1f6      	bne.n	4762 <vTaskStartScheduler+0x1a>
    4774:	f04f 0380 	mov.w	r3, #128	; 0x80
    4778:	f383 8811 	msr	BASEPRI, r3
    477c:	f3bf 8f6f 	isb	sy
    4780:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    4784:	4b10      	ldr	r3, [pc, #64]	; (47c8 <vTaskStartScheduler+0x80>)
    4786:	f04f 32ff 	mov.w	r2, #4294967295
    478a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    478e:	2201      	movs	r2, #1
    4790:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    4794:	2200      	movs	r2, #0
    4796:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    479a:	4b0c      	ldr	r3, [pc, #48]	; (47cc <vTaskStartScheduler+0x84>)
    479c:	4798      	blx	r3
    479e:	e7e3      	b.n	4768 <vTaskStartScheduler+0x20>
    47a0:	f04f 0380 	mov.w	r3, #128	; 0x80
    47a4:	f383 8811 	msr	BASEPRI, r3
    47a8:	f3bf 8f6f 	isb	sy
    47ac:	f3bf 8f4f 	dsb	sy
    47b0:	e7fe      	b.n	47b0 <vTaskStartScheduler+0x68>
    47b2:	bf00      	nop
    47b4:	20003398 	.word	0x20003398
    47b8:	00007388 	.word	0x00007388
    47bc:	0000449d 	.word	0x0000449d
    47c0:	0000456d 	.word	0x0000456d
    47c4:	0000523d 	.word	0x0000523d
    47c8:	200032bc 	.word	0x200032bc
    47cc:	00003849 	.word	0x00003849

000047d0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    47d0:	4a03      	ldr	r2, [pc, #12]	; (47e0 <vTaskSuspendAll+0x10>)
    47d2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    47d6:	3301      	adds	r3, #1
    47d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    47dc:	4770      	bx	lr
    47de:	bf00      	nop
    47e0:	200032bc 	.word	0x200032bc

000047e4 <xTaskGetTickCount>:
		xTicks = xTickCount;
    47e4:	4b01      	ldr	r3, [pc, #4]	; (47ec <xTaskGetTickCount+0x8>)
    47e6:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    47ea:	4770      	bx	lr
    47ec:	200032bc 	.word	0x200032bc

000047f0 <xTaskIncrementTick>:
{
    47f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    47f4:	4b44      	ldr	r3, [pc, #272]	; (4908 <xTaskIncrementTick+0x118>)
    47f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    47fa:	2b00      	cmp	r3, #0
    47fc:	d173      	bne.n	48e6 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    47fe:	4b42      	ldr	r3, [pc, #264]	; (4908 <xTaskIncrementTick+0x118>)
    4800:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    4804:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    4806:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    480a:	b9e6      	cbnz	r6, 4846 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    480c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    4810:	681b      	ldr	r3, [r3, #0]
    4812:	b143      	cbz	r3, 4826 <xTaskIncrementTick+0x36>
    4814:	f04f 0380 	mov.w	r3, #128	; 0x80
    4818:	f383 8811 	msr	BASEPRI, r3
    481c:	f3bf 8f6f 	isb	sy
    4820:	f3bf 8f4f 	dsb	sy
    4824:	e7fe      	b.n	4824 <xTaskIncrementTick+0x34>
    4826:	4b38      	ldr	r3, [pc, #224]	; (4908 <xTaskIncrementTick+0x118>)
    4828:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    482c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    4830:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    4834:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    4838:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    483c:	3201      	adds	r2, #1
    483e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    4842:	4b32      	ldr	r3, [pc, #200]	; (490c <xTaskIncrementTick+0x11c>)
    4844:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    4846:	4b30      	ldr	r3, [pc, #192]	; (4908 <xTaskIncrementTick+0x118>)
    4848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    484c:	429e      	cmp	r6, r3
    484e:	d20d      	bcs.n	486c <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    4850:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    4852:	4b2d      	ldr	r3, [pc, #180]	; (4908 <xTaskIncrementTick+0x118>)
    4854:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    485a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    485e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    4864:	2b02      	cmp	r3, #2
    4866:	bf28      	it	cs
    4868:	2401      	movcs	r4, #1
    486a:	e043      	b.n	48f4 <xTaskIncrementTick+0x104>
    486c:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    486e:	4d26      	ldr	r5, [pc, #152]	; (4908 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4870:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 4914 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    4874:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    4878:	e021      	b.n	48be <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    487a:	f04f 32ff 	mov.w	r2, #4294967295
    487e:	4b22      	ldr	r3, [pc, #136]	; (4908 <xTaskIncrementTick+0x118>)
    4880:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    4884:	e7e5      	b.n	4852 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    4886:	4a20      	ldr	r2, [pc, #128]	; (4908 <xTaskIncrementTick+0x118>)
    4888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    488c:	e7e1      	b.n	4852 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    488e:	f107 0018 	add.w	r0, r7, #24
    4892:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    4894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    4896:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    489a:	4298      	cmp	r0, r3
    489c:	bf88      	it	hi
    489e:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    48a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    48a6:	4649      	mov	r1, r9
    48a8:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    48ac:	4b18      	ldr	r3, [pc, #96]	; (4910 <xTaskIncrementTick+0x120>)
    48ae:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    48b0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    48b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    48b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    48b8:	429a      	cmp	r2, r3
    48ba:	bf28      	it	cs
    48bc:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    48be:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    48c2:	681b      	ldr	r3, [r3, #0]
    48c4:	2b00      	cmp	r3, #0
    48c6:	d0d8      	beq.n	487a <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    48c8:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    48cc:	68db      	ldr	r3, [r3, #12]
    48ce:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    48d0:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    48d2:	429e      	cmp	r6, r3
    48d4:	d3d7      	bcc.n	4886 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    48d6:	f107 0904 	add.w	r9, r7, #4
    48da:	4648      	mov	r0, r9
    48dc:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    48de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    48e0:	2b00      	cmp	r3, #0
    48e2:	d1d4      	bne.n	488e <xTaskIncrementTick+0x9e>
    48e4:	e7d6      	b.n	4894 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    48e6:	4a08      	ldr	r2, [pc, #32]	; (4908 <xTaskIncrementTick+0x118>)
    48e8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    48ec:	3301      	adds	r3, #1
    48ee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    48f2:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    48f4:	4b04      	ldr	r3, [pc, #16]	; (4908 <xTaskIncrementTick+0x118>)
    48f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    48fa:	2b00      	cmp	r3, #0
}
    48fc:	bf0c      	ite	eq
    48fe:	4620      	moveq	r0, r4
    4900:	2001      	movne	r0, #1
    4902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4906:	bf00      	nop
    4908:	200032bc 	.word	0x200032bc
    490c:	000044c1 	.word	0x000044c1
    4910:	000035d1 	.word	0x000035d1
    4914:	0000361d 	.word	0x0000361d

00004918 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    4918:	4b3a      	ldr	r3, [pc, #232]	; (4a04 <xTaskResumeAll+0xec>)
    491a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    491e:	b943      	cbnz	r3, 4932 <xTaskResumeAll+0x1a>
    4920:	f04f 0380 	mov.w	r3, #128	; 0x80
    4924:	f383 8811 	msr	BASEPRI, r3
    4928:	f3bf 8f6f 	isb	sy
    492c:	f3bf 8f4f 	dsb	sy
    4930:	e7fe      	b.n	4930 <xTaskResumeAll+0x18>
{
    4932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    4936:	4b34      	ldr	r3, [pc, #208]	; (4a08 <xTaskResumeAll+0xf0>)
    4938:	4798      	blx	r3
		--uxSchedulerSuspended;
    493a:	4b32      	ldr	r3, [pc, #200]	; (4a04 <xTaskResumeAll+0xec>)
    493c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    4940:	3a01      	subs	r2, #1
    4942:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    494a:	2b00      	cmp	r3, #0
    494c:	d155      	bne.n	49fa <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    494e:	4b2d      	ldr	r3, [pc, #180]	; (4a04 <xTaskResumeAll+0xec>)
    4950:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4954:	b92b      	cbnz	r3, 4962 <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    4956:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    4958:	4b2c      	ldr	r3, [pc, #176]	; (4a0c <xTaskResumeAll+0xf4>)
    495a:	4798      	blx	r3
}
    495c:	4620      	mov	r0, r4
    495e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4962:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    4964:	4c27      	ldr	r4, [pc, #156]	; (4a04 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4966:	4e2a      	ldr	r6, [pc, #168]	; (4a10 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    4968:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    496c:	6963      	ldr	r3, [r4, #20]
    496e:	b1fb      	cbz	r3, 49b0 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    4970:	6a23      	ldr	r3, [r4, #32]
    4972:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4974:	f105 0018 	add.w	r0, r5, #24
    4978:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    497a:	1d2f      	adds	r7, r5, #4
    497c:	4638      	mov	r0, r7
    497e:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    4980:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4982:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    4986:	4298      	cmp	r0, r3
    4988:	bf88      	it	hi
    498a:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    498e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4992:	4639      	mov	r1, r7
    4994:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    4998:	4b1e      	ldr	r3, [pc, #120]	; (4a14 <xTaskResumeAll+0xfc>)
    499a:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    499c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    49a0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    49a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    49a4:	429a      	cmp	r2, r3
    49a6:	d3e1      	bcc.n	496c <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    49a8:	2301      	movs	r3, #1
    49aa:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    49ae:	e7dd      	b.n	496c <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    49b0:	b10d      	cbz	r5, 49b6 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    49b2:	4b19      	ldr	r3, [pc, #100]	; (4a18 <xTaskResumeAll+0x100>)
    49b4:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    49b6:	4b13      	ldr	r3, [pc, #76]	; (4a04 <xTaskResumeAll+0xec>)
    49b8:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    49bc:	b17c      	cbz	r4, 49de <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    49be:	4f17      	ldr	r7, [pc, #92]	; (4a1c <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    49c0:	461e      	mov	r6, r3
    49c2:	2501      	movs	r5, #1
    49c4:	e001      	b.n	49ca <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    49c6:	3c01      	subs	r4, #1
    49c8:	d005      	beq.n	49d6 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    49ca:	47b8      	blx	r7
    49cc:	2800      	cmp	r0, #0
    49ce:	d0fa      	beq.n	49c6 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    49d0:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    49d4:	e7f7      	b.n	49c6 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    49d6:	2200      	movs	r2, #0
    49d8:	4b0a      	ldr	r3, [pc, #40]	; (4a04 <xTaskResumeAll+0xec>)
    49da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    49de:	4b09      	ldr	r3, [pc, #36]	; (4a04 <xTaskResumeAll+0xec>)
    49e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    49e4:	b15b      	cbz	r3, 49fe <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    49e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    49ea:	4b0d      	ldr	r3, [pc, #52]	; (4a20 <xTaskResumeAll+0x108>)
    49ec:	601a      	str	r2, [r3, #0]
    49ee:	f3bf 8f4f 	dsb	sy
    49f2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    49f6:	2401      	movs	r4, #1
    49f8:	e7ae      	b.n	4958 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    49fa:	2400      	movs	r4, #0
    49fc:	e7ac      	b.n	4958 <xTaskResumeAll+0x40>
    49fe:	2400      	movs	r4, #0
    4a00:	e7aa      	b.n	4958 <xTaskResumeAll+0x40>
    4a02:	bf00      	nop
    4a04:	200032bc 	.word	0x200032bc
    4a08:	00003715 	.word	0x00003715
    4a0c:	00003759 	.word	0x00003759
    4a10:	0000361d 	.word	0x0000361d
    4a14:	000035d1 	.word	0x000035d1
    4a18:	000044c1 	.word	0x000044c1
    4a1c:	000047f1 	.word	0x000047f1
    4a20:	e000ed04 	.word	0xe000ed04

00004a24 <vTaskDelayUntil>:
{
    4a24:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxPreviousWakeTime);
    4a26:	b150      	cbz	r0, 4a3e <vTaskDelayUntil+0x1a>
    4a28:	4605      	mov	r5, r0
	configASSERT((xTimeIncrement > 0U));
    4a2a:	b989      	cbnz	r1, 4a50 <vTaskDelayUntil+0x2c>
    4a2c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a30:	f383 8811 	msr	BASEPRI, r3
    4a34:	f3bf 8f6f 	isb	sy
    4a38:	f3bf 8f4f 	dsb	sy
    4a3c:	e7fe      	b.n	4a3c <vTaskDelayUntil+0x18>
    4a3e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a42:	f383 8811 	msr	BASEPRI, r3
    4a46:	f3bf 8f6f 	isb	sy
    4a4a:	f3bf 8f4f 	dsb	sy
    4a4e:	e7fe      	b.n	4a4e <vTaskDelayUntil+0x2a>
	configASSERT(uxSchedulerSuspended == 0);
    4a50:	4b1a      	ldr	r3, [pc, #104]	; (4abc <vTaskDelayUntil+0x98>)
    4a52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4a56:	b143      	cbz	r3, 4a6a <vTaskDelayUntil+0x46>
    4a58:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a5c:	f383 8811 	msr	BASEPRI, r3
    4a60:	f3bf 8f6f 	isb	sy
    4a64:	f3bf 8f4f 	dsb	sy
    4a68:	e7fe      	b.n	4a68 <vTaskDelayUntil+0x44>
    4a6a:	460c      	mov	r4, r1
	vTaskSuspendAll();
    4a6c:	4b14      	ldr	r3, [pc, #80]	; (4ac0 <vTaskDelayUntil+0x9c>)
    4a6e:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4a70:	4b12      	ldr	r3, [pc, #72]	; (4abc <vTaskDelayUntil+0x98>)
    4a72:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4a76:	682a      	ldr	r2, [r5, #0]
    4a78:	4414      	add	r4, r2
		if (xConstTickCount < *pxPreviousWakeTime) {
    4a7a:	4290      	cmp	r0, r2
    4a7c:	d214      	bcs.n	4aa8 <vTaskDelayUntil+0x84>
			if ((xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount)) {
    4a7e:	42a2      	cmp	r2, r4
    4a80:	d916      	bls.n	4ab0 <vTaskDelayUntil+0x8c>
		*pxPreviousWakeTime = xTimeToWake;
    4a82:	602c      	str	r4, [r5, #0]
		if (xShouldDelay != pdFALSE) {
    4a84:	42a0      	cmp	r0, r4
    4a86:	d203      	bcs.n	4a90 <vTaskDelayUntil+0x6c>
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount, pdFALSE);
    4a88:	2100      	movs	r1, #0
    4a8a:	1a20      	subs	r0, r4, r0
    4a8c:	4b0d      	ldr	r3, [pc, #52]	; (4ac4 <vTaskDelayUntil+0xa0>)
    4a8e:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
    4a90:	4b0d      	ldr	r3, [pc, #52]	; (4ac8 <vTaskDelayUntil+0xa4>)
    4a92:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    4a94:	b980      	cbnz	r0, 4ab8 <vTaskDelayUntil+0x94>
		portYIELD_WITHIN_API();
    4a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4a9a:	4b0c      	ldr	r3, [pc, #48]	; (4acc <vTaskDelayUntil+0xa8>)
    4a9c:	601a      	str	r2, [r3, #0]
    4a9e:	f3bf 8f4f 	dsb	sy
    4aa2:	f3bf 8f6f 	isb	sy
}
    4aa6:	bd38      	pop	{r3, r4, r5, pc}
			if ((xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount)) {
    4aa8:	42a2      	cmp	r2, r4
    4aaa:	d803      	bhi.n	4ab4 <vTaskDelayUntil+0x90>
    4aac:	42a0      	cmp	r0, r4
    4aae:	d301      	bcc.n	4ab4 <vTaskDelayUntil+0x90>
		*pxPreviousWakeTime = xTimeToWake;
    4ab0:	602c      	str	r4, [r5, #0]
    4ab2:	e7ed      	b.n	4a90 <vTaskDelayUntil+0x6c>
    4ab4:	602c      	str	r4, [r5, #0]
    4ab6:	e7e7      	b.n	4a88 <vTaskDelayUntil+0x64>
    4ab8:	bd38      	pop	{r3, r4, r5, pc}
    4aba:	bf00      	nop
    4abc:	200032bc 	.word	0x200032bc
    4ac0:	000047d1 	.word	0x000047d1
    4ac4:	000044ed 	.word	0x000044ed
    4ac8:	00004919 	.word	0x00004919
    4acc:	e000ed04 	.word	0xe000ed04

00004ad0 <vTaskDelay>:
{
    4ad0:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    4ad2:	b1b0      	cbz	r0, 4b02 <vTaskDelay+0x32>
    4ad4:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    4ad6:	4b0f      	ldr	r3, [pc, #60]	; (4b14 <vTaskDelay+0x44>)
    4ad8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4adc:	b143      	cbz	r3, 4af0 <vTaskDelay+0x20>
    4ade:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ae2:	f383 8811 	msr	BASEPRI, r3
    4ae6:	f3bf 8f6f 	isb	sy
    4aea:	f3bf 8f4f 	dsb	sy
    4aee:	e7fe      	b.n	4aee <vTaskDelay+0x1e>
		vTaskSuspendAll();
    4af0:	4b09      	ldr	r3, [pc, #36]	; (4b18 <vTaskDelay+0x48>)
    4af2:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    4af4:	2100      	movs	r1, #0
    4af6:	4620      	mov	r0, r4
    4af8:	4b08      	ldr	r3, [pc, #32]	; (4b1c <vTaskDelay+0x4c>)
    4afa:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    4afc:	4b08      	ldr	r3, [pc, #32]	; (4b20 <vTaskDelay+0x50>)
    4afe:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    4b00:	b938      	cbnz	r0, 4b12 <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    4b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4b06:	4b07      	ldr	r3, [pc, #28]	; (4b24 <vTaskDelay+0x54>)
    4b08:	601a      	str	r2, [r3, #0]
    4b0a:	f3bf 8f4f 	dsb	sy
    4b0e:	f3bf 8f6f 	isb	sy
    4b12:	bd10      	pop	{r4, pc}
    4b14:	200032bc 	.word	0x200032bc
    4b18:	000047d1 	.word	0x000047d1
    4b1c:	000044ed 	.word	0x000044ed
    4b20:	00004919 	.word	0x00004919
    4b24:	e000ed04 	.word	0xe000ed04

00004b28 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    4b28:	4b2c      	ldr	r3, [pc, #176]	; (4bdc <vTaskSwitchContext+0xb4>)
    4b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4b2e:	bb8b      	cbnz	r3, 4b94 <vTaskSwitchContext+0x6c>
{
    4b30:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    4b32:	4b2a      	ldr	r3, [pc, #168]	; (4bdc <vTaskSwitchContext+0xb4>)
    4b34:	2200      	movs	r2, #0
    4b36:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    4b3a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4b42:	6812      	ldr	r2, [r2, #0]
    4b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4b46:	429a      	cmp	r2, r3
    4b48:	d807      	bhi.n	4b5a <vTaskSwitchContext+0x32>
    4b4a:	4b24      	ldr	r3, [pc, #144]	; (4bdc <vTaskSwitchContext+0xb4>)
    4b4c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4b50:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4b54:	3134      	adds	r1, #52	; 0x34
    4b56:	4b22      	ldr	r3, [pc, #136]	; (4be0 <vTaskSwitchContext+0xb8>)
    4b58:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4b5a:	4a20      	ldr	r2, [pc, #128]	; (4bdc <vTaskSwitchContext+0xb4>)
    4b5c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    4b60:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    4b64:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4b68:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4b6a:	b9c2      	cbnz	r2, 4b9e <vTaskSwitchContext+0x76>
    4b6c:	b14b      	cbz	r3, 4b82 <vTaskSwitchContext+0x5a>
    4b6e:	491b      	ldr	r1, [pc, #108]	; (4bdc <vTaskSwitchContext+0xb4>)
    4b70:	3b01      	subs	r3, #1
    4b72:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4b76:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4b7a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4b7c:	b97a      	cbnz	r2, 4b9e <vTaskSwitchContext+0x76>
    4b7e:	2b00      	cmp	r3, #0
    4b80:	d1f6      	bne.n	4b70 <vTaskSwitchContext+0x48>
    4b82:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b86:	f383 8811 	msr	BASEPRI, r3
    4b8a:	f3bf 8f6f 	isb	sy
    4b8e:	f3bf 8f4f 	dsb	sy
    4b92:	e7fe      	b.n	4b92 <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    4b94:	2201      	movs	r2, #1
    4b96:	4b11      	ldr	r3, [pc, #68]	; (4bdc <vTaskSwitchContext+0xb4>)
    4b98:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    4b9c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4b9e:	4a0f      	ldr	r2, [pc, #60]	; (4bdc <vTaskSwitchContext+0xb4>)
    4ba0:	0099      	lsls	r1, r3, #2
    4ba2:	18c8      	adds	r0, r1, r3
    4ba4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4ba8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    4baa:	6864      	ldr	r4, [r4, #4]
    4bac:	62c4      	str	r4, [r0, #44]	; 0x2c
    4bae:	4419      	add	r1, r3
    4bb0:	4602      	mov	r2, r0
    4bb2:	3230      	adds	r2, #48	; 0x30
    4bb4:	4294      	cmp	r4, r2
    4bb6:	d00b      	beq.n	4bd0 <vTaskSwitchContext+0xa8>
    4bb8:	4a08      	ldr	r2, [pc, #32]	; (4bdc <vTaskSwitchContext+0xb4>)
    4bba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    4bbe:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4bc2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4bc4:	68c9      	ldr	r1, [r1, #12]
    4bc6:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    4bca:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    4bce:	bd10      	pop	{r4, pc}
    4bd0:	6860      	ldr	r0, [r4, #4]
    4bd2:	4a02      	ldr	r2, [pc, #8]	; (4bdc <vTaskSwitchContext+0xb4>)
    4bd4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4bd8:	62d0      	str	r0, [r2, #44]	; 0x2c
    4bda:	e7ed      	b.n	4bb8 <vTaskSwitchContext+0x90>
    4bdc:	200032bc 	.word	0x200032bc
    4be0:	000002d1 	.word	0x000002d1

00004be4 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    4be4:	b940      	cbnz	r0, 4bf8 <vTaskPlaceOnEventList+0x14>
    4be6:	f04f 0380 	mov.w	r3, #128	; 0x80
    4bea:	f383 8811 	msr	BASEPRI, r3
    4bee:	f3bf 8f6f 	isb	sy
    4bf2:	f3bf 8f4f 	dsb	sy
    4bf6:	e7fe      	b.n	4bf6 <vTaskPlaceOnEventList+0x12>
{
    4bf8:	b510      	push	{r4, lr}
    4bfa:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    4bfc:	4b05      	ldr	r3, [pc, #20]	; (4c14 <vTaskPlaceOnEventList+0x30>)
    4bfe:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4c02:	3118      	adds	r1, #24
    4c04:	4b04      	ldr	r3, [pc, #16]	; (4c18 <vTaskPlaceOnEventList+0x34>)
    4c06:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    4c08:	2101      	movs	r1, #1
    4c0a:	4620      	mov	r0, r4
    4c0c:	4b03      	ldr	r3, [pc, #12]	; (4c1c <vTaskPlaceOnEventList+0x38>)
    4c0e:	4798      	blx	r3
    4c10:	bd10      	pop	{r4, pc}
    4c12:	bf00      	nop
    4c14:	200032bc 	.word	0x200032bc
    4c18:	000035e9 	.word	0x000035e9
    4c1c:	000044ed 	.word	0x000044ed

00004c20 <vTaskPlaceOnEventListRestricted>:
{
    4c20:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    4c22:	b180      	cbz	r0, 4c46 <vTaskPlaceOnEventListRestricted+0x26>
    4c24:	4614      	mov	r4, r2
    4c26:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    4c28:	4b0b      	ldr	r3, [pc, #44]	; (4c58 <vTaskPlaceOnEventListRestricted+0x38>)
    4c2a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4c2e:	3118      	adds	r1, #24
    4c30:	4b0a      	ldr	r3, [pc, #40]	; (4c5c <vTaskPlaceOnEventListRestricted+0x3c>)
    4c32:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    4c34:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    4c36:	4621      	mov	r1, r4
    4c38:	bf0c      	ite	eq
    4c3a:	4628      	moveq	r0, r5
    4c3c:	f04f 30ff 	movne.w	r0, #4294967295
    4c40:	4b07      	ldr	r3, [pc, #28]	; (4c60 <vTaskPlaceOnEventListRestricted+0x40>)
    4c42:	4798      	blx	r3
    4c44:	bd38      	pop	{r3, r4, r5, pc}
    4c46:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c4a:	f383 8811 	msr	BASEPRI, r3
    4c4e:	f3bf 8f6f 	isb	sy
    4c52:	f3bf 8f4f 	dsb	sy
    4c56:	e7fe      	b.n	4c56 <vTaskPlaceOnEventListRestricted+0x36>
    4c58:	200032bc 	.word	0x200032bc
    4c5c:	000035d1 	.word	0x000035d1
    4c60:	000044ed 	.word	0x000044ed

00004c64 <xTaskRemoveFromEventList>:
{
    4c64:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    4c66:	68c3      	ldr	r3, [r0, #12]
    4c68:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    4c6a:	2c00      	cmp	r4, #0
    4c6c:	d02a      	beq.n	4cc4 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    4c6e:	f104 0518 	add.w	r5, r4, #24
    4c72:	4628      	mov	r0, r5
    4c74:	4b1a      	ldr	r3, [pc, #104]	; (4ce0 <xTaskRemoveFromEventList+0x7c>)
    4c76:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4c78:	4b1a      	ldr	r3, [pc, #104]	; (4ce4 <xTaskRemoveFromEventList+0x80>)
    4c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4c7e:	bb53      	cbnz	r3, 4cd6 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    4c80:	1d25      	adds	r5, r4, #4
    4c82:	4628      	mov	r0, r5
    4c84:	4b16      	ldr	r3, [pc, #88]	; (4ce0 <xTaskRemoveFromEventList+0x7c>)
    4c86:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    4c88:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4c8a:	4b16      	ldr	r3, [pc, #88]	; (4ce4 <xTaskRemoveFromEventList+0x80>)
    4c8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4c90:	4298      	cmp	r0, r3
    4c92:	bf84      	itt	hi
    4c94:	4b13      	ldrhi	r3, [pc, #76]	; (4ce4 <xTaskRemoveFromEventList+0x80>)
    4c96:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4c9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4c9e:	4629      	mov	r1, r5
    4ca0:	4b11      	ldr	r3, [pc, #68]	; (4ce8 <xTaskRemoveFromEventList+0x84>)
    4ca2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4ca6:	4b11      	ldr	r3, [pc, #68]	; (4cec <xTaskRemoveFromEventList+0x88>)
    4ca8:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    4caa:	4b0e      	ldr	r3, [pc, #56]	; (4ce4 <xTaskRemoveFromEventList+0x80>)
    4cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4cb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4cb4:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    4cb6:	bf83      	ittte	hi
    4cb8:	2001      	movhi	r0, #1
    4cba:	4b0a      	ldrhi	r3, [pc, #40]	; (4ce4 <xTaskRemoveFromEventList+0x80>)
    4cbc:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    4cc0:	2000      	movls	r0, #0
}
    4cc2:	bd38      	pop	{r3, r4, r5, pc}
    4cc4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cc8:	f383 8811 	msr	BASEPRI, r3
    4ccc:	f3bf 8f6f 	isb	sy
    4cd0:	f3bf 8f4f 	dsb	sy
    4cd4:	e7fe      	b.n	4cd4 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    4cd6:	4629      	mov	r1, r5
    4cd8:	4805      	ldr	r0, [pc, #20]	; (4cf0 <xTaskRemoveFromEventList+0x8c>)
    4cda:	4b04      	ldr	r3, [pc, #16]	; (4cec <xTaskRemoveFromEventList+0x88>)
    4cdc:	4798      	blx	r3
    4cde:	e7e4      	b.n	4caa <xTaskRemoveFromEventList+0x46>
    4ce0:	0000361d 	.word	0x0000361d
    4ce4:	200032bc 	.word	0x200032bc
    4ce8:	200032e4 	.word	0x200032e4
    4cec:	000035d1 	.word	0x000035d1
    4cf0:	200032d0 	.word	0x200032d0

00004cf4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    4cf4:	4b03      	ldr	r3, [pc, #12]	; (4d04 <vTaskInternalSetTimeOutState+0x10>)
    4cf6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    4cfa:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    4d00:	6043      	str	r3, [r0, #4]
    4d02:	4770      	bx	lr
    4d04:	200032bc 	.word	0x200032bc

00004d08 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    4d08:	b1f8      	cbz	r0, 4d4a <xTaskCheckForTimeOut+0x42>
{
    4d0a:	b570      	push	{r4, r5, r6, lr}
    4d0c:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    4d0e:	b329      	cbz	r1, 4d5c <xTaskCheckForTimeOut+0x54>
    4d10:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    4d12:	4b1c      	ldr	r3, [pc, #112]	; (4d84 <xTaskCheckForTimeOut+0x7c>)
    4d14:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4d16:	4b1c      	ldr	r3, [pc, #112]	; (4d88 <xTaskCheckForTimeOut+0x80>)
    4d18:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4d1c:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    4d1e:	6823      	ldr	r3, [r4, #0]
    4d20:	f1b3 3fff 	cmp.w	r3, #4294967295
    4d24:	d02a      	beq.n	4d7c <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    4d26:	4818      	ldr	r0, [pc, #96]	; (4d88 <xTaskCheckForTimeOut+0x80>)
    4d28:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    4d2c:	682e      	ldr	r6, [r5, #0]
    4d2e:	4286      	cmp	r6, r0
    4d30:	d001      	beq.n	4d36 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    4d32:	428a      	cmp	r2, r1
    4d34:	d224      	bcs.n	4d80 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4d36:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    4d38:	429a      	cmp	r2, r3
    4d3a:	d318      	bcc.n	4d6e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    4d3c:	2300      	movs	r3, #0
    4d3e:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    4d40:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    4d42:	4b12      	ldr	r3, [pc, #72]	; (4d8c <xTaskCheckForTimeOut+0x84>)
    4d44:	4798      	blx	r3
}
    4d46:	4620      	mov	r0, r4
    4d48:	bd70      	pop	{r4, r5, r6, pc}
    4d4a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d4e:	f383 8811 	msr	BASEPRI, r3
    4d52:	f3bf 8f6f 	isb	sy
    4d56:	f3bf 8f4f 	dsb	sy
    4d5a:	e7fe      	b.n	4d5a <xTaskCheckForTimeOut+0x52>
    4d5c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d60:	f383 8811 	msr	BASEPRI, r3
    4d64:	f3bf 8f6f 	isb	sy
    4d68:	f3bf 8f4f 	dsb	sy
    4d6c:	e7fe      	b.n	4d6c <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    4d6e:	1a9b      	subs	r3, r3, r2
    4d70:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    4d72:	4628      	mov	r0, r5
    4d74:	4b06      	ldr	r3, [pc, #24]	; (4d90 <xTaskCheckForTimeOut+0x88>)
    4d76:	4798      	blx	r3
			xReturn = pdFALSE;
    4d78:	2400      	movs	r4, #0
    4d7a:	e7e2      	b.n	4d42 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    4d7c:	2400      	movs	r4, #0
    4d7e:	e7e0      	b.n	4d42 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    4d80:	2401      	movs	r4, #1
    4d82:	e7de      	b.n	4d42 <xTaskCheckForTimeOut+0x3a>
    4d84:	00003715 	.word	0x00003715
    4d88:	200032bc 	.word	0x200032bc
    4d8c:	00003759 	.word	0x00003759
    4d90:	00004cf5 	.word	0x00004cf5

00004d94 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    4d94:	2201      	movs	r2, #1
    4d96:	4b02      	ldr	r3, [pc, #8]	; (4da0 <vTaskMissedYield+0xc>)
    4d98:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    4d9c:	4770      	bx	lr
    4d9e:	bf00      	nop
    4da0:	200032bc 	.word	0x200032bc

00004da4 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    4da4:	4b06      	ldr	r3, [pc, #24]	; (4dc0 <xTaskGetSchedulerState+0x1c>)
    4da6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4daa:	b13b      	cbz	r3, 4dbc <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4dac:	4b04      	ldr	r3, [pc, #16]	; (4dc0 <xTaskGetSchedulerState+0x1c>)
    4dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    4db2:	2b00      	cmp	r3, #0
    4db4:	bf0c      	ite	eq
    4db6:	2002      	moveq	r0, #2
    4db8:	2000      	movne	r0, #0
    4dba:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    4dbc:	2001      	movs	r0, #1
}
    4dbe:	4770      	bx	lr
    4dc0:	200032bc 	.word	0x200032bc

00004dc4 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    4dc4:	2800      	cmp	r0, #0
    4dc6:	d045      	beq.n	4e54 <xTaskPriorityInherit+0x90>
{
    4dc8:	b538      	push	{r3, r4, r5, lr}
    4dca:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    4dcc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4dce:	4922      	ldr	r1, [pc, #136]	; (4e58 <xTaskPriorityInherit+0x94>)
    4dd0:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4dd4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4dd6:	428a      	cmp	r2, r1
    4dd8:	d232      	bcs.n	4e40 <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    4dda:	6981      	ldr	r1, [r0, #24]
    4ddc:	2900      	cmp	r1, #0
    4dde:	db06      	blt.n	4dee <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    4de0:	491d      	ldr	r1, [pc, #116]	; (4e58 <xTaskPriorityInherit+0x94>)
    4de2:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4de6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4de8:	f1c1 0105 	rsb	r1, r1, #5
    4dec:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    4dee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4df2:	491a      	ldr	r1, [pc, #104]	; (4e5c <xTaskPriorityInherit+0x98>)
    4df4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4df8:	6969      	ldr	r1, [r5, #20]
    4dfa:	4291      	cmp	r1, r2
    4dfc:	d006      	beq.n	4e0c <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4dfe:	4a16      	ldr	r2, [pc, #88]	; (4e58 <xTaskPriorityInherit+0x94>)
    4e00:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4e04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4e06:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    4e08:	2001      	movs	r0, #1
    4e0a:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    4e0c:	1d2c      	adds	r4, r5, #4
    4e0e:	4620      	mov	r0, r4
    4e10:	4b13      	ldr	r3, [pc, #76]	; (4e60 <xTaskPriorityInherit+0x9c>)
    4e12:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4e14:	4b10      	ldr	r3, [pc, #64]	; (4e58 <xTaskPriorityInherit+0x94>)
    4e16:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4e1a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    4e1c:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    4e1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4e22:	4298      	cmp	r0, r3
    4e24:	bf84      	itt	hi
    4e26:	4b0c      	ldrhi	r3, [pc, #48]	; (4e58 <xTaskPriorityInherit+0x94>)
    4e28:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4e2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4e30:	4621      	mov	r1, r4
    4e32:	4b0a      	ldr	r3, [pc, #40]	; (4e5c <xTaskPriorityInherit+0x98>)
    4e34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4e38:	4b0a      	ldr	r3, [pc, #40]	; (4e64 <xTaskPriorityInherit+0xa0>)
    4e3a:	4798      	blx	r3
			xReturn = pdTRUE;
    4e3c:	2001      	movs	r0, #1
    4e3e:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    4e40:	4a05      	ldr	r2, [pc, #20]	; (4e58 <xTaskPriorityInherit+0x94>)
    4e42:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4e46:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4e48:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4e4a:	4298      	cmp	r0, r3
    4e4c:	bf2c      	ite	cs
    4e4e:	2000      	movcs	r0, #0
    4e50:	2001      	movcc	r0, #1
    4e52:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    4e54:	2000      	movs	r0, #0
	return xReturn;
    4e56:	4770      	bx	lr
    4e58:	200032bc 	.word	0x200032bc
    4e5c:	200032e4 	.word	0x200032e4
    4e60:	0000361d 	.word	0x0000361d
    4e64:	000035d1 	.word	0x000035d1

00004e68 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    4e68:	2800      	cmp	r0, #0
    4e6a:	d03c      	beq.n	4ee6 <xTaskPriorityDisinherit+0x7e>
{
    4e6c:	b538      	push	{r3, r4, r5, lr}
    4e6e:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    4e70:	4a20      	ldr	r2, [pc, #128]	; (4ef4 <xTaskPriorityDisinherit+0x8c>)
    4e72:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4e76:	4290      	cmp	r0, r2
    4e78:	d008      	beq.n	4e8c <xTaskPriorityDisinherit+0x24>
    4e7a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e7e:	f383 8811 	msr	BASEPRI, r3
    4e82:	f3bf 8f6f 	isb	sy
    4e86:	f3bf 8f4f 	dsb	sy
    4e8a:	e7fe      	b.n	4e8a <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    4e8c:	6c82      	ldr	r2, [r0, #72]	; 0x48
    4e8e:	b942      	cbnz	r2, 4ea2 <xTaskPriorityDisinherit+0x3a>
    4e90:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e94:	f383 8811 	msr	BASEPRI, r3
    4e98:	f3bf 8f6f 	isb	sy
    4e9c:	f3bf 8f4f 	dsb	sy
    4ea0:	e7fe      	b.n	4ea0 <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    4ea2:	3a01      	subs	r2, #1
    4ea4:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    4ea6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4ea8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    4eaa:	4288      	cmp	r0, r1
    4eac:	d01d      	beq.n	4eea <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    4eae:	b9f2      	cbnz	r2, 4eee <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4eb0:	1d25      	adds	r5, r4, #4
    4eb2:	4628      	mov	r0, r5
    4eb4:	4b10      	ldr	r3, [pc, #64]	; (4ef8 <xTaskPriorityDisinherit+0x90>)
    4eb6:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4eb8:	6c60      	ldr	r0, [r4, #68]	; 0x44
    4eba:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    4ebc:	f1c0 0305 	rsb	r3, r0, #5
    4ec0:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    4ec2:	4b0c      	ldr	r3, [pc, #48]	; (4ef4 <xTaskPriorityDisinherit+0x8c>)
    4ec4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4ec8:	4298      	cmp	r0, r3
    4eca:	bf84      	itt	hi
    4ecc:	4b09      	ldrhi	r3, [pc, #36]	; (4ef4 <xTaskPriorityDisinherit+0x8c>)
    4ece:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4ed2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4ed6:	4629      	mov	r1, r5
    4ed8:	4b08      	ldr	r3, [pc, #32]	; (4efc <xTaskPriorityDisinherit+0x94>)
    4eda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4ede:	4b08      	ldr	r3, [pc, #32]	; (4f00 <xTaskPriorityDisinherit+0x98>)
    4ee0:	4798      	blx	r3
				xReturn = pdTRUE;
    4ee2:	2001      	movs	r0, #1
    4ee4:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    4ee6:	2000      	movs	r0, #0
    4ee8:	4770      	bx	lr
    4eea:	2000      	movs	r0, #0
    4eec:	bd38      	pop	{r3, r4, r5, pc}
    4eee:	2000      	movs	r0, #0
}
    4ef0:	bd38      	pop	{r3, r4, r5, pc}
    4ef2:	bf00      	nop
    4ef4:	200032bc 	.word	0x200032bc
    4ef8:	0000361d 	.word	0x0000361d
    4efc:	200032e4 	.word	0x200032e4
    4f00:	000035d1 	.word	0x000035d1

00004f04 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    4f04:	2800      	cmp	r0, #0
    4f06:	d049      	beq.n	4f9c <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    4f08:	b538      	push	{r3, r4, r5, lr}
    4f0a:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    4f0c:	6c80      	ldr	r0, [r0, #72]	; 0x48
    4f0e:	b940      	cbnz	r0, 4f22 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    4f10:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f14:	f383 8811 	msr	BASEPRI, r3
    4f18:	f3bf 8f6f 	isb	sy
    4f1c:	f3bf 8f4f 	dsb	sy
    4f20:	e7fe      	b.n	4f20 <vTaskPriorityDisinheritAfterTimeout+0x1c>
    4f22:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4f24:	428a      	cmp	r2, r1
    4f26:	bf38      	it	cc
    4f28:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    4f2a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4f2c:	4291      	cmp	r1, r2
    4f2e:	d001      	beq.n	4f34 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    4f30:	2801      	cmp	r0, #1
    4f32:	d000      	beq.n	4f36 <vTaskPriorityDisinheritAfterTimeout+0x32>
    4f34:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    4f36:	481a      	ldr	r0, [pc, #104]	; (4fa0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4f38:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    4f3c:	4284      	cmp	r4, r0
    4f3e:	d108      	bne.n	4f52 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    4f40:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f44:	f383 8811 	msr	BASEPRI, r3
    4f48:	f3bf 8f6f 	isb	sy
    4f4c:	f3bf 8f4f 	dsb	sy
    4f50:	e7fe      	b.n	4f50 <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    4f52:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    4f54:	69a0      	ldr	r0, [r4, #24]
    4f56:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    4f58:	bfa4      	itt	ge
    4f5a:	f1c2 0205 	rsbge	r2, r2, #5
    4f5e:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    4f60:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4f64:	4a0f      	ldr	r2, [pc, #60]	; (4fa4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4f66:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4f6a:	6962      	ldr	r2, [r4, #20]
    4f6c:	428a      	cmp	r2, r1
    4f6e:	d1e1      	bne.n	4f34 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4f70:	1d25      	adds	r5, r4, #4
    4f72:	4628      	mov	r0, r5
    4f74:	4b0c      	ldr	r3, [pc, #48]	; (4fa8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    4f76:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    4f78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4f7a:	4b09      	ldr	r3, [pc, #36]	; (4fa0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4f7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4f80:	4298      	cmp	r0, r3
    4f82:	bf84      	itt	hi
    4f84:	4b06      	ldrhi	r3, [pc, #24]	; (4fa0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4f86:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4f8a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4f8e:	4629      	mov	r1, r5
    4f90:	4b04      	ldr	r3, [pc, #16]	; (4fa4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4f92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4f96:	4b05      	ldr	r3, [pc, #20]	; (4fac <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    4f98:	4798      	blx	r3
}
    4f9a:	e7cb      	b.n	4f34 <vTaskPriorityDisinheritAfterTimeout+0x30>
    4f9c:	4770      	bx	lr
    4f9e:	bf00      	nop
    4fa0:	200032bc 	.word	0x200032bc
    4fa4:	200032e4 	.word	0x200032e4
    4fa8:	0000361d 	.word	0x0000361d
    4fac:	000035d1 	.word	0x000035d1

00004fb0 <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    4fb0:	4b06      	ldr	r3, [pc, #24]	; (4fcc <pvTaskIncrementMutexHeldCount+0x1c>)
    4fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4fb6:	b12b      	cbz	r3, 4fc4 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    4fb8:	4b04      	ldr	r3, [pc, #16]	; (4fcc <pvTaskIncrementMutexHeldCount+0x1c>)
    4fba:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4fbe:	6c93      	ldr	r3, [r2, #72]	; 0x48
    4fc0:	3301      	adds	r3, #1
    4fc2:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    4fc4:	4b01      	ldr	r3, [pc, #4]	; (4fcc <pvTaskIncrementMutexHeldCount+0x1c>)
    4fc6:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    4fca:	4770      	bx	lr
    4fcc:	200032bc 	.word	0x200032bc

00004fd0 <xTaskNotifyWait>:
{
    4fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4fd2:	4607      	mov	r7, r0
    4fd4:	460d      	mov	r5, r1
    4fd6:	4614      	mov	r4, r2
    4fd8:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    4fda:	4b25      	ldr	r3, [pc, #148]	; (5070 <xTaskNotifyWait+0xa0>)
    4fdc:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    4fde:	4b25      	ldr	r3, [pc, #148]	; (5074 <xTaskNotifyWait+0xa4>)
    4fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4fe8:	b2db      	uxtb	r3, r3
    4fea:	2b02      	cmp	r3, #2
    4fec:	d00c      	beq.n	5008 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    4fee:	4b21      	ldr	r3, [pc, #132]	; (5074 <xTaskNotifyWait+0xa4>)
    4ff0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4ff4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4ff6:	ea20 0007 	bic.w	r0, r0, r7
    4ffa:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4ffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5000:	2201      	movs	r2, #1
    5002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    5006:	b9e6      	cbnz	r6, 5042 <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    5008:	4b1b      	ldr	r3, [pc, #108]	; (5078 <xTaskNotifyWait+0xa8>)
    500a:	4798      	blx	r3
	taskENTER_CRITICAL();
    500c:	4b18      	ldr	r3, [pc, #96]	; (5070 <xTaskNotifyWait+0xa0>)
    500e:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    5010:	b124      	cbz	r4, 501c <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    5012:	4b18      	ldr	r3, [pc, #96]	; (5074 <xTaskNotifyWait+0xa4>)
    5014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    501a:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    501c:	4b15      	ldr	r3, [pc, #84]	; (5074 <xTaskNotifyWait+0xa4>)
    501e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    5026:	b2db      	uxtb	r3, r3
    5028:	2b02      	cmp	r3, #2
    502a:	d017      	beq.n	505c <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    502c:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    502e:	4b11      	ldr	r3, [pc, #68]	; (5074 <xTaskNotifyWait+0xa4>)
    5030:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5034:	2200      	movs	r2, #0
    5036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    503a:	4b0f      	ldr	r3, [pc, #60]	; (5078 <xTaskNotifyWait+0xa8>)
    503c:	4798      	blx	r3
}
    503e:	4620      	mov	r0, r4
    5040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    5042:	4611      	mov	r1, r2
    5044:	4630      	mov	r0, r6
    5046:	4b0d      	ldr	r3, [pc, #52]	; (507c <xTaskNotifyWait+0xac>)
    5048:	4798      	blx	r3
				portYIELD_WITHIN_API();
    504a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    504e:	4b0c      	ldr	r3, [pc, #48]	; (5080 <xTaskNotifyWait+0xb0>)
    5050:	601a      	str	r2, [r3, #0]
    5052:	f3bf 8f4f 	dsb	sy
    5056:	f3bf 8f6f 	isb	sy
    505a:	e7d5      	b.n	5008 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    505c:	4b05      	ldr	r3, [pc, #20]	; (5074 <xTaskNotifyWait+0xa4>)
    505e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5062:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    5064:	ea23 0505 	bic.w	r5, r3, r5
    5068:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    506a:	2401      	movs	r4, #1
    506c:	e7df      	b.n	502e <xTaskNotifyWait+0x5e>
    506e:	bf00      	nop
    5070:	00003715 	.word	0x00003715
    5074:	200032bc 	.word	0x200032bc
    5078:	00003759 	.word	0x00003759
    507c:	000044ed 	.word	0x000044ed
    5080:	e000ed04 	.word	0xe000ed04

00005084 <xTaskGenericNotifyFromISR>:
{
    5084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5088:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    508a:	b310      	cbz	r0, 50d2 <xTaskGenericNotifyFromISR+0x4e>
    508c:	4604      	mov	r4, r0
    508e:	4699      	mov	r9, r3
    5090:	4617      	mov	r7, r2
    5092:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    5094:	4b3e      	ldr	r3, [pc, #248]	; (5190 <xTaskGenericNotifyFromISR+0x10c>)
    5096:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    5098:	f3ef 8511 	mrs	r5, BASEPRI
    509c:	f04f 0380 	mov.w	r3, #128	; 0x80
    50a0:	f383 8811 	msr	BASEPRI, r3
    50a4:	f3bf 8f6f 	isb	sy
    50a8:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    50ac:	f1b9 0f00 	cmp.w	r9, #0
    50b0:	d002      	beq.n	50b8 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    50b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    50b4:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    50b8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    50bc:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    50be:	2202      	movs	r2, #2
    50c0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    50c4:	1e7a      	subs	r2, r7, #1
    50c6:	2a03      	cmp	r2, #3
    50c8:	d810      	bhi.n	50ec <xTaskGenericNotifyFromISR+0x68>
    50ca:	e8df f002 	tbb	[pc, r2]
    50ce:	1c0b      	.short	0x1c0b
    50d0:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    50d2:	f04f 0380 	mov.w	r3, #128	; 0x80
    50d6:	f383 8811 	msr	BASEPRI, r3
    50da:	f3bf 8f6f 	isb	sy
    50de:	f3bf 8f4f 	dsb	sy
    50e2:	e7fe      	b.n	50e2 <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    50e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    50e6:	ea42 0208 	orr.w	r2, r2, r8
    50ea:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    50ec:	2b01      	cmp	r3, #1
    50ee:	d147      	bne.n	5180 <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    50f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    50f2:	b1a3      	cbz	r3, 511e <xTaskGenericNotifyFromISR+0x9a>
    50f4:	f04f 0380 	mov.w	r3, #128	; 0x80
    50f8:	f383 8811 	msr	BASEPRI, r3
    50fc:	f3bf 8f6f 	isb	sy
    5100:	f3bf 8f4f 	dsb	sy
    5104:	e7fe      	b.n	5104 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    5106:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    5108:	3201      	adds	r2, #1
    510a:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    510c:	e7ee      	b.n	50ec <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    510e:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    5112:	e7eb      	b.n	50ec <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    5114:	2b02      	cmp	r3, #2
    5116:	d031      	beq.n	517c <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    5118:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    511c:	e7e6      	b.n	50ec <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    511e:	4b1d      	ldr	r3, [pc, #116]	; (5194 <xTaskGenericNotifyFromISR+0x110>)
    5120:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5124:	b9fb      	cbnz	r3, 5166 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    5126:	1d27      	adds	r7, r4, #4
    5128:	4638      	mov	r0, r7
    512a:	4b1b      	ldr	r3, [pc, #108]	; (5198 <xTaskGenericNotifyFromISR+0x114>)
    512c:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    512e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5130:	4b18      	ldr	r3, [pc, #96]	; (5194 <xTaskGenericNotifyFromISR+0x110>)
    5132:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5136:	4298      	cmp	r0, r3
    5138:	bf84      	itt	hi
    513a:	4b16      	ldrhi	r3, [pc, #88]	; (5194 <xTaskGenericNotifyFromISR+0x110>)
    513c:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5140:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5144:	4639      	mov	r1, r7
    5146:	4b15      	ldr	r3, [pc, #84]	; (519c <xTaskGenericNotifyFromISR+0x118>)
    5148:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    514c:	4b14      	ldr	r3, [pc, #80]	; (51a0 <xTaskGenericNotifyFromISR+0x11c>)
    514e:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    5150:	4b10      	ldr	r3, [pc, #64]	; (5194 <xTaskGenericNotifyFromISR+0x110>)
    5152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5156:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    515a:	429a      	cmp	r2, r3
    515c:	d915      	bls.n	518a <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    515e:	b146      	cbz	r6, 5172 <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    5160:	2001      	movs	r0, #1
    5162:	6030      	str	r0, [r6, #0]
    5164:	e00d      	b.n	5182 <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    5166:	f104 0118 	add.w	r1, r4, #24
    516a:	480e      	ldr	r0, [pc, #56]	; (51a4 <xTaskGenericNotifyFromISR+0x120>)
    516c:	4b0c      	ldr	r3, [pc, #48]	; (51a0 <xTaskGenericNotifyFromISR+0x11c>)
    516e:	4798      	blx	r3
    5170:	e7ee      	b.n	5150 <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    5172:	2001      	movs	r0, #1
    5174:	4b07      	ldr	r3, [pc, #28]	; (5194 <xTaskGenericNotifyFromISR+0x110>)
    5176:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    517a:	e002      	b.n	5182 <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    517c:	2000      	movs	r0, #0
    517e:	e000      	b.n	5182 <xTaskGenericNotifyFromISR+0xfe>
    5180:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    5182:	f385 8811 	msr	BASEPRI, r5
}
    5186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    518a:	2001      	movs	r0, #1
    518c:	e7f9      	b.n	5182 <xTaskGenericNotifyFromISR+0xfe>
    518e:	bf00      	nop
    5190:	0000396d 	.word	0x0000396d
    5194:	200032bc 	.word	0x200032bc
    5198:	0000361d 	.word	0x0000361d
    519c:	200032e4 	.word	0x200032e4
    51a0:	000035d1 	.word	0x000035d1
    51a4:	200032d0 	.word	0x200032d0

000051a8 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    51a8:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    51aa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    51ac:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    51ae:	4291      	cmp	r1, r2
    51b0:	d80c      	bhi.n	51cc <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    51b2:	1ad2      	subs	r2, r2, r3
    51b4:	6983      	ldr	r3, [r0, #24]
    51b6:	429a      	cmp	r2, r3
    51b8:	d301      	bcc.n	51be <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    51ba:	2001      	movs	r0, #1
    51bc:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    51be:	1d01      	adds	r1, r0, #4
    51c0:	4b09      	ldr	r3, [pc, #36]	; (51e8 <prvInsertTimerInActiveList+0x40>)
    51c2:	6818      	ldr	r0, [r3, #0]
    51c4:	4b09      	ldr	r3, [pc, #36]	; (51ec <prvInsertTimerInActiveList+0x44>)
    51c6:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    51c8:	2000      	movs	r0, #0
    51ca:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    51cc:	429a      	cmp	r2, r3
    51ce:	d201      	bcs.n	51d4 <prvInsertTimerInActiveList+0x2c>
    51d0:	4299      	cmp	r1, r3
    51d2:	d206      	bcs.n	51e2 <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    51d4:	1d01      	adds	r1, r0, #4
    51d6:	4b04      	ldr	r3, [pc, #16]	; (51e8 <prvInsertTimerInActiveList+0x40>)
    51d8:	6858      	ldr	r0, [r3, #4]
    51da:	4b04      	ldr	r3, [pc, #16]	; (51ec <prvInsertTimerInActiveList+0x44>)
    51dc:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    51de:	2000      	movs	r0, #0
    51e0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    51e2:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    51e4:	bd08      	pop	{r3, pc}
    51e6:	bf00      	nop
    51e8:	200033a8 	.word	0x200033a8
    51ec:	000035e9 	.word	0x000035e9

000051f0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    51f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    51f2:	4b0d      	ldr	r3, [pc, #52]	; (5228 <prvCheckForValidListAndQueue+0x38>)
    51f4:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    51f6:	4b0d      	ldr	r3, [pc, #52]	; (522c <prvCheckForValidListAndQueue+0x3c>)
    51f8:	689b      	ldr	r3, [r3, #8]
    51fa:	b113      	cbz	r3, 5202 <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    51fc:	4b0c      	ldr	r3, [pc, #48]	; (5230 <prvCheckForValidListAndQueue+0x40>)
    51fe:	4798      	blx	r3
    5200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    5202:	4c0a      	ldr	r4, [pc, #40]	; (522c <prvCheckForValidListAndQueue+0x3c>)
    5204:	f104 060c 	add.w	r6, r4, #12
    5208:	4630      	mov	r0, r6
    520a:	4f0a      	ldr	r7, [pc, #40]	; (5234 <prvCheckForValidListAndQueue+0x44>)
    520c:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    520e:	f104 0520 	add.w	r5, r4, #32
    5212:	4628      	mov	r0, r5
    5214:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    5216:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    5218:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    521a:	2200      	movs	r2, #0
    521c:	210c      	movs	r1, #12
    521e:	2014      	movs	r0, #20
    5220:	4b05      	ldr	r3, [pc, #20]	; (5238 <prvCheckForValidListAndQueue+0x48>)
    5222:	4798      	blx	r3
    5224:	60a0      	str	r0, [r4, #8]
    5226:	e7e9      	b.n	51fc <prvCheckForValidListAndQueue+0xc>
    5228:	00003715 	.word	0x00003715
    522c:	200033a8 	.word	0x200033a8
    5230:	00003759 	.word	0x00003759
    5234:	000035b5 	.word	0x000035b5
    5238:	00003d69 	.word	0x00003d69

0000523c <xTimerCreateTimerTask>:
{
    523c:	b510      	push	{r4, lr}
    523e:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    5240:	4b0d      	ldr	r3, [pc, #52]	; (5278 <xTimerCreateTimerTask+0x3c>)
    5242:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    5244:	4b0d      	ldr	r3, [pc, #52]	; (527c <xTimerCreateTimerTask+0x40>)
    5246:	689b      	ldr	r3, [r3, #8]
    5248:	b163      	cbz	r3, 5264 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    524a:	4b0d      	ldr	r3, [pc, #52]	; (5280 <xTimerCreateTimerTask+0x44>)
    524c:	9301      	str	r3, [sp, #4]
    524e:	2303      	movs	r3, #3
    5250:	9300      	str	r3, [sp, #0]
    5252:	2300      	movs	r3, #0
    5254:	2280      	movs	r2, #128	; 0x80
    5256:	490b      	ldr	r1, [pc, #44]	; (5284 <xTimerCreateTimerTask+0x48>)
    5258:	480b      	ldr	r0, [pc, #44]	; (5288 <xTimerCreateTimerTask+0x4c>)
    525a:	4c0c      	ldr	r4, [pc, #48]	; (528c <xTimerCreateTimerTask+0x50>)
    525c:	47a0      	blx	r4
	configASSERT(xReturn);
    525e:	b108      	cbz	r0, 5264 <xTimerCreateTimerTask+0x28>
}
    5260:	b002      	add	sp, #8
    5262:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    5264:	f04f 0380 	mov.w	r3, #128	; 0x80
    5268:	f383 8811 	msr	BASEPRI, r3
    526c:	f3bf 8f6f 	isb	sy
    5270:	f3bf 8f4f 	dsb	sy
    5274:	e7fe      	b.n	5274 <xTimerCreateTimerTask+0x38>
    5276:	bf00      	nop
    5278:	000051f1 	.word	0x000051f1
    527c:	200033a8 	.word	0x200033a8
    5280:	200033dc 	.word	0x200033dc
    5284:	000073a0 	.word	0x000073a0
    5288:	000053a9 	.word	0x000053a9
    528c:	0000456d 	.word	0x0000456d

00005290 <xTimerGenericCommand>:
	configASSERT(xTimer);
    5290:	b1d8      	cbz	r0, 52ca <xTimerGenericCommand+0x3a>
{
    5292:	b530      	push	{r4, r5, lr}
    5294:	b085      	sub	sp, #20
    5296:	4615      	mov	r5, r2
    5298:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    529a:	4a14      	ldr	r2, [pc, #80]	; (52ec <xTimerGenericCommand+0x5c>)
    529c:	6890      	ldr	r0, [r2, #8]
    529e:	b310      	cbz	r0, 52e6 <xTimerGenericCommand+0x56>
    52a0:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    52a2:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    52a4:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    52a6:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    52a8:	2905      	cmp	r1, #5
    52aa:	dc17      	bgt.n	52dc <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    52ac:	4b10      	ldr	r3, [pc, #64]	; (52f0 <xTimerGenericCommand+0x60>)
    52ae:	4798      	blx	r3
    52b0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    52b2:	f04f 0300 	mov.w	r3, #0
    52b6:	bf0c      	ite	eq
    52b8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    52ba:	461a      	movne	r2, r3
    52bc:	a901      	add	r1, sp, #4
    52be:	480b      	ldr	r0, [pc, #44]	; (52ec <xTimerGenericCommand+0x5c>)
    52c0:	6880      	ldr	r0, [r0, #8]
    52c2:	4c0c      	ldr	r4, [pc, #48]	; (52f4 <xTimerGenericCommand+0x64>)
    52c4:	47a0      	blx	r4
}
    52c6:	b005      	add	sp, #20
    52c8:	bd30      	pop	{r4, r5, pc}
    52ca:	f04f 0380 	mov.w	r3, #128	; 0x80
    52ce:	f383 8811 	msr	BASEPRI, r3
    52d2:	f3bf 8f6f 	isb	sy
    52d6:	f3bf 8f4f 	dsb	sy
    52da:	e7fe      	b.n	52da <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    52dc:	2300      	movs	r3, #0
    52de:	a901      	add	r1, sp, #4
    52e0:	4c05      	ldr	r4, [pc, #20]	; (52f8 <xTimerGenericCommand+0x68>)
    52e2:	47a0      	blx	r4
    52e4:	e7ef      	b.n	52c6 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    52e6:	2000      	movs	r0, #0
	return xReturn;
    52e8:	e7ed      	b.n	52c6 <xTimerGenericCommand+0x36>
    52ea:	bf00      	nop
    52ec:	200033a8 	.word	0x200033a8
    52f0:	00004da5 	.word	0x00004da5
    52f4:	00003dc1 	.word	0x00003dc1
    52f8:	00003f9d 	.word	0x00003f9d

000052fc <prvSampleTimeNow>:
{
    52fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5300:	b082      	sub	sp, #8
    5302:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    5304:	4b23      	ldr	r3, [pc, #140]	; (5394 <prvSampleTimeNow+0x98>)
    5306:	4798      	blx	r3
    5308:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    530a:	4b23      	ldr	r3, [pc, #140]	; (5398 <prvSampleTimeNow+0x9c>)
    530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    530e:	4298      	cmp	r0, r3
    5310:	d319      	bcc.n	5346 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    5312:	2300      	movs	r3, #0
    5314:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    5318:	4b1f      	ldr	r3, [pc, #124]	; (5398 <prvSampleTimeNow+0x9c>)
    531a:	639f      	str	r7, [r3, #56]	; 0x38
}
    531c:	4638      	mov	r0, r7
    531e:	b002      	add	sp, #8
    5320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    5324:	2100      	movs	r1, #0
    5326:	9100      	str	r1, [sp, #0]
    5328:	460b      	mov	r3, r1
    532a:	4652      	mov	r2, sl
    532c:	4620      	mov	r0, r4
    532e:	4c1b      	ldr	r4, [pc, #108]	; (539c <prvSampleTimeNow+0xa0>)
    5330:	47a0      	blx	r4
				configASSERT(xResult);
    5332:	b950      	cbnz	r0, 534a <prvSampleTimeNow+0x4e>
    5334:	f04f 0380 	mov.w	r3, #128	; 0x80
    5338:	f383 8811 	msr	BASEPRI, r3
    533c:	f3bf 8f6f 	isb	sy
    5340:	f3bf 8f4f 	dsb	sy
    5344:	e7fe      	b.n	5344 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    5346:	4d14      	ldr	r5, [pc, #80]	; (5398 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    5348:	4e15      	ldr	r6, [pc, #84]	; (53a0 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    534a:	686b      	ldr	r3, [r5, #4]
    534c:	681a      	ldr	r2, [r3, #0]
    534e:	b1c2      	cbz	r2, 5382 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    5350:	68db      	ldr	r3, [r3, #12]
    5352:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    5356:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    5358:	f104 0904 	add.w	r9, r4, #4
    535c:	4648      	mov	r0, r9
    535e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    5360:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5362:	4620      	mov	r0, r4
    5364:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    5366:	69e3      	ldr	r3, [r4, #28]
    5368:	2b01      	cmp	r3, #1
    536a:	d1ee      	bne.n	534a <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    536c:	69a3      	ldr	r3, [r4, #24]
    536e:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    5370:	459a      	cmp	sl, r3
    5372:	d2d7      	bcs.n	5324 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    5374:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    5376:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    5378:	4649      	mov	r1, r9
    537a:	6868      	ldr	r0, [r5, #4]
    537c:	4b09      	ldr	r3, [pc, #36]	; (53a4 <prvSampleTimeNow+0xa8>)
    537e:	4798      	blx	r3
    5380:	e7e3      	b.n	534a <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    5382:	4a05      	ldr	r2, [pc, #20]	; (5398 <prvSampleTimeNow+0x9c>)
    5384:	6811      	ldr	r1, [r2, #0]
    5386:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    5388:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    538a:	2301      	movs	r3, #1
    538c:	f8c8 3000 	str.w	r3, [r8]
    5390:	e7c2      	b.n	5318 <prvSampleTimeNow+0x1c>
    5392:	bf00      	nop
    5394:	000047e5 	.word	0x000047e5
    5398:	200033a8 	.word	0x200033a8
    539c:	00005291 	.word	0x00005291
    53a0:	0000361d 	.word	0x0000361d
    53a4:	000035e9 	.word	0x000035e9

000053a8 <prvTimerTask>:
{
    53a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53ac:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    53ae:	4c65      	ldr	r4, [pc, #404]	; (5544 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    53b0:	4f65      	ldr	r7, [pc, #404]	; (5548 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    53b2:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 5568 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    53b6:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 556c <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    53ba:	6863      	ldr	r3, [r4, #4]
    53bc:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    53be:	b172      	cbz	r2, 53de <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    53c0:	68db      	ldr	r3, [r3, #12]
    53c2:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    53c4:	4b61      	ldr	r3, [pc, #388]	; (554c <prvTimerTask+0x1a4>)
    53c6:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    53c8:	a803      	add	r0, sp, #12
    53ca:	4b61      	ldr	r3, [pc, #388]	; (5550 <prvTimerTask+0x1a8>)
    53cc:	4798      	blx	r3
    53ce:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    53d0:	9b03      	ldr	r3, [sp, #12]
    53d2:	2b00      	cmp	r3, #0
    53d4:	d179      	bne.n	54ca <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    53d6:	42a8      	cmp	r0, r5
    53d8:	d24a      	bcs.n	5470 <prvTimerTask+0xc8>
    53da:	2200      	movs	r2, #0
    53dc:	e00e      	b.n	53fc <prvTimerTask+0x54>
	vTaskSuspendAll();
    53de:	4b5b      	ldr	r3, [pc, #364]	; (554c <prvTimerTask+0x1a4>)
    53e0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    53e2:	a803      	add	r0, sp, #12
    53e4:	4b5a      	ldr	r3, [pc, #360]	; (5550 <prvTimerTask+0x1a8>)
    53e6:	4798      	blx	r3
    53e8:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    53ea:	9b03      	ldr	r3, [sp, #12]
    53ec:	2b00      	cmp	r3, #0
    53ee:	d16c      	bne.n	54ca <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    53f0:	6823      	ldr	r3, [r4, #0]
    53f2:	681a      	ldr	r2, [r3, #0]
    53f4:	fab2 f282 	clz	r2, r2
    53f8:	0952      	lsrs	r2, r2, #5
    53fa:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    53fc:	1ba9      	subs	r1, r5, r6
    53fe:	68a0      	ldr	r0, [r4, #8]
    5400:	4b54      	ldr	r3, [pc, #336]	; (5554 <prvTimerTask+0x1ac>)
    5402:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    5404:	47b8      	blx	r7
    5406:	b938      	cbnz	r0, 5418 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    5408:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    540c:	f8c9 3000 	str.w	r3, [r9]
    5410:	f3bf 8f4f 	dsb	sy
    5414:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    5418:	4d4f      	ldr	r5, [pc, #316]	; (5558 <prvTimerTask+0x1b0>)
    541a:	2200      	movs	r2, #0
    541c:	a903      	add	r1, sp, #12
    541e:	68a0      	ldr	r0, [r4, #8]
    5420:	47a8      	blx	r5
    5422:	2800      	cmp	r0, #0
    5424:	d0c9      	beq.n	53ba <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    5426:	9b03      	ldr	r3, [sp, #12]
    5428:	2b00      	cmp	r3, #0
    542a:	dbf6      	blt.n	541a <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    542c:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    542e:	6973      	ldr	r3, [r6, #20]
    5430:	b10b      	cbz	r3, 5436 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    5432:	1d30      	adds	r0, r6, #4
    5434:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    5436:	a802      	add	r0, sp, #8
    5438:	4b45      	ldr	r3, [pc, #276]	; (5550 <prvTimerTask+0x1a8>)
    543a:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    543c:	9b03      	ldr	r3, [sp, #12]
    543e:	2b09      	cmp	r3, #9
    5440:	d8eb      	bhi.n	541a <prvTimerTask+0x72>
    5442:	a201      	add	r2, pc, #4	; (adr r2, 5448 <prvTimerTask+0xa0>)
    5444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5448:	000054cf 	.word	0x000054cf
    544c:	000054cf 	.word	0x000054cf
    5450:	000054cf 	.word	0x000054cf
    5454:	0000541b 	.word	0x0000541b
    5458:	00005517 	.word	0x00005517
    545c:	0000553d 	.word	0x0000553d
    5460:	000054cf 	.word	0x000054cf
    5464:	000054cf 	.word	0x000054cf
    5468:	0000541b 	.word	0x0000541b
    546c:	00005517 	.word	0x00005517
				(void)xTaskResumeAll();
    5470:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    5472:	6863      	ldr	r3, [r4, #4]
    5474:	68db      	ldr	r3, [r3, #12]
    5476:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    547a:	f10a 0004 	add.w	r0, sl, #4
    547e:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    5480:	f8da 301c 	ldr.w	r3, [sl, #28]
    5484:	2b01      	cmp	r3, #1
    5486:	d004      	beq.n	5492 <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    5488:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    548c:	4650      	mov	r0, sl
    548e:	4798      	blx	r3
    5490:	e7c2      	b.n	5418 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    5492:	f8da 1018 	ldr.w	r1, [sl, #24]
    5496:	462b      	mov	r3, r5
    5498:	4632      	mov	r2, r6
    549a:	4429      	add	r1, r5
    549c:	4650      	mov	r0, sl
    549e:	4e2f      	ldr	r6, [pc, #188]	; (555c <prvTimerTask+0x1b4>)
    54a0:	47b0      	blx	r6
    54a2:	2800      	cmp	r0, #0
    54a4:	d0f0      	beq.n	5488 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    54a6:	2100      	movs	r1, #0
    54a8:	9100      	str	r1, [sp, #0]
    54aa:	460b      	mov	r3, r1
    54ac:	462a      	mov	r2, r5
    54ae:	4650      	mov	r0, sl
    54b0:	4d2b      	ldr	r5, [pc, #172]	; (5560 <prvTimerTask+0x1b8>)
    54b2:	47a8      	blx	r5
			configASSERT(xResult);
    54b4:	2800      	cmp	r0, #0
    54b6:	d1e7      	bne.n	5488 <prvTimerTask+0xe0>
    54b8:	f04f 0380 	mov.w	r3, #128	; 0x80
    54bc:	f383 8811 	msr	BASEPRI, r3
    54c0:	f3bf 8f6f 	isb	sy
    54c4:	f3bf 8f4f 	dsb	sy
    54c8:	e7fe      	b.n	54c8 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    54ca:	47b8      	blx	r7
    54cc:	e7a4      	b.n	5418 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    54ce:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    54d0:	69b1      	ldr	r1, [r6, #24]
    54d2:	462b      	mov	r3, r5
    54d4:	4602      	mov	r2, r0
    54d6:	4429      	add	r1, r5
    54d8:	4630      	mov	r0, r6
    54da:	4d20      	ldr	r5, [pc, #128]	; (555c <prvTimerTask+0x1b4>)
    54dc:	47a8      	blx	r5
    54de:	2800      	cmp	r0, #0
    54e0:	d09a      	beq.n	5418 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    54e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    54e4:	4630      	mov	r0, r6
    54e6:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    54e8:	69f3      	ldr	r3, [r6, #28]
    54ea:	2b01      	cmp	r3, #1
    54ec:	d194      	bne.n	5418 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    54ee:	69b2      	ldr	r2, [r6, #24]
    54f0:	2100      	movs	r1, #0
    54f2:	9100      	str	r1, [sp, #0]
    54f4:	460b      	mov	r3, r1
    54f6:	9804      	ldr	r0, [sp, #16]
    54f8:	4402      	add	r2, r0
    54fa:	4630      	mov	r0, r6
    54fc:	4d18      	ldr	r5, [pc, #96]	; (5560 <prvTimerTask+0x1b8>)
    54fe:	47a8      	blx	r5
						configASSERT(xResult);
    5500:	2800      	cmp	r0, #0
    5502:	d189      	bne.n	5418 <prvTimerTask+0x70>
    5504:	f04f 0380 	mov.w	r3, #128	; 0x80
    5508:	f383 8811 	msr	BASEPRI, r3
    550c:	f3bf 8f6f 	isb	sy
    5510:	f3bf 8f4f 	dsb	sy
    5514:	e7fe      	b.n	5514 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    5516:	9904      	ldr	r1, [sp, #16]
    5518:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    551a:	b131      	cbz	r1, 552a <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    551c:	4603      	mov	r3, r0
    551e:	4602      	mov	r2, r0
    5520:	4401      	add	r1, r0
    5522:	4630      	mov	r0, r6
    5524:	4d0d      	ldr	r5, [pc, #52]	; (555c <prvTimerTask+0x1b4>)
    5526:	47a8      	blx	r5
    5528:	e776      	b.n	5418 <prvTimerTask+0x70>
    552a:	f04f 0380 	mov.w	r3, #128	; 0x80
    552e:	f383 8811 	msr	BASEPRI, r3
    5532:	f3bf 8f6f 	isb	sy
    5536:	f3bf 8f4f 	dsb	sy
    553a:	e7fe      	b.n	553a <prvTimerTask+0x192>
				vPortFree(pxTimer);
    553c:	4630      	mov	r0, r6
    553e:	4b09      	ldr	r3, [pc, #36]	; (5564 <prvTimerTask+0x1bc>)
    5540:	4798      	blx	r3
    5542:	e769      	b.n	5418 <prvTimerTask+0x70>
    5544:	200033a8 	.word	0x200033a8
    5548:	00004919 	.word	0x00004919
    554c:	000047d1 	.word	0x000047d1
    5550:	000052fd 	.word	0x000052fd
    5554:	0000443d 	.word	0x0000443d
    5558:	000040a5 	.word	0x000040a5
    555c:	000051a9 	.word	0x000051a9
    5560:	00005291 	.word	0x00005291
    5564:	00003a99 	.word	0x00003a99
    5568:	e000ed04 	.word	0xe000ed04
    556c:	0000361d 	.word	0x0000361d

00005570 <__libc_init_array>:
    5570:	b570      	push	{r4, r5, r6, lr}
    5572:	4e0d      	ldr	r6, [pc, #52]	; (55a8 <__libc_init_array+0x38>)
    5574:	4c0d      	ldr	r4, [pc, #52]	; (55ac <__libc_init_array+0x3c>)
    5576:	1ba4      	subs	r4, r4, r6
    5578:	10a4      	asrs	r4, r4, #2
    557a:	2500      	movs	r5, #0
    557c:	42a5      	cmp	r5, r4
    557e:	d109      	bne.n	5594 <__libc_init_array+0x24>
    5580:	4e0b      	ldr	r6, [pc, #44]	; (55b0 <__libc_init_array+0x40>)
    5582:	4c0c      	ldr	r4, [pc, #48]	; (55b4 <__libc_init_array+0x44>)
    5584:	f001 ff5a 	bl	743c <_init>
    5588:	1ba4      	subs	r4, r4, r6
    558a:	10a4      	asrs	r4, r4, #2
    558c:	2500      	movs	r5, #0
    558e:	42a5      	cmp	r5, r4
    5590:	d105      	bne.n	559e <__libc_init_array+0x2e>
    5592:	bd70      	pop	{r4, r5, r6, pc}
    5594:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5598:	4798      	blx	r3
    559a:	3501      	adds	r5, #1
    559c:	e7ee      	b.n	557c <__libc_init_array+0xc>
    559e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    55a2:	4798      	blx	r3
    55a4:	3501      	adds	r5, #1
    55a6:	e7f2      	b.n	558e <__libc_init_array+0x1e>
    55a8:	00007448 	.word	0x00007448
    55ac:	00007448 	.word	0x00007448
    55b0:	00007448 	.word	0x00007448
    55b4:	0000744c 	.word	0x0000744c

000055b8 <memcmp>:
    55b8:	b510      	push	{r4, lr}
    55ba:	3901      	subs	r1, #1
    55bc:	4402      	add	r2, r0
    55be:	4290      	cmp	r0, r2
    55c0:	d101      	bne.n	55c6 <memcmp+0xe>
    55c2:	2000      	movs	r0, #0
    55c4:	bd10      	pop	{r4, pc}
    55c6:	f810 3b01 	ldrb.w	r3, [r0], #1
    55ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    55ce:	42a3      	cmp	r3, r4
    55d0:	d0f5      	beq.n	55be <memcmp+0x6>
    55d2:	1b18      	subs	r0, r3, r4
    55d4:	bd10      	pop	{r4, pc}

000055d6 <memcpy>:
    55d6:	b510      	push	{r4, lr}
    55d8:	1e43      	subs	r3, r0, #1
    55da:	440a      	add	r2, r1
    55dc:	4291      	cmp	r1, r2
    55de:	d100      	bne.n	55e2 <memcpy+0xc>
    55e0:	bd10      	pop	{r4, pc}
    55e2:	f811 4b01 	ldrb.w	r4, [r1], #1
    55e6:	f803 4f01 	strb.w	r4, [r3, #1]!
    55ea:	e7f7      	b.n	55dc <memcpy+0x6>

000055ec <memmove>:
    55ec:	4288      	cmp	r0, r1
    55ee:	b510      	push	{r4, lr}
    55f0:	eb01 0302 	add.w	r3, r1, r2
    55f4:	d803      	bhi.n	55fe <memmove+0x12>
    55f6:	1e42      	subs	r2, r0, #1
    55f8:	4299      	cmp	r1, r3
    55fa:	d10c      	bne.n	5616 <memmove+0x2a>
    55fc:	bd10      	pop	{r4, pc}
    55fe:	4298      	cmp	r0, r3
    5600:	d2f9      	bcs.n	55f6 <memmove+0xa>
    5602:	1881      	adds	r1, r0, r2
    5604:	1ad2      	subs	r2, r2, r3
    5606:	42d3      	cmn	r3, r2
    5608:	d100      	bne.n	560c <memmove+0x20>
    560a:	bd10      	pop	{r4, pc}
    560c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    5610:	f801 4d01 	strb.w	r4, [r1, #-1]!
    5614:	e7f7      	b.n	5606 <memmove+0x1a>
    5616:	f811 4b01 	ldrb.w	r4, [r1], #1
    561a:	f802 4f01 	strb.w	r4, [r2, #1]!
    561e:	e7eb      	b.n	55f8 <memmove+0xc>

00005620 <memset>:
    5620:	4402      	add	r2, r0
    5622:	4603      	mov	r3, r0
    5624:	4293      	cmp	r3, r2
    5626:	d100      	bne.n	562a <memset+0xa>
    5628:	4770      	bx	lr
    562a:	f803 1b01 	strb.w	r1, [r3], #1
    562e:	e7f9      	b.n	5624 <memset+0x4>

00005630 <_free_r>:
    5630:	b538      	push	{r3, r4, r5, lr}
    5632:	4605      	mov	r5, r0
    5634:	2900      	cmp	r1, #0
    5636:	d045      	beq.n	56c4 <_free_r+0x94>
    5638:	f851 3c04 	ldr.w	r3, [r1, #-4]
    563c:	1f0c      	subs	r4, r1, #4
    563e:	2b00      	cmp	r3, #0
    5640:	bfb8      	it	lt
    5642:	18e4      	addlt	r4, r4, r3
    5644:	f000 f90b 	bl	585e <__malloc_lock>
    5648:	4a1f      	ldr	r2, [pc, #124]	; (56c8 <_free_r+0x98>)
    564a:	6813      	ldr	r3, [r2, #0]
    564c:	4610      	mov	r0, r2
    564e:	b933      	cbnz	r3, 565e <_free_r+0x2e>
    5650:	6063      	str	r3, [r4, #4]
    5652:	6014      	str	r4, [r2, #0]
    5654:	4628      	mov	r0, r5
    5656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    565a:	f000 b901 	b.w	5860 <__malloc_unlock>
    565e:	42a3      	cmp	r3, r4
    5660:	d90c      	bls.n	567c <_free_r+0x4c>
    5662:	6821      	ldr	r1, [r4, #0]
    5664:	1862      	adds	r2, r4, r1
    5666:	4293      	cmp	r3, r2
    5668:	bf04      	itt	eq
    566a:	681a      	ldreq	r2, [r3, #0]
    566c:	685b      	ldreq	r3, [r3, #4]
    566e:	6063      	str	r3, [r4, #4]
    5670:	bf04      	itt	eq
    5672:	1852      	addeq	r2, r2, r1
    5674:	6022      	streq	r2, [r4, #0]
    5676:	6004      	str	r4, [r0, #0]
    5678:	e7ec      	b.n	5654 <_free_r+0x24>
    567a:	4613      	mov	r3, r2
    567c:	685a      	ldr	r2, [r3, #4]
    567e:	b10a      	cbz	r2, 5684 <_free_r+0x54>
    5680:	42a2      	cmp	r2, r4
    5682:	d9fa      	bls.n	567a <_free_r+0x4a>
    5684:	6819      	ldr	r1, [r3, #0]
    5686:	1858      	adds	r0, r3, r1
    5688:	42a0      	cmp	r0, r4
    568a:	d10b      	bne.n	56a4 <_free_r+0x74>
    568c:	6820      	ldr	r0, [r4, #0]
    568e:	4401      	add	r1, r0
    5690:	1858      	adds	r0, r3, r1
    5692:	4282      	cmp	r2, r0
    5694:	6019      	str	r1, [r3, #0]
    5696:	d1dd      	bne.n	5654 <_free_r+0x24>
    5698:	6810      	ldr	r0, [r2, #0]
    569a:	6852      	ldr	r2, [r2, #4]
    569c:	605a      	str	r2, [r3, #4]
    569e:	4401      	add	r1, r0
    56a0:	6019      	str	r1, [r3, #0]
    56a2:	e7d7      	b.n	5654 <_free_r+0x24>
    56a4:	d902      	bls.n	56ac <_free_r+0x7c>
    56a6:	230c      	movs	r3, #12
    56a8:	602b      	str	r3, [r5, #0]
    56aa:	e7d3      	b.n	5654 <_free_r+0x24>
    56ac:	6820      	ldr	r0, [r4, #0]
    56ae:	1821      	adds	r1, r4, r0
    56b0:	428a      	cmp	r2, r1
    56b2:	bf04      	itt	eq
    56b4:	6811      	ldreq	r1, [r2, #0]
    56b6:	6852      	ldreq	r2, [r2, #4]
    56b8:	6062      	str	r2, [r4, #4]
    56ba:	bf04      	itt	eq
    56bc:	1809      	addeq	r1, r1, r0
    56be:	6021      	streq	r1, [r4, #0]
    56c0:	605c      	str	r4, [r3, #4]
    56c2:	e7c7      	b.n	5654 <_free_r+0x24>
    56c4:	bd38      	pop	{r3, r4, r5, pc}
    56c6:	bf00      	nop
    56c8:	200033e4 	.word	0x200033e4

000056cc <_malloc_r>:
    56cc:	b570      	push	{r4, r5, r6, lr}
    56ce:	1ccd      	adds	r5, r1, #3
    56d0:	f025 0503 	bic.w	r5, r5, #3
    56d4:	3508      	adds	r5, #8
    56d6:	2d0c      	cmp	r5, #12
    56d8:	bf38      	it	cc
    56da:	250c      	movcc	r5, #12
    56dc:	2d00      	cmp	r5, #0
    56de:	4606      	mov	r6, r0
    56e0:	db01      	blt.n	56e6 <_malloc_r+0x1a>
    56e2:	42a9      	cmp	r1, r5
    56e4:	d903      	bls.n	56ee <_malloc_r+0x22>
    56e6:	230c      	movs	r3, #12
    56e8:	6033      	str	r3, [r6, #0]
    56ea:	2000      	movs	r0, #0
    56ec:	bd70      	pop	{r4, r5, r6, pc}
    56ee:	f000 f8b6 	bl	585e <__malloc_lock>
    56f2:	4a23      	ldr	r2, [pc, #140]	; (5780 <_malloc_r+0xb4>)
    56f4:	6814      	ldr	r4, [r2, #0]
    56f6:	4621      	mov	r1, r4
    56f8:	b991      	cbnz	r1, 5720 <_malloc_r+0x54>
    56fa:	4c22      	ldr	r4, [pc, #136]	; (5784 <_malloc_r+0xb8>)
    56fc:	6823      	ldr	r3, [r4, #0]
    56fe:	b91b      	cbnz	r3, 5708 <_malloc_r+0x3c>
    5700:	4630      	mov	r0, r6
    5702:	f000 f841 	bl	5788 <_sbrk_r>
    5706:	6020      	str	r0, [r4, #0]
    5708:	4629      	mov	r1, r5
    570a:	4630      	mov	r0, r6
    570c:	f000 f83c 	bl	5788 <_sbrk_r>
    5710:	1c43      	adds	r3, r0, #1
    5712:	d126      	bne.n	5762 <_malloc_r+0x96>
    5714:	230c      	movs	r3, #12
    5716:	6033      	str	r3, [r6, #0]
    5718:	4630      	mov	r0, r6
    571a:	f000 f8a1 	bl	5860 <__malloc_unlock>
    571e:	e7e4      	b.n	56ea <_malloc_r+0x1e>
    5720:	680b      	ldr	r3, [r1, #0]
    5722:	1b5b      	subs	r3, r3, r5
    5724:	d41a      	bmi.n	575c <_malloc_r+0x90>
    5726:	2b0b      	cmp	r3, #11
    5728:	d90f      	bls.n	574a <_malloc_r+0x7e>
    572a:	600b      	str	r3, [r1, #0]
    572c:	50cd      	str	r5, [r1, r3]
    572e:	18cc      	adds	r4, r1, r3
    5730:	4630      	mov	r0, r6
    5732:	f000 f895 	bl	5860 <__malloc_unlock>
    5736:	f104 000b 	add.w	r0, r4, #11
    573a:	1d23      	adds	r3, r4, #4
    573c:	f020 0007 	bic.w	r0, r0, #7
    5740:	1ac3      	subs	r3, r0, r3
    5742:	d01b      	beq.n	577c <_malloc_r+0xb0>
    5744:	425a      	negs	r2, r3
    5746:	50e2      	str	r2, [r4, r3]
    5748:	bd70      	pop	{r4, r5, r6, pc}
    574a:	428c      	cmp	r4, r1
    574c:	bf0d      	iteet	eq
    574e:	6863      	ldreq	r3, [r4, #4]
    5750:	684b      	ldrne	r3, [r1, #4]
    5752:	6063      	strne	r3, [r4, #4]
    5754:	6013      	streq	r3, [r2, #0]
    5756:	bf18      	it	ne
    5758:	460c      	movne	r4, r1
    575a:	e7e9      	b.n	5730 <_malloc_r+0x64>
    575c:	460c      	mov	r4, r1
    575e:	6849      	ldr	r1, [r1, #4]
    5760:	e7ca      	b.n	56f8 <_malloc_r+0x2c>
    5762:	1cc4      	adds	r4, r0, #3
    5764:	f024 0403 	bic.w	r4, r4, #3
    5768:	42a0      	cmp	r0, r4
    576a:	d005      	beq.n	5778 <_malloc_r+0xac>
    576c:	1a21      	subs	r1, r4, r0
    576e:	4630      	mov	r0, r6
    5770:	f000 f80a 	bl	5788 <_sbrk_r>
    5774:	3001      	adds	r0, #1
    5776:	d0cd      	beq.n	5714 <_malloc_r+0x48>
    5778:	6025      	str	r5, [r4, #0]
    577a:	e7d9      	b.n	5730 <_malloc_r+0x64>
    577c:	bd70      	pop	{r4, r5, r6, pc}
    577e:	bf00      	nop
    5780:	200033e4 	.word	0x200033e4
    5784:	200033e8 	.word	0x200033e8

00005788 <_sbrk_r>:
    5788:	b538      	push	{r3, r4, r5, lr}
    578a:	4c06      	ldr	r4, [pc, #24]	; (57a4 <_sbrk_r+0x1c>)
    578c:	2300      	movs	r3, #0
    578e:	4605      	mov	r5, r0
    5790:	4608      	mov	r0, r1
    5792:	6023      	str	r3, [r4, #0]
    5794:	f7fc fbf0 	bl	1f78 <_sbrk>
    5798:	1c43      	adds	r3, r0, #1
    579a:	d102      	bne.n	57a2 <_sbrk_r+0x1a>
    579c:	6823      	ldr	r3, [r4, #0]
    579e:	b103      	cbz	r3, 57a2 <_sbrk_r+0x1a>
    57a0:	602b      	str	r3, [r5, #0]
    57a2:	bd38      	pop	{r3, r4, r5, pc}
    57a4:	20003dfc 	.word	0x20003dfc

000057a8 <siprintf>:
    57a8:	b40e      	push	{r1, r2, r3}
    57aa:	b500      	push	{lr}
    57ac:	b09c      	sub	sp, #112	; 0x70
    57ae:	f44f 7102 	mov.w	r1, #520	; 0x208
    57b2:	ab1d      	add	r3, sp, #116	; 0x74
    57b4:	f8ad 1014 	strh.w	r1, [sp, #20]
    57b8:	9002      	str	r0, [sp, #8]
    57ba:	9006      	str	r0, [sp, #24]
    57bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    57c0:	480a      	ldr	r0, [pc, #40]	; (57ec <siprintf+0x44>)
    57c2:	9104      	str	r1, [sp, #16]
    57c4:	9107      	str	r1, [sp, #28]
    57c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    57ca:	f853 2b04 	ldr.w	r2, [r3], #4
    57ce:	f8ad 1016 	strh.w	r1, [sp, #22]
    57d2:	6800      	ldr	r0, [r0, #0]
    57d4:	9301      	str	r3, [sp, #4]
    57d6:	a902      	add	r1, sp, #8
    57d8:	f000 f89e 	bl	5918 <_svfiprintf_r>
    57dc:	9b02      	ldr	r3, [sp, #8]
    57de:	2200      	movs	r2, #0
    57e0:	701a      	strb	r2, [r3, #0]
    57e2:	b01c      	add	sp, #112	; 0x70
    57e4:	f85d eb04 	ldr.w	lr, [sp], #4
    57e8:	b003      	add	sp, #12
    57ea:	4770      	bx	lr
    57ec:	20000128 	.word	0x20000128

000057f0 <strcpy>:
    57f0:	4603      	mov	r3, r0
    57f2:	f811 2b01 	ldrb.w	r2, [r1], #1
    57f6:	f803 2b01 	strb.w	r2, [r3], #1
    57fa:	2a00      	cmp	r2, #0
    57fc:	d1f9      	bne.n	57f2 <strcpy+0x2>
    57fe:	4770      	bx	lr

00005800 <strlen>:
    5800:	4603      	mov	r3, r0
    5802:	f813 2b01 	ldrb.w	r2, [r3], #1
    5806:	2a00      	cmp	r2, #0
    5808:	d1fb      	bne.n	5802 <strlen+0x2>
    580a:	1a18      	subs	r0, r3, r0
    580c:	3801      	subs	r0, #1
    580e:	4770      	bx	lr

00005810 <strncmp>:
    5810:	b510      	push	{r4, lr}
    5812:	b16a      	cbz	r2, 5830 <strncmp+0x20>
    5814:	3901      	subs	r1, #1
    5816:	1884      	adds	r4, r0, r2
    5818:	f810 3b01 	ldrb.w	r3, [r0], #1
    581c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5820:	4293      	cmp	r3, r2
    5822:	d103      	bne.n	582c <strncmp+0x1c>
    5824:	42a0      	cmp	r0, r4
    5826:	d001      	beq.n	582c <strncmp+0x1c>
    5828:	2b00      	cmp	r3, #0
    582a:	d1f5      	bne.n	5818 <strncmp+0x8>
    582c:	1a98      	subs	r0, r3, r2
    582e:	bd10      	pop	{r4, pc}
    5830:	4610      	mov	r0, r2
    5832:	bd10      	pop	{r4, pc}

00005834 <strncpy>:
    5834:	b570      	push	{r4, r5, r6, lr}
    5836:	4604      	mov	r4, r0
    5838:	b902      	cbnz	r2, 583c <strncpy+0x8>
    583a:	bd70      	pop	{r4, r5, r6, pc}
    583c:	4623      	mov	r3, r4
    583e:	f811 5b01 	ldrb.w	r5, [r1], #1
    5842:	f803 5b01 	strb.w	r5, [r3], #1
    5846:	1e56      	subs	r6, r2, #1
    5848:	b91d      	cbnz	r5, 5852 <strncpy+0x1e>
    584a:	4414      	add	r4, r2
    584c:	42a3      	cmp	r3, r4
    584e:	d103      	bne.n	5858 <strncpy+0x24>
    5850:	bd70      	pop	{r4, r5, r6, pc}
    5852:	461c      	mov	r4, r3
    5854:	4632      	mov	r2, r6
    5856:	e7ef      	b.n	5838 <strncpy+0x4>
    5858:	f803 5b01 	strb.w	r5, [r3], #1
    585c:	e7f6      	b.n	584c <strncpy+0x18>

0000585e <__malloc_lock>:
    585e:	4770      	bx	lr

00005860 <__malloc_unlock>:
    5860:	4770      	bx	lr

00005862 <__ssputs_r>:
    5862:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5866:	688e      	ldr	r6, [r1, #8]
    5868:	429e      	cmp	r6, r3
    586a:	4682      	mov	sl, r0
    586c:	460c      	mov	r4, r1
    586e:	4691      	mov	r9, r2
    5870:	4698      	mov	r8, r3
    5872:	d835      	bhi.n	58e0 <__ssputs_r+0x7e>
    5874:	898a      	ldrh	r2, [r1, #12]
    5876:	f412 6f90 	tst.w	r2, #1152	; 0x480
    587a:	d031      	beq.n	58e0 <__ssputs_r+0x7e>
    587c:	6825      	ldr	r5, [r4, #0]
    587e:	6909      	ldr	r1, [r1, #16]
    5880:	1a6f      	subs	r7, r5, r1
    5882:	6965      	ldr	r5, [r4, #20]
    5884:	2302      	movs	r3, #2
    5886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    588a:	fb95 f5f3 	sdiv	r5, r5, r3
    588e:	f108 0301 	add.w	r3, r8, #1
    5892:	443b      	add	r3, r7
    5894:	429d      	cmp	r5, r3
    5896:	bf38      	it	cc
    5898:	461d      	movcc	r5, r3
    589a:	0553      	lsls	r3, r2, #21
    589c:	d531      	bpl.n	5902 <__ssputs_r+0xa0>
    589e:	4629      	mov	r1, r5
    58a0:	f7ff ff14 	bl	56cc <_malloc_r>
    58a4:	4606      	mov	r6, r0
    58a6:	b950      	cbnz	r0, 58be <__ssputs_r+0x5c>
    58a8:	230c      	movs	r3, #12
    58aa:	f8ca 3000 	str.w	r3, [sl]
    58ae:	89a3      	ldrh	r3, [r4, #12]
    58b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    58b4:	81a3      	strh	r3, [r4, #12]
    58b6:	f04f 30ff 	mov.w	r0, #4294967295
    58ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58be:	463a      	mov	r2, r7
    58c0:	6921      	ldr	r1, [r4, #16]
    58c2:	f7ff fe88 	bl	55d6 <memcpy>
    58c6:	89a3      	ldrh	r3, [r4, #12]
    58c8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    58cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    58d0:	81a3      	strh	r3, [r4, #12]
    58d2:	6126      	str	r6, [r4, #16]
    58d4:	6165      	str	r5, [r4, #20]
    58d6:	443e      	add	r6, r7
    58d8:	1bed      	subs	r5, r5, r7
    58da:	6026      	str	r6, [r4, #0]
    58dc:	60a5      	str	r5, [r4, #8]
    58de:	4646      	mov	r6, r8
    58e0:	4546      	cmp	r6, r8
    58e2:	bf28      	it	cs
    58e4:	4646      	movcs	r6, r8
    58e6:	4632      	mov	r2, r6
    58e8:	4649      	mov	r1, r9
    58ea:	6820      	ldr	r0, [r4, #0]
    58ec:	f7ff fe7e 	bl	55ec <memmove>
    58f0:	68a3      	ldr	r3, [r4, #8]
    58f2:	1b9b      	subs	r3, r3, r6
    58f4:	60a3      	str	r3, [r4, #8]
    58f6:	6823      	ldr	r3, [r4, #0]
    58f8:	441e      	add	r6, r3
    58fa:	6026      	str	r6, [r4, #0]
    58fc:	2000      	movs	r0, #0
    58fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5902:	462a      	mov	r2, r5
    5904:	f000 fae4 	bl	5ed0 <_realloc_r>
    5908:	4606      	mov	r6, r0
    590a:	2800      	cmp	r0, #0
    590c:	d1e1      	bne.n	58d2 <__ssputs_r+0x70>
    590e:	6921      	ldr	r1, [r4, #16]
    5910:	4650      	mov	r0, sl
    5912:	f7ff fe8d 	bl	5630 <_free_r>
    5916:	e7c7      	b.n	58a8 <__ssputs_r+0x46>

00005918 <_svfiprintf_r>:
    5918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    591c:	b09d      	sub	sp, #116	; 0x74
    591e:	4680      	mov	r8, r0
    5920:	9303      	str	r3, [sp, #12]
    5922:	898b      	ldrh	r3, [r1, #12]
    5924:	061c      	lsls	r4, r3, #24
    5926:	460d      	mov	r5, r1
    5928:	4616      	mov	r6, r2
    592a:	d50f      	bpl.n	594c <_svfiprintf_r+0x34>
    592c:	690b      	ldr	r3, [r1, #16]
    592e:	b96b      	cbnz	r3, 594c <_svfiprintf_r+0x34>
    5930:	2140      	movs	r1, #64	; 0x40
    5932:	f7ff fecb 	bl	56cc <_malloc_r>
    5936:	6028      	str	r0, [r5, #0]
    5938:	6128      	str	r0, [r5, #16]
    593a:	b928      	cbnz	r0, 5948 <_svfiprintf_r+0x30>
    593c:	230c      	movs	r3, #12
    593e:	f8c8 3000 	str.w	r3, [r8]
    5942:	f04f 30ff 	mov.w	r0, #4294967295
    5946:	e0c5      	b.n	5ad4 <_svfiprintf_r+0x1bc>
    5948:	2340      	movs	r3, #64	; 0x40
    594a:	616b      	str	r3, [r5, #20]
    594c:	2300      	movs	r3, #0
    594e:	9309      	str	r3, [sp, #36]	; 0x24
    5950:	2320      	movs	r3, #32
    5952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    5956:	2330      	movs	r3, #48	; 0x30
    5958:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    595c:	f04f 0b01 	mov.w	fp, #1
    5960:	4637      	mov	r7, r6
    5962:	463c      	mov	r4, r7
    5964:	f814 3b01 	ldrb.w	r3, [r4], #1
    5968:	2b00      	cmp	r3, #0
    596a:	d13c      	bne.n	59e6 <_svfiprintf_r+0xce>
    596c:	ebb7 0a06 	subs.w	sl, r7, r6
    5970:	d00b      	beq.n	598a <_svfiprintf_r+0x72>
    5972:	4653      	mov	r3, sl
    5974:	4632      	mov	r2, r6
    5976:	4629      	mov	r1, r5
    5978:	4640      	mov	r0, r8
    597a:	f7ff ff72 	bl	5862 <__ssputs_r>
    597e:	3001      	adds	r0, #1
    5980:	f000 80a3 	beq.w	5aca <_svfiprintf_r+0x1b2>
    5984:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5986:	4453      	add	r3, sl
    5988:	9309      	str	r3, [sp, #36]	; 0x24
    598a:	783b      	ldrb	r3, [r7, #0]
    598c:	2b00      	cmp	r3, #0
    598e:	f000 809c 	beq.w	5aca <_svfiprintf_r+0x1b2>
    5992:	2300      	movs	r3, #0
    5994:	f04f 32ff 	mov.w	r2, #4294967295
    5998:	9304      	str	r3, [sp, #16]
    599a:	9307      	str	r3, [sp, #28]
    599c:	9205      	str	r2, [sp, #20]
    599e:	9306      	str	r3, [sp, #24]
    59a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    59a4:	931a      	str	r3, [sp, #104]	; 0x68
    59a6:	2205      	movs	r2, #5
    59a8:	7821      	ldrb	r1, [r4, #0]
    59aa:	4850      	ldr	r0, [pc, #320]	; (5aec <_svfiprintf_r+0x1d4>)
    59ac:	f000 fa40 	bl	5e30 <memchr>
    59b0:	1c67      	adds	r7, r4, #1
    59b2:	9b04      	ldr	r3, [sp, #16]
    59b4:	b9d8      	cbnz	r0, 59ee <_svfiprintf_r+0xd6>
    59b6:	06d9      	lsls	r1, r3, #27
    59b8:	bf44      	itt	mi
    59ba:	2220      	movmi	r2, #32
    59bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    59c0:	071a      	lsls	r2, r3, #28
    59c2:	bf44      	itt	mi
    59c4:	222b      	movmi	r2, #43	; 0x2b
    59c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    59ca:	7822      	ldrb	r2, [r4, #0]
    59cc:	2a2a      	cmp	r2, #42	; 0x2a
    59ce:	d016      	beq.n	59fe <_svfiprintf_r+0xe6>
    59d0:	9a07      	ldr	r2, [sp, #28]
    59d2:	2100      	movs	r1, #0
    59d4:	200a      	movs	r0, #10
    59d6:	4627      	mov	r7, r4
    59d8:	3401      	adds	r4, #1
    59da:	783b      	ldrb	r3, [r7, #0]
    59dc:	3b30      	subs	r3, #48	; 0x30
    59de:	2b09      	cmp	r3, #9
    59e0:	d951      	bls.n	5a86 <_svfiprintf_r+0x16e>
    59e2:	b1c9      	cbz	r1, 5a18 <_svfiprintf_r+0x100>
    59e4:	e011      	b.n	5a0a <_svfiprintf_r+0xf2>
    59e6:	2b25      	cmp	r3, #37	; 0x25
    59e8:	d0c0      	beq.n	596c <_svfiprintf_r+0x54>
    59ea:	4627      	mov	r7, r4
    59ec:	e7b9      	b.n	5962 <_svfiprintf_r+0x4a>
    59ee:	4a3f      	ldr	r2, [pc, #252]	; (5aec <_svfiprintf_r+0x1d4>)
    59f0:	1a80      	subs	r0, r0, r2
    59f2:	fa0b f000 	lsl.w	r0, fp, r0
    59f6:	4318      	orrs	r0, r3
    59f8:	9004      	str	r0, [sp, #16]
    59fa:	463c      	mov	r4, r7
    59fc:	e7d3      	b.n	59a6 <_svfiprintf_r+0x8e>
    59fe:	9a03      	ldr	r2, [sp, #12]
    5a00:	1d11      	adds	r1, r2, #4
    5a02:	6812      	ldr	r2, [r2, #0]
    5a04:	9103      	str	r1, [sp, #12]
    5a06:	2a00      	cmp	r2, #0
    5a08:	db01      	blt.n	5a0e <_svfiprintf_r+0xf6>
    5a0a:	9207      	str	r2, [sp, #28]
    5a0c:	e004      	b.n	5a18 <_svfiprintf_r+0x100>
    5a0e:	4252      	negs	r2, r2
    5a10:	f043 0302 	orr.w	r3, r3, #2
    5a14:	9207      	str	r2, [sp, #28]
    5a16:	9304      	str	r3, [sp, #16]
    5a18:	783b      	ldrb	r3, [r7, #0]
    5a1a:	2b2e      	cmp	r3, #46	; 0x2e
    5a1c:	d10e      	bne.n	5a3c <_svfiprintf_r+0x124>
    5a1e:	787b      	ldrb	r3, [r7, #1]
    5a20:	2b2a      	cmp	r3, #42	; 0x2a
    5a22:	f107 0101 	add.w	r1, r7, #1
    5a26:	d132      	bne.n	5a8e <_svfiprintf_r+0x176>
    5a28:	9b03      	ldr	r3, [sp, #12]
    5a2a:	1d1a      	adds	r2, r3, #4
    5a2c:	681b      	ldr	r3, [r3, #0]
    5a2e:	9203      	str	r2, [sp, #12]
    5a30:	2b00      	cmp	r3, #0
    5a32:	bfb8      	it	lt
    5a34:	f04f 33ff 	movlt.w	r3, #4294967295
    5a38:	3702      	adds	r7, #2
    5a3a:	9305      	str	r3, [sp, #20]
    5a3c:	4c2c      	ldr	r4, [pc, #176]	; (5af0 <_svfiprintf_r+0x1d8>)
    5a3e:	7839      	ldrb	r1, [r7, #0]
    5a40:	2203      	movs	r2, #3
    5a42:	4620      	mov	r0, r4
    5a44:	f000 f9f4 	bl	5e30 <memchr>
    5a48:	b138      	cbz	r0, 5a5a <_svfiprintf_r+0x142>
    5a4a:	2340      	movs	r3, #64	; 0x40
    5a4c:	1b00      	subs	r0, r0, r4
    5a4e:	fa03 f000 	lsl.w	r0, r3, r0
    5a52:	9b04      	ldr	r3, [sp, #16]
    5a54:	4303      	orrs	r3, r0
    5a56:	9304      	str	r3, [sp, #16]
    5a58:	3701      	adds	r7, #1
    5a5a:	7839      	ldrb	r1, [r7, #0]
    5a5c:	4825      	ldr	r0, [pc, #148]	; (5af4 <_svfiprintf_r+0x1dc>)
    5a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    5a62:	2206      	movs	r2, #6
    5a64:	1c7e      	adds	r6, r7, #1
    5a66:	f000 f9e3 	bl	5e30 <memchr>
    5a6a:	2800      	cmp	r0, #0
    5a6c:	d035      	beq.n	5ada <_svfiprintf_r+0x1c2>
    5a6e:	4b22      	ldr	r3, [pc, #136]	; (5af8 <_svfiprintf_r+0x1e0>)
    5a70:	b9fb      	cbnz	r3, 5ab2 <_svfiprintf_r+0x19a>
    5a72:	9b03      	ldr	r3, [sp, #12]
    5a74:	3307      	adds	r3, #7
    5a76:	f023 0307 	bic.w	r3, r3, #7
    5a7a:	3308      	adds	r3, #8
    5a7c:	9303      	str	r3, [sp, #12]
    5a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a80:	444b      	add	r3, r9
    5a82:	9309      	str	r3, [sp, #36]	; 0x24
    5a84:	e76c      	b.n	5960 <_svfiprintf_r+0x48>
    5a86:	fb00 3202 	mla	r2, r0, r2, r3
    5a8a:	2101      	movs	r1, #1
    5a8c:	e7a3      	b.n	59d6 <_svfiprintf_r+0xbe>
    5a8e:	2300      	movs	r3, #0
    5a90:	9305      	str	r3, [sp, #20]
    5a92:	4618      	mov	r0, r3
    5a94:	240a      	movs	r4, #10
    5a96:	460f      	mov	r7, r1
    5a98:	3101      	adds	r1, #1
    5a9a:	783a      	ldrb	r2, [r7, #0]
    5a9c:	3a30      	subs	r2, #48	; 0x30
    5a9e:	2a09      	cmp	r2, #9
    5aa0:	d903      	bls.n	5aaa <_svfiprintf_r+0x192>
    5aa2:	2b00      	cmp	r3, #0
    5aa4:	d0ca      	beq.n	5a3c <_svfiprintf_r+0x124>
    5aa6:	9005      	str	r0, [sp, #20]
    5aa8:	e7c8      	b.n	5a3c <_svfiprintf_r+0x124>
    5aaa:	fb04 2000 	mla	r0, r4, r0, r2
    5aae:	2301      	movs	r3, #1
    5ab0:	e7f1      	b.n	5a96 <_svfiprintf_r+0x17e>
    5ab2:	ab03      	add	r3, sp, #12
    5ab4:	9300      	str	r3, [sp, #0]
    5ab6:	462a      	mov	r2, r5
    5ab8:	4b10      	ldr	r3, [pc, #64]	; (5afc <_svfiprintf_r+0x1e4>)
    5aba:	a904      	add	r1, sp, #16
    5abc:	4640      	mov	r0, r8
    5abe:	f3af 8000 	nop.w
    5ac2:	f1b0 3fff 	cmp.w	r0, #4294967295
    5ac6:	4681      	mov	r9, r0
    5ac8:	d1d9      	bne.n	5a7e <_svfiprintf_r+0x166>
    5aca:	89ab      	ldrh	r3, [r5, #12]
    5acc:	065b      	lsls	r3, r3, #25
    5ace:	f53f af38 	bmi.w	5942 <_svfiprintf_r+0x2a>
    5ad2:	9809      	ldr	r0, [sp, #36]	; 0x24
    5ad4:	b01d      	add	sp, #116	; 0x74
    5ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ada:	ab03      	add	r3, sp, #12
    5adc:	9300      	str	r3, [sp, #0]
    5ade:	462a      	mov	r2, r5
    5ae0:	4b06      	ldr	r3, [pc, #24]	; (5afc <_svfiprintf_r+0x1e4>)
    5ae2:	a904      	add	r1, sp, #16
    5ae4:	4640      	mov	r0, r8
    5ae6:	f000 f881 	bl	5bec <_printf_i>
    5aea:	e7ea      	b.n	5ac2 <_svfiprintf_r+0x1aa>
    5aec:	00007408 	.word	0x00007408
    5af0:	0000740e 	.word	0x0000740e
    5af4:	00007412 	.word	0x00007412
    5af8:	00000000 	.word	0x00000000
    5afc:	00005863 	.word	0x00005863

00005b00 <_printf_common>:
    5b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b04:	4691      	mov	r9, r2
    5b06:	461f      	mov	r7, r3
    5b08:	688a      	ldr	r2, [r1, #8]
    5b0a:	690b      	ldr	r3, [r1, #16]
    5b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    5b10:	4293      	cmp	r3, r2
    5b12:	bfb8      	it	lt
    5b14:	4613      	movlt	r3, r2
    5b16:	f8c9 3000 	str.w	r3, [r9]
    5b1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    5b1e:	4606      	mov	r6, r0
    5b20:	460c      	mov	r4, r1
    5b22:	b112      	cbz	r2, 5b2a <_printf_common+0x2a>
    5b24:	3301      	adds	r3, #1
    5b26:	f8c9 3000 	str.w	r3, [r9]
    5b2a:	6823      	ldr	r3, [r4, #0]
    5b2c:	0699      	lsls	r1, r3, #26
    5b2e:	bf42      	ittt	mi
    5b30:	f8d9 3000 	ldrmi.w	r3, [r9]
    5b34:	3302      	addmi	r3, #2
    5b36:	f8c9 3000 	strmi.w	r3, [r9]
    5b3a:	6825      	ldr	r5, [r4, #0]
    5b3c:	f015 0506 	ands.w	r5, r5, #6
    5b40:	d107      	bne.n	5b52 <_printf_common+0x52>
    5b42:	f104 0a19 	add.w	sl, r4, #25
    5b46:	68e3      	ldr	r3, [r4, #12]
    5b48:	f8d9 2000 	ldr.w	r2, [r9]
    5b4c:	1a9b      	subs	r3, r3, r2
    5b4e:	429d      	cmp	r5, r3
    5b50:	db29      	blt.n	5ba6 <_printf_common+0xa6>
    5b52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    5b56:	6822      	ldr	r2, [r4, #0]
    5b58:	3300      	adds	r3, #0
    5b5a:	bf18      	it	ne
    5b5c:	2301      	movne	r3, #1
    5b5e:	0692      	lsls	r2, r2, #26
    5b60:	d42e      	bmi.n	5bc0 <_printf_common+0xc0>
    5b62:	f104 0243 	add.w	r2, r4, #67	; 0x43
    5b66:	4639      	mov	r1, r7
    5b68:	4630      	mov	r0, r6
    5b6a:	47c0      	blx	r8
    5b6c:	3001      	adds	r0, #1
    5b6e:	d021      	beq.n	5bb4 <_printf_common+0xb4>
    5b70:	6823      	ldr	r3, [r4, #0]
    5b72:	68e5      	ldr	r5, [r4, #12]
    5b74:	f8d9 2000 	ldr.w	r2, [r9]
    5b78:	f003 0306 	and.w	r3, r3, #6
    5b7c:	2b04      	cmp	r3, #4
    5b7e:	bf08      	it	eq
    5b80:	1aad      	subeq	r5, r5, r2
    5b82:	68a3      	ldr	r3, [r4, #8]
    5b84:	6922      	ldr	r2, [r4, #16]
    5b86:	bf0c      	ite	eq
    5b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5b8c:	2500      	movne	r5, #0
    5b8e:	4293      	cmp	r3, r2
    5b90:	bfc4      	itt	gt
    5b92:	1a9b      	subgt	r3, r3, r2
    5b94:	18ed      	addgt	r5, r5, r3
    5b96:	f04f 0900 	mov.w	r9, #0
    5b9a:	341a      	adds	r4, #26
    5b9c:	454d      	cmp	r5, r9
    5b9e:	d11b      	bne.n	5bd8 <_printf_common+0xd8>
    5ba0:	2000      	movs	r0, #0
    5ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ba6:	2301      	movs	r3, #1
    5ba8:	4652      	mov	r2, sl
    5baa:	4639      	mov	r1, r7
    5bac:	4630      	mov	r0, r6
    5bae:	47c0      	blx	r8
    5bb0:	3001      	adds	r0, #1
    5bb2:	d103      	bne.n	5bbc <_printf_common+0xbc>
    5bb4:	f04f 30ff 	mov.w	r0, #4294967295
    5bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5bbc:	3501      	adds	r5, #1
    5bbe:	e7c2      	b.n	5b46 <_printf_common+0x46>
    5bc0:	18e1      	adds	r1, r4, r3
    5bc2:	1c5a      	adds	r2, r3, #1
    5bc4:	2030      	movs	r0, #48	; 0x30
    5bc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    5bca:	4422      	add	r2, r4
    5bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    5bd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    5bd4:	3302      	adds	r3, #2
    5bd6:	e7c4      	b.n	5b62 <_printf_common+0x62>
    5bd8:	2301      	movs	r3, #1
    5bda:	4622      	mov	r2, r4
    5bdc:	4639      	mov	r1, r7
    5bde:	4630      	mov	r0, r6
    5be0:	47c0      	blx	r8
    5be2:	3001      	adds	r0, #1
    5be4:	d0e6      	beq.n	5bb4 <_printf_common+0xb4>
    5be6:	f109 0901 	add.w	r9, r9, #1
    5bea:	e7d7      	b.n	5b9c <_printf_common+0x9c>

00005bec <_printf_i>:
    5bec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5bf0:	4617      	mov	r7, r2
    5bf2:	7e0a      	ldrb	r2, [r1, #24]
    5bf4:	b085      	sub	sp, #20
    5bf6:	2a6e      	cmp	r2, #110	; 0x6e
    5bf8:	4698      	mov	r8, r3
    5bfa:	4606      	mov	r6, r0
    5bfc:	460c      	mov	r4, r1
    5bfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5c00:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    5c04:	f000 80bc 	beq.w	5d80 <_printf_i+0x194>
    5c08:	d81a      	bhi.n	5c40 <_printf_i+0x54>
    5c0a:	2a63      	cmp	r2, #99	; 0x63
    5c0c:	d02e      	beq.n	5c6c <_printf_i+0x80>
    5c0e:	d80a      	bhi.n	5c26 <_printf_i+0x3a>
    5c10:	2a00      	cmp	r2, #0
    5c12:	f000 80c8 	beq.w	5da6 <_printf_i+0x1ba>
    5c16:	2a58      	cmp	r2, #88	; 0x58
    5c18:	f000 808a 	beq.w	5d30 <_printf_i+0x144>
    5c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5c20:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    5c24:	e02a      	b.n	5c7c <_printf_i+0x90>
    5c26:	2a64      	cmp	r2, #100	; 0x64
    5c28:	d001      	beq.n	5c2e <_printf_i+0x42>
    5c2a:	2a69      	cmp	r2, #105	; 0x69
    5c2c:	d1f6      	bne.n	5c1c <_printf_i+0x30>
    5c2e:	6821      	ldr	r1, [r4, #0]
    5c30:	681a      	ldr	r2, [r3, #0]
    5c32:	f011 0f80 	tst.w	r1, #128	; 0x80
    5c36:	d023      	beq.n	5c80 <_printf_i+0x94>
    5c38:	1d11      	adds	r1, r2, #4
    5c3a:	6019      	str	r1, [r3, #0]
    5c3c:	6813      	ldr	r3, [r2, #0]
    5c3e:	e027      	b.n	5c90 <_printf_i+0xa4>
    5c40:	2a73      	cmp	r2, #115	; 0x73
    5c42:	f000 80b4 	beq.w	5dae <_printf_i+0x1c2>
    5c46:	d808      	bhi.n	5c5a <_printf_i+0x6e>
    5c48:	2a6f      	cmp	r2, #111	; 0x6f
    5c4a:	d02a      	beq.n	5ca2 <_printf_i+0xb6>
    5c4c:	2a70      	cmp	r2, #112	; 0x70
    5c4e:	d1e5      	bne.n	5c1c <_printf_i+0x30>
    5c50:	680a      	ldr	r2, [r1, #0]
    5c52:	f042 0220 	orr.w	r2, r2, #32
    5c56:	600a      	str	r2, [r1, #0]
    5c58:	e003      	b.n	5c62 <_printf_i+0x76>
    5c5a:	2a75      	cmp	r2, #117	; 0x75
    5c5c:	d021      	beq.n	5ca2 <_printf_i+0xb6>
    5c5e:	2a78      	cmp	r2, #120	; 0x78
    5c60:	d1dc      	bne.n	5c1c <_printf_i+0x30>
    5c62:	2278      	movs	r2, #120	; 0x78
    5c64:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    5c68:	496e      	ldr	r1, [pc, #440]	; (5e24 <_printf_i+0x238>)
    5c6a:	e064      	b.n	5d36 <_printf_i+0x14a>
    5c6c:	681a      	ldr	r2, [r3, #0]
    5c6e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    5c72:	1d11      	adds	r1, r2, #4
    5c74:	6019      	str	r1, [r3, #0]
    5c76:	6813      	ldr	r3, [r2, #0]
    5c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5c7c:	2301      	movs	r3, #1
    5c7e:	e0a3      	b.n	5dc8 <_printf_i+0x1dc>
    5c80:	f011 0f40 	tst.w	r1, #64	; 0x40
    5c84:	f102 0104 	add.w	r1, r2, #4
    5c88:	6019      	str	r1, [r3, #0]
    5c8a:	d0d7      	beq.n	5c3c <_printf_i+0x50>
    5c8c:	f9b2 3000 	ldrsh.w	r3, [r2]
    5c90:	2b00      	cmp	r3, #0
    5c92:	da03      	bge.n	5c9c <_printf_i+0xb0>
    5c94:	222d      	movs	r2, #45	; 0x2d
    5c96:	425b      	negs	r3, r3
    5c98:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    5c9c:	4962      	ldr	r1, [pc, #392]	; (5e28 <_printf_i+0x23c>)
    5c9e:	220a      	movs	r2, #10
    5ca0:	e017      	b.n	5cd2 <_printf_i+0xe6>
    5ca2:	6820      	ldr	r0, [r4, #0]
    5ca4:	6819      	ldr	r1, [r3, #0]
    5ca6:	f010 0f80 	tst.w	r0, #128	; 0x80
    5caa:	d003      	beq.n	5cb4 <_printf_i+0xc8>
    5cac:	1d08      	adds	r0, r1, #4
    5cae:	6018      	str	r0, [r3, #0]
    5cb0:	680b      	ldr	r3, [r1, #0]
    5cb2:	e006      	b.n	5cc2 <_printf_i+0xd6>
    5cb4:	f010 0f40 	tst.w	r0, #64	; 0x40
    5cb8:	f101 0004 	add.w	r0, r1, #4
    5cbc:	6018      	str	r0, [r3, #0]
    5cbe:	d0f7      	beq.n	5cb0 <_printf_i+0xc4>
    5cc0:	880b      	ldrh	r3, [r1, #0]
    5cc2:	4959      	ldr	r1, [pc, #356]	; (5e28 <_printf_i+0x23c>)
    5cc4:	2a6f      	cmp	r2, #111	; 0x6f
    5cc6:	bf14      	ite	ne
    5cc8:	220a      	movne	r2, #10
    5cca:	2208      	moveq	r2, #8
    5ccc:	2000      	movs	r0, #0
    5cce:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5cd2:	6865      	ldr	r5, [r4, #4]
    5cd4:	60a5      	str	r5, [r4, #8]
    5cd6:	2d00      	cmp	r5, #0
    5cd8:	f2c0 809c 	blt.w	5e14 <_printf_i+0x228>
    5cdc:	6820      	ldr	r0, [r4, #0]
    5cde:	f020 0004 	bic.w	r0, r0, #4
    5ce2:	6020      	str	r0, [r4, #0]
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d13f      	bne.n	5d68 <_printf_i+0x17c>
    5ce8:	2d00      	cmp	r5, #0
    5cea:	f040 8095 	bne.w	5e18 <_printf_i+0x22c>
    5cee:	4675      	mov	r5, lr
    5cf0:	2a08      	cmp	r2, #8
    5cf2:	d10b      	bne.n	5d0c <_printf_i+0x120>
    5cf4:	6823      	ldr	r3, [r4, #0]
    5cf6:	07da      	lsls	r2, r3, #31
    5cf8:	d508      	bpl.n	5d0c <_printf_i+0x120>
    5cfa:	6923      	ldr	r3, [r4, #16]
    5cfc:	6862      	ldr	r2, [r4, #4]
    5cfe:	429a      	cmp	r2, r3
    5d00:	bfde      	ittt	le
    5d02:	2330      	movle	r3, #48	; 0x30
    5d04:	f805 3c01 	strble.w	r3, [r5, #-1]
    5d08:	f105 35ff 	addle.w	r5, r5, #4294967295
    5d0c:	ebae 0305 	sub.w	r3, lr, r5
    5d10:	6123      	str	r3, [r4, #16]
    5d12:	f8cd 8000 	str.w	r8, [sp]
    5d16:	463b      	mov	r3, r7
    5d18:	aa03      	add	r2, sp, #12
    5d1a:	4621      	mov	r1, r4
    5d1c:	4630      	mov	r0, r6
    5d1e:	f7ff feef 	bl	5b00 <_printf_common>
    5d22:	3001      	adds	r0, #1
    5d24:	d155      	bne.n	5dd2 <_printf_i+0x1e6>
    5d26:	f04f 30ff 	mov.w	r0, #4294967295
    5d2a:	b005      	add	sp, #20
    5d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5d30:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    5d34:	493c      	ldr	r1, [pc, #240]	; (5e28 <_printf_i+0x23c>)
    5d36:	6822      	ldr	r2, [r4, #0]
    5d38:	6818      	ldr	r0, [r3, #0]
    5d3a:	f012 0f80 	tst.w	r2, #128	; 0x80
    5d3e:	f100 0504 	add.w	r5, r0, #4
    5d42:	601d      	str	r5, [r3, #0]
    5d44:	d001      	beq.n	5d4a <_printf_i+0x15e>
    5d46:	6803      	ldr	r3, [r0, #0]
    5d48:	e002      	b.n	5d50 <_printf_i+0x164>
    5d4a:	0655      	lsls	r5, r2, #25
    5d4c:	d5fb      	bpl.n	5d46 <_printf_i+0x15a>
    5d4e:	8803      	ldrh	r3, [r0, #0]
    5d50:	07d0      	lsls	r0, r2, #31
    5d52:	bf44      	itt	mi
    5d54:	f042 0220 	orrmi.w	r2, r2, #32
    5d58:	6022      	strmi	r2, [r4, #0]
    5d5a:	b91b      	cbnz	r3, 5d64 <_printf_i+0x178>
    5d5c:	6822      	ldr	r2, [r4, #0]
    5d5e:	f022 0220 	bic.w	r2, r2, #32
    5d62:	6022      	str	r2, [r4, #0]
    5d64:	2210      	movs	r2, #16
    5d66:	e7b1      	b.n	5ccc <_printf_i+0xe0>
    5d68:	4675      	mov	r5, lr
    5d6a:	fbb3 f0f2 	udiv	r0, r3, r2
    5d6e:	fb02 3310 	mls	r3, r2, r0, r3
    5d72:	5ccb      	ldrb	r3, [r1, r3]
    5d74:	f805 3d01 	strb.w	r3, [r5, #-1]!
    5d78:	4603      	mov	r3, r0
    5d7a:	2800      	cmp	r0, #0
    5d7c:	d1f5      	bne.n	5d6a <_printf_i+0x17e>
    5d7e:	e7b7      	b.n	5cf0 <_printf_i+0x104>
    5d80:	6808      	ldr	r0, [r1, #0]
    5d82:	681a      	ldr	r2, [r3, #0]
    5d84:	6949      	ldr	r1, [r1, #20]
    5d86:	f010 0f80 	tst.w	r0, #128	; 0x80
    5d8a:	d004      	beq.n	5d96 <_printf_i+0x1aa>
    5d8c:	1d10      	adds	r0, r2, #4
    5d8e:	6018      	str	r0, [r3, #0]
    5d90:	6813      	ldr	r3, [r2, #0]
    5d92:	6019      	str	r1, [r3, #0]
    5d94:	e007      	b.n	5da6 <_printf_i+0x1ba>
    5d96:	f010 0f40 	tst.w	r0, #64	; 0x40
    5d9a:	f102 0004 	add.w	r0, r2, #4
    5d9e:	6018      	str	r0, [r3, #0]
    5da0:	6813      	ldr	r3, [r2, #0]
    5da2:	d0f6      	beq.n	5d92 <_printf_i+0x1a6>
    5da4:	8019      	strh	r1, [r3, #0]
    5da6:	2300      	movs	r3, #0
    5da8:	6123      	str	r3, [r4, #16]
    5daa:	4675      	mov	r5, lr
    5dac:	e7b1      	b.n	5d12 <_printf_i+0x126>
    5dae:	681a      	ldr	r2, [r3, #0]
    5db0:	1d11      	adds	r1, r2, #4
    5db2:	6019      	str	r1, [r3, #0]
    5db4:	6815      	ldr	r5, [r2, #0]
    5db6:	6862      	ldr	r2, [r4, #4]
    5db8:	2100      	movs	r1, #0
    5dba:	4628      	mov	r0, r5
    5dbc:	f000 f838 	bl	5e30 <memchr>
    5dc0:	b108      	cbz	r0, 5dc6 <_printf_i+0x1da>
    5dc2:	1b40      	subs	r0, r0, r5
    5dc4:	6060      	str	r0, [r4, #4]
    5dc6:	6863      	ldr	r3, [r4, #4]
    5dc8:	6123      	str	r3, [r4, #16]
    5dca:	2300      	movs	r3, #0
    5dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    5dd0:	e79f      	b.n	5d12 <_printf_i+0x126>
    5dd2:	6923      	ldr	r3, [r4, #16]
    5dd4:	462a      	mov	r2, r5
    5dd6:	4639      	mov	r1, r7
    5dd8:	4630      	mov	r0, r6
    5dda:	47c0      	blx	r8
    5ddc:	3001      	adds	r0, #1
    5dde:	d0a2      	beq.n	5d26 <_printf_i+0x13a>
    5de0:	6823      	ldr	r3, [r4, #0]
    5de2:	079b      	lsls	r3, r3, #30
    5de4:	d507      	bpl.n	5df6 <_printf_i+0x20a>
    5de6:	2500      	movs	r5, #0
    5de8:	f104 0919 	add.w	r9, r4, #25
    5dec:	68e3      	ldr	r3, [r4, #12]
    5dee:	9a03      	ldr	r2, [sp, #12]
    5df0:	1a9b      	subs	r3, r3, r2
    5df2:	429d      	cmp	r5, r3
    5df4:	db05      	blt.n	5e02 <_printf_i+0x216>
    5df6:	68e0      	ldr	r0, [r4, #12]
    5df8:	9b03      	ldr	r3, [sp, #12]
    5dfa:	4298      	cmp	r0, r3
    5dfc:	bfb8      	it	lt
    5dfe:	4618      	movlt	r0, r3
    5e00:	e793      	b.n	5d2a <_printf_i+0x13e>
    5e02:	2301      	movs	r3, #1
    5e04:	464a      	mov	r2, r9
    5e06:	4639      	mov	r1, r7
    5e08:	4630      	mov	r0, r6
    5e0a:	47c0      	blx	r8
    5e0c:	3001      	adds	r0, #1
    5e0e:	d08a      	beq.n	5d26 <_printf_i+0x13a>
    5e10:	3501      	adds	r5, #1
    5e12:	e7eb      	b.n	5dec <_printf_i+0x200>
    5e14:	2b00      	cmp	r3, #0
    5e16:	d1a7      	bne.n	5d68 <_printf_i+0x17c>
    5e18:	780b      	ldrb	r3, [r1, #0]
    5e1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5e1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5e22:	e765      	b.n	5cf0 <_printf_i+0x104>
    5e24:	0000742a 	.word	0x0000742a
    5e28:	00007419 	.word	0x00007419
    5e2c:	00000000 	.word	0x00000000

00005e30 <memchr>:
    5e30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5e34:	2a10      	cmp	r2, #16
    5e36:	db2b      	blt.n	5e90 <memchr+0x60>
    5e38:	f010 0f07 	tst.w	r0, #7
    5e3c:	d008      	beq.n	5e50 <memchr+0x20>
    5e3e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5e42:	3a01      	subs	r2, #1
    5e44:	428b      	cmp	r3, r1
    5e46:	d02d      	beq.n	5ea4 <memchr+0x74>
    5e48:	f010 0f07 	tst.w	r0, #7
    5e4c:	b342      	cbz	r2, 5ea0 <memchr+0x70>
    5e4e:	d1f6      	bne.n	5e3e <memchr+0xe>
    5e50:	b4f0      	push	{r4, r5, r6, r7}
    5e52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5e56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    5e5a:	f022 0407 	bic.w	r4, r2, #7
    5e5e:	f07f 0700 	mvns.w	r7, #0
    5e62:	2300      	movs	r3, #0
    5e64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5e68:	3c08      	subs	r4, #8
    5e6a:	ea85 0501 	eor.w	r5, r5, r1
    5e6e:	ea86 0601 	eor.w	r6, r6, r1
    5e72:	fa85 f547 	uadd8	r5, r5, r7
    5e76:	faa3 f587 	sel	r5, r3, r7
    5e7a:	fa86 f647 	uadd8	r6, r6, r7
    5e7e:	faa5 f687 	sel	r6, r5, r7
    5e82:	b98e      	cbnz	r6, 5ea8 <memchr+0x78>
    5e84:	d1ee      	bne.n	5e64 <memchr+0x34>
    5e86:	bcf0      	pop	{r4, r5, r6, r7}
    5e88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5e8c:	f002 0207 	and.w	r2, r2, #7
    5e90:	b132      	cbz	r2, 5ea0 <memchr+0x70>
    5e92:	f810 3b01 	ldrb.w	r3, [r0], #1
    5e96:	3a01      	subs	r2, #1
    5e98:	ea83 0301 	eor.w	r3, r3, r1
    5e9c:	b113      	cbz	r3, 5ea4 <memchr+0x74>
    5e9e:	d1f8      	bne.n	5e92 <memchr+0x62>
    5ea0:	2000      	movs	r0, #0
    5ea2:	4770      	bx	lr
    5ea4:	3801      	subs	r0, #1
    5ea6:	4770      	bx	lr
    5ea8:	2d00      	cmp	r5, #0
    5eaa:	bf06      	itte	eq
    5eac:	4635      	moveq	r5, r6
    5eae:	3803      	subeq	r0, #3
    5eb0:	3807      	subne	r0, #7
    5eb2:	f015 0f01 	tst.w	r5, #1
    5eb6:	d107      	bne.n	5ec8 <memchr+0x98>
    5eb8:	3001      	adds	r0, #1
    5eba:	f415 7f80 	tst.w	r5, #256	; 0x100
    5ebe:	bf02      	ittt	eq
    5ec0:	3001      	addeq	r0, #1
    5ec2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5ec6:	3001      	addeq	r0, #1
    5ec8:	bcf0      	pop	{r4, r5, r6, r7}
    5eca:	3801      	subs	r0, #1
    5ecc:	4770      	bx	lr
    5ece:	bf00      	nop

00005ed0 <_realloc_r>:
    5ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ed2:	4607      	mov	r7, r0
    5ed4:	4614      	mov	r4, r2
    5ed6:	460e      	mov	r6, r1
    5ed8:	b921      	cbnz	r1, 5ee4 <_realloc_r+0x14>
    5eda:	4611      	mov	r1, r2
    5edc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5ee0:	f7ff bbf4 	b.w	56cc <_malloc_r>
    5ee4:	b922      	cbnz	r2, 5ef0 <_realloc_r+0x20>
    5ee6:	f7ff fba3 	bl	5630 <_free_r>
    5eea:	4625      	mov	r5, r4
    5eec:	4628      	mov	r0, r5
    5eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ef0:	f000 f814 	bl	5f1c <_malloc_usable_size_r>
    5ef4:	4284      	cmp	r4, r0
    5ef6:	d90f      	bls.n	5f18 <_realloc_r+0x48>
    5ef8:	4621      	mov	r1, r4
    5efa:	4638      	mov	r0, r7
    5efc:	f7ff fbe6 	bl	56cc <_malloc_r>
    5f00:	4605      	mov	r5, r0
    5f02:	2800      	cmp	r0, #0
    5f04:	d0f2      	beq.n	5eec <_realloc_r+0x1c>
    5f06:	4631      	mov	r1, r6
    5f08:	4622      	mov	r2, r4
    5f0a:	f7ff fb64 	bl	55d6 <memcpy>
    5f0e:	4631      	mov	r1, r6
    5f10:	4638      	mov	r0, r7
    5f12:	f7ff fb8d 	bl	5630 <_free_r>
    5f16:	e7e9      	b.n	5eec <_realloc_r+0x1c>
    5f18:	4635      	mov	r5, r6
    5f1a:	e7e7      	b.n	5eec <_realloc_r+0x1c>

00005f1c <_malloc_usable_size_r>:
    5f1c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    5f20:	2800      	cmp	r0, #0
    5f22:	f1a0 0004 	sub.w	r0, r0, #4
    5f26:	bfbc      	itt	lt
    5f28:	580b      	ldrlt	r3, [r1, r0]
    5f2a:	18c0      	addlt	r0, r0, r3
    5f2c:	4770      	bx	lr
    5f2e:	0000      	movs	r0, r0
    5f30:	2a2a2a2a 	.word	0x2a2a2a2a
    5f34:	2a2a2a2a 	.word	0x2a2a2a2a
    5f38:	2a2a2a2a 	.word	0x2a2a2a2a
    5f3c:	2a2a2a2a 	.word	0x2a2a2a2a
    5f40:	2a2a2a2a 	.word	0x2a2a2a2a
    5f44:	2a2a2a2a 	.word	0x2a2a2a2a
    5f48:	2a2a2a2a 	.word	0x2a2a2a2a
    5f4c:	2a2a2a2a 	.word	0x2a2a2a2a
    5f50:	2a2a2a2a 	.word	0x2a2a2a2a
    5f54:	2a2a2a2a 	.word	0x2a2a2a2a
    5f58:	2a2a2a2a 	.word	0x2a2a2a2a
    5f5c:	2a2a2a2a 	.word	0x2a2a2a2a
    5f60:	2a2a2a2a 	.word	0x2a2a2a2a
    5f64:	2a2a2a2a 	.word	0x2a2a2a2a
    5f68:	00002a2a 	.word	0x00002a2a
    5f6c:	2a2a2a2a 	.word	0x2a2a2a2a
    5f70:	2a2a2a2a 	.word	0x2a2a2a2a
    5f74:	2a2a2a2a 	.word	0x2a2a2a2a
    5f78:	532a2a2a 	.word	0x532a2a2a
    5f7c:	4b434154 	.word	0x4b434154
    5f80:	45564f20 	.word	0x45564f20
    5f84:	4f4c4652 	.word	0x4f4c4652
    5f88:	45442057 	.word	0x45442057
    5f8c:	54434554 	.word	0x54434554
    5f90:	2a2a4445 	.word	0x2a2a4445
    5f94:	2a2a2a2a 	.word	0x2a2a2a2a
    5f98:	2a2a2a2a 	.word	0x2a2a2a2a
    5f9c:	2a2a2a2a 	.word	0x2a2a2a2a
    5fa0:	2a2a2a2a 	.word	0x2a2a2a2a
    5fa4:	00002a2a 	.word	0x00002a2a
    5fa8:	73615420 	.word	0x73615420
    5fac:	6148206b 	.word	0x6148206b
    5fb0:	656c646e 	.word	0x656c646e
    5fb4:	25202d20 	.word	0x25202d20
    5fb8:	23232064 	.word	0x23232064
    5fbc:	61542023 	.word	0x61542023
    5fc0:	4e206b73 	.word	0x4e206b73
    5fc4:	20656d61 	.word	0x20656d61
    5fc8:	7325202d 	.word	0x7325202d
    5fcc:	00000000 	.word	0x00000000
    5fd0:	6e6e7552 	.word	0x6e6e7552
    5fd4:	20676e69 	.word	0x20676e69
    5fd8:	70736944 	.word	0x70736944
    5fdc:	68637461 	.word	0x68637461
    5fe0:	73615420 	.word	0x73615420
    5fe4:	7573206b 	.word	0x7573206b
    5fe8:	73656363 	.word	0x73656363
    5fec:	6c756673 	.word	0x6c756673
    5ff0:	0000796c 	.word	0x0000796c

00005ff4 <ModemCmdData>:
    5ff4:	00000000 00006590 00000000 00000c69     .....e......i...
    6004:	00000000 00000001 00006594 00020003     .........e......
    6014:	00000c41 00000009 00000002 00006598     A............e..
    6024:	000f0008 00000c6d 0000001b 00000003     ....m...........
    6034:	000065a4 0003000c 00000c69 00000013     .e......i.......
    6044:	00000004 000065b4 000c0008 00000c69     .....e......i...
    6054:	00000018 00000005 000065c0 00080005     .........e......
    6064:	00000c69 00000011 00000006 000065cc     i............e..
    6074:	000b000a 00000c69 00000019 00000007     ....i...........
    6084:	000065d8 0015000a 00000c69 00000023     .e......i...#...
    6094:	00000008 000065e4 00020005 00000c69     .....e......i...
    60a4:	0000000b 00000009 000065ec 000c0027     .........e..'...
    60b4:	00000d91 00000037 0000000a 00006614     ....7........f..
    60c4:	00020012 00000c91 00000018 0000000b     ................
    60d4:	00006628 00020012 00000c91 00000018     (f..............
    60e4:	0000000c 0000663c 00020012 00000c91     ....<f..........
    60f4:	00000018 0000000d 00006650 00020012     ........Pf......
    6104:	00000c91 00000018 0000000e 00006664     ............df..
    6114:	00020012 00000c91 00000018 0000000f     ................
    6124:	00006678 00020012 00000c91 00000018     xf..............
    6134:	00000010 0000668c 00020012 00000c91     .....f..........
    6144:	00000018 00000011 000066a0 00020012     .........f......
    6154:	00000c91 00000018 00000012 000066b4     .............f..
    6164:	00020012 00000c91 00000018 00000013     ................
    6174:	000066c8 00020013 00000c91 00000019     .f..............
    6184:	00000014 000066dc 0002001f 00000d0d     .....f..........
    6194:	00000025 00000015 000066fc 00020023     %........f..#...
    61a4:	00000d39 00000029 00000016 00006720     9...)....... g..
    61b4:	0002001a 00000d65 00000020 00000017     ....e... .......
    61c4:	20000000 00070011 00000dcd 0000001c     ... ............
    61d4:	00000018 200001ac 00bf003a 00000e59     ....... :...Y...
    61e4:	000000fd 00000019 0000673c 00020010     ........<g......
    61f4:	00000e59 00000016 0000001a 00006750     Y...........Pg..
    6204:	00020010 00000c69 00000016 0000001b     ....i...........
    6214:	00006764 0002000b 00000c69 00000011     dg......i.......
	...
    64a4:	73736553 206e6f69 2d204449 00003120     Session ID - 1..
    64b4:	73736553 206e6f69 2d204449 00003220     Session ID - 2..
    64c4:	73736553 206e6f69 2d204449 00003320     Session ID - 3..
    64d4:	73736553 206e6f69 2d204449 00003420     Session ID - 4..
    64e4:	73736553 206e6f69 2d204449 00003520     Session ID - 5..
    64f4:	73736553 206e6f69 2d204449 00003620     Session ID - 6..
    6504:	73736553 206e6f69 2d204449 00003720     Session ID - 7..
    6514:	73736553 206e6f69 2d204449 00003820     Session ID - 8..
    6524:	73736553 206e6f69 76204449 65756c61     Session ID value
    6534:	63786520 73646565 65687420 78616d20      exceeds the max
    6544:	6c617620 00006575 5454484b 45482050      value..KHTTP HE
    6554:	52454441 72745320 20676e69 00207369     ADER String is .
    6564:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    6574:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    6584:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    6594:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    65a4:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    65b4:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    65c4:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    65d4:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    65e4:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    65f4:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    6604:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    6614:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    6624:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6634:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    6644:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    6654:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    6664:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    6674:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6684:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    6694:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    66a4:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    66b4:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    66c4:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    66d4:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    66e4:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    66f4:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    6704:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    6714:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    6724:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    6734:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    6744:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    6754:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    6764:	432b5441 54544147 000d303d 6f727245     AT+CGATT=0..Erro
    6774:	48203a72 20706165 6f6c6c61 69746163     r: Heap allocati
    6784:	66206e6f 7020726f 65737261 74616420     on for parse dat
    6794:	75622061 72656666 69616620 0064656c     a buffer failed.
    67a4:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    67b4:	76206f74 66697265 68742079 6f632065     to verify the co
    67c4:	6e616d6d 74732064 676e6972 72756420     mmand string dur
    67d4:	20676e69 73726170 00676e69 6f727245     ing parsing.Erro
    67e4:	4e203a72 6120746f 20656c62 72206f74     r: Not able to r
    67f4:	20646165 61746164 6f726620 6572206d     ead data from re
    6804:	76696563 69722065 6220676e 65666675     ceive ring buffe
    6814:	75642072 676e6972 72617020 00726573     r during parser.
    6824:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    6834:	69746163 66206e6f 7220726f 6f707365     cation for respo
    6844:	2065736e 61746164 66756220 20726566     nse data buffer 
    6854:	6c696166 00006465 65707845 64657463     failed..Expected
    6864:	646f6d20 72206d65 6f707365 2065736e      modem response 
    6874:	6e207369 7220746f 69656365 00646576     is not received.
    6884:	52206f4e 6f707365 2065736e 6d6f7266     No Response from
    6894:	62655720 76655320 2e2e7265 6f502e2e      Web Sever....Po
    68a4:	6e697473 61642067 74206174 6573206f     sting data to se
    68b4:	20726576 66207369 656c6961 00000064     ver is failed...
    68c4:	66726550 696d726f 7420676e 45206568     Performing the E
    68d4:	726f7272 63655220 7265766f 72502079     rror Recovery Pr
    68e4:	6465636f 73657275 00002e2e 736f6c43     ocedures....Clos
    68f4:	61206465 5220646e 65706f65 2064656e     ed and Reopened 
    6904:	20656874 73736573 2e6e6f69 2e2e2e2e     the session.....
    6914:	0000002e 6f747541 63657220 7265766f     ....Auto recover
    6924:	6f632079 656c706d 2e646574 2e2e2e2e     y completed.....
    6934:	0000002e 6f727245 203a2072 636f7250     ....Error : Proc
    6944:	20737365 70736572 65736e6f 69616620     ess response fai
    6954:	2064656c 614c202d 43207473 616d6d6f     led - Last Comma
    6964:	4920646e 6c61766e 00006469 45444f4d     nd Invalid..MODE
    6974:	4144204d 55204154 20545241 52455328     M DATA UART (SER
    6984:	334d4f43 6e692029 61697469 657a696c     COM3) initialize
    6994:	00000064 43524553 20334d4f 4f495250     d...SERCOM3 PRIO
    69a4:	59544952 00000000 6c696146 74206465     RITY....Failed t
    69b4:	6e69206f 61697469 657a696c 65687420     o initialize the
    69c4:	444f4d20 44204d45 20415441 54524155      MODEM DATA UART
    69d4:	00000000 746e6553 65687420 61694420     ....Sent the Dia
    69e4:	61642067 74206174 7854206f 73615420     g data to Tx Tas
    69f4:	0000006b 6c696146 74206465 6573206f     k...Failed to se
    6a04:	7420746e 44206568 20676169 61746164     nt the Diag data
    6a14:	206f7420 54207854 006b7361 6c756f43      to Tx Task.Coul
    6a24:	74276e64 74626f20 206e6961 20656874     dn't obtain the 
    6a34:	616d6573 726f6870 00000065 6e6e7552     semaphore...Runn
    6a44:	20676e69 67616944 6f725020 73736563     ing Diag Process
    6a54:	73615420 7573206b 73656363 6c756673      Task successful
    6a64:	0000796c 6e6e7552 20676e69 65646f4d     ly..Running Mode
    6a74:	7250206d 7365636f 61542073 73206b73     m Process Task s
    6a84:	65636375 75667373 00796c6c 41206e49     uccessfully.In A
    6a94:	61682054 656c646e 000a0d72 43206e49     T handler...In C
    6aa4:	204e5347 646e6168 0072656c 6c430a0d     GSN handler...Cl
    6ab4:	6465736f 206e6120 69746361 63206576     osed an active c
    6ac4:	656e6e6f 6f697463 0000006e 72656854     onnection...Ther
    6ad4:	73692065 206f6e20 6e6e6f63 69746365     e is no connecti
    6ae4:	65206e6f 62617473 6873696c 77206465     on established w
    6af4:	20687469 73696874 73657320 6e6f6973     ith this session
    6b04:	2e444920 00002e2e 63656843 676e696b      ID.....Checking
    6b14:	726f6620 206e6120 69746361 63206576      for an active c
    6b24:	656e6e6f 6f697463 6977206e 6e206874     onnection with n
    6b34:	20747865 73736573 206e6f69 2e2e4449     ext session ID..
    6b44:	00000a2e 4b206e49 54544150 204e5245     ....In KPATTERN 
    6b54:	646e6168 0072656c 4b206e49 43584e43     handler.In KCNXC
    6b64:	68204746 6c646e61 00007265 4b206e49     FG handler..In K
    6b74:	54584e43 52454d49 6e616820 72656c64     CNXTIMER handler
    6b84:	00000000 4b206e49 50545448 20474643     ....In KHTTPCFG 
    6b94:	646e6168 0072656c 4b206e49 50545448     handler.In KHTTP
    6ba4:	41454820 20524544 646e6168 0072656c      HEADER handler.
    6bb4:	4e4e4f43 00544345 64616548 52207265     CONNECT.Header R
    6bc4:	6f707365 2065736e 00006b4f 64616548     esponse Ok..Head
    6bd4:	52207265 6f707365 2065736e 20746f4e     er Response Not 
    6be4:	00006b4f 000a0a0d 54206e49 494d5245     Ok......In TERMI
    6bf4:	4554414e 41454820 20524544 646e6168     NATE HEADER hand
    6c04:	0072656c 69746f4e 61636966 6e6f6974     ler.Notification
    6c14:	63655220 65766965 6f742064 20785220      Received to Rx 
    6c24:	6b736154 6f726620 5349206d 00000052     Task from ISR...
    6c34:	70736552 65736e6f 6e656c20 00687467     Response length.
    6c44:	63637553 66737365 796c6c75 72615020     Successfully Par
    6c54:	20646573 20656874 7473616c 6d6f6320     sed the last com
    6c64:	646e616d 00000000 7374754f 20656469     mand....Outside 
    6c74:	696c6f73 65746963 61702064 72657372     solicited parser
    6c84:	00000000 69746f4e 61636966 6e6f6974     ....Notification
    6c94:	746f4e20 63655220 65766965 6f742064      Not Received to
    6ca4:	20785220 6b736154 00000000 6b736154      Rx Task....Task
    6cb4:	00444920 6e617254 74696d73 20646574      ID.Transmitted 
    6cc4:	6f632061 6e616d6d 6f742064 646f4d20     a command to Mod
    6cd4:	00006d65 73207854 61697265 6544206c     em..Tx serial De
    6ce4:	20677562 656e6f44 00000a0d 44207852     bug Done....Rx D
    6cf4:	0d656e6f 0000000a 25207325 00000073     one.....%s %s...
    6d04:	2d207325 20642520 00000a0d 682f2e2e     %s - %d ....../h
    6d14:	692f6c61 756c636e 682f6564 775f6c61     al/include/hal_w
    6d24:	682e7464 00000000 20544457 74696e49     dt.h....WDT Init
    6d34:	696c6169 00646573 20544457 6c696146     ialised.WDT Fail
    6d44:	74206465 6e69206f 61697469 657a696c     ed to initialize
    6d54:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    6d64:	615f6c61 79735f63 632e636e 00000000     al_ac_sync.c....
    6d74:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
    6d84:	735f6364 2e636e79 00000063 682f2e2e     dc_sync.c...../h
    6d94:	732f6c61 682f6372 645f6c61 735f6361     al/src/hal_dac_s
    6da4:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    6db4:	682f6372 665f6c61 6873616c 0000632e     rc/hal_flash.c..
    6dc4:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
    6dd4:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
    6de4:	682f6372 745f6c61 72656d69 0000632e     rc/hal_timer.c..
    6df4:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    6e04:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...
    6e14:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    6e24:	6974752f 725f736c 62676e69 65666675     /utils_ringbuffe
    6e34:	00632e72 682f2e2e 612f6c70 70682f63     r.c.../hpl/ac/hp
    6e44:	63615f6c 0000632e                       l_ac.c..

00006e4c <_adcs>:
    6e4c:	00c00000 00830002 00001900 00000000     ................
    6e5c:	00000000 00010001 00000000 00000000     ................
	...
    6e78:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    6e88:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    6e98:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00006ea8 <_cfgs>:
	...

00006fa8 <user_mux_confs>:
	...

00006fec <channel_confs>:
	...

0000702c <interrupt_cfg>:
	...
    70ac:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    70bc:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    70cc:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    70dc:	43000000 43000400                       ...C...C

000070e4 <_usarts>:
    70e4:	00000003 40200004 00030000 00700002     ...... @......p.
    70f4:	0000f62b 00000000 00000004 40300184     +.............0@
    7104:	00030300 00700002 0000ff2e 00000000     ......p.........
    7114:	00000005 40300004 00030000 00700002     ......0@......p.
    7124:	0000f62b 00000000                       +.......

0000712c <_i2cms>:
	...

00007144 <sercomspi_regs>:
	...
    7158:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    7168:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    7178:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00007188 <_tccs>:
    7188:	00000000 00000300 00000000 00000000     ................
    7198:	00001770 00000000 00000000 00000000     p...............
    71a8:	00000000 00000001 00000300 00000000     ................
    71b8:	00000000 00001770 00000000 00000000     ....p...........
	...
    71d0:	00000002 00000300 00000000 00000000     ................
    71e0:	00001770 00000000 00000000 00000000     p...............
    71f0:	00000000 00000003 00000300 00000000     ................
    7200:	00000000 00001770 00000000 00000000     ....p...........
	...
    7218:	00000004 00000300 00000000 00000000     ................
    7228:	00001770 00000000 00000000 00000000     p...............
    7238:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    7248:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    7258:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    7268:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    7278:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    7288:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    7298:	26207854 20785220 75657551 61207365     Tx & Rx Queues a
    72a8:	63206572 74616572 00006465 616d6553     re created..Sema
    72b8:	726f6870 61207365 63206572 74616572     phores are creat
    72c8:	00006465 70736944 68637461 6b736154     ed..DispatchTask
    72d8:	00000000 65646f4d 7361546d 0000006b     ....ModemTask...
    72e8:	65646f4d 5478526d 006b7361 65646f4d     ModemRxTask.Mode
    72f8:	6f72506d 73736563 6b736154 00000000     mProcessTask....
    7308:	65646f4d 6169446d 73615467 0000006b     ModemDiagTask...
    7318:	63637553 66737365 796c6c75 65724320     Successfully Cre
    7328:	64657461 65687420 73615420 0000736b     ated the Tasks..
    7338:	65657246 4f545220 63532053 75646568     Free RTOS Schedu
    7348:	2072656c 20746f6e 72617473 00646574     ler not started.
    7358:	6c696146 74206465 7263206f 65746165     Failed to create
    7368:	73617420 0000736b 6f727245 53203a72      tasks..Error: S
    7378:	64656863 72656c75 69786520 00646574     cheduler exited.
    7388:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
    7398:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.

000073a8 <__sf_fake_stderr>:
	...

000073c8 <__sf_fake_stdin>:
	...

000073e8 <__sf_fake_stdout>:
	...
    7408:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7418:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7428:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7438:	00006665                                ef..

0000743c <_init>:
    743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    743e:	bf00      	nop
    7440:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7442:	bc08      	pop	{r3}
    7444:	469e      	mov	lr, r3
    7446:	4770      	bx	lr

00007448 <__init_array_start>:
    7448:	00000289 	.word	0x00000289

0000744c <_fini>:
    744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    744e:	bf00      	nop
    7450:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7452:	bc08      	pop	{r3}
    7454:	469e      	mov	lr, r3
    7456:	4770      	bx	lr

00007458 <__fini_array_start>:
    7458:	00000265 	.word	0x00000265
