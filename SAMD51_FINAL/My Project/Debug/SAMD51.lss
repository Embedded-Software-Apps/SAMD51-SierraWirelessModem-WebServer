
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e0c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000015c  20000000  00004e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002015c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002015c  2**0
                  CONTENTS
  4 .bss          00001e90  20000160  00004f70  00020160  2**4
                  ALLOC
  5 .stack        00010000  20001ff0  00006e00  00020160  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002018a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005287b  00000000  00000000  000201e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007da9  00000000  00000000  00072a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a197  00000000  00000000  0007a807  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000019e0  00000000  00000000  0009499e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001ff0  00000000  00000000  0009637e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00016b5d  00000000  00000000  0009836e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002762d  00000000  00000000  000aeecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001063be  00000000  00000000  000d64f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000045ec  00000000  00000000  001dc8b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
TickType_t xTicksToWait = pdMS_TO_TICKS(6100);
char printBuff[50];


void ModemTask( void *ModemTaskParam)
{
       0:	f0 1f 01 20 8d 06 00 00 89 06 00 00 89 06 00 00     ... ............
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
        {
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
        }
        
        xQueueReceiveStatus = xQueueReceive( xDataQueue, &ReceivedMsg, xTicksToWait );
      10:	89 06 00 00 89 06 00 00 89 06 00 00 00 00 00 00     ................
	...
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
      2c:	e1 2a 00 00 89 06 00 00 00 00 00 00 81 2b 00 00     .*...........+..
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
      3c:	e5 2b 00 00 89 06 00 00 89 06 00 00 89 06 00 00     .+..............
        
        if(xQueueReceiveStatus == pdPASS)
        {
            sprintf(printBuff,"Received ADC Value is %d\r\n",ReceivedMsg.AdcReading);
            SerialDebugPrint((uint8_t*)printBuff,sizeof(printBuff)); 
      4c:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
      5c:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
      6c:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
      7c:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
      8c:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
      9c:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
      ac:	89 06 00 00 89 06 00 00 99 1c 00 00 ad 1c 00 00     ................
      bc:	29 1a 00 00 35 1a 00 00 41 1a 00 00 4d 1a 00 00     )...5...A...M...
      cc:	59 1a 00 00 89 06 00 00 89 06 00 00 89 06 00 00     Y...............
      dc:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
      ec:	89 06 00 00 00 00 00 00 a1 1d 00 00 89 06 00 00     ................
      fc:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
     10c:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
     11c:	89 06 00 00 89 06 00 00 89 06 00 00 d1 02 00 00     ................
     12c:	f1 02 00 00 11 03 00 00 89 06 00 00 89 06 00 00     ................
     13c:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
     14c:	89 06 00 00 1d 06 00 00 89 06 00 00 00 00 00 00     ................
	...
     180:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
     190:	00 00 00 00 4d 23 00 00 89 06 00 00 89 06 00 00     ....M#..........
     1a0:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
     1b0:	61 23 00 00 89 06 00 00 89 06 00 00 89 06 00 00     a#..............
     1c0:	89 06 00 00 75 23 00 00 89 06 00 00 89 06 00 00     ....u#..........
     1d0:	89 06 00 00 89 23 00 00 89 06 00 00 89 06 00 00     .....#..........
     1e0:	9d 23 00 00 89 06 00 00 89 06 00 00 91 28 00 00     .#...........(..
     1f0:	a5 28 00 00 b9 28 00 00 cd 28 00 00 e1 28 00 00     .(...(...(...(..
     200:	f5 28 00 00 00 00 00 00 00 00 00 00 89 06 00 00     .(..............
     210:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
     220:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
     230:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
     240:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
     250:	89 06 00 00 89 06 00 00 89 06 00 00 89 06 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000160 	.word	0x20000160
     280:	00000000 	.word	0x00000000
     284:	00004e0c 	.word	0x00004e0c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00004e0c 	.word	0x00004e0c
     2c4:	20000164 	.word	0x20000164
     2c8:	00004e0c 	.word	0x00004e0c
     2cc:	00000000 	.word	0x00000000

000002d0 <SERCOM3_0_Handler>:
	SerialDebugPrint((uint8_t*)"Modem Error Callback\r\n",22);
	hri_sercomusart_clear_INTFLAG_ERROR_bit(device);
}

void SERCOM3_0_Handler( void )
{
     2d0:	b508      	push	{r3, lr}
	/* DRE: Data Register Empty */
	SerialDebugPrint((uint8_t*)"Modem Tx Data Reg Empty CallBack\r\n",33);
     2d2:	2121      	movs	r1, #33	; 0x21
     2d4:	4803      	ldr	r0, [pc, #12]	; (2e4 <SERCOM3_0_Handler+0x14>)
     2d6:	4b04      	ldr	r3, [pc, #16]	; (2e8 <SERCOM3_0_Handler+0x18>)
     2d8:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     2da:	2201      	movs	r2, #1
     2dc:	4b03      	ldr	r3, [pc, #12]	; (2ec <SERCOM3_0_Handler+0x1c>)
     2de:	761a      	strb	r2, [r3, #24]
     2e0:	bd08      	pop	{r3, pc}
     2e2:	bf00      	nop
     2e4:	00004664 	.word	0x00004664
     2e8:	000005d9 	.word	0x000005d9
     2ec:	41014000 	.word	0x41014000

000002f0 <SERCOM3_1_Handler>:
	//SERCOM3->USART.INTENCLR.bit.DRE = 1;
	hri_sercomusart_clear_interrupt_DRE_bit(SERCOM3);
}

void SERCOM3_1_Handler(void )
{
     2f0:	b508      	push	{r3, lr}
	SerialDebugPrint((uint8_t*)"Modem Tx Complete Callback\r\n",19);
     2f2:	2113      	movs	r1, #19
     2f4:	4803      	ldr	r0, [pc, #12]	; (304 <SERCOM3_1_Handler+0x14>)
     2f6:	4b04      	ldr	r3, [pc, #16]	; (308 <SERCOM3_1_Handler+0x18>)
     2f8:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     2fa:	2202      	movs	r2, #2
     2fc:	4b03      	ldr	r3, [pc, #12]	; (30c <SERCOM3_1_Handler+0x1c>)
     2fe:	761a      	strb	r2, [r3, #24]
     300:	bd08      	pop	{r3, pc}
     302:	bf00      	nop
     304:	00004688 	.word	0x00004688
     308:	000005d9 	.word	0x000005d9
     30c:	41014000 	.word	0x41014000

00000310 <SERCOM3_2_Handler>:
	hri_sercomusart_clear_interrupt_TXC_bit(SERCOM3);
}

void SERCOM3_2_Handler( void )
{
     310:	b538      	push	{r3, r4, r5, lr}
	SerialDebugPrint((uint8_t*)"Modem Rx Complete CallBack\r\n",19);
     312:	2113      	movs	r1, #19
     314:	480d      	ldr	r0, [pc, #52]	; (34c <SERCOM3_2_Handler+0x3c>)
     316:	4b0e      	ldr	r3, [pc, #56]	; (350 <SERCOM3_2_Handler+0x40>)
     318:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     31a:	2204      	movs	r2, #4
     31c:	4b0d      	ldr	r3, [pc, #52]	; (354 <SERCOM3_2_Handler+0x44>)
     31e:	761a      	strb	r2, [r3, #24]
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM3);
	
	while (!_usart_async_is_byte_received(&MODEM_DATA));
     320:	4d0d      	ldr	r5, [pc, #52]	; (358 <SERCOM3_2_Handler+0x48>)
     322:	4c0e      	ldr	r4, [pc, #56]	; (35c <SERCOM3_2_Handler+0x4c>)
     324:	4628      	mov	r0, r5
     326:	47a0      	blx	r4
     328:	2800      	cmp	r0, #0
     32a:	d0fb      	beq.n	324 <SERCOM3_2_Handler+0x14>
	
	RxDataBuff[RxCnt] = _usart_async_read_byte(&MODEM_DATA);
     32c:	480a      	ldr	r0, [pc, #40]	; (358 <SERCOM3_2_Handler+0x48>)
     32e:	4b0c      	ldr	r3, [pc, #48]	; (360 <SERCOM3_2_Handler+0x50>)
     330:	4798      	blx	r3
	RxCnt++;
     332:	4b0c      	ldr	r3, [pc, #48]	; (364 <SERCOM3_2_Handler+0x54>)
     334:	781b      	ldrb	r3, [r3, #0]
     336:	3301      	adds	r3, #1
     338:	b2db      	uxtb	r3, r3
	
	if(RxCnt > 1)
     33a:	2b01      	cmp	r3, #1
     33c:	d903      	bls.n	346 <SERCOM3_2_Handler+0x36>
	{
		RxCnt = 0;
     33e:	2200      	movs	r2, #0
     340:	4b08      	ldr	r3, [pc, #32]	; (364 <SERCOM3_2_Handler+0x54>)
     342:	701a      	strb	r2, [r3, #0]
     344:	bd38      	pop	{r3, r4, r5, pc}
	RxCnt++;
     346:	4a07      	ldr	r2, [pc, #28]	; (364 <SERCOM3_2_Handler+0x54>)
     348:	7013      	strb	r3, [r2, #0]
     34a:	bd38      	pop	{r3, r4, r5, pc}
     34c:	000046a8 	.word	0x000046a8
     350:	000005d9 	.word	0x000005d9
     354:	41014000 	.word	0x41014000
     358:	20000000 	.word	0x20000000
     35c:	00001fb9 	.word	0x00001fb9
     360:	00001fa7 	.word	0x00001fa7
     364:	2000017c 	.word	0x2000017c

00000368 <ModemUsartOsInit>:
	
	return io_read(io, &RecvdData, length);
}

void ModemUsartOsInit(void)
{
     368:	b530      	push	{r4, r5, lr}
     36a:	b083      	sub	sp, #12
	bool initStatus = false;
	
	initStatus = usart_os_init(&MODEM_USART_DATA, SERCOM3, MODEM_USART_DATA_buffer, 2048, (void *)NULL);
     36c:	4c14      	ldr	r4, [pc, #80]	; (3c0 <ModemUsartOsInit+0x58>)
     36e:	2300      	movs	r3, #0
     370:	9300      	str	r3, [sp, #0]
     372:	f44f 6300 	mov.w	r3, #2048	; 0x800
     376:	4a13      	ldr	r2, [pc, #76]	; (3c4 <ModemUsartOsInit+0x5c>)
     378:	4913      	ldr	r1, [pc, #76]	; (3c8 <ModemUsartOsInit+0x60>)
     37a:	4620      	mov	r0, r4
     37c:	4d13      	ldr	r5, [pc, #76]	; (3cc <ModemUsartOsInit+0x64>)
     37e:	47a8      	blx	r5
     380:	4605      	mov	r5, r0
	usart_os_enable(&MODEM_USART_DATA);
     382:	4620      	mov	r0, r4
     384:	4b12      	ldr	r3, [pc, #72]	; (3d0 <ModemUsartOsInit+0x68>)
     386:	4798      	blx	r3
	
	if(initStatus != 0)
     388:	b97d      	cbnz	r5, 3aa <ModemUsartOsInit+0x42>
		sprintf(printBuff,"SERCOM3 Init Failed. Error %d.\r\n",initStatus);
		SerialDebugPrint(printBuff,sizeof(printBuff));
	}
	else
	{
		sprintf(printBuff,"SERCOM3 Init Success.\r\n");
     38a:	4d12      	ldr	r5, [pc, #72]	; (3d4 <ModemUsartOsInit+0x6c>)
     38c:	4c12      	ldr	r4, [pc, #72]	; (3d8 <ModemUsartOsInit+0x70>)
     38e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     390:	6028      	str	r0, [r5, #0]
     392:	6069      	str	r1, [r5, #4]
     394:	60aa      	str	r2, [r5, #8]
     396:	60eb      	str	r3, [r5, #12]
     398:	cc03      	ldmia	r4!, {r0, r1}
     39a:	6128      	str	r0, [r5, #16]
     39c:	6169      	str	r1, [r5, #20]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     39e:	211e      	movs	r1, #30
     3a0:	4628      	mov	r0, r5
     3a2:	4b0e      	ldr	r3, [pc, #56]	; (3dc <ModemUsartOsInit+0x74>)
     3a4:	4798      	blx	r3
	}	
}
     3a6:	b003      	add	sp, #12
     3a8:	bd30      	pop	{r4, r5, pc}
		sprintf(printBuff,"SERCOM3 Init Failed. Error %d.\r\n",initStatus);
     3aa:	4c0a      	ldr	r4, [pc, #40]	; (3d4 <ModemUsartOsInit+0x6c>)
     3ac:	2201      	movs	r2, #1
     3ae:	490c      	ldr	r1, [pc, #48]	; (3e0 <ModemUsartOsInit+0x78>)
     3b0:	4620      	mov	r0, r4
     3b2:	4b0c      	ldr	r3, [pc, #48]	; (3e4 <ModemUsartOsInit+0x7c>)
     3b4:	4798      	blx	r3
		SerialDebugPrint(printBuff,sizeof(printBuff));
     3b6:	211e      	movs	r1, #30
     3b8:	4620      	mov	r0, r4
     3ba:	4b08      	ldr	r3, [pc, #32]	; (3dc <ModemUsartOsInit+0x74>)
     3bc:	4798      	blx	r3
     3be:	e7f2      	b.n	3a6 <ModemUsartOsInit+0x3e>
     3c0:	20001d8c 	.word	0x20001d8c
     3c4:	2000158c 	.word	0x2000158c
     3c8:	41014000 	.word	0x41014000
     3cc:	0000137d 	.word	0x0000137d
     3d0:	00001475 	.word	0x00001475
     3d4:	20001dd8 	.word	0x20001dd8
     3d8:	000046ec 	.word	0x000046ec
     3dc:	000005d9 	.word	0x000005d9
     3e0:	000046c8 	.word	0x000046c8
     3e4:	00003dd9 	.word	0x00003dd9

000003e8 <ModemUsartOsTest>:


void ModemUsartOsTest(void)
{
     3e8:	b510      	push	{r4, lr}
     3ea:	b084      	sub	sp, #16
	struct io_descriptor *io;
	uint8_t readResp[10];
	uint8_t readCnt;
	uint8_t writeStatus;
	 
	usart_os_get_io(&MODEM_USART_DATA, &io);
     3ec:	a903      	add	r1, sp, #12
     3ee:	4822      	ldr	r0, [pc, #136]	; (478 <ModemUsartOsTest+0x90>)
     3f0:	4b22      	ldr	r3, [pc, #136]	; (47c <ModemUsartOsTest+0x94>)
     3f2:	4798      	blx	r3
	writeStatus = io->write(io,"AT\r\n",4);
     3f4:	9803      	ldr	r0, [sp, #12]
     3f6:	6803      	ldr	r3, [r0, #0]
     3f8:	2204      	movs	r2, #4
     3fa:	4921      	ldr	r1, [pc, #132]	; (480 <ModemUsartOsTest+0x98>)
     3fc:	4798      	blx	r3
	
	if(writeStatus != 0)
     3fe:	f010 0fff 	tst.w	r0, #255	; 0xff
     402:	d028      	beq.n	456 <ModemUsartOsTest+0x6e>
	{
		sprintf(printBuff,"Tx to modem Failed Error %d\r\n",writeStatus);
     404:	4c1f      	ldr	r4, [pc, #124]	; (484 <ModemUsartOsTest+0x9c>)
     406:	b2c2      	uxtb	r2, r0
     408:	491f      	ldr	r1, [pc, #124]	; (488 <ModemUsartOsTest+0xa0>)
     40a:	4620      	mov	r0, r4
     40c:	4b1f      	ldr	r3, [pc, #124]	; (48c <ModemUsartOsTest+0xa4>)
     40e:	4798      	blx	r3
		SerialDebugPrint(printBuff,sizeof(printBuff));
     410:	211e      	movs	r1, #30
     412:	4620      	mov	r0, r4
     414:	4b1e      	ldr	r3, [pc, #120]	; (490 <ModemUsartOsTest+0xa8>)
     416:	4798      	blx	r3
	else
	{
		SerialDebugPrint("Tx to modem Success",21);
	}
	
	delay_ms(1000);
     418:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     41c:	4b1d      	ldr	r3, [pc, #116]	; (494 <ModemUsartOsTest+0xac>)
     41e:	4798      	blx	r3
	readCnt = io->read(io,&readResp,3);
     420:	9803      	ldr	r0, [sp, #12]
     422:	6843      	ldr	r3, [r0, #4]
     424:	2203      	movs	r2, #3
     426:	4669      	mov	r1, sp
     428:	4798      	blx	r3
	
	if(readCnt > 0)
     42a:	b2c0      	uxtb	r0, r0
     42c:	b9c0      	cbnz	r0, 460 <ModemUsartOsTest+0x78>
		sprintf(printBuff,"Read %d chars. Data is %s\r\n",&readResp);
		SerialDebugPrint(printBuff,sizeof(printBuff));
	}
	else
	{
		sprintf(printBuff,"Read Failed.\r\n");
     42e:	4c15      	ldr	r4, [pc, #84]	; (484 <ModemUsartOsTest+0x9c>)
     430:	4b19      	ldr	r3, [pc, #100]	; (498 <ModemUsartOsTest+0xb0>)
     432:	cb07      	ldmia	r3!, {r0, r1, r2}
     434:	6020      	str	r0, [r4, #0]
     436:	6061      	str	r1, [r4, #4]
     438:	60a2      	str	r2, [r4, #8]
     43a:	881a      	ldrh	r2, [r3, #0]
     43c:	789b      	ldrb	r3, [r3, #2]
     43e:	81a2      	strh	r2, [r4, #12]
     440:	73a3      	strb	r3, [r4, #14]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     442:	211e      	movs	r1, #30
     444:	4620      	mov	r0, r4
     446:	4b12      	ldr	r3, [pc, #72]	; (490 <ModemUsartOsTest+0xa8>)
     448:	4798      	blx	r3
	}
	
	delay_ms(5000);	
     44a:	f241 3088 	movw	r0, #5000	; 0x1388
     44e:	4b11      	ldr	r3, [pc, #68]	; (494 <ModemUsartOsTest+0xac>)
     450:	4798      	blx	r3
	
} 
     452:	b004      	add	sp, #16
     454:	bd10      	pop	{r4, pc}
		SerialDebugPrint("Tx to modem Success",21);
     456:	2115      	movs	r1, #21
     458:	4810      	ldr	r0, [pc, #64]	; (49c <ModemUsartOsTest+0xb4>)
     45a:	4b0d      	ldr	r3, [pc, #52]	; (490 <ModemUsartOsTest+0xa8>)
     45c:	4798      	blx	r3
     45e:	e7db      	b.n	418 <ModemUsartOsTest+0x30>
		sprintf(printBuff,"Read %d chars. Data is %s\r\n",&readResp);
     460:	4c08      	ldr	r4, [pc, #32]	; (484 <ModemUsartOsTest+0x9c>)
     462:	466a      	mov	r2, sp
     464:	490e      	ldr	r1, [pc, #56]	; (4a0 <ModemUsartOsTest+0xb8>)
     466:	4620      	mov	r0, r4
     468:	4b08      	ldr	r3, [pc, #32]	; (48c <ModemUsartOsTest+0xa4>)
     46a:	4798      	blx	r3
		SerialDebugPrint(printBuff,sizeof(printBuff));
     46c:	211e      	movs	r1, #30
     46e:	4620      	mov	r0, r4
     470:	4b07      	ldr	r3, [pc, #28]	; (490 <ModemUsartOsTest+0xa8>)
     472:	4798      	blx	r3
     474:	e7e9      	b.n	44a <ModemUsartOsTest+0x62>
     476:	bf00      	nop
     478:	20001d8c 	.word	0x20001d8c
     47c:	000014a1 	.word	0x000014a1
     480:	00004524 	.word	0x00004524
     484:	20001dd8 	.word	0x20001dd8
     488:	00004704 	.word	0x00004704
     48c:	00003dd9 	.word	0x00003dd9
     490:	000005d9 	.word	0x000005d9
     494:	00000fad 	.word	0x00000fad
     498:	00004754 	.word	0x00004754
     49c:	00004724 	.word	0x00004724
     4a0:	00004738 	.word	0x00004738

000004a4 <modemPowerInit>:
{
	return ModemPwrState;
}

void modemPowerInit(void)
{
     4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4a8:	4c29      	ldr	r4, [pc, #164]	; (550 <modemPowerInit+0xac>)
     4aa:	f44f 3580 	mov.w	r5, #65536	; 0x10000
     4ae:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4b2:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
     4b6:	f8c4 70a8 	str.w	r7, [r4, #168]	; 0xa8
     4ba:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 55c <modemPowerInit+0xb8>
     4be:	f8c4 80a8 	str.w	r8, [r4, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4c2:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     4c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ca:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4ce:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4d2:	f894 30d0 	ldrb.w	r3, [r4, #208]	; 0xd0
     4d6:	f043 0304 	orr.w	r3, r3, #4
     4da:	f884 30d0 	strb.w	r3, [r4, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4de:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4e2:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	gpio_set_pin_direction(MODEM_ON, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(MODEM_ON, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_pull_mode(MODEM_ON, GPIO_PULL_UP);
	gpio_set_pin_level(MODEM_ON,false);
	delay_ms(1000);
     4e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     4ea:	4e1a      	ldr	r6, [pc, #104]	; (554 <modemPowerInit+0xb0>)
     4ec:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
     4f2:	60a3      	str	r3, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4f4:	62a7      	str	r7, [r4, #40]	; 0x28
     4f6:	4a18      	ldr	r2, [pc, #96]	; (558 <modemPowerInit+0xb4>)
     4f8:	62a2      	str	r2, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4fa:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     4fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     502:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     506:	6063      	str	r3, [r4, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     508:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
     50c:	f042 0204 	orr.w	r2, r2, #4
     510:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     514:	61a3      	str	r3, [r4, #24]
     516:	61a3      	str	r3, [r4, #24]

	gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_pull_mode(MODEM_RESET, GPIO_PULL_UP);
	gpio_set_pin_level(MODEM_RESET,true);
	delay_ms(1000);
     518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     51c:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     51e:	60a5      	str	r5, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     520:	62a7      	str	r7, [r4, #40]	; 0x28
     522:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     526:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     52a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     52e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     532:	6065      	str	r5, [r4, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     534:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
     538:	f043 0304 	orr.w	r3, r3, #4
     53c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     540:	61a5      	str	r5, [r4, #24]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     542:	6165      	str	r5, [r4, #20]

	gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
	gpio_set_pin_pull_mode(MODEM_DTR, GPIO_PULL_UP);
	gpio_set_pin_level(MODEM_DTR,false);
	delay_ms(7000);
     544:	f641 3058 	movw	r0, #7000	; 0x1b58
     548:	47b0      	blx	r6
     54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     54e:	bf00      	nop
     550:	41008000 	.word	0x41008000
     554:	00000fad 	.word	0x00000fad
     558:	c0000008 	.word	0xc0000008
     55c:	c0000001 	.word	0xc0000001

00000560 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"

int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     564:	4604      	mov	r4, r0
     566:	460f      	mov	r7, r1
     568:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     56a:	4d0c      	ldr	r5, [pc, #48]	; (59c <usart_async_write+0x3c>)
     56c:	4620      	mov	r0, r4
     56e:	47a8      	blx	r5
     570:	2800      	cmp	r0, #0
     572:	d0fb      	beq.n	56c <usart_async_write+0xc>
     574:	3f01      	subs	r7, #1
     576:	2600      	movs	r6, #0
	
	do {
		_usart_async_write_byte(device, buf[offset]);
     578:	f8df 8024 	ldr.w	r8, [pc, #36]	; 5a0 <usart_async_write+0x40>
		while (!_usart_async_is_byte_sent(device))
     57c:	4d07      	ldr	r5, [pc, #28]	; (59c <usart_async_write+0x3c>)
		_usart_async_write_byte(device, buf[offset]);
     57e:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     582:	4620      	mov	r0, r4
     584:	47c0      	blx	r8
		while (!_usart_async_is_byte_sent(device))
     586:	4620      	mov	r0, r4
     588:	47a8      	blx	r5
     58a:	2800      	cmp	r0, #0
     58c:	d0fb      	beq.n	586 <usart_async_write+0x26>
		;
	} while (++offset < length);
     58e:	3601      	adds	r6, #1
     590:	454e      	cmp	r6, r9
     592:	d3f4      	bcc.n	57e <usart_async_write+0x1e>

	return (int32_t)offset;
}
     594:	4630      	mov	r0, r6
     596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     59a:	bf00      	nop
     59c:	00001faf 	.word	0x00001faf
     5a0:	00001fa1 	.word	0x00001fa1

000005a4 <SerialDebugTxByteSentCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     5a4:	2302      	movs	r3, #2
     5a6:	7603      	strb	r3, [r0, #24]
     5a8:	4770      	bx	lr

000005aa <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     5aa:	2380      	movs	r3, #128	; 0x80
     5ac:	7603      	strb	r3, [r0, #24]
     5ae:	4770      	bx	lr

000005b0 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     5b0:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&DEBUG_PRINT,SERCOM5);
     5b2:	4c05      	ldr	r4, [pc, #20]	; (5c8 <SerialDebugPrintInit+0x18>)
     5b4:	4905      	ldr	r1, [pc, #20]	; (5cc <SerialDebugPrintInit+0x1c>)
     5b6:	4620      	mov	r0, r4
     5b8:	4b05      	ldr	r3, [pc, #20]	; (5d0 <SerialDebugPrintInit+0x20>)
     5ba:	4798      	blx	r3
	}
	
	//serTest = SERIAL_DEBUG_TEST_WRITE;
	
	/* Enabled the UART Interrupts */
	_usart_async_set_irq_state(&DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     5bc:	2201      	movs	r2, #1
     5be:	4611      	mov	r1, r2
     5c0:	4620      	mov	r0, r4
     5c2:	4b04      	ldr	r3, [pc, #16]	; (5d4 <SerialDebugPrintInit+0x24>)
     5c4:	4798      	blx	r3
     5c6:	bd10      	pop	{r4, pc}
     5c8:	20000020 	.word	0x20000020
     5cc:	43000400 	.word	0x43000400
     5d0:	00001f1d 	.word	0x00001f1d
     5d4:	00001fd5 	.word	0x00001fd5

000005d8 <SerialDebugPrint>:
	}
}
#endif

void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     5d8:	b570      	push	{r4, r5, r6, lr}
     5da:	4605      	mov	r5, r0
     5dc:	460e      	mov	r6, r1
	_usart_async_enable(&DEBUG_PRINT);
     5de:	4c05      	ldr	r4, [pc, #20]	; (5f4 <SerialDebugPrint+0x1c>)
     5e0:	4620      	mov	r0, r4
     5e2:	4b05      	ldr	r3, [pc, #20]	; (5f8 <SerialDebugPrint+0x20>)
     5e4:	4798      	blx	r3
	
	usart_async_write(&DEBUG_PRINT, dataToPrint, length);
     5e6:	4632      	mov	r2, r6
     5e8:	4629      	mov	r1, r5
     5ea:	4620      	mov	r0, r4
     5ec:	4b03      	ldr	r3, [pc, #12]	; (5fc <SerialDebugPrint+0x24>)
     5ee:	4798      	blx	r3
     5f0:	bd70      	pop	{r4, r5, r6, pc}
     5f2:	bf00      	nop
     5f4:	20000020 	.word	0x20000020
     5f8:	00001f8d 	.word	0x00001f8d
     5fc:	00000561 	.word	0x00000561

00000600 <SerialDebugTxDoneCallBack>:
{
	hri_sercomusart_clear_interrupt_TXC_bit(device);
}

void SerialDebugTxDoneCallBack(struct _usart_async_device *device)
{
     600:	b510      	push	{r4, lr}
     602:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     604:	2116      	movs	r1, #22
     606:	4803      	ldr	r0, [pc, #12]	; (614 <SerialDebugTxDoneCallBack+0x14>)
     608:	4b03      	ldr	r3, [pc, #12]	; (618 <SerialDebugTxDoneCallBack+0x18>)
     60a:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     60c:	2301      	movs	r3, #1
     60e:	7623      	strb	r3, [r4, #24]
     610:	bd10      	pop	{r4, pc}
     612:	bf00      	nop
     614:	00004764 	.word	0x00004764
     618:	000005d9 	.word	0x000005d9

0000061c <SERCOM5_2_Handler>:
{
	hri_sercomusart_clear_INTFLAG_ERROR_bit(device);
}

void SERCOM5_2_Handler( void )
{
     61c:	b538      	push	{r3, r4, r5, lr}
	SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
     61e:	2113      	movs	r1, #19
     620:	480e      	ldr	r0, [pc, #56]	; (65c <SERCOM5_2_Handler+0x40>)
     622:	4b0f      	ldr	r3, [pc, #60]	; (660 <SERCOM5_2_Handler+0x44>)
     624:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     626:	2204      	movs	r2, #4
     628:	4b0e      	ldr	r3, [pc, #56]	; (664 <SERCOM5_2_Handler+0x48>)
     62a:	761a      	strb	r2, [r3, #24]
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&DEBUG_PRINT));
     62c:	4d0e      	ldr	r5, [pc, #56]	; (668 <SERCOM5_2_Handler+0x4c>)
     62e:	4c0f      	ldr	r4, [pc, #60]	; (66c <SERCOM5_2_Handler+0x50>)
     630:	4628      	mov	r0, r5
     632:	47a0      	blx	r4
     634:	2800      	cmp	r0, #0
     636:	d0fb      	beq.n	630 <SERCOM5_2_Handler+0x14>
	
	RxDataBuff[RxCnt] = _usart_async_read_byte(&DEBUG_PRINT);
     638:	4c0d      	ldr	r4, [pc, #52]	; (670 <SERCOM5_2_Handler+0x54>)
     63a:	7825      	ldrb	r5, [r4, #0]
     63c:	480a      	ldr	r0, [pc, #40]	; (668 <SERCOM5_2_Handler+0x4c>)
     63e:	4b0d      	ldr	r3, [pc, #52]	; (674 <SERCOM5_2_Handler+0x58>)
     640:	4798      	blx	r3
     642:	4b0d      	ldr	r3, [pc, #52]	; (678 <SERCOM5_2_Handler+0x5c>)
     644:	5558      	strb	r0, [r3, r5]
	RxCnt++;
     646:	7823      	ldrb	r3, [r4, #0]
     648:	3301      	adds	r3, #1
     64a:	b2db      	uxtb	r3, r3
	
	if(RxCnt > 1)
     64c:	2b01      	cmp	r3, #1
     64e:	d903      	bls.n	658 <SERCOM5_2_Handler+0x3c>
	{
		RxCnt = 0;
     650:	2200      	movs	r2, #0
     652:	4b07      	ldr	r3, [pc, #28]	; (670 <SERCOM5_2_Handler+0x54>)
     654:	701a      	strb	r2, [r3, #0]
     656:	bd38      	pop	{r3, r4, r5, pc}
	RxCnt++;
     658:	7023      	strb	r3, [r4, #0]
     65a:	bd38      	pop	{r3, r4, r5, pc}
     65c:	00004788 	.word	0x00004788
     660:	000005d9 	.word	0x000005d9
     664:	43000400 	.word	0x43000400
     668:	20000020 	.word	0x20000020
     66c:	00001fb9 	.word	0x00001fb9
     670:	20001e1a 	.word	0x20001e1a
     674:	00001fa7 	.word	0x00001fa7
     678:	20001e18 	.word	0x20001e18

0000067c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     67c:	b508      	push	{r3, lr}
	system_init();
     67e:	4b01      	ldr	r3, [pc, #4]	; (684 <atmel_start_init+0x8>)
     680:	4798      	blx	r3
     682:	bd08      	pop	{r3, pc}
     684:	00000dbd 	.word	0x00000dbd

00000688 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     688:	e7fe      	b.n	688 <Dummy_Handler>
	...

0000068c <Reset_Handler>:
{
     68c:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     68e:	4b1c      	ldr	r3, [pc, #112]	; (700 <Reset_Handler+0x74>)
     690:	4a1c      	ldr	r2, [pc, #112]	; (704 <Reset_Handler+0x78>)
     692:	429a      	cmp	r2, r3
     694:	d010      	beq.n	6b8 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     696:	4b1c      	ldr	r3, [pc, #112]	; (708 <Reset_Handler+0x7c>)
     698:	4a19      	ldr	r2, [pc, #100]	; (700 <Reset_Handler+0x74>)
     69a:	429a      	cmp	r2, r3
     69c:	d20c      	bcs.n	6b8 <Reset_Handler+0x2c>
     69e:	3b01      	subs	r3, #1
     6a0:	1a9b      	subs	r3, r3, r2
     6a2:	f023 0303 	bic.w	r3, r3, #3
     6a6:	3304      	adds	r3, #4
     6a8:	4413      	add	r3, r2
     6aa:	4916      	ldr	r1, [pc, #88]	; (704 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     6ac:	f851 0b04 	ldr.w	r0, [r1], #4
     6b0:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     6b4:	429a      	cmp	r2, r3
     6b6:	d1f9      	bne.n	6ac <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     6b8:	4b14      	ldr	r3, [pc, #80]	; (70c <Reset_Handler+0x80>)
     6ba:	4a15      	ldr	r2, [pc, #84]	; (710 <Reset_Handler+0x84>)
     6bc:	429a      	cmp	r2, r3
     6be:	d20a      	bcs.n	6d6 <Reset_Handler+0x4a>
     6c0:	3b01      	subs	r3, #1
     6c2:	1a9b      	subs	r3, r3, r2
     6c4:	f023 0303 	bic.w	r3, r3, #3
     6c8:	3304      	adds	r3, #4
     6ca:	4413      	add	r3, r2
                *pDest++ = 0;
     6cc:	2100      	movs	r1, #0
     6ce:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     6d2:	4293      	cmp	r3, r2
     6d4:	d1fb      	bne.n	6ce <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     6d6:	4b0f      	ldr	r3, [pc, #60]	; (714 <Reset_Handler+0x88>)
     6d8:	4a0f      	ldr	r2, [pc, #60]	; (718 <Reset_Handler+0x8c>)
     6da:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     6de:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     6e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     6e4:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     6e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     6ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     6f0:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     6f4:	4b09      	ldr	r3, [pc, #36]	; (71c <Reset_Handler+0x90>)
     6f6:	4798      	blx	r3
        main();
     6f8:	4b09      	ldr	r3, [pc, #36]	; (720 <Reset_Handler+0x94>)
     6fa:	4798      	blx	r3
     6fc:	e7fe      	b.n	6fc <Reset_Handler+0x70>
     6fe:	bf00      	nop
     700:	20000000 	.word	0x20000000
     704:	00004e0c 	.word	0x00004e0c
     708:	2000015c 	.word	0x2000015c
     70c:	20001ff0 	.word	0x20001ff0
     710:	20000160 	.word	0x20000160
     714:	e000ed00 	.word	0xe000ed00
     718:	00000000 	.word	0x00000000
     71c:	00003bcd 	.word	0x00003bcd
     720:	00002975 	.word	0x00002975

00000724 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
     724:	4a04      	ldr	r2, [pc, #16]	; (738 <AC_0_CLOCK_init+0x14>)
     726:	69d3      	ldr	r3, [r2, #28]
     728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     72c:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     72e:	2240      	movs	r2, #64	; 0x40
     730:	4b02      	ldr	r3, [pc, #8]	; (73c <AC_0_CLOCK_init+0x18>)
     732:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     736:	4770      	bx	lr
     738:	40000800 	.word	0x40000800
     73c:	40001c00 	.word	0x40001c00

00000740 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
     740:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
     742:	4b03      	ldr	r3, [pc, #12]	; (750 <AC_0_init+0x10>)
     744:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     746:	4903      	ldr	r1, [pc, #12]	; (754 <AC_0_init+0x14>)
     748:	4803      	ldr	r0, [pc, #12]	; (758 <AC_0_init+0x18>)
     74a:	4b04      	ldr	r3, [pc, #16]	; (75c <AC_0_init+0x1c>)
     74c:	4798      	blx	r3
     74e:	bd08      	pop	{r3, pc}
     750:	00000725 	.word	0x00000725
     754:	42002000 	.word	0x42002000
     758:	20001ebc 	.word	0x20001ebc
     75c:	00000edd 	.word	0x00000edd

00000760 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     760:	4b5d      	ldr	r3, [pc, #372]	; (8d8 <ADC_0_PORT_init+0x178>)
     762:	2204      	movs	r2, #4
     764:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     766:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     76a:	629a      	str	r2, [r3, #40]	; 0x28
     76c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     770:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     772:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     776:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     77a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     77e:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     782:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     786:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     78a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     78e:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     792:	2108      	movs	r1, #8
     794:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     796:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     79a:	6299      	str	r1, [r3, #40]	; 0x28
     79c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     79e:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7aa:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ae:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7b2:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7b6:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7ba:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7be:	f44f 7180 	mov.w	r1, #256	; 0x100
     7c2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7c6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     7ca:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     7ce:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7d2:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     7d6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7da:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7de:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7e2:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7e6:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7ea:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7ee:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7f2:	f44f 7100 	mov.w	r1, #512	; 0x200
     7f6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7fa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     7fe:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     802:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     806:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     80a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     80e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     812:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     816:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     81a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     81e:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     822:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     826:	2110      	movs	r1, #16
     828:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     82a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     82e:	6299      	str	r1, [r3, #40]	; 0x28
     830:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     832:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     836:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     83a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     83e:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     842:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     846:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     84a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     84e:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     852:	2120      	movs	r1, #32
     854:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     856:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     85a:	6299      	str	r1, [r3, #40]	; 0x28
     85c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     85e:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     862:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     866:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     86a:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     86e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     872:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     876:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     87a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     87e:	2140      	movs	r1, #64	; 0x40
     880:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     882:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     886:	6299      	str	r1, [r3, #40]	; 0x28
     888:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     88a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     88e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     892:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     896:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     89a:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     89e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8a2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8a6:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     8aa:	2180      	movs	r1, #128	; 0x80
     8ac:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8ae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     8b2:	6299      	str	r1, [r3, #40]	; 0x28
     8b4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8b6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     8ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8be:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8c6:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8ca:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8ce:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8d2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     8d6:	4770      	bx	lr
     8d8:	41008000 	.word	0x41008000

000008dc <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     8dc:	4a04      	ldr	r2, [pc, #16]	; (8f0 <ADC_0_CLOCK_init+0x14>)
     8de:	6a13      	ldr	r3, [r2, #32]
     8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     8e4:	6213      	str	r3, [r2, #32]
     8e6:	2241      	movs	r2, #65	; 0x41
     8e8:	4b02      	ldr	r3, [pc, #8]	; (8f4 <ADC_0_CLOCK_init+0x18>)
     8ea:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     8ee:	4770      	bx	lr
     8f0:	40000800 	.word	0x40000800
     8f4:	40001c00 	.word	0x40001c00

000008f8 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     8f8:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     8fa:	4b05      	ldr	r3, [pc, #20]	; (910 <ADC_0_init+0x18>)
     8fc:	4798      	blx	r3
	ADC_0_PORT_init();
     8fe:	4b05      	ldr	r3, [pc, #20]	; (914 <ADC_0_init+0x1c>)
     900:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     902:	2200      	movs	r2, #0
     904:	4904      	ldr	r1, [pc, #16]	; (918 <ADC_0_init+0x20>)
     906:	4805      	ldr	r0, [pc, #20]	; (91c <ADC_0_init+0x24>)
     908:	4b05      	ldr	r3, [pc, #20]	; (920 <ADC_0_init+0x28>)
     90a:	4798      	blx	r3
     90c:	bd08      	pop	{r3, pc}
     90e:	bf00      	nop
     910:	000008dd 	.word	0x000008dd
     914:	00000761 	.word	0x00000761
     918:	43001c00 	.word	0x43001c00
     91c:	20001ecc 	.word	0x20001ecc
     920:	00000f0d 	.word	0x00000f0d

00000924 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     924:	4a04      	ldr	r2, [pc, #16]	; (938 <ADC_1_CLOCK_init+0x14>)
     926:	6a13      	ldr	r3, [r2, #32]
     928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     92c:	6213      	str	r3, [r2, #32]
     92e:	2240      	movs	r2, #64	; 0x40
     930:	4b02      	ldr	r3, [pc, #8]	; (93c <ADC_1_CLOCK_init+0x18>)
     932:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
     936:	4770      	bx	lr
     938:	40000800 	.word	0x40000800
     93c:	40001c00 	.word	0x40001c00

00000940 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
     940:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
     942:	4b04      	ldr	r3, [pc, #16]	; (954 <ADC_1_init+0x14>)
     944:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
     946:	2200      	movs	r2, #0
     948:	4903      	ldr	r1, [pc, #12]	; (958 <ADC_1_init+0x18>)
     94a:	4804      	ldr	r0, [pc, #16]	; (95c <ADC_1_init+0x1c>)
     94c:	4b04      	ldr	r3, [pc, #16]	; (960 <ADC_1_init+0x20>)
     94e:	4798      	blx	r3
     950:	bd08      	pop	{r3, pc}
     952:	bf00      	nop
     954:	00000925 	.word	0x00000925
     958:	43002000 	.word	0x43002000
     95c:	20001f84 	.word	0x20001f84
     960:	00000f0d 	.word	0x00000f0d

00000964 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
     964:	4a04      	ldr	r2, [pc, #16]	; (978 <DAC_0_CLOCK_init+0x14>)
     966:	6a13      	ldr	r3, [r2, #32]
     968:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     96c:	6213      	str	r3, [r2, #32]
     96e:	2240      	movs	r2, #64	; 0x40
     970:	4b02      	ldr	r3, [pc, #8]	; (97c <DAC_0_CLOCK_init+0x18>)
     972:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     976:	4770      	bx	lr
     978:	40000800 	.word	0x40000800
     97c:	40001c00 	.word	0x40001c00

00000980 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
     980:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
     982:	4b03      	ldr	r3, [pc, #12]	; (990 <DAC_0_init+0x10>)
     984:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     986:	4903      	ldr	r1, [pc, #12]	; (994 <DAC_0_init+0x14>)
     988:	4803      	ldr	r0, [pc, #12]	; (998 <DAC_0_init+0x18>)
     98a:	4b04      	ldr	r3, [pc, #16]	; (99c <DAC_0_init+0x1c>)
     98c:	4798      	blx	r3
     98e:	bd08      	pop	{r3, pc}
     990:	00000965 	.word	0x00000965
     994:	43002400 	.word	0x43002400
     998:	20001ef4 	.word	0x20001ef4
     99c:	00000f59 	.word	0x00000f59

000009a0 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
     9a0:	b508      	push	{r3, lr}
     9a2:	2240      	movs	r2, #64	; 0x40
     9a4:	4b05      	ldr	r3, [pc, #20]	; (9bc <EXTERNAL_IRQ_0_init+0x1c>)
     9a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     9aa:	4a05      	ldr	r2, [pc, #20]	; (9c0 <EXTERNAL_IRQ_0_init+0x20>)
     9ac:	6953      	ldr	r3, [r2, #20]
     9ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     9b2:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
     9b4:	4b03      	ldr	r3, [pc, #12]	; (9c4 <EXTERNAL_IRQ_0_init+0x24>)
     9b6:	4798      	blx	r3
     9b8:	bd08      	pop	{r3, pc}
     9ba:	bf00      	nop
     9bc:	40001c00 	.word	0x40001c00
     9c0:	40000800 	.word	0x40000800
     9c4:	00001011 	.word	0x00001011

000009c8 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     9c8:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     9ca:	4a04      	ldr	r2, [pc, #16]	; (9dc <EVENT_SYSTEM_0_init+0x14>)
     9cc:	6993      	ldr	r3, [r2, #24]
     9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     9d2:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
     9d4:	4b02      	ldr	r3, [pc, #8]	; (9e0 <EVENT_SYSTEM_0_init+0x18>)
     9d6:	4798      	blx	r3
     9d8:	bd08      	pop	{r3, pc}
     9da:	bf00      	nop
     9dc:	40000800 	.word	0x40000800
     9e0:	00000fcd 	.word	0x00000fcd

000009e4 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     9e4:	4a02      	ldr	r2, [pc, #8]	; (9f0 <FLASH_0_CLOCK_init+0xc>)
     9e6:	6913      	ldr	r3, [r2, #16]
     9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     9ec:	6113      	str	r3, [r2, #16]
     9ee:	4770      	bx	lr
     9f0:	40000800 	.word	0x40000800

000009f4 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     9f4:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     9f6:	4b03      	ldr	r3, [pc, #12]	; (a04 <FLASH_0_init+0x10>)
     9f8:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     9fa:	4903      	ldr	r1, [pc, #12]	; (a08 <FLASH_0_init+0x14>)
     9fc:	4803      	ldr	r0, [pc, #12]	; (a0c <FLASH_0_init+0x18>)
     9fe:	4b04      	ldr	r3, [pc, #16]	; (a10 <FLASH_0_init+0x1c>)
     a00:	4798      	blx	r3
     a02:	bd08      	pop	{r3, pc}
     a04:	000009e5 	.word	0x000009e5
     a08:	41004000 	.word	0x41004000
     a0c:	20001e80 	.word	0x20001e80
     a10:	00001049 	.word	0x00001049

00000a14 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a14:	4b10      	ldr	r3, [pc, #64]	; (a58 <ModemData_PORT_init+0x44>)
     a16:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     a1a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a1e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a26:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a2a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a2e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a36:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     a3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a42:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a46:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     a4a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     a4e:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     a56:	4770      	bx	lr
     a58:	41008000 	.word	0x41008000

00000a5c <ModemData_CLOCK_init>:
     a5c:	4b06      	ldr	r3, [pc, #24]	; (a78 <ModemData_CLOCK_init+0x1c>)
     a5e:	2240      	movs	r2, #64	; 0x40
     a60:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     a64:	224a      	movs	r2, #74	; 0x4a
     a66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     a6a:	4a04      	ldr	r2, [pc, #16]	; (a7c <ModemData_CLOCK_init+0x20>)
     a6c:	6993      	ldr	r3, [r2, #24]
     a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     a72:	6193      	str	r3, [r2, #24]
     a74:	4770      	bx	lr
     a76:	bf00      	nop
     a78:	40001c00 	.word	0x40001c00
     a7c:	40000800 	.word	0x40000800

00000a80 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
     a80:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
     a82:	4b03      	ldr	r3, [pc, #12]	; (a90 <ModemData_init+0x10>)
     a84:	4798      	blx	r3
	//ModemDataCommInit();
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	ModemUsartOsInit();
     a86:	4b03      	ldr	r3, [pc, #12]	; (a94 <ModemData_init+0x14>)
     a88:	4798      	blx	r3
	ModemData_PORT_init();
     a8a:	4b03      	ldr	r3, [pc, #12]	; (a98 <ModemData_init+0x18>)
     a8c:	4798      	blx	r3
     a8e:	bd08      	pop	{r3, pc}
     a90:	00000a5d 	.word	0x00000a5d
     a94:	00000369 	.word	0x00000369
     a98:	00000a15 	.word	0x00000a15

00000a9c <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a9c:	4b10      	ldr	r3, [pc, #64]	; (ae0 <SerialDebug_PORT_init+0x44>)
     a9e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     aa2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     aa6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aaa:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     aae:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ab2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ab6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     aba:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     abe:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ac6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     aca:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ace:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ad2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     ad6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     ada:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     ade:	4770      	bx	lr
     ae0:	41008000 	.word	0x41008000

00000ae4 <SerialDebug_CLOCK_init>:
     ae4:	4b06      	ldr	r3, [pc, #24]	; (b00 <SerialDebug_CLOCK_init+0x1c>)
     ae6:	2240      	movs	r2, #64	; 0x40
     ae8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     aec:	224a      	movs	r2, #74	; 0x4a
     aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     af2:	4a04      	ldr	r2, [pc, #16]	; (b04 <SerialDebug_CLOCK_init+0x20>)
     af4:	6a13      	ldr	r3, [r2, #32]
     af6:	f043 0302 	orr.w	r3, r3, #2
     afa:	6213      	str	r3, [r2, #32]
     afc:	4770      	bx	lr
     afe:	bf00      	nop
     b00:	40001c00 	.word	0x40001c00
     b04:	40000800 	.word	0x40000800

00000b08 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
     b08:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
     b0a:	4b03      	ldr	r3, [pc, #12]	; (b18 <SerialDebug_init+0x10>)
     b0c:	4798      	blx	r3
	SerialDebugPrintInit();
     b0e:	4b03      	ldr	r3, [pc, #12]	; (b1c <SerialDebug_init+0x14>)
     b10:	4798      	blx	r3
	SerialDebug_PORT_init();
     b12:	4b03      	ldr	r3, [pc, #12]	; (b20 <SerialDebug_init+0x18>)
     b14:	4798      	blx	r3
     b16:	bd08      	pop	{r3, pc}
     b18:	00000ae5 	.word	0x00000ae5
     b1c:	000005b1 	.word	0x000005b1
     b20:	00000a9d 	.word	0x00000a9d

00000b24 <delay_driver_init>:
}

void delay_driver_init(void)
{
     b24:	b508      	push	{r3, lr}
	delay_init(SysTick);
     b26:	4802      	ldr	r0, [pc, #8]	; (b30 <delay_driver_init+0xc>)
     b28:	4b02      	ldr	r3, [pc, #8]	; (b34 <delay_driver_init+0x10>)
     b2a:	4798      	blx	r3
     b2c:	bd08      	pop	{r3, pc}
     b2e:	bf00      	nop
     b30:	e000e010 	.word	0xe000e010
     b34:	00000f99 	.word	0x00000f99

00000b38 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     b38:	4a04      	ldr	r2, [pc, #16]	; (b4c <PWM_0_CLOCK_init+0x14>)
     b3a:	6953      	ldr	r3, [r2, #20]
     b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     b40:	6153      	str	r3, [r2, #20]
     b42:	2240      	movs	r2, #64	; 0x40
     b44:	4b02      	ldr	r3, [pc, #8]	; (b50 <PWM_0_CLOCK_init+0x18>)
     b46:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     b4a:	4770      	bx	lr
     b4c:	40000800 	.word	0x40000800
     b50:	40001c00 	.word	0x40001c00

00000b54 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     b54:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     b56:	4b05      	ldr	r3, [pc, #20]	; (b6c <PWM_0_init+0x18>)
     b58:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     b5a:	4b05      	ldr	r3, [pc, #20]	; (b70 <PWM_0_init+0x1c>)
     b5c:	4798      	blx	r3
     b5e:	4602      	mov	r2, r0
     b60:	4904      	ldr	r1, [pc, #16]	; (b74 <PWM_0_init+0x20>)
     b62:	4805      	ldr	r0, [pc, #20]	; (b78 <PWM_0_init+0x24>)
     b64:	4b05      	ldr	r3, [pc, #20]	; (b7c <PWM_0_init+0x28>)
     b66:	4798      	blx	r3
     b68:	bd08      	pop	{r3, pc}
     b6a:	bf00      	nop
     b6c:	00000b39 	.word	0x00000b39
     b70:	0000288d 	.word	0x0000288d
     b74:	40003800 	.word	0x40003800
     b78:	20001e48 	.word	0x20001e48
     b7c:	000010a5 	.word	0x000010a5

00000b80 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     b80:	4a04      	ldr	r2, [pc, #16]	; (b94 <PWM_1_CLOCK_init+0x14>)
     b82:	6953      	ldr	r3, [r2, #20]
     b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     b88:	6153      	str	r3, [r2, #20]
     b8a:	2240      	movs	r2, #64	; 0x40
     b8c:	4b02      	ldr	r3, [pc, #8]	; (b98 <PWM_1_CLOCK_init+0x18>)
     b8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     b92:	4770      	bx	lr
     b94:	40000800 	.word	0x40000800
     b98:	40001c00 	.word	0x40001c00

00000b9c <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
     b9c:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
     b9e:	4b05      	ldr	r3, [pc, #20]	; (bb4 <PWM_1_init+0x18>)
     ba0:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
     ba2:	4b05      	ldr	r3, [pc, #20]	; (bb8 <PWM_1_init+0x1c>)
     ba4:	4798      	blx	r3
     ba6:	4602      	mov	r2, r0
     ba8:	4904      	ldr	r1, [pc, #16]	; (bbc <PWM_1_init+0x20>)
     baa:	4805      	ldr	r0, [pc, #20]	; (bc0 <PWM_1_init+0x24>)
     bac:	4b05      	ldr	r3, [pc, #20]	; (bc4 <PWM_1_init+0x28>)
     bae:	4798      	blx	r3
     bb0:	bd08      	pop	{r3, pc}
     bb2:	bf00      	nop
     bb4:	00000b81 	.word	0x00000b81
     bb8:	0000288d 	.word	0x0000288d
     bbc:	40003c00 	.word	0x40003c00
     bc0:	20001f68 	.word	0x20001f68
     bc4:	000010a5 	.word	0x000010a5

00000bc8 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     bc8:	4a04      	ldr	r2, [pc, #16]	; (bdc <PWM_2_CLOCK_init+0x14>)
     bca:	6993      	ldr	r3, [r2, #24]
     bcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     bd0:	6193      	str	r3, [r2, #24]
     bd2:	2240      	movs	r2, #64	; 0x40
     bd4:	4b02      	ldr	r3, [pc, #8]	; (be0 <PWM_2_CLOCK_init+0x18>)
     bd6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     bda:	4770      	bx	lr
     bdc:	40000800 	.word	0x40000800
     be0:	40001c00 	.word	0x40001c00

00000be4 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
     be4:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
     be6:	4b05      	ldr	r3, [pc, #20]	; (bfc <PWM_2_init+0x18>)
     be8:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
     bea:	4b05      	ldr	r3, [pc, #20]	; (c00 <PWM_2_init+0x1c>)
     bec:	4798      	blx	r3
     bee:	4602      	mov	r2, r0
     bf0:	4904      	ldr	r1, [pc, #16]	; (c04 <PWM_2_init+0x20>)
     bf2:	4805      	ldr	r0, [pc, #20]	; (c08 <PWM_2_init+0x24>)
     bf4:	4b05      	ldr	r3, [pc, #20]	; (c0c <PWM_2_init+0x28>)
     bf6:	4798      	blx	r3
     bf8:	bd08      	pop	{r3, pc}
     bfa:	bf00      	nop
     bfc:	00000bc9 	.word	0x00000bc9
     c00:	0000288d 	.word	0x0000288d
     c04:	4101a000 	.word	0x4101a000
     c08:	20001e64 	.word	0x20001e64
     c0c:	000010a5 	.word	0x000010a5

00000c10 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     c10:	4a04      	ldr	r2, [pc, #16]	; (c24 <TIMER_3_CLOCK_init+0x14>)
     c12:	6993      	ldr	r3, [r2, #24]
     c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     c18:	6193      	str	r3, [r2, #24]
     c1a:	2240      	movs	r2, #64	; 0x40
     c1c:	4b02      	ldr	r3, [pc, #8]	; (c28 <TIMER_3_CLOCK_init+0x18>)
     c1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     c22:	4770      	bx	lr
     c24:	40000800 	.word	0x40000800
     c28:	40001c00 	.word	0x40001c00

00000c2c <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
     c2c:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
     c2e:	4b05      	ldr	r3, [pc, #20]	; (c44 <TIMER_3_init+0x18>)
     c30:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
     c32:	4b05      	ldr	r3, [pc, #20]	; (c48 <TIMER_3_init+0x1c>)
     c34:	4798      	blx	r3
     c36:	4602      	mov	r2, r0
     c38:	4904      	ldr	r1, [pc, #16]	; (c4c <TIMER_3_init+0x20>)
     c3a:	4805      	ldr	r0, [pc, #20]	; (c50 <TIMER_3_init+0x24>)
     c3c:	4b05      	ldr	r3, [pc, #20]	; (c54 <TIMER_3_init+0x28>)
     c3e:	4798      	blx	r3
     c40:	bd08      	pop	{r3, pc}
     c42:	bf00      	nop
     c44:	00000c11 	.word	0x00000c11
     c48:	00002345 	.word	0x00002345
     c4c:	41016000 	.word	0x41016000
     c50:	20001f88 	.word	0x20001f88
     c54:	000011c1 	.word	0x000011c1

00000c58 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     c58:	4a04      	ldr	r2, [pc, #16]	; (c6c <TIMER_4_CLOCK_init+0x14>)
     c5a:	6993      	ldr	r3, [r2, #24]
     c5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     c60:	6193      	str	r3, [r2, #24]
     c62:	2240      	movs	r2, #64	; 0x40
     c64:	4b02      	ldr	r3, [pc, #8]	; (c70 <TIMER_4_CLOCK_init+0x18>)
     c66:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     c6a:	4770      	bx	lr
     c6c:	40000800 	.word	0x40000800
     c70:	40001c00 	.word	0x40001c00

00000c74 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
     c74:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
     c76:	4b05      	ldr	r3, [pc, #20]	; (c8c <TIMER_4_init+0x18>)
     c78:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
     c7a:	4b05      	ldr	r3, [pc, #20]	; (c90 <TIMER_4_init+0x1c>)
     c7c:	4798      	blx	r3
     c7e:	4602      	mov	r2, r0
     c80:	4904      	ldr	r1, [pc, #16]	; (c94 <TIMER_4_init+0x20>)
     c82:	4805      	ldr	r0, [pc, #20]	; (c98 <TIMER_4_init+0x24>)
     c84:	4b05      	ldr	r3, [pc, #20]	; (c9c <TIMER_4_init+0x28>)
     c86:	4798      	blx	r3
     c88:	bd08      	pop	{r3, pc}
     c8a:	bf00      	nop
     c8c:	00000c59 	.word	0x00000c59
     c90:	00002345 	.word	0x00002345
     c94:	41018000 	.word	0x41018000
     c98:	20001ed0 	.word	0x20001ed0
     c9c:	000011c1 	.word	0x000011c1

00000ca0 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     ca0:	4a04      	ldr	r2, [pc, #16]	; (cb4 <TIMER_5_CLOCK_init+0x14>)
     ca2:	69d3      	ldr	r3, [r2, #28]
     ca4:	f043 0308 	orr.w	r3, r3, #8
     ca8:	61d3      	str	r3, [r2, #28]
     caa:	2240      	movs	r2, #64	; 0x40
     cac:	4b02      	ldr	r3, [pc, #8]	; (cb8 <TIMER_5_CLOCK_init+0x18>)
     cae:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     cb2:	4770      	bx	lr
     cb4:	40000800 	.word	0x40000800
     cb8:	40001c00 	.word	0x40001c00

00000cbc <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
     cbc:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
     cbe:	4b05      	ldr	r3, [pc, #20]	; (cd4 <TIMER_5_init+0x18>)
     cc0:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
     cc2:	4b05      	ldr	r3, [pc, #20]	; (cd8 <TIMER_5_init+0x1c>)
     cc4:	4798      	blx	r3
     cc6:	4602      	mov	r2, r0
     cc8:	4904      	ldr	r1, [pc, #16]	; (cdc <TIMER_5_init+0x20>)
     cca:	4805      	ldr	r0, [pc, #20]	; (ce0 <TIMER_5_init+0x24>)
     ccc:	4b05      	ldr	r3, [pc, #20]	; (ce4 <TIMER_5_init+0x28>)
     cce:	4798      	blx	r3
     cd0:	bd08      	pop	{r3, pc}
     cd2:	bf00      	nop
     cd4:	00000ca1 	.word	0x00000ca1
     cd8:	00002345 	.word	0x00002345
     cdc:	42000c00 	.word	0x42000c00
     ce0:	20001f28 	.word	0x20001f28
     ce4:	000011c1 	.word	0x000011c1

00000ce8 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
     ce8:	4a04      	ldr	r2, [pc, #16]	; (cfc <TIMER_6_CLOCK_init+0x14>)
     cea:	69d3      	ldr	r3, [r2, #28]
     cec:	f043 0310 	orr.w	r3, r3, #16
     cf0:	61d3      	str	r3, [r2, #28]
     cf2:	2240      	movs	r2, #64	; 0x40
     cf4:	4b02      	ldr	r3, [pc, #8]	; (d00 <TIMER_6_CLOCK_init+0x18>)
     cf6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     cfa:	4770      	bx	lr
     cfc:	40000800 	.word	0x40000800
     d00:	40001c00 	.word	0x40001c00

00000d04 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
     d04:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
     d06:	4b05      	ldr	r3, [pc, #20]	; (d1c <TIMER_6_init+0x18>)
     d08:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
     d0a:	4b05      	ldr	r3, [pc, #20]	; (d20 <TIMER_6_init+0x1c>)
     d0c:	4798      	blx	r3
     d0e:	4602      	mov	r2, r0
     d10:	4904      	ldr	r1, [pc, #16]	; (d24 <TIMER_6_init+0x20>)
     d12:	4805      	ldr	r0, [pc, #20]	; (d28 <TIMER_6_init+0x24>)
     d14:	4b05      	ldr	r3, [pc, #20]	; (d2c <TIMER_6_init+0x28>)
     d16:	4798      	blx	r3
     d18:	bd08      	pop	{r3, pc}
     d1a:	bf00      	nop
     d1c:	00000ce9 	.word	0x00000ce9
     d20:	00002345 	.word	0x00002345
     d24:	42001000 	.word	0x42001000
     d28:	20001f48 	.word	0x20001f48
     d2c:	000011c1 	.word	0x000011c1

00000d30 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
     d30:	4a04      	ldr	r2, [pc, #16]	; (d44 <TIMER_7_CLOCK_init+0x14>)
     d32:	6a13      	ldr	r3, [r2, #32]
     d34:	f043 0310 	orr.w	r3, r3, #16
     d38:	6213      	str	r3, [r2, #32]
     d3a:	2240      	movs	r2, #64	; 0x40
     d3c:	4b02      	ldr	r3, [pc, #8]	; (d48 <TIMER_7_CLOCK_init+0x18>)
     d3e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     d42:	4770      	bx	lr
     d44:	40000800 	.word	0x40000800
     d48:	40001c00 	.word	0x40001c00

00000d4c <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
     d4c:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
     d4e:	4b05      	ldr	r3, [pc, #20]	; (d64 <TIMER_7_init+0x18>)
     d50:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
     d52:	4b05      	ldr	r3, [pc, #20]	; (d68 <TIMER_7_init+0x1c>)
     d54:	4798      	blx	r3
     d56:	4602      	mov	r2, r0
     d58:	4904      	ldr	r1, [pc, #16]	; (d6c <TIMER_7_init+0x20>)
     d5a:	4805      	ldr	r0, [pc, #20]	; (d70 <TIMER_7_init+0x24>)
     d5c:	4b05      	ldr	r3, [pc, #20]	; (d74 <TIMER_7_init+0x28>)
     d5e:	4798      	blx	r3
     d60:	bd08      	pop	{r3, pc}
     d62:	bf00      	nop
     d64:	00000d31 	.word	0x00000d31
     d68:	00002345 	.word	0x00002345
     d6c:	43001000 	.word	0x43001000
     d70:	20001e9c 	.word	0x20001e9c
     d74:	000011c1 	.word	0x000011c1

00000d78 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     d78:	4a02      	ldr	r2, [pc, #8]	; (d84 <WDT_0_CLOCK_init+0xc>)
     d7a:	6953      	ldr	r3, [r2, #20]
     d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     d80:	6153      	str	r3, [r2, #20]
     d82:	4770      	bx	lr
     d84:	40000800 	.word	0x40000800

00000d88 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     d88:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     d8a:	4b06      	ldr	r3, [pc, #24]	; (da4 <WDT_0_init+0x1c>)
     d8c:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     d8e:	2252      	movs	r2, #82	; 0x52
     d90:	4905      	ldr	r1, [pc, #20]	; (da8 <WDT_0_init+0x20>)
     d92:	2001      	movs	r0, #1
     d94:	4b05      	ldr	r3, [pc, #20]	; (dac <WDT_0_init+0x24>)
     d96:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     d98:	4805      	ldr	r0, [pc, #20]	; (db0 <WDT_0_init+0x28>)
     d9a:	4b06      	ldr	r3, [pc, #24]	; (db4 <WDT_0_init+0x2c>)
     d9c:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     d9e:	4b06      	ldr	r3, [pc, #24]	; (db8 <WDT_0_init+0x30>)
     da0:	4798      	blx	r3
     da2:	bd08      	pop	{r3, pc}
     da4:	00000d79 	.word	0x00000d79
     da8:	000047a8 	.word	0x000047a8
     dac:	000014c9 	.word	0x000014c9
     db0:	20001ef0 	.word	0x20001ef0
     db4:	40002000 	.word	0x40002000
     db8:	00002909 	.word	0x00002909

00000dbc <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     dc0:	4b28      	ldr	r3, [pc, #160]	; (e64 <system_init+0xa8>)
     dc2:	4798      	blx	r3
	init_mcu();

	AC_0_init();
     dc4:	4b28      	ldr	r3, [pc, #160]	; (e68 <system_init+0xac>)
     dc6:	4798      	blx	r3

	ADC_0_init();
     dc8:	4b28      	ldr	r3, [pc, #160]	; (e6c <system_init+0xb0>)
     dca:	4798      	blx	r3

	ADC_1_init();
     dcc:	4b28      	ldr	r3, [pc, #160]	; (e70 <system_init+0xb4>)
     dce:	4798      	blx	r3

	DAC_0_init();
     dd0:	4b28      	ldr	r3, [pc, #160]	; (e74 <system_init+0xb8>)
     dd2:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     dd4:	4b28      	ldr	r3, [pc, #160]	; (e78 <system_init+0xbc>)
     dd6:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     dd8:	4b28      	ldr	r3, [pc, #160]	; (e7c <system_init+0xc0>)
     dda:	4798      	blx	r3

	FLASH_0_init();
     ddc:	4b28      	ldr	r3, [pc, #160]	; (e80 <system_init+0xc4>)
     dde:	4798      	blx	r3

	//USART_2_init();

	SerialDebug_init();
     de0:	4b28      	ldr	r3, [pc, #160]	; (e84 <system_init+0xc8>)
     de2:	4798      	blx	r3
	
	ModemData_init();
     de4:	4b28      	ldr	r3, [pc, #160]	; (e88 <system_init+0xcc>)
     de6:	4798      	blx	r3

	delay_driver_init();
     de8:	4b28      	ldr	r3, [pc, #160]	; (e8c <system_init+0xd0>)
     dea:	4798      	blx	r3

	PWM_0_init();
     dec:	4b28      	ldr	r3, [pc, #160]	; (e90 <system_init+0xd4>)
     dee:	4798      	blx	r3

	PWM_1_init();
     df0:	4b28      	ldr	r3, [pc, #160]	; (e94 <system_init+0xd8>)
     df2:	4798      	blx	r3

	PWM_2_init();
     df4:	4b28      	ldr	r3, [pc, #160]	; (e98 <system_init+0xdc>)
     df6:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     df8:	4c28      	ldr	r4, [pc, #160]	; (e9c <system_init+0xe0>)
     dfa:	69a3      	ldr	r3, [r4, #24]
     dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     e00:	61a3      	str	r3, [r4, #24]
     e02:	4f27      	ldr	r7, [pc, #156]	; (ea0 <system_init+0xe4>)
     e04:	f04f 0840 	mov.w	r8, #64	; 0x40
     e08:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     e0c:	4e25      	ldr	r6, [pc, #148]	; (ea4 <system_init+0xe8>)
     e0e:	47b0      	blx	r6
     e10:	4602      	mov	r2, r0
     e12:	4925      	ldr	r1, [pc, #148]	; (ea8 <system_init+0xec>)
     e14:	4825      	ldr	r0, [pc, #148]	; (eac <system_init+0xf0>)
     e16:	4d26      	ldr	r5, [pc, #152]	; (eb0 <system_init+0xf4>)
     e18:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     e1a:	69e3      	ldr	r3, [r4, #28]
     e1c:	f043 0320 	orr.w	r3, r3, #32
     e20:	61e3      	str	r3, [r4, #28]
     e22:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
     e26:	47b0      	blx	r6
     e28:	4602      	mov	r2, r0
     e2a:	4922      	ldr	r1, [pc, #136]	; (eb4 <system_init+0xf8>)
     e2c:	4822      	ldr	r0, [pc, #136]	; (eb8 <system_init+0xfc>)
     e2e:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     e30:	69e3      	ldr	r3, [r4, #28]
     e32:	ea43 0308 	orr.w	r3, r3, r8
     e36:	61e3      	str	r3, [r4, #28]
     e38:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
     e3c:	47b0      	blx	r6
     e3e:	4602      	mov	r2, r0
     e40:	491e      	ldr	r1, [pc, #120]	; (ebc <system_init+0x100>)
     e42:	481f      	ldr	r0, [pc, #124]	; (ec0 <system_init+0x104>)
     e44:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
     e46:	4b1f      	ldr	r3, [pc, #124]	; (ec4 <system_init+0x108>)
     e48:	4798      	blx	r3

	TIMER_4_init();
     e4a:	4b1f      	ldr	r3, [pc, #124]	; (ec8 <system_init+0x10c>)
     e4c:	4798      	blx	r3

	TIMER_5_init();
     e4e:	4b1f      	ldr	r3, [pc, #124]	; (ecc <system_init+0x110>)
     e50:	4798      	blx	r3

	TIMER_6_init();
     e52:	4b1f      	ldr	r3, [pc, #124]	; (ed0 <system_init+0x114>)
     e54:	4798      	blx	r3

	TIMER_7_init();
     e56:	4b1f      	ldr	r3, [pc, #124]	; (ed4 <system_init+0x118>)
     e58:	4798      	blx	r3

	WDT_0_init();
     e5a:	4b1f      	ldr	r3, [pc, #124]	; (ed8 <system_init+0x11c>)
     e5c:	4798      	blx	r3
     e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e62:	bf00      	nop
     e64:	000017f1 	.word	0x000017f1
     e68:	00000741 	.word	0x00000741
     e6c:	000008f9 	.word	0x000008f9
     e70:	00000941 	.word	0x00000941
     e74:	00000981 	.word	0x00000981
     e78:	000009a1 	.word	0x000009a1
     e7c:	000009c9 	.word	0x000009c9
     e80:	000009f5 	.word	0x000009f5
     e84:	00000b09 	.word	0x00000b09
     e88:	00000a81 	.word	0x00000a81
     e8c:	00000b25 	.word	0x00000b25
     e90:	00000b55 	.word	0x00000b55
     e94:	00000b9d 	.word	0x00000b9d
     e98:	00000be5 	.word	0x00000be5
     e9c:	40000800 	.word	0x40000800
     ea0:	40001c00 	.word	0x40001c00
     ea4:	00002885 	.word	0x00002885
     ea8:	4101c000 	.word	0x4101c000
     eac:	20001fa8 	.word	0x20001fa8
     eb0:	000011c1 	.word	0x000011c1
     eb4:	42001400 	.word	0x42001400
     eb8:	20001f08 	.word	0x20001f08
     ebc:	42001800 	.word	0x42001800
     ec0:	20001e28 	.word	0x20001e28
     ec4:	00000c2d 	.word	0x00000c2d
     ec8:	00000c75 	.word	0x00000c75
     ecc:	00000cbd 	.word	0x00000cbd
     ed0:	00000d05 	.word	0x00000d05
     ed4:	00000d4d 	.word	0x00000d4d
     ed8:	00000d89 	.word	0x00000d89

00000edc <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
     edc:	b538      	push	{r3, r4, r5, lr}
     ede:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     ee0:	4605      	mov	r5, r0
     ee2:	b158      	cbz	r0, efc <ac_sync_init+0x20>
     ee4:	1c08      	adds	r0, r1, #0
     ee6:	bf18      	it	ne
     ee8:	2001      	movne	r0, #1
     eea:	223b      	movs	r2, #59	; 0x3b
     eec:	4904      	ldr	r1, [pc, #16]	; (f00 <ac_sync_init+0x24>)
     eee:	4b05      	ldr	r3, [pc, #20]	; (f04 <ac_sync_init+0x28>)
     ef0:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
     ef2:	4621      	mov	r1, r4
     ef4:	4628      	mov	r0, r5
     ef6:	4b04      	ldr	r3, [pc, #16]	; (f08 <ac_sync_init+0x2c>)
     ef8:	4798      	blx	r3
}
     efa:	bd38      	pop	{r3, r4, r5, pc}
     efc:	2000      	movs	r0, #0
     efe:	e7f4      	b.n	eea <ac_sync_init+0xe>
     f00:	000047c4 	.word	0x000047c4
     f04:	000014c9 	.word	0x000014c9
     f08:	000016b9 	.word	0x000016b9

00000f0c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     f0c:	b538      	push	{r3, r4, r5, lr}
     f0e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     f10:	4605      	mov	r5, r0
     f12:	b158      	cbz	r0, f2c <adc_sync_init+0x20>
     f14:	1c08      	adds	r0, r1, #0
     f16:	bf18      	it	ne
     f18:	2001      	movne	r0, #1
     f1a:	2243      	movs	r2, #67	; 0x43
     f1c:	4904      	ldr	r1, [pc, #16]	; (f30 <adc_sync_init+0x24>)
     f1e:	4b05      	ldr	r3, [pc, #20]	; (f34 <adc_sync_init+0x28>)
     f20:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     f22:	4621      	mov	r1, r4
     f24:	4628      	mov	r0, r5
     f26:	4b04      	ldr	r3, [pc, #16]	; (f38 <adc_sync_init+0x2c>)
     f28:	4798      	blx	r3
}
     f2a:	bd38      	pop	{r3, r4, r5, pc}
     f2c:	2000      	movs	r0, #0
     f2e:	e7f4      	b.n	f1a <adc_sync_init+0xe>
     f30:	000047e0 	.word	0x000047e0
     f34:	000014c9 	.word	0x000014c9
     f38:	00001791 	.word	0x00001791

00000f3c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f3c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     f40:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     f42:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     f44:	f3bf 8f5f 	dmb	sy
     f48:	4770      	bx	lr

00000f4a <atomic_leave_critical>:
     f4a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     f4e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     f50:	f383 8810 	msr	PRIMASK, r3
     f54:	4770      	bx	lr
	...

00000f58 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     f58:	b538      	push	{r3, r4, r5, lr}
     f5a:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     f5c:	4604      	mov	r4, r0
     f5e:	b198      	cbz	r0, f88 <dac_sync_init+0x30>
     f60:	1c08      	adds	r0, r1, #0
     f62:	bf18      	it	ne
     f64:	2001      	movne	r0, #1
     f66:	223c      	movs	r2, #60	; 0x3c
     f68:	4908      	ldr	r1, [pc, #32]	; (f8c <dac_sync_init+0x34>)
     f6a:	4b09      	ldr	r3, [pc, #36]	; (f90 <dac_sync_init+0x38>)
     f6c:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     f6e:	4629      	mov	r1, r5
     f70:	4620      	mov	r0, r4
     f72:	4b08      	ldr	r3, [pc, #32]	; (f94 <dac_sync_init+0x3c>)
     f74:	4798      	blx	r3
	if (rc) {
     f76:	4602      	mov	r2, r0
     f78:	b920      	cbnz	r0, f84 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     f7a:	2300      	movs	r3, #0
     f7c:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
     f7e:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
     f80:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
     f82:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
     f84:	4610      	mov	r0, r2
     f86:	bd38      	pop	{r3, r4, r5, pc}
     f88:	2000      	movs	r0, #0
     f8a:	e7ec      	b.n	f66 <dac_sync_init+0xe>
     f8c:	000047fc 	.word	0x000047fc
     f90:	000014c9 	.word	0x000014c9
     f94:	000018a9 	.word	0x000018a9

00000f98 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     f98:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     f9a:	4b02      	ldr	r3, [pc, #8]	; (fa4 <delay_init+0xc>)
     f9c:	6018      	str	r0, [r3, #0]
     f9e:	4b02      	ldr	r3, [pc, #8]	; (fa8 <delay_init+0x10>)
     fa0:	4798      	blx	r3
     fa2:	bd08      	pop	{r3, pc}
     fa4:	20000180 	.word	0x20000180
     fa8:	00002041 	.word	0x00002041

00000fac <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     fac:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     fae:	4b04      	ldr	r3, [pc, #16]	; (fc0 <delay_ms+0x14>)
     fb0:	681c      	ldr	r4, [r3, #0]
     fb2:	4b04      	ldr	r3, [pc, #16]	; (fc4 <delay_ms+0x18>)
     fb4:	4798      	blx	r3
     fb6:	4601      	mov	r1, r0
     fb8:	4620      	mov	r0, r4
     fba:	4b03      	ldr	r3, [pc, #12]	; (fc8 <delay_ms+0x1c>)
     fbc:	4798      	blx	r3
     fbe:	bd10      	pop	{r4, pc}
     fc0:	20000180 	.word	0x20000180
     fc4:	000017e5 	.word	0x000017e5
     fc8:	00002055 	.word	0x00002055

00000fcc <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     fcc:	b508      	push	{r3, lr}
	return _event_system_init();
     fce:	4b01      	ldr	r3, [pc, #4]	; (fd4 <event_system_init+0x8>)
     fd0:	4798      	blx	r3
}
     fd2:	bd08      	pop	{r3, pc}
     fd4:	00001ae5 	.word	0x00001ae5

00000fd8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     fd8:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     fda:	4b0c      	ldr	r3, [pc, #48]	; (100c <process_ext_irq+0x34>)
     fdc:	685c      	ldr	r4, [r3, #4]
     fde:	42a0      	cmp	r0, r4
     fe0:	d00e      	beq.n	1000 <process_ext_irq+0x28>
     fe2:	2301      	movs	r3, #1
     fe4:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     fe6:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
     fe8:	25ff      	movs	r5, #255	; 0xff
     fea:	e003      	b.n	ff4 <process_ext_irq+0x1c>
     fec:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
     fee:	185a      	adds	r2, r3, r1
     ff0:	0852      	lsrs	r2, r2, #1
     ff2:	d104      	bne.n	ffe <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
     ff4:	42a0      	cmp	r0, r4
     ff6:	d9f9      	bls.n	fec <process_ext_irq+0x14>
	while (upper >= lower) {
     ff8:	b13b      	cbz	r3, 100a <process_ext_irq+0x32>
			lower = middle + 1;
     ffa:	4631      	mov	r1, r6
     ffc:	e7f7      	b.n	fee <process_ext_irq+0x16>
     ffe:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    1000:	4b02      	ldr	r3, [pc, #8]	; (100c <process_ext_irq+0x34>)
    1002:	681b      	ldr	r3, [r3, #0]
    1004:	b10b      	cbz	r3, 100a <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    1006:	4798      	blx	r3
    1008:	bd70      	pop	{r4, r5, r6, pc}
    100a:	bd70      	pop	{r4, r5, r6, pc}
    100c:	20000184 	.word	0x20000184

00001010 <ext_irq_init>:
{
    1010:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    1012:	4b05      	ldr	r3, [pc, #20]	; (1028 <ext_irq_init+0x18>)
    1014:	f04f 32ff 	mov.w	r2, #4294967295
    1018:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    101a:	2200      	movs	r2, #0
    101c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    101e:	4803      	ldr	r0, [pc, #12]	; (102c <ext_irq_init+0x1c>)
    1020:	4b03      	ldr	r3, [pc, #12]	; (1030 <ext_irq_init+0x20>)
    1022:	4798      	blx	r3
}
    1024:	bd08      	pop	{r3, pc}
    1026:	bf00      	nop
    1028:	20000184 	.word	0x20000184
    102c:	00000fd9 	.word	0x00000fd9
    1030:	00001a65 	.word	0x00001a65

00001034 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1034:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1036:	6943      	ldr	r3, [r0, #20]
    1038:	b103      	cbz	r3, 103c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    103a:	4798      	blx	r3
    103c:	bd08      	pop	{r3, pc}

0000103e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    103e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1040:	6983      	ldr	r3, [r0, #24]
    1042:	b103      	cbz	r3, 1046 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1044:	4798      	blx	r3
    1046:	bd08      	pop	{r3, pc}

00001048 <flash_init>:
{
    1048:	b538      	push	{r3, r4, r5, lr}
    104a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    104c:	4604      	mov	r4, r0
    104e:	b190      	cbz	r0, 1076 <flash_init+0x2e>
    1050:	1c08      	adds	r0, r1, #0
    1052:	bf18      	it	ne
    1054:	2001      	movne	r0, #1
    1056:	2242      	movs	r2, #66	; 0x42
    1058:	4908      	ldr	r1, [pc, #32]	; (107c <flash_init+0x34>)
    105a:	4b09      	ldr	r3, [pc, #36]	; (1080 <flash_init+0x38>)
    105c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    105e:	4629      	mov	r1, r5
    1060:	4620      	mov	r0, r4
    1062:	4b08      	ldr	r3, [pc, #32]	; (1084 <flash_init+0x3c>)
    1064:	4798      	blx	r3
	if (rc) {
    1066:	4603      	mov	r3, r0
    1068:	b918      	cbnz	r0, 1072 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    106a:	4a07      	ldr	r2, [pc, #28]	; (1088 <flash_init+0x40>)
    106c:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    106e:	4a07      	ldr	r2, [pc, #28]	; (108c <flash_init+0x44>)
    1070:	6062      	str	r2, [r4, #4]
}
    1072:	4618      	mov	r0, r3
    1074:	bd38      	pop	{r3, r4, r5, pc}
    1076:	2000      	movs	r0, #0
    1078:	e7ed      	b.n	1056 <flash_init+0xe>
    107a:	bf00      	nop
    107c:	00004818 	.word	0x00004818
    1080:	000014c9 	.word	0x000014c9
    1084:	00001c21 	.word	0x00001c21
    1088:	00001035 	.word	0x00001035
    108c:	0000103f 	.word	0x0000103f

00001090 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1090:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1092:	6943      	ldr	r3, [r0, #20]
    1094:	b103      	cbz	r3, 1098 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    1096:	4798      	blx	r3
    1098:	bd08      	pop	{r3, pc}

0000109a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    109a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    109c:	6983      	ldr	r3, [r0, #24]
    109e:	b103      	cbz	r3, 10a2 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    10a0:	4798      	blx	r3
    10a2:	bd08      	pop	{r3, pc}

000010a4 <pwm_init>:
{
    10a4:	b538      	push	{r3, r4, r5, lr}
    10a6:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    10a8:	4604      	mov	r4, r0
    10aa:	b180      	cbz	r0, 10ce <pwm_init+0x2a>
    10ac:	1c08      	adds	r0, r1, #0
    10ae:	bf18      	it	ne
    10b0:	2001      	movne	r0, #1
    10b2:	223d      	movs	r2, #61	; 0x3d
    10b4:	4907      	ldr	r1, [pc, #28]	; (10d4 <pwm_init+0x30>)
    10b6:	4b08      	ldr	r3, [pc, #32]	; (10d8 <pwm_init+0x34>)
    10b8:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    10ba:	4629      	mov	r1, r5
    10bc:	4620      	mov	r0, r4
    10be:	4b07      	ldr	r3, [pc, #28]	; (10dc <pwm_init+0x38>)
    10c0:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    10c2:	4b07      	ldr	r3, [pc, #28]	; (10e0 <pwm_init+0x3c>)
    10c4:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    10c6:	4b07      	ldr	r3, [pc, #28]	; (10e4 <pwm_init+0x40>)
    10c8:	6063      	str	r3, [r4, #4]
}
    10ca:	2000      	movs	r0, #0
    10cc:	bd38      	pop	{r3, r4, r5, pc}
    10ce:	2000      	movs	r0, #0
    10d0:	e7ef      	b.n	10b2 <pwm_init+0xe>
    10d2:	bf00      	nop
    10d4:	00004830 	.word	0x00004830
    10d8:	000014c9 	.word	0x000014c9
    10dc:	0000276d 	.word	0x0000276d
    10e0:	00001091 	.word	0x00001091
    10e4:	0000109b 	.word	0x0000109b

000010e8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    10e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10ea:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    10ec:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    10ee:	b12f      	cbz	r7, 10fc <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    10f0:	688d      	ldr	r5, [r1, #8]
    10f2:	463c      	mov	r4, r7
    10f4:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    10f6:	f1c2 0e01 	rsb	lr, r2, #1
    10fa:	e00b      	b.n	1114 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    10fc:	4b0e      	ldr	r3, [pc, #56]	; (1138 <timer_add_timer_task+0x50>)
    10fe:	4798      	blx	r3
		return;
    1100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1102:	4473      	add	r3, lr
    1104:	68a0      	ldr	r0, [r4, #8]
    1106:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1108:	42ab      	cmp	r3, r5
    110a:	d20a      	bcs.n	1122 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    110c:	6823      	ldr	r3, [r4, #0]
    110e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1110:	b153      	cbz	r3, 1128 <timer_add_timer_task+0x40>
    1112:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1114:	6863      	ldr	r3, [r4, #4]
    1116:	4293      	cmp	r3, r2
    1118:	d8f3      	bhi.n	1102 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    111a:	68a0      	ldr	r0, [r4, #8]
    111c:	4403      	add	r3, r0
    111e:	1a9b      	subs	r3, r3, r2
    1120:	e7f2      	b.n	1108 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1122:	42a7      	cmp	r7, r4
    1124:	d004      	beq.n	1130 <timer_add_timer_task+0x48>
    1126:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1128:	4620      	mov	r0, r4
    112a:	4b04      	ldr	r3, [pc, #16]	; (113c <timer_add_timer_task+0x54>)
    112c:	4798      	blx	r3
    112e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1130:	4660      	mov	r0, ip
    1132:	4b01      	ldr	r3, [pc, #4]	; (1138 <timer_add_timer_task+0x50>)
    1134:	4798      	blx	r3
    1136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1138:	000014f1 	.word	0x000014f1
    113c:	0000151d 	.word	0x0000151d

00001140 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1144:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1146:	6907      	ldr	r7, [r0, #16]
    1148:	3701      	adds	r7, #1
    114a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    114c:	7e03      	ldrb	r3, [r0, #24]
    114e:	f013 0f01 	tst.w	r3, #1
    1152:	d113      	bne.n	117c <timer_process_counted+0x3c>
    1154:	7e03      	ldrb	r3, [r0, #24]
    1156:	f013 0f02 	tst.w	r3, #2
    115a:	d10f      	bne.n	117c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    115c:	b354      	cbz	r4, 11b4 <timer_process_counted+0x74>
    115e:	6863      	ldr	r3, [r4, #4]
    1160:	1afb      	subs	r3, r7, r3
    1162:	68a2      	ldr	r2, [r4, #8]
    1164:	4293      	cmp	r3, r2
    1166:	d307      	bcc.n	1178 <timer_process_counted+0x38>
    1168:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    116a:	f100 0814 	add.w	r8, r0, #20
    116e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 11b8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1172:	f8df a048 	ldr.w	sl, [pc, #72]	; 11bc <timer_process_counted+0x7c>
    1176:	e012      	b.n	119e <timer_process_counted+0x5e>
    1178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    117c:	7e03      	ldrb	r3, [r0, #24]
    117e:	f043 0302 	orr.w	r3, r3, #2
    1182:	7603      	strb	r3, [r0, #24]
		return;
    1184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1188:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    118a:	68e3      	ldr	r3, [r4, #12]
    118c:	4620      	mov	r0, r4
    118e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1190:	b185      	cbz	r5, 11b4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1192:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1194:	686b      	ldr	r3, [r5, #4]
    1196:	1afb      	subs	r3, r7, r3
    1198:	68aa      	ldr	r2, [r5, #8]
    119a:	4293      	cmp	r3, r2
    119c:	d30a      	bcc.n	11b4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    119e:	4640      	mov	r0, r8
    11a0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    11a2:	7c23      	ldrb	r3, [r4, #16]
    11a4:	2b01      	cmp	r3, #1
    11a6:	d1ef      	bne.n	1188 <timer_process_counted+0x48>
			tmp->time_label = time;
    11a8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    11aa:	463a      	mov	r2, r7
    11ac:	4621      	mov	r1, r4
    11ae:	4640      	mov	r0, r8
    11b0:	47d0      	blx	sl
    11b2:	e7e9      	b.n	1188 <timer_process_counted+0x48>
    11b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11b8:	00001525 	.word	0x00001525
    11bc:	000010e9 	.word	0x000010e9

000011c0 <timer_init>:
{
    11c0:	b570      	push	{r4, r5, r6, lr}
    11c2:	460e      	mov	r6, r1
    11c4:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    11c6:	4604      	mov	r4, r0
    11c8:	b190      	cbz	r0, 11f0 <timer_init+0x30>
    11ca:	b199      	cbz	r1, 11f4 <timer_init+0x34>
    11cc:	1c10      	adds	r0, r2, #0
    11ce:	bf18      	it	ne
    11d0:	2001      	movne	r0, #1
    11d2:	2245      	movs	r2, #69	; 0x45
    11d4:	4908      	ldr	r1, [pc, #32]	; (11f8 <timer_init+0x38>)
    11d6:	4b09      	ldr	r3, [pc, #36]	; (11fc <timer_init+0x3c>)
    11d8:	4798      	blx	r3
	descr->func = func;
    11da:	4620      	mov	r0, r4
    11dc:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    11e0:	682b      	ldr	r3, [r5, #0]
    11e2:	4631      	mov	r1, r6
    11e4:	4798      	blx	r3
	descr->time                           = 0;
    11e6:	2000      	movs	r0, #0
    11e8:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    11ea:	4b05      	ldr	r3, [pc, #20]	; (1200 <timer_init+0x40>)
    11ec:	6063      	str	r3, [r4, #4]
}
    11ee:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    11f0:	2000      	movs	r0, #0
    11f2:	e7ee      	b.n	11d2 <timer_init+0x12>
    11f4:	2000      	movs	r0, #0
    11f6:	e7ec      	b.n	11d2 <timer_init+0x12>
    11f8:	00004848 	.word	0x00004848
    11fc:	000014c9 	.word	0x000014c9
    1200:	00001141 	.word	0x00001141

00001204 <usart_os_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_os_error(struct _usart_async_device *device)
{
    1204:	b508      	push	{r3, lr}
	struct usart_os_descriptor *descr = CONTAINER_OF(device, struct usart_os_descriptor, device);

	sem_up(&descr->rx_sem);
    1206:	303c      	adds	r0, #60	; 0x3c
    1208:	4b01      	ldr	r3, [pc, #4]	; (1210 <usart_os_error+0xc>)
    120a:	4798      	blx	r3
    120c:	bd08      	pop	{r3, pc}
    120e:	bf00      	nop
    1210:	000029d9 	.word	0x000029d9

00001214 <usart_os_transmission_complete>:
{
    1214:	b508      	push	{r3, lr}
	sem_up(&descr->tx_sem);
    1216:	3040      	adds	r0, #64	; 0x40
    1218:	4b01      	ldr	r3, [pc, #4]	; (1220 <usart_os_transmission_complete+0xc>)
    121a:	4798      	blx	r3
    121c:	bd08      	pop	{r3, pc}
    121e:	bf00      	nop
    1220:	000029d9 	.word	0x000029d9

00001224 <usart_os_fill_rx_buffer>:
{
    1224:	b510      	push	{r4, lr}
	if (descr->rx_buffer == NULL) {
    1226:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    1228:	b143      	cbz	r3, 123c <usart_os_fill_rx_buffer+0x18>
		descr->rx_buffer[descr->rx_size++] = data;
    122a:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    122c:	1c54      	adds	r4, r2, #1
    122e:	8604      	strh	r4, [r0, #48]	; 0x30
    1230:	5499      	strb	r1, [r3, r2]
		if (descr->rx_size >= descr->rx_length) {
    1232:	8e02      	ldrh	r2, [r0, #48]	; 0x30
    1234:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    1236:	429a      	cmp	r2, r3
    1238:	d204      	bcs.n	1244 <usart_os_fill_rx_buffer+0x20>
    123a:	bd10      	pop	{r4, pc}
		ringbuffer_put(&descr->rx, data);
    123c:	301c      	adds	r0, #28
    123e:	4b04      	ldr	r3, [pc, #16]	; (1250 <usart_os_fill_rx_buffer+0x2c>)
    1240:	4798      	blx	r3
    1242:	bd10      	pop	{r4, pc}
			descr->rx_buffer = NULL;
    1244:	2300      	movs	r3, #0
    1246:	62c3      	str	r3, [r0, #44]	; 0x2c
			sem_up(&descr->rx_sem);
    1248:	303c      	adds	r0, #60	; 0x3c
    124a:	4b02      	ldr	r3, [pc, #8]	; (1254 <usart_os_fill_rx_buffer+0x30>)
    124c:	4798      	blx	r3
}
    124e:	e7f4      	b.n	123a <usart_os_fill_rx_buffer+0x16>
    1250:	000015c5 	.word	0x000015c5
    1254:	000029d9 	.word	0x000029d9

00001258 <usart_os_process_byte_sent>:
{
    1258:	b510      	push	{r4, lr}
    125a:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
    125c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
    125e:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    1260:	429a      	cmp	r2, r3
    1262:	d009      	beq.n	1278 <usart_os_process_byte_sent+0x20>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1264:	6b42      	ldr	r2, [r0, #52]	; 0x34
    1266:	1c59      	adds	r1, r3, #1
    1268:	8701      	strh	r1, [r0, #56]	; 0x38
    126a:	5cd1      	ldrb	r1, [r2, r3]
    126c:	4b04      	ldr	r3, [pc, #16]	; (1280 <usart_os_process_byte_sent+0x28>)
    126e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    1270:	4620      	mov	r0, r4
    1272:	4b04      	ldr	r3, [pc, #16]	; (1284 <usart_os_process_byte_sent+0x2c>)
    1274:	4798      	blx	r3
    1276:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
    1278:	4b03      	ldr	r3, [pc, #12]	; (1288 <usart_os_process_byte_sent+0x30>)
    127a:	4798      	blx	r3
    127c:	bd10      	pop	{r4, pc}
    127e:	bf00      	nop
    1280:	00001fa1 	.word	0x00001fa1
    1284:	00001fc3 	.word	0x00001fc3
    1288:	00001fcb 	.word	0x00001fcb

0000128c <usart_os_write>:
{
    128c:	b538      	push	{r3, r4, r5, lr}
    128e:	4604      	mov	r4, r0
    1290:	4615      	mov	r5, r2
	descr->tx_buffer        = (uint8_t *)buf;
    1292:	63c1      	str	r1, [r0, #60]	; 0x3c
	descr->tx_buffer_length = length;
    1294:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
	descr->tx_por           = 0;
    1298:	2300      	movs	r3, #0
    129a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	_usart_async_enable_byte_sent_irq(&descr->device);
    129e:	3008      	adds	r0, #8
    12a0:	4b06      	ldr	r3, [pc, #24]	; (12bc <usart_os_write+0x30>)
    12a2:	4798      	blx	r3
	return sem_down(&descr->tx_sem, ~0) == 0 ? length : ERR_TIMEOUT;
    12a4:	f04f 31ff 	mov.w	r1, #4294967295
    12a8:	f104 0048 	add.w	r0, r4, #72	; 0x48
    12ac:	4b04      	ldr	r3, [pc, #16]	; (12c0 <usart_os_write+0x34>)
    12ae:	4798      	blx	r3
    12b0:	2800      	cmp	r0, #0
}
    12b2:	bf0c      	ite	eq
    12b4:	4628      	moveq	r0, r5
    12b6:	f06f 0007 	mvnne.w	r0, #7
    12ba:	bd38      	pop	{r3, r4, r5, pc}
    12bc:	00001fc3 	.word	0x00001fc3
    12c0:	00002a1d 	.word	0x00002a1d

000012c4 <usart_os_read>:
{
    12c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    12c8:	b082      	sub	sp, #8
    12ca:	4604      	mov	r4, r0
    12cc:	4690      	mov	r8, r2
	ASSERT(buf);
    12ce:	460e      	mov	r6, r1
    12d0:	1c08      	adds	r0, r1, #0
    12d2:	bf18      	it	ne
    12d4:	2001      	movne	r0, #1
    12d6:	f240 1231 	movw	r2, #305	; 0x131
    12da:	4921      	ldr	r1, [pc, #132]	; (1360 <usart_os_read+0x9c>)
    12dc:	4b21      	ldr	r3, [pc, #132]	; (1364 <usart_os_read+0xa0>)
    12de:	4798      	blx	r3
	if (ringbuffer_num(&descr->rx) < length) {
    12e0:	f104 0524 	add.w	r5, r4, #36	; 0x24
    12e4:	4628      	mov	r0, r5
    12e6:	4b20      	ldr	r3, [pc, #128]	; (1368 <usart_os_read+0xa4>)
    12e8:	4798      	blx	r3
    12ea:	4540      	cmp	r0, r8
    12ec:	d313      	bcc.n	1316 <usart_os_read+0x52>
		while (was_read < length) {
    12ee:	f1b8 0f00 	cmp.w	r8, #0
    12f2:	d00c      	beq.n	130e <usart_os_read+0x4a>
    12f4:	4634      	mov	r4, r6
    12f6:	f108 33ff 	add.w	r3, r8, #4294967295
    12fa:	b29b      	uxth	r3, r3
    12fc:	3301      	adds	r3, #1
    12fe:	441e      	add	r6, r3
			ringbuffer_get(&descr->rx, &buf[was_read++]);
    1300:	4f1a      	ldr	r7, [pc, #104]	; (136c <usart_os_read+0xa8>)
    1302:	4621      	mov	r1, r4
    1304:	4628      	mov	r0, r5
    1306:	47b8      	blx	r7
    1308:	3401      	adds	r4, #1
		while (was_read < length) {
    130a:	42b4      	cmp	r4, r6
    130c:	d1f9      	bne.n	1302 <usart_os_read+0x3e>
	return (int32_t)length;
    130e:	4640      	mov	r0, r8
}
    1310:	b002      	add	sp, #8
    1312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CRITICAL_SECTION_ENTER()
    1316:	a801      	add	r0, sp, #4
    1318:	4b15      	ldr	r3, [pc, #84]	; (1370 <usart_os_read+0xac>)
    131a:	4798      	blx	r3
		descr->rx_size   = 0;
    131c:	2300      	movs	r3, #0
    131e:	8723      	strh	r3, [r4, #56]	; 0x38
		descr->rx_length = length;
    1320:	f8a4 803a 	strh.w	r8, [r4, #58]	; 0x3a
		descr->rx_buffer = buf;
    1324:	6366      	str	r6, [r4, #52]	; 0x34
		while (ringbuffer_num(&descr->rx) > 0) {
    1326:	4e10      	ldr	r6, [pc, #64]	; (1368 <usart_os_read+0xa4>)
			ringbuffer_get(&descr->rx, &descr->rx_buffer[descr->rx_size++]);
    1328:	4f10      	ldr	r7, [pc, #64]	; (136c <usart_os_read+0xa8>)
		while (ringbuffer_num(&descr->rx) > 0) {
    132a:	e006      	b.n	133a <usart_os_read+0x76>
			ringbuffer_get(&descr->rx, &descr->rx_buffer[descr->rx_size++]);
    132c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    132e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
    1330:	1c5a      	adds	r2, r3, #1
    1332:	8722      	strh	r2, [r4, #56]	; 0x38
    1334:	4419      	add	r1, r3
    1336:	4628      	mov	r0, r5
    1338:	47b8      	blx	r7
		while (ringbuffer_num(&descr->rx) > 0) {
    133a:	4628      	mov	r0, r5
    133c:	47b0      	blx	r6
    133e:	2800      	cmp	r0, #0
    1340:	d1f4      	bne.n	132c <usart_os_read+0x68>
		CRITICAL_SECTION_LEAVE()
    1342:	a801      	add	r0, sp, #4
    1344:	4b0b      	ldr	r3, [pc, #44]	; (1374 <usart_os_read+0xb0>)
    1346:	4798      	blx	r3
		if (sem_down(&descr->rx_sem, timeout) != 0) {
    1348:	f04f 31ff 	mov.w	r1, #4294967295
    134c:	f104 0044 	add.w	r0, r4, #68	; 0x44
    1350:	4b09      	ldr	r3, [pc, #36]	; (1378 <usart_os_read+0xb4>)
    1352:	4798      	blx	r3
    1354:	2800      	cmp	r0, #0
    1356:	d0da      	beq.n	130e <usart_os_read+0x4a>
			return ERR_TIMEOUT;
    1358:	f06f 0007 	mvn.w	r0, #7
    135c:	e7d8      	b.n	1310 <usart_os_read+0x4c>
    135e:	bf00      	nop
    1360:	00004860 	.word	0x00004860
    1364:	000014c9 	.word	0x000014c9
    1368:	00001605 	.word	0x00001605
    136c:	00001581 	.word	0x00001581
    1370:	00000f3d 	.word	0x00000f3d
    1374:	00000f4b 	.word	0x00000f4b
    1378:	00002a1d 	.word	0x00002a1d

0000137c <usart_os_init>:
{
    137c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1380:	460f      	mov	r7, r1
    1382:	4615      	mov	r5, r2
    1384:	461e      	mov	r6, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1386:	4604      	mov	r4, r0
    1388:	2800      	cmp	r0, #0
    138a:	d046      	beq.n	141a <usart_os_init+0x9e>
    138c:	2900      	cmp	r1, #0
    138e:	d046      	beq.n	141e <usart_os_init+0xa2>
    1390:	2a00      	cmp	r2, #0
    1392:	d046      	beq.n	1422 <usart_os_init+0xa6>
    1394:	1c18      	adds	r0, r3, #0
    1396:	bf18      	it	ne
    1398:	2001      	movne	r0, #1
    139a:	224b      	movs	r2, #75	; 0x4b
    139c:	4928      	ldr	r1, [pc, #160]	; (1440 <usart_os_init+0xc4>)
    139e:	4b29      	ldr	r3, [pc, #164]	; (1444 <usart_os_init+0xc8>)
    13a0:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    13a2:	4632      	mov	r2, r6
    13a4:	4629      	mov	r1, r5
    13a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    13aa:	4b27      	ldr	r3, [pc, #156]	; (1448 <usart_os_init+0xcc>)
    13ac:	4798      	blx	r3
    13ae:	2800      	cmp	r0, #0
    13b0:	d143      	bne.n	143a <usart_os_init+0xbe>
	rc = sem_init(&descr->rx_sem, 0);
    13b2:	f104 0644 	add.w	r6, r4, #68	; 0x44
    13b6:	2100      	movs	r1, #0
    13b8:	4630      	mov	r0, r6
    13ba:	4b24      	ldr	r3, [pc, #144]	; (144c <usart_os_init+0xd0>)
    13bc:	4798      	blx	r3
	if (rc < 0) {
    13be:	1e05      	subs	r5, r0, #0
    13c0:	db28      	blt.n	1414 <usart_os_init+0x98>
	rc = sem_init(&descr->tx_sem, 0);
    13c2:	f104 0948 	add.w	r9, r4, #72	; 0x48
    13c6:	2100      	movs	r1, #0
    13c8:	4648      	mov	r0, r9
    13ca:	4b20      	ldr	r3, [pc, #128]	; (144c <usart_os_init+0xd0>)
    13cc:	4798      	blx	r3
	if (rc < 0) {
    13ce:	1e05      	subs	r5, r0, #0
    13d0:	db29      	blt.n	1426 <usart_os_init+0xaa>
	rc = _usart_async_init(&descr->device, hw);
    13d2:	f104 0808 	add.w	r8, r4, #8
    13d6:	4639      	mov	r1, r7
    13d8:	4640      	mov	r0, r8
    13da:	4b1d      	ldr	r3, [pc, #116]	; (1450 <usart_os_init+0xd4>)
    13dc:	4798      	blx	r3
	if (rc) {
    13de:	4605      	mov	r5, r0
    13e0:	bb28      	cbnz	r0, 142e <usart_os_init+0xb2>
	descr->rx_buffer = NULL;
    13e2:	2300      	movs	r3, #0
    13e4:	6363      	str	r3, [r4, #52]	; 0x34
	descr->rx_size   = 0;
    13e6:	8723      	strh	r3, [r4, #56]	; 0x38
	descr->rx_length = 0;
    13e8:	8763      	strh	r3, [r4, #58]	; 0x3a
	descr->io.read  = usart_os_read;
    13ea:	4b1a      	ldr	r3, [pc, #104]	; (1454 <usart_os_init+0xd8>)
    13ec:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_os_write;
    13ee:	4b1a      	ldr	r3, [pc, #104]	; (1458 <usart_os_init+0xdc>)
    13f0:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_os_process_byte_sent;
    13f2:	4b1a      	ldr	r3, [pc, #104]	; (145c <usart_os_init+0xe0>)
    13f4:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_os_fill_rx_buffer;
    13f6:	4b1a      	ldr	r3, [pc, #104]	; (1460 <usart_os_init+0xe4>)
    13f8:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_os_transmission_complete;
    13fa:	4b1a      	ldr	r3, [pc, #104]	; (1464 <usart_os_init+0xe8>)
    13fc:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_os_error;
    13fe:	4b1a      	ldr	r3, [pc, #104]	; (1468 <usart_os_init+0xec>)
    1400:	6163      	str	r3, [r4, #20]
	_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, true);
    1402:	2201      	movs	r2, #1
    1404:	4611      	mov	r1, r2
    1406:	4640      	mov	r0, r8
    1408:	4c18      	ldr	r4, [pc, #96]	; (146c <usart_os_init+0xf0>)
    140a:	47a0      	blx	r4
	_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, true);
    140c:	2201      	movs	r2, #1
    140e:	2103      	movs	r1, #3
    1410:	4640      	mov	r0, r8
    1412:	47a0      	blx	r4
}
    1414:	4628      	mov	r0, r5
    1416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    141a:	2000      	movs	r0, #0
    141c:	e7bd      	b.n	139a <usart_os_init+0x1e>
    141e:	2000      	movs	r0, #0
    1420:	e7bb      	b.n	139a <usart_os_init+0x1e>
    1422:	2000      	movs	r0, #0
    1424:	e7b9      	b.n	139a <usart_os_init+0x1e>
		sem_deinit(&descr->tx_sem);
    1426:	4648      	mov	r0, r9
    1428:	4b11      	ldr	r3, [pc, #68]	; (1470 <usart_os_init+0xf4>)
    142a:	4798      	blx	r3
		return rc;
    142c:	e7f2      	b.n	1414 <usart_os_init+0x98>
		sem_deinit(&descr->tx_sem);
    142e:	4648      	mov	r0, r9
    1430:	4c0f      	ldr	r4, [pc, #60]	; (1470 <usart_os_init+0xf4>)
    1432:	47a0      	blx	r4
		sem_deinit(&descr->rx_sem);
    1434:	4630      	mov	r0, r6
    1436:	47a0      	blx	r4
		return rc;
    1438:	e7ec      	b.n	1414 <usart_os_init+0x98>
		return ERR_INVALID_ARG;
    143a:	f06f 050c 	mvn.w	r5, #12
    143e:	e7e9      	b.n	1414 <usart_os_init+0x98>
    1440:	00004860 	.word	0x00004860
    1444:	000014c9 	.word	0x000014c9
    1448:	00001531 	.word	0x00001531
    144c:	000029a1 	.word	0x000029a1
    1450:	00001f1d 	.word	0x00001f1d
    1454:	000012c5 	.word	0x000012c5
    1458:	0000128d 	.word	0x0000128d
    145c:	00001259 	.word	0x00001259
    1460:	00001225 	.word	0x00001225
    1464:	00001215 	.word	0x00001215
    1468:	00001205 	.word	0x00001205
    146c:	00001fd5 	.word	0x00001fd5
    1470:	00002a35 	.word	0x00002a35

00001474 <usart_os_enable>:
{
    1474:	b510      	push	{r4, lr}
	ASSERT(descr);
    1476:	4604      	mov	r4, r0
    1478:	2286      	movs	r2, #134	; 0x86
    147a:	4906      	ldr	r1, [pc, #24]	; (1494 <usart_os_enable+0x20>)
    147c:	3000      	adds	r0, #0
    147e:	bf18      	it	ne
    1480:	2001      	movne	r0, #1
    1482:	4b05      	ldr	r3, [pc, #20]	; (1498 <usart_os_enable+0x24>)
    1484:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1486:	f104 0008 	add.w	r0, r4, #8
    148a:	4b04      	ldr	r3, [pc, #16]	; (149c <usart_os_enable+0x28>)
    148c:	4798      	blx	r3
}
    148e:	2000      	movs	r0, #0
    1490:	bd10      	pop	{r4, pc}
    1492:	bf00      	nop
    1494:	00004860 	.word	0x00004860
    1498:	000014c9 	.word	0x000014c9
    149c:	00001f8d 	.word	0x00001f8d

000014a0 <usart_os_get_io>:
{
    14a0:	b538      	push	{r3, r4, r5, lr}
    14a2:	460c      	mov	r4, r1
	ASSERT(descr && io);
    14a4:	4605      	mov	r5, r0
    14a6:	b148      	cbz	r0, 14bc <usart_os_get_io+0x1c>
    14a8:	1c08      	adds	r0, r1, #0
    14aa:	bf18      	it	ne
    14ac:	2001      	movne	r0, #1
    14ae:	2299      	movs	r2, #153	; 0x99
    14b0:	4903      	ldr	r1, [pc, #12]	; (14c0 <usart_os_get_io+0x20>)
    14b2:	4b04      	ldr	r3, [pc, #16]	; (14c4 <usart_os_get_io+0x24>)
    14b4:	4798      	blx	r3
	*io = &descr->io;
    14b6:	6025      	str	r5, [r4, #0]
}
    14b8:	2000      	movs	r0, #0
    14ba:	bd38      	pop	{r3, r4, r5, pc}
    14bc:	2000      	movs	r0, #0
    14be:	e7f6      	b.n	14ae <usart_os_get_io+0xe>
    14c0:	00004860 	.word	0x00004860
    14c4:	000014c9 	.word	0x000014c9

000014c8 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    14c8:	b900      	cbnz	r0, 14cc <assert+0x4>
		__asm("BKPT #0");
    14ca:	be00      	bkpt	0x0000
    14cc:	4770      	bx	lr

000014ce <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    14ce:	6803      	ldr	r3, [r0, #0]
    14d0:	b14b      	cbz	r3, 14e6 <is_list_element+0x18>
		if (it == element) {
    14d2:	428b      	cmp	r3, r1
    14d4:	d009      	beq.n	14ea <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    14d6:	681b      	ldr	r3, [r3, #0]
    14d8:	b11b      	cbz	r3, 14e2 <is_list_element+0x14>
		if (it == element) {
    14da:	4299      	cmp	r1, r3
    14dc:	d1fb      	bne.n	14d6 <is_list_element+0x8>
			return true;
    14de:	2001      	movs	r0, #1
		}
	}

	return false;
}
    14e0:	4770      	bx	lr
	return false;
    14e2:	2000      	movs	r0, #0
    14e4:	4770      	bx	lr
    14e6:	2000      	movs	r0, #0
    14e8:	4770      	bx	lr
			return true;
    14ea:	2001      	movs	r0, #1
    14ec:	4770      	bx	lr
	...

000014f0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    14f0:	b538      	push	{r3, r4, r5, lr}
    14f2:	4604      	mov	r4, r0
    14f4:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    14f6:	4b06      	ldr	r3, [pc, #24]	; (1510 <list_insert_as_head+0x20>)
    14f8:	4798      	blx	r3
    14fa:	f080 0001 	eor.w	r0, r0, #1
    14fe:	2243      	movs	r2, #67	; 0x43
    1500:	4904      	ldr	r1, [pc, #16]	; (1514 <list_insert_as_head+0x24>)
    1502:	b2c0      	uxtb	r0, r0
    1504:	4b04      	ldr	r3, [pc, #16]	; (1518 <list_insert_as_head+0x28>)
    1506:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1508:	6823      	ldr	r3, [r4, #0]
    150a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    150c:	6025      	str	r5, [r4, #0]
    150e:	bd38      	pop	{r3, r4, r5, pc}
    1510:	000014cf 	.word	0x000014cf
    1514:	0000487c 	.word	0x0000487c
    1518:	000014c9 	.word	0x000014c9

0000151c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    151c:	6803      	ldr	r3, [r0, #0]
    151e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1520:	6001      	str	r1, [r0, #0]
    1522:	4770      	bx	lr

00001524 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1524:	6803      	ldr	r3, [r0, #0]
    1526:	b10b      	cbz	r3, 152c <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1528:	681a      	ldr	r2, [r3, #0]
    152a:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    152c:	4618      	mov	r0, r3
    152e:	4770      	bx	lr

00001530 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1530:	b570      	push	{r4, r5, r6, lr}
    1532:	460e      	mov	r6, r1
    1534:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1536:	4604      	mov	r4, r0
    1538:	b178      	cbz	r0, 155a <ringbuffer_init+0x2a>
    153a:	b181      	cbz	r1, 155e <ringbuffer_init+0x2e>
    153c:	b1a2      	cbz	r2, 1568 <ringbuffer_init+0x38>
    153e:	2001      	movs	r0, #1
    1540:	2232      	movs	r2, #50	; 0x32
    1542:	490d      	ldr	r1, [pc, #52]	; (1578 <ringbuffer_init+0x48>)
    1544:	4b0d      	ldr	r3, [pc, #52]	; (157c <ringbuffer_init+0x4c>)
    1546:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1548:	1e6b      	subs	r3, r5, #1
    154a:	421d      	tst	r5, r3
    154c:	d109      	bne.n	1562 <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    154e:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1550:	2000      	movs	r0, #0
    1552:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1554:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1556:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1558:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    155a:	2000      	movs	r0, #0
    155c:	e7f0      	b.n	1540 <ringbuffer_init+0x10>
    155e:	2000      	movs	r0, #0
    1560:	e7ee      	b.n	1540 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1562:	f06f 000c 	mvn.w	r0, #12
    1566:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1568:	2232      	movs	r2, #50	; 0x32
    156a:	4903      	ldr	r1, [pc, #12]	; (1578 <ringbuffer_init+0x48>)
    156c:	2000      	movs	r0, #0
    156e:	4b03      	ldr	r3, [pc, #12]	; (157c <ringbuffer_init+0x4c>)
    1570:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1572:	1e6b      	subs	r3, r5, #1
    1574:	e7eb      	b.n	154e <ringbuffer_init+0x1e>
    1576:	bf00      	nop
    1578:	0000489c 	.word	0x0000489c
    157c:	000014c9 	.word	0x000014c9

00001580 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1580:	b538      	push	{r3, r4, r5, lr}
    1582:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1584:	4604      	mov	r4, r0
    1586:	b1a0      	cbz	r0, 15b2 <ringbuffer_get+0x32>
    1588:	1c08      	adds	r0, r1, #0
    158a:	bf18      	it	ne
    158c:	2001      	movne	r0, #1
    158e:	224a      	movs	r2, #74	; 0x4a
    1590:	490a      	ldr	r1, [pc, #40]	; (15bc <ringbuffer_get+0x3c>)
    1592:	4b0b      	ldr	r3, [pc, #44]	; (15c0 <ringbuffer_get+0x40>)
    1594:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1596:	68a3      	ldr	r3, [r4, #8]
    1598:	68e2      	ldr	r2, [r4, #12]
    159a:	429a      	cmp	r2, r3
    159c:	d00b      	beq.n	15b6 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    159e:	6862      	ldr	r2, [r4, #4]
    15a0:	4013      	ands	r3, r2
    15a2:	6822      	ldr	r2, [r4, #0]
    15a4:	5cd3      	ldrb	r3, [r2, r3]
    15a6:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    15a8:	68a3      	ldr	r3, [r4, #8]
    15aa:	3301      	adds	r3, #1
    15ac:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    15ae:	2000      	movs	r0, #0
    15b0:	bd38      	pop	{r3, r4, r5, pc}
    15b2:	2000      	movs	r0, #0
    15b4:	e7eb      	b.n	158e <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    15b6:	f06f 0009 	mvn.w	r0, #9
}
    15ba:	bd38      	pop	{r3, r4, r5, pc}
    15bc:	0000489c 	.word	0x0000489c
    15c0:	000014c9 	.word	0x000014c9

000015c4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    15c4:	b538      	push	{r3, r4, r5, lr}
    15c6:	460d      	mov	r5, r1
	ASSERT(rb);
    15c8:	4604      	mov	r4, r0
    15ca:	225b      	movs	r2, #91	; 0x5b
    15cc:	490b      	ldr	r1, [pc, #44]	; (15fc <ringbuffer_put+0x38>)
    15ce:	3000      	adds	r0, #0
    15d0:	bf18      	it	ne
    15d2:	2001      	movne	r0, #1
    15d4:	4b0a      	ldr	r3, [pc, #40]	; (1600 <ringbuffer_put+0x3c>)
    15d6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    15d8:	68e3      	ldr	r3, [r4, #12]
    15da:	6862      	ldr	r2, [r4, #4]
    15dc:	4013      	ands	r3, r2
    15de:	6822      	ldr	r2, [r4, #0]
    15e0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    15e2:	68e3      	ldr	r3, [r4, #12]
    15e4:	6861      	ldr	r1, [r4, #4]
    15e6:	68a2      	ldr	r2, [r4, #8]
    15e8:	1a9a      	subs	r2, r3, r2
    15ea:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    15ec:	bf84      	itt	hi
    15ee:	1a59      	subhi	r1, r3, r1
    15f0:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    15f2:	3301      	adds	r3, #1
    15f4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    15f6:	2000      	movs	r0, #0
    15f8:	bd38      	pop	{r3, r4, r5, pc}
    15fa:	bf00      	nop
    15fc:	0000489c 	.word	0x0000489c
    1600:	000014c9 	.word	0x000014c9

00001604 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1604:	b510      	push	{r4, lr}
	ASSERT(rb);
    1606:	4604      	mov	r4, r0
    1608:	2271      	movs	r2, #113	; 0x71
    160a:	4905      	ldr	r1, [pc, #20]	; (1620 <ringbuffer_num+0x1c>)
    160c:	3000      	adds	r0, #0
    160e:	bf18      	it	ne
    1610:	2001      	movne	r0, #1
    1612:	4b04      	ldr	r3, [pc, #16]	; (1624 <ringbuffer_num+0x20>)
    1614:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1616:	68e0      	ldr	r0, [r4, #12]
    1618:	68a3      	ldr	r3, [r4, #8]
}
    161a:	1ac0      	subs	r0, r0, r3
    161c:	bd10      	pop	{r4, pc}
    161e:	bf00      	nop
    1620:	0000489c 	.word	0x0000489c
    1624:	000014c9 	.word	0x000014c9

00001628 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1628:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    162a:	4a06      	ldr	r2, [pc, #24]	; (1644 <_sbrk+0x1c>)
    162c:	6812      	ldr	r2, [r2, #0]
    162e:	b122      	cbz	r2, 163a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1630:	4a04      	ldr	r2, [pc, #16]	; (1644 <_sbrk+0x1c>)
    1632:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1634:	4403      	add	r3, r0
    1636:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1638:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    163a:	4903      	ldr	r1, [pc, #12]	; (1648 <_sbrk+0x20>)
    163c:	4a01      	ldr	r2, [pc, #4]	; (1644 <_sbrk+0x1c>)
    163e:	6011      	str	r1, [r2, #0]
    1640:	e7f6      	b.n	1630 <_sbrk+0x8>
    1642:	bf00      	nop
    1644:	2000018c 	.word	0x2000018c
    1648:	20011ff0 	.word	0x20011ff0

0000164c <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    164c:	b510      	push	{r4, lr}
    164e:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    1650:	f44f 7281 	mov.w	r2, #258	; 0x102
    1654:	4915      	ldr	r1, [pc, #84]	; (16ac <_ac_init+0x60>)
    1656:	4816      	ldr	r0, [pc, #88]	; (16b0 <_ac_init+0x64>)
    1658:	4284      	cmp	r4, r0
    165a:	bf14      	ite	ne
    165c:	2000      	movne	r0, #0
    165e:	2001      	moveq	r0, #1
    1660:	4b14      	ldr	r3, [pc, #80]	; (16b4 <_ac_init+0x68>)
    1662:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1664:	6a23      	ldr	r3, [r4, #32]
    1666:	f013 0f01 	tst.w	r3, #1
    166a:	d1fb      	bne.n	1664 <_ac_init+0x18>
    166c:	6a23      	ldr	r3, [r4, #32]
    166e:	f013 0f03 	tst.w	r3, #3
    1672:	d1fb      	bne.n	166c <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1674:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    1676:	f013 0f02 	tst.w	r3, #2
    167a:	d114      	bne.n	16a6 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    167c:	6a23      	ldr	r3, [r4, #32]
    167e:	f013 0f01 	tst.w	r3, #1
    1682:	d1fb      	bne.n	167c <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    1684:	7823      	ldrb	r3, [r4, #0]
    1686:	f043 0301 	orr.w	r3, r3, #1
    168a:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    168c:	6a23      	ldr	r3, [r4, #32]
    168e:	f013 0f01 	tst.w	r3, #1
    1692:	d1fb      	bne.n	168c <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1694:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1698:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    169a:	2000      	movs	r0, #0
    169c:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    169e:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    16a0:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    16a2:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    16a4:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    16a6:	f06f 0010 	mvn.w	r0, #16
}
    16aa:	bd10      	pop	{r4, pc}
    16ac:	000048c0 	.word	0x000048c0
    16b0:	42002000 	.word	0x42002000
    16b4:	000014c9 	.word	0x000014c9

000016b8 <_ac_sync_init>:
{
    16b8:	b538      	push	{r3, r4, r5, lr}
    16ba:	460c      	mov	r4, r1
	ASSERT(device);
    16bc:	4605      	mov	r5, r0
    16be:	226c      	movs	r2, #108	; 0x6c
    16c0:	4905      	ldr	r1, [pc, #20]	; (16d8 <_ac_sync_init+0x20>)
    16c2:	3000      	adds	r0, #0
    16c4:	bf18      	it	ne
    16c6:	2001      	movne	r0, #1
    16c8:	4b04      	ldr	r3, [pc, #16]	; (16dc <_ac_sync_init+0x24>)
    16ca:	4798      	blx	r3
	device->hw = hw;
    16cc:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    16ce:	4620      	mov	r0, r4
    16d0:	4b03      	ldr	r3, [pc, #12]	; (16e0 <_ac_sync_init+0x28>)
    16d2:	4798      	blx	r3
}
    16d4:	bd38      	pop	{r3, r4, r5, pc}
    16d6:	bf00      	nop
    16d8:	000048c0 	.word	0x000048c0
    16dc:	000014c9 	.word	0x000014c9
    16e0:	0000164d 	.word	0x0000164d

000016e4 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    16e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16e6:	f013 0f01 	tst.w	r3, #1
    16ea:	d1fb      	bne.n	16e4 <_adc_init>
    16ec:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16ee:	f013 0f03 	tst.w	r3, #3
    16f2:	d1fb      	bne.n	16ec <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    16f4:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    16f6:	f013 0f02 	tst.w	r3, #2
    16fa:	d12a      	bne.n	1752 <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    16fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    16fe:	f013 0f01 	tst.w	r3, #1
    1702:	d1fb      	bne.n	16fc <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    1704:	8803      	ldrh	r3, [r0, #0]
    1706:	b29b      	uxth	r3, r3
    1708:	f043 0301 	orr.w	r3, r3, #1
    170c:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    170e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1710:	f013 0f01 	tst.w	r3, #1
    1714:	d1fb      	bne.n	170e <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1716:	2216      	movs	r2, #22
    1718:	4b0f      	ldr	r3, [pc, #60]	; (1758 <_adc_init+0x74>)
    171a:	fb02 3101 	mla	r1, r2, r1, r3
    171e:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1720:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1722:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1724:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1726:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1728:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    172a:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    172c:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    172e:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1730:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1732:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1734:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1736:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1738:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    173a:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    173c:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    173e:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    1740:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    1742:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    1744:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    1746:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    1748:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    174a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    174c:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    174e:	2000      	movs	r0, #0
    1750:	4770      	bx	lr
		return ERR_DENIED;
    1752:	f06f 0010 	mvn.w	r0, #16
}
    1756:	4770      	bx	lr
    1758:	000048d4 	.word	0x000048d4

0000175c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    175c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    1760:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1764:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    1768:	b148      	cbz	r0, 177e <_adc_get_regs+0x22>
    176a:	2801      	cmp	r0, #1
    176c:	d009      	beq.n	1782 <_adc_get_regs+0x26>
{
    176e:	b508      	push	{r3, lr}
	ASSERT(false);
    1770:	2291      	movs	r2, #145	; 0x91
    1772:	4905      	ldr	r1, [pc, #20]	; (1788 <_adc_get_regs+0x2c>)
    1774:	2000      	movs	r0, #0
    1776:	4b05      	ldr	r3, [pc, #20]	; (178c <_adc_get_regs+0x30>)
    1778:	4798      	blx	r3
	return 0;
    177a:	2000      	movs	r0, #0
    177c:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    177e:	2000      	movs	r0, #0
    1780:	4770      	bx	lr
    1782:	2001      	movs	r0, #1
    1784:	4770      	bx	lr
    1786:	bf00      	nop
    1788:	00004900 	.word	0x00004900
    178c:	000014c9 	.word	0x000014c9

00001790 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1790:	b538      	push	{r3, r4, r5, lr}
    1792:	460c      	mov	r4, r1
	ASSERT(device);
    1794:	4605      	mov	r5, r0
    1796:	22d5      	movs	r2, #213	; 0xd5
    1798:	4907      	ldr	r1, [pc, #28]	; (17b8 <_adc_sync_init+0x28>)
    179a:	3000      	adds	r0, #0
    179c:	bf18      	it	ne
    179e:	2001      	movne	r0, #1
    17a0:	4b06      	ldr	r3, [pc, #24]	; (17bc <_adc_sync_init+0x2c>)
    17a2:	4798      	blx	r3

	device->hw = hw;
    17a4:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    17a6:	4620      	mov	r0, r4
    17a8:	4b05      	ldr	r3, [pc, #20]	; (17c0 <_adc_sync_init+0x30>)
    17aa:	4798      	blx	r3
    17ac:	4601      	mov	r1, r0
    17ae:	4620      	mov	r0, r4
    17b0:	4b04      	ldr	r3, [pc, #16]	; (17c4 <_adc_sync_init+0x34>)
    17b2:	4798      	blx	r3
}
    17b4:	bd38      	pop	{r3, r4, r5, pc}
    17b6:	bf00      	nop
    17b8:	00004900 	.word	0x00004900
    17bc:	000014c9 	.word	0x000014c9
    17c0:	0000175d 	.word	0x0000175d
    17c4:	000016e5 	.word	0x000016e5

000017c8 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    17c8:	0943      	lsrs	r3, r0, #5
    17ca:	f000 001f 	and.w	r0, r0, #31
    17ce:	2201      	movs	r2, #1
    17d0:	fa02 f000 	lsl.w	r0, r2, r0
    17d4:	3340      	adds	r3, #64	; 0x40
    17d6:	4a02      	ldr	r2, [pc, #8]	; (17e0 <_irq_set+0x18>)
    17d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    17dc:	4770      	bx	lr
    17de:	bf00      	nop
    17e0:	e000e100 	.word	0xe000e100

000017e4 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    17e4:	f64b 3380 	movw	r3, #48000	; 0xbb80
    17e8:	fb03 f000 	mul.w	r0, r3, r0
    17ec:	4770      	bx	lr
	...

000017f0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    17f0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    17f2:	4a0c      	ldr	r2, [pc, #48]	; (1824 <_init_chip+0x34>)
    17f4:	8813      	ldrh	r3, [r2, #0]
    17f6:	b29b      	uxth	r3, r3
    17f8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    17fa:	4b0b      	ldr	r3, [pc, #44]	; (1828 <_init_chip+0x38>)
    17fc:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    17fe:	4b0b      	ldr	r3, [pc, #44]	; (182c <_init_chip+0x3c>)
    1800:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1802:	f44f 6000 	mov.w	r0, #2048	; 0x800
    1806:	4c0a      	ldr	r4, [pc, #40]	; (1830 <_init_chip+0x40>)
    1808:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    180a:	4b0a      	ldr	r3, [pc, #40]	; (1834 <_init_chip+0x44>)
    180c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    180e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    1812:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1814:	4a08      	ldr	r2, [pc, #32]	; (1838 <_init_chip+0x48>)
    1816:	6913      	ldr	r3, [r2, #16]
    1818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    181c:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    181e:	4b07      	ldr	r3, [pc, #28]	; (183c <_init_chip+0x4c>)
    1820:	4798      	blx	r3
    1822:	bd10      	pop	{r4, pc}
    1824:	41004000 	.word	0x41004000
    1828:	00001cc1 	.word	0x00001cc1
    182c:	00001be9 	.word	0x00001be9
    1830:	00001b41 	.word	0x00001b41
    1834:	00001ce5 	.word	0x00001ce5
    1838:	40000800 	.word	0x40000800
    183c:	00001949 	.word	0x00001949

00001840 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    1840:	b510      	push	{r4, lr}
    1842:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    1844:	22f3      	movs	r2, #243	; 0xf3
    1846:	4915      	ldr	r1, [pc, #84]	; (189c <_dac_init+0x5c>)
    1848:	4815      	ldr	r0, [pc, #84]	; (18a0 <_dac_init+0x60>)
    184a:	4284      	cmp	r4, r0
    184c:	bf14      	ite	ne
    184e:	2000      	movne	r0, #0
    1850:	2001      	moveq	r0, #1
    1852:	4b14      	ldr	r3, [pc, #80]	; (18a4 <_dac_init+0x64>)
    1854:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    1856:	68a3      	ldr	r3, [r4, #8]
    1858:	f013 0f01 	tst.w	r3, #1
    185c:	d1fb      	bne.n	1856 <_dac_init+0x16>
    185e:	68a3      	ldr	r3, [r4, #8]
    1860:	f013 0f03 	tst.w	r3, #3
    1864:	d1fb      	bne.n	185e <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1866:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    1868:	f013 0f02 	tst.w	r3, #2
    186c:	d113      	bne.n	1896 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    186e:	68a3      	ldr	r3, [r4, #8]
    1870:	f013 0f01 	tst.w	r3, #1
    1874:	d1fb      	bne.n	186e <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    1876:	7823      	ldrb	r3, [r4, #0]
    1878:	f043 0301 	orr.w	r3, r3, #1
    187c:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    187e:	68a3      	ldr	r3, [r4, #8]
    1880:	f013 0f01 	tst.w	r3, #1
    1884:	d1fb      	bne.n	187e <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    1886:	2000      	movs	r0, #0
    1888:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    188a:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    188c:	81a0      	strh	r0, [r4, #12]
    188e:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    1890:	2301      	movs	r3, #1
    1892:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    1894:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    1896:	f06f 0003 	mvn.w	r0, #3
}
    189a:	bd10      	pop	{r4, pc}
    189c:	00004918 	.word	0x00004918
    18a0:	43002400 	.word	0x43002400
    18a4:	000014c9 	.word	0x000014c9

000018a8 <_dac_sync_init>:
{
    18a8:	b538      	push	{r3, r4, r5, lr}
    18aa:	460c      	mov	r4, r1
	ASSERT(device);
    18ac:	4605      	mov	r5, r0
    18ae:	2261      	movs	r2, #97	; 0x61
    18b0:	4905      	ldr	r1, [pc, #20]	; (18c8 <_dac_sync_init+0x20>)
    18b2:	3000      	adds	r0, #0
    18b4:	bf18      	it	ne
    18b6:	2001      	movne	r0, #1
    18b8:	4b04      	ldr	r3, [pc, #16]	; (18cc <_dac_sync_init+0x24>)
    18ba:	4798      	blx	r3
	device->hw = hw;
    18bc:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    18be:	4620      	mov	r0, r4
    18c0:	4b03      	ldr	r3, [pc, #12]	; (18d0 <_dac_sync_init+0x28>)
    18c2:	4798      	blx	r3
}
    18c4:	bd38      	pop	{r3, r4, r5, pc}
    18c6:	bf00      	nop
    18c8:	00004918 	.word	0x00004918
    18cc:	000014c9 	.word	0x000014c9
    18d0:	00001841 	.word	0x00001841

000018d4 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    18d4:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    18d6:	4a1a      	ldr	r2, [pc, #104]	; (1940 <_dmac_handler+0x6c>)
    18d8:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    18da:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    18de:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    18e2:	4818      	ldr	r0, [pc, #96]	; (1944 <_dmac_handler+0x70>)
    18e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    18e8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    18ec:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    18f0:	f012 0f01 	tst.w	r2, #1
    18f4:	d10a      	bne.n	190c <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    18f6:	011a      	lsls	r2, r3, #4
    18f8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    18fc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1900:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    1904:	f012 0f02 	tst.w	r2, #2
    1908:	d10b      	bne.n	1922 <_dmac_handler+0x4e>
    190a:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    190c:	011a      	lsls	r2, r3, #4
    190e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1912:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1916:	2101      	movs	r1, #1
    1918:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    191c:	6843      	ldr	r3, [r0, #4]
    191e:	4798      	blx	r3
    1920:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    1922:	011a      	lsls	r2, r3, #4
    1924:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1928:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    192c:	2102      	movs	r1, #2
    192e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1932:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1936:	4a03      	ldr	r2, [pc, #12]	; (1944 <_dmac_handler+0x70>)
    1938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    193c:	4798      	blx	r3
	}
}
    193e:	e7e4      	b.n	190a <_dmac_handler+0x36>
    1940:	4100a000 	.word	0x4100a000
    1944:	20000190 	.word	0x20000190

00001948 <_dma_init>:
{
    1948:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    194a:	4a33      	ldr	r2, [pc, #204]	; (1a18 <_dma_init+0xd0>)
    194c:	8813      	ldrh	r3, [r2, #0]
    194e:	f023 0302 	bic.w	r3, r3, #2
    1952:	041b      	lsls	r3, r3, #16
    1954:	0c1b      	lsrs	r3, r3, #16
    1956:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1958:	8853      	ldrh	r3, [r2, #2]
    195a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    195e:	041b      	lsls	r3, r3, #16
    1960:	0c1b      	lsrs	r3, r3, #16
    1962:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1964:	8813      	ldrh	r3, [r2, #0]
    1966:	b29b      	uxth	r3, r3
    1968:	f043 0301 	orr.w	r3, r3, #1
    196c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    196e:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1970:	f013 0f01 	tst.w	r3, #1
    1974:	d1fb      	bne.n	196e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1976:	4b28      	ldr	r3, [pc, #160]	; (1a18 <_dma_init+0xd0>)
    1978:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    197c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    197e:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1980:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1984:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1986:	2000      	movs	r0, #0
    1988:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    198a:	4a24      	ldr	r2, [pc, #144]	; (1a1c <_dma_init+0xd4>)
    198c:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    1990:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    1992:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    1996:	639a      	str	r2, [r3, #56]	; 0x38
    1998:	4b21      	ldr	r3, [pc, #132]	; (1a20 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    199a:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    199e:	681c      	ldr	r4, [r3, #0]
    19a0:	0101      	lsls	r1, r0, #4
    19a2:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    19a6:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    19aa:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    19ac:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    19ae:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    19b2:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    19b4:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    19b8:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    19ba:	4429      	add	r1, r5
    19bc:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    19c0:	3001      	adds	r0, #1
    19c2:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    19c4:	2820      	cmp	r0, #32
    19c6:	d1ea      	bne.n	199e <_dma_init+0x56>
    19c8:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    19ca:	2001      	movs	r0, #1
    19cc:	4915      	ldr	r1, [pc, #84]	; (1a24 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    19ce:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    19d0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    19d4:	d00b      	beq.n	19ee <_dma_init+0xa6>
    19d6:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    19d8:	2b24      	cmp	r3, #36	; 0x24
    19da:	d1f8      	bne.n	19ce <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    19dc:	4a0e      	ldr	r2, [pc, #56]	; (1a18 <_dma_init+0xd0>)
    19de:	8813      	ldrh	r3, [r2, #0]
    19e0:	b29b      	uxth	r3, r3
    19e2:	f043 0302 	orr.w	r3, r3, #2
    19e6:	8013      	strh	r3, [r2, #0]
}
    19e8:	2000      	movs	r0, #0
    19ea:	bc30      	pop	{r4, r5}
    19ec:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    19ee:	095c      	lsrs	r4, r3, #5
    19f0:	f002 021f 	and.w	r2, r2, #31
    19f4:	fa00 f202 	lsl.w	r2, r0, r2
    19f8:	f104 0520 	add.w	r5, r4, #32
    19fc:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1a00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a04:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1a08:	f104 0560 	add.w	r5, r4, #96	; 0x60
    1a0c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1a10:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    1a14:	e7df      	b.n	19d6 <_dma_init+0x8e>
    1a16:	bf00      	nop
    1a18:	4100a000 	.word	0x4100a000
    1a1c:	20000190 	.word	0x20000190
    1a20:	00004930 	.word	0x00004930
    1a24:	e000e100 	.word	0xe000e100

00001a28 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    1a28:	b508      	push	{r3, lr}
	_dmac_handler();
    1a2a:	4b01      	ldr	r3, [pc, #4]	; (1a30 <DMAC_0_Handler+0x8>)
    1a2c:	4798      	blx	r3
    1a2e:	bd08      	pop	{r3, pc}
    1a30:	000018d5 	.word	0x000018d5

00001a34 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    1a34:	b508      	push	{r3, lr}
	_dmac_handler();
    1a36:	4b01      	ldr	r3, [pc, #4]	; (1a3c <DMAC_1_Handler+0x8>)
    1a38:	4798      	blx	r3
    1a3a:	bd08      	pop	{r3, pc}
    1a3c:	000018d5 	.word	0x000018d5

00001a40 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    1a40:	b508      	push	{r3, lr}
	_dmac_handler();
    1a42:	4b01      	ldr	r3, [pc, #4]	; (1a48 <DMAC_2_Handler+0x8>)
    1a44:	4798      	blx	r3
    1a46:	bd08      	pop	{r3, pc}
    1a48:	000018d5 	.word	0x000018d5

00001a4c <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    1a4c:	b508      	push	{r3, lr}
	_dmac_handler();
    1a4e:	4b01      	ldr	r3, [pc, #4]	; (1a54 <DMAC_3_Handler+0x8>)
    1a50:	4798      	blx	r3
    1a52:	bd08      	pop	{r3, pc}
    1a54:	000018d5 	.word	0x000018d5

00001a58 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    1a58:	b508      	push	{r3, lr}
	_dmac_handler();
    1a5a:	4b01      	ldr	r3, [pc, #4]	; (1a60 <DMAC_4_Handler+0x8>)
    1a5c:	4798      	blx	r3
    1a5e:	bd08      	pop	{r3, pc}
    1a60:	000018d5 	.word	0x000018d5

00001a64 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a64:	4a1e      	ldr	r2, [pc, #120]	; (1ae0 <_ext_irq_init+0x7c>)
    1a66:	6853      	ldr	r3, [r2, #4]
    1a68:	f013 0f01 	tst.w	r3, #1
    1a6c:	d1fb      	bne.n	1a66 <_ext_irq_init+0x2>
    1a6e:	4a1c      	ldr	r2, [pc, #112]	; (1ae0 <_ext_irq_init+0x7c>)
    1a70:	6853      	ldr	r3, [r2, #4]
    1a72:	f013 0f03 	tst.w	r3, #3
    1a76:	d1fb      	bne.n	1a70 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1a78:	4b19      	ldr	r3, [pc, #100]	; (1ae0 <_ext_irq_init+0x7c>)
    1a7a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    1a7c:	f013 0f02 	tst.w	r3, #2
    1a80:	d12b      	bne.n	1ada <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a82:	4a17      	ldr	r2, [pc, #92]	; (1ae0 <_ext_irq_init+0x7c>)
    1a84:	6853      	ldr	r3, [r2, #4]
    1a86:	f013 0f01 	tst.w	r3, #1
    1a8a:	d1fb      	bne.n	1a84 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    1a8c:	4a14      	ldr	r2, [pc, #80]	; (1ae0 <_ext_irq_init+0x7c>)
    1a8e:	7813      	ldrb	r3, [r2, #0]
    1a90:	f043 0301 	orr.w	r3, r3, #1
    1a94:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1a96:	6853      	ldr	r3, [r2, #4]
    1a98:	f013 0f01 	tst.w	r3, #1
    1a9c:	d1fb      	bne.n	1a96 <_ext_irq_init+0x32>
    1a9e:	4a10      	ldr	r2, [pc, #64]	; (1ae0 <_ext_irq_init+0x7c>)
    1aa0:	6853      	ldr	r3, [r2, #4]
    1aa2:	f013 0f03 	tst.w	r3, #3
    1aa6:	d1fb      	bne.n	1aa0 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1aa8:	4b0d      	ldr	r3, [pc, #52]	; (1ae0 <_ext_irq_init+0x7c>)
    1aaa:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1aac:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    1ab0:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    1ab2:	2200      	movs	r2, #0
    1ab4:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1ab6:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1ab8:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1aba:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1abc:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1abe:	61da      	str	r2, [r3, #28]
    1ac0:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1ac2:	461a      	mov	r2, r3
    1ac4:	6853      	ldr	r3, [r2, #4]
    1ac6:	f013 0f03 	tst.w	r3, #3
    1aca:	d1fb      	bne.n	1ac4 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1acc:	4a04      	ldr	r2, [pc, #16]	; (1ae0 <_ext_irq_init+0x7c>)
    1ace:	7813      	ldrb	r3, [r2, #0]
    1ad0:	f043 0302 	orr.w	r3, r3, #2
    1ad4:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    1ad6:	2000      	movs	r0, #0
    1ad8:	4770      	bx	lr
		return ERR_DENIED;
    1ada:	f06f 0010 	mvn.w	r0, #16
}
    1ade:	4770      	bx	lr
    1ae0:	40002800 	.word	0x40002800

00001ae4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1ae4:	b430      	push	{r4, r5}
    1ae6:	4814      	ldr	r0, [pc, #80]	; (1b38 <_event_system_init+0x54>)
    1ae8:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1aec:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1aee:	4c13      	ldr	r4, [pc, #76]	; (1b3c <_event_system_init+0x58>)
    1af0:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    1af2:	f813 1b01 	ldrb.w	r1, [r3], #1
    1af6:	3248      	adds	r2, #72	; 0x48
    1af8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1afc:	42ab      	cmp	r3, r5
    1afe:	d1f7      	bne.n	1af0 <_event_system_init+0xc>
    1b00:	480d      	ldr	r0, [pc, #52]	; (1b38 <_event_system_init+0x54>)
    1b02:	f100 0442 	add.w	r4, r0, #66	; 0x42
    1b06:	3080      	adds	r0, #128	; 0x80
    1b08:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1b0a:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1b0e:	00ca      	lsls	r2, r1, #3
    1b10:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1b14:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1b18:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1b1a:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1b1e:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1b20:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1b24:	43db      	mvns	r3, r3
    1b26:	b2db      	uxtb	r3, r3
    1b28:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    1b2c:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1b2e:	2920      	cmp	r1, #32
    1b30:	d1eb      	bne.n	1b0a <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    1b32:	2000      	movs	r0, #0
    1b34:	bc30      	pop	{r4, r5}
    1b36:	4770      	bx	lr
    1b38:	00004a30 	.word	0x00004a30
    1b3c:	4100e000 	.word	0x4100e000

00001b40 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    1b40:	f010 0f01 	tst.w	r0, #1
    1b44:	d002      	beq.n	1b4c <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1b46:	4a23      	ldr	r2, [pc, #140]	; (1bd4 <_gclk_init_generators_by_fref+0x94>)
    1b48:	4b23      	ldr	r3, [pc, #140]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1b4a:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    1b4c:	f010 0f02 	tst.w	r0, #2
    1b50:	d002      	beq.n	1b58 <_gclk_init_generators_by_fref+0x18>
    1b52:	4a22      	ldr	r2, [pc, #136]	; (1bdc <_gclk_init_generators_by_fref+0x9c>)
    1b54:	4b20      	ldr	r3, [pc, #128]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1b56:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    1b58:	f010 0f04 	tst.w	r0, #4
    1b5c:	d002      	beq.n	1b64 <_gclk_init_generators_by_fref+0x24>
    1b5e:	4a1d      	ldr	r2, [pc, #116]	; (1bd4 <_gclk_init_generators_by_fref+0x94>)
    1b60:	4b1d      	ldr	r3, [pc, #116]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1b62:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    1b64:	f010 0f08 	tst.w	r0, #8
    1b68:	d002      	beq.n	1b70 <_gclk_init_generators_by_fref+0x30>
    1b6a:	4a1a      	ldr	r2, [pc, #104]	; (1bd4 <_gclk_init_generators_by_fref+0x94>)
    1b6c:	4b1a      	ldr	r3, [pc, #104]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1b6e:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    1b70:	f010 0f10 	tst.w	r0, #16
    1b74:	d002      	beq.n	1b7c <_gclk_init_generators_by_fref+0x3c>
    1b76:	4a17      	ldr	r2, [pc, #92]	; (1bd4 <_gclk_init_generators_by_fref+0x94>)
    1b78:	4b17      	ldr	r3, [pc, #92]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1b7a:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    1b7c:	f010 0f20 	tst.w	r0, #32
    1b80:	d002      	beq.n	1b88 <_gclk_init_generators_by_fref+0x48>
    1b82:	4a14      	ldr	r2, [pc, #80]	; (1bd4 <_gclk_init_generators_by_fref+0x94>)
    1b84:	4b14      	ldr	r3, [pc, #80]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1b86:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    1b88:	f010 0f40 	tst.w	r0, #64	; 0x40
    1b8c:	d002      	beq.n	1b94 <_gclk_init_generators_by_fref+0x54>
    1b8e:	4a11      	ldr	r2, [pc, #68]	; (1bd4 <_gclk_init_generators_by_fref+0x94>)
    1b90:	4b11      	ldr	r3, [pc, #68]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1b92:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    1b94:	f010 0f80 	tst.w	r0, #128	; 0x80
    1b98:	d002      	beq.n	1ba0 <_gclk_init_generators_by_fref+0x60>
    1b9a:	4a0e      	ldr	r2, [pc, #56]	; (1bd4 <_gclk_init_generators_by_fref+0x94>)
    1b9c:	4b0e      	ldr	r3, [pc, #56]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1b9e:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    1ba0:	f410 7f80 	tst.w	r0, #256	; 0x100
    1ba4:	d002      	beq.n	1bac <_gclk_init_generators_by_fref+0x6c>
    1ba6:	4a0b      	ldr	r2, [pc, #44]	; (1bd4 <_gclk_init_generators_by_fref+0x94>)
    1ba8:	4b0b      	ldr	r3, [pc, #44]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1baa:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    1bac:	f410 7f00 	tst.w	r0, #512	; 0x200
    1bb0:	d002      	beq.n	1bb8 <_gclk_init_generators_by_fref+0x78>
    1bb2:	4a08      	ldr	r2, [pc, #32]	; (1bd4 <_gclk_init_generators_by_fref+0x94>)
    1bb4:	4b08      	ldr	r3, [pc, #32]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1bb6:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    1bb8:	f410 6f80 	tst.w	r0, #1024	; 0x400
    1bbc:	d002      	beq.n	1bc4 <_gclk_init_generators_by_fref+0x84>
    1bbe:	4a08      	ldr	r2, [pc, #32]	; (1be0 <_gclk_init_generators_by_fref+0xa0>)
    1bc0:	4b05      	ldr	r3, [pc, #20]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1bc2:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    1bc4:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1bc8:	d002      	beq.n	1bd0 <_gclk_init_generators_by_fref+0x90>
    1bca:	4a06      	ldr	r2, [pc, #24]	; (1be4 <_gclk_init_generators_by_fref+0xa4>)
    1bcc:	4b02      	ldr	r3, [pc, #8]	; (1bd8 <_gclk_init_generators_by_fref+0x98>)
    1bce:	64da      	str	r2, [r3, #76]	; 0x4c
    1bd0:	4770      	bx	lr
    1bd2:	bf00      	nop
    1bd4:	00012b06 	.word	0x00012b06
    1bd8:	40001c00 	.word	0x40001c00
    1bdc:	00012306 	.word	0x00012306
    1be0:	00012b05 	.word	0x00012b05
    1be4:	00013b05 	.word	0x00013b05

00001be8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1be8:	2201      	movs	r2, #1
    1bea:	4b01      	ldr	r3, [pc, #4]	; (1bf0 <_mclk_init+0x8>)
    1bec:	715a      	strb	r2, [r3, #5]
    1bee:	4770      	bx	lr
    1bf0:	40000800 	.word	0x40000800

00001bf4 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    1bf4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1bf6:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1bf8:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1bfa:	f012 0f01 	tst.w	r2, #1
    1bfe:	d005      	beq.n	1c0c <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1c00:	2201      	movs	r2, #1
    1c02:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    1c04:	6803      	ldr	r3, [r0, #0]
    1c06:	b153      	cbz	r3, 1c1e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    1c08:	4798      	blx	r3
    1c0a:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1c0c:	8a1a      	ldrh	r2, [r3, #16]
    1c0e:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1c10:	b12a      	cbz	r2, 1c1e <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1c12:	f240 225e 	movw	r2, #606	; 0x25e
    1c16:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1c18:	6843      	ldr	r3, [r0, #4]
    1c1a:	b103      	cbz	r3, 1c1e <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1c1c:	4798      	blx	r3
    1c1e:	bd08      	pop	{r3, pc}

00001c20 <_flash_init>:
{
    1c20:	b538      	push	{r3, r4, r5, lr}
    1c22:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1c24:	4605      	mov	r5, r0
    1c26:	b350      	cbz	r0, 1c7e <_flash_init+0x5e>
    1c28:	4816      	ldr	r0, [pc, #88]	; (1c84 <_flash_init+0x64>)
    1c2a:	4281      	cmp	r1, r0
    1c2c:	bf14      	ite	ne
    1c2e:	2000      	movne	r0, #0
    1c30:	2001      	moveq	r0, #1
    1c32:	2256      	movs	r2, #86	; 0x56
    1c34:	4914      	ldr	r1, [pc, #80]	; (1c88 <_flash_init+0x68>)
    1c36:	4b15      	ldr	r3, [pc, #84]	; (1c8c <_flash_init+0x6c>)
    1c38:	4798      	blx	r3
	device->hw = hw;
    1c3a:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    1c3c:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    1c3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    1c42:	049b      	lsls	r3, r3, #18
    1c44:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1c46:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    1c48:	4b11      	ldr	r3, [pc, #68]	; (1c90 <_flash_init+0x70>)
    1c4a:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1c4c:	4b11      	ldr	r3, [pc, #68]	; (1c94 <_flash_init+0x74>)
    1c4e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1c52:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1c56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c5a:	f3bf 8f6f 	isb	sy
    1c5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1c66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c6a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1c6e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    1c72:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1c76:	6019      	str	r1, [r3, #0]
    1c78:	601a      	str	r2, [r3, #0]
}
    1c7a:	2000      	movs	r0, #0
    1c7c:	bd38      	pop	{r3, r4, r5, pc}
    1c7e:	2000      	movs	r0, #0
    1c80:	e7d7      	b.n	1c32 <_flash_init+0x12>
    1c82:	bf00      	nop
    1c84:	41004000 	.word	0x41004000
    1c88:	00004b34 	.word	0x00004b34
    1c8c:	000014c9 	.word	0x000014c9
    1c90:	20000710 	.word	0x20000710
    1c94:	e000e100 	.word	0xe000e100

00001c98 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1c98:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1c9a:	4b02      	ldr	r3, [pc, #8]	; (1ca4 <NVMCTRL_0_Handler+0xc>)
    1c9c:	6818      	ldr	r0, [r3, #0]
    1c9e:	4b02      	ldr	r3, [pc, #8]	; (1ca8 <NVMCTRL_0_Handler+0x10>)
    1ca0:	4798      	blx	r3
    1ca2:	bd08      	pop	{r3, pc}
    1ca4:	20000710 	.word	0x20000710
    1ca8:	00001bf5 	.word	0x00001bf5

00001cac <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1cac:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1cae:	4b02      	ldr	r3, [pc, #8]	; (1cb8 <NVMCTRL_1_Handler+0xc>)
    1cb0:	6818      	ldr	r0, [r3, #0]
    1cb2:	4b02      	ldr	r3, [pc, #8]	; (1cbc <NVMCTRL_1_Handler+0x10>)
    1cb4:	4798      	blx	r3
    1cb6:	bd08      	pop	{r3, pc}
    1cb8:	20000710 	.word	0x20000710
    1cbc:	00001bf5 	.word	0x00001bf5

00001cc0 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1cc0:	4b07      	ldr	r3, [pc, #28]	; (1ce0 <_osc32kctrl_init_sources+0x20>)
    1cc2:	f242 024e 	movw	r2, #8270	; 0x204e
    1cc6:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1cc8:	2201      	movs	r2, #1
    1cca:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1ccc:	75da      	strb	r2, [r3, #23]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    1cce:	461a      	mov	r2, r3
    1cd0:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    1cd2:	f013 0f01 	tst.w	r3, #1
    1cd6:	d0fb      	beq.n	1cd0 <_osc32kctrl_init_sources+0x10>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1cd8:	2205      	movs	r2, #5
    1cda:	4b01      	ldr	r3, [pc, #4]	; (1ce0 <_osc32kctrl_init_sources+0x20>)
    1cdc:	741a      	strb	r2, [r3, #16]
    1cde:	4770      	bx	lr
    1ce0:	40001400 	.word	0x40001400

00001ce4 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1ce4:	4a2b      	ldr	r2, [pc, #172]	; (1d94 <_oscctrl_init_referenced_generators+0xb0>)
    1ce6:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1ce8:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1cec:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1cf0:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1cf2:	4b29      	ldr	r3, [pc, #164]	; (1d98 <_oscctrl_init_referenced_generators+0xb4>)
    1cf4:	2200      	movs	r2, #0
    1cf6:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1cf8:	4a28      	ldr	r2, [pc, #160]	; (1d9c <_oscctrl_init_referenced_generators+0xb8>)
    1cfa:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1cfc:	461a      	mov	r2, r3
    1cfe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1d02:	f013 0f10 	tst.w	r3, #16
    1d06:	d1fa      	bne.n	1cfe <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1d08:	2200      	movs	r2, #0
    1d0a:	4b23      	ldr	r3, [pc, #140]	; (1d98 <_oscctrl_init_referenced_generators+0xb4>)
    1d0c:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1d10:	461a      	mov	r2, r3
    1d12:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1d16:	f013 0f04 	tst.w	r3, #4
    1d1a:	d1fa      	bne.n	1d12 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1d1c:	2242      	movs	r2, #66	; 0x42
    1d1e:	4b1e      	ldr	r3, [pc, #120]	; (1d98 <_oscctrl_init_referenced_generators+0xb4>)
    1d20:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1d22:	461a      	mov	r2, r3
    1d24:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1d28:	f013 0f02 	tst.w	r3, #2
    1d2c:	d1fa      	bne.n	1d24 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1d2e:	4b1a      	ldr	r3, [pc, #104]	; (1d98 <_oscctrl_init_referenced_generators+0xb4>)
    1d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1d32:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1d34:	461a      	mov	r2, r3
    1d36:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1d3a:	f013 0f08 	tst.w	r3, #8
    1d3e:	d1fa      	bne.n	1d36 <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1d40:	2282      	movs	r2, #130	; 0x82
    1d42:	4b15      	ldr	r3, [pc, #84]	; (1d98 <_oscctrl_init_referenced_generators+0xb4>)
    1d44:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1d48:	461a      	mov	r2, r3
    1d4a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1d4e:	f013 0f04 	tst.w	r3, #4
    1d52:	d1fa      	bne.n	1d4a <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1d54:	4b10      	ldr	r3, [pc, #64]	; (1d98 <_oscctrl_init_referenced_generators+0xb4>)
    1d56:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1d5a:	f013 0f01 	tst.w	r3, #1
    1d5e:	d012      	beq.n	1d86 <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1d60:	4a0d      	ldr	r2, [pc, #52]	; (1d98 <_oscctrl_init_referenced_generators+0xb4>)
    1d62:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1d64:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1d68:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1d6c:	d1f9      	bne.n	1d62 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1d6e:	4a09      	ldr	r2, [pc, #36]	; (1d94 <_oscctrl_init_referenced_generators+0xb0>)
    1d70:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1d72:	2b00      	cmp	r3, #0
    1d74:	d1fc      	bne.n	1d70 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1d76:	4a07      	ldr	r2, [pc, #28]	; (1d94 <_oscctrl_init_referenced_generators+0xb0>)
    1d78:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1d7a:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1d7e:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1d82:	6213      	str	r3, [r2, #32]
    1d84:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1d86:	4a04      	ldr	r2, [pc, #16]	; (1d98 <_oscctrl_init_referenced_generators+0xb4>)
    1d88:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1d8a:	f413 7f80 	tst.w	r3, #256	; 0x100
    1d8e:	d0fb      	beq.n	1d88 <_oscctrl_init_referenced_generators+0xa4>
    1d90:	e7ed      	b.n	1d6e <_oscctrl_init_referenced_generators+0x8a>
    1d92:	bf00      	nop
    1d94:	40001c00 	.word	0x40001c00
    1d98:	40001000 	.word	0x40001000
    1d9c:	04010000 	.word	0x04010000

00001da0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1da0:	b500      	push	{lr}
    1da2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1da4:	4b0d      	ldr	r3, [pc, #52]	; (1ddc <RAMECC_Handler+0x3c>)
    1da6:	789b      	ldrb	r3, [r3, #2]
    1da8:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1daa:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1dac:	9b01      	ldr	r3, [sp, #4]
    1dae:	f013 0f02 	tst.w	r3, #2
    1db2:	d006      	beq.n	1dc2 <RAMECC_Handler+0x22>
    1db4:	4b0a      	ldr	r3, [pc, #40]	; (1de0 <RAMECC_Handler+0x40>)
    1db6:	681b      	ldr	r3, [r3, #0]
    1db8:	b11b      	cbz	r3, 1dc2 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1dba:	4a08      	ldr	r2, [pc, #32]	; (1ddc <RAMECC_Handler+0x3c>)
    1dbc:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1dbe:	4798      	blx	r3
    1dc0:	e009      	b.n	1dd6 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1dc2:	9b01      	ldr	r3, [sp, #4]
    1dc4:	f013 0f01 	tst.w	r3, #1
    1dc8:	d005      	beq.n	1dd6 <RAMECC_Handler+0x36>
    1dca:	4b05      	ldr	r3, [pc, #20]	; (1de0 <RAMECC_Handler+0x40>)
    1dcc:	685b      	ldr	r3, [r3, #4]
    1dce:	b113      	cbz	r3, 1dd6 <RAMECC_Handler+0x36>
    1dd0:	4a02      	ldr	r2, [pc, #8]	; (1ddc <RAMECC_Handler+0x3c>)
    1dd2:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1dd4:	4798      	blx	r3
	} else {
		return;
	}
}
    1dd6:	b003      	add	sp, #12
    1dd8:	f85d fb04 	ldr.w	pc, [sp], #4
    1ddc:	41020000 	.word	0x41020000
    1de0:	20001fc8 	.word	0x20001fc8

00001de4 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1de4:	b470      	push	{r4, r5, r6}
    1de6:	b087      	sub	sp, #28
    1de8:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1dea:	466c      	mov	r4, sp
    1dec:	4d0c      	ldr	r5, [pc, #48]	; (1e20 <_sercom_get_hardware_index+0x3c>)
    1dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1df2:	e895 0003 	ldmia.w	r5, {r0, r1}
    1df6:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1dfa:	9b00      	ldr	r3, [sp, #0]
    1dfc:	42b3      	cmp	r3, r6
    1dfe:	d00c      	beq.n	1e1a <_sercom_get_hardware_index+0x36>
    1e00:	4632      	mov	r2, r6
    1e02:	2001      	movs	r0, #1
    1e04:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    1e08:	4293      	cmp	r3, r2
    1e0a:	d007      	beq.n	1e1c <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e0c:	3001      	adds	r0, #1
    1e0e:	2806      	cmp	r0, #6
    1e10:	d1f8      	bne.n	1e04 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    1e12:	2000      	movs	r0, #0
}
    1e14:	b007      	add	sp, #28
    1e16:	bc70      	pop	{r4, r5, r6}
    1e18:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1e1a:	2000      	movs	r0, #0
			return i;
    1e1c:	b2c0      	uxtb	r0, r0
    1e1e:	e7f9      	b.n	1e14 <_sercom_get_hardware_index+0x30>
    1e20:	00004b54 	.word	0x00004b54

00001e24 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1e24:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1e26:	4b03      	ldr	r3, [pc, #12]	; (1e34 <_sercom_get_irq_num+0x10>)
    1e28:	4798      	blx	r3
    1e2a:	0080      	lsls	r0, r0, #2
    1e2c:	302e      	adds	r0, #46	; 0x2e
}
    1e2e:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1e32:	bd08      	pop	{r3, pc}
    1e34:	00001de5 	.word	0x00001de5

00001e38 <_usart_init>:
{
    1e38:	b538      	push	{r3, r4, r5, lr}
    1e3a:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1e3c:	4b33      	ldr	r3, [pc, #204]	; (1f0c <_usart_init+0xd4>)
    1e3e:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1e40:	2803      	cmp	r0, #3
    1e42:	d056      	beq.n	1ef2 <_usart_init+0xba>
    1e44:	2804      	cmp	r0, #4
    1e46:	d052      	beq.n	1eee <_usart_init+0xb6>
    1e48:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1e4a:	bf08      	it	eq
    1e4c:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    1e4e:	d006      	beq.n	1e5e <_usart_init+0x26>
	ASSERT(false);
    1e50:	f240 2262 	movw	r2, #610	; 0x262
    1e54:	492e      	ldr	r1, [pc, #184]	; (1f10 <_usart_init+0xd8>)
    1e56:	2000      	movs	r0, #0
    1e58:	4b2e      	ldr	r3, [pc, #184]	; (1f14 <_usart_init+0xdc>)
    1e5a:	4798      	blx	r3
	return 0;
    1e5c:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e5e:	69e3      	ldr	r3, [r4, #28]
    1e60:	f013 0f01 	tst.w	r3, #1
    1e64:	d1fb      	bne.n	1e5e <_usart_init+0x26>
    1e66:	69e3      	ldr	r3, [r4, #28]
    1e68:	f013 0f03 	tst.w	r3, #3
    1e6c:	d1fb      	bne.n	1e66 <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1e6e:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    1e70:	f013 0f02 	tst.w	r3, #2
    1e74:	d147      	bne.n	1f06 <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e76:	69e3      	ldr	r3, [r4, #28]
    1e78:	f013 0f01 	tst.w	r3, #1
    1e7c:	d1fb      	bne.n	1e76 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    1e7e:	6823      	ldr	r3, [r4, #0]
    1e80:	f043 0301 	orr.w	r3, r3, #1
    1e84:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1e86:	69e3      	ldr	r3, [r4, #28]
    1e88:	f013 0f01 	tst.w	r3, #1
    1e8c:	d1fb      	bne.n	1e86 <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1e8e:	4610      	mov	r0, r2
    1e90:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    1e94:	4920      	ldr	r1, [pc, #128]	; (1f18 <_usart_init+0xe0>)
    1e96:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1e9a:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1e9c:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1e9e:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1ea0:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1ea4:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1ea6:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    1eaa:	d024      	beq.n	1ef6 <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1eac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1eb0:	4b19      	ldr	r3, [pc, #100]	; (1f18 <_usart_init+0xe0>)
    1eb2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1eb6:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    1eb8:	89a3      	ldrh	r3, [r4, #12]
    1eba:	f361 030c 	bfi	r3, r1, #0, #13
    1ebe:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1ec0:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    1ec4:	89a3      	ldrh	r3, [r4, #12]
    1ec6:	f362 334f 	bfi	r3, r2, #13, #3
    1eca:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1ecc:	4b12      	ldr	r3, [pc, #72]	; (1f18 <_usart_init+0xe0>)
    1ece:	0042      	lsls	r2, r0, #1
    1ed0:	1811      	adds	r1, r2, r0
    1ed2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1ed6:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1eda:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1edc:	4402      	add	r2, r0
    1ede:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1ee2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1ee6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    1eea:	2000      	movs	r0, #0
    1eec:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1eee:	2201      	movs	r2, #1
    1ef0:	e7b5      	b.n	1e5e <_usart_init+0x26>
    1ef2:	2200      	movs	r2, #0
    1ef4:	e7b3      	b.n	1e5e <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1ef6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1efa:	4b07      	ldr	r3, [pc, #28]	; (1f18 <_usart_init+0xe0>)
    1efc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1f00:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    1f02:	81a3      	strh	r3, [r4, #12]
    1f04:	e7e2      	b.n	1ecc <_usart_init+0x94>
		return ERR_DENIED;
    1f06:	f06f 0010 	mvn.w	r0, #16
}
    1f0a:	bd38      	pop	{r3, r4, r5, pc}
    1f0c:	00001de5 	.word	0x00001de5
    1f10:	00004be0 	.word	0x00004be0
    1f14:	000014c9 	.word	0x000014c9
    1f18:	00004b54 	.word	0x00004b54

00001f1c <_usart_async_init>:
{
    1f1c:	b570      	push	{r4, r5, r6, lr}
    1f1e:	460d      	mov	r5, r1
	ASSERT(device);
    1f20:	4606      	mov	r6, r0
    1f22:	22da      	movs	r2, #218	; 0xda
    1f24:	4915      	ldr	r1, [pc, #84]	; (1f7c <_usart_async_init+0x60>)
    1f26:	3000      	adds	r0, #0
    1f28:	bf18      	it	ne
    1f2a:	2001      	movne	r0, #1
    1f2c:	4b14      	ldr	r3, [pc, #80]	; (1f80 <_usart_async_init+0x64>)
    1f2e:	4798      	blx	r3
	init_status = _usart_init(hw);
    1f30:	4628      	mov	r0, r5
    1f32:	4b14      	ldr	r3, [pc, #80]	; (1f84 <_usart_async_init+0x68>)
    1f34:	4798      	blx	r3
	if (init_status) {
    1f36:	4604      	mov	r4, r0
    1f38:	b9e8      	cbnz	r0, 1f76 <_usart_async_init+0x5a>
	device->hw = hw;
    1f3a:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    1f3c:	4628      	mov	r0, r5
    1f3e:	4b12      	ldr	r3, [pc, #72]	; (1f88 <_usart_async_init+0x6c>)
    1f40:	4798      	blx	r3
    1f42:	1d01      	adds	r1, r0, #4
    1f44:	b2c9      	uxtb	r1, r1
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1f46:	2501      	movs	r5, #1
    1f48:	f000 021f 	and.w	r2, r0, #31
    1f4c:	fa05 f202 	lsl.w	r2, r5, r2
    1f50:	0943      	lsrs	r3, r0, #5
    1f52:	009b      	lsls	r3, r3, #2
    1f54:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1f58:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1f60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f64:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1f68:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1f6c:	601a      	str	r2, [r3, #0]
		irq++;
    1f6e:	3001      	adds	r0, #1
    1f70:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    1f72:	4281      	cmp	r1, r0
    1f74:	d1e8      	bne.n	1f48 <_usart_async_init+0x2c>
}
    1f76:	4620      	mov	r0, r4
    1f78:	bd70      	pop	{r4, r5, r6, pc}
    1f7a:	bf00      	nop
    1f7c:	00004be0 	.word	0x00004be0
    1f80:	000014c9 	.word	0x000014c9
    1f84:	00001e39 	.word	0x00001e39
    1f88:	00001e25 	.word	0x00001e25

00001f8c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1f8c:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1f8e:	69d3      	ldr	r3, [r2, #28]
    1f90:	f013 0f03 	tst.w	r3, #3
    1f94:	d1fb      	bne.n	1f8e <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1f96:	6813      	ldr	r3, [r2, #0]
    1f98:	f043 0302 	orr.w	r3, r3, #2
    1f9c:	6013      	str	r3, [r2, #0]
    1f9e:	4770      	bx	lr

00001fa0 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1fa0:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    1fa2:	6299      	str	r1, [r3, #40]	; 0x28
    1fa4:	4770      	bx	lr

00001fa6 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1fa6:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    1fa8:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1faa:	b2c0      	uxtb	r0, r0
    1fac:	4770      	bx	lr

00001fae <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1fae:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1fb0:	7e18      	ldrb	r0, [r3, #24]
}
    1fb2:	f000 0001 	and.w	r0, r0, #1
    1fb6:	4770      	bx	lr

00001fb8 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1fb8:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1fba:	7e18      	ldrb	r0, [r3, #24]
}
    1fbc:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1fc0:	4770      	bx	lr

00001fc2 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1fc2:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1fc4:	2201      	movs	r2, #1
    1fc6:	759a      	strb	r2, [r3, #22]
    1fc8:	4770      	bx	lr

00001fca <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1fca:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1fcc:	2202      	movs	r2, #2
    1fce:	759a      	strb	r2, [r3, #22]
    1fd0:	4770      	bx	lr
	...

00001fd4 <_usart_async_set_irq_state>:
{
    1fd4:	b570      	push	{r4, r5, r6, lr}
    1fd6:	460c      	mov	r4, r1
    1fd8:	4616      	mov	r6, r2
	ASSERT(device);
    1fda:	4605      	mov	r5, r0
    1fdc:	f44f 7211 	mov.w	r2, #580	; 0x244
    1fe0:	4915      	ldr	r1, [pc, #84]	; (2038 <_usart_async_set_irq_state+0x64>)
    1fe2:	3000      	adds	r0, #0
    1fe4:	bf18      	it	ne
    1fe6:	2001      	movne	r0, #1
    1fe8:	4b14      	ldr	r3, [pc, #80]	; (203c <_usart_async_set_irq_state+0x68>)
    1fea:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1fec:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    1ff0:	d10d      	bne.n	200e <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1ff2:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1ff4:	b92e      	cbnz	r6, 2002 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1ff6:	2201      	movs	r2, #1
    1ff8:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1ffa:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1ffc:	2202      	movs	r2, #2
    1ffe:	751a      	strb	r2, [r3, #20]
    2000:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    2002:	2201      	movs	r2, #1
    2004:	759a      	strb	r2, [r3, #22]
    2006:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    2008:	2202      	movs	r2, #2
    200a:	759a      	strb	r2, [r3, #22]
    200c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    200e:	2c01      	cmp	r4, #1
    2010:	d002      	beq.n	2018 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    2012:	2c03      	cmp	r4, #3
    2014:	d008      	beq.n	2028 <_usart_async_set_irq_state+0x54>
    2016:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    2018:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    201a:	b916      	cbnz	r6, 2022 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    201c:	2204      	movs	r2, #4
    201e:	751a      	strb	r2, [r3, #20]
    2020:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    2022:	2204      	movs	r2, #4
    2024:	759a      	strb	r2, [r3, #22]
    2026:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    2028:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    202a:	b116      	cbz	r6, 2032 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    202c:	2280      	movs	r2, #128	; 0x80
    202e:	759a      	strb	r2, [r3, #22]
}
    2030:	e7f1      	b.n	2016 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    2032:	2280      	movs	r2, #128	; 0x80
    2034:	751a      	strb	r2, [r3, #20]
    2036:	bd70      	pop	{r4, r5, r6, pc}
    2038:	00004be0 	.word	0x00004be0
    203c:	000014c9 	.word	0x000014c9

00002040 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    2040:	4b03      	ldr	r3, [pc, #12]	; (2050 <_delay_init+0x10>)
    2042:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2046:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2048:	2205      	movs	r2, #5
    204a:	601a      	str	r2, [r3, #0]
    204c:	4770      	bx	lr
    204e:	bf00      	nop
    2050:	e000e010 	.word	0xe000e010

00002054 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2054:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2056:	b303      	cbz	r3, 209a <_delay_cycles+0x46>
{
    2058:	b430      	push	{r4, r5}
    205a:	1e5d      	subs	r5, r3, #1
    205c:	b2ed      	uxtb	r5, r5
	while (n--) {
    205e:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    2060:	4a12      	ldr	r2, [pc, #72]	; (20ac <_delay_cycles+0x58>)
    2062:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2066:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2068:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    206a:	6813      	ldr	r3, [r2, #0]
    206c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2070:	d0fb      	beq.n	206a <_delay_cycles+0x16>
	while (n--) {
    2072:	3801      	subs	r0, #1
    2074:	b2c0      	uxtb	r0, r0
    2076:	28ff      	cmp	r0, #255	; 0xff
    2078:	d1f5      	bne.n	2066 <_delay_cycles+0x12>
    207a:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    207e:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    2082:	3101      	adds	r1, #1
    2084:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2086:	4b09      	ldr	r3, [pc, #36]	; (20ac <_delay_cycles+0x58>)
    2088:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    208a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    208c:	461a      	mov	r2, r3
    208e:	6813      	ldr	r3, [r2, #0]
    2090:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2094:	d0fb      	beq.n	208e <_delay_cycles+0x3a>
		;
}
    2096:	bc30      	pop	{r4, r5}
    2098:	4770      	bx	lr
	SysTick->LOAD = buf;
    209a:	4b04      	ldr	r3, [pc, #16]	; (20ac <_delay_cycles+0x58>)
    209c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    209e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    20a0:	461a      	mov	r2, r3
    20a2:	6813      	ldr	r3, [r2, #0]
    20a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    20a8:	d0fb      	beq.n	20a2 <_delay_cycles+0x4e>
    20aa:	4770      	bx	lr
    20ac:	e000e010 	.word	0xe000e010

000020b0 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    20b0:	b470      	push	{r4, r5, r6}
    20b2:	b087      	sub	sp, #28
    20b4:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    20b6:	ac01      	add	r4, sp, #4
    20b8:	4d14      	ldr	r5, [pc, #80]	; (210c <_get_irq_num+0x5c>)
    20ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    20bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    20be:	682b      	ldr	r3, [r5, #0]
    20c0:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    20c2:	42b0      	cmp	r0, r6
    20c4:	d017      	beq.n	20f6 <_get_irq_num+0x46>
    20c6:	4631      	mov	r1, r6
    20c8:	2301      	movs	r3, #1
    20ca:	a801      	add	r0, sp, #4
    20cc:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    20d0:	428a      	cmp	r2, r1
    20d2:	d006      	beq.n	20e2 <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    20d4:	3301      	adds	r3, #1
    20d6:	2b05      	cmp	r3, #5
    20d8:	d1f8      	bne.n	20cc <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    20da:	2055      	movs	r0, #85	; 0x55
}
    20dc:	b007      	add	sp, #28
    20de:	bc70      	pop	{r4, r5, r6}
    20e0:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    20e2:	b2db      	uxtb	r3, r3
    20e4:	2b04      	cmp	r3, #4
    20e6:	d80c      	bhi.n	2102 <_get_irq_num+0x52>
    20e8:	e8df f003 	tbb	[pc, r3]
    20ec:	070d0305 	.word	0x070d0305
    20f0:	09          	.byte	0x09
    20f1:	00          	.byte	0x00
		return TCC1_0_IRQn;
    20f2:	205c      	movs	r0, #92	; 0x5c
    20f4:	e7f2      	b.n	20dc <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    20f6:	2055      	movs	r0, #85	; 0x55
    20f8:	e7f0      	b.n	20dc <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    20fa:	2065      	movs	r0, #101	; 0x65
    20fc:	e7ee      	b.n	20dc <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    20fe:	2068      	movs	r0, #104	; 0x68
    2100:	e7ec      	b.n	20dc <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    2102:	2089      	movs	r0, #137	; 0x89
    2104:	e7ea      	b.n	20dc <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    2106:	2061      	movs	r0, #97	; 0x61
    2108:	e7e8      	b.n	20dc <_get_irq_num+0x2c>
    210a:	bf00      	nop
    210c:	00004bfc 	.word	0x00004bfc

00002110 <_tcc_timer_deinit>:
{
    2110:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    2112:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2114:	4620      	mov	r0, r4
    2116:	4b10      	ldr	r3, [pc, #64]	; (2158 <_tcc_timer_deinit+0x48>)
    2118:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    211a:	0943      	lsrs	r3, r0, #5
    211c:	f000 001f 	and.w	r0, r0, #31
    2120:	2201      	movs	r2, #1
    2122:	fa02 f000 	lsl.w	r0, r2, r0
    2126:	3320      	adds	r3, #32
    2128:	4a0c      	ldr	r2, [pc, #48]	; (215c <_tcc_timer_deinit+0x4c>)
    212a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    212e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2132:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2136:	68a3      	ldr	r3, [r4, #8]
    2138:	f013 0f03 	tst.w	r3, #3
    213c:	d1fb      	bne.n	2136 <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    213e:	6823      	ldr	r3, [r4, #0]
    2140:	f023 0302 	bic.w	r3, r3, #2
    2144:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2146:	68a3      	ldr	r3, [r4, #8]
    2148:	f013 0f01 	tst.w	r3, #1
    214c:	d1fb      	bne.n	2146 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    214e:	6823      	ldr	r3, [r4, #0]
    2150:	f043 0301 	orr.w	r3, r3, #1
    2154:	6023      	str	r3, [r4, #0]
    2156:	bd10      	pop	{r4, pc}
    2158:	000020b1 	.word	0x000020b1
    215c:	e000e100 	.word	0xe000e100

00002160 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    2160:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2162:	6893      	ldr	r3, [r2, #8]
    2164:	f013 0f03 	tst.w	r3, #3
    2168:	d1fb      	bne.n	2162 <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    216a:	6813      	ldr	r3, [r2, #0]
    216c:	f043 0302 	orr.w	r3, r3, #2
    2170:	6013      	str	r3, [r2, #0]
    2172:	4770      	bx	lr

00002174 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    2174:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2176:	6893      	ldr	r3, [r2, #8]
    2178:	f013 0f03 	tst.w	r3, #3
    217c:	d1fb      	bne.n	2176 <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    217e:	6813      	ldr	r3, [r2, #0]
    2180:	f023 0302 	bic.w	r3, r3, #2
    2184:	6013      	str	r3, [r2, #0]
    2186:	4770      	bx	lr

00002188 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    2188:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    218a:	6419      	str	r1, [r3, #64]	; 0x40
    218c:	4770      	bx	lr

0000218e <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    218e:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    2190:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2192:	4770      	bx	lr

00002194 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    2194:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2196:	6893      	ldr	r3, [r2, #8]
    2198:	f013 0f03 	tst.w	r3, #3
    219c:	d1fb      	bne.n	2196 <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    219e:	6810      	ldr	r0, [r2, #0]
}
    21a0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    21a4:	4770      	bx	lr

000021a6 <tcc_interrupt_handler>:
{
    21a6:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    21a8:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    21aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    21ac:	f012 0f01 	tst.w	r2, #1
    21b0:	d100      	bne.n	21b4 <tcc_interrupt_handler+0xe>
    21b2:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    21b4:	2201      	movs	r2, #1
    21b6:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    21b8:	6803      	ldr	r3, [r0, #0]
    21ba:	4798      	blx	r3
}
    21bc:	e7f9      	b.n	21b2 <tcc_interrupt_handler+0xc>
	...

000021c0 <_tcc_timer_init>:
{
    21c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21c2:	b087      	sub	sp, #28
    21c4:	4605      	mov	r5, r0
    21c6:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    21c8:	ae01      	add	r6, sp, #4
    21ca:	4f4e      	ldr	r7, [pc, #312]	; (2304 <_tcc_timer_init+0x144>)
    21cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    21ce:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    21d0:	683b      	ldr	r3, [r7, #0]
    21d2:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    21d4:	42a0      	cmp	r0, r4
    21d6:	d00c      	beq.n	21f2 <_tcc_timer_init+0x32>
    21d8:	4621      	mov	r1, r4
    21da:	2301      	movs	r3, #1
    21dc:	a801      	add	r0, sp, #4
    21de:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    21e2:	428a      	cmp	r2, r1
    21e4:	d006      	beq.n	21f4 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    21e6:	3301      	adds	r3, #1
    21e8:	2b05      	cmp	r3, #5
    21ea:	d1f8      	bne.n	21de <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    21ec:	2600      	movs	r6, #0
			return i;
    21ee:	b276      	sxtb	r6, r6
    21f0:	e015      	b.n	221e <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    21f2:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    21f4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    21f8:	d073      	beq.n	22e2 <_tcc_timer_init+0x122>
    21fa:	2b01      	cmp	r3, #1
    21fc:	d06b      	beq.n	22d6 <_tcc_timer_init+0x116>
    21fe:	2b02      	cmp	r3, #2
    2200:	d06b      	beq.n	22da <_tcc_timer_init+0x11a>
    2202:	2b03      	cmp	r3, #3
    2204:	d06b      	beq.n	22de <_tcc_timer_init+0x11e>
    2206:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2208:	bf08      	it	eq
    220a:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    220c:	d0ef      	beq.n	21ee <_tcc_timer_init+0x2e>
	ASSERT(false);
    220e:	f240 128b 	movw	r2, #395	; 0x18b
    2212:	493d      	ldr	r1, [pc, #244]	; (2308 <_tcc_timer_init+0x148>)
    2214:	2000      	movs	r0, #0
    2216:	4b3d      	ldr	r3, [pc, #244]	; (230c <_tcc_timer_init+0x14c>)
    2218:	4798      	blx	r3
	return -1;
    221a:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    221e:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    2220:	22e4      	movs	r2, #228	; 0xe4
    2222:	4939      	ldr	r1, [pc, #228]	; (2308 <_tcc_timer_init+0x148>)
    2224:	2001      	movs	r0, #1
    2226:	4b39      	ldr	r3, [pc, #228]	; (230c <_tcc_timer_init+0x14c>)
    2228:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    222a:	68a3      	ldr	r3, [r4, #8]
    222c:	f013 0f01 	tst.w	r3, #1
    2230:	d1fb      	bne.n	222a <_tcc_timer_init+0x6a>
    2232:	68a3      	ldr	r3, [r4, #8]
    2234:	f013 0f03 	tst.w	r3, #3
    2238:	d1fb      	bne.n	2232 <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    223a:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    223c:	f013 0f02 	tst.w	r3, #2
    2240:	d15d      	bne.n	22fe <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2242:	68a3      	ldr	r3, [r4, #8]
    2244:	f013 0f01 	tst.w	r3, #1
    2248:	d1fb      	bne.n	2242 <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    224a:	6823      	ldr	r3, [r4, #0]
    224c:	f043 0301 	orr.w	r3, r3, #1
    2250:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2252:	68a3      	ldr	r3, [r4, #8]
    2254:	f013 0f01 	tst.w	r3, #1
    2258:	d1fb      	bne.n	2252 <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    225a:	4a2a      	ldr	r2, [pc, #168]	; (2304 <_tcc_timer_init+0x144>)
    225c:	00f1      	lsls	r1, r6, #3
    225e:	198b      	adds	r3, r1, r6
    2260:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2264:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    2266:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    2268:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    226a:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    226c:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    226e:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    2270:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    2272:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    2274:	440e      	add	r6, r1
    2276:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    227a:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    227c:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    227e:	2301      	movs	r3, #1
    2280:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    2282:	4b23      	ldr	r3, [pc, #140]	; (2310 <_tcc_timer_init+0x150>)
    2284:	429c      	cmp	r4, r3
    2286:	d02e      	beq.n	22e6 <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    2288:	4b22      	ldr	r3, [pc, #136]	; (2314 <_tcc_timer_init+0x154>)
    228a:	429c      	cmp	r4, r3
    228c:	d02e      	beq.n	22ec <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    228e:	4b22      	ldr	r3, [pc, #136]	; (2318 <_tcc_timer_init+0x158>)
    2290:	429c      	cmp	r4, r3
    2292:	d02e      	beq.n	22f2 <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    2294:	4b21      	ldr	r3, [pc, #132]	; (231c <_tcc_timer_init+0x15c>)
    2296:	429c      	cmp	r4, r3
    2298:	d02e      	beq.n	22f8 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    229a:	4b21      	ldr	r3, [pc, #132]	; (2320 <_tcc_timer_init+0x160>)
    229c:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    229e:	bf04      	itt	eq
    22a0:	4b20      	ldreq	r3, [pc, #128]	; (2324 <_tcc_timer_init+0x164>)
    22a2:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    22a4:	4620      	mov	r0, r4
    22a6:	4b20      	ldr	r3, [pc, #128]	; (2328 <_tcc_timer_init+0x168>)
    22a8:	4798      	blx	r3
    22aa:	f000 031f 	and.w	r3, r0, #31
    22ae:	2201      	movs	r2, #1
    22b0:	409a      	lsls	r2, r3
    22b2:	0943      	lsrs	r3, r0, #5
    22b4:	009b      	lsls	r3, r3, #2
    22b6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    22ba:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    22be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    22c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22c6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    22ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    22ce:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    22d0:	2000      	movs	r0, #0
}
    22d2:	b007      	add	sp, #28
    22d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    22d6:	2601      	movs	r6, #1
    22d8:	e789      	b.n	21ee <_tcc_timer_init+0x2e>
    22da:	2602      	movs	r6, #2
    22dc:	e787      	b.n	21ee <_tcc_timer_init+0x2e>
    22de:	2603      	movs	r6, #3
    22e0:	e785      	b.n	21ee <_tcc_timer_init+0x2e>
    22e2:	2600      	movs	r6, #0
    22e4:	e783      	b.n	21ee <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    22e6:	4b0f      	ldr	r3, [pc, #60]	; (2324 <_tcc_timer_init+0x164>)
    22e8:	601d      	str	r5, [r3, #0]
    22ea:	e7d3      	b.n	2294 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    22ec:	4b0d      	ldr	r3, [pc, #52]	; (2324 <_tcc_timer_init+0x164>)
    22ee:	605d      	str	r5, [r3, #4]
    22f0:	e7d3      	b.n	229a <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    22f2:	4b0c      	ldr	r3, [pc, #48]	; (2324 <_tcc_timer_init+0x164>)
    22f4:	609d      	str	r5, [r3, #8]
    22f6:	e7d5      	b.n	22a4 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    22f8:	4b0a      	ldr	r3, [pc, #40]	; (2324 <_tcc_timer_init+0x164>)
    22fa:	60dd      	str	r5, [r3, #12]
    22fc:	e7d2      	b.n	22a4 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    22fe:	f06f 0010 	mvn.w	r0, #16
    2302:	e7e6      	b.n	22d2 <_tcc_timer_init+0x112>
    2304:	00004bfc 	.word	0x00004bfc
    2308:	00004cc4 	.word	0x00004cc4
    230c:	000014c9 	.word	0x000014c9
    2310:	41016000 	.word	0x41016000
    2314:	41018000 	.word	0x41018000
    2318:	42000c00 	.word	0x42000c00
    231c:	42001000 	.word	0x42001000
    2320:	43001000 	.word	0x43001000
    2324:	20000714 	.word	0x20000714
    2328:	000020b1 	.word	0x000020b1

0000232c <_tcc_timer_set_irq>:
{
    232c:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    232e:	68c0      	ldr	r0, [r0, #12]
    2330:	4b02      	ldr	r3, [pc, #8]	; (233c <_tcc_timer_set_irq+0x10>)
    2332:	4798      	blx	r3
    2334:	4b02      	ldr	r3, [pc, #8]	; (2340 <_tcc_timer_set_irq+0x14>)
    2336:	4798      	blx	r3
    2338:	bd08      	pop	{r3, pc}
    233a:	bf00      	nop
    233c:	000020b1 	.word	0x000020b1
    2340:	000017c9 	.word	0x000017c9

00002344 <_tcc_get_timer>:
}
    2344:	4800      	ldr	r0, [pc, #0]	; (2348 <_tcc_get_timer+0x4>)
    2346:	4770      	bx	lr
    2348:	2000003c 	.word	0x2000003c

0000234c <TCC0_0_Handler>:
{
    234c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    234e:	4b02      	ldr	r3, [pc, #8]	; (2358 <TCC0_0_Handler+0xc>)
    2350:	6818      	ldr	r0, [r3, #0]
    2352:	4b02      	ldr	r3, [pc, #8]	; (235c <TCC0_0_Handler+0x10>)
    2354:	4798      	blx	r3
    2356:	bd08      	pop	{r3, pc}
    2358:	20000714 	.word	0x20000714
    235c:	000021a7 	.word	0x000021a7

00002360 <TCC1_0_Handler>:
{
    2360:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    2362:	4b02      	ldr	r3, [pc, #8]	; (236c <TCC1_0_Handler+0xc>)
    2364:	6858      	ldr	r0, [r3, #4]
    2366:	4b02      	ldr	r3, [pc, #8]	; (2370 <TCC1_0_Handler+0x10>)
    2368:	4798      	blx	r3
    236a:	bd08      	pop	{r3, pc}
    236c:	20000714 	.word	0x20000714
    2370:	000021a7 	.word	0x000021a7

00002374 <TCC2_0_Handler>:
{
    2374:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    2376:	4b02      	ldr	r3, [pc, #8]	; (2380 <TCC2_0_Handler+0xc>)
    2378:	6898      	ldr	r0, [r3, #8]
    237a:	4b02      	ldr	r3, [pc, #8]	; (2384 <TCC2_0_Handler+0x10>)
    237c:	4798      	blx	r3
    237e:	bd08      	pop	{r3, pc}
    2380:	20000714 	.word	0x20000714
    2384:	000021a7 	.word	0x000021a7

00002388 <TCC3_0_Handler>:
{
    2388:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    238a:	4b02      	ldr	r3, [pc, #8]	; (2394 <TCC3_0_Handler+0xc>)
    238c:	68d8      	ldr	r0, [r3, #12]
    238e:	4b02      	ldr	r3, [pc, #8]	; (2398 <TCC3_0_Handler+0x10>)
    2390:	4798      	blx	r3
    2392:	bd08      	pop	{r3, pc}
    2394:	20000714 	.word	0x20000714
    2398:	000021a7 	.word	0x000021a7

0000239c <TCC4_0_Handler>:
{
    239c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    239e:	4b02      	ldr	r3, [pc, #8]	; (23a8 <TCC4_0_Handler+0xc>)
    23a0:	6918      	ldr	r0, [r3, #16]
    23a2:	4b02      	ldr	r3, [pc, #8]	; (23ac <TCC4_0_Handler+0x10>)
    23a4:	4798      	blx	r3
    23a6:	bd08      	pop	{r3, pc}
    23a8:	20000714 	.word	0x20000714
    23ac:	000021a7 	.word	0x000021a7

000023b0 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    23b0:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    23b2:	6913      	ldr	r3, [r2, #16]
    23b4:	f013 0f03 	tst.w	r3, #3
    23b8:	d1fb      	bne.n	23b2 <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    23ba:	6813      	ldr	r3, [r2, #0]
    23bc:	f043 0302 	orr.w	r3, r3, #2
    23c0:	6013      	str	r3, [r2, #0]
    23c2:	4770      	bx	lr

000023c4 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    23c4:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    23c6:	6913      	ldr	r3, [r2, #16]
    23c8:	f013 0f03 	tst.w	r3, #3
    23cc:	d1fb      	bne.n	23c6 <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    23ce:	6813      	ldr	r3, [r2, #0]
    23d0:	f023 0302 	bic.w	r3, r3, #2
    23d4:	6013      	str	r3, [r2, #0]
    23d6:	4770      	bx	lr

000023d8 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    23d8:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    23da:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    23dc:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    23e0:	2b02      	cmp	r3, #2
    23e2:	d00b      	beq.n	23fc <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    23e4:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    23e6:	f013 0f0c 	tst.w	r3, #12
    23ea:	d009      	beq.n	2400 <_tc_timer_set_period+0x28>
    23ec:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    23ee:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    23f2:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    23f4:	bf04      	itt	eq
    23f6:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    23f8:	76d1      	strbeq	r1, [r2, #27]
    23fa:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    23fc:	61d1      	str	r1, [r2, #28]
    23fe:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    2400:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2402:	8391      	strh	r1, [r2, #28]
    2404:	4770      	bx	lr

00002406 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    2406:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2408:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    240a:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    240e:	2b02      	cmp	r3, #2
    2410:	d00c      	beq.n	242c <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2412:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2414:	f013 0f0c 	tst.w	r3, #12
    2418:	d00a      	beq.n	2430 <_tc_timer_get_period+0x2a>
    241a:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    241c:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2420:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    2422:	bf06      	itte	eq
    2424:	7ed0      	ldrbeq	r0, [r2, #27]
    2426:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    2428:	2000      	movne	r0, #0
}
    242a:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    242c:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    242e:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    2430:	8b90      	ldrh	r0, [r2, #28]
    2432:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2434:	4770      	bx	lr

00002436 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2436:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2438:	6913      	ldr	r3, [r2, #16]
    243a:	f013 0f03 	tst.w	r3, #3
    243e:	d1fb      	bne.n	2438 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2440:	6810      	ldr	r0, [r2, #0]
}
    2442:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2446:	4770      	bx	lr

00002448 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2448:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    244a:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    244c:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    244e:	f012 0f01 	tst.w	r2, #1
    2452:	d100      	bne.n	2456 <tc_interrupt_handler+0xe>
    2454:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2456:	2201      	movs	r2, #1
    2458:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    245a:	6803      	ldr	r3, [r0, #0]
    245c:	4798      	blx	r3
	}
}
    245e:	e7f9      	b.n	2454 <tc_interrupt_handler+0xc>

00002460 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2460:	b538      	push	{r3, r4, r5, lr}
    2462:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2464:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2466:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2468:	f013 0f01 	tst.w	r3, #1
    246c:	d004      	beq.n	2478 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    246e:	2301      	movs	r3, #1
    2470:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2472:	6803      	ldr	r3, [r0, #0]
    2474:	b103      	cbz	r3, 2478 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2476:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2478:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    247a:	f013 0f02 	tst.w	r3, #2
    247e:	d005      	beq.n	248c <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2480:	2302      	movs	r3, #2
    2482:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2484:	686b      	ldr	r3, [r5, #4]
    2486:	b10b      	cbz	r3, 248c <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2488:	4628      	mov	r0, r5
    248a:	4798      	blx	r3
    248c:	bd38      	pop	{r3, r4, r5, pc}
	...

00002490 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2490:	4b11      	ldr	r3, [pc, #68]	; (24d8 <_tc_init_irq_param+0x48>)
    2492:	4298      	cmp	r0, r3
    2494:	d011      	beq.n	24ba <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2496:	4b11      	ldr	r3, [pc, #68]	; (24dc <_tc_init_irq_param+0x4c>)
    2498:	4298      	cmp	r0, r3
    249a:	d011      	beq.n	24c0 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    249c:	4b10      	ldr	r3, [pc, #64]	; (24e0 <_tc_init_irq_param+0x50>)
    249e:	4298      	cmp	r0, r3
    24a0:	d011      	beq.n	24c6 <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    24a2:	4b10      	ldr	r3, [pc, #64]	; (24e4 <_tc_init_irq_param+0x54>)
    24a4:	4298      	cmp	r0, r3
    24a6:	d011      	beq.n	24cc <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    24a8:	4b0f      	ldr	r3, [pc, #60]	; (24e8 <_tc_init_irq_param+0x58>)
    24aa:	4298      	cmp	r0, r3
    24ac:	d011      	beq.n	24d2 <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    24ae:	4b0f      	ldr	r3, [pc, #60]	; (24ec <_tc_init_irq_param+0x5c>)
    24b0:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    24b2:	bf04      	itt	eq
    24b4:	4b0e      	ldreq	r3, [pc, #56]	; (24f0 <_tc_init_irq_param+0x60>)
    24b6:	6159      	streq	r1, [r3, #20]
    24b8:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    24ba:	4b0d      	ldr	r3, [pc, #52]	; (24f0 <_tc_init_irq_param+0x60>)
    24bc:	6019      	str	r1, [r3, #0]
    24be:	e7f0      	b.n	24a2 <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    24c0:	4b0b      	ldr	r3, [pc, #44]	; (24f0 <_tc_init_irq_param+0x60>)
    24c2:	6059      	str	r1, [r3, #4]
    24c4:	e7f0      	b.n	24a8 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    24c6:	4b0a      	ldr	r3, [pc, #40]	; (24f0 <_tc_init_irq_param+0x60>)
    24c8:	6099      	str	r1, [r3, #8]
    24ca:	e7f0      	b.n	24ae <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    24cc:	4b08      	ldr	r3, [pc, #32]	; (24f0 <_tc_init_irq_param+0x60>)
    24ce:	60d9      	str	r1, [r3, #12]
    24d0:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    24d2:	4b07      	ldr	r3, [pc, #28]	; (24f0 <_tc_init_irq_param+0x60>)
    24d4:	6119      	str	r1, [r3, #16]
    24d6:	4770      	bx	lr
    24d8:	40003800 	.word	0x40003800
    24dc:	40003c00 	.word	0x40003c00
    24e0:	4101a000 	.word	0x4101a000
    24e4:	4101c000 	.word	0x4101c000
    24e8:	42001400 	.word	0x42001400
    24ec:	42001800 	.word	0x42001800
    24f0:	20000728 	.word	0x20000728

000024f4 <get_tc_index>:
{
    24f4:	b570      	push	{r4, r5, r6, lr}
    24f6:	b086      	sub	sp, #24
    24f8:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    24fa:	466c      	mov	r4, sp
    24fc:	4d18      	ldr	r5, [pc, #96]	; (2560 <get_tc_index+0x6c>)
    24fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2502:	e895 0003 	ldmia.w	r5, {r0, r1}
    2506:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    250a:	9b00      	ldr	r3, [sp, #0]
    250c:	42b3      	cmp	r3, r6
    250e:	d021      	beq.n	2554 <get_tc_index+0x60>
    2510:	4631      	mov	r1, r6
    2512:	2301      	movs	r3, #1
    2514:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2518:	428a      	cmp	r2, r1
    251a:	d01c      	beq.n	2556 <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    251c:	3301      	adds	r3, #1
    251e:	2b06      	cmp	r3, #6
    2520:	d1f8      	bne.n	2514 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    2522:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2524:	4a0f      	ldr	r2, [pc, #60]	; (2564 <get_tc_index+0x70>)
    2526:	7812      	ldrb	r2, [r2, #0]
    2528:	429a      	cmp	r2, r3
    252a:	d016      	beq.n	255a <get_tc_index+0x66>
    252c:	4a0d      	ldr	r2, [pc, #52]	; (2564 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    252e:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    2530:	7d11      	ldrb	r1, [r2, #20]
    2532:	4299      	cmp	r1, r3
    2534:	d012      	beq.n	255c <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2536:	3001      	adds	r0, #1
    2538:	b2c0      	uxtb	r0, r0
    253a:	3214      	adds	r2, #20
    253c:	2806      	cmp	r0, #6
    253e:	d1f7      	bne.n	2530 <get_tc_index+0x3c>
	ASSERT(false);
    2540:	f240 2227 	movw	r2, #551	; 0x227
    2544:	4908      	ldr	r1, [pc, #32]	; (2568 <get_tc_index+0x74>)
    2546:	2000      	movs	r0, #0
    2548:	4b08      	ldr	r3, [pc, #32]	; (256c <get_tc_index+0x78>)
    254a:	4798      	blx	r3
	return -1;
    254c:	f04f 30ff 	mov.w	r0, #4294967295
}
    2550:	b006      	add	sp, #24
    2552:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2554:	2300      	movs	r3, #0
			return i;
    2556:	b2db      	uxtb	r3, r3
    2558:	e7e4      	b.n	2524 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    255a:	2000      	movs	r0, #0
			return i;
    255c:	b240      	sxtb	r0, r0
    255e:	e7f7      	b.n	2550 <get_tc_index+0x5c>
    2560:	00004cdc 	.word	0x00004cdc
    2564:	2000005c 	.word	0x2000005c
    2568:	00004cf4 	.word	0x00004cf4
    256c:	000014c9 	.word	0x000014c9

00002570 <_tc_timer_init>:
{
    2570:	b570      	push	{r4, r5, r6, lr}
    2572:	4606      	mov	r6, r0
    2574:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2576:	4608      	mov	r0, r1
    2578:	4b48      	ldr	r3, [pc, #288]	; (269c <_tc_timer_init+0x12c>)
    257a:	4798      	blx	r3
    257c:	4605      	mov	r5, r0
	device->hw = hw;
    257e:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2580:	22af      	movs	r2, #175	; 0xaf
    2582:	4947      	ldr	r1, [pc, #284]	; (26a0 <_tc_timer_init+0x130>)
    2584:	2001      	movs	r0, #1
    2586:	4b47      	ldr	r3, [pc, #284]	; (26a4 <_tc_timer_init+0x134>)
    2588:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    258a:	6923      	ldr	r3, [r4, #16]
    258c:	f013 0f01 	tst.w	r3, #1
    2590:	d1fb      	bne.n	258a <_tc_timer_init+0x1a>
    2592:	6923      	ldr	r3, [r4, #16]
    2594:	f013 0f03 	tst.w	r3, #3
    2598:	d1fb      	bne.n	2592 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    259a:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    259c:	f013 0f02 	tst.w	r3, #2
    25a0:	d175      	bne.n	268e <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    25a2:	6923      	ldr	r3, [r4, #16]
    25a4:	f013 0f01 	tst.w	r3, #1
    25a8:	d1fb      	bne.n	25a2 <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    25aa:	6823      	ldr	r3, [r4, #0]
    25ac:	f043 0301 	orr.w	r3, r3, #1
    25b0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    25b2:	6923      	ldr	r3, [r4, #16]
    25b4:	f013 0f01 	tst.w	r3, #1
    25b8:	d1fb      	bne.n	25b2 <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    25ba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    25be:	4a3a      	ldr	r2, [pc, #232]	; (26a8 <_tc_timer_init+0x138>)
    25c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25c4:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    25c6:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    25c8:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    25ca:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    25cc:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    25ce:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    25d0:	2201      	movs	r2, #1
    25d2:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    25d4:	685b      	ldr	r3, [r3, #4]
    25d6:	f003 030c 	and.w	r3, r3, #12
    25da:	2b08      	cmp	r3, #8
    25dc:	d03f      	beq.n	265e <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    25de:	2b00      	cmp	r3, #0
    25e0:	d147      	bne.n	2672 <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    25e2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    25e6:	4a30      	ldr	r2, [pc, #192]	; (26a8 <_tc_timer_init+0x138>)
    25e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    25ec:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    25ee:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    25f0:	8a1b      	ldrh	r3, [r3, #16]
    25f2:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    25f4:	2301      	movs	r3, #1
    25f6:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    25f8:	4631      	mov	r1, r6
    25fa:	4620      	mov	r0, r4
    25fc:	4b2b      	ldr	r3, [pc, #172]	; (26ac <_tc_timer_init+0x13c>)
    25fe:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2600:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2604:	4a28      	ldr	r2, [pc, #160]	; (26a8 <_tc_timer_init+0x138>)
    2606:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    260a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    260e:	2b00      	cmp	r3, #0
    2610:	db40      	blt.n	2694 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2612:	095a      	lsrs	r2, r3, #5
    2614:	f003 031f 	and.w	r3, r3, #31
    2618:	2101      	movs	r1, #1
    261a:	fa01 f303 	lsl.w	r3, r1, r3
    261e:	3220      	adds	r2, #32
    2620:	4923      	ldr	r1, [pc, #140]	; (26b0 <_tc_timer_init+0x140>)
    2622:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2626:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    262a:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    262e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2632:	4b1d      	ldr	r3, [pc, #116]	; (26a8 <_tc_timer_init+0x138>)
    2634:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2638:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    263c:	2b00      	cmp	r3, #0
    263e:	db2b      	blt.n	2698 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2640:	0959      	lsrs	r1, r3, #5
    2642:	f003 031f 	and.w	r3, r3, #31
    2646:	2201      	movs	r2, #1
    2648:	fa02 f303 	lsl.w	r3, r2, r3
    264c:	4a18      	ldr	r2, [pc, #96]	; (26b0 <_tc_timer_init+0x140>)
    264e:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2652:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2656:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    265a:	2000      	movs	r0, #0
    265c:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    265e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2662:	4a11      	ldr	r2, [pc, #68]	; (26a8 <_tc_timer_init+0x138>)
    2664:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2668:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    266a:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    266c:	691b      	ldr	r3, [r3, #16]
    266e:	6223      	str	r3, [r4, #32]
    2670:	e7c0      	b.n	25f4 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2672:	2b04      	cmp	r3, #4
    2674:	d1be      	bne.n	25f4 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2676:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    267a:	4a0b      	ldr	r2, [pc, #44]	; (26a8 <_tc_timer_init+0x138>)
    267c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2680:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2682:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2684:	7c1a      	ldrb	r2, [r3, #16]
    2686:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    2688:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    268a:	76e3      	strb	r3, [r4, #27]
    268c:	e7b2      	b.n	25f4 <_tc_timer_init+0x84>
		return ERR_DENIED;
    268e:	f06f 0010 	mvn.w	r0, #16
    2692:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    2694:	2000      	movs	r0, #0
    2696:	bd70      	pop	{r4, r5, r6, pc}
    2698:	2000      	movs	r0, #0
}
    269a:	bd70      	pop	{r4, r5, r6, pc}
    269c:	000024f5 	.word	0x000024f5
    26a0:	00004cf4 	.word	0x00004cf4
    26a4:	000014c9 	.word	0x000014c9
    26a8:	2000005c 	.word	0x2000005c
    26ac:	00002491 	.word	0x00002491
    26b0:	e000e100 	.word	0xe000e100

000026b4 <_tc_timer_deinit>:
{
    26b4:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    26b6:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    26b8:	4620      	mov	r0, r4
    26ba:	4b18      	ldr	r3, [pc, #96]	; (271c <_tc_timer_deinit+0x68>)
    26bc:	4798      	blx	r3
    26be:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    26c0:	f240 1201 	movw	r2, #257	; 0x101
    26c4:	4916      	ldr	r1, [pc, #88]	; (2720 <_tc_timer_deinit+0x6c>)
    26c6:	2001      	movs	r0, #1
    26c8:	4b16      	ldr	r3, [pc, #88]	; (2724 <_tc_timer_deinit+0x70>)
    26ca:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    26cc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    26d0:	4b15      	ldr	r3, [pc, #84]	; (2728 <_tc_timer_deinit+0x74>)
    26d2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    26d6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    26da:	2b00      	cmp	r3, #0
    26dc:	db0d      	blt.n	26fa <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    26de:	095a      	lsrs	r2, r3, #5
    26e0:	f003 031f 	and.w	r3, r3, #31
    26e4:	2101      	movs	r1, #1
    26e6:	fa01 f303 	lsl.w	r3, r1, r3
    26ea:	3220      	adds	r2, #32
    26ec:	490f      	ldr	r1, [pc, #60]	; (272c <_tc_timer_deinit+0x78>)
    26ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    26f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    26f6:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    26fa:	6923      	ldr	r3, [r4, #16]
    26fc:	f013 0f03 	tst.w	r3, #3
    2700:	d1fb      	bne.n	26fa <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2702:	6823      	ldr	r3, [r4, #0]
    2704:	f023 0302 	bic.w	r3, r3, #2
    2708:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    270a:	6923      	ldr	r3, [r4, #16]
    270c:	f013 0f01 	tst.w	r3, #1
    2710:	d1fb      	bne.n	270a <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2712:	6823      	ldr	r3, [r4, #0]
    2714:	f043 0301 	orr.w	r3, r3, #1
    2718:	6023      	str	r3, [r4, #0]
    271a:	bd38      	pop	{r3, r4, r5, pc}
    271c:	000024f5 	.word	0x000024f5
    2720:	00004cf4 	.word	0x00004cf4
    2724:	000014c9 	.word	0x000014c9
    2728:	2000005c 	.word	0x2000005c
    272c:	e000e100 	.word	0xe000e100

00002730 <_tc_timer_set_irq>:
{
    2730:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2732:	68c0      	ldr	r0, [r0, #12]
    2734:	4b08      	ldr	r3, [pc, #32]	; (2758 <_tc_timer_set_irq+0x28>)
    2736:	4798      	blx	r3
    2738:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    273a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    273e:	4907      	ldr	r1, [pc, #28]	; (275c <_tc_timer_set_irq+0x2c>)
    2740:	2001      	movs	r0, #1
    2742:	4b07      	ldr	r3, [pc, #28]	; (2760 <_tc_timer_set_irq+0x30>)
    2744:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    2746:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    274a:	4b06      	ldr	r3, [pc, #24]	; (2764 <_tc_timer_set_irq+0x34>)
    274c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    2750:	78a0      	ldrb	r0, [r4, #2]
    2752:	4b05      	ldr	r3, [pc, #20]	; (2768 <_tc_timer_set_irq+0x38>)
    2754:	4798      	blx	r3
    2756:	bd10      	pop	{r4, pc}
    2758:	000024f5 	.word	0x000024f5
    275c:	00004cf4 	.word	0x00004cf4
    2760:	000014c9 	.word	0x000014c9
    2764:	2000005c 	.word	0x2000005c
    2768:	000017c9 	.word	0x000017c9

0000276c <_pwm_init>:
{
    276c:	b570      	push	{r4, r5, r6, lr}
    276e:	4606      	mov	r6, r0
    2770:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    2772:	4608      	mov	r0, r1
    2774:	4b3f      	ldr	r3, [pc, #252]	; (2874 <_pwm_init+0x108>)
    2776:	4798      	blx	r3
    2778:	4605      	mov	r5, r0
	device->hw = hw;
    277a:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    277c:	6923      	ldr	r3, [r4, #16]
    277e:	f013 0f01 	tst.w	r3, #1
    2782:	d1fb      	bne.n	277c <_pwm_init+0x10>
    2784:	6923      	ldr	r3, [r4, #16]
    2786:	f013 0f03 	tst.w	r3, #3
    278a:	d1fb      	bne.n	2784 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    278c:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    278e:	f013 0f02 	tst.w	r3, #2
    2792:	d165      	bne.n	2860 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2794:	6923      	ldr	r3, [r4, #16]
    2796:	f013 0f01 	tst.w	r3, #1
    279a:	d1fb      	bne.n	2794 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    279c:	6823      	ldr	r3, [r4, #0]
    279e:	f043 0301 	orr.w	r3, r3, #1
    27a2:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    27a4:	6923      	ldr	r3, [r4, #16]
    27a6:	f013 0f01 	tst.w	r3, #1
    27aa:	d1fb      	bne.n	27a4 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    27ac:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27b0:	4a31      	ldr	r2, [pc, #196]	; (2878 <_pwm_init+0x10c>)
    27b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27b6:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    27b8:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    27ba:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    27bc:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    27be:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    27c0:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    27c2:	2203      	movs	r2, #3
    27c4:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    27c6:	685b      	ldr	r3, [r3, #4]
    27c8:	f003 030c 	and.w	r3, r3, #12
    27cc:	2b08      	cmp	r3, #8
    27ce:	d03d      	beq.n	284c <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    27d0:	2b00      	cmp	r3, #0
    27d2:	d148      	bne.n	2866 <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    27d4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27d8:	4a27      	ldr	r2, [pc, #156]	; (2878 <_pwm_init+0x10c>)
    27da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27de:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    27e0:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    27e2:	8a1b      	ldrh	r3, [r3, #16]
    27e4:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    27e6:	4631      	mov	r1, r6
    27e8:	4620      	mov	r0, r4
    27ea:	4b24      	ldr	r3, [pc, #144]	; (287c <_pwm_init+0x110>)
    27ec:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    27ee:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    27f2:	4a21      	ldr	r2, [pc, #132]	; (2878 <_pwm_init+0x10c>)
    27f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    27f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    27fc:	2b00      	cmp	r3, #0
    27fe:	db35      	blt.n	286c <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2800:	095a      	lsrs	r2, r3, #5
    2802:	f003 031f 	and.w	r3, r3, #31
    2806:	2101      	movs	r1, #1
    2808:	fa01 f303 	lsl.w	r3, r1, r3
    280c:	3220      	adds	r2, #32
    280e:	491c      	ldr	r1, [pc, #112]	; (2880 <_pwm_init+0x114>)
    2810:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2814:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2818:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    281c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2820:	4b15      	ldr	r3, [pc, #84]	; (2878 <_pwm_init+0x10c>)
    2822:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2826:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    282a:	2b00      	cmp	r3, #0
    282c:	db20      	blt.n	2870 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    282e:	0959      	lsrs	r1, r3, #5
    2830:	f003 031f 	and.w	r3, r3, #31
    2834:	2201      	movs	r2, #1
    2836:	fa02 f303 	lsl.w	r3, r2, r3
    283a:	4a11      	ldr	r2, [pc, #68]	; (2880 <_pwm_init+0x114>)
    283c:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2840:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2844:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2848:	2000      	movs	r0, #0
    284a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    284c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2850:	4a09      	ldr	r2, [pc, #36]	; (2878 <_pwm_init+0x10c>)
    2852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2856:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2858:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    285a:	691b      	ldr	r3, [r3, #16]
    285c:	6223      	str	r3, [r4, #32]
    285e:	e7c2      	b.n	27e6 <_pwm_init+0x7a>
		return ERR_DENIED;
    2860:	f06f 0010 	mvn.w	r0, #16
    2864:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    2866:	f04f 30ff 	mov.w	r0, #4294967295
    286a:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    286c:	2000      	movs	r0, #0
    286e:	bd70      	pop	{r4, r5, r6, pc}
    2870:	2000      	movs	r0, #0
}
    2872:	bd70      	pop	{r4, r5, r6, pc}
    2874:	000024f5 	.word	0x000024f5
    2878:	2000005c 	.word	0x2000005c
    287c:	00002491 	.word	0x00002491
    2880:	e000e100 	.word	0xe000e100

00002884 <_tc_get_timer>:
}
    2884:	4800      	ldr	r0, [pc, #0]	; (2888 <_tc_get_timer+0x4>)
    2886:	4770      	bx	lr
    2888:	200000d4 	.word	0x200000d4

0000288c <_tc_get_pwm>:
}
    288c:	2000      	movs	r0, #0
    288e:	4770      	bx	lr

00002890 <TC0_Handler>:
{
    2890:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    2892:	4b02      	ldr	r3, [pc, #8]	; (289c <TC0_Handler+0xc>)
    2894:	6818      	ldr	r0, [r3, #0]
    2896:	4b02      	ldr	r3, [pc, #8]	; (28a0 <TC0_Handler+0x10>)
    2898:	4798      	blx	r3
    289a:	bd08      	pop	{r3, pc}
    289c:	20000728 	.word	0x20000728
    28a0:	00002461 	.word	0x00002461

000028a4 <TC1_Handler>:
{
    28a4:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    28a6:	4b02      	ldr	r3, [pc, #8]	; (28b0 <TC1_Handler+0xc>)
    28a8:	6858      	ldr	r0, [r3, #4]
    28aa:	4b02      	ldr	r3, [pc, #8]	; (28b4 <TC1_Handler+0x10>)
    28ac:	4798      	blx	r3
    28ae:	bd08      	pop	{r3, pc}
    28b0:	20000728 	.word	0x20000728
    28b4:	00002461 	.word	0x00002461

000028b8 <TC2_Handler>:
{
    28b8:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    28ba:	4b02      	ldr	r3, [pc, #8]	; (28c4 <TC2_Handler+0xc>)
    28bc:	6898      	ldr	r0, [r3, #8]
    28be:	4b02      	ldr	r3, [pc, #8]	; (28c8 <TC2_Handler+0x10>)
    28c0:	4798      	blx	r3
    28c2:	bd08      	pop	{r3, pc}
    28c4:	20000728 	.word	0x20000728
    28c8:	00002461 	.word	0x00002461

000028cc <TC3_Handler>:
{
    28cc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    28ce:	4b02      	ldr	r3, [pc, #8]	; (28d8 <TC3_Handler+0xc>)
    28d0:	68d8      	ldr	r0, [r3, #12]
    28d2:	4b02      	ldr	r3, [pc, #8]	; (28dc <TC3_Handler+0x10>)
    28d4:	4798      	blx	r3
    28d6:	bd08      	pop	{r3, pc}
    28d8:	20000728 	.word	0x20000728
    28dc:	00002449 	.word	0x00002449

000028e0 <TC4_Handler>:
{
    28e0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    28e2:	4b02      	ldr	r3, [pc, #8]	; (28ec <TC4_Handler+0xc>)
    28e4:	6918      	ldr	r0, [r3, #16]
    28e6:	4b02      	ldr	r3, [pc, #8]	; (28f0 <TC4_Handler+0x10>)
    28e8:	4798      	blx	r3
    28ea:	bd08      	pop	{r3, pc}
    28ec:	20000728 	.word	0x20000728
    28f0:	00002449 	.word	0x00002449

000028f4 <TC5_Handler>:
{
    28f4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    28f6:	4b02      	ldr	r3, [pc, #8]	; (2900 <TC5_Handler+0xc>)
    28f8:	6958      	ldr	r0, [r3, #20]
    28fa:	4b02      	ldr	r3, [pc, #8]	; (2904 <TC5_Handler+0x10>)
    28fc:	4798      	blx	r3
    28fe:	bd08      	pop	{r3, pc}
    2900:	20000728 	.word	0x20000728
    2904:	00002449 	.word	0x00002449

00002908 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2908:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    290a:	4604      	mov	r4, r0
    290c:	b330      	cbz	r0, 295c <_wdt_init+0x54>
    290e:	6800      	ldr	r0, [r0, #0]
    2910:	3000      	adds	r0, #0
    2912:	bf18      	it	ne
    2914:	2001      	movne	r0, #1
    2916:	225a      	movs	r2, #90	; 0x5a
    2918:	4914      	ldr	r1, [pc, #80]	; (296c <_wdt_init+0x64>)
    291a:	4b15      	ldr	r3, [pc, #84]	; (2970 <_wdt_init+0x68>)
    291c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    291e:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    2920:	689a      	ldr	r2, [r3, #8]
    2922:	f012 0f0e 	tst.w	r2, #14
    2926:	d1fb      	bne.n	2920 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2928:	781a      	ldrb	r2, [r3, #0]
    292a:	09d2      	lsrs	r2, r2, #7
    292c:	d118      	bne.n	2960 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    292e:	689a      	ldr	r2, [r3, #8]
    2930:	f012 0f0e 	tst.w	r2, #14
    2934:	d1fb      	bne.n	292e <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2936:	781a      	ldrb	r2, [r3, #0]
    2938:	f012 0f02 	tst.w	r2, #2
    293c:	d113      	bne.n	2966 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    293e:	689a      	ldr	r2, [r3, #8]
    2940:	f012 0f0e 	tst.w	r2, #14
    2944:	d1fb      	bne.n	293e <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    2946:	781a      	ldrb	r2, [r3, #0]
    2948:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    294c:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    294e:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    2950:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    2952:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    2956:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    2958:	2000      	movs	r0, #0
    295a:	bd10      	pop	{r4, pc}
    295c:	2000      	movs	r0, #0
    295e:	e7da      	b.n	2916 <_wdt_init+0xe>
		return ERR_DENIED;
    2960:	f06f 0010 	mvn.w	r0, #16
    2964:	bd10      	pop	{r4, pc}
    2966:	f06f 0010 	mvn.w	r0, #16
}
    296a:	bd10      	pop	{r4, pc}
    296c:	00004d08 	.word	0x00004d08
    2970:	000014c9 	.word	0x000014c9

00002974 <main>:
uint8_t writeCnt;
uint8_t readCnt;
uint8_t response[10];

int main(void)
{
    2974:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2976:	4b06      	ldr	r3, [pc, #24]	; (2990 <main+0x1c>)
    2978:	4798      	blx	r3
	modemPowerInit();
    297a:	4b06      	ldr	r3, [pc, #24]	; (2994 <main+0x20>)
    297c:	4798      	blx	r3
	memset(&response,0,sizeof(response));
    297e:	4b06      	ldr	r3, [pc, #24]	; (2998 <main+0x24>)
    2980:	2200      	movs	r2, #0
    2982:	601a      	str	r2, [r3, #0]
    2984:	605a      	str	r2, [r3, #4]
    2986:	811a      	strh	r2, [r3, #8]
	
	while (1)
	{
		ModemUsartOsTest();
    2988:	4c04      	ldr	r4, [pc, #16]	; (299c <main+0x28>)
    298a:	47a0      	blx	r4
    298c:	e7fd      	b.n	298a <main+0x16>
    298e:	bf00      	nop
    2990:	0000067d 	.word	0x0000067d
    2994:	000004a5 	.word	0x000004a5
    2998:	20001fd8 	.word	0x20001fd8
    299c:	000003e9 	.word	0x000003e9

000029a0 <sem_init>:

/**
 * \brief Semaphore initialization
 */
int32_t sem_init(sem_t *sem, uint32_t count)
{
    29a0:	b538      	push	{r3, r4, r5, lr}
    29a2:	4605      	mov	r5, r0
    29a4:	460c      	mov	r4, r1
	ASSERT(count <= SEMAPHORE_MAX_COUNT);
    29a6:	2235      	movs	r2, #53	; 0x35
    29a8:	4908      	ldr	r1, [pc, #32]	; (29cc <sem_init+0x2c>)
    29aa:	2c01      	cmp	r4, #1
    29ac:	bf8c      	ite	hi
    29ae:	2000      	movhi	r0, #0
    29b0:	2001      	movls	r0, #1
    29b2:	4b07      	ldr	r3, [pc, #28]	; (29d0 <sem_init+0x30>)
    29b4:	4798      	blx	r3

	*sem = xSemaphoreCreateCounting((uint32_t)SEMAPHORE_MAX_COUNT, count);
    29b6:	4621      	mov	r1, r4
    29b8:	2001      	movs	r0, #1
    29ba:	4b06      	ldr	r3, [pc, #24]	; (29d4 <sem_init+0x34>)
    29bc:	4798      	blx	r3
    29be:	6028      	str	r0, [r5, #0]

	return *sem ? ERR_NONE : ERR_NOT_INITIALIZED;
    29c0:	2800      	cmp	r0, #0
}
    29c2:	bf14      	ite	ne
    29c4:	2000      	movne	r0, #0
    29c6:	f06f 0013 	mvneq.w	r0, #19
    29ca:	bd38      	pop	{r3, r4, r5, pc}
    29cc:	00004d20 	.word	0x00004d20
    29d0:	000014c9 	.word	0x000014c9
    29d4:	00002f99 	.word	0x00002f99

000029d8 <sem_up>:

/**
 * \brief Semaphore up
 */
int32_t sem_up(sem_t *sem)
{
    29d8:	b510      	push	{r4, lr}
 * \brief Check if it's in ISR handling
 * \return \c true if it's in ISR
 */
static inline bool _is_in_isr(void)
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
    29da:	4b0d      	ldr	r3, [pc, #52]	; (2a10 <sem_up+0x38>)
    29dc:	685b      	ldr	r3, [r3, #4]
    29de:	f3c3 0308 	ubfx	r3, r3, #0, #9
	return is_in_isr() ? (xSemaphoreGiveFromISR(*sem, pdFALSE) ? 0 : ERR_ABORTED)
	                   : (xSemaphoreGive(*sem) ? ERR_NONE : ERR_ABORTED);
    29e2:	b14b      	cbz	r3, 29f8 <sem_up+0x20>
	return is_in_isr() ? (xSemaphoreGiveFromISR(*sem, pdFALSE) ? 0 : ERR_ABORTED)
    29e4:	2100      	movs	r1, #0
    29e6:	6800      	ldr	r0, [r0, #0]
    29e8:	4b0a      	ldr	r3, [pc, #40]	; (2a14 <sem_up+0x3c>)
    29ea:	4798      	blx	r3
	                   : (xSemaphoreGive(*sem) ? ERR_NONE : ERR_ABORTED);
    29ec:	2800      	cmp	r0, #0
    29ee:	bf14      	ite	ne
    29f0:	2000      	movne	r0, #0
    29f2:	f06f 0002 	mvneq.w	r0, #2
    29f6:	bd10      	pop	{r4, pc}
    29f8:	2300      	movs	r3, #0
    29fa:	461a      	mov	r2, r3
    29fc:	4619      	mov	r1, r3
    29fe:	6800      	ldr	r0, [r0, #0]
    2a00:	4c05      	ldr	r4, [pc, #20]	; (2a18 <sem_up+0x40>)
    2a02:	47a0      	blx	r4
    2a04:	2800      	cmp	r0, #0
    2a06:	bf14      	ite	ne
    2a08:	2000      	movne	r0, #0
    2a0a:	f06f 0002 	mvneq.w	r0, #2
}
    2a0e:	bd10      	pop	{r4, pc}
    2a10:	e000ed00 	.word	0xe000ed00
    2a14:	000031b9 	.word	0x000031b9
    2a18:	00002fdd 	.word	0x00002fdd

00002a1c <sem_down>:

/**
 * \brief Semaphore down, may suspend the caller thread
 */
int32_t sem_down(sem_t *sem, uint32_t timeout)
{
    2a1c:	b508      	push	{r3, lr}
	return xSemaphoreTake(*sem, timeout) ? ERR_NONE : ERR_TIMEOUT;
    2a1e:	6800      	ldr	r0, [r0, #0]
    2a20:	4b03      	ldr	r3, [pc, #12]	; (2a30 <sem_down+0x14>)
    2a22:	4798      	blx	r3
    2a24:	2800      	cmp	r0, #0
}
    2a26:	bf14      	ite	ne
    2a28:	2000      	movne	r0, #0
    2a2a:	f06f 0007 	mvneq.w	r0, #7
    2a2e:	bd08      	pop	{r3, pc}
    2a30:	00003295 	.word	0x00003295

00002a34 <sem_deinit>:
/**
 * \brief Semaphore deinitialization
 */
int32_t sem_deinit(sem_t *sem)
{
	if (*sem != NULL) {
    2a34:	6803      	ldr	r3, [r0, #0]
    2a36:	b143      	cbz	r3, 2a4a <sem_deinit+0x16>
{
    2a38:	b510      	push	{r4, lr}
    2a3a:	4604      	mov	r4, r0
		vSemaphoreDelete(*sem);
    2a3c:	4618      	mov	r0, r3
    2a3e:	4b04      	ldr	r3, [pc, #16]	; (2a50 <sem_deinit+0x1c>)
    2a40:	4798      	blx	r3
		*sem = NULL;
    2a42:	2300      	movs	r3, #0
    2a44:	6023      	str	r3, [r4, #0]
	}

	return ERR_NONE;
}
    2a46:	2000      	movs	r0, #0
    2a48:	bd10      	pop	{r4, pc}
    2a4a:	2000      	movs	r0, #0
    2a4c:	4770      	bx	lr
    2a4e:	bf00      	nop
    2a50:	00003475 	.word	0x00003475

00002a54 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    2a54:	f100 0308 	add.w	r3, r0, #8
    2a58:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2a5a:	f04f 32ff 	mov.w	r2, #4294967295
    2a5e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    2a60:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    2a62:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    2a64:	2300      	movs	r3, #0
    2a66:	6003      	str	r3, [r0, #0]
    2a68:	4770      	bx	lr

00002a6a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    2a6a:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    2a6c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    2a6e:	689a      	ldr	r2, [r3, #8]
    2a70:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2a72:	689a      	ldr	r2, [r3, #8]
    2a74:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    2a76:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    2a78:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    2a7a:	6803      	ldr	r3, [r0, #0]
    2a7c:	3301      	adds	r3, #1
    2a7e:	6003      	str	r3, [r0, #0]
    2a80:	4770      	bx	lr

00002a82 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    2a82:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    2a84:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    2a86:	f1b5 3fff 	cmp.w	r5, #4294967295
    2a8a:	d002      	beq.n	2a92 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    2a8c:	f100 0208 	add.w	r2, r0, #8
    2a90:	e002      	b.n	2a98 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    2a92:	6902      	ldr	r2, [r0, #16]
    2a94:	e004      	b.n	2aa0 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    2a96:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    2a98:	6853      	ldr	r3, [r2, #4]
    2a9a:	681c      	ldr	r4, [r3, #0]
    2a9c:	42a5      	cmp	r5, r4
    2a9e:	d2fa      	bcs.n	2a96 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    2aa0:	6853      	ldr	r3, [r2, #4]
    2aa2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2aa4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    2aa6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    2aa8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    2aaa:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    2aac:	6803      	ldr	r3, [r0, #0]
    2aae:	3301      	adds	r3, #1
    2ab0:	6003      	str	r3, [r0, #0]
}
    2ab2:	bc30      	pop	{r4, r5}
    2ab4:	4770      	bx	lr

00002ab6 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    2ab6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2ab8:	6842      	ldr	r2, [r0, #4]
    2aba:	6881      	ldr	r1, [r0, #8]
    2abc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2abe:	6882      	ldr	r2, [r0, #8]
    2ac0:	6841      	ldr	r1, [r0, #4]
    2ac2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    2ac4:	685a      	ldr	r2, [r3, #4]
    2ac6:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2ac8:	bf04      	itt	eq
    2aca:	6882      	ldreq	r2, [r0, #8]
    2acc:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2ace:	2200      	movs	r2, #0
    2ad0:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    2ad2:	681a      	ldr	r2, [r3, #0]
    2ad4:	3a01      	subs	r2, #1
    2ad6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2ad8:	6818      	ldr	r0, [r3, #0]
}
    2ada:	4770      	bx	lr
    2adc:	0000      	movs	r0, r0
	...

00002ae0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler(void)
{
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    2ae0:	4b07      	ldr	r3, [pc, #28]	; (2b00 <pxCurrentTCBConst2>)
    2ae2:	6819      	ldr	r1, [r3, #0]
    2ae4:	6808      	ldr	r0, [r1, #0]
    2ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2aea:	f380 8809 	msr	PSP, r0
    2aee:	f3bf 8f6f 	isb	sy
    2af2:	f04f 0000 	mov.w	r0, #0
    2af6:	f380 8811 	msr	BASEPRI, r0
    2afa:	4770      	bx	lr
    2afc:	f3af 8000 	nop.w

00002b00 <pxCurrentTCBConst2>:
    2b00:	20001530 	.word	0x20001530

00002b04 <vPortEnterCritical>:

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    2b04:	f04f 0380 	mov.w	r3, #128	; 0x80
    2b08:	f383 8811 	msr	BASEPRI, r3
    2b0c:	f3bf 8f6f 	isb	sy
    2b10:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical(void)
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
    2b14:	4a0a      	ldr	r2, [pc, #40]	; (2b40 <vPortEnterCritical+0x3c>)
    2b16:	6813      	ldr	r3, [r2, #0]
    2b18:	3301      	adds	r3, #1
    2b1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if (uxCriticalNesting == 1) {
    2b1c:	2b01      	cmp	r3, #1
    2b1e:	d10d      	bne.n	2b3c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    2b20:	4b08      	ldr	r3, [pc, #32]	; (2b44 <vPortEnterCritical+0x40>)
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	f013 0fff 	tst.w	r3, #255	; 0xff
    2b28:	d008      	beq.n	2b3c <vPortEnterCritical+0x38>
    2b2a:	f04f 0380 	mov.w	r3, #128	; 0x80
    2b2e:	f383 8811 	msr	BASEPRI, r3
    2b32:	f3bf 8f6f 	isb	sy
    2b36:	f3bf 8f4f 	dsb	sy
    2b3a:	e7fe      	b.n	2b3a <vPortEnterCritical+0x36>
    2b3c:	4770      	bx	lr
    2b3e:	bf00      	nop
    2b40:	200000f4 	.word	0x200000f4
    2b44:	e000ed04 	.word	0xe000ed04

00002b48 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical(void)
{
	configASSERT(uxCriticalNesting);
    2b48:	4b09      	ldr	r3, [pc, #36]	; (2b70 <vPortExitCritical+0x28>)
    2b4a:	681b      	ldr	r3, [r3, #0]
    2b4c:	b943      	cbnz	r3, 2b60 <vPortExitCritical+0x18>
    2b4e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2b52:	f383 8811 	msr	BASEPRI, r3
    2b56:	f3bf 8f6f 	isb	sy
    2b5a:	f3bf 8f4f 	dsb	sy
    2b5e:	e7fe      	b.n	2b5e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    2b60:	3b01      	subs	r3, #1
    2b62:	4a03      	ldr	r2, [pc, #12]	; (2b70 <vPortExitCritical+0x28>)
    2b64:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    2b66:	b90b      	cbnz	r3, 2b6c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    2b68:	f383 8811 	msr	BASEPRI, r3
    2b6c:	4770      	bx	lr
    2b6e:	bf00      	nop
    2b70:	200000f4 	.word	0x200000f4
	...

00002b80 <PendSV_Handler>:

void xPortPendSVHandler(void)
{
	/* This is a naked function. */

	__asm volatile(
    2b80:	f3ef 8009 	mrs	r0, PSP
    2b84:	f3bf 8f6f 	isb	sy
    2b88:	4b15      	ldr	r3, [pc, #84]	; (2be0 <pxCurrentTCBConst>)
    2b8a:	681a      	ldr	r2, [r3, #0]
    2b8c:	f01e 0f10 	tst.w	lr, #16
    2b90:	bf08      	it	eq
    2b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    2b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b9a:	6010      	str	r0, [r2, #0]
    2b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
    2ba0:	f04f 0080 	mov.w	r0, #128	; 0x80
    2ba4:	f380 8811 	msr	BASEPRI, r0
    2ba8:	f3bf 8f4f 	dsb	sy
    2bac:	f3bf 8f6f 	isb	sy
    2bb0:	f000 fdea 	bl	3788 <vTaskSwitchContext>
    2bb4:	f04f 0000 	mov.w	r0, #0
    2bb8:	f380 8811 	msr	BASEPRI, r0
    2bbc:	bc09      	pop	{r0, r3}
    2bbe:	6819      	ldr	r1, [r3, #0]
    2bc0:	6808      	ldr	r0, [r1, #0]
    2bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bc6:	f01e 0f10 	tst.w	lr, #16
    2bca:	bf08      	it	eq
    2bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    2bd0:	f380 8809 	msr	PSP, r0
    2bd4:	f3bf 8f6f 	isb	sy
    2bd8:	4770      	bx	lr
    2bda:	bf00      	nop
    2bdc:	f3af 8000 	nop.w

00002be0 <pxCurrentTCBConst>:
    2be0:	20001530 	.word	0x20001530

00002be4 <SysTick_Handler>:
	    "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void)
{
    2be4:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    2be6:	f04f 0380 	mov.w	r3, #128	; 0x80
    2bea:	f383 8811 	msr	BASEPRI, r3
    2bee:	f3bf 8f6f 	isb	sy
    2bf2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
    2bf6:	4b05      	ldr	r3, [pc, #20]	; (2c0c <SysTick_Handler+0x28>)
    2bf8:	4798      	blx	r3
    2bfa:	b118      	cbz	r0, 2c04 <SysTick_Handler+0x20>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    2bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2c00:	4b03      	ldr	r3, [pc, #12]	; (2c10 <SysTick_Handler+0x2c>)
    2c02:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    2c04:	2300      	movs	r3, #0
    2c06:	f383 8811 	msr	BASEPRI, r3
    2c0a:	bd08      	pop	{r3, pc}
    2c0c:	00003555 	.word	0x00003555
    2c10:	e000ed04 	.word	0xe000ed04

00002c14 <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    2c14:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    2c18:	2b0f      	cmp	r3, #15
    2c1a:	d90f      	bls.n	2c3c <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    2c1c:	4a10      	ldr	r2, [pc, #64]	; (2c60 <vPortValidateInterruptPriority+0x4c>)
    2c1e:	5c9b      	ldrb	r3, [r3, r2]
    2c20:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    2c22:	4a10      	ldr	r2, [pc, #64]	; (2c64 <vPortValidateInterruptPriority+0x50>)
    2c24:	7812      	ldrb	r2, [r2, #0]
    2c26:	429a      	cmp	r2, r3
    2c28:	d908      	bls.n	2c3c <vPortValidateInterruptPriority+0x28>
	__asm volatile("	mov %0, %1												\n"
    2c2a:	f04f 0380 	mov.w	r3, #128	; 0x80
    2c2e:	f383 8811 	msr	BASEPRI, r3
    2c32:	f3bf 8f6f 	isb	sy
    2c36:	f3bf 8f4f 	dsb	sy
    2c3a:	e7fe      	b.n	2c3a <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    2c3c:	4b0a      	ldr	r3, [pc, #40]	; (2c68 <vPortValidateInterruptPriority+0x54>)
    2c3e:	681b      	ldr	r3, [r3, #0]
    2c40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    2c44:	4a07      	ldr	r2, [pc, #28]	; (2c64 <vPortValidateInterruptPriority+0x50>)
    2c46:	6852      	ldr	r2, [r2, #4]
    2c48:	4293      	cmp	r3, r2
    2c4a:	d908      	bls.n	2c5e <vPortValidateInterruptPriority+0x4a>
    2c4c:	f04f 0380 	mov.w	r3, #128	; 0x80
    2c50:	f383 8811 	msr	BASEPRI, r3
    2c54:	f3bf 8f6f 	isb	sy
    2c58:	f3bf 8f4f 	dsb	sy
    2c5c:	e7fe      	b.n	2c5c <vPortValidateInterruptPriority+0x48>
    2c5e:	4770      	bx	lr
    2c60:	e000e3f0 	.word	0xe000e3f0
    2c64:	20000740 	.word	0x20000740
    2c68:	e000ed0c 	.word	0xe000ed0c

00002c6c <pvPortMalloc>:
static size_t xNextFreeByte = (size_t)0;

/*-----------------------------------------------------------*/

void *pvPortMalloc(size_t xWantedSize)
{
    2c6c:	b538      	push	{r3, r4, r5, lr}
    2c6e:	4604      	mov	r4, r0
	static uint8_t *pucAlignedHeap = NULL;

/* Ensure that blocks are always aligned to the required number of bytes. */
#if (portBYTE_ALIGNMENT != 1)
	{
		if (xWantedSize & portBYTE_ALIGNMENT_MASK) {
    2c70:	f010 0f07 	tst.w	r0, #7
			/* Byte alignment required. */
			xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    2c74:	bf1c      	itt	ne
    2c76:	f020 0407 	bicne.w	r4, r0, #7
    2c7a:	3408      	addne	r4, #8
		}
	}
#endif

	vTaskSuspendAll();
    2c7c:	4b10      	ldr	r3, [pc, #64]	; (2cc0 <pvPortMalloc+0x54>)
    2c7e:	4798      	blx	r3
	{
		if (pucAlignedHeap == NULL) {
    2c80:	4b10      	ldr	r3, [pc, #64]	; (2cc4 <pvPortMalloc+0x58>)
    2c82:	681b      	ldr	r3, [r3, #0]
    2c84:	b18b      	cbz	r3, 2caa <pvPortMalloc+0x3e>
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
		}

		/* Check there is enough room left for the allocation. */
		if (((xNextFreeByte + xWantedSize) < configADJUSTED_HEAP_SIZE)
    2c86:	4b0f      	ldr	r3, [pc, #60]	; (2cc4 <pvPortMalloc+0x58>)
    2c88:	f8d3 3d4c 	ldr.w	r3, [r3, #3404]	; 0xd4c
    2c8c:	441c      	add	r4, r3
    2c8e:	f5b4 6f54 	cmp.w	r4, #3392	; 0xd40
    2c92:	d211      	bcs.n	2cb8 <pvPortMalloc+0x4c>
		    && ((xNextFreeByte + xWantedSize) > xNextFreeByte)) /* Check for overflow. */
    2c94:	42a3      	cmp	r3, r4
    2c96:	d211      	bcs.n	2cbc <pvPortMalloc+0x50>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    2c98:	4a0a      	ldr	r2, [pc, #40]	; (2cc4 <pvPortMalloc+0x58>)
    2c9a:	6815      	ldr	r5, [r2, #0]
    2c9c:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
    2c9e:	f8c2 4d4c 	str.w	r4, [r2, #3404]	; 0xd4c
		}

		traceMALLOC(pvReturn, xWantedSize);
	}
	(void)xTaskResumeAll();
    2ca2:	4b09      	ldr	r3, [pc, #36]	; (2cc8 <pvPortMalloc+0x5c>)
    2ca4:	4798      	blx	r3
		}
	}
#endif

	return pvReturn;
}
    2ca6:	4628      	mov	r0, r5
    2ca8:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    2caa:	4a06      	ldr	r2, [pc, #24]	; (2cc4 <pvPortMalloc+0x58>)
    2cac:	f102 030c 	add.w	r3, r2, #12
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
    2cb0:	f023 0307 	bic.w	r3, r3, #7
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    2cb4:	6013      	str	r3, [r2, #0]
    2cb6:	e7e6      	b.n	2c86 <pvPortMalloc+0x1a>
	void *          pvReturn       = NULL;
    2cb8:	2500      	movs	r5, #0
    2cba:	e7f2      	b.n	2ca2 <pvPortMalloc+0x36>
    2cbc:	2500      	movs	r5, #0
    2cbe:	e7f0      	b.n	2ca2 <pvPortMalloc+0x36>
    2cc0:	00003541 	.word	0x00003541
    2cc4:	20000748 	.word	0x20000748
    2cc8:	0000367d 	.word	0x0000367d

00002ccc <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	(void)pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT(pv == NULL);
    2ccc:	b140      	cbz	r0, 2ce0 <vPortFree+0x14>
    2cce:	f04f 0380 	mov.w	r3, #128	; 0x80
    2cd2:	f383 8811 	msr	BASEPRI, r3
    2cd6:	f3bf 8f6f 	isb	sy
    2cda:	f3bf 8f4f 	dsb	sy
    2cde:	e7fe      	b.n	2cde <vPortFree+0x12>
    2ce0:	4770      	bx	lr
	...

00002ce4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    2ce4:	b510      	push	{r4, lr}
    2ce6:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    2ce8:	4b04      	ldr	r3, [pc, #16]	; (2cfc <prvIsQueueEmpty+0x18>)
    2cea:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    2cec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    2cee:	4b04      	ldr	r3, [pc, #16]	; (2d00 <prvIsQueueEmpty+0x1c>)
    2cf0:	4798      	blx	r3

	return xReturn;
}
    2cf2:	fab4 f084 	clz	r0, r4
    2cf6:	0940      	lsrs	r0, r0, #5
    2cf8:	bd10      	pop	{r4, pc}
    2cfa:	bf00      	nop
    2cfc:	00002b05 	.word	0x00002b05
    2d00:	00002b49 	.word	0x00002b49

00002d04 <prvCopyDataToQueue>:
{
    2d04:	b570      	push	{r4, r5, r6, lr}
    2d06:	4604      	mov	r4, r0
    2d08:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2d0a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    2d0c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    2d0e:	b952      	cbnz	r2, 2d26 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    2d10:	6803      	ldr	r3, [r0, #0]
    2d12:	2b00      	cmp	r3, #0
    2d14:	d12a      	bne.n	2d6c <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    2d16:	6840      	ldr	r0, [r0, #4]
    2d18:	4b18      	ldr	r3, [pc, #96]	; (2d7c <prvCopyDataToQueue+0x78>)
    2d1a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    2d1c:	2300      	movs	r3, #0
    2d1e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    2d20:	3501      	adds	r5, #1
    2d22:	63a5      	str	r5, [r4, #56]	; 0x38
}
    2d24:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    2d26:	b96e      	cbnz	r6, 2d44 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    2d28:	6880      	ldr	r0, [r0, #8]
    2d2a:	4b15      	ldr	r3, [pc, #84]	; (2d80 <prvCopyDataToQueue+0x7c>)
    2d2c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2d2e:	68a3      	ldr	r3, [r4, #8]
    2d30:	6c22      	ldr	r2, [r4, #64]	; 0x40
    2d32:	4413      	add	r3, r2
    2d34:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    2d36:	6862      	ldr	r2, [r4, #4]
    2d38:	4293      	cmp	r3, r2
    2d3a:	d319      	bcc.n	2d70 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    2d3c:	6823      	ldr	r3, [r4, #0]
    2d3e:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    2d40:	2000      	movs	r0, #0
    2d42:	e7ed      	b.n	2d20 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    2d44:	68c0      	ldr	r0, [r0, #12]
    2d46:	4b0e      	ldr	r3, [pc, #56]	; (2d80 <prvCopyDataToQueue+0x7c>)
    2d48:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    2d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2d4c:	425b      	negs	r3, r3
    2d4e:	68e2      	ldr	r2, [r4, #12]
    2d50:	441a      	add	r2, r3
    2d52:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    2d54:	6821      	ldr	r1, [r4, #0]
    2d56:	428a      	cmp	r2, r1
    2d58:	d202      	bcs.n	2d60 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    2d5a:	6862      	ldr	r2, [r4, #4]
    2d5c:	4413      	add	r3, r2
    2d5e:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    2d60:	2e02      	cmp	r6, #2
    2d62:	d107      	bne.n	2d74 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    2d64:	b145      	cbz	r5, 2d78 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    2d66:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    2d68:	2000      	movs	r0, #0
    2d6a:	e7d9      	b.n	2d20 <prvCopyDataToQueue+0x1c>
    2d6c:	2000      	movs	r0, #0
    2d6e:	e7d7      	b.n	2d20 <prvCopyDataToQueue+0x1c>
    2d70:	2000      	movs	r0, #0
    2d72:	e7d5      	b.n	2d20 <prvCopyDataToQueue+0x1c>
    2d74:	2000      	movs	r0, #0
    2d76:	e7d3      	b.n	2d20 <prvCopyDataToQueue+0x1c>
    2d78:	2000      	movs	r0, #0
    2d7a:	e7d1      	b.n	2d20 <prvCopyDataToQueue+0x1c>
    2d7c:	00003a65 	.word	0x00003a65
    2d80:	00003c15 	.word	0x00003c15

00002d84 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    2d84:	b570      	push	{r4, r5, r6, lr}
    2d86:	b082      	sub	sp, #8
    2d88:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    2d8a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    2d8c:	b164      	cbz	r4, 2da8 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    2d8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2d90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2d92:	429a      	cmp	r2, r3
    2d94:	d311      	bcc.n	2dba <prvNotifyQueueSetContainer+0x36>
    2d96:	f04f 0380 	mov.w	r3, #128	; 0x80
    2d9a:	f383 8811 	msr	BASEPRI, r3
    2d9e:	f3bf 8f6f 	isb	sy
    2da2:	f3bf 8f4f 	dsb	sy
    2da6:	e7fe      	b.n	2da6 <prvNotifyQueueSetContainer+0x22>
    2da8:	f04f 0380 	mov.w	r3, #128	; 0x80
    2dac:	f383 8811 	msr	BASEPRI, r3
    2db0:	f3bf 8f6f 	isb	sy
    2db4:	f3bf 8f4f 	dsb	sy
    2db8:	e7fe      	b.n	2db8 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    2dba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2dbc:	4293      	cmp	r3, r2
    2dbe:	d803      	bhi.n	2dc8 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    2dc0:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    2dc2:	4630      	mov	r0, r6
    2dc4:	b002      	add	sp, #8
    2dc6:	bd70      	pop	{r4, r5, r6, pc}
    2dc8:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    2dca:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    2dce:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    2dd0:	a901      	add	r1, sp, #4
    2dd2:	4620      	mov	r0, r4
    2dd4:	4b0a      	ldr	r3, [pc, #40]	; (2e00 <prvNotifyQueueSetContainer+0x7c>)
    2dd6:	4798      	blx	r3
    2dd8:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    2dda:	f1b5 3fff 	cmp.w	r5, #4294967295
    2dde:	d10a      	bne.n	2df6 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    2de0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2de2:	2b00      	cmp	r3, #0
    2de4:	d0ed      	beq.n	2dc2 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    2de6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    2dea:	4b06      	ldr	r3, [pc, #24]	; (2e04 <prvNotifyQueueSetContainer+0x80>)
    2dec:	4798      	blx	r3
    2dee:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    2df0:	bf18      	it	ne
    2df2:	2601      	movne	r6, #1
    2df4:	e7e5      	b.n	2dc2 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    2df6:	1c6b      	adds	r3, r5, #1
    2df8:	b25b      	sxtb	r3, r3
    2dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    2dfe:	e7e0      	b.n	2dc2 <prvNotifyQueueSetContainer+0x3e>
    2e00:	00002d05 	.word	0x00002d05
    2e04:	00003861 	.word	0x00003861

00002e08 <prvUnlockQueue>:
{
    2e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e0c:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    2e0e:	4b23      	ldr	r3, [pc, #140]	; (2e9c <prvUnlockQueue+0x94>)
    2e10:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    2e12:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    2e16:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    2e18:	2c00      	cmp	r4, #0
    2e1a:	dd19      	ble.n	2e50 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    2e1c:	4e20      	ldr	r6, [pc, #128]	; (2ea0 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    2e1e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 2eac <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    2e22:	4f20      	ldr	r7, [pc, #128]	; (2ea4 <prvUnlockQueue+0x9c>)
    2e24:	e008      	b.n	2e38 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    2e26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2e28:	b193      	cbz	r3, 2e50 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    2e2a:	f105 0024 	add.w	r0, r5, #36	; 0x24
    2e2e:	47b8      	blx	r7
    2e30:	b960      	cbnz	r0, 2e4c <prvUnlockQueue+0x44>
    2e32:	3c01      	subs	r4, #1
    2e34:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    2e36:	b15c      	cbz	r4, 2e50 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    2e38:	6cab      	ldr	r3, [r5, #72]	; 0x48
    2e3a:	2b00      	cmp	r3, #0
    2e3c:	d0f3      	beq.n	2e26 <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    2e3e:	2100      	movs	r1, #0
    2e40:	4628      	mov	r0, r5
    2e42:	47b0      	blx	r6
    2e44:	2800      	cmp	r0, #0
    2e46:	d0f4      	beq.n	2e32 <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    2e48:	47c0      	blx	r8
    2e4a:	e7f2      	b.n	2e32 <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    2e4c:	47c0      	blx	r8
    2e4e:	e7f0      	b.n	2e32 <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    2e50:	23ff      	movs	r3, #255	; 0xff
    2e52:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    2e56:	4b14      	ldr	r3, [pc, #80]	; (2ea8 <prvUnlockQueue+0xa0>)
    2e58:	4798      	blx	r3
	taskENTER_CRITICAL();
    2e5a:	4b10      	ldr	r3, [pc, #64]	; (2e9c <prvUnlockQueue+0x94>)
    2e5c:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    2e5e:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    2e62:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    2e64:	2c00      	cmp	r4, #0
    2e66:	dd12      	ble.n	2e8e <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    2e68:	692b      	ldr	r3, [r5, #16]
    2e6a:	b183      	cbz	r3, 2e8e <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    2e6c:	f105 0710 	add.w	r7, r5, #16
    2e70:	4e0c      	ldr	r6, [pc, #48]	; (2ea4 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    2e72:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2eac <prvUnlockQueue+0xa4>
    2e76:	e004      	b.n	2e82 <prvUnlockQueue+0x7a>
    2e78:	3c01      	subs	r4, #1
    2e7a:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    2e7c:	b13c      	cbz	r4, 2e8e <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    2e7e:	692b      	ldr	r3, [r5, #16]
    2e80:	b12b      	cbz	r3, 2e8e <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    2e82:	4638      	mov	r0, r7
    2e84:	47b0      	blx	r6
    2e86:	2800      	cmp	r0, #0
    2e88:	d0f6      	beq.n	2e78 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    2e8a:	47c0      	blx	r8
    2e8c:	e7f4      	b.n	2e78 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    2e8e:	23ff      	movs	r3, #255	; 0xff
    2e90:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    2e94:	4b04      	ldr	r3, [pc, #16]	; (2ea8 <prvUnlockQueue+0xa0>)
    2e96:	4798      	blx	r3
    2e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e9c:	00002b05 	.word	0x00002b05
    2ea0:	00002d85 	.word	0x00002d85
    2ea4:	00003861 	.word	0x00003861
    2ea8:	00002b49 	.word	0x00002b49
    2eac:	00003991 	.word	0x00003991

00002eb0 <xQueueGenericReset>:
{
    2eb0:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    2eb2:	b330      	cbz	r0, 2f02 <xQueueGenericReset+0x52>
    2eb4:	4604      	mov	r4, r0
    2eb6:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    2eb8:	4b1c      	ldr	r3, [pc, #112]	; (2f2c <xQueueGenericReset+0x7c>)
    2eba:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    2ebc:	6822      	ldr	r2, [r4, #0]
    2ebe:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2ec0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2ec2:	fb03 f301 	mul.w	r3, r3, r1
    2ec6:	18d0      	adds	r0, r2, r3
    2ec8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    2eca:	2000      	movs	r0, #0
    2ecc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    2ece:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    2ed0:	1a5b      	subs	r3, r3, r1
    2ed2:	4413      	add	r3, r2
    2ed4:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    2ed6:	23ff      	movs	r3, #255	; 0xff
    2ed8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    2edc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    2ee0:	b9c5      	cbnz	r5, 2f14 <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    2ee2:	6923      	ldr	r3, [r4, #16]
    2ee4:	b1eb      	cbz	r3, 2f22 <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    2ee6:	f104 0010 	add.w	r0, r4, #16
    2eea:	4b11      	ldr	r3, [pc, #68]	; (2f30 <xQueueGenericReset+0x80>)
    2eec:	4798      	blx	r3
    2eee:	b1c0      	cbz	r0, 2f22 <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    2ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2ef4:	4b0f      	ldr	r3, [pc, #60]	; (2f34 <xQueueGenericReset+0x84>)
    2ef6:	601a      	str	r2, [r3, #0]
    2ef8:	f3bf 8f4f 	dsb	sy
    2efc:	f3bf 8f6f 	isb	sy
    2f00:	e00f      	b.n	2f22 <xQueueGenericReset+0x72>
    2f02:	f04f 0380 	mov.w	r3, #128	; 0x80
    2f06:	f383 8811 	msr	BASEPRI, r3
    2f0a:	f3bf 8f6f 	isb	sy
    2f0e:	f3bf 8f4f 	dsb	sy
    2f12:	e7fe      	b.n	2f12 <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    2f14:	f104 0010 	add.w	r0, r4, #16
    2f18:	4d07      	ldr	r5, [pc, #28]	; (2f38 <xQueueGenericReset+0x88>)
    2f1a:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    2f1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    2f20:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    2f22:	4b06      	ldr	r3, [pc, #24]	; (2f3c <xQueueGenericReset+0x8c>)
    2f24:	4798      	blx	r3
}
    2f26:	2001      	movs	r0, #1
    2f28:	bd38      	pop	{r3, r4, r5, pc}
    2f2a:	bf00      	nop
    2f2c:	00002b05 	.word	0x00002b05
    2f30:	00003861 	.word	0x00003861
    2f34:	e000ed04 	.word	0xe000ed04
    2f38:	00002a55 	.word	0x00002a55
    2f3c:	00002b49 	.word	0x00002b49

00002f40 <xQueueGenericCreate>:
{
    2f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    2f42:	b940      	cbnz	r0, 2f56 <xQueueGenericCreate+0x16>
    2f44:	f04f 0380 	mov.w	r3, #128	; 0x80
    2f48:	f383 8811 	msr	BASEPRI, r3
    2f4c:	f3bf 8f6f 	isb	sy
    2f50:	f3bf 8f4f 	dsb	sy
    2f54:	e7fe      	b.n	2f54 <xQueueGenericCreate+0x14>
    2f56:	4606      	mov	r6, r0
    2f58:	4617      	mov	r7, r2
    2f5a:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    2f5c:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    2f60:	3054      	adds	r0, #84	; 0x54
    2f62:	4b0b      	ldr	r3, [pc, #44]	; (2f90 <xQueueGenericCreate+0x50>)
    2f64:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    2f66:	4604      	mov	r4, r0
    2f68:	b178      	cbz	r0, 2f8a <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    2f6a:	b11d      	cbz	r5, 2f74 <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    2f6c:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    2f70:	6003      	str	r3, [r0, #0]
    2f72:	e000      	b.n	2f76 <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    2f74:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    2f76:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    2f78:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    2f7a:	2101      	movs	r1, #1
    2f7c:	4620      	mov	r0, r4
    2f7e:	4b05      	ldr	r3, [pc, #20]	; (2f94 <xQueueGenericCreate+0x54>)
    2f80:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    2f82:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    2f86:	2300      	movs	r3, #0
    2f88:	64a3      	str	r3, [r4, #72]	; 0x48
}
    2f8a:	4620      	mov	r0, r4
    2f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f8e:	bf00      	nop
    2f90:	00002c6d 	.word	0x00002c6d
    2f94:	00002eb1 	.word	0x00002eb1

00002f98 <xQueueCreateCountingSemaphore>:
	configASSERT(uxMaxCount != 0);
    2f98:	b940      	cbnz	r0, 2fac <xQueueCreateCountingSemaphore+0x14>
    2f9a:	f04f 0380 	mov.w	r3, #128	; 0x80
    2f9e:	f383 8811 	msr	BASEPRI, r3
    2fa2:	f3bf 8f6f 	isb	sy
    2fa6:	f3bf 8f4f 	dsb	sy
    2faa:	e7fe      	b.n	2faa <xQueueCreateCountingSemaphore+0x12>
	configASSERT(uxInitialCount <= uxMaxCount);
    2fac:	4288      	cmp	r0, r1
    2fae:	d208      	bcs.n	2fc2 <xQueueCreateCountingSemaphore+0x2a>
    2fb0:	f04f 0380 	mov.w	r3, #128	; 0x80
    2fb4:	f383 8811 	msr	BASEPRI, r3
    2fb8:	f3bf 8f6f 	isb	sy
    2fbc:	f3bf 8f4f 	dsb	sy
    2fc0:	e7fe      	b.n	2fc0 <xQueueCreateCountingSemaphore+0x28>
{
    2fc2:	b510      	push	{r4, lr}
    2fc4:	460c      	mov	r4, r1
	xHandle = xQueueGenericCreate(uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE);
    2fc6:	2202      	movs	r2, #2
    2fc8:	2100      	movs	r1, #0
    2fca:	4b03      	ldr	r3, [pc, #12]	; (2fd8 <xQueueCreateCountingSemaphore+0x40>)
    2fcc:	4798      	blx	r3
	if (xHandle != NULL) {
    2fce:	4603      	mov	r3, r0
    2fd0:	b100      	cbz	r0, 2fd4 <xQueueCreateCountingSemaphore+0x3c>
		((Queue_t *)xHandle)->uxMessagesWaiting = uxInitialCount;
    2fd2:	6384      	str	r4, [r0, #56]	; 0x38
}
    2fd4:	4618      	mov	r0, r3
    2fd6:	bd10      	pop	{r4, pc}
    2fd8:	00002f41 	.word	0x00002f41

00002fdc <xQueueGenericSend>:
{
    2fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2fe0:	b085      	sub	sp, #20
    2fe2:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    2fe4:	b198      	cbz	r0, 300e <xQueueGenericSend+0x32>
    2fe6:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    2fe8:	b1d1      	cbz	r1, 3020 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    2fea:	2b02      	cmp	r3, #2
    2fec:	d024      	beq.n	3038 <xQueueGenericSend+0x5c>
    2fee:	461e      	mov	r6, r3
    2ff0:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    2ff2:	4b64      	ldr	r3, [pc, #400]	; (3184 <xQueueGenericSend+0x1a8>)
    2ff4:	4798      	blx	r3
    2ff6:	bb58      	cbnz	r0, 3050 <xQueueGenericSend+0x74>
    2ff8:	9b01      	ldr	r3, [sp, #4]
    2ffa:	b38b      	cbz	r3, 3060 <xQueueGenericSend+0x84>
    2ffc:	f04f 0380 	mov.w	r3, #128	; 0x80
    3000:	f383 8811 	msr	BASEPRI, r3
    3004:	f3bf 8f6f 	isb	sy
    3008:	f3bf 8f4f 	dsb	sy
    300c:	e7fe      	b.n	300c <xQueueGenericSend+0x30>
    300e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3012:	f383 8811 	msr	BASEPRI, r3
    3016:	f3bf 8f6f 	isb	sy
    301a:	f3bf 8f4f 	dsb	sy
    301e:	e7fe      	b.n	301e <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3020:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3022:	2a00      	cmp	r2, #0
    3024:	d0e1      	beq.n	2fea <xQueueGenericSend+0xe>
    3026:	f04f 0380 	mov.w	r3, #128	; 0x80
    302a:	f383 8811 	msr	BASEPRI, r3
    302e:	f3bf 8f6f 	isb	sy
    3032:	f3bf 8f4f 	dsb	sy
    3036:	e7fe      	b.n	3036 <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3038:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    303a:	2a01      	cmp	r2, #1
    303c:	d0d7      	beq.n	2fee <xQueueGenericSend+0x12>
    303e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3042:	f383 8811 	msr	BASEPRI, r3
    3046:	f3bf 8f6f 	isb	sy
    304a:	f3bf 8f4f 	dsb	sy
    304e:	e7fe      	b.n	304e <xQueueGenericSend+0x72>
    3050:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    3052:	f8df 815c 	ldr.w	r8, [pc, #348]	; 31b0 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3056:	f8df a15c 	ldr.w	sl, [pc, #348]	; 31b4 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    305a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 3190 <xQueueGenericSend+0x1b4>
    305e:	e041      	b.n	30e4 <xQueueGenericSend+0x108>
    3060:	2500      	movs	r5, #0
    3062:	e7f6      	b.n	3052 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3064:	4632      	mov	r2, r6
    3066:	4639      	mov	r1, r7
    3068:	4620      	mov	r0, r4
    306a:	4b47      	ldr	r3, [pc, #284]	; (3188 <xQueueGenericSend+0x1ac>)
    306c:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    306e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3070:	b193      	cbz	r3, 3098 <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3072:	4631      	mov	r1, r6
    3074:	4620      	mov	r0, r4
    3076:	4b45      	ldr	r3, [pc, #276]	; (318c <xQueueGenericSend+0x1b0>)
    3078:	4798      	blx	r3
    307a:	b138      	cbz	r0, 308c <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    307c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3080:	4b43      	ldr	r3, [pc, #268]	; (3190 <xQueueGenericSend+0x1b4>)
    3082:	601a      	str	r2, [r3, #0]
    3084:	f3bf 8f4f 	dsb	sy
    3088:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    308c:	4b41      	ldr	r3, [pc, #260]	; (3194 <xQueueGenericSend+0x1b8>)
    308e:	4798      	blx	r3
				return pdPASS;
    3090:	2001      	movs	r0, #1
}
    3092:	b005      	add	sp, #20
    3094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3098:	6a63      	ldr	r3, [r4, #36]	; 0x24
    309a:	b173      	cbz	r3, 30ba <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    309c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    30a0:	4b3d      	ldr	r3, [pc, #244]	; (3198 <xQueueGenericSend+0x1bc>)
    30a2:	4798      	blx	r3
    30a4:	2800      	cmp	r0, #0
    30a6:	d0f1      	beq.n	308c <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    30a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    30ac:	4b38      	ldr	r3, [pc, #224]	; (3190 <xQueueGenericSend+0x1b4>)
    30ae:	601a      	str	r2, [r3, #0]
    30b0:	f3bf 8f4f 	dsb	sy
    30b4:	f3bf 8f6f 	isb	sy
    30b8:	e7e8      	b.n	308c <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    30ba:	2800      	cmp	r0, #0
    30bc:	d0e6      	beq.n	308c <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    30be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    30c2:	4b33      	ldr	r3, [pc, #204]	; (3190 <xQueueGenericSend+0x1b4>)
    30c4:	601a      	str	r2, [r3, #0]
    30c6:	f3bf 8f4f 	dsb	sy
    30ca:	f3bf 8f6f 	isb	sy
    30ce:	e7dd      	b.n	308c <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    30d0:	4b30      	ldr	r3, [pc, #192]	; (3194 <xQueueGenericSend+0x1b8>)
    30d2:	4798      	blx	r3
					return errQUEUE_FULL;
    30d4:	2000      	movs	r0, #0
    30d6:	e7dc      	b.n	3092 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    30d8:	4620      	mov	r0, r4
    30da:	4b30      	ldr	r3, [pc, #192]	; (319c <xQueueGenericSend+0x1c0>)
    30dc:	4798      	blx	r3
				(void)xTaskResumeAll();
    30de:	4b30      	ldr	r3, [pc, #192]	; (31a0 <xQueueGenericSend+0x1c4>)
    30e0:	4798      	blx	r3
    30e2:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    30e4:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    30e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    30e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    30ea:	429a      	cmp	r2, r3
    30ec:	d3ba      	bcc.n	3064 <xQueueGenericSend+0x88>
    30ee:	2e02      	cmp	r6, #2
    30f0:	d0b8      	beq.n	3064 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    30f2:	9b01      	ldr	r3, [sp, #4]
    30f4:	2b00      	cmp	r3, #0
    30f6:	d0eb      	beq.n	30d0 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    30f8:	b90d      	cbnz	r5, 30fe <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    30fa:	a802      	add	r0, sp, #8
    30fc:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    30fe:	4b25      	ldr	r3, [pc, #148]	; (3194 <xQueueGenericSend+0x1b8>)
    3100:	4798      	blx	r3
		vTaskSuspendAll();
    3102:	4b28      	ldr	r3, [pc, #160]	; (31a4 <xQueueGenericSend+0x1c8>)
    3104:	4798      	blx	r3
		prvLockQueue(pxQueue);
    3106:	47c0      	blx	r8
    3108:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    310c:	b25b      	sxtb	r3, r3
    310e:	f1b3 3fff 	cmp.w	r3, #4294967295
    3112:	bf04      	itt	eq
    3114:	2300      	moveq	r3, #0
    3116:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    311a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    311e:	b25b      	sxtb	r3, r3
    3120:	f1b3 3fff 	cmp.w	r3, #4294967295
    3124:	bf04      	itt	eq
    3126:	2300      	moveq	r3, #0
    3128:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    312c:	4b19      	ldr	r3, [pc, #100]	; (3194 <xQueueGenericSend+0x1b8>)
    312e:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3130:	a901      	add	r1, sp, #4
    3132:	a802      	add	r0, sp, #8
    3134:	4b1c      	ldr	r3, [pc, #112]	; (31a8 <xQueueGenericSend+0x1cc>)
    3136:	4798      	blx	r3
    3138:	b9e0      	cbnz	r0, 3174 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    313a:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    313c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    3140:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    3142:	4b14      	ldr	r3, [pc, #80]	; (3194 <xQueueGenericSend+0x1b8>)
    3144:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    3146:	45ab      	cmp	fp, r5
    3148:	d1c6      	bne.n	30d8 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    314a:	9901      	ldr	r1, [sp, #4]
    314c:	f104 0010 	add.w	r0, r4, #16
    3150:	4b16      	ldr	r3, [pc, #88]	; (31ac <xQueueGenericSend+0x1d0>)
    3152:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3154:	4620      	mov	r0, r4
    3156:	4b11      	ldr	r3, [pc, #68]	; (319c <xQueueGenericSend+0x1c0>)
    3158:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    315a:	4b11      	ldr	r3, [pc, #68]	; (31a0 <xQueueGenericSend+0x1c4>)
    315c:	4798      	blx	r3
    315e:	2800      	cmp	r0, #0
    3160:	d1bf      	bne.n	30e2 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    3162:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3166:	f8c9 3000 	str.w	r3, [r9]
    316a:	f3bf 8f4f 	dsb	sy
    316e:	f3bf 8f6f 	isb	sy
    3172:	e7b6      	b.n	30e2 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    3174:	4620      	mov	r0, r4
    3176:	4b09      	ldr	r3, [pc, #36]	; (319c <xQueueGenericSend+0x1c0>)
    3178:	4798      	blx	r3
			(void)xTaskResumeAll();
    317a:	4b09      	ldr	r3, [pc, #36]	; (31a0 <xQueueGenericSend+0x1c4>)
    317c:	4798      	blx	r3
			return errQUEUE_FULL;
    317e:	2000      	movs	r0, #0
    3180:	e787      	b.n	3092 <xQueueGenericSend+0xb6>
    3182:	bf00      	nop
    3184:	000039a1 	.word	0x000039a1
    3188:	00002d05 	.word	0x00002d05
    318c:	00002d85 	.word	0x00002d85
    3190:	e000ed04 	.word	0xe000ed04
    3194:	00002b49 	.word	0x00002b49
    3198:	00003861 	.word	0x00003861
    319c:	00002e09 	.word	0x00002e09
    31a0:	0000367d 	.word	0x0000367d
    31a4:	00003541 	.word	0x00003541
    31a8:	00003905 	.word	0x00003905
    31ac:	00003825 	.word	0x00003825
    31b0:	00002b05 	.word	0x00002b05
    31b4:	000038f1 	.word	0x000038f1

000031b8 <xQueueGiveFromISR>:
	configASSERT(pxQueue);
    31b8:	b160      	cbz	r0, 31d4 <xQueueGiveFromISR+0x1c>
{
    31ba:	b570      	push	{r4, r5, r6, lr}
    31bc:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    31be:	6c03      	ldr	r3, [r0, #64]	; 0x40
    31c0:	b18b      	cbz	r3, 31e6 <xQueueGiveFromISR+0x2e>
    31c2:	f04f 0380 	mov.w	r3, #128	; 0x80
    31c6:	f383 8811 	msr	BASEPRI, r3
    31ca:	f3bf 8f6f 	isb	sy
    31ce:	f3bf 8f4f 	dsb	sy
    31d2:	e7fe      	b.n	31d2 <xQueueGiveFromISR+0x1a>
    31d4:	f04f 0380 	mov.w	r3, #128	; 0x80
    31d8:	f383 8811 	msr	BASEPRI, r3
    31dc:	f3bf 8f6f 	isb	sy
    31e0:	f3bf 8f4f 	dsb	sy
    31e4:	e7fe      	b.n	31e4 <xQueueGiveFromISR+0x2c>
	configASSERT(!((pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) && (pxQueue->pxMutexHolder != NULL)));
    31e6:	6803      	ldr	r3, [r0, #0]
    31e8:	b32b      	cbz	r3, 3236 <xQueueGiveFromISR+0x7e>
    31ea:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    31ec:	4b26      	ldr	r3, [pc, #152]	; (3288 <xQueueGiveFromISR+0xd0>)
    31ee:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    31f0:	f3ef 8511 	mrs	r5, BASEPRI
    31f4:	f04f 0380 	mov.w	r3, #128	; 0x80
    31f8:	f383 8811 	msr	BASEPRI, r3
    31fc:	f3bf 8f6f 	isb	sy
    3200:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    3204:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if (uxMessagesWaiting < pxQueue->uxLength) {
    3206:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3208:	429a      	cmp	r2, r3
    320a:	d231      	bcs.n	3270 <xQueueGiveFromISR+0xb8>
			const int8_t cTxLock = pxQueue->cTxLock;
    320c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3210:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    3212:	3201      	adds	r2, #1
    3214:	63a2      	str	r2, [r4, #56]	; 0x38
			if (cTxLock == queueUNLOCKED) {
    3216:	f1b3 3fff 	cmp.w	r3, #4294967295
    321a:	d123      	bne.n	3264 <xQueueGiveFromISR+0xac>
					if (pxQueue->pxQueueSetContainer != NULL) {
    321c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    321e:	b1b3      	cbz	r3, 324e <xQueueGiveFromISR+0x96>
						if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3220:	2100      	movs	r1, #0
    3222:	4620      	mov	r0, r4
    3224:	4b19      	ldr	r3, [pc, #100]	; (328c <xQueueGiveFromISR+0xd4>)
    3226:	4798      	blx	r3
    3228:	b320      	cbz	r0, 3274 <xQueueGiveFromISR+0xbc>
							if (pxHigherPriorityTaskWoken != NULL) {
    322a:	b32e      	cbz	r6, 3278 <xQueueGiveFromISR+0xc0>
								*pxHigherPriorityTaskWoken = pdTRUE;
    322c:	2001      	movs	r0, #1
    322e:	6030      	str	r0, [r6, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3230:	f385 8811 	msr	BASEPRI, r5
}
    3234:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT(!((pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) && (pxQueue->pxMutexHolder != NULL)));
    3236:	6843      	ldr	r3, [r0, #4]
    3238:	2b00      	cmp	r3, #0
    323a:	d0d6      	beq.n	31ea <xQueueGiveFromISR+0x32>
	__asm volatile("	mov %0, %1												\n"
    323c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3240:	f383 8811 	msr	BASEPRI, r3
    3244:	f3bf 8f6f 	isb	sy
    3248:	f3bf 8f4f 	dsb	sy
    324c:	e7fe      	b.n	324c <xQueueGiveFromISR+0x94>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    324e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3250:	b1a3      	cbz	r3, 327c <xQueueGiveFromISR+0xc4>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3252:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3256:	4b0e      	ldr	r3, [pc, #56]	; (3290 <xQueueGiveFromISR+0xd8>)
    3258:	4798      	blx	r3
    325a:	b188      	cbz	r0, 3280 <xQueueGiveFromISR+0xc8>
								if (pxHigherPriorityTaskWoken != NULL) {
    325c:	b196      	cbz	r6, 3284 <xQueueGiveFromISR+0xcc>
									*pxHigherPriorityTaskWoken = pdTRUE;
    325e:	2001      	movs	r0, #1
    3260:	6030      	str	r0, [r6, #0]
    3262:	e7e5      	b.n	3230 <xQueueGiveFromISR+0x78>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    3264:	3301      	adds	r3, #1
    3266:	b25b      	sxtb	r3, r3
    3268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    326c:	2001      	movs	r0, #1
    326e:	e7df      	b.n	3230 <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
    3270:	2000      	movs	r0, #0
    3272:	e7dd      	b.n	3230 <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
    3274:	2001      	movs	r0, #1
    3276:	e7db      	b.n	3230 <xQueueGiveFromISR+0x78>
    3278:	2001      	movs	r0, #1
    327a:	e7d9      	b.n	3230 <xQueueGiveFromISR+0x78>
    327c:	2001      	movs	r0, #1
    327e:	e7d7      	b.n	3230 <xQueueGiveFromISR+0x78>
    3280:	2001      	movs	r0, #1
    3282:	e7d5      	b.n	3230 <xQueueGiveFromISR+0x78>
    3284:	2001      	movs	r0, #1
    3286:	e7d3      	b.n	3230 <xQueueGiveFromISR+0x78>
    3288:	00002c15 	.word	0x00002c15
    328c:	00002d85 	.word	0x00002d85
    3290:	00003861 	.word	0x00003861

00003294 <xQueueSemaphoreTake>:
{
    3294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3298:	b085      	sub	sp, #20
    329a:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    329c:	b158      	cbz	r0, 32b6 <xQueueSemaphoreTake+0x22>
    329e:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    32a0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    32a2:	b18b      	cbz	r3, 32c8 <xQueueSemaphoreTake+0x34>
    32a4:	f04f 0380 	mov.w	r3, #128	; 0x80
    32a8:	f383 8811 	msr	BASEPRI, r3
    32ac:	f3bf 8f6f 	isb	sy
    32b0:	f3bf 8f4f 	dsb	sy
    32b4:	e7fe      	b.n	32b4 <xQueueSemaphoreTake+0x20>
    32b6:	f04f 0380 	mov.w	r3, #128	; 0x80
    32ba:	f383 8811 	msr	BASEPRI, r3
    32be:	f3bf 8f6f 	isb	sy
    32c2:	f3bf 8f4f 	dsb	sy
    32c6:	e7fe      	b.n	32c6 <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    32c8:	4b5b      	ldr	r3, [pc, #364]	; (3438 <xQueueSemaphoreTake+0x1a4>)
    32ca:	4798      	blx	r3
    32cc:	b950      	cbnz	r0, 32e4 <xQueueSemaphoreTake+0x50>
    32ce:	9b01      	ldr	r3, [sp, #4]
    32d0:	b183      	cbz	r3, 32f4 <xQueueSemaphoreTake+0x60>
    32d2:	f04f 0380 	mov.w	r3, #128	; 0x80
    32d6:	f383 8811 	msr	BASEPRI, r3
    32da:	f3bf 8f6f 	isb	sy
    32de:	f3bf 8f4f 	dsb	sy
    32e2:	e7fe      	b.n	32e2 <xQueueSemaphoreTake+0x4e>
    32e4:	2500      	movs	r5, #0
    32e6:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    32e8:	4e54      	ldr	r6, [pc, #336]	; (343c <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    32ea:	f8df 9184 	ldr.w	r9, [pc, #388]	; 3470 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    32ee:	f8df 8158 	ldr.w	r8, [pc, #344]	; 3448 <xQueueSemaphoreTake+0x1b4>
    32f2:	e048      	b.n	3386 <xQueueSemaphoreTake+0xf2>
    32f4:	2500      	movs	r5, #0
    32f6:	462f      	mov	r7, r5
    32f8:	e7f6      	b.n	32e8 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    32fa:	3b01      	subs	r3, #1
    32fc:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    32fe:	6823      	ldr	r3, [r4, #0]
    3300:	b913      	cbnz	r3, 3308 <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    3302:	4b4f      	ldr	r3, [pc, #316]	; (3440 <xQueueSemaphoreTake+0x1ac>)
    3304:	4798      	blx	r3
    3306:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3308:	6923      	ldr	r3, [r4, #16]
    330a:	b163      	cbz	r3, 3326 <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    330c:	f104 0010 	add.w	r0, r4, #16
    3310:	4b4c      	ldr	r3, [pc, #304]	; (3444 <xQueueSemaphoreTake+0x1b0>)
    3312:	4798      	blx	r3
    3314:	b138      	cbz	r0, 3326 <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    3316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    331a:	4b4b      	ldr	r3, [pc, #300]	; (3448 <xQueueSemaphoreTake+0x1b4>)
    331c:	601a      	str	r2, [r3, #0]
    331e:	f3bf 8f4f 	dsb	sy
    3322:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    3326:	4b49      	ldr	r3, [pc, #292]	; (344c <xQueueSemaphoreTake+0x1b8>)
    3328:	4798      	blx	r3
				return pdPASS;
    332a:	2501      	movs	r5, #1
}
    332c:	4628      	mov	r0, r5
    332e:	b005      	add	sp, #20
    3330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    3334:	b145      	cbz	r5, 3348 <xQueueSemaphoreTake+0xb4>
    3336:	f04f 0380 	mov.w	r3, #128	; 0x80
    333a:	f383 8811 	msr	BASEPRI, r3
    333e:	f3bf 8f6f 	isb	sy
    3342:	f3bf 8f4f 	dsb	sy
    3346:	e7fe      	b.n	3346 <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    3348:	4b40      	ldr	r3, [pc, #256]	; (344c <xQueueSemaphoreTake+0x1b8>)
    334a:	4798      	blx	r3
					return errQUEUE_EMPTY;
    334c:	e7ee      	b.n	332c <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    334e:	a802      	add	r0, sp, #8
    3350:	47c8      	blx	r9
    3352:	e021      	b.n	3398 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    3354:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    3356:	6860      	ldr	r0, [r4, #4]
    3358:	4b3d      	ldr	r3, [pc, #244]	; (3450 <xQueueSemaphoreTake+0x1bc>)
    335a:	4798      	blx	r3
    335c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    335e:	4b3b      	ldr	r3, [pc, #236]	; (344c <xQueueSemaphoreTake+0x1b8>)
    3360:	4798      	blx	r3
    3362:	e040      	b.n	33e6 <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    3364:	4620      	mov	r0, r4
    3366:	4b3b      	ldr	r3, [pc, #236]	; (3454 <xQueueSemaphoreTake+0x1c0>)
    3368:	4798      	blx	r3
				(void)xTaskResumeAll();
    336a:	4b3b      	ldr	r3, [pc, #236]	; (3458 <xQueueSemaphoreTake+0x1c4>)
    336c:	4798      	blx	r3
    336e:	e009      	b.n	3384 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    3370:	4620      	mov	r0, r4
    3372:	4b38      	ldr	r3, [pc, #224]	; (3454 <xQueueSemaphoreTake+0x1c0>)
    3374:	4798      	blx	r3
			(void)xTaskResumeAll();
    3376:	4b38      	ldr	r3, [pc, #224]	; (3458 <xQueueSemaphoreTake+0x1c4>)
    3378:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    337a:	4620      	mov	r0, r4
    337c:	4b37      	ldr	r3, [pc, #220]	; (345c <xQueueSemaphoreTake+0x1c8>)
    337e:	4798      	blx	r3
    3380:	2800      	cmp	r0, #0
    3382:	d145      	bne.n	3410 <xQueueSemaphoreTake+0x17c>
    3384:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    3386:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    3388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    338a:	2b00      	cmp	r3, #0
    338c:	d1b5      	bne.n	32fa <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    338e:	9b01      	ldr	r3, [sp, #4]
    3390:	2b00      	cmp	r3, #0
    3392:	d0cf      	beq.n	3334 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    3394:	2f00      	cmp	r7, #0
    3396:	d0da      	beq.n	334e <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    3398:	4b2c      	ldr	r3, [pc, #176]	; (344c <xQueueSemaphoreTake+0x1b8>)
    339a:	4798      	blx	r3
		vTaskSuspendAll();
    339c:	4b30      	ldr	r3, [pc, #192]	; (3460 <xQueueSemaphoreTake+0x1cc>)
    339e:	4798      	blx	r3
		prvLockQueue(pxQueue);
    33a0:	47b0      	blx	r6
    33a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    33a6:	b25b      	sxtb	r3, r3
    33a8:	f1b3 3fff 	cmp.w	r3, #4294967295
    33ac:	bf04      	itt	eq
    33ae:	2300      	moveq	r3, #0
    33b0:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    33b4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    33b8:	b25b      	sxtb	r3, r3
    33ba:	f1b3 3fff 	cmp.w	r3, #4294967295
    33be:	bf04      	itt	eq
    33c0:	2300      	moveq	r3, #0
    33c2:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    33c6:	4b21      	ldr	r3, [pc, #132]	; (344c <xQueueSemaphoreTake+0x1b8>)
    33c8:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    33ca:	a901      	add	r1, sp, #4
    33cc:	a802      	add	r0, sp, #8
    33ce:	4b25      	ldr	r3, [pc, #148]	; (3464 <xQueueSemaphoreTake+0x1d0>)
    33d0:	4798      	blx	r3
    33d2:	2800      	cmp	r0, #0
    33d4:	d1cc      	bne.n	3370 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    33d6:	4620      	mov	r0, r4
    33d8:	4b20      	ldr	r3, [pc, #128]	; (345c <xQueueSemaphoreTake+0x1c8>)
    33da:	4798      	blx	r3
    33dc:	2800      	cmp	r0, #0
    33de:	d0c1      	beq.n	3364 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    33e0:	6823      	ldr	r3, [r4, #0]
    33e2:	2b00      	cmp	r3, #0
    33e4:	d0b6      	beq.n	3354 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    33e6:	9901      	ldr	r1, [sp, #4]
    33e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    33ec:	4b1e      	ldr	r3, [pc, #120]	; (3468 <xQueueSemaphoreTake+0x1d4>)
    33ee:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    33f0:	4620      	mov	r0, r4
    33f2:	4b18      	ldr	r3, [pc, #96]	; (3454 <xQueueSemaphoreTake+0x1c0>)
    33f4:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    33f6:	4b18      	ldr	r3, [pc, #96]	; (3458 <xQueueSemaphoreTake+0x1c4>)
    33f8:	4798      	blx	r3
    33fa:	2800      	cmp	r0, #0
    33fc:	d1c2      	bne.n	3384 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    33fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3402:	f8c8 3000 	str.w	r3, [r8]
    3406:	f3bf 8f4f 	dsb	sy
    340a:	f3bf 8f6f 	isb	sy
    340e:	e7b9      	b.n	3384 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    3410:	2d00      	cmp	r5, #0
    3412:	d08b      	beq.n	332c <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    3414:	4b09      	ldr	r3, [pc, #36]	; (343c <xQueueSemaphoreTake+0x1a8>)
    3416:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    3418:	6a63      	ldr	r3, [r4, #36]	; 0x24
    341a:	b153      	cbz	r3, 3432 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    341c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    341e:	6819      	ldr	r1, [r3, #0]
    3420:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    3424:	6860      	ldr	r0, [r4, #4]
    3426:	4b11      	ldr	r3, [pc, #68]	; (346c <xQueueSemaphoreTake+0x1d8>)
    3428:	4798      	blx	r3
						taskEXIT_CRITICAL();
    342a:	4b08      	ldr	r3, [pc, #32]	; (344c <xQueueSemaphoreTake+0x1b8>)
    342c:	4798      	blx	r3
				return errQUEUE_EMPTY;
    342e:	2500      	movs	r5, #0
    3430:	e77c      	b.n	332c <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    3432:	2100      	movs	r1, #0
    3434:	e7f6      	b.n	3424 <xQueueSemaphoreTake+0x190>
    3436:	bf00      	nop
    3438:	000039a1 	.word	0x000039a1
    343c:	00002b05 	.word	0x00002b05
    3440:	00003bad 	.word	0x00003bad
    3444:	00003861 	.word	0x00003861
    3448:	e000ed04 	.word	0xe000ed04
    344c:	00002b49 	.word	0x00002b49
    3450:	000039c1 	.word	0x000039c1
    3454:	00002e09 	.word	0x00002e09
    3458:	0000367d 	.word	0x0000367d
    345c:	00002ce5 	.word	0x00002ce5
    3460:	00003541 	.word	0x00003541
    3464:	00003905 	.word	0x00003905
    3468:	00003825 	.word	0x00003825
    346c:	00003b01 	.word	0x00003b01
    3470:	000038f1 	.word	0x000038f1

00003474 <vQueueDelete>:
{
    3474:	b508      	push	{r3, lr}
	configASSERT(pxQueue);
    3476:	b940      	cbnz	r0, 348a <vQueueDelete+0x16>
    3478:	f04f 0380 	mov.w	r3, #128	; 0x80
    347c:	f383 8811 	msr	BASEPRI, r3
    3480:	f3bf 8f6f 	isb	sy
    3484:	f3bf 8f4f 	dsb	sy
    3488:	e7fe      	b.n	3488 <vQueueDelete+0x14>
		vPortFree(pxQueue);
    348a:	4b01      	ldr	r3, [pc, #4]	; (3490 <vQueueDelete+0x1c>)
    348c:	4798      	blx	r3
    348e:	bd08      	pop	{r3, pc}
    3490:	00002ccd 	.word	0x00002ccd

00003494 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    3494:	4b09      	ldr	r3, [pc, #36]	; (34bc <prvResetNextTaskUnblockTime+0x28>)
    3496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    349a:	681b      	ldr	r3, [r3, #0]
    349c:	b143      	cbz	r3, 34b0 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    349e:	4b07      	ldr	r3, [pc, #28]	; (34bc <prvResetNextTaskUnblockTime+0x28>)
    34a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    34a4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    34a6:	68d2      	ldr	r2, [r2, #12]
    34a8:	6852      	ldr	r2, [r2, #4]
    34aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    34ae:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    34b0:	f04f 32ff 	mov.w	r2, #4294967295
    34b4:	4b01      	ldr	r3, [pc, #4]	; (34bc <prvResetNextTaskUnblockTime+0x28>)
    34b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    34ba:	4770      	bx	lr
    34bc:	20001498 	.word	0x20001498

000034c0 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    34c0:	b570      	push	{r4, r5, r6, lr}
    34c2:	4604      	mov	r4, r0
    34c4:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    34c6:	4b1a      	ldr	r3, [pc, #104]	; (3530 <prvAddCurrentTaskToDelayedList+0x70>)
    34c8:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    34cc:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    34d0:	3004      	adds	r0, #4
    34d2:	4b18      	ldr	r3, [pc, #96]	; (3534 <prvAddCurrentTaskToDelayedList+0x74>)
    34d4:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    34d6:	f1b4 3fff 	cmp.w	r4, #4294967295
    34da:	d016      	beq.n	350a <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    34dc:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    34de:	4b14      	ldr	r3, [pc, #80]	; (3530 <prvAddCurrentTaskToDelayedList+0x70>)
    34e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    34e4:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    34e6:	42a5      	cmp	r5, r4
    34e8:	d818      	bhi.n	351c <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    34ea:	4d11      	ldr	r5, [pc, #68]	; (3530 <prvAddCurrentTaskToDelayedList+0x70>)
    34ec:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    34f0:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    34f4:	3104      	adds	r1, #4
    34f6:	4b10      	ldr	r3, [pc, #64]	; (3538 <prvAddCurrentTaskToDelayedList+0x78>)
    34f8:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    34fa:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    34fe:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    3500:	bf3c      	itt	cc
    3502:	462b      	movcc	r3, r5
    3504:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    3508:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    350a:	2e00      	cmp	r6, #0
    350c:	d0e6      	beq.n	34dc <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    350e:	4808      	ldr	r0, [pc, #32]	; (3530 <prvAddCurrentTaskToDelayedList+0x70>)
    3510:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    3514:	3104      	adds	r1, #4
    3516:	4b09      	ldr	r3, [pc, #36]	; (353c <prvAddCurrentTaskToDelayedList+0x7c>)
    3518:	4798      	blx	r3
    351a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    351c:	4b04      	ldr	r3, [pc, #16]	; (3530 <prvAddCurrentTaskToDelayedList+0x70>)
    351e:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    3522:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    3526:	3104      	adds	r1, #4
    3528:	4b03      	ldr	r3, [pc, #12]	; (3538 <prvAddCurrentTaskToDelayedList+0x78>)
    352a:	4798      	blx	r3
    352c:	bd70      	pop	{r4, r5, r6, pc}
    352e:	bf00      	nop
    3530:	20001498 	.word	0x20001498
    3534:	00002ab7 	.word	0x00002ab7
    3538:	00002a83 	.word	0x00002a83
    353c:	00002a6b 	.word	0x00002a6b

00003540 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    3540:	4a03      	ldr	r2, [pc, #12]	; (3550 <vTaskSuspendAll+0x10>)
    3542:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    3546:	3301      	adds	r3, #1
    3548:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    354c:	4770      	bx	lr
    354e:	bf00      	nop
    3550:	20001498 	.word	0x20001498

00003554 <xTaskIncrementTick>:
{
    3554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    3558:	4b44      	ldr	r3, [pc, #272]	; (366c <xTaskIncrementTick+0x118>)
    355a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    355e:	2b00      	cmp	r3, #0
    3560:	d173      	bne.n	364a <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    3562:	4b42      	ldr	r3, [pc, #264]	; (366c <xTaskIncrementTick+0x118>)
    3564:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    3568:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    356a:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    356e:	b9e6      	cbnz	r6, 35aa <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    3570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    3574:	681b      	ldr	r3, [r3, #0]
    3576:	b143      	cbz	r3, 358a <xTaskIncrementTick+0x36>
    3578:	f04f 0380 	mov.w	r3, #128	; 0x80
    357c:	f383 8811 	msr	BASEPRI, r3
    3580:	f3bf 8f6f 	isb	sy
    3584:	f3bf 8f4f 	dsb	sy
    3588:	e7fe      	b.n	3588 <xTaskIncrementTick+0x34>
    358a:	4b38      	ldr	r3, [pc, #224]	; (366c <xTaskIncrementTick+0x118>)
    358c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    3590:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    3594:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    3598:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    359c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    35a0:	3201      	adds	r2, #1
    35a2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    35a6:	4b32      	ldr	r3, [pc, #200]	; (3670 <xTaskIncrementTick+0x11c>)
    35a8:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    35aa:	4b30      	ldr	r3, [pc, #192]	; (366c <xTaskIncrementTick+0x118>)
    35ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    35b0:	429e      	cmp	r6, r3
    35b2:	d20d      	bcs.n	35d0 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    35b4:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    35b6:	4b2d      	ldr	r3, [pc, #180]	; (366c <xTaskIncrementTick+0x118>)
    35b8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    35bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    35be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    35c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    35c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    35c8:	2b02      	cmp	r3, #2
    35ca:	bf28      	it	cs
    35cc:	2401      	movcs	r4, #1
    35ce:	e043      	b.n	3658 <xTaskIncrementTick+0x104>
    35d0:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    35d2:	4d26      	ldr	r5, [pc, #152]	; (366c <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    35d4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 3678 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    35d8:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    35dc:	e021      	b.n	3622 <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    35de:	f04f 32ff 	mov.w	r2, #4294967295
    35e2:	4b22      	ldr	r3, [pc, #136]	; (366c <xTaskIncrementTick+0x118>)
    35e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    35e8:	e7e5      	b.n	35b6 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    35ea:	4a20      	ldr	r2, [pc, #128]	; (366c <xTaskIncrementTick+0x118>)
    35ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    35f0:	e7e1      	b.n	35b6 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    35f2:	f107 0018 	add.w	r0, r7, #24
    35f6:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    35f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    35fa:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    35fe:	4298      	cmp	r0, r3
    3600:	bf88      	it	hi
    3602:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    3606:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    360a:	4649      	mov	r1, r9
    360c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    3610:	4b18      	ldr	r3, [pc, #96]	; (3674 <xTaskIncrementTick+0x120>)
    3612:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    3614:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    3618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    361c:	429a      	cmp	r2, r3
    361e:	bf28      	it	cs
    3620:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    3622:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    3626:	681b      	ldr	r3, [r3, #0]
    3628:	2b00      	cmp	r3, #0
    362a:	d0d8      	beq.n	35de <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    362c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    3630:	68db      	ldr	r3, [r3, #12]
    3632:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    3634:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    3636:	429e      	cmp	r6, r3
    3638:	d3d7      	bcc.n	35ea <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    363a:	f107 0904 	add.w	r9, r7, #4
    363e:	4648      	mov	r0, r9
    3640:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    3642:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3644:	2b00      	cmp	r3, #0
    3646:	d1d4      	bne.n	35f2 <xTaskIncrementTick+0x9e>
    3648:	e7d6      	b.n	35f8 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    364a:	4a08      	ldr	r2, [pc, #32]	; (366c <xTaskIncrementTick+0x118>)
    364c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    3650:	3301      	adds	r3, #1
    3652:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    3656:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    3658:	4b04      	ldr	r3, [pc, #16]	; (366c <xTaskIncrementTick+0x118>)
    365a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    365e:	2b00      	cmp	r3, #0
}
    3660:	bf0c      	ite	eq
    3662:	4620      	moveq	r0, r4
    3664:	2001      	movne	r0, #1
    3666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    366a:	bf00      	nop
    366c:	20001498 	.word	0x20001498
    3670:	00003495 	.word	0x00003495
    3674:	00002a6b 	.word	0x00002a6b
    3678:	00002ab7 	.word	0x00002ab7

0000367c <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    367c:	4b3a      	ldr	r3, [pc, #232]	; (3768 <xTaskResumeAll+0xec>)
    367e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    3682:	b943      	cbnz	r3, 3696 <xTaskResumeAll+0x1a>
    3684:	f04f 0380 	mov.w	r3, #128	; 0x80
    3688:	f383 8811 	msr	BASEPRI, r3
    368c:	f3bf 8f6f 	isb	sy
    3690:	f3bf 8f4f 	dsb	sy
    3694:	e7fe      	b.n	3694 <xTaskResumeAll+0x18>
{
    3696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    369a:	4b34      	ldr	r3, [pc, #208]	; (376c <xTaskResumeAll+0xf0>)
    369c:	4798      	blx	r3
		--uxSchedulerSuspended;
    369e:	4b32      	ldr	r3, [pc, #200]	; (3768 <xTaskResumeAll+0xec>)
    36a0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    36a4:	3a01      	subs	r2, #1
    36a6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    36aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    36ae:	2b00      	cmp	r3, #0
    36b0:	d155      	bne.n	375e <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    36b2:	4b2d      	ldr	r3, [pc, #180]	; (3768 <xTaskResumeAll+0xec>)
    36b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    36b8:	b92b      	cbnz	r3, 36c6 <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    36ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    36bc:	4b2c      	ldr	r3, [pc, #176]	; (3770 <xTaskResumeAll+0xf4>)
    36be:	4798      	blx	r3
}
    36c0:	4620      	mov	r0, r4
    36c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36c6:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    36c8:	4c27      	ldr	r4, [pc, #156]	; (3768 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    36ca:	4e2a      	ldr	r6, [pc, #168]	; (3774 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    36cc:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    36d0:	6963      	ldr	r3, [r4, #20]
    36d2:	b1fb      	cbz	r3, 3714 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    36d4:	6a23      	ldr	r3, [r4, #32]
    36d6:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    36d8:	f105 0018 	add.w	r0, r5, #24
    36dc:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    36de:	1d2f      	adds	r7, r5, #4
    36e0:	4638      	mov	r0, r7
    36e2:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    36e4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    36e6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    36ea:	4298      	cmp	r0, r3
    36ec:	bf88      	it	hi
    36ee:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    36f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    36f6:	4639      	mov	r1, r7
    36f8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    36fc:	4b1e      	ldr	r3, [pc, #120]	; (3778 <xTaskResumeAll+0xfc>)
    36fe:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    3700:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    3704:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    3706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3708:	429a      	cmp	r2, r3
    370a:	d3e1      	bcc.n	36d0 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    370c:	2301      	movs	r3, #1
    370e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    3712:	e7dd      	b.n	36d0 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    3714:	b10d      	cbz	r5, 371a <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    3716:	4b19      	ldr	r3, [pc, #100]	; (377c <xTaskResumeAll+0x100>)
    3718:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    371a:	4b13      	ldr	r3, [pc, #76]	; (3768 <xTaskResumeAll+0xec>)
    371c:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    3720:	b17c      	cbz	r4, 3742 <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    3722:	4f17      	ldr	r7, [pc, #92]	; (3780 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    3724:	461e      	mov	r6, r3
    3726:	2501      	movs	r5, #1
    3728:	e001      	b.n	372e <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    372a:	3c01      	subs	r4, #1
    372c:	d005      	beq.n	373a <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    372e:	47b8      	blx	r7
    3730:	2800      	cmp	r0, #0
    3732:	d0fa      	beq.n	372a <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    3734:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    3738:	e7f7      	b.n	372a <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    373a:	2200      	movs	r2, #0
    373c:	4b0a      	ldr	r3, [pc, #40]	; (3768 <xTaskResumeAll+0xec>)
    373e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    3742:	4b09      	ldr	r3, [pc, #36]	; (3768 <xTaskResumeAll+0xec>)
    3744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    3748:	b15b      	cbz	r3, 3762 <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    374a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    374e:	4b0d      	ldr	r3, [pc, #52]	; (3784 <xTaskResumeAll+0x108>)
    3750:	601a      	str	r2, [r3, #0]
    3752:	f3bf 8f4f 	dsb	sy
    3756:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    375a:	2401      	movs	r4, #1
    375c:	e7ae      	b.n	36bc <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    375e:	2400      	movs	r4, #0
    3760:	e7ac      	b.n	36bc <xTaskResumeAll+0x40>
    3762:	2400      	movs	r4, #0
    3764:	e7aa      	b.n	36bc <xTaskResumeAll+0x40>
    3766:	bf00      	nop
    3768:	20001498 	.word	0x20001498
    376c:	00002b05 	.word	0x00002b05
    3770:	00002b49 	.word	0x00002b49
    3774:	00002ab7 	.word	0x00002ab7
    3778:	00002a6b 	.word	0x00002a6b
    377c:	00003495 	.word	0x00003495
    3780:	00003555 	.word	0x00003555
    3784:	e000ed04 	.word	0xe000ed04

00003788 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    3788:	4b25      	ldr	r3, [pc, #148]	; (3820 <vTaskSwitchContext+0x98>)
    378a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    378e:	b9fb      	cbnz	r3, 37d0 <vTaskSwitchContext+0x48>
		xYieldPending = pdFALSE;
    3790:	4a23      	ldr	r2, [pc, #140]	; (3820 <vTaskSwitchContext+0x98>)
    3792:	2300      	movs	r3, #0
    3794:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3798:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    379c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    37a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    37a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    37a6:	b9c2      	cbnz	r2, 37da <vTaskSwitchContext+0x52>
    37a8:	b14b      	cbz	r3, 37be <vTaskSwitchContext+0x36>
    37aa:	491d      	ldr	r1, [pc, #116]	; (3820 <vTaskSwitchContext+0x98>)
    37ac:	3b01      	subs	r3, #1
    37ae:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    37b2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    37b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    37b8:	b97a      	cbnz	r2, 37da <vTaskSwitchContext+0x52>
    37ba:	2b00      	cmp	r3, #0
    37bc:	d1f6      	bne.n	37ac <vTaskSwitchContext+0x24>
    37be:	f04f 0380 	mov.w	r3, #128	; 0x80
    37c2:	f383 8811 	msr	BASEPRI, r3
    37c6:	f3bf 8f6f 	isb	sy
    37ca:	f3bf 8f4f 	dsb	sy
    37ce:	e7fe      	b.n	37ce <vTaskSwitchContext+0x46>
		xYieldPending = pdTRUE;
    37d0:	2201      	movs	r2, #1
    37d2:	4b13      	ldr	r3, [pc, #76]	; (3820 <vTaskSwitchContext+0x98>)
    37d4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    37d8:	4770      	bx	lr
{
    37da:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    37dc:	4a10      	ldr	r2, [pc, #64]	; (3820 <vTaskSwitchContext+0x98>)
    37de:	0099      	lsls	r1, r3, #2
    37e0:	18c8      	adds	r0, r1, r3
    37e2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    37e6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    37e8:	6864      	ldr	r4, [r4, #4]
    37ea:	62c4      	str	r4, [r0, #44]	; 0x2c
    37ec:	4419      	add	r1, r3
    37ee:	4602      	mov	r2, r0
    37f0:	3230      	adds	r2, #48	; 0x30
    37f2:	4294      	cmp	r4, r2
    37f4:	d00d      	beq.n	3812 <vTaskSwitchContext+0x8a>
    37f6:	4a0a      	ldr	r2, [pc, #40]	; (3820 <vTaskSwitchContext+0x98>)
    37f8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    37fc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    3800:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    3802:	68c9      	ldr	r1, [r1, #12]
    3804:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    3808:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
}
    380c:	f85d 4b04 	ldr.w	r4, [sp], #4
    3810:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3812:	6860      	ldr	r0, [r4, #4]
    3814:	4a02      	ldr	r2, [pc, #8]	; (3820 <vTaskSwitchContext+0x98>)
    3816:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    381a:	62d0      	str	r0, [r2, #44]	; 0x2c
    381c:	e7eb      	b.n	37f6 <vTaskSwitchContext+0x6e>
    381e:	bf00      	nop
    3820:	20001498 	.word	0x20001498

00003824 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    3824:	b940      	cbnz	r0, 3838 <vTaskPlaceOnEventList+0x14>
    3826:	f04f 0380 	mov.w	r3, #128	; 0x80
    382a:	f383 8811 	msr	BASEPRI, r3
    382e:	f3bf 8f6f 	isb	sy
    3832:	f3bf 8f4f 	dsb	sy
    3836:	e7fe      	b.n	3836 <vTaskPlaceOnEventList+0x12>
{
    3838:	b510      	push	{r4, lr}
    383a:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    383c:	4b05      	ldr	r3, [pc, #20]	; (3854 <vTaskPlaceOnEventList+0x30>)
    383e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    3842:	3118      	adds	r1, #24
    3844:	4b04      	ldr	r3, [pc, #16]	; (3858 <vTaskPlaceOnEventList+0x34>)
    3846:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    3848:	2101      	movs	r1, #1
    384a:	4620      	mov	r0, r4
    384c:	4b03      	ldr	r3, [pc, #12]	; (385c <vTaskPlaceOnEventList+0x38>)
    384e:	4798      	blx	r3
    3850:	bd10      	pop	{r4, pc}
    3852:	bf00      	nop
    3854:	20001498 	.word	0x20001498
    3858:	00002a83 	.word	0x00002a83
    385c:	000034c1 	.word	0x000034c1

00003860 <xTaskRemoveFromEventList>:
{
    3860:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    3862:	68c3      	ldr	r3, [r0, #12]
    3864:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    3866:	2c00      	cmp	r4, #0
    3868:	d02a      	beq.n	38c0 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    386a:	f104 0518 	add.w	r5, r4, #24
    386e:	4628      	mov	r0, r5
    3870:	4b1a      	ldr	r3, [pc, #104]	; (38dc <xTaskRemoveFromEventList+0x7c>)
    3872:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    3874:	4b1a      	ldr	r3, [pc, #104]	; (38e0 <xTaskRemoveFromEventList+0x80>)
    3876:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    387a:	bb53      	cbnz	r3, 38d2 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    387c:	1d25      	adds	r5, r4, #4
    387e:	4628      	mov	r0, r5
    3880:	4b16      	ldr	r3, [pc, #88]	; (38dc <xTaskRemoveFromEventList+0x7c>)
    3882:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    3884:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3886:	4b16      	ldr	r3, [pc, #88]	; (38e0 <xTaskRemoveFromEventList+0x80>)
    3888:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    388c:	4298      	cmp	r0, r3
    388e:	bf84      	itt	hi
    3890:	4b13      	ldrhi	r3, [pc, #76]	; (38e0 <xTaskRemoveFromEventList+0x80>)
    3892:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    3896:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    389a:	4629      	mov	r1, r5
    389c:	4b11      	ldr	r3, [pc, #68]	; (38e4 <xTaskRemoveFromEventList+0x84>)
    389e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    38a2:	4b11      	ldr	r3, [pc, #68]	; (38e8 <xTaskRemoveFromEventList+0x88>)
    38a4:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    38a6:	4b0e      	ldr	r3, [pc, #56]	; (38e0 <xTaskRemoveFromEventList+0x80>)
    38a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    38ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    38ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    38b0:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    38b2:	bf83      	ittte	hi
    38b4:	2001      	movhi	r0, #1
    38b6:	4b0a      	ldrhi	r3, [pc, #40]	; (38e0 <xTaskRemoveFromEventList+0x80>)
    38b8:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    38bc:	2000      	movls	r0, #0
}
    38be:	bd38      	pop	{r3, r4, r5, pc}
    38c0:	f04f 0380 	mov.w	r3, #128	; 0x80
    38c4:	f383 8811 	msr	BASEPRI, r3
    38c8:	f3bf 8f6f 	isb	sy
    38cc:	f3bf 8f4f 	dsb	sy
    38d0:	e7fe      	b.n	38d0 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    38d2:	4629      	mov	r1, r5
    38d4:	4805      	ldr	r0, [pc, #20]	; (38ec <xTaskRemoveFromEventList+0x8c>)
    38d6:	4b04      	ldr	r3, [pc, #16]	; (38e8 <xTaskRemoveFromEventList+0x88>)
    38d8:	4798      	blx	r3
    38da:	e7e4      	b.n	38a6 <xTaskRemoveFromEventList+0x46>
    38dc:	00002ab7 	.word	0x00002ab7
    38e0:	20001498 	.word	0x20001498
    38e4:	200014c0 	.word	0x200014c0
    38e8:	00002a6b 	.word	0x00002a6b
    38ec:	200014ac 	.word	0x200014ac

000038f0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    38f0:	4b03      	ldr	r3, [pc, #12]	; (3900 <vTaskInternalSetTimeOutState+0x10>)
    38f2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    38f6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    38f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    38fc:	6043      	str	r3, [r0, #4]
    38fe:	4770      	bx	lr
    3900:	20001498 	.word	0x20001498

00003904 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    3904:	b1f8      	cbz	r0, 3946 <xTaskCheckForTimeOut+0x42>
{
    3906:	b570      	push	{r4, r5, r6, lr}
    3908:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    390a:	b329      	cbz	r1, 3958 <xTaskCheckForTimeOut+0x54>
    390c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    390e:	4b1c      	ldr	r3, [pc, #112]	; (3980 <xTaskCheckForTimeOut+0x7c>)
    3910:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    3912:	4b1c      	ldr	r3, [pc, #112]	; (3984 <xTaskCheckForTimeOut+0x80>)
    3914:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3918:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    391a:	6823      	ldr	r3, [r4, #0]
    391c:	f1b3 3fff 	cmp.w	r3, #4294967295
    3920:	d02a      	beq.n	3978 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    3922:	4818      	ldr	r0, [pc, #96]	; (3984 <xTaskCheckForTimeOut+0x80>)
    3924:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    3928:	682e      	ldr	r6, [r5, #0]
    392a:	4286      	cmp	r6, r0
    392c:	d001      	beq.n	3932 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    392e:	428a      	cmp	r2, r1
    3930:	d224      	bcs.n	397c <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    3932:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    3934:	429a      	cmp	r2, r3
    3936:	d318      	bcc.n	396a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    3938:	2300      	movs	r3, #0
    393a:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    393c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    393e:	4b12      	ldr	r3, [pc, #72]	; (3988 <xTaskCheckForTimeOut+0x84>)
    3940:	4798      	blx	r3
}
    3942:	4620      	mov	r0, r4
    3944:	bd70      	pop	{r4, r5, r6, pc}
    3946:	f04f 0380 	mov.w	r3, #128	; 0x80
    394a:	f383 8811 	msr	BASEPRI, r3
    394e:	f3bf 8f6f 	isb	sy
    3952:	f3bf 8f4f 	dsb	sy
    3956:	e7fe      	b.n	3956 <xTaskCheckForTimeOut+0x52>
    3958:	f04f 0380 	mov.w	r3, #128	; 0x80
    395c:	f383 8811 	msr	BASEPRI, r3
    3960:	f3bf 8f6f 	isb	sy
    3964:	f3bf 8f4f 	dsb	sy
    3968:	e7fe      	b.n	3968 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    396a:	1a9b      	subs	r3, r3, r2
    396c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    396e:	4628      	mov	r0, r5
    3970:	4b06      	ldr	r3, [pc, #24]	; (398c <xTaskCheckForTimeOut+0x88>)
    3972:	4798      	blx	r3
			xReturn = pdFALSE;
    3974:	2400      	movs	r4, #0
    3976:	e7e2      	b.n	393e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    3978:	2400      	movs	r4, #0
    397a:	e7e0      	b.n	393e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    397c:	2401      	movs	r4, #1
    397e:	e7de      	b.n	393e <xTaskCheckForTimeOut+0x3a>
    3980:	00002b05 	.word	0x00002b05
    3984:	20001498 	.word	0x20001498
    3988:	00002b49 	.word	0x00002b49
    398c:	000038f1 	.word	0x000038f1

00003990 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    3990:	2201      	movs	r2, #1
    3992:	4b02      	ldr	r3, [pc, #8]	; (399c <vTaskMissedYield+0xc>)
    3994:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    3998:	4770      	bx	lr
    399a:	bf00      	nop
    399c:	20001498 	.word	0x20001498

000039a0 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    39a0:	4b06      	ldr	r3, [pc, #24]	; (39bc <xTaskGetSchedulerState+0x1c>)
    39a2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    39a6:	b13b      	cbz	r3, 39b8 <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    39a8:	4b04      	ldr	r3, [pc, #16]	; (39bc <xTaskGetSchedulerState+0x1c>)
    39aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    39ae:	2b00      	cmp	r3, #0
    39b0:	bf0c      	ite	eq
    39b2:	2002      	moveq	r0, #2
    39b4:	2000      	movne	r0, #0
    39b6:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    39b8:	2001      	movs	r0, #1
}
    39ba:	4770      	bx	lr
    39bc:	20001498 	.word	0x20001498

000039c0 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    39c0:	2800      	cmp	r0, #0
    39c2:	d045      	beq.n	3a50 <xTaskPriorityInherit+0x90>
{
    39c4:	b538      	push	{r3, r4, r5, lr}
    39c6:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    39c8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    39ca:	4922      	ldr	r1, [pc, #136]	; (3a54 <xTaskPriorityInherit+0x94>)
    39cc:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    39d0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    39d2:	428a      	cmp	r2, r1
    39d4:	d232      	bcs.n	3a3c <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    39d6:	6981      	ldr	r1, [r0, #24]
    39d8:	2900      	cmp	r1, #0
    39da:	db06      	blt.n	39ea <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    39dc:	491d      	ldr	r1, [pc, #116]	; (3a54 <xTaskPriorityInherit+0x94>)
    39de:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    39e2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    39e4:	f1c1 0105 	rsb	r1, r1, #5
    39e8:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    39ea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    39ee:	491a      	ldr	r1, [pc, #104]	; (3a58 <xTaskPriorityInherit+0x98>)
    39f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    39f4:	6969      	ldr	r1, [r5, #20]
    39f6:	4291      	cmp	r1, r2
    39f8:	d006      	beq.n	3a08 <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    39fa:	4a16      	ldr	r2, [pc, #88]	; (3a54 <xTaskPriorityInherit+0x94>)
    39fc:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    3a00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    3a02:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    3a04:	2001      	movs	r0, #1
    3a06:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    3a08:	1d2c      	adds	r4, r5, #4
    3a0a:	4620      	mov	r0, r4
    3a0c:	4b13      	ldr	r3, [pc, #76]	; (3a5c <xTaskPriorityInherit+0x9c>)
    3a0e:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    3a10:	4b10      	ldr	r3, [pc, #64]	; (3a54 <xTaskPriorityInherit+0x94>)
    3a12:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3a16:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    3a18:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    3a1a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    3a1e:	4298      	cmp	r0, r3
    3a20:	bf84      	itt	hi
    3a22:	4b0c      	ldrhi	r3, [pc, #48]	; (3a54 <xTaskPriorityInherit+0x94>)
    3a24:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    3a28:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3a2c:	4621      	mov	r1, r4
    3a2e:	4b0a      	ldr	r3, [pc, #40]	; (3a58 <xTaskPriorityInherit+0x98>)
    3a30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3a34:	4b0a      	ldr	r3, [pc, #40]	; (3a60 <xTaskPriorityInherit+0xa0>)
    3a36:	4798      	blx	r3
			xReturn = pdTRUE;
    3a38:	2001      	movs	r0, #1
    3a3a:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    3a3c:	4a05      	ldr	r2, [pc, #20]	; (3a54 <xTaskPriorityInherit+0x94>)
    3a3e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    3a42:	6c40      	ldr	r0, [r0, #68]	; 0x44
    3a44:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3a46:	4298      	cmp	r0, r3
    3a48:	bf2c      	ite	cs
    3a4a:	2000      	movcs	r0, #0
    3a4c:	2001      	movcc	r0, #1
    3a4e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    3a50:	2000      	movs	r0, #0
	return xReturn;
    3a52:	4770      	bx	lr
    3a54:	20001498 	.word	0x20001498
    3a58:	200014c0 	.word	0x200014c0
    3a5c:	00002ab7 	.word	0x00002ab7
    3a60:	00002a6b 	.word	0x00002a6b

00003a64 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    3a64:	2800      	cmp	r0, #0
    3a66:	d03c      	beq.n	3ae2 <xTaskPriorityDisinherit+0x7e>
{
    3a68:	b538      	push	{r3, r4, r5, lr}
    3a6a:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    3a6c:	4a20      	ldr	r2, [pc, #128]	; (3af0 <xTaskPriorityDisinherit+0x8c>)
    3a6e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    3a72:	4290      	cmp	r0, r2
    3a74:	d008      	beq.n	3a88 <xTaskPriorityDisinherit+0x24>
    3a76:	f04f 0380 	mov.w	r3, #128	; 0x80
    3a7a:	f383 8811 	msr	BASEPRI, r3
    3a7e:	f3bf 8f6f 	isb	sy
    3a82:	f3bf 8f4f 	dsb	sy
    3a86:	e7fe      	b.n	3a86 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    3a88:	6c82      	ldr	r2, [r0, #72]	; 0x48
    3a8a:	b942      	cbnz	r2, 3a9e <xTaskPriorityDisinherit+0x3a>
    3a8c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3a90:	f383 8811 	msr	BASEPRI, r3
    3a94:	f3bf 8f6f 	isb	sy
    3a98:	f3bf 8f4f 	dsb	sy
    3a9c:	e7fe      	b.n	3a9c <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    3a9e:	3a01      	subs	r2, #1
    3aa0:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    3aa2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    3aa4:	6c61      	ldr	r1, [r4, #68]	; 0x44
    3aa6:	4288      	cmp	r0, r1
    3aa8:	d01d      	beq.n	3ae6 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    3aaa:	b9f2      	cbnz	r2, 3aea <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    3aac:	1d25      	adds	r5, r4, #4
    3aae:	4628      	mov	r0, r5
    3ab0:	4b10      	ldr	r3, [pc, #64]	; (3af4 <xTaskPriorityDisinherit+0x90>)
    3ab2:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    3ab4:	6c60      	ldr	r0, [r4, #68]	; 0x44
    3ab6:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    3ab8:	f1c0 0305 	rsb	r3, r0, #5
    3abc:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    3abe:	4b0c      	ldr	r3, [pc, #48]	; (3af0 <xTaskPriorityDisinherit+0x8c>)
    3ac0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    3ac4:	4298      	cmp	r0, r3
    3ac6:	bf84      	itt	hi
    3ac8:	4b09      	ldrhi	r3, [pc, #36]	; (3af0 <xTaskPriorityDisinherit+0x8c>)
    3aca:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    3ace:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3ad2:	4629      	mov	r1, r5
    3ad4:	4b08      	ldr	r3, [pc, #32]	; (3af8 <xTaskPriorityDisinherit+0x94>)
    3ad6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3ada:	4b08      	ldr	r3, [pc, #32]	; (3afc <xTaskPriorityDisinherit+0x98>)
    3adc:	4798      	blx	r3
				xReturn = pdTRUE;
    3ade:	2001      	movs	r0, #1
    3ae0:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    3ae2:	2000      	movs	r0, #0
    3ae4:	4770      	bx	lr
    3ae6:	2000      	movs	r0, #0
    3ae8:	bd38      	pop	{r3, r4, r5, pc}
    3aea:	2000      	movs	r0, #0
}
    3aec:	bd38      	pop	{r3, r4, r5, pc}
    3aee:	bf00      	nop
    3af0:	20001498 	.word	0x20001498
    3af4:	00002ab7 	.word	0x00002ab7
    3af8:	200014c0 	.word	0x200014c0
    3afc:	00002a6b 	.word	0x00002a6b

00003b00 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    3b00:	2800      	cmp	r0, #0
    3b02:	d049      	beq.n	3b98 <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    3b04:	b538      	push	{r3, r4, r5, lr}
    3b06:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    3b08:	6c80      	ldr	r0, [r0, #72]	; 0x48
    3b0a:	b940      	cbnz	r0, 3b1e <vTaskPriorityDisinheritAfterTimeout+0x1e>
    3b0c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b10:	f383 8811 	msr	BASEPRI, r3
    3b14:	f3bf 8f6f 	isb	sy
    3b18:	f3bf 8f4f 	dsb	sy
    3b1c:	e7fe      	b.n	3b1c <vTaskPriorityDisinheritAfterTimeout+0x1c>
    3b1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    3b20:	428a      	cmp	r2, r1
    3b22:	bf38      	it	cc
    3b24:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    3b26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    3b28:	4291      	cmp	r1, r2
    3b2a:	d001      	beq.n	3b30 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    3b2c:	2801      	cmp	r0, #1
    3b2e:	d000      	beq.n	3b32 <vTaskPriorityDisinheritAfterTimeout+0x32>
    3b30:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    3b32:	481a      	ldr	r0, [pc, #104]	; (3b9c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    3b34:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    3b38:	4284      	cmp	r4, r0
    3b3a:	d108      	bne.n	3b4e <vTaskPriorityDisinheritAfterTimeout+0x4e>
    3b3c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3b40:	f383 8811 	msr	BASEPRI, r3
    3b44:	f3bf 8f6f 	isb	sy
    3b48:	f3bf 8f4f 	dsb	sy
    3b4c:	e7fe      	b.n	3b4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    3b4e:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    3b50:	69a0      	ldr	r0, [r4, #24]
    3b52:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    3b54:	bfa4      	itt	ge
    3b56:	f1c2 0205 	rsbge	r2, r2, #5
    3b5a:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    3b5c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    3b60:	4a0f      	ldr	r2, [pc, #60]	; (3ba0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    3b62:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    3b66:	6962      	ldr	r2, [r4, #20]
    3b68:	428a      	cmp	r2, r1
    3b6a:	d1e1      	bne.n	3b30 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    3b6c:	1d25      	adds	r5, r4, #4
    3b6e:	4628      	mov	r0, r5
    3b70:	4b0c      	ldr	r3, [pc, #48]	; (3ba4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    3b72:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    3b74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    3b76:	4b09      	ldr	r3, [pc, #36]	; (3b9c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    3b78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    3b7c:	4298      	cmp	r0, r3
    3b7e:	bf84      	itt	hi
    3b80:	4b06      	ldrhi	r3, [pc, #24]	; (3b9c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    3b82:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    3b86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3b8a:	4629      	mov	r1, r5
    3b8c:	4b04      	ldr	r3, [pc, #16]	; (3ba0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    3b8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3b92:	4b05      	ldr	r3, [pc, #20]	; (3ba8 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    3b94:	4798      	blx	r3
}
    3b96:	e7cb      	b.n	3b30 <vTaskPriorityDisinheritAfterTimeout+0x30>
    3b98:	4770      	bx	lr
    3b9a:	bf00      	nop
    3b9c:	20001498 	.word	0x20001498
    3ba0:	200014c0 	.word	0x200014c0
    3ba4:	00002ab7 	.word	0x00002ab7
    3ba8:	00002a6b 	.word	0x00002a6b

00003bac <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    3bac:	4b06      	ldr	r3, [pc, #24]	; (3bc8 <pvTaskIncrementMutexHeldCount+0x1c>)
    3bae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    3bb2:	b12b      	cbz	r3, 3bc0 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    3bb4:	4b04      	ldr	r3, [pc, #16]	; (3bc8 <pvTaskIncrementMutexHeldCount+0x1c>)
    3bb6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3bba:	6c93      	ldr	r3, [r2, #72]	; 0x48
    3bbc:	3301      	adds	r3, #1
    3bbe:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    3bc0:	4b01      	ldr	r3, [pc, #4]	; (3bc8 <pvTaskIncrementMutexHeldCount+0x1c>)
    3bc2:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    3bc6:	4770      	bx	lr
    3bc8:	20001498 	.word	0x20001498

00003bcc <__libc_init_array>:
    3bcc:	b570      	push	{r4, r5, r6, lr}
    3bce:	4e0d      	ldr	r6, [pc, #52]	; (3c04 <__libc_init_array+0x38>)
    3bd0:	4c0d      	ldr	r4, [pc, #52]	; (3c08 <__libc_init_array+0x3c>)
    3bd2:	1ba4      	subs	r4, r4, r6
    3bd4:	10a4      	asrs	r4, r4, #2
    3bd6:	2500      	movs	r5, #0
    3bd8:	42a5      	cmp	r5, r4
    3bda:	d109      	bne.n	3bf0 <__libc_init_array+0x24>
    3bdc:	4e0b      	ldr	r6, [pc, #44]	; (3c0c <__libc_init_array+0x40>)
    3bde:	4c0c      	ldr	r4, [pc, #48]	; (3c10 <__libc_init_array+0x44>)
    3be0:	f001 f904 	bl	4dec <_init>
    3be4:	1ba4      	subs	r4, r4, r6
    3be6:	10a4      	asrs	r4, r4, #2
    3be8:	2500      	movs	r5, #0
    3bea:	42a5      	cmp	r5, r4
    3bec:	d105      	bne.n	3bfa <__libc_init_array+0x2e>
    3bee:	bd70      	pop	{r4, r5, r6, pc}
    3bf0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3bf4:	4798      	blx	r3
    3bf6:	3501      	adds	r5, #1
    3bf8:	e7ee      	b.n	3bd8 <__libc_init_array+0xc>
    3bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    3bfe:	4798      	blx	r3
    3c00:	3501      	adds	r5, #1
    3c02:	e7f2      	b.n	3bea <__libc_init_array+0x1e>
    3c04:	00004df8 	.word	0x00004df8
    3c08:	00004df8 	.word	0x00004df8
    3c0c:	00004df8 	.word	0x00004df8
    3c10:	00004dfc 	.word	0x00004dfc

00003c14 <memcpy>:
    3c14:	b510      	push	{r4, lr}
    3c16:	1e43      	subs	r3, r0, #1
    3c18:	440a      	add	r2, r1
    3c1a:	4291      	cmp	r1, r2
    3c1c:	d100      	bne.n	3c20 <memcpy+0xc>
    3c1e:	bd10      	pop	{r4, pc}
    3c20:	f811 4b01 	ldrb.w	r4, [r1], #1
    3c24:	f803 4f01 	strb.w	r4, [r3, #1]!
    3c28:	e7f7      	b.n	3c1a <memcpy+0x6>

00003c2a <memmove>:
    3c2a:	4288      	cmp	r0, r1
    3c2c:	b510      	push	{r4, lr}
    3c2e:	eb01 0302 	add.w	r3, r1, r2
    3c32:	d803      	bhi.n	3c3c <memmove+0x12>
    3c34:	1e42      	subs	r2, r0, #1
    3c36:	4299      	cmp	r1, r3
    3c38:	d10c      	bne.n	3c54 <memmove+0x2a>
    3c3a:	bd10      	pop	{r4, pc}
    3c3c:	4298      	cmp	r0, r3
    3c3e:	d2f9      	bcs.n	3c34 <memmove+0xa>
    3c40:	1881      	adds	r1, r0, r2
    3c42:	1ad2      	subs	r2, r2, r3
    3c44:	42d3      	cmn	r3, r2
    3c46:	d100      	bne.n	3c4a <memmove+0x20>
    3c48:	bd10      	pop	{r4, pc}
    3c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    3c4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
    3c52:	e7f7      	b.n	3c44 <memmove+0x1a>
    3c54:	f811 4b01 	ldrb.w	r4, [r1], #1
    3c58:	f802 4f01 	strb.w	r4, [r2, #1]!
    3c5c:	e7eb      	b.n	3c36 <memmove+0xc>
	...

00003c60 <_free_r>:
    3c60:	b538      	push	{r3, r4, r5, lr}
    3c62:	4605      	mov	r5, r0
    3c64:	2900      	cmp	r1, #0
    3c66:	d045      	beq.n	3cf4 <_free_r+0x94>
    3c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3c6c:	1f0c      	subs	r4, r1, #4
    3c6e:	2b00      	cmp	r3, #0
    3c70:	bfb8      	it	lt
    3c72:	18e4      	addlt	r4, r4, r3
    3c74:	f000 f8d4 	bl	3e20 <__malloc_lock>
    3c78:	4a1f      	ldr	r2, [pc, #124]	; (3cf8 <_free_r+0x98>)
    3c7a:	6813      	ldr	r3, [r2, #0]
    3c7c:	4610      	mov	r0, r2
    3c7e:	b933      	cbnz	r3, 3c8e <_free_r+0x2e>
    3c80:	6063      	str	r3, [r4, #4]
    3c82:	6014      	str	r4, [r2, #0]
    3c84:	4628      	mov	r0, r5
    3c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3c8a:	f000 b8ca 	b.w	3e22 <__malloc_unlock>
    3c8e:	42a3      	cmp	r3, r4
    3c90:	d90c      	bls.n	3cac <_free_r+0x4c>
    3c92:	6821      	ldr	r1, [r4, #0]
    3c94:	1862      	adds	r2, r4, r1
    3c96:	4293      	cmp	r3, r2
    3c98:	bf04      	itt	eq
    3c9a:	681a      	ldreq	r2, [r3, #0]
    3c9c:	685b      	ldreq	r3, [r3, #4]
    3c9e:	6063      	str	r3, [r4, #4]
    3ca0:	bf04      	itt	eq
    3ca2:	1852      	addeq	r2, r2, r1
    3ca4:	6022      	streq	r2, [r4, #0]
    3ca6:	6004      	str	r4, [r0, #0]
    3ca8:	e7ec      	b.n	3c84 <_free_r+0x24>
    3caa:	4613      	mov	r3, r2
    3cac:	685a      	ldr	r2, [r3, #4]
    3cae:	b10a      	cbz	r2, 3cb4 <_free_r+0x54>
    3cb0:	42a2      	cmp	r2, r4
    3cb2:	d9fa      	bls.n	3caa <_free_r+0x4a>
    3cb4:	6819      	ldr	r1, [r3, #0]
    3cb6:	1858      	adds	r0, r3, r1
    3cb8:	42a0      	cmp	r0, r4
    3cba:	d10b      	bne.n	3cd4 <_free_r+0x74>
    3cbc:	6820      	ldr	r0, [r4, #0]
    3cbe:	4401      	add	r1, r0
    3cc0:	1858      	adds	r0, r3, r1
    3cc2:	4282      	cmp	r2, r0
    3cc4:	6019      	str	r1, [r3, #0]
    3cc6:	d1dd      	bne.n	3c84 <_free_r+0x24>
    3cc8:	6810      	ldr	r0, [r2, #0]
    3cca:	6852      	ldr	r2, [r2, #4]
    3ccc:	605a      	str	r2, [r3, #4]
    3cce:	4401      	add	r1, r0
    3cd0:	6019      	str	r1, [r3, #0]
    3cd2:	e7d7      	b.n	3c84 <_free_r+0x24>
    3cd4:	d902      	bls.n	3cdc <_free_r+0x7c>
    3cd6:	230c      	movs	r3, #12
    3cd8:	602b      	str	r3, [r5, #0]
    3cda:	e7d3      	b.n	3c84 <_free_r+0x24>
    3cdc:	6820      	ldr	r0, [r4, #0]
    3cde:	1821      	adds	r1, r4, r0
    3ce0:	428a      	cmp	r2, r1
    3ce2:	bf04      	itt	eq
    3ce4:	6811      	ldreq	r1, [r2, #0]
    3ce6:	6852      	ldreq	r2, [r2, #4]
    3ce8:	6062      	str	r2, [r4, #4]
    3cea:	bf04      	itt	eq
    3cec:	1809      	addeq	r1, r1, r0
    3cee:	6021      	streq	r1, [r4, #0]
    3cf0:	605c      	str	r4, [r3, #4]
    3cf2:	e7c7      	b.n	3c84 <_free_r+0x24>
    3cf4:	bd38      	pop	{r3, r4, r5, pc}
    3cf6:	bf00      	nop
    3cf8:	20001584 	.word	0x20001584

00003cfc <_malloc_r>:
    3cfc:	b570      	push	{r4, r5, r6, lr}
    3cfe:	1ccd      	adds	r5, r1, #3
    3d00:	f025 0503 	bic.w	r5, r5, #3
    3d04:	3508      	adds	r5, #8
    3d06:	2d0c      	cmp	r5, #12
    3d08:	bf38      	it	cc
    3d0a:	250c      	movcc	r5, #12
    3d0c:	2d00      	cmp	r5, #0
    3d0e:	4606      	mov	r6, r0
    3d10:	db01      	blt.n	3d16 <_malloc_r+0x1a>
    3d12:	42a9      	cmp	r1, r5
    3d14:	d903      	bls.n	3d1e <_malloc_r+0x22>
    3d16:	230c      	movs	r3, #12
    3d18:	6033      	str	r3, [r6, #0]
    3d1a:	2000      	movs	r0, #0
    3d1c:	bd70      	pop	{r4, r5, r6, pc}
    3d1e:	f000 f87f 	bl	3e20 <__malloc_lock>
    3d22:	4a23      	ldr	r2, [pc, #140]	; (3db0 <_malloc_r+0xb4>)
    3d24:	6814      	ldr	r4, [r2, #0]
    3d26:	4621      	mov	r1, r4
    3d28:	b991      	cbnz	r1, 3d50 <_malloc_r+0x54>
    3d2a:	4c22      	ldr	r4, [pc, #136]	; (3db4 <_malloc_r+0xb8>)
    3d2c:	6823      	ldr	r3, [r4, #0]
    3d2e:	b91b      	cbnz	r3, 3d38 <_malloc_r+0x3c>
    3d30:	4630      	mov	r0, r6
    3d32:	f000 f841 	bl	3db8 <_sbrk_r>
    3d36:	6020      	str	r0, [r4, #0]
    3d38:	4629      	mov	r1, r5
    3d3a:	4630      	mov	r0, r6
    3d3c:	f000 f83c 	bl	3db8 <_sbrk_r>
    3d40:	1c43      	adds	r3, r0, #1
    3d42:	d126      	bne.n	3d92 <_malloc_r+0x96>
    3d44:	230c      	movs	r3, #12
    3d46:	6033      	str	r3, [r6, #0]
    3d48:	4630      	mov	r0, r6
    3d4a:	f000 f86a 	bl	3e22 <__malloc_unlock>
    3d4e:	e7e4      	b.n	3d1a <_malloc_r+0x1e>
    3d50:	680b      	ldr	r3, [r1, #0]
    3d52:	1b5b      	subs	r3, r3, r5
    3d54:	d41a      	bmi.n	3d8c <_malloc_r+0x90>
    3d56:	2b0b      	cmp	r3, #11
    3d58:	d90f      	bls.n	3d7a <_malloc_r+0x7e>
    3d5a:	600b      	str	r3, [r1, #0]
    3d5c:	50cd      	str	r5, [r1, r3]
    3d5e:	18cc      	adds	r4, r1, r3
    3d60:	4630      	mov	r0, r6
    3d62:	f000 f85e 	bl	3e22 <__malloc_unlock>
    3d66:	f104 000b 	add.w	r0, r4, #11
    3d6a:	1d23      	adds	r3, r4, #4
    3d6c:	f020 0007 	bic.w	r0, r0, #7
    3d70:	1ac3      	subs	r3, r0, r3
    3d72:	d01b      	beq.n	3dac <_malloc_r+0xb0>
    3d74:	425a      	negs	r2, r3
    3d76:	50e2      	str	r2, [r4, r3]
    3d78:	bd70      	pop	{r4, r5, r6, pc}
    3d7a:	428c      	cmp	r4, r1
    3d7c:	bf0d      	iteet	eq
    3d7e:	6863      	ldreq	r3, [r4, #4]
    3d80:	684b      	ldrne	r3, [r1, #4]
    3d82:	6063      	strne	r3, [r4, #4]
    3d84:	6013      	streq	r3, [r2, #0]
    3d86:	bf18      	it	ne
    3d88:	460c      	movne	r4, r1
    3d8a:	e7e9      	b.n	3d60 <_malloc_r+0x64>
    3d8c:	460c      	mov	r4, r1
    3d8e:	6849      	ldr	r1, [r1, #4]
    3d90:	e7ca      	b.n	3d28 <_malloc_r+0x2c>
    3d92:	1cc4      	adds	r4, r0, #3
    3d94:	f024 0403 	bic.w	r4, r4, #3
    3d98:	42a0      	cmp	r0, r4
    3d9a:	d005      	beq.n	3da8 <_malloc_r+0xac>
    3d9c:	1a21      	subs	r1, r4, r0
    3d9e:	4630      	mov	r0, r6
    3da0:	f000 f80a 	bl	3db8 <_sbrk_r>
    3da4:	3001      	adds	r0, #1
    3da6:	d0cd      	beq.n	3d44 <_malloc_r+0x48>
    3da8:	6025      	str	r5, [r4, #0]
    3daa:	e7d9      	b.n	3d60 <_malloc_r+0x64>
    3dac:	bd70      	pop	{r4, r5, r6, pc}
    3dae:	bf00      	nop
    3db0:	20001584 	.word	0x20001584
    3db4:	20001588 	.word	0x20001588

00003db8 <_sbrk_r>:
    3db8:	b538      	push	{r3, r4, r5, lr}
    3dba:	4c06      	ldr	r4, [pc, #24]	; (3dd4 <_sbrk_r+0x1c>)
    3dbc:	2300      	movs	r3, #0
    3dbe:	4605      	mov	r5, r0
    3dc0:	4608      	mov	r0, r1
    3dc2:	6023      	str	r3, [r4, #0]
    3dc4:	f7fd fc30 	bl	1628 <_sbrk>
    3dc8:	1c43      	adds	r3, r0, #1
    3dca:	d102      	bne.n	3dd2 <_sbrk_r+0x1a>
    3dcc:	6823      	ldr	r3, [r4, #0]
    3dce:	b103      	cbz	r3, 3dd2 <_sbrk_r+0x1a>
    3dd0:	602b      	str	r3, [r5, #0]
    3dd2:	bd38      	pop	{r3, r4, r5, pc}
    3dd4:	20001fec 	.word	0x20001fec

00003dd8 <siprintf>:
    3dd8:	b40e      	push	{r1, r2, r3}
    3dda:	b500      	push	{lr}
    3ddc:	b09c      	sub	sp, #112	; 0x70
    3dde:	f44f 7102 	mov.w	r1, #520	; 0x208
    3de2:	ab1d      	add	r3, sp, #116	; 0x74
    3de4:	f8ad 1014 	strh.w	r1, [sp, #20]
    3de8:	9002      	str	r0, [sp, #8]
    3dea:	9006      	str	r0, [sp, #24]
    3dec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3df0:	480a      	ldr	r0, [pc, #40]	; (3e1c <siprintf+0x44>)
    3df2:	9104      	str	r1, [sp, #16]
    3df4:	9107      	str	r1, [sp, #28]
    3df6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3dfa:	f853 2b04 	ldr.w	r2, [r3], #4
    3dfe:	f8ad 1016 	strh.w	r1, [sp, #22]
    3e02:	6800      	ldr	r0, [r0, #0]
    3e04:	9301      	str	r3, [sp, #4]
    3e06:	a902      	add	r1, sp, #8
    3e08:	f000 f868 	bl	3edc <_svfiprintf_r>
    3e0c:	9b02      	ldr	r3, [sp, #8]
    3e0e:	2200      	movs	r2, #0
    3e10:	701a      	strb	r2, [r3, #0]
    3e12:	b01c      	add	sp, #112	; 0x70
    3e14:	f85d eb04 	ldr.w	lr, [sp], #4
    3e18:	b003      	add	sp, #12
    3e1a:	4770      	bx	lr
    3e1c:	200000f8 	.word	0x200000f8

00003e20 <__malloc_lock>:
    3e20:	4770      	bx	lr

00003e22 <__malloc_unlock>:
    3e22:	4770      	bx	lr

00003e24 <__ssputs_r>:
    3e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e28:	688e      	ldr	r6, [r1, #8]
    3e2a:	429e      	cmp	r6, r3
    3e2c:	4682      	mov	sl, r0
    3e2e:	460c      	mov	r4, r1
    3e30:	4691      	mov	r9, r2
    3e32:	4698      	mov	r8, r3
    3e34:	d835      	bhi.n	3ea2 <__ssputs_r+0x7e>
    3e36:	898a      	ldrh	r2, [r1, #12]
    3e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
    3e3c:	d031      	beq.n	3ea2 <__ssputs_r+0x7e>
    3e3e:	6825      	ldr	r5, [r4, #0]
    3e40:	6909      	ldr	r1, [r1, #16]
    3e42:	1a6f      	subs	r7, r5, r1
    3e44:	6965      	ldr	r5, [r4, #20]
    3e46:	2302      	movs	r3, #2
    3e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    3e4c:	fb95 f5f3 	sdiv	r5, r5, r3
    3e50:	f108 0301 	add.w	r3, r8, #1
    3e54:	443b      	add	r3, r7
    3e56:	429d      	cmp	r5, r3
    3e58:	bf38      	it	cc
    3e5a:	461d      	movcc	r5, r3
    3e5c:	0553      	lsls	r3, r2, #21
    3e5e:	d531      	bpl.n	3ec4 <__ssputs_r+0xa0>
    3e60:	4629      	mov	r1, r5
    3e62:	f7ff ff4b 	bl	3cfc <_malloc_r>
    3e66:	4606      	mov	r6, r0
    3e68:	b950      	cbnz	r0, 3e80 <__ssputs_r+0x5c>
    3e6a:	230c      	movs	r3, #12
    3e6c:	f8ca 3000 	str.w	r3, [sl]
    3e70:	89a3      	ldrh	r3, [r4, #12]
    3e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3e76:	81a3      	strh	r3, [r4, #12]
    3e78:	f04f 30ff 	mov.w	r0, #4294967295
    3e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e80:	463a      	mov	r2, r7
    3e82:	6921      	ldr	r1, [r4, #16]
    3e84:	f7ff fec6 	bl	3c14 <memcpy>
    3e88:	89a3      	ldrh	r3, [r4, #12]
    3e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    3e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3e92:	81a3      	strh	r3, [r4, #12]
    3e94:	6126      	str	r6, [r4, #16]
    3e96:	6165      	str	r5, [r4, #20]
    3e98:	443e      	add	r6, r7
    3e9a:	1bed      	subs	r5, r5, r7
    3e9c:	6026      	str	r6, [r4, #0]
    3e9e:	60a5      	str	r5, [r4, #8]
    3ea0:	4646      	mov	r6, r8
    3ea2:	4546      	cmp	r6, r8
    3ea4:	bf28      	it	cs
    3ea6:	4646      	movcs	r6, r8
    3ea8:	4632      	mov	r2, r6
    3eaa:	4649      	mov	r1, r9
    3eac:	6820      	ldr	r0, [r4, #0]
    3eae:	f7ff febc 	bl	3c2a <memmove>
    3eb2:	68a3      	ldr	r3, [r4, #8]
    3eb4:	1b9b      	subs	r3, r3, r6
    3eb6:	60a3      	str	r3, [r4, #8]
    3eb8:	6823      	ldr	r3, [r4, #0]
    3eba:	441e      	add	r6, r3
    3ebc:	6026      	str	r6, [r4, #0]
    3ebe:	2000      	movs	r0, #0
    3ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3ec4:	462a      	mov	r2, r5
    3ec6:	f000 fae3 	bl	4490 <_realloc_r>
    3eca:	4606      	mov	r6, r0
    3ecc:	2800      	cmp	r0, #0
    3ece:	d1e1      	bne.n	3e94 <__ssputs_r+0x70>
    3ed0:	6921      	ldr	r1, [r4, #16]
    3ed2:	4650      	mov	r0, sl
    3ed4:	f7ff fec4 	bl	3c60 <_free_r>
    3ed8:	e7c7      	b.n	3e6a <__ssputs_r+0x46>
	...

00003edc <_svfiprintf_r>:
    3edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ee0:	b09d      	sub	sp, #116	; 0x74
    3ee2:	4680      	mov	r8, r0
    3ee4:	9303      	str	r3, [sp, #12]
    3ee6:	898b      	ldrh	r3, [r1, #12]
    3ee8:	061c      	lsls	r4, r3, #24
    3eea:	460d      	mov	r5, r1
    3eec:	4616      	mov	r6, r2
    3eee:	d50f      	bpl.n	3f10 <_svfiprintf_r+0x34>
    3ef0:	690b      	ldr	r3, [r1, #16]
    3ef2:	b96b      	cbnz	r3, 3f10 <_svfiprintf_r+0x34>
    3ef4:	2140      	movs	r1, #64	; 0x40
    3ef6:	f7ff ff01 	bl	3cfc <_malloc_r>
    3efa:	6028      	str	r0, [r5, #0]
    3efc:	6128      	str	r0, [r5, #16]
    3efe:	b928      	cbnz	r0, 3f0c <_svfiprintf_r+0x30>
    3f00:	230c      	movs	r3, #12
    3f02:	f8c8 3000 	str.w	r3, [r8]
    3f06:	f04f 30ff 	mov.w	r0, #4294967295
    3f0a:	e0c5      	b.n	4098 <_svfiprintf_r+0x1bc>
    3f0c:	2340      	movs	r3, #64	; 0x40
    3f0e:	616b      	str	r3, [r5, #20]
    3f10:	2300      	movs	r3, #0
    3f12:	9309      	str	r3, [sp, #36]	; 0x24
    3f14:	2320      	movs	r3, #32
    3f16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3f1a:	2330      	movs	r3, #48	; 0x30
    3f1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    3f20:	f04f 0b01 	mov.w	fp, #1
    3f24:	4637      	mov	r7, r6
    3f26:	463c      	mov	r4, r7
    3f28:	f814 3b01 	ldrb.w	r3, [r4], #1
    3f2c:	2b00      	cmp	r3, #0
    3f2e:	d13c      	bne.n	3faa <_svfiprintf_r+0xce>
    3f30:	ebb7 0a06 	subs.w	sl, r7, r6
    3f34:	d00b      	beq.n	3f4e <_svfiprintf_r+0x72>
    3f36:	4653      	mov	r3, sl
    3f38:	4632      	mov	r2, r6
    3f3a:	4629      	mov	r1, r5
    3f3c:	4640      	mov	r0, r8
    3f3e:	f7ff ff71 	bl	3e24 <__ssputs_r>
    3f42:	3001      	adds	r0, #1
    3f44:	f000 80a3 	beq.w	408e <_svfiprintf_r+0x1b2>
    3f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3f4a:	4453      	add	r3, sl
    3f4c:	9309      	str	r3, [sp, #36]	; 0x24
    3f4e:	783b      	ldrb	r3, [r7, #0]
    3f50:	2b00      	cmp	r3, #0
    3f52:	f000 809c 	beq.w	408e <_svfiprintf_r+0x1b2>
    3f56:	2300      	movs	r3, #0
    3f58:	f04f 32ff 	mov.w	r2, #4294967295
    3f5c:	9304      	str	r3, [sp, #16]
    3f5e:	9307      	str	r3, [sp, #28]
    3f60:	9205      	str	r2, [sp, #20]
    3f62:	9306      	str	r3, [sp, #24]
    3f64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    3f68:	931a      	str	r3, [sp, #104]	; 0x68
    3f6a:	2205      	movs	r2, #5
    3f6c:	7821      	ldrb	r1, [r4, #0]
    3f6e:	4850      	ldr	r0, [pc, #320]	; (40b0 <_svfiprintf_r+0x1d4>)
    3f70:	f000 fa3e 	bl	43f0 <memchr>
    3f74:	1c67      	adds	r7, r4, #1
    3f76:	9b04      	ldr	r3, [sp, #16]
    3f78:	b9d8      	cbnz	r0, 3fb2 <_svfiprintf_r+0xd6>
    3f7a:	06d9      	lsls	r1, r3, #27
    3f7c:	bf44      	itt	mi
    3f7e:	2220      	movmi	r2, #32
    3f80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3f84:	071a      	lsls	r2, r3, #28
    3f86:	bf44      	itt	mi
    3f88:	222b      	movmi	r2, #43	; 0x2b
    3f8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    3f8e:	7822      	ldrb	r2, [r4, #0]
    3f90:	2a2a      	cmp	r2, #42	; 0x2a
    3f92:	d016      	beq.n	3fc2 <_svfiprintf_r+0xe6>
    3f94:	9a07      	ldr	r2, [sp, #28]
    3f96:	2100      	movs	r1, #0
    3f98:	200a      	movs	r0, #10
    3f9a:	4627      	mov	r7, r4
    3f9c:	3401      	adds	r4, #1
    3f9e:	783b      	ldrb	r3, [r7, #0]
    3fa0:	3b30      	subs	r3, #48	; 0x30
    3fa2:	2b09      	cmp	r3, #9
    3fa4:	d951      	bls.n	404a <_svfiprintf_r+0x16e>
    3fa6:	b1c9      	cbz	r1, 3fdc <_svfiprintf_r+0x100>
    3fa8:	e011      	b.n	3fce <_svfiprintf_r+0xf2>
    3faa:	2b25      	cmp	r3, #37	; 0x25
    3fac:	d0c0      	beq.n	3f30 <_svfiprintf_r+0x54>
    3fae:	4627      	mov	r7, r4
    3fb0:	e7b9      	b.n	3f26 <_svfiprintf_r+0x4a>
    3fb2:	4a3f      	ldr	r2, [pc, #252]	; (40b0 <_svfiprintf_r+0x1d4>)
    3fb4:	1a80      	subs	r0, r0, r2
    3fb6:	fa0b f000 	lsl.w	r0, fp, r0
    3fba:	4318      	orrs	r0, r3
    3fbc:	9004      	str	r0, [sp, #16]
    3fbe:	463c      	mov	r4, r7
    3fc0:	e7d3      	b.n	3f6a <_svfiprintf_r+0x8e>
    3fc2:	9a03      	ldr	r2, [sp, #12]
    3fc4:	1d11      	adds	r1, r2, #4
    3fc6:	6812      	ldr	r2, [r2, #0]
    3fc8:	9103      	str	r1, [sp, #12]
    3fca:	2a00      	cmp	r2, #0
    3fcc:	db01      	blt.n	3fd2 <_svfiprintf_r+0xf6>
    3fce:	9207      	str	r2, [sp, #28]
    3fd0:	e004      	b.n	3fdc <_svfiprintf_r+0x100>
    3fd2:	4252      	negs	r2, r2
    3fd4:	f043 0302 	orr.w	r3, r3, #2
    3fd8:	9207      	str	r2, [sp, #28]
    3fda:	9304      	str	r3, [sp, #16]
    3fdc:	783b      	ldrb	r3, [r7, #0]
    3fde:	2b2e      	cmp	r3, #46	; 0x2e
    3fe0:	d10e      	bne.n	4000 <_svfiprintf_r+0x124>
    3fe2:	787b      	ldrb	r3, [r7, #1]
    3fe4:	2b2a      	cmp	r3, #42	; 0x2a
    3fe6:	f107 0101 	add.w	r1, r7, #1
    3fea:	d132      	bne.n	4052 <_svfiprintf_r+0x176>
    3fec:	9b03      	ldr	r3, [sp, #12]
    3fee:	1d1a      	adds	r2, r3, #4
    3ff0:	681b      	ldr	r3, [r3, #0]
    3ff2:	9203      	str	r2, [sp, #12]
    3ff4:	2b00      	cmp	r3, #0
    3ff6:	bfb8      	it	lt
    3ff8:	f04f 33ff 	movlt.w	r3, #4294967295
    3ffc:	3702      	adds	r7, #2
    3ffe:	9305      	str	r3, [sp, #20]
    4000:	4c2c      	ldr	r4, [pc, #176]	; (40b4 <_svfiprintf_r+0x1d8>)
    4002:	7839      	ldrb	r1, [r7, #0]
    4004:	2203      	movs	r2, #3
    4006:	4620      	mov	r0, r4
    4008:	f000 f9f2 	bl	43f0 <memchr>
    400c:	b138      	cbz	r0, 401e <_svfiprintf_r+0x142>
    400e:	2340      	movs	r3, #64	; 0x40
    4010:	1b00      	subs	r0, r0, r4
    4012:	fa03 f000 	lsl.w	r0, r3, r0
    4016:	9b04      	ldr	r3, [sp, #16]
    4018:	4303      	orrs	r3, r0
    401a:	9304      	str	r3, [sp, #16]
    401c:	3701      	adds	r7, #1
    401e:	7839      	ldrb	r1, [r7, #0]
    4020:	4825      	ldr	r0, [pc, #148]	; (40b8 <_svfiprintf_r+0x1dc>)
    4022:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    4026:	2206      	movs	r2, #6
    4028:	1c7e      	adds	r6, r7, #1
    402a:	f000 f9e1 	bl	43f0 <memchr>
    402e:	2800      	cmp	r0, #0
    4030:	d035      	beq.n	409e <_svfiprintf_r+0x1c2>
    4032:	4b22      	ldr	r3, [pc, #136]	; (40bc <_svfiprintf_r+0x1e0>)
    4034:	b9fb      	cbnz	r3, 4076 <_svfiprintf_r+0x19a>
    4036:	9b03      	ldr	r3, [sp, #12]
    4038:	3307      	adds	r3, #7
    403a:	f023 0307 	bic.w	r3, r3, #7
    403e:	3308      	adds	r3, #8
    4040:	9303      	str	r3, [sp, #12]
    4042:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4044:	444b      	add	r3, r9
    4046:	9309      	str	r3, [sp, #36]	; 0x24
    4048:	e76c      	b.n	3f24 <_svfiprintf_r+0x48>
    404a:	fb00 3202 	mla	r2, r0, r2, r3
    404e:	2101      	movs	r1, #1
    4050:	e7a3      	b.n	3f9a <_svfiprintf_r+0xbe>
    4052:	2300      	movs	r3, #0
    4054:	9305      	str	r3, [sp, #20]
    4056:	4618      	mov	r0, r3
    4058:	240a      	movs	r4, #10
    405a:	460f      	mov	r7, r1
    405c:	3101      	adds	r1, #1
    405e:	783a      	ldrb	r2, [r7, #0]
    4060:	3a30      	subs	r2, #48	; 0x30
    4062:	2a09      	cmp	r2, #9
    4064:	d903      	bls.n	406e <_svfiprintf_r+0x192>
    4066:	2b00      	cmp	r3, #0
    4068:	d0ca      	beq.n	4000 <_svfiprintf_r+0x124>
    406a:	9005      	str	r0, [sp, #20]
    406c:	e7c8      	b.n	4000 <_svfiprintf_r+0x124>
    406e:	fb04 2000 	mla	r0, r4, r0, r2
    4072:	2301      	movs	r3, #1
    4074:	e7f1      	b.n	405a <_svfiprintf_r+0x17e>
    4076:	ab03      	add	r3, sp, #12
    4078:	9300      	str	r3, [sp, #0]
    407a:	462a      	mov	r2, r5
    407c:	4b10      	ldr	r3, [pc, #64]	; (40c0 <_svfiprintf_r+0x1e4>)
    407e:	a904      	add	r1, sp, #16
    4080:	4640      	mov	r0, r8
    4082:	f3af 8000 	nop.w
    4086:	f1b0 3fff 	cmp.w	r0, #4294967295
    408a:	4681      	mov	r9, r0
    408c:	d1d9      	bne.n	4042 <_svfiprintf_r+0x166>
    408e:	89ab      	ldrh	r3, [r5, #12]
    4090:	065b      	lsls	r3, r3, #25
    4092:	f53f af38 	bmi.w	3f06 <_svfiprintf_r+0x2a>
    4096:	9809      	ldr	r0, [sp, #36]	; 0x24
    4098:	b01d      	add	sp, #116	; 0x74
    409a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    409e:	ab03      	add	r3, sp, #12
    40a0:	9300      	str	r3, [sp, #0]
    40a2:	462a      	mov	r2, r5
    40a4:	4b06      	ldr	r3, [pc, #24]	; (40c0 <_svfiprintf_r+0x1e4>)
    40a6:	a904      	add	r1, sp, #16
    40a8:	4640      	mov	r0, r8
    40aa:	f000 f881 	bl	41b0 <_printf_i>
    40ae:	e7ea      	b.n	4086 <_svfiprintf_r+0x1aa>
    40b0:	00004db8 	.word	0x00004db8
    40b4:	00004dbe 	.word	0x00004dbe
    40b8:	00004dc2 	.word	0x00004dc2
    40bc:	00000000 	.word	0x00000000
    40c0:	00003e25 	.word	0x00003e25

000040c4 <_printf_common>:
    40c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40c8:	4691      	mov	r9, r2
    40ca:	461f      	mov	r7, r3
    40cc:	688a      	ldr	r2, [r1, #8]
    40ce:	690b      	ldr	r3, [r1, #16]
    40d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    40d4:	4293      	cmp	r3, r2
    40d6:	bfb8      	it	lt
    40d8:	4613      	movlt	r3, r2
    40da:	f8c9 3000 	str.w	r3, [r9]
    40de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    40e2:	4606      	mov	r6, r0
    40e4:	460c      	mov	r4, r1
    40e6:	b112      	cbz	r2, 40ee <_printf_common+0x2a>
    40e8:	3301      	adds	r3, #1
    40ea:	f8c9 3000 	str.w	r3, [r9]
    40ee:	6823      	ldr	r3, [r4, #0]
    40f0:	0699      	lsls	r1, r3, #26
    40f2:	bf42      	ittt	mi
    40f4:	f8d9 3000 	ldrmi.w	r3, [r9]
    40f8:	3302      	addmi	r3, #2
    40fa:	f8c9 3000 	strmi.w	r3, [r9]
    40fe:	6825      	ldr	r5, [r4, #0]
    4100:	f015 0506 	ands.w	r5, r5, #6
    4104:	d107      	bne.n	4116 <_printf_common+0x52>
    4106:	f104 0a19 	add.w	sl, r4, #25
    410a:	68e3      	ldr	r3, [r4, #12]
    410c:	f8d9 2000 	ldr.w	r2, [r9]
    4110:	1a9b      	subs	r3, r3, r2
    4112:	429d      	cmp	r5, r3
    4114:	db29      	blt.n	416a <_printf_common+0xa6>
    4116:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    411a:	6822      	ldr	r2, [r4, #0]
    411c:	3300      	adds	r3, #0
    411e:	bf18      	it	ne
    4120:	2301      	movne	r3, #1
    4122:	0692      	lsls	r2, r2, #26
    4124:	d42e      	bmi.n	4184 <_printf_common+0xc0>
    4126:	f104 0243 	add.w	r2, r4, #67	; 0x43
    412a:	4639      	mov	r1, r7
    412c:	4630      	mov	r0, r6
    412e:	47c0      	blx	r8
    4130:	3001      	adds	r0, #1
    4132:	d021      	beq.n	4178 <_printf_common+0xb4>
    4134:	6823      	ldr	r3, [r4, #0]
    4136:	68e5      	ldr	r5, [r4, #12]
    4138:	f8d9 2000 	ldr.w	r2, [r9]
    413c:	f003 0306 	and.w	r3, r3, #6
    4140:	2b04      	cmp	r3, #4
    4142:	bf08      	it	eq
    4144:	1aad      	subeq	r5, r5, r2
    4146:	68a3      	ldr	r3, [r4, #8]
    4148:	6922      	ldr	r2, [r4, #16]
    414a:	bf0c      	ite	eq
    414c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    4150:	2500      	movne	r5, #0
    4152:	4293      	cmp	r3, r2
    4154:	bfc4      	itt	gt
    4156:	1a9b      	subgt	r3, r3, r2
    4158:	18ed      	addgt	r5, r5, r3
    415a:	f04f 0900 	mov.w	r9, #0
    415e:	341a      	adds	r4, #26
    4160:	454d      	cmp	r5, r9
    4162:	d11b      	bne.n	419c <_printf_common+0xd8>
    4164:	2000      	movs	r0, #0
    4166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    416a:	2301      	movs	r3, #1
    416c:	4652      	mov	r2, sl
    416e:	4639      	mov	r1, r7
    4170:	4630      	mov	r0, r6
    4172:	47c0      	blx	r8
    4174:	3001      	adds	r0, #1
    4176:	d103      	bne.n	4180 <_printf_common+0xbc>
    4178:	f04f 30ff 	mov.w	r0, #4294967295
    417c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4180:	3501      	adds	r5, #1
    4182:	e7c2      	b.n	410a <_printf_common+0x46>
    4184:	18e1      	adds	r1, r4, r3
    4186:	1c5a      	adds	r2, r3, #1
    4188:	2030      	movs	r0, #48	; 0x30
    418a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    418e:	4422      	add	r2, r4
    4190:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    4194:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    4198:	3302      	adds	r3, #2
    419a:	e7c4      	b.n	4126 <_printf_common+0x62>
    419c:	2301      	movs	r3, #1
    419e:	4622      	mov	r2, r4
    41a0:	4639      	mov	r1, r7
    41a2:	4630      	mov	r0, r6
    41a4:	47c0      	blx	r8
    41a6:	3001      	adds	r0, #1
    41a8:	d0e6      	beq.n	4178 <_printf_common+0xb4>
    41aa:	f109 0901 	add.w	r9, r9, #1
    41ae:	e7d7      	b.n	4160 <_printf_common+0x9c>

000041b0 <_printf_i>:
    41b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    41b4:	4617      	mov	r7, r2
    41b6:	7e0a      	ldrb	r2, [r1, #24]
    41b8:	b085      	sub	sp, #20
    41ba:	2a6e      	cmp	r2, #110	; 0x6e
    41bc:	4698      	mov	r8, r3
    41be:	4606      	mov	r6, r0
    41c0:	460c      	mov	r4, r1
    41c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    41c4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    41c8:	f000 80bc 	beq.w	4344 <_printf_i+0x194>
    41cc:	d81a      	bhi.n	4204 <_printf_i+0x54>
    41ce:	2a63      	cmp	r2, #99	; 0x63
    41d0:	d02e      	beq.n	4230 <_printf_i+0x80>
    41d2:	d80a      	bhi.n	41ea <_printf_i+0x3a>
    41d4:	2a00      	cmp	r2, #0
    41d6:	f000 80c8 	beq.w	436a <_printf_i+0x1ba>
    41da:	2a58      	cmp	r2, #88	; 0x58
    41dc:	f000 808a 	beq.w	42f4 <_printf_i+0x144>
    41e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    41e4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    41e8:	e02a      	b.n	4240 <_printf_i+0x90>
    41ea:	2a64      	cmp	r2, #100	; 0x64
    41ec:	d001      	beq.n	41f2 <_printf_i+0x42>
    41ee:	2a69      	cmp	r2, #105	; 0x69
    41f0:	d1f6      	bne.n	41e0 <_printf_i+0x30>
    41f2:	6821      	ldr	r1, [r4, #0]
    41f4:	681a      	ldr	r2, [r3, #0]
    41f6:	f011 0f80 	tst.w	r1, #128	; 0x80
    41fa:	d023      	beq.n	4244 <_printf_i+0x94>
    41fc:	1d11      	adds	r1, r2, #4
    41fe:	6019      	str	r1, [r3, #0]
    4200:	6813      	ldr	r3, [r2, #0]
    4202:	e027      	b.n	4254 <_printf_i+0xa4>
    4204:	2a73      	cmp	r2, #115	; 0x73
    4206:	f000 80b4 	beq.w	4372 <_printf_i+0x1c2>
    420a:	d808      	bhi.n	421e <_printf_i+0x6e>
    420c:	2a6f      	cmp	r2, #111	; 0x6f
    420e:	d02a      	beq.n	4266 <_printf_i+0xb6>
    4210:	2a70      	cmp	r2, #112	; 0x70
    4212:	d1e5      	bne.n	41e0 <_printf_i+0x30>
    4214:	680a      	ldr	r2, [r1, #0]
    4216:	f042 0220 	orr.w	r2, r2, #32
    421a:	600a      	str	r2, [r1, #0]
    421c:	e003      	b.n	4226 <_printf_i+0x76>
    421e:	2a75      	cmp	r2, #117	; 0x75
    4220:	d021      	beq.n	4266 <_printf_i+0xb6>
    4222:	2a78      	cmp	r2, #120	; 0x78
    4224:	d1dc      	bne.n	41e0 <_printf_i+0x30>
    4226:	2278      	movs	r2, #120	; 0x78
    4228:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    422c:	496e      	ldr	r1, [pc, #440]	; (43e8 <_printf_i+0x238>)
    422e:	e064      	b.n	42fa <_printf_i+0x14a>
    4230:	681a      	ldr	r2, [r3, #0]
    4232:	f101 0542 	add.w	r5, r1, #66	; 0x42
    4236:	1d11      	adds	r1, r2, #4
    4238:	6019      	str	r1, [r3, #0]
    423a:	6813      	ldr	r3, [r2, #0]
    423c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    4240:	2301      	movs	r3, #1
    4242:	e0a3      	b.n	438c <_printf_i+0x1dc>
    4244:	f011 0f40 	tst.w	r1, #64	; 0x40
    4248:	f102 0104 	add.w	r1, r2, #4
    424c:	6019      	str	r1, [r3, #0]
    424e:	d0d7      	beq.n	4200 <_printf_i+0x50>
    4250:	f9b2 3000 	ldrsh.w	r3, [r2]
    4254:	2b00      	cmp	r3, #0
    4256:	da03      	bge.n	4260 <_printf_i+0xb0>
    4258:	222d      	movs	r2, #45	; 0x2d
    425a:	425b      	negs	r3, r3
    425c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    4260:	4962      	ldr	r1, [pc, #392]	; (43ec <_printf_i+0x23c>)
    4262:	220a      	movs	r2, #10
    4264:	e017      	b.n	4296 <_printf_i+0xe6>
    4266:	6820      	ldr	r0, [r4, #0]
    4268:	6819      	ldr	r1, [r3, #0]
    426a:	f010 0f80 	tst.w	r0, #128	; 0x80
    426e:	d003      	beq.n	4278 <_printf_i+0xc8>
    4270:	1d08      	adds	r0, r1, #4
    4272:	6018      	str	r0, [r3, #0]
    4274:	680b      	ldr	r3, [r1, #0]
    4276:	e006      	b.n	4286 <_printf_i+0xd6>
    4278:	f010 0f40 	tst.w	r0, #64	; 0x40
    427c:	f101 0004 	add.w	r0, r1, #4
    4280:	6018      	str	r0, [r3, #0]
    4282:	d0f7      	beq.n	4274 <_printf_i+0xc4>
    4284:	880b      	ldrh	r3, [r1, #0]
    4286:	4959      	ldr	r1, [pc, #356]	; (43ec <_printf_i+0x23c>)
    4288:	2a6f      	cmp	r2, #111	; 0x6f
    428a:	bf14      	ite	ne
    428c:	220a      	movne	r2, #10
    428e:	2208      	moveq	r2, #8
    4290:	2000      	movs	r0, #0
    4292:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    4296:	6865      	ldr	r5, [r4, #4]
    4298:	60a5      	str	r5, [r4, #8]
    429a:	2d00      	cmp	r5, #0
    429c:	f2c0 809c 	blt.w	43d8 <_printf_i+0x228>
    42a0:	6820      	ldr	r0, [r4, #0]
    42a2:	f020 0004 	bic.w	r0, r0, #4
    42a6:	6020      	str	r0, [r4, #0]
    42a8:	2b00      	cmp	r3, #0
    42aa:	d13f      	bne.n	432c <_printf_i+0x17c>
    42ac:	2d00      	cmp	r5, #0
    42ae:	f040 8095 	bne.w	43dc <_printf_i+0x22c>
    42b2:	4675      	mov	r5, lr
    42b4:	2a08      	cmp	r2, #8
    42b6:	d10b      	bne.n	42d0 <_printf_i+0x120>
    42b8:	6823      	ldr	r3, [r4, #0]
    42ba:	07da      	lsls	r2, r3, #31
    42bc:	d508      	bpl.n	42d0 <_printf_i+0x120>
    42be:	6923      	ldr	r3, [r4, #16]
    42c0:	6862      	ldr	r2, [r4, #4]
    42c2:	429a      	cmp	r2, r3
    42c4:	bfde      	ittt	le
    42c6:	2330      	movle	r3, #48	; 0x30
    42c8:	f805 3c01 	strble.w	r3, [r5, #-1]
    42cc:	f105 35ff 	addle.w	r5, r5, #4294967295
    42d0:	ebae 0305 	sub.w	r3, lr, r5
    42d4:	6123      	str	r3, [r4, #16]
    42d6:	f8cd 8000 	str.w	r8, [sp]
    42da:	463b      	mov	r3, r7
    42dc:	aa03      	add	r2, sp, #12
    42de:	4621      	mov	r1, r4
    42e0:	4630      	mov	r0, r6
    42e2:	f7ff feef 	bl	40c4 <_printf_common>
    42e6:	3001      	adds	r0, #1
    42e8:	d155      	bne.n	4396 <_printf_i+0x1e6>
    42ea:	f04f 30ff 	mov.w	r0, #4294967295
    42ee:	b005      	add	sp, #20
    42f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    42f4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    42f8:	493c      	ldr	r1, [pc, #240]	; (43ec <_printf_i+0x23c>)
    42fa:	6822      	ldr	r2, [r4, #0]
    42fc:	6818      	ldr	r0, [r3, #0]
    42fe:	f012 0f80 	tst.w	r2, #128	; 0x80
    4302:	f100 0504 	add.w	r5, r0, #4
    4306:	601d      	str	r5, [r3, #0]
    4308:	d001      	beq.n	430e <_printf_i+0x15e>
    430a:	6803      	ldr	r3, [r0, #0]
    430c:	e002      	b.n	4314 <_printf_i+0x164>
    430e:	0655      	lsls	r5, r2, #25
    4310:	d5fb      	bpl.n	430a <_printf_i+0x15a>
    4312:	8803      	ldrh	r3, [r0, #0]
    4314:	07d0      	lsls	r0, r2, #31
    4316:	bf44      	itt	mi
    4318:	f042 0220 	orrmi.w	r2, r2, #32
    431c:	6022      	strmi	r2, [r4, #0]
    431e:	b91b      	cbnz	r3, 4328 <_printf_i+0x178>
    4320:	6822      	ldr	r2, [r4, #0]
    4322:	f022 0220 	bic.w	r2, r2, #32
    4326:	6022      	str	r2, [r4, #0]
    4328:	2210      	movs	r2, #16
    432a:	e7b1      	b.n	4290 <_printf_i+0xe0>
    432c:	4675      	mov	r5, lr
    432e:	fbb3 f0f2 	udiv	r0, r3, r2
    4332:	fb02 3310 	mls	r3, r2, r0, r3
    4336:	5ccb      	ldrb	r3, [r1, r3]
    4338:	f805 3d01 	strb.w	r3, [r5, #-1]!
    433c:	4603      	mov	r3, r0
    433e:	2800      	cmp	r0, #0
    4340:	d1f5      	bne.n	432e <_printf_i+0x17e>
    4342:	e7b7      	b.n	42b4 <_printf_i+0x104>
    4344:	6808      	ldr	r0, [r1, #0]
    4346:	681a      	ldr	r2, [r3, #0]
    4348:	6949      	ldr	r1, [r1, #20]
    434a:	f010 0f80 	tst.w	r0, #128	; 0x80
    434e:	d004      	beq.n	435a <_printf_i+0x1aa>
    4350:	1d10      	adds	r0, r2, #4
    4352:	6018      	str	r0, [r3, #0]
    4354:	6813      	ldr	r3, [r2, #0]
    4356:	6019      	str	r1, [r3, #0]
    4358:	e007      	b.n	436a <_printf_i+0x1ba>
    435a:	f010 0f40 	tst.w	r0, #64	; 0x40
    435e:	f102 0004 	add.w	r0, r2, #4
    4362:	6018      	str	r0, [r3, #0]
    4364:	6813      	ldr	r3, [r2, #0]
    4366:	d0f6      	beq.n	4356 <_printf_i+0x1a6>
    4368:	8019      	strh	r1, [r3, #0]
    436a:	2300      	movs	r3, #0
    436c:	6123      	str	r3, [r4, #16]
    436e:	4675      	mov	r5, lr
    4370:	e7b1      	b.n	42d6 <_printf_i+0x126>
    4372:	681a      	ldr	r2, [r3, #0]
    4374:	1d11      	adds	r1, r2, #4
    4376:	6019      	str	r1, [r3, #0]
    4378:	6815      	ldr	r5, [r2, #0]
    437a:	6862      	ldr	r2, [r4, #4]
    437c:	2100      	movs	r1, #0
    437e:	4628      	mov	r0, r5
    4380:	f000 f836 	bl	43f0 <memchr>
    4384:	b108      	cbz	r0, 438a <_printf_i+0x1da>
    4386:	1b40      	subs	r0, r0, r5
    4388:	6060      	str	r0, [r4, #4]
    438a:	6863      	ldr	r3, [r4, #4]
    438c:	6123      	str	r3, [r4, #16]
    438e:	2300      	movs	r3, #0
    4390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    4394:	e79f      	b.n	42d6 <_printf_i+0x126>
    4396:	6923      	ldr	r3, [r4, #16]
    4398:	462a      	mov	r2, r5
    439a:	4639      	mov	r1, r7
    439c:	4630      	mov	r0, r6
    439e:	47c0      	blx	r8
    43a0:	3001      	adds	r0, #1
    43a2:	d0a2      	beq.n	42ea <_printf_i+0x13a>
    43a4:	6823      	ldr	r3, [r4, #0]
    43a6:	079b      	lsls	r3, r3, #30
    43a8:	d507      	bpl.n	43ba <_printf_i+0x20a>
    43aa:	2500      	movs	r5, #0
    43ac:	f104 0919 	add.w	r9, r4, #25
    43b0:	68e3      	ldr	r3, [r4, #12]
    43b2:	9a03      	ldr	r2, [sp, #12]
    43b4:	1a9b      	subs	r3, r3, r2
    43b6:	429d      	cmp	r5, r3
    43b8:	db05      	blt.n	43c6 <_printf_i+0x216>
    43ba:	68e0      	ldr	r0, [r4, #12]
    43bc:	9b03      	ldr	r3, [sp, #12]
    43be:	4298      	cmp	r0, r3
    43c0:	bfb8      	it	lt
    43c2:	4618      	movlt	r0, r3
    43c4:	e793      	b.n	42ee <_printf_i+0x13e>
    43c6:	2301      	movs	r3, #1
    43c8:	464a      	mov	r2, r9
    43ca:	4639      	mov	r1, r7
    43cc:	4630      	mov	r0, r6
    43ce:	47c0      	blx	r8
    43d0:	3001      	adds	r0, #1
    43d2:	d08a      	beq.n	42ea <_printf_i+0x13a>
    43d4:	3501      	adds	r5, #1
    43d6:	e7eb      	b.n	43b0 <_printf_i+0x200>
    43d8:	2b00      	cmp	r3, #0
    43da:	d1a7      	bne.n	432c <_printf_i+0x17c>
    43dc:	780b      	ldrb	r3, [r1, #0]
    43de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    43e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    43e6:	e765      	b.n	42b4 <_printf_i+0x104>
    43e8:	00004dda 	.word	0x00004dda
    43ec:	00004dc9 	.word	0x00004dc9

000043f0 <memchr>:
    43f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    43f4:	2a10      	cmp	r2, #16
    43f6:	db2b      	blt.n	4450 <memchr+0x60>
    43f8:	f010 0f07 	tst.w	r0, #7
    43fc:	d008      	beq.n	4410 <memchr+0x20>
    43fe:	f810 3b01 	ldrb.w	r3, [r0], #1
    4402:	3a01      	subs	r2, #1
    4404:	428b      	cmp	r3, r1
    4406:	d02d      	beq.n	4464 <memchr+0x74>
    4408:	f010 0f07 	tst.w	r0, #7
    440c:	b342      	cbz	r2, 4460 <memchr+0x70>
    440e:	d1f6      	bne.n	43fe <memchr+0xe>
    4410:	b4f0      	push	{r4, r5, r6, r7}
    4412:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    4416:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    441a:	f022 0407 	bic.w	r4, r2, #7
    441e:	f07f 0700 	mvns.w	r7, #0
    4422:	2300      	movs	r3, #0
    4424:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    4428:	3c08      	subs	r4, #8
    442a:	ea85 0501 	eor.w	r5, r5, r1
    442e:	ea86 0601 	eor.w	r6, r6, r1
    4432:	fa85 f547 	uadd8	r5, r5, r7
    4436:	faa3 f587 	sel	r5, r3, r7
    443a:	fa86 f647 	uadd8	r6, r6, r7
    443e:	faa5 f687 	sel	r6, r5, r7
    4442:	b98e      	cbnz	r6, 4468 <memchr+0x78>
    4444:	d1ee      	bne.n	4424 <memchr+0x34>
    4446:	bcf0      	pop	{r4, r5, r6, r7}
    4448:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    444c:	f002 0207 	and.w	r2, r2, #7
    4450:	b132      	cbz	r2, 4460 <memchr+0x70>
    4452:	f810 3b01 	ldrb.w	r3, [r0], #1
    4456:	3a01      	subs	r2, #1
    4458:	ea83 0301 	eor.w	r3, r3, r1
    445c:	b113      	cbz	r3, 4464 <memchr+0x74>
    445e:	d1f8      	bne.n	4452 <memchr+0x62>
    4460:	2000      	movs	r0, #0
    4462:	4770      	bx	lr
    4464:	3801      	subs	r0, #1
    4466:	4770      	bx	lr
    4468:	2d00      	cmp	r5, #0
    446a:	bf06      	itte	eq
    446c:	4635      	moveq	r5, r6
    446e:	3803      	subeq	r0, #3
    4470:	3807      	subne	r0, #7
    4472:	f015 0f01 	tst.w	r5, #1
    4476:	d107      	bne.n	4488 <memchr+0x98>
    4478:	3001      	adds	r0, #1
    447a:	f415 7f80 	tst.w	r5, #256	; 0x100
    447e:	bf02      	ittt	eq
    4480:	3001      	addeq	r0, #1
    4482:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    4486:	3001      	addeq	r0, #1
    4488:	bcf0      	pop	{r4, r5, r6, r7}
    448a:	3801      	subs	r0, #1
    448c:	4770      	bx	lr
    448e:	bf00      	nop

00004490 <_realloc_r>:
    4490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4492:	4607      	mov	r7, r0
    4494:	4614      	mov	r4, r2
    4496:	460e      	mov	r6, r1
    4498:	b921      	cbnz	r1, 44a4 <_realloc_r+0x14>
    449a:	4611      	mov	r1, r2
    449c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    44a0:	f7ff bc2c 	b.w	3cfc <_malloc_r>
    44a4:	b922      	cbnz	r2, 44b0 <_realloc_r+0x20>
    44a6:	f7ff fbdb 	bl	3c60 <_free_r>
    44aa:	4625      	mov	r5, r4
    44ac:	4628      	mov	r0, r5
    44ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44b0:	f000 f814 	bl	44dc <_malloc_usable_size_r>
    44b4:	4284      	cmp	r4, r0
    44b6:	d90f      	bls.n	44d8 <_realloc_r+0x48>
    44b8:	4621      	mov	r1, r4
    44ba:	4638      	mov	r0, r7
    44bc:	f7ff fc1e 	bl	3cfc <_malloc_r>
    44c0:	4605      	mov	r5, r0
    44c2:	2800      	cmp	r0, #0
    44c4:	d0f2      	beq.n	44ac <_realloc_r+0x1c>
    44c6:	4631      	mov	r1, r6
    44c8:	4622      	mov	r2, r4
    44ca:	f7ff fba3 	bl	3c14 <memcpy>
    44ce:	4631      	mov	r1, r6
    44d0:	4638      	mov	r0, r7
    44d2:	f7ff fbc5 	bl	3c60 <_free_r>
    44d6:	e7e9      	b.n	44ac <_realloc_r+0x1c>
    44d8:	4635      	mov	r5, r6
    44da:	e7e7      	b.n	44ac <_realloc_r+0x1c>

000044dc <_malloc_usable_size_r>:
    44dc:	f851 0c04 	ldr.w	r0, [r1, #-4]
    44e0:	2800      	cmp	r0, #0
    44e2:	f1a0 0004 	sub.w	r0, r0, #4
    44e6:	bfbc      	itt	lt
    44e8:	580b      	ldrlt	r3, [r1, r0]
    44ea:	18c0      	addlt	r0, r0, r3
    44ec:	4770      	bx	lr
    44ee:	0000      	movs	r0, r0
    44f0:	43524553 	.word	0x43524553
    44f4:	20334d4f 	.word	0x20334d4f
    44f8:	74696e69 	.word	0x74696e69
    44fc:	696c6169 	.word	0x696c6169
    4500:	0d64657a 	.word	0x0d64657a
    4504:	0000000a 	.word	0x0000000a
    4508:	43524553 	.word	0x43524553
    450c:	20334d4f 	.word	0x20334d4f
    4510:	20746f6e 	.word	0x20746f6e
    4514:	74696e69 	.word	0x74696e69
    4518:	696c6169 	.word	0x696c6169
    451c:	0d64657a 	.word	0x0d64657a
    4520:	0000000a 	.word	0x0000000a
    4524:	0a0d5441 	.word	0x0a0d5441
    4528:	00000000 	.word	0x00000000
    452c:	4b2b5441 	.word	0x4b2b5441
    4530:	45454c53 	.word	0x45454c53
    4534:	0d323d50 	.word	0x0d323d50
    4538:	0000000a 	.word	0x0000000a
    453c:	6e617254 	.word	0x6e617254
    4540:	74696d73 	.word	0x74696d73
    4544:	20646574 	.word	0x20646574
    4548:	63206425 	.word	0x63206425
    454c:	20726168 	.word	0x20726168
    4550:	4d206f74 	.word	0x4d206f74
    4554:	6d65646f 	.word	0x6d65646f
    4558:	726f6620 	.word	0x726f6620
    455c:	656c7320 	.word	0x656c7320
    4560:	73207065 	.word	0x73207065
    4564:	69747465 	.word	0x69747465
    4568:	2073676e 	.word	0x2073676e
    456c:	00000a0d 	.word	0x00000a0d
    4570:	64616552 	.word	0x64616552
    4574:	20642520 	.word	0x20642520
    4578:	72616863 	.word	0x72616863
    457c:	6f726620 	.word	0x6f726620
    4580:	6f4d206d 	.word	0x6f4d206d
    4584:	2e6d6564 	.word	0x2e6d6564
    4588:	00000a0d 	.word	0x00000a0d
    458c:	52204b4f 	.word	0x52204b4f
    4590:	6f707365 	.word	0x6f707365
    4594:	2065736e 	.word	0x2065736e
    4598:	65636572 	.word	0x65636572
    459c:	64657669 	.word	0x64657669
    45a0:	00000a0d 	.word	0x00000a0d
    45a4:	50206f4e 	.word	0x50206f4e
    45a8:	65706f72 	.word	0x65706f72
    45ac:	65522072 	.word	0x65522072
    45b0:	6e6f7073 	.word	0x6e6f7073
    45b4:	0d2e6573 	.word	0x0d2e6573
    45b8:	0000000a 	.word	0x0000000a
    45bc:	70736552 	.word	0x70736552
    45c0:	65736e6f 	.word	0x65736e6f
    45c4:	746f6e20 	.word	0x746f6e20
    45c8:	61657220 	.word	0x61657220
    45cc:	000a0d64 	.word	0x000a0d64
    45d0:	69736e49 	.word	0x69736e49
    45d4:	4d206564 	.word	0x4d206564
    45d8:	535f4d44 	.word	0x535f4d44
    45dc:	535f5445 	.word	0x535f5445
    45e0:	5045454c 	.word	0x5045454c
    45e4:	5445535f 	.word	0x5445535f
    45e8:	474e4954 	.word	0x474e4954
    45ec:	000a0d53 	.word	0x000a0d53
    45f0:	432b5441 	.word	0x432b5441
    45f4:	3d4e5347 	.word	0x3d4e5347
    45f8:	000a0d3f 	.word	0x000a0d3f
    45fc:	6e617254 	.word	0x6e617254
    4600:	74696d73 	.word	0x74696d73
    4604:	20646574 	.word	0x20646574
    4608:	63206425 	.word	0x63206425
    460c:	20726168 	.word	0x20726168
    4610:	4d206f74 	.word	0x4d206f74
    4614:	6d65646f 	.word	0x6d65646f
    4618:	000a0d20 	.word	0x000a0d20
    461c:	65646f4d 	.word	0x65646f4d
    4620:	7854206d 	.word	0x7854206d
    4624:	6e6f4420 	.word	0x6e6f4420
    4628:	61432065 	.word	0x61432065
    462c:	61426c6c 	.word	0x61426c6c
    4630:	0a0d6b63 	.word	0x0a0d6b63
    4634:	00000000 	.word	0x00000000
    4638:	65646f4d 	.word	0x65646f4d
    463c:	7852206d 	.word	0x7852206d
    4640:	6c614320 	.word	0x6c614320
    4644:	6361626c 	.word	0x6361626c
    4648:	000a0d6b 	.word	0x000a0d6b
    464c:	65646f4d 	.word	0x65646f4d
    4650:	7245206d 	.word	0x7245206d
    4654:	20726f72 	.word	0x20726f72
    4658:	6c6c6143 	.word	0x6c6c6143
    465c:	6b636162 	.word	0x6b636162
    4660:	00000a0d 	.word	0x00000a0d
    4664:	65646f4d 	.word	0x65646f4d
    4668:	7854206d 	.word	0x7854206d
    466c:	74614420 	.word	0x74614420
    4670:	65522061 	.word	0x65522061
    4674:	6d452067 	.word	0x6d452067
    4678:	20797470 	.word	0x20797470
    467c:	6c6c6143 	.word	0x6c6c6143
    4680:	6b636142 	.word	0x6b636142
    4684:	00000a0d 	.word	0x00000a0d
    4688:	65646f4d 	.word	0x65646f4d
    468c:	7854206d 	.word	0x7854206d
    4690:	6d6f4320 	.word	0x6d6f4320
    4694:	74656c70 	.word	0x74656c70
    4698:	61432065 	.word	0x61432065
    469c:	61626c6c 	.word	0x61626c6c
    46a0:	0a0d6b63 	.word	0x0a0d6b63
    46a4:	00000000 	.word	0x00000000
    46a8:	65646f4d 	.word	0x65646f4d
    46ac:	7852206d 	.word	0x7852206d
    46b0:	6d6f4320 	.word	0x6d6f4320
    46b4:	74656c70 	.word	0x74656c70
    46b8:	61432065 	.word	0x61432065
    46bc:	61426c6c 	.word	0x61426c6c
    46c0:	0a0d6b63 	.word	0x0a0d6b63
    46c4:	00000000 	.word	0x00000000
    46c8:	43524553 	.word	0x43524553
    46cc:	20334d4f 	.word	0x20334d4f
    46d0:	74696e49 	.word	0x74696e49
    46d4:	69614620 	.word	0x69614620
    46d8:	2e64656c 	.word	0x2e64656c
    46dc:	72724520 	.word	0x72724520
    46e0:	2520726f 	.word	0x2520726f
    46e4:	0a0d2e64 	.word	0x0a0d2e64
    46e8:	00000000 	.word	0x00000000
    46ec:	43524553 	.word	0x43524553
    46f0:	20334d4f 	.word	0x20334d4f
    46f4:	74696e49 	.word	0x74696e49
    46f8:	63755320 	.word	0x63755320
    46fc:	73736563 	.word	0x73736563
    4700:	000a0d2e 	.word	0x000a0d2e
    4704:	74207854 	.word	0x74207854
    4708:	6f6d206f 	.word	0x6f6d206f
    470c:	206d6564 	.word	0x206d6564
    4710:	6c696146 	.word	0x6c696146
    4714:	45206465 	.word	0x45206465
    4718:	726f7272 	.word	0x726f7272
    471c:	0d642520 	.word	0x0d642520
    4720:	0000000a 	.word	0x0000000a
    4724:	74207854 	.word	0x74207854
    4728:	6f6d206f 	.word	0x6f6d206f
    472c:	206d6564 	.word	0x206d6564
    4730:	63637553 	.word	0x63637553
    4734:	00737365 	.word	0x00737365
    4738:	64616552 	.word	0x64616552
    473c:	20642520 	.word	0x20642520
    4740:	72616863 	.word	0x72616863
    4744:	44202e73 	.word	0x44202e73
    4748:	20617461 	.word	0x20617461
    474c:	25207369 	.word	0x25207369
    4750:	000a0d73 	.word	0x000a0d73
    4754:	64616552 	.word	0x64616552
    4758:	69614620 	.word	0x69614620
    475c:	2e64656c 	.word	0x2e64656c
    4760:	00000a0d 	.word	0x00000a0d
    4764:	73207854 	.word	0x73207854
    4768:	61697265 	.word	0x61697265
    476c:	6544206c 	.word	0x6544206c
    4770:	20677562 	.word	0x20677562
    4774:	656e6f44 	.word	0x656e6f44
    4778:	00000a0d 	.word	0x00000a0d
    477c:	44207852 	.word	0x44207852
    4780:	0d656e6f 	.word	0x0d656e6f
    4784:	0000000a 	.word	0x0000000a
    4788:	69726553 	.word	0x69726553
    478c:	52206c61 	.word	0x52206c61
    4790:	6f432078 	.word	0x6f432078
    4794:	656c706d 	.word	0x656c706d
    4798:	43206574 	.word	0x43206574
    479c:	426c6c61 	.word	0x426c6c61
    47a0:	0d6b6361 	.word	0x0d6b6361
    47a4:	0000000a 	.word	0x0000000a
    47a8:	682f2e2e 	.word	0x682f2e2e
    47ac:	692f6c61 	.word	0x692f6c61
    47b0:	756c636e 	.word	0x756c636e
    47b4:	682f6564 	.word	0x682f6564
    47b8:	775f6c61 	.word	0x775f6c61
    47bc:	682e7464 	.word	0x682e7464
    47c0:	00000000 	.word	0x00000000
    47c4:	682f2e2e 	.word	0x682f2e2e
    47c8:	732f6c61 	.word	0x732f6c61
    47cc:	682f6372 	.word	0x682f6372
    47d0:	615f6c61 	.word	0x615f6c61
    47d4:	79735f63 	.word	0x79735f63
    47d8:	632e636e 	.word	0x632e636e
    47dc:	00000000 	.word	0x00000000
    47e0:	682f2e2e 	.word	0x682f2e2e
    47e4:	732f6c61 	.word	0x732f6c61
    47e8:	682f6372 	.word	0x682f6372
    47ec:	615f6c61 	.word	0x615f6c61
    47f0:	735f6364 	.word	0x735f6364
    47f4:	2e636e79 	.word	0x2e636e79
    47f8:	00000063 	.word	0x00000063
    47fc:	682f2e2e 	.word	0x682f2e2e
    4800:	732f6c61 	.word	0x732f6c61
    4804:	682f6372 	.word	0x682f6372
    4808:	645f6c61 	.word	0x645f6c61
    480c:	735f6361 	.word	0x735f6361
    4810:	2e636e79 	.word	0x2e636e79
    4814:	00000063 	.word	0x00000063
    4818:	682f2e2e 	.word	0x682f2e2e
    481c:	732f6c61 	.word	0x732f6c61
    4820:	682f6372 	.word	0x682f6372
    4824:	665f6c61 	.word	0x665f6c61
    4828:	6873616c 	.word	0x6873616c
    482c:	0000632e 	.word	0x0000632e
    4830:	682f2e2e 	.word	0x682f2e2e
    4834:	732f6c61 	.word	0x732f6c61
    4838:	682f6372 	.word	0x682f6372
    483c:	705f6c61 	.word	0x705f6c61
    4840:	632e6d77 	.word	0x632e6d77
    4844:	00000000 	.word	0x00000000
    4848:	682f2e2e 	.word	0x682f2e2e
    484c:	732f6c61 	.word	0x732f6c61
    4850:	682f6372 	.word	0x682f6372
    4854:	745f6c61 	.word	0x745f6c61
    4858:	72656d69 	.word	0x72656d69
    485c:	0000632e 	.word	0x0000632e
    4860:	682f2e2e 	.word	0x682f2e2e
    4864:	732f6c61 	.word	0x732f6c61
    4868:	682f6372 	.word	0x682f6372
    486c:	755f6c61 	.word	0x755f6c61
    4870:	74726173 	.word	0x74726173
    4874:	2e736f5f 	.word	0x2e736f5f
    4878:	00000063 	.word	0x00000063
    487c:	682f2e2e 	.word	0x682f2e2e
    4880:	752f6c61 	.word	0x752f6c61
    4884:	736c6974 	.word	0x736c6974
    4888:	6372732f 	.word	0x6372732f
    488c:	6974752f 	.word	0x6974752f
    4890:	6c5f736c 	.word	0x6c5f736c
    4894:	2e747369 	.word	0x2e747369
    4898:	00000063 	.word	0x00000063
    489c:	682f2e2e 	.word	0x682f2e2e
    48a0:	752f6c61 	.word	0x752f6c61
    48a4:	736c6974 	.word	0x736c6974
    48a8:	6372732f 	.word	0x6372732f
    48ac:	6974752f 	.word	0x6974752f
    48b0:	725f736c 	.word	0x725f736c
    48b4:	62676e69 	.word	0x62676e69
    48b8:	65666675 	.word	0x65666675
    48bc:	00632e72 	.word	0x00632e72
    48c0:	682f2e2e 	.word	0x682f2e2e
    48c4:	612f6c70 	.word	0x612f6c70
    48c8:	70682f63 	.word	0x70682f63
    48cc:	63615f6c 	.word	0x63615f6c
    48d0:	0000632e 	.word	0x0000632e

000048d4 <_adcs>:
    48d4:	00c00000 00830002 00001900 00000000     ................
    48e4:	00000000 00010001 00000000 00000000     ................
	...
    4900:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    4910:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    4920:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00004930 <_cfgs>:
	...

00004a30 <user_mux_confs>:
	...

00004a74 <channel_confs>:
	...

00004ab4 <interrupt_cfg>:
	...
    4b34:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    4b44:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    4b54:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    4b64:	43000000 43000400                       ...C...C

00004b6c <_usarts>:
    4b6c:	00000003 40200004 00030000 00700002     ...... @......p.
    4b7c:	0000f62b 00000000 00000004 40300184     +.............0@
    4b8c:	00030300 00700002 0000ff2e 00000000     ......p.........
    4b9c:	00000005 40300004 00030000 00700002     ......0@......p.
    4bac:	0000f62b 00000000                       +.......

00004bb4 <_i2cms>:
	...

00004bcc <sercomspi_regs>:
	...
    4be0:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    4bf0:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    4c00:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00004c10 <_tccs>:
    4c10:	00000000 00000300 00000000 00000000     ................
    4c20:	00001770 00000000 00000000 00000000     p...............
    4c30:	00000000 00000001 00000300 00000000     ................
    4c40:	00000000 00001770 00000000 00000000     ....p...........
	...
    4c58:	00000002 00000300 00000000 00000000     ................
    4c68:	00001770 00000000 00000000 00000000     p...............
    4c78:	00000000 00000003 00000300 00000000     ................
    4c88:	00000000 00001770 00000000 00000000     ....p...........
	...
    4ca0:	00000004 00000300 00000000 00000000     ................
    4cb0:	00001770 00000000 00000000 00000000     p...............
    4cc0:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    4cd0:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    4ce0:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    4cf0:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    4d00:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    4d10:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    4d20:	742f2e2e 64726968 74726170 54522f79     ../thirdparty/RT
    4d30:	662f534f 72656572 2f736f74 65657246     OS/freertos/Free
    4d40:	534f5452 2e303156 2f302e30 736f7472     RTOSV10.0.0/rtos
    4d50:	726f705f 00632e74                       _port.c.

00004d58 <__sf_fake_stderr>:
	...

00004d78 <__sf_fake_stdin>:
	...

00004d98 <__sf_fake_stdout>:
	...
    4db8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4dc8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4dd8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4de8:	00006665                                ef..

00004dec <_init>:
    4dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dee:	bf00      	nop
    4df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4df2:	bc08      	pop	{r3}
    4df4:	469e      	mov	lr, r3
    4df6:	4770      	bx	lr

00004df8 <__init_array_start>:
    4df8:	00000289 	.word	0x00000289

00004dfc <_fini>:
    4dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dfe:	bf00      	nop
    4e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4e02:	bc08      	pop	{r3}
    4e04:	469e      	mov	lr, r3
    4e06:	4770      	bx	lr

00004e08 <__fini_array_start>:
    4e08:	00000265 	.word	0x00000265
