
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000860c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000190  20000000  0000860c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020190  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020190  2**0
                  CONTENTS
  4 .bss          00003ce8  20000190  000087a0  00020190  2**4
                  ALLOC
  5 .stack        00010000  20003e78  0000c488  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201be  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005f80e  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000988d  00000000  00000000  0007fa25  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ad36  00000000  00000000  000892b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b10  00000000  00000000  000a3fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000021f8  00000000  00000000  000a5af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001b9a6  00000000  00000000  000a7cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002de84  00000000  00000000  000c3696  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001088a0  00000000  00000000  000f151a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000487c  00000000  00000000  001f9dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 3e 01 20 79 21 00 00 75 21 00 00 75 21 00 00     x>. y!..u!..u!..
      10:	75 21 00 00 75 21 00 00 75 21 00 00 00 00 00 00     u!..u!..u!......
	...
      2c:	41 46 00 00 75 21 00 00 00 00 00 00 e1 46 00 00     AF..u!.......F..
      3c:	45 47 00 00 75 21 00 00 75 21 00 00 75 21 00 00     EG..u!..u!..u!..
      4c:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
      5c:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
      6c:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
      7c:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
      8c:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
      9c:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
      ac:	75 21 00 00 75 21 00 00 e5 34 00 00 f9 34 00 00     u!..u!...4...4..
      bc:	75 32 00 00 81 32 00 00 8d 32 00 00 99 32 00 00     u2...2...2...2..
      cc:	a5 32 00 00 75 21 00 00 75 21 00 00 75 21 00 00     .2..u!..u!..u!..
      dc:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
      ec:	75 21 00 00 00 00 00 00 f5 35 00 00 75 21 00 00     u!.......5..u!..
      fc:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
     10c:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
     11c:	75 21 00 00 75 21 00 00 75 21 00 00 45 16 00 00     u!..u!..u!..E...
     12c:	51 16 00 00 5d 16 00 00 75 21 00 00 75 21 00 00     Q...]...u!..u!..
     13c:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
     14c:	75 21 00 00 e1 1f 00 00 75 21 00 00 00 00 00 00     u!......u!......
	...
     180:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
     190:	00 00 00 00 95 3b 00 00 75 21 00 00 75 21 00 00     .....;..u!..u!..
     1a0:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
     1b0:	a9 3b 00 00 75 21 00 00 75 21 00 00 75 21 00 00     .;..u!..u!..u!..
     1c0:	75 21 00 00 bd 3b 00 00 75 21 00 00 75 21 00 00     u!...;..u!..u!..
     1d0:	75 21 00 00 d1 3b 00 00 75 21 00 00 75 21 00 00     u!...;..u!..u!..
     1e0:	e5 3b 00 00 75 21 00 00 75 21 00 00 d9 40 00 00     .;..u!..u!...@..
     1f0:	ed 40 00 00 01 41 00 00 15 41 00 00 29 41 00 00     .@...A...A..)A..
     200:	3d 41 00 00 00 00 00 00 00 00 00 00 75 21 00 00     =A..........u!..
     210:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
     220:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
     230:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
     240:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
     250:	75 21 00 00 75 21 00 00 75 21 00 00 75 21 00 00     u!..u!..u!..u!..
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	0000860c 	.word	0x0000860c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000860c 	.word	0x0000860c
     2c4:	20000194 	.word	0x20000194
     2c8:	0000860c 	.word	0x0000860c
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Application/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b500      	push	{lr}
     2d2:	b089      	sub	sp, #36	; 0x24
     2d4:	4606      	mov	r6, r0
	uint8_t dbgBuffer[30];
	memset(dbgBuffer,'0',30);
     2d6:	221e      	movs	r2, #30
     2d8:	2130      	movs	r1, #48	; 0x30
     2da:	4668      	mov	r0, sp
     2dc:	4b0c      	ldr	r3, [pc, #48]	; (310 <vApplicationStackOverflowHook+0x40>)
     2de:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e0:	4d0c      	ldr	r5, [pc, #48]	; (314 <vApplicationStackOverflowHook+0x44>)
     2e2:	4628      	mov	r0, r5
     2e4:	4c0c      	ldr	r4, [pc, #48]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e6:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2e8:	480c      	ldr	r0, [pc, #48]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2ea:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ec:	4628      	mov	r0, r5
     2ee:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f0:	480b      	ldr	r0, [pc, #44]	; (320 <vApplicationStackOverflowHook+0x50>)
     2f2:	47a0      	blx	r4

	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2f4:	4632      	mov	r2, r6
     2f6:	490b      	ldr	r1, [pc, #44]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f8:	4668      	mov	r0, sp
     2fa:	4b0b      	ldr	r3, [pc, #44]	; (328 <vApplicationStackOverflowHook+0x58>)
     2fc:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     2fe:	4668      	mov	r0, sp
     300:	4b0a      	ldr	r3, [pc, #40]	; (32c <vApplicationStackOverflowHook+0x5c>)
     302:	4798      	blx	r3
     304:	b281      	uxth	r1, r0
     306:	4668      	mov	r0, sp
     308:	4b09      	ldr	r3, [pc, #36]	; (330 <vApplicationStackOverflowHook+0x60>)
     30a:	4798      	blx	r3
     30c:	e7fe      	b.n	30c <vApplicationStackOverflowHook+0x3c>
     30e:	bf00      	nop
     310:	000065f1 	.word	0x000065f1
     314:	00006f00 	.word	0x00006f00
     318:	00001f55 	.word	0x00001f55
     31c:	00006f3c 	.word	0x00006f3c
     320:	00007f40 	.word	0x00007f40
     324:	00006f78 	.word	0x00006f78
     328:	00006779 	.word	0x00006779
     32c:	000067d1 	.word	0x000067d1
     330:	00001f11 	.word	0x00001f11

00000334 <SensorTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "Application/SerialDebug/SerialDebug.h"


void SensorTask( void *SensorTaskParam)
{
     334:	b570      	push	{r4, r5, r6, lr}
     336:	b082      	sub	sp, #8
	TickType_t xLastWakeTime;
	const TickType_t xDelayMs = pdMS_TO_TICKS(700UL);
	const TickType_t xDebugPrintDelayMs = pdMS_TO_TICKS(500UL);
	xLastWakeTime = xTaskGetTickCount();
     338:	4b06      	ldr	r3, [pc, #24]	; (354 <SensorTask+0x20>)
     33a:	4798      	blx	r3
     33c:	ac02      	add	r4, sp, #8
     33e:	f844 0d04 	str.w	r0, [r4, #-4]!

	while(1)
	{
		kickWatchDog();
     342:	4e05      	ldr	r6, [pc, #20]	; (358 <SensorTask+0x24>)
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     344:	4d05      	ldr	r5, [pc, #20]	; (35c <SensorTask+0x28>)
		kickWatchDog();
     346:	47b0      	blx	r6
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     348:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     34c:	4620      	mov	r0, r4
     34e:	47a8      	blx	r5
     350:	e7f9      	b.n	346 <SensorTask+0x12>
     352:	bf00      	nop
     354:	00005761 	.word	0x00005761
     358:	000020d9 	.word	0x000020d9
     35c:	000059a1 	.word	0x000059a1

00000360 <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     360:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     362:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     366:	460d      	mov	r5, r1
     368:	4c04      	ldr	r4, [pc, #16]	; (37c <getModemCommandData+0x1c>)
     36a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     36e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     372:	6823      	ldr	r3, [r4, #0]
     374:	602b      	str	r3, [r5, #0]
}
     376:	bc30      	pop	{r4, r5}
     378:	4770      	bx	lr
     37a:	bf00      	nop
     37c:	00006f8c 	.word	0x00006f8c

00000380 <buildHttpHeaderWithActiveSessionID>:
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildHttpHeaderWithActiveSessionID(const uint8_t* activeSessionId)
{
	switch (*activeSessionId)
     380:	7803      	ldrb	r3, [r0, #0]
     382:	3b31      	subs	r3, #49	; 0x31
     384:	2b08      	cmp	r3, #8
     386:	d83b      	bhi.n	400 <buildHttpHeaderWithActiveSessionID+0x80>
     388:	e8df f003 	tbb	[pc, r3]
     38c:	17110b05 	.word	0x17110b05
     390:	2f29231d 	.word	0x2f29231d
     394:	35          	.byte	0x35
     395:	00          	.byte	0x00
	{
		case SESSION_ID_1:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '1';
     396:	4b1b      	ldr	r3, [pc, #108]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     398:	2231      	movs	r2, #49	; 0x31
     39a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '1';
     39c:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3a0:	4770      	bx	lr

		case SESSION_ID_2:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '2';
     3a2:	4b18      	ldr	r3, [pc, #96]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3a4:	2232      	movs	r2, #50	; 0x32
     3a6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '2';
     3a8:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3ac:	4770      	bx	lr

		case SESSION_ID_3:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '3';
     3ae:	4b15      	ldr	r3, [pc, #84]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3b0:	2233      	movs	r2, #51	; 0x33
     3b2:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '3';
     3b4:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3b8:	4770      	bx	lr

		case SESSION_ID_4:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '4';
     3ba:	4b12      	ldr	r3, [pc, #72]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3bc:	2234      	movs	r2, #52	; 0x34
     3be:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '4';
     3c0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3c4:	4770      	bx	lr

		case SESSION_ID_5:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '5';
     3c6:	4b0f      	ldr	r3, [pc, #60]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3c8:	2235      	movs	r2, #53	; 0x35
     3ca:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '5';
     3cc:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3d0:	4770      	bx	lr

		case SESSION_ID_6:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '6';
     3d2:	4b0c      	ldr	r3, [pc, #48]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3d4:	2236      	movs	r2, #54	; 0x36
     3d6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '6';
     3d8:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3dc:	4770      	bx	lr

		case SESSION_ID_7:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '7';
     3de:	4b09      	ldr	r3, [pc, #36]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3e0:	2237      	movs	r2, #55	; 0x37
     3e2:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '7';
     3e4:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3e8:	4770      	bx	lr

		case SESSION_ID_8:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '8';
     3ea:	4b06      	ldr	r3, [pc, #24]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3ec:	2238      	movs	r2, #56	; 0x38
     3ee:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '8';
     3f0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     3f4:	4770      	bx	lr

		case SESSION_ID_9:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '9';
     3f6:	4b03      	ldr	r3, [pc, #12]	; (404 <buildHttpHeaderWithActiveSessionID+0x84>)
     3f8:	2239      	movs	r2, #57	; 0x39
     3fa:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '9';
     3fc:	f883 2020 	strb.w	r2, [r3, #32]
     400:	4770      	bx	lr
     402:	bf00      	nop
     404:	20000000 	.word	0x20000000

00000408 <buildDataPacketsToServer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildDataPacketsToServer(void)
{
     408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	strncpy(kHttpGetCompleteData,kHttpGetString,15);
     40a:	4c0f      	ldr	r4, [pc, #60]	; (448 <buildDataPacketsToServer+0x40>)
     40c:	220f      	movs	r2, #15
     40e:	490f      	ldr	r1, [pc, #60]	; (44c <buildDataPacketsToServer+0x44>)
     410:	4620      	mov	r0, r4
     412:	4b0f      	ldr	r3, [pc, #60]	; (450 <buildDataPacketsToServer+0x48>)
     414:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
     416:	4620      	mov	r0, r4
     418:	4b0e      	ldr	r3, [pc, #56]	; (454 <buildDataPacketsToServer+0x4c>)
     41a:	4798      	blx	r3
     41c:	4d0e      	ldr	r5, [pc, #56]	; (458 <buildDataPacketsToServer+0x50>)
     41e:	4404      	add	r4, r0
     420:	f105 0720 	add.w	r7, r5, #32
     424:	462e      	mov	r6, r5
     426:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     428:	6020      	str	r0, [r4, #0]
     42a:	6061      	str	r1, [r4, #4]
     42c:	60a2      	str	r2, [r4, #8]
     42e:	60e3      	str	r3, [r4, #12]
     430:	4635      	mov	r5, r6
     432:	3410      	adds	r4, #16
     434:	42be      	cmp	r6, r7
     436:	d1f5      	bne.n	424 <buildDataPacketsToServer+0x1c>
     438:	cd07      	ldmia	r5!, {r0, r1, r2}
     43a:	6020      	str	r0, [r4, #0]
     43c:	6061      	str	r1, [r4, #4]
     43e:	60a2      	str	r2, [r4, #8]
     440:	782b      	ldrb	r3, [r5, #0]
     442:	7323      	strb	r3, [r4, #12]
     444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     446:	bf00      	nop
     448:	200001ac 	.word	0x200001ac
     44c:	20000014 	.word	0x20000014
     450:	00006805 	.word	0x00006805
     454:	000067d1 	.word	0x000067d1
     458:	0000743c 	.word	0x0000743c

0000045c <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
     45c:	b5f0      	push	{r4, r5, r6, r7, lr}
     45e:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
     460:	a901      	add	r1, sp, #4
     462:	4b2d      	ldr	r3, [pc, #180]	; (518 <mdmParser_solicitedCmdParser+0xbc>)
     464:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     466:	f89d 700c 	ldrb.w	r7, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
     46a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
     46e:	4b2b      	ldr	r3, [pc, #172]	; (51c <mdmParser_solicitedCmdParser+0xc0>)
     470:	4798      	blx	r3

	if(responseBuffer != NULL)
     472:	2800      	cmp	r0, #0
     474:	d04a      	beq.n	50c <mdmParser_solicitedCmdParser+0xb0>
     476:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
     478:	f8bd 1014 	ldrh.w	r1, [sp, #20]
     47c:	4b28      	ldr	r3, [pc, #160]	; (520 <mdmParser_solicitedCmdParser+0xc4>)
     47e:	4798      	blx	r3

		if(readStatus != false)
     480:	4606      	mov	r6, r0
     482:	2800      	cmp	r0, #0
     484:	d03e      	beq.n	504 <mdmParser_solicitedCmdParser+0xa8>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
     486:	f89d 200c 	ldrb.w	r2, [sp, #12]
     48a:	4621      	mov	r1, r4
     48c:	9802      	ldr	r0, [sp, #8]
     48e:	4b25      	ldr	r3, [pc, #148]	; (524 <mdmParser_solicitedCmdParser+0xc8>)
     490:	4798      	blx	r3
     492:	bb58      	cbnz	r0, 4ec <mdmParser_solicitedCmdParser+0x90>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
     494:	f8bd 000e 	ldrh.w	r0, [sp, #14]
     498:	3001      	adds	r0, #1
     49a:	4b20      	ldr	r3, [pc, #128]	; (51c <mdmParser_solicitedCmdParser+0xc0>)
     49c:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
     49e:	4605      	mov	r5, r0
     4a0:	b1f8      	cbz	r0, 4e2 <mdmParser_solicitedCmdParser+0x86>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
     4a2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
     4a6:	b1d3      	cbz	r3, 4de <mdmParser_solicitedCmdParser+0x82>
     4a8:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     4aa:	1cb9      	adds	r1, r7, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
     4ac:	b2c9      	uxtb	r1, r1
     4ae:	18e2      	adds	r2, r4, r3
     4b0:	5c52      	ldrb	r2, [r2, r1]
     4b2:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
     4b4:	3301      	adds	r3, #1
     4b6:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
     4b8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     4bc:	429a      	cmp	r2, r3
     4be:	d8f6      	bhi.n	4ae <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
     4c0:	2200      	movs	r2, #0
     4c2:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt+1);
     4c4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     4c8:	3201      	adds	r2, #1
     4ca:	b292      	uxth	r2, r2
     4cc:	4629      	mov	r1, r5
     4ce:	f89d 0004 	ldrb.w	r0, [sp, #4]
     4d2:	9b04      	ldr	r3, [sp, #16]
     4d4:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
     4d6:	4628      	mov	r0, r5
     4d8:	4b13      	ldr	r3, [pc, #76]	; (528 <mdmParser_solicitedCmdParser+0xcc>)
     4da:	4798      	blx	r3
     4dc:	e00a      	b.n	4f4 <mdmParser_solicitedCmdParser+0x98>
					while(parseCnt < cmdData.validDataCnt)
     4de:	2300      	movs	r3, #0
     4e0:	e7ee      	b.n	4c0 <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
     4e2:	4812      	ldr	r0, [pc, #72]	; (52c <mdmParser_solicitedCmdParser+0xd0>)
     4e4:	4b12      	ldr	r3, [pc, #72]	; (530 <mdmParser_solicitedCmdParser+0xd4>)
     4e6:	4798      	blx	r3
	bool parseStatus = false;
     4e8:	2600      	movs	r6, #0
     4ea:	e003      	b.n	4f4 <mdmParser_solicitedCmdParser+0x98>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
     4ec:	4811      	ldr	r0, [pc, #68]	; (534 <mdmParser_solicitedCmdParser+0xd8>)
     4ee:	4b10      	ldr	r3, [pc, #64]	; (530 <mdmParser_solicitedCmdParser+0xd4>)
     4f0:	4798      	blx	r3
				parseStatus = false;
     4f2:	2600      	movs	r6, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
     4f4:	4620      	mov	r0, r4
     4f6:	4b0c      	ldr	r3, [pc, #48]	; (528 <mdmParser_solicitedCmdParser+0xcc>)
     4f8:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
     4fa:	4b0f      	ldr	r3, [pc, #60]	; (538 <mdmParser_solicitedCmdParser+0xdc>)
     4fc:	4798      	blx	r3

	return parseStatus;
}
     4fe:	4630      	mov	r0, r6
     500:	b007      	add	sp, #28
     502:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
     504:	480d      	ldr	r0, [pc, #52]	; (53c <mdmParser_solicitedCmdParser+0xe0>)
     506:	4b0a      	ldr	r3, [pc, #40]	; (530 <mdmParser_solicitedCmdParser+0xd4>)
     508:	4798      	blx	r3
     50a:	e7f3      	b.n	4f4 <mdmParser_solicitedCmdParser+0x98>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
     50c:	480c      	ldr	r0, [pc, #48]	; (540 <mdmParser_solicitedCmdParser+0xe4>)
     50e:	4b08      	ldr	r3, [pc, #32]	; (530 <mdmParser_solicitedCmdParser+0xd4>)
     510:	4798      	blx	r3
	bool parseStatus = false;
     512:	2600      	movs	r6, #0
     514:	e7f1      	b.n	4fa <mdmParser_solicitedCmdParser+0x9e>
     516:	bf00      	nop
     518:	00000361 	.word	0x00000361
     51c:	00004915 	.word	0x00004915
     520:	00001725 	.word	0x00001725
     524:	000067e1 	.word	0x000067e1
     528:	000049e9 	.word	0x000049e9
     52c:	00007648 	.word	0x00007648
     530:	00001f55 	.word	0x00001f55
     534:	0000767c 	.word	0x0000767c
     538:	00001779 	.word	0x00001779
     53c:	000076b8 	.word	0x000076b8
     540:	000076fc 	.word	0x000076fc

00000544 <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     544:	4b01      	ldr	r3, [pc, #4]	; (54c <mdmParser_SetLastCmdProcessed+0x8>)
     546:	7018      	strb	r0, [r3, #0]
     548:	4770      	bx	lr
     54a:	bf00      	nop
     54c:	20000023 	.word	0x20000023

00000550 <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     550:	4b01      	ldr	r3, [pc, #4]	; (558 <mdmParser_SetLastSentAtCommand+0x8>)
     552:	7018      	strb	r0, [r3, #0]
     554:	4770      	bx	lr
     556:	bf00      	nop
     558:	200001e8 	.word	0x200001e8

0000055c <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     55c:	4b01      	ldr	r3, [pc, #4]	; (564 <mdmParser_GetLastSentAtCommand+0x8>)
     55e:	7818      	ldrb	r0, [r3, #0]
     560:	4770      	bx	lr
     562:	bf00      	nop
     564:	200001e8 	.word	0x200001e8

00000568 <getCloseActiveSessionCmd>:
**===========================================================================*/
static AT_CMD_TYPE getCloseActiveSessionCmd(uint8_t sessionID)
{
    AT_CMD_TYPE sessionCloseCmd;

    switch(sessionID)
     568:	3801      	subs	r0, #1
     56a:	2809      	cmp	r0, #9
     56c:	d81a      	bhi.n	5a4 <getCloseActiveSessionCmd+0x3c>
     56e:	e8df f000 	tbb	[pc, r0]
     572:	0705      	.short	0x0705
     574:	0f0d0b09 	.word	0x0f0d0b09
     578:	17151311 	.word	0x17151311
    {
        case 1:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_1;
     57c:	200a      	movs	r0, #10
     57e:	4770      	bx	lr
        }
        break;

        case 2:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_2;
     580:	200b      	movs	r0, #11
        }
        break;
     582:	4770      	bx	lr

        case 3:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_3;
     584:	200c      	movs	r0, #12
        }
        break;
     586:	4770      	bx	lr

        case 4:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_4;
     588:	200d      	movs	r0, #13
        }
        break;
     58a:	4770      	bx	lr

        case 5:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_5;
     58c:	200e      	movs	r0, #14
        }
        break;
     58e:	4770      	bx	lr

        case 6:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_6;
     590:	200f      	movs	r0, #15
        }
        break;
     592:	4770      	bx	lr

        case 7:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_7;
     594:	2010      	movs	r0, #16
        }
        break;
     596:	4770      	bx	lr

        case 8:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_8;
     598:	2011      	movs	r0, #17
        }
        break;
     59a:	4770      	bx	lr

        case 9:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_9;
     59c:	2012      	movs	r0, #18
        }
        break;
     59e:	4770      	bx	lr

        case 10:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_10;
     5a0:	2013      	movs	r0, #19
        }
        break;
     5a2:	4770      	bx	lr
    switch(sessionID)
     5a4:	2000      	movs	r0, #0
        default:
        break;
    }
    
    return sessionCloseCmd;
}
     5a6:	4770      	bx	lr

000005a8 <validateCommonCommandResponse>:
{
     5a8:	b508      	push	{r3, lr}
    if(0==memcmp(response,"OK",2))
     5aa:	2202      	movs	r2, #2
     5ac:	4903      	ldr	r1, [pc, #12]	; (5bc <validateCommonCommandResponse+0x14>)
     5ae:	4b04      	ldr	r3, [pc, #16]	; (5c0 <validateCommonCommandResponse+0x18>)
     5b0:	4798      	blx	r3
}
     5b2:	fab0 f080 	clz	r0, r0
     5b6:	0940      	lsrs	r0, r0, #5
     5b8:	bd08      	pop	{r3, pc}
     5ba:	bf00      	nop
     5bc:	00007734 	.word	0x00007734
     5c0:	00006589 	.word	0x00006589

000005c4 <MdmConnect_HttpConnectionInit>:
    gHttpConnectionState = MDM_HTTP_DISCONNECTED;
     5c4:	4b07      	ldr	r3, [pc, #28]	; (5e4 <MdmConnect_HttpConnectionInit+0x20>)
     5c6:	2200      	movs	r2, #0
     5c8:	701a      	strb	r2, [r3, #0]
    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     5ca:	705a      	strb	r2, [r3, #1]
    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     5cc:	709a      	strb	r2, [r3, #2]
    gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
     5ce:	70da      	strb	r2, [r3, #3]
    gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
     5d0:	711a      	strb	r2, [r3, #4]
    sessionIdCount = 5;
     5d2:	2105      	movs	r1, #5
     5d4:	7159      	strb	r1, [r3, #5]
    ConnectionResponse.atCmd = CMD_AT_MAX;
     5d6:	721a      	strb	r2, [r3, #8]
    ConnectionResponse.length = 0;
     5d8:	815a      	strh	r2, [r3, #10]
    ConnectionResponse.response = NULL;
     5da:	60da      	str	r2, [r3, #12]
    currentSessionId = '0';
     5dc:	2230      	movs	r2, #48	; 0x30
     5de:	741a      	strb	r2, [r3, #16]
     5e0:	4770      	bx	lr
     5e2:	bf00      	nop
     5e4:	200001ec 	.word	0x200001ec

000005e8 <MdmCnct_ConnectInProgressSubStateMachine>:
{
     5e8:	b570      	push	{r4, r5, r6, lr}
     5ea:	b082      	sub	sp, #8
    switch (gHttpConnectionInProgressSubstate)
     5ec:	4b86      	ldr	r3, [pc, #536]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     5ee:	785b      	ldrb	r3, [r3, #1]
     5f0:	2b07      	cmp	r3, #7
     5f2:	f200 8092 	bhi.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
     5f6:	e8df f013 	tbh	[pc, r3, lsl #1]
     5fa:	0008      	.short	0x0008
     5fc:	0137008b 	.word	0x0137008b
     600:	022701bb 	.word	0x022701bb
     604:	033002c4 	.word	0x033002c4
     608:	0408      	.short	0x0408
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     60a:	4b7f      	ldr	r3, [pc, #508]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     60c:	789b      	ldrb	r3, [r3, #2]
     60e:	2b00      	cmp	r3, #0
     610:	d14d      	bne.n	6ae <MdmCnct_ConnectInProgressSubStateMachine+0xc6>
                if(sessionIdCount > 0)
     612:	4b7d      	ldr	r3, [pc, #500]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     614:	795b      	ldrb	r3, [r3, #5]
     616:	2b00      	cmp	r3, #0
     618:	d03e      	beq.n	698 <MdmCnct_ConnectInProgressSubStateMachine+0xb0>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     61a:	4b7c      	ldr	r3, [pc, #496]	; (80c <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     61c:	6818      	ldr	r0, [r3, #0]
     61e:	4b7c      	ldr	r3, [pc, #496]	; (810 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
     620:	4798      	blx	r3
     622:	2800      	cmp	r0, #0
     624:	d134      	bne.n	690 <MdmCnct_ConnectInProgressSubStateMachine+0xa8>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     626:	2100      	movs	r1, #0
     628:	4b7a      	ldr	r3, [pc, #488]	; (814 <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
     62a:	6818      	ldr	r0, [r3, #0]
     62c:	4b7a      	ldr	r3, [pc, #488]	; (818 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     62e:	4798      	blx	r3
     630:	2801      	cmp	r0, #1
     632:	d003      	beq.n	63c <MdmCnct_ConnectInProgressSubStateMachine+0x54>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     634:	4879      	ldr	r0, [pc, #484]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
     636:	4b7a      	ldr	r3, [pc, #488]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     638:	4798      	blx	r3
     63a:	e06e      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     63c:	2301      	movs	r3, #1
     63e:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
     642:	4b71      	ldr	r3, [pc, #452]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     644:	7958      	ldrb	r0, [r3, #5]
     646:	4b77      	ldr	r3, [pc, #476]	; (824 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     648:	4798      	blx	r3
     64a:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
     64e:	2300      	movs	r3, #0
     650:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     652:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     656:	4669      	mov	r1, sp
     658:	486c      	ldr	r0, [pc, #432]	; (80c <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     65a:	6800      	ldr	r0, [r0, #0]
     65c:	4c72      	ldr	r4, [pc, #456]	; (828 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     65e:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
     660:	2801      	cmp	r0, #1
     662:	d007      	beq.n	674 <MdmCnct_ConnectInProgressSubStateMachine+0x8c>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     664:	4871      	ldr	r0, [pc, #452]	; (82c <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     666:	4b6e      	ldr	r3, [pc, #440]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     668:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
     66a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     66e:	4b70      	ldr	r3, [pc, #448]	; (830 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     670:	4798      	blx	r3
     672:	e052      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
     674:	2300      	movs	r3, #0
     676:	461a      	mov	r2, r3
     678:	4619      	mov	r1, r3
     67a:	4866      	ldr	r0, [pc, #408]	; (814 <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
     67c:	6800      	ldr	r0, [r0, #0]
     67e:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     680:	2201      	movs	r2, #1
     682:	4b61      	ldr	r3, [pc, #388]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     684:	709a      	strb	r2, [r3, #2]
                                vTaskDelay(TransmitDelayMs);
     686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     68a:	4b69      	ldr	r3, [pc, #420]	; (830 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     68c:	4798      	blx	r3
     68e:	e044      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Transmit Queue is not empty");
     690:	4868      	ldr	r0, [pc, #416]	; (834 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     692:	4b63      	ldr	r3, [pc, #396]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     694:	4798      	blx	r3
     696:	e040      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("No More Active Connections to close");
     698:	4867      	ldr	r0, [pc, #412]	; (838 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     69a:	4c61      	ldr	r4, [pc, #388]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     69c:	47a0      	blx	r4
                    DEBUG_PRINT("\r\n");
     69e:	4867      	ldr	r0, [pc, #412]	; (83c <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
     6a0:	47a0      	blx	r4
                    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
     6a2:	4b59      	ldr	r3, [pc, #356]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     6a4:	2201      	movs	r2, #1
     6a6:	705a      	strb	r2, [r3, #1]
                    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     6a8:	2200      	movs	r2, #0
     6aa:	709a      	strb	r2, [r3, #2]
     6ac:	e035      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     6ae:	2b01      	cmp	r3, #1
     6b0:	d133      	bne.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     6b2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     6b6:	4962      	ldr	r1, [pc, #392]	; (840 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     6b8:	4b62      	ldr	r3, [pc, #392]	; (844 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
     6ba:	6818      	ldr	r0, [r3, #0]
     6bc:	4b62      	ldr	r3, [pc, #392]	; (848 <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
     6be:	4798      	blx	r3
     6c0:	2801      	cmp	r0, #1
     6c2:	d12a      	bne.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
     6c4:	4b50      	ldr	r3, [pc, #320]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     6c6:	7a1d      	ldrb	r5, [r3, #8]
     6c8:	795c      	ldrb	r4, [r3, #5]
     6ca:	4620      	mov	r0, r4
     6cc:	4b55      	ldr	r3, [pc, #340]	; (824 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     6ce:	4798      	blx	r3
     6d0:	4285      	cmp	r5, r0
     6d2:	d113      	bne.n	6fc <MdmCnct_ConnectInProgressSubStateMachine+0x114>
                        if(sessionIdCount > 0)
     6d4:	b14c      	cbz	r4, 6ea <MdmCnct_ConnectInProgressSubStateMachine+0x102>
                            sessionIdCount--;
     6d6:	4b4c      	ldr	r3, [pc, #304]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     6d8:	3c01      	subs	r4, #1
     6da:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     6dc:	2200      	movs	r2, #0
     6de:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     6e0:	4b49      	ldr	r3, [pc, #292]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     6e2:	68d8      	ldr	r0, [r3, #12]
     6e4:	4b59      	ldr	r3, [pc, #356]	; (84c <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     6e6:	4798      	blx	r3
     6e8:	e017      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
     6ea:	4b47      	ldr	r3, [pc, #284]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     6ec:	2201      	movs	r2, #1
     6ee:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     6f0:	2200      	movs	r2, #0
     6f2:	709a      	strb	r2, [r3, #2]
                            DEBUG_PRINT("Closed All Active Connections");
     6f4:	4856      	ldr	r0, [pc, #344]	; (850 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     6f6:	4b4a      	ldr	r3, [pc, #296]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     6f8:	4798      	blx	r3
     6fa:	e7f1      	b.n	6e0 <MdmCnct_ConnectInProgressSubStateMachine+0xf8>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     6fc:	4855      	ldr	r0, [pc, #340]	; (854 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     6fe:	4b48      	ldr	r3, [pc, #288]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     700:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     702:	4b41      	ldr	r3, [pc, #260]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     704:	2200      	movs	r2, #0
     706:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     708:	68d8      	ldr	r0, [r3, #12]
     70a:	4b50      	ldr	r3, [pc, #320]	; (84c <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     70c:	4798      	blx	r3
     70e:	e004      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     710:	4b3d      	ldr	r3, [pc, #244]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     712:	789b      	ldrb	r3, [r3, #2]
     714:	b11b      	cbz	r3, 71e <MdmCnct_ConnectInProgressSubStateMachine+0x136>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     716:	2b01      	cmp	r3, #1
     718:	d03e      	beq.n	798 <MdmCnct_ConnectInProgressSubStateMachine+0x1b0>
}
     71a:	b002      	add	sp, #8
     71c:	bd70      	pop	{r4, r5, r6, pc}
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     71e:	4b3b      	ldr	r3, [pc, #236]	; (80c <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     720:	6818      	ldr	r0, [r3, #0]
     722:	4b3b      	ldr	r3, [pc, #236]	; (810 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
     724:	4798      	blx	r3
     726:	2800      	cmp	r0, #0
     728:	d132      	bne.n	790 <MdmCnct_ConnectInProgressSubStateMachine+0x1a8>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     72a:	2100      	movs	r1, #0
     72c:	4b39      	ldr	r3, [pc, #228]	; (814 <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
     72e:	6818      	ldr	r0, [r3, #0]
     730:	4b39      	ldr	r3, [pc, #228]	; (818 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     732:	4798      	blx	r3
     734:	2801      	cmp	r0, #1
     736:	d003      	beq.n	740 <MdmCnct_ConnectInProgressSubStateMachine+0x158>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     738:	4838      	ldr	r0, [pc, #224]	; (81c <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
     73a:	4b39      	ldr	r3, [pc, #228]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     73c:	4798      	blx	r3
     73e:	e7ec      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     740:	2301      	movs	r3, #1
     742:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
     746:	231a      	movs	r3, #26
     748:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     74c:	2300      	movs	r3, #0
     74e:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     750:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     754:	4669      	mov	r1, sp
     756:	482d      	ldr	r0, [pc, #180]	; (80c <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     758:	6800      	ldr	r0, [r0, #0]
     75a:	4c33      	ldr	r4, [pc, #204]	; (828 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     75c:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     75e:	2801      	cmp	r0, #1
     760:	d007      	beq.n	772 <MdmCnct_ConnectInProgressSubStateMachine+0x18a>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     762:	4832      	ldr	r0, [pc, #200]	; (82c <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     764:	4b2e      	ldr	r3, [pc, #184]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     766:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     768:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     76c:	4b30      	ldr	r3, [pc, #192]	; (830 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     76e:	4798      	blx	r3
     770:	e7d3      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     772:	2300      	movs	r3, #0
     774:	461a      	mov	r2, r3
     776:	4619      	mov	r1, r3
     778:	4826      	ldr	r0, [pc, #152]	; (814 <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
     77a:	6800      	ldr	r0, [r0, #0]
     77c:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     77e:	4b22      	ldr	r3, [pc, #136]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     780:	2201      	movs	r2, #1
     782:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
     784:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
     786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     78a:	4b29      	ldr	r3, [pc, #164]	; (830 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     78c:	4798      	blx	r3
     78e:	e7c4      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     790:	4828      	ldr	r0, [pc, #160]	; (834 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     792:	4b23      	ldr	r3, [pc, #140]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     794:	4798      	blx	r3
     796:	e7c0      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     798:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     79c:	4928      	ldr	r1, [pc, #160]	; (840 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     79e:	4b29      	ldr	r3, [pc, #164]	; (844 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
     7a0:	6818      	ldr	r0, [r3, #0]
     7a2:	4b29      	ldr	r3, [pc, #164]	; (848 <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
     7a4:	4798      	blx	r3
     7a6:	2801      	cmp	r0, #1
     7a8:	d1b7      	bne.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
     7aa:	4b17      	ldr	r3, [pc, #92]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     7ac:	7a1b      	ldrb	r3, [r3, #8]
     7ae:	2b1a      	cmp	r3, #26
     7b0:	d120      	bne.n	7f4 <MdmCnct_ConnectInProgressSubStateMachine+0x20c>
                    	if(false != validateCommonCommandResponse(ConnectionResponse.response))
     7b2:	4b15      	ldr	r3, [pc, #84]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     7b4:	68d8      	ldr	r0, [r3, #12]
     7b6:	4b28      	ldr	r3, [pc, #160]	; (858 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     7b8:	4798      	blx	r3
     7ba:	b190      	cbz	r0, 7e2 <MdmCnct_ConnectInProgressSubStateMachine+0x1fa>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
     7bc:	4827      	ldr	r0, [pc, #156]	; (85c <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
     7be:	4d18      	ldr	r5, [pc, #96]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     7c0:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     7c2:	4c11      	ldr	r4, [pc, #68]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     7c4:	8961      	ldrh	r1, [r4, #10]
     7c6:	68e0      	ldr	r0, [r4, #12]
     7c8:	4b25      	ldr	r3, [pc, #148]	; (860 <MdmCnct_ConnectInProgressSubStateMachine+0x278>)
     7ca:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     7cc:	481b      	ldr	r0, [pc, #108]	; (83c <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
     7ce:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     7d0:	2300      	movs	r3, #0
     7d2:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
     7d4:	2302      	movs	r3, #2
     7d6:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
     7d8:	4b0b      	ldr	r3, [pc, #44]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     7da:	68d8      	ldr	r0, [r3, #12]
     7dc:	4b1b      	ldr	r3, [pc, #108]	; (84c <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     7de:	4798      	blx	r3
     7e0:	e79b      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    		DEBUG_PRINT("Expected Response Not Received. Retrying...");
     7e2:	4820      	ldr	r0, [pc, #128]	; (864 <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
     7e4:	4c0e      	ldr	r4, [pc, #56]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     7e6:	47a0      	blx	r4
                    		DEBUG_PRINT("\r\n");
     7e8:	4814      	ldr	r0, [pc, #80]	; (83c <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
     7ea:	47a0      	blx	r4
                    		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     7ec:	2200      	movs	r2, #0
     7ee:	4b06      	ldr	r3, [pc, #24]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     7f0:	709a      	strb	r2, [r3, #2]
     7f2:	e7f1      	b.n	7d8 <MdmCnct_ConnectInProgressSubStateMachine+0x1f0>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     7f4:	4817      	ldr	r0, [pc, #92]	; (854 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     7f6:	4b0a      	ldr	r3, [pc, #40]	; (820 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     7f8:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     7fa:	4b03      	ldr	r3, [pc, #12]	; (808 <MdmCnct_ConnectInProgressSubStateMachine+0x220>)
     7fc:	2200      	movs	r2, #0
     7fe:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     800:	68d8      	ldr	r0, [r3, #12]
     802:	4b12      	ldr	r3, [pc, #72]	; (84c <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     804:	4798      	blx	r3
     806:	e788      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
     808:	200001ec 	.word	0x200001ec
     80c:	20003480 	.word	0x20003480
     810:	00005389 	.word	0x00005389
     814:	2000348c 	.word	0x2000348c
     818:	000051a9 	.word	0x000051a9
     81c:	0000776c 	.word	0x0000776c
     820:	00001f55 	.word	0x00001f55
     824:	00000569 	.word	0x00000569
     828:	00004d11 	.word	0x00004d11
     82c:	00007738 	.word	0x00007738
     830:	00005a4d 	.word	0x00005a4d
     834:	00007798 	.word	0x00007798
     838:	000077b4 	.word	0x000077b4
     83c:	00007f40 	.word	0x00007f40
     840:	200001f4 	.word	0x200001f4
     844:	20003460 	.word	0x20003460
     848:	00005021 	.word	0x00005021
     84c:	000049e9 	.word	0x000049e9
     850:	000077d8 	.word	0x000077d8
     854:	000077f8 	.word	0x000077f8
     858:	000005a9 	.word	0x000005a9
     85c:	0000782c 	.word	0x0000782c
     860:	00001f11 	.word	0x00001f11
     864:	0000784c 	.word	0x0000784c
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     868:	4b8f      	ldr	r3, [pc, #572]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     86a:	789b      	ldrb	r3, [r3, #2]
     86c:	2b00      	cmp	r3, #0
     86e:	d02e      	beq.n	8ce <MdmCnct_ConnectInProgressSubStateMachine+0x2e6>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     870:	2b01      	cmp	r3, #1
     872:	f47f af52 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     876:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     87a:	498c      	ldr	r1, [pc, #560]	; (aac <MdmCnct_ConnectInProgressSubStateMachine+0x4c4>)
     87c:	4b8c      	ldr	r3, [pc, #560]	; (ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x4c8>)
     87e:	6818      	ldr	r0, [r3, #0]
     880:	4b8c      	ldr	r3, [pc, #560]	; (ab4 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     882:	4798      	blx	r3
     884:	2801      	cmp	r0, #1
     886:	f47f af48 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
     88a:	4b87      	ldr	r3, [pc, #540]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     88c:	7a1b      	ldrb	r3, [r3, #8]
     88e:	2b1b      	cmp	r3, #27
     890:	d164      	bne.n	95c <MdmCnct_ConnectInProgressSubStateMachine+0x374>
                    	if(false != validateCommonCommandResponse(ConnectionResponse.response))
     892:	4b85      	ldr	r3, [pc, #532]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     894:	68d8      	ldr	r0, [r3, #12]
     896:	4b88      	ldr	r3, [pc, #544]	; (ab8 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
     898:	4798      	blx	r3
     89a:	2800      	cmp	r0, #0
     89c:	d055      	beq.n	94a <MdmCnct_ConnectInProgressSubStateMachine+0x362>
                            DEBUG_PRINT("Detached the PDP PS");
     89e:	4887      	ldr	r0, [pc, #540]	; (abc <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
     8a0:	4d87      	ldr	r5, [pc, #540]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     8a2:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     8a4:	4c80      	ldr	r4, [pc, #512]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     8a6:	8961      	ldrh	r1, [r4, #10]
     8a8:	68e0      	ldr	r0, [r4, #12]
     8aa:	4b86      	ldr	r3, [pc, #536]	; (ac4 <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
     8ac:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     8ae:	4e86      	ldr	r6, [pc, #536]	; (ac8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e0>)
     8b0:	4630      	mov	r0, r6
     8b2:	47a8      	blx	r5
                            DEBUG_PRINT("Deleted all of the previous connection configurations");
     8b4:	4885      	ldr	r0, [pc, #532]	; (acc <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     8b6:	47a8      	blx	r5
                            DEBUG_PRINT("\r\n");
     8b8:	4630      	mov	r0, r6
     8ba:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     8bc:	2300      	movs	r3, #0
     8be:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     8c0:	2303      	movs	r3, #3
     8c2:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
     8c4:	4b78      	ldr	r3, [pc, #480]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     8c6:	68d8      	ldr	r0, [r3, #12]
     8c8:	4b81      	ldr	r3, [pc, #516]	; (ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     8ca:	4798      	blx	r3
     8cc:	e725      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     8ce:	4b81      	ldr	r3, [pc, #516]	; (ad4 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     8d0:	6818      	ldr	r0, [r3, #0]
     8d2:	4b81      	ldr	r3, [pc, #516]	; (ad8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
     8d4:	4798      	blx	r3
     8d6:	2800      	cmp	r0, #0
     8d8:	d133      	bne.n	942 <MdmCnct_ConnectInProgressSubStateMachine+0x35a>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     8da:	2100      	movs	r1, #0
     8dc:	4b7f      	ldr	r3, [pc, #508]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     8de:	6818      	ldr	r0, [r3, #0]
     8e0:	4b7f      	ldr	r3, [pc, #508]	; (ae0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     8e2:	4798      	blx	r3
     8e4:	2801      	cmp	r0, #1
     8e6:	d003      	beq.n	8f0 <MdmCnct_ConnectInProgressSubStateMachine+0x308>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     8e8:	487e      	ldr	r0, [pc, #504]	; (ae4 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     8ea:	4b75      	ldr	r3, [pc, #468]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     8ec:	4798      	blx	r3
     8ee:	e714      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     8f0:	2301      	movs	r3, #1
     8f2:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
     8f6:	231b      	movs	r3, #27
     8f8:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     8fc:	2300      	movs	r3, #0
     8fe:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     900:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     904:	4669      	mov	r1, sp
     906:	4873      	ldr	r0, [pc, #460]	; (ad4 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     908:	6800      	ldr	r0, [r0, #0]
     90a:	4c77      	ldr	r4, [pc, #476]	; (ae8 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     90c:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     90e:	2801      	cmp	r0, #1
     910:	d007      	beq.n	922 <MdmCnct_ConnectInProgressSubStateMachine+0x33a>
                            DEBUG_PRINT("Failed to sent the PS Detach request to Tx Task");
     912:	4876      	ldr	r0, [pc, #472]	; (aec <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     914:	4b6a      	ldr	r3, [pc, #424]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     916:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     918:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     91c:	4b74      	ldr	r3, [pc, #464]	; (af0 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     91e:	4798      	blx	r3
     920:	e6fb      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     922:	2300      	movs	r3, #0
     924:	461a      	mov	r2, r3
     926:	4619      	mov	r1, r3
     928:	486c      	ldr	r0, [pc, #432]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     92a:	6800      	ldr	r0, [r0, #0]
     92c:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     92e:	4b5e      	ldr	r3, [pc, #376]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     930:	2201      	movs	r2, #1
     932:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
     934:	2202      	movs	r2, #2
     936:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
     938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     93c:	4b6c      	ldr	r3, [pc, #432]	; (af0 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     93e:	4798      	blx	r3
     940:	e6eb      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     942:	486c      	ldr	r0, [pc, #432]	; (af4 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     944:	4b5e      	ldr	r3, [pc, #376]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     946:	4798      	blx	r3
     948:	e6e7      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    		DEBUG_PRINT("Expected Response Not Received. Retrying...");
     94a:	486b      	ldr	r0, [pc, #428]	; (af8 <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     94c:	4c5c      	ldr	r4, [pc, #368]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     94e:	47a0      	blx	r4
                    		DEBUG_PRINT("\r\n");
     950:	485d      	ldr	r0, [pc, #372]	; (ac8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e0>)
     952:	47a0      	blx	r4
                    		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     954:	2200      	movs	r2, #0
     956:	4b54      	ldr	r3, [pc, #336]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     958:	709a      	strb	r2, [r3, #2]
     95a:	e7b3      	b.n	8c4 <MdmCnct_ConnectInProgressSubStateMachine+0x2dc>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     95c:	4867      	ldr	r0, [pc, #412]	; (afc <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     95e:	4b58      	ldr	r3, [pc, #352]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     960:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     962:	4b51      	ldr	r3, [pc, #324]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     964:	2200      	movs	r2, #0
     966:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     968:	68d8      	ldr	r0, [r3, #12]
     96a:	4b59      	ldr	r3, [pc, #356]	; (ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     96c:	4798      	blx	r3
     96e:	e6d4      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     970:	4b4d      	ldr	r3, [pc, #308]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     972:	789b      	ldrb	r3, [r3, #2]
     974:	b1d3      	cbz	r3, 9ac <MdmCnct_ConnectInProgressSubStateMachine+0x3c4>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     976:	2b01      	cmp	r3, #1
     978:	f47f aecf 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     97c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     980:	494a      	ldr	r1, [pc, #296]	; (aac <MdmCnct_ConnectInProgressSubStateMachine+0x4c4>)
     982:	4b4b      	ldr	r3, [pc, #300]	; (ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x4c8>)
     984:	6818      	ldr	r0, [r3, #0]
     986:	4b4b      	ldr	r3, [pc, #300]	; (ab4 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     988:	4798      	blx	r3
     98a:	2801      	cmp	r0, #1
     98c:	f47f aec5 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KPATTERN)
     990:	4b45      	ldr	r3, [pc, #276]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     992:	7a1b      	ldrb	r3, [r3, #8]
     994:	2b14      	cmp	r3, #20
     996:	d045      	beq.n	a24 <MdmCnct_ConnectInProgressSubStateMachine+0x43c>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     998:	4858      	ldr	r0, [pc, #352]	; (afc <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     99a:	4b49      	ldr	r3, [pc, #292]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     99c:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     99e:	4b42      	ldr	r3, [pc, #264]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     9a0:	2200      	movs	r2, #0
     9a2:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     9a4:	68d8      	ldr	r0, [r3, #12]
     9a6:	4b4a      	ldr	r3, [pc, #296]	; (ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     9a8:	4798      	blx	r3
     9aa:	e6b6      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     9ac:	4b49      	ldr	r3, [pc, #292]	; (ad4 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     9ae:	6818      	ldr	r0, [r3, #0]
     9b0:	4b49      	ldr	r3, [pc, #292]	; (ad8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
     9b2:	4798      	blx	r3
     9b4:	2800      	cmp	r0, #0
     9b6:	d131      	bne.n	a1c <MdmCnct_ConnectInProgressSubStateMachine+0x434>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     9b8:	2100      	movs	r1, #0
     9ba:	4b48      	ldr	r3, [pc, #288]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     9bc:	6818      	ldr	r0, [r3, #0]
     9be:	4b48      	ldr	r3, [pc, #288]	; (ae0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     9c0:	4798      	blx	r3
     9c2:	2801      	cmp	r0, #1
     9c4:	d003      	beq.n	9ce <MdmCnct_ConnectInProgressSubStateMachine+0x3e6>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     9c6:	4847      	ldr	r0, [pc, #284]	; (ae4 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     9c8:	4b3d      	ldr	r3, [pc, #244]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     9ca:	4798      	blx	r3
     9cc:	e6a5      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     9ce:	2301      	movs	r3, #1
     9d0:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KPATTERN;
     9d4:	2314      	movs	r3, #20
     9d6:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     9da:	2300      	movs	r3, #0
     9dc:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     9de:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     9e2:	4669      	mov	r1, sp
     9e4:	483b      	ldr	r0, [pc, #236]	; (ad4 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     9e6:	6800      	ldr	r0, [r0, #0]
     9e8:	4c3f      	ldr	r4, [pc, #252]	; (ae8 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     9ea:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     9ec:	2801      	cmp	r0, #1
     9ee:	d007      	beq.n	a00 <MdmCnct_ConnectInProgressSubStateMachine+0x418>
                            DEBUG_PRINT("Failed to sent the EOF pattern to Tx Task");
     9f0:	4843      	ldr	r0, [pc, #268]	; (b00 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     9f2:	4b33      	ldr	r3, [pc, #204]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     9f4:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     9f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     9fa:	4b3d      	ldr	r3, [pc, #244]	; (af0 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     9fc:	4798      	blx	r3
     9fe:	e68c      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     a00:	2300      	movs	r3, #0
     a02:	461a      	mov	r2, r3
     a04:	4619      	mov	r1, r3
     a06:	4835      	ldr	r0, [pc, #212]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     a08:	6800      	ldr	r0, [r0, #0]
     a0a:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     a0c:	2201      	movs	r2, #1
     a0e:	4b26      	ldr	r3, [pc, #152]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     a10:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     a12:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a16:	4b36      	ldr	r3, [pc, #216]	; (af0 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     a18:	4798      	blx	r3
     a1a:	e67e      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     a1c:	4835      	ldr	r0, [pc, #212]	; (af4 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     a1e:	4b28      	ldr	r3, [pc, #160]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     a20:	4798      	blx	r3
     a22:	e67a      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("EOF Pattern configured");
     a24:	4837      	ldr	r0, [pc, #220]	; (b04 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     a26:	4d26      	ldr	r5, [pc, #152]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     a28:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     a2a:	4c1f      	ldr	r4, [pc, #124]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     a2c:	8961      	ldrh	r1, [r4, #10]
     a2e:	68e0      	ldr	r0, [r4, #12]
     a30:	4b24      	ldr	r3, [pc, #144]	; (ac4 <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
     a32:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
     a34:	4824      	ldr	r0, [pc, #144]	; (ac8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e0>)
     a36:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_ACCESS_POINT;
     a38:	2304      	movs	r3, #4
     a3a:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     a3c:	2300      	movs	r3, #0
     a3e:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
     a40:	68e0      	ldr	r0, [r4, #12]
     a42:	4b23      	ldr	r3, [pc, #140]	; (ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     a44:	4798      	blx	r3
     a46:	e668      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     a48:	4b17      	ldr	r3, [pc, #92]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     a4a:	789b      	ldrb	r3, [r3, #2]
     a4c:	b1d3      	cbz	r3, a84 <MdmCnct_ConnectInProgressSubStateMachine+0x49c>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     a4e:	2b01      	cmp	r3, #1
     a50:	f47f ae63 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     a54:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     a58:	4914      	ldr	r1, [pc, #80]	; (aac <MdmCnct_ConnectInProgressSubStateMachine+0x4c4>)
     a5a:	4b15      	ldr	r3, [pc, #84]	; (ab0 <MdmCnct_ConnectInProgressSubStateMachine+0x4c8>)
     a5c:	6818      	ldr	r0, [r3, #0]
     a5e:	4b15      	ldr	r3, [pc, #84]	; (ab4 <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     a60:	4798      	blx	r3
     a62:	2801      	cmp	r0, #1
     a64:	f47f ae59 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXCFG)
     a68:	4b0f      	ldr	r3, [pc, #60]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     a6a:	7a1b      	ldrb	r3, [r3, #8]
     a6c:	2b15      	cmp	r3, #21
     a6e:	d076      	beq.n	b5e <MdmCnct_ConnectInProgressSubStateMachine+0x576>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     a70:	4822      	ldr	r0, [pc, #136]	; (afc <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     a72:	4b13      	ldr	r3, [pc, #76]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     a74:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     a76:	4b0c      	ldr	r3, [pc, #48]	; (aa8 <MdmCnct_ConnectInProgressSubStateMachine+0x4c0>)
     a78:	2200      	movs	r2, #0
     a7a:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     a7c:	68d8      	ldr	r0, [r3, #12]
     a7e:	4b14      	ldr	r3, [pc, #80]	; (ad0 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     a80:	4798      	blx	r3
     a82:	e64a      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     a84:	4b13      	ldr	r3, [pc, #76]	; (ad4 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     a86:	6818      	ldr	r0, [r3, #0]
     a88:	4b13      	ldr	r3, [pc, #76]	; (ad8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
     a8a:	4798      	blx	r3
     a8c:	2800      	cmp	r0, #0
     a8e:	d162      	bne.n	b56 <MdmCnct_ConnectInProgressSubStateMachine+0x56e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     a90:	2100      	movs	r1, #0
     a92:	4b12      	ldr	r3, [pc, #72]	; (adc <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     a94:	6818      	ldr	r0, [r3, #0]
     a96:	4b12      	ldr	r3, [pc, #72]	; (ae0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     a98:	4798      	blx	r3
     a9a:	2801      	cmp	r0, #1
     a9c:	d034      	beq.n	b08 <MdmCnct_ConnectInProgressSubStateMachine+0x520>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     a9e:	4811      	ldr	r0, [pc, #68]	; (ae4 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     aa0:	4b07      	ldr	r3, [pc, #28]	; (ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     aa2:	4798      	blx	r3
     aa4:	e639      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
     aa6:	bf00      	nop
     aa8:	200001ec 	.word	0x200001ec
     aac:	200001f4 	.word	0x200001f4
     ab0:	20003460 	.word	0x20003460
     ab4:	00005021 	.word	0x00005021
     ab8:	000005a9 	.word	0x000005a9
     abc:	000078a8 	.word	0x000078a8
     ac0:	00001f55 	.word	0x00001f55
     ac4:	00001f11 	.word	0x00001f11
     ac8:	00007f40 	.word	0x00007f40
     acc:	000078bc 	.word	0x000078bc
     ad0:	000049e9 	.word	0x000049e9
     ad4:	20003480 	.word	0x20003480
     ad8:	00005389 	.word	0x00005389
     adc:	2000348c 	.word	0x2000348c
     ae0:	000051a9 	.word	0x000051a9
     ae4:	0000776c 	.word	0x0000776c
     ae8:	00004d11 	.word	0x00004d11
     aec:	00007878 	.word	0x00007878
     af0:	00005a4d 	.word	0x00005a4d
     af4:	00007798 	.word	0x00007798
     af8:	0000784c 	.word	0x0000784c
     afc:	000077f8 	.word	0x000077f8
     b00:	000078f4 	.word	0x000078f4
     b04:	00007920 	.word	0x00007920
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     b08:	2301      	movs	r3, #1
     b0a:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXCFG;
     b0e:	2315      	movs	r3, #21
     b10:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     b14:	2300      	movs	r3, #0
     b16:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     b18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     b1c:	4669      	mov	r1, sp
     b1e:	4890      	ldr	r0, [pc, #576]	; (d60 <MdmCnct_ConnectInProgressSubStateMachine+0x778>)
     b20:	6800      	ldr	r0, [r0, #0]
     b22:	4c90      	ldr	r4, [pc, #576]	; (d64 <MdmCnct_ConnectInProgressSubStateMachine+0x77c>)
     b24:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     b26:	2801      	cmp	r0, #1
     b28:	d007      	beq.n	b3a <MdmCnct_ConnectInProgressSubStateMachine+0x552>
                            DEBUG_PRINT("Failed to sent access point cmd to Tx Task");
     b2a:	488f      	ldr	r0, [pc, #572]	; (d68 <MdmCnct_ConnectInProgressSubStateMachine+0x780>)
     b2c:	4b8f      	ldr	r3, [pc, #572]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     b2e:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     b30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     b34:	4b8e      	ldr	r3, [pc, #568]	; (d70 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
     b36:	4798      	blx	r3
     b38:	e5ef      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     b3a:	2300      	movs	r3, #0
     b3c:	461a      	mov	r2, r3
     b3e:	4619      	mov	r1, r3
     b40:	488c      	ldr	r0, [pc, #560]	; (d74 <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
     b42:	6800      	ldr	r0, [r0, #0]
     b44:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     b46:	2201      	movs	r2, #1
     b48:	4b8b      	ldr	r3, [pc, #556]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     b4a:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     b4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     b50:	4b87      	ldr	r3, [pc, #540]	; (d70 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
     b52:	4798      	blx	r3
     b54:	e5e1      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     b56:	4889      	ldr	r0, [pc, #548]	; (d7c <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
     b58:	4b84      	ldr	r3, [pc, #528]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     b5a:	4798      	blx	r3
     b5c:	e5dd      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Access Point configured");
     b5e:	4888      	ldr	r0, [pc, #544]	; (d80 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
     b60:	4d82      	ldr	r5, [pc, #520]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     b62:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     b64:	4c84      	ldr	r4, [pc, #528]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     b66:	8961      	ldrh	r1, [r4, #10]
     b68:	68e0      	ldr	r0, [r4, #12]
     b6a:	4b86      	ldr	r3, [pc, #536]	; (d84 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
     b6c:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
     b6e:	4886      	ldr	r0, [pc, #536]	; (d88 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
     b70:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_CONNECT_TIMERS;
     b72:	2305      	movs	r3, #5
     b74:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     b76:	2300      	movs	r3, #0
     b78:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
     b7a:	68e0      	ldr	r0, [r4, #12]
     b7c:	4b83      	ldr	r3, [pc, #524]	; (d8c <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
     b7e:	4798      	blx	r3
     b80:	e5cb      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     b82:	4b7d      	ldr	r3, [pc, #500]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     b84:	789b      	ldrb	r3, [r3, #2]
     b86:	b1d3      	cbz	r3, bbe <MdmCnct_ConnectInProgressSubStateMachine+0x5d6>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     b88:	2b01      	cmp	r3, #1
     b8a:	f47f adc6 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     b8e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     b92:	497f      	ldr	r1, [pc, #508]	; (d90 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
     b94:	4b7f      	ldr	r3, [pc, #508]	; (d94 <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
     b96:	6818      	ldr	r0, [r3, #0]
     b98:	4b7f      	ldr	r3, [pc, #508]	; (d98 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
     b9a:	4798      	blx	r3
     b9c:	2801      	cmp	r0, #1
     b9e:	f47f adbc 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXTIMER)
     ba2:	4b75      	ldr	r3, [pc, #468]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     ba4:	7a1b      	ldrb	r3, [r3, #8]
     ba6:	2b16      	cmp	r3, #22
     ba8:	d045      	beq.n	c36 <MdmCnct_ConnectInProgressSubStateMachine+0x64e>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     baa:	487c      	ldr	r0, [pc, #496]	; (d9c <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
     bac:	4b6f      	ldr	r3, [pc, #444]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     bae:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     bb0:	4b71      	ldr	r3, [pc, #452]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     bb2:	2200      	movs	r2, #0
     bb4:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     bb6:	68d8      	ldr	r0, [r3, #12]
     bb8:	4b74      	ldr	r3, [pc, #464]	; (d8c <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
     bba:	4798      	blx	r3
     bbc:	e5ad      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     bbe:	4b68      	ldr	r3, [pc, #416]	; (d60 <MdmCnct_ConnectInProgressSubStateMachine+0x778>)
     bc0:	6818      	ldr	r0, [r3, #0]
     bc2:	4b77      	ldr	r3, [pc, #476]	; (da0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
     bc4:	4798      	blx	r3
     bc6:	2800      	cmp	r0, #0
     bc8:	d131      	bne.n	c2e <MdmCnct_ConnectInProgressSubStateMachine+0x646>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     bca:	2100      	movs	r1, #0
     bcc:	4b69      	ldr	r3, [pc, #420]	; (d74 <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
     bce:	6818      	ldr	r0, [r3, #0]
     bd0:	4b74      	ldr	r3, [pc, #464]	; (da4 <MdmCnct_ConnectInProgressSubStateMachine+0x7bc>)
     bd2:	4798      	blx	r3
     bd4:	2801      	cmp	r0, #1
     bd6:	d003      	beq.n	be0 <MdmCnct_ConnectInProgressSubStateMachine+0x5f8>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     bd8:	4873      	ldr	r0, [pc, #460]	; (da8 <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
     bda:	4b64      	ldr	r3, [pc, #400]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     bdc:	4798      	blx	r3
     bde:	e59c      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     be0:	2301      	movs	r3, #1
     be2:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXTIMER;
     be6:	2316      	movs	r3, #22
     be8:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     bec:	2300      	movs	r3, #0
     bee:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     bf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     bf4:	4669      	mov	r1, sp
     bf6:	485a      	ldr	r0, [pc, #360]	; (d60 <MdmCnct_ConnectInProgressSubStateMachine+0x778>)
     bf8:	6800      	ldr	r0, [r0, #0]
     bfa:	4c5a      	ldr	r4, [pc, #360]	; (d64 <MdmCnct_ConnectInProgressSubStateMachine+0x77c>)
     bfc:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     bfe:	2801      	cmp	r0, #1
     c00:	d007      	beq.n	c12 <MdmCnct_ConnectInProgressSubStateMachine+0x62a>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
     c02:	486a      	ldr	r0, [pc, #424]	; (dac <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
     c04:	4b59      	ldr	r3, [pc, #356]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     c06:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     c0c:	4b58      	ldr	r3, [pc, #352]	; (d70 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
     c0e:	4798      	blx	r3
     c10:	e583      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     c12:	2300      	movs	r3, #0
     c14:	461a      	mov	r2, r3
     c16:	4619      	mov	r1, r3
     c18:	4856      	ldr	r0, [pc, #344]	; (d74 <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
     c1a:	6800      	ldr	r0, [r0, #0]
     c1c:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     c1e:	2201      	movs	r2, #1
     c20:	4b55      	ldr	r3, [pc, #340]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     c22:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     c24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     c28:	4b51      	ldr	r3, [pc, #324]	; (d70 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
     c2a:	4798      	blx	r3
     c2c:	e575      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     c2e:	4853      	ldr	r0, [pc, #332]	; (d7c <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
     c30:	4b4e      	ldr	r3, [pc, #312]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     c32:	4798      	blx	r3
     c34:	e571      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Connection Timers configured");
     c36:	485e      	ldr	r0, [pc, #376]	; (db0 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
     c38:	4d4c      	ldr	r5, [pc, #304]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     c3a:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     c3c:	4c4e      	ldr	r4, [pc, #312]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     c3e:	8961      	ldrh	r1, [r4, #10]
     c40:	68e0      	ldr	r0, [r4, #12]
     c42:	4b50      	ldr	r3, [pc, #320]	; (d84 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
     c44:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
     c46:	4850      	ldr	r0, [pc, #320]	; (d88 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
     c48:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_SERVER_ADDRESS;
     c4a:	2306      	movs	r3, #6
     c4c:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     c4e:	2300      	movs	r3, #0
     c50:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
     c52:	68e0      	ldr	r0, [r4, #12]
     c54:	4b4d      	ldr	r3, [pc, #308]	; (d8c <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
     c56:	4798      	blx	r3
     c58:	e55f      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     c5a:	4b47      	ldr	r3, [pc, #284]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     c5c:	789b      	ldrb	r3, [r3, #2]
     c5e:	b1d3      	cbz	r3, c96 <MdmCnct_ConnectInProgressSubStateMachine+0x6ae>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     c60:	2b01      	cmp	r3, #1
     c62:	f47f ad5a 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     c66:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     c6a:	4949      	ldr	r1, [pc, #292]	; (d90 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
     c6c:	4b49      	ldr	r3, [pc, #292]	; (d94 <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
     c6e:	6818      	ldr	r0, [r3, #0]
     c70:	4b49      	ldr	r3, [pc, #292]	; (d98 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
     c72:	4798      	blx	r3
     c74:	2801      	cmp	r0, #1
     c76:	f47f ad50 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_CFG)
     c7a:	4b3f      	ldr	r3, [pc, #252]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     c7c:	7a1b      	ldrb	r3, [r3, #8]
     c7e:	2b09      	cmp	r3, #9
     c80:	d045      	beq.n	d0e <MdmCnct_ConnectInProgressSubStateMachine+0x726>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     c82:	4846      	ldr	r0, [pc, #280]	; (d9c <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
     c84:	4b39      	ldr	r3, [pc, #228]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     c86:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     c88:	4b3b      	ldr	r3, [pc, #236]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     c8a:	2200      	movs	r2, #0
     c8c:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     c8e:	68d8      	ldr	r0, [r3, #12]
     c90:	4b3e      	ldr	r3, [pc, #248]	; (d8c <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
     c92:	4798      	blx	r3
     c94:	e541      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     c96:	4b32      	ldr	r3, [pc, #200]	; (d60 <MdmCnct_ConnectInProgressSubStateMachine+0x778>)
     c98:	6818      	ldr	r0, [r3, #0]
     c9a:	4b41      	ldr	r3, [pc, #260]	; (da0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
     c9c:	4798      	blx	r3
     c9e:	2800      	cmp	r0, #0
     ca0:	d131      	bne.n	d06 <MdmCnct_ConnectInProgressSubStateMachine+0x71e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     ca2:	2100      	movs	r1, #0
     ca4:	4b33      	ldr	r3, [pc, #204]	; (d74 <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
     ca6:	6818      	ldr	r0, [r3, #0]
     ca8:	4b3e      	ldr	r3, [pc, #248]	; (da4 <MdmCnct_ConnectInProgressSubStateMachine+0x7bc>)
     caa:	4798      	blx	r3
     cac:	2801      	cmp	r0, #1
     cae:	d003      	beq.n	cb8 <MdmCnct_ConnectInProgressSubStateMachine+0x6d0>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     cb0:	483d      	ldr	r0, [pc, #244]	; (da8 <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
     cb2:	4b2e      	ldr	r3, [pc, #184]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     cb4:	4798      	blx	r3
     cb6:	e530      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     cb8:	2301      	movs	r3, #1
     cba:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_CFG;
     cbe:	2309      	movs	r3, #9
     cc0:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     cc4:	2300      	movs	r3, #0
     cc6:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     cc8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ccc:	4669      	mov	r1, sp
     cce:	4824      	ldr	r0, [pc, #144]	; (d60 <MdmCnct_ConnectInProgressSubStateMachine+0x778>)
     cd0:	6800      	ldr	r0, [r0, #0]
     cd2:	4c24      	ldr	r4, [pc, #144]	; (d64 <MdmCnct_ConnectInProgressSubStateMachine+0x77c>)
     cd4:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     cd6:	2801      	cmp	r0, #1
     cd8:	d007      	beq.n	cea <MdmCnct_ConnectInProgressSubStateMachine+0x702>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
     cda:	4834      	ldr	r0, [pc, #208]	; (dac <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
     cdc:	4b23      	ldr	r3, [pc, #140]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     cde:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     ce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     ce4:	4b22      	ldr	r3, [pc, #136]	; (d70 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
     ce6:	4798      	blx	r3
     ce8:	e517      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     cea:	2300      	movs	r3, #0
     cec:	461a      	mov	r2, r3
     cee:	4619      	mov	r1, r3
     cf0:	4820      	ldr	r0, [pc, #128]	; (d74 <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
     cf2:	6800      	ldr	r0, [r0, #0]
     cf4:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     cf6:	2201      	movs	r2, #1
     cf8:	4b1f      	ldr	r3, [pc, #124]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     cfa:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     d00:	4b1b      	ldr	r3, [pc, #108]	; (d70 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
     d02:	4798      	blx	r3
     d04:	e509      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     d06:	481d      	ldr	r0, [pc, #116]	; (d7c <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
     d08:	4b18      	ldr	r3, [pc, #96]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     d0a:	4798      	blx	r3
     d0c:	e505      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    	MdmCnct_ExtractSessionIdFromConfigResponse(ConnectionResponse.response);
     d0e:	4c1a      	ldr	r4, [pc, #104]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     d10:	68e0      	ldr	r0, [r4, #12]
    currentSessionId = cfgResponse[SESSION_ID_POSITION];
     d12:	7ac3      	ldrb	r3, [r0, #11]
     d14:	7423      	strb	r3, [r4, #16]
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     d16:	8961      	ldrh	r1, [r4, #10]
     d18:	4b1a      	ldr	r3, [pc, #104]	; (d84 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
     d1a:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
     d1c:	481a      	ldr	r0, [pc, #104]	; (d88 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
     d1e:	4b13      	ldr	r3, [pc, #76]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     d20:	4798      	blx	r3
	connectionStatus = cfgResponse[CONNECT_STATUS_POSITION];
     d22:	68e3      	ldr	r3, [r4, #12]
	switch(connectionStatus)
     d24:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
     d28:	3b30      	subs	r3, #48	; 0x30
     d2a:	2b06      	cmp	r3, #6
     d2c:	d808      	bhi.n	d40 <MdmCnct_ConnectInProgressSubStateMachine+0x758>
     d2e:	e8df f003 	tbb	[pc, r3]
     d32:	4704      	.short	0x4704
     d34:	64605c58 	.word	0x64605c58
     d38:	68          	.byte	0x68
     d39:	00          	.byte	0x00
			DEBUG_PRINT("Connection Status : DISCONNECTED DUE TO NETWORK");
     d3a:	481e      	ldr	r0, [pc, #120]	; (db4 <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
     d3c:	4b0b      	ldr	r3, [pc, #44]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     d3e:	4798      	blx	r3
                        	DEBUG_PRINT("Error : Connection Failure");
     d40:	481d      	ldr	r0, [pc, #116]	; (db8 <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
     d42:	4c0a      	ldr	r4, [pc, #40]	; (d6c <MdmCnct_ConnectInProgressSubStateMachine+0x784>)
     d44:	47a0      	blx	r4
                        	DEBUG_PRINT("Restarting the connection initialization...");
     d46:	481d      	ldr	r0, [pc, #116]	; (dbc <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
     d48:	47a0      	blx	r4
                        	DEBUG_PRINT("\r\n");
     d4a:	480f      	ldr	r0, [pc, #60]	; (d88 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
     d4c:	47a0      	blx	r4
                        	gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     d4e:	4b0a      	ldr	r3, [pc, #40]	; (d78 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
     d50:	2200      	movs	r2, #0
     d52:	709a      	strb	r2, [r3, #2]
			                gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
     d54:	2205      	movs	r2, #5
     d56:	70da      	strb	r2, [r3, #3]
							gHttpConnectionState =  MDM_HTTP_CONNECTED;
     d58:	2202      	movs	r2, #2
     d5a:	701a      	strb	r2, [r3, #0]
     d5c:	e03c      	b.n	dd8 <MdmCnct_ConnectInProgressSubStateMachine+0x7f0>
     d5e:	bf00      	nop
     d60:	20003480 	.word	0x20003480
     d64:	00004d11 	.word	0x00004d11
     d68:	00007938 	.word	0x00007938
     d6c:	00001f55 	.word	0x00001f55
     d70:	00005a4d 	.word	0x00005a4d
     d74:	2000348c 	.word	0x2000348c
     d78:	200001ec 	.word	0x200001ec
     d7c:	00007798 	.word	0x00007798
     d80:	00007964 	.word	0x00007964
     d84:	00001f11 	.word	0x00001f11
     d88:	00007f40 	.word	0x00007f40
     d8c:	000049e9 	.word	0x000049e9
     d90:	200001f4 	.word	0x200001f4
     d94:	20003460 	.word	0x20003460
     d98:	00005021 	.word	0x00005021
     d9c:	000077f8 	.word	0x000077f8
     da0:	00005389 	.word	0x00005389
     da4:	000051a9 	.word	0x000051a9
     da8:	0000776c 	.word	0x0000776c
     dac:	0000797c 	.word	0x0000797c
     db0:	000079ac 	.word	0x000079ac
     db4:	000079cc 	.word	0x000079cc
     db8:	00007b30 	.word	0x00007b30
     dbc:	00007b4c 	.word	0x00007b4c
			DEBUG_PRINT("Connection Status : CONNECTED");
     dc0:	4855      	ldr	r0, [pc, #340]	; (f18 <MdmCnct_ConnectInProgressSubStateMachine+0x930>)
     dc2:	4c56      	ldr	r4, [pc, #344]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     dc4:	47a0      	blx	r4
                            DEBUG_PRINT("Connection successful...Cloud Server configured");
     dc6:	4856      	ldr	r0, [pc, #344]	; (f20 <MdmCnct_ConnectInProgressSubStateMachine+0x938>)
     dc8:	47a0      	blx	r4
							DEBUG_PRINT("\r\n");
     dca:	4856      	ldr	r0, [pc, #344]	; (f24 <MdmCnct_ConnectInProgressSubStateMachine+0x93c>)
     dcc:	47a0      	blx	r4
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_HTTP_HEADER;
     dce:	4b56      	ldr	r3, [pc, #344]	; (f28 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
     dd0:	2207      	movs	r2, #7
     dd2:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     dd4:	2200      	movs	r2, #0
     dd6:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     dd8:	4b53      	ldr	r3, [pc, #332]	; (f28 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
     dda:	68d8      	ldr	r0, [r3, #12]
     ddc:	4b53      	ldr	r3, [pc, #332]	; (f2c <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
     dde:	4798      	blx	r3
     de0:	e49b      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
			DEBUG_PRINT("Connection Status : FAILED TO CONNECT");
     de2:	4853      	ldr	r0, [pc, #332]	; (f30 <MdmCnct_ConnectInProgressSubStateMachine+0x948>)
     de4:	4b4d      	ldr	r3, [pc, #308]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     de6:	4798      	blx	r3
     de8:	e7aa      	b.n	d40 <MdmCnct_ConnectInProgressSubStateMachine+0x758>
			DEBUG_PRINT("Connection Status : CONNECTION CLOSED");
     dea:	4852      	ldr	r0, [pc, #328]	; (f34 <MdmCnct_ConnectInProgressSubStateMachine+0x94c>)
     dec:	4b4b      	ldr	r3, [pc, #300]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     dee:	4798      	blx	r3
     df0:	e7a6      	b.n	d40 <MdmCnct_ConnectInProgressSubStateMachine+0x758>
			DEBUG_PRINT("Connection Status : CONNECTION IN PROGRESS");
     df2:	4851      	ldr	r0, [pc, #324]	; (f38 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
     df4:	4b49      	ldr	r3, [pc, #292]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     df6:	4798      	blx	r3
     df8:	e7a2      	b.n	d40 <MdmCnct_ConnectInProgressSubStateMachine+0x758>
			DEBUG_PRINT("Connection Status : IDLE TIMER STARTED FOR DISCONNECTION");
     dfa:	4850      	ldr	r0, [pc, #320]	; (f3c <MdmCnct_ConnectInProgressSubStateMachine+0x954>)
     dfc:	4b47      	ldr	r3, [pc, #284]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     dfe:	4798      	blx	r3
     e00:	e79e      	b.n	d40 <MdmCnct_ConnectInProgressSubStateMachine+0x758>
			DEBUG_PRINT("Connection Status : IDLE TIMER CANCELLED");
     e02:	484f      	ldr	r0, [pc, #316]	; (f40 <MdmCnct_ConnectInProgressSubStateMachine+0x958>)
     e04:	4b45      	ldr	r3, [pc, #276]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     e06:	4798      	blx	r3
     e08:	e79a      	b.n	d40 <MdmCnct_ConnectInProgressSubStateMachine+0x758>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     e0a:	4b47      	ldr	r3, [pc, #284]	; (f28 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
     e0c:	789b      	ldrb	r3, [r3, #2]
     e0e:	b1d3      	cbz	r3, e46 <MdmCnct_ConnectInProgressSubStateMachine+0x85e>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     e10:	2b01      	cmp	r3, #1
     e12:	f47f ac82 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     e16:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     e1a:	494a      	ldr	r1, [pc, #296]	; (f44 <MdmCnct_ConnectInProgressSubStateMachine+0x95c>)
     e1c:	4b4a      	ldr	r3, [pc, #296]	; (f48 <MdmCnct_ConnectInProgressSubStateMachine+0x960>)
     e1e:	6818      	ldr	r0, [r3, #0]
     e20:	4b4a      	ldr	r3, [pc, #296]	; (f4c <MdmCnct_ConnectInProgressSubStateMachine+0x964>)
     e22:	4798      	blx	r3
     e24:	2801      	cmp	r0, #1
     e26:	f47f ac78 	bne.w	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_HEADER)
     e2a:	4b3f      	ldr	r3, [pc, #252]	; (f28 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
     e2c:	7a1b      	ldrb	r3, [r3, #8]
     e2e:	2b17      	cmp	r3, #23
     e30:	d048      	beq.n	ec4 <MdmCnct_ConnectInProgressSubStateMachine+0x8dc>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     e32:	4847      	ldr	r0, [pc, #284]	; (f50 <MdmCnct_ConnectInProgressSubStateMachine+0x968>)
     e34:	4b39      	ldr	r3, [pc, #228]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     e36:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     e38:	4b3b      	ldr	r3, [pc, #236]	; (f28 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
     e3a:	2200      	movs	r2, #0
     e3c:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     e3e:	68d8      	ldr	r0, [r3, #12]
     e40:	4b3a      	ldr	r3, [pc, #232]	; (f2c <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
     e42:	4798      	blx	r3
}
     e44:	e469      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                buildHttpHeaderWithActiveSessionID(&currentSessionId);
     e46:	4843      	ldr	r0, [pc, #268]	; (f54 <MdmCnct_ConnectInProgressSubStateMachine+0x96c>)
     e48:	4b43      	ldr	r3, [pc, #268]	; (f58 <MdmCnct_ConnectInProgressSubStateMachine+0x970>)
     e4a:	4798      	blx	r3
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     e4c:	4b43      	ldr	r3, [pc, #268]	; (f5c <MdmCnct_ConnectInProgressSubStateMachine+0x974>)
     e4e:	6818      	ldr	r0, [r3, #0]
     e50:	4b43      	ldr	r3, [pc, #268]	; (f60 <MdmCnct_ConnectInProgressSubStateMachine+0x978>)
     e52:	4798      	blx	r3
     e54:	2800      	cmp	r0, #0
     e56:	d131      	bne.n	ebc <MdmCnct_ConnectInProgressSubStateMachine+0x8d4>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     e58:	2100      	movs	r1, #0
     e5a:	4b42      	ldr	r3, [pc, #264]	; (f64 <MdmCnct_ConnectInProgressSubStateMachine+0x97c>)
     e5c:	6818      	ldr	r0, [r3, #0]
     e5e:	4b42      	ldr	r3, [pc, #264]	; (f68 <MdmCnct_ConnectInProgressSubStateMachine+0x980>)
     e60:	4798      	blx	r3
     e62:	2801      	cmp	r0, #1
     e64:	d003      	beq.n	e6e <MdmCnct_ConnectInProgressSubStateMachine+0x886>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     e66:	4841      	ldr	r0, [pc, #260]	; (f6c <MdmCnct_ConnectInProgressSubStateMachine+0x984>)
     e68:	4b2c      	ldr	r3, [pc, #176]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     e6a:	4798      	blx	r3
     e6c:	e455      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     e6e:	2301      	movs	r3, #1
     e70:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_HEADER;
     e74:	2317      	movs	r3, #23
     e76:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     e7a:	2300      	movs	r3, #0
     e7c:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     e7e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     e82:	4669      	mov	r1, sp
     e84:	4835      	ldr	r0, [pc, #212]	; (f5c <MdmCnct_ConnectInProgressSubStateMachine+0x974>)
     e86:	6800      	ldr	r0, [r0, #0]
     e88:	4c39      	ldr	r4, [pc, #228]	; (f70 <MdmCnct_ConnectInProgressSubStateMachine+0x988>)
     e8a:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     e8c:	2801      	cmp	r0, #1
     e8e:	d007      	beq.n	ea0 <MdmCnct_ConnectInProgressSubStateMachine+0x8b8>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
     e90:	4838      	ldr	r0, [pc, #224]	; (f74 <MdmCnct_ConnectInProgressSubStateMachine+0x98c>)
     e92:	4b22      	ldr	r3, [pc, #136]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     e94:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     e96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     e9a:	4b37      	ldr	r3, [pc, #220]	; (f78 <MdmCnct_ConnectInProgressSubStateMachine+0x990>)
     e9c:	4798      	blx	r3
     e9e:	e43c      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     ea0:	2300      	movs	r3, #0
     ea2:	461a      	mov	r2, r3
     ea4:	4619      	mov	r1, r3
     ea6:	482f      	ldr	r0, [pc, #188]	; (f64 <MdmCnct_ConnectInProgressSubStateMachine+0x97c>)
     ea8:	6800      	ldr	r0, [r0, #0]
     eaa:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     eac:	2201      	movs	r2, #1
     eae:	4b1e      	ldr	r3, [pc, #120]	; (f28 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
     eb0:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
     eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     eb6:	4b30      	ldr	r3, [pc, #192]	; (f78 <MdmCnct_ConnectInProgressSubStateMachine+0x990>)
     eb8:	4798      	blx	r3
     eba:	e42e      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     ebc:	482f      	ldr	r0, [pc, #188]	; (f7c <MdmCnct_ConnectInProgressSubStateMachine+0x994>)
     ebe:	4b17      	ldr	r3, [pc, #92]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     ec0:	4798      	blx	r3
     ec2:	e42a      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     ec4:	4c18      	ldr	r4, [pc, #96]	; (f28 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
     ec6:	8961      	ldrh	r1, [r4, #10]
     ec8:	68e0      	ldr	r0, [r4, #12]
     eca:	4b2d      	ldr	r3, [pc, #180]	; (f80 <MdmCnct_ConnectInProgressSubStateMachine+0x998>)
     ecc:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
     ece:	4815      	ldr	r0, [pc, #84]	; (f24 <MdmCnct_ConnectInProgressSubStateMachine+0x93c>)
     ed0:	4b12      	ldr	r3, [pc, #72]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     ed2:	4798      	blx	r3
    if(0==memcmp(response,"CONNECT",7))
     ed4:	2207      	movs	r2, #7
     ed6:	492b      	ldr	r1, [pc, #172]	; (f84 <MdmCnct_ConnectInProgressSubStateMachine+0x99c>)
     ed8:	68e0      	ldr	r0, [r4, #12]
     eda:	4b2b      	ldr	r3, [pc, #172]	; (f88 <MdmCnct_ConnectInProgressSubStateMachine+0x9a0>)
     edc:	4798      	blx	r3
     ede:	b138      	cbz	r0, ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x908>
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     ee0:	2200      	movs	r2, #0
     ee2:	4b11      	ldr	r3, [pc, #68]	; (f28 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
     ee4:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     ee6:	4b10      	ldr	r3, [pc, #64]	; (f28 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
     ee8:	68d8      	ldr	r0, [r3, #12]
     eea:	4b10      	ldr	r3, [pc, #64]	; (f2c <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
     eec:	4798      	blx	r3
     eee:	e414      	b.n	71a <MdmCnct_ConnectInProgressSubStateMachine+0x132>
        mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
     ef0:	2110      	movs	r1, #16
     ef2:	4826      	ldr	r0, [pc, #152]	; (f8c <MdmCnct_ConnectInProgressSubStateMachine+0x9a4>)
     ef4:	4b26      	ldr	r3, [pc, #152]	; (f90 <MdmCnct_ConnectInProgressSubStateMachine+0x9a8>)
     ef6:	4798      	blx	r3
        mdmCtrlr_FlushRxBuffer();
     ef8:	4b26      	ldr	r3, [pc, #152]	; (f94 <MdmCnct_ConnectInProgressSubStateMachine+0x9ac>)
     efa:	4798      	blx	r3
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     efc:	2200      	movs	r2, #0
     efe:	7062      	strb	r2, [r4, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     f00:	70a2      	strb	r2, [r4, #2]
                            gHttpConnectionState = MDM_HTTP_CONNECTED;
     f02:	2102      	movs	r1, #2
     f04:	7021      	strb	r1, [r4, #0]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
     f06:	70e2      	strb	r2, [r4, #3]
                            DEBUG_PRINT("\r\n");
     f08:	4806      	ldr	r0, [pc, #24]	; (f24 <MdmCnct_ConnectInProgressSubStateMachine+0x93c>)
     f0a:	4b04      	ldr	r3, [pc, #16]	; (f1c <MdmCnct_ConnectInProgressSubStateMachine+0x934>)
     f0c:	4798      	blx	r3
                            vTaskDelay(PacketTransmitDelayMs);
     f0e:	f240 50dc 	movw	r0, #1500	; 0x5dc
     f12:	4b19      	ldr	r3, [pc, #100]	; (f78 <MdmCnct_ConnectInProgressSubStateMachine+0x990>)
     f14:	4798      	blx	r3
     f16:	e7e6      	b.n	ee6 <MdmCnct_ConnectInProgressSubStateMachine+0x8fe>
     f18:	000079fc 	.word	0x000079fc
     f1c:	00001f55 	.word	0x00001f55
     f20:	00007a1c 	.word	0x00007a1c
     f24:	00007f40 	.word	0x00007f40
     f28:	200001ec 	.word	0x200001ec
     f2c:	000049e9 	.word	0x000049e9
     f30:	00007a4c 	.word	0x00007a4c
     f34:	00007a74 	.word	0x00007a74
     f38:	00007a9c 	.word	0x00007a9c
     f3c:	00007ac8 	.word	0x00007ac8
     f40:	00007b04 	.word	0x00007b04
     f44:	200001f4 	.word	0x200001f4
     f48:	20003460 	.word	0x20003460
     f4c:	00005021 	.word	0x00005021
     f50:	000077f8 	.word	0x000077f8
     f54:	200001fc 	.word	0x200001fc
     f58:	00000381 	.word	0x00000381
     f5c:	20003480 	.word	0x20003480
     f60:	00005389 	.word	0x00005389
     f64:	2000348c 	.word	0x2000348c
     f68:	000051a9 	.word	0x000051a9
     f6c:	0000776c 	.word	0x0000776c
     f70:	00004d11 	.word	0x00004d11
     f74:	0000797c 	.word	0x0000797c
     f78:	00005a4d 	.word	0x00005a4d
     f7c:	00007798 	.word	0x00007798
     f80:	00001f11 	.word	0x00001f11
     f84:	00007b78 	.word	0x00007b78
     f88:	00006589 	.word	0x00006589
     f8c:	00007614 	.word	0x00007614
     f90:	000016fd 	.word	0x000016fd
     f94:	00001779 	.word	0x00001779

00000f98 <MdmConnect_HttpConnectionSchedule>:
{
     f98:	b530      	push	{r4, r5, lr}
     f9a:	b083      	sub	sp, #12
    switch (gHttpConnectionState)
     f9c:	4b96      	ldr	r3, [pc, #600]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
     f9e:	781b      	ldrb	r3, [r3, #0]
     fa0:	2b01      	cmp	r3, #1
     fa2:	d012      	beq.n	fca <MdmConnect_HttpConnectionSchedule+0x32>
     fa4:	b11b      	cbz	r3, fae <MdmConnect_HttpConnectionSchedule+0x16>
     fa6:	2b02      	cmp	r3, #2
     fa8:	d012      	beq.n	fd0 <MdmConnect_HttpConnectionSchedule+0x38>
}
     faa:	b003      	add	sp, #12
     fac:	bd30      	pop	{r4, r5, pc}
            if(isModemDiagDataBaseUpdated() != false)
     fae:	4b93      	ldr	r3, [pc, #588]	; (11fc <MdmConnect_HttpConnectionSchedule+0x264>)
     fb0:	4798      	blx	r3
     fb2:	2800      	cmp	r0, #0
     fb4:	d0f9      	beq.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectionState = MDM_HTTP_CONNECTION_IN_PROGRESS;
     fb6:	4b90      	ldr	r3, [pc, #576]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
     fb8:	2201      	movs	r2, #1
     fba:	701a      	strb	r2, [r3, #0]
                gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     fbc:	2200      	movs	r2, #0
     fbe:	705a      	strb	r2, [r3, #1]
                gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     fc0:	709a      	strb	r2, [r3, #2]
                DEBUG_PRINT("Closing Active Connections");
     fc2:	488f      	ldr	r0, [pc, #572]	; (1200 <MdmConnect_HttpConnectionSchedule+0x268>)
     fc4:	4b8f      	ldr	r3, [pc, #572]	; (1204 <MdmConnect_HttpConnectionSchedule+0x26c>)
     fc6:	4798      	blx	r3
     fc8:	e7ef      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
            MdmCnct_ConnectInProgressSubStateMachine();
     fca:	4b8f      	ldr	r3, [pc, #572]	; (1208 <MdmConnect_HttpConnectionSchedule+0x270>)
     fcc:	4798      	blx	r3
        break;
     fce:	e7ec      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gHttpConnectedSubState)
     fd0:	4b89      	ldr	r3, [pc, #548]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
     fd2:	78db      	ldrb	r3, [r3, #3]
     fd4:	2b06      	cmp	r3, #6
     fd6:	d8e8      	bhi.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
     fd8:	a201      	add	r2, pc, #4	; (adr r2, fe0 <MdmConnect_HttpConnectionSchedule+0x48>)
     fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     fde:	bf00      	nop
     fe0:	00000ffd 	.word	0x00000ffd
     fe4:	00000fab 	.word	0x00000fab
     fe8:	00001009 	.word	0x00001009
     fec:	0000101d 	.word	0x0000101d
     ff0:	00001095 	.word	0x00001095
     ff4:	00001127 	.word	0x00001127
     ff8:	0000114b 	.word	0x0000114b
            mdmCtrlr_FlushRxBuffer();
     ffc:	4b83      	ldr	r3, [pc, #524]	; (120c <MdmConnect_HttpConnectionSchedule+0x274>)
     ffe:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_BUILD_DATA_PACKET_TO_SERVER;
    1000:	2202      	movs	r2, #2
    1002:	4b7d      	ldr	r3, [pc, #500]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    1004:	70da      	strb	r2, [r3, #3]
    1006:	e7d0      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
            buildDataPacketsToServer();
    1008:	4b81      	ldr	r3, [pc, #516]	; (1210 <MdmConnect_HttpConnectionSchedule+0x278>)
    100a:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_SEND_DATA_PACKETS_TO_SERVER;
    100c:	2203      	movs	r2, #3
    100e:	4b7a      	ldr	r3, [pc, #488]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    1010:	70da      	strb	r2, [r3, #3]
            vTaskDelay(BuildPacketDelayMs);
    1012:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1016:	4b7f      	ldr	r3, [pc, #508]	; (1214 <MdmConnect_HttpConnectionSchedule+0x27c>)
    1018:	4798      	blx	r3
    101a:	e7c6      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
            if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    101c:	4b7e      	ldr	r3, [pc, #504]	; (1218 <MdmConnect_HttpConnectionSchedule+0x280>)
    101e:	6818      	ldr	r0, [r3, #0]
    1020:	4b7e      	ldr	r3, [pc, #504]	; (121c <MdmConnect_HttpConnectionSchedule+0x284>)
    1022:	4798      	blx	r3
    1024:	2800      	cmp	r0, #0
    1026:	d131      	bne.n	108c <MdmConnect_HttpConnectionSchedule+0xf4>
                if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1028:	2100      	movs	r1, #0
    102a:	4b7d      	ldr	r3, [pc, #500]	; (1220 <MdmConnect_HttpConnectionSchedule+0x288>)
    102c:	6818      	ldr	r0, [r3, #0]
    102e:	4b7d      	ldr	r3, [pc, #500]	; (1224 <MdmConnect_HttpConnectionSchedule+0x28c>)
    1030:	4798      	blx	r3
    1032:	2801      	cmp	r0, #1
    1034:	d003      	beq.n	103e <MdmConnect_HttpConnectionSchedule+0xa6>
                    DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1036:	487c      	ldr	r0, [pc, #496]	; (1228 <MdmConnect_HttpConnectionSchedule+0x290>)
    1038:	4b72      	ldr	r3, [pc, #456]	; (1204 <MdmConnect_HttpConnectionSchedule+0x26c>)
    103a:	4798      	blx	r3
    103c:	e7b5      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                    TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    103e:	2301      	movs	r3, #1
    1040:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KHTTP_GET;
    1044:	2318      	movs	r3, #24
    1046:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    104a:	2300      	movs	r3, #0
    104c:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    104e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1052:	4669      	mov	r1, sp
    1054:	4870      	ldr	r0, [pc, #448]	; (1218 <MdmConnect_HttpConnectionSchedule+0x280>)
    1056:	6800      	ldr	r0, [r0, #0]
    1058:	4c74      	ldr	r4, [pc, #464]	; (122c <MdmConnect_HttpConnectionSchedule+0x294>)
    105a:	47a0      	blx	r4
                    if(TxQueuePushStatus == pdPASS)
    105c:	2801      	cmp	r0, #1
    105e:	d007      	beq.n	1070 <MdmConnect_HttpConnectionSchedule+0xd8>
                        DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    1060:	4873      	ldr	r0, [pc, #460]	; (1230 <MdmConnect_HttpConnectionSchedule+0x298>)
    1062:	4b68      	ldr	r3, [pc, #416]	; (1204 <MdmConnect_HttpConnectionSchedule+0x26c>)
    1064:	4798      	blx	r3
                        vTaskDelay(TransmitDelayMs);
    1066:	f640 10c4 	movw	r0, #2500	; 0x9c4
    106a:	4b6a      	ldr	r3, [pc, #424]	; (1214 <MdmConnect_HttpConnectionSchedule+0x27c>)
    106c:	4798      	blx	r3
    106e:	e79c      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1070:	2300      	movs	r3, #0
    1072:	461a      	mov	r2, r3
    1074:	4619      	mov	r1, r3
    1076:	486a      	ldr	r0, [pc, #424]	; (1220 <MdmConnect_HttpConnectionSchedule+0x288>)
    1078:	6800      	ldr	r0, [r0, #0]
    107a:	47a0      	blx	r4
                        gHttpConnectedSubState = CONNECTED_RECEIVE_RESPONSE_FROM_SERVER;
    107c:	2204      	movs	r2, #4
    107e:	4b5e      	ldr	r3, [pc, #376]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    1080:	70da      	strb	r2, [r3, #3]
                        vTaskDelay(TransmitDelayMs);
    1082:	f640 10c4 	movw	r0, #2500	; 0x9c4
    1086:	4b63      	ldr	r3, [pc, #396]	; (1214 <MdmConnect_HttpConnectionSchedule+0x27c>)
    1088:	4798      	blx	r3
    108a:	e78e      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                DEBUG_PRINT("Transmit Queue is not empty");
    108c:	4869      	ldr	r0, [pc, #420]	; (1234 <MdmConnect_HttpConnectionSchedule+0x29c>)
    108e:	4b5d      	ldr	r3, [pc, #372]	; (1204 <MdmConnect_HttpConnectionSchedule+0x26c>)
    1090:	4798      	blx	r3
    1092:	e78a      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
            if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1094:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1098:	4967      	ldr	r1, [pc, #412]	; (1238 <MdmConnect_HttpConnectionSchedule+0x2a0>)
    109a:	4b68      	ldr	r3, [pc, #416]	; (123c <MdmConnect_HttpConnectionSchedule+0x2a4>)
    109c:	6818      	ldr	r0, [r3, #0]
    109e:	4b68      	ldr	r3, [pc, #416]	; (1240 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    10a0:	4798      	blx	r3
    10a2:	2801      	cmp	r0, #1
    10a4:	d137      	bne.n	1116 <MdmConnect_HttpConnectionSchedule+0x17e>
                if(ConnectionResponse.atCmd == CMD_AT_KHTTP_GET)
    10a6:	4b54      	ldr	r3, [pc, #336]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    10a8:	7a1b      	ldrb	r3, [r3, #8]
    10aa:	2b18      	cmp	r3, #24
    10ac:	d125      	bne.n	10fa <MdmConnect_HttpConnectionSchedule+0x162>
                    if(ConnectionResponse.length > 23)
    10ae:	4b52      	ldr	r3, [pc, #328]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    10b0:	895c      	ldrh	r4, [r3, #10]
    10b2:	2c17      	cmp	r4, #23
    10b4:	d915      	bls.n	10e2 <MdmConnect_HttpConnectionSchedule+0x14a>
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    10b6:	68dd      	ldr	r5, [r3, #12]
    if(0==memcmp(response,"CONNECT\r\nHTTP/1.1 200 OK",24))
    10b8:	2218      	movs	r2, #24
    10ba:	4962      	ldr	r1, [pc, #392]	; (1244 <MdmConnect_HttpConnectionSchedule+0x2ac>)
    10bc:	4628      	mov	r0, r5
    10be:	4b62      	ldr	r3, [pc, #392]	; (1248 <MdmConnect_HttpConnectionSchedule+0x2b0>)
    10c0:	4798      	blx	r3
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    10c2:	b118      	cbz	r0, 10cc <MdmConnect_HttpConnectionSchedule+0x134>
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    10c4:	2205      	movs	r2, #5
    10c6:	4b4c      	ldr	r3, [pc, #304]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    10c8:	70da      	strb	r2, [r3, #3]
    10ca:	e00d      	b.n	10e8 <MdmConnect_HttpConnectionSchedule+0x150>
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    10cc:	4621      	mov	r1, r4
    10ce:	4628      	mov	r0, r5
    10d0:	4b5e      	ldr	r3, [pc, #376]	; (124c <MdmConnect_HttpConnectionSchedule+0x2b4>)
    10d2:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    10d4:	485e      	ldr	r0, [pc, #376]	; (1250 <MdmConnect_HttpConnectionSchedule+0x2b8>)
    10d6:	4b4b      	ldr	r3, [pc, #300]	; (1204 <MdmConnect_HttpConnectionSchedule+0x26c>)
    10d8:	4798      	blx	r3
                            gHttpConnectedSubState = CONNECTED_SEND_DATA_PACKETS_TO_SERVER;
    10da:	2203      	movs	r2, #3
    10dc:	4b46      	ldr	r3, [pc, #280]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    10de:	70da      	strb	r2, [r3, #3]
    10e0:	e002      	b.n	10e8 <MdmConnect_HttpConnectionSchedule+0x150>
                        gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    10e2:	2205      	movs	r2, #5
    10e4:	4b44      	ldr	r3, [pc, #272]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    10e6:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    10e8:	4b43      	ldr	r3, [pc, #268]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    10ea:	68d8      	ldr	r0, [r3, #12]
    10ec:	4b59      	ldr	r3, [pc, #356]	; (1254 <MdmConnect_HttpConnectionSchedule+0x2bc>)
    10ee:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    10f0:	f641 3058 	movw	r0, #7000	; 0x1b58
    10f4:	4b47      	ldr	r3, [pc, #284]	; (1214 <MdmConnect_HttpConnectionSchedule+0x27c>)
    10f6:	4798      	blx	r3
    10f8:	e757      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Failed to receive connection response in RX mode");
    10fa:	4857      	ldr	r0, [pc, #348]	; (1258 <MdmConnect_HttpConnectionSchedule+0x2c0>)
    10fc:	4b41      	ldr	r3, [pc, #260]	; (1204 <MdmConnect_HttpConnectionSchedule+0x26c>)
    10fe:	4798      	blx	r3
                    gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    1100:	4b3d      	ldr	r3, [pc, #244]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    1102:	2205      	movs	r2, #5
    1104:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    1106:	68d8      	ldr	r0, [r3, #12]
    1108:	4b52      	ldr	r3, [pc, #328]	; (1254 <MdmConnect_HttpConnectionSchedule+0x2bc>)
    110a:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    110c:	f641 3058 	movw	r0, #7000	; 0x1b58
    1110:	4b40      	ldr	r3, [pc, #256]	; (1214 <MdmConnect_HttpConnectionSchedule+0x27c>)
    1112:	4798      	blx	r3
    1114:	e749      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    1116:	2205      	movs	r2, #5
    1118:	4b37      	ldr	r3, [pc, #220]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    111a:	70da      	strb	r2, [r3, #3]
                vTaskDelay(reTransmissionDelayMs);
    111c:	f641 3058 	movw	r0, #7000	; 0x1b58
    1120:	4b3c      	ldr	r3, [pc, #240]	; (1214 <MdmConnect_HttpConnectionSchedule+0x27c>)
    1122:	4798      	blx	r3
    1124:	e741      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1126:	4b34      	ldr	r3, [pc, #208]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    1128:	2206      	movs	r2, #6
    112a:	70da      	strb	r2, [r3, #3]
            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    112c:	2200      	movs	r2, #0
    112e:	711a      	strb	r2, [r3, #4]
            sessionIdCount = 5;
    1130:	2105      	movs	r1, #5
    1132:	7159      	strb	r1, [r3, #5]
            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1134:	709a      	strb	r2, [r3, #2]
            DEBUG_PRINT("\r\nPerforming the Error Recovery\r\n");
    1136:	4849      	ldr	r0, [pc, #292]	; (125c <MdmConnect_HttpConnectionSchedule+0x2c4>)
    1138:	4c32      	ldr	r4, [pc, #200]	; (1204 <MdmConnect_HttpConnectionSchedule+0x26c>)
    113a:	47a0      	blx	r4
            DEBUG_PRINT("Closing the active connection");
    113c:	4848      	ldr	r0, [pc, #288]	; (1260 <MdmConnect_HttpConnectionSchedule+0x2c8>)
    113e:	47a0      	blx	r4
            vTaskDelay(QueuePushDelayMs);
    1140:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1144:	4b33      	ldr	r3, [pc, #204]	; (1214 <MdmConnect_HttpConnectionSchedule+0x27c>)
    1146:	4798      	blx	r3
    1148:	e72f      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gErrorRecoveryState)
    114a:	4b2b      	ldr	r3, [pc, #172]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    114c:	791b      	ldrb	r3, [r3, #4]
    114e:	2b01      	cmp	r3, #1
    1150:	f000 80e5 	beq.w	131e <MdmConnect_HttpConnectionSchedule+0x386>
    1154:	b1d3      	cbz	r3, 118c <MdmConnect_HttpConnectionSchedule+0x1f4>
    1156:	2b02      	cmp	r3, #2
    1158:	f47f af27 	bne.w	faa <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    115c:	4b26      	ldr	r3, [pc, #152]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    115e:	789b      	ldrb	r3, [r3, #2]
    1160:	2b00      	cmp	r3, #0
    1162:	f000 8162 	beq.w	142a <MdmConnect_HttpConnectionSchedule+0x492>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1166:	2b01      	cmp	r3, #1
    1168:	f47f af1f 	bne.w	faa <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    116c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1170:	4931      	ldr	r1, [pc, #196]	; (1238 <MdmConnect_HttpConnectionSchedule+0x2a0>)
    1172:	4b32      	ldr	r3, [pc, #200]	; (123c <MdmConnect_HttpConnectionSchedule+0x2a4>)
    1174:	6818      	ldr	r0, [r3, #0]
    1176:	4b32      	ldr	r3, [pc, #200]	; (1240 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    1178:	4798      	blx	r3
    117a:	2801      	cmp	r0, #1
    117c:	f000 81c8 	beq.w	1510 <MdmConnect_HttpConnectionSchedule+0x578>
                    DEBUG_PRINT("Problem in Auto Recovery. Rebooting the system....\r\n");
    1180:	4838      	ldr	r0, [pc, #224]	; (1264 <MdmConnect_HttpConnectionSchedule+0x2cc>)
    1182:	4b20      	ldr	r3, [pc, #128]	; (1204 <MdmConnect_HttpConnectionSchedule+0x26c>)
    1184:	4798      	blx	r3
                    requestWatchDogForcedReset();
    1186:	4b38      	ldr	r3, [pc, #224]	; (1268 <MdmConnect_HttpConnectionSchedule+0x2d0>)
    1188:	4798      	blx	r3
}
    118a:	e70e      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    118c:	4b1a      	ldr	r3, [pc, #104]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    118e:	789b      	ldrb	r3, [r3, #2]
    1190:	2b00      	cmp	r3, #0
    1192:	f040 808c 	bne.w	12ae <MdmConnect_HttpConnectionSchedule+0x316>
                if(sessionIdCount > 0)
    1196:	4b18      	ldr	r3, [pc, #96]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    1198:	795b      	ldrb	r3, [r3, #5]
    119a:	2b00      	cmp	r3, #0
    119c:	d07e      	beq.n	129c <MdmConnect_HttpConnectionSchedule+0x304>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    119e:	4b1e      	ldr	r3, [pc, #120]	; (1218 <MdmConnect_HttpConnectionSchedule+0x280>)
    11a0:	6818      	ldr	r0, [r3, #0]
    11a2:	4b1e      	ldr	r3, [pc, #120]	; (121c <MdmConnect_HttpConnectionSchedule+0x284>)
    11a4:	4798      	blx	r3
    11a6:	2800      	cmp	r0, #0
    11a8:	d174      	bne.n	1294 <MdmConnect_HttpConnectionSchedule+0x2fc>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    11aa:	2100      	movs	r1, #0
    11ac:	4b1c      	ldr	r3, [pc, #112]	; (1220 <MdmConnect_HttpConnectionSchedule+0x288>)
    11ae:	6818      	ldr	r0, [r3, #0]
    11b0:	4b1c      	ldr	r3, [pc, #112]	; (1224 <MdmConnect_HttpConnectionSchedule+0x28c>)
    11b2:	4798      	blx	r3
    11b4:	2801      	cmp	r0, #1
    11b6:	d003      	beq.n	11c0 <MdmConnect_HttpConnectionSchedule+0x228>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    11b8:	481b      	ldr	r0, [pc, #108]	; (1228 <MdmConnect_HttpConnectionSchedule+0x290>)
    11ba:	4b12      	ldr	r3, [pc, #72]	; (1204 <MdmConnect_HttpConnectionSchedule+0x26c>)
    11bc:	4798      	blx	r3
    11be:	e6f4      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    11c0:	2301      	movs	r3, #1
    11c2:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
    11c6:	4b0c      	ldr	r3, [pc, #48]	; (11f8 <MdmConnect_HttpConnectionSchedule+0x260>)
    11c8:	7958      	ldrb	r0, [r3, #5]
    11ca:	4b28      	ldr	r3, [pc, #160]	; (126c <MdmConnect_HttpConnectionSchedule+0x2d4>)
    11cc:	4798      	blx	r3
    11ce:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
    11d2:	2300      	movs	r3, #0
    11d4:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    11d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    11da:	4669      	mov	r1, sp
    11dc:	480e      	ldr	r0, [pc, #56]	; (1218 <MdmConnect_HttpConnectionSchedule+0x280>)
    11de:	6800      	ldr	r0, [r0, #0]
    11e0:	4c12      	ldr	r4, [pc, #72]	; (122c <MdmConnect_HttpConnectionSchedule+0x294>)
    11e2:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
    11e4:	2801      	cmp	r0, #1
    11e6:	d045      	beq.n	1274 <MdmConnect_HttpConnectionSchedule+0x2dc>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    11e8:	4821      	ldr	r0, [pc, #132]	; (1270 <MdmConnect_HttpConnectionSchedule+0x2d8>)
    11ea:	4b06      	ldr	r3, [pc, #24]	; (1204 <MdmConnect_HttpConnectionSchedule+0x26c>)
    11ec:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
    11ee:	f640 10c4 	movw	r0, #2500	; 0x9c4
    11f2:	4b08      	ldr	r3, [pc, #32]	; (1214 <MdmConnect_HttpConnectionSchedule+0x27c>)
    11f4:	4798      	blx	r3
    11f6:	e6d8      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
    11f8:	200001ec 	.word	0x200001ec
    11fc:	00001a21 	.word	0x00001a21
    1200:	00007b80 	.word	0x00007b80
    1204:	00001f55 	.word	0x00001f55
    1208:	000005e9 	.word	0x000005e9
    120c:	00001779 	.word	0x00001779
    1210:	00000409 	.word	0x00000409
    1214:	00005a4d 	.word	0x00005a4d
    1218:	20003480 	.word	0x20003480
    121c:	00005389 	.word	0x00005389
    1220:	2000348c 	.word	0x2000348c
    1224:	000051a9 	.word	0x000051a9
    1228:	0000776c 	.word	0x0000776c
    122c:	00004d11 	.word	0x00004d11
    1230:	0000797c 	.word	0x0000797c
    1234:	00007798 	.word	0x00007798
    1238:	200001f4 	.word	0x200001f4
    123c:	20003460 	.word	0x20003460
    1240:	00005021 	.word	0x00005021
    1244:	00007b9c 	.word	0x00007b9c
    1248:	00006589 	.word	0x00006589
    124c:	00001f11 	.word	0x00001f11
    1250:	00007f40 	.word	0x00007f40
    1254:	000049e9 	.word	0x000049e9
    1258:	000077f8 	.word	0x000077f8
    125c:	00007bb8 	.word	0x00007bb8
    1260:	00007bdc 	.word	0x00007bdc
    1264:	00007bfc 	.word	0x00007bfc
    1268:	00002119 	.word	0x00002119
    126c:	00000569 	.word	0x00000569
    1270:	00007738 	.word	0x00007738
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
    1274:	2300      	movs	r3, #0
    1276:	461a      	mov	r2, r3
    1278:	4619      	mov	r1, r3
    127a:	488b      	ldr	r0, [pc, #556]	; (14a8 <MdmConnect_HttpConnectionSchedule+0x510>)
    127c:	6800      	ldr	r0, [r0, #0]
    127e:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1280:	4b8a      	ldr	r3, [pc, #552]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    1282:	2201      	movs	r2, #1
    1284:	709a      	strb	r2, [r3, #2]
                                gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1286:	2206      	movs	r2, #6
    1288:	70da      	strb	r2, [r3, #3]
                                vTaskDelay(TransmitDelayMs);
    128a:	f640 10c4 	movw	r0, #2500	; 0x9c4
    128e:	4b88      	ldr	r3, [pc, #544]	; (14b0 <MdmConnect_HttpConnectionSchedule+0x518>)
    1290:	4798      	blx	r3
    1292:	e68a      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Transmit Queue is not empty");
    1294:	4887      	ldr	r0, [pc, #540]	; (14b4 <MdmConnect_HttpConnectionSchedule+0x51c>)
    1296:	4b88      	ldr	r3, [pc, #544]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    1298:	4798      	blx	r3
    129a:	e686      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("No More Active Connections to close");
    129c:	4887      	ldr	r0, [pc, #540]	; (14bc <MdmConnect_HttpConnectionSchedule+0x524>)
    129e:	4b86      	ldr	r3, [pc, #536]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    12a0:	4798      	blx	r3
                    gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    12a2:	4b82      	ldr	r3, [pc, #520]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    12a4:	2201      	movs	r2, #1
    12a6:	711a      	strb	r2, [r3, #4]
                    gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    12a8:	2206      	movs	r2, #6
    12aa:	70da      	strb	r2, [r3, #3]
    12ac:	e67d      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    12ae:	2b01      	cmp	r3, #1
    12b0:	f47f ae7b 	bne.w	faa <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    12b4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    12b8:	4981      	ldr	r1, [pc, #516]	; (14c0 <MdmConnect_HttpConnectionSchedule+0x528>)
    12ba:	4b82      	ldr	r3, [pc, #520]	; (14c4 <MdmConnect_HttpConnectionSchedule+0x52c>)
    12bc:	6818      	ldr	r0, [r3, #0]
    12be:	4b82      	ldr	r3, [pc, #520]	; (14c8 <MdmConnect_HttpConnectionSchedule+0x530>)
    12c0:	4798      	blx	r3
    12c2:	2801      	cmp	r0, #1
    12c4:	d125      	bne.n	1312 <MdmConnect_HttpConnectionSchedule+0x37a>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
    12c6:	4b79      	ldr	r3, [pc, #484]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    12c8:	7a1d      	ldrb	r5, [r3, #8]
    12ca:	795c      	ldrb	r4, [r3, #5]
    12cc:	4620      	mov	r0, r4
    12ce:	4b7f      	ldr	r3, [pc, #508]	; (14cc <MdmConnect_HttpConnectionSchedule+0x534>)
    12d0:	4798      	blx	r3
    12d2:	4285      	cmp	r5, r0
    12d4:	d113      	bne.n	12fe <MdmConnect_HttpConnectionSchedule+0x366>
                        if(sessionIdCount > 0)
    12d6:	b14c      	cbz	r4, 12ec <MdmConnect_HttpConnectionSchedule+0x354>
                            sessionIdCount--;
    12d8:	4b74      	ldr	r3, [pc, #464]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    12da:	3c01      	subs	r4, #1
    12dc:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    12de:	2200      	movs	r2, #0
    12e0:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    12e2:	4b72      	ldr	r3, [pc, #456]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    12e4:	68d8      	ldr	r0, [r3, #12]
    12e6:	4b7a      	ldr	r3, [pc, #488]	; (14d0 <MdmConnect_HttpConnectionSchedule+0x538>)
    12e8:	4798      	blx	r3
    12ea:	e65e      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                            gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    12ec:	4b6f      	ldr	r3, [pc, #444]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    12ee:	2201      	movs	r2, #1
    12f0:	711a      	strb	r2, [r3, #4]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    12f2:	2206      	movs	r2, #6
    12f4:	70da      	strb	r2, [r3, #3]
                            DEBUG_PRINT("Closed All Active Connections");
    12f6:	4877      	ldr	r0, [pc, #476]	; (14d4 <MdmConnect_HttpConnectionSchedule+0x53c>)
    12f8:	4b6f      	ldr	r3, [pc, #444]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    12fa:	4798      	blx	r3
    12fc:	e7f1      	b.n	12e2 <MdmConnect_HttpConnectionSchedule+0x34a>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    12fe:	4876      	ldr	r0, [pc, #472]	; (14d8 <MdmConnect_HttpConnectionSchedule+0x540>)
    1300:	4b6d      	ldr	r3, [pc, #436]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    1302:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1304:	4b69      	ldr	r3, [pc, #420]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    1306:	2200      	movs	r2, #0
    1308:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    130a:	68d8      	ldr	r0, [r3, #12]
    130c:	4b70      	ldr	r3, [pc, #448]	; (14d0 <MdmConnect_HttpConnectionSchedule+0x538>)
    130e:	4798      	blx	r3
    1310:	e64b      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Problem in Auto Recovery. Rebooting the system....\r\n");
    1312:	4872      	ldr	r0, [pc, #456]	; (14dc <MdmConnect_HttpConnectionSchedule+0x544>)
    1314:	4b68      	ldr	r3, [pc, #416]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    1316:	4798      	blx	r3
                    requestWatchDogForcedReset();
    1318:	4b71      	ldr	r3, [pc, #452]	; (14e0 <MdmConnect_HttpConnectionSchedule+0x548>)
    131a:	4798      	blx	r3
    131c:	e645      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    131e:	4b63      	ldr	r3, [pc, #396]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    1320:	789b      	ldrb	r3, [r3, #2]
    1322:	2b00      	cmp	r3, #0
    1324:	d02a      	beq.n	137c <MdmConnect_HttpConnectionSchedule+0x3e4>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1326:	2b01      	cmp	r3, #1
    1328:	f47f ae3f 	bne.w	faa <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    132c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1330:	4963      	ldr	r1, [pc, #396]	; (14c0 <MdmConnect_HttpConnectionSchedule+0x528>)
    1332:	4b64      	ldr	r3, [pc, #400]	; (14c4 <MdmConnect_HttpConnectionSchedule+0x52c>)
    1334:	6818      	ldr	r0, [r3, #0]
    1336:	4b64      	ldr	r3, [pc, #400]	; (14c8 <MdmConnect_HttpConnectionSchedule+0x530>)
    1338:	4798      	blx	r3
    133a:	2801      	cmp	r0, #1
    133c:	d16f      	bne.n	141e <MdmConnect_HttpConnectionSchedule+0x486>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
    133e:	4b5b      	ldr	r3, [pc, #364]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    1340:	7a1b      	ldrb	r3, [r3, #8]
    1342:	2b1a      	cmp	r3, #26
    1344:	d161      	bne.n	140a <MdmConnect_HttpConnectionSchedule+0x472>
                    	if(false != validateCommonCommandResponse(ConnectionResponse.response))
    1346:	4b59      	ldr	r3, [pc, #356]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    1348:	68d8      	ldr	r0, [r3, #12]
    134a:	4b66      	ldr	r3, [pc, #408]	; (14e4 <MdmConnect_HttpConnectionSchedule+0x54c>)
    134c:	4798      	blx	r3
    134e:	2800      	cmp	r0, #0
    1350:	d052      	beq.n	13f8 <MdmConnect_HttpConnectionSchedule+0x460>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
    1352:	4865      	ldr	r0, [pc, #404]	; (14e8 <MdmConnect_HttpConnectionSchedule+0x550>)
    1354:	4d58      	ldr	r5, [pc, #352]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    1356:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1358:	4c54      	ldr	r4, [pc, #336]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    135a:	8961      	ldrh	r1, [r4, #10]
    135c:	68e0      	ldr	r0, [r4, #12]
    135e:	4b63      	ldr	r3, [pc, #396]	; (14ec <MdmConnect_HttpConnectionSchedule+0x554>)
    1360:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    1362:	4863      	ldr	r0, [pc, #396]	; (14f0 <MdmConnect_HttpConnectionSchedule+0x558>)
    1364:	47a8      	blx	r5
                            gErrorRecoveryState = PDP_PERFORM_PS_CONNECTION_DETACH;
    1366:	2302      	movs	r3, #2
    1368:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    136a:	2300      	movs	r3, #0
    136c:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    136e:	2306      	movs	r3, #6
    1370:	70e3      	strb	r3, [r4, #3]
                        vPortFree(ConnectionResponse.response);
    1372:	4b4e      	ldr	r3, [pc, #312]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    1374:	68d8      	ldr	r0, [r3, #12]
    1376:	4b56      	ldr	r3, [pc, #344]	; (14d0 <MdmConnect_HttpConnectionSchedule+0x538>)
    1378:	4798      	blx	r3
    137a:	e616      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    137c:	4b5d      	ldr	r3, [pc, #372]	; (14f4 <MdmConnect_HttpConnectionSchedule+0x55c>)
    137e:	6818      	ldr	r0, [r3, #0]
    1380:	4b5d      	ldr	r3, [pc, #372]	; (14f8 <MdmConnect_HttpConnectionSchedule+0x560>)
    1382:	4798      	blx	r3
    1384:	2800      	cmp	r0, #0
    1386:	d133      	bne.n	13f0 <MdmConnect_HttpConnectionSchedule+0x458>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1388:	2100      	movs	r1, #0
    138a:	4b47      	ldr	r3, [pc, #284]	; (14a8 <MdmConnect_HttpConnectionSchedule+0x510>)
    138c:	6818      	ldr	r0, [r3, #0]
    138e:	4b5b      	ldr	r3, [pc, #364]	; (14fc <MdmConnect_HttpConnectionSchedule+0x564>)
    1390:	4798      	blx	r3
    1392:	2801      	cmp	r0, #1
    1394:	d003      	beq.n	139e <MdmConnect_HttpConnectionSchedule+0x406>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1396:	485a      	ldr	r0, [pc, #360]	; (1500 <MdmConnect_HttpConnectionSchedule+0x568>)
    1398:	4b47      	ldr	r3, [pc, #284]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    139a:	4798      	blx	r3
    139c:	e605      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    139e:	2301      	movs	r3, #1
    13a0:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
    13a4:	231a      	movs	r3, #26
    13a6:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    13aa:	2300      	movs	r3, #0
    13ac:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    13ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    13b2:	4669      	mov	r1, sp
    13b4:	484f      	ldr	r0, [pc, #316]	; (14f4 <MdmConnect_HttpConnectionSchedule+0x55c>)
    13b6:	6800      	ldr	r0, [r0, #0]
    13b8:	4c52      	ldr	r4, [pc, #328]	; (1504 <MdmConnect_HttpConnectionSchedule+0x56c>)
    13ba:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    13bc:	2801      	cmp	r0, #1
    13be:	d007      	beq.n	13d0 <MdmConnect_HttpConnectionSchedule+0x438>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    13c0:	4851      	ldr	r0, [pc, #324]	; (1508 <MdmConnect_HttpConnectionSchedule+0x570>)
    13c2:	4b3d      	ldr	r3, [pc, #244]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    13c4:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    13c6:	f640 10c4 	movw	r0, #2500	; 0x9c4
    13ca:	4b39      	ldr	r3, [pc, #228]	; (14b0 <MdmConnect_HttpConnectionSchedule+0x518>)
    13cc:	4798      	blx	r3
    13ce:	e5ec      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    13d0:	2300      	movs	r3, #0
    13d2:	461a      	mov	r2, r3
    13d4:	4619      	mov	r1, r3
    13d6:	4834      	ldr	r0, [pc, #208]	; (14a8 <MdmConnect_HttpConnectionSchedule+0x510>)
    13d8:	6800      	ldr	r0, [r0, #0]
    13da:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    13dc:	4b33      	ldr	r3, [pc, #204]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    13de:	2201      	movs	r2, #1
    13e0:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    13e2:	2206      	movs	r2, #6
    13e4:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    13e6:	f640 10c4 	movw	r0, #2500	; 0x9c4
    13ea:	4b31      	ldr	r3, [pc, #196]	; (14b0 <MdmConnect_HttpConnectionSchedule+0x518>)
    13ec:	4798      	blx	r3
    13ee:	e5dc      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    13f0:	4830      	ldr	r0, [pc, #192]	; (14b4 <MdmConnect_HttpConnectionSchedule+0x51c>)
    13f2:	4b31      	ldr	r3, [pc, #196]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    13f4:	4798      	blx	r3
    13f6:	e5d8      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                    		DEBUG_PRINT("Expected Response Not Received. Retrying...");
    13f8:	4844      	ldr	r0, [pc, #272]	; (150c <MdmConnect_HttpConnectionSchedule+0x574>)
    13fa:	4c2f      	ldr	r4, [pc, #188]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    13fc:	47a0      	blx	r4
                    		DEBUG_PRINT("\r\n");
    13fe:	483c      	ldr	r0, [pc, #240]	; (14f0 <MdmConnect_HttpConnectionSchedule+0x558>)
    1400:	47a0      	blx	r4
                    		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1402:	2200      	movs	r2, #0
    1404:	4b29      	ldr	r3, [pc, #164]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    1406:	709a      	strb	r2, [r3, #2]
    1408:	e7b3      	b.n	1372 <MdmConnect_HttpConnectionSchedule+0x3da>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    140a:	4833      	ldr	r0, [pc, #204]	; (14d8 <MdmConnect_HttpConnectionSchedule+0x540>)
    140c:	4b2a      	ldr	r3, [pc, #168]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    140e:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1410:	4b26      	ldr	r3, [pc, #152]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    1412:	2200      	movs	r2, #0
    1414:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1416:	68d8      	ldr	r0, [r3, #12]
    1418:	4b2d      	ldr	r3, [pc, #180]	; (14d0 <MdmConnect_HttpConnectionSchedule+0x538>)
    141a:	4798      	blx	r3
    141c:	e5c5      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Problem in Auto Recovery. Rebooting the system....\r\n");
    141e:	482f      	ldr	r0, [pc, #188]	; (14dc <MdmConnect_HttpConnectionSchedule+0x544>)
    1420:	4b25      	ldr	r3, [pc, #148]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    1422:	4798      	blx	r3
                    requestWatchDogForcedReset();
    1424:	4b2e      	ldr	r3, [pc, #184]	; (14e0 <MdmConnect_HttpConnectionSchedule+0x548>)
    1426:	4798      	blx	r3
    1428:	e5bf      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    142a:	4b32      	ldr	r3, [pc, #200]	; (14f4 <MdmConnect_HttpConnectionSchedule+0x55c>)
    142c:	6818      	ldr	r0, [r3, #0]
    142e:	4b32      	ldr	r3, [pc, #200]	; (14f8 <MdmConnect_HttpConnectionSchedule+0x560>)
    1430:	4798      	blx	r3
    1432:	2800      	cmp	r0, #0
    1434:	d133      	bne.n	149e <MdmConnect_HttpConnectionSchedule+0x506>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1436:	2100      	movs	r1, #0
    1438:	4b1b      	ldr	r3, [pc, #108]	; (14a8 <MdmConnect_HttpConnectionSchedule+0x510>)
    143a:	6818      	ldr	r0, [r3, #0]
    143c:	4b2f      	ldr	r3, [pc, #188]	; (14fc <MdmConnect_HttpConnectionSchedule+0x564>)
    143e:	4798      	blx	r3
    1440:	2801      	cmp	r0, #1
    1442:	d003      	beq.n	144c <MdmConnect_HttpConnectionSchedule+0x4b4>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1444:	482e      	ldr	r0, [pc, #184]	; (1500 <MdmConnect_HttpConnectionSchedule+0x568>)
    1446:	4b1c      	ldr	r3, [pc, #112]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    1448:	4798      	blx	r3
    144a:	e5ae      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    144c:	2301      	movs	r3, #1
    144e:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
    1452:	231b      	movs	r3, #27
    1454:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1458:	2300      	movs	r3, #0
    145a:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    145c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1460:	4669      	mov	r1, sp
    1462:	4824      	ldr	r0, [pc, #144]	; (14f4 <MdmConnect_HttpConnectionSchedule+0x55c>)
    1464:	6800      	ldr	r0, [r0, #0]
    1466:	4c27      	ldr	r4, [pc, #156]	; (1504 <MdmConnect_HttpConnectionSchedule+0x56c>)
    1468:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    146a:	2801      	cmp	r0, #1
    146c:	d007      	beq.n	147e <MdmConnect_HttpConnectionSchedule+0x4e6>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    146e:	4826      	ldr	r0, [pc, #152]	; (1508 <MdmConnect_HttpConnectionSchedule+0x570>)
    1470:	4b11      	ldr	r3, [pc, #68]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    1472:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1474:	f640 10c4 	movw	r0, #2500	; 0x9c4
    1478:	4b0d      	ldr	r3, [pc, #52]	; (14b0 <MdmConnect_HttpConnectionSchedule+0x518>)
    147a:	4798      	blx	r3
    147c:	e595      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    147e:	2300      	movs	r3, #0
    1480:	461a      	mov	r2, r3
    1482:	4619      	mov	r1, r3
    1484:	4808      	ldr	r0, [pc, #32]	; (14a8 <MdmConnect_HttpConnectionSchedule+0x510>)
    1486:	6800      	ldr	r0, [r0, #0]
    1488:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    148a:	4b08      	ldr	r3, [pc, #32]	; (14ac <MdmConnect_HttpConnectionSchedule+0x514>)
    148c:	2201      	movs	r2, #1
    148e:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1490:	2206      	movs	r2, #6
    1492:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    1494:	f640 10c4 	movw	r0, #2500	; 0x9c4
    1498:	4b05      	ldr	r3, [pc, #20]	; (14b0 <MdmConnect_HttpConnectionSchedule+0x518>)
    149a:	4798      	blx	r3
    149c:	e585      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    149e:	4805      	ldr	r0, [pc, #20]	; (14b4 <MdmConnect_HttpConnectionSchedule+0x51c>)
    14a0:	4b05      	ldr	r3, [pc, #20]	; (14b8 <MdmConnect_HttpConnectionSchedule+0x520>)
    14a2:	4798      	blx	r3
    14a4:	e581      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
    14a6:	bf00      	nop
    14a8:	2000348c 	.word	0x2000348c
    14ac:	200001ec 	.word	0x200001ec
    14b0:	00005a4d 	.word	0x00005a4d
    14b4:	00007798 	.word	0x00007798
    14b8:	00001f55 	.word	0x00001f55
    14bc:	000077b4 	.word	0x000077b4
    14c0:	200001f4 	.word	0x200001f4
    14c4:	20003460 	.word	0x20003460
    14c8:	00005021 	.word	0x00005021
    14cc:	00000569 	.word	0x00000569
    14d0:	000049e9 	.word	0x000049e9
    14d4:	000077d8 	.word	0x000077d8
    14d8:	000077f8 	.word	0x000077f8
    14dc:	00007bfc 	.word	0x00007bfc
    14e0:	00002119 	.word	0x00002119
    14e4:	000005a9 	.word	0x000005a9
    14e8:	0000782c 	.word	0x0000782c
    14ec:	00001f11 	.word	0x00001f11
    14f0:	00007f40 	.word	0x00007f40
    14f4:	20003480 	.word	0x20003480
    14f8:	00005389 	.word	0x00005389
    14fc:	000051a9 	.word	0x000051a9
    1500:	0000776c 	.word	0x0000776c
    1504:	00004d11 	.word	0x00004d11
    1508:	00007738 	.word	0x00007738
    150c:	0000784c 	.word	0x0000784c
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
    1510:	4b26      	ldr	r3, [pc, #152]	; (15ac <MdmConnect_HttpConnectionSchedule+0x614>)
    1512:	7a1b      	ldrb	r3, [r3, #8]
    1514:	2b1b      	cmp	r3, #27
    1516:	d13d      	bne.n	1594 <MdmConnect_HttpConnectionSchedule+0x5fc>
                    	if(false != validateCommonCommandResponse(ConnectionResponse.response))
    1518:	4b24      	ldr	r3, [pc, #144]	; (15ac <MdmConnect_HttpConnectionSchedule+0x614>)
    151a:	68d8      	ldr	r0, [r3, #12]
    151c:	4b24      	ldr	r3, [pc, #144]	; (15b0 <MdmConnect_HttpConnectionSchedule+0x618>)
    151e:	4798      	blx	r3
    1520:	2800      	cmp	r0, #0
    1522:	d02b      	beq.n	157c <MdmConnect_HttpConnectionSchedule+0x5e4>
                            DEBUG_PRINT("Detached the PDP PS");
    1524:	4823      	ldr	r0, [pc, #140]	; (15b4 <MdmConnect_HttpConnectionSchedule+0x61c>)
    1526:	4d24      	ldr	r5, [pc, #144]	; (15b8 <MdmConnect_HttpConnectionSchedule+0x620>)
    1528:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    152a:	4c20      	ldr	r4, [pc, #128]	; (15ac <MdmConnect_HttpConnectionSchedule+0x614>)
    152c:	8961      	ldrh	r1, [r4, #10]
    152e:	68e0      	ldr	r0, [r4, #12]
    1530:	4b22      	ldr	r3, [pc, #136]	; (15bc <MdmConnect_HttpConnectionSchedule+0x624>)
    1532:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    1534:	4822      	ldr	r0, [pc, #136]	; (15c0 <MdmConnect_HttpConnectionSchedule+0x628>)
    1536:	47a8      	blx	r5
                            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    1538:	2300      	movs	r3, #0
    153a:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    153c:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    153e:	70e3      	strb	r3, [r4, #3]
                            gHttpConnectionState = MDM_HTTP_DISCONNECTED;
    1540:	7023      	strb	r3, [r4, #0]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    1542:	7063      	strb	r3, [r4, #1]
                            sessionIdCount = 5;
    1544:	2305      	movs	r3, #5
    1546:	7163      	strb	r3, [r4, #5]
                            DEBUG_PRINT("Error Recovery Completed\r\n");
    1548:	481e      	ldr	r0, [pc, #120]	; (15c4 <MdmConnect_HttpConnectionSchedule+0x62c>)
    154a:	47a8      	blx	r5
                            DEBUG_PRINT("=================================================\r\n");
    154c:	481e      	ldr	r0, [pc, #120]	; (15c8 <MdmConnect_HttpConnectionSchedule+0x630>)
    154e:	47a8      	blx	r5
                            DEBUG_PRINT("Establishing a new connection with server");
    1550:	481e      	ldr	r0, [pc, #120]	; (15cc <MdmConnect_HttpConnectionSchedule+0x634>)
    1552:	47a8      	blx	r5
                            errorRecoveryCnt++;
    1554:	7c63      	ldrb	r3, [r4, #17]
    1556:	3301      	adds	r3, #1
    1558:	7463      	strb	r3, [r4, #17]
                            vPortFree(ConnectionResponse.response);
    155a:	68e0      	ldr	r0, [r4, #12]
    155c:	4b1c      	ldr	r3, [pc, #112]	; (15d0 <MdmConnect_HttpConnectionSchedule+0x638>)
    155e:	4798      	blx	r3
                            if(errorRecoveryCnt >=3)
    1560:	7c63      	ldrb	r3, [r4, #17]
    1562:	2b02      	cmp	r3, #2
    1564:	f67f ad21 	bls.w	faa <MdmConnect_HttpConnectionSchedule+0x12>
                                DEBUG_PRINT("System is auto recovered for more than 3 times.");
    1568:	481a      	ldr	r0, [pc, #104]	; (15d4 <MdmConnect_HttpConnectionSchedule+0x63c>)
    156a:	47a8      	blx	r5
                                DEBUG_PRINT("Performing a system restart....................\r\n");
    156c:	481a      	ldr	r0, [pc, #104]	; (15d8 <MdmConnect_HttpConnectionSchedule+0x640>)
    156e:	47a8      	blx	r5
                                errorRecoveryCnt = 0;
    1570:	2200      	movs	r2, #0
    1572:	4b0e      	ldr	r3, [pc, #56]	; (15ac <MdmConnect_HttpConnectionSchedule+0x614>)
    1574:	745a      	strb	r2, [r3, #17]
                                requestWatchDogForcedReset();
    1576:	4b19      	ldr	r3, [pc, #100]	; (15dc <MdmConnect_HttpConnectionSchedule+0x644>)
    1578:	4798      	blx	r3
    157a:	e516      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                    		DEBUG_PRINT("Expected Response Not Received. Retrying...");
    157c:	4818      	ldr	r0, [pc, #96]	; (15e0 <MdmConnect_HttpConnectionSchedule+0x648>)
    157e:	4c0e      	ldr	r4, [pc, #56]	; (15b8 <MdmConnect_HttpConnectionSchedule+0x620>)
    1580:	47a0      	blx	r4
                    		DEBUG_PRINT("\r\n");
    1582:	480f      	ldr	r0, [pc, #60]	; (15c0 <MdmConnect_HttpConnectionSchedule+0x628>)
    1584:	47a0      	blx	r4
                    		gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1586:	4b09      	ldr	r3, [pc, #36]	; (15ac <MdmConnect_HttpConnectionSchedule+0x614>)
    1588:	2200      	movs	r2, #0
    158a:	709a      	strb	r2, [r3, #2]
                    		vPortFree(ConnectionResponse.response);
    158c:	68d8      	ldr	r0, [r3, #12]
    158e:	4b10      	ldr	r3, [pc, #64]	; (15d0 <MdmConnect_HttpConnectionSchedule+0x638>)
    1590:	4798      	blx	r3
    1592:	e50a      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1594:	4813      	ldr	r0, [pc, #76]	; (15e4 <MdmConnect_HttpConnectionSchedule+0x64c>)
    1596:	4b08      	ldr	r3, [pc, #32]	; (15b8 <MdmConnect_HttpConnectionSchedule+0x620>)
    1598:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    159a:	4b04      	ldr	r3, [pc, #16]	; (15ac <MdmConnect_HttpConnectionSchedule+0x614>)
    159c:	2200      	movs	r2, #0
    159e:	709a      	strb	r2, [r3, #2]
                        gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    15a0:	2206      	movs	r2, #6
    15a2:	70da      	strb	r2, [r3, #3]
                        vPortFree(ConnectionResponse.response);
    15a4:	68d8      	ldr	r0, [r3, #12]
    15a6:	4b0a      	ldr	r3, [pc, #40]	; (15d0 <MdmConnect_HttpConnectionSchedule+0x638>)
    15a8:	4798      	blx	r3
    15aa:	e4fe      	b.n	faa <MdmConnect_HttpConnectionSchedule+0x12>
    15ac:	200001ec 	.word	0x200001ec
    15b0:	000005a9 	.word	0x000005a9
    15b4:	000078a8 	.word	0x000078a8
    15b8:	00001f55 	.word	0x00001f55
    15bc:	00001f11 	.word	0x00001f11
    15c0:	00007f40 	.word	0x00007f40
    15c4:	00007c34 	.word	0x00007c34
    15c8:	00007c50 	.word	0x00007c50
    15cc:	00007c84 	.word	0x00007c84
    15d0:	000049e9 	.word	0x000049e9
    15d4:	00007cb0 	.word	0x00007cb0
    15d8:	00007ce0 	.word	0x00007ce0
    15dc:	00002119 	.word	0x00002119
    15e0:	0000784c 	.word	0x0000784c
    15e4:	000077f8 	.word	0x000077f8

000015e8 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
    15e8:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
    15ea:	490d      	ldr	r1, [pc, #52]	; (1620 <mdmCtrlr_DataCommInit+0x38>)
    15ec:	480d      	ldr	r0, [pc, #52]	; (1624 <mdmCtrlr_DataCommInit+0x3c>)
    15ee:	4b0e      	ldr	r3, [pc, #56]	; (1628 <mdmCtrlr_DataCommInit+0x40>)
    15f0:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
    15f2:	b100      	cbz	r0, 15f6 <mdmCtrlr_DataCommInit+0xe>
    15f4:	bd10      	pop	{r4, pc}
	{
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
    15f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    15fa:	490c      	ldr	r1, [pc, #48]	; (162c <mdmCtrlr_DataCommInit+0x44>)
    15fc:	480c      	ldr	r0, [pc, #48]	; (1630 <mdmCtrlr_DataCommInit+0x48>)
    15fe:	4b0d      	ldr	r3, [pc, #52]	; (1634 <mdmCtrlr_DataCommInit+0x4c>)
    1600:	4798      	blx	r3
	}
	
	if(initStatus == ERR_NONE)
    1602:	2800      	cmp	r0, #0
    1604:	d1f6      	bne.n	15f4 <mdmCtrlr_DataCommInit+0xc>
	{
		/* Enable all of the UART interrupts for SERCOM3 */
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
    1606:	4c07      	ldr	r4, [pc, #28]	; (1624 <mdmCtrlr_DataCommInit+0x3c>)
    1608:	2201      	movs	r2, #1
    160a:	4611      	mov	r1, r2
    160c:	4620      	mov	r0, r4
    160e:	4b0a      	ldr	r3, [pc, #40]	; (1638 <mdmCtrlr_DataCommInit+0x50>)
    1610:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
    1612:	4620      	mov	r0, r4
    1614:	4b09      	ldr	r3, [pc, #36]	; (163c <mdmCtrlr_DataCommInit+0x54>)
    1616:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
    1618:	4b09      	ldr	r3, [pc, #36]	; (1640 <mdmCtrlr_DataCommInit+0x58>)
    161a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
	}
	else
	{
		//DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
	}
}
    161e:	e7e9      	b.n	15f4 <mdmCtrlr_DataCommInit+0xc>
    1620:	41014000 	.word	0x41014000
    1624:	20000024 	.word	0x20000024
    1628:	00003771 	.word	0x00003771
    162c:	20003498 	.word	0x20003498
    1630:	20003c98 	.word	0x20003c98
    1634:	00002d59 	.word	0x00002d59
    1638:	0000381d 	.word	0x0000381d
    163c:	000037e5 	.word	0x000037e5
    1640:	e000e100 	.word	0xe000e100

00001644 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    1644:	2201      	movs	r2, #1
    1646:	4b01      	ldr	r3, [pc, #4]	; (164c <SERCOM3_0_Handler+0x8>)
    1648:	761a      	strb	r2, [r3, #24]
    164a:	4770      	bx	lr
    164c:	41014000 	.word	0x41014000

00001650 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    1650:	2202      	movs	r2, #2
    1652:	4b01      	ldr	r3, [pc, #4]	; (1658 <SERCOM3_1_Handler+0x8>)
    1654:	761a      	strb	r2, [r3, #24]
    1656:	4770      	bx	lr
    1658:	41014000 	.word	0x41014000

0000165c <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
    165c:	b530      	push	{r4, r5, lr}
    165e:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
    1660:	4d1a      	ldr	r5, [pc, #104]	; (16cc <SERCOM3_2_Handler+0x70>)
    1662:	4c1b      	ldr	r4, [pc, #108]	; (16d0 <SERCOM3_2_Handler+0x74>)
    1664:	4628      	mov	r0, r5
    1666:	47a0      	blx	r4
    1668:	2800      	cmp	r0, #0
    166a:	d0fb      	beq.n	1664 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
    166c:	4817      	ldr	r0, [pc, #92]	; (16cc <SERCOM3_2_Handler+0x70>)
    166e:	4b19      	ldr	r3, [pc, #100]	; (16d4 <SERCOM3_2_Handler+0x78>)
    1670:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
    1672:	4601      	mov	r1, r0
    1674:	4818      	ldr	r0, [pc, #96]	; (16d8 <SERCOM3_2_Handler+0x7c>)
    1676:	4b19      	ldr	r3, [pc, #100]	; (16dc <SERCOM3_2_Handler+0x80>)
    1678:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
    167a:	4b19      	ldr	r3, [pc, #100]	; (16e0 <SERCOM3_2_Handler+0x84>)
    167c:	4798      	blx	r3
    167e:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
    1680:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    1684:	d101      	bne.n	168a <SERCOM3_2_Handler+0x2e>

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}

}
    1686:	b009      	add	sp, #36	; 0x24
    1688:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
    168a:	a902      	add	r1, sp, #8
    168c:	4b15      	ldr	r3, [pc, #84]	; (16e4 <SERCOM3_2_Handler+0x88>)
    168e:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
    1690:	4811      	ldr	r0, [pc, #68]	; (16d8 <SERCOM3_2_Handler+0x7c>)
    1692:	4b15      	ldr	r3, [pc, #84]	; (16e8 <SERCOM3_2_Handler+0x8c>)
    1694:	4798      	blx	r3
    1696:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    169a:	4298      	cmp	r0, r3
    169c:	d3f3      	bcc.n	1686 <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
    169e:	4b13      	ldr	r3, [pc, #76]	; (16ec <SERCOM3_2_Handler+0x90>)
    16a0:	6818      	ldr	r0, [r3, #0]
    16a2:	ab07      	add	r3, sp, #28
    16a4:	9300      	str	r3, [sp, #0]
    16a6:	2300      	movs	r3, #0
    16a8:	2203      	movs	r2, #3
    16aa:	b2e1      	uxtb	r1, r4
    16ac:	4c10      	ldr	r4, [pc, #64]	; (16f0 <SERCOM3_2_Handler+0x94>)
    16ae:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    16b0:	9b07      	ldr	r3, [sp, #28]
    16b2:	b13b      	cbz	r3, 16c4 <SERCOM3_2_Handler+0x68>
    16b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    16b8:	4b0e      	ldr	r3, [pc, #56]	; (16f4 <SERCOM3_2_Handler+0x98>)
    16ba:	601a      	str	r2, [r3, #0]
    16bc:	f3bf 8f4f 	dsb	sy
    16c0:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
    16c4:	2000      	movs	r0, #0
    16c6:	4b0c      	ldr	r3, [pc, #48]	; (16f8 <SERCOM3_2_Handler+0x9c>)
    16c8:	4798      	blx	r3
}
    16ca:	e7dc      	b.n	1686 <SERCOM3_2_Handler+0x2a>
    16cc:	20000024 	.word	0x20000024
    16d0:	00003811 	.word	0x00003811
    16d4:	000037ff 	.word	0x000037ff
    16d8:	20003c98 	.word	0x20003c98
    16dc:	00002ded 	.word	0x00002ded
    16e0:	0000055d 	.word	0x0000055d
    16e4:	00000361 	.word	0x00000361
    16e8:	00002e2d 	.word	0x00002e2d
    16ec:	20003478 	.word	0x20003478
    16f0:	00006001 	.word	0x00006001
    16f4:	e000ed04 	.word	0xe000ed04
    16f8:	00000551 	.word	0x00000551

000016fc <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
    16fc:	b570      	push	{r4, r5, r6, lr}
    16fe:	4605      	mov	r5, r0
    1700:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
    1702:	4c05      	ldr	r4, [pc, #20]	; (1718 <mdmCtrlr_SendDataToModem+0x1c>)
    1704:	4620      	mov	r0, r4
    1706:	4b05      	ldr	r3, [pc, #20]	; (171c <mdmCtrlr_SendDataToModem+0x20>)
    1708:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
    170a:	4632      	mov	r2, r6
    170c:	4629      	mov	r1, r5
    170e:	4620      	mov	r0, r4
    1710:	4b03      	ldr	r3, [pc, #12]	; (1720 <mdmCtrlr_SendDataToModem+0x24>)
    1712:	4798      	blx	r3
}
    1714:	bd70      	pop	{r4, r5, r6, pc}
    1716:	bf00      	nop
    1718:	20000024 	.word	0x20000024
    171c:	000037e5 	.word	0x000037e5
    1720:	00001e8d 	.word	0x00001e8d

00001724 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
    1724:	b5f0      	push	{r4, r5, r6, r7, lr}
    1726:	b083      	sub	sp, #12
    1728:	4605      	mov	r5, r0
    172a:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
    172c:	480d      	ldr	r0, [pc, #52]	; (1764 <mdmCtrlr_ReadResponseFromModem+0x40>)
    172e:	4b0e      	ldr	r3, [pc, #56]	; (1768 <mdmCtrlr_ReadResponseFromModem+0x44>)
    1730:	4798      	blx	r3
    1732:	42b0      	cmp	r0, r6
    1734:	d201      	bcs.n	173a <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
    1736:	b003      	add	sp, #12
    1738:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
    173a:	a801      	add	r0, sp, #4
    173c:	4b0b      	ldr	r3, [pc, #44]	; (176c <mdmCtrlr_ReadResponseFromModem+0x48>)
    173e:	4798      	blx	r3
		while (readCnt < length)
    1740:	b166      	cbz	r6, 175c <mdmCtrlr_ReadResponseFromModem+0x38>
    1742:	462c      	mov	r4, r5
    1744:	3e01      	subs	r6, #1
    1746:	b2b6      	uxth	r6, r6
    1748:	3601      	adds	r6, #1
    174a:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
    174c:	4f05      	ldr	r7, [pc, #20]	; (1764 <mdmCtrlr_ReadResponseFromModem+0x40>)
    174e:	4e08      	ldr	r6, [pc, #32]	; (1770 <mdmCtrlr_ReadResponseFromModem+0x4c>)
    1750:	4621      	mov	r1, r4
    1752:	4638      	mov	r0, r7
    1754:	47b0      	blx	r6
    1756:	3401      	adds	r4, #1
		while (readCnt < length)
    1758:	42ac      	cmp	r4, r5
    175a:	d1f9      	bne.n	1750 <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
    175c:	a801      	add	r0, sp, #4
    175e:	4b05      	ldr	r3, [pc, #20]	; (1774 <mdmCtrlr_ReadResponseFromModem+0x50>)
    1760:	4798      	blx	r3
    1762:	e7e8      	b.n	1736 <mdmCtrlr_ReadResponseFromModem+0x12>
    1764:	20003c98 	.word	0x20003c98
    1768:	00002e2d 	.word	0x00002e2d
    176c:	00002a29 	.word	0x00002a29
    1770:	00002da9 	.word	0x00002da9
    1774:	00002a37 	.word	0x00002a37

00001778 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
    1778:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
    177a:	4802      	ldr	r0, [pc, #8]	; (1784 <mdmCtrlr_FlushRxBuffer+0xc>)
    177c:	4b02      	ldr	r3, [pc, #8]	; (1788 <mdmCtrlr_FlushRxBuffer+0x10>)
    177e:	4798      	blx	r3
    1780:	bd08      	pop	{r3, pc}
    1782:	bf00      	nop
    1784:	20003c98 	.word	0x20003c98
    1788:	00002e51 	.word	0x00002e51

0000178c <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
    178c:	b5f0      	push	{r4, r5, r6, r7, lr}
    178e:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
    1790:	2300      	movs	r3, #0
    1792:	4a66      	ldr	r2, [pc, #408]	; (192c <ModemDiagTask+0x1a0>)
    1794:	7013      	strb	r3, [r2, #0]
	bModemDiagDataBaseUpdated = false;
    1796:	4a66      	ldr	r2, [pc, #408]	; (1930 <ModemDiagTask+0x1a4>)
    1798:	4611      	mov	r1, r2
    179a:	f801 3b04 	strb.w	r3, [r1], #4
	
    memset(atResponseData,0,sizeof(atResponseData));
    179e:	8093      	strh	r3, [r2, #4]
    17a0:	708b      	strb	r3, [r1, #2]
    memset(atCgsnResponseData,0,sizeof(atCgsnResponseData));
    17a2:	6093      	str	r3, [r2, #8]
    17a4:	60d3      	str	r3, [r2, #12]
    17a6:	6113      	str	r3, [r2, #16]
    17a8:	6153      	str	r3, [r2, #20]
    memset(atKgsnResponseData,0,sizeof(atKgsnResponseData));
    17aa:	6193      	str	r3, [r2, #24]
    17ac:	61d3      	str	r3, [r2, #28]
    17ae:	6213      	str	r3, [r2, #32]
    17b0:	f8c2 3023 	str.w	r3, [r2, #35]	; 0x23
    memset(atCarrierResponseData,0,sizeof(atCarrierResponseData));
    17b4:	6293      	str	r3, [r2, #40]	; 0x28
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    17b6:	4c5f      	ldr	r4, [pc, #380]	; (1934 <ModemDiagTask+0x1a8>)
    const TickType_t powerUpDelayMs = pdMS_TO_TICKS(7000UL);
    BaseType_t TxQueuePushStatus;
    AtTxMsgType TxMsgQueueData;
    CmdResponseType cmdResponse;

    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    17b8:	4e5f      	ldr	r6, [pc, #380]	; (1938 <ModemDiagTask+0x1ac>)
                        ModemDiagState = 100;
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
                        vTaskDelay(DiagDelayMs);
    17ba:	4d60      	ldr	r5, [pc, #384]	; (193c <ModemDiagTask+0x1b0>)
    17bc:	e097      	b.n	18ee <ModemDiagTask+0x162>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    17be:	2304      	movs	r3, #4
    17c0:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
    17c4:	2301      	movs	r3, #1
    17c6:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    17ca:	2300      	movs	r3, #0
    17cc:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    17ce:	2264      	movs	r2, #100	; 0x64
    17d0:	4669      	mov	r1, sp
    17d2:	6830      	ldr	r0, [r6, #0]
    17d4:	4f5a      	ldr	r7, [pc, #360]	; (1940 <ModemDiagTask+0x1b4>)
    17d6:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    17d8:	2801      	cmp	r0, #1
    17da:	d006      	beq.n	17ea <ModemDiagTask+0x5e>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    17dc:	4859      	ldr	r0, [pc, #356]	; (1944 <ModemDiagTask+0x1b8>)
    17de:	4b5a      	ldr	r3, [pc, #360]	; (1948 <ModemDiagTask+0x1bc>)
    17e0:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    17e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    17e6:	47a8      	blx	r5
    17e8:	e07c      	b.n	18e4 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    17ea:	2300      	movs	r3, #0
    17ec:	461a      	mov	r2, r3
    17ee:	4619      	mov	r1, r3
    17f0:	4856      	ldr	r0, [pc, #344]	; (194c <ModemDiagTask+0x1c0>)
    17f2:	6800      	ldr	r0, [r0, #0]
    17f4:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    17f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    17fa:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
    17fc:	2201      	movs	r2, #1
    17fe:	4b4b      	ldr	r3, [pc, #300]	; (192c <ModemDiagTask+0x1a0>)
    1800:	701a      	strb	r2, [r3, #0]
    1802:	e06f      	b.n	18e4 <ModemDiagTask+0x158>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1804:	2304      	movs	r3, #4
    1806:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
    180a:	2302      	movs	r3, #2
    180c:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1810:	2300      	movs	r3, #0
    1812:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1814:	2264      	movs	r2, #100	; 0x64
    1816:	4669      	mov	r1, sp
    1818:	6830      	ldr	r0, [r6, #0]
    181a:	4f49      	ldr	r7, [pc, #292]	; (1940 <ModemDiagTask+0x1b4>)
    181c:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    181e:	2801      	cmp	r0, #1
    1820:	d006      	beq.n	1830 <ModemDiagTask+0xa4>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1822:	4848      	ldr	r0, [pc, #288]	; (1944 <ModemDiagTask+0x1b8>)
    1824:	4b48      	ldr	r3, [pc, #288]	; (1948 <ModemDiagTask+0x1bc>)
    1826:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    1828:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    182c:	47a8      	blx	r5
    182e:	e059      	b.n	18e4 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1830:	2300      	movs	r3, #0
    1832:	461a      	mov	r2, r3
    1834:	4619      	mov	r1, r3
    1836:	4845      	ldr	r0, [pc, #276]	; (194c <ModemDiagTask+0x1c0>)
    1838:	6800      	ldr	r0, [r0, #0]
    183a:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    183c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    1840:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
    1842:	2202      	movs	r2, #2
    1844:	4b39      	ldr	r3, [pc, #228]	; (192c <ModemDiagTask+0x1a0>)
    1846:	701a      	strb	r2, [r3, #0]
    1848:	e04c      	b.n	18e4 <ModemDiagTask+0x158>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    184a:	2304      	movs	r3, #4
    184c:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
    1850:	2307      	movs	r3, #7
    1852:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1856:	2300      	movs	r3, #0
    1858:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    185a:	2264      	movs	r2, #100	; 0x64
    185c:	4669      	mov	r1, sp
    185e:	6830      	ldr	r0, [r6, #0]
    1860:	4f37      	ldr	r7, [pc, #220]	; (1940 <ModemDiagTask+0x1b4>)
    1862:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1864:	2801      	cmp	r0, #1
    1866:	d006      	beq.n	1876 <ModemDiagTask+0xea>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1868:	4836      	ldr	r0, [pc, #216]	; (1944 <ModemDiagTask+0x1b8>)
    186a:	4b37      	ldr	r3, [pc, #220]	; (1948 <ModemDiagTask+0x1bc>)
    186c:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    186e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    1872:	47a8      	blx	r5
    1874:	e036      	b.n	18e4 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1876:	2300      	movs	r3, #0
    1878:	461a      	mov	r2, r3
    187a:	4619      	mov	r1, r3
    187c:	4833      	ldr	r0, [pc, #204]	; (194c <ModemDiagTask+0x1c0>)
    187e:	6800      	ldr	r0, [r0, #0]
    1880:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1882:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    1886:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_MAX_STATE;
    1888:	2204      	movs	r2, #4
    188a:	4b28      	ldr	r3, [pc, #160]	; (192c <ModemDiagTask+0x1a0>)
    188c:	701a      	strb	r2, [r3, #0]
    188e:	e029      	b.n	18e4 <ModemDiagTask+0x158>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1890:	2304      	movs	r3, #4
    1892:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
    1896:	2303      	movs	r3, #3
    1898:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    189c:	2300      	movs	r3, #0
    189e:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    18a0:	2264      	movs	r2, #100	; 0x64
    18a2:	4669      	mov	r1, sp
    18a4:	6830      	ldr	r0, [r6, #0]
    18a6:	4f26      	ldr	r7, [pc, #152]	; (1940 <ModemDiagTask+0x1b4>)
    18a8:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    18aa:	2801      	cmp	r0, #1
    18ac:	d006      	beq.n	18bc <ModemDiagTask+0x130>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    18ae:	4825      	ldr	r0, [pc, #148]	; (1944 <ModemDiagTask+0x1b8>)
    18b0:	4b25      	ldr	r3, [pc, #148]	; (1948 <ModemDiagTask+0x1bc>)
    18b2:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    18b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    18b8:	47a8      	blx	r5
    18ba:	e013      	b.n	18e4 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    18bc:	2300      	movs	r3, #0
    18be:	461a      	mov	r2, r3
    18c0:	4619      	mov	r1, r3
    18c2:	4822      	ldr	r0, [pc, #136]	; (194c <ModemDiagTask+0x1c0>)
    18c4:	6800      	ldr	r0, [r0, #0]
    18c6:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    18c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    18cc:	47a8      	blx	r5
                        ModemDiagState = 100;
    18ce:	2264      	movs	r2, #100	; 0x64
    18d0:	4b16      	ldr	r3, [pc, #88]	; (192c <ModemDiagTask+0x1a0>)
    18d2:	701a      	strb	r2, [r3, #0]
    18d4:	e006      	b.n	18e4 <ModemDiagTask+0x158>
                }
                break;

                default:
                {
                	xSemaphoreGive(AtTxQueueLoadSemaphore);
    18d6:	2300      	movs	r3, #0
    18d8:	461a      	mov	r2, r3
    18da:	4619      	mov	r1, r3
    18dc:	481b      	ldr	r0, [pc, #108]	; (194c <ModemDiagTask+0x1c0>)
    18de:	6800      	ldr	r0, [r0, #0]
    18e0:	4f17      	ldr	r7, [pc, #92]	; (1940 <ModemDiagTask+0x1b4>)
    18e2:	47b8      	blx	r7
            kickWatchDog();
    18e4:	4b1a      	ldr	r3, [pc, #104]	; (1950 <ModemDiagTask+0x1c4>)
    18e6:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    18e8:	f44f 7016 	mov.w	r0, #600	; 0x258
    18ec:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    18ee:	47a0      	blx	r4
    18f0:	2804      	cmp	r0, #4
    18f2:	d1fc      	bne.n	18ee <ModemDiagTask+0x162>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    18f4:	6830      	ldr	r0, [r6, #0]
    18f6:	4b17      	ldr	r3, [pc, #92]	; (1954 <ModemDiagTask+0x1c8>)
    18f8:	4798      	blx	r3
    18fa:	2800      	cmp	r0, #0
    18fc:	d1f2      	bne.n	18e4 <ModemDiagTask+0x158>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    18fe:	2100      	movs	r1, #0
    1900:	4b12      	ldr	r3, [pc, #72]	; (194c <ModemDiagTask+0x1c0>)
    1902:	6818      	ldr	r0, [r3, #0]
    1904:	4b14      	ldr	r3, [pc, #80]	; (1958 <ModemDiagTask+0x1cc>)
    1906:	4798      	blx	r3
    1908:	2801      	cmp	r0, #1
    190a:	d1eb      	bne.n	18e4 <ModemDiagTask+0x158>
            switch(ModemDiagState)
    190c:	4b07      	ldr	r3, [pc, #28]	; (192c <ModemDiagTask+0x1a0>)
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	2b03      	cmp	r3, #3
    1912:	d8e0      	bhi.n	18d6 <ModemDiagTask+0x14a>
    1914:	a201      	add	r2, pc, #4	; (adr r2, 191c <ModemDiagTask+0x190>)
    1916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    191a:	bf00      	nop
    191c:	000017bf 	.word	0x000017bf
    1920:	00001805 	.word	0x00001805
    1924:	0000184b 	.word	0x0000184b
    1928:	00001891 	.word	0x00001891
    192c:	20003ca8 	.word	0x20003ca8
    1930:	20000200 	.word	0x20000200
    1934:	00001a2d 	.word	0x00001a2d
    1938:	20003480 	.word	0x20003480
    193c:	00005a4d 	.word	0x00005a4d
    1940:	00004d11 	.word	0x00004d11
    1944:	00007d14 	.word	0x00007d14
    1948:	00001f55 	.word	0x00001f55
    194c:	2000348c 	.word	0x2000348c
    1950:	000020d9 	.word	0x000020d9
    1954:	00005389 	.word	0x00005389
    1958:	000051a9 	.word	0x000051a9

0000195c <ModemDiagUpdateDataBase>:
{
    195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    195e:	4604      	mov	r4, r0
    switch(cmd)
    1960:	780b      	ldrb	r3, [r1, #0]
    1962:	3b01      	subs	r3, #1
    1964:	2b06      	cmp	r3, #6
    1966:	d826      	bhi.n	19b6 <ModemDiagUpdateDataBase+0x5a>
    1968:	e8df f003 	tbb	[pc, r3]
    196c:	25243725 	.word	0x25243725
    1970:	2525      	.short	0x2525
    1972:	04          	.byte	0x04
    1973:	00          	.byte	0x00
			while(parseCnt <= (cmdResponse->length - startIndex))
    1974:	884b      	ldrh	r3, [r1, #2]
    1976:	2b07      	cmp	r3, #7
    1978:	d40d      	bmi.n	1996 <ModemDiagUpdateDataBase+0x3a>
    197a:	2200      	movs	r2, #0
    197c:	4613      	mov	r3, r2
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
    197e:	4d20      	ldr	r5, [pc, #128]	; (1a00 <ModemDiagUpdateDataBase+0xa4>)
    1980:	18a0      	adds	r0, r4, r2
    1982:	79c0      	ldrb	r0, [r0, #7]
    1984:	442a      	add	r2, r5
    1986:	7610      	strb	r0, [r2, #24]
				parseCnt++;
    1988:	3301      	adds	r3, #1
    198a:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
    198c:	461a      	mov	r2, r3
    198e:	8848      	ldrh	r0, [r1, #2]
    1990:	3807      	subs	r0, #7
    1992:	4283      	cmp	r3, r0
    1994:	ddf4      	ble.n	1980 <ModemDiagUpdateDataBase+0x24>
			bModemDiagDataBaseUpdated = true;
    1996:	4d1a      	ldr	r5, [pc, #104]	; (1a00 <ModemDiagUpdateDataBase+0xa4>)
    1998:	2601      	movs	r6, #1
    199a:	462c      	mov	r4, r5
    199c:	f804 6b18 	strb.w	r6, [r4], #24
			DEBUG_PRINT("Retrieved the Modem serial Number");
    19a0:	4818      	ldr	r0, [pc, #96]	; (1a04 <ModemDiagUpdateDataBase+0xa8>)
    19a2:	4f19      	ldr	r7, [pc, #100]	; (1a08 <ModemDiagUpdateDataBase+0xac>)
    19a4:	47b8      	blx	r7
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
    19a6:	210f      	movs	r1, #15
    19a8:	4620      	mov	r0, r4
    19aa:	4b18      	ldr	r3, [pc, #96]	; (1a0c <ModemDiagUpdateDataBase+0xb0>)
    19ac:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    19ae:	4818      	ldr	r0, [pc, #96]	; (1a10 <ModemDiagUpdateDataBase+0xb4>)
    19b0:	47b8      	blx	r7
			bModemDiagDataBaseUpdated = true;
    19b2:	702e      	strb	r6, [r5, #0]
    19b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
    19b6:	4b12      	ldr	r3, [pc, #72]	; (1a00 <ModemDiagUpdateDataBase+0xa4>)
    19b8:	1d1d      	adds	r5, r3, #4
    19ba:	8801      	ldrh	r1, [r0, #0]
    19bc:	7882      	ldrb	r2, [r0, #2]
    19be:	8099      	strh	r1, [r3, #4]
    19c0:	719a      	strb	r2, [r3, #6]
        	DEBUG_PRINT("Verifying the UART Link status with Modem");
    19c2:	4814      	ldr	r0, [pc, #80]	; (1a14 <ModemDiagUpdateDataBase+0xb8>)
    19c4:	4c10      	ldr	r4, [pc, #64]	; (1a08 <ModemDiagUpdateDataBase+0xac>)
    19c6:	47a0      	blx	r4
        	DEBUG_PRINT("SuccessFully verified the UART Link between SAMD51 Controller & Modem");
    19c8:	4813      	ldr	r0, [pc, #76]	; (1a18 <ModemDiagUpdateDataBase+0xbc>)
    19ca:	47a0      	blx	r4
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
    19cc:	2103      	movs	r1, #3
    19ce:	4628      	mov	r0, r5
    19d0:	4b0e      	ldr	r3, [pc, #56]	; (1a0c <ModemDiagUpdateDataBase+0xb0>)
    19d2:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    19d4:	480e      	ldr	r0, [pc, #56]	; (1a10 <ModemDiagUpdateDataBase+0xb4>)
    19d6:	47a0      	blx	r4
        break;
    19d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
    19da:	4e09      	ldr	r6, [pc, #36]	; (1a00 <ModemDiagUpdateDataBase+0xa4>)
    19dc:	f106 0508 	add.w	r5, r6, #8
    19e0:	6800      	ldr	r0, [r0, #0]
    19e2:	6861      	ldr	r1, [r4, #4]
    19e4:	68a2      	ldr	r2, [r4, #8]
    19e6:	68e3      	ldr	r3, [r4, #12]
    19e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
    19ea:	480c      	ldr	r0, [pc, #48]	; (1a1c <ModemDiagUpdateDataBase+0xc0>)
    19ec:	4c06      	ldr	r4, [pc, #24]	; (1a08 <ModemDiagUpdateDataBase+0xac>)
    19ee:	47a0      	blx	r4
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
    19f0:	2110      	movs	r1, #16
    19f2:	f106 0008 	add.w	r0, r6, #8
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <ModemDiagUpdateDataBase+0xb0>)
    19f8:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    19fa:	4805      	ldr	r0, [pc, #20]	; (1a10 <ModemDiagUpdateDataBase+0xb4>)
    19fc:	47a0      	blx	r4
        break;
    19fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1a00:	20000200 	.word	0x20000200
    1a04:	00007dd0 	.word	0x00007dd0
    1a08:	00001f55 	.word	0x00001f55
    1a0c:	00001f11 	.word	0x00001f11
    1a10:	00007f40 	.word	0x00007f40
    1a14:	00007d3c 	.word	0x00007d3c
    1a18:	00007d68 	.word	0x00007d68
    1a1c:	00007db0 	.word	0x00007db0

00001a20 <isModemDiagDataBaseUpdated>:
*
********************************************************************************/
bool isModemDiagDataBaseUpdated(void)
{
	return bModemDiagDataBaseUpdated;
}
    1a20:	4b01      	ldr	r3, [pc, #4]	; (1a28 <isModemDiagDataBaseUpdated+0x8>)
    1a22:	7818      	ldrb	r0, [r3, #0]
    1a24:	4770      	bx	lr
    1a26:	bf00      	nop
    1a28:	20000200 	.word	0x20000200

00001a2c <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
    1a2c:	4b01      	ldr	r3, [pc, #4]	; (1a34 <getModemPowerStatus+0x8>)
    1a2e:	7818      	ldrb	r0, [r3, #0]
    1a30:	4770      	bx	lr
    1a32:	bf00      	nop
    1a34:	2000022c 	.word	0x2000022c

00001a38 <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_RESET_MODEM;
    1a38:	4b04      	ldr	r3, [pc, #16]	; (1a4c <modemPowerStateInit+0x14>)
    1a3a:	2207      	movs	r2, #7
    1a3c:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    1a3e:	2200      	movs	r2, #0
    1a40:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_ASSERT;
    1a42:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    1a44:	2201      	movs	r2, #1
    1a46:	70da      	strb	r2, [r3, #3]
    1a48:	4770      	bx	lr
    1a4a:	bf00      	nop
    1a4c:	2000022c 	.word	0x2000022c

00001a50 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
    1a50:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);
    const TickType_t ModemResetToPowerOnWaitDelay = pdMS_TO_TICKS(500UL);

    switch(ModemPwrState)
    1a52:	4b68      	ldr	r3, [pc, #416]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1a54:	781b      	ldrb	r3, [r3, #0]
    1a56:	2b06      	cmp	r3, #6
    1a58:	f000 809e 	beq.w	1b98 <modemPowerSchedule+0x148>
    1a5c:	2b07      	cmp	r3, #7
    1a5e:	d054      	beq.n	1b0a <modemPowerSchedule+0xba>
    1a60:	b103      	cbz	r3, 1a64 <modemPowerSchedule+0x14>
    1a62:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
    1a64:	4b63      	ldr	r3, [pc, #396]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1a66:	785b      	ldrb	r3, [r3, #1]
    1a68:	2b03      	cmp	r3, #3
    1a6a:	d8fa      	bhi.n	1a62 <modemPowerSchedule+0x12>
    1a6c:	e8df f003 	tbb	[pc, r3]
    1a70:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1a74:	4b60      	ldr	r3, [pc, #384]	; (1bf8 <modemPowerSchedule+0x1a8>)
    1a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a7e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1a82:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1a86:	4c5d      	ldr	r4, [pc, #372]	; (1bfc <modemPowerSchedule+0x1ac>)
    1a88:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a8c:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a90:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a94:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1a98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1a9c:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    1aa0:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1aa2:	6299      	str	r1, [r3, #40]	; 0x28
    1aa4:	4856      	ldr	r0, [pc, #344]	; (1c00 <modemPowerSchedule+0x1b0>)
    1aa6:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1aa8:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    1aac:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ab0:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ab4:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1ab6:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ab8:	6299      	str	r1, [r3, #40]	; 0x28
    1aba:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1abc:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ac0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ac4:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ac8:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
    1aca:	2201      	movs	r2, #1
    1acc:	4b49      	ldr	r3, [pc, #292]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1ace:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
    1ad0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1ad4:	4b4b      	ldr	r3, [pc, #300]	; (1c04 <modemPowerSchedule+0x1b4>)
    1ad6:	4798      	blx	r3
                }
                break;
    1ad8:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1ada:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    1ade:	4b46      	ldr	r3, [pc, #280]	; (1bf8 <modemPowerSchedule+0x1a8>)
    1ae0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
    1ae4:	2202      	movs	r2, #2
    1ae6:	4b43      	ldr	r3, [pc, #268]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1ae8:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
    1aea:	2032      	movs	r0, #50	; 0x32
    1aec:	4b45      	ldr	r3, [pc, #276]	; (1c04 <modemPowerSchedule+0x1b4>)
    1aee:	4798      	blx	r3
                }
                break;
    1af0:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
    1af2:	2203      	movs	r2, #3
    1af4:	4b3f      	ldr	r3, [pc, #252]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1af6:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
    1af8:	f640 30b8 	movw	r0, #3000	; 0xbb8
    1afc:	4b41      	ldr	r3, [pc, #260]	; (1c04 <modemPowerSchedule+0x1b4>)
    1afe:	4798      	blx	r3
                }
                break;
    1b00:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
    1b02:	2204      	movs	r2, #4
    1b04:	4b3b      	ldr	r3, [pc, #236]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1b06:	701a      	strb	r2, [r3, #0]
                }
                break;
    1b08:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
    1b0a:	4b3a      	ldr	r3, [pc, #232]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1b0c:	789b      	ldrb	r3, [r3, #2]
    1b0e:	b113      	cbz	r3, 1b16 <modemPowerSchedule+0xc6>
    1b10:	2b01      	cmp	r3, #1
    1b12:	d028      	beq.n	1b66 <modemPowerSchedule+0x116>
    1b14:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b16:	4b38      	ldr	r3, [pc, #224]	; (1bf8 <modemPowerSchedule+0x1a8>)
    1b18:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1b1c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    1b24:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    1b28:	4a34      	ldr	r2, [pc, #208]	; (1bfc <modemPowerSchedule+0x1ac>)
    1b2a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b2e:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b36:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1b3a:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b3e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    1b42:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b44:	6298      	str	r0, [r3, #40]	; 0x28
    1b46:	4a2e      	ldr	r2, [pc, #184]	; (1c00 <modemPowerSchedule+0x1b0>)
    1b48:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b4a:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b4e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b52:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1b56:	6199      	str	r1, [r3, #24]

                    /* Apply low level pulse on the RESET pin for 25 ms */
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
    1b58:	2201      	movs	r2, #1
    1b5a:	4b26      	ldr	r3, [pc, #152]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1b5c:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
    1b5e:	2019      	movs	r0, #25
    1b60:	4b28      	ldr	r3, [pc, #160]	; (1c04 <modemPowerSchedule+0x1b4>)
    1b62:	4798      	blx	r3
                }
                break;
    1b64:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b66:	4b24      	ldr	r3, [pc, #144]	; (1bf8 <modemPowerSchedule+0x1a8>)
    1b68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    1b6c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1b72:	629a      	str	r2, [r3, #40]	; 0x28
    1b74:	4a22      	ldr	r2, [pc, #136]	; (1c00 <modemPowerSchedule+0x1b0>)
    1b76:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b78:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b80:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b84:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
    1b86:	4b1b      	ldr	r3, [pc, #108]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1b88:	2200      	movs	r2, #0
    1b8a:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    1b8c:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemResetToPowerOnWaitDelay);
    1b8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1b92:	4b1c      	ldr	r3, [pc, #112]	; (1c04 <modemPowerSchedule+0x1b4>)
    1b94:	4798      	blx	r3
                }
                break;
    1b96:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
    1b98:	4b16      	ldr	r3, [pc, #88]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1b9a:	78db      	ldrb	r3, [r3, #3]
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	f47f af60 	bne.w	1a62 <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1ba2:	4b15      	ldr	r3, [pc, #84]	; (1bf8 <modemPowerSchedule+0x1a8>)
    1ba4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1ba8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1bac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    1bb0:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    1bb4:	4a11      	ldr	r2, [pc, #68]	; (1bfc <modemPowerSchedule+0x1ac>)
    1bb6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1bba:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    1bbe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1bc2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1bc6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1bca:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    1bce:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1bd0:	6298      	str	r0, [r3, #40]	; 0x28
    1bd2:	4a0b      	ldr	r2, [pc, #44]	; (1c00 <modemPowerSchedule+0x1b0>)
    1bd4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1bd6:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    1bda:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1bde:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1be2:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    1be4:	2201      	movs	r2, #1
    1be6:	4b03      	ldr	r3, [pc, #12]	; (1bf4 <modemPowerSchedule+0x1a4>)
    1be8:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
    1bea:	2019      	movs	r0, #25
    1bec:	4b05      	ldr	r3, [pc, #20]	; (1c04 <modemPowerSchedule+0x1b4>)
    1bee:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
    1bf0:	e737      	b.n	1a62 <modemPowerSchedule+0x12>
    1bf2:	bf00      	nop
    1bf4:	2000022c 	.word	0x2000022c
    1bf8:	41008000 	.word	0x41008000
    1bfc:	c0000001 	.word	0xc0000001
    1c00:	c0000008 	.word	0xc0000008
    1c04:	00005a4d 	.word	0x00005a4d

00001c08 <SystemAutoRestartTimerCallBack>:
        }
    }
}

static void SystemAutoRestartTimerCallBack(void* param)
{
    1c08:	b508      	push	{r3, lr}
	DEBUG_PRINT("Hourly System Restart timer expired. Rebooting the system.\r\n");
    1c0a:	4803      	ldr	r0, [pc, #12]	; (1c18 <SystemAutoRestartTimerCallBack+0x10>)
    1c0c:	4b03      	ldr	r3, [pc, #12]	; (1c1c <SystemAutoRestartTimerCallBack+0x14>)
    1c0e:	4798      	blx	r3
	requestWatchDogForcedReset();
    1c10:	4b03      	ldr	r3, [pc, #12]	; (1c20 <SystemAutoRestartTimerCallBack+0x18>)
    1c12:	4798      	blx	r3
    1c14:	bd08      	pop	{r3, pc}
    1c16:	bf00      	nop
    1c18:	00007df4 	.word	0x00007df4
    1c1c:	00001f55 	.word	0x00001f55
    1c20:	00002119 	.word	0x00002119

00001c24 <ModemProcessTask>:
{
    1c24:	b570      	push	{r4, r5, r6, lr}
    1c26:	b082      	sub	sp, #8
    modemPowerStateInit();
    1c28:	4b12      	ldr	r3, [pc, #72]	; (1c74 <ModemProcessTask+0x50>)
    1c2a:	4798      	blx	r3
    MdmConnect_HttpConnectionInit();
    1c2c:	4b12      	ldr	r3, [pc, #72]	; (1c78 <ModemProcessTask+0x54>)
    1c2e:	4798      	blx	r3
    xAutoReloadHourlyTimer = xTimerCreate("HourlySystemRestartTimer",HOURLY_RESTART_TIMER_LOAD_VALUE,pdTRUE,0,SystemAutoRestartTimerCallBack);
    1c30:	4b12      	ldr	r3, [pc, #72]	; (1c7c <ModemProcessTask+0x58>)
    1c32:	9300      	str	r3, [sp, #0]
    1c34:	2300      	movs	r3, #0
    1c36:	2201      	movs	r2, #1
    1c38:	4911      	ldr	r1, [pc, #68]	; (1c80 <ModemProcessTask+0x5c>)
    1c3a:	4812      	ldr	r0, [pc, #72]	; (1c84 <ModemProcessTask+0x60>)
    1c3c:	4c12      	ldr	r4, [pc, #72]	; (1c88 <ModemProcessTask+0x64>)
    1c3e:	47a0      	blx	r4
    if(xAutoReloadHourlyTimer != NULL)
    1c40:	b148      	cbz	r0, 1c56 <ModemProcessTask+0x32>
    1c42:	4604      	mov	r4, r0
    	if(pdPASS == xTimerStart(xAutoReloadHourlyTimer,0))
    1c44:	4b11      	ldr	r3, [pc, #68]	; (1c8c <ModemProcessTask+0x68>)
    1c46:	4798      	blx	r3
    1c48:	2300      	movs	r3, #0
    1c4a:	9300      	str	r3, [sp, #0]
    1c4c:	4602      	mov	r2, r0
    1c4e:	2101      	movs	r1, #1
    1c50:	4620      	mov	r0, r4
    1c52:	4c0f      	ldr	r4, [pc, #60]	; (1c90 <ModemProcessTask+0x6c>)
    1c54:	47a0      	blx	r4
        modemPowerSchedule();
    1c56:	4d0f      	ldr	r5, [pc, #60]	; (1c94 <ModemProcessTask+0x70>)
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1c58:	4c0f      	ldr	r4, [pc, #60]	; (1c98 <ModemProcessTask+0x74>)
            MdmConnect_HttpConnectionSchedule();
    1c5a:	4e10      	ldr	r6, [pc, #64]	; (1c9c <ModemProcessTask+0x78>)
        modemPowerSchedule();
    1c5c:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1c5e:	47a0      	blx	r4
    1c60:	2804      	cmp	r0, #4
    1c62:	d1fb      	bne.n	1c5c <ModemProcessTask+0x38>
            MdmConnect_HttpConnectionSchedule();
    1c64:	47b0      	blx	r6
			kickWatchDog();
    1c66:	4b0e      	ldr	r3, [pc, #56]	; (1ca0 <ModemProcessTask+0x7c>)
    1c68:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    1c6a:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1c6e:	4b0d      	ldr	r3, [pc, #52]	; (1ca4 <ModemProcessTask+0x80>)
    1c70:	4798      	blx	r3
    1c72:	e7f3      	b.n	1c5c <ModemProcessTask+0x38>
    1c74:	00001a39 	.word	0x00001a39
    1c78:	000005c5 	.word	0x000005c5
    1c7c:	00001c09 	.word	0x00001c09
    1c80:	0036ee80 	.word	0x0036ee80
    1c84:	00007e34 	.word	0x00007e34
    1c88:	0000620d 	.word	0x0000620d
    1c8c:	00005761 	.word	0x00005761
    1c90:	00006261 	.word	0x00006261
    1c94:	00001a51 	.word	0x00001a51
    1c98:	00001a2d 	.word	0x00001a2d
    1c9c:	00000f99 	.word	0x00000f99
    1ca0:	000020d9 	.word	0x000020d9
    1ca4:	00005a4d 	.word	0x00005a4d

00001ca8 <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
    1ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1caa:	4607      	mov	r7, r0
    1cac:	460c      	mov	r4, r1
    1cae:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
    1cb0:	4923      	ldr	r1, [pc, #140]	; (1d40 <modemResponseHandler+0x98>)
    1cb2:	4b24      	ldr	r3, [pc, #144]	; (1d44 <modemResponseHandler+0x9c>)
    1cb4:	4798      	blx	r3

    if(response != NULL)
    1cb6:	2c00      	cmp	r4, #0
    1cb8:	d03e      	beq.n	1d38 <modemResponseHandler+0x90>
    {
        switch (cmdData.cmdSet)
    1cba:	4b21      	ldr	r3, [pc, #132]	; (1d40 <modemResponseHandler+0x98>)
    1cbc:	785b      	ldrb	r3, [r3, #1]
    1cbe:	b113      	cbz	r3, 1cc6 <modemResponseHandler+0x1e>
    1cc0:	2b01      	cmp	r3, #1
    1cc2:	d016      	beq.n	1cf2 <modemResponseHandler+0x4a>
    1cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
    1cc6:	4e1e      	ldr	r6, [pc, #120]	; (1d40 <modemResponseHandler+0x98>)
    1cc8:	7537      	strb	r7, [r6, #20]
            	cmdResponse.length = length;
    1cca:	82f5      	strh	r5, [r6, #22]
            	memset(responseBuffer,0,700);
    1ccc:	f106 071c 	add.w	r7, r6, #28
    1cd0:	f44f 722f 	mov.w	r2, #700	; 0x2bc
    1cd4:	2100      	movs	r1, #0
    1cd6:	4638      	mov	r0, r7
    1cd8:	4b1b      	ldr	r3, [pc, #108]	; (1d48 <modemResponseHandler+0xa0>)
    1cda:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
    1cdc:	462a      	mov	r2, r5
    1cde:	4621      	mov	r1, r4
    1ce0:	4638      	mov	r0, r7
    1ce2:	4b1a      	ldr	r3, [pc, #104]	; (1d4c <modemResponseHandler+0xa4>)
    1ce4:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
    1ce6:	f106 0114 	add.w	r1, r6, #20
    1cea:	4638      	mov	r0, r7
    1cec:	4b18      	ldr	r3, [pc, #96]	; (1d50 <modemResponseHandler+0xa8>)
    1cee:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
    1cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
    1cf2:	4b18      	ldr	r3, [pc, #96]	; (1d54 <modemResponseHandler+0xac>)
    1cf4:	6818      	ldr	r0, [r3, #0]
    1cf6:	4b18      	ldr	r3, [pc, #96]	; (1d58 <modemResponseHandler+0xb0>)
    1cf8:	4798      	blx	r3
    1cfa:	b9c8      	cbnz	r0, 1d30 <modemResponseHandler+0x88>
                {
                	cmdResponse.atCmd = cmd;
    1cfc:	4e10      	ldr	r6, [pc, #64]	; (1d40 <modemResponseHandler+0x98>)
    1cfe:	7537      	strb	r7, [r6, #20]
                	cmdResponse.length = length;
    1d00:	82f5      	strh	r5, [r6, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    1d02:	4628      	mov	r0, r5
    1d04:	4b15      	ldr	r3, [pc, #84]	; (1d5c <modemResponseHandler+0xb4>)
    1d06:	4798      	blx	r3
    1d08:	61b0      	str	r0, [r6, #24]

                	if(cmdResponse.response != NULL)
    1d0a:	b1c0      	cbz	r0, 1d3e <modemResponseHandler+0x96>
                	{
                		memcpy(cmdResponse.response,response,length);
    1d0c:	462a      	mov	r2, r5
    1d0e:	4621      	mov	r1, r4
    1d10:	4b0e      	ldr	r3, [pc, #56]	; (1d4c <modemResponseHandler+0xa4>)
    1d12:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
    1d14:	2300      	movs	r3, #0
    1d16:	2264      	movs	r2, #100	; 0x64
    1d18:	f106 0114 	add.w	r1, r6, #20
    1d1c:	480d      	ldr	r0, [pc, #52]	; (1d54 <modemResponseHandler+0xac>)
    1d1e:	6800      	ldr	r0, [r0, #0]
    1d20:	4c0f      	ldr	r4, [pc, #60]	; (1d60 <modemResponseHandler+0xb8>)
    1d22:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
    1d24:	2801      	cmp	r0, #1
    1d26:	d00a      	beq.n	1d3e <modemResponseHandler+0x96>
                		{
                			//DEBUG_PRINT("Successfully posted connection Response to Queue");
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
    1d28:	480e      	ldr	r0, [pc, #56]	; (1d64 <modemResponseHandler+0xbc>)
    1d2a:	4b0f      	ldr	r3, [pc, #60]	; (1d68 <modemResponseHandler+0xc0>)
    1d2c:	4798      	blx	r3
    1d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    1d30:	480e      	ldr	r0, [pc, #56]	; (1d6c <modemResponseHandler+0xc4>)
    1d32:	4b0d      	ldr	r3, [pc, #52]	; (1d68 <modemResponseHandler+0xc0>)
    1d34:	4798      	blx	r3
    1d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
    1d38:	480d      	ldr	r0, [pc, #52]	; (1d70 <modemResponseHandler+0xc8>)
    1d3a:	4b0b      	ldr	r3, [pc, #44]	; (1d68 <modemResponseHandler+0xc0>)
    1d3c:	4798      	blx	r3
    1d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d40:	20000230 	.word	0x20000230
    1d44:	00000361 	.word	0x00000361
    1d48:	000065f1 	.word	0x000065f1
    1d4c:	000065a7 	.word	0x000065a7
    1d50:	0000195d 	.word	0x0000195d
    1d54:	20003460 	.word	0x20003460
    1d58:	00005389 	.word	0x00005389
    1d5c:	00004915 	.word	0x00004915
    1d60:	00004d11 	.word	0x00004d11
    1d64:	00007e50 	.word	0x00007e50
    1d68:	00001f55 	.word	0x00001f55
    1d6c:	00007e80 	.word	0x00007e80
    1d70:	00007eac 	.word	0x00007eac

00001d74 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Application/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
    1d74:	b570      	push	{r4, r5, r6, lr}
    1d76:	b086      	sub	sp, #24

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    1d78:	4c0d      	ldr	r4, [pc, #52]	; (1db0 <ModemRxTask+0x3c>)
		
		if(xResult == pdPASS)
		{
			getModemCommandData(atCmd, &cmdData);
    1d7a:	4e0e      	ldr	r6, [pc, #56]	; (1db4 <ModemRxTask+0x40>)
			//DEBUG_PRINT("Notification Received to Rx Task from ISR");

			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    1d7c:	4d0e      	ldr	r5, [pc, #56]	; (1db8 <ModemRxTask+0x44>)
    1d7e:	e001      	b.n	1d84 <ModemRxTask+0x10>
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
		}
		kickWatchDog();
    1d80:	4b0e      	ldr	r3, [pc, #56]	; (1dbc <ModemRxTask+0x48>)
    1d82:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    1d84:	f04f 33ff 	mov.w	r3, #4294967295
    1d88:	f10d 0217 	add.w	r2, sp, #23
    1d8c:	4619      	mov	r1, r3
    1d8e:	2000      	movs	r0, #0
    1d90:	47a0      	blx	r4
		if(xResult == pdPASS)
    1d92:	2801      	cmp	r0, #1
    1d94:	d1f4      	bne.n	1d80 <ModemRxTask+0xc>
			getModemCommandData(atCmd, &cmdData);
    1d96:	4669      	mov	r1, sp
    1d98:	f89d 0017 	ldrb.w	r0, [sp, #23]
    1d9c:	47b0      	blx	r6
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    1d9e:	f89d 0000 	ldrb.w	r0, [sp]
    1da2:	47a8      	blx	r5
    1da4:	2800      	cmp	r0, #0
    1da6:	d1eb      	bne.n	1d80 <ModemRxTask+0xc>
				DEBUG_PRINT("ERROR: Command Parsing Failed");
    1da8:	4805      	ldr	r0, [pc, #20]	; (1dc0 <ModemRxTask+0x4c>)
    1daa:	4b06      	ldr	r3, [pc, #24]	; (1dc4 <ModemRxTask+0x50>)
    1dac:	4798      	blx	r3
    1dae:	e7e7      	b.n	1d80 <ModemRxTask+0xc>
    1db0:	00005f4d 	.word	0x00005f4d
    1db4:	00000361 	.word	0x00000361
    1db8:	0000045d 	.word	0x0000045d
    1dbc:	000020d9 	.word	0x000020d9
    1dc0:	00007ef4 	.word	0x00007ef4
    1dc4:	00001f55 	.word	0x00001f55

00001dc8 <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
    1dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(100UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
    1dca:	2300      	movs	r3, #0
    1dcc:	461a      	mov	r2, r3
    1dce:	4619      	mov	r1, r3
    1dd0:	481f      	ldr	r0, [pc, #124]	; (1e50 <ModemTxTask+0x88>)
    1dd2:	6800      	ldr	r0, [r0, #0]
    1dd4:	4c1f      	ldr	r4, [pc, #124]	; (1e54 <ModemTxTask+0x8c>)
    1dd6:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1dd8:	4c1f      	ldr	r4, [pc, #124]	; (1e58 <ModemTxTask+0x90>)
	
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
		{
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    1dda:	4d20      	ldr	r5, [pc, #128]	; (1e5c <ModemTxTask+0x94>)
** Description:        Transmits Data to Modem
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	getModemCommandData(atCmd, &ModemCmdData);
    1ddc:	f105 0608 	add.w	r6, r5, #8
    1de0:	e004      	b.n	1dec <ModemTxTask+0x24>
			kickWatchDog();
    1de2:	4b1f      	ldr	r3, [pc, #124]	; (1e60 <ModemTxTask+0x98>)
    1de4:	4798      	blx	r3
			vTaskDelay(xDelayMs);
    1de6:	2064      	movs	r0, #100	; 0x64
    1de8:	4b1e      	ldr	r3, [pc, #120]	; (1e64 <ModemTxTask+0x9c>)
    1dea:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1dec:	47a0      	blx	r4
    1dee:	2804      	cmp	r0, #4
    1df0:	d1fc      	bne.n	1dec <ModemTxTask+0x24>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
    1df2:	4b1d      	ldr	r3, [pc, #116]	; (1e68 <ModemTxTask+0xa0>)
    1df4:	6818      	ldr	r0, [r3, #0]
    1df6:	4b1d      	ldr	r3, [pc, #116]	; (1e6c <ModemTxTask+0xa4>)
    1df8:	4798      	blx	r3
    1dfa:	2800      	cmp	r0, #0
    1dfc:	d0f1      	beq.n	1de2 <ModemTxTask+0x1a>
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1dfe:	2100      	movs	r1, #0
    1e00:	4b13      	ldr	r3, [pc, #76]	; (1e50 <ModemTxTask+0x88>)
    1e02:	6818      	ldr	r0, [r3, #0]
    1e04:	4b1a      	ldr	r3, [pc, #104]	; (1e70 <ModemTxTask+0xa8>)
    1e06:	4798      	blx	r3
    1e08:	2801      	cmp	r0, #1
    1e0a:	d1ea      	bne.n	1de2 <ModemTxTask+0x1a>
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    1e0c:	2264      	movs	r2, #100	; 0x64
    1e0e:	4629      	mov	r1, r5
    1e10:	4b15      	ldr	r3, [pc, #84]	; (1e68 <ModemTxTask+0xa0>)
    1e12:	6818      	ldr	r0, [r3, #0]
    1e14:	4b17      	ldr	r3, [pc, #92]	; (1e74 <ModemTxTask+0xac>)
    1e16:	4798      	blx	r3
			if(xResult == pdPASS)
    1e18:	2801      	cmp	r0, #1
    1e1a:	d1e2      	bne.n	1de2 <ModemTxTask+0x1a>
				ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
    1e1c:	786f      	ldrb	r7, [r5, #1]
	getModemCommandData(atCmd, &ModemCmdData);
    1e1e:	4631      	mov	r1, r6
    1e20:	4638      	mov	r0, r7
    1e22:	4b15      	ldr	r3, [pc, #84]	; (1e78 <ModemTxTask+0xb0>)
    1e24:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
    1e26:	4b15      	ldr	r3, [pc, #84]	; (1e7c <ModemTxTask+0xb4>)
    1e28:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
    1e2a:	7c29      	ldrb	r1, [r5, #16]
    1e2c:	68e8      	ldr	r0, [r5, #12]
    1e2e:	4b14      	ldr	r3, [pc, #80]	; (1e80 <ModemTxTask+0xb8>)
    1e30:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
    1e32:	4638      	mov	r0, r7
    1e34:	4b13      	ldr	r3, [pc, #76]	; (1e84 <ModemTxTask+0xbc>)
    1e36:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
    1e38:	2000      	movs	r0, #0
    1e3a:	4b13      	ldr	r3, [pc, #76]	; (1e88 <ModemTxTask+0xc0>)
    1e3c:	4798      	blx	r3
				xSemaphoreGive(AtTxQueueLoadSemaphore);				
    1e3e:	2300      	movs	r3, #0
    1e40:	461a      	mov	r2, r3
    1e42:	4619      	mov	r1, r3
    1e44:	4802      	ldr	r0, [pc, #8]	; (1e50 <ModemTxTask+0x88>)
    1e46:	6800      	ldr	r0, [r0, #0]
    1e48:	4f02      	ldr	r7, [pc, #8]	; (1e54 <ModemTxTask+0x8c>)
    1e4a:	47b8      	blx	r7
    1e4c:	e7c9      	b.n	1de2 <ModemTxTask+0x1a>
    1e4e:	bf00      	nop
    1e50:	2000348c 	.word	0x2000348c
    1e54:	00004d11 	.word	0x00004d11
    1e58:	00001a2d 	.word	0x00001a2d
    1e5c:	2000050c 	.word	0x2000050c
    1e60:	000020d9 	.word	0x000020d9
    1e64:	00005a4d 	.word	0x00005a4d
    1e68:	20003480 	.word	0x20003480
    1e6c:	00005389 	.word	0x00005389
    1e70:	000051a9 	.word	0x000051a9
    1e74:	00005021 	.word	0x00005021
    1e78:	00000361 	.word	0x00000361
    1e7c:	00001779 	.word	0x00001779
    1e80:	000016fd 	.word	0x000016fd
    1e84:	00000551 	.word	0x00000551
    1e88:	00000545 	.word	0x00000545

00001e8c <usart_async_write>:
 *  Author: anilj
 */ 
#include "Application/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
    1e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e90:	4604      	mov	r4, r0
    1e92:	460e      	mov	r6, r1
    1e94:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
    1e96:	4d0e      	ldr	r5, [pc, #56]	; (1ed0 <usart_async_write+0x44>)
    1e98:	4620      	mov	r0, r4
    1e9a:	47a8      	blx	r5
    1e9c:	2800      	cmp	r0, #0
    1e9e:	d0fb      	beq.n	1e98 <usart_async_write+0xc>
    1ea0:	3e01      	subs	r6, #1
    1ea2:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1ed4 <usart_async_write+0x48>
    1ea6:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
    1ea8:	f8df a02c 	ldr.w	sl, [pc, #44]	; 1ed8 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
    1eac:	4d08      	ldr	r5, [pc, #32]	; (1ed0 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
    1eae:	7873      	ldrb	r3, [r6, #1]
    1eb0:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
    1eb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    1eb8:	4620      	mov	r0, r4
    1eba:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
    1ebc:	4620      	mov	r0, r4
    1ebe:	47a8      	blx	r5
    1ec0:	2800      	cmp	r0, #0
    1ec2:	d0fb      	beq.n	1ebc <usart_async_write+0x30>
		;
	} while (++offset < length);
    1ec4:	3701      	adds	r7, #1
    1ec6:	454f      	cmp	r7, r9
    1ec8:	d3f1      	bcc.n	1eae <usart_async_write+0x22>

	return (int32_t)offset;
}
    1eca:	4638      	mov	r0, r7
    1ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ed0:	00003807 	.word	0x00003807
    1ed4:	20000528 	.word	0x20000528
    1ed8:	000037f9 	.word	0x000037f9

00001edc <SerialDebugTxByteSentCallBack>:
    1edc:	2302      	movs	r3, #2
    1ede:	7603      	strb	r3, [r0, #24]
    1ee0:	4770      	bx	lr

00001ee2 <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    1ee2:	2380      	movs	r3, #128	; 0x80
    1ee4:	7603      	strb	r3, [r0, #24]
    1ee6:	4770      	bx	lr

00001ee8 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
    1ee8:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
    1eea:	4c05      	ldr	r4, [pc, #20]	; (1f00 <SerialDebugPrintInit+0x18>)
    1eec:	4905      	ldr	r1, [pc, #20]	; (1f04 <SerialDebugPrintInit+0x1c>)
    1eee:	4620      	mov	r0, r4
    1ef0:	4b05      	ldr	r3, [pc, #20]	; (1f08 <SerialDebugPrintInit+0x20>)
    1ef2:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
    1ef4:	2201      	movs	r2, #1
    1ef6:	4611      	mov	r1, r2
    1ef8:	4620      	mov	r0, r4
    1efa:	4b04      	ldr	r3, [pc, #16]	; (1f0c <SerialDebugPrintInit+0x24>)
    1efc:	4798      	blx	r3
    1efe:	bd10      	pop	{r4, pc}
    1f00:	20000040 	.word	0x20000040
    1f04:	43000400 	.word	0x43000400
    1f08:	00003771 	.word	0x00003771
    1f0c:	0000381d 	.word	0x0000381d

00001f10 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
    1f10:	b570      	push	{r4, r5, r6, lr}
    1f12:	4605      	mov	r5, r0
    1f14:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
    1f16:	4c05      	ldr	r4, [pc, #20]	; (1f2c <SerialDebugPrint+0x1c>)
    1f18:	4620      	mov	r0, r4
    1f1a:	4b05      	ldr	r3, [pc, #20]	; (1f30 <SerialDebugPrint+0x20>)
    1f1c:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
    1f1e:	4632      	mov	r2, r6
    1f20:	4629      	mov	r1, r5
    1f22:	4620      	mov	r0, r4
    1f24:	4b03      	ldr	r3, [pc, #12]	; (1f34 <SerialDebugPrint+0x24>)
    1f26:	4798      	blx	r3
    1f28:	bd70      	pop	{r4, r5, r6, pc}
    1f2a:	bf00      	nop
    1f2c:	20000040 	.word	0x20000040
    1f30:	000037e5 	.word	0x000037e5
    1f34:	00001e8d 	.word	0x00001e8d

00001f38 <SerialDebugTxDoneCallBack>:
{
    1f38:	b510      	push	{r4, lr}
    1f3a:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    1f3c:	2116      	movs	r1, #22
    1f3e:	4803      	ldr	r0, [pc, #12]	; (1f4c <SerialDebugTxDoneCallBack+0x14>)
    1f40:	4b03      	ldr	r3, [pc, #12]	; (1f50 <SerialDebugTxDoneCallBack+0x18>)
    1f42:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    1f44:	2301      	movs	r3, #1
    1f46:	7623      	strb	r3, [r4, #24]
    1f48:	bd10      	pop	{r4, pc}
    1f4a:	bf00      	nop
    1f4c:	00007f14 	.word	0x00007f14
    1f50:	00001f11 	.word	0x00001f11

00001f54 <SerialStringPrint>:
}

void SerialStringPrint(const uint8_t *const dataToPrint)
{
    1f54:	b570      	push	{r4, r5, r6, lr}
    1f56:	4605      	mov	r5, r0
	#ifdef SERIAL_DEBUG_ON
	
	uint8_t strLength;
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);
	uint8_t* dbgBuffer = NULL;
	strLength = strlen(dataToPrint);
    1f58:	4b17      	ldr	r3, [pc, #92]	; (1fb8 <SerialStringPrint+0x64>)
    1f5a:	4798      	blx	r3
    1f5c:	4604      	mov	r4, r0

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    1f5e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    1f62:	4b16      	ldr	r3, [pc, #88]	; (1fbc <SerialStringPrint+0x68>)
    1f64:	6818      	ldr	r0, [r3, #0]
    1f66:	4b16      	ldr	r3, [pc, #88]	; (1fc0 <SerialStringPrint+0x6c>)
    1f68:	4798      	blx	r3
    1f6a:	2801      	cmp	r0, #1
    1f6c:	d000      	beq.n	1f70 <SerialStringPrint+0x1c>
    1f6e:	bd70      	pop	{r4, r5, r6, pc}
    1f70:	b2e4      	uxtb	r4, r4
    {
		dbgBuffer = (uint8_t*)pvPortMalloc((strLength)*(sizeof(uint8_t)));
    1f72:	4620      	mov	r0, r4
    1f74:	4b13      	ldr	r3, [pc, #76]	; (1fc4 <SerialStringPrint+0x70>)
    1f76:	4798      	blx	r3
		
		if(dbgBuffer != NULL)
    1f78:	4606      	mov	r6, r0
    1f7a:	b1a0      	cbz	r0, 1fa6 <SerialStringPrint+0x52>
		{
	    	memset(dbgBuffer,'\0',strLength);
    1f7c:	4622      	mov	r2, r4
    1f7e:	2100      	movs	r1, #0
    1f80:	4b11      	ldr	r3, [pc, #68]	; (1fc8 <SerialStringPrint+0x74>)
    1f82:	4798      	blx	r3
	    	sprintf((int8_t*)dbgBuffer,"%s",dataToPrint);
    1f84:	4629      	mov	r1, r5
    1f86:	4630      	mov	r0, r6
    1f88:	4b10      	ldr	r3, [pc, #64]	; (1fcc <SerialStringPrint+0x78>)
    1f8a:	4798      	blx	r3
	    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    1f8c:	4630      	mov	r0, r6
    1f8e:	4b0a      	ldr	r3, [pc, #40]	; (1fb8 <SerialStringPrint+0x64>)
    1f90:	4798      	blx	r3
    1f92:	b281      	uxth	r1, r0
    1f94:	4630      	mov	r0, r6
    1f96:	4c0e      	ldr	r4, [pc, #56]	; (1fd0 <SerialStringPrint+0x7c>)
    1f98:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    1f9a:	2102      	movs	r1, #2
    1f9c:	480d      	ldr	r0, [pc, #52]	; (1fd4 <SerialStringPrint+0x80>)
    1f9e:	47a0      	blx	r4
	    	vPortFree(dbgBuffer);			
    1fa0:	4630      	mov	r0, r6
    1fa2:	4b0d      	ldr	r3, [pc, #52]	; (1fd8 <SerialStringPrint+0x84>)
    1fa4:	4798      	blx	r3
		}
    	xSemaphoreGive(DebugPrintMutex);
    1fa6:	2300      	movs	r3, #0
    1fa8:	461a      	mov	r2, r3
    1faa:	4619      	mov	r1, r3
    1fac:	4803      	ldr	r0, [pc, #12]	; (1fbc <SerialStringPrint+0x68>)
    1fae:	6800      	ldr	r0, [r0, #0]
    1fb0:	4c0a      	ldr	r4, [pc, #40]	; (1fdc <SerialStringPrint+0x88>)
    1fb2:	47a0      	blx	r4
    }
	
	#endif
}
    1fb4:	e7db      	b.n	1f6e <SerialStringPrint+0x1a>
    1fb6:	bf00      	nop
    1fb8:	000067d1 	.word	0x000067d1
    1fbc:	20003488 	.word	0x20003488
    1fc0:	000051a9 	.word	0x000051a9
    1fc4:	00004915 	.word	0x00004915
    1fc8:	000065f1 	.word	0x000065f1
    1fcc:	000067c1 	.word	0x000067c1
    1fd0:	00001f11 	.word	0x00001f11
    1fd4:	00007f40 	.word	0x00007f40
    1fd8:	000049e9 	.word	0x000049e9
    1fdc:	00004d11 	.word	0x00004d11

00001fe0 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    1fe0:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    1fe2:	2204      	movs	r2, #4
    1fe4:	4b0b      	ldr	r3, [pc, #44]	; (2014 <SERCOM5_2_Handler+0x34>)
    1fe6:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    1fe8:	4d0b      	ldr	r5, [pc, #44]	; (2018 <SERCOM5_2_Handler+0x38>)
    1fea:	4c0c      	ldr	r4, [pc, #48]	; (201c <SERCOM5_2_Handler+0x3c>)
    1fec:	4628      	mov	r0, r5
    1fee:	47a0      	blx	r4
    1ff0:	2800      	cmp	r0, #0
    1ff2:	d0fb      	beq.n	1fec <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    1ff4:	4808      	ldr	r0, [pc, #32]	; (2018 <SERCOM5_2_Handler+0x38>)
    1ff6:	4b0a      	ldr	r3, [pc, #40]	; (2020 <SERCOM5_2_Handler+0x40>)
    1ff8:	4798      	blx	r3
    1ffa:	490a      	ldr	r1, [pc, #40]	; (2024 <SERCOM5_2_Handler+0x44>)
    1ffc:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    1ffe:	2300      	movs	r3, #0
    2000:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    2002:	4c09      	ldr	r4, [pc, #36]	; (2028 <SERCOM5_2_Handler+0x48>)
    2004:	4620      	mov	r0, r4
    2006:	4b09      	ldr	r3, [pc, #36]	; (202c <SERCOM5_2_Handler+0x4c>)
    2008:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    200a:	2105      	movs	r1, #5
    200c:	4620      	mov	r0, r4
    200e:	4b08      	ldr	r3, [pc, #32]	; (2030 <SERCOM5_2_Handler+0x50>)
    2010:	4798      	blx	r3
    2012:	bd38      	pop	{r3, r4, r5, pc}
    2014:	43000400 	.word	0x43000400
    2018:	20000040 	.word	0x20000040
    201c:	00003811 	.word	0x00003811
    2020:	000037ff 	.word	0x000037ff
    2024:	20003cac 	.word	0x20003cac
    2028:	20003cb0 	.word	0x20003cb0
    202c:	000067c1 	.word	0x000067c1
    2030:	00001f11 	.word	0x00001f11

00002034 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    2034:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    2036:	4b0a      	ldr	r3, [pc, #40]	; (2060 <configureWatchDogTimeOut+0x2c>)
    2038:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    203c:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    203e:	4c09      	ldr	r4, [pc, #36]	; (2064 <configureWatchDogTimeOut+0x30>)
    2040:	6820      	ldr	r0, [r4, #0]
    2042:	2279      	movs	r2, #121	; 0x79
    2044:	4908      	ldr	r1, [pc, #32]	; (2068 <configureWatchDogTimeOut+0x34>)
    2046:	3000      	adds	r0, #0
    2048:	bf18      	it	ne
    204a:	2001      	movne	r0, #1
    204c:	4b07      	ldr	r3, [pc, #28]	; (206c <configureWatchDogTimeOut+0x38>)
    204e:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    2050:	462a      	mov	r2, r5
    2052:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2056:	4620      	mov	r0, r4
    2058:	4b05      	ldr	r3, [pc, #20]	; (2070 <configureWatchDogTimeOut+0x3c>)
    205a:	4798      	blx	r3
    205c:	bd38      	pop	{r3, r4, r5, pc}
    205e:	bf00      	nop
    2060:	2000005c 	.word	0x2000005c
    2064:	20003d8c 	.word	0x20003d8c
    2068:	00007f44 	.word	0x00007f44
    206c:	00002cf1 	.word	0x00002cf1
    2070:	000041bd 	.word	0x000041bd

00002074 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    2074:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    2076:	2002      	movs	r0, #2
    2078:	4b07      	ldr	r3, [pc, #28]	; (2098 <enableWatchDogTimer+0x24>)
    207a:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    207c:	4c07      	ldr	r4, [pc, #28]	; (209c <enableWatchDogTimer+0x28>)
    207e:	6820      	ldr	r0, [r4, #0]
    2080:	2296      	movs	r2, #150	; 0x96
    2082:	4907      	ldr	r1, [pc, #28]	; (20a0 <enableWatchDogTimer+0x2c>)
    2084:	3000      	adds	r0, #0
    2086:	bf18      	it	ne
    2088:	2001      	movne	r0, #1
    208a:	4b06      	ldr	r3, [pc, #24]	; (20a4 <enableWatchDogTimer+0x30>)
    208c:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    208e:	4620      	mov	r0, r4
    2090:	4b05      	ldr	r3, [pc, #20]	; (20a8 <enableWatchDogTimer+0x34>)
    2092:	4798      	blx	r3
    2094:	bd10      	pop	{r4, pc}
    2096:	bf00      	nop
    2098:	00002035 	.word	0x00002035
    209c:	20003d8c 	.word	0x20003d8c
    20a0:	00007f44 	.word	0x00007f44
    20a4:	00002cf1 	.word	0x00002cf1
    20a8:	000042d9 	.word	0x000042d9

000020ac <atmel_start_init>:
{
    20ac:	b508      	push	{r3, lr}
    system_init();
    20ae:	4b06      	ldr	r3, [pc, #24]	; (20c8 <atmel_start_init+0x1c>)
    20b0:	4798      	blx	r3
    delay_ms(1000);
    20b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    20b6:	4b05      	ldr	r3, [pc, #20]	; (20cc <atmel_start_init+0x20>)
    20b8:	4798      	blx	r3
    ForcedResetRequested = WDT_FORCED_RESET_OFF;
    20ba:	2201      	movs	r2, #1
    20bc:	4b04      	ldr	r3, [pc, #16]	; (20d0 <atmel_start_init+0x24>)
    20be:	731a      	strb	r2, [r3, #12]
    enableWatchDogTimer();
    20c0:	4b04      	ldr	r3, [pc, #16]	; (20d4 <atmel_start_init+0x28>)
    20c2:	4798      	blx	r3
    20c4:	bd08      	pop	{r3, pc}
    20c6:	bf00      	nop
    20c8:	000028a9 	.word	0x000028a9
    20cc:	00002a99 	.word	0x00002a99
    20d0:	2000005c 	.word	0x2000005c
    20d4:	00002075 	.word	0x00002075

000020d8 <kickWatchDog>:
********************************************************************************/
int32_t kickWatchDog(void)
{	
	int32_t status = ERR_NONE;

	if(WDT_FORCED_RESET_OFF == ForcedResetRequested)
    20d8:	4b0a      	ldr	r3, [pc, #40]	; (2104 <kickWatchDog+0x2c>)
    20da:	7b1b      	ldrb	r3, [r3, #12]
    20dc:	2b01      	cmp	r3, #1
    20de:	d10d      	bne.n	20fc <kickWatchDog+0x24>
{	
    20e0:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    20e2:	4c09      	ldr	r4, [pc, #36]	; (2108 <kickWatchDog+0x30>)
    20e4:	6820      	ldr	r0, [r4, #0]
    20e6:	22b3      	movs	r2, #179	; 0xb3
    20e8:	4908      	ldr	r1, [pc, #32]	; (210c <kickWatchDog+0x34>)
    20ea:	3000      	adds	r0, #0
    20ec:	bf18      	it	ne
    20ee:	2001      	movne	r0, #1
    20f0:	4b07      	ldr	r3, [pc, #28]	; (2110 <kickWatchDog+0x38>)
    20f2:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    20f4:	4620      	mov	r0, r4
    20f6:	4b07      	ldr	r3, [pc, #28]	; (2114 <kickWatchDog+0x3c>)
    20f8:	4798      	blx	r3
    20fa:	bd10      	pop	{r4, pc}
	{
		status = wdt_feed(&WDT_0);
	}
	else
	{
		status = ERR_DENIED;
    20fc:	f06f 0010 	mvn.w	r0, #16
	}

	return status;
    2100:	4770      	bx	lr
    2102:	bf00      	nop
    2104:	2000005c 	.word	0x2000005c
    2108:	20003d8c 	.word	0x20003d8c
    210c:	00007f44 	.word	0x00007f44
    2110:	00002cf1 	.word	0x00002cf1
    2114:	00004365 	.word	0x00004365

00002118 <requestWatchDogForcedReset>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
void requestWatchDogForcedReset(void)
{
    2118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ForcedResetRequested = WDT_FORCED_RESET_ON;
    211a:	2700      	movs	r7, #0
    211c:	4b0e      	ldr	r3, [pc, #56]	; (2158 <requestWatchDogForcedReset+0x40>)
    211e:	731f      	strb	r7, [r3, #12]
	ASSERT(wdt && wdt->dev.hw);
    2120:	4e0e      	ldr	r6, [pc, #56]	; (215c <requestWatchDogForcedReset+0x44>)
    2122:	4c0f      	ldr	r4, [pc, #60]	; (2160 <requestWatchDogForcedReset+0x48>)
    2124:	6820      	ldr	r0, [r4, #0]
    2126:	22a5      	movs	r2, #165	; 0xa5
    2128:	4631      	mov	r1, r6
    212a:	1bc0      	subs	r0, r0, r7
    212c:	bf18      	it	ne
    212e:	2001      	movne	r0, #1
    2130:	4d0c      	ldr	r5, [pc, #48]	; (2164 <requestWatchDogForcedReset+0x4c>)
    2132:	47a8      	blx	r5
	return _wdt_disable(&wdt->dev);
    2134:	4620      	mov	r0, r4
    2136:	4b0c      	ldr	r3, [pc, #48]	; (2168 <requestWatchDogForcedReset+0x50>)
    2138:	4798      	blx	r3
	wdt_disable(&WDT_0);
	configureWatchDogTimeOut(WDT_TIMEOUT_FAST);
    213a:	4638      	mov	r0, r7
    213c:	4b0b      	ldr	r3, [pc, #44]	; (216c <requestWatchDogForcedReset+0x54>)
    213e:	4798      	blx	r3
	ASSERT(wdt && wdt->dev.hw);
    2140:	6820      	ldr	r0, [r4, #0]
    2142:	2296      	movs	r2, #150	; 0x96
    2144:	4631      	mov	r1, r6
    2146:	1bc0      	subs	r0, r0, r7
    2148:	bf18      	it	ne
    214a:	2001      	movne	r0, #1
    214c:	47a8      	blx	r5
	return _wdt_enable(&wdt->dev);
    214e:	4620      	mov	r0, r4
    2150:	4b07      	ldr	r3, [pc, #28]	; (2170 <requestWatchDogForcedReset+0x58>)
    2152:	4798      	blx	r3
    2154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2156:	bf00      	nop
    2158:	2000005c 	.word	0x2000005c
    215c:	00007f44 	.word	0x00007f44
    2160:	20003d8c 	.word	0x20003d8c
    2164:	00002cf1 	.word	0x00002cf1
    2168:	00004315 	.word	0x00004315
    216c:	00002035 	.word	0x00002035
    2170:	000042d9 	.word	0x000042d9

00002174 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2174:	e7fe      	b.n	2174 <Dummy_Handler>
	...

00002178 <Reset_Handler>:
{
    2178:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    217a:	4b1c      	ldr	r3, [pc, #112]	; (21ec <Reset_Handler+0x74>)
    217c:	4a1c      	ldr	r2, [pc, #112]	; (21f0 <Reset_Handler+0x78>)
    217e:	429a      	cmp	r2, r3
    2180:	d010      	beq.n	21a4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    2182:	4b1c      	ldr	r3, [pc, #112]	; (21f4 <Reset_Handler+0x7c>)
    2184:	4a19      	ldr	r2, [pc, #100]	; (21ec <Reset_Handler+0x74>)
    2186:	429a      	cmp	r2, r3
    2188:	d20c      	bcs.n	21a4 <Reset_Handler+0x2c>
    218a:	3b01      	subs	r3, #1
    218c:	1a9b      	subs	r3, r3, r2
    218e:	f023 0303 	bic.w	r3, r3, #3
    2192:	3304      	adds	r3, #4
    2194:	4413      	add	r3, r2
    2196:	4916      	ldr	r1, [pc, #88]	; (21f0 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    2198:	f851 0b04 	ldr.w	r0, [r1], #4
    219c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    21a0:	429a      	cmp	r2, r3
    21a2:	d1f9      	bne.n	2198 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    21a4:	4b14      	ldr	r3, [pc, #80]	; (21f8 <Reset_Handler+0x80>)
    21a6:	4a15      	ldr	r2, [pc, #84]	; (21fc <Reset_Handler+0x84>)
    21a8:	429a      	cmp	r2, r3
    21aa:	d20a      	bcs.n	21c2 <Reset_Handler+0x4a>
    21ac:	3b01      	subs	r3, #1
    21ae:	1a9b      	subs	r3, r3, r2
    21b0:	f023 0303 	bic.w	r3, r3, #3
    21b4:	3304      	adds	r3, #4
    21b6:	4413      	add	r3, r2
                *pDest++ = 0;
    21b8:	2100      	movs	r1, #0
    21ba:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    21be:	4293      	cmp	r3, r2
    21c0:	d1fb      	bne.n	21ba <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    21c2:	4b0f      	ldr	r3, [pc, #60]	; (2200 <Reset_Handler+0x88>)
    21c4:	4a0f      	ldr	r2, [pc, #60]	; (2204 <Reset_Handler+0x8c>)
    21c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    21ca:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    21cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    21d0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    21d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    21d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21dc:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    21e0:	4b09      	ldr	r3, [pc, #36]	; (2208 <Reset_Handler+0x90>)
    21e2:	4798      	blx	r3
        main();
    21e4:	4b09      	ldr	r3, [pc, #36]	; (220c <Reset_Handler+0x94>)
    21e6:	4798      	blx	r3
    21e8:	e7fe      	b.n	21e8 <Reset_Handler+0x70>
    21ea:	bf00      	nop
    21ec:	20000000 	.word	0x20000000
    21f0:	0000860c 	.word	0x0000860c
    21f4:	20000190 	.word	0x20000190
    21f8:	20003e78 	.word	0x20003e78
    21fc:	20000190 	.word	0x20000190
    2200:	e000ed00 	.word	0xe000ed00
    2204:	00000000 	.word	0x00000000
    2208:	00006541 	.word	0x00006541
    220c:	000043fd 	.word	0x000043fd

00002210 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
    2210:	4a04      	ldr	r2, [pc, #16]	; (2224 <AC_0_CLOCK_init+0x14>)
    2212:	69d3      	ldr	r3, [r2, #28]
    2214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2218:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    221a:	2240      	movs	r2, #64	; 0x40
    221c:	4b02      	ldr	r3, [pc, #8]	; (2228 <AC_0_CLOCK_init+0x18>)
    221e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2222:	4770      	bx	lr
    2224:	40000800 	.word	0x40000800
    2228:	40001c00 	.word	0x40001c00

0000222c <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
    222c:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
    222e:	4b03      	ldr	r3, [pc, #12]	; (223c <AC_0_init+0x10>)
    2230:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
    2232:	4903      	ldr	r1, [pc, #12]	; (2240 <AC_0_init+0x14>)
    2234:	4803      	ldr	r0, [pc, #12]	; (2244 <AC_0_init+0x18>)
    2236:	4b04      	ldr	r3, [pc, #16]	; (2248 <AC_0_init+0x1c>)
    2238:	4798      	blx	r3
    223a:	bd08      	pop	{r3, pc}
    223c:	00002211 	.word	0x00002211
    2240:	42002000 	.word	0x42002000
    2244:	20003d58 	.word	0x20003d58
    2248:	000029c9 	.word	0x000029c9

0000224c <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    224c:	4b5d      	ldr	r3, [pc, #372]	; (23c4 <ADC_0_PORT_init+0x178>)
    224e:	2204      	movs	r2, #4
    2250:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2252:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2256:	629a      	str	r2, [r3, #40]	; 0x28
    2258:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    225c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    225e:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    2262:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2266:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    226a:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    226e:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2272:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2276:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    227a:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    227e:	2108      	movs	r1, #8
    2280:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2282:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2286:	6299      	str	r1, [r3, #40]	; 0x28
    2288:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    228a:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    228e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2292:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2296:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    229a:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    229e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    22a2:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    22a6:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    22aa:	f44f 7180 	mov.w	r1, #256	; 0x100
    22ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22b2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    22b6:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    22ba:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22be:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    22c2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    22c6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22ca:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    22ce:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    22d2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    22d6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    22da:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    22de:	f44f 7100 	mov.w	r1, #512	; 0x200
    22e2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22e6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    22ea:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    22ee:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22f2:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    22f6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    22fa:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22fe:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2302:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2306:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    230a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    230e:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2312:	2110      	movs	r1, #16
    2314:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2316:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    231a:	6299      	str	r1, [r3, #40]	; 0x28
    231c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    231e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    2322:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2326:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    232a:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    232e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2332:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2336:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    233a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    233e:	2120      	movs	r1, #32
    2340:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2342:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2346:	6299      	str	r1, [r3, #40]	; 0x28
    2348:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    234a:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    234e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2352:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2356:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    235a:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    235e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2362:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2366:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    236a:	2140      	movs	r1, #64	; 0x40
    236c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    236e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2372:	6299      	str	r1, [r3, #40]	; 0x28
    2374:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2376:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    237a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    237e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2382:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2386:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    238a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    238e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2392:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2396:	2180      	movs	r1, #128	; 0x80
    2398:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    239a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    239e:	6299      	str	r1, [r3, #40]	; 0x28
    23a0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    23a2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    23a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    23aa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    23ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    23b2:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    23b6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    23ba:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    23be:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    23c2:	4770      	bx	lr
    23c4:	41008000 	.word	0x41008000

000023c8 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    23c8:	4a04      	ldr	r2, [pc, #16]	; (23dc <ADC_0_CLOCK_init+0x14>)
    23ca:	6a13      	ldr	r3, [r2, #32]
    23cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    23d0:	6213      	str	r3, [r2, #32]
    23d2:	2241      	movs	r2, #65	; 0x41
    23d4:	4b02      	ldr	r3, [pc, #8]	; (23e0 <ADC_0_CLOCK_init+0x18>)
    23d6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    23da:	4770      	bx	lr
    23dc:	40000800 	.word	0x40000800
    23e0:	40001c00 	.word	0x40001c00

000023e4 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    23e4:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    23e6:	4b05      	ldr	r3, [pc, #20]	; (23fc <ADC_0_init+0x18>)
    23e8:	4798      	blx	r3
	ADC_0_PORT_init();
    23ea:	4b05      	ldr	r3, [pc, #20]	; (2400 <ADC_0_init+0x1c>)
    23ec:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    23ee:	2200      	movs	r2, #0
    23f0:	4904      	ldr	r1, [pc, #16]	; (2404 <ADC_0_init+0x20>)
    23f2:	4805      	ldr	r0, [pc, #20]	; (2408 <ADC_0_init+0x24>)
    23f4:	4b05      	ldr	r3, [pc, #20]	; (240c <ADC_0_init+0x28>)
    23f6:	4798      	blx	r3
    23f8:	bd08      	pop	{r3, pc}
    23fa:	bf00      	nop
    23fc:	000023c9 	.word	0x000023c9
    2400:	0000224d 	.word	0x0000224d
    2404:	43001c00 	.word	0x43001c00
    2408:	20003d68 	.word	0x20003d68
    240c:	000029f9 	.word	0x000029f9

00002410 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    2410:	4a04      	ldr	r2, [pc, #16]	; (2424 <ADC_1_CLOCK_init+0x14>)
    2412:	6a13      	ldr	r3, [r2, #32]
    2414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2418:	6213      	str	r3, [r2, #32]
    241a:	2240      	movs	r2, #64	; 0x40
    241c:	4b02      	ldr	r3, [pc, #8]	; (2428 <ADC_1_CLOCK_init+0x18>)
    241e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2422:	4770      	bx	lr
    2424:	40000800 	.word	0x40000800
    2428:	40001c00 	.word	0x40001c00

0000242c <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
    242c:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
    242e:	4b04      	ldr	r3, [pc, #16]	; (2440 <ADC_1_init+0x14>)
    2430:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
    2432:	2200      	movs	r2, #0
    2434:	4903      	ldr	r1, [pc, #12]	; (2444 <ADC_1_init+0x18>)
    2436:	4804      	ldr	r0, [pc, #16]	; (2448 <ADC_1_init+0x1c>)
    2438:	4b04      	ldr	r3, [pc, #16]	; (244c <ADC_1_init+0x20>)
    243a:	4798      	blx	r3
    243c:	bd08      	pop	{r3, pc}
    243e:	bf00      	nop
    2440:	00002411 	.word	0x00002411
    2444:	43002000 	.word	0x43002000
    2448:	20003e20 	.word	0x20003e20
    244c:	000029f9 	.word	0x000029f9

00002450 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    2450:	4a04      	ldr	r2, [pc, #16]	; (2464 <DAC_0_CLOCK_init+0x14>)
    2452:	6a13      	ldr	r3, [r2, #32]
    2454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2458:	6213      	str	r3, [r2, #32]
    245a:	2240      	movs	r2, #64	; 0x40
    245c:	4b02      	ldr	r3, [pc, #8]	; (2468 <DAC_0_CLOCK_init+0x18>)
    245e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    2462:	4770      	bx	lr
    2464:	40000800 	.word	0x40000800
    2468:	40001c00 	.word	0x40001c00

0000246c <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    246c:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    246e:	4b03      	ldr	r3, [pc, #12]	; (247c <DAC_0_init+0x10>)
    2470:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    2472:	4903      	ldr	r1, [pc, #12]	; (2480 <DAC_0_init+0x14>)
    2474:	4803      	ldr	r0, [pc, #12]	; (2484 <DAC_0_init+0x18>)
    2476:	4b04      	ldr	r3, [pc, #16]	; (2488 <DAC_0_init+0x1c>)
    2478:	4798      	blx	r3
    247a:	bd08      	pop	{r3, pc}
    247c:	00002451 	.word	0x00002451
    2480:	43002400 	.word	0x43002400
    2484:	20003d90 	.word	0x20003d90
    2488:	00002a45 	.word	0x00002a45

0000248c <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    248c:	b508      	push	{r3, lr}
    248e:	2240      	movs	r2, #64	; 0x40
    2490:	4b05      	ldr	r3, [pc, #20]	; (24a8 <EXTERNAL_IRQ_0_init+0x1c>)
    2492:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2496:	4a05      	ldr	r2, [pc, #20]	; (24ac <EXTERNAL_IRQ_0_init+0x20>)
    2498:	6953      	ldr	r3, [r2, #20]
    249a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    249e:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    24a0:	4b03      	ldr	r3, [pc, #12]	; (24b0 <EXTERNAL_IRQ_0_init+0x24>)
    24a2:	4798      	blx	r3
    24a4:	bd08      	pop	{r3, pc}
    24a6:	bf00      	nop
    24a8:	40001c00 	.word	0x40001c00
    24ac:	40000800 	.word	0x40000800
    24b0:	00002afd 	.word	0x00002afd

000024b4 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    24b4:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    24b6:	4a04      	ldr	r2, [pc, #16]	; (24c8 <EVENT_SYSTEM_0_init+0x14>)
    24b8:	6993      	ldr	r3, [r2, #24]
    24ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    24be:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    24c0:	4b02      	ldr	r3, [pc, #8]	; (24cc <EVENT_SYSTEM_0_init+0x18>)
    24c2:	4798      	blx	r3
    24c4:	bd08      	pop	{r3, pc}
    24c6:	bf00      	nop
    24c8:	40000800 	.word	0x40000800
    24cc:	00002ab9 	.word	0x00002ab9

000024d0 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    24d0:	4a02      	ldr	r2, [pc, #8]	; (24dc <FLASH_0_CLOCK_init+0xc>)
    24d2:	6913      	ldr	r3, [r2, #16]
    24d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    24d8:	6113      	str	r3, [r2, #16]
    24da:	4770      	bx	lr
    24dc:	40000800 	.word	0x40000800

000024e0 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    24e0:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    24e2:	4b03      	ldr	r3, [pc, #12]	; (24f0 <FLASH_0_init+0x10>)
    24e4:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    24e6:	4903      	ldr	r1, [pc, #12]	; (24f4 <FLASH_0_init+0x14>)
    24e8:	4803      	ldr	r0, [pc, #12]	; (24f8 <FLASH_0_init+0x18>)
    24ea:	4b04      	ldr	r3, [pc, #16]	; (24fc <FLASH_0_init+0x1c>)
    24ec:	4798      	blx	r3
    24ee:	bd08      	pop	{r3, pc}
    24f0:	000024d1 	.word	0x000024d1
    24f4:	41004000 	.word	0x41004000
    24f8:	20003d1c 	.word	0x20003d1c
    24fc:	00002b35 	.word	0x00002b35

00002500 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2500:	4b10      	ldr	r3, [pc, #64]	; (2544 <ModemData_PORT_init+0x44>)
    2502:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    2506:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    250a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    250e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2512:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2516:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    251a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    251e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2522:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    2526:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    252a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    252e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2532:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2536:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    253a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    253e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    2542:	4770      	bx	lr
    2544:	41008000 	.word	0x41008000

00002548 <ModemData_CLOCK_init>:
    2548:	4b06      	ldr	r3, [pc, #24]	; (2564 <ModemData_CLOCK_init+0x1c>)
    254a:	2240      	movs	r2, #64	; 0x40
    254c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    2550:	224a      	movs	r2, #74	; 0x4a
    2552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    2556:	4a04      	ldr	r2, [pc, #16]	; (2568 <ModemData_CLOCK_init+0x20>)
    2558:	6993      	ldr	r3, [r2, #24]
    255a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    255e:	6193      	str	r3, [r2, #24]
    2560:	4770      	bx	lr
    2562:	bf00      	nop
    2564:	40001c00 	.word	0x40001c00
    2568:	40000800 	.word	0x40000800

0000256c <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    256c:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    256e:	4b03      	ldr	r3, [pc, #12]	; (257c <ModemData_init+0x10>)
    2570:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    2572:	4b03      	ldr	r3, [pc, #12]	; (2580 <ModemData_init+0x14>)
    2574:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    2576:	4b03      	ldr	r3, [pc, #12]	; (2584 <ModemData_init+0x18>)
    2578:	4798      	blx	r3
    257a:	bd08      	pop	{r3, pc}
    257c:	00002549 	.word	0x00002549
    2580:	000015e9 	.word	0x000015e9
    2584:	00002501 	.word	0x00002501

00002588 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2588:	4b10      	ldr	r3, [pc, #64]	; (25cc <SerialDebug_PORT_init+0x44>)
    258a:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    258e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2592:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2596:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    259a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    259e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    25a2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    25a6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    25aa:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    25ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    25b2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    25b6:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    25ba:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    25be:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    25c2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    25c6:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    25ca:	4770      	bx	lr
    25cc:	41008000 	.word	0x41008000

000025d0 <SerialDebug_CLOCK_init>:
    25d0:	4b06      	ldr	r3, [pc, #24]	; (25ec <SerialDebug_CLOCK_init+0x1c>)
    25d2:	2240      	movs	r2, #64	; 0x40
    25d4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    25d8:	224a      	movs	r2, #74	; 0x4a
    25da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    25de:	4a04      	ldr	r2, [pc, #16]	; (25f0 <SerialDebug_CLOCK_init+0x20>)
    25e0:	6a13      	ldr	r3, [r2, #32]
    25e2:	f043 0302 	orr.w	r3, r3, #2
    25e6:	6213      	str	r3, [r2, #32]
    25e8:	4770      	bx	lr
    25ea:	bf00      	nop
    25ec:	40001c00 	.word	0x40001c00
    25f0:	40000800 	.word	0x40000800

000025f4 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    25f4:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    25f6:	4b03      	ldr	r3, [pc, #12]	; (2604 <SerialDebug_init+0x10>)
    25f8:	4798      	blx	r3
	SerialDebugPrintInit();
    25fa:	4b03      	ldr	r3, [pc, #12]	; (2608 <SerialDebug_init+0x14>)
    25fc:	4798      	blx	r3
	SerialDebug_PORT_init();
    25fe:	4b03      	ldr	r3, [pc, #12]	; (260c <SerialDebug_init+0x18>)
    2600:	4798      	blx	r3
    2602:	bd08      	pop	{r3, pc}
    2604:	000025d1 	.word	0x000025d1
    2608:	00001ee9 	.word	0x00001ee9
    260c:	00002589 	.word	0x00002589

00002610 <delay_driver_init>:
}

void delay_driver_init(void)
{
    2610:	b508      	push	{r3, lr}
	delay_init(SysTick);
    2612:	4802      	ldr	r0, [pc, #8]	; (261c <delay_driver_init+0xc>)
    2614:	4b02      	ldr	r3, [pc, #8]	; (2620 <delay_driver_init+0x10>)
    2616:	4798      	blx	r3
    2618:	bd08      	pop	{r3, pc}
    261a:	bf00      	nop
    261c:	e000e010 	.word	0xe000e010
    2620:	00002a85 	.word	0x00002a85

00002624 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2624:	4a04      	ldr	r2, [pc, #16]	; (2638 <PWM_0_CLOCK_init+0x14>)
    2626:	6953      	ldr	r3, [r2, #20]
    2628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    262c:	6153      	str	r3, [r2, #20]
    262e:	2240      	movs	r2, #64	; 0x40
    2630:	4b02      	ldr	r3, [pc, #8]	; (263c <PWM_0_CLOCK_init+0x18>)
    2632:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    2636:	4770      	bx	lr
    2638:	40000800 	.word	0x40000800
    263c:	40001c00 	.word	0x40001c00

00002640 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    2640:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    2642:	4b05      	ldr	r3, [pc, #20]	; (2658 <PWM_0_init+0x18>)
    2644:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    2646:	4b05      	ldr	r3, [pc, #20]	; (265c <PWM_0_init+0x1c>)
    2648:	4798      	blx	r3
    264a:	4602      	mov	r2, r0
    264c:	4904      	ldr	r1, [pc, #16]	; (2660 <PWM_0_init+0x20>)
    264e:	4805      	ldr	r0, [pc, #20]	; (2664 <PWM_0_init+0x24>)
    2650:	4b05      	ldr	r3, [pc, #20]	; (2668 <PWM_0_init+0x28>)
    2652:	4798      	blx	r3
    2654:	bd08      	pop	{r3, pc}
    2656:	bf00      	nop
    2658:	00002625 	.word	0x00002625
    265c:	000040d5 	.word	0x000040d5
    2660:	40003800 	.word	0x40003800
    2664:	20003ce4 	.word	0x20003ce4
    2668:	00002b91 	.word	0x00002b91

0000266c <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    266c:	4a04      	ldr	r2, [pc, #16]	; (2680 <PWM_1_CLOCK_init+0x14>)
    266e:	6953      	ldr	r3, [r2, #20]
    2670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2674:	6153      	str	r3, [r2, #20]
    2676:	2240      	movs	r2, #64	; 0x40
    2678:	4b02      	ldr	r3, [pc, #8]	; (2684 <PWM_1_CLOCK_init+0x18>)
    267a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    267e:	4770      	bx	lr
    2680:	40000800 	.word	0x40000800
    2684:	40001c00 	.word	0x40001c00

00002688 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    2688:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    268a:	4b05      	ldr	r3, [pc, #20]	; (26a0 <PWM_1_init+0x18>)
    268c:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    268e:	4b05      	ldr	r3, [pc, #20]	; (26a4 <PWM_1_init+0x1c>)
    2690:	4798      	blx	r3
    2692:	4602      	mov	r2, r0
    2694:	4904      	ldr	r1, [pc, #16]	; (26a8 <PWM_1_init+0x20>)
    2696:	4805      	ldr	r0, [pc, #20]	; (26ac <PWM_1_init+0x24>)
    2698:	4b05      	ldr	r3, [pc, #20]	; (26b0 <PWM_1_init+0x28>)
    269a:	4798      	blx	r3
    269c:	bd08      	pop	{r3, pc}
    269e:	bf00      	nop
    26a0:	0000266d 	.word	0x0000266d
    26a4:	000040d5 	.word	0x000040d5
    26a8:	40003c00 	.word	0x40003c00
    26ac:	20003e04 	.word	0x20003e04
    26b0:	00002b91 	.word	0x00002b91

000026b4 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    26b4:	4a04      	ldr	r2, [pc, #16]	; (26c8 <PWM_2_CLOCK_init+0x14>)
    26b6:	6993      	ldr	r3, [r2, #24]
    26b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    26bc:	6193      	str	r3, [r2, #24]
    26be:	2240      	movs	r2, #64	; 0x40
    26c0:	4b02      	ldr	r3, [pc, #8]	; (26cc <PWM_2_CLOCK_init+0x18>)
    26c2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    26c6:	4770      	bx	lr
    26c8:	40000800 	.word	0x40000800
    26cc:	40001c00 	.word	0x40001c00

000026d0 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    26d0:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    26d2:	4b05      	ldr	r3, [pc, #20]	; (26e8 <PWM_2_init+0x18>)
    26d4:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    26d6:	4b05      	ldr	r3, [pc, #20]	; (26ec <PWM_2_init+0x1c>)
    26d8:	4798      	blx	r3
    26da:	4602      	mov	r2, r0
    26dc:	4904      	ldr	r1, [pc, #16]	; (26f0 <PWM_2_init+0x20>)
    26de:	4805      	ldr	r0, [pc, #20]	; (26f4 <PWM_2_init+0x24>)
    26e0:	4b05      	ldr	r3, [pc, #20]	; (26f8 <PWM_2_init+0x28>)
    26e2:	4798      	blx	r3
    26e4:	bd08      	pop	{r3, pc}
    26e6:	bf00      	nop
    26e8:	000026b5 	.word	0x000026b5
    26ec:	000040d5 	.word	0x000040d5
    26f0:	4101a000 	.word	0x4101a000
    26f4:	20003d00 	.word	0x20003d00
    26f8:	00002b91 	.word	0x00002b91

000026fc <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    26fc:	4a04      	ldr	r2, [pc, #16]	; (2710 <TIMER_3_CLOCK_init+0x14>)
    26fe:	6993      	ldr	r3, [r2, #24]
    2700:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    2704:	6193      	str	r3, [r2, #24]
    2706:	2240      	movs	r2, #64	; 0x40
    2708:	4b02      	ldr	r3, [pc, #8]	; (2714 <TIMER_3_CLOCK_init+0x18>)
    270a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    270e:	4770      	bx	lr
    2710:	40000800 	.word	0x40000800
    2714:	40001c00 	.word	0x40001c00

00002718 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    2718:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    271a:	4b05      	ldr	r3, [pc, #20]	; (2730 <TIMER_3_init+0x18>)
    271c:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    271e:	4b05      	ldr	r3, [pc, #20]	; (2734 <TIMER_3_init+0x1c>)
    2720:	4798      	blx	r3
    2722:	4602      	mov	r2, r0
    2724:	4904      	ldr	r1, [pc, #16]	; (2738 <TIMER_3_init+0x20>)
    2726:	4805      	ldr	r0, [pc, #20]	; (273c <TIMER_3_init+0x24>)
    2728:	4b05      	ldr	r3, [pc, #20]	; (2740 <TIMER_3_init+0x28>)
    272a:	4798      	blx	r3
    272c:	bd08      	pop	{r3, pc}
    272e:	bf00      	nop
    2730:	000026fd 	.word	0x000026fd
    2734:	00003b8d 	.word	0x00003b8d
    2738:	41016000 	.word	0x41016000
    273c:	20003e24 	.word	0x20003e24
    2740:	00002cad 	.word	0x00002cad

00002744 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    2744:	4a04      	ldr	r2, [pc, #16]	; (2758 <TIMER_4_CLOCK_init+0x14>)
    2746:	6993      	ldr	r3, [r2, #24]
    2748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    274c:	6193      	str	r3, [r2, #24]
    274e:	2240      	movs	r2, #64	; 0x40
    2750:	4b02      	ldr	r3, [pc, #8]	; (275c <TIMER_4_CLOCK_init+0x18>)
    2752:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    2756:	4770      	bx	lr
    2758:	40000800 	.word	0x40000800
    275c:	40001c00 	.word	0x40001c00

00002760 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    2760:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    2762:	4b05      	ldr	r3, [pc, #20]	; (2778 <TIMER_4_init+0x18>)
    2764:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    2766:	4b05      	ldr	r3, [pc, #20]	; (277c <TIMER_4_init+0x1c>)
    2768:	4798      	blx	r3
    276a:	4602      	mov	r2, r0
    276c:	4904      	ldr	r1, [pc, #16]	; (2780 <TIMER_4_init+0x20>)
    276e:	4805      	ldr	r0, [pc, #20]	; (2784 <TIMER_4_init+0x24>)
    2770:	4b05      	ldr	r3, [pc, #20]	; (2788 <TIMER_4_init+0x28>)
    2772:	4798      	blx	r3
    2774:	bd08      	pop	{r3, pc}
    2776:	bf00      	nop
    2778:	00002745 	.word	0x00002745
    277c:	00003b8d 	.word	0x00003b8d
    2780:	41018000 	.word	0x41018000
    2784:	20003d6c 	.word	0x20003d6c
    2788:	00002cad 	.word	0x00002cad

0000278c <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    278c:	4a04      	ldr	r2, [pc, #16]	; (27a0 <TIMER_5_CLOCK_init+0x14>)
    278e:	69d3      	ldr	r3, [r2, #28]
    2790:	f043 0308 	orr.w	r3, r3, #8
    2794:	61d3      	str	r3, [r2, #28]
    2796:	2240      	movs	r2, #64	; 0x40
    2798:	4b02      	ldr	r3, [pc, #8]	; (27a4 <TIMER_5_CLOCK_init+0x18>)
    279a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    279e:	4770      	bx	lr
    27a0:	40000800 	.word	0x40000800
    27a4:	40001c00 	.word	0x40001c00

000027a8 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    27a8:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    27aa:	4b05      	ldr	r3, [pc, #20]	; (27c0 <TIMER_5_init+0x18>)
    27ac:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    27ae:	4b05      	ldr	r3, [pc, #20]	; (27c4 <TIMER_5_init+0x1c>)
    27b0:	4798      	blx	r3
    27b2:	4602      	mov	r2, r0
    27b4:	4904      	ldr	r1, [pc, #16]	; (27c8 <TIMER_5_init+0x20>)
    27b6:	4805      	ldr	r0, [pc, #20]	; (27cc <TIMER_5_init+0x24>)
    27b8:	4b05      	ldr	r3, [pc, #20]	; (27d0 <TIMER_5_init+0x28>)
    27ba:	4798      	blx	r3
    27bc:	bd08      	pop	{r3, pc}
    27be:	bf00      	nop
    27c0:	0000278d 	.word	0x0000278d
    27c4:	00003b8d 	.word	0x00003b8d
    27c8:	42000c00 	.word	0x42000c00
    27cc:	20003dc4 	.word	0x20003dc4
    27d0:	00002cad 	.word	0x00002cad

000027d4 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    27d4:	4a04      	ldr	r2, [pc, #16]	; (27e8 <TIMER_6_CLOCK_init+0x14>)
    27d6:	69d3      	ldr	r3, [r2, #28]
    27d8:	f043 0310 	orr.w	r3, r3, #16
    27dc:	61d3      	str	r3, [r2, #28]
    27de:	2240      	movs	r2, #64	; 0x40
    27e0:	4b02      	ldr	r3, [pc, #8]	; (27ec <TIMER_6_CLOCK_init+0x18>)
    27e2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    27e6:	4770      	bx	lr
    27e8:	40000800 	.word	0x40000800
    27ec:	40001c00 	.word	0x40001c00

000027f0 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    27f0:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    27f2:	4b05      	ldr	r3, [pc, #20]	; (2808 <TIMER_6_init+0x18>)
    27f4:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    27f6:	4b05      	ldr	r3, [pc, #20]	; (280c <TIMER_6_init+0x1c>)
    27f8:	4798      	blx	r3
    27fa:	4602      	mov	r2, r0
    27fc:	4904      	ldr	r1, [pc, #16]	; (2810 <TIMER_6_init+0x20>)
    27fe:	4805      	ldr	r0, [pc, #20]	; (2814 <TIMER_6_init+0x24>)
    2800:	4b05      	ldr	r3, [pc, #20]	; (2818 <TIMER_6_init+0x28>)
    2802:	4798      	blx	r3
    2804:	bd08      	pop	{r3, pc}
    2806:	bf00      	nop
    2808:	000027d5 	.word	0x000027d5
    280c:	00003b8d 	.word	0x00003b8d
    2810:	42001000 	.word	0x42001000
    2814:	20003de4 	.word	0x20003de4
    2818:	00002cad 	.word	0x00002cad

0000281c <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    281c:	4a04      	ldr	r2, [pc, #16]	; (2830 <TIMER_7_CLOCK_init+0x14>)
    281e:	6a13      	ldr	r3, [r2, #32]
    2820:	f043 0310 	orr.w	r3, r3, #16
    2824:	6213      	str	r3, [r2, #32]
    2826:	2240      	movs	r2, #64	; 0x40
    2828:	4b02      	ldr	r3, [pc, #8]	; (2834 <TIMER_7_CLOCK_init+0x18>)
    282a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    282e:	4770      	bx	lr
    2830:	40000800 	.word	0x40000800
    2834:	40001c00 	.word	0x40001c00

00002838 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    2838:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    283a:	4b05      	ldr	r3, [pc, #20]	; (2850 <TIMER_7_init+0x18>)
    283c:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    283e:	4b05      	ldr	r3, [pc, #20]	; (2854 <TIMER_7_init+0x1c>)
    2840:	4798      	blx	r3
    2842:	4602      	mov	r2, r0
    2844:	4904      	ldr	r1, [pc, #16]	; (2858 <TIMER_7_init+0x20>)
    2846:	4805      	ldr	r0, [pc, #20]	; (285c <TIMER_7_init+0x24>)
    2848:	4b05      	ldr	r3, [pc, #20]	; (2860 <TIMER_7_init+0x28>)
    284a:	4798      	blx	r3
    284c:	bd08      	pop	{r3, pc}
    284e:	bf00      	nop
    2850:	0000281d 	.word	0x0000281d
    2854:	00003b8d 	.word	0x00003b8d
    2858:	43001000 	.word	0x43001000
    285c:	20003d38 	.word	0x20003d38
    2860:	00002cad 	.word	0x00002cad

00002864 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    2864:	4a02      	ldr	r2, [pc, #8]	; (2870 <WDT_0_CLOCK_init+0xc>)
    2866:	6953      	ldr	r3, [r2, #20]
    2868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    286c:	6153      	str	r3, [r2, #20]
    286e:	4770      	bx	lr
    2870:	40000800 	.word	0x40000800

00002874 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    2874:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    2876:	4b06      	ldr	r3, [pc, #24]	; (2890 <WDT_0_init+0x1c>)
    2878:	4798      	blx	r3
	ASSERT(wdt && hw);
    287a:	2252      	movs	r2, #82	; 0x52
    287c:	4905      	ldr	r1, [pc, #20]	; (2894 <WDT_0_init+0x20>)
    287e:	2001      	movs	r0, #1
    2880:	4b05      	ldr	r3, [pc, #20]	; (2898 <WDT_0_init+0x24>)
    2882:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    2884:	4805      	ldr	r0, [pc, #20]	; (289c <WDT_0_init+0x28>)
    2886:	4b06      	ldr	r3, [pc, #24]	; (28a0 <WDT_0_init+0x2c>)
    2888:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    288a:	4b06      	ldr	r3, [pc, #24]	; (28a4 <WDT_0_init+0x30>)
    288c:	4798      	blx	r3
    288e:	bd08      	pop	{r3, pc}
    2890:	00002865 	.word	0x00002865
    2894:	00007f44 	.word	0x00007f44
    2898:	00002cf1 	.word	0x00002cf1
    289c:	20003d8c 	.word	0x20003d8c
    28a0:	40002000 	.word	0x40002000
    28a4:	00004151 	.word	0x00004151

000028a8 <system_init>:
		//DEBUG_PRINT("WDT Failed to initialize");
	}
}

void system_init(void)
{
    28a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    28ac:	4b28      	ldr	r3, [pc, #160]	; (2950 <system_init+0xa8>)
    28ae:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    28b0:	4b28      	ldr	r3, [pc, #160]	; (2954 <system_init+0xac>)
    28b2:	4798      	blx	r3

	AC_0_init();
    28b4:	4b28      	ldr	r3, [pc, #160]	; (2958 <system_init+0xb0>)
    28b6:	4798      	blx	r3

	ADC_0_init();
    28b8:	4b28      	ldr	r3, [pc, #160]	; (295c <system_init+0xb4>)
    28ba:	4798      	blx	r3

	ADC_1_init();
    28bc:	4b28      	ldr	r3, [pc, #160]	; (2960 <system_init+0xb8>)
    28be:	4798      	blx	r3

	DAC_0_init();
    28c0:	4b28      	ldr	r3, [pc, #160]	; (2964 <system_init+0xbc>)
    28c2:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    28c4:	4b28      	ldr	r3, [pc, #160]	; (2968 <system_init+0xc0>)
    28c6:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    28c8:	4b28      	ldr	r3, [pc, #160]	; (296c <system_init+0xc4>)
    28ca:	4798      	blx	r3

	FLASH_0_init();
    28cc:	4b28      	ldr	r3, [pc, #160]	; (2970 <system_init+0xc8>)
    28ce:	4798      	blx	r3

	SerialDebug_init();
    28d0:	4b28      	ldr	r3, [pc, #160]	; (2974 <system_init+0xcc>)
    28d2:	4798      	blx	r3
	
	ModemData_init();
    28d4:	4b28      	ldr	r3, [pc, #160]	; (2978 <system_init+0xd0>)
    28d6:	4798      	blx	r3

	PWM_0_init();
    28d8:	4b28      	ldr	r3, [pc, #160]	; (297c <system_init+0xd4>)
    28da:	4798      	blx	r3

	PWM_1_init();
    28dc:	4b28      	ldr	r3, [pc, #160]	; (2980 <system_init+0xd8>)
    28de:	4798      	blx	r3

	PWM_2_init();
    28e0:	4b28      	ldr	r3, [pc, #160]	; (2984 <system_init+0xdc>)
    28e2:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    28e4:	4c28      	ldr	r4, [pc, #160]	; (2988 <system_init+0xe0>)
    28e6:	69a3      	ldr	r3, [r4, #24]
    28e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    28ec:	61a3      	str	r3, [r4, #24]
    28ee:	4f27      	ldr	r7, [pc, #156]	; (298c <system_init+0xe4>)
    28f0:	f04f 0840 	mov.w	r8, #64	; 0x40
    28f4:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    28f8:	4e25      	ldr	r6, [pc, #148]	; (2990 <system_init+0xe8>)
    28fa:	47b0      	blx	r6
    28fc:	4602      	mov	r2, r0
    28fe:	4925      	ldr	r1, [pc, #148]	; (2994 <system_init+0xec>)
    2900:	4825      	ldr	r0, [pc, #148]	; (2998 <system_init+0xf0>)
    2902:	4d26      	ldr	r5, [pc, #152]	; (299c <system_init+0xf4>)
    2904:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    2906:	69e3      	ldr	r3, [r4, #28]
    2908:	f043 0320 	orr.w	r3, r3, #32
    290c:	61e3      	str	r3, [r4, #28]
    290e:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    2912:	47b0      	blx	r6
    2914:	4602      	mov	r2, r0
    2916:	4922      	ldr	r1, [pc, #136]	; (29a0 <system_init+0xf8>)
    2918:	4822      	ldr	r0, [pc, #136]	; (29a4 <system_init+0xfc>)
    291a:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    291c:	69e3      	ldr	r3, [r4, #28]
    291e:	ea43 0308 	orr.w	r3, r3, r8
    2922:	61e3      	str	r3, [r4, #28]
    2924:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    2928:	47b0      	blx	r6
    292a:	4602      	mov	r2, r0
    292c:	491e      	ldr	r1, [pc, #120]	; (29a8 <system_init+0x100>)
    292e:	481f      	ldr	r0, [pc, #124]	; (29ac <system_init+0x104>)
    2930:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    2932:	4b1f      	ldr	r3, [pc, #124]	; (29b0 <system_init+0x108>)
    2934:	4798      	blx	r3

	TIMER_4_init();
    2936:	4b1f      	ldr	r3, [pc, #124]	; (29b4 <system_init+0x10c>)
    2938:	4798      	blx	r3

	TIMER_5_init();
    293a:	4b1f      	ldr	r3, [pc, #124]	; (29b8 <system_init+0x110>)
    293c:	4798      	blx	r3

	TIMER_6_init();
    293e:	4b1f      	ldr	r3, [pc, #124]	; (29bc <system_init+0x114>)
    2940:	4798      	blx	r3

	TIMER_7_init();
    2942:	4b1f      	ldr	r3, [pc, #124]	; (29c0 <system_init+0x118>)
    2944:	4798      	blx	r3
	
	WDT_0_init();
    2946:	4b1f      	ldr	r3, [pc, #124]	; (29c4 <system_init+0x11c>)
    2948:	4798      	blx	r3
    294a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    294e:	bf00      	nop
    2950:	0000303d 	.word	0x0000303d
    2954:	00002611 	.word	0x00002611
    2958:	0000222d 	.word	0x0000222d
    295c:	000023e5 	.word	0x000023e5
    2960:	0000242d 	.word	0x0000242d
    2964:	0000246d 	.word	0x0000246d
    2968:	0000248d 	.word	0x0000248d
    296c:	000024b5 	.word	0x000024b5
    2970:	000024e1 	.word	0x000024e1
    2974:	000025f5 	.word	0x000025f5
    2978:	0000256d 	.word	0x0000256d
    297c:	00002641 	.word	0x00002641
    2980:	00002689 	.word	0x00002689
    2984:	000026d1 	.word	0x000026d1
    2988:	40000800 	.word	0x40000800
    298c:	40001c00 	.word	0x40001c00
    2990:	000040cd 	.word	0x000040cd
    2994:	4101c000 	.word	0x4101c000
    2998:	20003e44 	.word	0x20003e44
    299c:	00002cad 	.word	0x00002cad
    29a0:	42001400 	.word	0x42001400
    29a4:	20003da4 	.word	0x20003da4
    29a8:	42001800 	.word	0x42001800
    29ac:	20003cc4 	.word	0x20003cc4
    29b0:	00002719 	.word	0x00002719
    29b4:	00002761 	.word	0x00002761
    29b8:	000027a9 	.word	0x000027a9
    29bc:	000027f1 	.word	0x000027f1
    29c0:	00002839 	.word	0x00002839
    29c4:	00002875 	.word	0x00002875

000029c8 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    29c8:	b538      	push	{r3, r4, r5, lr}
    29ca:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    29cc:	4605      	mov	r5, r0
    29ce:	b158      	cbz	r0, 29e8 <ac_sync_init+0x20>
    29d0:	1c08      	adds	r0, r1, #0
    29d2:	bf18      	it	ne
    29d4:	2001      	movne	r0, #1
    29d6:	223b      	movs	r2, #59	; 0x3b
    29d8:	4904      	ldr	r1, [pc, #16]	; (29ec <ac_sync_init+0x24>)
    29da:	4b05      	ldr	r3, [pc, #20]	; (29f0 <ac_sync_init+0x28>)
    29dc:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    29de:	4621      	mov	r1, r4
    29e0:	4628      	mov	r0, r5
    29e2:	4b04      	ldr	r3, [pc, #16]	; (29f4 <ac_sync_init+0x2c>)
    29e4:	4798      	blx	r3
}
    29e6:	bd38      	pop	{r3, r4, r5, pc}
    29e8:	2000      	movs	r0, #0
    29ea:	e7f4      	b.n	29d6 <ac_sync_init+0xe>
    29ec:	00007f60 	.word	0x00007f60
    29f0:	00002cf1 	.word	0x00002cf1
    29f4:	00002f05 	.word	0x00002f05

000029f8 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    29f8:	b538      	push	{r3, r4, r5, lr}
    29fa:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    29fc:	4605      	mov	r5, r0
    29fe:	b158      	cbz	r0, 2a18 <adc_sync_init+0x20>
    2a00:	1c08      	adds	r0, r1, #0
    2a02:	bf18      	it	ne
    2a04:	2001      	movne	r0, #1
    2a06:	2243      	movs	r2, #67	; 0x43
    2a08:	4904      	ldr	r1, [pc, #16]	; (2a1c <adc_sync_init+0x24>)
    2a0a:	4b05      	ldr	r3, [pc, #20]	; (2a20 <adc_sync_init+0x28>)
    2a0c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    2a0e:	4621      	mov	r1, r4
    2a10:	4628      	mov	r0, r5
    2a12:	4b04      	ldr	r3, [pc, #16]	; (2a24 <adc_sync_init+0x2c>)
    2a14:	4798      	blx	r3
}
    2a16:	bd38      	pop	{r3, r4, r5, pc}
    2a18:	2000      	movs	r0, #0
    2a1a:	e7f4      	b.n	2a06 <adc_sync_init+0xe>
    2a1c:	00007f7c 	.word	0x00007f7c
    2a20:	00002cf1 	.word	0x00002cf1
    2a24:	00002fdd 	.word	0x00002fdd

00002a28 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2a28:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    2a2c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2a2e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2a30:	f3bf 8f5f 	dmb	sy
    2a34:	4770      	bx	lr

00002a36 <atomic_leave_critical>:
    2a36:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    2a3a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    2a3c:	f383 8810 	msr	PRIMASK, r3
    2a40:	4770      	bx	lr
	...

00002a44 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    2a44:	b538      	push	{r3, r4, r5, lr}
    2a46:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    2a48:	4604      	mov	r4, r0
    2a4a:	b198      	cbz	r0, 2a74 <dac_sync_init+0x30>
    2a4c:	1c08      	adds	r0, r1, #0
    2a4e:	bf18      	it	ne
    2a50:	2001      	movne	r0, #1
    2a52:	223c      	movs	r2, #60	; 0x3c
    2a54:	4908      	ldr	r1, [pc, #32]	; (2a78 <dac_sync_init+0x34>)
    2a56:	4b09      	ldr	r3, [pc, #36]	; (2a7c <dac_sync_init+0x38>)
    2a58:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    2a5a:	4629      	mov	r1, r5
    2a5c:	4620      	mov	r0, r4
    2a5e:	4b08      	ldr	r3, [pc, #32]	; (2a80 <dac_sync_init+0x3c>)
    2a60:	4798      	blx	r3
	if (rc) {
    2a62:	4602      	mov	r2, r0
    2a64:	b920      	cbnz	r0, 2a70 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    2a66:	2300      	movs	r3, #0
    2a68:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    2a6a:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    2a6c:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    2a6e:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    2a70:	4610      	mov	r0, r2
    2a72:	bd38      	pop	{r3, r4, r5, pc}
    2a74:	2000      	movs	r0, #0
    2a76:	e7ec      	b.n	2a52 <dac_sync_init+0xe>
    2a78:	00007f98 	.word	0x00007f98
    2a7c:	00002cf1 	.word	0x00002cf1
    2a80:	000030f5 	.word	0x000030f5

00002a84 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    2a84:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    2a86:	4b02      	ldr	r3, [pc, #8]	; (2a90 <delay_init+0xc>)
    2a88:	6018      	str	r0, [r3, #0]
    2a8a:	4b02      	ldr	r3, [pc, #8]	; (2a94 <delay_init+0x10>)
    2a8c:	4798      	blx	r3
    2a8e:	bd08      	pop	{r3, pc}
    2a90:	20000534 	.word	0x20000534
    2a94:	00003889 	.word	0x00003889

00002a98 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    2a98:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    2a9a:	4b04      	ldr	r3, [pc, #16]	; (2aac <delay_ms+0x14>)
    2a9c:	681c      	ldr	r4, [r3, #0]
    2a9e:	4b04      	ldr	r3, [pc, #16]	; (2ab0 <delay_ms+0x18>)
    2aa0:	4798      	blx	r3
    2aa2:	4601      	mov	r1, r0
    2aa4:	4620      	mov	r0, r4
    2aa6:	4b03      	ldr	r3, [pc, #12]	; (2ab4 <delay_ms+0x1c>)
    2aa8:	4798      	blx	r3
    2aaa:	bd10      	pop	{r4, pc}
    2aac:	20000534 	.word	0x20000534
    2ab0:	00003031 	.word	0x00003031
    2ab4:	0000389d 	.word	0x0000389d

00002ab8 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    2ab8:	b508      	push	{r3, lr}
	return _event_system_init();
    2aba:	4b01      	ldr	r3, [pc, #4]	; (2ac0 <event_system_init+0x8>)
    2abc:	4798      	blx	r3
}
    2abe:	bd08      	pop	{r3, pc}
    2ac0:	00003331 	.word	0x00003331

00002ac4 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    2ac4:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    2ac6:	4b0c      	ldr	r3, [pc, #48]	; (2af8 <process_ext_irq+0x34>)
    2ac8:	685c      	ldr	r4, [r3, #4]
    2aca:	42a0      	cmp	r0, r4
    2acc:	d00e      	beq.n	2aec <process_ext_irq+0x28>
    2ace:	2301      	movs	r3, #1
    2ad0:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    2ad2:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    2ad4:	25ff      	movs	r5, #255	; 0xff
    2ad6:	e003      	b.n	2ae0 <process_ext_irq+0x1c>
    2ad8:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    2ada:	185a      	adds	r2, r3, r1
    2adc:	0852      	lsrs	r2, r2, #1
    2ade:	d104      	bne.n	2aea <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    2ae0:	42a0      	cmp	r0, r4
    2ae2:	d9f9      	bls.n	2ad8 <process_ext_irq+0x14>
	while (upper >= lower) {
    2ae4:	b13b      	cbz	r3, 2af6 <process_ext_irq+0x32>
			lower = middle + 1;
    2ae6:	4631      	mov	r1, r6
    2ae8:	e7f7      	b.n	2ada <process_ext_irq+0x16>
    2aea:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    2aec:	4b02      	ldr	r3, [pc, #8]	; (2af8 <process_ext_irq+0x34>)
    2aee:	681b      	ldr	r3, [r3, #0]
    2af0:	b10b      	cbz	r3, 2af6 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    2af2:	4798      	blx	r3
    2af4:	bd70      	pop	{r4, r5, r6, pc}
    2af6:	bd70      	pop	{r4, r5, r6, pc}
    2af8:	20000538 	.word	0x20000538

00002afc <ext_irq_init>:
{
    2afc:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    2afe:	4b05      	ldr	r3, [pc, #20]	; (2b14 <ext_irq_init+0x18>)
    2b00:	f04f 32ff 	mov.w	r2, #4294967295
    2b04:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    2b06:	2200      	movs	r2, #0
    2b08:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    2b0a:	4803      	ldr	r0, [pc, #12]	; (2b18 <ext_irq_init+0x1c>)
    2b0c:	4b03      	ldr	r3, [pc, #12]	; (2b1c <ext_irq_init+0x20>)
    2b0e:	4798      	blx	r3
}
    2b10:	bd08      	pop	{r3, pc}
    2b12:	bf00      	nop
    2b14:	20000538 	.word	0x20000538
    2b18:	00002ac5 	.word	0x00002ac5
    2b1c:	000032b1 	.word	0x000032b1

00002b20 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    2b20:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    2b22:	6943      	ldr	r3, [r0, #20]
    2b24:	b103      	cbz	r3, 2b28 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    2b26:	4798      	blx	r3
    2b28:	bd08      	pop	{r3, pc}

00002b2a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    2b2a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    2b2c:	6983      	ldr	r3, [r0, #24]
    2b2e:	b103      	cbz	r3, 2b32 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    2b30:	4798      	blx	r3
    2b32:	bd08      	pop	{r3, pc}

00002b34 <flash_init>:
{
    2b34:	b538      	push	{r3, r4, r5, lr}
    2b36:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    2b38:	4604      	mov	r4, r0
    2b3a:	b190      	cbz	r0, 2b62 <flash_init+0x2e>
    2b3c:	1c08      	adds	r0, r1, #0
    2b3e:	bf18      	it	ne
    2b40:	2001      	movne	r0, #1
    2b42:	2242      	movs	r2, #66	; 0x42
    2b44:	4908      	ldr	r1, [pc, #32]	; (2b68 <flash_init+0x34>)
    2b46:	4b09      	ldr	r3, [pc, #36]	; (2b6c <flash_init+0x38>)
    2b48:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    2b4a:	4629      	mov	r1, r5
    2b4c:	4620      	mov	r0, r4
    2b4e:	4b08      	ldr	r3, [pc, #32]	; (2b70 <flash_init+0x3c>)
    2b50:	4798      	blx	r3
	if (rc) {
    2b52:	4603      	mov	r3, r0
    2b54:	b918      	cbnz	r0, 2b5e <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    2b56:	4a07      	ldr	r2, [pc, #28]	; (2b74 <flash_init+0x40>)
    2b58:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    2b5a:	4a07      	ldr	r2, [pc, #28]	; (2b78 <flash_init+0x44>)
    2b5c:	6062      	str	r2, [r4, #4]
}
    2b5e:	4618      	mov	r0, r3
    2b60:	bd38      	pop	{r3, r4, r5, pc}
    2b62:	2000      	movs	r0, #0
    2b64:	e7ed      	b.n	2b42 <flash_init+0xe>
    2b66:	bf00      	nop
    2b68:	00007fb4 	.word	0x00007fb4
    2b6c:	00002cf1 	.word	0x00002cf1
    2b70:	0000346d 	.word	0x0000346d
    2b74:	00002b21 	.word	0x00002b21
    2b78:	00002b2b 	.word	0x00002b2b

00002b7c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    2b7c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    2b7e:	6943      	ldr	r3, [r0, #20]
    2b80:	b103      	cbz	r3, 2b84 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    2b82:	4798      	blx	r3
    2b84:	bd08      	pop	{r3, pc}

00002b86 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    2b86:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    2b88:	6983      	ldr	r3, [r0, #24]
    2b8a:	b103      	cbz	r3, 2b8e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    2b8c:	4798      	blx	r3
    2b8e:	bd08      	pop	{r3, pc}

00002b90 <pwm_init>:
{
    2b90:	b538      	push	{r3, r4, r5, lr}
    2b92:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    2b94:	4604      	mov	r4, r0
    2b96:	b180      	cbz	r0, 2bba <pwm_init+0x2a>
    2b98:	1c08      	adds	r0, r1, #0
    2b9a:	bf18      	it	ne
    2b9c:	2001      	movne	r0, #1
    2b9e:	223d      	movs	r2, #61	; 0x3d
    2ba0:	4907      	ldr	r1, [pc, #28]	; (2bc0 <pwm_init+0x30>)
    2ba2:	4b08      	ldr	r3, [pc, #32]	; (2bc4 <pwm_init+0x34>)
    2ba4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    2ba6:	4629      	mov	r1, r5
    2ba8:	4620      	mov	r0, r4
    2baa:	4b07      	ldr	r3, [pc, #28]	; (2bc8 <pwm_init+0x38>)
    2bac:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    2bae:	4b07      	ldr	r3, [pc, #28]	; (2bcc <pwm_init+0x3c>)
    2bb0:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    2bb2:	4b07      	ldr	r3, [pc, #28]	; (2bd0 <pwm_init+0x40>)
    2bb4:	6063      	str	r3, [r4, #4]
}
    2bb6:	2000      	movs	r0, #0
    2bb8:	bd38      	pop	{r3, r4, r5, pc}
    2bba:	2000      	movs	r0, #0
    2bbc:	e7ef      	b.n	2b9e <pwm_init+0xe>
    2bbe:	bf00      	nop
    2bc0:	00007fcc 	.word	0x00007fcc
    2bc4:	00002cf1 	.word	0x00002cf1
    2bc8:	00003fb5 	.word	0x00003fb5
    2bcc:	00002b7d 	.word	0x00002b7d
    2bd0:	00002b87 	.word	0x00002b87

00002bd4 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    2bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bd6:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    2bd8:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    2bda:	b12f      	cbz	r7, 2be8 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    2bdc:	688d      	ldr	r5, [r1, #8]
    2bde:	463c      	mov	r4, r7
    2be0:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2be2:	f1c2 0e01 	rsb	lr, r2, #1
    2be6:	e00b      	b.n	2c00 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    2be8:	4b0e      	ldr	r3, [pc, #56]	; (2c24 <timer_add_timer_task+0x50>)
    2bea:	4798      	blx	r3
		return;
    2bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    2bee:	4473      	add	r3, lr
    2bf0:	68a0      	ldr	r0, [r4, #8]
    2bf2:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    2bf4:	42ab      	cmp	r3, r5
    2bf6:	d20a      	bcs.n	2c0e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    2bf8:	6823      	ldr	r3, [r4, #0]
    2bfa:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    2bfc:	b153      	cbz	r3, 2c14 <timer_add_timer_task+0x40>
    2bfe:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    2c00:	6863      	ldr	r3, [r4, #4]
    2c02:	4293      	cmp	r3, r2
    2c04:	d8f3      	bhi.n	2bee <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    2c06:	68a0      	ldr	r0, [r4, #8]
    2c08:	4403      	add	r3, r0
    2c0a:	1a9b      	subs	r3, r3, r2
    2c0c:	e7f2      	b.n	2bf4 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    2c0e:	42a7      	cmp	r7, r4
    2c10:	d004      	beq.n	2c1c <timer_add_timer_task+0x48>
    2c12:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    2c14:	4620      	mov	r0, r4
    2c16:	4b04      	ldr	r3, [pc, #16]	; (2c28 <timer_add_timer_task+0x54>)
    2c18:	4798      	blx	r3
    2c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    2c1c:	4660      	mov	r0, ip
    2c1e:	4b01      	ldr	r3, [pc, #4]	; (2c24 <timer_add_timer_task+0x50>)
    2c20:	4798      	blx	r3
    2c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c24:	00002d19 	.word	0x00002d19
    2c28:	00002d45 	.word	0x00002d45

00002c2c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    2c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    2c30:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    2c32:	6907      	ldr	r7, [r0, #16]
    2c34:	3701      	adds	r7, #1
    2c36:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    2c38:	7e03      	ldrb	r3, [r0, #24]
    2c3a:	f013 0f01 	tst.w	r3, #1
    2c3e:	d113      	bne.n	2c68 <timer_process_counted+0x3c>
    2c40:	7e03      	ldrb	r3, [r0, #24]
    2c42:	f013 0f02 	tst.w	r3, #2
    2c46:	d10f      	bne.n	2c68 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    2c48:	b354      	cbz	r4, 2ca0 <timer_process_counted+0x74>
    2c4a:	6863      	ldr	r3, [r4, #4]
    2c4c:	1afb      	subs	r3, r7, r3
    2c4e:	68a2      	ldr	r2, [r4, #8]
    2c50:	4293      	cmp	r3, r2
    2c52:	d307      	bcc.n	2c64 <timer_process_counted+0x38>
    2c54:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    2c56:	f100 0814 	add.w	r8, r0, #20
    2c5a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 2ca4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    2c5e:	f8df a048 	ldr.w	sl, [pc, #72]	; 2ca8 <timer_process_counted+0x7c>
    2c62:	e012      	b.n	2c8a <timer_process_counted+0x5e>
    2c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    2c68:	7e03      	ldrb	r3, [r0, #24]
    2c6a:	f043 0302 	orr.w	r3, r3, #2
    2c6e:	7603      	strb	r3, [r0, #24]
		return;
    2c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c74:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    2c76:	68e3      	ldr	r3, [r4, #12]
    2c78:	4620      	mov	r0, r4
    2c7a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    2c7c:	b185      	cbz	r5, 2ca0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    2c7e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    2c80:	686b      	ldr	r3, [r5, #4]
    2c82:	1afb      	subs	r3, r7, r3
    2c84:	68aa      	ldr	r2, [r5, #8]
    2c86:	4293      	cmp	r3, r2
    2c88:	d30a      	bcc.n	2ca0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    2c8a:	4640      	mov	r0, r8
    2c8c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    2c8e:	7c23      	ldrb	r3, [r4, #16]
    2c90:	2b01      	cmp	r3, #1
    2c92:	d1ef      	bne.n	2c74 <timer_process_counted+0x48>
			tmp->time_label = time;
    2c94:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    2c96:	463a      	mov	r2, r7
    2c98:	4621      	mov	r1, r4
    2c9a:	4640      	mov	r0, r8
    2c9c:	47d0      	blx	sl
    2c9e:	e7e9      	b.n	2c74 <timer_process_counted+0x48>
    2ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ca4:	00002d4d 	.word	0x00002d4d
    2ca8:	00002bd5 	.word	0x00002bd5

00002cac <timer_init>:
{
    2cac:	b570      	push	{r4, r5, r6, lr}
    2cae:	460e      	mov	r6, r1
    2cb0:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    2cb2:	4604      	mov	r4, r0
    2cb4:	b190      	cbz	r0, 2cdc <timer_init+0x30>
    2cb6:	b199      	cbz	r1, 2ce0 <timer_init+0x34>
    2cb8:	1c10      	adds	r0, r2, #0
    2cba:	bf18      	it	ne
    2cbc:	2001      	movne	r0, #1
    2cbe:	2245      	movs	r2, #69	; 0x45
    2cc0:	4908      	ldr	r1, [pc, #32]	; (2ce4 <timer_init+0x38>)
    2cc2:	4b09      	ldr	r3, [pc, #36]	; (2ce8 <timer_init+0x3c>)
    2cc4:	4798      	blx	r3
	descr->func = func;
    2cc6:	4620      	mov	r0, r4
    2cc8:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    2ccc:	682b      	ldr	r3, [r5, #0]
    2cce:	4631      	mov	r1, r6
    2cd0:	4798      	blx	r3
	descr->time                           = 0;
    2cd2:	2000      	movs	r0, #0
    2cd4:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    2cd6:	4b05      	ldr	r3, [pc, #20]	; (2cec <timer_init+0x40>)
    2cd8:	6063      	str	r3, [r4, #4]
}
    2cda:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    2cdc:	2000      	movs	r0, #0
    2cde:	e7ee      	b.n	2cbe <timer_init+0x12>
    2ce0:	2000      	movs	r0, #0
    2ce2:	e7ec      	b.n	2cbe <timer_init+0x12>
    2ce4:	00007fe4 	.word	0x00007fe4
    2ce8:	00002cf1 	.word	0x00002cf1
    2cec:	00002c2d 	.word	0x00002c2d

00002cf0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    2cf0:	b900      	cbnz	r0, 2cf4 <assert+0x4>
		__asm("BKPT #0");
    2cf2:	be00      	bkpt	0x0000
    2cf4:	4770      	bx	lr

00002cf6 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    2cf6:	6803      	ldr	r3, [r0, #0]
    2cf8:	b14b      	cbz	r3, 2d0e <is_list_element+0x18>
		if (it == element) {
    2cfa:	428b      	cmp	r3, r1
    2cfc:	d009      	beq.n	2d12 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    2cfe:	681b      	ldr	r3, [r3, #0]
    2d00:	b11b      	cbz	r3, 2d0a <is_list_element+0x14>
		if (it == element) {
    2d02:	4299      	cmp	r1, r3
    2d04:	d1fb      	bne.n	2cfe <is_list_element+0x8>
			return true;
    2d06:	2001      	movs	r0, #1
		}
	}

	return false;
}
    2d08:	4770      	bx	lr
	return false;
    2d0a:	2000      	movs	r0, #0
    2d0c:	4770      	bx	lr
    2d0e:	2000      	movs	r0, #0
    2d10:	4770      	bx	lr
			return true;
    2d12:	2001      	movs	r0, #1
    2d14:	4770      	bx	lr
	...

00002d18 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    2d18:	b538      	push	{r3, r4, r5, lr}
    2d1a:	4604      	mov	r4, r0
    2d1c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    2d1e:	4b06      	ldr	r3, [pc, #24]	; (2d38 <list_insert_as_head+0x20>)
    2d20:	4798      	blx	r3
    2d22:	f080 0001 	eor.w	r0, r0, #1
    2d26:	2243      	movs	r2, #67	; 0x43
    2d28:	4904      	ldr	r1, [pc, #16]	; (2d3c <list_insert_as_head+0x24>)
    2d2a:	b2c0      	uxtb	r0, r0
    2d2c:	4b04      	ldr	r3, [pc, #16]	; (2d40 <list_insert_as_head+0x28>)
    2d2e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    2d30:	6823      	ldr	r3, [r4, #0]
    2d32:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    2d34:	6025      	str	r5, [r4, #0]
    2d36:	bd38      	pop	{r3, r4, r5, pc}
    2d38:	00002cf7 	.word	0x00002cf7
    2d3c:	00007ffc 	.word	0x00007ffc
    2d40:	00002cf1 	.word	0x00002cf1

00002d44 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    2d44:	6803      	ldr	r3, [r0, #0]
    2d46:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    2d48:	6001      	str	r1, [r0, #0]
    2d4a:	4770      	bx	lr

00002d4c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    2d4c:	6803      	ldr	r3, [r0, #0]
    2d4e:	b10b      	cbz	r3, 2d54 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    2d50:	681a      	ldr	r2, [r3, #0]
    2d52:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    2d54:	4618      	mov	r0, r3
    2d56:	4770      	bx	lr

00002d58 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    2d58:	b570      	push	{r4, r5, r6, lr}
    2d5a:	460e      	mov	r6, r1
    2d5c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    2d5e:	4604      	mov	r4, r0
    2d60:	b178      	cbz	r0, 2d82 <ringbuffer_init+0x2a>
    2d62:	b181      	cbz	r1, 2d86 <ringbuffer_init+0x2e>
    2d64:	b1a2      	cbz	r2, 2d90 <ringbuffer_init+0x38>
    2d66:	2001      	movs	r0, #1
    2d68:	2232      	movs	r2, #50	; 0x32
    2d6a:	490d      	ldr	r1, [pc, #52]	; (2da0 <ringbuffer_init+0x48>)
    2d6c:	4b0d      	ldr	r3, [pc, #52]	; (2da4 <ringbuffer_init+0x4c>)
    2d6e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    2d70:	1e6b      	subs	r3, r5, #1
    2d72:	421d      	tst	r5, r3
    2d74:	d109      	bne.n	2d8a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    2d76:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    2d78:	2000      	movs	r0, #0
    2d7a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    2d7c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    2d7e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    2d80:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2d82:	2000      	movs	r0, #0
    2d84:	e7f0      	b.n	2d68 <ringbuffer_init+0x10>
    2d86:	2000      	movs	r0, #0
    2d88:	e7ee      	b.n	2d68 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    2d8a:	f06f 000c 	mvn.w	r0, #12
    2d8e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    2d90:	2232      	movs	r2, #50	; 0x32
    2d92:	4903      	ldr	r1, [pc, #12]	; (2da0 <ringbuffer_init+0x48>)
    2d94:	2000      	movs	r0, #0
    2d96:	4b03      	ldr	r3, [pc, #12]	; (2da4 <ringbuffer_init+0x4c>)
    2d98:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    2d9a:	1e6b      	subs	r3, r5, #1
    2d9c:	e7eb      	b.n	2d76 <ringbuffer_init+0x1e>
    2d9e:	bf00      	nop
    2da0:	0000801c 	.word	0x0000801c
    2da4:	00002cf1 	.word	0x00002cf1

00002da8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    2da8:	b538      	push	{r3, r4, r5, lr}
    2daa:	460d      	mov	r5, r1
	ASSERT(rb && data);
    2dac:	4604      	mov	r4, r0
    2dae:	b1a0      	cbz	r0, 2dda <ringbuffer_get+0x32>
    2db0:	1c08      	adds	r0, r1, #0
    2db2:	bf18      	it	ne
    2db4:	2001      	movne	r0, #1
    2db6:	224a      	movs	r2, #74	; 0x4a
    2db8:	490a      	ldr	r1, [pc, #40]	; (2de4 <ringbuffer_get+0x3c>)
    2dba:	4b0b      	ldr	r3, [pc, #44]	; (2de8 <ringbuffer_get+0x40>)
    2dbc:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    2dbe:	68a3      	ldr	r3, [r4, #8]
    2dc0:	68e2      	ldr	r2, [r4, #12]
    2dc2:	429a      	cmp	r2, r3
    2dc4:	d00b      	beq.n	2dde <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    2dc6:	6862      	ldr	r2, [r4, #4]
    2dc8:	4013      	ands	r3, r2
    2dca:	6822      	ldr	r2, [r4, #0]
    2dcc:	5cd3      	ldrb	r3, [r2, r3]
    2dce:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    2dd0:	68a3      	ldr	r3, [r4, #8]
    2dd2:	3301      	adds	r3, #1
    2dd4:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    2dd6:	2000      	movs	r0, #0
    2dd8:	bd38      	pop	{r3, r4, r5, pc}
    2dda:	2000      	movs	r0, #0
    2ddc:	e7eb      	b.n	2db6 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    2dde:	f06f 0009 	mvn.w	r0, #9
}
    2de2:	bd38      	pop	{r3, r4, r5, pc}
    2de4:	0000801c 	.word	0x0000801c
    2de8:	00002cf1 	.word	0x00002cf1

00002dec <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    2dec:	b538      	push	{r3, r4, r5, lr}
    2dee:	460d      	mov	r5, r1
	ASSERT(rb);
    2df0:	4604      	mov	r4, r0
    2df2:	225b      	movs	r2, #91	; 0x5b
    2df4:	490b      	ldr	r1, [pc, #44]	; (2e24 <ringbuffer_put+0x38>)
    2df6:	3000      	adds	r0, #0
    2df8:	bf18      	it	ne
    2dfa:	2001      	movne	r0, #1
    2dfc:	4b0a      	ldr	r3, [pc, #40]	; (2e28 <ringbuffer_put+0x3c>)
    2dfe:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    2e00:	68e3      	ldr	r3, [r4, #12]
    2e02:	6862      	ldr	r2, [r4, #4]
    2e04:	4013      	ands	r3, r2
    2e06:	6822      	ldr	r2, [r4, #0]
    2e08:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    2e0a:	68e3      	ldr	r3, [r4, #12]
    2e0c:	6861      	ldr	r1, [r4, #4]
    2e0e:	68a2      	ldr	r2, [r4, #8]
    2e10:	1a9a      	subs	r2, r3, r2
    2e12:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    2e14:	bf84      	itt	hi
    2e16:	1a59      	subhi	r1, r3, r1
    2e18:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    2e1a:	3301      	adds	r3, #1
    2e1c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    2e1e:	2000      	movs	r0, #0
    2e20:	bd38      	pop	{r3, r4, r5, pc}
    2e22:	bf00      	nop
    2e24:	0000801c 	.word	0x0000801c
    2e28:	00002cf1 	.word	0x00002cf1

00002e2c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    2e2c:	b510      	push	{r4, lr}
	ASSERT(rb);
    2e2e:	4604      	mov	r4, r0
    2e30:	2271      	movs	r2, #113	; 0x71
    2e32:	4905      	ldr	r1, [pc, #20]	; (2e48 <ringbuffer_num+0x1c>)
    2e34:	3000      	adds	r0, #0
    2e36:	bf18      	it	ne
    2e38:	2001      	movne	r0, #1
    2e3a:	4b04      	ldr	r3, [pc, #16]	; (2e4c <ringbuffer_num+0x20>)
    2e3c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    2e3e:	68e0      	ldr	r0, [r4, #12]
    2e40:	68a3      	ldr	r3, [r4, #8]
}
    2e42:	1ac0      	subs	r0, r0, r3
    2e44:	bd10      	pop	{r4, pc}
    2e46:	bf00      	nop
    2e48:	0000801c 	.word	0x0000801c
    2e4c:	00002cf1 	.word	0x00002cf1

00002e50 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    2e50:	b510      	push	{r4, lr}
	ASSERT(rb);
    2e52:	4604      	mov	r4, r0
    2e54:	227b      	movs	r2, #123	; 0x7b
    2e56:	4905      	ldr	r1, [pc, #20]	; (2e6c <ringbuffer_flush+0x1c>)
    2e58:	3000      	adds	r0, #0
    2e5a:	bf18      	it	ne
    2e5c:	2001      	movne	r0, #1
    2e5e:	4b04      	ldr	r3, [pc, #16]	; (2e70 <ringbuffer_flush+0x20>)
    2e60:	4798      	blx	r3

	rb->read_index = rb->write_index;
    2e62:	68e3      	ldr	r3, [r4, #12]
    2e64:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    2e66:	2000      	movs	r0, #0
    2e68:	bd10      	pop	{r4, pc}
    2e6a:	bf00      	nop
    2e6c:	0000801c 	.word	0x0000801c
    2e70:	00002cf1 	.word	0x00002cf1

00002e74 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    2e74:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    2e76:	4a06      	ldr	r2, [pc, #24]	; (2e90 <_sbrk+0x1c>)
    2e78:	6812      	ldr	r2, [r2, #0]
    2e7a:	b122      	cbz	r2, 2e86 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    2e7c:	4a04      	ldr	r2, [pc, #16]	; (2e90 <_sbrk+0x1c>)
    2e7e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    2e80:	4403      	add	r3, r0
    2e82:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    2e84:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    2e86:	4903      	ldr	r1, [pc, #12]	; (2e94 <_sbrk+0x20>)
    2e88:	4a01      	ldr	r2, [pc, #4]	; (2e90 <_sbrk+0x1c>)
    2e8a:	6011      	str	r1, [r2, #0]
    2e8c:	e7f6      	b.n	2e7c <_sbrk+0x8>
    2e8e:	bf00      	nop
    2e90:	20000540 	.word	0x20000540
    2e94:	20013e78 	.word	0x20013e78

00002e98 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    2e98:	b510      	push	{r4, lr}
    2e9a:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    2e9c:	f44f 7281 	mov.w	r2, #258	; 0x102
    2ea0:	4915      	ldr	r1, [pc, #84]	; (2ef8 <_ac_init+0x60>)
    2ea2:	4816      	ldr	r0, [pc, #88]	; (2efc <_ac_init+0x64>)
    2ea4:	4284      	cmp	r4, r0
    2ea6:	bf14      	ite	ne
    2ea8:	2000      	movne	r0, #0
    2eaa:	2001      	moveq	r0, #1
    2eac:	4b14      	ldr	r3, [pc, #80]	; (2f00 <_ac_init+0x68>)
    2eae:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    2eb0:	6a23      	ldr	r3, [r4, #32]
    2eb2:	f013 0f01 	tst.w	r3, #1
    2eb6:	d1fb      	bne.n	2eb0 <_ac_init+0x18>
    2eb8:	6a23      	ldr	r3, [r4, #32]
    2eba:	f013 0f03 	tst.w	r3, #3
    2ebe:	d1fb      	bne.n	2eb8 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    2ec0:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    2ec2:	f013 0f02 	tst.w	r3, #2
    2ec6:	d114      	bne.n	2ef2 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    2ec8:	6a23      	ldr	r3, [r4, #32]
    2eca:	f013 0f01 	tst.w	r3, #1
    2ece:	d1fb      	bne.n	2ec8 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    2ed0:	7823      	ldrb	r3, [r4, #0]
    2ed2:	f043 0301 	orr.w	r3, r3, #1
    2ed6:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    2ed8:	6a23      	ldr	r3, [r4, #32]
    2eda:	f013 0f01 	tst.w	r3, #1
    2ede:	d1fb      	bne.n	2ed8 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    2ee0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    2ee4:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    2ee6:	2000      	movs	r0, #0
    2ee8:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    2eea:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    2eec:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    2eee:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    2ef0:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    2ef2:	f06f 0010 	mvn.w	r0, #16
}
    2ef6:	bd10      	pop	{r4, pc}
    2ef8:	00008040 	.word	0x00008040
    2efc:	42002000 	.word	0x42002000
    2f00:	00002cf1 	.word	0x00002cf1

00002f04 <_ac_sync_init>:
{
    2f04:	b538      	push	{r3, r4, r5, lr}
    2f06:	460c      	mov	r4, r1
	ASSERT(device);
    2f08:	4605      	mov	r5, r0
    2f0a:	226c      	movs	r2, #108	; 0x6c
    2f0c:	4905      	ldr	r1, [pc, #20]	; (2f24 <_ac_sync_init+0x20>)
    2f0e:	3000      	adds	r0, #0
    2f10:	bf18      	it	ne
    2f12:	2001      	movne	r0, #1
    2f14:	4b04      	ldr	r3, [pc, #16]	; (2f28 <_ac_sync_init+0x24>)
    2f16:	4798      	blx	r3
	device->hw = hw;
    2f18:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    2f1a:	4620      	mov	r0, r4
    2f1c:	4b03      	ldr	r3, [pc, #12]	; (2f2c <_ac_sync_init+0x28>)
    2f1e:	4798      	blx	r3
}
    2f20:	bd38      	pop	{r3, r4, r5, pc}
    2f22:	bf00      	nop
    2f24:	00008040 	.word	0x00008040
    2f28:	00002cf1 	.word	0x00002cf1
    2f2c:	00002e99 	.word	0x00002e99

00002f30 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2f30:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2f32:	f013 0f01 	tst.w	r3, #1
    2f36:	d1fb      	bne.n	2f30 <_adc_init>
    2f38:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2f3a:	f013 0f03 	tst.w	r3, #3
    2f3e:	d1fb      	bne.n	2f38 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    2f40:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    2f42:	f013 0f02 	tst.w	r3, #2
    2f46:	d12a      	bne.n	2f9e <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2f48:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2f4a:	f013 0f01 	tst.w	r3, #1
    2f4e:	d1fb      	bne.n	2f48 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    2f50:	8803      	ldrh	r3, [r0, #0]
    2f52:	b29b      	uxth	r3, r3
    2f54:	f043 0301 	orr.w	r3, r3, #1
    2f58:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    2f5a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    2f5c:	f013 0f01 	tst.w	r3, #1
    2f60:	d1fb      	bne.n	2f5a <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    2f62:	2216      	movs	r2, #22
    2f64:	4b0f      	ldr	r3, [pc, #60]	; (2fa4 <_adc_init+0x74>)
    2f66:	fb02 3101 	mla	r1, r2, r1, r3
    2f6a:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    2f6c:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    2f6e:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    2f70:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    2f72:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    2f74:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    2f76:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    2f78:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    2f7a:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    2f7c:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    2f7e:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    2f80:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    2f82:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    2f84:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    2f86:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    2f88:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    2f8a:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2f8c:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2f8e:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2f90:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2f92:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    2f94:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    2f96:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    2f98:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    2f9a:	2000      	movs	r0, #0
    2f9c:	4770      	bx	lr
		return ERR_DENIED;
    2f9e:	f06f 0010 	mvn.w	r0, #16
}
    2fa2:	4770      	bx	lr
    2fa4:	00008054 	.word	0x00008054

00002fa8 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    2fa8:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2fac:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2fb0:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    2fb4:	b148      	cbz	r0, 2fca <_adc_get_regs+0x22>
    2fb6:	2801      	cmp	r0, #1
    2fb8:	d009      	beq.n	2fce <_adc_get_regs+0x26>
{
    2fba:	b508      	push	{r3, lr}
	ASSERT(false);
    2fbc:	2291      	movs	r2, #145	; 0x91
    2fbe:	4905      	ldr	r1, [pc, #20]	; (2fd4 <_adc_get_regs+0x2c>)
    2fc0:	2000      	movs	r0, #0
    2fc2:	4b05      	ldr	r3, [pc, #20]	; (2fd8 <_adc_get_regs+0x30>)
    2fc4:	4798      	blx	r3
	return 0;
    2fc6:	2000      	movs	r0, #0
    2fc8:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    2fca:	2000      	movs	r0, #0
    2fcc:	4770      	bx	lr
    2fce:	2001      	movs	r0, #1
    2fd0:	4770      	bx	lr
    2fd2:	bf00      	nop
    2fd4:	00008080 	.word	0x00008080
    2fd8:	00002cf1 	.word	0x00002cf1

00002fdc <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2fdc:	b538      	push	{r3, r4, r5, lr}
    2fde:	460c      	mov	r4, r1
	ASSERT(device);
    2fe0:	4605      	mov	r5, r0
    2fe2:	22d5      	movs	r2, #213	; 0xd5
    2fe4:	4907      	ldr	r1, [pc, #28]	; (3004 <_adc_sync_init+0x28>)
    2fe6:	3000      	adds	r0, #0
    2fe8:	bf18      	it	ne
    2fea:	2001      	movne	r0, #1
    2fec:	4b06      	ldr	r3, [pc, #24]	; (3008 <_adc_sync_init+0x2c>)
    2fee:	4798      	blx	r3

	device->hw = hw;
    2ff0:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2ff2:	4620      	mov	r0, r4
    2ff4:	4b05      	ldr	r3, [pc, #20]	; (300c <_adc_sync_init+0x30>)
    2ff6:	4798      	blx	r3
    2ff8:	4601      	mov	r1, r0
    2ffa:	4620      	mov	r0, r4
    2ffc:	4b04      	ldr	r3, [pc, #16]	; (3010 <_adc_sync_init+0x34>)
    2ffe:	4798      	blx	r3
}
    3000:	bd38      	pop	{r3, r4, r5, pc}
    3002:	bf00      	nop
    3004:	00008080 	.word	0x00008080
    3008:	00002cf1 	.word	0x00002cf1
    300c:	00002fa9 	.word	0x00002fa9
    3010:	00002f31 	.word	0x00002f31

00003014 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3014:	0943      	lsrs	r3, r0, #5
    3016:	f000 001f 	and.w	r0, r0, #31
    301a:	2201      	movs	r2, #1
    301c:	fa02 f000 	lsl.w	r0, r2, r0
    3020:	3340      	adds	r3, #64	; 0x40
    3022:	4a02      	ldr	r2, [pc, #8]	; (302c <_irq_set+0x18>)
    3024:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    3028:	4770      	bx	lr
    302a:	bf00      	nop
    302c:	e000e100 	.word	0xe000e100

00003030 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    3030:	f64b 3380 	movw	r3, #48000	; 0xbb80
    3034:	fb03 f000 	mul.w	r0, r3, r0
    3038:	4770      	bx	lr
	...

0000303c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    303c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    303e:	4a0c      	ldr	r2, [pc, #48]	; (3070 <_init_chip+0x34>)
    3040:	8813      	ldrh	r3, [r2, #0]
    3042:	b29b      	uxth	r3, r3
    3044:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    3046:	4b0b      	ldr	r3, [pc, #44]	; (3074 <_init_chip+0x38>)
    3048:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    304a:	4b0b      	ldr	r3, [pc, #44]	; (3078 <_init_chip+0x3c>)
    304c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    304e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3052:	4c0a      	ldr	r4, [pc, #40]	; (307c <_init_chip+0x40>)
    3054:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    3056:	4b0a      	ldr	r3, [pc, #40]	; (3080 <_init_chip+0x44>)
    3058:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    305a:	f240 70ff 	movw	r0, #2047	; 0x7ff
    305e:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    3060:	4a08      	ldr	r2, [pc, #32]	; (3084 <_init_chip+0x48>)
    3062:	6913      	ldr	r3, [r2, #16]
    3064:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3068:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    306a:	4b07      	ldr	r3, [pc, #28]	; (3088 <_init_chip+0x4c>)
    306c:	4798      	blx	r3
    306e:	bd10      	pop	{r4, pc}
    3070:	41004000 	.word	0x41004000
    3074:	0000350d 	.word	0x0000350d
    3078:	00003435 	.word	0x00003435
    307c:	0000338d 	.word	0x0000338d
    3080:	00003539 	.word	0x00003539
    3084:	40000800 	.word	0x40000800
    3088:	00003195 	.word	0x00003195

0000308c <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    308c:	b510      	push	{r4, lr}
    308e:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    3090:	22f3      	movs	r2, #243	; 0xf3
    3092:	4915      	ldr	r1, [pc, #84]	; (30e8 <_dac_init+0x5c>)
    3094:	4815      	ldr	r0, [pc, #84]	; (30ec <_dac_init+0x60>)
    3096:	4284      	cmp	r4, r0
    3098:	bf14      	ite	ne
    309a:	2000      	movne	r0, #0
    309c:	2001      	moveq	r0, #1
    309e:	4b14      	ldr	r3, [pc, #80]	; (30f0 <_dac_init+0x64>)
    30a0:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    30a2:	68a3      	ldr	r3, [r4, #8]
    30a4:	f013 0f01 	tst.w	r3, #1
    30a8:	d1fb      	bne.n	30a2 <_dac_init+0x16>
    30aa:	68a3      	ldr	r3, [r4, #8]
    30ac:	f013 0f03 	tst.w	r3, #3
    30b0:	d1fb      	bne.n	30aa <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    30b2:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    30b4:	f013 0f02 	tst.w	r3, #2
    30b8:	d113      	bne.n	30e2 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    30ba:	68a3      	ldr	r3, [r4, #8]
    30bc:	f013 0f01 	tst.w	r3, #1
    30c0:	d1fb      	bne.n	30ba <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    30c2:	7823      	ldrb	r3, [r4, #0]
    30c4:	f043 0301 	orr.w	r3, r3, #1
    30c8:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    30ca:	68a3      	ldr	r3, [r4, #8]
    30cc:	f013 0f01 	tst.w	r3, #1
    30d0:	d1fb      	bne.n	30ca <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    30d2:	2000      	movs	r0, #0
    30d4:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    30d6:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    30d8:	81a0      	strh	r0, [r4, #12]
    30da:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    30dc:	2301      	movs	r3, #1
    30de:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    30e0:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    30e2:	f06f 0003 	mvn.w	r0, #3
}
    30e6:	bd10      	pop	{r4, pc}
    30e8:	00008098 	.word	0x00008098
    30ec:	43002400 	.word	0x43002400
    30f0:	00002cf1 	.word	0x00002cf1

000030f4 <_dac_sync_init>:
{
    30f4:	b538      	push	{r3, r4, r5, lr}
    30f6:	460c      	mov	r4, r1
	ASSERT(device);
    30f8:	4605      	mov	r5, r0
    30fa:	2261      	movs	r2, #97	; 0x61
    30fc:	4905      	ldr	r1, [pc, #20]	; (3114 <_dac_sync_init+0x20>)
    30fe:	3000      	adds	r0, #0
    3100:	bf18      	it	ne
    3102:	2001      	movne	r0, #1
    3104:	4b04      	ldr	r3, [pc, #16]	; (3118 <_dac_sync_init+0x24>)
    3106:	4798      	blx	r3
	device->hw = hw;
    3108:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    310a:	4620      	mov	r0, r4
    310c:	4b03      	ldr	r3, [pc, #12]	; (311c <_dac_sync_init+0x28>)
    310e:	4798      	blx	r3
}
    3110:	bd38      	pop	{r3, r4, r5, pc}
    3112:	bf00      	nop
    3114:	00008098 	.word	0x00008098
    3118:	00002cf1 	.word	0x00002cf1
    311c:	0000308d 	.word	0x0000308d

00003120 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    3120:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    3122:	4a1a      	ldr	r2, [pc, #104]	; (318c <_dmac_handler+0x6c>)
    3124:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    3126:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    312a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    312e:	4818      	ldr	r0, [pc, #96]	; (3190 <_dmac_handler+0x70>)
    3130:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    3134:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3138:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    313c:	f012 0f01 	tst.w	r2, #1
    3140:	d10a      	bne.n	3158 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    3142:	011a      	lsls	r2, r3, #4
    3144:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3148:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    314c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    3150:	f012 0f02 	tst.w	r2, #2
    3154:	d10b      	bne.n	316e <_dmac_handler+0x4e>
    3156:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    3158:	011a      	lsls	r2, r3, #4
    315a:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    315e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3162:	2101      	movs	r1, #1
    3164:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    3168:	6843      	ldr	r3, [r0, #4]
    316a:	4798      	blx	r3
    316c:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    316e:	011a      	lsls	r2, r3, #4
    3170:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3174:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3178:	2102      	movs	r1, #2
    317a:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    317e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3182:	4a03      	ldr	r2, [pc, #12]	; (3190 <_dmac_handler+0x70>)
    3184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3188:	4798      	blx	r3
	}
}
    318a:	e7e4      	b.n	3156 <_dmac_handler+0x36>
    318c:	4100a000 	.word	0x4100a000
    3190:	20000550 	.word	0x20000550

00003194 <_dma_init>:
{
    3194:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    3196:	4a33      	ldr	r2, [pc, #204]	; (3264 <_dma_init+0xd0>)
    3198:	8813      	ldrh	r3, [r2, #0]
    319a:	f023 0302 	bic.w	r3, r3, #2
    319e:	041b      	lsls	r3, r3, #16
    31a0:	0c1b      	lsrs	r3, r3, #16
    31a2:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    31a4:	8853      	ldrh	r3, [r2, #2]
    31a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    31aa:	041b      	lsls	r3, r3, #16
    31ac:	0c1b      	lsrs	r3, r3, #16
    31ae:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    31b0:	8813      	ldrh	r3, [r2, #0]
    31b2:	b29b      	uxth	r3, r3
    31b4:	f043 0301 	orr.w	r3, r3, #1
    31b8:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    31ba:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    31bc:	f013 0f01 	tst.w	r3, #1
    31c0:	d1fb      	bne.n	31ba <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    31c2:	4b28      	ldr	r3, [pc, #160]	; (3264 <_dma_init+0xd0>)
    31c4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    31c8:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    31ca:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    31cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    31d0:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    31d2:	2000      	movs	r0, #0
    31d4:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    31d6:	4a24      	ldr	r2, [pc, #144]	; (3268 <_dma_init+0xd4>)
    31d8:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    31dc:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    31de:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    31e2:	639a      	str	r2, [r3, #56]	; 0x38
    31e4:	4b21      	ldr	r3, [pc, #132]	; (326c <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    31e6:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    31ea:	681c      	ldr	r4, [r3, #0]
    31ec:	0101      	lsls	r1, r0, #4
    31ee:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    31f2:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    31f6:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    31f8:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    31fa:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    31fe:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    3200:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    3204:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    3206:	4429      	add	r1, r5
    3208:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    320c:	3001      	adds	r0, #1
    320e:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    3210:	2820      	cmp	r0, #32
    3212:	d1ea      	bne.n	31ea <_dma_init+0x56>
    3214:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3216:	2001      	movs	r0, #1
    3218:	4915      	ldr	r1, [pc, #84]	; (3270 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    321a:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    321c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3220:	d00b      	beq.n	323a <_dma_init+0xa6>
    3222:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    3224:	2b24      	cmp	r3, #36	; 0x24
    3226:	d1f8      	bne.n	321a <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    3228:	4a0e      	ldr	r2, [pc, #56]	; (3264 <_dma_init+0xd0>)
    322a:	8813      	ldrh	r3, [r2, #0]
    322c:	b29b      	uxth	r3, r3
    322e:	f043 0302 	orr.w	r3, r3, #2
    3232:	8013      	strh	r3, [r2, #0]
}
    3234:	2000      	movs	r0, #0
    3236:	bc30      	pop	{r4, r5}
    3238:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    323a:	095c      	lsrs	r4, r3, #5
    323c:	f002 021f 	and.w	r2, r2, #31
    3240:	fa00 f202 	lsl.w	r2, r0, r2
    3244:	f104 0520 	add.w	r5, r4, #32
    3248:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    324c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3250:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3254:	f104 0560 	add.w	r5, r4, #96	; 0x60
    3258:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    325c:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    3260:	e7df      	b.n	3222 <_dma_init+0x8e>
    3262:	bf00      	nop
    3264:	4100a000 	.word	0x4100a000
    3268:	20000550 	.word	0x20000550
    326c:	000080b0 	.word	0x000080b0
    3270:	e000e100 	.word	0xe000e100

00003274 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    3274:	b508      	push	{r3, lr}
	_dmac_handler();
    3276:	4b01      	ldr	r3, [pc, #4]	; (327c <DMAC_0_Handler+0x8>)
    3278:	4798      	blx	r3
    327a:	bd08      	pop	{r3, pc}
    327c:	00003121 	.word	0x00003121

00003280 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    3280:	b508      	push	{r3, lr}
	_dmac_handler();
    3282:	4b01      	ldr	r3, [pc, #4]	; (3288 <DMAC_1_Handler+0x8>)
    3284:	4798      	blx	r3
    3286:	bd08      	pop	{r3, pc}
    3288:	00003121 	.word	0x00003121

0000328c <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    328c:	b508      	push	{r3, lr}
	_dmac_handler();
    328e:	4b01      	ldr	r3, [pc, #4]	; (3294 <DMAC_2_Handler+0x8>)
    3290:	4798      	blx	r3
    3292:	bd08      	pop	{r3, pc}
    3294:	00003121 	.word	0x00003121

00003298 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    3298:	b508      	push	{r3, lr}
	_dmac_handler();
    329a:	4b01      	ldr	r3, [pc, #4]	; (32a0 <DMAC_3_Handler+0x8>)
    329c:	4798      	blx	r3
    329e:	bd08      	pop	{r3, pc}
    32a0:	00003121 	.word	0x00003121

000032a4 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    32a4:	b508      	push	{r3, lr}
	_dmac_handler();
    32a6:	4b01      	ldr	r3, [pc, #4]	; (32ac <DMAC_4_Handler+0x8>)
    32a8:	4798      	blx	r3
    32aa:	bd08      	pop	{r3, pc}
    32ac:	00003121 	.word	0x00003121

000032b0 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    32b0:	4a1e      	ldr	r2, [pc, #120]	; (332c <_ext_irq_init+0x7c>)
    32b2:	6853      	ldr	r3, [r2, #4]
    32b4:	f013 0f01 	tst.w	r3, #1
    32b8:	d1fb      	bne.n	32b2 <_ext_irq_init+0x2>
    32ba:	4a1c      	ldr	r2, [pc, #112]	; (332c <_ext_irq_init+0x7c>)
    32bc:	6853      	ldr	r3, [r2, #4]
    32be:	f013 0f03 	tst.w	r3, #3
    32c2:	d1fb      	bne.n	32bc <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    32c4:	4b19      	ldr	r3, [pc, #100]	; (332c <_ext_irq_init+0x7c>)
    32c6:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    32c8:	f013 0f02 	tst.w	r3, #2
    32cc:	d12b      	bne.n	3326 <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    32ce:	4a17      	ldr	r2, [pc, #92]	; (332c <_ext_irq_init+0x7c>)
    32d0:	6853      	ldr	r3, [r2, #4]
    32d2:	f013 0f01 	tst.w	r3, #1
    32d6:	d1fb      	bne.n	32d0 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    32d8:	4a14      	ldr	r2, [pc, #80]	; (332c <_ext_irq_init+0x7c>)
    32da:	7813      	ldrb	r3, [r2, #0]
    32dc:	f043 0301 	orr.w	r3, r3, #1
    32e0:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    32e2:	6853      	ldr	r3, [r2, #4]
    32e4:	f013 0f01 	tst.w	r3, #1
    32e8:	d1fb      	bne.n	32e2 <_ext_irq_init+0x32>
    32ea:	4a10      	ldr	r2, [pc, #64]	; (332c <_ext_irq_init+0x7c>)
    32ec:	6853      	ldr	r3, [r2, #4]
    32ee:	f013 0f03 	tst.w	r3, #3
    32f2:	d1fb      	bne.n	32ec <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    32f4:	4b0d      	ldr	r3, [pc, #52]	; (332c <_ext_irq_init+0x7c>)
    32f6:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    32f8:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    32fc:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    32fe:	2200      	movs	r2, #0
    3300:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    3302:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    3304:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    3306:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    3308:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    330a:	61da      	str	r2, [r3, #28]
    330c:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    330e:	461a      	mov	r2, r3
    3310:	6853      	ldr	r3, [r2, #4]
    3312:	f013 0f03 	tst.w	r3, #3
    3316:	d1fb      	bne.n	3310 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    3318:	4a04      	ldr	r2, [pc, #16]	; (332c <_ext_irq_init+0x7c>)
    331a:	7813      	ldrb	r3, [r2, #0]
    331c:	f043 0302 	orr.w	r3, r3, #2
    3320:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    3322:	2000      	movs	r0, #0
    3324:	4770      	bx	lr
		return ERR_DENIED;
    3326:	f06f 0010 	mvn.w	r0, #16
}
    332a:	4770      	bx	lr
    332c:	40002800 	.word	0x40002800

00003330 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    3330:	b430      	push	{r4, r5}
    3332:	4814      	ldr	r0, [pc, #80]	; (3384 <_event_system_init+0x54>)
    3334:	f100 0543 	add.w	r5, r0, #67	; 0x43
    3338:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    333a:	4c13      	ldr	r4, [pc, #76]	; (3388 <_event_system_init+0x58>)
    333c:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    333e:	f813 1b01 	ldrb.w	r1, [r3], #1
    3342:	3248      	adds	r2, #72	; 0x48
    3344:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    3348:	42ab      	cmp	r3, r5
    334a:	d1f7      	bne.n	333c <_event_system_init+0xc>
    334c:	480d      	ldr	r0, [pc, #52]	; (3384 <_event_system_init+0x54>)
    334e:	f100 0442 	add.w	r4, r0, #66	; 0x42
    3352:	3080      	adds	r0, #128	; 0x80
    3354:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    3356:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    335a:	00ca      	lsls	r2, r1, #3
    335c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3360:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    3364:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    3366:	f850 3f04 	ldr.w	r3, [r0, #4]!
    336a:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    336c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    3370:	43db      	mvns	r3, r3
    3372:	b2db      	uxtb	r3, r3
    3374:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3378:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    337a:	2920      	cmp	r1, #32
    337c:	d1eb      	bne.n	3356 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    337e:	2000      	movs	r0, #0
    3380:	bc30      	pop	{r4, r5}
    3382:	4770      	bx	lr
    3384:	000081b0 	.word	0x000081b0
    3388:	4100e000 	.word	0x4100e000

0000338c <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    338c:	f010 0f01 	tst.w	r0, #1
    3390:	d002      	beq.n	3398 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3392:	4a23      	ldr	r2, [pc, #140]	; (3420 <_gclk_init_generators_by_fref+0x94>)
    3394:	4b23      	ldr	r3, [pc, #140]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    3396:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    3398:	f010 0f02 	tst.w	r0, #2
    339c:	d002      	beq.n	33a4 <_gclk_init_generators_by_fref+0x18>
    339e:	4a22      	ldr	r2, [pc, #136]	; (3428 <_gclk_init_generators_by_fref+0x9c>)
    33a0:	4b20      	ldr	r3, [pc, #128]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    33a2:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    33a4:	f010 0f04 	tst.w	r0, #4
    33a8:	d002      	beq.n	33b0 <_gclk_init_generators_by_fref+0x24>
    33aa:	4a1d      	ldr	r2, [pc, #116]	; (3420 <_gclk_init_generators_by_fref+0x94>)
    33ac:	4b1d      	ldr	r3, [pc, #116]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    33ae:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    33b0:	f010 0f08 	tst.w	r0, #8
    33b4:	d002      	beq.n	33bc <_gclk_init_generators_by_fref+0x30>
    33b6:	4a1a      	ldr	r2, [pc, #104]	; (3420 <_gclk_init_generators_by_fref+0x94>)
    33b8:	4b1a      	ldr	r3, [pc, #104]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    33ba:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    33bc:	f010 0f10 	tst.w	r0, #16
    33c0:	d002      	beq.n	33c8 <_gclk_init_generators_by_fref+0x3c>
    33c2:	4a17      	ldr	r2, [pc, #92]	; (3420 <_gclk_init_generators_by_fref+0x94>)
    33c4:	4b17      	ldr	r3, [pc, #92]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    33c6:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    33c8:	f010 0f20 	tst.w	r0, #32
    33cc:	d002      	beq.n	33d4 <_gclk_init_generators_by_fref+0x48>
    33ce:	4a14      	ldr	r2, [pc, #80]	; (3420 <_gclk_init_generators_by_fref+0x94>)
    33d0:	4b14      	ldr	r3, [pc, #80]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    33d2:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    33d4:	f010 0f40 	tst.w	r0, #64	; 0x40
    33d8:	d002      	beq.n	33e0 <_gclk_init_generators_by_fref+0x54>
    33da:	4a11      	ldr	r2, [pc, #68]	; (3420 <_gclk_init_generators_by_fref+0x94>)
    33dc:	4b11      	ldr	r3, [pc, #68]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    33de:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    33e0:	f010 0f80 	tst.w	r0, #128	; 0x80
    33e4:	d002      	beq.n	33ec <_gclk_init_generators_by_fref+0x60>
    33e6:	4a0e      	ldr	r2, [pc, #56]	; (3420 <_gclk_init_generators_by_fref+0x94>)
    33e8:	4b0e      	ldr	r3, [pc, #56]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    33ea:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    33ec:	f410 7f80 	tst.w	r0, #256	; 0x100
    33f0:	d002      	beq.n	33f8 <_gclk_init_generators_by_fref+0x6c>
    33f2:	4a0b      	ldr	r2, [pc, #44]	; (3420 <_gclk_init_generators_by_fref+0x94>)
    33f4:	4b0b      	ldr	r3, [pc, #44]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    33f6:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    33f8:	f410 7f00 	tst.w	r0, #512	; 0x200
    33fc:	d002      	beq.n	3404 <_gclk_init_generators_by_fref+0x78>
    33fe:	4a08      	ldr	r2, [pc, #32]	; (3420 <_gclk_init_generators_by_fref+0x94>)
    3400:	4b08      	ldr	r3, [pc, #32]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    3402:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    3404:	f410 6f80 	tst.w	r0, #1024	; 0x400
    3408:	d002      	beq.n	3410 <_gclk_init_generators_by_fref+0x84>
    340a:	4a08      	ldr	r2, [pc, #32]	; (342c <_gclk_init_generators_by_fref+0xa0>)
    340c:	4b05      	ldr	r3, [pc, #20]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    340e:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    3410:	f410 6f00 	tst.w	r0, #2048	; 0x800
    3414:	d002      	beq.n	341c <_gclk_init_generators_by_fref+0x90>
    3416:	4a06      	ldr	r2, [pc, #24]	; (3430 <_gclk_init_generators_by_fref+0xa4>)
    3418:	4b02      	ldr	r3, [pc, #8]	; (3424 <_gclk_init_generators_by_fref+0x98>)
    341a:	64da      	str	r2, [r3, #76]	; 0x4c
    341c:	4770      	bx	lr
    341e:	bf00      	nop
    3420:	00012b06 	.word	0x00012b06
    3424:	40001c00 	.word	0x40001c00
    3428:	00012306 	.word	0x00012306
    342c:	00012b05 	.word	0x00012b05
    3430:	00013b05 	.word	0x00013b05

00003434 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    3434:	2201      	movs	r2, #1
    3436:	4b01      	ldr	r3, [pc, #4]	; (343c <_mclk_init+0x8>)
    3438:	715a      	strb	r2, [r3, #5]
    343a:	4770      	bx	lr
    343c:	40000800 	.word	0x40000800

00003440 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    3440:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    3442:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    3444:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    3446:	f012 0f01 	tst.w	r2, #1
    344a:	d005      	beq.n	3458 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    344c:	2201      	movs	r2, #1
    344e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    3450:	6803      	ldr	r3, [r0, #0]
    3452:	b153      	cbz	r3, 346a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    3454:	4798      	blx	r3
    3456:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    3458:	8a1a      	ldrh	r2, [r3, #16]
    345a:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    345c:	b12a      	cbz	r2, 346a <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    345e:	f240 225e 	movw	r2, #606	; 0x25e
    3462:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    3464:	6843      	ldr	r3, [r0, #4]
    3466:	b103      	cbz	r3, 346a <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    3468:	4798      	blx	r3
    346a:	bd08      	pop	{r3, pc}

0000346c <_flash_init>:
{
    346c:	b538      	push	{r3, r4, r5, lr}
    346e:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    3470:	4605      	mov	r5, r0
    3472:	b350      	cbz	r0, 34ca <_flash_init+0x5e>
    3474:	4816      	ldr	r0, [pc, #88]	; (34d0 <_flash_init+0x64>)
    3476:	4281      	cmp	r1, r0
    3478:	bf14      	ite	ne
    347a:	2000      	movne	r0, #0
    347c:	2001      	moveq	r0, #1
    347e:	2256      	movs	r2, #86	; 0x56
    3480:	4914      	ldr	r1, [pc, #80]	; (34d4 <_flash_init+0x68>)
    3482:	4b15      	ldr	r3, [pc, #84]	; (34d8 <_flash_init+0x6c>)
    3484:	4798      	blx	r3
	device->hw = hw;
    3486:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    3488:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    348a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    348e:	049b      	lsls	r3, r3, #18
    3490:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    3492:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    3494:	4b11      	ldr	r3, [pc, #68]	; (34dc <_flash_init+0x70>)
    3496:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3498:	4b11      	ldr	r3, [pc, #68]	; (34e0 <_flash_init+0x74>)
    349a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    349e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    34a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    34a6:	f3bf 8f6f 	isb	sy
    34aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    34ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    34b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    34b6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    34ba:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    34be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    34c2:	6019      	str	r1, [r3, #0]
    34c4:	601a      	str	r2, [r3, #0]
}
    34c6:	2000      	movs	r0, #0
    34c8:	bd38      	pop	{r3, r4, r5, pc}
    34ca:	2000      	movs	r0, #0
    34cc:	e7d7      	b.n	347e <_flash_init+0x12>
    34ce:	bf00      	nop
    34d0:	41004000 	.word	0x41004000
    34d4:	000082b4 	.word	0x000082b4
    34d8:	00002cf1 	.word	0x00002cf1
    34dc:	20000ad0 	.word	0x20000ad0
    34e0:	e000e100 	.word	0xe000e100

000034e4 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    34e4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    34e6:	4b02      	ldr	r3, [pc, #8]	; (34f0 <NVMCTRL_0_Handler+0xc>)
    34e8:	6818      	ldr	r0, [r3, #0]
    34ea:	4b02      	ldr	r3, [pc, #8]	; (34f4 <NVMCTRL_0_Handler+0x10>)
    34ec:	4798      	blx	r3
    34ee:	bd08      	pop	{r3, pc}
    34f0:	20000ad0 	.word	0x20000ad0
    34f4:	00003441 	.word	0x00003441

000034f8 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    34f8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    34fa:	4b02      	ldr	r3, [pc, #8]	; (3504 <NVMCTRL_1_Handler+0xc>)
    34fc:	6818      	ldr	r0, [r3, #0]
    34fe:	4b02      	ldr	r3, [pc, #8]	; (3508 <NVMCTRL_1_Handler+0x10>)
    3500:	4798      	blx	r3
    3502:	bd08      	pop	{r3, pc}
    3504:	20000ad0 	.word	0x20000ad0
    3508:	00003441 	.word	0x00003441

0000350c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    350c:	4b09      	ldr	r3, [pc, #36]	; (3534 <_osc32kctrl_init_sources+0x28>)
    350e:	f242 024e 	movw	r2, #8270	; 0x204e
    3512:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    3514:	2201      	movs	r2, #1
    3516:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    3518:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    351a:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    351c:	2200      	movs	r2, #0
    351e:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    3520:	461a      	mov	r2, r3
    3522:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    3524:	f013 0f01 	tst.w	r3, #1
    3528:	d0fb      	beq.n	3522 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    352a:	2204      	movs	r2, #4
    352c:	4b01      	ldr	r3, [pc, #4]	; (3534 <_osc32kctrl_init_sources+0x28>)
    352e:	741a      	strb	r2, [r3, #16]
    3530:	4770      	bx	lr
    3532:	bf00      	nop
    3534:	40001400 	.word	0x40001400

00003538 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    3538:	4a2b      	ldr	r2, [pc, #172]	; (35e8 <_oscctrl_init_referenced_generators+0xb0>)
    353a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    353c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    3540:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    3544:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3546:	4b29      	ldr	r3, [pc, #164]	; (35ec <_oscctrl_init_referenced_generators+0xb4>)
    3548:	2200      	movs	r2, #0
    354a:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    354c:	4a28      	ldr	r2, [pc, #160]	; (35f0 <_oscctrl_init_referenced_generators+0xb8>)
    354e:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3550:	461a      	mov	r2, r3
    3552:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    3556:	f013 0f10 	tst.w	r3, #16
    355a:	d1fa      	bne.n	3552 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    355c:	2200      	movs	r2, #0
    355e:	4b23      	ldr	r3, [pc, #140]	; (35ec <_oscctrl_init_referenced_generators+0xb4>)
    3560:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3564:	461a      	mov	r2, r3
    3566:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    356a:	f013 0f04 	tst.w	r3, #4
    356e:	d1fa      	bne.n	3566 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    3570:	2242      	movs	r2, #66	; 0x42
    3572:	4b1e      	ldr	r3, [pc, #120]	; (35ec <_oscctrl_init_referenced_generators+0xb4>)
    3574:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3576:	461a      	mov	r2, r3
    3578:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    357c:	f013 0f02 	tst.w	r3, #2
    3580:	d1fa      	bne.n	3578 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    3582:	4b1a      	ldr	r3, [pc, #104]	; (35ec <_oscctrl_init_referenced_generators+0xb4>)
    3584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    3586:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    3588:	461a      	mov	r2, r3
    358a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    358e:	f013 0f08 	tst.w	r3, #8
    3592:	d1fa      	bne.n	358a <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    3594:	2282      	movs	r2, #130	; 0x82
    3596:	4b15      	ldr	r3, [pc, #84]	; (35ec <_oscctrl_init_referenced_generators+0xb4>)
    3598:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    359c:	461a      	mov	r2, r3
    359e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    35a2:	f013 0f04 	tst.w	r3, #4
    35a6:	d1fa      	bne.n	359e <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    35a8:	4b10      	ldr	r3, [pc, #64]	; (35ec <_oscctrl_init_referenced_generators+0xb4>)
    35aa:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    35ae:	f013 0f01 	tst.w	r3, #1
    35b2:	d012      	beq.n	35da <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    35b4:	4a0d      	ldr	r2, [pc, #52]	; (35ec <_oscctrl_init_referenced_generators+0xb4>)
    35b6:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    35b8:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    35bc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    35c0:	d1f9      	bne.n	35b6 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    35c2:	4a09      	ldr	r2, [pc, #36]	; (35e8 <_oscctrl_init_referenced_generators+0xb0>)
    35c4:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    35c6:	2b00      	cmp	r3, #0
    35c8:	d1fc      	bne.n	35c4 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    35ca:	4a07      	ldr	r2, [pc, #28]	; (35e8 <_oscctrl_init_referenced_generators+0xb0>)
    35cc:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    35ce:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    35d2:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    35d6:	6213      	str	r3, [r2, #32]
    35d8:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    35da:	4a04      	ldr	r2, [pc, #16]	; (35ec <_oscctrl_init_referenced_generators+0xb4>)
    35dc:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    35de:	f413 7f80 	tst.w	r3, #256	; 0x100
    35e2:	d0fb      	beq.n	35dc <_oscctrl_init_referenced_generators+0xa4>
    35e4:	e7ed      	b.n	35c2 <_oscctrl_init_referenced_generators+0x8a>
    35e6:	bf00      	nop
    35e8:	40001c00 	.word	0x40001c00
    35ec:	40001000 	.word	0x40001000
    35f0:	04010000 	.word	0x04010000

000035f4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    35f4:	b500      	push	{lr}
    35f6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    35f8:	4b0d      	ldr	r3, [pc, #52]	; (3630 <RAMECC_Handler+0x3c>)
    35fa:	789b      	ldrb	r3, [r3, #2]
    35fc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    35fe:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    3600:	9b01      	ldr	r3, [sp, #4]
    3602:	f013 0f02 	tst.w	r3, #2
    3606:	d006      	beq.n	3616 <RAMECC_Handler+0x22>
    3608:	4b0a      	ldr	r3, [pc, #40]	; (3634 <RAMECC_Handler+0x40>)
    360a:	681b      	ldr	r3, [r3, #0]
    360c:	b11b      	cbz	r3, 3616 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    360e:	4a08      	ldr	r2, [pc, #32]	; (3630 <RAMECC_Handler+0x3c>)
    3610:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3612:	4798      	blx	r3
    3614:	e009      	b.n	362a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    3616:	9b01      	ldr	r3, [sp, #4]
    3618:	f013 0f01 	tst.w	r3, #1
    361c:	d005      	beq.n	362a <RAMECC_Handler+0x36>
    361e:	4b05      	ldr	r3, [pc, #20]	; (3634 <RAMECC_Handler+0x40>)
    3620:	685b      	ldr	r3, [r3, #4]
    3622:	b113      	cbz	r3, 362a <RAMECC_Handler+0x36>
    3624:	4a02      	ldr	r2, [pc, #8]	; (3630 <RAMECC_Handler+0x3c>)
    3626:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3628:	4798      	blx	r3
	} else {
		return;
	}
}
    362a:	b003      	add	sp, #12
    362c:	f85d fb04 	ldr.w	pc, [sp], #4
    3630:	41020000 	.word	0x41020000
    3634:	20003e64 	.word	0x20003e64

00003638 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3638:	b470      	push	{r4, r5, r6}
    363a:	b087      	sub	sp, #28
    363c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    363e:	466c      	mov	r4, sp
    3640:	4d0c      	ldr	r5, [pc, #48]	; (3674 <_sercom_get_hardware_index+0x3c>)
    3642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3646:	e895 0003 	ldmia.w	r5, {r0, r1}
    364a:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    364e:	9b00      	ldr	r3, [sp, #0]
    3650:	42b3      	cmp	r3, r6
    3652:	d00c      	beq.n	366e <_sercom_get_hardware_index+0x36>
    3654:	4632      	mov	r2, r6
    3656:	2001      	movs	r0, #1
    3658:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    365c:	4293      	cmp	r3, r2
    365e:	d007      	beq.n	3670 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3660:	3001      	adds	r0, #1
    3662:	2806      	cmp	r0, #6
    3664:	d1f8      	bne.n	3658 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    3666:	2000      	movs	r0, #0
}
    3668:	b007      	add	sp, #28
    366a:	bc70      	pop	{r4, r5, r6}
    366c:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    366e:	2000      	movs	r0, #0
			return i;
    3670:	b2c0      	uxtb	r0, r0
    3672:	e7f9      	b.n	3668 <_sercom_get_hardware_index+0x30>
    3674:	000082d4 	.word	0x000082d4

00003678 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    3678:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    367a:	4b03      	ldr	r3, [pc, #12]	; (3688 <_sercom_get_irq_num+0x10>)
    367c:	4798      	blx	r3
    367e:	0080      	lsls	r0, r0, #2
    3680:	302e      	adds	r0, #46	; 0x2e
}
    3682:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    3686:	bd08      	pop	{r3, pc}
    3688:	00003639 	.word	0x00003639

0000368c <_usart_init>:
{
    368c:	b538      	push	{r3, r4, r5, lr}
    368e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    3690:	4b33      	ldr	r3, [pc, #204]	; (3760 <_usart_init+0xd4>)
    3692:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    3694:	2803      	cmp	r0, #3
    3696:	d056      	beq.n	3746 <_usart_init+0xba>
    3698:	2804      	cmp	r0, #4
    369a:	d052      	beq.n	3742 <_usart_init+0xb6>
    369c:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    369e:	bf08      	it	eq
    36a0:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    36a2:	d006      	beq.n	36b2 <_usart_init+0x26>
	ASSERT(false);
    36a4:	f240 2263 	movw	r2, #611	; 0x263
    36a8:	492e      	ldr	r1, [pc, #184]	; (3764 <_usart_init+0xd8>)
    36aa:	2000      	movs	r0, #0
    36ac:	4b2e      	ldr	r3, [pc, #184]	; (3768 <_usart_init+0xdc>)
    36ae:	4798      	blx	r3
	return 0;
    36b0:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    36b2:	69e3      	ldr	r3, [r4, #28]
    36b4:	f013 0f01 	tst.w	r3, #1
    36b8:	d1fb      	bne.n	36b2 <_usart_init+0x26>
    36ba:	69e3      	ldr	r3, [r4, #28]
    36bc:	f013 0f03 	tst.w	r3, #3
    36c0:	d1fb      	bne.n	36ba <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    36c2:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    36c4:	f013 0f02 	tst.w	r3, #2
    36c8:	d147      	bne.n	375a <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    36ca:	69e3      	ldr	r3, [r4, #28]
    36cc:	f013 0f01 	tst.w	r3, #1
    36d0:	d1fb      	bne.n	36ca <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    36d2:	6823      	ldr	r3, [r4, #0]
    36d4:	f043 0301 	orr.w	r3, r3, #1
    36d8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    36da:	69e3      	ldr	r3, [r4, #28]
    36dc:	f013 0f01 	tst.w	r3, #1
    36e0:	d1fb      	bne.n	36da <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    36e2:	4610      	mov	r0, r2
    36e4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    36e8:	4920      	ldr	r1, [pc, #128]	; (376c <_usart_init+0xe0>)
    36ea:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    36ee:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    36f0:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    36f2:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    36f4:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    36f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    36f8:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    36fa:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    36fe:	d024      	beq.n	374a <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    3700:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3704:	4b19      	ldr	r3, [pc, #100]	; (376c <_usart_init+0xe0>)
    3706:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    370a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    370c:	89a3      	ldrh	r3, [r4, #12]
    370e:	f361 030c 	bfi	r3, r1, #0, #13
    3712:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    3714:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    3718:	89a3      	ldrh	r3, [r4, #12]
    371a:	f362 334f 	bfi	r3, r2, #13, #3
    371e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    3720:	4b12      	ldr	r3, [pc, #72]	; (376c <_usart_init+0xe0>)
    3722:	0042      	lsls	r2, r0, #1
    3724:	1811      	adds	r1, r2, r0
    3726:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    372a:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    372e:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    3730:	4402      	add	r2, r0
    3732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3736:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    373a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    373e:	2000      	movs	r0, #0
    3740:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    3742:	2201      	movs	r2, #1
    3744:	e7b5      	b.n	36b2 <_usart_init+0x26>
    3746:	2200      	movs	r2, #0
    3748:	e7b3      	b.n	36b2 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    374a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    374e:	4b07      	ldr	r3, [pc, #28]	; (376c <_usart_init+0xe0>)
    3750:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    3754:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    3756:	81a3      	strh	r3, [r4, #12]
    3758:	e7e2      	b.n	3720 <_usart_init+0x94>
		return ERR_DENIED;
    375a:	f06f 0010 	mvn.w	r0, #16
}
    375e:	bd38      	pop	{r3, r4, r5, pc}
    3760:	00003639 	.word	0x00003639
    3764:	00008360 	.word	0x00008360
    3768:	00002cf1 	.word	0x00002cf1
    376c:	000082d4 	.word	0x000082d4

00003770 <_usart_async_init>:
{
    3770:	b570      	push	{r4, r5, r6, lr}
    3772:	460d      	mov	r5, r1
	ASSERT(device);
    3774:	4606      	mov	r6, r0
    3776:	22da      	movs	r2, #218	; 0xda
    3778:	4916      	ldr	r1, [pc, #88]	; (37d4 <_usart_async_init+0x64>)
    377a:	3000      	adds	r0, #0
    377c:	bf18      	it	ne
    377e:	2001      	movne	r0, #1
    3780:	4b15      	ldr	r3, [pc, #84]	; (37d8 <_usart_async_init+0x68>)
    3782:	4798      	blx	r3
	init_status = _usart_init(hw);
    3784:	4628      	mov	r0, r5
    3786:	4b15      	ldr	r3, [pc, #84]	; (37dc <_usart_async_init+0x6c>)
    3788:	4798      	blx	r3
	if (init_status) {
    378a:	4604      	mov	r4, r0
    378c:	b9f8      	cbnz	r0, 37ce <_usart_async_init+0x5e>
	device->hw = hw;
    378e:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    3790:	4628      	mov	r0, r5
    3792:	4b13      	ldr	r3, [pc, #76]	; (37e0 <_usart_async_init+0x70>)
    3794:	4798      	blx	r3
		irq = irq +2;
    3796:	3002      	adds	r0, #2
    3798:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    379a:	f000 031f 	and.w	r3, r0, #31
    379e:	2201      	movs	r2, #1
    37a0:	409a      	lsls	r2, r3
    37a2:	0943      	lsrs	r3, r0, #5
    37a4:	009b      	lsls	r3, r3, #2
    37a6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    37aa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    37ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    37b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    37b6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    37ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    37be:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    37c2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    37c6:	21e0      	movs	r1, #224	; 0xe0
    37c8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    37cc:	601a      	str	r2, [r3, #0]
}
    37ce:	4620      	mov	r0, r4
    37d0:	bd70      	pop	{r4, r5, r6, pc}
    37d2:	bf00      	nop
    37d4:	00008360 	.word	0x00008360
    37d8:	00002cf1 	.word	0x00002cf1
    37dc:	0000368d 	.word	0x0000368d
    37e0:	00003679 	.word	0x00003679

000037e4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    37e4:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    37e6:	69d3      	ldr	r3, [r2, #28]
    37e8:	f013 0f03 	tst.w	r3, #3
    37ec:	d1fb      	bne.n	37e6 <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    37ee:	6813      	ldr	r3, [r2, #0]
    37f0:	f043 0302 	orr.w	r3, r3, #2
    37f4:	6013      	str	r3, [r2, #0]
    37f6:	4770      	bx	lr

000037f8 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    37f8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    37fa:	6299      	str	r1, [r3, #40]	; 0x28
    37fc:	4770      	bx	lr

000037fe <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    37fe:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    3800:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    3802:	b2c0      	uxtb	r0, r0
    3804:	4770      	bx	lr

00003806 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3806:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    3808:	7e18      	ldrb	r0, [r3, #24]
}
    380a:	f000 0001 	and.w	r0, r0, #1
    380e:	4770      	bx	lr

00003810 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    3810:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3812:	7e18      	ldrb	r0, [r3, #24]
}
    3814:	f3c0 0080 	ubfx	r0, r0, #2, #1
    3818:	4770      	bx	lr
	...

0000381c <_usart_async_set_irq_state>:
{
    381c:	b570      	push	{r4, r5, r6, lr}
    381e:	460c      	mov	r4, r1
    3820:	4616      	mov	r6, r2
	ASSERT(device);
    3822:	4605      	mov	r5, r0
    3824:	f240 2245 	movw	r2, #581	; 0x245
    3828:	4915      	ldr	r1, [pc, #84]	; (3880 <_usart_async_set_irq_state+0x64>)
    382a:	3000      	adds	r0, #0
    382c:	bf18      	it	ne
    382e:	2001      	movne	r0, #1
    3830:	4b14      	ldr	r3, [pc, #80]	; (3884 <_usart_async_set_irq_state+0x68>)
    3832:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    3834:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    3838:	d10d      	bne.n	3856 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    383a:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    383c:	b92e      	cbnz	r6, 384a <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    383e:	2201      	movs	r2, #1
    3840:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    3842:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    3844:	2202      	movs	r2, #2
    3846:	751a      	strb	r2, [r3, #20]
    3848:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    384a:	2201      	movs	r2, #1
    384c:	759a      	strb	r2, [r3, #22]
    384e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    3850:	2202      	movs	r2, #2
    3852:	759a      	strb	r2, [r3, #22]
    3854:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    3856:	2c01      	cmp	r4, #1
    3858:	d002      	beq.n	3860 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    385a:	2c03      	cmp	r4, #3
    385c:	d008      	beq.n	3870 <_usart_async_set_irq_state+0x54>
    385e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    3860:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3862:	b916      	cbnz	r6, 386a <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    3864:	2204      	movs	r2, #4
    3866:	751a      	strb	r2, [r3, #20]
    3868:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    386a:	2204      	movs	r2, #4
    386c:	759a      	strb	r2, [r3, #22]
    386e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    3870:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    3872:	b116      	cbz	r6, 387a <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    3874:	2280      	movs	r2, #128	; 0x80
    3876:	759a      	strb	r2, [r3, #22]
}
    3878:	e7f1      	b.n	385e <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    387a:	2280      	movs	r2, #128	; 0x80
    387c:	751a      	strb	r2, [r3, #20]
    387e:	bd70      	pop	{r4, r5, r6, pc}
    3880:	00008360 	.word	0x00008360
    3884:	00002cf1 	.word	0x00002cf1

00003888 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    3888:	4b03      	ldr	r3, [pc, #12]	; (3898 <_delay_init+0x10>)
    388a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    388e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    3890:	2205      	movs	r2, #5
    3892:	601a      	str	r2, [r3, #0]
    3894:	4770      	bx	lr
    3896:	bf00      	nop
    3898:	e000e010 	.word	0xe000e010

0000389c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    389c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    389e:	b303      	cbz	r3, 38e2 <_delay_cycles+0x46>
{
    38a0:	b430      	push	{r4, r5}
    38a2:	1e5d      	subs	r5, r3, #1
    38a4:	b2ed      	uxtb	r5, r5
	while (n--) {
    38a6:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    38a8:	4a12      	ldr	r2, [pc, #72]	; (38f4 <_delay_cycles+0x58>)
    38aa:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    38ae:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    38b0:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    38b2:	6813      	ldr	r3, [r2, #0]
    38b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    38b8:	d0fb      	beq.n	38b2 <_delay_cycles+0x16>
	while (n--) {
    38ba:	3801      	subs	r0, #1
    38bc:	b2c0      	uxtb	r0, r0
    38be:	28ff      	cmp	r0, #255	; 0xff
    38c0:	d1f5      	bne.n	38ae <_delay_cycles+0x12>
    38c2:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    38c6:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    38ca:	3101      	adds	r1, #1
    38cc:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    38ce:	4b09      	ldr	r3, [pc, #36]	; (38f4 <_delay_cycles+0x58>)
    38d0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    38d2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    38d4:	461a      	mov	r2, r3
    38d6:	6813      	ldr	r3, [r2, #0]
    38d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    38dc:	d0fb      	beq.n	38d6 <_delay_cycles+0x3a>
		;
}
    38de:	bc30      	pop	{r4, r5}
    38e0:	4770      	bx	lr
	SysTick->LOAD = buf;
    38e2:	4b04      	ldr	r3, [pc, #16]	; (38f4 <_delay_cycles+0x58>)
    38e4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    38e6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    38e8:	461a      	mov	r2, r3
    38ea:	6813      	ldr	r3, [r2, #0]
    38ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    38f0:	d0fb      	beq.n	38ea <_delay_cycles+0x4e>
    38f2:	4770      	bx	lr
    38f4:	e000e010 	.word	0xe000e010

000038f8 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    38f8:	b470      	push	{r4, r5, r6}
    38fa:	b087      	sub	sp, #28
    38fc:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    38fe:	ac01      	add	r4, sp, #4
    3900:	4d14      	ldr	r5, [pc, #80]	; (3954 <_get_irq_num+0x5c>)
    3902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3906:	682b      	ldr	r3, [r5, #0]
    3908:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    390a:	42b0      	cmp	r0, r6
    390c:	d017      	beq.n	393e <_get_irq_num+0x46>
    390e:	4631      	mov	r1, r6
    3910:	2301      	movs	r3, #1
    3912:	a801      	add	r0, sp, #4
    3914:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    3918:	428a      	cmp	r2, r1
    391a:	d006      	beq.n	392a <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    391c:	3301      	adds	r3, #1
    391e:	2b05      	cmp	r3, #5
    3920:	d1f8      	bne.n	3914 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    3922:	2055      	movs	r0, #85	; 0x55
}
    3924:	b007      	add	sp, #28
    3926:	bc70      	pop	{r4, r5, r6}
    3928:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    392a:	b2db      	uxtb	r3, r3
    392c:	2b04      	cmp	r3, #4
    392e:	d80c      	bhi.n	394a <_get_irq_num+0x52>
    3930:	e8df f003 	tbb	[pc, r3]
    3934:	070d0305 	.word	0x070d0305
    3938:	09          	.byte	0x09
    3939:	00          	.byte	0x00
		return TCC1_0_IRQn;
    393a:	205c      	movs	r0, #92	; 0x5c
    393c:	e7f2      	b.n	3924 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    393e:	2055      	movs	r0, #85	; 0x55
    3940:	e7f0      	b.n	3924 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    3942:	2065      	movs	r0, #101	; 0x65
    3944:	e7ee      	b.n	3924 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    3946:	2068      	movs	r0, #104	; 0x68
    3948:	e7ec      	b.n	3924 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    394a:	2089      	movs	r0, #137	; 0x89
    394c:	e7ea      	b.n	3924 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    394e:	2061      	movs	r0, #97	; 0x61
    3950:	e7e8      	b.n	3924 <_get_irq_num+0x2c>
    3952:	bf00      	nop
    3954:	0000837c 	.word	0x0000837c

00003958 <_tcc_timer_deinit>:
{
    3958:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    395a:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    395c:	4620      	mov	r0, r4
    395e:	4b10      	ldr	r3, [pc, #64]	; (39a0 <_tcc_timer_deinit+0x48>)
    3960:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3962:	0943      	lsrs	r3, r0, #5
    3964:	f000 001f 	and.w	r0, r0, #31
    3968:	2201      	movs	r2, #1
    396a:	fa02 f000 	lsl.w	r0, r2, r0
    396e:	3320      	adds	r3, #32
    3970:	4a0c      	ldr	r2, [pc, #48]	; (39a4 <_tcc_timer_deinit+0x4c>)
    3972:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3976:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    397a:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    397e:	68a3      	ldr	r3, [r4, #8]
    3980:	f013 0f03 	tst.w	r3, #3
    3984:	d1fb      	bne.n	397e <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    3986:	6823      	ldr	r3, [r4, #0]
    3988:	f023 0302 	bic.w	r3, r3, #2
    398c:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    398e:	68a3      	ldr	r3, [r4, #8]
    3990:	f013 0f01 	tst.w	r3, #1
    3994:	d1fb      	bne.n	398e <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    3996:	6823      	ldr	r3, [r4, #0]
    3998:	f043 0301 	orr.w	r3, r3, #1
    399c:	6023      	str	r3, [r4, #0]
    399e:	bd10      	pop	{r4, pc}
    39a0:	000038f9 	.word	0x000038f9
    39a4:	e000e100 	.word	0xe000e100

000039a8 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    39a8:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    39aa:	6893      	ldr	r3, [r2, #8]
    39ac:	f013 0f03 	tst.w	r3, #3
    39b0:	d1fb      	bne.n	39aa <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    39b2:	6813      	ldr	r3, [r2, #0]
    39b4:	f043 0302 	orr.w	r3, r3, #2
    39b8:	6013      	str	r3, [r2, #0]
    39ba:	4770      	bx	lr

000039bc <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    39bc:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    39be:	6893      	ldr	r3, [r2, #8]
    39c0:	f013 0f03 	tst.w	r3, #3
    39c4:	d1fb      	bne.n	39be <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    39c6:	6813      	ldr	r3, [r2, #0]
    39c8:	f023 0302 	bic.w	r3, r3, #2
    39cc:	6013      	str	r3, [r2, #0]
    39ce:	4770      	bx	lr

000039d0 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    39d0:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    39d2:	6419      	str	r1, [r3, #64]	; 0x40
    39d4:	4770      	bx	lr

000039d6 <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    39d6:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    39d8:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    39da:	4770      	bx	lr

000039dc <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    39dc:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    39de:	6893      	ldr	r3, [r2, #8]
    39e0:	f013 0f03 	tst.w	r3, #3
    39e4:	d1fb      	bne.n	39de <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    39e6:	6810      	ldr	r0, [r2, #0]
}
    39e8:	f3c0 0040 	ubfx	r0, r0, #1, #1
    39ec:	4770      	bx	lr

000039ee <tcc_interrupt_handler>:
{
    39ee:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    39f0:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    39f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    39f4:	f012 0f01 	tst.w	r2, #1
    39f8:	d100      	bne.n	39fc <tcc_interrupt_handler+0xe>
    39fa:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    39fc:	2201      	movs	r2, #1
    39fe:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    3a00:	6803      	ldr	r3, [r0, #0]
    3a02:	4798      	blx	r3
}
    3a04:	e7f9      	b.n	39fa <tcc_interrupt_handler+0xc>
	...

00003a08 <_tcc_timer_init>:
{
    3a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a0a:	b087      	sub	sp, #28
    3a0c:	4605      	mov	r5, r0
    3a0e:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    3a10:	ae01      	add	r6, sp, #4
    3a12:	4f4e      	ldr	r7, [pc, #312]	; (3b4c <_tcc_timer_init+0x144>)
    3a14:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    3a16:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3a18:	683b      	ldr	r3, [r7, #0]
    3a1a:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    3a1c:	42a0      	cmp	r0, r4
    3a1e:	d00c      	beq.n	3a3a <_tcc_timer_init+0x32>
    3a20:	4621      	mov	r1, r4
    3a22:	2301      	movs	r3, #1
    3a24:	a801      	add	r0, sp, #4
    3a26:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    3a2a:	428a      	cmp	r2, r1
    3a2c:	d006      	beq.n	3a3c <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    3a2e:	3301      	adds	r3, #1
    3a30:	2b05      	cmp	r3, #5
    3a32:	d1f8      	bne.n	3a26 <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    3a34:	2600      	movs	r6, #0
			return i;
    3a36:	b276      	sxtb	r6, r6
    3a38:	e015      	b.n	3a66 <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    3a3a:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    3a3c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    3a40:	d073      	beq.n	3b2a <_tcc_timer_init+0x122>
    3a42:	2b01      	cmp	r3, #1
    3a44:	d06b      	beq.n	3b1e <_tcc_timer_init+0x116>
    3a46:	2b02      	cmp	r3, #2
    3a48:	d06b      	beq.n	3b22 <_tcc_timer_init+0x11a>
    3a4a:	2b03      	cmp	r3, #3
    3a4c:	d06b      	beq.n	3b26 <_tcc_timer_init+0x11e>
    3a4e:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    3a50:	bf08      	it	eq
    3a52:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    3a54:	d0ef      	beq.n	3a36 <_tcc_timer_init+0x2e>
	ASSERT(false);
    3a56:	f240 128b 	movw	r2, #395	; 0x18b
    3a5a:	493d      	ldr	r1, [pc, #244]	; (3b50 <_tcc_timer_init+0x148>)
    3a5c:	2000      	movs	r0, #0
    3a5e:	4b3d      	ldr	r3, [pc, #244]	; (3b54 <_tcc_timer_init+0x14c>)
    3a60:	4798      	blx	r3
	return -1;
    3a62:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    3a66:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    3a68:	22e4      	movs	r2, #228	; 0xe4
    3a6a:	4939      	ldr	r1, [pc, #228]	; (3b50 <_tcc_timer_init+0x148>)
    3a6c:	2001      	movs	r0, #1
    3a6e:	4b39      	ldr	r3, [pc, #228]	; (3b54 <_tcc_timer_init+0x14c>)
    3a70:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3a72:	68a3      	ldr	r3, [r4, #8]
    3a74:	f013 0f01 	tst.w	r3, #1
    3a78:	d1fb      	bne.n	3a72 <_tcc_timer_init+0x6a>
    3a7a:	68a3      	ldr	r3, [r4, #8]
    3a7c:	f013 0f03 	tst.w	r3, #3
    3a80:	d1fb      	bne.n	3a7a <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    3a82:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    3a84:	f013 0f02 	tst.w	r3, #2
    3a88:	d15d      	bne.n	3b46 <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3a8a:	68a3      	ldr	r3, [r4, #8]
    3a8c:	f013 0f01 	tst.w	r3, #1
    3a90:	d1fb      	bne.n	3a8a <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    3a92:	6823      	ldr	r3, [r4, #0]
    3a94:	f043 0301 	orr.w	r3, r3, #1
    3a98:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    3a9a:	68a3      	ldr	r3, [r4, #8]
    3a9c:	f013 0f01 	tst.w	r3, #1
    3aa0:	d1fb      	bne.n	3a9a <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    3aa2:	4a2a      	ldr	r2, [pc, #168]	; (3b4c <_tcc_timer_init+0x144>)
    3aa4:	00f1      	lsls	r1, r6, #3
    3aa6:	198b      	adds	r3, r1, r6
    3aa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3aac:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    3aae:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    3ab0:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    3ab2:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    3ab4:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    3ab6:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    3ab8:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    3aba:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    3abc:	440e      	add	r6, r1
    3abe:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    3ac2:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    3ac4:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    3ac6:	2301      	movs	r3, #1
    3ac8:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    3aca:	4b23      	ldr	r3, [pc, #140]	; (3b58 <_tcc_timer_init+0x150>)
    3acc:	429c      	cmp	r4, r3
    3ace:	d02e      	beq.n	3b2e <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    3ad0:	4b22      	ldr	r3, [pc, #136]	; (3b5c <_tcc_timer_init+0x154>)
    3ad2:	429c      	cmp	r4, r3
    3ad4:	d02e      	beq.n	3b34 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    3ad6:	4b22      	ldr	r3, [pc, #136]	; (3b60 <_tcc_timer_init+0x158>)
    3ad8:	429c      	cmp	r4, r3
    3ada:	d02e      	beq.n	3b3a <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    3adc:	4b21      	ldr	r3, [pc, #132]	; (3b64 <_tcc_timer_init+0x15c>)
    3ade:	429c      	cmp	r4, r3
    3ae0:	d02e      	beq.n	3b40 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    3ae2:	4b21      	ldr	r3, [pc, #132]	; (3b68 <_tcc_timer_init+0x160>)
    3ae4:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    3ae6:	bf04      	itt	eq
    3ae8:	4b20      	ldreq	r3, [pc, #128]	; (3b6c <_tcc_timer_init+0x164>)
    3aea:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    3aec:	4620      	mov	r0, r4
    3aee:	4b20      	ldr	r3, [pc, #128]	; (3b70 <_tcc_timer_init+0x168>)
    3af0:	4798      	blx	r3
    3af2:	f000 031f 	and.w	r3, r0, #31
    3af6:	2201      	movs	r2, #1
    3af8:	409a      	lsls	r2, r3
    3afa:	0943      	lsrs	r3, r0, #5
    3afc:	009b      	lsls	r3, r3, #2
    3afe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3b02:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    3b0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b0e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3b12:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3b16:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    3b18:	2000      	movs	r0, #0
}
    3b1a:	b007      	add	sp, #28
    3b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    3b1e:	2601      	movs	r6, #1
    3b20:	e789      	b.n	3a36 <_tcc_timer_init+0x2e>
    3b22:	2602      	movs	r6, #2
    3b24:	e787      	b.n	3a36 <_tcc_timer_init+0x2e>
    3b26:	2603      	movs	r6, #3
    3b28:	e785      	b.n	3a36 <_tcc_timer_init+0x2e>
    3b2a:	2600      	movs	r6, #0
    3b2c:	e783      	b.n	3a36 <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    3b2e:	4b0f      	ldr	r3, [pc, #60]	; (3b6c <_tcc_timer_init+0x164>)
    3b30:	601d      	str	r5, [r3, #0]
    3b32:	e7d3      	b.n	3adc <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    3b34:	4b0d      	ldr	r3, [pc, #52]	; (3b6c <_tcc_timer_init+0x164>)
    3b36:	605d      	str	r5, [r3, #4]
    3b38:	e7d3      	b.n	3ae2 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    3b3a:	4b0c      	ldr	r3, [pc, #48]	; (3b6c <_tcc_timer_init+0x164>)
    3b3c:	609d      	str	r5, [r3, #8]
    3b3e:	e7d5      	b.n	3aec <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    3b40:	4b0a      	ldr	r3, [pc, #40]	; (3b6c <_tcc_timer_init+0x164>)
    3b42:	60dd      	str	r5, [r3, #12]
    3b44:	e7d2      	b.n	3aec <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    3b46:	f06f 0010 	mvn.w	r0, #16
    3b4a:	e7e6      	b.n	3b1a <_tcc_timer_init+0x112>
    3b4c:	0000837c 	.word	0x0000837c
    3b50:	00008444 	.word	0x00008444
    3b54:	00002cf1 	.word	0x00002cf1
    3b58:	41016000 	.word	0x41016000
    3b5c:	41018000 	.word	0x41018000
    3b60:	42000c00 	.word	0x42000c00
    3b64:	42001000 	.word	0x42001000
    3b68:	43001000 	.word	0x43001000
    3b6c:	20000ad4 	.word	0x20000ad4
    3b70:	000038f9 	.word	0x000038f9

00003b74 <_tcc_timer_set_irq>:
{
    3b74:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    3b76:	68c0      	ldr	r0, [r0, #12]
    3b78:	4b02      	ldr	r3, [pc, #8]	; (3b84 <_tcc_timer_set_irq+0x10>)
    3b7a:	4798      	blx	r3
    3b7c:	4b02      	ldr	r3, [pc, #8]	; (3b88 <_tcc_timer_set_irq+0x14>)
    3b7e:	4798      	blx	r3
    3b80:	bd08      	pop	{r3, pc}
    3b82:	bf00      	nop
    3b84:	000038f9 	.word	0x000038f9
    3b88:	00003015 	.word	0x00003015

00003b8c <_tcc_get_timer>:
}
    3b8c:	4800      	ldr	r0, [pc, #0]	; (3b90 <_tcc_get_timer+0x4>)
    3b8e:	4770      	bx	lr
    3b90:	2000006c 	.word	0x2000006c

00003b94 <TCC0_0_Handler>:
{
    3b94:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    3b96:	4b02      	ldr	r3, [pc, #8]	; (3ba0 <TCC0_0_Handler+0xc>)
    3b98:	6818      	ldr	r0, [r3, #0]
    3b9a:	4b02      	ldr	r3, [pc, #8]	; (3ba4 <TCC0_0_Handler+0x10>)
    3b9c:	4798      	blx	r3
    3b9e:	bd08      	pop	{r3, pc}
    3ba0:	20000ad4 	.word	0x20000ad4
    3ba4:	000039ef 	.word	0x000039ef

00003ba8 <TCC1_0_Handler>:
{
    3ba8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    3baa:	4b02      	ldr	r3, [pc, #8]	; (3bb4 <TCC1_0_Handler+0xc>)
    3bac:	6858      	ldr	r0, [r3, #4]
    3bae:	4b02      	ldr	r3, [pc, #8]	; (3bb8 <TCC1_0_Handler+0x10>)
    3bb0:	4798      	blx	r3
    3bb2:	bd08      	pop	{r3, pc}
    3bb4:	20000ad4 	.word	0x20000ad4
    3bb8:	000039ef 	.word	0x000039ef

00003bbc <TCC2_0_Handler>:
{
    3bbc:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    3bbe:	4b02      	ldr	r3, [pc, #8]	; (3bc8 <TCC2_0_Handler+0xc>)
    3bc0:	6898      	ldr	r0, [r3, #8]
    3bc2:	4b02      	ldr	r3, [pc, #8]	; (3bcc <TCC2_0_Handler+0x10>)
    3bc4:	4798      	blx	r3
    3bc6:	bd08      	pop	{r3, pc}
    3bc8:	20000ad4 	.word	0x20000ad4
    3bcc:	000039ef 	.word	0x000039ef

00003bd0 <TCC3_0_Handler>:
{
    3bd0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    3bd2:	4b02      	ldr	r3, [pc, #8]	; (3bdc <TCC3_0_Handler+0xc>)
    3bd4:	68d8      	ldr	r0, [r3, #12]
    3bd6:	4b02      	ldr	r3, [pc, #8]	; (3be0 <TCC3_0_Handler+0x10>)
    3bd8:	4798      	blx	r3
    3bda:	bd08      	pop	{r3, pc}
    3bdc:	20000ad4 	.word	0x20000ad4
    3be0:	000039ef 	.word	0x000039ef

00003be4 <TCC4_0_Handler>:
{
    3be4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    3be6:	4b02      	ldr	r3, [pc, #8]	; (3bf0 <TCC4_0_Handler+0xc>)
    3be8:	6918      	ldr	r0, [r3, #16]
    3bea:	4b02      	ldr	r3, [pc, #8]	; (3bf4 <TCC4_0_Handler+0x10>)
    3bec:	4798      	blx	r3
    3bee:	bd08      	pop	{r3, pc}
    3bf0:	20000ad4 	.word	0x20000ad4
    3bf4:	000039ef 	.word	0x000039ef

00003bf8 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    3bf8:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3bfa:	6913      	ldr	r3, [r2, #16]
    3bfc:	f013 0f03 	tst.w	r3, #3
    3c00:	d1fb      	bne.n	3bfa <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    3c02:	6813      	ldr	r3, [r2, #0]
    3c04:	f043 0302 	orr.w	r3, r3, #2
    3c08:	6013      	str	r3, [r2, #0]
    3c0a:	4770      	bx	lr

00003c0c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    3c0c:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c0e:	6913      	ldr	r3, [r2, #16]
    3c10:	f013 0f03 	tst.w	r3, #3
    3c14:	d1fb      	bne.n	3c0e <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3c16:	6813      	ldr	r3, [r2, #0]
    3c18:	f023 0302 	bic.w	r3, r3, #2
    3c1c:	6013      	str	r3, [r2, #0]
    3c1e:	4770      	bx	lr

00003c20 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    3c20:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3c22:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3c24:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3c28:	2b02      	cmp	r3, #2
    3c2a:	d00b      	beq.n	3c44 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3c2c:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3c2e:	f013 0f0c 	tst.w	r3, #12
    3c32:	d009      	beq.n	3c48 <_tc_timer_set_period+0x28>
    3c34:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3c36:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3c3a:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    3c3c:	bf04      	itt	eq
    3c3e:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    3c40:	76d1      	strbeq	r1, [r2, #27]
    3c42:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3c44:	61d1      	str	r1, [r2, #28]
    3c46:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    3c48:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3c4a:	8391      	strh	r1, [r2, #28]
    3c4c:	4770      	bx	lr

00003c4e <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    3c4e:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3c50:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3c52:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3c56:	2b02      	cmp	r3, #2
    3c58:	d00c      	beq.n	3c74 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3c5a:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3c5c:	f013 0f0c 	tst.w	r3, #12
    3c60:	d00a      	beq.n	3c78 <_tc_timer_get_period+0x2a>
    3c62:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    3c64:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    3c68:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    3c6a:	bf06      	itte	eq
    3c6c:	7ed0      	ldrbeq	r0, [r2, #27]
    3c6e:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    3c70:	2000      	movne	r0, #0
}
    3c72:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    3c74:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    3c76:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    3c78:	8b90      	ldrh	r0, [r2, #28]
    3c7a:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    3c7c:	4770      	bx	lr

00003c7e <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    3c7e:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3c80:	6913      	ldr	r3, [r2, #16]
    3c82:	f013 0f03 	tst.w	r3, #3
    3c86:	d1fb      	bne.n	3c80 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3c88:	6810      	ldr	r0, [r2, #0]
}
    3c8a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    3c8e:	4770      	bx	lr

00003c90 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    3c90:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    3c92:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3c94:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3c96:	f012 0f01 	tst.w	r2, #1
    3c9a:	d100      	bne.n	3c9e <tc_interrupt_handler+0xe>
    3c9c:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3c9e:	2201      	movs	r2, #1
    3ca0:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    3ca2:	6803      	ldr	r3, [r0, #0]
    3ca4:	4798      	blx	r3
	}
}
    3ca6:	e7f9      	b.n	3c9c <tc_interrupt_handler+0xc>

00003ca8 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    3ca8:	b538      	push	{r3, r4, r5, lr}
    3caa:	4605      	mov	r5, r0
	void *const hw = device->hw;
    3cac:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    3cae:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    3cb0:	f013 0f01 	tst.w	r3, #1
    3cb4:	d004      	beq.n	3cc0 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    3cb6:	2301      	movs	r3, #1
    3cb8:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    3cba:	6803      	ldr	r3, [r0, #0]
    3cbc:	b103      	cbz	r3, 3cc0 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    3cbe:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    3cc0:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    3cc2:	f013 0f02 	tst.w	r3, #2
    3cc6:	d005      	beq.n	3cd4 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    3cc8:	2302      	movs	r3, #2
    3cca:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    3ccc:	686b      	ldr	r3, [r5, #4]
    3cce:	b10b      	cbz	r3, 3cd4 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    3cd0:	4628      	mov	r0, r5
    3cd2:	4798      	blx	r3
    3cd4:	bd38      	pop	{r3, r4, r5, pc}
	...

00003cd8 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    3cd8:	4b11      	ldr	r3, [pc, #68]	; (3d20 <_tc_init_irq_param+0x48>)
    3cda:	4298      	cmp	r0, r3
    3cdc:	d011      	beq.n	3d02 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    3cde:	4b11      	ldr	r3, [pc, #68]	; (3d24 <_tc_init_irq_param+0x4c>)
    3ce0:	4298      	cmp	r0, r3
    3ce2:	d011      	beq.n	3d08 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    3ce4:	4b10      	ldr	r3, [pc, #64]	; (3d28 <_tc_init_irq_param+0x50>)
    3ce6:	4298      	cmp	r0, r3
    3ce8:	d011      	beq.n	3d0e <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    3cea:	4b10      	ldr	r3, [pc, #64]	; (3d2c <_tc_init_irq_param+0x54>)
    3cec:	4298      	cmp	r0, r3
    3cee:	d011      	beq.n	3d14 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    3cf0:	4b0f      	ldr	r3, [pc, #60]	; (3d30 <_tc_init_irq_param+0x58>)
    3cf2:	4298      	cmp	r0, r3
    3cf4:	d011      	beq.n	3d1a <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    3cf6:	4b0f      	ldr	r3, [pc, #60]	; (3d34 <_tc_init_irq_param+0x5c>)
    3cf8:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    3cfa:	bf04      	itt	eq
    3cfc:	4b0e      	ldreq	r3, [pc, #56]	; (3d38 <_tc_init_irq_param+0x60>)
    3cfe:	6159      	streq	r1, [r3, #20]
    3d00:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    3d02:	4b0d      	ldr	r3, [pc, #52]	; (3d38 <_tc_init_irq_param+0x60>)
    3d04:	6019      	str	r1, [r3, #0]
    3d06:	e7f0      	b.n	3cea <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    3d08:	4b0b      	ldr	r3, [pc, #44]	; (3d38 <_tc_init_irq_param+0x60>)
    3d0a:	6059      	str	r1, [r3, #4]
    3d0c:	e7f0      	b.n	3cf0 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    3d0e:	4b0a      	ldr	r3, [pc, #40]	; (3d38 <_tc_init_irq_param+0x60>)
    3d10:	6099      	str	r1, [r3, #8]
    3d12:	e7f0      	b.n	3cf6 <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    3d14:	4b08      	ldr	r3, [pc, #32]	; (3d38 <_tc_init_irq_param+0x60>)
    3d16:	60d9      	str	r1, [r3, #12]
    3d18:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    3d1a:	4b07      	ldr	r3, [pc, #28]	; (3d38 <_tc_init_irq_param+0x60>)
    3d1c:	6119      	str	r1, [r3, #16]
    3d1e:	4770      	bx	lr
    3d20:	40003800 	.word	0x40003800
    3d24:	40003c00 	.word	0x40003c00
    3d28:	4101a000 	.word	0x4101a000
    3d2c:	4101c000 	.word	0x4101c000
    3d30:	42001400 	.word	0x42001400
    3d34:	42001800 	.word	0x42001800
    3d38:	20000ae8 	.word	0x20000ae8

00003d3c <get_tc_index>:
{
    3d3c:	b570      	push	{r4, r5, r6, lr}
    3d3e:	b086      	sub	sp, #24
    3d40:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3d42:	466c      	mov	r4, sp
    3d44:	4d18      	ldr	r5, [pc, #96]	; (3da8 <get_tc_index+0x6c>)
    3d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3d4a:	e895 0003 	ldmia.w	r5, {r0, r1}
    3d4e:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    3d52:	9b00      	ldr	r3, [sp, #0]
    3d54:	42b3      	cmp	r3, r6
    3d56:	d021      	beq.n	3d9c <get_tc_index+0x60>
    3d58:	4631      	mov	r1, r6
    3d5a:	2301      	movs	r3, #1
    3d5c:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    3d60:	428a      	cmp	r2, r1
    3d62:	d01c      	beq.n	3d9e <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3d64:	3301      	adds	r3, #1
    3d66:	2b06      	cmp	r3, #6
    3d68:	d1f8      	bne.n	3d5c <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    3d6a:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    3d6c:	4a0f      	ldr	r2, [pc, #60]	; (3dac <get_tc_index+0x70>)
    3d6e:	7812      	ldrb	r2, [r2, #0]
    3d70:	429a      	cmp	r2, r3
    3d72:	d016      	beq.n	3da2 <get_tc_index+0x66>
    3d74:	4a0d      	ldr	r2, [pc, #52]	; (3dac <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3d76:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    3d78:	7d11      	ldrb	r1, [r2, #20]
    3d7a:	4299      	cmp	r1, r3
    3d7c:	d012      	beq.n	3da4 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3d7e:	3001      	adds	r0, #1
    3d80:	b2c0      	uxtb	r0, r0
    3d82:	3214      	adds	r2, #20
    3d84:	2806      	cmp	r0, #6
    3d86:	d1f7      	bne.n	3d78 <get_tc_index+0x3c>
	ASSERT(false);
    3d88:	f240 2227 	movw	r2, #551	; 0x227
    3d8c:	4908      	ldr	r1, [pc, #32]	; (3db0 <get_tc_index+0x74>)
    3d8e:	2000      	movs	r0, #0
    3d90:	4b08      	ldr	r3, [pc, #32]	; (3db4 <get_tc_index+0x78>)
    3d92:	4798      	blx	r3
	return -1;
    3d94:	f04f 30ff 	mov.w	r0, #4294967295
}
    3d98:	b006      	add	sp, #24
    3d9a:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3d9c:	2300      	movs	r3, #0
			return i;
    3d9e:	b2db      	uxtb	r3, r3
    3da0:	e7e4      	b.n	3d6c <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    3da2:	2000      	movs	r0, #0
			return i;
    3da4:	b240      	sxtb	r0, r0
    3da6:	e7f7      	b.n	3d98 <get_tc_index+0x5c>
    3da8:	0000845c 	.word	0x0000845c
    3dac:	2000008c 	.word	0x2000008c
    3db0:	00008474 	.word	0x00008474
    3db4:	00002cf1 	.word	0x00002cf1

00003db8 <_tc_timer_init>:
{
    3db8:	b570      	push	{r4, r5, r6, lr}
    3dba:	4606      	mov	r6, r0
    3dbc:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    3dbe:	4608      	mov	r0, r1
    3dc0:	4b48      	ldr	r3, [pc, #288]	; (3ee4 <_tc_timer_init+0x12c>)
    3dc2:	4798      	blx	r3
    3dc4:	4605      	mov	r5, r0
	device->hw = hw;
    3dc6:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    3dc8:	22af      	movs	r2, #175	; 0xaf
    3dca:	4947      	ldr	r1, [pc, #284]	; (3ee8 <_tc_timer_init+0x130>)
    3dcc:	2001      	movs	r0, #1
    3dce:	4b47      	ldr	r3, [pc, #284]	; (3eec <_tc_timer_init+0x134>)
    3dd0:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3dd2:	6923      	ldr	r3, [r4, #16]
    3dd4:	f013 0f01 	tst.w	r3, #1
    3dd8:	d1fb      	bne.n	3dd2 <_tc_timer_init+0x1a>
    3dda:	6923      	ldr	r3, [r4, #16]
    3ddc:	f013 0f03 	tst.w	r3, #3
    3de0:	d1fb      	bne.n	3dda <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3de2:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    3de4:	f013 0f02 	tst.w	r3, #2
    3de8:	d175      	bne.n	3ed6 <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3dea:	6923      	ldr	r3, [r4, #16]
    3dec:	f013 0f01 	tst.w	r3, #1
    3df0:	d1fb      	bne.n	3dea <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    3df2:	6823      	ldr	r3, [r4, #0]
    3df4:	f043 0301 	orr.w	r3, r3, #1
    3df8:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3dfa:	6923      	ldr	r3, [r4, #16]
    3dfc:	f013 0f01 	tst.w	r3, #1
    3e00:	d1fb      	bne.n	3dfa <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3e02:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3e06:	4a3a      	ldr	r2, [pc, #232]	; (3ef0 <_tc_timer_init+0x138>)
    3e08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3e0c:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3e0e:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3e10:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    3e12:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    3e14:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    3e16:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    3e18:	2201      	movs	r2, #1
    3e1a:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3e1c:	685b      	ldr	r3, [r3, #4]
    3e1e:	f003 030c 	and.w	r3, r3, #12
    3e22:	2b08      	cmp	r3, #8
    3e24:	d03f      	beq.n	3ea6 <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    3e26:	2b00      	cmp	r3, #0
    3e28:	d147      	bne.n	3eba <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3e2a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3e2e:	4a30      	ldr	r2, [pc, #192]	; (3ef0 <_tc_timer_init+0x138>)
    3e30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3e34:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    3e36:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    3e38:	8a1b      	ldrh	r3, [r3, #16]
    3e3a:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    3e3c:	2301      	movs	r3, #1
    3e3e:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    3e40:	4631      	mov	r1, r6
    3e42:	4620      	mov	r0, r4
    3e44:	4b2b      	ldr	r3, [pc, #172]	; (3ef4 <_tc_timer_init+0x13c>)
    3e46:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3e48:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3e4c:	4a28      	ldr	r2, [pc, #160]	; (3ef0 <_tc_timer_init+0x138>)
    3e4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3e52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    3e56:	2b00      	cmp	r3, #0
    3e58:	db40      	blt.n	3edc <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e5a:	095a      	lsrs	r2, r3, #5
    3e5c:	f003 031f 	and.w	r3, r3, #31
    3e60:	2101      	movs	r1, #1
    3e62:	fa01 f303 	lsl.w	r3, r1, r3
    3e66:	3220      	adds	r2, #32
    3e68:	4923      	ldr	r1, [pc, #140]	; (3ef8 <_tc_timer_init+0x140>)
    3e6a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3e6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e72:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    3e76:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3e7a:	4b1d      	ldr	r3, [pc, #116]	; (3ef0 <_tc_timer_init+0x138>)
    3e7c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3e80:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    3e84:	2b00      	cmp	r3, #0
    3e86:	db2b      	blt.n	3ee0 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e88:	0959      	lsrs	r1, r3, #5
    3e8a:	f003 031f 	and.w	r3, r3, #31
    3e8e:	2201      	movs	r2, #1
    3e90:	fa02 f303 	lsl.w	r3, r2, r3
    3e94:	4a18      	ldr	r2, [pc, #96]	; (3ef8 <_tc_timer_init+0x140>)
    3e96:	f101 0060 	add.w	r0, r1, #96	; 0x60
    3e9a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    3ea2:	2000      	movs	r0, #0
    3ea4:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3ea6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3eaa:	4a11      	ldr	r2, [pc, #68]	; (3ef0 <_tc_timer_init+0x138>)
    3eac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3eb0:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3eb2:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3eb4:	691b      	ldr	r3, [r3, #16]
    3eb6:	6223      	str	r3, [r4, #32]
    3eb8:	e7c0      	b.n	3e3c <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    3eba:	2b04      	cmp	r3, #4
    3ebc:	d1be      	bne.n	3e3c <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    3ebe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3ec2:	4a0b      	ldr	r2, [pc, #44]	; (3ef0 <_tc_timer_init+0x138>)
    3ec4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ec8:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    3eca:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    3ecc:	7c1a      	ldrb	r2, [r3, #16]
    3ece:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    3ed0:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    3ed2:	76e3      	strb	r3, [r4, #27]
    3ed4:	e7b2      	b.n	3e3c <_tc_timer_init+0x84>
		return ERR_DENIED;
    3ed6:	f06f 0010 	mvn.w	r0, #16
    3eda:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    3edc:	2000      	movs	r0, #0
    3ede:	bd70      	pop	{r4, r5, r6, pc}
    3ee0:	2000      	movs	r0, #0
}
    3ee2:	bd70      	pop	{r4, r5, r6, pc}
    3ee4:	00003d3d 	.word	0x00003d3d
    3ee8:	00008474 	.word	0x00008474
    3eec:	00002cf1 	.word	0x00002cf1
    3ef0:	2000008c 	.word	0x2000008c
    3ef4:	00003cd9 	.word	0x00003cd9
    3ef8:	e000e100 	.word	0xe000e100

00003efc <_tc_timer_deinit>:
{
    3efc:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    3efe:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    3f00:	4620      	mov	r0, r4
    3f02:	4b18      	ldr	r3, [pc, #96]	; (3f64 <_tc_timer_deinit+0x68>)
    3f04:	4798      	blx	r3
    3f06:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    3f08:	f240 1201 	movw	r2, #257	; 0x101
    3f0c:	4916      	ldr	r1, [pc, #88]	; (3f68 <_tc_timer_deinit+0x6c>)
    3f0e:	2001      	movs	r0, #1
    3f10:	4b16      	ldr	r3, [pc, #88]	; (3f6c <_tc_timer_deinit+0x70>)
    3f12:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    3f14:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3f18:	4b15      	ldr	r3, [pc, #84]	; (3f70 <_tc_timer_deinit+0x74>)
    3f1a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    3f1e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    3f22:	2b00      	cmp	r3, #0
    3f24:	db0d      	blt.n	3f42 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f26:	095a      	lsrs	r2, r3, #5
    3f28:	f003 031f 	and.w	r3, r3, #31
    3f2c:	2101      	movs	r1, #1
    3f2e:	fa01 f303 	lsl.w	r3, r1, r3
    3f32:	3220      	adds	r2, #32
    3f34:	490f      	ldr	r1, [pc, #60]	; (3f74 <_tc_timer_deinit+0x78>)
    3f36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3f3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f3e:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3f42:	6923      	ldr	r3, [r4, #16]
    3f44:	f013 0f03 	tst.w	r3, #3
    3f48:	d1fb      	bne.n	3f42 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    3f4a:	6823      	ldr	r3, [r4, #0]
    3f4c:	f023 0302 	bic.w	r3, r3, #2
    3f50:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3f52:	6923      	ldr	r3, [r4, #16]
    3f54:	f013 0f01 	tst.w	r3, #1
    3f58:	d1fb      	bne.n	3f52 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    3f5a:	6823      	ldr	r3, [r4, #0]
    3f5c:	f043 0301 	orr.w	r3, r3, #1
    3f60:	6023      	str	r3, [r4, #0]
    3f62:	bd38      	pop	{r3, r4, r5, pc}
    3f64:	00003d3d 	.word	0x00003d3d
    3f68:	00008474 	.word	0x00008474
    3f6c:	00002cf1 	.word	0x00002cf1
    3f70:	2000008c 	.word	0x2000008c
    3f74:	e000e100 	.word	0xe000e100

00003f78 <_tc_timer_set_irq>:
{
    3f78:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    3f7a:	68c0      	ldr	r0, [r0, #12]
    3f7c:	4b08      	ldr	r3, [pc, #32]	; (3fa0 <_tc_timer_set_irq+0x28>)
    3f7e:	4798      	blx	r3
    3f80:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    3f82:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    3f86:	4907      	ldr	r1, [pc, #28]	; (3fa4 <_tc_timer_set_irq+0x2c>)
    3f88:	2001      	movs	r0, #1
    3f8a:	4b07      	ldr	r3, [pc, #28]	; (3fa8 <_tc_timer_set_irq+0x30>)
    3f8c:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    3f8e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3f92:	4b06      	ldr	r3, [pc, #24]	; (3fac <_tc_timer_set_irq+0x34>)
    3f94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3f98:	78a0      	ldrb	r0, [r4, #2]
    3f9a:	4b05      	ldr	r3, [pc, #20]	; (3fb0 <_tc_timer_set_irq+0x38>)
    3f9c:	4798      	blx	r3
    3f9e:	bd10      	pop	{r4, pc}
    3fa0:	00003d3d 	.word	0x00003d3d
    3fa4:	00008474 	.word	0x00008474
    3fa8:	00002cf1 	.word	0x00002cf1
    3fac:	2000008c 	.word	0x2000008c
    3fb0:	00003015 	.word	0x00003015

00003fb4 <_pwm_init>:
{
    3fb4:	b570      	push	{r4, r5, r6, lr}
    3fb6:	4606      	mov	r6, r0
    3fb8:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    3fba:	4608      	mov	r0, r1
    3fbc:	4b3f      	ldr	r3, [pc, #252]	; (40bc <_pwm_init+0x108>)
    3fbe:	4798      	blx	r3
    3fc0:	4605      	mov	r5, r0
	device->hw = hw;
    3fc2:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3fc4:	6923      	ldr	r3, [r4, #16]
    3fc6:	f013 0f01 	tst.w	r3, #1
    3fca:	d1fb      	bne.n	3fc4 <_pwm_init+0x10>
    3fcc:	6923      	ldr	r3, [r4, #16]
    3fce:	f013 0f03 	tst.w	r3, #3
    3fd2:	d1fb      	bne.n	3fcc <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3fd4:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    3fd6:	f013 0f02 	tst.w	r3, #2
    3fda:	d165      	bne.n	40a8 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3fdc:	6923      	ldr	r3, [r4, #16]
    3fde:	f013 0f01 	tst.w	r3, #1
    3fe2:	d1fb      	bne.n	3fdc <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    3fe4:	6823      	ldr	r3, [r4, #0]
    3fe6:	f043 0301 	orr.w	r3, r3, #1
    3fea:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3fec:	6923      	ldr	r3, [r4, #16]
    3fee:	f013 0f01 	tst.w	r3, #1
    3ff2:	d1fb      	bne.n	3fec <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3ff4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3ff8:	4a31      	ldr	r2, [pc, #196]	; (40c0 <_pwm_init+0x10c>)
    3ffa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3ffe:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    4000:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4002:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    4004:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    4006:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    4008:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    400a:	2203      	movs	r2, #3
    400c:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    400e:	685b      	ldr	r3, [r3, #4]
    4010:	f003 030c 	and.w	r3, r3, #12
    4014:	2b08      	cmp	r3, #8
    4016:	d03d      	beq.n	4094 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4018:	2b00      	cmp	r3, #0
    401a:	d148      	bne.n	40ae <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    401c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4020:	4a27      	ldr	r2, [pc, #156]	; (40c0 <_pwm_init+0x10c>)
    4022:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4026:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4028:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    402a:	8a1b      	ldrh	r3, [r3, #16]
    402c:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    402e:	4631      	mov	r1, r6
    4030:	4620      	mov	r0, r4
    4032:	4b24      	ldr	r3, [pc, #144]	; (40c4 <_pwm_init+0x110>)
    4034:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    4036:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    403a:	4a21      	ldr	r2, [pc, #132]	; (40c0 <_pwm_init+0x10c>)
    403c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4040:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    4044:	2b00      	cmp	r3, #0
    4046:	db35      	blt.n	40b4 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4048:	095a      	lsrs	r2, r3, #5
    404a:	f003 031f 	and.w	r3, r3, #31
    404e:	2101      	movs	r1, #1
    4050:	fa01 f303 	lsl.w	r3, r1, r3
    4054:	3220      	adds	r2, #32
    4056:	491c      	ldr	r1, [pc, #112]	; (40c8 <_pwm_init+0x114>)
    4058:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    405c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4060:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4064:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4068:	4b15      	ldr	r3, [pc, #84]	; (40c0 <_pwm_init+0x10c>)
    406a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    406e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    4072:	2b00      	cmp	r3, #0
    4074:	db20      	blt.n	40b8 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4076:	0959      	lsrs	r1, r3, #5
    4078:	f003 031f 	and.w	r3, r3, #31
    407c:	2201      	movs	r2, #1
    407e:	fa02 f303 	lsl.w	r3, r2, r3
    4082:	4a11      	ldr	r2, [pc, #68]	; (40c8 <_pwm_init+0x114>)
    4084:	f101 0060 	add.w	r0, r1, #96	; 0x60
    4088:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    408c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    4090:	2000      	movs	r0, #0
    4092:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4094:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4098:	4a09      	ldr	r2, [pc, #36]	; (40c0 <_pwm_init+0x10c>)
    409a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    409e:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    40a0:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    40a2:	691b      	ldr	r3, [r3, #16]
    40a4:	6223      	str	r3, [r4, #32]
    40a6:	e7c2      	b.n	402e <_pwm_init+0x7a>
		return ERR_DENIED;
    40a8:	f06f 0010 	mvn.w	r0, #16
    40ac:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    40ae:	f04f 30ff 	mov.w	r0, #4294967295
    40b2:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    40b4:	2000      	movs	r0, #0
    40b6:	bd70      	pop	{r4, r5, r6, pc}
    40b8:	2000      	movs	r0, #0
}
    40ba:	bd70      	pop	{r4, r5, r6, pc}
    40bc:	00003d3d 	.word	0x00003d3d
    40c0:	2000008c 	.word	0x2000008c
    40c4:	00003cd9 	.word	0x00003cd9
    40c8:	e000e100 	.word	0xe000e100

000040cc <_tc_get_timer>:
}
    40cc:	4800      	ldr	r0, [pc, #0]	; (40d0 <_tc_get_timer+0x4>)
    40ce:	4770      	bx	lr
    40d0:	20000104 	.word	0x20000104

000040d4 <_tc_get_pwm>:
}
    40d4:	2000      	movs	r0, #0
    40d6:	4770      	bx	lr

000040d8 <TC0_Handler>:
{
    40d8:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    40da:	4b02      	ldr	r3, [pc, #8]	; (40e4 <TC0_Handler+0xc>)
    40dc:	6818      	ldr	r0, [r3, #0]
    40de:	4b02      	ldr	r3, [pc, #8]	; (40e8 <TC0_Handler+0x10>)
    40e0:	4798      	blx	r3
    40e2:	bd08      	pop	{r3, pc}
    40e4:	20000ae8 	.word	0x20000ae8
    40e8:	00003ca9 	.word	0x00003ca9

000040ec <TC1_Handler>:
{
    40ec:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    40ee:	4b02      	ldr	r3, [pc, #8]	; (40f8 <TC1_Handler+0xc>)
    40f0:	6858      	ldr	r0, [r3, #4]
    40f2:	4b02      	ldr	r3, [pc, #8]	; (40fc <TC1_Handler+0x10>)
    40f4:	4798      	blx	r3
    40f6:	bd08      	pop	{r3, pc}
    40f8:	20000ae8 	.word	0x20000ae8
    40fc:	00003ca9 	.word	0x00003ca9

00004100 <TC2_Handler>:
{
    4100:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    4102:	4b02      	ldr	r3, [pc, #8]	; (410c <TC2_Handler+0xc>)
    4104:	6898      	ldr	r0, [r3, #8]
    4106:	4b02      	ldr	r3, [pc, #8]	; (4110 <TC2_Handler+0x10>)
    4108:	4798      	blx	r3
    410a:	bd08      	pop	{r3, pc}
    410c:	20000ae8 	.word	0x20000ae8
    4110:	00003ca9 	.word	0x00003ca9

00004114 <TC3_Handler>:
{
    4114:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    4116:	4b02      	ldr	r3, [pc, #8]	; (4120 <TC3_Handler+0xc>)
    4118:	68d8      	ldr	r0, [r3, #12]
    411a:	4b02      	ldr	r3, [pc, #8]	; (4124 <TC3_Handler+0x10>)
    411c:	4798      	blx	r3
    411e:	bd08      	pop	{r3, pc}
    4120:	20000ae8 	.word	0x20000ae8
    4124:	00003c91 	.word	0x00003c91

00004128 <TC4_Handler>:
{
    4128:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    412a:	4b02      	ldr	r3, [pc, #8]	; (4134 <TC4_Handler+0xc>)
    412c:	6918      	ldr	r0, [r3, #16]
    412e:	4b02      	ldr	r3, [pc, #8]	; (4138 <TC4_Handler+0x10>)
    4130:	4798      	blx	r3
    4132:	bd08      	pop	{r3, pc}
    4134:	20000ae8 	.word	0x20000ae8
    4138:	00003c91 	.word	0x00003c91

0000413c <TC5_Handler>:
{
    413c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    413e:	4b02      	ldr	r3, [pc, #8]	; (4148 <TC5_Handler+0xc>)
    4140:	6958      	ldr	r0, [r3, #20]
    4142:	4b02      	ldr	r3, [pc, #8]	; (414c <TC5_Handler+0x10>)
    4144:	4798      	blx	r3
    4146:	bd08      	pop	{r3, pc}
    4148:	20000ae8 	.word	0x20000ae8
    414c:	00003c91 	.word	0x00003c91

00004150 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    4150:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4152:	4604      	mov	r4, r0
    4154:	b330      	cbz	r0, 41a4 <_wdt_init+0x54>
    4156:	6800      	ldr	r0, [r0, #0]
    4158:	3000      	adds	r0, #0
    415a:	bf18      	it	ne
    415c:	2001      	movne	r0, #1
    415e:	225a      	movs	r2, #90	; 0x5a
    4160:	4914      	ldr	r1, [pc, #80]	; (41b4 <_wdt_init+0x64>)
    4162:	4b15      	ldr	r3, [pc, #84]	; (41b8 <_wdt_init+0x68>)
    4164:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    4166:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4168:	689a      	ldr	r2, [r3, #8]
    416a:	f012 0f0e 	tst.w	r2, #14
    416e:	d1fb      	bne.n	4168 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4170:	781a      	ldrb	r2, [r3, #0]
    4172:	09d2      	lsrs	r2, r2, #7
    4174:	d118      	bne.n	41a8 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4176:	689a      	ldr	r2, [r3, #8]
    4178:	f012 0f0e 	tst.w	r2, #14
    417c:	d1fb      	bne.n	4176 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    417e:	781a      	ldrb	r2, [r3, #0]
    4180:	f012 0f02 	tst.w	r2, #2
    4184:	d113      	bne.n	41ae <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4186:	689a      	ldr	r2, [r3, #8]
    4188:	f012 0f0e 	tst.w	r2, #14
    418c:	d1fb      	bne.n	4186 <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    418e:	781a      	ldrb	r2, [r3, #0]
    4190:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4194:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    4196:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    4198:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    419a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    419e:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    41a0:	2000      	movs	r0, #0
    41a2:	bd10      	pop	{r4, pc}
    41a4:	2000      	movs	r0, #0
    41a6:	e7da      	b.n	415e <_wdt_init+0xe>
		return ERR_DENIED;
    41a8:	f06f 0010 	mvn.w	r0, #16
    41ac:	bd10      	pop	{r4, pc}
    41ae:	f06f 0010 	mvn.w	r0, #16
}
    41b2:	bd10      	pop	{r4, pc}
    41b4:	00008488 	.word	0x00008488
    41b8:	00002cf1 	.word	0x00002cf1

000041bc <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    41bc:	b570      	push	{r4, r5, r6, lr}
    41be:	460d      	mov	r5, r1
    41c0:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    41c2:	4606      	mov	r6, r0
    41c4:	2800      	cmp	r0, #0
    41c6:	d044      	beq.n	4252 <_wdt_set_timeout_period+0x96>
    41c8:	6800      	ldr	r0, [r0, #0]
    41ca:	3000      	adds	r0, #0
    41cc:	bf18      	it	ne
    41ce:	2001      	movne	r0, #1
    41d0:	2284      	movs	r2, #132	; 0x84
    41d2:	493f      	ldr	r1, [pc, #252]	; (42d0 <_wdt_set_timeout_period+0x114>)
    41d4:	4b3f      	ldr	r3, [pc, #252]	; (42d4 <_wdt_set_timeout_period+0x118>)
    41d6:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    41d8:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    41da:	6893      	ldr	r3, [r2, #8]
    41dc:	f013 0f0e 	tst.w	r3, #14
    41e0:	d1fb      	bne.n	41da <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    41e2:	7813      	ldrb	r3, [r2, #0]
    41e4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    41e8:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    41ea:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    41ec:	688b      	ldr	r3, [r1, #8]
    41ee:	f013 0f0e 	tst.w	r3, #14
    41f2:	d1fb      	bne.n	41ec <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    41f4:	780b      	ldrb	r3, [r1, #0]
    41f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    41fa:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    41fc:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    41fe:	6899      	ldr	r1, [r3, #8]
    4200:	f011 0f0e 	tst.w	r1, #14
    4204:	d1fb      	bne.n	41fe <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4206:	781a      	ldrb	r2, [r3, #0]
    4208:	09d2      	lsrs	r2, r2, #7
    420a:	d158      	bne.n	42be <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    420c:	6899      	ldr	r1, [r3, #8]
    420e:	f011 0f0e 	tst.w	r1, #14
    4212:	d1fb      	bne.n	420c <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4214:	781a      	ldrb	r2, [r3, #0]
    4216:	f012 0f02 	tst.w	r2, #2
    421a:	d153      	bne.n	42c4 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    421c:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    4220:	4628      	mov	r0, r5
    4222:	2100      	movs	r1, #0
    4224:	ea50 0201 	orrs.w	r2, r0, r1
    4228:	d14f      	bne.n	42ca <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    422a:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    422e:	d038      	beq.n	42a2 <_wdt_set_timeout_period+0xe6>
    4230:	d911      	bls.n	4256 <_wdt_set_timeout_period+0x9a>
    4232:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    4236:	d038      	beq.n	42aa <_wdt_set_timeout_period+0xee>
    4238:	d927      	bls.n	428a <_wdt_set_timeout_period+0xce>
    423a:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    423e:	d038      	beq.n	42b2 <_wdt_set_timeout_period+0xf6>
    4240:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    4244:	d037      	beq.n	42b6 <_wdt_set_timeout_period+0xfa>
    4246:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    424a:	d030      	beq.n	42ae <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    424c:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    4250:	bd70      	pop	{r4, r5, r6, pc}
    4252:	2000      	movs	r0, #0
    4254:	e7bc      	b.n	41d0 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    4256:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    425a:	d01e      	beq.n	429a <_wdt_set_timeout_period+0xde>
    425c:	d80d      	bhi.n	427a <_wdt_set_timeout_period+0xbe>
    425e:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    4262:	d02a      	beq.n	42ba <_wdt_set_timeout_period+0xfe>
    4264:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    4268:	d1f0      	bne.n	424c <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    426a:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    426c:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    426e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    4272:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    4274:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    4276:	2000      	movs	r0, #0
    4278:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    427a:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    427e:	d00e      	beq.n	429e <_wdt_set_timeout_period+0xe2>
    4280:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    4284:	d1e2      	bne.n	424c <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    4286:	2104      	movs	r1, #4
			break;
    4288:	e7f0      	b.n	426c <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    428a:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    428e:	d00a      	beq.n	42a6 <_wdt_set_timeout_period+0xea>
    4290:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    4294:	d1da      	bne.n	424c <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    4296:	2107      	movs	r1, #7
			break;
    4298:	e7e8      	b.n	426c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    429a:	2102      	movs	r1, #2
			break;
    429c:	e7e6      	b.n	426c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    429e:	2103      	movs	r1, #3
			break;
    42a0:	e7e4      	b.n	426c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    42a2:	2105      	movs	r1, #5
			break;
    42a4:	e7e2      	b.n	426c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    42a6:	2106      	movs	r1, #6
			break;
    42a8:	e7e0      	b.n	426c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    42aa:	2108      	movs	r1, #8
			break;
    42ac:	e7de      	b.n	426c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    42ae:	2109      	movs	r1, #9
			break;
    42b0:	e7dc      	b.n	426c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    42b2:	210a      	movs	r1, #10
			break;
    42b4:	e7da      	b.n	426c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    42b6:	210b      	movs	r1, #11
			break;
    42b8:	e7d8      	b.n	426c <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    42ba:	2100      	movs	r1, #0
    42bc:	e7d6      	b.n	426c <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    42be:	f06f 0010 	mvn.w	r0, #16
    42c2:	bd70      	pop	{r4, r5, r6, pc}
    42c4:	f06f 0010 	mvn.w	r0, #16
    42c8:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    42ca:	f06f 000c 	mvn.w	r0, #12
    42ce:	bd70      	pop	{r4, r5, r6, pc}
    42d0:	00008488 	.word	0x00008488
    42d4:	00002cf1 	.word	0x00002cf1

000042d8 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    42d8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    42da:	4604      	mov	r4, r0
    42dc:	b198      	cbz	r0, 4306 <_wdt_enable+0x2e>
    42de:	6800      	ldr	r0, [r0, #0]
    42e0:	3000      	adds	r0, #0
    42e2:	bf18      	it	ne
    42e4:	2001      	movne	r0, #1
    42e6:	f240 1207 	movw	r2, #263	; 0x107
    42ea:	4908      	ldr	r1, [pc, #32]	; (430c <_wdt_enable+0x34>)
    42ec:	4b08      	ldr	r3, [pc, #32]	; (4310 <_wdt_enable+0x38>)
    42ee:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    42f0:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    42f2:	6893      	ldr	r3, [r2, #8]
    42f4:	f013 0f0e 	tst.w	r3, #14
    42f8:	d1fb      	bne.n	42f2 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    42fa:	7813      	ldrb	r3, [r2, #0]
    42fc:	f043 0302 	orr.w	r3, r3, #2
    4300:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    4302:	2000      	movs	r0, #0
    4304:	bd10      	pop	{r4, pc}
    4306:	2000      	movs	r0, #0
    4308:	e7ed      	b.n	42e6 <_wdt_enable+0xe>
    430a:	bf00      	nop
    430c:	00008488 	.word	0x00008488
    4310:	00002cf1 	.word	0x00002cf1

00004314 <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    4314:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4316:	4604      	mov	r4, r0
    4318:	b1d0      	cbz	r0, 4350 <_wdt_disable+0x3c>
    431a:	6800      	ldr	r0, [r0, #0]
    431c:	3000      	adds	r0, #0
    431e:	bf18      	it	ne
    4320:	2001      	movne	r0, #1
    4322:	f44f 728a 	mov.w	r2, #276	; 0x114
    4326:	490d      	ldr	r1, [pc, #52]	; (435c <_wdt_disable+0x48>)
    4328:	4b0d      	ldr	r3, [pc, #52]	; (4360 <_wdt_disable+0x4c>)
    432a:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    432c:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    432e:	689a      	ldr	r2, [r3, #8]
    4330:	f012 0f0e 	tst.w	r2, #14
    4334:	d1fb      	bne.n	432e <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4336:	781a      	ldrb	r2, [r3, #0]
    4338:	09d2      	lsrs	r2, r2, #7
    433a:	d10b      	bne.n	4354 <_wdt_disable+0x40>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    433c:	689a      	ldr	r2, [r3, #8]
    433e:	f012 0f0e 	tst.w	r2, #14
    4342:	d1fb      	bne.n	433c <_wdt_disable+0x28>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    4344:	781a      	ldrb	r2, [r3, #0]
    4346:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    434a:	701a      	strb	r2, [r3, #0]
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    434c:	2000      	movs	r0, #0
    434e:	bd10      	pop	{r4, pc}
    4350:	2000      	movs	r0, #0
    4352:	e7e6      	b.n	4322 <_wdt_disable+0xe>
		return ERR_DENIED;
    4354:	f06f 0010 	mvn.w	r0, #16
}
    4358:	bd10      	pop	{r4, pc}
    435a:	bf00      	nop
    435c:	00008488 	.word	0x00008488
    4360:	00002cf1 	.word	0x00002cf1

00004364 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    4364:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4366:	4604      	mov	r4, r0
    4368:	b168      	cbz	r0, 4386 <_wdt_feed+0x22>
    436a:	6800      	ldr	r0, [r0, #0]
    436c:	3000      	adds	r0, #0
    436e:	bf18      	it	ne
    4370:	2001      	movne	r0, #1
    4372:	f240 1225 	movw	r2, #293	; 0x125
    4376:	4905      	ldr	r1, [pc, #20]	; (438c <_wdt_feed+0x28>)
    4378:	4b05      	ldr	r3, [pc, #20]	; (4390 <_wdt_feed+0x2c>)
    437a:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    437c:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    437e:	22a5      	movs	r2, #165	; 0xa5
    4380:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    4382:	2000      	movs	r0, #0
    4384:	bd10      	pop	{r4, pc}
    4386:	2000      	movs	r0, #0
    4388:	e7f3      	b.n	4372 <_wdt_feed+0xe>
    438a:	bf00      	nop
    438c:	00008488 	.word	0x00008488
    4390:	00002cf1 	.word	0x00002cf1

00004394 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    4394:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    4396:	2200      	movs	r2, #0
    4398:	2108      	movs	r1, #8
    439a:	2001      	movs	r0, #1
    439c:	4c10      	ldr	r4, [pc, #64]	; (43e0 <createQueuesAndSemaphores+0x4c>)
    439e:	47a0      	blx	r4
    43a0:	4d10      	ldr	r5, [pc, #64]	; (43e4 <createQueuesAndSemaphores+0x50>)
    43a2:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    43a4:	2200      	movs	r2, #0
    43a6:	2101      	movs	r1, #1
    43a8:	4608      	mov	r0, r1
    43aa:	47a0      	blx	r4
    43ac:	4b0e      	ldr	r3, [pc, #56]	; (43e8 <createQueuesAndSemaphores+0x54>)
    43ae:	6018      	str	r0, [r3, #0]
    CmdResponseQueue  = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    43b0:	2200      	movs	r2, #0
    43b2:	2108      	movs	r1, #8
    43b4:	2001      	movs	r0, #1
    43b6:	47a0      	blx	r4
    43b8:	4b0c      	ldr	r3, [pc, #48]	; (43ec <createQueuesAndSemaphores+0x58>)
    43ba:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    43bc:	682b      	ldr	r3, [r5, #0]
    43be:	b173      	cbz	r3, 43de <createQueuesAndSemaphores+0x4a>
       (AtReceiveQueue  != NULL) &&
    43c0:	4b09      	ldr	r3, [pc, #36]	; (43e8 <createQueuesAndSemaphores+0x54>)
    if((AtTransmitQueue != NULL) &&
    43c2:	681b      	ldr	r3, [r3, #0]
    43c4:	b15b      	cbz	r3, 43de <createQueuesAndSemaphores+0x4a>
       (AtReceiveQueue  != NULL) &&
    43c6:	b150      	cbz	r0, 43de <createQueuesAndSemaphores+0x4a>
	   (CmdResponseQueue != NULL))
    {
    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    43c8:	2203      	movs	r2, #3
    43ca:	2100      	movs	r1, #0
    43cc:	2001      	movs	r0, #1
    43ce:	47a0      	blx	r4
    43d0:	4b07      	ldr	r3, [pc, #28]	; (43f0 <createQueuesAndSemaphores+0x5c>)
    43d2:	6018      	str	r0, [r3, #0]
    	DebugPrintMutex        = xSemaphoreCreateMutex();
    43d4:	2001      	movs	r0, #1
    43d6:	4b07      	ldr	r3, [pc, #28]	; (43f4 <createQueuesAndSemaphores+0x60>)
    43d8:	4798      	blx	r3
    43da:	4b07      	ldr	r3, [pc, #28]	; (43f8 <createQueuesAndSemaphores+0x64>)
    43dc:	6018      	str	r0, [r3, #0]
    }
    else
    {
    	status = false;
    }
}
    43de:	bd38      	pop	{r3, r4, r5, pc}
    43e0:	00004cb9 	.word	0x00004cb9
    43e4:	20003480 	.word	0x20003480
    43e8:	20003490 	.word	0x20003490
    43ec:	20003460 	.word	0x20003460
    43f0:	2000348c 	.word	0x2000348c
    43f4:	00004eed 	.word	0x00004eed
    43f8:	20003488 	.word	0x20003488

000043fc <main>:
{
    43fc:	b580      	push	{r7, lr}
    43fe:	b082      	sub	sp, #8
    atmel_start_init();	
    4400:	4b28      	ldr	r3, [pc, #160]	; (44a4 <main+0xa8>)
    4402:	4798      	blx	r3
    SensorTaskStatus = xTaskCreate( SensorTask, "SensorTask", 150, NULL, 2, &xSensorTaskHandle );
    4404:	4b28      	ldr	r3, [pc, #160]	; (44a8 <main+0xac>)
    4406:	9301      	str	r3, [sp, #4]
    4408:	2702      	movs	r7, #2
    440a:	9700      	str	r7, [sp, #0]
    440c:	2300      	movs	r3, #0
    440e:	2296      	movs	r2, #150	; 0x96
    4410:	4926      	ldr	r1, [pc, #152]	; (44ac <main+0xb0>)
    4412:	4827      	ldr	r0, [pc, #156]	; (44b0 <main+0xb4>)
    4414:	4d27      	ldr	r5, [pc, #156]	; (44b4 <main+0xb8>)
    4416:	47a8      	blx	r5
    4418:	4c27      	ldr	r4, [pc, #156]	; (44b8 <main+0xbc>)
    441a:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTxTask", 150, NULL, 1, &xModemTxTaskHandle );
    441c:	4b27      	ldr	r3, [pc, #156]	; (44bc <main+0xc0>)
    441e:	9301      	str	r3, [sp, #4]
    4420:	2601      	movs	r6, #1
    4422:	9600      	str	r6, [sp, #0]
    4424:	2300      	movs	r3, #0
    4426:	2296      	movs	r2, #150	; 0x96
    4428:	4925      	ldr	r1, [pc, #148]	; (44c0 <main+0xc4>)
    442a:	4826      	ldr	r0, [pc, #152]	; (44c4 <main+0xc8>)
    442c:	47a8      	blx	r5
    442e:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    4430:	4b25      	ldr	r3, [pc, #148]	; (44c8 <main+0xcc>)
    4432:	9301      	str	r3, [sp, #4]
    4434:	9700      	str	r7, [sp, #0]
    4436:	2300      	movs	r3, #0
    4438:	2296      	movs	r2, #150	; 0x96
    443a:	4924      	ldr	r1, [pc, #144]	; (44cc <main+0xd0>)
    443c:	4824      	ldr	r0, [pc, #144]	; (44d0 <main+0xd4>)
    443e:	47a8      	blx	r5
    4440:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    4442:	4b24      	ldr	r3, [pc, #144]	; (44d4 <main+0xd8>)
    4444:	9301      	str	r3, [sp, #4]
    4446:	9600      	str	r6, [sp, #0]
    4448:	2300      	movs	r3, #0
    444a:	2296      	movs	r2, #150	; 0x96
    444c:	4922      	ldr	r1, [pc, #136]	; (44d8 <main+0xdc>)
    444e:	4823      	ldr	r0, [pc, #140]	; (44dc <main+0xe0>)
    4450:	47a8      	blx	r5
    4452:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    4454:	4b22      	ldr	r3, [pc, #136]	; (44e0 <main+0xe4>)
    4456:	9301      	str	r3, [sp, #4]
    4458:	9600      	str	r6, [sp, #0]
    445a:	2300      	movs	r3, #0
    445c:	2296      	movs	r2, #150	; 0x96
    445e:	4921      	ldr	r1, [pc, #132]	; (44e4 <main+0xe8>)
    4460:	4821      	ldr	r0, [pc, #132]	; (44e8 <main+0xec>)
    4462:	47a8      	blx	r5
    if((SensorTaskStatus == pdPASS) &&
    4464:	6823      	ldr	r3, [r4, #0]
    4466:	42b3      	cmp	r3, r6
    4468:	d006      	beq.n	4478 <main+0x7c>
    	DEBUG_PRINT("Failed to create tasks");
    446a:	4820      	ldr	r0, [pc, #128]	; (44ec <main+0xf0>)
    446c:	4b20      	ldr	r3, [pc, #128]	; (44f0 <main+0xf4>)
    446e:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    4470:	4820      	ldr	r0, [pc, #128]	; (44f4 <main+0xf8>)
    4472:	4b1f      	ldr	r3, [pc, #124]	; (44f0 <main+0xf4>)
    4474:	4798      	blx	r3
    4476:	e7fe      	b.n	4476 <main+0x7a>
    if((SensorTaskStatus == pdPASS) &&
    4478:	68e3      	ldr	r3, [r4, #12]
    447a:	42b3      	cmp	r3, r6
    447c:	d1f5      	bne.n	446a <main+0x6e>
       (ModemProcessTaskStatus == pdPASS) &&
    447e:	6863      	ldr	r3, [r4, #4]
    4480:	42b3      	cmp	r3, r6
    4482:	d1f2      	bne.n	446a <main+0x6e>
       (ModemTxTaskStatus == pdPASS) &&
    4484:	68a3      	ldr	r3, [r4, #8]
    4486:	42b3      	cmp	r3, r6
    4488:	d1ef      	bne.n	446a <main+0x6e>
       (ModemRxTaskStatus == pdPASS) &&
    448a:	42b0      	cmp	r0, r6
    448c:	d1ed      	bne.n	446a <main+0x6e>
    	if(false != createQueuesAndSemaphores())
    448e:	4b1a      	ldr	r3, [pc, #104]	; (44f8 <main+0xfc>)
    4490:	4798      	blx	r3
    4492:	b110      	cbz	r0, 449a <main+0x9e>
    		vTaskStartScheduler();
    4494:	4b19      	ldr	r3, [pc, #100]	; (44fc <main+0x100>)
    4496:	4798      	blx	r3
    4498:	e7ea      	b.n	4470 <main+0x74>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    449a:	4819      	ldr	r0, [pc, #100]	; (4500 <main+0x104>)
    449c:	4b14      	ldr	r3, [pc, #80]	; (44f0 <main+0xf4>)
    449e:	4798      	blx	r3
    44a0:	e7e6      	b.n	4470 <main+0x74>
    44a2:	bf00      	nop
    44a4:	000020ad 	.word	0x000020ad
    44a8:	20003484 	.word	0x20003484
    44ac:	000084a0 	.word	0x000084a0
    44b0:	00000335 	.word	0x00000335
    44b4:	000054e9 	.word	0x000054e9
    44b8:	20000b00 	.word	0x20000b00
    44bc:	20003464 	.word	0x20003464
    44c0:	000084ac 	.word	0x000084ac
    44c4:	00001dc9 	.word	0x00001dc9
    44c8:	20003478 	.word	0x20003478
    44cc:	000084b8 	.word	0x000084b8
    44d0:	00001d75 	.word	0x00001d75
    44d4:	2000346c 	.word	0x2000346c
    44d8:	000084c4 	.word	0x000084c4
    44dc:	00001c25 	.word	0x00001c25
    44e0:	20003470 	.word	0x20003470
    44e4:	000084d8 	.word	0x000084d8
    44e8:	0000178d 	.word	0x0000178d
    44ec:	00008508 	.word	0x00008508
    44f0:	00001f55 	.word	0x00001f55
    44f4:	00008520 	.word	0x00008520
    44f8:	00004395 	.word	0x00004395
    44fc:	000056c5 	.word	0x000056c5
    4500:	000084e8 	.word	0x000084e8

00004504 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    4504:	f100 0308 	add.w	r3, r0, #8
    4508:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    450a:	f04f 32ff 	mov.w	r2, #4294967295
    450e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    4510:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    4512:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    4514:	2300      	movs	r3, #0
    4516:	6003      	str	r3, [r0, #0]
    4518:	4770      	bx	lr

0000451a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    451a:	2300      	movs	r3, #0
    451c:	6103      	str	r3, [r0, #16]
    451e:	4770      	bx	lr

00004520 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    4520:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    4522:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    4524:	689a      	ldr	r2, [r3, #8]
    4526:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    4528:	689a      	ldr	r2, [r3, #8]
    452a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    452c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    452e:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    4530:	6803      	ldr	r3, [r0, #0]
    4532:	3301      	adds	r3, #1
    4534:	6003      	str	r3, [r0, #0]
    4536:	4770      	bx	lr

00004538 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    4538:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    453a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    453c:	f1b5 3fff 	cmp.w	r5, #4294967295
    4540:	d002      	beq.n	4548 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    4542:	f100 0208 	add.w	r2, r0, #8
    4546:	e002      	b.n	454e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    4548:	6902      	ldr	r2, [r0, #16]
    454a:	e004      	b.n	4556 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    454c:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    454e:	6853      	ldr	r3, [r2, #4]
    4550:	681c      	ldr	r4, [r3, #0]
    4552:	42a5      	cmp	r5, r4
    4554:	d2fa      	bcs.n	454c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    4556:	6853      	ldr	r3, [r2, #4]
    4558:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    455a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    455c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    455e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    4560:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    4562:	6803      	ldr	r3, [r0, #0]
    4564:	3301      	adds	r3, #1
    4566:	6003      	str	r3, [r0, #0]
}
    4568:	bc30      	pop	{r4, r5}
    456a:	4770      	bx	lr

0000456c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    456c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    456e:	6842      	ldr	r2, [r0, #4]
    4570:	6881      	ldr	r1, [r0, #8]
    4572:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4574:	6882      	ldr	r2, [r0, #8]
    4576:	6841      	ldr	r1, [r0, #4]
    4578:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    457a:	685a      	ldr	r2, [r3, #4]
    457c:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    457e:	bf04      	itt	eq
    4580:	6882      	ldreq	r2, [r0, #8]
    4582:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    4584:	2200      	movs	r2, #0
    4586:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    4588:	681a      	ldr	r2, [r3, #0]
    458a:	3a01      	subs	r2, #1
    458c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    458e:	6818      	ldr	r0, [r3, #0]
}
    4590:	4770      	bx	lr
	...

00004594 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    4594:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    4596:	2300      	movs	r3, #0
    4598:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    459a:	4b0d      	ldr	r3, [pc, #52]	; (45d0 <prvTaskExitError+0x3c>)
    459c:	681b      	ldr	r3, [r3, #0]
    459e:	f1b3 3fff 	cmp.w	r3, #4294967295
    45a2:	d008      	beq.n	45b6 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    45a4:	f04f 0380 	mov.w	r3, #128	; 0x80
    45a8:	f383 8811 	msr	BASEPRI, r3
    45ac:	f3bf 8f6f 	isb	sy
    45b0:	f3bf 8f4f 	dsb	sy
    45b4:	e7fe      	b.n	45b4 <prvTaskExitError+0x20>
    45b6:	f04f 0380 	mov.w	r3, #128	; 0x80
    45ba:	f383 8811 	msr	BASEPRI, r3
    45be:	f3bf 8f6f 	isb	sy
    45c2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    45c6:	9b01      	ldr	r3, [sp, #4]
    45c8:	2b00      	cmp	r3, #0
    45ca:	d0fc      	beq.n	45c6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    45cc:	b002      	add	sp, #8
    45ce:	4770      	bx	lr
    45d0:	20000124 	.word	0x20000124

000045d4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    45d4:	4808      	ldr	r0, [pc, #32]	; (45f8 <prvPortStartFirstTask+0x24>)
    45d6:	6800      	ldr	r0, [r0, #0]
    45d8:	6800      	ldr	r0, [r0, #0]
    45da:	f380 8808 	msr	MSP, r0
    45de:	f04f 0000 	mov.w	r0, #0
    45e2:	f380 8814 	msr	CONTROL, r0
    45e6:	b662      	cpsie	i
    45e8:	b661      	cpsie	f
    45ea:	f3bf 8f4f 	dsb	sy
    45ee:	f3bf 8f6f 	isb	sy
    45f2:	df00      	svc	0
    45f4:	bf00      	nop
    45f6:	0000      	.short	0x0000
    45f8:	e000ed08 	.word	0xe000ed08

000045fc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    45fc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 460c <vPortEnableVFP+0x10>
    4600:	6801      	ldr	r1, [r0, #0]
    4602:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4606:	6001      	str	r1, [r0, #0]
    4608:	4770      	bx	lr
    460a:	0000      	.short	0x0000
    460c:	e000ed88 	.word	0xe000ed88

00004610 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    4610:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4614:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    4618:	f021 0101 	bic.w	r1, r1, #1
    461c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    4620:	4b05      	ldr	r3, [pc, #20]	; (4638 <pxPortInitialiseStack+0x28>)
    4622:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    4626:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    462a:	f06f 0302 	mvn.w	r3, #2
    462e:	f840 3c24 	str.w	r3, [r0, #-36]
}
    4632:	3844      	subs	r0, #68	; 0x44
    4634:	4770      	bx	lr
    4636:	bf00      	nop
    4638:	00004595 	.word	0x00004595
    463c:	00000000 	.word	0x00000000

00004640 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    4640:	4b07      	ldr	r3, [pc, #28]	; (4660 <pxCurrentTCBConst2>)
    4642:	6819      	ldr	r1, [r3, #0]
    4644:	6808      	ldr	r0, [r1, #0]
    4646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    464a:	f380 8809 	msr	PSP, r0
    464e:	f3bf 8f6f 	isb	sy
    4652:	f04f 0000 	mov.w	r0, #0
    4656:	f380 8811 	msr	BASEPRI, r0
    465a:	4770      	bx	lr
    465c:	f3af 8000 	nop.w

00004660 <pxCurrentTCBConst2>:
    4660:	200033c4 	.word	0x200033c4

00004664 <vPortEnterCritical>:
    4664:	f04f 0380 	mov.w	r3, #128	; 0x80
    4668:	f383 8811 	msr	BASEPRI, r3
    466c:	f3bf 8f6f 	isb	sy
    4670:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    4674:	4a0a      	ldr	r2, [pc, #40]	; (46a0 <vPortEnterCritical+0x3c>)
    4676:	6813      	ldr	r3, [r2, #0]
    4678:	3301      	adds	r3, #1
    467a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    467c:	2b01      	cmp	r3, #1
    467e:	d10d      	bne.n	469c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    4680:	4b08      	ldr	r3, [pc, #32]	; (46a4 <vPortEnterCritical+0x40>)
    4682:	681b      	ldr	r3, [r3, #0]
    4684:	f013 0fff 	tst.w	r3, #255	; 0xff
    4688:	d008      	beq.n	469c <vPortEnterCritical+0x38>
    468a:	f04f 0380 	mov.w	r3, #128	; 0x80
    468e:	f383 8811 	msr	BASEPRI, r3
    4692:	f3bf 8f6f 	isb	sy
    4696:	f3bf 8f4f 	dsb	sy
    469a:	e7fe      	b.n	469a <vPortEnterCritical+0x36>
    469c:	4770      	bx	lr
    469e:	bf00      	nop
    46a0:	20000124 	.word	0x20000124
    46a4:	e000ed04 	.word	0xe000ed04

000046a8 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    46a8:	4b09      	ldr	r3, [pc, #36]	; (46d0 <vPortExitCritical+0x28>)
    46aa:	681b      	ldr	r3, [r3, #0]
    46ac:	b943      	cbnz	r3, 46c0 <vPortExitCritical+0x18>
    46ae:	f04f 0380 	mov.w	r3, #128	; 0x80
    46b2:	f383 8811 	msr	BASEPRI, r3
    46b6:	f3bf 8f6f 	isb	sy
    46ba:	f3bf 8f4f 	dsb	sy
    46be:	e7fe      	b.n	46be <vPortExitCritical+0x16>
	uxCriticalNesting--;
    46c0:	3b01      	subs	r3, #1
    46c2:	4a03      	ldr	r2, [pc, #12]	; (46d0 <vPortExitCritical+0x28>)
    46c4:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    46c6:	b90b      	cbnz	r3, 46cc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    46c8:	f383 8811 	msr	BASEPRI, r3
    46cc:	4770      	bx	lr
    46ce:	bf00      	nop
    46d0:	20000124 	.word	0x20000124
	...

000046e0 <PendSV_Handler>:
	__asm volatile(
    46e0:	f3ef 8009 	mrs	r0, PSP
    46e4:	f3bf 8f6f 	isb	sy
    46e8:	4b15      	ldr	r3, [pc, #84]	; (4740 <pxCurrentTCBConst>)
    46ea:	681a      	ldr	r2, [r3, #0]
    46ec:	f01e 0f10 	tst.w	lr, #16
    46f0:	bf08      	it	eq
    46f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    46f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    46fa:	6010      	str	r0, [r2, #0]
    46fc:	e92d 0009 	stmdb	sp!, {r0, r3}
    4700:	f04f 0080 	mov.w	r0, #128	; 0x80
    4704:	f380 8811 	msr	BASEPRI, r0
    4708:	f3bf 8f4f 	dsb	sy
    470c:	f3bf 8f6f 	isb	sy
    4710:	f001 f9c8 	bl	5aa4 <vTaskSwitchContext>
    4714:	f04f 0000 	mov.w	r0, #0
    4718:	f380 8811 	msr	BASEPRI, r0
    471c:	bc09      	pop	{r0, r3}
    471e:	6819      	ldr	r1, [r3, #0]
    4720:	6808      	ldr	r0, [r1, #0]
    4722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4726:	f01e 0f10 	tst.w	lr, #16
    472a:	bf08      	it	eq
    472c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4730:	f380 8809 	msr	PSP, r0
    4734:	f3bf 8f6f 	isb	sy
    4738:	4770      	bx	lr
    473a:	bf00      	nop
    473c:	f3af 8000 	nop.w

00004740 <pxCurrentTCBConst>:
    4740:	200033c4 	.word	0x200033c4

00004744 <SysTick_Handler>:
{
    4744:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    4746:	f04f 0380 	mov.w	r3, #128	; 0x80
    474a:	f383 8811 	msr	BASEPRI, r3
    474e:	f3bf 8f6f 	isb	sy
    4752:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    4756:	4b05      	ldr	r3, [pc, #20]	; (476c <SysTick_Handler+0x28>)
    4758:	4798      	blx	r3
    475a:	b118      	cbz	r0, 4764 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    475c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4760:	4b03      	ldr	r3, [pc, #12]	; (4770 <SysTick_Handler+0x2c>)
    4762:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4764:	2300      	movs	r3, #0
    4766:	f383 8811 	msr	BASEPRI, r3
    476a:	bd08      	pop	{r3, pc}
    476c:	0000576d 	.word	0x0000576d
    4770:	e000ed04 	.word	0xe000ed04

00004774 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    4774:	4b05      	ldr	r3, [pc, #20]	; (478c <vPortSetupTimerInterrupt+0x18>)
    4776:	2200      	movs	r2, #0
    4778:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    477a:	4905      	ldr	r1, [pc, #20]	; (4790 <vPortSetupTimerInterrupt+0x1c>)
    477c:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    477e:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    4782:	4a04      	ldr	r2, [pc, #16]	; (4794 <vPortSetupTimerInterrupt+0x20>)
    4784:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    4786:	2207      	movs	r2, #7
    4788:	601a      	str	r2, [r3, #0]
    478a:	4770      	bx	lr
    478c:	e000e010 	.word	0xe000e010
    4790:	e000e018 	.word	0xe000e018
    4794:	e000e014 	.word	0xe000e014

00004798 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    4798:	4b3b      	ldr	r3, [pc, #236]	; (4888 <xPortStartScheduler+0xf0>)
    479a:	681a      	ldr	r2, [r3, #0]
    479c:	4b3b      	ldr	r3, [pc, #236]	; (488c <xPortStartScheduler+0xf4>)
    479e:	429a      	cmp	r2, r3
    47a0:	d108      	bne.n	47b4 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    47a2:	f04f 0380 	mov.w	r3, #128	; 0x80
    47a6:	f383 8811 	msr	BASEPRI, r3
    47aa:	f3bf 8f6f 	isb	sy
    47ae:	f3bf 8f4f 	dsb	sy
    47b2:	e7fe      	b.n	47b2 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    47b4:	4b34      	ldr	r3, [pc, #208]	; (4888 <xPortStartScheduler+0xf0>)
    47b6:	681a      	ldr	r2, [r3, #0]
    47b8:	4b35      	ldr	r3, [pc, #212]	; (4890 <xPortStartScheduler+0xf8>)
    47ba:	429a      	cmp	r2, r3
    47bc:	d108      	bne.n	47d0 <xPortStartScheduler+0x38>
    47be:	f04f 0380 	mov.w	r3, #128	; 0x80
    47c2:	f383 8811 	msr	BASEPRI, r3
    47c6:	f3bf 8f6f 	isb	sy
    47ca:	f3bf 8f4f 	dsb	sy
    47ce:	e7fe      	b.n	47ce <xPortStartScheduler+0x36>
{
    47d0:	b510      	push	{r4, lr}
    47d2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    47d4:	4b2f      	ldr	r3, [pc, #188]	; (4894 <xPortStartScheduler+0xfc>)
    47d6:	781a      	ldrb	r2, [r3, #0]
    47d8:	b2d2      	uxtb	r2, r2
    47da:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    47dc:	22ff      	movs	r2, #255	; 0xff
    47de:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    47e0:	781b      	ldrb	r3, [r3, #0]
    47e2:	b2db      	uxtb	r3, r3
    47e4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    47e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    47ec:	4a2a      	ldr	r2, [pc, #168]	; (4898 <xPortStartScheduler+0x100>)
    47ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    47f2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    47f4:	2307      	movs	r3, #7
    47f6:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    47f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    47fc:	f013 0f80 	tst.w	r3, #128	; 0x80
    4800:	d012      	beq.n	4828 <xPortStartScheduler+0x90>
    4802:	2306      	movs	r3, #6
    4804:	e000      	b.n	4808 <xPortStartScheduler+0x70>
    4806:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    4808:	f89d 2003 	ldrb.w	r2, [sp, #3]
    480c:	0052      	lsls	r2, r2, #1
    480e:	b2d2      	uxtb	r2, r2
    4810:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4814:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4818:	1e59      	subs	r1, r3, #1
    481a:	f012 0f80 	tst.w	r2, #128	; 0x80
    481e:	d1f2      	bne.n	4806 <xPortStartScheduler+0x6e>
    4820:	4a1d      	ldr	r2, [pc, #116]	; (4898 <xPortStartScheduler+0x100>)
    4822:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    4824:	2b04      	cmp	r3, #4
    4826:	d008      	beq.n	483a <xPortStartScheduler+0xa2>
    4828:	f04f 0380 	mov.w	r3, #128	; 0x80
    482c:	f383 8811 	msr	BASEPRI, r3
    4830:	f3bf 8f6f 	isb	sy
    4834:	f3bf 8f4f 	dsb	sy
    4838:	e7fe      	b.n	4838 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    483a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    483c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4840:	4a15      	ldr	r2, [pc, #84]	; (4898 <xPortStartScheduler+0x100>)
    4842:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    4844:	9b01      	ldr	r3, [sp, #4]
    4846:	b2db      	uxtb	r3, r3
    4848:	4a12      	ldr	r2, [pc, #72]	; (4894 <xPortStartScheduler+0xfc>)
    484a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    484c:	4b13      	ldr	r3, [pc, #76]	; (489c <xPortStartScheduler+0x104>)
    484e:	681a      	ldr	r2, [r3, #0]
    4850:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    4854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    4856:	681a      	ldr	r2, [r3, #0]
    4858:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    485c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    485e:	4b10      	ldr	r3, [pc, #64]	; (48a0 <xPortStartScheduler+0x108>)
    4860:	4798      	blx	r3
	uxCriticalNesting = 0;
    4862:	2400      	movs	r4, #0
    4864:	4b0f      	ldr	r3, [pc, #60]	; (48a4 <xPortStartScheduler+0x10c>)
    4866:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    4868:	4b0f      	ldr	r3, [pc, #60]	; (48a8 <xPortStartScheduler+0x110>)
    486a:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    486c:	4a0f      	ldr	r2, [pc, #60]	; (48ac <xPortStartScheduler+0x114>)
    486e:	6813      	ldr	r3, [r2, #0]
    4870:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4874:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    4876:	4b0e      	ldr	r3, [pc, #56]	; (48b0 <xPortStartScheduler+0x118>)
    4878:	4798      	blx	r3
	vTaskSwitchContext();
    487a:	4b0e      	ldr	r3, [pc, #56]	; (48b4 <xPortStartScheduler+0x11c>)
    487c:	4798      	blx	r3
	prvTaskExitError();
    487e:	4b0e      	ldr	r3, [pc, #56]	; (48b8 <xPortStartScheduler+0x120>)
    4880:	4798      	blx	r3
}
    4882:	4620      	mov	r0, r4
    4884:	b002      	add	sp, #8
    4886:	bd10      	pop	{r4, pc}
    4888:	e000ed00 	.word	0xe000ed00
    488c:	410fc271 	.word	0x410fc271
    4890:	410fc270 	.word	0x410fc270
    4894:	e000e400 	.word	0xe000e400
    4898:	20000b10 	.word	0x20000b10
    489c:	e000ed20 	.word	0xe000ed20
    48a0:	00004775 	.word	0x00004775
    48a4:	20000124 	.word	0x20000124
    48a8:	000045fd 	.word	0x000045fd
    48ac:	e000ef34 	.word	0xe000ef34
    48b0:	000045d5 	.word	0x000045d5
    48b4:	00005aa5 	.word	0x00005aa5
    48b8:	00004595 	.word	0x00004595

000048bc <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    48bc:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    48c0:	2b0f      	cmp	r3, #15
    48c2:	d90f      	bls.n	48e4 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    48c4:	4a10      	ldr	r2, [pc, #64]	; (4908 <vPortValidateInterruptPriority+0x4c>)
    48c6:	5c9b      	ldrb	r3, [r3, r2]
    48c8:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    48ca:	4a10      	ldr	r2, [pc, #64]	; (490c <vPortValidateInterruptPriority+0x50>)
    48cc:	7812      	ldrb	r2, [r2, #0]
    48ce:	429a      	cmp	r2, r3
    48d0:	d908      	bls.n	48e4 <vPortValidateInterruptPriority+0x28>
    48d2:	f04f 0380 	mov.w	r3, #128	; 0x80
    48d6:	f383 8811 	msr	BASEPRI, r3
    48da:	f3bf 8f6f 	isb	sy
    48de:	f3bf 8f4f 	dsb	sy
    48e2:	e7fe      	b.n	48e2 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    48e4:	4b0a      	ldr	r3, [pc, #40]	; (4910 <vPortValidateInterruptPriority+0x54>)
    48e6:	681b      	ldr	r3, [r3, #0]
    48e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    48ec:	4a07      	ldr	r2, [pc, #28]	; (490c <vPortValidateInterruptPriority+0x50>)
    48ee:	6852      	ldr	r2, [r2, #4]
    48f0:	4293      	cmp	r3, r2
    48f2:	d908      	bls.n	4906 <vPortValidateInterruptPriority+0x4a>
    48f4:	f04f 0380 	mov.w	r3, #128	; 0x80
    48f8:	f383 8811 	msr	BASEPRI, r3
    48fc:	f3bf 8f6f 	isb	sy
    4900:	f3bf 8f4f 	dsb	sy
    4904:	e7fe      	b.n	4904 <vPortValidateInterruptPriority+0x48>
    4906:	4770      	bx	lr
    4908:	e000e3f0 	.word	0xe000e3f0
    490c:	20000b10 	.word	0x20000b10
    4910:	e000ed0c 	.word	0xe000ed0c

00004914 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4914:	b570      	push	{r4, r5, r6, lr}
    4916:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    4918:	4b2d      	ldr	r3, [pc, #180]	; (49d0 <pvPortMalloc+0xbc>)
    491a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    491c:	4b2d      	ldr	r3, [pc, #180]	; (49d4 <pvPortMalloc+0xc0>)
    491e:	689b      	ldr	r3, [r3, #8]
    4920:	b183      	cbz	r3, 4944 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    4922:	2c00      	cmp	r4, #0
    4924:	d04d      	beq.n	49c2 <pvPortMalloc+0xae>
		{
			xWantedSize += heapSTRUCT_SIZE;
    4926:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    4928:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    492c:	bf1c      	itt	ne
    492e:	f024 0407 	bicne.w	r4, r4, #7
    4932:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    4934:	1e62      	subs	r2, r4, #1
    4936:	f242 73f6 	movw	r3, #10230	; 0x27f6
    493a:	429a      	cmp	r2, r3
    493c:	d843      	bhi.n	49c6 <pvPortMalloc+0xb2>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    493e:	4925      	ldr	r1, [pc, #148]	; (49d4 <pvPortMalloc+0xc0>)
    4940:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    4942:	e017      	b.n	4974 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    4944:	4923      	ldr	r1, [pc, #140]	; (49d4 <pvPortMalloc+0xc0>)
    4946:	f101 0314 	add.w	r3, r1, #20
    494a:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    494e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    4950:	2500      	movs	r5, #0
    4952:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    4954:	4a20      	ldr	r2, [pc, #128]	; (49d8 <pvPortMalloc+0xc4>)
    4956:	f242 70f8 	movw	r0, #10232	; 0x27f8
    495a:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    495e:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    4962:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    4964:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    4968:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    496a:	2301      	movs	r3, #1
    496c:	608b      	str	r3, [r1, #8]
    496e:	e7d8      	b.n	4922 <pvPortMalloc+0xe>
    4970:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    4972:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    4974:	685a      	ldr	r2, [r3, #4]
    4976:	4294      	cmp	r4, r2
    4978:	d902      	bls.n	4980 <pvPortMalloc+0x6c>
    497a:	681a      	ldr	r2, [r3, #0]
    497c:	2a00      	cmp	r2, #0
    497e:	d1f7      	bne.n	4970 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    4980:	4a16      	ldr	r2, [pc, #88]	; (49dc <pvPortMalloc+0xc8>)
    4982:	4293      	cmp	r3, r2
    4984:	d021      	beq.n	49ca <pvPortMalloc+0xb6>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    4986:	680d      	ldr	r5, [r1, #0]
    4988:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    498a:	681a      	ldr	r2, [r3, #0]
    498c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    498e:	685a      	ldr	r2, [r3, #4]
    4990:	1b12      	subs	r2, r2, r4
    4992:	2a10      	cmp	r2, #16
    4994:	d90c      	bls.n	49b0 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    4996:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    4998:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    499a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    499c:	6874      	ldr	r4, [r6, #4]
    499e:	490d      	ldr	r1, [pc, #52]	; (49d4 <pvPortMalloc+0xc0>)
    49a0:	e000      	b.n	49a4 <pvPortMalloc+0x90>
    49a2:	4611      	mov	r1, r2
    49a4:	680a      	ldr	r2, [r1, #0]
    49a6:	6850      	ldr	r0, [r2, #4]
    49a8:	4284      	cmp	r4, r0
    49aa:	d8fa      	bhi.n	49a2 <pvPortMalloc+0x8e>
    49ac:	6032      	str	r2, [r6, #0]
    49ae:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    49b0:	490b      	ldr	r1, [pc, #44]	; (49e0 <pvPortMalloc+0xcc>)
    49b2:	680a      	ldr	r2, [r1, #0]
    49b4:	685b      	ldr	r3, [r3, #4]
    49b6:	1ad2      	subs	r2, r2, r3
    49b8:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    49ba:	4b0a      	ldr	r3, [pc, #40]	; (49e4 <pvPortMalloc+0xd0>)
    49bc:	4798      	blx	r3
}
    49be:	4628      	mov	r0, r5
    49c0:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
    49c2:	2500      	movs	r5, #0
    49c4:	e7f9      	b.n	49ba <pvPortMalloc+0xa6>
    49c6:	2500      	movs	r5, #0
    49c8:	e7f7      	b.n	49ba <pvPortMalloc+0xa6>
    49ca:	2500      	movs	r5, #0
    49cc:	e7f5      	b.n	49ba <pvPortMalloc+0xa6>
    49ce:	bf00      	nop
    49d0:	0000574d 	.word	0x0000574d
    49d4:	20000b18 	.word	0x20000b18
    49d8:	20002d08 	.word	0x20002d08
    49dc:	20003324 	.word	0x20003324
    49e0:	20000128 	.word	0x20000128
    49e4:	00005895 	.word	0x00005895

000049e8 <vPortFree>:
	if( pv != NULL )
    49e8:	b1d0      	cbz	r0, 4a20 <vPortFree+0x38>
{
    49ea:	b570      	push	{r4, r5, r6, lr}
    49ec:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    49ee:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    49f2:	4b0c      	ldr	r3, [pc, #48]	; (4a24 <vPortFree+0x3c>)
    49f4:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    49f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
    49fa:	4a0b      	ldr	r2, [pc, #44]	; (4a28 <vPortFree+0x40>)
    49fc:	e000      	b.n	4a00 <vPortFree+0x18>
    49fe:	461a      	mov	r2, r3
    4a00:	6813      	ldr	r3, [r2, #0]
    4a02:	6859      	ldr	r1, [r3, #4]
    4a04:	428c      	cmp	r4, r1
    4a06:	d8fa      	bhi.n	49fe <vPortFree+0x16>
    4a08:	f845 3c08 	str.w	r3, [r5, #-8]
    4a0c:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    4a0e:	4a07      	ldr	r2, [pc, #28]	; (4a2c <vPortFree+0x44>)
    4a10:	f855 3c04 	ldr.w	r3, [r5, #-4]
    4a14:	6811      	ldr	r1, [r2, #0]
    4a16:	440b      	add	r3, r1
    4a18:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    4a1a:	4b05      	ldr	r3, [pc, #20]	; (4a30 <vPortFree+0x48>)
    4a1c:	4798      	blx	r3
    4a1e:	bd70      	pop	{r4, r5, r6, pc}
    4a20:	4770      	bx	lr
    4a22:	bf00      	nop
    4a24:	0000574d 	.word	0x0000574d
    4a28:	20000b18 	.word	0x20000b18
    4a2c:	20000128 	.word	0x20000128
    4a30:	00005895 	.word	0x00005895

00004a34 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    4a34:	b510      	push	{r4, lr}
    4a36:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    4a38:	4b04      	ldr	r3, [pc, #16]	; (4a4c <prvIsQueueEmpty+0x18>)
    4a3a:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    4a3c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    4a3e:	4b04      	ldr	r3, [pc, #16]	; (4a50 <prvIsQueueEmpty+0x1c>)
    4a40:	4798      	blx	r3

	return xReturn;
}
    4a42:	fab4 f084 	clz	r0, r4
    4a46:	0940      	lsrs	r0, r0, #5
    4a48:	bd10      	pop	{r4, pc}
    4a4a:	bf00      	nop
    4a4c:	00004665 	.word	0x00004665
    4a50:	000046a9 	.word	0x000046a9

00004a54 <prvCopyDataToQueue>:
{
    4a54:	b570      	push	{r4, r5, r6, lr}
    4a56:	4604      	mov	r4, r0
    4a58:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4a5a:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    4a5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4a5e:	b952      	cbnz	r2, 4a76 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4a60:	6803      	ldr	r3, [r0, #0]
    4a62:	2b00      	cmp	r3, #0
    4a64:	d12a      	bne.n	4abc <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    4a66:	6840      	ldr	r0, [r0, #4]
    4a68:	4b18      	ldr	r3, [pc, #96]	; (4acc <prvCopyDataToQueue+0x78>)
    4a6a:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    4a6c:	2300      	movs	r3, #0
    4a6e:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    4a70:	3501      	adds	r5, #1
    4a72:	63a5      	str	r5, [r4, #56]	; 0x38
}
    4a74:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    4a76:	b96e      	cbnz	r6, 4a94 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    4a78:	6880      	ldr	r0, [r0, #8]
    4a7a:	4b15      	ldr	r3, [pc, #84]	; (4ad0 <prvCopyDataToQueue+0x7c>)
    4a7c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    4a7e:	68a3      	ldr	r3, [r4, #8]
    4a80:	6c22      	ldr	r2, [r4, #64]	; 0x40
    4a82:	4413      	add	r3, r2
    4a84:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    4a86:	6862      	ldr	r2, [r4, #4]
    4a88:	4293      	cmp	r3, r2
    4a8a:	d319      	bcc.n	4ac0 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    4a8c:	6823      	ldr	r3, [r4, #0]
    4a8e:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    4a90:	2000      	movs	r0, #0
    4a92:	e7ed      	b.n	4a70 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    4a94:	68c0      	ldr	r0, [r0, #12]
    4a96:	4b0e      	ldr	r3, [pc, #56]	; (4ad0 <prvCopyDataToQueue+0x7c>)
    4a98:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    4a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    4a9c:	425b      	negs	r3, r3
    4a9e:	68e2      	ldr	r2, [r4, #12]
    4aa0:	441a      	add	r2, r3
    4aa2:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    4aa4:	6821      	ldr	r1, [r4, #0]
    4aa6:	428a      	cmp	r2, r1
    4aa8:	d202      	bcs.n	4ab0 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    4aaa:	6862      	ldr	r2, [r4, #4]
    4aac:	4413      	add	r3, r2
    4aae:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    4ab0:	2e02      	cmp	r6, #2
    4ab2:	d107      	bne.n	4ac4 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    4ab4:	b145      	cbz	r5, 4ac8 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    4ab6:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    4ab8:	2000      	movs	r0, #0
    4aba:	e7d9      	b.n	4a70 <prvCopyDataToQueue+0x1c>
    4abc:	2000      	movs	r0, #0
    4abe:	e7d7      	b.n	4a70 <prvCopyDataToQueue+0x1c>
    4ac0:	2000      	movs	r0, #0
    4ac2:	e7d5      	b.n	4a70 <prvCopyDataToQueue+0x1c>
    4ac4:	2000      	movs	r0, #0
    4ac6:	e7d3      	b.n	4a70 <prvCopyDataToQueue+0x1c>
    4ac8:	2000      	movs	r0, #0
    4aca:	e7d1      	b.n	4a70 <prvCopyDataToQueue+0x1c>
    4acc:	00005de5 	.word	0x00005de5
    4ad0:	000065a7 	.word	0x000065a7

00004ad4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    4ad4:	b570      	push	{r4, r5, r6, lr}
    4ad6:	b082      	sub	sp, #8
    4ad8:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    4ada:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    4adc:	b164      	cbz	r4, 4af8 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    4ade:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4ae0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4ae2:	429a      	cmp	r2, r3
    4ae4:	d311      	bcc.n	4b0a <prvNotifyQueueSetContainer+0x36>
    4ae6:	f04f 0380 	mov.w	r3, #128	; 0x80
    4aea:	f383 8811 	msr	BASEPRI, r3
    4aee:	f3bf 8f6f 	isb	sy
    4af2:	f3bf 8f4f 	dsb	sy
    4af6:	e7fe      	b.n	4af6 <prvNotifyQueueSetContainer+0x22>
    4af8:	f04f 0380 	mov.w	r3, #128	; 0x80
    4afc:	f383 8811 	msr	BASEPRI, r3
    4b00:	f3bf 8f6f 	isb	sy
    4b04:	f3bf 8f4f 	dsb	sy
    4b08:	e7fe      	b.n	4b08 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    4b0a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4b0c:	4293      	cmp	r3, r2
    4b0e:	d803      	bhi.n	4b18 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    4b10:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    4b12:	4630      	mov	r0, r6
    4b14:	b002      	add	sp, #8
    4b16:	bd70      	pop	{r4, r5, r6, pc}
    4b18:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    4b1a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    4b1e:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    4b20:	a901      	add	r1, sp, #4
    4b22:	4620      	mov	r0, r4
    4b24:	4b0a      	ldr	r3, [pc, #40]	; (4b50 <prvNotifyQueueSetContainer+0x7c>)
    4b26:	4798      	blx	r3
    4b28:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    4b2a:	f1b5 3fff 	cmp.w	r5, #4294967295
    4b2e:	d10a      	bne.n	4b46 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    4b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b32:	2b00      	cmp	r3, #0
    4b34:	d0ed      	beq.n	4b12 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    4b36:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4b3a:	4b06      	ldr	r3, [pc, #24]	; (4b54 <prvNotifyQueueSetContainer+0x80>)
    4b3c:	4798      	blx	r3
    4b3e:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    4b40:	bf18      	it	ne
    4b42:	2601      	movne	r6, #1
    4b44:	e7e5      	b.n	4b12 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    4b46:	1c6b      	adds	r3, r5, #1
    4b48:	b25b      	sxtb	r3, r3
    4b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    4b4e:	e7e0      	b.n	4b12 <prvNotifyQueueSetContainer+0x3e>
    4b50:	00004a55 	.word	0x00004a55
    4b54:	00005be1 	.word	0x00005be1

00004b58 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    4b58:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4b5a:	b172      	cbz	r2, 4b7a <prvCopyDataFromQueue+0x22>
{
    4b5c:	b510      	push	{r4, lr}
    4b5e:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    4b60:	68c4      	ldr	r4, [r0, #12]
    4b62:	4414      	add	r4, r2
    4b64:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    4b66:	6840      	ldr	r0, [r0, #4]
    4b68:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    4b6a:	bf24      	itt	cs
    4b6c:	6818      	ldrcs	r0, [r3, #0]
    4b6e:	60d8      	strcs	r0, [r3, #12]
    4b70:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    4b72:	68d9      	ldr	r1, [r3, #12]
    4b74:	4b01      	ldr	r3, [pc, #4]	; (4b7c <prvCopyDataFromQueue+0x24>)
    4b76:	4798      	blx	r3
    4b78:	bd10      	pop	{r4, pc}
    4b7a:	4770      	bx	lr
    4b7c:	000065a7 	.word	0x000065a7

00004b80 <prvUnlockQueue>:
{
    4b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b84:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    4b86:	4b23      	ldr	r3, [pc, #140]	; (4c14 <prvUnlockQueue+0x94>)
    4b88:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    4b8a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    4b8e:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    4b90:	2c00      	cmp	r4, #0
    4b92:	dd19      	ble.n	4bc8 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    4b94:	4e20      	ldr	r6, [pc, #128]	; (4c18 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    4b96:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4c24 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4b9a:	4f20      	ldr	r7, [pc, #128]	; (4c1c <prvUnlockQueue+0x9c>)
    4b9c:	e008      	b.n	4bb0 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4b9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4ba0:	b193      	cbz	r3, 4bc8 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4ba2:	f105 0024 	add.w	r0, r5, #36	; 0x24
    4ba6:	47b8      	blx	r7
    4ba8:	b960      	cbnz	r0, 4bc4 <prvUnlockQueue+0x44>
    4baa:	3c01      	subs	r4, #1
    4bac:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    4bae:	b15c      	cbz	r4, 4bc8 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    4bb0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d0f3      	beq.n	4b9e <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    4bb6:	2100      	movs	r1, #0
    4bb8:	4628      	mov	r0, r5
    4bba:	47b0      	blx	r6
    4bbc:	2800      	cmp	r0, #0
    4bbe:	d0f4      	beq.n	4baa <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    4bc0:	47c0      	blx	r8
    4bc2:	e7f2      	b.n	4baa <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    4bc4:	47c0      	blx	r8
    4bc6:	e7f0      	b.n	4baa <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    4bc8:	23ff      	movs	r3, #255	; 0xff
    4bca:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    4bce:	4b14      	ldr	r3, [pc, #80]	; (4c20 <prvUnlockQueue+0xa0>)
    4bd0:	4798      	blx	r3
	taskENTER_CRITICAL();
    4bd2:	4b10      	ldr	r3, [pc, #64]	; (4c14 <prvUnlockQueue+0x94>)
    4bd4:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    4bd6:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    4bda:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    4bdc:	2c00      	cmp	r4, #0
    4bde:	dd12      	ble.n	4c06 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4be0:	692b      	ldr	r3, [r5, #16]
    4be2:	b183      	cbz	r3, 4c06 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4be4:	f105 0710 	add.w	r7, r5, #16
    4be8:	4e0c      	ldr	r6, [pc, #48]	; (4c1c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    4bea:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4c24 <prvUnlockQueue+0xa4>
    4bee:	e004      	b.n	4bfa <prvUnlockQueue+0x7a>
    4bf0:	3c01      	subs	r4, #1
    4bf2:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    4bf4:	b13c      	cbz	r4, 4c06 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4bf6:	692b      	ldr	r3, [r5, #16]
    4bf8:	b12b      	cbz	r3, 4c06 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4bfa:	4638      	mov	r0, r7
    4bfc:	47b0      	blx	r6
    4bfe:	2800      	cmp	r0, #0
    4c00:	d0f6      	beq.n	4bf0 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    4c02:	47c0      	blx	r8
    4c04:	e7f4      	b.n	4bf0 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    4c06:	23ff      	movs	r3, #255	; 0xff
    4c08:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    4c0c:	4b04      	ldr	r3, [pc, #16]	; (4c20 <prvUnlockQueue+0xa0>)
    4c0e:	4798      	blx	r3
    4c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c14:	00004665 	.word	0x00004665
    4c18:	00004ad5 	.word	0x00004ad5
    4c1c:	00005be1 	.word	0x00005be1
    4c20:	000046a9 	.word	0x000046a9
    4c24:	00005d11 	.word	0x00005d11

00004c28 <xQueueGenericReset>:
{
    4c28:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    4c2a:	b330      	cbz	r0, 4c7a <xQueueGenericReset+0x52>
    4c2c:	4604      	mov	r4, r0
    4c2e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    4c30:	4b1c      	ldr	r3, [pc, #112]	; (4ca4 <xQueueGenericReset+0x7c>)
    4c32:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    4c34:	6822      	ldr	r2, [r4, #0]
    4c36:	6c21      	ldr	r1, [r4, #64]	; 0x40
    4c38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4c3a:	fb03 f301 	mul.w	r3, r3, r1
    4c3e:	18d0      	adds	r0, r2, r3
    4c40:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    4c42:	2000      	movs	r0, #0
    4c44:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    4c46:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    4c48:	1a5b      	subs	r3, r3, r1
    4c4a:	4413      	add	r3, r2
    4c4c:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    4c4e:	23ff      	movs	r3, #255	; 0xff
    4c50:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    4c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    4c58:	b9c5      	cbnz	r5, 4c8c <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4c5a:	6923      	ldr	r3, [r4, #16]
    4c5c:	b1eb      	cbz	r3, 4c9a <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4c5e:	f104 0010 	add.w	r0, r4, #16
    4c62:	4b11      	ldr	r3, [pc, #68]	; (4ca8 <xQueueGenericReset+0x80>)
    4c64:	4798      	blx	r3
    4c66:	b1c0      	cbz	r0, 4c9a <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    4c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4c6c:	4b0f      	ldr	r3, [pc, #60]	; (4cac <xQueueGenericReset+0x84>)
    4c6e:	601a      	str	r2, [r3, #0]
    4c70:	f3bf 8f4f 	dsb	sy
    4c74:	f3bf 8f6f 	isb	sy
    4c78:	e00f      	b.n	4c9a <xQueueGenericReset+0x72>
    4c7a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c7e:	f383 8811 	msr	BASEPRI, r3
    4c82:	f3bf 8f6f 	isb	sy
    4c86:	f3bf 8f4f 	dsb	sy
    4c8a:	e7fe      	b.n	4c8a <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    4c8c:	f104 0010 	add.w	r0, r4, #16
    4c90:	4d07      	ldr	r5, [pc, #28]	; (4cb0 <xQueueGenericReset+0x88>)
    4c92:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    4c94:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4c98:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    4c9a:	4b06      	ldr	r3, [pc, #24]	; (4cb4 <xQueueGenericReset+0x8c>)
    4c9c:	4798      	blx	r3
}
    4c9e:	2001      	movs	r0, #1
    4ca0:	bd38      	pop	{r3, r4, r5, pc}
    4ca2:	bf00      	nop
    4ca4:	00004665 	.word	0x00004665
    4ca8:	00005be1 	.word	0x00005be1
    4cac:	e000ed04 	.word	0xe000ed04
    4cb0:	00004505 	.word	0x00004505
    4cb4:	000046a9 	.word	0x000046a9

00004cb8 <xQueueGenericCreate>:
{
    4cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    4cba:	b940      	cbnz	r0, 4cce <xQueueGenericCreate+0x16>
    4cbc:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cc0:	f383 8811 	msr	BASEPRI, r3
    4cc4:	f3bf 8f6f 	isb	sy
    4cc8:	f3bf 8f4f 	dsb	sy
    4ccc:	e7fe      	b.n	4ccc <xQueueGenericCreate+0x14>
    4cce:	4606      	mov	r6, r0
    4cd0:	4617      	mov	r7, r2
    4cd2:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    4cd4:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    4cd8:	3054      	adds	r0, #84	; 0x54
    4cda:	4b0b      	ldr	r3, [pc, #44]	; (4d08 <xQueueGenericCreate+0x50>)
    4cdc:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    4cde:	4604      	mov	r4, r0
    4ce0:	b178      	cbz	r0, 4d02 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    4ce2:	b11d      	cbz	r5, 4cec <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    4ce4:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    4ce8:	6003      	str	r3, [r0, #0]
    4cea:	e000      	b.n	4cee <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    4cec:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    4cee:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    4cf0:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    4cf2:	2101      	movs	r1, #1
    4cf4:	4620      	mov	r0, r4
    4cf6:	4b05      	ldr	r3, [pc, #20]	; (4d0c <xQueueGenericCreate+0x54>)
    4cf8:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    4cfa:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    4cfe:	2300      	movs	r3, #0
    4d00:	64a3      	str	r3, [r4, #72]	; 0x48
}
    4d02:	4620      	mov	r0, r4
    4d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4d06:	bf00      	nop
    4d08:	00004915 	.word	0x00004915
    4d0c:	00004c29 	.word	0x00004c29

00004d10 <xQueueGenericSend>:
{
    4d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d14:	b085      	sub	sp, #20
    4d16:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    4d18:	b198      	cbz	r0, 4d42 <xQueueGenericSend+0x32>
    4d1a:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4d1c:	b1d1      	cbz	r1, 4d54 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4d1e:	2b02      	cmp	r3, #2
    4d20:	d024      	beq.n	4d6c <xQueueGenericSend+0x5c>
    4d22:	461e      	mov	r6, r3
    4d24:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4d26:	4b64      	ldr	r3, [pc, #400]	; (4eb8 <xQueueGenericSend+0x1a8>)
    4d28:	4798      	blx	r3
    4d2a:	bb58      	cbnz	r0, 4d84 <xQueueGenericSend+0x74>
    4d2c:	9b01      	ldr	r3, [sp, #4]
    4d2e:	b38b      	cbz	r3, 4d94 <xQueueGenericSend+0x84>
    4d30:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d34:	f383 8811 	msr	BASEPRI, r3
    4d38:	f3bf 8f6f 	isb	sy
    4d3c:	f3bf 8f4f 	dsb	sy
    4d40:	e7fe      	b.n	4d40 <xQueueGenericSend+0x30>
    4d42:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d46:	f383 8811 	msr	BASEPRI, r3
    4d4a:	f3bf 8f6f 	isb	sy
    4d4e:	f3bf 8f4f 	dsb	sy
    4d52:	e7fe      	b.n	4d52 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4d54:	6c02      	ldr	r2, [r0, #64]	; 0x40
    4d56:	2a00      	cmp	r2, #0
    4d58:	d0e1      	beq.n	4d1e <xQueueGenericSend+0xe>
    4d5a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d5e:	f383 8811 	msr	BASEPRI, r3
    4d62:	f3bf 8f6f 	isb	sy
    4d66:	f3bf 8f4f 	dsb	sy
    4d6a:	e7fe      	b.n	4d6a <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4d6c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    4d6e:	2a01      	cmp	r2, #1
    4d70:	d0d7      	beq.n	4d22 <xQueueGenericSend+0x12>
    4d72:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d76:	f383 8811 	msr	BASEPRI, r3
    4d7a:	f3bf 8f6f 	isb	sy
    4d7e:	f3bf 8f4f 	dsb	sy
    4d82:	e7fe      	b.n	4d82 <xQueueGenericSend+0x72>
    4d84:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    4d86:	f8df 815c 	ldr.w	r8, [pc, #348]	; 4ee4 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4d8a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 4ee8 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    4d8e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 4ec4 <xQueueGenericSend+0x1b4>
    4d92:	e041      	b.n	4e18 <xQueueGenericSend+0x108>
    4d94:	2500      	movs	r5, #0
    4d96:	e7f6      	b.n	4d86 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4d98:	4632      	mov	r2, r6
    4d9a:	4639      	mov	r1, r7
    4d9c:	4620      	mov	r0, r4
    4d9e:	4b47      	ldr	r3, [pc, #284]	; (4ebc <xQueueGenericSend+0x1ac>)
    4da0:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    4da2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4da4:	b193      	cbz	r3, 4dcc <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4da6:	4631      	mov	r1, r6
    4da8:	4620      	mov	r0, r4
    4daa:	4b45      	ldr	r3, [pc, #276]	; (4ec0 <xQueueGenericSend+0x1b0>)
    4dac:	4798      	blx	r3
    4dae:	b138      	cbz	r0, 4dc0 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    4db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4db4:	4b43      	ldr	r3, [pc, #268]	; (4ec4 <xQueueGenericSend+0x1b4>)
    4db6:	601a      	str	r2, [r3, #0]
    4db8:	f3bf 8f4f 	dsb	sy
    4dbc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    4dc0:	4b41      	ldr	r3, [pc, #260]	; (4ec8 <xQueueGenericSend+0x1b8>)
    4dc2:	4798      	blx	r3
				return pdPASS;
    4dc4:	2001      	movs	r0, #1
}
    4dc6:	b005      	add	sp, #20
    4dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4dce:	b173      	cbz	r3, 4dee <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4dd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4dd4:	4b3d      	ldr	r3, [pc, #244]	; (4ecc <xQueueGenericSend+0x1bc>)
    4dd6:	4798      	blx	r3
    4dd8:	2800      	cmp	r0, #0
    4dda:	d0f1      	beq.n	4dc0 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    4ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4de0:	4b38      	ldr	r3, [pc, #224]	; (4ec4 <xQueueGenericSend+0x1b4>)
    4de2:	601a      	str	r2, [r3, #0]
    4de4:	f3bf 8f4f 	dsb	sy
    4de8:	f3bf 8f6f 	isb	sy
    4dec:	e7e8      	b.n	4dc0 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    4dee:	2800      	cmp	r0, #0
    4df0:	d0e6      	beq.n	4dc0 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    4df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4df6:	4b33      	ldr	r3, [pc, #204]	; (4ec4 <xQueueGenericSend+0x1b4>)
    4df8:	601a      	str	r2, [r3, #0]
    4dfa:	f3bf 8f4f 	dsb	sy
    4dfe:	f3bf 8f6f 	isb	sy
    4e02:	e7dd      	b.n	4dc0 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    4e04:	4b30      	ldr	r3, [pc, #192]	; (4ec8 <xQueueGenericSend+0x1b8>)
    4e06:	4798      	blx	r3
					return errQUEUE_FULL;
    4e08:	2000      	movs	r0, #0
    4e0a:	e7dc      	b.n	4dc6 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    4e0c:	4620      	mov	r0, r4
    4e0e:	4b30      	ldr	r3, [pc, #192]	; (4ed0 <xQueueGenericSend+0x1c0>)
    4e10:	4798      	blx	r3
				(void)xTaskResumeAll();
    4e12:	4b30      	ldr	r3, [pc, #192]	; (4ed4 <xQueueGenericSend+0x1c4>)
    4e14:	4798      	blx	r3
    4e16:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    4e18:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4e1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4e1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4e1e:	429a      	cmp	r2, r3
    4e20:	d3ba      	bcc.n	4d98 <xQueueGenericSend+0x88>
    4e22:	2e02      	cmp	r6, #2
    4e24:	d0b8      	beq.n	4d98 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    4e26:	9b01      	ldr	r3, [sp, #4]
    4e28:	2b00      	cmp	r3, #0
    4e2a:	d0eb      	beq.n	4e04 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    4e2c:	b90d      	cbnz	r5, 4e32 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    4e2e:	a802      	add	r0, sp, #8
    4e30:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    4e32:	4b25      	ldr	r3, [pc, #148]	; (4ec8 <xQueueGenericSend+0x1b8>)
    4e34:	4798      	blx	r3
		vTaskSuspendAll();
    4e36:	4b28      	ldr	r3, [pc, #160]	; (4ed8 <xQueueGenericSend+0x1c8>)
    4e38:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4e3a:	47c0      	blx	r8
    4e3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    4e40:	b25b      	sxtb	r3, r3
    4e42:	f1b3 3fff 	cmp.w	r3, #4294967295
    4e46:	bf04      	itt	eq
    4e48:	2300      	moveq	r3, #0
    4e4a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    4e4e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4e52:	b25b      	sxtb	r3, r3
    4e54:	f1b3 3fff 	cmp.w	r3, #4294967295
    4e58:	bf04      	itt	eq
    4e5a:	2300      	moveq	r3, #0
    4e5c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    4e60:	4b19      	ldr	r3, [pc, #100]	; (4ec8 <xQueueGenericSend+0x1b8>)
    4e62:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4e64:	a901      	add	r1, sp, #4
    4e66:	a802      	add	r0, sp, #8
    4e68:	4b1c      	ldr	r3, [pc, #112]	; (4edc <xQueueGenericSend+0x1cc>)
    4e6a:	4798      	blx	r3
    4e6c:	b9e0      	cbnz	r0, 4ea8 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    4e6e:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    4e70:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    4e74:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    4e76:	4b14      	ldr	r3, [pc, #80]	; (4ec8 <xQueueGenericSend+0x1b8>)
    4e78:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    4e7a:	45ab      	cmp	fp, r5
    4e7c:	d1c6      	bne.n	4e0c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    4e7e:	9901      	ldr	r1, [sp, #4]
    4e80:	f104 0010 	add.w	r0, r4, #16
    4e84:	4b16      	ldr	r3, [pc, #88]	; (4ee0 <xQueueGenericSend+0x1d0>)
    4e86:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4e88:	4620      	mov	r0, r4
    4e8a:	4b11      	ldr	r3, [pc, #68]	; (4ed0 <xQueueGenericSend+0x1c0>)
    4e8c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    4e8e:	4b11      	ldr	r3, [pc, #68]	; (4ed4 <xQueueGenericSend+0x1c4>)
    4e90:	4798      	blx	r3
    4e92:	2800      	cmp	r0, #0
    4e94:	d1bf      	bne.n	4e16 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    4e96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4e9a:	f8c9 3000 	str.w	r3, [r9]
    4e9e:	f3bf 8f4f 	dsb	sy
    4ea2:	f3bf 8f6f 	isb	sy
    4ea6:	e7b6      	b.n	4e16 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    4ea8:	4620      	mov	r0, r4
    4eaa:	4b09      	ldr	r3, [pc, #36]	; (4ed0 <xQueueGenericSend+0x1c0>)
    4eac:	4798      	blx	r3
			(void)xTaskResumeAll();
    4eae:	4b09      	ldr	r3, [pc, #36]	; (4ed4 <xQueueGenericSend+0x1c4>)
    4eb0:	4798      	blx	r3
			return errQUEUE_FULL;
    4eb2:	2000      	movs	r0, #0
    4eb4:	e787      	b.n	4dc6 <xQueueGenericSend+0xb6>
    4eb6:	bf00      	nop
    4eb8:	00005d21 	.word	0x00005d21
    4ebc:	00004a55 	.word	0x00004a55
    4ec0:	00004ad5 	.word	0x00004ad5
    4ec4:	e000ed04 	.word	0xe000ed04
    4ec8:	000046a9 	.word	0x000046a9
    4ecc:	00005be1 	.word	0x00005be1
    4ed0:	00004b81 	.word	0x00004b81
    4ed4:	00005895 	.word	0x00005895
    4ed8:	0000574d 	.word	0x0000574d
    4edc:	00005c85 	.word	0x00005c85
    4ee0:	00005b61 	.word	0x00005b61
    4ee4:	00004665 	.word	0x00004665
    4ee8:	00005c71 	.word	0x00005c71

00004eec <xQueueCreateMutex>:
{
    4eec:	b538      	push	{r3, r4, r5, lr}
	pxNewQueue = (Queue_t *)xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType);
    4eee:	4602      	mov	r2, r0
    4ef0:	2100      	movs	r1, #0
    4ef2:	2001      	movs	r0, #1
    4ef4:	4b06      	ldr	r3, [pc, #24]	; (4f10 <xQueueCreateMutex+0x24>)
    4ef6:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    4ef8:	4604      	mov	r4, r0
    4efa:	b138      	cbz	r0, 4f0c <xQueueCreateMutex+0x20>
		pxNewQueue->pxMutexHolder = NULL;
    4efc:	2100      	movs	r1, #0
    4efe:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    4f00:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    4f02:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    4f04:	460b      	mov	r3, r1
    4f06:	460a      	mov	r2, r1
    4f08:	4d02      	ldr	r5, [pc, #8]	; (4f14 <xQueueCreateMutex+0x28>)
    4f0a:	47a8      	blx	r5
}
    4f0c:	4620      	mov	r0, r4
    4f0e:	bd38      	pop	{r3, r4, r5, pc}
    4f10:	00004cb9 	.word	0x00004cb9
    4f14:	00004d11 	.word	0x00004d11

00004f18 <xQueueGenericSendFromISR>:
{
    4f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    4f1c:	2800      	cmp	r0, #0
    4f1e:	d036      	beq.n	4f8e <xQueueGenericSendFromISR+0x76>
    4f20:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4f22:	2900      	cmp	r1, #0
    4f24:	d03c      	beq.n	4fa0 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4f26:	2b02      	cmp	r3, #2
    4f28:	d046      	beq.n	4fb8 <xQueueGenericSendFromISR+0xa0>
    4f2a:	461f      	mov	r7, r3
    4f2c:	4690      	mov	r8, r2
    4f2e:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    4f30:	4b37      	ldr	r3, [pc, #220]	; (5010 <xQueueGenericSendFromISR+0xf8>)
    4f32:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    4f34:	f3ef 8611 	mrs	r6, BASEPRI
    4f38:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f3c:	f383 8811 	msr	BASEPRI, r3
    4f40:	f3bf 8f6f 	isb	sy
    4f44:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    4f48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    4f4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4f4c:	429a      	cmp	r2, r3
    4f4e:	d301      	bcc.n	4f54 <xQueueGenericSendFromISR+0x3c>
    4f50:	2f02      	cmp	r7, #2
    4f52:	d151      	bne.n	4ff8 <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    4f54:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    4f58:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    4f5a:	463a      	mov	r2, r7
    4f5c:	4649      	mov	r1, r9
    4f5e:	4620      	mov	r0, r4
    4f60:	4b2c      	ldr	r3, [pc, #176]	; (5014 <xQueueGenericSendFromISR+0xfc>)
    4f62:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    4f64:	f1b5 3fff 	cmp.w	r5, #4294967295
    4f68:	d140      	bne.n	4fec <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    4f6a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4f6c:	b383      	cbz	r3, 4fd0 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    4f6e:	4639      	mov	r1, r7
    4f70:	4620      	mov	r0, r4
    4f72:	4b29      	ldr	r3, [pc, #164]	; (5018 <xQueueGenericSendFromISR+0x100>)
    4f74:	4798      	blx	r3
    4f76:	2800      	cmp	r0, #0
    4f78:	d040      	beq.n	4ffc <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    4f7a:	f1b8 0f00 	cmp.w	r8, #0
    4f7e:	d03f      	beq.n	5000 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    4f80:	2001      	movs	r0, #1
    4f82:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4f86:	f386 8811 	msr	BASEPRI, r6
}
    4f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    4f8e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f92:	f383 8811 	msr	BASEPRI, r3
    4f96:	f3bf 8f6f 	isb	sy
    4f9a:	f3bf 8f4f 	dsb	sy
    4f9e:	e7fe      	b.n	4f9e <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    4fa0:	6c00      	ldr	r0, [r0, #64]	; 0x40
    4fa2:	2800      	cmp	r0, #0
    4fa4:	d0bf      	beq.n	4f26 <xQueueGenericSendFromISR+0xe>
    4fa6:	f04f 0380 	mov.w	r3, #128	; 0x80
    4faa:	f383 8811 	msr	BASEPRI, r3
    4fae:	f3bf 8f6f 	isb	sy
    4fb2:	f3bf 8f4f 	dsb	sy
    4fb6:	e7fe      	b.n	4fb6 <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    4fb8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    4fba:	2801      	cmp	r0, #1
    4fbc:	d0b5      	beq.n	4f2a <xQueueGenericSendFromISR+0x12>
    4fbe:	f04f 0380 	mov.w	r3, #128	; 0x80
    4fc2:	f383 8811 	msr	BASEPRI, r3
    4fc6:	f3bf 8f6f 	isb	sy
    4fca:	f3bf 8f4f 	dsb	sy
    4fce:	e7fe      	b.n	4fce <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    4fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4fd2:	b1bb      	cbz	r3, 5004 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    4fd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4fd8:	4b10      	ldr	r3, [pc, #64]	; (501c <xQueueGenericSendFromISR+0x104>)
    4fda:	4798      	blx	r3
    4fdc:	b1a0      	cbz	r0, 5008 <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    4fde:	f1b8 0f00 	cmp.w	r8, #0
    4fe2:	d013      	beq.n	500c <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    4fe4:	2001      	movs	r0, #1
    4fe6:	f8c8 0000 	str.w	r0, [r8]
    4fea:	e7cc      	b.n	4f86 <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    4fec:	1c6b      	adds	r3, r5, #1
    4fee:	b25b      	sxtb	r3, r3
    4ff0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    4ff4:	2001      	movs	r0, #1
    4ff6:	e7c6      	b.n	4f86 <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    4ff8:	2000      	movs	r0, #0
    4ffa:	e7c4      	b.n	4f86 <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    4ffc:	2001      	movs	r0, #1
    4ffe:	e7c2      	b.n	4f86 <xQueueGenericSendFromISR+0x6e>
    5000:	2001      	movs	r0, #1
    5002:	e7c0      	b.n	4f86 <xQueueGenericSendFromISR+0x6e>
    5004:	2001      	movs	r0, #1
    5006:	e7be      	b.n	4f86 <xQueueGenericSendFromISR+0x6e>
    5008:	2001      	movs	r0, #1
    500a:	e7bc      	b.n	4f86 <xQueueGenericSendFromISR+0x6e>
    500c:	2001      	movs	r0, #1
    500e:	e7ba      	b.n	4f86 <xQueueGenericSendFromISR+0x6e>
    5010:	000048bd 	.word	0x000048bd
    5014:	00004a55 	.word	0x00004a55
    5018:	00004ad5 	.word	0x00004ad5
    501c:	00005be1 	.word	0x00005be1

00005020 <xQueueReceive>:
{
    5020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5024:	b084      	sub	sp, #16
    5026:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    5028:	b180      	cbz	r0, 504c <xQueueReceive+0x2c>
    502a:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    502c:	b1b9      	cbz	r1, 505e <xQueueReceive+0x3e>
    502e:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    5030:	4b50      	ldr	r3, [pc, #320]	; (5174 <xQueueReceive+0x154>)
    5032:	4798      	blx	r3
    5034:	b9f8      	cbnz	r0, 5076 <xQueueReceive+0x56>
    5036:	9b01      	ldr	r3, [sp, #4]
    5038:	b32b      	cbz	r3, 5086 <xQueueReceive+0x66>
    503a:	f04f 0380 	mov.w	r3, #128	; 0x80
    503e:	f383 8811 	msr	BASEPRI, r3
    5042:	f3bf 8f6f 	isb	sy
    5046:	f3bf 8f4f 	dsb	sy
    504a:	e7fe      	b.n	504a <xQueueReceive+0x2a>
    504c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5050:	f383 8811 	msr	BASEPRI, r3
    5054:	f3bf 8f6f 	isb	sy
    5058:	f3bf 8f4f 	dsb	sy
    505c:	e7fe      	b.n	505c <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    505e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5060:	2b00      	cmp	r3, #0
    5062:	d0e4      	beq.n	502e <xQueueReceive+0xe>
    5064:	f04f 0380 	mov.w	r3, #128	; 0x80
    5068:	f383 8811 	msr	BASEPRI, r3
    506c:	f3bf 8f6f 	isb	sy
    5070:	f3bf 8f4f 	dsb	sy
    5074:	e7fe      	b.n	5074 <xQueueReceive+0x54>
    5076:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    5078:	f8df 8124 	ldr.w	r8, [pc, #292]	; 51a0 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    507c:	f8df a124 	ldr.w	sl, [pc, #292]	; 51a4 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    5080:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 5180 <xQueueReceive+0x160>
    5084:	e029      	b.n	50da <xQueueReceive+0xba>
    5086:	2700      	movs	r7, #0
    5088:	e7f6      	b.n	5078 <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    508a:	4631      	mov	r1, r6
    508c:	4620      	mov	r0, r4
    508e:	4b3a      	ldr	r3, [pc, #232]	; (5178 <xQueueReceive+0x158>)
    5090:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    5092:	3d01      	subs	r5, #1
    5094:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5096:	6923      	ldr	r3, [r4, #16]
    5098:	b163      	cbz	r3, 50b4 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    509a:	f104 0010 	add.w	r0, r4, #16
    509e:	4b37      	ldr	r3, [pc, #220]	; (517c <xQueueReceive+0x15c>)
    50a0:	4798      	blx	r3
    50a2:	b138      	cbz	r0, 50b4 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    50a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    50a8:	4b35      	ldr	r3, [pc, #212]	; (5180 <xQueueReceive+0x160>)
    50aa:	601a      	str	r2, [r3, #0]
    50ac:	f3bf 8f4f 	dsb	sy
    50b0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    50b4:	4b33      	ldr	r3, [pc, #204]	; (5184 <xQueueReceive+0x164>)
    50b6:	4798      	blx	r3
				return pdPASS;
    50b8:	2001      	movs	r0, #1
}
    50ba:	b004      	add	sp, #16
    50bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    50c0:	4b30      	ldr	r3, [pc, #192]	; (5184 <xQueueReceive+0x164>)
    50c2:	4798      	blx	r3
					return errQUEUE_EMPTY;
    50c4:	2000      	movs	r0, #0
    50c6:	e7f8      	b.n	50ba <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    50c8:	a802      	add	r0, sp, #8
    50ca:	47d0      	blx	sl
    50cc:	e00e      	b.n	50ec <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    50ce:	4620      	mov	r0, r4
    50d0:	4b2d      	ldr	r3, [pc, #180]	; (5188 <xQueueReceive+0x168>)
    50d2:	4798      	blx	r3
				(void)xTaskResumeAll();
    50d4:	4b2d      	ldr	r3, [pc, #180]	; (518c <xQueueReceive+0x16c>)
    50d6:	4798      	blx	r3
    50d8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    50da:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    50dc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    50de:	2d00      	cmp	r5, #0
    50e0:	d1d3      	bne.n	508a <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    50e2:	9b01      	ldr	r3, [sp, #4]
    50e4:	2b00      	cmp	r3, #0
    50e6:	d0eb      	beq.n	50c0 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    50e8:	2f00      	cmp	r7, #0
    50ea:	d0ed      	beq.n	50c8 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    50ec:	4b25      	ldr	r3, [pc, #148]	; (5184 <xQueueReceive+0x164>)
    50ee:	4798      	blx	r3
		vTaskSuspendAll();
    50f0:	4b27      	ldr	r3, [pc, #156]	; (5190 <xQueueReceive+0x170>)
    50f2:	4798      	blx	r3
		prvLockQueue(pxQueue);
    50f4:	47c0      	blx	r8
    50f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    50fa:	b25b      	sxtb	r3, r3
    50fc:	f1b3 3fff 	cmp.w	r3, #4294967295
    5100:	bf04      	itt	eq
    5102:	2300      	moveq	r3, #0
    5104:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5108:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    510c:	b25b      	sxtb	r3, r3
    510e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5112:	bf04      	itt	eq
    5114:	2300      	moveq	r3, #0
    5116:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    511a:	4b1a      	ldr	r3, [pc, #104]	; (5184 <xQueueReceive+0x164>)
    511c:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    511e:	a901      	add	r1, sp, #4
    5120:	a802      	add	r0, sp, #8
    5122:	4b1c      	ldr	r3, [pc, #112]	; (5194 <xQueueReceive+0x174>)
    5124:	4798      	blx	r3
    5126:	b9c8      	cbnz	r0, 515c <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5128:	4620      	mov	r0, r4
    512a:	4b1b      	ldr	r3, [pc, #108]	; (5198 <xQueueReceive+0x178>)
    512c:	4798      	blx	r3
    512e:	2800      	cmp	r0, #0
    5130:	d0cd      	beq.n	50ce <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    5132:	9901      	ldr	r1, [sp, #4]
    5134:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5138:	4b18      	ldr	r3, [pc, #96]	; (519c <xQueueReceive+0x17c>)
    513a:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    513c:	4620      	mov	r0, r4
    513e:	4b12      	ldr	r3, [pc, #72]	; (5188 <xQueueReceive+0x168>)
    5140:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    5142:	4b12      	ldr	r3, [pc, #72]	; (518c <xQueueReceive+0x16c>)
    5144:	4798      	blx	r3
    5146:	2800      	cmp	r0, #0
    5148:	d1c6      	bne.n	50d8 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    514a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    514e:	f8c9 3000 	str.w	r3, [r9]
    5152:	f3bf 8f4f 	dsb	sy
    5156:	f3bf 8f6f 	isb	sy
    515a:	e7bd      	b.n	50d8 <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    515c:	4620      	mov	r0, r4
    515e:	4b0a      	ldr	r3, [pc, #40]	; (5188 <xQueueReceive+0x168>)
    5160:	4798      	blx	r3
			(void)xTaskResumeAll();
    5162:	4b0a      	ldr	r3, [pc, #40]	; (518c <xQueueReceive+0x16c>)
    5164:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5166:	4620      	mov	r0, r4
    5168:	4b0b      	ldr	r3, [pc, #44]	; (5198 <xQueueReceive+0x178>)
    516a:	4798      	blx	r3
    516c:	2800      	cmp	r0, #0
    516e:	d0b3      	beq.n	50d8 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    5170:	2000      	movs	r0, #0
    5172:	e7a2      	b.n	50ba <xQueueReceive+0x9a>
    5174:	00005d21 	.word	0x00005d21
    5178:	00004b59 	.word	0x00004b59
    517c:	00005be1 	.word	0x00005be1
    5180:	e000ed04 	.word	0xe000ed04
    5184:	000046a9 	.word	0x000046a9
    5188:	00004b81 	.word	0x00004b81
    518c:	00005895 	.word	0x00005895
    5190:	0000574d 	.word	0x0000574d
    5194:	00005c85 	.word	0x00005c85
    5198:	00004a35 	.word	0x00004a35
    519c:	00005b61 	.word	0x00005b61
    51a0:	00004665 	.word	0x00004665
    51a4:	00005c71 	.word	0x00005c71

000051a8 <xQueueSemaphoreTake>:
{
    51a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    51ac:	b085      	sub	sp, #20
    51ae:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    51b0:	b158      	cbz	r0, 51ca <xQueueSemaphoreTake+0x22>
    51b2:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    51b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
    51b6:	b18b      	cbz	r3, 51dc <xQueueSemaphoreTake+0x34>
    51b8:	f04f 0380 	mov.w	r3, #128	; 0x80
    51bc:	f383 8811 	msr	BASEPRI, r3
    51c0:	f3bf 8f6f 	isb	sy
    51c4:	f3bf 8f4f 	dsb	sy
    51c8:	e7fe      	b.n	51c8 <xQueueSemaphoreTake+0x20>
    51ca:	f04f 0380 	mov.w	r3, #128	; 0x80
    51ce:	f383 8811 	msr	BASEPRI, r3
    51d2:	f3bf 8f6f 	isb	sy
    51d6:	f3bf 8f4f 	dsb	sy
    51da:	e7fe      	b.n	51da <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    51dc:	4b5b      	ldr	r3, [pc, #364]	; (534c <xQueueSemaphoreTake+0x1a4>)
    51de:	4798      	blx	r3
    51e0:	b950      	cbnz	r0, 51f8 <xQueueSemaphoreTake+0x50>
    51e2:	9b01      	ldr	r3, [sp, #4]
    51e4:	b183      	cbz	r3, 5208 <xQueueSemaphoreTake+0x60>
    51e6:	f04f 0380 	mov.w	r3, #128	; 0x80
    51ea:	f383 8811 	msr	BASEPRI, r3
    51ee:	f3bf 8f6f 	isb	sy
    51f2:	f3bf 8f4f 	dsb	sy
    51f6:	e7fe      	b.n	51f6 <xQueueSemaphoreTake+0x4e>
    51f8:	2500      	movs	r5, #0
    51fa:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    51fc:	4e54      	ldr	r6, [pc, #336]	; (5350 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    51fe:	f8df 9184 	ldr.w	r9, [pc, #388]	; 5384 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    5202:	f8df 8158 	ldr.w	r8, [pc, #344]	; 535c <xQueueSemaphoreTake+0x1b4>
    5206:	e048      	b.n	529a <xQueueSemaphoreTake+0xf2>
    5208:	2500      	movs	r5, #0
    520a:	462f      	mov	r7, r5
    520c:	e7f6      	b.n	51fc <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    520e:	3b01      	subs	r3, #1
    5210:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    5212:	6823      	ldr	r3, [r4, #0]
    5214:	b913      	cbnz	r3, 521c <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    5216:	4b4f      	ldr	r3, [pc, #316]	; (5354 <xQueueSemaphoreTake+0x1ac>)
    5218:	4798      	blx	r3
    521a:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    521c:	6923      	ldr	r3, [r4, #16]
    521e:	b163      	cbz	r3, 523a <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5220:	f104 0010 	add.w	r0, r4, #16
    5224:	4b4c      	ldr	r3, [pc, #304]	; (5358 <xQueueSemaphoreTake+0x1b0>)
    5226:	4798      	blx	r3
    5228:	b138      	cbz	r0, 523a <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    522a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    522e:	4b4b      	ldr	r3, [pc, #300]	; (535c <xQueueSemaphoreTake+0x1b4>)
    5230:	601a      	str	r2, [r3, #0]
    5232:	f3bf 8f4f 	dsb	sy
    5236:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    523a:	4b49      	ldr	r3, [pc, #292]	; (5360 <xQueueSemaphoreTake+0x1b8>)
    523c:	4798      	blx	r3
				return pdPASS;
    523e:	2501      	movs	r5, #1
}
    5240:	4628      	mov	r0, r5
    5242:	b005      	add	sp, #20
    5244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    5248:	b145      	cbz	r5, 525c <xQueueSemaphoreTake+0xb4>
    524a:	f04f 0380 	mov.w	r3, #128	; 0x80
    524e:	f383 8811 	msr	BASEPRI, r3
    5252:	f3bf 8f6f 	isb	sy
    5256:	f3bf 8f4f 	dsb	sy
    525a:	e7fe      	b.n	525a <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    525c:	4b40      	ldr	r3, [pc, #256]	; (5360 <xQueueSemaphoreTake+0x1b8>)
    525e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    5260:	e7ee      	b.n	5240 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5262:	a802      	add	r0, sp, #8
    5264:	47c8      	blx	r9
    5266:	e021      	b.n	52ac <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    5268:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    526a:	6860      	ldr	r0, [r4, #4]
    526c:	4b3d      	ldr	r3, [pc, #244]	; (5364 <xQueueSemaphoreTake+0x1bc>)
    526e:	4798      	blx	r3
    5270:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    5272:	4b3b      	ldr	r3, [pc, #236]	; (5360 <xQueueSemaphoreTake+0x1b8>)
    5274:	4798      	blx	r3
    5276:	e040      	b.n	52fa <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    5278:	4620      	mov	r0, r4
    527a:	4b3b      	ldr	r3, [pc, #236]	; (5368 <xQueueSemaphoreTake+0x1c0>)
    527c:	4798      	blx	r3
				(void)xTaskResumeAll();
    527e:	4b3b      	ldr	r3, [pc, #236]	; (536c <xQueueSemaphoreTake+0x1c4>)
    5280:	4798      	blx	r3
    5282:	e009      	b.n	5298 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    5284:	4620      	mov	r0, r4
    5286:	4b38      	ldr	r3, [pc, #224]	; (5368 <xQueueSemaphoreTake+0x1c0>)
    5288:	4798      	blx	r3
			(void)xTaskResumeAll();
    528a:	4b38      	ldr	r3, [pc, #224]	; (536c <xQueueSemaphoreTake+0x1c4>)
    528c:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    528e:	4620      	mov	r0, r4
    5290:	4b37      	ldr	r3, [pc, #220]	; (5370 <xQueueSemaphoreTake+0x1c8>)
    5292:	4798      	blx	r3
    5294:	2800      	cmp	r0, #0
    5296:	d145      	bne.n	5324 <xQueueSemaphoreTake+0x17c>
    5298:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    529a:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    529c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    529e:	2b00      	cmp	r3, #0
    52a0:	d1b5      	bne.n	520e <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    52a2:	9b01      	ldr	r3, [sp, #4]
    52a4:	2b00      	cmp	r3, #0
    52a6:	d0cf      	beq.n	5248 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    52a8:	2f00      	cmp	r7, #0
    52aa:	d0da      	beq.n	5262 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    52ac:	4b2c      	ldr	r3, [pc, #176]	; (5360 <xQueueSemaphoreTake+0x1b8>)
    52ae:	4798      	blx	r3
		vTaskSuspendAll();
    52b0:	4b30      	ldr	r3, [pc, #192]	; (5374 <xQueueSemaphoreTake+0x1cc>)
    52b2:	4798      	blx	r3
		prvLockQueue(pxQueue);
    52b4:	47b0      	blx	r6
    52b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    52ba:	b25b      	sxtb	r3, r3
    52bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    52c0:	bf04      	itt	eq
    52c2:	2300      	moveq	r3, #0
    52c4:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    52c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    52cc:	b25b      	sxtb	r3, r3
    52ce:	f1b3 3fff 	cmp.w	r3, #4294967295
    52d2:	bf04      	itt	eq
    52d4:	2300      	moveq	r3, #0
    52d6:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    52da:	4b21      	ldr	r3, [pc, #132]	; (5360 <xQueueSemaphoreTake+0x1b8>)
    52dc:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    52de:	a901      	add	r1, sp, #4
    52e0:	a802      	add	r0, sp, #8
    52e2:	4b25      	ldr	r3, [pc, #148]	; (5378 <xQueueSemaphoreTake+0x1d0>)
    52e4:	4798      	blx	r3
    52e6:	2800      	cmp	r0, #0
    52e8:	d1cc      	bne.n	5284 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    52ea:	4620      	mov	r0, r4
    52ec:	4b20      	ldr	r3, [pc, #128]	; (5370 <xQueueSemaphoreTake+0x1c8>)
    52ee:	4798      	blx	r3
    52f0:	2800      	cmp	r0, #0
    52f2:	d0c1      	beq.n	5278 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    52f4:	6823      	ldr	r3, [r4, #0]
    52f6:	2b00      	cmp	r3, #0
    52f8:	d0b6      	beq.n	5268 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    52fa:	9901      	ldr	r1, [sp, #4]
    52fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5300:	4b1e      	ldr	r3, [pc, #120]	; (537c <xQueueSemaphoreTake+0x1d4>)
    5302:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5304:	4620      	mov	r0, r4
    5306:	4b18      	ldr	r3, [pc, #96]	; (5368 <xQueueSemaphoreTake+0x1c0>)
    5308:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    530a:	4b18      	ldr	r3, [pc, #96]	; (536c <xQueueSemaphoreTake+0x1c4>)
    530c:	4798      	blx	r3
    530e:	2800      	cmp	r0, #0
    5310:	d1c2      	bne.n	5298 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    5312:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5316:	f8c8 3000 	str.w	r3, [r8]
    531a:	f3bf 8f4f 	dsb	sy
    531e:	f3bf 8f6f 	isb	sy
    5322:	e7b9      	b.n	5298 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    5324:	2d00      	cmp	r5, #0
    5326:	d08b      	beq.n	5240 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    5328:	4b09      	ldr	r3, [pc, #36]	; (5350 <xQueueSemaphoreTake+0x1a8>)
    532a:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    532c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    532e:	b153      	cbz	r3, 5346 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    5330:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5332:	6819      	ldr	r1, [r3, #0]
    5334:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    5338:	6860      	ldr	r0, [r4, #4]
    533a:	4b11      	ldr	r3, [pc, #68]	; (5380 <xQueueSemaphoreTake+0x1d8>)
    533c:	4798      	blx	r3
						taskEXIT_CRITICAL();
    533e:	4b08      	ldr	r3, [pc, #32]	; (5360 <xQueueSemaphoreTake+0x1b8>)
    5340:	4798      	blx	r3
				return errQUEUE_EMPTY;
    5342:	2500      	movs	r5, #0
    5344:	e77c      	b.n	5240 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    5346:	2100      	movs	r1, #0
    5348:	e7f6      	b.n	5338 <xQueueSemaphoreTake+0x190>
    534a:	bf00      	nop
    534c:	00005d21 	.word	0x00005d21
    5350:	00004665 	.word	0x00004665
    5354:	00005f2d 	.word	0x00005f2d
    5358:	00005be1 	.word	0x00005be1
    535c:	e000ed04 	.word	0xe000ed04
    5360:	000046a9 	.word	0x000046a9
    5364:	00005d41 	.word	0x00005d41
    5368:	00004b81 	.word	0x00004b81
    536c:	00005895 	.word	0x00005895
    5370:	00004a35 	.word	0x00004a35
    5374:	0000574d 	.word	0x0000574d
    5378:	00005c85 	.word	0x00005c85
    537c:	00005b61 	.word	0x00005b61
    5380:	00005e81 	.word	0x00005e81
    5384:	00005c71 	.word	0x00005c71

00005388 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    5388:	b940      	cbnz	r0, 539c <uxQueueMessagesWaiting+0x14>
    538a:	f04f 0380 	mov.w	r3, #128	; 0x80
    538e:	f383 8811 	msr	BASEPRI, r3
    5392:	f3bf 8f6f 	isb	sy
    5396:	f3bf 8f4f 	dsb	sy
    539a:	e7fe      	b.n	539a <uxQueueMessagesWaiting+0x12>
{
    539c:	b510      	push	{r4, lr}
    539e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    53a0:	4b03      	ldr	r3, [pc, #12]	; (53b0 <uxQueueMessagesWaiting+0x28>)
    53a2:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    53a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    53a6:	4b03      	ldr	r3, [pc, #12]	; (53b4 <uxQueueMessagesWaiting+0x2c>)
    53a8:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    53aa:	4620      	mov	r0, r4
    53ac:	bd10      	pop	{r4, pc}
    53ae:	bf00      	nop
    53b0:	00004665 	.word	0x00004665
    53b4:	000046a9 	.word	0x000046a9

000053b8 <vQueueWaitForMessageRestricted>:
{
    53b8:	b570      	push	{r4, r5, r6, lr}
    53ba:	4604      	mov	r4, r0
    53bc:	460d      	mov	r5, r1
    53be:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    53c0:	4b11      	ldr	r3, [pc, #68]	; (5408 <vQueueWaitForMessageRestricted+0x50>)
    53c2:	4798      	blx	r3
    53c4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    53c8:	b25b      	sxtb	r3, r3
    53ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    53ce:	bf04      	itt	eq
    53d0:	2300      	moveq	r3, #0
    53d2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    53d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    53da:	b25b      	sxtb	r3, r3
    53dc:	f1b3 3fff 	cmp.w	r3, #4294967295
    53e0:	bf04      	itt	eq
    53e2:	2300      	moveq	r3, #0
    53e4:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    53e8:	4b08      	ldr	r3, [pc, #32]	; (540c <vQueueWaitForMessageRestricted+0x54>)
    53ea:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    53ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    53ee:	b11b      	cbz	r3, 53f8 <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    53f0:	4620      	mov	r0, r4
    53f2:	4b07      	ldr	r3, [pc, #28]	; (5410 <vQueueWaitForMessageRestricted+0x58>)
    53f4:	4798      	blx	r3
    53f6:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    53f8:	4632      	mov	r2, r6
    53fa:	4629      	mov	r1, r5
    53fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5400:	4b04      	ldr	r3, [pc, #16]	; (5414 <vQueueWaitForMessageRestricted+0x5c>)
    5402:	4798      	blx	r3
    5404:	e7f4      	b.n	53f0 <vQueueWaitForMessageRestricted+0x38>
    5406:	bf00      	nop
    5408:	00004665 	.word	0x00004665
    540c:	000046a9 	.word	0x000046a9
    5410:	00004b81 	.word	0x00004b81
    5414:	00005b9d 	.word	0x00005b9d

00005418 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5418:	4a06      	ldr	r2, [pc, #24]	; (5434 <prvIdleTask+0x1c>)
				taskYIELD();
    541a:	4807      	ldr	r0, [pc, #28]	; (5438 <prvIdleTask+0x20>)
    541c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5420:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5422:	2b01      	cmp	r3, #1
    5424:	d9fc      	bls.n	5420 <prvIdleTask+0x8>
				taskYIELD();
    5426:	6001      	str	r1, [r0, #0]
    5428:	f3bf 8f4f 	dsb	sy
    542c:	f3bf 8f6f 	isb	sy
    5430:	e7f6      	b.n	5420 <prvIdleTask+0x8>
    5432:	bf00      	nop
    5434:	2000332c 	.word	0x2000332c
    5438:	e000ed04 	.word	0xe000ed04

0000543c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    543c:	4b09      	ldr	r3, [pc, #36]	; (5464 <prvResetNextTaskUnblockTime+0x28>)
    543e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    5442:	681b      	ldr	r3, [r3, #0]
    5444:	b143      	cbz	r3, 5458 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5446:	4b07      	ldr	r3, [pc, #28]	; (5464 <prvResetNextTaskUnblockTime+0x28>)
    5448:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    544c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    544e:	68d2      	ldr	r2, [r2, #12]
    5450:	6852      	ldr	r2, [r2, #4]
    5452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5456:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    5458:	f04f 32ff 	mov.w	r2, #4294967295
    545c:	4b01      	ldr	r3, [pc, #4]	; (5464 <prvResetNextTaskUnblockTime+0x28>)
    545e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5462:	4770      	bx	lr
    5464:	2000332c 	.word	0x2000332c

00005468 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    5468:	b570      	push	{r4, r5, r6, lr}
    546a:	4604      	mov	r4, r0
    546c:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    546e:	4b1a      	ldr	r3, [pc, #104]	; (54d8 <prvAddCurrentTaskToDelayedList+0x70>)
    5470:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    5474:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    5478:	3004      	adds	r0, #4
    547a:	4b18      	ldr	r3, [pc, #96]	; (54dc <prvAddCurrentTaskToDelayedList+0x74>)
    547c:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    547e:	f1b4 3fff 	cmp.w	r4, #4294967295
    5482:	d016      	beq.n	54b2 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5484:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    5486:	4b14      	ldr	r3, [pc, #80]	; (54d8 <prvAddCurrentTaskToDelayedList+0x70>)
    5488:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    548c:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    548e:	42a5      	cmp	r5, r4
    5490:	d818      	bhi.n	54c4 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    5492:	4d11      	ldr	r5, [pc, #68]	; (54d8 <prvAddCurrentTaskToDelayedList+0x70>)
    5494:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    5498:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    549c:	3104      	adds	r1, #4
    549e:	4b10      	ldr	r3, [pc, #64]	; (54e0 <prvAddCurrentTaskToDelayedList+0x78>)
    54a0:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    54a2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    54a6:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    54a8:	bf3c      	itt	cc
    54aa:	462b      	movcc	r3, r5
    54ac:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    54b0:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    54b2:	2e00      	cmp	r6, #0
    54b4:	d0e6      	beq.n	5484 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    54b6:	4808      	ldr	r0, [pc, #32]	; (54d8 <prvAddCurrentTaskToDelayedList+0x70>)
    54b8:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    54bc:	3104      	adds	r1, #4
    54be:	4b09      	ldr	r3, [pc, #36]	; (54e4 <prvAddCurrentTaskToDelayedList+0x7c>)
    54c0:	4798      	blx	r3
    54c2:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    54c4:	4b04      	ldr	r3, [pc, #16]	; (54d8 <prvAddCurrentTaskToDelayedList+0x70>)
    54c6:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    54ca:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    54ce:	3104      	adds	r1, #4
    54d0:	4b03      	ldr	r3, [pc, #12]	; (54e0 <prvAddCurrentTaskToDelayedList+0x78>)
    54d2:	4798      	blx	r3
    54d4:	bd70      	pop	{r4, r5, r6, pc}
    54d6:	bf00      	nop
    54d8:	2000332c 	.word	0x2000332c
    54dc:	0000456d 	.word	0x0000456d
    54e0:	00004539 	.word	0x00004539
    54e4:	00004521 	.word	0x00004521

000054e8 <xTaskCreate>:
{
    54e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54ec:	b083      	sub	sp, #12
    54ee:	4683      	mov	fp, r0
    54f0:	460d      	mov	r5, r1
    54f2:	9301      	str	r3, [sp, #4]
    54f4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    54f8:	0096      	lsls	r6, r2, #2
    54fa:	4630      	mov	r0, r6
    54fc:	4b66      	ldr	r3, [pc, #408]	; (5698 <xTaskCreate+0x1b0>)
    54fe:	4798      	blx	r3
		if (pxStack != NULL) {
    5500:	2800      	cmp	r0, #0
    5502:	f000 8096 	beq.w	5632 <xTaskCreate+0x14a>
    5506:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    5508:	2054      	movs	r0, #84	; 0x54
    550a:	4b63      	ldr	r3, [pc, #396]	; (5698 <xTaskCreate+0x1b0>)
    550c:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    550e:	4604      	mov	r4, r0
    5510:	2800      	cmp	r0, #0
    5512:	f000 808b 	beq.w	562c <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    5516:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    5518:	4632      	mov	r2, r6
    551a:	21a5      	movs	r1, #165	; 0xa5
    551c:	4638      	mov	r0, r7
    551e:	4b5f      	ldr	r3, [pc, #380]	; (569c <xTaskCreate+0x1b4>)
    5520:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    5522:	3e04      	subs	r6, #4
    5524:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5526:	441e      	add	r6, r3
		                      & (~(
    5528:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    552c:	782b      	ldrb	r3, [r5, #0]
    552e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    5532:	782b      	ldrb	r3, [r5, #0]
    5534:	b15b      	cbz	r3, 554e <xTaskCreate+0x66>
    5536:	462b      	mov	r3, r5
    5538:	f104 0235 	add.w	r2, r4, #53	; 0x35
    553c:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    553e:	7858      	ldrb	r0, [r3, #1]
    5540:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    5544:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    5548:	b108      	cbz	r0, 554e <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    554a:	4299      	cmp	r1, r3
    554c:	d1f7      	bne.n	553e <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    554e:	2700      	movs	r7, #0
    5550:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    5554:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5556:	2d04      	cmp	r5, #4
    5558:	bf28      	it	cs
    555a:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    555c:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    555e:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    5560:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    5562:	f104 0804 	add.w	r8, r4, #4
    5566:	4640      	mov	r0, r8
    5568:	f8df 9154 	ldr.w	r9, [pc, #340]	; 56c0 <xTaskCreate+0x1d8>
    556c:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    556e:	f104 0018 	add.w	r0, r4, #24
    5572:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    5574:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    5576:	f1c5 0505 	rsb	r5, r5, #5
    557a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    557c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    557e:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    5580:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    5584:	9a01      	ldr	r2, [sp, #4]
    5586:	4659      	mov	r1, fp
    5588:	4630      	mov	r0, r6
    558a:	4b45      	ldr	r3, [pc, #276]	; (56a0 <xTaskCreate+0x1b8>)
    558c:	4798      	blx	r3
    558e:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    5590:	f1ba 0f00 	cmp.w	sl, #0
    5594:	d001      	beq.n	559a <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    5596:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    559a:	4b42      	ldr	r3, [pc, #264]	; (56a4 <xTaskCreate+0x1bc>)
    559c:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    559e:	4b42      	ldr	r3, [pc, #264]	; (56a8 <xTaskCreate+0x1c0>)
    55a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    55a4:	3201      	adds	r2, #1
    55a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    55aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    55ae:	2b00      	cmp	r3, #0
    55b0:	d042      	beq.n	5638 <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    55b2:	4b3d      	ldr	r3, [pc, #244]	; (56a8 <xTaskCreate+0x1c0>)
    55b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    55b8:	b94b      	cbnz	r3, 55ce <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    55ba:	4b3b      	ldr	r3, [pc, #236]	; (56a8 <xTaskCreate+0x1c0>)
    55bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    55c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    55c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    55c4:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    55c6:	bf9c      	itt	ls
    55c8:	4b37      	ldrls	r3, [pc, #220]	; (56a8 <xTaskCreate+0x1c0>)
    55ca:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    55ce:	4a36      	ldr	r2, [pc, #216]	; (56a8 <xTaskCreate+0x1c0>)
    55d0:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    55d4:	3301      	adds	r3, #1
    55d6:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    55da:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    55dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    55de:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    55e2:	4293      	cmp	r3, r2
    55e4:	bf84      	itt	hi
    55e6:	4a30      	ldrhi	r2, [pc, #192]	; (56a8 <xTaskCreate+0x1c0>)
    55e8:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    55ec:	4d2e      	ldr	r5, [pc, #184]	; (56a8 <xTaskCreate+0x1c0>)
    55ee:	f105 0028 	add.w	r0, r5, #40	; 0x28
    55f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    55f6:	4641      	mov	r1, r8
    55f8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    55fc:	4b2b      	ldr	r3, [pc, #172]	; (56ac <xTaskCreate+0x1c4>)
    55fe:	4798      	blx	r3
	taskEXIT_CRITICAL();
    5600:	4b2b      	ldr	r3, [pc, #172]	; (56b0 <xTaskCreate+0x1c8>)
    5602:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    5604:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    5608:	2b00      	cmp	r3, #0
    560a:	d03f      	beq.n	568c <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    560c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5612:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5614:	429a      	cmp	r2, r3
    5616:	d23d      	bcs.n	5694 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    5618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    561c:	4b25      	ldr	r3, [pc, #148]	; (56b4 <xTaskCreate+0x1cc>)
    561e:	601a      	str	r2, [r3, #0]
    5620:	f3bf 8f4f 	dsb	sy
    5624:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    5628:	2001      	movs	r0, #1
    562a:	e030      	b.n	568e <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    562c:	4638      	mov	r0, r7
    562e:	4b22      	ldr	r3, [pc, #136]	; (56b8 <xTaskCreate+0x1d0>)
    5630:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    5632:	f04f 30ff 	mov.w	r0, #4294967295
    5636:	e02a      	b.n	568e <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    5638:	4b1b      	ldr	r3, [pc, #108]	; (56a8 <xTaskCreate+0x1c0>)
    563a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    563e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5642:	2b01      	cmp	r3, #1
    5644:	d1c3      	bne.n	55ce <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    5646:	4d18      	ldr	r5, [pc, #96]	; (56a8 <xTaskCreate+0x1c0>)
    5648:	f105 0028 	add.w	r0, r5, #40	; 0x28
    564c:	4e1b      	ldr	r6, [pc, #108]	; (56bc <xTaskCreate+0x1d4>)
    564e:	47b0      	blx	r6
    5650:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    5654:	47b0      	blx	r6
    5656:	f105 0050 	add.w	r0, r5, #80	; 0x50
    565a:	47b0      	blx	r6
    565c:	f105 0064 	add.w	r0, r5, #100	; 0x64
    5660:	47b0      	blx	r6
    5662:	f105 0078 	add.w	r0, r5, #120	; 0x78
    5666:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    5668:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    566c:	4648      	mov	r0, r9
    566e:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    5670:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    5674:	4638      	mov	r0, r7
    5676:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    5678:	f105 0014 	add.w	r0, r5, #20
    567c:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    567e:	4628      	mov	r0, r5
    5680:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    5682:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5686:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    568a:	e7a0      	b.n	55ce <xTaskCreate+0xe6>
		xReturn = pdPASS;
    568c:	2001      	movs	r0, #1
}
    568e:	b003      	add	sp, #12
    5690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    5694:	2001      	movs	r0, #1
	return xReturn;
    5696:	e7fa      	b.n	568e <xTaskCreate+0x1a6>
    5698:	00004915 	.word	0x00004915
    569c:	000065f1 	.word	0x000065f1
    56a0:	00004611 	.word	0x00004611
    56a4:	00004665 	.word	0x00004665
    56a8:	2000332c 	.word	0x2000332c
    56ac:	00004521 	.word	0x00004521
    56b0:	000046a9 	.word	0x000046a9
    56b4:	e000ed04 	.word	0xe000ed04
    56b8:	000049e9 	.word	0x000049e9
    56bc:	00004505 	.word	0x00004505
    56c0:	0000451b 	.word	0x0000451b

000056c4 <vTaskStartScheduler>:
{
    56c4:	b510      	push	{r4, lr}
    56c6:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    56c8:	4b19      	ldr	r3, [pc, #100]	; (5730 <vTaskStartScheduler+0x6c>)
    56ca:	9301      	str	r3, [sp, #4]
    56cc:	2300      	movs	r3, #0
    56ce:	9300      	str	r3, [sp, #0]
    56d0:	2280      	movs	r2, #128	; 0x80
    56d2:	4918      	ldr	r1, [pc, #96]	; (5734 <vTaskStartScheduler+0x70>)
    56d4:	4818      	ldr	r0, [pc, #96]	; (5738 <vTaskStartScheduler+0x74>)
    56d6:	4c19      	ldr	r4, [pc, #100]	; (573c <vTaskStartScheduler+0x78>)
    56d8:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    56da:	2801      	cmp	r0, #1
    56dc:	d004      	beq.n	56e8 <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    56de:	f1b0 3fff 	cmp.w	r0, #4294967295
    56e2:	d01b      	beq.n	571c <vTaskStartScheduler+0x58>
}
    56e4:	b002      	add	sp, #8
    56e6:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    56e8:	4b15      	ldr	r3, [pc, #84]	; (5740 <vTaskStartScheduler+0x7c>)
    56ea:	4798      	blx	r3
	if (xReturn == pdPASS) {
    56ec:	2801      	cmp	r0, #1
    56ee:	d1f6      	bne.n	56de <vTaskStartScheduler+0x1a>
    56f0:	f04f 0380 	mov.w	r3, #128	; 0x80
    56f4:	f383 8811 	msr	BASEPRI, r3
    56f8:	f3bf 8f6f 	isb	sy
    56fc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    5700:	4b10      	ldr	r3, [pc, #64]	; (5744 <vTaskStartScheduler+0x80>)
    5702:	f04f 32ff 	mov.w	r2, #4294967295
    5706:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    570a:	2201      	movs	r2, #1
    570c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    5710:	2200      	movs	r2, #0
    5712:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    5716:	4b0c      	ldr	r3, [pc, #48]	; (5748 <vTaskStartScheduler+0x84>)
    5718:	4798      	blx	r3
    571a:	e7e3      	b.n	56e4 <vTaskStartScheduler+0x20>
    571c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5720:	f383 8811 	msr	BASEPRI, r3
    5724:	f3bf 8f6f 	isb	sy
    5728:	f3bf 8f4f 	dsb	sy
    572c:	e7fe      	b.n	572c <vTaskStartScheduler+0x68>
    572e:	bf00      	nop
    5730:	20003408 	.word	0x20003408
    5734:	00008538 	.word	0x00008538
    5738:	00005419 	.word	0x00005419
    573c:	000054e9 	.word	0x000054e9
    5740:	000061b9 	.word	0x000061b9
    5744:	2000332c 	.word	0x2000332c
    5748:	00004799 	.word	0x00004799

0000574c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    574c:	4a03      	ldr	r2, [pc, #12]	; (575c <vTaskSuspendAll+0x10>)
    574e:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    5752:	3301      	adds	r3, #1
    5754:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    5758:	4770      	bx	lr
    575a:	bf00      	nop
    575c:	2000332c 	.word	0x2000332c

00005760 <xTaskGetTickCount>:
		xTicks = xTickCount;
    5760:	4b01      	ldr	r3, [pc, #4]	; (5768 <xTaskGetTickCount+0x8>)
    5762:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    5766:	4770      	bx	lr
    5768:	2000332c 	.word	0x2000332c

0000576c <xTaskIncrementTick>:
{
    576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5770:	4b44      	ldr	r3, [pc, #272]	; (5884 <xTaskIncrementTick+0x118>)
    5772:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5776:	2b00      	cmp	r3, #0
    5778:	d173      	bne.n	5862 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    577a:	4b42      	ldr	r3, [pc, #264]	; (5884 <xTaskIncrementTick+0x118>)
    577c:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    5780:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    5782:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    5786:	b9e6      	cbnz	r6, 57c2 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    5788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    578c:	681b      	ldr	r3, [r3, #0]
    578e:	b143      	cbz	r3, 57a2 <xTaskIncrementTick+0x36>
    5790:	f04f 0380 	mov.w	r3, #128	; 0x80
    5794:	f383 8811 	msr	BASEPRI, r3
    5798:	f3bf 8f6f 	isb	sy
    579c:	f3bf 8f4f 	dsb	sy
    57a0:	e7fe      	b.n	57a0 <xTaskIncrementTick+0x34>
    57a2:	4b38      	ldr	r3, [pc, #224]	; (5884 <xTaskIncrementTick+0x118>)
    57a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    57a8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    57ac:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    57b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    57b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    57b8:	3201      	adds	r2, #1
    57ba:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    57be:	4b32      	ldr	r3, [pc, #200]	; (5888 <xTaskIncrementTick+0x11c>)
    57c0:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    57c2:	4b30      	ldr	r3, [pc, #192]	; (5884 <xTaskIncrementTick+0x118>)
    57c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    57c8:	429e      	cmp	r6, r3
    57ca:	d20d      	bcs.n	57e8 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    57cc:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    57ce:	4b2d      	ldr	r3, [pc, #180]	; (5884 <xTaskIncrementTick+0x118>)
    57d0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    57d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    57d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    57da:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    57de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    57e0:	2b02      	cmp	r3, #2
    57e2:	bf28      	it	cs
    57e4:	2401      	movcs	r4, #1
    57e6:	e043      	b.n	5870 <xTaskIncrementTick+0x104>
    57e8:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    57ea:	4d26      	ldr	r5, [pc, #152]	; (5884 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    57ec:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5890 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    57f0:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    57f4:	e021      	b.n	583a <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    57f6:	f04f 32ff 	mov.w	r2, #4294967295
    57fa:	4b22      	ldr	r3, [pc, #136]	; (5884 <xTaskIncrementTick+0x118>)
    57fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    5800:	e7e5      	b.n	57ce <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    5802:	4a20      	ldr	r2, [pc, #128]	; (5884 <xTaskIncrementTick+0x118>)
    5804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    5808:	e7e1      	b.n	57ce <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    580a:	f107 0018 	add.w	r0, r7, #24
    580e:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    5810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5812:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    5816:	4298      	cmp	r0, r3
    5818:	bf88      	it	hi
    581a:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    581e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5822:	4649      	mov	r1, r9
    5824:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    5828:	4b18      	ldr	r3, [pc, #96]	; (588c <xTaskIncrementTick+0x120>)
    582a:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    582c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    5834:	429a      	cmp	r2, r3
    5836:	bf28      	it	cs
    5838:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    583a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    583e:	681b      	ldr	r3, [r3, #0]
    5840:	2b00      	cmp	r3, #0
    5842:	d0d8      	beq.n	57f6 <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5844:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    5848:	68db      	ldr	r3, [r3, #12]
    584a:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    584c:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    584e:	429e      	cmp	r6, r3
    5850:	d3d7      	bcc.n	5802 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5852:	f107 0904 	add.w	r9, r7, #4
    5856:	4648      	mov	r0, r9
    5858:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    585c:	2b00      	cmp	r3, #0
    585e:	d1d4      	bne.n	580a <xTaskIncrementTick+0x9e>
    5860:	e7d6      	b.n	5810 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    5862:	4a08      	ldr	r2, [pc, #32]	; (5884 <xTaskIncrementTick+0x118>)
    5864:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    5868:	3301      	adds	r3, #1
    586a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    586e:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    5870:	4b04      	ldr	r3, [pc, #16]	; (5884 <xTaskIncrementTick+0x118>)
    5872:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    5876:	2b00      	cmp	r3, #0
}
    5878:	bf0c      	ite	eq
    587a:	4620      	moveq	r0, r4
    587c:	2001      	movne	r0, #1
    587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5882:	bf00      	nop
    5884:	2000332c 	.word	0x2000332c
    5888:	0000543d 	.word	0x0000543d
    588c:	00004521 	.word	0x00004521
    5890:	0000456d 	.word	0x0000456d

00005894 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    5894:	4b3a      	ldr	r3, [pc, #232]	; (5980 <xTaskResumeAll+0xec>)
    5896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    589a:	b943      	cbnz	r3, 58ae <xTaskResumeAll+0x1a>
    589c:	f04f 0380 	mov.w	r3, #128	; 0x80
    58a0:	f383 8811 	msr	BASEPRI, r3
    58a4:	f3bf 8f6f 	isb	sy
    58a8:	f3bf 8f4f 	dsb	sy
    58ac:	e7fe      	b.n	58ac <xTaskResumeAll+0x18>
{
    58ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    58b2:	4b34      	ldr	r3, [pc, #208]	; (5984 <xTaskResumeAll+0xf0>)
    58b4:	4798      	blx	r3
		--uxSchedulerSuspended;
    58b6:	4b32      	ldr	r3, [pc, #200]	; (5980 <xTaskResumeAll+0xec>)
    58b8:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    58bc:	3a01      	subs	r2, #1
    58be:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    58c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    58c6:	2b00      	cmp	r3, #0
    58c8:	d155      	bne.n	5976 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    58ca:	4b2d      	ldr	r3, [pc, #180]	; (5980 <xTaskResumeAll+0xec>)
    58cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    58d0:	b92b      	cbnz	r3, 58de <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    58d2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    58d4:	4b2c      	ldr	r3, [pc, #176]	; (5988 <xTaskResumeAll+0xf4>)
    58d6:	4798      	blx	r3
}
    58d8:	4620      	mov	r0, r4
    58da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58de:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    58e0:	4c27      	ldr	r4, [pc, #156]	; (5980 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    58e2:	4e2a      	ldr	r6, [pc, #168]	; (598c <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    58e4:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    58e8:	6963      	ldr	r3, [r4, #20]
    58ea:	b1fb      	cbz	r3, 592c <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    58ec:	6a23      	ldr	r3, [r4, #32]
    58ee:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    58f0:	f105 0018 	add.w	r0, r5, #24
    58f4:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    58f6:	1d2f      	adds	r7, r5, #4
    58f8:	4638      	mov	r0, r7
    58fa:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    58fc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    58fe:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    5902:	4298      	cmp	r0, r3
    5904:	bf88      	it	hi
    5906:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    590a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    590e:	4639      	mov	r1, r7
    5910:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    5914:	4b1e      	ldr	r3, [pc, #120]	; (5990 <xTaskResumeAll+0xfc>)
    5916:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5918:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    591c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5920:	429a      	cmp	r2, r3
    5922:	d3e1      	bcc.n	58e8 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    5924:	2301      	movs	r3, #1
    5926:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    592a:	e7dd      	b.n	58e8 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    592c:	b10d      	cbz	r5, 5932 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    592e:	4b19      	ldr	r3, [pc, #100]	; (5994 <xTaskResumeAll+0x100>)
    5930:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    5932:	4b13      	ldr	r3, [pc, #76]	; (5980 <xTaskResumeAll+0xec>)
    5934:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    5938:	b17c      	cbz	r4, 595a <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    593a:	4f17      	ldr	r7, [pc, #92]	; (5998 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    593c:	461e      	mov	r6, r3
    593e:	2501      	movs	r5, #1
    5940:	e001      	b.n	5946 <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    5942:	3c01      	subs	r4, #1
    5944:	d005      	beq.n	5952 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    5946:	47b8      	blx	r7
    5948:	2800      	cmp	r0, #0
    594a:	d0fa      	beq.n	5942 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    594c:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    5950:	e7f7      	b.n	5942 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    5952:	2200      	movs	r2, #0
    5954:	4b0a      	ldr	r3, [pc, #40]	; (5980 <xTaskResumeAll+0xec>)
    5956:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    595a:	4b09      	ldr	r3, [pc, #36]	; (5980 <xTaskResumeAll+0xec>)
    595c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    5960:	b15b      	cbz	r3, 597a <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    5962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5966:	4b0d      	ldr	r3, [pc, #52]	; (599c <xTaskResumeAll+0x108>)
    5968:	601a      	str	r2, [r3, #0]
    596a:	f3bf 8f4f 	dsb	sy
    596e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    5972:	2401      	movs	r4, #1
    5974:	e7ae      	b.n	58d4 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    5976:	2400      	movs	r4, #0
    5978:	e7ac      	b.n	58d4 <xTaskResumeAll+0x40>
    597a:	2400      	movs	r4, #0
    597c:	e7aa      	b.n	58d4 <xTaskResumeAll+0x40>
    597e:	bf00      	nop
    5980:	2000332c 	.word	0x2000332c
    5984:	00004665 	.word	0x00004665
    5988:	000046a9 	.word	0x000046a9
    598c:	0000456d 	.word	0x0000456d
    5990:	00004521 	.word	0x00004521
    5994:	0000543d 	.word	0x0000543d
    5998:	0000576d 	.word	0x0000576d
    599c:	e000ed04 	.word	0xe000ed04

000059a0 <vTaskDelayUntil>:
{
    59a0:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxPreviousWakeTime);
    59a2:	b150      	cbz	r0, 59ba <vTaskDelayUntil+0x1a>
    59a4:	4605      	mov	r5, r0
	configASSERT((xTimeIncrement > 0U));
    59a6:	b989      	cbnz	r1, 59cc <vTaskDelayUntil+0x2c>
    59a8:	f04f 0380 	mov.w	r3, #128	; 0x80
    59ac:	f383 8811 	msr	BASEPRI, r3
    59b0:	f3bf 8f6f 	isb	sy
    59b4:	f3bf 8f4f 	dsb	sy
    59b8:	e7fe      	b.n	59b8 <vTaskDelayUntil+0x18>
    59ba:	f04f 0380 	mov.w	r3, #128	; 0x80
    59be:	f383 8811 	msr	BASEPRI, r3
    59c2:	f3bf 8f6f 	isb	sy
    59c6:	f3bf 8f4f 	dsb	sy
    59ca:	e7fe      	b.n	59ca <vTaskDelayUntil+0x2a>
	configASSERT(uxSchedulerSuspended == 0);
    59cc:	4b1a      	ldr	r3, [pc, #104]	; (5a38 <vTaskDelayUntil+0x98>)
    59ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    59d2:	b143      	cbz	r3, 59e6 <vTaskDelayUntil+0x46>
    59d4:	f04f 0380 	mov.w	r3, #128	; 0x80
    59d8:	f383 8811 	msr	BASEPRI, r3
    59dc:	f3bf 8f6f 	isb	sy
    59e0:	f3bf 8f4f 	dsb	sy
    59e4:	e7fe      	b.n	59e4 <vTaskDelayUntil+0x44>
    59e6:	460c      	mov	r4, r1
	vTaskSuspendAll();
    59e8:	4b14      	ldr	r3, [pc, #80]	; (5a3c <vTaskDelayUntil+0x9c>)
    59ea:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    59ec:	4b12      	ldr	r3, [pc, #72]	; (5a38 <vTaskDelayUntil+0x98>)
    59ee:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    59f2:	682a      	ldr	r2, [r5, #0]
    59f4:	4414      	add	r4, r2
		if (xConstTickCount < *pxPreviousWakeTime) {
    59f6:	4290      	cmp	r0, r2
    59f8:	d214      	bcs.n	5a24 <vTaskDelayUntil+0x84>
			if ((xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount)) {
    59fa:	42a2      	cmp	r2, r4
    59fc:	d916      	bls.n	5a2c <vTaskDelayUntil+0x8c>
		*pxPreviousWakeTime = xTimeToWake;
    59fe:	602c      	str	r4, [r5, #0]
		if (xShouldDelay != pdFALSE) {
    5a00:	42a0      	cmp	r0, r4
    5a02:	d203      	bcs.n	5a0c <vTaskDelayUntil+0x6c>
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount, pdFALSE);
    5a04:	2100      	movs	r1, #0
    5a06:	1a20      	subs	r0, r4, r0
    5a08:	4b0d      	ldr	r3, [pc, #52]	; (5a40 <vTaskDelayUntil+0xa0>)
    5a0a:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
    5a0c:	4b0d      	ldr	r3, [pc, #52]	; (5a44 <vTaskDelayUntil+0xa4>)
    5a0e:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    5a10:	b980      	cbnz	r0, 5a34 <vTaskDelayUntil+0x94>
		portYIELD_WITHIN_API();
    5a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a16:	4b0c      	ldr	r3, [pc, #48]	; (5a48 <vTaskDelayUntil+0xa8>)
    5a18:	601a      	str	r2, [r3, #0]
    5a1a:	f3bf 8f4f 	dsb	sy
    5a1e:	f3bf 8f6f 	isb	sy
}
    5a22:	bd38      	pop	{r3, r4, r5, pc}
			if ((xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount)) {
    5a24:	42a2      	cmp	r2, r4
    5a26:	d803      	bhi.n	5a30 <vTaskDelayUntil+0x90>
    5a28:	42a0      	cmp	r0, r4
    5a2a:	d301      	bcc.n	5a30 <vTaskDelayUntil+0x90>
		*pxPreviousWakeTime = xTimeToWake;
    5a2c:	602c      	str	r4, [r5, #0]
    5a2e:	e7ed      	b.n	5a0c <vTaskDelayUntil+0x6c>
    5a30:	602c      	str	r4, [r5, #0]
    5a32:	e7e7      	b.n	5a04 <vTaskDelayUntil+0x64>
    5a34:	bd38      	pop	{r3, r4, r5, pc}
    5a36:	bf00      	nop
    5a38:	2000332c 	.word	0x2000332c
    5a3c:	0000574d 	.word	0x0000574d
    5a40:	00005469 	.word	0x00005469
    5a44:	00005895 	.word	0x00005895
    5a48:	e000ed04 	.word	0xe000ed04

00005a4c <vTaskDelay>:
{
    5a4c:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    5a4e:	b1b0      	cbz	r0, 5a7e <vTaskDelay+0x32>
    5a50:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    5a52:	4b0f      	ldr	r3, [pc, #60]	; (5a90 <vTaskDelay+0x44>)
    5a54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5a58:	b143      	cbz	r3, 5a6c <vTaskDelay+0x20>
    5a5a:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a5e:	f383 8811 	msr	BASEPRI, r3
    5a62:	f3bf 8f6f 	isb	sy
    5a66:	f3bf 8f4f 	dsb	sy
    5a6a:	e7fe      	b.n	5a6a <vTaskDelay+0x1e>
		vTaskSuspendAll();
    5a6c:	4b09      	ldr	r3, [pc, #36]	; (5a94 <vTaskDelay+0x48>)
    5a6e:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    5a70:	2100      	movs	r1, #0
    5a72:	4620      	mov	r0, r4
    5a74:	4b08      	ldr	r3, [pc, #32]	; (5a98 <vTaskDelay+0x4c>)
    5a76:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    5a78:	4b08      	ldr	r3, [pc, #32]	; (5a9c <vTaskDelay+0x50>)
    5a7a:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    5a7c:	b938      	cbnz	r0, 5a8e <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    5a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a82:	4b07      	ldr	r3, [pc, #28]	; (5aa0 <vTaskDelay+0x54>)
    5a84:	601a      	str	r2, [r3, #0]
    5a86:	f3bf 8f4f 	dsb	sy
    5a8a:	f3bf 8f6f 	isb	sy
    5a8e:	bd10      	pop	{r4, pc}
    5a90:	2000332c 	.word	0x2000332c
    5a94:	0000574d 	.word	0x0000574d
    5a98:	00005469 	.word	0x00005469
    5a9c:	00005895 	.word	0x00005895
    5aa0:	e000ed04 	.word	0xe000ed04

00005aa4 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    5aa4:	4b2c      	ldr	r3, [pc, #176]	; (5b58 <vTaskSwitchContext+0xb4>)
    5aa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5aaa:	bb8b      	cbnz	r3, 5b10 <vTaskSwitchContext+0x6c>
{
    5aac:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    5aae:	4b2a      	ldr	r3, [pc, #168]	; (5b58 <vTaskSwitchContext+0xb4>)
    5ab0:	2200      	movs	r2, #0
    5ab2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    5ab6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5abe:	6812      	ldr	r2, [r2, #0]
    5ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5ac2:	429a      	cmp	r2, r3
    5ac4:	d807      	bhi.n	5ad6 <vTaskSwitchContext+0x32>
    5ac6:	4b24      	ldr	r3, [pc, #144]	; (5b58 <vTaskSwitchContext+0xb4>)
    5ac8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    5acc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    5ad0:	3134      	adds	r1, #52	; 0x34
    5ad2:	4b22      	ldr	r3, [pc, #136]	; (5b5c <vTaskSwitchContext+0xb8>)
    5ad4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5ad6:	4a20      	ldr	r2, [pc, #128]	; (5b58 <vTaskSwitchContext+0xb4>)
    5ad8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    5adc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    5ae0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5ae4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    5ae6:	b9c2      	cbnz	r2, 5b1a <vTaskSwitchContext+0x76>
    5ae8:	b14b      	cbz	r3, 5afe <vTaskSwitchContext+0x5a>
    5aea:	491b      	ldr	r1, [pc, #108]	; (5b58 <vTaskSwitchContext+0xb4>)
    5aec:	3b01      	subs	r3, #1
    5aee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    5af2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5af6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    5af8:	b97a      	cbnz	r2, 5b1a <vTaskSwitchContext+0x76>
    5afa:	2b00      	cmp	r3, #0
    5afc:	d1f6      	bne.n	5aec <vTaskSwitchContext+0x48>
    5afe:	f04f 0380 	mov.w	r3, #128	; 0x80
    5b02:	f383 8811 	msr	BASEPRI, r3
    5b06:	f3bf 8f6f 	isb	sy
    5b0a:	f3bf 8f4f 	dsb	sy
    5b0e:	e7fe      	b.n	5b0e <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    5b10:	2201      	movs	r2, #1
    5b12:	4b11      	ldr	r3, [pc, #68]	; (5b58 <vTaskSwitchContext+0xb4>)
    5b14:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    5b18:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    5b1a:	4a0f      	ldr	r2, [pc, #60]	; (5b58 <vTaskSwitchContext+0xb4>)
    5b1c:	0099      	lsls	r1, r3, #2
    5b1e:	18c8      	adds	r0, r1, r3
    5b20:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    5b24:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    5b26:	6864      	ldr	r4, [r4, #4]
    5b28:	62c4      	str	r4, [r0, #44]	; 0x2c
    5b2a:	4419      	add	r1, r3
    5b2c:	4602      	mov	r2, r0
    5b2e:	3230      	adds	r2, #48	; 0x30
    5b30:	4294      	cmp	r4, r2
    5b32:	d00b      	beq.n	5b4c <vTaskSwitchContext+0xa8>
    5b34:	4a08      	ldr	r2, [pc, #32]	; (5b58 <vTaskSwitchContext+0xb4>)
    5b36:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    5b3a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    5b3e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    5b40:	68c9      	ldr	r1, [r1, #12]
    5b42:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    5b46:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    5b4a:	bd10      	pop	{r4, pc}
    5b4c:	6860      	ldr	r0, [r4, #4]
    5b4e:	4a02      	ldr	r2, [pc, #8]	; (5b58 <vTaskSwitchContext+0xb4>)
    5b50:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5b54:	62d0      	str	r0, [r2, #44]	; 0x2c
    5b56:	e7ed      	b.n	5b34 <vTaskSwitchContext+0x90>
    5b58:	2000332c 	.word	0x2000332c
    5b5c:	000002d1 	.word	0x000002d1

00005b60 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    5b60:	b940      	cbnz	r0, 5b74 <vTaskPlaceOnEventList+0x14>
    5b62:	f04f 0380 	mov.w	r3, #128	; 0x80
    5b66:	f383 8811 	msr	BASEPRI, r3
    5b6a:	f3bf 8f6f 	isb	sy
    5b6e:	f3bf 8f4f 	dsb	sy
    5b72:	e7fe      	b.n	5b72 <vTaskPlaceOnEventList+0x12>
{
    5b74:	b510      	push	{r4, lr}
    5b76:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    5b78:	4b05      	ldr	r3, [pc, #20]	; (5b90 <vTaskPlaceOnEventList+0x30>)
    5b7a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    5b7e:	3118      	adds	r1, #24
    5b80:	4b04      	ldr	r3, [pc, #16]	; (5b94 <vTaskPlaceOnEventList+0x34>)
    5b82:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    5b84:	2101      	movs	r1, #1
    5b86:	4620      	mov	r0, r4
    5b88:	4b03      	ldr	r3, [pc, #12]	; (5b98 <vTaskPlaceOnEventList+0x38>)
    5b8a:	4798      	blx	r3
    5b8c:	bd10      	pop	{r4, pc}
    5b8e:	bf00      	nop
    5b90:	2000332c 	.word	0x2000332c
    5b94:	00004539 	.word	0x00004539
    5b98:	00005469 	.word	0x00005469

00005b9c <vTaskPlaceOnEventListRestricted>:
{
    5b9c:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    5b9e:	b180      	cbz	r0, 5bc2 <vTaskPlaceOnEventListRestricted+0x26>
    5ba0:	4614      	mov	r4, r2
    5ba2:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    5ba4:	4b0b      	ldr	r3, [pc, #44]	; (5bd4 <vTaskPlaceOnEventListRestricted+0x38>)
    5ba6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    5baa:	3118      	adds	r1, #24
    5bac:	4b0a      	ldr	r3, [pc, #40]	; (5bd8 <vTaskPlaceOnEventListRestricted+0x3c>)
    5bae:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    5bb0:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    5bb2:	4621      	mov	r1, r4
    5bb4:	bf0c      	ite	eq
    5bb6:	4628      	moveq	r0, r5
    5bb8:	f04f 30ff 	movne.w	r0, #4294967295
    5bbc:	4b07      	ldr	r3, [pc, #28]	; (5bdc <vTaskPlaceOnEventListRestricted+0x40>)
    5bbe:	4798      	blx	r3
    5bc0:	bd38      	pop	{r3, r4, r5, pc}
    5bc2:	f04f 0380 	mov.w	r3, #128	; 0x80
    5bc6:	f383 8811 	msr	BASEPRI, r3
    5bca:	f3bf 8f6f 	isb	sy
    5bce:	f3bf 8f4f 	dsb	sy
    5bd2:	e7fe      	b.n	5bd2 <vTaskPlaceOnEventListRestricted+0x36>
    5bd4:	2000332c 	.word	0x2000332c
    5bd8:	00004521 	.word	0x00004521
    5bdc:	00005469 	.word	0x00005469

00005be0 <xTaskRemoveFromEventList>:
{
    5be0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    5be2:	68c3      	ldr	r3, [r0, #12]
    5be4:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    5be6:	2c00      	cmp	r4, #0
    5be8:	d02a      	beq.n	5c40 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    5bea:	f104 0518 	add.w	r5, r4, #24
    5bee:	4628      	mov	r0, r5
    5bf0:	4b1a      	ldr	r3, [pc, #104]	; (5c5c <xTaskRemoveFromEventList+0x7c>)
    5bf2:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5bf4:	4b1a      	ldr	r3, [pc, #104]	; (5c60 <xTaskRemoveFromEventList+0x80>)
    5bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5bfa:	bb53      	cbnz	r3, 5c52 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    5bfc:	1d25      	adds	r5, r4, #4
    5bfe:	4628      	mov	r0, r5
    5c00:	4b16      	ldr	r3, [pc, #88]	; (5c5c <xTaskRemoveFromEventList+0x7c>)
    5c02:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    5c04:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5c06:	4b16      	ldr	r3, [pc, #88]	; (5c60 <xTaskRemoveFromEventList+0x80>)
    5c08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5c0c:	4298      	cmp	r0, r3
    5c0e:	bf84      	itt	hi
    5c10:	4b13      	ldrhi	r3, [pc, #76]	; (5c60 <xTaskRemoveFromEventList+0x80>)
    5c12:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5c16:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5c1a:	4629      	mov	r1, r5
    5c1c:	4b11      	ldr	r3, [pc, #68]	; (5c64 <xTaskRemoveFromEventList+0x84>)
    5c1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5c22:	4b11      	ldr	r3, [pc, #68]	; (5c68 <xTaskRemoveFromEventList+0x88>)
    5c24:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    5c26:	4b0e      	ldr	r3, [pc, #56]	; (5c60 <xTaskRemoveFromEventList+0x80>)
    5c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5c2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c30:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    5c32:	bf83      	ittte	hi
    5c34:	2001      	movhi	r0, #1
    5c36:	4b0a      	ldrhi	r3, [pc, #40]	; (5c60 <xTaskRemoveFromEventList+0x80>)
    5c38:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    5c3c:	2000      	movls	r0, #0
}
    5c3e:	bd38      	pop	{r3, r4, r5, pc}
    5c40:	f04f 0380 	mov.w	r3, #128	; 0x80
    5c44:	f383 8811 	msr	BASEPRI, r3
    5c48:	f3bf 8f6f 	isb	sy
    5c4c:	f3bf 8f4f 	dsb	sy
    5c50:	e7fe      	b.n	5c50 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    5c52:	4629      	mov	r1, r5
    5c54:	4805      	ldr	r0, [pc, #20]	; (5c6c <xTaskRemoveFromEventList+0x8c>)
    5c56:	4b04      	ldr	r3, [pc, #16]	; (5c68 <xTaskRemoveFromEventList+0x88>)
    5c58:	4798      	blx	r3
    5c5a:	e7e4      	b.n	5c26 <xTaskRemoveFromEventList+0x46>
    5c5c:	0000456d 	.word	0x0000456d
    5c60:	2000332c 	.word	0x2000332c
    5c64:	20003354 	.word	0x20003354
    5c68:	00004521 	.word	0x00004521
    5c6c:	20003340 	.word	0x20003340

00005c70 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    5c70:	4b03      	ldr	r3, [pc, #12]	; (5c80 <vTaskInternalSetTimeOutState+0x10>)
    5c72:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    5c76:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    5c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    5c7c:	6043      	str	r3, [r0, #4]
    5c7e:	4770      	bx	lr
    5c80:	2000332c 	.word	0x2000332c

00005c84 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    5c84:	b1f8      	cbz	r0, 5cc6 <xTaskCheckForTimeOut+0x42>
{
    5c86:	b570      	push	{r4, r5, r6, lr}
    5c88:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    5c8a:	b329      	cbz	r1, 5cd8 <xTaskCheckForTimeOut+0x54>
    5c8c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    5c8e:	4b1c      	ldr	r3, [pc, #112]	; (5d00 <xTaskCheckForTimeOut+0x7c>)
    5c90:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    5c92:	4b1c      	ldr	r3, [pc, #112]	; (5d04 <xTaskCheckForTimeOut+0x80>)
    5c94:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5c98:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    5c9a:	6823      	ldr	r3, [r4, #0]
    5c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5ca0:	d02a      	beq.n	5cf8 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    5ca2:	4818      	ldr	r0, [pc, #96]	; (5d04 <xTaskCheckForTimeOut+0x80>)
    5ca4:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    5ca8:	682e      	ldr	r6, [r5, #0]
    5caa:	4286      	cmp	r6, r0
    5cac:	d001      	beq.n	5cb2 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    5cae:	428a      	cmp	r2, r1
    5cb0:	d224      	bcs.n	5cfc <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    5cb2:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    5cb4:	429a      	cmp	r2, r3
    5cb6:	d318      	bcc.n	5cea <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    5cb8:	2300      	movs	r3, #0
    5cba:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    5cbc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    5cbe:	4b12      	ldr	r3, [pc, #72]	; (5d08 <xTaskCheckForTimeOut+0x84>)
    5cc0:	4798      	blx	r3
}
    5cc2:	4620      	mov	r0, r4
    5cc4:	bd70      	pop	{r4, r5, r6, pc}
    5cc6:	f04f 0380 	mov.w	r3, #128	; 0x80
    5cca:	f383 8811 	msr	BASEPRI, r3
    5cce:	f3bf 8f6f 	isb	sy
    5cd2:	f3bf 8f4f 	dsb	sy
    5cd6:	e7fe      	b.n	5cd6 <xTaskCheckForTimeOut+0x52>
    5cd8:	f04f 0380 	mov.w	r3, #128	; 0x80
    5cdc:	f383 8811 	msr	BASEPRI, r3
    5ce0:	f3bf 8f6f 	isb	sy
    5ce4:	f3bf 8f4f 	dsb	sy
    5ce8:	e7fe      	b.n	5ce8 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    5cea:	1a9b      	subs	r3, r3, r2
    5cec:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    5cee:	4628      	mov	r0, r5
    5cf0:	4b06      	ldr	r3, [pc, #24]	; (5d0c <xTaskCheckForTimeOut+0x88>)
    5cf2:	4798      	blx	r3
			xReturn = pdFALSE;
    5cf4:	2400      	movs	r4, #0
    5cf6:	e7e2      	b.n	5cbe <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    5cf8:	2400      	movs	r4, #0
    5cfa:	e7e0      	b.n	5cbe <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    5cfc:	2401      	movs	r4, #1
    5cfe:	e7de      	b.n	5cbe <xTaskCheckForTimeOut+0x3a>
    5d00:	00004665 	.word	0x00004665
    5d04:	2000332c 	.word	0x2000332c
    5d08:	000046a9 	.word	0x000046a9
    5d0c:	00005c71 	.word	0x00005c71

00005d10 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    5d10:	2201      	movs	r2, #1
    5d12:	4b02      	ldr	r3, [pc, #8]	; (5d1c <vTaskMissedYield+0xc>)
    5d14:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    5d18:	4770      	bx	lr
    5d1a:	bf00      	nop
    5d1c:	2000332c 	.word	0x2000332c

00005d20 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    5d20:	4b06      	ldr	r3, [pc, #24]	; (5d3c <xTaskGetSchedulerState+0x1c>)
    5d22:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    5d26:	b13b      	cbz	r3, 5d38 <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5d28:	4b04      	ldr	r3, [pc, #16]	; (5d3c <xTaskGetSchedulerState+0x1c>)
    5d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    5d2e:	2b00      	cmp	r3, #0
    5d30:	bf0c      	ite	eq
    5d32:	2002      	moveq	r0, #2
    5d34:	2000      	movne	r0, #0
    5d36:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    5d38:	2001      	movs	r0, #1
}
    5d3a:	4770      	bx	lr
    5d3c:	2000332c 	.word	0x2000332c

00005d40 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    5d40:	2800      	cmp	r0, #0
    5d42:	d045      	beq.n	5dd0 <xTaskPriorityInherit+0x90>
{
    5d44:	b538      	push	{r3, r4, r5, lr}
    5d46:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    5d48:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    5d4a:	4922      	ldr	r1, [pc, #136]	; (5dd4 <xTaskPriorityInherit+0x94>)
    5d4c:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    5d50:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    5d52:	428a      	cmp	r2, r1
    5d54:	d232      	bcs.n	5dbc <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    5d56:	6981      	ldr	r1, [r0, #24]
    5d58:	2900      	cmp	r1, #0
    5d5a:	db06      	blt.n	5d6a <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    5d5c:	491d      	ldr	r1, [pc, #116]	; (5dd4 <xTaskPriorityInherit+0x94>)
    5d5e:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    5d62:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    5d64:	f1c1 0105 	rsb	r1, r1, #5
    5d68:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    5d6a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5d6e:	491a      	ldr	r1, [pc, #104]	; (5dd8 <xTaskPriorityInherit+0x98>)
    5d70:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    5d74:	6969      	ldr	r1, [r5, #20]
    5d76:	4291      	cmp	r1, r2
    5d78:	d006      	beq.n	5d88 <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    5d7a:	4a16      	ldr	r2, [pc, #88]	; (5dd4 <xTaskPriorityInherit+0x94>)
    5d7c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    5d80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    5d82:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    5d84:	2001      	movs	r0, #1
    5d86:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    5d88:	1d2c      	adds	r4, r5, #4
    5d8a:	4620      	mov	r0, r4
    5d8c:	4b13      	ldr	r3, [pc, #76]	; (5ddc <xTaskPriorityInherit+0x9c>)
    5d8e:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    5d90:	4b10      	ldr	r3, [pc, #64]	; (5dd4 <xTaskPriorityInherit+0x94>)
    5d92:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5d96:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    5d98:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    5d9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5d9e:	4298      	cmp	r0, r3
    5da0:	bf84      	itt	hi
    5da2:	4b0c      	ldrhi	r3, [pc, #48]	; (5dd4 <xTaskPriorityInherit+0x94>)
    5da4:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5da8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5dac:	4621      	mov	r1, r4
    5dae:	4b0a      	ldr	r3, [pc, #40]	; (5dd8 <xTaskPriorityInherit+0x98>)
    5db0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5db4:	4b0a      	ldr	r3, [pc, #40]	; (5de0 <xTaskPriorityInherit+0xa0>)
    5db6:	4798      	blx	r3
			xReturn = pdTRUE;
    5db8:	2001      	movs	r0, #1
    5dba:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    5dbc:	4a05      	ldr	r2, [pc, #20]	; (5dd4 <xTaskPriorityInherit+0x94>)
    5dbe:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    5dc2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    5dc4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    5dc6:	4298      	cmp	r0, r3
    5dc8:	bf2c      	ite	cs
    5dca:	2000      	movcs	r0, #0
    5dcc:	2001      	movcc	r0, #1
    5dce:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    5dd0:	2000      	movs	r0, #0
	return xReturn;
    5dd2:	4770      	bx	lr
    5dd4:	2000332c 	.word	0x2000332c
    5dd8:	20003354 	.word	0x20003354
    5ddc:	0000456d 	.word	0x0000456d
    5de0:	00004521 	.word	0x00004521

00005de4 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    5de4:	2800      	cmp	r0, #0
    5de6:	d03c      	beq.n	5e62 <xTaskPriorityDisinherit+0x7e>
{
    5de8:	b538      	push	{r3, r4, r5, lr}
    5dea:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    5dec:	4a20      	ldr	r2, [pc, #128]	; (5e70 <xTaskPriorityDisinherit+0x8c>)
    5dee:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    5df2:	4290      	cmp	r0, r2
    5df4:	d008      	beq.n	5e08 <xTaskPriorityDisinherit+0x24>
    5df6:	f04f 0380 	mov.w	r3, #128	; 0x80
    5dfa:	f383 8811 	msr	BASEPRI, r3
    5dfe:	f3bf 8f6f 	isb	sy
    5e02:	f3bf 8f4f 	dsb	sy
    5e06:	e7fe      	b.n	5e06 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    5e08:	6c82      	ldr	r2, [r0, #72]	; 0x48
    5e0a:	b942      	cbnz	r2, 5e1e <xTaskPriorityDisinherit+0x3a>
    5e0c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e10:	f383 8811 	msr	BASEPRI, r3
    5e14:	f3bf 8f6f 	isb	sy
    5e18:	f3bf 8f4f 	dsb	sy
    5e1c:	e7fe      	b.n	5e1c <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    5e1e:	3a01      	subs	r2, #1
    5e20:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    5e22:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5e24:	6c61      	ldr	r1, [r4, #68]	; 0x44
    5e26:	4288      	cmp	r0, r1
    5e28:	d01d      	beq.n	5e66 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    5e2a:	b9f2      	cbnz	r2, 5e6a <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    5e2c:	1d25      	adds	r5, r4, #4
    5e2e:	4628      	mov	r0, r5
    5e30:	4b10      	ldr	r3, [pc, #64]	; (5e74 <xTaskPriorityDisinherit+0x90>)
    5e32:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    5e34:	6c60      	ldr	r0, [r4, #68]	; 0x44
    5e36:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    5e38:	f1c0 0305 	rsb	r3, r0, #5
    5e3c:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    5e3e:	4b0c      	ldr	r3, [pc, #48]	; (5e70 <xTaskPriorityDisinherit+0x8c>)
    5e40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5e44:	4298      	cmp	r0, r3
    5e46:	bf84      	itt	hi
    5e48:	4b09      	ldrhi	r3, [pc, #36]	; (5e70 <xTaskPriorityDisinherit+0x8c>)
    5e4a:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5e4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5e52:	4629      	mov	r1, r5
    5e54:	4b08      	ldr	r3, [pc, #32]	; (5e78 <xTaskPriorityDisinherit+0x94>)
    5e56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5e5a:	4b08      	ldr	r3, [pc, #32]	; (5e7c <xTaskPriorityDisinherit+0x98>)
    5e5c:	4798      	blx	r3
				xReturn = pdTRUE;
    5e5e:	2001      	movs	r0, #1
    5e60:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    5e62:	2000      	movs	r0, #0
    5e64:	4770      	bx	lr
    5e66:	2000      	movs	r0, #0
    5e68:	bd38      	pop	{r3, r4, r5, pc}
    5e6a:	2000      	movs	r0, #0
}
    5e6c:	bd38      	pop	{r3, r4, r5, pc}
    5e6e:	bf00      	nop
    5e70:	2000332c 	.word	0x2000332c
    5e74:	0000456d 	.word	0x0000456d
    5e78:	20003354 	.word	0x20003354
    5e7c:	00004521 	.word	0x00004521

00005e80 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    5e80:	2800      	cmp	r0, #0
    5e82:	d049      	beq.n	5f18 <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    5e84:	b538      	push	{r3, r4, r5, lr}
    5e86:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    5e88:	6c80      	ldr	r0, [r0, #72]	; 0x48
    5e8a:	b940      	cbnz	r0, 5e9e <vTaskPriorityDisinheritAfterTimeout+0x1e>
    5e8c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e90:	f383 8811 	msr	BASEPRI, r3
    5e94:	f3bf 8f6f 	isb	sy
    5e98:	f3bf 8f4f 	dsb	sy
    5e9c:	e7fe      	b.n	5e9c <vTaskPriorityDisinheritAfterTimeout+0x1c>
    5e9e:	6c62      	ldr	r2, [r4, #68]	; 0x44
    5ea0:	428a      	cmp	r2, r1
    5ea2:	bf38      	it	cc
    5ea4:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    5ea6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5ea8:	4291      	cmp	r1, r2
    5eaa:	d001      	beq.n	5eb0 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    5eac:	2801      	cmp	r0, #1
    5eae:	d000      	beq.n	5eb2 <vTaskPriorityDisinheritAfterTimeout+0x32>
    5eb0:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    5eb2:	481a      	ldr	r0, [pc, #104]	; (5f1c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    5eb4:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    5eb8:	4284      	cmp	r4, r0
    5eba:	d108      	bne.n	5ece <vTaskPriorityDisinheritAfterTimeout+0x4e>
    5ebc:	f04f 0380 	mov.w	r3, #128	; 0x80
    5ec0:	f383 8811 	msr	BASEPRI, r3
    5ec4:	f3bf 8f6f 	isb	sy
    5ec8:	f3bf 8f4f 	dsb	sy
    5ecc:	e7fe      	b.n	5ecc <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    5ece:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    5ed0:	69a0      	ldr	r0, [r4, #24]
    5ed2:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    5ed4:	bfa4      	itt	ge
    5ed6:	f1c2 0205 	rsbge	r2, r2, #5
    5eda:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    5edc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    5ee0:	4a0f      	ldr	r2, [pc, #60]	; (5f20 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    5ee2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    5ee6:	6962      	ldr	r2, [r4, #20]
    5ee8:	428a      	cmp	r2, r1
    5eea:	d1e1      	bne.n	5eb0 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    5eec:	1d25      	adds	r5, r4, #4
    5eee:	4628      	mov	r0, r5
    5ef0:	4b0c      	ldr	r3, [pc, #48]	; (5f24 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    5ef2:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    5ef4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5ef6:	4b09      	ldr	r3, [pc, #36]	; (5f1c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    5ef8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5efc:	4298      	cmp	r0, r3
    5efe:	bf84      	itt	hi
    5f00:	4b06      	ldrhi	r3, [pc, #24]	; (5f1c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    5f02:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5f06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5f0a:	4629      	mov	r1, r5
    5f0c:	4b04      	ldr	r3, [pc, #16]	; (5f20 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    5f0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    5f12:	4b05      	ldr	r3, [pc, #20]	; (5f28 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    5f14:	4798      	blx	r3
}
    5f16:	e7cb      	b.n	5eb0 <vTaskPriorityDisinheritAfterTimeout+0x30>
    5f18:	4770      	bx	lr
    5f1a:	bf00      	nop
    5f1c:	2000332c 	.word	0x2000332c
    5f20:	20003354 	.word	0x20003354
    5f24:	0000456d 	.word	0x0000456d
    5f28:	00004521 	.word	0x00004521

00005f2c <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    5f2c:	4b06      	ldr	r3, [pc, #24]	; (5f48 <pvTaskIncrementMutexHeldCount+0x1c>)
    5f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5f32:	b12b      	cbz	r3, 5f40 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    5f34:	4b04      	ldr	r3, [pc, #16]	; (5f48 <pvTaskIncrementMutexHeldCount+0x1c>)
    5f36:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5f3a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    5f3c:	3301      	adds	r3, #1
    5f3e:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    5f40:	4b01      	ldr	r3, [pc, #4]	; (5f48 <pvTaskIncrementMutexHeldCount+0x1c>)
    5f42:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    5f46:	4770      	bx	lr
    5f48:	2000332c 	.word	0x2000332c

00005f4c <xTaskNotifyWait>:
{
    5f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f4e:	4607      	mov	r7, r0
    5f50:	460d      	mov	r5, r1
    5f52:	4614      	mov	r4, r2
    5f54:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    5f56:	4b25      	ldr	r3, [pc, #148]	; (5fec <xTaskNotifyWait+0xa0>)
    5f58:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    5f5a:	4b25      	ldr	r3, [pc, #148]	; (5ff0 <xTaskNotifyWait+0xa4>)
    5f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5f60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    5f64:	b2db      	uxtb	r3, r3
    5f66:	2b02      	cmp	r3, #2
    5f68:	d00c      	beq.n	5f84 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    5f6a:	4b21      	ldr	r3, [pc, #132]	; (5ff0 <xTaskNotifyWait+0xa4>)
    5f6c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5f70:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    5f72:	ea20 0007 	bic.w	r0, r0, r7
    5f76:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    5f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5f7c:	2201      	movs	r2, #1
    5f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    5f82:	b9e6      	cbnz	r6, 5fbe <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    5f84:	4b1b      	ldr	r3, [pc, #108]	; (5ff4 <xTaskNotifyWait+0xa8>)
    5f86:	4798      	blx	r3
	taskENTER_CRITICAL();
    5f88:	4b18      	ldr	r3, [pc, #96]	; (5fec <xTaskNotifyWait+0xa0>)
    5f8a:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    5f8c:	b124      	cbz	r4, 5f98 <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    5f8e:	4b18      	ldr	r3, [pc, #96]	; (5ff0 <xTaskNotifyWait+0xa4>)
    5f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    5f96:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    5f98:	4b15      	ldr	r3, [pc, #84]	; (5ff0 <xTaskNotifyWait+0xa4>)
    5f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5f9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    5fa2:	b2db      	uxtb	r3, r3
    5fa4:	2b02      	cmp	r3, #2
    5fa6:	d017      	beq.n	5fd8 <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    5fa8:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5faa:	4b11      	ldr	r3, [pc, #68]	; (5ff0 <xTaskNotifyWait+0xa4>)
    5fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5fb0:	2200      	movs	r2, #0
    5fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    5fb6:	4b0f      	ldr	r3, [pc, #60]	; (5ff4 <xTaskNotifyWait+0xa8>)
    5fb8:	4798      	blx	r3
}
    5fba:	4620      	mov	r0, r4
    5fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    5fbe:	4611      	mov	r1, r2
    5fc0:	4630      	mov	r0, r6
    5fc2:	4b0d      	ldr	r3, [pc, #52]	; (5ff8 <xTaskNotifyWait+0xac>)
    5fc4:	4798      	blx	r3
				portYIELD_WITHIN_API();
    5fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5fca:	4b0c      	ldr	r3, [pc, #48]	; (5ffc <xTaskNotifyWait+0xb0>)
    5fcc:	601a      	str	r2, [r3, #0]
    5fce:	f3bf 8f4f 	dsb	sy
    5fd2:	f3bf 8f6f 	isb	sy
    5fd6:	e7d5      	b.n	5f84 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    5fd8:	4b05      	ldr	r3, [pc, #20]	; (5ff0 <xTaskNotifyWait+0xa4>)
    5fda:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5fde:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    5fe0:	ea23 0505 	bic.w	r5, r3, r5
    5fe4:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    5fe6:	2401      	movs	r4, #1
    5fe8:	e7df      	b.n	5faa <xTaskNotifyWait+0x5e>
    5fea:	bf00      	nop
    5fec:	00004665 	.word	0x00004665
    5ff0:	2000332c 	.word	0x2000332c
    5ff4:	000046a9 	.word	0x000046a9
    5ff8:	00005469 	.word	0x00005469
    5ffc:	e000ed04 	.word	0xe000ed04

00006000 <xTaskGenericNotifyFromISR>:
{
    6000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6004:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    6006:	b310      	cbz	r0, 604e <xTaskGenericNotifyFromISR+0x4e>
    6008:	4604      	mov	r4, r0
    600a:	4699      	mov	r9, r3
    600c:	4617      	mov	r7, r2
    600e:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    6010:	4b3e      	ldr	r3, [pc, #248]	; (610c <xTaskGenericNotifyFromISR+0x10c>)
    6012:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    6014:	f3ef 8511 	mrs	r5, BASEPRI
    6018:	f04f 0380 	mov.w	r3, #128	; 0x80
    601c:	f383 8811 	msr	BASEPRI, r3
    6020:	f3bf 8f6f 	isb	sy
    6024:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    6028:	f1b9 0f00 	cmp.w	r9, #0
    602c:	d002      	beq.n	6034 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    602e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6030:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    6034:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    6038:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    603a:	2202      	movs	r2, #2
    603c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    6040:	1e7a      	subs	r2, r7, #1
    6042:	2a03      	cmp	r2, #3
    6044:	d810      	bhi.n	6068 <xTaskGenericNotifyFromISR+0x68>
    6046:	e8df f002 	tbb	[pc, r2]
    604a:	1c0b      	.short	0x1c0b
    604c:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    604e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6052:	f383 8811 	msr	BASEPRI, r3
    6056:	f3bf 8f6f 	isb	sy
    605a:	f3bf 8f4f 	dsb	sy
    605e:	e7fe      	b.n	605e <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    6060:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    6062:	ea42 0208 	orr.w	r2, r2, r8
    6066:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    6068:	2b01      	cmp	r3, #1
    606a:	d147      	bne.n	60fc <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    606c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    606e:	b1a3      	cbz	r3, 609a <xTaskGenericNotifyFromISR+0x9a>
    6070:	f04f 0380 	mov.w	r3, #128	; 0x80
    6074:	f383 8811 	msr	BASEPRI, r3
    6078:	f3bf 8f6f 	isb	sy
    607c:	f3bf 8f4f 	dsb	sy
    6080:	e7fe      	b.n	6080 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    6082:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    6084:	3201      	adds	r2, #1
    6086:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    6088:	e7ee      	b.n	6068 <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    608a:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    608e:	e7eb      	b.n	6068 <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    6090:	2b02      	cmp	r3, #2
    6092:	d031      	beq.n	60f8 <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    6094:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    6098:	e7e6      	b.n	6068 <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    609a:	4b1d      	ldr	r3, [pc, #116]	; (6110 <xTaskGenericNotifyFromISR+0x110>)
    609c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    60a0:	b9fb      	cbnz	r3, 60e2 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    60a2:	1d27      	adds	r7, r4, #4
    60a4:	4638      	mov	r0, r7
    60a6:	4b1b      	ldr	r3, [pc, #108]	; (6114 <xTaskGenericNotifyFromISR+0x114>)
    60a8:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    60aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    60ac:	4b18      	ldr	r3, [pc, #96]	; (6110 <xTaskGenericNotifyFromISR+0x110>)
    60ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    60b2:	4298      	cmp	r0, r3
    60b4:	bf84      	itt	hi
    60b6:	4b16      	ldrhi	r3, [pc, #88]	; (6110 <xTaskGenericNotifyFromISR+0x110>)
    60b8:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    60bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    60c0:	4639      	mov	r1, r7
    60c2:	4b15      	ldr	r3, [pc, #84]	; (6118 <xTaskGenericNotifyFromISR+0x118>)
    60c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    60c8:	4b14      	ldr	r3, [pc, #80]	; (611c <xTaskGenericNotifyFromISR+0x11c>)
    60ca:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    60cc:	4b10      	ldr	r3, [pc, #64]	; (6110 <xTaskGenericNotifyFromISR+0x110>)
    60ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    60d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    60d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    60d6:	429a      	cmp	r2, r3
    60d8:	d915      	bls.n	6106 <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    60da:	b146      	cbz	r6, 60ee <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    60dc:	2001      	movs	r0, #1
    60de:	6030      	str	r0, [r6, #0]
    60e0:	e00d      	b.n	60fe <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    60e2:	f104 0118 	add.w	r1, r4, #24
    60e6:	480e      	ldr	r0, [pc, #56]	; (6120 <xTaskGenericNotifyFromISR+0x120>)
    60e8:	4b0c      	ldr	r3, [pc, #48]	; (611c <xTaskGenericNotifyFromISR+0x11c>)
    60ea:	4798      	blx	r3
    60ec:	e7ee      	b.n	60cc <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    60ee:	2001      	movs	r0, #1
    60f0:	4b07      	ldr	r3, [pc, #28]	; (6110 <xTaskGenericNotifyFromISR+0x110>)
    60f2:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    60f6:	e002      	b.n	60fe <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    60f8:	2000      	movs	r0, #0
    60fa:	e000      	b.n	60fe <xTaskGenericNotifyFromISR+0xfe>
    60fc:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    60fe:	f385 8811 	msr	BASEPRI, r5
}
    6102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6106:	2001      	movs	r0, #1
    6108:	e7f9      	b.n	60fe <xTaskGenericNotifyFromISR+0xfe>
    610a:	bf00      	nop
    610c:	000048bd 	.word	0x000048bd
    6110:	2000332c 	.word	0x2000332c
    6114:	0000456d 	.word	0x0000456d
    6118:	20003354 	.word	0x20003354
    611c:	00004521 	.word	0x00004521
    6120:	20003340 	.word	0x20003340

00006124 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    6124:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    6126:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    6128:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    612a:	4291      	cmp	r1, r2
    612c:	d80c      	bhi.n	6148 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    612e:	1ad2      	subs	r2, r2, r3
    6130:	6983      	ldr	r3, [r0, #24]
    6132:	429a      	cmp	r2, r3
    6134:	d301      	bcc.n	613a <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    6136:	2001      	movs	r0, #1
    6138:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    613a:	1d01      	adds	r1, r0, #4
    613c:	4b09      	ldr	r3, [pc, #36]	; (6164 <prvInsertTimerInActiveList+0x40>)
    613e:	6818      	ldr	r0, [r3, #0]
    6140:	4b09      	ldr	r3, [pc, #36]	; (6168 <prvInsertTimerInActiveList+0x44>)
    6142:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    6144:	2000      	movs	r0, #0
    6146:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    6148:	429a      	cmp	r2, r3
    614a:	d201      	bcs.n	6150 <prvInsertTimerInActiveList+0x2c>
    614c:	4299      	cmp	r1, r3
    614e:	d206      	bcs.n	615e <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    6150:	1d01      	adds	r1, r0, #4
    6152:	4b04      	ldr	r3, [pc, #16]	; (6164 <prvInsertTimerInActiveList+0x40>)
    6154:	6858      	ldr	r0, [r3, #4]
    6156:	4b04      	ldr	r3, [pc, #16]	; (6168 <prvInsertTimerInActiveList+0x44>)
    6158:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    615a:	2000      	movs	r0, #0
    615c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    615e:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    6160:	bd08      	pop	{r3, pc}
    6162:	bf00      	nop
    6164:	20003418 	.word	0x20003418
    6168:	00004539 	.word	0x00004539

0000616c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    616e:	4b0d      	ldr	r3, [pc, #52]	; (61a4 <prvCheckForValidListAndQueue+0x38>)
    6170:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    6172:	4b0d      	ldr	r3, [pc, #52]	; (61a8 <prvCheckForValidListAndQueue+0x3c>)
    6174:	689b      	ldr	r3, [r3, #8]
    6176:	b113      	cbz	r3, 617e <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    6178:	4b0c      	ldr	r3, [pc, #48]	; (61ac <prvCheckForValidListAndQueue+0x40>)
    617a:	4798      	blx	r3
    617c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    617e:	4c0a      	ldr	r4, [pc, #40]	; (61a8 <prvCheckForValidListAndQueue+0x3c>)
    6180:	f104 060c 	add.w	r6, r4, #12
    6184:	4630      	mov	r0, r6
    6186:	4f0a      	ldr	r7, [pc, #40]	; (61b0 <prvCheckForValidListAndQueue+0x44>)
    6188:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    618a:	f104 0520 	add.w	r5, r4, #32
    618e:	4628      	mov	r0, r5
    6190:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    6192:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    6194:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    6196:	2200      	movs	r2, #0
    6198:	210c      	movs	r1, #12
    619a:	2014      	movs	r0, #20
    619c:	4b05      	ldr	r3, [pc, #20]	; (61b4 <prvCheckForValidListAndQueue+0x48>)
    619e:	4798      	blx	r3
    61a0:	60a0      	str	r0, [r4, #8]
    61a2:	e7e9      	b.n	6178 <prvCheckForValidListAndQueue+0xc>
    61a4:	00004665 	.word	0x00004665
    61a8:	20003418 	.word	0x20003418
    61ac:	000046a9 	.word	0x000046a9
    61b0:	00004505 	.word	0x00004505
    61b4:	00004cb9 	.word	0x00004cb9

000061b8 <xTimerCreateTimerTask>:
{
    61b8:	b510      	push	{r4, lr}
    61ba:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    61bc:	4b0d      	ldr	r3, [pc, #52]	; (61f4 <xTimerCreateTimerTask+0x3c>)
    61be:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    61c0:	4b0d      	ldr	r3, [pc, #52]	; (61f8 <xTimerCreateTimerTask+0x40>)
    61c2:	689b      	ldr	r3, [r3, #8]
    61c4:	b163      	cbz	r3, 61e0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    61c6:	4b0d      	ldr	r3, [pc, #52]	; (61fc <xTimerCreateTimerTask+0x44>)
    61c8:	9301      	str	r3, [sp, #4]
    61ca:	2303      	movs	r3, #3
    61cc:	9300      	str	r3, [sp, #0]
    61ce:	2300      	movs	r3, #0
    61d0:	2280      	movs	r2, #128	; 0x80
    61d2:	490b      	ldr	r1, [pc, #44]	; (6200 <xTimerCreateTimerTask+0x48>)
    61d4:	480b      	ldr	r0, [pc, #44]	; (6204 <xTimerCreateTimerTask+0x4c>)
    61d6:	4c0c      	ldr	r4, [pc, #48]	; (6208 <xTimerCreateTimerTask+0x50>)
    61d8:	47a0      	blx	r4
	configASSERT(xReturn);
    61da:	b108      	cbz	r0, 61e0 <xTimerCreateTimerTask+0x28>
}
    61dc:	b002      	add	sp, #8
    61de:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    61e0:	f04f 0380 	mov.w	r3, #128	; 0x80
    61e4:	f383 8811 	msr	BASEPRI, r3
    61e8:	f3bf 8f6f 	isb	sy
    61ec:	f3bf 8f4f 	dsb	sy
    61f0:	e7fe      	b.n	61f0 <xTimerCreateTimerTask+0x38>
    61f2:	bf00      	nop
    61f4:	0000616d 	.word	0x0000616d
    61f8:	20003418 	.word	0x20003418
    61fc:	2000344c 	.word	0x2000344c
    6200:	00008550 	.word	0x00008550
    6204:	00006379 	.word	0x00006379
    6208:	000054e9 	.word	0x000054e9

0000620c <xTimerCreate>:
{
    620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6210:	4680      	mov	r8, r0
    6212:	460d      	mov	r5, r1
    6214:	4617      	mov	r7, r2
    6216:	461e      	mov	r6, r3
	pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t));
    6218:	202c      	movs	r0, #44	; 0x2c
    621a:	4b0e      	ldr	r3, [pc, #56]	; (6254 <xTimerCreate+0x48>)
    621c:	4798      	blx	r3
	if (pxNewTimer != NULL) {
    621e:	4604      	mov	r4, r0
    6220:	b1a8      	cbz	r0, 624e <xTimerCreate+0x42>
	configASSERT((xTimerPeriodInTicks > 0));
    6222:	b945      	cbnz	r5, 6236 <xTimerCreate+0x2a>
    6224:	f04f 0380 	mov.w	r3, #128	; 0x80
    6228:	f383 8811 	msr	BASEPRI, r3
    622c:	f3bf 8f6f 	isb	sy
    6230:	f3bf 8f4f 	dsb	sy
    6234:	e7fe      	b.n	6234 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
    6236:	4b08      	ldr	r3, [pc, #32]	; (6258 <xTimerCreate+0x4c>)
    6238:	4798      	blx	r3
		pxNewTimer->pcTimerName         = pcTimerName;
    623a:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    623e:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload        = uxAutoReload;
    6240:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID           = pvTimerID;
    6242:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction  = pxCallbackFunction;
    6244:	9b06      	ldr	r3, [sp, #24]
    6246:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem(&(pxNewTimer->xTimerListItem));
    6248:	1d20      	adds	r0, r4, #4
    624a:	4b04      	ldr	r3, [pc, #16]	; (625c <xTimerCreate+0x50>)
    624c:	4798      	blx	r3
}
    624e:	4620      	mov	r0, r4
    6250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6254:	00004915 	.word	0x00004915
    6258:	0000616d 	.word	0x0000616d
    625c:	0000451b 	.word	0x0000451b

00006260 <xTimerGenericCommand>:
	configASSERT(xTimer);
    6260:	b1d8      	cbz	r0, 629a <xTimerGenericCommand+0x3a>
{
    6262:	b530      	push	{r4, r5, lr}
    6264:	b085      	sub	sp, #20
    6266:	4615      	mov	r5, r2
    6268:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    626a:	4a14      	ldr	r2, [pc, #80]	; (62bc <xTimerGenericCommand+0x5c>)
    626c:	6890      	ldr	r0, [r2, #8]
    626e:	b310      	cbz	r0, 62b6 <xTimerGenericCommand+0x56>
    6270:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    6272:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    6274:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    6276:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    6278:	2905      	cmp	r1, #5
    627a:	dc17      	bgt.n	62ac <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    627c:	4b10      	ldr	r3, [pc, #64]	; (62c0 <xTimerGenericCommand+0x60>)
    627e:	4798      	blx	r3
    6280:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    6282:	f04f 0300 	mov.w	r3, #0
    6286:	bf0c      	ite	eq
    6288:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    628a:	461a      	movne	r2, r3
    628c:	a901      	add	r1, sp, #4
    628e:	480b      	ldr	r0, [pc, #44]	; (62bc <xTimerGenericCommand+0x5c>)
    6290:	6880      	ldr	r0, [r0, #8]
    6292:	4c0c      	ldr	r4, [pc, #48]	; (62c4 <xTimerGenericCommand+0x64>)
    6294:	47a0      	blx	r4
}
    6296:	b005      	add	sp, #20
    6298:	bd30      	pop	{r4, r5, pc}
    629a:	f04f 0380 	mov.w	r3, #128	; 0x80
    629e:	f383 8811 	msr	BASEPRI, r3
    62a2:	f3bf 8f6f 	isb	sy
    62a6:	f3bf 8f4f 	dsb	sy
    62aa:	e7fe      	b.n	62aa <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    62ac:	2300      	movs	r3, #0
    62ae:	a901      	add	r1, sp, #4
    62b0:	4c05      	ldr	r4, [pc, #20]	; (62c8 <xTimerGenericCommand+0x68>)
    62b2:	47a0      	blx	r4
    62b4:	e7ef      	b.n	6296 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    62b6:	2000      	movs	r0, #0
	return xReturn;
    62b8:	e7ed      	b.n	6296 <xTimerGenericCommand+0x36>
    62ba:	bf00      	nop
    62bc:	20003418 	.word	0x20003418
    62c0:	00005d21 	.word	0x00005d21
    62c4:	00004d11 	.word	0x00004d11
    62c8:	00004f19 	.word	0x00004f19

000062cc <prvSampleTimeNow>:
{
    62cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62d0:	b082      	sub	sp, #8
    62d2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    62d4:	4b23      	ldr	r3, [pc, #140]	; (6364 <prvSampleTimeNow+0x98>)
    62d6:	4798      	blx	r3
    62d8:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    62da:	4b23      	ldr	r3, [pc, #140]	; (6368 <prvSampleTimeNow+0x9c>)
    62dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    62de:	4298      	cmp	r0, r3
    62e0:	d319      	bcc.n	6316 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    62e2:	2300      	movs	r3, #0
    62e4:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    62e8:	4b1f      	ldr	r3, [pc, #124]	; (6368 <prvSampleTimeNow+0x9c>)
    62ea:	639f      	str	r7, [r3, #56]	; 0x38
}
    62ec:	4638      	mov	r0, r7
    62ee:	b002      	add	sp, #8
    62f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    62f4:	2100      	movs	r1, #0
    62f6:	9100      	str	r1, [sp, #0]
    62f8:	460b      	mov	r3, r1
    62fa:	4652      	mov	r2, sl
    62fc:	4620      	mov	r0, r4
    62fe:	4c1b      	ldr	r4, [pc, #108]	; (636c <prvSampleTimeNow+0xa0>)
    6300:	47a0      	blx	r4
				configASSERT(xResult);
    6302:	b950      	cbnz	r0, 631a <prvSampleTimeNow+0x4e>
    6304:	f04f 0380 	mov.w	r3, #128	; 0x80
    6308:	f383 8811 	msr	BASEPRI, r3
    630c:	f3bf 8f6f 	isb	sy
    6310:	f3bf 8f4f 	dsb	sy
    6314:	e7fe      	b.n	6314 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    6316:	4d14      	ldr	r5, [pc, #80]	; (6368 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6318:	4e15      	ldr	r6, [pc, #84]	; (6370 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    631a:	686b      	ldr	r3, [r5, #4]
    631c:	681a      	ldr	r2, [r3, #0]
    631e:	b1c2      	cbz	r2, 6352 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6320:	68db      	ldr	r3, [r3, #12]
    6322:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6326:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6328:	f104 0904 	add.w	r9, r4, #4
    632c:	4648      	mov	r0, r9
    632e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6330:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6332:	4620      	mov	r0, r4
    6334:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6336:	69e3      	ldr	r3, [r4, #28]
    6338:	2b01      	cmp	r3, #1
    633a:	d1ee      	bne.n	631a <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    633c:	69a3      	ldr	r3, [r4, #24]
    633e:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    6340:	459a      	cmp	sl, r3
    6342:	d2d7      	bcs.n	62f4 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    6344:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    6346:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    6348:	4649      	mov	r1, r9
    634a:	6868      	ldr	r0, [r5, #4]
    634c:	4b09      	ldr	r3, [pc, #36]	; (6374 <prvSampleTimeNow+0xa8>)
    634e:	4798      	blx	r3
    6350:	e7e3      	b.n	631a <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    6352:	4a05      	ldr	r2, [pc, #20]	; (6368 <prvSampleTimeNow+0x9c>)
    6354:	6811      	ldr	r1, [r2, #0]
    6356:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    6358:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    635a:	2301      	movs	r3, #1
    635c:	f8c8 3000 	str.w	r3, [r8]
    6360:	e7c2      	b.n	62e8 <prvSampleTimeNow+0x1c>
    6362:	bf00      	nop
    6364:	00005761 	.word	0x00005761
    6368:	20003418 	.word	0x20003418
    636c:	00006261 	.word	0x00006261
    6370:	0000456d 	.word	0x0000456d
    6374:	00004539 	.word	0x00004539

00006378 <prvTimerTask>:
{
    6378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    637c:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    637e:	4c65      	ldr	r4, [pc, #404]	; (6514 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    6380:	4f65      	ldr	r7, [pc, #404]	; (6518 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    6382:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 6538 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    6386:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 653c <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    638a:	6863      	ldr	r3, [r4, #4]
    638c:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    638e:	b172      	cbz	r2, 63ae <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6390:	68db      	ldr	r3, [r3, #12]
    6392:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    6394:	4b61      	ldr	r3, [pc, #388]	; (651c <prvTimerTask+0x1a4>)
    6396:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6398:	a803      	add	r0, sp, #12
    639a:	4b61      	ldr	r3, [pc, #388]	; (6520 <prvTimerTask+0x1a8>)
    639c:	4798      	blx	r3
    639e:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    63a0:	9b03      	ldr	r3, [sp, #12]
    63a2:	2b00      	cmp	r3, #0
    63a4:	d179      	bne.n	649a <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    63a6:	42a8      	cmp	r0, r5
    63a8:	d24a      	bcs.n	6440 <prvTimerTask+0xc8>
    63aa:	2200      	movs	r2, #0
    63ac:	e00e      	b.n	63cc <prvTimerTask+0x54>
	vTaskSuspendAll();
    63ae:	4b5b      	ldr	r3, [pc, #364]	; (651c <prvTimerTask+0x1a4>)
    63b0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    63b2:	a803      	add	r0, sp, #12
    63b4:	4b5a      	ldr	r3, [pc, #360]	; (6520 <prvTimerTask+0x1a8>)
    63b6:	4798      	blx	r3
    63b8:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    63ba:	9b03      	ldr	r3, [sp, #12]
    63bc:	2b00      	cmp	r3, #0
    63be:	d16c      	bne.n	649a <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    63c0:	6823      	ldr	r3, [r4, #0]
    63c2:	681a      	ldr	r2, [r3, #0]
    63c4:	fab2 f282 	clz	r2, r2
    63c8:	0952      	lsrs	r2, r2, #5
    63ca:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    63cc:	1ba9      	subs	r1, r5, r6
    63ce:	68a0      	ldr	r0, [r4, #8]
    63d0:	4b54      	ldr	r3, [pc, #336]	; (6524 <prvTimerTask+0x1ac>)
    63d2:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    63d4:	47b8      	blx	r7
    63d6:	b938      	cbnz	r0, 63e8 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    63d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    63dc:	f8c9 3000 	str.w	r3, [r9]
    63e0:	f3bf 8f4f 	dsb	sy
    63e4:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    63e8:	4d4f      	ldr	r5, [pc, #316]	; (6528 <prvTimerTask+0x1b0>)
    63ea:	2200      	movs	r2, #0
    63ec:	a903      	add	r1, sp, #12
    63ee:	68a0      	ldr	r0, [r4, #8]
    63f0:	47a8      	blx	r5
    63f2:	2800      	cmp	r0, #0
    63f4:	d0c9      	beq.n	638a <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    63f6:	9b03      	ldr	r3, [sp, #12]
    63f8:	2b00      	cmp	r3, #0
    63fa:	dbf6      	blt.n	63ea <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    63fc:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    63fe:	6973      	ldr	r3, [r6, #20]
    6400:	b10b      	cbz	r3, 6406 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    6402:	1d30      	adds	r0, r6, #4
    6404:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6406:	a802      	add	r0, sp, #8
    6408:	4b45      	ldr	r3, [pc, #276]	; (6520 <prvTimerTask+0x1a8>)
    640a:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    640c:	9b03      	ldr	r3, [sp, #12]
    640e:	2b09      	cmp	r3, #9
    6410:	d8eb      	bhi.n	63ea <prvTimerTask+0x72>
    6412:	a201      	add	r2, pc, #4	; (adr r2, 6418 <prvTimerTask+0xa0>)
    6414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6418:	0000649f 	.word	0x0000649f
    641c:	0000649f 	.word	0x0000649f
    6420:	0000649f 	.word	0x0000649f
    6424:	000063eb 	.word	0x000063eb
    6428:	000064e7 	.word	0x000064e7
    642c:	0000650d 	.word	0x0000650d
    6430:	0000649f 	.word	0x0000649f
    6434:	0000649f 	.word	0x0000649f
    6438:	000063eb 	.word	0x000063eb
    643c:	000064e7 	.word	0x000064e7
				(void)xTaskResumeAll();
    6440:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6442:	6863      	ldr	r3, [r4, #4]
    6444:	68db      	ldr	r3, [r3, #12]
    6446:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    644a:	f10a 0004 	add.w	r0, sl, #4
    644e:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6450:	f8da 301c 	ldr.w	r3, [sl, #28]
    6454:	2b01      	cmp	r3, #1
    6456:	d004      	beq.n	6462 <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6458:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    645c:	4650      	mov	r0, sl
    645e:	4798      	blx	r3
    6460:	e7c2      	b.n	63e8 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    6462:	f8da 1018 	ldr.w	r1, [sl, #24]
    6466:	462b      	mov	r3, r5
    6468:	4632      	mov	r2, r6
    646a:	4429      	add	r1, r5
    646c:	4650      	mov	r0, sl
    646e:	4e2f      	ldr	r6, [pc, #188]	; (652c <prvTimerTask+0x1b4>)
    6470:	47b0      	blx	r6
    6472:	2800      	cmp	r0, #0
    6474:	d0f0      	beq.n	6458 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6476:	2100      	movs	r1, #0
    6478:	9100      	str	r1, [sp, #0]
    647a:	460b      	mov	r3, r1
    647c:	462a      	mov	r2, r5
    647e:	4650      	mov	r0, sl
    6480:	4d2b      	ldr	r5, [pc, #172]	; (6530 <prvTimerTask+0x1b8>)
    6482:	47a8      	blx	r5
			configASSERT(xResult);
    6484:	2800      	cmp	r0, #0
    6486:	d1e7      	bne.n	6458 <prvTimerTask+0xe0>
    6488:	f04f 0380 	mov.w	r3, #128	; 0x80
    648c:	f383 8811 	msr	BASEPRI, r3
    6490:	f3bf 8f6f 	isb	sy
    6494:	f3bf 8f4f 	dsb	sy
    6498:	e7fe      	b.n	6498 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    649a:	47b8      	blx	r7
    649c:	e7a4      	b.n	63e8 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    649e:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    64a0:	69b1      	ldr	r1, [r6, #24]
    64a2:	462b      	mov	r3, r5
    64a4:	4602      	mov	r2, r0
    64a6:	4429      	add	r1, r5
    64a8:	4630      	mov	r0, r6
    64aa:	4d20      	ldr	r5, [pc, #128]	; (652c <prvTimerTask+0x1b4>)
    64ac:	47a8      	blx	r5
    64ae:	2800      	cmp	r0, #0
    64b0:	d09a      	beq.n	63e8 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    64b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    64b4:	4630      	mov	r0, r6
    64b6:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    64b8:	69f3      	ldr	r3, [r6, #28]
    64ba:	2b01      	cmp	r3, #1
    64bc:	d194      	bne.n	63e8 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    64be:	69b2      	ldr	r2, [r6, #24]
    64c0:	2100      	movs	r1, #0
    64c2:	9100      	str	r1, [sp, #0]
    64c4:	460b      	mov	r3, r1
    64c6:	9804      	ldr	r0, [sp, #16]
    64c8:	4402      	add	r2, r0
    64ca:	4630      	mov	r0, r6
    64cc:	4d18      	ldr	r5, [pc, #96]	; (6530 <prvTimerTask+0x1b8>)
    64ce:	47a8      	blx	r5
						configASSERT(xResult);
    64d0:	2800      	cmp	r0, #0
    64d2:	d189      	bne.n	63e8 <prvTimerTask+0x70>
    64d4:	f04f 0380 	mov.w	r3, #128	; 0x80
    64d8:	f383 8811 	msr	BASEPRI, r3
    64dc:	f3bf 8f6f 	isb	sy
    64e0:	f3bf 8f4f 	dsb	sy
    64e4:	e7fe      	b.n	64e4 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    64e6:	9904      	ldr	r1, [sp, #16]
    64e8:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    64ea:	b131      	cbz	r1, 64fa <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    64ec:	4603      	mov	r3, r0
    64ee:	4602      	mov	r2, r0
    64f0:	4401      	add	r1, r0
    64f2:	4630      	mov	r0, r6
    64f4:	4d0d      	ldr	r5, [pc, #52]	; (652c <prvTimerTask+0x1b4>)
    64f6:	47a8      	blx	r5
    64f8:	e776      	b.n	63e8 <prvTimerTask+0x70>
    64fa:	f04f 0380 	mov.w	r3, #128	; 0x80
    64fe:	f383 8811 	msr	BASEPRI, r3
    6502:	f3bf 8f6f 	isb	sy
    6506:	f3bf 8f4f 	dsb	sy
    650a:	e7fe      	b.n	650a <prvTimerTask+0x192>
				vPortFree(pxTimer);
    650c:	4630      	mov	r0, r6
    650e:	4b09      	ldr	r3, [pc, #36]	; (6534 <prvTimerTask+0x1bc>)
    6510:	4798      	blx	r3
    6512:	e769      	b.n	63e8 <prvTimerTask+0x70>
    6514:	20003418 	.word	0x20003418
    6518:	00005895 	.word	0x00005895
    651c:	0000574d 	.word	0x0000574d
    6520:	000062cd 	.word	0x000062cd
    6524:	000053b9 	.word	0x000053b9
    6528:	00005021 	.word	0x00005021
    652c:	00006125 	.word	0x00006125
    6530:	00006261 	.word	0x00006261
    6534:	000049e9 	.word	0x000049e9
    6538:	e000ed04 	.word	0xe000ed04
    653c:	0000456d 	.word	0x0000456d

00006540 <__libc_init_array>:
    6540:	b570      	push	{r4, r5, r6, lr}
    6542:	4e0d      	ldr	r6, [pc, #52]	; (6578 <__libc_init_array+0x38>)
    6544:	4c0d      	ldr	r4, [pc, #52]	; (657c <__libc_init_array+0x3c>)
    6546:	1ba4      	subs	r4, r4, r6
    6548:	10a4      	asrs	r4, r4, #2
    654a:	2500      	movs	r5, #0
    654c:	42a5      	cmp	r5, r4
    654e:	d109      	bne.n	6564 <__libc_init_array+0x24>
    6550:	4e0b      	ldr	r6, [pc, #44]	; (6580 <__libc_init_array+0x40>)
    6552:	4c0c      	ldr	r4, [pc, #48]	; (6584 <__libc_init_array+0x44>)
    6554:	f002 f84a 	bl	85ec <_init>
    6558:	1ba4      	subs	r4, r4, r6
    655a:	10a4      	asrs	r4, r4, #2
    655c:	2500      	movs	r5, #0
    655e:	42a5      	cmp	r5, r4
    6560:	d105      	bne.n	656e <__libc_init_array+0x2e>
    6562:	bd70      	pop	{r4, r5, r6, pc}
    6564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6568:	4798      	blx	r3
    656a:	3501      	adds	r5, #1
    656c:	e7ee      	b.n	654c <__libc_init_array+0xc>
    656e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6572:	4798      	blx	r3
    6574:	3501      	adds	r5, #1
    6576:	e7f2      	b.n	655e <__libc_init_array+0x1e>
    6578:	000085f8 	.word	0x000085f8
    657c:	000085f8 	.word	0x000085f8
    6580:	000085f8 	.word	0x000085f8
    6584:	000085fc 	.word	0x000085fc

00006588 <memcmp>:
    6588:	b510      	push	{r4, lr}
    658a:	3901      	subs	r1, #1
    658c:	4402      	add	r2, r0
    658e:	4290      	cmp	r0, r2
    6590:	d101      	bne.n	6596 <memcmp+0xe>
    6592:	2000      	movs	r0, #0
    6594:	bd10      	pop	{r4, pc}
    6596:	f810 3b01 	ldrb.w	r3, [r0], #1
    659a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    659e:	42a3      	cmp	r3, r4
    65a0:	d0f5      	beq.n	658e <memcmp+0x6>
    65a2:	1b18      	subs	r0, r3, r4
    65a4:	bd10      	pop	{r4, pc}

000065a6 <memcpy>:
    65a6:	b510      	push	{r4, lr}
    65a8:	1e43      	subs	r3, r0, #1
    65aa:	440a      	add	r2, r1
    65ac:	4291      	cmp	r1, r2
    65ae:	d100      	bne.n	65b2 <memcpy+0xc>
    65b0:	bd10      	pop	{r4, pc}
    65b2:	f811 4b01 	ldrb.w	r4, [r1], #1
    65b6:	f803 4f01 	strb.w	r4, [r3, #1]!
    65ba:	e7f7      	b.n	65ac <memcpy+0x6>

000065bc <memmove>:
    65bc:	4288      	cmp	r0, r1
    65be:	b510      	push	{r4, lr}
    65c0:	eb01 0302 	add.w	r3, r1, r2
    65c4:	d803      	bhi.n	65ce <memmove+0x12>
    65c6:	1e42      	subs	r2, r0, #1
    65c8:	4299      	cmp	r1, r3
    65ca:	d10c      	bne.n	65e6 <memmove+0x2a>
    65cc:	bd10      	pop	{r4, pc}
    65ce:	4298      	cmp	r0, r3
    65d0:	d2f9      	bcs.n	65c6 <memmove+0xa>
    65d2:	1881      	adds	r1, r0, r2
    65d4:	1ad2      	subs	r2, r2, r3
    65d6:	42d3      	cmn	r3, r2
    65d8:	d100      	bne.n	65dc <memmove+0x20>
    65da:	bd10      	pop	{r4, pc}
    65dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    65e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
    65e4:	e7f7      	b.n	65d6 <memmove+0x1a>
    65e6:	f811 4b01 	ldrb.w	r4, [r1], #1
    65ea:	f802 4f01 	strb.w	r4, [r2, #1]!
    65ee:	e7eb      	b.n	65c8 <memmove+0xc>

000065f0 <memset>:
    65f0:	4402      	add	r2, r0
    65f2:	4603      	mov	r3, r0
    65f4:	4293      	cmp	r3, r2
    65f6:	d100      	bne.n	65fa <memset+0xa>
    65f8:	4770      	bx	lr
    65fa:	f803 1b01 	strb.w	r1, [r3], #1
    65fe:	e7f9      	b.n	65f4 <memset+0x4>

00006600 <_free_r>:
    6600:	b538      	push	{r3, r4, r5, lr}
    6602:	4605      	mov	r5, r0
    6604:	2900      	cmp	r1, #0
    6606:	d045      	beq.n	6694 <_free_r+0x94>
    6608:	f851 3c04 	ldr.w	r3, [r1, #-4]
    660c:	1f0c      	subs	r4, r1, #4
    660e:	2b00      	cmp	r3, #0
    6610:	bfb8      	it	lt
    6612:	18e4      	addlt	r4, r4, r3
    6614:	f000 f90b 	bl	682e <__malloc_lock>
    6618:	4a1f      	ldr	r2, [pc, #124]	; (6698 <_free_r+0x98>)
    661a:	6813      	ldr	r3, [r2, #0]
    661c:	4610      	mov	r0, r2
    661e:	b933      	cbnz	r3, 662e <_free_r+0x2e>
    6620:	6063      	str	r3, [r4, #4]
    6622:	6014      	str	r4, [r2, #0]
    6624:	4628      	mov	r0, r5
    6626:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    662a:	f000 b901 	b.w	6830 <__malloc_unlock>
    662e:	42a3      	cmp	r3, r4
    6630:	d90c      	bls.n	664c <_free_r+0x4c>
    6632:	6821      	ldr	r1, [r4, #0]
    6634:	1862      	adds	r2, r4, r1
    6636:	4293      	cmp	r3, r2
    6638:	bf04      	itt	eq
    663a:	681a      	ldreq	r2, [r3, #0]
    663c:	685b      	ldreq	r3, [r3, #4]
    663e:	6063      	str	r3, [r4, #4]
    6640:	bf04      	itt	eq
    6642:	1852      	addeq	r2, r2, r1
    6644:	6022      	streq	r2, [r4, #0]
    6646:	6004      	str	r4, [r0, #0]
    6648:	e7ec      	b.n	6624 <_free_r+0x24>
    664a:	4613      	mov	r3, r2
    664c:	685a      	ldr	r2, [r3, #4]
    664e:	b10a      	cbz	r2, 6654 <_free_r+0x54>
    6650:	42a2      	cmp	r2, r4
    6652:	d9fa      	bls.n	664a <_free_r+0x4a>
    6654:	6819      	ldr	r1, [r3, #0]
    6656:	1858      	adds	r0, r3, r1
    6658:	42a0      	cmp	r0, r4
    665a:	d10b      	bne.n	6674 <_free_r+0x74>
    665c:	6820      	ldr	r0, [r4, #0]
    665e:	4401      	add	r1, r0
    6660:	1858      	adds	r0, r3, r1
    6662:	4282      	cmp	r2, r0
    6664:	6019      	str	r1, [r3, #0]
    6666:	d1dd      	bne.n	6624 <_free_r+0x24>
    6668:	6810      	ldr	r0, [r2, #0]
    666a:	6852      	ldr	r2, [r2, #4]
    666c:	605a      	str	r2, [r3, #4]
    666e:	4401      	add	r1, r0
    6670:	6019      	str	r1, [r3, #0]
    6672:	e7d7      	b.n	6624 <_free_r+0x24>
    6674:	d902      	bls.n	667c <_free_r+0x7c>
    6676:	230c      	movs	r3, #12
    6678:	602b      	str	r3, [r5, #0]
    667a:	e7d3      	b.n	6624 <_free_r+0x24>
    667c:	6820      	ldr	r0, [r4, #0]
    667e:	1821      	adds	r1, r4, r0
    6680:	428a      	cmp	r2, r1
    6682:	bf04      	itt	eq
    6684:	6811      	ldreq	r1, [r2, #0]
    6686:	6852      	ldreq	r2, [r2, #4]
    6688:	6062      	str	r2, [r4, #4]
    668a:	bf04      	itt	eq
    668c:	1809      	addeq	r1, r1, r0
    668e:	6021      	streq	r1, [r4, #0]
    6690:	605c      	str	r4, [r3, #4]
    6692:	e7c7      	b.n	6624 <_free_r+0x24>
    6694:	bd38      	pop	{r3, r4, r5, pc}
    6696:	bf00      	nop
    6698:	20003454 	.word	0x20003454

0000669c <_malloc_r>:
    669c:	b570      	push	{r4, r5, r6, lr}
    669e:	1ccd      	adds	r5, r1, #3
    66a0:	f025 0503 	bic.w	r5, r5, #3
    66a4:	3508      	adds	r5, #8
    66a6:	2d0c      	cmp	r5, #12
    66a8:	bf38      	it	cc
    66aa:	250c      	movcc	r5, #12
    66ac:	2d00      	cmp	r5, #0
    66ae:	4606      	mov	r6, r0
    66b0:	db01      	blt.n	66b6 <_malloc_r+0x1a>
    66b2:	42a9      	cmp	r1, r5
    66b4:	d903      	bls.n	66be <_malloc_r+0x22>
    66b6:	230c      	movs	r3, #12
    66b8:	6033      	str	r3, [r6, #0]
    66ba:	2000      	movs	r0, #0
    66bc:	bd70      	pop	{r4, r5, r6, pc}
    66be:	f000 f8b6 	bl	682e <__malloc_lock>
    66c2:	4a23      	ldr	r2, [pc, #140]	; (6750 <_malloc_r+0xb4>)
    66c4:	6814      	ldr	r4, [r2, #0]
    66c6:	4621      	mov	r1, r4
    66c8:	b991      	cbnz	r1, 66f0 <_malloc_r+0x54>
    66ca:	4c22      	ldr	r4, [pc, #136]	; (6754 <_malloc_r+0xb8>)
    66cc:	6823      	ldr	r3, [r4, #0]
    66ce:	b91b      	cbnz	r3, 66d8 <_malloc_r+0x3c>
    66d0:	4630      	mov	r0, r6
    66d2:	f000 f841 	bl	6758 <_sbrk_r>
    66d6:	6020      	str	r0, [r4, #0]
    66d8:	4629      	mov	r1, r5
    66da:	4630      	mov	r0, r6
    66dc:	f000 f83c 	bl	6758 <_sbrk_r>
    66e0:	1c43      	adds	r3, r0, #1
    66e2:	d126      	bne.n	6732 <_malloc_r+0x96>
    66e4:	230c      	movs	r3, #12
    66e6:	6033      	str	r3, [r6, #0]
    66e8:	4630      	mov	r0, r6
    66ea:	f000 f8a1 	bl	6830 <__malloc_unlock>
    66ee:	e7e4      	b.n	66ba <_malloc_r+0x1e>
    66f0:	680b      	ldr	r3, [r1, #0]
    66f2:	1b5b      	subs	r3, r3, r5
    66f4:	d41a      	bmi.n	672c <_malloc_r+0x90>
    66f6:	2b0b      	cmp	r3, #11
    66f8:	d90f      	bls.n	671a <_malloc_r+0x7e>
    66fa:	600b      	str	r3, [r1, #0]
    66fc:	50cd      	str	r5, [r1, r3]
    66fe:	18cc      	adds	r4, r1, r3
    6700:	4630      	mov	r0, r6
    6702:	f000 f895 	bl	6830 <__malloc_unlock>
    6706:	f104 000b 	add.w	r0, r4, #11
    670a:	1d23      	adds	r3, r4, #4
    670c:	f020 0007 	bic.w	r0, r0, #7
    6710:	1ac3      	subs	r3, r0, r3
    6712:	d01b      	beq.n	674c <_malloc_r+0xb0>
    6714:	425a      	negs	r2, r3
    6716:	50e2      	str	r2, [r4, r3]
    6718:	bd70      	pop	{r4, r5, r6, pc}
    671a:	428c      	cmp	r4, r1
    671c:	bf0d      	iteet	eq
    671e:	6863      	ldreq	r3, [r4, #4]
    6720:	684b      	ldrne	r3, [r1, #4]
    6722:	6063      	strne	r3, [r4, #4]
    6724:	6013      	streq	r3, [r2, #0]
    6726:	bf18      	it	ne
    6728:	460c      	movne	r4, r1
    672a:	e7e9      	b.n	6700 <_malloc_r+0x64>
    672c:	460c      	mov	r4, r1
    672e:	6849      	ldr	r1, [r1, #4]
    6730:	e7ca      	b.n	66c8 <_malloc_r+0x2c>
    6732:	1cc4      	adds	r4, r0, #3
    6734:	f024 0403 	bic.w	r4, r4, #3
    6738:	42a0      	cmp	r0, r4
    673a:	d005      	beq.n	6748 <_malloc_r+0xac>
    673c:	1a21      	subs	r1, r4, r0
    673e:	4630      	mov	r0, r6
    6740:	f000 f80a 	bl	6758 <_sbrk_r>
    6744:	3001      	adds	r0, #1
    6746:	d0cd      	beq.n	66e4 <_malloc_r+0x48>
    6748:	6025      	str	r5, [r4, #0]
    674a:	e7d9      	b.n	6700 <_malloc_r+0x64>
    674c:	bd70      	pop	{r4, r5, r6, pc}
    674e:	bf00      	nop
    6750:	20003454 	.word	0x20003454
    6754:	20003458 	.word	0x20003458

00006758 <_sbrk_r>:
    6758:	b538      	push	{r3, r4, r5, lr}
    675a:	4c06      	ldr	r4, [pc, #24]	; (6774 <_sbrk_r+0x1c>)
    675c:	2300      	movs	r3, #0
    675e:	4605      	mov	r5, r0
    6760:	4608      	mov	r0, r1
    6762:	6023      	str	r3, [r4, #0]
    6764:	f7fc fb86 	bl	2e74 <_sbrk>
    6768:	1c43      	adds	r3, r0, #1
    676a:	d102      	bne.n	6772 <_sbrk_r+0x1a>
    676c:	6823      	ldr	r3, [r4, #0]
    676e:	b103      	cbz	r3, 6772 <_sbrk_r+0x1a>
    6770:	602b      	str	r3, [r5, #0]
    6772:	bd38      	pop	{r3, r4, r5, pc}
    6774:	20003e74 	.word	0x20003e74

00006778 <siprintf>:
    6778:	b40e      	push	{r1, r2, r3}
    677a:	b500      	push	{lr}
    677c:	b09c      	sub	sp, #112	; 0x70
    677e:	f44f 7102 	mov.w	r1, #520	; 0x208
    6782:	ab1d      	add	r3, sp, #116	; 0x74
    6784:	f8ad 1014 	strh.w	r1, [sp, #20]
    6788:	9002      	str	r0, [sp, #8]
    678a:	9006      	str	r0, [sp, #24]
    678c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6790:	480a      	ldr	r0, [pc, #40]	; (67bc <siprintf+0x44>)
    6792:	9104      	str	r1, [sp, #16]
    6794:	9107      	str	r1, [sp, #28]
    6796:	f64f 71ff 	movw	r1, #65535	; 0xffff
    679a:	f853 2b04 	ldr.w	r2, [r3], #4
    679e:	f8ad 1016 	strh.w	r1, [sp, #22]
    67a2:	6800      	ldr	r0, [r0, #0]
    67a4:	9301      	str	r3, [sp, #4]
    67a6:	a902      	add	r1, sp, #8
    67a8:	f000 f89e 	bl	68e8 <_svfiprintf_r>
    67ac:	9b02      	ldr	r3, [sp, #8]
    67ae:	2200      	movs	r2, #0
    67b0:	701a      	strb	r2, [r3, #0]
    67b2:	b01c      	add	sp, #112	; 0x70
    67b4:	f85d eb04 	ldr.w	lr, [sp], #4
    67b8:	b003      	add	sp, #12
    67ba:	4770      	bx	lr
    67bc:	2000012c 	.word	0x2000012c

000067c0 <strcpy>:
    67c0:	4603      	mov	r3, r0
    67c2:	f811 2b01 	ldrb.w	r2, [r1], #1
    67c6:	f803 2b01 	strb.w	r2, [r3], #1
    67ca:	2a00      	cmp	r2, #0
    67cc:	d1f9      	bne.n	67c2 <strcpy+0x2>
    67ce:	4770      	bx	lr

000067d0 <strlen>:
    67d0:	4603      	mov	r3, r0
    67d2:	f813 2b01 	ldrb.w	r2, [r3], #1
    67d6:	2a00      	cmp	r2, #0
    67d8:	d1fb      	bne.n	67d2 <strlen+0x2>
    67da:	1a18      	subs	r0, r3, r0
    67dc:	3801      	subs	r0, #1
    67de:	4770      	bx	lr

000067e0 <strncmp>:
    67e0:	b510      	push	{r4, lr}
    67e2:	b16a      	cbz	r2, 6800 <strncmp+0x20>
    67e4:	3901      	subs	r1, #1
    67e6:	1884      	adds	r4, r0, r2
    67e8:	f810 3b01 	ldrb.w	r3, [r0], #1
    67ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    67f0:	4293      	cmp	r3, r2
    67f2:	d103      	bne.n	67fc <strncmp+0x1c>
    67f4:	42a0      	cmp	r0, r4
    67f6:	d001      	beq.n	67fc <strncmp+0x1c>
    67f8:	2b00      	cmp	r3, #0
    67fa:	d1f5      	bne.n	67e8 <strncmp+0x8>
    67fc:	1a98      	subs	r0, r3, r2
    67fe:	bd10      	pop	{r4, pc}
    6800:	4610      	mov	r0, r2
    6802:	bd10      	pop	{r4, pc}

00006804 <strncpy>:
    6804:	b570      	push	{r4, r5, r6, lr}
    6806:	4604      	mov	r4, r0
    6808:	b902      	cbnz	r2, 680c <strncpy+0x8>
    680a:	bd70      	pop	{r4, r5, r6, pc}
    680c:	4623      	mov	r3, r4
    680e:	f811 5b01 	ldrb.w	r5, [r1], #1
    6812:	f803 5b01 	strb.w	r5, [r3], #1
    6816:	1e56      	subs	r6, r2, #1
    6818:	b91d      	cbnz	r5, 6822 <strncpy+0x1e>
    681a:	4414      	add	r4, r2
    681c:	42a3      	cmp	r3, r4
    681e:	d103      	bne.n	6828 <strncpy+0x24>
    6820:	bd70      	pop	{r4, r5, r6, pc}
    6822:	461c      	mov	r4, r3
    6824:	4632      	mov	r2, r6
    6826:	e7ef      	b.n	6808 <strncpy+0x4>
    6828:	f803 5b01 	strb.w	r5, [r3], #1
    682c:	e7f6      	b.n	681c <strncpy+0x18>

0000682e <__malloc_lock>:
    682e:	4770      	bx	lr

00006830 <__malloc_unlock>:
    6830:	4770      	bx	lr

00006832 <__ssputs_r>:
    6832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6836:	688e      	ldr	r6, [r1, #8]
    6838:	429e      	cmp	r6, r3
    683a:	4682      	mov	sl, r0
    683c:	460c      	mov	r4, r1
    683e:	4691      	mov	r9, r2
    6840:	4698      	mov	r8, r3
    6842:	d835      	bhi.n	68b0 <__ssputs_r+0x7e>
    6844:	898a      	ldrh	r2, [r1, #12]
    6846:	f412 6f90 	tst.w	r2, #1152	; 0x480
    684a:	d031      	beq.n	68b0 <__ssputs_r+0x7e>
    684c:	6825      	ldr	r5, [r4, #0]
    684e:	6909      	ldr	r1, [r1, #16]
    6850:	1a6f      	subs	r7, r5, r1
    6852:	6965      	ldr	r5, [r4, #20]
    6854:	2302      	movs	r3, #2
    6856:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    685a:	fb95 f5f3 	sdiv	r5, r5, r3
    685e:	f108 0301 	add.w	r3, r8, #1
    6862:	443b      	add	r3, r7
    6864:	429d      	cmp	r5, r3
    6866:	bf38      	it	cc
    6868:	461d      	movcc	r5, r3
    686a:	0553      	lsls	r3, r2, #21
    686c:	d531      	bpl.n	68d2 <__ssputs_r+0xa0>
    686e:	4629      	mov	r1, r5
    6870:	f7ff ff14 	bl	669c <_malloc_r>
    6874:	4606      	mov	r6, r0
    6876:	b950      	cbnz	r0, 688e <__ssputs_r+0x5c>
    6878:	230c      	movs	r3, #12
    687a:	f8ca 3000 	str.w	r3, [sl]
    687e:	89a3      	ldrh	r3, [r4, #12]
    6880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6884:	81a3      	strh	r3, [r4, #12]
    6886:	f04f 30ff 	mov.w	r0, #4294967295
    688a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    688e:	463a      	mov	r2, r7
    6890:	6921      	ldr	r1, [r4, #16]
    6892:	f7ff fe88 	bl	65a6 <memcpy>
    6896:	89a3      	ldrh	r3, [r4, #12]
    6898:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    689c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    68a0:	81a3      	strh	r3, [r4, #12]
    68a2:	6126      	str	r6, [r4, #16]
    68a4:	6165      	str	r5, [r4, #20]
    68a6:	443e      	add	r6, r7
    68a8:	1bed      	subs	r5, r5, r7
    68aa:	6026      	str	r6, [r4, #0]
    68ac:	60a5      	str	r5, [r4, #8]
    68ae:	4646      	mov	r6, r8
    68b0:	4546      	cmp	r6, r8
    68b2:	bf28      	it	cs
    68b4:	4646      	movcs	r6, r8
    68b6:	4632      	mov	r2, r6
    68b8:	4649      	mov	r1, r9
    68ba:	6820      	ldr	r0, [r4, #0]
    68bc:	f7ff fe7e 	bl	65bc <memmove>
    68c0:	68a3      	ldr	r3, [r4, #8]
    68c2:	1b9b      	subs	r3, r3, r6
    68c4:	60a3      	str	r3, [r4, #8]
    68c6:	6823      	ldr	r3, [r4, #0]
    68c8:	441e      	add	r6, r3
    68ca:	6026      	str	r6, [r4, #0]
    68cc:	2000      	movs	r0, #0
    68ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    68d2:	462a      	mov	r2, r5
    68d4:	f000 fae4 	bl	6ea0 <_realloc_r>
    68d8:	4606      	mov	r6, r0
    68da:	2800      	cmp	r0, #0
    68dc:	d1e1      	bne.n	68a2 <__ssputs_r+0x70>
    68de:	6921      	ldr	r1, [r4, #16]
    68e0:	4650      	mov	r0, sl
    68e2:	f7ff fe8d 	bl	6600 <_free_r>
    68e6:	e7c7      	b.n	6878 <__ssputs_r+0x46>

000068e8 <_svfiprintf_r>:
    68e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68ec:	b09d      	sub	sp, #116	; 0x74
    68ee:	4680      	mov	r8, r0
    68f0:	9303      	str	r3, [sp, #12]
    68f2:	898b      	ldrh	r3, [r1, #12]
    68f4:	061c      	lsls	r4, r3, #24
    68f6:	460d      	mov	r5, r1
    68f8:	4616      	mov	r6, r2
    68fa:	d50f      	bpl.n	691c <_svfiprintf_r+0x34>
    68fc:	690b      	ldr	r3, [r1, #16]
    68fe:	b96b      	cbnz	r3, 691c <_svfiprintf_r+0x34>
    6900:	2140      	movs	r1, #64	; 0x40
    6902:	f7ff fecb 	bl	669c <_malloc_r>
    6906:	6028      	str	r0, [r5, #0]
    6908:	6128      	str	r0, [r5, #16]
    690a:	b928      	cbnz	r0, 6918 <_svfiprintf_r+0x30>
    690c:	230c      	movs	r3, #12
    690e:	f8c8 3000 	str.w	r3, [r8]
    6912:	f04f 30ff 	mov.w	r0, #4294967295
    6916:	e0c5      	b.n	6aa4 <_svfiprintf_r+0x1bc>
    6918:	2340      	movs	r3, #64	; 0x40
    691a:	616b      	str	r3, [r5, #20]
    691c:	2300      	movs	r3, #0
    691e:	9309      	str	r3, [sp, #36]	; 0x24
    6920:	2320      	movs	r3, #32
    6922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    6926:	2330      	movs	r3, #48	; 0x30
    6928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    692c:	f04f 0b01 	mov.w	fp, #1
    6930:	4637      	mov	r7, r6
    6932:	463c      	mov	r4, r7
    6934:	f814 3b01 	ldrb.w	r3, [r4], #1
    6938:	2b00      	cmp	r3, #0
    693a:	d13c      	bne.n	69b6 <_svfiprintf_r+0xce>
    693c:	ebb7 0a06 	subs.w	sl, r7, r6
    6940:	d00b      	beq.n	695a <_svfiprintf_r+0x72>
    6942:	4653      	mov	r3, sl
    6944:	4632      	mov	r2, r6
    6946:	4629      	mov	r1, r5
    6948:	4640      	mov	r0, r8
    694a:	f7ff ff72 	bl	6832 <__ssputs_r>
    694e:	3001      	adds	r0, #1
    6950:	f000 80a3 	beq.w	6a9a <_svfiprintf_r+0x1b2>
    6954:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6956:	4453      	add	r3, sl
    6958:	9309      	str	r3, [sp, #36]	; 0x24
    695a:	783b      	ldrb	r3, [r7, #0]
    695c:	2b00      	cmp	r3, #0
    695e:	f000 809c 	beq.w	6a9a <_svfiprintf_r+0x1b2>
    6962:	2300      	movs	r3, #0
    6964:	f04f 32ff 	mov.w	r2, #4294967295
    6968:	9304      	str	r3, [sp, #16]
    696a:	9307      	str	r3, [sp, #28]
    696c:	9205      	str	r2, [sp, #20]
    696e:	9306      	str	r3, [sp, #24]
    6970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    6974:	931a      	str	r3, [sp, #104]	; 0x68
    6976:	2205      	movs	r2, #5
    6978:	7821      	ldrb	r1, [r4, #0]
    697a:	4850      	ldr	r0, [pc, #320]	; (6abc <_svfiprintf_r+0x1d4>)
    697c:	f000 fa40 	bl	6e00 <memchr>
    6980:	1c67      	adds	r7, r4, #1
    6982:	9b04      	ldr	r3, [sp, #16]
    6984:	b9d8      	cbnz	r0, 69be <_svfiprintf_r+0xd6>
    6986:	06d9      	lsls	r1, r3, #27
    6988:	bf44      	itt	mi
    698a:	2220      	movmi	r2, #32
    698c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    6990:	071a      	lsls	r2, r3, #28
    6992:	bf44      	itt	mi
    6994:	222b      	movmi	r2, #43	; 0x2b
    6996:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    699a:	7822      	ldrb	r2, [r4, #0]
    699c:	2a2a      	cmp	r2, #42	; 0x2a
    699e:	d016      	beq.n	69ce <_svfiprintf_r+0xe6>
    69a0:	9a07      	ldr	r2, [sp, #28]
    69a2:	2100      	movs	r1, #0
    69a4:	200a      	movs	r0, #10
    69a6:	4627      	mov	r7, r4
    69a8:	3401      	adds	r4, #1
    69aa:	783b      	ldrb	r3, [r7, #0]
    69ac:	3b30      	subs	r3, #48	; 0x30
    69ae:	2b09      	cmp	r3, #9
    69b0:	d951      	bls.n	6a56 <_svfiprintf_r+0x16e>
    69b2:	b1c9      	cbz	r1, 69e8 <_svfiprintf_r+0x100>
    69b4:	e011      	b.n	69da <_svfiprintf_r+0xf2>
    69b6:	2b25      	cmp	r3, #37	; 0x25
    69b8:	d0c0      	beq.n	693c <_svfiprintf_r+0x54>
    69ba:	4627      	mov	r7, r4
    69bc:	e7b9      	b.n	6932 <_svfiprintf_r+0x4a>
    69be:	4a3f      	ldr	r2, [pc, #252]	; (6abc <_svfiprintf_r+0x1d4>)
    69c0:	1a80      	subs	r0, r0, r2
    69c2:	fa0b f000 	lsl.w	r0, fp, r0
    69c6:	4318      	orrs	r0, r3
    69c8:	9004      	str	r0, [sp, #16]
    69ca:	463c      	mov	r4, r7
    69cc:	e7d3      	b.n	6976 <_svfiprintf_r+0x8e>
    69ce:	9a03      	ldr	r2, [sp, #12]
    69d0:	1d11      	adds	r1, r2, #4
    69d2:	6812      	ldr	r2, [r2, #0]
    69d4:	9103      	str	r1, [sp, #12]
    69d6:	2a00      	cmp	r2, #0
    69d8:	db01      	blt.n	69de <_svfiprintf_r+0xf6>
    69da:	9207      	str	r2, [sp, #28]
    69dc:	e004      	b.n	69e8 <_svfiprintf_r+0x100>
    69de:	4252      	negs	r2, r2
    69e0:	f043 0302 	orr.w	r3, r3, #2
    69e4:	9207      	str	r2, [sp, #28]
    69e6:	9304      	str	r3, [sp, #16]
    69e8:	783b      	ldrb	r3, [r7, #0]
    69ea:	2b2e      	cmp	r3, #46	; 0x2e
    69ec:	d10e      	bne.n	6a0c <_svfiprintf_r+0x124>
    69ee:	787b      	ldrb	r3, [r7, #1]
    69f0:	2b2a      	cmp	r3, #42	; 0x2a
    69f2:	f107 0101 	add.w	r1, r7, #1
    69f6:	d132      	bne.n	6a5e <_svfiprintf_r+0x176>
    69f8:	9b03      	ldr	r3, [sp, #12]
    69fa:	1d1a      	adds	r2, r3, #4
    69fc:	681b      	ldr	r3, [r3, #0]
    69fe:	9203      	str	r2, [sp, #12]
    6a00:	2b00      	cmp	r3, #0
    6a02:	bfb8      	it	lt
    6a04:	f04f 33ff 	movlt.w	r3, #4294967295
    6a08:	3702      	adds	r7, #2
    6a0a:	9305      	str	r3, [sp, #20]
    6a0c:	4c2c      	ldr	r4, [pc, #176]	; (6ac0 <_svfiprintf_r+0x1d8>)
    6a0e:	7839      	ldrb	r1, [r7, #0]
    6a10:	2203      	movs	r2, #3
    6a12:	4620      	mov	r0, r4
    6a14:	f000 f9f4 	bl	6e00 <memchr>
    6a18:	b138      	cbz	r0, 6a2a <_svfiprintf_r+0x142>
    6a1a:	2340      	movs	r3, #64	; 0x40
    6a1c:	1b00      	subs	r0, r0, r4
    6a1e:	fa03 f000 	lsl.w	r0, r3, r0
    6a22:	9b04      	ldr	r3, [sp, #16]
    6a24:	4303      	orrs	r3, r0
    6a26:	9304      	str	r3, [sp, #16]
    6a28:	3701      	adds	r7, #1
    6a2a:	7839      	ldrb	r1, [r7, #0]
    6a2c:	4825      	ldr	r0, [pc, #148]	; (6ac4 <_svfiprintf_r+0x1dc>)
    6a2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    6a32:	2206      	movs	r2, #6
    6a34:	1c7e      	adds	r6, r7, #1
    6a36:	f000 f9e3 	bl	6e00 <memchr>
    6a3a:	2800      	cmp	r0, #0
    6a3c:	d035      	beq.n	6aaa <_svfiprintf_r+0x1c2>
    6a3e:	4b22      	ldr	r3, [pc, #136]	; (6ac8 <_svfiprintf_r+0x1e0>)
    6a40:	b9fb      	cbnz	r3, 6a82 <_svfiprintf_r+0x19a>
    6a42:	9b03      	ldr	r3, [sp, #12]
    6a44:	3307      	adds	r3, #7
    6a46:	f023 0307 	bic.w	r3, r3, #7
    6a4a:	3308      	adds	r3, #8
    6a4c:	9303      	str	r3, [sp, #12]
    6a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a50:	444b      	add	r3, r9
    6a52:	9309      	str	r3, [sp, #36]	; 0x24
    6a54:	e76c      	b.n	6930 <_svfiprintf_r+0x48>
    6a56:	fb00 3202 	mla	r2, r0, r2, r3
    6a5a:	2101      	movs	r1, #1
    6a5c:	e7a3      	b.n	69a6 <_svfiprintf_r+0xbe>
    6a5e:	2300      	movs	r3, #0
    6a60:	9305      	str	r3, [sp, #20]
    6a62:	4618      	mov	r0, r3
    6a64:	240a      	movs	r4, #10
    6a66:	460f      	mov	r7, r1
    6a68:	3101      	adds	r1, #1
    6a6a:	783a      	ldrb	r2, [r7, #0]
    6a6c:	3a30      	subs	r2, #48	; 0x30
    6a6e:	2a09      	cmp	r2, #9
    6a70:	d903      	bls.n	6a7a <_svfiprintf_r+0x192>
    6a72:	2b00      	cmp	r3, #0
    6a74:	d0ca      	beq.n	6a0c <_svfiprintf_r+0x124>
    6a76:	9005      	str	r0, [sp, #20]
    6a78:	e7c8      	b.n	6a0c <_svfiprintf_r+0x124>
    6a7a:	fb04 2000 	mla	r0, r4, r0, r2
    6a7e:	2301      	movs	r3, #1
    6a80:	e7f1      	b.n	6a66 <_svfiprintf_r+0x17e>
    6a82:	ab03      	add	r3, sp, #12
    6a84:	9300      	str	r3, [sp, #0]
    6a86:	462a      	mov	r2, r5
    6a88:	4b10      	ldr	r3, [pc, #64]	; (6acc <_svfiprintf_r+0x1e4>)
    6a8a:	a904      	add	r1, sp, #16
    6a8c:	4640      	mov	r0, r8
    6a8e:	f3af 8000 	nop.w
    6a92:	f1b0 3fff 	cmp.w	r0, #4294967295
    6a96:	4681      	mov	r9, r0
    6a98:	d1d9      	bne.n	6a4e <_svfiprintf_r+0x166>
    6a9a:	89ab      	ldrh	r3, [r5, #12]
    6a9c:	065b      	lsls	r3, r3, #25
    6a9e:	f53f af38 	bmi.w	6912 <_svfiprintf_r+0x2a>
    6aa2:	9809      	ldr	r0, [sp, #36]	; 0x24
    6aa4:	b01d      	add	sp, #116	; 0x74
    6aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6aaa:	ab03      	add	r3, sp, #12
    6aac:	9300      	str	r3, [sp, #0]
    6aae:	462a      	mov	r2, r5
    6ab0:	4b06      	ldr	r3, [pc, #24]	; (6acc <_svfiprintf_r+0x1e4>)
    6ab2:	a904      	add	r1, sp, #16
    6ab4:	4640      	mov	r0, r8
    6ab6:	f000 f881 	bl	6bbc <_printf_i>
    6aba:	e7ea      	b.n	6a92 <_svfiprintf_r+0x1aa>
    6abc:	000085b8 	.word	0x000085b8
    6ac0:	000085be 	.word	0x000085be
    6ac4:	000085c2 	.word	0x000085c2
    6ac8:	00000000 	.word	0x00000000
    6acc:	00006833 	.word	0x00006833

00006ad0 <_printf_common>:
    6ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ad4:	4691      	mov	r9, r2
    6ad6:	461f      	mov	r7, r3
    6ad8:	688a      	ldr	r2, [r1, #8]
    6ada:	690b      	ldr	r3, [r1, #16]
    6adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    6ae0:	4293      	cmp	r3, r2
    6ae2:	bfb8      	it	lt
    6ae4:	4613      	movlt	r3, r2
    6ae6:	f8c9 3000 	str.w	r3, [r9]
    6aea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    6aee:	4606      	mov	r6, r0
    6af0:	460c      	mov	r4, r1
    6af2:	b112      	cbz	r2, 6afa <_printf_common+0x2a>
    6af4:	3301      	adds	r3, #1
    6af6:	f8c9 3000 	str.w	r3, [r9]
    6afa:	6823      	ldr	r3, [r4, #0]
    6afc:	0699      	lsls	r1, r3, #26
    6afe:	bf42      	ittt	mi
    6b00:	f8d9 3000 	ldrmi.w	r3, [r9]
    6b04:	3302      	addmi	r3, #2
    6b06:	f8c9 3000 	strmi.w	r3, [r9]
    6b0a:	6825      	ldr	r5, [r4, #0]
    6b0c:	f015 0506 	ands.w	r5, r5, #6
    6b10:	d107      	bne.n	6b22 <_printf_common+0x52>
    6b12:	f104 0a19 	add.w	sl, r4, #25
    6b16:	68e3      	ldr	r3, [r4, #12]
    6b18:	f8d9 2000 	ldr.w	r2, [r9]
    6b1c:	1a9b      	subs	r3, r3, r2
    6b1e:	429d      	cmp	r5, r3
    6b20:	db29      	blt.n	6b76 <_printf_common+0xa6>
    6b22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    6b26:	6822      	ldr	r2, [r4, #0]
    6b28:	3300      	adds	r3, #0
    6b2a:	bf18      	it	ne
    6b2c:	2301      	movne	r3, #1
    6b2e:	0692      	lsls	r2, r2, #26
    6b30:	d42e      	bmi.n	6b90 <_printf_common+0xc0>
    6b32:	f104 0243 	add.w	r2, r4, #67	; 0x43
    6b36:	4639      	mov	r1, r7
    6b38:	4630      	mov	r0, r6
    6b3a:	47c0      	blx	r8
    6b3c:	3001      	adds	r0, #1
    6b3e:	d021      	beq.n	6b84 <_printf_common+0xb4>
    6b40:	6823      	ldr	r3, [r4, #0]
    6b42:	68e5      	ldr	r5, [r4, #12]
    6b44:	f8d9 2000 	ldr.w	r2, [r9]
    6b48:	f003 0306 	and.w	r3, r3, #6
    6b4c:	2b04      	cmp	r3, #4
    6b4e:	bf08      	it	eq
    6b50:	1aad      	subeq	r5, r5, r2
    6b52:	68a3      	ldr	r3, [r4, #8]
    6b54:	6922      	ldr	r2, [r4, #16]
    6b56:	bf0c      	ite	eq
    6b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    6b5c:	2500      	movne	r5, #0
    6b5e:	4293      	cmp	r3, r2
    6b60:	bfc4      	itt	gt
    6b62:	1a9b      	subgt	r3, r3, r2
    6b64:	18ed      	addgt	r5, r5, r3
    6b66:	f04f 0900 	mov.w	r9, #0
    6b6a:	341a      	adds	r4, #26
    6b6c:	454d      	cmp	r5, r9
    6b6e:	d11b      	bne.n	6ba8 <_printf_common+0xd8>
    6b70:	2000      	movs	r0, #0
    6b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b76:	2301      	movs	r3, #1
    6b78:	4652      	mov	r2, sl
    6b7a:	4639      	mov	r1, r7
    6b7c:	4630      	mov	r0, r6
    6b7e:	47c0      	blx	r8
    6b80:	3001      	adds	r0, #1
    6b82:	d103      	bne.n	6b8c <_printf_common+0xbc>
    6b84:	f04f 30ff 	mov.w	r0, #4294967295
    6b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b8c:	3501      	adds	r5, #1
    6b8e:	e7c2      	b.n	6b16 <_printf_common+0x46>
    6b90:	18e1      	adds	r1, r4, r3
    6b92:	1c5a      	adds	r2, r3, #1
    6b94:	2030      	movs	r0, #48	; 0x30
    6b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    6b9a:	4422      	add	r2, r4
    6b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    6ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    6ba4:	3302      	adds	r3, #2
    6ba6:	e7c4      	b.n	6b32 <_printf_common+0x62>
    6ba8:	2301      	movs	r3, #1
    6baa:	4622      	mov	r2, r4
    6bac:	4639      	mov	r1, r7
    6bae:	4630      	mov	r0, r6
    6bb0:	47c0      	blx	r8
    6bb2:	3001      	adds	r0, #1
    6bb4:	d0e6      	beq.n	6b84 <_printf_common+0xb4>
    6bb6:	f109 0901 	add.w	r9, r9, #1
    6bba:	e7d7      	b.n	6b6c <_printf_common+0x9c>

00006bbc <_printf_i>:
    6bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6bc0:	4617      	mov	r7, r2
    6bc2:	7e0a      	ldrb	r2, [r1, #24]
    6bc4:	b085      	sub	sp, #20
    6bc6:	2a6e      	cmp	r2, #110	; 0x6e
    6bc8:	4698      	mov	r8, r3
    6bca:	4606      	mov	r6, r0
    6bcc:	460c      	mov	r4, r1
    6bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6bd0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    6bd4:	f000 80bc 	beq.w	6d50 <_printf_i+0x194>
    6bd8:	d81a      	bhi.n	6c10 <_printf_i+0x54>
    6bda:	2a63      	cmp	r2, #99	; 0x63
    6bdc:	d02e      	beq.n	6c3c <_printf_i+0x80>
    6bde:	d80a      	bhi.n	6bf6 <_printf_i+0x3a>
    6be0:	2a00      	cmp	r2, #0
    6be2:	f000 80c8 	beq.w	6d76 <_printf_i+0x1ba>
    6be6:	2a58      	cmp	r2, #88	; 0x58
    6be8:	f000 808a 	beq.w	6d00 <_printf_i+0x144>
    6bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
    6bf0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    6bf4:	e02a      	b.n	6c4c <_printf_i+0x90>
    6bf6:	2a64      	cmp	r2, #100	; 0x64
    6bf8:	d001      	beq.n	6bfe <_printf_i+0x42>
    6bfa:	2a69      	cmp	r2, #105	; 0x69
    6bfc:	d1f6      	bne.n	6bec <_printf_i+0x30>
    6bfe:	6821      	ldr	r1, [r4, #0]
    6c00:	681a      	ldr	r2, [r3, #0]
    6c02:	f011 0f80 	tst.w	r1, #128	; 0x80
    6c06:	d023      	beq.n	6c50 <_printf_i+0x94>
    6c08:	1d11      	adds	r1, r2, #4
    6c0a:	6019      	str	r1, [r3, #0]
    6c0c:	6813      	ldr	r3, [r2, #0]
    6c0e:	e027      	b.n	6c60 <_printf_i+0xa4>
    6c10:	2a73      	cmp	r2, #115	; 0x73
    6c12:	f000 80b4 	beq.w	6d7e <_printf_i+0x1c2>
    6c16:	d808      	bhi.n	6c2a <_printf_i+0x6e>
    6c18:	2a6f      	cmp	r2, #111	; 0x6f
    6c1a:	d02a      	beq.n	6c72 <_printf_i+0xb6>
    6c1c:	2a70      	cmp	r2, #112	; 0x70
    6c1e:	d1e5      	bne.n	6bec <_printf_i+0x30>
    6c20:	680a      	ldr	r2, [r1, #0]
    6c22:	f042 0220 	orr.w	r2, r2, #32
    6c26:	600a      	str	r2, [r1, #0]
    6c28:	e003      	b.n	6c32 <_printf_i+0x76>
    6c2a:	2a75      	cmp	r2, #117	; 0x75
    6c2c:	d021      	beq.n	6c72 <_printf_i+0xb6>
    6c2e:	2a78      	cmp	r2, #120	; 0x78
    6c30:	d1dc      	bne.n	6bec <_printf_i+0x30>
    6c32:	2278      	movs	r2, #120	; 0x78
    6c34:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    6c38:	496e      	ldr	r1, [pc, #440]	; (6df4 <_printf_i+0x238>)
    6c3a:	e064      	b.n	6d06 <_printf_i+0x14a>
    6c3c:	681a      	ldr	r2, [r3, #0]
    6c3e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    6c42:	1d11      	adds	r1, r2, #4
    6c44:	6019      	str	r1, [r3, #0]
    6c46:	6813      	ldr	r3, [r2, #0]
    6c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    6c4c:	2301      	movs	r3, #1
    6c4e:	e0a3      	b.n	6d98 <_printf_i+0x1dc>
    6c50:	f011 0f40 	tst.w	r1, #64	; 0x40
    6c54:	f102 0104 	add.w	r1, r2, #4
    6c58:	6019      	str	r1, [r3, #0]
    6c5a:	d0d7      	beq.n	6c0c <_printf_i+0x50>
    6c5c:	f9b2 3000 	ldrsh.w	r3, [r2]
    6c60:	2b00      	cmp	r3, #0
    6c62:	da03      	bge.n	6c6c <_printf_i+0xb0>
    6c64:	222d      	movs	r2, #45	; 0x2d
    6c66:	425b      	negs	r3, r3
    6c68:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    6c6c:	4962      	ldr	r1, [pc, #392]	; (6df8 <_printf_i+0x23c>)
    6c6e:	220a      	movs	r2, #10
    6c70:	e017      	b.n	6ca2 <_printf_i+0xe6>
    6c72:	6820      	ldr	r0, [r4, #0]
    6c74:	6819      	ldr	r1, [r3, #0]
    6c76:	f010 0f80 	tst.w	r0, #128	; 0x80
    6c7a:	d003      	beq.n	6c84 <_printf_i+0xc8>
    6c7c:	1d08      	adds	r0, r1, #4
    6c7e:	6018      	str	r0, [r3, #0]
    6c80:	680b      	ldr	r3, [r1, #0]
    6c82:	e006      	b.n	6c92 <_printf_i+0xd6>
    6c84:	f010 0f40 	tst.w	r0, #64	; 0x40
    6c88:	f101 0004 	add.w	r0, r1, #4
    6c8c:	6018      	str	r0, [r3, #0]
    6c8e:	d0f7      	beq.n	6c80 <_printf_i+0xc4>
    6c90:	880b      	ldrh	r3, [r1, #0]
    6c92:	4959      	ldr	r1, [pc, #356]	; (6df8 <_printf_i+0x23c>)
    6c94:	2a6f      	cmp	r2, #111	; 0x6f
    6c96:	bf14      	ite	ne
    6c98:	220a      	movne	r2, #10
    6c9a:	2208      	moveq	r2, #8
    6c9c:	2000      	movs	r0, #0
    6c9e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    6ca2:	6865      	ldr	r5, [r4, #4]
    6ca4:	60a5      	str	r5, [r4, #8]
    6ca6:	2d00      	cmp	r5, #0
    6ca8:	f2c0 809c 	blt.w	6de4 <_printf_i+0x228>
    6cac:	6820      	ldr	r0, [r4, #0]
    6cae:	f020 0004 	bic.w	r0, r0, #4
    6cb2:	6020      	str	r0, [r4, #0]
    6cb4:	2b00      	cmp	r3, #0
    6cb6:	d13f      	bne.n	6d38 <_printf_i+0x17c>
    6cb8:	2d00      	cmp	r5, #0
    6cba:	f040 8095 	bne.w	6de8 <_printf_i+0x22c>
    6cbe:	4675      	mov	r5, lr
    6cc0:	2a08      	cmp	r2, #8
    6cc2:	d10b      	bne.n	6cdc <_printf_i+0x120>
    6cc4:	6823      	ldr	r3, [r4, #0]
    6cc6:	07da      	lsls	r2, r3, #31
    6cc8:	d508      	bpl.n	6cdc <_printf_i+0x120>
    6cca:	6923      	ldr	r3, [r4, #16]
    6ccc:	6862      	ldr	r2, [r4, #4]
    6cce:	429a      	cmp	r2, r3
    6cd0:	bfde      	ittt	le
    6cd2:	2330      	movle	r3, #48	; 0x30
    6cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
    6cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
    6cdc:	ebae 0305 	sub.w	r3, lr, r5
    6ce0:	6123      	str	r3, [r4, #16]
    6ce2:	f8cd 8000 	str.w	r8, [sp]
    6ce6:	463b      	mov	r3, r7
    6ce8:	aa03      	add	r2, sp, #12
    6cea:	4621      	mov	r1, r4
    6cec:	4630      	mov	r0, r6
    6cee:	f7ff feef 	bl	6ad0 <_printf_common>
    6cf2:	3001      	adds	r0, #1
    6cf4:	d155      	bne.n	6da2 <_printf_i+0x1e6>
    6cf6:	f04f 30ff 	mov.w	r0, #4294967295
    6cfa:	b005      	add	sp, #20
    6cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6d00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    6d04:	493c      	ldr	r1, [pc, #240]	; (6df8 <_printf_i+0x23c>)
    6d06:	6822      	ldr	r2, [r4, #0]
    6d08:	6818      	ldr	r0, [r3, #0]
    6d0a:	f012 0f80 	tst.w	r2, #128	; 0x80
    6d0e:	f100 0504 	add.w	r5, r0, #4
    6d12:	601d      	str	r5, [r3, #0]
    6d14:	d001      	beq.n	6d1a <_printf_i+0x15e>
    6d16:	6803      	ldr	r3, [r0, #0]
    6d18:	e002      	b.n	6d20 <_printf_i+0x164>
    6d1a:	0655      	lsls	r5, r2, #25
    6d1c:	d5fb      	bpl.n	6d16 <_printf_i+0x15a>
    6d1e:	8803      	ldrh	r3, [r0, #0]
    6d20:	07d0      	lsls	r0, r2, #31
    6d22:	bf44      	itt	mi
    6d24:	f042 0220 	orrmi.w	r2, r2, #32
    6d28:	6022      	strmi	r2, [r4, #0]
    6d2a:	b91b      	cbnz	r3, 6d34 <_printf_i+0x178>
    6d2c:	6822      	ldr	r2, [r4, #0]
    6d2e:	f022 0220 	bic.w	r2, r2, #32
    6d32:	6022      	str	r2, [r4, #0]
    6d34:	2210      	movs	r2, #16
    6d36:	e7b1      	b.n	6c9c <_printf_i+0xe0>
    6d38:	4675      	mov	r5, lr
    6d3a:	fbb3 f0f2 	udiv	r0, r3, r2
    6d3e:	fb02 3310 	mls	r3, r2, r0, r3
    6d42:	5ccb      	ldrb	r3, [r1, r3]
    6d44:	f805 3d01 	strb.w	r3, [r5, #-1]!
    6d48:	4603      	mov	r3, r0
    6d4a:	2800      	cmp	r0, #0
    6d4c:	d1f5      	bne.n	6d3a <_printf_i+0x17e>
    6d4e:	e7b7      	b.n	6cc0 <_printf_i+0x104>
    6d50:	6808      	ldr	r0, [r1, #0]
    6d52:	681a      	ldr	r2, [r3, #0]
    6d54:	6949      	ldr	r1, [r1, #20]
    6d56:	f010 0f80 	tst.w	r0, #128	; 0x80
    6d5a:	d004      	beq.n	6d66 <_printf_i+0x1aa>
    6d5c:	1d10      	adds	r0, r2, #4
    6d5e:	6018      	str	r0, [r3, #0]
    6d60:	6813      	ldr	r3, [r2, #0]
    6d62:	6019      	str	r1, [r3, #0]
    6d64:	e007      	b.n	6d76 <_printf_i+0x1ba>
    6d66:	f010 0f40 	tst.w	r0, #64	; 0x40
    6d6a:	f102 0004 	add.w	r0, r2, #4
    6d6e:	6018      	str	r0, [r3, #0]
    6d70:	6813      	ldr	r3, [r2, #0]
    6d72:	d0f6      	beq.n	6d62 <_printf_i+0x1a6>
    6d74:	8019      	strh	r1, [r3, #0]
    6d76:	2300      	movs	r3, #0
    6d78:	6123      	str	r3, [r4, #16]
    6d7a:	4675      	mov	r5, lr
    6d7c:	e7b1      	b.n	6ce2 <_printf_i+0x126>
    6d7e:	681a      	ldr	r2, [r3, #0]
    6d80:	1d11      	adds	r1, r2, #4
    6d82:	6019      	str	r1, [r3, #0]
    6d84:	6815      	ldr	r5, [r2, #0]
    6d86:	6862      	ldr	r2, [r4, #4]
    6d88:	2100      	movs	r1, #0
    6d8a:	4628      	mov	r0, r5
    6d8c:	f000 f838 	bl	6e00 <memchr>
    6d90:	b108      	cbz	r0, 6d96 <_printf_i+0x1da>
    6d92:	1b40      	subs	r0, r0, r5
    6d94:	6060      	str	r0, [r4, #4]
    6d96:	6863      	ldr	r3, [r4, #4]
    6d98:	6123      	str	r3, [r4, #16]
    6d9a:	2300      	movs	r3, #0
    6d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    6da0:	e79f      	b.n	6ce2 <_printf_i+0x126>
    6da2:	6923      	ldr	r3, [r4, #16]
    6da4:	462a      	mov	r2, r5
    6da6:	4639      	mov	r1, r7
    6da8:	4630      	mov	r0, r6
    6daa:	47c0      	blx	r8
    6dac:	3001      	adds	r0, #1
    6dae:	d0a2      	beq.n	6cf6 <_printf_i+0x13a>
    6db0:	6823      	ldr	r3, [r4, #0]
    6db2:	079b      	lsls	r3, r3, #30
    6db4:	d507      	bpl.n	6dc6 <_printf_i+0x20a>
    6db6:	2500      	movs	r5, #0
    6db8:	f104 0919 	add.w	r9, r4, #25
    6dbc:	68e3      	ldr	r3, [r4, #12]
    6dbe:	9a03      	ldr	r2, [sp, #12]
    6dc0:	1a9b      	subs	r3, r3, r2
    6dc2:	429d      	cmp	r5, r3
    6dc4:	db05      	blt.n	6dd2 <_printf_i+0x216>
    6dc6:	68e0      	ldr	r0, [r4, #12]
    6dc8:	9b03      	ldr	r3, [sp, #12]
    6dca:	4298      	cmp	r0, r3
    6dcc:	bfb8      	it	lt
    6dce:	4618      	movlt	r0, r3
    6dd0:	e793      	b.n	6cfa <_printf_i+0x13e>
    6dd2:	2301      	movs	r3, #1
    6dd4:	464a      	mov	r2, r9
    6dd6:	4639      	mov	r1, r7
    6dd8:	4630      	mov	r0, r6
    6dda:	47c0      	blx	r8
    6ddc:	3001      	adds	r0, #1
    6dde:	d08a      	beq.n	6cf6 <_printf_i+0x13a>
    6de0:	3501      	adds	r5, #1
    6de2:	e7eb      	b.n	6dbc <_printf_i+0x200>
    6de4:	2b00      	cmp	r3, #0
    6de6:	d1a7      	bne.n	6d38 <_printf_i+0x17c>
    6de8:	780b      	ldrb	r3, [r1, #0]
    6dea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    6dee:	f104 0542 	add.w	r5, r4, #66	; 0x42
    6df2:	e765      	b.n	6cc0 <_printf_i+0x104>
    6df4:	000085da 	.word	0x000085da
    6df8:	000085c9 	.word	0x000085c9
    6dfc:	00000000 	.word	0x00000000

00006e00 <memchr>:
    6e00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6e04:	2a10      	cmp	r2, #16
    6e06:	db2b      	blt.n	6e60 <memchr+0x60>
    6e08:	f010 0f07 	tst.w	r0, #7
    6e0c:	d008      	beq.n	6e20 <memchr+0x20>
    6e0e:	f810 3b01 	ldrb.w	r3, [r0], #1
    6e12:	3a01      	subs	r2, #1
    6e14:	428b      	cmp	r3, r1
    6e16:	d02d      	beq.n	6e74 <memchr+0x74>
    6e18:	f010 0f07 	tst.w	r0, #7
    6e1c:	b342      	cbz	r2, 6e70 <memchr+0x70>
    6e1e:	d1f6      	bne.n	6e0e <memchr+0xe>
    6e20:	b4f0      	push	{r4, r5, r6, r7}
    6e22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    6e26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    6e2a:	f022 0407 	bic.w	r4, r2, #7
    6e2e:	f07f 0700 	mvns.w	r7, #0
    6e32:	2300      	movs	r3, #0
    6e34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    6e38:	3c08      	subs	r4, #8
    6e3a:	ea85 0501 	eor.w	r5, r5, r1
    6e3e:	ea86 0601 	eor.w	r6, r6, r1
    6e42:	fa85 f547 	uadd8	r5, r5, r7
    6e46:	faa3 f587 	sel	r5, r3, r7
    6e4a:	fa86 f647 	uadd8	r6, r6, r7
    6e4e:	faa5 f687 	sel	r6, r5, r7
    6e52:	b98e      	cbnz	r6, 6e78 <memchr+0x78>
    6e54:	d1ee      	bne.n	6e34 <memchr+0x34>
    6e56:	bcf0      	pop	{r4, r5, r6, r7}
    6e58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    6e5c:	f002 0207 	and.w	r2, r2, #7
    6e60:	b132      	cbz	r2, 6e70 <memchr+0x70>
    6e62:	f810 3b01 	ldrb.w	r3, [r0], #1
    6e66:	3a01      	subs	r2, #1
    6e68:	ea83 0301 	eor.w	r3, r3, r1
    6e6c:	b113      	cbz	r3, 6e74 <memchr+0x74>
    6e6e:	d1f8      	bne.n	6e62 <memchr+0x62>
    6e70:	2000      	movs	r0, #0
    6e72:	4770      	bx	lr
    6e74:	3801      	subs	r0, #1
    6e76:	4770      	bx	lr
    6e78:	2d00      	cmp	r5, #0
    6e7a:	bf06      	itte	eq
    6e7c:	4635      	moveq	r5, r6
    6e7e:	3803      	subeq	r0, #3
    6e80:	3807      	subne	r0, #7
    6e82:	f015 0f01 	tst.w	r5, #1
    6e86:	d107      	bne.n	6e98 <memchr+0x98>
    6e88:	3001      	adds	r0, #1
    6e8a:	f415 7f80 	tst.w	r5, #256	; 0x100
    6e8e:	bf02      	ittt	eq
    6e90:	3001      	addeq	r0, #1
    6e92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    6e96:	3001      	addeq	r0, #1
    6e98:	bcf0      	pop	{r4, r5, r6, r7}
    6e9a:	3801      	subs	r0, #1
    6e9c:	4770      	bx	lr
    6e9e:	bf00      	nop

00006ea0 <_realloc_r>:
    6ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ea2:	4607      	mov	r7, r0
    6ea4:	4614      	mov	r4, r2
    6ea6:	460e      	mov	r6, r1
    6ea8:	b921      	cbnz	r1, 6eb4 <_realloc_r+0x14>
    6eaa:	4611      	mov	r1, r2
    6eac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6eb0:	f7ff bbf4 	b.w	669c <_malloc_r>
    6eb4:	b922      	cbnz	r2, 6ec0 <_realloc_r+0x20>
    6eb6:	f7ff fba3 	bl	6600 <_free_r>
    6eba:	4625      	mov	r5, r4
    6ebc:	4628      	mov	r0, r5
    6ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ec0:	f000 f814 	bl	6eec <_malloc_usable_size_r>
    6ec4:	4284      	cmp	r4, r0
    6ec6:	d90f      	bls.n	6ee8 <_realloc_r+0x48>
    6ec8:	4621      	mov	r1, r4
    6eca:	4638      	mov	r0, r7
    6ecc:	f7ff fbe6 	bl	669c <_malloc_r>
    6ed0:	4605      	mov	r5, r0
    6ed2:	2800      	cmp	r0, #0
    6ed4:	d0f2      	beq.n	6ebc <_realloc_r+0x1c>
    6ed6:	4631      	mov	r1, r6
    6ed8:	4622      	mov	r2, r4
    6eda:	f7ff fb64 	bl	65a6 <memcpy>
    6ede:	4631      	mov	r1, r6
    6ee0:	4638      	mov	r0, r7
    6ee2:	f7ff fb8d 	bl	6600 <_free_r>
    6ee6:	e7e9      	b.n	6ebc <_realloc_r+0x1c>
    6ee8:	4635      	mov	r5, r6
    6eea:	e7e7      	b.n	6ebc <_realloc_r+0x1c>

00006eec <_malloc_usable_size_r>:
    6eec:	f851 0c04 	ldr.w	r0, [r1, #-4]
    6ef0:	2800      	cmp	r0, #0
    6ef2:	f1a0 0004 	sub.w	r0, r0, #4
    6ef6:	bfbc      	itt	lt
    6ef8:	580b      	ldrlt	r3, [r1, r0]
    6efa:	18c0      	addlt	r0, r0, r3
    6efc:	4770      	bx	lr
    6efe:	0000      	movs	r0, r0
    6f00:	2a2a2a2a 	.word	0x2a2a2a2a
    6f04:	2a2a2a2a 	.word	0x2a2a2a2a
    6f08:	2a2a2a2a 	.word	0x2a2a2a2a
    6f0c:	2a2a2a2a 	.word	0x2a2a2a2a
    6f10:	2a2a2a2a 	.word	0x2a2a2a2a
    6f14:	2a2a2a2a 	.word	0x2a2a2a2a
    6f18:	2a2a2a2a 	.word	0x2a2a2a2a
    6f1c:	2a2a2a2a 	.word	0x2a2a2a2a
    6f20:	2a2a2a2a 	.word	0x2a2a2a2a
    6f24:	2a2a2a2a 	.word	0x2a2a2a2a
    6f28:	2a2a2a2a 	.word	0x2a2a2a2a
    6f2c:	2a2a2a2a 	.word	0x2a2a2a2a
    6f30:	2a2a2a2a 	.word	0x2a2a2a2a
    6f34:	2a2a2a2a 	.word	0x2a2a2a2a
    6f38:	00002a2a 	.word	0x00002a2a
    6f3c:	2a2a2a2a 	.word	0x2a2a2a2a
    6f40:	2a2a2a2a 	.word	0x2a2a2a2a
    6f44:	2a2a2a2a 	.word	0x2a2a2a2a
    6f48:	532a2a2a 	.word	0x532a2a2a
    6f4c:	4b434154 	.word	0x4b434154
    6f50:	45564f20 	.word	0x45564f20
    6f54:	4f4c4652 	.word	0x4f4c4652
    6f58:	45442057 	.word	0x45442057
    6f5c:	54434554 	.word	0x54434554
    6f60:	2a2a4445 	.word	0x2a2a4445
    6f64:	2a2a2a2a 	.word	0x2a2a2a2a
    6f68:	2a2a2a2a 	.word	0x2a2a2a2a
    6f6c:	2a2a2a2a 	.word	0x2a2a2a2a
    6f70:	2a2a2a2a 	.word	0x2a2a2a2a
    6f74:	00002a2a 	.word	0x00002a2a
    6f78:	6b736154 	.word	0x6b736154
    6f7c:	6e614820 	.word	0x6e614820
    6f80:	20656c64 	.word	0x20656c64
    6f84:	6425202d 	.word	0x6425202d
    6f88:	00000a0d 	.word	0x00000a0d

00006f8c <ModemCmdData>:
    6f8c:	00000200 00007c30 00000000 00001ca9     ....0|..........
    6f9c:	00000000 00000001 0000746c 00020003     ........lt......
    6fac:	00001ca9 00000009 00000002 00007470     ............pt..
    6fbc:	000f0008 00001ca9 0000001b 00000003     ................
    6fcc:	0000747c 000e000c 00001ca9 0000001e     |t..............
    6fdc:	00000004 0000748c 000c0008 00001ca9     .....t..........
    6fec:	00000018 00000005 00007498 00080005     .........t......
    6ffc:	00001ca9 00000011 00000006 000074a4     .............t..
    700c:	000b000a 00001ca9 00000019 00000007     ................
    701c:	000074b0 0015000a 00001ca9 00000023     .t..........#...
    702c:	00000008 000074bc 00020005 00001ca9     .....t..........
    703c:	0000000b 00000109 000074c4 003d0027     .........t..'.=.
    704c:	00001ca9 00000068 0000010a 000074ec     ....h........t..
    705c:	00020012 00001ca9 00000018 0000010b     ................
    706c:	00007500 00020012 00001ca9 00000018     .u..............
    707c:	0000010c 00007514 00020012 00001ca9     .....u..........
    708c:	00000018 0000010d 00007528 00020012     ........(u......
    709c:	00001ca9 00000018 0000010e 0000753c     ............<u..
    70ac:	00020012 00001ca9 00000018 0000010f     ................
    70bc:	00007550 00020012 00001ca9 00000018     Pu..............
    70cc:	00000110 00007564 00020012 00001ca9     ....du..........
    70dc:	00000018 00000111 00007578 00020012     ........xu......
    70ec:	00001ca9 00000018 00000112 0000758c     .............u..
    70fc:	00020012 00001ca9 00000018 00000113     ................
    710c:	000075a0 00020013 00001ca9 00000019     .u..............
    711c:	00000114 000075b4 0002001f 00001ca9     .....u..........
    712c:	00000025 00000115 000075d4 00020023     %........u..#...
    713c:	00001ca9 00000029 00000116 000075f8     ....)........u..
    714c:	0002001a 00001ca9 00000020 00000117     ........ .......
    715c:	20000000 00070011 00001ca9 0000001c     ... ............
    716c:	00000118 200001ac 00bf003a 00001ca9     ....... :.......
    717c:	000000fd 00000119 00007614 00020010     .........v......
    718c:	00001ca9 00000016 0000011a 00007628     ............(v..
    719c:	00020010 00001ca9 00000016 0000011b     ................
    71ac:	0000763c 0002000b 00001ca9 00000011     <v..............
	...
    743c:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    744c:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    745c:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    746c:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    747c:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    748c:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    749c:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    74ac:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    74bc:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    74cc:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    74dc:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    74ec:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    74fc:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    750c:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    751c:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    752c:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    753c:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    754c:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    755c:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    756c:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    757c:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    758c:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    759c:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    75ac:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    75bc:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    75cc:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    75dc:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    75ec:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    75fc:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    760c:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    761c:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    762c:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    763c:	432b5441 54544147 000d303d 6f727245     AT+CGATT=0..Erro
    764c:	48203a72 20706165 6f6c6c61 69746163     r: Heap allocati
    765c:	66206e6f 7020726f 65737261 74616420     on for parse dat
    766c:	75622061 72656666 69616620 0064656c     a buffer failed.
    767c:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    768c:	76206f74 66697265 68742079 6f632065     to verify the co
    769c:	6e616d6d 74732064 676e6972 72756420     mmand string dur
    76ac:	20676e69 73726170 00676e69 6f727245     ing parsing.Erro
    76bc:	4e203a72 6120746f 20656c62 72206f74     r: Not able to r
    76cc:	20646165 61746164 6f726620 6572206d     ead data from re
    76dc:	76696563 69722065 6220676e 65666675     ceive ring buffe
    76ec:	75642072 676e6972 72617020 00726573     r during parser.
    76fc:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    770c:	69746163 66206e6f 7220726f 6f707365     cation for respo
    771c:	2065736e 61746164 66756220 20726566     nse data buffer 
    772c:	6c696166 00006465 00004b4f 6c696146     failed..OK..Fail
    773c:	74206465 6573206f 7420746e 53206568     ed to sent the S
    774c:	69737365 43206e6f 65736f6c 71657220     ession Close req
    775c:	74736575 206f7420 54207854 006b7361     uest to Tx Task.
    776c:	6f727245 203a2072 20746f4e 656c6261     Error : Not able
    777c:	206f7420 6174626f 54206e69 65532078      to obtain Tx Se
    778c:	6170616d 65726f68 00000000 6e617254     mapahore....Tran
    779c:	74696d73 65755120 69206575 6f6e2073     smit Queue is no
    77ac:	6d652074 00797470 4d206f4e 2065726f     t empty.No More 
    77bc:	69746341 43206576 656e6e6f 6f697463     Active Connectio
    77cc:	7420736e 6c63206f 0065736f 736f6c43     ns to close.Clos
    77dc:	41206465 41206c6c 76697463 6f432065     ed All Active Co
    77ec:	63656e6e 6e6f6974 00000073 6c696146     nnections...Fail
    77fc:	74206465 6572206f 76696563 6f632065     ed to receive co
    780c:	63656e6e 6e6f6974 73657220 736e6f70     nnection respons
    781c:	6e692065 20585220 65646f6d 00000000     e in RX mode....
    782c:	756f7242 20746867 20656874 20504450     Brought the PDP 
    783c:	6e6e6f63 69746365 44206e6f 004e574f     connection DOWN.
    784c:	65707845 64657463 73655220 736e6f70     Expected Respons
    785c:	6f4e2065 65522074 76696563 202e6465     e Not Received. 
    786c:	72746552 676e6979 002e2e2e 6c696146     Retrying....Fail
    787c:	74206465 6573206f 7420746e 50206568     ed to sent the P
    788c:	65442053 68636174 71657220 74736575     S Detach request
    789c:	206f7420 54207854 006b7361 61746544      to Tx Task.Deta
    78ac:	64656863 65687420 50445020 00535020     ched the PDP PS.
    78bc:	656c6544 20646574 206c6c61 7420666f     Deleted all of t
    78cc:	70206568 69766572 2073756f 6e6e6f63     he previous conn
    78dc:	69746365 63206e6f 69666e6f 61727567     ection configura
    78ec:	6e6f6974 00000073 6c696146 74206465     tions...Failed t
    78fc:	6573206f 7420746e 45206568 7020464f     o sent the EOF p
    790c:	65747461 74206e72 7854206f 73615420     attern to Tx Tas
    791c:	0000006b 20464f45 74746150 206e7265     k...EOF Pattern 
    792c:	666e6f63 72756769 00006465 6c696146     configured..Fail
    793c:	74206465 6573206f 6120746e 73656363     ed to sent acces
    794c:	6f702073 20746e69 20646d63 54206f74     s point cmd to T
    795c:	61542078 00006b73 65636341 50207373     x Task..Access P
    796c:	746e696f 6e6f6320 75676966 00646572     oint configured.
    797c:	6c696146 74206465 6573206f 6320746e     Failed to sent c
    798c:	656e6e6f 6f697463 6974206e 2072656d     onnection timer 
    799c:	20646d63 54206f74 61542078 00006b73     cmd to Tx Task..
    79ac:	6e6e6f43 69746365 54206e6f 72656d69     Connection Timer
    79bc:	6f632073 6769666e 64657275 00000000     s configured....
    79cc:	6e6e6f43 69746365 53206e6f 75746174     Connection Statu
    79dc:	203a2073 43534944 454e4e4f 44455443     s : DISCONNECTED
    79ec:	45554420 204f5420 5754454e 004b524f      DUE TO NETWORK.
    79fc:	6e6e6f43 69746365 53206e6f 75746174     Connection Statu
    7a0c:	203a2073 4e4e4f43 45544345 00000044     s : CONNECTED...
    7a1c:	6e6e6f43 69746365 73206e6f 65636375     Connection succe
    7a2c:	75667373 2e2e2e6c 756f6c43 65532064     ssful...Cloud Se
    7a3c:	72657672 6e6f6320 75676966 00646572     rver configured.
    7a4c:	6e6e6f43 69746365 53206e6f 75746174     Connection Statu
    7a5c:	203a2073 4c494146 54204445 4f43204f     s : FAILED TO CO
    7a6c:	43454e4e 00000054 6e6e6f43 69746365     NNECT...Connecti
    7a7c:	53206e6f 75746174 203a2073 4e4e4f43     on Status : CONN
    7a8c:	49544345 43204e4f 45534f4c 00000044     ECTION CLOSED...
    7a9c:	6e6e6f43 69746365 53206e6f 75746174     Connection Statu
    7aac:	203a2073 4e4e4f43 49544345 49204e4f     s : CONNECTION I
    7abc:	5250204e 4552474f 00005353 6e6e6f43     N PROGRESS..Conn
    7acc:	69746365 53206e6f 75746174 203a2073     ection Status : 
    7adc:	454c4449 4d495420 53205245 54524154     IDLE TIMER START
    7aec:	46204445 4420524f 4f435349 43454e4e     ED FOR DISCONNEC
    7afc:	4e4f4954 00000000 6e6e6f43 69746365     TION....Connecti
    7b0c:	53206e6f 75746174 203a2073 454c4449     on Status : IDLE
    7b1c:	4d495420 43205245 45434e41 44454c4c      TIMER CANCELLED
    7b2c:	00000000 6f727245 203a2072 6e6e6f43     ....Error : Conn
    7b3c:	69746365 46206e6f 756c6961 00006572     ection Failure..
    7b4c:	74736552 69747261 7420676e 63206568     Restarting the c
    7b5c:	656e6e6f 6f697463 6e69206e 61697469     onnection initia
    7b6c:	617a696c 6e6f6974 002e2e2e 4e4e4f43     lization....CONN
    7b7c:	00544345 736f6c43 20676e69 69746341     ECT.Closing Acti
    7b8c:	43206576 656e6e6f 6f697463 0000736e     ve Connections..
    7b9c:	4e4e4f43 0d544345 5454480a 2e312f50     CONNECT..HTTP/1.
    7bac:	30322031 4b4f2030 00000000 65500a0d     1 200 OK......Pe
    7bbc:	726f6672 676e696d 65687420 72724520     rforming the Err
    7bcc:	5220726f 766f6365 0d797265 0000000a     or Recovery.....
    7bdc:	736f6c43 20676e69 20656874 69746361     Closing the acti
    7bec:	63206576 656e6e6f 6f697463 0000006e     ve connection...
    7bfc:	626f7250 206d656c 41206e69 206f7475     Problem in Auto 
    7c0c:	6f636552 79726576 6552202e 746f6f62     Recovery. Reboot
    7c1c:	20676e69 20656874 74737973 2e2e6d65     ing the system..
    7c2c:	0a0d2e2e 00000000 6f727245 65522072     ........Error Re
    7c3c:	65766f63 43207972 6c706d6f 64657465     covery Completed
    7c4c:	00000a0d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ....============
    7c5c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    7c6c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    7c7c:	3d3d3d3d 000a0d3d 61747345 73696c62     =====...Establis
    7c8c:	676e6968 6e206120 63207765 656e6e6f     hing a new conne
    7c9c:	6f697463 6977206e 73206874 65767265     ction with serve
    7cac:	00000072 74737953 69206d65 75612073     r...System is au
    7cbc:	72206f74 766f6365 64657265 726f6620     to recovered for
    7ccc:	726f6d20 68742065 33206e61 6d697420      more than 3 tim
    7cdc:	002e7365 66726550 696d726f 6120676e     es..Performing a
    7cec:	73797320 206d6574 74736572 2e747261      system restart.
    7cfc:	2e2e2e2e 2e2e2e2e 2e2e2e2e 2e2e2e2e     ................
    7d0c:	0d2e2e2e 0000000a 6c696146 74206465     ........Failed t
    7d1c:	6573206f 7420746e 44206568 20676169     o sent the Diag 
    7d2c:	61746164 206f7420 54207854 006b7361     data to Tx Task.
    7d3c:	69726556 6e697966 68742067 41552065     Verifying the UA
    7d4c:	4c205452 206b6e69 74617473 77207375     RT Link status w
    7d5c:	20687469 65646f4d 0000006d 63637553     ith Modem...Succ
    7d6c:	46737365 796c6c75 72657620 65696669     essFully verifie
    7d7c:	68742064 41552065 4c205452 206b6e69     d the UART Link 
    7d8c:	77746562 206e6565 444d4153 43203135     between SAMD51 C
    7d9c:	72746e6f 656c6c6f 20262072 65646f4d     ontroller & Mode
    7dac:	0000006d 72746552 65766569 68742064     m...Retrieved th
    7dbc:	6f4d2065 206d6564 49454d49 6d754e20     e Modem IMEI Num
    7dcc:	00726562 72746552 65766569 68742064     ber.Retrieved th
    7ddc:	6f4d2065 206d6564 69726573 4e206c61     e Modem serial N
    7dec:	65626d75 00000072 72756f48 5320796c     umber...Hourly S
    7dfc:	65747379 6552206d 72617473 69742074     ystem Restart ti
    7e0c:	2072656d 69707865 2e646572 62655220     mer expired. Reb
    7e1c:	69746f6f 7420676e 73206568 65747379     ooting the syste
    7e2c:	0a0d2e6d 00000000 72756f48 7953796c     m.......HourlySy
    7e3c:	6d657473 74736552 54747261 72656d69     stemRestartTimer
    7e4c:	00000000 6c696146 74206465 6f70206f     ....Failed to po
    7e5c:	74207473 63206568 656e6e6f 6f697463     st the connectio
    7e6c:	6552206e 6e6f7073 74206573 7551206f     n Response to Qu
    7e7c:	00657565 6f727245 203a2072 6d6d6f43     eue.Error : Comm
    7e8c:	20646e61 70736552 65736e6f 65755120     and Response Que
    7e9c:	69206575 6f6e2073 6d652074 00797470     ue is not empty.
    7eac:	4f525245 52203a52 69656365 20646576     ERROR: Received 
    7ebc:	65206e61 7974706d 73657220 736e6f70     an empty respons
    7ecc:	74732065 676e6972 206e6920 6d6d6f63     e string in comm
    7edc:	20646e61 70736572 65736e6f 6e616820     and response han
    7eec:	72656c64 00000000 4f525245 43203a52     dler....ERROR: C
    7efc:	616d6d6f 5020646e 69737261 4620676e     ommand Parsing F
    7f0c:	656c6961 00000064 73207854 61697265     ailed...Tx seria
    7f1c:	6544206c 20677562 656e6f44 00000a0d     l Debug Done....
    7f2c:	44207852 0d656e6f 0000000a 2d207325     Rx Done.....%s -
    7f3c:	20642520 00000a0d 682f2e2e 692f6c61      %d ....../hal/i
    7f4c:	756c636e 682f6564 775f6c61 682e7464     nclude/hal_wdt.h
    7f5c:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    7f6c:	615f6c61 79735f63 632e636e 00000000     al_ac_sync.c....
    7f7c:	682f2e2e 732f6c61 682f6372 615f6c61     ../hal/src/hal_a
    7f8c:	735f6364 2e636e79 00000063 682f2e2e     dc_sync.c...../h
    7f9c:	732f6c61 682f6372 645f6c61 735f6361     al/src/hal_dac_s
    7fac:	2e636e79 00000063 682f2e2e 732f6c61     ync.c...../hal/s
    7fbc:	682f6372 665f6c61 6873616c 0000632e     rc/hal_flash.c..
    7fcc:	682f2e2e 732f6c61 682f6372 705f6c61     ../hal/src/hal_p
    7fdc:	632e6d77 00000000 682f2e2e 732f6c61     wm.c....../hal/s
    7fec:	682f6372 745f6c61 72656d69 0000632e     rc/hal_timer.c..
    7ffc:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    800c:	6974752f 6c5f736c 2e747369 00000063     /utils_list.c...
    801c:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    802c:	6974752f 725f736c 62676e69 65666675     /utils_ringbuffe
    803c:	00632e72 682f2e2e 612f6c70 70682f63     r.c.../hpl/ac/hp
    804c:	63615f6c 0000632e                       l_ac.c..

00008054 <_adcs>:
    8054:	00c00000 00830002 00001900 00000000     ................
    8064:	00000000 00010001 00000000 00000000     ................
	...
    8080:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    8090:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    80a0:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

000080b0 <_cfgs>:
	...

000081b0 <user_mux_confs>:
	...

000081f4 <channel_confs>:
	...

00008234 <interrupt_cfg>:
	...
    82b4:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    82c4:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    82d4:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    82e4:	43000000 43000400                       ...C...C

000082ec <_usarts>:
    82ec:	00000003 40200004 00030000 00700002     ...... @......p.
    82fc:	0000f62b 00000000 00000004 40300184     +.............0@
    830c:	00030300 00700002 0000ff2e 00000000     ......p.........
    831c:	00000005 40300004 00030000 00700002     ......0@......p.
    832c:	0000f62b 00000000                       +.......

00008334 <_i2cms>:
	...

0000834c <sercomspi_regs>:
	...
    8360:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    8370:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    8380:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00008390 <_tccs>:
    8390:	00000000 00000300 00000000 00000000     ................
    83a0:	00001770 00000000 00000000 00000000     p...............
    83b0:	00000000 00000001 00000300 00000000     ................
    83c0:	00000000 00001770 00000000 00000000     ....p...........
	...
    83d8:	00000002 00000300 00000000 00000000     ................
    83e8:	00001770 00000000 00000000 00000000     p...............
    83f8:	00000000 00000003 00000300 00000000     ................
    8408:	00000000 00001770 00000000 00000000     ....p...........
	...
    8420:	00000004 00000300 00000000 00000000     ................
    8430:	00001770 00000000 00000000 00000000     p...............
    8440:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    8450:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    8460:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    8470:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    8480:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    8490:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    84a0:	736e6553 6154726f 00006b73 65646f4d     SensorTask..Mode
    84b0:	5478546d 006b7361 65646f4d 5478526d     mTxTask.ModemRxT
    84c0:	006b7361 65646f4d 6f72506d 73736563     ask.ModemProcess
    84d0:	6b736154 00000000 65646f4d 6169446d     Task....ModemDia
    84e0:	73615467 0000006b 65657246 4f545220     gTask...Free RTO
    84f0:	63532053 75646568 2072656c 20746f6e     S Scheduler not 
    8500:	72617473 00646574 6c696146 74206465     started.Failed t
    8510:	7263206f 65746165 73617420 0000736b     o create tasks..
    8520:	6f727245 53203a72 64656863 72656c75     Error: Scheduler
    8530:	69786520 00646574 454c4449 00000000      exited.IDLE....
    8540:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    8550:	20726d54 00637653                       Tmr Svc.

00008558 <__sf_fake_stderr>:
	...

00008578 <__sf_fake_stdin>:
	...

00008598 <__sf_fake_stdout>:
	...
    85b8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    85c8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    85d8:	31300046 35343332 39383736 64636261     F.0123456789abcd
    85e8:	00006665                                ef..

000085ec <_init>:
    85ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85ee:	bf00      	nop
    85f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    85f2:	bc08      	pop	{r3}
    85f4:	469e      	mov	lr, r3
    85f6:	4770      	bx	lr

000085f8 <__init_array_start>:
    85f8:	00000289 	.word	0x00000289

000085fc <_fini>:
    85fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85fe:	bf00      	nop
    8600:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8602:	bc08      	pop	{r3}
    8604:	469e      	mov	lr, r3
    8606:	4770      	bx	lr

00008608 <__fini_array_start>:
    8608:	00000265 	.word	0x00000265
