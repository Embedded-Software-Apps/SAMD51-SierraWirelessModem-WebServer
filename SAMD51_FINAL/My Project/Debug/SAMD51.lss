
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000098f0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000248  20000000  000098f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020248  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020248  2**0
                  CONTENTS
  4 .bss          00003d30  20000250  00009b40  00020248  2**4
                  ALLOC
  5 .stack        00010000  20003f80  0000d870  00020248  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020276  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005d3fa  00000000  00000000  000202cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008aef  00000000  00000000  0007d6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000185c9  00000000  00000000  000861b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001798  00000000  00000000  0009e781  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001ec0  00000000  00000000  0009ff19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039d9c  00000000  00000000  000a1dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b3af  00000000  00000000  000dbb75  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105831  00000000  00000000  00106f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004208  00000000  00000000  0020c758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 3f 01 20 1d 36 00 00 b5 36 00 00 b5 36 00 00     .?. .6...6...6..
      10:	b5 36 00 00 b5 36 00 00 b5 36 00 00 00 00 00 00     .6...6...6......
	...
      2c:	f1 4c 00 00 b5 36 00 00 00 00 00 00 91 4d 00 00     .L...6.......M..
      3c:	f5 4d 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .M...6...6...6..
      4c:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
      5c:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
      6c:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
      7c:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
      8c:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
      9c:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
      ac:	b5 36 00 00 b5 36 00 00 69 42 00 00 7d 42 00 00     .6...6..iB..}B..
      bc:	4d 41 00 00 59 41 00 00 65 41 00 00 71 41 00 00     MA..YA..eA..qA..
      cc:	7d 41 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     }A...6...6...6..
      dc:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
      ec:	b5 36 00 00 00 00 00 00 79 43 00 00 b5 36 00 00     .6......yC...6..
      fc:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
     10c:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
     11c:	b5 36 00 00 b5 36 00 00 b5 36 00 00 31 29 00 00     .6...6...6..1)..
     12c:	3d 29 00 00 49 29 00 00 b5 36 00 00 b5 36 00 00     =)..I)...6...6..
     13c:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
     14c:	b5 36 00 00 6d 34 00 00 b5 36 00 00 00 00 00 00     .6..m4...6......
	...
     180:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
     190:	00 00 00 00 95 46 00 00 b5 36 00 00 b5 36 00 00     .....F...6...6..
     1a0:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
     1b0:	a9 46 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .F...6...6...6..
     1c0:	b5 36 00 00 bd 46 00 00 b5 36 00 00 b5 36 00 00     .6...F...6...6..
     1d0:	b5 36 00 00 d1 46 00 00 b5 36 00 00 b5 36 00 00     .6...F...6...6..
     1e0:	e5 46 00 00 b5 36 00 00 b5 36 00 00 41 47 00 00     .F...6...6..AG..
     1f0:	55 47 00 00 69 47 00 00 7d 47 00 00 91 47 00 00     UG..iG..}G...G..
     200:	a5 47 00 00 00 00 00 00 00 00 00 00 b5 36 00 00     .G...........6..
     210:	b5 36 00 00 b5 36 00 00 69 05 00 00 7d 05 00 00     .6...6..i...}...
     220:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
     230:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
     240:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
     250:	b5 36 00 00 b5 36 00 00 b5 36 00 00 b5 36 00 00     .6...6...6...6..
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000250 	.word	0x20000250
     280:	00000000 	.word	0x00000000
     284:	000098f0 	.word	0x000098f0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000098f0 	.word	0x000098f0
     2c4:	20000254 	.word	0x20000254
     2c8:	000098f0 	.word	0x000098f0
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Application/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
     2d2:	b088      	sub	sp, #32
     2d4:	4606      	mov	r6, r0
	uint8_t dbgBuffer[30];
	memset(dbgBuffer,'0',30);
     2d6:	221e      	movs	r2, #30
     2d8:	2130      	movs	r1, #48	; 0x30
     2da:	4668      	mov	r0, sp
     2dc:	4b0d      	ldr	r3, [pc, #52]	; (314 <vApplicationStackOverflowHook+0x44>)
     2de:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e0:	4d0d      	ldr	r5, [pc, #52]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e2:	4628      	mov	r0, r5
     2e4:	4c0d      	ldr	r4, [pc, #52]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2e6:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2e8:	480d      	ldr	r0, [pc, #52]	; (320 <vApplicationStackOverflowHook+0x50>)
     2ea:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ec:	4628      	mov	r0, r5
     2ee:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f0:	480c      	ldr	r0, [pc, #48]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f2:	47a0      	blx	r4

	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2f4:	4632      	mov	r2, r6
     2f6:	490c      	ldr	r1, [pc, #48]	; (328 <vApplicationStackOverflowHook+0x58>)
     2f8:	4668      	mov	r0, sp
     2fa:	4b0c      	ldr	r3, [pc, #48]	; (32c <vApplicationStackOverflowHook+0x5c>)
     2fc:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     2fe:	4668      	mov	r0, sp
     300:	4b0b      	ldr	r3, [pc, #44]	; (330 <vApplicationStackOverflowHook+0x60>)
     302:	4798      	blx	r3
     304:	b281      	uxth	r1, r0
     306:	4668      	mov	r0, sp
     308:	4b0a      	ldr	r3, [pc, #40]	; (334 <vApplicationStackOverflowHook+0x64>)
     30a:	4798      	blx	r3

	requestWatchDogForcedReset();
     30c:	4b0a      	ldr	r3, [pc, #40]	; (338 <vApplicationStackOverflowHook+0x68>)
     30e:	4798      	blx	r3
}
     310:	b008      	add	sp, #32
     312:	bd70      	pop	{r4, r5, r6, pc}
     314:	00006c33 	.word	0x00006c33
     318:	00007690 	.word	0x00007690
     31c:	0000336d 	.word	0x0000336d
     320:	000076cc 	.word	0x000076cc
     324:	00009368 	.word	0x00009368
     328:	00007708 	.word	0x00007708
     32c:	00006dbd 	.word	0x00006dbd
     330:	00006e15 	.word	0x00006e15
     334:	00003329 	.word	0x00003329
     338:	000035a5 	.word	0x000035a5

0000033c <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
     33c:	b538      	push	{r3, r4, r5, lr}
	DEBUG_PRINT("**********************************************************");
     33e:	4d05      	ldr	r5, [pc, #20]	; (354 <vApplicationMallocFailedHook+0x18>)
     340:	4628      	mov	r0, r5
     342:	4c05      	ldr	r4, [pc, #20]	; (358 <vApplicationMallocFailedHook+0x1c>)
     344:	47a0      	blx	r4
	DEBUG_PRINT("***************MALLOC FAILURE DETECTED********************");
     346:	4805      	ldr	r0, [pc, #20]	; (35c <vApplicationMallocFailedHook+0x20>)
     348:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     34a:	4628      	mov	r0, r5
     34c:	47a0      	blx	r4
	requestWatchDogForcedReset();
     34e:	4b04      	ldr	r3, [pc, #16]	; (360 <vApplicationMallocFailedHook+0x24>)
     350:	4798      	blx	r3
     352:	bd38      	pop	{r3, r4, r5, pc}
     354:	00007690 	.word	0x00007690
     358:	0000336d 	.word	0x0000336d
     35c:	0000771c 	.word	0x0000771c
     360:	000035a5 	.word	0x000035a5

00000364 <intializeSensorSelectLines>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void intializeSensorSelectLines(void)
{
     364:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     366:	4b59      	ldr	r3, [pc, #356]	; (4cc <intializeSensorSelectLines+0x168>)
     368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     36c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     370:	4a57      	ldr	r2, [pc, #348]	; (4d0 <intializeSensorSelectLines+0x16c>)
     372:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     376:	4a57      	ldr	r2, [pc, #348]	; (4d4 <intializeSensorSelectLines+0x170>)
     378:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     37c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     380:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
     384:	f040 0004 	orr.w	r0, r0, #4
     388:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     38c:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     390:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     394:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     398:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     39c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     3a0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a4:	484c      	ldr	r0, [pc, #304]	; (4d8 <intializeSensorSelectLines+0x174>)
     3a6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     3aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3b2:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
     3b6:	f040 0004 	orr.w	r0, r0, #4
     3ba:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3be:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c2:	f893 10cc 	ldrb.w	r1, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     3c6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ca:	f883 10cc 	strb.w	r1, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
     3d2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d6:	4e41      	ldr	r6, [pc, #260]	; (4dc <intializeSensorSelectLines+0x178>)
     3d8:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     3dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3e0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3e4:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     3e8:	f041 0104 	orr.w	r1, r1, #4
     3ec:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3f0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f4:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fc:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     400:	f44f 6180 	mov.w	r1, #1024	; 0x400
     404:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     408:	4d35      	ldr	r5, [pc, #212]	; (4e0 <intializeSensorSelectLines+0x17c>)
     40a:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     40e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     412:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     416:	f893 40ca 	ldrb.w	r4, [r3, #202]	; 0xca
     41a:	f044 0404 	orr.w	r4, r4, #4
     41e:	f883 40ca 	strb.w	r4, [r3, #202]	; 0xca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     422:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     426:	f893 40ca 	ldrb.w	r4, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     42a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     42e:	f883 40ca 	strb.w	r4, [r3, #202]	; 0xca
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     432:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     434:	629e      	str	r6, [r3, #40]	; 0x28
     436:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     438:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     43a:	f893 404b 	ldrb.w	r4, [r3, #75]	; 0x4b
     43e:	f044 0404 	orr.w	r4, r4, #4
     442:	f883 404b 	strb.w	r4, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     446:	6198      	str	r0, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     448:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     44c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     450:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     454:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     456:	629d      	str	r5, [r3, #40]	; 0x28
     458:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     45c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
     460:	f040 0004 	orr.w	r0, r0, #4
     464:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     468:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     46e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     472:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     476:	f44f 7100 	mov.w	r1, #512	; 0x200
     47a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47c:	4819      	ldr	r0, [pc, #100]	; (4e4 <intializeSensorSelectLines+0x180>)
     47e:	6298      	str	r0, [r3, #40]	; 0x28
     480:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     482:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     484:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
     488:	f040 0004 	orr.w	r0, r0, #4
     48c:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     490:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     492:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     496:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49a:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     49e:	f44f 7180 	mov.w	r1, #256	; 0x100
     4a2:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a4:	4810      	ldr	r0, [pc, #64]	; (4e8 <intializeSensorSelectLines+0x184>)
     4a6:	6298      	str	r0, [r3, #40]	; 0x28
     4a8:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4aa:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4ac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     4b0:	f042 0204 	orr.w	r2, r2, #4
     4b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4b8:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ba:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     4be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	gpio_set_pin_function(SELECT_6, GPIO_PIN_FUNCTION_OFF);		
	
	gpio_set_pin_direction(SELECT_7, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(SELECT_7,GPIO_PULL_UP);
	gpio_set_pin_function(SELECT_7, GPIO_PIN_FUNCTION_OFF);	
}
     4c6:	bc70      	pop	{r4, r5, r6}
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop
     4cc:	41008000 	.word	0x41008000
     4d0:	40022000 	.word	0x40022000
     4d4:	c0020000 	.word	0xc0020000
     4d8:	40021000 	.word	0x40021000
     4dc:	40020800 	.word	0x40020800
     4e0:	40020400 	.word	0x40020400
     4e4:	40020200 	.word	0x40020200
     4e8:	40020100 	.word	0x40020100

000004ec <sensorAdcInitialize>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================================*/
void sensorAdcInitialize(void)
{
     4ec:	b508      	push	{r3, lr}
	ADC_0_init();
     4ee:	4b01      	ldr	r3, [pc, #4]	; (4f4 <sensorAdcInitialize+0x8>)
     4f0:	4798      	blx	r3
     4f2:	bd08      	pop	{r3, pc}
     4f4:	00003861 	.word	0x00003861

000004f8 <sensorAdcReadChannel>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================================*/
int32_t sensorAdcReadChannel(const uint8_t channel, uint16_t* result,const uint16_t length)
{
     4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4fc:	b083      	sub	sp, #12
     4fe:	4604      	mov	r4, r0
     500:	460f      	mov	r7, r1
     502:	4690      	mov	r8, r2
	int32_t bytesRead = 0;
	uint32_t voltageInMv = 0;
	uint8_t buffer[2] = {0};
     504:	2300      	movs	r3, #0
     506:	ae02      	add	r6, sp, #8
     508:	f826 3d04 	strh.w	r3, [r6, #-4]!
	*result = 0;
     50c:	800b      	strh	r3, [r1, #0]
	double_t voltageCalculated = 0;
		
	const TickType_t xAdcConvDelayMs = pdMS_TO_TICKS(10UL);

    adc_sync_enable_channel(&ADC_0, channel);
     50e:	4d11      	ldr	r5, [pc, #68]	; (554 <sensorAdcReadChannel+0x5c>)
     510:	4601      	mov	r1, r0
     512:	4628      	mov	r0, r5
     514:	4b10      	ldr	r3, [pc, #64]	; (558 <sensorAdcReadChannel+0x60>)
     516:	4798      	blx	r3
	adc_sync_set_inputs(&ADC_0, channel, 0x19, channel);
     518:	4623      	mov	r3, r4
     51a:	2219      	movs	r2, #25
     51c:	4621      	mov	r1, r4
     51e:	4628      	mov	r0, r5
     520:	f8df 9040 	ldr.w	r9, [pc, #64]	; 564 <sensorAdcReadChannel+0x6c>
     524:	47c8      	blx	r9
	bytesRead = adc_sync_read_channel(&ADC_0, channel, &buffer[0], length);
     526:	4643      	mov	r3, r8
     528:	4632      	mov	r2, r6
     52a:	4621      	mov	r1, r4
     52c:	4628      	mov	r0, r5
     52e:	4e0b      	ldr	r6, [pc, #44]	; (55c <sensorAdcReadChannel+0x64>)
     530:	47b0      	blx	r6
     532:	4606      	mov	r6, r0
	adc_sync_disable_channel(&ADC_0, channel);
     534:	4621      	mov	r1, r4
     536:	4628      	mov	r0, r5
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <sensorAdcReadChannel+0x68>)
     53a:	4798      	blx	r3

	*result = ((buffer[1] << 8) | (buffer[0] & 0x00FF));
     53c:	f89d 2005 	ldrb.w	r2, [sp, #5]
     540:	f89d 3004 	ldrb.w	r3, [sp, #4]
     544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     548:	803b      	strh	r3, [r7, #0]
	
	voltageCalculated = (*result) * (VOLT_SCALE_ADC0);

	return bytesRead;
}
     54a:	4630      	mov	r0, r6
     54c:	b003      	add	sp, #12
     54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     552:	bf00      	nop
     554:	20003e58 	.word	0x20003e58
     558:	00003a59 	.word	0x00003a59
     55c:	00003ab1 	.word	0x00003ab1
     560:	00003a85 	.word	0x00003a85
     564:	00003b51 	.word	0x00003b51

00000568 <ADC0_0_Handler>:
/*
 * Not using ADC interrupts now.
 * These are dummy handlers for ADC interrupts.
 */
void ADC0_0_Handler(void)
{
     568:	b508      	push	{r3, lr}
	DEBUG_PRINT("IN ADC0_0 handler");
     56a:	4802      	ldr	r0, [pc, #8]	; (574 <ADC0_0_Handler+0xc>)
     56c:	4b02      	ldr	r3, [pc, #8]	; (578 <ADC0_0_Handler+0x10>)
     56e:	4798      	blx	r3
     570:	bd08      	pop	{r3, pc}
     572:	bf00      	nop
     574:	00007758 	.word	0x00007758
     578:	0000336d 	.word	0x0000336d

0000057c <ADC0_1_Handler>:
}

void ADC0_1_Handler(void)
{
     57c:	b508      	push	{r3, lr}
	DEBUG_PRINT("IN ADC0_1 handler");
     57e:	4802      	ldr	r0, [pc, #8]	; (588 <ADC0_1_Handler+0xc>)
     580:	4b02      	ldr	r3, [pc, #8]	; (58c <ADC0_1_Handler+0x10>)
     582:	4798      	blx	r3
     584:	bd08      	pop	{r3, pc}
     586:	bf00      	nop
     588:	0000776c 	.word	0x0000776c
     58c:	0000336d 	.word	0x0000336d

00000590 <FotaFwDownloadCheckTImerCallBack>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
static void FotaFwDownloadCheckTImerCallBack(void* param)
{
     590:	b508      	push	{r3, lr}
	DEBUG_PRINT("FOTA : CHECKING FOR MODEM FIRMWARE UPDATE FROM AIR VANTAGE SERVER.");
     592:	4803      	ldr	r0, [pc, #12]	; (5a0 <FotaFwDownloadCheckTImerCallBack+0x10>)
     594:	4b03      	ldr	r3, [pc, #12]	; (5a4 <FotaFwDownloadCheckTImerCallBack+0x14>)
     596:	4798      	blx	r3
	requestWatchDogForcedReset();
     598:	4b03      	ldr	r3, [pc, #12]	; (5a8 <FotaFwDownloadCheckTImerCallBack+0x18>)
     59a:	4798      	blx	r3
     59c:	bd08      	pop	{r3, pc}
     59e:	bf00      	nop
     5a0:	00007780 	.word	0x00007780
     5a4:	0000336d 	.word	0x0000336d
     5a8:	000035a5 	.word	0x000035a5

000005ac <validateCommonCommandResponse>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
static bool validateCommonCommandResponse(uint8_t* response)
{
     5ac:	b508      	push	{r3, lr}
    bool status = false;

    if(0==memcmp(response,"OK",2))
     5ae:	2202      	movs	r2, #2
     5b0:	4903      	ldr	r1, [pc, #12]	; (5c0 <validateCommonCommandResponse+0x14>)
     5b2:	4b04      	ldr	r3, [pc, #16]	; (5c4 <validateCommonCommandResponse+0x18>)
     5b4:	4798      	blx	r3
    {
        status = false;
    }

    return status;
}
     5b6:	fab0 f080 	clz	r0, r0
     5ba:	0940      	lsrs	r0, r0, #5
     5bc:	bd08      	pop	{r3, pc}
     5be:	bf00      	nop
     5c0:	000077c4 	.word	0x000077c4
     5c4:	00006bcb 	.word	0x00006bcb

000005c8 <FotaAppTask>:
{
     5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5cc:	b084      	sub	sp, #16
    xAutoReloadFwDlCheckTimer   = xTimerCreate("FirmwareDownloadCheckTimer",FOTA_FWDL_CHECK_TIMER_LOAD_VALUE,pdTRUE,0,FotaFwDownloadCheckTImerCallBack);
     5ce:	4b9b      	ldr	r3, [pc, #620]	; (83c <FotaAppTask+0x274>)
     5d0:	9300      	str	r3, [sp, #0]
     5d2:	2300      	movs	r3, #0
     5d4:	2201      	movs	r2, #1
     5d6:	499a      	ldr	r1, [pc, #616]	; (840 <FotaAppTask+0x278>)
     5d8:	489a      	ldr	r0, [pc, #616]	; (844 <FotaAppTask+0x27c>)
     5da:	4c9b      	ldr	r4, [pc, #620]	; (848 <FotaAppTask+0x280>)
     5dc:	47a0      	blx	r4
    if(xAutoReloadFwDlCheckTimer != NULL)
     5de:	b1b8      	cbz	r0, 610 <FotaAppTask+0x48>
     5e0:	4604      	mov	r4, r0
        if(pdPASS == xTimerStart(xAutoReloadFwDlCheckTimer,0))
     5e2:	4b9a      	ldr	r3, [pc, #616]	; (84c <FotaAppTask+0x284>)
     5e4:	4798      	blx	r3
     5e6:	2300      	movs	r3, #0
     5e8:	9300      	str	r3, [sp, #0]
     5ea:	4602      	mov	r2, r0
     5ec:	2101      	movs	r1, #1
     5ee:	4620      	mov	r0, r4
     5f0:	4c97      	ldr	r4, [pc, #604]	; (850 <FotaAppTask+0x288>)
     5f2:	47a0      	blx	r4
    if(false == initializeFotaFirmwareDownloadCheckTimer())
     5f4:	2801      	cmp	r0, #1
     5f6:	d10b      	bne.n	610 <FotaAppTask+0x48>
        FotaMainState = INITIALIZE_TO_DEFAULT_FOTA_SETTINGS;
     5f8:	4b96      	ldr	r3, [pc, #600]	; (854 <FotaAppTask+0x28c>)
     5fa:	2200      	movs	r2, #0
     5fc:	701a      	strb	r2, [r3, #0]
        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     5fe:	705a      	strb	r2, [r3, #1]
        FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     600:	709a      	strb	r2, [r3, #2]
        bFotaVerificationIsDone = false;
     602:	70da      	strb	r2, [r3, #3]
        bNewFirmwareInstalled = false;
     604:	711a      	strb	r2, [r3, #4]
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
     606:	4c94      	ldr	r4, [pc, #592]	; (858 <FotaAppTask+0x290>)
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
bool isFotaVerificationDone(void)
{
    return bFotaVerificationIsDone;
     608:	4d92      	ldr	r5, [pc, #584]	; (854 <FotaAppTask+0x28c>)
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     60a:	f105 0708 	add.w	r7, r5, #8
     60e:	e014      	b.n	63a <FotaAppTask+0x72>
        DEBUG_PRINT("Error: FOTA timer not started. Rebooting the system...");
     610:	4892      	ldr	r0, [pc, #584]	; (85c <FotaAppTask+0x294>)
     612:	4b93      	ldr	r3, [pc, #588]	; (860 <FotaAppTask+0x298>)
     614:	4798      	blx	r3
        requestWatchDogForcedReset();
     616:	4b93      	ldr	r3, [pc, #588]	; (864 <FotaAppTask+0x29c>)
     618:	4798      	blx	r3
     61a:	e7f4      	b.n	606 <FotaAppTask+0x3e>
            FotaMainState = SET_APN_TO_C0NNECT_WITH_AIRVANTAGE;
     61c:	2301      	movs	r3, #1
     61e:	702b      	strb	r3, [r5, #0]
            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     620:	2300      	movs	r3, #0
     622:	706b      	strb	r3, [r5, #1]
            FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     624:	70ab      	strb	r3, [r5, #2]
            bFotaVerificationIsDone = false;
     626:	70eb      	strb	r3, [r5, #3]
            bNewFirmwareInstalled = false;
     628:	712b      	strb	r3, [r5, #4]
            mdmCtrlr_FlushRxBuffer();
     62a:	4b8f      	ldr	r3, [pc, #572]	; (868 <FotaAppTask+0x2a0>)
     62c:	4798      	blx	r3
            kickWatchDog();
     62e:	4b8f      	ldr	r3, [pc, #572]	; (86c <FotaAppTask+0x2a4>)
     630:	4798      	blx	r3
            vTaskDelay(xDelayMs);
     632:	f44f 7016 	mov.w	r0, #600	; 0x258
     636:	4b8e      	ldr	r3, [pc, #568]	; (870 <FotaAppTask+0x2a8>)
     638:	4798      	blx	r3
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
     63a:	47a0      	blx	r4
     63c:	2804      	cmp	r0, #4
     63e:	d1fc      	bne.n	63a <FotaAppTask+0x72>
     640:	78eb      	ldrb	r3, [r5, #3]
     642:	2b00      	cmp	r3, #0
     644:	d1f9      	bne.n	63a <FotaAppTask+0x72>
    switch(FotaMainState)
     646:	782b      	ldrb	r3, [r5, #0]
     648:	2b07      	cmp	r3, #7
     64a:	d8f0      	bhi.n	62e <FotaAppTask+0x66>
     64c:	a201      	add	r2, pc, #4	; (adr r2, 654 <FotaAppTask+0x8c>)
     64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     652:	bf00      	nop
     654:	0000061d 	.word	0x0000061d
     658:	00000675 	.word	0x00000675
     65c:	00000761 	.word	0x00000761
     660:	000008d3 	.word	0x000008d3
     664:	00000acb 	.word	0x00000acb
     668:	00000c11 	.word	0x00000c11
     66c:	00000e69 	.word	0x00000e69
     670:	00000f5d 	.word	0x00000f5d
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     674:	786b      	ldrb	r3, [r5, #1]
     676:	b31b      	cbz	r3, 6c0 <FotaAppTask+0xf8>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     678:	2b01      	cmp	r3, #1
     67a:	d1d8      	bne.n	62e <FotaAppTask+0x66>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     67c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     680:	4639      	mov	r1, r7
     682:	4b7c      	ldr	r3, [pc, #496]	; (874 <FotaAppTask+0x2ac>)
     684:	6818      	ldr	r0, [r3, #0]
     686:	4b7c      	ldr	r3, [pc, #496]	; (878 <FotaAppTask+0x2b0>)
     688:	4798      	blx	r3
     68a:	2801      	cmp	r0, #1
     68c:	d1cf      	bne.n	62e <FotaAppTask+0x66>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSS_SET_APN)
     68e:	7a2b      	ldrb	r3, [r5, #8]
     690:	2b1d      	cmp	r3, #29
     692:	d15c      	bne.n	74e <FotaAppTask+0x186>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     694:	68e8      	ldr	r0, [r5, #12]
     696:	4b79      	ldr	r3, [pc, #484]	; (87c <FotaAppTask+0x2b4>)
     698:	4798      	blx	r3
     69a:	2800      	cmp	r0, #0
     69c:	d04f      	beq.n	73e <FotaAppTask+0x176>
                            DEBUG_PRINT("FOTA : Set the APN for connecting to Air Vantage");
     69e:	4878      	ldr	r0, [pc, #480]	; (880 <FotaAppTask+0x2b8>)
     6a0:	4e6f      	ldr	r6, [pc, #444]	; (860 <FotaAppTask+0x298>)
     6a2:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     6a4:	8969      	ldrh	r1, [r5, #10]
     6a6:	68e8      	ldr	r0, [r5, #12]
     6a8:	4b76      	ldr	r3, [pc, #472]	; (884 <FotaAppTask+0x2bc>)
     6aa:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     6ac:	4876      	ldr	r0, [pc, #472]	; (888 <FotaAppTask+0x2c0>)
     6ae:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     6b0:	2300      	movs	r3, #0
     6b2:	706b      	strb	r3, [r5, #1]
                            FotaMainState = ACTIVATE_DEVICE_SERVICE_INDICATIONS;
     6b4:	2302      	movs	r3, #2
     6b6:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     6b8:	68e8      	ldr	r0, [r5, #12]
     6ba:	4b74      	ldr	r3, [pc, #464]	; (88c <FotaAppTask+0x2c4>)
     6bc:	4798      	blx	r3
     6be:	e7b6      	b.n	62e <FotaAppTask+0x66>
                vTaskDelay(startupDelayMs);
     6c0:	f241 7070 	movw	r0, #6000	; 0x1770
     6c4:	4b6a      	ldr	r3, [pc, #424]	; (870 <FotaAppTask+0x2a8>)
     6c6:	4798      	blx	r3
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     6c8:	4b71      	ldr	r3, [pc, #452]	; (890 <FotaAppTask+0x2c8>)
     6ca:	6818      	ldr	r0, [r3, #0]
     6cc:	4b71      	ldr	r3, [pc, #452]	; (894 <FotaAppTask+0x2cc>)
     6ce:	4798      	blx	r3
     6d0:	2800      	cmp	r0, #0
     6d2:	d130      	bne.n	736 <FotaAppTask+0x16e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     6d4:	2100      	movs	r1, #0
     6d6:	4b70      	ldr	r3, [pc, #448]	; (898 <FotaAppTask+0x2d0>)
     6d8:	6818      	ldr	r0, [r3, #0]
     6da:	4b70      	ldr	r3, [pc, #448]	; (89c <FotaAppTask+0x2d4>)
     6dc:	4798      	blx	r3
     6de:	2801      	cmp	r0, #1
     6e0:	d003      	beq.n	6ea <FotaAppTask+0x122>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     6e2:	486f      	ldr	r0, [pc, #444]	; (8a0 <FotaAppTask+0x2d8>)
     6e4:	4b5e      	ldr	r3, [pc, #376]	; (860 <FotaAppTask+0x298>)
     6e6:	4798      	blx	r3
     6e8:	e7a1      	b.n	62e <FotaAppTask+0x66>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     6ea:	2305      	movs	r3, #5
     6ec:	f88d 3008 	strb.w	r3, [sp, #8]
                        TxMsgQueueData.atCmd = CMD_AT_WDSS_SET_APN;
     6f0:	231d      	movs	r3, #29
     6f2:	f88d 3009 	strb.w	r3, [sp, #9]
                        TxMsgQueueData.pData = NULL;
     6f6:	2300      	movs	r3, #0
     6f8:	9303      	str	r3, [sp, #12]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     6fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     6fe:	a902      	add	r1, sp, #8
     700:	4863      	ldr	r0, [pc, #396]	; (890 <FotaAppTask+0x2c8>)
     702:	6800      	ldr	r0, [r0, #0]
     704:	4e67      	ldr	r6, [pc, #412]	; (8a4 <FotaAppTask+0x2dc>)
     706:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     708:	2801      	cmp	r0, #1
     70a:	d007      	beq.n	71c <FotaAppTask+0x154>
                            DEBUG_PRINT("Failed to sent the set APN request to Tx Task");
     70c:	4866      	ldr	r0, [pc, #408]	; (8a8 <FotaAppTask+0x2e0>)
     70e:	4b54      	ldr	r3, [pc, #336]	; (860 <FotaAppTask+0x298>)
     710:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     716:	4b56      	ldr	r3, [pc, #344]	; (870 <FotaAppTask+0x2a8>)
     718:	4798      	blx	r3
     71a:	e788      	b.n	62e <FotaAppTask+0x66>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     71c:	2300      	movs	r3, #0
     71e:	461a      	mov	r2, r3
     720:	4619      	mov	r1, r3
     722:	485d      	ldr	r0, [pc, #372]	; (898 <FotaAppTask+0x2d0>)
     724:	6800      	ldr	r0, [r0, #0]
     726:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     728:	2301      	movs	r3, #1
     72a:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     72c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     730:	4b4f      	ldr	r3, [pc, #316]	; (870 <FotaAppTask+0x2a8>)
     732:	4798      	blx	r3
     734:	e77b      	b.n	62e <FotaAppTask+0x66>
                    DEBUG_PRINT("Transmit Queue is not empty");
     736:	485d      	ldr	r0, [pc, #372]	; (8ac <FotaAppTask+0x2e4>)
     738:	4b49      	ldr	r3, [pc, #292]	; (860 <FotaAppTask+0x298>)
     73a:	4798      	blx	r3
     73c:	e777      	b.n	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     73e:	485c      	ldr	r0, [pc, #368]	; (8b0 <FotaAppTask+0x2e8>)
     740:	4e47      	ldr	r6, [pc, #284]	; (860 <FotaAppTask+0x298>)
     742:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     744:	4850      	ldr	r0, [pc, #320]	; (888 <FotaAppTask+0x2c0>)
     746:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     748:	2300      	movs	r3, #0
     74a:	706b      	strb	r3, [r5, #1]
     74c:	e7b4      	b.n	6b8 <FotaAppTask+0xf0>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     74e:	4859      	ldr	r0, [pc, #356]	; (8b4 <FotaAppTask+0x2ec>)
     750:	4b43      	ldr	r3, [pc, #268]	; (860 <FotaAppTask+0x298>)
     752:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     754:	2300      	movs	r3, #0
     756:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     758:	68e8      	ldr	r0, [r5, #12]
     75a:	4b4c      	ldr	r3, [pc, #304]	; (88c <FotaAppTask+0x2c4>)
     75c:	4798      	blx	r3
     75e:	e766      	b.n	62e <FotaAppTask+0x66>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     760:	786b      	ldrb	r3, [r5, #1]
     762:	b33b      	cbz	r3, 7b4 <FotaAppTask+0x1ec>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     764:	2b01      	cmp	r3, #1
     766:	f47f af62 	bne.w	62e <FotaAppTask+0x66>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     76a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     76e:	4639      	mov	r1, r7
     770:	4b40      	ldr	r3, [pc, #256]	; (874 <FotaAppTask+0x2ac>)
     772:	6818      	ldr	r0, [r3, #0]
     774:	4b40      	ldr	r3, [pc, #256]	; (878 <FotaAppTask+0x2b0>)
     776:	4798      	blx	r3
     778:	2801      	cmp	r0, #1
     77a:	f47f af58 	bne.w	62e <FotaAppTask+0x66>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSI)
     77e:	7a2b      	ldrb	r3, [r5, #8]
     780:	2b1f      	cmp	r3, #31
     782:	f040 809d 	bne.w	8c0 <FotaAppTask+0x2f8>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     786:	68e8      	ldr	r0, [r5, #12]
     788:	4b3c      	ldr	r3, [pc, #240]	; (87c <FotaAppTask+0x2b4>)
     78a:	4798      	blx	r3
     78c:	2800      	cmp	r0, #0
     78e:	d04c      	beq.n	82a <FotaAppTask+0x262>
                            DEBUG_PRINT("FOTA : Set device service indications.");
     790:	4849      	ldr	r0, [pc, #292]	; (8b8 <FotaAppTask+0x2f0>)
     792:	4e33      	ldr	r6, [pc, #204]	; (860 <FotaAppTask+0x298>)
     794:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     796:	8969      	ldrh	r1, [r5, #10]
     798:	68e8      	ldr	r0, [r5, #12]
     79a:	4b3a      	ldr	r3, [pc, #232]	; (884 <FotaAppTask+0x2bc>)
     79c:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     79e:	483a      	ldr	r0, [pc, #232]	; (888 <FotaAppTask+0x2c0>)
     7a0:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     7a2:	2300      	movs	r3, #0
     7a4:	706b      	strb	r3, [r5, #1]
                            FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     7a6:	2203      	movs	r2, #3
     7a8:	702a      	strb	r2, [r5, #0]
                            FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     7aa:	70ab      	strb	r3, [r5, #2]
                        vPortFree(FotaCommandResponse.response);
     7ac:	68e8      	ldr	r0, [r5, #12]
     7ae:	4b37      	ldr	r3, [pc, #220]	; (88c <FotaAppTask+0x2c4>)
     7b0:	4798      	blx	r3
     7b2:	e73c      	b.n	62e <FotaAppTask+0x66>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     7b4:	4b36      	ldr	r3, [pc, #216]	; (890 <FotaAppTask+0x2c8>)
     7b6:	6818      	ldr	r0, [r3, #0]
     7b8:	4b36      	ldr	r3, [pc, #216]	; (894 <FotaAppTask+0x2cc>)
     7ba:	4798      	blx	r3
     7bc:	2800      	cmp	r0, #0
     7be:	d130      	bne.n	822 <FotaAppTask+0x25a>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     7c0:	2100      	movs	r1, #0
     7c2:	4b35      	ldr	r3, [pc, #212]	; (898 <FotaAppTask+0x2d0>)
     7c4:	6818      	ldr	r0, [r3, #0]
     7c6:	4b35      	ldr	r3, [pc, #212]	; (89c <FotaAppTask+0x2d4>)
     7c8:	4798      	blx	r3
     7ca:	2801      	cmp	r0, #1
     7cc:	d003      	beq.n	7d6 <FotaAppTask+0x20e>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     7ce:	4834      	ldr	r0, [pc, #208]	; (8a0 <FotaAppTask+0x2d8>)
     7d0:	4b23      	ldr	r3, [pc, #140]	; (860 <FotaAppTask+0x298>)
     7d2:	4798      	blx	r3
     7d4:	e72b      	b.n	62e <FotaAppTask+0x66>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     7d6:	2305      	movs	r3, #5
     7d8:	f88d 3008 	strb.w	r3, [sp, #8]
                        TxMsgQueueData.atCmd = CMD_AT_WDSI;
     7dc:	231f      	movs	r3, #31
     7de:	f88d 3009 	strb.w	r3, [sp, #9]
                        TxMsgQueueData.pData = NULL;
     7e2:	2300      	movs	r3, #0
     7e4:	9303      	str	r3, [sp, #12]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     7e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     7ea:	a902      	add	r1, sp, #8
     7ec:	4828      	ldr	r0, [pc, #160]	; (890 <FotaAppTask+0x2c8>)
     7ee:	6800      	ldr	r0, [r0, #0]
     7f0:	4e2c      	ldr	r6, [pc, #176]	; (8a4 <FotaAppTask+0x2dc>)
     7f2:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     7f4:	2801      	cmp	r0, #1
     7f6:	d007      	beq.n	808 <FotaAppTask+0x240>
                            DEBUG_PRINT("Failed to sent the service indication request to Tx Task");
     7f8:	4830      	ldr	r0, [pc, #192]	; (8bc <FotaAppTask+0x2f4>)
     7fa:	4b19      	ldr	r3, [pc, #100]	; (860 <FotaAppTask+0x298>)
     7fc:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     7fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     802:	4b1b      	ldr	r3, [pc, #108]	; (870 <FotaAppTask+0x2a8>)
     804:	4798      	blx	r3
     806:	e712      	b.n	62e <FotaAppTask+0x66>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     808:	2300      	movs	r3, #0
     80a:	461a      	mov	r2, r3
     80c:	4619      	mov	r1, r3
     80e:	4822      	ldr	r0, [pc, #136]	; (898 <FotaAppTask+0x2d0>)
     810:	6800      	ldr	r0, [r0, #0]
     812:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     814:	2301      	movs	r3, #1
     816:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     81c:	4b14      	ldr	r3, [pc, #80]	; (870 <FotaAppTask+0x2a8>)
     81e:	4798      	blx	r3
     820:	e705      	b.n	62e <FotaAppTask+0x66>
                    DEBUG_PRINT("Transmit Queue is not empty");
     822:	4822      	ldr	r0, [pc, #136]	; (8ac <FotaAppTask+0x2e4>)
     824:	4b0e      	ldr	r3, [pc, #56]	; (860 <FotaAppTask+0x298>)
     826:	4798      	blx	r3
     828:	e701      	b.n	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     82a:	4821      	ldr	r0, [pc, #132]	; (8b0 <FotaAppTask+0x2e8>)
     82c:	4e0c      	ldr	r6, [pc, #48]	; (860 <FotaAppTask+0x298>)
     82e:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     830:	4815      	ldr	r0, [pc, #84]	; (888 <FotaAppTask+0x2c0>)
     832:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     834:	2300      	movs	r3, #0
     836:	706b      	strb	r3, [r5, #1]
     838:	e7b8      	b.n	7ac <FotaAppTask+0x1e4>
     83a:	bf00      	nop
     83c:	00000591 	.word	0x00000591
     840:	0007a3ae 	.word	0x0007a3ae
     844:	000077c8 	.word	0x000077c8
     848:	0000681d 	.word	0x0000681d
     84c:	00005e1d 	.word	0x00005e1d
     850:	00006871 	.word	0x00006871
     854:	2000026c 	.word	0x2000026c
     858:	00002d49 	.word	0x00002d49
     85c:	000077e4 	.word	0x000077e4
     860:	0000336d 	.word	0x0000336d
     864:	000035a5 	.word	0x000035a5
     868:	00002a65 	.word	0x00002a65
     86c:	00003565 	.word	0x00003565
     870:	0000605d 	.word	0x0000605d
     874:	20003574 	.word	0x20003574
     878:	000056dd 	.word	0x000056dd
     87c:	000005ad 	.word	0x000005ad
     880:	00007894 	.word	0x00007894
     884:	00003329 	.word	0x00003329
     888:	00009368 	.word	0x00009368
     88c:	000050a5 	.word	0x000050a5
     890:	20003568 	.word	0x20003568
     894:	00005a45 	.word	0x00005a45
     898:	2000357c 	.word	0x2000357c
     89c:	00005865 	.word	0x00005865
     8a0:	0000784c 	.word	0x0000784c
     8a4:	000053cd 	.word	0x000053cd
     8a8:	0000781c 	.word	0x0000781c
     8ac:	00007878 	.word	0x00007878
     8b0:	000078c8 	.word	0x000078c8
     8b4:	000078f0 	.word	0x000078f0
     8b8:	00007964 	.word	0x00007964
     8bc:	00007928 	.word	0x00007928
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     8c0:	4897      	ldr	r0, [pc, #604]	; (b20 <FotaAppTask+0x558>)
     8c2:	4b98      	ldr	r3, [pc, #608]	; (b24 <FotaAppTask+0x55c>)
     8c4:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     8c6:	2300      	movs	r3, #0
     8c8:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     8ca:	68e8      	ldr	r0, [r5, #12]
     8cc:	4b96      	ldr	r3, [pc, #600]	; (b28 <FotaAppTask+0x560>)
     8ce:	4798      	blx	r3
     8d0:	e6ad      	b.n	62e <FotaAppTask+0x66>
            switch(FotaUserAgreementActivationState)
     8d2:	78ab      	ldrb	r3, [r5, #2]
     8d4:	2b00      	cmp	r3, #0
     8d6:	d02f      	beq.n	938 <FotaAppTask+0x370>
     8d8:	2b01      	cmp	r3, #1
     8da:	f47f aea8 	bne.w	62e <FotaAppTask+0x66>
                    if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     8de:	786b      	ldrb	r3, [r5, #1]
     8e0:	2b00      	cmp	r3, #0
     8e2:	f000 80a3 	beq.w	a2c <FotaAppTask+0x464>
                    else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     8e6:	2b01      	cmp	r3, #1
     8e8:	f47f aea1 	bne.w	62e <FotaAppTask+0x66>
                        if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     8ec:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     8f0:	4639      	mov	r1, r7
     8f2:	4b8e      	ldr	r3, [pc, #568]	; (b2c <FotaAppTask+0x564>)
     8f4:	6818      	ldr	r0, [r3, #0]
     8f6:	4b8e      	ldr	r3, [pc, #568]	; (b30 <FotaAppTask+0x568>)
     8f8:	4798      	blx	r3
     8fa:	2801      	cmp	r0, #1
     8fc:	f47f ae97 	bne.w	62e <FotaAppTask+0x66>
                            if(FotaCommandResponse.atCmd == CMD_AT_WDSC_FW_INSTALL)
     900:	7a2b      	ldrb	r3, [r5, #8]
     902:	2b21      	cmp	r3, #33	; 0x21
     904:	f040 80d8 	bne.w	ab8 <FotaAppTask+0x4f0>
                                if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     908:	68e8      	ldr	r0, [r5, #12]
     90a:	4b8a      	ldr	r3, [pc, #552]	; (b34 <FotaAppTask+0x56c>)
     90c:	4798      	blx	r3
     90e:	2800      	cmp	r0, #0
     910:	f000 80ca 	beq.w	aa8 <FotaAppTask+0x4e0>
                                    DEBUG_PRINT("FOTA : Set user agreement activation for FW installation.");
     914:	4888      	ldr	r0, [pc, #544]	; (b38 <FotaAppTask+0x570>)
     916:	4e83      	ldr	r6, [pc, #524]	; (b24 <FotaAppTask+0x55c>)
     918:	47b0      	blx	r6
                                    SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     91a:	8969      	ldrh	r1, [r5, #10]
     91c:	68e8      	ldr	r0, [r5, #12]
     91e:	4b87      	ldr	r3, [pc, #540]	; (b3c <FotaAppTask+0x574>)
     920:	4798      	blx	r3
                                    DEBUG_PRINT("\r\n");
     922:	4887      	ldr	r0, [pc, #540]	; (b40 <FotaAppTask+0x578>)
     924:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     926:	2300      	movs	r3, #0
     928:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = START_DM_SESSION_WITH_AIR_VANTAGE;
     92a:	2204      	movs	r2, #4
     92c:	702a      	strb	r2, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     92e:	70ab      	strb	r3, [r5, #2]
                                vPortFree(FotaCommandResponse.response);
     930:	68e8      	ldr	r0, [r5, #12]
     932:	4b7d      	ldr	r3, [pc, #500]	; (b28 <FotaAppTask+0x560>)
     934:	4798      	blx	r3
     936:	e67a      	b.n	62e <FotaAppTask+0x66>
                    if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     938:	786b      	ldrb	r3, [r5, #1]
     93a:	b33b      	cbz	r3, 98c <FotaAppTask+0x3c4>
                    else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     93c:	2b01      	cmp	r3, #1
     93e:	f47f ae76 	bne.w	62e <FotaAppTask+0x66>
                        if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     942:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     946:	4639      	mov	r1, r7
     948:	4b78      	ldr	r3, [pc, #480]	; (b2c <FotaAppTask+0x564>)
     94a:	6818      	ldr	r0, [r3, #0]
     94c:	4b78      	ldr	r3, [pc, #480]	; (b30 <FotaAppTask+0x568>)
     94e:	4798      	blx	r3
     950:	2801      	cmp	r0, #1
     952:	f47f ae6c 	bne.w	62e <FotaAppTask+0x66>
                            if(FotaCommandResponse.atCmd == CMD_AT_WDSC_FW_DOWNLOAD)
     956:	7a2b      	ldrb	r3, [r5, #8]
     958:	2b20      	cmp	r3, #32
     95a:	d15e      	bne.n	a1a <FotaAppTask+0x452>
                                if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     95c:	68e8      	ldr	r0, [r5, #12]
     95e:	4b75      	ldr	r3, [pc, #468]	; (b34 <FotaAppTask+0x56c>)
     960:	4798      	blx	r3
     962:	2800      	cmp	r0, #0
     964:	d051      	beq.n	a0a <FotaAppTask+0x442>
                                    DEBUG_PRINT("FOTA : Set user agreement activation for FW download.");
     966:	4877      	ldr	r0, [pc, #476]	; (b44 <FotaAppTask+0x57c>)
     968:	4e6e      	ldr	r6, [pc, #440]	; (b24 <FotaAppTask+0x55c>)
     96a:	47b0      	blx	r6
                                    SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     96c:	8969      	ldrh	r1, [r5, #10]
     96e:	68e8      	ldr	r0, [r5, #12]
     970:	4b72      	ldr	r3, [pc, #456]	; (b3c <FotaAppTask+0x574>)
     972:	4798      	blx	r3
                                    DEBUG_PRINT("\r\n");
     974:	4872      	ldr	r0, [pc, #456]	; (b40 <FotaAppTask+0x578>)
     976:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     978:	2300      	movs	r3, #0
     97a:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     97c:	2303      	movs	r3, #3
     97e:	702b      	strb	r3, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_INSTALLATION;
     980:	2301      	movs	r3, #1
     982:	70ab      	strb	r3, [r5, #2]
                                vPortFree(FotaCommandResponse.response);
     984:	68e8      	ldr	r0, [r5, #12]
     986:	4b68      	ldr	r3, [pc, #416]	; (b28 <FotaAppTask+0x560>)
     988:	4798      	blx	r3
     98a:	e650      	b.n	62e <FotaAppTask+0x66>
                        if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     98c:	4b6e      	ldr	r3, [pc, #440]	; (b48 <FotaAppTask+0x580>)
     98e:	6818      	ldr	r0, [r3, #0]
     990:	4b6e      	ldr	r3, [pc, #440]	; (b4c <FotaAppTask+0x584>)
     992:	4798      	blx	r3
     994:	2800      	cmp	r0, #0
     996:	d134      	bne.n	a02 <FotaAppTask+0x43a>
                            if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     998:	2100      	movs	r1, #0
     99a:	4b6d      	ldr	r3, [pc, #436]	; (b50 <FotaAppTask+0x588>)
     99c:	6818      	ldr	r0, [r3, #0]
     99e:	4b6d      	ldr	r3, [pc, #436]	; (b54 <FotaAppTask+0x58c>)
     9a0:	4798      	blx	r3
     9a2:	2801      	cmp	r0, #1
     9a4:	d003      	beq.n	9ae <FotaAppTask+0x3e6>
                                DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     9a6:	486c      	ldr	r0, [pc, #432]	; (b58 <FotaAppTask+0x590>)
     9a8:	4b5e      	ldr	r3, [pc, #376]	; (b24 <FotaAppTask+0x55c>)
     9aa:	4798      	blx	r3
     9ac:	e63f      	b.n	62e <FotaAppTask+0x66>
                                TxMsgQueueData.taskID = FOTA_APP_TASK;
     9ae:	2305      	movs	r3, #5
     9b0:	f88d 3008 	strb.w	r3, [sp, #8]
                                TxMsgQueueData.atCmd = CMD_AT_WDSC_FW_DOWNLOAD;
     9b4:	2320      	movs	r3, #32
     9b6:	f88d 3009 	strb.w	r3, [sp, #9]
                                TxMsgQueueData.pData = NULL;
     9ba:	2300      	movs	r3, #0
     9bc:	9303      	str	r3, [sp, #12]
                                TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     9be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     9c2:	a902      	add	r1, sp, #8
     9c4:	4860      	ldr	r0, [pc, #384]	; (b48 <FotaAppTask+0x580>)
     9c6:	6800      	ldr	r0, [r0, #0]
     9c8:	4e64      	ldr	r6, [pc, #400]	; (b5c <FotaAppTask+0x594>)
     9ca:	47b0      	blx	r6
                                if(TxQueuePushStatus == pdPASS)
     9cc:	2801      	cmp	r0, #1
     9ce:	d007      	beq.n	9e0 <FotaAppTask+0x418>
                                    DEBUG_PRINT("Failed to sent the user agreement activation request for FW download to Tx Task");
     9d0:	4863      	ldr	r0, [pc, #396]	; (b60 <FotaAppTask+0x598>)
     9d2:	4b54      	ldr	r3, [pc, #336]	; (b24 <FotaAppTask+0x55c>)
     9d4:	4798      	blx	r3
                                    vTaskDelay(TransmitDelayMs);
     9d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     9da:	4b62      	ldr	r3, [pc, #392]	; (b64 <FotaAppTask+0x59c>)
     9dc:	4798      	blx	r3
     9de:	e626      	b.n	62e <FotaAppTask+0x66>
                                    xSemaphoreGive(AtTxQueueLoadSemaphore);
     9e0:	2300      	movs	r3, #0
     9e2:	461a      	mov	r2, r3
     9e4:	4619      	mov	r1, r3
     9e6:	485a      	ldr	r0, [pc, #360]	; (b50 <FotaAppTask+0x588>)
     9e8:	6800      	ldr	r0, [r0, #0]
     9ea:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     9ec:	2301      	movs	r3, #1
     9ee:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     9f0:	2303      	movs	r3, #3
     9f2:	702b      	strb	r3, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     9f4:	2300      	movs	r3, #0
     9f6:	70ab      	strb	r3, [r5, #2]
                                    vTaskDelay(TransmitDelayMs);
     9f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     9fc:	4b59      	ldr	r3, [pc, #356]	; (b64 <FotaAppTask+0x59c>)
     9fe:	4798      	blx	r3
     a00:	e615      	b.n	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Transmit Queue is not empty");
     a02:	4859      	ldr	r0, [pc, #356]	; (b68 <FotaAppTask+0x5a0>)
     a04:	4b47      	ldr	r3, [pc, #284]	; (b24 <FotaAppTask+0x55c>)
     a06:	4798      	blx	r3
     a08:	e611      	b.n	62e <FotaAppTask+0x66>
                                    DEBUG_PRINT("Error:Expected Response Not Received...");
     a0a:	4858      	ldr	r0, [pc, #352]	; (b6c <FotaAppTask+0x5a4>)
     a0c:	4e45      	ldr	r6, [pc, #276]	; (b24 <FotaAppTask+0x55c>)
     a0e:	47b0      	blx	r6
                                    DEBUG_PRINT("\r\n");
     a10:	484b      	ldr	r0, [pc, #300]	; (b40 <FotaAppTask+0x578>)
     a12:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     a14:	2300      	movs	r3, #0
     a16:	706b      	strb	r3, [r5, #1]
     a18:	e7b4      	b.n	984 <FotaAppTask+0x3bc>
                                DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     a1a:	4841      	ldr	r0, [pc, #260]	; (b20 <FotaAppTask+0x558>)
     a1c:	4b41      	ldr	r3, [pc, #260]	; (b24 <FotaAppTask+0x55c>)
     a1e:	4798      	blx	r3
                                FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     a20:	2300      	movs	r3, #0
     a22:	706b      	strb	r3, [r5, #1]
                                vPortFree(FotaCommandResponse.response);
     a24:	68e8      	ldr	r0, [r5, #12]
     a26:	4b40      	ldr	r3, [pc, #256]	; (b28 <FotaAppTask+0x560>)
     a28:	4798      	blx	r3
     a2a:	e600      	b.n	62e <FotaAppTask+0x66>
                        if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     a2c:	4b46      	ldr	r3, [pc, #280]	; (b48 <FotaAppTask+0x580>)
     a2e:	6818      	ldr	r0, [r3, #0]
     a30:	4b46      	ldr	r3, [pc, #280]	; (b4c <FotaAppTask+0x584>)
     a32:	4798      	blx	r3
     a34:	2800      	cmp	r0, #0
     a36:	d133      	bne.n	aa0 <FotaAppTask+0x4d8>
                            if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     a38:	2100      	movs	r1, #0
     a3a:	4b45      	ldr	r3, [pc, #276]	; (b50 <FotaAppTask+0x588>)
     a3c:	6818      	ldr	r0, [r3, #0]
     a3e:	4b45      	ldr	r3, [pc, #276]	; (b54 <FotaAppTask+0x58c>)
     a40:	4798      	blx	r3
     a42:	2801      	cmp	r0, #1
     a44:	d003      	beq.n	a4e <FotaAppTask+0x486>
                                DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     a46:	4844      	ldr	r0, [pc, #272]	; (b58 <FotaAppTask+0x590>)
     a48:	4b36      	ldr	r3, [pc, #216]	; (b24 <FotaAppTask+0x55c>)
     a4a:	4798      	blx	r3
     a4c:	e5ef      	b.n	62e <FotaAppTask+0x66>
                                TxMsgQueueData.taskID = FOTA_APP_TASK;
     a4e:	2305      	movs	r3, #5
     a50:	f88d 3008 	strb.w	r3, [sp, #8]
                                TxMsgQueueData.atCmd = CMD_AT_WDSC_FW_INSTALL;
     a54:	2321      	movs	r3, #33	; 0x21
     a56:	f88d 3009 	strb.w	r3, [sp, #9]
                                TxMsgQueueData.pData = NULL;
     a5a:	2300      	movs	r3, #0
     a5c:	9303      	str	r3, [sp, #12]
                                TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     a5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a62:	a902      	add	r1, sp, #8
     a64:	4838      	ldr	r0, [pc, #224]	; (b48 <FotaAppTask+0x580>)
     a66:	6800      	ldr	r0, [r0, #0]
     a68:	4e3c      	ldr	r6, [pc, #240]	; (b5c <FotaAppTask+0x594>)
     a6a:	47b0      	blx	r6
                                if(TxQueuePushStatus == pdPASS)
     a6c:	2801      	cmp	r0, #1
     a6e:	d007      	beq.n	a80 <FotaAppTask+0x4b8>
                                    DEBUG_PRINT("Failed to sent the user agreement activation request for FW installation to Tx Task");
     a70:	483f      	ldr	r0, [pc, #252]	; (b70 <FotaAppTask+0x5a8>)
     a72:	4b2c      	ldr	r3, [pc, #176]	; (b24 <FotaAppTask+0x55c>)
     a74:	4798      	blx	r3
                                    vTaskDelay(TransmitDelayMs);
     a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a7a:	4b3a      	ldr	r3, [pc, #232]	; (b64 <FotaAppTask+0x59c>)
     a7c:	4798      	blx	r3
     a7e:	e5d6      	b.n	62e <FotaAppTask+0x66>
                                    xSemaphoreGive(AtTxQueueLoadSemaphore);
     a80:	2300      	movs	r3, #0
     a82:	461a      	mov	r2, r3
     a84:	4619      	mov	r1, r3
     a86:	4832      	ldr	r0, [pc, #200]	; (b50 <FotaAppTask+0x588>)
     a88:	6800      	ldr	r0, [r0, #0]
     a8a:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     a8c:	2301      	movs	r3, #1
     a8e:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     a90:	2203      	movs	r2, #3
     a92:	702a      	strb	r2, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_INSTALLATION;
     a94:	70ab      	strb	r3, [r5, #2]
                                    vTaskDelay(TransmitDelayMs);
     a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a9a:	4b32      	ldr	r3, [pc, #200]	; (b64 <FotaAppTask+0x59c>)
     a9c:	4798      	blx	r3
     a9e:	e5c6      	b.n	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Transmit Queue is not empty");
     aa0:	4831      	ldr	r0, [pc, #196]	; (b68 <FotaAppTask+0x5a0>)
     aa2:	4b20      	ldr	r3, [pc, #128]	; (b24 <FotaAppTask+0x55c>)
     aa4:	4798      	blx	r3
     aa6:	e5c2      	b.n	62e <FotaAppTask+0x66>
                                    DEBUG_PRINT("Error:Expected Response Not Received...");
     aa8:	4830      	ldr	r0, [pc, #192]	; (b6c <FotaAppTask+0x5a4>)
     aaa:	4e1e      	ldr	r6, [pc, #120]	; (b24 <FotaAppTask+0x55c>)
     aac:	47b0      	blx	r6
                                    DEBUG_PRINT("\r\n");
     aae:	4824      	ldr	r0, [pc, #144]	; (b40 <FotaAppTask+0x578>)
     ab0:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     ab2:	2300      	movs	r3, #0
     ab4:	706b      	strb	r3, [r5, #1]
     ab6:	e73b      	b.n	930 <FotaAppTask+0x368>
                                DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     ab8:	4819      	ldr	r0, [pc, #100]	; (b20 <FotaAppTask+0x558>)
     aba:	4b1a      	ldr	r3, [pc, #104]	; (b24 <FotaAppTask+0x55c>)
     abc:	4798      	blx	r3
                                FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     abe:	2300      	movs	r3, #0
     ac0:	706b      	strb	r3, [r5, #1]
                                vPortFree(FotaCommandResponse.response);
     ac2:	68e8      	ldr	r0, [r5, #12]
     ac4:	4b18      	ldr	r3, [pc, #96]	; (b28 <FotaAppTask+0x560>)
     ac6:	4798      	blx	r3
     ac8:	e5b1      	b.n	62e <FotaAppTask+0x66>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     aca:	786b      	ldrb	r3, [r5, #1]
     acc:	2b00      	cmp	r3, #0
     ace:	d053      	beq.n	b78 <FotaAppTask+0x5b0>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     ad0:	2b01      	cmp	r3, #1
     ad2:	f47f adac 	bne.w	62e <FotaAppTask+0x66>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     ad6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     ada:	4639      	mov	r1, r7
     adc:	4b13      	ldr	r3, [pc, #76]	; (b2c <FotaAppTask+0x564>)
     ade:	6818      	ldr	r0, [r3, #0]
     ae0:	4b13      	ldr	r3, [pc, #76]	; (b30 <FotaAppTask+0x568>)
     ae2:	4798      	blx	r3
     ae4:	2801      	cmp	r0, #1
     ae6:	f47f ada2 	bne.w	62e <FotaAppTask+0x66>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSS_START_DM_SESSION)
     aea:	7a2b      	ldrb	r3, [r5, #8]
     aec:	2b1e      	cmp	r3, #30
     aee:	f040 8086 	bne.w	bfe <FotaAppTask+0x636>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     af2:	68e8      	ldr	r0, [r5, #12]
     af4:	4b0f      	ldr	r3, [pc, #60]	; (b34 <FotaAppTask+0x56c>)
     af6:	4798      	blx	r3
     af8:	2800      	cmp	r0, #0
     afa:	d078      	beq.n	bee <FotaAppTask+0x626>
                            DEBUG_PRINT("FOTA : Initiating the DM session with Air Vantage.");
     afc:	481d      	ldr	r0, [pc, #116]	; (b74 <FotaAppTask+0x5ac>)
     afe:	4e09      	ldr	r6, [pc, #36]	; (b24 <FotaAppTask+0x55c>)
     b00:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     b02:	8969      	ldrh	r1, [r5, #10]
     b04:	68e8      	ldr	r0, [r5, #12]
     b06:	4b0d      	ldr	r3, [pc, #52]	; (b3c <FotaAppTask+0x574>)
     b08:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     b0a:	480d      	ldr	r0, [pc, #52]	; (b40 <FotaAppTask+0x578>)
     b0c:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     b0e:	2300      	movs	r3, #0
     b10:	706b      	strb	r3, [r5, #1]
                            FotaMainState = SYSTEM_IS_IN_FIRMWARE_DOWNLOAD_MODE;
     b12:	2305      	movs	r3, #5
     b14:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     b16:	68e8      	ldr	r0, [r5, #12]
     b18:	4b03      	ldr	r3, [pc, #12]	; (b28 <FotaAppTask+0x560>)
     b1a:	4798      	blx	r3
     b1c:	e587      	b.n	62e <FotaAppTask+0x66>
     b1e:	bf00      	nop
     b20:	000078f0 	.word	0x000078f0
     b24:	0000336d 	.word	0x0000336d
     b28:	000050a5 	.word	0x000050a5
     b2c:	20003574 	.word	0x20003574
     b30:	000056dd 	.word	0x000056dd
     b34:	000005ad 	.word	0x000005ad
     b38:	00007a68 	.word	0x00007a68
     b3c:	00003329 	.word	0x00003329
     b40:	00009368 	.word	0x00009368
     b44:	000079dc 	.word	0x000079dc
     b48:	20003568 	.word	0x20003568
     b4c:	00005a45 	.word	0x00005a45
     b50:	2000357c 	.word	0x2000357c
     b54:	00005865 	.word	0x00005865
     b58:	0000784c 	.word	0x0000784c
     b5c:	000053cd 	.word	0x000053cd
     b60:	0000798c 	.word	0x0000798c
     b64:	0000605d 	.word	0x0000605d
     b68:	00007878 	.word	0x00007878
     b6c:	000078c8 	.word	0x000078c8
     b70:	00007a14 	.word	0x00007a14
     b74:	00007adc 	.word	0x00007adc
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     b78:	4b91      	ldr	r3, [pc, #580]	; (dc0 <FotaAppTask+0x7f8>)
     b7a:	6818      	ldr	r0, [r3, #0]
     b7c:	4b91      	ldr	r3, [pc, #580]	; (dc4 <FotaAppTask+0x7fc>)
     b7e:	4798      	blx	r3
     b80:	2800      	cmp	r0, #0
     b82:	d130      	bne.n	be6 <FotaAppTask+0x61e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     b84:	2100      	movs	r1, #0
     b86:	4b90      	ldr	r3, [pc, #576]	; (dc8 <FotaAppTask+0x800>)
     b88:	6818      	ldr	r0, [r3, #0]
     b8a:	4b90      	ldr	r3, [pc, #576]	; (dcc <FotaAppTask+0x804>)
     b8c:	4798      	blx	r3
     b8e:	2801      	cmp	r0, #1
     b90:	d003      	beq.n	b9a <FotaAppTask+0x5d2>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     b92:	488f      	ldr	r0, [pc, #572]	; (dd0 <FotaAppTask+0x808>)
     b94:	4b8f      	ldr	r3, [pc, #572]	; (dd4 <FotaAppTask+0x80c>)
     b96:	4798      	blx	r3
     b98:	e549      	b.n	62e <FotaAppTask+0x66>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     b9a:	2305      	movs	r3, #5
     b9c:	f88d 3008 	strb.w	r3, [sp, #8]
                        TxMsgQueueData.atCmd = CMD_AT_WDSS_START_DM_SESSION;
     ba0:	231e      	movs	r3, #30
     ba2:	f88d 3009 	strb.w	r3, [sp, #9]
                        TxMsgQueueData.pData = NULL;
     ba6:	2300      	movs	r3, #0
     ba8:	9303      	str	r3, [sp, #12]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     baa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     bae:	a902      	add	r1, sp, #8
     bb0:	4883      	ldr	r0, [pc, #524]	; (dc0 <FotaAppTask+0x7f8>)
     bb2:	6800      	ldr	r0, [r0, #0]
     bb4:	4e88      	ldr	r6, [pc, #544]	; (dd8 <FotaAppTask+0x810>)
     bb6:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     bb8:	2801      	cmp	r0, #1
     bba:	d007      	beq.n	bcc <FotaAppTask+0x604>
                            DEBUG_PRINT("Failed to sent the start DM session request to Tx Task");
     bbc:	4887      	ldr	r0, [pc, #540]	; (ddc <FotaAppTask+0x814>)
     bbe:	4b85      	ldr	r3, [pc, #532]	; (dd4 <FotaAppTask+0x80c>)
     bc0:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     bc6:	4b86      	ldr	r3, [pc, #536]	; (de0 <FotaAppTask+0x818>)
     bc8:	4798      	blx	r3
     bca:	e530      	b.n	62e <FotaAppTask+0x66>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     bcc:	2300      	movs	r3, #0
     bce:	461a      	mov	r2, r3
     bd0:	4619      	mov	r1, r3
     bd2:	487d      	ldr	r0, [pc, #500]	; (dc8 <FotaAppTask+0x800>)
     bd4:	6800      	ldr	r0, [r0, #0]
     bd6:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     bd8:	2301      	movs	r3, #1
     bda:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     be0:	4b7f      	ldr	r3, [pc, #508]	; (de0 <FotaAppTask+0x818>)
     be2:	4798      	blx	r3
     be4:	e523      	b.n	62e <FotaAppTask+0x66>
                    DEBUG_PRINT("Transmit Queue is not empty");
     be6:	487f      	ldr	r0, [pc, #508]	; (de4 <FotaAppTask+0x81c>)
     be8:	4b7a      	ldr	r3, [pc, #488]	; (dd4 <FotaAppTask+0x80c>)
     bea:	4798      	blx	r3
     bec:	e51f      	b.n	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     bee:	487e      	ldr	r0, [pc, #504]	; (de8 <FotaAppTask+0x820>)
     bf0:	4e78      	ldr	r6, [pc, #480]	; (dd4 <FotaAppTask+0x80c>)
     bf2:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     bf4:	487d      	ldr	r0, [pc, #500]	; (dec <FotaAppTask+0x824>)
     bf6:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     bf8:	2300      	movs	r3, #0
     bfa:	706b      	strb	r3, [r5, #1]
     bfc:	e78b      	b.n	b16 <FotaAppTask+0x54e>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     bfe:	487c      	ldr	r0, [pc, #496]	; (df0 <FotaAppTask+0x828>)
     c00:	4b74      	ldr	r3, [pc, #464]	; (dd4 <FotaAppTask+0x80c>)
     c02:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     c04:	2300      	movs	r3, #0
     c06:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     c08:	68e8      	ldr	r0, [r5, #12]
     c0a:	4b7a      	ldr	r3, [pc, #488]	; (df4 <FotaAppTask+0x82c>)
     c0c:	4798      	blx	r3
     c0e:	e50e      	b.n	62e <FotaAppTask+0x66>
**===========================================================================*/
static DEVICE_SERVICE_INDICATION_TYPE getDeviceServiceIndicationType(void)
{
    uint32_t unsolicitedResponseLength = 0;
    uint8_t* responseBuffer = NULL;
    uint8_t dataString[2] = {0};
     c10:	2300      	movs	r3, #0
     c12:	f8ad 3008 	strh.w	r3, [sp, #8]
    bool readStatus;
    DEVICE_SERVICE_INDICATION_TYPE serviceIndicationType = SERVICE_INDICATION_ERROR;
    const int8_t* serviceIndicationCmdString = (int8_t*)"\r\n+WDSI: "; 

    while(mdmCtrlr_GetUnsolicitedResponseLength() < SERVICE_INDICATION_RESPONSE_LENGTH);
     c16:	4e78      	ldr	r6, [pc, #480]	; (df8 <FotaAppTask+0x830>)
     c18:	47b0      	blx	r6
     c1a:	280b      	cmp	r0, #11
     c1c:	d9fc      	bls.n	c18 <FotaAppTask+0x650>

    if(mdmCtrlr_GetUnsolicitedResponseLength() > SERVICE_INDICATION_RESPONSE_LENGTH)
     c1e:	4b76      	ldr	r3, [pc, #472]	; (df8 <FotaAppTask+0x830>)
     c20:	4798      	blx	r3
     c22:	280c      	cmp	r0, #12
     c24:	d93a      	bls.n	c9c <FotaAppTask+0x6d4>
    {
        unsolicitedResponseLength = mdmCtrlr_GetUnsolicitedResponseLength() - SERVICE_INDICATION_RESPONSE_LENGTH;
     c26:	4b74      	ldr	r3, [pc, #464]	; (df8 <FotaAppTask+0x830>)
     c28:	4798      	blx	r3
     c2a:	f1a0 060c 	sub.w	r6, r0, #12
    {
        unsolicitedResponseLength = mdmCtrlr_GetUnsolicitedResponseLength();
    }


    responseBuffer = (uint8_t*)pvPortMalloc((unsolicitedResponseLength)*(sizeof(uint8_t)));
     c2e:	4630      	mov	r0, r6
     c30:	4b72      	ldr	r3, [pc, #456]	; (dfc <FotaAppTask+0x834>)
     c32:	4798      	blx	r3

    if(responseBuffer != NULL)
     c34:	4680      	mov	r8, r0
     c36:	2800      	cmp	r0, #0
     c38:	f43f acf9 	beq.w	62e <FotaAppTask+0x66>
    {
        readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,unsolicitedResponseLength);
     c3c:	b2b1      	uxth	r1, r6
     c3e:	4b70      	ldr	r3, [pc, #448]	; (e00 <FotaAppTask+0x838>)
     c40:	4798      	blx	r3

        if(readStatus != false)
     c42:	2800      	cmp	r0, #0
     c44:	f000 8209 	beq.w	105a <FotaAppTask+0xa92>
        {
            if(VERIFIED_EQUAL == strncmp((char*)serviceIndicationCmdString, (char*)responseBuffer, SERVICE_INDICATION_CMD_LENGTH))
     c48:	2209      	movs	r2, #9
     c4a:	4641      	mov	r1, r8
     c4c:	486d      	ldr	r0, [pc, #436]	; (e04 <FotaAppTask+0x83c>)
     c4e:	4b6e      	ldr	r3, [pc, #440]	; (e08 <FotaAppTask+0x840>)
     c50:	4798      	blx	r3
     c52:	2800      	cmp	r0, #0
     c54:	f040 8201 	bne.w	105a <FotaAppTask+0xa92>
            {
                if((responseBuffer[SERVICE_INDICATION_CMD_LENGTH] + 1) != '\r')
     c58:	f898 3009 	ldrb.w	r3, [r8, #9]
     c5c:	2b0c      	cmp	r3, #12
     c5e:	d021      	beq.n	ca4 <FotaAppTask+0x6dc>
                {
                    dataString[0] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH];
     c60:	f88d 3008 	strb.w	r3, [sp, #8]
                    dataString[1] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH + 1];  
     c64:	f898 300a 	ldrb.w	r3, [r8, #10]
     c68:	f88d 3009 	strb.w	r3, [sp, #9]
                {
                    dataString[0] = 0;
                    dataString[1] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH];                  
                }
                
                serviceIndicationType = (DEVICE_SERVICE_INDICATION_TYPE)atoi((char*)dataString);
     c6c:	a802      	add	r0, sp, #8
     c6e:	4b67      	ldr	r3, [pc, #412]	; (e0c <FotaAppTask+0x844>)
     c70:	4798      	blx	r3
     c72:	b2c6      	uxtb	r6, r0
        else
        {
               /* Read failure from UART Rx Buffer */
        }

        vPortFree(responseBuffer);
     c74:	4640      	mov	r0, r8
     c76:	4b5f      	ldr	r3, [pc, #380]	; (df4 <FotaAppTask+0x82c>)
     c78:	4798      	blx	r3
            if(serviceIndicationReceived != SERVICE_INDICATION_ERROR)
     c7a:	2e64      	cmp	r6, #100	; 0x64
     c7c:	f43f acd7 	beq.w	62e <FotaAppTask+0x66>
                switch(serviceIndicationReceived)
     c80:	2e12      	cmp	r6, #18
     c82:	d819      	bhi.n	cb8 <FotaAppTask+0x6f0>
     c84:	e8df f006 	tbb	[pc, r6]
     c88:	271f1b15 	.word	0x271f1b15
     c8c:	1833182f 	.word	0x1833182f
     c90:	18676337 	.word	0x18676337
     c94:	7672186b 	.word	0x7672186b
     c98:	1887      	.short	0x1887
     c9a:	97          	.byte	0x97
     c9b:	00          	.byte	0x00
        unsolicitedResponseLength = mdmCtrlr_GetUnsolicitedResponseLength();
     c9c:	4b56      	ldr	r3, [pc, #344]	; (df8 <FotaAppTask+0x830>)
     c9e:	4798      	blx	r3
     ca0:	4606      	mov	r6, r0
     ca2:	e7c4      	b.n	c2e <FotaAppTask+0x666>
                    dataString[0] = 0;
     ca4:	2300      	movs	r3, #0
     ca6:	f88d 3008 	strb.w	r3, [sp, #8]
                    dataString[1] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH];                  
     caa:	230c      	movs	r3, #12
     cac:	f88d 3009 	strb.w	r3, [sp, #9]
     cb0:	e7dc      	b.n	c6c <FotaAppTask+0x6a4>
                        DEBUG_PRINT("FOTA : APN IS SET. READY FOR DM SESSION.\r\n");
     cb2:	4857      	ldr	r0, [pc, #348]	; (e10 <FotaAppTask+0x848>)
     cb4:	4b47      	ldr	r3, [pc, #284]	; (dd4 <FotaAppTask+0x80c>)
     cb6:	4798      	blx	r3
                PrevServiceIndicationReceived = serviceIndicationReceived;
     cb8:	4b56      	ldr	r3, [pc, #344]	; (e14 <FotaAppTask+0x84c>)
     cba:	701e      	strb	r6, [r3, #0]
     cbc:	e4b7      	b.n	62e <FotaAppTask+0x66>
                        DEBUG_PRINT("FOTA : AIRVANTAGE ORIGINATED DM SESSION REQUEST.\r\n");
     cbe:	4856      	ldr	r0, [pc, #344]	; (e18 <FotaAppTask+0x850>)
     cc0:	4b44      	ldr	r3, [pc, #272]	; (dd4 <FotaAppTask+0x80c>)
     cc2:	4798      	blx	r3
     cc4:	e7f8      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : AIRVANTAGE REQUESTS FOR FIRMWARE DOWNLOAD.\r\n");
     cc6:	4855      	ldr	r0, [pc, #340]	; (e1c <FotaAppTask+0x854>)
     cc8:	4b42      	ldr	r3, [pc, #264]	; (dd4 <FotaAppTask+0x80c>)
     cca:	4798      	blx	r3
                        FotaMainState = ACCEPT_THE_REQUEST_FOR_FIRMWARE_DOWNLOAD;
     ccc:	2306      	movs	r3, #6
     cce:	702b      	strb	r3, [r5, #0]
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     cd0:	2300      	movs	r3, #0
     cd2:	706b      	strb	r3, [r5, #1]
     cd4:	e7f0      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : AIRVANTAGE REQUESTS FOR FIRMWARE INSTALLATION.\r\n");
     cd6:	4852      	ldr	r0, [pc, #328]	; (e20 <FotaAppTask+0x858>)
     cd8:	4b3e      	ldr	r3, [pc, #248]	; (dd4 <FotaAppTask+0x80c>)
     cda:	4798      	blx	r3
                        FotaMainState = ACCEPT_THE_REQUEST_FOR_FIRMWARE_INSTALL;
     cdc:	2307      	movs	r3, #7
     cde:	702b      	strb	r3, [r5, #0]
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     ce0:	2300      	movs	r3, #0
     ce2:	706b      	strb	r3, [r5, #1]
     ce4:	e7e8      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : STARTING UP THE DM SESSION WITH AIRVANTAGE.\r\n");
     ce6:	484f      	ldr	r0, [pc, #316]	; (e24 <FotaAppTask+0x85c>)
     ce8:	4b3a      	ldr	r3, [pc, #232]	; (dd4 <FotaAppTask+0x80c>)
     cea:	4798      	blx	r3
     cec:	e7e4      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : DM SESSION STARTED AND TRANSACTIONS OCCURED.\r\n");
     cee:	484e      	ldr	r0, [pc, #312]	; (e28 <FotaAppTask+0x860>)
     cf0:	4b38      	ldr	r3, [pc, #224]	; (dd4 <FotaAppTask+0x80c>)
     cf2:	4798      	blx	r3
     cf4:	e7e0      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : DM SESSION WITH AIRVANTAGE IS CLOSED.\r\n");
     cf6:	484d      	ldr	r0, [pc, #308]	; (e2c <FotaAppTask+0x864>)
     cf8:	4b36      	ldr	r3, [pc, #216]	; (dd4 <FotaAppTask+0x80c>)
     cfa:	4798      	blx	r3
                        if((PrevServiceIndicationReceived != DM_SESSION_STARTED_TRANSACTIONS_OCCURED) &&
     cfc:	4b45      	ldr	r3, [pc, #276]	; (e14 <FotaAppTask+0x84c>)
     cfe:	781b      	ldrb	r3, [r3, #0]
     d00:	2b06      	cmp	r3, #6
     d02:	d00d      	beq.n	d20 <FotaAppTask+0x758>
     d04:	78eb      	ldrb	r3, [r5, #3]
     d06:	2b00      	cmp	r3, #0
     d08:	d1d6      	bne.n	cb8 <FotaAppTask+0x6f0>
                            mdmCtrlr_FlushRxBuffer();
     d0a:	4b49      	ldr	r3, [pc, #292]	; (e30 <FotaAppTask+0x868>)
     d0c:	4798      	blx	r3
                            bFotaVerificationIsDone = true;
     d0e:	2301      	movs	r3, #1
     d10:	70eb      	strb	r3, [r5, #3]
                            DEBUG_PRINT("FOTA : FIRMWARE UPDATE IS NOT PERFORMED.");
     d12:	4848      	ldr	r0, [pc, #288]	; (e34 <FotaAppTask+0x86c>)
     d14:	f8df 80bc 	ldr.w	r8, [pc, #188]	; dd4 <FotaAppTask+0x80c>
     d18:	47c0      	blx	r8
                            DEBUG_PRINT("FOTA : INSTALLED FIRMWARE MATCHES WITH FIRMWARE FROM AIR VANTAGE SERVER.\r\n");
     d1a:	4847      	ldr	r0, [pc, #284]	; (e38 <FotaAppTask+0x870>)
     d1c:	47c0      	blx	r8
     d1e:	e7cb      	b.n	cb8 <FotaAppTask+0x6f0>
                        else if((PrevServiceIndicationReceived == DM_SESSION_STARTED_TRANSACTIONS_OCCURED) &&
     d20:	78eb      	ldrb	r3, [r5, #3]
     d22:	2b00      	cmp	r3, #0
     d24:	d1c8      	bne.n	cb8 <FotaAppTask+0x6f0>
                                (bFotaVerificationIsDone == false) &&
     d26:	792b      	ldrb	r3, [r5, #4]
     d28:	2b00      	cmp	r3, #0
     d2a:	d0c5      	beq.n	cb8 <FotaAppTask+0x6f0>
                            mdmCtrlr_FlushRxBuffer();
     d2c:	4b40      	ldr	r3, [pc, #256]	; (e30 <FotaAppTask+0x868>)
     d2e:	4798      	blx	r3
                            DEBUG_PRINT("FOTA : SUCCESSFULLY INSTALLED THE DOWNLOADED FIRMWARE.");
     d30:	4842      	ldr	r0, [pc, #264]	; (e3c <FotaAppTask+0x874>)
     d32:	f8df 80a0 	ldr.w	r8, [pc, #160]	; dd4 <FotaAppTask+0x80c>
     d36:	47c0      	blx	r8
                            DEBUG_PRINT("\r\n");
     d38:	482c      	ldr	r0, [pc, #176]	; (dec <FotaAppTask+0x824>)
     d3a:	47c0      	blx	r8
                            DEBUG_PRINT("FOTA : REBOOTING THE DEVICE AFTER A SUCCESSFUL FIRMWARE INSTALLATION.\r\n");
     d3c:	4840      	ldr	r0, [pc, #256]	; (e40 <FotaAppTask+0x878>)
     d3e:	47c0      	blx	r8
                            bNewFirmwareInstalled = false;
     d40:	2300      	movs	r3, #0
     d42:	712b      	strb	r3, [r5, #4]
                            bFotaVerificationIsDone = true;
     d44:	2301      	movs	r3, #1
     d46:	70eb      	strb	r3, [r5, #3]
                            requestWatchDogForcedReset();
     d48:	4b3e      	ldr	r3, [pc, #248]	; (e44 <FotaAppTask+0x87c>)
     d4a:	4798      	blx	r3
     d4c:	e7b4      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : FIRMWARE IS AVAILABLE FOR DOWNLOAD.\r\n");
     d4e:	483e      	ldr	r0, [pc, #248]	; (e48 <FotaAppTask+0x880>)
     d50:	4b20      	ldr	r3, [pc, #128]	; (dd4 <FotaAppTask+0x80c>)
     d52:	4798      	blx	r3
     d54:	e7b0      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : FIRMWARE IS DOWNLOADED AND STORED IN FLASH.\r\n");
     d56:	483d      	ldr	r0, [pc, #244]	; (e4c <FotaAppTask+0x884>)
     d58:	4b1e      	ldr	r3, [pc, #120]	; (dd4 <FotaAppTask+0x80c>)
     d5a:	4798      	blx	r3
     d5c:	e7ac      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : DOWNLOADED PACKAGE IS VERIFIED AS CERTIFIED.\r\n");
     d5e:	483c      	ldr	r0, [pc, #240]	; (e50 <FotaAppTask+0x888>)
     d60:	f8df 8070 	ldr.w	r8, [pc, #112]	; dd4 <FotaAppTask+0x80c>
     d64:	47c0      	blx	r8
                        DEBUG_PRINT("FOTA : INSTALLING THE DOWNLOADED FIRMWARE...PLEASE WAIT...\r\n");
     d66:	483b      	ldr	r0, [pc, #236]	; (e54 <FotaAppTask+0x88c>)
     d68:	47c0      	blx	r8
     d6a:	e7a5      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : STARTING THE FIRMWARE UPDATE.\r\n");
     d6c:	483a      	ldr	r0, [pc, #232]	; (e58 <FotaAppTask+0x890>)
     d6e:	4b19      	ldr	r3, [pc, #100]	; (dd4 <FotaAppTask+0x80c>)
     d70:	4798      	blx	r3
     d72:	e7a1      	b.n	cb8 <FotaAppTask+0x6f0>
                        mdmCtrlr_FlushRxBuffer();
     d74:	4b2e      	ldr	r3, [pc, #184]	; (e30 <FotaAppTask+0x868>)
     d76:	4798      	blx	r3
                        DEBUG_PRINT("FOTA : FAILED TO UPDATE THE FIRMWARE.");
     d78:	4838      	ldr	r0, [pc, #224]	; (e5c <FotaAppTask+0x894>)
     d7a:	f8df 8058 	ldr.w	r8, [pc, #88]	; dd4 <FotaAppTask+0x80c>
     d7e:	47c0      	blx	r8
                        DEBUG_PRINT("\r\n");
     d80:	481a      	ldr	r0, [pc, #104]	; (dec <FotaAppTask+0x824>)
     d82:	47c0      	blx	r8
                        DEBUG_PRINT("FOTA : REBOOTING THE DEVICE AFTER A FAILED ATTEMPT OF FIRMWARE INSTALLATION.\r\n");
     d84:	4836      	ldr	r0, [pc, #216]	; (e60 <FotaAppTask+0x898>)
     d86:	47c0      	blx	r8
                        bFotaVerificationIsDone = true;
     d88:	2301      	movs	r3, #1
     d8a:	70eb      	strb	r3, [r5, #3]
                        bNewFirmwareInstalled = false;
     d8c:	2300      	movs	r3, #0
     d8e:	712b      	strb	r3, [r5, #4]
                        requestWatchDogForcedReset();
     d90:	4b2c      	ldr	r3, [pc, #176]	; (e44 <FotaAppTask+0x87c>)
     d92:	4798      	blx	r3
     d94:	e790      	b.n	cb8 <FotaAppTask+0x6f0>
                        mdmCtrlr_FlushRxBuffer();
     d96:	4b26      	ldr	r3, [pc, #152]	; (e30 <FotaAppTask+0x868>)
     d98:	4798      	blx	r3
                        DEBUG_PRINT("FOTA : SUCCESSFULLY INSTALLED THE DOWNLOADED FIRMWARE.");
     d9a:	4828      	ldr	r0, [pc, #160]	; (e3c <FotaAppTask+0x874>)
     d9c:	f8df 8034 	ldr.w	r8, [pc, #52]	; dd4 <FotaAppTask+0x80c>
     da0:	47c0      	blx	r8
                        DEBUG_PRINT("\r\n");
     da2:	4812      	ldr	r0, [pc, #72]	; (dec <FotaAppTask+0x824>)
     da4:	47c0      	blx	r8
                        DEBUG_PRINT("FOTA : REBOOTING THE DEVICE AFTER A SUCCESSFUL FIRMWARE INSTALLATION.\r\n");
     da6:	4826      	ldr	r0, [pc, #152]	; (e40 <FotaAppTask+0x878>)
     da8:	47c0      	blx	r8
                        bFotaVerificationIsDone = true;
     daa:	2301      	movs	r3, #1
     dac:	70eb      	strb	r3, [r5, #3]
                        bNewFirmwareInstalled = true;
     dae:	712b      	strb	r3, [r5, #4]
                        requestWatchDogForcedReset();
     db0:	4b24      	ldr	r3, [pc, #144]	; (e44 <FotaAppTask+0x87c>)
     db2:	4798      	blx	r3
     db4:	e780      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : DOWNLOADING THE FIRMWARE FROM AIR VANTAGE SERVER...PLEASE WAIT...\r\n");
     db6:	482b      	ldr	r0, [pc, #172]	; (e64 <FotaAppTask+0x89c>)
     db8:	4b06      	ldr	r3, [pc, #24]	; (dd4 <FotaAppTask+0x80c>)
     dba:	4798      	blx	r3
     dbc:	e77c      	b.n	cb8 <FotaAppTask+0x6f0>
     dbe:	bf00      	nop
     dc0:	20003568 	.word	0x20003568
     dc4:	00005a45 	.word	0x00005a45
     dc8:	2000357c 	.word	0x2000357c
     dcc:	00005865 	.word	0x00005865
     dd0:	0000784c 	.word	0x0000784c
     dd4:	0000336d 	.word	0x0000336d
     dd8:	000053cd 	.word	0x000053cd
     ddc:	00007aa4 	.word	0x00007aa4
     de0:	0000605d 	.word	0x0000605d
     de4:	00007878 	.word	0x00007878
     de8:	000078c8 	.word	0x000078c8
     dec:	00009368 	.word	0x00009368
     df0:	000078f0 	.word	0x000078f0
     df4:	000050a5 	.word	0x000050a5
     df8:	00002a79 	.word	0x00002a79
     dfc:	00004fc5 	.word	0x00004fc5
     e00:	00002a11 	.word	0x00002a11
     e04:	00007b10 	.word	0x00007b10
     e08:	00006e25 	.word	0x00006e25
     e0c:	00006b51 	.word	0x00006b51
     e10:	00007b1c 	.word	0x00007b1c
     e14:	20000000 	.word	0x20000000
     e18:	00007b48 	.word	0x00007b48
     e1c:	00007b7c 	.word	0x00007b7c
     e20:	00007bb0 	.word	0x00007bb0
     e24:	00007be8 	.word	0x00007be8
     e28:	00007c20 	.word	0x00007c20
     e2c:	00007c58 	.word	0x00007c58
     e30:	00002a65 	.word	0x00002a65
     e34:	00007c88 	.word	0x00007c88
     e38:	00007cb4 	.word	0x00007cb4
     e3c:	00007d00 	.word	0x00007d00
     e40:	00007d38 	.word	0x00007d38
     e44:	000035a5 	.word	0x000035a5
     e48:	00007d80 	.word	0x00007d80
     e4c:	00007db0 	.word	0x00007db0
     e50:	00007de8 	.word	0x00007de8
     e54:	00007e20 	.word	0x00007e20
     e58:	00007e60 	.word	0x00007e60
     e5c:	00007e88 	.word	0x00007e88
     e60:	00007eb0 	.word	0x00007eb0
     e64:	00007f00 	.word	0x00007f00
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     e68:	786b      	ldrb	r3, [r5, #1]
     e6a:	b333      	cbz	r3, eba <FotaAppTask+0x8f2>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     e6c:	2b01      	cmp	r3, #1
     e6e:	f47f abde 	bne.w	62e <FotaAppTask+0x66>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     e72:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     e76:	4639      	mov	r1, r7
     e78:	4b7a      	ldr	r3, [pc, #488]	; (1064 <FotaAppTask+0xa9c>)
     e7a:	6818      	ldr	r0, [r3, #0]
     e7c:	4b7a      	ldr	r3, [pc, #488]	; (1068 <FotaAppTask+0xaa0>)
     e7e:	4798      	blx	r3
     e80:	2801      	cmp	r0, #1
     e82:	f47f abd4 	bne.w	62e <FotaAppTask+0x66>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSR_ACCEPT_FW_DOWNLOAD)
     e86:	7a2b      	ldrb	r3, [r5, #8]
     e88:	2b22      	cmp	r3, #34	; 0x22
     e8a:	d15d      	bne.n	f48 <FotaAppTask+0x980>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     e8c:	68e8      	ldr	r0, [r5, #12]
     e8e:	4b77      	ldr	r3, [pc, #476]	; (106c <FotaAppTask+0xaa4>)
     e90:	4798      	blx	r3
     e92:	2800      	cmp	r0, #0
     e94:	d050      	beq.n	f38 <FotaAppTask+0x970>
                            DEBUG_PRINT("FOTA : Accepted the request for firmware Download and sent the acknowledgment to Airvantage server");
     e96:	4876      	ldr	r0, [pc, #472]	; (1070 <FotaAppTask+0xaa8>)
     e98:	4e76      	ldr	r6, [pc, #472]	; (1074 <FotaAppTask+0xaac>)
     e9a:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     e9c:	8969      	ldrh	r1, [r5, #10]
     e9e:	68e8      	ldr	r0, [r5, #12]
     ea0:	4b75      	ldr	r3, [pc, #468]	; (1078 <FotaAppTask+0xab0>)
     ea2:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     ea4:	4875      	ldr	r0, [pc, #468]	; (107c <FotaAppTask+0xab4>)
     ea6:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     ea8:	2300      	movs	r3, #0
     eaa:	706b      	strb	r3, [r5, #1]
                            FotaMainState = SYSTEM_IS_IN_FIRMWARE_DOWNLOAD_MODE;
     eac:	2305      	movs	r3, #5
     eae:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     eb0:	68e8      	ldr	r0, [r5, #12]
     eb2:	4b73      	ldr	r3, [pc, #460]	; (1080 <FotaAppTask+0xab8>)
     eb4:	4798      	blx	r3
     eb6:	f7ff bbba 	b.w	62e <FotaAppTask+0x66>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     eba:	4b72      	ldr	r3, [pc, #456]	; (1084 <FotaAppTask+0xabc>)
     ebc:	6818      	ldr	r0, [r3, #0]
     ebe:	4b72      	ldr	r3, [pc, #456]	; (1088 <FotaAppTask+0xac0>)
     ec0:	4798      	blx	r3
     ec2:	2800      	cmp	r0, #0
     ec4:	d133      	bne.n	f2e <FotaAppTask+0x966>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     ec6:	2100      	movs	r1, #0
     ec8:	4b70      	ldr	r3, [pc, #448]	; (108c <FotaAppTask+0xac4>)
     eca:	6818      	ldr	r0, [r3, #0]
     ecc:	4b70      	ldr	r3, [pc, #448]	; (1090 <FotaAppTask+0xac8>)
     ece:	4798      	blx	r3
     ed0:	2801      	cmp	r0, #1
     ed2:	d004      	beq.n	ede <FotaAppTask+0x916>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     ed4:	486f      	ldr	r0, [pc, #444]	; (1094 <FotaAppTask+0xacc>)
     ed6:	4b67      	ldr	r3, [pc, #412]	; (1074 <FotaAppTask+0xaac>)
     ed8:	4798      	blx	r3
     eda:	f7ff bba8 	b.w	62e <FotaAppTask+0x66>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     ede:	2305      	movs	r3, #5
     ee0:	f88d 3008 	strb.w	r3, [sp, #8]
                        TxMsgQueueData.atCmd = CMD_AT_WDSR_ACCEPT_FW_DOWNLOAD;
     ee4:	2322      	movs	r3, #34	; 0x22
     ee6:	f88d 3009 	strb.w	r3, [sp, #9]
                        TxMsgQueueData.pData = NULL;
     eea:	2300      	movs	r3, #0
     eec:	9303      	str	r3, [sp, #12]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     eee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ef2:	a902      	add	r1, sp, #8
     ef4:	4863      	ldr	r0, [pc, #396]	; (1084 <FotaAppTask+0xabc>)
     ef6:	6800      	ldr	r0, [r0, #0]
     ef8:	4e67      	ldr	r6, [pc, #412]	; (1098 <FotaAppTask+0xad0>)
     efa:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     efc:	2801      	cmp	r0, #1
     efe:	d008      	beq.n	f12 <FotaAppTask+0x94a>
                            DEBUG_PRINT("Error: Failed to sent FW download acceptance to Tx Task");
     f00:	4866      	ldr	r0, [pc, #408]	; (109c <FotaAppTask+0xad4>)
     f02:	4b5c      	ldr	r3, [pc, #368]	; (1074 <FotaAppTask+0xaac>)
     f04:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     f06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f0a:	4b65      	ldr	r3, [pc, #404]	; (10a0 <FotaAppTask+0xad8>)
     f0c:	4798      	blx	r3
     f0e:	f7ff bb8e 	b.w	62e <FotaAppTask+0x66>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     f12:	2300      	movs	r3, #0
     f14:	461a      	mov	r2, r3
     f16:	4619      	mov	r1, r3
     f18:	485c      	ldr	r0, [pc, #368]	; (108c <FotaAppTask+0xac4>)
     f1a:	6800      	ldr	r0, [r0, #0]
     f1c:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     f1e:	2301      	movs	r3, #1
     f20:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     f22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f26:	4b5e      	ldr	r3, [pc, #376]	; (10a0 <FotaAppTask+0xad8>)
     f28:	4798      	blx	r3
     f2a:	f7ff bb80 	b.w	62e <FotaAppTask+0x66>
                    DEBUG_PRINT("Transmit Queue is not empty");
     f2e:	485d      	ldr	r0, [pc, #372]	; (10a4 <FotaAppTask+0xadc>)
     f30:	4b50      	ldr	r3, [pc, #320]	; (1074 <FotaAppTask+0xaac>)
     f32:	4798      	blx	r3
     f34:	f7ff bb7b 	b.w	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     f38:	485b      	ldr	r0, [pc, #364]	; (10a8 <FotaAppTask+0xae0>)
     f3a:	4e4e      	ldr	r6, [pc, #312]	; (1074 <FotaAppTask+0xaac>)
     f3c:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     f3e:	484f      	ldr	r0, [pc, #316]	; (107c <FotaAppTask+0xab4>)
     f40:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     f42:	2300      	movs	r3, #0
     f44:	706b      	strb	r3, [r5, #1]
     f46:	e7b3      	b.n	eb0 <FotaAppTask+0x8e8>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     f48:	4858      	ldr	r0, [pc, #352]	; (10ac <FotaAppTask+0xae4>)
     f4a:	4b4a      	ldr	r3, [pc, #296]	; (1074 <FotaAppTask+0xaac>)
     f4c:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     f4e:	2300      	movs	r3, #0
     f50:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     f52:	68e8      	ldr	r0, [r5, #12]
     f54:	4b4a      	ldr	r3, [pc, #296]	; (1080 <FotaAppTask+0xab8>)
     f56:	4798      	blx	r3
     f58:	f7ff bb69 	b.w	62e <FotaAppTask+0x66>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     f5c:	786b      	ldrb	r3, [r5, #1]
     f5e:	2b00      	cmp	r3, #0
     f60:	d02a      	beq.n	fb8 <FotaAppTask+0x9f0>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     f62:	2b01      	cmp	r3, #1
     f64:	f47f ab63 	bne.w	62e <FotaAppTask+0x66>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     f68:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     f6c:	4639      	mov	r1, r7
     f6e:	4b3d      	ldr	r3, [pc, #244]	; (1064 <FotaAppTask+0xa9c>)
     f70:	6818      	ldr	r0, [r3, #0]
     f72:	4b3d      	ldr	r3, [pc, #244]	; (1068 <FotaAppTask+0xaa0>)
     f74:	4798      	blx	r3
     f76:	2801      	cmp	r0, #1
     f78:	f47f ab59 	bne.w	62e <FotaAppTask+0x66>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSR_ACCEPT_FW_INSTALL)
     f7c:	7a2b      	ldrb	r3, [r5, #8]
     f7e:	2b23      	cmp	r3, #35	; 0x23
     f80:	d161      	bne.n	1046 <FotaAppTask+0xa7e>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     f82:	68e8      	ldr	r0, [r5, #12]
     f84:	4b39      	ldr	r3, [pc, #228]	; (106c <FotaAppTask+0xaa4>)
     f86:	4798      	blx	r3
     f88:	2800      	cmp	r0, #0
     f8a:	d054      	beq.n	1036 <FotaAppTask+0xa6e>
                            DEBUG_PRINT("FOTA : Accepted the request for firmware Installation and sent the acknowledgment to Airvantage server");
     f8c:	4848      	ldr	r0, [pc, #288]	; (10b0 <FotaAppTask+0xae8>)
     f8e:	4e39      	ldr	r6, [pc, #228]	; (1074 <FotaAppTask+0xaac>)
     f90:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     f92:	8969      	ldrh	r1, [r5, #10]
     f94:	68e8      	ldr	r0, [r5, #12]
     f96:	4b38      	ldr	r3, [pc, #224]	; (1078 <FotaAppTask+0xab0>)
     f98:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     f9a:	4838      	ldr	r0, [pc, #224]	; (107c <FotaAppTask+0xab4>)
     f9c:	47b0      	blx	r6
                            DEBUG_PRINT("FOTA : STARTING UP THE FIRMWARE INSTALLATION.\r\n");
     f9e:	4845      	ldr	r0, [pc, #276]	; (10b4 <FotaAppTask+0xaec>)
     fa0:	47b0      	blx	r6
                            bNewFirmwareInstalled = true;
     fa2:	2301      	movs	r3, #1
     fa4:	712b      	strb	r3, [r5, #4]
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     fa6:	2300      	movs	r3, #0
     fa8:	706b      	strb	r3, [r5, #1]
                            FotaMainState = SYSTEM_IS_IN_FIRMWARE_DOWNLOAD_MODE;
     faa:	2305      	movs	r3, #5
     fac:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     fae:	68e8      	ldr	r0, [r5, #12]
     fb0:	4b33      	ldr	r3, [pc, #204]	; (1080 <FotaAppTask+0xab8>)
     fb2:	4798      	blx	r3
     fb4:	f7ff bb3b 	b.w	62e <FotaAppTask+0x66>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     fb8:	4b32      	ldr	r3, [pc, #200]	; (1084 <FotaAppTask+0xabc>)
     fba:	6818      	ldr	r0, [r3, #0]
     fbc:	4b32      	ldr	r3, [pc, #200]	; (1088 <FotaAppTask+0xac0>)
     fbe:	4798      	blx	r3
     fc0:	2800      	cmp	r0, #0
     fc2:	d133      	bne.n	102c <FotaAppTask+0xa64>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     fc4:	2100      	movs	r1, #0
     fc6:	4b31      	ldr	r3, [pc, #196]	; (108c <FotaAppTask+0xac4>)
     fc8:	6818      	ldr	r0, [r3, #0]
     fca:	4b31      	ldr	r3, [pc, #196]	; (1090 <FotaAppTask+0xac8>)
     fcc:	4798      	blx	r3
     fce:	2801      	cmp	r0, #1
     fd0:	d004      	beq.n	fdc <FotaAppTask+0xa14>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     fd2:	4830      	ldr	r0, [pc, #192]	; (1094 <FotaAppTask+0xacc>)
     fd4:	4b27      	ldr	r3, [pc, #156]	; (1074 <FotaAppTask+0xaac>)
     fd6:	4798      	blx	r3
     fd8:	f7ff bb29 	b.w	62e <FotaAppTask+0x66>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     fdc:	2305      	movs	r3, #5
     fde:	f88d 3008 	strb.w	r3, [sp, #8]
                        TxMsgQueueData.atCmd = CMD_AT_WDSR_ACCEPT_FW_INSTALL;
     fe2:	2323      	movs	r3, #35	; 0x23
     fe4:	f88d 3009 	strb.w	r3, [sp, #9]
                        TxMsgQueueData.pData = NULL;
     fe8:	2300      	movs	r3, #0
     fea:	9303      	str	r3, [sp, #12]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     fec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ff0:	a902      	add	r1, sp, #8
     ff2:	4824      	ldr	r0, [pc, #144]	; (1084 <FotaAppTask+0xabc>)
     ff4:	6800      	ldr	r0, [r0, #0]
     ff6:	4e28      	ldr	r6, [pc, #160]	; (1098 <FotaAppTask+0xad0>)
     ff8:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     ffa:	2801      	cmp	r0, #1
     ffc:	d008      	beq.n	1010 <FotaAppTask+0xa48>
                            DEBUG_PRINT("Error: Failed to sent FW install acceptance to Tx Task");
     ffe:	482e      	ldr	r0, [pc, #184]	; (10b8 <FotaAppTask+0xaf0>)
    1000:	4b1c      	ldr	r3, [pc, #112]	; (1074 <FotaAppTask+0xaac>)
    1002:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1008:	4b25      	ldr	r3, [pc, #148]	; (10a0 <FotaAppTask+0xad8>)
    100a:	4798      	blx	r3
    100c:	f7ff bb0f 	b.w	62e <FotaAppTask+0x66>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1010:	2300      	movs	r3, #0
    1012:	461a      	mov	r2, r3
    1014:	4619      	mov	r1, r3
    1016:	481d      	ldr	r0, [pc, #116]	; (108c <FotaAppTask+0xac4>)
    1018:	6800      	ldr	r0, [r0, #0]
    101a:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
    101c:	2301      	movs	r3, #1
    101e:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
    1020:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1024:	4b1e      	ldr	r3, [pc, #120]	; (10a0 <FotaAppTask+0xad8>)
    1026:	4798      	blx	r3
    1028:	f7ff bb01 	b.w	62e <FotaAppTask+0x66>
                    DEBUG_PRINT("Transmit Queue is not empty");
    102c:	481d      	ldr	r0, [pc, #116]	; (10a4 <FotaAppTask+0xadc>)
    102e:	4b11      	ldr	r3, [pc, #68]	; (1074 <FotaAppTask+0xaac>)
    1030:	4798      	blx	r3
    1032:	f7ff bafc 	b.w	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
    1036:	481c      	ldr	r0, [pc, #112]	; (10a8 <FotaAppTask+0xae0>)
    1038:	4e0e      	ldr	r6, [pc, #56]	; (1074 <FotaAppTask+0xaac>)
    103a:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
    103c:	480f      	ldr	r0, [pc, #60]	; (107c <FotaAppTask+0xab4>)
    103e:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
    1040:	2300      	movs	r3, #0
    1042:	706b      	strb	r3, [r5, #1]
    1044:	e7b3      	b.n	fae <FotaAppTask+0x9e6>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
    1046:	4819      	ldr	r0, [pc, #100]	; (10ac <FotaAppTask+0xae4>)
    1048:	4b0a      	ldr	r3, [pc, #40]	; (1074 <FotaAppTask+0xaac>)
    104a:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
    104c:	2300      	movs	r3, #0
    104e:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
    1050:	68e8      	ldr	r0, [r5, #12]
    1052:	4b0b      	ldr	r3, [pc, #44]	; (1080 <FotaAppTask+0xab8>)
    1054:	4798      	blx	r3
    1056:	f7ff baea 	b.w	62e <FotaAppTask+0x66>
        vPortFree(responseBuffer);
    105a:	4640      	mov	r0, r8
    105c:	4b08      	ldr	r3, [pc, #32]	; (1080 <FotaAppTask+0xab8>)
    105e:	4798      	blx	r3
    1060:	f7ff bae5 	b.w	62e <FotaAppTask+0x66>
    1064:	20003574 	.word	0x20003574
    1068:	000056dd 	.word	0x000056dd
    106c:	000005ad 	.word	0x000005ad
    1070:	00007f84 	.word	0x00007f84
    1074:	0000336d 	.word	0x0000336d
    1078:	00003329 	.word	0x00003329
    107c:	00009368 	.word	0x00009368
    1080:	000050a5 	.word	0x000050a5
    1084:	20003568 	.word	0x20003568
    1088:	00005a45 	.word	0x00005a45
    108c:	2000357c 	.word	0x2000357c
    1090:	00005865 	.word	0x00005865
    1094:	0000784c 	.word	0x0000784c
    1098:	000053cd 	.word	0x000053cd
    109c:	00007f4c 	.word	0x00007f4c
    10a0:	0000605d 	.word	0x0000605d
    10a4:	00007878 	.word	0x00007878
    10a8:	000078c8 	.word	0x000078c8
    10ac:	000078f0 	.word	0x000078f0
    10b0:	00008020 	.word	0x00008020
    10b4:	00008088 	.word	0x00008088
    10b8:	00007fe8 	.word	0x00007fe8

000010bc <isFotaVerificationDone>:
}
    10bc:	4b01      	ldr	r3, [pc, #4]	; (10c4 <isFotaVerificationDone+0x8>)
    10be:	78d8      	ldrb	r0, [r3, #3]
    10c0:	4770      	bx	lr
    10c2:	bf00      	nop
    10c4:	2000026c 	.word	0x2000026c

000010c8 <sensorTaskSchedule>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void sensorTaskSchedule(void)
{
    10c8:	b530      	push	{r4, r5, lr}
    10ca:	b083      	sub	sp, #12
	BaseType_t xResult;
	static SENSOR_INDEX_T sensorIndex = SENSOR_0;
	SENSOR_DATA_REQUEST_TYPE request;
	const TickType_t xSensorScanTriggerWaitMs = pdMS_TO_TICKS(500UL);
	int32_t bytesRead;
	uint16_t adcResult = 0;
    10cc:	2300      	movs	r3, #0
    10ce:	f8ad 3006 	strh.w	r3, [sp, #6]
	static uint8_t sampleIndex = 0;
	uint16_t adcCountAveraged = 0;
	uint32_t voltageInMv = 0;
	double_t voltage = 0;

	switch(sensorMainState)
    10d2:	4b3a      	ldr	r3, [pc, #232]	; (11bc <sensorTaskSchedule+0xf4>)
    10d4:	781b      	ldrb	r3, [r3, #0]
    10d6:	2b01      	cmp	r3, #1
    10d8:	d010      	beq.n	10fc <sensorTaskSchedule+0x34>
    10da:	b11b      	cbz	r3, 10e4 <sensorTaskSchedule+0x1c>
    10dc:	2b02      	cmp	r3, #2
    10de:	d047      	beq.n	1170 <sensorTaskSchedule+0xa8>
		break;

		default:
		break;
	}
}
    10e0:	b003      	add	sp, #12
    10e2:	bd30      	pop	{r4, r5, pc}
			xResult = xSemaphoreTake(SensorScanSemaphore, xSensorScanTriggerWaitMs);
    10e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    10e8:	4b35      	ldr	r3, [pc, #212]	; (11c0 <sensorTaskSchedule+0xf8>)
    10ea:	6818      	ldr	r0, [r3, #0]
    10ec:	4b35      	ldr	r3, [pc, #212]	; (11c4 <sensorTaskSchedule+0xfc>)
    10ee:	4798      	blx	r3
			if(xResult == pdPASS)
    10f0:	2801      	cmp	r0, #1
    10f2:	d1f5      	bne.n	10e0 <sensorTaskSchedule+0x18>
				sensorMainState = SCAN_ALL_OF_THE_SENSOR_SELECT_LINES;
    10f4:	2201      	movs	r2, #1
    10f6:	4b31      	ldr	r3, [pc, #196]	; (11bc <sensorTaskSchedule+0xf4>)
    10f8:	701a      	strb	r2, [r3, #0]
    10fa:	e7f1      	b.n	10e0 <sensorTaskSchedule+0x18>
			if(gpio_get_pin_level(sensorInputData[sensorIndex].selectLine) == false)
    10fc:	4b2f      	ldr	r3, [pc, #188]	; (11bc <sensorTaskSchedule+0xf4>)
    10fe:	7d1a      	ldrb	r2, [r3, #20]
    1100:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    1104:	791d      	ldrb	r5, [r3, #4]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1106:	4668      	mov	r0, sp
    1108:	4b2f      	ldr	r3, [pc, #188]	; (11c8 <sensorTaskSchedule+0x100>)
    110a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    110c:	096b      	lsrs	r3, r5, #5
    110e:	492f      	ldr	r1, [pc, #188]	; (11cc <sensorTaskSchedule+0x104>)
    1110:	01db      	lsls	r3, r3, #7
    1112:	18ca      	adds	r2, r1, r3
    1114:	58c9      	ldr	r1, [r1, r3]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1116:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1118:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    111a:	405c      	eors	r4, r3
    111c:	400c      	ands	r4, r1
    111e:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    1120:	4668      	mov	r0, sp
    1122:	4b2b      	ldr	r3, [pc, #172]	; (11d0 <sensorTaskSchedule+0x108>)
    1124:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    1126:	f005 051f 	and.w	r5, r5, #31
    112a:	2301      	movs	r3, #1
    112c:	fa03 f505 	lsl.w	r5, r3, r5
    1130:	4225      	tst	r5, r4
    1132:	d00c      	beq.n	114e <sensorTaskSchedule+0x86>
				sensorOutputData[sensorIndex].active = false;
    1134:	4a21      	ldr	r2, [pc, #132]	; (11bc <sensorTaskSchedule+0xf4>)
				sensorIndex++;
    1136:	7d13      	ldrb	r3, [r2, #20]
    1138:	3301      	adds	r3, #1
    113a:	b2db      	uxtb	r3, r3
    113c:	7513      	strb	r3, [r2, #20]
				if(sensorIndex >= MAX_SENSOR_COUNT)
    113e:	2b07      	cmp	r3, #7
    1140:	d9ce      	bls.n	10e0 <sensorTaskSchedule+0x18>
					sensorMainState = FETCH_ADC_READINGS_FOR_ACTIVE_SENSORS;
    1142:	4613      	mov	r3, r2
    1144:	2202      	movs	r2, #2
    1146:	701a      	strb	r2, [r3, #0]
					sensorIndex = SENSOR_0;
    1148:	2200      	movs	r2, #0
    114a:	751a      	strb	r2, [r3, #20]
    114c:	e7c8      	b.n	10e0 <sensorTaskSchedule+0x18>
				ConsoleDebugPrint("Select Line Low  - Port",(sensorIndex+1));
    114e:	4c1b      	ldr	r4, [pc, #108]	; (11bc <sensorTaskSchedule+0xf4>)
    1150:	7d21      	ldrb	r1, [r4, #20]
    1152:	4419      	add	r1, r3
    1154:	481f      	ldr	r0, [pc, #124]	; (11d4 <sensorTaskSchedule+0x10c>)
    1156:	4b20      	ldr	r3, [pc, #128]	; (11d8 <sensorTaskSchedule+0x110>)
    1158:	4798      	blx	r3
				sensorIndex++;
    115a:	7d23      	ldrb	r3, [r4, #20]
    115c:	3301      	adds	r3, #1
    115e:	b2db      	uxtb	r3, r3
    1160:	7523      	strb	r3, [r4, #20]
				if(sensorIndex >= MAX_SENSOR_COUNT)
    1162:	2b07      	cmp	r3, #7
    1164:	d9bc      	bls.n	10e0 <sensorTaskSchedule+0x18>
					sensorMainState = FETCH_ADC_READINGS_FOR_ACTIVE_SENSORS;
    1166:	2202      	movs	r2, #2
    1168:	7022      	strb	r2, [r4, #0]
					sensorIndex = SENSOR_0;
    116a:	2200      	movs	r2, #0
    116c:	7522      	strb	r2, [r4, #20]
    116e:	e7b7      	b.n	10e0 <sensorTaskSchedule+0x18>
			if(sensorIndex < MAX_SENSOR_COUNT)
    1170:	4b12      	ldr	r3, [pc, #72]	; (11bc <sensorTaskSchedule+0xf4>)
    1172:	7d1b      	ldrb	r3, [r3, #20]
    1174:	2b07      	cmp	r3, #7
    1176:	d904      	bls.n	1182 <sensorTaskSchedule+0xba>
				sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
    1178:	4b10      	ldr	r3, [pc, #64]	; (11bc <sensorTaskSchedule+0xf4>)
    117a:	2200      	movs	r2, #0
    117c:	701a      	strb	r2, [r3, #0]
				sensorIndex = SENSOR_0;
    117e:	751a      	strb	r2, [r3, #20]
}
    1180:	e7ae      	b.n	10e0 <sensorTaskSchedule+0x18>
				bytesRead = sensorAdcReadChannel(sensorInputData[sensorIndex].adcChannel,&adcResult,2);
    1182:	4c0e      	ldr	r4, [pc, #56]	; (11bc <sensorTaskSchedule+0xf4>)
    1184:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1188:	2202      	movs	r2, #2
    118a:	f10d 0106 	add.w	r1, sp, #6
    118e:	7958      	ldrb	r0, [r3, #5]
    1190:	4b12      	ldr	r3, [pc, #72]	; (11dc <sensorTaskSchedule+0x114>)
    1192:	4798      	blx	r3
				if(sampleIndex < MAX_ADC_SAMPLES)
    1194:	7d63      	ldrb	r3, [r4, #21]
    1196:	b94b      	cbnz	r3, 11ac <sensorTaskSchedule+0xe4>
					adcAveragingBuffer[sampleIndex] = adcResult;
    1198:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    119c:	8322      	strh	r2, [r4, #24]
					sampleIndex++;
    119e:	2201      	movs	r2, #1
    11a0:	7562      	strb	r2, [r4, #21]
			if(sensorIndex >= MAX_SENSOR_COUNT)
    11a2:	4b06      	ldr	r3, [pc, #24]	; (11bc <sensorTaskSchedule+0xf4>)
    11a4:	7d1b      	ldrb	r3, [r3, #20]
    11a6:	2b07      	cmp	r3, #7
    11a8:	d99a      	bls.n	10e0 <sensorTaskSchedule+0x18>
    11aa:	e7e5      	b.n	1178 <sensorTaskSchedule+0xb0>
					sampleIndex = 0;
    11ac:	4b03      	ldr	r3, [pc, #12]	; (11bc <sensorTaskSchedule+0xf4>)
    11ae:	2200      	movs	r2, #0
    11b0:	755a      	strb	r2, [r3, #21]
					memset(adcAveragingBuffer,0,MAX_ADC_SAMPLES);
    11b2:	761a      	strb	r2, [r3, #24]
					sensorIndex++;
    11b4:	7d1a      	ldrb	r2, [r3, #20]
    11b6:	3201      	adds	r2, #1
    11b8:	751a      	strb	r2, [r3, #20]
    11ba:	e7f2      	b.n	11a2 <sensorTaskSchedule+0xda>
    11bc:	2000027c 	.word	0x2000027c
    11c0:	20003578 	.word	0x20003578
    11c4:	00005865 	.word	0x00005865
    11c8:	00003b85 	.word	0x00003b85
    11cc:	41008000 	.word	0x41008000
    11d0:	00003b93 	.word	0x00003b93
    11d4:	000080b8 	.word	0x000080b8
    11d8:	000033f9 	.word	0x000033f9
    11dc:	000004f9 	.word	0x000004f9

000011e0 <SensorTask>:
{
    11e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11e4:	b093      	sub	sp, #76	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
    11e6:	4b8f      	ldr	r3, [pc, #572]	; (1424 <SensorTask+0x244>)
    11e8:	4798      	blx	r3
	intializeSensorSelectLines();
    11ea:	4b8f      	ldr	r3, [pc, #572]	; (1428 <SensorTask+0x248>)
    11ec:	4798      	blx	r3
	sensorAdcInitialize();
    11ee:	4b8f      	ldr	r3, [pc, #572]	; (142c <SensorTask+0x24c>)
    11f0:	4798      	blx	r3
    11f2:	4b8f      	ldr	r3, [pc, #572]	; (1430 <SensorTask+0x250>)
    11f4:	7c1f      	ldrb	r7, [r3, #16]
    11f6:	7c5e      	ldrb	r6, [r3, #17]
    11f8:	7b9a      	ldrb	r2, [r3, #14]
    11fa:	920e      	str	r2, [sp, #56]	; 0x38
    11fc:	7bda      	ldrb	r2, [r3, #15]
    11fe:	9210      	str	r2, [sp, #64]	; 0x40
    1200:	f893 900c 	ldrb.w	r9, [r3, #12]
    1204:	f893 800d 	ldrb.w	r8, [r3, #13]
    1208:	f893 b00a 	ldrb.w	fp, [r3, #10]
    120c:	f893 a00b 	ldrb.w	sl, [r3, #11]
    1210:	7a1d      	ldrb	r5, [r3, #8]
    1212:	7a5c      	ldrb	r4, [r3, #9]
    1214:	f893 c006 	ldrb.w	ip, [r3, #6]
    1218:	f893 e007 	ldrb.w	lr, [r3, #7]
    121c:	7918      	ldrb	r0, [r3, #4]
    121e:	795b      	ldrb	r3, [r3, #5]
    1220:	930c      	str	r3, [sp, #48]	; 0x30
    1222:	2201      	movs	r2, #1
    1224:	2300      	movs	r3, #0
    1226:	930f      	str	r3, [sp, #60]	; 0x3c
    1228:	930d      	str	r3, [sp, #52]	; 0x34
    122a:	930b      	str	r3, [sp, #44]	; 0x2c
    122c:	930a      	str	r3, [sp, #40]	; 0x28
    122e:	9309      	str	r3, [sp, #36]	; 0x24
    1230:	9308      	str	r3, [sp, #32]
    1232:	9307      	str	r3, [sp, #28]
    1234:	9306      	str	r3, [sp, #24]
    1236:	9305      	str	r3, [sp, #20]
    1238:	9304      	str	r3, [sp, #16]
    123a:	9303      	str	r3, [sp, #12]
    123c:	9302      	str	r3, [sp, #8]
    123e:	9301      	str	r3, [sp, #4]
				sensorInputData[SENSOR_1].adcChannel = SENSOR_1_AIN1;
    1240:	9200      	str	r2, [sp, #0]
    1242:	9311      	str	r3, [sp, #68]	; 0x44
    1244:	e007      	b.n	1256 <SensorTask+0x76>
    1246:	2101      	movs	r1, #1
    1248:	910a      	str	r1, [sp, #40]	; 0x28
				sensorInputData[SENSOR_2].adcChannel = SENSOR_2_AIN2;
    124a:	2402      	movs	r4, #2
    124c:	9900      	ldr	r1, [sp, #0]
    124e:	9109      	str	r1, [sp, #36]	; 0x24
				sensorInputData[SENSOR_2].selectLine = SELECT_2;
    1250:	252b      	movs	r5, #43	; 0x2b
    1252:	3201      	adds	r2, #1
    1254:	b2d2      	uxtb	r2, r2
		switch(sensorIndex)
    1256:	1e51      	subs	r1, r2, #1
    1258:	b2c9      	uxtb	r1, r1
    125a:	2907      	cmp	r1, #7
    125c:	f200 8089 	bhi.w	1372 <SensorTask+0x192>
    1260:	a301      	add	r3, pc, #4	; (adr r3, 1268 <SensorTask+0x88>)
    1262:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    1266:	bf00      	nop
    1268:	00001405 	.word	0x00001405
    126c:	00001415 	.word	0x00001415
    1270:	00001247 	.word	0x00001247
    1274:	00001289 	.word	0x00001289
    1278:	0000129b 	.word	0x0000129b
    127c:	000012ad 	.word	0x000012ad
    1280:	000012bf 	.word	0x000012bf
    1284:	000012cd 	.word	0x000012cd
    1288:	2101      	movs	r1, #1
    128a:	9102      	str	r1, [sp, #8]
				sensorInputData[SENSOR_3].adcChannel = SENSOR_3_AIN3;
    128c:	f04f 0a03 	mov.w	sl, #3
    1290:	9900      	ldr	r1, [sp, #0]
    1292:	9101      	str	r1, [sp, #4]
				sensorInputData[SENSOR_3].selectLine = SELECT_3;
    1294:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
    1298:	e7db      	b.n	1252 <SensorTask+0x72>
    129a:	2101      	movs	r1, #1
    129c:	9104      	str	r1, [sp, #16]
				sensorInputData[SENSOR_4].adcChannel = SENSOR_4_AIN4;
    129e:	f04f 0804 	mov.w	r8, #4
    12a2:	9900      	ldr	r1, [sp, #0]
    12a4:	9103      	str	r1, [sp, #12]
				sensorInputData[SENSOR_4].selectLine = SELECT_4;
    12a6:	f04f 090b 	mov.w	r9, #11
    12aa:	e7d2      	b.n	1252 <SensorTask+0x72>
    12ac:	2301      	movs	r3, #1
    12ae:	9311      	str	r3, [sp, #68]	; 0x44
				sensorInputData[SENSOR_5].adcChannel = SENSOR_5_AIN5;
    12b0:	2105      	movs	r1, #5
    12b2:	9110      	str	r1, [sp, #64]	; 0x40
    12b4:	9900      	ldr	r1, [sp, #0]
    12b6:	910f      	str	r1, [sp, #60]	; 0x3c
				sensorInputData[SENSOR_5].selectLine = SELECT_5;
    12b8:	210a      	movs	r1, #10
    12ba:	910e      	str	r1, [sp, #56]	; 0x38
    12bc:	e7c9      	b.n	1252 <SensorTask+0x72>
    12be:	2101      	movs	r1, #1
    12c0:	9108      	str	r1, [sp, #32]
				sensorInputData[SENSOR_6].adcChannel = SENSOR_6_AIN6;
    12c2:	2606      	movs	r6, #6
    12c4:	9900      	ldr	r1, [sp, #0]
    12c6:	9107      	str	r1, [sp, #28]
				sensorInputData[SENSOR_6].selectLine = SELECT_6;
    12c8:	2709      	movs	r7, #9
    12ca:	e7c2      	b.n	1252 <SensorTask+0x72>
    12cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    12ce:	9a01      	ldr	r2, [sp, #4]
    12d0:	2a00      	cmp	r2, #0
    12d2:	d14a      	bne.n	136a <SensorTask+0x18a>
    12d4:	9a02      	ldr	r2, [sp, #8]
    12d6:	b112      	cbz	r2, 12de <SensorTask+0xfe>
    12d8:	4a55      	ldr	r2, [pc, #340]	; (1430 <SensorTask+0x250>)
    12da:	f882 a00b 	strb.w	sl, [r2, #11]
    12de:	9a03      	ldr	r2, [sp, #12]
    12e0:	b112      	cbz	r2, 12e8 <SensorTask+0x108>
    12e2:	4a53      	ldr	r2, [pc, #332]	; (1430 <SensorTask+0x250>)
    12e4:	f882 900c 	strb.w	r9, [r2, #12]
    12e8:	9a04      	ldr	r2, [sp, #16]
    12ea:	b112      	cbz	r2, 12f2 <SensorTask+0x112>
    12ec:	4a50      	ldr	r2, [pc, #320]	; (1430 <SensorTask+0x250>)
    12ee:	f882 800d 	strb.w	r8, [r2, #13]
    12f2:	9a05      	ldr	r2, [sp, #20]
    12f4:	b112      	cbz	r2, 12fc <SensorTask+0x11c>
    12f6:	4a4e      	ldr	r2, [pc, #312]	; (1430 <SensorTask+0x250>)
    12f8:	f882 c006 	strb.w	ip, [r2, #6]
    12fc:	9a06      	ldr	r2, [sp, #24]
    12fe:	b112      	cbz	r2, 1306 <SensorTask+0x126>
    1300:	4a4b      	ldr	r2, [pc, #300]	; (1430 <SensorTask+0x250>)
    1302:	f882 e007 	strb.w	lr, [r2, #7]
    1306:	9a07      	ldr	r2, [sp, #28]
    1308:	b10a      	cbz	r2, 130e <SensorTask+0x12e>
    130a:	4a49      	ldr	r2, [pc, #292]	; (1430 <SensorTask+0x250>)
    130c:	7417      	strb	r7, [r2, #16]
    130e:	9a08      	ldr	r2, [sp, #32]
    1310:	b10a      	cbz	r2, 1316 <SensorTask+0x136>
    1312:	4a47      	ldr	r2, [pc, #284]	; (1430 <SensorTask+0x250>)
    1314:	7456      	strb	r6, [r2, #17]
    1316:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1318:	b10a      	cbz	r2, 131e <SensorTask+0x13e>
    131a:	4a45      	ldr	r2, [pc, #276]	; (1430 <SensorTask+0x250>)
    131c:	7215      	strb	r5, [r2, #8]
    131e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1320:	b10a      	cbz	r2, 1326 <SensorTask+0x146>
    1322:	4a43      	ldr	r2, [pc, #268]	; (1430 <SensorTask+0x250>)
    1324:	7254      	strb	r4, [r2, #9]
    1326:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1328:	b10a      	cbz	r2, 132e <SensorTask+0x14e>
    132a:	4a41      	ldr	r2, [pc, #260]	; (1430 <SensorTask+0x250>)
    132c:	7110      	strb	r0, [r2, #4]
    132e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1330:	b11a      	cbz	r2, 133a <SensorTask+0x15a>
    1332:	4a3f      	ldr	r2, [pc, #252]	; (1430 <SensorTask+0x250>)
    1334:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
    1338:	7151      	strb	r1, [r2, #5]
    133a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    133c:	b11a      	cbz	r2, 1346 <SensorTask+0x166>
    133e:	4a3c      	ldr	r2, [pc, #240]	; (1430 <SensorTask+0x250>)
    1340:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1344:	7391      	strb	r1, [r2, #14]
    1346:	b11b      	cbz	r3, 1350 <SensorTask+0x170>
    1348:	4b39      	ldr	r3, [pc, #228]	; (1430 <SensorTask+0x250>)
    134a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    134e:	73da      	strb	r2, [r3, #15]
				sensorInputData[SENSOR_7].selectLine = SELECT_7;
    1350:	4b37      	ldr	r3, [pc, #220]	; (1430 <SensorTask+0x250>)
    1352:	2208      	movs	r2, #8
    1354:	749a      	strb	r2, [r3, #18]
				sensorInputData[SENSOR_7].adcChannel = SENSOR_7_AIN7;
    1356:	2207      	movs	r2, #7
    1358:	74da      	strb	r2, [r3, #19]
	sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
    135a:	2200      	movs	r2, #0
    135c:	4b34      	ldr	r3, [pc, #208]	; (1430 <SensorTask+0x250>)
    135e:	701a      	strb	r2, [r3, #0]
		sensorTaskSchedule();
    1360:	4d34      	ldr	r5, [pc, #208]	; (1434 <SensorTask+0x254>)
		kickWatchDog();
    1362:	4c35      	ldr	r4, [pc, #212]	; (1438 <SensorTask+0x258>)
		sensorTaskSchedule();
    1364:	47a8      	blx	r5
		kickWatchDog();
    1366:	47a0      	blx	r4
    1368:	e7fc      	b.n	1364 <SensorTask+0x184>
    136a:	4a31      	ldr	r2, [pc, #196]	; (1430 <SensorTask+0x250>)
    136c:	f882 b00a 	strb.w	fp, [r2, #10]
    1370:	e7b0      	b.n	12d4 <SensorTask+0xf4>
	for(sensorIndex = SENSOR_0; sensorIndex < MAX_SENSOR_COUNT; sensorIndex++)
    1372:	2a07      	cmp	r2, #7
    1374:	f67f af6d 	bls.w	1252 <SensorTask+0x72>
    1378:	9b11      	ldr	r3, [sp, #68]	; 0x44
    137a:	9a01      	ldr	r2, [sp, #4]
    137c:	b112      	cbz	r2, 1384 <SensorTask+0x1a4>
    137e:	4a2c      	ldr	r2, [pc, #176]	; (1430 <SensorTask+0x250>)
    1380:	f882 b00a 	strb.w	fp, [r2, #10]
    1384:	9a02      	ldr	r2, [sp, #8]
    1386:	b112      	cbz	r2, 138e <SensorTask+0x1ae>
    1388:	4a29      	ldr	r2, [pc, #164]	; (1430 <SensorTask+0x250>)
    138a:	f882 a00b 	strb.w	sl, [r2, #11]
    138e:	9a03      	ldr	r2, [sp, #12]
    1390:	b112      	cbz	r2, 1398 <SensorTask+0x1b8>
    1392:	4a27      	ldr	r2, [pc, #156]	; (1430 <SensorTask+0x250>)
    1394:	f882 900c 	strb.w	r9, [r2, #12]
    1398:	9a04      	ldr	r2, [sp, #16]
    139a:	b112      	cbz	r2, 13a2 <SensorTask+0x1c2>
    139c:	4a24      	ldr	r2, [pc, #144]	; (1430 <SensorTask+0x250>)
    139e:	f882 800d 	strb.w	r8, [r2, #13]
    13a2:	9a05      	ldr	r2, [sp, #20]
    13a4:	b112      	cbz	r2, 13ac <SensorTask+0x1cc>
    13a6:	4a22      	ldr	r2, [pc, #136]	; (1430 <SensorTask+0x250>)
    13a8:	f882 c006 	strb.w	ip, [r2, #6]
    13ac:	9a06      	ldr	r2, [sp, #24]
    13ae:	b112      	cbz	r2, 13b6 <SensorTask+0x1d6>
    13b0:	4a1f      	ldr	r2, [pc, #124]	; (1430 <SensorTask+0x250>)
    13b2:	f882 e007 	strb.w	lr, [r2, #7]
    13b6:	9a07      	ldr	r2, [sp, #28]
    13b8:	b10a      	cbz	r2, 13be <SensorTask+0x1de>
    13ba:	4a1d      	ldr	r2, [pc, #116]	; (1430 <SensorTask+0x250>)
    13bc:	7417      	strb	r7, [r2, #16]
    13be:	9a08      	ldr	r2, [sp, #32]
    13c0:	b10a      	cbz	r2, 13c6 <SensorTask+0x1e6>
    13c2:	4a1b      	ldr	r2, [pc, #108]	; (1430 <SensorTask+0x250>)
    13c4:	7456      	strb	r6, [r2, #17]
    13c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    13c8:	b10a      	cbz	r2, 13ce <SensorTask+0x1ee>
    13ca:	4a19      	ldr	r2, [pc, #100]	; (1430 <SensorTask+0x250>)
    13cc:	7215      	strb	r5, [r2, #8]
    13ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    13d0:	b10a      	cbz	r2, 13d6 <SensorTask+0x1f6>
    13d2:	4a17      	ldr	r2, [pc, #92]	; (1430 <SensorTask+0x250>)
    13d4:	7254      	strb	r4, [r2, #9]
    13d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    13d8:	b10a      	cbz	r2, 13de <SensorTask+0x1fe>
    13da:	4a15      	ldr	r2, [pc, #84]	; (1430 <SensorTask+0x250>)
    13dc:	7110      	strb	r0, [r2, #4]
    13de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    13e0:	b11a      	cbz	r2, 13ea <SensorTask+0x20a>
    13e2:	4a13      	ldr	r2, [pc, #76]	; (1430 <SensorTask+0x250>)
    13e4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
    13e8:	7151      	strb	r1, [r2, #5]
    13ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    13ec:	b11a      	cbz	r2, 13f6 <SensorTask+0x216>
    13ee:	4a10      	ldr	r2, [pc, #64]	; (1430 <SensorTask+0x250>)
    13f0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    13f4:	7391      	strb	r1, [r2, #14]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d0af      	beq.n	135a <SensorTask+0x17a>
    13fa:	4b0d      	ldr	r3, [pc, #52]	; (1430 <SensorTask+0x250>)
    13fc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1400:	73da      	strb	r2, [r3, #15]
    1402:	e7aa      	b.n	135a <SensorTask+0x17a>
		switch(sensorIndex)
    1404:	2101      	movs	r1, #1
    1406:	910d      	str	r1, [sp, #52]	; 0x34
				sensorInputData[SENSOR_0].adcChannel = SENSOR_0_AIN0;
    1408:	2100      	movs	r1, #0
    140a:	910c      	str	r1, [sp, #48]	; 0x30
		switch(sensorIndex)
    140c:	9900      	ldr	r1, [sp, #0]
    140e:	910b      	str	r1, [sp, #44]	; 0x2c
				sensorInputData[SENSOR_0].selectLine = SELECT_0;
    1410:	202d      	movs	r0, #45	; 0x2d
    1412:	e71e      	b.n	1252 <SensorTask+0x72>
		switch(sensorIndex)
    1414:	2101      	movs	r1, #1
    1416:	9106      	str	r1, [sp, #24]
				sensorInputData[SENSOR_1].adcChannel = SENSOR_1_AIN1;
    1418:	9900      	ldr	r1, [sp, #0]
    141a:	468e      	mov	lr, r1
		switch(sensorIndex)
    141c:	9105      	str	r1, [sp, #20]
				sensorInputData[SENSOR_1].selectLine = SELECT_1;
    141e:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    1422:	e716      	b.n	1252 <SensorTask+0x72>
    1424:	00005e1d 	.word	0x00005e1d
    1428:	00000365 	.word	0x00000365
    142c:	000004ed 	.word	0x000004ed
    1430:	2000027c 	.word	0x2000027c
    1434:	000010c9 	.word	0x000010c9
    1438:	00003565 	.word	0x00003565

0000143c <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
    143c:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
    143e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1442:	460d      	mov	r5, r1
    1444:	4c04      	ldr	r4, [pc, #16]	; (1458 <getModemCommandData+0x1c>)
    1446:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    144a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    144c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    144e:	6823      	ldr	r3, [r4, #0]
    1450:	602b      	str	r3, [r5, #0]
}
    1452:	bc30      	pop	{r4, r5}
    1454:	4770      	bx	lr
    1456:	bf00      	nop
    1458:	000080d0 	.word	0x000080d0

0000145c <buildHttpHeaderWithActiveSessionID>:
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildHttpHeaderWithActiveSessionID(const uint8_t* activeSessionId)
{
	switch (*activeSessionId)
    145c:	7803      	ldrb	r3, [r0, #0]
    145e:	3b31      	subs	r3, #49	; 0x31
    1460:	2b08      	cmp	r3, #8
    1462:	d83b      	bhi.n	14dc <buildHttpHeaderWithActiveSessionID+0x80>
    1464:	e8df f003 	tbb	[pc, r3]
    1468:	17110b05 	.word	0x17110b05
    146c:	2f29231d 	.word	0x2f29231d
    1470:	35          	.byte	0x35
    1471:	00          	.byte	0x00
	{
		case SESSION_ID_1:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '1';
    1472:	4b1b      	ldr	r3, [pc, #108]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    1474:	2231      	movs	r2, #49	; 0x31
    1476:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '1';
    1478:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    147c:	4770      	bx	lr

		case SESSION_ID_2:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '2';
    147e:	4b18      	ldr	r3, [pc, #96]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    1480:	2232      	movs	r2, #50	; 0x32
    1482:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '2';
    1484:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    1488:	4770      	bx	lr

		case SESSION_ID_3:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '3';
    148a:	4b15      	ldr	r3, [pc, #84]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    148c:	2233      	movs	r2, #51	; 0x33
    148e:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '3';
    1490:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    1494:	4770      	bx	lr

		case SESSION_ID_4:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '4';
    1496:	4b12      	ldr	r3, [pc, #72]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    1498:	2234      	movs	r2, #52	; 0x34
    149a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '4';
    149c:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    14a0:	4770      	bx	lr

		case SESSION_ID_5:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '5';
    14a2:	4b0f      	ldr	r3, [pc, #60]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    14a4:	2235      	movs	r2, #53	; 0x35
    14a6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '5';
    14a8:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    14ac:	4770      	bx	lr

		case SESSION_ID_6:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '6';
    14ae:	4b0c      	ldr	r3, [pc, #48]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    14b0:	2236      	movs	r2, #54	; 0x36
    14b2:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '6';
    14b4:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    14b8:	4770      	bx	lr

		case SESSION_ID_7:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '7';
    14ba:	4b09      	ldr	r3, [pc, #36]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    14bc:	2237      	movs	r2, #55	; 0x37
    14be:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '7';
    14c0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    14c4:	4770      	bx	lr

		case SESSION_ID_8:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '8';
    14c6:	4b06      	ldr	r3, [pc, #24]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    14c8:	2238      	movs	r2, #56	; 0x38
    14ca:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '8';
    14cc:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    14d0:	4770      	bx	lr

		case SESSION_ID_9:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '9';
    14d2:	4b03      	ldr	r3, [pc, #12]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    14d4:	2239      	movs	r2, #57	; 0x39
    14d6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '9';
    14d8:	f883 2020 	strb.w	r2, [r3, #32]
    14dc:	4770      	bx	lr
    14de:	bf00      	nop
    14e0:	20000004 	.word	0x20000004

000014e4 <buildDataPacketsToServer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildDataPacketsToServer(void)
{
    14e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	strncpy(kHttpGetCompleteData,kHttpGetString,15);
    14e6:	4c0f      	ldr	r4, [pc, #60]	; (1524 <buildDataPacketsToServer+0x40>)
    14e8:	220f      	movs	r2, #15
    14ea:	490f      	ldr	r1, [pc, #60]	; (1528 <buildDataPacketsToServer+0x44>)
    14ec:	4620      	mov	r0, r4
    14ee:	4b0f      	ldr	r3, [pc, #60]	; (152c <buildDataPacketsToServer+0x48>)
    14f0:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
    14f2:	4620      	mov	r0, r4
    14f4:	4b0e      	ldr	r3, [pc, #56]	; (1530 <buildDataPacketsToServer+0x4c>)
    14f6:	4798      	blx	r3
    14f8:	4d0e      	ldr	r5, [pc, #56]	; (1534 <buildDataPacketsToServer+0x50>)
    14fa:	4404      	add	r4, r0
    14fc:	f105 0720 	add.w	r7, r5, #32
    1500:	462e      	mov	r6, r5
    1502:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1504:	6020      	str	r0, [r4, #0]
    1506:	6061      	str	r1, [r4, #4]
    1508:	60a2      	str	r2, [r4, #8]
    150a:	60e3      	str	r3, [r4, #12]
    150c:	4635      	mov	r5, r6
    150e:	3410      	adds	r4, #16
    1510:	42be      	cmp	r6, r7
    1512:	d1f5      	bne.n	1500 <buildDataPacketsToServer+0x1c>
    1514:	cd07      	ldmia	r5!, {r0, r1, r2}
    1516:	6020      	str	r0, [r4, #0]
    1518:	6061      	str	r1, [r4, #4]
    151a:	60a2      	str	r2, [r4, #8]
    151c:	782b      	ldrb	r3, [r5, #0]
    151e:	7323      	strb	r3, [r4, #12]
    1520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1522:	bf00      	nop
    1524:	20000298 	.word	0x20000298
    1528:	20000018 	.word	0x20000018
    152c:	00006e49 	.word	0x00006e49
    1530:	00006e15 	.word	0x00006e15
    1534:	00008580 	.word	0x00008580

00001538 <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
    1538:	b5f0      	push	{r4, r5, r6, r7, lr}
    153a:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
    153c:	a901      	add	r1, sp, #4
    153e:	4b2d      	ldr	r3, [pc, #180]	; (15f4 <mdmParser_solicitedCmdParser+0xbc>)
    1540:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
    1542:	f89d 700c 	ldrb.w	r7, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
    1546:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    154a:	4b2b      	ldr	r3, [pc, #172]	; (15f8 <mdmParser_solicitedCmdParser+0xc0>)
    154c:	4798      	blx	r3

	if(responseBuffer != NULL)
    154e:	2800      	cmp	r0, #0
    1550:	d04a      	beq.n	15e8 <mdmParser_solicitedCmdParser+0xb0>
    1552:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
    1554:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    1558:	4b28      	ldr	r3, [pc, #160]	; (15fc <mdmParser_solicitedCmdParser+0xc4>)
    155a:	4798      	blx	r3

		if(readStatus != false)
    155c:	4606      	mov	r6, r0
    155e:	2800      	cmp	r0, #0
    1560:	d03e      	beq.n	15e0 <mdmParser_solicitedCmdParser+0xa8>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
    1562:	f89d 200c 	ldrb.w	r2, [sp, #12]
    1566:	4621      	mov	r1, r4
    1568:	9802      	ldr	r0, [sp, #8]
    156a:	4b25      	ldr	r3, [pc, #148]	; (1600 <mdmParser_solicitedCmdParser+0xc8>)
    156c:	4798      	blx	r3
    156e:	bb58      	cbnz	r0, 15c8 <mdmParser_solicitedCmdParser+0x90>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
    1570:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    1574:	3001      	adds	r0, #1
    1576:	4b20      	ldr	r3, [pc, #128]	; (15f8 <mdmParser_solicitedCmdParser+0xc0>)
    1578:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
    157a:	4605      	mov	r5, r0
    157c:	b1f8      	cbz	r0, 15be <mdmParser_solicitedCmdParser+0x86>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
    157e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    1582:	b1d3      	cbz	r3, 15ba <mdmParser_solicitedCmdParser+0x82>
    1584:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
    1586:	1cb9      	adds	r1, r7, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
    1588:	b2c9      	uxtb	r1, r1
    158a:	18e2      	adds	r2, r4, r3
    158c:	5c52      	ldrb	r2, [r2, r1]
    158e:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
    1590:	3301      	adds	r3, #1
    1592:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
    1594:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    1598:	429a      	cmp	r2, r3
    159a:	d8f6      	bhi.n	158a <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
    159c:	2200      	movs	r2, #0
    159e:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt+1);
    15a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    15a4:	3201      	adds	r2, #1
    15a6:	b292      	uxth	r2, r2
    15a8:	4629      	mov	r1, r5
    15aa:	f89d 0004 	ldrb.w	r0, [sp, #4]
    15ae:	9b04      	ldr	r3, [sp, #16]
    15b0:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
    15b2:	4628      	mov	r0, r5
    15b4:	4b13      	ldr	r3, [pc, #76]	; (1604 <mdmParser_solicitedCmdParser+0xcc>)
    15b6:	4798      	blx	r3
    15b8:	e00a      	b.n	15d0 <mdmParser_solicitedCmdParser+0x98>
					while(parseCnt < cmdData.validDataCnt)
    15ba:	2300      	movs	r3, #0
    15bc:	e7ee      	b.n	159c <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
    15be:	4812      	ldr	r0, [pc, #72]	; (1608 <mdmParser_solicitedCmdParser+0xd0>)
    15c0:	4b12      	ldr	r3, [pc, #72]	; (160c <mdmParser_solicitedCmdParser+0xd4>)
    15c2:	4798      	blx	r3
	bool parseStatus = false;
    15c4:	2600      	movs	r6, #0
    15c6:	e003      	b.n	15d0 <mdmParser_solicitedCmdParser+0x98>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
    15c8:	4811      	ldr	r0, [pc, #68]	; (1610 <mdmParser_solicitedCmdParser+0xd8>)
    15ca:	4b10      	ldr	r3, [pc, #64]	; (160c <mdmParser_solicitedCmdParser+0xd4>)
    15cc:	4798      	blx	r3
				parseStatus = false;
    15ce:	2600      	movs	r6, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
    15d0:	4620      	mov	r0, r4
    15d2:	4b0c      	ldr	r3, [pc, #48]	; (1604 <mdmParser_solicitedCmdParser+0xcc>)
    15d4:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
    15d6:	4b0f      	ldr	r3, [pc, #60]	; (1614 <mdmParser_solicitedCmdParser+0xdc>)
    15d8:	4798      	blx	r3

	return parseStatus;
}
    15da:	4630      	mov	r0, r6
    15dc:	b007      	add	sp, #28
    15de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
    15e0:	480d      	ldr	r0, [pc, #52]	; (1618 <mdmParser_solicitedCmdParser+0xe0>)
    15e2:	4b0a      	ldr	r3, [pc, #40]	; (160c <mdmParser_solicitedCmdParser+0xd4>)
    15e4:	4798      	blx	r3
    15e6:	e7f3      	b.n	15d0 <mdmParser_solicitedCmdParser+0x98>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
    15e8:	480c      	ldr	r0, [pc, #48]	; (161c <mdmParser_solicitedCmdParser+0xe4>)
    15ea:	4b08      	ldr	r3, [pc, #32]	; (160c <mdmParser_solicitedCmdParser+0xd4>)
    15ec:	4798      	blx	r3
	bool parseStatus = false;
    15ee:	2600      	movs	r6, #0
    15f0:	e7f1      	b.n	15d6 <mdmParser_solicitedCmdParser+0x9e>
    15f2:	bf00      	nop
    15f4:	0000143d 	.word	0x0000143d
    15f8:	00004fc5 	.word	0x00004fc5
    15fc:	00002a11 	.word	0x00002a11
    1600:	00006e25 	.word	0x00006e25
    1604:	000050a5 	.word	0x000050a5
    1608:	00008810 	.word	0x00008810
    160c:	0000336d 	.word	0x0000336d
    1610:	00008844 	.word	0x00008844
    1614:	00002a65 	.word	0x00002a65
    1618:	00008880 	.word	0x00008880
    161c:	000088c4 	.word	0x000088c4

00001620 <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
    1620:	4b01      	ldr	r3, [pc, #4]	; (1628 <mdmParser_SetLastCmdProcessed+0x8>)
    1622:	7018      	strb	r0, [r3, #0]
    1624:	4770      	bx	lr
    1626:	bf00      	nop
    1628:	20000027 	.word	0x20000027

0000162c <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
    162c:	4b01      	ldr	r3, [pc, #4]	; (1634 <mdmParser_SetLastSentAtCommand+0x8>)
    162e:	7018      	strb	r0, [r3, #0]
    1630:	4770      	bx	lr
    1632:	bf00      	nop
    1634:	200002d4 	.word	0x200002d4

00001638 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
    1638:	4b01      	ldr	r3, [pc, #4]	; (1640 <mdmParser_GetLastSentAtCommand+0x8>)
    163a:	7818      	ldrb	r0, [r3, #0]
    163c:	4770      	bx	lr
    163e:	bf00      	nop
    1640:	200002d4 	.word	0x200002d4

00001644 <getCloseActiveSessionCmd>:
**===========================================================================*/
static AT_CMD_TYPE getCloseActiveSessionCmd(uint8_t sessionID)
{
    AT_CMD_TYPE sessionCloseCmd;

    switch(sessionID)
    1644:	3801      	subs	r0, #1
    1646:	2809      	cmp	r0, #9
    1648:	d81a      	bhi.n	1680 <getCloseActiveSessionCmd+0x3c>
    164a:	e8df f000 	tbb	[pc, r0]
    164e:	0705      	.short	0x0705
    1650:	0f0d0b09 	.word	0x0f0d0b09
    1654:	17151311 	.word	0x17151311
    {
        case 1:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_1;
    1658:	200a      	movs	r0, #10
    165a:	4770      	bx	lr
        }
        break;

        case 2:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_2;
    165c:	200b      	movs	r0, #11
        }
        break;
    165e:	4770      	bx	lr

        case 3:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_3;
    1660:	200c      	movs	r0, #12
        }
        break;
    1662:	4770      	bx	lr

        case 4:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_4;
    1664:	200d      	movs	r0, #13
        }
        break;
    1666:	4770      	bx	lr

        case 5:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_5;
    1668:	200e      	movs	r0, #14
        }
        break;
    166a:	4770      	bx	lr

        case 6:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_6;
    166c:	200f      	movs	r0, #15
        }
        break;
    166e:	4770      	bx	lr

        case 7:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_7;
    1670:	2010      	movs	r0, #16
        }
        break;
    1672:	4770      	bx	lr

        case 8:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_8;
    1674:	2011      	movs	r0, #17
        }
        break;
    1676:	4770      	bx	lr

        case 9:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_9;
    1678:	2012      	movs	r0, #18
        }
        break;
    167a:	4770      	bx	lr

        case 10:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_10;
    167c:	2013      	movs	r0, #19
        }
        break;
    167e:	4770      	bx	lr
    switch(sessionID)
    1680:	2000      	movs	r0, #0
        default:
        break;
    }
    
    return sessionCloseCmd;
}
    1682:	4770      	bx	lr

00001684 <validateCommonCommandResponse>:
{
    1684:	b508      	push	{r3, lr}
    if(0==memcmp(response,"OK",2))
    1686:	2202      	movs	r2, #2
    1688:	4903      	ldr	r1, [pc, #12]	; (1698 <validateCommonCommandResponse+0x14>)
    168a:	4b04      	ldr	r3, [pc, #16]	; (169c <validateCommonCommandResponse+0x18>)
    168c:	4798      	blx	r3
}
    168e:	fab0 f080 	clz	r0, r0
    1692:	0940      	lsrs	r0, r0, #5
    1694:	bd08      	pop	{r3, pc}
    1696:	bf00      	nop
    1698:	000077c4 	.word	0x000077c4
    169c:	00006bcb 	.word	0x00006bcb

000016a0 <MdmConnect_HttpConnectionInit>:
    gHttpConnectionState = MDM_HTTP_DISCONNECTED;
    16a0:	4b07      	ldr	r3, [pc, #28]	; (16c0 <MdmConnect_HttpConnectionInit+0x20>)
    16a2:	2200      	movs	r2, #0
    16a4:	701a      	strb	r2, [r3, #0]
    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    16a6:	705a      	strb	r2, [r3, #1]
    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    16a8:	709a      	strb	r2, [r3, #2]
    gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    16aa:	70da      	strb	r2, [r3, #3]
    gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    16ac:	711a      	strb	r2, [r3, #4]
    sessionIdCount = 5;
    16ae:	2105      	movs	r1, #5
    16b0:	7159      	strb	r1, [r3, #5]
    ConnectionResponse.atCmd = CMD_AT_MAX;
    16b2:	721a      	strb	r2, [r3, #8]
    ConnectionResponse.length = 0;
    16b4:	815a      	strh	r2, [r3, #10]
    ConnectionResponse.response = NULL;
    16b6:	60da      	str	r2, [r3, #12]
    currentSessionId = '0';
    16b8:	2230      	movs	r2, #48	; 0x30
    16ba:	741a      	strb	r2, [r3, #16]
    16bc:	4770      	bx	lr
    16be:	bf00      	nop
    16c0:	200002d8 	.word	0x200002d8

000016c4 <performForcedRebootOfModem>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
static void performForcedRebootOfModem(void)
{
    16c4:	b510      	push	{r4, lr}
	DEBUG_PRINT("Connection to the server is lost.....");
    16c6:	4805      	ldr	r0, [pc, #20]	; (16dc <performForcedRebootOfModem+0x18>)
    16c8:	4c05      	ldr	r4, [pc, #20]	; (16e0 <performForcedRebootOfModem+0x1c>)
    16ca:	47a0      	blx	r4
	DEBUG_PRINT("Trying to establish the connection to server...Please wait......\r\n");
    16cc:	4805      	ldr	r0, [pc, #20]	; (16e4 <performForcedRebootOfModem+0x20>)
    16ce:	47a0      	blx	r4

	/* Perform a physical modem restart */
	modemPowerStateInit();
    16d0:	4b05      	ldr	r3, [pc, #20]	; (16e8 <performForcedRebootOfModem+0x24>)
    16d2:	4798      	blx	r3

	/* Reset the modem connection States */
	MdmConnect_HttpConnectionInit();
    16d4:	4b05      	ldr	r3, [pc, #20]	; (16ec <performForcedRebootOfModem+0x28>)
    16d6:	4798      	blx	r3
    16d8:	bd10      	pop	{r4, pc}
    16da:	bf00      	nop
    16dc:	000088fc 	.word	0x000088fc
    16e0:	0000336d 	.word	0x0000336d
    16e4:	00008924 	.word	0x00008924
    16e8:	00002d55 	.word	0x00002d55
    16ec:	000016a1 	.word	0x000016a1

000016f0 <MdmCnct_ConnectInProgressSubStateMachine>:
{
    16f0:	b570      	push	{r4, r5, r6, lr}
    16f2:	b082      	sub	sp, #8
    switch (gHttpConnectionInProgressSubstate)
    16f4:	4b88      	ldr	r3, [pc, #544]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    16f6:	785b      	ldrb	r3, [r3, #1]
    16f8:	2b08      	cmp	r3, #8
    16fa:	f200 8093 	bhi.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
    16fe:	e8df f013 	tbh	[pc, r3, lsl #1]
    1702:	0009      	.short	0x0009
    1704:	013d008c 	.word	0x013d008c
    1708:	022f01c3 	.word	0x022f01c3
    170c:	033a02ce 	.word	0x033a02ce
    1710:	047c03a6 	.word	0x047c03a6
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1714:	4b80      	ldr	r3, [pc, #512]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    1716:	789b      	ldrb	r3, [r3, #2]
    1718:	2b00      	cmp	r3, #0
    171a:	d14d      	bne.n	17b8 <MdmCnct_ConnectInProgressSubStateMachine+0xc8>
                if(sessionIdCount > 0)
    171c:	4b7e      	ldr	r3, [pc, #504]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    171e:	795b      	ldrb	r3, [r3, #5]
    1720:	2b00      	cmp	r3, #0
    1722:	d03e      	beq.n	17a2 <MdmCnct_ConnectInProgressSubStateMachine+0xb2>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1724:	4b7d      	ldr	r3, [pc, #500]	; (191c <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
    1726:	6818      	ldr	r0, [r3, #0]
    1728:	4b7d      	ldr	r3, [pc, #500]	; (1920 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
    172a:	4798      	blx	r3
    172c:	2800      	cmp	r0, #0
    172e:	d134      	bne.n	179a <MdmCnct_ConnectInProgressSubStateMachine+0xaa>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1730:	2100      	movs	r1, #0
    1732:	4b7c      	ldr	r3, [pc, #496]	; (1924 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
    1734:	6818      	ldr	r0, [r3, #0]
    1736:	4b7c      	ldr	r3, [pc, #496]	; (1928 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
    1738:	4798      	blx	r3
    173a:	2801      	cmp	r0, #1
    173c:	d003      	beq.n	1746 <MdmCnct_ConnectInProgressSubStateMachine+0x56>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    173e:	487b      	ldr	r0, [pc, #492]	; (192c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    1740:	4b7b      	ldr	r3, [pc, #492]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1742:	4798      	blx	r3
    1744:	e06e      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1746:	2301      	movs	r3, #1
    1748:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
    174c:	4b72      	ldr	r3, [pc, #456]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    174e:	7958      	ldrb	r0, [r3, #5]
    1750:	4b78      	ldr	r3, [pc, #480]	; (1934 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
    1752:	4798      	blx	r3
    1754:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
    1758:	2300      	movs	r3, #0
    175a:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    175c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1760:	4669      	mov	r1, sp
    1762:	486e      	ldr	r0, [pc, #440]	; (191c <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
    1764:	6800      	ldr	r0, [r0, #0]
    1766:	4c74      	ldr	r4, [pc, #464]	; (1938 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
    1768:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
    176a:	2801      	cmp	r0, #1
    176c:	d007      	beq.n	177e <MdmCnct_ConnectInProgressSubStateMachine+0x8e>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    176e:	4873      	ldr	r0, [pc, #460]	; (193c <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
    1770:	4b6f      	ldr	r3, [pc, #444]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1772:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
    1774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1778:	4b71      	ldr	r3, [pc, #452]	; (1940 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
    177a:	4798      	blx	r3
    177c:	e052      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
    177e:	2300      	movs	r3, #0
    1780:	461a      	mov	r2, r3
    1782:	4619      	mov	r1, r3
    1784:	4867      	ldr	r0, [pc, #412]	; (1924 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
    1786:	6800      	ldr	r0, [r0, #0]
    1788:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    178a:	2201      	movs	r2, #1
    178c:	4b62      	ldr	r3, [pc, #392]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    178e:	709a      	strb	r2, [r3, #2]
                                vTaskDelay(TransmitDelayMs);
    1790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1794:	4b6a      	ldr	r3, [pc, #424]	; (1940 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
    1796:	4798      	blx	r3
    1798:	e044      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        DEBUG_PRINT("Transmit Queue is not empty");
    179a:	486a      	ldr	r0, [pc, #424]	; (1944 <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
    179c:	4b64      	ldr	r3, [pc, #400]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    179e:	4798      	blx	r3
    17a0:	e040      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("No More Active Connections to close");
    17a2:	4869      	ldr	r0, [pc, #420]	; (1948 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
    17a4:	4c62      	ldr	r4, [pc, #392]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    17a6:	47a0      	blx	r4
                    DEBUG_PRINT("\r\n");
    17a8:	4868      	ldr	r0, [pc, #416]	; (194c <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
    17aa:	47a0      	blx	r4
                    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
    17ac:	4b5a      	ldr	r3, [pc, #360]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    17ae:	2201      	movs	r2, #1
    17b0:	705a      	strb	r2, [r3, #1]
                    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    17b2:	2200      	movs	r2, #0
    17b4:	709a      	strb	r2, [r3, #2]
    17b6:	e035      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    17b8:	2b01      	cmp	r3, #1
    17ba:	d133      	bne.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    17bc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    17c0:	4963      	ldr	r1, [pc, #396]	; (1950 <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
    17c2:	4b64      	ldr	r3, [pc, #400]	; (1954 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
    17c4:	6818      	ldr	r0, [r3, #0]
    17c6:	4b64      	ldr	r3, [pc, #400]	; (1958 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
    17c8:	4798      	blx	r3
    17ca:	2801      	cmp	r0, #1
    17cc:	d12a      	bne.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
    17ce:	4b52      	ldr	r3, [pc, #328]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    17d0:	7a1d      	ldrb	r5, [r3, #8]
    17d2:	795c      	ldrb	r4, [r3, #5]
    17d4:	4620      	mov	r0, r4
    17d6:	4b57      	ldr	r3, [pc, #348]	; (1934 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
    17d8:	4798      	blx	r3
    17da:	4285      	cmp	r5, r0
    17dc:	d113      	bne.n	1806 <MdmCnct_ConnectInProgressSubStateMachine+0x116>
                        if(sessionIdCount > 0)
    17de:	b14c      	cbz	r4, 17f4 <MdmCnct_ConnectInProgressSubStateMachine+0x104>
                            sessionIdCount--;
    17e0:	4b4d      	ldr	r3, [pc, #308]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    17e2:	3c01      	subs	r4, #1
    17e4:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    17e6:	2200      	movs	r2, #0
    17e8:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    17ea:	4b4b      	ldr	r3, [pc, #300]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    17ec:	68d8      	ldr	r0, [r3, #12]
    17ee:	4b5b      	ldr	r3, [pc, #364]	; (195c <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
    17f0:	4798      	blx	r3
    17f2:	e017      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
    17f4:	4b48      	ldr	r3, [pc, #288]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    17f6:	2201      	movs	r2, #1
    17f8:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    17fa:	2200      	movs	r2, #0
    17fc:	709a      	strb	r2, [r3, #2]
                            DEBUG_PRINT("Closed All Active Connections");
    17fe:	4858      	ldr	r0, [pc, #352]	; (1960 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
    1800:	4b4b      	ldr	r3, [pc, #300]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1802:	4798      	blx	r3
    1804:	e7f1      	b.n	17ea <MdmCnct_ConnectInProgressSubStateMachine+0xfa>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1806:	4857      	ldr	r0, [pc, #348]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
    1808:	4b49      	ldr	r3, [pc, #292]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    180a:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    180c:	4b42      	ldr	r3, [pc, #264]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    180e:	2200      	movs	r2, #0
    1810:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1812:	68d8      	ldr	r0, [r3, #12]
    1814:	4b51      	ldr	r3, [pc, #324]	; (195c <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
    1816:	4798      	blx	r3
    1818:	e004      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    181a:	4b3f      	ldr	r3, [pc, #252]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    181c:	789b      	ldrb	r3, [r3, #2]
    181e:	b11b      	cbz	r3, 1828 <MdmCnct_ConnectInProgressSubStateMachine+0x138>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1820:	2b01      	cmp	r3, #1
    1822:	d03e      	beq.n	18a2 <MdmCnct_ConnectInProgressSubStateMachine+0x1b2>
}
    1824:	b002      	add	sp, #8
    1826:	bd70      	pop	{r4, r5, r6, pc}
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1828:	4b3c      	ldr	r3, [pc, #240]	; (191c <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
    182a:	6818      	ldr	r0, [r3, #0]
    182c:	4b3c      	ldr	r3, [pc, #240]	; (1920 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
    182e:	4798      	blx	r3
    1830:	2800      	cmp	r0, #0
    1832:	d132      	bne.n	189a <MdmCnct_ConnectInProgressSubStateMachine+0x1aa>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1834:	2100      	movs	r1, #0
    1836:	4b3b      	ldr	r3, [pc, #236]	; (1924 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
    1838:	6818      	ldr	r0, [r3, #0]
    183a:	4b3b      	ldr	r3, [pc, #236]	; (1928 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
    183c:	4798      	blx	r3
    183e:	2801      	cmp	r0, #1
    1840:	d003      	beq.n	184a <MdmCnct_ConnectInProgressSubStateMachine+0x15a>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1842:	483a      	ldr	r0, [pc, #232]	; (192c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    1844:	4b3a      	ldr	r3, [pc, #232]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1846:	4798      	blx	r3
    1848:	e7ec      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    184a:	2301      	movs	r3, #1
    184c:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
    1850:	231a      	movs	r3, #26
    1852:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1856:	2300      	movs	r3, #0
    1858:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    185a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    185e:	4669      	mov	r1, sp
    1860:	482e      	ldr	r0, [pc, #184]	; (191c <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
    1862:	6800      	ldr	r0, [r0, #0]
    1864:	4c34      	ldr	r4, [pc, #208]	; (1938 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
    1866:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1868:	2801      	cmp	r0, #1
    186a:	d007      	beq.n	187c <MdmCnct_ConnectInProgressSubStateMachine+0x18c>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    186c:	4833      	ldr	r0, [pc, #204]	; (193c <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
    186e:	4b30      	ldr	r3, [pc, #192]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1870:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1876:	4b32      	ldr	r3, [pc, #200]	; (1940 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
    1878:	4798      	blx	r3
    187a:	e7d3      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    187c:	2300      	movs	r3, #0
    187e:	461a      	mov	r2, r3
    1880:	4619      	mov	r1, r3
    1882:	4828      	ldr	r0, [pc, #160]	; (1924 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
    1884:	6800      	ldr	r0, [r0, #0]
    1886:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1888:	4b23      	ldr	r3, [pc, #140]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    188a:	2201      	movs	r2, #1
    188c:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
    188e:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
    1890:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1894:	4b2a      	ldr	r3, [pc, #168]	; (1940 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
    1896:	4798      	blx	r3
    1898:	e7c4      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    189a:	482a      	ldr	r0, [pc, #168]	; (1944 <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
    189c:	4b24      	ldr	r3, [pc, #144]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    189e:	4798      	blx	r3
    18a0:	e7c0      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    18a2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    18a6:	492a      	ldr	r1, [pc, #168]	; (1950 <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
    18a8:	4b2a      	ldr	r3, [pc, #168]	; (1954 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
    18aa:	6818      	ldr	r0, [r3, #0]
    18ac:	4b2a      	ldr	r3, [pc, #168]	; (1958 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
    18ae:	4798      	blx	r3
    18b0:	2801      	cmp	r0, #1
    18b2:	d1b7      	bne.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
    18b4:	4b18      	ldr	r3, [pc, #96]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    18b6:	7a1b      	ldrb	r3, [r3, #8]
    18b8:	2b1a      	cmp	r3, #26
    18ba:	d122      	bne.n	1902 <MdmCnct_ConnectInProgressSubStateMachine+0x212>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    18bc:	4b16      	ldr	r3, [pc, #88]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    18be:	68d8      	ldr	r0, [r3, #12]
    18c0:	4b29      	ldr	r3, [pc, #164]	; (1968 <MdmCnct_ConnectInProgressSubStateMachine+0x278>)
    18c2:	4798      	blx	r3
    18c4:	b190      	cbz	r0, 18ec <MdmCnct_ConnectInProgressSubStateMachine+0x1fc>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
    18c6:	4829      	ldr	r0, [pc, #164]	; (196c <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
    18c8:	4d19      	ldr	r5, [pc, #100]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    18ca:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    18cc:	4c12      	ldr	r4, [pc, #72]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    18ce:	8961      	ldrh	r1, [r4, #10]
    18d0:	68e0      	ldr	r0, [r4, #12]
    18d2:	4b27      	ldr	r3, [pc, #156]	; (1970 <MdmCnct_ConnectInProgressSubStateMachine+0x280>)
    18d4:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    18d6:	481d      	ldr	r0, [pc, #116]	; (194c <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
    18d8:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    18da:	2300      	movs	r3, #0
    18dc:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
    18de:	2302      	movs	r3, #2
    18e0:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
    18e2:	4b0d      	ldr	r3, [pc, #52]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    18e4:	68d8      	ldr	r0, [r3, #12]
    18e6:	4b1d      	ldr	r3, [pc, #116]	; (195c <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
    18e8:	4798      	blx	r3
    18ea:	e79b      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            DEBUG_PRINT("Expected Response Not Received...");
    18ec:	4821      	ldr	r0, [pc, #132]	; (1974 <MdmCnct_ConnectInProgressSubStateMachine+0x284>)
    18ee:	4c10      	ldr	r4, [pc, #64]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    18f0:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    18f2:	4816      	ldr	r0, [pc, #88]	; (194c <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
    18f4:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    18f6:	2200      	movs	r2, #0
    18f8:	4b07      	ldr	r3, [pc, #28]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    18fa:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    18fc:	4b1e      	ldr	r3, [pc, #120]	; (1978 <MdmCnct_ConnectInProgressSubStateMachine+0x288>)
    18fe:	4798      	blx	r3
    1900:	e7ef      	b.n	18e2 <MdmCnct_ConnectInProgressSubStateMachine+0x1f2>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1902:	4818      	ldr	r0, [pc, #96]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
    1904:	4b0a      	ldr	r3, [pc, #40]	; (1930 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1906:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1908:	4b03      	ldr	r3, [pc, #12]	; (1918 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    190a:	2200      	movs	r2, #0
    190c:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    190e:	68d8      	ldr	r0, [r3, #12]
    1910:	4b12      	ldr	r3, [pc, #72]	; (195c <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
    1912:	4798      	blx	r3
    1914:	e786      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
    1916:	bf00      	nop
    1918:	200002d8 	.word	0x200002d8
    191c:	20003568 	.word	0x20003568
    1920:	00005a45 	.word	0x00005a45
    1924:	2000357c 	.word	0x2000357c
    1928:	00005865 	.word	0x00005865
    192c:	0000784c 	.word	0x0000784c
    1930:	0000336d 	.word	0x0000336d
    1934:	00001645 	.word	0x00001645
    1938:	000053cd 	.word	0x000053cd
    193c:	00008968 	.word	0x00008968
    1940:	0000605d 	.word	0x0000605d
    1944:	00007878 	.word	0x00007878
    1948:	0000899c 	.word	0x0000899c
    194c:	00009368 	.word	0x00009368
    1950:	200002e0 	.word	0x200002e0
    1954:	20003544 	.word	0x20003544
    1958:	000056dd 	.word	0x000056dd
    195c:	000050a5 	.word	0x000050a5
    1960:	000089c0 	.word	0x000089c0
    1964:	000089e0 	.word	0x000089e0
    1968:	00001685 	.word	0x00001685
    196c:	00008a14 	.word	0x00008a14
    1970:	00003329 	.word	0x00003329
    1974:	00008a34 	.word	0x00008a34
    1978:	000016c5 	.word	0x000016c5
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    197c:	4b90      	ldr	r3, [pc, #576]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    197e:	789b      	ldrb	r3, [r3, #2]
    1980:	2b00      	cmp	r3, #0
    1982:	d02e      	beq.n	19e2 <MdmCnct_ConnectInProgressSubStateMachine+0x2f2>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1984:	2b01      	cmp	r3, #1
    1986:	f47f af4d 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    198a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    198e:	498d      	ldr	r1, [pc, #564]	; (1bc4 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
    1990:	4b8d      	ldr	r3, [pc, #564]	; (1bc8 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
    1992:	6818      	ldr	r0, [r3, #0]
    1994:	4b8d      	ldr	r3, [pc, #564]	; (1bcc <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
    1996:	4798      	blx	r3
    1998:	2801      	cmp	r0, #1
    199a:	f47f af43 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
    199e:	4b88      	ldr	r3, [pc, #544]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    19a0:	7a1b      	ldrb	r3, [r3, #8]
    19a2:	2b1b      	cmp	r3, #27
    19a4:	d166      	bne.n	1a74 <MdmCnct_ConnectInProgressSubStateMachine+0x384>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    19a6:	4b86      	ldr	r3, [pc, #536]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    19a8:	68d8      	ldr	r0, [r3, #12]
    19aa:	4b89      	ldr	r3, [pc, #548]	; (1bd0 <MdmCnct_ConnectInProgressSubStateMachine+0x4e0>)
    19ac:	4798      	blx	r3
    19ae:	2800      	cmp	r0, #0
    19b0:	d055      	beq.n	1a5e <MdmCnct_ConnectInProgressSubStateMachine+0x36e>
                            DEBUG_PRINT("Detached the PDP PS");
    19b2:	4888      	ldr	r0, [pc, #544]	; (1bd4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    19b4:	4d88      	ldr	r5, [pc, #544]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    19b6:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    19b8:	4c81      	ldr	r4, [pc, #516]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    19ba:	8961      	ldrh	r1, [r4, #10]
    19bc:	68e0      	ldr	r0, [r4, #12]
    19be:	4b87      	ldr	r3, [pc, #540]	; (1bdc <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
    19c0:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    19c2:	4e87      	ldr	r6, [pc, #540]	; (1be0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
    19c4:	4630      	mov	r0, r6
    19c6:	47a8      	blx	r5
                            DEBUG_PRINT("Deleted all of the previous connection configurations");
    19c8:	4886      	ldr	r0, [pc, #536]	; (1be4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
    19ca:	47a8      	blx	r5
                            DEBUG_PRINT("\r\n");
    19cc:	4630      	mov	r0, r6
    19ce:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    19d0:	2300      	movs	r3, #0
    19d2:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
    19d4:	2303      	movs	r3, #3
    19d6:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
    19d8:	4b79      	ldr	r3, [pc, #484]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    19da:	68d8      	ldr	r0, [r3, #12]
    19dc:	4b82      	ldr	r3, [pc, #520]	; (1be8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    19de:	4798      	blx	r3
    19e0:	e720      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    19e2:	4b82      	ldr	r3, [pc, #520]	; (1bec <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    19e4:	6818      	ldr	r0, [r3, #0]
    19e6:	4b82      	ldr	r3, [pc, #520]	; (1bf0 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    19e8:	4798      	blx	r3
    19ea:	2800      	cmp	r0, #0
    19ec:	d133      	bne.n	1a56 <MdmCnct_ConnectInProgressSubStateMachine+0x366>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    19ee:	2100      	movs	r1, #0
    19f0:	4b80      	ldr	r3, [pc, #512]	; (1bf4 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    19f2:	6818      	ldr	r0, [r3, #0]
    19f4:	4b80      	ldr	r3, [pc, #512]	; (1bf8 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
    19f6:	4798      	blx	r3
    19f8:	2801      	cmp	r0, #1
    19fa:	d003      	beq.n	1a04 <MdmCnct_ConnectInProgressSubStateMachine+0x314>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    19fc:	487f      	ldr	r0, [pc, #508]	; (1bfc <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
    19fe:	4b76      	ldr	r3, [pc, #472]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1a00:	4798      	blx	r3
    1a02:	e70f      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1a04:	2301      	movs	r3, #1
    1a06:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
    1a0a:	231b      	movs	r3, #27
    1a0c:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1a10:	2300      	movs	r3, #0
    1a12:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1a14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1a18:	4669      	mov	r1, sp
    1a1a:	4874      	ldr	r0, [pc, #464]	; (1bec <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1a1c:	6800      	ldr	r0, [r0, #0]
    1a1e:	4c78      	ldr	r4, [pc, #480]	; (1c00 <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
    1a20:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1a22:	2801      	cmp	r0, #1
    1a24:	d007      	beq.n	1a36 <MdmCnct_ConnectInProgressSubStateMachine+0x346>
                            DEBUG_PRINT("Failed to sent the PS Detach request to Tx Task");
    1a26:	4877      	ldr	r0, [pc, #476]	; (1c04 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
    1a28:	4b6b      	ldr	r3, [pc, #428]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1a2a:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1a30:	4b75      	ldr	r3, [pc, #468]	; (1c08 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    1a32:	4798      	blx	r3
    1a34:	e6f6      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1a36:	2300      	movs	r3, #0
    1a38:	461a      	mov	r2, r3
    1a3a:	4619      	mov	r1, r3
    1a3c:	486d      	ldr	r0, [pc, #436]	; (1bf4 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1a3e:	6800      	ldr	r0, [r0, #0]
    1a40:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1a42:	4b5f      	ldr	r3, [pc, #380]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1a44:	2201      	movs	r2, #1
    1a46:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
    1a48:	2202      	movs	r2, #2
    1a4a:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
    1a4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1a50:	4b6d      	ldr	r3, [pc, #436]	; (1c08 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    1a52:	4798      	blx	r3
    1a54:	e6e6      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1a56:	486d      	ldr	r0, [pc, #436]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
    1a58:	4b5f      	ldr	r3, [pc, #380]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1a5a:	4798      	blx	r3
    1a5c:	e6e2      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            DEBUG_PRINT("Expected Response Not Received...");
    1a5e:	486c      	ldr	r0, [pc, #432]	; (1c10 <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
    1a60:	4c5d      	ldr	r4, [pc, #372]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1a62:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1a64:	485e      	ldr	r0, [pc, #376]	; (1be0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
    1a66:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1a68:	2200      	movs	r2, #0
    1a6a:	4b55      	ldr	r3, [pc, #340]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1a6c:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    1a6e:	4b69      	ldr	r3, [pc, #420]	; (1c14 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
    1a70:	4798      	blx	r3
    1a72:	e7b1      	b.n	19d8 <MdmCnct_ConnectInProgressSubStateMachine+0x2e8>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1a74:	4868      	ldr	r0, [pc, #416]	; (1c18 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
    1a76:	4b58      	ldr	r3, [pc, #352]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1a78:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1a7a:	4b51      	ldr	r3, [pc, #324]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1a7c:	2200      	movs	r2, #0
    1a7e:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1a80:	68d8      	ldr	r0, [r3, #12]
    1a82:	4b59      	ldr	r3, [pc, #356]	; (1be8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    1a84:	4798      	blx	r3
    1a86:	e6cd      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1a88:	4b4d      	ldr	r3, [pc, #308]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1a8a:	789b      	ldrb	r3, [r3, #2]
    1a8c:	b1d3      	cbz	r3, 1ac4 <MdmCnct_ConnectInProgressSubStateMachine+0x3d4>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1a8e:	2b01      	cmp	r3, #1
    1a90:	f47f aec8 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1a94:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1a98:	494a      	ldr	r1, [pc, #296]	; (1bc4 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
    1a9a:	4b4b      	ldr	r3, [pc, #300]	; (1bc8 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
    1a9c:	6818      	ldr	r0, [r3, #0]
    1a9e:	4b4b      	ldr	r3, [pc, #300]	; (1bcc <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
    1aa0:	4798      	blx	r3
    1aa2:	2801      	cmp	r0, #1
    1aa4:	f47f aebe 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KPATTERN)
    1aa8:	4b45      	ldr	r3, [pc, #276]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1aaa:	7a1b      	ldrb	r3, [r3, #8]
    1aac:	2b14      	cmp	r3, #20
    1aae:	d045      	beq.n	1b3c <MdmCnct_ConnectInProgressSubStateMachine+0x44c>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1ab0:	4859      	ldr	r0, [pc, #356]	; (1c18 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
    1ab2:	4b49      	ldr	r3, [pc, #292]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1ab4:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1ab6:	4b42      	ldr	r3, [pc, #264]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1ab8:	2200      	movs	r2, #0
    1aba:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1abc:	68d8      	ldr	r0, [r3, #12]
    1abe:	4b4a      	ldr	r3, [pc, #296]	; (1be8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    1ac0:	4798      	blx	r3
    1ac2:	e6af      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1ac4:	4b49      	ldr	r3, [pc, #292]	; (1bec <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1ac6:	6818      	ldr	r0, [r3, #0]
    1ac8:	4b49      	ldr	r3, [pc, #292]	; (1bf0 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    1aca:	4798      	blx	r3
    1acc:	2800      	cmp	r0, #0
    1ace:	d131      	bne.n	1b34 <MdmCnct_ConnectInProgressSubStateMachine+0x444>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1ad0:	2100      	movs	r1, #0
    1ad2:	4b48      	ldr	r3, [pc, #288]	; (1bf4 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1ad4:	6818      	ldr	r0, [r3, #0]
    1ad6:	4b48      	ldr	r3, [pc, #288]	; (1bf8 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
    1ad8:	4798      	blx	r3
    1ada:	2801      	cmp	r0, #1
    1adc:	d003      	beq.n	1ae6 <MdmCnct_ConnectInProgressSubStateMachine+0x3f6>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1ade:	4847      	ldr	r0, [pc, #284]	; (1bfc <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
    1ae0:	4b3d      	ldr	r3, [pc, #244]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1ae2:	4798      	blx	r3
    1ae4:	e69e      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1ae6:	2301      	movs	r3, #1
    1ae8:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KPATTERN;
    1aec:	2314      	movs	r3, #20
    1aee:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1af2:	2300      	movs	r3, #0
    1af4:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1af6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1afa:	4669      	mov	r1, sp
    1afc:	483b      	ldr	r0, [pc, #236]	; (1bec <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1afe:	6800      	ldr	r0, [r0, #0]
    1b00:	4c3f      	ldr	r4, [pc, #252]	; (1c00 <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
    1b02:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1b04:	2801      	cmp	r0, #1
    1b06:	d007      	beq.n	1b18 <MdmCnct_ConnectInProgressSubStateMachine+0x428>
                            DEBUG_PRINT("Failed to sent the EOF pattern to Tx Task");
    1b08:	4844      	ldr	r0, [pc, #272]	; (1c1c <MdmCnct_ConnectInProgressSubStateMachine+0x52c>)
    1b0a:	4b33      	ldr	r3, [pc, #204]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1b0c:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1b0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1b12:	4b3d      	ldr	r3, [pc, #244]	; (1c08 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    1b14:	4798      	blx	r3
    1b16:	e685      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1b18:	2300      	movs	r3, #0
    1b1a:	461a      	mov	r2, r3
    1b1c:	4619      	mov	r1, r3
    1b1e:	4835      	ldr	r0, [pc, #212]	; (1bf4 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1b20:	6800      	ldr	r0, [r0, #0]
    1b22:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1b24:	2201      	movs	r2, #1
    1b26:	4b26      	ldr	r3, [pc, #152]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1b28:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1b2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1b2e:	4b36      	ldr	r3, [pc, #216]	; (1c08 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    1b30:	4798      	blx	r3
    1b32:	e677      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1b34:	4835      	ldr	r0, [pc, #212]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
    1b36:	4b28      	ldr	r3, [pc, #160]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1b38:	4798      	blx	r3
    1b3a:	e673      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        DEBUG_PRINT("EOF Pattern configured");
    1b3c:	4838      	ldr	r0, [pc, #224]	; (1c20 <MdmCnct_ConnectInProgressSubStateMachine+0x530>)
    1b3e:	4d26      	ldr	r5, [pc, #152]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1b40:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1b42:	4c1f      	ldr	r4, [pc, #124]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1b44:	8961      	ldrh	r1, [r4, #10]
    1b46:	68e0      	ldr	r0, [r4, #12]
    1b48:	4b24      	ldr	r3, [pc, #144]	; (1bdc <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
    1b4a:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1b4c:	4824      	ldr	r0, [pc, #144]	; (1be0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
    1b4e:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_RETRIEVE_APN;
    1b50:	2304      	movs	r3, #4
    1b52:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1b54:	2300      	movs	r3, #0
    1b56:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1b58:	68e0      	ldr	r0, [r4, #12]
    1b5a:	4b23      	ldr	r3, [pc, #140]	; (1be8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    1b5c:	4798      	blx	r3
    1b5e:	e661      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1b60:	4b17      	ldr	r3, [pc, #92]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1b62:	789b      	ldrb	r3, [r3, #2]
    1b64:	b1d3      	cbz	r3, 1b9c <MdmCnct_ConnectInProgressSubStateMachine+0x4ac>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1b66:	2b01      	cmp	r3, #1
    1b68:	f47f ae5c 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1b6c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1b70:	4914      	ldr	r1, [pc, #80]	; (1bc4 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
    1b72:	4b15      	ldr	r3, [pc, #84]	; (1bc8 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
    1b74:	6818      	ldr	r0, [r3, #0]
    1b76:	4b15      	ldr	r3, [pc, #84]	; (1bcc <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
    1b78:	4798      	blx	r3
    1b7a:	2801      	cmp	r0, #1
    1b7c:	f47f ae52 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_CGDCONT)
    1b80:	4b0f      	ldr	r3, [pc, #60]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1b82:	7a1b      	ldrb	r3, [r3, #8]
    1b84:	2b1c      	cmp	r3, #28
    1b86:	d078      	beq.n	1c7a <MdmCnct_ConnectInProgressSubStateMachine+0x58a>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1b88:	4823      	ldr	r0, [pc, #140]	; (1c18 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
    1b8a:	4b13      	ldr	r3, [pc, #76]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1b8c:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1b8e:	4b0c      	ldr	r3, [pc, #48]	; (1bc0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1b90:	2200      	movs	r2, #0
    1b92:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1b94:	68d8      	ldr	r0, [r3, #12]
    1b96:	4b14      	ldr	r3, [pc, #80]	; (1be8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    1b98:	4798      	blx	r3
    1b9a:	e643      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1b9c:	4b13      	ldr	r3, [pc, #76]	; (1bec <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1b9e:	6818      	ldr	r0, [r3, #0]
    1ba0:	4b13      	ldr	r3, [pc, #76]	; (1bf0 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    1ba2:	4798      	blx	r3
    1ba4:	2800      	cmp	r0, #0
    1ba6:	d164      	bne.n	1c72 <MdmCnct_ConnectInProgressSubStateMachine+0x582>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1ba8:	2100      	movs	r1, #0
    1baa:	4b12      	ldr	r3, [pc, #72]	; (1bf4 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1bac:	6818      	ldr	r0, [r3, #0]
    1bae:	4b12      	ldr	r3, [pc, #72]	; (1bf8 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
    1bb0:	4798      	blx	r3
    1bb2:	2801      	cmp	r0, #1
    1bb4:	d036      	beq.n	1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x534>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1bb6:	4811      	ldr	r0, [pc, #68]	; (1bfc <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
    1bb8:	4b07      	ldr	r3, [pc, #28]	; (1bd8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1bba:	4798      	blx	r3
    1bbc:	e632      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
    1bbe:	bf00      	nop
    1bc0:	200002d8 	.word	0x200002d8
    1bc4:	200002e0 	.word	0x200002e0
    1bc8:	20003544 	.word	0x20003544
    1bcc:	000056dd 	.word	0x000056dd
    1bd0:	00001685 	.word	0x00001685
    1bd4:	00008a88 	.word	0x00008a88
    1bd8:	0000336d 	.word	0x0000336d
    1bdc:	00003329 	.word	0x00003329
    1be0:	00009368 	.word	0x00009368
    1be4:	00008a9c 	.word	0x00008a9c
    1be8:	000050a5 	.word	0x000050a5
    1bec:	20003568 	.word	0x20003568
    1bf0:	00005a45 	.word	0x00005a45
    1bf4:	2000357c 	.word	0x2000357c
    1bf8:	00005865 	.word	0x00005865
    1bfc:	0000784c 	.word	0x0000784c
    1c00:	000053cd 	.word	0x000053cd
    1c04:	00008a58 	.word	0x00008a58
    1c08:	0000605d 	.word	0x0000605d
    1c0c:	00007878 	.word	0x00007878
    1c10:	00008a34 	.word	0x00008a34
    1c14:	000016c5 	.word	0x000016c5
    1c18:	000089e0 	.word	0x000089e0
    1c1c:	00008ad4 	.word	0x00008ad4
    1c20:	00008b00 	.word	0x00008b00
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1c24:	2301      	movs	r3, #1
    1c26:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGDCONT;
    1c2a:	231c      	movs	r3, #28
    1c2c:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1c30:	2300      	movs	r3, #0
    1c32:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1c34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1c38:	4669      	mov	r1, sp
    1c3a:	4894      	ldr	r0, [pc, #592]	; (1e8c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1c3c:	6800      	ldr	r0, [r0, #0]
    1c3e:	4c94      	ldr	r4, [pc, #592]	; (1e90 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1c40:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1c42:	2801      	cmp	r0, #1
    1c44:	d007      	beq.n	1c56 <MdmCnct_ConnectInProgressSubStateMachine+0x566>
                            DEBUG_PRINT("Failed to sent the retrieve APN command to Tx Task");
    1c46:	4893      	ldr	r0, [pc, #588]	; (1e94 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1c48:	4b93      	ldr	r3, [pc, #588]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1c4a:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1c50:	4b92      	ldr	r3, [pc, #584]	; (1e9c <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1c52:	4798      	blx	r3
    1c54:	e5e6      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1c56:	2300      	movs	r3, #0
    1c58:	461a      	mov	r2, r3
    1c5a:	4619      	mov	r1, r3
    1c5c:	4890      	ldr	r0, [pc, #576]	; (1ea0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1c5e:	6800      	ldr	r0, [r0, #0]
    1c60:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1c62:	2201      	movs	r2, #1
    1c64:	4b8f      	ldr	r3, [pc, #572]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1c66:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1c68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1c6c:	4b8b      	ldr	r3, [pc, #556]	; (1e9c <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1c6e:	4798      	blx	r3
    1c70:	e5d8      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1c72:	488d      	ldr	r0, [pc, #564]	; (1ea8 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
    1c74:	4b88      	ldr	r3, [pc, #544]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1c76:	4798      	blx	r3
    1c78:	e5d4      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        DEBUG_PRINT("Retrieved APN string.");
    1c7a:	488c      	ldr	r0, [pc, #560]	; (1eac <MdmCnct_ConnectInProgressSubStateMachine+0x7bc>)
    1c7c:	4d86      	ldr	r5, [pc, #536]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1c7e:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1c80:	4c88      	ldr	r4, [pc, #544]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1c82:	8961      	ldrh	r1, [r4, #10]
    1c84:	68e0      	ldr	r0, [r4, #12]
    1c86:	4b8a      	ldr	r3, [pc, #552]	; (1eb0 <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1c88:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1c8a:	488a      	ldr	r0, [pc, #552]	; (1eb4 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    1c8c:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_ACCESS_POINT;
    1c8e:	2305      	movs	r3, #5
    1c90:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1c92:	2300      	movs	r3, #0
    1c94:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1c96:	68e0      	ldr	r0, [r4, #12]
    1c98:	4b87      	ldr	r3, [pc, #540]	; (1eb8 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1c9a:	4798      	blx	r3
    1c9c:	e5c2      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1c9e:	4b81      	ldr	r3, [pc, #516]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1ca0:	789b      	ldrb	r3, [r3, #2]
    1ca2:	b1d3      	cbz	r3, 1cda <MdmCnct_ConnectInProgressSubStateMachine+0x5ea>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1ca4:	2b01      	cmp	r3, #1
    1ca6:	f47f adbd 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1caa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1cae:	4983      	ldr	r1, [pc, #524]	; (1ebc <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    1cb0:	4b83      	ldr	r3, [pc, #524]	; (1ec0 <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    1cb2:	6818      	ldr	r0, [r3, #0]
    1cb4:	4b83      	ldr	r3, [pc, #524]	; (1ec4 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    1cb6:	4798      	blx	r3
    1cb8:	2801      	cmp	r0, #1
    1cba:	f47f adb3 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXCFG)
    1cbe:	4b79      	ldr	r3, [pc, #484]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1cc0:	7a1b      	ldrb	r3, [r3, #8]
    1cc2:	2b15      	cmp	r3, #21
    1cc4:	d045      	beq.n	1d52 <MdmCnct_ConnectInProgressSubStateMachine+0x662>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1cc6:	4880      	ldr	r0, [pc, #512]	; (1ec8 <MdmCnct_ConnectInProgressSubStateMachine+0x7d8>)
    1cc8:	4b73      	ldr	r3, [pc, #460]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1cca:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1ccc:	4b75      	ldr	r3, [pc, #468]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1cce:	2200      	movs	r2, #0
    1cd0:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1cd2:	68d8      	ldr	r0, [r3, #12]
    1cd4:	4b78      	ldr	r3, [pc, #480]	; (1eb8 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1cd6:	4798      	blx	r3
    1cd8:	e5a4      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1cda:	4b6c      	ldr	r3, [pc, #432]	; (1e8c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1cdc:	6818      	ldr	r0, [r3, #0]
    1cde:	4b7b      	ldr	r3, [pc, #492]	; (1ecc <MdmCnct_ConnectInProgressSubStateMachine+0x7dc>)
    1ce0:	4798      	blx	r3
    1ce2:	2800      	cmp	r0, #0
    1ce4:	d131      	bne.n	1d4a <MdmCnct_ConnectInProgressSubStateMachine+0x65a>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1ce6:	2100      	movs	r1, #0
    1ce8:	4b6d      	ldr	r3, [pc, #436]	; (1ea0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1cea:	6818      	ldr	r0, [r3, #0]
    1cec:	4b78      	ldr	r3, [pc, #480]	; (1ed0 <MdmCnct_ConnectInProgressSubStateMachine+0x7e0>)
    1cee:	4798      	blx	r3
    1cf0:	2801      	cmp	r0, #1
    1cf2:	d003      	beq.n	1cfc <MdmCnct_ConnectInProgressSubStateMachine+0x60c>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1cf4:	4877      	ldr	r0, [pc, #476]	; (1ed4 <MdmCnct_ConnectInProgressSubStateMachine+0x7e4>)
    1cf6:	4b68      	ldr	r3, [pc, #416]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1cf8:	4798      	blx	r3
    1cfa:	e593      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1cfc:	2301      	movs	r3, #1
    1cfe:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXCFG;
    1d02:	2315      	movs	r3, #21
    1d04:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1d08:	2300      	movs	r3, #0
    1d0a:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1d0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1d10:	4669      	mov	r1, sp
    1d12:	485e      	ldr	r0, [pc, #376]	; (1e8c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1d14:	6800      	ldr	r0, [r0, #0]
    1d16:	4c5e      	ldr	r4, [pc, #376]	; (1e90 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1d18:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1d1a:	2801      	cmp	r0, #1
    1d1c:	d007      	beq.n	1d2e <MdmCnct_ConnectInProgressSubStateMachine+0x63e>
                            DEBUG_PRINT("Failed to sent access point cmd to Tx Task");
    1d1e:	486e      	ldr	r0, [pc, #440]	; (1ed8 <MdmCnct_ConnectInProgressSubStateMachine+0x7e8>)
    1d20:	4b5d      	ldr	r3, [pc, #372]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1d22:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1d28:	4b5c      	ldr	r3, [pc, #368]	; (1e9c <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1d2a:	4798      	blx	r3
    1d2c:	e57a      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1d2e:	2300      	movs	r3, #0
    1d30:	461a      	mov	r2, r3
    1d32:	4619      	mov	r1, r3
    1d34:	485a      	ldr	r0, [pc, #360]	; (1ea0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1d36:	6800      	ldr	r0, [r0, #0]
    1d38:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1d3a:	2201      	movs	r2, #1
    1d3c:	4b59      	ldr	r3, [pc, #356]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1d3e:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1d40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1d44:	4b55      	ldr	r3, [pc, #340]	; (1e9c <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1d46:	4798      	blx	r3
    1d48:	e56c      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1d4a:	4857      	ldr	r0, [pc, #348]	; (1ea8 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
    1d4c:	4b52      	ldr	r3, [pc, #328]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1d4e:	4798      	blx	r3
    1d50:	e568      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        DEBUG_PRINT("Access Point configured");
    1d52:	4862      	ldr	r0, [pc, #392]	; (1edc <MdmCnct_ConnectInProgressSubStateMachine+0x7ec>)
    1d54:	4d50      	ldr	r5, [pc, #320]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1d56:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1d58:	4c52      	ldr	r4, [pc, #328]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1d5a:	8961      	ldrh	r1, [r4, #10]
    1d5c:	68e0      	ldr	r0, [r4, #12]
    1d5e:	4b54      	ldr	r3, [pc, #336]	; (1eb0 <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1d60:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1d62:	4854      	ldr	r0, [pc, #336]	; (1eb4 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    1d64:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_CONNECT_TIMERS;
    1d66:	2306      	movs	r3, #6
    1d68:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1d6a:	2300      	movs	r3, #0
    1d6c:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1d6e:	68e0      	ldr	r0, [r4, #12]
    1d70:	4b51      	ldr	r3, [pc, #324]	; (1eb8 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1d72:	4798      	blx	r3
    1d74:	e556      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1d76:	4b4b      	ldr	r3, [pc, #300]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1d78:	789b      	ldrb	r3, [r3, #2]
    1d7a:	b1d3      	cbz	r3, 1db2 <MdmCnct_ConnectInProgressSubStateMachine+0x6c2>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1d7c:	2b01      	cmp	r3, #1
    1d7e:	f47f ad51 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1d82:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1d86:	494d      	ldr	r1, [pc, #308]	; (1ebc <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    1d88:	4b4d      	ldr	r3, [pc, #308]	; (1ec0 <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    1d8a:	6818      	ldr	r0, [r3, #0]
    1d8c:	4b4d      	ldr	r3, [pc, #308]	; (1ec4 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    1d8e:	4798      	blx	r3
    1d90:	2801      	cmp	r0, #1
    1d92:	f47f ad47 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXTIMER)
    1d96:	4b43      	ldr	r3, [pc, #268]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1d98:	7a1b      	ldrb	r3, [r3, #8]
    1d9a:	2b16      	cmp	r3, #22
    1d9c:	d045      	beq.n	1e2a <MdmCnct_ConnectInProgressSubStateMachine+0x73a>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1d9e:	484a      	ldr	r0, [pc, #296]	; (1ec8 <MdmCnct_ConnectInProgressSubStateMachine+0x7d8>)
    1da0:	4b3d      	ldr	r3, [pc, #244]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1da2:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1da4:	4b3f      	ldr	r3, [pc, #252]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1da6:	2200      	movs	r2, #0
    1da8:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1daa:	68d8      	ldr	r0, [r3, #12]
    1dac:	4b42      	ldr	r3, [pc, #264]	; (1eb8 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1dae:	4798      	blx	r3
    1db0:	e538      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1db2:	4b36      	ldr	r3, [pc, #216]	; (1e8c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1db4:	6818      	ldr	r0, [r3, #0]
    1db6:	4b45      	ldr	r3, [pc, #276]	; (1ecc <MdmCnct_ConnectInProgressSubStateMachine+0x7dc>)
    1db8:	4798      	blx	r3
    1dba:	2800      	cmp	r0, #0
    1dbc:	d131      	bne.n	1e22 <MdmCnct_ConnectInProgressSubStateMachine+0x732>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1dbe:	2100      	movs	r1, #0
    1dc0:	4b37      	ldr	r3, [pc, #220]	; (1ea0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1dc2:	6818      	ldr	r0, [r3, #0]
    1dc4:	4b42      	ldr	r3, [pc, #264]	; (1ed0 <MdmCnct_ConnectInProgressSubStateMachine+0x7e0>)
    1dc6:	4798      	blx	r3
    1dc8:	2801      	cmp	r0, #1
    1dca:	d003      	beq.n	1dd4 <MdmCnct_ConnectInProgressSubStateMachine+0x6e4>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1dcc:	4841      	ldr	r0, [pc, #260]	; (1ed4 <MdmCnct_ConnectInProgressSubStateMachine+0x7e4>)
    1dce:	4b32      	ldr	r3, [pc, #200]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1dd0:	4798      	blx	r3
    1dd2:	e527      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1dd4:	2301      	movs	r3, #1
    1dd6:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXTIMER;
    1dda:	2316      	movs	r3, #22
    1ddc:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1de0:	2300      	movs	r3, #0
    1de2:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1de4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1de8:	4669      	mov	r1, sp
    1dea:	4828      	ldr	r0, [pc, #160]	; (1e8c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1dec:	6800      	ldr	r0, [r0, #0]
    1dee:	4c28      	ldr	r4, [pc, #160]	; (1e90 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1df0:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1df2:	2801      	cmp	r0, #1
    1df4:	d007      	beq.n	1e06 <MdmCnct_ConnectInProgressSubStateMachine+0x716>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    1df6:	483a      	ldr	r0, [pc, #232]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7f0>)
    1df8:	4b27      	ldr	r3, [pc, #156]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1dfa:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1e00:	4b26      	ldr	r3, [pc, #152]	; (1e9c <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1e02:	4798      	blx	r3
    1e04:	e50e      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1e06:	2300      	movs	r3, #0
    1e08:	461a      	mov	r2, r3
    1e0a:	4619      	mov	r1, r3
    1e0c:	4824      	ldr	r0, [pc, #144]	; (1ea0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1e0e:	6800      	ldr	r0, [r0, #0]
    1e10:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1e12:	2201      	movs	r2, #1
    1e14:	4b23      	ldr	r3, [pc, #140]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1e16:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1e1c:	4b1f      	ldr	r3, [pc, #124]	; (1e9c <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1e1e:	4798      	blx	r3
    1e20:	e500      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1e22:	4821      	ldr	r0, [pc, #132]	; (1ea8 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
    1e24:	4b1c      	ldr	r3, [pc, #112]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1e26:	4798      	blx	r3
    1e28:	e4fc      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        DEBUG_PRINT("Connection Timers configured");
    1e2a:	482e      	ldr	r0, [pc, #184]	; (1ee4 <MdmCnct_ConnectInProgressSubStateMachine+0x7f4>)
    1e2c:	4d1a      	ldr	r5, [pc, #104]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1e2e:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1e30:	4c1c      	ldr	r4, [pc, #112]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1e32:	8961      	ldrh	r1, [r4, #10]
    1e34:	68e0      	ldr	r0, [r4, #12]
    1e36:	4b1e      	ldr	r3, [pc, #120]	; (1eb0 <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1e38:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1e3a:	481e      	ldr	r0, [pc, #120]	; (1eb4 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    1e3c:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_SERVER_ADDRESS;
    1e3e:	2307      	movs	r3, #7
    1e40:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1e42:	2300      	movs	r3, #0
    1e44:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1e46:	68e0      	ldr	r0, [r4, #12]
    1e48:	4b1b      	ldr	r3, [pc, #108]	; (1eb8 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1e4a:	4798      	blx	r3
    1e4c:	e4ea      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1e4e:	4b15      	ldr	r3, [pc, #84]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1e50:	789b      	ldrb	r3, [r3, #2]
    1e52:	2b00      	cmp	r3, #0
    1e54:	d048      	beq.n	1ee8 <MdmCnct_ConnectInProgressSubStateMachine+0x7f8>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1e56:	2b01      	cmp	r3, #1
    1e58:	f47f ace4 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1e5c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1e60:	4916      	ldr	r1, [pc, #88]	; (1ebc <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    1e62:	4b17      	ldr	r3, [pc, #92]	; (1ec0 <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    1e64:	6818      	ldr	r0, [r3, #0]
    1e66:	4b17      	ldr	r3, [pc, #92]	; (1ec4 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    1e68:	4798      	blx	r3
    1e6a:	2801      	cmp	r0, #1
    1e6c:	f47f acda 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_CFG)
    1e70:	4b0c      	ldr	r3, [pc, #48]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1e72:	7a1b      	ldrb	r3, [r3, #8]
    1e74:	2b09      	cmp	r3, #9
    1e76:	d073      	beq.n	1f60 <MdmCnct_ConnectInProgressSubStateMachine+0x870>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1e78:	4813      	ldr	r0, [pc, #76]	; (1ec8 <MdmCnct_ConnectInProgressSubStateMachine+0x7d8>)
    1e7a:	4b07      	ldr	r3, [pc, #28]	; (1e98 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1e7c:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1e7e:	4b09      	ldr	r3, [pc, #36]	; (1ea4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1e80:	2200      	movs	r2, #0
    1e82:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1e84:	68d8      	ldr	r0, [r3, #12]
    1e86:	4b0c      	ldr	r3, [pc, #48]	; (1eb8 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1e88:	4798      	blx	r3
    1e8a:	e4cb      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
    1e8c:	20003568 	.word	0x20003568
    1e90:	000053cd 	.word	0x000053cd
    1e94:	00008b18 	.word	0x00008b18
    1e98:	0000336d 	.word	0x0000336d
    1e9c:	0000605d 	.word	0x0000605d
    1ea0:	2000357c 	.word	0x2000357c
    1ea4:	200002d8 	.word	0x200002d8
    1ea8:	00007878 	.word	0x00007878
    1eac:	00008b4c 	.word	0x00008b4c
    1eb0:	00003329 	.word	0x00003329
    1eb4:	00009368 	.word	0x00009368
    1eb8:	000050a5 	.word	0x000050a5
    1ebc:	200002e0 	.word	0x200002e0
    1ec0:	20003544 	.word	0x20003544
    1ec4:	000056dd 	.word	0x000056dd
    1ec8:	000089e0 	.word	0x000089e0
    1ecc:	00005a45 	.word	0x00005a45
    1ed0:	00005865 	.word	0x00005865
    1ed4:	0000784c 	.word	0x0000784c
    1ed8:	00008b64 	.word	0x00008b64
    1edc:	00008b90 	.word	0x00008b90
    1ee0:	00008ba8 	.word	0x00008ba8
    1ee4:	00008bd8 	.word	0x00008bd8
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1ee8:	4b8a      	ldr	r3, [pc, #552]	; (2114 <MdmCnct_ConnectInProgressSubStateMachine+0xa24>)
    1eea:	6818      	ldr	r0, [r3, #0]
    1eec:	4b8a      	ldr	r3, [pc, #552]	; (2118 <MdmCnct_ConnectInProgressSubStateMachine+0xa28>)
    1eee:	4798      	blx	r3
    1ef0:	2800      	cmp	r0, #0
    1ef2:	d131      	bne.n	1f58 <MdmCnct_ConnectInProgressSubStateMachine+0x868>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1ef4:	2100      	movs	r1, #0
    1ef6:	4b89      	ldr	r3, [pc, #548]	; (211c <MdmCnct_ConnectInProgressSubStateMachine+0xa2c>)
    1ef8:	6818      	ldr	r0, [r3, #0]
    1efa:	4b89      	ldr	r3, [pc, #548]	; (2120 <MdmCnct_ConnectInProgressSubStateMachine+0xa30>)
    1efc:	4798      	blx	r3
    1efe:	2801      	cmp	r0, #1
    1f00:	d003      	beq.n	1f0a <MdmCnct_ConnectInProgressSubStateMachine+0x81a>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1f02:	4888      	ldr	r0, [pc, #544]	; (2124 <MdmCnct_ConnectInProgressSubStateMachine+0xa34>)
    1f04:	4b88      	ldr	r3, [pc, #544]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1f06:	4798      	blx	r3
    1f08:	e48c      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1f0a:	2301      	movs	r3, #1
    1f0c:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_CFG;
    1f10:	2309      	movs	r3, #9
    1f12:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1f16:	2300      	movs	r3, #0
    1f18:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1f1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1f1e:	4669      	mov	r1, sp
    1f20:	487c      	ldr	r0, [pc, #496]	; (2114 <MdmCnct_ConnectInProgressSubStateMachine+0xa24>)
    1f22:	6800      	ldr	r0, [r0, #0]
    1f24:	4c81      	ldr	r4, [pc, #516]	; (212c <MdmCnct_ConnectInProgressSubStateMachine+0xa3c>)
    1f26:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1f28:	2801      	cmp	r0, #1
    1f2a:	d007      	beq.n	1f3c <MdmCnct_ConnectInProgressSubStateMachine+0x84c>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    1f2c:	4880      	ldr	r0, [pc, #512]	; (2130 <MdmCnct_ConnectInProgressSubStateMachine+0xa40>)
    1f2e:	4b7e      	ldr	r3, [pc, #504]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1f30:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1f32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1f36:	4b7f      	ldr	r3, [pc, #508]	; (2134 <MdmCnct_ConnectInProgressSubStateMachine+0xa44>)
    1f38:	4798      	blx	r3
    1f3a:	e473      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1f3c:	2300      	movs	r3, #0
    1f3e:	461a      	mov	r2, r3
    1f40:	4619      	mov	r1, r3
    1f42:	4876      	ldr	r0, [pc, #472]	; (211c <MdmCnct_ConnectInProgressSubStateMachine+0xa2c>)
    1f44:	6800      	ldr	r0, [r0, #0]
    1f46:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1f48:	2201      	movs	r2, #1
    1f4a:	4b7b      	ldr	r3, [pc, #492]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    1f4c:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1f4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1f52:	4b78      	ldr	r3, [pc, #480]	; (2134 <MdmCnct_ConnectInProgressSubStateMachine+0xa44>)
    1f54:	4798      	blx	r3
    1f56:	e465      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1f58:	4878      	ldr	r0, [pc, #480]	; (213c <MdmCnct_ConnectInProgressSubStateMachine+0xa4c>)
    1f5a:	4b73      	ldr	r3, [pc, #460]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1f5c:	4798      	blx	r3
    1f5e:	e461      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        MdmCnct_ExtractSessionIdFromConfigResponse(ConnectionResponse.response);
    1f60:	4c75      	ldr	r4, [pc, #468]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    1f62:	68e0      	ldr	r0, [r4, #12]
    currentSessionId = cfgResponse[SESSION_ID_POSITION];
    1f64:	7ac3      	ldrb	r3, [r0, #11]
    1f66:	7423      	strb	r3, [r4, #16]
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1f68:	8961      	ldrh	r1, [r4, #10]
    1f6a:	4b75      	ldr	r3, [pc, #468]	; (2140 <MdmCnct_ConnectInProgressSubStateMachine+0xa50>)
    1f6c:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1f6e:	4875      	ldr	r0, [pc, #468]	; (2144 <MdmCnct_ConnectInProgressSubStateMachine+0xa54>)
    1f70:	4b6d      	ldr	r3, [pc, #436]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1f72:	4798      	blx	r3
    connectionStatus = cfgResponse[CONNECT_STATUS_POSITION];
    1f74:	68e3      	ldr	r3, [r4, #12]
    switch(connectionStatus)
    1f76:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    1f7a:	3b30      	subs	r3, #48	; 0x30
    1f7c:	2b06      	cmp	r3, #6
    1f7e:	d808      	bhi.n	1f92 <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
    1f80:	e8df f003 	tbb	[pc, r3]
    1f84:	2b271604 	.word	0x2b271604
    1f88:	332f      	.short	0x332f
    1f8a:	37          	.byte	0x37
    1f8b:	00          	.byte	0x00
            DEBUG_PRINT("Connection Status : DISCONNECTED DUE TO NETWORK");
    1f8c:	486e      	ldr	r0, [pc, #440]	; (2148 <MdmCnct_ConnectInProgressSubStateMachine+0xa58>)
    1f8e:	4b66      	ldr	r3, [pc, #408]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1f90:	4798      	blx	r3
                            DEBUG_PRINT("Error : Connection Failure");
    1f92:	486e      	ldr	r0, [pc, #440]	; (214c <MdmCnct_ConnectInProgressSubStateMachine+0xa5c>)
    1f94:	4c64      	ldr	r4, [pc, #400]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1f96:	47a0      	blx	r4
                            DEBUG_PRINT("Restarting the connection initialization...");
    1f98:	486d      	ldr	r0, [pc, #436]	; (2150 <MdmCnct_ConnectInProgressSubStateMachine+0xa60>)
    1f9a:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1f9c:	4869      	ldr	r0, [pc, #420]	; (2144 <MdmCnct_ConnectInProgressSubStateMachine+0xa54>)
    1f9e:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1fa0:	4b65      	ldr	r3, [pc, #404]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    1fa2:	2200      	movs	r2, #0
    1fa4:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    1fa6:	2207      	movs	r2, #7
    1fa8:	70da      	strb	r2, [r3, #3]
                            gHttpConnectionState =  MDM_HTTP_CONNECTED;
    1faa:	2202      	movs	r2, #2
    1fac:	701a      	strb	r2, [r3, #0]
    1fae:	e00b      	b.n	1fc8 <MdmCnct_ConnectInProgressSubStateMachine+0x8d8>
            DEBUG_PRINT("Connection Status : CONNECTED");
    1fb0:	4868      	ldr	r0, [pc, #416]	; (2154 <MdmCnct_ConnectInProgressSubStateMachine+0xa64>)
    1fb2:	4c5d      	ldr	r4, [pc, #372]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1fb4:	47a0      	blx	r4
                            DEBUG_PRINT("Connection successful...Cloud Server configured");
    1fb6:	4868      	ldr	r0, [pc, #416]	; (2158 <MdmCnct_ConnectInProgressSubStateMachine+0xa68>)
    1fb8:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1fba:	4862      	ldr	r0, [pc, #392]	; (2144 <MdmCnct_ConnectInProgressSubStateMachine+0xa54>)
    1fbc:	47a0      	blx	r4
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_HTTP_HEADER;
    1fbe:	4b5e      	ldr	r3, [pc, #376]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    1fc0:	2208      	movs	r2, #8
    1fc2:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1fc4:	2200      	movs	r2, #0
    1fc6:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1fc8:	4b5b      	ldr	r3, [pc, #364]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    1fca:	68d8      	ldr	r0, [r3, #12]
    1fcc:	4b63      	ldr	r3, [pc, #396]	; (215c <MdmCnct_ConnectInProgressSubStateMachine+0xa6c>)
    1fce:	4798      	blx	r3
    1fd0:	e428      	b.n	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            DEBUG_PRINT("Connection Status : FAILED TO CONNECT");
    1fd2:	4863      	ldr	r0, [pc, #396]	; (2160 <MdmCnct_ConnectInProgressSubStateMachine+0xa70>)
    1fd4:	4b54      	ldr	r3, [pc, #336]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1fd6:	4798      	blx	r3
    1fd8:	e7db      	b.n	1f92 <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
            DEBUG_PRINT("Connection Status : CONNECTION CLOSED");
    1fda:	4862      	ldr	r0, [pc, #392]	; (2164 <MdmCnct_ConnectInProgressSubStateMachine+0xa74>)
    1fdc:	4b52      	ldr	r3, [pc, #328]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1fde:	4798      	blx	r3
    1fe0:	e7d7      	b.n	1f92 <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
            DEBUG_PRINT("Connection Status : CONNECTION IN PROGRESS");
    1fe2:	4861      	ldr	r0, [pc, #388]	; (2168 <MdmCnct_ConnectInProgressSubStateMachine+0xa78>)
    1fe4:	4b50      	ldr	r3, [pc, #320]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1fe6:	4798      	blx	r3
    1fe8:	e7d3      	b.n	1f92 <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
            DEBUG_PRINT("Connection Status : IDLE TIMER STARTED FOR DISCONNECTION");
    1fea:	4860      	ldr	r0, [pc, #384]	; (216c <MdmCnct_ConnectInProgressSubStateMachine+0xa7c>)
    1fec:	4b4e      	ldr	r3, [pc, #312]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1fee:	4798      	blx	r3
    1ff0:	e7cf      	b.n	1f92 <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
            DEBUG_PRINT("Connection Status : IDLE TIMER CANCELLED");
    1ff2:	485f      	ldr	r0, [pc, #380]	; (2170 <MdmCnct_ConnectInProgressSubStateMachine+0xa80>)
    1ff4:	4b4c      	ldr	r3, [pc, #304]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1ff6:	4798      	blx	r3
    1ff8:	e7cb      	b.n	1f92 <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1ffa:	4b4f      	ldr	r3, [pc, #316]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    1ffc:	789b      	ldrb	r3, [r3, #2]
    1ffe:	b1db      	cbz	r3, 2038 <MdmCnct_ConnectInProgressSubStateMachine+0x948>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    2000:	2b01      	cmp	r3, #1
    2002:	f47f ac0f 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    2006:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    200a:	495a      	ldr	r1, [pc, #360]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa84>)
    200c:	4b5a      	ldr	r3, [pc, #360]	; (2178 <MdmCnct_ConnectInProgressSubStateMachine+0xa88>)
    200e:	6818      	ldr	r0, [r3, #0]
    2010:	4b5a      	ldr	r3, [pc, #360]	; (217c <MdmCnct_ConnectInProgressSubStateMachine+0xa8c>)
    2012:	4798      	blx	r3
    2014:	2801      	cmp	r0, #1
    2016:	f47f ac05 	bne.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_HEADER)
    201a:	4b47      	ldr	r3, [pc, #284]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    201c:	7a1b      	ldrb	r3, [r3, #8]
    201e:	2b17      	cmp	r3, #23
    2020:	d04d      	beq.n	20be <MdmCnct_ConnectInProgressSubStateMachine+0x9ce>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    2022:	4857      	ldr	r0, [pc, #348]	; (2180 <MdmCnct_ConnectInProgressSubStateMachine+0xa90>)
    2024:	4b40      	ldr	r3, [pc, #256]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2026:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2028:	4b43      	ldr	r3, [pc, #268]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    202a:	2200      	movs	r2, #0
    202c:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    202e:	68d8      	ldr	r0, [r3, #12]
    2030:	4b4a      	ldr	r3, [pc, #296]	; (215c <MdmCnct_ConnectInProgressSubStateMachine+0xa6c>)
    2032:	4798      	blx	r3
}
    2034:	f7ff bbf6 	b.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                buildHttpHeaderWithActiveSessionID(&currentSessionId);
    2038:	4852      	ldr	r0, [pc, #328]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa94>)
    203a:	4b53      	ldr	r3, [pc, #332]	; (2188 <MdmCnct_ConnectInProgressSubStateMachine+0xa98>)
    203c:	4798      	blx	r3
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    203e:	4b35      	ldr	r3, [pc, #212]	; (2114 <MdmCnct_ConnectInProgressSubStateMachine+0xa24>)
    2040:	6818      	ldr	r0, [r3, #0]
    2042:	4b35      	ldr	r3, [pc, #212]	; (2118 <MdmCnct_ConnectInProgressSubStateMachine+0xa28>)
    2044:	4798      	blx	r3
    2046:	2800      	cmp	r0, #0
    2048:	d134      	bne.n	20b4 <MdmCnct_ConnectInProgressSubStateMachine+0x9c4>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    204a:	2100      	movs	r1, #0
    204c:	4b33      	ldr	r3, [pc, #204]	; (211c <MdmCnct_ConnectInProgressSubStateMachine+0xa2c>)
    204e:	6818      	ldr	r0, [r3, #0]
    2050:	4b33      	ldr	r3, [pc, #204]	; (2120 <MdmCnct_ConnectInProgressSubStateMachine+0xa30>)
    2052:	4798      	blx	r3
    2054:	2801      	cmp	r0, #1
    2056:	d004      	beq.n	2062 <MdmCnct_ConnectInProgressSubStateMachine+0x972>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    2058:	4832      	ldr	r0, [pc, #200]	; (2124 <MdmCnct_ConnectInProgressSubStateMachine+0xa34>)
    205a:	4b33      	ldr	r3, [pc, #204]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    205c:	4798      	blx	r3
    205e:	f7ff bbe1 	b.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    2062:	2301      	movs	r3, #1
    2064:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_HEADER;
    2068:	2317      	movs	r3, #23
    206a:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    206e:	2300      	movs	r3, #0
    2070:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2072:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    2076:	4669      	mov	r1, sp
    2078:	4826      	ldr	r0, [pc, #152]	; (2114 <MdmCnct_ConnectInProgressSubStateMachine+0xa24>)
    207a:	6800      	ldr	r0, [r0, #0]
    207c:	4c2b      	ldr	r4, [pc, #172]	; (212c <MdmCnct_ConnectInProgressSubStateMachine+0xa3c>)
    207e:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    2080:	2801      	cmp	r0, #1
    2082:	d008      	beq.n	2096 <MdmCnct_ConnectInProgressSubStateMachine+0x9a6>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    2084:	482a      	ldr	r0, [pc, #168]	; (2130 <MdmCnct_ConnectInProgressSubStateMachine+0xa40>)
    2086:	4b28      	ldr	r3, [pc, #160]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2088:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    208a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    208e:	4b29      	ldr	r3, [pc, #164]	; (2134 <MdmCnct_ConnectInProgressSubStateMachine+0xa44>)
    2090:	4798      	blx	r3
    2092:	f7ff bbc7 	b.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    2096:	2300      	movs	r3, #0
    2098:	461a      	mov	r2, r3
    209a:	4619      	mov	r1, r3
    209c:	481f      	ldr	r0, [pc, #124]	; (211c <MdmCnct_ConnectInProgressSubStateMachine+0xa2c>)
    209e:	6800      	ldr	r0, [r0, #0]
    20a0:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    20a2:	2201      	movs	r2, #1
    20a4:	4b24      	ldr	r3, [pc, #144]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    20a6:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    20a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    20ac:	4b21      	ldr	r3, [pc, #132]	; (2134 <MdmCnct_ConnectInProgressSubStateMachine+0xa44>)
    20ae:	4798      	blx	r3
    20b0:	f7ff bbb8 	b.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    20b4:	4821      	ldr	r0, [pc, #132]	; (213c <MdmCnct_ConnectInProgressSubStateMachine+0xa4c>)
    20b6:	4b1c      	ldr	r3, [pc, #112]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    20b8:	4798      	blx	r3
    20ba:	f7ff bbb3 	b.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    20be:	4c1e      	ldr	r4, [pc, #120]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    20c0:	8961      	ldrh	r1, [r4, #10]
    20c2:	68e0      	ldr	r0, [r4, #12]
    20c4:	4b1e      	ldr	r3, [pc, #120]	; (2140 <MdmCnct_ConnectInProgressSubStateMachine+0xa50>)
    20c6:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    20c8:	481e      	ldr	r0, [pc, #120]	; (2144 <MdmCnct_ConnectInProgressSubStateMachine+0xa54>)
    20ca:	4b17      	ldr	r3, [pc, #92]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    20cc:	4798      	blx	r3
    if(0==memcmp(response,"CONNECT",7))
    20ce:	2207      	movs	r2, #7
    20d0:	492e      	ldr	r1, [pc, #184]	; (218c <MdmCnct_ConnectInProgressSubStateMachine+0xa9c>)
    20d2:	68e0      	ldr	r0, [r4, #12]
    20d4:	4b2e      	ldr	r3, [pc, #184]	; (2190 <MdmCnct_ConnectInProgressSubStateMachine+0xaa0>)
    20d6:	4798      	blx	r3
    20d8:	b140      	cbz	r0, 20ec <MdmCnct_ConnectInProgressSubStateMachine+0x9fc>
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    20da:	2200      	movs	r2, #0
    20dc:	4b16      	ldr	r3, [pc, #88]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    20de:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    20e0:	4b15      	ldr	r3, [pc, #84]	; (2138 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    20e2:	68d8      	ldr	r0, [r3, #12]
    20e4:	4b1d      	ldr	r3, [pc, #116]	; (215c <MdmCnct_ConnectInProgressSubStateMachine+0xa6c>)
    20e6:	4798      	blx	r3
    20e8:	f7ff bb9c 	b.w	1824 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
        mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
    20ec:	2110      	movs	r1, #16
    20ee:	4829      	ldr	r0, [pc, #164]	; (2194 <MdmCnct_ConnectInProgressSubStateMachine+0xaa4>)
    20f0:	4b29      	ldr	r3, [pc, #164]	; (2198 <MdmCnct_ConnectInProgressSubStateMachine+0xaa8>)
    20f2:	4798      	blx	r3
        mdmCtrlr_FlushRxBuffer();
    20f4:	4b29      	ldr	r3, [pc, #164]	; (219c <MdmCnct_ConnectInProgressSubStateMachine+0xaac>)
    20f6:	4798      	blx	r3
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    20f8:	2200      	movs	r2, #0
    20fa:	7062      	strb	r2, [r4, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    20fc:	70a2      	strb	r2, [r4, #2]
                            gHttpConnectionState = MDM_HTTP_CONNECTED;
    20fe:	2102      	movs	r1, #2
    2100:	7021      	strb	r1, [r4, #0]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    2102:	70e2      	strb	r2, [r4, #3]
                            DEBUG_PRINT("\r\n");
    2104:	480f      	ldr	r0, [pc, #60]	; (2144 <MdmCnct_ConnectInProgressSubStateMachine+0xa54>)
    2106:	4b08      	ldr	r3, [pc, #32]	; (2128 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2108:	4798      	blx	r3
                            vTaskDelay(PacketTransmitDelayMs);
    210a:	2064      	movs	r0, #100	; 0x64
    210c:	4b09      	ldr	r3, [pc, #36]	; (2134 <MdmCnct_ConnectInProgressSubStateMachine+0xa44>)
    210e:	4798      	blx	r3
    2110:	e7e6      	b.n	20e0 <MdmCnct_ConnectInProgressSubStateMachine+0x9f0>
    2112:	bf00      	nop
    2114:	20003568 	.word	0x20003568
    2118:	00005a45 	.word	0x00005a45
    211c:	2000357c 	.word	0x2000357c
    2120:	00005865 	.word	0x00005865
    2124:	0000784c 	.word	0x0000784c
    2128:	0000336d 	.word	0x0000336d
    212c:	000053cd 	.word	0x000053cd
    2130:	00008ba8 	.word	0x00008ba8
    2134:	0000605d 	.word	0x0000605d
    2138:	200002d8 	.word	0x200002d8
    213c:	00007878 	.word	0x00007878
    2140:	00003329 	.word	0x00003329
    2144:	00009368 	.word	0x00009368
    2148:	00008bf8 	.word	0x00008bf8
    214c:	00008d5c 	.word	0x00008d5c
    2150:	00008d78 	.word	0x00008d78
    2154:	00008c28 	.word	0x00008c28
    2158:	00008c48 	.word	0x00008c48
    215c:	000050a5 	.word	0x000050a5
    2160:	00008c78 	.word	0x00008c78
    2164:	00008ca0 	.word	0x00008ca0
    2168:	00008cc8 	.word	0x00008cc8
    216c:	00008cf4 	.word	0x00008cf4
    2170:	00008d30 	.word	0x00008d30
    2174:	200002e0 	.word	0x200002e0
    2178:	20003544 	.word	0x20003544
    217c:	000056dd 	.word	0x000056dd
    2180:	000089e0 	.word	0x000089e0
    2184:	200002e8 	.word	0x200002e8
    2188:	0000145d 	.word	0x0000145d
    218c:	00008da4 	.word	0x00008da4
    2190:	00006bcb 	.word	0x00006bcb
    2194:	00008758 	.word	0x00008758
    2198:	000029e9 	.word	0x000029e9
    219c:	00002a65 	.word	0x00002a65

000021a0 <MdmConnect_HttpConnectionSchedule>:
{
    21a0:	b530      	push	{r4, r5, lr}
    21a2:	b083      	sub	sp, #12
    switch (gHttpConnectionState)
    21a4:	4b93      	ldr	r3, [pc, #588]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    21a6:	781b      	ldrb	r3, [r3, #0]
    21a8:	2b01      	cmp	r3, #1
    21aa:	d012      	beq.n	21d2 <MdmConnect_HttpConnectionSchedule+0x32>
    21ac:	b11b      	cbz	r3, 21b6 <MdmConnect_HttpConnectionSchedule+0x16>
    21ae:	2b02      	cmp	r3, #2
    21b0:	d012      	beq.n	21d8 <MdmConnect_HttpConnectionSchedule+0x38>
}
    21b2:	b003      	add	sp, #12
    21b4:	bd30      	pop	{r4, r5, pc}
            if(isModemDiagDataBaseUpdated() != false)
    21b6:	4b90      	ldr	r3, [pc, #576]	; (23f8 <MdmConnect_HttpConnectionSchedule+0x258>)
    21b8:	4798      	blx	r3
    21ba:	2800      	cmp	r0, #0
    21bc:	d0f9      	beq.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectionState = MDM_HTTP_CONNECTION_IN_PROGRESS;
    21be:	4b8d      	ldr	r3, [pc, #564]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    21c0:	2201      	movs	r2, #1
    21c2:	701a      	strb	r2, [r3, #0]
                gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    21c4:	2200      	movs	r2, #0
    21c6:	705a      	strb	r2, [r3, #1]
                gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    21c8:	709a      	strb	r2, [r3, #2]
                DEBUG_PRINT("Closing Active Connections");
    21ca:	488c      	ldr	r0, [pc, #560]	; (23fc <MdmConnect_HttpConnectionSchedule+0x25c>)
    21cc:	4b8c      	ldr	r3, [pc, #560]	; (2400 <MdmConnect_HttpConnectionSchedule+0x260>)
    21ce:	4798      	blx	r3
    21d0:	e7ef      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            MdmCnct_ConnectInProgressSubStateMachine();
    21d2:	4b8c      	ldr	r3, [pc, #560]	; (2404 <MdmConnect_HttpConnectionSchedule+0x264>)
    21d4:	4798      	blx	r3
        break;
    21d6:	e7ec      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gHttpConnectedSubState)
    21d8:	4b86      	ldr	r3, [pc, #536]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    21da:	78db      	ldrb	r3, [r3, #3]
    21dc:	2b08      	cmp	r3, #8
    21de:	d8e8      	bhi.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
    21e0:	e8df f013 	tbh	[pc, r3, lsl #1]
    21e4:	000f0009 	.word	0x000f0009
    21e8:	00220017 	.word	0x00220017
    21ec:	002c0026 	.word	0x002c0026
    21f0:	00b30068 	.word	0x00b30068
    21f4:	00c1      	.short	0x00c1
            mdmCtrlr_FlushRxBuffer();
    21f6:	4b84      	ldr	r3, [pc, #528]	; (2408 <MdmConnect_HttpConnectionSchedule+0x268>)
    21f8:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_IDLE_MONITOR_CONNECTION;
    21fa:	2201      	movs	r2, #1
    21fc:	4b7d      	ldr	r3, [pc, #500]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    21fe:	70da      	strb	r2, [r3, #3]
    2200:	e7d7      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            if(false != isPacketTransmitTimerExpired())
    2202:	4b82      	ldr	r3, [pc, #520]	; (240c <MdmConnect_HttpConnectionSchedule+0x26c>)
    2204:	4798      	blx	r3
    2206:	2800      	cmp	r0, #0
    2208:	d0d3      	beq.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            	gHttpConnectedSubState = CONNECTED_PERIODIC_6SEC_TIMER_EXPIRED;
    220a:	2202      	movs	r2, #2
    220c:	4b79      	ldr	r3, [pc, #484]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    220e:	70da      	strb	r2, [r3, #3]
    2210:	e7cf      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
        	xSemaphoreGive(SensorScanSemaphore);
    2212:	2300      	movs	r3, #0
    2214:	461a      	mov	r2, r3
    2216:	4619      	mov	r1, r3
    2218:	487d      	ldr	r0, [pc, #500]	; (2410 <MdmConnect_HttpConnectionSchedule+0x270>)
    221a:	6800      	ldr	r0, [r0, #0]
    221c:	4c7d      	ldr	r4, [pc, #500]	; (2414 <MdmConnect_HttpConnectionSchedule+0x274>)
    221e:	47a0      	blx	r4
        	gHttpConnectedSubState = CONNECTED_WAIT_FOR_DATA_FROM_SENSOR_TASK;
    2220:	2203      	movs	r2, #3
    2222:	4b74      	ldr	r3, [pc, #464]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    2224:	70da      	strb	r2, [r3, #3]
    2226:	e7c4      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
			gHttpConnectedSubState = CONNECTED_BUILD_DATA_PACKET_TO_SERVER;
    2228:	2204      	movs	r2, #4
    222a:	4b72      	ldr	r3, [pc, #456]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    222c:	70da      	strb	r2, [r3, #3]
    222e:	e7c0      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            buildDataPacketsToServer();
    2230:	4b79      	ldr	r3, [pc, #484]	; (2418 <MdmConnect_HttpConnectionSchedule+0x278>)
    2232:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_SEND_DATA_PACKETS_TO_SERVER;
    2234:	2205      	movs	r2, #5
    2236:	4b6f      	ldr	r3, [pc, #444]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    2238:	70da      	strb	r2, [r3, #3]
    223a:	e7ba      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    223c:	4b77      	ldr	r3, [pc, #476]	; (241c <MdmConnect_HttpConnectionSchedule+0x27c>)
    223e:	6818      	ldr	r0, [r3, #0]
    2240:	4b77      	ldr	r3, [pc, #476]	; (2420 <MdmConnect_HttpConnectionSchedule+0x280>)
    2242:	4798      	blx	r3
    2244:	2800      	cmp	r0, #0
    2246:	d131      	bne.n	22ac <MdmConnect_HttpConnectionSchedule+0x10c>
                if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    2248:	2100      	movs	r1, #0
    224a:	4b76      	ldr	r3, [pc, #472]	; (2424 <MdmConnect_HttpConnectionSchedule+0x284>)
    224c:	6818      	ldr	r0, [r3, #0]
    224e:	4b76      	ldr	r3, [pc, #472]	; (2428 <MdmConnect_HttpConnectionSchedule+0x288>)
    2250:	4798      	blx	r3
    2252:	2801      	cmp	r0, #1
    2254:	d003      	beq.n	225e <MdmConnect_HttpConnectionSchedule+0xbe>
                    DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    2256:	4875      	ldr	r0, [pc, #468]	; (242c <MdmConnect_HttpConnectionSchedule+0x28c>)
    2258:	4b69      	ldr	r3, [pc, #420]	; (2400 <MdmConnect_HttpConnectionSchedule+0x260>)
    225a:	4798      	blx	r3
    225c:	e7a9      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    225e:	2301      	movs	r3, #1
    2260:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KHTTP_GET;
    2264:	2318      	movs	r3, #24
    2266:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    226a:	2300      	movs	r3, #0
    226c:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    226e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    2272:	4669      	mov	r1, sp
    2274:	4869      	ldr	r0, [pc, #420]	; (241c <MdmConnect_HttpConnectionSchedule+0x27c>)
    2276:	6800      	ldr	r0, [r0, #0]
    2278:	4c66      	ldr	r4, [pc, #408]	; (2414 <MdmConnect_HttpConnectionSchedule+0x274>)
    227a:	47a0      	blx	r4
                    if(TxQueuePushStatus == pdPASS)
    227c:	2801      	cmp	r0, #1
    227e:	d007      	beq.n	2290 <MdmConnect_HttpConnectionSchedule+0xf0>
                        DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    2280:	486b      	ldr	r0, [pc, #428]	; (2430 <MdmConnect_HttpConnectionSchedule+0x290>)
    2282:	4b5f      	ldr	r3, [pc, #380]	; (2400 <MdmConnect_HttpConnectionSchedule+0x260>)
    2284:	4798      	blx	r3
                        vTaskDelay(TransmitDelayMs);
    2286:	f640 10c4 	movw	r0, #2500	; 0x9c4
    228a:	4b6a      	ldr	r3, [pc, #424]	; (2434 <MdmConnect_HttpConnectionSchedule+0x294>)
    228c:	4798      	blx	r3
    228e:	e790      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    2290:	2300      	movs	r3, #0
    2292:	461a      	mov	r2, r3
    2294:	4619      	mov	r1, r3
    2296:	4863      	ldr	r0, [pc, #396]	; (2424 <MdmConnect_HttpConnectionSchedule+0x284>)
    2298:	6800      	ldr	r0, [r0, #0]
    229a:	47a0      	blx	r4
                        gHttpConnectedSubState = CONNECTED_RECEIVE_RESPONSE_FROM_SERVER;
    229c:	2206      	movs	r2, #6
    229e:	4b55      	ldr	r3, [pc, #340]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    22a0:	70da      	strb	r2, [r3, #3]
                        vTaskDelay(TransmitDelayMs);
    22a2:	f640 10c4 	movw	r0, #2500	; 0x9c4
    22a6:	4b63      	ldr	r3, [pc, #396]	; (2434 <MdmConnect_HttpConnectionSchedule+0x294>)
    22a8:	4798      	blx	r3
    22aa:	e782      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                DEBUG_PRINT("Transmit Queue is not empty");
    22ac:	4862      	ldr	r0, [pc, #392]	; (2438 <MdmConnect_HttpConnectionSchedule+0x298>)
    22ae:	4b54      	ldr	r3, [pc, #336]	; (2400 <MdmConnect_HttpConnectionSchedule+0x260>)
    22b0:	4798      	blx	r3
    22b2:	e77e      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    22b4:	f241 3288 	movw	r2, #5000	; 0x1388
    22b8:	4960      	ldr	r1, [pc, #384]	; (243c <MdmConnect_HttpConnectionSchedule+0x29c>)
    22ba:	4b61      	ldr	r3, [pc, #388]	; (2440 <MdmConnect_HttpConnectionSchedule+0x2a0>)
    22bc:	6818      	ldr	r0, [r3, #0]
    22be:	4b61      	ldr	r3, [pc, #388]	; (2444 <MdmConnect_HttpConnectionSchedule+0x2a4>)
    22c0:	4798      	blx	r3
    22c2:	2801      	cmp	r0, #1
    22c4:	d139      	bne.n	233a <MdmConnect_HttpConnectionSchedule+0x19a>
                if(ConnectionResponse.atCmd == CMD_AT_KHTTP_GET)
    22c6:	4b4b      	ldr	r3, [pc, #300]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    22c8:	7a1b      	ldrb	r3, [r3, #8]
    22ca:	2b18      	cmp	r3, #24
    22cc:	d127      	bne.n	231e <MdmConnect_HttpConnectionSchedule+0x17e>
                    if(ConnectionResponse.length > 23)
    22ce:	4b49      	ldr	r3, [pc, #292]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    22d0:	895c      	ldrh	r4, [r3, #10]
    22d2:	2c17      	cmp	r4, #23
    22d4:	d917      	bls.n	2306 <MdmConnect_HttpConnectionSchedule+0x166>
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    22d6:	68dd      	ldr	r5, [r3, #12]
    if(0==memcmp(response,"CONNECT\r\nHTTP/1.1 200 OK",24))
    22d8:	2218      	movs	r2, #24
    22da:	495b      	ldr	r1, [pc, #364]	; (2448 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    22dc:	4628      	mov	r0, r5
    22de:	4b5b      	ldr	r3, [pc, #364]	; (244c <MdmConnect_HttpConnectionSchedule+0x2ac>)
    22e0:	4798      	blx	r3
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    22e2:	b118      	cbz	r0, 22ec <MdmConnect_HttpConnectionSchedule+0x14c>
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    22e4:	2207      	movs	r2, #7
    22e6:	4b43      	ldr	r3, [pc, #268]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    22e8:	70da      	strb	r2, [r3, #3]
    22ea:	e00f      	b.n	230c <MdmConnect_HttpConnectionSchedule+0x16c>
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    22ec:	4621      	mov	r1, r4
    22ee:	4628      	mov	r0, r5
    22f0:	4b57      	ldr	r3, [pc, #348]	; (2450 <MdmConnect_HttpConnectionSchedule+0x2b0>)
    22f2:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    22f4:	4857      	ldr	r0, [pc, #348]	; (2454 <MdmConnect_HttpConnectionSchedule+0x2b4>)
    22f6:	4b42      	ldr	r3, [pc, #264]	; (2400 <MdmConnect_HttpConnectionSchedule+0x260>)
    22f8:	4798      	blx	r3
                            clearPacketTransmitTimerExpiryFlag();
    22fa:	4b57      	ldr	r3, [pc, #348]	; (2458 <MdmConnect_HttpConnectionSchedule+0x2b8>)
    22fc:	4798      	blx	r3
                            gHttpConnectedSubState = CONNECTED_IDLE_MONITOR_CONNECTION;
    22fe:	2201      	movs	r2, #1
    2300:	4b3c      	ldr	r3, [pc, #240]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    2302:	70da      	strb	r2, [r3, #3]
    2304:	e002      	b.n	230c <MdmConnect_HttpConnectionSchedule+0x16c>
                        gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    2306:	2207      	movs	r2, #7
    2308:	4b3a      	ldr	r3, [pc, #232]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    230a:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    230c:	4b39      	ldr	r3, [pc, #228]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    230e:	68d8      	ldr	r0, [r3, #12]
    2310:	4b52      	ldr	r3, [pc, #328]	; (245c <MdmConnect_HttpConnectionSchedule+0x2bc>)
    2312:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    2314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2318:	4b46      	ldr	r3, [pc, #280]	; (2434 <MdmConnect_HttpConnectionSchedule+0x294>)
    231a:	4798      	blx	r3
    231c:	e749      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Failed to receive connection response in RX mode");
    231e:	4850      	ldr	r0, [pc, #320]	; (2460 <MdmConnect_HttpConnectionSchedule+0x2c0>)
    2320:	4b37      	ldr	r3, [pc, #220]	; (2400 <MdmConnect_HttpConnectionSchedule+0x260>)
    2322:	4798      	blx	r3
                    gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    2324:	4b33      	ldr	r3, [pc, #204]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    2326:	2207      	movs	r2, #7
    2328:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    232a:	68d8      	ldr	r0, [r3, #12]
    232c:	4b4b      	ldr	r3, [pc, #300]	; (245c <MdmConnect_HttpConnectionSchedule+0x2bc>)
    232e:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    2330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2334:	4b3f      	ldr	r3, [pc, #252]	; (2434 <MdmConnect_HttpConnectionSchedule+0x294>)
    2336:	4798      	blx	r3
    2338:	e73b      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    233a:	2207      	movs	r2, #7
    233c:	4b2d      	ldr	r3, [pc, #180]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    233e:	70da      	strb	r2, [r3, #3]
                vTaskDelay(reTransmissionDelayMs);
    2340:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2344:	4b3b      	ldr	r3, [pc, #236]	; (2434 <MdmConnect_HttpConnectionSchedule+0x294>)
    2346:	4798      	blx	r3
    2348:	e733      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    234a:	4b2a      	ldr	r3, [pc, #168]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    234c:	2208      	movs	r2, #8
    234e:	70da      	strb	r2, [r3, #3]
            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    2350:	2200      	movs	r2, #0
    2352:	711a      	strb	r2, [r3, #4]
            sessionIdCount = 5;
    2354:	2105      	movs	r1, #5
    2356:	7159      	strb	r1, [r3, #5]
            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2358:	709a      	strb	r2, [r3, #2]
            DEBUG_PRINT("\r\nConnection interrupted...Performing the Error Recovery....\r\n");
    235a:	4842      	ldr	r0, [pc, #264]	; (2464 <MdmConnect_HttpConnectionSchedule+0x2c4>)
    235c:	4c28      	ldr	r4, [pc, #160]	; (2400 <MdmConnect_HttpConnectionSchedule+0x260>)
    235e:	47a0      	blx	r4
            DEBUG_PRINT("Closing the active connection");
    2360:	4841      	ldr	r0, [pc, #260]	; (2468 <MdmConnect_HttpConnectionSchedule+0x2c8>)
    2362:	47a0      	blx	r4
    2364:	e725      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gErrorRecoveryState)
    2366:	4b23      	ldr	r3, [pc, #140]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    2368:	791b      	ldrb	r3, [r3, #4]
    236a:	2b01      	cmp	r3, #1
    236c:	f000 810a 	beq.w	2584 <MdmConnect_HttpConnectionSchedule+0x3e4>
    2370:	b323      	cbz	r3, 23bc <MdmConnect_HttpConnectionSchedule+0x21c>
    2372:	2b02      	cmp	r3, #2
    2374:	f47f af1d 	bne.w	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    2378:	4b1e      	ldr	r3, [pc, #120]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    237a:	789b      	ldrb	r3, [r3, #2]
    237c:	2b00      	cmp	r3, #0
    237e:	f000 81d9 	beq.w	2734 <MdmConnect_HttpConnectionSchedule+0x594>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    2382:	2b01      	cmp	r3, #1
    2384:	f47f af15 	bne.w	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    2388:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    238c:	492b      	ldr	r1, [pc, #172]	; (243c <MdmConnect_HttpConnectionSchedule+0x29c>)
    238e:	4b2c      	ldr	r3, [pc, #176]	; (2440 <MdmConnect_HttpConnectionSchedule+0x2a0>)
    2390:	6818      	ldr	r0, [r3, #0]
    2392:	4b2c      	ldr	r3, [pc, #176]	; (2444 <MdmConnect_HttpConnectionSchedule+0x2a4>)
    2394:	4798      	blx	r3
    2396:	2801      	cmp	r0, #1
    2398:	f000 820a 	beq.w	27b0 <MdmConnect_HttpConnectionSchedule+0x610>
                    if(forcedModemRebootCnt <= 3)
    239c:	4b15      	ldr	r3, [pc, #84]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    239e:	7c5b      	ldrb	r3, [r3, #17]
    23a0:	2b03      	cmp	r3, #3
    23a2:	f240 8255 	bls.w	2850 <MdmConnect_HttpConnectionSchedule+0x6b0>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    23a6:	4831      	ldr	r0, [pc, #196]	; (246c <MdmConnect_HttpConnectionSchedule+0x2cc>)
    23a8:	4c15      	ldr	r4, [pc, #84]	; (2400 <MdmConnect_HttpConnectionSchedule+0x260>)
    23aa:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    23ac:	4830      	ldr	r0, [pc, #192]	; (2470 <MdmConnect_HttpConnectionSchedule+0x2d0>)
    23ae:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    23b0:	2200      	movs	r2, #0
    23b2:	4b10      	ldr	r3, [pc, #64]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    23b4:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    23b6:	4b2f      	ldr	r3, [pc, #188]	; (2474 <MdmConnect_HttpConnectionSchedule+0x2d4>)
    23b8:	4798      	blx	r3
}
    23ba:	e6fa      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    23bc:	4b0d      	ldr	r3, [pc, #52]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    23be:	789b      	ldrb	r3, [r3, #2]
    23c0:	2b00      	cmp	r3, #0
    23c2:	f040 8092 	bne.w	24ea <MdmConnect_HttpConnectionSchedule+0x34a>
                if(sessionIdCount > 0)
    23c6:	4b0b      	ldr	r3, [pc, #44]	; (23f4 <MdmConnect_HttpConnectionSchedule+0x254>)
    23c8:	795b      	ldrb	r3, [r3, #5]
    23ca:	2b00      	cmp	r3, #0
    23cc:	f000 8084 	beq.w	24d8 <MdmConnect_HttpConnectionSchedule+0x338>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    23d0:	4b12      	ldr	r3, [pc, #72]	; (241c <MdmConnect_HttpConnectionSchedule+0x27c>)
    23d2:	6818      	ldr	r0, [r3, #0]
    23d4:	4b12      	ldr	r3, [pc, #72]	; (2420 <MdmConnect_HttpConnectionSchedule+0x280>)
    23d6:	4798      	blx	r3
    23d8:	2800      	cmp	r0, #0
    23da:	d179      	bne.n	24d0 <MdmConnect_HttpConnectionSchedule+0x330>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    23dc:	2100      	movs	r1, #0
    23de:	4b11      	ldr	r3, [pc, #68]	; (2424 <MdmConnect_HttpConnectionSchedule+0x284>)
    23e0:	6818      	ldr	r0, [r3, #0]
    23e2:	4b11      	ldr	r3, [pc, #68]	; (2428 <MdmConnect_HttpConnectionSchedule+0x288>)
    23e4:	4798      	blx	r3
    23e6:	2801      	cmp	r0, #1
    23e8:	d046      	beq.n	2478 <MdmConnect_HttpConnectionSchedule+0x2d8>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    23ea:	4810      	ldr	r0, [pc, #64]	; (242c <MdmConnect_HttpConnectionSchedule+0x28c>)
    23ec:	4b04      	ldr	r3, [pc, #16]	; (2400 <MdmConnect_HttpConnectionSchedule+0x260>)
    23ee:	4798      	blx	r3
    23f0:	e6df      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
    23f2:	bf00      	nop
    23f4:	200002d8 	.word	0x200002d8
    23f8:	00002d3d 	.word	0x00002d3d
    23fc:	00008dac 	.word	0x00008dac
    2400:	0000336d 	.word	0x0000336d
    2404:	000016f1 	.word	0x000016f1
    2408:	00002a65 	.word	0x00002a65
    240c:	00003049 	.word	0x00003049
    2410:	20003578 	.word	0x20003578
    2414:	000053cd 	.word	0x000053cd
    2418:	000014e5 	.word	0x000014e5
    241c:	20003568 	.word	0x20003568
    2420:	00005a45 	.word	0x00005a45
    2424:	2000357c 	.word	0x2000357c
    2428:	00005865 	.word	0x00005865
    242c:	0000784c 	.word	0x0000784c
    2430:	00008ba8 	.word	0x00008ba8
    2434:	0000605d 	.word	0x0000605d
    2438:	00007878 	.word	0x00007878
    243c:	200002e0 	.word	0x200002e0
    2440:	20003544 	.word	0x20003544
    2444:	000056dd 	.word	0x000056dd
    2448:	00008dc8 	.word	0x00008dc8
    244c:	00006bcb 	.word	0x00006bcb
    2450:	00003329 	.word	0x00003329
    2454:	00009368 	.word	0x00009368
    2458:	0000303d 	.word	0x0000303d
    245c:	000050a5 	.word	0x000050a5
    2460:	000089e0 	.word	0x000089e0
    2464:	00008de4 	.word	0x00008de4
    2468:	00008e24 	.word	0x00008e24
    246c:	00008ea4 	.word	0x00008ea4
    2470:	00008ed8 	.word	0x00008ed8
    2474:	000035a5 	.word	0x000035a5
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    2478:	2301      	movs	r3, #1
    247a:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
    247e:	4b8f      	ldr	r3, [pc, #572]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2480:	7958      	ldrb	r0, [r3, #5]
    2482:	4b8f      	ldr	r3, [pc, #572]	; (26c0 <MdmConnect_HttpConnectionSchedule+0x520>)
    2484:	4798      	blx	r3
    2486:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
    248a:	2300      	movs	r3, #0
    248c:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    248e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    2492:	4669      	mov	r1, sp
    2494:	488b      	ldr	r0, [pc, #556]	; (26c4 <MdmConnect_HttpConnectionSchedule+0x524>)
    2496:	6800      	ldr	r0, [r0, #0]
    2498:	4c8b      	ldr	r4, [pc, #556]	; (26c8 <MdmConnect_HttpConnectionSchedule+0x528>)
    249a:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
    249c:	2801      	cmp	r0, #1
    249e:	d007      	beq.n	24b0 <MdmConnect_HttpConnectionSchedule+0x310>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    24a0:	488a      	ldr	r0, [pc, #552]	; (26cc <MdmConnect_HttpConnectionSchedule+0x52c>)
    24a2:	4b8b      	ldr	r3, [pc, #556]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    24a4:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
    24a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    24aa:	4b8a      	ldr	r3, [pc, #552]	; (26d4 <MdmConnect_HttpConnectionSchedule+0x534>)
    24ac:	4798      	blx	r3
    24ae:	e680      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
    24b0:	2300      	movs	r3, #0
    24b2:	461a      	mov	r2, r3
    24b4:	4619      	mov	r1, r3
    24b6:	4888      	ldr	r0, [pc, #544]	; (26d8 <MdmConnect_HttpConnectionSchedule+0x538>)
    24b8:	6800      	ldr	r0, [r0, #0]
    24ba:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    24bc:	4b7f      	ldr	r3, [pc, #508]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    24be:	2201      	movs	r2, #1
    24c0:	709a      	strb	r2, [r3, #2]
                                gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    24c2:	2208      	movs	r2, #8
    24c4:	70da      	strb	r2, [r3, #3]
                                vTaskDelay(TransmitDelayMs);
    24c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    24ca:	4b82      	ldr	r3, [pc, #520]	; (26d4 <MdmConnect_HttpConnectionSchedule+0x534>)
    24cc:	4798      	blx	r3
    24ce:	e670      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Transmit Queue is not empty");
    24d0:	4882      	ldr	r0, [pc, #520]	; (26dc <MdmConnect_HttpConnectionSchedule+0x53c>)
    24d2:	4b7f      	ldr	r3, [pc, #508]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    24d4:	4798      	blx	r3
    24d6:	e66c      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("No More Active Connections to close");
    24d8:	4881      	ldr	r0, [pc, #516]	; (26e0 <MdmConnect_HttpConnectionSchedule+0x540>)
    24da:	4b7d      	ldr	r3, [pc, #500]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    24dc:	4798      	blx	r3
                    gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    24de:	4b77      	ldr	r3, [pc, #476]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    24e0:	2201      	movs	r2, #1
    24e2:	711a      	strb	r2, [r3, #4]
                    gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    24e4:	2208      	movs	r2, #8
    24e6:	70da      	strb	r2, [r3, #3]
    24e8:	e663      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    24ea:	2b01      	cmp	r3, #1
    24ec:	f47f ae61 	bne.w	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    24f0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    24f4:	497b      	ldr	r1, [pc, #492]	; (26e4 <MdmConnect_HttpConnectionSchedule+0x544>)
    24f6:	4b7c      	ldr	r3, [pc, #496]	; (26e8 <MdmConnect_HttpConnectionSchedule+0x548>)
    24f8:	6818      	ldr	r0, [r3, #0]
    24fa:	4b7c      	ldr	r3, [pc, #496]	; (26ec <MdmConnect_HttpConnectionSchedule+0x54c>)
    24fc:	4798      	blx	r3
    24fe:	2801      	cmp	r0, #1
    2500:	d00f      	beq.n	2522 <MdmConnect_HttpConnectionSchedule+0x382>
                    if(forcedModemRebootCnt <= 3)
    2502:	4b6e      	ldr	r3, [pc, #440]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2504:	7c5b      	ldrb	r3, [r3, #17]
    2506:	2b03      	cmp	r3, #3
    2508:	d831      	bhi.n	256e <MdmConnect_HttpConnectionSchedule+0x3ce>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    250a:	4879      	ldr	r0, [pc, #484]	; (26f0 <MdmConnect_HttpConnectionSchedule+0x550>)
    250c:	4c70      	ldr	r4, [pc, #448]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    250e:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    2510:	4878      	ldr	r0, [pc, #480]	; (26f4 <MdmConnect_HttpConnectionSchedule+0x554>)
    2512:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    2514:	4a69      	ldr	r2, [pc, #420]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2516:	7c53      	ldrb	r3, [r2, #17]
    2518:	3301      	adds	r3, #1
    251a:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    251c:	4b76      	ldr	r3, [pc, #472]	; (26f8 <MdmConnect_HttpConnectionSchedule+0x558>)
    251e:	4798      	blx	r3
    2520:	e647      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
    2522:	4b66      	ldr	r3, [pc, #408]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2524:	7a1d      	ldrb	r5, [r3, #8]
    2526:	795c      	ldrb	r4, [r3, #5]
    2528:	4620      	mov	r0, r4
    252a:	4b65      	ldr	r3, [pc, #404]	; (26c0 <MdmConnect_HttpConnectionSchedule+0x520>)
    252c:	4798      	blx	r3
    252e:	4285      	cmp	r5, r0
    2530:	d113      	bne.n	255a <MdmConnect_HttpConnectionSchedule+0x3ba>
                        if(sessionIdCount > 0)
    2532:	b14c      	cbz	r4, 2548 <MdmConnect_HttpConnectionSchedule+0x3a8>
                            sessionIdCount--;
    2534:	4b61      	ldr	r3, [pc, #388]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2536:	3c01      	subs	r4, #1
    2538:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    253a:	2200      	movs	r2, #0
    253c:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    253e:	4b5f      	ldr	r3, [pc, #380]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2540:	68d8      	ldr	r0, [r3, #12]
    2542:	4b6e      	ldr	r3, [pc, #440]	; (26fc <MdmConnect_HttpConnectionSchedule+0x55c>)
    2544:	4798      	blx	r3
    2546:	e634      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                            gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    2548:	4b5c      	ldr	r3, [pc, #368]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    254a:	2201      	movs	r2, #1
    254c:	711a      	strb	r2, [r3, #4]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    254e:	2208      	movs	r2, #8
    2550:	70da      	strb	r2, [r3, #3]
                            DEBUG_PRINT("Closed All Active Connections");
    2552:	486b      	ldr	r0, [pc, #428]	; (2700 <MdmConnect_HttpConnectionSchedule+0x560>)
    2554:	4b5e      	ldr	r3, [pc, #376]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    2556:	4798      	blx	r3
    2558:	e7f1      	b.n	253e <MdmConnect_HttpConnectionSchedule+0x39e>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    255a:	486a      	ldr	r0, [pc, #424]	; (2704 <MdmConnect_HttpConnectionSchedule+0x564>)
    255c:	4b5c      	ldr	r3, [pc, #368]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    255e:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2560:	4b56      	ldr	r3, [pc, #344]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2562:	2200      	movs	r2, #0
    2564:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    2566:	68d8      	ldr	r0, [r3, #12]
    2568:	4b64      	ldr	r3, [pc, #400]	; (26fc <MdmConnect_HttpConnectionSchedule+0x55c>)
    256a:	4798      	blx	r3
    256c:	e621      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    256e:	4866      	ldr	r0, [pc, #408]	; (2708 <MdmConnect_HttpConnectionSchedule+0x568>)
    2570:	4c57      	ldr	r4, [pc, #348]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    2572:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    2574:	4865      	ldr	r0, [pc, #404]	; (270c <MdmConnect_HttpConnectionSchedule+0x56c>)
    2576:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    2578:	2200      	movs	r2, #0
    257a:	4b50      	ldr	r3, [pc, #320]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    257c:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    257e:	4b64      	ldr	r3, [pc, #400]	; (2710 <MdmConnect_HttpConnectionSchedule+0x570>)
    2580:	4798      	blx	r3
    2582:	e616      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    2584:	4b4d      	ldr	r3, [pc, #308]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2586:	789b      	ldrb	r3, [r3, #2]
    2588:	b1db      	cbz	r3, 25c2 <MdmConnect_HttpConnectionSchedule+0x422>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    258a:	2b01      	cmp	r3, #1
    258c:	f47f ae11 	bne.w	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    2590:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    2594:	4953      	ldr	r1, [pc, #332]	; (26e4 <MdmConnect_HttpConnectionSchedule+0x544>)
    2596:	4b54      	ldr	r3, [pc, #336]	; (26e8 <MdmConnect_HttpConnectionSchedule+0x548>)
    2598:	6818      	ldr	r0, [r3, #0]
    259a:	4b54      	ldr	r3, [pc, #336]	; (26ec <MdmConnect_HttpConnectionSchedule+0x54c>)
    259c:	4798      	blx	r3
    259e:	2801      	cmp	r0, #1
    25a0:	d04d      	beq.n	263e <MdmConnect_HttpConnectionSchedule+0x49e>
                    if(forcedModemRebootCnt <= 3)
    25a2:	4b46      	ldr	r3, [pc, #280]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    25a4:	7c5b      	ldrb	r3, [r3, #17]
    25a6:	2b03      	cmp	r3, #3
    25a8:	d87c      	bhi.n	26a4 <MdmConnect_HttpConnectionSchedule+0x504>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    25aa:	4851      	ldr	r0, [pc, #324]	; (26f0 <MdmConnect_HttpConnectionSchedule+0x550>)
    25ac:	4c48      	ldr	r4, [pc, #288]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    25ae:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    25b0:	4850      	ldr	r0, [pc, #320]	; (26f4 <MdmConnect_HttpConnectionSchedule+0x554>)
    25b2:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    25b4:	4a41      	ldr	r2, [pc, #260]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    25b6:	7c53      	ldrb	r3, [r2, #17]
    25b8:	3301      	adds	r3, #1
    25ba:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    25bc:	4b4e      	ldr	r3, [pc, #312]	; (26f8 <MdmConnect_HttpConnectionSchedule+0x558>)
    25be:	4798      	blx	r3
    25c0:	e5f7      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    25c2:	4b40      	ldr	r3, [pc, #256]	; (26c4 <MdmConnect_HttpConnectionSchedule+0x524>)
    25c4:	6818      	ldr	r0, [r3, #0]
    25c6:	4b53      	ldr	r3, [pc, #332]	; (2714 <MdmConnect_HttpConnectionSchedule+0x574>)
    25c8:	4798      	blx	r3
    25ca:	2800      	cmp	r0, #0
    25cc:	d133      	bne.n	2636 <MdmConnect_HttpConnectionSchedule+0x496>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    25ce:	2100      	movs	r1, #0
    25d0:	4b41      	ldr	r3, [pc, #260]	; (26d8 <MdmConnect_HttpConnectionSchedule+0x538>)
    25d2:	6818      	ldr	r0, [r3, #0]
    25d4:	4b50      	ldr	r3, [pc, #320]	; (2718 <MdmConnect_HttpConnectionSchedule+0x578>)
    25d6:	4798      	blx	r3
    25d8:	2801      	cmp	r0, #1
    25da:	d003      	beq.n	25e4 <MdmConnect_HttpConnectionSchedule+0x444>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    25dc:	484f      	ldr	r0, [pc, #316]	; (271c <MdmConnect_HttpConnectionSchedule+0x57c>)
    25de:	4b3c      	ldr	r3, [pc, #240]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    25e0:	4798      	blx	r3
    25e2:	e5e6      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    25e4:	2301      	movs	r3, #1
    25e6:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
    25ea:	231a      	movs	r3, #26
    25ec:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    25f0:	2300      	movs	r3, #0
    25f2:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    25f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    25f8:	4669      	mov	r1, sp
    25fa:	4832      	ldr	r0, [pc, #200]	; (26c4 <MdmConnect_HttpConnectionSchedule+0x524>)
    25fc:	6800      	ldr	r0, [r0, #0]
    25fe:	4c32      	ldr	r4, [pc, #200]	; (26c8 <MdmConnect_HttpConnectionSchedule+0x528>)
    2600:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    2602:	2801      	cmp	r0, #1
    2604:	d007      	beq.n	2616 <MdmConnect_HttpConnectionSchedule+0x476>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    2606:	4831      	ldr	r0, [pc, #196]	; (26cc <MdmConnect_HttpConnectionSchedule+0x52c>)
    2608:	4b31      	ldr	r3, [pc, #196]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    260a:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    260c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2610:	4b30      	ldr	r3, [pc, #192]	; (26d4 <MdmConnect_HttpConnectionSchedule+0x534>)
    2612:	4798      	blx	r3
    2614:	e5cd      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    2616:	2300      	movs	r3, #0
    2618:	461a      	mov	r2, r3
    261a:	4619      	mov	r1, r3
    261c:	482e      	ldr	r0, [pc, #184]	; (26d8 <MdmConnect_HttpConnectionSchedule+0x538>)
    261e:	6800      	ldr	r0, [r0, #0]
    2620:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    2622:	4b26      	ldr	r3, [pc, #152]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2624:	2201      	movs	r2, #1
    2626:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    2628:	2208      	movs	r2, #8
    262a:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    262c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2630:	4b28      	ldr	r3, [pc, #160]	; (26d4 <MdmConnect_HttpConnectionSchedule+0x534>)
    2632:	4798      	blx	r3
    2634:	e5bd      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    2636:	4829      	ldr	r0, [pc, #164]	; (26dc <MdmConnect_HttpConnectionSchedule+0x53c>)
    2638:	4b25      	ldr	r3, [pc, #148]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    263a:	4798      	blx	r3
    263c:	e5b9      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
    263e:	4b1f      	ldr	r3, [pc, #124]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2640:	7a1b      	ldrb	r3, [r3, #8]
    2642:	2b1a      	cmp	r3, #26
    2644:	d124      	bne.n	2690 <MdmConnect_HttpConnectionSchedule+0x4f0>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    2646:	4b1d      	ldr	r3, [pc, #116]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2648:	68d8      	ldr	r0, [r3, #12]
    264a:	4b35      	ldr	r3, [pc, #212]	; (2720 <MdmConnect_HttpConnectionSchedule+0x580>)
    264c:	4798      	blx	r3
    264e:	b1a0      	cbz	r0, 267a <MdmConnect_HttpConnectionSchedule+0x4da>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
    2650:	4834      	ldr	r0, [pc, #208]	; (2724 <MdmConnect_HttpConnectionSchedule+0x584>)
    2652:	4d1f      	ldr	r5, [pc, #124]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    2654:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    2656:	4c19      	ldr	r4, [pc, #100]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2658:	8961      	ldrh	r1, [r4, #10]
    265a:	68e0      	ldr	r0, [r4, #12]
    265c:	4b32      	ldr	r3, [pc, #200]	; (2728 <MdmConnect_HttpConnectionSchedule+0x588>)
    265e:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    2660:	4832      	ldr	r0, [pc, #200]	; (272c <MdmConnect_HttpConnectionSchedule+0x58c>)
    2662:	47a8      	blx	r5
                            gErrorRecoveryState = PDP_PERFORM_PS_CONNECTION_DETACH;
    2664:	2302      	movs	r3, #2
    2666:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2668:	2300      	movs	r3, #0
    266a:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    266c:	2308      	movs	r3, #8
    266e:	70e3      	strb	r3, [r4, #3]
                        vPortFree(ConnectionResponse.response);
    2670:	4b12      	ldr	r3, [pc, #72]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2672:	68d8      	ldr	r0, [r3, #12]
    2674:	4b21      	ldr	r3, [pc, #132]	; (26fc <MdmConnect_HttpConnectionSchedule+0x55c>)
    2676:	4798      	blx	r3
    2678:	e59b      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                            DEBUG_PRINT("Expected Response Not Received...");
    267a:	482d      	ldr	r0, [pc, #180]	; (2730 <MdmConnect_HttpConnectionSchedule+0x590>)
    267c:	4c14      	ldr	r4, [pc, #80]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    267e:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    2680:	482a      	ldr	r0, [pc, #168]	; (272c <MdmConnect_HttpConnectionSchedule+0x58c>)
    2682:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2684:	2200      	movs	r2, #0
    2686:	4b0d      	ldr	r3, [pc, #52]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2688:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    268a:	4b1b      	ldr	r3, [pc, #108]	; (26f8 <MdmConnect_HttpConnectionSchedule+0x558>)
    268c:	4798      	blx	r3
    268e:	e7ef      	b.n	2670 <MdmConnect_HttpConnectionSchedule+0x4d0>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    2690:	481c      	ldr	r0, [pc, #112]	; (2704 <MdmConnect_HttpConnectionSchedule+0x564>)
    2692:	4b0f      	ldr	r3, [pc, #60]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    2694:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2696:	4b09      	ldr	r3, [pc, #36]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    2698:	2200      	movs	r2, #0
    269a:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    269c:	68d8      	ldr	r0, [r3, #12]
    269e:	4b17      	ldr	r3, [pc, #92]	; (26fc <MdmConnect_HttpConnectionSchedule+0x55c>)
    26a0:	4798      	blx	r3
    26a2:	e586      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    26a4:	4818      	ldr	r0, [pc, #96]	; (2708 <MdmConnect_HttpConnectionSchedule+0x568>)
    26a6:	4c0a      	ldr	r4, [pc, #40]	; (26d0 <MdmConnect_HttpConnectionSchedule+0x530>)
    26a8:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    26aa:	4818      	ldr	r0, [pc, #96]	; (270c <MdmConnect_HttpConnectionSchedule+0x56c>)
    26ac:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    26ae:	2200      	movs	r2, #0
    26b0:	4b02      	ldr	r3, [pc, #8]	; (26bc <MdmConnect_HttpConnectionSchedule+0x51c>)
    26b2:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    26b4:	4b16      	ldr	r3, [pc, #88]	; (2710 <MdmConnect_HttpConnectionSchedule+0x570>)
    26b6:	4798      	blx	r3
    26b8:	e57b      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
    26ba:	bf00      	nop
    26bc:	200002d8 	.word	0x200002d8
    26c0:	00001645 	.word	0x00001645
    26c4:	20003568 	.word	0x20003568
    26c8:	000053cd 	.word	0x000053cd
    26cc:	00008968 	.word	0x00008968
    26d0:	0000336d 	.word	0x0000336d
    26d4:	0000605d 	.word	0x0000605d
    26d8:	2000357c 	.word	0x2000357c
    26dc:	00007878 	.word	0x00007878
    26e0:	0000899c 	.word	0x0000899c
    26e4:	200002e0 	.word	0x200002e0
    26e8:	20003544 	.word	0x20003544
    26ec:	000056dd 	.word	0x000056dd
    26f0:	00008e44 	.word	0x00008e44
    26f4:	00008e60 	.word	0x00008e60
    26f8:	000016c5 	.word	0x000016c5
    26fc:	000050a5 	.word	0x000050a5
    2700:	000089c0 	.word	0x000089c0
    2704:	000089e0 	.word	0x000089e0
    2708:	00008ea4 	.word	0x00008ea4
    270c:	00008ed8 	.word	0x00008ed8
    2710:	000035a5 	.word	0x000035a5
    2714:	00005a45 	.word	0x00005a45
    2718:	00005865 	.word	0x00005865
    271c:	0000784c 	.word	0x0000784c
    2720:	00001685 	.word	0x00001685
    2724:	00008a14 	.word	0x00008a14
    2728:	00003329 	.word	0x00003329
    272c:	00009368 	.word	0x00009368
    2730:	00008a34 	.word	0x00008a34
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2734:	4b4c      	ldr	r3, [pc, #304]	; (2868 <MdmConnect_HttpConnectionSchedule+0x6c8>)
    2736:	6818      	ldr	r0, [r3, #0]
    2738:	4b4c      	ldr	r3, [pc, #304]	; (286c <MdmConnect_HttpConnectionSchedule+0x6cc>)
    273a:	4798      	blx	r3
    273c:	2800      	cmp	r0, #0
    273e:	d133      	bne.n	27a8 <MdmConnect_HttpConnectionSchedule+0x608>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    2740:	2100      	movs	r1, #0
    2742:	4b4b      	ldr	r3, [pc, #300]	; (2870 <MdmConnect_HttpConnectionSchedule+0x6d0>)
    2744:	6818      	ldr	r0, [r3, #0]
    2746:	4b4b      	ldr	r3, [pc, #300]	; (2874 <MdmConnect_HttpConnectionSchedule+0x6d4>)
    2748:	4798      	blx	r3
    274a:	2801      	cmp	r0, #1
    274c:	d003      	beq.n	2756 <MdmConnect_HttpConnectionSchedule+0x5b6>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    274e:	484a      	ldr	r0, [pc, #296]	; (2878 <MdmConnect_HttpConnectionSchedule+0x6d8>)
    2750:	4b4a      	ldr	r3, [pc, #296]	; (287c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    2752:	4798      	blx	r3
    2754:	e52d      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    2756:	2301      	movs	r3, #1
    2758:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
    275c:	231b      	movs	r3, #27
    275e:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    2762:	2300      	movs	r3, #0
    2764:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2766:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    276a:	4669      	mov	r1, sp
    276c:	483e      	ldr	r0, [pc, #248]	; (2868 <MdmConnect_HttpConnectionSchedule+0x6c8>)
    276e:	6800      	ldr	r0, [r0, #0]
    2770:	4c43      	ldr	r4, [pc, #268]	; (2880 <MdmConnect_HttpConnectionSchedule+0x6e0>)
    2772:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    2774:	2801      	cmp	r0, #1
    2776:	d007      	beq.n	2788 <MdmConnect_HttpConnectionSchedule+0x5e8>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    2778:	4842      	ldr	r0, [pc, #264]	; (2884 <MdmConnect_HttpConnectionSchedule+0x6e4>)
    277a:	4b40      	ldr	r3, [pc, #256]	; (287c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    277c:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    277e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2782:	4b41      	ldr	r3, [pc, #260]	; (2888 <MdmConnect_HttpConnectionSchedule+0x6e8>)
    2784:	4798      	blx	r3
    2786:	e514      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    2788:	2300      	movs	r3, #0
    278a:	461a      	mov	r2, r3
    278c:	4619      	mov	r1, r3
    278e:	4838      	ldr	r0, [pc, #224]	; (2870 <MdmConnect_HttpConnectionSchedule+0x6d0>)
    2790:	6800      	ldr	r0, [r0, #0]
    2792:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    2794:	4b3d      	ldr	r3, [pc, #244]	; (288c <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2796:	2201      	movs	r2, #1
    2798:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    279a:	2208      	movs	r2, #8
    279c:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    279e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    27a2:	4b39      	ldr	r3, [pc, #228]	; (2888 <MdmConnect_HttpConnectionSchedule+0x6e8>)
    27a4:	4798      	blx	r3
    27a6:	e504      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    27a8:	4839      	ldr	r0, [pc, #228]	; (2890 <MdmConnect_HttpConnectionSchedule+0x6f0>)
    27aa:	4b34      	ldr	r3, [pc, #208]	; (287c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    27ac:	4798      	blx	r3
    27ae:	e500      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
    27b0:	4b36      	ldr	r3, [pc, #216]	; (288c <MdmConnect_HttpConnectionSchedule+0x6ec>)
    27b2:	7a1b      	ldrb	r3, [r3, #8]
    27b4:	2b1b      	cmp	r3, #27
    27b6:	d13f      	bne.n	2838 <MdmConnect_HttpConnectionSchedule+0x698>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    27b8:	4b34      	ldr	r3, [pc, #208]	; (288c <MdmConnect_HttpConnectionSchedule+0x6ec>)
    27ba:	68d8      	ldr	r0, [r3, #12]
    27bc:	4b35      	ldr	r3, [pc, #212]	; (2894 <MdmConnect_HttpConnectionSchedule+0x6f4>)
    27be:	4798      	blx	r3
    27c0:	2800      	cmp	r0, #0
    27c2:	d02b      	beq.n	281c <MdmConnect_HttpConnectionSchedule+0x67c>
                            DEBUG_PRINT("Detached the PDP PS");
    27c4:	4834      	ldr	r0, [pc, #208]	; (2898 <MdmConnect_HttpConnectionSchedule+0x6f8>)
    27c6:	4d2d      	ldr	r5, [pc, #180]	; (287c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    27c8:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    27ca:	4c30      	ldr	r4, [pc, #192]	; (288c <MdmConnect_HttpConnectionSchedule+0x6ec>)
    27cc:	8961      	ldrh	r1, [r4, #10]
    27ce:	68e0      	ldr	r0, [r4, #12]
    27d0:	4b32      	ldr	r3, [pc, #200]	; (289c <MdmConnect_HttpConnectionSchedule+0x6fc>)
    27d2:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    27d4:	4832      	ldr	r0, [pc, #200]	; (28a0 <MdmConnect_HttpConnectionSchedule+0x700>)
    27d6:	47a8      	blx	r5
                            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    27d8:	2300      	movs	r3, #0
    27da:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    27dc:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    27de:	70e3      	strb	r3, [r4, #3]
                            gHttpConnectionState = MDM_HTTP_DISCONNECTED;
    27e0:	7023      	strb	r3, [r4, #0]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    27e2:	7063      	strb	r3, [r4, #1]
                            sessionIdCount = 5;
    27e4:	2305      	movs	r3, #5
    27e6:	7163      	strb	r3, [r4, #5]
                            DEBUG_PRINT("Error Recovery Completed\r\n");
    27e8:	482e      	ldr	r0, [pc, #184]	; (28a4 <MdmConnect_HttpConnectionSchedule+0x704>)
    27ea:	47a8      	blx	r5
                            DEBUG_PRINT("=================================================\r\n");
    27ec:	482e      	ldr	r0, [pc, #184]	; (28a8 <MdmConnect_HttpConnectionSchedule+0x708>)
    27ee:	47a8      	blx	r5
                            DEBUG_PRINT("Establishing a new connection with server");
    27f0:	482e      	ldr	r0, [pc, #184]	; (28ac <MdmConnect_HttpConnectionSchedule+0x70c>)
    27f2:	47a8      	blx	r5
                            errorRecoveryCnt++;
    27f4:	7ca3      	ldrb	r3, [r4, #18]
    27f6:	3301      	adds	r3, #1
    27f8:	74a3      	strb	r3, [r4, #18]
                            vPortFree(ConnectionResponse.response);
    27fa:	68e0      	ldr	r0, [r4, #12]
    27fc:	4b2c      	ldr	r3, [pc, #176]	; (28b0 <MdmConnect_HttpConnectionSchedule+0x710>)
    27fe:	4798      	blx	r3
                            if(errorRecoveryCnt >=3)
    2800:	7ca3      	ldrb	r3, [r4, #18]
    2802:	2b02      	cmp	r3, #2
    2804:	f67f acd5 	bls.w	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                                DEBUG_PRINT("System is auto recovered for more than 3 times.");
    2808:	482a      	ldr	r0, [pc, #168]	; (28b4 <MdmConnect_HttpConnectionSchedule+0x714>)
    280a:	47a8      	blx	r5
                                DEBUG_PRINT("Performing a system restart....................\r\n");
    280c:	482a      	ldr	r0, [pc, #168]	; (28b8 <MdmConnect_HttpConnectionSchedule+0x718>)
    280e:	47a8      	blx	r5
                                errorRecoveryCnt = 0;
    2810:	2200      	movs	r2, #0
    2812:	4b1e      	ldr	r3, [pc, #120]	; (288c <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2814:	749a      	strb	r2, [r3, #18]
                                requestWatchDogForcedReset();
    2816:	4b29      	ldr	r3, [pc, #164]	; (28bc <MdmConnect_HttpConnectionSchedule+0x71c>)
    2818:	4798      	blx	r3
    281a:	e4ca      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                            DEBUG_PRINT("Expected Response Not Received...");
    281c:	4828      	ldr	r0, [pc, #160]	; (28c0 <MdmConnect_HttpConnectionSchedule+0x720>)
    281e:	4c17      	ldr	r4, [pc, #92]	; (287c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    2820:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    2822:	481f      	ldr	r0, [pc, #124]	; (28a0 <MdmConnect_HttpConnectionSchedule+0x700>)
    2824:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2826:	4b19      	ldr	r3, [pc, #100]	; (288c <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2828:	2200      	movs	r2, #0
    282a:	709a      	strb	r2, [r3, #2]
                            vPortFree(ConnectionResponse.response);
    282c:	68d8      	ldr	r0, [r3, #12]
    282e:	4b20      	ldr	r3, [pc, #128]	; (28b0 <MdmConnect_HttpConnectionSchedule+0x710>)
    2830:	4798      	blx	r3
                            performForcedRebootOfModem();
    2832:	4b24      	ldr	r3, [pc, #144]	; (28c4 <MdmConnect_HttpConnectionSchedule+0x724>)
    2834:	4798      	blx	r3
    2836:	e4bc      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    2838:	4823      	ldr	r0, [pc, #140]	; (28c8 <MdmConnect_HttpConnectionSchedule+0x728>)
    283a:	4b10      	ldr	r3, [pc, #64]	; (287c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    283c:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    283e:	4b13      	ldr	r3, [pc, #76]	; (288c <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2840:	2200      	movs	r2, #0
    2842:	709a      	strb	r2, [r3, #2]
                        gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    2844:	2208      	movs	r2, #8
    2846:	70da      	strb	r2, [r3, #3]
                        vPortFree(ConnectionResponse.response);
    2848:	68d8      	ldr	r0, [r3, #12]
    284a:	4b19      	ldr	r3, [pc, #100]	; (28b0 <MdmConnect_HttpConnectionSchedule+0x710>)
    284c:	4798      	blx	r3
    284e:	e4b0      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    2850:	481e      	ldr	r0, [pc, #120]	; (28cc <MdmConnect_HttpConnectionSchedule+0x72c>)
    2852:	4c0a      	ldr	r4, [pc, #40]	; (287c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    2854:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    2856:	481e      	ldr	r0, [pc, #120]	; (28d0 <MdmConnect_HttpConnectionSchedule+0x730>)
    2858:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    285a:	4a0c      	ldr	r2, [pc, #48]	; (288c <MdmConnect_HttpConnectionSchedule+0x6ec>)
    285c:	7c53      	ldrb	r3, [r2, #17]
    285e:	3301      	adds	r3, #1
    2860:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    2862:	4b18      	ldr	r3, [pc, #96]	; (28c4 <MdmConnect_HttpConnectionSchedule+0x724>)
    2864:	4798      	blx	r3
    2866:	e4a4      	b.n	21b2 <MdmConnect_HttpConnectionSchedule+0x12>
    2868:	20003568 	.word	0x20003568
    286c:	00005a45 	.word	0x00005a45
    2870:	2000357c 	.word	0x2000357c
    2874:	00005865 	.word	0x00005865
    2878:	0000784c 	.word	0x0000784c
    287c:	0000336d 	.word	0x0000336d
    2880:	000053cd 	.word	0x000053cd
    2884:	00008968 	.word	0x00008968
    2888:	0000605d 	.word	0x0000605d
    288c:	200002d8 	.word	0x200002d8
    2890:	00007878 	.word	0x00007878
    2894:	00001685 	.word	0x00001685
    2898:	00008a88 	.word	0x00008a88
    289c:	00003329 	.word	0x00003329
    28a0:	00009368 	.word	0x00009368
    28a4:	00008f24 	.word	0x00008f24
    28a8:	00008f40 	.word	0x00008f40
    28ac:	00008f74 	.word	0x00008f74
    28b0:	000050a5 	.word	0x000050a5
    28b4:	00008fa0 	.word	0x00008fa0
    28b8:	00008fd0 	.word	0x00008fd0
    28bc:	000035a5 	.word	0x000035a5
    28c0:	00008a34 	.word	0x00008a34
    28c4:	000016c5 	.word	0x000016c5
    28c8:	000089e0 	.word	0x000089e0
    28cc:	00008e44 	.word	0x00008e44
    28d0:	00008e60 	.word	0x00008e60

000028d4 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
    28d4:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
    28d6:	490d      	ldr	r1, [pc, #52]	; (290c <mdmCtrlr_DataCommInit+0x38>)
    28d8:	480d      	ldr	r0, [pc, #52]	; (2910 <mdmCtrlr_DataCommInit+0x3c>)
    28da:	4b0e      	ldr	r3, [pc, #56]	; (2914 <mdmCtrlr_DataCommInit+0x40>)
    28dc:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
    28de:	b100      	cbz	r0, 28e2 <mdmCtrlr_DataCommInit+0xe>
    28e0:	bd10      	pop	{r4, pc}
	{
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
    28e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    28e6:	490c      	ldr	r1, [pc, #48]	; (2918 <mdmCtrlr_DataCommInit+0x44>)
    28e8:	480c      	ldr	r0, [pc, #48]	; (291c <mdmCtrlr_DataCommInit+0x48>)
    28ea:	4b0d      	ldr	r3, [pc, #52]	; (2920 <mdmCtrlr_DataCommInit+0x4c>)
    28ec:	4798      	blx	r3
	}
	
	if(initStatus == ERR_NONE)
    28ee:	2800      	cmp	r0, #0
    28f0:	d1f6      	bne.n	28e0 <mdmCtrlr_DataCommInit+0xc>
	{
		/* Enable all of the UART interrupts for SERCOM3 */
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
    28f2:	4c07      	ldr	r4, [pc, #28]	; (2910 <mdmCtrlr_DataCommInit+0x3c>)
    28f4:	2201      	movs	r2, #1
    28f6:	4611      	mov	r1, r2
    28f8:	4620      	mov	r0, r4
    28fa:	4b0a      	ldr	r3, [pc, #40]	; (2924 <mdmCtrlr_DataCommInit+0x50>)
    28fc:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
    28fe:	4620      	mov	r0, r4
    2900:	4b09      	ldr	r3, [pc, #36]	; (2928 <mdmCtrlr_DataCommInit+0x54>)
    2902:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
    2904:	4b09      	ldr	r3, [pc, #36]	; (292c <mdmCtrlr_DataCommInit+0x58>)
    2906:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
	}
	else
	{
		//DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
	}
}
    290a:	e7e9      	b.n	28e0 <mdmCtrlr_DataCommInit+0xc>
    290c:	41014000 	.word	0x41014000
    2910:	20000028 	.word	0x20000028
    2914:	000044f5 	.word	0x000044f5
    2918:	20003588 	.word	0x20003588
    291c:	20003d88 	.word	0x20003d88
    2920:	00003bdd 	.word	0x00003bdd
    2924:	000045a1 	.word	0x000045a1
    2928:	00004569 	.word	0x00004569
    292c:	e000e100 	.word	0xe000e100

00002930 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    2930:	2201      	movs	r2, #1
    2932:	4b01      	ldr	r3, [pc, #4]	; (2938 <SERCOM3_0_Handler+0x8>)
    2934:	761a      	strb	r2, [r3, #24]
    2936:	4770      	bx	lr
    2938:	41014000 	.word	0x41014000

0000293c <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    293c:	2202      	movs	r2, #2
    293e:	4b01      	ldr	r3, [pc, #4]	; (2944 <SERCOM3_1_Handler+0x8>)
    2940:	761a      	strb	r2, [r3, #24]
    2942:	4770      	bx	lr
    2944:	41014000 	.word	0x41014000

00002948 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
    2948:	b530      	push	{r4, r5, lr}
    294a:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
    294c:	4d1a      	ldr	r5, [pc, #104]	; (29b8 <SERCOM3_2_Handler+0x70>)
    294e:	4c1b      	ldr	r4, [pc, #108]	; (29bc <SERCOM3_2_Handler+0x74>)
    2950:	4628      	mov	r0, r5
    2952:	47a0      	blx	r4
    2954:	2800      	cmp	r0, #0
    2956:	d0fb      	beq.n	2950 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
    2958:	4817      	ldr	r0, [pc, #92]	; (29b8 <SERCOM3_2_Handler+0x70>)
    295a:	4b19      	ldr	r3, [pc, #100]	; (29c0 <SERCOM3_2_Handler+0x78>)
    295c:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
    295e:	4601      	mov	r1, r0
    2960:	4818      	ldr	r0, [pc, #96]	; (29c4 <SERCOM3_2_Handler+0x7c>)
    2962:	4b19      	ldr	r3, [pc, #100]	; (29c8 <SERCOM3_2_Handler+0x80>)
    2964:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
    2966:	4b19      	ldr	r3, [pc, #100]	; (29cc <SERCOM3_2_Handler+0x84>)
    2968:	4798      	blx	r3
    296a:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
    296c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    2970:	d101      	bne.n	2976 <SERCOM3_2_Handler+0x2e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}
}
    2972:	b009      	add	sp, #36	; 0x24
    2974:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
    2976:	a902      	add	r1, sp, #8
    2978:	4b15      	ldr	r3, [pc, #84]	; (29d0 <SERCOM3_2_Handler+0x88>)
    297a:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
    297c:	4811      	ldr	r0, [pc, #68]	; (29c4 <SERCOM3_2_Handler+0x7c>)
    297e:	4b15      	ldr	r3, [pc, #84]	; (29d4 <SERCOM3_2_Handler+0x8c>)
    2980:	4798      	blx	r3
    2982:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2986:	4298      	cmp	r0, r3
    2988:	d3f3      	bcc.n	2972 <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
    298a:	4b13      	ldr	r3, [pc, #76]	; (29d8 <SERCOM3_2_Handler+0x90>)
    298c:	6818      	ldr	r0, [r3, #0]
    298e:	ab07      	add	r3, sp, #28
    2990:	9300      	str	r3, [sp, #0]
    2992:	2300      	movs	r3, #0
    2994:	2203      	movs	r2, #3
    2996:	b2e1      	uxtb	r1, r4
    2998:	4c10      	ldr	r4, [pc, #64]	; (29dc <SERCOM3_2_Handler+0x94>)
    299a:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    299c:	9b07      	ldr	r3, [sp, #28]
    299e:	b13b      	cbz	r3, 29b0 <SERCOM3_2_Handler+0x68>
    29a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    29a4:	4b0e      	ldr	r3, [pc, #56]	; (29e0 <SERCOM3_2_Handler+0x98>)
    29a6:	601a      	str	r2, [r3, #0]
    29a8:	f3bf 8f4f 	dsb	sy
    29ac:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
    29b0:	2000      	movs	r0, #0
    29b2:	4b0c      	ldr	r3, [pc, #48]	; (29e4 <SERCOM3_2_Handler+0x9c>)
    29b4:	4798      	blx	r3
}
    29b6:	e7dc      	b.n	2972 <SERCOM3_2_Handler+0x2a>
    29b8:	20000028 	.word	0x20000028
    29bc:	00004595 	.word	0x00004595
    29c0:	00004583 	.word	0x00004583
    29c4:	20003d88 	.word	0x20003d88
    29c8:	00003c71 	.word	0x00003c71
    29cc:	00001639 	.word	0x00001639
    29d0:	0000143d 	.word	0x0000143d
    29d4:	00003cb1 	.word	0x00003cb1
    29d8:	20003560 	.word	0x20003560
    29dc:	00006611 	.word	0x00006611
    29e0:	e000ed04 	.word	0xe000ed04
    29e4:	0000162d 	.word	0x0000162d

000029e8 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
    29e8:	b570      	push	{r4, r5, r6, lr}
    29ea:	4605      	mov	r5, r0
    29ec:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
    29ee:	4c05      	ldr	r4, [pc, #20]	; (2a04 <mdmCtrlr_SendDataToModem+0x1c>)
    29f0:	4620      	mov	r0, r4
    29f2:	4b05      	ldr	r3, [pc, #20]	; (2a08 <mdmCtrlr_SendDataToModem+0x20>)
    29f4:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
    29f6:	4632      	mov	r2, r6
    29f8:	4629      	mov	r1, r5
    29fa:	4620      	mov	r0, r4
    29fc:	4b03      	ldr	r3, [pc, #12]	; (2a0c <mdmCtrlr_SendDataToModem+0x24>)
    29fe:	4798      	blx	r3
}
    2a00:	bd70      	pop	{r4, r5, r6, pc}
    2a02:	bf00      	nop
    2a04:	20000028 	.word	0x20000028
    2a08:	00004569 	.word	0x00004569
    2a0c:	000032a5 	.word	0x000032a5

00002a10 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
    2a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a12:	b083      	sub	sp, #12
    2a14:	4605      	mov	r5, r0
    2a16:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
    2a18:	480d      	ldr	r0, [pc, #52]	; (2a50 <mdmCtrlr_ReadResponseFromModem+0x40>)
    2a1a:	4b0e      	ldr	r3, [pc, #56]	; (2a54 <mdmCtrlr_ReadResponseFromModem+0x44>)
    2a1c:	4798      	blx	r3
    2a1e:	42b0      	cmp	r0, r6
    2a20:	d201      	bcs.n	2a26 <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
    2a22:	b003      	add	sp, #12
    2a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
    2a26:	a801      	add	r0, sp, #4
    2a28:	4b0b      	ldr	r3, [pc, #44]	; (2a58 <mdmCtrlr_ReadResponseFromModem+0x48>)
    2a2a:	4798      	blx	r3
		while (readCnt < length)
    2a2c:	b166      	cbz	r6, 2a48 <mdmCtrlr_ReadResponseFromModem+0x38>
    2a2e:	462c      	mov	r4, r5
    2a30:	3e01      	subs	r6, #1
    2a32:	b2b6      	uxth	r6, r6
    2a34:	3601      	adds	r6, #1
    2a36:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
    2a38:	4f05      	ldr	r7, [pc, #20]	; (2a50 <mdmCtrlr_ReadResponseFromModem+0x40>)
    2a3a:	4e08      	ldr	r6, [pc, #32]	; (2a5c <mdmCtrlr_ReadResponseFromModem+0x4c>)
    2a3c:	4621      	mov	r1, r4
    2a3e:	4638      	mov	r0, r7
    2a40:	47b0      	blx	r6
    2a42:	3401      	adds	r4, #1
		while (readCnt < length)
    2a44:	42ac      	cmp	r4, r5
    2a46:	d1f9      	bne.n	2a3c <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
    2a48:	a801      	add	r0, sp, #4
    2a4a:	4b05      	ldr	r3, [pc, #20]	; (2a60 <mdmCtrlr_ReadResponseFromModem+0x50>)
    2a4c:	4798      	blx	r3
    2a4e:	e7e8      	b.n	2a22 <mdmCtrlr_ReadResponseFromModem+0x12>
    2a50:	20003d88 	.word	0x20003d88
    2a54:	00003cb1 	.word	0x00003cb1
    2a58:	00003b85 	.word	0x00003b85
    2a5c:	00003c2d 	.word	0x00003c2d
    2a60:	00003b93 	.word	0x00003b93

00002a64 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
    2a64:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
    2a66:	4802      	ldr	r0, [pc, #8]	; (2a70 <mdmCtrlr_FlushRxBuffer+0xc>)
    2a68:	4b02      	ldr	r3, [pc, #8]	; (2a74 <mdmCtrlr_FlushRxBuffer+0x10>)
    2a6a:	4798      	blx	r3
    2a6c:	bd08      	pop	{r3, pc}
    2a6e:	bf00      	nop
    2a70:	20003d88 	.word	0x20003d88
    2a74:	00003cd5 	.word	0x00003cd5

00002a78 <mdmCtrlr_GetUnsolicitedResponseLength>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
uint32_t mdmCtrlr_GetUnsolicitedResponseLength(void)
{
    2a78:	b508      	push	{r3, lr}
	uint32_t length = 0;

	length = ringbuffer_num(&RxRingBuffer);
    2a7a:	4802      	ldr	r0, [pc, #8]	; (2a84 <mdmCtrlr_GetUnsolicitedResponseLength+0xc>)
    2a7c:	4b02      	ldr	r3, [pc, #8]	; (2a88 <mdmCtrlr_GetUnsolicitedResponseLength+0x10>)
    2a7e:	4798      	blx	r3

	return length;
}
    2a80:	bd08      	pop	{r3, pc}
    2a82:	bf00      	nop
    2a84:	20003d88 	.word	0x20003d88
    2a88:	00003cb1 	.word	0x00003cb1

00002a8c <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
    2a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a8e:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
    2a90:	2300      	movs	r3, #0
    2a92:	4a6c      	ldr	r2, [pc, #432]	; (2c44 <ModemDiagTask+0x1b8>)
    2a94:	7013      	strb	r3, [r2, #0]
	bModemDiagDataBaseUpdated = false;
    2a96:	4a6c      	ldr	r2, [pc, #432]	; (2c48 <ModemDiagTask+0x1bc>)
    2a98:	4611      	mov	r1, r2
    2a9a:	f801 3b04 	strb.w	r3, [r1], #4
	
    memset(atResponseData,0,sizeof(atResponseData));
    2a9e:	8093      	strh	r3, [r2, #4]
    2aa0:	708b      	strb	r3, [r1, #2]
    memset(atCgsnResponseData,0,sizeof(atCgsnResponseData));
    2aa2:	6093      	str	r3, [r2, #8]
    2aa4:	60d3      	str	r3, [r2, #12]
    2aa6:	6113      	str	r3, [r2, #16]
    2aa8:	6153      	str	r3, [r2, #20]
    memset(atKgsnResponseData,0,sizeof(atKgsnResponseData));
    2aaa:	6193      	str	r3, [r2, #24]
    2aac:	61d3      	str	r3, [r2, #28]
    2aae:	6213      	str	r3, [r2, #32]
    2ab0:	f8c2 3023 	str.w	r3, [r2, #35]	; 0x23
    memset(atCarrierResponseData,0,sizeof(atCarrierResponseData));
    2ab4:	6293      	str	r3, [r2, #40]	; 0x28
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2ab6:	4c65      	ldr	r4, [pc, #404]	; (2c4c <ModemDiagTask+0x1c0>)
           (false != isFotaVerificationDone()))
    2ab8:	4d65      	ldr	r5, [pc, #404]	; (2c50 <ModemDiagTask+0x1c4>)
    const TickType_t powerUpDelayMs = pdMS_TO_TICKS(7000UL);
    BaseType_t TxQueuePushStatus;
    AtTxMsgType TxMsgQueueData;
    CmdResponseType cmdResponse;

    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2aba:	4e66      	ldr	r6, [pc, #408]	; (2c54 <ModemDiagTask+0x1c8>)
    2abc:	e029      	b.n	2b12 <ModemDiagTask+0x86>
        {
            switch(ModemDiagState)
            {
                case MODEM_DIAG_TEST_AT:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    2abe:	2304      	movs	r3, #4
    2ac0:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
    2ac4:	2301      	movs	r3, #1
    2ac6:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2aca:	2300      	movs	r3, #0
    2acc:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2ace:	2264      	movs	r2, #100	; 0x64
    2ad0:	4669      	mov	r1, sp
    2ad2:	6830      	ldr	r0, [r6, #0]
    2ad4:	4f60      	ldr	r7, [pc, #384]	; (2c58 <ModemDiagTask+0x1cc>)
    2ad6:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    2ad8:	2801      	cmp	r0, #1
    2ada:	d10d      	bne.n	2af8 <ModemDiagTask+0x6c>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    2adc:	2300      	movs	r3, #0
    2ade:	461a      	mov	r2, r3
    2ae0:	4619      	mov	r1, r3
    2ae2:	485e      	ldr	r0, [pc, #376]	; (2c5c <ModemDiagTask+0x1d0>)
    2ae4:	6800      	ldr	r0, [r0, #0]
    2ae6:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    2ae8:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2aec:	4b5c      	ldr	r3, [pc, #368]	; (2c60 <ModemDiagTask+0x1d4>)
    2aee:	4798      	blx	r3
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
    2af0:	2201      	movs	r2, #1
    2af2:	4b54      	ldr	r3, [pc, #336]	; (2c44 <ModemDiagTask+0x1b8>)
    2af4:	701a      	strb	r2, [r3, #0]
    2af6:	e006      	b.n	2b06 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    2af8:	485a      	ldr	r0, [pc, #360]	; (2c64 <ModemDiagTask+0x1d8>)
    2afa:	4b5b      	ldr	r3, [pc, #364]	; (2c68 <ModemDiagTask+0x1dc>)
    2afc:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    2afe:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2b02:	4b57      	ldr	r3, [pc, #348]	; (2c60 <ModemDiagTask+0x1d4>)
    2b04:	4798      	blx	r3
            kickWatchDog();
    2b06:	4b59      	ldr	r3, [pc, #356]	; (2c6c <ModemDiagTask+0x1e0>)
    2b08:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    2b0a:	f44f 7016 	mov.w	r0, #600	; 0x258
    2b0e:	4b54      	ldr	r3, [pc, #336]	; (2c60 <ModemDiagTask+0x1d4>)
    2b10:	4798      	blx	r3
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2b12:	47a0      	blx	r4
    2b14:	2804      	cmp	r0, #4
    2b16:	d1fc      	bne.n	2b12 <ModemDiagTask+0x86>
           (false != isFotaVerificationDone()))
    2b18:	47a8      	blx	r5
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2b1a:	2800      	cmp	r0, #0
    2b1c:	d0f9      	beq.n	2b12 <ModemDiagTask+0x86>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2b1e:	6830      	ldr	r0, [r6, #0]
    2b20:	4b53      	ldr	r3, [pc, #332]	; (2c70 <ModemDiagTask+0x1e4>)
    2b22:	4798      	blx	r3
    2b24:	2800      	cmp	r0, #0
    2b26:	d1ee      	bne.n	2b06 <ModemDiagTask+0x7a>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    2b28:	2100      	movs	r1, #0
    2b2a:	4b4c      	ldr	r3, [pc, #304]	; (2c5c <ModemDiagTask+0x1d0>)
    2b2c:	6818      	ldr	r0, [r3, #0]
    2b2e:	4b51      	ldr	r3, [pc, #324]	; (2c74 <ModemDiagTask+0x1e8>)
    2b30:	4798      	blx	r3
    2b32:	2801      	cmp	r0, #1
    2b34:	d1e7      	bne.n	2b06 <ModemDiagTask+0x7a>
            switch(ModemDiagState)
    2b36:	4b43      	ldr	r3, [pc, #268]	; (2c44 <ModemDiagTask+0x1b8>)
    2b38:	781b      	ldrb	r3, [r3, #0]
    2b3a:	2b03      	cmp	r3, #3
    2b3c:	d879      	bhi.n	2c32 <ModemDiagTask+0x1a6>
    2b3e:	a201      	add	r2, pc, #4	; (adr r2, 2b44 <ModemDiagTask+0xb8>)
    2b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2b44:	00002abf 	.word	0x00002abf
    2b48:	00002b55 	.word	0x00002b55
    2b4c:	00002b9f 	.word	0x00002b9f
    2b50:	00002be9 	.word	0x00002be9
                }
                break;

                case MODEM_DIAG_GET_IMEI:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    2b54:	2304      	movs	r3, #4
    2b56:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
    2b5a:	2302      	movs	r3, #2
    2b5c:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2b60:	2300      	movs	r3, #0
    2b62:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2b64:	2264      	movs	r2, #100	; 0x64
    2b66:	4669      	mov	r1, sp
    2b68:	6830      	ldr	r0, [r6, #0]
    2b6a:	4f3b      	ldr	r7, [pc, #236]	; (2c58 <ModemDiagTask+0x1cc>)
    2b6c:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    2b6e:	2801      	cmp	r0, #1
    2b70:	d10d      	bne.n	2b8e <ModemDiagTask+0x102>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    2b72:	2300      	movs	r3, #0
    2b74:	461a      	mov	r2, r3
    2b76:	4619      	mov	r1, r3
    2b78:	4838      	ldr	r0, [pc, #224]	; (2c5c <ModemDiagTask+0x1d0>)
    2b7a:	6800      	ldr	r0, [r0, #0]
    2b7c:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    2b7e:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2b82:	4b37      	ldr	r3, [pc, #220]	; (2c60 <ModemDiagTask+0x1d4>)
    2b84:	4798      	blx	r3
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
    2b86:	2202      	movs	r2, #2
    2b88:	4b2e      	ldr	r3, [pc, #184]	; (2c44 <ModemDiagTask+0x1b8>)
    2b8a:	701a      	strb	r2, [r3, #0]
    2b8c:	e7bb      	b.n	2b06 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    2b8e:	4835      	ldr	r0, [pc, #212]	; (2c64 <ModemDiagTask+0x1d8>)
    2b90:	4b35      	ldr	r3, [pc, #212]	; (2c68 <ModemDiagTask+0x1dc>)
    2b92:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    2b94:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2b98:	4b31      	ldr	r3, [pc, #196]	; (2c60 <ModemDiagTask+0x1d4>)
    2b9a:	4798      	blx	r3
    2b9c:	e7b3      	b.n	2b06 <ModemDiagTask+0x7a>
                }
                break;

                case MODEM_DIAG_GET_SERIAL:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    2b9e:	2304      	movs	r3, #4
    2ba0:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
    2ba4:	2307      	movs	r3, #7
    2ba6:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2baa:	2300      	movs	r3, #0
    2bac:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2bae:	2264      	movs	r2, #100	; 0x64
    2bb0:	4669      	mov	r1, sp
    2bb2:	6830      	ldr	r0, [r6, #0]
    2bb4:	4f28      	ldr	r7, [pc, #160]	; (2c58 <ModemDiagTask+0x1cc>)
    2bb6:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    2bb8:	2801      	cmp	r0, #1
    2bba:	d10d      	bne.n	2bd8 <ModemDiagTask+0x14c>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    2bbc:	2300      	movs	r3, #0
    2bbe:	461a      	mov	r2, r3
    2bc0:	4619      	mov	r1, r3
    2bc2:	4826      	ldr	r0, [pc, #152]	; (2c5c <ModemDiagTask+0x1d0>)
    2bc4:	6800      	ldr	r0, [r0, #0]
    2bc6:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    2bc8:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2bcc:	4b24      	ldr	r3, [pc, #144]	; (2c60 <ModemDiagTask+0x1d4>)
    2bce:	4798      	blx	r3
                        ModemDiagState = MODEM_DIAG_MAX_STATE;
    2bd0:	2204      	movs	r2, #4
    2bd2:	4b1c      	ldr	r3, [pc, #112]	; (2c44 <ModemDiagTask+0x1b8>)
    2bd4:	701a      	strb	r2, [r3, #0]
    2bd6:	e796      	b.n	2b06 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    2bd8:	4822      	ldr	r0, [pc, #136]	; (2c64 <ModemDiagTask+0x1d8>)
    2bda:	4b23      	ldr	r3, [pc, #140]	; (2c68 <ModemDiagTask+0x1dc>)
    2bdc:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    2bde:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2be2:	4b1f      	ldr	r3, [pc, #124]	; (2c60 <ModemDiagTask+0x1d4>)
    2be4:	4798      	blx	r3
    2be6:	e78e      	b.n	2b06 <ModemDiagTask+0x7a>
                }
                break;

                case MODEM_DIAG_GET_CARRIER:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    2be8:	2304      	movs	r3, #4
    2bea:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
    2bee:	2303      	movs	r3, #3
    2bf0:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2bf4:	2300      	movs	r3, #0
    2bf6:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2bf8:	2264      	movs	r2, #100	; 0x64
    2bfa:	4669      	mov	r1, sp
    2bfc:	6830      	ldr	r0, [r6, #0]
    2bfe:	4f16      	ldr	r7, [pc, #88]	; (2c58 <ModemDiagTask+0x1cc>)
    2c00:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    2c02:	2801      	cmp	r0, #1
    2c04:	d10d      	bne.n	2c22 <ModemDiagTask+0x196>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    2c06:	2300      	movs	r3, #0
    2c08:	461a      	mov	r2, r3
    2c0a:	4619      	mov	r1, r3
    2c0c:	4813      	ldr	r0, [pc, #76]	; (2c5c <ModemDiagTask+0x1d0>)
    2c0e:	6800      	ldr	r0, [r0, #0]
    2c10:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    2c12:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2c16:	4b12      	ldr	r3, [pc, #72]	; (2c60 <ModemDiagTask+0x1d4>)
    2c18:	4798      	blx	r3
                        ModemDiagState = 100;
    2c1a:	2264      	movs	r2, #100	; 0x64
    2c1c:	4b09      	ldr	r3, [pc, #36]	; (2c44 <ModemDiagTask+0x1b8>)
    2c1e:	701a      	strb	r2, [r3, #0]
    2c20:	e771      	b.n	2b06 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    2c22:	4810      	ldr	r0, [pc, #64]	; (2c64 <ModemDiagTask+0x1d8>)
    2c24:	4b10      	ldr	r3, [pc, #64]	; (2c68 <ModemDiagTask+0x1dc>)
    2c26:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    2c28:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2c2c:	4b0c      	ldr	r3, [pc, #48]	; (2c60 <ModemDiagTask+0x1d4>)
    2c2e:	4798      	blx	r3
    2c30:	e769      	b.n	2b06 <ModemDiagTask+0x7a>
                }
                break;

                default:
                {
                	xSemaphoreGive(AtTxQueueLoadSemaphore);
    2c32:	2300      	movs	r3, #0
    2c34:	461a      	mov	r2, r3
    2c36:	4619      	mov	r1, r3
    2c38:	4808      	ldr	r0, [pc, #32]	; (2c5c <ModemDiagTask+0x1d0>)
    2c3a:	6800      	ldr	r0, [r0, #0]
    2c3c:	4f06      	ldr	r7, [pc, #24]	; (2c58 <ModemDiagTask+0x1cc>)
    2c3e:	47b8      	blx	r7
    2c40:	e761      	b.n	2b06 <ModemDiagTask+0x7a>
    2c42:	bf00      	nop
    2c44:	20003d98 	.word	0x20003d98
    2c48:	200002ec 	.word	0x200002ec
    2c4c:	00002d49 	.word	0x00002d49
    2c50:	000010bd 	.word	0x000010bd
    2c54:	20003568 	.word	0x20003568
    2c58:	000053cd 	.word	0x000053cd
    2c5c:	2000357c 	.word	0x2000357c
    2c60:	0000605d 	.word	0x0000605d
    2c64:	0000902c 	.word	0x0000902c
    2c68:	0000336d 	.word	0x0000336d
    2c6c:	00003565 	.word	0x00003565
    2c70:	00005a45 	.word	0x00005a45
    2c74:	00005865 	.word	0x00005865

00002c78 <ModemDiagUpdateDataBase>:
{
    2c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c7a:	4604      	mov	r4, r0
    switch(cmd)
    2c7c:	780b      	ldrb	r3, [r1, #0]
    2c7e:	3b01      	subs	r3, #1
    2c80:	2b06      	cmp	r3, #6
    2c82:	d826      	bhi.n	2cd2 <ModemDiagUpdateDataBase+0x5a>
    2c84:	e8df f003 	tbb	[pc, r3]
    2c88:	25243725 	.word	0x25243725
    2c8c:	2525      	.short	0x2525
    2c8e:	04          	.byte	0x04
    2c8f:	00          	.byte	0x00
			while(parseCnt <= (cmdResponse->length - startIndex))
    2c90:	884b      	ldrh	r3, [r1, #2]
    2c92:	2b07      	cmp	r3, #7
    2c94:	d40d      	bmi.n	2cb2 <ModemDiagUpdateDataBase+0x3a>
    2c96:	2200      	movs	r2, #0
    2c98:	4613      	mov	r3, r2
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
    2c9a:	4d20      	ldr	r5, [pc, #128]	; (2d1c <ModemDiagUpdateDataBase+0xa4>)
    2c9c:	18a0      	adds	r0, r4, r2
    2c9e:	79c0      	ldrb	r0, [r0, #7]
    2ca0:	442a      	add	r2, r5
    2ca2:	7610      	strb	r0, [r2, #24]
				parseCnt++;
    2ca4:	3301      	adds	r3, #1
    2ca6:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
    2ca8:	461a      	mov	r2, r3
    2caa:	8848      	ldrh	r0, [r1, #2]
    2cac:	3807      	subs	r0, #7
    2cae:	4283      	cmp	r3, r0
    2cb0:	ddf4      	ble.n	2c9c <ModemDiagUpdateDataBase+0x24>
			bModemDiagDataBaseUpdated = true;
    2cb2:	4d1a      	ldr	r5, [pc, #104]	; (2d1c <ModemDiagUpdateDataBase+0xa4>)
    2cb4:	2601      	movs	r6, #1
    2cb6:	462c      	mov	r4, r5
    2cb8:	f804 6b18 	strb.w	r6, [r4], #24
			DEBUG_PRINT("Retrieved the Modem serial Number");
    2cbc:	4818      	ldr	r0, [pc, #96]	; (2d20 <ModemDiagUpdateDataBase+0xa8>)
    2cbe:	4f19      	ldr	r7, [pc, #100]	; (2d24 <ModemDiagUpdateDataBase+0xac>)
    2cc0:	47b8      	blx	r7
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
    2cc2:	210f      	movs	r1, #15
    2cc4:	4620      	mov	r0, r4
    2cc6:	4b18      	ldr	r3, [pc, #96]	; (2d28 <ModemDiagUpdateDataBase+0xb0>)
    2cc8:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    2cca:	4818      	ldr	r0, [pc, #96]	; (2d2c <ModemDiagUpdateDataBase+0xb4>)
    2ccc:	47b8      	blx	r7
			bModemDiagDataBaseUpdated = true;
    2cce:	702e      	strb	r6, [r5, #0]
    2cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
    2cd2:	4b12      	ldr	r3, [pc, #72]	; (2d1c <ModemDiagUpdateDataBase+0xa4>)
    2cd4:	1d1d      	adds	r5, r3, #4
    2cd6:	8801      	ldrh	r1, [r0, #0]
    2cd8:	7882      	ldrb	r2, [r0, #2]
    2cda:	8099      	strh	r1, [r3, #4]
    2cdc:	719a      	strb	r2, [r3, #6]
        	DEBUG_PRINT("Verifying the UART Link status with Modem");
    2cde:	4814      	ldr	r0, [pc, #80]	; (2d30 <ModemDiagUpdateDataBase+0xb8>)
    2ce0:	4c10      	ldr	r4, [pc, #64]	; (2d24 <ModemDiagUpdateDataBase+0xac>)
    2ce2:	47a0      	blx	r4
        	DEBUG_PRINT("SuccessFully verified the UART Link between SAMD51 Controller & Modem");
    2ce4:	4813      	ldr	r0, [pc, #76]	; (2d34 <ModemDiagUpdateDataBase+0xbc>)
    2ce6:	47a0      	blx	r4
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
    2ce8:	2103      	movs	r1, #3
    2cea:	4628      	mov	r0, r5
    2cec:	4b0e      	ldr	r3, [pc, #56]	; (2d28 <ModemDiagUpdateDataBase+0xb0>)
    2cee:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    2cf0:	480e      	ldr	r0, [pc, #56]	; (2d2c <ModemDiagUpdateDataBase+0xb4>)
    2cf2:	47a0      	blx	r4
        break;
    2cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
    2cf6:	4e09      	ldr	r6, [pc, #36]	; (2d1c <ModemDiagUpdateDataBase+0xa4>)
    2cf8:	f106 0508 	add.w	r5, r6, #8
    2cfc:	6800      	ldr	r0, [r0, #0]
    2cfe:	6861      	ldr	r1, [r4, #4]
    2d00:	68a2      	ldr	r2, [r4, #8]
    2d02:	68e3      	ldr	r3, [r4, #12]
    2d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
    2d06:	480c      	ldr	r0, [pc, #48]	; (2d38 <ModemDiagUpdateDataBase+0xc0>)
    2d08:	4c06      	ldr	r4, [pc, #24]	; (2d24 <ModemDiagUpdateDataBase+0xac>)
    2d0a:	47a0      	blx	r4
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
    2d0c:	2110      	movs	r1, #16
    2d0e:	f106 0008 	add.w	r0, r6, #8
    2d12:	4b05      	ldr	r3, [pc, #20]	; (2d28 <ModemDiagUpdateDataBase+0xb0>)
    2d14:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    2d16:	4805      	ldr	r0, [pc, #20]	; (2d2c <ModemDiagUpdateDataBase+0xb4>)
    2d18:	47a0      	blx	r4
        break;
    2d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d1c:	200002ec 	.word	0x200002ec
    2d20:	000090e8 	.word	0x000090e8
    2d24:	0000336d 	.word	0x0000336d
    2d28:	00003329 	.word	0x00003329
    2d2c:	00009368 	.word	0x00009368
    2d30:	00009054 	.word	0x00009054
    2d34:	00009080 	.word	0x00009080
    2d38:	000090c8 	.word	0x000090c8

00002d3c <isModemDiagDataBaseUpdated>:
*
********************************************************************************/
bool isModemDiagDataBaseUpdated(void)
{
	return bModemDiagDataBaseUpdated;
}
    2d3c:	4b01      	ldr	r3, [pc, #4]	; (2d44 <isModemDiagDataBaseUpdated+0x8>)
    2d3e:	7818      	ldrb	r0, [r3, #0]
    2d40:	4770      	bx	lr
    2d42:	bf00      	nop
    2d44:	200002ec 	.word	0x200002ec

00002d48 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
    2d48:	4b01      	ldr	r3, [pc, #4]	; (2d50 <getModemPowerStatus+0x8>)
    2d4a:	7818      	ldrb	r0, [r3, #0]
    2d4c:	4770      	bx	lr
    2d4e:	bf00      	nop
    2d50:	20000318 	.word	0x20000318

00002d54 <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_RESET_MODEM;
    2d54:	4b04      	ldr	r3, [pc, #16]	; (2d68 <modemPowerStateInit+0x14>)
    2d56:	2207      	movs	r2, #7
    2d58:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    2d5a:	2200      	movs	r2, #0
    2d5c:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_ASSERT;
    2d5e:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    2d60:	2201      	movs	r2, #1
    2d62:	70da      	strb	r2, [r3, #3]
    2d64:	4770      	bx	lr
    2d66:	bf00      	nop
    2d68:	20000318 	.word	0x20000318

00002d6c <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
    2d6c:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);
    const TickType_t ModemResetToPowerOnWaitDelay = pdMS_TO_TICKS(500UL);

    switch(ModemPwrState)
    2d6e:	4b69      	ldr	r3, [pc, #420]	; (2f14 <modemPowerSchedule+0x1a8>)
    2d70:	781b      	ldrb	r3, [r3, #0]
    2d72:	2b06      	cmp	r3, #6
    2d74:	f000 80a1 	beq.w	2eba <modemPowerSchedule+0x14e>
    2d78:	2b07      	cmp	r3, #7
    2d7a:	d057      	beq.n	2e2c <modemPowerSchedule+0xc0>
    2d7c:	b103      	cbz	r3, 2d80 <modemPowerSchedule+0x14>
    2d7e:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
    2d80:	4b64      	ldr	r3, [pc, #400]	; (2f14 <modemPowerSchedule+0x1a8>)
    2d82:	785b      	ldrb	r3, [r3, #1]
    2d84:	2b03      	cmp	r3, #3
    2d86:	d8fa      	bhi.n	2d7e <modemPowerSchedule+0x12>
    2d88:	e8df f003 	tbb	[pc, r3]
    2d8c:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d90:	4b61      	ldr	r3, [pc, #388]	; (2f18 <modemPowerSchedule+0x1ac>)
    2d92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2d9e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    2da2:	4c5e      	ldr	r4, [pc, #376]	; (2f1c <modemPowerSchedule+0x1b0>)
    2da4:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2da8:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2dac:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2db0:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2db4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2db8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    2dbc:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2dbe:	6299      	str	r1, [r3, #40]	; 0x28
    2dc0:	4857      	ldr	r0, [pc, #348]	; (2f20 <modemPowerSchedule+0x1b4>)
    2dc2:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2dc4:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2dc8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2dcc:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2dd0:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2dd2:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2dd4:	6299      	str	r1, [r3, #40]	; 0x28
    2dd6:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2dd8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ddc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2de0:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2de4:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
    2de6:	2201      	movs	r2, #1
    2de8:	4b4a      	ldr	r3, [pc, #296]	; (2f14 <modemPowerSchedule+0x1a8>)
    2dea:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
    2dec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2df0:	4b4c      	ldr	r3, [pc, #304]	; (2f24 <modemPowerSchedule+0x1b8>)
    2df2:	4798      	blx	r3
                }
                break;
    2df4:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2df6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2dfa:	4b47      	ldr	r3, [pc, #284]	; (2f18 <modemPowerSchedule+0x1ac>)
    2dfc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
    2e00:	2202      	movs	r2, #2
    2e02:	4b44      	ldr	r3, [pc, #272]	; (2f14 <modemPowerSchedule+0x1a8>)
    2e04:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
    2e06:	2032      	movs	r0, #50	; 0x32
    2e08:	4b46      	ldr	r3, [pc, #280]	; (2f24 <modemPowerSchedule+0x1b8>)
    2e0a:	4798      	blx	r3
                }
                break;
    2e0c:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
    2e0e:	2203      	movs	r2, #3
    2e10:	4b40      	ldr	r3, [pc, #256]	; (2f14 <modemPowerSchedule+0x1a8>)
    2e12:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
    2e14:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2e18:	4b42      	ldr	r3, [pc, #264]	; (2f24 <modemPowerSchedule+0x1b8>)
    2e1a:	4798      	blx	r3
                }
                break;
    2e1c:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    DEBUG_PRINT("Host Processor and Modem are successfully initialized...\r\n");
    2e1e:	4842      	ldr	r0, [pc, #264]	; (2f28 <modemPowerSchedule+0x1bc>)
    2e20:	4b42      	ldr	r3, [pc, #264]	; (2f2c <modemPowerSchedule+0x1c0>)
    2e22:	4798      	blx	r3
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
    2e24:	2204      	movs	r2, #4
    2e26:	4b3b      	ldr	r3, [pc, #236]	; (2f14 <modemPowerSchedule+0x1a8>)
    2e28:	701a      	strb	r2, [r3, #0]
                }
                break;
    2e2a:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
    2e2c:	4b39      	ldr	r3, [pc, #228]	; (2f14 <modemPowerSchedule+0x1a8>)
    2e2e:	789b      	ldrb	r3, [r3, #2]
    2e30:	b113      	cbz	r3, 2e38 <modemPowerSchedule+0xcc>
    2e32:	2b01      	cmp	r3, #1
    2e34:	d028      	beq.n	2e88 <modemPowerSchedule+0x11c>
    2e36:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e38:	4b37      	ldr	r3, [pc, #220]	; (2f18 <modemPowerSchedule+0x1ac>)
    2e3a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2e3e:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2e46:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    2e4a:	4a34      	ldr	r2, [pc, #208]	; (2f1c <modemPowerSchedule+0x1b0>)
    2e4c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e50:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e58:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e5c:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2e64:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e66:	6298      	str	r0, [r3, #40]	; 0x28
    2e68:	4a2d      	ldr	r2, [pc, #180]	; (2f20 <modemPowerSchedule+0x1b4>)
    2e6a:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e6c:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e74:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e78:	6199      	str	r1, [r3, #24]

                    /* Apply low level pulse on the RESET pin for 25 ms */
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
    2e7a:	2201      	movs	r2, #1
    2e7c:	4b25      	ldr	r3, [pc, #148]	; (2f14 <modemPowerSchedule+0x1a8>)
    2e7e:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
    2e80:	2019      	movs	r0, #25
    2e82:	4b28      	ldr	r3, [pc, #160]	; (2f24 <modemPowerSchedule+0x1b8>)
    2e84:	4798      	blx	r3
                }
                break;
    2e86:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e88:	4b23      	ldr	r3, [pc, #140]	; (2f18 <modemPowerSchedule+0x1ac>)
    2e8a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2e8e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e94:	629a      	str	r2, [r3, #40]	; 0x28
    2e96:	4a22      	ldr	r2, [pc, #136]	; (2f20 <modemPowerSchedule+0x1b4>)
    2e98:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e9a:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e9e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ea2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ea6:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
    2ea8:	4b1a      	ldr	r3, [pc, #104]	; (2f14 <modemPowerSchedule+0x1a8>)
    2eaa:	2200      	movs	r2, #0
    2eac:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    2eae:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemResetToPowerOnWaitDelay);
    2eb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2eb4:	4b1b      	ldr	r3, [pc, #108]	; (2f24 <modemPowerSchedule+0x1b8>)
    2eb6:	4798      	blx	r3
                }
                break;
    2eb8:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
    2eba:	4b16      	ldr	r3, [pc, #88]	; (2f14 <modemPowerSchedule+0x1a8>)
    2ebc:	78db      	ldrb	r3, [r3, #3]
    2ebe:	2b00      	cmp	r3, #0
    2ec0:	f47f af5d 	bne.w	2d7e <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ec4:	4b14      	ldr	r3, [pc, #80]	; (2f18 <modemPowerSchedule+0x1ac>)
    2ec6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2eca:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ece:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2ed2:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    2ed6:	4a11      	ldr	r2, [pc, #68]	; (2f1c <modemPowerSchedule+0x1b0>)
    2ed8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2edc:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ee4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ee8:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2eec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2ef0:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ef2:	6298      	str	r0, [r3, #40]	; 0x28
    2ef4:	4a0a      	ldr	r2, [pc, #40]	; (2f20 <modemPowerSchedule+0x1b4>)
    2ef6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ef8:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2efc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f00:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f04:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    2f06:	2201      	movs	r2, #1
    2f08:	4b02      	ldr	r3, [pc, #8]	; (2f14 <modemPowerSchedule+0x1a8>)
    2f0a:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
    2f0c:	2019      	movs	r0, #25
    2f0e:	4b05      	ldr	r3, [pc, #20]	; (2f24 <modemPowerSchedule+0x1b8>)
    2f10:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
    2f12:	e734      	b.n	2d7e <modemPowerSchedule+0x12>
    2f14:	20000318 	.word	0x20000318
    2f18:	41008000 	.word	0x41008000
    2f1c:	c0000001 	.word	0xc0000001
    2f20:	c0000008 	.word	0xc0000008
    2f24:	0000605d 	.word	0x0000605d
    2f28:	0000910c 	.word	0x0000910c
    2f2c:	0000336d 	.word	0x0000336d

00002f30 <packetTransmitPeriodicTimerCallBack>:
*               into a string and returns the string.
*
********************************************************************************/
static void packetTransmitPeriodicTimerCallBack(void* param)
{
	packetTransmitPeriodicTimerExpired = true;
    2f30:	2201      	movs	r2, #1
    2f32:	4b01      	ldr	r3, [pc, #4]	; (2f38 <packetTransmitPeriodicTimerCallBack+0x8>)
    2f34:	701a      	strb	r2, [r3, #0]
    2f36:	4770      	bx	lr
    2f38:	2000031c 	.word	0x2000031c

00002f3c <SystemAutoRestartTimerCallBack>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
static void SystemAutoRestartTimerCallBack(void* param)
{
    2f3c:	b508      	push	{r3, lr}
	DEBUG_PRINT("Hourly System Restart timer expired. Rebooting the system.\r\n");
    2f3e:	4803      	ldr	r0, [pc, #12]	; (2f4c <SystemAutoRestartTimerCallBack+0x10>)
    2f40:	4b03      	ldr	r3, [pc, #12]	; (2f50 <SystemAutoRestartTimerCallBack+0x14>)
    2f42:	4798      	blx	r3
	requestWatchDogForcedReset();
    2f44:	4b03      	ldr	r3, [pc, #12]	; (2f54 <SystemAutoRestartTimerCallBack+0x18>)
    2f46:	4798      	blx	r3
    2f48:	bd08      	pop	{r3, pc}
    2f4a:	bf00      	nop
    2f4c:	00009148 	.word	0x00009148
    2f50:	0000336d 	.word	0x0000336d
    2f54:	000035a5 	.word	0x000035a5

00002f58 <ModemProcessTask>:
{
    2f58:	b570      	push	{r4, r5, r6, lr}
    2f5a:	b082      	sub	sp, #8
    modemPowerStateInit();
    2f5c:	4b23      	ldr	r3, [pc, #140]	; (2fec <ModemProcessTask+0x94>)
    2f5e:	4798      	blx	r3
    MdmConnect_HttpConnectionInit();
    2f60:	4b23      	ldr	r3, [pc, #140]	; (2ff0 <ModemProcessTask+0x98>)
    2f62:	4798      	blx	r3
    packetTransmitPeriodicTimerExpired = false;
    2f64:	2400      	movs	r4, #0
    2f66:	4b23      	ldr	r3, [pc, #140]	; (2ff4 <ModemProcessTask+0x9c>)
    2f68:	701c      	strb	r4, [r3, #0]
    xAutoReloadHourlyTimer   = xTimerCreate("HourlySystemRestartTimer",HOURLY_RESTART_TIMER_LOAD_VALUE,pdTRUE,0,SystemAutoRestartTimerCallBack);
    2f6a:	4b23      	ldr	r3, [pc, #140]	; (2ff8 <ModemProcessTask+0xa0>)
    2f6c:	9300      	str	r3, [sp, #0]
    2f6e:	4623      	mov	r3, r4
    2f70:	2201      	movs	r2, #1
    2f72:	4922      	ldr	r1, [pc, #136]	; (2ffc <ModemProcessTask+0xa4>)
    2f74:	4822      	ldr	r0, [pc, #136]	; (3000 <ModemProcessTask+0xa8>)
    2f76:	4e23      	ldr	r6, [pc, #140]	; (3004 <ModemProcessTask+0xac>)
    2f78:	47b0      	blx	r6
    2f7a:	4605      	mov	r5, r0
    xPacketSendPeriodicTimer = xTimerCreate("PacketTransmitPeriodicTimer",PACKET_SEND_TIMER_LOAD_VALUE,pdTRUE,0,packetTransmitPeriodicTimerCallBack);
    2f7c:	4b22      	ldr	r3, [pc, #136]	; (3008 <ModemProcessTask+0xb0>)
    2f7e:	9300      	str	r3, [sp, #0]
    2f80:	4623      	mov	r3, r4
    2f82:	2201      	movs	r2, #1
    2f84:	f241 7170 	movw	r1, #6000	; 0x1770
    2f88:	4820      	ldr	r0, [pc, #128]	; (300c <ModemProcessTask+0xb4>)
    2f8a:	47b0      	blx	r6
    if((xPacketSendPeriodicTimer != NULL) &&
    2f8c:	b1b0      	cbz	r0, 2fbc <ModemProcessTask+0x64>
    2f8e:	4604      	mov	r4, r0
    2f90:	b1a5      	cbz	r5, 2fbc <ModemProcessTask+0x64>
    	if((pdPASS == xTimerStart(xAutoReloadHourlyTimer,0)) &&
    2f92:	4b1f      	ldr	r3, [pc, #124]	; (3010 <ModemProcessTask+0xb8>)
    2f94:	4798      	blx	r3
    2f96:	2300      	movs	r3, #0
    2f98:	9300      	str	r3, [sp, #0]
    2f9a:	4602      	mov	r2, r0
    2f9c:	2101      	movs	r1, #1
    2f9e:	4628      	mov	r0, r5
    2fa0:	4d1c      	ldr	r5, [pc, #112]	; (3014 <ModemProcessTask+0xbc>)
    2fa2:	47a8      	blx	r5
    2fa4:	2801      	cmp	r0, #1
    2fa6:	d109      	bne.n	2fbc <ModemProcessTask+0x64>
		   (pdPASS == xTimerStart(xPacketSendPeriodicTimer,0)))
    2fa8:	4b19      	ldr	r3, [pc, #100]	; (3010 <ModemProcessTask+0xb8>)
    2faa:	4798      	blx	r3
    2fac:	2300      	movs	r3, #0
    2fae:	9300      	str	r3, [sp, #0]
    2fb0:	4602      	mov	r2, r0
    2fb2:	2101      	movs	r1, #1
    2fb4:	4620      	mov	r0, r4
    2fb6:	47a8      	blx	r5
    if(false == initializeModemTimers())
    2fb8:	2801      	cmp	r0, #1
    2fba:	d004      	beq.n	2fc6 <ModemProcessTask+0x6e>
    	DEBUG_PRINT("Failed to initialize the modem timers. Rebooting the system");
    2fbc:	4816      	ldr	r0, [pc, #88]	; (3018 <ModemProcessTask+0xc0>)
    2fbe:	4b17      	ldr	r3, [pc, #92]	; (301c <ModemProcessTask+0xc4>)
    2fc0:	4798      	blx	r3
    	requestWatchDogForcedReset();
    2fc2:	4b17      	ldr	r3, [pc, #92]	; (3020 <ModemProcessTask+0xc8>)
    2fc4:	4798      	blx	r3
        modemPowerSchedule();
    2fc6:	4d17      	ldr	r5, [pc, #92]	; (3024 <ModemProcessTask+0xcc>)
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2fc8:	4c17      	ldr	r4, [pc, #92]	; (3028 <ModemProcessTask+0xd0>)
           (false != isFotaVerificationDone()))
    2fca:	4e18      	ldr	r6, [pc, #96]	; (302c <ModemProcessTask+0xd4>)
        modemPowerSchedule();
    2fcc:	47a8      	blx	r5
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2fce:	47a0      	blx	r4
    2fd0:	2804      	cmp	r0, #4
    2fd2:	d1fb      	bne.n	2fcc <ModemProcessTask+0x74>
           (false != isFotaVerificationDone()))
    2fd4:	47b0      	blx	r6
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2fd6:	2800      	cmp	r0, #0
    2fd8:	d0f8      	beq.n	2fcc <ModemProcessTask+0x74>
            MdmConnect_HttpConnectionSchedule();
    2fda:	4b15      	ldr	r3, [pc, #84]	; (3030 <ModemProcessTask+0xd8>)
    2fdc:	4798      	blx	r3
			kickWatchDog();
    2fde:	4b15      	ldr	r3, [pc, #84]	; (3034 <ModemProcessTask+0xdc>)
    2fe0:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    2fe2:	2064      	movs	r0, #100	; 0x64
    2fe4:	4b14      	ldr	r3, [pc, #80]	; (3038 <ModemProcessTask+0xe0>)
    2fe6:	4798      	blx	r3
    2fe8:	e7f0      	b.n	2fcc <ModemProcessTask+0x74>
    2fea:	bf00      	nop
    2fec:	00002d55 	.word	0x00002d55
    2ff0:	000016a1 	.word	0x000016a1
    2ff4:	2000031c 	.word	0x2000031c
    2ff8:	00002f3d 	.word	0x00002f3d
    2ffc:	0036ee80 	.word	0x0036ee80
    3000:	00009188 	.word	0x00009188
    3004:	0000681d 	.word	0x0000681d
    3008:	00002f31 	.word	0x00002f31
    300c:	000091a4 	.word	0x000091a4
    3010:	00005e1d 	.word	0x00005e1d
    3014:	00006871 	.word	0x00006871
    3018:	000091c0 	.word	0x000091c0
    301c:	0000336d 	.word	0x0000336d
    3020:	000035a5 	.word	0x000035a5
    3024:	00002d6d 	.word	0x00002d6d
    3028:	00002d49 	.word	0x00002d49
    302c:	000010bd 	.word	0x000010bd
    3030:	000021a1 	.word	0x000021a1
    3034:	00003565 	.word	0x00003565
    3038:	0000605d 	.word	0x0000605d

0000303c <clearPacketTransmitTimerExpiryFlag>:
	packetTransmitPeriodicTimerExpired = false;
    303c:	2200      	movs	r2, #0
    303e:	4b01      	ldr	r3, [pc, #4]	; (3044 <clearPacketTransmitTimerExpiryFlag+0x8>)
    3040:	701a      	strb	r2, [r3, #0]
    3042:	4770      	bx	lr
    3044:	2000031c 	.word	0x2000031c

00003048 <isPacketTransmitTimerExpired>:
}
    3048:	4b01      	ldr	r3, [pc, #4]	; (3050 <isPacketTransmitTimerExpired+0x8>)
    304a:	7818      	ldrb	r0, [r3, #0]
    304c:	4770      	bx	lr
    304e:	bf00      	nop
    3050:	2000031c 	.word	0x2000031c

00003054 <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
    3054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3056:	4606      	mov	r6, r0
    3058:	460c      	mov	r4, r1
    305a:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	BaseType_t FotaResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
    305c:	4936      	ldr	r1, [pc, #216]	; (3138 <modemResponseHandler+0xe4>)
    305e:	4b37      	ldr	r3, [pc, #220]	; (313c <modemResponseHandler+0xe8>)
    3060:	4798      	blx	r3

    if(response != NULL)
    3062:	2c00      	cmp	r4, #0
    3064:	d064      	beq.n	3130 <modemResponseHandler+0xdc>
    {
        switch (cmdData.cmdSet)
    3066:	4b34      	ldr	r3, [pc, #208]	; (3138 <modemResponseHandler+0xe4>)
    3068:	785b      	ldrb	r3, [r3, #1]
    306a:	2b01      	cmp	r3, #1
    306c:	d019      	beq.n	30a2 <modemResponseHandler+0x4e>
    306e:	b113      	cbz	r3, 3076 <modemResponseHandler+0x22>
    3070:	2b02      	cmp	r3, #2
    3072:	d03a      	beq.n	30ea <modemResponseHandler+0x96>
    3074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
    3076:	4f30      	ldr	r7, [pc, #192]	; (3138 <modemResponseHandler+0xe4>)
    3078:	753e      	strb	r6, [r7, #20]
            	cmdResponse.length = length;
    307a:	82fd      	strh	r5, [r7, #22]
            	memset(responseBuffer,0,700);
    307c:	f107 061c 	add.w	r6, r7, #28
    3080:	f44f 722f 	mov.w	r2, #700	; 0x2bc
    3084:	2100      	movs	r1, #0
    3086:	4630      	mov	r0, r6
    3088:	4b2d      	ldr	r3, [pc, #180]	; (3140 <modemResponseHandler+0xec>)
    308a:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
    308c:	462a      	mov	r2, r5
    308e:	4621      	mov	r1, r4
    3090:	4630      	mov	r0, r6
    3092:	4b2c      	ldr	r3, [pc, #176]	; (3144 <modemResponseHandler+0xf0>)
    3094:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
    3096:	f107 0114 	add.w	r1, r7, #20
    309a:	4630      	mov	r0, r6
    309c:	4b2a      	ldr	r3, [pc, #168]	; (3148 <modemResponseHandler+0xf4>)
    309e:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
    30a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
    30a2:	4b2a      	ldr	r3, [pc, #168]	; (314c <modemResponseHandler+0xf8>)
    30a4:	6818      	ldr	r0, [r3, #0]
    30a6:	4b2a      	ldr	r3, [pc, #168]	; (3150 <modemResponseHandler+0xfc>)
    30a8:	4798      	blx	r3
    30aa:	b9d0      	cbnz	r0, 30e2 <modemResponseHandler+0x8e>
                {
                	cmdResponse.atCmd = cmd;
    30ac:	4f22      	ldr	r7, [pc, #136]	; (3138 <modemResponseHandler+0xe4>)
    30ae:	753e      	strb	r6, [r7, #20]
                	cmdResponse.length = length;
    30b0:	82fd      	strh	r5, [r7, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    30b2:	4628      	mov	r0, r5
    30b4:	4b27      	ldr	r3, [pc, #156]	; (3154 <modemResponseHandler+0x100>)
    30b6:	4798      	blx	r3
    30b8:	61b8      	str	r0, [r7, #24]

                	if(cmdResponse.response != NULL)
    30ba:	2800      	cmp	r0, #0
    30bc:	d03b      	beq.n	3136 <modemResponseHandler+0xe2>
                	{
                		memcpy(cmdResponse.response,response,length);
    30be:	462a      	mov	r2, r5
    30c0:	4621      	mov	r1, r4
    30c2:	4b20      	ldr	r3, [pc, #128]	; (3144 <modemResponseHandler+0xf0>)
    30c4:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
    30c6:	2300      	movs	r3, #0
    30c8:	2264      	movs	r2, #100	; 0x64
    30ca:	f107 0114 	add.w	r1, r7, #20
    30ce:	481f      	ldr	r0, [pc, #124]	; (314c <modemResponseHandler+0xf8>)
    30d0:	6800      	ldr	r0, [r0, #0]
    30d2:	4c21      	ldr	r4, [pc, #132]	; (3158 <modemResponseHandler+0x104>)
    30d4:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
    30d6:	2801      	cmp	r0, #1
    30d8:	d02d      	beq.n	3136 <modemResponseHandler+0xe2>
                		{
                			//DEBUG_PRINT("Successfully posted connection Response to Queue");
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
    30da:	4820      	ldr	r0, [pc, #128]	; (315c <modemResponseHandler+0x108>)
    30dc:	4b20      	ldr	r3, [pc, #128]	; (3160 <modemResponseHandler+0x10c>)
    30de:	4798      	blx	r3
    30e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    30e2:	4820      	ldr	r0, [pc, #128]	; (3164 <modemResponseHandler+0x110>)
    30e4:	4b1e      	ldr	r3, [pc, #120]	; (3160 <modemResponseHandler+0x10c>)
    30e6:	4798      	blx	r3
    30e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
            break;

            case AT_CMD_SET_FOTA_APP:
            {
                if (uxQueueMessagesWaiting(FotaResponseQueue) == 0)
    30ea:	4b1f      	ldr	r3, [pc, #124]	; (3168 <modemResponseHandler+0x114>)
    30ec:	6818      	ldr	r0, [r3, #0]
    30ee:	4b18      	ldr	r3, [pc, #96]	; (3150 <modemResponseHandler+0xfc>)
    30f0:	4798      	blx	r3
    30f2:	b9c8      	cbnz	r0, 3128 <modemResponseHandler+0xd4>
                {
                	cmdResponse.atCmd = cmd;
    30f4:	4f10      	ldr	r7, [pc, #64]	; (3138 <modemResponseHandler+0xe4>)
    30f6:	753e      	strb	r6, [r7, #20]
                	cmdResponse.length = length;
    30f8:	82fd      	strh	r5, [r7, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    30fa:	4628      	mov	r0, r5
    30fc:	4b15      	ldr	r3, [pc, #84]	; (3154 <modemResponseHandler+0x100>)
    30fe:	4798      	blx	r3
    3100:	61b8      	str	r0, [r7, #24]

                	if(cmdResponse.response != NULL)
    3102:	b1c0      	cbz	r0, 3136 <modemResponseHandler+0xe2>
                	{
                		memcpy(cmdResponse.response,response,length);
    3104:	462a      	mov	r2, r5
    3106:	4621      	mov	r1, r4
    3108:	4b0e      	ldr	r3, [pc, #56]	; (3144 <modemResponseHandler+0xf0>)
    310a:	4798      	blx	r3
                		FotaResponseQueuePushStatus = xQueueSendToBack(FotaResponseQueue, &cmdResponse, QueuePushDelayMs);
    310c:	2300      	movs	r3, #0
    310e:	2264      	movs	r2, #100	; 0x64
    3110:	f107 0114 	add.w	r1, r7, #20
    3114:	4814      	ldr	r0, [pc, #80]	; (3168 <modemResponseHandler+0x114>)
    3116:	6800      	ldr	r0, [r0, #0]
    3118:	4c0f      	ldr	r4, [pc, #60]	; (3158 <modemResponseHandler+0x104>)
    311a:	47a0      	blx	r4

                		if(FotaResponseQueuePushStatus == pdPASS)
    311c:	2801      	cmp	r0, #1
    311e:	d00a      	beq.n	3136 <modemResponseHandler+0xe2>
                		{
                			//DEBUG_PRINT("Successfully posted connection Response to Queue");
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Fota Queue");
    3120:	4812      	ldr	r0, [pc, #72]	; (316c <modemResponseHandler+0x118>)
    3122:	4b0f      	ldr	r3, [pc, #60]	; (3160 <modemResponseHandler+0x10c>)
    3124:	4798      	blx	r3
    3126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    3128:	480e      	ldr	r0, [pc, #56]	; (3164 <modemResponseHandler+0x110>)
    312a:	4b0d      	ldr	r3, [pc, #52]	; (3160 <modemResponseHandler+0x10c>)
    312c:	4798      	blx	r3
    312e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
    3130:	480f      	ldr	r0, [pc, #60]	; (3170 <modemResponseHandler+0x11c>)
    3132:	4b0b      	ldr	r3, [pc, #44]	; (3160 <modemResponseHandler+0x10c>)
    3134:	4798      	blx	r3
    3136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3138:	20000320 	.word	0x20000320
    313c:	0000143d 	.word	0x0000143d
    3140:	00006c33 	.word	0x00006c33
    3144:	00006be9 	.word	0x00006be9
    3148:	00002c79 	.word	0x00002c79
    314c:	20003544 	.word	0x20003544
    3150:	00005a45 	.word	0x00005a45
    3154:	00004fc5 	.word	0x00004fc5
    3158:	000053cd 	.word	0x000053cd
    315c:	000091fc 	.word	0x000091fc
    3160:	0000336d 	.word	0x0000336d
    3164:	0000922c 	.word	0x0000922c
    3168:	20003574 	.word	0x20003574
    316c:	00009258 	.word	0x00009258
    3170:	00009290 	.word	0x00009290

00003174 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Application/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
    3174:	b5f0      	push	{r4, r5, r6, r7, lr}
    3176:	b087      	sub	sp, #28

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    3178:	4c10      	ldr	r4, [pc, #64]	; (31bc <ModemRxTask+0x48>)
		
		if(xResult == pdPASS)
		{
			getModemCommandData(atCmd, &cmdData);
    317a:	4f11      	ldr	r7, [pc, #68]	; (31c0 <ModemRxTask+0x4c>)

			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    317c:	4e11      	ldr	r6, [pc, #68]	; (31c4 <ModemRxTask+0x50>)
    317e:	e001      	b.n	3184 <ModemRxTask+0x10>
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
		}
		kickWatchDog();
    3180:	4b11      	ldr	r3, [pc, #68]	; (31c8 <ModemRxTask+0x54>)
    3182:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    3184:	f04f 33ff 	mov.w	r3, #4294967295
    3188:	f10d 0217 	add.w	r2, sp, #23
    318c:	4619      	mov	r1, r3
    318e:	2000      	movs	r0, #0
    3190:	47a0      	blx	r4
		if(xResult == pdPASS)
    3192:	2801      	cmp	r0, #1
    3194:	d1f4      	bne.n	3180 <ModemRxTask+0xc>
			getModemCommandData(atCmd, &cmdData);
    3196:	4669      	mov	r1, sp
    3198:	f89d 0017 	ldrb.w	r0, [sp, #23]
    319c:	47b8      	blx	r7
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    319e:	f89d 0000 	ldrb.w	r0, [sp]
    31a2:	47b0      	blx	r6
    31a4:	2800      	cmp	r0, #0
    31a6:	d1eb      	bne.n	3180 <ModemRxTask+0xc>
				DEBUG_PRINT("ERROR: Command Parsing Failed");
    31a8:	4808      	ldr	r0, [pc, #32]	; (31cc <ModemRxTask+0x58>)
    31aa:	4d09      	ldr	r5, [pc, #36]	; (31d0 <ModemRxTask+0x5c>)
    31ac:	47a8      	blx	r5
				DEBUG_PRINT("\r\nNot able to auto recover from connection failure...Rebooting....");
    31ae:	4809      	ldr	r0, [pc, #36]	; (31d4 <ModemRxTask+0x60>)
    31b0:	47a8      	blx	r5
				DEBUG_PRINT("\r\n");
    31b2:	4809      	ldr	r0, [pc, #36]	; (31d8 <ModemRxTask+0x64>)
    31b4:	47a8      	blx	r5
				requestWatchDogForcedReset();
    31b6:	4b09      	ldr	r3, [pc, #36]	; (31dc <ModemRxTask+0x68>)
    31b8:	4798      	blx	r3
    31ba:	e7e1      	b.n	3180 <ModemRxTask+0xc>
    31bc:	0000655d 	.word	0x0000655d
    31c0:	0000143d 	.word	0x0000143d
    31c4:	00001539 	.word	0x00001539
    31c8:	00003565 	.word	0x00003565
    31cc:	000092d8 	.word	0x000092d8
    31d0:	0000336d 	.word	0x0000336d
    31d4:	000092f8 	.word	0x000092f8
    31d8:	00009368 	.word	0x00009368
    31dc:	000035a5 	.word	0x000035a5

000031e0 <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
    31e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(100UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
    31e2:	2300      	movs	r3, #0
    31e4:	461a      	mov	r2, r3
    31e6:	4619      	mov	r1, r3
    31e8:	481f      	ldr	r0, [pc, #124]	; (3268 <ModemTxTask+0x88>)
    31ea:	6800      	ldr	r0, [r0, #0]
    31ec:	4c1f      	ldr	r4, [pc, #124]	; (326c <ModemTxTask+0x8c>)
    31ee:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    31f0:	4c1f      	ldr	r4, [pc, #124]	; (3270 <ModemTxTask+0x90>)
	
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
		{
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    31f2:	4d20      	ldr	r5, [pc, #128]	; (3274 <ModemTxTask+0x94>)
** Description:        Transmits Data to Modem
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	getModemCommandData(atCmd, &ModemCmdData);
    31f4:	f105 0608 	add.w	r6, r5, #8
    31f8:	e004      	b.n	3204 <ModemTxTask+0x24>
			kickWatchDog();
    31fa:	4b1f      	ldr	r3, [pc, #124]	; (3278 <ModemTxTask+0x98>)
    31fc:	4798      	blx	r3
			vTaskDelay(xDelayMs);
    31fe:	2064      	movs	r0, #100	; 0x64
    3200:	4b1e      	ldr	r3, [pc, #120]	; (327c <ModemTxTask+0x9c>)
    3202:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    3204:	47a0      	blx	r4
    3206:	2804      	cmp	r0, #4
    3208:	d1fc      	bne.n	3204 <ModemTxTask+0x24>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
    320a:	4b1d      	ldr	r3, [pc, #116]	; (3280 <ModemTxTask+0xa0>)
    320c:	6818      	ldr	r0, [r3, #0]
    320e:	4b1d      	ldr	r3, [pc, #116]	; (3284 <ModemTxTask+0xa4>)
    3210:	4798      	blx	r3
    3212:	2800      	cmp	r0, #0
    3214:	d0f1      	beq.n	31fa <ModemTxTask+0x1a>
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    3216:	2100      	movs	r1, #0
    3218:	4b13      	ldr	r3, [pc, #76]	; (3268 <ModemTxTask+0x88>)
    321a:	6818      	ldr	r0, [r3, #0]
    321c:	4b1a      	ldr	r3, [pc, #104]	; (3288 <ModemTxTask+0xa8>)
    321e:	4798      	blx	r3
    3220:	2801      	cmp	r0, #1
    3222:	d1ea      	bne.n	31fa <ModemTxTask+0x1a>
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    3224:	2264      	movs	r2, #100	; 0x64
    3226:	4629      	mov	r1, r5
    3228:	4b15      	ldr	r3, [pc, #84]	; (3280 <ModemTxTask+0xa0>)
    322a:	6818      	ldr	r0, [r3, #0]
    322c:	4b17      	ldr	r3, [pc, #92]	; (328c <ModemTxTask+0xac>)
    322e:	4798      	blx	r3
			if(xResult == pdPASS)
    3230:	2801      	cmp	r0, #1
    3232:	d1e2      	bne.n	31fa <ModemTxTask+0x1a>
				ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
    3234:	786f      	ldrb	r7, [r5, #1]
	getModemCommandData(atCmd, &ModemCmdData);
    3236:	4631      	mov	r1, r6
    3238:	4638      	mov	r0, r7
    323a:	4b15      	ldr	r3, [pc, #84]	; (3290 <ModemTxTask+0xb0>)
    323c:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
    323e:	4b15      	ldr	r3, [pc, #84]	; (3294 <ModemTxTask+0xb4>)
    3240:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
    3242:	7c29      	ldrb	r1, [r5, #16]
    3244:	68e8      	ldr	r0, [r5, #12]
    3246:	4b14      	ldr	r3, [pc, #80]	; (3298 <ModemTxTask+0xb8>)
    3248:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
    324a:	4638      	mov	r0, r7
    324c:	4b13      	ldr	r3, [pc, #76]	; (329c <ModemTxTask+0xbc>)
    324e:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
    3250:	2000      	movs	r0, #0
    3252:	4b13      	ldr	r3, [pc, #76]	; (32a0 <ModemTxTask+0xc0>)
    3254:	4798      	blx	r3
				xSemaphoreGive(AtTxQueueLoadSemaphore);				
    3256:	2300      	movs	r3, #0
    3258:	461a      	mov	r2, r3
    325a:	4619      	mov	r1, r3
    325c:	4802      	ldr	r0, [pc, #8]	; (3268 <ModemTxTask+0x88>)
    325e:	6800      	ldr	r0, [r0, #0]
    3260:	4f02      	ldr	r7, [pc, #8]	; (326c <ModemTxTask+0x8c>)
    3262:	47b8      	blx	r7
    3264:	e7c9      	b.n	31fa <ModemTxTask+0x1a>
    3266:	bf00      	nop
    3268:	2000357c 	.word	0x2000357c
    326c:	000053cd 	.word	0x000053cd
    3270:	00002d49 	.word	0x00002d49
    3274:	200005fc 	.word	0x200005fc
    3278:	00003565 	.word	0x00003565
    327c:	0000605d 	.word	0x0000605d
    3280:	20003568 	.word	0x20003568
    3284:	00005a45 	.word	0x00005a45
    3288:	00005865 	.word	0x00005865
    328c:	000056dd 	.word	0x000056dd
    3290:	0000143d 	.word	0x0000143d
    3294:	00002a65 	.word	0x00002a65
    3298:	000029e9 	.word	0x000029e9
    329c:	0000162d 	.word	0x0000162d
    32a0:	00001621 	.word	0x00001621

000032a4 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Application/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
    32a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32a8:	4604      	mov	r4, r0
    32aa:	460e      	mov	r6, r1
    32ac:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
    32ae:	4d0e      	ldr	r5, [pc, #56]	; (32e8 <usart_async_write+0x44>)
    32b0:	4620      	mov	r0, r4
    32b2:	47a8      	blx	r5
    32b4:	2800      	cmp	r0, #0
    32b6:	d0fb      	beq.n	32b0 <usart_async_write+0xc>
    32b8:	3e01      	subs	r6, #1
    32ba:	f8df 8030 	ldr.w	r8, [pc, #48]	; 32ec <usart_async_write+0x48>
    32be:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
    32c0:	f8df a02c 	ldr.w	sl, [pc, #44]	; 32f0 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
    32c4:	4d08      	ldr	r5, [pc, #32]	; (32e8 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
    32c6:	7873      	ldrb	r3, [r6, #1]
    32c8:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
    32cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    32d0:	4620      	mov	r0, r4
    32d2:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
    32d4:	4620      	mov	r0, r4
    32d6:	47a8      	blx	r5
    32d8:	2800      	cmp	r0, #0
    32da:	d0fb      	beq.n	32d4 <usart_async_write+0x30>
		;
	} while (++offset < length);
    32dc:	3701      	adds	r7, #1
    32de:	454f      	cmp	r7, r9
    32e0:	d3f1      	bcc.n	32c6 <usart_async_write+0x22>

	return (int32_t)offset;
}
    32e2:	4638      	mov	r0, r7
    32e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    32e8:	0000458b 	.word	0x0000458b
    32ec:	20000618 	.word	0x20000618
    32f0:	0000457d 	.word	0x0000457d

000032f4 <SerialDebugTxByteSentCallBack>:
    32f4:	2302      	movs	r3, #2
    32f6:	7603      	strb	r3, [r0, #24]
    32f8:	4770      	bx	lr

000032fa <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    32fa:	2380      	movs	r3, #128	; 0x80
    32fc:	7603      	strb	r3, [r0, #24]
    32fe:	4770      	bx	lr

00003300 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
    3300:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
    3302:	4c05      	ldr	r4, [pc, #20]	; (3318 <SerialDebugPrintInit+0x18>)
    3304:	4905      	ldr	r1, [pc, #20]	; (331c <SerialDebugPrintInit+0x1c>)
    3306:	4620      	mov	r0, r4
    3308:	4b05      	ldr	r3, [pc, #20]	; (3320 <SerialDebugPrintInit+0x20>)
    330a:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
    330c:	2201      	movs	r2, #1
    330e:	4611      	mov	r1, r2
    3310:	4620      	mov	r0, r4
    3312:	4b04      	ldr	r3, [pc, #16]	; (3324 <SerialDebugPrintInit+0x24>)
    3314:	4798      	blx	r3
    3316:	bd10      	pop	{r4, pc}
    3318:	20000044 	.word	0x20000044
    331c:	43000400 	.word	0x43000400
    3320:	000044f5 	.word	0x000044f5
    3324:	000045a1 	.word	0x000045a1

00003328 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
    3328:	b570      	push	{r4, r5, r6, lr}
    332a:	4605      	mov	r5, r0
    332c:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
    332e:	4c05      	ldr	r4, [pc, #20]	; (3344 <SerialDebugPrint+0x1c>)
    3330:	4620      	mov	r0, r4
    3332:	4b05      	ldr	r3, [pc, #20]	; (3348 <SerialDebugPrint+0x20>)
    3334:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
    3336:	4632      	mov	r2, r6
    3338:	4629      	mov	r1, r5
    333a:	4620      	mov	r0, r4
    333c:	4b03      	ldr	r3, [pc, #12]	; (334c <SerialDebugPrint+0x24>)
    333e:	4798      	blx	r3
    3340:	bd70      	pop	{r4, r5, r6, pc}
    3342:	bf00      	nop
    3344:	20000044 	.word	0x20000044
    3348:	00004569 	.word	0x00004569
    334c:	000032a5 	.word	0x000032a5

00003350 <SerialDebugTxDoneCallBack>:
{
    3350:	b510      	push	{r4, lr}
    3352:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    3354:	2116      	movs	r1, #22
    3356:	4803      	ldr	r0, [pc, #12]	; (3364 <SerialDebugTxDoneCallBack+0x14>)
    3358:	4b03      	ldr	r3, [pc, #12]	; (3368 <SerialDebugTxDoneCallBack+0x18>)
    335a:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    335c:	2301      	movs	r3, #1
    335e:	7623      	strb	r3, [r4, #24]
    3360:	bd10      	pop	{r4, pc}
    3362:	bf00      	nop
    3364:	0000933c 	.word	0x0000933c
    3368:	00003329 	.word	0x00003329

0000336c <SerialStringPrint>:
}

void SerialStringPrint(const uint8_t *const dataToPrint)
{
    336c:	b570      	push	{r4, r5, r6, lr}
    336e:	4605      	mov	r5, r0
	#ifdef SERIAL_DEBUG_ON
	
	uint8_t strLength;
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);
	uint8_t* dbgBuffer = NULL;
	strLength = strlen(dataToPrint);
    3370:	4b17      	ldr	r3, [pc, #92]	; (33d0 <SerialStringPrint+0x64>)
    3372:	4798      	blx	r3
    3374:	4604      	mov	r4, r0

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    3376:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    337a:	4b16      	ldr	r3, [pc, #88]	; (33d4 <SerialStringPrint+0x68>)
    337c:	6818      	ldr	r0, [r3, #0]
    337e:	4b16      	ldr	r3, [pc, #88]	; (33d8 <SerialStringPrint+0x6c>)
    3380:	4798      	blx	r3
    3382:	2801      	cmp	r0, #1
    3384:	d000      	beq.n	3388 <SerialStringPrint+0x1c>
    3386:	bd70      	pop	{r4, r5, r6, pc}
    3388:	b2e4      	uxtb	r4, r4
    {
		dbgBuffer = (uint8_t*)pvPortMalloc((strLength)*(sizeof(uint8_t)));
    338a:	4620      	mov	r0, r4
    338c:	4b13      	ldr	r3, [pc, #76]	; (33dc <SerialStringPrint+0x70>)
    338e:	4798      	blx	r3
		
		if(dbgBuffer != NULL)
    3390:	4606      	mov	r6, r0
    3392:	b1a0      	cbz	r0, 33be <SerialStringPrint+0x52>
		{
	    	memset(dbgBuffer,'\0',strLength);
    3394:	4622      	mov	r2, r4
    3396:	2100      	movs	r1, #0
    3398:	4b11      	ldr	r3, [pc, #68]	; (33e0 <SerialStringPrint+0x74>)
    339a:	4798      	blx	r3
	    	sprintf((int8_t*)dbgBuffer,"%s",dataToPrint);
    339c:	4629      	mov	r1, r5
    339e:	4630      	mov	r0, r6
    33a0:	4b10      	ldr	r3, [pc, #64]	; (33e4 <SerialStringPrint+0x78>)
    33a2:	4798      	blx	r3
	    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    33a4:	4630      	mov	r0, r6
    33a6:	4b0a      	ldr	r3, [pc, #40]	; (33d0 <SerialStringPrint+0x64>)
    33a8:	4798      	blx	r3
    33aa:	b281      	uxth	r1, r0
    33ac:	4630      	mov	r0, r6
    33ae:	4c0e      	ldr	r4, [pc, #56]	; (33e8 <SerialStringPrint+0x7c>)
    33b0:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    33b2:	2102      	movs	r1, #2
    33b4:	480d      	ldr	r0, [pc, #52]	; (33ec <SerialStringPrint+0x80>)
    33b6:	47a0      	blx	r4
	    	vPortFree(dbgBuffer);			
    33b8:	4630      	mov	r0, r6
    33ba:	4b0d      	ldr	r3, [pc, #52]	; (33f0 <SerialStringPrint+0x84>)
    33bc:	4798      	blx	r3
		}
    	xSemaphoreGive(DebugPrintMutex);
    33be:	2300      	movs	r3, #0
    33c0:	461a      	mov	r2, r3
    33c2:	4619      	mov	r1, r3
    33c4:	4803      	ldr	r0, [pc, #12]	; (33d4 <SerialStringPrint+0x68>)
    33c6:	6800      	ldr	r0, [r0, #0]
    33c8:	4c0a      	ldr	r4, [pc, #40]	; (33f4 <SerialStringPrint+0x88>)
    33ca:	47a0      	blx	r4
    }
	
	#endif
}
    33cc:	e7db      	b.n	3386 <SerialStringPrint+0x1a>
    33ce:	bf00      	nop
    33d0:	00006e15 	.word	0x00006e15
    33d4:	20003570 	.word	0x20003570
    33d8:	00005865 	.word	0x00005865
    33dc:	00004fc5 	.word	0x00004fc5
    33e0:	00006c33 	.word	0x00006c33
    33e4:	00006e05 	.word	0x00006e05
    33e8:	00003329 	.word	0x00003329
    33ec:	00009368 	.word	0x00009368
    33f0:	000050a5 	.word	0x000050a5
    33f4:	000053cd 	.word	0x000053cd

000033f8 <ConsoleDebugPrint>:

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
    33f8:	b530      	push	{r4, r5, lr}
    33fa:	b09b      	sub	sp, #108	; 0x6c
    33fc:	4605      	mov	r5, r0
    33fe:	460c      	mov	r4, r1
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    3400:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3404:	4b11      	ldr	r3, [pc, #68]	; (344c <ConsoleDebugPrint+0x54>)
    3406:	6818      	ldr	r0, [r3, #0]
    3408:	4b11      	ldr	r3, [pc, #68]	; (3450 <ConsoleDebugPrint+0x58>)
    340a:	4798      	blx	r3
    340c:	2801      	cmp	r0, #1
    340e:	d001      	beq.n	3414 <ConsoleDebugPrint+0x1c>
    		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    	}
    	xSemaphoreGive(DebugPrintMutex);
    }
}
    3410:	b01b      	add	sp, #108	; 0x6c
    3412:	bd30      	pop	{r4, r5, pc}
    	memset(dbgBuffer,'\0',100);
    3414:	2264      	movs	r2, #100	; 0x64
    3416:	2100      	movs	r1, #0
    3418:	a801      	add	r0, sp, #4
    341a:	4b0e      	ldr	r3, [pc, #56]	; (3454 <ConsoleDebugPrint+0x5c>)
    341c:	4798      	blx	r3
    	if(intData != 0)
    341e:	b93c      	cbnz	r4, 3430 <ConsoleDebugPrint+0x38>
    	xSemaphoreGive(DebugPrintMutex);
    3420:	2300      	movs	r3, #0
    3422:	461a      	mov	r2, r3
    3424:	4619      	mov	r1, r3
    3426:	4809      	ldr	r0, [pc, #36]	; (344c <ConsoleDebugPrint+0x54>)
    3428:	6800      	ldr	r0, [r0, #0]
    342a:	4c0b      	ldr	r4, [pc, #44]	; (3458 <ConsoleDebugPrint+0x60>)
    342c:	47a0      	blx	r4
}
    342e:	e7ef      	b.n	3410 <ConsoleDebugPrint+0x18>
    		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    3430:	4623      	mov	r3, r4
    3432:	462a      	mov	r2, r5
    3434:	4909      	ldr	r1, [pc, #36]	; (345c <ConsoleDebugPrint+0x64>)
    3436:	a801      	add	r0, sp, #4
    3438:	4c09      	ldr	r4, [pc, #36]	; (3460 <ConsoleDebugPrint+0x68>)
    343a:	47a0      	blx	r4
    		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    343c:	a801      	add	r0, sp, #4
    343e:	4b09      	ldr	r3, [pc, #36]	; (3464 <ConsoleDebugPrint+0x6c>)
    3440:	4798      	blx	r3
    3442:	b281      	uxth	r1, r0
    3444:	a801      	add	r0, sp, #4
    3446:	4b08      	ldr	r3, [pc, #32]	; (3468 <ConsoleDebugPrint+0x70>)
    3448:	4798      	blx	r3
    344a:	e7e9      	b.n	3420 <ConsoleDebugPrint+0x28>
    344c:	20003570 	.word	0x20003570
    3450:	00005865 	.word	0x00005865
    3454:	00006c33 	.word	0x00006c33
    3458:	000053cd 	.word	0x000053cd
    345c:	00009360 	.word	0x00009360
    3460:	00006dbd 	.word	0x00006dbd
    3464:	00006e15 	.word	0x00006e15
    3468:	00003329 	.word	0x00003329

0000346c <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    346c:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    346e:	2204      	movs	r2, #4
    3470:	4b0b      	ldr	r3, [pc, #44]	; (34a0 <SERCOM5_2_Handler+0x34>)
    3472:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    3474:	4d0b      	ldr	r5, [pc, #44]	; (34a4 <SERCOM5_2_Handler+0x38>)
    3476:	4c0c      	ldr	r4, [pc, #48]	; (34a8 <SERCOM5_2_Handler+0x3c>)
    3478:	4628      	mov	r0, r5
    347a:	47a0      	blx	r4
    347c:	2800      	cmp	r0, #0
    347e:	d0fb      	beq.n	3478 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    3480:	4808      	ldr	r0, [pc, #32]	; (34a4 <SERCOM5_2_Handler+0x38>)
    3482:	4b0a      	ldr	r3, [pc, #40]	; (34ac <SERCOM5_2_Handler+0x40>)
    3484:	4798      	blx	r3
    3486:	490a      	ldr	r1, [pc, #40]	; (34b0 <SERCOM5_2_Handler+0x44>)
    3488:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    348a:	2300      	movs	r3, #0
    348c:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    348e:	4c09      	ldr	r4, [pc, #36]	; (34b4 <SERCOM5_2_Handler+0x48>)
    3490:	4620      	mov	r0, r4
    3492:	4b09      	ldr	r3, [pc, #36]	; (34b8 <SERCOM5_2_Handler+0x4c>)
    3494:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    3496:	2105      	movs	r1, #5
    3498:	4620      	mov	r0, r4
    349a:	4b08      	ldr	r3, [pc, #32]	; (34bc <SERCOM5_2_Handler+0x50>)
    349c:	4798      	blx	r3
    349e:	bd38      	pop	{r3, r4, r5, pc}
    34a0:	43000400 	.word	0x43000400
    34a4:	20000044 	.word	0x20000044
    34a8:	00004595 	.word	0x00004595
    34ac:	00004583 	.word	0x00004583
    34b0:	20003d9c 	.word	0x20003d9c
    34b4:	20003da0 	.word	0x20003da0
    34b8:	00006e05 	.word	0x00006e05
    34bc:	00003329 	.word	0x00003329

000034c0 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    34c0:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    34c2:	4b0a      	ldr	r3, [pc, #40]	; (34ec <configureWatchDogTimeOut+0x2c>)
    34c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    34c8:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    34ca:	4c09      	ldr	r4, [pc, #36]	; (34f0 <configureWatchDogTimeOut+0x30>)
    34cc:	6820      	ldr	r0, [r4, #0]
    34ce:	2279      	movs	r2, #121	; 0x79
    34d0:	4908      	ldr	r1, [pc, #32]	; (34f4 <configureWatchDogTimeOut+0x34>)
    34d2:	3000      	adds	r0, #0
    34d4:	bf18      	it	ne
    34d6:	2001      	movne	r0, #1
    34d8:	4b07      	ldr	r3, [pc, #28]	; (34f8 <configureWatchDogTimeOut+0x38>)
    34da:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    34dc:	462a      	mov	r2, r5
    34de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    34e2:	4620      	mov	r0, r4
    34e4:	4b05      	ldr	r3, [pc, #20]	; (34fc <configureWatchDogTimeOut+0x3c>)
    34e6:	4798      	blx	r3
    34e8:	bd38      	pop	{r3, r4, r5, pc}
    34ea:	bf00      	nop
    34ec:	20000060 	.word	0x20000060
    34f0:	20003e7c 	.word	0x20003e7c
    34f4:	0000937c 	.word	0x0000937c
    34f8:	00003bd5 	.word	0x00003bd5
    34fc:	00004825 	.word	0x00004825

00003500 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    3500:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    3502:	2002      	movs	r0, #2
    3504:	4b07      	ldr	r3, [pc, #28]	; (3524 <enableWatchDogTimer+0x24>)
    3506:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    3508:	4c07      	ldr	r4, [pc, #28]	; (3528 <enableWatchDogTimer+0x28>)
    350a:	6820      	ldr	r0, [r4, #0]
    350c:	2296      	movs	r2, #150	; 0x96
    350e:	4907      	ldr	r1, [pc, #28]	; (352c <enableWatchDogTimer+0x2c>)
    3510:	3000      	adds	r0, #0
    3512:	bf18      	it	ne
    3514:	2001      	movne	r0, #1
    3516:	4b06      	ldr	r3, [pc, #24]	; (3530 <enableWatchDogTimer+0x30>)
    3518:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    351a:	4620      	mov	r0, r4
    351c:	4b05      	ldr	r3, [pc, #20]	; (3534 <enableWatchDogTimer+0x34>)
    351e:	4798      	blx	r3
    3520:	bd10      	pop	{r4, pc}
    3522:	bf00      	nop
    3524:	000034c1 	.word	0x000034c1
    3528:	20003e7c 	.word	0x20003e7c
    352c:	0000937c 	.word	0x0000937c
    3530:	00003bd5 	.word	0x00003bd5
    3534:	00004941 	.word	0x00004941

00003538 <atmel_start_init>:
{
    3538:	b508      	push	{r3, lr}
    system_init();
    353a:	4b06      	ldr	r3, [pc, #24]	; (3554 <atmel_start_init+0x1c>)
    353c:	4798      	blx	r3
    delay_ms(1000);
    353e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3542:	4b05      	ldr	r3, [pc, #20]	; (3558 <atmel_start_init+0x20>)
    3544:	4798      	blx	r3
    ForcedResetRequested = WDT_FORCED_RESET_OFF;
    3546:	2201      	movs	r2, #1
    3548:	4b04      	ldr	r3, [pc, #16]	; (355c <atmel_start_init+0x24>)
    354a:	731a      	strb	r2, [r3, #12]
    enableWatchDogTimer();
    354c:	4b04      	ldr	r3, [pc, #16]	; (3560 <atmel_start_init+0x28>)
    354e:	4798      	blx	r3
    3550:	bd08      	pop	{r3, pc}
    3552:	bf00      	nop
    3554:	000039f5 	.word	0x000039f5
    3558:	00003bb5 	.word	0x00003bb5
    355c:	20000060 	.word	0x20000060
    3560:	00003501 	.word	0x00003501

00003564 <kickWatchDog>:
********************************************************************************/
int32_t kickWatchDog(void)
{	
	int32_t status = ERR_NONE;

	if(WDT_FORCED_RESET_OFF == ForcedResetRequested)
    3564:	4b0a      	ldr	r3, [pc, #40]	; (3590 <kickWatchDog+0x2c>)
    3566:	7b1b      	ldrb	r3, [r3, #12]
    3568:	2b01      	cmp	r3, #1
    356a:	d10d      	bne.n	3588 <kickWatchDog+0x24>
{	
    356c:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    356e:	4c09      	ldr	r4, [pc, #36]	; (3594 <kickWatchDog+0x30>)
    3570:	6820      	ldr	r0, [r4, #0]
    3572:	22b3      	movs	r2, #179	; 0xb3
    3574:	4908      	ldr	r1, [pc, #32]	; (3598 <kickWatchDog+0x34>)
    3576:	3000      	adds	r0, #0
    3578:	bf18      	it	ne
    357a:	2001      	movne	r0, #1
    357c:	4b07      	ldr	r3, [pc, #28]	; (359c <kickWatchDog+0x38>)
    357e:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    3580:	4620      	mov	r0, r4
    3582:	4b07      	ldr	r3, [pc, #28]	; (35a0 <kickWatchDog+0x3c>)
    3584:	4798      	blx	r3
    3586:	bd10      	pop	{r4, pc}
	{
		status = wdt_feed(&WDT_0);
	}
	else
	{
		status = ERR_DENIED;
    3588:	f06f 0010 	mvn.w	r0, #16
	}

	return status;
    358c:	4770      	bx	lr
    358e:	bf00      	nop
    3590:	20000060 	.word	0x20000060
    3594:	20003e7c 	.word	0x20003e7c
    3598:	0000937c 	.word	0x0000937c
    359c:	00003bd5 	.word	0x00003bd5
    35a0:	000049cd 	.word	0x000049cd

000035a4 <requestWatchDogForcedReset>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
void requestWatchDogForcedReset(void)
{
    35a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DEBUG_PRINT("\r\n");
    35a6:	4d13      	ldr	r5, [pc, #76]	; (35f4 <requestWatchDogForcedReset+0x50>)
    35a8:	4628      	mov	r0, r5
    35aa:	4c13      	ldr	r4, [pc, #76]	; (35f8 <requestWatchDogForcedReset+0x54>)
    35ac:	47a0      	blx	r4
	DEBUG_PRINT("#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*");
    35ae:	4813      	ldr	r0, [pc, #76]	; (35fc <requestWatchDogForcedReset+0x58>)
    35b0:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
    35b2:	4628      	mov	r0, r5
    35b4:	47a0      	blx	r4
	ForcedResetRequested = WDT_FORCED_RESET_ON;
    35b6:	2700      	movs	r7, #0
    35b8:	4b11      	ldr	r3, [pc, #68]	; (3600 <requestWatchDogForcedReset+0x5c>)
    35ba:	731f      	strb	r7, [r3, #12]
	ASSERT(wdt && wdt->dev.hw);
    35bc:	4e11      	ldr	r6, [pc, #68]	; (3604 <requestWatchDogForcedReset+0x60>)
    35be:	4c12      	ldr	r4, [pc, #72]	; (3608 <requestWatchDogForcedReset+0x64>)
    35c0:	6820      	ldr	r0, [r4, #0]
    35c2:	22a5      	movs	r2, #165	; 0xa5
    35c4:	4631      	mov	r1, r6
    35c6:	1bc0      	subs	r0, r0, r7
    35c8:	bf18      	it	ne
    35ca:	2001      	movne	r0, #1
    35cc:	4d0f      	ldr	r5, [pc, #60]	; (360c <requestWatchDogForcedReset+0x68>)
    35ce:	47a8      	blx	r5
	return _wdt_disable(&wdt->dev);
    35d0:	4620      	mov	r0, r4
    35d2:	4b0f      	ldr	r3, [pc, #60]	; (3610 <requestWatchDogForcedReset+0x6c>)
    35d4:	4798      	blx	r3
	wdt_disable(&WDT_0);
	configureWatchDogTimeOut(WDT_TIMEOUT_FAST);
    35d6:	4638      	mov	r0, r7
    35d8:	4b0e      	ldr	r3, [pc, #56]	; (3614 <requestWatchDogForcedReset+0x70>)
    35da:	4798      	blx	r3
	ASSERT(wdt && wdt->dev.hw);
    35dc:	6820      	ldr	r0, [r4, #0]
    35de:	2296      	movs	r2, #150	; 0x96
    35e0:	4631      	mov	r1, r6
    35e2:	1bc0      	subs	r0, r0, r7
    35e4:	bf18      	it	ne
    35e6:	2001      	movne	r0, #1
    35e8:	47a8      	blx	r5
	return _wdt_enable(&wdt->dev);
    35ea:	4620      	mov	r0, r4
    35ec:	4b0a      	ldr	r3, [pc, #40]	; (3618 <requestWatchDogForcedReset+0x74>)
    35ee:	4798      	blx	r3
    35f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35f2:	bf00      	nop
    35f4:	00009368 	.word	0x00009368
    35f8:	0000336d 	.word	0x0000336d
    35fc:	00009398 	.word	0x00009398
    3600:	20000060 	.word	0x20000060
    3604:	0000937c 	.word	0x0000937c
    3608:	20003e7c 	.word	0x20003e7c
    360c:	00003bd5 	.word	0x00003bd5
    3610:	0000497d 	.word	0x0000497d
    3614:	000034c1 	.word	0x000034c1
    3618:	00004941 	.word	0x00004941

0000361c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    361c:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    361e:	4b1c      	ldr	r3, [pc, #112]	; (3690 <Reset_Handler+0x74>)
    3620:	4a1c      	ldr	r2, [pc, #112]	; (3694 <Reset_Handler+0x78>)
    3622:	429a      	cmp	r2, r3
    3624:	d010      	beq.n	3648 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    3626:	4b1c      	ldr	r3, [pc, #112]	; (3698 <Reset_Handler+0x7c>)
    3628:	4a19      	ldr	r2, [pc, #100]	; (3690 <Reset_Handler+0x74>)
    362a:	429a      	cmp	r2, r3
    362c:	d20c      	bcs.n	3648 <Reset_Handler+0x2c>
    362e:	3b01      	subs	r3, #1
    3630:	1a9b      	subs	r3, r3, r2
    3632:	f023 0303 	bic.w	r3, r3, #3
    3636:	3304      	adds	r3, #4
    3638:	4413      	add	r3, r2
    363a:	4916      	ldr	r1, [pc, #88]	; (3694 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    363c:	f851 0b04 	ldr.w	r0, [r1], #4
    3640:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    3644:	429a      	cmp	r2, r3
    3646:	d1f9      	bne.n	363c <Reset_Handler+0x20>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3648:	4b14      	ldr	r3, [pc, #80]	; (369c <Reset_Handler+0x80>)
    364a:	4a15      	ldr	r2, [pc, #84]	; (36a0 <Reset_Handler+0x84>)
    364c:	429a      	cmp	r2, r3
    364e:	d20a      	bcs.n	3666 <Reset_Handler+0x4a>
    3650:	3b01      	subs	r3, #1
    3652:	1a9b      	subs	r3, r3, r2
    3654:	f023 0303 	bic.w	r3, r3, #3
    3658:	3304      	adds	r3, #4
    365a:	4413      	add	r3, r2
                *pDest++ = 0;
    365c:	2100      	movs	r1, #0
    365e:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    3662:	4293      	cmp	r3, r2
    3664:	d1fb      	bne.n	365e <Reset_Handler+0x42>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3666:	4b0f      	ldr	r3, [pc, #60]	; (36a4 <Reset_Handler+0x88>)
    3668:	4a0f      	ldr	r2, [pc, #60]	; (36a8 <Reset_Handler+0x8c>)
    366a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    366e:	609a      	str	r2, [r3, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
    3670:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3674:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    3678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    367c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3680:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    3684:	4b09      	ldr	r3, [pc, #36]	; (36ac <Reset_Handler+0x90>)
    3686:	4798      	blx	r3

        /* Branch to main function */
        main();
    3688:	4b09      	ldr	r3, [pc, #36]	; (36b0 <Reset_Handler+0x94>)
    368a:	4798      	blx	r3
    368c:	e7fe      	b.n	368c <Reset_Handler+0x70>
    368e:	bf00      	nop
    3690:	20000000 	.word	0x20000000
    3694:	000098f0 	.word	0x000098f0
    3698:	20000248 	.word	0x20000248
    369c:	20003f80 	.word	0x20003f80
    36a0:	20000250 	.word	0x20000250
    36a4:	e000ed00 	.word	0xe000ed00
    36a8:	00000000 	.word	0x00000000
    36ac:	00006b59 	.word	0x00006b59
    36b0:	00004a8d 	.word	0x00004a8d

000036b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    36b4:	b508      	push	{r3, lr}
    DEBUG_PRINT("Unexpected Interrupt Happened...Waiting for the watch dog timeout");
    36b6:	4802      	ldr	r0, [pc, #8]	; (36c0 <Dummy_Handler+0xc>)
    36b8:	4b02      	ldr	r3, [pc, #8]	; (36c4 <Dummy_Handler+0x10>)
    36ba:	4798      	blx	r3
    36bc:	e7fe      	b.n	36bc <Dummy_Handler+0x8>
    36be:	bf00      	nop
    36c0:	000093e4 	.word	0x000093e4
    36c4:	0000336d 	.word	0x0000336d

000036c8 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    36c8:	4b5d      	ldr	r3, [pc, #372]	; (3840 <ADC_0_PORT_init+0x178>)
    36ca:	2204      	movs	r2, #4
    36cc:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    36ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    36d2:	629a      	str	r2, [r3, #40]	; 0x28
    36d4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    36d8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    36da:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    36de:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    36e2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    36e6:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    36ea:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    36ee:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    36f2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    36f6:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    36fa:	2108      	movs	r1, #8
    36fc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    36fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3702:	6299      	str	r1, [r3, #40]	; 0x28
    3704:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3706:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    370a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    370e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3712:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3716:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    371a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    371e:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3722:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3726:	f44f 7180 	mov.w	r1, #256	; 0x100
    372a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    372e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3732:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3736:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    373a:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    373e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3742:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3746:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    374a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    374e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    3752:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3756:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    375a:	f44f 7100 	mov.w	r1, #512	; 0x200
    375e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3762:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3766:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    376a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    376e:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    3772:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3776:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    377a:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    377e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3782:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3786:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    378a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    378e:	2110      	movs	r1, #16
    3790:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3792:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3796:	6299      	str	r1, [r3, #40]	; 0x28
    3798:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    379a:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    379e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    37a2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    37a6:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    37aa:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    37ae:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    37b2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    37b6:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    37ba:	2120      	movs	r1, #32
    37bc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    37be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    37c2:	6299      	str	r1, [r3, #40]	; 0x28
    37c4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    37c6:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    37ca:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    37ce:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    37d2:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    37d6:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    37da:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    37de:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    37e2:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    37e6:	2140      	movs	r1, #64	; 0x40
    37e8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    37ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    37ee:	6299      	str	r1, [r3, #40]	; 0x28
    37f0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    37f2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    37f6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    37fa:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    37fe:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3802:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3806:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    380a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    380e:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3812:	2180      	movs	r1, #128	; 0x80
    3814:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3816:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    381a:	6299      	str	r1, [r3, #40]	; 0x28
    381c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    381e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    3822:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3826:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    382a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    382e:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3832:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3836:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    383a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    383e:	4770      	bx	lr
    3840:	41008000 	.word	0x41008000

00003844 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    3844:	4a04      	ldr	r2, [pc, #16]	; (3858 <ADC_0_CLOCK_init+0x14>)
    3846:	6a13      	ldr	r3, [r2, #32]
    3848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    384c:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    384e:	2241      	movs	r2, #65	; 0x41
    3850:	4b02      	ldr	r3, [pc, #8]	; (385c <ADC_0_CLOCK_init+0x18>)
    3852:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3856:	4770      	bx	lr
    3858:	40000800 	.word	0x40000800
    385c:	40001c00 	.word	0x40001c00

00003860 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    3860:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    3862:	4b05      	ldr	r3, [pc, #20]	; (3878 <ADC_0_init+0x18>)
    3864:	4798      	blx	r3

	if(ERR_NONE == adc_sync_init(&ADC_0, ADC0, (void *)NULL))
    3866:	2200      	movs	r2, #0
    3868:	4904      	ldr	r1, [pc, #16]	; (387c <ADC_0_init+0x1c>)
    386a:	4805      	ldr	r0, [pc, #20]	; (3880 <ADC_0_init+0x20>)
    386c:	4b05      	ldr	r3, [pc, #20]	; (3884 <ADC_0_init+0x24>)
    386e:	4798      	blx	r3
	else
	{
		//DEBUG_PRINT("Failed to initialize ADC");
	}

	ADC_0_PORT_init();
    3870:	4b05      	ldr	r3, [pc, #20]	; (3888 <ADC_0_init+0x28>)
    3872:	4798      	blx	r3
    3874:	bd08      	pop	{r3, pc}
    3876:	bf00      	nop
    3878:	00003845 	.word	0x00003845
    387c:	43001c00 	.word	0x43001c00
    3880:	20003e58 	.word	0x20003e58
    3884:	00003a29 	.word	0x00003a29
    3888:	000036c9 	.word	0x000036c9

0000388c <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    388c:	4b10      	ldr	r3, [pc, #64]	; (38d0 <ModemData_PORT_init+0x44>)
    388e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    3892:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3896:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    389a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    389e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    38a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    38a6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    38aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    38ae:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    38b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    38b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    38ba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    38be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    38c2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    38c6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    38ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    38ce:	4770      	bx	lr
    38d0:	41008000 	.word	0x41008000

000038d4 <ModemData_CLOCK_init>:
    38d4:	4b06      	ldr	r3, [pc, #24]	; (38f0 <ModemData_CLOCK_init+0x1c>)
    38d6:	2240      	movs	r2, #64	; 0x40
    38d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    38dc:	224a      	movs	r2, #74	; 0x4a
    38de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    38e2:	4a04      	ldr	r2, [pc, #16]	; (38f4 <ModemData_CLOCK_init+0x20>)
    38e4:	6993      	ldr	r3, [r2, #24]
    38e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    38ea:	6193      	str	r3, [r2, #24]
    38ec:	4770      	bx	lr
    38ee:	bf00      	nop
    38f0:	40001c00 	.word	0x40001c00
    38f4:	40000800 	.word	0x40000800

000038f8 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    38f8:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    38fa:	4b03      	ldr	r3, [pc, #12]	; (3908 <ModemData_init+0x10>)
    38fc:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    38fe:	4b03      	ldr	r3, [pc, #12]	; (390c <ModemData_init+0x14>)
    3900:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    3902:	4b03      	ldr	r3, [pc, #12]	; (3910 <ModemData_init+0x18>)
    3904:	4798      	blx	r3
    3906:	bd08      	pop	{r3, pc}
    3908:	000038d5 	.word	0x000038d5
    390c:	000028d5 	.word	0x000028d5
    3910:	0000388d 	.word	0x0000388d

00003914 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3914:	4b10      	ldr	r3, [pc, #64]	; (3958 <SerialDebug_PORT_init+0x44>)
    3916:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    391a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    391e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3922:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3926:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    392a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    392e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3932:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3936:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    393a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    393e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3942:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3946:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    394a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    394e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3952:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    3956:	4770      	bx	lr
    3958:	41008000 	.word	0x41008000

0000395c <SerialDebug_CLOCK_init>:
    395c:	4b06      	ldr	r3, [pc, #24]	; (3978 <SerialDebug_CLOCK_init+0x1c>)
    395e:	2240      	movs	r2, #64	; 0x40
    3960:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    3964:	224a      	movs	r2, #74	; 0x4a
    3966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    396a:	4a04      	ldr	r2, [pc, #16]	; (397c <SerialDebug_CLOCK_init+0x20>)
    396c:	6a13      	ldr	r3, [r2, #32]
    396e:	f043 0302 	orr.w	r3, r3, #2
    3972:	6213      	str	r3, [r2, #32]
    3974:	4770      	bx	lr
    3976:	bf00      	nop
    3978:	40001c00 	.word	0x40001c00
    397c:	40000800 	.word	0x40000800

00003980 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    3980:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    3982:	4b03      	ldr	r3, [pc, #12]	; (3990 <SerialDebug_init+0x10>)
    3984:	4798      	blx	r3
	SerialDebugPrintInit();
    3986:	4b03      	ldr	r3, [pc, #12]	; (3994 <SerialDebug_init+0x14>)
    3988:	4798      	blx	r3
	SerialDebug_PORT_init();
    398a:	4b03      	ldr	r3, [pc, #12]	; (3998 <SerialDebug_init+0x18>)
    398c:	4798      	blx	r3
    398e:	bd08      	pop	{r3, pc}
    3990:	0000395d 	.word	0x0000395d
    3994:	00003301 	.word	0x00003301
    3998:	00003915 	.word	0x00003915

0000399c <delay_driver_init>:
}

void delay_driver_init(void)
{
    399c:	b508      	push	{r3, lr}
	delay_init(SysTick);
    399e:	4802      	ldr	r0, [pc, #8]	; (39a8 <delay_driver_init+0xc>)
    39a0:	4b02      	ldr	r3, [pc, #8]	; (39ac <delay_driver_init+0x10>)
    39a2:	4798      	blx	r3
    39a4:	bd08      	pop	{r3, pc}
    39a6:	bf00      	nop
    39a8:	e000e010 	.word	0xe000e010
    39ac:	00003ba1 	.word	0x00003ba1

000039b0 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    39b0:	4a02      	ldr	r2, [pc, #8]	; (39bc <WDT_0_CLOCK_init+0xc>)
    39b2:	6953      	ldr	r3, [r2, #20]
    39b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    39b8:	6153      	str	r3, [r2, #20]
    39ba:	4770      	bx	lr
    39bc:	40000800 	.word	0x40000800

000039c0 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    39c0:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    39c2:	4b06      	ldr	r3, [pc, #24]	; (39dc <WDT_0_init+0x1c>)
    39c4:	4798      	blx	r3
	ASSERT(wdt && hw);
    39c6:	2252      	movs	r2, #82	; 0x52
    39c8:	4905      	ldr	r1, [pc, #20]	; (39e0 <WDT_0_init+0x20>)
    39ca:	2001      	movs	r0, #1
    39cc:	4b05      	ldr	r3, [pc, #20]	; (39e4 <WDT_0_init+0x24>)
    39ce:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    39d0:	4805      	ldr	r0, [pc, #20]	; (39e8 <WDT_0_init+0x28>)
    39d2:	4b06      	ldr	r3, [pc, #24]	; (39ec <WDT_0_init+0x2c>)
    39d4:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    39d6:	4b06      	ldr	r3, [pc, #24]	; (39f0 <WDT_0_init+0x30>)
    39d8:	4798      	blx	r3
    39da:	bd08      	pop	{r3, pc}
    39dc:	000039b1 	.word	0x000039b1
    39e0:	0000937c 	.word	0x0000937c
    39e4:	00003bd5 	.word	0x00003bd5
    39e8:	20003e7c 	.word	0x20003e7c
    39ec:	40002000 	.word	0x40002000
    39f0:	000047b9 	.word	0x000047b9

000039f4 <system_init>:
		//DEBUG_PRINT("WDT Failed to initialize");
	}
}

void system_init(void)
{
    39f4:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    39f6:	4b06      	ldr	r3, [pc, #24]	; (3a10 <system_init+0x1c>)
    39f8:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    39fa:	4b06      	ldr	r3, [pc, #24]	; (3a14 <system_init+0x20>)
    39fc:	4798      	blx	r3

	//AC_0_init();

	ADC_0_init();
    39fe:	4b06      	ldr	r3, [pc, #24]	; (3a18 <system_init+0x24>)
    3a00:	4798      	blx	r3

	//EVENT_SYSTEM_0_init();

	//FLASH_0_init();

	SerialDebug_init();
    3a02:	4b06      	ldr	r3, [pc, #24]	; (3a1c <system_init+0x28>)
    3a04:	4798      	blx	r3
	
	ModemData_init();
    3a06:	4b06      	ldr	r3, [pc, #24]	; (3a20 <system_init+0x2c>)
    3a08:	4798      	blx	r3

	//TIMER_6_init();

	//TIMER_7_init();
	
	WDT_0_init();
    3a0a:	4b06      	ldr	r3, [pc, #24]	; (3a24 <system_init+0x30>)
    3a0c:	4798      	blx	r3
    3a0e:	bd08      	pop	{r3, pc}
    3a10:	00003fa9 	.word	0x00003fa9
    3a14:	0000399d 	.word	0x0000399d
    3a18:	00003861 	.word	0x00003861
    3a1c:	00003981 	.word	0x00003981
    3a20:	000038f9 	.word	0x000038f9
    3a24:	000039c1 	.word	0x000039c1

00003a28 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    3a28:	b538      	push	{r3, r4, r5, lr}
    3a2a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    3a2c:	4605      	mov	r5, r0
    3a2e:	b158      	cbz	r0, 3a48 <adc_sync_init+0x20>
    3a30:	1c08      	adds	r0, r1, #0
    3a32:	bf18      	it	ne
    3a34:	2001      	movne	r0, #1
    3a36:	2243      	movs	r2, #67	; 0x43
    3a38:	4904      	ldr	r1, [pc, #16]	; (3a4c <adc_sync_init+0x24>)
    3a3a:	4b05      	ldr	r3, [pc, #20]	; (3a50 <adc_sync_init+0x28>)
    3a3c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    3a3e:	4621      	mov	r1, r4
    3a40:	4628      	mov	r0, r5
    3a42:	4b04      	ldr	r3, [pc, #16]	; (3a54 <adc_sync_init+0x2c>)
    3a44:	4798      	blx	r3
}
    3a46:	bd38      	pop	{r3, r4, r5, pc}
    3a48:	2000      	movs	r0, #0
    3a4a:	e7f4      	b.n	3a36 <adc_sync_init+0xe>
    3a4c:	00009428 	.word	0x00009428
    3a50:	00003bd5 	.word	0x00003bd5
    3a54:	00003df1 	.word	0x00003df1

00003a58 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    3a58:	b538      	push	{r3, r4, r5, lr}
    3a5a:	460d      	mov	r5, r1
	ASSERT(descr);
    3a5c:	4604      	mov	r4, r0
    3a5e:	2258      	movs	r2, #88	; 0x58
    3a60:	4905      	ldr	r1, [pc, #20]	; (3a78 <adc_sync_enable_channel+0x20>)
    3a62:	3000      	adds	r0, #0
    3a64:	bf18      	it	ne
    3a66:	2001      	movne	r0, #1
    3a68:	4b04      	ldr	r3, [pc, #16]	; (3a7c <adc_sync_enable_channel+0x24>)
    3a6a:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
    3a6c:	4629      	mov	r1, r5
    3a6e:	4620      	mov	r0, r4
    3a70:	4b03      	ldr	r3, [pc, #12]	; (3a80 <adc_sync_enable_channel+0x28>)
    3a72:	4798      	blx	r3

	return ERR_NONE;
}
    3a74:	2000      	movs	r0, #0
    3a76:	bd38      	pop	{r3, r4, r5, pc}
    3a78:	00009428 	.word	0x00009428
    3a7c:	00003bd5 	.word	0x00003bd5
    3a80:	00003ee9 	.word	0x00003ee9

00003a84 <adc_sync_disable_channel>:

/**
 * \brief Disable ADC
 */
int32_t adc_sync_disable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    3a84:	b538      	push	{r3, r4, r5, lr}
    3a86:	460d      	mov	r5, r1
	ASSERT(descr);
    3a88:	4604      	mov	r4, r0
    3a8a:	2263      	movs	r2, #99	; 0x63
    3a8c:	4905      	ldr	r1, [pc, #20]	; (3aa4 <adc_sync_disable_channel+0x20>)
    3a8e:	3000      	adds	r0, #0
    3a90:	bf18      	it	ne
    3a92:	2001      	movne	r0, #1
    3a94:	4b04      	ldr	r3, [pc, #16]	; (3aa8 <adc_sync_disable_channel+0x24>)
    3a96:	4798      	blx	r3
	_adc_sync_disable_channel(&descr->device, channel);
    3a98:	4629      	mov	r1, r5
    3a9a:	4620      	mov	r0, r4
    3a9c:	4b03      	ldr	r3, [pc, #12]	; (3aac <adc_sync_disable_channel+0x28>)
    3a9e:	4798      	blx	r3
	return ERR_NONE;
}
    3aa0:	2000      	movs	r0, #0
    3aa2:	bd38      	pop	{r3, r4, r5, pc}
    3aa4:	00009428 	.word	0x00009428
    3aa8:	00003bd5 	.word	0x00003bd5
    3aac:	00003eff 	.word	0x00003eff

00003ab0 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
    3ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ab4:	460d      	mov	r5, r1
    3ab6:	4691      	mov	r9, r2
    3ab8:	469a      	mov	sl, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
    3aba:	4680      	mov	r8, r0
    3abc:	b1e0      	cbz	r0, 3af8 <adc_sync_read_channel+0x48>
    3abe:	b1ea      	cbz	r2, 3afc <adc_sync_read_channel+0x4c>
    3ac0:	1c18      	adds	r0, r3, #0
    3ac2:	bf18      	it	ne
    3ac4:	2001      	movne	r0, #1
    3ac6:	4f1c      	ldr	r7, [pc, #112]	; (3b38 <adc_sync_read_channel+0x88>)
    3ac8:	2271      	movs	r2, #113	; 0x71
    3aca:	4639      	mov	r1, r7
    3acc:	4e1b      	ldr	r6, [pc, #108]	; (3b3c <adc_sync_read_channel+0x8c>)
    3ace:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
    3ad0:	4644      	mov	r4, r8
    3ad2:	4640      	mov	r0, r8
    3ad4:	4b1a      	ldr	r3, [pc, #104]	; (3b40 <adc_sync_read_channel+0x90>)
    3ad6:	4798      	blx	r3
    3ad8:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
    3ada:	fb9a f0f0 	sdiv	r0, sl, r0
    3ade:	fb08 a010 	mls	r0, r8, r0, sl
    3ae2:	2273      	movs	r2, #115	; 0x73
    3ae4:	4639      	mov	r1, r7
    3ae6:	fab0 f080 	clz	r0, r0
    3aea:	0940      	lsrs	r0, r0, #5
    3aec:	47b0      	blx	r6
	uint16_t offset = 0;
    3aee:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
    3af0:	f8df b058 	ldr.w	fp, [pc, #88]	; 3b4c <adc_sync_read_channel+0x9c>

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    3af4:	4e13      	ldr	r6, [pc, #76]	; (3b44 <adc_sync_read_channel+0x94>)
    3af6:	e007      	b.n	3b08 <adc_sync_read_channel+0x58>
	ASSERT(descr && buffer && length);
    3af8:	2000      	movs	r0, #0
    3afa:	e7e4      	b.n	3ac6 <adc_sync_read_channel+0x16>
    3afc:	2000      	movs	r0, #0
    3afe:	e7e2      	b.n	3ac6 <adc_sync_read_channel+0x16>
    3b00:	4447      	add	r7, r8
    3b02:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
    3b04:	45ba      	cmp	sl, r7
    3b06:	d914      	bls.n	3b32 <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
    3b08:	4620      	mov	r0, r4
    3b0a:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    3b0c:	4629      	mov	r1, r5
    3b0e:	4620      	mov	r0, r4
    3b10:	47b0      	blx	r6
    3b12:	2800      	cmp	r0, #0
    3b14:	d0fa      	beq.n	3b0c <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
    3b16:	4629      	mov	r1, r5
    3b18:	4620      	mov	r0, r4
    3b1a:	4b0b      	ldr	r3, [pc, #44]	; (3b48 <adc_sync_read_channel+0x98>)
    3b1c:	4798      	blx	r3
		buffer[offset] = result;
    3b1e:	f809 0007 	strb.w	r0, [r9, r7]
		if (1 < data_size) {
    3b22:	f1b8 0f01 	cmp.w	r8, #1
    3b26:	d9eb      	bls.n	3b00 <adc_sync_read_channel+0x50>
			buffer[offset + 1] = result >> 8;
    3b28:	eb09 0307 	add.w	r3, r9, r7
    3b2c:	0a00      	lsrs	r0, r0, #8
    3b2e:	7058      	strb	r0, [r3, #1]
    3b30:	e7e6      	b.n	3b00 <adc_sync_read_channel+0x50>

	return offset;
}
    3b32:	4638      	mov	r0, r7
    3b34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b38:	00009428 	.word	0x00009428
    3b3c:	00003bd5 	.word	0x00003bd5
    3b40:	00003f17 	.word	0x00003f17
    3b44:	00003f29 	.word	0x00003f29
    3b48:	00003f4b 	.word	0x00003f4b
    3b4c:	00003f35 	.word	0x00003f35

00003b50 <adc_sync_set_inputs>:
/**
 * \brief Set ADC input source of a channel
 */
int32_t adc_sync_set_inputs(struct adc_sync_descriptor *const descr, const adc_pos_input_t pos_input,
                            const adc_neg_input_t neg_input, const uint8_t channel)
{
    3b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b52:	460d      	mov	r5, r1
    3b54:	4616      	mov	r6, r2
    3b56:	461f      	mov	r7, r3
	ASSERT(descr);
    3b58:	4604      	mov	r4, r0
    3b5a:	22a3      	movs	r2, #163	; 0xa3
    3b5c:	4906      	ldr	r1, [pc, #24]	; (3b78 <adc_sync_set_inputs+0x28>)
    3b5e:	3000      	adds	r0, #0
    3b60:	bf18      	it	ne
    3b62:	2001      	movne	r0, #1
    3b64:	4b05      	ldr	r3, [pc, #20]	; (3b7c <adc_sync_set_inputs+0x2c>)
    3b66:	4798      	blx	r3
	_adc_sync_set_inputs(&descr->device, pos_input, neg_input, channel);
    3b68:	463b      	mov	r3, r7
    3b6a:	4632      	mov	r2, r6
    3b6c:	4629      	mov	r1, r5
    3b6e:	4620      	mov	r0, r4
    3b70:	4c03      	ldr	r4, [pc, #12]	; (3b80 <adc_sync_set_inputs+0x30>)
    3b72:	47a0      	blx	r4

	return ERR_NONE;
}
    3b74:	2000      	movs	r0, #0
    3b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b78:	00009428 	.word	0x00009428
    3b7c:	00003bd5 	.word	0x00003bd5
    3b80:	00003f55 	.word	0x00003f55

00003b84 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3b84:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3b88:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3b8a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3b8c:	f3bf 8f5f 	dmb	sy
    3b90:	4770      	bx	lr

00003b92 <atomic_leave_critical>:
    3b92:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    3b96:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3b98:	f383 8810 	msr	PRIMASK, r3
    3b9c:	4770      	bx	lr
	...

00003ba0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    3ba0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    3ba2:	4b02      	ldr	r3, [pc, #8]	; (3bac <delay_init+0xc>)
    3ba4:	6018      	str	r0, [r3, #0]
    3ba6:	4b02      	ldr	r3, [pc, #8]	; (3bb0 <delay_init+0x10>)
    3ba8:	4798      	blx	r3
    3baa:	bd08      	pop	{r3, pc}
    3bac:	20000624 	.word	0x20000624
    3bb0:	0000460d 	.word	0x0000460d

00003bb4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3bb4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    3bb6:	4b04      	ldr	r3, [pc, #16]	; (3bc8 <delay_ms+0x14>)
    3bb8:	681c      	ldr	r4, [r3, #0]
    3bba:	4b04      	ldr	r3, [pc, #16]	; (3bcc <delay_ms+0x18>)
    3bbc:	4798      	blx	r3
    3bbe:	4601      	mov	r1, r0
    3bc0:	4620      	mov	r0, r4
    3bc2:	4b03      	ldr	r3, [pc, #12]	; (3bd0 <delay_ms+0x1c>)
    3bc4:	4798      	blx	r3
    3bc6:	bd10      	pop	{r4, pc}
    3bc8:	20000624 	.word	0x20000624
    3bcc:	00003f9d 	.word	0x00003f9d
    3bd0:	00004621 	.word	0x00004621

00003bd4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    3bd4:	b900      	cbnz	r0, 3bd8 <assert+0x4>
		__asm("BKPT #0");
    3bd6:	be00      	bkpt	0x0000
    3bd8:	4770      	bx	lr
	...

00003bdc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    3bdc:	b570      	push	{r4, r5, r6, lr}
    3bde:	460e      	mov	r6, r1
    3be0:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    3be2:	4604      	mov	r4, r0
    3be4:	b178      	cbz	r0, 3c06 <ringbuffer_init+0x2a>
    3be6:	b181      	cbz	r1, 3c0a <ringbuffer_init+0x2e>
    3be8:	b1a2      	cbz	r2, 3c14 <ringbuffer_init+0x38>
    3bea:	2001      	movs	r0, #1
    3bec:	2232      	movs	r2, #50	; 0x32
    3bee:	490d      	ldr	r1, [pc, #52]	; (3c24 <ringbuffer_init+0x48>)
    3bf0:	4b0d      	ldr	r3, [pc, #52]	; (3c28 <ringbuffer_init+0x4c>)
    3bf2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    3bf4:	1e6b      	subs	r3, r5, #1
    3bf6:	421d      	tst	r5, r3
    3bf8:	d109      	bne.n	3c0e <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    3bfa:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    3bfc:	2000      	movs	r0, #0
    3bfe:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    3c00:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    3c02:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    3c04:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    3c06:	2000      	movs	r0, #0
    3c08:	e7f0      	b.n	3bec <ringbuffer_init+0x10>
    3c0a:	2000      	movs	r0, #0
    3c0c:	e7ee      	b.n	3bec <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    3c0e:	f06f 000c 	mvn.w	r0, #12
    3c12:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    3c14:	2232      	movs	r2, #50	; 0x32
    3c16:	4903      	ldr	r1, [pc, #12]	; (3c24 <ringbuffer_init+0x48>)
    3c18:	2000      	movs	r0, #0
    3c1a:	4b03      	ldr	r3, [pc, #12]	; (3c28 <ringbuffer_init+0x4c>)
    3c1c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    3c1e:	1e6b      	subs	r3, r5, #1
    3c20:	e7eb      	b.n	3bfa <ringbuffer_init+0x1e>
    3c22:	bf00      	nop
    3c24:	00009444 	.word	0x00009444
    3c28:	00003bd5 	.word	0x00003bd5

00003c2c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    3c2c:	b538      	push	{r3, r4, r5, lr}
    3c2e:	460d      	mov	r5, r1
	ASSERT(rb && data);
    3c30:	4604      	mov	r4, r0
    3c32:	b1a0      	cbz	r0, 3c5e <ringbuffer_get+0x32>
    3c34:	1c08      	adds	r0, r1, #0
    3c36:	bf18      	it	ne
    3c38:	2001      	movne	r0, #1
    3c3a:	224a      	movs	r2, #74	; 0x4a
    3c3c:	490a      	ldr	r1, [pc, #40]	; (3c68 <ringbuffer_get+0x3c>)
    3c3e:	4b0b      	ldr	r3, [pc, #44]	; (3c6c <ringbuffer_get+0x40>)
    3c40:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    3c42:	68a3      	ldr	r3, [r4, #8]
    3c44:	68e2      	ldr	r2, [r4, #12]
    3c46:	429a      	cmp	r2, r3
    3c48:	d00b      	beq.n	3c62 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    3c4a:	6862      	ldr	r2, [r4, #4]
    3c4c:	4013      	ands	r3, r2
    3c4e:	6822      	ldr	r2, [r4, #0]
    3c50:	5cd3      	ldrb	r3, [r2, r3]
    3c52:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    3c54:	68a3      	ldr	r3, [r4, #8]
    3c56:	3301      	adds	r3, #1
    3c58:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    3c5a:	2000      	movs	r0, #0
    3c5c:	bd38      	pop	{r3, r4, r5, pc}
    3c5e:	2000      	movs	r0, #0
    3c60:	e7eb      	b.n	3c3a <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    3c62:	f06f 0009 	mvn.w	r0, #9
}
    3c66:	bd38      	pop	{r3, r4, r5, pc}
    3c68:	00009444 	.word	0x00009444
    3c6c:	00003bd5 	.word	0x00003bd5

00003c70 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    3c70:	b538      	push	{r3, r4, r5, lr}
    3c72:	460d      	mov	r5, r1
	ASSERT(rb);
    3c74:	4604      	mov	r4, r0
    3c76:	225b      	movs	r2, #91	; 0x5b
    3c78:	490b      	ldr	r1, [pc, #44]	; (3ca8 <ringbuffer_put+0x38>)
    3c7a:	3000      	adds	r0, #0
    3c7c:	bf18      	it	ne
    3c7e:	2001      	movne	r0, #1
    3c80:	4b0a      	ldr	r3, [pc, #40]	; (3cac <ringbuffer_put+0x3c>)
    3c82:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    3c84:	68e3      	ldr	r3, [r4, #12]
    3c86:	6862      	ldr	r2, [r4, #4]
    3c88:	4013      	ands	r3, r2
    3c8a:	6822      	ldr	r2, [r4, #0]
    3c8c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    3c8e:	68e3      	ldr	r3, [r4, #12]
    3c90:	6861      	ldr	r1, [r4, #4]
    3c92:	68a2      	ldr	r2, [r4, #8]
    3c94:	1a9a      	subs	r2, r3, r2
    3c96:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    3c98:	bf84      	itt	hi
    3c9a:	1a59      	subhi	r1, r3, r1
    3c9c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    3c9e:	3301      	adds	r3, #1
    3ca0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    3ca2:	2000      	movs	r0, #0
    3ca4:	bd38      	pop	{r3, r4, r5, pc}
    3ca6:	bf00      	nop
    3ca8:	00009444 	.word	0x00009444
    3cac:	00003bd5 	.word	0x00003bd5

00003cb0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    3cb0:	b510      	push	{r4, lr}
	ASSERT(rb);
    3cb2:	4604      	mov	r4, r0
    3cb4:	2271      	movs	r2, #113	; 0x71
    3cb6:	4905      	ldr	r1, [pc, #20]	; (3ccc <ringbuffer_num+0x1c>)
    3cb8:	3000      	adds	r0, #0
    3cba:	bf18      	it	ne
    3cbc:	2001      	movne	r0, #1
    3cbe:	4b04      	ldr	r3, [pc, #16]	; (3cd0 <ringbuffer_num+0x20>)
    3cc0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    3cc2:	68e0      	ldr	r0, [r4, #12]
    3cc4:	68a3      	ldr	r3, [r4, #8]
}
    3cc6:	1ac0      	subs	r0, r0, r3
    3cc8:	bd10      	pop	{r4, pc}
    3cca:	bf00      	nop
    3ccc:	00009444 	.word	0x00009444
    3cd0:	00003bd5 	.word	0x00003bd5

00003cd4 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    3cd4:	b510      	push	{r4, lr}
	ASSERT(rb);
    3cd6:	4604      	mov	r4, r0
    3cd8:	227b      	movs	r2, #123	; 0x7b
    3cda:	4905      	ldr	r1, [pc, #20]	; (3cf0 <ringbuffer_flush+0x1c>)
    3cdc:	3000      	adds	r0, #0
    3cde:	bf18      	it	ne
    3ce0:	2001      	movne	r0, #1
    3ce2:	4b04      	ldr	r3, [pc, #16]	; (3cf4 <ringbuffer_flush+0x20>)
    3ce4:	4798      	blx	r3

	rb->read_index = rb->write_index;
    3ce6:	68e3      	ldr	r3, [r4, #12]
    3ce8:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    3cea:	2000      	movs	r0, #0
    3cec:	bd10      	pop	{r4, pc}
    3cee:	bf00      	nop
    3cf0:	00009444 	.word	0x00009444
    3cf4:	00003bd5 	.word	0x00003bd5

00003cf8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    3cf8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    3cfa:	4a06      	ldr	r2, [pc, #24]	; (3d14 <_sbrk+0x1c>)
    3cfc:	6812      	ldr	r2, [r2, #0]
    3cfe:	b122      	cbz	r2, 3d0a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3d00:	4a04      	ldr	r2, [pc, #16]	; (3d14 <_sbrk+0x1c>)
    3d02:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3d04:	4403      	add	r3, r0
    3d06:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    3d08:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3d0a:	4903      	ldr	r1, [pc, #12]	; (3d18 <_sbrk+0x20>)
    3d0c:	4a01      	ldr	r2, [pc, #4]	; (3d14 <_sbrk+0x1c>)
    3d0e:	6011      	str	r1, [r2, #0]
    3d10:	e7f6      	b.n	3d00 <_sbrk+0x8>
    3d12:	bf00      	nop
    3d14:	20000628 	.word	0x20000628
    3d18:	20013f80 	.word	0x20013f80

00003d1c <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    3d1c:	6940      	ldr	r0, [r0, #20]
    3d1e:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    3d22:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    3d26:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    3d28:	0040      	lsls	r0, r0, #1
    3d2a:	3076      	adds	r0, #118	; 0x76
}
    3d2c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    3d30:	4770      	bx	lr
	...

00003d34 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3d34:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3d36:	f013 0f01 	tst.w	r3, #1
    3d3a:	d1fb      	bne.n	3d34 <_adc_init>
    3d3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3d3e:	f013 0f03 	tst.w	r3, #3
    3d42:	d1fb      	bne.n	3d3c <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    3d44:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    3d46:	f013 0f02 	tst.w	r3, #2
    3d4a:	d130      	bne.n	3dae <_adc_init+0x7a>
{
    3d4c:	b410      	push	{r4}
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3d4e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3d50:	f013 0f01 	tst.w	r3, #1
    3d54:	d1fb      	bne.n	3d4e <_adc_init+0x1a>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    3d56:	8803      	ldrh	r3, [r0, #0]
    3d58:	b29b      	uxth	r3, r3
    3d5a:	f043 0301 	orr.w	r3, r3, #1
    3d5e:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3d60:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3d62:	f013 0f01 	tst.w	r3, #1
    3d66:	d1fb      	bne.n	3d60 <_adc_init+0x2c>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	ADC0->CTRLB.reg = 0x0001; //12 bit, left adjusted, single conversion
    3d68:	4b12      	ldr	r3, [pc, #72]	; (3db4 <_adc_init+0x80>)
    3d6a:	2201      	movs	r2, #1
    3d6c:	80da      	strh	r2, [r3, #6]
	//hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
	
	ADC0->REFCTRL.reg = 0x03; // REFCOMP disable, VDDANA
    3d6e:	2203      	movs	r2, #3
    3d70:	721a      	strb	r2, [r3, #8]
	//hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
	
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    3d72:	2416      	movs	r4, #22
    3d74:	4a10      	ldr	r2, [pc, #64]	; (3db8 <_adc_init+0x84>)
    3d76:	fb04 2101 	mla	r1, r4, r1, r2
    3d7a:	79ca      	ldrb	r2, [r1, #7]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    3d7c:	7082      	strb	r2, [r0, #2]
	
	ADC0->INPUTCTRL.reg = 0x1800; // internal ground, single ended mode
    3d7e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    3d82:	809a      	strh	r2, [r3, #4]
	//hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
	
	//ADC0->AVGCTRL.reg = 0x22; //4 sample average
	ADC0->AVGCTRL.reg = 0x49; //512 sample average
    3d84:	2249      	movs	r2, #73	; 0x49
    3d86:	729a      	strb	r2, [r3, #10]
	//hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
	
	ADC0->SAMPCTRL.reg = 0x06;
    3d88:	2206      	movs	r2, #6
    3d8a:	72da      	strb	r2, [r3, #11]
	//hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
	
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    3d8c:	898a      	ldrh	r2, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    3d8e:	8182      	strh	r2, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    3d90:	89ca      	ldrh	r2, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    3d92:	81c2      	strh	r2, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    3d94:	8a0a      	ldrh	r2, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    3d96:	8202      	strh	r2, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    3d98:	8a4a      	ldrh	r2, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    3d9a:	8242      	strh	r2, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    3d9c:	7d0a      	ldrb	r2, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    3d9e:	70c2      	strb	r2, [r0, #3]
	//hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
	
	//R2R - 1
	//DIV64 - 5
	//ENABLE - 1	 
	ADC0->CTRLA.reg = 0x85C2;
    3da0:	f248 52c2 	movw	r2, #34242	; 0x85c2
    3da4:	801a      	strh	r2, [r3, #0]

	return ERR_NONE;
    3da6:	2000      	movs	r0, #0
}
    3da8:	f85d 4b04 	ldr.w	r4, [sp], #4
    3dac:	4770      	bx	lr
		return ERR_DENIED;
    3dae:	f06f 0010 	mvn.w	r0, #16
    3db2:	4770      	bx	lr
    3db4:	43001c00 	.word	0x43001c00
    3db8:	00009468 	.word	0x00009468

00003dbc <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    3dbc:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    3dc0:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    3dc4:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    3dc8:	b148      	cbz	r0, 3dde <_adc_get_regs+0x22>
    3dca:	2801      	cmp	r0, #1
    3dcc:	d009      	beq.n	3de2 <_adc_get_regs+0x26>
{
    3dce:	b508      	push	{r3, lr}
	ASSERT(false);
    3dd0:	2291      	movs	r2, #145	; 0x91
    3dd2:	4905      	ldr	r1, [pc, #20]	; (3de8 <_adc_get_regs+0x2c>)
    3dd4:	2000      	movs	r0, #0
    3dd6:	4b05      	ldr	r3, [pc, #20]	; (3dec <_adc_get_regs+0x30>)
    3dd8:	4798      	blx	r3
	return 0;
    3dda:	2000      	movs	r0, #0
    3ddc:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    3dde:	2000      	movs	r0, #0
    3de0:	4770      	bx	lr
    3de2:	2001      	movs	r0, #1
    3de4:	4770      	bx	lr
    3de6:	bf00      	nop
    3de8:	00009494 	.word	0x00009494
    3dec:	00003bd5 	.word	0x00003bd5

00003df0 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    3df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3df4:	460d      	mov	r5, r1
	int32_t init_status;

	ASSERT(device);
    3df6:	4604      	mov	r4, r0
    3df8:	22e8      	movs	r2, #232	; 0xe8
    3dfa:	4935      	ldr	r1, [pc, #212]	; (3ed0 <_adc_sync_init+0xe0>)
    3dfc:	3000      	adds	r0, #0
    3dfe:	bf18      	it	ne
    3e00:	2001      	movne	r0, #1
    3e02:	4b34      	ldr	r3, [pc, #208]	; (3ed4 <_adc_sync_init+0xe4>)
    3e04:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    3e06:	4628      	mov	r0, r5
    3e08:	4b33      	ldr	r3, [pc, #204]	; (3ed8 <_adc_sync_init+0xe8>)
    3e0a:	4798      	blx	r3
    3e0c:	4601      	mov	r1, r0
    3e0e:	4628      	mov	r0, r5
    3e10:	4b32      	ldr	r3, [pc, #200]	; (3edc <_adc_sync_init+0xec>)
    3e12:	4798      	blx	r3
	if (init_status) {
    3e14:	4607      	mov	r7, r0
    3e16:	2800      	cmp	r0, #0
    3e18:	d157      	bne.n	3eca <_adc_sync_init+0xda>
		return init_status;
	}
	device->hw = hw;
    3e1a:	6025      	str	r5, [r4, #0]
	_adc_init_irq_param(hw, device);
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    3e1c:	4620      	mov	r0, r4
    3e1e:	4e30      	ldr	r6, [pc, #192]	; (3ee0 <_adc_sync_init+0xf0>)
    3e20:	47b0      	blx	r6
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e22:	0943      	lsrs	r3, r0, #5
    3e24:	f000 001f 	and.w	r0, r0, #31
    3e28:	2501      	movs	r5, #1
    3e2a:	fa05 f000 	lsl.w	r0, r5, r0
    3e2e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3ee4 <_adc_sync_init+0xf4>
    3e32:	3320      	adds	r3, #32
    3e34:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e3c:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    3e40:	4620      	mov	r0, r4
    3e42:	47b0      	blx	r6
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e44:	0943      	lsrs	r3, r0, #5
    3e46:	f000 001f 	and.w	r0, r0, #31
    3e4a:	fa05 f000 	lsl.w	r0, r5, r0
    3e4e:	3360      	adds	r3, #96	; 0x60
    3e50:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    3e54:	4620      	mov	r0, r4
    3e56:	47b0      	blx	r6
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e58:	0943      	lsrs	r3, r0, #5
    3e5a:	f000 001f 	and.w	r0, r0, #31
    3e5e:	4085      	lsls	r5, r0
    3e60:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    3e64:	4620      	mov	r0, r4
    3e66:	47b0      	blx	r6
    3e68:	3001      	adds	r0, #1
    3e6a:	b280      	uxth	r0, r0
    3e6c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3e6e:	2b00      	cmp	r3, #0
    3e70:	db2b      	blt.n	3eca <_adc_sync_init+0xda>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e72:	095b      	lsrs	r3, r3, #5
    3e74:	f000 001f 	and.w	r0, r0, #31
    3e78:	2201      	movs	r2, #1
    3e7a:	fa02 f000 	lsl.w	r0, r2, r0
    3e7e:	3320      	adds	r3, #32
    3e80:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3e84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e88:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    3e8c:	4620      	mov	r0, r4
    3e8e:	47b0      	blx	r6
    3e90:	3001      	adds	r0, #1
    3e92:	b280      	uxth	r0, r0
    3e94:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3e96:	2b00      	cmp	r3, #0
    3e98:	db17      	blt.n	3eca <_adc_sync_init+0xda>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e9a:	095b      	lsrs	r3, r3, #5
    3e9c:	f000 001f 	and.w	r0, r0, #31
    3ea0:	2201      	movs	r2, #1
    3ea2:	fa02 f000 	lsl.w	r0, r2, r0
    3ea6:	3360      	adds	r3, #96	; 0x60
    3ea8:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    3eac:	4620      	mov	r0, r4
    3eae:	47b0      	blx	r6
    3eb0:	3001      	adds	r0, #1
    3eb2:	b280      	uxth	r0, r0
    3eb4:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3eb6:	2b00      	cmp	r3, #0
    3eb8:	db07      	blt.n	3eca <_adc_sync_init+0xda>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3eba:	095b      	lsrs	r3, r3, #5
    3ebc:	f000 001f 	and.w	r0, r0, #31
    3ec0:	2201      	movs	r2, #1
    3ec2:	fa02 f000 	lsl.w	r0, r2, r0
    3ec6:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	return ERR_NONE;
}
    3eca:	4638      	mov	r0, r7
    3ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ed0:	00009494 	.word	0x00009494
    3ed4:	00003bd5 	.word	0x00003bd5
    3ed8:	00003dbd 	.word	0x00003dbd
    3edc:	00003d35 	.word	0x00003d35
    3ee0:	00003d1d 	.word	0x00003d1d
    3ee4:	e000e100 	.word	0xe000e100

00003ee8 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    3ee8:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3eea:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3eec:	f013 0f03 	tst.w	r3, #3
    3ef0:	d1fb      	bne.n	3eea <_adc_sync_enable_channel+0x2>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3ef2:	8813      	ldrh	r3, [r2, #0]
    3ef4:	b29b      	uxth	r3, r3
    3ef6:	f043 0302 	orr.w	r3, r3, #2
    3efa:	8013      	strh	r3, [r2, #0]
    3efc:	4770      	bx	lr

00003efe <_adc_sync_disable_channel>:
 */
void _adc_sync_disable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_clear_CTRLA_ENABLE_bit(device->hw);
    3efe:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3f00:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3f02:	f013 0f03 	tst.w	r3, #3
    3f06:	d1fb      	bne.n	3f00 <_adc_sync_disable_channel+0x2>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    3f08:	8813      	ldrh	r3, [r2, #0]
    3f0a:	f023 0302 	bic.w	r3, r3, #2
    3f0e:	041b      	lsls	r3, r3, #16
    3f10:	0c1b      	lsrs	r3, r3, #16
    3f12:	8013      	strh	r3, [r2, #0]
    3f14:	4770      	bx	lr

00003f16 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    3f16:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    3f18:	88db      	ldrh	r3, [r3, #6]
    3f1a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    3f1e:	2b03      	cmp	r3, #3
}
    3f20:	bf0c      	ite	eq
    3f22:	2001      	moveq	r0, #1
    3f24:	2002      	movne	r0, #2
    3f26:	4770      	bx	lr

00003f28 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    3f28:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    3f2a:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    3f2e:	f000 0001 	and.w	r0, r0, #1
    3f32:	4770      	bx	lr

00003f34 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    3f34:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3f36:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3f3c:	2b00      	cmp	r3, #0
    3f3e:	d1fa      	bne.n	3f36 <_adc_sync_convert+0x2>

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    3f40:	7d13      	ldrb	r3, [r2, #20]
    3f42:	f043 0302 	orr.w	r3, r3, #2
    3f46:	7513      	strb	r3, [r2, #20]
    3f48:	4770      	bx	lr

00003f4a <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    3f4a:	6803      	ldr	r3, [r0, #0]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    3f4c:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    3f50:	b280      	uxth	r0, r0
    3f52:	4770      	bx	lr

00003f54 <_adc_sync_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_sync_set_inputs(struct _adc_sync_device *const device, const adc_pos_input_t pos_input,
                          const adc_neg_input_t neg_input, const uint8_t channel)
{
    3f54:	b410      	push	{r4}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
    3f56:	6804      	ldr	r4, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3f58:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d1fa      	bne.n	3f58 <_adc_sync_set_inputs+0x4>
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    3f62:	88a3      	ldrh	r3, [r4, #4]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
    3f64:	f023 031f 	bic.w	r3, r3, #31
    3f68:	041b      	lsls	r3, r3, #16
    3f6a:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
    3f6c:	f001 011f 	and.w	r1, r1, #31
    3f70:	430b      	orrs	r3, r1
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    3f72:	80a3      	strh	r3, [r4, #4]
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
    3f74:	6801      	ldr	r1, [r0, #0]
    3f76:	b292      	uxth	r2, r2
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3f78:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    3f7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d1fa      	bne.n	3f78 <_adc_sync_set_inputs+0x24>
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    3f82:	888b      	ldrh	r3, [r1, #4]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
    3f84:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3f88:	041b      	lsls	r3, r3, #16
    3f8a:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
    3f8c:	0212      	lsls	r2, r2, #8
    3f8e:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
    3f92:	4313      	orrs	r3, r2
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    3f94:	808b      	strh	r3, [r1, #4]
}
    3f96:	f85d 4b04 	ldr.w	r4, [sp], #4
    3f9a:	4770      	bx	lr

00003f9c <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    3f9c:	f64b 3380 	movw	r3, #48000	; 0xbb80
    3fa0:	fb03 f000 	mul.w	r0, r3, r0
    3fa4:	4770      	bx	lr
	...

00003fa8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3fa8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3faa:	4a0c      	ldr	r2, [pc, #48]	; (3fdc <_init_chip+0x34>)
    3fac:	8813      	ldrh	r3, [r2, #0]
    3fae:	b29b      	uxth	r3, r3
    3fb0:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    3fb2:	4b0b      	ldr	r3, [pc, #44]	; (3fe0 <_init_chip+0x38>)
    3fb4:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    3fb6:	4b0b      	ldr	r3, [pc, #44]	; (3fe4 <_init_chip+0x3c>)
    3fb8:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3fba:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3fbe:	4c0a      	ldr	r4, [pc, #40]	; (3fe8 <_init_chip+0x40>)
    3fc0:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    3fc2:	4b0a      	ldr	r3, [pc, #40]	; (3fec <_init_chip+0x44>)
    3fc4:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3fc6:	f240 70ff 	movw	r0, #2047	; 0x7ff
    3fca:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    3fcc:	4a08      	ldr	r2, [pc, #32]	; (3ff0 <_init_chip+0x48>)
    3fce:	6913      	ldr	r3, [r2, #16]
    3fd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3fd4:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    3fd6:	4b07      	ldr	r3, [pc, #28]	; (3ff4 <_init_chip+0x4c>)
    3fd8:	4798      	blx	r3
    3fda:	bd10      	pop	{r4, pc}
    3fdc:	41004000 	.word	0x41004000
    3fe0:	00004291 	.word	0x00004291
    3fe4:	00004231 	.word	0x00004231
    3fe8:	00004189 	.word	0x00004189
    3fec:	000042bd 	.word	0x000042bd
    3ff0:	40000800 	.word	0x40000800
    3ff4:	0000406d 	.word	0x0000406d

00003ff8 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    3ff8:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    3ffa:	4a1a      	ldr	r2, [pc, #104]	; (4064 <_dmac_handler+0x6c>)
    3ffc:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    3ffe:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    4002:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4006:	4818      	ldr	r0, [pc, #96]	; (4068 <_dmac_handler+0x70>)
    4008:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    400c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    4010:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    4014:	f012 0f01 	tst.w	r2, #1
    4018:	d10a      	bne.n	4030 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    401a:	011a      	lsls	r2, r3, #4
    401c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4020:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    4024:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    4028:	f012 0f02 	tst.w	r2, #2
    402c:	d10b      	bne.n	4046 <_dmac_handler+0x4e>
    402e:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    4030:	011a      	lsls	r2, r3, #4
    4032:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4036:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    403a:	2101      	movs	r1, #1
    403c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    4040:	6843      	ldr	r3, [r0, #4]
    4042:	4798      	blx	r3
    4044:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    4046:	011a      	lsls	r2, r3, #4
    4048:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    404c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    4050:	2102      	movs	r1, #2
    4052:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    4056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    405a:	4a03      	ldr	r2, [pc, #12]	; (4068 <_dmac_handler+0x70>)
    405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4060:	4798      	blx	r3
	}
}
    4062:	e7e4      	b.n	402e <_dmac_handler+0x36>
    4064:	4100a000 	.word	0x4100a000
    4068:	20000630 	.word	0x20000630

0000406c <_dma_init>:
{
    406c:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    406e:	4a33      	ldr	r2, [pc, #204]	; (413c <_dma_init+0xd0>)
    4070:	8813      	ldrh	r3, [r2, #0]
    4072:	f023 0302 	bic.w	r3, r3, #2
    4076:	041b      	lsls	r3, r3, #16
    4078:	0c1b      	lsrs	r3, r3, #16
    407a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    407c:	8853      	ldrh	r3, [r2, #2]
    407e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    4082:	041b      	lsls	r3, r3, #16
    4084:	0c1b      	lsrs	r3, r3, #16
    4086:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    4088:	8813      	ldrh	r3, [r2, #0]
    408a:	b29b      	uxth	r3, r3
    408c:	f043 0301 	orr.w	r3, r3, #1
    4090:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    4092:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    4094:	f013 0f01 	tst.w	r3, #1
    4098:	d1fb      	bne.n	4092 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    409a:	4b28      	ldr	r3, [pc, #160]	; (413c <_dma_init+0xd0>)
    409c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    40a0:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    40a2:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    40a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    40a8:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    40aa:	2000      	movs	r0, #0
    40ac:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    40ae:	4a24      	ldr	r2, [pc, #144]	; (4140 <_dma_init+0xd4>)
    40b0:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    40b4:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    40b6:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    40ba:	639a      	str	r2, [r3, #56]	; 0x38
    40bc:	4b21      	ldr	r3, [pc, #132]	; (4144 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    40be:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    40c2:	681c      	ldr	r4, [r3, #0]
    40c4:	0101      	lsls	r1, r0, #4
    40c6:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    40ca:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    40ce:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    40d0:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    40d2:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    40d6:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    40d8:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    40dc:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    40de:	4429      	add	r1, r5
    40e0:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    40e4:	3001      	adds	r0, #1
    40e6:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    40e8:	2820      	cmp	r0, #32
    40ea:	d1ea      	bne.n	40c2 <_dma_init+0x56>
    40ec:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    40ee:	2001      	movs	r0, #1
    40f0:	4915      	ldr	r1, [pc, #84]	; (4148 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    40f2:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    40f4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    40f8:	d00b      	beq.n	4112 <_dma_init+0xa6>
    40fa:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    40fc:	2b24      	cmp	r3, #36	; 0x24
    40fe:	d1f8      	bne.n	40f2 <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    4100:	4a0e      	ldr	r2, [pc, #56]	; (413c <_dma_init+0xd0>)
    4102:	8813      	ldrh	r3, [r2, #0]
    4104:	b29b      	uxth	r3, r3
    4106:	f043 0302 	orr.w	r3, r3, #2
    410a:	8013      	strh	r3, [r2, #0]
}
    410c:	2000      	movs	r0, #0
    410e:	bc30      	pop	{r4, r5}
    4110:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4112:	095c      	lsrs	r4, r3, #5
    4114:	f002 021f 	and.w	r2, r2, #31
    4118:	fa00 f202 	lsl.w	r2, r0, r2
    411c:	f104 0520 	add.w	r5, r4, #32
    4120:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4124:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4128:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    412c:	f104 0560 	add.w	r5, r4, #96	; 0x60
    4130:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4134:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    4138:	e7df      	b.n	40fa <_dma_init+0x8e>
    413a:	bf00      	nop
    413c:	4100a000 	.word	0x4100a000
    4140:	20000630 	.word	0x20000630
    4144:	000094ac 	.word	0x000094ac
    4148:	e000e100 	.word	0xe000e100

0000414c <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    414c:	b508      	push	{r3, lr}
	_dmac_handler();
    414e:	4b01      	ldr	r3, [pc, #4]	; (4154 <DMAC_0_Handler+0x8>)
    4150:	4798      	blx	r3
    4152:	bd08      	pop	{r3, pc}
    4154:	00003ff9 	.word	0x00003ff9

00004158 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    4158:	b508      	push	{r3, lr}
	_dmac_handler();
    415a:	4b01      	ldr	r3, [pc, #4]	; (4160 <DMAC_1_Handler+0x8>)
    415c:	4798      	blx	r3
    415e:	bd08      	pop	{r3, pc}
    4160:	00003ff9 	.word	0x00003ff9

00004164 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    4164:	b508      	push	{r3, lr}
	_dmac_handler();
    4166:	4b01      	ldr	r3, [pc, #4]	; (416c <DMAC_2_Handler+0x8>)
    4168:	4798      	blx	r3
    416a:	bd08      	pop	{r3, pc}
    416c:	00003ff9 	.word	0x00003ff9

00004170 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    4170:	b508      	push	{r3, lr}
	_dmac_handler();
    4172:	4b01      	ldr	r3, [pc, #4]	; (4178 <DMAC_3_Handler+0x8>)
    4174:	4798      	blx	r3
    4176:	bd08      	pop	{r3, pc}
    4178:	00003ff9 	.word	0x00003ff9

0000417c <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    417c:	b508      	push	{r3, lr}
	_dmac_handler();
    417e:	4b01      	ldr	r3, [pc, #4]	; (4184 <DMAC_4_Handler+0x8>)
    4180:	4798      	blx	r3
    4182:	bd08      	pop	{r3, pc}
    4184:	00003ff9 	.word	0x00003ff9

00004188 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    4188:	f010 0f01 	tst.w	r0, #1
    418c:	d002      	beq.n	4194 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    418e:	4a23      	ldr	r2, [pc, #140]	; (421c <_gclk_init_generators_by_fref+0x94>)
    4190:	4b23      	ldr	r3, [pc, #140]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    4192:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    4194:	f010 0f02 	tst.w	r0, #2
    4198:	d002      	beq.n	41a0 <_gclk_init_generators_by_fref+0x18>
    419a:	4a22      	ldr	r2, [pc, #136]	; (4224 <_gclk_init_generators_by_fref+0x9c>)
    419c:	4b20      	ldr	r3, [pc, #128]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    419e:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    41a0:	f010 0f04 	tst.w	r0, #4
    41a4:	d002      	beq.n	41ac <_gclk_init_generators_by_fref+0x24>
    41a6:	4a1d      	ldr	r2, [pc, #116]	; (421c <_gclk_init_generators_by_fref+0x94>)
    41a8:	4b1d      	ldr	r3, [pc, #116]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    41aa:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    41ac:	f010 0f08 	tst.w	r0, #8
    41b0:	d002      	beq.n	41b8 <_gclk_init_generators_by_fref+0x30>
    41b2:	4a1a      	ldr	r2, [pc, #104]	; (421c <_gclk_init_generators_by_fref+0x94>)
    41b4:	4b1a      	ldr	r3, [pc, #104]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    41b6:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    41b8:	f010 0f10 	tst.w	r0, #16
    41bc:	d002      	beq.n	41c4 <_gclk_init_generators_by_fref+0x3c>
    41be:	4a17      	ldr	r2, [pc, #92]	; (421c <_gclk_init_generators_by_fref+0x94>)
    41c0:	4b17      	ldr	r3, [pc, #92]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    41c2:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    41c4:	f010 0f20 	tst.w	r0, #32
    41c8:	d002      	beq.n	41d0 <_gclk_init_generators_by_fref+0x48>
    41ca:	4a14      	ldr	r2, [pc, #80]	; (421c <_gclk_init_generators_by_fref+0x94>)
    41cc:	4b14      	ldr	r3, [pc, #80]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    41ce:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    41d0:	f010 0f40 	tst.w	r0, #64	; 0x40
    41d4:	d002      	beq.n	41dc <_gclk_init_generators_by_fref+0x54>
    41d6:	4a11      	ldr	r2, [pc, #68]	; (421c <_gclk_init_generators_by_fref+0x94>)
    41d8:	4b11      	ldr	r3, [pc, #68]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    41da:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    41dc:	f010 0f80 	tst.w	r0, #128	; 0x80
    41e0:	d002      	beq.n	41e8 <_gclk_init_generators_by_fref+0x60>
    41e2:	4a0e      	ldr	r2, [pc, #56]	; (421c <_gclk_init_generators_by_fref+0x94>)
    41e4:	4b0e      	ldr	r3, [pc, #56]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    41e6:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    41e8:	f410 7f80 	tst.w	r0, #256	; 0x100
    41ec:	d002      	beq.n	41f4 <_gclk_init_generators_by_fref+0x6c>
    41ee:	4a0b      	ldr	r2, [pc, #44]	; (421c <_gclk_init_generators_by_fref+0x94>)
    41f0:	4b0b      	ldr	r3, [pc, #44]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    41f2:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    41f4:	f410 7f00 	tst.w	r0, #512	; 0x200
    41f8:	d002      	beq.n	4200 <_gclk_init_generators_by_fref+0x78>
    41fa:	4a08      	ldr	r2, [pc, #32]	; (421c <_gclk_init_generators_by_fref+0x94>)
    41fc:	4b08      	ldr	r3, [pc, #32]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    41fe:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    4200:	f410 6f80 	tst.w	r0, #1024	; 0x400
    4204:	d002      	beq.n	420c <_gclk_init_generators_by_fref+0x84>
    4206:	4a08      	ldr	r2, [pc, #32]	; (4228 <_gclk_init_generators_by_fref+0xa0>)
    4208:	4b05      	ldr	r3, [pc, #20]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    420a:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    420c:	f410 6f00 	tst.w	r0, #2048	; 0x800
    4210:	d002      	beq.n	4218 <_gclk_init_generators_by_fref+0x90>
    4212:	4a06      	ldr	r2, [pc, #24]	; (422c <_gclk_init_generators_by_fref+0xa4>)
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <_gclk_init_generators_by_fref+0x98>)
    4216:	64da      	str	r2, [r3, #76]	; 0x4c
    4218:	4770      	bx	lr
    421a:	bf00      	nop
    421c:	00012b06 	.word	0x00012b06
    4220:	40001c00 	.word	0x40001c00
    4224:	00012306 	.word	0x00012306
    4228:	00012b05 	.word	0x00012b05
    422c:	00013b05 	.word	0x00013b05

00004230 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    4230:	2201      	movs	r2, #1
    4232:	4b01      	ldr	r3, [pc, #4]	; (4238 <_mclk_init+0x8>)
    4234:	715a      	strb	r2, [r3, #5]
    4236:	4770      	bx	lr
    4238:	40000800 	.word	0x40000800

0000423c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    423c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    423e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    4240:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    4242:	f012 0f01 	tst.w	r2, #1
    4246:	d005      	beq.n	4254 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    4248:	2201      	movs	r2, #1
    424a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    424c:	6803      	ldr	r3, [r0, #0]
    424e:	b153      	cbz	r3, 4266 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    4250:	4798      	blx	r3
    4252:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    4254:	8a1a      	ldrh	r2, [r3, #16]
    4256:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    4258:	b12a      	cbz	r2, 4266 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    425a:	f240 225e 	movw	r2, #606	; 0x25e
    425e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    4260:	6843      	ldr	r3, [r0, #4]
    4262:	b103      	cbz	r3, 4266 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    4264:	4798      	blx	r3
    4266:	bd08      	pop	{r3, pc}

00004268 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    4268:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    426a:	4b02      	ldr	r3, [pc, #8]	; (4274 <NVMCTRL_0_Handler+0xc>)
    426c:	6818      	ldr	r0, [r3, #0]
    426e:	4b02      	ldr	r3, [pc, #8]	; (4278 <NVMCTRL_0_Handler+0x10>)
    4270:	4798      	blx	r3
    4272:	bd08      	pop	{r3, pc}
    4274:	20000bb0 	.word	0x20000bb0
    4278:	0000423d 	.word	0x0000423d

0000427c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    427c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    427e:	4b02      	ldr	r3, [pc, #8]	; (4288 <NVMCTRL_1_Handler+0xc>)
    4280:	6818      	ldr	r0, [r3, #0]
    4282:	4b02      	ldr	r3, [pc, #8]	; (428c <NVMCTRL_1_Handler+0x10>)
    4284:	4798      	blx	r3
    4286:	bd08      	pop	{r3, pc}
    4288:	20000bb0 	.word	0x20000bb0
    428c:	0000423d 	.word	0x0000423d

00004290 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    4290:	4b09      	ldr	r3, [pc, #36]	; (42b8 <_osc32kctrl_init_sources+0x28>)
    4292:	f242 024e 	movw	r2, #8270	; 0x204e
    4296:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4298:	2201      	movs	r2, #1
    429a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    429c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    429e:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    42a0:	2200      	movs	r2, #0
    42a2:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    42a4:	461a      	mov	r2, r3
    42a6:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    42a8:	f013 0f01 	tst.w	r3, #1
    42ac:	d0fb      	beq.n	42a6 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    42ae:	2204      	movs	r2, #4
    42b0:	4b01      	ldr	r3, [pc, #4]	; (42b8 <_osc32kctrl_init_sources+0x28>)
    42b2:	741a      	strb	r2, [r3, #16]
    42b4:	4770      	bx	lr
    42b6:	bf00      	nop
    42b8:	40001400 	.word	0x40001400

000042bc <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    42bc:	4a2b      	ldr	r2, [pc, #172]	; (436c <_oscctrl_init_referenced_generators+0xb0>)
    42be:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    42c0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    42c4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    42c8:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    42ca:	4b29      	ldr	r3, [pc, #164]	; (4370 <_oscctrl_init_referenced_generators+0xb4>)
    42cc:	2200      	movs	r2, #0
    42ce:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    42d0:	4a28      	ldr	r2, [pc, #160]	; (4374 <_oscctrl_init_referenced_generators+0xb8>)
    42d2:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    42d4:	461a      	mov	r2, r3
    42d6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    42da:	f013 0f10 	tst.w	r3, #16
    42de:	d1fa      	bne.n	42d6 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    42e0:	2200      	movs	r2, #0
    42e2:	4b23      	ldr	r3, [pc, #140]	; (4370 <_oscctrl_init_referenced_generators+0xb4>)
    42e4:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    42e8:	461a      	mov	r2, r3
    42ea:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    42ee:	f013 0f04 	tst.w	r3, #4
    42f2:	d1fa      	bne.n	42ea <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    42f4:	2242      	movs	r2, #66	; 0x42
    42f6:	4b1e      	ldr	r3, [pc, #120]	; (4370 <_oscctrl_init_referenced_generators+0xb4>)
    42f8:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    42fa:	461a      	mov	r2, r3
    42fc:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    4300:	f013 0f02 	tst.w	r3, #2
    4304:	d1fa      	bne.n	42fc <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4306:	4b1a      	ldr	r3, [pc, #104]	; (4370 <_oscctrl_init_referenced_generators+0xb4>)
    4308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    430a:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    430c:	461a      	mov	r2, r3
    430e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    4312:	f013 0f08 	tst.w	r3, #8
    4316:	d1fa      	bne.n	430e <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4318:	2282      	movs	r2, #130	; 0x82
    431a:	4b15      	ldr	r3, [pc, #84]	; (4370 <_oscctrl_init_referenced_generators+0xb4>)
    431c:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4320:	461a      	mov	r2, r3
    4322:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4326:	f013 0f04 	tst.w	r3, #4
    432a:	d1fa      	bne.n	4322 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    432c:	4b10      	ldr	r3, [pc, #64]	; (4370 <_oscctrl_init_referenced_generators+0xb4>)
    432e:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    4332:	f013 0f01 	tst.w	r3, #1
    4336:	d012      	beq.n	435e <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4338:	4a0d      	ldr	r2, [pc, #52]	; (4370 <_oscctrl_init_referenced_generators+0xb4>)
    433a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    433c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    4340:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4344:	d1f9      	bne.n	433a <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4346:	4a09      	ldr	r2, [pc, #36]	; (436c <_oscctrl_init_referenced_generators+0xb0>)
    4348:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    434a:	2b00      	cmp	r3, #0
    434c:	d1fc      	bne.n	4348 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    434e:	4a07      	ldr	r2, [pc, #28]	; (436c <_oscctrl_init_referenced_generators+0xb0>)
    4350:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    4352:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    4356:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    435a:	6213      	str	r3, [r2, #32]
    435c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    435e:	4a04      	ldr	r2, [pc, #16]	; (4370 <_oscctrl_init_referenced_generators+0xb4>)
    4360:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    4362:	f413 7f80 	tst.w	r3, #256	; 0x100
    4366:	d0fb      	beq.n	4360 <_oscctrl_init_referenced_generators+0xa4>
    4368:	e7ed      	b.n	4346 <_oscctrl_init_referenced_generators+0x8a>
    436a:	bf00      	nop
    436c:	40001c00 	.word	0x40001c00
    4370:	40001000 	.word	0x40001000
    4374:	04010000 	.word	0x04010000

00004378 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    4378:	b500      	push	{lr}
    437a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    437c:	4b0d      	ldr	r3, [pc, #52]	; (43b4 <RAMECC_Handler+0x3c>)
    437e:	789b      	ldrb	r3, [r3, #2]
    4380:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    4382:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    4384:	9b01      	ldr	r3, [sp, #4]
    4386:	f013 0f02 	tst.w	r3, #2
    438a:	d006      	beq.n	439a <RAMECC_Handler+0x22>
    438c:	4b0a      	ldr	r3, [pc, #40]	; (43b8 <RAMECC_Handler+0x40>)
    438e:	681b      	ldr	r3, [r3, #0]
    4390:	b11b      	cbz	r3, 439a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    4392:	4a08      	ldr	r2, [pc, #32]	; (43b4 <RAMECC_Handler+0x3c>)
    4394:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    4396:	4798      	blx	r3
    4398:	e009      	b.n	43ae <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    439a:	9b01      	ldr	r3, [sp, #4]
    439c:	f013 0f01 	tst.w	r3, #1
    43a0:	d005      	beq.n	43ae <RAMECC_Handler+0x36>
    43a2:	4b05      	ldr	r3, [pc, #20]	; (43b8 <RAMECC_Handler+0x40>)
    43a4:	685b      	ldr	r3, [r3, #4]
    43a6:	b113      	cbz	r3, 43ae <RAMECC_Handler+0x36>
    43a8:	4a02      	ldr	r2, [pc, #8]	; (43b4 <RAMECC_Handler+0x3c>)
    43aa:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    43ac:	4798      	blx	r3
	} else {
		return;
	}
}
    43ae:	b003      	add	sp, #12
    43b0:	f85d fb04 	ldr.w	pc, [sp], #4
    43b4:	41020000 	.word	0x41020000
    43b8:	20003f6c 	.word	0x20003f6c

000043bc <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    43bc:	b470      	push	{r4, r5, r6}
    43be:	b087      	sub	sp, #28
    43c0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    43c2:	466c      	mov	r4, sp
    43c4:	4d0c      	ldr	r5, [pc, #48]	; (43f8 <_sercom_get_hardware_index+0x3c>)
    43c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    43c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    43ca:	e895 0003 	ldmia.w	r5, {r0, r1}
    43ce:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    43d2:	9b00      	ldr	r3, [sp, #0]
    43d4:	42b3      	cmp	r3, r6
    43d6:	d00c      	beq.n	43f2 <_sercom_get_hardware_index+0x36>
    43d8:	4632      	mov	r2, r6
    43da:	2001      	movs	r0, #1
    43dc:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    43e0:	4293      	cmp	r3, r2
    43e2:	d007      	beq.n	43f4 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    43e4:	3001      	adds	r0, #1
    43e6:	2806      	cmp	r0, #6
    43e8:	d1f8      	bne.n	43dc <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    43ea:	2000      	movs	r0, #0
}
    43ec:	b007      	add	sp, #28
    43ee:	bc70      	pop	{r4, r5, r6}
    43f0:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    43f2:	2000      	movs	r0, #0
			return i;
    43f4:	b2c0      	uxtb	r0, r0
    43f6:	e7f9      	b.n	43ec <_sercom_get_hardware_index+0x30>
    43f8:	000095ac 	.word	0x000095ac

000043fc <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    43fc:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    43fe:	4b03      	ldr	r3, [pc, #12]	; (440c <_sercom_get_irq_num+0x10>)
    4400:	4798      	blx	r3
    4402:	0080      	lsls	r0, r0, #2
    4404:	302e      	adds	r0, #46	; 0x2e
}
    4406:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    440a:	bd08      	pop	{r3, pc}
    440c:	000043bd 	.word	0x000043bd

00004410 <_usart_init>:
{
    4410:	b538      	push	{r3, r4, r5, lr}
    4412:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    4414:	4b33      	ldr	r3, [pc, #204]	; (44e4 <_usart_init+0xd4>)
    4416:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    4418:	2803      	cmp	r0, #3
    441a:	d056      	beq.n	44ca <_usart_init+0xba>
    441c:	2804      	cmp	r0, #4
    441e:	d052      	beq.n	44c6 <_usart_init+0xb6>
    4420:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    4422:	bf08      	it	eq
    4424:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    4426:	d006      	beq.n	4436 <_usart_init+0x26>
	ASSERT(false);
    4428:	f240 2263 	movw	r2, #611	; 0x263
    442c:	492e      	ldr	r1, [pc, #184]	; (44e8 <_usart_init+0xd8>)
    442e:	2000      	movs	r0, #0
    4430:	4b2e      	ldr	r3, [pc, #184]	; (44ec <_usart_init+0xdc>)
    4432:	4798      	blx	r3
	return 0;
    4434:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    4436:	69e3      	ldr	r3, [r4, #28]
    4438:	f013 0f01 	tst.w	r3, #1
    443c:	d1fb      	bne.n	4436 <_usart_init+0x26>
    443e:	69e3      	ldr	r3, [r4, #28]
    4440:	f013 0f03 	tst.w	r3, #3
    4444:	d1fb      	bne.n	443e <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    4446:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    4448:	f013 0f02 	tst.w	r3, #2
    444c:	d147      	bne.n	44de <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    444e:	69e3      	ldr	r3, [r4, #28]
    4450:	f013 0f01 	tst.w	r3, #1
    4454:	d1fb      	bne.n	444e <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    4456:	6823      	ldr	r3, [r4, #0]
    4458:	f043 0301 	orr.w	r3, r3, #1
    445c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    445e:	69e3      	ldr	r3, [r4, #28]
    4460:	f013 0f01 	tst.w	r3, #1
    4464:	d1fb      	bne.n	445e <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    4466:	4610      	mov	r0, r2
    4468:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    446c:	4920      	ldr	r1, [pc, #128]	; (44f0 <_usart_init+0xe0>)
    446e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    4472:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    4474:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    4476:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    4478:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    447c:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    447e:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    4482:	d024      	beq.n	44ce <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    4484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4488:	4b19      	ldr	r3, [pc, #100]	; (44f0 <_usart_init+0xe0>)
    448a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    448e:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    4490:	89a3      	ldrh	r3, [r4, #12]
    4492:	f361 030c 	bfi	r3, r1, #0, #13
    4496:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    4498:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    449c:	89a3      	ldrh	r3, [r4, #12]
    449e:	f362 334f 	bfi	r3, r2, #13, #3
    44a2:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    44a4:	4b12      	ldr	r3, [pc, #72]	; (44f0 <_usart_init+0xe0>)
    44a6:	0042      	lsls	r2, r0, #1
    44a8:	1811      	adds	r1, r2, r0
    44aa:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    44ae:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    44b2:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    44b4:	4402      	add	r2, r0
    44b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    44ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    44be:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    44c2:	2000      	movs	r0, #0
    44c4:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    44c6:	2201      	movs	r2, #1
    44c8:	e7b5      	b.n	4436 <_usart_init+0x26>
    44ca:	2200      	movs	r2, #0
    44cc:	e7b3      	b.n	4436 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    44ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    44d2:	4b07      	ldr	r3, [pc, #28]	; (44f0 <_usart_init+0xe0>)
    44d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    44d8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    44da:	81a3      	strh	r3, [r4, #12]
    44dc:	e7e2      	b.n	44a4 <_usart_init+0x94>
		return ERR_DENIED;
    44de:	f06f 0010 	mvn.w	r0, #16
}
    44e2:	bd38      	pop	{r3, r4, r5, pc}
    44e4:	000043bd 	.word	0x000043bd
    44e8:	00009638 	.word	0x00009638
    44ec:	00003bd5 	.word	0x00003bd5
    44f0:	000095ac 	.word	0x000095ac

000044f4 <_usart_async_init>:
{
    44f4:	b570      	push	{r4, r5, r6, lr}
    44f6:	460d      	mov	r5, r1
	ASSERT(device);
    44f8:	4606      	mov	r6, r0
    44fa:	22da      	movs	r2, #218	; 0xda
    44fc:	4916      	ldr	r1, [pc, #88]	; (4558 <_usart_async_init+0x64>)
    44fe:	3000      	adds	r0, #0
    4500:	bf18      	it	ne
    4502:	2001      	movne	r0, #1
    4504:	4b15      	ldr	r3, [pc, #84]	; (455c <_usart_async_init+0x68>)
    4506:	4798      	blx	r3
	init_status = _usart_init(hw);
    4508:	4628      	mov	r0, r5
    450a:	4b15      	ldr	r3, [pc, #84]	; (4560 <_usart_async_init+0x6c>)
    450c:	4798      	blx	r3
	if (init_status) {
    450e:	4604      	mov	r4, r0
    4510:	b9f8      	cbnz	r0, 4552 <_usart_async_init+0x5e>
	device->hw = hw;
    4512:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    4514:	4628      	mov	r0, r5
    4516:	4b13      	ldr	r3, [pc, #76]	; (4564 <_usart_async_init+0x70>)
    4518:	4798      	blx	r3
		irq = irq +2;
    451a:	3002      	adds	r0, #2
    451c:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    451e:	f000 031f 	and.w	r3, r0, #31
    4522:	2201      	movs	r2, #1
    4524:	409a      	lsls	r2, r3
    4526:	0943      	lsrs	r3, r0, #5
    4528:	009b      	lsls	r3, r3, #2
    452a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    452e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    4536:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    453a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    453e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4542:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    4546:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    454a:	21e0      	movs	r1, #224	; 0xe0
    454c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4550:	601a      	str	r2, [r3, #0]
}
    4552:	4620      	mov	r0, r4
    4554:	bd70      	pop	{r4, r5, r6, pc}
    4556:	bf00      	nop
    4558:	00009638 	.word	0x00009638
    455c:	00003bd5 	.word	0x00003bd5
    4560:	00004411 	.word	0x00004411
    4564:	000043fd 	.word	0x000043fd

00004568 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    4568:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    456a:	69d3      	ldr	r3, [r2, #28]
    456c:	f013 0f03 	tst.w	r3, #3
    4570:	d1fb      	bne.n	456a <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    4572:	6813      	ldr	r3, [r2, #0]
    4574:	f043 0302 	orr.w	r3, r3, #2
    4578:	6013      	str	r3, [r2, #0]
    457a:	4770      	bx	lr

0000457c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    457c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    457e:	6299      	str	r1, [r3, #40]	; 0x28
    4580:	4770      	bx	lr

00004582 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    4582:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    4584:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    4586:	b2c0      	uxtb	r0, r0
    4588:	4770      	bx	lr

0000458a <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    458a:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    458c:	7e18      	ldrb	r0, [r3, #24]
}
    458e:	f000 0001 	and.w	r0, r0, #1
    4592:	4770      	bx	lr

00004594 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    4594:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    4596:	7e18      	ldrb	r0, [r3, #24]
}
    4598:	f3c0 0080 	ubfx	r0, r0, #2, #1
    459c:	4770      	bx	lr
	...

000045a0 <_usart_async_set_irq_state>:
{
    45a0:	b570      	push	{r4, r5, r6, lr}
    45a2:	460c      	mov	r4, r1
    45a4:	4616      	mov	r6, r2
	ASSERT(device);
    45a6:	4605      	mov	r5, r0
    45a8:	f240 2245 	movw	r2, #581	; 0x245
    45ac:	4915      	ldr	r1, [pc, #84]	; (4604 <_usart_async_set_irq_state+0x64>)
    45ae:	3000      	adds	r0, #0
    45b0:	bf18      	it	ne
    45b2:	2001      	movne	r0, #1
    45b4:	4b14      	ldr	r3, [pc, #80]	; (4608 <_usart_async_set_irq_state+0x68>)
    45b6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    45b8:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    45bc:	d10d      	bne.n	45da <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    45be:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    45c0:	b92e      	cbnz	r6, 45ce <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    45c2:	2201      	movs	r2, #1
    45c4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    45c6:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    45c8:	2202      	movs	r2, #2
    45ca:	751a      	strb	r2, [r3, #20]
    45cc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    45ce:	2201      	movs	r2, #1
    45d0:	759a      	strb	r2, [r3, #22]
    45d2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    45d4:	2202      	movs	r2, #2
    45d6:	759a      	strb	r2, [r3, #22]
    45d8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    45da:	2c01      	cmp	r4, #1
    45dc:	d002      	beq.n	45e4 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    45de:	2c03      	cmp	r4, #3
    45e0:	d008      	beq.n	45f4 <_usart_async_set_irq_state+0x54>
    45e2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    45e4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    45e6:	b916      	cbnz	r6, 45ee <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    45e8:	2204      	movs	r2, #4
    45ea:	751a      	strb	r2, [r3, #20]
    45ec:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    45ee:	2204      	movs	r2, #4
    45f0:	759a      	strb	r2, [r3, #22]
    45f2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    45f4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    45f6:	b116      	cbz	r6, 45fe <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    45f8:	2280      	movs	r2, #128	; 0x80
    45fa:	759a      	strb	r2, [r3, #22]
}
    45fc:	e7f1      	b.n	45e2 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    45fe:	2280      	movs	r2, #128	; 0x80
    4600:	751a      	strb	r2, [r3, #20]
    4602:	bd70      	pop	{r4, r5, r6, pc}
    4604:	00009638 	.word	0x00009638
    4608:	00003bd5 	.word	0x00003bd5

0000460c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    460c:	4b03      	ldr	r3, [pc, #12]	; (461c <_delay_init+0x10>)
    460e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4612:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    4614:	2205      	movs	r2, #5
    4616:	601a      	str	r2, [r3, #0]
    4618:	4770      	bx	lr
    461a:	bf00      	nop
    461c:	e000e010 	.word	0xe000e010

00004620 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    4620:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    4622:	b303      	cbz	r3, 4666 <_delay_cycles+0x46>
{
    4624:	b430      	push	{r4, r5}
    4626:	1e5d      	subs	r5, r3, #1
    4628:	b2ed      	uxtb	r5, r5
	while (n--) {
    462a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    462c:	4a12      	ldr	r2, [pc, #72]	; (4678 <_delay_cycles+0x58>)
    462e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    4632:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    4634:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4636:	6813      	ldr	r3, [r2, #0]
    4638:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    463c:	d0fb      	beq.n	4636 <_delay_cycles+0x16>
	while (n--) {
    463e:	3801      	subs	r0, #1
    4640:	b2c0      	uxtb	r0, r0
    4642:	28ff      	cmp	r0, #255	; 0xff
    4644:	d1f5      	bne.n	4632 <_delay_cycles+0x12>
    4646:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    464a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    464e:	3101      	adds	r1, #1
    4650:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    4652:	4b09      	ldr	r3, [pc, #36]	; (4678 <_delay_cycles+0x58>)
    4654:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    4656:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4658:	461a      	mov	r2, r3
    465a:	6813      	ldr	r3, [r2, #0]
    465c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4660:	d0fb      	beq.n	465a <_delay_cycles+0x3a>
		;
}
    4662:	bc30      	pop	{r4, r5}
    4664:	4770      	bx	lr
	SysTick->LOAD = buf;
    4666:	4b04      	ldr	r3, [pc, #16]	; (4678 <_delay_cycles+0x58>)
    4668:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    466a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    466c:	461a      	mov	r2, r3
    466e:	6813      	ldr	r3, [r2, #0]
    4670:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4674:	d0fb      	beq.n	466e <_delay_cycles+0x4e>
    4676:	4770      	bx	lr
    4678:	e000e010 	.word	0xe000e010

0000467c <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    467c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    467e:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    4680:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    4682:	f012 0f01 	tst.w	r2, #1
    4686:	d100      	bne.n	468a <tcc_interrupt_handler+0xe>
    4688:	bd08      	pop	{r3, pc}
}

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    468a:	2201      	movs	r2, #1
    468c:	62da      	str	r2, [r3, #44]	; 0x2c
		hri_tcc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    468e:	6803      	ldr	r3, [r0, #0]
    4690:	4798      	blx	r3
	}
}
    4692:	e7f9      	b.n	4688 <tcc_interrupt_handler+0xc>

00004694 <TCC0_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC0_0_Handler(void)
{
    4694:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    4696:	4b02      	ldr	r3, [pc, #8]	; (46a0 <TCC0_0_Handler+0xc>)
    4698:	6818      	ldr	r0, [r3, #0]
    469a:	4b02      	ldr	r3, [pc, #8]	; (46a4 <TCC0_0_Handler+0x10>)
    469c:	4798      	blx	r3
    469e:	bd08      	pop	{r3, pc}
    46a0:	20000bb4 	.word	0x20000bb4
    46a4:	0000467d 	.word	0x0000467d

000046a8 <TCC1_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC1_0_Handler(void)
{
    46a8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    46aa:	4b02      	ldr	r3, [pc, #8]	; (46b4 <TCC1_0_Handler+0xc>)
    46ac:	6858      	ldr	r0, [r3, #4]
    46ae:	4b02      	ldr	r3, [pc, #8]	; (46b8 <TCC1_0_Handler+0x10>)
    46b0:	4798      	blx	r3
    46b2:	bd08      	pop	{r3, pc}
    46b4:	20000bb4 	.word	0x20000bb4
    46b8:	0000467d 	.word	0x0000467d

000046bc <TCC2_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC2_0_Handler(void)
{
    46bc:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    46be:	4b02      	ldr	r3, [pc, #8]	; (46c8 <TCC2_0_Handler+0xc>)
    46c0:	6898      	ldr	r0, [r3, #8]
    46c2:	4b02      	ldr	r3, [pc, #8]	; (46cc <TCC2_0_Handler+0x10>)
    46c4:	4798      	blx	r3
    46c6:	bd08      	pop	{r3, pc}
    46c8:	20000bb4 	.word	0x20000bb4
    46cc:	0000467d 	.word	0x0000467d

000046d0 <TCC3_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC3_0_Handler(void)
{
    46d0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    46d2:	4b02      	ldr	r3, [pc, #8]	; (46dc <TCC3_0_Handler+0xc>)
    46d4:	68d8      	ldr	r0, [r3, #12]
    46d6:	4b02      	ldr	r3, [pc, #8]	; (46e0 <TCC3_0_Handler+0x10>)
    46d8:	4798      	blx	r3
    46da:	bd08      	pop	{r3, pc}
    46dc:	20000bb4 	.word	0x20000bb4
    46e0:	0000467d 	.word	0x0000467d

000046e4 <TCC4_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC4_0_Handler(void)
{
    46e4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    46e6:	4b02      	ldr	r3, [pc, #8]	; (46f0 <TCC4_0_Handler+0xc>)
    46e8:	6918      	ldr	r0, [r3, #16]
    46ea:	4b02      	ldr	r3, [pc, #8]	; (46f4 <TCC4_0_Handler+0x10>)
    46ec:	4798      	blx	r3
    46ee:	bd08      	pop	{r3, pc}
    46f0:	20000bb4 	.word	0x20000bb4
    46f4:	0000467d 	.word	0x0000467d

000046f8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    46f8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    46fa:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    46fc:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    46fe:	f012 0f01 	tst.w	r2, #1
    4702:	d100      	bne.n	4706 <tc_interrupt_handler+0xe>
    4704:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4706:	2201      	movs	r2, #1
    4708:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    470a:	6803      	ldr	r3, [r0, #0]
    470c:	4798      	blx	r3
	}
}
    470e:	e7f9      	b.n	4704 <tc_interrupt_handler+0xc>

00004710 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    4710:	b538      	push	{r3, r4, r5, lr}
    4712:	4605      	mov	r5, r0
	void *const hw = device->hw;
    4714:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4716:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4718:	f013 0f01 	tst.w	r3, #1
    471c:	d004      	beq.n	4728 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    471e:	2301      	movs	r3, #1
    4720:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    4722:	6803      	ldr	r3, [r0, #0]
    4724:	b103      	cbz	r3, 4728 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    4726:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    4728:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    472a:	f013 0f02 	tst.w	r3, #2
    472e:	d005      	beq.n	473c <tc_pwm_interrupt_handler+0x2c>
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4730:	2302      	movs	r3, #2
    4732:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    4734:	686b      	ldr	r3, [r5, #4]
    4736:	b10b      	cbz	r3, 473c <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    4738:	4628      	mov	r0, r5
    473a:	4798      	blx	r3
    473c:	bd38      	pop	{r3, r4, r5, pc}
	...

00004740 <TC0_Handler>:

/**
* \brief TC interrupt handler
*/
void TC0_Handler(void)
{
    4740:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    4742:	4b02      	ldr	r3, [pc, #8]	; (474c <TC0_Handler+0xc>)
    4744:	6818      	ldr	r0, [r3, #0]
    4746:	4b02      	ldr	r3, [pc, #8]	; (4750 <TC0_Handler+0x10>)
    4748:	4798      	blx	r3
    474a:	bd08      	pop	{r3, pc}
    474c:	20000bc8 	.word	0x20000bc8
    4750:	00004711 	.word	0x00004711

00004754 <TC1_Handler>:

/**
* \brief TC interrupt handler
*/
void TC1_Handler(void)
{
    4754:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    4756:	4b02      	ldr	r3, [pc, #8]	; (4760 <TC1_Handler+0xc>)
    4758:	6858      	ldr	r0, [r3, #4]
    475a:	4b02      	ldr	r3, [pc, #8]	; (4764 <TC1_Handler+0x10>)
    475c:	4798      	blx	r3
    475e:	bd08      	pop	{r3, pc}
    4760:	20000bc8 	.word	0x20000bc8
    4764:	00004711 	.word	0x00004711

00004768 <TC2_Handler>:

/**
* \brief TC interrupt handler
*/
void TC2_Handler(void)
{
    4768:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    476a:	4b02      	ldr	r3, [pc, #8]	; (4774 <TC2_Handler+0xc>)
    476c:	6898      	ldr	r0, [r3, #8]
    476e:	4b02      	ldr	r3, [pc, #8]	; (4778 <TC2_Handler+0x10>)
    4770:	4798      	blx	r3
    4772:	bd08      	pop	{r3, pc}
    4774:	20000bc8 	.word	0x20000bc8
    4778:	00004711 	.word	0x00004711

0000477c <TC3_Handler>:

/**
* \brief TC interrupt handler
*/
void TC3_Handler(void)
{
    477c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    477e:	4b02      	ldr	r3, [pc, #8]	; (4788 <TC3_Handler+0xc>)
    4780:	68d8      	ldr	r0, [r3, #12]
    4782:	4b02      	ldr	r3, [pc, #8]	; (478c <TC3_Handler+0x10>)
    4784:	4798      	blx	r3
    4786:	bd08      	pop	{r3, pc}
    4788:	20000bc8 	.word	0x20000bc8
    478c:	000046f9 	.word	0x000046f9

00004790 <TC4_Handler>:

/**
* \brief TC interrupt handler
*/
void TC4_Handler(void)
{
    4790:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    4792:	4b02      	ldr	r3, [pc, #8]	; (479c <TC4_Handler+0xc>)
    4794:	6918      	ldr	r0, [r3, #16]
    4796:	4b02      	ldr	r3, [pc, #8]	; (47a0 <TC4_Handler+0x10>)
    4798:	4798      	blx	r3
    479a:	bd08      	pop	{r3, pc}
    479c:	20000bc8 	.word	0x20000bc8
    47a0:	000046f9 	.word	0x000046f9

000047a4 <TC5_Handler>:

/**
* \brief TC interrupt handler
*/
void TC5_Handler(void)
{
    47a4:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    47a6:	4b02      	ldr	r3, [pc, #8]	; (47b0 <TC5_Handler+0xc>)
    47a8:	6958      	ldr	r0, [r3, #20]
    47aa:	4b02      	ldr	r3, [pc, #8]	; (47b4 <TC5_Handler+0x10>)
    47ac:	4798      	blx	r3
    47ae:	bd08      	pop	{r3, pc}
    47b0:	20000bc8 	.word	0x20000bc8
    47b4:	000046f9 	.word	0x000046f9

000047b8 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    47b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    47ba:	4604      	mov	r4, r0
    47bc:	b330      	cbz	r0, 480c <_wdt_init+0x54>
    47be:	6800      	ldr	r0, [r0, #0]
    47c0:	3000      	adds	r0, #0
    47c2:	bf18      	it	ne
    47c4:	2001      	movne	r0, #1
    47c6:	225a      	movs	r2, #90	; 0x5a
    47c8:	4914      	ldr	r1, [pc, #80]	; (481c <_wdt_init+0x64>)
    47ca:	4b15      	ldr	r3, [pc, #84]	; (4820 <_wdt_init+0x68>)
    47cc:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    47ce:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    47d0:	689a      	ldr	r2, [r3, #8]
    47d2:	f012 0f0e 	tst.w	r2, #14
    47d6:	d1fb      	bne.n	47d0 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    47d8:	781a      	ldrb	r2, [r3, #0]
    47da:	09d2      	lsrs	r2, r2, #7
    47dc:	d118      	bne.n	4810 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    47de:	689a      	ldr	r2, [r3, #8]
    47e0:	f012 0f0e 	tst.w	r2, #14
    47e4:	d1fb      	bne.n	47de <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    47e6:	781a      	ldrb	r2, [r3, #0]
    47e8:	f012 0f02 	tst.w	r2, #2
    47ec:	d113      	bne.n	4816 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    47ee:	689a      	ldr	r2, [r3, #8]
    47f0:	f012 0f0e 	tst.w	r2, #14
    47f4:	d1fb      	bne.n	47ee <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    47f6:	781a      	ldrb	r2, [r3, #0]
    47f8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    47fc:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    47fe:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    4800:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    4802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    4806:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    4808:	2000      	movs	r0, #0
    480a:	bd10      	pop	{r4, pc}
    480c:	2000      	movs	r0, #0
    480e:	e7da      	b.n	47c6 <_wdt_init+0xe>
		return ERR_DENIED;
    4810:	f06f 0010 	mvn.w	r0, #16
    4814:	bd10      	pop	{r4, pc}
    4816:	f06f 0010 	mvn.w	r0, #16
}
    481a:	bd10      	pop	{r4, pc}
    481c:	00009654 	.word	0x00009654
    4820:	00003bd5 	.word	0x00003bd5

00004824 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    4824:	b570      	push	{r4, r5, r6, lr}
    4826:	460d      	mov	r5, r1
    4828:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    482a:	4606      	mov	r6, r0
    482c:	2800      	cmp	r0, #0
    482e:	d044      	beq.n	48ba <_wdt_set_timeout_period+0x96>
    4830:	6800      	ldr	r0, [r0, #0]
    4832:	3000      	adds	r0, #0
    4834:	bf18      	it	ne
    4836:	2001      	movne	r0, #1
    4838:	2284      	movs	r2, #132	; 0x84
    483a:	493f      	ldr	r1, [pc, #252]	; (4938 <_wdt_set_timeout_period+0x114>)
    483c:	4b3f      	ldr	r3, [pc, #252]	; (493c <_wdt_set_timeout_period+0x118>)
    483e:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    4840:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4842:	6893      	ldr	r3, [r2, #8]
    4844:	f013 0f0e 	tst.w	r3, #14
    4848:	d1fb      	bne.n	4842 <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    484a:	7813      	ldrb	r3, [r2, #0]
    484c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4850:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    4852:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4854:	688b      	ldr	r3, [r1, #8]
    4856:	f013 0f0e 	tst.w	r3, #14
    485a:	d1fb      	bne.n	4854 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    485c:	780b      	ldrb	r3, [r1, #0]
    485e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4862:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    4864:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4866:	6899      	ldr	r1, [r3, #8]
    4868:	f011 0f0e 	tst.w	r1, #14
    486c:	d1fb      	bne.n	4866 <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    486e:	781a      	ldrb	r2, [r3, #0]
    4870:	09d2      	lsrs	r2, r2, #7
    4872:	d158      	bne.n	4926 <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4874:	6899      	ldr	r1, [r3, #8]
    4876:	f011 0f0e 	tst.w	r1, #14
    487a:	d1fb      	bne.n	4874 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    487c:	781a      	ldrb	r2, [r3, #0]
    487e:	f012 0f02 	tst.w	r2, #2
    4882:	d153      	bne.n	492c <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    4884:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    4888:	4628      	mov	r0, r5
    488a:	2100      	movs	r1, #0
    488c:	ea50 0201 	orrs.w	r2, r0, r1
    4890:	d14f      	bne.n	4932 <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    4892:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    4896:	d038      	beq.n	490a <_wdt_set_timeout_period+0xe6>
    4898:	d911      	bls.n	48be <_wdt_set_timeout_period+0x9a>
    489a:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    489e:	d038      	beq.n	4912 <_wdt_set_timeout_period+0xee>
    48a0:	d927      	bls.n	48f2 <_wdt_set_timeout_period+0xce>
    48a2:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    48a6:	d038      	beq.n	491a <_wdt_set_timeout_period+0xf6>
    48a8:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    48ac:	d037      	beq.n	491e <_wdt_set_timeout_period+0xfa>
    48ae:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    48b2:	d030      	beq.n	4916 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    48b4:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    48b8:	bd70      	pop	{r4, r5, r6, pc}
    48ba:	2000      	movs	r0, #0
    48bc:	e7bc      	b.n	4838 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    48be:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    48c2:	d01e      	beq.n	4902 <_wdt_set_timeout_period+0xde>
    48c4:	d80d      	bhi.n	48e2 <_wdt_set_timeout_period+0xbe>
    48c6:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    48ca:	d02a      	beq.n	4922 <_wdt_set_timeout_period+0xfe>
    48cc:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    48d0:	d1f0      	bne.n	48b4 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    48d2:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    48d4:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    48d6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    48da:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    48dc:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    48de:	2000      	movs	r0, #0
    48e0:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    48e2:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    48e6:	d00e      	beq.n	4906 <_wdt_set_timeout_period+0xe2>
    48e8:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    48ec:	d1e2      	bne.n	48b4 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    48ee:	2104      	movs	r1, #4
			break;
    48f0:	e7f0      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    48f2:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    48f6:	d00a      	beq.n	490e <_wdt_set_timeout_period+0xea>
    48f8:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    48fc:	d1da      	bne.n	48b4 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    48fe:	2107      	movs	r1, #7
			break;
    4900:	e7e8      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    4902:	2102      	movs	r1, #2
			break;
    4904:	e7e6      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    4906:	2103      	movs	r1, #3
			break;
    4908:	e7e4      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    490a:	2105      	movs	r1, #5
			break;
    490c:	e7e2      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    490e:	2106      	movs	r1, #6
			break;
    4910:	e7e0      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    4912:	2108      	movs	r1, #8
			break;
    4914:	e7de      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    4916:	2109      	movs	r1, #9
			break;
    4918:	e7dc      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    491a:	210a      	movs	r1, #10
			break;
    491c:	e7da      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    491e:	210b      	movs	r1, #11
			break;
    4920:	e7d8      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    4922:	2100      	movs	r1, #0
    4924:	e7d6      	b.n	48d4 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    4926:	f06f 0010 	mvn.w	r0, #16
    492a:	bd70      	pop	{r4, r5, r6, pc}
    492c:	f06f 0010 	mvn.w	r0, #16
    4930:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    4932:	f06f 000c 	mvn.w	r0, #12
    4936:	bd70      	pop	{r4, r5, r6, pc}
    4938:	00009654 	.word	0x00009654
    493c:	00003bd5 	.word	0x00003bd5

00004940 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    4940:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4942:	4604      	mov	r4, r0
    4944:	b198      	cbz	r0, 496e <_wdt_enable+0x2e>
    4946:	6800      	ldr	r0, [r0, #0]
    4948:	3000      	adds	r0, #0
    494a:	bf18      	it	ne
    494c:	2001      	movne	r0, #1
    494e:	f240 1207 	movw	r2, #263	; 0x107
    4952:	4908      	ldr	r1, [pc, #32]	; (4974 <_wdt_enable+0x34>)
    4954:	4b08      	ldr	r3, [pc, #32]	; (4978 <_wdt_enable+0x38>)
    4956:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    4958:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    495a:	6893      	ldr	r3, [r2, #8]
    495c:	f013 0f0e 	tst.w	r3, #14
    4960:	d1fb      	bne.n	495a <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    4962:	7813      	ldrb	r3, [r2, #0]
    4964:	f043 0302 	orr.w	r3, r3, #2
    4968:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    496a:	2000      	movs	r0, #0
    496c:	bd10      	pop	{r4, pc}
    496e:	2000      	movs	r0, #0
    4970:	e7ed      	b.n	494e <_wdt_enable+0xe>
    4972:	bf00      	nop
    4974:	00009654 	.word	0x00009654
    4978:	00003bd5 	.word	0x00003bd5

0000497c <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    497c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    497e:	4604      	mov	r4, r0
    4980:	b1d0      	cbz	r0, 49b8 <_wdt_disable+0x3c>
    4982:	6800      	ldr	r0, [r0, #0]
    4984:	3000      	adds	r0, #0
    4986:	bf18      	it	ne
    4988:	2001      	movne	r0, #1
    498a:	f44f 728a 	mov.w	r2, #276	; 0x114
    498e:	490d      	ldr	r1, [pc, #52]	; (49c4 <_wdt_disable+0x48>)
    4990:	4b0d      	ldr	r3, [pc, #52]	; (49c8 <_wdt_disable+0x4c>)
    4992:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    4994:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4996:	689a      	ldr	r2, [r3, #8]
    4998:	f012 0f0e 	tst.w	r2, #14
    499c:	d1fb      	bne.n	4996 <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    499e:	781a      	ldrb	r2, [r3, #0]
    49a0:	09d2      	lsrs	r2, r2, #7
    49a2:	d10b      	bne.n	49bc <_wdt_disable+0x40>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    49a4:	689a      	ldr	r2, [r3, #8]
    49a6:	f012 0f0e 	tst.w	r2, #14
    49aa:	d1fb      	bne.n	49a4 <_wdt_disable+0x28>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    49ac:	781a      	ldrb	r2, [r3, #0]
    49ae:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    49b2:	701a      	strb	r2, [r3, #0]
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    49b4:	2000      	movs	r0, #0
    49b6:	bd10      	pop	{r4, pc}
    49b8:	2000      	movs	r0, #0
    49ba:	e7e6      	b.n	498a <_wdt_disable+0xe>
		return ERR_DENIED;
    49bc:	f06f 0010 	mvn.w	r0, #16
}
    49c0:	bd10      	pop	{r4, pc}
    49c2:	bf00      	nop
    49c4:	00009654 	.word	0x00009654
    49c8:	00003bd5 	.word	0x00003bd5

000049cc <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    49cc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    49ce:	4604      	mov	r4, r0
    49d0:	b168      	cbz	r0, 49ee <_wdt_feed+0x22>
    49d2:	6800      	ldr	r0, [r0, #0]
    49d4:	3000      	adds	r0, #0
    49d6:	bf18      	it	ne
    49d8:	2001      	movne	r0, #1
    49da:	f240 1225 	movw	r2, #293	; 0x125
    49de:	4905      	ldr	r1, [pc, #20]	; (49f4 <_wdt_feed+0x28>)
    49e0:	4b05      	ldr	r3, [pc, #20]	; (49f8 <_wdt_feed+0x2c>)
    49e2:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    49e4:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    49e6:	22a5      	movs	r2, #165	; 0xa5
    49e8:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    49ea:	2000      	movs	r0, #0
    49ec:	bd10      	pop	{r4, pc}
    49ee:	2000      	movs	r0, #0
    49f0:	e7f3      	b.n	49da <_wdt_feed+0xe>
    49f2:	bf00      	nop
    49f4:	00009654 	.word	0x00009654
    49f8:	00003bd5 	.word	0x00003bd5

000049fc <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    49fc:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    49fe:	2200      	movs	r2, #0
    4a00:	2108      	movs	r1, #8
    4a02:	2001      	movs	r0, #1
    4a04:	4c18      	ldr	r4, [pc, #96]	; (4a68 <createQueuesAndSemaphores+0x6c>)
    4a06:	47a0      	blx	r4
    4a08:	4d18      	ldr	r5, [pc, #96]	; (4a6c <createQueuesAndSemaphores+0x70>)
    4a0a:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    4a0c:	2200      	movs	r2, #0
    4a0e:	2101      	movs	r1, #1
    4a10:	4608      	mov	r0, r1
    4a12:	47a0      	blx	r4
    4a14:	4b16      	ldr	r3, [pc, #88]	; (4a70 <createQueuesAndSemaphores+0x74>)
    4a16:	6018      	str	r0, [r3, #0]
    CmdResponseQueue   = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    4a18:	2200      	movs	r2, #0
    4a1a:	2108      	movs	r1, #8
    4a1c:	2001      	movs	r0, #1
    4a1e:	47a0      	blx	r4
    4a20:	4b14      	ldr	r3, [pc, #80]	; (4a74 <createQueuesAndSemaphores+0x78>)
    4a22:	6018      	str	r0, [r3, #0]
    FotaResponseQueue  = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    4a24:	2200      	movs	r2, #0
    4a26:	2108      	movs	r1, #8
    4a28:	2001      	movs	r0, #1
    4a2a:	47a0      	blx	r4
    4a2c:	4b12      	ldr	r3, [pc, #72]	; (4a78 <createQueuesAndSemaphores+0x7c>)
    4a2e:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    4a30:	682b      	ldr	r3, [r5, #0]
    4a32:	b1bb      	cbz	r3, 4a64 <createQueuesAndSemaphores+0x68>
       (AtReceiveQueue  != NULL) &&
    4a34:	4b0e      	ldr	r3, [pc, #56]	; (4a70 <createQueuesAndSemaphores+0x74>)
    if((AtTransmitQueue != NULL) &&
    4a36:	681b      	ldr	r3, [r3, #0]
    4a38:	b1a3      	cbz	r3, 4a64 <createQueuesAndSemaphores+0x68>
	   (CmdResponseQueue != NULL) &&
    4a3a:	4b0e      	ldr	r3, [pc, #56]	; (4a74 <createQueuesAndSemaphores+0x78>)
       (AtReceiveQueue  != NULL) &&
    4a3c:	681b      	ldr	r3, [r3, #0]
    4a3e:	b18b      	cbz	r3, 4a64 <createQueuesAndSemaphores+0x68>
	   (CmdResponseQueue != NULL) &&
    4a40:	b180      	cbz	r0, 4a64 <createQueuesAndSemaphores+0x68>
	   (FotaResponseQueue != NULL))
    {
    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    4a42:	2203      	movs	r2, #3
    4a44:	2100      	movs	r1, #0
    4a46:	2001      	movs	r0, #1
    4a48:	47a0      	blx	r4
    4a4a:	4b0c      	ldr	r3, [pc, #48]	; (4a7c <createQueuesAndSemaphores+0x80>)
    4a4c:	6018      	str	r0, [r3, #0]
    	SensorScanSemaphore    = xSemaphoreCreateBinary();
    4a4e:	2203      	movs	r2, #3
    4a50:	2100      	movs	r1, #0
    4a52:	2001      	movs	r0, #1
    4a54:	47a0      	blx	r4
    4a56:	4b0a      	ldr	r3, [pc, #40]	; (4a80 <createQueuesAndSemaphores+0x84>)
    4a58:	6018      	str	r0, [r3, #0]
    	DebugPrintMutex        = xSemaphoreCreateMutex();
    4a5a:	2001      	movs	r0, #1
    4a5c:	4b09      	ldr	r3, [pc, #36]	; (4a84 <createQueuesAndSemaphores+0x88>)
    4a5e:	4798      	blx	r3
    4a60:	4b09      	ldr	r3, [pc, #36]	; (4a88 <createQueuesAndSemaphores+0x8c>)
    4a62:	6018      	str	r0, [r3, #0]
    }
    else
    {
    	status = false;
    }
}
    4a64:	bd38      	pop	{r3, r4, r5, pc}
    4a66:	bf00      	nop
    4a68:	00005375 	.word	0x00005375
    4a6c:	20003568 	.word	0x20003568
    4a70:	20003580 	.word	0x20003580
    4a74:	20003544 	.word	0x20003544
    4a78:	20003574 	.word	0x20003574
    4a7c:	2000357c 	.word	0x2000357c
    4a80:	20003578 	.word	0x20003578
    4a84:	000055a9 	.word	0x000055a9
    4a88:	20003570 	.word	0x20003570

00004a8c <main>:
{
    4a8c:	b580      	push	{r7, lr}
    4a8e:	b082      	sub	sp, #8
    atmel_start_init();	
    4a90:	4b2e      	ldr	r3, [pc, #184]	; (4b4c <main+0xc0>)
    4a92:	4798      	blx	r3
    SensorTaskStatus = xTaskCreate( SensorTask, "SensorTask", 150, NULL, 2, &xSensorTaskHandle );
    4a94:	4b2e      	ldr	r3, [pc, #184]	; (4b50 <main+0xc4>)
    4a96:	9301      	str	r3, [sp, #4]
    4a98:	2702      	movs	r7, #2
    4a9a:	9700      	str	r7, [sp, #0]
    4a9c:	2300      	movs	r3, #0
    4a9e:	2296      	movs	r2, #150	; 0x96
    4aa0:	492c      	ldr	r1, [pc, #176]	; (4b54 <main+0xc8>)
    4aa2:	482d      	ldr	r0, [pc, #180]	; (4b58 <main+0xcc>)
    4aa4:	4d2d      	ldr	r5, [pc, #180]	; (4b5c <main+0xd0>)
    4aa6:	47a8      	blx	r5
    4aa8:	4c2d      	ldr	r4, [pc, #180]	; (4b60 <main+0xd4>)
    4aaa:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTxTask", 150, NULL, 1, &xModemTxTaskHandle );
    4aac:	4b2d      	ldr	r3, [pc, #180]	; (4b64 <main+0xd8>)
    4aae:	9301      	str	r3, [sp, #4]
    4ab0:	2601      	movs	r6, #1
    4ab2:	9600      	str	r6, [sp, #0]
    4ab4:	2300      	movs	r3, #0
    4ab6:	2296      	movs	r2, #150	; 0x96
    4ab8:	492b      	ldr	r1, [pc, #172]	; (4b68 <main+0xdc>)
    4aba:	482c      	ldr	r0, [pc, #176]	; (4b6c <main+0xe0>)
    4abc:	47a8      	blx	r5
    4abe:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    4ac0:	4b2b      	ldr	r3, [pc, #172]	; (4b70 <main+0xe4>)
    4ac2:	9301      	str	r3, [sp, #4]
    4ac4:	9700      	str	r7, [sp, #0]
    4ac6:	2300      	movs	r3, #0
    4ac8:	2296      	movs	r2, #150	; 0x96
    4aca:	492a      	ldr	r1, [pc, #168]	; (4b74 <main+0xe8>)
    4acc:	482a      	ldr	r0, [pc, #168]	; (4b78 <main+0xec>)
    4ace:	47a8      	blx	r5
    4ad0:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    4ad2:	4b2a      	ldr	r3, [pc, #168]	; (4b7c <main+0xf0>)
    4ad4:	9301      	str	r3, [sp, #4]
    4ad6:	9600      	str	r6, [sp, #0]
    4ad8:	2300      	movs	r3, #0
    4ada:	2296      	movs	r2, #150	; 0x96
    4adc:	4928      	ldr	r1, [pc, #160]	; (4b80 <main+0xf4>)
    4ade:	4829      	ldr	r0, [pc, #164]	; (4b84 <main+0xf8>)
    4ae0:	47a8      	blx	r5
    4ae2:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    4ae4:	4b28      	ldr	r3, [pc, #160]	; (4b88 <main+0xfc>)
    4ae6:	9301      	str	r3, [sp, #4]
    4ae8:	9600      	str	r6, [sp, #0]
    4aea:	2300      	movs	r3, #0
    4aec:	2296      	movs	r2, #150	; 0x96
    4aee:	4927      	ldr	r1, [pc, #156]	; (4b8c <main+0x100>)
    4af0:	4827      	ldr	r0, [pc, #156]	; (4b90 <main+0x104>)
    4af2:	47a8      	blx	r5
    4af4:	6120      	str	r0, [r4, #16]
	FotaAppTaskStatus =  xTaskCreate( FotaAppTask, "FotaAppTask", 150, NULL, 1, &xFotaAppTaskHandle);
    4af6:	4b27      	ldr	r3, [pc, #156]	; (4b94 <main+0x108>)
    4af8:	9301      	str	r3, [sp, #4]
    4afa:	9600      	str	r6, [sp, #0]
    4afc:	2300      	movs	r3, #0
    4afe:	2296      	movs	r2, #150	; 0x96
    4b00:	4925      	ldr	r1, [pc, #148]	; (4b98 <main+0x10c>)
    4b02:	4826      	ldr	r0, [pc, #152]	; (4b9c <main+0x110>)
    4b04:	47a8      	blx	r5
    if((SensorTaskStatus == pdPASS) &&
    4b06:	6823      	ldr	r3, [r4, #0]
    4b08:	42b3      	cmp	r3, r6
    4b0a:	d006      	beq.n	4b1a <main+0x8e>
    	DEBUG_PRINT("Failed to create tasks");
    4b0c:	4824      	ldr	r0, [pc, #144]	; (4ba0 <main+0x114>)
    4b0e:	4b25      	ldr	r3, [pc, #148]	; (4ba4 <main+0x118>)
    4b10:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    4b12:	4825      	ldr	r0, [pc, #148]	; (4ba8 <main+0x11c>)
    4b14:	4b23      	ldr	r3, [pc, #140]	; (4ba4 <main+0x118>)
    4b16:	4798      	blx	r3
    4b18:	e7fe      	b.n	4b18 <main+0x8c>
    if((SensorTaskStatus == pdPASS) &&
    4b1a:	68e3      	ldr	r3, [r4, #12]
    4b1c:	42b3      	cmp	r3, r6
    4b1e:	d1f5      	bne.n	4b0c <main+0x80>
       (ModemProcessTaskStatus == pdPASS) &&
    4b20:	6863      	ldr	r3, [r4, #4]
    4b22:	42b3      	cmp	r3, r6
    4b24:	d1f2      	bne.n	4b0c <main+0x80>
       (ModemTxTaskStatus == pdPASS) &&
    4b26:	68a3      	ldr	r3, [r4, #8]
    4b28:	42b3      	cmp	r3, r6
    4b2a:	d1ef      	bne.n	4b0c <main+0x80>
       (ModemRxTaskStatus == pdPASS) &&
    4b2c:	6923      	ldr	r3, [r4, #16]
    4b2e:	42b3      	cmp	r3, r6
    4b30:	d1ec      	bne.n	4b0c <main+0x80>
	   (ModemDiagTaskStatus == pdPASS) &&
    4b32:	42b0      	cmp	r0, r6
    4b34:	d1ea      	bne.n	4b0c <main+0x80>
    	if(false != createQueuesAndSemaphores())
    4b36:	4b1d      	ldr	r3, [pc, #116]	; (4bac <main+0x120>)
    4b38:	4798      	blx	r3
    4b3a:	b110      	cbz	r0, 4b42 <main+0xb6>
    		vTaskStartScheduler();
    4b3c:	4b1c      	ldr	r3, [pc, #112]	; (4bb0 <main+0x124>)
    4b3e:	4798      	blx	r3
    4b40:	e7e7      	b.n	4b12 <main+0x86>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    4b42:	481c      	ldr	r0, [pc, #112]	; (4bb4 <main+0x128>)
    4b44:	4b17      	ldr	r3, [pc, #92]	; (4ba4 <main+0x118>)
    4b46:	4798      	blx	r3
    4b48:	e7e3      	b.n	4b12 <main+0x86>
    4b4a:	bf00      	nop
    4b4c:	00003539 	.word	0x00003539
    4b50:	2000356c 	.word	0x2000356c
    4b54:	0000966c 	.word	0x0000966c
    4b58:	000011e1 	.word	0x000011e1
    4b5c:	00005ba5 	.word	0x00005ba5
    4b60:	20000be0 	.word	0x20000be0
    4b64:	20003548 	.word	0x20003548
    4b68:	00009678 	.word	0x00009678
    4b6c:	000031e1 	.word	0x000031e1
    4b70:	20003560 	.word	0x20003560
    4b74:	00009684 	.word	0x00009684
    4b78:	00003175 	.word	0x00003175
    4b7c:	20003554 	.word	0x20003554
    4b80:	00009690 	.word	0x00009690
    4b84:	00002f59 	.word	0x00002f59
    4b88:	20003558 	.word	0x20003558
    4b8c:	000096a4 	.word	0x000096a4
    4b90:	00002a8d 	.word	0x00002a8d
    4b94:	20003550 	.word	0x20003550
    4b98:	000096b4 	.word	0x000096b4
    4b9c:	000005c9 	.word	0x000005c9
    4ba0:	000096e0 	.word	0x000096e0
    4ba4:	0000336d 	.word	0x0000336d
    4ba8:	000096f8 	.word	0x000096f8
    4bac:	000049fd 	.word	0x000049fd
    4bb0:	00005d81 	.word	0x00005d81
    4bb4:	000096c0 	.word	0x000096c0

00004bb8 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    4bb8:	f100 0308 	add.w	r3, r0, #8
    4bbc:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    4bbe:	f04f 32ff 	mov.w	r2, #4294967295
    4bc2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    4bc4:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    4bc6:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    4bc8:	2300      	movs	r3, #0
    4bca:	6003      	str	r3, [r0, #0]
    4bcc:	4770      	bx	lr

00004bce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4bce:	2300      	movs	r3, #0
    4bd0:	6103      	str	r3, [r0, #16]
    4bd2:	4770      	bx	lr

00004bd4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    4bd4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    4bd6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    4bd8:	689a      	ldr	r2, [r3, #8]
    4bda:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    4bdc:	689a      	ldr	r2, [r3, #8]
    4bde:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    4be0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    4be2:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    4be4:	6803      	ldr	r3, [r0, #0]
    4be6:	3301      	adds	r3, #1
    4be8:	6003      	str	r3, [r0, #0]
    4bea:	4770      	bx	lr

00004bec <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    4bec:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    4bee:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    4bf0:	f1b5 3fff 	cmp.w	r5, #4294967295
    4bf4:	d002      	beq.n	4bfc <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    4bf6:	f100 0208 	add.w	r2, r0, #8
    4bfa:	e002      	b.n	4c02 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    4bfc:	6902      	ldr	r2, [r0, #16]
    4bfe:	e004      	b.n	4c0a <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    4c00:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    4c02:	6853      	ldr	r3, [r2, #4]
    4c04:	681c      	ldr	r4, [r3, #0]
    4c06:	42a5      	cmp	r5, r4
    4c08:	d2fa      	bcs.n	4c00 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    4c0a:	6853      	ldr	r3, [r2, #4]
    4c0c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    4c0e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    4c10:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    4c12:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    4c14:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    4c16:	6803      	ldr	r3, [r0, #0]
    4c18:	3301      	adds	r3, #1
    4c1a:	6003      	str	r3, [r0, #0]
}
    4c1c:	bc30      	pop	{r4, r5}
    4c1e:	4770      	bx	lr

00004c20 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    4c20:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4c22:	6842      	ldr	r2, [r0, #4]
    4c24:	6881      	ldr	r1, [r0, #8]
    4c26:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4c28:	6882      	ldr	r2, [r0, #8]
    4c2a:	6841      	ldr	r1, [r0, #4]
    4c2c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    4c2e:	685a      	ldr	r2, [r3, #4]
    4c30:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4c32:	bf04      	itt	eq
    4c34:	6882      	ldreq	r2, [r0, #8]
    4c36:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    4c38:	2200      	movs	r2, #0
    4c3a:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    4c3c:	681a      	ldr	r2, [r3, #0]
    4c3e:	3a01      	subs	r2, #1
    4c40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    4c42:	6818      	ldr	r0, [r3, #0]
}
    4c44:	4770      	bx	lr
	...

00004c48 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    4c48:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    4c4a:	2300      	movs	r3, #0
    4c4c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    4c4e:	4b0d      	ldr	r3, [pc, #52]	; (4c84 <prvTaskExitError+0x3c>)
    4c50:	681b      	ldr	r3, [r3, #0]
    4c52:	f1b3 3fff 	cmp.w	r3, #4294967295
    4c56:	d008      	beq.n	4c6a <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    4c58:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c5c:	f383 8811 	msr	BASEPRI, r3
    4c60:	f3bf 8f6f 	isb	sy
    4c64:	f3bf 8f4f 	dsb	sy
    4c68:	e7fe      	b.n	4c68 <prvTaskExitError+0x20>
    4c6a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c6e:	f383 8811 	msr	BASEPRI, r3
    4c72:	f3bf 8f6f 	isb	sy
    4c76:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    4c7a:	9b01      	ldr	r3, [sp, #4]
    4c7c:	2b00      	cmp	r3, #0
    4c7e:	d0fc      	beq.n	4c7a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    4c80:	b002      	add	sp, #8
    4c82:	4770      	bx	lr
    4c84:	20000070 	.word	0x20000070

00004c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    4c88:	4808      	ldr	r0, [pc, #32]	; (4cac <prvPortStartFirstTask+0x24>)
    4c8a:	6800      	ldr	r0, [r0, #0]
    4c8c:	6800      	ldr	r0, [r0, #0]
    4c8e:	f380 8808 	msr	MSP, r0
    4c92:	f04f 0000 	mov.w	r0, #0
    4c96:	f380 8814 	msr	CONTROL, r0
    4c9a:	b662      	cpsie	i
    4c9c:	b661      	cpsie	f
    4c9e:	f3bf 8f4f 	dsb	sy
    4ca2:	f3bf 8f6f 	isb	sy
    4ca6:	df00      	svc	0
    4ca8:	bf00      	nop
    4caa:	0000      	.short	0x0000
    4cac:	e000ed08 	.word	0xe000ed08

00004cb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    4cb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4cc0 <vPortEnableVFP+0x10>
    4cb4:	6801      	ldr	r1, [r0, #0]
    4cb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4cba:	6001      	str	r1, [r0, #0]
    4cbc:	4770      	bx	lr
    4cbe:	0000      	.short	0x0000
    4cc0:	e000ed88 	.word	0xe000ed88

00004cc4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    4cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4cc8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    4ccc:	f021 0101 	bic.w	r1, r1, #1
    4cd0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    4cd4:	4b05      	ldr	r3, [pc, #20]	; (4cec <pxPortInitialiseStack+0x28>)
    4cd6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    4cda:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    4cde:	f06f 0302 	mvn.w	r3, #2
    4ce2:	f840 3c24 	str.w	r3, [r0, #-36]
}
    4ce6:	3844      	subs	r0, #68	; 0x44
    4ce8:	4770      	bx	lr
    4cea:	bf00      	nop
    4cec:	00004c49 	.word	0x00004c49

00004cf0 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    4cf0:	4b07      	ldr	r3, [pc, #28]	; (4d10 <pxCurrentTCBConst2>)
    4cf2:	6819      	ldr	r1, [r3, #0]
    4cf4:	6808      	ldr	r0, [r1, #0]
    4cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4cfa:	f380 8809 	msr	PSP, r0
    4cfe:	f3bf 8f6f 	isb	sy
    4d02:	f04f 0000 	mov.w	r0, #0
    4d06:	f380 8811 	msr	BASEPRI, r0
    4d0a:	4770      	bx	lr
    4d0c:	f3af 8000 	nop.w

00004d10 <pxCurrentTCBConst2>:
    4d10:	200034a8 	.word	0x200034a8

00004d14 <vPortEnterCritical>:
    4d14:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d18:	f383 8811 	msr	BASEPRI, r3
    4d1c:	f3bf 8f6f 	isb	sy
    4d20:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    4d24:	4a0a      	ldr	r2, [pc, #40]	; (4d50 <vPortEnterCritical+0x3c>)
    4d26:	6813      	ldr	r3, [r2, #0]
    4d28:	3301      	adds	r3, #1
    4d2a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    4d2c:	2b01      	cmp	r3, #1
    4d2e:	d10d      	bne.n	4d4c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    4d30:	4b08      	ldr	r3, [pc, #32]	; (4d54 <vPortEnterCritical+0x40>)
    4d32:	681b      	ldr	r3, [r3, #0]
    4d34:	f013 0fff 	tst.w	r3, #255	; 0xff
    4d38:	d008      	beq.n	4d4c <vPortEnterCritical+0x38>
    4d3a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d3e:	f383 8811 	msr	BASEPRI, r3
    4d42:	f3bf 8f6f 	isb	sy
    4d46:	f3bf 8f4f 	dsb	sy
    4d4a:	e7fe      	b.n	4d4a <vPortEnterCritical+0x36>
    4d4c:	4770      	bx	lr
    4d4e:	bf00      	nop
    4d50:	20000070 	.word	0x20000070
    4d54:	e000ed04 	.word	0xe000ed04

00004d58 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    4d58:	4b09      	ldr	r3, [pc, #36]	; (4d80 <vPortExitCritical+0x28>)
    4d5a:	681b      	ldr	r3, [r3, #0]
    4d5c:	b943      	cbnz	r3, 4d70 <vPortExitCritical+0x18>
    4d5e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d62:	f383 8811 	msr	BASEPRI, r3
    4d66:	f3bf 8f6f 	isb	sy
    4d6a:	f3bf 8f4f 	dsb	sy
    4d6e:	e7fe      	b.n	4d6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    4d70:	3b01      	subs	r3, #1
    4d72:	4a03      	ldr	r2, [pc, #12]	; (4d80 <vPortExitCritical+0x28>)
    4d74:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    4d76:	b90b      	cbnz	r3, 4d7c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4d78:	f383 8811 	msr	BASEPRI, r3
    4d7c:	4770      	bx	lr
    4d7e:	bf00      	nop
    4d80:	20000070 	.word	0x20000070
	...

00004d90 <PendSV_Handler>:
	__asm volatile(
    4d90:	f3ef 8009 	mrs	r0, PSP
    4d94:	f3bf 8f6f 	isb	sy
    4d98:	4b15      	ldr	r3, [pc, #84]	; (4df0 <pxCurrentTCBConst>)
    4d9a:	681a      	ldr	r2, [r3, #0]
    4d9c:	f01e 0f10 	tst.w	lr, #16
    4da0:	bf08      	it	eq
    4da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4daa:	6010      	str	r0, [r2, #0]
    4dac:	e92d 0009 	stmdb	sp!, {r0, r3}
    4db0:	f04f 0080 	mov.w	r0, #128	; 0x80
    4db4:	f380 8811 	msr	BASEPRI, r0
    4db8:	f3bf 8f4f 	dsb	sy
    4dbc:	f3bf 8f6f 	isb	sy
    4dc0:	f001 f978 	bl	60b4 <vTaskSwitchContext>
    4dc4:	f04f 0000 	mov.w	r0, #0
    4dc8:	f380 8811 	msr	BASEPRI, r0
    4dcc:	bc09      	pop	{r0, r3}
    4dce:	6819      	ldr	r1, [r3, #0]
    4dd0:	6808      	ldr	r0, [r1, #0]
    4dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dd6:	f01e 0f10 	tst.w	lr, #16
    4dda:	bf08      	it	eq
    4ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4de0:	f380 8809 	msr	PSP, r0
    4de4:	f3bf 8f6f 	isb	sy
    4de8:	4770      	bx	lr
    4dea:	bf00      	nop
    4dec:	f3af 8000 	nop.w

00004df0 <pxCurrentTCBConst>:
    4df0:	200034a8 	.word	0x200034a8

00004df4 <SysTick_Handler>:
{
    4df4:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    4df6:	f04f 0380 	mov.w	r3, #128	; 0x80
    4dfa:	f383 8811 	msr	BASEPRI, r3
    4dfe:	f3bf 8f6f 	isb	sy
    4e02:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    4e06:	4b05      	ldr	r3, [pc, #20]	; (4e1c <SysTick_Handler+0x28>)
    4e08:	4798      	blx	r3
    4e0a:	b118      	cbz	r0, 4e14 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    4e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4e10:	4b03      	ldr	r3, [pc, #12]	; (4e20 <SysTick_Handler+0x2c>)
    4e12:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4e14:	2300      	movs	r3, #0
    4e16:	f383 8811 	msr	BASEPRI, r3
    4e1a:	bd08      	pop	{r3, pc}
    4e1c:	00005e29 	.word	0x00005e29
    4e20:	e000ed04 	.word	0xe000ed04

00004e24 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    4e24:	4b05      	ldr	r3, [pc, #20]	; (4e3c <vPortSetupTimerInterrupt+0x18>)
    4e26:	2200      	movs	r2, #0
    4e28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    4e2a:	4905      	ldr	r1, [pc, #20]	; (4e40 <vPortSetupTimerInterrupt+0x1c>)
    4e2c:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    4e2e:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    4e32:	4a04      	ldr	r2, [pc, #16]	; (4e44 <vPortSetupTimerInterrupt+0x20>)
    4e34:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    4e36:	2207      	movs	r2, #7
    4e38:	601a      	str	r2, [r3, #0]
    4e3a:	4770      	bx	lr
    4e3c:	e000e010 	.word	0xe000e010
    4e40:	e000e018 	.word	0xe000e018
    4e44:	e000e014 	.word	0xe000e014

00004e48 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    4e48:	4b3b      	ldr	r3, [pc, #236]	; (4f38 <xPortStartScheduler+0xf0>)
    4e4a:	681a      	ldr	r2, [r3, #0]
    4e4c:	4b3b      	ldr	r3, [pc, #236]	; (4f3c <xPortStartScheduler+0xf4>)
    4e4e:	429a      	cmp	r2, r3
    4e50:	d108      	bne.n	4e64 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    4e52:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e56:	f383 8811 	msr	BASEPRI, r3
    4e5a:	f3bf 8f6f 	isb	sy
    4e5e:	f3bf 8f4f 	dsb	sy
    4e62:	e7fe      	b.n	4e62 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    4e64:	4b34      	ldr	r3, [pc, #208]	; (4f38 <xPortStartScheduler+0xf0>)
    4e66:	681a      	ldr	r2, [r3, #0]
    4e68:	4b35      	ldr	r3, [pc, #212]	; (4f40 <xPortStartScheduler+0xf8>)
    4e6a:	429a      	cmp	r2, r3
    4e6c:	d108      	bne.n	4e80 <xPortStartScheduler+0x38>
    4e6e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e72:	f383 8811 	msr	BASEPRI, r3
    4e76:	f3bf 8f6f 	isb	sy
    4e7a:	f3bf 8f4f 	dsb	sy
    4e7e:	e7fe      	b.n	4e7e <xPortStartScheduler+0x36>
{
    4e80:	b510      	push	{r4, lr}
    4e82:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    4e84:	4b2f      	ldr	r3, [pc, #188]	; (4f44 <xPortStartScheduler+0xfc>)
    4e86:	781a      	ldrb	r2, [r3, #0]
    4e88:	b2d2      	uxtb	r2, r2
    4e8a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    4e8c:	22ff      	movs	r2, #255	; 0xff
    4e8e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    4e90:	781b      	ldrb	r3, [r3, #0]
    4e92:	b2db      	uxtb	r3, r3
    4e94:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    4e98:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4e9c:	4a2a      	ldr	r2, [pc, #168]	; (4f48 <xPortStartScheduler+0x100>)
    4e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4ea2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    4ea4:	2307      	movs	r3, #7
    4ea6:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4ea8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4eac:	f013 0f80 	tst.w	r3, #128	; 0x80
    4eb0:	d012      	beq.n	4ed8 <xPortStartScheduler+0x90>
    4eb2:	2306      	movs	r3, #6
    4eb4:	e000      	b.n	4eb8 <xPortStartScheduler+0x70>
    4eb6:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    4eb8:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4ebc:	0052      	lsls	r2, r2, #1
    4ebe:	b2d2      	uxtb	r2, r2
    4ec0:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4ec4:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4ec8:	1e59      	subs	r1, r3, #1
    4eca:	f012 0f80 	tst.w	r2, #128	; 0x80
    4ece:	d1f2      	bne.n	4eb6 <xPortStartScheduler+0x6e>
    4ed0:	4a1d      	ldr	r2, [pc, #116]	; (4f48 <xPortStartScheduler+0x100>)
    4ed2:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    4ed4:	2b04      	cmp	r3, #4
    4ed6:	d008      	beq.n	4eea <xPortStartScheduler+0xa2>
    4ed8:	f04f 0380 	mov.w	r3, #128	; 0x80
    4edc:	f383 8811 	msr	BASEPRI, r3
    4ee0:	f3bf 8f6f 	isb	sy
    4ee4:	f3bf 8f4f 	dsb	sy
    4ee8:	e7fe      	b.n	4ee8 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    4eea:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    4eec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4ef0:	4a15      	ldr	r2, [pc, #84]	; (4f48 <xPortStartScheduler+0x100>)
    4ef2:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    4ef4:	9b01      	ldr	r3, [sp, #4]
    4ef6:	b2db      	uxtb	r3, r3
    4ef8:	4a12      	ldr	r2, [pc, #72]	; (4f44 <xPortStartScheduler+0xfc>)
    4efa:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    4efc:	4b13      	ldr	r3, [pc, #76]	; (4f4c <xPortStartScheduler+0x104>)
    4efe:	681a      	ldr	r2, [r3, #0]
    4f00:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    4f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    4f06:	681a      	ldr	r2, [r3, #0]
    4f08:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    4f0c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    4f0e:	4b10      	ldr	r3, [pc, #64]	; (4f50 <xPortStartScheduler+0x108>)
    4f10:	4798      	blx	r3
	uxCriticalNesting = 0;
    4f12:	2400      	movs	r4, #0
    4f14:	4b0f      	ldr	r3, [pc, #60]	; (4f54 <xPortStartScheduler+0x10c>)
    4f16:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    4f18:	4b0f      	ldr	r3, [pc, #60]	; (4f58 <xPortStartScheduler+0x110>)
    4f1a:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    4f1c:	4a0f      	ldr	r2, [pc, #60]	; (4f5c <xPortStartScheduler+0x114>)
    4f1e:	6813      	ldr	r3, [r2, #0]
    4f20:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4f24:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    4f26:	4b0e      	ldr	r3, [pc, #56]	; (4f60 <xPortStartScheduler+0x118>)
    4f28:	4798      	blx	r3
	vTaskSwitchContext();
    4f2a:	4b0e      	ldr	r3, [pc, #56]	; (4f64 <xPortStartScheduler+0x11c>)
    4f2c:	4798      	blx	r3
	prvTaskExitError();
    4f2e:	4b0e      	ldr	r3, [pc, #56]	; (4f68 <xPortStartScheduler+0x120>)
    4f30:	4798      	blx	r3
}
    4f32:	4620      	mov	r0, r4
    4f34:	b002      	add	sp, #8
    4f36:	bd10      	pop	{r4, pc}
    4f38:	e000ed00 	.word	0xe000ed00
    4f3c:	410fc271 	.word	0x410fc271
    4f40:	410fc270 	.word	0x410fc270
    4f44:	e000e400 	.word	0xe000e400
    4f48:	20000bf4 	.word	0x20000bf4
    4f4c:	e000ed20 	.word	0xe000ed20
    4f50:	00004e25 	.word	0x00004e25
    4f54:	20000070 	.word	0x20000070
    4f58:	00004cb1 	.word	0x00004cb1
    4f5c:	e000ef34 	.word	0xe000ef34
    4f60:	00004c89 	.word	0x00004c89
    4f64:	000060b5 	.word	0x000060b5
    4f68:	00004c49 	.word	0x00004c49

00004f6c <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    4f6c:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    4f70:	2b0f      	cmp	r3, #15
    4f72:	d90f      	bls.n	4f94 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    4f74:	4a10      	ldr	r2, [pc, #64]	; (4fb8 <vPortValidateInterruptPriority+0x4c>)
    4f76:	5c9b      	ldrb	r3, [r3, r2]
    4f78:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    4f7a:	4a10      	ldr	r2, [pc, #64]	; (4fbc <vPortValidateInterruptPriority+0x50>)
    4f7c:	7812      	ldrb	r2, [r2, #0]
    4f7e:	429a      	cmp	r2, r3
    4f80:	d908      	bls.n	4f94 <vPortValidateInterruptPriority+0x28>
    4f82:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f86:	f383 8811 	msr	BASEPRI, r3
    4f8a:	f3bf 8f6f 	isb	sy
    4f8e:	f3bf 8f4f 	dsb	sy
    4f92:	e7fe      	b.n	4f92 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    4f94:	4b0a      	ldr	r3, [pc, #40]	; (4fc0 <vPortValidateInterruptPriority+0x54>)
    4f96:	681b      	ldr	r3, [r3, #0]
    4f98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4f9c:	4a07      	ldr	r2, [pc, #28]	; (4fbc <vPortValidateInterruptPriority+0x50>)
    4f9e:	6852      	ldr	r2, [r2, #4]
    4fa0:	4293      	cmp	r3, r2
    4fa2:	d908      	bls.n	4fb6 <vPortValidateInterruptPriority+0x4a>
    4fa4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4fa8:	f383 8811 	msr	BASEPRI, r3
    4fac:	f3bf 8f6f 	isb	sy
    4fb0:	f3bf 8f4f 	dsb	sy
    4fb4:	e7fe      	b.n	4fb4 <vPortValidateInterruptPriority+0x48>
    4fb6:	4770      	bx	lr
    4fb8:	e000e3f0 	.word	0xe000e3f0
    4fbc:	20000bf4 	.word	0x20000bf4
    4fc0:	e000ed0c 	.word	0xe000ed0c

00004fc4 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    4fc4:	b570      	push	{r4, r5, r6, lr}
    4fc6:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    4fc8:	4b2f      	ldr	r3, [pc, #188]	; (5088 <pvPortMalloc+0xc4>)
    4fca:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    4fcc:	4b2f      	ldr	r3, [pc, #188]	; (508c <pvPortMalloc+0xc8>)
    4fce:	689b      	ldr	r3, [r3, #8]
    4fd0:	b183      	cbz	r3, 4ff4 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    4fd2:	2c00      	cmp	r4, #0
    4fd4:	d051      	beq.n	507a <pvPortMalloc+0xb6>
		{
			xWantedSize += heapSTRUCT_SIZE;
    4fd6:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    4fd8:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    4fdc:	bf1c      	itt	ne
    4fde:	f024 0407 	bicne.w	r4, r4, #7
    4fe2:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    4fe4:	1e62      	subs	r2, r4, #1
    4fe6:	f242 73f6 	movw	r3, #10230	; 0x27f6
    4fea:	429a      	cmp	r2, r3
    4fec:	d842      	bhi.n	5074 <pvPortMalloc+0xb0>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    4fee:	4927      	ldr	r1, [pc, #156]	; (508c <pvPortMalloc+0xc8>)
    4ff0:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    4ff2:	e017      	b.n	5024 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    4ff4:	4925      	ldr	r1, [pc, #148]	; (508c <pvPortMalloc+0xc8>)
    4ff6:	f101 0314 	add.w	r3, r1, #20
    4ffa:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    4ffe:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    5000:	2500      	movs	r5, #0
    5002:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    5004:	4a22      	ldr	r2, [pc, #136]	; (5090 <pvPortMalloc+0xcc>)
    5006:	f242 70f8 	movw	r0, #10232	; 0x27f8
    500a:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    500e:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    5012:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    5014:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    5018:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    501a:	2301      	movs	r3, #1
    501c:	608b      	str	r3, [r1, #8]
    501e:	e7d8      	b.n	4fd2 <pvPortMalloc+0xe>
    5020:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    5022:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    5024:	685a      	ldr	r2, [r3, #4]
    5026:	4294      	cmp	r4, r2
    5028:	d902      	bls.n	5030 <pvPortMalloc+0x6c>
    502a:	681a      	ldr	r2, [r3, #0]
    502c:	2a00      	cmp	r2, #0
    502e:	d1f7      	bne.n	5020 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    5030:	4a18      	ldr	r2, [pc, #96]	; (5094 <pvPortMalloc+0xd0>)
    5032:	4293      	cmp	r3, r2
    5034:	d01e      	beq.n	5074 <pvPortMalloc+0xb0>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5036:	680d      	ldr	r5, [r1, #0]
    5038:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    503a:	681a      	ldr	r2, [r3, #0]
    503c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    503e:	685a      	ldr	r2, [r3, #4]
    5040:	1b12      	subs	r2, r2, r4
    5042:	2a10      	cmp	r2, #16
    5044:	d90c      	bls.n	5060 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    5046:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5048:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    504a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    504c:	6874      	ldr	r4, [r6, #4]
    504e:	490f      	ldr	r1, [pc, #60]	; (508c <pvPortMalloc+0xc8>)
    5050:	e000      	b.n	5054 <pvPortMalloc+0x90>
    5052:	4611      	mov	r1, r2
    5054:	680a      	ldr	r2, [r1, #0]
    5056:	6850      	ldr	r0, [r2, #4]
    5058:	4284      	cmp	r4, r0
    505a:	d8fa      	bhi.n	5052 <pvPortMalloc+0x8e>
    505c:	6032      	str	r2, [r6, #0]
    505e:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5060:	490d      	ldr	r1, [pc, #52]	; (5098 <pvPortMalloc+0xd4>)
    5062:	680a      	ldr	r2, [r1, #0]
    5064:	685b      	ldr	r3, [r3, #4]
    5066:	1ad2      	subs	r2, r2, r3
    5068:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    506a:	4b0c      	ldr	r3, [pc, #48]	; (509c <pvPortMalloc+0xd8>)
    506c:	4798      	blx	r3
		if( pvReturn == NULL )
    506e:	b135      	cbz	r5, 507e <pvPortMalloc+0xba>
}
    5070:	4628      	mov	r0, r5
    5072:	bd70      	pop	{r4, r5, r6, pc}
	( void ) xTaskResumeAll();
    5074:	4b09      	ldr	r3, [pc, #36]	; (509c <pvPortMalloc+0xd8>)
    5076:	4798      	blx	r3
    5078:	e001      	b.n	507e <pvPortMalloc+0xba>
    507a:	4b08      	ldr	r3, [pc, #32]	; (509c <pvPortMalloc+0xd8>)
    507c:	4798      	blx	r3
			vApplicationMallocFailedHook();
    507e:	4b08      	ldr	r3, [pc, #32]	; (50a0 <pvPortMalloc+0xdc>)
    5080:	4798      	blx	r3
    5082:	2500      	movs	r5, #0
	return pvReturn;
    5084:	e7f4      	b.n	5070 <pvPortMalloc+0xac>
    5086:	bf00      	nop
    5088:	00005e09 	.word	0x00005e09
    508c:	20000bfc 	.word	0x20000bfc
    5090:	20002dec 	.word	0x20002dec
    5094:	20003408 	.word	0x20003408
    5098:	20000074 	.word	0x20000074
    509c:	00005f51 	.word	0x00005f51
    50a0:	0000033d 	.word	0x0000033d

000050a4 <vPortFree>:
	if( pv != NULL )
    50a4:	b1d0      	cbz	r0, 50dc <vPortFree+0x38>
{
    50a6:	b570      	push	{r4, r5, r6, lr}
    50a8:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    50aa:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    50ae:	4b0c      	ldr	r3, [pc, #48]	; (50e0 <vPortFree+0x3c>)
    50b0:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    50b2:	f855 4c04 	ldr.w	r4, [r5, #-4]
    50b6:	4a0b      	ldr	r2, [pc, #44]	; (50e4 <vPortFree+0x40>)
    50b8:	e000      	b.n	50bc <vPortFree+0x18>
    50ba:	461a      	mov	r2, r3
    50bc:	6813      	ldr	r3, [r2, #0]
    50be:	6859      	ldr	r1, [r3, #4]
    50c0:	428c      	cmp	r4, r1
    50c2:	d8fa      	bhi.n	50ba <vPortFree+0x16>
    50c4:	f845 3c08 	str.w	r3, [r5, #-8]
    50c8:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    50ca:	4a07      	ldr	r2, [pc, #28]	; (50e8 <vPortFree+0x44>)
    50cc:	f855 3c04 	ldr.w	r3, [r5, #-4]
    50d0:	6811      	ldr	r1, [r2, #0]
    50d2:	440b      	add	r3, r1
    50d4:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    50d6:	4b05      	ldr	r3, [pc, #20]	; (50ec <vPortFree+0x48>)
    50d8:	4798      	blx	r3
    50da:	bd70      	pop	{r4, r5, r6, pc}
    50dc:	4770      	bx	lr
    50de:	bf00      	nop
    50e0:	00005e09 	.word	0x00005e09
    50e4:	20000bfc 	.word	0x20000bfc
    50e8:	20000074 	.word	0x20000074
    50ec:	00005f51 	.word	0x00005f51

000050f0 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    50f0:	b510      	push	{r4, lr}
    50f2:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    50f4:	4b04      	ldr	r3, [pc, #16]	; (5108 <prvIsQueueEmpty+0x18>)
    50f6:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    50f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    50fa:	4b04      	ldr	r3, [pc, #16]	; (510c <prvIsQueueEmpty+0x1c>)
    50fc:	4798      	blx	r3

	return xReturn;
}
    50fe:	fab4 f084 	clz	r0, r4
    5102:	0940      	lsrs	r0, r0, #5
    5104:	bd10      	pop	{r4, pc}
    5106:	bf00      	nop
    5108:	00004d15 	.word	0x00004d15
    510c:	00004d59 	.word	0x00004d59

00005110 <prvCopyDataToQueue>:
{
    5110:	b570      	push	{r4, r5, r6, lr}
    5112:	4604      	mov	r4, r0
    5114:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5116:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    5118:	6c02      	ldr	r2, [r0, #64]	; 0x40
    511a:	b952      	cbnz	r2, 5132 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    511c:	6803      	ldr	r3, [r0, #0]
    511e:	2b00      	cmp	r3, #0
    5120:	d12a      	bne.n	5178 <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    5122:	6840      	ldr	r0, [r0, #4]
    5124:	4b18      	ldr	r3, [pc, #96]	; (5188 <prvCopyDataToQueue+0x78>)
    5126:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    5128:	2300      	movs	r3, #0
    512a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    512c:	3501      	adds	r5, #1
    512e:	63a5      	str	r5, [r4, #56]	; 0x38
}
    5130:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    5132:	b96e      	cbnz	r6, 5150 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    5134:	6880      	ldr	r0, [r0, #8]
    5136:	4b15      	ldr	r3, [pc, #84]	; (518c <prvCopyDataToQueue+0x7c>)
    5138:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    513a:	68a3      	ldr	r3, [r4, #8]
    513c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    513e:	4413      	add	r3, r2
    5140:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    5142:	6862      	ldr	r2, [r4, #4]
    5144:	4293      	cmp	r3, r2
    5146:	d319      	bcc.n	517c <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    5148:	6823      	ldr	r3, [r4, #0]
    514a:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    514c:	2000      	movs	r0, #0
    514e:	e7ed      	b.n	512c <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    5150:	68c0      	ldr	r0, [r0, #12]
    5152:	4b0e      	ldr	r3, [pc, #56]	; (518c <prvCopyDataToQueue+0x7c>)
    5154:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    5156:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5158:	425b      	negs	r3, r3
    515a:	68e2      	ldr	r2, [r4, #12]
    515c:	441a      	add	r2, r3
    515e:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    5160:	6821      	ldr	r1, [r4, #0]
    5162:	428a      	cmp	r2, r1
    5164:	d202      	bcs.n	516c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    5166:	6862      	ldr	r2, [r4, #4]
    5168:	4413      	add	r3, r2
    516a:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    516c:	2e02      	cmp	r6, #2
    516e:	d107      	bne.n	5180 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    5170:	b145      	cbz	r5, 5184 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    5172:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    5174:	2000      	movs	r0, #0
    5176:	e7d9      	b.n	512c <prvCopyDataToQueue+0x1c>
    5178:	2000      	movs	r0, #0
    517a:	e7d7      	b.n	512c <prvCopyDataToQueue+0x1c>
    517c:	2000      	movs	r0, #0
    517e:	e7d5      	b.n	512c <prvCopyDataToQueue+0x1c>
    5180:	2000      	movs	r0, #0
    5182:	e7d3      	b.n	512c <prvCopyDataToQueue+0x1c>
    5184:	2000      	movs	r0, #0
    5186:	e7d1      	b.n	512c <prvCopyDataToQueue+0x1c>
    5188:	000063f5 	.word	0x000063f5
    518c:	00006be9 	.word	0x00006be9

00005190 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    5190:	b570      	push	{r4, r5, r6, lr}
    5192:	b082      	sub	sp, #8
    5194:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    5196:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    5198:	b164      	cbz	r4, 51b4 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    519a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    519c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    519e:	429a      	cmp	r2, r3
    51a0:	d311      	bcc.n	51c6 <prvNotifyQueueSetContainer+0x36>
    51a2:	f04f 0380 	mov.w	r3, #128	; 0x80
    51a6:	f383 8811 	msr	BASEPRI, r3
    51aa:	f3bf 8f6f 	isb	sy
    51ae:	f3bf 8f4f 	dsb	sy
    51b2:	e7fe      	b.n	51b2 <prvNotifyQueueSetContainer+0x22>
    51b4:	f04f 0380 	mov.w	r3, #128	; 0x80
    51b8:	f383 8811 	msr	BASEPRI, r3
    51bc:	f3bf 8f6f 	isb	sy
    51c0:	f3bf 8f4f 	dsb	sy
    51c4:	e7fe      	b.n	51c4 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    51c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    51c8:	4293      	cmp	r3, r2
    51ca:	d803      	bhi.n	51d4 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    51cc:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    51ce:	4630      	mov	r0, r6
    51d0:	b002      	add	sp, #8
    51d2:	bd70      	pop	{r4, r5, r6, pc}
    51d4:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    51d6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    51da:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    51dc:	a901      	add	r1, sp, #4
    51de:	4620      	mov	r0, r4
    51e0:	4b0a      	ldr	r3, [pc, #40]	; (520c <prvNotifyQueueSetContainer+0x7c>)
    51e2:	4798      	blx	r3
    51e4:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    51e6:	f1b5 3fff 	cmp.w	r5, #4294967295
    51ea:	d10a      	bne.n	5202 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    51ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    51ee:	2b00      	cmp	r3, #0
    51f0:	d0ed      	beq.n	51ce <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    51f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
    51f6:	4b06      	ldr	r3, [pc, #24]	; (5210 <prvNotifyQueueSetContainer+0x80>)
    51f8:	4798      	blx	r3
    51fa:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    51fc:	bf18      	it	ne
    51fe:	2601      	movne	r6, #1
    5200:	e7e5      	b.n	51ce <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    5202:	1c6b      	adds	r3, r5, #1
    5204:	b25b      	sxtb	r3, r3
    5206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    520a:	e7e0      	b.n	51ce <prvNotifyQueueSetContainer+0x3e>
    520c:	00005111 	.word	0x00005111
    5210:	000061f1 	.word	0x000061f1

00005214 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    5214:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5216:	b172      	cbz	r2, 5236 <prvCopyDataFromQueue+0x22>
{
    5218:	b510      	push	{r4, lr}
    521a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    521c:	68c4      	ldr	r4, [r0, #12]
    521e:	4414      	add	r4, r2
    5220:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    5222:	6840      	ldr	r0, [r0, #4]
    5224:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    5226:	bf24      	itt	cs
    5228:	6818      	ldrcs	r0, [r3, #0]
    522a:	60d8      	strcs	r0, [r3, #12]
    522c:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    522e:	68d9      	ldr	r1, [r3, #12]
    5230:	4b01      	ldr	r3, [pc, #4]	; (5238 <prvCopyDataFromQueue+0x24>)
    5232:	4798      	blx	r3
    5234:	bd10      	pop	{r4, pc}
    5236:	4770      	bx	lr
    5238:	00006be9 	.word	0x00006be9

0000523c <prvUnlockQueue>:
{
    523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5240:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    5242:	4b23      	ldr	r3, [pc, #140]	; (52d0 <prvUnlockQueue+0x94>)
    5244:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    5246:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    524a:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    524c:	2c00      	cmp	r4, #0
    524e:	dd19      	ble.n	5284 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    5250:	4e20      	ldr	r6, [pc, #128]	; (52d4 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    5252:	f8df 808c 	ldr.w	r8, [pc, #140]	; 52e0 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    5256:	4f20      	ldr	r7, [pc, #128]	; (52d8 <prvUnlockQueue+0x9c>)
    5258:	e008      	b.n	526c <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    525a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    525c:	b193      	cbz	r3, 5284 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    525e:	f105 0024 	add.w	r0, r5, #36	; 0x24
    5262:	47b8      	blx	r7
    5264:	b960      	cbnz	r0, 5280 <prvUnlockQueue+0x44>
    5266:	3c01      	subs	r4, #1
    5268:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    526a:	b15c      	cbz	r4, 5284 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    526c:	6cab      	ldr	r3, [r5, #72]	; 0x48
    526e:	2b00      	cmp	r3, #0
    5270:	d0f3      	beq.n	525a <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    5272:	2100      	movs	r1, #0
    5274:	4628      	mov	r0, r5
    5276:	47b0      	blx	r6
    5278:	2800      	cmp	r0, #0
    527a:	d0f4      	beq.n	5266 <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    527c:	47c0      	blx	r8
    527e:	e7f2      	b.n	5266 <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    5280:	47c0      	blx	r8
    5282:	e7f0      	b.n	5266 <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    5284:	23ff      	movs	r3, #255	; 0xff
    5286:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    528a:	4b14      	ldr	r3, [pc, #80]	; (52dc <prvUnlockQueue+0xa0>)
    528c:	4798      	blx	r3
	taskENTER_CRITICAL();
    528e:	4b10      	ldr	r3, [pc, #64]	; (52d0 <prvUnlockQueue+0x94>)
    5290:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    5292:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    5296:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    5298:	2c00      	cmp	r4, #0
    529a:	dd12      	ble.n	52c2 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    529c:	692b      	ldr	r3, [r5, #16]
    529e:	b183      	cbz	r3, 52c2 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    52a0:	f105 0710 	add.w	r7, r5, #16
    52a4:	4e0c      	ldr	r6, [pc, #48]	; (52d8 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    52a6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 52e0 <prvUnlockQueue+0xa4>
    52aa:	e004      	b.n	52b6 <prvUnlockQueue+0x7a>
    52ac:	3c01      	subs	r4, #1
    52ae:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    52b0:	b13c      	cbz	r4, 52c2 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    52b2:	692b      	ldr	r3, [r5, #16]
    52b4:	b12b      	cbz	r3, 52c2 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    52b6:	4638      	mov	r0, r7
    52b8:	47b0      	blx	r6
    52ba:	2800      	cmp	r0, #0
    52bc:	d0f6      	beq.n	52ac <prvUnlockQueue+0x70>
					vTaskMissedYield();
    52be:	47c0      	blx	r8
    52c0:	e7f4      	b.n	52ac <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    52c2:	23ff      	movs	r3, #255	; 0xff
    52c4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    52c8:	4b04      	ldr	r3, [pc, #16]	; (52dc <prvUnlockQueue+0xa0>)
    52ca:	4798      	blx	r3
    52cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52d0:	00004d15 	.word	0x00004d15
    52d4:	00005191 	.word	0x00005191
    52d8:	000061f1 	.word	0x000061f1
    52dc:	00004d59 	.word	0x00004d59
    52e0:	00006321 	.word	0x00006321

000052e4 <xQueueGenericReset>:
{
    52e4:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    52e6:	b330      	cbz	r0, 5336 <xQueueGenericReset+0x52>
    52e8:	4604      	mov	r4, r0
    52ea:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    52ec:	4b1c      	ldr	r3, [pc, #112]	; (5360 <xQueueGenericReset+0x7c>)
    52ee:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    52f0:	6822      	ldr	r2, [r4, #0]
    52f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    52f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    52f6:	fb03 f301 	mul.w	r3, r3, r1
    52fa:	18d0      	adds	r0, r2, r3
    52fc:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    52fe:	2000      	movs	r0, #0
    5300:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    5302:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    5304:	1a5b      	subs	r3, r3, r1
    5306:	4413      	add	r3, r2
    5308:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    530a:	23ff      	movs	r3, #255	; 0xff
    530c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    5310:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    5314:	b9c5      	cbnz	r5, 5348 <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5316:	6923      	ldr	r3, [r4, #16]
    5318:	b1eb      	cbz	r3, 5356 <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    531a:	f104 0010 	add.w	r0, r4, #16
    531e:	4b11      	ldr	r3, [pc, #68]	; (5364 <xQueueGenericReset+0x80>)
    5320:	4798      	blx	r3
    5322:	b1c0      	cbz	r0, 5356 <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    5324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5328:	4b0f      	ldr	r3, [pc, #60]	; (5368 <xQueueGenericReset+0x84>)
    532a:	601a      	str	r2, [r3, #0]
    532c:	f3bf 8f4f 	dsb	sy
    5330:	f3bf 8f6f 	isb	sy
    5334:	e00f      	b.n	5356 <xQueueGenericReset+0x72>
    5336:	f04f 0380 	mov.w	r3, #128	; 0x80
    533a:	f383 8811 	msr	BASEPRI, r3
    533e:	f3bf 8f6f 	isb	sy
    5342:	f3bf 8f4f 	dsb	sy
    5346:	e7fe      	b.n	5346 <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    5348:	f104 0010 	add.w	r0, r4, #16
    534c:	4d07      	ldr	r5, [pc, #28]	; (536c <xQueueGenericReset+0x88>)
    534e:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    5350:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5354:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    5356:	4b06      	ldr	r3, [pc, #24]	; (5370 <xQueueGenericReset+0x8c>)
    5358:	4798      	blx	r3
}
    535a:	2001      	movs	r0, #1
    535c:	bd38      	pop	{r3, r4, r5, pc}
    535e:	bf00      	nop
    5360:	00004d15 	.word	0x00004d15
    5364:	000061f1 	.word	0x000061f1
    5368:	e000ed04 	.word	0xe000ed04
    536c:	00004bb9 	.word	0x00004bb9
    5370:	00004d59 	.word	0x00004d59

00005374 <xQueueGenericCreate>:
{
    5374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    5376:	b940      	cbnz	r0, 538a <xQueueGenericCreate+0x16>
    5378:	f04f 0380 	mov.w	r3, #128	; 0x80
    537c:	f383 8811 	msr	BASEPRI, r3
    5380:	f3bf 8f6f 	isb	sy
    5384:	f3bf 8f4f 	dsb	sy
    5388:	e7fe      	b.n	5388 <xQueueGenericCreate+0x14>
    538a:	4606      	mov	r6, r0
    538c:	4617      	mov	r7, r2
    538e:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    5390:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    5394:	3054      	adds	r0, #84	; 0x54
    5396:	4b0b      	ldr	r3, [pc, #44]	; (53c4 <xQueueGenericCreate+0x50>)
    5398:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    539a:	4604      	mov	r4, r0
    539c:	b178      	cbz	r0, 53be <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    539e:	b11d      	cbz	r5, 53a8 <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    53a0:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    53a4:	6003      	str	r3, [r0, #0]
    53a6:	e000      	b.n	53aa <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    53a8:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    53aa:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    53ac:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    53ae:	2101      	movs	r1, #1
    53b0:	4620      	mov	r0, r4
    53b2:	4b05      	ldr	r3, [pc, #20]	; (53c8 <xQueueGenericCreate+0x54>)
    53b4:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    53b6:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    53ba:	2300      	movs	r3, #0
    53bc:	64a3      	str	r3, [r4, #72]	; 0x48
}
    53be:	4620      	mov	r0, r4
    53c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53c2:	bf00      	nop
    53c4:	00004fc5 	.word	0x00004fc5
    53c8:	000052e5 	.word	0x000052e5

000053cc <xQueueGenericSend>:
{
    53cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53d0:	b085      	sub	sp, #20
    53d2:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    53d4:	b198      	cbz	r0, 53fe <xQueueGenericSend+0x32>
    53d6:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    53d8:	b1d1      	cbz	r1, 5410 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    53da:	2b02      	cmp	r3, #2
    53dc:	d024      	beq.n	5428 <xQueueGenericSend+0x5c>
    53de:	461e      	mov	r6, r3
    53e0:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    53e2:	4b64      	ldr	r3, [pc, #400]	; (5574 <xQueueGenericSend+0x1a8>)
    53e4:	4798      	blx	r3
    53e6:	bb58      	cbnz	r0, 5440 <xQueueGenericSend+0x74>
    53e8:	9b01      	ldr	r3, [sp, #4]
    53ea:	b38b      	cbz	r3, 5450 <xQueueGenericSend+0x84>
    53ec:	f04f 0380 	mov.w	r3, #128	; 0x80
    53f0:	f383 8811 	msr	BASEPRI, r3
    53f4:	f3bf 8f6f 	isb	sy
    53f8:	f3bf 8f4f 	dsb	sy
    53fc:	e7fe      	b.n	53fc <xQueueGenericSend+0x30>
    53fe:	f04f 0380 	mov.w	r3, #128	; 0x80
    5402:	f383 8811 	msr	BASEPRI, r3
    5406:	f3bf 8f6f 	isb	sy
    540a:	f3bf 8f4f 	dsb	sy
    540e:	e7fe      	b.n	540e <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    5410:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5412:	2a00      	cmp	r2, #0
    5414:	d0e1      	beq.n	53da <xQueueGenericSend+0xe>
    5416:	f04f 0380 	mov.w	r3, #128	; 0x80
    541a:	f383 8811 	msr	BASEPRI, r3
    541e:	f3bf 8f6f 	isb	sy
    5422:	f3bf 8f4f 	dsb	sy
    5426:	e7fe      	b.n	5426 <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    5428:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    542a:	2a01      	cmp	r2, #1
    542c:	d0d7      	beq.n	53de <xQueueGenericSend+0x12>
    542e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5432:	f383 8811 	msr	BASEPRI, r3
    5436:	f3bf 8f6f 	isb	sy
    543a:	f3bf 8f4f 	dsb	sy
    543e:	e7fe      	b.n	543e <xQueueGenericSend+0x72>
    5440:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    5442:	f8df 815c 	ldr.w	r8, [pc, #348]	; 55a0 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5446:	f8df a15c 	ldr.w	sl, [pc, #348]	; 55a4 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    544a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 5580 <xQueueGenericSend+0x1b4>
    544e:	e041      	b.n	54d4 <xQueueGenericSend+0x108>
    5450:	2500      	movs	r5, #0
    5452:	e7f6      	b.n	5442 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    5454:	4632      	mov	r2, r6
    5456:	4639      	mov	r1, r7
    5458:	4620      	mov	r0, r4
    545a:	4b47      	ldr	r3, [pc, #284]	; (5578 <xQueueGenericSend+0x1ac>)
    545c:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    545e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5460:	b193      	cbz	r3, 5488 <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    5462:	4631      	mov	r1, r6
    5464:	4620      	mov	r0, r4
    5466:	4b45      	ldr	r3, [pc, #276]	; (557c <xQueueGenericSend+0x1b0>)
    5468:	4798      	blx	r3
    546a:	b138      	cbz	r0, 547c <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    546c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5470:	4b43      	ldr	r3, [pc, #268]	; (5580 <xQueueGenericSend+0x1b4>)
    5472:	601a      	str	r2, [r3, #0]
    5474:	f3bf 8f4f 	dsb	sy
    5478:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    547c:	4b41      	ldr	r3, [pc, #260]	; (5584 <xQueueGenericSend+0x1b8>)
    547e:	4798      	blx	r3
				return pdPASS;
    5480:	2001      	movs	r0, #1
}
    5482:	b005      	add	sp, #20
    5484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    5488:	6a63      	ldr	r3, [r4, #36]	; 0x24
    548a:	b173      	cbz	r3, 54aa <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    548c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5490:	4b3d      	ldr	r3, [pc, #244]	; (5588 <xQueueGenericSend+0x1bc>)
    5492:	4798      	blx	r3
    5494:	2800      	cmp	r0, #0
    5496:	d0f1      	beq.n	547c <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    5498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    549c:	4b38      	ldr	r3, [pc, #224]	; (5580 <xQueueGenericSend+0x1b4>)
    549e:	601a      	str	r2, [r3, #0]
    54a0:	f3bf 8f4f 	dsb	sy
    54a4:	f3bf 8f6f 	isb	sy
    54a8:	e7e8      	b.n	547c <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    54aa:	2800      	cmp	r0, #0
    54ac:	d0e6      	beq.n	547c <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    54ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    54b2:	4b33      	ldr	r3, [pc, #204]	; (5580 <xQueueGenericSend+0x1b4>)
    54b4:	601a      	str	r2, [r3, #0]
    54b6:	f3bf 8f4f 	dsb	sy
    54ba:	f3bf 8f6f 	isb	sy
    54be:	e7dd      	b.n	547c <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    54c0:	4b30      	ldr	r3, [pc, #192]	; (5584 <xQueueGenericSend+0x1b8>)
    54c2:	4798      	blx	r3
					return errQUEUE_FULL;
    54c4:	2000      	movs	r0, #0
    54c6:	e7dc      	b.n	5482 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    54c8:	4620      	mov	r0, r4
    54ca:	4b30      	ldr	r3, [pc, #192]	; (558c <xQueueGenericSend+0x1c0>)
    54cc:	4798      	blx	r3
				(void)xTaskResumeAll();
    54ce:	4b30      	ldr	r3, [pc, #192]	; (5590 <xQueueGenericSend+0x1c4>)
    54d0:	4798      	blx	r3
    54d2:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    54d4:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    54d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    54d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    54da:	429a      	cmp	r2, r3
    54dc:	d3ba      	bcc.n	5454 <xQueueGenericSend+0x88>
    54de:	2e02      	cmp	r6, #2
    54e0:	d0b8      	beq.n	5454 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    54e2:	9b01      	ldr	r3, [sp, #4]
    54e4:	2b00      	cmp	r3, #0
    54e6:	d0eb      	beq.n	54c0 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    54e8:	b90d      	cbnz	r5, 54ee <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    54ea:	a802      	add	r0, sp, #8
    54ec:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    54ee:	4b25      	ldr	r3, [pc, #148]	; (5584 <xQueueGenericSend+0x1b8>)
    54f0:	4798      	blx	r3
		vTaskSuspendAll();
    54f2:	4b28      	ldr	r3, [pc, #160]	; (5594 <xQueueGenericSend+0x1c8>)
    54f4:	4798      	blx	r3
		prvLockQueue(pxQueue);
    54f6:	47c0      	blx	r8
    54f8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    54fc:	b25b      	sxtb	r3, r3
    54fe:	f1b3 3fff 	cmp.w	r3, #4294967295
    5502:	bf04      	itt	eq
    5504:	2300      	moveq	r3, #0
    5506:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    550a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    550e:	b25b      	sxtb	r3, r3
    5510:	f1b3 3fff 	cmp.w	r3, #4294967295
    5514:	bf04      	itt	eq
    5516:	2300      	moveq	r3, #0
    5518:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    551c:	4b19      	ldr	r3, [pc, #100]	; (5584 <xQueueGenericSend+0x1b8>)
    551e:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    5520:	a901      	add	r1, sp, #4
    5522:	a802      	add	r0, sp, #8
    5524:	4b1c      	ldr	r3, [pc, #112]	; (5598 <xQueueGenericSend+0x1cc>)
    5526:	4798      	blx	r3
    5528:	b9e0      	cbnz	r0, 5564 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    552a:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    552c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    5530:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    5532:	4b14      	ldr	r3, [pc, #80]	; (5584 <xQueueGenericSend+0x1b8>)
    5534:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    5536:	45ab      	cmp	fp, r5
    5538:	d1c6      	bne.n	54c8 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    553a:	9901      	ldr	r1, [sp, #4]
    553c:	f104 0010 	add.w	r0, r4, #16
    5540:	4b16      	ldr	r3, [pc, #88]	; (559c <xQueueGenericSend+0x1d0>)
    5542:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5544:	4620      	mov	r0, r4
    5546:	4b11      	ldr	r3, [pc, #68]	; (558c <xQueueGenericSend+0x1c0>)
    5548:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    554a:	4b11      	ldr	r3, [pc, #68]	; (5590 <xQueueGenericSend+0x1c4>)
    554c:	4798      	blx	r3
    554e:	2800      	cmp	r0, #0
    5550:	d1bf      	bne.n	54d2 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    5552:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5556:	f8c9 3000 	str.w	r3, [r9]
    555a:	f3bf 8f4f 	dsb	sy
    555e:	f3bf 8f6f 	isb	sy
    5562:	e7b6      	b.n	54d2 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    5564:	4620      	mov	r0, r4
    5566:	4b09      	ldr	r3, [pc, #36]	; (558c <xQueueGenericSend+0x1c0>)
    5568:	4798      	blx	r3
			(void)xTaskResumeAll();
    556a:	4b09      	ldr	r3, [pc, #36]	; (5590 <xQueueGenericSend+0x1c4>)
    556c:	4798      	blx	r3
			return errQUEUE_FULL;
    556e:	2000      	movs	r0, #0
    5570:	e787      	b.n	5482 <xQueueGenericSend+0xb6>
    5572:	bf00      	nop
    5574:	00006331 	.word	0x00006331
    5578:	00005111 	.word	0x00005111
    557c:	00005191 	.word	0x00005191
    5580:	e000ed04 	.word	0xe000ed04
    5584:	00004d59 	.word	0x00004d59
    5588:	000061f1 	.word	0x000061f1
    558c:	0000523d 	.word	0x0000523d
    5590:	00005f51 	.word	0x00005f51
    5594:	00005e09 	.word	0x00005e09
    5598:	00006295 	.word	0x00006295
    559c:	00006171 	.word	0x00006171
    55a0:	00004d15 	.word	0x00004d15
    55a4:	00006281 	.word	0x00006281

000055a8 <xQueueCreateMutex>:
{
    55a8:	b538      	push	{r3, r4, r5, lr}
	pxNewQueue = (Queue_t *)xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType);
    55aa:	4602      	mov	r2, r0
    55ac:	2100      	movs	r1, #0
    55ae:	2001      	movs	r0, #1
    55b0:	4b06      	ldr	r3, [pc, #24]	; (55cc <xQueueCreateMutex+0x24>)
    55b2:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    55b4:	4604      	mov	r4, r0
    55b6:	b138      	cbz	r0, 55c8 <xQueueCreateMutex+0x20>
		pxNewQueue->pxMutexHolder = NULL;
    55b8:	2100      	movs	r1, #0
    55ba:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    55bc:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    55be:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    55c0:	460b      	mov	r3, r1
    55c2:	460a      	mov	r2, r1
    55c4:	4d02      	ldr	r5, [pc, #8]	; (55d0 <xQueueCreateMutex+0x28>)
    55c6:	47a8      	blx	r5
}
    55c8:	4620      	mov	r0, r4
    55ca:	bd38      	pop	{r3, r4, r5, pc}
    55cc:	00005375 	.word	0x00005375
    55d0:	000053cd 	.word	0x000053cd

000055d4 <xQueueGenericSendFromISR>:
{
    55d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    55d8:	2800      	cmp	r0, #0
    55da:	d036      	beq.n	564a <xQueueGenericSendFromISR+0x76>
    55dc:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    55de:	2900      	cmp	r1, #0
    55e0:	d03c      	beq.n	565c <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    55e2:	2b02      	cmp	r3, #2
    55e4:	d046      	beq.n	5674 <xQueueGenericSendFromISR+0xa0>
    55e6:	461f      	mov	r7, r3
    55e8:	4690      	mov	r8, r2
    55ea:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    55ec:	4b37      	ldr	r3, [pc, #220]	; (56cc <xQueueGenericSendFromISR+0xf8>)
    55ee:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    55f0:	f3ef 8611 	mrs	r6, BASEPRI
    55f4:	f04f 0380 	mov.w	r3, #128	; 0x80
    55f8:	f383 8811 	msr	BASEPRI, r3
    55fc:	f3bf 8f6f 	isb	sy
    5600:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    5604:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5606:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5608:	429a      	cmp	r2, r3
    560a:	d301      	bcc.n	5610 <xQueueGenericSendFromISR+0x3c>
    560c:	2f02      	cmp	r7, #2
    560e:	d151      	bne.n	56b4 <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    5610:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    5614:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    5616:	463a      	mov	r2, r7
    5618:	4649      	mov	r1, r9
    561a:	4620      	mov	r0, r4
    561c:	4b2c      	ldr	r3, [pc, #176]	; (56d0 <xQueueGenericSendFromISR+0xfc>)
    561e:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    5620:	f1b5 3fff 	cmp.w	r5, #4294967295
    5624:	d140      	bne.n	56a8 <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    5626:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5628:	b383      	cbz	r3, 568c <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    562a:	4639      	mov	r1, r7
    562c:	4620      	mov	r0, r4
    562e:	4b29      	ldr	r3, [pc, #164]	; (56d4 <xQueueGenericSendFromISR+0x100>)
    5630:	4798      	blx	r3
    5632:	2800      	cmp	r0, #0
    5634:	d040      	beq.n	56b8 <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    5636:	f1b8 0f00 	cmp.w	r8, #0
    563a:	d03f      	beq.n	56bc <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    563c:	2001      	movs	r0, #1
    563e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    5642:	f386 8811 	msr	BASEPRI, r6
}
    5646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    564a:	f04f 0380 	mov.w	r3, #128	; 0x80
    564e:	f383 8811 	msr	BASEPRI, r3
    5652:	f3bf 8f6f 	isb	sy
    5656:	f3bf 8f4f 	dsb	sy
    565a:	e7fe      	b.n	565a <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    565c:	6c00      	ldr	r0, [r0, #64]	; 0x40
    565e:	2800      	cmp	r0, #0
    5660:	d0bf      	beq.n	55e2 <xQueueGenericSendFromISR+0xe>
    5662:	f04f 0380 	mov.w	r3, #128	; 0x80
    5666:	f383 8811 	msr	BASEPRI, r3
    566a:	f3bf 8f6f 	isb	sy
    566e:	f3bf 8f4f 	dsb	sy
    5672:	e7fe      	b.n	5672 <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    5674:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    5676:	2801      	cmp	r0, #1
    5678:	d0b5      	beq.n	55e6 <xQueueGenericSendFromISR+0x12>
    567a:	f04f 0380 	mov.w	r3, #128	; 0x80
    567e:	f383 8811 	msr	BASEPRI, r3
    5682:	f3bf 8f6f 	isb	sy
    5686:	f3bf 8f4f 	dsb	sy
    568a:	e7fe      	b.n	568a <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    568c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    568e:	b1bb      	cbz	r3, 56c0 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    5690:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5694:	4b10      	ldr	r3, [pc, #64]	; (56d8 <xQueueGenericSendFromISR+0x104>)
    5696:	4798      	blx	r3
    5698:	b1a0      	cbz	r0, 56c4 <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    569a:	f1b8 0f00 	cmp.w	r8, #0
    569e:	d013      	beq.n	56c8 <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    56a0:	2001      	movs	r0, #1
    56a2:	f8c8 0000 	str.w	r0, [r8]
    56a6:	e7cc      	b.n	5642 <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    56a8:	1c6b      	adds	r3, r5, #1
    56aa:	b25b      	sxtb	r3, r3
    56ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    56b0:	2001      	movs	r0, #1
    56b2:	e7c6      	b.n	5642 <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    56b4:	2000      	movs	r0, #0
    56b6:	e7c4      	b.n	5642 <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    56b8:	2001      	movs	r0, #1
    56ba:	e7c2      	b.n	5642 <xQueueGenericSendFromISR+0x6e>
    56bc:	2001      	movs	r0, #1
    56be:	e7c0      	b.n	5642 <xQueueGenericSendFromISR+0x6e>
    56c0:	2001      	movs	r0, #1
    56c2:	e7be      	b.n	5642 <xQueueGenericSendFromISR+0x6e>
    56c4:	2001      	movs	r0, #1
    56c6:	e7bc      	b.n	5642 <xQueueGenericSendFromISR+0x6e>
    56c8:	2001      	movs	r0, #1
    56ca:	e7ba      	b.n	5642 <xQueueGenericSendFromISR+0x6e>
    56cc:	00004f6d 	.word	0x00004f6d
    56d0:	00005111 	.word	0x00005111
    56d4:	00005191 	.word	0x00005191
    56d8:	000061f1 	.word	0x000061f1

000056dc <xQueueReceive>:
{
    56dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    56e0:	b084      	sub	sp, #16
    56e2:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    56e4:	b180      	cbz	r0, 5708 <xQueueReceive+0x2c>
    56e6:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    56e8:	b1b9      	cbz	r1, 571a <xQueueReceive+0x3e>
    56ea:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    56ec:	4b50      	ldr	r3, [pc, #320]	; (5830 <xQueueReceive+0x154>)
    56ee:	4798      	blx	r3
    56f0:	b9f8      	cbnz	r0, 5732 <xQueueReceive+0x56>
    56f2:	9b01      	ldr	r3, [sp, #4]
    56f4:	b32b      	cbz	r3, 5742 <xQueueReceive+0x66>
    56f6:	f04f 0380 	mov.w	r3, #128	; 0x80
    56fa:	f383 8811 	msr	BASEPRI, r3
    56fe:	f3bf 8f6f 	isb	sy
    5702:	f3bf 8f4f 	dsb	sy
    5706:	e7fe      	b.n	5706 <xQueueReceive+0x2a>
    5708:	f04f 0380 	mov.w	r3, #128	; 0x80
    570c:	f383 8811 	msr	BASEPRI, r3
    5710:	f3bf 8f6f 	isb	sy
    5714:	f3bf 8f4f 	dsb	sy
    5718:	e7fe      	b.n	5718 <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    571a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    571c:	2b00      	cmp	r3, #0
    571e:	d0e4      	beq.n	56ea <xQueueReceive+0xe>
    5720:	f04f 0380 	mov.w	r3, #128	; 0x80
    5724:	f383 8811 	msr	BASEPRI, r3
    5728:	f3bf 8f6f 	isb	sy
    572c:	f3bf 8f4f 	dsb	sy
    5730:	e7fe      	b.n	5730 <xQueueReceive+0x54>
    5732:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    5734:	f8df 8124 	ldr.w	r8, [pc, #292]	; 585c <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5738:	f8df a124 	ldr.w	sl, [pc, #292]	; 5860 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    573c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 583c <xQueueReceive+0x160>
    5740:	e029      	b.n	5796 <xQueueReceive+0xba>
    5742:	2700      	movs	r7, #0
    5744:	e7f6      	b.n	5734 <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    5746:	4631      	mov	r1, r6
    5748:	4620      	mov	r0, r4
    574a:	4b3a      	ldr	r3, [pc, #232]	; (5834 <xQueueReceive+0x158>)
    574c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    574e:	3d01      	subs	r5, #1
    5750:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5752:	6923      	ldr	r3, [r4, #16]
    5754:	b163      	cbz	r3, 5770 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5756:	f104 0010 	add.w	r0, r4, #16
    575a:	4b37      	ldr	r3, [pc, #220]	; (5838 <xQueueReceive+0x15c>)
    575c:	4798      	blx	r3
    575e:	b138      	cbz	r0, 5770 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    5760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5764:	4b35      	ldr	r3, [pc, #212]	; (583c <xQueueReceive+0x160>)
    5766:	601a      	str	r2, [r3, #0]
    5768:	f3bf 8f4f 	dsb	sy
    576c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    5770:	4b33      	ldr	r3, [pc, #204]	; (5840 <xQueueReceive+0x164>)
    5772:	4798      	blx	r3
				return pdPASS;
    5774:	2001      	movs	r0, #1
}
    5776:	b004      	add	sp, #16
    5778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    577c:	4b30      	ldr	r3, [pc, #192]	; (5840 <xQueueReceive+0x164>)
    577e:	4798      	blx	r3
					return errQUEUE_EMPTY;
    5780:	2000      	movs	r0, #0
    5782:	e7f8      	b.n	5776 <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5784:	a802      	add	r0, sp, #8
    5786:	47d0      	blx	sl
    5788:	e00e      	b.n	57a8 <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    578a:	4620      	mov	r0, r4
    578c:	4b2d      	ldr	r3, [pc, #180]	; (5844 <xQueueReceive+0x168>)
    578e:	4798      	blx	r3
				(void)xTaskResumeAll();
    5790:	4b2d      	ldr	r3, [pc, #180]	; (5848 <xQueueReceive+0x16c>)
    5792:	4798      	blx	r3
    5794:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    5796:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5798:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    579a:	2d00      	cmp	r5, #0
    579c:	d1d3      	bne.n	5746 <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    579e:	9b01      	ldr	r3, [sp, #4]
    57a0:	2b00      	cmp	r3, #0
    57a2:	d0eb      	beq.n	577c <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    57a4:	2f00      	cmp	r7, #0
    57a6:	d0ed      	beq.n	5784 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    57a8:	4b25      	ldr	r3, [pc, #148]	; (5840 <xQueueReceive+0x164>)
    57aa:	4798      	blx	r3
		vTaskSuspendAll();
    57ac:	4b27      	ldr	r3, [pc, #156]	; (584c <xQueueReceive+0x170>)
    57ae:	4798      	blx	r3
		prvLockQueue(pxQueue);
    57b0:	47c0      	blx	r8
    57b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    57b6:	b25b      	sxtb	r3, r3
    57b8:	f1b3 3fff 	cmp.w	r3, #4294967295
    57bc:	bf04      	itt	eq
    57be:	2300      	moveq	r3, #0
    57c0:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    57c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    57c8:	b25b      	sxtb	r3, r3
    57ca:	f1b3 3fff 	cmp.w	r3, #4294967295
    57ce:	bf04      	itt	eq
    57d0:	2300      	moveq	r3, #0
    57d2:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    57d6:	4b1a      	ldr	r3, [pc, #104]	; (5840 <xQueueReceive+0x164>)
    57d8:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    57da:	a901      	add	r1, sp, #4
    57dc:	a802      	add	r0, sp, #8
    57de:	4b1c      	ldr	r3, [pc, #112]	; (5850 <xQueueReceive+0x174>)
    57e0:	4798      	blx	r3
    57e2:	b9c8      	cbnz	r0, 5818 <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    57e4:	4620      	mov	r0, r4
    57e6:	4b1b      	ldr	r3, [pc, #108]	; (5854 <xQueueReceive+0x178>)
    57e8:	4798      	blx	r3
    57ea:	2800      	cmp	r0, #0
    57ec:	d0cd      	beq.n	578a <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    57ee:	9901      	ldr	r1, [sp, #4]
    57f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    57f4:	4b18      	ldr	r3, [pc, #96]	; (5858 <xQueueReceive+0x17c>)
    57f6:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    57f8:	4620      	mov	r0, r4
    57fa:	4b12      	ldr	r3, [pc, #72]	; (5844 <xQueueReceive+0x168>)
    57fc:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    57fe:	4b12      	ldr	r3, [pc, #72]	; (5848 <xQueueReceive+0x16c>)
    5800:	4798      	blx	r3
    5802:	2800      	cmp	r0, #0
    5804:	d1c6      	bne.n	5794 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    5806:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    580a:	f8c9 3000 	str.w	r3, [r9]
    580e:	f3bf 8f4f 	dsb	sy
    5812:	f3bf 8f6f 	isb	sy
    5816:	e7bd      	b.n	5794 <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    5818:	4620      	mov	r0, r4
    581a:	4b0a      	ldr	r3, [pc, #40]	; (5844 <xQueueReceive+0x168>)
    581c:	4798      	blx	r3
			(void)xTaskResumeAll();
    581e:	4b0a      	ldr	r3, [pc, #40]	; (5848 <xQueueReceive+0x16c>)
    5820:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5822:	4620      	mov	r0, r4
    5824:	4b0b      	ldr	r3, [pc, #44]	; (5854 <xQueueReceive+0x178>)
    5826:	4798      	blx	r3
    5828:	2800      	cmp	r0, #0
    582a:	d0b3      	beq.n	5794 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    582c:	2000      	movs	r0, #0
    582e:	e7a2      	b.n	5776 <xQueueReceive+0x9a>
    5830:	00006331 	.word	0x00006331
    5834:	00005215 	.word	0x00005215
    5838:	000061f1 	.word	0x000061f1
    583c:	e000ed04 	.word	0xe000ed04
    5840:	00004d59 	.word	0x00004d59
    5844:	0000523d 	.word	0x0000523d
    5848:	00005f51 	.word	0x00005f51
    584c:	00005e09 	.word	0x00005e09
    5850:	00006295 	.word	0x00006295
    5854:	000050f1 	.word	0x000050f1
    5858:	00006171 	.word	0x00006171
    585c:	00004d15 	.word	0x00004d15
    5860:	00006281 	.word	0x00006281

00005864 <xQueueSemaphoreTake>:
{
    5864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5868:	b085      	sub	sp, #20
    586a:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    586c:	b158      	cbz	r0, 5886 <xQueueSemaphoreTake+0x22>
    586e:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    5870:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5872:	b18b      	cbz	r3, 5898 <xQueueSemaphoreTake+0x34>
    5874:	f04f 0380 	mov.w	r3, #128	; 0x80
    5878:	f383 8811 	msr	BASEPRI, r3
    587c:	f3bf 8f6f 	isb	sy
    5880:	f3bf 8f4f 	dsb	sy
    5884:	e7fe      	b.n	5884 <xQueueSemaphoreTake+0x20>
    5886:	f04f 0380 	mov.w	r3, #128	; 0x80
    588a:	f383 8811 	msr	BASEPRI, r3
    588e:	f3bf 8f6f 	isb	sy
    5892:	f3bf 8f4f 	dsb	sy
    5896:	e7fe      	b.n	5896 <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    5898:	4b5b      	ldr	r3, [pc, #364]	; (5a08 <xQueueSemaphoreTake+0x1a4>)
    589a:	4798      	blx	r3
    589c:	b950      	cbnz	r0, 58b4 <xQueueSemaphoreTake+0x50>
    589e:	9b01      	ldr	r3, [sp, #4]
    58a0:	b183      	cbz	r3, 58c4 <xQueueSemaphoreTake+0x60>
    58a2:	f04f 0380 	mov.w	r3, #128	; 0x80
    58a6:	f383 8811 	msr	BASEPRI, r3
    58aa:	f3bf 8f6f 	isb	sy
    58ae:	f3bf 8f4f 	dsb	sy
    58b2:	e7fe      	b.n	58b2 <xQueueSemaphoreTake+0x4e>
    58b4:	2500      	movs	r5, #0
    58b6:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    58b8:	4e54      	ldr	r6, [pc, #336]	; (5a0c <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    58ba:	f8df 9184 	ldr.w	r9, [pc, #388]	; 5a40 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    58be:	f8df 8158 	ldr.w	r8, [pc, #344]	; 5a18 <xQueueSemaphoreTake+0x1b4>
    58c2:	e048      	b.n	5956 <xQueueSemaphoreTake+0xf2>
    58c4:	2500      	movs	r5, #0
    58c6:	462f      	mov	r7, r5
    58c8:	e7f6      	b.n	58b8 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    58ca:	3b01      	subs	r3, #1
    58cc:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    58ce:	6823      	ldr	r3, [r4, #0]
    58d0:	b913      	cbnz	r3, 58d8 <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    58d2:	4b4f      	ldr	r3, [pc, #316]	; (5a10 <xQueueSemaphoreTake+0x1ac>)
    58d4:	4798      	blx	r3
    58d6:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    58d8:	6923      	ldr	r3, [r4, #16]
    58da:	b163      	cbz	r3, 58f6 <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    58dc:	f104 0010 	add.w	r0, r4, #16
    58e0:	4b4c      	ldr	r3, [pc, #304]	; (5a14 <xQueueSemaphoreTake+0x1b0>)
    58e2:	4798      	blx	r3
    58e4:	b138      	cbz	r0, 58f6 <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    58e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    58ea:	4b4b      	ldr	r3, [pc, #300]	; (5a18 <xQueueSemaphoreTake+0x1b4>)
    58ec:	601a      	str	r2, [r3, #0]
    58ee:	f3bf 8f4f 	dsb	sy
    58f2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    58f6:	4b49      	ldr	r3, [pc, #292]	; (5a1c <xQueueSemaphoreTake+0x1b8>)
    58f8:	4798      	blx	r3
				return pdPASS;
    58fa:	2501      	movs	r5, #1
}
    58fc:	4628      	mov	r0, r5
    58fe:	b005      	add	sp, #20
    5900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    5904:	b145      	cbz	r5, 5918 <xQueueSemaphoreTake+0xb4>
    5906:	f04f 0380 	mov.w	r3, #128	; 0x80
    590a:	f383 8811 	msr	BASEPRI, r3
    590e:	f3bf 8f6f 	isb	sy
    5912:	f3bf 8f4f 	dsb	sy
    5916:	e7fe      	b.n	5916 <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    5918:	4b40      	ldr	r3, [pc, #256]	; (5a1c <xQueueSemaphoreTake+0x1b8>)
    591a:	4798      	blx	r3
					return errQUEUE_EMPTY;
    591c:	e7ee      	b.n	58fc <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    591e:	a802      	add	r0, sp, #8
    5920:	47c8      	blx	r9
    5922:	e021      	b.n	5968 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    5924:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    5926:	6860      	ldr	r0, [r4, #4]
    5928:	4b3d      	ldr	r3, [pc, #244]	; (5a20 <xQueueSemaphoreTake+0x1bc>)
    592a:	4798      	blx	r3
    592c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    592e:	4b3b      	ldr	r3, [pc, #236]	; (5a1c <xQueueSemaphoreTake+0x1b8>)
    5930:	4798      	blx	r3
    5932:	e040      	b.n	59b6 <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    5934:	4620      	mov	r0, r4
    5936:	4b3b      	ldr	r3, [pc, #236]	; (5a24 <xQueueSemaphoreTake+0x1c0>)
    5938:	4798      	blx	r3
				(void)xTaskResumeAll();
    593a:	4b3b      	ldr	r3, [pc, #236]	; (5a28 <xQueueSemaphoreTake+0x1c4>)
    593c:	4798      	blx	r3
    593e:	e009      	b.n	5954 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    5940:	4620      	mov	r0, r4
    5942:	4b38      	ldr	r3, [pc, #224]	; (5a24 <xQueueSemaphoreTake+0x1c0>)
    5944:	4798      	blx	r3
			(void)xTaskResumeAll();
    5946:	4b38      	ldr	r3, [pc, #224]	; (5a28 <xQueueSemaphoreTake+0x1c4>)
    5948:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    594a:	4620      	mov	r0, r4
    594c:	4b37      	ldr	r3, [pc, #220]	; (5a2c <xQueueSemaphoreTake+0x1c8>)
    594e:	4798      	blx	r3
    5950:	2800      	cmp	r0, #0
    5952:	d145      	bne.n	59e0 <xQueueSemaphoreTake+0x17c>
    5954:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    5956:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    5958:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    595a:	2b00      	cmp	r3, #0
    595c:	d1b5      	bne.n	58ca <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    595e:	9b01      	ldr	r3, [sp, #4]
    5960:	2b00      	cmp	r3, #0
    5962:	d0cf      	beq.n	5904 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    5964:	2f00      	cmp	r7, #0
    5966:	d0da      	beq.n	591e <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    5968:	4b2c      	ldr	r3, [pc, #176]	; (5a1c <xQueueSemaphoreTake+0x1b8>)
    596a:	4798      	blx	r3
		vTaskSuspendAll();
    596c:	4b30      	ldr	r3, [pc, #192]	; (5a30 <xQueueSemaphoreTake+0x1cc>)
    596e:	4798      	blx	r3
		prvLockQueue(pxQueue);
    5970:	47b0      	blx	r6
    5972:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5976:	b25b      	sxtb	r3, r3
    5978:	f1b3 3fff 	cmp.w	r3, #4294967295
    597c:	bf04      	itt	eq
    597e:	2300      	moveq	r3, #0
    5980:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5984:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5988:	b25b      	sxtb	r3, r3
    598a:	f1b3 3fff 	cmp.w	r3, #4294967295
    598e:	bf04      	itt	eq
    5990:	2300      	moveq	r3, #0
    5992:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5996:	4b21      	ldr	r3, [pc, #132]	; (5a1c <xQueueSemaphoreTake+0x1b8>)
    5998:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    599a:	a901      	add	r1, sp, #4
    599c:	a802      	add	r0, sp, #8
    599e:	4b25      	ldr	r3, [pc, #148]	; (5a34 <xQueueSemaphoreTake+0x1d0>)
    59a0:	4798      	blx	r3
    59a2:	2800      	cmp	r0, #0
    59a4:	d1cc      	bne.n	5940 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    59a6:	4620      	mov	r0, r4
    59a8:	4b20      	ldr	r3, [pc, #128]	; (5a2c <xQueueSemaphoreTake+0x1c8>)
    59aa:	4798      	blx	r3
    59ac:	2800      	cmp	r0, #0
    59ae:	d0c1      	beq.n	5934 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    59b0:	6823      	ldr	r3, [r4, #0]
    59b2:	2b00      	cmp	r3, #0
    59b4:	d0b6      	beq.n	5924 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    59b6:	9901      	ldr	r1, [sp, #4]
    59b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    59bc:	4b1e      	ldr	r3, [pc, #120]	; (5a38 <xQueueSemaphoreTake+0x1d4>)
    59be:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    59c0:	4620      	mov	r0, r4
    59c2:	4b18      	ldr	r3, [pc, #96]	; (5a24 <xQueueSemaphoreTake+0x1c0>)
    59c4:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    59c6:	4b18      	ldr	r3, [pc, #96]	; (5a28 <xQueueSemaphoreTake+0x1c4>)
    59c8:	4798      	blx	r3
    59ca:	2800      	cmp	r0, #0
    59cc:	d1c2      	bne.n	5954 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    59ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    59d2:	f8c8 3000 	str.w	r3, [r8]
    59d6:	f3bf 8f4f 	dsb	sy
    59da:	f3bf 8f6f 	isb	sy
    59de:	e7b9      	b.n	5954 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    59e0:	2d00      	cmp	r5, #0
    59e2:	d08b      	beq.n	58fc <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    59e4:	4b09      	ldr	r3, [pc, #36]	; (5a0c <xQueueSemaphoreTake+0x1a8>)
    59e6:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    59e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    59ea:	b153      	cbz	r3, 5a02 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    59ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
    59ee:	6819      	ldr	r1, [r3, #0]
    59f0:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    59f4:	6860      	ldr	r0, [r4, #4]
    59f6:	4b11      	ldr	r3, [pc, #68]	; (5a3c <xQueueSemaphoreTake+0x1d8>)
    59f8:	4798      	blx	r3
						taskEXIT_CRITICAL();
    59fa:	4b08      	ldr	r3, [pc, #32]	; (5a1c <xQueueSemaphoreTake+0x1b8>)
    59fc:	4798      	blx	r3
				return errQUEUE_EMPTY;
    59fe:	2500      	movs	r5, #0
    5a00:	e77c      	b.n	58fc <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    5a02:	2100      	movs	r1, #0
    5a04:	e7f6      	b.n	59f4 <xQueueSemaphoreTake+0x190>
    5a06:	bf00      	nop
    5a08:	00006331 	.word	0x00006331
    5a0c:	00004d15 	.word	0x00004d15
    5a10:	0000653d 	.word	0x0000653d
    5a14:	000061f1 	.word	0x000061f1
    5a18:	e000ed04 	.word	0xe000ed04
    5a1c:	00004d59 	.word	0x00004d59
    5a20:	00006351 	.word	0x00006351
    5a24:	0000523d 	.word	0x0000523d
    5a28:	00005f51 	.word	0x00005f51
    5a2c:	000050f1 	.word	0x000050f1
    5a30:	00005e09 	.word	0x00005e09
    5a34:	00006295 	.word	0x00006295
    5a38:	00006171 	.word	0x00006171
    5a3c:	00006491 	.word	0x00006491
    5a40:	00006281 	.word	0x00006281

00005a44 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    5a44:	b940      	cbnz	r0, 5a58 <uxQueueMessagesWaiting+0x14>
    5a46:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a4a:	f383 8811 	msr	BASEPRI, r3
    5a4e:	f3bf 8f6f 	isb	sy
    5a52:	f3bf 8f4f 	dsb	sy
    5a56:	e7fe      	b.n	5a56 <uxQueueMessagesWaiting+0x12>
{
    5a58:	b510      	push	{r4, lr}
    5a5a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    5a5c:	4b03      	ldr	r3, [pc, #12]	; (5a6c <uxQueueMessagesWaiting+0x28>)
    5a5e:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    5a60:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    5a62:	4b03      	ldr	r3, [pc, #12]	; (5a70 <uxQueueMessagesWaiting+0x2c>)
    5a64:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    5a66:	4620      	mov	r0, r4
    5a68:	bd10      	pop	{r4, pc}
    5a6a:	bf00      	nop
    5a6c:	00004d15 	.word	0x00004d15
    5a70:	00004d59 	.word	0x00004d59

00005a74 <vQueueWaitForMessageRestricted>:
{
    5a74:	b570      	push	{r4, r5, r6, lr}
    5a76:	4604      	mov	r4, r0
    5a78:	460d      	mov	r5, r1
    5a7a:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    5a7c:	4b11      	ldr	r3, [pc, #68]	; (5ac4 <vQueueWaitForMessageRestricted+0x50>)
    5a7e:	4798      	blx	r3
    5a80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5a84:	b25b      	sxtb	r3, r3
    5a86:	f1b3 3fff 	cmp.w	r3, #4294967295
    5a8a:	bf04      	itt	eq
    5a8c:	2300      	moveq	r3, #0
    5a8e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5a92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5a96:	b25b      	sxtb	r3, r3
    5a98:	f1b3 3fff 	cmp.w	r3, #4294967295
    5a9c:	bf04      	itt	eq
    5a9e:	2300      	moveq	r3, #0
    5aa0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5aa4:	4b08      	ldr	r3, [pc, #32]	; (5ac8 <vQueueWaitForMessageRestricted+0x54>)
    5aa6:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    5aa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5aaa:	b11b      	cbz	r3, 5ab4 <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    5aac:	4620      	mov	r0, r4
    5aae:	4b07      	ldr	r3, [pc, #28]	; (5acc <vQueueWaitForMessageRestricted+0x58>)
    5ab0:	4798      	blx	r3
    5ab2:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    5ab4:	4632      	mov	r2, r6
    5ab6:	4629      	mov	r1, r5
    5ab8:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5abc:	4b04      	ldr	r3, [pc, #16]	; (5ad0 <vQueueWaitForMessageRestricted+0x5c>)
    5abe:	4798      	blx	r3
    5ac0:	e7f4      	b.n	5aac <vQueueWaitForMessageRestricted+0x38>
    5ac2:	bf00      	nop
    5ac4:	00004d15 	.word	0x00004d15
    5ac8:	00004d59 	.word	0x00004d59
    5acc:	0000523d 	.word	0x0000523d
    5ad0:	000061ad 	.word	0x000061ad

00005ad4 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5ad4:	4a06      	ldr	r2, [pc, #24]	; (5af0 <prvIdleTask+0x1c>)
				taskYIELD();
    5ad6:	4807      	ldr	r0, [pc, #28]	; (5af4 <prvIdleTask+0x20>)
    5ad8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5adc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5ade:	2b01      	cmp	r3, #1
    5ae0:	d9fc      	bls.n	5adc <prvIdleTask+0x8>
				taskYIELD();
    5ae2:	6001      	str	r1, [r0, #0]
    5ae4:	f3bf 8f4f 	dsb	sy
    5ae8:	f3bf 8f6f 	isb	sy
    5aec:	e7f6      	b.n	5adc <prvIdleTask+0x8>
    5aee:	bf00      	nop
    5af0:	20003410 	.word	0x20003410
    5af4:	e000ed04 	.word	0xe000ed04

00005af8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5af8:	4b09      	ldr	r3, [pc, #36]	; (5b20 <prvResetNextTaskUnblockTime+0x28>)
    5afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    5afe:	681b      	ldr	r3, [r3, #0]
    5b00:	b143      	cbz	r3, 5b14 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5b02:	4b07      	ldr	r3, [pc, #28]	; (5b20 <prvResetNextTaskUnblockTime+0x28>)
    5b04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    5b08:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    5b0a:	68d2      	ldr	r2, [r2, #12]
    5b0c:	6852      	ldr	r2, [r2, #4]
    5b0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5b12:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    5b14:	f04f 32ff 	mov.w	r2, #4294967295
    5b18:	4b01      	ldr	r3, [pc, #4]	; (5b20 <prvResetNextTaskUnblockTime+0x28>)
    5b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5b1e:	4770      	bx	lr
    5b20:	20003410 	.word	0x20003410

00005b24 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    5b24:	b570      	push	{r4, r5, r6, lr}
    5b26:	4604      	mov	r4, r0
    5b28:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    5b2a:	4b1a      	ldr	r3, [pc, #104]	; (5b94 <prvAddCurrentTaskToDelayedList+0x70>)
    5b2c:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    5b30:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    5b34:	3004      	adds	r0, #4
    5b36:	4b18      	ldr	r3, [pc, #96]	; (5b98 <prvAddCurrentTaskToDelayedList+0x74>)
    5b38:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    5b3a:	f1b4 3fff 	cmp.w	r4, #4294967295
    5b3e:	d016      	beq.n	5b6e <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5b40:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    5b42:	4b14      	ldr	r3, [pc, #80]	; (5b94 <prvAddCurrentTaskToDelayedList+0x70>)
    5b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5b48:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    5b4a:	42a5      	cmp	r5, r4
    5b4c:	d818      	bhi.n	5b80 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    5b4e:	4d11      	ldr	r5, [pc, #68]	; (5b94 <prvAddCurrentTaskToDelayedList+0x70>)
    5b50:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    5b54:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    5b58:	3104      	adds	r1, #4
    5b5a:	4b10      	ldr	r3, [pc, #64]	; (5b9c <prvAddCurrentTaskToDelayedList+0x78>)
    5b5c:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    5b5e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    5b62:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    5b64:	bf3c      	itt	cc
    5b66:	462b      	movcc	r3, r5
    5b68:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    5b6c:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    5b6e:	2e00      	cmp	r6, #0
    5b70:	d0e6      	beq.n	5b40 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    5b72:	4808      	ldr	r0, [pc, #32]	; (5b94 <prvAddCurrentTaskToDelayedList+0x70>)
    5b74:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    5b78:	3104      	adds	r1, #4
    5b7a:	4b09      	ldr	r3, [pc, #36]	; (5ba0 <prvAddCurrentTaskToDelayedList+0x7c>)
    5b7c:	4798      	blx	r3
    5b7e:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    5b80:	4b04      	ldr	r3, [pc, #16]	; (5b94 <prvAddCurrentTaskToDelayedList+0x70>)
    5b82:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    5b86:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    5b8a:	3104      	adds	r1, #4
    5b8c:	4b03      	ldr	r3, [pc, #12]	; (5b9c <prvAddCurrentTaskToDelayedList+0x78>)
    5b8e:	4798      	blx	r3
    5b90:	bd70      	pop	{r4, r5, r6, pc}
    5b92:	bf00      	nop
    5b94:	20003410 	.word	0x20003410
    5b98:	00004c21 	.word	0x00004c21
    5b9c:	00004bed 	.word	0x00004bed
    5ba0:	00004bd5 	.word	0x00004bd5

00005ba4 <xTaskCreate>:
{
    5ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ba8:	b083      	sub	sp, #12
    5baa:	4683      	mov	fp, r0
    5bac:	460d      	mov	r5, r1
    5bae:	9301      	str	r3, [sp, #4]
    5bb0:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    5bb4:	0096      	lsls	r6, r2, #2
    5bb6:	4630      	mov	r0, r6
    5bb8:	4b66      	ldr	r3, [pc, #408]	; (5d54 <xTaskCreate+0x1b0>)
    5bba:	4798      	blx	r3
		if (pxStack != NULL) {
    5bbc:	2800      	cmp	r0, #0
    5bbe:	f000 8096 	beq.w	5cee <xTaskCreate+0x14a>
    5bc2:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    5bc4:	2054      	movs	r0, #84	; 0x54
    5bc6:	4b63      	ldr	r3, [pc, #396]	; (5d54 <xTaskCreate+0x1b0>)
    5bc8:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    5bca:	4604      	mov	r4, r0
    5bcc:	2800      	cmp	r0, #0
    5bce:	f000 808b 	beq.w	5ce8 <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    5bd2:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    5bd4:	4632      	mov	r2, r6
    5bd6:	21a5      	movs	r1, #165	; 0xa5
    5bd8:	4638      	mov	r0, r7
    5bda:	4b5f      	ldr	r3, [pc, #380]	; (5d58 <xTaskCreate+0x1b4>)
    5bdc:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    5bde:	3e04      	subs	r6, #4
    5be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5be2:	441e      	add	r6, r3
		                      & (~(
    5be4:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    5be8:	782b      	ldrb	r3, [r5, #0]
    5bea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    5bee:	782b      	ldrb	r3, [r5, #0]
    5bf0:	b15b      	cbz	r3, 5c0a <xTaskCreate+0x66>
    5bf2:	462b      	mov	r3, r5
    5bf4:	f104 0235 	add.w	r2, r4, #53	; 0x35
    5bf8:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    5bfa:	7858      	ldrb	r0, [r3, #1]
    5bfc:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    5c00:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    5c04:	b108      	cbz	r0, 5c0a <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    5c06:	4299      	cmp	r1, r3
    5c08:	d1f7      	bne.n	5bfa <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    5c0a:	2700      	movs	r7, #0
    5c0c:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    5c10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5c12:	2d04      	cmp	r5, #4
    5c14:	bf28      	it	cs
    5c16:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    5c18:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    5c1a:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    5c1c:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    5c1e:	f104 0804 	add.w	r8, r4, #4
    5c22:	4640      	mov	r0, r8
    5c24:	f8df 9154 	ldr.w	r9, [pc, #340]	; 5d7c <xTaskCreate+0x1d8>
    5c28:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    5c2a:	f104 0018 	add.w	r0, r4, #24
    5c2e:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    5c30:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    5c32:	f1c5 0505 	rsb	r5, r5, #5
    5c36:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    5c38:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    5c3a:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    5c3c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    5c40:	9a01      	ldr	r2, [sp, #4]
    5c42:	4659      	mov	r1, fp
    5c44:	4630      	mov	r0, r6
    5c46:	4b45      	ldr	r3, [pc, #276]	; (5d5c <xTaskCreate+0x1b8>)
    5c48:	4798      	blx	r3
    5c4a:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    5c4c:	f1ba 0f00 	cmp.w	sl, #0
    5c50:	d001      	beq.n	5c56 <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    5c52:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    5c56:	4b42      	ldr	r3, [pc, #264]	; (5d60 <xTaskCreate+0x1bc>)
    5c58:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    5c5a:	4b42      	ldr	r3, [pc, #264]	; (5d64 <xTaskCreate+0x1c0>)
    5c5c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    5c60:	3201      	adds	r2, #1
    5c62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    5c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5c6a:	2b00      	cmp	r3, #0
    5c6c:	d042      	beq.n	5cf4 <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    5c6e:	4b3d      	ldr	r3, [pc, #244]	; (5d64 <xTaskCreate+0x1c0>)
    5c70:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    5c74:	b94b      	cbnz	r3, 5c8a <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    5c76:	4b3b      	ldr	r3, [pc, #236]	; (5d64 <xTaskCreate+0x1c0>)
    5c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5c7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5c80:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    5c82:	bf9c      	itt	ls
    5c84:	4b37      	ldrls	r3, [pc, #220]	; (5d64 <xTaskCreate+0x1c0>)
    5c86:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    5c8a:	4a36      	ldr	r2, [pc, #216]	; (5d64 <xTaskCreate+0x1c0>)
    5c8c:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    5c90:	3301      	adds	r3, #1
    5c92:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    5c96:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    5c98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5c9a:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    5c9e:	4293      	cmp	r3, r2
    5ca0:	bf84      	itt	hi
    5ca2:	4a30      	ldrhi	r2, [pc, #192]	; (5d64 <xTaskCreate+0x1c0>)
    5ca4:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    5ca8:	4d2e      	ldr	r5, [pc, #184]	; (5d64 <xTaskCreate+0x1c0>)
    5caa:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5cae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5cb2:	4641      	mov	r1, r8
    5cb4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5cb8:	4b2b      	ldr	r3, [pc, #172]	; (5d68 <xTaskCreate+0x1c4>)
    5cba:	4798      	blx	r3
	taskEXIT_CRITICAL();
    5cbc:	4b2b      	ldr	r3, [pc, #172]	; (5d6c <xTaskCreate+0x1c8>)
    5cbe:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    5cc0:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	d03f      	beq.n	5d48 <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    5cc8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5cce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5cd0:	429a      	cmp	r2, r3
    5cd2:	d23d      	bcs.n	5d50 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    5cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5cd8:	4b25      	ldr	r3, [pc, #148]	; (5d70 <xTaskCreate+0x1cc>)
    5cda:	601a      	str	r2, [r3, #0]
    5cdc:	f3bf 8f4f 	dsb	sy
    5ce0:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    5ce4:	2001      	movs	r0, #1
    5ce6:	e030      	b.n	5d4a <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    5ce8:	4638      	mov	r0, r7
    5cea:	4b22      	ldr	r3, [pc, #136]	; (5d74 <xTaskCreate+0x1d0>)
    5cec:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    5cee:	f04f 30ff 	mov.w	r0, #4294967295
    5cf2:	e02a      	b.n	5d4a <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    5cf4:	4b1b      	ldr	r3, [pc, #108]	; (5d64 <xTaskCreate+0x1c0>)
    5cf6:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    5cfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5cfe:	2b01      	cmp	r3, #1
    5d00:	d1c3      	bne.n	5c8a <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    5d02:	4d18      	ldr	r5, [pc, #96]	; (5d64 <xTaskCreate+0x1c0>)
    5d04:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5d08:	4e1b      	ldr	r6, [pc, #108]	; (5d78 <xTaskCreate+0x1d4>)
    5d0a:	47b0      	blx	r6
    5d0c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    5d10:	47b0      	blx	r6
    5d12:	f105 0050 	add.w	r0, r5, #80	; 0x50
    5d16:	47b0      	blx	r6
    5d18:	f105 0064 	add.w	r0, r5, #100	; 0x64
    5d1c:	47b0      	blx	r6
    5d1e:	f105 0078 	add.w	r0, r5, #120	; 0x78
    5d22:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    5d24:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    5d28:	4648      	mov	r0, r9
    5d2a:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    5d2c:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    5d30:	4638      	mov	r0, r7
    5d32:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    5d34:	f105 0014 	add.w	r0, r5, #20
    5d38:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    5d3a:	4628      	mov	r0, r5
    5d3c:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    5d3e:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5d42:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    5d46:	e7a0      	b.n	5c8a <xTaskCreate+0xe6>
		xReturn = pdPASS;
    5d48:	2001      	movs	r0, #1
}
    5d4a:	b003      	add	sp, #12
    5d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    5d50:	2001      	movs	r0, #1
	return xReturn;
    5d52:	e7fa      	b.n	5d4a <xTaskCreate+0x1a6>
    5d54:	00004fc5 	.word	0x00004fc5
    5d58:	00006c33 	.word	0x00006c33
    5d5c:	00004cc5 	.word	0x00004cc5
    5d60:	00004d15 	.word	0x00004d15
    5d64:	20003410 	.word	0x20003410
    5d68:	00004bd5 	.word	0x00004bd5
    5d6c:	00004d59 	.word	0x00004d59
    5d70:	e000ed04 	.word	0xe000ed04
    5d74:	000050a5 	.word	0x000050a5
    5d78:	00004bb9 	.word	0x00004bb9
    5d7c:	00004bcf 	.word	0x00004bcf

00005d80 <vTaskStartScheduler>:
{
    5d80:	b510      	push	{r4, lr}
    5d82:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    5d84:	4b19      	ldr	r3, [pc, #100]	; (5dec <vTaskStartScheduler+0x6c>)
    5d86:	9301      	str	r3, [sp, #4]
    5d88:	2300      	movs	r3, #0
    5d8a:	9300      	str	r3, [sp, #0]
    5d8c:	2280      	movs	r2, #128	; 0x80
    5d8e:	4918      	ldr	r1, [pc, #96]	; (5df0 <vTaskStartScheduler+0x70>)
    5d90:	4818      	ldr	r0, [pc, #96]	; (5df4 <vTaskStartScheduler+0x74>)
    5d92:	4c19      	ldr	r4, [pc, #100]	; (5df8 <vTaskStartScheduler+0x78>)
    5d94:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    5d96:	2801      	cmp	r0, #1
    5d98:	d004      	beq.n	5da4 <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    5d9a:	f1b0 3fff 	cmp.w	r0, #4294967295
    5d9e:	d01b      	beq.n	5dd8 <vTaskStartScheduler+0x58>
}
    5da0:	b002      	add	sp, #8
    5da2:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    5da4:	4b15      	ldr	r3, [pc, #84]	; (5dfc <vTaskStartScheduler+0x7c>)
    5da6:	4798      	blx	r3
	if (xReturn == pdPASS) {
    5da8:	2801      	cmp	r0, #1
    5daa:	d1f6      	bne.n	5d9a <vTaskStartScheduler+0x1a>
    5dac:	f04f 0380 	mov.w	r3, #128	; 0x80
    5db0:	f383 8811 	msr	BASEPRI, r3
    5db4:	f3bf 8f6f 	isb	sy
    5db8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    5dbc:	4b10      	ldr	r3, [pc, #64]	; (5e00 <vTaskStartScheduler+0x80>)
    5dbe:	f04f 32ff 	mov.w	r2, #4294967295
    5dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    5dc6:	2201      	movs	r2, #1
    5dc8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    5dcc:	2200      	movs	r2, #0
    5dce:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    5dd2:	4b0c      	ldr	r3, [pc, #48]	; (5e04 <vTaskStartScheduler+0x84>)
    5dd4:	4798      	blx	r3
    5dd6:	e7e3      	b.n	5da0 <vTaskStartScheduler+0x20>
    5dd8:	f04f 0380 	mov.w	r3, #128	; 0x80
    5ddc:	f383 8811 	msr	BASEPRI, r3
    5de0:	f3bf 8f6f 	isb	sy
    5de4:	f3bf 8f4f 	dsb	sy
    5de8:	e7fe      	b.n	5de8 <vTaskStartScheduler+0x68>
    5dea:	bf00      	nop
    5dec:	200034ec 	.word	0x200034ec
    5df0:	00009710 	.word	0x00009710
    5df4:	00005ad5 	.word	0x00005ad5
    5df8:	00005ba5 	.word	0x00005ba5
    5dfc:	000067c9 	.word	0x000067c9
    5e00:	20003410 	.word	0x20003410
    5e04:	00004e49 	.word	0x00004e49

00005e08 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    5e08:	4a03      	ldr	r2, [pc, #12]	; (5e18 <vTaskSuspendAll+0x10>)
    5e0a:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    5e0e:	3301      	adds	r3, #1
    5e10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    5e14:	4770      	bx	lr
    5e16:	bf00      	nop
    5e18:	20003410 	.word	0x20003410

00005e1c <xTaskGetTickCount>:
		xTicks = xTickCount;
    5e1c:	4b01      	ldr	r3, [pc, #4]	; (5e24 <xTaskGetTickCount+0x8>)
    5e1e:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    5e22:	4770      	bx	lr
    5e24:	20003410 	.word	0x20003410

00005e28 <xTaskIncrementTick>:
{
    5e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5e2c:	4b44      	ldr	r3, [pc, #272]	; (5f40 <xTaskIncrementTick+0x118>)
    5e2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5e32:	2b00      	cmp	r3, #0
    5e34:	d173      	bne.n	5f1e <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    5e36:	4b42      	ldr	r3, [pc, #264]	; (5f40 <xTaskIncrementTick+0x118>)
    5e38:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    5e3c:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    5e3e:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    5e42:	b9e6      	cbnz	r6, 5e7e <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    5e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	b143      	cbz	r3, 5e5e <xTaskIncrementTick+0x36>
    5e4c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e50:	f383 8811 	msr	BASEPRI, r3
    5e54:	f3bf 8f6f 	isb	sy
    5e58:	f3bf 8f4f 	dsb	sy
    5e5c:	e7fe      	b.n	5e5c <xTaskIncrementTick+0x34>
    5e5e:	4b38      	ldr	r3, [pc, #224]	; (5f40 <xTaskIncrementTick+0x118>)
    5e60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    5e64:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    5e68:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    5e6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    5e70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    5e74:	3201      	adds	r2, #1
    5e76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    5e7a:	4b32      	ldr	r3, [pc, #200]	; (5f44 <xTaskIncrementTick+0x11c>)
    5e7c:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    5e7e:	4b30      	ldr	r3, [pc, #192]	; (5f40 <xTaskIncrementTick+0x118>)
    5e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    5e84:	429e      	cmp	r6, r3
    5e86:	d20d      	bcs.n	5ea4 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    5e88:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    5e8a:	4b2d      	ldr	r3, [pc, #180]	; (5f40 <xTaskIncrementTick+0x118>)
    5e8c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5e90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    5e92:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5e96:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    5e9c:	2b02      	cmp	r3, #2
    5e9e:	bf28      	it	cs
    5ea0:	2401      	movcs	r4, #1
    5ea2:	e043      	b.n	5f2c <xTaskIncrementTick+0x104>
    5ea4:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5ea6:	4d26      	ldr	r5, [pc, #152]	; (5f40 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5ea8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5f4c <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    5eac:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    5eb0:	e021      	b.n	5ef6 <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5eb2:	f04f 32ff 	mov.w	r2, #4294967295
    5eb6:	4b22      	ldr	r3, [pc, #136]	; (5f40 <xTaskIncrementTick+0x118>)
    5eb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    5ebc:	e7e5      	b.n	5e8a <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    5ebe:	4a20      	ldr	r2, [pc, #128]	; (5f40 <xTaskIncrementTick+0x118>)
    5ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    5ec4:	e7e1      	b.n	5e8a <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    5ec6:	f107 0018 	add.w	r0, r7, #24
    5eca:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    5ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5ece:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    5ed2:	4298      	cmp	r0, r3
    5ed4:	bf88      	it	hi
    5ed6:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    5eda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5ede:	4649      	mov	r1, r9
    5ee0:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    5ee4:	4b18      	ldr	r3, [pc, #96]	; (5f48 <xTaskIncrementTick+0x120>)
    5ee6:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5ee8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    5ef0:	429a      	cmp	r2, r3
    5ef2:	bf28      	it	cs
    5ef4:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5ef6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    5efa:	681b      	ldr	r3, [r3, #0]
    5efc:	2b00      	cmp	r3, #0
    5efe:	d0d8      	beq.n	5eb2 <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5f00:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    5f04:	68db      	ldr	r3, [r3, #12]
    5f06:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    5f08:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    5f0a:	429e      	cmp	r6, r3
    5f0c:	d3d7      	bcc.n	5ebe <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5f0e:	f107 0904 	add.w	r9, r7, #4
    5f12:	4648      	mov	r0, r9
    5f14:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    5f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f18:	2b00      	cmp	r3, #0
    5f1a:	d1d4      	bne.n	5ec6 <xTaskIncrementTick+0x9e>
    5f1c:	e7d6      	b.n	5ecc <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    5f1e:	4a08      	ldr	r2, [pc, #32]	; (5f40 <xTaskIncrementTick+0x118>)
    5f20:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    5f24:	3301      	adds	r3, #1
    5f26:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    5f2a:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    5f2c:	4b04      	ldr	r3, [pc, #16]	; (5f40 <xTaskIncrementTick+0x118>)
    5f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    5f32:	2b00      	cmp	r3, #0
}
    5f34:	bf0c      	ite	eq
    5f36:	4620      	moveq	r0, r4
    5f38:	2001      	movne	r0, #1
    5f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f3e:	bf00      	nop
    5f40:	20003410 	.word	0x20003410
    5f44:	00005af9 	.word	0x00005af9
    5f48:	00004bd5 	.word	0x00004bd5
    5f4c:	00004c21 	.word	0x00004c21

00005f50 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    5f50:	4b3a      	ldr	r3, [pc, #232]	; (603c <xTaskResumeAll+0xec>)
    5f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5f56:	b943      	cbnz	r3, 5f6a <xTaskResumeAll+0x1a>
    5f58:	f04f 0380 	mov.w	r3, #128	; 0x80
    5f5c:	f383 8811 	msr	BASEPRI, r3
    5f60:	f3bf 8f6f 	isb	sy
    5f64:	f3bf 8f4f 	dsb	sy
    5f68:	e7fe      	b.n	5f68 <xTaskResumeAll+0x18>
{
    5f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    5f6e:	4b34      	ldr	r3, [pc, #208]	; (6040 <xTaskResumeAll+0xf0>)
    5f70:	4798      	blx	r3
		--uxSchedulerSuspended;
    5f72:	4b32      	ldr	r3, [pc, #200]	; (603c <xTaskResumeAll+0xec>)
    5f74:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    5f78:	3a01      	subs	r2, #1
    5f7a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5f7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5f82:	2b00      	cmp	r3, #0
    5f84:	d155      	bne.n	6032 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    5f86:	4b2d      	ldr	r3, [pc, #180]	; (603c <xTaskResumeAll+0xec>)
    5f88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5f8c:	b92b      	cbnz	r3, 5f9a <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    5f8e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    5f90:	4b2c      	ldr	r3, [pc, #176]	; (6044 <xTaskResumeAll+0xf4>)
    5f92:	4798      	blx	r3
}
    5f94:	4620      	mov	r0, r4
    5f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5f9a:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5f9c:	4c27      	ldr	r4, [pc, #156]	; (603c <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5f9e:	4e2a      	ldr	r6, [pc, #168]	; (6048 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    5fa0:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5fa4:	6963      	ldr	r3, [r4, #20]
    5fa6:	b1fb      	cbz	r3, 5fe8 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    5fa8:	6a23      	ldr	r3, [r4, #32]
    5faa:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5fac:	f105 0018 	add.w	r0, r5, #24
    5fb0:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5fb2:	1d2f      	adds	r7, r5, #4
    5fb4:	4638      	mov	r0, r7
    5fb6:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    5fb8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5fba:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    5fbe:	4298      	cmp	r0, r3
    5fc0:	bf88      	it	hi
    5fc2:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    5fc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5fca:	4639      	mov	r1, r7
    5fcc:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    5fd0:	4b1e      	ldr	r3, [pc, #120]	; (604c <xTaskResumeAll+0xfc>)
    5fd2:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5fd4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    5fd8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    5fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5fdc:	429a      	cmp	r2, r3
    5fde:	d3e1      	bcc.n	5fa4 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    5fe0:	2301      	movs	r3, #1
    5fe2:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    5fe6:	e7dd      	b.n	5fa4 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    5fe8:	b10d      	cbz	r5, 5fee <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    5fea:	4b19      	ldr	r3, [pc, #100]	; (6050 <xTaskResumeAll+0x100>)
    5fec:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    5fee:	4b13      	ldr	r3, [pc, #76]	; (603c <xTaskResumeAll+0xec>)
    5ff0:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    5ff4:	b17c      	cbz	r4, 6016 <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    5ff6:	4f17      	ldr	r7, [pc, #92]	; (6054 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    5ff8:	461e      	mov	r6, r3
    5ffa:	2501      	movs	r5, #1
    5ffc:	e001      	b.n	6002 <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    5ffe:	3c01      	subs	r4, #1
    6000:	d005      	beq.n	600e <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    6002:	47b8      	blx	r7
    6004:	2800      	cmp	r0, #0
    6006:	d0fa      	beq.n	5ffe <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    6008:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    600c:	e7f7      	b.n	5ffe <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    600e:	2200      	movs	r2, #0
    6010:	4b0a      	ldr	r3, [pc, #40]	; (603c <xTaskResumeAll+0xec>)
    6012:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    6016:	4b09      	ldr	r3, [pc, #36]	; (603c <xTaskResumeAll+0xec>)
    6018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    601c:	b15b      	cbz	r3, 6036 <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    601e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6022:	4b0d      	ldr	r3, [pc, #52]	; (6058 <xTaskResumeAll+0x108>)
    6024:	601a      	str	r2, [r3, #0]
    6026:	f3bf 8f4f 	dsb	sy
    602a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    602e:	2401      	movs	r4, #1
    6030:	e7ae      	b.n	5f90 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    6032:	2400      	movs	r4, #0
    6034:	e7ac      	b.n	5f90 <xTaskResumeAll+0x40>
    6036:	2400      	movs	r4, #0
    6038:	e7aa      	b.n	5f90 <xTaskResumeAll+0x40>
    603a:	bf00      	nop
    603c:	20003410 	.word	0x20003410
    6040:	00004d15 	.word	0x00004d15
    6044:	00004d59 	.word	0x00004d59
    6048:	00004c21 	.word	0x00004c21
    604c:	00004bd5 	.word	0x00004bd5
    6050:	00005af9 	.word	0x00005af9
    6054:	00005e29 	.word	0x00005e29
    6058:	e000ed04 	.word	0xe000ed04

0000605c <vTaskDelay>:
{
    605c:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    605e:	b1b0      	cbz	r0, 608e <vTaskDelay+0x32>
    6060:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    6062:	4b0f      	ldr	r3, [pc, #60]	; (60a0 <vTaskDelay+0x44>)
    6064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    6068:	b143      	cbz	r3, 607c <vTaskDelay+0x20>
    606a:	f04f 0380 	mov.w	r3, #128	; 0x80
    606e:	f383 8811 	msr	BASEPRI, r3
    6072:	f3bf 8f6f 	isb	sy
    6076:	f3bf 8f4f 	dsb	sy
    607a:	e7fe      	b.n	607a <vTaskDelay+0x1e>
		vTaskSuspendAll();
    607c:	4b09      	ldr	r3, [pc, #36]	; (60a4 <vTaskDelay+0x48>)
    607e:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    6080:	2100      	movs	r1, #0
    6082:	4620      	mov	r0, r4
    6084:	4b08      	ldr	r3, [pc, #32]	; (60a8 <vTaskDelay+0x4c>)
    6086:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    6088:	4b08      	ldr	r3, [pc, #32]	; (60ac <vTaskDelay+0x50>)
    608a:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    608c:	b938      	cbnz	r0, 609e <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    608e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6092:	4b07      	ldr	r3, [pc, #28]	; (60b0 <vTaskDelay+0x54>)
    6094:	601a      	str	r2, [r3, #0]
    6096:	f3bf 8f4f 	dsb	sy
    609a:	f3bf 8f6f 	isb	sy
    609e:	bd10      	pop	{r4, pc}
    60a0:	20003410 	.word	0x20003410
    60a4:	00005e09 	.word	0x00005e09
    60a8:	00005b25 	.word	0x00005b25
    60ac:	00005f51 	.word	0x00005f51
    60b0:	e000ed04 	.word	0xe000ed04

000060b4 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    60b4:	4b2c      	ldr	r3, [pc, #176]	; (6168 <vTaskSwitchContext+0xb4>)
    60b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    60ba:	bb8b      	cbnz	r3, 6120 <vTaskSwitchContext+0x6c>
{
    60bc:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    60be:	4b2a      	ldr	r3, [pc, #168]	; (6168 <vTaskSwitchContext+0xb4>)
    60c0:	2200      	movs	r2, #0
    60c2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    60c6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    60ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    60ce:	6812      	ldr	r2, [r2, #0]
    60d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    60d2:	429a      	cmp	r2, r3
    60d4:	d807      	bhi.n	60e6 <vTaskSwitchContext+0x32>
    60d6:	4b24      	ldr	r3, [pc, #144]	; (6168 <vTaskSwitchContext+0xb4>)
    60d8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    60dc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    60e0:	3134      	adds	r1, #52	; 0x34
    60e2:	4b22      	ldr	r3, [pc, #136]	; (616c <vTaskSwitchContext+0xb8>)
    60e4:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    60e6:	4a20      	ldr	r2, [pc, #128]	; (6168 <vTaskSwitchContext+0xb4>)
    60e8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    60ec:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    60f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    60f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    60f6:	b9c2      	cbnz	r2, 612a <vTaskSwitchContext+0x76>
    60f8:	b14b      	cbz	r3, 610e <vTaskSwitchContext+0x5a>
    60fa:	491b      	ldr	r1, [pc, #108]	; (6168 <vTaskSwitchContext+0xb4>)
    60fc:	3b01      	subs	r3, #1
    60fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    6102:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6106:	6a92      	ldr	r2, [r2, #40]	; 0x28
    6108:	b97a      	cbnz	r2, 612a <vTaskSwitchContext+0x76>
    610a:	2b00      	cmp	r3, #0
    610c:	d1f6      	bne.n	60fc <vTaskSwitchContext+0x48>
    610e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6112:	f383 8811 	msr	BASEPRI, r3
    6116:	f3bf 8f6f 	isb	sy
    611a:	f3bf 8f4f 	dsb	sy
    611e:	e7fe      	b.n	611e <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    6120:	2201      	movs	r2, #1
    6122:	4b11      	ldr	r3, [pc, #68]	; (6168 <vTaskSwitchContext+0xb4>)
    6124:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    6128:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    612a:	4a0f      	ldr	r2, [pc, #60]	; (6168 <vTaskSwitchContext+0xb4>)
    612c:	0099      	lsls	r1, r3, #2
    612e:	18c8      	adds	r0, r1, r3
    6130:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    6134:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    6136:	6864      	ldr	r4, [r4, #4]
    6138:	62c4      	str	r4, [r0, #44]	; 0x2c
    613a:	4419      	add	r1, r3
    613c:	4602      	mov	r2, r0
    613e:	3230      	adds	r2, #48	; 0x30
    6140:	4294      	cmp	r4, r2
    6142:	d00b      	beq.n	615c <vTaskSwitchContext+0xa8>
    6144:	4a08      	ldr	r2, [pc, #32]	; (6168 <vTaskSwitchContext+0xb4>)
    6146:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    614a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    614e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    6150:	68c9      	ldr	r1, [r1, #12]
    6152:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    6156:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    615a:	bd10      	pop	{r4, pc}
    615c:	6860      	ldr	r0, [r4, #4]
    615e:	4a02      	ldr	r2, [pc, #8]	; (6168 <vTaskSwitchContext+0xb4>)
    6160:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    6164:	62d0      	str	r0, [r2, #44]	; 0x2c
    6166:	e7ed      	b.n	6144 <vTaskSwitchContext+0x90>
    6168:	20003410 	.word	0x20003410
    616c:	000002d1 	.word	0x000002d1

00006170 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    6170:	b940      	cbnz	r0, 6184 <vTaskPlaceOnEventList+0x14>
    6172:	f04f 0380 	mov.w	r3, #128	; 0x80
    6176:	f383 8811 	msr	BASEPRI, r3
    617a:	f3bf 8f6f 	isb	sy
    617e:	f3bf 8f4f 	dsb	sy
    6182:	e7fe      	b.n	6182 <vTaskPlaceOnEventList+0x12>
{
    6184:	b510      	push	{r4, lr}
    6186:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    6188:	4b05      	ldr	r3, [pc, #20]	; (61a0 <vTaskPlaceOnEventList+0x30>)
    618a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    618e:	3118      	adds	r1, #24
    6190:	4b04      	ldr	r3, [pc, #16]	; (61a4 <vTaskPlaceOnEventList+0x34>)
    6192:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    6194:	2101      	movs	r1, #1
    6196:	4620      	mov	r0, r4
    6198:	4b03      	ldr	r3, [pc, #12]	; (61a8 <vTaskPlaceOnEventList+0x38>)
    619a:	4798      	blx	r3
    619c:	bd10      	pop	{r4, pc}
    619e:	bf00      	nop
    61a0:	20003410 	.word	0x20003410
    61a4:	00004bed 	.word	0x00004bed
    61a8:	00005b25 	.word	0x00005b25

000061ac <vTaskPlaceOnEventListRestricted>:
{
    61ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    61ae:	b180      	cbz	r0, 61d2 <vTaskPlaceOnEventListRestricted+0x26>
    61b0:	4614      	mov	r4, r2
    61b2:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    61b4:	4b0b      	ldr	r3, [pc, #44]	; (61e4 <vTaskPlaceOnEventListRestricted+0x38>)
    61b6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    61ba:	3118      	adds	r1, #24
    61bc:	4b0a      	ldr	r3, [pc, #40]	; (61e8 <vTaskPlaceOnEventListRestricted+0x3c>)
    61be:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    61c0:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    61c2:	4621      	mov	r1, r4
    61c4:	bf0c      	ite	eq
    61c6:	4628      	moveq	r0, r5
    61c8:	f04f 30ff 	movne.w	r0, #4294967295
    61cc:	4b07      	ldr	r3, [pc, #28]	; (61ec <vTaskPlaceOnEventListRestricted+0x40>)
    61ce:	4798      	blx	r3
    61d0:	bd38      	pop	{r3, r4, r5, pc}
    61d2:	f04f 0380 	mov.w	r3, #128	; 0x80
    61d6:	f383 8811 	msr	BASEPRI, r3
    61da:	f3bf 8f6f 	isb	sy
    61de:	f3bf 8f4f 	dsb	sy
    61e2:	e7fe      	b.n	61e2 <vTaskPlaceOnEventListRestricted+0x36>
    61e4:	20003410 	.word	0x20003410
    61e8:	00004bd5 	.word	0x00004bd5
    61ec:	00005b25 	.word	0x00005b25

000061f0 <xTaskRemoveFromEventList>:
{
    61f0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    61f2:	68c3      	ldr	r3, [r0, #12]
    61f4:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    61f6:	2c00      	cmp	r4, #0
    61f8:	d02a      	beq.n	6250 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    61fa:	f104 0518 	add.w	r5, r4, #24
    61fe:	4628      	mov	r0, r5
    6200:	4b1a      	ldr	r3, [pc, #104]	; (626c <xTaskRemoveFromEventList+0x7c>)
    6202:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    6204:	4b1a      	ldr	r3, [pc, #104]	; (6270 <xTaskRemoveFromEventList+0x80>)
    6206:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    620a:	bb53      	cbnz	r3, 6262 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    620c:	1d25      	adds	r5, r4, #4
    620e:	4628      	mov	r0, r5
    6210:	4b16      	ldr	r3, [pc, #88]	; (626c <xTaskRemoveFromEventList+0x7c>)
    6212:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    6214:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6216:	4b16      	ldr	r3, [pc, #88]	; (6270 <xTaskRemoveFromEventList+0x80>)
    6218:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    621c:	4298      	cmp	r0, r3
    621e:	bf84      	itt	hi
    6220:	4b13      	ldrhi	r3, [pc, #76]	; (6270 <xTaskRemoveFromEventList+0x80>)
    6222:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    6226:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    622a:	4629      	mov	r1, r5
    622c:	4b11      	ldr	r3, [pc, #68]	; (6274 <xTaskRemoveFromEventList+0x84>)
    622e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6232:	4b11      	ldr	r3, [pc, #68]	; (6278 <xTaskRemoveFromEventList+0x88>)
    6234:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    6236:	4b0e      	ldr	r3, [pc, #56]	; (6270 <xTaskRemoveFromEventList+0x80>)
    6238:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    623c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6240:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    6242:	bf83      	ittte	hi
    6244:	2001      	movhi	r0, #1
    6246:	4b0a      	ldrhi	r3, [pc, #40]	; (6270 <xTaskRemoveFromEventList+0x80>)
    6248:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    624c:	2000      	movls	r0, #0
}
    624e:	bd38      	pop	{r3, r4, r5, pc}
    6250:	f04f 0380 	mov.w	r3, #128	; 0x80
    6254:	f383 8811 	msr	BASEPRI, r3
    6258:	f3bf 8f6f 	isb	sy
    625c:	f3bf 8f4f 	dsb	sy
    6260:	e7fe      	b.n	6260 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    6262:	4629      	mov	r1, r5
    6264:	4805      	ldr	r0, [pc, #20]	; (627c <xTaskRemoveFromEventList+0x8c>)
    6266:	4b04      	ldr	r3, [pc, #16]	; (6278 <xTaskRemoveFromEventList+0x88>)
    6268:	4798      	blx	r3
    626a:	e7e4      	b.n	6236 <xTaskRemoveFromEventList+0x46>
    626c:	00004c21 	.word	0x00004c21
    6270:	20003410 	.word	0x20003410
    6274:	20003438 	.word	0x20003438
    6278:	00004bd5 	.word	0x00004bd5
    627c:	20003424 	.word	0x20003424

00006280 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    6280:	4b03      	ldr	r3, [pc, #12]	; (6290 <vTaskInternalSetTimeOutState+0x10>)
    6282:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    6286:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    6288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    628c:	6043      	str	r3, [r0, #4]
    628e:	4770      	bx	lr
    6290:	20003410 	.word	0x20003410

00006294 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    6294:	b1f8      	cbz	r0, 62d6 <xTaskCheckForTimeOut+0x42>
{
    6296:	b570      	push	{r4, r5, r6, lr}
    6298:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    629a:	b329      	cbz	r1, 62e8 <xTaskCheckForTimeOut+0x54>
    629c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    629e:	4b1c      	ldr	r3, [pc, #112]	; (6310 <xTaskCheckForTimeOut+0x7c>)
    62a0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    62a2:	4b1c      	ldr	r3, [pc, #112]	; (6314 <xTaskCheckForTimeOut+0x80>)
    62a4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    62a8:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    62aa:	6823      	ldr	r3, [r4, #0]
    62ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    62b0:	d02a      	beq.n	6308 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    62b2:	4818      	ldr	r0, [pc, #96]	; (6314 <xTaskCheckForTimeOut+0x80>)
    62b4:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    62b8:	682e      	ldr	r6, [r5, #0]
    62ba:	4286      	cmp	r6, r0
    62bc:	d001      	beq.n	62c2 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    62be:	428a      	cmp	r2, r1
    62c0:	d224      	bcs.n	630c <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    62c2:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    62c4:	429a      	cmp	r2, r3
    62c6:	d318      	bcc.n	62fa <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    62c8:	2300      	movs	r3, #0
    62ca:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    62cc:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    62ce:	4b12      	ldr	r3, [pc, #72]	; (6318 <xTaskCheckForTimeOut+0x84>)
    62d0:	4798      	blx	r3
}
    62d2:	4620      	mov	r0, r4
    62d4:	bd70      	pop	{r4, r5, r6, pc}
    62d6:	f04f 0380 	mov.w	r3, #128	; 0x80
    62da:	f383 8811 	msr	BASEPRI, r3
    62de:	f3bf 8f6f 	isb	sy
    62e2:	f3bf 8f4f 	dsb	sy
    62e6:	e7fe      	b.n	62e6 <xTaskCheckForTimeOut+0x52>
    62e8:	f04f 0380 	mov.w	r3, #128	; 0x80
    62ec:	f383 8811 	msr	BASEPRI, r3
    62f0:	f3bf 8f6f 	isb	sy
    62f4:	f3bf 8f4f 	dsb	sy
    62f8:	e7fe      	b.n	62f8 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    62fa:	1a9b      	subs	r3, r3, r2
    62fc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    62fe:	4628      	mov	r0, r5
    6300:	4b06      	ldr	r3, [pc, #24]	; (631c <xTaskCheckForTimeOut+0x88>)
    6302:	4798      	blx	r3
			xReturn = pdFALSE;
    6304:	2400      	movs	r4, #0
    6306:	e7e2      	b.n	62ce <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    6308:	2400      	movs	r4, #0
    630a:	e7e0      	b.n	62ce <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    630c:	2401      	movs	r4, #1
    630e:	e7de      	b.n	62ce <xTaskCheckForTimeOut+0x3a>
    6310:	00004d15 	.word	0x00004d15
    6314:	20003410 	.word	0x20003410
    6318:	00004d59 	.word	0x00004d59
    631c:	00006281 	.word	0x00006281

00006320 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    6320:	2201      	movs	r2, #1
    6322:	4b02      	ldr	r3, [pc, #8]	; (632c <vTaskMissedYield+0xc>)
    6324:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    6328:	4770      	bx	lr
    632a:	bf00      	nop
    632c:	20003410 	.word	0x20003410

00006330 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    6330:	4b06      	ldr	r3, [pc, #24]	; (634c <xTaskGetSchedulerState+0x1c>)
    6332:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    6336:	b13b      	cbz	r3, 6348 <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    6338:	4b04      	ldr	r3, [pc, #16]	; (634c <xTaskGetSchedulerState+0x1c>)
    633a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    633e:	2b00      	cmp	r3, #0
    6340:	bf0c      	ite	eq
    6342:	2002      	moveq	r0, #2
    6344:	2000      	movne	r0, #0
    6346:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    6348:	2001      	movs	r0, #1
}
    634a:	4770      	bx	lr
    634c:	20003410 	.word	0x20003410

00006350 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    6350:	2800      	cmp	r0, #0
    6352:	d045      	beq.n	63e0 <xTaskPriorityInherit+0x90>
{
    6354:	b538      	push	{r3, r4, r5, lr}
    6356:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    6358:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    635a:	4922      	ldr	r1, [pc, #136]	; (63e4 <xTaskPriorityInherit+0x94>)
    635c:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    6360:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    6362:	428a      	cmp	r2, r1
    6364:	d232      	bcs.n	63cc <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    6366:	6981      	ldr	r1, [r0, #24]
    6368:	2900      	cmp	r1, #0
    636a:	db06      	blt.n	637a <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    636c:	491d      	ldr	r1, [pc, #116]	; (63e4 <xTaskPriorityInherit+0x94>)
    636e:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    6372:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    6374:	f1c1 0105 	rsb	r1, r1, #5
    6378:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    637a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    637e:	491a      	ldr	r1, [pc, #104]	; (63e8 <xTaskPriorityInherit+0x98>)
    6380:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6384:	6969      	ldr	r1, [r5, #20]
    6386:	4291      	cmp	r1, r2
    6388:	d006      	beq.n	6398 <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    638a:	4a16      	ldr	r2, [pc, #88]	; (63e4 <xTaskPriorityInherit+0x94>)
    638c:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    6390:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    6392:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    6394:	2001      	movs	r0, #1
    6396:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    6398:	1d2c      	adds	r4, r5, #4
    639a:	4620      	mov	r0, r4
    639c:	4b13      	ldr	r3, [pc, #76]	; (63ec <xTaskPriorityInherit+0x9c>)
    639e:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    63a0:	4b10      	ldr	r3, [pc, #64]	; (63e4 <xTaskPriorityInherit+0x94>)
    63a2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    63a6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    63a8:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    63aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    63ae:	4298      	cmp	r0, r3
    63b0:	bf84      	itt	hi
    63b2:	4b0c      	ldrhi	r3, [pc, #48]	; (63e4 <xTaskPriorityInherit+0x94>)
    63b4:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    63b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    63bc:	4621      	mov	r1, r4
    63be:	4b0a      	ldr	r3, [pc, #40]	; (63e8 <xTaskPriorityInherit+0x98>)
    63c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    63c4:	4b0a      	ldr	r3, [pc, #40]	; (63f0 <xTaskPriorityInherit+0xa0>)
    63c6:	4798      	blx	r3
			xReturn = pdTRUE;
    63c8:	2001      	movs	r0, #1
    63ca:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    63cc:	4a05      	ldr	r2, [pc, #20]	; (63e4 <xTaskPriorityInherit+0x94>)
    63ce:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    63d2:	6c40      	ldr	r0, [r0, #68]	; 0x44
    63d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    63d6:	4298      	cmp	r0, r3
    63d8:	bf2c      	ite	cs
    63da:	2000      	movcs	r0, #0
    63dc:	2001      	movcc	r0, #1
    63de:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    63e0:	2000      	movs	r0, #0
	return xReturn;
    63e2:	4770      	bx	lr
    63e4:	20003410 	.word	0x20003410
    63e8:	20003438 	.word	0x20003438
    63ec:	00004c21 	.word	0x00004c21
    63f0:	00004bd5 	.word	0x00004bd5

000063f4 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    63f4:	2800      	cmp	r0, #0
    63f6:	d03c      	beq.n	6472 <xTaskPriorityDisinherit+0x7e>
{
    63f8:	b538      	push	{r3, r4, r5, lr}
    63fa:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    63fc:	4a20      	ldr	r2, [pc, #128]	; (6480 <xTaskPriorityDisinherit+0x8c>)
    63fe:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    6402:	4290      	cmp	r0, r2
    6404:	d008      	beq.n	6418 <xTaskPriorityDisinherit+0x24>
    6406:	f04f 0380 	mov.w	r3, #128	; 0x80
    640a:	f383 8811 	msr	BASEPRI, r3
    640e:	f3bf 8f6f 	isb	sy
    6412:	f3bf 8f4f 	dsb	sy
    6416:	e7fe      	b.n	6416 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    6418:	6c82      	ldr	r2, [r0, #72]	; 0x48
    641a:	b942      	cbnz	r2, 642e <xTaskPriorityDisinherit+0x3a>
    641c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6420:	f383 8811 	msr	BASEPRI, r3
    6424:	f3bf 8f6f 	isb	sy
    6428:	f3bf 8f4f 	dsb	sy
    642c:	e7fe      	b.n	642c <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    642e:	3a01      	subs	r2, #1
    6430:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    6432:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    6434:	6c61      	ldr	r1, [r4, #68]	; 0x44
    6436:	4288      	cmp	r0, r1
    6438:	d01d      	beq.n	6476 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    643a:	b9f2      	cbnz	r2, 647a <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    643c:	1d25      	adds	r5, r4, #4
    643e:	4628      	mov	r0, r5
    6440:	4b10      	ldr	r3, [pc, #64]	; (6484 <xTaskPriorityDisinherit+0x90>)
    6442:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    6444:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6446:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    6448:	f1c0 0305 	rsb	r3, r0, #5
    644c:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    644e:	4b0c      	ldr	r3, [pc, #48]	; (6480 <xTaskPriorityDisinherit+0x8c>)
    6450:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6454:	4298      	cmp	r0, r3
    6456:	bf84      	itt	hi
    6458:	4b09      	ldrhi	r3, [pc, #36]	; (6480 <xTaskPriorityDisinherit+0x8c>)
    645a:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    645e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6462:	4629      	mov	r1, r5
    6464:	4b08      	ldr	r3, [pc, #32]	; (6488 <xTaskPriorityDisinherit+0x94>)
    6466:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    646a:	4b08      	ldr	r3, [pc, #32]	; (648c <xTaskPriorityDisinherit+0x98>)
    646c:	4798      	blx	r3
				xReturn = pdTRUE;
    646e:	2001      	movs	r0, #1
    6470:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    6472:	2000      	movs	r0, #0
    6474:	4770      	bx	lr
    6476:	2000      	movs	r0, #0
    6478:	bd38      	pop	{r3, r4, r5, pc}
    647a:	2000      	movs	r0, #0
}
    647c:	bd38      	pop	{r3, r4, r5, pc}
    647e:	bf00      	nop
    6480:	20003410 	.word	0x20003410
    6484:	00004c21 	.word	0x00004c21
    6488:	20003438 	.word	0x20003438
    648c:	00004bd5 	.word	0x00004bd5

00006490 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    6490:	2800      	cmp	r0, #0
    6492:	d049      	beq.n	6528 <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    6494:	b538      	push	{r3, r4, r5, lr}
    6496:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    6498:	6c80      	ldr	r0, [r0, #72]	; 0x48
    649a:	b940      	cbnz	r0, 64ae <vTaskPriorityDisinheritAfterTimeout+0x1e>
    649c:	f04f 0380 	mov.w	r3, #128	; 0x80
    64a0:	f383 8811 	msr	BASEPRI, r3
    64a4:	f3bf 8f6f 	isb	sy
    64a8:	f3bf 8f4f 	dsb	sy
    64ac:	e7fe      	b.n	64ac <vTaskPriorityDisinheritAfterTimeout+0x1c>
    64ae:	6c62      	ldr	r2, [r4, #68]	; 0x44
    64b0:	428a      	cmp	r2, r1
    64b2:	bf38      	it	cc
    64b4:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    64b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    64b8:	4291      	cmp	r1, r2
    64ba:	d001      	beq.n	64c0 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    64bc:	2801      	cmp	r0, #1
    64be:	d000      	beq.n	64c2 <vTaskPriorityDisinheritAfterTimeout+0x32>
    64c0:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    64c2:	481a      	ldr	r0, [pc, #104]	; (652c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    64c4:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    64c8:	4284      	cmp	r4, r0
    64ca:	d108      	bne.n	64de <vTaskPriorityDisinheritAfterTimeout+0x4e>
    64cc:	f04f 0380 	mov.w	r3, #128	; 0x80
    64d0:	f383 8811 	msr	BASEPRI, r3
    64d4:	f3bf 8f6f 	isb	sy
    64d8:	f3bf 8f4f 	dsb	sy
    64dc:	e7fe      	b.n	64dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    64de:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    64e0:	69a0      	ldr	r0, [r4, #24]
    64e2:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    64e4:	bfa4      	itt	ge
    64e6:	f1c2 0205 	rsbge	r2, r2, #5
    64ea:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    64ec:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    64f0:	4a0f      	ldr	r2, [pc, #60]	; (6530 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    64f2:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    64f6:	6962      	ldr	r2, [r4, #20]
    64f8:	428a      	cmp	r2, r1
    64fa:	d1e1      	bne.n	64c0 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    64fc:	1d25      	adds	r5, r4, #4
    64fe:	4628      	mov	r0, r5
    6500:	4b0c      	ldr	r3, [pc, #48]	; (6534 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    6502:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    6504:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6506:	4b09      	ldr	r3, [pc, #36]	; (652c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    6508:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    650c:	4298      	cmp	r0, r3
    650e:	bf84      	itt	hi
    6510:	4b06      	ldrhi	r3, [pc, #24]	; (652c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    6512:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    6516:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    651a:	4629      	mov	r1, r5
    651c:	4b04      	ldr	r3, [pc, #16]	; (6530 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    651e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6522:	4b05      	ldr	r3, [pc, #20]	; (6538 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    6524:	4798      	blx	r3
}
    6526:	e7cb      	b.n	64c0 <vTaskPriorityDisinheritAfterTimeout+0x30>
    6528:	4770      	bx	lr
    652a:	bf00      	nop
    652c:	20003410 	.word	0x20003410
    6530:	20003438 	.word	0x20003438
    6534:	00004c21 	.word	0x00004c21
    6538:	00004bd5 	.word	0x00004bd5

0000653c <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    653c:	4b06      	ldr	r3, [pc, #24]	; (6558 <pvTaskIncrementMutexHeldCount+0x1c>)
    653e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6542:	b12b      	cbz	r3, 6550 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    6544:	4b04      	ldr	r3, [pc, #16]	; (6558 <pvTaskIncrementMutexHeldCount+0x1c>)
    6546:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    654a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    654c:	3301      	adds	r3, #1
    654e:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    6550:	4b01      	ldr	r3, [pc, #4]	; (6558 <pvTaskIncrementMutexHeldCount+0x1c>)
    6552:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    6556:	4770      	bx	lr
    6558:	20003410 	.word	0x20003410

0000655c <xTaskNotifyWait>:
{
    655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    655e:	4607      	mov	r7, r0
    6560:	460d      	mov	r5, r1
    6562:	4614      	mov	r4, r2
    6564:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    6566:	4b25      	ldr	r3, [pc, #148]	; (65fc <xTaskNotifyWait+0xa0>)
    6568:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    656a:	4b25      	ldr	r3, [pc, #148]	; (6600 <xTaskNotifyWait+0xa4>)
    656c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6570:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    6574:	b2db      	uxtb	r3, r3
    6576:	2b02      	cmp	r3, #2
    6578:	d00c      	beq.n	6594 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    657a:	4b21      	ldr	r3, [pc, #132]	; (6600 <xTaskNotifyWait+0xa4>)
    657c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6580:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    6582:	ea20 0007 	bic.w	r0, r0, r7
    6586:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    6588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    658c:	2201      	movs	r2, #1
    658e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    6592:	b9e6      	cbnz	r6, 65ce <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    6594:	4b1b      	ldr	r3, [pc, #108]	; (6604 <xTaskNotifyWait+0xa8>)
    6596:	4798      	blx	r3
	taskENTER_CRITICAL();
    6598:	4b18      	ldr	r3, [pc, #96]	; (65fc <xTaskNotifyWait+0xa0>)
    659a:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    659c:	b124      	cbz	r4, 65a8 <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    659e:	4b18      	ldr	r3, [pc, #96]	; (6600 <xTaskNotifyWait+0xa4>)
    65a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    65a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    65a6:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    65a8:	4b15      	ldr	r3, [pc, #84]	; (6600 <xTaskNotifyWait+0xa4>)
    65aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    65ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    65b2:	b2db      	uxtb	r3, r3
    65b4:	2b02      	cmp	r3, #2
    65b6:	d017      	beq.n	65e8 <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    65b8:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    65ba:	4b11      	ldr	r3, [pc, #68]	; (6600 <xTaskNotifyWait+0xa4>)
    65bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    65c0:	2200      	movs	r2, #0
    65c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    65c6:	4b0f      	ldr	r3, [pc, #60]	; (6604 <xTaskNotifyWait+0xa8>)
    65c8:	4798      	blx	r3
}
    65ca:	4620      	mov	r0, r4
    65cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    65ce:	4611      	mov	r1, r2
    65d0:	4630      	mov	r0, r6
    65d2:	4b0d      	ldr	r3, [pc, #52]	; (6608 <xTaskNotifyWait+0xac>)
    65d4:	4798      	blx	r3
				portYIELD_WITHIN_API();
    65d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    65da:	4b0c      	ldr	r3, [pc, #48]	; (660c <xTaskNotifyWait+0xb0>)
    65dc:	601a      	str	r2, [r3, #0]
    65de:	f3bf 8f4f 	dsb	sy
    65e2:	f3bf 8f6f 	isb	sy
    65e6:	e7d5      	b.n	6594 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    65e8:	4b05      	ldr	r3, [pc, #20]	; (6600 <xTaskNotifyWait+0xa4>)
    65ea:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    65ee:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    65f0:	ea23 0505 	bic.w	r5, r3, r5
    65f4:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    65f6:	2401      	movs	r4, #1
    65f8:	e7df      	b.n	65ba <xTaskNotifyWait+0x5e>
    65fa:	bf00      	nop
    65fc:	00004d15 	.word	0x00004d15
    6600:	20003410 	.word	0x20003410
    6604:	00004d59 	.word	0x00004d59
    6608:	00005b25 	.word	0x00005b25
    660c:	e000ed04 	.word	0xe000ed04

00006610 <xTaskGenericNotifyFromISR>:
{
    6610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6614:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    6616:	b310      	cbz	r0, 665e <xTaskGenericNotifyFromISR+0x4e>
    6618:	4604      	mov	r4, r0
    661a:	4699      	mov	r9, r3
    661c:	4617      	mov	r7, r2
    661e:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    6620:	4b3e      	ldr	r3, [pc, #248]	; (671c <xTaskGenericNotifyFromISR+0x10c>)
    6622:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    6624:	f3ef 8511 	mrs	r5, BASEPRI
    6628:	f04f 0380 	mov.w	r3, #128	; 0x80
    662c:	f383 8811 	msr	BASEPRI, r3
    6630:	f3bf 8f6f 	isb	sy
    6634:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    6638:	f1b9 0f00 	cmp.w	r9, #0
    663c:	d002      	beq.n	6644 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    663e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6640:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    6644:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    6648:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    664a:	2202      	movs	r2, #2
    664c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    6650:	1e7a      	subs	r2, r7, #1
    6652:	2a03      	cmp	r2, #3
    6654:	d810      	bhi.n	6678 <xTaskGenericNotifyFromISR+0x68>
    6656:	e8df f002 	tbb	[pc, r2]
    665a:	1c0b      	.short	0x1c0b
    665c:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    665e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6662:	f383 8811 	msr	BASEPRI, r3
    6666:	f3bf 8f6f 	isb	sy
    666a:	f3bf 8f4f 	dsb	sy
    666e:	e7fe      	b.n	666e <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    6670:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    6672:	ea42 0208 	orr.w	r2, r2, r8
    6676:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    6678:	2b01      	cmp	r3, #1
    667a:	d147      	bne.n	670c <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    667c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    667e:	b1a3      	cbz	r3, 66aa <xTaskGenericNotifyFromISR+0x9a>
    6680:	f04f 0380 	mov.w	r3, #128	; 0x80
    6684:	f383 8811 	msr	BASEPRI, r3
    6688:	f3bf 8f6f 	isb	sy
    668c:	f3bf 8f4f 	dsb	sy
    6690:	e7fe      	b.n	6690 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    6692:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    6694:	3201      	adds	r2, #1
    6696:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    6698:	e7ee      	b.n	6678 <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    669a:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    669e:	e7eb      	b.n	6678 <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    66a0:	2b02      	cmp	r3, #2
    66a2:	d031      	beq.n	6708 <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    66a4:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    66a8:	e7e6      	b.n	6678 <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    66aa:	4b1d      	ldr	r3, [pc, #116]	; (6720 <xTaskGenericNotifyFromISR+0x110>)
    66ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    66b0:	b9fb      	cbnz	r3, 66f2 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    66b2:	1d27      	adds	r7, r4, #4
    66b4:	4638      	mov	r0, r7
    66b6:	4b1b      	ldr	r3, [pc, #108]	; (6724 <xTaskGenericNotifyFromISR+0x114>)
    66b8:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    66ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    66bc:	4b18      	ldr	r3, [pc, #96]	; (6720 <xTaskGenericNotifyFromISR+0x110>)
    66be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    66c2:	4298      	cmp	r0, r3
    66c4:	bf84      	itt	hi
    66c6:	4b16      	ldrhi	r3, [pc, #88]	; (6720 <xTaskGenericNotifyFromISR+0x110>)
    66c8:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    66cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    66d0:	4639      	mov	r1, r7
    66d2:	4b15      	ldr	r3, [pc, #84]	; (6728 <xTaskGenericNotifyFromISR+0x118>)
    66d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    66d8:	4b14      	ldr	r3, [pc, #80]	; (672c <xTaskGenericNotifyFromISR+0x11c>)
    66da:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    66dc:	4b10      	ldr	r3, [pc, #64]	; (6720 <xTaskGenericNotifyFromISR+0x110>)
    66de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    66e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    66e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    66e6:	429a      	cmp	r2, r3
    66e8:	d915      	bls.n	6716 <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    66ea:	b146      	cbz	r6, 66fe <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    66ec:	2001      	movs	r0, #1
    66ee:	6030      	str	r0, [r6, #0]
    66f0:	e00d      	b.n	670e <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    66f2:	f104 0118 	add.w	r1, r4, #24
    66f6:	480e      	ldr	r0, [pc, #56]	; (6730 <xTaskGenericNotifyFromISR+0x120>)
    66f8:	4b0c      	ldr	r3, [pc, #48]	; (672c <xTaskGenericNotifyFromISR+0x11c>)
    66fa:	4798      	blx	r3
    66fc:	e7ee      	b.n	66dc <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    66fe:	2001      	movs	r0, #1
    6700:	4b07      	ldr	r3, [pc, #28]	; (6720 <xTaskGenericNotifyFromISR+0x110>)
    6702:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    6706:	e002      	b.n	670e <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    6708:	2000      	movs	r0, #0
    670a:	e000      	b.n	670e <xTaskGenericNotifyFromISR+0xfe>
    670c:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    670e:	f385 8811 	msr	BASEPRI, r5
}
    6712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6716:	2001      	movs	r0, #1
    6718:	e7f9      	b.n	670e <xTaskGenericNotifyFromISR+0xfe>
    671a:	bf00      	nop
    671c:	00004f6d 	.word	0x00004f6d
    6720:	20003410 	.word	0x20003410
    6724:	00004c21 	.word	0x00004c21
    6728:	20003438 	.word	0x20003438
    672c:	00004bd5 	.word	0x00004bd5
    6730:	20003424 	.word	0x20003424

00006734 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    6734:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    6736:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    6738:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    673a:	4291      	cmp	r1, r2
    673c:	d80c      	bhi.n	6758 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    673e:	1ad2      	subs	r2, r2, r3
    6740:	6983      	ldr	r3, [r0, #24]
    6742:	429a      	cmp	r2, r3
    6744:	d301      	bcc.n	674a <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    6746:	2001      	movs	r0, #1
    6748:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    674a:	1d01      	adds	r1, r0, #4
    674c:	4b09      	ldr	r3, [pc, #36]	; (6774 <prvInsertTimerInActiveList+0x40>)
    674e:	6818      	ldr	r0, [r3, #0]
    6750:	4b09      	ldr	r3, [pc, #36]	; (6778 <prvInsertTimerInActiveList+0x44>)
    6752:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    6754:	2000      	movs	r0, #0
    6756:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    6758:	429a      	cmp	r2, r3
    675a:	d201      	bcs.n	6760 <prvInsertTimerInActiveList+0x2c>
    675c:	4299      	cmp	r1, r3
    675e:	d206      	bcs.n	676e <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    6760:	1d01      	adds	r1, r0, #4
    6762:	4b04      	ldr	r3, [pc, #16]	; (6774 <prvInsertTimerInActiveList+0x40>)
    6764:	6858      	ldr	r0, [r3, #4]
    6766:	4b04      	ldr	r3, [pc, #16]	; (6778 <prvInsertTimerInActiveList+0x44>)
    6768:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    676a:	2000      	movs	r0, #0
    676c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    676e:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    6770:	bd08      	pop	{r3, pc}
    6772:	bf00      	nop
    6774:	200034fc 	.word	0x200034fc
    6778:	00004bed 	.word	0x00004bed

0000677c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    677c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    677e:	4b0d      	ldr	r3, [pc, #52]	; (67b4 <prvCheckForValidListAndQueue+0x38>)
    6780:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    6782:	4b0d      	ldr	r3, [pc, #52]	; (67b8 <prvCheckForValidListAndQueue+0x3c>)
    6784:	689b      	ldr	r3, [r3, #8]
    6786:	b113      	cbz	r3, 678e <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    6788:	4b0c      	ldr	r3, [pc, #48]	; (67bc <prvCheckForValidListAndQueue+0x40>)
    678a:	4798      	blx	r3
    678c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    678e:	4c0a      	ldr	r4, [pc, #40]	; (67b8 <prvCheckForValidListAndQueue+0x3c>)
    6790:	f104 060c 	add.w	r6, r4, #12
    6794:	4630      	mov	r0, r6
    6796:	4f0a      	ldr	r7, [pc, #40]	; (67c0 <prvCheckForValidListAndQueue+0x44>)
    6798:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    679a:	f104 0520 	add.w	r5, r4, #32
    679e:	4628      	mov	r0, r5
    67a0:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    67a2:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    67a4:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    67a6:	2200      	movs	r2, #0
    67a8:	210c      	movs	r1, #12
    67aa:	2014      	movs	r0, #20
    67ac:	4b05      	ldr	r3, [pc, #20]	; (67c4 <prvCheckForValidListAndQueue+0x48>)
    67ae:	4798      	blx	r3
    67b0:	60a0      	str	r0, [r4, #8]
    67b2:	e7e9      	b.n	6788 <prvCheckForValidListAndQueue+0xc>
    67b4:	00004d15 	.word	0x00004d15
    67b8:	200034fc 	.word	0x200034fc
    67bc:	00004d59 	.word	0x00004d59
    67c0:	00004bb9 	.word	0x00004bb9
    67c4:	00005375 	.word	0x00005375

000067c8 <xTimerCreateTimerTask>:
{
    67c8:	b510      	push	{r4, lr}
    67ca:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    67cc:	4b0d      	ldr	r3, [pc, #52]	; (6804 <xTimerCreateTimerTask+0x3c>)
    67ce:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    67d0:	4b0d      	ldr	r3, [pc, #52]	; (6808 <xTimerCreateTimerTask+0x40>)
    67d2:	689b      	ldr	r3, [r3, #8]
    67d4:	b163      	cbz	r3, 67f0 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    67d6:	4b0d      	ldr	r3, [pc, #52]	; (680c <xTimerCreateTimerTask+0x44>)
    67d8:	9301      	str	r3, [sp, #4]
    67da:	2303      	movs	r3, #3
    67dc:	9300      	str	r3, [sp, #0]
    67de:	2300      	movs	r3, #0
    67e0:	2280      	movs	r2, #128	; 0x80
    67e2:	490b      	ldr	r1, [pc, #44]	; (6810 <xTimerCreateTimerTask+0x48>)
    67e4:	480b      	ldr	r0, [pc, #44]	; (6814 <xTimerCreateTimerTask+0x4c>)
    67e6:	4c0c      	ldr	r4, [pc, #48]	; (6818 <xTimerCreateTimerTask+0x50>)
    67e8:	47a0      	blx	r4
	configASSERT(xReturn);
    67ea:	b108      	cbz	r0, 67f0 <xTimerCreateTimerTask+0x28>
}
    67ec:	b002      	add	sp, #8
    67ee:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    67f0:	f04f 0380 	mov.w	r3, #128	; 0x80
    67f4:	f383 8811 	msr	BASEPRI, r3
    67f8:	f3bf 8f6f 	isb	sy
    67fc:	f3bf 8f4f 	dsb	sy
    6800:	e7fe      	b.n	6800 <xTimerCreateTimerTask+0x38>
    6802:	bf00      	nop
    6804:	0000677d 	.word	0x0000677d
    6808:	200034fc 	.word	0x200034fc
    680c:	20003530 	.word	0x20003530
    6810:	00009728 	.word	0x00009728
    6814:	00006989 	.word	0x00006989
    6818:	00005ba5 	.word	0x00005ba5

0000681c <xTimerCreate>:
{
    681c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6820:	4680      	mov	r8, r0
    6822:	460d      	mov	r5, r1
    6824:	4617      	mov	r7, r2
    6826:	461e      	mov	r6, r3
	pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t));
    6828:	202c      	movs	r0, #44	; 0x2c
    682a:	4b0e      	ldr	r3, [pc, #56]	; (6864 <xTimerCreate+0x48>)
    682c:	4798      	blx	r3
	if (pxNewTimer != NULL) {
    682e:	4604      	mov	r4, r0
    6830:	b1a8      	cbz	r0, 685e <xTimerCreate+0x42>
	configASSERT((xTimerPeriodInTicks > 0));
    6832:	b945      	cbnz	r5, 6846 <xTimerCreate+0x2a>
    6834:	f04f 0380 	mov.w	r3, #128	; 0x80
    6838:	f383 8811 	msr	BASEPRI, r3
    683c:	f3bf 8f6f 	isb	sy
    6840:	f3bf 8f4f 	dsb	sy
    6844:	e7fe      	b.n	6844 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
    6846:	4b08      	ldr	r3, [pc, #32]	; (6868 <xTimerCreate+0x4c>)
    6848:	4798      	blx	r3
		pxNewTimer->pcTimerName         = pcTimerName;
    684a:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    684e:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload        = uxAutoReload;
    6850:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID           = pvTimerID;
    6852:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction  = pxCallbackFunction;
    6854:	9b06      	ldr	r3, [sp, #24]
    6856:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem(&(pxNewTimer->xTimerListItem));
    6858:	1d20      	adds	r0, r4, #4
    685a:	4b04      	ldr	r3, [pc, #16]	; (686c <xTimerCreate+0x50>)
    685c:	4798      	blx	r3
}
    685e:	4620      	mov	r0, r4
    6860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6864:	00004fc5 	.word	0x00004fc5
    6868:	0000677d 	.word	0x0000677d
    686c:	00004bcf 	.word	0x00004bcf

00006870 <xTimerGenericCommand>:
	configASSERT(xTimer);
    6870:	b1d8      	cbz	r0, 68aa <xTimerGenericCommand+0x3a>
{
    6872:	b530      	push	{r4, r5, lr}
    6874:	b085      	sub	sp, #20
    6876:	4615      	mov	r5, r2
    6878:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    687a:	4a14      	ldr	r2, [pc, #80]	; (68cc <xTimerGenericCommand+0x5c>)
    687c:	6890      	ldr	r0, [r2, #8]
    687e:	b310      	cbz	r0, 68c6 <xTimerGenericCommand+0x56>
    6880:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    6882:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    6884:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    6886:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    6888:	2905      	cmp	r1, #5
    688a:	dc17      	bgt.n	68bc <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    688c:	4b10      	ldr	r3, [pc, #64]	; (68d0 <xTimerGenericCommand+0x60>)
    688e:	4798      	blx	r3
    6890:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    6892:	f04f 0300 	mov.w	r3, #0
    6896:	bf0c      	ite	eq
    6898:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    689a:	461a      	movne	r2, r3
    689c:	a901      	add	r1, sp, #4
    689e:	480b      	ldr	r0, [pc, #44]	; (68cc <xTimerGenericCommand+0x5c>)
    68a0:	6880      	ldr	r0, [r0, #8]
    68a2:	4c0c      	ldr	r4, [pc, #48]	; (68d4 <xTimerGenericCommand+0x64>)
    68a4:	47a0      	blx	r4
}
    68a6:	b005      	add	sp, #20
    68a8:	bd30      	pop	{r4, r5, pc}
    68aa:	f04f 0380 	mov.w	r3, #128	; 0x80
    68ae:	f383 8811 	msr	BASEPRI, r3
    68b2:	f3bf 8f6f 	isb	sy
    68b6:	f3bf 8f4f 	dsb	sy
    68ba:	e7fe      	b.n	68ba <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    68bc:	2300      	movs	r3, #0
    68be:	a901      	add	r1, sp, #4
    68c0:	4c05      	ldr	r4, [pc, #20]	; (68d8 <xTimerGenericCommand+0x68>)
    68c2:	47a0      	blx	r4
    68c4:	e7ef      	b.n	68a6 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    68c6:	2000      	movs	r0, #0
	return xReturn;
    68c8:	e7ed      	b.n	68a6 <xTimerGenericCommand+0x36>
    68ca:	bf00      	nop
    68cc:	200034fc 	.word	0x200034fc
    68d0:	00006331 	.word	0x00006331
    68d4:	000053cd 	.word	0x000053cd
    68d8:	000055d5 	.word	0x000055d5

000068dc <prvSampleTimeNow>:
{
    68dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68e0:	b082      	sub	sp, #8
    68e2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    68e4:	4b23      	ldr	r3, [pc, #140]	; (6974 <prvSampleTimeNow+0x98>)
    68e6:	4798      	blx	r3
    68e8:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    68ea:	4b23      	ldr	r3, [pc, #140]	; (6978 <prvSampleTimeNow+0x9c>)
    68ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    68ee:	4298      	cmp	r0, r3
    68f0:	d319      	bcc.n	6926 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    68f2:	2300      	movs	r3, #0
    68f4:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    68f8:	4b1f      	ldr	r3, [pc, #124]	; (6978 <prvSampleTimeNow+0x9c>)
    68fa:	639f      	str	r7, [r3, #56]	; 0x38
}
    68fc:	4638      	mov	r0, r7
    68fe:	b002      	add	sp, #8
    6900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6904:	2100      	movs	r1, #0
    6906:	9100      	str	r1, [sp, #0]
    6908:	460b      	mov	r3, r1
    690a:	4652      	mov	r2, sl
    690c:	4620      	mov	r0, r4
    690e:	4c1b      	ldr	r4, [pc, #108]	; (697c <prvSampleTimeNow+0xa0>)
    6910:	47a0      	blx	r4
				configASSERT(xResult);
    6912:	b950      	cbnz	r0, 692a <prvSampleTimeNow+0x4e>
    6914:	f04f 0380 	mov.w	r3, #128	; 0x80
    6918:	f383 8811 	msr	BASEPRI, r3
    691c:	f3bf 8f6f 	isb	sy
    6920:	f3bf 8f4f 	dsb	sy
    6924:	e7fe      	b.n	6924 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    6926:	4d14      	ldr	r5, [pc, #80]	; (6978 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6928:	4e15      	ldr	r6, [pc, #84]	; (6980 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    692a:	686b      	ldr	r3, [r5, #4]
    692c:	681a      	ldr	r2, [r3, #0]
    692e:	b1c2      	cbz	r2, 6962 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6930:	68db      	ldr	r3, [r3, #12]
    6932:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6936:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6938:	f104 0904 	add.w	r9, r4, #4
    693c:	4648      	mov	r0, r9
    693e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6940:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6942:	4620      	mov	r0, r4
    6944:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6946:	69e3      	ldr	r3, [r4, #28]
    6948:	2b01      	cmp	r3, #1
    694a:	d1ee      	bne.n	692a <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    694c:	69a3      	ldr	r3, [r4, #24]
    694e:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    6950:	459a      	cmp	sl, r3
    6952:	d2d7      	bcs.n	6904 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    6954:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    6956:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    6958:	4649      	mov	r1, r9
    695a:	6868      	ldr	r0, [r5, #4]
    695c:	4b09      	ldr	r3, [pc, #36]	; (6984 <prvSampleTimeNow+0xa8>)
    695e:	4798      	blx	r3
    6960:	e7e3      	b.n	692a <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    6962:	4a05      	ldr	r2, [pc, #20]	; (6978 <prvSampleTimeNow+0x9c>)
    6964:	6811      	ldr	r1, [r2, #0]
    6966:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    6968:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    696a:	2301      	movs	r3, #1
    696c:	f8c8 3000 	str.w	r3, [r8]
    6970:	e7c2      	b.n	68f8 <prvSampleTimeNow+0x1c>
    6972:	bf00      	nop
    6974:	00005e1d 	.word	0x00005e1d
    6978:	200034fc 	.word	0x200034fc
    697c:	00006871 	.word	0x00006871
    6980:	00004c21 	.word	0x00004c21
    6984:	00004bed 	.word	0x00004bed

00006988 <prvTimerTask>:
{
    6988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    698c:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    698e:	4c65      	ldr	r4, [pc, #404]	; (6b24 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    6990:	4f65      	ldr	r7, [pc, #404]	; (6b28 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    6992:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 6b48 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    6996:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 6b4c <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    699a:	6863      	ldr	r3, [r4, #4]
    699c:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    699e:	b172      	cbz	r2, 69be <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    69a0:	68db      	ldr	r3, [r3, #12]
    69a2:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    69a4:	4b61      	ldr	r3, [pc, #388]	; (6b2c <prvTimerTask+0x1a4>)
    69a6:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    69a8:	a803      	add	r0, sp, #12
    69aa:	4b61      	ldr	r3, [pc, #388]	; (6b30 <prvTimerTask+0x1a8>)
    69ac:	4798      	blx	r3
    69ae:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    69b0:	9b03      	ldr	r3, [sp, #12]
    69b2:	2b00      	cmp	r3, #0
    69b4:	d179      	bne.n	6aaa <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    69b6:	42a8      	cmp	r0, r5
    69b8:	d24a      	bcs.n	6a50 <prvTimerTask+0xc8>
    69ba:	2200      	movs	r2, #0
    69bc:	e00e      	b.n	69dc <prvTimerTask+0x54>
	vTaskSuspendAll();
    69be:	4b5b      	ldr	r3, [pc, #364]	; (6b2c <prvTimerTask+0x1a4>)
    69c0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    69c2:	a803      	add	r0, sp, #12
    69c4:	4b5a      	ldr	r3, [pc, #360]	; (6b30 <prvTimerTask+0x1a8>)
    69c6:	4798      	blx	r3
    69c8:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    69ca:	9b03      	ldr	r3, [sp, #12]
    69cc:	2b00      	cmp	r3, #0
    69ce:	d16c      	bne.n	6aaa <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    69d0:	6823      	ldr	r3, [r4, #0]
    69d2:	681a      	ldr	r2, [r3, #0]
    69d4:	fab2 f282 	clz	r2, r2
    69d8:	0952      	lsrs	r2, r2, #5
    69da:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    69dc:	1ba9      	subs	r1, r5, r6
    69de:	68a0      	ldr	r0, [r4, #8]
    69e0:	4b54      	ldr	r3, [pc, #336]	; (6b34 <prvTimerTask+0x1ac>)
    69e2:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    69e4:	47b8      	blx	r7
    69e6:	b938      	cbnz	r0, 69f8 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    69e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    69ec:	f8c9 3000 	str.w	r3, [r9]
    69f0:	f3bf 8f4f 	dsb	sy
    69f4:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    69f8:	4d4f      	ldr	r5, [pc, #316]	; (6b38 <prvTimerTask+0x1b0>)
    69fa:	2200      	movs	r2, #0
    69fc:	a903      	add	r1, sp, #12
    69fe:	68a0      	ldr	r0, [r4, #8]
    6a00:	47a8      	blx	r5
    6a02:	2800      	cmp	r0, #0
    6a04:	d0c9      	beq.n	699a <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    6a06:	9b03      	ldr	r3, [sp, #12]
    6a08:	2b00      	cmp	r3, #0
    6a0a:	dbf6      	blt.n	69fa <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6a0c:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    6a0e:	6973      	ldr	r3, [r6, #20]
    6a10:	b10b      	cbz	r3, 6a16 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    6a12:	1d30      	adds	r0, r6, #4
    6a14:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6a16:	a802      	add	r0, sp, #8
    6a18:	4b45      	ldr	r3, [pc, #276]	; (6b30 <prvTimerTask+0x1a8>)
    6a1a:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    6a1c:	9b03      	ldr	r3, [sp, #12]
    6a1e:	2b09      	cmp	r3, #9
    6a20:	d8eb      	bhi.n	69fa <prvTimerTask+0x72>
    6a22:	a201      	add	r2, pc, #4	; (adr r2, 6a28 <prvTimerTask+0xa0>)
    6a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6a28:	00006aaf 	.word	0x00006aaf
    6a2c:	00006aaf 	.word	0x00006aaf
    6a30:	00006aaf 	.word	0x00006aaf
    6a34:	000069fb 	.word	0x000069fb
    6a38:	00006af7 	.word	0x00006af7
    6a3c:	00006b1d 	.word	0x00006b1d
    6a40:	00006aaf 	.word	0x00006aaf
    6a44:	00006aaf 	.word	0x00006aaf
    6a48:	000069fb 	.word	0x000069fb
    6a4c:	00006af7 	.word	0x00006af7
				(void)xTaskResumeAll();
    6a50:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6a52:	6863      	ldr	r3, [r4, #4]
    6a54:	68db      	ldr	r3, [r3, #12]
    6a56:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    6a5a:	f10a 0004 	add.w	r0, sl, #4
    6a5e:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6a60:	f8da 301c 	ldr.w	r3, [sl, #28]
    6a64:	2b01      	cmp	r3, #1
    6a66:	d004      	beq.n	6a72 <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6a68:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    6a6c:	4650      	mov	r0, sl
    6a6e:	4798      	blx	r3
    6a70:	e7c2      	b.n	69f8 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    6a72:	f8da 1018 	ldr.w	r1, [sl, #24]
    6a76:	462b      	mov	r3, r5
    6a78:	4632      	mov	r2, r6
    6a7a:	4429      	add	r1, r5
    6a7c:	4650      	mov	r0, sl
    6a7e:	4e2f      	ldr	r6, [pc, #188]	; (6b3c <prvTimerTask+0x1b4>)
    6a80:	47b0      	blx	r6
    6a82:	2800      	cmp	r0, #0
    6a84:	d0f0      	beq.n	6a68 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6a86:	2100      	movs	r1, #0
    6a88:	9100      	str	r1, [sp, #0]
    6a8a:	460b      	mov	r3, r1
    6a8c:	462a      	mov	r2, r5
    6a8e:	4650      	mov	r0, sl
    6a90:	4d2b      	ldr	r5, [pc, #172]	; (6b40 <prvTimerTask+0x1b8>)
    6a92:	47a8      	blx	r5
			configASSERT(xResult);
    6a94:	2800      	cmp	r0, #0
    6a96:	d1e7      	bne.n	6a68 <prvTimerTask+0xe0>
    6a98:	f04f 0380 	mov.w	r3, #128	; 0x80
    6a9c:	f383 8811 	msr	BASEPRI, r3
    6aa0:	f3bf 8f6f 	isb	sy
    6aa4:	f3bf 8f4f 	dsb	sy
    6aa8:	e7fe      	b.n	6aa8 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    6aaa:	47b8      	blx	r7
    6aac:	e7a4      	b.n	69f8 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    6aae:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    6ab0:	69b1      	ldr	r1, [r6, #24]
    6ab2:	462b      	mov	r3, r5
    6ab4:	4602      	mov	r2, r0
    6ab6:	4429      	add	r1, r5
    6ab8:	4630      	mov	r0, r6
    6aba:	4d20      	ldr	r5, [pc, #128]	; (6b3c <prvTimerTask+0x1b4>)
    6abc:	47a8      	blx	r5
    6abe:	2800      	cmp	r0, #0
    6ac0:	d09a      	beq.n	69f8 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6ac2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6ac4:	4630      	mov	r0, r6
    6ac6:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6ac8:	69f3      	ldr	r3, [r6, #28]
    6aca:	2b01      	cmp	r3, #1
    6acc:	d194      	bne.n	69f8 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    6ace:	69b2      	ldr	r2, [r6, #24]
    6ad0:	2100      	movs	r1, #0
    6ad2:	9100      	str	r1, [sp, #0]
    6ad4:	460b      	mov	r3, r1
    6ad6:	9804      	ldr	r0, [sp, #16]
    6ad8:	4402      	add	r2, r0
    6ada:	4630      	mov	r0, r6
    6adc:	4d18      	ldr	r5, [pc, #96]	; (6b40 <prvTimerTask+0x1b8>)
    6ade:	47a8      	blx	r5
						configASSERT(xResult);
    6ae0:	2800      	cmp	r0, #0
    6ae2:	d189      	bne.n	69f8 <prvTimerTask+0x70>
    6ae4:	f04f 0380 	mov.w	r3, #128	; 0x80
    6ae8:	f383 8811 	msr	BASEPRI, r3
    6aec:	f3bf 8f6f 	isb	sy
    6af0:	f3bf 8f4f 	dsb	sy
    6af4:	e7fe      	b.n	6af4 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    6af6:	9904      	ldr	r1, [sp, #16]
    6af8:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    6afa:	b131      	cbz	r1, 6b0a <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    6afc:	4603      	mov	r3, r0
    6afe:	4602      	mov	r2, r0
    6b00:	4401      	add	r1, r0
    6b02:	4630      	mov	r0, r6
    6b04:	4d0d      	ldr	r5, [pc, #52]	; (6b3c <prvTimerTask+0x1b4>)
    6b06:	47a8      	blx	r5
    6b08:	e776      	b.n	69f8 <prvTimerTask+0x70>
    6b0a:	f04f 0380 	mov.w	r3, #128	; 0x80
    6b0e:	f383 8811 	msr	BASEPRI, r3
    6b12:	f3bf 8f6f 	isb	sy
    6b16:	f3bf 8f4f 	dsb	sy
    6b1a:	e7fe      	b.n	6b1a <prvTimerTask+0x192>
				vPortFree(pxTimer);
    6b1c:	4630      	mov	r0, r6
    6b1e:	4b09      	ldr	r3, [pc, #36]	; (6b44 <prvTimerTask+0x1bc>)
    6b20:	4798      	blx	r3
    6b22:	e769      	b.n	69f8 <prvTimerTask+0x70>
    6b24:	200034fc 	.word	0x200034fc
    6b28:	00005f51 	.word	0x00005f51
    6b2c:	00005e09 	.word	0x00005e09
    6b30:	000068dd 	.word	0x000068dd
    6b34:	00005a75 	.word	0x00005a75
    6b38:	000056dd 	.word	0x000056dd
    6b3c:	00006735 	.word	0x00006735
    6b40:	00006871 	.word	0x00006871
    6b44:	000050a5 	.word	0x000050a5
    6b48:	e000ed04 	.word	0xe000ed04
    6b4c:	00004c21 	.word	0x00004c21

00006b50 <atoi>:
    6b50:	220a      	movs	r2, #10
    6b52:	2100      	movs	r1, #0
    6b54:	f000 ba0e 	b.w	6f74 <strtol>

00006b58 <__libc_init_array>:
    6b58:	b570      	push	{r4, r5, r6, lr}
    6b5a:	4e0d      	ldr	r6, [pc, #52]	; (6b90 <__libc_init_array+0x38>)
    6b5c:	4c0d      	ldr	r4, [pc, #52]	; (6b94 <__libc_init_array+0x3c>)
    6b5e:	1ba4      	subs	r4, r4, r6
    6b60:	10a4      	asrs	r4, r4, #2
    6b62:	2500      	movs	r5, #0
    6b64:	42a5      	cmp	r5, r4
    6b66:	d109      	bne.n	6b7c <__libc_init_array+0x24>
    6b68:	4e0b      	ldr	r6, [pc, #44]	; (6b98 <__libc_init_array+0x40>)
    6b6a:	4c0c      	ldr	r4, [pc, #48]	; (6b9c <__libc_init_array+0x44>)
    6b6c:	f002 feb0 	bl	98d0 <_init>
    6b70:	1ba4      	subs	r4, r4, r6
    6b72:	10a4      	asrs	r4, r4, #2
    6b74:	2500      	movs	r5, #0
    6b76:	42a5      	cmp	r5, r4
    6b78:	d105      	bne.n	6b86 <__libc_init_array+0x2e>
    6b7a:	bd70      	pop	{r4, r5, r6, pc}
    6b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6b80:	4798      	blx	r3
    6b82:	3501      	adds	r5, #1
    6b84:	e7ee      	b.n	6b64 <__libc_init_array+0xc>
    6b86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6b8a:	4798      	blx	r3
    6b8c:	3501      	adds	r5, #1
    6b8e:	e7f2      	b.n	6b76 <__libc_init_array+0x1e>
    6b90:	000098dc 	.word	0x000098dc
    6b94:	000098dc 	.word	0x000098dc
    6b98:	000098dc 	.word	0x000098dc
    6b9c:	000098e0 	.word	0x000098e0

00006ba0 <__locale_ctype_ptr_l>:
    6ba0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    6ba4:	4770      	bx	lr

00006ba6 <__ascii_mbtowc>:
    6ba6:	b082      	sub	sp, #8
    6ba8:	b901      	cbnz	r1, 6bac <__ascii_mbtowc+0x6>
    6baa:	a901      	add	r1, sp, #4
    6bac:	b142      	cbz	r2, 6bc0 <__ascii_mbtowc+0x1a>
    6bae:	b14b      	cbz	r3, 6bc4 <__ascii_mbtowc+0x1e>
    6bb0:	7813      	ldrb	r3, [r2, #0]
    6bb2:	600b      	str	r3, [r1, #0]
    6bb4:	7812      	ldrb	r2, [r2, #0]
    6bb6:	1c10      	adds	r0, r2, #0
    6bb8:	bf18      	it	ne
    6bba:	2001      	movne	r0, #1
    6bbc:	b002      	add	sp, #8
    6bbe:	4770      	bx	lr
    6bc0:	4610      	mov	r0, r2
    6bc2:	e7fb      	b.n	6bbc <__ascii_mbtowc+0x16>
    6bc4:	f06f 0001 	mvn.w	r0, #1
    6bc8:	e7f8      	b.n	6bbc <__ascii_mbtowc+0x16>

00006bca <memcmp>:
    6bca:	b510      	push	{r4, lr}
    6bcc:	3901      	subs	r1, #1
    6bce:	4402      	add	r2, r0
    6bd0:	4290      	cmp	r0, r2
    6bd2:	d101      	bne.n	6bd8 <memcmp+0xe>
    6bd4:	2000      	movs	r0, #0
    6bd6:	bd10      	pop	{r4, pc}
    6bd8:	f810 3b01 	ldrb.w	r3, [r0], #1
    6bdc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    6be0:	42a3      	cmp	r3, r4
    6be2:	d0f5      	beq.n	6bd0 <memcmp+0x6>
    6be4:	1b18      	subs	r0, r3, r4
    6be6:	bd10      	pop	{r4, pc}

00006be8 <memcpy>:
    6be8:	b510      	push	{r4, lr}
    6bea:	1e43      	subs	r3, r0, #1
    6bec:	440a      	add	r2, r1
    6bee:	4291      	cmp	r1, r2
    6bf0:	d100      	bne.n	6bf4 <memcpy+0xc>
    6bf2:	bd10      	pop	{r4, pc}
    6bf4:	f811 4b01 	ldrb.w	r4, [r1], #1
    6bf8:	f803 4f01 	strb.w	r4, [r3, #1]!
    6bfc:	e7f7      	b.n	6bee <memcpy+0x6>

00006bfe <memmove>:
    6bfe:	4288      	cmp	r0, r1
    6c00:	b510      	push	{r4, lr}
    6c02:	eb01 0302 	add.w	r3, r1, r2
    6c06:	d803      	bhi.n	6c10 <memmove+0x12>
    6c08:	1e42      	subs	r2, r0, #1
    6c0a:	4299      	cmp	r1, r3
    6c0c:	d10c      	bne.n	6c28 <memmove+0x2a>
    6c0e:	bd10      	pop	{r4, pc}
    6c10:	4298      	cmp	r0, r3
    6c12:	d2f9      	bcs.n	6c08 <memmove+0xa>
    6c14:	1881      	adds	r1, r0, r2
    6c16:	1ad2      	subs	r2, r2, r3
    6c18:	42d3      	cmn	r3, r2
    6c1a:	d100      	bne.n	6c1e <memmove+0x20>
    6c1c:	bd10      	pop	{r4, pc}
    6c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    6c22:	f801 4d01 	strb.w	r4, [r1, #-1]!
    6c26:	e7f7      	b.n	6c18 <memmove+0x1a>
    6c28:	f811 4b01 	ldrb.w	r4, [r1], #1
    6c2c:	f802 4f01 	strb.w	r4, [r2, #1]!
    6c30:	e7eb      	b.n	6c0a <memmove+0xc>

00006c32 <memset>:
    6c32:	4402      	add	r2, r0
    6c34:	4603      	mov	r3, r0
    6c36:	4293      	cmp	r3, r2
    6c38:	d100      	bne.n	6c3c <memset+0xa>
    6c3a:	4770      	bx	lr
    6c3c:	f803 1b01 	strb.w	r1, [r3], #1
    6c40:	e7f9      	b.n	6c36 <memset+0x4>
	...

00006c44 <_free_r>:
    6c44:	b538      	push	{r3, r4, r5, lr}
    6c46:	4605      	mov	r5, r0
    6c48:	2900      	cmp	r1, #0
    6c4a:	d045      	beq.n	6cd8 <_free_r+0x94>
    6c4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6c50:	1f0c      	subs	r4, r1, #4
    6c52:	2b00      	cmp	r3, #0
    6c54:	bfb8      	it	lt
    6c56:	18e4      	addlt	r4, r4, r3
    6c58:	f000 f9af 	bl	6fba <__malloc_lock>
    6c5c:	4a1f      	ldr	r2, [pc, #124]	; (6cdc <_free_r+0x98>)
    6c5e:	6813      	ldr	r3, [r2, #0]
    6c60:	4610      	mov	r0, r2
    6c62:	b933      	cbnz	r3, 6c72 <_free_r+0x2e>
    6c64:	6063      	str	r3, [r4, #4]
    6c66:	6014      	str	r4, [r2, #0]
    6c68:	4628      	mov	r0, r5
    6c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6c6e:	f000 b9a5 	b.w	6fbc <__malloc_unlock>
    6c72:	42a3      	cmp	r3, r4
    6c74:	d90c      	bls.n	6c90 <_free_r+0x4c>
    6c76:	6821      	ldr	r1, [r4, #0]
    6c78:	1862      	adds	r2, r4, r1
    6c7a:	4293      	cmp	r3, r2
    6c7c:	bf04      	itt	eq
    6c7e:	681a      	ldreq	r2, [r3, #0]
    6c80:	685b      	ldreq	r3, [r3, #4]
    6c82:	6063      	str	r3, [r4, #4]
    6c84:	bf04      	itt	eq
    6c86:	1852      	addeq	r2, r2, r1
    6c88:	6022      	streq	r2, [r4, #0]
    6c8a:	6004      	str	r4, [r0, #0]
    6c8c:	e7ec      	b.n	6c68 <_free_r+0x24>
    6c8e:	4613      	mov	r3, r2
    6c90:	685a      	ldr	r2, [r3, #4]
    6c92:	b10a      	cbz	r2, 6c98 <_free_r+0x54>
    6c94:	42a2      	cmp	r2, r4
    6c96:	d9fa      	bls.n	6c8e <_free_r+0x4a>
    6c98:	6819      	ldr	r1, [r3, #0]
    6c9a:	1858      	adds	r0, r3, r1
    6c9c:	42a0      	cmp	r0, r4
    6c9e:	d10b      	bne.n	6cb8 <_free_r+0x74>
    6ca0:	6820      	ldr	r0, [r4, #0]
    6ca2:	4401      	add	r1, r0
    6ca4:	1858      	adds	r0, r3, r1
    6ca6:	4282      	cmp	r2, r0
    6ca8:	6019      	str	r1, [r3, #0]
    6caa:	d1dd      	bne.n	6c68 <_free_r+0x24>
    6cac:	6810      	ldr	r0, [r2, #0]
    6cae:	6852      	ldr	r2, [r2, #4]
    6cb0:	605a      	str	r2, [r3, #4]
    6cb2:	4401      	add	r1, r0
    6cb4:	6019      	str	r1, [r3, #0]
    6cb6:	e7d7      	b.n	6c68 <_free_r+0x24>
    6cb8:	d902      	bls.n	6cc0 <_free_r+0x7c>
    6cba:	230c      	movs	r3, #12
    6cbc:	602b      	str	r3, [r5, #0]
    6cbe:	e7d3      	b.n	6c68 <_free_r+0x24>
    6cc0:	6820      	ldr	r0, [r4, #0]
    6cc2:	1821      	adds	r1, r4, r0
    6cc4:	428a      	cmp	r2, r1
    6cc6:	bf04      	itt	eq
    6cc8:	6811      	ldreq	r1, [r2, #0]
    6cca:	6852      	ldreq	r2, [r2, #4]
    6ccc:	6062      	str	r2, [r4, #4]
    6cce:	bf04      	itt	eq
    6cd0:	1809      	addeq	r1, r1, r0
    6cd2:	6021      	streq	r1, [r4, #0]
    6cd4:	605c      	str	r4, [r3, #4]
    6cd6:	e7c7      	b.n	6c68 <_free_r+0x24>
    6cd8:	bd38      	pop	{r3, r4, r5, pc}
    6cda:	bf00      	nop
    6cdc:	20003538 	.word	0x20003538

00006ce0 <_malloc_r>:
    6ce0:	b570      	push	{r4, r5, r6, lr}
    6ce2:	1ccd      	adds	r5, r1, #3
    6ce4:	f025 0503 	bic.w	r5, r5, #3
    6ce8:	3508      	adds	r5, #8
    6cea:	2d0c      	cmp	r5, #12
    6cec:	bf38      	it	cc
    6cee:	250c      	movcc	r5, #12
    6cf0:	2d00      	cmp	r5, #0
    6cf2:	4606      	mov	r6, r0
    6cf4:	db01      	blt.n	6cfa <_malloc_r+0x1a>
    6cf6:	42a9      	cmp	r1, r5
    6cf8:	d903      	bls.n	6d02 <_malloc_r+0x22>
    6cfa:	230c      	movs	r3, #12
    6cfc:	6033      	str	r3, [r6, #0]
    6cfe:	2000      	movs	r0, #0
    6d00:	bd70      	pop	{r4, r5, r6, pc}
    6d02:	f000 f95a 	bl	6fba <__malloc_lock>
    6d06:	4a23      	ldr	r2, [pc, #140]	; (6d94 <_malloc_r+0xb4>)
    6d08:	6814      	ldr	r4, [r2, #0]
    6d0a:	4621      	mov	r1, r4
    6d0c:	b991      	cbnz	r1, 6d34 <_malloc_r+0x54>
    6d0e:	4c22      	ldr	r4, [pc, #136]	; (6d98 <_malloc_r+0xb8>)
    6d10:	6823      	ldr	r3, [r4, #0]
    6d12:	b91b      	cbnz	r3, 6d1c <_malloc_r+0x3c>
    6d14:	4630      	mov	r0, r6
    6d16:	f000 f841 	bl	6d9c <_sbrk_r>
    6d1a:	6020      	str	r0, [r4, #0]
    6d1c:	4629      	mov	r1, r5
    6d1e:	4630      	mov	r0, r6
    6d20:	f000 f83c 	bl	6d9c <_sbrk_r>
    6d24:	1c43      	adds	r3, r0, #1
    6d26:	d126      	bne.n	6d76 <_malloc_r+0x96>
    6d28:	230c      	movs	r3, #12
    6d2a:	6033      	str	r3, [r6, #0]
    6d2c:	4630      	mov	r0, r6
    6d2e:	f000 f945 	bl	6fbc <__malloc_unlock>
    6d32:	e7e4      	b.n	6cfe <_malloc_r+0x1e>
    6d34:	680b      	ldr	r3, [r1, #0]
    6d36:	1b5b      	subs	r3, r3, r5
    6d38:	d41a      	bmi.n	6d70 <_malloc_r+0x90>
    6d3a:	2b0b      	cmp	r3, #11
    6d3c:	d90f      	bls.n	6d5e <_malloc_r+0x7e>
    6d3e:	600b      	str	r3, [r1, #0]
    6d40:	50cd      	str	r5, [r1, r3]
    6d42:	18cc      	adds	r4, r1, r3
    6d44:	4630      	mov	r0, r6
    6d46:	f000 f939 	bl	6fbc <__malloc_unlock>
    6d4a:	f104 000b 	add.w	r0, r4, #11
    6d4e:	1d23      	adds	r3, r4, #4
    6d50:	f020 0007 	bic.w	r0, r0, #7
    6d54:	1ac3      	subs	r3, r0, r3
    6d56:	d01b      	beq.n	6d90 <_malloc_r+0xb0>
    6d58:	425a      	negs	r2, r3
    6d5a:	50e2      	str	r2, [r4, r3]
    6d5c:	bd70      	pop	{r4, r5, r6, pc}
    6d5e:	428c      	cmp	r4, r1
    6d60:	bf0d      	iteet	eq
    6d62:	6863      	ldreq	r3, [r4, #4]
    6d64:	684b      	ldrne	r3, [r1, #4]
    6d66:	6063      	strne	r3, [r4, #4]
    6d68:	6013      	streq	r3, [r2, #0]
    6d6a:	bf18      	it	ne
    6d6c:	460c      	movne	r4, r1
    6d6e:	e7e9      	b.n	6d44 <_malloc_r+0x64>
    6d70:	460c      	mov	r4, r1
    6d72:	6849      	ldr	r1, [r1, #4]
    6d74:	e7ca      	b.n	6d0c <_malloc_r+0x2c>
    6d76:	1cc4      	adds	r4, r0, #3
    6d78:	f024 0403 	bic.w	r4, r4, #3
    6d7c:	42a0      	cmp	r0, r4
    6d7e:	d005      	beq.n	6d8c <_malloc_r+0xac>
    6d80:	1a21      	subs	r1, r4, r0
    6d82:	4630      	mov	r0, r6
    6d84:	f000 f80a 	bl	6d9c <_sbrk_r>
    6d88:	3001      	adds	r0, #1
    6d8a:	d0cd      	beq.n	6d28 <_malloc_r+0x48>
    6d8c:	6025      	str	r5, [r4, #0]
    6d8e:	e7d9      	b.n	6d44 <_malloc_r+0x64>
    6d90:	bd70      	pop	{r4, r5, r6, pc}
    6d92:	bf00      	nop
    6d94:	20003538 	.word	0x20003538
    6d98:	2000353c 	.word	0x2000353c

00006d9c <_sbrk_r>:
    6d9c:	b538      	push	{r3, r4, r5, lr}
    6d9e:	4c06      	ldr	r4, [pc, #24]	; (6db8 <_sbrk_r+0x1c>)
    6da0:	2300      	movs	r3, #0
    6da2:	4605      	mov	r5, r0
    6da4:	4608      	mov	r0, r1
    6da6:	6023      	str	r3, [r4, #0]
    6da8:	f7fc ffa6 	bl	3cf8 <_sbrk>
    6dac:	1c43      	adds	r3, r0, #1
    6dae:	d102      	bne.n	6db6 <_sbrk_r+0x1a>
    6db0:	6823      	ldr	r3, [r4, #0]
    6db2:	b103      	cbz	r3, 6db6 <_sbrk_r+0x1a>
    6db4:	602b      	str	r3, [r5, #0]
    6db6:	bd38      	pop	{r3, r4, r5, pc}
    6db8:	20003f7c 	.word	0x20003f7c

00006dbc <siprintf>:
    6dbc:	b40e      	push	{r1, r2, r3}
    6dbe:	b500      	push	{lr}
    6dc0:	b09c      	sub	sp, #112	; 0x70
    6dc2:	f44f 7102 	mov.w	r1, #520	; 0x208
    6dc6:	ab1d      	add	r3, sp, #116	; 0x74
    6dc8:	f8ad 1014 	strh.w	r1, [sp, #20]
    6dcc:	9002      	str	r0, [sp, #8]
    6dce:	9006      	str	r0, [sp, #24]
    6dd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6dd4:	480a      	ldr	r0, [pc, #40]	; (6e00 <siprintf+0x44>)
    6dd6:	9104      	str	r1, [sp, #16]
    6dd8:	9107      	str	r1, [sp, #28]
    6dda:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6dde:	f853 2b04 	ldr.w	r2, [r3], #4
    6de2:	f8ad 1016 	strh.w	r1, [sp, #22]
    6de6:	6800      	ldr	r0, [r0, #0]
    6de8:	9301      	str	r3, [sp, #4]
    6dea:	a902      	add	r1, sp, #8
    6dec:	f000 f942 	bl	7074 <_svfiprintf_r>
    6df0:	9b02      	ldr	r3, [sp, #8]
    6df2:	2200      	movs	r2, #0
    6df4:	701a      	strb	r2, [r3, #0]
    6df6:	b01c      	add	sp, #112	; 0x70
    6df8:	f85d eb04 	ldr.w	lr, [sp], #4
    6dfc:	b003      	add	sp, #12
    6dfe:	4770      	bx	lr
    6e00:	20000078 	.word	0x20000078

00006e04 <strcpy>:
    6e04:	4603      	mov	r3, r0
    6e06:	f811 2b01 	ldrb.w	r2, [r1], #1
    6e0a:	f803 2b01 	strb.w	r2, [r3], #1
    6e0e:	2a00      	cmp	r2, #0
    6e10:	d1f9      	bne.n	6e06 <strcpy+0x2>
    6e12:	4770      	bx	lr

00006e14 <strlen>:
    6e14:	4603      	mov	r3, r0
    6e16:	f813 2b01 	ldrb.w	r2, [r3], #1
    6e1a:	2a00      	cmp	r2, #0
    6e1c:	d1fb      	bne.n	6e16 <strlen+0x2>
    6e1e:	1a18      	subs	r0, r3, r0
    6e20:	3801      	subs	r0, #1
    6e22:	4770      	bx	lr

00006e24 <strncmp>:
    6e24:	b510      	push	{r4, lr}
    6e26:	b16a      	cbz	r2, 6e44 <strncmp+0x20>
    6e28:	3901      	subs	r1, #1
    6e2a:	1884      	adds	r4, r0, r2
    6e2c:	f810 3b01 	ldrb.w	r3, [r0], #1
    6e30:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6e34:	4293      	cmp	r3, r2
    6e36:	d103      	bne.n	6e40 <strncmp+0x1c>
    6e38:	42a0      	cmp	r0, r4
    6e3a:	d001      	beq.n	6e40 <strncmp+0x1c>
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d1f5      	bne.n	6e2c <strncmp+0x8>
    6e40:	1a98      	subs	r0, r3, r2
    6e42:	bd10      	pop	{r4, pc}
    6e44:	4610      	mov	r0, r2
    6e46:	bd10      	pop	{r4, pc}

00006e48 <strncpy>:
    6e48:	b570      	push	{r4, r5, r6, lr}
    6e4a:	4604      	mov	r4, r0
    6e4c:	b902      	cbnz	r2, 6e50 <strncpy+0x8>
    6e4e:	bd70      	pop	{r4, r5, r6, pc}
    6e50:	4623      	mov	r3, r4
    6e52:	f811 5b01 	ldrb.w	r5, [r1], #1
    6e56:	f803 5b01 	strb.w	r5, [r3], #1
    6e5a:	1e56      	subs	r6, r2, #1
    6e5c:	b91d      	cbnz	r5, 6e66 <strncpy+0x1e>
    6e5e:	4414      	add	r4, r2
    6e60:	42a3      	cmp	r3, r4
    6e62:	d103      	bne.n	6e6c <strncpy+0x24>
    6e64:	bd70      	pop	{r4, r5, r6, pc}
    6e66:	461c      	mov	r4, r3
    6e68:	4632      	mov	r2, r6
    6e6a:	e7ef      	b.n	6e4c <strncpy+0x4>
    6e6c:	f803 5b01 	strb.w	r5, [r3], #1
    6e70:	e7f6      	b.n	6e60 <strncpy+0x18>

00006e72 <_strtol_l.isra.0>:
    6e72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e76:	4680      	mov	r8, r0
    6e78:	4689      	mov	r9, r1
    6e7a:	4692      	mov	sl, r2
    6e7c:	461f      	mov	r7, r3
    6e7e:	468b      	mov	fp, r1
    6e80:	465d      	mov	r5, fp
    6e82:	980a      	ldr	r0, [sp, #40]	; 0x28
    6e84:	f815 4b01 	ldrb.w	r4, [r5], #1
    6e88:	f7ff fe8a 	bl	6ba0 <__locale_ctype_ptr_l>
    6e8c:	4420      	add	r0, r4
    6e8e:	7846      	ldrb	r6, [r0, #1]
    6e90:	f016 0608 	ands.w	r6, r6, #8
    6e94:	d10b      	bne.n	6eae <_strtol_l.isra.0+0x3c>
    6e96:	2c2d      	cmp	r4, #45	; 0x2d
    6e98:	d10b      	bne.n	6eb2 <_strtol_l.isra.0+0x40>
    6e9a:	782c      	ldrb	r4, [r5, #0]
    6e9c:	2601      	movs	r6, #1
    6e9e:	f10b 0502 	add.w	r5, fp, #2
    6ea2:	b167      	cbz	r7, 6ebe <_strtol_l.isra.0+0x4c>
    6ea4:	2f10      	cmp	r7, #16
    6ea6:	d114      	bne.n	6ed2 <_strtol_l.isra.0+0x60>
    6ea8:	2c30      	cmp	r4, #48	; 0x30
    6eaa:	d00a      	beq.n	6ec2 <_strtol_l.isra.0+0x50>
    6eac:	e011      	b.n	6ed2 <_strtol_l.isra.0+0x60>
    6eae:	46ab      	mov	fp, r5
    6eb0:	e7e6      	b.n	6e80 <_strtol_l.isra.0+0xe>
    6eb2:	2c2b      	cmp	r4, #43	; 0x2b
    6eb4:	bf04      	itt	eq
    6eb6:	782c      	ldrbeq	r4, [r5, #0]
    6eb8:	f10b 0502 	addeq.w	r5, fp, #2
    6ebc:	e7f1      	b.n	6ea2 <_strtol_l.isra.0+0x30>
    6ebe:	2c30      	cmp	r4, #48	; 0x30
    6ec0:	d127      	bne.n	6f12 <_strtol_l.isra.0+0xa0>
    6ec2:	782b      	ldrb	r3, [r5, #0]
    6ec4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6ec8:	2b58      	cmp	r3, #88	; 0x58
    6eca:	d14b      	bne.n	6f64 <_strtol_l.isra.0+0xf2>
    6ecc:	786c      	ldrb	r4, [r5, #1]
    6ece:	2710      	movs	r7, #16
    6ed0:	3502      	adds	r5, #2
    6ed2:	2e00      	cmp	r6, #0
    6ed4:	bf0c      	ite	eq
    6ed6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    6eda:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    6ede:	2200      	movs	r2, #0
    6ee0:	fbb1 fef7 	udiv	lr, r1, r7
    6ee4:	4610      	mov	r0, r2
    6ee6:	fb07 1c1e 	mls	ip, r7, lr, r1
    6eea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    6eee:	2b09      	cmp	r3, #9
    6ef0:	d811      	bhi.n	6f16 <_strtol_l.isra.0+0xa4>
    6ef2:	461c      	mov	r4, r3
    6ef4:	42a7      	cmp	r7, r4
    6ef6:	dd1d      	ble.n	6f34 <_strtol_l.isra.0+0xc2>
    6ef8:	1c53      	adds	r3, r2, #1
    6efa:	d007      	beq.n	6f0c <_strtol_l.isra.0+0x9a>
    6efc:	4586      	cmp	lr, r0
    6efe:	d316      	bcc.n	6f2e <_strtol_l.isra.0+0xbc>
    6f00:	d101      	bne.n	6f06 <_strtol_l.isra.0+0x94>
    6f02:	45a4      	cmp	ip, r4
    6f04:	db13      	blt.n	6f2e <_strtol_l.isra.0+0xbc>
    6f06:	fb00 4007 	mla	r0, r0, r7, r4
    6f0a:	2201      	movs	r2, #1
    6f0c:	f815 4b01 	ldrb.w	r4, [r5], #1
    6f10:	e7eb      	b.n	6eea <_strtol_l.isra.0+0x78>
    6f12:	270a      	movs	r7, #10
    6f14:	e7dd      	b.n	6ed2 <_strtol_l.isra.0+0x60>
    6f16:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    6f1a:	2b19      	cmp	r3, #25
    6f1c:	d801      	bhi.n	6f22 <_strtol_l.isra.0+0xb0>
    6f1e:	3c37      	subs	r4, #55	; 0x37
    6f20:	e7e8      	b.n	6ef4 <_strtol_l.isra.0+0x82>
    6f22:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    6f26:	2b19      	cmp	r3, #25
    6f28:	d804      	bhi.n	6f34 <_strtol_l.isra.0+0xc2>
    6f2a:	3c57      	subs	r4, #87	; 0x57
    6f2c:	e7e2      	b.n	6ef4 <_strtol_l.isra.0+0x82>
    6f2e:	f04f 32ff 	mov.w	r2, #4294967295
    6f32:	e7eb      	b.n	6f0c <_strtol_l.isra.0+0x9a>
    6f34:	1c53      	adds	r3, r2, #1
    6f36:	d108      	bne.n	6f4a <_strtol_l.isra.0+0xd8>
    6f38:	2322      	movs	r3, #34	; 0x22
    6f3a:	f8c8 3000 	str.w	r3, [r8]
    6f3e:	4608      	mov	r0, r1
    6f40:	f1ba 0f00 	cmp.w	sl, #0
    6f44:	d107      	bne.n	6f56 <_strtol_l.isra.0+0xe4>
    6f46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f4a:	b106      	cbz	r6, 6f4e <_strtol_l.isra.0+0xdc>
    6f4c:	4240      	negs	r0, r0
    6f4e:	f1ba 0f00 	cmp.w	sl, #0
    6f52:	d00c      	beq.n	6f6e <_strtol_l.isra.0+0xfc>
    6f54:	b122      	cbz	r2, 6f60 <_strtol_l.isra.0+0xee>
    6f56:	3d01      	subs	r5, #1
    6f58:	f8ca 5000 	str.w	r5, [sl]
    6f5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f60:	464d      	mov	r5, r9
    6f62:	e7f9      	b.n	6f58 <_strtol_l.isra.0+0xe6>
    6f64:	2430      	movs	r4, #48	; 0x30
    6f66:	2f00      	cmp	r7, #0
    6f68:	d1b3      	bne.n	6ed2 <_strtol_l.isra.0+0x60>
    6f6a:	2708      	movs	r7, #8
    6f6c:	e7b1      	b.n	6ed2 <_strtol_l.isra.0+0x60>
    6f6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00006f74 <strtol>:
    6f74:	4b08      	ldr	r3, [pc, #32]	; (6f98 <strtol+0x24>)
    6f76:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6f78:	681c      	ldr	r4, [r3, #0]
    6f7a:	4d08      	ldr	r5, [pc, #32]	; (6f9c <strtol+0x28>)
    6f7c:	6a23      	ldr	r3, [r4, #32]
    6f7e:	2b00      	cmp	r3, #0
    6f80:	bf08      	it	eq
    6f82:	462b      	moveq	r3, r5
    6f84:	9300      	str	r3, [sp, #0]
    6f86:	4613      	mov	r3, r2
    6f88:	460a      	mov	r2, r1
    6f8a:	4601      	mov	r1, r0
    6f8c:	4620      	mov	r0, r4
    6f8e:	f7ff ff70 	bl	6e72 <_strtol_l.isra.0>
    6f92:	b003      	add	sp, #12
    6f94:	bd30      	pop	{r4, r5, pc}
    6f96:	bf00      	nop
    6f98:	20000078 	.word	0x20000078
    6f9c:	200000dc 	.word	0x200000dc

00006fa0 <__ascii_wctomb>:
    6fa0:	b149      	cbz	r1, 6fb6 <__ascii_wctomb+0x16>
    6fa2:	2aff      	cmp	r2, #255	; 0xff
    6fa4:	bf85      	ittet	hi
    6fa6:	238a      	movhi	r3, #138	; 0x8a
    6fa8:	6003      	strhi	r3, [r0, #0]
    6faa:	700a      	strbls	r2, [r1, #0]
    6fac:	f04f 30ff 	movhi.w	r0, #4294967295
    6fb0:	bf98      	it	ls
    6fb2:	2001      	movls	r0, #1
    6fb4:	4770      	bx	lr
    6fb6:	4608      	mov	r0, r1
    6fb8:	4770      	bx	lr

00006fba <__malloc_lock>:
    6fba:	4770      	bx	lr

00006fbc <__malloc_unlock>:
    6fbc:	4770      	bx	lr

00006fbe <__ssputs_r>:
    6fbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6fc2:	688e      	ldr	r6, [r1, #8]
    6fc4:	429e      	cmp	r6, r3
    6fc6:	4682      	mov	sl, r0
    6fc8:	460c      	mov	r4, r1
    6fca:	4691      	mov	r9, r2
    6fcc:	4698      	mov	r8, r3
    6fce:	d835      	bhi.n	703c <__ssputs_r+0x7e>
    6fd0:	898a      	ldrh	r2, [r1, #12]
    6fd2:	f412 6f90 	tst.w	r2, #1152	; 0x480
    6fd6:	d031      	beq.n	703c <__ssputs_r+0x7e>
    6fd8:	6825      	ldr	r5, [r4, #0]
    6fda:	6909      	ldr	r1, [r1, #16]
    6fdc:	1a6f      	subs	r7, r5, r1
    6fde:	6965      	ldr	r5, [r4, #20]
    6fe0:	2302      	movs	r3, #2
    6fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    6fe6:	fb95 f5f3 	sdiv	r5, r5, r3
    6fea:	f108 0301 	add.w	r3, r8, #1
    6fee:	443b      	add	r3, r7
    6ff0:	429d      	cmp	r5, r3
    6ff2:	bf38      	it	cc
    6ff4:	461d      	movcc	r5, r3
    6ff6:	0553      	lsls	r3, r2, #21
    6ff8:	d531      	bpl.n	705e <__ssputs_r+0xa0>
    6ffa:	4629      	mov	r1, r5
    6ffc:	f7ff fe70 	bl	6ce0 <_malloc_r>
    7000:	4606      	mov	r6, r0
    7002:	b950      	cbnz	r0, 701a <__ssputs_r+0x5c>
    7004:	230c      	movs	r3, #12
    7006:	f8ca 3000 	str.w	r3, [sl]
    700a:	89a3      	ldrh	r3, [r4, #12]
    700c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7010:	81a3      	strh	r3, [r4, #12]
    7012:	f04f 30ff 	mov.w	r0, #4294967295
    7016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    701a:	463a      	mov	r2, r7
    701c:	6921      	ldr	r1, [r4, #16]
    701e:	f7ff fde3 	bl	6be8 <memcpy>
    7022:	89a3      	ldrh	r3, [r4, #12]
    7024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    7028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    702c:	81a3      	strh	r3, [r4, #12]
    702e:	6126      	str	r6, [r4, #16]
    7030:	6165      	str	r5, [r4, #20]
    7032:	443e      	add	r6, r7
    7034:	1bed      	subs	r5, r5, r7
    7036:	6026      	str	r6, [r4, #0]
    7038:	60a5      	str	r5, [r4, #8]
    703a:	4646      	mov	r6, r8
    703c:	4546      	cmp	r6, r8
    703e:	bf28      	it	cs
    7040:	4646      	movcs	r6, r8
    7042:	4632      	mov	r2, r6
    7044:	4649      	mov	r1, r9
    7046:	6820      	ldr	r0, [r4, #0]
    7048:	f7ff fdd9 	bl	6bfe <memmove>
    704c:	68a3      	ldr	r3, [r4, #8]
    704e:	1b9b      	subs	r3, r3, r6
    7050:	60a3      	str	r3, [r4, #8]
    7052:	6823      	ldr	r3, [r4, #0]
    7054:	441e      	add	r6, r3
    7056:	6026      	str	r6, [r4, #0]
    7058:	2000      	movs	r0, #0
    705a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    705e:	462a      	mov	r2, r5
    7060:	f000 fae6 	bl	7630 <_realloc_r>
    7064:	4606      	mov	r6, r0
    7066:	2800      	cmp	r0, #0
    7068:	d1e1      	bne.n	702e <__ssputs_r+0x70>
    706a:	6921      	ldr	r1, [r4, #16]
    706c:	4650      	mov	r0, sl
    706e:	f7ff fde9 	bl	6c44 <_free_r>
    7072:	e7c7      	b.n	7004 <__ssputs_r+0x46>

00007074 <_svfiprintf_r>:
    7074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7078:	b09d      	sub	sp, #116	; 0x74
    707a:	4680      	mov	r8, r0
    707c:	9303      	str	r3, [sp, #12]
    707e:	898b      	ldrh	r3, [r1, #12]
    7080:	061c      	lsls	r4, r3, #24
    7082:	460d      	mov	r5, r1
    7084:	4616      	mov	r6, r2
    7086:	d50f      	bpl.n	70a8 <_svfiprintf_r+0x34>
    7088:	690b      	ldr	r3, [r1, #16]
    708a:	b96b      	cbnz	r3, 70a8 <_svfiprintf_r+0x34>
    708c:	2140      	movs	r1, #64	; 0x40
    708e:	f7ff fe27 	bl	6ce0 <_malloc_r>
    7092:	6028      	str	r0, [r5, #0]
    7094:	6128      	str	r0, [r5, #16]
    7096:	b928      	cbnz	r0, 70a4 <_svfiprintf_r+0x30>
    7098:	230c      	movs	r3, #12
    709a:	f8c8 3000 	str.w	r3, [r8]
    709e:	f04f 30ff 	mov.w	r0, #4294967295
    70a2:	e0c5      	b.n	7230 <_svfiprintf_r+0x1bc>
    70a4:	2340      	movs	r3, #64	; 0x40
    70a6:	616b      	str	r3, [r5, #20]
    70a8:	2300      	movs	r3, #0
    70aa:	9309      	str	r3, [sp, #36]	; 0x24
    70ac:	2320      	movs	r3, #32
    70ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    70b2:	2330      	movs	r3, #48	; 0x30
    70b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    70b8:	f04f 0b01 	mov.w	fp, #1
    70bc:	4637      	mov	r7, r6
    70be:	463c      	mov	r4, r7
    70c0:	f814 3b01 	ldrb.w	r3, [r4], #1
    70c4:	2b00      	cmp	r3, #0
    70c6:	d13c      	bne.n	7142 <_svfiprintf_r+0xce>
    70c8:	ebb7 0a06 	subs.w	sl, r7, r6
    70cc:	d00b      	beq.n	70e6 <_svfiprintf_r+0x72>
    70ce:	4653      	mov	r3, sl
    70d0:	4632      	mov	r2, r6
    70d2:	4629      	mov	r1, r5
    70d4:	4640      	mov	r0, r8
    70d6:	f7ff ff72 	bl	6fbe <__ssputs_r>
    70da:	3001      	adds	r0, #1
    70dc:	f000 80a3 	beq.w	7226 <_svfiprintf_r+0x1b2>
    70e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    70e2:	4453      	add	r3, sl
    70e4:	9309      	str	r3, [sp, #36]	; 0x24
    70e6:	783b      	ldrb	r3, [r7, #0]
    70e8:	2b00      	cmp	r3, #0
    70ea:	f000 809c 	beq.w	7226 <_svfiprintf_r+0x1b2>
    70ee:	2300      	movs	r3, #0
    70f0:	f04f 32ff 	mov.w	r2, #4294967295
    70f4:	9304      	str	r3, [sp, #16]
    70f6:	9307      	str	r3, [sp, #28]
    70f8:	9205      	str	r2, [sp, #20]
    70fa:	9306      	str	r3, [sp, #24]
    70fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    7100:	931a      	str	r3, [sp, #104]	; 0x68
    7102:	2205      	movs	r2, #5
    7104:	7821      	ldrb	r1, [r4, #0]
    7106:	4850      	ldr	r0, [pc, #320]	; (7248 <_svfiprintf_r+0x1d4>)
    7108:	f000 fa42 	bl	7590 <memchr>
    710c:	1c67      	adds	r7, r4, #1
    710e:	9b04      	ldr	r3, [sp, #16]
    7110:	b9d8      	cbnz	r0, 714a <_svfiprintf_r+0xd6>
    7112:	06d9      	lsls	r1, r3, #27
    7114:	bf44      	itt	mi
    7116:	2220      	movmi	r2, #32
    7118:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    711c:	071a      	lsls	r2, r3, #28
    711e:	bf44      	itt	mi
    7120:	222b      	movmi	r2, #43	; 0x2b
    7122:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    7126:	7822      	ldrb	r2, [r4, #0]
    7128:	2a2a      	cmp	r2, #42	; 0x2a
    712a:	d016      	beq.n	715a <_svfiprintf_r+0xe6>
    712c:	9a07      	ldr	r2, [sp, #28]
    712e:	2100      	movs	r1, #0
    7130:	200a      	movs	r0, #10
    7132:	4627      	mov	r7, r4
    7134:	3401      	adds	r4, #1
    7136:	783b      	ldrb	r3, [r7, #0]
    7138:	3b30      	subs	r3, #48	; 0x30
    713a:	2b09      	cmp	r3, #9
    713c:	d951      	bls.n	71e2 <_svfiprintf_r+0x16e>
    713e:	b1c9      	cbz	r1, 7174 <_svfiprintf_r+0x100>
    7140:	e011      	b.n	7166 <_svfiprintf_r+0xf2>
    7142:	2b25      	cmp	r3, #37	; 0x25
    7144:	d0c0      	beq.n	70c8 <_svfiprintf_r+0x54>
    7146:	4627      	mov	r7, r4
    7148:	e7b9      	b.n	70be <_svfiprintf_r+0x4a>
    714a:	4a3f      	ldr	r2, [pc, #252]	; (7248 <_svfiprintf_r+0x1d4>)
    714c:	1a80      	subs	r0, r0, r2
    714e:	fa0b f000 	lsl.w	r0, fp, r0
    7152:	4318      	orrs	r0, r3
    7154:	9004      	str	r0, [sp, #16]
    7156:	463c      	mov	r4, r7
    7158:	e7d3      	b.n	7102 <_svfiprintf_r+0x8e>
    715a:	9a03      	ldr	r2, [sp, #12]
    715c:	1d11      	adds	r1, r2, #4
    715e:	6812      	ldr	r2, [r2, #0]
    7160:	9103      	str	r1, [sp, #12]
    7162:	2a00      	cmp	r2, #0
    7164:	db01      	blt.n	716a <_svfiprintf_r+0xf6>
    7166:	9207      	str	r2, [sp, #28]
    7168:	e004      	b.n	7174 <_svfiprintf_r+0x100>
    716a:	4252      	negs	r2, r2
    716c:	f043 0302 	orr.w	r3, r3, #2
    7170:	9207      	str	r2, [sp, #28]
    7172:	9304      	str	r3, [sp, #16]
    7174:	783b      	ldrb	r3, [r7, #0]
    7176:	2b2e      	cmp	r3, #46	; 0x2e
    7178:	d10e      	bne.n	7198 <_svfiprintf_r+0x124>
    717a:	787b      	ldrb	r3, [r7, #1]
    717c:	2b2a      	cmp	r3, #42	; 0x2a
    717e:	f107 0101 	add.w	r1, r7, #1
    7182:	d132      	bne.n	71ea <_svfiprintf_r+0x176>
    7184:	9b03      	ldr	r3, [sp, #12]
    7186:	1d1a      	adds	r2, r3, #4
    7188:	681b      	ldr	r3, [r3, #0]
    718a:	9203      	str	r2, [sp, #12]
    718c:	2b00      	cmp	r3, #0
    718e:	bfb8      	it	lt
    7190:	f04f 33ff 	movlt.w	r3, #4294967295
    7194:	3702      	adds	r7, #2
    7196:	9305      	str	r3, [sp, #20]
    7198:	4c2c      	ldr	r4, [pc, #176]	; (724c <_svfiprintf_r+0x1d8>)
    719a:	7839      	ldrb	r1, [r7, #0]
    719c:	2203      	movs	r2, #3
    719e:	4620      	mov	r0, r4
    71a0:	f000 f9f6 	bl	7590 <memchr>
    71a4:	b138      	cbz	r0, 71b6 <_svfiprintf_r+0x142>
    71a6:	2340      	movs	r3, #64	; 0x40
    71a8:	1b00      	subs	r0, r0, r4
    71aa:	fa03 f000 	lsl.w	r0, r3, r0
    71ae:	9b04      	ldr	r3, [sp, #16]
    71b0:	4303      	orrs	r3, r0
    71b2:	9304      	str	r3, [sp, #16]
    71b4:	3701      	adds	r7, #1
    71b6:	7839      	ldrb	r1, [r7, #0]
    71b8:	4825      	ldr	r0, [pc, #148]	; (7250 <_svfiprintf_r+0x1dc>)
    71ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    71be:	2206      	movs	r2, #6
    71c0:	1c7e      	adds	r6, r7, #1
    71c2:	f000 f9e5 	bl	7590 <memchr>
    71c6:	2800      	cmp	r0, #0
    71c8:	d035      	beq.n	7236 <_svfiprintf_r+0x1c2>
    71ca:	4b22      	ldr	r3, [pc, #136]	; (7254 <_svfiprintf_r+0x1e0>)
    71cc:	b9fb      	cbnz	r3, 720e <_svfiprintf_r+0x19a>
    71ce:	9b03      	ldr	r3, [sp, #12]
    71d0:	3307      	adds	r3, #7
    71d2:	f023 0307 	bic.w	r3, r3, #7
    71d6:	3308      	adds	r3, #8
    71d8:	9303      	str	r3, [sp, #12]
    71da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    71dc:	444b      	add	r3, r9
    71de:	9309      	str	r3, [sp, #36]	; 0x24
    71e0:	e76c      	b.n	70bc <_svfiprintf_r+0x48>
    71e2:	fb00 3202 	mla	r2, r0, r2, r3
    71e6:	2101      	movs	r1, #1
    71e8:	e7a3      	b.n	7132 <_svfiprintf_r+0xbe>
    71ea:	2300      	movs	r3, #0
    71ec:	9305      	str	r3, [sp, #20]
    71ee:	4618      	mov	r0, r3
    71f0:	240a      	movs	r4, #10
    71f2:	460f      	mov	r7, r1
    71f4:	3101      	adds	r1, #1
    71f6:	783a      	ldrb	r2, [r7, #0]
    71f8:	3a30      	subs	r2, #48	; 0x30
    71fa:	2a09      	cmp	r2, #9
    71fc:	d903      	bls.n	7206 <_svfiprintf_r+0x192>
    71fe:	2b00      	cmp	r3, #0
    7200:	d0ca      	beq.n	7198 <_svfiprintf_r+0x124>
    7202:	9005      	str	r0, [sp, #20]
    7204:	e7c8      	b.n	7198 <_svfiprintf_r+0x124>
    7206:	fb04 2000 	mla	r0, r4, r0, r2
    720a:	2301      	movs	r3, #1
    720c:	e7f1      	b.n	71f2 <_svfiprintf_r+0x17e>
    720e:	ab03      	add	r3, sp, #12
    7210:	9300      	str	r3, [sp, #0]
    7212:	462a      	mov	r2, r5
    7214:	4b10      	ldr	r3, [pc, #64]	; (7258 <_svfiprintf_r+0x1e4>)
    7216:	a904      	add	r1, sp, #16
    7218:	4640      	mov	r0, r8
    721a:	f3af 8000 	nop.w
    721e:	f1b0 3fff 	cmp.w	r0, #4294967295
    7222:	4681      	mov	r9, r0
    7224:	d1d9      	bne.n	71da <_svfiprintf_r+0x166>
    7226:	89ab      	ldrh	r3, [r5, #12]
    7228:	065b      	lsls	r3, r3, #25
    722a:	f53f af38 	bmi.w	709e <_svfiprintf_r+0x2a>
    722e:	9809      	ldr	r0, [sp, #36]	; 0x24
    7230:	b01d      	add	sp, #116	; 0x74
    7232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7236:	ab03      	add	r3, sp, #12
    7238:	9300      	str	r3, [sp, #0]
    723a:	462a      	mov	r2, r5
    723c:	4b06      	ldr	r3, [pc, #24]	; (7258 <_svfiprintf_r+0x1e4>)
    723e:	a904      	add	r1, sp, #16
    7240:	4640      	mov	r0, r8
    7242:	f000 f881 	bl	7348 <_printf_i>
    7246:	e7ea      	b.n	721e <_svfiprintf_r+0x1aa>
    7248:	0000989b 	.word	0x0000989b
    724c:	000098a1 	.word	0x000098a1
    7250:	000098a5 	.word	0x000098a5
    7254:	00000000 	.word	0x00000000
    7258:	00006fbf 	.word	0x00006fbf

0000725c <_printf_common>:
    725c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7260:	4691      	mov	r9, r2
    7262:	461f      	mov	r7, r3
    7264:	688a      	ldr	r2, [r1, #8]
    7266:	690b      	ldr	r3, [r1, #16]
    7268:	f8dd 8020 	ldr.w	r8, [sp, #32]
    726c:	4293      	cmp	r3, r2
    726e:	bfb8      	it	lt
    7270:	4613      	movlt	r3, r2
    7272:	f8c9 3000 	str.w	r3, [r9]
    7276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    727a:	4606      	mov	r6, r0
    727c:	460c      	mov	r4, r1
    727e:	b112      	cbz	r2, 7286 <_printf_common+0x2a>
    7280:	3301      	adds	r3, #1
    7282:	f8c9 3000 	str.w	r3, [r9]
    7286:	6823      	ldr	r3, [r4, #0]
    7288:	0699      	lsls	r1, r3, #26
    728a:	bf42      	ittt	mi
    728c:	f8d9 3000 	ldrmi.w	r3, [r9]
    7290:	3302      	addmi	r3, #2
    7292:	f8c9 3000 	strmi.w	r3, [r9]
    7296:	6825      	ldr	r5, [r4, #0]
    7298:	f015 0506 	ands.w	r5, r5, #6
    729c:	d107      	bne.n	72ae <_printf_common+0x52>
    729e:	f104 0a19 	add.w	sl, r4, #25
    72a2:	68e3      	ldr	r3, [r4, #12]
    72a4:	f8d9 2000 	ldr.w	r2, [r9]
    72a8:	1a9b      	subs	r3, r3, r2
    72aa:	429d      	cmp	r5, r3
    72ac:	db29      	blt.n	7302 <_printf_common+0xa6>
    72ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    72b2:	6822      	ldr	r2, [r4, #0]
    72b4:	3300      	adds	r3, #0
    72b6:	bf18      	it	ne
    72b8:	2301      	movne	r3, #1
    72ba:	0692      	lsls	r2, r2, #26
    72bc:	d42e      	bmi.n	731c <_printf_common+0xc0>
    72be:	f104 0243 	add.w	r2, r4, #67	; 0x43
    72c2:	4639      	mov	r1, r7
    72c4:	4630      	mov	r0, r6
    72c6:	47c0      	blx	r8
    72c8:	3001      	adds	r0, #1
    72ca:	d021      	beq.n	7310 <_printf_common+0xb4>
    72cc:	6823      	ldr	r3, [r4, #0]
    72ce:	68e5      	ldr	r5, [r4, #12]
    72d0:	f8d9 2000 	ldr.w	r2, [r9]
    72d4:	f003 0306 	and.w	r3, r3, #6
    72d8:	2b04      	cmp	r3, #4
    72da:	bf08      	it	eq
    72dc:	1aad      	subeq	r5, r5, r2
    72de:	68a3      	ldr	r3, [r4, #8]
    72e0:	6922      	ldr	r2, [r4, #16]
    72e2:	bf0c      	ite	eq
    72e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    72e8:	2500      	movne	r5, #0
    72ea:	4293      	cmp	r3, r2
    72ec:	bfc4      	itt	gt
    72ee:	1a9b      	subgt	r3, r3, r2
    72f0:	18ed      	addgt	r5, r5, r3
    72f2:	f04f 0900 	mov.w	r9, #0
    72f6:	341a      	adds	r4, #26
    72f8:	454d      	cmp	r5, r9
    72fa:	d11b      	bne.n	7334 <_printf_common+0xd8>
    72fc:	2000      	movs	r0, #0
    72fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7302:	2301      	movs	r3, #1
    7304:	4652      	mov	r2, sl
    7306:	4639      	mov	r1, r7
    7308:	4630      	mov	r0, r6
    730a:	47c0      	blx	r8
    730c:	3001      	adds	r0, #1
    730e:	d103      	bne.n	7318 <_printf_common+0xbc>
    7310:	f04f 30ff 	mov.w	r0, #4294967295
    7314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7318:	3501      	adds	r5, #1
    731a:	e7c2      	b.n	72a2 <_printf_common+0x46>
    731c:	18e1      	adds	r1, r4, r3
    731e:	1c5a      	adds	r2, r3, #1
    7320:	2030      	movs	r0, #48	; 0x30
    7322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    7326:	4422      	add	r2, r4
    7328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    732c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    7330:	3302      	adds	r3, #2
    7332:	e7c4      	b.n	72be <_printf_common+0x62>
    7334:	2301      	movs	r3, #1
    7336:	4622      	mov	r2, r4
    7338:	4639      	mov	r1, r7
    733a:	4630      	mov	r0, r6
    733c:	47c0      	blx	r8
    733e:	3001      	adds	r0, #1
    7340:	d0e6      	beq.n	7310 <_printf_common+0xb4>
    7342:	f109 0901 	add.w	r9, r9, #1
    7346:	e7d7      	b.n	72f8 <_printf_common+0x9c>

00007348 <_printf_i>:
    7348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    734c:	4617      	mov	r7, r2
    734e:	7e0a      	ldrb	r2, [r1, #24]
    7350:	b085      	sub	sp, #20
    7352:	2a6e      	cmp	r2, #110	; 0x6e
    7354:	4698      	mov	r8, r3
    7356:	4606      	mov	r6, r0
    7358:	460c      	mov	r4, r1
    735a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    735c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    7360:	f000 80bc 	beq.w	74dc <_printf_i+0x194>
    7364:	d81a      	bhi.n	739c <_printf_i+0x54>
    7366:	2a63      	cmp	r2, #99	; 0x63
    7368:	d02e      	beq.n	73c8 <_printf_i+0x80>
    736a:	d80a      	bhi.n	7382 <_printf_i+0x3a>
    736c:	2a00      	cmp	r2, #0
    736e:	f000 80c8 	beq.w	7502 <_printf_i+0x1ba>
    7372:	2a58      	cmp	r2, #88	; 0x58
    7374:	f000 808a 	beq.w	748c <_printf_i+0x144>
    7378:	f104 0542 	add.w	r5, r4, #66	; 0x42
    737c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    7380:	e02a      	b.n	73d8 <_printf_i+0x90>
    7382:	2a64      	cmp	r2, #100	; 0x64
    7384:	d001      	beq.n	738a <_printf_i+0x42>
    7386:	2a69      	cmp	r2, #105	; 0x69
    7388:	d1f6      	bne.n	7378 <_printf_i+0x30>
    738a:	6821      	ldr	r1, [r4, #0]
    738c:	681a      	ldr	r2, [r3, #0]
    738e:	f011 0f80 	tst.w	r1, #128	; 0x80
    7392:	d023      	beq.n	73dc <_printf_i+0x94>
    7394:	1d11      	adds	r1, r2, #4
    7396:	6019      	str	r1, [r3, #0]
    7398:	6813      	ldr	r3, [r2, #0]
    739a:	e027      	b.n	73ec <_printf_i+0xa4>
    739c:	2a73      	cmp	r2, #115	; 0x73
    739e:	f000 80b4 	beq.w	750a <_printf_i+0x1c2>
    73a2:	d808      	bhi.n	73b6 <_printf_i+0x6e>
    73a4:	2a6f      	cmp	r2, #111	; 0x6f
    73a6:	d02a      	beq.n	73fe <_printf_i+0xb6>
    73a8:	2a70      	cmp	r2, #112	; 0x70
    73aa:	d1e5      	bne.n	7378 <_printf_i+0x30>
    73ac:	680a      	ldr	r2, [r1, #0]
    73ae:	f042 0220 	orr.w	r2, r2, #32
    73b2:	600a      	str	r2, [r1, #0]
    73b4:	e003      	b.n	73be <_printf_i+0x76>
    73b6:	2a75      	cmp	r2, #117	; 0x75
    73b8:	d021      	beq.n	73fe <_printf_i+0xb6>
    73ba:	2a78      	cmp	r2, #120	; 0x78
    73bc:	d1dc      	bne.n	7378 <_printf_i+0x30>
    73be:	2278      	movs	r2, #120	; 0x78
    73c0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    73c4:	496e      	ldr	r1, [pc, #440]	; (7580 <_printf_i+0x238>)
    73c6:	e064      	b.n	7492 <_printf_i+0x14a>
    73c8:	681a      	ldr	r2, [r3, #0]
    73ca:	f101 0542 	add.w	r5, r1, #66	; 0x42
    73ce:	1d11      	adds	r1, r2, #4
    73d0:	6019      	str	r1, [r3, #0]
    73d2:	6813      	ldr	r3, [r2, #0]
    73d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    73d8:	2301      	movs	r3, #1
    73da:	e0a3      	b.n	7524 <_printf_i+0x1dc>
    73dc:	f011 0f40 	tst.w	r1, #64	; 0x40
    73e0:	f102 0104 	add.w	r1, r2, #4
    73e4:	6019      	str	r1, [r3, #0]
    73e6:	d0d7      	beq.n	7398 <_printf_i+0x50>
    73e8:	f9b2 3000 	ldrsh.w	r3, [r2]
    73ec:	2b00      	cmp	r3, #0
    73ee:	da03      	bge.n	73f8 <_printf_i+0xb0>
    73f0:	222d      	movs	r2, #45	; 0x2d
    73f2:	425b      	negs	r3, r3
    73f4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    73f8:	4962      	ldr	r1, [pc, #392]	; (7584 <_printf_i+0x23c>)
    73fa:	220a      	movs	r2, #10
    73fc:	e017      	b.n	742e <_printf_i+0xe6>
    73fe:	6820      	ldr	r0, [r4, #0]
    7400:	6819      	ldr	r1, [r3, #0]
    7402:	f010 0f80 	tst.w	r0, #128	; 0x80
    7406:	d003      	beq.n	7410 <_printf_i+0xc8>
    7408:	1d08      	adds	r0, r1, #4
    740a:	6018      	str	r0, [r3, #0]
    740c:	680b      	ldr	r3, [r1, #0]
    740e:	e006      	b.n	741e <_printf_i+0xd6>
    7410:	f010 0f40 	tst.w	r0, #64	; 0x40
    7414:	f101 0004 	add.w	r0, r1, #4
    7418:	6018      	str	r0, [r3, #0]
    741a:	d0f7      	beq.n	740c <_printf_i+0xc4>
    741c:	880b      	ldrh	r3, [r1, #0]
    741e:	4959      	ldr	r1, [pc, #356]	; (7584 <_printf_i+0x23c>)
    7420:	2a6f      	cmp	r2, #111	; 0x6f
    7422:	bf14      	ite	ne
    7424:	220a      	movne	r2, #10
    7426:	2208      	moveq	r2, #8
    7428:	2000      	movs	r0, #0
    742a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    742e:	6865      	ldr	r5, [r4, #4]
    7430:	60a5      	str	r5, [r4, #8]
    7432:	2d00      	cmp	r5, #0
    7434:	f2c0 809c 	blt.w	7570 <_printf_i+0x228>
    7438:	6820      	ldr	r0, [r4, #0]
    743a:	f020 0004 	bic.w	r0, r0, #4
    743e:	6020      	str	r0, [r4, #0]
    7440:	2b00      	cmp	r3, #0
    7442:	d13f      	bne.n	74c4 <_printf_i+0x17c>
    7444:	2d00      	cmp	r5, #0
    7446:	f040 8095 	bne.w	7574 <_printf_i+0x22c>
    744a:	4675      	mov	r5, lr
    744c:	2a08      	cmp	r2, #8
    744e:	d10b      	bne.n	7468 <_printf_i+0x120>
    7450:	6823      	ldr	r3, [r4, #0]
    7452:	07da      	lsls	r2, r3, #31
    7454:	d508      	bpl.n	7468 <_printf_i+0x120>
    7456:	6923      	ldr	r3, [r4, #16]
    7458:	6862      	ldr	r2, [r4, #4]
    745a:	429a      	cmp	r2, r3
    745c:	bfde      	ittt	le
    745e:	2330      	movle	r3, #48	; 0x30
    7460:	f805 3c01 	strble.w	r3, [r5, #-1]
    7464:	f105 35ff 	addle.w	r5, r5, #4294967295
    7468:	ebae 0305 	sub.w	r3, lr, r5
    746c:	6123      	str	r3, [r4, #16]
    746e:	f8cd 8000 	str.w	r8, [sp]
    7472:	463b      	mov	r3, r7
    7474:	aa03      	add	r2, sp, #12
    7476:	4621      	mov	r1, r4
    7478:	4630      	mov	r0, r6
    747a:	f7ff feef 	bl	725c <_printf_common>
    747e:	3001      	adds	r0, #1
    7480:	d155      	bne.n	752e <_printf_i+0x1e6>
    7482:	f04f 30ff 	mov.w	r0, #4294967295
    7486:	b005      	add	sp, #20
    7488:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    748c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    7490:	493c      	ldr	r1, [pc, #240]	; (7584 <_printf_i+0x23c>)
    7492:	6822      	ldr	r2, [r4, #0]
    7494:	6818      	ldr	r0, [r3, #0]
    7496:	f012 0f80 	tst.w	r2, #128	; 0x80
    749a:	f100 0504 	add.w	r5, r0, #4
    749e:	601d      	str	r5, [r3, #0]
    74a0:	d001      	beq.n	74a6 <_printf_i+0x15e>
    74a2:	6803      	ldr	r3, [r0, #0]
    74a4:	e002      	b.n	74ac <_printf_i+0x164>
    74a6:	0655      	lsls	r5, r2, #25
    74a8:	d5fb      	bpl.n	74a2 <_printf_i+0x15a>
    74aa:	8803      	ldrh	r3, [r0, #0]
    74ac:	07d0      	lsls	r0, r2, #31
    74ae:	bf44      	itt	mi
    74b0:	f042 0220 	orrmi.w	r2, r2, #32
    74b4:	6022      	strmi	r2, [r4, #0]
    74b6:	b91b      	cbnz	r3, 74c0 <_printf_i+0x178>
    74b8:	6822      	ldr	r2, [r4, #0]
    74ba:	f022 0220 	bic.w	r2, r2, #32
    74be:	6022      	str	r2, [r4, #0]
    74c0:	2210      	movs	r2, #16
    74c2:	e7b1      	b.n	7428 <_printf_i+0xe0>
    74c4:	4675      	mov	r5, lr
    74c6:	fbb3 f0f2 	udiv	r0, r3, r2
    74ca:	fb02 3310 	mls	r3, r2, r0, r3
    74ce:	5ccb      	ldrb	r3, [r1, r3]
    74d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
    74d4:	4603      	mov	r3, r0
    74d6:	2800      	cmp	r0, #0
    74d8:	d1f5      	bne.n	74c6 <_printf_i+0x17e>
    74da:	e7b7      	b.n	744c <_printf_i+0x104>
    74dc:	6808      	ldr	r0, [r1, #0]
    74de:	681a      	ldr	r2, [r3, #0]
    74e0:	6949      	ldr	r1, [r1, #20]
    74e2:	f010 0f80 	tst.w	r0, #128	; 0x80
    74e6:	d004      	beq.n	74f2 <_printf_i+0x1aa>
    74e8:	1d10      	adds	r0, r2, #4
    74ea:	6018      	str	r0, [r3, #0]
    74ec:	6813      	ldr	r3, [r2, #0]
    74ee:	6019      	str	r1, [r3, #0]
    74f0:	e007      	b.n	7502 <_printf_i+0x1ba>
    74f2:	f010 0f40 	tst.w	r0, #64	; 0x40
    74f6:	f102 0004 	add.w	r0, r2, #4
    74fa:	6018      	str	r0, [r3, #0]
    74fc:	6813      	ldr	r3, [r2, #0]
    74fe:	d0f6      	beq.n	74ee <_printf_i+0x1a6>
    7500:	8019      	strh	r1, [r3, #0]
    7502:	2300      	movs	r3, #0
    7504:	6123      	str	r3, [r4, #16]
    7506:	4675      	mov	r5, lr
    7508:	e7b1      	b.n	746e <_printf_i+0x126>
    750a:	681a      	ldr	r2, [r3, #0]
    750c:	1d11      	adds	r1, r2, #4
    750e:	6019      	str	r1, [r3, #0]
    7510:	6815      	ldr	r5, [r2, #0]
    7512:	6862      	ldr	r2, [r4, #4]
    7514:	2100      	movs	r1, #0
    7516:	4628      	mov	r0, r5
    7518:	f000 f83a 	bl	7590 <memchr>
    751c:	b108      	cbz	r0, 7522 <_printf_i+0x1da>
    751e:	1b40      	subs	r0, r0, r5
    7520:	6060      	str	r0, [r4, #4]
    7522:	6863      	ldr	r3, [r4, #4]
    7524:	6123      	str	r3, [r4, #16]
    7526:	2300      	movs	r3, #0
    7528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    752c:	e79f      	b.n	746e <_printf_i+0x126>
    752e:	6923      	ldr	r3, [r4, #16]
    7530:	462a      	mov	r2, r5
    7532:	4639      	mov	r1, r7
    7534:	4630      	mov	r0, r6
    7536:	47c0      	blx	r8
    7538:	3001      	adds	r0, #1
    753a:	d0a2      	beq.n	7482 <_printf_i+0x13a>
    753c:	6823      	ldr	r3, [r4, #0]
    753e:	079b      	lsls	r3, r3, #30
    7540:	d507      	bpl.n	7552 <_printf_i+0x20a>
    7542:	2500      	movs	r5, #0
    7544:	f104 0919 	add.w	r9, r4, #25
    7548:	68e3      	ldr	r3, [r4, #12]
    754a:	9a03      	ldr	r2, [sp, #12]
    754c:	1a9b      	subs	r3, r3, r2
    754e:	429d      	cmp	r5, r3
    7550:	db05      	blt.n	755e <_printf_i+0x216>
    7552:	68e0      	ldr	r0, [r4, #12]
    7554:	9b03      	ldr	r3, [sp, #12]
    7556:	4298      	cmp	r0, r3
    7558:	bfb8      	it	lt
    755a:	4618      	movlt	r0, r3
    755c:	e793      	b.n	7486 <_printf_i+0x13e>
    755e:	2301      	movs	r3, #1
    7560:	464a      	mov	r2, r9
    7562:	4639      	mov	r1, r7
    7564:	4630      	mov	r0, r6
    7566:	47c0      	blx	r8
    7568:	3001      	adds	r0, #1
    756a:	d08a      	beq.n	7482 <_printf_i+0x13a>
    756c:	3501      	adds	r5, #1
    756e:	e7eb      	b.n	7548 <_printf_i+0x200>
    7570:	2b00      	cmp	r3, #0
    7572:	d1a7      	bne.n	74c4 <_printf_i+0x17c>
    7574:	780b      	ldrb	r3, [r1, #0]
    7576:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    757a:	f104 0542 	add.w	r5, r4, #66	; 0x42
    757e:	e765      	b.n	744c <_printf_i+0x104>
    7580:	000098bd 	.word	0x000098bd
    7584:	000098ac 	.word	0x000098ac
	...

00007590 <memchr>:
    7590:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    7594:	2a10      	cmp	r2, #16
    7596:	db2b      	blt.n	75f0 <memchr+0x60>
    7598:	f010 0f07 	tst.w	r0, #7
    759c:	d008      	beq.n	75b0 <memchr+0x20>
    759e:	f810 3b01 	ldrb.w	r3, [r0], #1
    75a2:	3a01      	subs	r2, #1
    75a4:	428b      	cmp	r3, r1
    75a6:	d02d      	beq.n	7604 <memchr+0x74>
    75a8:	f010 0f07 	tst.w	r0, #7
    75ac:	b342      	cbz	r2, 7600 <memchr+0x70>
    75ae:	d1f6      	bne.n	759e <memchr+0xe>
    75b0:	b4f0      	push	{r4, r5, r6, r7}
    75b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    75b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    75ba:	f022 0407 	bic.w	r4, r2, #7
    75be:	f07f 0700 	mvns.w	r7, #0
    75c2:	2300      	movs	r3, #0
    75c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    75c8:	3c08      	subs	r4, #8
    75ca:	ea85 0501 	eor.w	r5, r5, r1
    75ce:	ea86 0601 	eor.w	r6, r6, r1
    75d2:	fa85 f547 	uadd8	r5, r5, r7
    75d6:	faa3 f587 	sel	r5, r3, r7
    75da:	fa86 f647 	uadd8	r6, r6, r7
    75de:	faa5 f687 	sel	r6, r5, r7
    75e2:	b98e      	cbnz	r6, 7608 <memchr+0x78>
    75e4:	d1ee      	bne.n	75c4 <memchr+0x34>
    75e6:	bcf0      	pop	{r4, r5, r6, r7}
    75e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    75ec:	f002 0207 	and.w	r2, r2, #7
    75f0:	b132      	cbz	r2, 7600 <memchr+0x70>
    75f2:	f810 3b01 	ldrb.w	r3, [r0], #1
    75f6:	3a01      	subs	r2, #1
    75f8:	ea83 0301 	eor.w	r3, r3, r1
    75fc:	b113      	cbz	r3, 7604 <memchr+0x74>
    75fe:	d1f8      	bne.n	75f2 <memchr+0x62>
    7600:	2000      	movs	r0, #0
    7602:	4770      	bx	lr
    7604:	3801      	subs	r0, #1
    7606:	4770      	bx	lr
    7608:	2d00      	cmp	r5, #0
    760a:	bf06      	itte	eq
    760c:	4635      	moveq	r5, r6
    760e:	3803      	subeq	r0, #3
    7610:	3807      	subne	r0, #7
    7612:	f015 0f01 	tst.w	r5, #1
    7616:	d107      	bne.n	7628 <memchr+0x98>
    7618:	3001      	adds	r0, #1
    761a:	f415 7f80 	tst.w	r5, #256	; 0x100
    761e:	bf02      	ittt	eq
    7620:	3001      	addeq	r0, #1
    7622:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    7626:	3001      	addeq	r0, #1
    7628:	bcf0      	pop	{r4, r5, r6, r7}
    762a:	3801      	subs	r0, #1
    762c:	4770      	bx	lr
    762e:	bf00      	nop

00007630 <_realloc_r>:
    7630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7632:	4607      	mov	r7, r0
    7634:	4614      	mov	r4, r2
    7636:	460e      	mov	r6, r1
    7638:	b921      	cbnz	r1, 7644 <_realloc_r+0x14>
    763a:	4611      	mov	r1, r2
    763c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7640:	f7ff bb4e 	b.w	6ce0 <_malloc_r>
    7644:	b922      	cbnz	r2, 7650 <_realloc_r+0x20>
    7646:	f7ff fafd 	bl	6c44 <_free_r>
    764a:	4625      	mov	r5, r4
    764c:	4628      	mov	r0, r5
    764e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7650:	f000 f814 	bl	767c <_malloc_usable_size_r>
    7654:	4284      	cmp	r4, r0
    7656:	d90f      	bls.n	7678 <_realloc_r+0x48>
    7658:	4621      	mov	r1, r4
    765a:	4638      	mov	r0, r7
    765c:	f7ff fb40 	bl	6ce0 <_malloc_r>
    7660:	4605      	mov	r5, r0
    7662:	2800      	cmp	r0, #0
    7664:	d0f2      	beq.n	764c <_realloc_r+0x1c>
    7666:	4631      	mov	r1, r6
    7668:	4622      	mov	r2, r4
    766a:	f7ff fabd 	bl	6be8 <memcpy>
    766e:	4631      	mov	r1, r6
    7670:	4638      	mov	r0, r7
    7672:	f7ff fae7 	bl	6c44 <_free_r>
    7676:	e7e9      	b.n	764c <_realloc_r+0x1c>
    7678:	4635      	mov	r5, r6
    767a:	e7e7      	b.n	764c <_realloc_r+0x1c>

0000767c <_malloc_usable_size_r>:
    767c:	f851 0c04 	ldr.w	r0, [r1, #-4]
    7680:	2800      	cmp	r0, #0
    7682:	f1a0 0004 	sub.w	r0, r0, #4
    7686:	bfbc      	itt	lt
    7688:	580b      	ldrlt	r3, [r1, r0]
    768a:	18c0      	addlt	r0, r0, r3
    768c:	4770      	bx	lr
    768e:	0000      	movs	r0, r0
    7690:	2a2a2a2a 	.word	0x2a2a2a2a
    7694:	2a2a2a2a 	.word	0x2a2a2a2a
    7698:	2a2a2a2a 	.word	0x2a2a2a2a
    769c:	2a2a2a2a 	.word	0x2a2a2a2a
    76a0:	2a2a2a2a 	.word	0x2a2a2a2a
    76a4:	2a2a2a2a 	.word	0x2a2a2a2a
    76a8:	2a2a2a2a 	.word	0x2a2a2a2a
    76ac:	2a2a2a2a 	.word	0x2a2a2a2a
    76b0:	2a2a2a2a 	.word	0x2a2a2a2a
    76b4:	2a2a2a2a 	.word	0x2a2a2a2a
    76b8:	2a2a2a2a 	.word	0x2a2a2a2a
    76bc:	2a2a2a2a 	.word	0x2a2a2a2a
    76c0:	2a2a2a2a 	.word	0x2a2a2a2a
    76c4:	2a2a2a2a 	.word	0x2a2a2a2a
    76c8:	00002a2a 	.word	0x00002a2a
    76cc:	2a2a2a2a 	.word	0x2a2a2a2a
    76d0:	2a2a2a2a 	.word	0x2a2a2a2a
    76d4:	2a2a2a2a 	.word	0x2a2a2a2a
    76d8:	532a2a2a 	.word	0x532a2a2a
    76dc:	4b434154 	.word	0x4b434154
    76e0:	45564f20 	.word	0x45564f20
    76e4:	4f4c4652 	.word	0x4f4c4652
    76e8:	45442057 	.word	0x45442057
    76ec:	54434554 	.word	0x54434554
    76f0:	2a2a4445 	.word	0x2a2a4445
    76f4:	2a2a2a2a 	.word	0x2a2a2a2a
    76f8:	2a2a2a2a 	.word	0x2a2a2a2a
    76fc:	2a2a2a2a 	.word	0x2a2a2a2a
    7700:	2a2a2a2a 	.word	0x2a2a2a2a
    7704:	00002a2a 	.word	0x00002a2a
    7708:	6b736154 	.word	0x6b736154
    770c:	6e614820 	.word	0x6e614820
    7710:	20656c64 	.word	0x20656c64
    7714:	6425202d 	.word	0x6425202d
    7718:	00000a0d 	.word	0x00000a0d
    771c:	2a2a2a2a 	.word	0x2a2a2a2a
    7720:	2a2a2a2a 	.word	0x2a2a2a2a
    7724:	2a2a2a2a 	.word	0x2a2a2a2a
    7728:	4d2a2a2a 	.word	0x4d2a2a2a
    772c:	4f4c4c41 	.word	0x4f4c4c41
    7730:	41462043 	.word	0x41462043
    7734:	52554c49 	.word	0x52554c49
    7738:	45442045 	.word	0x45442045
    773c:	54434554 	.word	0x54434554
    7740:	2a2a4445 	.word	0x2a2a4445
    7744:	2a2a2a2a 	.word	0x2a2a2a2a
    7748:	2a2a2a2a 	.word	0x2a2a2a2a
    774c:	2a2a2a2a 	.word	0x2a2a2a2a
    7750:	2a2a2a2a 	.word	0x2a2a2a2a
    7754:	00002a2a 	.word	0x00002a2a
    7758:	41204e49 	.word	0x41204e49
    775c:	5f304344 	.word	0x5f304344
    7760:	61682030 	.word	0x61682030
    7764:	656c646e 	.word	0x656c646e
    7768:	00000072 	.word	0x00000072
    776c:	41204e49 	.word	0x41204e49
    7770:	5f304344 	.word	0x5f304344
    7774:	61682031 	.word	0x61682031
    7778:	656c646e 	.word	0x656c646e
    777c:	00000072 	.word	0x00000072
    7780:	41544f46 	.word	0x41544f46
    7784:	43203a20 	.word	0x43203a20
    7788:	4b434548 	.word	0x4b434548
    778c:	20474e49 	.word	0x20474e49
    7790:	20524f46 	.word	0x20524f46
    7794:	45444f4d 	.word	0x45444f4d
    7798:	4946204d 	.word	0x4946204d
    779c:	41574d52 	.word	0x41574d52
    77a0:	55204552 	.word	0x55204552
    77a4:	54414450 	.word	0x54414450
    77a8:	52462045 	.word	0x52462045
    77ac:	41204d4f 	.word	0x41204d4f
    77b0:	56205249 	.word	0x56205249
    77b4:	41544e41 	.word	0x41544e41
    77b8:	53204547 	.word	0x53204547
    77bc:	45565245 	.word	0x45565245
    77c0:	00002e52 	.word	0x00002e52
    77c4:	00004b4f 	.word	0x00004b4f
    77c8:	6d726946 	.word	0x6d726946
    77cc:	65726177 	.word	0x65726177
    77d0:	6e776f44 	.word	0x6e776f44
    77d4:	64616f6c 	.word	0x64616f6c
    77d8:	63656843 	.word	0x63656843
    77dc:	6d69546b 	.word	0x6d69546b
    77e0:	00007265 	.word	0x00007265
    77e4:	6f727245 	.word	0x6f727245
    77e8:	46203a72 	.word	0x46203a72
    77ec:	2041544f 	.word	0x2041544f
    77f0:	656d6974 	.word	0x656d6974
    77f4:	6f6e2072 	.word	0x6f6e2072
    77f8:	74732074 	.word	0x74732074
    77fc:	65747261 	.word	0x65747261
    7800:	52202e64 	.word	0x52202e64
    7804:	6f6f6265 	.word	0x6f6f6265
    7808:	676e6974 	.word	0x676e6974
    780c:	65687420 	.word	0x65687420
    7810:	73797320 	.word	0x73797320
    7814:	2e6d6574 	.word	0x2e6d6574
    7818:	00002e2e 	.word	0x00002e2e
    781c:	6c696146 	.word	0x6c696146
    7820:	74206465 	.word	0x74206465
    7824:	6573206f 	.word	0x6573206f
    7828:	7420746e 	.word	0x7420746e
    782c:	73206568 	.word	0x73206568
    7830:	41207465 	.word	0x41207465
    7834:	72204e50 	.word	0x72204e50
    7838:	65757165 	.word	0x65757165
    783c:	74207473 	.word	0x74207473
    7840:	7854206f 	.word	0x7854206f
    7844:	73615420 	.word	0x73615420
    7848:	0000006b 	.word	0x0000006b
    784c:	6f727245 	.word	0x6f727245
    7850:	203a2072 	.word	0x203a2072
    7854:	20746f4e 	.word	0x20746f4e
    7858:	656c6261 	.word	0x656c6261
    785c:	206f7420 	.word	0x206f7420
    7860:	6174626f 	.word	0x6174626f
    7864:	54206e69 	.word	0x54206e69
    7868:	65532078 	.word	0x65532078
    786c:	6170616d 	.word	0x6170616d
    7870:	65726f68 	.word	0x65726f68
    7874:	00000000 	.word	0x00000000
    7878:	6e617254 	.word	0x6e617254
    787c:	74696d73 	.word	0x74696d73
    7880:	65755120 	.word	0x65755120
    7884:	69206575 	.word	0x69206575
    7888:	6f6e2073 	.word	0x6f6e2073
    788c:	6d652074 	.word	0x6d652074
    7890:	00797470 	.word	0x00797470
    7894:	41544f46 	.word	0x41544f46
    7898:	53203a20 	.word	0x53203a20
    789c:	74207465 	.word	0x74207465
    78a0:	41206568 	.word	0x41206568
    78a4:	66204e50 	.word	0x66204e50
    78a8:	6320726f 	.word	0x6320726f
    78ac:	656e6e6f 	.word	0x656e6e6f
    78b0:	6e697463 	.word	0x6e697463
    78b4:	6f742067 	.word	0x6f742067
    78b8:	72694120 	.word	0x72694120
    78bc:	6e615620 	.word	0x6e615620
    78c0:	65676174 	.word	0x65676174
    78c4:	00000000 	.word	0x00000000
    78c8:	6f727245 	.word	0x6f727245
    78cc:	78453a72 	.word	0x78453a72
    78d0:	74636570 	.word	0x74636570
    78d4:	52206465 	.word	0x52206465
    78d8:	6f707365 	.word	0x6f707365
    78dc:	2065736e 	.word	0x2065736e
    78e0:	20746f4e 	.word	0x20746f4e
    78e4:	65636552 	.word	0x65636552
    78e8:	64657669 	.word	0x64657669
    78ec:	002e2e2e 	.word	0x002e2e2e
    78f0:	6f727245 	.word	0x6f727245
    78f4:	61463a72 	.word	0x61463a72
    78f8:	64656c69 	.word	0x64656c69
    78fc:	206f7420 	.word	0x206f7420
    7900:	65636572 	.word	0x65636572
    7904:	20657669 	.word	0x20657669
    7908:	6e6e6f63 	.word	0x6e6e6f63
    790c:	69746365 	.word	0x69746365
    7910:	72206e6f 	.word	0x72206e6f
    7914:	6f707365 	.word	0x6f707365
    7918:	2065736e 	.word	0x2065736e
    791c:	52206e69 	.word	0x52206e69
    7920:	6f6d2058 	.word	0x6f6d2058
    7924:	00006564 	.word	0x00006564
    7928:	6c696146 	.word	0x6c696146
    792c:	74206465 	.word	0x74206465
    7930:	6573206f 	.word	0x6573206f
    7934:	7420746e 	.word	0x7420746e
    7938:	73206568 	.word	0x73206568
    793c:	69767265 	.word	0x69767265
    7940:	69206563 	.word	0x69206563
    7944:	6369646e 	.word	0x6369646e
    7948:	6f697461 	.word	0x6f697461
    794c:	6572206e 	.word	0x6572206e
    7950:	73657571 	.word	0x73657571
    7954:	6f742074 	.word	0x6f742074
    7958:	20785420 	.word	0x20785420
    795c:	6b736154 	.word	0x6b736154
    7960:	00000000 	.word	0x00000000
    7964:	41544f46 	.word	0x41544f46
    7968:	53203a20 	.word	0x53203a20
    796c:	64207465 	.word	0x64207465
    7970:	63697665 	.word	0x63697665
    7974:	65732065 	.word	0x65732065
    7978:	63697672 	.word	0x63697672
    797c:	6e692065 	.word	0x6e692065
    7980:	61636964 	.word	0x61636964
    7984:	6e6f6974 	.word	0x6e6f6974
    7988:	00002e73 	.word	0x00002e73
    798c:	6c696146 	.word	0x6c696146
    7990:	74206465 	.word	0x74206465
    7994:	6573206f 	.word	0x6573206f
    7998:	7420746e 	.word	0x7420746e
    799c:	75206568 	.word	0x75206568
    79a0:	20726573 	.word	0x20726573
    79a4:	65726761 	.word	0x65726761
    79a8:	6e656d65 	.word	0x6e656d65
    79ac:	63612074 	.word	0x63612074
    79b0:	61766974 	.word	0x61766974
    79b4:	6e6f6974 	.word	0x6e6f6974
    79b8:	71657220 	.word	0x71657220
    79bc:	74736575 	.word	0x74736575
    79c0:	726f6620 	.word	0x726f6620
    79c4:	20574620 	.word	0x20574620
    79c8:	6e776f64 	.word	0x6e776f64
    79cc:	64616f6c 	.word	0x64616f6c
    79d0:	206f7420 	.word	0x206f7420
    79d4:	54207854 	.word	0x54207854
    79d8:	006b7361 	.word	0x006b7361
    79dc:	41544f46 	.word	0x41544f46
    79e0:	53203a20 	.word	0x53203a20
    79e4:	75207465 	.word	0x75207465
    79e8:	20726573 	.word	0x20726573
    79ec:	65726761 	.word	0x65726761
    79f0:	6e656d65 	.word	0x6e656d65
    79f4:	63612074 	.word	0x63612074
    79f8:	61766974 	.word	0x61766974
    79fc:	6e6f6974 	.word	0x6e6f6974
    7a00:	726f6620 	.word	0x726f6620
    7a04:	20574620 	.word	0x20574620
    7a08:	6e776f64 	.word	0x6e776f64
    7a0c:	64616f6c 	.word	0x64616f6c
    7a10:	0000002e 	.word	0x0000002e
    7a14:	6c696146 	.word	0x6c696146
    7a18:	74206465 	.word	0x74206465
    7a1c:	6573206f 	.word	0x6573206f
    7a20:	7420746e 	.word	0x7420746e
    7a24:	75206568 	.word	0x75206568
    7a28:	20726573 	.word	0x20726573
    7a2c:	65726761 	.word	0x65726761
    7a30:	6e656d65 	.word	0x6e656d65
    7a34:	63612074 	.word	0x63612074
    7a38:	61766974 	.word	0x61766974
    7a3c:	6e6f6974 	.word	0x6e6f6974
    7a40:	71657220 	.word	0x71657220
    7a44:	74736575 	.word	0x74736575
    7a48:	726f6620 	.word	0x726f6620
    7a4c:	20574620 	.word	0x20574620
    7a50:	74736e69 	.word	0x74736e69
    7a54:	616c6c61 	.word	0x616c6c61
    7a58:	6e6f6974 	.word	0x6e6f6974
    7a5c:	206f7420 	.word	0x206f7420
    7a60:	54207854 	.word	0x54207854
    7a64:	006b7361 	.word	0x006b7361
    7a68:	41544f46 	.word	0x41544f46
    7a6c:	53203a20 	.word	0x53203a20
    7a70:	75207465 	.word	0x75207465
    7a74:	20726573 	.word	0x20726573
    7a78:	65726761 	.word	0x65726761
    7a7c:	6e656d65 	.word	0x6e656d65
    7a80:	63612074 	.word	0x63612074
    7a84:	61766974 	.word	0x61766974
    7a88:	6e6f6974 	.word	0x6e6f6974
    7a8c:	726f6620 	.word	0x726f6620
    7a90:	20574620 	.word	0x20574620
    7a94:	74736e69 	.word	0x74736e69
    7a98:	616c6c61 	.word	0x616c6c61
    7a9c:	6e6f6974 	.word	0x6e6f6974
    7aa0:	0000002e 	.word	0x0000002e
    7aa4:	6c696146 	.word	0x6c696146
    7aa8:	74206465 	.word	0x74206465
    7aac:	6573206f 	.word	0x6573206f
    7ab0:	7420746e 	.word	0x7420746e
    7ab4:	73206568 	.word	0x73206568
    7ab8:	74726174 	.word	0x74726174
    7abc:	204d4420 	.word	0x204d4420
    7ac0:	73736573 	.word	0x73736573
    7ac4:	206e6f69 	.word	0x206e6f69
    7ac8:	75716572 	.word	0x75716572
    7acc:	20747365 	.word	0x20747365
    7ad0:	54206f74 	.word	0x54206f74
    7ad4:	61542078 	.word	0x61542078
    7ad8:	00006b73 	.word	0x00006b73
    7adc:	41544f46 	.word	0x41544f46
    7ae0:	49203a20 	.word	0x49203a20
    7ae4:	6974696e 	.word	0x6974696e
    7ae8:	6e697461 	.word	0x6e697461
    7aec:	68742067 	.word	0x68742067
    7af0:	4d442065 	.word	0x4d442065
    7af4:	73657320 	.word	0x73657320
    7af8:	6e6f6973 	.word	0x6e6f6973
    7afc:	74697720 	.word	0x74697720
    7b00:	69412068 	.word	0x69412068
    7b04:	61562072 	.word	0x61562072
    7b08:	6761746e 	.word	0x6761746e
    7b0c:	00002e65 	.word	0x00002e65
    7b10:	572b0a0d 	.word	0x572b0a0d
    7b14:	3a495344 	.word	0x3a495344
    7b18:	00000020 	.word	0x00000020
    7b1c:	41544f46 	.word	0x41544f46
    7b20:	41203a20 	.word	0x41203a20
    7b24:	49204e50 	.word	0x49204e50
    7b28:	45532053 	.word	0x45532053
    7b2c:	52202e54 	.word	0x52202e54
    7b30:	59444145 	.word	0x59444145
    7b34:	524f4620 	.word	0x524f4620
    7b38:	204d4420 	.word	0x204d4420
    7b3c:	53534553 	.word	0x53534553
    7b40:	2e4e4f49 	.word	0x2e4e4f49
    7b44:	00000a0d 	.word	0x00000a0d
    7b48:	41544f46 	.word	0x41544f46
    7b4c:	41203a20 	.word	0x41203a20
    7b50:	41565249 	.word	0x41565249
    7b54:	4741544e 	.word	0x4741544e
    7b58:	524f2045 	.word	0x524f2045
    7b5c:	4e494749 	.word	0x4e494749
    7b60:	44455441 	.word	0x44455441
    7b64:	204d4420 	.word	0x204d4420
    7b68:	53534553 	.word	0x53534553
    7b6c:	204e4f49 	.word	0x204e4f49
    7b70:	55514552 	.word	0x55514552
    7b74:	2e545345 	.word	0x2e545345
    7b78:	00000a0d 	.word	0x00000a0d
    7b7c:	41544f46 	.word	0x41544f46
    7b80:	41203a20 	.word	0x41203a20
    7b84:	41565249 	.word	0x41565249
    7b88:	4741544e 	.word	0x4741544e
    7b8c:	45522045 	.word	0x45522045
    7b90:	53455551 	.word	0x53455551
    7b94:	46205354 	.word	0x46205354
    7b98:	4620524f 	.word	0x4620524f
    7b9c:	574d5249 	.word	0x574d5249
    7ba0:	20455241 	.word	0x20455241
    7ba4:	4e574f44 	.word	0x4e574f44
    7ba8:	44414f4c 	.word	0x44414f4c
    7bac:	000a0d2e 	.word	0x000a0d2e
    7bb0:	41544f46 	.word	0x41544f46
    7bb4:	41203a20 	.word	0x41203a20
    7bb8:	41565249 	.word	0x41565249
    7bbc:	4741544e 	.word	0x4741544e
    7bc0:	45522045 	.word	0x45522045
    7bc4:	53455551 	.word	0x53455551
    7bc8:	46205354 	.word	0x46205354
    7bcc:	4620524f 	.word	0x4620524f
    7bd0:	574d5249 	.word	0x574d5249
    7bd4:	20455241 	.word	0x20455241
    7bd8:	54534e49 	.word	0x54534e49
    7bdc:	414c4c41 	.word	0x414c4c41
    7be0:	4e4f4954 	.word	0x4e4f4954
    7be4:	000a0d2e 	.word	0x000a0d2e
    7be8:	41544f46 	.word	0x41544f46
    7bec:	53203a20 	.word	0x53203a20
    7bf0:	54524154 	.word	0x54524154
    7bf4:	20474e49 	.word	0x20474e49
    7bf8:	54205055 	.word	0x54205055
    7bfc:	44204548 	.word	0x44204548
    7c00:	4553204d 	.word	0x4553204d
    7c04:	4f495353 	.word	0x4f495353
    7c08:	4957204e 	.word	0x4957204e
    7c0c:	41204854 	.word	0x41204854
    7c10:	41565249 	.word	0x41565249
    7c14:	4741544e 	.word	0x4741544e
    7c18:	0a0d2e45 	.word	0x0a0d2e45
    7c1c:	00000000 	.word	0x00000000
    7c20:	41544f46 	.word	0x41544f46
    7c24:	44203a20 	.word	0x44203a20
    7c28:	4553204d 	.word	0x4553204d
    7c2c:	4f495353 	.word	0x4f495353
    7c30:	5453204e 	.word	0x5453204e
    7c34:	45545241 	.word	0x45545241
    7c38:	4e412044 	.word	0x4e412044
    7c3c:	52542044 	.word	0x52542044
    7c40:	41534e41 	.word	0x41534e41
    7c44:	4f495443 	.word	0x4f495443
    7c48:	4f20534e 	.word	0x4f20534e
    7c4c:	52554343 	.word	0x52554343
    7c50:	0d2e4445 	.word	0x0d2e4445
    7c54:	0000000a 	.word	0x0000000a
    7c58:	41544f46 	.word	0x41544f46
    7c5c:	44203a20 	.word	0x44203a20
    7c60:	4553204d 	.word	0x4553204d
    7c64:	4f495353 	.word	0x4f495353
    7c68:	4957204e 	.word	0x4957204e
    7c6c:	41204854 	.word	0x41204854
    7c70:	41565249 	.word	0x41565249
    7c74:	4741544e 	.word	0x4741544e
    7c78:	53492045 	.word	0x53492045
    7c7c:	4f4c4320 	.word	0x4f4c4320
    7c80:	2e444553 	.word	0x2e444553
    7c84:	00000a0d 	.word	0x00000a0d
    7c88:	41544f46 	.word	0x41544f46
    7c8c:	46203a20 	.word	0x46203a20
    7c90:	574d5249 	.word	0x574d5249
    7c94:	20455241 	.word	0x20455241
    7c98:	41445055 	.word	0x41445055
    7c9c:	49204554 	.word	0x49204554
    7ca0:	4f4e2053 	.word	0x4f4e2053
    7ca4:	45502054 	.word	0x45502054
    7ca8:	524f4652 	.word	0x524f4652
    7cac:	2e44454d 	.word	0x2e44454d
    7cb0:	00000000 	.word	0x00000000
    7cb4:	41544f46 	.word	0x41544f46
    7cb8:	49203a20 	.word	0x49203a20
    7cbc:	4154534e 	.word	0x4154534e
    7cc0:	44454c4c 	.word	0x44454c4c
    7cc4:	52494620 	.word	0x52494620
    7cc8:	5241574d 	.word	0x5241574d
    7ccc:	414d2045 	.word	0x414d2045
    7cd0:	45484354 	.word	0x45484354
    7cd4:	49572053 	.word	0x49572053
    7cd8:	46204854 	.word	0x46204854
    7cdc:	574d5249 	.word	0x574d5249
    7ce0:	20455241 	.word	0x20455241
    7ce4:	4d4f5246 	.word	0x4d4f5246
    7ce8:	52494120 	.word	0x52494120
    7cec:	4e415620 	.word	0x4e415620
    7cf0:	45474154 	.word	0x45474154
    7cf4:	52455320 	.word	0x52455320
    7cf8:	2e524556 	.word	0x2e524556
    7cfc:	00000a0d 	.word	0x00000a0d
    7d00:	41544f46 	.word	0x41544f46
    7d04:	53203a20 	.word	0x53203a20
    7d08:	45434355 	.word	0x45434355
    7d0c:	55465353 	.word	0x55465353
    7d10:	20594c4c 	.word	0x20594c4c
    7d14:	54534e49 	.word	0x54534e49
    7d18:	454c4c41 	.word	0x454c4c41
    7d1c:	48542044 	.word	0x48542044
    7d20:	4f442045 	.word	0x4f442045
    7d24:	4f4c4e57 	.word	0x4f4c4e57
    7d28:	44454441 	.word	0x44454441
    7d2c:	52494620 	.word	0x52494620
    7d30:	5241574d 	.word	0x5241574d
    7d34:	00002e45 	.word	0x00002e45
    7d38:	41544f46 	.word	0x41544f46
    7d3c:	52203a20 	.word	0x52203a20
    7d40:	4f4f4245 	.word	0x4f4f4245
    7d44:	474e4954 	.word	0x474e4954
    7d48:	45485420 	.word	0x45485420
    7d4c:	56454420 	.word	0x56454420
    7d50:	20454349 	.word	0x20454349
    7d54:	45544641 	.word	0x45544641
    7d58:	20412052 	.word	0x20412052
    7d5c:	43435553 	.word	0x43435553
    7d60:	46535345 	.word	0x46535345
    7d64:	46204c55 	.word	0x46204c55
    7d68:	574d5249 	.word	0x574d5249
    7d6c:	20455241 	.word	0x20455241
    7d70:	54534e49 	.word	0x54534e49
    7d74:	414c4c41 	.word	0x414c4c41
    7d78:	4e4f4954 	.word	0x4e4f4954
    7d7c:	000a0d2e 	.word	0x000a0d2e
    7d80:	41544f46 	.word	0x41544f46
    7d84:	46203a20 	.word	0x46203a20
    7d88:	574d5249 	.word	0x574d5249
    7d8c:	20455241 	.word	0x20455241
    7d90:	41205349 	.word	0x41205349
    7d94:	4c494156 	.word	0x4c494156
    7d98:	454c4241 	.word	0x454c4241
    7d9c:	524f4620 	.word	0x524f4620
    7da0:	574f4420 	.word	0x574f4420
    7da4:	414f4c4e 	.word	0x414f4c4e
    7da8:	0a0d2e44 	.word	0x0a0d2e44
    7dac:	00000000 	.word	0x00000000
    7db0:	41544f46 	.word	0x41544f46
    7db4:	46203a20 	.word	0x46203a20
    7db8:	574d5249 	.word	0x574d5249
    7dbc:	20455241 	.word	0x20455241
    7dc0:	44205349 	.word	0x44205349
    7dc4:	4c4e574f 	.word	0x4c4e574f
    7dc8:	4544414f 	.word	0x4544414f
    7dcc:	4e412044 	.word	0x4e412044
    7dd0:	54532044 	.word	0x54532044
    7dd4:	4445524f 	.word	0x4445524f
    7dd8:	204e4920 	.word	0x204e4920
    7ddc:	53414c46 	.word	0x53414c46
    7de0:	0a0d2e48 	.word	0x0a0d2e48
    7de4:	00000000 	.word	0x00000000
    7de8:	41544f46 	.word	0x41544f46
    7dec:	44203a20 	.word	0x44203a20
    7df0:	4c4e574f 	.word	0x4c4e574f
    7df4:	4544414f 	.word	0x4544414f
    7df8:	41502044 	.word	0x41502044
    7dfc:	47414b43 	.word	0x47414b43
    7e00:	53492045 	.word	0x53492045
    7e04:	52455620 	.word	0x52455620
    7e08:	45494649 	.word	0x45494649
    7e0c:	53412044 	.word	0x53412044
    7e10:	52454320 	.word	0x52454320
    7e14:	49464954 	.word	0x49464954
    7e18:	0d2e4445 	.word	0x0d2e4445
    7e1c:	0000000a 	.word	0x0000000a
    7e20:	41544f46 	.word	0x41544f46
    7e24:	49203a20 	.word	0x49203a20
    7e28:	4154534e 	.word	0x4154534e
    7e2c:	4e494c4c 	.word	0x4e494c4c
    7e30:	48542047 	.word	0x48542047
    7e34:	4f442045 	.word	0x4f442045
    7e38:	4f4c4e57 	.word	0x4f4c4e57
    7e3c:	44454441 	.word	0x44454441
    7e40:	52494620 	.word	0x52494620
    7e44:	5241574d 	.word	0x5241574d
    7e48:	2e2e2e45 	.word	0x2e2e2e45
    7e4c:	41454c50 	.word	0x41454c50
    7e50:	57204553 	.word	0x57204553
    7e54:	2e544941 	.word	0x2e544941
    7e58:	0a0d2e2e 	.word	0x0a0d2e2e
    7e5c:	00000000 	.word	0x00000000
    7e60:	41544f46 	.word	0x41544f46
    7e64:	53203a20 	.word	0x53203a20
    7e68:	54524154 	.word	0x54524154
    7e6c:	20474e49 	.word	0x20474e49
    7e70:	20454854 	.word	0x20454854
    7e74:	4d524946 	.word	0x4d524946
    7e78:	45524157 	.word	0x45524157
    7e7c:	44505520 	.word	0x44505520
    7e80:	2e455441 	.word	0x2e455441
    7e84:	00000a0d 	.word	0x00000a0d
    7e88:	41544f46 	.word	0x41544f46
    7e8c:	46203a20 	.word	0x46203a20
    7e90:	454c4941 	.word	0x454c4941
    7e94:	4f542044 	.word	0x4f542044
    7e98:	44505520 	.word	0x44505520
    7e9c:	20455441 	.word	0x20455441
    7ea0:	20454854 	.word	0x20454854
    7ea4:	4d524946 	.word	0x4d524946
    7ea8:	45524157 	.word	0x45524157
    7eac:	0000002e 	.word	0x0000002e
    7eb0:	41544f46 	.word	0x41544f46
    7eb4:	52203a20 	.word	0x52203a20
    7eb8:	4f4f4245 	.word	0x4f4f4245
    7ebc:	474e4954 	.word	0x474e4954
    7ec0:	45485420 	.word	0x45485420
    7ec4:	56454420 	.word	0x56454420
    7ec8:	20454349 	.word	0x20454349
    7ecc:	45544641 	.word	0x45544641
    7ed0:	20412052 	.word	0x20412052
    7ed4:	4c494146 	.word	0x4c494146
    7ed8:	41204445 	.word	0x41204445
    7edc:	4d455454 	.word	0x4d455454
    7ee0:	4f205450 	.word	0x4f205450
    7ee4:	49462046 	.word	0x49462046
    7ee8:	41574d52 	.word	0x41574d52
    7eec:	49204552 	.word	0x49204552
    7ef0:	4154534e 	.word	0x4154534e
    7ef4:	54414c4c 	.word	0x54414c4c
    7ef8:	2e4e4f49 	.word	0x2e4e4f49
    7efc:	00000a0d 	.word	0x00000a0d
    7f00:	41544f46 	.word	0x41544f46
    7f04:	44203a20 	.word	0x44203a20
    7f08:	4c4e574f 	.word	0x4c4e574f
    7f0c:	4944414f 	.word	0x4944414f
    7f10:	5420474e 	.word	0x5420474e
    7f14:	46204548 	.word	0x46204548
    7f18:	574d5249 	.word	0x574d5249
    7f1c:	20455241 	.word	0x20455241
    7f20:	4d4f5246 	.word	0x4d4f5246
    7f24:	52494120 	.word	0x52494120
    7f28:	4e415620 	.word	0x4e415620
    7f2c:	45474154 	.word	0x45474154
    7f30:	52455320 	.word	0x52455320
    7f34:	2e524556 	.word	0x2e524556
    7f38:	4c502e2e 	.word	0x4c502e2e
    7f3c:	45534145 	.word	0x45534145
    7f40:	49415720 	.word	0x49415720
    7f44:	2e2e2e54 	.word	0x2e2e2e54
    7f48:	00000a0d 	.word	0x00000a0d
    7f4c:	6f727245 	.word	0x6f727245
    7f50:	46203a72 	.word	0x46203a72
    7f54:	656c6961 	.word	0x656c6961
    7f58:	6f742064 	.word	0x6f742064
    7f5c:	6e657320 	.word	0x6e657320
    7f60:	57462074 	.word	0x57462074
    7f64:	776f6420 	.word	0x776f6420
    7f68:	616f6c6e 	.word	0x616f6c6e
    7f6c:	63612064 	.word	0x63612064
    7f70:	74706563 	.word	0x74706563
    7f74:	65636e61 	.word	0x65636e61
    7f78:	206f7420 	.word	0x206f7420
    7f7c:	54207854 	.word	0x54207854
    7f80:	006b7361 	.word	0x006b7361
    7f84:	41544f46 	.word	0x41544f46
    7f88:	41203a20 	.word	0x41203a20
    7f8c:	70656363 	.word	0x70656363
    7f90:	20646574 	.word	0x20646574
    7f94:	20656874 	.word	0x20656874
    7f98:	75716572 	.word	0x75716572
    7f9c:	20747365 	.word	0x20747365
    7fa0:	20726f66 	.word	0x20726f66
    7fa4:	6d726966 	.word	0x6d726966
    7fa8:	65726177 	.word	0x65726177
    7fac:	776f4420 	.word	0x776f4420
    7fb0:	616f6c6e 	.word	0x616f6c6e
    7fb4:	6e612064 	.word	0x6e612064
    7fb8:	65732064 	.word	0x65732064
    7fbc:	7420746e 	.word	0x7420746e
    7fc0:	61206568 	.word	0x61206568
    7fc4:	6f6e6b63 	.word	0x6f6e6b63
    7fc8:	64656c77 	.word	0x64656c77
    7fcc:	6e656d67 	.word	0x6e656d67
    7fd0:	6f742074 	.word	0x6f742074
    7fd4:	72694120 	.word	0x72694120
    7fd8:	746e6176 	.word	0x746e6176
    7fdc:	20656761 	.word	0x20656761
    7fe0:	76726573 	.word	0x76726573
    7fe4:	00007265 	.word	0x00007265
    7fe8:	6f727245 	.word	0x6f727245
    7fec:	46203a72 	.word	0x46203a72
    7ff0:	656c6961 	.word	0x656c6961
    7ff4:	6f742064 	.word	0x6f742064
    7ff8:	6e657320 	.word	0x6e657320
    7ffc:	57462074 	.word	0x57462074
    8000:	736e6920 	.word	0x736e6920
    8004:	6c6c6174 	.word	0x6c6c6174
    8008:	63636120 	.word	0x63636120
    800c:	61747065 	.word	0x61747065
    8010:	2065636e 	.word	0x2065636e
    8014:	54206f74 	.word	0x54206f74
    8018:	61542078 	.word	0x61542078
    801c:	00006b73 	.word	0x00006b73
    8020:	41544f46 	.word	0x41544f46
    8024:	41203a20 	.word	0x41203a20
    8028:	70656363 	.word	0x70656363
    802c:	20646574 	.word	0x20646574
    8030:	20656874 	.word	0x20656874
    8034:	75716572 	.word	0x75716572
    8038:	20747365 	.word	0x20747365
    803c:	20726f66 	.word	0x20726f66
    8040:	6d726966 	.word	0x6d726966
    8044:	65726177 	.word	0x65726177
    8048:	736e4920 	.word	0x736e4920
    804c:	6c6c6174 	.word	0x6c6c6174
    8050:	6f697461 	.word	0x6f697461
    8054:	6e61206e 	.word	0x6e61206e
    8058:	65732064 	.word	0x65732064
    805c:	7420746e 	.word	0x7420746e
    8060:	61206568 	.word	0x61206568
    8064:	6f6e6b63 	.word	0x6f6e6b63
    8068:	64656c77 	.word	0x64656c77
    806c:	6e656d67 	.word	0x6e656d67
    8070:	6f742074 	.word	0x6f742074
    8074:	72694120 	.word	0x72694120
    8078:	746e6176 	.word	0x746e6176
    807c:	20656761 	.word	0x20656761
    8080:	76726573 	.word	0x76726573
    8084:	00007265 	.word	0x00007265
    8088:	41544f46 	.word	0x41544f46
    808c:	53203a20 	.word	0x53203a20
    8090:	54524154 	.word	0x54524154
    8094:	20474e49 	.word	0x20474e49
    8098:	54205055 	.word	0x54205055
    809c:	46204548 	.word	0x46204548
    80a0:	574d5249 	.word	0x574d5249
    80a4:	20455241 	.word	0x20455241
    80a8:	54534e49 	.word	0x54534e49
    80ac:	414c4c41 	.word	0x414c4c41
    80b0:	4e4f4954 	.word	0x4e4f4954
    80b4:	000a0d2e 	.word	0x000a0d2e
    80b8:	656c6553 	.word	0x656c6553
    80bc:	4c207463 	.word	0x4c207463
    80c0:	20656e69 	.word	0x20656e69
    80c4:	20776f4c 	.word	0x20776f4c
    80c8:	50202d20 	.word	0x50202d20
    80cc:	0074726f 	.word	0x0074726f

000080d0 <ModemCmdData>:
    80d0:	00000300 00009378 00000000 00003055     ....x.......U0..
    80e0:	00000000 00000001 000085b0 00020003     ................
    80f0:	00003055 00000009 00000002 000085b4     U0..............
    8100:	000f0008 00003055 0000001b 00000003     ....U0..........
    8110:	000085c0 000e000c 00003055 0000001e     ........U0......
    8120:	00000004 000085d0 000c0008 00003055     ............U0..
    8130:	00000018 00000005 000085dc 00080005     ................
    8140:	00003055 00000011 00000006 000085e8     U0..............
    8150:	000b000a 00003055 00000019 00000007     ....U0..........
    8160:	000085f4 0015000a 00003055 00000023     ........U0..#...
    8170:	00000008 00008600 00020005 00003055     ............U0..
    8180:	0000000b 00000109 00008608 003d0027     ............'.=.
    8190:	00003055 00000068 0000010a 00008630     U0..h.......0...
    81a0:	00020012 00003055 00000018 0000010b     ....U0..........
    81b0:	00008644 00020012 00003055 00000018     D.......U0......
    81c0:	0000010c 00008658 00020012 00003055     ....X.......U0..
    81d0:	00000018 0000010d 0000866c 00020012     ........l.......
    81e0:	00003055 00000018 0000010e 00008680     U0..............
    81f0:	00020012 00003055 00000018 0000010f     ....U0..........
    8200:	00008694 00020012 00003055 00000018     ........U0......
    8210:	00000110 000086a8 00020012 00003055     ............U0..
    8220:	00000018 00000111 000086bc 00020012     ................
    8230:	00003055 00000018 00000112 000086d0     U0..............
    8240:	00020012 00003055 00000018 00000113     ....U0..........
    8250:	000086e4 00020013 00003055 00000019     ........U0......
    8260:	00000114 000086f8 0002001f 00003055     ............U0..
    8270:	00000025 00000115 00008718 00020023     %...........#...
    8280:	00003055 00000029 00000116 0000873c     U0..).......<...
    8290:	0002001a 00003055 00000020 00000117     ....U0.. .......
    82a0:	20000004 00070011 00003055 0000001c     ... ....U0......
    82b0:	00000118 20000298 00bf003a 00003055     ....... :...U0..
    82c0:	000000fd 00000119 00008758 00020010     ........X.......
    82d0:	00003055 00000016 0000011a 0000876c     U0..........l...
    82e0:	00020010 00003055 00000016 0000011b     ....U0..........
    82f0:	00008780 0002000b 00003055 00000011     ........U0......
    8300:	0000011c 0000878c 0120000c 00003055     .......... .U0..
    8310:	00000130 0000021d 0000879c 00020018     0...............
    8320:	00003055 0000001e 0000021e 000087b8     U0..............
    8330:	0002000c 00003055 00000012 0000021f     ....U0..........
    8340:	000087c8 0002000d 00003055 00000013     ........U0......
    8350:	00000220 000087d8 0002000c 00003055      ...........U0..
    8360:	00000012 00000221 000087e8 0002000c     ....!...........
    8370:	00003055 00000012 00000222 000087f8     U0......".......
    8380:	0002000a 00003055 00000010 00000223     ....U0......#...
    8390:	00008804 0002000a 00003055 00000010     ........U0......
	...
    8580:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    8590:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    85a0:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    85b0:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    85c0:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    85d0:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    85e0:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    85f0:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    8600:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    8610:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    8620:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    8630:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    8640:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    8650:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    8660:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    8670:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    8680:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    8690:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    86a0:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    86b0:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    86c0:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    86d0:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    86e0:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    86f0:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    8700:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    8710:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    8720:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    8730:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    8740:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    8750:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    8760:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    8770:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    8780:	432b5441 54544147 000d303d 432b5441     AT+CGATT=0..AT+C
    8790:	4f434447 0d3f544e 00000000 572b5441     GDCONT?.....AT+W
    87a0:	3d535344 56222c30 4e49575a 4e524554     DSS=0,"VZWINTERN
    87b0:	0d225445 00000000 572b5441 3d535344     ET".....AT+WDSS=
    87c0:	0d312c31 00000000 572b5441 3d495344     1,1.....AT+WDSI=
    87d0:	31393138 0000000d 572b5441 3d435344     8191....AT+WDSC=
    87e0:	0d312c31 00000000 572b5441 3d435344     1,1.....AT+WDSC=
    87f0:	0d312c32 00000000 572b5441 3d525344     2,1.....AT+WDSR=
    8800:	00000d33 572b5441 3d525344 00000d34     3...AT+WDSR=4...
    8810:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    8820:	69746163 66206e6f 7020726f 65737261     cation for parse
    8830:	74616420 75622061 72656666 69616620      data buffer fai
    8840:	0064656c 6f727245 4e203a72 6120746f     led.Error: Not a
    8850:	20656c62 76206f74 66697265 68742079     ble to verify th
    8860:	6f632065 6e616d6d 74732064 676e6972     e command string
    8870:	72756420 20676e69 73726170 00676e69      during parsing.
    8880:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    8890:	72206f74 20646165 61746164 6f726620     to read data fro
    88a0:	6572206d 76696563 69722065 6220676e     m receive ring b
    88b0:	65666675 75642072 676e6972 72617020     uffer during par
    88c0:	00726573 6f727245 48203a72 20706165     ser.Error: Heap 
    88d0:	6f6c6c61 69746163 66206e6f 7220726f     allocation for r
    88e0:	6f707365 2065736e 61746164 66756220     esponse data buf
    88f0:	20726566 6c696166 00006465 6e6e6f43     fer failed..Conn
    8900:	69746365 74206e6f 6874206f 65732065     ection to the se
    8910:	72657672 20736920 74736f6c 2e2e2e2e     rver is lost....
    8920:	0000002e 69797254 7420676e 7365206f     ....Trying to es
    8930:	6c626174 20687369 20656874 6e6e6f63     tablish the conn
    8940:	69746365 74206e6f 6573206f 72657672     ection to server
    8950:	502e2e2e 7361656c 61772065 2e2e7469     ...Please wait..
    8960:	2e2e2e2e 00000a0d 6c696146 74206465     ........Failed t
    8970:	6573206f 7420746e 53206568 69737365     o sent the Sessi
    8980:	43206e6f 65736f6c 71657220 74736575     on Close request
    8990:	206f7420 54207854 006b7361 4d206f4e      to Tx Task.No M
    89a0:	2065726f 69746341 43206576 656e6e6f     ore Active Conne
    89b0:	6f697463 7420736e 6c63206f 0065736f     ctions to close.
    89c0:	736f6c43 41206465 41206c6c 76697463     Closed All Activ
    89d0:	6f432065 63656e6e 6e6f6974 00000073     e Connections...
    89e0:	6c696146 74206465 6572206f 76696563     Failed to receiv
    89f0:	6f632065 63656e6e 6e6f6974 73657220     e connection res
    8a00:	736e6f70 6e692065 20585220 65646f6d     ponse in RX mode
    8a10:	00000000 756f7242 20746867 20656874     ....Brought the 
    8a20:	20504450 6e6e6f63 69746365 44206e6f     PDP connection D
    8a30:	004e574f 65707845 64657463 73655220     OWN.Expected Res
    8a40:	736e6f70 6f4e2065 65522074 76696563     ponse Not Receiv
    8a50:	2e2e6465 0000002e 6c696146 74206465     ed......Failed t
    8a60:	6573206f 7420746e 50206568 65442053     o sent the PS De
    8a70:	68636174 71657220 74736575 206f7420     tach request to 
    8a80:	54207854 006b7361 61746544 64656863     Tx Task.Detached
    8a90:	65687420 50445020 00535020 656c6544      the PDP PS.Dele
    8aa0:	20646574 206c6c61 7420666f 70206568     ted all of the p
    8ab0:	69766572 2073756f 6e6e6f63 69746365     revious connecti
    8ac0:	63206e6f 69666e6f 61727567 6e6f6974     on configuration
    8ad0:	00000073 6c696146 74206465 6573206f     s...Failed to se
    8ae0:	7420746e 45206568 7020464f 65747461     nt the EOF patte
    8af0:	74206e72 7854206f 73615420 0000006b     rn to Tx Task...
    8b00:	20464f45 74746150 206e7265 666e6f63     EOF Pattern conf
    8b10:	72756769 00006465 6c696146 74206465     igured..Failed t
    8b20:	6573206f 7420746e 72206568 69727465     o sent the retri
    8b30:	20657665 204e5041 6d6d6f63 20646e61     eve APN command 
    8b40:	54206f74 61542078 00006b73 72746552     to Tx Task..Retr
    8b50:	65766569 50412064 7473204e 676e6972     ieved APN string
    8b60:	0000002e 6c696146 74206465 6573206f     ....Failed to se
    8b70:	6120746e 73656363 6f702073 20746e69     nt access point 
    8b80:	20646d63 54206f74 61542078 00006b73     cmd to Tx Task..
    8b90:	65636341 50207373 746e696f 6e6f6320     Access Point con
    8ba0:	75676966 00646572 6c696146 74206465     figured.Failed t
    8bb0:	6573206f 6320746e 656e6e6f 6f697463     o sent connectio
    8bc0:	6974206e 2072656d 20646d63 54206f74     n timer cmd to T
    8bd0:	61542078 00006b73 6e6e6f43 69746365     x Task..Connecti
    8be0:	54206e6f 72656d69 6f632073 6769666e     on Timers config
    8bf0:	64657275 00000000 6e6e6f43 69746365     ured....Connecti
    8c00:	53206e6f 75746174 203a2073 43534944     on Status : DISC
    8c10:	454e4e4f 44455443 45554420 204f5420     ONNECTED DUE TO 
    8c20:	5754454e 004b524f 6e6e6f43 69746365     NETWORK.Connecti
    8c30:	53206e6f 75746174 203a2073 4e4e4f43     on Status : CONN
    8c40:	45544345 00000044 6e6e6f43 69746365     ECTED...Connecti
    8c50:	73206e6f 65636375 75667373 2e2e2e6c     on successful...
    8c60:	756f6c43 65532064 72657672 6e6f6320     Cloud Server con
    8c70:	75676966 00646572 6e6e6f43 69746365     figured.Connecti
    8c80:	53206e6f 75746174 203a2073 4c494146     on Status : FAIL
    8c90:	54204445 4f43204f 43454e4e 00000054     ED TO CONNECT...
    8ca0:	6e6e6f43 69746365 53206e6f 75746174     Connection Statu
    8cb0:	203a2073 4e4e4f43 49544345 43204e4f     s : CONNECTION C
    8cc0:	45534f4c 00000044 6e6e6f43 69746365     LOSED...Connecti
    8cd0:	53206e6f 75746174 203a2073 4e4e4f43     on Status : CONN
    8ce0:	49544345 49204e4f 5250204e 4552474f     ECTION IN PROGRE
    8cf0:	00005353 6e6e6f43 69746365 53206e6f     SS..Connection S
    8d00:	75746174 203a2073 454c4449 4d495420     tatus : IDLE TIM
    8d10:	53205245 54524154 46204445 4420524f     ER STARTED FOR D
    8d20:	4f435349 43454e4e 4e4f4954 00000000     ISCONNECTION....
    8d30:	6e6e6f43 69746365 53206e6f 75746174     Connection Statu
    8d40:	203a2073 454c4449 4d495420 43205245     s : IDLE TIMER C
    8d50:	45434e41 44454c4c 00000000 6f727245     ANCELLED....Erro
    8d60:	203a2072 6e6e6f43 69746365 46206e6f     r : Connection F
    8d70:	756c6961 00006572 74736552 69747261     ailure..Restarti
    8d80:	7420676e 63206568 656e6e6f 6f697463     ng the connectio
    8d90:	6e69206e 61697469 617a696c 6e6f6974     n initialization
    8da0:	002e2e2e 4e4e4f43 00544345 736f6c43     ....CONNECT.Clos
    8db0:	20676e69 69746341 43206576 656e6e6f     ing Active Conne
    8dc0:	6f697463 0000736e 4e4e4f43 0d544345     ctions..CONNECT.
    8dd0:	5454480a 2e312f50 30322031 4b4f2030     .HTTP/1.1 200 OK
    8de0:	00000000 6f430a0d 63656e6e 6e6f6974     ......Connection
    8df0:	746e6920 75727265 64657470 502e2e2e      interrupted...P
    8e00:	6f667265 6e696d72 68742067 72452065     erforming the Er
    8e10:	20726f72 6f636552 79726576 2e2e2e2e     ror Recovery....
    8e20:	00000a0d 736f6c43 20676e69 20656874     ....Closing the 
    8e30:	69746361 63206576 656e6e6f 6f697463     active connectio
    8e40:	0000006e 626f7250 206d656c 41206e69     n...Problem in A
    8e50:	206f7475 6f636552 79726576 0000002e     uto Recovery....
    8e60:	69797254 7420676e 6572206f 7473652d     Trying to re-est
    8e70:	696c6261 74206873 63206568 656e6e6f     ablish the conne
    8e80:	6f697463 6874206e 67756f72 20612068     ction through a 
    8e90:	65646f6d 6572206d 72617473 2e2e2e74     modem restart...
    8ea0:	000a0d2e 6978614d 206d756d 72746572     ....Maximum retr
    8eb0:	6f632079 20746e75 20726f66 6f747561     y count for auto
    8ec0:	63657220 7265766f 73692079 70786520      recovery is exp
    8ed0:	64657269 0000002e 69797254 7420676e     ired....Trying t
    8ee0:	6572206f 7473652d 696c6261 74206873     o re-establish t
    8ef0:	63206568 656e6e6f 6f697463 6874206e     he connection th
    8f00:	67756f72 20612068 6c6f6877 79732065     rough a whole sy
    8f10:	6d657473 73657220 74726174 2e2e2e2e     stem restart....
    8f20:	00000a0d 6f727245 65522072 65766f63     ....Error Recove
    8f30:	43207972 6c706d6f 64657465 00000a0d     ry Completed....
    8f40:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    8f50:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    8f60:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    8f70:	000a0d3d 61747345 73696c62 676e6968     =...Establishing
    8f80:	6e206120 63207765 656e6e6f 6f697463      a new connectio
    8f90:	6977206e 73206874 65767265 00000072     n with server...
    8fa0:	74737953 69206d65 75612073 72206f74     System is auto r
    8fb0:	766f6365 64657265 726f6620 726f6d20     ecovered for mor
    8fc0:	68742065 33206e61 6d697420 002e7365     e than 3 times..
    8fd0:	66726550 696d726f 6120676e 73797320     Performing a sys
    8fe0:	206d6574 74736572 2e747261 2e2e2e2e     tem restart.....
    8ff0:	2e2e2e2e 2e2e2e2e 2e2e2e2e 0d2e2e2e     ................
    9000:	0000000a 66726550 696d726f 6620676e     ....Performing f
    9010:	6563726f 72652064 20726f72 6f636572     orced error reco
    9020:	79726576 2e2e2e2e 00000a0d 6c696146     very........Fail
    9030:	74206465 6573206f 7420746e 44206568     ed to sent the D
    9040:	20676169 61746164 206f7420 54207854     iag data to Tx T
    9050:	006b7361 69726556 6e697966 68742067     ask.Verifying th
    9060:	41552065 4c205452 206b6e69 74617473     e UART Link stat
    9070:	77207375 20687469 65646f4d 0000006d     us with Modem...
    9080:	63637553 46737365 796c6c75 72657620     SuccessFully ver
    9090:	65696669 68742064 41552065 4c205452     ified the UART L
    90a0:	206b6e69 77746562 206e6565 444d4153     ink between SAMD
    90b0:	43203135 72746e6f 656c6c6f 20262072     51 Controller & 
    90c0:	65646f4d 0000006d 72746552 65766569     Modem...Retrieve
    90d0:	68742064 6f4d2065 206d6564 49454d49     d the Modem IMEI
    90e0:	6d754e20 00726562 72746552 65766569      Number.Retrieve
    90f0:	68742064 6f4d2065 206d6564 69726573     d the Modem seri
    9100:	4e206c61 65626d75 00000072 74736f48     al Number...Host
    9110:	6f725020 73736563 6120726f 4d20646e      Processor and M
    9120:	6d65646f 65726120 63757320 73736563     odem are success
    9130:	6c6c7566 6e692079 61697469 657a696c     fully initialize
    9140:	2e2e2e64 00000a0d 72756f48 5320796c     d.......Hourly S
    9150:	65747379 6552206d 72617473 69742074     ystem Restart ti
    9160:	2072656d 69707865 2e646572 62655220     mer expired. Reb
    9170:	69746f6f 7420676e 73206568 65747379     ooting the syste
    9180:	0a0d2e6d 00000000 72756f48 7953796c     m.......HourlySy
    9190:	6d657473 74736552 54747261 72656d69     stemRestartTimer
    91a0:	00000000 6b636150 72547465 6d736e61     ....PacketTransm
    91b0:	65507469 646f6972 69546369 0072656d     itPeriodicTimer.
    91c0:	6c696146 74206465 6e69206f 61697469     Failed to initia
    91d0:	657a696c 65687420 646f6d20 74206d65     lize the modem t
    91e0:	72656d69 52202e73 6f6f6265 676e6974     imers. Rebooting
    91f0:	65687420 73797320 006d6574 6c696146      the system.Fail
    9200:	74206465 6f70206f 74207473 63206568     ed to post the c
    9210:	656e6e6f 6f697463 6552206e 6e6f7073     onnection Respon
    9220:	74206573 7551206f 00657565 6f727245     se to Queue.Erro
    9230:	203a2072 6d6d6f43 20646e61 70736552     r : Command Resp
    9240:	65736e6f 65755120 69206575 6f6e2073     onse Queue is no
    9250:	6d652074 00797470 6c696146 74206465     t empty.Failed t
    9260:	6f70206f 74207473 63206568 656e6e6f     o post the conne
    9270:	6f697463 6552206e 6e6f7073 74206573     ction Response t
    9280:	6f46206f 51206174 65756575 00000000     o Fota Queue....
    9290:	4f525245 52203a52 69656365 20646576     ERROR: Received 
    92a0:	65206e61 7974706d 73657220 736e6f70     an empty respons
    92b0:	74732065 676e6972 206e6920 6d6d6f63     e string in comm
    92c0:	20646e61 70736572 65736e6f 6e616820     and response han
    92d0:	72656c64 00000000 4f525245 43203a52     dler....ERROR: C
    92e0:	616d6d6f 5020646e 69737261 4620676e     ommand Parsing F
    92f0:	656c6961 00000064 6f4e0a0d 62612074     ailed.....Not ab
    9300:	7420656c 7561206f 72206f74 766f6365     le to auto recov
    9310:	66207265 206d6f72 6e6e6f63 69746365     er from connecti
    9320:	66206e6f 756c6961 2e2e6572 6265522e     on failure...Reb
    9330:	69746f6f 2e2e676e 00002e2e 73207854     ooting......Tx s
    9340:	61697265 6544206c 20677562 656e6f44     erial Debug Done
    9350:	00000a0d 44207852 0d656e6f 0000000a     ....Rx Done.....
    9360:	2d207325 20642520 00000a0d 2d207325     %s - %d ....%s -
    9370:	6d642520 0a0d2056 00000000 682f2e2e      %dmV ......../h
    9380:	692f6c61 756c636e 682f6564 775f6c61     al/include/hal_w
    9390:	682e7464 00000000 2a232a23 2a232a23     dt.h....#*#*#*#*
    93a0:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    93b0:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    93c0:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    93d0:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    93e0:	00000000 78656e55 74636570 49206465     ....Unexpected I
    93f0:	7265746e 74707572 70614820 656e6570     nterrupt Happene
    9400:	2e2e2e64 74696157 20676e69 20726f66     d...Waiting for 
    9410:	20656874 63746177 6f642068 69742067     the watch dog ti
    9420:	756f656d 00000074 682f2e2e 732f6c61     meout...../hal/s
    9430:	682f6372 615f6c61 735f6364 2e636e79     rc/hal_adc_sync.
    9440:	00000063 682f2e2e 752f6c61 736c6974     c...../hal/utils
    9450:	6372732f 6974752f 725f736c 62676e69     /src/utils_ringb
    9460:	65666675 00632e72                       uffer.c.

00009468 <_adcs>:
    9468:	00c00000 00030009 02481980 00000000     ..........H.....
    9478:	00000000 00010001 00000000 00000000     ................
	...
    9494:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    94a4:	632e6364 00000000                       dc.c....

000094ac <_cfgs>:
	...
    95ac:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    95bc:	43000000 43000400                       ...C...C

000095c4 <_usarts>:
    95c4:	00000003 40200004 00030000 00700002     ...... @......p.
    95d4:	0000f62b 00000000 00000004 40300184     +.............0@
    95e4:	00030300 00700002 0000ff2e 00000000     ......p.........
    95f4:	00000005 40300004 00030000 00700002     ......0@......p.
    9604:	0000f62b 00000000                       +.......

0000960c <_i2cms>:
	...

00009624 <sercomspi_regs>:
	...
    9638:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    9648:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    9658:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    9668:	00000000 736e6553 6154726f 00006b73     ....SensorTask..
    9678:	65646f4d 5478546d 006b7361 65646f4d     ModemTxTask.Mode
    9688:	5478526d 006b7361 65646f4d 6f72506d     mRxTask.ModemPro
    9698:	73736563 6b736154 00000000 65646f4d     cessTask....Mode
    96a8:	6169446d 73615467 0000006b 61746f46     mDiagTask...Fota
    96b8:	54707041 006b7361 65657246 4f545220     AppTask.Free RTO
    96c8:	63532053 75646568 2072656c 20746f6e     S Scheduler not 
    96d8:	72617473 00646574 6c696146 74206465     started.Failed t
    96e8:	7263206f 65746165 73617420 0000736b     o create tasks..
    96f8:	6f727245 53203a72 64656863 72656c75     Error: Scheduler
    9708:	69786520 00646574 454c4449 00000000      exited.IDLE....
    9718:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    9728:	20726d54 00637653                       Tmr Svc.

00009730 <__sf_fake_stderr>:
	...

00009750 <__sf_fake_stdin>:
	...

00009770 <__sf_fake_stdout>:
	...
    9790:	4f500043 00584953 2000002e                       C.POSIX...

0000979a <_ctype_>:
    979a:	20202000 20202020 28282020 20282828     .         ((((( 
    97aa:	20202020 20202020 20202020 20202020                     
    97ba:	10108820 10101010 10101010 10101010      ...............
    97ca:	04040410 04040404 10040404 10101010     ................
    97da:	41411010 41414141 01010101 01010101     ..AAAAAA........
    97ea:	01010101 01010101 01010101 10101010     ................
    97fa:	42421010 42424242 02020202 02020202     ..BBBBBB........
    980a:	02020202 02020202 02020202 10101010     ................
    981a:	00000020 00000000 00000000 00000000      ...............
	...
    989a:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
    98aa:	31300047 35343332 39383736 44434241     G.0123456789ABCD
    98ba:	30004645 34333231 38373635 63626139     EF.0123456789abc
    98ca:	00666564 b5f80000                                def...

000098d0 <_init>:
    98d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98d2:	bf00      	nop
    98d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    98d6:	bc08      	pop	{r3}
    98d8:	469e      	mov	lr, r3
    98da:	4770      	bx	lr

000098dc <__init_array_start>:
    98dc:	00000289 	.word	0x00000289

000098e0 <_fini>:
    98e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98e2:	bf00      	nop
    98e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    98e6:	bc08      	pop	{r3}
    98e8:	469e      	mov	lr, r3
    98ea:	4770      	bx	lr

000098ec <__fini_array_start>:
    98ec:	00000265 	.word	0x00000265
