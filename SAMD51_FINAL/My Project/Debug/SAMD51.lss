
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000991c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000026c  20000000  0000991c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002026c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002026c  2**0
                  CONTENTS
  4 .bss          00003d30  20000270  00009b90  00020270  2**4
                  ALLOC
  5 .stack        00010000  20003fa0  0000d8c0  00020270  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002029a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005d4d6  00000000  00000000  000202f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00008b2e  00000000  00000000  0007d7c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001867e  00000000  00000000  000862f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000017a0  00000000  00000000  0009e975  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001ec8  00000000  00000000  000a0115  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039d9c  00000000  00000000  000a1fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b3d1  00000000  00000000  000dbd79  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001058ab  00000000  00000000  0010714a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004228  00000000  00000000  0020c9f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 3f 01 20 69 36 00 00 01 37 00 00 01 37 00 00     .?. i6...7...7..
      10:	01 37 00 00 01 37 00 00 01 37 00 00 00 00 00 00     .7...7...7......
	...
      2c:	41 4d 00 00 01 37 00 00 00 00 00 00 e1 4d 00 00     AM...7.......M..
      3c:	45 4e 00 00 01 37 00 00 01 37 00 00 01 37 00 00     EN...7...7...7..
      4c:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
      5c:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
      6c:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
      7c:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
      8c:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
      9c:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
      ac:	01 37 00 00 01 37 00 00 b5 42 00 00 c9 42 00 00     .7...7...B...B..
      bc:	99 41 00 00 a5 41 00 00 b1 41 00 00 bd 41 00 00     .A...A...A...A..
      cc:	c9 41 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .A...7...7...7..
      dc:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
      ec:	01 37 00 00 00 00 00 00 c5 43 00 00 01 37 00 00     .7.......C...7..
      fc:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
     10c:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
     11c:	01 37 00 00 01 37 00 00 01 37 00 00 7d 29 00 00     .7...7...7..})..
     12c:	89 29 00 00 95 29 00 00 01 37 00 00 01 37 00 00     .)...)...7...7..
     13c:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
     14c:	01 37 00 00 b9 34 00 00 01 37 00 00 00 00 00 00     .7...4...7......
	...
     180:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
     190:	00 00 00 00 e1 46 00 00 01 37 00 00 01 37 00 00     .....F...7...7..
     1a0:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
     1b0:	f5 46 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .F...7...7...7..
     1c0:	01 37 00 00 09 47 00 00 01 37 00 00 01 37 00 00     .7...G...7...7..
     1d0:	01 37 00 00 1d 47 00 00 01 37 00 00 01 37 00 00     .7...G...7...7..
     1e0:	31 47 00 00 01 37 00 00 01 37 00 00 8d 47 00 00     1G...7...7...G..
     1f0:	a1 47 00 00 b5 47 00 00 c9 47 00 00 dd 47 00 00     .G...G...G...G..
     200:	f1 47 00 00 00 00 00 00 00 00 00 00 01 37 00 00     .G...........7..
     210:	01 37 00 00 01 37 00 00 69 05 00 00 7d 05 00 00     .7...7..i...}...
     220:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
     230:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
     240:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
     250:	01 37 00 00 01 37 00 00 01 37 00 00 01 37 00 00     .7...7...7...7..
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000270 	.word	0x20000270
     280:	00000000 	.word	0x00000000
     284:	0000991c 	.word	0x0000991c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000991c 	.word	0x0000991c
     2c4:	20000274 	.word	0x20000274
     2c8:	0000991c 	.word	0x0000991c
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Application/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
     2d2:	b088      	sub	sp, #32
     2d4:	4606      	mov	r6, r0
	uint8_t dbgBuffer[30];
	memset(dbgBuffer,'0',30);
     2d6:	221e      	movs	r2, #30
     2d8:	2130      	movs	r1, #48	; 0x30
     2da:	4668      	mov	r0, sp
     2dc:	4b0d      	ldr	r3, [pc, #52]	; (314 <vApplicationStackOverflowHook+0x44>)
     2de:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e0:	4d0d      	ldr	r5, [pc, #52]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e2:	4628      	mov	r0, r5
     2e4:	4c0d      	ldr	r4, [pc, #52]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2e6:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2e8:	480d      	ldr	r0, [pc, #52]	; (320 <vApplicationStackOverflowHook+0x50>)
     2ea:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ec:	4628      	mov	r0, r5
     2ee:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f0:	480c      	ldr	r0, [pc, #48]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f2:	47a0      	blx	r4

	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2f4:	4632      	mov	r2, r6
     2f6:	490c      	ldr	r1, [pc, #48]	; (328 <vApplicationStackOverflowHook+0x58>)
     2f8:	4668      	mov	r0, sp
     2fa:	4b0c      	ldr	r3, [pc, #48]	; (32c <vApplicationStackOverflowHook+0x5c>)
     2fc:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     2fe:	4668      	mov	r0, sp
     300:	4b0b      	ldr	r3, [pc, #44]	; (330 <vApplicationStackOverflowHook+0x60>)
     302:	4798      	blx	r3
     304:	b281      	uxth	r1, r0
     306:	4668      	mov	r0, sp
     308:	4b0a      	ldr	r3, [pc, #40]	; (334 <vApplicationStackOverflowHook+0x64>)
     30a:	4798      	blx	r3

	requestWatchDogForcedReset();
     30c:	4b0a      	ldr	r3, [pc, #40]	; (338 <vApplicationStackOverflowHook+0x68>)
     30e:	4798      	blx	r3
}
     310:	b008      	add	sp, #32
     312:	bd70      	pop	{r4, r5, r6, pc}
     314:	00006c83 	.word	0x00006c83
     318:	000076e0 	.word	0x000076e0
     31c:	000033b9 	.word	0x000033b9
     320:	0000771c 	.word	0x0000771c
     324:	00009394 	.word	0x00009394
     328:	00007758 	.word	0x00007758
     32c:	00006e0d 	.word	0x00006e0d
     330:	00006e65 	.word	0x00006e65
     334:	00003375 	.word	0x00003375
     338:	000035f1 	.word	0x000035f1

0000033c <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook(void)
{
     33c:	b538      	push	{r3, r4, r5, lr}
	DEBUG_PRINT("**********************************************************");
     33e:	4d05      	ldr	r5, [pc, #20]	; (354 <vApplicationMallocFailedHook+0x18>)
     340:	4628      	mov	r0, r5
     342:	4c05      	ldr	r4, [pc, #20]	; (358 <vApplicationMallocFailedHook+0x1c>)
     344:	47a0      	blx	r4
	DEBUG_PRINT("***************MALLOC FAILURE DETECTED********************");
     346:	4805      	ldr	r0, [pc, #20]	; (35c <vApplicationMallocFailedHook+0x20>)
     348:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     34a:	4628      	mov	r0, r5
     34c:	47a0      	blx	r4
	requestWatchDogForcedReset();
     34e:	4b04      	ldr	r3, [pc, #16]	; (360 <vApplicationMallocFailedHook+0x24>)
     350:	4798      	blx	r3
     352:	bd38      	pop	{r3, r4, r5, pc}
     354:	000076e0 	.word	0x000076e0
     358:	000033b9 	.word	0x000033b9
     35c:	0000776c 	.word	0x0000776c
     360:	000035f1 	.word	0x000035f1

00000364 <intializeSensorSelectLines>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void intializeSensorSelectLines(void)
{
     364:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     366:	4b59      	ldr	r3, [pc, #356]	; (4cc <intializeSensorSelectLines+0x168>)
     368:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     36c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     370:	4a57      	ldr	r2, [pc, #348]	; (4d0 <intializeSensorSelectLines+0x16c>)
     372:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     376:	4a57      	ldr	r2, [pc, #348]	; (4d4 <intializeSensorSelectLines+0x170>)
     378:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     37c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     380:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
     384:	f040 0004 	orr.w	r0, r0, #4
     388:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     38c:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     390:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     394:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     398:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     39c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     3a0:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3a4:	484c      	ldr	r0, [pc, #304]	; (4d8 <intializeSensorSelectLines+0x174>)
     3a6:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     3aa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3b2:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
     3b6:	f040 0004 	orr.w	r0, r0, #4
     3ba:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3be:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c2:	f893 10cc 	ldrb.w	r1, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     3c6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3ca:	f883 10cc 	strb.w	r1, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
     3d2:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3d6:	4e41      	ldr	r6, [pc, #260]	; (4dc <intializeSensorSelectLines+0x178>)
     3d8:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     3dc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3e0:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3e4:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     3e8:	f041 0104 	orr.w	r1, r1, #4
     3ec:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3f0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3f4:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f8:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3fc:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     400:	f44f 6180 	mov.w	r1, #1024	; 0x400
     404:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     408:	4d35      	ldr	r5, [pc, #212]	; (4e0 <intializeSensorSelectLines+0x17c>)
     40a:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     40e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     412:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     416:	f893 40ca 	ldrb.w	r4, [r3, #202]	; 0xca
     41a:	f044 0404 	orr.w	r4, r4, #4
     41e:	f883 40ca 	strb.w	r4, [r3, #202]	; 0xca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     422:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     426:	f893 40ca 	ldrb.w	r4, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     42a:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     42e:	f883 40ca 	strb.w	r4, [r3, #202]	; 0xca
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     432:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     434:	629e      	str	r6, [r3, #40]	; 0x28
     436:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     438:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     43a:	f893 404b 	ldrb.w	r4, [r3, #75]	; 0x4b
     43e:	f044 0404 	orr.w	r4, r4, #4
     442:	f883 404b 	strb.w	r4, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     446:	6198      	str	r0, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     448:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     44c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     450:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     454:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     456:	629d      	str	r5, [r3, #40]	; 0x28
     458:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     45c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
     460:	f040 0004 	orr.w	r0, r0, #4
     464:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     468:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46a:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     46e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     472:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     476:	f44f 7100 	mov.w	r1, #512	; 0x200
     47a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47c:	4819      	ldr	r0, [pc, #100]	; (4e4 <intializeSensorSelectLines+0x180>)
     47e:	6298      	str	r0, [r3, #40]	; 0x28
     480:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     482:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     484:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
     488:	f040 0004 	orr.w	r0, r0, #4
     48c:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     490:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     492:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     496:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49a:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     49e:	f44f 7180 	mov.w	r1, #256	; 0x100
     4a2:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4a4:	4810      	ldr	r0, [pc, #64]	; (4e8 <intializeSensorSelectLines+0x184>)
     4a6:	6298      	str	r0, [r3, #40]	; 0x28
     4a8:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     4aa:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     4ac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     4b0:	f042 0204 	orr.w	r2, r2, #4
     4b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4b8:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ba:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     4be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	gpio_set_pin_function(SELECT_6, GPIO_PIN_FUNCTION_OFF);		
	
	gpio_set_pin_direction(SELECT_7, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(SELECT_7,GPIO_PULL_UP);
	gpio_set_pin_function(SELECT_7, GPIO_PIN_FUNCTION_OFF);	
}
     4c6:	bc70      	pop	{r4, r5, r6}
     4c8:	4770      	bx	lr
     4ca:	bf00      	nop
     4cc:	41008000 	.word	0x41008000
     4d0:	40022000 	.word	0x40022000
     4d4:	c0020000 	.word	0xc0020000
     4d8:	40021000 	.word	0x40021000
     4dc:	40020800 	.word	0x40020800
     4e0:	40020400 	.word	0x40020400
     4e4:	40020200 	.word	0x40020200
     4e8:	40020100 	.word	0x40020100

000004ec <sensorAdcInitialize>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================================*/
void sensorAdcInitialize(void)
{
     4ec:	b508      	push	{r3, lr}
	ADC_0_init();
     4ee:	4b01      	ldr	r3, [pc, #4]	; (4f4 <sensorAdcInitialize+0x8>)
     4f0:	4798      	blx	r3
     4f2:	bd08      	pop	{r3, pc}
     4f4:	000038ad 	.word	0x000038ad

000004f8 <sensorAdcReadChannel>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================================*/
int32_t sensorAdcReadChannel(const uint8_t channel, uint16_t* result,const uint16_t length)
{
     4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4fc:	b083      	sub	sp, #12
     4fe:	4604      	mov	r4, r0
     500:	460f      	mov	r7, r1
     502:	4690      	mov	r8, r2
	int32_t bytesRead = 0;
	uint32_t voltageInMv = 0;
	uint8_t buffer[2] = {0};
     504:	2300      	movs	r3, #0
     506:	ae02      	add	r6, sp, #8
     508:	f826 3d04 	strh.w	r3, [r6, #-4]!
	*result = 0;
     50c:	800b      	strh	r3, [r1, #0]
	double_t voltageCalculated = 0;
		
	const TickType_t xAdcConvDelayMs = pdMS_TO_TICKS(10UL);

    adc_sync_enable_channel(&ADC_0, channel);
     50e:	4d11      	ldr	r5, [pc, #68]	; (554 <sensorAdcReadChannel+0x5c>)
     510:	4601      	mov	r1, r0
     512:	4628      	mov	r0, r5
     514:	4b10      	ldr	r3, [pc, #64]	; (558 <sensorAdcReadChannel+0x60>)
     516:	4798      	blx	r3
	adc_sync_set_inputs(&ADC_0, channel, 0x19, channel);
     518:	4623      	mov	r3, r4
     51a:	2219      	movs	r2, #25
     51c:	4621      	mov	r1, r4
     51e:	4628      	mov	r0, r5
     520:	f8df 9040 	ldr.w	r9, [pc, #64]	; 564 <sensorAdcReadChannel+0x6c>
     524:	47c8      	blx	r9
	bytesRead = adc_sync_read_channel(&ADC_0, channel, &buffer[0], length);
     526:	4643      	mov	r3, r8
     528:	4632      	mov	r2, r6
     52a:	4621      	mov	r1, r4
     52c:	4628      	mov	r0, r5
     52e:	4e0b      	ldr	r6, [pc, #44]	; (55c <sensorAdcReadChannel+0x64>)
     530:	47b0      	blx	r6
     532:	4606      	mov	r6, r0
	adc_sync_disable_channel(&ADC_0, channel);
     534:	4621      	mov	r1, r4
     536:	4628      	mov	r0, r5
     538:	4b09      	ldr	r3, [pc, #36]	; (560 <sensorAdcReadChannel+0x68>)
     53a:	4798      	blx	r3

	*result = ((buffer[1] << 8) | (buffer[0] & 0x00FF));
     53c:	f89d 2005 	ldrb.w	r2, [sp, #5]
     540:	f89d 3004 	ldrb.w	r3, [sp, #4]
     544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     548:	803b      	strh	r3, [r7, #0]
	
	voltageCalculated = (*result) * (VOLT_SCALE_ADC0);

	return bytesRead;
}
     54a:	4630      	mov	r0, r6
     54c:	b003      	add	sp, #12
     54e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     552:	bf00      	nop
     554:	20003e78 	.word	0x20003e78
     558:	00003aa5 	.word	0x00003aa5
     55c:	00003afd 	.word	0x00003afd
     560:	00003ad1 	.word	0x00003ad1
     564:	00003b9d 	.word	0x00003b9d

00000568 <ADC0_0_Handler>:
/*
 * Not using ADC interrupts now.
 * These are dummy handlers for ADC interrupts.
 */
void ADC0_0_Handler(void)
{
     568:	b508      	push	{r3, lr}
	DEBUG_PRINT("IN ADC0_0 handler");
     56a:	4802      	ldr	r0, [pc, #8]	; (574 <ADC0_0_Handler+0xc>)
     56c:	4b02      	ldr	r3, [pc, #8]	; (578 <ADC0_0_Handler+0x10>)
     56e:	4798      	blx	r3
     570:	bd08      	pop	{r3, pc}
     572:	bf00      	nop
     574:	000077a8 	.word	0x000077a8
     578:	000033b9 	.word	0x000033b9

0000057c <ADC0_1_Handler>:
}

void ADC0_1_Handler(void)
{
     57c:	b508      	push	{r3, lr}
	DEBUG_PRINT("IN ADC0_1 handler");
     57e:	4802      	ldr	r0, [pc, #8]	; (588 <ADC0_1_Handler+0xc>)
     580:	4b02      	ldr	r3, [pc, #8]	; (58c <ADC0_1_Handler+0x10>)
     582:	4798      	blx	r3
     584:	bd08      	pop	{r3, pc}
     586:	bf00      	nop
     588:	000077bc 	.word	0x000077bc
     58c:	000033b9 	.word	0x000033b9

00000590 <FotaFwDownloadCheckTImerCallBack>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
static void FotaFwDownloadCheckTImerCallBack(void* param)
{
     590:	b508      	push	{r3, lr}
	DEBUG_PRINT("FOTA : CHECKING FOR MODEM FIRMWARE UPDATE FROM AIR VANTAGE SERVER.");
     592:	4803      	ldr	r0, [pc, #12]	; (5a0 <FotaFwDownloadCheckTImerCallBack+0x10>)
     594:	4b03      	ldr	r3, [pc, #12]	; (5a4 <FotaFwDownloadCheckTImerCallBack+0x14>)
     596:	4798      	blx	r3
	requestWatchDogForcedReset();
     598:	4b03      	ldr	r3, [pc, #12]	; (5a8 <FotaFwDownloadCheckTImerCallBack+0x18>)
     59a:	4798      	blx	r3
     59c:	bd08      	pop	{r3, pc}
     59e:	bf00      	nop
     5a0:	000077d0 	.word	0x000077d0
     5a4:	000033b9 	.word	0x000033b9
     5a8:	000035f1 	.word	0x000035f1

000005ac <validateCommonCommandResponse>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
static bool validateCommonCommandResponse(uint8_t* response)
{
     5ac:	b508      	push	{r3, lr}
    bool status = false;

    if(0==memcmp(response,"OK",2))
     5ae:	2202      	movs	r2, #2
     5b0:	4903      	ldr	r1, [pc, #12]	; (5c0 <validateCommonCommandResponse+0x14>)
     5b2:	4b04      	ldr	r3, [pc, #16]	; (5c4 <validateCommonCommandResponse+0x18>)
     5b4:	4798      	blx	r3
    {
        status = false;
    }

    return status;
}
     5b6:	fab0 f080 	clz	r0, r0
     5ba:	0940      	lsrs	r0, r0, #5
     5bc:	bd08      	pop	{r3, pc}
     5be:	bf00      	nop
     5c0:	00007814 	.word	0x00007814
     5c4:	00006c1b 	.word	0x00006c1b

000005c8 <FotaAppTask>:
{
     5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5cc:	b084      	sub	sp, #16
    xAutoReloadFwDlCheckTimer   = xTimerCreate("FirmwareDownloadCheckTimer",FOTA_FWDL_CHECK_TIMER_LOAD_VALUE,pdTRUE,0,FotaFwDownloadCheckTImerCallBack);
     5ce:	4b9b      	ldr	r3, [pc, #620]	; (83c <FotaAppTask+0x274>)
     5d0:	9300      	str	r3, [sp, #0]
     5d2:	2300      	movs	r3, #0
     5d4:	2201      	movs	r2, #1
     5d6:	499a      	ldr	r1, [pc, #616]	; (840 <FotaAppTask+0x278>)
     5d8:	489a      	ldr	r0, [pc, #616]	; (844 <FotaAppTask+0x27c>)
     5da:	4c9b      	ldr	r4, [pc, #620]	; (848 <FotaAppTask+0x280>)
     5dc:	47a0      	blx	r4
    if(xAutoReloadFwDlCheckTimer != NULL)
     5de:	b1b8      	cbz	r0, 610 <FotaAppTask+0x48>
     5e0:	4604      	mov	r4, r0
        if(pdPASS == xTimerStart(xAutoReloadFwDlCheckTimer,0))
     5e2:	4b9a      	ldr	r3, [pc, #616]	; (84c <FotaAppTask+0x284>)
     5e4:	4798      	blx	r3
     5e6:	2300      	movs	r3, #0
     5e8:	9300      	str	r3, [sp, #0]
     5ea:	4602      	mov	r2, r0
     5ec:	2101      	movs	r1, #1
     5ee:	4620      	mov	r0, r4
     5f0:	4c97      	ldr	r4, [pc, #604]	; (850 <FotaAppTask+0x288>)
     5f2:	47a0      	blx	r4
    if(false == initializeFotaFirmwareDownloadCheckTimer())
     5f4:	2801      	cmp	r0, #1
     5f6:	d10b      	bne.n	610 <FotaAppTask+0x48>
        FotaMainState = INITIALIZE_TO_DEFAULT_FOTA_SETTINGS;
     5f8:	4b96      	ldr	r3, [pc, #600]	; (854 <FotaAppTask+0x28c>)
     5fa:	2200      	movs	r2, #0
     5fc:	701a      	strb	r2, [r3, #0]
        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     5fe:	705a      	strb	r2, [r3, #1]
        FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     600:	709a      	strb	r2, [r3, #2]
        bFotaVerificationIsDone = false;
     602:	70da      	strb	r2, [r3, #3]
        bNewFirmwareInstalled = false;
     604:	711a      	strb	r2, [r3, #4]
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
     606:	4c94      	ldr	r4, [pc, #592]	; (858 <FotaAppTask+0x290>)
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
bool isFotaVerificationDone(void)
{
    return bFotaVerificationIsDone;
     608:	4d92      	ldr	r5, [pc, #584]	; (854 <FotaAppTask+0x28c>)
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     60a:	f105 0708 	add.w	r7, r5, #8
     60e:	e014      	b.n	63a <FotaAppTask+0x72>
        DEBUG_PRINT("Error: FOTA timer not started. Rebooting the system...");
     610:	4892      	ldr	r0, [pc, #584]	; (85c <FotaAppTask+0x294>)
     612:	4b93      	ldr	r3, [pc, #588]	; (860 <FotaAppTask+0x298>)
     614:	4798      	blx	r3
        requestWatchDogForcedReset();
     616:	4b93      	ldr	r3, [pc, #588]	; (864 <FotaAppTask+0x29c>)
     618:	4798      	blx	r3
     61a:	e7f4      	b.n	606 <FotaAppTask+0x3e>
            FotaMainState = SET_APN_TO_C0NNECT_WITH_AIRVANTAGE;
     61c:	2301      	movs	r3, #1
     61e:	702b      	strb	r3, [r5, #0]
            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     620:	2300      	movs	r3, #0
     622:	706b      	strb	r3, [r5, #1]
            FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     624:	70ab      	strb	r3, [r5, #2]
            bFotaVerificationIsDone = false;
     626:	70eb      	strb	r3, [r5, #3]
            bNewFirmwareInstalled = false;
     628:	712b      	strb	r3, [r5, #4]
            mdmCtrlr_FlushRxBuffer();
     62a:	4b8f      	ldr	r3, [pc, #572]	; (868 <FotaAppTask+0x2a0>)
     62c:	4798      	blx	r3
            kickWatchDog();
     62e:	4b8f      	ldr	r3, [pc, #572]	; (86c <FotaAppTask+0x2a4>)
     630:	4798      	blx	r3
            vTaskDelay(xDelayMs);
     632:	f44f 7016 	mov.w	r0, #600	; 0x258
     636:	4b8e      	ldr	r3, [pc, #568]	; (870 <FotaAppTask+0x2a8>)
     638:	4798      	blx	r3
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
     63a:	47a0      	blx	r4
     63c:	2804      	cmp	r0, #4
     63e:	d1fc      	bne.n	63a <FotaAppTask+0x72>
     640:	78eb      	ldrb	r3, [r5, #3]
     642:	2b00      	cmp	r3, #0
     644:	d1f9      	bne.n	63a <FotaAppTask+0x72>
    switch(FotaMainState)
     646:	782b      	ldrb	r3, [r5, #0]
     648:	2b07      	cmp	r3, #7
     64a:	d8f0      	bhi.n	62e <FotaAppTask+0x66>
     64c:	a201      	add	r2, pc, #4	; (adr r2, 654 <FotaAppTask+0x8c>)
     64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     652:	bf00      	nop
     654:	0000061d 	.word	0x0000061d
     658:	00000675 	.word	0x00000675
     65c:	00000761 	.word	0x00000761
     660:	000008d3 	.word	0x000008d3
     664:	00000acb 	.word	0x00000acb
     668:	00000c11 	.word	0x00000c11
     66c:	00000e69 	.word	0x00000e69
     670:	00000f5d 	.word	0x00000f5d
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     674:	786b      	ldrb	r3, [r5, #1]
     676:	b31b      	cbz	r3, 6c0 <FotaAppTask+0xf8>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     678:	2b01      	cmp	r3, #1
     67a:	d1d8      	bne.n	62e <FotaAppTask+0x66>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     67c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     680:	4639      	mov	r1, r7
     682:	4b7c      	ldr	r3, [pc, #496]	; (874 <FotaAppTask+0x2ac>)
     684:	6818      	ldr	r0, [r3, #0]
     686:	4b7c      	ldr	r3, [pc, #496]	; (878 <FotaAppTask+0x2b0>)
     688:	4798      	blx	r3
     68a:	2801      	cmp	r0, #1
     68c:	d1cf      	bne.n	62e <FotaAppTask+0x66>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSS_SET_APN)
     68e:	7a2b      	ldrb	r3, [r5, #8]
     690:	2b1d      	cmp	r3, #29
     692:	d15c      	bne.n	74e <FotaAppTask+0x186>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     694:	68e8      	ldr	r0, [r5, #12]
     696:	4b79      	ldr	r3, [pc, #484]	; (87c <FotaAppTask+0x2b4>)
     698:	4798      	blx	r3
     69a:	2800      	cmp	r0, #0
     69c:	d04f      	beq.n	73e <FotaAppTask+0x176>
                            DEBUG_PRINT("FOTA : Set the APN for connecting to Air Vantage");
     69e:	4878      	ldr	r0, [pc, #480]	; (880 <FotaAppTask+0x2b8>)
     6a0:	4e6f      	ldr	r6, [pc, #444]	; (860 <FotaAppTask+0x298>)
     6a2:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     6a4:	8969      	ldrh	r1, [r5, #10]
     6a6:	68e8      	ldr	r0, [r5, #12]
     6a8:	4b76      	ldr	r3, [pc, #472]	; (884 <FotaAppTask+0x2bc>)
     6aa:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     6ac:	4876      	ldr	r0, [pc, #472]	; (888 <FotaAppTask+0x2c0>)
     6ae:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     6b0:	2300      	movs	r3, #0
     6b2:	706b      	strb	r3, [r5, #1]
                            FotaMainState = ACTIVATE_DEVICE_SERVICE_INDICATIONS;
     6b4:	2302      	movs	r3, #2
     6b6:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     6b8:	68e8      	ldr	r0, [r5, #12]
     6ba:	4b74      	ldr	r3, [pc, #464]	; (88c <FotaAppTask+0x2c4>)
     6bc:	4798      	blx	r3
     6be:	e7b6      	b.n	62e <FotaAppTask+0x66>
                vTaskDelay(startupDelayMs);
     6c0:	f241 7070 	movw	r0, #6000	; 0x1770
     6c4:	4b6a      	ldr	r3, [pc, #424]	; (870 <FotaAppTask+0x2a8>)
     6c6:	4798      	blx	r3
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     6c8:	4b71      	ldr	r3, [pc, #452]	; (890 <FotaAppTask+0x2c8>)
     6ca:	6818      	ldr	r0, [r3, #0]
     6cc:	4b71      	ldr	r3, [pc, #452]	; (894 <FotaAppTask+0x2cc>)
     6ce:	4798      	blx	r3
     6d0:	2800      	cmp	r0, #0
     6d2:	d130      	bne.n	736 <FotaAppTask+0x16e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     6d4:	2100      	movs	r1, #0
     6d6:	4b70      	ldr	r3, [pc, #448]	; (898 <FotaAppTask+0x2d0>)
     6d8:	6818      	ldr	r0, [r3, #0]
     6da:	4b70      	ldr	r3, [pc, #448]	; (89c <FotaAppTask+0x2d4>)
     6dc:	4798      	blx	r3
     6de:	2801      	cmp	r0, #1
     6e0:	d003      	beq.n	6ea <FotaAppTask+0x122>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     6e2:	486f      	ldr	r0, [pc, #444]	; (8a0 <FotaAppTask+0x2d8>)
     6e4:	4b5e      	ldr	r3, [pc, #376]	; (860 <FotaAppTask+0x298>)
     6e6:	4798      	blx	r3
     6e8:	e7a1      	b.n	62e <FotaAppTask+0x66>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     6ea:	2305      	movs	r3, #5
     6ec:	f88d 3008 	strb.w	r3, [sp, #8]
                        TxMsgQueueData.atCmd = CMD_AT_WDSS_SET_APN;
     6f0:	231d      	movs	r3, #29
     6f2:	f88d 3009 	strb.w	r3, [sp, #9]
                        TxMsgQueueData.pData = NULL;
     6f6:	2300      	movs	r3, #0
     6f8:	9303      	str	r3, [sp, #12]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     6fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     6fe:	a902      	add	r1, sp, #8
     700:	4863      	ldr	r0, [pc, #396]	; (890 <FotaAppTask+0x2c8>)
     702:	6800      	ldr	r0, [r0, #0]
     704:	4e67      	ldr	r6, [pc, #412]	; (8a4 <FotaAppTask+0x2dc>)
     706:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     708:	2801      	cmp	r0, #1
     70a:	d007      	beq.n	71c <FotaAppTask+0x154>
                            DEBUG_PRINT("Failed to sent the set APN request to Tx Task");
     70c:	4866      	ldr	r0, [pc, #408]	; (8a8 <FotaAppTask+0x2e0>)
     70e:	4b54      	ldr	r3, [pc, #336]	; (860 <FotaAppTask+0x298>)
     710:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     712:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     716:	4b56      	ldr	r3, [pc, #344]	; (870 <FotaAppTask+0x2a8>)
     718:	4798      	blx	r3
     71a:	e788      	b.n	62e <FotaAppTask+0x66>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     71c:	2300      	movs	r3, #0
     71e:	461a      	mov	r2, r3
     720:	4619      	mov	r1, r3
     722:	485d      	ldr	r0, [pc, #372]	; (898 <FotaAppTask+0x2d0>)
     724:	6800      	ldr	r0, [r0, #0]
     726:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     728:	2301      	movs	r3, #1
     72a:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     72c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     730:	4b4f      	ldr	r3, [pc, #316]	; (870 <FotaAppTask+0x2a8>)
     732:	4798      	blx	r3
     734:	e77b      	b.n	62e <FotaAppTask+0x66>
                    DEBUG_PRINT("Transmit Queue is not empty");
     736:	485d      	ldr	r0, [pc, #372]	; (8ac <FotaAppTask+0x2e4>)
     738:	4b49      	ldr	r3, [pc, #292]	; (860 <FotaAppTask+0x298>)
     73a:	4798      	blx	r3
     73c:	e777      	b.n	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     73e:	485c      	ldr	r0, [pc, #368]	; (8b0 <FotaAppTask+0x2e8>)
     740:	4e47      	ldr	r6, [pc, #284]	; (860 <FotaAppTask+0x298>)
     742:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     744:	4850      	ldr	r0, [pc, #320]	; (888 <FotaAppTask+0x2c0>)
     746:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     748:	2300      	movs	r3, #0
     74a:	706b      	strb	r3, [r5, #1]
     74c:	e7b4      	b.n	6b8 <FotaAppTask+0xf0>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     74e:	4859      	ldr	r0, [pc, #356]	; (8b4 <FotaAppTask+0x2ec>)
     750:	4b43      	ldr	r3, [pc, #268]	; (860 <FotaAppTask+0x298>)
     752:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     754:	2300      	movs	r3, #0
     756:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     758:	68e8      	ldr	r0, [r5, #12]
     75a:	4b4c      	ldr	r3, [pc, #304]	; (88c <FotaAppTask+0x2c4>)
     75c:	4798      	blx	r3
     75e:	e766      	b.n	62e <FotaAppTask+0x66>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     760:	786b      	ldrb	r3, [r5, #1]
     762:	b33b      	cbz	r3, 7b4 <FotaAppTask+0x1ec>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     764:	2b01      	cmp	r3, #1
     766:	f47f af62 	bne.w	62e <FotaAppTask+0x66>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     76a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     76e:	4639      	mov	r1, r7
     770:	4b40      	ldr	r3, [pc, #256]	; (874 <FotaAppTask+0x2ac>)
     772:	6818      	ldr	r0, [r3, #0]
     774:	4b40      	ldr	r3, [pc, #256]	; (878 <FotaAppTask+0x2b0>)
     776:	4798      	blx	r3
     778:	2801      	cmp	r0, #1
     77a:	f47f af58 	bne.w	62e <FotaAppTask+0x66>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSI)
     77e:	7a2b      	ldrb	r3, [r5, #8]
     780:	2b1f      	cmp	r3, #31
     782:	f040 809d 	bne.w	8c0 <FotaAppTask+0x2f8>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     786:	68e8      	ldr	r0, [r5, #12]
     788:	4b3c      	ldr	r3, [pc, #240]	; (87c <FotaAppTask+0x2b4>)
     78a:	4798      	blx	r3
     78c:	2800      	cmp	r0, #0
     78e:	d04c      	beq.n	82a <FotaAppTask+0x262>
                            DEBUG_PRINT("FOTA : Set device service indications.");
     790:	4849      	ldr	r0, [pc, #292]	; (8b8 <FotaAppTask+0x2f0>)
     792:	4e33      	ldr	r6, [pc, #204]	; (860 <FotaAppTask+0x298>)
     794:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     796:	8969      	ldrh	r1, [r5, #10]
     798:	68e8      	ldr	r0, [r5, #12]
     79a:	4b3a      	ldr	r3, [pc, #232]	; (884 <FotaAppTask+0x2bc>)
     79c:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     79e:	483a      	ldr	r0, [pc, #232]	; (888 <FotaAppTask+0x2c0>)
     7a0:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     7a2:	2300      	movs	r3, #0
     7a4:	706b      	strb	r3, [r5, #1]
                            FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     7a6:	2203      	movs	r2, #3
     7a8:	702a      	strb	r2, [r5, #0]
                            FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     7aa:	70ab      	strb	r3, [r5, #2]
                        vPortFree(FotaCommandResponse.response);
     7ac:	68e8      	ldr	r0, [r5, #12]
     7ae:	4b37      	ldr	r3, [pc, #220]	; (88c <FotaAppTask+0x2c4>)
     7b0:	4798      	blx	r3
     7b2:	e73c      	b.n	62e <FotaAppTask+0x66>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     7b4:	4b36      	ldr	r3, [pc, #216]	; (890 <FotaAppTask+0x2c8>)
     7b6:	6818      	ldr	r0, [r3, #0]
     7b8:	4b36      	ldr	r3, [pc, #216]	; (894 <FotaAppTask+0x2cc>)
     7ba:	4798      	blx	r3
     7bc:	2800      	cmp	r0, #0
     7be:	d130      	bne.n	822 <FotaAppTask+0x25a>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     7c0:	2100      	movs	r1, #0
     7c2:	4b35      	ldr	r3, [pc, #212]	; (898 <FotaAppTask+0x2d0>)
     7c4:	6818      	ldr	r0, [r3, #0]
     7c6:	4b35      	ldr	r3, [pc, #212]	; (89c <FotaAppTask+0x2d4>)
     7c8:	4798      	blx	r3
     7ca:	2801      	cmp	r0, #1
     7cc:	d003      	beq.n	7d6 <FotaAppTask+0x20e>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     7ce:	4834      	ldr	r0, [pc, #208]	; (8a0 <FotaAppTask+0x2d8>)
     7d0:	4b23      	ldr	r3, [pc, #140]	; (860 <FotaAppTask+0x298>)
     7d2:	4798      	blx	r3
     7d4:	e72b      	b.n	62e <FotaAppTask+0x66>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     7d6:	2305      	movs	r3, #5
     7d8:	f88d 3008 	strb.w	r3, [sp, #8]
                        TxMsgQueueData.atCmd = CMD_AT_WDSI;
     7dc:	231f      	movs	r3, #31
     7de:	f88d 3009 	strb.w	r3, [sp, #9]
                        TxMsgQueueData.pData = NULL;
     7e2:	2300      	movs	r3, #0
     7e4:	9303      	str	r3, [sp, #12]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     7e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     7ea:	a902      	add	r1, sp, #8
     7ec:	4828      	ldr	r0, [pc, #160]	; (890 <FotaAppTask+0x2c8>)
     7ee:	6800      	ldr	r0, [r0, #0]
     7f0:	4e2c      	ldr	r6, [pc, #176]	; (8a4 <FotaAppTask+0x2dc>)
     7f2:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     7f4:	2801      	cmp	r0, #1
     7f6:	d007      	beq.n	808 <FotaAppTask+0x240>
                            DEBUG_PRINT("Failed to sent the service indication request to Tx Task");
     7f8:	4830      	ldr	r0, [pc, #192]	; (8bc <FotaAppTask+0x2f4>)
     7fa:	4b19      	ldr	r3, [pc, #100]	; (860 <FotaAppTask+0x298>)
     7fc:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     7fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     802:	4b1b      	ldr	r3, [pc, #108]	; (870 <FotaAppTask+0x2a8>)
     804:	4798      	blx	r3
     806:	e712      	b.n	62e <FotaAppTask+0x66>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     808:	2300      	movs	r3, #0
     80a:	461a      	mov	r2, r3
     80c:	4619      	mov	r1, r3
     80e:	4822      	ldr	r0, [pc, #136]	; (898 <FotaAppTask+0x2d0>)
     810:	6800      	ldr	r0, [r0, #0]
     812:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     814:	2301      	movs	r3, #1
     816:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     81c:	4b14      	ldr	r3, [pc, #80]	; (870 <FotaAppTask+0x2a8>)
     81e:	4798      	blx	r3
     820:	e705      	b.n	62e <FotaAppTask+0x66>
                    DEBUG_PRINT("Transmit Queue is not empty");
     822:	4822      	ldr	r0, [pc, #136]	; (8ac <FotaAppTask+0x2e4>)
     824:	4b0e      	ldr	r3, [pc, #56]	; (860 <FotaAppTask+0x298>)
     826:	4798      	blx	r3
     828:	e701      	b.n	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     82a:	4821      	ldr	r0, [pc, #132]	; (8b0 <FotaAppTask+0x2e8>)
     82c:	4e0c      	ldr	r6, [pc, #48]	; (860 <FotaAppTask+0x298>)
     82e:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     830:	4815      	ldr	r0, [pc, #84]	; (888 <FotaAppTask+0x2c0>)
     832:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     834:	2300      	movs	r3, #0
     836:	706b      	strb	r3, [r5, #1]
     838:	e7b8      	b.n	7ac <FotaAppTask+0x1e4>
     83a:	bf00      	nop
     83c:	00000591 	.word	0x00000591
     840:	0007a3ae 	.word	0x0007a3ae
     844:	00007818 	.word	0x00007818
     848:	0000686d 	.word	0x0000686d
     84c:	00005e6d 	.word	0x00005e6d
     850:	000068c1 	.word	0x000068c1
     854:	2000028c 	.word	0x2000028c
     858:	00002d95 	.word	0x00002d95
     85c:	00007834 	.word	0x00007834
     860:	000033b9 	.word	0x000033b9
     864:	000035f1 	.word	0x000035f1
     868:	00002ab1 	.word	0x00002ab1
     86c:	000035b1 	.word	0x000035b1
     870:	000060ad 	.word	0x000060ad
     874:	20003594 	.word	0x20003594
     878:	0000572d 	.word	0x0000572d
     87c:	000005ad 	.word	0x000005ad
     880:	000078e4 	.word	0x000078e4
     884:	00003375 	.word	0x00003375
     888:	00009394 	.word	0x00009394
     88c:	000050f5 	.word	0x000050f5
     890:	20003588 	.word	0x20003588
     894:	00005a95 	.word	0x00005a95
     898:	2000359c 	.word	0x2000359c
     89c:	000058b5 	.word	0x000058b5
     8a0:	0000789c 	.word	0x0000789c
     8a4:	0000541d 	.word	0x0000541d
     8a8:	0000786c 	.word	0x0000786c
     8ac:	000078c8 	.word	0x000078c8
     8b0:	00007918 	.word	0x00007918
     8b4:	00007940 	.word	0x00007940
     8b8:	000079b4 	.word	0x000079b4
     8bc:	00007978 	.word	0x00007978
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     8c0:	4897      	ldr	r0, [pc, #604]	; (b20 <FotaAppTask+0x558>)
     8c2:	4b98      	ldr	r3, [pc, #608]	; (b24 <FotaAppTask+0x55c>)
     8c4:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     8c6:	2300      	movs	r3, #0
     8c8:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     8ca:	68e8      	ldr	r0, [r5, #12]
     8cc:	4b96      	ldr	r3, [pc, #600]	; (b28 <FotaAppTask+0x560>)
     8ce:	4798      	blx	r3
     8d0:	e6ad      	b.n	62e <FotaAppTask+0x66>
            switch(FotaUserAgreementActivationState)
     8d2:	78ab      	ldrb	r3, [r5, #2]
     8d4:	2b00      	cmp	r3, #0
     8d6:	d02f      	beq.n	938 <FotaAppTask+0x370>
     8d8:	2b01      	cmp	r3, #1
     8da:	f47f aea8 	bne.w	62e <FotaAppTask+0x66>
                    if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     8de:	786b      	ldrb	r3, [r5, #1]
     8e0:	2b00      	cmp	r3, #0
     8e2:	f000 80a3 	beq.w	a2c <FotaAppTask+0x464>
                    else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     8e6:	2b01      	cmp	r3, #1
     8e8:	f47f aea1 	bne.w	62e <FotaAppTask+0x66>
                        if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     8ec:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     8f0:	4639      	mov	r1, r7
     8f2:	4b8e      	ldr	r3, [pc, #568]	; (b2c <FotaAppTask+0x564>)
     8f4:	6818      	ldr	r0, [r3, #0]
     8f6:	4b8e      	ldr	r3, [pc, #568]	; (b30 <FotaAppTask+0x568>)
     8f8:	4798      	blx	r3
     8fa:	2801      	cmp	r0, #1
     8fc:	f47f ae97 	bne.w	62e <FotaAppTask+0x66>
                            if(FotaCommandResponse.atCmd == CMD_AT_WDSC_FW_INSTALL)
     900:	7a2b      	ldrb	r3, [r5, #8]
     902:	2b21      	cmp	r3, #33	; 0x21
     904:	f040 80d8 	bne.w	ab8 <FotaAppTask+0x4f0>
                                if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     908:	68e8      	ldr	r0, [r5, #12]
     90a:	4b8a      	ldr	r3, [pc, #552]	; (b34 <FotaAppTask+0x56c>)
     90c:	4798      	blx	r3
     90e:	2800      	cmp	r0, #0
     910:	f000 80ca 	beq.w	aa8 <FotaAppTask+0x4e0>
                                    DEBUG_PRINT("FOTA : Set user agreement activation for FW installation.");
     914:	4888      	ldr	r0, [pc, #544]	; (b38 <FotaAppTask+0x570>)
     916:	4e83      	ldr	r6, [pc, #524]	; (b24 <FotaAppTask+0x55c>)
     918:	47b0      	blx	r6
                                    SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     91a:	8969      	ldrh	r1, [r5, #10]
     91c:	68e8      	ldr	r0, [r5, #12]
     91e:	4b87      	ldr	r3, [pc, #540]	; (b3c <FotaAppTask+0x574>)
     920:	4798      	blx	r3
                                    DEBUG_PRINT("\r\n");
     922:	4887      	ldr	r0, [pc, #540]	; (b40 <FotaAppTask+0x578>)
     924:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     926:	2300      	movs	r3, #0
     928:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = START_DM_SESSION_WITH_AIR_VANTAGE;
     92a:	2204      	movs	r2, #4
     92c:	702a      	strb	r2, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     92e:	70ab      	strb	r3, [r5, #2]
                                vPortFree(FotaCommandResponse.response);
     930:	68e8      	ldr	r0, [r5, #12]
     932:	4b7d      	ldr	r3, [pc, #500]	; (b28 <FotaAppTask+0x560>)
     934:	4798      	blx	r3
     936:	e67a      	b.n	62e <FotaAppTask+0x66>
                    if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     938:	786b      	ldrb	r3, [r5, #1]
     93a:	b33b      	cbz	r3, 98c <FotaAppTask+0x3c4>
                    else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     93c:	2b01      	cmp	r3, #1
     93e:	f47f ae76 	bne.w	62e <FotaAppTask+0x66>
                        if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     942:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     946:	4639      	mov	r1, r7
     948:	4b78      	ldr	r3, [pc, #480]	; (b2c <FotaAppTask+0x564>)
     94a:	6818      	ldr	r0, [r3, #0]
     94c:	4b78      	ldr	r3, [pc, #480]	; (b30 <FotaAppTask+0x568>)
     94e:	4798      	blx	r3
     950:	2801      	cmp	r0, #1
     952:	f47f ae6c 	bne.w	62e <FotaAppTask+0x66>
                            if(FotaCommandResponse.atCmd == CMD_AT_WDSC_FW_DOWNLOAD)
     956:	7a2b      	ldrb	r3, [r5, #8]
     958:	2b20      	cmp	r3, #32
     95a:	d15e      	bne.n	a1a <FotaAppTask+0x452>
                                if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     95c:	68e8      	ldr	r0, [r5, #12]
     95e:	4b75      	ldr	r3, [pc, #468]	; (b34 <FotaAppTask+0x56c>)
     960:	4798      	blx	r3
     962:	2800      	cmp	r0, #0
     964:	d051      	beq.n	a0a <FotaAppTask+0x442>
                                    DEBUG_PRINT("FOTA : Set user agreement activation for FW download.");
     966:	4877      	ldr	r0, [pc, #476]	; (b44 <FotaAppTask+0x57c>)
     968:	4e6e      	ldr	r6, [pc, #440]	; (b24 <FotaAppTask+0x55c>)
     96a:	47b0      	blx	r6
                                    SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     96c:	8969      	ldrh	r1, [r5, #10]
     96e:	68e8      	ldr	r0, [r5, #12]
     970:	4b72      	ldr	r3, [pc, #456]	; (b3c <FotaAppTask+0x574>)
     972:	4798      	blx	r3
                                    DEBUG_PRINT("\r\n");
     974:	4872      	ldr	r0, [pc, #456]	; (b40 <FotaAppTask+0x578>)
     976:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     978:	2300      	movs	r3, #0
     97a:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     97c:	2303      	movs	r3, #3
     97e:	702b      	strb	r3, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_INSTALLATION;
     980:	2301      	movs	r3, #1
     982:	70ab      	strb	r3, [r5, #2]
                                vPortFree(FotaCommandResponse.response);
     984:	68e8      	ldr	r0, [r5, #12]
     986:	4b68      	ldr	r3, [pc, #416]	; (b28 <FotaAppTask+0x560>)
     988:	4798      	blx	r3
     98a:	e650      	b.n	62e <FotaAppTask+0x66>
                        if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     98c:	4b6e      	ldr	r3, [pc, #440]	; (b48 <FotaAppTask+0x580>)
     98e:	6818      	ldr	r0, [r3, #0]
     990:	4b6e      	ldr	r3, [pc, #440]	; (b4c <FotaAppTask+0x584>)
     992:	4798      	blx	r3
     994:	2800      	cmp	r0, #0
     996:	d134      	bne.n	a02 <FotaAppTask+0x43a>
                            if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     998:	2100      	movs	r1, #0
     99a:	4b6d      	ldr	r3, [pc, #436]	; (b50 <FotaAppTask+0x588>)
     99c:	6818      	ldr	r0, [r3, #0]
     99e:	4b6d      	ldr	r3, [pc, #436]	; (b54 <FotaAppTask+0x58c>)
     9a0:	4798      	blx	r3
     9a2:	2801      	cmp	r0, #1
     9a4:	d003      	beq.n	9ae <FotaAppTask+0x3e6>
                                DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     9a6:	486c      	ldr	r0, [pc, #432]	; (b58 <FotaAppTask+0x590>)
     9a8:	4b5e      	ldr	r3, [pc, #376]	; (b24 <FotaAppTask+0x55c>)
     9aa:	4798      	blx	r3
     9ac:	e63f      	b.n	62e <FotaAppTask+0x66>
                                TxMsgQueueData.taskID = FOTA_APP_TASK;
     9ae:	2305      	movs	r3, #5
     9b0:	f88d 3008 	strb.w	r3, [sp, #8]
                                TxMsgQueueData.atCmd = CMD_AT_WDSC_FW_DOWNLOAD;
     9b4:	2320      	movs	r3, #32
     9b6:	f88d 3009 	strb.w	r3, [sp, #9]
                                TxMsgQueueData.pData = NULL;
     9ba:	2300      	movs	r3, #0
     9bc:	9303      	str	r3, [sp, #12]
                                TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     9be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     9c2:	a902      	add	r1, sp, #8
     9c4:	4860      	ldr	r0, [pc, #384]	; (b48 <FotaAppTask+0x580>)
     9c6:	6800      	ldr	r0, [r0, #0]
     9c8:	4e64      	ldr	r6, [pc, #400]	; (b5c <FotaAppTask+0x594>)
     9ca:	47b0      	blx	r6
                                if(TxQueuePushStatus == pdPASS)
     9cc:	2801      	cmp	r0, #1
     9ce:	d007      	beq.n	9e0 <FotaAppTask+0x418>
                                    DEBUG_PRINT("Failed to sent the user agreement activation request for FW download to Tx Task");
     9d0:	4863      	ldr	r0, [pc, #396]	; (b60 <FotaAppTask+0x598>)
     9d2:	4b54      	ldr	r3, [pc, #336]	; (b24 <FotaAppTask+0x55c>)
     9d4:	4798      	blx	r3
                                    vTaskDelay(TransmitDelayMs);
     9d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     9da:	4b62      	ldr	r3, [pc, #392]	; (b64 <FotaAppTask+0x59c>)
     9dc:	4798      	blx	r3
     9de:	e626      	b.n	62e <FotaAppTask+0x66>
                                    xSemaphoreGive(AtTxQueueLoadSemaphore);
     9e0:	2300      	movs	r3, #0
     9e2:	461a      	mov	r2, r3
     9e4:	4619      	mov	r1, r3
     9e6:	485a      	ldr	r0, [pc, #360]	; (b50 <FotaAppTask+0x588>)
     9e8:	6800      	ldr	r0, [r0, #0]
     9ea:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     9ec:	2301      	movs	r3, #1
     9ee:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     9f0:	2303      	movs	r3, #3
     9f2:	702b      	strb	r3, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_DOWNLOAD;
     9f4:	2300      	movs	r3, #0
     9f6:	70ab      	strb	r3, [r5, #2]
                                    vTaskDelay(TransmitDelayMs);
     9f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     9fc:	4b59      	ldr	r3, [pc, #356]	; (b64 <FotaAppTask+0x59c>)
     9fe:	4798      	blx	r3
     a00:	e615      	b.n	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Transmit Queue is not empty");
     a02:	4859      	ldr	r0, [pc, #356]	; (b68 <FotaAppTask+0x5a0>)
     a04:	4b47      	ldr	r3, [pc, #284]	; (b24 <FotaAppTask+0x55c>)
     a06:	4798      	blx	r3
     a08:	e611      	b.n	62e <FotaAppTask+0x66>
                                    DEBUG_PRINT("Error:Expected Response Not Received...");
     a0a:	4858      	ldr	r0, [pc, #352]	; (b6c <FotaAppTask+0x5a4>)
     a0c:	4e45      	ldr	r6, [pc, #276]	; (b24 <FotaAppTask+0x55c>)
     a0e:	47b0      	blx	r6
                                    DEBUG_PRINT("\r\n");
     a10:	484b      	ldr	r0, [pc, #300]	; (b40 <FotaAppTask+0x578>)
     a12:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     a14:	2300      	movs	r3, #0
     a16:	706b      	strb	r3, [r5, #1]
     a18:	e7b4      	b.n	984 <FotaAppTask+0x3bc>
                                DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     a1a:	4841      	ldr	r0, [pc, #260]	; (b20 <FotaAppTask+0x558>)
     a1c:	4b41      	ldr	r3, [pc, #260]	; (b24 <FotaAppTask+0x55c>)
     a1e:	4798      	blx	r3
                                FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     a20:	2300      	movs	r3, #0
     a22:	706b      	strb	r3, [r5, #1]
                                vPortFree(FotaCommandResponse.response);
     a24:	68e8      	ldr	r0, [r5, #12]
     a26:	4b40      	ldr	r3, [pc, #256]	; (b28 <FotaAppTask+0x560>)
     a28:	4798      	blx	r3
     a2a:	e600      	b.n	62e <FotaAppTask+0x66>
                        if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     a2c:	4b46      	ldr	r3, [pc, #280]	; (b48 <FotaAppTask+0x580>)
     a2e:	6818      	ldr	r0, [r3, #0]
     a30:	4b46      	ldr	r3, [pc, #280]	; (b4c <FotaAppTask+0x584>)
     a32:	4798      	blx	r3
     a34:	2800      	cmp	r0, #0
     a36:	d133      	bne.n	aa0 <FotaAppTask+0x4d8>
                            if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     a38:	2100      	movs	r1, #0
     a3a:	4b45      	ldr	r3, [pc, #276]	; (b50 <FotaAppTask+0x588>)
     a3c:	6818      	ldr	r0, [r3, #0]
     a3e:	4b45      	ldr	r3, [pc, #276]	; (b54 <FotaAppTask+0x58c>)
     a40:	4798      	blx	r3
     a42:	2801      	cmp	r0, #1
     a44:	d003      	beq.n	a4e <FotaAppTask+0x486>
                                DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     a46:	4844      	ldr	r0, [pc, #272]	; (b58 <FotaAppTask+0x590>)
     a48:	4b36      	ldr	r3, [pc, #216]	; (b24 <FotaAppTask+0x55c>)
     a4a:	4798      	blx	r3
     a4c:	e5ef      	b.n	62e <FotaAppTask+0x66>
                                TxMsgQueueData.taskID = FOTA_APP_TASK;
     a4e:	2305      	movs	r3, #5
     a50:	f88d 3008 	strb.w	r3, [sp, #8]
                                TxMsgQueueData.atCmd = CMD_AT_WDSC_FW_INSTALL;
     a54:	2321      	movs	r3, #33	; 0x21
     a56:	f88d 3009 	strb.w	r3, [sp, #9]
                                TxMsgQueueData.pData = NULL;
     a5a:	2300      	movs	r3, #0
     a5c:	9303      	str	r3, [sp, #12]
                                TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     a5e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     a62:	a902      	add	r1, sp, #8
     a64:	4838      	ldr	r0, [pc, #224]	; (b48 <FotaAppTask+0x580>)
     a66:	6800      	ldr	r0, [r0, #0]
     a68:	4e3c      	ldr	r6, [pc, #240]	; (b5c <FotaAppTask+0x594>)
     a6a:	47b0      	blx	r6
                                if(TxQueuePushStatus == pdPASS)
     a6c:	2801      	cmp	r0, #1
     a6e:	d007      	beq.n	a80 <FotaAppTask+0x4b8>
                                    DEBUG_PRINT("Failed to sent the user agreement activation request for FW installation to Tx Task");
     a70:	483f      	ldr	r0, [pc, #252]	; (b70 <FotaAppTask+0x5a8>)
     a72:	4b2c      	ldr	r3, [pc, #176]	; (b24 <FotaAppTask+0x55c>)
     a74:	4798      	blx	r3
                                    vTaskDelay(TransmitDelayMs);
     a76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a7a:	4b3a      	ldr	r3, [pc, #232]	; (b64 <FotaAppTask+0x59c>)
     a7c:	4798      	blx	r3
     a7e:	e5d6      	b.n	62e <FotaAppTask+0x66>
                                    xSemaphoreGive(AtTxQueueLoadSemaphore);
     a80:	2300      	movs	r3, #0
     a82:	461a      	mov	r2, r3
     a84:	4619      	mov	r1, r3
     a86:	4832      	ldr	r0, [pc, #200]	; (b50 <FotaAppTask+0x588>)
     a88:	6800      	ldr	r0, [r0, #0]
     a8a:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     a8c:	2301      	movs	r3, #1
     a8e:	706b      	strb	r3, [r5, #1]
                                    FotaMainState = ACTIVATE_USER_AGREEMENTS_WITH_HOST;
     a90:	2203      	movs	r2, #3
     a92:	702a      	strb	r2, [r5, #0]
                                    FotaUserAgreementActivationState = ACTIVATE_USER_AGREEMENT_FOR_FW_INSTALLATION;
     a94:	70ab      	strb	r3, [r5, #2]
                                    vTaskDelay(TransmitDelayMs);
     a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a9a:	4b32      	ldr	r3, [pc, #200]	; (b64 <FotaAppTask+0x59c>)
     a9c:	4798      	blx	r3
     a9e:	e5c6      	b.n	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Transmit Queue is not empty");
     aa0:	4831      	ldr	r0, [pc, #196]	; (b68 <FotaAppTask+0x5a0>)
     aa2:	4b20      	ldr	r3, [pc, #128]	; (b24 <FotaAppTask+0x55c>)
     aa4:	4798      	blx	r3
     aa6:	e5c2      	b.n	62e <FotaAppTask+0x66>
                                    DEBUG_PRINT("Error:Expected Response Not Received...");
     aa8:	4830      	ldr	r0, [pc, #192]	; (b6c <FotaAppTask+0x5a4>)
     aaa:	4e1e      	ldr	r6, [pc, #120]	; (b24 <FotaAppTask+0x55c>)
     aac:	47b0      	blx	r6
                                    DEBUG_PRINT("\r\n");
     aae:	4824      	ldr	r0, [pc, #144]	; (b40 <FotaAppTask+0x578>)
     ab0:	47b0      	blx	r6
                                    FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     ab2:	2300      	movs	r3, #0
     ab4:	706b      	strb	r3, [r5, #1]
     ab6:	e73b      	b.n	930 <FotaAppTask+0x368>
                                DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     ab8:	4819      	ldr	r0, [pc, #100]	; (b20 <FotaAppTask+0x558>)
     aba:	4b1a      	ldr	r3, [pc, #104]	; (b24 <FotaAppTask+0x55c>)
     abc:	4798      	blx	r3
                                FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     abe:	2300      	movs	r3, #0
     ac0:	706b      	strb	r3, [r5, #1]
                                vPortFree(FotaCommandResponse.response);
     ac2:	68e8      	ldr	r0, [r5, #12]
     ac4:	4b18      	ldr	r3, [pc, #96]	; (b28 <FotaAppTask+0x560>)
     ac6:	4798      	blx	r3
     ac8:	e5b1      	b.n	62e <FotaAppTask+0x66>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     aca:	786b      	ldrb	r3, [r5, #1]
     acc:	2b00      	cmp	r3, #0
     ace:	d053      	beq.n	b78 <FotaAppTask+0x5b0>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     ad0:	2b01      	cmp	r3, #1
     ad2:	f47f adac 	bne.w	62e <FotaAppTask+0x66>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     ad6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     ada:	4639      	mov	r1, r7
     adc:	4b13      	ldr	r3, [pc, #76]	; (b2c <FotaAppTask+0x564>)
     ade:	6818      	ldr	r0, [r3, #0]
     ae0:	4b13      	ldr	r3, [pc, #76]	; (b30 <FotaAppTask+0x568>)
     ae2:	4798      	blx	r3
     ae4:	2801      	cmp	r0, #1
     ae6:	f47f ada2 	bne.w	62e <FotaAppTask+0x66>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSS_START_DM_SESSION)
     aea:	7a2b      	ldrb	r3, [r5, #8]
     aec:	2b1e      	cmp	r3, #30
     aee:	f040 8086 	bne.w	bfe <FotaAppTask+0x636>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     af2:	68e8      	ldr	r0, [r5, #12]
     af4:	4b0f      	ldr	r3, [pc, #60]	; (b34 <FotaAppTask+0x56c>)
     af6:	4798      	blx	r3
     af8:	2800      	cmp	r0, #0
     afa:	d078      	beq.n	bee <FotaAppTask+0x626>
                            DEBUG_PRINT("FOTA : Initiating the DM session with Air Vantage.");
     afc:	481d      	ldr	r0, [pc, #116]	; (b74 <FotaAppTask+0x5ac>)
     afe:	4e09      	ldr	r6, [pc, #36]	; (b24 <FotaAppTask+0x55c>)
     b00:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     b02:	8969      	ldrh	r1, [r5, #10]
     b04:	68e8      	ldr	r0, [r5, #12]
     b06:	4b0d      	ldr	r3, [pc, #52]	; (b3c <FotaAppTask+0x574>)
     b08:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     b0a:	480d      	ldr	r0, [pc, #52]	; (b40 <FotaAppTask+0x578>)
     b0c:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     b0e:	2300      	movs	r3, #0
     b10:	706b      	strb	r3, [r5, #1]
                            FotaMainState = SYSTEM_IS_IN_FIRMWARE_DOWNLOAD_MODE;
     b12:	2305      	movs	r3, #5
     b14:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     b16:	68e8      	ldr	r0, [r5, #12]
     b18:	4b03      	ldr	r3, [pc, #12]	; (b28 <FotaAppTask+0x560>)
     b1a:	4798      	blx	r3
     b1c:	e587      	b.n	62e <FotaAppTask+0x66>
     b1e:	bf00      	nop
     b20:	00007940 	.word	0x00007940
     b24:	000033b9 	.word	0x000033b9
     b28:	000050f5 	.word	0x000050f5
     b2c:	20003594 	.word	0x20003594
     b30:	0000572d 	.word	0x0000572d
     b34:	000005ad 	.word	0x000005ad
     b38:	00007ab8 	.word	0x00007ab8
     b3c:	00003375 	.word	0x00003375
     b40:	00009394 	.word	0x00009394
     b44:	00007a2c 	.word	0x00007a2c
     b48:	20003588 	.word	0x20003588
     b4c:	00005a95 	.word	0x00005a95
     b50:	2000359c 	.word	0x2000359c
     b54:	000058b5 	.word	0x000058b5
     b58:	0000789c 	.word	0x0000789c
     b5c:	0000541d 	.word	0x0000541d
     b60:	000079dc 	.word	0x000079dc
     b64:	000060ad 	.word	0x000060ad
     b68:	000078c8 	.word	0x000078c8
     b6c:	00007918 	.word	0x00007918
     b70:	00007a64 	.word	0x00007a64
     b74:	00007b2c 	.word	0x00007b2c
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     b78:	4b91      	ldr	r3, [pc, #580]	; (dc0 <FotaAppTask+0x7f8>)
     b7a:	6818      	ldr	r0, [r3, #0]
     b7c:	4b91      	ldr	r3, [pc, #580]	; (dc4 <FotaAppTask+0x7fc>)
     b7e:	4798      	blx	r3
     b80:	2800      	cmp	r0, #0
     b82:	d130      	bne.n	be6 <FotaAppTask+0x61e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     b84:	2100      	movs	r1, #0
     b86:	4b90      	ldr	r3, [pc, #576]	; (dc8 <FotaAppTask+0x800>)
     b88:	6818      	ldr	r0, [r3, #0]
     b8a:	4b90      	ldr	r3, [pc, #576]	; (dcc <FotaAppTask+0x804>)
     b8c:	4798      	blx	r3
     b8e:	2801      	cmp	r0, #1
     b90:	d003      	beq.n	b9a <FotaAppTask+0x5d2>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     b92:	488f      	ldr	r0, [pc, #572]	; (dd0 <FotaAppTask+0x808>)
     b94:	4b8f      	ldr	r3, [pc, #572]	; (dd4 <FotaAppTask+0x80c>)
     b96:	4798      	blx	r3
     b98:	e549      	b.n	62e <FotaAppTask+0x66>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     b9a:	2305      	movs	r3, #5
     b9c:	f88d 3008 	strb.w	r3, [sp, #8]
                        TxMsgQueueData.atCmd = CMD_AT_WDSS_START_DM_SESSION;
     ba0:	231e      	movs	r3, #30
     ba2:	f88d 3009 	strb.w	r3, [sp, #9]
                        TxMsgQueueData.pData = NULL;
     ba6:	2300      	movs	r3, #0
     ba8:	9303      	str	r3, [sp, #12]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     baa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     bae:	a902      	add	r1, sp, #8
     bb0:	4883      	ldr	r0, [pc, #524]	; (dc0 <FotaAppTask+0x7f8>)
     bb2:	6800      	ldr	r0, [r0, #0]
     bb4:	4e88      	ldr	r6, [pc, #544]	; (dd8 <FotaAppTask+0x810>)
     bb6:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     bb8:	2801      	cmp	r0, #1
     bba:	d007      	beq.n	bcc <FotaAppTask+0x604>
                            DEBUG_PRINT("Failed to sent the start DM session request to Tx Task");
     bbc:	4887      	ldr	r0, [pc, #540]	; (ddc <FotaAppTask+0x814>)
     bbe:	4b85      	ldr	r3, [pc, #532]	; (dd4 <FotaAppTask+0x80c>)
     bc0:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     bc6:	4b86      	ldr	r3, [pc, #536]	; (de0 <FotaAppTask+0x818>)
     bc8:	4798      	blx	r3
     bca:	e530      	b.n	62e <FotaAppTask+0x66>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     bcc:	2300      	movs	r3, #0
     bce:	461a      	mov	r2, r3
     bd0:	4619      	mov	r1, r3
     bd2:	487d      	ldr	r0, [pc, #500]	; (dc8 <FotaAppTask+0x800>)
     bd4:	6800      	ldr	r0, [r0, #0]
     bd6:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     bd8:	2301      	movs	r3, #1
     bda:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     be0:	4b7f      	ldr	r3, [pc, #508]	; (de0 <FotaAppTask+0x818>)
     be2:	4798      	blx	r3
     be4:	e523      	b.n	62e <FotaAppTask+0x66>
                    DEBUG_PRINT("Transmit Queue is not empty");
     be6:	487f      	ldr	r0, [pc, #508]	; (de4 <FotaAppTask+0x81c>)
     be8:	4b7a      	ldr	r3, [pc, #488]	; (dd4 <FotaAppTask+0x80c>)
     bea:	4798      	blx	r3
     bec:	e51f      	b.n	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     bee:	487e      	ldr	r0, [pc, #504]	; (de8 <FotaAppTask+0x820>)
     bf0:	4e78      	ldr	r6, [pc, #480]	; (dd4 <FotaAppTask+0x80c>)
     bf2:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     bf4:	487d      	ldr	r0, [pc, #500]	; (dec <FotaAppTask+0x824>)
     bf6:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     bf8:	2300      	movs	r3, #0
     bfa:	706b      	strb	r3, [r5, #1]
     bfc:	e78b      	b.n	b16 <FotaAppTask+0x54e>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     bfe:	487c      	ldr	r0, [pc, #496]	; (df0 <FotaAppTask+0x828>)
     c00:	4b74      	ldr	r3, [pc, #464]	; (dd4 <FotaAppTask+0x80c>)
     c02:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     c04:	2300      	movs	r3, #0
     c06:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     c08:	68e8      	ldr	r0, [r5, #12]
     c0a:	4b7a      	ldr	r3, [pc, #488]	; (df4 <FotaAppTask+0x82c>)
     c0c:	4798      	blx	r3
     c0e:	e50e      	b.n	62e <FotaAppTask+0x66>
**===========================================================================*/
static DEVICE_SERVICE_INDICATION_TYPE getDeviceServiceIndicationType(void)
{
    uint32_t unsolicitedResponseLength = 0;
    uint8_t* responseBuffer = NULL;
    uint8_t dataString[2] = {0};
     c10:	2300      	movs	r3, #0
     c12:	f8ad 3008 	strh.w	r3, [sp, #8]
    bool readStatus;
    DEVICE_SERVICE_INDICATION_TYPE serviceIndicationType = SERVICE_INDICATION_ERROR;
    const int8_t* serviceIndicationCmdString = (int8_t*)"\r\n+WDSI: "; 

    while(mdmCtrlr_GetUnsolicitedResponseLength() < SERVICE_INDICATION_RESPONSE_LENGTH);
     c16:	4e78      	ldr	r6, [pc, #480]	; (df8 <FotaAppTask+0x830>)
     c18:	47b0      	blx	r6
     c1a:	280b      	cmp	r0, #11
     c1c:	d9fc      	bls.n	c18 <FotaAppTask+0x650>

    if(mdmCtrlr_GetUnsolicitedResponseLength() > SERVICE_INDICATION_RESPONSE_LENGTH)
     c1e:	4b76      	ldr	r3, [pc, #472]	; (df8 <FotaAppTask+0x830>)
     c20:	4798      	blx	r3
     c22:	280c      	cmp	r0, #12
     c24:	d93a      	bls.n	c9c <FotaAppTask+0x6d4>
    {
        unsolicitedResponseLength = mdmCtrlr_GetUnsolicitedResponseLength() - SERVICE_INDICATION_RESPONSE_LENGTH;
     c26:	4b74      	ldr	r3, [pc, #464]	; (df8 <FotaAppTask+0x830>)
     c28:	4798      	blx	r3
     c2a:	f1a0 060c 	sub.w	r6, r0, #12
    {
        unsolicitedResponseLength = mdmCtrlr_GetUnsolicitedResponseLength();
    }


    responseBuffer = (uint8_t*)pvPortMalloc((unsolicitedResponseLength)*(sizeof(uint8_t)));
     c2e:	4630      	mov	r0, r6
     c30:	4b72      	ldr	r3, [pc, #456]	; (dfc <FotaAppTask+0x834>)
     c32:	4798      	blx	r3

    if(responseBuffer != NULL)
     c34:	4680      	mov	r8, r0
     c36:	2800      	cmp	r0, #0
     c38:	f43f acf9 	beq.w	62e <FotaAppTask+0x66>
    {
        readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,unsolicitedResponseLength);
     c3c:	b2b1      	uxth	r1, r6
     c3e:	4b70      	ldr	r3, [pc, #448]	; (e00 <FotaAppTask+0x838>)
     c40:	4798      	blx	r3

        if(readStatus != false)
     c42:	2800      	cmp	r0, #0
     c44:	f000 8209 	beq.w	105a <FotaAppTask+0xa92>
        {
            if(VERIFIED_EQUAL == strncmp((char*)serviceIndicationCmdString, (char*)responseBuffer, SERVICE_INDICATION_CMD_LENGTH))
     c48:	2209      	movs	r2, #9
     c4a:	4641      	mov	r1, r8
     c4c:	486d      	ldr	r0, [pc, #436]	; (e04 <FotaAppTask+0x83c>)
     c4e:	4b6e      	ldr	r3, [pc, #440]	; (e08 <FotaAppTask+0x840>)
     c50:	4798      	blx	r3
     c52:	2800      	cmp	r0, #0
     c54:	f040 8201 	bne.w	105a <FotaAppTask+0xa92>
            {
                if((responseBuffer[SERVICE_INDICATION_CMD_LENGTH] + 1) != '\r')
     c58:	f898 3009 	ldrb.w	r3, [r8, #9]
     c5c:	2b0c      	cmp	r3, #12
     c5e:	d021      	beq.n	ca4 <FotaAppTask+0x6dc>
                {
                    dataString[0] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH];
     c60:	f88d 3008 	strb.w	r3, [sp, #8]
                    dataString[1] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH + 1];  
     c64:	f898 300a 	ldrb.w	r3, [r8, #10]
     c68:	f88d 3009 	strb.w	r3, [sp, #9]
                {
                    dataString[0] = 0;
                    dataString[1] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH];                  
                }
                
                serviceIndicationType = (DEVICE_SERVICE_INDICATION_TYPE)atoi((char*)dataString);
     c6c:	a802      	add	r0, sp, #8
     c6e:	4b67      	ldr	r3, [pc, #412]	; (e0c <FotaAppTask+0x844>)
     c70:	4798      	blx	r3
     c72:	b2c6      	uxtb	r6, r0
        else
        {
               /* Read failure from UART Rx Buffer */
        }

        vPortFree(responseBuffer);
     c74:	4640      	mov	r0, r8
     c76:	4b5f      	ldr	r3, [pc, #380]	; (df4 <FotaAppTask+0x82c>)
     c78:	4798      	blx	r3
            if(serviceIndicationReceived != SERVICE_INDICATION_ERROR)
     c7a:	2e64      	cmp	r6, #100	; 0x64
     c7c:	f43f acd7 	beq.w	62e <FotaAppTask+0x66>
                switch(serviceIndicationReceived)
     c80:	2e12      	cmp	r6, #18
     c82:	d819      	bhi.n	cb8 <FotaAppTask+0x6f0>
     c84:	e8df f006 	tbb	[pc, r6]
     c88:	271f1b15 	.word	0x271f1b15
     c8c:	1833182f 	.word	0x1833182f
     c90:	18676337 	.word	0x18676337
     c94:	7672186b 	.word	0x7672186b
     c98:	1887      	.short	0x1887
     c9a:	97          	.byte	0x97
     c9b:	00          	.byte	0x00
        unsolicitedResponseLength = mdmCtrlr_GetUnsolicitedResponseLength();
     c9c:	4b56      	ldr	r3, [pc, #344]	; (df8 <FotaAppTask+0x830>)
     c9e:	4798      	blx	r3
     ca0:	4606      	mov	r6, r0
     ca2:	e7c4      	b.n	c2e <FotaAppTask+0x666>
                    dataString[0] = 0;
     ca4:	2300      	movs	r3, #0
     ca6:	f88d 3008 	strb.w	r3, [sp, #8]
                    dataString[1] = responseBuffer[SERVICE_INDICATION_CMD_LENGTH];                  
     caa:	230c      	movs	r3, #12
     cac:	f88d 3009 	strb.w	r3, [sp, #9]
     cb0:	e7dc      	b.n	c6c <FotaAppTask+0x6a4>
                        DEBUG_PRINT("FOTA : APN IS SET. READY FOR DM SESSION.\r\n");
     cb2:	4857      	ldr	r0, [pc, #348]	; (e10 <FotaAppTask+0x848>)
     cb4:	4b47      	ldr	r3, [pc, #284]	; (dd4 <FotaAppTask+0x80c>)
     cb6:	4798      	blx	r3
                PrevServiceIndicationReceived = serviceIndicationReceived;
     cb8:	4b56      	ldr	r3, [pc, #344]	; (e14 <FotaAppTask+0x84c>)
     cba:	701e      	strb	r6, [r3, #0]
     cbc:	e4b7      	b.n	62e <FotaAppTask+0x66>
                        DEBUG_PRINT("FOTA : AIRVANTAGE ORIGINATED DM SESSION REQUEST.\r\n");
     cbe:	4856      	ldr	r0, [pc, #344]	; (e18 <FotaAppTask+0x850>)
     cc0:	4b44      	ldr	r3, [pc, #272]	; (dd4 <FotaAppTask+0x80c>)
     cc2:	4798      	blx	r3
     cc4:	e7f8      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : AIRVANTAGE REQUESTS FOR FIRMWARE DOWNLOAD.\r\n");
     cc6:	4855      	ldr	r0, [pc, #340]	; (e1c <FotaAppTask+0x854>)
     cc8:	4b42      	ldr	r3, [pc, #264]	; (dd4 <FotaAppTask+0x80c>)
     cca:	4798      	blx	r3
                        FotaMainState = ACCEPT_THE_REQUEST_FOR_FIRMWARE_DOWNLOAD;
     ccc:	2306      	movs	r3, #6
     cce:	702b      	strb	r3, [r5, #0]
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     cd0:	2300      	movs	r3, #0
     cd2:	706b      	strb	r3, [r5, #1]
     cd4:	e7f0      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : AIRVANTAGE REQUESTS FOR FIRMWARE INSTALLATION.\r\n");
     cd6:	4852      	ldr	r0, [pc, #328]	; (e20 <FotaAppTask+0x858>)
     cd8:	4b3e      	ldr	r3, [pc, #248]	; (dd4 <FotaAppTask+0x80c>)
     cda:	4798      	blx	r3
                        FotaMainState = ACCEPT_THE_REQUEST_FOR_FIRMWARE_INSTALL;
     cdc:	2307      	movs	r3, #7
     cde:	702b      	strb	r3, [r5, #0]
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     ce0:	2300      	movs	r3, #0
     ce2:	706b      	strb	r3, [r5, #1]
     ce4:	e7e8      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : STARTING UP THE DM SESSION WITH AIRVANTAGE.\r\n");
     ce6:	484f      	ldr	r0, [pc, #316]	; (e24 <FotaAppTask+0x85c>)
     ce8:	4b3a      	ldr	r3, [pc, #232]	; (dd4 <FotaAppTask+0x80c>)
     cea:	4798      	blx	r3
     cec:	e7e4      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : DM SESSION STARTED AND TRANSACTIONS OCCURED.\r\n");
     cee:	484e      	ldr	r0, [pc, #312]	; (e28 <FotaAppTask+0x860>)
     cf0:	4b38      	ldr	r3, [pc, #224]	; (dd4 <FotaAppTask+0x80c>)
     cf2:	4798      	blx	r3
     cf4:	e7e0      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : DM SESSION WITH AIRVANTAGE IS CLOSED.\r\n");
     cf6:	484d      	ldr	r0, [pc, #308]	; (e2c <FotaAppTask+0x864>)
     cf8:	4b36      	ldr	r3, [pc, #216]	; (dd4 <FotaAppTask+0x80c>)
     cfa:	4798      	blx	r3
                        if((PrevServiceIndicationReceived != DM_SESSION_STARTED_TRANSACTIONS_OCCURED) &&
     cfc:	4b45      	ldr	r3, [pc, #276]	; (e14 <FotaAppTask+0x84c>)
     cfe:	781b      	ldrb	r3, [r3, #0]
     d00:	2b06      	cmp	r3, #6
     d02:	d00d      	beq.n	d20 <FotaAppTask+0x758>
     d04:	78eb      	ldrb	r3, [r5, #3]
     d06:	2b00      	cmp	r3, #0
     d08:	d1d6      	bne.n	cb8 <FotaAppTask+0x6f0>
                            mdmCtrlr_FlushRxBuffer();
     d0a:	4b49      	ldr	r3, [pc, #292]	; (e30 <FotaAppTask+0x868>)
     d0c:	4798      	blx	r3
                            bFotaVerificationIsDone = true;
     d0e:	2301      	movs	r3, #1
     d10:	70eb      	strb	r3, [r5, #3]
                            DEBUG_PRINT("FOTA : FIRMWARE UPDATE IS NOT PERFORMED.");
     d12:	4848      	ldr	r0, [pc, #288]	; (e34 <FotaAppTask+0x86c>)
     d14:	f8df 80bc 	ldr.w	r8, [pc, #188]	; dd4 <FotaAppTask+0x80c>
     d18:	47c0      	blx	r8
                            DEBUG_PRINT("FOTA : INSTALLED FIRMWARE MATCHES WITH FIRMWARE FROM AIR VANTAGE SERVER.\r\n");
     d1a:	4847      	ldr	r0, [pc, #284]	; (e38 <FotaAppTask+0x870>)
     d1c:	47c0      	blx	r8
     d1e:	e7cb      	b.n	cb8 <FotaAppTask+0x6f0>
                        else if((PrevServiceIndicationReceived == DM_SESSION_STARTED_TRANSACTIONS_OCCURED) &&
     d20:	78eb      	ldrb	r3, [r5, #3]
     d22:	2b00      	cmp	r3, #0
     d24:	d1c8      	bne.n	cb8 <FotaAppTask+0x6f0>
                                (bFotaVerificationIsDone == false) &&
     d26:	792b      	ldrb	r3, [r5, #4]
     d28:	2b00      	cmp	r3, #0
     d2a:	d0c5      	beq.n	cb8 <FotaAppTask+0x6f0>
                            mdmCtrlr_FlushRxBuffer();
     d2c:	4b40      	ldr	r3, [pc, #256]	; (e30 <FotaAppTask+0x868>)
     d2e:	4798      	blx	r3
                            DEBUG_PRINT("FOTA : SUCCESSFULLY INSTALLED THE DOWNLOADED FIRMWARE.");
     d30:	4842      	ldr	r0, [pc, #264]	; (e3c <FotaAppTask+0x874>)
     d32:	f8df 80a0 	ldr.w	r8, [pc, #160]	; dd4 <FotaAppTask+0x80c>
     d36:	47c0      	blx	r8
                            DEBUG_PRINT("\r\n");
     d38:	482c      	ldr	r0, [pc, #176]	; (dec <FotaAppTask+0x824>)
     d3a:	47c0      	blx	r8
                            DEBUG_PRINT("FOTA : REBOOTING THE DEVICE AFTER A SUCCESSFUL FIRMWARE INSTALLATION.\r\n");
     d3c:	4840      	ldr	r0, [pc, #256]	; (e40 <FotaAppTask+0x878>)
     d3e:	47c0      	blx	r8
                            bNewFirmwareInstalled = false;
     d40:	2300      	movs	r3, #0
     d42:	712b      	strb	r3, [r5, #4]
                            bFotaVerificationIsDone = true;
     d44:	2301      	movs	r3, #1
     d46:	70eb      	strb	r3, [r5, #3]
                            requestWatchDogForcedReset();
     d48:	4b3e      	ldr	r3, [pc, #248]	; (e44 <FotaAppTask+0x87c>)
     d4a:	4798      	blx	r3
     d4c:	e7b4      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : FIRMWARE IS AVAILABLE FOR DOWNLOAD.\r\n");
     d4e:	483e      	ldr	r0, [pc, #248]	; (e48 <FotaAppTask+0x880>)
     d50:	4b20      	ldr	r3, [pc, #128]	; (dd4 <FotaAppTask+0x80c>)
     d52:	4798      	blx	r3
     d54:	e7b0      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : FIRMWARE IS DOWNLOADED AND STORED IN FLASH.\r\n");
     d56:	483d      	ldr	r0, [pc, #244]	; (e4c <FotaAppTask+0x884>)
     d58:	4b1e      	ldr	r3, [pc, #120]	; (dd4 <FotaAppTask+0x80c>)
     d5a:	4798      	blx	r3
     d5c:	e7ac      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : DOWNLOADED PACKAGE IS VERIFIED AS CERTIFIED.\r\n");
     d5e:	483c      	ldr	r0, [pc, #240]	; (e50 <FotaAppTask+0x888>)
     d60:	f8df 8070 	ldr.w	r8, [pc, #112]	; dd4 <FotaAppTask+0x80c>
     d64:	47c0      	blx	r8
                        DEBUG_PRINT("FOTA : INSTALLING THE DOWNLOADED FIRMWARE...PLEASE WAIT...\r\n");
     d66:	483b      	ldr	r0, [pc, #236]	; (e54 <FotaAppTask+0x88c>)
     d68:	47c0      	blx	r8
     d6a:	e7a5      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : STARTING THE FIRMWARE UPDATE.\r\n");
     d6c:	483a      	ldr	r0, [pc, #232]	; (e58 <FotaAppTask+0x890>)
     d6e:	4b19      	ldr	r3, [pc, #100]	; (dd4 <FotaAppTask+0x80c>)
     d70:	4798      	blx	r3
     d72:	e7a1      	b.n	cb8 <FotaAppTask+0x6f0>
                        mdmCtrlr_FlushRxBuffer();
     d74:	4b2e      	ldr	r3, [pc, #184]	; (e30 <FotaAppTask+0x868>)
     d76:	4798      	blx	r3
                        DEBUG_PRINT("FOTA : FAILED TO UPDATE THE FIRMWARE.");
     d78:	4838      	ldr	r0, [pc, #224]	; (e5c <FotaAppTask+0x894>)
     d7a:	f8df 8058 	ldr.w	r8, [pc, #88]	; dd4 <FotaAppTask+0x80c>
     d7e:	47c0      	blx	r8
                        DEBUG_PRINT("\r\n");
     d80:	481a      	ldr	r0, [pc, #104]	; (dec <FotaAppTask+0x824>)
     d82:	47c0      	blx	r8
                        DEBUG_PRINT("FOTA : REBOOTING THE DEVICE AFTER A FAILED ATTEMPT OF FIRMWARE INSTALLATION.\r\n");
     d84:	4836      	ldr	r0, [pc, #216]	; (e60 <FotaAppTask+0x898>)
     d86:	47c0      	blx	r8
                        bFotaVerificationIsDone = true;
     d88:	2301      	movs	r3, #1
     d8a:	70eb      	strb	r3, [r5, #3]
                        bNewFirmwareInstalled = false;
     d8c:	2300      	movs	r3, #0
     d8e:	712b      	strb	r3, [r5, #4]
                        requestWatchDogForcedReset();
     d90:	4b2c      	ldr	r3, [pc, #176]	; (e44 <FotaAppTask+0x87c>)
     d92:	4798      	blx	r3
     d94:	e790      	b.n	cb8 <FotaAppTask+0x6f0>
                        mdmCtrlr_FlushRxBuffer();
     d96:	4b26      	ldr	r3, [pc, #152]	; (e30 <FotaAppTask+0x868>)
     d98:	4798      	blx	r3
                        DEBUG_PRINT("FOTA : SUCCESSFULLY INSTALLED THE DOWNLOADED FIRMWARE.");
     d9a:	4828      	ldr	r0, [pc, #160]	; (e3c <FotaAppTask+0x874>)
     d9c:	f8df 8034 	ldr.w	r8, [pc, #52]	; dd4 <FotaAppTask+0x80c>
     da0:	47c0      	blx	r8
                        DEBUG_PRINT("\r\n");
     da2:	4812      	ldr	r0, [pc, #72]	; (dec <FotaAppTask+0x824>)
     da4:	47c0      	blx	r8
                        DEBUG_PRINT("FOTA : REBOOTING THE DEVICE AFTER A SUCCESSFUL FIRMWARE INSTALLATION.\r\n");
     da6:	4826      	ldr	r0, [pc, #152]	; (e40 <FotaAppTask+0x878>)
     da8:	47c0      	blx	r8
                        bFotaVerificationIsDone = true;
     daa:	2301      	movs	r3, #1
     dac:	70eb      	strb	r3, [r5, #3]
                        bNewFirmwareInstalled = true;
     dae:	712b      	strb	r3, [r5, #4]
                        requestWatchDogForcedReset();
     db0:	4b24      	ldr	r3, [pc, #144]	; (e44 <FotaAppTask+0x87c>)
     db2:	4798      	blx	r3
     db4:	e780      	b.n	cb8 <FotaAppTask+0x6f0>
                        DEBUG_PRINT("FOTA : DOWNLOADING THE FIRMWARE FROM AIR VANTAGE SERVER...PLEASE WAIT...\r\n");
     db6:	482b      	ldr	r0, [pc, #172]	; (e64 <FotaAppTask+0x89c>)
     db8:	4b06      	ldr	r3, [pc, #24]	; (dd4 <FotaAppTask+0x80c>)
     dba:	4798      	blx	r3
     dbc:	e77c      	b.n	cb8 <FotaAppTask+0x6f0>
     dbe:	bf00      	nop
     dc0:	20003588 	.word	0x20003588
     dc4:	00005a95 	.word	0x00005a95
     dc8:	2000359c 	.word	0x2000359c
     dcc:	000058b5 	.word	0x000058b5
     dd0:	0000789c 	.word	0x0000789c
     dd4:	000033b9 	.word	0x000033b9
     dd8:	0000541d 	.word	0x0000541d
     ddc:	00007af4 	.word	0x00007af4
     de0:	000060ad 	.word	0x000060ad
     de4:	000078c8 	.word	0x000078c8
     de8:	00007918 	.word	0x00007918
     dec:	00009394 	.word	0x00009394
     df0:	00007940 	.word	0x00007940
     df4:	000050f5 	.word	0x000050f5
     df8:	00002ac5 	.word	0x00002ac5
     dfc:	00005015 	.word	0x00005015
     e00:	00002a5d 	.word	0x00002a5d
     e04:	00007b60 	.word	0x00007b60
     e08:	00006e75 	.word	0x00006e75
     e0c:	00006ba1 	.word	0x00006ba1
     e10:	00007b6c 	.word	0x00007b6c
     e14:	20000000 	.word	0x20000000
     e18:	00007b98 	.word	0x00007b98
     e1c:	00007bcc 	.word	0x00007bcc
     e20:	00007c00 	.word	0x00007c00
     e24:	00007c38 	.word	0x00007c38
     e28:	00007c70 	.word	0x00007c70
     e2c:	00007ca8 	.word	0x00007ca8
     e30:	00002ab1 	.word	0x00002ab1
     e34:	00007cd8 	.word	0x00007cd8
     e38:	00007d04 	.word	0x00007d04
     e3c:	00007d50 	.word	0x00007d50
     e40:	00007d88 	.word	0x00007d88
     e44:	000035f1 	.word	0x000035f1
     e48:	00007dd0 	.word	0x00007dd0
     e4c:	00007e00 	.word	0x00007e00
     e50:	00007e38 	.word	0x00007e38
     e54:	00007e70 	.word	0x00007e70
     e58:	00007eb0 	.word	0x00007eb0
     e5c:	00007ed8 	.word	0x00007ed8
     e60:	00007f00 	.word	0x00007f00
     e64:	00007f50 	.word	0x00007f50
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     e68:	786b      	ldrb	r3, [r5, #1]
     e6a:	b333      	cbz	r3, eba <FotaAppTask+0x8f2>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     e6c:	2b01      	cmp	r3, #1
     e6e:	f47f abde 	bne.w	62e <FotaAppTask+0x66>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     e72:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     e76:	4639      	mov	r1, r7
     e78:	4b7a      	ldr	r3, [pc, #488]	; (1064 <FotaAppTask+0xa9c>)
     e7a:	6818      	ldr	r0, [r3, #0]
     e7c:	4b7a      	ldr	r3, [pc, #488]	; (1068 <FotaAppTask+0xaa0>)
     e7e:	4798      	blx	r3
     e80:	2801      	cmp	r0, #1
     e82:	f47f abd4 	bne.w	62e <FotaAppTask+0x66>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSR_ACCEPT_FW_DOWNLOAD)
     e86:	7a2b      	ldrb	r3, [r5, #8]
     e88:	2b22      	cmp	r3, #34	; 0x22
     e8a:	d15d      	bne.n	f48 <FotaAppTask+0x980>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     e8c:	68e8      	ldr	r0, [r5, #12]
     e8e:	4b77      	ldr	r3, [pc, #476]	; (106c <FotaAppTask+0xaa4>)
     e90:	4798      	blx	r3
     e92:	2800      	cmp	r0, #0
     e94:	d050      	beq.n	f38 <FotaAppTask+0x970>
                            DEBUG_PRINT("FOTA : Accepted the request for firmware Download and sent the acknowledgment to Airvantage server");
     e96:	4876      	ldr	r0, [pc, #472]	; (1070 <FotaAppTask+0xaa8>)
     e98:	4e76      	ldr	r6, [pc, #472]	; (1074 <FotaAppTask+0xaac>)
     e9a:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     e9c:	8969      	ldrh	r1, [r5, #10]
     e9e:	68e8      	ldr	r0, [r5, #12]
     ea0:	4b75      	ldr	r3, [pc, #468]	; (1078 <FotaAppTask+0xab0>)
     ea2:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     ea4:	4875      	ldr	r0, [pc, #468]	; (107c <FotaAppTask+0xab4>)
     ea6:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     ea8:	2300      	movs	r3, #0
     eaa:	706b      	strb	r3, [r5, #1]
                            FotaMainState = SYSTEM_IS_IN_FIRMWARE_DOWNLOAD_MODE;
     eac:	2305      	movs	r3, #5
     eae:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     eb0:	68e8      	ldr	r0, [r5, #12]
     eb2:	4b73      	ldr	r3, [pc, #460]	; (1080 <FotaAppTask+0xab8>)
     eb4:	4798      	blx	r3
     eb6:	f7ff bbba 	b.w	62e <FotaAppTask+0x66>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     eba:	4b72      	ldr	r3, [pc, #456]	; (1084 <FotaAppTask+0xabc>)
     ebc:	6818      	ldr	r0, [r3, #0]
     ebe:	4b72      	ldr	r3, [pc, #456]	; (1088 <FotaAppTask+0xac0>)
     ec0:	4798      	blx	r3
     ec2:	2800      	cmp	r0, #0
     ec4:	d133      	bne.n	f2e <FotaAppTask+0x966>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     ec6:	2100      	movs	r1, #0
     ec8:	4b70      	ldr	r3, [pc, #448]	; (108c <FotaAppTask+0xac4>)
     eca:	6818      	ldr	r0, [r3, #0]
     ecc:	4b70      	ldr	r3, [pc, #448]	; (1090 <FotaAppTask+0xac8>)
     ece:	4798      	blx	r3
     ed0:	2801      	cmp	r0, #1
     ed2:	d004      	beq.n	ede <FotaAppTask+0x916>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     ed4:	486f      	ldr	r0, [pc, #444]	; (1094 <FotaAppTask+0xacc>)
     ed6:	4b67      	ldr	r3, [pc, #412]	; (1074 <FotaAppTask+0xaac>)
     ed8:	4798      	blx	r3
     eda:	f7ff bba8 	b.w	62e <FotaAppTask+0x66>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     ede:	2305      	movs	r3, #5
     ee0:	f88d 3008 	strb.w	r3, [sp, #8]
                        TxMsgQueueData.atCmd = CMD_AT_WDSR_ACCEPT_FW_DOWNLOAD;
     ee4:	2322      	movs	r3, #34	; 0x22
     ee6:	f88d 3009 	strb.w	r3, [sp, #9]
                        TxMsgQueueData.pData = NULL;
     eea:	2300      	movs	r3, #0
     eec:	9303      	str	r3, [sp, #12]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     eee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ef2:	a902      	add	r1, sp, #8
     ef4:	4863      	ldr	r0, [pc, #396]	; (1084 <FotaAppTask+0xabc>)
     ef6:	6800      	ldr	r0, [r0, #0]
     ef8:	4e67      	ldr	r6, [pc, #412]	; (1098 <FotaAppTask+0xad0>)
     efa:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     efc:	2801      	cmp	r0, #1
     efe:	d008      	beq.n	f12 <FotaAppTask+0x94a>
                            DEBUG_PRINT("Error: Failed to sent FW download acceptance to Tx Task");
     f00:	4866      	ldr	r0, [pc, #408]	; (109c <FotaAppTask+0xad4>)
     f02:	4b5c      	ldr	r3, [pc, #368]	; (1074 <FotaAppTask+0xaac>)
     f04:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     f06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f0a:	4b65      	ldr	r3, [pc, #404]	; (10a0 <FotaAppTask+0xad8>)
     f0c:	4798      	blx	r3
     f0e:	f7ff bb8e 	b.w	62e <FotaAppTask+0x66>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     f12:	2300      	movs	r3, #0
     f14:	461a      	mov	r2, r3
     f16:	4619      	mov	r1, r3
     f18:	485c      	ldr	r0, [pc, #368]	; (108c <FotaAppTask+0xac4>)
     f1a:	6800      	ldr	r0, [r0, #0]
     f1c:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
     f1e:	2301      	movs	r3, #1
     f20:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
     f22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f26:	4b5e      	ldr	r3, [pc, #376]	; (10a0 <FotaAppTask+0xad8>)
     f28:	4798      	blx	r3
     f2a:	f7ff bb80 	b.w	62e <FotaAppTask+0x66>
                    DEBUG_PRINT("Transmit Queue is not empty");
     f2e:	485d      	ldr	r0, [pc, #372]	; (10a4 <FotaAppTask+0xadc>)
     f30:	4b50      	ldr	r3, [pc, #320]	; (1074 <FotaAppTask+0xaac>)
     f32:	4798      	blx	r3
     f34:	f7ff bb7b 	b.w	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
     f38:	485b      	ldr	r0, [pc, #364]	; (10a8 <FotaAppTask+0xae0>)
     f3a:	4e4e      	ldr	r6, [pc, #312]	; (1074 <FotaAppTask+0xaac>)
     f3c:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
     f3e:	484f      	ldr	r0, [pc, #316]	; (107c <FotaAppTask+0xab4>)
     f40:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     f42:	2300      	movs	r3, #0
     f44:	706b      	strb	r3, [r5, #1]
     f46:	e7b3      	b.n	eb0 <FotaAppTask+0x8e8>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
     f48:	4858      	ldr	r0, [pc, #352]	; (10ac <FotaAppTask+0xae4>)
     f4a:	4b4a      	ldr	r3, [pc, #296]	; (1074 <FotaAppTask+0xaac>)
     f4c:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     f4e:	2300      	movs	r3, #0
     f50:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
     f52:	68e8      	ldr	r0, [r5, #12]
     f54:	4b4a      	ldr	r3, [pc, #296]	; (1080 <FotaAppTask+0xab8>)
     f56:	4798      	blx	r3
     f58:	f7ff bb69 	b.w	62e <FotaAppTask+0x66>
            if(FotaOperationalMode == FOTA_APP_OPERATIONAL_TX_MODE)
     f5c:	786b      	ldrb	r3, [r5, #1]
     f5e:	2b00      	cmp	r3, #0
     f60:	d02a      	beq.n	fb8 <FotaAppTask+0x9f0>
            else if(FotaOperationalMode == FOTA_APP_OPERATIONAL_RX_MODE)
     f62:	2b01      	cmp	r3, #1
     f64:	f47f ab63 	bne.w	62e <FotaAppTask+0x66>
                if(pdPASS == xQueueReceive( FotaResponseQueue, &FotaCommandResponse, ResponseWaitDelayMs))
     f68:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     f6c:	4639      	mov	r1, r7
     f6e:	4b3d      	ldr	r3, [pc, #244]	; (1064 <FotaAppTask+0xa9c>)
     f70:	6818      	ldr	r0, [r3, #0]
     f72:	4b3d      	ldr	r3, [pc, #244]	; (1068 <FotaAppTask+0xaa0>)
     f74:	4798      	blx	r3
     f76:	2801      	cmp	r0, #1
     f78:	f47f ab59 	bne.w	62e <FotaAppTask+0x66>
                    if(FotaCommandResponse.atCmd == CMD_AT_WDSR_ACCEPT_FW_INSTALL)
     f7c:	7a2b      	ldrb	r3, [r5, #8]
     f7e:	2b23      	cmp	r3, #35	; 0x23
     f80:	d161      	bne.n	1046 <FotaAppTask+0xa7e>
                        if(false != validateCommonCommandResponse(FotaCommandResponse.response))
     f82:	68e8      	ldr	r0, [r5, #12]
     f84:	4b39      	ldr	r3, [pc, #228]	; (106c <FotaAppTask+0xaa4>)
     f86:	4798      	blx	r3
     f88:	2800      	cmp	r0, #0
     f8a:	d054      	beq.n	1036 <FotaAppTask+0xa6e>
                            DEBUG_PRINT("FOTA : Accepted the request for firmware Installation and sent the acknowledgment to Airvantage server");
     f8c:	4848      	ldr	r0, [pc, #288]	; (10b0 <FotaAppTask+0xae8>)
     f8e:	4e39      	ldr	r6, [pc, #228]	; (1074 <FotaAppTask+0xaac>)
     f90:	47b0      	blx	r6
                            SerialDebugPrint(FotaCommandResponse.response,FotaCommandResponse.length);
     f92:	8969      	ldrh	r1, [r5, #10]
     f94:	68e8      	ldr	r0, [r5, #12]
     f96:	4b38      	ldr	r3, [pc, #224]	; (1078 <FotaAppTask+0xab0>)
     f98:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     f9a:	4838      	ldr	r0, [pc, #224]	; (107c <FotaAppTask+0xab4>)
     f9c:	47b0      	blx	r6
                            DEBUG_PRINT("FOTA : STARTING UP THE FIRMWARE INSTALLATION.\r\n");
     f9e:	4845      	ldr	r0, [pc, #276]	; (10b4 <FotaAppTask+0xaec>)
     fa0:	47b0      	blx	r6
                            bNewFirmwareInstalled = true;
     fa2:	2301      	movs	r3, #1
     fa4:	712b      	strb	r3, [r5, #4]
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
     fa6:	2300      	movs	r3, #0
     fa8:	706b      	strb	r3, [r5, #1]
                            FotaMainState = SYSTEM_IS_IN_FIRMWARE_DOWNLOAD_MODE;
     faa:	2305      	movs	r3, #5
     fac:	702b      	strb	r3, [r5, #0]
                        vPortFree(FotaCommandResponse.response);
     fae:	68e8      	ldr	r0, [r5, #12]
     fb0:	4b33      	ldr	r3, [pc, #204]	; (1080 <FotaAppTask+0xab8>)
     fb2:	4798      	blx	r3
     fb4:	f7ff bb3b 	b.w	62e <FotaAppTask+0x66>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     fb8:	4b32      	ldr	r3, [pc, #200]	; (1084 <FotaAppTask+0xabc>)
     fba:	6818      	ldr	r0, [r3, #0]
     fbc:	4b32      	ldr	r3, [pc, #200]	; (1088 <FotaAppTask+0xac0>)
     fbe:	4798      	blx	r3
     fc0:	2800      	cmp	r0, #0
     fc2:	d133      	bne.n	102c <FotaAppTask+0xa64>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     fc4:	2100      	movs	r1, #0
     fc6:	4b31      	ldr	r3, [pc, #196]	; (108c <FotaAppTask+0xac4>)
     fc8:	6818      	ldr	r0, [r3, #0]
     fca:	4b31      	ldr	r3, [pc, #196]	; (1090 <FotaAppTask+0xac8>)
     fcc:	4798      	blx	r3
     fce:	2801      	cmp	r0, #1
     fd0:	d004      	beq.n	fdc <FotaAppTask+0xa14>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     fd2:	4830      	ldr	r0, [pc, #192]	; (1094 <FotaAppTask+0xacc>)
     fd4:	4b27      	ldr	r3, [pc, #156]	; (1074 <FotaAppTask+0xaac>)
     fd6:	4798      	blx	r3
     fd8:	f7ff bb29 	b.w	62e <FotaAppTask+0x66>
                        TxMsgQueueData.taskID = FOTA_APP_TASK;
     fdc:	2305      	movs	r3, #5
     fde:	f88d 3008 	strb.w	r3, [sp, #8]
                        TxMsgQueueData.atCmd = CMD_AT_WDSR_ACCEPT_FW_INSTALL;
     fe2:	2323      	movs	r3, #35	; 0x23
     fe4:	f88d 3009 	strb.w	r3, [sp, #9]
                        TxMsgQueueData.pData = NULL;
     fe8:	2300      	movs	r3, #0
     fea:	9303      	str	r3, [sp, #12]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     fec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     ff0:	a902      	add	r1, sp, #8
     ff2:	4824      	ldr	r0, [pc, #144]	; (1084 <FotaAppTask+0xabc>)
     ff4:	6800      	ldr	r0, [r0, #0]
     ff6:	4e28      	ldr	r6, [pc, #160]	; (1098 <FotaAppTask+0xad0>)
     ff8:	47b0      	blx	r6
                        if(TxQueuePushStatus == pdPASS)
     ffa:	2801      	cmp	r0, #1
     ffc:	d008      	beq.n	1010 <FotaAppTask+0xa48>
                            DEBUG_PRINT("Error: Failed to sent FW install acceptance to Tx Task");
     ffe:	482e      	ldr	r0, [pc, #184]	; (10b8 <FotaAppTask+0xaf0>)
    1000:	4b1c      	ldr	r3, [pc, #112]	; (1074 <FotaAppTask+0xaac>)
    1002:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1008:	4b25      	ldr	r3, [pc, #148]	; (10a0 <FotaAppTask+0xad8>)
    100a:	4798      	blx	r3
    100c:	f7ff bb0f 	b.w	62e <FotaAppTask+0x66>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1010:	2300      	movs	r3, #0
    1012:	461a      	mov	r2, r3
    1014:	4619      	mov	r1, r3
    1016:	481d      	ldr	r0, [pc, #116]	; (108c <FotaAppTask+0xac4>)
    1018:	6800      	ldr	r0, [r0, #0]
    101a:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_RX_MODE;
    101c:	2301      	movs	r3, #1
    101e:	706b      	strb	r3, [r5, #1]
                            vTaskDelay(TransmitDelayMs);
    1020:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1024:	4b1e      	ldr	r3, [pc, #120]	; (10a0 <FotaAppTask+0xad8>)
    1026:	4798      	blx	r3
    1028:	f7ff bb01 	b.w	62e <FotaAppTask+0x66>
                    DEBUG_PRINT("Transmit Queue is not empty");
    102c:	481d      	ldr	r0, [pc, #116]	; (10a4 <FotaAppTask+0xadc>)
    102e:	4b11      	ldr	r3, [pc, #68]	; (1074 <FotaAppTask+0xaac>)
    1030:	4798      	blx	r3
    1032:	f7ff bafc 	b.w	62e <FotaAppTask+0x66>
                            DEBUG_PRINT("Error:Expected Response Not Received...");
    1036:	481c      	ldr	r0, [pc, #112]	; (10a8 <FotaAppTask+0xae0>)
    1038:	4e0e      	ldr	r6, [pc, #56]	; (1074 <FotaAppTask+0xaac>)
    103a:	47b0      	blx	r6
                            DEBUG_PRINT("\r\n");
    103c:	480f      	ldr	r0, [pc, #60]	; (107c <FotaAppTask+0xab4>)
    103e:	47b0      	blx	r6
                            FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
    1040:	2300      	movs	r3, #0
    1042:	706b      	strb	r3, [r5, #1]
    1044:	e7b3      	b.n	fae <FotaAppTask+0x9e6>
                        DEBUG_PRINT("Error:Failed to receive connection response in RX mode");
    1046:	4819      	ldr	r0, [pc, #100]	; (10ac <FotaAppTask+0xae4>)
    1048:	4b0a      	ldr	r3, [pc, #40]	; (1074 <FotaAppTask+0xaac>)
    104a:	4798      	blx	r3
                        FotaOperationalMode = FOTA_APP_OPERATIONAL_TX_MODE;
    104c:	2300      	movs	r3, #0
    104e:	706b      	strb	r3, [r5, #1]
                        vPortFree(FotaCommandResponse.response);
    1050:	68e8      	ldr	r0, [r5, #12]
    1052:	4b0b      	ldr	r3, [pc, #44]	; (1080 <FotaAppTask+0xab8>)
    1054:	4798      	blx	r3
    1056:	f7ff baea 	b.w	62e <FotaAppTask+0x66>
        vPortFree(responseBuffer);
    105a:	4640      	mov	r0, r8
    105c:	4b08      	ldr	r3, [pc, #32]	; (1080 <FotaAppTask+0xab8>)
    105e:	4798      	blx	r3
    1060:	f7ff bae5 	b.w	62e <FotaAppTask+0x66>
    1064:	20003594 	.word	0x20003594
    1068:	0000572d 	.word	0x0000572d
    106c:	000005ad 	.word	0x000005ad
    1070:	00007fd4 	.word	0x00007fd4
    1074:	000033b9 	.word	0x000033b9
    1078:	00003375 	.word	0x00003375
    107c:	00009394 	.word	0x00009394
    1080:	000050f5 	.word	0x000050f5
    1084:	20003588 	.word	0x20003588
    1088:	00005a95 	.word	0x00005a95
    108c:	2000359c 	.word	0x2000359c
    1090:	000058b5 	.word	0x000058b5
    1094:	0000789c 	.word	0x0000789c
    1098:	0000541d 	.word	0x0000541d
    109c:	00007f9c 	.word	0x00007f9c
    10a0:	000060ad 	.word	0x000060ad
    10a4:	000078c8 	.word	0x000078c8
    10a8:	00007918 	.word	0x00007918
    10ac:	00007940 	.word	0x00007940
    10b0:	00008070 	.word	0x00008070
    10b4:	000080d8 	.word	0x000080d8
    10b8:	00008038 	.word	0x00008038

000010bc <isFotaVerificationDone>:
}
    10bc:	4b01      	ldr	r3, [pc, #4]	; (10c4 <isFotaVerificationDone+0x8>)
    10be:	78d8      	ldrb	r0, [r3, #3]
    10c0:	4770      	bx	lr
    10c2:	bf00      	nop
    10c4:	2000028c 	.word	0x2000028c

000010c8 <sensorTaskSchedule>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void sensorTaskSchedule(void)
{
    10c8:	b530      	push	{r4, r5, lr}
    10ca:	b083      	sub	sp, #12
	BaseType_t xResult;
	static SENSOR_INDEX_T sensorIndex = SENSOR_0;
	SENSOR_DATA_REQUEST_TYPE request;
	const TickType_t xSensorScanTriggerWaitMs = pdMS_TO_TICKS(500UL);
	int32_t bytesRead;
	uint16_t adcResult = 0;
    10cc:	2300      	movs	r3, #0
    10ce:	f8ad 3006 	strh.w	r3, [sp, #6]
	static uint8_t sampleIndex = 0;
	uint16_t adcCountAveraged = 0;
	uint32_t voltageInMv = 0;
	double_t voltage = 0;

	switch(sensorMainState)
    10d2:	4b3a      	ldr	r3, [pc, #232]	; (11bc <sensorTaskSchedule+0xf4>)
    10d4:	781b      	ldrb	r3, [r3, #0]
    10d6:	2b01      	cmp	r3, #1
    10d8:	d010      	beq.n	10fc <sensorTaskSchedule+0x34>
    10da:	b11b      	cbz	r3, 10e4 <sensorTaskSchedule+0x1c>
    10dc:	2b02      	cmp	r3, #2
    10de:	d047      	beq.n	1170 <sensorTaskSchedule+0xa8>
		break;

		default:
		break;
	}
}
    10e0:	b003      	add	sp, #12
    10e2:	bd30      	pop	{r4, r5, pc}
			xResult = xSemaphoreTake(SensorScanSemaphore, xSensorScanTriggerWaitMs);
    10e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    10e8:	4b35      	ldr	r3, [pc, #212]	; (11c0 <sensorTaskSchedule+0xf8>)
    10ea:	6818      	ldr	r0, [r3, #0]
    10ec:	4b35      	ldr	r3, [pc, #212]	; (11c4 <sensorTaskSchedule+0xfc>)
    10ee:	4798      	blx	r3
			if(xResult == pdPASS)
    10f0:	2801      	cmp	r0, #1
    10f2:	d1f5      	bne.n	10e0 <sensorTaskSchedule+0x18>
				sensorMainState = SCAN_ALL_OF_THE_SENSOR_SELECT_LINES;
    10f4:	2201      	movs	r2, #1
    10f6:	4b31      	ldr	r3, [pc, #196]	; (11bc <sensorTaskSchedule+0xf4>)
    10f8:	701a      	strb	r2, [r3, #0]
    10fa:	e7f1      	b.n	10e0 <sensorTaskSchedule+0x18>
			if(gpio_get_pin_level(sensorInputData[sensorIndex].selectLine) == false)
    10fc:	4b2f      	ldr	r3, [pc, #188]	; (11bc <sensorTaskSchedule+0xf4>)
    10fe:	7d1a      	ldrb	r2, [r3, #20]
    1100:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    1104:	791d      	ldrb	r5, [r3, #4]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    1106:	4668      	mov	r0, sp
    1108:	4b2f      	ldr	r3, [pc, #188]	; (11c8 <sensorTaskSchedule+0x100>)
    110a:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    110c:	096b      	lsrs	r3, r5, #5
    110e:	492f      	ldr	r1, [pc, #188]	; (11cc <sensorTaskSchedule+0x104>)
    1110:	01db      	lsls	r3, r3, #7
    1112:	18ca      	adds	r2, r1, r3
    1114:	58c9      	ldr	r1, [r1, r3]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    1116:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    1118:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    111a:	405c      	eors	r4, r3
    111c:	400c      	ands	r4, r1
    111e:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
    1120:	4668      	mov	r0, sp
    1122:	4b2b      	ldr	r3, [pc, #172]	; (11d0 <sensorTaskSchedule+0x108>)
    1124:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    1126:	f005 051f 	and.w	r5, r5, #31
    112a:	2301      	movs	r3, #1
    112c:	fa03 f505 	lsl.w	r5, r3, r5
    1130:	4225      	tst	r5, r4
    1132:	d00c      	beq.n	114e <sensorTaskSchedule+0x86>
				sensorOutputData[sensorIndex].active = false;
    1134:	4a21      	ldr	r2, [pc, #132]	; (11bc <sensorTaskSchedule+0xf4>)
				sensorIndex++;
    1136:	7d13      	ldrb	r3, [r2, #20]
    1138:	3301      	adds	r3, #1
    113a:	b2db      	uxtb	r3, r3
    113c:	7513      	strb	r3, [r2, #20]
				if(sensorIndex >= MAX_SENSOR_COUNT)
    113e:	2b07      	cmp	r3, #7
    1140:	d9ce      	bls.n	10e0 <sensorTaskSchedule+0x18>
					sensorMainState = FETCH_ADC_READINGS_FOR_ACTIVE_SENSORS;
    1142:	4613      	mov	r3, r2
    1144:	2202      	movs	r2, #2
    1146:	701a      	strb	r2, [r3, #0]
					sensorIndex = SENSOR_0;
    1148:	2200      	movs	r2, #0
    114a:	751a      	strb	r2, [r3, #20]
    114c:	e7c8      	b.n	10e0 <sensorTaskSchedule+0x18>
				ConsoleDebugPrint("Select Line Low  - Port",(sensorIndex+1));
    114e:	4c1b      	ldr	r4, [pc, #108]	; (11bc <sensorTaskSchedule+0xf4>)
    1150:	7d21      	ldrb	r1, [r4, #20]
    1152:	4419      	add	r1, r3
    1154:	481f      	ldr	r0, [pc, #124]	; (11d4 <sensorTaskSchedule+0x10c>)
    1156:	4b20      	ldr	r3, [pc, #128]	; (11d8 <sensorTaskSchedule+0x110>)
    1158:	4798      	blx	r3
				sensorIndex++;
    115a:	7d23      	ldrb	r3, [r4, #20]
    115c:	3301      	adds	r3, #1
    115e:	b2db      	uxtb	r3, r3
    1160:	7523      	strb	r3, [r4, #20]
				if(sensorIndex >= MAX_SENSOR_COUNT)
    1162:	2b07      	cmp	r3, #7
    1164:	d9bc      	bls.n	10e0 <sensorTaskSchedule+0x18>
					sensorMainState = FETCH_ADC_READINGS_FOR_ACTIVE_SENSORS;
    1166:	2202      	movs	r2, #2
    1168:	7022      	strb	r2, [r4, #0]
					sensorIndex = SENSOR_0;
    116a:	2200      	movs	r2, #0
    116c:	7522      	strb	r2, [r4, #20]
    116e:	e7b7      	b.n	10e0 <sensorTaskSchedule+0x18>
			if(sensorIndex < MAX_SENSOR_COUNT)
    1170:	4b12      	ldr	r3, [pc, #72]	; (11bc <sensorTaskSchedule+0xf4>)
    1172:	7d1b      	ldrb	r3, [r3, #20]
    1174:	2b07      	cmp	r3, #7
    1176:	d904      	bls.n	1182 <sensorTaskSchedule+0xba>
				sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
    1178:	4b10      	ldr	r3, [pc, #64]	; (11bc <sensorTaskSchedule+0xf4>)
    117a:	2200      	movs	r2, #0
    117c:	701a      	strb	r2, [r3, #0]
				sensorIndex = SENSOR_0;
    117e:	751a      	strb	r2, [r3, #20]
}
    1180:	e7ae      	b.n	10e0 <sensorTaskSchedule+0x18>
				bytesRead = sensorAdcReadChannel(sensorInputData[sensorIndex].adcChannel,&adcResult,2);
    1182:	4c0e      	ldr	r4, [pc, #56]	; (11bc <sensorTaskSchedule+0xf4>)
    1184:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    1188:	2202      	movs	r2, #2
    118a:	f10d 0106 	add.w	r1, sp, #6
    118e:	7958      	ldrb	r0, [r3, #5]
    1190:	4b12      	ldr	r3, [pc, #72]	; (11dc <sensorTaskSchedule+0x114>)
    1192:	4798      	blx	r3
				if(sampleIndex < MAX_ADC_SAMPLES)
    1194:	7d63      	ldrb	r3, [r4, #21]
    1196:	b94b      	cbnz	r3, 11ac <sensorTaskSchedule+0xe4>
					adcAveragingBuffer[sampleIndex] = adcResult;
    1198:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    119c:	8322      	strh	r2, [r4, #24]
					sampleIndex++;
    119e:	2201      	movs	r2, #1
    11a0:	7562      	strb	r2, [r4, #21]
			if(sensorIndex >= MAX_SENSOR_COUNT)
    11a2:	4b06      	ldr	r3, [pc, #24]	; (11bc <sensorTaskSchedule+0xf4>)
    11a4:	7d1b      	ldrb	r3, [r3, #20]
    11a6:	2b07      	cmp	r3, #7
    11a8:	d99a      	bls.n	10e0 <sensorTaskSchedule+0x18>
    11aa:	e7e5      	b.n	1178 <sensorTaskSchedule+0xb0>
					sampleIndex = 0;
    11ac:	4b03      	ldr	r3, [pc, #12]	; (11bc <sensorTaskSchedule+0xf4>)
    11ae:	2200      	movs	r2, #0
    11b0:	755a      	strb	r2, [r3, #21]
					memset(adcAveragingBuffer,0,MAX_ADC_SAMPLES);
    11b2:	761a      	strb	r2, [r3, #24]
					sensorIndex++;
    11b4:	7d1a      	ldrb	r2, [r3, #20]
    11b6:	3201      	adds	r2, #1
    11b8:	751a      	strb	r2, [r3, #20]
    11ba:	e7f2      	b.n	11a2 <sensorTaskSchedule+0xda>
    11bc:	2000029c 	.word	0x2000029c
    11c0:	20003598 	.word	0x20003598
    11c4:	000058b5 	.word	0x000058b5
    11c8:	00003bd1 	.word	0x00003bd1
    11cc:	41008000 	.word	0x41008000
    11d0:	00003bdf 	.word	0x00003bdf
    11d4:	00008108 	.word	0x00008108
    11d8:	00003445 	.word	0x00003445
    11dc:	000004f9 	.word	0x000004f9

000011e0 <SensorTask>:
{
    11e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11e4:	b093      	sub	sp, #76	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
    11e6:	4b8f      	ldr	r3, [pc, #572]	; (1424 <SensorTask+0x244>)
    11e8:	4798      	blx	r3
	intializeSensorSelectLines();
    11ea:	4b8f      	ldr	r3, [pc, #572]	; (1428 <SensorTask+0x248>)
    11ec:	4798      	blx	r3
	sensorAdcInitialize();
    11ee:	4b8f      	ldr	r3, [pc, #572]	; (142c <SensorTask+0x24c>)
    11f0:	4798      	blx	r3
    11f2:	4b8f      	ldr	r3, [pc, #572]	; (1430 <SensorTask+0x250>)
    11f4:	7c1f      	ldrb	r7, [r3, #16]
    11f6:	7c5e      	ldrb	r6, [r3, #17]
    11f8:	7b9a      	ldrb	r2, [r3, #14]
    11fa:	920e      	str	r2, [sp, #56]	; 0x38
    11fc:	7bda      	ldrb	r2, [r3, #15]
    11fe:	9210      	str	r2, [sp, #64]	; 0x40
    1200:	f893 900c 	ldrb.w	r9, [r3, #12]
    1204:	f893 800d 	ldrb.w	r8, [r3, #13]
    1208:	f893 b00a 	ldrb.w	fp, [r3, #10]
    120c:	f893 a00b 	ldrb.w	sl, [r3, #11]
    1210:	7a1d      	ldrb	r5, [r3, #8]
    1212:	7a5c      	ldrb	r4, [r3, #9]
    1214:	f893 c006 	ldrb.w	ip, [r3, #6]
    1218:	f893 e007 	ldrb.w	lr, [r3, #7]
    121c:	7918      	ldrb	r0, [r3, #4]
    121e:	795b      	ldrb	r3, [r3, #5]
    1220:	930c      	str	r3, [sp, #48]	; 0x30
    1222:	2201      	movs	r2, #1
    1224:	2300      	movs	r3, #0
    1226:	930f      	str	r3, [sp, #60]	; 0x3c
    1228:	930d      	str	r3, [sp, #52]	; 0x34
    122a:	930b      	str	r3, [sp, #44]	; 0x2c
    122c:	930a      	str	r3, [sp, #40]	; 0x28
    122e:	9309      	str	r3, [sp, #36]	; 0x24
    1230:	9308      	str	r3, [sp, #32]
    1232:	9307      	str	r3, [sp, #28]
    1234:	9306      	str	r3, [sp, #24]
    1236:	9305      	str	r3, [sp, #20]
    1238:	9304      	str	r3, [sp, #16]
    123a:	9303      	str	r3, [sp, #12]
    123c:	9302      	str	r3, [sp, #8]
    123e:	9301      	str	r3, [sp, #4]
				sensorInputData[SENSOR_1].adcChannel = SENSOR_1_AIN1;
    1240:	9200      	str	r2, [sp, #0]
    1242:	9311      	str	r3, [sp, #68]	; 0x44
    1244:	e007      	b.n	1256 <SensorTask+0x76>
    1246:	2101      	movs	r1, #1
    1248:	910a      	str	r1, [sp, #40]	; 0x28
				sensorInputData[SENSOR_2].adcChannel = SENSOR_2_AIN2;
    124a:	2402      	movs	r4, #2
    124c:	9900      	ldr	r1, [sp, #0]
    124e:	9109      	str	r1, [sp, #36]	; 0x24
				sensorInputData[SENSOR_2].selectLine = SELECT_2;
    1250:	252b      	movs	r5, #43	; 0x2b
    1252:	3201      	adds	r2, #1
    1254:	b2d2      	uxtb	r2, r2
		switch(sensorIndex)
    1256:	1e51      	subs	r1, r2, #1
    1258:	b2c9      	uxtb	r1, r1
    125a:	2907      	cmp	r1, #7
    125c:	f200 8089 	bhi.w	1372 <SensorTask+0x192>
    1260:	a301      	add	r3, pc, #4	; (adr r3, 1268 <SensorTask+0x88>)
    1262:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    1266:	bf00      	nop
    1268:	00001405 	.word	0x00001405
    126c:	00001415 	.word	0x00001415
    1270:	00001247 	.word	0x00001247
    1274:	00001289 	.word	0x00001289
    1278:	0000129b 	.word	0x0000129b
    127c:	000012ad 	.word	0x000012ad
    1280:	000012bf 	.word	0x000012bf
    1284:	000012cd 	.word	0x000012cd
    1288:	2101      	movs	r1, #1
    128a:	9102      	str	r1, [sp, #8]
				sensorInputData[SENSOR_3].adcChannel = SENSOR_3_AIN3;
    128c:	f04f 0a03 	mov.w	sl, #3
    1290:	9900      	ldr	r1, [sp, #0]
    1292:	9101      	str	r1, [sp, #4]
				sensorInputData[SENSOR_3].selectLine = SELECT_3;
    1294:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
    1298:	e7db      	b.n	1252 <SensorTask+0x72>
    129a:	2101      	movs	r1, #1
    129c:	9104      	str	r1, [sp, #16]
				sensorInputData[SENSOR_4].adcChannel = SENSOR_4_AIN4;
    129e:	f04f 0804 	mov.w	r8, #4
    12a2:	9900      	ldr	r1, [sp, #0]
    12a4:	9103      	str	r1, [sp, #12]
				sensorInputData[SENSOR_4].selectLine = SELECT_4;
    12a6:	f04f 090b 	mov.w	r9, #11
    12aa:	e7d2      	b.n	1252 <SensorTask+0x72>
    12ac:	2301      	movs	r3, #1
    12ae:	9311      	str	r3, [sp, #68]	; 0x44
				sensorInputData[SENSOR_5].adcChannel = SENSOR_5_AIN5;
    12b0:	2105      	movs	r1, #5
    12b2:	9110      	str	r1, [sp, #64]	; 0x40
    12b4:	9900      	ldr	r1, [sp, #0]
    12b6:	910f      	str	r1, [sp, #60]	; 0x3c
				sensorInputData[SENSOR_5].selectLine = SELECT_5;
    12b8:	210a      	movs	r1, #10
    12ba:	910e      	str	r1, [sp, #56]	; 0x38
    12bc:	e7c9      	b.n	1252 <SensorTask+0x72>
    12be:	2101      	movs	r1, #1
    12c0:	9108      	str	r1, [sp, #32]
				sensorInputData[SENSOR_6].adcChannel = SENSOR_6_AIN6;
    12c2:	2606      	movs	r6, #6
    12c4:	9900      	ldr	r1, [sp, #0]
    12c6:	9107      	str	r1, [sp, #28]
				sensorInputData[SENSOR_6].selectLine = SELECT_6;
    12c8:	2709      	movs	r7, #9
    12ca:	e7c2      	b.n	1252 <SensorTask+0x72>
    12cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    12ce:	9a01      	ldr	r2, [sp, #4]
    12d0:	2a00      	cmp	r2, #0
    12d2:	d14a      	bne.n	136a <SensorTask+0x18a>
    12d4:	9a02      	ldr	r2, [sp, #8]
    12d6:	b112      	cbz	r2, 12de <SensorTask+0xfe>
    12d8:	4a55      	ldr	r2, [pc, #340]	; (1430 <SensorTask+0x250>)
    12da:	f882 a00b 	strb.w	sl, [r2, #11]
    12de:	9a03      	ldr	r2, [sp, #12]
    12e0:	b112      	cbz	r2, 12e8 <SensorTask+0x108>
    12e2:	4a53      	ldr	r2, [pc, #332]	; (1430 <SensorTask+0x250>)
    12e4:	f882 900c 	strb.w	r9, [r2, #12]
    12e8:	9a04      	ldr	r2, [sp, #16]
    12ea:	b112      	cbz	r2, 12f2 <SensorTask+0x112>
    12ec:	4a50      	ldr	r2, [pc, #320]	; (1430 <SensorTask+0x250>)
    12ee:	f882 800d 	strb.w	r8, [r2, #13]
    12f2:	9a05      	ldr	r2, [sp, #20]
    12f4:	b112      	cbz	r2, 12fc <SensorTask+0x11c>
    12f6:	4a4e      	ldr	r2, [pc, #312]	; (1430 <SensorTask+0x250>)
    12f8:	f882 c006 	strb.w	ip, [r2, #6]
    12fc:	9a06      	ldr	r2, [sp, #24]
    12fe:	b112      	cbz	r2, 1306 <SensorTask+0x126>
    1300:	4a4b      	ldr	r2, [pc, #300]	; (1430 <SensorTask+0x250>)
    1302:	f882 e007 	strb.w	lr, [r2, #7]
    1306:	9a07      	ldr	r2, [sp, #28]
    1308:	b10a      	cbz	r2, 130e <SensorTask+0x12e>
    130a:	4a49      	ldr	r2, [pc, #292]	; (1430 <SensorTask+0x250>)
    130c:	7417      	strb	r7, [r2, #16]
    130e:	9a08      	ldr	r2, [sp, #32]
    1310:	b10a      	cbz	r2, 1316 <SensorTask+0x136>
    1312:	4a47      	ldr	r2, [pc, #284]	; (1430 <SensorTask+0x250>)
    1314:	7456      	strb	r6, [r2, #17]
    1316:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1318:	b10a      	cbz	r2, 131e <SensorTask+0x13e>
    131a:	4a45      	ldr	r2, [pc, #276]	; (1430 <SensorTask+0x250>)
    131c:	7215      	strb	r5, [r2, #8]
    131e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1320:	b10a      	cbz	r2, 1326 <SensorTask+0x146>
    1322:	4a43      	ldr	r2, [pc, #268]	; (1430 <SensorTask+0x250>)
    1324:	7254      	strb	r4, [r2, #9]
    1326:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1328:	b10a      	cbz	r2, 132e <SensorTask+0x14e>
    132a:	4a41      	ldr	r2, [pc, #260]	; (1430 <SensorTask+0x250>)
    132c:	7110      	strb	r0, [r2, #4]
    132e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1330:	b11a      	cbz	r2, 133a <SensorTask+0x15a>
    1332:	4a3f      	ldr	r2, [pc, #252]	; (1430 <SensorTask+0x250>)
    1334:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
    1338:	7151      	strb	r1, [r2, #5]
    133a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    133c:	b11a      	cbz	r2, 1346 <SensorTask+0x166>
    133e:	4a3c      	ldr	r2, [pc, #240]	; (1430 <SensorTask+0x250>)
    1340:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    1344:	7391      	strb	r1, [r2, #14]
    1346:	b11b      	cbz	r3, 1350 <SensorTask+0x170>
    1348:	4b39      	ldr	r3, [pc, #228]	; (1430 <SensorTask+0x250>)
    134a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    134e:	73da      	strb	r2, [r3, #15]
				sensorInputData[SENSOR_7].selectLine = SELECT_7;
    1350:	4b37      	ldr	r3, [pc, #220]	; (1430 <SensorTask+0x250>)
    1352:	2208      	movs	r2, #8
    1354:	749a      	strb	r2, [r3, #18]
				sensorInputData[SENSOR_7].adcChannel = SENSOR_7_AIN7;
    1356:	2207      	movs	r2, #7
    1358:	74da      	strb	r2, [r3, #19]
	sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
    135a:	2200      	movs	r2, #0
    135c:	4b34      	ldr	r3, [pc, #208]	; (1430 <SensorTask+0x250>)
    135e:	701a      	strb	r2, [r3, #0]
		sensorTaskSchedule();
    1360:	4d34      	ldr	r5, [pc, #208]	; (1434 <SensorTask+0x254>)
		kickWatchDog();
    1362:	4c35      	ldr	r4, [pc, #212]	; (1438 <SensorTask+0x258>)
		sensorTaskSchedule();
    1364:	47a8      	blx	r5
		kickWatchDog();
    1366:	47a0      	blx	r4
    1368:	e7fc      	b.n	1364 <SensorTask+0x184>
    136a:	4a31      	ldr	r2, [pc, #196]	; (1430 <SensorTask+0x250>)
    136c:	f882 b00a 	strb.w	fp, [r2, #10]
    1370:	e7b0      	b.n	12d4 <SensorTask+0xf4>
	for(sensorIndex = SENSOR_0; sensorIndex < MAX_SENSOR_COUNT; sensorIndex++)
    1372:	2a07      	cmp	r2, #7
    1374:	f67f af6d 	bls.w	1252 <SensorTask+0x72>
    1378:	9b11      	ldr	r3, [sp, #68]	; 0x44
    137a:	9a01      	ldr	r2, [sp, #4]
    137c:	b112      	cbz	r2, 1384 <SensorTask+0x1a4>
    137e:	4a2c      	ldr	r2, [pc, #176]	; (1430 <SensorTask+0x250>)
    1380:	f882 b00a 	strb.w	fp, [r2, #10]
    1384:	9a02      	ldr	r2, [sp, #8]
    1386:	b112      	cbz	r2, 138e <SensorTask+0x1ae>
    1388:	4a29      	ldr	r2, [pc, #164]	; (1430 <SensorTask+0x250>)
    138a:	f882 a00b 	strb.w	sl, [r2, #11]
    138e:	9a03      	ldr	r2, [sp, #12]
    1390:	b112      	cbz	r2, 1398 <SensorTask+0x1b8>
    1392:	4a27      	ldr	r2, [pc, #156]	; (1430 <SensorTask+0x250>)
    1394:	f882 900c 	strb.w	r9, [r2, #12]
    1398:	9a04      	ldr	r2, [sp, #16]
    139a:	b112      	cbz	r2, 13a2 <SensorTask+0x1c2>
    139c:	4a24      	ldr	r2, [pc, #144]	; (1430 <SensorTask+0x250>)
    139e:	f882 800d 	strb.w	r8, [r2, #13]
    13a2:	9a05      	ldr	r2, [sp, #20]
    13a4:	b112      	cbz	r2, 13ac <SensorTask+0x1cc>
    13a6:	4a22      	ldr	r2, [pc, #136]	; (1430 <SensorTask+0x250>)
    13a8:	f882 c006 	strb.w	ip, [r2, #6]
    13ac:	9a06      	ldr	r2, [sp, #24]
    13ae:	b112      	cbz	r2, 13b6 <SensorTask+0x1d6>
    13b0:	4a1f      	ldr	r2, [pc, #124]	; (1430 <SensorTask+0x250>)
    13b2:	f882 e007 	strb.w	lr, [r2, #7]
    13b6:	9a07      	ldr	r2, [sp, #28]
    13b8:	b10a      	cbz	r2, 13be <SensorTask+0x1de>
    13ba:	4a1d      	ldr	r2, [pc, #116]	; (1430 <SensorTask+0x250>)
    13bc:	7417      	strb	r7, [r2, #16]
    13be:	9a08      	ldr	r2, [sp, #32]
    13c0:	b10a      	cbz	r2, 13c6 <SensorTask+0x1e6>
    13c2:	4a1b      	ldr	r2, [pc, #108]	; (1430 <SensorTask+0x250>)
    13c4:	7456      	strb	r6, [r2, #17]
    13c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    13c8:	b10a      	cbz	r2, 13ce <SensorTask+0x1ee>
    13ca:	4a19      	ldr	r2, [pc, #100]	; (1430 <SensorTask+0x250>)
    13cc:	7215      	strb	r5, [r2, #8]
    13ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    13d0:	b10a      	cbz	r2, 13d6 <SensorTask+0x1f6>
    13d2:	4a17      	ldr	r2, [pc, #92]	; (1430 <SensorTask+0x250>)
    13d4:	7254      	strb	r4, [r2, #9]
    13d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    13d8:	b10a      	cbz	r2, 13de <SensorTask+0x1fe>
    13da:	4a15      	ldr	r2, [pc, #84]	; (1430 <SensorTask+0x250>)
    13dc:	7110      	strb	r0, [r2, #4]
    13de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    13e0:	b11a      	cbz	r2, 13ea <SensorTask+0x20a>
    13e2:	4a13      	ldr	r2, [pc, #76]	; (1430 <SensorTask+0x250>)
    13e4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
    13e8:	7151      	strb	r1, [r2, #5]
    13ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    13ec:	b11a      	cbz	r2, 13f6 <SensorTask+0x216>
    13ee:	4a10      	ldr	r2, [pc, #64]	; (1430 <SensorTask+0x250>)
    13f0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    13f4:	7391      	strb	r1, [r2, #14]
    13f6:	2b00      	cmp	r3, #0
    13f8:	d0af      	beq.n	135a <SensorTask+0x17a>
    13fa:	4b0d      	ldr	r3, [pc, #52]	; (1430 <SensorTask+0x250>)
    13fc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1400:	73da      	strb	r2, [r3, #15]
    1402:	e7aa      	b.n	135a <SensorTask+0x17a>
		switch(sensorIndex)
    1404:	2101      	movs	r1, #1
    1406:	910d      	str	r1, [sp, #52]	; 0x34
				sensorInputData[SENSOR_0].adcChannel = SENSOR_0_AIN0;
    1408:	2100      	movs	r1, #0
    140a:	910c      	str	r1, [sp, #48]	; 0x30
		switch(sensorIndex)
    140c:	9900      	ldr	r1, [sp, #0]
    140e:	910b      	str	r1, [sp, #44]	; 0x2c
				sensorInputData[SENSOR_0].selectLine = SELECT_0;
    1410:	202d      	movs	r0, #45	; 0x2d
    1412:	e71e      	b.n	1252 <SensorTask+0x72>
		switch(sensorIndex)
    1414:	2101      	movs	r1, #1
    1416:	9106      	str	r1, [sp, #24]
				sensorInputData[SENSOR_1].adcChannel = SENSOR_1_AIN1;
    1418:	9900      	ldr	r1, [sp, #0]
    141a:	468e      	mov	lr, r1
		switch(sensorIndex)
    141c:	9105      	str	r1, [sp, #20]
				sensorInputData[SENSOR_1].selectLine = SELECT_1;
    141e:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
    1422:	e716      	b.n	1252 <SensorTask+0x72>
    1424:	00005e6d 	.word	0x00005e6d
    1428:	00000365 	.word	0x00000365
    142c:	000004ed 	.word	0x000004ed
    1430:	2000029c 	.word	0x2000029c
    1434:	000010c9 	.word	0x000010c9
    1438:	000035b1 	.word	0x000035b1

0000143c <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
    143c:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
    143e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1442:	460d      	mov	r5, r1
    1444:	4c04      	ldr	r4, [pc, #16]	; (1458 <getModemCommandData+0x1c>)
    1446:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    144a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    144c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    144e:	6823      	ldr	r3, [r4, #0]
    1450:	602b      	str	r3, [r5, #0]
}
    1452:	bc30      	pop	{r4, r5}
    1454:	4770      	bx	lr
    1456:	bf00      	nop
    1458:	00008120 	.word	0x00008120

0000145c <buildHttpHeaderWithActiveSessionID>:
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildHttpHeaderWithActiveSessionID(const uint8_t* activeSessionId)
{
	switch (*activeSessionId)
    145c:	7803      	ldrb	r3, [r0, #0]
    145e:	3b31      	subs	r3, #49	; 0x31
    1460:	2b08      	cmp	r3, #8
    1462:	d83b      	bhi.n	14dc <buildHttpHeaderWithActiveSessionID+0x80>
    1464:	e8df f003 	tbb	[pc, r3]
    1468:	17110b05 	.word	0x17110b05
    146c:	2f29231d 	.word	0x2f29231d
    1470:	35          	.byte	0x35
    1471:	00          	.byte	0x00
	{
		case SESSION_ID_1:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '1';
    1472:	4b1b      	ldr	r3, [pc, #108]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    1474:	2231      	movs	r2, #49	; 0x31
    1476:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '1';
    1478:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    147c:	4770      	bx	lr

		case SESSION_ID_2:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '2';
    147e:	4b18      	ldr	r3, [pc, #96]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    1480:	2232      	movs	r2, #50	; 0x32
    1482:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '2';
    1484:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    1488:	4770      	bx	lr

		case SESSION_ID_3:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '3';
    148a:	4b15      	ldr	r3, [pc, #84]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    148c:	2233      	movs	r2, #51	; 0x33
    148e:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '3';
    1490:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    1494:	4770      	bx	lr

		case SESSION_ID_4:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '4';
    1496:	4b12      	ldr	r3, [pc, #72]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    1498:	2234      	movs	r2, #52	; 0x34
    149a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '4';
    149c:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    14a0:	4770      	bx	lr

		case SESSION_ID_5:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '5';
    14a2:	4b0f      	ldr	r3, [pc, #60]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    14a4:	2235      	movs	r2, #53	; 0x35
    14a6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '5';
    14a8:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    14ac:	4770      	bx	lr

		case SESSION_ID_6:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '6';
    14ae:	4b0c      	ldr	r3, [pc, #48]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    14b0:	2236      	movs	r2, #54	; 0x36
    14b2:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '6';
    14b4:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    14b8:	4770      	bx	lr

		case SESSION_ID_7:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '7';
    14ba:	4b09      	ldr	r3, [pc, #36]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    14bc:	2237      	movs	r2, #55	; 0x37
    14be:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '7';
    14c0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    14c4:	4770      	bx	lr

		case SESSION_ID_8:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '8';
    14c6:	4b06      	ldr	r3, [pc, #24]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    14c8:	2238      	movs	r2, #56	; 0x38
    14ca:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '8';
    14cc:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
    14d0:	4770      	bx	lr

		case SESSION_ID_9:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '9';
    14d2:	4b03      	ldr	r3, [pc, #12]	; (14e0 <buildHttpHeaderWithActiveSessionID+0x84>)
    14d4:	2239      	movs	r2, #57	; 0x39
    14d6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '9';
    14d8:	f883 2020 	strb.w	r2, [r3, #32]
    14dc:	4770      	bx	lr
    14de:	bf00      	nop
    14e0:	20000004 	.word	0x20000004

000014e4 <buildDataPacketsToServer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildDataPacketsToServer(void)
{
    14e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	strncpy(kHttpGetCompleteData,kHttpGetString,15);
    14e6:	4c0f      	ldr	r4, [pc, #60]	; (1524 <buildDataPacketsToServer+0x40>)
    14e8:	220f      	movs	r2, #15
    14ea:	490f      	ldr	r1, [pc, #60]	; (1528 <buildDataPacketsToServer+0x44>)
    14ec:	4620      	mov	r0, r4
    14ee:	4b0f      	ldr	r3, [pc, #60]	; (152c <buildDataPacketsToServer+0x48>)
    14f0:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
    14f2:	4620      	mov	r0, r4
    14f4:	4b0e      	ldr	r3, [pc, #56]	; (1530 <buildDataPacketsToServer+0x4c>)
    14f6:	4798      	blx	r3
    14f8:	4d0e      	ldr	r5, [pc, #56]	; (1534 <buildDataPacketsToServer+0x50>)
    14fa:	4404      	add	r4, r0
    14fc:	f105 0720 	add.w	r7, r5, #32
    1500:	462e      	mov	r6, r5
    1502:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1504:	6020      	str	r0, [r4, #0]
    1506:	6061      	str	r1, [r4, #4]
    1508:	60a2      	str	r2, [r4, #8]
    150a:	60e3      	str	r3, [r4, #12]
    150c:	4635      	mov	r5, r6
    150e:	3410      	adds	r4, #16
    1510:	42be      	cmp	r6, r7
    1512:	d1f5      	bne.n	1500 <buildDataPacketsToServer+0x1c>
    1514:	cd07      	ldmia	r5!, {r0, r1, r2}
    1516:	6020      	str	r0, [r4, #0]
    1518:	6061      	str	r1, [r4, #4]
    151a:	60a2      	str	r2, [r4, #8]
    151c:	782b      	ldrb	r3, [r5, #0]
    151e:	7323      	strb	r3, [r4, #12]
    1520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1522:	bf00      	nop
    1524:	200002b8 	.word	0x200002b8
    1528:	20000018 	.word	0x20000018
    152c:	00006e99 	.word	0x00006e99
    1530:	00006e65 	.word	0x00006e65
    1534:	000085d0 	.word	0x000085d0

00001538 <retrieveAPNStringFromResponse>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void retrieveAPNStringFromResponse(uint8_t* cfgResponse)
{
    1538:	b510      	push	{r4, lr}
    153a:	b084      	sub	sp, #16
	uint8_t SourceStartIndex = 116;
	uint8_t SourceEndIndex = 126+1;
	uint8_t DestStartIndex = 22;
	uint8_t DestEndIndex = 32 + 1;
	uint8_t apnString[11] = {0};
    153c:	2300      	movs	r3, #0
    153e:	9301      	str	r3, [sp, #4]
    1540:	9302      	str	r3, [sp, #8]
    1542:	f8cd 300b 	str.w	r3, [sp, #11]
    1546:	f100 0373 	add.w	r3, r0, #115	; 0x73
    154a:	490a      	ldr	r1, [pc, #40]	; (1574 <retrieveAPNStringFromResponse+0x3c>)
    154c:	aa01      	add	r2, sp, #4
    154e:	307e      	adds	r0, #126	; 0x7e

	for(SourceStartIndex = 116; SourceStartIndex < SourceEndIndex; SourceStartIndex++)
	{
		kHttpAPNDefaultString[(DestStartIndex)+(SourceStartIndex-116)] = cfgResponse[SourceStartIndex];
    1550:	785c      	ldrb	r4, [r3, #1]
    1552:	f801 4f01 	strb.w	r4, [r1, #1]!
		apnString[SourceStartIndex - 116] = cfgResponse[SourceStartIndex];
    1556:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    155a:	f802 4b01 	strb.w	r4, [r2], #1
	for(SourceStartIndex = 116; SourceStartIndex < SourceEndIndex; SourceStartIndex++)
    155e:	4283      	cmp	r3, r0
    1560:	d1f6      	bne.n	1550 <retrieveAPNStringFromResponse+0x18>
	}

	SerialDebugPrint(apnString,11);
    1562:	210b      	movs	r1, #11
    1564:	a801      	add	r0, sp, #4
    1566:	4b04      	ldr	r3, [pc, #16]	; (1578 <retrieveAPNStringFromResponse+0x40>)
    1568:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
    156a:	4804      	ldr	r0, [pc, #16]	; (157c <retrieveAPNStringFromResponse+0x44>)
    156c:	4b04      	ldr	r3, [pc, #16]	; (1580 <retrieveAPNStringFromResponse+0x48>)
    156e:	4798      	blx	r3
}
    1570:	b004      	add	sp, #16
    1572:	bd10      	pop	{r4, pc}
    1574:	2000003d 	.word	0x2000003d
    1578:	00003375 	.word	0x00003375
    157c:	00009394 	.word	0x00009394
    1580:	000033b9 	.word	0x000033b9

00001584 <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
    1584:	b5f0      	push	{r4, r5, r6, r7, lr}
    1586:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
    1588:	a901      	add	r1, sp, #4
    158a:	4b2d      	ldr	r3, [pc, #180]	; (1640 <mdmParser_solicitedCmdParser+0xbc>)
    158c:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
    158e:	f89d 700c 	ldrb.w	r7, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
    1592:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    1596:	4b2b      	ldr	r3, [pc, #172]	; (1644 <mdmParser_solicitedCmdParser+0xc0>)
    1598:	4798      	blx	r3

	if(responseBuffer != NULL)
    159a:	2800      	cmp	r0, #0
    159c:	d04a      	beq.n	1634 <mdmParser_solicitedCmdParser+0xb0>
    159e:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
    15a0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
    15a4:	4b28      	ldr	r3, [pc, #160]	; (1648 <mdmParser_solicitedCmdParser+0xc4>)
    15a6:	4798      	blx	r3

		if(readStatus != false)
    15a8:	4606      	mov	r6, r0
    15aa:	2800      	cmp	r0, #0
    15ac:	d03e      	beq.n	162c <mdmParser_solicitedCmdParser+0xa8>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
    15ae:	f89d 200c 	ldrb.w	r2, [sp, #12]
    15b2:	4621      	mov	r1, r4
    15b4:	9802      	ldr	r0, [sp, #8]
    15b6:	4b25      	ldr	r3, [pc, #148]	; (164c <mdmParser_solicitedCmdParser+0xc8>)
    15b8:	4798      	blx	r3
    15ba:	bb58      	cbnz	r0, 1614 <mdmParser_solicitedCmdParser+0x90>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
    15bc:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    15c0:	3001      	adds	r0, #1
    15c2:	4b20      	ldr	r3, [pc, #128]	; (1644 <mdmParser_solicitedCmdParser+0xc0>)
    15c4:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
    15c6:	4605      	mov	r5, r0
    15c8:	b1f8      	cbz	r0, 160a <mdmParser_solicitedCmdParser+0x86>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
    15ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    15ce:	b1d3      	cbz	r3, 1606 <mdmParser_solicitedCmdParser+0x82>
    15d0:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
    15d2:	1cb9      	adds	r1, r7, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
    15d4:	b2c9      	uxtb	r1, r1
    15d6:	18e2      	adds	r2, r4, r3
    15d8:	5c52      	ldrb	r2, [r2, r1]
    15da:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
    15dc:	3301      	adds	r3, #1
    15de:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
    15e0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    15e4:	429a      	cmp	r2, r3
    15e6:	d8f6      	bhi.n	15d6 <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
    15e8:	2200      	movs	r2, #0
    15ea:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt+1);
    15ec:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    15f0:	3201      	adds	r2, #1
    15f2:	b292      	uxth	r2, r2
    15f4:	4629      	mov	r1, r5
    15f6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    15fa:	9b04      	ldr	r3, [sp, #16]
    15fc:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
    15fe:	4628      	mov	r0, r5
    1600:	4b13      	ldr	r3, [pc, #76]	; (1650 <mdmParser_solicitedCmdParser+0xcc>)
    1602:	4798      	blx	r3
    1604:	e00a      	b.n	161c <mdmParser_solicitedCmdParser+0x98>
					while(parseCnt < cmdData.validDataCnt)
    1606:	2300      	movs	r3, #0
    1608:	e7ee      	b.n	15e8 <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
    160a:	4812      	ldr	r0, [pc, #72]	; (1654 <mdmParser_solicitedCmdParser+0xd0>)
    160c:	4b12      	ldr	r3, [pc, #72]	; (1658 <mdmParser_solicitedCmdParser+0xd4>)
    160e:	4798      	blx	r3
	bool parseStatus = false;
    1610:	2600      	movs	r6, #0
    1612:	e003      	b.n	161c <mdmParser_solicitedCmdParser+0x98>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
    1614:	4811      	ldr	r0, [pc, #68]	; (165c <mdmParser_solicitedCmdParser+0xd8>)
    1616:	4b10      	ldr	r3, [pc, #64]	; (1658 <mdmParser_solicitedCmdParser+0xd4>)
    1618:	4798      	blx	r3
				parseStatus = false;
    161a:	2600      	movs	r6, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
    161c:	4620      	mov	r0, r4
    161e:	4b0c      	ldr	r3, [pc, #48]	; (1650 <mdmParser_solicitedCmdParser+0xcc>)
    1620:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
    1622:	4b0f      	ldr	r3, [pc, #60]	; (1660 <mdmParser_solicitedCmdParser+0xdc>)
    1624:	4798      	blx	r3

	return parseStatus;
}
    1626:	4630      	mov	r0, r6
    1628:	b007      	add	sp, #28
    162a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
    162c:	480d      	ldr	r0, [pc, #52]	; (1664 <mdmParser_solicitedCmdParser+0xe0>)
    162e:	4b0a      	ldr	r3, [pc, #40]	; (1658 <mdmParser_solicitedCmdParser+0xd4>)
    1630:	4798      	blx	r3
    1632:	e7f3      	b.n	161c <mdmParser_solicitedCmdParser+0x98>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
    1634:	480c      	ldr	r0, [pc, #48]	; (1668 <mdmParser_solicitedCmdParser+0xe4>)
    1636:	4b08      	ldr	r3, [pc, #32]	; (1658 <mdmParser_solicitedCmdParser+0xd4>)
    1638:	4798      	blx	r3
	bool parseStatus = false;
    163a:	2600      	movs	r6, #0
    163c:	e7f1      	b.n	1622 <mdmParser_solicitedCmdParser+0x9e>
    163e:	bf00      	nop
    1640:	0000143d 	.word	0x0000143d
    1644:	00005015 	.word	0x00005015
    1648:	00002a5d 	.word	0x00002a5d
    164c:	00006e75 	.word	0x00006e75
    1650:	000050f5 	.word	0x000050f5
    1654:	0000883c 	.word	0x0000883c
    1658:	000033b9 	.word	0x000033b9
    165c:	00008870 	.word	0x00008870
    1660:	00002ab1 	.word	0x00002ab1
    1664:	000088ac 	.word	0x000088ac
    1668:	000088f0 	.word	0x000088f0

0000166c <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
    166c:	4b01      	ldr	r3, [pc, #4]	; (1674 <mdmParser_SetLastCmdProcessed+0x8>)
    166e:	7018      	strb	r0, [r3, #0]
    1670:	4770      	bx	lr
    1672:	bf00      	nop
    1674:	2000004b 	.word	0x2000004b

00001678 <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
    1678:	4b01      	ldr	r3, [pc, #4]	; (1680 <mdmParser_SetLastSentAtCommand+0x8>)
    167a:	7018      	strb	r0, [r3, #0]
    167c:	4770      	bx	lr
    167e:	bf00      	nop
    1680:	200002f4 	.word	0x200002f4

00001684 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
    1684:	4b01      	ldr	r3, [pc, #4]	; (168c <mdmParser_GetLastSentAtCommand+0x8>)
    1686:	7818      	ldrb	r0, [r3, #0]
    1688:	4770      	bx	lr
    168a:	bf00      	nop
    168c:	200002f4 	.word	0x200002f4

00001690 <getCloseActiveSessionCmd>:
**===========================================================================*/
static AT_CMD_TYPE getCloseActiveSessionCmd(uint8_t sessionID)
{
    AT_CMD_TYPE sessionCloseCmd;

    switch(sessionID)
    1690:	3801      	subs	r0, #1
    1692:	2809      	cmp	r0, #9
    1694:	d81a      	bhi.n	16cc <getCloseActiveSessionCmd+0x3c>
    1696:	e8df f000 	tbb	[pc, r0]
    169a:	0705      	.short	0x0705
    169c:	0f0d0b09 	.word	0x0f0d0b09
    16a0:	17151311 	.word	0x17151311
    {
        case 1:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_1;
    16a4:	200a      	movs	r0, #10
    16a6:	4770      	bx	lr
        }
        break;

        case 2:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_2;
    16a8:	200b      	movs	r0, #11
        }
        break;
    16aa:	4770      	bx	lr

        case 3:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_3;
    16ac:	200c      	movs	r0, #12
        }
        break;
    16ae:	4770      	bx	lr

        case 4:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_4;
    16b0:	200d      	movs	r0, #13
        }
        break;
    16b2:	4770      	bx	lr

        case 5:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_5;
    16b4:	200e      	movs	r0, #14
        }
        break;
    16b6:	4770      	bx	lr

        case 6:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_6;
    16b8:	200f      	movs	r0, #15
        }
        break;
    16ba:	4770      	bx	lr

        case 7:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_7;
    16bc:	2010      	movs	r0, #16
        }
        break;
    16be:	4770      	bx	lr

        case 8:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_8;
    16c0:	2011      	movs	r0, #17
        }
        break;
    16c2:	4770      	bx	lr

        case 9:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_9;
    16c4:	2012      	movs	r0, #18
        }
        break;
    16c6:	4770      	bx	lr

        case 10:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_10;
    16c8:	2013      	movs	r0, #19
        }
        break;
    16ca:	4770      	bx	lr
    switch(sessionID)
    16cc:	2000      	movs	r0, #0
        default:
        break;
    }
    
    return sessionCloseCmd;
}
    16ce:	4770      	bx	lr

000016d0 <validateCommonCommandResponse>:
{
    16d0:	b508      	push	{r3, lr}
    if(0==memcmp(response,"OK",2))
    16d2:	2202      	movs	r2, #2
    16d4:	4903      	ldr	r1, [pc, #12]	; (16e4 <validateCommonCommandResponse+0x14>)
    16d6:	4b04      	ldr	r3, [pc, #16]	; (16e8 <validateCommonCommandResponse+0x18>)
    16d8:	4798      	blx	r3
}
    16da:	fab0 f080 	clz	r0, r0
    16de:	0940      	lsrs	r0, r0, #5
    16e0:	bd08      	pop	{r3, pc}
    16e2:	bf00      	nop
    16e4:	00007814 	.word	0x00007814
    16e8:	00006c1b 	.word	0x00006c1b

000016ec <MdmConnect_HttpConnectionInit>:
    gHttpConnectionState = MDM_HTTP_DISCONNECTED;
    16ec:	4b07      	ldr	r3, [pc, #28]	; (170c <MdmConnect_HttpConnectionInit+0x20>)
    16ee:	2200      	movs	r2, #0
    16f0:	701a      	strb	r2, [r3, #0]
    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    16f2:	705a      	strb	r2, [r3, #1]
    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    16f4:	709a      	strb	r2, [r3, #2]
    gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    16f6:	70da      	strb	r2, [r3, #3]
    gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    16f8:	711a      	strb	r2, [r3, #4]
    sessionIdCount = 5;
    16fa:	2105      	movs	r1, #5
    16fc:	7159      	strb	r1, [r3, #5]
    ConnectionResponse.atCmd = CMD_AT_MAX;
    16fe:	721a      	strb	r2, [r3, #8]
    ConnectionResponse.length = 0;
    1700:	815a      	strh	r2, [r3, #10]
    ConnectionResponse.response = NULL;
    1702:	60da      	str	r2, [r3, #12]
    currentSessionId = '0';
    1704:	2230      	movs	r2, #48	; 0x30
    1706:	741a      	strb	r2, [r3, #16]
    1708:	4770      	bx	lr
    170a:	bf00      	nop
    170c:	200002f8 	.word	0x200002f8

00001710 <performForcedRebootOfModem>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
static void performForcedRebootOfModem(void)
{
    1710:	b510      	push	{r4, lr}
	DEBUG_PRINT("Connection to the server is lost.....");
    1712:	4805      	ldr	r0, [pc, #20]	; (1728 <performForcedRebootOfModem+0x18>)
    1714:	4c05      	ldr	r4, [pc, #20]	; (172c <performForcedRebootOfModem+0x1c>)
    1716:	47a0      	blx	r4
	DEBUG_PRINT("Trying to establish the connection to server...Please wait......\r\n");
    1718:	4805      	ldr	r0, [pc, #20]	; (1730 <performForcedRebootOfModem+0x20>)
    171a:	47a0      	blx	r4

	/* Perform a physical modem restart */
	modemPowerStateInit();
    171c:	4b05      	ldr	r3, [pc, #20]	; (1734 <performForcedRebootOfModem+0x24>)
    171e:	4798      	blx	r3

	/* Reset the modem connection States */
	MdmConnect_HttpConnectionInit();
    1720:	4b05      	ldr	r3, [pc, #20]	; (1738 <performForcedRebootOfModem+0x28>)
    1722:	4798      	blx	r3
    1724:	bd10      	pop	{r4, pc}
    1726:	bf00      	nop
    1728:	00008928 	.word	0x00008928
    172c:	000033b9 	.word	0x000033b9
    1730:	00008950 	.word	0x00008950
    1734:	00002da1 	.word	0x00002da1
    1738:	000016ed 	.word	0x000016ed

0000173c <MdmCnct_ConnectInProgressSubStateMachine>:
{
    173c:	b570      	push	{r4, r5, r6, lr}
    173e:	b082      	sub	sp, #8
    switch (gHttpConnectionInProgressSubstate)
    1740:	4b88      	ldr	r3, [pc, #544]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    1742:	785b      	ldrb	r3, [r3, #1]
    1744:	2b08      	cmp	r3, #8
    1746:	f200 8093 	bhi.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
    174a:	e8df f013 	tbh	[pc, r3, lsl #1]
    174e:	0009      	.short	0x0009
    1750:	013d008c 	.word	0x013d008c
    1754:	022f01c3 	.word	0x022f01c3
    1758:	033702cb 	.word	0x033702cb
    175c:	047c03a3 	.word	0x047c03a3
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1760:	4b80      	ldr	r3, [pc, #512]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    1762:	789b      	ldrb	r3, [r3, #2]
    1764:	2b00      	cmp	r3, #0
    1766:	d14d      	bne.n	1804 <MdmCnct_ConnectInProgressSubStateMachine+0xc8>
                if(sessionIdCount > 0)
    1768:	4b7e      	ldr	r3, [pc, #504]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    176a:	795b      	ldrb	r3, [r3, #5]
    176c:	2b00      	cmp	r3, #0
    176e:	d03e      	beq.n	17ee <MdmCnct_ConnectInProgressSubStateMachine+0xb2>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1770:	4b7d      	ldr	r3, [pc, #500]	; (1968 <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
    1772:	6818      	ldr	r0, [r3, #0]
    1774:	4b7d      	ldr	r3, [pc, #500]	; (196c <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
    1776:	4798      	blx	r3
    1778:	2800      	cmp	r0, #0
    177a:	d134      	bne.n	17e6 <MdmCnct_ConnectInProgressSubStateMachine+0xaa>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    177c:	2100      	movs	r1, #0
    177e:	4b7c      	ldr	r3, [pc, #496]	; (1970 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
    1780:	6818      	ldr	r0, [r3, #0]
    1782:	4b7c      	ldr	r3, [pc, #496]	; (1974 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
    1784:	4798      	blx	r3
    1786:	2801      	cmp	r0, #1
    1788:	d003      	beq.n	1792 <MdmCnct_ConnectInProgressSubStateMachine+0x56>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    178a:	487b      	ldr	r0, [pc, #492]	; (1978 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    178c:	4b7b      	ldr	r3, [pc, #492]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    178e:	4798      	blx	r3
    1790:	e06e      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1792:	2301      	movs	r3, #1
    1794:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
    1798:	4b72      	ldr	r3, [pc, #456]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    179a:	7958      	ldrb	r0, [r3, #5]
    179c:	4b78      	ldr	r3, [pc, #480]	; (1980 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
    179e:	4798      	blx	r3
    17a0:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
    17a4:	2300      	movs	r3, #0
    17a6:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    17a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    17ac:	4669      	mov	r1, sp
    17ae:	486e      	ldr	r0, [pc, #440]	; (1968 <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
    17b0:	6800      	ldr	r0, [r0, #0]
    17b2:	4c74      	ldr	r4, [pc, #464]	; (1984 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
    17b4:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
    17b6:	2801      	cmp	r0, #1
    17b8:	d007      	beq.n	17ca <MdmCnct_ConnectInProgressSubStateMachine+0x8e>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    17ba:	4873      	ldr	r0, [pc, #460]	; (1988 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
    17bc:	4b6f      	ldr	r3, [pc, #444]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    17be:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
    17c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    17c4:	4b71      	ldr	r3, [pc, #452]	; (198c <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
    17c6:	4798      	blx	r3
    17c8:	e052      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
    17ca:	2300      	movs	r3, #0
    17cc:	461a      	mov	r2, r3
    17ce:	4619      	mov	r1, r3
    17d0:	4867      	ldr	r0, [pc, #412]	; (1970 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
    17d2:	6800      	ldr	r0, [r0, #0]
    17d4:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    17d6:	2201      	movs	r2, #1
    17d8:	4b62      	ldr	r3, [pc, #392]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    17da:	709a      	strb	r2, [r3, #2]
                                vTaskDelay(TransmitDelayMs);
    17dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    17e0:	4b6a      	ldr	r3, [pc, #424]	; (198c <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
    17e2:	4798      	blx	r3
    17e4:	e044      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        DEBUG_PRINT("Transmit Queue is not empty");
    17e6:	486a      	ldr	r0, [pc, #424]	; (1990 <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
    17e8:	4b64      	ldr	r3, [pc, #400]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    17ea:	4798      	blx	r3
    17ec:	e040      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("No More Active Connections to close");
    17ee:	4869      	ldr	r0, [pc, #420]	; (1994 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
    17f0:	4c62      	ldr	r4, [pc, #392]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    17f2:	47a0      	blx	r4
                    DEBUG_PRINT("\r\n");
    17f4:	4868      	ldr	r0, [pc, #416]	; (1998 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
    17f6:	47a0      	blx	r4
                    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
    17f8:	4b5a      	ldr	r3, [pc, #360]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    17fa:	2201      	movs	r2, #1
    17fc:	705a      	strb	r2, [r3, #1]
                    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    17fe:	2200      	movs	r2, #0
    1800:	709a      	strb	r2, [r3, #2]
    1802:	e035      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1804:	2b01      	cmp	r3, #1
    1806:	d133      	bne.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1808:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    180c:	4963      	ldr	r1, [pc, #396]	; (199c <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
    180e:	4b64      	ldr	r3, [pc, #400]	; (19a0 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
    1810:	6818      	ldr	r0, [r3, #0]
    1812:	4b64      	ldr	r3, [pc, #400]	; (19a4 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
    1814:	4798      	blx	r3
    1816:	2801      	cmp	r0, #1
    1818:	d12a      	bne.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
    181a:	4b52      	ldr	r3, [pc, #328]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    181c:	7a1d      	ldrb	r5, [r3, #8]
    181e:	795c      	ldrb	r4, [r3, #5]
    1820:	4620      	mov	r0, r4
    1822:	4b57      	ldr	r3, [pc, #348]	; (1980 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
    1824:	4798      	blx	r3
    1826:	4285      	cmp	r5, r0
    1828:	d113      	bne.n	1852 <MdmCnct_ConnectInProgressSubStateMachine+0x116>
                        if(sessionIdCount > 0)
    182a:	b14c      	cbz	r4, 1840 <MdmCnct_ConnectInProgressSubStateMachine+0x104>
                            sessionIdCount--;
    182c:	4b4d      	ldr	r3, [pc, #308]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    182e:	3c01      	subs	r4, #1
    1830:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1832:	2200      	movs	r2, #0
    1834:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1836:	4b4b      	ldr	r3, [pc, #300]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    1838:	68d8      	ldr	r0, [r3, #12]
    183a:	4b5b      	ldr	r3, [pc, #364]	; (19a8 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
    183c:	4798      	blx	r3
    183e:	e017      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
    1840:	4b48      	ldr	r3, [pc, #288]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    1842:	2201      	movs	r2, #1
    1844:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1846:	2200      	movs	r2, #0
    1848:	709a      	strb	r2, [r3, #2]
                            DEBUG_PRINT("Closed All Active Connections");
    184a:	4858      	ldr	r0, [pc, #352]	; (19ac <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
    184c:	4b4b      	ldr	r3, [pc, #300]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    184e:	4798      	blx	r3
    1850:	e7f1      	b.n	1836 <MdmCnct_ConnectInProgressSubStateMachine+0xfa>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1852:	4857      	ldr	r0, [pc, #348]	; (19b0 <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
    1854:	4b49      	ldr	r3, [pc, #292]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1856:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1858:	4b42      	ldr	r3, [pc, #264]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    185a:	2200      	movs	r2, #0
    185c:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    185e:	68d8      	ldr	r0, [r3, #12]
    1860:	4b51      	ldr	r3, [pc, #324]	; (19a8 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
    1862:	4798      	blx	r3
    1864:	e004      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1866:	4b3f      	ldr	r3, [pc, #252]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    1868:	789b      	ldrb	r3, [r3, #2]
    186a:	b11b      	cbz	r3, 1874 <MdmCnct_ConnectInProgressSubStateMachine+0x138>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    186c:	2b01      	cmp	r3, #1
    186e:	d03e      	beq.n	18ee <MdmCnct_ConnectInProgressSubStateMachine+0x1b2>
}
    1870:	b002      	add	sp, #8
    1872:	bd70      	pop	{r4, r5, r6, pc}
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1874:	4b3c      	ldr	r3, [pc, #240]	; (1968 <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
    1876:	6818      	ldr	r0, [r3, #0]
    1878:	4b3c      	ldr	r3, [pc, #240]	; (196c <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
    187a:	4798      	blx	r3
    187c:	2800      	cmp	r0, #0
    187e:	d132      	bne.n	18e6 <MdmCnct_ConnectInProgressSubStateMachine+0x1aa>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1880:	2100      	movs	r1, #0
    1882:	4b3b      	ldr	r3, [pc, #236]	; (1970 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
    1884:	6818      	ldr	r0, [r3, #0]
    1886:	4b3b      	ldr	r3, [pc, #236]	; (1974 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
    1888:	4798      	blx	r3
    188a:	2801      	cmp	r0, #1
    188c:	d003      	beq.n	1896 <MdmCnct_ConnectInProgressSubStateMachine+0x15a>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    188e:	483a      	ldr	r0, [pc, #232]	; (1978 <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
    1890:	4b3a      	ldr	r3, [pc, #232]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1892:	4798      	blx	r3
    1894:	e7ec      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1896:	2301      	movs	r3, #1
    1898:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
    189c:	231a      	movs	r3, #26
    189e:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    18a2:	2300      	movs	r3, #0
    18a4:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    18a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    18aa:	4669      	mov	r1, sp
    18ac:	482e      	ldr	r0, [pc, #184]	; (1968 <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
    18ae:	6800      	ldr	r0, [r0, #0]
    18b0:	4c34      	ldr	r4, [pc, #208]	; (1984 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
    18b2:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    18b4:	2801      	cmp	r0, #1
    18b6:	d007      	beq.n	18c8 <MdmCnct_ConnectInProgressSubStateMachine+0x18c>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    18b8:	4833      	ldr	r0, [pc, #204]	; (1988 <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
    18ba:	4b30      	ldr	r3, [pc, #192]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    18bc:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    18be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    18c2:	4b32      	ldr	r3, [pc, #200]	; (198c <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
    18c4:	4798      	blx	r3
    18c6:	e7d3      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    18c8:	2300      	movs	r3, #0
    18ca:	461a      	mov	r2, r3
    18cc:	4619      	mov	r1, r3
    18ce:	4828      	ldr	r0, [pc, #160]	; (1970 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
    18d0:	6800      	ldr	r0, [r0, #0]
    18d2:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    18d4:	4b23      	ldr	r3, [pc, #140]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    18d6:	2201      	movs	r2, #1
    18d8:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
    18da:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
    18dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    18e0:	4b2a      	ldr	r3, [pc, #168]	; (198c <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
    18e2:	4798      	blx	r3
    18e4:	e7c4      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    18e6:	482a      	ldr	r0, [pc, #168]	; (1990 <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
    18e8:	4b24      	ldr	r3, [pc, #144]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    18ea:	4798      	blx	r3
    18ec:	e7c0      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    18ee:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    18f2:	492a      	ldr	r1, [pc, #168]	; (199c <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
    18f4:	4b2a      	ldr	r3, [pc, #168]	; (19a0 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
    18f6:	6818      	ldr	r0, [r3, #0]
    18f8:	4b2a      	ldr	r3, [pc, #168]	; (19a4 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
    18fa:	4798      	blx	r3
    18fc:	2801      	cmp	r0, #1
    18fe:	d1b7      	bne.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
    1900:	4b18      	ldr	r3, [pc, #96]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    1902:	7a1b      	ldrb	r3, [r3, #8]
    1904:	2b1a      	cmp	r3, #26
    1906:	d122      	bne.n	194e <MdmCnct_ConnectInProgressSubStateMachine+0x212>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    1908:	4b16      	ldr	r3, [pc, #88]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    190a:	68d8      	ldr	r0, [r3, #12]
    190c:	4b29      	ldr	r3, [pc, #164]	; (19b4 <MdmCnct_ConnectInProgressSubStateMachine+0x278>)
    190e:	4798      	blx	r3
    1910:	b190      	cbz	r0, 1938 <MdmCnct_ConnectInProgressSubStateMachine+0x1fc>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
    1912:	4829      	ldr	r0, [pc, #164]	; (19b8 <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
    1914:	4d19      	ldr	r5, [pc, #100]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1916:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1918:	4c12      	ldr	r4, [pc, #72]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    191a:	8961      	ldrh	r1, [r4, #10]
    191c:	68e0      	ldr	r0, [r4, #12]
    191e:	4b27      	ldr	r3, [pc, #156]	; (19bc <MdmCnct_ConnectInProgressSubStateMachine+0x280>)
    1920:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    1922:	481d      	ldr	r0, [pc, #116]	; (1998 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
    1924:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1926:	2300      	movs	r3, #0
    1928:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
    192a:	2302      	movs	r3, #2
    192c:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
    192e:	4b0d      	ldr	r3, [pc, #52]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    1930:	68d8      	ldr	r0, [r3, #12]
    1932:	4b1d      	ldr	r3, [pc, #116]	; (19a8 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
    1934:	4798      	blx	r3
    1936:	e79b      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            DEBUG_PRINT("Expected Response Not Received...");
    1938:	4821      	ldr	r0, [pc, #132]	; (19c0 <MdmCnct_ConnectInProgressSubStateMachine+0x284>)
    193a:	4c10      	ldr	r4, [pc, #64]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    193c:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    193e:	4816      	ldr	r0, [pc, #88]	; (1998 <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
    1940:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1942:	2200      	movs	r2, #0
    1944:	4b07      	ldr	r3, [pc, #28]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    1946:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    1948:	4b1e      	ldr	r3, [pc, #120]	; (19c4 <MdmCnct_ConnectInProgressSubStateMachine+0x288>)
    194a:	4798      	blx	r3
    194c:	e7ef      	b.n	192e <MdmCnct_ConnectInProgressSubStateMachine+0x1f2>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    194e:	4818      	ldr	r0, [pc, #96]	; (19b0 <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
    1950:	4b0a      	ldr	r3, [pc, #40]	; (197c <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
    1952:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1954:	4b03      	ldr	r3, [pc, #12]	; (1964 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
    1956:	2200      	movs	r2, #0
    1958:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    195a:	68d8      	ldr	r0, [r3, #12]
    195c:	4b12      	ldr	r3, [pc, #72]	; (19a8 <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
    195e:	4798      	blx	r3
    1960:	e786      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
    1962:	bf00      	nop
    1964:	200002f8 	.word	0x200002f8
    1968:	20003588 	.word	0x20003588
    196c:	00005a95 	.word	0x00005a95
    1970:	2000359c 	.word	0x2000359c
    1974:	000058b5 	.word	0x000058b5
    1978:	0000789c 	.word	0x0000789c
    197c:	000033b9 	.word	0x000033b9
    1980:	00001691 	.word	0x00001691
    1984:	0000541d 	.word	0x0000541d
    1988:	00008994 	.word	0x00008994
    198c:	000060ad 	.word	0x000060ad
    1990:	000078c8 	.word	0x000078c8
    1994:	000089c8 	.word	0x000089c8
    1998:	00009394 	.word	0x00009394
    199c:	20000300 	.word	0x20000300
    19a0:	20003564 	.word	0x20003564
    19a4:	0000572d 	.word	0x0000572d
    19a8:	000050f5 	.word	0x000050f5
    19ac:	000089ec 	.word	0x000089ec
    19b0:	00008a0c 	.word	0x00008a0c
    19b4:	000016d1 	.word	0x000016d1
    19b8:	00008a40 	.word	0x00008a40
    19bc:	00003375 	.word	0x00003375
    19c0:	00008a60 	.word	0x00008a60
    19c4:	00001711 	.word	0x00001711
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    19c8:	4b90      	ldr	r3, [pc, #576]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    19ca:	789b      	ldrb	r3, [r3, #2]
    19cc:	2b00      	cmp	r3, #0
    19ce:	d02e      	beq.n	1a2e <MdmCnct_ConnectInProgressSubStateMachine+0x2f2>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    19d0:	2b01      	cmp	r3, #1
    19d2:	f47f af4d 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    19d6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    19da:	498d      	ldr	r1, [pc, #564]	; (1c10 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
    19dc:	4b8d      	ldr	r3, [pc, #564]	; (1c14 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
    19de:	6818      	ldr	r0, [r3, #0]
    19e0:	4b8d      	ldr	r3, [pc, #564]	; (1c18 <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
    19e2:	4798      	blx	r3
    19e4:	2801      	cmp	r0, #1
    19e6:	f47f af43 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
    19ea:	4b88      	ldr	r3, [pc, #544]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    19ec:	7a1b      	ldrb	r3, [r3, #8]
    19ee:	2b1b      	cmp	r3, #27
    19f0:	d166      	bne.n	1ac0 <MdmCnct_ConnectInProgressSubStateMachine+0x384>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    19f2:	4b86      	ldr	r3, [pc, #536]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    19f4:	68d8      	ldr	r0, [r3, #12]
    19f6:	4b89      	ldr	r3, [pc, #548]	; (1c1c <MdmCnct_ConnectInProgressSubStateMachine+0x4e0>)
    19f8:	4798      	blx	r3
    19fa:	2800      	cmp	r0, #0
    19fc:	d055      	beq.n	1aaa <MdmCnct_ConnectInProgressSubStateMachine+0x36e>
                            DEBUG_PRINT("Detached the PDP PS");
    19fe:	4888      	ldr	r0, [pc, #544]	; (1c20 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    1a00:	4d88      	ldr	r5, [pc, #544]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1a02:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1a04:	4c81      	ldr	r4, [pc, #516]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1a06:	8961      	ldrh	r1, [r4, #10]
    1a08:	68e0      	ldr	r0, [r4, #12]
    1a0a:	4b87      	ldr	r3, [pc, #540]	; (1c28 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
    1a0c:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    1a0e:	4e87      	ldr	r6, [pc, #540]	; (1c2c <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
    1a10:	4630      	mov	r0, r6
    1a12:	47a8      	blx	r5
                            DEBUG_PRINT("Deleted all of the previous connection configurations");
    1a14:	4886      	ldr	r0, [pc, #536]	; (1c30 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
    1a16:	47a8      	blx	r5
                            DEBUG_PRINT("\r\n");
    1a18:	4630      	mov	r0, r6
    1a1a:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1a1c:	2300      	movs	r3, #0
    1a1e:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
    1a20:	2303      	movs	r3, #3
    1a22:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
    1a24:	4b79      	ldr	r3, [pc, #484]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1a26:	68d8      	ldr	r0, [r3, #12]
    1a28:	4b82      	ldr	r3, [pc, #520]	; (1c34 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    1a2a:	4798      	blx	r3
    1a2c:	e720      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1a2e:	4b82      	ldr	r3, [pc, #520]	; (1c38 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1a30:	6818      	ldr	r0, [r3, #0]
    1a32:	4b82      	ldr	r3, [pc, #520]	; (1c3c <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    1a34:	4798      	blx	r3
    1a36:	2800      	cmp	r0, #0
    1a38:	d133      	bne.n	1aa2 <MdmCnct_ConnectInProgressSubStateMachine+0x366>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1a3a:	2100      	movs	r1, #0
    1a3c:	4b80      	ldr	r3, [pc, #512]	; (1c40 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1a3e:	6818      	ldr	r0, [r3, #0]
    1a40:	4b80      	ldr	r3, [pc, #512]	; (1c44 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
    1a42:	4798      	blx	r3
    1a44:	2801      	cmp	r0, #1
    1a46:	d003      	beq.n	1a50 <MdmCnct_ConnectInProgressSubStateMachine+0x314>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1a48:	487f      	ldr	r0, [pc, #508]	; (1c48 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
    1a4a:	4b76      	ldr	r3, [pc, #472]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1a4c:	4798      	blx	r3
    1a4e:	e70f      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1a50:	2301      	movs	r3, #1
    1a52:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
    1a56:	231b      	movs	r3, #27
    1a58:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1a5c:	2300      	movs	r3, #0
    1a5e:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1a60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1a64:	4669      	mov	r1, sp
    1a66:	4874      	ldr	r0, [pc, #464]	; (1c38 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1a68:	6800      	ldr	r0, [r0, #0]
    1a6a:	4c78      	ldr	r4, [pc, #480]	; (1c4c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
    1a6c:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1a6e:	2801      	cmp	r0, #1
    1a70:	d007      	beq.n	1a82 <MdmCnct_ConnectInProgressSubStateMachine+0x346>
                            DEBUG_PRINT("Failed to sent the PS Detach request to Tx Task");
    1a72:	4877      	ldr	r0, [pc, #476]	; (1c50 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
    1a74:	4b6b      	ldr	r3, [pc, #428]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1a76:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1a78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1a7c:	4b75      	ldr	r3, [pc, #468]	; (1c54 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    1a7e:	4798      	blx	r3
    1a80:	e6f6      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1a82:	2300      	movs	r3, #0
    1a84:	461a      	mov	r2, r3
    1a86:	4619      	mov	r1, r3
    1a88:	486d      	ldr	r0, [pc, #436]	; (1c40 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1a8a:	6800      	ldr	r0, [r0, #0]
    1a8c:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1a8e:	4b5f      	ldr	r3, [pc, #380]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1a90:	2201      	movs	r2, #1
    1a92:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
    1a94:	2202      	movs	r2, #2
    1a96:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
    1a98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1a9c:	4b6d      	ldr	r3, [pc, #436]	; (1c54 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    1a9e:	4798      	blx	r3
    1aa0:	e6e6      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1aa2:	486d      	ldr	r0, [pc, #436]	; (1c58 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
    1aa4:	4b5f      	ldr	r3, [pc, #380]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1aa6:	4798      	blx	r3
    1aa8:	e6e2      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            DEBUG_PRINT("Expected Response Not Received...");
    1aaa:	486c      	ldr	r0, [pc, #432]	; (1c5c <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
    1aac:	4c5d      	ldr	r4, [pc, #372]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1aae:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1ab0:	485e      	ldr	r0, [pc, #376]	; (1c2c <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
    1ab2:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1ab4:	2200      	movs	r2, #0
    1ab6:	4b55      	ldr	r3, [pc, #340]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1ab8:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    1aba:	4b69      	ldr	r3, [pc, #420]	; (1c60 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
    1abc:	4798      	blx	r3
    1abe:	e7b1      	b.n	1a24 <MdmCnct_ConnectInProgressSubStateMachine+0x2e8>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1ac0:	4868      	ldr	r0, [pc, #416]	; (1c64 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
    1ac2:	4b58      	ldr	r3, [pc, #352]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1ac4:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1ac6:	4b51      	ldr	r3, [pc, #324]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1ac8:	2200      	movs	r2, #0
    1aca:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1acc:	68d8      	ldr	r0, [r3, #12]
    1ace:	4b59      	ldr	r3, [pc, #356]	; (1c34 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    1ad0:	4798      	blx	r3
    1ad2:	e6cd      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1ad4:	4b4d      	ldr	r3, [pc, #308]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1ad6:	789b      	ldrb	r3, [r3, #2]
    1ad8:	b1d3      	cbz	r3, 1b10 <MdmCnct_ConnectInProgressSubStateMachine+0x3d4>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1ada:	2b01      	cmp	r3, #1
    1adc:	f47f aec8 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1ae0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1ae4:	494a      	ldr	r1, [pc, #296]	; (1c10 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
    1ae6:	4b4b      	ldr	r3, [pc, #300]	; (1c14 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
    1ae8:	6818      	ldr	r0, [r3, #0]
    1aea:	4b4b      	ldr	r3, [pc, #300]	; (1c18 <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
    1aec:	4798      	blx	r3
    1aee:	2801      	cmp	r0, #1
    1af0:	f47f aebe 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KPATTERN)
    1af4:	4b45      	ldr	r3, [pc, #276]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1af6:	7a1b      	ldrb	r3, [r3, #8]
    1af8:	2b14      	cmp	r3, #20
    1afa:	d045      	beq.n	1b88 <MdmCnct_ConnectInProgressSubStateMachine+0x44c>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1afc:	4859      	ldr	r0, [pc, #356]	; (1c64 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
    1afe:	4b49      	ldr	r3, [pc, #292]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1b00:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1b02:	4b42      	ldr	r3, [pc, #264]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1b04:	2200      	movs	r2, #0
    1b06:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1b08:	68d8      	ldr	r0, [r3, #12]
    1b0a:	4b4a      	ldr	r3, [pc, #296]	; (1c34 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    1b0c:	4798      	blx	r3
    1b0e:	e6af      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1b10:	4b49      	ldr	r3, [pc, #292]	; (1c38 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1b12:	6818      	ldr	r0, [r3, #0]
    1b14:	4b49      	ldr	r3, [pc, #292]	; (1c3c <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    1b16:	4798      	blx	r3
    1b18:	2800      	cmp	r0, #0
    1b1a:	d131      	bne.n	1b80 <MdmCnct_ConnectInProgressSubStateMachine+0x444>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1b1c:	2100      	movs	r1, #0
    1b1e:	4b48      	ldr	r3, [pc, #288]	; (1c40 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1b20:	6818      	ldr	r0, [r3, #0]
    1b22:	4b48      	ldr	r3, [pc, #288]	; (1c44 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
    1b24:	4798      	blx	r3
    1b26:	2801      	cmp	r0, #1
    1b28:	d003      	beq.n	1b32 <MdmCnct_ConnectInProgressSubStateMachine+0x3f6>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1b2a:	4847      	ldr	r0, [pc, #284]	; (1c48 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
    1b2c:	4b3d      	ldr	r3, [pc, #244]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1b2e:	4798      	blx	r3
    1b30:	e69e      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1b32:	2301      	movs	r3, #1
    1b34:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KPATTERN;
    1b38:	2314      	movs	r3, #20
    1b3a:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1b3e:	2300      	movs	r3, #0
    1b40:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1b42:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1b46:	4669      	mov	r1, sp
    1b48:	483b      	ldr	r0, [pc, #236]	; (1c38 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1b4a:	6800      	ldr	r0, [r0, #0]
    1b4c:	4c3f      	ldr	r4, [pc, #252]	; (1c4c <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
    1b4e:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1b50:	2801      	cmp	r0, #1
    1b52:	d007      	beq.n	1b64 <MdmCnct_ConnectInProgressSubStateMachine+0x428>
                            DEBUG_PRINT("Failed to sent the EOF pattern to Tx Task");
    1b54:	4844      	ldr	r0, [pc, #272]	; (1c68 <MdmCnct_ConnectInProgressSubStateMachine+0x52c>)
    1b56:	4b33      	ldr	r3, [pc, #204]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1b58:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1b5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1b5e:	4b3d      	ldr	r3, [pc, #244]	; (1c54 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    1b60:	4798      	blx	r3
    1b62:	e685      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1b64:	2300      	movs	r3, #0
    1b66:	461a      	mov	r2, r3
    1b68:	4619      	mov	r1, r3
    1b6a:	4835      	ldr	r0, [pc, #212]	; (1c40 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1b6c:	6800      	ldr	r0, [r0, #0]
    1b6e:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1b70:	2201      	movs	r2, #1
    1b72:	4b26      	ldr	r3, [pc, #152]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1b74:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1b76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1b7a:	4b36      	ldr	r3, [pc, #216]	; (1c54 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    1b7c:	4798      	blx	r3
    1b7e:	e677      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1b80:	4835      	ldr	r0, [pc, #212]	; (1c58 <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
    1b82:	4b28      	ldr	r3, [pc, #160]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1b84:	4798      	blx	r3
    1b86:	e673      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        DEBUG_PRINT("EOF Pattern configured");
    1b88:	4838      	ldr	r0, [pc, #224]	; (1c6c <MdmCnct_ConnectInProgressSubStateMachine+0x530>)
    1b8a:	4d26      	ldr	r5, [pc, #152]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1b8c:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1b8e:	4c1f      	ldr	r4, [pc, #124]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1b90:	8961      	ldrh	r1, [r4, #10]
    1b92:	68e0      	ldr	r0, [r4, #12]
    1b94:	4b24      	ldr	r3, [pc, #144]	; (1c28 <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
    1b96:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1b98:	4824      	ldr	r0, [pc, #144]	; (1c2c <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
    1b9a:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_RETRIEVE_APN;
    1b9c:	2304      	movs	r3, #4
    1b9e:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1ba0:	2300      	movs	r3, #0
    1ba2:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1ba4:	68e0      	ldr	r0, [r4, #12]
    1ba6:	4b23      	ldr	r3, [pc, #140]	; (1c34 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    1ba8:	4798      	blx	r3
    1baa:	e661      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1bac:	4b17      	ldr	r3, [pc, #92]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1bae:	789b      	ldrb	r3, [r3, #2]
    1bb0:	b1d3      	cbz	r3, 1be8 <MdmCnct_ConnectInProgressSubStateMachine+0x4ac>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1bb2:	2b01      	cmp	r3, #1
    1bb4:	f47f ae5c 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1bb8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1bbc:	4914      	ldr	r1, [pc, #80]	; (1c10 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
    1bbe:	4b15      	ldr	r3, [pc, #84]	; (1c14 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
    1bc0:	6818      	ldr	r0, [r3, #0]
    1bc2:	4b15      	ldr	r3, [pc, #84]	; (1c18 <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
    1bc4:	4798      	blx	r3
    1bc6:	2801      	cmp	r0, #1
    1bc8:	f47f ae52 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_CGDCONT)
    1bcc:	4b0f      	ldr	r3, [pc, #60]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1bce:	7a1b      	ldrb	r3, [r3, #8]
    1bd0:	2b1c      	cmp	r3, #28
    1bd2:	d078      	beq.n	1cc6 <MdmCnct_ConnectInProgressSubStateMachine+0x58a>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1bd4:	4823      	ldr	r0, [pc, #140]	; (1c64 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
    1bd6:	4b13      	ldr	r3, [pc, #76]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1bd8:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1bda:	4b0c      	ldr	r3, [pc, #48]	; (1c0c <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    1bdc:	2200      	movs	r2, #0
    1bde:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1be0:	68d8      	ldr	r0, [r3, #12]
    1be2:	4b14      	ldr	r3, [pc, #80]	; (1c34 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    1be4:	4798      	blx	r3
    1be6:	e643      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1be8:	4b13      	ldr	r3, [pc, #76]	; (1c38 <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    1bea:	6818      	ldr	r0, [r3, #0]
    1bec:	4b13      	ldr	r3, [pc, #76]	; (1c3c <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    1bee:	4798      	blx	r3
    1bf0:	2800      	cmp	r0, #0
    1bf2:	d164      	bne.n	1cbe <MdmCnct_ConnectInProgressSubStateMachine+0x582>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1bf4:	2100      	movs	r1, #0
    1bf6:	4b12      	ldr	r3, [pc, #72]	; (1c40 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    1bf8:	6818      	ldr	r0, [r3, #0]
    1bfa:	4b12      	ldr	r3, [pc, #72]	; (1c44 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
    1bfc:	4798      	blx	r3
    1bfe:	2801      	cmp	r0, #1
    1c00:	d036      	beq.n	1c70 <MdmCnct_ConnectInProgressSubStateMachine+0x534>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1c02:	4811      	ldr	r0, [pc, #68]	; (1c48 <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
    1c04:	4b07      	ldr	r3, [pc, #28]	; (1c24 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1c06:	4798      	blx	r3
    1c08:	e632      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
    1c0a:	bf00      	nop
    1c0c:	200002f8 	.word	0x200002f8
    1c10:	20000300 	.word	0x20000300
    1c14:	20003564 	.word	0x20003564
    1c18:	0000572d 	.word	0x0000572d
    1c1c:	000016d1 	.word	0x000016d1
    1c20:	00008ab4 	.word	0x00008ab4
    1c24:	000033b9 	.word	0x000033b9
    1c28:	00003375 	.word	0x00003375
    1c2c:	00009394 	.word	0x00009394
    1c30:	00008ac8 	.word	0x00008ac8
    1c34:	000050f5 	.word	0x000050f5
    1c38:	20003588 	.word	0x20003588
    1c3c:	00005a95 	.word	0x00005a95
    1c40:	2000359c 	.word	0x2000359c
    1c44:	000058b5 	.word	0x000058b5
    1c48:	0000789c 	.word	0x0000789c
    1c4c:	0000541d 	.word	0x0000541d
    1c50:	00008a84 	.word	0x00008a84
    1c54:	000060ad 	.word	0x000060ad
    1c58:	000078c8 	.word	0x000078c8
    1c5c:	00008a60 	.word	0x00008a60
    1c60:	00001711 	.word	0x00001711
    1c64:	00008a0c 	.word	0x00008a0c
    1c68:	00008b00 	.word	0x00008b00
    1c6c:	00008b2c 	.word	0x00008b2c
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1c70:	2301      	movs	r3, #1
    1c72:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGDCONT;
    1c76:	231c      	movs	r3, #28
    1c78:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1c7c:	2300      	movs	r3, #0
    1c7e:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1c80:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1c84:	4669      	mov	r1, sp
    1c86:	4893      	ldr	r0, [pc, #588]	; (1ed4 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1c88:	6800      	ldr	r0, [r0, #0]
    1c8a:	4c93      	ldr	r4, [pc, #588]	; (1ed8 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1c8c:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1c8e:	2801      	cmp	r0, #1
    1c90:	d007      	beq.n	1ca2 <MdmCnct_ConnectInProgressSubStateMachine+0x566>
                            DEBUG_PRINT("Failed to sent the retrieve APN command to Tx Task");
    1c92:	4892      	ldr	r0, [pc, #584]	; (1edc <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1c94:	4b92      	ldr	r3, [pc, #584]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1c96:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1c98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1c9c:	4b91      	ldr	r3, [pc, #580]	; (1ee4 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1c9e:	4798      	blx	r3
    1ca0:	e5e6      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1ca2:	2300      	movs	r3, #0
    1ca4:	461a      	mov	r2, r3
    1ca6:	4619      	mov	r1, r3
    1ca8:	488f      	ldr	r0, [pc, #572]	; (1ee8 <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1caa:	6800      	ldr	r0, [r0, #0]
    1cac:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1cae:	2201      	movs	r2, #1
    1cb0:	4b8e      	ldr	r3, [pc, #568]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1cb2:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1cb8:	4b8a      	ldr	r3, [pc, #552]	; (1ee4 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1cba:	4798      	blx	r3
    1cbc:	e5d8      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1cbe:	488c      	ldr	r0, [pc, #560]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1cc0:	4b87      	ldr	r3, [pc, #540]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1cc2:	4798      	blx	r3
    1cc4:	e5d4      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        DEBUG_PRINT("Retrieved APN string");
    1cc6:	488b      	ldr	r0, [pc, #556]	; (1ef4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
    1cc8:	4b85      	ldr	r3, [pc, #532]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1cca:	4798      	blx	r3
                        retrieveAPNStringFromResponse(ConnectionResponse.response);
    1ccc:	4c87      	ldr	r4, [pc, #540]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1cce:	68e0      	ldr	r0, [r4, #12]
    1cd0:	4b89      	ldr	r3, [pc, #548]	; (1ef8 <MdmCnct_ConnectInProgressSubStateMachine+0x7bc>)
    1cd2:	4798      	blx	r3
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_ACCESS_POINT;
    1cd4:	2305      	movs	r3, #5
    1cd6:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1cd8:	2300      	movs	r3, #0
    1cda:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1cdc:	68e0      	ldr	r0, [r4, #12]
    1cde:	4b87      	ldr	r3, [pc, #540]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1ce0:	4798      	blx	r3
    1ce2:	e5c5      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1ce4:	4b81      	ldr	r3, [pc, #516]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1ce6:	789b      	ldrb	r3, [r3, #2]
    1ce8:	b1d3      	cbz	r3, 1d20 <MdmCnct_ConnectInProgressSubStateMachine+0x5e4>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1cea:	2b01      	cmp	r3, #1
    1cec:	f47f adc0 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1cf0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1cf4:	4982      	ldr	r1, [pc, #520]	; (1f00 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    1cf6:	4b83      	ldr	r3, [pc, #524]	; (1f04 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1cf8:	6818      	ldr	r0, [r3, #0]
    1cfa:	4b83      	ldr	r3, [pc, #524]	; (1f08 <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    1cfc:	4798      	blx	r3
    1cfe:	2801      	cmp	r0, #1
    1d00:	f47f adb6 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXCFG)
    1d04:	4b79      	ldr	r3, [pc, #484]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1d06:	7a1b      	ldrb	r3, [r3, #8]
    1d08:	2b15      	cmp	r3, #21
    1d0a:	d045      	beq.n	1d98 <MdmCnct_ConnectInProgressSubStateMachine+0x65c>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1d0c:	487f      	ldr	r0, [pc, #508]	; (1f0c <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    1d0e:	4b74      	ldr	r3, [pc, #464]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1d10:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1d12:	4b76      	ldr	r3, [pc, #472]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1d14:	2200      	movs	r2, #0
    1d16:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1d18:	68d8      	ldr	r0, [r3, #12]
    1d1a:	4b78      	ldr	r3, [pc, #480]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1d1c:	4798      	blx	r3
    1d1e:	e5a7      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1d20:	4b6c      	ldr	r3, [pc, #432]	; (1ed4 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1d22:	6818      	ldr	r0, [r3, #0]
    1d24:	4b7a      	ldr	r3, [pc, #488]	; (1f10 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    1d26:	4798      	blx	r3
    1d28:	2800      	cmp	r0, #0
    1d2a:	d131      	bne.n	1d90 <MdmCnct_ConnectInProgressSubStateMachine+0x654>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1d2c:	2100      	movs	r1, #0
    1d2e:	4b6e      	ldr	r3, [pc, #440]	; (1ee8 <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1d30:	6818      	ldr	r0, [r3, #0]
    1d32:	4b78      	ldr	r3, [pc, #480]	; (1f14 <MdmCnct_ConnectInProgressSubStateMachine+0x7d8>)
    1d34:	4798      	blx	r3
    1d36:	2801      	cmp	r0, #1
    1d38:	d003      	beq.n	1d42 <MdmCnct_ConnectInProgressSubStateMachine+0x606>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1d3a:	4877      	ldr	r0, [pc, #476]	; (1f18 <MdmCnct_ConnectInProgressSubStateMachine+0x7dc>)
    1d3c:	4b68      	ldr	r3, [pc, #416]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1d3e:	4798      	blx	r3
    1d40:	e596      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1d42:	2301      	movs	r3, #1
    1d44:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXCFG;
    1d48:	2315      	movs	r3, #21
    1d4a:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1d4e:	2300      	movs	r3, #0
    1d50:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1d52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1d56:	4669      	mov	r1, sp
    1d58:	485e      	ldr	r0, [pc, #376]	; (1ed4 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1d5a:	6800      	ldr	r0, [r0, #0]
    1d5c:	4c5e      	ldr	r4, [pc, #376]	; (1ed8 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1d5e:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1d60:	2801      	cmp	r0, #1
    1d62:	d007      	beq.n	1d74 <MdmCnct_ConnectInProgressSubStateMachine+0x638>
                            DEBUG_PRINT("Failed to sent access point cmd to Tx Task");
    1d64:	486d      	ldr	r0, [pc, #436]	; (1f1c <MdmCnct_ConnectInProgressSubStateMachine+0x7e0>)
    1d66:	4b5e      	ldr	r3, [pc, #376]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1d68:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1d6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1d6e:	4b5d      	ldr	r3, [pc, #372]	; (1ee4 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1d70:	4798      	blx	r3
    1d72:	e57d      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1d74:	2300      	movs	r3, #0
    1d76:	461a      	mov	r2, r3
    1d78:	4619      	mov	r1, r3
    1d7a:	485b      	ldr	r0, [pc, #364]	; (1ee8 <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1d7c:	6800      	ldr	r0, [r0, #0]
    1d7e:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1d80:	2201      	movs	r2, #1
    1d82:	4b5a      	ldr	r3, [pc, #360]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1d84:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1d86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1d8a:	4b56      	ldr	r3, [pc, #344]	; (1ee4 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1d8c:	4798      	blx	r3
    1d8e:	e56f      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1d90:	4857      	ldr	r0, [pc, #348]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1d92:	4b53      	ldr	r3, [pc, #332]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1d94:	4798      	blx	r3
    1d96:	e56b      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        DEBUG_PRINT("Access Point configured");
    1d98:	4861      	ldr	r0, [pc, #388]	; (1f20 <MdmCnct_ConnectInProgressSubStateMachine+0x7e4>)
    1d9a:	4d51      	ldr	r5, [pc, #324]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1d9c:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1d9e:	4c53      	ldr	r4, [pc, #332]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1da0:	8961      	ldrh	r1, [r4, #10]
    1da2:	68e0      	ldr	r0, [r4, #12]
    1da4:	4b5f      	ldr	r3, [pc, #380]	; (1f24 <MdmCnct_ConnectInProgressSubStateMachine+0x7e8>)
    1da6:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1da8:	485f      	ldr	r0, [pc, #380]	; (1f28 <MdmCnct_ConnectInProgressSubStateMachine+0x7ec>)
    1daa:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_CONNECT_TIMERS;
    1dac:	2306      	movs	r3, #6
    1dae:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1db0:	2300      	movs	r3, #0
    1db2:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1db4:	68e0      	ldr	r0, [r4, #12]
    1db6:	4b51      	ldr	r3, [pc, #324]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1db8:	4798      	blx	r3
    1dba:	e559      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1dbc:	4b4b      	ldr	r3, [pc, #300]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1dbe:	789b      	ldrb	r3, [r3, #2]
    1dc0:	b1d3      	cbz	r3, 1df8 <MdmCnct_ConnectInProgressSubStateMachine+0x6bc>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1dc2:	2b01      	cmp	r3, #1
    1dc4:	f47f ad54 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1dc8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1dcc:	494c      	ldr	r1, [pc, #304]	; (1f00 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    1dce:	4b4d      	ldr	r3, [pc, #308]	; (1f04 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1dd0:	6818      	ldr	r0, [r3, #0]
    1dd2:	4b4d      	ldr	r3, [pc, #308]	; (1f08 <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    1dd4:	4798      	blx	r3
    1dd6:	2801      	cmp	r0, #1
    1dd8:	f47f ad4a 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXTIMER)
    1ddc:	4b43      	ldr	r3, [pc, #268]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1dde:	7a1b      	ldrb	r3, [r3, #8]
    1de0:	2b16      	cmp	r3, #22
    1de2:	d045      	beq.n	1e70 <MdmCnct_ConnectInProgressSubStateMachine+0x734>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1de4:	4849      	ldr	r0, [pc, #292]	; (1f0c <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    1de6:	4b3e      	ldr	r3, [pc, #248]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1de8:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1dea:	4b40      	ldr	r3, [pc, #256]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1dec:	2200      	movs	r2, #0
    1dee:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1df0:	68d8      	ldr	r0, [r3, #12]
    1df2:	4b42      	ldr	r3, [pc, #264]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1df4:	4798      	blx	r3
    1df6:	e53b      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1df8:	4b36      	ldr	r3, [pc, #216]	; (1ed4 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1dfa:	6818      	ldr	r0, [r3, #0]
    1dfc:	4b44      	ldr	r3, [pc, #272]	; (1f10 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    1dfe:	4798      	blx	r3
    1e00:	2800      	cmp	r0, #0
    1e02:	d131      	bne.n	1e68 <MdmCnct_ConnectInProgressSubStateMachine+0x72c>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1e04:	2100      	movs	r1, #0
    1e06:	4b38      	ldr	r3, [pc, #224]	; (1ee8 <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1e08:	6818      	ldr	r0, [r3, #0]
    1e0a:	4b42      	ldr	r3, [pc, #264]	; (1f14 <MdmCnct_ConnectInProgressSubStateMachine+0x7d8>)
    1e0c:	4798      	blx	r3
    1e0e:	2801      	cmp	r0, #1
    1e10:	d003      	beq.n	1e1a <MdmCnct_ConnectInProgressSubStateMachine+0x6de>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1e12:	4841      	ldr	r0, [pc, #260]	; (1f18 <MdmCnct_ConnectInProgressSubStateMachine+0x7dc>)
    1e14:	4b32      	ldr	r3, [pc, #200]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1e16:	4798      	blx	r3
    1e18:	e52a      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1e1a:	2301      	movs	r3, #1
    1e1c:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXTIMER;
    1e20:	2316      	movs	r3, #22
    1e22:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1e26:	2300      	movs	r3, #0
    1e28:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1e2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1e2e:	4669      	mov	r1, sp
    1e30:	4828      	ldr	r0, [pc, #160]	; (1ed4 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1e32:	6800      	ldr	r0, [r0, #0]
    1e34:	4c28      	ldr	r4, [pc, #160]	; (1ed8 <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1e36:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1e38:	2801      	cmp	r0, #1
    1e3a:	d007      	beq.n	1e4c <MdmCnct_ConnectInProgressSubStateMachine+0x710>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    1e3c:	483b      	ldr	r0, [pc, #236]	; (1f2c <MdmCnct_ConnectInProgressSubStateMachine+0x7f0>)
    1e3e:	4b28      	ldr	r3, [pc, #160]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1e40:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1e42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1e46:	4b27      	ldr	r3, [pc, #156]	; (1ee4 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1e48:	4798      	blx	r3
    1e4a:	e511      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1e4c:	2300      	movs	r3, #0
    1e4e:	461a      	mov	r2, r3
    1e50:	4619      	mov	r1, r3
    1e52:	4825      	ldr	r0, [pc, #148]	; (1ee8 <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1e54:	6800      	ldr	r0, [r0, #0]
    1e56:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1e58:	2201      	movs	r2, #1
    1e5a:	4b24      	ldr	r3, [pc, #144]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1e5c:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1e5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1e62:	4b20      	ldr	r3, [pc, #128]	; (1ee4 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1e64:	4798      	blx	r3
    1e66:	e503      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1e68:	4821      	ldr	r0, [pc, #132]	; (1ef0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    1e6a:	4b1d      	ldr	r3, [pc, #116]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1e6c:	4798      	blx	r3
    1e6e:	e4ff      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        DEBUG_PRINT("Connection Timers configured");
    1e70:	482f      	ldr	r0, [pc, #188]	; (1f30 <MdmCnct_ConnectInProgressSubStateMachine+0x7f4>)
    1e72:	4d1b      	ldr	r5, [pc, #108]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1e74:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1e76:	4c1d      	ldr	r4, [pc, #116]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1e78:	8961      	ldrh	r1, [r4, #10]
    1e7a:	68e0      	ldr	r0, [r4, #12]
    1e7c:	4b29      	ldr	r3, [pc, #164]	; (1f24 <MdmCnct_ConnectInProgressSubStateMachine+0x7e8>)
    1e7e:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1e80:	4829      	ldr	r0, [pc, #164]	; (1f28 <MdmCnct_ConnectInProgressSubStateMachine+0x7ec>)
    1e82:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_SERVER_ADDRESS;
    1e84:	2307      	movs	r3, #7
    1e86:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1e88:	2300      	movs	r3, #0
    1e8a:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1e8c:	68e0      	ldr	r0, [r4, #12]
    1e8e:	4b1b      	ldr	r3, [pc, #108]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1e90:	4798      	blx	r3
    1e92:	e4ed      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1e94:	4b15      	ldr	r3, [pc, #84]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1e96:	789b      	ldrb	r3, [r3, #2]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d04b      	beq.n	1f34 <MdmCnct_ConnectInProgressSubStateMachine+0x7f8>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1e9c:	2b01      	cmp	r3, #1
    1e9e:	f47f ace7 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1ea2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1ea6:	4916      	ldr	r1, [pc, #88]	; (1f00 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    1ea8:	4b16      	ldr	r3, [pc, #88]	; (1f04 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    1eaa:	6818      	ldr	r0, [r3, #0]
    1eac:	4b16      	ldr	r3, [pc, #88]	; (1f08 <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    1eae:	4798      	blx	r3
    1eb0:	2801      	cmp	r0, #1
    1eb2:	f47f acdd 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_CFG)
    1eb6:	4b0d      	ldr	r3, [pc, #52]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1eb8:	7a1b      	ldrb	r3, [r3, #8]
    1eba:	2b09      	cmp	r3, #9
    1ebc:	d076      	beq.n	1fac <MdmCnct_ConnectInProgressSubStateMachine+0x870>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1ebe:	4813      	ldr	r0, [pc, #76]	; (1f0c <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    1ec0:	4b07      	ldr	r3, [pc, #28]	; (1ee0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1ec2:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1ec4:	4b09      	ldr	r3, [pc, #36]	; (1eec <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1ec6:	2200      	movs	r2, #0
    1ec8:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1eca:	68d8      	ldr	r0, [r3, #12]
    1ecc:	4b0b      	ldr	r3, [pc, #44]	; (1efc <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    1ece:	4798      	blx	r3
    1ed0:	e4ce      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
    1ed2:	bf00      	nop
    1ed4:	20003588 	.word	0x20003588
    1ed8:	0000541d 	.word	0x0000541d
    1edc:	00008b44 	.word	0x00008b44
    1ee0:	000033b9 	.word	0x000033b9
    1ee4:	000060ad 	.word	0x000060ad
    1ee8:	2000359c 	.word	0x2000359c
    1eec:	200002f8 	.word	0x200002f8
    1ef0:	000078c8 	.word	0x000078c8
    1ef4:	00008b78 	.word	0x00008b78
    1ef8:	00001539 	.word	0x00001539
    1efc:	000050f5 	.word	0x000050f5
    1f00:	20000300 	.word	0x20000300
    1f04:	20003564 	.word	0x20003564
    1f08:	0000572d 	.word	0x0000572d
    1f0c:	00008a0c 	.word	0x00008a0c
    1f10:	00005a95 	.word	0x00005a95
    1f14:	000058b5 	.word	0x000058b5
    1f18:	0000789c 	.word	0x0000789c
    1f1c:	00008b90 	.word	0x00008b90
    1f20:	00008bbc 	.word	0x00008bbc
    1f24:	00003375 	.word	0x00003375
    1f28:	00009394 	.word	0x00009394
    1f2c:	00008bd4 	.word	0x00008bd4
    1f30:	00008c04 	.word	0x00008c04
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1f34:	4b8a      	ldr	r3, [pc, #552]	; (2160 <MdmCnct_ConnectInProgressSubStateMachine+0xa24>)
    1f36:	6818      	ldr	r0, [r3, #0]
    1f38:	4b8a      	ldr	r3, [pc, #552]	; (2164 <MdmCnct_ConnectInProgressSubStateMachine+0xa28>)
    1f3a:	4798      	blx	r3
    1f3c:	2800      	cmp	r0, #0
    1f3e:	d131      	bne.n	1fa4 <MdmCnct_ConnectInProgressSubStateMachine+0x868>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1f40:	2100      	movs	r1, #0
    1f42:	4b89      	ldr	r3, [pc, #548]	; (2168 <MdmCnct_ConnectInProgressSubStateMachine+0xa2c>)
    1f44:	6818      	ldr	r0, [r3, #0]
    1f46:	4b89      	ldr	r3, [pc, #548]	; (216c <MdmCnct_ConnectInProgressSubStateMachine+0xa30>)
    1f48:	4798      	blx	r3
    1f4a:	2801      	cmp	r0, #1
    1f4c:	d003      	beq.n	1f56 <MdmCnct_ConnectInProgressSubStateMachine+0x81a>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1f4e:	4888      	ldr	r0, [pc, #544]	; (2170 <MdmCnct_ConnectInProgressSubStateMachine+0xa34>)
    1f50:	4b88      	ldr	r3, [pc, #544]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1f52:	4798      	blx	r3
    1f54:	e48c      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1f56:	2301      	movs	r3, #1
    1f58:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_CFG;
    1f5c:	2309      	movs	r3, #9
    1f5e:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1f62:	2300      	movs	r3, #0
    1f64:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1f66:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1f6a:	4669      	mov	r1, sp
    1f6c:	487c      	ldr	r0, [pc, #496]	; (2160 <MdmCnct_ConnectInProgressSubStateMachine+0xa24>)
    1f6e:	6800      	ldr	r0, [r0, #0]
    1f70:	4c81      	ldr	r4, [pc, #516]	; (2178 <MdmCnct_ConnectInProgressSubStateMachine+0xa3c>)
    1f72:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1f74:	2801      	cmp	r0, #1
    1f76:	d007      	beq.n	1f88 <MdmCnct_ConnectInProgressSubStateMachine+0x84c>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    1f78:	4880      	ldr	r0, [pc, #512]	; (217c <MdmCnct_ConnectInProgressSubStateMachine+0xa40>)
    1f7a:	4b7e      	ldr	r3, [pc, #504]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1f7c:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1f7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1f82:	4b7f      	ldr	r3, [pc, #508]	; (2180 <MdmCnct_ConnectInProgressSubStateMachine+0xa44>)
    1f84:	4798      	blx	r3
    1f86:	e473      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1f88:	2300      	movs	r3, #0
    1f8a:	461a      	mov	r2, r3
    1f8c:	4619      	mov	r1, r3
    1f8e:	4876      	ldr	r0, [pc, #472]	; (2168 <MdmCnct_ConnectInProgressSubStateMachine+0xa2c>)
    1f90:	6800      	ldr	r0, [r0, #0]
    1f92:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1f94:	2201      	movs	r2, #1
    1f96:	4b7b      	ldr	r3, [pc, #492]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    1f98:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1f9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1f9e:	4b78      	ldr	r3, [pc, #480]	; (2180 <MdmCnct_ConnectInProgressSubStateMachine+0xa44>)
    1fa0:	4798      	blx	r3
    1fa2:	e465      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1fa4:	4878      	ldr	r0, [pc, #480]	; (2188 <MdmCnct_ConnectInProgressSubStateMachine+0xa4c>)
    1fa6:	4b73      	ldr	r3, [pc, #460]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1fa8:	4798      	blx	r3
    1faa:	e461      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        MdmCnct_ExtractSessionIdFromConfigResponse(ConnectionResponse.response);
    1fac:	4c75      	ldr	r4, [pc, #468]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    1fae:	68e0      	ldr	r0, [r4, #12]
    currentSessionId = cfgResponse[SESSION_ID_POSITION];
    1fb0:	7ac3      	ldrb	r3, [r0, #11]
    1fb2:	7423      	strb	r3, [r4, #16]
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1fb4:	8961      	ldrh	r1, [r4, #10]
    1fb6:	4b75      	ldr	r3, [pc, #468]	; (218c <MdmCnct_ConnectInProgressSubStateMachine+0xa50>)
    1fb8:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1fba:	4875      	ldr	r0, [pc, #468]	; (2190 <MdmCnct_ConnectInProgressSubStateMachine+0xa54>)
    1fbc:	4b6d      	ldr	r3, [pc, #436]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1fbe:	4798      	blx	r3
    connectionStatus = cfgResponse[CONNECT_STATUS_POSITION];
    1fc0:	68e3      	ldr	r3, [r4, #12]
    switch(connectionStatus)
    1fc2:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    1fc6:	3b30      	subs	r3, #48	; 0x30
    1fc8:	2b06      	cmp	r3, #6
    1fca:	d808      	bhi.n	1fde <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
    1fcc:	e8df f003 	tbb	[pc, r3]
    1fd0:	2b271604 	.word	0x2b271604
    1fd4:	332f      	.short	0x332f
    1fd6:	37          	.byte	0x37
    1fd7:	00          	.byte	0x00
            DEBUG_PRINT("Connection Status : DISCONNECTED DUE TO NETWORK");
    1fd8:	486e      	ldr	r0, [pc, #440]	; (2194 <MdmCnct_ConnectInProgressSubStateMachine+0xa58>)
    1fda:	4b66      	ldr	r3, [pc, #408]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1fdc:	4798      	blx	r3
                            DEBUG_PRINT("Error : Connection Failure");
    1fde:	486e      	ldr	r0, [pc, #440]	; (2198 <MdmCnct_ConnectInProgressSubStateMachine+0xa5c>)
    1fe0:	4c64      	ldr	r4, [pc, #400]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    1fe2:	47a0      	blx	r4
                            DEBUG_PRINT("Restarting the connection initialization...");
    1fe4:	486d      	ldr	r0, [pc, #436]	; (219c <MdmCnct_ConnectInProgressSubStateMachine+0xa60>)
    1fe6:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1fe8:	4869      	ldr	r0, [pc, #420]	; (2190 <MdmCnct_ConnectInProgressSubStateMachine+0xa54>)
    1fea:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1fec:	4b65      	ldr	r3, [pc, #404]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    1fee:	2200      	movs	r2, #0
    1ff0:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    1ff2:	2207      	movs	r2, #7
    1ff4:	70da      	strb	r2, [r3, #3]
                            gHttpConnectionState =  MDM_HTTP_CONNECTED;
    1ff6:	2202      	movs	r2, #2
    1ff8:	701a      	strb	r2, [r3, #0]
    1ffa:	e00b      	b.n	2014 <MdmCnct_ConnectInProgressSubStateMachine+0x8d8>
            DEBUG_PRINT("Connection Status : CONNECTED");
    1ffc:	4868      	ldr	r0, [pc, #416]	; (21a0 <MdmCnct_ConnectInProgressSubStateMachine+0xa64>)
    1ffe:	4c5d      	ldr	r4, [pc, #372]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2000:	47a0      	blx	r4
                            DEBUG_PRINT("Connection successful...Cloud Server configured");
    2002:	4868      	ldr	r0, [pc, #416]	; (21a4 <MdmCnct_ConnectInProgressSubStateMachine+0xa68>)
    2004:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    2006:	4862      	ldr	r0, [pc, #392]	; (2190 <MdmCnct_ConnectInProgressSubStateMachine+0xa54>)
    2008:	47a0      	blx	r4
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_HTTP_HEADER;
    200a:	4b5e      	ldr	r3, [pc, #376]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    200c:	2208      	movs	r2, #8
    200e:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2010:	2200      	movs	r2, #0
    2012:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    2014:	4b5b      	ldr	r3, [pc, #364]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    2016:	68d8      	ldr	r0, [r3, #12]
    2018:	4b63      	ldr	r3, [pc, #396]	; (21a8 <MdmCnct_ConnectInProgressSubStateMachine+0xa6c>)
    201a:	4798      	blx	r3
    201c:	e428      	b.n	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
            DEBUG_PRINT("Connection Status : FAILED TO CONNECT");
    201e:	4863      	ldr	r0, [pc, #396]	; (21ac <MdmCnct_ConnectInProgressSubStateMachine+0xa70>)
    2020:	4b54      	ldr	r3, [pc, #336]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2022:	4798      	blx	r3
    2024:	e7db      	b.n	1fde <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
            DEBUG_PRINT("Connection Status : CONNECTION CLOSED");
    2026:	4862      	ldr	r0, [pc, #392]	; (21b0 <MdmCnct_ConnectInProgressSubStateMachine+0xa74>)
    2028:	4b52      	ldr	r3, [pc, #328]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    202a:	4798      	blx	r3
    202c:	e7d7      	b.n	1fde <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
            DEBUG_PRINT("Connection Status : CONNECTION IN PROGRESS");
    202e:	4861      	ldr	r0, [pc, #388]	; (21b4 <MdmCnct_ConnectInProgressSubStateMachine+0xa78>)
    2030:	4b50      	ldr	r3, [pc, #320]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2032:	4798      	blx	r3
    2034:	e7d3      	b.n	1fde <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
            DEBUG_PRINT("Connection Status : IDLE TIMER STARTED FOR DISCONNECTION");
    2036:	4860      	ldr	r0, [pc, #384]	; (21b8 <MdmCnct_ConnectInProgressSubStateMachine+0xa7c>)
    2038:	4b4e      	ldr	r3, [pc, #312]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    203a:	4798      	blx	r3
    203c:	e7cf      	b.n	1fde <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
            DEBUG_PRINT("Connection Status : IDLE TIMER CANCELLED");
    203e:	485f      	ldr	r0, [pc, #380]	; (21bc <MdmCnct_ConnectInProgressSubStateMachine+0xa80>)
    2040:	4b4c      	ldr	r3, [pc, #304]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2042:	4798      	blx	r3
    2044:	e7cb      	b.n	1fde <MdmCnct_ConnectInProgressSubStateMachine+0x8a2>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    2046:	4b4f      	ldr	r3, [pc, #316]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    2048:	789b      	ldrb	r3, [r3, #2]
    204a:	b1db      	cbz	r3, 2084 <MdmCnct_ConnectInProgressSubStateMachine+0x948>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    204c:	2b01      	cmp	r3, #1
    204e:	f47f ac0f 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    2052:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    2056:	495a      	ldr	r1, [pc, #360]	; (21c0 <MdmCnct_ConnectInProgressSubStateMachine+0xa84>)
    2058:	4b5a      	ldr	r3, [pc, #360]	; (21c4 <MdmCnct_ConnectInProgressSubStateMachine+0xa88>)
    205a:	6818      	ldr	r0, [r3, #0]
    205c:	4b5a      	ldr	r3, [pc, #360]	; (21c8 <MdmCnct_ConnectInProgressSubStateMachine+0xa8c>)
    205e:	4798      	blx	r3
    2060:	2801      	cmp	r0, #1
    2062:	f47f ac05 	bne.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_HEADER)
    2066:	4b47      	ldr	r3, [pc, #284]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    2068:	7a1b      	ldrb	r3, [r3, #8]
    206a:	2b17      	cmp	r3, #23
    206c:	d04d      	beq.n	210a <MdmCnct_ConnectInProgressSubStateMachine+0x9ce>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    206e:	4857      	ldr	r0, [pc, #348]	; (21cc <MdmCnct_ConnectInProgressSubStateMachine+0xa90>)
    2070:	4b40      	ldr	r3, [pc, #256]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2072:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2074:	4b43      	ldr	r3, [pc, #268]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    2076:	2200      	movs	r2, #0
    2078:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    207a:	68d8      	ldr	r0, [r3, #12]
    207c:	4b4a      	ldr	r3, [pc, #296]	; (21a8 <MdmCnct_ConnectInProgressSubStateMachine+0xa6c>)
    207e:	4798      	blx	r3
}
    2080:	f7ff bbf6 	b.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                buildHttpHeaderWithActiveSessionID(&currentSessionId);
    2084:	4852      	ldr	r0, [pc, #328]	; (21d0 <MdmCnct_ConnectInProgressSubStateMachine+0xa94>)
    2086:	4b53      	ldr	r3, [pc, #332]	; (21d4 <MdmCnct_ConnectInProgressSubStateMachine+0xa98>)
    2088:	4798      	blx	r3
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    208a:	4b35      	ldr	r3, [pc, #212]	; (2160 <MdmCnct_ConnectInProgressSubStateMachine+0xa24>)
    208c:	6818      	ldr	r0, [r3, #0]
    208e:	4b35      	ldr	r3, [pc, #212]	; (2164 <MdmCnct_ConnectInProgressSubStateMachine+0xa28>)
    2090:	4798      	blx	r3
    2092:	2800      	cmp	r0, #0
    2094:	d134      	bne.n	2100 <MdmCnct_ConnectInProgressSubStateMachine+0x9c4>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    2096:	2100      	movs	r1, #0
    2098:	4b33      	ldr	r3, [pc, #204]	; (2168 <MdmCnct_ConnectInProgressSubStateMachine+0xa2c>)
    209a:	6818      	ldr	r0, [r3, #0]
    209c:	4b33      	ldr	r3, [pc, #204]	; (216c <MdmCnct_ConnectInProgressSubStateMachine+0xa30>)
    209e:	4798      	blx	r3
    20a0:	2801      	cmp	r0, #1
    20a2:	d004      	beq.n	20ae <MdmCnct_ConnectInProgressSubStateMachine+0x972>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    20a4:	4832      	ldr	r0, [pc, #200]	; (2170 <MdmCnct_ConnectInProgressSubStateMachine+0xa34>)
    20a6:	4b33      	ldr	r3, [pc, #204]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    20a8:	4798      	blx	r3
    20aa:	f7ff bbe1 	b.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    20ae:	2301      	movs	r3, #1
    20b0:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_HEADER;
    20b4:	2317      	movs	r3, #23
    20b6:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    20ba:	2300      	movs	r3, #0
    20bc:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    20be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    20c2:	4669      	mov	r1, sp
    20c4:	4826      	ldr	r0, [pc, #152]	; (2160 <MdmCnct_ConnectInProgressSubStateMachine+0xa24>)
    20c6:	6800      	ldr	r0, [r0, #0]
    20c8:	4c2b      	ldr	r4, [pc, #172]	; (2178 <MdmCnct_ConnectInProgressSubStateMachine+0xa3c>)
    20ca:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    20cc:	2801      	cmp	r0, #1
    20ce:	d008      	beq.n	20e2 <MdmCnct_ConnectInProgressSubStateMachine+0x9a6>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    20d0:	482a      	ldr	r0, [pc, #168]	; (217c <MdmCnct_ConnectInProgressSubStateMachine+0xa40>)
    20d2:	4b28      	ldr	r3, [pc, #160]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    20d4:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    20d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    20da:	4b29      	ldr	r3, [pc, #164]	; (2180 <MdmCnct_ConnectInProgressSubStateMachine+0xa44>)
    20dc:	4798      	blx	r3
    20de:	f7ff bbc7 	b.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    20e2:	2300      	movs	r3, #0
    20e4:	461a      	mov	r2, r3
    20e6:	4619      	mov	r1, r3
    20e8:	481f      	ldr	r0, [pc, #124]	; (2168 <MdmCnct_ConnectInProgressSubStateMachine+0xa2c>)
    20ea:	6800      	ldr	r0, [r0, #0]
    20ec:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    20ee:	2201      	movs	r2, #1
    20f0:	4b24      	ldr	r3, [pc, #144]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    20f2:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    20f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    20f8:	4b21      	ldr	r3, [pc, #132]	; (2180 <MdmCnct_ConnectInProgressSubStateMachine+0xa44>)
    20fa:	4798      	blx	r3
    20fc:	f7ff bbb8 	b.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                    DEBUG_PRINT("Transmit Queue is not empty");
    2100:	4821      	ldr	r0, [pc, #132]	; (2188 <MdmCnct_ConnectInProgressSubStateMachine+0xa4c>)
    2102:	4b1c      	ldr	r3, [pc, #112]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2104:	4798      	blx	r3
    2106:	f7ff bbb3 	b.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    210a:	4c1e      	ldr	r4, [pc, #120]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    210c:	8961      	ldrh	r1, [r4, #10]
    210e:	68e0      	ldr	r0, [r4, #12]
    2110:	4b1e      	ldr	r3, [pc, #120]	; (218c <MdmCnct_ConnectInProgressSubStateMachine+0xa50>)
    2112:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    2114:	481e      	ldr	r0, [pc, #120]	; (2190 <MdmCnct_ConnectInProgressSubStateMachine+0xa54>)
    2116:	4b17      	ldr	r3, [pc, #92]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2118:	4798      	blx	r3
    if(0==memcmp(response,"CONNECT",7))
    211a:	2207      	movs	r2, #7
    211c:	492e      	ldr	r1, [pc, #184]	; (21d8 <MdmCnct_ConnectInProgressSubStateMachine+0xa9c>)
    211e:	68e0      	ldr	r0, [r4, #12]
    2120:	4b2e      	ldr	r3, [pc, #184]	; (21dc <MdmCnct_ConnectInProgressSubStateMachine+0xaa0>)
    2122:	4798      	blx	r3
    2124:	b140      	cbz	r0, 2138 <MdmCnct_ConnectInProgressSubStateMachine+0x9fc>
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2126:	2200      	movs	r2, #0
    2128:	4b16      	ldr	r3, [pc, #88]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    212a:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    212c:	4b15      	ldr	r3, [pc, #84]	; (2184 <MdmCnct_ConnectInProgressSubStateMachine+0xa48>)
    212e:	68d8      	ldr	r0, [r3, #12]
    2130:	4b1d      	ldr	r3, [pc, #116]	; (21a8 <MdmCnct_ConnectInProgressSubStateMachine+0xa6c>)
    2132:	4798      	blx	r3
    2134:	f7ff bb9c 	b.w	1870 <MdmCnct_ConnectInProgressSubStateMachine+0x134>
        mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
    2138:	2110      	movs	r1, #16
    213a:	4829      	ldr	r0, [pc, #164]	; (21e0 <MdmCnct_ConnectInProgressSubStateMachine+0xaa4>)
    213c:	4b29      	ldr	r3, [pc, #164]	; (21e4 <MdmCnct_ConnectInProgressSubStateMachine+0xaa8>)
    213e:	4798      	blx	r3
        mdmCtrlr_FlushRxBuffer();
    2140:	4b29      	ldr	r3, [pc, #164]	; (21e8 <MdmCnct_ConnectInProgressSubStateMachine+0xaac>)
    2142:	4798      	blx	r3
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    2144:	2200      	movs	r2, #0
    2146:	7062      	strb	r2, [r4, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2148:	70a2      	strb	r2, [r4, #2]
                            gHttpConnectionState = MDM_HTTP_CONNECTED;
    214a:	2102      	movs	r1, #2
    214c:	7021      	strb	r1, [r4, #0]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    214e:	70e2      	strb	r2, [r4, #3]
                            DEBUG_PRINT("\r\n");
    2150:	480f      	ldr	r0, [pc, #60]	; (2190 <MdmCnct_ConnectInProgressSubStateMachine+0xa54>)
    2152:	4b08      	ldr	r3, [pc, #32]	; (2174 <MdmCnct_ConnectInProgressSubStateMachine+0xa38>)
    2154:	4798      	blx	r3
                            vTaskDelay(PacketTransmitDelayMs);
    2156:	2064      	movs	r0, #100	; 0x64
    2158:	4b09      	ldr	r3, [pc, #36]	; (2180 <MdmCnct_ConnectInProgressSubStateMachine+0xa44>)
    215a:	4798      	blx	r3
    215c:	e7e6      	b.n	212c <MdmCnct_ConnectInProgressSubStateMachine+0x9f0>
    215e:	bf00      	nop
    2160:	20003588 	.word	0x20003588
    2164:	00005a95 	.word	0x00005a95
    2168:	2000359c 	.word	0x2000359c
    216c:	000058b5 	.word	0x000058b5
    2170:	0000789c 	.word	0x0000789c
    2174:	000033b9 	.word	0x000033b9
    2178:	0000541d 	.word	0x0000541d
    217c:	00008bd4 	.word	0x00008bd4
    2180:	000060ad 	.word	0x000060ad
    2184:	200002f8 	.word	0x200002f8
    2188:	000078c8 	.word	0x000078c8
    218c:	00003375 	.word	0x00003375
    2190:	00009394 	.word	0x00009394
    2194:	00008c24 	.word	0x00008c24
    2198:	00008d88 	.word	0x00008d88
    219c:	00008da4 	.word	0x00008da4
    21a0:	00008c54 	.word	0x00008c54
    21a4:	00008c74 	.word	0x00008c74
    21a8:	000050f5 	.word	0x000050f5
    21ac:	00008ca4 	.word	0x00008ca4
    21b0:	00008ccc 	.word	0x00008ccc
    21b4:	00008cf4 	.word	0x00008cf4
    21b8:	00008d20 	.word	0x00008d20
    21bc:	00008d5c 	.word	0x00008d5c
    21c0:	20000300 	.word	0x20000300
    21c4:	20003564 	.word	0x20003564
    21c8:	0000572d 	.word	0x0000572d
    21cc:	00008a0c 	.word	0x00008a0c
    21d0:	20000308 	.word	0x20000308
    21d4:	0000145d 	.word	0x0000145d
    21d8:	00008dd0 	.word	0x00008dd0
    21dc:	00006c1b 	.word	0x00006c1b
    21e0:	00008784 	.word	0x00008784
    21e4:	00002a35 	.word	0x00002a35
    21e8:	00002ab1 	.word	0x00002ab1

000021ec <MdmConnect_HttpConnectionSchedule>:
{
    21ec:	b530      	push	{r4, r5, lr}
    21ee:	b083      	sub	sp, #12
    switch (gHttpConnectionState)
    21f0:	4b93      	ldr	r3, [pc, #588]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    21f2:	781b      	ldrb	r3, [r3, #0]
    21f4:	2b01      	cmp	r3, #1
    21f6:	d012      	beq.n	221e <MdmConnect_HttpConnectionSchedule+0x32>
    21f8:	b11b      	cbz	r3, 2202 <MdmConnect_HttpConnectionSchedule+0x16>
    21fa:	2b02      	cmp	r3, #2
    21fc:	d012      	beq.n	2224 <MdmConnect_HttpConnectionSchedule+0x38>
}
    21fe:	b003      	add	sp, #12
    2200:	bd30      	pop	{r4, r5, pc}
            if(isModemDiagDataBaseUpdated() != false)
    2202:	4b90      	ldr	r3, [pc, #576]	; (2444 <MdmConnect_HttpConnectionSchedule+0x258>)
    2204:	4798      	blx	r3
    2206:	2800      	cmp	r0, #0
    2208:	d0f9      	beq.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectionState = MDM_HTTP_CONNECTION_IN_PROGRESS;
    220a:	4b8d      	ldr	r3, [pc, #564]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    220c:	2201      	movs	r2, #1
    220e:	701a      	strb	r2, [r3, #0]
                gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    2210:	2200      	movs	r2, #0
    2212:	705a      	strb	r2, [r3, #1]
                gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2214:	709a      	strb	r2, [r3, #2]
                DEBUG_PRINT("Closing Active Connections");
    2216:	488c      	ldr	r0, [pc, #560]	; (2448 <MdmConnect_HttpConnectionSchedule+0x25c>)
    2218:	4b8c      	ldr	r3, [pc, #560]	; (244c <MdmConnect_HttpConnectionSchedule+0x260>)
    221a:	4798      	blx	r3
    221c:	e7ef      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            MdmCnct_ConnectInProgressSubStateMachine();
    221e:	4b8c      	ldr	r3, [pc, #560]	; (2450 <MdmConnect_HttpConnectionSchedule+0x264>)
    2220:	4798      	blx	r3
        break;
    2222:	e7ec      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gHttpConnectedSubState)
    2224:	4b86      	ldr	r3, [pc, #536]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2226:	78db      	ldrb	r3, [r3, #3]
    2228:	2b08      	cmp	r3, #8
    222a:	d8e8      	bhi.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
    222c:	e8df f013 	tbh	[pc, r3, lsl #1]
    2230:	000f0009 	.word	0x000f0009
    2234:	00220017 	.word	0x00220017
    2238:	002c0026 	.word	0x002c0026
    223c:	00b30068 	.word	0x00b30068
    2240:	00c1      	.short	0x00c1
            mdmCtrlr_FlushRxBuffer();
    2242:	4b84      	ldr	r3, [pc, #528]	; (2454 <MdmConnect_HttpConnectionSchedule+0x268>)
    2244:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_IDLE_MONITOR_CONNECTION;
    2246:	2201      	movs	r2, #1
    2248:	4b7d      	ldr	r3, [pc, #500]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    224a:	70da      	strb	r2, [r3, #3]
    224c:	e7d7      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            if(false != isPacketTransmitTimerExpired())
    224e:	4b82      	ldr	r3, [pc, #520]	; (2458 <MdmConnect_HttpConnectionSchedule+0x26c>)
    2250:	4798      	blx	r3
    2252:	2800      	cmp	r0, #0
    2254:	d0d3      	beq.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            	gHttpConnectedSubState = CONNECTED_PERIODIC_6SEC_TIMER_EXPIRED;
    2256:	2202      	movs	r2, #2
    2258:	4b79      	ldr	r3, [pc, #484]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    225a:	70da      	strb	r2, [r3, #3]
    225c:	e7cf      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
        	xSemaphoreGive(SensorScanSemaphore);
    225e:	2300      	movs	r3, #0
    2260:	461a      	mov	r2, r3
    2262:	4619      	mov	r1, r3
    2264:	487d      	ldr	r0, [pc, #500]	; (245c <MdmConnect_HttpConnectionSchedule+0x270>)
    2266:	6800      	ldr	r0, [r0, #0]
    2268:	4c7d      	ldr	r4, [pc, #500]	; (2460 <MdmConnect_HttpConnectionSchedule+0x274>)
    226a:	47a0      	blx	r4
        	gHttpConnectedSubState = CONNECTED_WAIT_FOR_DATA_FROM_SENSOR_TASK;
    226c:	2203      	movs	r2, #3
    226e:	4b74      	ldr	r3, [pc, #464]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2270:	70da      	strb	r2, [r3, #3]
    2272:	e7c4      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
			gHttpConnectedSubState = CONNECTED_BUILD_DATA_PACKET_TO_SERVER;
    2274:	2204      	movs	r2, #4
    2276:	4b72      	ldr	r3, [pc, #456]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2278:	70da      	strb	r2, [r3, #3]
    227a:	e7c0      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            buildDataPacketsToServer();
    227c:	4b79      	ldr	r3, [pc, #484]	; (2464 <MdmConnect_HttpConnectionSchedule+0x278>)
    227e:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_SEND_DATA_PACKETS_TO_SERVER;
    2280:	2205      	movs	r2, #5
    2282:	4b6f      	ldr	r3, [pc, #444]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2284:	70da      	strb	r2, [r3, #3]
    2286:	e7ba      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2288:	4b77      	ldr	r3, [pc, #476]	; (2468 <MdmConnect_HttpConnectionSchedule+0x27c>)
    228a:	6818      	ldr	r0, [r3, #0]
    228c:	4b77      	ldr	r3, [pc, #476]	; (246c <MdmConnect_HttpConnectionSchedule+0x280>)
    228e:	4798      	blx	r3
    2290:	2800      	cmp	r0, #0
    2292:	d131      	bne.n	22f8 <MdmConnect_HttpConnectionSchedule+0x10c>
                if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    2294:	2100      	movs	r1, #0
    2296:	4b76      	ldr	r3, [pc, #472]	; (2470 <MdmConnect_HttpConnectionSchedule+0x284>)
    2298:	6818      	ldr	r0, [r3, #0]
    229a:	4b76      	ldr	r3, [pc, #472]	; (2474 <MdmConnect_HttpConnectionSchedule+0x288>)
    229c:	4798      	blx	r3
    229e:	2801      	cmp	r0, #1
    22a0:	d003      	beq.n	22aa <MdmConnect_HttpConnectionSchedule+0xbe>
                    DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    22a2:	4875      	ldr	r0, [pc, #468]	; (2478 <MdmConnect_HttpConnectionSchedule+0x28c>)
    22a4:	4b69      	ldr	r3, [pc, #420]	; (244c <MdmConnect_HttpConnectionSchedule+0x260>)
    22a6:	4798      	blx	r3
    22a8:	e7a9      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    22aa:	2301      	movs	r3, #1
    22ac:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KHTTP_GET;
    22b0:	2318      	movs	r3, #24
    22b2:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    22b6:	2300      	movs	r3, #0
    22b8:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    22ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    22be:	4669      	mov	r1, sp
    22c0:	4869      	ldr	r0, [pc, #420]	; (2468 <MdmConnect_HttpConnectionSchedule+0x27c>)
    22c2:	6800      	ldr	r0, [r0, #0]
    22c4:	4c66      	ldr	r4, [pc, #408]	; (2460 <MdmConnect_HttpConnectionSchedule+0x274>)
    22c6:	47a0      	blx	r4
                    if(TxQueuePushStatus == pdPASS)
    22c8:	2801      	cmp	r0, #1
    22ca:	d007      	beq.n	22dc <MdmConnect_HttpConnectionSchedule+0xf0>
                        DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    22cc:	486b      	ldr	r0, [pc, #428]	; (247c <MdmConnect_HttpConnectionSchedule+0x290>)
    22ce:	4b5f      	ldr	r3, [pc, #380]	; (244c <MdmConnect_HttpConnectionSchedule+0x260>)
    22d0:	4798      	blx	r3
                        vTaskDelay(TransmitDelayMs);
    22d2:	f640 10c4 	movw	r0, #2500	; 0x9c4
    22d6:	4b6a      	ldr	r3, [pc, #424]	; (2480 <MdmConnect_HttpConnectionSchedule+0x294>)
    22d8:	4798      	blx	r3
    22da:	e790      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    22dc:	2300      	movs	r3, #0
    22de:	461a      	mov	r2, r3
    22e0:	4619      	mov	r1, r3
    22e2:	4863      	ldr	r0, [pc, #396]	; (2470 <MdmConnect_HttpConnectionSchedule+0x284>)
    22e4:	6800      	ldr	r0, [r0, #0]
    22e6:	47a0      	blx	r4
                        gHttpConnectedSubState = CONNECTED_RECEIVE_RESPONSE_FROM_SERVER;
    22e8:	2206      	movs	r2, #6
    22ea:	4b55      	ldr	r3, [pc, #340]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    22ec:	70da      	strb	r2, [r3, #3]
                        vTaskDelay(TransmitDelayMs);
    22ee:	f640 10c4 	movw	r0, #2500	; 0x9c4
    22f2:	4b63      	ldr	r3, [pc, #396]	; (2480 <MdmConnect_HttpConnectionSchedule+0x294>)
    22f4:	4798      	blx	r3
    22f6:	e782      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                DEBUG_PRINT("Transmit Queue is not empty");
    22f8:	4862      	ldr	r0, [pc, #392]	; (2484 <MdmConnect_HttpConnectionSchedule+0x298>)
    22fa:	4b54      	ldr	r3, [pc, #336]	; (244c <MdmConnect_HttpConnectionSchedule+0x260>)
    22fc:	4798      	blx	r3
    22fe:	e77e      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    2300:	f241 3288 	movw	r2, #5000	; 0x1388
    2304:	4960      	ldr	r1, [pc, #384]	; (2488 <MdmConnect_HttpConnectionSchedule+0x29c>)
    2306:	4b61      	ldr	r3, [pc, #388]	; (248c <MdmConnect_HttpConnectionSchedule+0x2a0>)
    2308:	6818      	ldr	r0, [r3, #0]
    230a:	4b61      	ldr	r3, [pc, #388]	; (2490 <MdmConnect_HttpConnectionSchedule+0x2a4>)
    230c:	4798      	blx	r3
    230e:	2801      	cmp	r0, #1
    2310:	d139      	bne.n	2386 <MdmConnect_HttpConnectionSchedule+0x19a>
                if(ConnectionResponse.atCmd == CMD_AT_KHTTP_GET)
    2312:	4b4b      	ldr	r3, [pc, #300]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2314:	7a1b      	ldrb	r3, [r3, #8]
    2316:	2b18      	cmp	r3, #24
    2318:	d127      	bne.n	236a <MdmConnect_HttpConnectionSchedule+0x17e>
                    if(ConnectionResponse.length > 23)
    231a:	4b49      	ldr	r3, [pc, #292]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    231c:	895c      	ldrh	r4, [r3, #10]
    231e:	2c17      	cmp	r4, #23
    2320:	d917      	bls.n	2352 <MdmConnect_HttpConnectionSchedule+0x166>
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    2322:	68dd      	ldr	r5, [r3, #12]
    if(0==memcmp(response,"CONNECT\r\nHTTP/1.1 200 OK",24))
    2324:	2218      	movs	r2, #24
    2326:	495b      	ldr	r1, [pc, #364]	; (2494 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    2328:	4628      	mov	r0, r5
    232a:	4b5b      	ldr	r3, [pc, #364]	; (2498 <MdmConnect_HttpConnectionSchedule+0x2ac>)
    232c:	4798      	blx	r3
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    232e:	b118      	cbz	r0, 2338 <MdmConnect_HttpConnectionSchedule+0x14c>
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    2330:	2207      	movs	r2, #7
    2332:	4b43      	ldr	r3, [pc, #268]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2334:	70da      	strb	r2, [r3, #3]
    2336:	e00f      	b.n	2358 <MdmConnect_HttpConnectionSchedule+0x16c>
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    2338:	4621      	mov	r1, r4
    233a:	4628      	mov	r0, r5
    233c:	4b57      	ldr	r3, [pc, #348]	; (249c <MdmConnect_HttpConnectionSchedule+0x2b0>)
    233e:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    2340:	4857      	ldr	r0, [pc, #348]	; (24a0 <MdmConnect_HttpConnectionSchedule+0x2b4>)
    2342:	4b42      	ldr	r3, [pc, #264]	; (244c <MdmConnect_HttpConnectionSchedule+0x260>)
    2344:	4798      	blx	r3
                            clearPacketTransmitTimerExpiryFlag();
    2346:	4b57      	ldr	r3, [pc, #348]	; (24a4 <MdmConnect_HttpConnectionSchedule+0x2b8>)
    2348:	4798      	blx	r3
                            gHttpConnectedSubState = CONNECTED_IDLE_MONITOR_CONNECTION;
    234a:	2201      	movs	r2, #1
    234c:	4b3c      	ldr	r3, [pc, #240]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    234e:	70da      	strb	r2, [r3, #3]
    2350:	e002      	b.n	2358 <MdmConnect_HttpConnectionSchedule+0x16c>
                        gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    2352:	2207      	movs	r2, #7
    2354:	4b3a      	ldr	r3, [pc, #232]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2356:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    2358:	4b39      	ldr	r3, [pc, #228]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    235a:	68d8      	ldr	r0, [r3, #12]
    235c:	4b52      	ldr	r3, [pc, #328]	; (24a8 <MdmConnect_HttpConnectionSchedule+0x2bc>)
    235e:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    2360:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2364:	4b46      	ldr	r3, [pc, #280]	; (2480 <MdmConnect_HttpConnectionSchedule+0x294>)
    2366:	4798      	blx	r3
    2368:	e749      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Failed to receive connection response in RX mode");
    236a:	4850      	ldr	r0, [pc, #320]	; (24ac <MdmConnect_HttpConnectionSchedule+0x2c0>)
    236c:	4b37      	ldr	r3, [pc, #220]	; (244c <MdmConnect_HttpConnectionSchedule+0x260>)
    236e:	4798      	blx	r3
                    gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    2370:	4b33      	ldr	r3, [pc, #204]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2372:	2207      	movs	r2, #7
    2374:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    2376:	68d8      	ldr	r0, [r3, #12]
    2378:	4b4b      	ldr	r3, [pc, #300]	; (24a8 <MdmConnect_HttpConnectionSchedule+0x2bc>)
    237a:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    237c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2380:	4b3f      	ldr	r3, [pc, #252]	; (2480 <MdmConnect_HttpConnectionSchedule+0x294>)
    2382:	4798      	blx	r3
    2384:	e73b      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    2386:	2207      	movs	r2, #7
    2388:	4b2d      	ldr	r3, [pc, #180]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    238a:	70da      	strb	r2, [r3, #3]
                vTaskDelay(reTransmissionDelayMs);
    238c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2390:	4b3b      	ldr	r3, [pc, #236]	; (2480 <MdmConnect_HttpConnectionSchedule+0x294>)
    2392:	4798      	blx	r3
    2394:	e733      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    2396:	4b2a      	ldr	r3, [pc, #168]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2398:	2208      	movs	r2, #8
    239a:	70da      	strb	r2, [r3, #3]
            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    239c:	2200      	movs	r2, #0
    239e:	711a      	strb	r2, [r3, #4]
            sessionIdCount = 5;
    23a0:	2105      	movs	r1, #5
    23a2:	7159      	strb	r1, [r3, #5]
            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    23a4:	709a      	strb	r2, [r3, #2]
            DEBUG_PRINT("\r\nConnection interrupted...Performing the Error Recovery....\r\n");
    23a6:	4842      	ldr	r0, [pc, #264]	; (24b0 <MdmConnect_HttpConnectionSchedule+0x2c4>)
    23a8:	4c28      	ldr	r4, [pc, #160]	; (244c <MdmConnect_HttpConnectionSchedule+0x260>)
    23aa:	47a0      	blx	r4
            DEBUG_PRINT("Closing the active connection");
    23ac:	4841      	ldr	r0, [pc, #260]	; (24b4 <MdmConnect_HttpConnectionSchedule+0x2c8>)
    23ae:	47a0      	blx	r4
    23b0:	e725      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gErrorRecoveryState)
    23b2:	4b23      	ldr	r3, [pc, #140]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    23b4:	791b      	ldrb	r3, [r3, #4]
    23b6:	2b01      	cmp	r3, #1
    23b8:	f000 810a 	beq.w	25d0 <MdmConnect_HttpConnectionSchedule+0x3e4>
    23bc:	b323      	cbz	r3, 2408 <MdmConnect_HttpConnectionSchedule+0x21c>
    23be:	2b02      	cmp	r3, #2
    23c0:	f47f af1d 	bne.w	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    23c4:	4b1e      	ldr	r3, [pc, #120]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    23c6:	789b      	ldrb	r3, [r3, #2]
    23c8:	2b00      	cmp	r3, #0
    23ca:	f000 81d9 	beq.w	2780 <MdmConnect_HttpConnectionSchedule+0x594>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    23ce:	2b01      	cmp	r3, #1
    23d0:	f47f af15 	bne.w	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    23d4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    23d8:	492b      	ldr	r1, [pc, #172]	; (2488 <MdmConnect_HttpConnectionSchedule+0x29c>)
    23da:	4b2c      	ldr	r3, [pc, #176]	; (248c <MdmConnect_HttpConnectionSchedule+0x2a0>)
    23dc:	6818      	ldr	r0, [r3, #0]
    23de:	4b2c      	ldr	r3, [pc, #176]	; (2490 <MdmConnect_HttpConnectionSchedule+0x2a4>)
    23e0:	4798      	blx	r3
    23e2:	2801      	cmp	r0, #1
    23e4:	f000 820a 	beq.w	27fc <MdmConnect_HttpConnectionSchedule+0x610>
                    if(forcedModemRebootCnt <= 3)
    23e8:	4b15      	ldr	r3, [pc, #84]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    23ea:	7c5b      	ldrb	r3, [r3, #17]
    23ec:	2b03      	cmp	r3, #3
    23ee:	f240 8255 	bls.w	289c <MdmConnect_HttpConnectionSchedule+0x6b0>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    23f2:	4831      	ldr	r0, [pc, #196]	; (24b8 <MdmConnect_HttpConnectionSchedule+0x2cc>)
    23f4:	4c15      	ldr	r4, [pc, #84]	; (244c <MdmConnect_HttpConnectionSchedule+0x260>)
    23f6:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    23f8:	4830      	ldr	r0, [pc, #192]	; (24bc <MdmConnect_HttpConnectionSchedule+0x2d0>)
    23fa:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    23fc:	2200      	movs	r2, #0
    23fe:	4b10      	ldr	r3, [pc, #64]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2400:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    2402:	4b2f      	ldr	r3, [pc, #188]	; (24c0 <MdmConnect_HttpConnectionSchedule+0x2d4>)
    2404:	4798      	blx	r3
}
    2406:	e6fa      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    2408:	4b0d      	ldr	r3, [pc, #52]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    240a:	789b      	ldrb	r3, [r3, #2]
    240c:	2b00      	cmp	r3, #0
    240e:	f040 8092 	bne.w	2536 <MdmConnect_HttpConnectionSchedule+0x34a>
                if(sessionIdCount > 0)
    2412:	4b0b      	ldr	r3, [pc, #44]	; (2440 <MdmConnect_HttpConnectionSchedule+0x254>)
    2414:	795b      	ldrb	r3, [r3, #5]
    2416:	2b00      	cmp	r3, #0
    2418:	f000 8084 	beq.w	2524 <MdmConnect_HttpConnectionSchedule+0x338>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    241c:	4b12      	ldr	r3, [pc, #72]	; (2468 <MdmConnect_HttpConnectionSchedule+0x27c>)
    241e:	6818      	ldr	r0, [r3, #0]
    2420:	4b12      	ldr	r3, [pc, #72]	; (246c <MdmConnect_HttpConnectionSchedule+0x280>)
    2422:	4798      	blx	r3
    2424:	2800      	cmp	r0, #0
    2426:	d179      	bne.n	251c <MdmConnect_HttpConnectionSchedule+0x330>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    2428:	2100      	movs	r1, #0
    242a:	4b11      	ldr	r3, [pc, #68]	; (2470 <MdmConnect_HttpConnectionSchedule+0x284>)
    242c:	6818      	ldr	r0, [r3, #0]
    242e:	4b11      	ldr	r3, [pc, #68]	; (2474 <MdmConnect_HttpConnectionSchedule+0x288>)
    2430:	4798      	blx	r3
    2432:	2801      	cmp	r0, #1
    2434:	d046      	beq.n	24c4 <MdmConnect_HttpConnectionSchedule+0x2d8>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    2436:	4810      	ldr	r0, [pc, #64]	; (2478 <MdmConnect_HttpConnectionSchedule+0x28c>)
    2438:	4b04      	ldr	r3, [pc, #16]	; (244c <MdmConnect_HttpConnectionSchedule+0x260>)
    243a:	4798      	blx	r3
    243c:	e6df      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
    243e:	bf00      	nop
    2440:	200002f8 	.word	0x200002f8
    2444:	00002d89 	.word	0x00002d89
    2448:	00008dd8 	.word	0x00008dd8
    244c:	000033b9 	.word	0x000033b9
    2450:	0000173d 	.word	0x0000173d
    2454:	00002ab1 	.word	0x00002ab1
    2458:	00003095 	.word	0x00003095
    245c:	20003598 	.word	0x20003598
    2460:	0000541d 	.word	0x0000541d
    2464:	000014e5 	.word	0x000014e5
    2468:	20003588 	.word	0x20003588
    246c:	00005a95 	.word	0x00005a95
    2470:	2000359c 	.word	0x2000359c
    2474:	000058b5 	.word	0x000058b5
    2478:	0000789c 	.word	0x0000789c
    247c:	00008bd4 	.word	0x00008bd4
    2480:	000060ad 	.word	0x000060ad
    2484:	000078c8 	.word	0x000078c8
    2488:	20000300 	.word	0x20000300
    248c:	20003564 	.word	0x20003564
    2490:	0000572d 	.word	0x0000572d
    2494:	00008df4 	.word	0x00008df4
    2498:	00006c1b 	.word	0x00006c1b
    249c:	00003375 	.word	0x00003375
    24a0:	00009394 	.word	0x00009394
    24a4:	00003089 	.word	0x00003089
    24a8:	000050f5 	.word	0x000050f5
    24ac:	00008a0c 	.word	0x00008a0c
    24b0:	00008e10 	.word	0x00008e10
    24b4:	00008e50 	.word	0x00008e50
    24b8:	00008ed0 	.word	0x00008ed0
    24bc:	00008f04 	.word	0x00008f04
    24c0:	000035f1 	.word	0x000035f1
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    24c4:	2301      	movs	r3, #1
    24c6:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
    24ca:	4b8f      	ldr	r3, [pc, #572]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    24cc:	7958      	ldrb	r0, [r3, #5]
    24ce:	4b8f      	ldr	r3, [pc, #572]	; (270c <MdmConnect_HttpConnectionSchedule+0x520>)
    24d0:	4798      	blx	r3
    24d2:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
    24d6:	2300      	movs	r3, #0
    24d8:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    24da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    24de:	4669      	mov	r1, sp
    24e0:	488b      	ldr	r0, [pc, #556]	; (2710 <MdmConnect_HttpConnectionSchedule+0x524>)
    24e2:	6800      	ldr	r0, [r0, #0]
    24e4:	4c8b      	ldr	r4, [pc, #556]	; (2714 <MdmConnect_HttpConnectionSchedule+0x528>)
    24e6:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
    24e8:	2801      	cmp	r0, #1
    24ea:	d007      	beq.n	24fc <MdmConnect_HttpConnectionSchedule+0x310>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    24ec:	488a      	ldr	r0, [pc, #552]	; (2718 <MdmConnect_HttpConnectionSchedule+0x52c>)
    24ee:	4b8b      	ldr	r3, [pc, #556]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    24f0:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
    24f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    24f6:	4b8a      	ldr	r3, [pc, #552]	; (2720 <MdmConnect_HttpConnectionSchedule+0x534>)
    24f8:	4798      	blx	r3
    24fa:	e680      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
    24fc:	2300      	movs	r3, #0
    24fe:	461a      	mov	r2, r3
    2500:	4619      	mov	r1, r3
    2502:	4888      	ldr	r0, [pc, #544]	; (2724 <MdmConnect_HttpConnectionSchedule+0x538>)
    2504:	6800      	ldr	r0, [r0, #0]
    2506:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    2508:	4b7f      	ldr	r3, [pc, #508]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    250a:	2201      	movs	r2, #1
    250c:	709a      	strb	r2, [r3, #2]
                                gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    250e:	2208      	movs	r2, #8
    2510:	70da      	strb	r2, [r3, #3]
                                vTaskDelay(TransmitDelayMs);
    2512:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2516:	4b82      	ldr	r3, [pc, #520]	; (2720 <MdmConnect_HttpConnectionSchedule+0x534>)
    2518:	4798      	blx	r3
    251a:	e670      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Transmit Queue is not empty");
    251c:	4882      	ldr	r0, [pc, #520]	; (2728 <MdmConnect_HttpConnectionSchedule+0x53c>)
    251e:	4b7f      	ldr	r3, [pc, #508]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    2520:	4798      	blx	r3
    2522:	e66c      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("No More Active Connections to close");
    2524:	4881      	ldr	r0, [pc, #516]	; (272c <MdmConnect_HttpConnectionSchedule+0x540>)
    2526:	4b7d      	ldr	r3, [pc, #500]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    2528:	4798      	blx	r3
                    gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    252a:	4b77      	ldr	r3, [pc, #476]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    252c:	2201      	movs	r2, #1
    252e:	711a      	strb	r2, [r3, #4]
                    gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    2530:	2208      	movs	r2, #8
    2532:	70da      	strb	r2, [r3, #3]
    2534:	e663      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    2536:	2b01      	cmp	r3, #1
    2538:	f47f ae61 	bne.w	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    253c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    2540:	497b      	ldr	r1, [pc, #492]	; (2730 <MdmConnect_HttpConnectionSchedule+0x544>)
    2542:	4b7c      	ldr	r3, [pc, #496]	; (2734 <MdmConnect_HttpConnectionSchedule+0x548>)
    2544:	6818      	ldr	r0, [r3, #0]
    2546:	4b7c      	ldr	r3, [pc, #496]	; (2738 <MdmConnect_HttpConnectionSchedule+0x54c>)
    2548:	4798      	blx	r3
    254a:	2801      	cmp	r0, #1
    254c:	d00f      	beq.n	256e <MdmConnect_HttpConnectionSchedule+0x382>
                    if(forcedModemRebootCnt <= 3)
    254e:	4b6e      	ldr	r3, [pc, #440]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2550:	7c5b      	ldrb	r3, [r3, #17]
    2552:	2b03      	cmp	r3, #3
    2554:	d831      	bhi.n	25ba <MdmConnect_HttpConnectionSchedule+0x3ce>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    2556:	4879      	ldr	r0, [pc, #484]	; (273c <MdmConnect_HttpConnectionSchedule+0x550>)
    2558:	4c70      	ldr	r4, [pc, #448]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    255a:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    255c:	4878      	ldr	r0, [pc, #480]	; (2740 <MdmConnect_HttpConnectionSchedule+0x554>)
    255e:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    2560:	4a69      	ldr	r2, [pc, #420]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2562:	7c53      	ldrb	r3, [r2, #17]
    2564:	3301      	adds	r3, #1
    2566:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    2568:	4b76      	ldr	r3, [pc, #472]	; (2744 <MdmConnect_HttpConnectionSchedule+0x558>)
    256a:	4798      	blx	r3
    256c:	e647      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
    256e:	4b66      	ldr	r3, [pc, #408]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2570:	7a1d      	ldrb	r5, [r3, #8]
    2572:	795c      	ldrb	r4, [r3, #5]
    2574:	4620      	mov	r0, r4
    2576:	4b65      	ldr	r3, [pc, #404]	; (270c <MdmConnect_HttpConnectionSchedule+0x520>)
    2578:	4798      	blx	r3
    257a:	4285      	cmp	r5, r0
    257c:	d113      	bne.n	25a6 <MdmConnect_HttpConnectionSchedule+0x3ba>
                        if(sessionIdCount > 0)
    257e:	b14c      	cbz	r4, 2594 <MdmConnect_HttpConnectionSchedule+0x3a8>
                            sessionIdCount--;
    2580:	4b61      	ldr	r3, [pc, #388]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2582:	3c01      	subs	r4, #1
    2584:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2586:	2200      	movs	r2, #0
    2588:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    258a:	4b5f      	ldr	r3, [pc, #380]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    258c:	68d8      	ldr	r0, [r3, #12]
    258e:	4b6e      	ldr	r3, [pc, #440]	; (2748 <MdmConnect_HttpConnectionSchedule+0x55c>)
    2590:	4798      	blx	r3
    2592:	e634      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                            gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    2594:	4b5c      	ldr	r3, [pc, #368]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2596:	2201      	movs	r2, #1
    2598:	711a      	strb	r2, [r3, #4]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    259a:	2208      	movs	r2, #8
    259c:	70da      	strb	r2, [r3, #3]
                            DEBUG_PRINT("Closed All Active Connections");
    259e:	486b      	ldr	r0, [pc, #428]	; (274c <MdmConnect_HttpConnectionSchedule+0x560>)
    25a0:	4b5e      	ldr	r3, [pc, #376]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    25a2:	4798      	blx	r3
    25a4:	e7f1      	b.n	258a <MdmConnect_HttpConnectionSchedule+0x39e>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    25a6:	486a      	ldr	r0, [pc, #424]	; (2750 <MdmConnect_HttpConnectionSchedule+0x564>)
    25a8:	4b5c      	ldr	r3, [pc, #368]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    25aa:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    25ac:	4b56      	ldr	r3, [pc, #344]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    25ae:	2200      	movs	r2, #0
    25b0:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    25b2:	68d8      	ldr	r0, [r3, #12]
    25b4:	4b64      	ldr	r3, [pc, #400]	; (2748 <MdmConnect_HttpConnectionSchedule+0x55c>)
    25b6:	4798      	blx	r3
    25b8:	e621      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    25ba:	4866      	ldr	r0, [pc, #408]	; (2754 <MdmConnect_HttpConnectionSchedule+0x568>)
    25bc:	4c57      	ldr	r4, [pc, #348]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    25be:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    25c0:	4865      	ldr	r0, [pc, #404]	; (2758 <MdmConnect_HttpConnectionSchedule+0x56c>)
    25c2:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    25c4:	2200      	movs	r2, #0
    25c6:	4b50      	ldr	r3, [pc, #320]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    25c8:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    25ca:	4b64      	ldr	r3, [pc, #400]	; (275c <MdmConnect_HttpConnectionSchedule+0x570>)
    25cc:	4798      	blx	r3
    25ce:	e616      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    25d0:	4b4d      	ldr	r3, [pc, #308]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    25d2:	789b      	ldrb	r3, [r3, #2]
    25d4:	b1db      	cbz	r3, 260e <MdmConnect_HttpConnectionSchedule+0x422>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    25d6:	2b01      	cmp	r3, #1
    25d8:	f47f ae11 	bne.w	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    25dc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    25e0:	4953      	ldr	r1, [pc, #332]	; (2730 <MdmConnect_HttpConnectionSchedule+0x544>)
    25e2:	4b54      	ldr	r3, [pc, #336]	; (2734 <MdmConnect_HttpConnectionSchedule+0x548>)
    25e4:	6818      	ldr	r0, [r3, #0]
    25e6:	4b54      	ldr	r3, [pc, #336]	; (2738 <MdmConnect_HttpConnectionSchedule+0x54c>)
    25e8:	4798      	blx	r3
    25ea:	2801      	cmp	r0, #1
    25ec:	d04d      	beq.n	268a <MdmConnect_HttpConnectionSchedule+0x49e>
                    if(forcedModemRebootCnt <= 3)
    25ee:	4b46      	ldr	r3, [pc, #280]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    25f0:	7c5b      	ldrb	r3, [r3, #17]
    25f2:	2b03      	cmp	r3, #3
    25f4:	d87c      	bhi.n	26f0 <MdmConnect_HttpConnectionSchedule+0x504>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    25f6:	4851      	ldr	r0, [pc, #324]	; (273c <MdmConnect_HttpConnectionSchedule+0x550>)
    25f8:	4c48      	ldr	r4, [pc, #288]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    25fa:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    25fc:	4850      	ldr	r0, [pc, #320]	; (2740 <MdmConnect_HttpConnectionSchedule+0x554>)
    25fe:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    2600:	4a41      	ldr	r2, [pc, #260]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2602:	7c53      	ldrb	r3, [r2, #17]
    2604:	3301      	adds	r3, #1
    2606:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    2608:	4b4e      	ldr	r3, [pc, #312]	; (2744 <MdmConnect_HttpConnectionSchedule+0x558>)
    260a:	4798      	blx	r3
    260c:	e5f7      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    260e:	4b40      	ldr	r3, [pc, #256]	; (2710 <MdmConnect_HttpConnectionSchedule+0x524>)
    2610:	6818      	ldr	r0, [r3, #0]
    2612:	4b53      	ldr	r3, [pc, #332]	; (2760 <MdmConnect_HttpConnectionSchedule+0x574>)
    2614:	4798      	blx	r3
    2616:	2800      	cmp	r0, #0
    2618:	d133      	bne.n	2682 <MdmConnect_HttpConnectionSchedule+0x496>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    261a:	2100      	movs	r1, #0
    261c:	4b41      	ldr	r3, [pc, #260]	; (2724 <MdmConnect_HttpConnectionSchedule+0x538>)
    261e:	6818      	ldr	r0, [r3, #0]
    2620:	4b50      	ldr	r3, [pc, #320]	; (2764 <MdmConnect_HttpConnectionSchedule+0x578>)
    2622:	4798      	blx	r3
    2624:	2801      	cmp	r0, #1
    2626:	d003      	beq.n	2630 <MdmConnect_HttpConnectionSchedule+0x444>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    2628:	484f      	ldr	r0, [pc, #316]	; (2768 <MdmConnect_HttpConnectionSchedule+0x57c>)
    262a:	4b3c      	ldr	r3, [pc, #240]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    262c:	4798      	blx	r3
    262e:	e5e6      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    2630:	2301      	movs	r3, #1
    2632:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
    2636:	231a      	movs	r3, #26
    2638:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    263c:	2300      	movs	r3, #0
    263e:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2640:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    2644:	4669      	mov	r1, sp
    2646:	4832      	ldr	r0, [pc, #200]	; (2710 <MdmConnect_HttpConnectionSchedule+0x524>)
    2648:	6800      	ldr	r0, [r0, #0]
    264a:	4c32      	ldr	r4, [pc, #200]	; (2714 <MdmConnect_HttpConnectionSchedule+0x528>)
    264c:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    264e:	2801      	cmp	r0, #1
    2650:	d007      	beq.n	2662 <MdmConnect_HttpConnectionSchedule+0x476>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    2652:	4831      	ldr	r0, [pc, #196]	; (2718 <MdmConnect_HttpConnectionSchedule+0x52c>)
    2654:	4b31      	ldr	r3, [pc, #196]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    2656:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    2658:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    265c:	4b30      	ldr	r3, [pc, #192]	; (2720 <MdmConnect_HttpConnectionSchedule+0x534>)
    265e:	4798      	blx	r3
    2660:	e5cd      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    2662:	2300      	movs	r3, #0
    2664:	461a      	mov	r2, r3
    2666:	4619      	mov	r1, r3
    2668:	482e      	ldr	r0, [pc, #184]	; (2724 <MdmConnect_HttpConnectionSchedule+0x538>)
    266a:	6800      	ldr	r0, [r0, #0]
    266c:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    266e:	4b26      	ldr	r3, [pc, #152]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2670:	2201      	movs	r2, #1
    2672:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    2674:	2208      	movs	r2, #8
    2676:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    2678:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    267c:	4b28      	ldr	r3, [pc, #160]	; (2720 <MdmConnect_HttpConnectionSchedule+0x534>)
    267e:	4798      	blx	r3
    2680:	e5bd      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    2682:	4829      	ldr	r0, [pc, #164]	; (2728 <MdmConnect_HttpConnectionSchedule+0x53c>)
    2684:	4b25      	ldr	r3, [pc, #148]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    2686:	4798      	blx	r3
    2688:	e5b9      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
    268a:	4b1f      	ldr	r3, [pc, #124]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    268c:	7a1b      	ldrb	r3, [r3, #8]
    268e:	2b1a      	cmp	r3, #26
    2690:	d124      	bne.n	26dc <MdmConnect_HttpConnectionSchedule+0x4f0>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    2692:	4b1d      	ldr	r3, [pc, #116]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    2694:	68d8      	ldr	r0, [r3, #12]
    2696:	4b35      	ldr	r3, [pc, #212]	; (276c <MdmConnect_HttpConnectionSchedule+0x580>)
    2698:	4798      	blx	r3
    269a:	b1a0      	cbz	r0, 26c6 <MdmConnect_HttpConnectionSchedule+0x4da>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
    269c:	4834      	ldr	r0, [pc, #208]	; (2770 <MdmConnect_HttpConnectionSchedule+0x584>)
    269e:	4d1f      	ldr	r5, [pc, #124]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    26a0:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    26a2:	4c19      	ldr	r4, [pc, #100]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    26a4:	8961      	ldrh	r1, [r4, #10]
    26a6:	68e0      	ldr	r0, [r4, #12]
    26a8:	4b32      	ldr	r3, [pc, #200]	; (2774 <MdmConnect_HttpConnectionSchedule+0x588>)
    26aa:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    26ac:	4832      	ldr	r0, [pc, #200]	; (2778 <MdmConnect_HttpConnectionSchedule+0x58c>)
    26ae:	47a8      	blx	r5
                            gErrorRecoveryState = PDP_PERFORM_PS_CONNECTION_DETACH;
    26b0:	2302      	movs	r3, #2
    26b2:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    26b4:	2300      	movs	r3, #0
    26b6:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    26b8:	2308      	movs	r3, #8
    26ba:	70e3      	strb	r3, [r4, #3]
                        vPortFree(ConnectionResponse.response);
    26bc:	4b12      	ldr	r3, [pc, #72]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    26be:	68d8      	ldr	r0, [r3, #12]
    26c0:	4b21      	ldr	r3, [pc, #132]	; (2748 <MdmConnect_HttpConnectionSchedule+0x55c>)
    26c2:	4798      	blx	r3
    26c4:	e59b      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                            DEBUG_PRINT("Expected Response Not Received...");
    26c6:	482d      	ldr	r0, [pc, #180]	; (277c <MdmConnect_HttpConnectionSchedule+0x590>)
    26c8:	4c14      	ldr	r4, [pc, #80]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    26ca:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    26cc:	482a      	ldr	r0, [pc, #168]	; (2778 <MdmConnect_HttpConnectionSchedule+0x58c>)
    26ce:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    26d0:	2200      	movs	r2, #0
    26d2:	4b0d      	ldr	r3, [pc, #52]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    26d4:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    26d6:	4b1b      	ldr	r3, [pc, #108]	; (2744 <MdmConnect_HttpConnectionSchedule+0x558>)
    26d8:	4798      	blx	r3
    26da:	e7ef      	b.n	26bc <MdmConnect_HttpConnectionSchedule+0x4d0>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    26dc:	481c      	ldr	r0, [pc, #112]	; (2750 <MdmConnect_HttpConnectionSchedule+0x564>)
    26de:	4b0f      	ldr	r3, [pc, #60]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    26e0:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    26e2:	4b09      	ldr	r3, [pc, #36]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    26e4:	2200      	movs	r2, #0
    26e6:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    26e8:	68d8      	ldr	r0, [r3, #12]
    26ea:	4b17      	ldr	r3, [pc, #92]	; (2748 <MdmConnect_HttpConnectionSchedule+0x55c>)
    26ec:	4798      	blx	r3
    26ee:	e586      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    26f0:	4818      	ldr	r0, [pc, #96]	; (2754 <MdmConnect_HttpConnectionSchedule+0x568>)
    26f2:	4c0a      	ldr	r4, [pc, #40]	; (271c <MdmConnect_HttpConnectionSchedule+0x530>)
    26f4:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    26f6:	4818      	ldr	r0, [pc, #96]	; (2758 <MdmConnect_HttpConnectionSchedule+0x56c>)
    26f8:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    26fa:	2200      	movs	r2, #0
    26fc:	4b02      	ldr	r3, [pc, #8]	; (2708 <MdmConnect_HttpConnectionSchedule+0x51c>)
    26fe:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    2700:	4b16      	ldr	r3, [pc, #88]	; (275c <MdmConnect_HttpConnectionSchedule+0x570>)
    2702:	4798      	blx	r3
    2704:	e57b      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
    2706:	bf00      	nop
    2708:	200002f8 	.word	0x200002f8
    270c:	00001691 	.word	0x00001691
    2710:	20003588 	.word	0x20003588
    2714:	0000541d 	.word	0x0000541d
    2718:	00008994 	.word	0x00008994
    271c:	000033b9 	.word	0x000033b9
    2720:	000060ad 	.word	0x000060ad
    2724:	2000359c 	.word	0x2000359c
    2728:	000078c8 	.word	0x000078c8
    272c:	000089c8 	.word	0x000089c8
    2730:	20000300 	.word	0x20000300
    2734:	20003564 	.word	0x20003564
    2738:	0000572d 	.word	0x0000572d
    273c:	00008e70 	.word	0x00008e70
    2740:	00008e8c 	.word	0x00008e8c
    2744:	00001711 	.word	0x00001711
    2748:	000050f5 	.word	0x000050f5
    274c:	000089ec 	.word	0x000089ec
    2750:	00008a0c 	.word	0x00008a0c
    2754:	00008ed0 	.word	0x00008ed0
    2758:	00008f04 	.word	0x00008f04
    275c:	000035f1 	.word	0x000035f1
    2760:	00005a95 	.word	0x00005a95
    2764:	000058b5 	.word	0x000058b5
    2768:	0000789c 	.word	0x0000789c
    276c:	000016d1 	.word	0x000016d1
    2770:	00008a40 	.word	0x00008a40
    2774:	00003375 	.word	0x00003375
    2778:	00009394 	.word	0x00009394
    277c:	00008a60 	.word	0x00008a60
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2780:	4b4c      	ldr	r3, [pc, #304]	; (28b4 <MdmConnect_HttpConnectionSchedule+0x6c8>)
    2782:	6818      	ldr	r0, [r3, #0]
    2784:	4b4c      	ldr	r3, [pc, #304]	; (28b8 <MdmConnect_HttpConnectionSchedule+0x6cc>)
    2786:	4798      	blx	r3
    2788:	2800      	cmp	r0, #0
    278a:	d133      	bne.n	27f4 <MdmConnect_HttpConnectionSchedule+0x608>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    278c:	2100      	movs	r1, #0
    278e:	4b4b      	ldr	r3, [pc, #300]	; (28bc <MdmConnect_HttpConnectionSchedule+0x6d0>)
    2790:	6818      	ldr	r0, [r3, #0]
    2792:	4b4b      	ldr	r3, [pc, #300]	; (28c0 <MdmConnect_HttpConnectionSchedule+0x6d4>)
    2794:	4798      	blx	r3
    2796:	2801      	cmp	r0, #1
    2798:	d003      	beq.n	27a2 <MdmConnect_HttpConnectionSchedule+0x5b6>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    279a:	484a      	ldr	r0, [pc, #296]	; (28c4 <MdmConnect_HttpConnectionSchedule+0x6d8>)
    279c:	4b4a      	ldr	r3, [pc, #296]	; (28c8 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    279e:	4798      	blx	r3
    27a0:	e52d      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    27a2:	2301      	movs	r3, #1
    27a4:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
    27a8:	231b      	movs	r3, #27
    27aa:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    27ae:	2300      	movs	r3, #0
    27b0:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    27b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    27b6:	4669      	mov	r1, sp
    27b8:	483e      	ldr	r0, [pc, #248]	; (28b4 <MdmConnect_HttpConnectionSchedule+0x6c8>)
    27ba:	6800      	ldr	r0, [r0, #0]
    27bc:	4c43      	ldr	r4, [pc, #268]	; (28cc <MdmConnect_HttpConnectionSchedule+0x6e0>)
    27be:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    27c0:	2801      	cmp	r0, #1
    27c2:	d007      	beq.n	27d4 <MdmConnect_HttpConnectionSchedule+0x5e8>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    27c4:	4842      	ldr	r0, [pc, #264]	; (28d0 <MdmConnect_HttpConnectionSchedule+0x6e4>)
    27c6:	4b40      	ldr	r3, [pc, #256]	; (28c8 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    27c8:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    27ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    27ce:	4b41      	ldr	r3, [pc, #260]	; (28d4 <MdmConnect_HttpConnectionSchedule+0x6e8>)
    27d0:	4798      	blx	r3
    27d2:	e514      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    27d4:	2300      	movs	r3, #0
    27d6:	461a      	mov	r2, r3
    27d8:	4619      	mov	r1, r3
    27da:	4838      	ldr	r0, [pc, #224]	; (28bc <MdmConnect_HttpConnectionSchedule+0x6d0>)
    27dc:	6800      	ldr	r0, [r0, #0]
    27de:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    27e0:	4b3d      	ldr	r3, [pc, #244]	; (28d8 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    27e2:	2201      	movs	r2, #1
    27e4:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    27e6:	2208      	movs	r2, #8
    27e8:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    27ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    27ee:	4b39      	ldr	r3, [pc, #228]	; (28d4 <MdmConnect_HttpConnectionSchedule+0x6e8>)
    27f0:	4798      	blx	r3
    27f2:	e504      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    27f4:	4839      	ldr	r0, [pc, #228]	; (28dc <MdmConnect_HttpConnectionSchedule+0x6f0>)
    27f6:	4b34      	ldr	r3, [pc, #208]	; (28c8 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    27f8:	4798      	blx	r3
    27fa:	e500      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
    27fc:	4b36      	ldr	r3, [pc, #216]	; (28d8 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    27fe:	7a1b      	ldrb	r3, [r3, #8]
    2800:	2b1b      	cmp	r3, #27
    2802:	d13f      	bne.n	2884 <MdmConnect_HttpConnectionSchedule+0x698>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    2804:	4b34      	ldr	r3, [pc, #208]	; (28d8 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2806:	68d8      	ldr	r0, [r3, #12]
    2808:	4b35      	ldr	r3, [pc, #212]	; (28e0 <MdmConnect_HttpConnectionSchedule+0x6f4>)
    280a:	4798      	blx	r3
    280c:	2800      	cmp	r0, #0
    280e:	d02b      	beq.n	2868 <MdmConnect_HttpConnectionSchedule+0x67c>
                            DEBUG_PRINT("Detached the PDP PS");
    2810:	4834      	ldr	r0, [pc, #208]	; (28e4 <MdmConnect_HttpConnectionSchedule+0x6f8>)
    2812:	4d2d      	ldr	r5, [pc, #180]	; (28c8 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    2814:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    2816:	4c30      	ldr	r4, [pc, #192]	; (28d8 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2818:	8961      	ldrh	r1, [r4, #10]
    281a:	68e0      	ldr	r0, [r4, #12]
    281c:	4b32      	ldr	r3, [pc, #200]	; (28e8 <MdmConnect_HttpConnectionSchedule+0x6fc>)
    281e:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    2820:	4832      	ldr	r0, [pc, #200]	; (28ec <MdmConnect_HttpConnectionSchedule+0x700>)
    2822:	47a8      	blx	r5
                            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    2824:	2300      	movs	r3, #0
    2826:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2828:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    282a:	70e3      	strb	r3, [r4, #3]
                            gHttpConnectionState = MDM_HTTP_DISCONNECTED;
    282c:	7023      	strb	r3, [r4, #0]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    282e:	7063      	strb	r3, [r4, #1]
                            sessionIdCount = 5;
    2830:	2305      	movs	r3, #5
    2832:	7163      	strb	r3, [r4, #5]
                            DEBUG_PRINT("Error Recovery Completed\r\n");
    2834:	482e      	ldr	r0, [pc, #184]	; (28f0 <MdmConnect_HttpConnectionSchedule+0x704>)
    2836:	47a8      	blx	r5
                            DEBUG_PRINT("=================================================\r\n");
    2838:	482e      	ldr	r0, [pc, #184]	; (28f4 <MdmConnect_HttpConnectionSchedule+0x708>)
    283a:	47a8      	blx	r5
                            DEBUG_PRINT("Establishing a new connection with server");
    283c:	482e      	ldr	r0, [pc, #184]	; (28f8 <MdmConnect_HttpConnectionSchedule+0x70c>)
    283e:	47a8      	blx	r5
                            errorRecoveryCnt++;
    2840:	7ca3      	ldrb	r3, [r4, #18]
    2842:	3301      	adds	r3, #1
    2844:	74a3      	strb	r3, [r4, #18]
                            vPortFree(ConnectionResponse.response);
    2846:	68e0      	ldr	r0, [r4, #12]
    2848:	4b2c      	ldr	r3, [pc, #176]	; (28fc <MdmConnect_HttpConnectionSchedule+0x710>)
    284a:	4798      	blx	r3
                            if(errorRecoveryCnt >=3)
    284c:	7ca3      	ldrb	r3, [r4, #18]
    284e:	2b02      	cmp	r3, #2
    2850:	f67f acd5 	bls.w	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                                DEBUG_PRINT("System is auto recovered for more than 3 times.");
    2854:	482a      	ldr	r0, [pc, #168]	; (2900 <MdmConnect_HttpConnectionSchedule+0x714>)
    2856:	47a8      	blx	r5
                                DEBUG_PRINT("Performing a system restart....................\r\n");
    2858:	482a      	ldr	r0, [pc, #168]	; (2904 <MdmConnect_HttpConnectionSchedule+0x718>)
    285a:	47a8      	blx	r5
                                errorRecoveryCnt = 0;
    285c:	2200      	movs	r2, #0
    285e:	4b1e      	ldr	r3, [pc, #120]	; (28d8 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2860:	749a      	strb	r2, [r3, #18]
                                requestWatchDogForcedReset();
    2862:	4b29      	ldr	r3, [pc, #164]	; (2908 <MdmConnect_HttpConnectionSchedule+0x71c>)
    2864:	4798      	blx	r3
    2866:	e4ca      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                            DEBUG_PRINT("Expected Response Not Received...");
    2868:	4828      	ldr	r0, [pc, #160]	; (290c <MdmConnect_HttpConnectionSchedule+0x720>)
    286a:	4c17      	ldr	r4, [pc, #92]	; (28c8 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    286c:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    286e:	481f      	ldr	r0, [pc, #124]	; (28ec <MdmConnect_HttpConnectionSchedule+0x700>)
    2870:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    2872:	4b19      	ldr	r3, [pc, #100]	; (28d8 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    2874:	2200      	movs	r2, #0
    2876:	709a      	strb	r2, [r3, #2]
                            vPortFree(ConnectionResponse.response);
    2878:	68d8      	ldr	r0, [r3, #12]
    287a:	4b20      	ldr	r3, [pc, #128]	; (28fc <MdmConnect_HttpConnectionSchedule+0x710>)
    287c:	4798      	blx	r3
                            performForcedRebootOfModem();
    287e:	4b24      	ldr	r3, [pc, #144]	; (2910 <MdmConnect_HttpConnectionSchedule+0x724>)
    2880:	4798      	blx	r3
    2882:	e4bc      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    2884:	4823      	ldr	r0, [pc, #140]	; (2914 <MdmConnect_HttpConnectionSchedule+0x728>)
    2886:	4b10      	ldr	r3, [pc, #64]	; (28c8 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    2888:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    288a:	4b13      	ldr	r3, [pc, #76]	; (28d8 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    288c:	2200      	movs	r2, #0
    288e:	709a      	strb	r2, [r3, #2]
                        gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    2890:	2208      	movs	r2, #8
    2892:	70da      	strb	r2, [r3, #3]
                        vPortFree(ConnectionResponse.response);
    2894:	68d8      	ldr	r0, [r3, #12]
    2896:	4b19      	ldr	r3, [pc, #100]	; (28fc <MdmConnect_HttpConnectionSchedule+0x710>)
    2898:	4798      	blx	r3
    289a:	e4b0      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    289c:	481e      	ldr	r0, [pc, #120]	; (2918 <MdmConnect_HttpConnectionSchedule+0x72c>)
    289e:	4c0a      	ldr	r4, [pc, #40]	; (28c8 <MdmConnect_HttpConnectionSchedule+0x6dc>)
    28a0:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    28a2:	481e      	ldr	r0, [pc, #120]	; (291c <MdmConnect_HttpConnectionSchedule+0x730>)
    28a4:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    28a6:	4a0c      	ldr	r2, [pc, #48]	; (28d8 <MdmConnect_HttpConnectionSchedule+0x6ec>)
    28a8:	7c53      	ldrb	r3, [r2, #17]
    28aa:	3301      	adds	r3, #1
    28ac:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    28ae:	4b18      	ldr	r3, [pc, #96]	; (2910 <MdmConnect_HttpConnectionSchedule+0x724>)
    28b0:	4798      	blx	r3
    28b2:	e4a4      	b.n	21fe <MdmConnect_HttpConnectionSchedule+0x12>
    28b4:	20003588 	.word	0x20003588
    28b8:	00005a95 	.word	0x00005a95
    28bc:	2000359c 	.word	0x2000359c
    28c0:	000058b5 	.word	0x000058b5
    28c4:	0000789c 	.word	0x0000789c
    28c8:	000033b9 	.word	0x000033b9
    28cc:	0000541d 	.word	0x0000541d
    28d0:	00008994 	.word	0x00008994
    28d4:	000060ad 	.word	0x000060ad
    28d8:	200002f8 	.word	0x200002f8
    28dc:	000078c8 	.word	0x000078c8
    28e0:	000016d1 	.word	0x000016d1
    28e4:	00008ab4 	.word	0x00008ab4
    28e8:	00003375 	.word	0x00003375
    28ec:	00009394 	.word	0x00009394
    28f0:	00008f50 	.word	0x00008f50
    28f4:	00008f6c 	.word	0x00008f6c
    28f8:	00008fa0 	.word	0x00008fa0
    28fc:	000050f5 	.word	0x000050f5
    2900:	00008fcc 	.word	0x00008fcc
    2904:	00008ffc 	.word	0x00008ffc
    2908:	000035f1 	.word	0x000035f1
    290c:	00008a60 	.word	0x00008a60
    2910:	00001711 	.word	0x00001711
    2914:	00008a0c 	.word	0x00008a0c
    2918:	00008e70 	.word	0x00008e70
    291c:	00008e8c 	.word	0x00008e8c

00002920 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
    2920:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
    2922:	490d      	ldr	r1, [pc, #52]	; (2958 <mdmCtrlr_DataCommInit+0x38>)
    2924:	480d      	ldr	r0, [pc, #52]	; (295c <mdmCtrlr_DataCommInit+0x3c>)
    2926:	4b0e      	ldr	r3, [pc, #56]	; (2960 <mdmCtrlr_DataCommInit+0x40>)
    2928:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
    292a:	b100      	cbz	r0, 292e <mdmCtrlr_DataCommInit+0xe>
    292c:	bd10      	pop	{r4, pc}
	{
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
    292e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    2932:	490c      	ldr	r1, [pc, #48]	; (2964 <mdmCtrlr_DataCommInit+0x44>)
    2934:	480c      	ldr	r0, [pc, #48]	; (2968 <mdmCtrlr_DataCommInit+0x48>)
    2936:	4b0d      	ldr	r3, [pc, #52]	; (296c <mdmCtrlr_DataCommInit+0x4c>)
    2938:	4798      	blx	r3
	}
	
	if(initStatus == ERR_NONE)
    293a:	2800      	cmp	r0, #0
    293c:	d1f6      	bne.n	292c <mdmCtrlr_DataCommInit+0xc>
	{
		/* Enable all of the UART interrupts for SERCOM3 */
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
    293e:	4c07      	ldr	r4, [pc, #28]	; (295c <mdmCtrlr_DataCommInit+0x3c>)
    2940:	2201      	movs	r2, #1
    2942:	4611      	mov	r1, r2
    2944:	4620      	mov	r0, r4
    2946:	4b0a      	ldr	r3, [pc, #40]	; (2970 <mdmCtrlr_DataCommInit+0x50>)
    2948:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
    294a:	4620      	mov	r0, r4
    294c:	4b09      	ldr	r3, [pc, #36]	; (2974 <mdmCtrlr_DataCommInit+0x54>)
    294e:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
    2950:	4b09      	ldr	r3, [pc, #36]	; (2978 <mdmCtrlr_DataCommInit+0x58>)
    2952:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
	}
	else
	{
		//DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
	}
}
    2956:	e7e9      	b.n	292c <mdmCtrlr_DataCommInit+0xc>
    2958:	41014000 	.word	0x41014000
    295c:	2000004c 	.word	0x2000004c
    2960:	00004541 	.word	0x00004541
    2964:	200035a8 	.word	0x200035a8
    2968:	20003da8 	.word	0x20003da8
    296c:	00003c29 	.word	0x00003c29
    2970:	000045ed 	.word	0x000045ed
    2974:	000045b5 	.word	0x000045b5
    2978:	e000e100 	.word	0xe000e100

0000297c <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    297c:	2201      	movs	r2, #1
    297e:	4b01      	ldr	r3, [pc, #4]	; (2984 <SERCOM3_0_Handler+0x8>)
    2980:	761a      	strb	r2, [r3, #24]
    2982:	4770      	bx	lr
    2984:	41014000 	.word	0x41014000

00002988 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    2988:	2202      	movs	r2, #2
    298a:	4b01      	ldr	r3, [pc, #4]	; (2990 <SERCOM3_1_Handler+0x8>)
    298c:	761a      	strb	r2, [r3, #24]
    298e:	4770      	bx	lr
    2990:	41014000 	.word	0x41014000

00002994 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
    2994:	b530      	push	{r4, r5, lr}
    2996:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
    2998:	4d1a      	ldr	r5, [pc, #104]	; (2a04 <SERCOM3_2_Handler+0x70>)
    299a:	4c1b      	ldr	r4, [pc, #108]	; (2a08 <SERCOM3_2_Handler+0x74>)
    299c:	4628      	mov	r0, r5
    299e:	47a0      	blx	r4
    29a0:	2800      	cmp	r0, #0
    29a2:	d0fb      	beq.n	299c <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
    29a4:	4817      	ldr	r0, [pc, #92]	; (2a04 <SERCOM3_2_Handler+0x70>)
    29a6:	4b19      	ldr	r3, [pc, #100]	; (2a0c <SERCOM3_2_Handler+0x78>)
    29a8:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
    29aa:	4601      	mov	r1, r0
    29ac:	4818      	ldr	r0, [pc, #96]	; (2a10 <SERCOM3_2_Handler+0x7c>)
    29ae:	4b19      	ldr	r3, [pc, #100]	; (2a14 <SERCOM3_2_Handler+0x80>)
    29b0:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
    29b2:	4b19      	ldr	r3, [pc, #100]	; (2a18 <SERCOM3_2_Handler+0x84>)
    29b4:	4798      	blx	r3
    29b6:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
    29b8:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    29bc:	d101      	bne.n	29c2 <SERCOM3_2_Handler+0x2e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}
}
    29be:	b009      	add	sp, #36	; 0x24
    29c0:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
    29c2:	a902      	add	r1, sp, #8
    29c4:	4b15      	ldr	r3, [pc, #84]	; (2a1c <SERCOM3_2_Handler+0x88>)
    29c6:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
    29c8:	4811      	ldr	r0, [pc, #68]	; (2a10 <SERCOM3_2_Handler+0x7c>)
    29ca:	4b15      	ldr	r3, [pc, #84]	; (2a20 <SERCOM3_2_Handler+0x8c>)
    29cc:	4798      	blx	r3
    29ce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    29d2:	4298      	cmp	r0, r3
    29d4:	d3f3      	bcc.n	29be <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
    29d6:	4b13      	ldr	r3, [pc, #76]	; (2a24 <SERCOM3_2_Handler+0x90>)
    29d8:	6818      	ldr	r0, [r3, #0]
    29da:	ab07      	add	r3, sp, #28
    29dc:	9300      	str	r3, [sp, #0]
    29de:	2300      	movs	r3, #0
    29e0:	2203      	movs	r2, #3
    29e2:	b2e1      	uxtb	r1, r4
    29e4:	4c10      	ldr	r4, [pc, #64]	; (2a28 <SERCOM3_2_Handler+0x94>)
    29e6:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    29e8:	9b07      	ldr	r3, [sp, #28]
    29ea:	b13b      	cbz	r3, 29fc <SERCOM3_2_Handler+0x68>
    29ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    29f0:	4b0e      	ldr	r3, [pc, #56]	; (2a2c <SERCOM3_2_Handler+0x98>)
    29f2:	601a      	str	r2, [r3, #0]
    29f4:	f3bf 8f4f 	dsb	sy
    29f8:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
    29fc:	2000      	movs	r0, #0
    29fe:	4b0c      	ldr	r3, [pc, #48]	; (2a30 <SERCOM3_2_Handler+0x9c>)
    2a00:	4798      	blx	r3
}
    2a02:	e7dc      	b.n	29be <SERCOM3_2_Handler+0x2a>
    2a04:	2000004c 	.word	0x2000004c
    2a08:	000045e1 	.word	0x000045e1
    2a0c:	000045cf 	.word	0x000045cf
    2a10:	20003da8 	.word	0x20003da8
    2a14:	00003cbd 	.word	0x00003cbd
    2a18:	00001685 	.word	0x00001685
    2a1c:	0000143d 	.word	0x0000143d
    2a20:	00003cfd 	.word	0x00003cfd
    2a24:	20003580 	.word	0x20003580
    2a28:	00006661 	.word	0x00006661
    2a2c:	e000ed04 	.word	0xe000ed04
    2a30:	00001679 	.word	0x00001679

00002a34 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
    2a34:	b570      	push	{r4, r5, r6, lr}
    2a36:	4605      	mov	r5, r0
    2a38:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
    2a3a:	4c05      	ldr	r4, [pc, #20]	; (2a50 <mdmCtrlr_SendDataToModem+0x1c>)
    2a3c:	4620      	mov	r0, r4
    2a3e:	4b05      	ldr	r3, [pc, #20]	; (2a54 <mdmCtrlr_SendDataToModem+0x20>)
    2a40:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
    2a42:	4632      	mov	r2, r6
    2a44:	4629      	mov	r1, r5
    2a46:	4620      	mov	r0, r4
    2a48:	4b03      	ldr	r3, [pc, #12]	; (2a58 <mdmCtrlr_SendDataToModem+0x24>)
    2a4a:	4798      	blx	r3
}
    2a4c:	bd70      	pop	{r4, r5, r6, pc}
    2a4e:	bf00      	nop
    2a50:	2000004c 	.word	0x2000004c
    2a54:	000045b5 	.word	0x000045b5
    2a58:	000032f1 	.word	0x000032f1

00002a5c <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
    2a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a5e:	b083      	sub	sp, #12
    2a60:	4605      	mov	r5, r0
    2a62:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
    2a64:	480d      	ldr	r0, [pc, #52]	; (2a9c <mdmCtrlr_ReadResponseFromModem+0x40>)
    2a66:	4b0e      	ldr	r3, [pc, #56]	; (2aa0 <mdmCtrlr_ReadResponseFromModem+0x44>)
    2a68:	4798      	blx	r3
    2a6a:	42b0      	cmp	r0, r6
    2a6c:	d201      	bcs.n	2a72 <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
    2a6e:	b003      	add	sp, #12
    2a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
    2a72:	a801      	add	r0, sp, #4
    2a74:	4b0b      	ldr	r3, [pc, #44]	; (2aa4 <mdmCtrlr_ReadResponseFromModem+0x48>)
    2a76:	4798      	blx	r3
		while (readCnt < length)
    2a78:	b166      	cbz	r6, 2a94 <mdmCtrlr_ReadResponseFromModem+0x38>
    2a7a:	462c      	mov	r4, r5
    2a7c:	3e01      	subs	r6, #1
    2a7e:	b2b6      	uxth	r6, r6
    2a80:	3601      	adds	r6, #1
    2a82:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
    2a84:	4f05      	ldr	r7, [pc, #20]	; (2a9c <mdmCtrlr_ReadResponseFromModem+0x40>)
    2a86:	4e08      	ldr	r6, [pc, #32]	; (2aa8 <mdmCtrlr_ReadResponseFromModem+0x4c>)
    2a88:	4621      	mov	r1, r4
    2a8a:	4638      	mov	r0, r7
    2a8c:	47b0      	blx	r6
    2a8e:	3401      	adds	r4, #1
		while (readCnt < length)
    2a90:	42ac      	cmp	r4, r5
    2a92:	d1f9      	bne.n	2a88 <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
    2a94:	a801      	add	r0, sp, #4
    2a96:	4b05      	ldr	r3, [pc, #20]	; (2aac <mdmCtrlr_ReadResponseFromModem+0x50>)
    2a98:	4798      	blx	r3
    2a9a:	e7e8      	b.n	2a6e <mdmCtrlr_ReadResponseFromModem+0x12>
    2a9c:	20003da8 	.word	0x20003da8
    2aa0:	00003cfd 	.word	0x00003cfd
    2aa4:	00003bd1 	.word	0x00003bd1
    2aa8:	00003c79 	.word	0x00003c79
    2aac:	00003bdf 	.word	0x00003bdf

00002ab0 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
    2ab0:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
    2ab2:	4802      	ldr	r0, [pc, #8]	; (2abc <mdmCtrlr_FlushRxBuffer+0xc>)
    2ab4:	4b02      	ldr	r3, [pc, #8]	; (2ac0 <mdmCtrlr_FlushRxBuffer+0x10>)
    2ab6:	4798      	blx	r3
    2ab8:	bd08      	pop	{r3, pc}
    2aba:	bf00      	nop
    2abc:	20003da8 	.word	0x20003da8
    2ac0:	00003d21 	.word	0x00003d21

00002ac4 <mdmCtrlr_GetUnsolicitedResponseLength>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
uint32_t mdmCtrlr_GetUnsolicitedResponseLength(void)
{
    2ac4:	b508      	push	{r3, lr}
	uint32_t length = 0;

	length = ringbuffer_num(&RxRingBuffer);
    2ac6:	4802      	ldr	r0, [pc, #8]	; (2ad0 <mdmCtrlr_GetUnsolicitedResponseLength+0xc>)
    2ac8:	4b02      	ldr	r3, [pc, #8]	; (2ad4 <mdmCtrlr_GetUnsolicitedResponseLength+0x10>)
    2aca:	4798      	blx	r3

	return length;
}
    2acc:	bd08      	pop	{r3, pc}
    2ace:	bf00      	nop
    2ad0:	20003da8 	.word	0x20003da8
    2ad4:	00003cfd 	.word	0x00003cfd

00002ad8 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
    2ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ada:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
    2adc:	2300      	movs	r3, #0
    2ade:	4a6c      	ldr	r2, [pc, #432]	; (2c90 <ModemDiagTask+0x1b8>)
    2ae0:	7013      	strb	r3, [r2, #0]
	bModemDiagDataBaseUpdated = false;
    2ae2:	4a6c      	ldr	r2, [pc, #432]	; (2c94 <ModemDiagTask+0x1bc>)
    2ae4:	4611      	mov	r1, r2
    2ae6:	f801 3b04 	strb.w	r3, [r1], #4
	
    memset(atResponseData,0,sizeof(atResponseData));
    2aea:	8093      	strh	r3, [r2, #4]
    2aec:	708b      	strb	r3, [r1, #2]
    memset(atCgsnResponseData,0,sizeof(atCgsnResponseData));
    2aee:	6093      	str	r3, [r2, #8]
    2af0:	60d3      	str	r3, [r2, #12]
    2af2:	6113      	str	r3, [r2, #16]
    2af4:	6153      	str	r3, [r2, #20]
    memset(atKgsnResponseData,0,sizeof(atKgsnResponseData));
    2af6:	6193      	str	r3, [r2, #24]
    2af8:	61d3      	str	r3, [r2, #28]
    2afa:	6213      	str	r3, [r2, #32]
    2afc:	f8c2 3023 	str.w	r3, [r2, #35]	; 0x23
    memset(atCarrierResponseData,0,sizeof(atCarrierResponseData));
    2b00:	6293      	str	r3, [r2, #40]	; 0x28
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2b02:	4c65      	ldr	r4, [pc, #404]	; (2c98 <ModemDiagTask+0x1c0>)
           (false != isFotaVerificationDone()))
    2b04:	4d65      	ldr	r5, [pc, #404]	; (2c9c <ModemDiagTask+0x1c4>)
    const TickType_t powerUpDelayMs = pdMS_TO_TICKS(7000UL);
    BaseType_t TxQueuePushStatus;
    AtTxMsgType TxMsgQueueData;
    CmdResponseType cmdResponse;

    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2b06:	4e66      	ldr	r6, [pc, #408]	; (2ca0 <ModemDiagTask+0x1c8>)
    2b08:	e029      	b.n	2b5e <ModemDiagTask+0x86>
        {
            switch(ModemDiagState)
            {
                case MODEM_DIAG_TEST_AT:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    2b0a:	2304      	movs	r3, #4
    2b0c:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
    2b10:	2301      	movs	r3, #1
    2b12:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2b16:	2300      	movs	r3, #0
    2b18:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2b1a:	2264      	movs	r2, #100	; 0x64
    2b1c:	4669      	mov	r1, sp
    2b1e:	6830      	ldr	r0, [r6, #0]
    2b20:	4f60      	ldr	r7, [pc, #384]	; (2ca4 <ModemDiagTask+0x1cc>)
    2b22:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    2b24:	2801      	cmp	r0, #1
    2b26:	d10d      	bne.n	2b44 <ModemDiagTask+0x6c>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    2b28:	2300      	movs	r3, #0
    2b2a:	461a      	mov	r2, r3
    2b2c:	4619      	mov	r1, r3
    2b2e:	485e      	ldr	r0, [pc, #376]	; (2ca8 <ModemDiagTask+0x1d0>)
    2b30:	6800      	ldr	r0, [r0, #0]
    2b32:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    2b34:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2b38:	4b5c      	ldr	r3, [pc, #368]	; (2cac <ModemDiagTask+0x1d4>)
    2b3a:	4798      	blx	r3
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
    2b3c:	2201      	movs	r2, #1
    2b3e:	4b54      	ldr	r3, [pc, #336]	; (2c90 <ModemDiagTask+0x1b8>)
    2b40:	701a      	strb	r2, [r3, #0]
    2b42:	e006      	b.n	2b52 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    2b44:	485a      	ldr	r0, [pc, #360]	; (2cb0 <ModemDiagTask+0x1d8>)
    2b46:	4b5b      	ldr	r3, [pc, #364]	; (2cb4 <ModemDiagTask+0x1dc>)
    2b48:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    2b4a:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2b4e:	4b57      	ldr	r3, [pc, #348]	; (2cac <ModemDiagTask+0x1d4>)
    2b50:	4798      	blx	r3
            kickWatchDog();
    2b52:	4b59      	ldr	r3, [pc, #356]	; (2cb8 <ModemDiagTask+0x1e0>)
    2b54:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    2b56:	f44f 7016 	mov.w	r0, #600	; 0x258
    2b5a:	4b54      	ldr	r3, [pc, #336]	; (2cac <ModemDiagTask+0x1d4>)
    2b5c:	4798      	blx	r3
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2b5e:	47a0      	blx	r4
    2b60:	2804      	cmp	r0, #4
    2b62:	d1fc      	bne.n	2b5e <ModemDiagTask+0x86>
           (false != isFotaVerificationDone()))
    2b64:	47a8      	blx	r5
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    2b66:	2800      	cmp	r0, #0
    2b68:	d0f9      	beq.n	2b5e <ModemDiagTask+0x86>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2b6a:	6830      	ldr	r0, [r6, #0]
    2b6c:	4b53      	ldr	r3, [pc, #332]	; (2cbc <ModemDiagTask+0x1e4>)
    2b6e:	4798      	blx	r3
    2b70:	2800      	cmp	r0, #0
    2b72:	d1ee      	bne.n	2b52 <ModemDiagTask+0x7a>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    2b74:	2100      	movs	r1, #0
    2b76:	4b4c      	ldr	r3, [pc, #304]	; (2ca8 <ModemDiagTask+0x1d0>)
    2b78:	6818      	ldr	r0, [r3, #0]
    2b7a:	4b51      	ldr	r3, [pc, #324]	; (2cc0 <ModemDiagTask+0x1e8>)
    2b7c:	4798      	blx	r3
    2b7e:	2801      	cmp	r0, #1
    2b80:	d1e7      	bne.n	2b52 <ModemDiagTask+0x7a>
            switch(ModemDiagState)
    2b82:	4b43      	ldr	r3, [pc, #268]	; (2c90 <ModemDiagTask+0x1b8>)
    2b84:	781b      	ldrb	r3, [r3, #0]
    2b86:	2b03      	cmp	r3, #3
    2b88:	d879      	bhi.n	2c7e <ModemDiagTask+0x1a6>
    2b8a:	a201      	add	r2, pc, #4	; (adr r2, 2b90 <ModemDiagTask+0xb8>)
    2b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2b90:	00002b0b 	.word	0x00002b0b
    2b94:	00002ba1 	.word	0x00002ba1
    2b98:	00002beb 	.word	0x00002beb
    2b9c:	00002c35 	.word	0x00002c35
                }
                break;

                case MODEM_DIAG_GET_IMEI:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    2ba0:	2304      	movs	r3, #4
    2ba2:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
    2ba6:	2302      	movs	r3, #2
    2ba8:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2bac:	2300      	movs	r3, #0
    2bae:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2bb0:	2264      	movs	r2, #100	; 0x64
    2bb2:	4669      	mov	r1, sp
    2bb4:	6830      	ldr	r0, [r6, #0]
    2bb6:	4f3b      	ldr	r7, [pc, #236]	; (2ca4 <ModemDiagTask+0x1cc>)
    2bb8:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    2bba:	2801      	cmp	r0, #1
    2bbc:	d10d      	bne.n	2bda <ModemDiagTask+0x102>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    2bbe:	2300      	movs	r3, #0
    2bc0:	461a      	mov	r2, r3
    2bc2:	4619      	mov	r1, r3
    2bc4:	4838      	ldr	r0, [pc, #224]	; (2ca8 <ModemDiagTask+0x1d0>)
    2bc6:	6800      	ldr	r0, [r0, #0]
    2bc8:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    2bca:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2bce:	4b37      	ldr	r3, [pc, #220]	; (2cac <ModemDiagTask+0x1d4>)
    2bd0:	4798      	blx	r3
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
    2bd2:	2202      	movs	r2, #2
    2bd4:	4b2e      	ldr	r3, [pc, #184]	; (2c90 <ModemDiagTask+0x1b8>)
    2bd6:	701a      	strb	r2, [r3, #0]
    2bd8:	e7bb      	b.n	2b52 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    2bda:	4835      	ldr	r0, [pc, #212]	; (2cb0 <ModemDiagTask+0x1d8>)
    2bdc:	4b35      	ldr	r3, [pc, #212]	; (2cb4 <ModemDiagTask+0x1dc>)
    2bde:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    2be0:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2be4:	4b31      	ldr	r3, [pc, #196]	; (2cac <ModemDiagTask+0x1d4>)
    2be6:	4798      	blx	r3
    2be8:	e7b3      	b.n	2b52 <ModemDiagTask+0x7a>
                }
                break;

                case MODEM_DIAG_GET_SERIAL:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    2bea:	2304      	movs	r3, #4
    2bec:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
    2bf0:	2307      	movs	r3, #7
    2bf2:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2bf6:	2300      	movs	r3, #0
    2bf8:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2bfa:	2264      	movs	r2, #100	; 0x64
    2bfc:	4669      	mov	r1, sp
    2bfe:	6830      	ldr	r0, [r6, #0]
    2c00:	4f28      	ldr	r7, [pc, #160]	; (2ca4 <ModemDiagTask+0x1cc>)
    2c02:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    2c04:	2801      	cmp	r0, #1
    2c06:	d10d      	bne.n	2c24 <ModemDiagTask+0x14c>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    2c08:	2300      	movs	r3, #0
    2c0a:	461a      	mov	r2, r3
    2c0c:	4619      	mov	r1, r3
    2c0e:	4826      	ldr	r0, [pc, #152]	; (2ca8 <ModemDiagTask+0x1d0>)
    2c10:	6800      	ldr	r0, [r0, #0]
    2c12:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    2c14:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2c18:	4b24      	ldr	r3, [pc, #144]	; (2cac <ModemDiagTask+0x1d4>)
    2c1a:	4798      	blx	r3
                        ModemDiagState = MODEM_DIAG_MAX_STATE;
    2c1c:	2204      	movs	r2, #4
    2c1e:	4b1c      	ldr	r3, [pc, #112]	; (2c90 <ModemDiagTask+0x1b8>)
    2c20:	701a      	strb	r2, [r3, #0]
    2c22:	e796      	b.n	2b52 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    2c24:	4822      	ldr	r0, [pc, #136]	; (2cb0 <ModemDiagTask+0x1d8>)
    2c26:	4b23      	ldr	r3, [pc, #140]	; (2cb4 <ModemDiagTask+0x1dc>)
    2c28:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    2c2a:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2c2e:	4b1f      	ldr	r3, [pc, #124]	; (2cac <ModemDiagTask+0x1d4>)
    2c30:	4798      	blx	r3
    2c32:	e78e      	b.n	2b52 <ModemDiagTask+0x7a>
                }
                break;

                case MODEM_DIAG_GET_CARRIER:
                {
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    2c34:	2304      	movs	r3, #4
    2c36:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
    2c3a:	2303      	movs	r3, #3
    2c3c:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    2c40:	2300      	movs	r3, #0
    2c42:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    2c44:	2264      	movs	r2, #100	; 0x64
    2c46:	4669      	mov	r1, sp
    2c48:	6830      	ldr	r0, [r6, #0]
    2c4a:	4f16      	ldr	r7, [pc, #88]	; (2ca4 <ModemDiagTask+0x1cc>)
    2c4c:	47b8      	blx	r7

                    if(TxQueuePushStatus == pdPASS)
    2c4e:	2801      	cmp	r0, #1
    2c50:	d10d      	bne.n	2c6e <ModemDiagTask+0x196>
                    {
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    2c52:	2300      	movs	r3, #0
    2c54:	461a      	mov	r2, r3
    2c56:	4619      	mov	r1, r3
    2c58:	4813      	ldr	r0, [pc, #76]	; (2ca8 <ModemDiagTask+0x1d0>)
    2c5a:	6800      	ldr	r0, [r0, #0]
    2c5c:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    2c5e:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2c62:	4b12      	ldr	r3, [pc, #72]	; (2cac <ModemDiagTask+0x1d4>)
    2c64:	4798      	blx	r3
                        ModemDiagState = 100;
    2c66:	2264      	movs	r2, #100	; 0x64
    2c68:	4b09      	ldr	r3, [pc, #36]	; (2c90 <ModemDiagTask+0x1b8>)
    2c6a:	701a      	strb	r2, [r3, #0]
    2c6c:	e771      	b.n	2b52 <ModemDiagTask+0x7a>
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    2c6e:	4810      	ldr	r0, [pc, #64]	; (2cb0 <ModemDiagTask+0x1d8>)
    2c70:	4b10      	ldr	r3, [pc, #64]	; (2cb4 <ModemDiagTask+0x1dc>)
    2c72:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    2c74:	f240 50dc 	movw	r0, #1500	; 0x5dc
    2c78:	4b0c      	ldr	r3, [pc, #48]	; (2cac <ModemDiagTask+0x1d4>)
    2c7a:	4798      	blx	r3
    2c7c:	e769      	b.n	2b52 <ModemDiagTask+0x7a>
                }
                break;

                default:
                {
                	xSemaphoreGive(AtTxQueueLoadSemaphore);
    2c7e:	2300      	movs	r3, #0
    2c80:	461a      	mov	r2, r3
    2c82:	4619      	mov	r1, r3
    2c84:	4808      	ldr	r0, [pc, #32]	; (2ca8 <ModemDiagTask+0x1d0>)
    2c86:	6800      	ldr	r0, [r0, #0]
    2c88:	4f06      	ldr	r7, [pc, #24]	; (2ca4 <ModemDiagTask+0x1cc>)
    2c8a:	47b8      	blx	r7
    2c8c:	e761      	b.n	2b52 <ModemDiagTask+0x7a>
    2c8e:	bf00      	nop
    2c90:	20003db8 	.word	0x20003db8
    2c94:	2000030c 	.word	0x2000030c
    2c98:	00002d95 	.word	0x00002d95
    2c9c:	000010bd 	.word	0x000010bd
    2ca0:	20003588 	.word	0x20003588
    2ca4:	0000541d 	.word	0x0000541d
    2ca8:	2000359c 	.word	0x2000359c
    2cac:	000060ad 	.word	0x000060ad
    2cb0:	00009058 	.word	0x00009058
    2cb4:	000033b9 	.word	0x000033b9
    2cb8:	000035b1 	.word	0x000035b1
    2cbc:	00005a95 	.word	0x00005a95
    2cc0:	000058b5 	.word	0x000058b5

00002cc4 <ModemDiagUpdateDataBase>:
{
    2cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cc6:	4604      	mov	r4, r0
    switch(cmd)
    2cc8:	780b      	ldrb	r3, [r1, #0]
    2cca:	3b01      	subs	r3, #1
    2ccc:	2b06      	cmp	r3, #6
    2cce:	d826      	bhi.n	2d1e <ModemDiagUpdateDataBase+0x5a>
    2cd0:	e8df f003 	tbb	[pc, r3]
    2cd4:	25243725 	.word	0x25243725
    2cd8:	2525      	.short	0x2525
    2cda:	04          	.byte	0x04
    2cdb:	00          	.byte	0x00
			while(parseCnt <= (cmdResponse->length - startIndex))
    2cdc:	884b      	ldrh	r3, [r1, #2]
    2cde:	2b07      	cmp	r3, #7
    2ce0:	d40d      	bmi.n	2cfe <ModemDiagUpdateDataBase+0x3a>
    2ce2:	2200      	movs	r2, #0
    2ce4:	4613      	mov	r3, r2
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
    2ce6:	4d20      	ldr	r5, [pc, #128]	; (2d68 <ModemDiagUpdateDataBase+0xa4>)
    2ce8:	18a0      	adds	r0, r4, r2
    2cea:	79c0      	ldrb	r0, [r0, #7]
    2cec:	442a      	add	r2, r5
    2cee:	7610      	strb	r0, [r2, #24]
				parseCnt++;
    2cf0:	3301      	adds	r3, #1
    2cf2:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
    2cf4:	461a      	mov	r2, r3
    2cf6:	8848      	ldrh	r0, [r1, #2]
    2cf8:	3807      	subs	r0, #7
    2cfa:	4283      	cmp	r3, r0
    2cfc:	ddf4      	ble.n	2ce8 <ModemDiagUpdateDataBase+0x24>
			bModemDiagDataBaseUpdated = true;
    2cfe:	4d1a      	ldr	r5, [pc, #104]	; (2d68 <ModemDiagUpdateDataBase+0xa4>)
    2d00:	2601      	movs	r6, #1
    2d02:	462c      	mov	r4, r5
    2d04:	f804 6b18 	strb.w	r6, [r4], #24
			DEBUG_PRINT("Retrieved the Modem serial Number");
    2d08:	4818      	ldr	r0, [pc, #96]	; (2d6c <ModemDiagUpdateDataBase+0xa8>)
    2d0a:	4f19      	ldr	r7, [pc, #100]	; (2d70 <ModemDiagUpdateDataBase+0xac>)
    2d0c:	47b8      	blx	r7
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
    2d0e:	210f      	movs	r1, #15
    2d10:	4620      	mov	r0, r4
    2d12:	4b18      	ldr	r3, [pc, #96]	; (2d74 <ModemDiagUpdateDataBase+0xb0>)
    2d14:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    2d16:	4818      	ldr	r0, [pc, #96]	; (2d78 <ModemDiagUpdateDataBase+0xb4>)
    2d18:	47b8      	blx	r7
			bModemDiagDataBaseUpdated = true;
    2d1a:	702e      	strb	r6, [r5, #0]
    2d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
    2d1e:	4b12      	ldr	r3, [pc, #72]	; (2d68 <ModemDiagUpdateDataBase+0xa4>)
    2d20:	1d1d      	adds	r5, r3, #4
    2d22:	8801      	ldrh	r1, [r0, #0]
    2d24:	7882      	ldrb	r2, [r0, #2]
    2d26:	8099      	strh	r1, [r3, #4]
    2d28:	719a      	strb	r2, [r3, #6]
        	DEBUG_PRINT("Verifying the UART Link status with Modem");
    2d2a:	4814      	ldr	r0, [pc, #80]	; (2d7c <ModemDiagUpdateDataBase+0xb8>)
    2d2c:	4c10      	ldr	r4, [pc, #64]	; (2d70 <ModemDiagUpdateDataBase+0xac>)
    2d2e:	47a0      	blx	r4
        	DEBUG_PRINT("SuccessFully verified the UART Link between SAMD51 Controller & Modem");
    2d30:	4813      	ldr	r0, [pc, #76]	; (2d80 <ModemDiagUpdateDataBase+0xbc>)
    2d32:	47a0      	blx	r4
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
    2d34:	2103      	movs	r1, #3
    2d36:	4628      	mov	r0, r5
    2d38:	4b0e      	ldr	r3, [pc, #56]	; (2d74 <ModemDiagUpdateDataBase+0xb0>)
    2d3a:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    2d3c:	480e      	ldr	r0, [pc, #56]	; (2d78 <ModemDiagUpdateDataBase+0xb4>)
    2d3e:	47a0      	blx	r4
        break;
    2d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
    2d42:	4e09      	ldr	r6, [pc, #36]	; (2d68 <ModemDiagUpdateDataBase+0xa4>)
    2d44:	f106 0508 	add.w	r5, r6, #8
    2d48:	6800      	ldr	r0, [r0, #0]
    2d4a:	6861      	ldr	r1, [r4, #4]
    2d4c:	68a2      	ldr	r2, [r4, #8]
    2d4e:	68e3      	ldr	r3, [r4, #12]
    2d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
    2d52:	480c      	ldr	r0, [pc, #48]	; (2d84 <ModemDiagUpdateDataBase+0xc0>)
    2d54:	4c06      	ldr	r4, [pc, #24]	; (2d70 <ModemDiagUpdateDataBase+0xac>)
    2d56:	47a0      	blx	r4
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
    2d58:	2110      	movs	r1, #16
    2d5a:	f106 0008 	add.w	r0, r6, #8
    2d5e:	4b05      	ldr	r3, [pc, #20]	; (2d74 <ModemDiagUpdateDataBase+0xb0>)
    2d60:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    2d62:	4805      	ldr	r0, [pc, #20]	; (2d78 <ModemDiagUpdateDataBase+0xb4>)
    2d64:	47a0      	blx	r4
        break;
    2d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d68:	2000030c 	.word	0x2000030c
    2d6c:	00009114 	.word	0x00009114
    2d70:	000033b9 	.word	0x000033b9
    2d74:	00003375 	.word	0x00003375
    2d78:	00009394 	.word	0x00009394
    2d7c:	00009080 	.word	0x00009080
    2d80:	000090ac 	.word	0x000090ac
    2d84:	000090f4 	.word	0x000090f4

00002d88 <isModemDiagDataBaseUpdated>:
*
********************************************************************************/
bool isModemDiagDataBaseUpdated(void)
{
	return bModemDiagDataBaseUpdated;
}
    2d88:	4b01      	ldr	r3, [pc, #4]	; (2d90 <isModemDiagDataBaseUpdated+0x8>)
    2d8a:	7818      	ldrb	r0, [r3, #0]
    2d8c:	4770      	bx	lr
    2d8e:	bf00      	nop
    2d90:	2000030c 	.word	0x2000030c

00002d94 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
    2d94:	4b01      	ldr	r3, [pc, #4]	; (2d9c <getModemPowerStatus+0x8>)
    2d96:	7818      	ldrb	r0, [r3, #0]
    2d98:	4770      	bx	lr
    2d9a:	bf00      	nop
    2d9c:	20000338 	.word	0x20000338

00002da0 <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_RESET_MODEM;
    2da0:	4b04      	ldr	r3, [pc, #16]	; (2db4 <modemPowerStateInit+0x14>)
    2da2:	2207      	movs	r2, #7
    2da4:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    2da6:	2200      	movs	r2, #0
    2da8:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_ASSERT;
    2daa:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    2dac:	2201      	movs	r2, #1
    2dae:	70da      	strb	r2, [r3, #3]
    2db0:	4770      	bx	lr
    2db2:	bf00      	nop
    2db4:	20000338 	.word	0x20000338

00002db8 <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
    2db8:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);
    const TickType_t ModemResetToPowerOnWaitDelay = pdMS_TO_TICKS(500UL);

    switch(ModemPwrState)
    2dba:	4b69      	ldr	r3, [pc, #420]	; (2f60 <modemPowerSchedule+0x1a8>)
    2dbc:	781b      	ldrb	r3, [r3, #0]
    2dbe:	2b06      	cmp	r3, #6
    2dc0:	f000 80a1 	beq.w	2f06 <modemPowerSchedule+0x14e>
    2dc4:	2b07      	cmp	r3, #7
    2dc6:	d057      	beq.n	2e78 <modemPowerSchedule+0xc0>
    2dc8:	b103      	cbz	r3, 2dcc <modemPowerSchedule+0x14>
    2dca:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
    2dcc:	4b64      	ldr	r3, [pc, #400]	; (2f60 <modemPowerSchedule+0x1a8>)
    2dce:	785b      	ldrb	r3, [r3, #1]
    2dd0:	2b03      	cmp	r3, #3
    2dd2:	d8fa      	bhi.n	2dca <modemPowerSchedule+0x12>
    2dd4:	e8df f003 	tbb	[pc, r3]
    2dd8:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ddc:	4b61      	ldr	r3, [pc, #388]	; (2f64 <modemPowerSchedule+0x1ac>)
    2dde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2de6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2dea:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    2dee:	4c5e      	ldr	r4, [pc, #376]	; (2f68 <modemPowerSchedule+0x1b0>)
    2df0:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2df4:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2df8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2dfc:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e00:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e04:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    2e08:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e0a:	6299      	str	r1, [r3, #40]	; 0x28
    2e0c:	4857      	ldr	r0, [pc, #348]	; (2f6c <modemPowerSchedule+0x1b4>)
    2e0e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e10:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e14:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e18:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e1c:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e1e:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e20:	6299      	str	r1, [r3, #40]	; 0x28
    2e22:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e24:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e28:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e2c:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2e30:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
    2e32:	2201      	movs	r2, #1
    2e34:	4b4a      	ldr	r3, [pc, #296]	; (2f60 <modemPowerSchedule+0x1a8>)
    2e36:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
    2e38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2e3c:	4b4c      	ldr	r3, [pc, #304]	; (2f70 <modemPowerSchedule+0x1b8>)
    2e3e:	4798      	blx	r3
                }
                break;
    2e40:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2e46:	4b47      	ldr	r3, [pc, #284]	; (2f64 <modemPowerSchedule+0x1ac>)
    2e48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
    2e4c:	2202      	movs	r2, #2
    2e4e:	4b44      	ldr	r3, [pc, #272]	; (2f60 <modemPowerSchedule+0x1a8>)
    2e50:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
    2e52:	2032      	movs	r0, #50	; 0x32
    2e54:	4b46      	ldr	r3, [pc, #280]	; (2f70 <modemPowerSchedule+0x1b8>)
    2e56:	4798      	blx	r3
                }
                break;
    2e58:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
    2e5a:	2203      	movs	r2, #3
    2e5c:	4b40      	ldr	r3, [pc, #256]	; (2f60 <modemPowerSchedule+0x1a8>)
    2e5e:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
    2e60:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2e64:	4b42      	ldr	r3, [pc, #264]	; (2f70 <modemPowerSchedule+0x1b8>)
    2e66:	4798      	blx	r3
                }
                break;
    2e68:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    DEBUG_PRINT("Host Processor and Modem are successfully initialized...\r\n");
    2e6a:	4842      	ldr	r0, [pc, #264]	; (2f74 <modemPowerSchedule+0x1bc>)
    2e6c:	4b42      	ldr	r3, [pc, #264]	; (2f78 <modemPowerSchedule+0x1c0>)
    2e6e:	4798      	blx	r3
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
    2e70:	2204      	movs	r2, #4
    2e72:	4b3b      	ldr	r3, [pc, #236]	; (2f60 <modemPowerSchedule+0x1a8>)
    2e74:	701a      	strb	r2, [r3, #0]
                }
                break;
    2e76:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
    2e78:	4b39      	ldr	r3, [pc, #228]	; (2f60 <modemPowerSchedule+0x1a8>)
    2e7a:	789b      	ldrb	r3, [r3, #2]
    2e7c:	b113      	cbz	r3, 2e84 <modemPowerSchedule+0xcc>
    2e7e:	2b01      	cmp	r3, #1
    2e80:	d028      	beq.n	2ed4 <modemPowerSchedule+0x11c>
    2e82:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2e84:	4b37      	ldr	r3, [pc, #220]	; (2f64 <modemPowerSchedule+0x1ac>)
    2e86:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2e8a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2e8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2e92:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    2e96:	4a34      	ldr	r2, [pc, #208]	; (2f68 <modemPowerSchedule+0x1b0>)
    2e98:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e9c:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ea4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ea8:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2eac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2eb0:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2eb2:	6298      	str	r0, [r3, #40]	; 0x28
    2eb4:	4a2d      	ldr	r2, [pc, #180]	; (2f6c <modemPowerSchedule+0x1b4>)
    2eb6:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2eb8:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ebc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ec0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2ec4:	6199      	str	r1, [r3, #24]

                    /* Apply low level pulse on the RESET pin for 25 ms */
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
    2ec6:	2201      	movs	r2, #1
    2ec8:	4b25      	ldr	r3, [pc, #148]	; (2f60 <modemPowerSchedule+0x1a8>)
    2eca:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
    2ecc:	2019      	movs	r0, #25
    2ece:	4b28      	ldr	r3, [pc, #160]	; (2f70 <modemPowerSchedule+0x1b8>)
    2ed0:	4798      	blx	r3
                }
                break;
    2ed2:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ed4:	4b23      	ldr	r3, [pc, #140]	; (2f64 <modemPowerSchedule+0x1ac>)
    2ed6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2eda:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2edc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ee0:	629a      	str	r2, [r3, #40]	; 0x28
    2ee2:	4a22      	ldr	r2, [pc, #136]	; (2f6c <modemPowerSchedule+0x1b4>)
    2ee4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ee6:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2eea:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2eee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ef2:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
    2ef4:	4b1a      	ldr	r3, [pc, #104]	; (2f60 <modemPowerSchedule+0x1a8>)
    2ef6:	2200      	movs	r2, #0
    2ef8:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    2efa:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemResetToPowerOnWaitDelay);
    2efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2f00:	4b1b      	ldr	r3, [pc, #108]	; (2f70 <modemPowerSchedule+0x1b8>)
    2f02:	4798      	blx	r3
                }
                break;
    2f04:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
    2f06:	4b16      	ldr	r3, [pc, #88]	; (2f60 <modemPowerSchedule+0x1a8>)
    2f08:	78db      	ldrb	r3, [r3, #3]
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	f47f af5d 	bne.w	2dca <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2f10:	4b14      	ldr	r3, [pc, #80]	; (2f64 <modemPowerSchedule+0x1ac>)
    2f12:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2f16:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f1a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2f1e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    2f22:	4a11      	ldr	r2, [pc, #68]	; (2f68 <modemPowerSchedule+0x1b0>)
    2f24:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f28:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f30:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2f34:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2f38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2f3c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f3e:	6298      	str	r0, [r3, #40]	; 0x28
    2f40:	4a0a      	ldr	r2, [pc, #40]	; (2f6c <modemPowerSchedule+0x1b4>)
    2f42:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f44:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f4c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2f50:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    2f52:	2201      	movs	r2, #1
    2f54:	4b02      	ldr	r3, [pc, #8]	; (2f60 <modemPowerSchedule+0x1a8>)
    2f56:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
    2f58:	2019      	movs	r0, #25
    2f5a:	4b05      	ldr	r3, [pc, #20]	; (2f70 <modemPowerSchedule+0x1b8>)
    2f5c:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
    2f5e:	e734      	b.n	2dca <modemPowerSchedule+0x12>
    2f60:	20000338 	.word	0x20000338
    2f64:	41008000 	.word	0x41008000
    2f68:	c0000001 	.word	0xc0000001
    2f6c:	c0000008 	.word	0xc0000008
    2f70:	000060ad 	.word	0x000060ad
    2f74:	00009138 	.word	0x00009138
    2f78:	000033b9 	.word	0x000033b9

00002f7c <packetTransmitPeriodicTimerCallBack>:
*               into a string and returns the string.
*
********************************************************************************/
static void packetTransmitPeriodicTimerCallBack(void* param)
{
	packetTransmitPeriodicTimerExpired = true;
    2f7c:	2201      	movs	r2, #1
    2f7e:	4b01      	ldr	r3, [pc, #4]	; (2f84 <packetTransmitPeriodicTimerCallBack+0x8>)
    2f80:	701a      	strb	r2, [r3, #0]
    2f82:	4770      	bx	lr
    2f84:	2000033c 	.word	0x2000033c

00002f88 <SystemAutoRestartTimerCallBack>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
static void SystemAutoRestartTimerCallBack(void* param)
{
    2f88:	b508      	push	{r3, lr}
	DEBUG_PRINT("Hourly System Restart timer expired. Rebooting the system.\r\n");
    2f8a:	4803      	ldr	r0, [pc, #12]	; (2f98 <SystemAutoRestartTimerCallBack+0x10>)
    2f8c:	4b03      	ldr	r3, [pc, #12]	; (2f9c <SystemAutoRestartTimerCallBack+0x14>)
    2f8e:	4798      	blx	r3
	requestWatchDogForcedReset();
    2f90:	4b03      	ldr	r3, [pc, #12]	; (2fa0 <SystemAutoRestartTimerCallBack+0x18>)
    2f92:	4798      	blx	r3
    2f94:	bd08      	pop	{r3, pc}
    2f96:	bf00      	nop
    2f98:	00009174 	.word	0x00009174
    2f9c:	000033b9 	.word	0x000033b9
    2fa0:	000035f1 	.word	0x000035f1

00002fa4 <ModemProcessTask>:
{
    2fa4:	b570      	push	{r4, r5, r6, lr}
    2fa6:	b082      	sub	sp, #8
    modemPowerStateInit();
    2fa8:	4b23      	ldr	r3, [pc, #140]	; (3038 <ModemProcessTask+0x94>)
    2faa:	4798      	blx	r3
    MdmConnect_HttpConnectionInit();
    2fac:	4b23      	ldr	r3, [pc, #140]	; (303c <ModemProcessTask+0x98>)
    2fae:	4798      	blx	r3
    packetTransmitPeriodicTimerExpired = false;
    2fb0:	2400      	movs	r4, #0
    2fb2:	4b23      	ldr	r3, [pc, #140]	; (3040 <ModemProcessTask+0x9c>)
    2fb4:	701c      	strb	r4, [r3, #0]
    xAutoReloadHourlyTimer   = xTimerCreate("HourlySystemRestartTimer",HOURLY_RESTART_TIMER_LOAD_VALUE,pdTRUE,0,SystemAutoRestartTimerCallBack);
    2fb6:	4b23      	ldr	r3, [pc, #140]	; (3044 <ModemProcessTask+0xa0>)
    2fb8:	9300      	str	r3, [sp, #0]
    2fba:	4623      	mov	r3, r4
    2fbc:	2201      	movs	r2, #1
    2fbe:	4922      	ldr	r1, [pc, #136]	; (3048 <ModemProcessTask+0xa4>)
    2fc0:	4822      	ldr	r0, [pc, #136]	; (304c <ModemProcessTask+0xa8>)
    2fc2:	4e23      	ldr	r6, [pc, #140]	; (3050 <ModemProcessTask+0xac>)
    2fc4:	47b0      	blx	r6
    2fc6:	4605      	mov	r5, r0
    xPacketSendPeriodicTimer = xTimerCreate("PacketTransmitPeriodicTimer",PACKET_SEND_TIMER_LOAD_VALUE,pdTRUE,0,packetTransmitPeriodicTimerCallBack);
    2fc8:	4b22      	ldr	r3, [pc, #136]	; (3054 <ModemProcessTask+0xb0>)
    2fca:	9300      	str	r3, [sp, #0]
    2fcc:	4623      	mov	r3, r4
    2fce:	2201      	movs	r2, #1
    2fd0:	f241 7170 	movw	r1, #6000	; 0x1770
    2fd4:	4820      	ldr	r0, [pc, #128]	; (3058 <ModemProcessTask+0xb4>)
    2fd6:	47b0      	blx	r6
    if((xPacketSendPeriodicTimer != NULL) &&
    2fd8:	b1b0      	cbz	r0, 3008 <ModemProcessTask+0x64>
    2fda:	4604      	mov	r4, r0
    2fdc:	b1a5      	cbz	r5, 3008 <ModemProcessTask+0x64>
    	if((pdPASS == xTimerStart(xAutoReloadHourlyTimer,0)) &&
    2fde:	4b1f      	ldr	r3, [pc, #124]	; (305c <ModemProcessTask+0xb8>)
    2fe0:	4798      	blx	r3
    2fe2:	2300      	movs	r3, #0
    2fe4:	9300      	str	r3, [sp, #0]
    2fe6:	4602      	mov	r2, r0
    2fe8:	2101      	movs	r1, #1
    2fea:	4628      	mov	r0, r5
    2fec:	4d1c      	ldr	r5, [pc, #112]	; (3060 <ModemProcessTask+0xbc>)
    2fee:	47a8      	blx	r5
    2ff0:	2801      	cmp	r0, #1
    2ff2:	d109      	bne.n	3008 <ModemProcessTask+0x64>
		   (pdPASS == xTimerStart(xPacketSendPeriodicTimer,0)))
    2ff4:	4b19      	ldr	r3, [pc, #100]	; (305c <ModemProcessTask+0xb8>)
    2ff6:	4798      	blx	r3
    2ff8:	2300      	movs	r3, #0
    2ffa:	9300      	str	r3, [sp, #0]
    2ffc:	4602      	mov	r2, r0
    2ffe:	2101      	movs	r1, #1
    3000:	4620      	mov	r0, r4
    3002:	47a8      	blx	r5
    if(false == initializeModemTimers())
    3004:	2801      	cmp	r0, #1
    3006:	d004      	beq.n	3012 <ModemProcessTask+0x6e>
    	DEBUG_PRINT("Failed to initialize the modem timers. Rebooting the system");
    3008:	4816      	ldr	r0, [pc, #88]	; (3064 <ModemProcessTask+0xc0>)
    300a:	4b17      	ldr	r3, [pc, #92]	; (3068 <ModemProcessTask+0xc4>)
    300c:	4798      	blx	r3
    	requestWatchDogForcedReset();
    300e:	4b17      	ldr	r3, [pc, #92]	; (306c <ModemProcessTask+0xc8>)
    3010:	4798      	blx	r3
        modemPowerSchedule();
    3012:	4d17      	ldr	r5, [pc, #92]	; (3070 <ModemProcessTask+0xcc>)
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    3014:	4c17      	ldr	r4, [pc, #92]	; (3074 <ModemProcessTask+0xd0>)
           (false != isFotaVerificationDone()))
    3016:	4e18      	ldr	r6, [pc, #96]	; (3078 <ModemProcessTask+0xd4>)
        modemPowerSchedule();
    3018:	47a8      	blx	r5
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    301a:	47a0      	blx	r4
    301c:	2804      	cmp	r0, #4
    301e:	d1fb      	bne.n	3018 <ModemProcessTask+0x74>
           (false != isFotaVerificationDone()))
    3020:	47b0      	blx	r6
        if((getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS) &&
    3022:	2800      	cmp	r0, #0
    3024:	d0f8      	beq.n	3018 <ModemProcessTask+0x74>
            MdmConnect_HttpConnectionSchedule();
    3026:	4b15      	ldr	r3, [pc, #84]	; (307c <ModemProcessTask+0xd8>)
    3028:	4798      	blx	r3
			kickWatchDog();
    302a:	4b15      	ldr	r3, [pc, #84]	; (3080 <ModemProcessTask+0xdc>)
    302c:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    302e:	2064      	movs	r0, #100	; 0x64
    3030:	4b14      	ldr	r3, [pc, #80]	; (3084 <ModemProcessTask+0xe0>)
    3032:	4798      	blx	r3
    3034:	e7f0      	b.n	3018 <ModemProcessTask+0x74>
    3036:	bf00      	nop
    3038:	00002da1 	.word	0x00002da1
    303c:	000016ed 	.word	0x000016ed
    3040:	2000033c 	.word	0x2000033c
    3044:	00002f89 	.word	0x00002f89
    3048:	0036ee80 	.word	0x0036ee80
    304c:	000091b4 	.word	0x000091b4
    3050:	0000686d 	.word	0x0000686d
    3054:	00002f7d 	.word	0x00002f7d
    3058:	000091d0 	.word	0x000091d0
    305c:	00005e6d 	.word	0x00005e6d
    3060:	000068c1 	.word	0x000068c1
    3064:	000091ec 	.word	0x000091ec
    3068:	000033b9 	.word	0x000033b9
    306c:	000035f1 	.word	0x000035f1
    3070:	00002db9 	.word	0x00002db9
    3074:	00002d95 	.word	0x00002d95
    3078:	000010bd 	.word	0x000010bd
    307c:	000021ed 	.word	0x000021ed
    3080:	000035b1 	.word	0x000035b1
    3084:	000060ad 	.word	0x000060ad

00003088 <clearPacketTransmitTimerExpiryFlag>:
	packetTransmitPeriodicTimerExpired = false;
    3088:	2200      	movs	r2, #0
    308a:	4b01      	ldr	r3, [pc, #4]	; (3090 <clearPacketTransmitTimerExpiryFlag+0x8>)
    308c:	701a      	strb	r2, [r3, #0]
    308e:	4770      	bx	lr
    3090:	2000033c 	.word	0x2000033c

00003094 <isPacketTransmitTimerExpired>:
}
    3094:	4b01      	ldr	r3, [pc, #4]	; (309c <isPacketTransmitTimerExpired+0x8>)
    3096:	7818      	ldrb	r0, [r3, #0]
    3098:	4770      	bx	lr
    309a:	bf00      	nop
    309c:	2000033c 	.word	0x2000033c

000030a0 <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
    30a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30a2:	4606      	mov	r6, r0
    30a4:	460c      	mov	r4, r1
    30a6:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	BaseType_t FotaResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
    30a8:	4936      	ldr	r1, [pc, #216]	; (3184 <modemResponseHandler+0xe4>)
    30aa:	4b37      	ldr	r3, [pc, #220]	; (3188 <modemResponseHandler+0xe8>)
    30ac:	4798      	blx	r3

    if(response != NULL)
    30ae:	2c00      	cmp	r4, #0
    30b0:	d064      	beq.n	317c <modemResponseHandler+0xdc>
    {
        switch (cmdData.cmdSet)
    30b2:	4b34      	ldr	r3, [pc, #208]	; (3184 <modemResponseHandler+0xe4>)
    30b4:	785b      	ldrb	r3, [r3, #1]
    30b6:	2b01      	cmp	r3, #1
    30b8:	d019      	beq.n	30ee <modemResponseHandler+0x4e>
    30ba:	b113      	cbz	r3, 30c2 <modemResponseHandler+0x22>
    30bc:	2b02      	cmp	r3, #2
    30be:	d03a      	beq.n	3136 <modemResponseHandler+0x96>
    30c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
    30c2:	4f30      	ldr	r7, [pc, #192]	; (3184 <modemResponseHandler+0xe4>)
    30c4:	753e      	strb	r6, [r7, #20]
            	cmdResponse.length = length;
    30c6:	82fd      	strh	r5, [r7, #22]
            	memset(responseBuffer,0,700);
    30c8:	f107 061c 	add.w	r6, r7, #28
    30cc:	f44f 722f 	mov.w	r2, #700	; 0x2bc
    30d0:	2100      	movs	r1, #0
    30d2:	4630      	mov	r0, r6
    30d4:	4b2d      	ldr	r3, [pc, #180]	; (318c <modemResponseHandler+0xec>)
    30d6:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
    30d8:	462a      	mov	r2, r5
    30da:	4621      	mov	r1, r4
    30dc:	4630      	mov	r0, r6
    30de:	4b2c      	ldr	r3, [pc, #176]	; (3190 <modemResponseHandler+0xf0>)
    30e0:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
    30e2:	f107 0114 	add.w	r1, r7, #20
    30e6:	4630      	mov	r0, r6
    30e8:	4b2a      	ldr	r3, [pc, #168]	; (3194 <modemResponseHandler+0xf4>)
    30ea:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
    30ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
    30ee:	4b2a      	ldr	r3, [pc, #168]	; (3198 <modemResponseHandler+0xf8>)
    30f0:	6818      	ldr	r0, [r3, #0]
    30f2:	4b2a      	ldr	r3, [pc, #168]	; (319c <modemResponseHandler+0xfc>)
    30f4:	4798      	blx	r3
    30f6:	b9d0      	cbnz	r0, 312e <modemResponseHandler+0x8e>
                {
                	cmdResponse.atCmd = cmd;
    30f8:	4f22      	ldr	r7, [pc, #136]	; (3184 <modemResponseHandler+0xe4>)
    30fa:	753e      	strb	r6, [r7, #20]
                	cmdResponse.length = length;
    30fc:	82fd      	strh	r5, [r7, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    30fe:	4628      	mov	r0, r5
    3100:	4b27      	ldr	r3, [pc, #156]	; (31a0 <modemResponseHandler+0x100>)
    3102:	4798      	blx	r3
    3104:	61b8      	str	r0, [r7, #24]

                	if(cmdResponse.response != NULL)
    3106:	2800      	cmp	r0, #0
    3108:	d03b      	beq.n	3182 <modemResponseHandler+0xe2>
                	{
                		memcpy(cmdResponse.response,response,length);
    310a:	462a      	mov	r2, r5
    310c:	4621      	mov	r1, r4
    310e:	4b20      	ldr	r3, [pc, #128]	; (3190 <modemResponseHandler+0xf0>)
    3110:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
    3112:	2300      	movs	r3, #0
    3114:	2264      	movs	r2, #100	; 0x64
    3116:	f107 0114 	add.w	r1, r7, #20
    311a:	481f      	ldr	r0, [pc, #124]	; (3198 <modemResponseHandler+0xf8>)
    311c:	6800      	ldr	r0, [r0, #0]
    311e:	4c21      	ldr	r4, [pc, #132]	; (31a4 <modemResponseHandler+0x104>)
    3120:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
    3122:	2801      	cmp	r0, #1
    3124:	d02d      	beq.n	3182 <modemResponseHandler+0xe2>
                		{
                			//DEBUG_PRINT("Successfully posted connection Response to Queue");
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
    3126:	4820      	ldr	r0, [pc, #128]	; (31a8 <modemResponseHandler+0x108>)
    3128:	4b20      	ldr	r3, [pc, #128]	; (31ac <modemResponseHandler+0x10c>)
    312a:	4798      	blx	r3
    312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    312e:	4820      	ldr	r0, [pc, #128]	; (31b0 <modemResponseHandler+0x110>)
    3130:	4b1e      	ldr	r3, [pc, #120]	; (31ac <modemResponseHandler+0x10c>)
    3132:	4798      	blx	r3
    3134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            }
            break;

            case AT_CMD_SET_FOTA_APP:
            {
                if (uxQueueMessagesWaiting(FotaResponseQueue) == 0)
    3136:	4b1f      	ldr	r3, [pc, #124]	; (31b4 <modemResponseHandler+0x114>)
    3138:	6818      	ldr	r0, [r3, #0]
    313a:	4b18      	ldr	r3, [pc, #96]	; (319c <modemResponseHandler+0xfc>)
    313c:	4798      	blx	r3
    313e:	b9c8      	cbnz	r0, 3174 <modemResponseHandler+0xd4>
                {
                	cmdResponse.atCmd = cmd;
    3140:	4f10      	ldr	r7, [pc, #64]	; (3184 <modemResponseHandler+0xe4>)
    3142:	753e      	strb	r6, [r7, #20]
                	cmdResponse.length = length;
    3144:	82fd      	strh	r5, [r7, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    3146:	4628      	mov	r0, r5
    3148:	4b15      	ldr	r3, [pc, #84]	; (31a0 <modemResponseHandler+0x100>)
    314a:	4798      	blx	r3
    314c:	61b8      	str	r0, [r7, #24]

                	if(cmdResponse.response != NULL)
    314e:	b1c0      	cbz	r0, 3182 <modemResponseHandler+0xe2>
                	{
                		memcpy(cmdResponse.response,response,length);
    3150:	462a      	mov	r2, r5
    3152:	4621      	mov	r1, r4
    3154:	4b0e      	ldr	r3, [pc, #56]	; (3190 <modemResponseHandler+0xf0>)
    3156:	4798      	blx	r3
                		FotaResponseQueuePushStatus = xQueueSendToBack(FotaResponseQueue, &cmdResponse, QueuePushDelayMs);
    3158:	2300      	movs	r3, #0
    315a:	2264      	movs	r2, #100	; 0x64
    315c:	f107 0114 	add.w	r1, r7, #20
    3160:	4814      	ldr	r0, [pc, #80]	; (31b4 <modemResponseHandler+0x114>)
    3162:	6800      	ldr	r0, [r0, #0]
    3164:	4c0f      	ldr	r4, [pc, #60]	; (31a4 <modemResponseHandler+0x104>)
    3166:	47a0      	blx	r4

                		if(FotaResponseQueuePushStatus == pdPASS)
    3168:	2801      	cmp	r0, #1
    316a:	d00a      	beq.n	3182 <modemResponseHandler+0xe2>
                		{
                			//DEBUG_PRINT("Successfully posted connection Response to Queue");
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Fota Queue");
    316c:	4812      	ldr	r0, [pc, #72]	; (31b8 <modemResponseHandler+0x118>)
    316e:	4b0f      	ldr	r3, [pc, #60]	; (31ac <modemResponseHandler+0x10c>)
    3170:	4798      	blx	r3
    3172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    3174:	480e      	ldr	r0, [pc, #56]	; (31b0 <modemResponseHandler+0x110>)
    3176:	4b0d      	ldr	r3, [pc, #52]	; (31ac <modemResponseHandler+0x10c>)
    3178:	4798      	blx	r3
    317a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
    317c:	480f      	ldr	r0, [pc, #60]	; (31bc <modemResponseHandler+0x11c>)
    317e:	4b0b      	ldr	r3, [pc, #44]	; (31ac <modemResponseHandler+0x10c>)
    3180:	4798      	blx	r3
    3182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3184:	20000340 	.word	0x20000340
    3188:	0000143d 	.word	0x0000143d
    318c:	00006c83 	.word	0x00006c83
    3190:	00006c39 	.word	0x00006c39
    3194:	00002cc5 	.word	0x00002cc5
    3198:	20003564 	.word	0x20003564
    319c:	00005a95 	.word	0x00005a95
    31a0:	00005015 	.word	0x00005015
    31a4:	0000541d 	.word	0x0000541d
    31a8:	00009228 	.word	0x00009228
    31ac:	000033b9 	.word	0x000033b9
    31b0:	00009258 	.word	0x00009258
    31b4:	20003594 	.word	0x20003594
    31b8:	00009284 	.word	0x00009284
    31bc:	000092bc 	.word	0x000092bc

000031c0 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Application/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
    31c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31c2:	b087      	sub	sp, #28

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    31c4:	4c10      	ldr	r4, [pc, #64]	; (3208 <ModemRxTask+0x48>)
		
		if(xResult == pdPASS)
		{
			getModemCommandData(atCmd, &cmdData);
    31c6:	4f11      	ldr	r7, [pc, #68]	; (320c <ModemRxTask+0x4c>)

			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    31c8:	4e11      	ldr	r6, [pc, #68]	; (3210 <ModemRxTask+0x50>)
    31ca:	e001      	b.n	31d0 <ModemRxTask+0x10>
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
		}
		kickWatchDog();
    31cc:	4b11      	ldr	r3, [pc, #68]	; (3214 <ModemRxTask+0x54>)
    31ce:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    31d0:	f04f 33ff 	mov.w	r3, #4294967295
    31d4:	f10d 0217 	add.w	r2, sp, #23
    31d8:	4619      	mov	r1, r3
    31da:	2000      	movs	r0, #0
    31dc:	47a0      	blx	r4
		if(xResult == pdPASS)
    31de:	2801      	cmp	r0, #1
    31e0:	d1f4      	bne.n	31cc <ModemRxTask+0xc>
			getModemCommandData(atCmd, &cmdData);
    31e2:	4669      	mov	r1, sp
    31e4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    31e8:	47b8      	blx	r7
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    31ea:	f89d 0000 	ldrb.w	r0, [sp]
    31ee:	47b0      	blx	r6
    31f0:	2800      	cmp	r0, #0
    31f2:	d1eb      	bne.n	31cc <ModemRxTask+0xc>
				DEBUG_PRINT("ERROR: Command Parsing Failed");
    31f4:	4808      	ldr	r0, [pc, #32]	; (3218 <ModemRxTask+0x58>)
    31f6:	4d09      	ldr	r5, [pc, #36]	; (321c <ModemRxTask+0x5c>)
    31f8:	47a8      	blx	r5
				DEBUG_PRINT("\r\nNot able to auto recover from connection failure...Rebooting....");
    31fa:	4809      	ldr	r0, [pc, #36]	; (3220 <ModemRxTask+0x60>)
    31fc:	47a8      	blx	r5
				DEBUG_PRINT("\r\n");
    31fe:	4809      	ldr	r0, [pc, #36]	; (3224 <ModemRxTask+0x64>)
    3200:	47a8      	blx	r5
				requestWatchDogForcedReset();
    3202:	4b09      	ldr	r3, [pc, #36]	; (3228 <ModemRxTask+0x68>)
    3204:	4798      	blx	r3
    3206:	e7e1      	b.n	31cc <ModemRxTask+0xc>
    3208:	000065ad 	.word	0x000065ad
    320c:	0000143d 	.word	0x0000143d
    3210:	00001585 	.word	0x00001585
    3214:	000035b1 	.word	0x000035b1
    3218:	00009304 	.word	0x00009304
    321c:	000033b9 	.word	0x000033b9
    3220:	00009324 	.word	0x00009324
    3224:	00009394 	.word	0x00009394
    3228:	000035f1 	.word	0x000035f1

0000322c <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
    322c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(100UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
    322e:	2300      	movs	r3, #0
    3230:	461a      	mov	r2, r3
    3232:	4619      	mov	r1, r3
    3234:	481f      	ldr	r0, [pc, #124]	; (32b4 <ModemTxTask+0x88>)
    3236:	6800      	ldr	r0, [r0, #0]
    3238:	4c1f      	ldr	r4, [pc, #124]	; (32b8 <ModemTxTask+0x8c>)
    323a:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    323c:	4c1f      	ldr	r4, [pc, #124]	; (32bc <ModemTxTask+0x90>)
	
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
		{
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    323e:	4d20      	ldr	r5, [pc, #128]	; (32c0 <ModemTxTask+0x94>)
** Description:        Transmits Data to Modem
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	getModemCommandData(atCmd, &ModemCmdData);
    3240:	f105 0608 	add.w	r6, r5, #8
    3244:	e004      	b.n	3250 <ModemTxTask+0x24>
			kickWatchDog();
    3246:	4b1f      	ldr	r3, [pc, #124]	; (32c4 <ModemTxTask+0x98>)
    3248:	4798      	blx	r3
			vTaskDelay(xDelayMs);
    324a:	2064      	movs	r0, #100	; 0x64
    324c:	4b1e      	ldr	r3, [pc, #120]	; (32c8 <ModemTxTask+0x9c>)
    324e:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    3250:	47a0      	blx	r4
    3252:	2804      	cmp	r0, #4
    3254:	d1fc      	bne.n	3250 <ModemTxTask+0x24>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
    3256:	4b1d      	ldr	r3, [pc, #116]	; (32cc <ModemTxTask+0xa0>)
    3258:	6818      	ldr	r0, [r3, #0]
    325a:	4b1d      	ldr	r3, [pc, #116]	; (32d0 <ModemTxTask+0xa4>)
    325c:	4798      	blx	r3
    325e:	2800      	cmp	r0, #0
    3260:	d0f1      	beq.n	3246 <ModemTxTask+0x1a>
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    3262:	2100      	movs	r1, #0
    3264:	4b13      	ldr	r3, [pc, #76]	; (32b4 <ModemTxTask+0x88>)
    3266:	6818      	ldr	r0, [r3, #0]
    3268:	4b1a      	ldr	r3, [pc, #104]	; (32d4 <ModemTxTask+0xa8>)
    326a:	4798      	blx	r3
    326c:	2801      	cmp	r0, #1
    326e:	d1ea      	bne.n	3246 <ModemTxTask+0x1a>
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    3270:	2264      	movs	r2, #100	; 0x64
    3272:	4629      	mov	r1, r5
    3274:	4b15      	ldr	r3, [pc, #84]	; (32cc <ModemTxTask+0xa0>)
    3276:	6818      	ldr	r0, [r3, #0]
    3278:	4b17      	ldr	r3, [pc, #92]	; (32d8 <ModemTxTask+0xac>)
    327a:	4798      	blx	r3
			if(xResult == pdPASS)
    327c:	2801      	cmp	r0, #1
    327e:	d1e2      	bne.n	3246 <ModemTxTask+0x1a>
				ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
    3280:	786f      	ldrb	r7, [r5, #1]
	getModemCommandData(atCmd, &ModemCmdData);
    3282:	4631      	mov	r1, r6
    3284:	4638      	mov	r0, r7
    3286:	4b15      	ldr	r3, [pc, #84]	; (32dc <ModemTxTask+0xb0>)
    3288:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
    328a:	4b15      	ldr	r3, [pc, #84]	; (32e0 <ModemTxTask+0xb4>)
    328c:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
    328e:	7c29      	ldrb	r1, [r5, #16]
    3290:	68e8      	ldr	r0, [r5, #12]
    3292:	4b14      	ldr	r3, [pc, #80]	; (32e4 <ModemTxTask+0xb8>)
    3294:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
    3296:	4638      	mov	r0, r7
    3298:	4b13      	ldr	r3, [pc, #76]	; (32e8 <ModemTxTask+0xbc>)
    329a:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
    329c:	2000      	movs	r0, #0
    329e:	4b13      	ldr	r3, [pc, #76]	; (32ec <ModemTxTask+0xc0>)
    32a0:	4798      	blx	r3
				xSemaphoreGive(AtTxQueueLoadSemaphore);				
    32a2:	2300      	movs	r3, #0
    32a4:	461a      	mov	r2, r3
    32a6:	4619      	mov	r1, r3
    32a8:	4802      	ldr	r0, [pc, #8]	; (32b4 <ModemTxTask+0x88>)
    32aa:	6800      	ldr	r0, [r0, #0]
    32ac:	4f02      	ldr	r7, [pc, #8]	; (32b8 <ModemTxTask+0x8c>)
    32ae:	47b8      	blx	r7
    32b0:	e7c9      	b.n	3246 <ModemTxTask+0x1a>
    32b2:	bf00      	nop
    32b4:	2000359c 	.word	0x2000359c
    32b8:	0000541d 	.word	0x0000541d
    32bc:	00002d95 	.word	0x00002d95
    32c0:	2000061c 	.word	0x2000061c
    32c4:	000035b1 	.word	0x000035b1
    32c8:	000060ad 	.word	0x000060ad
    32cc:	20003588 	.word	0x20003588
    32d0:	00005a95 	.word	0x00005a95
    32d4:	000058b5 	.word	0x000058b5
    32d8:	0000572d 	.word	0x0000572d
    32dc:	0000143d 	.word	0x0000143d
    32e0:	00002ab1 	.word	0x00002ab1
    32e4:	00002a35 	.word	0x00002a35
    32e8:	00001679 	.word	0x00001679
    32ec:	0000166d 	.word	0x0000166d

000032f0 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Application/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
    32f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32f4:	4604      	mov	r4, r0
    32f6:	460e      	mov	r6, r1
    32f8:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
    32fa:	4d0e      	ldr	r5, [pc, #56]	; (3334 <usart_async_write+0x44>)
    32fc:	4620      	mov	r0, r4
    32fe:	47a8      	blx	r5
    3300:	2800      	cmp	r0, #0
    3302:	d0fb      	beq.n	32fc <usart_async_write+0xc>
    3304:	3e01      	subs	r6, #1
    3306:	f8df 8030 	ldr.w	r8, [pc, #48]	; 3338 <usart_async_write+0x48>
    330a:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
    330c:	f8df a02c 	ldr.w	sl, [pc, #44]	; 333c <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
    3310:	4d08      	ldr	r5, [pc, #32]	; (3334 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
    3312:	7873      	ldrb	r3, [r6, #1]
    3314:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
    3318:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    331c:	4620      	mov	r0, r4
    331e:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
    3320:	4620      	mov	r0, r4
    3322:	47a8      	blx	r5
    3324:	2800      	cmp	r0, #0
    3326:	d0fb      	beq.n	3320 <usart_async_write+0x30>
		;
	} while (++offset < length);
    3328:	3701      	adds	r7, #1
    332a:	454f      	cmp	r7, r9
    332c:	d3f1      	bcc.n	3312 <usart_async_write+0x22>

	return (int32_t)offset;
}
    332e:	4638      	mov	r0, r7
    3330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3334:	000045d7 	.word	0x000045d7
    3338:	20000638 	.word	0x20000638
    333c:	000045c9 	.word	0x000045c9

00003340 <SerialDebugTxByteSentCallBack>:
    3340:	2302      	movs	r3, #2
    3342:	7603      	strb	r3, [r0, #24]
    3344:	4770      	bx	lr

00003346 <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    3346:	2380      	movs	r3, #128	; 0x80
    3348:	7603      	strb	r3, [r0, #24]
    334a:	4770      	bx	lr

0000334c <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
    334c:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
    334e:	4c05      	ldr	r4, [pc, #20]	; (3364 <SerialDebugPrintInit+0x18>)
    3350:	4905      	ldr	r1, [pc, #20]	; (3368 <SerialDebugPrintInit+0x1c>)
    3352:	4620      	mov	r0, r4
    3354:	4b05      	ldr	r3, [pc, #20]	; (336c <SerialDebugPrintInit+0x20>)
    3356:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
    3358:	2201      	movs	r2, #1
    335a:	4611      	mov	r1, r2
    335c:	4620      	mov	r0, r4
    335e:	4b04      	ldr	r3, [pc, #16]	; (3370 <SerialDebugPrintInit+0x24>)
    3360:	4798      	blx	r3
    3362:	bd10      	pop	{r4, pc}
    3364:	20000068 	.word	0x20000068
    3368:	43000400 	.word	0x43000400
    336c:	00004541 	.word	0x00004541
    3370:	000045ed 	.word	0x000045ed

00003374 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
    3374:	b570      	push	{r4, r5, r6, lr}
    3376:	4605      	mov	r5, r0
    3378:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
    337a:	4c05      	ldr	r4, [pc, #20]	; (3390 <SerialDebugPrint+0x1c>)
    337c:	4620      	mov	r0, r4
    337e:	4b05      	ldr	r3, [pc, #20]	; (3394 <SerialDebugPrint+0x20>)
    3380:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
    3382:	4632      	mov	r2, r6
    3384:	4629      	mov	r1, r5
    3386:	4620      	mov	r0, r4
    3388:	4b03      	ldr	r3, [pc, #12]	; (3398 <SerialDebugPrint+0x24>)
    338a:	4798      	blx	r3
    338c:	bd70      	pop	{r4, r5, r6, pc}
    338e:	bf00      	nop
    3390:	20000068 	.word	0x20000068
    3394:	000045b5 	.word	0x000045b5
    3398:	000032f1 	.word	0x000032f1

0000339c <SerialDebugTxDoneCallBack>:
{
    339c:	b510      	push	{r4, lr}
    339e:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    33a0:	2116      	movs	r1, #22
    33a2:	4803      	ldr	r0, [pc, #12]	; (33b0 <SerialDebugTxDoneCallBack+0x14>)
    33a4:	4b03      	ldr	r3, [pc, #12]	; (33b4 <SerialDebugTxDoneCallBack+0x18>)
    33a6:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    33a8:	2301      	movs	r3, #1
    33aa:	7623      	strb	r3, [r4, #24]
    33ac:	bd10      	pop	{r4, pc}
    33ae:	bf00      	nop
    33b0:	00009368 	.word	0x00009368
    33b4:	00003375 	.word	0x00003375

000033b8 <SerialStringPrint>:
}

void SerialStringPrint(const uint8_t *const dataToPrint)
{
    33b8:	b570      	push	{r4, r5, r6, lr}
    33ba:	4605      	mov	r5, r0
	#ifdef SERIAL_DEBUG_ON
	
	uint8_t strLength;
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);
	uint8_t* dbgBuffer = NULL;
	strLength = strlen(dataToPrint);
    33bc:	4b17      	ldr	r3, [pc, #92]	; (341c <SerialStringPrint+0x64>)
    33be:	4798      	blx	r3
    33c0:	4604      	mov	r4, r0

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    33c2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    33c6:	4b16      	ldr	r3, [pc, #88]	; (3420 <SerialStringPrint+0x68>)
    33c8:	6818      	ldr	r0, [r3, #0]
    33ca:	4b16      	ldr	r3, [pc, #88]	; (3424 <SerialStringPrint+0x6c>)
    33cc:	4798      	blx	r3
    33ce:	2801      	cmp	r0, #1
    33d0:	d000      	beq.n	33d4 <SerialStringPrint+0x1c>
    33d2:	bd70      	pop	{r4, r5, r6, pc}
    33d4:	b2e4      	uxtb	r4, r4
    {
		dbgBuffer = (uint8_t*)pvPortMalloc((strLength)*(sizeof(uint8_t)));
    33d6:	4620      	mov	r0, r4
    33d8:	4b13      	ldr	r3, [pc, #76]	; (3428 <SerialStringPrint+0x70>)
    33da:	4798      	blx	r3
		
		if(dbgBuffer != NULL)
    33dc:	4606      	mov	r6, r0
    33de:	b1a0      	cbz	r0, 340a <SerialStringPrint+0x52>
		{
	    	memset(dbgBuffer,'\0',strLength);
    33e0:	4622      	mov	r2, r4
    33e2:	2100      	movs	r1, #0
    33e4:	4b11      	ldr	r3, [pc, #68]	; (342c <SerialStringPrint+0x74>)
    33e6:	4798      	blx	r3
	    	sprintf((int8_t*)dbgBuffer,"%s",dataToPrint);
    33e8:	4629      	mov	r1, r5
    33ea:	4630      	mov	r0, r6
    33ec:	4b10      	ldr	r3, [pc, #64]	; (3430 <SerialStringPrint+0x78>)
    33ee:	4798      	blx	r3
	    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    33f0:	4630      	mov	r0, r6
    33f2:	4b0a      	ldr	r3, [pc, #40]	; (341c <SerialStringPrint+0x64>)
    33f4:	4798      	blx	r3
    33f6:	b281      	uxth	r1, r0
    33f8:	4630      	mov	r0, r6
    33fa:	4c0e      	ldr	r4, [pc, #56]	; (3434 <SerialStringPrint+0x7c>)
    33fc:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    33fe:	2102      	movs	r1, #2
    3400:	480d      	ldr	r0, [pc, #52]	; (3438 <SerialStringPrint+0x80>)
    3402:	47a0      	blx	r4
	    	vPortFree(dbgBuffer);			
    3404:	4630      	mov	r0, r6
    3406:	4b0d      	ldr	r3, [pc, #52]	; (343c <SerialStringPrint+0x84>)
    3408:	4798      	blx	r3
		}
    	xSemaphoreGive(DebugPrintMutex);
    340a:	2300      	movs	r3, #0
    340c:	461a      	mov	r2, r3
    340e:	4619      	mov	r1, r3
    3410:	4803      	ldr	r0, [pc, #12]	; (3420 <SerialStringPrint+0x68>)
    3412:	6800      	ldr	r0, [r0, #0]
    3414:	4c0a      	ldr	r4, [pc, #40]	; (3440 <SerialStringPrint+0x88>)
    3416:	47a0      	blx	r4
    }
	
	#endif
}
    3418:	e7db      	b.n	33d2 <SerialStringPrint+0x1a>
    341a:	bf00      	nop
    341c:	00006e65 	.word	0x00006e65
    3420:	20003590 	.word	0x20003590
    3424:	000058b5 	.word	0x000058b5
    3428:	00005015 	.word	0x00005015
    342c:	00006c83 	.word	0x00006c83
    3430:	00006e55 	.word	0x00006e55
    3434:	00003375 	.word	0x00003375
    3438:	00009394 	.word	0x00009394
    343c:	000050f5 	.word	0x000050f5
    3440:	0000541d 	.word	0x0000541d

00003444 <ConsoleDebugPrint>:

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
    3444:	b530      	push	{r4, r5, lr}
    3446:	b09b      	sub	sp, #108	; 0x6c
    3448:	4605      	mov	r5, r0
    344a:	460c      	mov	r4, r1
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    344c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3450:	4b11      	ldr	r3, [pc, #68]	; (3498 <ConsoleDebugPrint+0x54>)
    3452:	6818      	ldr	r0, [r3, #0]
    3454:	4b11      	ldr	r3, [pc, #68]	; (349c <ConsoleDebugPrint+0x58>)
    3456:	4798      	blx	r3
    3458:	2801      	cmp	r0, #1
    345a:	d001      	beq.n	3460 <ConsoleDebugPrint+0x1c>
    		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    	}
    	xSemaphoreGive(DebugPrintMutex);
    }
}
    345c:	b01b      	add	sp, #108	; 0x6c
    345e:	bd30      	pop	{r4, r5, pc}
    	memset(dbgBuffer,'\0',100);
    3460:	2264      	movs	r2, #100	; 0x64
    3462:	2100      	movs	r1, #0
    3464:	a801      	add	r0, sp, #4
    3466:	4b0e      	ldr	r3, [pc, #56]	; (34a0 <ConsoleDebugPrint+0x5c>)
    3468:	4798      	blx	r3
    	if(intData != 0)
    346a:	b93c      	cbnz	r4, 347c <ConsoleDebugPrint+0x38>
    	xSemaphoreGive(DebugPrintMutex);
    346c:	2300      	movs	r3, #0
    346e:	461a      	mov	r2, r3
    3470:	4619      	mov	r1, r3
    3472:	4809      	ldr	r0, [pc, #36]	; (3498 <ConsoleDebugPrint+0x54>)
    3474:	6800      	ldr	r0, [r0, #0]
    3476:	4c0b      	ldr	r4, [pc, #44]	; (34a4 <ConsoleDebugPrint+0x60>)
    3478:	47a0      	blx	r4
}
    347a:	e7ef      	b.n	345c <ConsoleDebugPrint+0x18>
    		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    347c:	4623      	mov	r3, r4
    347e:	462a      	mov	r2, r5
    3480:	4909      	ldr	r1, [pc, #36]	; (34a8 <ConsoleDebugPrint+0x64>)
    3482:	a801      	add	r0, sp, #4
    3484:	4c09      	ldr	r4, [pc, #36]	; (34ac <ConsoleDebugPrint+0x68>)
    3486:	47a0      	blx	r4
    		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    3488:	a801      	add	r0, sp, #4
    348a:	4b09      	ldr	r3, [pc, #36]	; (34b0 <ConsoleDebugPrint+0x6c>)
    348c:	4798      	blx	r3
    348e:	b281      	uxth	r1, r0
    3490:	a801      	add	r0, sp, #4
    3492:	4b08      	ldr	r3, [pc, #32]	; (34b4 <ConsoleDebugPrint+0x70>)
    3494:	4798      	blx	r3
    3496:	e7e9      	b.n	346c <ConsoleDebugPrint+0x28>
    3498:	20003590 	.word	0x20003590
    349c:	000058b5 	.word	0x000058b5
    34a0:	00006c83 	.word	0x00006c83
    34a4:	0000541d 	.word	0x0000541d
    34a8:	0000938c 	.word	0x0000938c
    34ac:	00006e0d 	.word	0x00006e0d
    34b0:	00006e65 	.word	0x00006e65
    34b4:	00003375 	.word	0x00003375

000034b8 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    34b8:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    34ba:	2204      	movs	r2, #4
    34bc:	4b0b      	ldr	r3, [pc, #44]	; (34ec <SERCOM5_2_Handler+0x34>)
    34be:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    34c0:	4d0b      	ldr	r5, [pc, #44]	; (34f0 <SERCOM5_2_Handler+0x38>)
    34c2:	4c0c      	ldr	r4, [pc, #48]	; (34f4 <SERCOM5_2_Handler+0x3c>)
    34c4:	4628      	mov	r0, r5
    34c6:	47a0      	blx	r4
    34c8:	2800      	cmp	r0, #0
    34ca:	d0fb      	beq.n	34c4 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    34cc:	4808      	ldr	r0, [pc, #32]	; (34f0 <SERCOM5_2_Handler+0x38>)
    34ce:	4b0a      	ldr	r3, [pc, #40]	; (34f8 <SERCOM5_2_Handler+0x40>)
    34d0:	4798      	blx	r3
    34d2:	490a      	ldr	r1, [pc, #40]	; (34fc <SERCOM5_2_Handler+0x44>)
    34d4:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    34d6:	2300      	movs	r3, #0
    34d8:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    34da:	4c09      	ldr	r4, [pc, #36]	; (3500 <SERCOM5_2_Handler+0x48>)
    34dc:	4620      	mov	r0, r4
    34de:	4b09      	ldr	r3, [pc, #36]	; (3504 <SERCOM5_2_Handler+0x4c>)
    34e0:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    34e2:	2105      	movs	r1, #5
    34e4:	4620      	mov	r0, r4
    34e6:	4b08      	ldr	r3, [pc, #32]	; (3508 <SERCOM5_2_Handler+0x50>)
    34e8:	4798      	blx	r3
    34ea:	bd38      	pop	{r3, r4, r5, pc}
    34ec:	43000400 	.word	0x43000400
    34f0:	20000068 	.word	0x20000068
    34f4:	000045e1 	.word	0x000045e1
    34f8:	000045cf 	.word	0x000045cf
    34fc:	20003dbc 	.word	0x20003dbc
    3500:	20003dc0 	.word	0x20003dc0
    3504:	00006e55 	.word	0x00006e55
    3508:	00003375 	.word	0x00003375

0000350c <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    350c:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    350e:	4b0a      	ldr	r3, [pc, #40]	; (3538 <configureWatchDogTimeOut+0x2c>)
    3510:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    3514:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    3516:	4c09      	ldr	r4, [pc, #36]	; (353c <configureWatchDogTimeOut+0x30>)
    3518:	6820      	ldr	r0, [r4, #0]
    351a:	2279      	movs	r2, #121	; 0x79
    351c:	4908      	ldr	r1, [pc, #32]	; (3540 <configureWatchDogTimeOut+0x34>)
    351e:	3000      	adds	r0, #0
    3520:	bf18      	it	ne
    3522:	2001      	movne	r0, #1
    3524:	4b07      	ldr	r3, [pc, #28]	; (3544 <configureWatchDogTimeOut+0x38>)
    3526:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    3528:	462a      	mov	r2, r5
    352a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    352e:	4620      	mov	r0, r4
    3530:	4b05      	ldr	r3, [pc, #20]	; (3548 <configureWatchDogTimeOut+0x3c>)
    3532:	4798      	blx	r3
    3534:	bd38      	pop	{r3, r4, r5, pc}
    3536:	bf00      	nop
    3538:	20000084 	.word	0x20000084
    353c:	20003e9c 	.word	0x20003e9c
    3540:	000093a8 	.word	0x000093a8
    3544:	00003c21 	.word	0x00003c21
    3548:	00004871 	.word	0x00004871

0000354c <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    354c:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    354e:	2002      	movs	r0, #2
    3550:	4b07      	ldr	r3, [pc, #28]	; (3570 <enableWatchDogTimer+0x24>)
    3552:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    3554:	4c07      	ldr	r4, [pc, #28]	; (3574 <enableWatchDogTimer+0x28>)
    3556:	6820      	ldr	r0, [r4, #0]
    3558:	2296      	movs	r2, #150	; 0x96
    355a:	4907      	ldr	r1, [pc, #28]	; (3578 <enableWatchDogTimer+0x2c>)
    355c:	3000      	adds	r0, #0
    355e:	bf18      	it	ne
    3560:	2001      	movne	r0, #1
    3562:	4b06      	ldr	r3, [pc, #24]	; (357c <enableWatchDogTimer+0x30>)
    3564:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    3566:	4620      	mov	r0, r4
    3568:	4b05      	ldr	r3, [pc, #20]	; (3580 <enableWatchDogTimer+0x34>)
    356a:	4798      	blx	r3
    356c:	bd10      	pop	{r4, pc}
    356e:	bf00      	nop
    3570:	0000350d 	.word	0x0000350d
    3574:	20003e9c 	.word	0x20003e9c
    3578:	000093a8 	.word	0x000093a8
    357c:	00003c21 	.word	0x00003c21
    3580:	0000498d 	.word	0x0000498d

00003584 <atmel_start_init>:
{
    3584:	b508      	push	{r3, lr}
    system_init();
    3586:	4b06      	ldr	r3, [pc, #24]	; (35a0 <atmel_start_init+0x1c>)
    3588:	4798      	blx	r3
    delay_ms(1000);
    358a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    358e:	4b05      	ldr	r3, [pc, #20]	; (35a4 <atmel_start_init+0x20>)
    3590:	4798      	blx	r3
    ForcedResetRequested = WDT_FORCED_RESET_OFF;
    3592:	2201      	movs	r2, #1
    3594:	4b04      	ldr	r3, [pc, #16]	; (35a8 <atmel_start_init+0x24>)
    3596:	731a      	strb	r2, [r3, #12]
    enableWatchDogTimer();
    3598:	4b04      	ldr	r3, [pc, #16]	; (35ac <atmel_start_init+0x28>)
    359a:	4798      	blx	r3
    359c:	bd08      	pop	{r3, pc}
    359e:	bf00      	nop
    35a0:	00003a41 	.word	0x00003a41
    35a4:	00003c01 	.word	0x00003c01
    35a8:	20000084 	.word	0x20000084
    35ac:	0000354d 	.word	0x0000354d

000035b0 <kickWatchDog>:
********************************************************************************/
int32_t kickWatchDog(void)
{	
	int32_t status = ERR_NONE;

	if(WDT_FORCED_RESET_OFF == ForcedResetRequested)
    35b0:	4b0a      	ldr	r3, [pc, #40]	; (35dc <kickWatchDog+0x2c>)
    35b2:	7b1b      	ldrb	r3, [r3, #12]
    35b4:	2b01      	cmp	r3, #1
    35b6:	d10d      	bne.n	35d4 <kickWatchDog+0x24>
{	
    35b8:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    35ba:	4c09      	ldr	r4, [pc, #36]	; (35e0 <kickWatchDog+0x30>)
    35bc:	6820      	ldr	r0, [r4, #0]
    35be:	22b3      	movs	r2, #179	; 0xb3
    35c0:	4908      	ldr	r1, [pc, #32]	; (35e4 <kickWatchDog+0x34>)
    35c2:	3000      	adds	r0, #0
    35c4:	bf18      	it	ne
    35c6:	2001      	movne	r0, #1
    35c8:	4b07      	ldr	r3, [pc, #28]	; (35e8 <kickWatchDog+0x38>)
    35ca:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    35cc:	4620      	mov	r0, r4
    35ce:	4b07      	ldr	r3, [pc, #28]	; (35ec <kickWatchDog+0x3c>)
    35d0:	4798      	blx	r3
    35d2:	bd10      	pop	{r4, pc}
	{
		status = wdt_feed(&WDT_0);
	}
	else
	{
		status = ERR_DENIED;
    35d4:	f06f 0010 	mvn.w	r0, #16
	}

	return status;
    35d8:	4770      	bx	lr
    35da:	bf00      	nop
    35dc:	20000084 	.word	0x20000084
    35e0:	20003e9c 	.word	0x20003e9c
    35e4:	000093a8 	.word	0x000093a8
    35e8:	00003c21 	.word	0x00003c21
    35ec:	00004a19 	.word	0x00004a19

000035f0 <requestWatchDogForcedReset>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
void requestWatchDogForcedReset(void)
{
    35f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DEBUG_PRINT("\r\n");
    35f2:	4d13      	ldr	r5, [pc, #76]	; (3640 <requestWatchDogForcedReset+0x50>)
    35f4:	4628      	mov	r0, r5
    35f6:	4c13      	ldr	r4, [pc, #76]	; (3644 <requestWatchDogForcedReset+0x54>)
    35f8:	47a0      	blx	r4
	DEBUG_PRINT("#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*");
    35fa:	4813      	ldr	r0, [pc, #76]	; (3648 <requestWatchDogForcedReset+0x58>)
    35fc:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
    35fe:	4628      	mov	r0, r5
    3600:	47a0      	blx	r4
	ForcedResetRequested = WDT_FORCED_RESET_ON;
    3602:	2700      	movs	r7, #0
    3604:	4b11      	ldr	r3, [pc, #68]	; (364c <requestWatchDogForcedReset+0x5c>)
    3606:	731f      	strb	r7, [r3, #12]
	ASSERT(wdt && wdt->dev.hw);
    3608:	4e11      	ldr	r6, [pc, #68]	; (3650 <requestWatchDogForcedReset+0x60>)
    360a:	4c12      	ldr	r4, [pc, #72]	; (3654 <requestWatchDogForcedReset+0x64>)
    360c:	6820      	ldr	r0, [r4, #0]
    360e:	22a5      	movs	r2, #165	; 0xa5
    3610:	4631      	mov	r1, r6
    3612:	1bc0      	subs	r0, r0, r7
    3614:	bf18      	it	ne
    3616:	2001      	movne	r0, #1
    3618:	4d0f      	ldr	r5, [pc, #60]	; (3658 <requestWatchDogForcedReset+0x68>)
    361a:	47a8      	blx	r5
	return _wdt_disable(&wdt->dev);
    361c:	4620      	mov	r0, r4
    361e:	4b0f      	ldr	r3, [pc, #60]	; (365c <requestWatchDogForcedReset+0x6c>)
    3620:	4798      	blx	r3
	wdt_disable(&WDT_0);
	configureWatchDogTimeOut(WDT_TIMEOUT_FAST);
    3622:	4638      	mov	r0, r7
    3624:	4b0e      	ldr	r3, [pc, #56]	; (3660 <requestWatchDogForcedReset+0x70>)
    3626:	4798      	blx	r3
	ASSERT(wdt && wdt->dev.hw);
    3628:	6820      	ldr	r0, [r4, #0]
    362a:	2296      	movs	r2, #150	; 0x96
    362c:	4631      	mov	r1, r6
    362e:	1bc0      	subs	r0, r0, r7
    3630:	bf18      	it	ne
    3632:	2001      	movne	r0, #1
    3634:	47a8      	blx	r5
	return _wdt_enable(&wdt->dev);
    3636:	4620      	mov	r0, r4
    3638:	4b0a      	ldr	r3, [pc, #40]	; (3664 <requestWatchDogForcedReset+0x74>)
    363a:	4798      	blx	r3
    363c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    363e:	bf00      	nop
    3640:	00009394 	.word	0x00009394
    3644:	000033b9 	.word	0x000033b9
    3648:	000093c4 	.word	0x000093c4
    364c:	20000084 	.word	0x20000084
    3650:	000093a8 	.word	0x000093a8
    3654:	20003e9c 	.word	0x20003e9c
    3658:	00003c21 	.word	0x00003c21
    365c:	000049c9 	.word	0x000049c9
    3660:	0000350d 	.word	0x0000350d
    3664:	0000498d 	.word	0x0000498d

00003668 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    3668:	b508      	push	{r3, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    366a:	4b1c      	ldr	r3, [pc, #112]	; (36dc <Reset_Handler+0x74>)
    366c:	4a1c      	ldr	r2, [pc, #112]	; (36e0 <Reset_Handler+0x78>)
    366e:	429a      	cmp	r2, r3
    3670:	d010      	beq.n	3694 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    3672:	4b1c      	ldr	r3, [pc, #112]	; (36e4 <Reset_Handler+0x7c>)
    3674:	4a19      	ldr	r2, [pc, #100]	; (36dc <Reset_Handler+0x74>)
    3676:	429a      	cmp	r2, r3
    3678:	d20c      	bcs.n	3694 <Reset_Handler+0x2c>
    367a:	3b01      	subs	r3, #1
    367c:	1a9b      	subs	r3, r3, r2
    367e:	f023 0303 	bic.w	r3, r3, #3
    3682:	3304      	adds	r3, #4
    3684:	4413      	add	r3, r2
    3686:	4916      	ldr	r1, [pc, #88]	; (36e0 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    3688:	f851 0b04 	ldr.w	r0, [r1], #4
    368c:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    3690:	429a      	cmp	r2, r3
    3692:	d1f9      	bne.n	3688 <Reset_Handler+0x20>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    3694:	4b14      	ldr	r3, [pc, #80]	; (36e8 <Reset_Handler+0x80>)
    3696:	4a15      	ldr	r2, [pc, #84]	; (36ec <Reset_Handler+0x84>)
    3698:	429a      	cmp	r2, r3
    369a:	d20a      	bcs.n	36b2 <Reset_Handler+0x4a>
    369c:	3b01      	subs	r3, #1
    369e:	1a9b      	subs	r3, r3, r2
    36a0:	f023 0303 	bic.w	r3, r3, #3
    36a4:	3304      	adds	r3, #4
    36a6:	4413      	add	r3, r2
                *pDest++ = 0;
    36a8:	2100      	movs	r1, #0
    36aa:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    36ae:	4293      	cmp	r3, r2
    36b0:	d1fb      	bne.n	36aa <Reset_Handler+0x42>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    36b2:	4b0f      	ldr	r3, [pc, #60]	; (36f0 <Reset_Handler+0x88>)
    36b4:	4a0f      	ldr	r2, [pc, #60]	; (36f4 <Reset_Handler+0x8c>)
    36b6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    36ba:	609a      	str	r2, [r3, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
    36bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    36c0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    36c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    36c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36cc:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
    36d0:	4b09      	ldr	r3, [pc, #36]	; (36f8 <Reset_Handler+0x90>)
    36d2:	4798      	blx	r3

        /* Branch to main function */
        main();
    36d4:	4b09      	ldr	r3, [pc, #36]	; (36fc <Reset_Handler+0x94>)
    36d6:	4798      	blx	r3
    36d8:	e7fe      	b.n	36d8 <Reset_Handler+0x70>
    36da:	bf00      	nop
    36dc:	20000000 	.word	0x20000000
    36e0:	0000991c 	.word	0x0000991c
    36e4:	2000026c 	.word	0x2000026c
    36e8:	20003fa0 	.word	0x20003fa0
    36ec:	20000270 	.word	0x20000270
    36f0:	e000ed00 	.word	0xe000ed00
    36f4:	00000000 	.word	0x00000000
    36f8:	00006ba9 	.word	0x00006ba9
    36fc:	00004ad9 	.word	0x00004ad9

00003700 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3700:	b508      	push	{r3, lr}
    DEBUG_PRINT("Unexpected Interrupt Happened...Waiting for the watch dog timeout");
    3702:	4802      	ldr	r0, [pc, #8]	; (370c <Dummy_Handler+0xc>)
    3704:	4b02      	ldr	r3, [pc, #8]	; (3710 <Dummy_Handler+0x10>)
    3706:	4798      	blx	r3
    3708:	e7fe      	b.n	3708 <Dummy_Handler+0x8>
    370a:	bf00      	nop
    370c:	00009410 	.word	0x00009410
    3710:	000033b9 	.word	0x000033b9

00003714 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3714:	4b5d      	ldr	r3, [pc, #372]	; (388c <ADC_0_PORT_init+0x178>)
    3716:	2204      	movs	r2, #4
    3718:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    371a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    371e:	629a      	str	r2, [r3, #40]	; 0x28
    3720:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    3724:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3726:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    372a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    372e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3732:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3736:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    373a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    373e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3742:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3746:	2108      	movs	r1, #8
    3748:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    374a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    374e:	6299      	str	r1, [r3, #40]	; 0x28
    3750:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3752:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    3756:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    375a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    375e:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3762:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3766:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    376a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    376e:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3772:	f44f 7180 	mov.w	r1, #256	; 0x100
    3776:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    377a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    377e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    3782:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3786:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    378a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    378e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3792:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3796:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    379a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    379e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    37a2:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    37a6:	f44f 7100 	mov.w	r1, #512	; 0x200
    37aa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    37ae:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    37b2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    37b6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    37ba:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    37be:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    37c2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    37c6:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    37ca:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    37ce:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    37d2:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    37d6:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    37da:	2110      	movs	r1, #16
    37dc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    37de:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    37e2:	6299      	str	r1, [r3, #40]	; 0x28
    37e4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    37e6:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    37ea:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    37ee:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    37f2:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    37f6:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    37fa:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    37fe:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3802:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3806:	2120      	movs	r1, #32
    3808:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    380a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    380e:	6299      	str	r1, [r3, #40]	; 0x28
    3810:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3812:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    3816:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    381a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    381e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3822:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3826:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    382a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    382e:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3832:	2140      	movs	r1, #64	; 0x40
    3834:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3836:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    383a:	6299      	str	r1, [r3, #40]	; 0x28
    383c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    383e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    3842:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3846:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    384a:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    384e:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3852:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    3856:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    385a:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    385e:	2180      	movs	r1, #128	; 0x80
    3860:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3862:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3866:	6299      	str	r1, [r3, #40]	; 0x28
    3868:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    386a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    386e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3872:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3876:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    387a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    387e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    3882:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3886:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    388a:	4770      	bx	lr
    388c:	41008000 	.word	0x41008000

00003890 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    3890:	4a04      	ldr	r2, [pc, #16]	; (38a4 <ADC_0_CLOCK_init+0x14>)
    3892:	6a13      	ldr	r3, [r2, #32]
    3894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    3898:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    389a:	2241      	movs	r2, #65	; 0x41
    389c:	4b02      	ldr	r3, [pc, #8]	; (38a8 <ADC_0_CLOCK_init+0x18>)
    389e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    38a2:	4770      	bx	lr
    38a4:	40000800 	.word	0x40000800
    38a8:	40001c00 	.word	0x40001c00

000038ac <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    38ac:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    38ae:	4b05      	ldr	r3, [pc, #20]	; (38c4 <ADC_0_init+0x18>)
    38b0:	4798      	blx	r3

	if(ERR_NONE == adc_sync_init(&ADC_0, ADC0, (void *)NULL))
    38b2:	2200      	movs	r2, #0
    38b4:	4904      	ldr	r1, [pc, #16]	; (38c8 <ADC_0_init+0x1c>)
    38b6:	4805      	ldr	r0, [pc, #20]	; (38cc <ADC_0_init+0x20>)
    38b8:	4b05      	ldr	r3, [pc, #20]	; (38d0 <ADC_0_init+0x24>)
    38ba:	4798      	blx	r3
	else
	{
		//DEBUG_PRINT("Failed to initialize ADC");
	}

	ADC_0_PORT_init();
    38bc:	4b05      	ldr	r3, [pc, #20]	; (38d4 <ADC_0_init+0x28>)
    38be:	4798      	blx	r3
    38c0:	bd08      	pop	{r3, pc}
    38c2:	bf00      	nop
    38c4:	00003891 	.word	0x00003891
    38c8:	43001c00 	.word	0x43001c00
    38cc:	20003e78 	.word	0x20003e78
    38d0:	00003a75 	.word	0x00003a75
    38d4:	00003715 	.word	0x00003715

000038d8 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    38d8:	4b10      	ldr	r3, [pc, #64]	; (391c <ModemData_PORT_init+0x44>)
    38da:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    38de:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    38e2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    38e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    38ea:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    38ee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    38f2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    38f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    38fa:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    38fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3902:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3906:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    390a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    390e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    3912:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    391a:	4770      	bx	lr
    391c:	41008000 	.word	0x41008000

00003920 <ModemData_CLOCK_init>:
    3920:	4b06      	ldr	r3, [pc, #24]	; (393c <ModemData_CLOCK_init+0x1c>)
    3922:	2240      	movs	r2, #64	; 0x40
    3924:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    3928:	224a      	movs	r2, #74	; 0x4a
    392a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    392e:	4a04      	ldr	r2, [pc, #16]	; (3940 <ModemData_CLOCK_init+0x20>)
    3930:	6993      	ldr	r3, [r2, #24]
    3932:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3936:	6193      	str	r3, [r2, #24]
    3938:	4770      	bx	lr
    393a:	bf00      	nop
    393c:	40001c00 	.word	0x40001c00
    3940:	40000800 	.word	0x40000800

00003944 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    3944:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    3946:	4b03      	ldr	r3, [pc, #12]	; (3954 <ModemData_init+0x10>)
    3948:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    394a:	4b03      	ldr	r3, [pc, #12]	; (3958 <ModemData_init+0x14>)
    394c:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    394e:	4b03      	ldr	r3, [pc, #12]	; (395c <ModemData_init+0x18>)
    3950:	4798      	blx	r3
    3952:	bd08      	pop	{r3, pc}
    3954:	00003921 	.word	0x00003921
    3958:	00002921 	.word	0x00002921
    395c:	000038d9 	.word	0x000038d9

00003960 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3960:	4b10      	ldr	r3, [pc, #64]	; (39a4 <SerialDebug_PORT_init+0x44>)
    3962:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    3966:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    396a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    396e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3972:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3976:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    397a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    397e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3982:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    3986:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    398a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    398e:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3992:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3996:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    399a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    399e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    39a2:	4770      	bx	lr
    39a4:	41008000 	.word	0x41008000

000039a8 <SerialDebug_CLOCK_init>:
    39a8:	4b06      	ldr	r3, [pc, #24]	; (39c4 <SerialDebug_CLOCK_init+0x1c>)
    39aa:	2240      	movs	r2, #64	; 0x40
    39ac:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    39b0:	224a      	movs	r2, #74	; 0x4a
    39b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    39b6:	4a04      	ldr	r2, [pc, #16]	; (39c8 <SerialDebug_CLOCK_init+0x20>)
    39b8:	6a13      	ldr	r3, [r2, #32]
    39ba:	f043 0302 	orr.w	r3, r3, #2
    39be:	6213      	str	r3, [r2, #32]
    39c0:	4770      	bx	lr
    39c2:	bf00      	nop
    39c4:	40001c00 	.word	0x40001c00
    39c8:	40000800 	.word	0x40000800

000039cc <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    39cc:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    39ce:	4b03      	ldr	r3, [pc, #12]	; (39dc <SerialDebug_init+0x10>)
    39d0:	4798      	blx	r3
	SerialDebugPrintInit();
    39d2:	4b03      	ldr	r3, [pc, #12]	; (39e0 <SerialDebug_init+0x14>)
    39d4:	4798      	blx	r3
	SerialDebug_PORT_init();
    39d6:	4b03      	ldr	r3, [pc, #12]	; (39e4 <SerialDebug_init+0x18>)
    39d8:	4798      	blx	r3
    39da:	bd08      	pop	{r3, pc}
    39dc:	000039a9 	.word	0x000039a9
    39e0:	0000334d 	.word	0x0000334d
    39e4:	00003961 	.word	0x00003961

000039e8 <delay_driver_init>:
}

void delay_driver_init(void)
{
    39e8:	b508      	push	{r3, lr}
	delay_init(SysTick);
    39ea:	4802      	ldr	r0, [pc, #8]	; (39f4 <delay_driver_init+0xc>)
    39ec:	4b02      	ldr	r3, [pc, #8]	; (39f8 <delay_driver_init+0x10>)
    39ee:	4798      	blx	r3
    39f0:	bd08      	pop	{r3, pc}
    39f2:	bf00      	nop
    39f4:	e000e010 	.word	0xe000e010
    39f8:	00003bed 	.word	0x00003bed

000039fc <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    39fc:	4a02      	ldr	r2, [pc, #8]	; (3a08 <WDT_0_CLOCK_init+0xc>)
    39fe:	6953      	ldr	r3, [r2, #20]
    3a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3a04:	6153      	str	r3, [r2, #20]
    3a06:	4770      	bx	lr
    3a08:	40000800 	.word	0x40000800

00003a0c <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    3a0c:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    3a0e:	4b06      	ldr	r3, [pc, #24]	; (3a28 <WDT_0_init+0x1c>)
    3a10:	4798      	blx	r3
	ASSERT(wdt && hw);
    3a12:	2252      	movs	r2, #82	; 0x52
    3a14:	4905      	ldr	r1, [pc, #20]	; (3a2c <WDT_0_init+0x20>)
    3a16:	2001      	movs	r0, #1
    3a18:	4b05      	ldr	r3, [pc, #20]	; (3a30 <WDT_0_init+0x24>)
    3a1a:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    3a1c:	4805      	ldr	r0, [pc, #20]	; (3a34 <WDT_0_init+0x28>)
    3a1e:	4b06      	ldr	r3, [pc, #24]	; (3a38 <WDT_0_init+0x2c>)
    3a20:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    3a22:	4b06      	ldr	r3, [pc, #24]	; (3a3c <WDT_0_init+0x30>)
    3a24:	4798      	blx	r3
    3a26:	bd08      	pop	{r3, pc}
    3a28:	000039fd 	.word	0x000039fd
    3a2c:	000093a8 	.word	0x000093a8
    3a30:	00003c21 	.word	0x00003c21
    3a34:	20003e9c 	.word	0x20003e9c
    3a38:	40002000 	.word	0x40002000
    3a3c:	00004805 	.word	0x00004805

00003a40 <system_init>:
		//DEBUG_PRINT("WDT Failed to initialize");
	}
}

void system_init(void)
{
    3a40:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    3a42:	4b06      	ldr	r3, [pc, #24]	; (3a5c <system_init+0x1c>)
    3a44:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    3a46:	4b06      	ldr	r3, [pc, #24]	; (3a60 <system_init+0x20>)
    3a48:	4798      	blx	r3

	//AC_0_init();

	ADC_0_init();
    3a4a:	4b06      	ldr	r3, [pc, #24]	; (3a64 <system_init+0x24>)
    3a4c:	4798      	blx	r3

	//EVENT_SYSTEM_0_init();

	//FLASH_0_init();

	SerialDebug_init();
    3a4e:	4b06      	ldr	r3, [pc, #24]	; (3a68 <system_init+0x28>)
    3a50:	4798      	blx	r3
	
	ModemData_init();
    3a52:	4b06      	ldr	r3, [pc, #24]	; (3a6c <system_init+0x2c>)
    3a54:	4798      	blx	r3

	//TIMER_6_init();

	//TIMER_7_init();
	
	WDT_0_init();
    3a56:	4b06      	ldr	r3, [pc, #24]	; (3a70 <system_init+0x30>)
    3a58:	4798      	blx	r3
    3a5a:	bd08      	pop	{r3, pc}
    3a5c:	00003ff5 	.word	0x00003ff5
    3a60:	000039e9 	.word	0x000039e9
    3a64:	000038ad 	.word	0x000038ad
    3a68:	000039cd 	.word	0x000039cd
    3a6c:	00003945 	.word	0x00003945
    3a70:	00003a0d 	.word	0x00003a0d

00003a74 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    3a74:	b538      	push	{r3, r4, r5, lr}
    3a76:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    3a78:	4605      	mov	r5, r0
    3a7a:	b158      	cbz	r0, 3a94 <adc_sync_init+0x20>
    3a7c:	1c08      	adds	r0, r1, #0
    3a7e:	bf18      	it	ne
    3a80:	2001      	movne	r0, #1
    3a82:	2243      	movs	r2, #67	; 0x43
    3a84:	4904      	ldr	r1, [pc, #16]	; (3a98 <adc_sync_init+0x24>)
    3a86:	4b05      	ldr	r3, [pc, #20]	; (3a9c <adc_sync_init+0x28>)
    3a88:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    3a8a:	4621      	mov	r1, r4
    3a8c:	4628      	mov	r0, r5
    3a8e:	4b04      	ldr	r3, [pc, #16]	; (3aa0 <adc_sync_init+0x2c>)
    3a90:	4798      	blx	r3
}
    3a92:	bd38      	pop	{r3, r4, r5, pc}
    3a94:	2000      	movs	r0, #0
    3a96:	e7f4      	b.n	3a82 <adc_sync_init+0xe>
    3a98:	00009454 	.word	0x00009454
    3a9c:	00003c21 	.word	0x00003c21
    3aa0:	00003e3d 	.word	0x00003e3d

00003aa4 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    3aa4:	b538      	push	{r3, r4, r5, lr}
    3aa6:	460d      	mov	r5, r1
	ASSERT(descr);
    3aa8:	4604      	mov	r4, r0
    3aaa:	2258      	movs	r2, #88	; 0x58
    3aac:	4905      	ldr	r1, [pc, #20]	; (3ac4 <adc_sync_enable_channel+0x20>)
    3aae:	3000      	adds	r0, #0
    3ab0:	bf18      	it	ne
    3ab2:	2001      	movne	r0, #1
    3ab4:	4b04      	ldr	r3, [pc, #16]	; (3ac8 <adc_sync_enable_channel+0x24>)
    3ab6:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
    3ab8:	4629      	mov	r1, r5
    3aba:	4620      	mov	r0, r4
    3abc:	4b03      	ldr	r3, [pc, #12]	; (3acc <adc_sync_enable_channel+0x28>)
    3abe:	4798      	blx	r3

	return ERR_NONE;
}
    3ac0:	2000      	movs	r0, #0
    3ac2:	bd38      	pop	{r3, r4, r5, pc}
    3ac4:	00009454 	.word	0x00009454
    3ac8:	00003c21 	.word	0x00003c21
    3acc:	00003f35 	.word	0x00003f35

00003ad0 <adc_sync_disable_channel>:

/**
 * \brief Disable ADC
 */
int32_t adc_sync_disable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    3ad0:	b538      	push	{r3, r4, r5, lr}
    3ad2:	460d      	mov	r5, r1
	ASSERT(descr);
    3ad4:	4604      	mov	r4, r0
    3ad6:	2263      	movs	r2, #99	; 0x63
    3ad8:	4905      	ldr	r1, [pc, #20]	; (3af0 <adc_sync_disable_channel+0x20>)
    3ada:	3000      	adds	r0, #0
    3adc:	bf18      	it	ne
    3ade:	2001      	movne	r0, #1
    3ae0:	4b04      	ldr	r3, [pc, #16]	; (3af4 <adc_sync_disable_channel+0x24>)
    3ae2:	4798      	blx	r3
	_adc_sync_disable_channel(&descr->device, channel);
    3ae4:	4629      	mov	r1, r5
    3ae6:	4620      	mov	r0, r4
    3ae8:	4b03      	ldr	r3, [pc, #12]	; (3af8 <adc_sync_disable_channel+0x28>)
    3aea:	4798      	blx	r3
	return ERR_NONE;
}
    3aec:	2000      	movs	r0, #0
    3aee:	bd38      	pop	{r3, r4, r5, pc}
    3af0:	00009454 	.word	0x00009454
    3af4:	00003c21 	.word	0x00003c21
    3af8:	00003f4b 	.word	0x00003f4b

00003afc <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
    3afc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b00:	460d      	mov	r5, r1
    3b02:	4691      	mov	r9, r2
    3b04:	469a      	mov	sl, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
    3b06:	4680      	mov	r8, r0
    3b08:	b1e0      	cbz	r0, 3b44 <adc_sync_read_channel+0x48>
    3b0a:	b1ea      	cbz	r2, 3b48 <adc_sync_read_channel+0x4c>
    3b0c:	1c18      	adds	r0, r3, #0
    3b0e:	bf18      	it	ne
    3b10:	2001      	movne	r0, #1
    3b12:	4f1c      	ldr	r7, [pc, #112]	; (3b84 <adc_sync_read_channel+0x88>)
    3b14:	2271      	movs	r2, #113	; 0x71
    3b16:	4639      	mov	r1, r7
    3b18:	4e1b      	ldr	r6, [pc, #108]	; (3b88 <adc_sync_read_channel+0x8c>)
    3b1a:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
    3b1c:	4644      	mov	r4, r8
    3b1e:	4640      	mov	r0, r8
    3b20:	4b1a      	ldr	r3, [pc, #104]	; (3b8c <adc_sync_read_channel+0x90>)
    3b22:	4798      	blx	r3
    3b24:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
    3b26:	fb9a f0f0 	sdiv	r0, sl, r0
    3b2a:	fb08 a010 	mls	r0, r8, r0, sl
    3b2e:	2273      	movs	r2, #115	; 0x73
    3b30:	4639      	mov	r1, r7
    3b32:	fab0 f080 	clz	r0, r0
    3b36:	0940      	lsrs	r0, r0, #5
    3b38:	47b0      	blx	r6
	uint16_t offset = 0;
    3b3a:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
    3b3c:	f8df b058 	ldr.w	fp, [pc, #88]	; 3b98 <adc_sync_read_channel+0x9c>

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    3b40:	4e13      	ldr	r6, [pc, #76]	; (3b90 <adc_sync_read_channel+0x94>)
    3b42:	e007      	b.n	3b54 <adc_sync_read_channel+0x58>
	ASSERT(descr && buffer && length);
    3b44:	2000      	movs	r0, #0
    3b46:	e7e4      	b.n	3b12 <adc_sync_read_channel+0x16>
    3b48:	2000      	movs	r0, #0
    3b4a:	e7e2      	b.n	3b12 <adc_sync_read_channel+0x16>
    3b4c:	4447      	add	r7, r8
    3b4e:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
    3b50:	45ba      	cmp	sl, r7
    3b52:	d914      	bls.n	3b7e <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
    3b54:	4620      	mov	r0, r4
    3b56:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    3b58:	4629      	mov	r1, r5
    3b5a:	4620      	mov	r0, r4
    3b5c:	47b0      	blx	r6
    3b5e:	2800      	cmp	r0, #0
    3b60:	d0fa      	beq.n	3b58 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
    3b62:	4629      	mov	r1, r5
    3b64:	4620      	mov	r0, r4
    3b66:	4b0b      	ldr	r3, [pc, #44]	; (3b94 <adc_sync_read_channel+0x98>)
    3b68:	4798      	blx	r3
		buffer[offset] = result;
    3b6a:	f809 0007 	strb.w	r0, [r9, r7]
		if (1 < data_size) {
    3b6e:	f1b8 0f01 	cmp.w	r8, #1
    3b72:	d9eb      	bls.n	3b4c <adc_sync_read_channel+0x50>
			buffer[offset + 1] = result >> 8;
    3b74:	eb09 0307 	add.w	r3, r9, r7
    3b78:	0a00      	lsrs	r0, r0, #8
    3b7a:	7058      	strb	r0, [r3, #1]
    3b7c:	e7e6      	b.n	3b4c <adc_sync_read_channel+0x50>

	return offset;
}
    3b7e:	4638      	mov	r0, r7
    3b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b84:	00009454 	.word	0x00009454
    3b88:	00003c21 	.word	0x00003c21
    3b8c:	00003f63 	.word	0x00003f63
    3b90:	00003f75 	.word	0x00003f75
    3b94:	00003f97 	.word	0x00003f97
    3b98:	00003f81 	.word	0x00003f81

00003b9c <adc_sync_set_inputs>:
/**
 * \brief Set ADC input source of a channel
 */
int32_t adc_sync_set_inputs(struct adc_sync_descriptor *const descr, const adc_pos_input_t pos_input,
                            const adc_neg_input_t neg_input, const uint8_t channel)
{
    3b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b9e:	460d      	mov	r5, r1
    3ba0:	4616      	mov	r6, r2
    3ba2:	461f      	mov	r7, r3
	ASSERT(descr);
    3ba4:	4604      	mov	r4, r0
    3ba6:	22a3      	movs	r2, #163	; 0xa3
    3ba8:	4906      	ldr	r1, [pc, #24]	; (3bc4 <adc_sync_set_inputs+0x28>)
    3baa:	3000      	adds	r0, #0
    3bac:	bf18      	it	ne
    3bae:	2001      	movne	r0, #1
    3bb0:	4b05      	ldr	r3, [pc, #20]	; (3bc8 <adc_sync_set_inputs+0x2c>)
    3bb2:	4798      	blx	r3
	_adc_sync_set_inputs(&descr->device, pos_input, neg_input, channel);
    3bb4:	463b      	mov	r3, r7
    3bb6:	4632      	mov	r2, r6
    3bb8:	4629      	mov	r1, r5
    3bba:	4620      	mov	r0, r4
    3bbc:	4c03      	ldr	r4, [pc, #12]	; (3bcc <adc_sync_set_inputs+0x30>)
    3bbe:	47a0      	blx	r4

	return ERR_NONE;
}
    3bc0:	2000      	movs	r0, #0
    3bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bc4:	00009454 	.word	0x00009454
    3bc8:	00003c21 	.word	0x00003c21
    3bcc:	00003fa1 	.word	0x00003fa1

00003bd0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3bd0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3bd4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3bd6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3bd8:	f3bf 8f5f 	dmb	sy
    3bdc:	4770      	bx	lr

00003bde <atomic_leave_critical>:
    3bde:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    3be2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3be4:	f383 8810 	msr	PRIMASK, r3
    3be8:	4770      	bx	lr
	...

00003bec <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    3bec:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    3bee:	4b02      	ldr	r3, [pc, #8]	; (3bf8 <delay_init+0xc>)
    3bf0:	6018      	str	r0, [r3, #0]
    3bf2:	4b02      	ldr	r3, [pc, #8]	; (3bfc <delay_init+0x10>)
    3bf4:	4798      	blx	r3
    3bf6:	bd08      	pop	{r3, pc}
    3bf8:	20000644 	.word	0x20000644
    3bfc:	00004659 	.word	0x00004659

00003c00 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    3c00:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    3c02:	4b04      	ldr	r3, [pc, #16]	; (3c14 <delay_ms+0x14>)
    3c04:	681c      	ldr	r4, [r3, #0]
    3c06:	4b04      	ldr	r3, [pc, #16]	; (3c18 <delay_ms+0x18>)
    3c08:	4798      	blx	r3
    3c0a:	4601      	mov	r1, r0
    3c0c:	4620      	mov	r0, r4
    3c0e:	4b03      	ldr	r3, [pc, #12]	; (3c1c <delay_ms+0x1c>)
    3c10:	4798      	blx	r3
    3c12:	bd10      	pop	{r4, pc}
    3c14:	20000644 	.word	0x20000644
    3c18:	00003fe9 	.word	0x00003fe9
    3c1c:	0000466d 	.word	0x0000466d

00003c20 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    3c20:	b900      	cbnz	r0, 3c24 <assert+0x4>
		__asm("BKPT #0");
    3c22:	be00      	bkpt	0x0000
    3c24:	4770      	bx	lr
	...

00003c28 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    3c28:	b570      	push	{r4, r5, r6, lr}
    3c2a:	460e      	mov	r6, r1
    3c2c:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    3c2e:	4604      	mov	r4, r0
    3c30:	b178      	cbz	r0, 3c52 <ringbuffer_init+0x2a>
    3c32:	b181      	cbz	r1, 3c56 <ringbuffer_init+0x2e>
    3c34:	b1a2      	cbz	r2, 3c60 <ringbuffer_init+0x38>
    3c36:	2001      	movs	r0, #1
    3c38:	2232      	movs	r2, #50	; 0x32
    3c3a:	490d      	ldr	r1, [pc, #52]	; (3c70 <ringbuffer_init+0x48>)
    3c3c:	4b0d      	ldr	r3, [pc, #52]	; (3c74 <ringbuffer_init+0x4c>)
    3c3e:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    3c40:	1e6b      	subs	r3, r5, #1
    3c42:	421d      	tst	r5, r3
    3c44:	d109      	bne.n	3c5a <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    3c46:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    3c48:	2000      	movs	r0, #0
    3c4a:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    3c4c:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    3c4e:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    3c50:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    3c52:	2000      	movs	r0, #0
    3c54:	e7f0      	b.n	3c38 <ringbuffer_init+0x10>
    3c56:	2000      	movs	r0, #0
    3c58:	e7ee      	b.n	3c38 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    3c5a:	f06f 000c 	mvn.w	r0, #12
    3c5e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    3c60:	2232      	movs	r2, #50	; 0x32
    3c62:	4903      	ldr	r1, [pc, #12]	; (3c70 <ringbuffer_init+0x48>)
    3c64:	2000      	movs	r0, #0
    3c66:	4b03      	ldr	r3, [pc, #12]	; (3c74 <ringbuffer_init+0x4c>)
    3c68:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    3c6a:	1e6b      	subs	r3, r5, #1
    3c6c:	e7eb      	b.n	3c46 <ringbuffer_init+0x1e>
    3c6e:	bf00      	nop
    3c70:	00009470 	.word	0x00009470
    3c74:	00003c21 	.word	0x00003c21

00003c78 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    3c78:	b538      	push	{r3, r4, r5, lr}
    3c7a:	460d      	mov	r5, r1
	ASSERT(rb && data);
    3c7c:	4604      	mov	r4, r0
    3c7e:	b1a0      	cbz	r0, 3caa <ringbuffer_get+0x32>
    3c80:	1c08      	adds	r0, r1, #0
    3c82:	bf18      	it	ne
    3c84:	2001      	movne	r0, #1
    3c86:	224a      	movs	r2, #74	; 0x4a
    3c88:	490a      	ldr	r1, [pc, #40]	; (3cb4 <ringbuffer_get+0x3c>)
    3c8a:	4b0b      	ldr	r3, [pc, #44]	; (3cb8 <ringbuffer_get+0x40>)
    3c8c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    3c8e:	68a3      	ldr	r3, [r4, #8]
    3c90:	68e2      	ldr	r2, [r4, #12]
    3c92:	429a      	cmp	r2, r3
    3c94:	d00b      	beq.n	3cae <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    3c96:	6862      	ldr	r2, [r4, #4]
    3c98:	4013      	ands	r3, r2
    3c9a:	6822      	ldr	r2, [r4, #0]
    3c9c:	5cd3      	ldrb	r3, [r2, r3]
    3c9e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    3ca0:	68a3      	ldr	r3, [r4, #8]
    3ca2:	3301      	adds	r3, #1
    3ca4:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    3ca6:	2000      	movs	r0, #0
    3ca8:	bd38      	pop	{r3, r4, r5, pc}
    3caa:	2000      	movs	r0, #0
    3cac:	e7eb      	b.n	3c86 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    3cae:	f06f 0009 	mvn.w	r0, #9
}
    3cb2:	bd38      	pop	{r3, r4, r5, pc}
    3cb4:	00009470 	.word	0x00009470
    3cb8:	00003c21 	.word	0x00003c21

00003cbc <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    3cbc:	b538      	push	{r3, r4, r5, lr}
    3cbe:	460d      	mov	r5, r1
	ASSERT(rb);
    3cc0:	4604      	mov	r4, r0
    3cc2:	225b      	movs	r2, #91	; 0x5b
    3cc4:	490b      	ldr	r1, [pc, #44]	; (3cf4 <ringbuffer_put+0x38>)
    3cc6:	3000      	adds	r0, #0
    3cc8:	bf18      	it	ne
    3cca:	2001      	movne	r0, #1
    3ccc:	4b0a      	ldr	r3, [pc, #40]	; (3cf8 <ringbuffer_put+0x3c>)
    3cce:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    3cd0:	68e3      	ldr	r3, [r4, #12]
    3cd2:	6862      	ldr	r2, [r4, #4]
    3cd4:	4013      	ands	r3, r2
    3cd6:	6822      	ldr	r2, [r4, #0]
    3cd8:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    3cda:	68e3      	ldr	r3, [r4, #12]
    3cdc:	6861      	ldr	r1, [r4, #4]
    3cde:	68a2      	ldr	r2, [r4, #8]
    3ce0:	1a9a      	subs	r2, r3, r2
    3ce2:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    3ce4:	bf84      	itt	hi
    3ce6:	1a59      	subhi	r1, r3, r1
    3ce8:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    3cea:	3301      	adds	r3, #1
    3cec:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    3cee:	2000      	movs	r0, #0
    3cf0:	bd38      	pop	{r3, r4, r5, pc}
    3cf2:	bf00      	nop
    3cf4:	00009470 	.word	0x00009470
    3cf8:	00003c21 	.word	0x00003c21

00003cfc <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    3cfc:	b510      	push	{r4, lr}
	ASSERT(rb);
    3cfe:	4604      	mov	r4, r0
    3d00:	2271      	movs	r2, #113	; 0x71
    3d02:	4905      	ldr	r1, [pc, #20]	; (3d18 <ringbuffer_num+0x1c>)
    3d04:	3000      	adds	r0, #0
    3d06:	bf18      	it	ne
    3d08:	2001      	movne	r0, #1
    3d0a:	4b04      	ldr	r3, [pc, #16]	; (3d1c <ringbuffer_num+0x20>)
    3d0c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    3d0e:	68e0      	ldr	r0, [r4, #12]
    3d10:	68a3      	ldr	r3, [r4, #8]
}
    3d12:	1ac0      	subs	r0, r0, r3
    3d14:	bd10      	pop	{r4, pc}
    3d16:	bf00      	nop
    3d18:	00009470 	.word	0x00009470
    3d1c:	00003c21 	.word	0x00003c21

00003d20 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    3d20:	b510      	push	{r4, lr}
	ASSERT(rb);
    3d22:	4604      	mov	r4, r0
    3d24:	227b      	movs	r2, #123	; 0x7b
    3d26:	4905      	ldr	r1, [pc, #20]	; (3d3c <ringbuffer_flush+0x1c>)
    3d28:	3000      	adds	r0, #0
    3d2a:	bf18      	it	ne
    3d2c:	2001      	movne	r0, #1
    3d2e:	4b04      	ldr	r3, [pc, #16]	; (3d40 <ringbuffer_flush+0x20>)
    3d30:	4798      	blx	r3

	rb->read_index = rb->write_index;
    3d32:	68e3      	ldr	r3, [r4, #12]
    3d34:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    3d36:	2000      	movs	r0, #0
    3d38:	bd10      	pop	{r4, pc}
    3d3a:	bf00      	nop
    3d3c:	00009470 	.word	0x00009470
    3d40:	00003c21 	.word	0x00003c21

00003d44 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    3d44:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    3d46:	4a06      	ldr	r2, [pc, #24]	; (3d60 <_sbrk+0x1c>)
    3d48:	6812      	ldr	r2, [r2, #0]
    3d4a:	b122      	cbz	r2, 3d56 <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3d4c:	4a04      	ldr	r2, [pc, #16]	; (3d60 <_sbrk+0x1c>)
    3d4e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3d50:	4403      	add	r3, r0
    3d52:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    3d54:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3d56:	4903      	ldr	r1, [pc, #12]	; (3d64 <_sbrk+0x20>)
    3d58:	4a01      	ldr	r2, [pc, #4]	; (3d60 <_sbrk+0x1c>)
    3d5a:	6011      	str	r1, [r2, #0]
    3d5c:	e7f6      	b.n	3d4c <_sbrk+0x8>
    3d5e:	bf00      	nop
    3d60:	20000648 	.word	0x20000648
    3d64:	20013fa0 	.word	0x20013fa0

00003d68 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    3d68:	6940      	ldr	r0, [r0, #20]
    3d6a:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    3d6e:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    3d72:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    3d74:	0040      	lsls	r0, r0, #1
    3d76:	3076      	adds	r0, #118	; 0x76
}
    3d78:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    3d7c:	4770      	bx	lr
	...

00003d80 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3d80:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3d82:	f013 0f01 	tst.w	r3, #1
    3d86:	d1fb      	bne.n	3d80 <_adc_init>
    3d88:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3d8a:	f013 0f03 	tst.w	r3, #3
    3d8e:	d1fb      	bne.n	3d88 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    3d90:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    3d92:	f013 0f02 	tst.w	r3, #2
    3d96:	d130      	bne.n	3dfa <_adc_init+0x7a>
{
    3d98:	b410      	push	{r4}
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3d9a:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3d9c:	f013 0f01 	tst.w	r3, #1
    3da0:	d1fb      	bne.n	3d9a <_adc_init+0x1a>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    3da2:	8803      	ldrh	r3, [r0, #0]
    3da4:	b29b      	uxth	r3, r3
    3da6:	f043 0301 	orr.w	r3, r3, #1
    3daa:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3dac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3dae:	f013 0f01 	tst.w	r3, #1
    3db2:	d1fb      	bne.n	3dac <_adc_init+0x2c>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	ADC0->CTRLB.reg = 0x0001; //12 bit, left adjusted, single conversion
    3db4:	4b12      	ldr	r3, [pc, #72]	; (3e00 <_adc_init+0x80>)
    3db6:	2201      	movs	r2, #1
    3db8:	80da      	strh	r2, [r3, #6]
	//hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
	
	ADC0->REFCTRL.reg = 0x03; // REFCOMP disable, VDDANA
    3dba:	2203      	movs	r2, #3
    3dbc:	721a      	strb	r2, [r3, #8]
	//hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
	
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    3dbe:	2416      	movs	r4, #22
    3dc0:	4a10      	ldr	r2, [pc, #64]	; (3e04 <_adc_init+0x84>)
    3dc2:	fb04 2101 	mla	r1, r4, r1, r2
    3dc6:	79ca      	ldrb	r2, [r1, #7]
}

static inline void hri_adc_write_EVCTRL_reg(const void *const hw, hri_adc_evctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->EVCTRL.reg = data;
    3dc8:	7082      	strb	r2, [r0, #2]
	
	ADC0->INPUTCTRL.reg = 0x1800; // internal ground, single ended mode
    3dca:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    3dce:	809a      	strh	r2, [r3, #4]
	//hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
	
	//ADC0->AVGCTRL.reg = 0x22; //4 sample average
	ADC0->AVGCTRL.reg = 0x49; //512 sample average
    3dd0:	2249      	movs	r2, #73	; 0x49
    3dd2:	729a      	strb	r2, [r3, #10]
	//hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
	
	ADC0->SAMPCTRL.reg = 0x06;
    3dd4:	2206      	movs	r2, #6
    3dd6:	72da      	strb	r2, [r3, #11]
	//hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
	
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    3dd8:	898a      	ldrh	r2, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    3dda:	8182      	strh	r2, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    3ddc:	89ca      	ldrh	r2, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    3dde:	81c2      	strh	r2, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    3de0:	8a0a      	ldrh	r2, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    3de2:	8202      	strh	r2, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    3de4:	8a4a      	ldrh	r2, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    3de6:	8242      	strh	r2, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    3de8:	7d0a      	ldrb	r2, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    3dea:	70c2      	strb	r2, [r0, #3]
	//hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
	
	//R2R - 1
	//DIV64 - 5
	//ENABLE - 1	 
	ADC0->CTRLA.reg = 0x85C2;
    3dec:	f248 52c2 	movw	r2, #34242	; 0x85c2
    3df0:	801a      	strh	r2, [r3, #0]

	return ERR_NONE;
    3df2:	2000      	movs	r0, #0
}
    3df4:	f85d 4b04 	ldr.w	r4, [sp], #4
    3df8:	4770      	bx	lr
		return ERR_DENIED;
    3dfa:	f06f 0010 	mvn.w	r0, #16
    3dfe:	4770      	bx	lr
    3e00:	43001c00 	.word	0x43001c00
    3e04:	00009494 	.word	0x00009494

00003e08 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    3e08:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    3e0c:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    3e10:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    3e14:	b148      	cbz	r0, 3e2a <_adc_get_regs+0x22>
    3e16:	2801      	cmp	r0, #1
    3e18:	d009      	beq.n	3e2e <_adc_get_regs+0x26>
{
    3e1a:	b508      	push	{r3, lr}
	ASSERT(false);
    3e1c:	2291      	movs	r2, #145	; 0x91
    3e1e:	4905      	ldr	r1, [pc, #20]	; (3e34 <_adc_get_regs+0x2c>)
    3e20:	2000      	movs	r0, #0
    3e22:	4b05      	ldr	r3, [pc, #20]	; (3e38 <_adc_get_regs+0x30>)
    3e24:	4798      	blx	r3
	return 0;
    3e26:	2000      	movs	r0, #0
    3e28:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    3e2a:	2000      	movs	r0, #0
    3e2c:	4770      	bx	lr
    3e2e:	2001      	movs	r0, #1
    3e30:	4770      	bx	lr
    3e32:	bf00      	nop
    3e34:	000094c0 	.word	0x000094c0
    3e38:	00003c21 	.word	0x00003c21

00003e3c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    3e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e40:	460d      	mov	r5, r1
	int32_t init_status;

	ASSERT(device);
    3e42:	4604      	mov	r4, r0
    3e44:	22e8      	movs	r2, #232	; 0xe8
    3e46:	4935      	ldr	r1, [pc, #212]	; (3f1c <_adc_sync_init+0xe0>)
    3e48:	3000      	adds	r0, #0
    3e4a:	bf18      	it	ne
    3e4c:	2001      	movne	r0, #1
    3e4e:	4b34      	ldr	r3, [pc, #208]	; (3f20 <_adc_sync_init+0xe4>)
    3e50:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    3e52:	4628      	mov	r0, r5
    3e54:	4b33      	ldr	r3, [pc, #204]	; (3f24 <_adc_sync_init+0xe8>)
    3e56:	4798      	blx	r3
    3e58:	4601      	mov	r1, r0
    3e5a:	4628      	mov	r0, r5
    3e5c:	4b32      	ldr	r3, [pc, #200]	; (3f28 <_adc_sync_init+0xec>)
    3e5e:	4798      	blx	r3
	if (init_status) {
    3e60:	4607      	mov	r7, r0
    3e62:	2800      	cmp	r0, #0
    3e64:	d157      	bne.n	3f16 <_adc_sync_init+0xda>
		return init_status;
	}
	device->hw = hw;
    3e66:	6025      	str	r5, [r4, #0]
	_adc_init_irq_param(hw, device);
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    3e68:	4620      	mov	r0, r4
    3e6a:	4e30      	ldr	r6, [pc, #192]	; (3f2c <_adc_sync_init+0xf0>)
    3e6c:	47b0      	blx	r6
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e6e:	0943      	lsrs	r3, r0, #5
    3e70:	f000 001f 	and.w	r0, r0, #31
    3e74:	2501      	movs	r5, #1
    3e76:	fa05 f000 	lsl.w	r0, r5, r0
    3e7a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3f30 <_adc_sync_init+0xf4>
    3e7e:	3320      	adds	r3, #32
    3e80:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3e84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e88:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    3e8c:	4620      	mov	r0, r4
    3e8e:	47b0      	blx	r6
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3e90:	0943      	lsrs	r3, r0, #5
    3e92:	f000 001f 	and.w	r0, r0, #31
    3e96:	fa05 f000 	lsl.w	r0, r5, r0
    3e9a:	3360      	adds	r3, #96	; 0x60
    3e9c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    3ea0:	4620      	mov	r0, r4
    3ea2:	47b0      	blx	r6
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ea4:	0943      	lsrs	r3, r0, #5
    3ea6:	f000 001f 	and.w	r0, r0, #31
    3eaa:	4085      	lsls	r5, r0
    3eac:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    3eb0:	4620      	mov	r0, r4
    3eb2:	47b0      	blx	r6
    3eb4:	3001      	adds	r0, #1
    3eb6:	b280      	uxth	r0, r0
    3eb8:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3eba:	2b00      	cmp	r3, #0
    3ebc:	db2b      	blt.n	3f16 <_adc_sync_init+0xda>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ebe:	095b      	lsrs	r3, r3, #5
    3ec0:	f000 001f 	and.w	r0, r0, #31
    3ec4:	2201      	movs	r2, #1
    3ec6:	fa02 f000 	lsl.w	r0, r2, r0
    3eca:	3320      	adds	r3, #32
    3ecc:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3ed0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ed4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    3ed8:	4620      	mov	r0, r4
    3eda:	47b0      	blx	r6
    3edc:	3001      	adds	r0, #1
    3ede:	b280      	uxth	r0, r0
    3ee0:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3ee2:	2b00      	cmp	r3, #0
    3ee4:	db17      	blt.n	3f16 <_adc_sync_init+0xda>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ee6:	095b      	lsrs	r3, r3, #5
    3ee8:	f000 001f 	and.w	r0, r0, #31
    3eec:	2201      	movs	r2, #1
    3eee:	fa02 f000 	lsl.w	r0, r2, r0
    3ef2:	3360      	adds	r3, #96	; 0x60
    3ef4:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    3ef8:	4620      	mov	r0, r4
    3efa:	47b0      	blx	r6
    3efc:	3001      	adds	r0, #1
    3efe:	b280      	uxth	r0, r0
    3f00:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3f02:	2b00      	cmp	r3, #0
    3f04:	db07      	blt.n	3f16 <_adc_sync_init+0xda>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3f06:	095b      	lsrs	r3, r3, #5
    3f08:	f000 001f 	and.w	r0, r0, #31
    3f0c:	2201      	movs	r2, #1
    3f0e:	fa02 f000 	lsl.w	r0, r2, r0
    3f12:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	return ERR_NONE;
}
    3f16:	4638      	mov	r0, r7
    3f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f1c:	000094c0 	.word	0x000094c0
    3f20:	00003c21 	.word	0x00003c21
    3f24:	00003e09 	.word	0x00003e09
    3f28:	00003d81 	.word	0x00003d81
    3f2c:	00003d69 	.word	0x00003d69
    3f30:	e000e100 	.word	0xe000e100

00003f34 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    3f34:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3f36:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3f38:	f013 0f03 	tst.w	r3, #3
    3f3c:	d1fb      	bne.n	3f36 <_adc_sync_enable_channel+0x2>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3f3e:	8813      	ldrh	r3, [r2, #0]
    3f40:	b29b      	uxth	r3, r3
    3f42:	f043 0302 	orr.w	r3, r3, #2
    3f46:	8013      	strh	r3, [r2, #0]
    3f48:	4770      	bx	lr

00003f4a <_adc_sync_disable_channel>:
 */
void _adc_sync_disable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_clear_CTRLA_ENABLE_bit(device->hw);
    3f4a:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3f4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3f4e:	f013 0f03 	tst.w	r3, #3
    3f52:	d1fb      	bne.n	3f4c <_adc_sync_disable_channel+0x2>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    3f54:	8813      	ldrh	r3, [r2, #0]
    3f56:	f023 0302 	bic.w	r3, r3, #2
    3f5a:	041b      	lsls	r3, r3, #16
    3f5c:	0c1b      	lsrs	r3, r3, #16
    3f5e:	8013      	strh	r3, [r2, #0]
    3f60:	4770      	bx	lr

00003f62 <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    3f62:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    3f64:	88db      	ldrh	r3, [r3, #6]
    3f66:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    3f6a:	2b03      	cmp	r3, #3
}
    3f6c:	bf0c      	ite	eq
    3f6e:	2001      	moveq	r0, #1
    3f70:	2002      	movne	r0, #2
    3f72:	4770      	bx	lr

00003f74 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    3f74:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    3f76:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    3f7a:	f000 0001 	and.w	r0, r0, #1
    3f7e:	4770      	bx	lr

00003f80 <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    3f80:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3f82:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3f88:	2b00      	cmp	r3, #0
    3f8a:	d1fa      	bne.n	3f82 <_adc_sync_convert+0x2>

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    3f8c:	7d13      	ldrb	r3, [r2, #20]
    3f8e:	f043 0302 	orr.w	r3, r3, #2
    3f92:	7513      	strb	r3, [r2, #20]
    3f94:	4770      	bx	lr

00003f96 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    3f96:	6803      	ldr	r3, [r0, #0]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    3f98:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    3f9c:	b280      	uxth	r0, r0
    3f9e:	4770      	bx	lr

00003fa0 <_adc_sync_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_sync_set_inputs(struct _adc_sync_device *const device, const adc_pos_input_t pos_input,
                          const adc_neg_input_t neg_input, const uint8_t channel)
{
    3fa0:	b410      	push	{r4}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
    3fa2:	6804      	ldr	r4, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3fa4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3faa:	2b00      	cmp	r3, #0
    3fac:	d1fa      	bne.n	3fa4 <_adc_sync_set_inputs+0x4>
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    3fae:	88a3      	ldrh	r3, [r4, #4]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
    3fb0:	f023 031f 	bic.w	r3, r3, #31
    3fb4:	041b      	lsls	r3, r3, #16
    3fb6:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
    3fb8:	f001 011f 	and.w	r1, r1, #31
    3fbc:	430b      	orrs	r3, r1
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    3fbe:	80a3      	strh	r3, [r4, #4]
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
    3fc0:	6801      	ldr	r1, [r0, #0]
    3fc2:	b292      	uxth	r2, r2
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3fc4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    3fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3fca:	2b00      	cmp	r3, #0
    3fcc:	d1fa      	bne.n	3fc4 <_adc_sync_set_inputs+0x24>
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    3fce:	888b      	ldrh	r3, [r1, #4]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
    3fd0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3fd4:	041b      	lsls	r3, r3, #16
    3fd6:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
    3fd8:	0212      	lsls	r2, r2, #8
    3fda:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
    3fde:	4313      	orrs	r3, r2
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    3fe0:	808b      	strh	r3, [r1, #4]
}
    3fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
    3fe6:	4770      	bx	lr

00003fe8 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    3fe8:	f64b 3380 	movw	r3, #48000	; 0xbb80
    3fec:	fb03 f000 	mul.w	r0, r3, r0
    3ff0:	4770      	bx	lr
	...

00003ff4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3ff4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3ff6:	4a0c      	ldr	r2, [pc, #48]	; (4028 <_init_chip+0x34>)
    3ff8:	8813      	ldrh	r3, [r2, #0]
    3ffa:	b29b      	uxth	r3, r3
    3ffc:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    3ffe:	4b0b      	ldr	r3, [pc, #44]	; (402c <_init_chip+0x38>)
    4000:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    4002:	4b0b      	ldr	r3, [pc, #44]	; (4030 <_init_chip+0x3c>)
    4004:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    4006:	f44f 6000 	mov.w	r0, #2048	; 0x800
    400a:	4c0a      	ldr	r4, [pc, #40]	; (4034 <_init_chip+0x40>)
    400c:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    400e:	4b0a      	ldr	r3, [pc, #40]	; (4038 <_init_chip+0x44>)
    4010:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    4012:	f240 70ff 	movw	r0, #2047	; 0x7ff
    4016:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    4018:	4a08      	ldr	r2, [pc, #32]	; (403c <_init_chip+0x48>)
    401a:	6913      	ldr	r3, [r2, #16]
    401c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    4020:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    4022:	4b07      	ldr	r3, [pc, #28]	; (4040 <_init_chip+0x4c>)
    4024:	4798      	blx	r3
    4026:	bd10      	pop	{r4, pc}
    4028:	41004000 	.word	0x41004000
    402c:	000042dd 	.word	0x000042dd
    4030:	0000427d 	.word	0x0000427d
    4034:	000041d5 	.word	0x000041d5
    4038:	00004309 	.word	0x00004309
    403c:	40000800 	.word	0x40000800
    4040:	000040b9 	.word	0x000040b9

00004044 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    4044:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    4046:	4a1a      	ldr	r2, [pc, #104]	; (40b0 <_dmac_handler+0x6c>)
    4048:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    404a:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    404e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4052:	4818      	ldr	r0, [pc, #96]	; (40b4 <_dmac_handler+0x70>)
    4054:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    4058:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    405c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    4060:	f012 0f01 	tst.w	r2, #1
    4064:	d10a      	bne.n	407c <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    4066:	011a      	lsls	r2, r3, #4
    4068:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    406c:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    4070:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    4074:	f012 0f02 	tst.w	r2, #2
    4078:	d10b      	bne.n	4092 <_dmac_handler+0x4e>
    407a:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    407c:	011a      	lsls	r2, r3, #4
    407e:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4082:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    4086:	2101      	movs	r1, #1
    4088:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    408c:	6843      	ldr	r3, [r0, #4]
    408e:	4798      	blx	r3
    4090:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    4092:	011a      	lsls	r2, r3, #4
    4094:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    4098:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    409c:	2102      	movs	r1, #2
    409e:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    40a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    40a6:	4a03      	ldr	r2, [pc, #12]	; (40b4 <_dmac_handler+0x70>)
    40a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    40ac:	4798      	blx	r3
	}
}
    40ae:	e7e4      	b.n	407a <_dmac_handler+0x36>
    40b0:	4100a000 	.word	0x4100a000
    40b4:	20000650 	.word	0x20000650

000040b8 <_dma_init>:
{
    40b8:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    40ba:	4a33      	ldr	r2, [pc, #204]	; (4188 <_dma_init+0xd0>)
    40bc:	8813      	ldrh	r3, [r2, #0]
    40be:	f023 0302 	bic.w	r3, r3, #2
    40c2:	041b      	lsls	r3, r3, #16
    40c4:	0c1b      	lsrs	r3, r3, #16
    40c6:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    40c8:	8853      	ldrh	r3, [r2, #2]
    40ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    40ce:	041b      	lsls	r3, r3, #16
    40d0:	0c1b      	lsrs	r3, r3, #16
    40d2:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    40d4:	8813      	ldrh	r3, [r2, #0]
    40d6:	b29b      	uxth	r3, r3
    40d8:	f043 0301 	orr.w	r3, r3, #1
    40dc:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    40de:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    40e0:	f013 0f01 	tst.w	r3, #1
    40e4:	d1fb      	bne.n	40de <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    40e6:	4b28      	ldr	r3, [pc, #160]	; (4188 <_dma_init+0xd0>)
    40e8:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    40ec:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    40ee:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    40f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    40f4:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    40f6:	2000      	movs	r0, #0
    40f8:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    40fa:	4a24      	ldr	r2, [pc, #144]	; (418c <_dma_init+0xd4>)
    40fc:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    4100:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    4102:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    4106:	639a      	str	r2, [r3, #56]	; 0x38
    4108:	4b21      	ldr	r3, [pc, #132]	; (4190 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    410a:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    410e:	681c      	ldr	r4, [r3, #0]
    4110:	0101      	lsls	r1, r0, #4
    4112:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    4116:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    411a:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    411c:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    411e:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    4122:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    4124:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    4128:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    412a:	4429      	add	r1, r5
    412c:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    4130:	3001      	adds	r0, #1
    4132:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    4134:	2820      	cmp	r0, #32
    4136:	d1ea      	bne.n	410e <_dma_init+0x56>
    4138:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    413a:	2001      	movs	r0, #1
    413c:	4915      	ldr	r1, [pc, #84]	; (4194 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    413e:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    4140:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    4144:	d00b      	beq.n	415e <_dma_init+0xa6>
    4146:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    4148:	2b24      	cmp	r3, #36	; 0x24
    414a:	d1f8      	bne.n	413e <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    414c:	4a0e      	ldr	r2, [pc, #56]	; (4188 <_dma_init+0xd0>)
    414e:	8813      	ldrh	r3, [r2, #0]
    4150:	b29b      	uxth	r3, r3
    4152:	f043 0302 	orr.w	r3, r3, #2
    4156:	8013      	strh	r3, [r2, #0]
}
    4158:	2000      	movs	r0, #0
    415a:	bc30      	pop	{r4, r5}
    415c:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    415e:	095c      	lsrs	r4, r3, #5
    4160:	f002 021f 	and.w	r2, r2, #31
    4164:	fa00 f202 	lsl.w	r2, r0, r2
    4168:	f104 0520 	add.w	r5, r4, #32
    416c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4170:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4174:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4178:	f104 0560 	add.w	r5, r4, #96	; 0x60
    417c:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4180:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    4184:	e7df      	b.n	4146 <_dma_init+0x8e>
    4186:	bf00      	nop
    4188:	4100a000 	.word	0x4100a000
    418c:	20000650 	.word	0x20000650
    4190:	000094d8 	.word	0x000094d8
    4194:	e000e100 	.word	0xe000e100

00004198 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    4198:	b508      	push	{r3, lr}
	_dmac_handler();
    419a:	4b01      	ldr	r3, [pc, #4]	; (41a0 <DMAC_0_Handler+0x8>)
    419c:	4798      	blx	r3
    419e:	bd08      	pop	{r3, pc}
    41a0:	00004045 	.word	0x00004045

000041a4 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    41a4:	b508      	push	{r3, lr}
	_dmac_handler();
    41a6:	4b01      	ldr	r3, [pc, #4]	; (41ac <DMAC_1_Handler+0x8>)
    41a8:	4798      	blx	r3
    41aa:	bd08      	pop	{r3, pc}
    41ac:	00004045 	.word	0x00004045

000041b0 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    41b0:	b508      	push	{r3, lr}
	_dmac_handler();
    41b2:	4b01      	ldr	r3, [pc, #4]	; (41b8 <DMAC_2_Handler+0x8>)
    41b4:	4798      	blx	r3
    41b6:	bd08      	pop	{r3, pc}
    41b8:	00004045 	.word	0x00004045

000041bc <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    41bc:	b508      	push	{r3, lr}
	_dmac_handler();
    41be:	4b01      	ldr	r3, [pc, #4]	; (41c4 <DMAC_3_Handler+0x8>)
    41c0:	4798      	blx	r3
    41c2:	bd08      	pop	{r3, pc}
    41c4:	00004045 	.word	0x00004045

000041c8 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    41c8:	b508      	push	{r3, lr}
	_dmac_handler();
    41ca:	4b01      	ldr	r3, [pc, #4]	; (41d0 <DMAC_4_Handler+0x8>)
    41cc:	4798      	blx	r3
    41ce:	bd08      	pop	{r3, pc}
    41d0:	00004045 	.word	0x00004045

000041d4 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    41d4:	f010 0f01 	tst.w	r0, #1
    41d8:	d002      	beq.n	41e0 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    41da:	4a23      	ldr	r2, [pc, #140]	; (4268 <_gclk_init_generators_by_fref+0x94>)
    41dc:	4b23      	ldr	r3, [pc, #140]	; (426c <_gclk_init_generators_by_fref+0x98>)
    41de:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    41e0:	f010 0f02 	tst.w	r0, #2
    41e4:	d002      	beq.n	41ec <_gclk_init_generators_by_fref+0x18>
    41e6:	4a22      	ldr	r2, [pc, #136]	; (4270 <_gclk_init_generators_by_fref+0x9c>)
    41e8:	4b20      	ldr	r3, [pc, #128]	; (426c <_gclk_init_generators_by_fref+0x98>)
    41ea:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    41ec:	f010 0f04 	tst.w	r0, #4
    41f0:	d002      	beq.n	41f8 <_gclk_init_generators_by_fref+0x24>
    41f2:	4a1d      	ldr	r2, [pc, #116]	; (4268 <_gclk_init_generators_by_fref+0x94>)
    41f4:	4b1d      	ldr	r3, [pc, #116]	; (426c <_gclk_init_generators_by_fref+0x98>)
    41f6:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    41f8:	f010 0f08 	tst.w	r0, #8
    41fc:	d002      	beq.n	4204 <_gclk_init_generators_by_fref+0x30>
    41fe:	4a1a      	ldr	r2, [pc, #104]	; (4268 <_gclk_init_generators_by_fref+0x94>)
    4200:	4b1a      	ldr	r3, [pc, #104]	; (426c <_gclk_init_generators_by_fref+0x98>)
    4202:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    4204:	f010 0f10 	tst.w	r0, #16
    4208:	d002      	beq.n	4210 <_gclk_init_generators_by_fref+0x3c>
    420a:	4a17      	ldr	r2, [pc, #92]	; (4268 <_gclk_init_generators_by_fref+0x94>)
    420c:	4b17      	ldr	r3, [pc, #92]	; (426c <_gclk_init_generators_by_fref+0x98>)
    420e:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    4210:	f010 0f20 	tst.w	r0, #32
    4214:	d002      	beq.n	421c <_gclk_init_generators_by_fref+0x48>
    4216:	4a14      	ldr	r2, [pc, #80]	; (4268 <_gclk_init_generators_by_fref+0x94>)
    4218:	4b14      	ldr	r3, [pc, #80]	; (426c <_gclk_init_generators_by_fref+0x98>)
    421a:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    421c:	f010 0f40 	tst.w	r0, #64	; 0x40
    4220:	d002      	beq.n	4228 <_gclk_init_generators_by_fref+0x54>
    4222:	4a11      	ldr	r2, [pc, #68]	; (4268 <_gclk_init_generators_by_fref+0x94>)
    4224:	4b11      	ldr	r3, [pc, #68]	; (426c <_gclk_init_generators_by_fref+0x98>)
    4226:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    4228:	f010 0f80 	tst.w	r0, #128	; 0x80
    422c:	d002      	beq.n	4234 <_gclk_init_generators_by_fref+0x60>
    422e:	4a0e      	ldr	r2, [pc, #56]	; (4268 <_gclk_init_generators_by_fref+0x94>)
    4230:	4b0e      	ldr	r3, [pc, #56]	; (426c <_gclk_init_generators_by_fref+0x98>)
    4232:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    4234:	f410 7f80 	tst.w	r0, #256	; 0x100
    4238:	d002      	beq.n	4240 <_gclk_init_generators_by_fref+0x6c>
    423a:	4a0b      	ldr	r2, [pc, #44]	; (4268 <_gclk_init_generators_by_fref+0x94>)
    423c:	4b0b      	ldr	r3, [pc, #44]	; (426c <_gclk_init_generators_by_fref+0x98>)
    423e:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    4240:	f410 7f00 	tst.w	r0, #512	; 0x200
    4244:	d002      	beq.n	424c <_gclk_init_generators_by_fref+0x78>
    4246:	4a08      	ldr	r2, [pc, #32]	; (4268 <_gclk_init_generators_by_fref+0x94>)
    4248:	4b08      	ldr	r3, [pc, #32]	; (426c <_gclk_init_generators_by_fref+0x98>)
    424a:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    424c:	f410 6f80 	tst.w	r0, #1024	; 0x400
    4250:	d002      	beq.n	4258 <_gclk_init_generators_by_fref+0x84>
    4252:	4a08      	ldr	r2, [pc, #32]	; (4274 <_gclk_init_generators_by_fref+0xa0>)
    4254:	4b05      	ldr	r3, [pc, #20]	; (426c <_gclk_init_generators_by_fref+0x98>)
    4256:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    4258:	f410 6f00 	tst.w	r0, #2048	; 0x800
    425c:	d002      	beq.n	4264 <_gclk_init_generators_by_fref+0x90>
    425e:	4a06      	ldr	r2, [pc, #24]	; (4278 <_gclk_init_generators_by_fref+0xa4>)
    4260:	4b02      	ldr	r3, [pc, #8]	; (426c <_gclk_init_generators_by_fref+0x98>)
    4262:	64da      	str	r2, [r3, #76]	; 0x4c
    4264:	4770      	bx	lr
    4266:	bf00      	nop
    4268:	00012b06 	.word	0x00012b06
    426c:	40001c00 	.word	0x40001c00
    4270:	00012306 	.word	0x00012306
    4274:	00012b05 	.word	0x00012b05
    4278:	00013b05 	.word	0x00013b05

0000427c <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    427c:	2201      	movs	r2, #1
    427e:	4b01      	ldr	r3, [pc, #4]	; (4284 <_mclk_init+0x8>)
    4280:	715a      	strb	r2, [r3, #5]
    4282:	4770      	bx	lr
    4284:	40000800 	.word	0x40000800

00004288 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    4288:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    428a:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    428c:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    428e:	f012 0f01 	tst.w	r2, #1
    4292:	d005      	beq.n	42a0 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    4294:	2201      	movs	r2, #1
    4296:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    4298:	6803      	ldr	r3, [r0, #0]
    429a:	b153      	cbz	r3, 42b2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    429c:	4798      	blx	r3
    429e:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    42a0:	8a1a      	ldrh	r2, [r3, #16]
    42a2:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    42a4:	b12a      	cbz	r2, 42b2 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    42a6:	f240 225e 	movw	r2, #606	; 0x25e
    42aa:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    42ac:	6843      	ldr	r3, [r0, #4]
    42ae:	b103      	cbz	r3, 42b2 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    42b0:	4798      	blx	r3
    42b2:	bd08      	pop	{r3, pc}

000042b4 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    42b4:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    42b6:	4b02      	ldr	r3, [pc, #8]	; (42c0 <NVMCTRL_0_Handler+0xc>)
    42b8:	6818      	ldr	r0, [r3, #0]
    42ba:	4b02      	ldr	r3, [pc, #8]	; (42c4 <NVMCTRL_0_Handler+0x10>)
    42bc:	4798      	blx	r3
    42be:	bd08      	pop	{r3, pc}
    42c0:	20000bd0 	.word	0x20000bd0
    42c4:	00004289 	.word	0x00004289

000042c8 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    42c8:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    42ca:	4b02      	ldr	r3, [pc, #8]	; (42d4 <NVMCTRL_1_Handler+0xc>)
    42cc:	6818      	ldr	r0, [r3, #0]
    42ce:	4b02      	ldr	r3, [pc, #8]	; (42d8 <NVMCTRL_1_Handler+0x10>)
    42d0:	4798      	blx	r3
    42d2:	bd08      	pop	{r3, pc}
    42d4:	20000bd0 	.word	0x20000bd0
    42d8:	00004289 	.word	0x00004289

000042dc <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    42dc:	4b09      	ldr	r3, [pc, #36]	; (4304 <_osc32kctrl_init_sources+0x28>)
    42de:	f242 024e 	movw	r2, #8270	; 0x204e
    42e2:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    42e4:	2201      	movs	r2, #1
    42e6:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    42e8:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    42ea:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    42ec:	2200      	movs	r2, #0
    42ee:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    42f0:	461a      	mov	r2, r3
    42f2:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    42f4:	f013 0f01 	tst.w	r3, #1
    42f8:	d0fb      	beq.n	42f2 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    42fa:	2204      	movs	r2, #4
    42fc:	4b01      	ldr	r3, [pc, #4]	; (4304 <_osc32kctrl_init_sources+0x28>)
    42fe:	741a      	strb	r2, [r3, #16]
    4300:	4770      	bx	lr
    4302:	bf00      	nop
    4304:	40001400 	.word	0x40001400

00004308 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    4308:	4a2b      	ldr	r2, [pc, #172]	; (43b8 <_oscctrl_init_referenced_generators+0xb0>)
    430a:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    430c:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    4310:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4314:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4316:	4b29      	ldr	r3, [pc, #164]	; (43bc <_oscctrl_init_referenced_generators+0xb4>)
    4318:	2200      	movs	r2, #0
    431a:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    431c:	4a28      	ldr	r2, [pc, #160]	; (43c0 <_oscctrl_init_referenced_generators+0xb8>)
    431e:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4320:	461a      	mov	r2, r3
    4322:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    4326:	f013 0f10 	tst.w	r3, #16
    432a:	d1fa      	bne.n	4322 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    432c:	2200      	movs	r2, #0
    432e:	4b23      	ldr	r3, [pc, #140]	; (43bc <_oscctrl_init_referenced_generators+0xb4>)
    4330:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4334:	461a      	mov	r2, r3
    4336:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    433a:	f013 0f04 	tst.w	r3, #4
    433e:	d1fa      	bne.n	4336 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    4340:	2242      	movs	r2, #66	; 0x42
    4342:	4b1e      	ldr	r3, [pc, #120]	; (43bc <_oscctrl_init_referenced_generators+0xb4>)
    4344:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4346:	461a      	mov	r2, r3
    4348:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    434c:	f013 0f02 	tst.w	r3, #2
    4350:	d1fa      	bne.n	4348 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    4352:	4b1a      	ldr	r3, [pc, #104]	; (43bc <_oscctrl_init_referenced_generators+0xb4>)
    4354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    4356:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    4358:	461a      	mov	r2, r3
    435a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    435e:	f013 0f08 	tst.w	r3, #8
    4362:	d1fa      	bne.n	435a <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4364:	2282      	movs	r2, #130	; 0x82
    4366:	4b15      	ldr	r3, [pc, #84]	; (43bc <_oscctrl_init_referenced_generators+0xb4>)
    4368:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    436c:	461a      	mov	r2, r3
    436e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4372:	f013 0f04 	tst.w	r3, #4
    4376:	d1fa      	bne.n	436e <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4378:	4b10      	ldr	r3, [pc, #64]	; (43bc <_oscctrl_init_referenced_generators+0xb4>)
    437a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    437e:	f013 0f01 	tst.w	r3, #1
    4382:	d012      	beq.n	43aa <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4384:	4a0d      	ldr	r2, [pc, #52]	; (43bc <_oscctrl_init_referenced_generators+0xb4>)
    4386:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    4388:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    438c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4390:	d1f9      	bne.n	4386 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4392:	4a09      	ldr	r2, [pc, #36]	; (43b8 <_oscctrl_init_referenced_generators+0xb0>)
    4394:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    4396:	2b00      	cmp	r3, #0
    4398:	d1fc      	bne.n	4394 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    439a:	4a07      	ldr	r2, [pc, #28]	; (43b8 <_oscctrl_init_referenced_generators+0xb0>)
    439c:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    439e:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    43a2:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    43a6:	6213      	str	r3, [r2, #32]
    43a8:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    43aa:	4a04      	ldr	r2, [pc, #16]	; (43bc <_oscctrl_init_referenced_generators+0xb4>)
    43ac:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    43ae:	f413 7f80 	tst.w	r3, #256	; 0x100
    43b2:	d0fb      	beq.n	43ac <_oscctrl_init_referenced_generators+0xa4>
    43b4:	e7ed      	b.n	4392 <_oscctrl_init_referenced_generators+0x8a>
    43b6:	bf00      	nop
    43b8:	40001c00 	.word	0x40001c00
    43bc:	40001000 	.word	0x40001000
    43c0:	04010000 	.word	0x04010000

000043c4 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    43c4:	b500      	push	{lr}
    43c6:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    43c8:	4b0d      	ldr	r3, [pc, #52]	; (4400 <RAMECC_Handler+0x3c>)
    43ca:	789b      	ldrb	r3, [r3, #2]
    43cc:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    43ce:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    43d0:	9b01      	ldr	r3, [sp, #4]
    43d2:	f013 0f02 	tst.w	r3, #2
    43d6:	d006      	beq.n	43e6 <RAMECC_Handler+0x22>
    43d8:	4b0a      	ldr	r3, [pc, #40]	; (4404 <RAMECC_Handler+0x40>)
    43da:	681b      	ldr	r3, [r3, #0]
    43dc:	b11b      	cbz	r3, 43e6 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    43de:	4a08      	ldr	r2, [pc, #32]	; (4400 <RAMECC_Handler+0x3c>)
    43e0:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    43e2:	4798      	blx	r3
    43e4:	e009      	b.n	43fa <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    43e6:	9b01      	ldr	r3, [sp, #4]
    43e8:	f013 0f01 	tst.w	r3, #1
    43ec:	d005      	beq.n	43fa <RAMECC_Handler+0x36>
    43ee:	4b05      	ldr	r3, [pc, #20]	; (4404 <RAMECC_Handler+0x40>)
    43f0:	685b      	ldr	r3, [r3, #4]
    43f2:	b113      	cbz	r3, 43fa <RAMECC_Handler+0x36>
    43f4:	4a02      	ldr	r2, [pc, #8]	; (4400 <RAMECC_Handler+0x3c>)
    43f6:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    43f8:	4798      	blx	r3
	} else {
		return;
	}
}
    43fa:	b003      	add	sp, #12
    43fc:	f85d fb04 	ldr.w	pc, [sp], #4
    4400:	41020000 	.word	0x41020000
    4404:	20003f8c 	.word	0x20003f8c

00004408 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    4408:	b470      	push	{r4, r5, r6}
    440a:	b087      	sub	sp, #28
    440c:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    440e:	466c      	mov	r4, sp
    4410:	4d0c      	ldr	r5, [pc, #48]	; (4444 <_sercom_get_hardware_index+0x3c>)
    4412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4416:	e895 0003 	ldmia.w	r5, {r0, r1}
    441a:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    441e:	9b00      	ldr	r3, [sp, #0]
    4420:	42b3      	cmp	r3, r6
    4422:	d00c      	beq.n	443e <_sercom_get_hardware_index+0x36>
    4424:	4632      	mov	r2, r6
    4426:	2001      	movs	r0, #1
    4428:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    442c:	4293      	cmp	r3, r2
    442e:	d007      	beq.n	4440 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4430:	3001      	adds	r0, #1
    4432:	2806      	cmp	r0, #6
    4434:	d1f8      	bne.n	4428 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    4436:	2000      	movs	r0, #0
}
    4438:	b007      	add	sp, #28
    443a:	bc70      	pop	{r4, r5, r6}
    443c:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    443e:	2000      	movs	r0, #0
			return i;
    4440:	b2c0      	uxtb	r0, r0
    4442:	e7f9      	b.n	4438 <_sercom_get_hardware_index+0x30>
    4444:	000095d8 	.word	0x000095d8

00004448 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    4448:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    444a:	4b03      	ldr	r3, [pc, #12]	; (4458 <_sercom_get_irq_num+0x10>)
    444c:	4798      	blx	r3
    444e:	0080      	lsls	r0, r0, #2
    4450:	302e      	adds	r0, #46	; 0x2e
}
    4452:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    4456:	bd08      	pop	{r3, pc}
    4458:	00004409 	.word	0x00004409

0000445c <_usart_init>:
{
    445c:	b538      	push	{r3, r4, r5, lr}
    445e:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    4460:	4b33      	ldr	r3, [pc, #204]	; (4530 <_usart_init+0xd4>)
    4462:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    4464:	2803      	cmp	r0, #3
    4466:	d056      	beq.n	4516 <_usart_init+0xba>
    4468:	2804      	cmp	r0, #4
    446a:	d052      	beq.n	4512 <_usart_init+0xb6>
    446c:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    446e:	bf08      	it	eq
    4470:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    4472:	d006      	beq.n	4482 <_usart_init+0x26>
	ASSERT(false);
    4474:	f240 2263 	movw	r2, #611	; 0x263
    4478:	492e      	ldr	r1, [pc, #184]	; (4534 <_usart_init+0xd8>)
    447a:	2000      	movs	r0, #0
    447c:	4b2e      	ldr	r3, [pc, #184]	; (4538 <_usart_init+0xdc>)
    447e:	4798      	blx	r3
	return 0;
    4480:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    4482:	69e3      	ldr	r3, [r4, #28]
    4484:	f013 0f01 	tst.w	r3, #1
    4488:	d1fb      	bne.n	4482 <_usart_init+0x26>
    448a:	69e3      	ldr	r3, [r4, #28]
    448c:	f013 0f03 	tst.w	r3, #3
    4490:	d1fb      	bne.n	448a <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    4492:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    4494:	f013 0f02 	tst.w	r3, #2
    4498:	d147      	bne.n	452a <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    449a:	69e3      	ldr	r3, [r4, #28]
    449c:	f013 0f01 	tst.w	r3, #1
    44a0:	d1fb      	bne.n	449a <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    44a2:	6823      	ldr	r3, [r4, #0]
    44a4:	f043 0301 	orr.w	r3, r3, #1
    44a8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    44aa:	69e3      	ldr	r3, [r4, #28]
    44ac:	f013 0f01 	tst.w	r3, #1
    44b0:	d1fb      	bne.n	44aa <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    44b2:	4610      	mov	r0, r2
    44b4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    44b8:	4920      	ldr	r1, [pc, #128]	; (453c <_usart_init+0xe0>)
    44ba:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    44be:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    44c0:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    44c2:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    44c4:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    44c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    44c8:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    44ca:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    44ce:	d024      	beq.n	451a <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    44d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    44d4:	4b19      	ldr	r3, [pc, #100]	; (453c <_usart_init+0xe0>)
    44d6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    44da:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    44dc:	89a3      	ldrh	r3, [r4, #12]
    44de:	f361 030c 	bfi	r3, r1, #0, #13
    44e2:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    44e4:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    44e8:	89a3      	ldrh	r3, [r4, #12]
    44ea:	f362 334f 	bfi	r3, r2, #13, #3
    44ee:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    44f0:	4b12      	ldr	r3, [pc, #72]	; (453c <_usart_init+0xe0>)
    44f2:	0042      	lsls	r2, r0, #1
    44f4:	1811      	adds	r1, r2, r0
    44f6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    44fa:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    44fe:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    4500:	4402      	add	r2, r0
    4502:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4506:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    450a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    450e:	2000      	movs	r0, #0
    4510:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    4512:	2201      	movs	r2, #1
    4514:	e7b5      	b.n	4482 <_usart_init+0x26>
    4516:	2200      	movs	r2, #0
    4518:	e7b3      	b.n	4482 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    451a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    451e:	4b07      	ldr	r3, [pc, #28]	; (453c <_usart_init+0xe0>)
    4520:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    4524:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    4526:	81a3      	strh	r3, [r4, #12]
    4528:	e7e2      	b.n	44f0 <_usart_init+0x94>
		return ERR_DENIED;
    452a:	f06f 0010 	mvn.w	r0, #16
}
    452e:	bd38      	pop	{r3, r4, r5, pc}
    4530:	00004409 	.word	0x00004409
    4534:	00009664 	.word	0x00009664
    4538:	00003c21 	.word	0x00003c21
    453c:	000095d8 	.word	0x000095d8

00004540 <_usart_async_init>:
{
    4540:	b570      	push	{r4, r5, r6, lr}
    4542:	460d      	mov	r5, r1
	ASSERT(device);
    4544:	4606      	mov	r6, r0
    4546:	22da      	movs	r2, #218	; 0xda
    4548:	4916      	ldr	r1, [pc, #88]	; (45a4 <_usart_async_init+0x64>)
    454a:	3000      	adds	r0, #0
    454c:	bf18      	it	ne
    454e:	2001      	movne	r0, #1
    4550:	4b15      	ldr	r3, [pc, #84]	; (45a8 <_usart_async_init+0x68>)
    4552:	4798      	blx	r3
	init_status = _usart_init(hw);
    4554:	4628      	mov	r0, r5
    4556:	4b15      	ldr	r3, [pc, #84]	; (45ac <_usart_async_init+0x6c>)
    4558:	4798      	blx	r3
	if (init_status) {
    455a:	4604      	mov	r4, r0
    455c:	b9f8      	cbnz	r0, 459e <_usart_async_init+0x5e>
	device->hw = hw;
    455e:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    4560:	4628      	mov	r0, r5
    4562:	4b13      	ldr	r3, [pc, #76]	; (45b0 <_usart_async_init+0x70>)
    4564:	4798      	blx	r3
		irq = irq +2;
    4566:	3002      	adds	r0, #2
    4568:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    456a:	f000 031f 	and.w	r3, r0, #31
    456e:	2201      	movs	r2, #1
    4570:	409a      	lsls	r2, r3
    4572:	0943      	lsrs	r3, r0, #5
    4574:	009b      	lsls	r3, r3, #2
    4576:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    457a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    457e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    4582:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4586:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    458a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    458e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    4592:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    4596:	21e0      	movs	r1, #224	; 0xe0
    4598:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    459c:	601a      	str	r2, [r3, #0]
}
    459e:	4620      	mov	r0, r4
    45a0:	bd70      	pop	{r4, r5, r6, pc}
    45a2:	bf00      	nop
    45a4:	00009664 	.word	0x00009664
    45a8:	00003c21 	.word	0x00003c21
    45ac:	0000445d 	.word	0x0000445d
    45b0:	00004449 	.word	0x00004449

000045b4 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    45b4:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    45b6:	69d3      	ldr	r3, [r2, #28]
    45b8:	f013 0f03 	tst.w	r3, #3
    45bc:	d1fb      	bne.n	45b6 <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    45be:	6813      	ldr	r3, [r2, #0]
    45c0:	f043 0302 	orr.w	r3, r3, #2
    45c4:	6013      	str	r3, [r2, #0]
    45c6:	4770      	bx	lr

000045c8 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    45c8:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    45ca:	6299      	str	r1, [r3, #40]	; 0x28
    45cc:	4770      	bx	lr

000045ce <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    45ce:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    45d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    45d2:	b2c0      	uxtb	r0, r0
    45d4:	4770      	bx	lr

000045d6 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    45d6:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    45d8:	7e18      	ldrb	r0, [r3, #24]
}
    45da:	f000 0001 	and.w	r0, r0, #1
    45de:	4770      	bx	lr

000045e0 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    45e0:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    45e2:	7e18      	ldrb	r0, [r3, #24]
}
    45e4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    45e8:	4770      	bx	lr
	...

000045ec <_usart_async_set_irq_state>:
{
    45ec:	b570      	push	{r4, r5, r6, lr}
    45ee:	460c      	mov	r4, r1
    45f0:	4616      	mov	r6, r2
	ASSERT(device);
    45f2:	4605      	mov	r5, r0
    45f4:	f240 2245 	movw	r2, #581	; 0x245
    45f8:	4915      	ldr	r1, [pc, #84]	; (4650 <_usart_async_set_irq_state+0x64>)
    45fa:	3000      	adds	r0, #0
    45fc:	bf18      	it	ne
    45fe:	2001      	movne	r0, #1
    4600:	4b14      	ldr	r3, [pc, #80]	; (4654 <_usart_async_set_irq_state+0x68>)
    4602:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    4604:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    4608:	d10d      	bne.n	4626 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    460a:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    460c:	b92e      	cbnz	r6, 461a <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    460e:	2201      	movs	r2, #1
    4610:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    4612:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    4614:	2202      	movs	r2, #2
    4616:	751a      	strb	r2, [r3, #20]
    4618:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    461a:	2201      	movs	r2, #1
    461c:	759a      	strb	r2, [r3, #22]
    461e:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    4620:	2202      	movs	r2, #2
    4622:	759a      	strb	r2, [r3, #22]
    4624:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    4626:	2c01      	cmp	r4, #1
    4628:	d002      	beq.n	4630 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    462a:	2c03      	cmp	r4, #3
    462c:	d008      	beq.n	4640 <_usart_async_set_irq_state+0x54>
    462e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    4630:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    4632:	b916      	cbnz	r6, 463a <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    4634:	2204      	movs	r2, #4
    4636:	751a      	strb	r2, [r3, #20]
    4638:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    463a:	2204      	movs	r2, #4
    463c:	759a      	strb	r2, [r3, #22]
    463e:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    4640:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    4642:	b116      	cbz	r6, 464a <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    4644:	2280      	movs	r2, #128	; 0x80
    4646:	759a      	strb	r2, [r3, #22]
}
    4648:	e7f1      	b.n	462e <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    464a:	2280      	movs	r2, #128	; 0x80
    464c:	751a      	strb	r2, [r3, #20]
    464e:	bd70      	pop	{r4, r5, r6, pc}
    4650:	00009664 	.word	0x00009664
    4654:	00003c21 	.word	0x00003c21

00004658 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    4658:	4b03      	ldr	r3, [pc, #12]	; (4668 <_delay_init+0x10>)
    465a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    465e:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    4660:	2205      	movs	r2, #5
    4662:	601a      	str	r2, [r3, #0]
    4664:	4770      	bx	lr
    4666:	bf00      	nop
    4668:	e000e010 	.word	0xe000e010

0000466c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    466c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    466e:	b303      	cbz	r3, 46b2 <_delay_cycles+0x46>
{
    4670:	b430      	push	{r4, r5}
    4672:	1e5d      	subs	r5, r3, #1
    4674:	b2ed      	uxtb	r5, r5
	while (n--) {
    4676:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    4678:	4a12      	ldr	r2, [pc, #72]	; (46c4 <_delay_cycles+0x58>)
    467a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    467e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    4680:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4682:	6813      	ldr	r3, [r2, #0]
    4684:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4688:	d0fb      	beq.n	4682 <_delay_cycles+0x16>
	while (n--) {
    468a:	3801      	subs	r0, #1
    468c:	b2c0      	uxtb	r0, r0
    468e:	28ff      	cmp	r0, #255	; 0xff
    4690:	d1f5      	bne.n	467e <_delay_cycles+0x12>
    4692:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    4696:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    469a:	3101      	adds	r1, #1
    469c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    469e:	4b09      	ldr	r3, [pc, #36]	; (46c4 <_delay_cycles+0x58>)
    46a0:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    46a2:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    46a4:	461a      	mov	r2, r3
    46a6:	6813      	ldr	r3, [r2, #0]
    46a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    46ac:	d0fb      	beq.n	46a6 <_delay_cycles+0x3a>
		;
}
    46ae:	bc30      	pop	{r4, r5}
    46b0:	4770      	bx	lr
	SysTick->LOAD = buf;
    46b2:	4b04      	ldr	r3, [pc, #16]	; (46c4 <_delay_cycles+0x58>)
    46b4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    46b6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    46b8:	461a      	mov	r2, r3
    46ba:	6813      	ldr	r3, [r2, #0]
    46bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    46c0:	d0fb      	beq.n	46ba <_delay_cycles+0x4e>
    46c2:	4770      	bx	lr
    46c4:	e000e010 	.word	0xe000e010

000046c8 <tcc_interrupt_handler>:
 * \internal TCC interrupt handler
 *
 * \param[in] instance TCC instance number
 */
static void tcc_interrupt_handler(struct _timer_device *device)
{
    46c8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    46ca:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    46cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    46ce:	f012 0f01 	tst.w	r2, #1
    46d2:	d100      	bne.n	46d6 <tcc_interrupt_handler+0xe>
    46d4:	bd08      	pop	{r3, pc}
}

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    46d6:	2201      	movs	r2, #1
    46d8:	62da      	str	r2, [r3, #44]	; 0x2c
		hri_tcc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    46da:	6803      	ldr	r3, [r0, #0]
    46dc:	4798      	blx	r3
	}
}
    46de:	e7f9      	b.n	46d4 <tcc_interrupt_handler+0xc>

000046e0 <TCC0_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC0_0_Handler(void)
{
    46e0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    46e2:	4b02      	ldr	r3, [pc, #8]	; (46ec <TCC0_0_Handler+0xc>)
    46e4:	6818      	ldr	r0, [r3, #0]
    46e6:	4b02      	ldr	r3, [pc, #8]	; (46f0 <TCC0_0_Handler+0x10>)
    46e8:	4798      	blx	r3
    46ea:	bd08      	pop	{r3, pc}
    46ec:	20000bd4 	.word	0x20000bd4
    46f0:	000046c9 	.word	0x000046c9

000046f4 <TCC1_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC1_0_Handler(void)
{
    46f4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    46f6:	4b02      	ldr	r3, [pc, #8]	; (4700 <TCC1_0_Handler+0xc>)
    46f8:	6858      	ldr	r0, [r3, #4]
    46fa:	4b02      	ldr	r3, [pc, #8]	; (4704 <TCC1_0_Handler+0x10>)
    46fc:	4798      	blx	r3
    46fe:	bd08      	pop	{r3, pc}
    4700:	20000bd4 	.word	0x20000bd4
    4704:	000046c9 	.word	0x000046c9

00004708 <TCC2_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC2_0_Handler(void)
{
    4708:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    470a:	4b02      	ldr	r3, [pc, #8]	; (4714 <TCC2_0_Handler+0xc>)
    470c:	6898      	ldr	r0, [r3, #8]
    470e:	4b02      	ldr	r3, [pc, #8]	; (4718 <TCC2_0_Handler+0x10>)
    4710:	4798      	blx	r3
    4712:	bd08      	pop	{r3, pc}
    4714:	20000bd4 	.word	0x20000bd4
    4718:	000046c9 	.word	0x000046c9

0000471c <TCC3_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC3_0_Handler(void)
{
    471c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    471e:	4b02      	ldr	r3, [pc, #8]	; (4728 <TCC3_0_Handler+0xc>)
    4720:	68d8      	ldr	r0, [r3, #12]
    4722:	4b02      	ldr	r3, [pc, #8]	; (472c <TCC3_0_Handler+0x10>)
    4724:	4798      	blx	r3
    4726:	bd08      	pop	{r3, pc}
    4728:	20000bd4 	.word	0x20000bd4
    472c:	000046c9 	.word	0x000046c9

00004730 <TCC4_0_Handler>:

/**
* \brief TCC interrupt handler
*/
void TCC4_0_Handler(void)
{
    4730:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    4732:	4b02      	ldr	r3, [pc, #8]	; (473c <TCC4_0_Handler+0xc>)
    4734:	6918      	ldr	r0, [r3, #16]
    4736:	4b02      	ldr	r3, [pc, #8]	; (4740 <TCC4_0_Handler+0x10>)
    4738:	4798      	blx	r3
    473a:	bd08      	pop	{r3, pc}
    473c:	20000bd4 	.word	0x20000bd4
    4740:	000046c9 	.word	0x000046c9

00004744 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    4744:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    4746:	68c3      	ldr	r3, [r0, #12]
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4748:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    474a:	f012 0f01 	tst.w	r2, #1
    474e:	d100      	bne.n	4752 <tc_interrupt_handler+0xe>
    4750:	bd08      	pop	{r3, pc}
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4752:	2201      	movs	r2, #1
    4754:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    4756:	6803      	ldr	r3, [r0, #0]
    4758:	4798      	blx	r3
	}
}
    475a:	e7f9      	b.n	4750 <tc_interrupt_handler+0xc>

0000475c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    475c:	b538      	push	{r3, r4, r5, lr}
    475e:	4605      	mov	r5, r0
	void *const hw = device->hw;
    4760:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4762:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4764:	f013 0f01 	tst.w	r3, #1
    4768:	d004      	beq.n	4774 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    476a:	2301      	movs	r3, #1
    476c:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    476e:	6803      	ldr	r3, [r0, #0]
    4770:	b103      	cbz	r3, 4774 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    4772:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    4774:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    4776:	f013 0f02 	tst.w	r3, #2
    477a:	d005      	beq.n	4788 <tc_pwm_interrupt_handler+0x2c>
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_ERR) >> TC_INTFLAG_ERR_Pos;
}

static inline void hri_tc_clear_interrupt_ERR_bit(const void *const hw)
{
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    477c:	2302      	movs	r3, #2
    477e:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    4780:	686b      	ldr	r3, [r5, #4]
    4782:	b10b      	cbz	r3, 4788 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    4784:	4628      	mov	r0, r5
    4786:	4798      	blx	r3
    4788:	bd38      	pop	{r3, r4, r5, pc}
	...

0000478c <TC0_Handler>:

/**
* \brief TC interrupt handler
*/
void TC0_Handler(void)
{
    478c:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    478e:	4b02      	ldr	r3, [pc, #8]	; (4798 <TC0_Handler+0xc>)
    4790:	6818      	ldr	r0, [r3, #0]
    4792:	4b02      	ldr	r3, [pc, #8]	; (479c <TC0_Handler+0x10>)
    4794:	4798      	blx	r3
    4796:	bd08      	pop	{r3, pc}
    4798:	20000be8 	.word	0x20000be8
    479c:	0000475d 	.word	0x0000475d

000047a0 <TC1_Handler>:

/**
* \brief TC interrupt handler
*/
void TC1_Handler(void)
{
    47a0:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    47a2:	4b02      	ldr	r3, [pc, #8]	; (47ac <TC1_Handler+0xc>)
    47a4:	6858      	ldr	r0, [r3, #4]
    47a6:	4b02      	ldr	r3, [pc, #8]	; (47b0 <TC1_Handler+0x10>)
    47a8:	4798      	blx	r3
    47aa:	bd08      	pop	{r3, pc}
    47ac:	20000be8 	.word	0x20000be8
    47b0:	0000475d 	.word	0x0000475d

000047b4 <TC2_Handler>:

/**
* \brief TC interrupt handler
*/
void TC2_Handler(void)
{
    47b4:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    47b6:	4b02      	ldr	r3, [pc, #8]	; (47c0 <TC2_Handler+0xc>)
    47b8:	6898      	ldr	r0, [r3, #8]
    47ba:	4b02      	ldr	r3, [pc, #8]	; (47c4 <TC2_Handler+0x10>)
    47bc:	4798      	blx	r3
    47be:	bd08      	pop	{r3, pc}
    47c0:	20000be8 	.word	0x20000be8
    47c4:	0000475d 	.word	0x0000475d

000047c8 <TC3_Handler>:

/**
* \brief TC interrupt handler
*/
void TC3_Handler(void)
{
    47c8:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    47ca:	4b02      	ldr	r3, [pc, #8]	; (47d4 <TC3_Handler+0xc>)
    47cc:	68d8      	ldr	r0, [r3, #12]
    47ce:	4b02      	ldr	r3, [pc, #8]	; (47d8 <TC3_Handler+0x10>)
    47d0:	4798      	blx	r3
    47d2:	bd08      	pop	{r3, pc}
    47d4:	20000be8 	.word	0x20000be8
    47d8:	00004745 	.word	0x00004745

000047dc <TC4_Handler>:

/**
* \brief TC interrupt handler
*/
void TC4_Handler(void)
{
    47dc:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    47de:	4b02      	ldr	r3, [pc, #8]	; (47e8 <TC4_Handler+0xc>)
    47e0:	6918      	ldr	r0, [r3, #16]
    47e2:	4b02      	ldr	r3, [pc, #8]	; (47ec <TC4_Handler+0x10>)
    47e4:	4798      	blx	r3
    47e6:	bd08      	pop	{r3, pc}
    47e8:	20000be8 	.word	0x20000be8
    47ec:	00004745 	.word	0x00004745

000047f0 <TC5_Handler>:

/**
* \brief TC interrupt handler
*/
void TC5_Handler(void)
{
    47f0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    47f2:	4b02      	ldr	r3, [pc, #8]	; (47fc <TC5_Handler+0xc>)
    47f4:	6958      	ldr	r0, [r3, #20]
    47f6:	4b02      	ldr	r3, [pc, #8]	; (4800 <TC5_Handler+0x10>)
    47f8:	4798      	blx	r3
    47fa:	bd08      	pop	{r3, pc}
    47fc:	20000be8 	.word	0x20000be8
    4800:	00004745 	.word	0x00004745

00004804 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    4804:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4806:	4604      	mov	r4, r0
    4808:	b330      	cbz	r0, 4858 <_wdt_init+0x54>
    480a:	6800      	ldr	r0, [r0, #0]
    480c:	3000      	adds	r0, #0
    480e:	bf18      	it	ne
    4810:	2001      	movne	r0, #1
    4812:	225a      	movs	r2, #90	; 0x5a
    4814:	4914      	ldr	r1, [pc, #80]	; (4868 <_wdt_init+0x64>)
    4816:	4b15      	ldr	r3, [pc, #84]	; (486c <_wdt_init+0x68>)
    4818:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    481a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    481c:	689a      	ldr	r2, [r3, #8]
    481e:	f012 0f0e 	tst.w	r2, #14
    4822:	d1fb      	bne.n	481c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4824:	781a      	ldrb	r2, [r3, #0]
    4826:	09d2      	lsrs	r2, r2, #7
    4828:	d118      	bne.n	485c <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    482a:	689a      	ldr	r2, [r3, #8]
    482c:	f012 0f0e 	tst.w	r2, #14
    4830:	d1fb      	bne.n	482a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4832:	781a      	ldrb	r2, [r3, #0]
    4834:	f012 0f02 	tst.w	r2, #2
    4838:	d113      	bne.n	4862 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    483a:	689a      	ldr	r2, [r3, #8]
    483c:	f012 0f0e 	tst.w	r2, #14
    4840:	d1fb      	bne.n	483a <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    4842:	781a      	ldrb	r2, [r3, #0]
    4844:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4848:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    484a:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    484c:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    484e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    4852:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    4854:	2000      	movs	r0, #0
    4856:	bd10      	pop	{r4, pc}
    4858:	2000      	movs	r0, #0
    485a:	e7da      	b.n	4812 <_wdt_init+0xe>
		return ERR_DENIED;
    485c:	f06f 0010 	mvn.w	r0, #16
    4860:	bd10      	pop	{r4, pc}
    4862:	f06f 0010 	mvn.w	r0, #16
}
    4866:	bd10      	pop	{r4, pc}
    4868:	00009680 	.word	0x00009680
    486c:	00003c21 	.word	0x00003c21

00004870 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    4870:	b570      	push	{r4, r5, r6, lr}
    4872:	460d      	mov	r5, r1
    4874:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4876:	4606      	mov	r6, r0
    4878:	2800      	cmp	r0, #0
    487a:	d044      	beq.n	4906 <_wdt_set_timeout_period+0x96>
    487c:	6800      	ldr	r0, [r0, #0]
    487e:	3000      	adds	r0, #0
    4880:	bf18      	it	ne
    4882:	2001      	movne	r0, #1
    4884:	2284      	movs	r2, #132	; 0x84
    4886:	493f      	ldr	r1, [pc, #252]	; (4984 <_wdt_set_timeout_period+0x114>)
    4888:	4b3f      	ldr	r3, [pc, #252]	; (4988 <_wdt_set_timeout_period+0x118>)
    488a:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    488c:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    488e:	6893      	ldr	r3, [r2, #8]
    4890:	f013 0f0e 	tst.w	r3, #14
    4894:	d1fb      	bne.n	488e <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    4896:	7813      	ldrb	r3, [r2, #0]
    4898:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    489c:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    489e:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    48a0:	688b      	ldr	r3, [r1, #8]
    48a2:	f013 0f0e 	tst.w	r3, #14
    48a6:	d1fb      	bne.n	48a0 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    48a8:	780b      	ldrb	r3, [r1, #0]
    48aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    48ae:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    48b0:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    48b2:	6899      	ldr	r1, [r3, #8]
    48b4:	f011 0f0e 	tst.w	r1, #14
    48b8:	d1fb      	bne.n	48b2 <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    48ba:	781a      	ldrb	r2, [r3, #0]
    48bc:	09d2      	lsrs	r2, r2, #7
    48be:	d158      	bne.n	4972 <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    48c0:	6899      	ldr	r1, [r3, #8]
    48c2:	f011 0f0e 	tst.w	r1, #14
    48c6:	d1fb      	bne.n	48c0 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    48c8:	781a      	ldrb	r2, [r3, #0]
    48ca:	f012 0f02 	tst.w	r2, #2
    48ce:	d153      	bne.n	4978 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    48d0:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    48d4:	4628      	mov	r0, r5
    48d6:	2100      	movs	r1, #0
    48d8:	ea50 0201 	orrs.w	r2, r0, r1
    48dc:	d14f      	bne.n	497e <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    48de:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    48e2:	d038      	beq.n	4956 <_wdt_set_timeout_period+0xe6>
    48e4:	d911      	bls.n	490a <_wdt_set_timeout_period+0x9a>
    48e6:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    48ea:	d038      	beq.n	495e <_wdt_set_timeout_period+0xee>
    48ec:	d927      	bls.n	493e <_wdt_set_timeout_period+0xce>
    48ee:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    48f2:	d038      	beq.n	4966 <_wdt_set_timeout_period+0xf6>
    48f4:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    48f8:	d037      	beq.n	496a <_wdt_set_timeout_period+0xfa>
    48fa:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    48fe:	d030      	beq.n	4962 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    4900:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    4904:	bd70      	pop	{r4, r5, r6, pc}
    4906:	2000      	movs	r0, #0
    4908:	e7bc      	b.n	4884 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    490a:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    490e:	d01e      	beq.n	494e <_wdt_set_timeout_period+0xde>
    4910:	d80d      	bhi.n	492e <_wdt_set_timeout_period+0xbe>
    4912:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    4916:	d02a      	beq.n	496e <_wdt_set_timeout_period+0xfe>
    4918:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    491c:	d1f0      	bne.n	4900 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    491e:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    4920:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    4922:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    4926:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    4928:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    492a:	2000      	movs	r0, #0
    492c:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    492e:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    4932:	d00e      	beq.n	4952 <_wdt_set_timeout_period+0xe2>
    4934:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    4938:	d1e2      	bne.n	4900 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    493a:	2104      	movs	r1, #4
			break;
    493c:	e7f0      	b.n	4920 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    493e:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    4942:	d00a      	beq.n	495a <_wdt_set_timeout_period+0xea>
    4944:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    4948:	d1da      	bne.n	4900 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    494a:	2107      	movs	r1, #7
			break;
    494c:	e7e8      	b.n	4920 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    494e:	2102      	movs	r1, #2
			break;
    4950:	e7e6      	b.n	4920 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    4952:	2103      	movs	r1, #3
			break;
    4954:	e7e4      	b.n	4920 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    4956:	2105      	movs	r1, #5
			break;
    4958:	e7e2      	b.n	4920 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    495a:	2106      	movs	r1, #6
			break;
    495c:	e7e0      	b.n	4920 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    495e:	2108      	movs	r1, #8
			break;
    4960:	e7de      	b.n	4920 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    4962:	2109      	movs	r1, #9
			break;
    4964:	e7dc      	b.n	4920 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    4966:	210a      	movs	r1, #10
			break;
    4968:	e7da      	b.n	4920 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    496a:	210b      	movs	r1, #11
			break;
    496c:	e7d8      	b.n	4920 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    496e:	2100      	movs	r1, #0
    4970:	e7d6      	b.n	4920 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    4972:	f06f 0010 	mvn.w	r0, #16
    4976:	bd70      	pop	{r4, r5, r6, pc}
    4978:	f06f 0010 	mvn.w	r0, #16
    497c:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    497e:	f06f 000c 	mvn.w	r0, #12
    4982:	bd70      	pop	{r4, r5, r6, pc}
    4984:	00009680 	.word	0x00009680
    4988:	00003c21 	.word	0x00003c21

0000498c <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    498c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    498e:	4604      	mov	r4, r0
    4990:	b198      	cbz	r0, 49ba <_wdt_enable+0x2e>
    4992:	6800      	ldr	r0, [r0, #0]
    4994:	3000      	adds	r0, #0
    4996:	bf18      	it	ne
    4998:	2001      	movne	r0, #1
    499a:	f240 1207 	movw	r2, #263	; 0x107
    499e:	4908      	ldr	r1, [pc, #32]	; (49c0 <_wdt_enable+0x34>)
    49a0:	4b08      	ldr	r3, [pc, #32]	; (49c4 <_wdt_enable+0x38>)
    49a2:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    49a4:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    49a6:	6893      	ldr	r3, [r2, #8]
    49a8:	f013 0f0e 	tst.w	r3, #14
    49ac:	d1fb      	bne.n	49a6 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    49ae:	7813      	ldrb	r3, [r2, #0]
    49b0:	f043 0302 	orr.w	r3, r3, #2
    49b4:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    49b6:	2000      	movs	r0, #0
    49b8:	bd10      	pop	{r4, pc}
    49ba:	2000      	movs	r0, #0
    49bc:	e7ed      	b.n	499a <_wdt_enable+0xe>
    49be:	bf00      	nop
    49c0:	00009680 	.word	0x00009680
    49c4:	00003c21 	.word	0x00003c21

000049c8 <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    49c8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    49ca:	4604      	mov	r4, r0
    49cc:	b1d0      	cbz	r0, 4a04 <_wdt_disable+0x3c>
    49ce:	6800      	ldr	r0, [r0, #0]
    49d0:	3000      	adds	r0, #0
    49d2:	bf18      	it	ne
    49d4:	2001      	movne	r0, #1
    49d6:	f44f 728a 	mov.w	r2, #276	; 0x114
    49da:	490d      	ldr	r1, [pc, #52]	; (4a10 <_wdt_disable+0x48>)
    49dc:	4b0d      	ldr	r3, [pc, #52]	; (4a14 <_wdt_disable+0x4c>)
    49de:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    49e0:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    49e2:	689a      	ldr	r2, [r3, #8]
    49e4:	f012 0f0e 	tst.w	r2, #14
    49e8:	d1fb      	bne.n	49e2 <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    49ea:	781a      	ldrb	r2, [r3, #0]
    49ec:	09d2      	lsrs	r2, r2, #7
    49ee:	d10b      	bne.n	4a08 <_wdt_disable+0x40>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    49f0:	689a      	ldr	r2, [r3, #8]
    49f2:	f012 0f0e 	tst.w	r2, #14
    49f6:	d1fb      	bne.n	49f0 <_wdt_disable+0x28>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    49f8:	781a      	ldrb	r2, [r3, #0]
    49fa:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    49fe:	701a      	strb	r2, [r3, #0]
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    4a00:	2000      	movs	r0, #0
    4a02:	bd10      	pop	{r4, pc}
    4a04:	2000      	movs	r0, #0
    4a06:	e7e6      	b.n	49d6 <_wdt_disable+0xe>
		return ERR_DENIED;
    4a08:	f06f 0010 	mvn.w	r0, #16
}
    4a0c:	bd10      	pop	{r4, pc}
    4a0e:	bf00      	nop
    4a10:	00009680 	.word	0x00009680
    4a14:	00003c21 	.word	0x00003c21

00004a18 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    4a18:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4a1a:	4604      	mov	r4, r0
    4a1c:	b168      	cbz	r0, 4a3a <_wdt_feed+0x22>
    4a1e:	6800      	ldr	r0, [r0, #0]
    4a20:	3000      	adds	r0, #0
    4a22:	bf18      	it	ne
    4a24:	2001      	movne	r0, #1
    4a26:	f240 1225 	movw	r2, #293	; 0x125
    4a2a:	4905      	ldr	r1, [pc, #20]	; (4a40 <_wdt_feed+0x28>)
    4a2c:	4b05      	ldr	r3, [pc, #20]	; (4a44 <_wdt_feed+0x2c>)
    4a2e:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    4a30:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    4a32:	22a5      	movs	r2, #165	; 0xa5
    4a34:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    4a36:	2000      	movs	r0, #0
    4a38:	bd10      	pop	{r4, pc}
    4a3a:	2000      	movs	r0, #0
    4a3c:	e7f3      	b.n	4a26 <_wdt_feed+0xe>
    4a3e:	bf00      	nop
    4a40:	00009680 	.word	0x00009680
    4a44:	00003c21 	.word	0x00003c21

00004a48 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    4a48:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    4a4a:	2200      	movs	r2, #0
    4a4c:	2108      	movs	r1, #8
    4a4e:	2001      	movs	r0, #1
    4a50:	4c18      	ldr	r4, [pc, #96]	; (4ab4 <createQueuesAndSemaphores+0x6c>)
    4a52:	47a0      	blx	r4
    4a54:	4d18      	ldr	r5, [pc, #96]	; (4ab8 <createQueuesAndSemaphores+0x70>)
    4a56:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    4a58:	2200      	movs	r2, #0
    4a5a:	2101      	movs	r1, #1
    4a5c:	4608      	mov	r0, r1
    4a5e:	47a0      	blx	r4
    4a60:	4b16      	ldr	r3, [pc, #88]	; (4abc <createQueuesAndSemaphores+0x74>)
    4a62:	6018      	str	r0, [r3, #0]
    CmdResponseQueue   = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    4a64:	2200      	movs	r2, #0
    4a66:	2108      	movs	r1, #8
    4a68:	2001      	movs	r0, #1
    4a6a:	47a0      	blx	r4
    4a6c:	4b14      	ldr	r3, [pc, #80]	; (4ac0 <createQueuesAndSemaphores+0x78>)
    4a6e:	6018      	str	r0, [r3, #0]
    FotaResponseQueue  = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    4a70:	2200      	movs	r2, #0
    4a72:	2108      	movs	r1, #8
    4a74:	2001      	movs	r0, #1
    4a76:	47a0      	blx	r4
    4a78:	4b12      	ldr	r3, [pc, #72]	; (4ac4 <createQueuesAndSemaphores+0x7c>)
    4a7a:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    4a7c:	682b      	ldr	r3, [r5, #0]
    4a7e:	b1bb      	cbz	r3, 4ab0 <createQueuesAndSemaphores+0x68>
       (AtReceiveQueue  != NULL) &&
    4a80:	4b0e      	ldr	r3, [pc, #56]	; (4abc <createQueuesAndSemaphores+0x74>)
    if((AtTransmitQueue != NULL) &&
    4a82:	681b      	ldr	r3, [r3, #0]
    4a84:	b1a3      	cbz	r3, 4ab0 <createQueuesAndSemaphores+0x68>
	   (CmdResponseQueue != NULL) &&
    4a86:	4b0e      	ldr	r3, [pc, #56]	; (4ac0 <createQueuesAndSemaphores+0x78>)
       (AtReceiveQueue  != NULL) &&
    4a88:	681b      	ldr	r3, [r3, #0]
    4a8a:	b18b      	cbz	r3, 4ab0 <createQueuesAndSemaphores+0x68>
	   (CmdResponseQueue != NULL) &&
    4a8c:	b180      	cbz	r0, 4ab0 <createQueuesAndSemaphores+0x68>
	   (FotaResponseQueue != NULL))
    {
    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    4a8e:	2203      	movs	r2, #3
    4a90:	2100      	movs	r1, #0
    4a92:	2001      	movs	r0, #1
    4a94:	47a0      	blx	r4
    4a96:	4b0c      	ldr	r3, [pc, #48]	; (4ac8 <createQueuesAndSemaphores+0x80>)
    4a98:	6018      	str	r0, [r3, #0]
    	SensorScanSemaphore    = xSemaphoreCreateBinary();
    4a9a:	2203      	movs	r2, #3
    4a9c:	2100      	movs	r1, #0
    4a9e:	2001      	movs	r0, #1
    4aa0:	47a0      	blx	r4
    4aa2:	4b0a      	ldr	r3, [pc, #40]	; (4acc <createQueuesAndSemaphores+0x84>)
    4aa4:	6018      	str	r0, [r3, #0]
    	DebugPrintMutex        = xSemaphoreCreateMutex();
    4aa6:	2001      	movs	r0, #1
    4aa8:	4b09      	ldr	r3, [pc, #36]	; (4ad0 <createQueuesAndSemaphores+0x88>)
    4aaa:	4798      	blx	r3
    4aac:	4b09      	ldr	r3, [pc, #36]	; (4ad4 <createQueuesAndSemaphores+0x8c>)
    4aae:	6018      	str	r0, [r3, #0]
    }
    else
    {
    	status = false;
    }
}
    4ab0:	bd38      	pop	{r3, r4, r5, pc}
    4ab2:	bf00      	nop
    4ab4:	000053c5 	.word	0x000053c5
    4ab8:	20003588 	.word	0x20003588
    4abc:	200035a0 	.word	0x200035a0
    4ac0:	20003564 	.word	0x20003564
    4ac4:	20003594 	.word	0x20003594
    4ac8:	2000359c 	.word	0x2000359c
    4acc:	20003598 	.word	0x20003598
    4ad0:	000055f9 	.word	0x000055f9
    4ad4:	20003590 	.word	0x20003590

00004ad8 <main>:
{
    4ad8:	b580      	push	{r7, lr}
    4ada:	b082      	sub	sp, #8
    atmel_start_init();	
    4adc:	4b2e      	ldr	r3, [pc, #184]	; (4b98 <main+0xc0>)
    4ade:	4798      	blx	r3
    SensorTaskStatus = xTaskCreate( SensorTask, "SensorTask", 150, NULL, 2, &xSensorTaskHandle );
    4ae0:	4b2e      	ldr	r3, [pc, #184]	; (4b9c <main+0xc4>)
    4ae2:	9301      	str	r3, [sp, #4]
    4ae4:	2702      	movs	r7, #2
    4ae6:	9700      	str	r7, [sp, #0]
    4ae8:	2300      	movs	r3, #0
    4aea:	2296      	movs	r2, #150	; 0x96
    4aec:	492c      	ldr	r1, [pc, #176]	; (4ba0 <main+0xc8>)
    4aee:	482d      	ldr	r0, [pc, #180]	; (4ba4 <main+0xcc>)
    4af0:	4d2d      	ldr	r5, [pc, #180]	; (4ba8 <main+0xd0>)
    4af2:	47a8      	blx	r5
    4af4:	4c2d      	ldr	r4, [pc, #180]	; (4bac <main+0xd4>)
    4af6:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTxTask", 150, NULL, 1, &xModemTxTaskHandle );
    4af8:	4b2d      	ldr	r3, [pc, #180]	; (4bb0 <main+0xd8>)
    4afa:	9301      	str	r3, [sp, #4]
    4afc:	2601      	movs	r6, #1
    4afe:	9600      	str	r6, [sp, #0]
    4b00:	2300      	movs	r3, #0
    4b02:	2296      	movs	r2, #150	; 0x96
    4b04:	492b      	ldr	r1, [pc, #172]	; (4bb4 <main+0xdc>)
    4b06:	482c      	ldr	r0, [pc, #176]	; (4bb8 <main+0xe0>)
    4b08:	47a8      	blx	r5
    4b0a:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    4b0c:	4b2b      	ldr	r3, [pc, #172]	; (4bbc <main+0xe4>)
    4b0e:	9301      	str	r3, [sp, #4]
    4b10:	9700      	str	r7, [sp, #0]
    4b12:	2300      	movs	r3, #0
    4b14:	2296      	movs	r2, #150	; 0x96
    4b16:	492a      	ldr	r1, [pc, #168]	; (4bc0 <main+0xe8>)
    4b18:	482a      	ldr	r0, [pc, #168]	; (4bc4 <main+0xec>)
    4b1a:	47a8      	blx	r5
    4b1c:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    4b1e:	4b2a      	ldr	r3, [pc, #168]	; (4bc8 <main+0xf0>)
    4b20:	9301      	str	r3, [sp, #4]
    4b22:	9600      	str	r6, [sp, #0]
    4b24:	2300      	movs	r3, #0
    4b26:	2296      	movs	r2, #150	; 0x96
    4b28:	4928      	ldr	r1, [pc, #160]	; (4bcc <main+0xf4>)
    4b2a:	4829      	ldr	r0, [pc, #164]	; (4bd0 <main+0xf8>)
    4b2c:	47a8      	blx	r5
    4b2e:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    4b30:	4b28      	ldr	r3, [pc, #160]	; (4bd4 <main+0xfc>)
    4b32:	9301      	str	r3, [sp, #4]
    4b34:	9600      	str	r6, [sp, #0]
    4b36:	2300      	movs	r3, #0
    4b38:	2296      	movs	r2, #150	; 0x96
    4b3a:	4927      	ldr	r1, [pc, #156]	; (4bd8 <main+0x100>)
    4b3c:	4827      	ldr	r0, [pc, #156]	; (4bdc <main+0x104>)
    4b3e:	47a8      	blx	r5
    4b40:	6120      	str	r0, [r4, #16]
	FotaAppTaskStatus =  xTaskCreate( FotaAppTask, "FotaAppTask", 150, NULL, 1, &xFotaAppTaskHandle);
    4b42:	4b27      	ldr	r3, [pc, #156]	; (4be0 <main+0x108>)
    4b44:	9301      	str	r3, [sp, #4]
    4b46:	9600      	str	r6, [sp, #0]
    4b48:	2300      	movs	r3, #0
    4b4a:	2296      	movs	r2, #150	; 0x96
    4b4c:	4925      	ldr	r1, [pc, #148]	; (4be4 <main+0x10c>)
    4b4e:	4826      	ldr	r0, [pc, #152]	; (4be8 <main+0x110>)
    4b50:	47a8      	blx	r5
    if((SensorTaskStatus == pdPASS) &&
    4b52:	6823      	ldr	r3, [r4, #0]
    4b54:	42b3      	cmp	r3, r6
    4b56:	d006      	beq.n	4b66 <main+0x8e>
    	DEBUG_PRINT("Failed to create tasks");
    4b58:	4824      	ldr	r0, [pc, #144]	; (4bec <main+0x114>)
    4b5a:	4b25      	ldr	r3, [pc, #148]	; (4bf0 <main+0x118>)
    4b5c:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    4b5e:	4825      	ldr	r0, [pc, #148]	; (4bf4 <main+0x11c>)
    4b60:	4b23      	ldr	r3, [pc, #140]	; (4bf0 <main+0x118>)
    4b62:	4798      	blx	r3
    4b64:	e7fe      	b.n	4b64 <main+0x8c>
    if((SensorTaskStatus == pdPASS) &&
    4b66:	68e3      	ldr	r3, [r4, #12]
    4b68:	42b3      	cmp	r3, r6
    4b6a:	d1f5      	bne.n	4b58 <main+0x80>
       (ModemProcessTaskStatus == pdPASS) &&
    4b6c:	6863      	ldr	r3, [r4, #4]
    4b6e:	42b3      	cmp	r3, r6
    4b70:	d1f2      	bne.n	4b58 <main+0x80>
       (ModemTxTaskStatus == pdPASS) &&
    4b72:	68a3      	ldr	r3, [r4, #8]
    4b74:	42b3      	cmp	r3, r6
    4b76:	d1ef      	bne.n	4b58 <main+0x80>
       (ModemRxTaskStatus == pdPASS) &&
    4b78:	6923      	ldr	r3, [r4, #16]
    4b7a:	42b3      	cmp	r3, r6
    4b7c:	d1ec      	bne.n	4b58 <main+0x80>
	   (ModemDiagTaskStatus == pdPASS) &&
    4b7e:	42b0      	cmp	r0, r6
    4b80:	d1ea      	bne.n	4b58 <main+0x80>
    	if(false != createQueuesAndSemaphores())
    4b82:	4b1d      	ldr	r3, [pc, #116]	; (4bf8 <main+0x120>)
    4b84:	4798      	blx	r3
    4b86:	b110      	cbz	r0, 4b8e <main+0xb6>
    		vTaskStartScheduler();
    4b88:	4b1c      	ldr	r3, [pc, #112]	; (4bfc <main+0x124>)
    4b8a:	4798      	blx	r3
    4b8c:	e7e7      	b.n	4b5e <main+0x86>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    4b8e:	481c      	ldr	r0, [pc, #112]	; (4c00 <main+0x128>)
    4b90:	4b17      	ldr	r3, [pc, #92]	; (4bf0 <main+0x118>)
    4b92:	4798      	blx	r3
    4b94:	e7e3      	b.n	4b5e <main+0x86>
    4b96:	bf00      	nop
    4b98:	00003585 	.word	0x00003585
    4b9c:	2000358c 	.word	0x2000358c
    4ba0:	00009698 	.word	0x00009698
    4ba4:	000011e1 	.word	0x000011e1
    4ba8:	00005bf5 	.word	0x00005bf5
    4bac:	20000c00 	.word	0x20000c00
    4bb0:	20003568 	.word	0x20003568
    4bb4:	000096a4 	.word	0x000096a4
    4bb8:	0000322d 	.word	0x0000322d
    4bbc:	20003580 	.word	0x20003580
    4bc0:	000096b0 	.word	0x000096b0
    4bc4:	000031c1 	.word	0x000031c1
    4bc8:	20003574 	.word	0x20003574
    4bcc:	000096bc 	.word	0x000096bc
    4bd0:	00002fa5 	.word	0x00002fa5
    4bd4:	20003578 	.word	0x20003578
    4bd8:	000096d0 	.word	0x000096d0
    4bdc:	00002ad9 	.word	0x00002ad9
    4be0:	20003570 	.word	0x20003570
    4be4:	000096e0 	.word	0x000096e0
    4be8:	000005c9 	.word	0x000005c9
    4bec:	0000970c 	.word	0x0000970c
    4bf0:	000033b9 	.word	0x000033b9
    4bf4:	00009724 	.word	0x00009724
    4bf8:	00004a49 	.word	0x00004a49
    4bfc:	00005dd1 	.word	0x00005dd1
    4c00:	000096ec 	.word	0x000096ec

00004c04 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    4c04:	f100 0308 	add.w	r3, r0, #8
    4c08:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    4c0a:	f04f 32ff 	mov.w	r2, #4294967295
    4c0e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    4c10:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    4c12:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    4c14:	2300      	movs	r3, #0
    4c16:	6003      	str	r3, [r0, #0]
    4c18:	4770      	bx	lr

00004c1a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    4c1a:	2300      	movs	r3, #0
    4c1c:	6103      	str	r3, [r0, #16]
    4c1e:	4770      	bx	lr

00004c20 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    4c20:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    4c22:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    4c24:	689a      	ldr	r2, [r3, #8]
    4c26:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    4c28:	689a      	ldr	r2, [r3, #8]
    4c2a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    4c2c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    4c2e:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    4c30:	6803      	ldr	r3, [r0, #0]
    4c32:	3301      	adds	r3, #1
    4c34:	6003      	str	r3, [r0, #0]
    4c36:	4770      	bx	lr

00004c38 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    4c38:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    4c3a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    4c3c:	f1b5 3fff 	cmp.w	r5, #4294967295
    4c40:	d002      	beq.n	4c48 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    4c42:	f100 0208 	add.w	r2, r0, #8
    4c46:	e002      	b.n	4c4e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    4c48:	6902      	ldr	r2, [r0, #16]
    4c4a:	e004      	b.n	4c56 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    4c4c:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    4c4e:	6853      	ldr	r3, [r2, #4]
    4c50:	681c      	ldr	r4, [r3, #0]
    4c52:	42a5      	cmp	r5, r4
    4c54:	d2fa      	bcs.n	4c4c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    4c56:	6853      	ldr	r3, [r2, #4]
    4c58:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    4c5a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    4c5c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    4c5e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    4c60:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    4c62:	6803      	ldr	r3, [r0, #0]
    4c64:	3301      	adds	r3, #1
    4c66:	6003      	str	r3, [r0, #0]
}
    4c68:	bc30      	pop	{r4, r5}
    4c6a:	4770      	bx	lr

00004c6c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    4c6c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    4c6e:	6842      	ldr	r2, [r0, #4]
    4c70:	6881      	ldr	r1, [r0, #8]
    4c72:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    4c74:	6882      	ldr	r2, [r0, #8]
    4c76:	6841      	ldr	r1, [r0, #4]
    4c78:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    4c7a:	685a      	ldr	r2, [r3, #4]
    4c7c:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    4c7e:	bf04      	itt	eq
    4c80:	6882      	ldreq	r2, [r0, #8]
    4c82:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    4c84:	2200      	movs	r2, #0
    4c86:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    4c88:	681a      	ldr	r2, [r3, #0]
    4c8a:	3a01      	subs	r2, #1
    4c8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    4c8e:	6818      	ldr	r0, [r3, #0]
}
    4c90:	4770      	bx	lr
	...

00004c94 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    4c94:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    4c96:	2300      	movs	r3, #0
    4c98:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    4c9a:	4b0d      	ldr	r3, [pc, #52]	; (4cd0 <prvTaskExitError+0x3c>)
    4c9c:	681b      	ldr	r3, [r3, #0]
    4c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4ca2:	d008      	beq.n	4cb6 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    4ca4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ca8:	f383 8811 	msr	BASEPRI, r3
    4cac:	f3bf 8f6f 	isb	sy
    4cb0:	f3bf 8f4f 	dsb	sy
    4cb4:	e7fe      	b.n	4cb4 <prvTaskExitError+0x20>
    4cb6:	f04f 0380 	mov.w	r3, #128	; 0x80
    4cba:	f383 8811 	msr	BASEPRI, r3
    4cbe:	f3bf 8f6f 	isb	sy
    4cc2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    4cc6:	9b01      	ldr	r3, [sp, #4]
    4cc8:	2b00      	cmp	r3, #0
    4cca:	d0fc      	beq.n	4cc6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    4ccc:	b002      	add	sp, #8
    4cce:	4770      	bx	lr
    4cd0:	20000094 	.word	0x20000094

00004cd4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    4cd4:	4808      	ldr	r0, [pc, #32]	; (4cf8 <prvPortStartFirstTask+0x24>)
    4cd6:	6800      	ldr	r0, [r0, #0]
    4cd8:	6800      	ldr	r0, [r0, #0]
    4cda:	f380 8808 	msr	MSP, r0
    4cde:	f04f 0000 	mov.w	r0, #0
    4ce2:	f380 8814 	msr	CONTROL, r0
    4ce6:	b662      	cpsie	i
    4ce8:	b661      	cpsie	f
    4cea:	f3bf 8f4f 	dsb	sy
    4cee:	f3bf 8f6f 	isb	sy
    4cf2:	df00      	svc	0
    4cf4:	bf00      	nop
    4cf6:	0000      	.short	0x0000
    4cf8:	e000ed08 	.word	0xe000ed08

00004cfc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    4cfc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 4d0c <vPortEnableVFP+0x10>
    4d00:	6801      	ldr	r1, [r0, #0]
    4d02:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    4d06:	6001      	str	r1, [r0, #0]
    4d08:	4770      	bx	lr
    4d0a:	0000      	.short	0x0000
    4d0c:	e000ed88 	.word	0xe000ed88

00004d10 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    4d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4d14:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    4d18:	f021 0101 	bic.w	r1, r1, #1
    4d1c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    4d20:	4b05      	ldr	r3, [pc, #20]	; (4d38 <pxPortInitialiseStack+0x28>)
    4d22:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    4d26:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    4d2a:	f06f 0302 	mvn.w	r3, #2
    4d2e:	f840 3c24 	str.w	r3, [r0, #-36]
}
    4d32:	3844      	subs	r0, #68	; 0x44
    4d34:	4770      	bx	lr
    4d36:	bf00      	nop
    4d38:	00004c95 	.word	0x00004c95
    4d3c:	00000000 	.word	0x00000000

00004d40 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    4d40:	4b07      	ldr	r3, [pc, #28]	; (4d60 <pxCurrentTCBConst2>)
    4d42:	6819      	ldr	r1, [r3, #0]
    4d44:	6808      	ldr	r0, [r1, #0]
    4d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d4a:	f380 8809 	msr	PSP, r0
    4d4e:	f3bf 8f6f 	isb	sy
    4d52:	f04f 0000 	mov.w	r0, #0
    4d56:	f380 8811 	msr	BASEPRI, r0
    4d5a:	4770      	bx	lr
    4d5c:	f3af 8000 	nop.w

00004d60 <pxCurrentTCBConst2>:
    4d60:	200034c8 	.word	0x200034c8

00004d64 <vPortEnterCritical>:
    4d64:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d68:	f383 8811 	msr	BASEPRI, r3
    4d6c:	f3bf 8f6f 	isb	sy
    4d70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    4d74:	4a0a      	ldr	r2, [pc, #40]	; (4da0 <vPortEnterCritical+0x3c>)
    4d76:	6813      	ldr	r3, [r2, #0]
    4d78:	3301      	adds	r3, #1
    4d7a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    4d7c:	2b01      	cmp	r3, #1
    4d7e:	d10d      	bne.n	4d9c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    4d80:	4b08      	ldr	r3, [pc, #32]	; (4da4 <vPortEnterCritical+0x40>)
    4d82:	681b      	ldr	r3, [r3, #0]
    4d84:	f013 0fff 	tst.w	r3, #255	; 0xff
    4d88:	d008      	beq.n	4d9c <vPortEnterCritical+0x38>
    4d8a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d8e:	f383 8811 	msr	BASEPRI, r3
    4d92:	f3bf 8f6f 	isb	sy
    4d96:	f3bf 8f4f 	dsb	sy
    4d9a:	e7fe      	b.n	4d9a <vPortEnterCritical+0x36>
    4d9c:	4770      	bx	lr
    4d9e:	bf00      	nop
    4da0:	20000094 	.word	0x20000094
    4da4:	e000ed04 	.word	0xe000ed04

00004da8 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    4da8:	4b09      	ldr	r3, [pc, #36]	; (4dd0 <vPortExitCritical+0x28>)
    4daa:	681b      	ldr	r3, [r3, #0]
    4dac:	b943      	cbnz	r3, 4dc0 <vPortExitCritical+0x18>
    4dae:	f04f 0380 	mov.w	r3, #128	; 0x80
    4db2:	f383 8811 	msr	BASEPRI, r3
    4db6:	f3bf 8f6f 	isb	sy
    4dba:	f3bf 8f4f 	dsb	sy
    4dbe:	e7fe      	b.n	4dbe <vPortExitCritical+0x16>
	uxCriticalNesting--;
    4dc0:	3b01      	subs	r3, #1
    4dc2:	4a03      	ldr	r2, [pc, #12]	; (4dd0 <vPortExitCritical+0x28>)
    4dc4:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    4dc6:	b90b      	cbnz	r3, 4dcc <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4dc8:	f383 8811 	msr	BASEPRI, r3
    4dcc:	4770      	bx	lr
    4dce:	bf00      	nop
    4dd0:	20000094 	.word	0x20000094
	...

00004de0 <PendSV_Handler>:
	__asm volatile(
    4de0:	f3ef 8009 	mrs	r0, PSP
    4de4:	f3bf 8f6f 	isb	sy
    4de8:	4b15      	ldr	r3, [pc, #84]	; (4e40 <pxCurrentTCBConst>)
    4dea:	681a      	ldr	r2, [r3, #0]
    4dec:	f01e 0f10 	tst.w	lr, #16
    4df0:	bf08      	it	eq
    4df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dfa:	6010      	str	r0, [r2, #0]
    4dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
    4e00:	f04f 0080 	mov.w	r0, #128	; 0x80
    4e04:	f380 8811 	msr	BASEPRI, r0
    4e08:	f3bf 8f4f 	dsb	sy
    4e0c:	f3bf 8f6f 	isb	sy
    4e10:	f001 f978 	bl	6104 <vTaskSwitchContext>
    4e14:	f04f 0000 	mov.w	r0, #0
    4e18:	f380 8811 	msr	BASEPRI, r0
    4e1c:	bc09      	pop	{r0, r3}
    4e1e:	6819      	ldr	r1, [r3, #0]
    4e20:	6808      	ldr	r0, [r1, #0]
    4e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e26:	f01e 0f10 	tst.w	lr, #16
    4e2a:	bf08      	it	eq
    4e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4e30:	f380 8809 	msr	PSP, r0
    4e34:	f3bf 8f6f 	isb	sy
    4e38:	4770      	bx	lr
    4e3a:	bf00      	nop
    4e3c:	f3af 8000 	nop.w

00004e40 <pxCurrentTCBConst>:
    4e40:	200034c8 	.word	0x200034c8

00004e44 <SysTick_Handler>:
{
    4e44:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    4e46:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e4a:	f383 8811 	msr	BASEPRI, r3
    4e4e:	f3bf 8f6f 	isb	sy
    4e52:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    4e56:	4b05      	ldr	r3, [pc, #20]	; (4e6c <SysTick_Handler+0x28>)
    4e58:	4798      	blx	r3
    4e5a:	b118      	cbz	r0, 4e64 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    4e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4e60:	4b03      	ldr	r3, [pc, #12]	; (4e70 <SysTick_Handler+0x2c>)
    4e62:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    4e64:	2300      	movs	r3, #0
    4e66:	f383 8811 	msr	BASEPRI, r3
    4e6a:	bd08      	pop	{r3, pc}
    4e6c:	00005e79 	.word	0x00005e79
    4e70:	e000ed04 	.word	0xe000ed04

00004e74 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    4e74:	4b05      	ldr	r3, [pc, #20]	; (4e8c <vPortSetupTimerInterrupt+0x18>)
    4e76:	2200      	movs	r2, #0
    4e78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    4e7a:	4905      	ldr	r1, [pc, #20]	; (4e90 <vPortSetupTimerInterrupt+0x1c>)
    4e7c:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    4e7e:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    4e82:	4a04      	ldr	r2, [pc, #16]	; (4e94 <vPortSetupTimerInterrupt+0x20>)
    4e84:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    4e86:	2207      	movs	r2, #7
    4e88:	601a      	str	r2, [r3, #0]
    4e8a:	4770      	bx	lr
    4e8c:	e000e010 	.word	0xe000e010
    4e90:	e000e018 	.word	0xe000e018
    4e94:	e000e014 	.word	0xe000e014

00004e98 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    4e98:	4b3b      	ldr	r3, [pc, #236]	; (4f88 <xPortStartScheduler+0xf0>)
    4e9a:	681a      	ldr	r2, [r3, #0]
    4e9c:	4b3b      	ldr	r3, [pc, #236]	; (4f8c <xPortStartScheduler+0xf4>)
    4e9e:	429a      	cmp	r2, r3
    4ea0:	d108      	bne.n	4eb4 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    4ea2:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ea6:	f383 8811 	msr	BASEPRI, r3
    4eaa:	f3bf 8f6f 	isb	sy
    4eae:	f3bf 8f4f 	dsb	sy
    4eb2:	e7fe      	b.n	4eb2 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    4eb4:	4b34      	ldr	r3, [pc, #208]	; (4f88 <xPortStartScheduler+0xf0>)
    4eb6:	681a      	ldr	r2, [r3, #0]
    4eb8:	4b35      	ldr	r3, [pc, #212]	; (4f90 <xPortStartScheduler+0xf8>)
    4eba:	429a      	cmp	r2, r3
    4ebc:	d108      	bne.n	4ed0 <xPortStartScheduler+0x38>
    4ebe:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ec2:	f383 8811 	msr	BASEPRI, r3
    4ec6:	f3bf 8f6f 	isb	sy
    4eca:	f3bf 8f4f 	dsb	sy
    4ece:	e7fe      	b.n	4ece <xPortStartScheduler+0x36>
{
    4ed0:	b510      	push	{r4, lr}
    4ed2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    4ed4:	4b2f      	ldr	r3, [pc, #188]	; (4f94 <xPortStartScheduler+0xfc>)
    4ed6:	781a      	ldrb	r2, [r3, #0]
    4ed8:	b2d2      	uxtb	r2, r2
    4eda:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    4edc:	22ff      	movs	r2, #255	; 0xff
    4ede:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    4ee0:	781b      	ldrb	r3, [r3, #0]
    4ee2:	b2db      	uxtb	r3, r3
    4ee4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    4ee8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4eec:	4a2a      	ldr	r2, [pc, #168]	; (4f98 <xPortStartScheduler+0x100>)
    4eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4ef2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    4ef4:	2307      	movs	r3, #7
    4ef6:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4ef8:	f89d 3003 	ldrb.w	r3, [sp, #3]
    4efc:	f013 0f80 	tst.w	r3, #128	; 0x80
    4f00:	d012      	beq.n	4f28 <xPortStartScheduler+0x90>
    4f02:	2306      	movs	r3, #6
    4f04:	e000      	b.n	4f08 <xPortStartScheduler+0x70>
    4f06:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    4f08:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4f0c:	0052      	lsls	r2, r2, #1
    4f0e:	b2d2      	uxtb	r2, r2
    4f10:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    4f14:	f89d 2003 	ldrb.w	r2, [sp, #3]
    4f18:	1e59      	subs	r1, r3, #1
    4f1a:	f012 0f80 	tst.w	r2, #128	; 0x80
    4f1e:	d1f2      	bne.n	4f06 <xPortStartScheduler+0x6e>
    4f20:	4a1d      	ldr	r2, [pc, #116]	; (4f98 <xPortStartScheduler+0x100>)
    4f22:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    4f24:	2b04      	cmp	r3, #4
    4f26:	d008      	beq.n	4f3a <xPortStartScheduler+0xa2>
    4f28:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f2c:	f383 8811 	msr	BASEPRI, r3
    4f30:	f3bf 8f6f 	isb	sy
    4f34:	f3bf 8f4f 	dsb	sy
    4f38:	e7fe      	b.n	4f38 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    4f3a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    4f3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4f40:	4a15      	ldr	r2, [pc, #84]	; (4f98 <xPortStartScheduler+0x100>)
    4f42:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    4f44:	9b01      	ldr	r3, [sp, #4]
    4f46:	b2db      	uxtb	r3, r3
    4f48:	4a12      	ldr	r2, [pc, #72]	; (4f94 <xPortStartScheduler+0xfc>)
    4f4a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    4f4c:	4b13      	ldr	r3, [pc, #76]	; (4f9c <xPortStartScheduler+0x104>)
    4f4e:	681a      	ldr	r2, [r3, #0]
    4f50:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    4f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    4f56:	681a      	ldr	r2, [r3, #0]
    4f58:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    4f5c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    4f5e:	4b10      	ldr	r3, [pc, #64]	; (4fa0 <xPortStartScheduler+0x108>)
    4f60:	4798      	blx	r3
	uxCriticalNesting = 0;
    4f62:	2400      	movs	r4, #0
    4f64:	4b0f      	ldr	r3, [pc, #60]	; (4fa4 <xPortStartScheduler+0x10c>)
    4f66:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    4f68:	4b0f      	ldr	r3, [pc, #60]	; (4fa8 <xPortStartScheduler+0x110>)
    4f6a:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    4f6c:	4a0f      	ldr	r2, [pc, #60]	; (4fac <xPortStartScheduler+0x114>)
    4f6e:	6813      	ldr	r3, [r2, #0]
    4f70:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    4f74:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    4f76:	4b0e      	ldr	r3, [pc, #56]	; (4fb0 <xPortStartScheduler+0x118>)
    4f78:	4798      	blx	r3
	vTaskSwitchContext();
    4f7a:	4b0e      	ldr	r3, [pc, #56]	; (4fb4 <xPortStartScheduler+0x11c>)
    4f7c:	4798      	blx	r3
	prvTaskExitError();
    4f7e:	4b0e      	ldr	r3, [pc, #56]	; (4fb8 <xPortStartScheduler+0x120>)
    4f80:	4798      	blx	r3
}
    4f82:	4620      	mov	r0, r4
    4f84:	b002      	add	sp, #8
    4f86:	bd10      	pop	{r4, pc}
    4f88:	e000ed00 	.word	0xe000ed00
    4f8c:	410fc271 	.word	0x410fc271
    4f90:	410fc270 	.word	0x410fc270
    4f94:	e000e400 	.word	0xe000e400
    4f98:	20000c14 	.word	0x20000c14
    4f9c:	e000ed20 	.word	0xe000ed20
    4fa0:	00004e75 	.word	0x00004e75
    4fa4:	20000094 	.word	0x20000094
    4fa8:	00004cfd 	.word	0x00004cfd
    4fac:	e000ef34 	.word	0xe000ef34
    4fb0:	00004cd5 	.word	0x00004cd5
    4fb4:	00006105 	.word	0x00006105
    4fb8:	00004c95 	.word	0x00004c95

00004fbc <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    4fbc:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    4fc0:	2b0f      	cmp	r3, #15
    4fc2:	d90f      	bls.n	4fe4 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    4fc4:	4a10      	ldr	r2, [pc, #64]	; (5008 <vPortValidateInterruptPriority+0x4c>)
    4fc6:	5c9b      	ldrb	r3, [r3, r2]
    4fc8:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    4fca:	4a10      	ldr	r2, [pc, #64]	; (500c <vPortValidateInterruptPriority+0x50>)
    4fcc:	7812      	ldrb	r2, [r2, #0]
    4fce:	429a      	cmp	r2, r3
    4fd0:	d908      	bls.n	4fe4 <vPortValidateInterruptPriority+0x28>
    4fd2:	f04f 0380 	mov.w	r3, #128	; 0x80
    4fd6:	f383 8811 	msr	BASEPRI, r3
    4fda:	f3bf 8f6f 	isb	sy
    4fde:	f3bf 8f4f 	dsb	sy
    4fe2:	e7fe      	b.n	4fe2 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    4fe4:	4b0a      	ldr	r3, [pc, #40]	; (5010 <vPortValidateInterruptPriority+0x54>)
    4fe6:	681b      	ldr	r3, [r3, #0]
    4fe8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4fec:	4a07      	ldr	r2, [pc, #28]	; (500c <vPortValidateInterruptPriority+0x50>)
    4fee:	6852      	ldr	r2, [r2, #4]
    4ff0:	4293      	cmp	r3, r2
    4ff2:	d908      	bls.n	5006 <vPortValidateInterruptPriority+0x4a>
    4ff4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4ff8:	f383 8811 	msr	BASEPRI, r3
    4ffc:	f3bf 8f6f 	isb	sy
    5000:	f3bf 8f4f 	dsb	sy
    5004:	e7fe      	b.n	5004 <vPortValidateInterruptPriority+0x48>
    5006:	4770      	bx	lr
    5008:	e000e3f0 	.word	0xe000e3f0
    500c:	20000c14 	.word	0x20000c14
    5010:	e000ed0c 	.word	0xe000ed0c

00005014 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5014:	b570      	push	{r4, r5, r6, lr}
    5016:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    5018:	4b2f      	ldr	r3, [pc, #188]	; (50d8 <pvPortMalloc+0xc4>)
    501a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    501c:	4b2f      	ldr	r3, [pc, #188]	; (50dc <pvPortMalloc+0xc8>)
    501e:	689b      	ldr	r3, [r3, #8]
    5020:	b183      	cbz	r3, 5044 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    5022:	2c00      	cmp	r4, #0
    5024:	d051      	beq.n	50ca <pvPortMalloc+0xb6>
		{
			xWantedSize += heapSTRUCT_SIZE;
    5026:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    5028:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    502c:	bf1c      	itt	ne
    502e:	f024 0407 	bicne.w	r4, r4, #7
    5032:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    5034:	1e62      	subs	r2, r4, #1
    5036:	f242 73f6 	movw	r3, #10230	; 0x27f6
    503a:	429a      	cmp	r2, r3
    503c:	d842      	bhi.n	50c4 <pvPortMalloc+0xb0>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    503e:	4927      	ldr	r1, [pc, #156]	; (50dc <pvPortMalloc+0xc8>)
    5040:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    5042:	e017      	b.n	5074 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    5044:	4925      	ldr	r1, [pc, #148]	; (50dc <pvPortMalloc+0xc8>)
    5046:	f101 0314 	add.w	r3, r1, #20
    504a:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    504e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    5050:	2500      	movs	r5, #0
    5052:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    5054:	4a22      	ldr	r2, [pc, #136]	; (50e0 <pvPortMalloc+0xcc>)
    5056:	f242 70f8 	movw	r0, #10232	; 0x27f8
    505a:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    505e:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    5062:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    5064:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    5068:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    506a:	2301      	movs	r3, #1
    506c:	608b      	str	r3, [r1, #8]
    506e:	e7d8      	b.n	5022 <pvPortMalloc+0xe>
    5070:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    5072:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    5074:	685a      	ldr	r2, [r3, #4]
    5076:	4294      	cmp	r4, r2
    5078:	d902      	bls.n	5080 <pvPortMalloc+0x6c>
    507a:	681a      	ldr	r2, [r3, #0]
    507c:	2a00      	cmp	r2, #0
    507e:	d1f7      	bne.n	5070 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    5080:	4a18      	ldr	r2, [pc, #96]	; (50e4 <pvPortMalloc+0xd0>)
    5082:	4293      	cmp	r3, r2
    5084:	d01e      	beq.n	50c4 <pvPortMalloc+0xb0>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5086:	680d      	ldr	r5, [r1, #0]
    5088:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    508a:	681a      	ldr	r2, [r3, #0]
    508c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    508e:	685a      	ldr	r2, [r3, #4]
    5090:	1b12      	subs	r2, r2, r4
    5092:	2a10      	cmp	r2, #16
    5094:	d90c      	bls.n	50b0 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    5096:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5098:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    509a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    509c:	6874      	ldr	r4, [r6, #4]
    509e:	490f      	ldr	r1, [pc, #60]	; (50dc <pvPortMalloc+0xc8>)
    50a0:	e000      	b.n	50a4 <pvPortMalloc+0x90>
    50a2:	4611      	mov	r1, r2
    50a4:	680a      	ldr	r2, [r1, #0]
    50a6:	6850      	ldr	r0, [r2, #4]
    50a8:	4284      	cmp	r4, r0
    50aa:	d8fa      	bhi.n	50a2 <pvPortMalloc+0x8e>
    50ac:	6032      	str	r2, [r6, #0]
    50ae:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    50b0:	490d      	ldr	r1, [pc, #52]	; (50e8 <pvPortMalloc+0xd4>)
    50b2:	680a      	ldr	r2, [r1, #0]
    50b4:	685b      	ldr	r3, [r3, #4]
    50b6:	1ad2      	subs	r2, r2, r3
    50b8:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    50ba:	4b0c      	ldr	r3, [pc, #48]	; (50ec <pvPortMalloc+0xd8>)
    50bc:	4798      	blx	r3
		if( pvReturn == NULL )
    50be:	b135      	cbz	r5, 50ce <pvPortMalloc+0xba>
}
    50c0:	4628      	mov	r0, r5
    50c2:	bd70      	pop	{r4, r5, r6, pc}
	( void ) xTaskResumeAll();
    50c4:	4b09      	ldr	r3, [pc, #36]	; (50ec <pvPortMalloc+0xd8>)
    50c6:	4798      	blx	r3
    50c8:	e001      	b.n	50ce <pvPortMalloc+0xba>
    50ca:	4b08      	ldr	r3, [pc, #32]	; (50ec <pvPortMalloc+0xd8>)
    50cc:	4798      	blx	r3
			vApplicationMallocFailedHook();
    50ce:	4b08      	ldr	r3, [pc, #32]	; (50f0 <pvPortMalloc+0xdc>)
    50d0:	4798      	blx	r3
    50d2:	2500      	movs	r5, #0
	return pvReturn;
    50d4:	e7f4      	b.n	50c0 <pvPortMalloc+0xac>
    50d6:	bf00      	nop
    50d8:	00005e59 	.word	0x00005e59
    50dc:	20000c1c 	.word	0x20000c1c
    50e0:	20002e0c 	.word	0x20002e0c
    50e4:	20003428 	.word	0x20003428
    50e8:	20000098 	.word	0x20000098
    50ec:	00005fa1 	.word	0x00005fa1
    50f0:	0000033d 	.word	0x0000033d

000050f4 <vPortFree>:
	if( pv != NULL )
    50f4:	b1d0      	cbz	r0, 512c <vPortFree+0x38>
{
    50f6:	b570      	push	{r4, r5, r6, lr}
    50f8:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    50fa:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    50fe:	4b0c      	ldr	r3, [pc, #48]	; (5130 <vPortFree+0x3c>)
    5100:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    5102:	f855 4c04 	ldr.w	r4, [r5, #-4]
    5106:	4a0b      	ldr	r2, [pc, #44]	; (5134 <vPortFree+0x40>)
    5108:	e000      	b.n	510c <vPortFree+0x18>
    510a:	461a      	mov	r2, r3
    510c:	6813      	ldr	r3, [r2, #0]
    510e:	6859      	ldr	r1, [r3, #4]
    5110:	428c      	cmp	r4, r1
    5112:	d8fa      	bhi.n	510a <vPortFree+0x16>
    5114:	f845 3c08 	str.w	r3, [r5, #-8]
    5118:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    511a:	4a07      	ldr	r2, [pc, #28]	; (5138 <vPortFree+0x44>)
    511c:	f855 3c04 	ldr.w	r3, [r5, #-4]
    5120:	6811      	ldr	r1, [r2, #0]
    5122:	440b      	add	r3, r1
    5124:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    5126:	4b05      	ldr	r3, [pc, #20]	; (513c <vPortFree+0x48>)
    5128:	4798      	blx	r3
    512a:	bd70      	pop	{r4, r5, r6, pc}
    512c:	4770      	bx	lr
    512e:	bf00      	nop
    5130:	00005e59 	.word	0x00005e59
    5134:	20000c1c 	.word	0x20000c1c
    5138:	20000098 	.word	0x20000098
    513c:	00005fa1 	.word	0x00005fa1

00005140 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    5140:	b510      	push	{r4, lr}
    5142:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    5144:	4b04      	ldr	r3, [pc, #16]	; (5158 <prvIsQueueEmpty+0x18>)
    5146:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    5148:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    514a:	4b04      	ldr	r3, [pc, #16]	; (515c <prvIsQueueEmpty+0x1c>)
    514c:	4798      	blx	r3

	return xReturn;
}
    514e:	fab4 f084 	clz	r0, r4
    5152:	0940      	lsrs	r0, r0, #5
    5154:	bd10      	pop	{r4, pc}
    5156:	bf00      	nop
    5158:	00004d65 	.word	0x00004d65
    515c:	00004da9 	.word	0x00004da9

00005160 <prvCopyDataToQueue>:
{
    5160:	b570      	push	{r4, r5, r6, lr}
    5162:	4604      	mov	r4, r0
    5164:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5166:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    5168:	6c02      	ldr	r2, [r0, #64]	; 0x40
    516a:	b952      	cbnz	r2, 5182 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    516c:	6803      	ldr	r3, [r0, #0]
    516e:	2b00      	cmp	r3, #0
    5170:	d12a      	bne.n	51c8 <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    5172:	6840      	ldr	r0, [r0, #4]
    5174:	4b18      	ldr	r3, [pc, #96]	; (51d8 <prvCopyDataToQueue+0x78>)
    5176:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    5178:	2300      	movs	r3, #0
    517a:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    517c:	3501      	adds	r5, #1
    517e:	63a5      	str	r5, [r4, #56]	; 0x38
}
    5180:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    5182:	b96e      	cbnz	r6, 51a0 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    5184:	6880      	ldr	r0, [r0, #8]
    5186:	4b15      	ldr	r3, [pc, #84]	; (51dc <prvCopyDataToQueue+0x7c>)
    5188:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    518a:	68a3      	ldr	r3, [r4, #8]
    518c:	6c22      	ldr	r2, [r4, #64]	; 0x40
    518e:	4413      	add	r3, r2
    5190:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    5192:	6862      	ldr	r2, [r4, #4]
    5194:	4293      	cmp	r3, r2
    5196:	d319      	bcc.n	51cc <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    5198:	6823      	ldr	r3, [r4, #0]
    519a:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    519c:	2000      	movs	r0, #0
    519e:	e7ed      	b.n	517c <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    51a0:	68c0      	ldr	r0, [r0, #12]
    51a2:	4b0e      	ldr	r3, [pc, #56]	; (51dc <prvCopyDataToQueue+0x7c>)
    51a4:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    51a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    51a8:	425b      	negs	r3, r3
    51aa:	68e2      	ldr	r2, [r4, #12]
    51ac:	441a      	add	r2, r3
    51ae:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    51b0:	6821      	ldr	r1, [r4, #0]
    51b2:	428a      	cmp	r2, r1
    51b4:	d202      	bcs.n	51bc <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    51b6:	6862      	ldr	r2, [r4, #4]
    51b8:	4413      	add	r3, r2
    51ba:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    51bc:	2e02      	cmp	r6, #2
    51be:	d107      	bne.n	51d0 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    51c0:	b145      	cbz	r5, 51d4 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    51c2:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    51c4:	2000      	movs	r0, #0
    51c6:	e7d9      	b.n	517c <prvCopyDataToQueue+0x1c>
    51c8:	2000      	movs	r0, #0
    51ca:	e7d7      	b.n	517c <prvCopyDataToQueue+0x1c>
    51cc:	2000      	movs	r0, #0
    51ce:	e7d5      	b.n	517c <prvCopyDataToQueue+0x1c>
    51d0:	2000      	movs	r0, #0
    51d2:	e7d3      	b.n	517c <prvCopyDataToQueue+0x1c>
    51d4:	2000      	movs	r0, #0
    51d6:	e7d1      	b.n	517c <prvCopyDataToQueue+0x1c>
    51d8:	00006445 	.word	0x00006445
    51dc:	00006c39 	.word	0x00006c39

000051e0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    51e0:	b570      	push	{r4, r5, r6, lr}
    51e2:	b082      	sub	sp, #8
    51e4:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    51e6:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    51e8:	b164      	cbz	r4, 5204 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    51ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    51ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    51ee:	429a      	cmp	r2, r3
    51f0:	d311      	bcc.n	5216 <prvNotifyQueueSetContainer+0x36>
    51f2:	f04f 0380 	mov.w	r3, #128	; 0x80
    51f6:	f383 8811 	msr	BASEPRI, r3
    51fa:	f3bf 8f6f 	isb	sy
    51fe:	f3bf 8f4f 	dsb	sy
    5202:	e7fe      	b.n	5202 <prvNotifyQueueSetContainer+0x22>
    5204:	f04f 0380 	mov.w	r3, #128	; 0x80
    5208:	f383 8811 	msr	BASEPRI, r3
    520c:	f3bf 8f6f 	isb	sy
    5210:	f3bf 8f4f 	dsb	sy
    5214:	e7fe      	b.n	5214 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    5216:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5218:	4293      	cmp	r3, r2
    521a:	d803      	bhi.n	5224 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    521c:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    521e:	4630      	mov	r0, r6
    5220:	b002      	add	sp, #8
    5222:	bd70      	pop	{r4, r5, r6, pc}
    5224:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    5226:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    522a:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    522c:	a901      	add	r1, sp, #4
    522e:	4620      	mov	r0, r4
    5230:	4b0a      	ldr	r3, [pc, #40]	; (525c <prvNotifyQueueSetContainer+0x7c>)
    5232:	4798      	blx	r3
    5234:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    5236:	f1b5 3fff 	cmp.w	r5, #4294967295
    523a:	d10a      	bne.n	5252 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    523c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    523e:	2b00      	cmp	r3, #0
    5240:	d0ed      	beq.n	521e <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    5242:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5246:	4b06      	ldr	r3, [pc, #24]	; (5260 <prvNotifyQueueSetContainer+0x80>)
    5248:	4798      	blx	r3
    524a:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    524c:	bf18      	it	ne
    524e:	2601      	movne	r6, #1
    5250:	e7e5      	b.n	521e <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    5252:	1c6b      	adds	r3, r5, #1
    5254:	b25b      	sxtb	r3, r3
    5256:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    525a:	e7e0      	b.n	521e <prvNotifyQueueSetContainer+0x3e>
    525c:	00005161 	.word	0x00005161
    5260:	00006241 	.word	0x00006241

00005264 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    5264:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5266:	b172      	cbz	r2, 5286 <prvCopyDataFromQueue+0x22>
{
    5268:	b510      	push	{r4, lr}
    526a:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    526c:	68c4      	ldr	r4, [r0, #12]
    526e:	4414      	add	r4, r2
    5270:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    5272:	6840      	ldr	r0, [r0, #4]
    5274:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    5276:	bf24      	itt	cs
    5278:	6818      	ldrcs	r0, [r3, #0]
    527a:	60d8      	strcs	r0, [r3, #12]
    527c:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    527e:	68d9      	ldr	r1, [r3, #12]
    5280:	4b01      	ldr	r3, [pc, #4]	; (5288 <prvCopyDataFromQueue+0x24>)
    5282:	4798      	blx	r3
    5284:	bd10      	pop	{r4, pc}
    5286:	4770      	bx	lr
    5288:	00006c39 	.word	0x00006c39

0000528c <prvUnlockQueue>:
{
    528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5290:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    5292:	4b23      	ldr	r3, [pc, #140]	; (5320 <prvUnlockQueue+0x94>)
    5294:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    5296:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    529a:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    529c:	2c00      	cmp	r4, #0
    529e:	dd19      	ble.n	52d4 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    52a0:	4e20      	ldr	r6, [pc, #128]	; (5324 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    52a2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 5330 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    52a6:	4f20      	ldr	r7, [pc, #128]	; (5328 <prvUnlockQueue+0x9c>)
    52a8:	e008      	b.n	52bc <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    52aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    52ac:	b193      	cbz	r3, 52d4 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    52ae:	f105 0024 	add.w	r0, r5, #36	; 0x24
    52b2:	47b8      	blx	r7
    52b4:	b960      	cbnz	r0, 52d0 <prvUnlockQueue+0x44>
    52b6:	3c01      	subs	r4, #1
    52b8:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    52ba:	b15c      	cbz	r4, 52d4 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    52bc:	6cab      	ldr	r3, [r5, #72]	; 0x48
    52be:	2b00      	cmp	r3, #0
    52c0:	d0f3      	beq.n	52aa <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    52c2:	2100      	movs	r1, #0
    52c4:	4628      	mov	r0, r5
    52c6:	47b0      	blx	r6
    52c8:	2800      	cmp	r0, #0
    52ca:	d0f4      	beq.n	52b6 <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    52cc:	47c0      	blx	r8
    52ce:	e7f2      	b.n	52b6 <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    52d0:	47c0      	blx	r8
    52d2:	e7f0      	b.n	52b6 <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    52d4:	23ff      	movs	r3, #255	; 0xff
    52d6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    52da:	4b14      	ldr	r3, [pc, #80]	; (532c <prvUnlockQueue+0xa0>)
    52dc:	4798      	blx	r3
	taskENTER_CRITICAL();
    52de:	4b10      	ldr	r3, [pc, #64]	; (5320 <prvUnlockQueue+0x94>)
    52e0:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    52e2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    52e6:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    52e8:	2c00      	cmp	r4, #0
    52ea:	dd12      	ble.n	5312 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    52ec:	692b      	ldr	r3, [r5, #16]
    52ee:	b183      	cbz	r3, 5312 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    52f0:	f105 0710 	add.w	r7, r5, #16
    52f4:	4e0c      	ldr	r6, [pc, #48]	; (5328 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    52f6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 5330 <prvUnlockQueue+0xa4>
    52fa:	e004      	b.n	5306 <prvUnlockQueue+0x7a>
    52fc:	3c01      	subs	r4, #1
    52fe:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    5300:	b13c      	cbz	r4, 5312 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5302:	692b      	ldr	r3, [r5, #16]
    5304:	b12b      	cbz	r3, 5312 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5306:	4638      	mov	r0, r7
    5308:	47b0      	blx	r6
    530a:	2800      	cmp	r0, #0
    530c:	d0f6      	beq.n	52fc <prvUnlockQueue+0x70>
					vTaskMissedYield();
    530e:	47c0      	blx	r8
    5310:	e7f4      	b.n	52fc <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    5312:	23ff      	movs	r3, #255	; 0xff
    5314:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    5318:	4b04      	ldr	r3, [pc, #16]	; (532c <prvUnlockQueue+0xa0>)
    531a:	4798      	blx	r3
    531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5320:	00004d65 	.word	0x00004d65
    5324:	000051e1 	.word	0x000051e1
    5328:	00006241 	.word	0x00006241
    532c:	00004da9 	.word	0x00004da9
    5330:	00006371 	.word	0x00006371

00005334 <xQueueGenericReset>:
{
    5334:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    5336:	b330      	cbz	r0, 5386 <xQueueGenericReset+0x52>
    5338:	4604      	mov	r4, r0
    533a:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    533c:	4b1c      	ldr	r3, [pc, #112]	; (53b0 <xQueueGenericReset+0x7c>)
    533e:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    5340:	6822      	ldr	r2, [r4, #0]
    5342:	6c21      	ldr	r1, [r4, #64]	; 0x40
    5344:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5346:	fb03 f301 	mul.w	r3, r3, r1
    534a:	18d0      	adds	r0, r2, r3
    534c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    534e:	2000      	movs	r0, #0
    5350:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    5352:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    5354:	1a5b      	subs	r3, r3, r1
    5356:	4413      	add	r3, r2
    5358:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    535a:	23ff      	movs	r3, #255	; 0xff
    535c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    5360:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    5364:	b9c5      	cbnz	r5, 5398 <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5366:	6923      	ldr	r3, [r4, #16]
    5368:	b1eb      	cbz	r3, 53a6 <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    536a:	f104 0010 	add.w	r0, r4, #16
    536e:	4b11      	ldr	r3, [pc, #68]	; (53b4 <xQueueGenericReset+0x80>)
    5370:	4798      	blx	r3
    5372:	b1c0      	cbz	r0, 53a6 <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    5374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5378:	4b0f      	ldr	r3, [pc, #60]	; (53b8 <xQueueGenericReset+0x84>)
    537a:	601a      	str	r2, [r3, #0]
    537c:	f3bf 8f4f 	dsb	sy
    5380:	f3bf 8f6f 	isb	sy
    5384:	e00f      	b.n	53a6 <xQueueGenericReset+0x72>
    5386:	f04f 0380 	mov.w	r3, #128	; 0x80
    538a:	f383 8811 	msr	BASEPRI, r3
    538e:	f3bf 8f6f 	isb	sy
    5392:	f3bf 8f4f 	dsb	sy
    5396:	e7fe      	b.n	5396 <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    5398:	f104 0010 	add.w	r0, r4, #16
    539c:	4d07      	ldr	r5, [pc, #28]	; (53bc <xQueueGenericReset+0x88>)
    539e:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    53a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    53a4:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    53a6:	4b06      	ldr	r3, [pc, #24]	; (53c0 <xQueueGenericReset+0x8c>)
    53a8:	4798      	blx	r3
}
    53aa:	2001      	movs	r0, #1
    53ac:	bd38      	pop	{r3, r4, r5, pc}
    53ae:	bf00      	nop
    53b0:	00004d65 	.word	0x00004d65
    53b4:	00006241 	.word	0x00006241
    53b8:	e000ed04 	.word	0xe000ed04
    53bc:	00004c05 	.word	0x00004c05
    53c0:	00004da9 	.word	0x00004da9

000053c4 <xQueueGenericCreate>:
{
    53c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    53c6:	b940      	cbnz	r0, 53da <xQueueGenericCreate+0x16>
    53c8:	f04f 0380 	mov.w	r3, #128	; 0x80
    53cc:	f383 8811 	msr	BASEPRI, r3
    53d0:	f3bf 8f6f 	isb	sy
    53d4:	f3bf 8f4f 	dsb	sy
    53d8:	e7fe      	b.n	53d8 <xQueueGenericCreate+0x14>
    53da:	4606      	mov	r6, r0
    53dc:	4617      	mov	r7, r2
    53de:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    53e0:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    53e4:	3054      	adds	r0, #84	; 0x54
    53e6:	4b0b      	ldr	r3, [pc, #44]	; (5414 <xQueueGenericCreate+0x50>)
    53e8:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    53ea:	4604      	mov	r4, r0
    53ec:	b178      	cbz	r0, 540e <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    53ee:	b11d      	cbz	r5, 53f8 <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    53f0:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    53f4:	6003      	str	r3, [r0, #0]
    53f6:	e000      	b.n	53fa <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    53f8:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    53fa:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    53fc:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    53fe:	2101      	movs	r1, #1
    5400:	4620      	mov	r0, r4
    5402:	4b05      	ldr	r3, [pc, #20]	; (5418 <xQueueGenericCreate+0x54>)
    5404:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    5406:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    540a:	2300      	movs	r3, #0
    540c:	64a3      	str	r3, [r4, #72]	; 0x48
}
    540e:	4620      	mov	r0, r4
    5410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5412:	bf00      	nop
    5414:	00005015 	.word	0x00005015
    5418:	00005335 	.word	0x00005335

0000541c <xQueueGenericSend>:
{
    541c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5420:	b085      	sub	sp, #20
    5422:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    5424:	b198      	cbz	r0, 544e <xQueueGenericSend+0x32>
    5426:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    5428:	b1d1      	cbz	r1, 5460 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    542a:	2b02      	cmp	r3, #2
    542c:	d024      	beq.n	5478 <xQueueGenericSend+0x5c>
    542e:	461e      	mov	r6, r3
    5430:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    5432:	4b64      	ldr	r3, [pc, #400]	; (55c4 <xQueueGenericSend+0x1a8>)
    5434:	4798      	blx	r3
    5436:	bb58      	cbnz	r0, 5490 <xQueueGenericSend+0x74>
    5438:	9b01      	ldr	r3, [sp, #4]
    543a:	b38b      	cbz	r3, 54a0 <xQueueGenericSend+0x84>
    543c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5440:	f383 8811 	msr	BASEPRI, r3
    5444:	f3bf 8f6f 	isb	sy
    5448:	f3bf 8f4f 	dsb	sy
    544c:	e7fe      	b.n	544c <xQueueGenericSend+0x30>
    544e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5452:	f383 8811 	msr	BASEPRI, r3
    5456:	f3bf 8f6f 	isb	sy
    545a:	f3bf 8f4f 	dsb	sy
    545e:	e7fe      	b.n	545e <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    5460:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5462:	2a00      	cmp	r2, #0
    5464:	d0e1      	beq.n	542a <xQueueGenericSend+0xe>
    5466:	f04f 0380 	mov.w	r3, #128	; 0x80
    546a:	f383 8811 	msr	BASEPRI, r3
    546e:	f3bf 8f6f 	isb	sy
    5472:	f3bf 8f4f 	dsb	sy
    5476:	e7fe      	b.n	5476 <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    5478:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    547a:	2a01      	cmp	r2, #1
    547c:	d0d7      	beq.n	542e <xQueueGenericSend+0x12>
    547e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5482:	f383 8811 	msr	BASEPRI, r3
    5486:	f3bf 8f6f 	isb	sy
    548a:	f3bf 8f4f 	dsb	sy
    548e:	e7fe      	b.n	548e <xQueueGenericSend+0x72>
    5490:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    5492:	f8df 815c 	ldr.w	r8, [pc, #348]	; 55f0 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5496:	f8df a15c 	ldr.w	sl, [pc, #348]	; 55f4 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    549a:	f8df 9134 	ldr.w	r9, [pc, #308]	; 55d0 <xQueueGenericSend+0x1b4>
    549e:	e041      	b.n	5524 <xQueueGenericSend+0x108>
    54a0:	2500      	movs	r5, #0
    54a2:	e7f6      	b.n	5492 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    54a4:	4632      	mov	r2, r6
    54a6:	4639      	mov	r1, r7
    54a8:	4620      	mov	r0, r4
    54aa:	4b47      	ldr	r3, [pc, #284]	; (55c8 <xQueueGenericSend+0x1ac>)
    54ac:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    54ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    54b0:	b193      	cbz	r3, 54d8 <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    54b2:	4631      	mov	r1, r6
    54b4:	4620      	mov	r0, r4
    54b6:	4b45      	ldr	r3, [pc, #276]	; (55cc <xQueueGenericSend+0x1b0>)
    54b8:	4798      	blx	r3
    54ba:	b138      	cbz	r0, 54cc <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    54bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    54c0:	4b43      	ldr	r3, [pc, #268]	; (55d0 <xQueueGenericSend+0x1b4>)
    54c2:	601a      	str	r2, [r3, #0]
    54c4:	f3bf 8f4f 	dsb	sy
    54c8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    54cc:	4b41      	ldr	r3, [pc, #260]	; (55d4 <xQueueGenericSend+0x1b8>)
    54ce:	4798      	blx	r3
				return pdPASS;
    54d0:	2001      	movs	r0, #1
}
    54d2:	b005      	add	sp, #20
    54d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    54d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    54da:	b173      	cbz	r3, 54fa <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    54dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
    54e0:	4b3d      	ldr	r3, [pc, #244]	; (55d8 <xQueueGenericSend+0x1bc>)
    54e2:	4798      	blx	r3
    54e4:	2800      	cmp	r0, #0
    54e6:	d0f1      	beq.n	54cc <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    54e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    54ec:	4b38      	ldr	r3, [pc, #224]	; (55d0 <xQueueGenericSend+0x1b4>)
    54ee:	601a      	str	r2, [r3, #0]
    54f0:	f3bf 8f4f 	dsb	sy
    54f4:	f3bf 8f6f 	isb	sy
    54f8:	e7e8      	b.n	54cc <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    54fa:	2800      	cmp	r0, #0
    54fc:	d0e6      	beq.n	54cc <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    54fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5502:	4b33      	ldr	r3, [pc, #204]	; (55d0 <xQueueGenericSend+0x1b4>)
    5504:	601a      	str	r2, [r3, #0]
    5506:	f3bf 8f4f 	dsb	sy
    550a:	f3bf 8f6f 	isb	sy
    550e:	e7dd      	b.n	54cc <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    5510:	4b30      	ldr	r3, [pc, #192]	; (55d4 <xQueueGenericSend+0x1b8>)
    5512:	4798      	blx	r3
					return errQUEUE_FULL;
    5514:	2000      	movs	r0, #0
    5516:	e7dc      	b.n	54d2 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    5518:	4620      	mov	r0, r4
    551a:	4b30      	ldr	r3, [pc, #192]	; (55dc <xQueueGenericSend+0x1c0>)
    551c:	4798      	blx	r3
				(void)xTaskResumeAll();
    551e:	4b30      	ldr	r3, [pc, #192]	; (55e0 <xQueueGenericSend+0x1c4>)
    5520:	4798      	blx	r3
    5522:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    5524:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    5526:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5528:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    552a:	429a      	cmp	r2, r3
    552c:	d3ba      	bcc.n	54a4 <xQueueGenericSend+0x88>
    552e:	2e02      	cmp	r6, #2
    5530:	d0b8      	beq.n	54a4 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    5532:	9b01      	ldr	r3, [sp, #4]
    5534:	2b00      	cmp	r3, #0
    5536:	d0eb      	beq.n	5510 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    5538:	b90d      	cbnz	r5, 553e <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    553a:	a802      	add	r0, sp, #8
    553c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    553e:	4b25      	ldr	r3, [pc, #148]	; (55d4 <xQueueGenericSend+0x1b8>)
    5540:	4798      	blx	r3
		vTaskSuspendAll();
    5542:	4b28      	ldr	r3, [pc, #160]	; (55e4 <xQueueGenericSend+0x1c8>)
    5544:	4798      	blx	r3
		prvLockQueue(pxQueue);
    5546:	47c0      	blx	r8
    5548:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    554c:	b25b      	sxtb	r3, r3
    554e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5552:	bf04      	itt	eq
    5554:	2300      	moveq	r3, #0
    5556:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    555a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    555e:	b25b      	sxtb	r3, r3
    5560:	f1b3 3fff 	cmp.w	r3, #4294967295
    5564:	bf04      	itt	eq
    5566:	2300      	moveq	r3, #0
    5568:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    556c:	4b19      	ldr	r3, [pc, #100]	; (55d4 <xQueueGenericSend+0x1b8>)
    556e:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    5570:	a901      	add	r1, sp, #4
    5572:	a802      	add	r0, sp, #8
    5574:	4b1c      	ldr	r3, [pc, #112]	; (55e8 <xQueueGenericSend+0x1cc>)
    5576:	4798      	blx	r3
    5578:	b9e0      	cbnz	r0, 55b4 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    557a:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    557c:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    5580:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    5582:	4b14      	ldr	r3, [pc, #80]	; (55d4 <xQueueGenericSend+0x1b8>)
    5584:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    5586:	45ab      	cmp	fp, r5
    5588:	d1c6      	bne.n	5518 <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    558a:	9901      	ldr	r1, [sp, #4]
    558c:	f104 0010 	add.w	r0, r4, #16
    5590:	4b16      	ldr	r3, [pc, #88]	; (55ec <xQueueGenericSend+0x1d0>)
    5592:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5594:	4620      	mov	r0, r4
    5596:	4b11      	ldr	r3, [pc, #68]	; (55dc <xQueueGenericSend+0x1c0>)
    5598:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    559a:	4b11      	ldr	r3, [pc, #68]	; (55e0 <xQueueGenericSend+0x1c4>)
    559c:	4798      	blx	r3
    559e:	2800      	cmp	r0, #0
    55a0:	d1bf      	bne.n	5522 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    55a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    55a6:	f8c9 3000 	str.w	r3, [r9]
    55aa:	f3bf 8f4f 	dsb	sy
    55ae:	f3bf 8f6f 	isb	sy
    55b2:	e7b6      	b.n	5522 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    55b4:	4620      	mov	r0, r4
    55b6:	4b09      	ldr	r3, [pc, #36]	; (55dc <xQueueGenericSend+0x1c0>)
    55b8:	4798      	blx	r3
			(void)xTaskResumeAll();
    55ba:	4b09      	ldr	r3, [pc, #36]	; (55e0 <xQueueGenericSend+0x1c4>)
    55bc:	4798      	blx	r3
			return errQUEUE_FULL;
    55be:	2000      	movs	r0, #0
    55c0:	e787      	b.n	54d2 <xQueueGenericSend+0xb6>
    55c2:	bf00      	nop
    55c4:	00006381 	.word	0x00006381
    55c8:	00005161 	.word	0x00005161
    55cc:	000051e1 	.word	0x000051e1
    55d0:	e000ed04 	.word	0xe000ed04
    55d4:	00004da9 	.word	0x00004da9
    55d8:	00006241 	.word	0x00006241
    55dc:	0000528d 	.word	0x0000528d
    55e0:	00005fa1 	.word	0x00005fa1
    55e4:	00005e59 	.word	0x00005e59
    55e8:	000062e5 	.word	0x000062e5
    55ec:	000061c1 	.word	0x000061c1
    55f0:	00004d65 	.word	0x00004d65
    55f4:	000062d1 	.word	0x000062d1

000055f8 <xQueueCreateMutex>:
{
    55f8:	b538      	push	{r3, r4, r5, lr}
	pxNewQueue = (Queue_t *)xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType);
    55fa:	4602      	mov	r2, r0
    55fc:	2100      	movs	r1, #0
    55fe:	2001      	movs	r0, #1
    5600:	4b06      	ldr	r3, [pc, #24]	; (561c <xQueueCreateMutex+0x24>)
    5602:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    5604:	4604      	mov	r4, r0
    5606:	b138      	cbz	r0, 5618 <xQueueCreateMutex+0x20>
		pxNewQueue->pxMutexHolder = NULL;
    5608:	2100      	movs	r1, #0
    560a:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    560c:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    560e:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    5610:	460b      	mov	r3, r1
    5612:	460a      	mov	r2, r1
    5614:	4d02      	ldr	r5, [pc, #8]	; (5620 <xQueueCreateMutex+0x28>)
    5616:	47a8      	blx	r5
}
    5618:	4620      	mov	r0, r4
    561a:	bd38      	pop	{r3, r4, r5, pc}
    561c:	000053c5 	.word	0x000053c5
    5620:	0000541d 	.word	0x0000541d

00005624 <xQueueGenericSendFromISR>:
{
    5624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    5628:	2800      	cmp	r0, #0
    562a:	d036      	beq.n	569a <xQueueGenericSendFromISR+0x76>
    562c:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    562e:	2900      	cmp	r1, #0
    5630:	d03c      	beq.n	56ac <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    5632:	2b02      	cmp	r3, #2
    5634:	d046      	beq.n	56c4 <xQueueGenericSendFromISR+0xa0>
    5636:	461f      	mov	r7, r3
    5638:	4690      	mov	r8, r2
    563a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    563c:	4b37      	ldr	r3, [pc, #220]	; (571c <xQueueGenericSendFromISR+0xf8>)
    563e:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    5640:	f3ef 8611 	mrs	r6, BASEPRI
    5644:	f04f 0380 	mov.w	r3, #128	; 0x80
    5648:	f383 8811 	msr	BASEPRI, r3
    564c:	f3bf 8f6f 	isb	sy
    5650:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    5654:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5656:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5658:	429a      	cmp	r2, r3
    565a:	d301      	bcc.n	5660 <xQueueGenericSendFromISR+0x3c>
    565c:	2f02      	cmp	r7, #2
    565e:	d151      	bne.n	5704 <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    5660:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    5664:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    5666:	463a      	mov	r2, r7
    5668:	4649      	mov	r1, r9
    566a:	4620      	mov	r0, r4
    566c:	4b2c      	ldr	r3, [pc, #176]	; (5720 <xQueueGenericSendFromISR+0xfc>)
    566e:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    5670:	f1b5 3fff 	cmp.w	r5, #4294967295
    5674:	d140      	bne.n	56f8 <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    5676:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5678:	b383      	cbz	r3, 56dc <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    567a:	4639      	mov	r1, r7
    567c:	4620      	mov	r0, r4
    567e:	4b29      	ldr	r3, [pc, #164]	; (5724 <xQueueGenericSendFromISR+0x100>)
    5680:	4798      	blx	r3
    5682:	2800      	cmp	r0, #0
    5684:	d040      	beq.n	5708 <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    5686:	f1b8 0f00 	cmp.w	r8, #0
    568a:	d03f      	beq.n	570c <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    568c:	2001      	movs	r0, #1
    568e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    5692:	f386 8811 	msr	BASEPRI, r6
}
    5696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    569a:	f04f 0380 	mov.w	r3, #128	; 0x80
    569e:	f383 8811 	msr	BASEPRI, r3
    56a2:	f3bf 8f6f 	isb	sy
    56a6:	f3bf 8f4f 	dsb	sy
    56aa:	e7fe      	b.n	56aa <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    56ac:	6c00      	ldr	r0, [r0, #64]	; 0x40
    56ae:	2800      	cmp	r0, #0
    56b0:	d0bf      	beq.n	5632 <xQueueGenericSendFromISR+0xe>
    56b2:	f04f 0380 	mov.w	r3, #128	; 0x80
    56b6:	f383 8811 	msr	BASEPRI, r3
    56ba:	f3bf 8f6f 	isb	sy
    56be:	f3bf 8f4f 	dsb	sy
    56c2:	e7fe      	b.n	56c2 <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    56c4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    56c6:	2801      	cmp	r0, #1
    56c8:	d0b5      	beq.n	5636 <xQueueGenericSendFromISR+0x12>
    56ca:	f04f 0380 	mov.w	r3, #128	; 0x80
    56ce:	f383 8811 	msr	BASEPRI, r3
    56d2:	f3bf 8f6f 	isb	sy
    56d6:	f3bf 8f4f 	dsb	sy
    56da:	e7fe      	b.n	56da <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    56dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    56de:	b1bb      	cbz	r3, 5710 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    56e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
    56e4:	4b10      	ldr	r3, [pc, #64]	; (5728 <xQueueGenericSendFromISR+0x104>)
    56e6:	4798      	blx	r3
    56e8:	b1a0      	cbz	r0, 5714 <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    56ea:	f1b8 0f00 	cmp.w	r8, #0
    56ee:	d013      	beq.n	5718 <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    56f0:	2001      	movs	r0, #1
    56f2:	f8c8 0000 	str.w	r0, [r8]
    56f6:	e7cc      	b.n	5692 <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    56f8:	1c6b      	adds	r3, r5, #1
    56fa:	b25b      	sxtb	r3, r3
    56fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    5700:	2001      	movs	r0, #1
    5702:	e7c6      	b.n	5692 <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    5704:	2000      	movs	r0, #0
    5706:	e7c4      	b.n	5692 <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    5708:	2001      	movs	r0, #1
    570a:	e7c2      	b.n	5692 <xQueueGenericSendFromISR+0x6e>
    570c:	2001      	movs	r0, #1
    570e:	e7c0      	b.n	5692 <xQueueGenericSendFromISR+0x6e>
    5710:	2001      	movs	r0, #1
    5712:	e7be      	b.n	5692 <xQueueGenericSendFromISR+0x6e>
    5714:	2001      	movs	r0, #1
    5716:	e7bc      	b.n	5692 <xQueueGenericSendFromISR+0x6e>
    5718:	2001      	movs	r0, #1
    571a:	e7ba      	b.n	5692 <xQueueGenericSendFromISR+0x6e>
    571c:	00004fbd 	.word	0x00004fbd
    5720:	00005161 	.word	0x00005161
    5724:	000051e1 	.word	0x000051e1
    5728:	00006241 	.word	0x00006241

0000572c <xQueueReceive>:
{
    572c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5730:	b084      	sub	sp, #16
    5732:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    5734:	b180      	cbz	r0, 5758 <xQueueReceive+0x2c>
    5736:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    5738:	b1b9      	cbz	r1, 576a <xQueueReceive+0x3e>
    573a:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    573c:	4b50      	ldr	r3, [pc, #320]	; (5880 <xQueueReceive+0x154>)
    573e:	4798      	blx	r3
    5740:	b9f8      	cbnz	r0, 5782 <xQueueReceive+0x56>
    5742:	9b01      	ldr	r3, [sp, #4]
    5744:	b32b      	cbz	r3, 5792 <xQueueReceive+0x66>
    5746:	f04f 0380 	mov.w	r3, #128	; 0x80
    574a:	f383 8811 	msr	BASEPRI, r3
    574e:	f3bf 8f6f 	isb	sy
    5752:	f3bf 8f4f 	dsb	sy
    5756:	e7fe      	b.n	5756 <xQueueReceive+0x2a>
    5758:	f04f 0380 	mov.w	r3, #128	; 0x80
    575c:	f383 8811 	msr	BASEPRI, r3
    5760:	f3bf 8f6f 	isb	sy
    5764:	f3bf 8f4f 	dsb	sy
    5768:	e7fe      	b.n	5768 <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    576a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    576c:	2b00      	cmp	r3, #0
    576e:	d0e4      	beq.n	573a <xQueueReceive+0xe>
    5770:	f04f 0380 	mov.w	r3, #128	; 0x80
    5774:	f383 8811 	msr	BASEPRI, r3
    5778:	f3bf 8f6f 	isb	sy
    577c:	f3bf 8f4f 	dsb	sy
    5780:	e7fe      	b.n	5780 <xQueueReceive+0x54>
    5782:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    5784:	f8df 8124 	ldr.w	r8, [pc, #292]	; 58ac <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5788:	f8df a124 	ldr.w	sl, [pc, #292]	; 58b0 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    578c:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 588c <xQueueReceive+0x160>
    5790:	e029      	b.n	57e6 <xQueueReceive+0xba>
    5792:	2700      	movs	r7, #0
    5794:	e7f6      	b.n	5784 <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    5796:	4631      	mov	r1, r6
    5798:	4620      	mov	r0, r4
    579a:	4b3a      	ldr	r3, [pc, #232]	; (5884 <xQueueReceive+0x158>)
    579c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    579e:	3d01      	subs	r5, #1
    57a0:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    57a2:	6923      	ldr	r3, [r4, #16]
    57a4:	b163      	cbz	r3, 57c0 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    57a6:	f104 0010 	add.w	r0, r4, #16
    57aa:	4b37      	ldr	r3, [pc, #220]	; (5888 <xQueueReceive+0x15c>)
    57ac:	4798      	blx	r3
    57ae:	b138      	cbz	r0, 57c0 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    57b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    57b4:	4b35      	ldr	r3, [pc, #212]	; (588c <xQueueReceive+0x160>)
    57b6:	601a      	str	r2, [r3, #0]
    57b8:	f3bf 8f4f 	dsb	sy
    57bc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    57c0:	4b33      	ldr	r3, [pc, #204]	; (5890 <xQueueReceive+0x164>)
    57c2:	4798      	blx	r3
				return pdPASS;
    57c4:	2001      	movs	r0, #1
}
    57c6:	b004      	add	sp, #16
    57c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    57cc:	4b30      	ldr	r3, [pc, #192]	; (5890 <xQueueReceive+0x164>)
    57ce:	4798      	blx	r3
					return errQUEUE_EMPTY;
    57d0:	2000      	movs	r0, #0
    57d2:	e7f8      	b.n	57c6 <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    57d4:	a802      	add	r0, sp, #8
    57d6:	47d0      	blx	sl
    57d8:	e00e      	b.n	57f8 <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    57da:	4620      	mov	r0, r4
    57dc:	4b2d      	ldr	r3, [pc, #180]	; (5894 <xQueueReceive+0x168>)
    57de:	4798      	blx	r3
				(void)xTaskResumeAll();
    57e0:	4b2d      	ldr	r3, [pc, #180]	; (5898 <xQueueReceive+0x16c>)
    57e2:	4798      	blx	r3
    57e4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    57e6:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    57e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    57ea:	2d00      	cmp	r5, #0
    57ec:	d1d3      	bne.n	5796 <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    57ee:	9b01      	ldr	r3, [sp, #4]
    57f0:	2b00      	cmp	r3, #0
    57f2:	d0eb      	beq.n	57cc <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    57f4:	2f00      	cmp	r7, #0
    57f6:	d0ed      	beq.n	57d4 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    57f8:	4b25      	ldr	r3, [pc, #148]	; (5890 <xQueueReceive+0x164>)
    57fa:	4798      	blx	r3
		vTaskSuspendAll();
    57fc:	4b27      	ldr	r3, [pc, #156]	; (589c <xQueueReceive+0x170>)
    57fe:	4798      	blx	r3
		prvLockQueue(pxQueue);
    5800:	47c0      	blx	r8
    5802:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5806:	b25b      	sxtb	r3, r3
    5808:	f1b3 3fff 	cmp.w	r3, #4294967295
    580c:	bf04      	itt	eq
    580e:	2300      	moveq	r3, #0
    5810:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5814:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5818:	b25b      	sxtb	r3, r3
    581a:	f1b3 3fff 	cmp.w	r3, #4294967295
    581e:	bf04      	itt	eq
    5820:	2300      	moveq	r3, #0
    5822:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5826:	4b1a      	ldr	r3, [pc, #104]	; (5890 <xQueueReceive+0x164>)
    5828:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    582a:	a901      	add	r1, sp, #4
    582c:	a802      	add	r0, sp, #8
    582e:	4b1c      	ldr	r3, [pc, #112]	; (58a0 <xQueueReceive+0x174>)
    5830:	4798      	blx	r3
    5832:	b9c8      	cbnz	r0, 5868 <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5834:	4620      	mov	r0, r4
    5836:	4b1b      	ldr	r3, [pc, #108]	; (58a4 <xQueueReceive+0x178>)
    5838:	4798      	blx	r3
    583a:	2800      	cmp	r0, #0
    583c:	d0cd      	beq.n	57da <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    583e:	9901      	ldr	r1, [sp, #4]
    5840:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5844:	4b18      	ldr	r3, [pc, #96]	; (58a8 <xQueueReceive+0x17c>)
    5846:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5848:	4620      	mov	r0, r4
    584a:	4b12      	ldr	r3, [pc, #72]	; (5894 <xQueueReceive+0x168>)
    584c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    584e:	4b12      	ldr	r3, [pc, #72]	; (5898 <xQueueReceive+0x16c>)
    5850:	4798      	blx	r3
    5852:	2800      	cmp	r0, #0
    5854:	d1c6      	bne.n	57e4 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    5856:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    585a:	f8c9 3000 	str.w	r3, [r9]
    585e:	f3bf 8f4f 	dsb	sy
    5862:	f3bf 8f6f 	isb	sy
    5866:	e7bd      	b.n	57e4 <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    5868:	4620      	mov	r0, r4
    586a:	4b0a      	ldr	r3, [pc, #40]	; (5894 <xQueueReceive+0x168>)
    586c:	4798      	blx	r3
			(void)xTaskResumeAll();
    586e:	4b0a      	ldr	r3, [pc, #40]	; (5898 <xQueueReceive+0x16c>)
    5870:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5872:	4620      	mov	r0, r4
    5874:	4b0b      	ldr	r3, [pc, #44]	; (58a4 <xQueueReceive+0x178>)
    5876:	4798      	blx	r3
    5878:	2800      	cmp	r0, #0
    587a:	d0b3      	beq.n	57e4 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    587c:	2000      	movs	r0, #0
    587e:	e7a2      	b.n	57c6 <xQueueReceive+0x9a>
    5880:	00006381 	.word	0x00006381
    5884:	00005265 	.word	0x00005265
    5888:	00006241 	.word	0x00006241
    588c:	e000ed04 	.word	0xe000ed04
    5890:	00004da9 	.word	0x00004da9
    5894:	0000528d 	.word	0x0000528d
    5898:	00005fa1 	.word	0x00005fa1
    589c:	00005e59 	.word	0x00005e59
    58a0:	000062e5 	.word	0x000062e5
    58a4:	00005141 	.word	0x00005141
    58a8:	000061c1 	.word	0x000061c1
    58ac:	00004d65 	.word	0x00004d65
    58b0:	000062d1 	.word	0x000062d1

000058b4 <xQueueSemaphoreTake>:
{
    58b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    58b8:	b085      	sub	sp, #20
    58ba:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    58bc:	b158      	cbz	r0, 58d6 <xQueueSemaphoreTake+0x22>
    58be:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    58c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
    58c2:	b18b      	cbz	r3, 58e8 <xQueueSemaphoreTake+0x34>
    58c4:	f04f 0380 	mov.w	r3, #128	; 0x80
    58c8:	f383 8811 	msr	BASEPRI, r3
    58cc:	f3bf 8f6f 	isb	sy
    58d0:	f3bf 8f4f 	dsb	sy
    58d4:	e7fe      	b.n	58d4 <xQueueSemaphoreTake+0x20>
    58d6:	f04f 0380 	mov.w	r3, #128	; 0x80
    58da:	f383 8811 	msr	BASEPRI, r3
    58de:	f3bf 8f6f 	isb	sy
    58e2:	f3bf 8f4f 	dsb	sy
    58e6:	e7fe      	b.n	58e6 <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    58e8:	4b5b      	ldr	r3, [pc, #364]	; (5a58 <xQueueSemaphoreTake+0x1a4>)
    58ea:	4798      	blx	r3
    58ec:	b950      	cbnz	r0, 5904 <xQueueSemaphoreTake+0x50>
    58ee:	9b01      	ldr	r3, [sp, #4]
    58f0:	b183      	cbz	r3, 5914 <xQueueSemaphoreTake+0x60>
    58f2:	f04f 0380 	mov.w	r3, #128	; 0x80
    58f6:	f383 8811 	msr	BASEPRI, r3
    58fa:	f3bf 8f6f 	isb	sy
    58fe:	f3bf 8f4f 	dsb	sy
    5902:	e7fe      	b.n	5902 <xQueueSemaphoreTake+0x4e>
    5904:	2500      	movs	r5, #0
    5906:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    5908:	4e54      	ldr	r6, [pc, #336]	; (5a5c <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    590a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 5a90 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    590e:	f8df 8158 	ldr.w	r8, [pc, #344]	; 5a68 <xQueueSemaphoreTake+0x1b4>
    5912:	e048      	b.n	59a6 <xQueueSemaphoreTake+0xf2>
    5914:	2500      	movs	r5, #0
    5916:	462f      	mov	r7, r5
    5918:	e7f6      	b.n	5908 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    591a:	3b01      	subs	r3, #1
    591c:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    591e:	6823      	ldr	r3, [r4, #0]
    5920:	b913      	cbnz	r3, 5928 <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    5922:	4b4f      	ldr	r3, [pc, #316]	; (5a60 <xQueueSemaphoreTake+0x1ac>)
    5924:	4798      	blx	r3
    5926:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5928:	6923      	ldr	r3, [r4, #16]
    592a:	b163      	cbz	r3, 5946 <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    592c:	f104 0010 	add.w	r0, r4, #16
    5930:	4b4c      	ldr	r3, [pc, #304]	; (5a64 <xQueueSemaphoreTake+0x1b0>)
    5932:	4798      	blx	r3
    5934:	b138      	cbz	r0, 5946 <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    5936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    593a:	4b4b      	ldr	r3, [pc, #300]	; (5a68 <xQueueSemaphoreTake+0x1b4>)
    593c:	601a      	str	r2, [r3, #0]
    593e:	f3bf 8f4f 	dsb	sy
    5942:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    5946:	4b49      	ldr	r3, [pc, #292]	; (5a6c <xQueueSemaphoreTake+0x1b8>)
    5948:	4798      	blx	r3
				return pdPASS;
    594a:	2501      	movs	r5, #1
}
    594c:	4628      	mov	r0, r5
    594e:	b005      	add	sp, #20
    5950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    5954:	b145      	cbz	r5, 5968 <xQueueSemaphoreTake+0xb4>
    5956:	f04f 0380 	mov.w	r3, #128	; 0x80
    595a:	f383 8811 	msr	BASEPRI, r3
    595e:	f3bf 8f6f 	isb	sy
    5962:	f3bf 8f4f 	dsb	sy
    5966:	e7fe      	b.n	5966 <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    5968:	4b40      	ldr	r3, [pc, #256]	; (5a6c <xQueueSemaphoreTake+0x1b8>)
    596a:	4798      	blx	r3
					return errQUEUE_EMPTY;
    596c:	e7ee      	b.n	594c <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    596e:	a802      	add	r0, sp, #8
    5970:	47c8      	blx	r9
    5972:	e021      	b.n	59b8 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    5974:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    5976:	6860      	ldr	r0, [r4, #4]
    5978:	4b3d      	ldr	r3, [pc, #244]	; (5a70 <xQueueSemaphoreTake+0x1bc>)
    597a:	4798      	blx	r3
    597c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    597e:	4b3b      	ldr	r3, [pc, #236]	; (5a6c <xQueueSemaphoreTake+0x1b8>)
    5980:	4798      	blx	r3
    5982:	e040      	b.n	5a06 <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    5984:	4620      	mov	r0, r4
    5986:	4b3b      	ldr	r3, [pc, #236]	; (5a74 <xQueueSemaphoreTake+0x1c0>)
    5988:	4798      	blx	r3
				(void)xTaskResumeAll();
    598a:	4b3b      	ldr	r3, [pc, #236]	; (5a78 <xQueueSemaphoreTake+0x1c4>)
    598c:	4798      	blx	r3
    598e:	e009      	b.n	59a4 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    5990:	4620      	mov	r0, r4
    5992:	4b38      	ldr	r3, [pc, #224]	; (5a74 <xQueueSemaphoreTake+0x1c0>)
    5994:	4798      	blx	r3
			(void)xTaskResumeAll();
    5996:	4b38      	ldr	r3, [pc, #224]	; (5a78 <xQueueSemaphoreTake+0x1c4>)
    5998:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    599a:	4620      	mov	r0, r4
    599c:	4b37      	ldr	r3, [pc, #220]	; (5a7c <xQueueSemaphoreTake+0x1c8>)
    599e:	4798      	blx	r3
    59a0:	2800      	cmp	r0, #0
    59a2:	d145      	bne.n	5a30 <xQueueSemaphoreTake+0x17c>
    59a4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    59a6:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    59a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    59aa:	2b00      	cmp	r3, #0
    59ac:	d1b5      	bne.n	591a <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    59ae:	9b01      	ldr	r3, [sp, #4]
    59b0:	2b00      	cmp	r3, #0
    59b2:	d0cf      	beq.n	5954 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    59b4:	2f00      	cmp	r7, #0
    59b6:	d0da      	beq.n	596e <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    59b8:	4b2c      	ldr	r3, [pc, #176]	; (5a6c <xQueueSemaphoreTake+0x1b8>)
    59ba:	4798      	blx	r3
		vTaskSuspendAll();
    59bc:	4b30      	ldr	r3, [pc, #192]	; (5a80 <xQueueSemaphoreTake+0x1cc>)
    59be:	4798      	blx	r3
		prvLockQueue(pxQueue);
    59c0:	47b0      	blx	r6
    59c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    59c6:	b25b      	sxtb	r3, r3
    59c8:	f1b3 3fff 	cmp.w	r3, #4294967295
    59cc:	bf04      	itt	eq
    59ce:	2300      	moveq	r3, #0
    59d0:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    59d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    59d8:	b25b      	sxtb	r3, r3
    59da:	f1b3 3fff 	cmp.w	r3, #4294967295
    59de:	bf04      	itt	eq
    59e0:	2300      	moveq	r3, #0
    59e2:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    59e6:	4b21      	ldr	r3, [pc, #132]	; (5a6c <xQueueSemaphoreTake+0x1b8>)
    59e8:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    59ea:	a901      	add	r1, sp, #4
    59ec:	a802      	add	r0, sp, #8
    59ee:	4b25      	ldr	r3, [pc, #148]	; (5a84 <xQueueSemaphoreTake+0x1d0>)
    59f0:	4798      	blx	r3
    59f2:	2800      	cmp	r0, #0
    59f4:	d1cc      	bne.n	5990 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    59f6:	4620      	mov	r0, r4
    59f8:	4b20      	ldr	r3, [pc, #128]	; (5a7c <xQueueSemaphoreTake+0x1c8>)
    59fa:	4798      	blx	r3
    59fc:	2800      	cmp	r0, #0
    59fe:	d0c1      	beq.n	5984 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    5a00:	6823      	ldr	r3, [r4, #0]
    5a02:	2b00      	cmp	r3, #0
    5a04:	d0b6      	beq.n	5974 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    5a06:	9901      	ldr	r1, [sp, #4]
    5a08:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5a0c:	4b1e      	ldr	r3, [pc, #120]	; (5a88 <xQueueSemaphoreTake+0x1d4>)
    5a0e:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5a10:	4620      	mov	r0, r4
    5a12:	4b18      	ldr	r3, [pc, #96]	; (5a74 <xQueueSemaphoreTake+0x1c0>)
    5a14:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    5a16:	4b18      	ldr	r3, [pc, #96]	; (5a78 <xQueueSemaphoreTake+0x1c4>)
    5a18:	4798      	blx	r3
    5a1a:	2800      	cmp	r0, #0
    5a1c:	d1c2      	bne.n	59a4 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    5a1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5a22:	f8c8 3000 	str.w	r3, [r8]
    5a26:	f3bf 8f4f 	dsb	sy
    5a2a:	f3bf 8f6f 	isb	sy
    5a2e:	e7b9      	b.n	59a4 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    5a30:	2d00      	cmp	r5, #0
    5a32:	d08b      	beq.n	594c <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    5a34:	4b09      	ldr	r3, [pc, #36]	; (5a5c <xQueueSemaphoreTake+0x1a8>)
    5a36:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    5a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5a3a:	b153      	cbz	r3, 5a52 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    5a3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5a3e:	6819      	ldr	r1, [r3, #0]
    5a40:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    5a44:	6860      	ldr	r0, [r4, #4]
    5a46:	4b11      	ldr	r3, [pc, #68]	; (5a8c <xQueueSemaphoreTake+0x1d8>)
    5a48:	4798      	blx	r3
						taskEXIT_CRITICAL();
    5a4a:	4b08      	ldr	r3, [pc, #32]	; (5a6c <xQueueSemaphoreTake+0x1b8>)
    5a4c:	4798      	blx	r3
				return errQUEUE_EMPTY;
    5a4e:	2500      	movs	r5, #0
    5a50:	e77c      	b.n	594c <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    5a52:	2100      	movs	r1, #0
    5a54:	e7f6      	b.n	5a44 <xQueueSemaphoreTake+0x190>
    5a56:	bf00      	nop
    5a58:	00006381 	.word	0x00006381
    5a5c:	00004d65 	.word	0x00004d65
    5a60:	0000658d 	.word	0x0000658d
    5a64:	00006241 	.word	0x00006241
    5a68:	e000ed04 	.word	0xe000ed04
    5a6c:	00004da9 	.word	0x00004da9
    5a70:	000063a1 	.word	0x000063a1
    5a74:	0000528d 	.word	0x0000528d
    5a78:	00005fa1 	.word	0x00005fa1
    5a7c:	00005141 	.word	0x00005141
    5a80:	00005e59 	.word	0x00005e59
    5a84:	000062e5 	.word	0x000062e5
    5a88:	000061c1 	.word	0x000061c1
    5a8c:	000064e1 	.word	0x000064e1
    5a90:	000062d1 	.word	0x000062d1

00005a94 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    5a94:	b940      	cbnz	r0, 5aa8 <uxQueueMessagesWaiting+0x14>
    5a96:	f04f 0380 	mov.w	r3, #128	; 0x80
    5a9a:	f383 8811 	msr	BASEPRI, r3
    5a9e:	f3bf 8f6f 	isb	sy
    5aa2:	f3bf 8f4f 	dsb	sy
    5aa6:	e7fe      	b.n	5aa6 <uxQueueMessagesWaiting+0x12>
{
    5aa8:	b510      	push	{r4, lr}
    5aaa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    5aac:	4b03      	ldr	r3, [pc, #12]	; (5abc <uxQueueMessagesWaiting+0x28>)
    5aae:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    5ab0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    5ab2:	4b03      	ldr	r3, [pc, #12]	; (5ac0 <uxQueueMessagesWaiting+0x2c>)
    5ab4:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    5ab6:	4620      	mov	r0, r4
    5ab8:	bd10      	pop	{r4, pc}
    5aba:	bf00      	nop
    5abc:	00004d65 	.word	0x00004d65
    5ac0:	00004da9 	.word	0x00004da9

00005ac4 <vQueueWaitForMessageRestricted>:
{
    5ac4:	b570      	push	{r4, r5, r6, lr}
    5ac6:	4604      	mov	r4, r0
    5ac8:	460d      	mov	r5, r1
    5aca:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    5acc:	4b11      	ldr	r3, [pc, #68]	; (5b14 <vQueueWaitForMessageRestricted+0x50>)
    5ace:	4798      	blx	r3
    5ad0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5ad4:	b25b      	sxtb	r3, r3
    5ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
    5ada:	bf04      	itt	eq
    5adc:	2300      	moveq	r3, #0
    5ade:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5ae2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5ae6:	b25b      	sxtb	r3, r3
    5ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
    5aec:	bf04      	itt	eq
    5aee:	2300      	moveq	r3, #0
    5af0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5af4:	4b08      	ldr	r3, [pc, #32]	; (5b18 <vQueueWaitForMessageRestricted+0x54>)
    5af6:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    5af8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5afa:	b11b      	cbz	r3, 5b04 <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    5afc:	4620      	mov	r0, r4
    5afe:	4b07      	ldr	r3, [pc, #28]	; (5b1c <vQueueWaitForMessageRestricted+0x58>)
    5b00:	4798      	blx	r3
    5b02:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    5b04:	4632      	mov	r2, r6
    5b06:	4629      	mov	r1, r5
    5b08:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5b0c:	4b04      	ldr	r3, [pc, #16]	; (5b20 <vQueueWaitForMessageRestricted+0x5c>)
    5b0e:	4798      	blx	r3
    5b10:	e7f4      	b.n	5afc <vQueueWaitForMessageRestricted+0x38>
    5b12:	bf00      	nop
    5b14:	00004d65 	.word	0x00004d65
    5b18:	00004da9 	.word	0x00004da9
    5b1c:	0000528d 	.word	0x0000528d
    5b20:	000061fd 	.word	0x000061fd

00005b24 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5b24:	4a06      	ldr	r2, [pc, #24]	; (5b40 <prvIdleTask+0x1c>)
				taskYIELD();
    5b26:	4807      	ldr	r0, [pc, #28]	; (5b44 <prvIdleTask+0x20>)
    5b28:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5b2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5b2e:	2b01      	cmp	r3, #1
    5b30:	d9fc      	bls.n	5b2c <prvIdleTask+0x8>
				taskYIELD();
    5b32:	6001      	str	r1, [r0, #0]
    5b34:	f3bf 8f4f 	dsb	sy
    5b38:	f3bf 8f6f 	isb	sy
    5b3c:	e7f6      	b.n	5b2c <prvIdleTask+0x8>
    5b3e:	bf00      	nop
    5b40:	20003430 	.word	0x20003430
    5b44:	e000ed04 	.word	0xe000ed04

00005b48 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5b48:	4b09      	ldr	r3, [pc, #36]	; (5b70 <prvResetNextTaskUnblockTime+0x28>)
    5b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    5b4e:	681b      	ldr	r3, [r3, #0]
    5b50:	b143      	cbz	r3, 5b64 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5b52:	4b07      	ldr	r3, [pc, #28]	; (5b70 <prvResetNextTaskUnblockTime+0x28>)
    5b54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    5b58:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    5b5a:	68d2      	ldr	r2, [r2, #12]
    5b5c:	6852      	ldr	r2, [r2, #4]
    5b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5b62:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    5b64:	f04f 32ff 	mov.w	r2, #4294967295
    5b68:	4b01      	ldr	r3, [pc, #4]	; (5b70 <prvResetNextTaskUnblockTime+0x28>)
    5b6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5b6e:	4770      	bx	lr
    5b70:	20003430 	.word	0x20003430

00005b74 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    5b74:	b570      	push	{r4, r5, r6, lr}
    5b76:	4604      	mov	r4, r0
    5b78:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    5b7a:	4b1a      	ldr	r3, [pc, #104]	; (5be4 <prvAddCurrentTaskToDelayedList+0x70>)
    5b7c:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    5b80:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    5b84:	3004      	adds	r0, #4
    5b86:	4b18      	ldr	r3, [pc, #96]	; (5be8 <prvAddCurrentTaskToDelayedList+0x74>)
    5b88:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    5b8a:	f1b4 3fff 	cmp.w	r4, #4294967295
    5b8e:	d016      	beq.n	5bbe <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    5b90:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    5b92:	4b14      	ldr	r3, [pc, #80]	; (5be4 <prvAddCurrentTaskToDelayedList+0x70>)
    5b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5b98:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    5b9a:	42a5      	cmp	r5, r4
    5b9c:	d818      	bhi.n	5bd0 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    5b9e:	4d11      	ldr	r5, [pc, #68]	; (5be4 <prvAddCurrentTaskToDelayedList+0x70>)
    5ba0:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    5ba4:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    5ba8:	3104      	adds	r1, #4
    5baa:	4b10      	ldr	r3, [pc, #64]	; (5bec <prvAddCurrentTaskToDelayedList+0x78>)
    5bac:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    5bae:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    5bb2:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    5bb4:	bf3c      	itt	cc
    5bb6:	462b      	movcc	r3, r5
    5bb8:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    5bbc:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    5bbe:	2e00      	cmp	r6, #0
    5bc0:	d0e6      	beq.n	5b90 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    5bc2:	4808      	ldr	r0, [pc, #32]	; (5be4 <prvAddCurrentTaskToDelayedList+0x70>)
    5bc4:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    5bc8:	3104      	adds	r1, #4
    5bca:	4b09      	ldr	r3, [pc, #36]	; (5bf0 <prvAddCurrentTaskToDelayedList+0x7c>)
    5bcc:	4798      	blx	r3
    5bce:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    5bd0:	4b04      	ldr	r3, [pc, #16]	; (5be4 <prvAddCurrentTaskToDelayedList+0x70>)
    5bd2:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    5bd6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    5bda:	3104      	adds	r1, #4
    5bdc:	4b03      	ldr	r3, [pc, #12]	; (5bec <prvAddCurrentTaskToDelayedList+0x78>)
    5bde:	4798      	blx	r3
    5be0:	bd70      	pop	{r4, r5, r6, pc}
    5be2:	bf00      	nop
    5be4:	20003430 	.word	0x20003430
    5be8:	00004c6d 	.word	0x00004c6d
    5bec:	00004c39 	.word	0x00004c39
    5bf0:	00004c21 	.word	0x00004c21

00005bf4 <xTaskCreate>:
{
    5bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bf8:	b083      	sub	sp, #12
    5bfa:	4683      	mov	fp, r0
    5bfc:	460d      	mov	r5, r1
    5bfe:	9301      	str	r3, [sp, #4]
    5c00:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    5c04:	0096      	lsls	r6, r2, #2
    5c06:	4630      	mov	r0, r6
    5c08:	4b66      	ldr	r3, [pc, #408]	; (5da4 <xTaskCreate+0x1b0>)
    5c0a:	4798      	blx	r3
		if (pxStack != NULL) {
    5c0c:	2800      	cmp	r0, #0
    5c0e:	f000 8096 	beq.w	5d3e <xTaskCreate+0x14a>
    5c12:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    5c14:	2054      	movs	r0, #84	; 0x54
    5c16:	4b63      	ldr	r3, [pc, #396]	; (5da4 <xTaskCreate+0x1b0>)
    5c18:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    5c1a:	4604      	mov	r4, r0
    5c1c:	2800      	cmp	r0, #0
    5c1e:	f000 808b 	beq.w	5d38 <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    5c22:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    5c24:	4632      	mov	r2, r6
    5c26:	21a5      	movs	r1, #165	; 0xa5
    5c28:	4638      	mov	r0, r7
    5c2a:	4b5f      	ldr	r3, [pc, #380]	; (5da8 <xTaskCreate+0x1b4>)
    5c2c:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    5c2e:	3e04      	subs	r6, #4
    5c30:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5c32:	441e      	add	r6, r3
		                      & (~(
    5c34:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    5c38:	782b      	ldrb	r3, [r5, #0]
    5c3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    5c3e:	782b      	ldrb	r3, [r5, #0]
    5c40:	b15b      	cbz	r3, 5c5a <xTaskCreate+0x66>
    5c42:	462b      	mov	r3, r5
    5c44:	f104 0235 	add.w	r2, r4, #53	; 0x35
    5c48:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    5c4a:	7858      	ldrb	r0, [r3, #1]
    5c4c:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    5c50:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    5c54:	b108      	cbz	r0, 5c5a <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    5c56:	4299      	cmp	r1, r3
    5c58:	d1f7      	bne.n	5c4a <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    5c5a:	2700      	movs	r7, #0
    5c5c:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    5c60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5c62:	2d04      	cmp	r5, #4
    5c64:	bf28      	it	cs
    5c66:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    5c68:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    5c6a:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    5c6c:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    5c6e:	f104 0804 	add.w	r8, r4, #4
    5c72:	4640      	mov	r0, r8
    5c74:	f8df 9154 	ldr.w	r9, [pc, #340]	; 5dcc <xTaskCreate+0x1d8>
    5c78:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    5c7a:	f104 0018 	add.w	r0, r4, #24
    5c7e:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    5c80:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    5c82:	f1c5 0505 	rsb	r5, r5, #5
    5c86:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    5c88:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    5c8a:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    5c8c:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    5c90:	9a01      	ldr	r2, [sp, #4]
    5c92:	4659      	mov	r1, fp
    5c94:	4630      	mov	r0, r6
    5c96:	4b45      	ldr	r3, [pc, #276]	; (5dac <xTaskCreate+0x1b8>)
    5c98:	4798      	blx	r3
    5c9a:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    5c9c:	f1ba 0f00 	cmp.w	sl, #0
    5ca0:	d001      	beq.n	5ca6 <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    5ca2:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    5ca6:	4b42      	ldr	r3, [pc, #264]	; (5db0 <xTaskCreate+0x1bc>)
    5ca8:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    5caa:	4b42      	ldr	r3, [pc, #264]	; (5db4 <xTaskCreate+0x1c0>)
    5cac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    5cb0:	3201      	adds	r2, #1
    5cb2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    5cb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5cba:	2b00      	cmp	r3, #0
    5cbc:	d042      	beq.n	5d44 <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    5cbe:	4b3d      	ldr	r3, [pc, #244]	; (5db4 <xTaskCreate+0x1c0>)
    5cc0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    5cc4:	b94b      	cbnz	r3, 5cda <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    5cc6:	4b3b      	ldr	r3, [pc, #236]	; (5db4 <xTaskCreate+0x1c0>)
    5cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5cce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5cd0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    5cd2:	bf9c      	itt	ls
    5cd4:	4b37      	ldrls	r3, [pc, #220]	; (5db4 <xTaskCreate+0x1c0>)
    5cd6:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    5cda:	4a36      	ldr	r2, [pc, #216]	; (5db4 <xTaskCreate+0x1c0>)
    5cdc:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    5ce0:	3301      	adds	r3, #1
    5ce2:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    5ce6:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    5ce8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5cea:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    5cee:	4293      	cmp	r3, r2
    5cf0:	bf84      	itt	hi
    5cf2:	4a30      	ldrhi	r2, [pc, #192]	; (5db4 <xTaskCreate+0x1c0>)
    5cf4:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    5cf8:	4d2e      	ldr	r5, [pc, #184]	; (5db4 <xTaskCreate+0x1c0>)
    5cfa:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5cfe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5d02:	4641      	mov	r1, r8
    5d04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5d08:	4b2b      	ldr	r3, [pc, #172]	; (5db8 <xTaskCreate+0x1c4>)
    5d0a:	4798      	blx	r3
	taskEXIT_CRITICAL();
    5d0c:	4b2b      	ldr	r3, [pc, #172]	; (5dbc <xTaskCreate+0x1c8>)
    5d0e:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    5d10:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    5d14:	2b00      	cmp	r3, #0
    5d16:	d03f      	beq.n	5d98 <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    5d18:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5d1e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5d20:	429a      	cmp	r2, r3
    5d22:	d23d      	bcs.n	5da0 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    5d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5d28:	4b25      	ldr	r3, [pc, #148]	; (5dc0 <xTaskCreate+0x1cc>)
    5d2a:	601a      	str	r2, [r3, #0]
    5d2c:	f3bf 8f4f 	dsb	sy
    5d30:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    5d34:	2001      	movs	r0, #1
    5d36:	e030      	b.n	5d9a <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    5d38:	4638      	mov	r0, r7
    5d3a:	4b22      	ldr	r3, [pc, #136]	; (5dc4 <xTaskCreate+0x1d0>)
    5d3c:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    5d3e:	f04f 30ff 	mov.w	r0, #4294967295
    5d42:	e02a      	b.n	5d9a <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    5d44:	4b1b      	ldr	r3, [pc, #108]	; (5db4 <xTaskCreate+0x1c0>)
    5d46:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    5d4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5d4e:	2b01      	cmp	r3, #1
    5d50:	d1c3      	bne.n	5cda <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    5d52:	4d18      	ldr	r5, [pc, #96]	; (5db4 <xTaskCreate+0x1c0>)
    5d54:	f105 0028 	add.w	r0, r5, #40	; 0x28
    5d58:	4e1b      	ldr	r6, [pc, #108]	; (5dc8 <xTaskCreate+0x1d4>)
    5d5a:	47b0      	blx	r6
    5d5c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    5d60:	47b0      	blx	r6
    5d62:	f105 0050 	add.w	r0, r5, #80	; 0x50
    5d66:	47b0      	blx	r6
    5d68:	f105 0064 	add.w	r0, r5, #100	; 0x64
    5d6c:	47b0      	blx	r6
    5d6e:	f105 0078 	add.w	r0, r5, #120	; 0x78
    5d72:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    5d74:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    5d78:	4648      	mov	r0, r9
    5d7a:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    5d7c:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    5d80:	4638      	mov	r0, r7
    5d82:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    5d84:	f105 0014 	add.w	r0, r5, #20
    5d88:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    5d8a:	4628      	mov	r0, r5
    5d8c:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    5d8e:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    5d92:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    5d96:	e7a0      	b.n	5cda <xTaskCreate+0xe6>
		xReturn = pdPASS;
    5d98:	2001      	movs	r0, #1
}
    5d9a:	b003      	add	sp, #12
    5d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    5da0:	2001      	movs	r0, #1
	return xReturn;
    5da2:	e7fa      	b.n	5d9a <xTaskCreate+0x1a6>
    5da4:	00005015 	.word	0x00005015
    5da8:	00006c83 	.word	0x00006c83
    5dac:	00004d11 	.word	0x00004d11
    5db0:	00004d65 	.word	0x00004d65
    5db4:	20003430 	.word	0x20003430
    5db8:	00004c21 	.word	0x00004c21
    5dbc:	00004da9 	.word	0x00004da9
    5dc0:	e000ed04 	.word	0xe000ed04
    5dc4:	000050f5 	.word	0x000050f5
    5dc8:	00004c05 	.word	0x00004c05
    5dcc:	00004c1b 	.word	0x00004c1b

00005dd0 <vTaskStartScheduler>:
{
    5dd0:	b510      	push	{r4, lr}
    5dd2:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    5dd4:	4b19      	ldr	r3, [pc, #100]	; (5e3c <vTaskStartScheduler+0x6c>)
    5dd6:	9301      	str	r3, [sp, #4]
    5dd8:	2300      	movs	r3, #0
    5dda:	9300      	str	r3, [sp, #0]
    5ddc:	2280      	movs	r2, #128	; 0x80
    5dde:	4918      	ldr	r1, [pc, #96]	; (5e40 <vTaskStartScheduler+0x70>)
    5de0:	4818      	ldr	r0, [pc, #96]	; (5e44 <vTaskStartScheduler+0x74>)
    5de2:	4c19      	ldr	r4, [pc, #100]	; (5e48 <vTaskStartScheduler+0x78>)
    5de4:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    5de6:	2801      	cmp	r0, #1
    5de8:	d004      	beq.n	5df4 <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    5dea:	f1b0 3fff 	cmp.w	r0, #4294967295
    5dee:	d01b      	beq.n	5e28 <vTaskStartScheduler+0x58>
}
    5df0:	b002      	add	sp, #8
    5df2:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    5df4:	4b15      	ldr	r3, [pc, #84]	; (5e4c <vTaskStartScheduler+0x7c>)
    5df6:	4798      	blx	r3
	if (xReturn == pdPASS) {
    5df8:	2801      	cmp	r0, #1
    5dfa:	d1f6      	bne.n	5dea <vTaskStartScheduler+0x1a>
    5dfc:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e00:	f383 8811 	msr	BASEPRI, r3
    5e04:	f3bf 8f6f 	isb	sy
    5e08:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    5e0c:	4b10      	ldr	r3, [pc, #64]	; (5e50 <vTaskStartScheduler+0x80>)
    5e0e:	f04f 32ff 	mov.w	r2, #4294967295
    5e12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    5e16:	2201      	movs	r2, #1
    5e18:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    5e1c:	2200      	movs	r2, #0
    5e1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    5e22:	4b0c      	ldr	r3, [pc, #48]	; (5e54 <vTaskStartScheduler+0x84>)
    5e24:	4798      	blx	r3
    5e26:	e7e3      	b.n	5df0 <vTaskStartScheduler+0x20>
    5e28:	f04f 0380 	mov.w	r3, #128	; 0x80
    5e2c:	f383 8811 	msr	BASEPRI, r3
    5e30:	f3bf 8f6f 	isb	sy
    5e34:	f3bf 8f4f 	dsb	sy
    5e38:	e7fe      	b.n	5e38 <vTaskStartScheduler+0x68>
    5e3a:	bf00      	nop
    5e3c:	2000350c 	.word	0x2000350c
    5e40:	0000973c 	.word	0x0000973c
    5e44:	00005b25 	.word	0x00005b25
    5e48:	00005bf5 	.word	0x00005bf5
    5e4c:	00006819 	.word	0x00006819
    5e50:	20003430 	.word	0x20003430
    5e54:	00004e99 	.word	0x00004e99

00005e58 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    5e58:	4a03      	ldr	r2, [pc, #12]	; (5e68 <vTaskSuspendAll+0x10>)
    5e5a:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    5e5e:	3301      	adds	r3, #1
    5e60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    5e64:	4770      	bx	lr
    5e66:	bf00      	nop
    5e68:	20003430 	.word	0x20003430

00005e6c <xTaskGetTickCount>:
		xTicks = xTickCount;
    5e6c:	4b01      	ldr	r3, [pc, #4]	; (5e74 <xTaskGetTickCount+0x8>)
    5e6e:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    5e72:	4770      	bx	lr
    5e74:	20003430 	.word	0x20003430

00005e78 <xTaskIncrementTick>:
{
    5e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5e7c:	4b44      	ldr	r3, [pc, #272]	; (5f90 <xTaskIncrementTick+0x118>)
    5e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5e82:	2b00      	cmp	r3, #0
    5e84:	d173      	bne.n	5f6e <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    5e86:	4b42      	ldr	r3, [pc, #264]	; (5f90 <xTaskIncrementTick+0x118>)
    5e88:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    5e8c:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    5e8e:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    5e92:	b9e6      	cbnz	r6, 5ece <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    5e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    5e98:	681b      	ldr	r3, [r3, #0]
    5e9a:	b143      	cbz	r3, 5eae <xTaskIncrementTick+0x36>
    5e9c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5ea0:	f383 8811 	msr	BASEPRI, r3
    5ea4:	f3bf 8f6f 	isb	sy
    5ea8:	f3bf 8f4f 	dsb	sy
    5eac:	e7fe      	b.n	5eac <xTaskIncrementTick+0x34>
    5eae:	4b38      	ldr	r3, [pc, #224]	; (5f90 <xTaskIncrementTick+0x118>)
    5eb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    5eb4:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    5eb8:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    5ebc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    5ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    5ec4:	3201      	adds	r2, #1
    5ec6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    5eca:	4b32      	ldr	r3, [pc, #200]	; (5f94 <xTaskIncrementTick+0x11c>)
    5ecc:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    5ece:	4b30      	ldr	r3, [pc, #192]	; (5f90 <xTaskIncrementTick+0x118>)
    5ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    5ed4:	429e      	cmp	r6, r3
    5ed6:	d20d      	bcs.n	5ef4 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    5ed8:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    5eda:	4b2d      	ldr	r3, [pc, #180]	; (5f90 <xTaskIncrementTick+0x118>)
    5edc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    5ee0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    5ee2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5ee6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    5eec:	2b02      	cmp	r3, #2
    5eee:	bf28      	it	cs
    5ef0:	2401      	movcs	r4, #1
    5ef2:	e043      	b.n	5f7c <xTaskIncrementTick+0x104>
    5ef4:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5ef6:	4d26      	ldr	r5, [pc, #152]	; (5f90 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5ef8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5f9c <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    5efc:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    5f00:	e021      	b.n	5f46 <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5f02:	f04f 32ff 	mov.w	r2, #4294967295
    5f06:	4b22      	ldr	r3, [pc, #136]	; (5f90 <xTaskIncrementTick+0x118>)
    5f08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    5f0c:	e7e5      	b.n	5eda <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    5f0e:	4a20      	ldr	r2, [pc, #128]	; (5f90 <xTaskIncrementTick+0x118>)
    5f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    5f14:	e7e1      	b.n	5eda <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    5f16:	f107 0018 	add.w	r0, r7, #24
    5f1a:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    5f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5f1e:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    5f22:	4298      	cmp	r0, r3
    5f24:	bf88      	it	hi
    5f26:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    5f2a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5f2e:	4649      	mov	r1, r9
    5f30:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    5f34:	4b18      	ldr	r3, [pc, #96]	; (5f98 <xTaskIncrementTick+0x120>)
    5f36:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    5f38:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    5f3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    5f40:	429a      	cmp	r2, r3
    5f42:	bf28      	it	cs
    5f44:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5f46:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    5f4a:	681b      	ldr	r3, [r3, #0]
    5f4c:	2b00      	cmp	r3, #0
    5f4e:	d0d8      	beq.n	5f02 <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5f50:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    5f54:	68db      	ldr	r3, [r3, #12]
    5f56:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    5f58:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    5f5a:	429e      	cmp	r6, r3
    5f5c:	d3d7      	bcc.n	5f0e <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    5f5e:	f107 0904 	add.w	r9, r7, #4
    5f62:	4648      	mov	r0, r9
    5f64:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    5f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5f68:	2b00      	cmp	r3, #0
    5f6a:	d1d4      	bne.n	5f16 <xTaskIncrementTick+0x9e>
    5f6c:	e7d6      	b.n	5f1c <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    5f6e:	4a08      	ldr	r2, [pc, #32]	; (5f90 <xTaskIncrementTick+0x118>)
    5f70:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    5f74:	3301      	adds	r3, #1
    5f76:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    5f7a:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    5f7c:	4b04      	ldr	r3, [pc, #16]	; (5f90 <xTaskIncrementTick+0x118>)
    5f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    5f82:	2b00      	cmp	r3, #0
}
    5f84:	bf0c      	ite	eq
    5f86:	4620      	moveq	r0, r4
    5f88:	2001      	movne	r0, #1
    5f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5f8e:	bf00      	nop
    5f90:	20003430 	.word	0x20003430
    5f94:	00005b49 	.word	0x00005b49
    5f98:	00004c21 	.word	0x00004c21
    5f9c:	00004c6d 	.word	0x00004c6d

00005fa0 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    5fa0:	4b3a      	ldr	r3, [pc, #232]	; (608c <xTaskResumeAll+0xec>)
    5fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5fa6:	b943      	cbnz	r3, 5fba <xTaskResumeAll+0x1a>
    5fa8:	f04f 0380 	mov.w	r3, #128	; 0x80
    5fac:	f383 8811 	msr	BASEPRI, r3
    5fb0:	f3bf 8f6f 	isb	sy
    5fb4:	f3bf 8f4f 	dsb	sy
    5fb8:	e7fe      	b.n	5fb8 <xTaskResumeAll+0x18>
{
    5fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    5fbe:	4b34      	ldr	r3, [pc, #208]	; (6090 <xTaskResumeAll+0xf0>)
    5fc0:	4798      	blx	r3
		--uxSchedulerSuspended;
    5fc2:	4b32      	ldr	r3, [pc, #200]	; (608c <xTaskResumeAll+0xec>)
    5fc4:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    5fc8:	3a01      	subs	r2, #1
    5fca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    5fce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    5fd2:	2b00      	cmp	r3, #0
    5fd4:	d155      	bne.n	6082 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    5fd6:	4b2d      	ldr	r3, [pc, #180]	; (608c <xTaskResumeAll+0xec>)
    5fd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    5fdc:	b92b      	cbnz	r3, 5fea <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    5fde:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    5fe0:	4b2c      	ldr	r3, [pc, #176]	; (6094 <xTaskResumeAll+0xf4>)
    5fe2:	4798      	blx	r3
}
    5fe4:	4620      	mov	r0, r4
    5fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fea:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5fec:	4c27      	ldr	r4, [pc, #156]	; (608c <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5fee:	4e2a      	ldr	r6, [pc, #168]	; (6098 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    5ff0:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    5ff4:	6963      	ldr	r3, [r4, #20]
    5ff6:	b1fb      	cbz	r3, 6038 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    5ff8:	6a23      	ldr	r3, [r4, #32]
    5ffa:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    5ffc:	f105 0018 	add.w	r0, r5, #24
    6000:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    6002:	1d2f      	adds	r7, r5, #4
    6004:	4638      	mov	r0, r7
    6006:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    6008:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    600a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    600e:	4298      	cmp	r0, r3
    6010:	bf88      	it	hi
    6012:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    6016:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    601a:	4639      	mov	r1, r7
    601c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    6020:	4b1e      	ldr	r3, [pc, #120]	; (609c <xTaskResumeAll+0xfc>)
    6022:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    6024:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6028:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    602c:	429a      	cmp	r2, r3
    602e:	d3e1      	bcc.n	5ff4 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    6030:	2301      	movs	r3, #1
    6032:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    6036:	e7dd      	b.n	5ff4 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    6038:	b10d      	cbz	r5, 603e <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    603a:	4b19      	ldr	r3, [pc, #100]	; (60a0 <xTaskResumeAll+0x100>)
    603c:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    603e:	4b13      	ldr	r3, [pc, #76]	; (608c <xTaskResumeAll+0xec>)
    6040:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    6044:	b17c      	cbz	r4, 6066 <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    6046:	4f17      	ldr	r7, [pc, #92]	; (60a4 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    6048:	461e      	mov	r6, r3
    604a:	2501      	movs	r5, #1
    604c:	e001      	b.n	6052 <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    604e:	3c01      	subs	r4, #1
    6050:	d005      	beq.n	605e <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    6052:	47b8      	blx	r7
    6054:	2800      	cmp	r0, #0
    6056:	d0fa      	beq.n	604e <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    6058:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    605c:	e7f7      	b.n	604e <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    605e:	2200      	movs	r2, #0
    6060:	4b0a      	ldr	r3, [pc, #40]	; (608c <xTaskResumeAll+0xec>)
    6062:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    6066:	4b09      	ldr	r3, [pc, #36]	; (608c <xTaskResumeAll+0xec>)
    6068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    606c:	b15b      	cbz	r3, 6086 <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    606e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6072:	4b0d      	ldr	r3, [pc, #52]	; (60a8 <xTaskResumeAll+0x108>)
    6074:	601a      	str	r2, [r3, #0]
    6076:	f3bf 8f4f 	dsb	sy
    607a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    607e:	2401      	movs	r4, #1
    6080:	e7ae      	b.n	5fe0 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    6082:	2400      	movs	r4, #0
    6084:	e7ac      	b.n	5fe0 <xTaskResumeAll+0x40>
    6086:	2400      	movs	r4, #0
    6088:	e7aa      	b.n	5fe0 <xTaskResumeAll+0x40>
    608a:	bf00      	nop
    608c:	20003430 	.word	0x20003430
    6090:	00004d65 	.word	0x00004d65
    6094:	00004da9 	.word	0x00004da9
    6098:	00004c6d 	.word	0x00004c6d
    609c:	00004c21 	.word	0x00004c21
    60a0:	00005b49 	.word	0x00005b49
    60a4:	00005e79 	.word	0x00005e79
    60a8:	e000ed04 	.word	0xe000ed04

000060ac <vTaskDelay>:
{
    60ac:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    60ae:	b1b0      	cbz	r0, 60de <vTaskDelay+0x32>
    60b0:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    60b2:	4b0f      	ldr	r3, [pc, #60]	; (60f0 <vTaskDelay+0x44>)
    60b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    60b8:	b143      	cbz	r3, 60cc <vTaskDelay+0x20>
    60ba:	f04f 0380 	mov.w	r3, #128	; 0x80
    60be:	f383 8811 	msr	BASEPRI, r3
    60c2:	f3bf 8f6f 	isb	sy
    60c6:	f3bf 8f4f 	dsb	sy
    60ca:	e7fe      	b.n	60ca <vTaskDelay+0x1e>
		vTaskSuspendAll();
    60cc:	4b09      	ldr	r3, [pc, #36]	; (60f4 <vTaskDelay+0x48>)
    60ce:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    60d0:	2100      	movs	r1, #0
    60d2:	4620      	mov	r0, r4
    60d4:	4b08      	ldr	r3, [pc, #32]	; (60f8 <vTaskDelay+0x4c>)
    60d6:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    60d8:	4b08      	ldr	r3, [pc, #32]	; (60fc <vTaskDelay+0x50>)
    60da:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    60dc:	b938      	cbnz	r0, 60ee <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    60de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    60e2:	4b07      	ldr	r3, [pc, #28]	; (6100 <vTaskDelay+0x54>)
    60e4:	601a      	str	r2, [r3, #0]
    60e6:	f3bf 8f4f 	dsb	sy
    60ea:	f3bf 8f6f 	isb	sy
    60ee:	bd10      	pop	{r4, pc}
    60f0:	20003430 	.word	0x20003430
    60f4:	00005e59 	.word	0x00005e59
    60f8:	00005b75 	.word	0x00005b75
    60fc:	00005fa1 	.word	0x00005fa1
    6100:	e000ed04 	.word	0xe000ed04

00006104 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    6104:	4b2c      	ldr	r3, [pc, #176]	; (61b8 <vTaskSwitchContext+0xb4>)
    6106:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    610a:	bb8b      	cbnz	r3, 6170 <vTaskSwitchContext+0x6c>
{
    610c:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    610e:	4b2a      	ldr	r3, [pc, #168]	; (61b8 <vTaskSwitchContext+0xb4>)
    6110:	2200      	movs	r2, #0
    6112:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    6116:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    611a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    611e:	6812      	ldr	r2, [r2, #0]
    6120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6122:	429a      	cmp	r2, r3
    6124:	d807      	bhi.n	6136 <vTaskSwitchContext+0x32>
    6126:	4b24      	ldr	r3, [pc, #144]	; (61b8 <vTaskSwitchContext+0xb4>)
    6128:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    612c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    6130:	3134      	adds	r1, #52	; 0x34
    6132:	4b22      	ldr	r3, [pc, #136]	; (61bc <vTaskSwitchContext+0xb8>)
    6134:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    6136:	4a20      	ldr	r2, [pc, #128]	; (61b8 <vTaskSwitchContext+0xb4>)
    6138:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    613c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    6140:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    6144:	6a92      	ldr	r2, [r2, #40]	; 0x28
    6146:	b9c2      	cbnz	r2, 617a <vTaskSwitchContext+0x76>
    6148:	b14b      	cbz	r3, 615e <vTaskSwitchContext+0x5a>
    614a:	491b      	ldr	r1, [pc, #108]	; (61b8 <vTaskSwitchContext+0xb4>)
    614c:	3b01      	subs	r3, #1
    614e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    6152:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6156:	6a92      	ldr	r2, [r2, #40]	; 0x28
    6158:	b97a      	cbnz	r2, 617a <vTaskSwitchContext+0x76>
    615a:	2b00      	cmp	r3, #0
    615c:	d1f6      	bne.n	614c <vTaskSwitchContext+0x48>
    615e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6162:	f383 8811 	msr	BASEPRI, r3
    6166:	f3bf 8f6f 	isb	sy
    616a:	f3bf 8f4f 	dsb	sy
    616e:	e7fe      	b.n	616e <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    6170:	2201      	movs	r2, #1
    6172:	4b11      	ldr	r3, [pc, #68]	; (61b8 <vTaskSwitchContext+0xb4>)
    6174:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    6178:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    617a:	4a0f      	ldr	r2, [pc, #60]	; (61b8 <vTaskSwitchContext+0xb4>)
    617c:	0099      	lsls	r1, r3, #2
    617e:	18c8      	adds	r0, r1, r3
    6180:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    6184:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    6186:	6864      	ldr	r4, [r4, #4]
    6188:	62c4      	str	r4, [r0, #44]	; 0x2c
    618a:	4419      	add	r1, r3
    618c:	4602      	mov	r2, r0
    618e:	3230      	adds	r2, #48	; 0x30
    6190:	4294      	cmp	r4, r2
    6192:	d00b      	beq.n	61ac <vTaskSwitchContext+0xa8>
    6194:	4a08      	ldr	r2, [pc, #32]	; (61b8 <vTaskSwitchContext+0xb4>)
    6196:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    619a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    619e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    61a0:	68c9      	ldr	r1, [r1, #12]
    61a2:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    61a6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    61aa:	bd10      	pop	{r4, pc}
    61ac:	6860      	ldr	r0, [r4, #4]
    61ae:	4a02      	ldr	r2, [pc, #8]	; (61b8 <vTaskSwitchContext+0xb4>)
    61b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    61b4:	62d0      	str	r0, [r2, #44]	; 0x2c
    61b6:	e7ed      	b.n	6194 <vTaskSwitchContext+0x90>
    61b8:	20003430 	.word	0x20003430
    61bc:	000002d1 	.word	0x000002d1

000061c0 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    61c0:	b940      	cbnz	r0, 61d4 <vTaskPlaceOnEventList+0x14>
    61c2:	f04f 0380 	mov.w	r3, #128	; 0x80
    61c6:	f383 8811 	msr	BASEPRI, r3
    61ca:	f3bf 8f6f 	isb	sy
    61ce:	f3bf 8f4f 	dsb	sy
    61d2:	e7fe      	b.n	61d2 <vTaskPlaceOnEventList+0x12>
{
    61d4:	b510      	push	{r4, lr}
    61d6:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    61d8:	4b05      	ldr	r3, [pc, #20]	; (61f0 <vTaskPlaceOnEventList+0x30>)
    61da:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    61de:	3118      	adds	r1, #24
    61e0:	4b04      	ldr	r3, [pc, #16]	; (61f4 <vTaskPlaceOnEventList+0x34>)
    61e2:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    61e4:	2101      	movs	r1, #1
    61e6:	4620      	mov	r0, r4
    61e8:	4b03      	ldr	r3, [pc, #12]	; (61f8 <vTaskPlaceOnEventList+0x38>)
    61ea:	4798      	blx	r3
    61ec:	bd10      	pop	{r4, pc}
    61ee:	bf00      	nop
    61f0:	20003430 	.word	0x20003430
    61f4:	00004c39 	.word	0x00004c39
    61f8:	00005b75 	.word	0x00005b75

000061fc <vTaskPlaceOnEventListRestricted>:
{
    61fc:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    61fe:	b180      	cbz	r0, 6222 <vTaskPlaceOnEventListRestricted+0x26>
    6200:	4614      	mov	r4, r2
    6202:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    6204:	4b0b      	ldr	r3, [pc, #44]	; (6234 <vTaskPlaceOnEventListRestricted+0x38>)
    6206:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    620a:	3118      	adds	r1, #24
    620c:	4b0a      	ldr	r3, [pc, #40]	; (6238 <vTaskPlaceOnEventListRestricted+0x3c>)
    620e:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    6210:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    6212:	4621      	mov	r1, r4
    6214:	bf0c      	ite	eq
    6216:	4628      	moveq	r0, r5
    6218:	f04f 30ff 	movne.w	r0, #4294967295
    621c:	4b07      	ldr	r3, [pc, #28]	; (623c <vTaskPlaceOnEventListRestricted+0x40>)
    621e:	4798      	blx	r3
    6220:	bd38      	pop	{r3, r4, r5, pc}
    6222:	f04f 0380 	mov.w	r3, #128	; 0x80
    6226:	f383 8811 	msr	BASEPRI, r3
    622a:	f3bf 8f6f 	isb	sy
    622e:	f3bf 8f4f 	dsb	sy
    6232:	e7fe      	b.n	6232 <vTaskPlaceOnEventListRestricted+0x36>
    6234:	20003430 	.word	0x20003430
    6238:	00004c21 	.word	0x00004c21
    623c:	00005b75 	.word	0x00005b75

00006240 <xTaskRemoveFromEventList>:
{
    6240:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    6242:	68c3      	ldr	r3, [r0, #12]
    6244:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    6246:	2c00      	cmp	r4, #0
    6248:	d02a      	beq.n	62a0 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    624a:	f104 0518 	add.w	r5, r4, #24
    624e:	4628      	mov	r0, r5
    6250:	4b1a      	ldr	r3, [pc, #104]	; (62bc <xTaskRemoveFromEventList+0x7c>)
    6252:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    6254:	4b1a      	ldr	r3, [pc, #104]	; (62c0 <xTaskRemoveFromEventList+0x80>)
    6256:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    625a:	bb53      	cbnz	r3, 62b2 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    625c:	1d25      	adds	r5, r4, #4
    625e:	4628      	mov	r0, r5
    6260:	4b16      	ldr	r3, [pc, #88]	; (62bc <xTaskRemoveFromEventList+0x7c>)
    6262:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    6264:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6266:	4b16      	ldr	r3, [pc, #88]	; (62c0 <xTaskRemoveFromEventList+0x80>)
    6268:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    626c:	4298      	cmp	r0, r3
    626e:	bf84      	itt	hi
    6270:	4b13      	ldrhi	r3, [pc, #76]	; (62c0 <xTaskRemoveFromEventList+0x80>)
    6272:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    6276:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    627a:	4629      	mov	r1, r5
    627c:	4b11      	ldr	r3, [pc, #68]	; (62c4 <xTaskRemoveFromEventList+0x84>)
    627e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6282:	4b11      	ldr	r3, [pc, #68]	; (62c8 <xTaskRemoveFromEventList+0x88>)
    6284:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    6286:	4b0e      	ldr	r3, [pc, #56]	; (62c0 <xTaskRemoveFromEventList+0x80>)
    6288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    628c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6290:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    6292:	bf83      	ittte	hi
    6294:	2001      	movhi	r0, #1
    6296:	4b0a      	ldrhi	r3, [pc, #40]	; (62c0 <xTaskRemoveFromEventList+0x80>)
    6298:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    629c:	2000      	movls	r0, #0
}
    629e:	bd38      	pop	{r3, r4, r5, pc}
    62a0:	f04f 0380 	mov.w	r3, #128	; 0x80
    62a4:	f383 8811 	msr	BASEPRI, r3
    62a8:	f3bf 8f6f 	isb	sy
    62ac:	f3bf 8f4f 	dsb	sy
    62b0:	e7fe      	b.n	62b0 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    62b2:	4629      	mov	r1, r5
    62b4:	4805      	ldr	r0, [pc, #20]	; (62cc <xTaskRemoveFromEventList+0x8c>)
    62b6:	4b04      	ldr	r3, [pc, #16]	; (62c8 <xTaskRemoveFromEventList+0x88>)
    62b8:	4798      	blx	r3
    62ba:	e7e4      	b.n	6286 <xTaskRemoveFromEventList+0x46>
    62bc:	00004c6d 	.word	0x00004c6d
    62c0:	20003430 	.word	0x20003430
    62c4:	20003458 	.word	0x20003458
    62c8:	00004c21 	.word	0x00004c21
    62cc:	20003444 	.word	0x20003444

000062d0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    62d0:	4b03      	ldr	r3, [pc, #12]	; (62e0 <vTaskInternalSetTimeOutState+0x10>)
    62d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    62d6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    62d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    62dc:	6043      	str	r3, [r0, #4]
    62de:	4770      	bx	lr
    62e0:	20003430 	.word	0x20003430

000062e4 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    62e4:	b1f8      	cbz	r0, 6326 <xTaskCheckForTimeOut+0x42>
{
    62e6:	b570      	push	{r4, r5, r6, lr}
    62e8:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    62ea:	b329      	cbz	r1, 6338 <xTaskCheckForTimeOut+0x54>
    62ec:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    62ee:	4b1c      	ldr	r3, [pc, #112]	; (6360 <xTaskCheckForTimeOut+0x7c>)
    62f0:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    62f2:	4b1c      	ldr	r3, [pc, #112]	; (6364 <xTaskCheckForTimeOut+0x80>)
    62f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    62f8:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    62fa:	6823      	ldr	r3, [r4, #0]
    62fc:	f1b3 3fff 	cmp.w	r3, #4294967295
    6300:	d02a      	beq.n	6358 <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    6302:	4818      	ldr	r0, [pc, #96]	; (6364 <xTaskCheckForTimeOut+0x80>)
    6304:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    6308:	682e      	ldr	r6, [r5, #0]
    630a:	4286      	cmp	r6, r0
    630c:	d001      	beq.n	6312 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    630e:	428a      	cmp	r2, r1
    6310:	d224      	bcs.n	635c <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    6312:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    6314:	429a      	cmp	r2, r3
    6316:	d318      	bcc.n	634a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    6318:	2300      	movs	r3, #0
    631a:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    631c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    631e:	4b12      	ldr	r3, [pc, #72]	; (6368 <xTaskCheckForTimeOut+0x84>)
    6320:	4798      	blx	r3
}
    6322:	4620      	mov	r0, r4
    6324:	bd70      	pop	{r4, r5, r6, pc}
    6326:	f04f 0380 	mov.w	r3, #128	; 0x80
    632a:	f383 8811 	msr	BASEPRI, r3
    632e:	f3bf 8f6f 	isb	sy
    6332:	f3bf 8f4f 	dsb	sy
    6336:	e7fe      	b.n	6336 <xTaskCheckForTimeOut+0x52>
    6338:	f04f 0380 	mov.w	r3, #128	; 0x80
    633c:	f383 8811 	msr	BASEPRI, r3
    6340:	f3bf 8f6f 	isb	sy
    6344:	f3bf 8f4f 	dsb	sy
    6348:	e7fe      	b.n	6348 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    634a:	1a9b      	subs	r3, r3, r2
    634c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    634e:	4628      	mov	r0, r5
    6350:	4b06      	ldr	r3, [pc, #24]	; (636c <xTaskCheckForTimeOut+0x88>)
    6352:	4798      	blx	r3
			xReturn = pdFALSE;
    6354:	2400      	movs	r4, #0
    6356:	e7e2      	b.n	631e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    6358:	2400      	movs	r4, #0
    635a:	e7e0      	b.n	631e <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    635c:	2401      	movs	r4, #1
    635e:	e7de      	b.n	631e <xTaskCheckForTimeOut+0x3a>
    6360:	00004d65 	.word	0x00004d65
    6364:	20003430 	.word	0x20003430
    6368:	00004da9 	.word	0x00004da9
    636c:	000062d1 	.word	0x000062d1

00006370 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    6370:	2201      	movs	r2, #1
    6372:	4b02      	ldr	r3, [pc, #8]	; (637c <vTaskMissedYield+0xc>)
    6374:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    6378:	4770      	bx	lr
    637a:	bf00      	nop
    637c:	20003430 	.word	0x20003430

00006380 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    6380:	4b06      	ldr	r3, [pc, #24]	; (639c <xTaskGetSchedulerState+0x1c>)
    6382:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    6386:	b13b      	cbz	r3, 6398 <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    6388:	4b04      	ldr	r3, [pc, #16]	; (639c <xTaskGetSchedulerState+0x1c>)
    638a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    638e:	2b00      	cmp	r3, #0
    6390:	bf0c      	ite	eq
    6392:	2002      	moveq	r0, #2
    6394:	2000      	movne	r0, #0
    6396:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    6398:	2001      	movs	r0, #1
}
    639a:	4770      	bx	lr
    639c:	20003430 	.word	0x20003430

000063a0 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    63a0:	2800      	cmp	r0, #0
    63a2:	d045      	beq.n	6430 <xTaskPriorityInherit+0x90>
{
    63a4:	b538      	push	{r3, r4, r5, lr}
    63a6:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    63a8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    63aa:	4922      	ldr	r1, [pc, #136]	; (6434 <xTaskPriorityInherit+0x94>)
    63ac:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    63b0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    63b2:	428a      	cmp	r2, r1
    63b4:	d232      	bcs.n	641c <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    63b6:	6981      	ldr	r1, [r0, #24]
    63b8:	2900      	cmp	r1, #0
    63ba:	db06      	blt.n	63ca <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    63bc:	491d      	ldr	r1, [pc, #116]	; (6434 <xTaskPriorityInherit+0x94>)
    63be:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    63c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    63c4:	f1c1 0105 	rsb	r1, r1, #5
    63c8:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    63ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    63ce:	491a      	ldr	r1, [pc, #104]	; (6438 <xTaskPriorityInherit+0x98>)
    63d0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    63d4:	6969      	ldr	r1, [r5, #20]
    63d6:	4291      	cmp	r1, r2
    63d8:	d006      	beq.n	63e8 <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    63da:	4a16      	ldr	r2, [pc, #88]	; (6434 <xTaskPriorityInherit+0x94>)
    63dc:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    63e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    63e2:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    63e4:	2001      	movs	r0, #1
    63e6:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    63e8:	1d2c      	adds	r4, r5, #4
    63ea:	4620      	mov	r0, r4
    63ec:	4b13      	ldr	r3, [pc, #76]	; (643c <xTaskPriorityInherit+0x9c>)
    63ee:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    63f0:	4b10      	ldr	r3, [pc, #64]	; (6434 <xTaskPriorityInherit+0x94>)
    63f2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    63f6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    63f8:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    63fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    63fe:	4298      	cmp	r0, r3
    6400:	bf84      	itt	hi
    6402:	4b0c      	ldrhi	r3, [pc, #48]	; (6434 <xTaskPriorityInherit+0x94>)
    6404:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    6408:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    640c:	4621      	mov	r1, r4
    640e:	4b0a      	ldr	r3, [pc, #40]	; (6438 <xTaskPriorityInherit+0x98>)
    6410:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6414:	4b0a      	ldr	r3, [pc, #40]	; (6440 <xTaskPriorityInherit+0xa0>)
    6416:	4798      	blx	r3
			xReturn = pdTRUE;
    6418:	2001      	movs	r0, #1
    641a:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    641c:	4a05      	ldr	r2, [pc, #20]	; (6434 <xTaskPriorityInherit+0x94>)
    641e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    6422:	6c40      	ldr	r0, [r0, #68]	; 0x44
    6424:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6426:	4298      	cmp	r0, r3
    6428:	bf2c      	ite	cs
    642a:	2000      	movcs	r0, #0
    642c:	2001      	movcc	r0, #1
    642e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    6430:	2000      	movs	r0, #0
	return xReturn;
    6432:	4770      	bx	lr
    6434:	20003430 	.word	0x20003430
    6438:	20003458 	.word	0x20003458
    643c:	00004c6d 	.word	0x00004c6d
    6440:	00004c21 	.word	0x00004c21

00006444 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    6444:	2800      	cmp	r0, #0
    6446:	d03c      	beq.n	64c2 <xTaskPriorityDisinherit+0x7e>
{
    6448:	b538      	push	{r3, r4, r5, lr}
    644a:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    644c:	4a20      	ldr	r2, [pc, #128]	; (64d0 <xTaskPriorityDisinherit+0x8c>)
    644e:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    6452:	4290      	cmp	r0, r2
    6454:	d008      	beq.n	6468 <xTaskPriorityDisinherit+0x24>
    6456:	f04f 0380 	mov.w	r3, #128	; 0x80
    645a:	f383 8811 	msr	BASEPRI, r3
    645e:	f3bf 8f6f 	isb	sy
    6462:	f3bf 8f4f 	dsb	sy
    6466:	e7fe      	b.n	6466 <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    6468:	6c82      	ldr	r2, [r0, #72]	; 0x48
    646a:	b942      	cbnz	r2, 647e <xTaskPriorityDisinherit+0x3a>
    646c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6470:	f383 8811 	msr	BASEPRI, r3
    6474:	f3bf 8f6f 	isb	sy
    6478:	f3bf 8f4f 	dsb	sy
    647c:	e7fe      	b.n	647c <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    647e:	3a01      	subs	r2, #1
    6480:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    6482:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    6484:	6c61      	ldr	r1, [r4, #68]	; 0x44
    6486:	4288      	cmp	r0, r1
    6488:	d01d      	beq.n	64c6 <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    648a:	b9f2      	cbnz	r2, 64ca <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    648c:	1d25      	adds	r5, r4, #4
    648e:	4628      	mov	r0, r5
    6490:	4b10      	ldr	r3, [pc, #64]	; (64d4 <xTaskPriorityDisinherit+0x90>)
    6492:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    6494:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6496:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    6498:	f1c0 0305 	rsb	r3, r0, #5
    649c:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    649e:	4b0c      	ldr	r3, [pc, #48]	; (64d0 <xTaskPriorityDisinherit+0x8c>)
    64a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    64a4:	4298      	cmp	r0, r3
    64a6:	bf84      	itt	hi
    64a8:	4b09      	ldrhi	r3, [pc, #36]	; (64d0 <xTaskPriorityDisinherit+0x8c>)
    64aa:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    64ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    64b2:	4629      	mov	r1, r5
    64b4:	4b08      	ldr	r3, [pc, #32]	; (64d8 <xTaskPriorityDisinherit+0x94>)
    64b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    64ba:	4b08      	ldr	r3, [pc, #32]	; (64dc <xTaskPriorityDisinherit+0x98>)
    64bc:	4798      	blx	r3
				xReturn = pdTRUE;
    64be:	2001      	movs	r0, #1
    64c0:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    64c2:	2000      	movs	r0, #0
    64c4:	4770      	bx	lr
    64c6:	2000      	movs	r0, #0
    64c8:	bd38      	pop	{r3, r4, r5, pc}
    64ca:	2000      	movs	r0, #0
}
    64cc:	bd38      	pop	{r3, r4, r5, pc}
    64ce:	bf00      	nop
    64d0:	20003430 	.word	0x20003430
    64d4:	00004c6d 	.word	0x00004c6d
    64d8:	20003458 	.word	0x20003458
    64dc:	00004c21 	.word	0x00004c21

000064e0 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    64e0:	2800      	cmp	r0, #0
    64e2:	d049      	beq.n	6578 <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    64e4:	b538      	push	{r3, r4, r5, lr}
    64e6:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    64e8:	6c80      	ldr	r0, [r0, #72]	; 0x48
    64ea:	b940      	cbnz	r0, 64fe <vTaskPriorityDisinheritAfterTimeout+0x1e>
    64ec:	f04f 0380 	mov.w	r3, #128	; 0x80
    64f0:	f383 8811 	msr	BASEPRI, r3
    64f4:	f3bf 8f6f 	isb	sy
    64f8:	f3bf 8f4f 	dsb	sy
    64fc:	e7fe      	b.n	64fc <vTaskPriorityDisinheritAfterTimeout+0x1c>
    64fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6500:	428a      	cmp	r2, r1
    6502:	bf38      	it	cc
    6504:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    6506:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    6508:	4291      	cmp	r1, r2
    650a:	d001      	beq.n	6510 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    650c:	2801      	cmp	r0, #1
    650e:	d000      	beq.n	6512 <vTaskPriorityDisinheritAfterTimeout+0x32>
    6510:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    6512:	481a      	ldr	r0, [pc, #104]	; (657c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    6514:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    6518:	4284      	cmp	r4, r0
    651a:	d108      	bne.n	652e <vTaskPriorityDisinheritAfterTimeout+0x4e>
    651c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6520:	f383 8811 	msr	BASEPRI, r3
    6524:	f3bf 8f6f 	isb	sy
    6528:	f3bf 8f4f 	dsb	sy
    652c:	e7fe      	b.n	652c <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    652e:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    6530:	69a0      	ldr	r0, [r4, #24]
    6532:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    6534:	bfa4      	itt	ge
    6536:	f1c2 0205 	rsbge	r2, r2, #5
    653a:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    653c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    6540:	4a0f      	ldr	r2, [pc, #60]	; (6580 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    6542:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    6546:	6962      	ldr	r2, [r4, #20]
    6548:	428a      	cmp	r2, r1
    654a:	d1e1      	bne.n	6510 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    654c:	1d25      	adds	r5, r4, #4
    654e:	4628      	mov	r0, r5
    6550:	4b0c      	ldr	r3, [pc, #48]	; (6584 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    6552:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    6554:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6556:	4b09      	ldr	r3, [pc, #36]	; (657c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    6558:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    655c:	4298      	cmp	r0, r3
    655e:	bf84      	itt	hi
    6560:	4b06      	ldrhi	r3, [pc, #24]	; (657c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    6562:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    6566:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    656a:	4629      	mov	r1, r5
    656c:	4b04      	ldr	r3, [pc, #16]	; (6580 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    656e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6572:	4b05      	ldr	r3, [pc, #20]	; (6588 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    6574:	4798      	blx	r3
}
    6576:	e7cb      	b.n	6510 <vTaskPriorityDisinheritAfterTimeout+0x30>
    6578:	4770      	bx	lr
    657a:	bf00      	nop
    657c:	20003430 	.word	0x20003430
    6580:	20003458 	.word	0x20003458
    6584:	00004c6d 	.word	0x00004c6d
    6588:	00004c21 	.word	0x00004c21

0000658c <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    658c:	4b06      	ldr	r3, [pc, #24]	; (65a8 <pvTaskIncrementMutexHeldCount+0x1c>)
    658e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6592:	b12b      	cbz	r3, 65a0 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    6594:	4b04      	ldr	r3, [pc, #16]	; (65a8 <pvTaskIncrementMutexHeldCount+0x1c>)
    6596:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    659a:	6c93      	ldr	r3, [r2, #72]	; 0x48
    659c:	3301      	adds	r3, #1
    659e:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    65a0:	4b01      	ldr	r3, [pc, #4]	; (65a8 <pvTaskIncrementMutexHeldCount+0x1c>)
    65a2:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    65a6:	4770      	bx	lr
    65a8:	20003430 	.word	0x20003430

000065ac <xTaskNotifyWait>:
{
    65ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65ae:	4607      	mov	r7, r0
    65b0:	460d      	mov	r5, r1
    65b2:	4614      	mov	r4, r2
    65b4:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    65b6:	4b25      	ldr	r3, [pc, #148]	; (664c <xTaskNotifyWait+0xa0>)
    65b8:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    65ba:	4b25      	ldr	r3, [pc, #148]	; (6650 <xTaskNotifyWait+0xa4>)
    65bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    65c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    65c4:	b2db      	uxtb	r3, r3
    65c6:	2b02      	cmp	r3, #2
    65c8:	d00c      	beq.n	65e4 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    65ca:	4b21      	ldr	r3, [pc, #132]	; (6650 <xTaskNotifyWait+0xa4>)
    65cc:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    65d0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    65d2:	ea20 0007 	bic.w	r0, r0, r7
    65d6:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    65d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    65dc:	2201      	movs	r2, #1
    65de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    65e2:	b9e6      	cbnz	r6, 661e <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    65e4:	4b1b      	ldr	r3, [pc, #108]	; (6654 <xTaskNotifyWait+0xa8>)
    65e6:	4798      	blx	r3
	taskENTER_CRITICAL();
    65e8:	4b18      	ldr	r3, [pc, #96]	; (664c <xTaskNotifyWait+0xa0>)
    65ea:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    65ec:	b124      	cbz	r4, 65f8 <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    65ee:	4b18      	ldr	r3, [pc, #96]	; (6650 <xTaskNotifyWait+0xa4>)
    65f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    65f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    65f6:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    65f8:	4b15      	ldr	r3, [pc, #84]	; (6650 <xTaskNotifyWait+0xa4>)
    65fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    65fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    6602:	b2db      	uxtb	r3, r3
    6604:	2b02      	cmp	r3, #2
    6606:	d017      	beq.n	6638 <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    6608:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    660a:	4b11      	ldr	r3, [pc, #68]	; (6650 <xTaskNotifyWait+0xa4>)
    660c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6610:	2200      	movs	r2, #0
    6612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    6616:	4b0f      	ldr	r3, [pc, #60]	; (6654 <xTaskNotifyWait+0xa8>)
    6618:	4798      	blx	r3
}
    661a:	4620      	mov	r0, r4
    661c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    661e:	4611      	mov	r1, r2
    6620:	4630      	mov	r0, r6
    6622:	4b0d      	ldr	r3, [pc, #52]	; (6658 <xTaskNotifyWait+0xac>)
    6624:	4798      	blx	r3
				portYIELD_WITHIN_API();
    6626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    662a:	4b0c      	ldr	r3, [pc, #48]	; (665c <xTaskNotifyWait+0xb0>)
    662c:	601a      	str	r2, [r3, #0]
    662e:	f3bf 8f4f 	dsb	sy
    6632:	f3bf 8f6f 	isb	sy
    6636:	e7d5      	b.n	65e4 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    6638:	4b05      	ldr	r3, [pc, #20]	; (6650 <xTaskNotifyWait+0xa4>)
    663a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    663e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    6640:	ea23 0505 	bic.w	r5, r3, r5
    6644:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    6646:	2401      	movs	r4, #1
    6648:	e7df      	b.n	660a <xTaskNotifyWait+0x5e>
    664a:	bf00      	nop
    664c:	00004d65 	.word	0x00004d65
    6650:	20003430 	.word	0x20003430
    6654:	00004da9 	.word	0x00004da9
    6658:	00005b75 	.word	0x00005b75
    665c:	e000ed04 	.word	0xe000ed04

00006660 <xTaskGenericNotifyFromISR>:
{
    6660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6664:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    6666:	b310      	cbz	r0, 66ae <xTaskGenericNotifyFromISR+0x4e>
    6668:	4604      	mov	r4, r0
    666a:	4699      	mov	r9, r3
    666c:	4617      	mov	r7, r2
    666e:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    6670:	4b3e      	ldr	r3, [pc, #248]	; (676c <xTaskGenericNotifyFromISR+0x10c>)
    6672:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    6674:	f3ef 8511 	mrs	r5, BASEPRI
    6678:	f04f 0380 	mov.w	r3, #128	; 0x80
    667c:	f383 8811 	msr	BASEPRI, r3
    6680:	f3bf 8f6f 	isb	sy
    6684:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    6688:	f1b9 0f00 	cmp.w	r9, #0
    668c:	d002      	beq.n	6694 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    668e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6690:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    6694:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    6698:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    669a:	2202      	movs	r2, #2
    669c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    66a0:	1e7a      	subs	r2, r7, #1
    66a2:	2a03      	cmp	r2, #3
    66a4:	d810      	bhi.n	66c8 <xTaskGenericNotifyFromISR+0x68>
    66a6:	e8df f002 	tbb	[pc, r2]
    66aa:	1c0b      	.short	0x1c0b
    66ac:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    66ae:	f04f 0380 	mov.w	r3, #128	; 0x80
    66b2:	f383 8811 	msr	BASEPRI, r3
    66b6:	f3bf 8f6f 	isb	sy
    66ba:	f3bf 8f4f 	dsb	sy
    66be:	e7fe      	b.n	66be <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    66c0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    66c2:	ea42 0208 	orr.w	r2, r2, r8
    66c6:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    66c8:	2b01      	cmp	r3, #1
    66ca:	d147      	bne.n	675c <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    66cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    66ce:	b1a3      	cbz	r3, 66fa <xTaskGenericNotifyFromISR+0x9a>
    66d0:	f04f 0380 	mov.w	r3, #128	; 0x80
    66d4:	f383 8811 	msr	BASEPRI, r3
    66d8:	f3bf 8f6f 	isb	sy
    66dc:	f3bf 8f4f 	dsb	sy
    66e0:	e7fe      	b.n	66e0 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    66e2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    66e4:	3201      	adds	r2, #1
    66e6:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    66e8:	e7ee      	b.n	66c8 <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    66ea:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    66ee:	e7eb      	b.n	66c8 <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    66f0:	2b02      	cmp	r3, #2
    66f2:	d031      	beq.n	6758 <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    66f4:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    66f8:	e7e6      	b.n	66c8 <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    66fa:	4b1d      	ldr	r3, [pc, #116]	; (6770 <xTaskGenericNotifyFromISR+0x110>)
    66fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    6700:	b9fb      	cbnz	r3, 6742 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    6702:	1d27      	adds	r7, r4, #4
    6704:	4638      	mov	r0, r7
    6706:	4b1b      	ldr	r3, [pc, #108]	; (6774 <xTaskGenericNotifyFromISR+0x114>)
    6708:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    670a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    670c:	4b18      	ldr	r3, [pc, #96]	; (6770 <xTaskGenericNotifyFromISR+0x110>)
    670e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6712:	4298      	cmp	r0, r3
    6714:	bf84      	itt	hi
    6716:	4b16      	ldrhi	r3, [pc, #88]	; (6770 <xTaskGenericNotifyFromISR+0x110>)
    6718:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    671c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6720:	4639      	mov	r1, r7
    6722:	4b15      	ldr	r3, [pc, #84]	; (6778 <xTaskGenericNotifyFromISR+0x118>)
    6724:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6728:	4b14      	ldr	r3, [pc, #80]	; (677c <xTaskGenericNotifyFromISR+0x11c>)
    672a:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    672c:	4b10      	ldr	r3, [pc, #64]	; (6770 <xTaskGenericNotifyFromISR+0x110>)
    672e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6732:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6736:	429a      	cmp	r2, r3
    6738:	d915      	bls.n	6766 <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    673a:	b146      	cbz	r6, 674e <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    673c:	2001      	movs	r0, #1
    673e:	6030      	str	r0, [r6, #0]
    6740:	e00d      	b.n	675e <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    6742:	f104 0118 	add.w	r1, r4, #24
    6746:	480e      	ldr	r0, [pc, #56]	; (6780 <xTaskGenericNotifyFromISR+0x120>)
    6748:	4b0c      	ldr	r3, [pc, #48]	; (677c <xTaskGenericNotifyFromISR+0x11c>)
    674a:	4798      	blx	r3
    674c:	e7ee      	b.n	672c <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    674e:	2001      	movs	r0, #1
    6750:	4b07      	ldr	r3, [pc, #28]	; (6770 <xTaskGenericNotifyFromISR+0x110>)
    6752:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    6756:	e002      	b.n	675e <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    6758:	2000      	movs	r0, #0
    675a:	e000      	b.n	675e <xTaskGenericNotifyFromISR+0xfe>
    675c:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    675e:	f385 8811 	msr	BASEPRI, r5
}
    6762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6766:	2001      	movs	r0, #1
    6768:	e7f9      	b.n	675e <xTaskGenericNotifyFromISR+0xfe>
    676a:	bf00      	nop
    676c:	00004fbd 	.word	0x00004fbd
    6770:	20003430 	.word	0x20003430
    6774:	00004c6d 	.word	0x00004c6d
    6778:	20003458 	.word	0x20003458
    677c:	00004c21 	.word	0x00004c21
    6780:	20003444 	.word	0x20003444

00006784 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    6784:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    6786:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    6788:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    678a:	4291      	cmp	r1, r2
    678c:	d80c      	bhi.n	67a8 <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    678e:	1ad2      	subs	r2, r2, r3
    6790:	6983      	ldr	r3, [r0, #24]
    6792:	429a      	cmp	r2, r3
    6794:	d301      	bcc.n	679a <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    6796:	2001      	movs	r0, #1
    6798:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    679a:	1d01      	adds	r1, r0, #4
    679c:	4b09      	ldr	r3, [pc, #36]	; (67c4 <prvInsertTimerInActiveList+0x40>)
    679e:	6818      	ldr	r0, [r3, #0]
    67a0:	4b09      	ldr	r3, [pc, #36]	; (67c8 <prvInsertTimerInActiveList+0x44>)
    67a2:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    67a4:	2000      	movs	r0, #0
    67a6:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    67a8:	429a      	cmp	r2, r3
    67aa:	d201      	bcs.n	67b0 <prvInsertTimerInActiveList+0x2c>
    67ac:	4299      	cmp	r1, r3
    67ae:	d206      	bcs.n	67be <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    67b0:	1d01      	adds	r1, r0, #4
    67b2:	4b04      	ldr	r3, [pc, #16]	; (67c4 <prvInsertTimerInActiveList+0x40>)
    67b4:	6858      	ldr	r0, [r3, #4]
    67b6:	4b04      	ldr	r3, [pc, #16]	; (67c8 <prvInsertTimerInActiveList+0x44>)
    67b8:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    67ba:	2000      	movs	r0, #0
    67bc:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    67be:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    67c0:	bd08      	pop	{r3, pc}
    67c2:	bf00      	nop
    67c4:	2000351c 	.word	0x2000351c
    67c8:	00004c39 	.word	0x00004c39

000067cc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    67cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    67ce:	4b0d      	ldr	r3, [pc, #52]	; (6804 <prvCheckForValidListAndQueue+0x38>)
    67d0:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    67d2:	4b0d      	ldr	r3, [pc, #52]	; (6808 <prvCheckForValidListAndQueue+0x3c>)
    67d4:	689b      	ldr	r3, [r3, #8]
    67d6:	b113      	cbz	r3, 67de <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    67d8:	4b0c      	ldr	r3, [pc, #48]	; (680c <prvCheckForValidListAndQueue+0x40>)
    67da:	4798      	blx	r3
    67dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    67de:	4c0a      	ldr	r4, [pc, #40]	; (6808 <prvCheckForValidListAndQueue+0x3c>)
    67e0:	f104 060c 	add.w	r6, r4, #12
    67e4:	4630      	mov	r0, r6
    67e6:	4f0a      	ldr	r7, [pc, #40]	; (6810 <prvCheckForValidListAndQueue+0x44>)
    67e8:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    67ea:	f104 0520 	add.w	r5, r4, #32
    67ee:	4628      	mov	r0, r5
    67f0:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    67f2:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    67f4:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    67f6:	2200      	movs	r2, #0
    67f8:	210c      	movs	r1, #12
    67fa:	2014      	movs	r0, #20
    67fc:	4b05      	ldr	r3, [pc, #20]	; (6814 <prvCheckForValidListAndQueue+0x48>)
    67fe:	4798      	blx	r3
    6800:	60a0      	str	r0, [r4, #8]
    6802:	e7e9      	b.n	67d8 <prvCheckForValidListAndQueue+0xc>
    6804:	00004d65 	.word	0x00004d65
    6808:	2000351c 	.word	0x2000351c
    680c:	00004da9 	.word	0x00004da9
    6810:	00004c05 	.word	0x00004c05
    6814:	000053c5 	.word	0x000053c5

00006818 <xTimerCreateTimerTask>:
{
    6818:	b510      	push	{r4, lr}
    681a:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    681c:	4b0d      	ldr	r3, [pc, #52]	; (6854 <xTimerCreateTimerTask+0x3c>)
    681e:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    6820:	4b0d      	ldr	r3, [pc, #52]	; (6858 <xTimerCreateTimerTask+0x40>)
    6822:	689b      	ldr	r3, [r3, #8]
    6824:	b163      	cbz	r3, 6840 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    6826:	4b0d      	ldr	r3, [pc, #52]	; (685c <xTimerCreateTimerTask+0x44>)
    6828:	9301      	str	r3, [sp, #4]
    682a:	2303      	movs	r3, #3
    682c:	9300      	str	r3, [sp, #0]
    682e:	2300      	movs	r3, #0
    6830:	2280      	movs	r2, #128	; 0x80
    6832:	490b      	ldr	r1, [pc, #44]	; (6860 <xTimerCreateTimerTask+0x48>)
    6834:	480b      	ldr	r0, [pc, #44]	; (6864 <xTimerCreateTimerTask+0x4c>)
    6836:	4c0c      	ldr	r4, [pc, #48]	; (6868 <xTimerCreateTimerTask+0x50>)
    6838:	47a0      	blx	r4
	configASSERT(xReturn);
    683a:	b108      	cbz	r0, 6840 <xTimerCreateTimerTask+0x28>
}
    683c:	b002      	add	sp, #8
    683e:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    6840:	f04f 0380 	mov.w	r3, #128	; 0x80
    6844:	f383 8811 	msr	BASEPRI, r3
    6848:	f3bf 8f6f 	isb	sy
    684c:	f3bf 8f4f 	dsb	sy
    6850:	e7fe      	b.n	6850 <xTimerCreateTimerTask+0x38>
    6852:	bf00      	nop
    6854:	000067cd 	.word	0x000067cd
    6858:	2000351c 	.word	0x2000351c
    685c:	20003550 	.word	0x20003550
    6860:	00009754 	.word	0x00009754
    6864:	000069d9 	.word	0x000069d9
    6868:	00005bf5 	.word	0x00005bf5

0000686c <xTimerCreate>:
{
    686c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6870:	4680      	mov	r8, r0
    6872:	460d      	mov	r5, r1
    6874:	4617      	mov	r7, r2
    6876:	461e      	mov	r6, r3
	pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t));
    6878:	202c      	movs	r0, #44	; 0x2c
    687a:	4b0e      	ldr	r3, [pc, #56]	; (68b4 <xTimerCreate+0x48>)
    687c:	4798      	blx	r3
	if (pxNewTimer != NULL) {
    687e:	4604      	mov	r4, r0
    6880:	b1a8      	cbz	r0, 68ae <xTimerCreate+0x42>
	configASSERT((xTimerPeriodInTicks > 0));
    6882:	b945      	cbnz	r5, 6896 <xTimerCreate+0x2a>
    6884:	f04f 0380 	mov.w	r3, #128	; 0x80
    6888:	f383 8811 	msr	BASEPRI, r3
    688c:	f3bf 8f6f 	isb	sy
    6890:	f3bf 8f4f 	dsb	sy
    6894:	e7fe      	b.n	6894 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
    6896:	4b08      	ldr	r3, [pc, #32]	; (68b8 <xTimerCreate+0x4c>)
    6898:	4798      	blx	r3
		pxNewTimer->pcTimerName         = pcTimerName;
    689a:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    689e:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload        = uxAutoReload;
    68a0:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID           = pvTimerID;
    68a2:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction  = pxCallbackFunction;
    68a4:	9b06      	ldr	r3, [sp, #24]
    68a6:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem(&(pxNewTimer->xTimerListItem));
    68a8:	1d20      	adds	r0, r4, #4
    68aa:	4b04      	ldr	r3, [pc, #16]	; (68bc <xTimerCreate+0x50>)
    68ac:	4798      	blx	r3
}
    68ae:	4620      	mov	r0, r4
    68b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68b4:	00005015 	.word	0x00005015
    68b8:	000067cd 	.word	0x000067cd
    68bc:	00004c1b 	.word	0x00004c1b

000068c0 <xTimerGenericCommand>:
	configASSERT(xTimer);
    68c0:	b1d8      	cbz	r0, 68fa <xTimerGenericCommand+0x3a>
{
    68c2:	b530      	push	{r4, r5, lr}
    68c4:	b085      	sub	sp, #20
    68c6:	4615      	mov	r5, r2
    68c8:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    68ca:	4a14      	ldr	r2, [pc, #80]	; (691c <xTimerGenericCommand+0x5c>)
    68cc:	6890      	ldr	r0, [r2, #8]
    68ce:	b310      	cbz	r0, 6916 <xTimerGenericCommand+0x56>
    68d0:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    68d2:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    68d4:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    68d6:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    68d8:	2905      	cmp	r1, #5
    68da:	dc17      	bgt.n	690c <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    68dc:	4b10      	ldr	r3, [pc, #64]	; (6920 <xTimerGenericCommand+0x60>)
    68de:	4798      	blx	r3
    68e0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    68e2:	f04f 0300 	mov.w	r3, #0
    68e6:	bf0c      	ite	eq
    68e8:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    68ea:	461a      	movne	r2, r3
    68ec:	a901      	add	r1, sp, #4
    68ee:	480b      	ldr	r0, [pc, #44]	; (691c <xTimerGenericCommand+0x5c>)
    68f0:	6880      	ldr	r0, [r0, #8]
    68f2:	4c0c      	ldr	r4, [pc, #48]	; (6924 <xTimerGenericCommand+0x64>)
    68f4:	47a0      	blx	r4
}
    68f6:	b005      	add	sp, #20
    68f8:	bd30      	pop	{r4, r5, pc}
    68fa:	f04f 0380 	mov.w	r3, #128	; 0x80
    68fe:	f383 8811 	msr	BASEPRI, r3
    6902:	f3bf 8f6f 	isb	sy
    6906:	f3bf 8f4f 	dsb	sy
    690a:	e7fe      	b.n	690a <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    690c:	2300      	movs	r3, #0
    690e:	a901      	add	r1, sp, #4
    6910:	4c05      	ldr	r4, [pc, #20]	; (6928 <xTimerGenericCommand+0x68>)
    6912:	47a0      	blx	r4
    6914:	e7ef      	b.n	68f6 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    6916:	2000      	movs	r0, #0
	return xReturn;
    6918:	e7ed      	b.n	68f6 <xTimerGenericCommand+0x36>
    691a:	bf00      	nop
    691c:	2000351c 	.word	0x2000351c
    6920:	00006381 	.word	0x00006381
    6924:	0000541d 	.word	0x0000541d
    6928:	00005625 	.word	0x00005625

0000692c <prvSampleTimeNow>:
{
    692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6930:	b082      	sub	sp, #8
    6932:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    6934:	4b23      	ldr	r3, [pc, #140]	; (69c4 <prvSampleTimeNow+0x98>)
    6936:	4798      	blx	r3
    6938:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    693a:	4b23      	ldr	r3, [pc, #140]	; (69c8 <prvSampleTimeNow+0x9c>)
    693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    693e:	4298      	cmp	r0, r3
    6940:	d319      	bcc.n	6976 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    6942:	2300      	movs	r3, #0
    6944:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    6948:	4b1f      	ldr	r3, [pc, #124]	; (69c8 <prvSampleTimeNow+0x9c>)
    694a:	639f      	str	r7, [r3, #56]	; 0x38
}
    694c:	4638      	mov	r0, r7
    694e:	b002      	add	sp, #8
    6950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6954:	2100      	movs	r1, #0
    6956:	9100      	str	r1, [sp, #0]
    6958:	460b      	mov	r3, r1
    695a:	4652      	mov	r2, sl
    695c:	4620      	mov	r0, r4
    695e:	4c1b      	ldr	r4, [pc, #108]	; (69cc <prvSampleTimeNow+0xa0>)
    6960:	47a0      	blx	r4
				configASSERT(xResult);
    6962:	b950      	cbnz	r0, 697a <prvSampleTimeNow+0x4e>
    6964:	f04f 0380 	mov.w	r3, #128	; 0x80
    6968:	f383 8811 	msr	BASEPRI, r3
    696c:	f3bf 8f6f 	isb	sy
    6970:	f3bf 8f4f 	dsb	sy
    6974:	e7fe      	b.n	6974 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    6976:	4d14      	ldr	r5, [pc, #80]	; (69c8 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6978:	4e15      	ldr	r6, [pc, #84]	; (69d0 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    697a:	686b      	ldr	r3, [r5, #4]
    697c:	681a      	ldr	r2, [r3, #0]
    697e:	b1c2      	cbz	r2, 69b2 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6980:	68db      	ldr	r3, [r3, #12]
    6982:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6986:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6988:	f104 0904 	add.w	r9, r4, #4
    698c:	4648      	mov	r0, r9
    698e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6990:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6992:	4620      	mov	r0, r4
    6994:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6996:	69e3      	ldr	r3, [r4, #28]
    6998:	2b01      	cmp	r3, #1
    699a:	d1ee      	bne.n	697a <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    699c:	69a3      	ldr	r3, [r4, #24]
    699e:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    69a0:	459a      	cmp	sl, r3
    69a2:	d2d7      	bcs.n	6954 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    69a4:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    69a6:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    69a8:	4649      	mov	r1, r9
    69aa:	6868      	ldr	r0, [r5, #4]
    69ac:	4b09      	ldr	r3, [pc, #36]	; (69d4 <prvSampleTimeNow+0xa8>)
    69ae:	4798      	blx	r3
    69b0:	e7e3      	b.n	697a <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    69b2:	4a05      	ldr	r2, [pc, #20]	; (69c8 <prvSampleTimeNow+0x9c>)
    69b4:	6811      	ldr	r1, [r2, #0]
    69b6:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    69b8:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    69ba:	2301      	movs	r3, #1
    69bc:	f8c8 3000 	str.w	r3, [r8]
    69c0:	e7c2      	b.n	6948 <prvSampleTimeNow+0x1c>
    69c2:	bf00      	nop
    69c4:	00005e6d 	.word	0x00005e6d
    69c8:	2000351c 	.word	0x2000351c
    69cc:	000068c1 	.word	0x000068c1
    69d0:	00004c6d 	.word	0x00004c6d
    69d4:	00004c39 	.word	0x00004c39

000069d8 <prvTimerTask>:
{
    69d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69dc:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    69de:	4c65      	ldr	r4, [pc, #404]	; (6b74 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    69e0:	4f65      	ldr	r7, [pc, #404]	; (6b78 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    69e2:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 6b98 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    69e6:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 6b9c <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    69ea:	6863      	ldr	r3, [r4, #4]
    69ec:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    69ee:	b172      	cbz	r2, 6a0e <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    69f0:	68db      	ldr	r3, [r3, #12]
    69f2:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    69f4:	4b61      	ldr	r3, [pc, #388]	; (6b7c <prvTimerTask+0x1a4>)
    69f6:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    69f8:	a803      	add	r0, sp, #12
    69fa:	4b61      	ldr	r3, [pc, #388]	; (6b80 <prvTimerTask+0x1a8>)
    69fc:	4798      	blx	r3
    69fe:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    6a00:	9b03      	ldr	r3, [sp, #12]
    6a02:	2b00      	cmp	r3, #0
    6a04:	d179      	bne.n	6afa <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    6a06:	42a8      	cmp	r0, r5
    6a08:	d24a      	bcs.n	6aa0 <prvTimerTask+0xc8>
    6a0a:	2200      	movs	r2, #0
    6a0c:	e00e      	b.n	6a2c <prvTimerTask+0x54>
	vTaskSuspendAll();
    6a0e:	4b5b      	ldr	r3, [pc, #364]	; (6b7c <prvTimerTask+0x1a4>)
    6a10:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6a12:	a803      	add	r0, sp, #12
    6a14:	4b5a      	ldr	r3, [pc, #360]	; (6b80 <prvTimerTask+0x1a8>)
    6a16:	4798      	blx	r3
    6a18:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    6a1a:	9b03      	ldr	r3, [sp, #12]
    6a1c:	2b00      	cmp	r3, #0
    6a1e:	d16c      	bne.n	6afa <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    6a20:	6823      	ldr	r3, [r4, #0]
    6a22:	681a      	ldr	r2, [r3, #0]
    6a24:	fab2 f282 	clz	r2, r2
    6a28:	0952      	lsrs	r2, r2, #5
    6a2a:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    6a2c:	1ba9      	subs	r1, r5, r6
    6a2e:	68a0      	ldr	r0, [r4, #8]
    6a30:	4b54      	ldr	r3, [pc, #336]	; (6b84 <prvTimerTask+0x1ac>)
    6a32:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    6a34:	47b8      	blx	r7
    6a36:	b938      	cbnz	r0, 6a48 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    6a38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6a3c:	f8c9 3000 	str.w	r3, [r9]
    6a40:	f3bf 8f4f 	dsb	sy
    6a44:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    6a48:	4d4f      	ldr	r5, [pc, #316]	; (6b88 <prvTimerTask+0x1b0>)
    6a4a:	2200      	movs	r2, #0
    6a4c:	a903      	add	r1, sp, #12
    6a4e:	68a0      	ldr	r0, [r4, #8]
    6a50:	47a8      	blx	r5
    6a52:	2800      	cmp	r0, #0
    6a54:	d0c9      	beq.n	69ea <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    6a56:	9b03      	ldr	r3, [sp, #12]
    6a58:	2b00      	cmp	r3, #0
    6a5a:	dbf6      	blt.n	6a4a <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6a5c:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    6a5e:	6973      	ldr	r3, [r6, #20]
    6a60:	b10b      	cbz	r3, 6a66 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    6a62:	1d30      	adds	r0, r6, #4
    6a64:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6a66:	a802      	add	r0, sp, #8
    6a68:	4b45      	ldr	r3, [pc, #276]	; (6b80 <prvTimerTask+0x1a8>)
    6a6a:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    6a6c:	9b03      	ldr	r3, [sp, #12]
    6a6e:	2b09      	cmp	r3, #9
    6a70:	d8eb      	bhi.n	6a4a <prvTimerTask+0x72>
    6a72:	a201      	add	r2, pc, #4	; (adr r2, 6a78 <prvTimerTask+0xa0>)
    6a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6a78:	00006aff 	.word	0x00006aff
    6a7c:	00006aff 	.word	0x00006aff
    6a80:	00006aff 	.word	0x00006aff
    6a84:	00006a4b 	.word	0x00006a4b
    6a88:	00006b47 	.word	0x00006b47
    6a8c:	00006b6d 	.word	0x00006b6d
    6a90:	00006aff 	.word	0x00006aff
    6a94:	00006aff 	.word	0x00006aff
    6a98:	00006a4b 	.word	0x00006a4b
    6a9c:	00006b47 	.word	0x00006b47
				(void)xTaskResumeAll();
    6aa0:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6aa2:	6863      	ldr	r3, [r4, #4]
    6aa4:	68db      	ldr	r3, [r3, #12]
    6aa6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    6aaa:	f10a 0004 	add.w	r0, sl, #4
    6aae:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6ab0:	f8da 301c 	ldr.w	r3, [sl, #28]
    6ab4:	2b01      	cmp	r3, #1
    6ab6:	d004      	beq.n	6ac2 <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6ab8:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    6abc:	4650      	mov	r0, sl
    6abe:	4798      	blx	r3
    6ac0:	e7c2      	b.n	6a48 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    6ac2:	f8da 1018 	ldr.w	r1, [sl, #24]
    6ac6:	462b      	mov	r3, r5
    6ac8:	4632      	mov	r2, r6
    6aca:	4429      	add	r1, r5
    6acc:	4650      	mov	r0, sl
    6ace:	4e2f      	ldr	r6, [pc, #188]	; (6b8c <prvTimerTask+0x1b4>)
    6ad0:	47b0      	blx	r6
    6ad2:	2800      	cmp	r0, #0
    6ad4:	d0f0      	beq.n	6ab8 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6ad6:	2100      	movs	r1, #0
    6ad8:	9100      	str	r1, [sp, #0]
    6ada:	460b      	mov	r3, r1
    6adc:	462a      	mov	r2, r5
    6ade:	4650      	mov	r0, sl
    6ae0:	4d2b      	ldr	r5, [pc, #172]	; (6b90 <prvTimerTask+0x1b8>)
    6ae2:	47a8      	blx	r5
			configASSERT(xResult);
    6ae4:	2800      	cmp	r0, #0
    6ae6:	d1e7      	bne.n	6ab8 <prvTimerTask+0xe0>
    6ae8:	f04f 0380 	mov.w	r3, #128	; 0x80
    6aec:	f383 8811 	msr	BASEPRI, r3
    6af0:	f3bf 8f6f 	isb	sy
    6af4:	f3bf 8f4f 	dsb	sy
    6af8:	e7fe      	b.n	6af8 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    6afa:	47b8      	blx	r7
    6afc:	e7a4      	b.n	6a48 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    6afe:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    6b00:	69b1      	ldr	r1, [r6, #24]
    6b02:	462b      	mov	r3, r5
    6b04:	4602      	mov	r2, r0
    6b06:	4429      	add	r1, r5
    6b08:	4630      	mov	r0, r6
    6b0a:	4d20      	ldr	r5, [pc, #128]	; (6b8c <prvTimerTask+0x1b4>)
    6b0c:	47a8      	blx	r5
    6b0e:	2800      	cmp	r0, #0
    6b10:	d09a      	beq.n	6a48 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6b12:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6b14:	4630      	mov	r0, r6
    6b16:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6b18:	69f3      	ldr	r3, [r6, #28]
    6b1a:	2b01      	cmp	r3, #1
    6b1c:	d194      	bne.n	6a48 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    6b1e:	69b2      	ldr	r2, [r6, #24]
    6b20:	2100      	movs	r1, #0
    6b22:	9100      	str	r1, [sp, #0]
    6b24:	460b      	mov	r3, r1
    6b26:	9804      	ldr	r0, [sp, #16]
    6b28:	4402      	add	r2, r0
    6b2a:	4630      	mov	r0, r6
    6b2c:	4d18      	ldr	r5, [pc, #96]	; (6b90 <prvTimerTask+0x1b8>)
    6b2e:	47a8      	blx	r5
						configASSERT(xResult);
    6b30:	2800      	cmp	r0, #0
    6b32:	d189      	bne.n	6a48 <prvTimerTask+0x70>
    6b34:	f04f 0380 	mov.w	r3, #128	; 0x80
    6b38:	f383 8811 	msr	BASEPRI, r3
    6b3c:	f3bf 8f6f 	isb	sy
    6b40:	f3bf 8f4f 	dsb	sy
    6b44:	e7fe      	b.n	6b44 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    6b46:	9904      	ldr	r1, [sp, #16]
    6b48:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    6b4a:	b131      	cbz	r1, 6b5a <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    6b4c:	4603      	mov	r3, r0
    6b4e:	4602      	mov	r2, r0
    6b50:	4401      	add	r1, r0
    6b52:	4630      	mov	r0, r6
    6b54:	4d0d      	ldr	r5, [pc, #52]	; (6b8c <prvTimerTask+0x1b4>)
    6b56:	47a8      	blx	r5
    6b58:	e776      	b.n	6a48 <prvTimerTask+0x70>
    6b5a:	f04f 0380 	mov.w	r3, #128	; 0x80
    6b5e:	f383 8811 	msr	BASEPRI, r3
    6b62:	f3bf 8f6f 	isb	sy
    6b66:	f3bf 8f4f 	dsb	sy
    6b6a:	e7fe      	b.n	6b6a <prvTimerTask+0x192>
				vPortFree(pxTimer);
    6b6c:	4630      	mov	r0, r6
    6b6e:	4b09      	ldr	r3, [pc, #36]	; (6b94 <prvTimerTask+0x1bc>)
    6b70:	4798      	blx	r3
    6b72:	e769      	b.n	6a48 <prvTimerTask+0x70>
    6b74:	2000351c 	.word	0x2000351c
    6b78:	00005fa1 	.word	0x00005fa1
    6b7c:	00005e59 	.word	0x00005e59
    6b80:	0000692d 	.word	0x0000692d
    6b84:	00005ac5 	.word	0x00005ac5
    6b88:	0000572d 	.word	0x0000572d
    6b8c:	00006785 	.word	0x00006785
    6b90:	000068c1 	.word	0x000068c1
    6b94:	000050f5 	.word	0x000050f5
    6b98:	e000ed04 	.word	0xe000ed04
    6b9c:	00004c6d 	.word	0x00004c6d

00006ba0 <atoi>:
    6ba0:	220a      	movs	r2, #10
    6ba2:	2100      	movs	r1, #0
    6ba4:	f000 ba0e 	b.w	6fc4 <strtol>

00006ba8 <__libc_init_array>:
    6ba8:	b570      	push	{r4, r5, r6, lr}
    6baa:	4e0d      	ldr	r6, [pc, #52]	; (6be0 <__libc_init_array+0x38>)
    6bac:	4c0d      	ldr	r4, [pc, #52]	; (6be4 <__libc_init_array+0x3c>)
    6bae:	1ba4      	subs	r4, r4, r6
    6bb0:	10a4      	asrs	r4, r4, #2
    6bb2:	2500      	movs	r5, #0
    6bb4:	42a5      	cmp	r5, r4
    6bb6:	d109      	bne.n	6bcc <__libc_init_array+0x24>
    6bb8:	4e0b      	ldr	r6, [pc, #44]	; (6be8 <__libc_init_array+0x40>)
    6bba:	4c0c      	ldr	r4, [pc, #48]	; (6bec <__libc_init_array+0x44>)
    6bbc:	f002 fe9e 	bl	98fc <_init>
    6bc0:	1ba4      	subs	r4, r4, r6
    6bc2:	10a4      	asrs	r4, r4, #2
    6bc4:	2500      	movs	r5, #0
    6bc6:	42a5      	cmp	r5, r4
    6bc8:	d105      	bne.n	6bd6 <__libc_init_array+0x2e>
    6bca:	bd70      	pop	{r4, r5, r6, pc}
    6bcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6bd0:	4798      	blx	r3
    6bd2:	3501      	adds	r5, #1
    6bd4:	e7ee      	b.n	6bb4 <__libc_init_array+0xc>
    6bd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6bda:	4798      	blx	r3
    6bdc:	3501      	adds	r5, #1
    6bde:	e7f2      	b.n	6bc6 <__libc_init_array+0x1e>
    6be0:	00009908 	.word	0x00009908
    6be4:	00009908 	.word	0x00009908
    6be8:	00009908 	.word	0x00009908
    6bec:	0000990c 	.word	0x0000990c

00006bf0 <__locale_ctype_ptr_l>:
    6bf0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
    6bf4:	4770      	bx	lr

00006bf6 <__ascii_mbtowc>:
    6bf6:	b082      	sub	sp, #8
    6bf8:	b901      	cbnz	r1, 6bfc <__ascii_mbtowc+0x6>
    6bfa:	a901      	add	r1, sp, #4
    6bfc:	b142      	cbz	r2, 6c10 <__ascii_mbtowc+0x1a>
    6bfe:	b14b      	cbz	r3, 6c14 <__ascii_mbtowc+0x1e>
    6c00:	7813      	ldrb	r3, [r2, #0]
    6c02:	600b      	str	r3, [r1, #0]
    6c04:	7812      	ldrb	r2, [r2, #0]
    6c06:	1c10      	adds	r0, r2, #0
    6c08:	bf18      	it	ne
    6c0a:	2001      	movne	r0, #1
    6c0c:	b002      	add	sp, #8
    6c0e:	4770      	bx	lr
    6c10:	4610      	mov	r0, r2
    6c12:	e7fb      	b.n	6c0c <__ascii_mbtowc+0x16>
    6c14:	f06f 0001 	mvn.w	r0, #1
    6c18:	e7f8      	b.n	6c0c <__ascii_mbtowc+0x16>

00006c1a <memcmp>:
    6c1a:	b510      	push	{r4, lr}
    6c1c:	3901      	subs	r1, #1
    6c1e:	4402      	add	r2, r0
    6c20:	4290      	cmp	r0, r2
    6c22:	d101      	bne.n	6c28 <memcmp+0xe>
    6c24:	2000      	movs	r0, #0
    6c26:	bd10      	pop	{r4, pc}
    6c28:	f810 3b01 	ldrb.w	r3, [r0], #1
    6c2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    6c30:	42a3      	cmp	r3, r4
    6c32:	d0f5      	beq.n	6c20 <memcmp+0x6>
    6c34:	1b18      	subs	r0, r3, r4
    6c36:	bd10      	pop	{r4, pc}

00006c38 <memcpy>:
    6c38:	b510      	push	{r4, lr}
    6c3a:	1e43      	subs	r3, r0, #1
    6c3c:	440a      	add	r2, r1
    6c3e:	4291      	cmp	r1, r2
    6c40:	d100      	bne.n	6c44 <memcpy+0xc>
    6c42:	bd10      	pop	{r4, pc}
    6c44:	f811 4b01 	ldrb.w	r4, [r1], #1
    6c48:	f803 4f01 	strb.w	r4, [r3, #1]!
    6c4c:	e7f7      	b.n	6c3e <memcpy+0x6>

00006c4e <memmove>:
    6c4e:	4288      	cmp	r0, r1
    6c50:	b510      	push	{r4, lr}
    6c52:	eb01 0302 	add.w	r3, r1, r2
    6c56:	d803      	bhi.n	6c60 <memmove+0x12>
    6c58:	1e42      	subs	r2, r0, #1
    6c5a:	4299      	cmp	r1, r3
    6c5c:	d10c      	bne.n	6c78 <memmove+0x2a>
    6c5e:	bd10      	pop	{r4, pc}
    6c60:	4298      	cmp	r0, r3
    6c62:	d2f9      	bcs.n	6c58 <memmove+0xa>
    6c64:	1881      	adds	r1, r0, r2
    6c66:	1ad2      	subs	r2, r2, r3
    6c68:	42d3      	cmn	r3, r2
    6c6a:	d100      	bne.n	6c6e <memmove+0x20>
    6c6c:	bd10      	pop	{r4, pc}
    6c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    6c72:	f801 4d01 	strb.w	r4, [r1, #-1]!
    6c76:	e7f7      	b.n	6c68 <memmove+0x1a>
    6c78:	f811 4b01 	ldrb.w	r4, [r1], #1
    6c7c:	f802 4f01 	strb.w	r4, [r2, #1]!
    6c80:	e7eb      	b.n	6c5a <memmove+0xc>

00006c82 <memset>:
    6c82:	4402      	add	r2, r0
    6c84:	4603      	mov	r3, r0
    6c86:	4293      	cmp	r3, r2
    6c88:	d100      	bne.n	6c8c <memset+0xa>
    6c8a:	4770      	bx	lr
    6c8c:	f803 1b01 	strb.w	r1, [r3], #1
    6c90:	e7f9      	b.n	6c86 <memset+0x4>
	...

00006c94 <_free_r>:
    6c94:	b538      	push	{r3, r4, r5, lr}
    6c96:	4605      	mov	r5, r0
    6c98:	2900      	cmp	r1, #0
    6c9a:	d045      	beq.n	6d28 <_free_r+0x94>
    6c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    6ca0:	1f0c      	subs	r4, r1, #4
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	bfb8      	it	lt
    6ca6:	18e4      	addlt	r4, r4, r3
    6ca8:	f000 f9af 	bl	700a <__malloc_lock>
    6cac:	4a1f      	ldr	r2, [pc, #124]	; (6d2c <_free_r+0x98>)
    6cae:	6813      	ldr	r3, [r2, #0]
    6cb0:	4610      	mov	r0, r2
    6cb2:	b933      	cbnz	r3, 6cc2 <_free_r+0x2e>
    6cb4:	6063      	str	r3, [r4, #4]
    6cb6:	6014      	str	r4, [r2, #0]
    6cb8:	4628      	mov	r0, r5
    6cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6cbe:	f000 b9a5 	b.w	700c <__malloc_unlock>
    6cc2:	42a3      	cmp	r3, r4
    6cc4:	d90c      	bls.n	6ce0 <_free_r+0x4c>
    6cc6:	6821      	ldr	r1, [r4, #0]
    6cc8:	1862      	adds	r2, r4, r1
    6cca:	4293      	cmp	r3, r2
    6ccc:	bf04      	itt	eq
    6cce:	681a      	ldreq	r2, [r3, #0]
    6cd0:	685b      	ldreq	r3, [r3, #4]
    6cd2:	6063      	str	r3, [r4, #4]
    6cd4:	bf04      	itt	eq
    6cd6:	1852      	addeq	r2, r2, r1
    6cd8:	6022      	streq	r2, [r4, #0]
    6cda:	6004      	str	r4, [r0, #0]
    6cdc:	e7ec      	b.n	6cb8 <_free_r+0x24>
    6cde:	4613      	mov	r3, r2
    6ce0:	685a      	ldr	r2, [r3, #4]
    6ce2:	b10a      	cbz	r2, 6ce8 <_free_r+0x54>
    6ce4:	42a2      	cmp	r2, r4
    6ce6:	d9fa      	bls.n	6cde <_free_r+0x4a>
    6ce8:	6819      	ldr	r1, [r3, #0]
    6cea:	1858      	adds	r0, r3, r1
    6cec:	42a0      	cmp	r0, r4
    6cee:	d10b      	bne.n	6d08 <_free_r+0x74>
    6cf0:	6820      	ldr	r0, [r4, #0]
    6cf2:	4401      	add	r1, r0
    6cf4:	1858      	adds	r0, r3, r1
    6cf6:	4282      	cmp	r2, r0
    6cf8:	6019      	str	r1, [r3, #0]
    6cfa:	d1dd      	bne.n	6cb8 <_free_r+0x24>
    6cfc:	6810      	ldr	r0, [r2, #0]
    6cfe:	6852      	ldr	r2, [r2, #4]
    6d00:	605a      	str	r2, [r3, #4]
    6d02:	4401      	add	r1, r0
    6d04:	6019      	str	r1, [r3, #0]
    6d06:	e7d7      	b.n	6cb8 <_free_r+0x24>
    6d08:	d902      	bls.n	6d10 <_free_r+0x7c>
    6d0a:	230c      	movs	r3, #12
    6d0c:	602b      	str	r3, [r5, #0]
    6d0e:	e7d3      	b.n	6cb8 <_free_r+0x24>
    6d10:	6820      	ldr	r0, [r4, #0]
    6d12:	1821      	adds	r1, r4, r0
    6d14:	428a      	cmp	r2, r1
    6d16:	bf04      	itt	eq
    6d18:	6811      	ldreq	r1, [r2, #0]
    6d1a:	6852      	ldreq	r2, [r2, #4]
    6d1c:	6062      	str	r2, [r4, #4]
    6d1e:	bf04      	itt	eq
    6d20:	1809      	addeq	r1, r1, r0
    6d22:	6021      	streq	r1, [r4, #0]
    6d24:	605c      	str	r4, [r3, #4]
    6d26:	e7c7      	b.n	6cb8 <_free_r+0x24>
    6d28:	bd38      	pop	{r3, r4, r5, pc}
    6d2a:	bf00      	nop
    6d2c:	20003558 	.word	0x20003558

00006d30 <_malloc_r>:
    6d30:	b570      	push	{r4, r5, r6, lr}
    6d32:	1ccd      	adds	r5, r1, #3
    6d34:	f025 0503 	bic.w	r5, r5, #3
    6d38:	3508      	adds	r5, #8
    6d3a:	2d0c      	cmp	r5, #12
    6d3c:	bf38      	it	cc
    6d3e:	250c      	movcc	r5, #12
    6d40:	2d00      	cmp	r5, #0
    6d42:	4606      	mov	r6, r0
    6d44:	db01      	blt.n	6d4a <_malloc_r+0x1a>
    6d46:	42a9      	cmp	r1, r5
    6d48:	d903      	bls.n	6d52 <_malloc_r+0x22>
    6d4a:	230c      	movs	r3, #12
    6d4c:	6033      	str	r3, [r6, #0]
    6d4e:	2000      	movs	r0, #0
    6d50:	bd70      	pop	{r4, r5, r6, pc}
    6d52:	f000 f95a 	bl	700a <__malloc_lock>
    6d56:	4a23      	ldr	r2, [pc, #140]	; (6de4 <_malloc_r+0xb4>)
    6d58:	6814      	ldr	r4, [r2, #0]
    6d5a:	4621      	mov	r1, r4
    6d5c:	b991      	cbnz	r1, 6d84 <_malloc_r+0x54>
    6d5e:	4c22      	ldr	r4, [pc, #136]	; (6de8 <_malloc_r+0xb8>)
    6d60:	6823      	ldr	r3, [r4, #0]
    6d62:	b91b      	cbnz	r3, 6d6c <_malloc_r+0x3c>
    6d64:	4630      	mov	r0, r6
    6d66:	f000 f841 	bl	6dec <_sbrk_r>
    6d6a:	6020      	str	r0, [r4, #0]
    6d6c:	4629      	mov	r1, r5
    6d6e:	4630      	mov	r0, r6
    6d70:	f000 f83c 	bl	6dec <_sbrk_r>
    6d74:	1c43      	adds	r3, r0, #1
    6d76:	d126      	bne.n	6dc6 <_malloc_r+0x96>
    6d78:	230c      	movs	r3, #12
    6d7a:	6033      	str	r3, [r6, #0]
    6d7c:	4630      	mov	r0, r6
    6d7e:	f000 f945 	bl	700c <__malloc_unlock>
    6d82:	e7e4      	b.n	6d4e <_malloc_r+0x1e>
    6d84:	680b      	ldr	r3, [r1, #0]
    6d86:	1b5b      	subs	r3, r3, r5
    6d88:	d41a      	bmi.n	6dc0 <_malloc_r+0x90>
    6d8a:	2b0b      	cmp	r3, #11
    6d8c:	d90f      	bls.n	6dae <_malloc_r+0x7e>
    6d8e:	600b      	str	r3, [r1, #0]
    6d90:	50cd      	str	r5, [r1, r3]
    6d92:	18cc      	adds	r4, r1, r3
    6d94:	4630      	mov	r0, r6
    6d96:	f000 f939 	bl	700c <__malloc_unlock>
    6d9a:	f104 000b 	add.w	r0, r4, #11
    6d9e:	1d23      	adds	r3, r4, #4
    6da0:	f020 0007 	bic.w	r0, r0, #7
    6da4:	1ac3      	subs	r3, r0, r3
    6da6:	d01b      	beq.n	6de0 <_malloc_r+0xb0>
    6da8:	425a      	negs	r2, r3
    6daa:	50e2      	str	r2, [r4, r3]
    6dac:	bd70      	pop	{r4, r5, r6, pc}
    6dae:	428c      	cmp	r4, r1
    6db0:	bf0d      	iteet	eq
    6db2:	6863      	ldreq	r3, [r4, #4]
    6db4:	684b      	ldrne	r3, [r1, #4]
    6db6:	6063      	strne	r3, [r4, #4]
    6db8:	6013      	streq	r3, [r2, #0]
    6dba:	bf18      	it	ne
    6dbc:	460c      	movne	r4, r1
    6dbe:	e7e9      	b.n	6d94 <_malloc_r+0x64>
    6dc0:	460c      	mov	r4, r1
    6dc2:	6849      	ldr	r1, [r1, #4]
    6dc4:	e7ca      	b.n	6d5c <_malloc_r+0x2c>
    6dc6:	1cc4      	adds	r4, r0, #3
    6dc8:	f024 0403 	bic.w	r4, r4, #3
    6dcc:	42a0      	cmp	r0, r4
    6dce:	d005      	beq.n	6ddc <_malloc_r+0xac>
    6dd0:	1a21      	subs	r1, r4, r0
    6dd2:	4630      	mov	r0, r6
    6dd4:	f000 f80a 	bl	6dec <_sbrk_r>
    6dd8:	3001      	adds	r0, #1
    6dda:	d0cd      	beq.n	6d78 <_malloc_r+0x48>
    6ddc:	6025      	str	r5, [r4, #0]
    6dde:	e7d9      	b.n	6d94 <_malloc_r+0x64>
    6de0:	bd70      	pop	{r4, r5, r6, pc}
    6de2:	bf00      	nop
    6de4:	20003558 	.word	0x20003558
    6de8:	2000355c 	.word	0x2000355c

00006dec <_sbrk_r>:
    6dec:	b538      	push	{r3, r4, r5, lr}
    6dee:	4c06      	ldr	r4, [pc, #24]	; (6e08 <_sbrk_r+0x1c>)
    6df0:	2300      	movs	r3, #0
    6df2:	4605      	mov	r5, r0
    6df4:	4608      	mov	r0, r1
    6df6:	6023      	str	r3, [r4, #0]
    6df8:	f7fc ffa4 	bl	3d44 <_sbrk>
    6dfc:	1c43      	adds	r3, r0, #1
    6dfe:	d102      	bne.n	6e06 <_sbrk_r+0x1a>
    6e00:	6823      	ldr	r3, [r4, #0]
    6e02:	b103      	cbz	r3, 6e06 <_sbrk_r+0x1a>
    6e04:	602b      	str	r3, [r5, #0]
    6e06:	bd38      	pop	{r3, r4, r5, pc}
    6e08:	20003f9c 	.word	0x20003f9c

00006e0c <siprintf>:
    6e0c:	b40e      	push	{r1, r2, r3}
    6e0e:	b500      	push	{lr}
    6e10:	b09c      	sub	sp, #112	; 0x70
    6e12:	f44f 7102 	mov.w	r1, #520	; 0x208
    6e16:	ab1d      	add	r3, sp, #116	; 0x74
    6e18:	f8ad 1014 	strh.w	r1, [sp, #20]
    6e1c:	9002      	str	r0, [sp, #8]
    6e1e:	9006      	str	r0, [sp, #24]
    6e20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    6e24:	480a      	ldr	r0, [pc, #40]	; (6e50 <siprintf+0x44>)
    6e26:	9104      	str	r1, [sp, #16]
    6e28:	9107      	str	r1, [sp, #28]
    6e2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    6e2e:	f853 2b04 	ldr.w	r2, [r3], #4
    6e32:	f8ad 1016 	strh.w	r1, [sp, #22]
    6e36:	6800      	ldr	r0, [r0, #0]
    6e38:	9301      	str	r3, [sp, #4]
    6e3a:	a902      	add	r1, sp, #8
    6e3c:	f000 f942 	bl	70c4 <_svfiprintf_r>
    6e40:	9b02      	ldr	r3, [sp, #8]
    6e42:	2200      	movs	r2, #0
    6e44:	701a      	strb	r2, [r3, #0]
    6e46:	b01c      	add	sp, #112	; 0x70
    6e48:	f85d eb04 	ldr.w	lr, [sp], #4
    6e4c:	b003      	add	sp, #12
    6e4e:	4770      	bx	lr
    6e50:	2000009c 	.word	0x2000009c

00006e54 <strcpy>:
    6e54:	4603      	mov	r3, r0
    6e56:	f811 2b01 	ldrb.w	r2, [r1], #1
    6e5a:	f803 2b01 	strb.w	r2, [r3], #1
    6e5e:	2a00      	cmp	r2, #0
    6e60:	d1f9      	bne.n	6e56 <strcpy+0x2>
    6e62:	4770      	bx	lr

00006e64 <strlen>:
    6e64:	4603      	mov	r3, r0
    6e66:	f813 2b01 	ldrb.w	r2, [r3], #1
    6e6a:	2a00      	cmp	r2, #0
    6e6c:	d1fb      	bne.n	6e66 <strlen+0x2>
    6e6e:	1a18      	subs	r0, r3, r0
    6e70:	3801      	subs	r0, #1
    6e72:	4770      	bx	lr

00006e74 <strncmp>:
    6e74:	b510      	push	{r4, lr}
    6e76:	b16a      	cbz	r2, 6e94 <strncmp+0x20>
    6e78:	3901      	subs	r1, #1
    6e7a:	1884      	adds	r4, r0, r2
    6e7c:	f810 3b01 	ldrb.w	r3, [r0], #1
    6e80:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6e84:	4293      	cmp	r3, r2
    6e86:	d103      	bne.n	6e90 <strncmp+0x1c>
    6e88:	42a0      	cmp	r0, r4
    6e8a:	d001      	beq.n	6e90 <strncmp+0x1c>
    6e8c:	2b00      	cmp	r3, #0
    6e8e:	d1f5      	bne.n	6e7c <strncmp+0x8>
    6e90:	1a98      	subs	r0, r3, r2
    6e92:	bd10      	pop	{r4, pc}
    6e94:	4610      	mov	r0, r2
    6e96:	bd10      	pop	{r4, pc}

00006e98 <strncpy>:
    6e98:	b570      	push	{r4, r5, r6, lr}
    6e9a:	4604      	mov	r4, r0
    6e9c:	b902      	cbnz	r2, 6ea0 <strncpy+0x8>
    6e9e:	bd70      	pop	{r4, r5, r6, pc}
    6ea0:	4623      	mov	r3, r4
    6ea2:	f811 5b01 	ldrb.w	r5, [r1], #1
    6ea6:	f803 5b01 	strb.w	r5, [r3], #1
    6eaa:	1e56      	subs	r6, r2, #1
    6eac:	b91d      	cbnz	r5, 6eb6 <strncpy+0x1e>
    6eae:	4414      	add	r4, r2
    6eb0:	42a3      	cmp	r3, r4
    6eb2:	d103      	bne.n	6ebc <strncpy+0x24>
    6eb4:	bd70      	pop	{r4, r5, r6, pc}
    6eb6:	461c      	mov	r4, r3
    6eb8:	4632      	mov	r2, r6
    6eba:	e7ef      	b.n	6e9c <strncpy+0x4>
    6ebc:	f803 5b01 	strb.w	r5, [r3], #1
    6ec0:	e7f6      	b.n	6eb0 <strncpy+0x18>

00006ec2 <_strtol_l.isra.0>:
    6ec2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ec6:	4680      	mov	r8, r0
    6ec8:	4689      	mov	r9, r1
    6eca:	4692      	mov	sl, r2
    6ecc:	461f      	mov	r7, r3
    6ece:	468b      	mov	fp, r1
    6ed0:	465d      	mov	r5, fp
    6ed2:	980a      	ldr	r0, [sp, #40]	; 0x28
    6ed4:	f815 4b01 	ldrb.w	r4, [r5], #1
    6ed8:	f7ff fe8a 	bl	6bf0 <__locale_ctype_ptr_l>
    6edc:	4420      	add	r0, r4
    6ede:	7846      	ldrb	r6, [r0, #1]
    6ee0:	f016 0608 	ands.w	r6, r6, #8
    6ee4:	d10b      	bne.n	6efe <_strtol_l.isra.0+0x3c>
    6ee6:	2c2d      	cmp	r4, #45	; 0x2d
    6ee8:	d10b      	bne.n	6f02 <_strtol_l.isra.0+0x40>
    6eea:	782c      	ldrb	r4, [r5, #0]
    6eec:	2601      	movs	r6, #1
    6eee:	f10b 0502 	add.w	r5, fp, #2
    6ef2:	b167      	cbz	r7, 6f0e <_strtol_l.isra.0+0x4c>
    6ef4:	2f10      	cmp	r7, #16
    6ef6:	d114      	bne.n	6f22 <_strtol_l.isra.0+0x60>
    6ef8:	2c30      	cmp	r4, #48	; 0x30
    6efa:	d00a      	beq.n	6f12 <_strtol_l.isra.0+0x50>
    6efc:	e011      	b.n	6f22 <_strtol_l.isra.0+0x60>
    6efe:	46ab      	mov	fp, r5
    6f00:	e7e6      	b.n	6ed0 <_strtol_l.isra.0+0xe>
    6f02:	2c2b      	cmp	r4, #43	; 0x2b
    6f04:	bf04      	itt	eq
    6f06:	782c      	ldrbeq	r4, [r5, #0]
    6f08:	f10b 0502 	addeq.w	r5, fp, #2
    6f0c:	e7f1      	b.n	6ef2 <_strtol_l.isra.0+0x30>
    6f0e:	2c30      	cmp	r4, #48	; 0x30
    6f10:	d127      	bne.n	6f62 <_strtol_l.isra.0+0xa0>
    6f12:	782b      	ldrb	r3, [r5, #0]
    6f14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6f18:	2b58      	cmp	r3, #88	; 0x58
    6f1a:	d14b      	bne.n	6fb4 <_strtol_l.isra.0+0xf2>
    6f1c:	786c      	ldrb	r4, [r5, #1]
    6f1e:	2710      	movs	r7, #16
    6f20:	3502      	adds	r5, #2
    6f22:	2e00      	cmp	r6, #0
    6f24:	bf0c      	ite	eq
    6f26:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
    6f2a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
    6f2e:	2200      	movs	r2, #0
    6f30:	fbb1 fef7 	udiv	lr, r1, r7
    6f34:	4610      	mov	r0, r2
    6f36:	fb07 1c1e 	mls	ip, r7, lr, r1
    6f3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    6f3e:	2b09      	cmp	r3, #9
    6f40:	d811      	bhi.n	6f66 <_strtol_l.isra.0+0xa4>
    6f42:	461c      	mov	r4, r3
    6f44:	42a7      	cmp	r7, r4
    6f46:	dd1d      	ble.n	6f84 <_strtol_l.isra.0+0xc2>
    6f48:	1c53      	adds	r3, r2, #1
    6f4a:	d007      	beq.n	6f5c <_strtol_l.isra.0+0x9a>
    6f4c:	4586      	cmp	lr, r0
    6f4e:	d316      	bcc.n	6f7e <_strtol_l.isra.0+0xbc>
    6f50:	d101      	bne.n	6f56 <_strtol_l.isra.0+0x94>
    6f52:	45a4      	cmp	ip, r4
    6f54:	db13      	blt.n	6f7e <_strtol_l.isra.0+0xbc>
    6f56:	fb00 4007 	mla	r0, r0, r7, r4
    6f5a:	2201      	movs	r2, #1
    6f5c:	f815 4b01 	ldrb.w	r4, [r5], #1
    6f60:	e7eb      	b.n	6f3a <_strtol_l.isra.0+0x78>
    6f62:	270a      	movs	r7, #10
    6f64:	e7dd      	b.n	6f22 <_strtol_l.isra.0+0x60>
    6f66:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
    6f6a:	2b19      	cmp	r3, #25
    6f6c:	d801      	bhi.n	6f72 <_strtol_l.isra.0+0xb0>
    6f6e:	3c37      	subs	r4, #55	; 0x37
    6f70:	e7e8      	b.n	6f44 <_strtol_l.isra.0+0x82>
    6f72:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
    6f76:	2b19      	cmp	r3, #25
    6f78:	d804      	bhi.n	6f84 <_strtol_l.isra.0+0xc2>
    6f7a:	3c57      	subs	r4, #87	; 0x57
    6f7c:	e7e2      	b.n	6f44 <_strtol_l.isra.0+0x82>
    6f7e:	f04f 32ff 	mov.w	r2, #4294967295
    6f82:	e7eb      	b.n	6f5c <_strtol_l.isra.0+0x9a>
    6f84:	1c53      	adds	r3, r2, #1
    6f86:	d108      	bne.n	6f9a <_strtol_l.isra.0+0xd8>
    6f88:	2322      	movs	r3, #34	; 0x22
    6f8a:	f8c8 3000 	str.w	r3, [r8]
    6f8e:	4608      	mov	r0, r1
    6f90:	f1ba 0f00 	cmp.w	sl, #0
    6f94:	d107      	bne.n	6fa6 <_strtol_l.isra.0+0xe4>
    6f96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6f9a:	b106      	cbz	r6, 6f9e <_strtol_l.isra.0+0xdc>
    6f9c:	4240      	negs	r0, r0
    6f9e:	f1ba 0f00 	cmp.w	sl, #0
    6fa2:	d00c      	beq.n	6fbe <_strtol_l.isra.0+0xfc>
    6fa4:	b122      	cbz	r2, 6fb0 <_strtol_l.isra.0+0xee>
    6fa6:	3d01      	subs	r5, #1
    6fa8:	f8ca 5000 	str.w	r5, [sl]
    6fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6fb0:	464d      	mov	r5, r9
    6fb2:	e7f9      	b.n	6fa8 <_strtol_l.isra.0+0xe6>
    6fb4:	2430      	movs	r4, #48	; 0x30
    6fb6:	2f00      	cmp	r7, #0
    6fb8:	d1b3      	bne.n	6f22 <_strtol_l.isra.0+0x60>
    6fba:	2708      	movs	r7, #8
    6fbc:	e7b1      	b.n	6f22 <_strtol_l.isra.0+0x60>
    6fbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

00006fc4 <strtol>:
    6fc4:	4b08      	ldr	r3, [pc, #32]	; (6fe8 <strtol+0x24>)
    6fc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6fc8:	681c      	ldr	r4, [r3, #0]
    6fca:	4d08      	ldr	r5, [pc, #32]	; (6fec <strtol+0x28>)
    6fcc:	6a23      	ldr	r3, [r4, #32]
    6fce:	2b00      	cmp	r3, #0
    6fd0:	bf08      	it	eq
    6fd2:	462b      	moveq	r3, r5
    6fd4:	9300      	str	r3, [sp, #0]
    6fd6:	4613      	mov	r3, r2
    6fd8:	460a      	mov	r2, r1
    6fda:	4601      	mov	r1, r0
    6fdc:	4620      	mov	r0, r4
    6fde:	f7ff ff70 	bl	6ec2 <_strtol_l.isra.0>
    6fe2:	b003      	add	sp, #12
    6fe4:	bd30      	pop	{r4, r5, pc}
    6fe6:	bf00      	nop
    6fe8:	2000009c 	.word	0x2000009c
    6fec:	20000100 	.word	0x20000100

00006ff0 <__ascii_wctomb>:
    6ff0:	b149      	cbz	r1, 7006 <__ascii_wctomb+0x16>
    6ff2:	2aff      	cmp	r2, #255	; 0xff
    6ff4:	bf85      	ittet	hi
    6ff6:	238a      	movhi	r3, #138	; 0x8a
    6ff8:	6003      	strhi	r3, [r0, #0]
    6ffa:	700a      	strbls	r2, [r1, #0]
    6ffc:	f04f 30ff 	movhi.w	r0, #4294967295
    7000:	bf98      	it	ls
    7002:	2001      	movls	r0, #1
    7004:	4770      	bx	lr
    7006:	4608      	mov	r0, r1
    7008:	4770      	bx	lr

0000700a <__malloc_lock>:
    700a:	4770      	bx	lr

0000700c <__malloc_unlock>:
    700c:	4770      	bx	lr

0000700e <__ssputs_r>:
    700e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7012:	688e      	ldr	r6, [r1, #8]
    7014:	429e      	cmp	r6, r3
    7016:	4682      	mov	sl, r0
    7018:	460c      	mov	r4, r1
    701a:	4691      	mov	r9, r2
    701c:	4698      	mov	r8, r3
    701e:	d835      	bhi.n	708c <__ssputs_r+0x7e>
    7020:	898a      	ldrh	r2, [r1, #12]
    7022:	f412 6f90 	tst.w	r2, #1152	; 0x480
    7026:	d031      	beq.n	708c <__ssputs_r+0x7e>
    7028:	6825      	ldr	r5, [r4, #0]
    702a:	6909      	ldr	r1, [r1, #16]
    702c:	1a6f      	subs	r7, r5, r1
    702e:	6965      	ldr	r5, [r4, #20]
    7030:	2302      	movs	r3, #2
    7032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    7036:	fb95 f5f3 	sdiv	r5, r5, r3
    703a:	f108 0301 	add.w	r3, r8, #1
    703e:	443b      	add	r3, r7
    7040:	429d      	cmp	r5, r3
    7042:	bf38      	it	cc
    7044:	461d      	movcc	r5, r3
    7046:	0553      	lsls	r3, r2, #21
    7048:	d531      	bpl.n	70ae <__ssputs_r+0xa0>
    704a:	4629      	mov	r1, r5
    704c:	f7ff fe70 	bl	6d30 <_malloc_r>
    7050:	4606      	mov	r6, r0
    7052:	b950      	cbnz	r0, 706a <__ssputs_r+0x5c>
    7054:	230c      	movs	r3, #12
    7056:	f8ca 3000 	str.w	r3, [sl]
    705a:	89a3      	ldrh	r3, [r4, #12]
    705c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7060:	81a3      	strh	r3, [r4, #12]
    7062:	f04f 30ff 	mov.w	r0, #4294967295
    7066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    706a:	463a      	mov	r2, r7
    706c:	6921      	ldr	r1, [r4, #16]
    706e:	f7ff fde3 	bl	6c38 <memcpy>
    7072:	89a3      	ldrh	r3, [r4, #12]
    7074:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    7078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    707c:	81a3      	strh	r3, [r4, #12]
    707e:	6126      	str	r6, [r4, #16]
    7080:	6165      	str	r5, [r4, #20]
    7082:	443e      	add	r6, r7
    7084:	1bed      	subs	r5, r5, r7
    7086:	6026      	str	r6, [r4, #0]
    7088:	60a5      	str	r5, [r4, #8]
    708a:	4646      	mov	r6, r8
    708c:	4546      	cmp	r6, r8
    708e:	bf28      	it	cs
    7090:	4646      	movcs	r6, r8
    7092:	4632      	mov	r2, r6
    7094:	4649      	mov	r1, r9
    7096:	6820      	ldr	r0, [r4, #0]
    7098:	f7ff fdd9 	bl	6c4e <memmove>
    709c:	68a3      	ldr	r3, [r4, #8]
    709e:	1b9b      	subs	r3, r3, r6
    70a0:	60a3      	str	r3, [r4, #8]
    70a2:	6823      	ldr	r3, [r4, #0]
    70a4:	441e      	add	r6, r3
    70a6:	6026      	str	r6, [r4, #0]
    70a8:	2000      	movs	r0, #0
    70aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70ae:	462a      	mov	r2, r5
    70b0:	f000 fae6 	bl	7680 <_realloc_r>
    70b4:	4606      	mov	r6, r0
    70b6:	2800      	cmp	r0, #0
    70b8:	d1e1      	bne.n	707e <__ssputs_r+0x70>
    70ba:	6921      	ldr	r1, [r4, #16]
    70bc:	4650      	mov	r0, sl
    70be:	f7ff fde9 	bl	6c94 <_free_r>
    70c2:	e7c7      	b.n	7054 <__ssputs_r+0x46>

000070c4 <_svfiprintf_r>:
    70c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    70c8:	b09d      	sub	sp, #116	; 0x74
    70ca:	4680      	mov	r8, r0
    70cc:	9303      	str	r3, [sp, #12]
    70ce:	898b      	ldrh	r3, [r1, #12]
    70d0:	061c      	lsls	r4, r3, #24
    70d2:	460d      	mov	r5, r1
    70d4:	4616      	mov	r6, r2
    70d6:	d50f      	bpl.n	70f8 <_svfiprintf_r+0x34>
    70d8:	690b      	ldr	r3, [r1, #16]
    70da:	b96b      	cbnz	r3, 70f8 <_svfiprintf_r+0x34>
    70dc:	2140      	movs	r1, #64	; 0x40
    70de:	f7ff fe27 	bl	6d30 <_malloc_r>
    70e2:	6028      	str	r0, [r5, #0]
    70e4:	6128      	str	r0, [r5, #16]
    70e6:	b928      	cbnz	r0, 70f4 <_svfiprintf_r+0x30>
    70e8:	230c      	movs	r3, #12
    70ea:	f8c8 3000 	str.w	r3, [r8]
    70ee:	f04f 30ff 	mov.w	r0, #4294967295
    70f2:	e0c5      	b.n	7280 <_svfiprintf_r+0x1bc>
    70f4:	2340      	movs	r3, #64	; 0x40
    70f6:	616b      	str	r3, [r5, #20]
    70f8:	2300      	movs	r3, #0
    70fa:	9309      	str	r3, [sp, #36]	; 0x24
    70fc:	2320      	movs	r3, #32
    70fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    7102:	2330      	movs	r3, #48	; 0x30
    7104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    7108:	f04f 0b01 	mov.w	fp, #1
    710c:	4637      	mov	r7, r6
    710e:	463c      	mov	r4, r7
    7110:	f814 3b01 	ldrb.w	r3, [r4], #1
    7114:	2b00      	cmp	r3, #0
    7116:	d13c      	bne.n	7192 <_svfiprintf_r+0xce>
    7118:	ebb7 0a06 	subs.w	sl, r7, r6
    711c:	d00b      	beq.n	7136 <_svfiprintf_r+0x72>
    711e:	4653      	mov	r3, sl
    7120:	4632      	mov	r2, r6
    7122:	4629      	mov	r1, r5
    7124:	4640      	mov	r0, r8
    7126:	f7ff ff72 	bl	700e <__ssputs_r>
    712a:	3001      	adds	r0, #1
    712c:	f000 80a3 	beq.w	7276 <_svfiprintf_r+0x1b2>
    7130:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7132:	4453      	add	r3, sl
    7134:	9309      	str	r3, [sp, #36]	; 0x24
    7136:	783b      	ldrb	r3, [r7, #0]
    7138:	2b00      	cmp	r3, #0
    713a:	f000 809c 	beq.w	7276 <_svfiprintf_r+0x1b2>
    713e:	2300      	movs	r3, #0
    7140:	f04f 32ff 	mov.w	r2, #4294967295
    7144:	9304      	str	r3, [sp, #16]
    7146:	9307      	str	r3, [sp, #28]
    7148:	9205      	str	r2, [sp, #20]
    714a:	9306      	str	r3, [sp, #24]
    714c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    7150:	931a      	str	r3, [sp, #104]	; 0x68
    7152:	2205      	movs	r2, #5
    7154:	7821      	ldrb	r1, [r4, #0]
    7156:	4850      	ldr	r0, [pc, #320]	; (7298 <_svfiprintf_r+0x1d4>)
    7158:	f000 fa42 	bl	75e0 <memchr>
    715c:	1c67      	adds	r7, r4, #1
    715e:	9b04      	ldr	r3, [sp, #16]
    7160:	b9d8      	cbnz	r0, 719a <_svfiprintf_r+0xd6>
    7162:	06d9      	lsls	r1, r3, #27
    7164:	bf44      	itt	mi
    7166:	2220      	movmi	r2, #32
    7168:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    716c:	071a      	lsls	r2, r3, #28
    716e:	bf44      	itt	mi
    7170:	222b      	movmi	r2, #43	; 0x2b
    7172:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    7176:	7822      	ldrb	r2, [r4, #0]
    7178:	2a2a      	cmp	r2, #42	; 0x2a
    717a:	d016      	beq.n	71aa <_svfiprintf_r+0xe6>
    717c:	9a07      	ldr	r2, [sp, #28]
    717e:	2100      	movs	r1, #0
    7180:	200a      	movs	r0, #10
    7182:	4627      	mov	r7, r4
    7184:	3401      	adds	r4, #1
    7186:	783b      	ldrb	r3, [r7, #0]
    7188:	3b30      	subs	r3, #48	; 0x30
    718a:	2b09      	cmp	r3, #9
    718c:	d951      	bls.n	7232 <_svfiprintf_r+0x16e>
    718e:	b1c9      	cbz	r1, 71c4 <_svfiprintf_r+0x100>
    7190:	e011      	b.n	71b6 <_svfiprintf_r+0xf2>
    7192:	2b25      	cmp	r3, #37	; 0x25
    7194:	d0c0      	beq.n	7118 <_svfiprintf_r+0x54>
    7196:	4627      	mov	r7, r4
    7198:	e7b9      	b.n	710e <_svfiprintf_r+0x4a>
    719a:	4a3f      	ldr	r2, [pc, #252]	; (7298 <_svfiprintf_r+0x1d4>)
    719c:	1a80      	subs	r0, r0, r2
    719e:	fa0b f000 	lsl.w	r0, fp, r0
    71a2:	4318      	orrs	r0, r3
    71a4:	9004      	str	r0, [sp, #16]
    71a6:	463c      	mov	r4, r7
    71a8:	e7d3      	b.n	7152 <_svfiprintf_r+0x8e>
    71aa:	9a03      	ldr	r2, [sp, #12]
    71ac:	1d11      	adds	r1, r2, #4
    71ae:	6812      	ldr	r2, [r2, #0]
    71b0:	9103      	str	r1, [sp, #12]
    71b2:	2a00      	cmp	r2, #0
    71b4:	db01      	blt.n	71ba <_svfiprintf_r+0xf6>
    71b6:	9207      	str	r2, [sp, #28]
    71b8:	e004      	b.n	71c4 <_svfiprintf_r+0x100>
    71ba:	4252      	negs	r2, r2
    71bc:	f043 0302 	orr.w	r3, r3, #2
    71c0:	9207      	str	r2, [sp, #28]
    71c2:	9304      	str	r3, [sp, #16]
    71c4:	783b      	ldrb	r3, [r7, #0]
    71c6:	2b2e      	cmp	r3, #46	; 0x2e
    71c8:	d10e      	bne.n	71e8 <_svfiprintf_r+0x124>
    71ca:	787b      	ldrb	r3, [r7, #1]
    71cc:	2b2a      	cmp	r3, #42	; 0x2a
    71ce:	f107 0101 	add.w	r1, r7, #1
    71d2:	d132      	bne.n	723a <_svfiprintf_r+0x176>
    71d4:	9b03      	ldr	r3, [sp, #12]
    71d6:	1d1a      	adds	r2, r3, #4
    71d8:	681b      	ldr	r3, [r3, #0]
    71da:	9203      	str	r2, [sp, #12]
    71dc:	2b00      	cmp	r3, #0
    71de:	bfb8      	it	lt
    71e0:	f04f 33ff 	movlt.w	r3, #4294967295
    71e4:	3702      	adds	r7, #2
    71e6:	9305      	str	r3, [sp, #20]
    71e8:	4c2c      	ldr	r4, [pc, #176]	; (729c <_svfiprintf_r+0x1d8>)
    71ea:	7839      	ldrb	r1, [r7, #0]
    71ec:	2203      	movs	r2, #3
    71ee:	4620      	mov	r0, r4
    71f0:	f000 f9f6 	bl	75e0 <memchr>
    71f4:	b138      	cbz	r0, 7206 <_svfiprintf_r+0x142>
    71f6:	2340      	movs	r3, #64	; 0x40
    71f8:	1b00      	subs	r0, r0, r4
    71fa:	fa03 f000 	lsl.w	r0, r3, r0
    71fe:	9b04      	ldr	r3, [sp, #16]
    7200:	4303      	orrs	r3, r0
    7202:	9304      	str	r3, [sp, #16]
    7204:	3701      	adds	r7, #1
    7206:	7839      	ldrb	r1, [r7, #0]
    7208:	4825      	ldr	r0, [pc, #148]	; (72a0 <_svfiprintf_r+0x1dc>)
    720a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    720e:	2206      	movs	r2, #6
    7210:	1c7e      	adds	r6, r7, #1
    7212:	f000 f9e5 	bl	75e0 <memchr>
    7216:	2800      	cmp	r0, #0
    7218:	d035      	beq.n	7286 <_svfiprintf_r+0x1c2>
    721a:	4b22      	ldr	r3, [pc, #136]	; (72a4 <_svfiprintf_r+0x1e0>)
    721c:	b9fb      	cbnz	r3, 725e <_svfiprintf_r+0x19a>
    721e:	9b03      	ldr	r3, [sp, #12]
    7220:	3307      	adds	r3, #7
    7222:	f023 0307 	bic.w	r3, r3, #7
    7226:	3308      	adds	r3, #8
    7228:	9303      	str	r3, [sp, #12]
    722a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    722c:	444b      	add	r3, r9
    722e:	9309      	str	r3, [sp, #36]	; 0x24
    7230:	e76c      	b.n	710c <_svfiprintf_r+0x48>
    7232:	fb00 3202 	mla	r2, r0, r2, r3
    7236:	2101      	movs	r1, #1
    7238:	e7a3      	b.n	7182 <_svfiprintf_r+0xbe>
    723a:	2300      	movs	r3, #0
    723c:	9305      	str	r3, [sp, #20]
    723e:	4618      	mov	r0, r3
    7240:	240a      	movs	r4, #10
    7242:	460f      	mov	r7, r1
    7244:	3101      	adds	r1, #1
    7246:	783a      	ldrb	r2, [r7, #0]
    7248:	3a30      	subs	r2, #48	; 0x30
    724a:	2a09      	cmp	r2, #9
    724c:	d903      	bls.n	7256 <_svfiprintf_r+0x192>
    724e:	2b00      	cmp	r3, #0
    7250:	d0ca      	beq.n	71e8 <_svfiprintf_r+0x124>
    7252:	9005      	str	r0, [sp, #20]
    7254:	e7c8      	b.n	71e8 <_svfiprintf_r+0x124>
    7256:	fb04 2000 	mla	r0, r4, r0, r2
    725a:	2301      	movs	r3, #1
    725c:	e7f1      	b.n	7242 <_svfiprintf_r+0x17e>
    725e:	ab03      	add	r3, sp, #12
    7260:	9300      	str	r3, [sp, #0]
    7262:	462a      	mov	r2, r5
    7264:	4b10      	ldr	r3, [pc, #64]	; (72a8 <_svfiprintf_r+0x1e4>)
    7266:	a904      	add	r1, sp, #16
    7268:	4640      	mov	r0, r8
    726a:	f3af 8000 	nop.w
    726e:	f1b0 3fff 	cmp.w	r0, #4294967295
    7272:	4681      	mov	r9, r0
    7274:	d1d9      	bne.n	722a <_svfiprintf_r+0x166>
    7276:	89ab      	ldrh	r3, [r5, #12]
    7278:	065b      	lsls	r3, r3, #25
    727a:	f53f af38 	bmi.w	70ee <_svfiprintf_r+0x2a>
    727e:	9809      	ldr	r0, [sp, #36]	; 0x24
    7280:	b01d      	add	sp, #116	; 0x74
    7282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7286:	ab03      	add	r3, sp, #12
    7288:	9300      	str	r3, [sp, #0]
    728a:	462a      	mov	r2, r5
    728c:	4b06      	ldr	r3, [pc, #24]	; (72a8 <_svfiprintf_r+0x1e4>)
    728e:	a904      	add	r1, sp, #16
    7290:	4640      	mov	r0, r8
    7292:	f000 f881 	bl	7398 <_printf_i>
    7296:	e7ea      	b.n	726e <_svfiprintf_r+0x1aa>
    7298:	000098c7 	.word	0x000098c7
    729c:	000098cd 	.word	0x000098cd
    72a0:	000098d1 	.word	0x000098d1
    72a4:	00000000 	.word	0x00000000
    72a8:	0000700f 	.word	0x0000700f

000072ac <_printf_common>:
    72ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    72b0:	4691      	mov	r9, r2
    72b2:	461f      	mov	r7, r3
    72b4:	688a      	ldr	r2, [r1, #8]
    72b6:	690b      	ldr	r3, [r1, #16]
    72b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
    72bc:	4293      	cmp	r3, r2
    72be:	bfb8      	it	lt
    72c0:	4613      	movlt	r3, r2
    72c2:	f8c9 3000 	str.w	r3, [r9]
    72c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    72ca:	4606      	mov	r6, r0
    72cc:	460c      	mov	r4, r1
    72ce:	b112      	cbz	r2, 72d6 <_printf_common+0x2a>
    72d0:	3301      	adds	r3, #1
    72d2:	f8c9 3000 	str.w	r3, [r9]
    72d6:	6823      	ldr	r3, [r4, #0]
    72d8:	0699      	lsls	r1, r3, #26
    72da:	bf42      	ittt	mi
    72dc:	f8d9 3000 	ldrmi.w	r3, [r9]
    72e0:	3302      	addmi	r3, #2
    72e2:	f8c9 3000 	strmi.w	r3, [r9]
    72e6:	6825      	ldr	r5, [r4, #0]
    72e8:	f015 0506 	ands.w	r5, r5, #6
    72ec:	d107      	bne.n	72fe <_printf_common+0x52>
    72ee:	f104 0a19 	add.w	sl, r4, #25
    72f2:	68e3      	ldr	r3, [r4, #12]
    72f4:	f8d9 2000 	ldr.w	r2, [r9]
    72f8:	1a9b      	subs	r3, r3, r2
    72fa:	429d      	cmp	r5, r3
    72fc:	db29      	blt.n	7352 <_printf_common+0xa6>
    72fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    7302:	6822      	ldr	r2, [r4, #0]
    7304:	3300      	adds	r3, #0
    7306:	bf18      	it	ne
    7308:	2301      	movne	r3, #1
    730a:	0692      	lsls	r2, r2, #26
    730c:	d42e      	bmi.n	736c <_printf_common+0xc0>
    730e:	f104 0243 	add.w	r2, r4, #67	; 0x43
    7312:	4639      	mov	r1, r7
    7314:	4630      	mov	r0, r6
    7316:	47c0      	blx	r8
    7318:	3001      	adds	r0, #1
    731a:	d021      	beq.n	7360 <_printf_common+0xb4>
    731c:	6823      	ldr	r3, [r4, #0]
    731e:	68e5      	ldr	r5, [r4, #12]
    7320:	f8d9 2000 	ldr.w	r2, [r9]
    7324:	f003 0306 	and.w	r3, r3, #6
    7328:	2b04      	cmp	r3, #4
    732a:	bf08      	it	eq
    732c:	1aad      	subeq	r5, r5, r2
    732e:	68a3      	ldr	r3, [r4, #8]
    7330:	6922      	ldr	r2, [r4, #16]
    7332:	bf0c      	ite	eq
    7334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    7338:	2500      	movne	r5, #0
    733a:	4293      	cmp	r3, r2
    733c:	bfc4      	itt	gt
    733e:	1a9b      	subgt	r3, r3, r2
    7340:	18ed      	addgt	r5, r5, r3
    7342:	f04f 0900 	mov.w	r9, #0
    7346:	341a      	adds	r4, #26
    7348:	454d      	cmp	r5, r9
    734a:	d11b      	bne.n	7384 <_printf_common+0xd8>
    734c:	2000      	movs	r0, #0
    734e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7352:	2301      	movs	r3, #1
    7354:	4652      	mov	r2, sl
    7356:	4639      	mov	r1, r7
    7358:	4630      	mov	r0, r6
    735a:	47c0      	blx	r8
    735c:	3001      	adds	r0, #1
    735e:	d103      	bne.n	7368 <_printf_common+0xbc>
    7360:	f04f 30ff 	mov.w	r0, #4294967295
    7364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7368:	3501      	adds	r5, #1
    736a:	e7c2      	b.n	72f2 <_printf_common+0x46>
    736c:	18e1      	adds	r1, r4, r3
    736e:	1c5a      	adds	r2, r3, #1
    7370:	2030      	movs	r0, #48	; 0x30
    7372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    7376:	4422      	add	r2, r4
    7378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    737c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    7380:	3302      	adds	r3, #2
    7382:	e7c4      	b.n	730e <_printf_common+0x62>
    7384:	2301      	movs	r3, #1
    7386:	4622      	mov	r2, r4
    7388:	4639      	mov	r1, r7
    738a:	4630      	mov	r0, r6
    738c:	47c0      	blx	r8
    738e:	3001      	adds	r0, #1
    7390:	d0e6      	beq.n	7360 <_printf_common+0xb4>
    7392:	f109 0901 	add.w	r9, r9, #1
    7396:	e7d7      	b.n	7348 <_printf_common+0x9c>

00007398 <_printf_i>:
    7398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    739c:	4617      	mov	r7, r2
    739e:	7e0a      	ldrb	r2, [r1, #24]
    73a0:	b085      	sub	sp, #20
    73a2:	2a6e      	cmp	r2, #110	; 0x6e
    73a4:	4698      	mov	r8, r3
    73a6:	4606      	mov	r6, r0
    73a8:	460c      	mov	r4, r1
    73aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    73ac:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    73b0:	f000 80bc 	beq.w	752c <_printf_i+0x194>
    73b4:	d81a      	bhi.n	73ec <_printf_i+0x54>
    73b6:	2a63      	cmp	r2, #99	; 0x63
    73b8:	d02e      	beq.n	7418 <_printf_i+0x80>
    73ba:	d80a      	bhi.n	73d2 <_printf_i+0x3a>
    73bc:	2a00      	cmp	r2, #0
    73be:	f000 80c8 	beq.w	7552 <_printf_i+0x1ba>
    73c2:	2a58      	cmp	r2, #88	; 0x58
    73c4:	f000 808a 	beq.w	74dc <_printf_i+0x144>
    73c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
    73cc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    73d0:	e02a      	b.n	7428 <_printf_i+0x90>
    73d2:	2a64      	cmp	r2, #100	; 0x64
    73d4:	d001      	beq.n	73da <_printf_i+0x42>
    73d6:	2a69      	cmp	r2, #105	; 0x69
    73d8:	d1f6      	bne.n	73c8 <_printf_i+0x30>
    73da:	6821      	ldr	r1, [r4, #0]
    73dc:	681a      	ldr	r2, [r3, #0]
    73de:	f011 0f80 	tst.w	r1, #128	; 0x80
    73e2:	d023      	beq.n	742c <_printf_i+0x94>
    73e4:	1d11      	adds	r1, r2, #4
    73e6:	6019      	str	r1, [r3, #0]
    73e8:	6813      	ldr	r3, [r2, #0]
    73ea:	e027      	b.n	743c <_printf_i+0xa4>
    73ec:	2a73      	cmp	r2, #115	; 0x73
    73ee:	f000 80b4 	beq.w	755a <_printf_i+0x1c2>
    73f2:	d808      	bhi.n	7406 <_printf_i+0x6e>
    73f4:	2a6f      	cmp	r2, #111	; 0x6f
    73f6:	d02a      	beq.n	744e <_printf_i+0xb6>
    73f8:	2a70      	cmp	r2, #112	; 0x70
    73fa:	d1e5      	bne.n	73c8 <_printf_i+0x30>
    73fc:	680a      	ldr	r2, [r1, #0]
    73fe:	f042 0220 	orr.w	r2, r2, #32
    7402:	600a      	str	r2, [r1, #0]
    7404:	e003      	b.n	740e <_printf_i+0x76>
    7406:	2a75      	cmp	r2, #117	; 0x75
    7408:	d021      	beq.n	744e <_printf_i+0xb6>
    740a:	2a78      	cmp	r2, #120	; 0x78
    740c:	d1dc      	bne.n	73c8 <_printf_i+0x30>
    740e:	2278      	movs	r2, #120	; 0x78
    7410:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    7414:	496e      	ldr	r1, [pc, #440]	; (75d0 <_printf_i+0x238>)
    7416:	e064      	b.n	74e2 <_printf_i+0x14a>
    7418:	681a      	ldr	r2, [r3, #0]
    741a:	f101 0542 	add.w	r5, r1, #66	; 0x42
    741e:	1d11      	adds	r1, r2, #4
    7420:	6019      	str	r1, [r3, #0]
    7422:	6813      	ldr	r3, [r2, #0]
    7424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    7428:	2301      	movs	r3, #1
    742a:	e0a3      	b.n	7574 <_printf_i+0x1dc>
    742c:	f011 0f40 	tst.w	r1, #64	; 0x40
    7430:	f102 0104 	add.w	r1, r2, #4
    7434:	6019      	str	r1, [r3, #0]
    7436:	d0d7      	beq.n	73e8 <_printf_i+0x50>
    7438:	f9b2 3000 	ldrsh.w	r3, [r2]
    743c:	2b00      	cmp	r3, #0
    743e:	da03      	bge.n	7448 <_printf_i+0xb0>
    7440:	222d      	movs	r2, #45	; 0x2d
    7442:	425b      	negs	r3, r3
    7444:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    7448:	4962      	ldr	r1, [pc, #392]	; (75d4 <_printf_i+0x23c>)
    744a:	220a      	movs	r2, #10
    744c:	e017      	b.n	747e <_printf_i+0xe6>
    744e:	6820      	ldr	r0, [r4, #0]
    7450:	6819      	ldr	r1, [r3, #0]
    7452:	f010 0f80 	tst.w	r0, #128	; 0x80
    7456:	d003      	beq.n	7460 <_printf_i+0xc8>
    7458:	1d08      	adds	r0, r1, #4
    745a:	6018      	str	r0, [r3, #0]
    745c:	680b      	ldr	r3, [r1, #0]
    745e:	e006      	b.n	746e <_printf_i+0xd6>
    7460:	f010 0f40 	tst.w	r0, #64	; 0x40
    7464:	f101 0004 	add.w	r0, r1, #4
    7468:	6018      	str	r0, [r3, #0]
    746a:	d0f7      	beq.n	745c <_printf_i+0xc4>
    746c:	880b      	ldrh	r3, [r1, #0]
    746e:	4959      	ldr	r1, [pc, #356]	; (75d4 <_printf_i+0x23c>)
    7470:	2a6f      	cmp	r2, #111	; 0x6f
    7472:	bf14      	ite	ne
    7474:	220a      	movne	r2, #10
    7476:	2208      	moveq	r2, #8
    7478:	2000      	movs	r0, #0
    747a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    747e:	6865      	ldr	r5, [r4, #4]
    7480:	60a5      	str	r5, [r4, #8]
    7482:	2d00      	cmp	r5, #0
    7484:	f2c0 809c 	blt.w	75c0 <_printf_i+0x228>
    7488:	6820      	ldr	r0, [r4, #0]
    748a:	f020 0004 	bic.w	r0, r0, #4
    748e:	6020      	str	r0, [r4, #0]
    7490:	2b00      	cmp	r3, #0
    7492:	d13f      	bne.n	7514 <_printf_i+0x17c>
    7494:	2d00      	cmp	r5, #0
    7496:	f040 8095 	bne.w	75c4 <_printf_i+0x22c>
    749a:	4675      	mov	r5, lr
    749c:	2a08      	cmp	r2, #8
    749e:	d10b      	bne.n	74b8 <_printf_i+0x120>
    74a0:	6823      	ldr	r3, [r4, #0]
    74a2:	07da      	lsls	r2, r3, #31
    74a4:	d508      	bpl.n	74b8 <_printf_i+0x120>
    74a6:	6923      	ldr	r3, [r4, #16]
    74a8:	6862      	ldr	r2, [r4, #4]
    74aa:	429a      	cmp	r2, r3
    74ac:	bfde      	ittt	le
    74ae:	2330      	movle	r3, #48	; 0x30
    74b0:	f805 3c01 	strble.w	r3, [r5, #-1]
    74b4:	f105 35ff 	addle.w	r5, r5, #4294967295
    74b8:	ebae 0305 	sub.w	r3, lr, r5
    74bc:	6123      	str	r3, [r4, #16]
    74be:	f8cd 8000 	str.w	r8, [sp]
    74c2:	463b      	mov	r3, r7
    74c4:	aa03      	add	r2, sp, #12
    74c6:	4621      	mov	r1, r4
    74c8:	4630      	mov	r0, r6
    74ca:	f7ff feef 	bl	72ac <_printf_common>
    74ce:	3001      	adds	r0, #1
    74d0:	d155      	bne.n	757e <_printf_i+0x1e6>
    74d2:	f04f 30ff 	mov.w	r0, #4294967295
    74d6:	b005      	add	sp, #20
    74d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    74dc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    74e0:	493c      	ldr	r1, [pc, #240]	; (75d4 <_printf_i+0x23c>)
    74e2:	6822      	ldr	r2, [r4, #0]
    74e4:	6818      	ldr	r0, [r3, #0]
    74e6:	f012 0f80 	tst.w	r2, #128	; 0x80
    74ea:	f100 0504 	add.w	r5, r0, #4
    74ee:	601d      	str	r5, [r3, #0]
    74f0:	d001      	beq.n	74f6 <_printf_i+0x15e>
    74f2:	6803      	ldr	r3, [r0, #0]
    74f4:	e002      	b.n	74fc <_printf_i+0x164>
    74f6:	0655      	lsls	r5, r2, #25
    74f8:	d5fb      	bpl.n	74f2 <_printf_i+0x15a>
    74fa:	8803      	ldrh	r3, [r0, #0]
    74fc:	07d0      	lsls	r0, r2, #31
    74fe:	bf44      	itt	mi
    7500:	f042 0220 	orrmi.w	r2, r2, #32
    7504:	6022      	strmi	r2, [r4, #0]
    7506:	b91b      	cbnz	r3, 7510 <_printf_i+0x178>
    7508:	6822      	ldr	r2, [r4, #0]
    750a:	f022 0220 	bic.w	r2, r2, #32
    750e:	6022      	str	r2, [r4, #0]
    7510:	2210      	movs	r2, #16
    7512:	e7b1      	b.n	7478 <_printf_i+0xe0>
    7514:	4675      	mov	r5, lr
    7516:	fbb3 f0f2 	udiv	r0, r3, r2
    751a:	fb02 3310 	mls	r3, r2, r0, r3
    751e:	5ccb      	ldrb	r3, [r1, r3]
    7520:	f805 3d01 	strb.w	r3, [r5, #-1]!
    7524:	4603      	mov	r3, r0
    7526:	2800      	cmp	r0, #0
    7528:	d1f5      	bne.n	7516 <_printf_i+0x17e>
    752a:	e7b7      	b.n	749c <_printf_i+0x104>
    752c:	6808      	ldr	r0, [r1, #0]
    752e:	681a      	ldr	r2, [r3, #0]
    7530:	6949      	ldr	r1, [r1, #20]
    7532:	f010 0f80 	tst.w	r0, #128	; 0x80
    7536:	d004      	beq.n	7542 <_printf_i+0x1aa>
    7538:	1d10      	adds	r0, r2, #4
    753a:	6018      	str	r0, [r3, #0]
    753c:	6813      	ldr	r3, [r2, #0]
    753e:	6019      	str	r1, [r3, #0]
    7540:	e007      	b.n	7552 <_printf_i+0x1ba>
    7542:	f010 0f40 	tst.w	r0, #64	; 0x40
    7546:	f102 0004 	add.w	r0, r2, #4
    754a:	6018      	str	r0, [r3, #0]
    754c:	6813      	ldr	r3, [r2, #0]
    754e:	d0f6      	beq.n	753e <_printf_i+0x1a6>
    7550:	8019      	strh	r1, [r3, #0]
    7552:	2300      	movs	r3, #0
    7554:	6123      	str	r3, [r4, #16]
    7556:	4675      	mov	r5, lr
    7558:	e7b1      	b.n	74be <_printf_i+0x126>
    755a:	681a      	ldr	r2, [r3, #0]
    755c:	1d11      	adds	r1, r2, #4
    755e:	6019      	str	r1, [r3, #0]
    7560:	6815      	ldr	r5, [r2, #0]
    7562:	6862      	ldr	r2, [r4, #4]
    7564:	2100      	movs	r1, #0
    7566:	4628      	mov	r0, r5
    7568:	f000 f83a 	bl	75e0 <memchr>
    756c:	b108      	cbz	r0, 7572 <_printf_i+0x1da>
    756e:	1b40      	subs	r0, r0, r5
    7570:	6060      	str	r0, [r4, #4]
    7572:	6863      	ldr	r3, [r4, #4]
    7574:	6123      	str	r3, [r4, #16]
    7576:	2300      	movs	r3, #0
    7578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    757c:	e79f      	b.n	74be <_printf_i+0x126>
    757e:	6923      	ldr	r3, [r4, #16]
    7580:	462a      	mov	r2, r5
    7582:	4639      	mov	r1, r7
    7584:	4630      	mov	r0, r6
    7586:	47c0      	blx	r8
    7588:	3001      	adds	r0, #1
    758a:	d0a2      	beq.n	74d2 <_printf_i+0x13a>
    758c:	6823      	ldr	r3, [r4, #0]
    758e:	079b      	lsls	r3, r3, #30
    7590:	d507      	bpl.n	75a2 <_printf_i+0x20a>
    7592:	2500      	movs	r5, #0
    7594:	f104 0919 	add.w	r9, r4, #25
    7598:	68e3      	ldr	r3, [r4, #12]
    759a:	9a03      	ldr	r2, [sp, #12]
    759c:	1a9b      	subs	r3, r3, r2
    759e:	429d      	cmp	r5, r3
    75a0:	db05      	blt.n	75ae <_printf_i+0x216>
    75a2:	68e0      	ldr	r0, [r4, #12]
    75a4:	9b03      	ldr	r3, [sp, #12]
    75a6:	4298      	cmp	r0, r3
    75a8:	bfb8      	it	lt
    75aa:	4618      	movlt	r0, r3
    75ac:	e793      	b.n	74d6 <_printf_i+0x13e>
    75ae:	2301      	movs	r3, #1
    75b0:	464a      	mov	r2, r9
    75b2:	4639      	mov	r1, r7
    75b4:	4630      	mov	r0, r6
    75b6:	47c0      	blx	r8
    75b8:	3001      	adds	r0, #1
    75ba:	d08a      	beq.n	74d2 <_printf_i+0x13a>
    75bc:	3501      	adds	r5, #1
    75be:	e7eb      	b.n	7598 <_printf_i+0x200>
    75c0:	2b00      	cmp	r3, #0
    75c2:	d1a7      	bne.n	7514 <_printf_i+0x17c>
    75c4:	780b      	ldrb	r3, [r1, #0]
    75c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    75ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
    75ce:	e765      	b.n	749c <_printf_i+0x104>
    75d0:	000098e9 	.word	0x000098e9
    75d4:	000098d8 	.word	0x000098d8
	...

000075e0 <memchr>:
    75e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    75e4:	2a10      	cmp	r2, #16
    75e6:	db2b      	blt.n	7640 <memchr+0x60>
    75e8:	f010 0f07 	tst.w	r0, #7
    75ec:	d008      	beq.n	7600 <memchr+0x20>
    75ee:	f810 3b01 	ldrb.w	r3, [r0], #1
    75f2:	3a01      	subs	r2, #1
    75f4:	428b      	cmp	r3, r1
    75f6:	d02d      	beq.n	7654 <memchr+0x74>
    75f8:	f010 0f07 	tst.w	r0, #7
    75fc:	b342      	cbz	r2, 7650 <memchr+0x70>
    75fe:	d1f6      	bne.n	75ee <memchr+0xe>
    7600:	b4f0      	push	{r4, r5, r6, r7}
    7602:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    7606:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    760a:	f022 0407 	bic.w	r4, r2, #7
    760e:	f07f 0700 	mvns.w	r7, #0
    7612:	2300      	movs	r3, #0
    7614:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    7618:	3c08      	subs	r4, #8
    761a:	ea85 0501 	eor.w	r5, r5, r1
    761e:	ea86 0601 	eor.w	r6, r6, r1
    7622:	fa85 f547 	uadd8	r5, r5, r7
    7626:	faa3 f587 	sel	r5, r3, r7
    762a:	fa86 f647 	uadd8	r6, r6, r7
    762e:	faa5 f687 	sel	r6, r5, r7
    7632:	b98e      	cbnz	r6, 7658 <memchr+0x78>
    7634:	d1ee      	bne.n	7614 <memchr+0x34>
    7636:	bcf0      	pop	{r4, r5, r6, r7}
    7638:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    763c:	f002 0207 	and.w	r2, r2, #7
    7640:	b132      	cbz	r2, 7650 <memchr+0x70>
    7642:	f810 3b01 	ldrb.w	r3, [r0], #1
    7646:	3a01      	subs	r2, #1
    7648:	ea83 0301 	eor.w	r3, r3, r1
    764c:	b113      	cbz	r3, 7654 <memchr+0x74>
    764e:	d1f8      	bne.n	7642 <memchr+0x62>
    7650:	2000      	movs	r0, #0
    7652:	4770      	bx	lr
    7654:	3801      	subs	r0, #1
    7656:	4770      	bx	lr
    7658:	2d00      	cmp	r5, #0
    765a:	bf06      	itte	eq
    765c:	4635      	moveq	r5, r6
    765e:	3803      	subeq	r0, #3
    7660:	3807      	subne	r0, #7
    7662:	f015 0f01 	tst.w	r5, #1
    7666:	d107      	bne.n	7678 <memchr+0x98>
    7668:	3001      	adds	r0, #1
    766a:	f415 7f80 	tst.w	r5, #256	; 0x100
    766e:	bf02      	ittt	eq
    7670:	3001      	addeq	r0, #1
    7672:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    7676:	3001      	addeq	r0, #1
    7678:	bcf0      	pop	{r4, r5, r6, r7}
    767a:	3801      	subs	r0, #1
    767c:	4770      	bx	lr
    767e:	bf00      	nop

00007680 <_realloc_r>:
    7680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7682:	4607      	mov	r7, r0
    7684:	4614      	mov	r4, r2
    7686:	460e      	mov	r6, r1
    7688:	b921      	cbnz	r1, 7694 <_realloc_r+0x14>
    768a:	4611      	mov	r1, r2
    768c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7690:	f7ff bb4e 	b.w	6d30 <_malloc_r>
    7694:	b922      	cbnz	r2, 76a0 <_realloc_r+0x20>
    7696:	f7ff fafd 	bl	6c94 <_free_r>
    769a:	4625      	mov	r5, r4
    769c:	4628      	mov	r0, r5
    769e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76a0:	f000 f814 	bl	76cc <_malloc_usable_size_r>
    76a4:	4284      	cmp	r4, r0
    76a6:	d90f      	bls.n	76c8 <_realloc_r+0x48>
    76a8:	4621      	mov	r1, r4
    76aa:	4638      	mov	r0, r7
    76ac:	f7ff fb40 	bl	6d30 <_malloc_r>
    76b0:	4605      	mov	r5, r0
    76b2:	2800      	cmp	r0, #0
    76b4:	d0f2      	beq.n	769c <_realloc_r+0x1c>
    76b6:	4631      	mov	r1, r6
    76b8:	4622      	mov	r2, r4
    76ba:	f7ff fabd 	bl	6c38 <memcpy>
    76be:	4631      	mov	r1, r6
    76c0:	4638      	mov	r0, r7
    76c2:	f7ff fae7 	bl	6c94 <_free_r>
    76c6:	e7e9      	b.n	769c <_realloc_r+0x1c>
    76c8:	4635      	mov	r5, r6
    76ca:	e7e7      	b.n	769c <_realloc_r+0x1c>

000076cc <_malloc_usable_size_r>:
    76cc:	f851 0c04 	ldr.w	r0, [r1, #-4]
    76d0:	2800      	cmp	r0, #0
    76d2:	f1a0 0004 	sub.w	r0, r0, #4
    76d6:	bfbc      	itt	lt
    76d8:	580b      	ldrlt	r3, [r1, r0]
    76da:	18c0      	addlt	r0, r0, r3
    76dc:	4770      	bx	lr
    76de:	0000      	movs	r0, r0
    76e0:	2a2a2a2a 	.word	0x2a2a2a2a
    76e4:	2a2a2a2a 	.word	0x2a2a2a2a
    76e8:	2a2a2a2a 	.word	0x2a2a2a2a
    76ec:	2a2a2a2a 	.word	0x2a2a2a2a
    76f0:	2a2a2a2a 	.word	0x2a2a2a2a
    76f4:	2a2a2a2a 	.word	0x2a2a2a2a
    76f8:	2a2a2a2a 	.word	0x2a2a2a2a
    76fc:	2a2a2a2a 	.word	0x2a2a2a2a
    7700:	2a2a2a2a 	.word	0x2a2a2a2a
    7704:	2a2a2a2a 	.word	0x2a2a2a2a
    7708:	2a2a2a2a 	.word	0x2a2a2a2a
    770c:	2a2a2a2a 	.word	0x2a2a2a2a
    7710:	2a2a2a2a 	.word	0x2a2a2a2a
    7714:	2a2a2a2a 	.word	0x2a2a2a2a
    7718:	00002a2a 	.word	0x00002a2a
    771c:	2a2a2a2a 	.word	0x2a2a2a2a
    7720:	2a2a2a2a 	.word	0x2a2a2a2a
    7724:	2a2a2a2a 	.word	0x2a2a2a2a
    7728:	532a2a2a 	.word	0x532a2a2a
    772c:	4b434154 	.word	0x4b434154
    7730:	45564f20 	.word	0x45564f20
    7734:	4f4c4652 	.word	0x4f4c4652
    7738:	45442057 	.word	0x45442057
    773c:	54434554 	.word	0x54434554
    7740:	2a2a4445 	.word	0x2a2a4445
    7744:	2a2a2a2a 	.word	0x2a2a2a2a
    7748:	2a2a2a2a 	.word	0x2a2a2a2a
    774c:	2a2a2a2a 	.word	0x2a2a2a2a
    7750:	2a2a2a2a 	.word	0x2a2a2a2a
    7754:	00002a2a 	.word	0x00002a2a
    7758:	6b736154 	.word	0x6b736154
    775c:	6e614820 	.word	0x6e614820
    7760:	20656c64 	.word	0x20656c64
    7764:	6425202d 	.word	0x6425202d
    7768:	00000a0d 	.word	0x00000a0d
    776c:	2a2a2a2a 	.word	0x2a2a2a2a
    7770:	2a2a2a2a 	.word	0x2a2a2a2a
    7774:	2a2a2a2a 	.word	0x2a2a2a2a
    7778:	4d2a2a2a 	.word	0x4d2a2a2a
    777c:	4f4c4c41 	.word	0x4f4c4c41
    7780:	41462043 	.word	0x41462043
    7784:	52554c49 	.word	0x52554c49
    7788:	45442045 	.word	0x45442045
    778c:	54434554 	.word	0x54434554
    7790:	2a2a4445 	.word	0x2a2a4445
    7794:	2a2a2a2a 	.word	0x2a2a2a2a
    7798:	2a2a2a2a 	.word	0x2a2a2a2a
    779c:	2a2a2a2a 	.word	0x2a2a2a2a
    77a0:	2a2a2a2a 	.word	0x2a2a2a2a
    77a4:	00002a2a 	.word	0x00002a2a
    77a8:	41204e49 	.word	0x41204e49
    77ac:	5f304344 	.word	0x5f304344
    77b0:	61682030 	.word	0x61682030
    77b4:	656c646e 	.word	0x656c646e
    77b8:	00000072 	.word	0x00000072
    77bc:	41204e49 	.word	0x41204e49
    77c0:	5f304344 	.word	0x5f304344
    77c4:	61682031 	.word	0x61682031
    77c8:	656c646e 	.word	0x656c646e
    77cc:	00000072 	.word	0x00000072
    77d0:	41544f46 	.word	0x41544f46
    77d4:	43203a20 	.word	0x43203a20
    77d8:	4b434548 	.word	0x4b434548
    77dc:	20474e49 	.word	0x20474e49
    77e0:	20524f46 	.word	0x20524f46
    77e4:	45444f4d 	.word	0x45444f4d
    77e8:	4946204d 	.word	0x4946204d
    77ec:	41574d52 	.word	0x41574d52
    77f0:	55204552 	.word	0x55204552
    77f4:	54414450 	.word	0x54414450
    77f8:	52462045 	.word	0x52462045
    77fc:	41204d4f 	.word	0x41204d4f
    7800:	56205249 	.word	0x56205249
    7804:	41544e41 	.word	0x41544e41
    7808:	53204547 	.word	0x53204547
    780c:	45565245 	.word	0x45565245
    7810:	00002e52 	.word	0x00002e52
    7814:	00004b4f 	.word	0x00004b4f
    7818:	6d726946 	.word	0x6d726946
    781c:	65726177 	.word	0x65726177
    7820:	6e776f44 	.word	0x6e776f44
    7824:	64616f6c 	.word	0x64616f6c
    7828:	63656843 	.word	0x63656843
    782c:	6d69546b 	.word	0x6d69546b
    7830:	00007265 	.word	0x00007265
    7834:	6f727245 	.word	0x6f727245
    7838:	46203a72 	.word	0x46203a72
    783c:	2041544f 	.word	0x2041544f
    7840:	656d6974 	.word	0x656d6974
    7844:	6f6e2072 	.word	0x6f6e2072
    7848:	74732074 	.word	0x74732074
    784c:	65747261 	.word	0x65747261
    7850:	52202e64 	.word	0x52202e64
    7854:	6f6f6265 	.word	0x6f6f6265
    7858:	676e6974 	.word	0x676e6974
    785c:	65687420 	.word	0x65687420
    7860:	73797320 	.word	0x73797320
    7864:	2e6d6574 	.word	0x2e6d6574
    7868:	00002e2e 	.word	0x00002e2e
    786c:	6c696146 	.word	0x6c696146
    7870:	74206465 	.word	0x74206465
    7874:	6573206f 	.word	0x6573206f
    7878:	7420746e 	.word	0x7420746e
    787c:	73206568 	.word	0x73206568
    7880:	41207465 	.word	0x41207465
    7884:	72204e50 	.word	0x72204e50
    7888:	65757165 	.word	0x65757165
    788c:	74207473 	.word	0x74207473
    7890:	7854206f 	.word	0x7854206f
    7894:	73615420 	.word	0x73615420
    7898:	0000006b 	.word	0x0000006b
    789c:	6f727245 	.word	0x6f727245
    78a0:	203a2072 	.word	0x203a2072
    78a4:	20746f4e 	.word	0x20746f4e
    78a8:	656c6261 	.word	0x656c6261
    78ac:	206f7420 	.word	0x206f7420
    78b0:	6174626f 	.word	0x6174626f
    78b4:	54206e69 	.word	0x54206e69
    78b8:	65532078 	.word	0x65532078
    78bc:	6170616d 	.word	0x6170616d
    78c0:	65726f68 	.word	0x65726f68
    78c4:	00000000 	.word	0x00000000
    78c8:	6e617254 	.word	0x6e617254
    78cc:	74696d73 	.word	0x74696d73
    78d0:	65755120 	.word	0x65755120
    78d4:	69206575 	.word	0x69206575
    78d8:	6f6e2073 	.word	0x6f6e2073
    78dc:	6d652074 	.word	0x6d652074
    78e0:	00797470 	.word	0x00797470
    78e4:	41544f46 	.word	0x41544f46
    78e8:	53203a20 	.word	0x53203a20
    78ec:	74207465 	.word	0x74207465
    78f0:	41206568 	.word	0x41206568
    78f4:	66204e50 	.word	0x66204e50
    78f8:	6320726f 	.word	0x6320726f
    78fc:	656e6e6f 	.word	0x656e6e6f
    7900:	6e697463 	.word	0x6e697463
    7904:	6f742067 	.word	0x6f742067
    7908:	72694120 	.word	0x72694120
    790c:	6e615620 	.word	0x6e615620
    7910:	65676174 	.word	0x65676174
    7914:	00000000 	.word	0x00000000
    7918:	6f727245 	.word	0x6f727245
    791c:	78453a72 	.word	0x78453a72
    7920:	74636570 	.word	0x74636570
    7924:	52206465 	.word	0x52206465
    7928:	6f707365 	.word	0x6f707365
    792c:	2065736e 	.word	0x2065736e
    7930:	20746f4e 	.word	0x20746f4e
    7934:	65636552 	.word	0x65636552
    7938:	64657669 	.word	0x64657669
    793c:	002e2e2e 	.word	0x002e2e2e
    7940:	6f727245 	.word	0x6f727245
    7944:	61463a72 	.word	0x61463a72
    7948:	64656c69 	.word	0x64656c69
    794c:	206f7420 	.word	0x206f7420
    7950:	65636572 	.word	0x65636572
    7954:	20657669 	.word	0x20657669
    7958:	6e6e6f63 	.word	0x6e6e6f63
    795c:	69746365 	.word	0x69746365
    7960:	72206e6f 	.word	0x72206e6f
    7964:	6f707365 	.word	0x6f707365
    7968:	2065736e 	.word	0x2065736e
    796c:	52206e69 	.word	0x52206e69
    7970:	6f6d2058 	.word	0x6f6d2058
    7974:	00006564 	.word	0x00006564
    7978:	6c696146 	.word	0x6c696146
    797c:	74206465 	.word	0x74206465
    7980:	6573206f 	.word	0x6573206f
    7984:	7420746e 	.word	0x7420746e
    7988:	73206568 	.word	0x73206568
    798c:	69767265 	.word	0x69767265
    7990:	69206563 	.word	0x69206563
    7994:	6369646e 	.word	0x6369646e
    7998:	6f697461 	.word	0x6f697461
    799c:	6572206e 	.word	0x6572206e
    79a0:	73657571 	.word	0x73657571
    79a4:	6f742074 	.word	0x6f742074
    79a8:	20785420 	.word	0x20785420
    79ac:	6b736154 	.word	0x6b736154
    79b0:	00000000 	.word	0x00000000
    79b4:	41544f46 	.word	0x41544f46
    79b8:	53203a20 	.word	0x53203a20
    79bc:	64207465 	.word	0x64207465
    79c0:	63697665 	.word	0x63697665
    79c4:	65732065 	.word	0x65732065
    79c8:	63697672 	.word	0x63697672
    79cc:	6e692065 	.word	0x6e692065
    79d0:	61636964 	.word	0x61636964
    79d4:	6e6f6974 	.word	0x6e6f6974
    79d8:	00002e73 	.word	0x00002e73
    79dc:	6c696146 	.word	0x6c696146
    79e0:	74206465 	.word	0x74206465
    79e4:	6573206f 	.word	0x6573206f
    79e8:	7420746e 	.word	0x7420746e
    79ec:	75206568 	.word	0x75206568
    79f0:	20726573 	.word	0x20726573
    79f4:	65726761 	.word	0x65726761
    79f8:	6e656d65 	.word	0x6e656d65
    79fc:	63612074 	.word	0x63612074
    7a00:	61766974 	.word	0x61766974
    7a04:	6e6f6974 	.word	0x6e6f6974
    7a08:	71657220 	.word	0x71657220
    7a0c:	74736575 	.word	0x74736575
    7a10:	726f6620 	.word	0x726f6620
    7a14:	20574620 	.word	0x20574620
    7a18:	6e776f64 	.word	0x6e776f64
    7a1c:	64616f6c 	.word	0x64616f6c
    7a20:	206f7420 	.word	0x206f7420
    7a24:	54207854 	.word	0x54207854
    7a28:	006b7361 	.word	0x006b7361
    7a2c:	41544f46 	.word	0x41544f46
    7a30:	53203a20 	.word	0x53203a20
    7a34:	75207465 	.word	0x75207465
    7a38:	20726573 	.word	0x20726573
    7a3c:	65726761 	.word	0x65726761
    7a40:	6e656d65 	.word	0x6e656d65
    7a44:	63612074 	.word	0x63612074
    7a48:	61766974 	.word	0x61766974
    7a4c:	6e6f6974 	.word	0x6e6f6974
    7a50:	726f6620 	.word	0x726f6620
    7a54:	20574620 	.word	0x20574620
    7a58:	6e776f64 	.word	0x6e776f64
    7a5c:	64616f6c 	.word	0x64616f6c
    7a60:	0000002e 	.word	0x0000002e
    7a64:	6c696146 	.word	0x6c696146
    7a68:	74206465 	.word	0x74206465
    7a6c:	6573206f 	.word	0x6573206f
    7a70:	7420746e 	.word	0x7420746e
    7a74:	75206568 	.word	0x75206568
    7a78:	20726573 	.word	0x20726573
    7a7c:	65726761 	.word	0x65726761
    7a80:	6e656d65 	.word	0x6e656d65
    7a84:	63612074 	.word	0x63612074
    7a88:	61766974 	.word	0x61766974
    7a8c:	6e6f6974 	.word	0x6e6f6974
    7a90:	71657220 	.word	0x71657220
    7a94:	74736575 	.word	0x74736575
    7a98:	726f6620 	.word	0x726f6620
    7a9c:	20574620 	.word	0x20574620
    7aa0:	74736e69 	.word	0x74736e69
    7aa4:	616c6c61 	.word	0x616c6c61
    7aa8:	6e6f6974 	.word	0x6e6f6974
    7aac:	206f7420 	.word	0x206f7420
    7ab0:	54207854 	.word	0x54207854
    7ab4:	006b7361 	.word	0x006b7361
    7ab8:	41544f46 	.word	0x41544f46
    7abc:	53203a20 	.word	0x53203a20
    7ac0:	75207465 	.word	0x75207465
    7ac4:	20726573 	.word	0x20726573
    7ac8:	65726761 	.word	0x65726761
    7acc:	6e656d65 	.word	0x6e656d65
    7ad0:	63612074 	.word	0x63612074
    7ad4:	61766974 	.word	0x61766974
    7ad8:	6e6f6974 	.word	0x6e6f6974
    7adc:	726f6620 	.word	0x726f6620
    7ae0:	20574620 	.word	0x20574620
    7ae4:	74736e69 	.word	0x74736e69
    7ae8:	616c6c61 	.word	0x616c6c61
    7aec:	6e6f6974 	.word	0x6e6f6974
    7af0:	0000002e 	.word	0x0000002e
    7af4:	6c696146 	.word	0x6c696146
    7af8:	74206465 	.word	0x74206465
    7afc:	6573206f 	.word	0x6573206f
    7b00:	7420746e 	.word	0x7420746e
    7b04:	73206568 	.word	0x73206568
    7b08:	74726174 	.word	0x74726174
    7b0c:	204d4420 	.word	0x204d4420
    7b10:	73736573 	.word	0x73736573
    7b14:	206e6f69 	.word	0x206e6f69
    7b18:	75716572 	.word	0x75716572
    7b1c:	20747365 	.word	0x20747365
    7b20:	54206f74 	.word	0x54206f74
    7b24:	61542078 	.word	0x61542078
    7b28:	00006b73 	.word	0x00006b73
    7b2c:	41544f46 	.word	0x41544f46
    7b30:	49203a20 	.word	0x49203a20
    7b34:	6974696e 	.word	0x6974696e
    7b38:	6e697461 	.word	0x6e697461
    7b3c:	68742067 	.word	0x68742067
    7b40:	4d442065 	.word	0x4d442065
    7b44:	73657320 	.word	0x73657320
    7b48:	6e6f6973 	.word	0x6e6f6973
    7b4c:	74697720 	.word	0x74697720
    7b50:	69412068 	.word	0x69412068
    7b54:	61562072 	.word	0x61562072
    7b58:	6761746e 	.word	0x6761746e
    7b5c:	00002e65 	.word	0x00002e65
    7b60:	572b0a0d 	.word	0x572b0a0d
    7b64:	3a495344 	.word	0x3a495344
    7b68:	00000020 	.word	0x00000020
    7b6c:	41544f46 	.word	0x41544f46
    7b70:	41203a20 	.word	0x41203a20
    7b74:	49204e50 	.word	0x49204e50
    7b78:	45532053 	.word	0x45532053
    7b7c:	52202e54 	.word	0x52202e54
    7b80:	59444145 	.word	0x59444145
    7b84:	524f4620 	.word	0x524f4620
    7b88:	204d4420 	.word	0x204d4420
    7b8c:	53534553 	.word	0x53534553
    7b90:	2e4e4f49 	.word	0x2e4e4f49
    7b94:	00000a0d 	.word	0x00000a0d
    7b98:	41544f46 	.word	0x41544f46
    7b9c:	41203a20 	.word	0x41203a20
    7ba0:	41565249 	.word	0x41565249
    7ba4:	4741544e 	.word	0x4741544e
    7ba8:	524f2045 	.word	0x524f2045
    7bac:	4e494749 	.word	0x4e494749
    7bb0:	44455441 	.word	0x44455441
    7bb4:	204d4420 	.word	0x204d4420
    7bb8:	53534553 	.word	0x53534553
    7bbc:	204e4f49 	.word	0x204e4f49
    7bc0:	55514552 	.word	0x55514552
    7bc4:	2e545345 	.word	0x2e545345
    7bc8:	00000a0d 	.word	0x00000a0d
    7bcc:	41544f46 	.word	0x41544f46
    7bd0:	41203a20 	.word	0x41203a20
    7bd4:	41565249 	.word	0x41565249
    7bd8:	4741544e 	.word	0x4741544e
    7bdc:	45522045 	.word	0x45522045
    7be0:	53455551 	.word	0x53455551
    7be4:	46205354 	.word	0x46205354
    7be8:	4620524f 	.word	0x4620524f
    7bec:	574d5249 	.word	0x574d5249
    7bf0:	20455241 	.word	0x20455241
    7bf4:	4e574f44 	.word	0x4e574f44
    7bf8:	44414f4c 	.word	0x44414f4c
    7bfc:	000a0d2e 	.word	0x000a0d2e
    7c00:	41544f46 	.word	0x41544f46
    7c04:	41203a20 	.word	0x41203a20
    7c08:	41565249 	.word	0x41565249
    7c0c:	4741544e 	.word	0x4741544e
    7c10:	45522045 	.word	0x45522045
    7c14:	53455551 	.word	0x53455551
    7c18:	46205354 	.word	0x46205354
    7c1c:	4620524f 	.word	0x4620524f
    7c20:	574d5249 	.word	0x574d5249
    7c24:	20455241 	.word	0x20455241
    7c28:	54534e49 	.word	0x54534e49
    7c2c:	414c4c41 	.word	0x414c4c41
    7c30:	4e4f4954 	.word	0x4e4f4954
    7c34:	000a0d2e 	.word	0x000a0d2e
    7c38:	41544f46 	.word	0x41544f46
    7c3c:	53203a20 	.word	0x53203a20
    7c40:	54524154 	.word	0x54524154
    7c44:	20474e49 	.word	0x20474e49
    7c48:	54205055 	.word	0x54205055
    7c4c:	44204548 	.word	0x44204548
    7c50:	4553204d 	.word	0x4553204d
    7c54:	4f495353 	.word	0x4f495353
    7c58:	4957204e 	.word	0x4957204e
    7c5c:	41204854 	.word	0x41204854
    7c60:	41565249 	.word	0x41565249
    7c64:	4741544e 	.word	0x4741544e
    7c68:	0a0d2e45 	.word	0x0a0d2e45
    7c6c:	00000000 	.word	0x00000000
    7c70:	41544f46 	.word	0x41544f46
    7c74:	44203a20 	.word	0x44203a20
    7c78:	4553204d 	.word	0x4553204d
    7c7c:	4f495353 	.word	0x4f495353
    7c80:	5453204e 	.word	0x5453204e
    7c84:	45545241 	.word	0x45545241
    7c88:	4e412044 	.word	0x4e412044
    7c8c:	52542044 	.word	0x52542044
    7c90:	41534e41 	.word	0x41534e41
    7c94:	4f495443 	.word	0x4f495443
    7c98:	4f20534e 	.word	0x4f20534e
    7c9c:	52554343 	.word	0x52554343
    7ca0:	0d2e4445 	.word	0x0d2e4445
    7ca4:	0000000a 	.word	0x0000000a
    7ca8:	41544f46 	.word	0x41544f46
    7cac:	44203a20 	.word	0x44203a20
    7cb0:	4553204d 	.word	0x4553204d
    7cb4:	4f495353 	.word	0x4f495353
    7cb8:	4957204e 	.word	0x4957204e
    7cbc:	41204854 	.word	0x41204854
    7cc0:	41565249 	.word	0x41565249
    7cc4:	4741544e 	.word	0x4741544e
    7cc8:	53492045 	.word	0x53492045
    7ccc:	4f4c4320 	.word	0x4f4c4320
    7cd0:	2e444553 	.word	0x2e444553
    7cd4:	00000a0d 	.word	0x00000a0d
    7cd8:	41544f46 	.word	0x41544f46
    7cdc:	46203a20 	.word	0x46203a20
    7ce0:	574d5249 	.word	0x574d5249
    7ce4:	20455241 	.word	0x20455241
    7ce8:	41445055 	.word	0x41445055
    7cec:	49204554 	.word	0x49204554
    7cf0:	4f4e2053 	.word	0x4f4e2053
    7cf4:	45502054 	.word	0x45502054
    7cf8:	524f4652 	.word	0x524f4652
    7cfc:	2e44454d 	.word	0x2e44454d
    7d00:	00000000 	.word	0x00000000
    7d04:	41544f46 	.word	0x41544f46
    7d08:	49203a20 	.word	0x49203a20
    7d0c:	4154534e 	.word	0x4154534e
    7d10:	44454c4c 	.word	0x44454c4c
    7d14:	52494620 	.word	0x52494620
    7d18:	5241574d 	.word	0x5241574d
    7d1c:	414d2045 	.word	0x414d2045
    7d20:	45484354 	.word	0x45484354
    7d24:	49572053 	.word	0x49572053
    7d28:	46204854 	.word	0x46204854
    7d2c:	574d5249 	.word	0x574d5249
    7d30:	20455241 	.word	0x20455241
    7d34:	4d4f5246 	.word	0x4d4f5246
    7d38:	52494120 	.word	0x52494120
    7d3c:	4e415620 	.word	0x4e415620
    7d40:	45474154 	.word	0x45474154
    7d44:	52455320 	.word	0x52455320
    7d48:	2e524556 	.word	0x2e524556
    7d4c:	00000a0d 	.word	0x00000a0d
    7d50:	41544f46 	.word	0x41544f46
    7d54:	53203a20 	.word	0x53203a20
    7d58:	45434355 	.word	0x45434355
    7d5c:	55465353 	.word	0x55465353
    7d60:	20594c4c 	.word	0x20594c4c
    7d64:	54534e49 	.word	0x54534e49
    7d68:	454c4c41 	.word	0x454c4c41
    7d6c:	48542044 	.word	0x48542044
    7d70:	4f442045 	.word	0x4f442045
    7d74:	4f4c4e57 	.word	0x4f4c4e57
    7d78:	44454441 	.word	0x44454441
    7d7c:	52494620 	.word	0x52494620
    7d80:	5241574d 	.word	0x5241574d
    7d84:	00002e45 	.word	0x00002e45
    7d88:	41544f46 	.word	0x41544f46
    7d8c:	52203a20 	.word	0x52203a20
    7d90:	4f4f4245 	.word	0x4f4f4245
    7d94:	474e4954 	.word	0x474e4954
    7d98:	45485420 	.word	0x45485420
    7d9c:	56454420 	.word	0x56454420
    7da0:	20454349 	.word	0x20454349
    7da4:	45544641 	.word	0x45544641
    7da8:	20412052 	.word	0x20412052
    7dac:	43435553 	.word	0x43435553
    7db0:	46535345 	.word	0x46535345
    7db4:	46204c55 	.word	0x46204c55
    7db8:	574d5249 	.word	0x574d5249
    7dbc:	20455241 	.word	0x20455241
    7dc0:	54534e49 	.word	0x54534e49
    7dc4:	414c4c41 	.word	0x414c4c41
    7dc8:	4e4f4954 	.word	0x4e4f4954
    7dcc:	000a0d2e 	.word	0x000a0d2e
    7dd0:	41544f46 	.word	0x41544f46
    7dd4:	46203a20 	.word	0x46203a20
    7dd8:	574d5249 	.word	0x574d5249
    7ddc:	20455241 	.word	0x20455241
    7de0:	41205349 	.word	0x41205349
    7de4:	4c494156 	.word	0x4c494156
    7de8:	454c4241 	.word	0x454c4241
    7dec:	524f4620 	.word	0x524f4620
    7df0:	574f4420 	.word	0x574f4420
    7df4:	414f4c4e 	.word	0x414f4c4e
    7df8:	0a0d2e44 	.word	0x0a0d2e44
    7dfc:	00000000 	.word	0x00000000
    7e00:	41544f46 	.word	0x41544f46
    7e04:	46203a20 	.word	0x46203a20
    7e08:	574d5249 	.word	0x574d5249
    7e0c:	20455241 	.word	0x20455241
    7e10:	44205349 	.word	0x44205349
    7e14:	4c4e574f 	.word	0x4c4e574f
    7e18:	4544414f 	.word	0x4544414f
    7e1c:	4e412044 	.word	0x4e412044
    7e20:	54532044 	.word	0x54532044
    7e24:	4445524f 	.word	0x4445524f
    7e28:	204e4920 	.word	0x204e4920
    7e2c:	53414c46 	.word	0x53414c46
    7e30:	0a0d2e48 	.word	0x0a0d2e48
    7e34:	00000000 	.word	0x00000000
    7e38:	41544f46 	.word	0x41544f46
    7e3c:	44203a20 	.word	0x44203a20
    7e40:	4c4e574f 	.word	0x4c4e574f
    7e44:	4544414f 	.word	0x4544414f
    7e48:	41502044 	.word	0x41502044
    7e4c:	47414b43 	.word	0x47414b43
    7e50:	53492045 	.word	0x53492045
    7e54:	52455620 	.word	0x52455620
    7e58:	45494649 	.word	0x45494649
    7e5c:	53412044 	.word	0x53412044
    7e60:	52454320 	.word	0x52454320
    7e64:	49464954 	.word	0x49464954
    7e68:	0d2e4445 	.word	0x0d2e4445
    7e6c:	0000000a 	.word	0x0000000a
    7e70:	41544f46 	.word	0x41544f46
    7e74:	49203a20 	.word	0x49203a20
    7e78:	4154534e 	.word	0x4154534e
    7e7c:	4e494c4c 	.word	0x4e494c4c
    7e80:	48542047 	.word	0x48542047
    7e84:	4f442045 	.word	0x4f442045
    7e88:	4f4c4e57 	.word	0x4f4c4e57
    7e8c:	44454441 	.word	0x44454441
    7e90:	52494620 	.word	0x52494620
    7e94:	5241574d 	.word	0x5241574d
    7e98:	2e2e2e45 	.word	0x2e2e2e45
    7e9c:	41454c50 	.word	0x41454c50
    7ea0:	57204553 	.word	0x57204553
    7ea4:	2e544941 	.word	0x2e544941
    7ea8:	0a0d2e2e 	.word	0x0a0d2e2e
    7eac:	00000000 	.word	0x00000000
    7eb0:	41544f46 	.word	0x41544f46
    7eb4:	53203a20 	.word	0x53203a20
    7eb8:	54524154 	.word	0x54524154
    7ebc:	20474e49 	.word	0x20474e49
    7ec0:	20454854 	.word	0x20454854
    7ec4:	4d524946 	.word	0x4d524946
    7ec8:	45524157 	.word	0x45524157
    7ecc:	44505520 	.word	0x44505520
    7ed0:	2e455441 	.word	0x2e455441
    7ed4:	00000a0d 	.word	0x00000a0d
    7ed8:	41544f46 	.word	0x41544f46
    7edc:	46203a20 	.word	0x46203a20
    7ee0:	454c4941 	.word	0x454c4941
    7ee4:	4f542044 	.word	0x4f542044
    7ee8:	44505520 	.word	0x44505520
    7eec:	20455441 	.word	0x20455441
    7ef0:	20454854 	.word	0x20454854
    7ef4:	4d524946 	.word	0x4d524946
    7ef8:	45524157 	.word	0x45524157
    7efc:	0000002e 	.word	0x0000002e
    7f00:	41544f46 	.word	0x41544f46
    7f04:	52203a20 	.word	0x52203a20
    7f08:	4f4f4245 	.word	0x4f4f4245
    7f0c:	474e4954 	.word	0x474e4954
    7f10:	45485420 	.word	0x45485420
    7f14:	56454420 	.word	0x56454420
    7f18:	20454349 	.word	0x20454349
    7f1c:	45544641 	.word	0x45544641
    7f20:	20412052 	.word	0x20412052
    7f24:	4c494146 	.word	0x4c494146
    7f28:	41204445 	.word	0x41204445
    7f2c:	4d455454 	.word	0x4d455454
    7f30:	4f205450 	.word	0x4f205450
    7f34:	49462046 	.word	0x49462046
    7f38:	41574d52 	.word	0x41574d52
    7f3c:	49204552 	.word	0x49204552
    7f40:	4154534e 	.word	0x4154534e
    7f44:	54414c4c 	.word	0x54414c4c
    7f48:	2e4e4f49 	.word	0x2e4e4f49
    7f4c:	00000a0d 	.word	0x00000a0d
    7f50:	41544f46 	.word	0x41544f46
    7f54:	44203a20 	.word	0x44203a20
    7f58:	4c4e574f 	.word	0x4c4e574f
    7f5c:	4944414f 	.word	0x4944414f
    7f60:	5420474e 	.word	0x5420474e
    7f64:	46204548 	.word	0x46204548
    7f68:	574d5249 	.word	0x574d5249
    7f6c:	20455241 	.word	0x20455241
    7f70:	4d4f5246 	.word	0x4d4f5246
    7f74:	52494120 	.word	0x52494120
    7f78:	4e415620 	.word	0x4e415620
    7f7c:	45474154 	.word	0x45474154
    7f80:	52455320 	.word	0x52455320
    7f84:	2e524556 	.word	0x2e524556
    7f88:	4c502e2e 	.word	0x4c502e2e
    7f8c:	45534145 	.word	0x45534145
    7f90:	49415720 	.word	0x49415720
    7f94:	2e2e2e54 	.word	0x2e2e2e54
    7f98:	00000a0d 	.word	0x00000a0d
    7f9c:	6f727245 	.word	0x6f727245
    7fa0:	46203a72 	.word	0x46203a72
    7fa4:	656c6961 	.word	0x656c6961
    7fa8:	6f742064 	.word	0x6f742064
    7fac:	6e657320 	.word	0x6e657320
    7fb0:	57462074 	.word	0x57462074
    7fb4:	776f6420 	.word	0x776f6420
    7fb8:	616f6c6e 	.word	0x616f6c6e
    7fbc:	63612064 	.word	0x63612064
    7fc0:	74706563 	.word	0x74706563
    7fc4:	65636e61 	.word	0x65636e61
    7fc8:	206f7420 	.word	0x206f7420
    7fcc:	54207854 	.word	0x54207854
    7fd0:	006b7361 	.word	0x006b7361
    7fd4:	41544f46 	.word	0x41544f46
    7fd8:	41203a20 	.word	0x41203a20
    7fdc:	70656363 	.word	0x70656363
    7fe0:	20646574 	.word	0x20646574
    7fe4:	20656874 	.word	0x20656874
    7fe8:	75716572 	.word	0x75716572
    7fec:	20747365 	.word	0x20747365
    7ff0:	20726f66 	.word	0x20726f66
    7ff4:	6d726966 	.word	0x6d726966
    7ff8:	65726177 	.word	0x65726177
    7ffc:	776f4420 	.word	0x776f4420
    8000:	616f6c6e 	.word	0x616f6c6e
    8004:	6e612064 	.word	0x6e612064
    8008:	65732064 	.word	0x65732064
    800c:	7420746e 	.word	0x7420746e
    8010:	61206568 	.word	0x61206568
    8014:	6f6e6b63 	.word	0x6f6e6b63
    8018:	64656c77 	.word	0x64656c77
    801c:	6e656d67 	.word	0x6e656d67
    8020:	6f742074 	.word	0x6f742074
    8024:	72694120 	.word	0x72694120
    8028:	746e6176 	.word	0x746e6176
    802c:	20656761 	.word	0x20656761
    8030:	76726573 	.word	0x76726573
    8034:	00007265 	.word	0x00007265
    8038:	6f727245 	.word	0x6f727245
    803c:	46203a72 	.word	0x46203a72
    8040:	656c6961 	.word	0x656c6961
    8044:	6f742064 	.word	0x6f742064
    8048:	6e657320 	.word	0x6e657320
    804c:	57462074 	.word	0x57462074
    8050:	736e6920 	.word	0x736e6920
    8054:	6c6c6174 	.word	0x6c6c6174
    8058:	63636120 	.word	0x63636120
    805c:	61747065 	.word	0x61747065
    8060:	2065636e 	.word	0x2065636e
    8064:	54206f74 	.word	0x54206f74
    8068:	61542078 	.word	0x61542078
    806c:	00006b73 	.word	0x00006b73
    8070:	41544f46 	.word	0x41544f46
    8074:	41203a20 	.word	0x41203a20
    8078:	70656363 	.word	0x70656363
    807c:	20646574 	.word	0x20646574
    8080:	20656874 	.word	0x20656874
    8084:	75716572 	.word	0x75716572
    8088:	20747365 	.word	0x20747365
    808c:	20726f66 	.word	0x20726f66
    8090:	6d726966 	.word	0x6d726966
    8094:	65726177 	.word	0x65726177
    8098:	736e4920 	.word	0x736e4920
    809c:	6c6c6174 	.word	0x6c6c6174
    80a0:	6f697461 	.word	0x6f697461
    80a4:	6e61206e 	.word	0x6e61206e
    80a8:	65732064 	.word	0x65732064
    80ac:	7420746e 	.word	0x7420746e
    80b0:	61206568 	.word	0x61206568
    80b4:	6f6e6b63 	.word	0x6f6e6b63
    80b8:	64656c77 	.word	0x64656c77
    80bc:	6e656d67 	.word	0x6e656d67
    80c0:	6f742074 	.word	0x6f742074
    80c4:	72694120 	.word	0x72694120
    80c8:	746e6176 	.word	0x746e6176
    80cc:	20656761 	.word	0x20656761
    80d0:	76726573 	.word	0x76726573
    80d4:	00007265 	.word	0x00007265
    80d8:	41544f46 	.word	0x41544f46
    80dc:	53203a20 	.word	0x53203a20
    80e0:	54524154 	.word	0x54524154
    80e4:	20474e49 	.word	0x20474e49
    80e8:	54205055 	.word	0x54205055
    80ec:	46204548 	.word	0x46204548
    80f0:	574d5249 	.word	0x574d5249
    80f4:	20455241 	.word	0x20455241
    80f8:	54534e49 	.word	0x54534e49
    80fc:	414c4c41 	.word	0x414c4c41
    8100:	4e4f4954 	.word	0x4e4f4954
    8104:	000a0d2e 	.word	0x000a0d2e
    8108:	656c6553 	.word	0x656c6553
    810c:	4c207463 	.word	0x4c207463
    8110:	20656e69 	.word	0x20656e69
    8114:	20776f4c 	.word	0x20776f4c
    8118:	50202d20 	.word	0x50202d20
    811c:	0074726f 	.word	0x0074726f

00008120 <ModemCmdData>:
    8120:	00000300 000093a4 00000000 000030a1     .............0..
    8130:	00000000 00000001 00008600 00020003     ................
    8140:	000030a1 00000009 00000002 00008604     .0..............
    8150:	000f0008 000030a1 0000001b 00000003     .....0..........
    8160:	00008610 000e000c 000030a1 0000001e     .........0......
    8170:	00000004 00008620 000c0008 000030a1     .... ........0..
    8180:	00000018 00000005 0000862c 00080005     ........,.......
    8190:	000030a1 00000011 00000006 00008638     .0..........8...
    81a0:	000b000a 000030a1 00000019 00000007     .....0..........
    81b0:	00008644 0015000a 000030a1 00000023     D........0..#...
    81c0:	00000008 00008650 00020005 000030a1     ....P........0..
    81d0:	0000000b 00000109 00008658 003d0027     ........X...'.=.
    81e0:	000030a1 00000068 0000010a 00008680     .0..h...........
    81f0:	00020012 000030a1 00000018 0000010b     .....0..........
    8200:	00008694 00020012 000030a1 00000018     .........0......
    8210:	0000010c 000086a8 00020012 000030a1     .............0..
    8220:	00000018 0000010d 000086bc 00020012     ................
    8230:	000030a1 00000018 0000010e 000086d0     .0..............
    8240:	00020012 000030a1 00000018 0000010f     .....0..........
    8250:	000086e4 00020012 000030a1 00000018     .........0......
    8260:	00000110 000086f8 00020012 000030a1     .............0..
    8270:	00000018 00000111 0000870c 00020012     ................
    8280:	000030a1 00000018 00000112 00008720     .0.......... ...
    8290:	00020012 000030a1 00000018 00000113     .....0..........
    82a0:	00008734 00020013 000030a1 00000019     4........0......
    82b0:	00000114 00008748 0002001f 000030a1     ....H........0..
    82c0:	00000025 00000115 20000028 00020023     %.......(.. #...
    82d0:	000030a1 00000029 00000116 00008768     .0..).......h...
    82e0:	0002001a 000030a1 00000020 00000117     .....0.. .......
    82f0:	20000004 00070011 000030a1 0000001c     ... .....0......
    8300:	00000118 200002b8 00bf003a 000030a1     ....... :....0..
    8310:	000000fd 00000119 00008784 00020010     ................
    8320:	000030a1 00000016 0000011a 00008798     .0..............
    8330:	00020010 000030a1 00000016 0000011b     .....0..........
    8340:	000087ac 0002000b 000030a1 00000011     .........0......
    8350:	0000011c 000087b8 00b8000c 000030a1     .............0..
    8360:	000000c8 0000021d 000087c8 00020018     ................
    8370:	000030a1 0000001e 0000021e 000087e4     .0..............
    8380:	0002000c 000030a1 00000012 0000021f     .....0..........
    8390:	000087f4 0002000d 000030a1 00000013     .........0......
    83a0:	00000220 00008804 0002000c 000030a1      ............0..
    83b0:	00000012 00000221 00008814 0002000c     ....!...........
    83c0:	000030a1 00000012 00000222 00008824     .0......"...$...
    83d0:	0002000a 000030a1 00000010 00000223     .....0......#...
    83e0:	00008830 0002000a 000030a1 00000010     0........0......
	...
    85d0:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    85e0:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    85f0:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    8600:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    8610:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    8620:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    8630:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    8640:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    8650:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    8660:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    8670:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    8680:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    8690:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    86a0:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    86b0:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    86c0:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    86d0:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    86e0:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    86f0:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    8700:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    8710:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    8720:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    8730:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    8740:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    8750:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    8760:	2d6e7265 000d222d 4b2b5441 54584e43     ern--"..AT+KCNXT
    8770:	52454d49 362c333d 2c322c30 362c3037     IMER=3,60,2,70,6
    8780:	00000d30 4f452d2d 502d2d46 65747461     0...--EOF--Patte
    8790:	2d2d6e72 00000000 4b2b5441 44584e43     rn--....AT+KCNXD
    87a0:	3d4e574f 0d312c33 00000000 432b5441     OWN=3,1.....AT+C
    87b0:	54544147 000d303d 432b5441 4f434447     GATT=0..AT+CGDCO
    87c0:	0d3f544e 00000000 572b5441 3d535344     NT?.....AT+WDSS=
    87d0:	56222c30 4e49575a 4e524554 0d225445     0,"VZWINTERNET".
    87e0:	00000000 572b5441 3d535344 0d312c31     ....AT+WDSS=1,1.
    87f0:	00000000 572b5441 3d495344 31393138     ....AT+WDSI=8191
    8800:	0000000d 572b5441 3d435344 0d312c31     ....AT+WDSC=1,1.
    8810:	00000000 572b5441 3d435344 0d312c32     ....AT+WDSC=2,1.
    8820:	00000000 572b5441 3d525344 00000d33     ....AT+WDSR=3...
    8830:	572b5441 3d525344 00000d34 6f727245     AT+WDSR=4...Erro
    8840:	48203a72 20706165 6f6c6c61 69746163     r: Heap allocati
    8850:	66206e6f 7020726f 65737261 74616420     on for parse dat
    8860:	75622061 72656666 69616620 0064656c     a buffer failed.
    8870:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    8880:	76206f74 66697265 68742079 6f632065     to verify the co
    8890:	6e616d6d 74732064 676e6972 72756420     mmand string dur
    88a0:	20676e69 73726170 00676e69 6f727245     ing parsing.Erro
    88b0:	4e203a72 6120746f 20656c62 72206f74     r: Not able to r
    88c0:	20646165 61746164 6f726620 6572206d     ead data from re
    88d0:	76696563 69722065 6220676e 65666675     ceive ring buffe
    88e0:	75642072 676e6972 72617020 00726573     r during parser.
    88f0:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    8900:	69746163 66206e6f 7220726f 6f707365     cation for respo
    8910:	2065736e 61746164 66756220 20726566     nse data buffer 
    8920:	6c696166 00006465 6e6e6f43 69746365     failed..Connecti
    8930:	74206e6f 6874206f 65732065 72657672     on to the server
    8940:	20736920 74736f6c 2e2e2e2e 0000002e      is lost........
    8950:	69797254 7420676e 7365206f 6c626174     Trying to establ
    8960:	20687369 20656874 6e6e6f63 69746365     ish the connecti
    8970:	74206e6f 6573206f 72657672 502e2e2e     on to server...P
    8980:	7361656c 61772065 2e2e7469 2e2e2e2e     lease wait......
    8990:	00000a0d 6c696146 74206465 6573206f     ....Failed to se
    89a0:	7420746e 53206568 69737365 43206e6f     nt the Session C
    89b0:	65736f6c 71657220 74736575 206f7420     lose request to 
    89c0:	54207854 006b7361 4d206f4e 2065726f     Tx Task.No More 
    89d0:	69746341 43206576 656e6e6f 6f697463     Active Connectio
    89e0:	7420736e 6c63206f 0065736f 736f6c43     ns to close.Clos
    89f0:	41206465 41206c6c 76697463 6f432065     ed All Active Co
    8a00:	63656e6e 6e6f6974 00000073 6c696146     nnections...Fail
    8a10:	74206465 6572206f 76696563 6f632065     ed to receive co
    8a20:	63656e6e 6e6f6974 73657220 736e6f70     nnection respons
    8a30:	6e692065 20585220 65646f6d 00000000     e in RX mode....
    8a40:	756f7242 20746867 20656874 20504450     Brought the PDP 
    8a50:	6e6e6f63 69746365 44206e6f 004e574f     connection DOWN.
    8a60:	65707845 64657463 73655220 736e6f70     Expected Respons
    8a70:	6f4e2065 65522074 76696563 2e2e6465     e Not Received..
    8a80:	0000002e 6c696146 74206465 6573206f     ....Failed to se
    8a90:	7420746e 50206568 65442053 68636174     nt the PS Detach
    8aa0:	71657220 74736575 206f7420 54207854      request to Tx T
    8ab0:	006b7361 61746544 64656863 65687420     ask.Detached the
    8ac0:	50445020 00535020 656c6544 20646574      PDP PS.Deleted 
    8ad0:	206c6c61 7420666f 70206568 69766572     all of the previ
    8ae0:	2073756f 6e6e6f63 69746365 63206e6f     ous connection c
    8af0:	69666e6f 61727567 6e6f6974 00000073     onfigurations...
    8b00:	6c696146 74206465 6573206f 7420746e     Failed to sent t
    8b10:	45206568 7020464f 65747461 74206e72     he EOF pattern t
    8b20:	7854206f 73615420 0000006b 20464f45     o Tx Task...EOF 
    8b30:	74746150 206e7265 666e6f63 72756769     Pattern configur
    8b40:	00006465 6c696146 74206465 6573206f     ed..Failed to se
    8b50:	7420746e 72206568 69727465 20657665     nt the retrieve 
    8b60:	204e5041 6d6d6f63 20646e61 54206f74     APN command to T
    8b70:	61542078 00006b73 72746552 65766569     x Task..Retrieve
    8b80:	50412064 7473204e 676e6972 00000000     d APN string....
    8b90:	6c696146 74206465 6573206f 6120746e     Failed to sent a
    8ba0:	73656363 6f702073 20746e69 20646d63     ccess point cmd 
    8bb0:	54206f74 61542078 00006b73 65636341     to Tx Task..Acce
    8bc0:	50207373 746e696f 6e6f6320 75676966     ss Point configu
    8bd0:	00646572 6c696146 74206465 6573206f     red.Failed to se
    8be0:	6320746e 656e6e6f 6f697463 6974206e     nt connection ti
    8bf0:	2072656d 20646d63 54206f74 61542078     mer cmd to Tx Ta
    8c00:	00006b73 6e6e6f43 69746365 54206e6f     sk..Connection T
    8c10:	72656d69 6f632073 6769666e 64657275     imers configured
    8c20:	00000000 6e6e6f43 69746365 53206e6f     ....Connection S
    8c30:	75746174 203a2073 43534944 454e4e4f     tatus : DISCONNE
    8c40:	44455443 45554420 204f5420 5754454e     CTED DUE TO NETW
    8c50:	004b524f 6e6e6f43 69746365 53206e6f     ORK.Connection S
    8c60:	75746174 203a2073 4e4e4f43 45544345     tatus : CONNECTE
    8c70:	00000044 6e6e6f43 69746365 73206e6f     D...Connection s
    8c80:	65636375 75667373 2e2e2e6c 756f6c43     uccessful...Clou
    8c90:	65532064 72657672 6e6f6320 75676966     d Server configu
    8ca0:	00646572 6e6e6f43 69746365 53206e6f     red.Connection S
    8cb0:	75746174 203a2073 4c494146 54204445     tatus : FAILED T
    8cc0:	4f43204f 43454e4e 00000054 6e6e6f43     O CONNECT...Conn
    8cd0:	69746365 53206e6f 75746174 203a2073     ection Status : 
    8ce0:	4e4e4f43 49544345 43204e4f 45534f4c     CONNECTION CLOSE
    8cf0:	00000044 6e6e6f43 69746365 53206e6f     D...Connection S
    8d00:	75746174 203a2073 4e4e4f43 49544345     tatus : CONNECTI
    8d10:	49204e4f 5250204e 4552474f 00005353     ON IN PROGRESS..
    8d20:	6e6e6f43 69746365 53206e6f 75746174     Connection Statu
    8d30:	203a2073 454c4449 4d495420 53205245     s : IDLE TIMER S
    8d40:	54524154 46204445 4420524f 4f435349     TARTED FOR DISCO
    8d50:	43454e4e 4e4f4954 00000000 6e6e6f43     NNECTION....Conn
    8d60:	69746365 53206e6f 75746174 203a2073     ection Status : 
    8d70:	454c4449 4d495420 43205245 45434e41     IDLE TIMER CANCE
    8d80:	44454c4c 00000000 6f727245 203a2072     LLED....Error : 
    8d90:	6e6e6f43 69746365 46206e6f 756c6961     Connection Failu
    8da0:	00006572 74736552 69747261 7420676e     re..Restarting t
    8db0:	63206568 656e6e6f 6f697463 6e69206e     he connection in
    8dc0:	61697469 617a696c 6e6f6974 002e2e2e     itialization....
    8dd0:	4e4e4f43 00544345 736f6c43 20676e69     CONNECT.Closing 
    8de0:	69746341 43206576 656e6e6f 6f697463     Active Connectio
    8df0:	0000736e 4e4e4f43 0d544345 5454480a     ns..CONNECT..HTT
    8e00:	2e312f50 30322031 4b4f2030 00000000     P/1.1 200 OK....
    8e10:	6f430a0d 63656e6e 6e6f6974 746e6920     ..Connection int
    8e20:	75727265 64657470 502e2e2e 6f667265     errupted...Perfo
    8e30:	6e696d72 68742067 72452065 20726f72     rming the Error 
    8e40:	6f636552 79726576 2e2e2e2e 00000a0d     Recovery........
    8e50:	736f6c43 20676e69 20656874 69746361     Closing the acti
    8e60:	63206576 656e6e6f 6f697463 0000006e     ve connection...
    8e70:	626f7250 206d656c 41206e69 206f7475     Problem in Auto 
    8e80:	6f636552 79726576 0000002e 69797254     Recovery....Tryi
    8e90:	7420676e 6572206f 7473652d 696c6261     ng to re-establi
    8ea0:	74206873 63206568 656e6e6f 6f697463     sh the connectio
    8eb0:	6874206e 67756f72 20612068 65646f6d     n through a mode
    8ec0:	6572206d 72617473 2e2e2e74 000a0d2e     m restart.......
    8ed0:	6978614d 206d756d 72746572 6f632079     Maximum retry co
    8ee0:	20746e75 20726f66 6f747561 63657220     unt for auto rec
    8ef0:	7265766f 73692079 70786520 64657269     overy is expired
    8f00:	0000002e 69797254 7420676e 6572206f     ....Trying to re
    8f10:	7473652d 696c6261 74206873 63206568     -establish the c
    8f20:	656e6e6f 6f697463 6874206e 67756f72     onnection throug
    8f30:	20612068 6c6f6877 79732065 6d657473     h a whole system
    8f40:	73657220 74726174 2e2e2e2e 00000a0d      restart........
    8f50:	6f727245 65522072 65766f63 43207972     Error Recovery C
    8f60:	6c706d6f 64657465 00000a0d 3d3d3d3d     ompleted....====
    8f70:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    8f80:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    8f90:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0d3d     =============...
    8fa0:	61747345 73696c62 676e6968 6e206120     Establishing a n
    8fb0:	63207765 656e6e6f 6f697463 6977206e     ew connection wi
    8fc0:	73206874 65767265 00000072 74737953     th server...Syst
    8fd0:	69206d65 75612073 72206f74 766f6365     em is auto recov
    8fe0:	64657265 726f6620 726f6d20 68742065     ered for more th
    8ff0:	33206e61 6d697420 002e7365 66726550     an 3 times..Perf
    9000:	696d726f 6120676e 73797320 206d6574     orming a system 
    9010:	74736572 2e747261 2e2e2e2e 2e2e2e2e     restart.........
    9020:	2e2e2e2e 2e2e2e2e 0d2e2e2e 0000000a     ................
    9030:	66726550 696d726f 6620676e 6563726f     Performing force
    9040:	72652064 20726f72 6f636572 79726576     d error recovery
    9050:	2e2e2e2e 00000a0d 6c696146 74206465     ........Failed t
    9060:	6573206f 7420746e 44206568 20676169     o sent the Diag 
    9070:	61746164 206f7420 54207854 006b7361     data to Tx Task.
    9080:	69726556 6e697966 68742067 41552065     Verifying the UA
    9090:	4c205452 206b6e69 74617473 77207375     RT Link status w
    90a0:	20687469 65646f4d 0000006d 63637553     ith Modem...Succ
    90b0:	46737365 796c6c75 72657620 65696669     essFully verifie
    90c0:	68742064 41552065 4c205452 206b6e69     d the UART Link 
    90d0:	77746562 206e6565 444d4153 43203135     between SAMD51 C
    90e0:	72746e6f 656c6c6f 20262072 65646f4d     ontroller & Mode
    90f0:	0000006d 72746552 65766569 68742064     m...Retrieved th
    9100:	6f4d2065 206d6564 49454d49 6d754e20     e Modem IMEI Num
    9110:	00726562 72746552 65766569 68742064     ber.Retrieved th
    9120:	6f4d2065 206d6564 69726573 4e206c61     e Modem serial N
    9130:	65626d75 00000072 74736f48 6f725020     umber...Host Pro
    9140:	73736563 6120726f 4d20646e 6d65646f     cessor and Modem
    9150:	65726120 63757320 73736563 6c6c7566      are successfull
    9160:	6e692079 61697469 657a696c 2e2e2e64     y initialized...
    9170:	00000a0d 72756f48 5320796c 65747379     ....Hourly Syste
    9180:	6552206d 72617473 69742074 2072656d     m Restart timer 
    9190:	69707865 2e646572 62655220 69746f6f     expired. Rebooti
    91a0:	7420676e 73206568 65747379 0a0d2e6d     ng the system...
    91b0:	00000000 72756f48 7953796c 6d657473     ....HourlySystem
    91c0:	74736552 54747261 72656d69 00000000     RestartTimer....
    91d0:	6b636150 72547465 6d736e61 65507469     PacketTransmitPe
    91e0:	646f6972 69546369 0072656d 6c696146     riodicTimer.Fail
    91f0:	74206465 6e69206f 61697469 657a696c     ed to initialize
    9200:	65687420 646f6d20 74206d65 72656d69      the modem timer
    9210:	52202e73 6f6f6265 676e6974 65687420     s. Rebooting the
    9220:	73797320 006d6574 6c696146 74206465      system.Failed t
    9230:	6f70206f 74207473 63206568 656e6e6f     o post the conne
    9240:	6f697463 6552206e 6e6f7073 74206573     ction Response t
    9250:	7551206f 00657565 6f727245 203a2072     o Queue.Error : 
    9260:	6d6d6f43 20646e61 70736552 65736e6f     Command Response
    9270:	65755120 69206575 6f6e2073 6d652074      Queue is not em
    9280:	00797470 6c696146 74206465 6f70206f     pty.Failed to po
    9290:	74207473 63206568 656e6e6f 6f697463     st the connectio
    92a0:	6552206e 6e6f7073 74206573 6f46206f     n Response to Fo
    92b0:	51206174 65756575 00000000 4f525245     ta Queue....ERRO
    92c0:	52203a52 69656365 20646576 65206e61     R: Received an e
    92d0:	7974706d 73657220 736e6f70 74732065     mpty response st
    92e0:	676e6972 206e6920 6d6d6f63 20646e61     ring in command 
    92f0:	70736572 65736e6f 6e616820 72656c64     response handler
    9300:	00000000 4f525245 43203a52 616d6d6f     ....ERROR: Comma
    9310:	5020646e 69737261 4620676e 656c6961     nd Parsing Faile
    9320:	00000064 6f4e0a0d 62612074 7420656c     d.....Not able t
    9330:	7561206f 72206f74 766f6365 66207265     o auto recover f
    9340:	206d6f72 6e6e6f63 69746365 66206e6f     rom connection f
    9350:	756c6961 2e2e6572 6265522e 69746f6f     ailure...Rebooti
    9360:	2e2e676e 00002e2e 73207854 61697265     ng......Tx seria
    9370:	6544206c 20677562 656e6f44 00000a0d     l Debug Done....
    9380:	44207852 0d656e6f 0000000a 2d207325     Rx Done.....%s -
    9390:	20642520 00000a0d 2d207325 6d642520      %d ....%s - %dm
    93a0:	0a0d2056 00000000 682f2e2e 692f6c61     V ......../hal/i
    93b0:	756c636e 682f6564 775f6c61 682e7464     nclude/hal_wdt.h
    93c0:	00000000 2a232a23 2a232a23 2a232a23     ....#*#*#*#*#*#*
    93d0:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    93e0:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    93f0:	2a232a23 2a232a23 2a232a23 2a232a23     #*#*#*#*#*#*#*#*
    9400:	2a232a23 2a232a23 2a232a23 00000000     #*#*#*#*#*#*....
    9410:	78656e55 74636570 49206465 7265746e     Unexpected Inter
    9420:	74707572 70614820 656e6570 2e2e2e64     rupt Happened...
    9430:	74696157 20676e69 20726f66 20656874     Waiting for the 
    9440:	63746177 6f642068 69742067 756f656d     watch dog timeou
    9450:	00000074 682f2e2e 732f6c61 682f6372     t...../hal/src/h
    9460:	615f6c61 735f6364 2e636e79 00000063     al_adc_sync.c...
    9470:	682f2e2e 752f6c61 736c6974 6372732f     ../hal/utils/src
    9480:	6974752f 725f736c 62676e69 65666675     /utils_ringbuffe
    9490:	00632e72                                r.c.

00009494 <_adcs>:
    9494:	00c00000 00030009 02481980 00000000     ..........H.....
    94a4:	00000000 00010001 00000000 00000000     ................
	...
    94c0:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    94d0:	632e6364 00000000                       dc.c....

000094d8 <_cfgs>:
	...
    95d8:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    95e8:	43000000 43000400                       ...C...C

000095f0 <_usarts>:
    95f0:	00000003 40200004 00030000 00700002     ...... @......p.
    9600:	0000f62b 00000000 00000004 40300184     +.............0@
    9610:	00030300 00700002 0000ff2e 00000000     ......p.........
    9620:	00000005 40300004 00030000 00700002     ......0@......p.
    9630:	0000f62b 00000000                       +.......

00009638 <_i2cms>:
	...

00009650 <sercomspi_regs>:
	...
    9664:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    9674:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    9684:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    9694:	00000000 736e6553 6154726f 00006b73     ....SensorTask..
    96a4:	65646f4d 5478546d 006b7361 65646f4d     ModemTxTask.Mode
    96b4:	5478526d 006b7361 65646f4d 6f72506d     mRxTask.ModemPro
    96c4:	73736563 6b736154 00000000 65646f4d     cessTask....Mode
    96d4:	6169446d 73615467 0000006b 61746f46     mDiagTask...Fota
    96e4:	54707041 006b7361 65657246 4f545220     AppTask.Free RTO
    96f4:	63532053 75646568 2072656c 20746f6e     S Scheduler not 
    9704:	72617473 00646574 6c696146 74206465     started.Failed t
    9714:	7263206f 65746165 73617420 0000736b     o create tasks..
    9724:	6f727245 53203a72 64656863 72656c75     Error: Scheduler
    9734:	69786520 00646574 454c4449 00000000      exited.IDLE....
    9744:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    9754:	20726d54 00637653                       Tmr Svc.

0000975c <__sf_fake_stderr>:
	...

0000977c <__sf_fake_stdin>:
	...

0000979c <__sf_fake_stdout>:
	...
    97bc:	4f500043 00584953 2000002e                       C.POSIX...

000097c6 <_ctype_>:
    97c6:	20202000 20202020 28282020 20282828     .         ((((( 
    97d6:	20202020 20202020 20202020 20202020                     
    97e6:	10108820 10101010 10101010 10101010      ...............
    97f6:	04040410 04040404 10040404 10101010     ................
    9806:	41411010 41414141 01010101 01010101     ..AAAAAA........
    9816:	01010101 01010101 01010101 10101010     ................
    9826:	42421010 42424242 02020202 02020202     ..BBBBBB........
    9836:	02020202 02020202 02020202 10101010     ................
    9846:	00000020 00000000 00000000 00000000      ...............
	...
    98c6:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
    98d6:	31300047 35343332 39383736 44434241     G.0123456789ABCD
    98e6:	30004645 34333231 38373635 63626139     EF.0123456789abc
    98f6:	00666564 b5f80000                                def...

000098fc <_init>:
    98fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    98fe:	bf00      	nop
    9900:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9902:	bc08      	pop	{r3}
    9904:	469e      	mov	lr, r3
    9906:	4770      	bx	lr

00009908 <__init_array_start>:
    9908:	00000289 	.word	0x00000289

0000990c <_fini>:
    990c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    990e:	bf00      	nop
    9910:	bcf8      	pop	{r3, r4, r5, r6, r7}
    9912:	bc08      	pop	{r3}
    9914:	469e      	mov	lr, r3
    9916:	4770      	bx	lr

00009918 <__fini_array_start>:
    9918:	00000265 	.word	0x00000265
