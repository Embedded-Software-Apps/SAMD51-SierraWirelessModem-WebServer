
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000093d0  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000190  20000000  000093d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020190  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020190  2**0
                  CONTENTS
  4 .bss          00003d0c  20000190  00009560  00020190  2**4
                  ALLOC
  5 .stack        00010004  20003e9c  0000d26c  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201be  2**0
                  CONTENTS, READONLY
  8 .debug_info   000644d9  00000000  00000000  00020217  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a0db  00000000  00000000  000846f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c2e9  00000000  00000000  0008e7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001bb8  00000000  00000000  000aaab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000022c8  00000000  00000000  000ac66c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003edb3  00000000  00000000  000ae934  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00032ce2  00000000  00000000  000ed6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010916c  00000000  00000000  001203c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004a3c  00000000  00000000  00229538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 3e 01 20 81 2a 00 00 7d 2a 00 00 7d 2a 00 00     .>. .*..}*..}*..
      10:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 00 00 00 00     }*..}*..}*......
	...
      2c:	c1 51 00 00 7d 2a 00 00 00 00 00 00 61 52 00 00     .Q..}*......aR..
      3c:	c5 52 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     .R..}*..}*..}*..
      4c:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
      5c:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
      6c:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
      7c:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
      8c:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
      9c:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
      ac:	7d 2a 00 00 7d 2a 00 00 55 40 00 00 69 40 00 00     }*..}*..U@..i@..
      bc:	e5 3d 00 00 f1 3d 00 00 fd 3d 00 00 09 3e 00 00     .=...=...=...>..
      cc:	15 3e 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     .>..}*..}*..}*..
      dc:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
      ec:	7d 2a 00 00 00 00 00 00 65 41 00 00 7d 2a 00 00     }*......eA..}*..
      fc:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
     10c:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
     11c:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 51 1d 00 00     }*..}*..}*..Q...
     12c:	5d 1d 00 00 69 1d 00 00 7d 2a 00 00 7d 2a 00 00     ]...i...}*..}*..
     13c:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
     14c:	7d 2a 00 00 dd 28 00 00 7d 2a 00 00 00 00 00 00     }*...(..}*......
	...
     180:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
     190:	00 00 00 00 05 47 00 00 7d 2a 00 00 7d 2a 00 00     .....G..}*..}*..
     1a0:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
     1b0:	19 47 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     .G..}*..}*..}*..
     1c0:	7d 2a 00 00 2d 47 00 00 7d 2a 00 00 7d 2a 00 00     }*..-G..}*..}*..
     1d0:	7d 2a 00 00 41 47 00 00 7d 2a 00 00 7d 2a 00 00     }*..AG..}*..}*..
     1e0:	55 47 00 00 7d 2a 00 00 7d 2a 00 00 49 4c 00 00     UG..}*..}*..IL..
     1f0:	5d 4c 00 00 71 4c 00 00 85 4c 00 00 99 4c 00 00     ]L..qL...L...L..
     200:	ad 4c 00 00 00 00 00 00 00 00 00 00 7d 2a 00 00     .L..........}*..
     210:	7d 2a 00 00 7d 2a 00 00 41 05 00 00 55 05 00 00     }*..}*..A...U...
     220:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
     230:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
     240:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
     250:	7d 2a 00 00 7d 2a 00 00 7d 2a 00 00 7d 2a 00 00     }*..}*..}*..}*..
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	000093d0 	.word	0x000093d0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	000093d0 	.word	0x000093d0
     2c4:	20000194 	.word	0x20000194
     2c8:	000093d0 	.word	0x000093d0
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Application/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
     2d2:	b088      	sub	sp, #32
     2d4:	4606      	mov	r6, r0
	uint8_t dbgBuffer[30];
	memset(dbgBuffer,'0',30);
     2d6:	221e      	movs	r2, #30
     2d8:	2130      	movs	r1, #48	; 0x30
     2da:	4668      	mov	r0, sp
     2dc:	4b0d      	ldr	r3, [pc, #52]	; (314 <vApplicationStackOverflowHook+0x44>)
     2de:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e0:	4d0d      	ldr	r5, [pc, #52]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e2:	4628      	mov	r0, r5
     2e4:	4c0d      	ldr	r4, [pc, #52]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2e6:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2e8:	480d      	ldr	r0, [pc, #52]	; (320 <vApplicationStackOverflowHook+0x50>)
     2ea:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ec:	4628      	mov	r0, r5
     2ee:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f0:	480c      	ldr	r0, [pc, #48]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f2:	47a0      	blx	r4

	sprintf((int8_t*)dbgBuffer,"Task Handle - %d\r\n",xTask);
     2f4:	4632      	mov	r2, r6
     2f6:	490c      	ldr	r1, [pc, #48]	; (328 <vApplicationStackOverflowHook+0x58>)
     2f8:	4668      	mov	r0, sp
     2fa:	4b0c      	ldr	r3, [pc, #48]	; (32c <vApplicationStackOverflowHook+0x5c>)
     2fc:	4798      	blx	r3
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     2fe:	4668      	mov	r0, sp
     300:	4b0b      	ldr	r3, [pc, #44]	; (330 <vApplicationStackOverflowHook+0x60>)
     302:	4798      	blx	r3
     304:	b281      	uxth	r1, r0
     306:	4668      	mov	r0, sp
     308:	4b0a      	ldr	r3, [pc, #40]	; (334 <vApplicationStackOverflowHook+0x64>)
     30a:	4798      	blx	r3

	requestWatchDogForcedReset();
     30c:	4b0a      	ldr	r3, [pc, #40]	; (338 <vApplicationStackOverflowHook+0x68>)
     30e:	4798      	blx	r3
}
     310:	b008      	add	sp, #32
     312:	bd70      	pop	{r4, r5, r6, pc}
     314:	000070c5 	.word	0x000070c5
     318:	000079d0 	.word	0x000079d0
     31c:	000026fd 	.word	0x000026fd
     320:	00007a0c 	.word	0x00007a0c
     324:	00008cd8 	.word	0x00008cd8
     328:	00007a48 	.word	0x00007a48
     32c:	0000724d 	.word	0x0000724d
     330:	000072a5 	.word	0x000072a5
     334:	000026b9 	.word	0x000026b9
     338:	00002a15 	.word	0x00002a15

0000033c <intializeSensorSelectLines>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void intializeSensorSelectLines(void)
{
     33c:	b470      	push	{r4, r5, r6}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     33e:	4b59      	ldr	r3, [pc, #356]	; (4a4 <intializeSensorSelectLines+0x168>)
     340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
     344:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     348:	4a57      	ldr	r2, [pc, #348]	; (4a8 <intializeSensorSelectLines+0x16c>)
     34a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     34e:	4a57      	ldr	r2, [pc, #348]	; (4ac <intializeSensorSelectLines+0x170>)
     350:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     354:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     358:	f893 00cd 	ldrb.w	r0, [r3, #205]	; 0xcd
     35c:	f040 0004 	orr.w	r0, r0, #4
     360:	f883 00cd 	strb.w	r0, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     364:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     368:	f893 10cd 	ldrb.w	r1, [r3, #205]	; 0xcd
	tmp &= ~PORT_PINCFG_PMUXEN;
     36c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     370:	f883 10cd 	strb.w	r1, [r3, #205]	; 0xcd
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     378:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     37c:	484c      	ldr	r0, [pc, #304]	; (4b0 <intializeSensorSelectLines+0x174>)
     37e:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     382:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     386:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     38a:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
     38e:	f040 0004 	orr.w	r0, r0, #4
     392:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     396:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     39a:	f893 10cc 	ldrb.w	r1, [r3, #204]	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
     39e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3a2:	f883 10cc 	strb.w	r1, [r3, #204]	; 0xcc
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
     3aa:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ae:	4e41      	ldr	r6, [pc, #260]	; (4b4 <intializeSensorSelectLines+0x178>)
     3b0:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
     3b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3b8:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3bc:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
     3c0:	f041 0104 	orr.w	r1, r1, #4
     3c4:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3c8:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3cc:	f893 10cb 	ldrb.w	r1, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d0:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d4:	f883 10cb 	strb.w	r1, [r3, #203]	; 0xcb
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
     3dc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3e0:	4d35      	ldr	r5, [pc, #212]	; (4b8 <intializeSensorSelectLines+0x17c>)
     3e2:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
     3e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ea:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     3ee:	f893 40ca 	ldrb.w	r4, [r3, #202]	; 0xca
     3f2:	f044 0404 	orr.w	r4, r4, #4
     3f6:	f883 40ca 	strb.w	r4, [r3, #202]	; 0xca
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3fa:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3fe:	f893 40ca 	ldrb.w	r4, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     402:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     406:	f883 40ca 	strb.w	r4, [r3, #202]	; 0xca
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     40a:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     40c:	629e      	str	r6, [r3, #40]	; 0x28
     40e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     410:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     412:	f893 404b 	ldrb.w	r4, [r3, #75]	; 0x4b
     416:	f044 0404 	orr.w	r4, r4, #4
     41a:	f883 404b 	strb.w	r4, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     41e:	6198      	str	r0, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     420:	f893 004b 	ldrb.w	r0, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     424:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     428:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     42c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     42e:	629d      	str	r5, [r3, #40]	; 0x28
     430:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     432:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     434:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
     438:	f040 0004 	orr.w	r0, r0, #4
     43c:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     440:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     442:	f893 104a 	ldrb.w	r1, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     446:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     44a:	f883 104a 	strb.w	r1, [r3, #74]	; 0x4a
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     44e:	f44f 7100 	mov.w	r1, #512	; 0x200
     452:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     454:	4819      	ldr	r0, [pc, #100]	; (4bc <intializeSensorSelectLines+0x180>)
     456:	6298      	str	r0, [r3, #40]	; 0x28
     458:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     45a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     45c:	f893 0049 	ldrb.w	r0, [r3, #73]	; 0x49
     460:	f040 0004 	orr.w	r0, r0, #4
     464:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     468:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46a:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     46e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     472:	f883 1049 	strb.w	r1, [r3, #73]	; 0x49
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     476:	f44f 7180 	mov.w	r1, #256	; 0x100
     47a:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     47c:	4810      	ldr	r0, [pc, #64]	; (4c0 <intializeSensorSelectLines+0x184>)
     47e:	6298      	str	r0, [r3, #40]	; 0x28
     480:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     482:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     484:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     488:	f042 0204 	orr.w	r2, r2, #4
     48c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     490:	6199      	str	r1, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     492:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     496:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	gpio_set_pin_function(SELECT_6, GPIO_PIN_FUNCTION_OFF);		
	
	gpio_set_pin_direction(SELECT_7, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(SELECT_7,GPIO_PULL_UP);
	gpio_set_pin_function(SELECT_7, GPIO_PIN_FUNCTION_OFF);	
}
     49e:	bc70      	pop	{r4, r5, r6}
     4a0:	4770      	bx	lr
     4a2:	bf00      	nop
     4a4:	41008000 	.word	0x41008000
     4a8:	40022000 	.word	0x40022000
     4ac:	c0020000 	.word	0xc0020000
     4b0:	40021000 	.word	0x40021000
     4b4:	40020800 	.word	0x40020800
     4b8:	40020400 	.word	0x40020400
     4bc:	40020200 	.word	0x40020200
     4c0:	40020100 	.word	0x40020100

000004c4 <sensorAdcInitialize>:
#include "Application/SensorAdcInputs/include/SensorAdcInputs.h"
#include "Application/Common/Common.h"
#include <hpl_adc_config.h>

void sensorAdcInitialize(void)
{
     4c4:	b508      	push	{r3, lr}
	ADC_0_init();
     4c6:	4b01      	ldr	r3, [pc, #4]	; (4cc <sensorAdcInitialize+0x8>)
     4c8:	4798      	blx	r3
     4ca:	bd08      	pop	{r3, pc}
     4cc:	00002ced 	.word	0x00002ced

000004d0 <sensorAdcReadChannel>:
}

int32_t sensorAdcReadChannel(const uint8_t channel, uint16_t* result,const uint16_t length)
{
     4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4d4:	b083      	sub	sp, #12
     4d6:	4604      	mov	r4, r0
     4d8:	460f      	mov	r7, r1
     4da:	4690      	mov	r8, r2
	int32_t bytesRead = 0;
	uint32_t voltageInMv = 0;
	uint8_t buffer[2] = {0};
     4dc:	2300      	movs	r3, #0
     4de:	ae02      	add	r6, sp, #8
     4e0:	f826 3d04 	strh.w	r3, [r6, #-4]!
	*result = 0;
     4e4:	800b      	strh	r3, [r1, #0]

	adc_sync_enable_channel(&ADC_0, channel);
     4e6:	4d11      	ldr	r5, [pc, #68]	; (52c <sensorAdcReadChannel+0x5c>)
     4e8:	4601      	mov	r1, r0
     4ea:	4628      	mov	r0, r5
     4ec:	4b10      	ldr	r3, [pc, #64]	; (530 <sensorAdcReadChannel+0x60>)
     4ee:	4798      	blx	r3
	adc_sync_set_inputs(&ADC_0, channel, 0x19, channel);
     4f0:	4623      	mov	r3, r4
     4f2:	2219      	movs	r2, #25
     4f4:	4621      	mov	r1, r4
     4f6:	4628      	mov	r0, r5
     4f8:	f8df 9040 	ldr.w	r9, [pc, #64]	; 53c <sensorAdcReadChannel+0x6c>
     4fc:	47c8      	blx	r9
	bytesRead = adc_sync_read_channel(&ADC_0, channel, &buffer[0], length);
     4fe:	4643      	mov	r3, r8
     500:	4632      	mov	r2, r6
     502:	4621      	mov	r1, r4
     504:	4628      	mov	r0, r5
     506:	4e0b      	ldr	r6, [pc, #44]	; (534 <sensorAdcReadChannel+0x64>)
     508:	47b0      	blx	r6
     50a:	4606      	mov	r6, r0
	adc_sync_disable_channel(&ADC_0, channel);
     50c:	4621      	mov	r1, r4
     50e:	4628      	mov	r0, r5
     510:	4b09      	ldr	r3, [pc, #36]	; (538 <sensorAdcReadChannel+0x68>)
     512:	4798      	blx	r3

	*result = ((buffer[1] << 8) | (buffer[0] & 0x00FF));
     514:	f89d 2005 	ldrb.w	r2, [sp, #5]
     518:	f89d 3004 	ldrb.w	r3, [sp, #4]
     51c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     520:	803b      	strh	r3, [r7, #0]
	voltageInMv = (((*result) * ADC_CONVERTION_FACTOR)/10000);
	printVoltageToConsole("Voltage on analog pin",voltageInMv);
	DEBUG_PRINT("\r\n");*/

	return bytesRead;
}
     522:	4630      	mov	r0, r6
     524:	b003      	add	sp, #12
     526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     52a:	bf00      	nop
     52c:	20003d8c 	.word	0x20003d8c
     530:	000032e1 	.word	0x000032e1
     534:	00003339 	.word	0x00003339
     538:	0000330d 	.word	0x0000330d
     53c:	000033d9 	.word	0x000033d9

00000540 <ADC0_0_Handler>:

void ADC0_0_Handler(void)
{
     540:	b508      	push	{r3, lr}
	DEBUG_PRINT("IN ADC0_0 handler");
     542:	4802      	ldr	r0, [pc, #8]	; (54c <ADC0_0_Handler+0xc>)
     544:	4b02      	ldr	r3, [pc, #8]	; (550 <ADC0_0_Handler+0x10>)
     546:	4798      	blx	r3
     548:	bd08      	pop	{r3, pc}
     54a:	bf00      	nop
     54c:	00007a98 	.word	0x00007a98
     550:	000026fd 	.word	0x000026fd

00000554 <ADC0_1_Handler>:
}

void ADC0_1_Handler(void)
{
     554:	b508      	push	{r3, lr}
	DEBUG_PRINT("IN ADC0_1 handler");
     556:	4802      	ldr	r0, [pc, #8]	; (560 <ADC0_1_Handler+0xc>)
     558:	4b02      	ldr	r3, [pc, #8]	; (564 <ADC0_1_Handler+0x10>)
     55a:	4798      	blx	r3
     55c:	bd08      	pop	{r3, pc}
     55e:	bf00      	nop
     560:	00007aac 	.word	0x00007aac
     564:	000026fd 	.word	0x000026fd

00000568 <sensorTaskSchedule>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void sensorTaskSchedule(void)
{
     568:	b530      	push	{r4, r5, lr}
     56a:	b083      	sub	sp, #12
	BaseType_t xResult;
	static SENSOR_INDEX_T sensorIndex = SENSOR_0;
	SENSOR_DATA_REQUEST_TYPE request;
	const TickType_t xSensorScanTriggerWaitMs = pdMS_TO_TICKS(500UL);
	int32_t bytesRead;
	uint16_t adcResult = 0;
     56c:	2300      	movs	r3, #0
     56e:	f8ad 3006 	strh.w	r3, [sp, #6]
	static uint16_t adcAveragingBuffer[MAX_ADC_SAMPLES] = {0};
	static uint8_t sampleIndex = 0;
	uint16_t adcCountAveraged = 0;
	uint32_t voltageInMv = 0;

	switch(sensorMainState)
     572:	4b4f      	ldr	r3, [pc, #316]	; (6b0 <sensorTaskSchedule+0x148>)
     574:	781b      	ldrb	r3, [r3, #0]
     576:	2b01      	cmp	r3, #1
     578:	d010      	beq.n	59c <sensorTaskSchedule+0x34>
     57a:	b11b      	cbz	r3, 584 <sensorTaskSchedule+0x1c>
     57c:	2b02      	cmp	r3, #2
     57e:	d04b      	beq.n	618 <sensorTaskSchedule+0xb0>
		break;

		default:
		break;
	}
}
     580:	b003      	add	sp, #12
     582:	bd30      	pop	{r4, r5, pc}
			xResult = xSemaphoreTake(SensorScanSemaphore, xSensorScanTriggerWaitMs);
     584:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     588:	4b4a      	ldr	r3, [pc, #296]	; (6b4 <sensorTaskSchedule+0x14c>)
     58a:	6818      	ldr	r0, [r3, #0]
     58c:	4b4a      	ldr	r3, [pc, #296]	; (6b8 <sensorTaskSchedule+0x150>)
     58e:	4798      	blx	r3
			if(xResult == pdPASS)
     590:	2801      	cmp	r0, #1
     592:	d1f5      	bne.n	580 <sensorTaskSchedule+0x18>
				sensorMainState = SCAN_ALL_OF_THE_SENSOR_SELECT_LINES;
     594:	2201      	movs	r2, #1
     596:	4b46      	ldr	r3, [pc, #280]	; (6b0 <sensorTaskSchedule+0x148>)
     598:	701a      	strb	r2, [r3, #0]
     59a:	e7f1      	b.n	580 <sensorTaskSchedule+0x18>
			if(gpio_get_pin_level(sensorInputData[sensorIndex].selectLine) == false)
     59c:	4b44      	ldr	r3, [pc, #272]	; (6b0 <sensorTaskSchedule+0x148>)
     59e:	7d1a      	ldrb	r2, [r3, #20]
     5a0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
     5a4:	791d      	ldrb	r5, [r3, #4]
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     5a6:	4668      	mov	r0, sp
     5a8:	4b44      	ldr	r3, [pc, #272]	; (6bc <sensorTaskSchedule+0x154>)
     5aa:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     5ac:	096b      	lsrs	r3, r5, #5
     5ae:	4944      	ldr	r1, [pc, #272]	; (6c0 <sensorTaskSchedule+0x158>)
     5b0:	01db      	lsls	r3, r3, #7
     5b2:	18ca      	adds	r2, r1, r3
     5b4:	58c9      	ldr	r1, [r1, r3]
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     5b6:	6a13      	ldr	r3, [r2, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     5b8:	6914      	ldr	r4, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
     5ba:	405c      	eors	r4, r3
     5bc:	400c      	ands	r4, r1
     5be:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     5c0:	4668      	mov	r0, sp
     5c2:	4b40      	ldr	r3, [pc, #256]	; (6c4 <sensorTaskSchedule+0x15c>)
     5c4:	4798      	blx	r3
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     5c6:	f005 051f 	and.w	r5, r5, #31
     5ca:	2301      	movs	r3, #1
     5cc:	fa03 f505 	lsl.w	r5, r3, r5
     5d0:	4225      	tst	r5, r4
     5d2:	d110      	bne.n	5f6 <sensorTaskSchedule+0x8e>
				ConsoleDebugPrint("Select Line Low  - Port",(sensorIndex+1));
     5d4:	4c36      	ldr	r4, [pc, #216]	; (6b0 <sensorTaskSchedule+0x148>)
     5d6:	7d21      	ldrb	r1, [r4, #20]
     5d8:	4419      	add	r1, r3
     5da:	483b      	ldr	r0, [pc, #236]	; (6c8 <sensorTaskSchedule+0x160>)
     5dc:	4b3b      	ldr	r3, [pc, #236]	; (6cc <sensorTaskSchedule+0x164>)
     5de:	4798      	blx	r3
				sensorIndex++;
     5e0:	7d23      	ldrb	r3, [r4, #20]
     5e2:	3301      	adds	r3, #1
     5e4:	b2db      	uxtb	r3, r3
     5e6:	7523      	strb	r3, [r4, #20]
				if(sensorIndex >= MAX_SENSOR_COUNT)
     5e8:	2b07      	cmp	r3, #7
     5ea:	d9c9      	bls.n	580 <sensorTaskSchedule+0x18>
					sensorMainState = FETCH_ADC_READINGS_FOR_ACTIVE_SENSORS;
     5ec:	2202      	movs	r2, #2
     5ee:	7022      	strb	r2, [r4, #0]
					sensorIndex = SENSOR_0;
     5f0:	2200      	movs	r2, #0
     5f2:	7522      	strb	r2, [r4, #20]
     5f4:	e7c4      	b.n	580 <sensorTaskSchedule+0x18>
				ConsoleDebugPrint("Select Line High - Port",(sensorIndex+1));
     5f6:	4c2e      	ldr	r4, [pc, #184]	; (6b0 <sensorTaskSchedule+0x148>)
     5f8:	7d21      	ldrb	r1, [r4, #20]
     5fa:	3101      	adds	r1, #1
     5fc:	4834      	ldr	r0, [pc, #208]	; (6d0 <sensorTaskSchedule+0x168>)
     5fe:	4b33      	ldr	r3, [pc, #204]	; (6cc <sensorTaskSchedule+0x164>)
     600:	4798      	blx	r3
				sensorIndex++;
     602:	7d23      	ldrb	r3, [r4, #20]
     604:	3301      	adds	r3, #1
     606:	b2db      	uxtb	r3, r3
     608:	7523      	strb	r3, [r4, #20]
				if(sensorIndex >= MAX_SENSOR_COUNT)
     60a:	2b07      	cmp	r3, #7
     60c:	d9b8      	bls.n	580 <sensorTaskSchedule+0x18>
					sensorMainState = FETCH_ADC_READINGS_FOR_ACTIVE_SENSORS;
     60e:	2202      	movs	r2, #2
     610:	7022      	strb	r2, [r4, #0]
					sensorIndex = SENSOR_0;
     612:	2200      	movs	r2, #0
     614:	7522      	strb	r2, [r4, #20]
     616:	e7b3      	b.n	580 <sensorTaskSchedule+0x18>
			if(sensorIndex < MAX_SENSOR_COUNT)
     618:	4b25      	ldr	r3, [pc, #148]	; (6b0 <sensorTaskSchedule+0x148>)
     61a:	7d1b      	ldrb	r3, [r3, #20]
     61c:	2b07      	cmp	r3, #7
     61e:	d904      	bls.n	62a <sensorTaskSchedule+0xc2>
				sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
     620:	4b23      	ldr	r3, [pc, #140]	; (6b0 <sensorTaskSchedule+0x148>)
     622:	2200      	movs	r2, #0
     624:	701a      	strb	r2, [r3, #0]
				sensorIndex = SENSOR_0;
     626:	751a      	strb	r2, [r3, #20]
}
     628:	e7aa      	b.n	580 <sensorTaskSchedule+0x18>
				bytesRead = sensorAdcReadChannel(sensorInputData[sensorIndex].adcChannel,&adcResult,2);
     62a:	4c21      	ldr	r4, [pc, #132]	; (6b0 <sensorTaskSchedule+0x148>)
     62c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
     630:	2202      	movs	r2, #2
     632:	f10d 0106 	add.w	r1, sp, #6
     636:	7958      	ldrb	r0, [r3, #5]
     638:	4b26      	ldr	r3, [pc, #152]	; (6d4 <sensorTaskSchedule+0x16c>)
     63a:	4798      	blx	r3
				if(sampleIndex < MAX_ADC_SAMPLES)
     63c:	7d63      	ldrb	r3, [r4, #21]
     63e:	2b03      	cmp	r3, #3
     640:	d80b      	bhi.n	65a <sensorTaskSchedule+0xf2>
					adcAveragingBuffer[sampleIndex] = adcResult;
     642:	eb04 0143 	add.w	r1, r4, r3, lsl #1
     646:	f8bd 0006 	ldrh.w	r0, [sp, #6]
     64a:	8308      	strh	r0, [r1, #24]
					sampleIndex++;
     64c:	3301      	adds	r3, #1
     64e:	7563      	strb	r3, [r4, #21]
			if(sensorIndex >= MAX_SENSOR_COUNT)
     650:	4b17      	ldr	r3, [pc, #92]	; (6b0 <sensorTaskSchedule+0x148>)
     652:	7d1b      	ldrb	r3, [r3, #20]
     654:	2b07      	cmp	r3, #7
     656:	d993      	bls.n	580 <sensorTaskSchedule+0x18>
     658:	e7e2      	b.n	620 <sensorTaskSchedule+0xb8>
					adcCountAveraged = ((adcAveragingBuffer[0] + adcAveragingBuffer[1] + adcAveragingBuffer[2] + adcAveragingBuffer[3])/
     65a:	4a15      	ldr	r2, [pc, #84]	; (6b0 <sensorTaskSchedule+0x148>)
     65c:	8b13      	ldrh	r3, [r2, #24]
     65e:	8b51      	ldrh	r1, [r2, #26]
     660:	440b      	add	r3, r1
     662:	8b91      	ldrh	r1, [r2, #28]
     664:	440b      	add	r3, r1
     666:	8bd4      	ldrh	r4, [r2, #30]
     668:	191b      	adds	r3, r3, r4
     66a:	bf48      	it	mi
     66c:	3303      	addmi	r3, #3
     66e:	109c      	asrs	r4, r3, #2
					ConsoleDebugPrint("Sensor",sensorIndex+1);
     670:	4d0f      	ldr	r5, [pc, #60]	; (6b0 <sensorTaskSchedule+0x148>)
     672:	7d29      	ldrb	r1, [r5, #20]
     674:	3101      	adds	r1, #1
     676:	4818      	ldr	r0, [pc, #96]	; (6d8 <sensorTaskSchedule+0x170>)
     678:	4b14      	ldr	r3, [pc, #80]	; (6cc <sensorTaskSchedule+0x164>)
     67a:	4798      	blx	r3
     67c:	b2a4      	uxth	r4, r4
				    printAdcValueToConsole("ADC Count", adcCountAveraged);
     67e:	4621      	mov	r1, r4
     680:	4816      	ldr	r0, [pc, #88]	; (6dc <sensorTaskSchedule+0x174>)
     682:	4b17      	ldr	r3, [pc, #92]	; (6e0 <sensorTaskSchedule+0x178>)
     684:	4798      	blx	r3
					voltageInMv = (((adcCountAveraged) * ADC_CONVERTION_FACTOR)/10000);
     686:	f241 112a 	movw	r1, #4394	; 0x112a
     68a:	fb01 f404 	mul.w	r4, r1, r4
     68e:	4915      	ldr	r1, [pc, #84]	; (6e4 <sensorTaskSchedule+0x17c>)
     690:	fb81 3104 	smull	r3, r1, r1, r4
     694:	17e4      	asrs	r4, r4, #31
					printVoltageToConsole("Voltage on analog pin",voltageInMv);
     696:	ebc4 3121 	rsb	r1, r4, r1, asr #12
     69a:	4813      	ldr	r0, [pc, #76]	; (6e8 <sensorTaskSchedule+0x180>)
     69c:	4b13      	ldr	r3, [pc, #76]	; (6ec <sensorTaskSchedule+0x184>)
     69e:	4798      	blx	r3
					sampleIndex = 0;
     6a0:	2300      	movs	r3, #0
     6a2:	756b      	strb	r3, [r5, #21]
					memset(adcAveragingBuffer,0,MAX_ADC_SAMPLES);
     6a4:	61ab      	str	r3, [r5, #24]
					sensorIndex++;
     6a6:	7d2b      	ldrb	r3, [r5, #20]
     6a8:	3301      	adds	r3, #1
     6aa:	752b      	strb	r3, [r5, #20]
     6ac:	e7d0      	b.n	650 <sensorTaskSchedule+0xe8>
     6ae:	bf00      	nop
     6b0:	200001ac 	.word	0x200001ac
     6b4:	200034ac 	.word	0x200034ac
     6b8:	00005d29 	.word	0x00005d29
     6bc:	0000340d 	.word	0x0000340d
     6c0:	41008000 	.word	0x41008000
     6c4:	0000341b 	.word	0x0000341b
     6c8:	00007ac0 	.word	0x00007ac0
     6cc:	00002789 	.word	0x00002789
     6d0:	00007ad8 	.word	0x00007ad8
     6d4:	000004d1 	.word	0x000004d1
     6d8:	00007af0 	.word	0x00007af0
     6dc:	00007af8 	.word	0x00007af8
     6e0:	000027fd 	.word	0x000027fd
     6e4:	68db8bad 	.word	0x68db8bad
     6e8:	00007b04 	.word	0x00007b04
     6ec:	0000286d 	.word	0x0000286d

000006f0 <SensorTask>:
{
     6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6f4:	b093      	sub	sp, #76	; 0x4c
	xLastWakeTime = xTaskGetTickCount();
     6f6:	4b8f      	ldr	r3, [pc, #572]	; (934 <SensorTask+0x244>)
     6f8:	4798      	blx	r3
	intializeSensorSelectLines();
     6fa:	4b8f      	ldr	r3, [pc, #572]	; (938 <SensorTask+0x248>)
     6fc:	4798      	blx	r3
	sensorAdcInitialize();
     6fe:	4b8f      	ldr	r3, [pc, #572]	; (93c <SensorTask+0x24c>)
     700:	4798      	blx	r3
     702:	4b8f      	ldr	r3, [pc, #572]	; (940 <SensorTask+0x250>)
     704:	7c1f      	ldrb	r7, [r3, #16]
     706:	7c5e      	ldrb	r6, [r3, #17]
     708:	7b9a      	ldrb	r2, [r3, #14]
     70a:	920e      	str	r2, [sp, #56]	; 0x38
     70c:	7bda      	ldrb	r2, [r3, #15]
     70e:	9210      	str	r2, [sp, #64]	; 0x40
     710:	f893 900c 	ldrb.w	r9, [r3, #12]
     714:	f893 800d 	ldrb.w	r8, [r3, #13]
     718:	f893 b00a 	ldrb.w	fp, [r3, #10]
     71c:	f893 a00b 	ldrb.w	sl, [r3, #11]
     720:	7a1d      	ldrb	r5, [r3, #8]
     722:	7a5c      	ldrb	r4, [r3, #9]
     724:	f893 c006 	ldrb.w	ip, [r3, #6]
     728:	f893 e007 	ldrb.w	lr, [r3, #7]
     72c:	7918      	ldrb	r0, [r3, #4]
     72e:	795b      	ldrb	r3, [r3, #5]
     730:	930c      	str	r3, [sp, #48]	; 0x30
     732:	2201      	movs	r2, #1
     734:	2300      	movs	r3, #0
     736:	930f      	str	r3, [sp, #60]	; 0x3c
     738:	930d      	str	r3, [sp, #52]	; 0x34
     73a:	930b      	str	r3, [sp, #44]	; 0x2c
     73c:	930a      	str	r3, [sp, #40]	; 0x28
     73e:	9309      	str	r3, [sp, #36]	; 0x24
     740:	9308      	str	r3, [sp, #32]
     742:	9307      	str	r3, [sp, #28]
     744:	9306      	str	r3, [sp, #24]
     746:	9305      	str	r3, [sp, #20]
     748:	9304      	str	r3, [sp, #16]
     74a:	9303      	str	r3, [sp, #12]
     74c:	9302      	str	r3, [sp, #8]
     74e:	9301      	str	r3, [sp, #4]
				sensorInputData[SENSOR_1].adcChannel = SENSOR_1_AIN1;
     750:	9200      	str	r2, [sp, #0]
     752:	9311      	str	r3, [sp, #68]	; 0x44
     754:	e007      	b.n	766 <SensorTask+0x76>
     756:	2101      	movs	r1, #1
     758:	910a      	str	r1, [sp, #40]	; 0x28
				sensorInputData[SENSOR_2].adcChannel = SENSOR_2_AIN2;
     75a:	2402      	movs	r4, #2
     75c:	9900      	ldr	r1, [sp, #0]
     75e:	9109      	str	r1, [sp, #36]	; 0x24
				sensorInputData[SENSOR_2].selectLine = SELECT_2;
     760:	252b      	movs	r5, #43	; 0x2b
     762:	3201      	adds	r2, #1
     764:	b2d2      	uxtb	r2, r2
		switch(sensorIndex)
     766:	1e51      	subs	r1, r2, #1
     768:	b2c9      	uxtb	r1, r1
     76a:	2907      	cmp	r1, #7
     76c:	f200 8089 	bhi.w	882 <SensorTask+0x192>
     770:	a301      	add	r3, pc, #4	; (adr r3, 778 <SensorTask+0x88>)
     772:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
     776:	bf00      	nop
     778:	00000915 	.word	0x00000915
     77c:	00000925 	.word	0x00000925
     780:	00000757 	.word	0x00000757
     784:	00000799 	.word	0x00000799
     788:	000007ab 	.word	0x000007ab
     78c:	000007bd 	.word	0x000007bd
     790:	000007cf 	.word	0x000007cf
     794:	000007dd 	.word	0x000007dd
     798:	2101      	movs	r1, #1
     79a:	9102      	str	r1, [sp, #8]
				sensorInputData[SENSOR_3].adcChannel = SENSOR_3_AIN3;
     79c:	f04f 0a03 	mov.w	sl, #3
     7a0:	9900      	ldr	r1, [sp, #0]
     7a2:	9101      	str	r1, [sp, #4]
				sensorInputData[SENSOR_3].selectLine = SELECT_3;
     7a4:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
     7a8:	e7db      	b.n	762 <SensorTask+0x72>
     7aa:	2101      	movs	r1, #1
     7ac:	9104      	str	r1, [sp, #16]
				sensorInputData[SENSOR_4].adcChannel = SENSOR_4_AIN4;
     7ae:	f04f 0804 	mov.w	r8, #4
     7b2:	9900      	ldr	r1, [sp, #0]
     7b4:	9103      	str	r1, [sp, #12]
				sensorInputData[SENSOR_4].selectLine = SELECT_4;
     7b6:	f04f 090b 	mov.w	r9, #11
     7ba:	e7d2      	b.n	762 <SensorTask+0x72>
     7bc:	2301      	movs	r3, #1
     7be:	9311      	str	r3, [sp, #68]	; 0x44
				sensorInputData[SENSOR_5].adcChannel = SENSOR_5_AIN5;
     7c0:	2105      	movs	r1, #5
     7c2:	9110      	str	r1, [sp, #64]	; 0x40
     7c4:	9900      	ldr	r1, [sp, #0]
     7c6:	910f      	str	r1, [sp, #60]	; 0x3c
				sensorInputData[SENSOR_5].selectLine = SELECT_5;
     7c8:	210a      	movs	r1, #10
     7ca:	910e      	str	r1, [sp, #56]	; 0x38
     7cc:	e7c9      	b.n	762 <SensorTask+0x72>
     7ce:	2101      	movs	r1, #1
     7d0:	9108      	str	r1, [sp, #32]
				sensorInputData[SENSOR_6].adcChannel = SENSOR_6_AIN6;
     7d2:	2606      	movs	r6, #6
     7d4:	9900      	ldr	r1, [sp, #0]
     7d6:	9107      	str	r1, [sp, #28]
				sensorInputData[SENSOR_6].selectLine = SELECT_6;
     7d8:	2709      	movs	r7, #9
     7da:	e7c2      	b.n	762 <SensorTask+0x72>
     7dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
     7de:	9a01      	ldr	r2, [sp, #4]
     7e0:	2a00      	cmp	r2, #0
     7e2:	d14a      	bne.n	87a <SensorTask+0x18a>
     7e4:	9a02      	ldr	r2, [sp, #8]
     7e6:	b112      	cbz	r2, 7ee <SensorTask+0xfe>
     7e8:	4a55      	ldr	r2, [pc, #340]	; (940 <SensorTask+0x250>)
     7ea:	f882 a00b 	strb.w	sl, [r2, #11]
     7ee:	9a03      	ldr	r2, [sp, #12]
     7f0:	b112      	cbz	r2, 7f8 <SensorTask+0x108>
     7f2:	4a53      	ldr	r2, [pc, #332]	; (940 <SensorTask+0x250>)
     7f4:	f882 900c 	strb.w	r9, [r2, #12]
     7f8:	9a04      	ldr	r2, [sp, #16]
     7fa:	b112      	cbz	r2, 802 <SensorTask+0x112>
     7fc:	4a50      	ldr	r2, [pc, #320]	; (940 <SensorTask+0x250>)
     7fe:	f882 800d 	strb.w	r8, [r2, #13]
     802:	9a05      	ldr	r2, [sp, #20]
     804:	b112      	cbz	r2, 80c <SensorTask+0x11c>
     806:	4a4e      	ldr	r2, [pc, #312]	; (940 <SensorTask+0x250>)
     808:	f882 c006 	strb.w	ip, [r2, #6]
     80c:	9a06      	ldr	r2, [sp, #24]
     80e:	b112      	cbz	r2, 816 <SensorTask+0x126>
     810:	4a4b      	ldr	r2, [pc, #300]	; (940 <SensorTask+0x250>)
     812:	f882 e007 	strb.w	lr, [r2, #7]
     816:	9a07      	ldr	r2, [sp, #28]
     818:	b10a      	cbz	r2, 81e <SensorTask+0x12e>
     81a:	4a49      	ldr	r2, [pc, #292]	; (940 <SensorTask+0x250>)
     81c:	7417      	strb	r7, [r2, #16]
     81e:	9a08      	ldr	r2, [sp, #32]
     820:	b10a      	cbz	r2, 826 <SensorTask+0x136>
     822:	4a47      	ldr	r2, [pc, #284]	; (940 <SensorTask+0x250>)
     824:	7456      	strb	r6, [r2, #17]
     826:	9a09      	ldr	r2, [sp, #36]	; 0x24
     828:	b10a      	cbz	r2, 82e <SensorTask+0x13e>
     82a:	4a45      	ldr	r2, [pc, #276]	; (940 <SensorTask+0x250>)
     82c:	7215      	strb	r5, [r2, #8]
     82e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     830:	b10a      	cbz	r2, 836 <SensorTask+0x146>
     832:	4a43      	ldr	r2, [pc, #268]	; (940 <SensorTask+0x250>)
     834:	7254      	strb	r4, [r2, #9]
     836:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     838:	b10a      	cbz	r2, 83e <SensorTask+0x14e>
     83a:	4a41      	ldr	r2, [pc, #260]	; (940 <SensorTask+0x250>)
     83c:	7110      	strb	r0, [r2, #4]
     83e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     840:	b11a      	cbz	r2, 84a <SensorTask+0x15a>
     842:	4a3f      	ldr	r2, [pc, #252]	; (940 <SensorTask+0x250>)
     844:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
     848:	7151      	strb	r1, [r2, #5]
     84a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     84c:	b11a      	cbz	r2, 856 <SensorTask+0x166>
     84e:	4a3c      	ldr	r2, [pc, #240]	; (940 <SensorTask+0x250>)
     850:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
     854:	7391      	strb	r1, [r2, #14]
     856:	b11b      	cbz	r3, 860 <SensorTask+0x170>
     858:	4b39      	ldr	r3, [pc, #228]	; (940 <SensorTask+0x250>)
     85a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     85e:	73da      	strb	r2, [r3, #15]
				sensorInputData[SENSOR_7].selectLine = SELECT_7;
     860:	4b37      	ldr	r3, [pc, #220]	; (940 <SensorTask+0x250>)
     862:	2208      	movs	r2, #8
     864:	749a      	strb	r2, [r3, #18]
				sensorInputData[SENSOR_7].adcChannel = SENSOR_7_AIN7;
     866:	2207      	movs	r2, #7
     868:	74da      	strb	r2, [r3, #19]
	sensorMainState = WAIT_FOR_TRIGGER_FROM_PROCESS_TASK;
     86a:	2200      	movs	r2, #0
     86c:	4b34      	ldr	r3, [pc, #208]	; (940 <SensorTask+0x250>)
     86e:	701a      	strb	r2, [r3, #0]
		sensorTaskSchedule();
     870:	4d34      	ldr	r5, [pc, #208]	; (944 <SensorTask+0x254>)
		kickWatchDog();
     872:	4c35      	ldr	r4, [pc, #212]	; (948 <SensorTask+0x258>)
		sensorTaskSchedule();
     874:	47a8      	blx	r5
		kickWatchDog();
     876:	47a0      	blx	r4
     878:	e7fc      	b.n	874 <SensorTask+0x184>
     87a:	4a31      	ldr	r2, [pc, #196]	; (940 <SensorTask+0x250>)
     87c:	f882 b00a 	strb.w	fp, [r2, #10]
     880:	e7b0      	b.n	7e4 <SensorTask+0xf4>
	for(sensorIndex = SENSOR_0; sensorIndex < MAX_SENSOR_COUNT; sensorIndex++)
     882:	2a07      	cmp	r2, #7
     884:	f67f af6d 	bls.w	762 <SensorTask+0x72>
     888:	9b11      	ldr	r3, [sp, #68]	; 0x44
     88a:	9a01      	ldr	r2, [sp, #4]
     88c:	b112      	cbz	r2, 894 <SensorTask+0x1a4>
     88e:	4a2c      	ldr	r2, [pc, #176]	; (940 <SensorTask+0x250>)
     890:	f882 b00a 	strb.w	fp, [r2, #10]
     894:	9a02      	ldr	r2, [sp, #8]
     896:	b112      	cbz	r2, 89e <SensorTask+0x1ae>
     898:	4a29      	ldr	r2, [pc, #164]	; (940 <SensorTask+0x250>)
     89a:	f882 a00b 	strb.w	sl, [r2, #11]
     89e:	9a03      	ldr	r2, [sp, #12]
     8a0:	b112      	cbz	r2, 8a8 <SensorTask+0x1b8>
     8a2:	4a27      	ldr	r2, [pc, #156]	; (940 <SensorTask+0x250>)
     8a4:	f882 900c 	strb.w	r9, [r2, #12]
     8a8:	9a04      	ldr	r2, [sp, #16]
     8aa:	b112      	cbz	r2, 8b2 <SensorTask+0x1c2>
     8ac:	4a24      	ldr	r2, [pc, #144]	; (940 <SensorTask+0x250>)
     8ae:	f882 800d 	strb.w	r8, [r2, #13]
     8b2:	9a05      	ldr	r2, [sp, #20]
     8b4:	b112      	cbz	r2, 8bc <SensorTask+0x1cc>
     8b6:	4a22      	ldr	r2, [pc, #136]	; (940 <SensorTask+0x250>)
     8b8:	f882 c006 	strb.w	ip, [r2, #6]
     8bc:	9a06      	ldr	r2, [sp, #24]
     8be:	b112      	cbz	r2, 8c6 <SensorTask+0x1d6>
     8c0:	4a1f      	ldr	r2, [pc, #124]	; (940 <SensorTask+0x250>)
     8c2:	f882 e007 	strb.w	lr, [r2, #7]
     8c6:	9a07      	ldr	r2, [sp, #28]
     8c8:	b10a      	cbz	r2, 8ce <SensorTask+0x1de>
     8ca:	4a1d      	ldr	r2, [pc, #116]	; (940 <SensorTask+0x250>)
     8cc:	7417      	strb	r7, [r2, #16]
     8ce:	9a08      	ldr	r2, [sp, #32]
     8d0:	b10a      	cbz	r2, 8d6 <SensorTask+0x1e6>
     8d2:	4a1b      	ldr	r2, [pc, #108]	; (940 <SensorTask+0x250>)
     8d4:	7456      	strb	r6, [r2, #17]
     8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
     8d8:	b10a      	cbz	r2, 8de <SensorTask+0x1ee>
     8da:	4a19      	ldr	r2, [pc, #100]	; (940 <SensorTask+0x250>)
     8dc:	7215      	strb	r5, [r2, #8]
     8de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     8e0:	b10a      	cbz	r2, 8e6 <SensorTask+0x1f6>
     8e2:	4a17      	ldr	r2, [pc, #92]	; (940 <SensorTask+0x250>)
     8e4:	7254      	strb	r4, [r2, #9]
     8e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     8e8:	b10a      	cbz	r2, 8ee <SensorTask+0x1fe>
     8ea:	4a15      	ldr	r2, [pc, #84]	; (940 <SensorTask+0x250>)
     8ec:	7110      	strb	r0, [r2, #4]
     8ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     8f0:	b11a      	cbz	r2, 8fa <SensorTask+0x20a>
     8f2:	4a13      	ldr	r2, [pc, #76]	; (940 <SensorTask+0x250>)
     8f4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
     8f8:	7151      	strb	r1, [r2, #5]
     8fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
     8fc:	b11a      	cbz	r2, 906 <SensorTask+0x216>
     8fe:	4a10      	ldr	r2, [pc, #64]	; (940 <SensorTask+0x250>)
     900:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
     904:	7391      	strb	r1, [r2, #14]
     906:	2b00      	cmp	r3, #0
     908:	d0af      	beq.n	86a <SensorTask+0x17a>
     90a:	4b0d      	ldr	r3, [pc, #52]	; (940 <SensorTask+0x250>)
     90c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     910:	73da      	strb	r2, [r3, #15]
     912:	e7aa      	b.n	86a <SensorTask+0x17a>
		switch(sensorIndex)
     914:	2101      	movs	r1, #1
     916:	910d      	str	r1, [sp, #52]	; 0x34
				sensorInputData[SENSOR_0].adcChannel = SENSOR_0_AIN0;
     918:	2100      	movs	r1, #0
     91a:	910c      	str	r1, [sp, #48]	; 0x30
		switch(sensorIndex)
     91c:	9900      	ldr	r1, [sp, #0]
     91e:	910b      	str	r1, [sp, #44]	; 0x2c
				sensorInputData[SENSOR_0].selectLine = SELECT_0;
     920:	202d      	movs	r0, #45	; 0x2d
     922:	e71e      	b.n	762 <SensorTask+0x72>
		switch(sensorIndex)
     924:	2101      	movs	r1, #1
     926:	9106      	str	r1, [sp, #24]
				sensorInputData[SENSOR_1].adcChannel = SENSOR_1_AIN1;
     928:	9900      	ldr	r1, [sp, #0]
     92a:	468e      	mov	lr, r1
		switch(sensorIndex)
     92c:	9105      	str	r1, [sp, #20]
				sensorInputData[SENSOR_1].selectLine = SELECT_1;
     92e:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
     932:	e716      	b.n	762 <SensorTask+0x72>
     934:	000062e1 	.word	0x000062e1
     938:	0000033d 	.word	0x0000033d
     93c:	000004c5 	.word	0x000004c5
     940:	200001ac 	.word	0x200001ac
     944:	00000569 	.word	0x00000569
     948:	000029d5 	.word	0x000029d5

0000094c <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     94c:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     94e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     952:	460d      	mov	r5, r1
     954:	4c04      	ldr	r4, [pc, #16]	; (968 <getModemCommandData+0x1c>)
     956:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     95a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     95c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     95e:	6823      	ldr	r3, [r4, #0]
     960:	602b      	str	r3, [r5, #0]
}
     962:	bc30      	pop	{r4, r5}
     964:	4770      	bx	lr
     966:	bf00      	nop
     968:	00007b1c 	.word	0x00007b1c

0000096c <buildHttpHeaderWithActiveSessionID>:
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildHttpHeaderWithActiveSessionID(const uint8_t* activeSessionId)
{
	switch (*activeSessionId)
     96c:	7803      	ldrb	r3, [r0, #0]
     96e:	3b31      	subs	r3, #49	; 0x31
     970:	2b08      	cmp	r3, #8
     972:	d83b      	bhi.n	9ec <buildHttpHeaderWithActiveSessionID+0x80>
     974:	e8df f003 	tbb	[pc, r3]
     978:	17110b05 	.word	0x17110b05
     97c:	2f29231d 	.word	0x2f29231d
     980:	35          	.byte	0x35
     981:	00          	.byte	0x00
	{
		case SESSION_ID_1:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '1';
     982:	4b1b      	ldr	r3, [pc, #108]	; (9f0 <buildHttpHeaderWithActiveSessionID+0x84>)
     984:	2231      	movs	r2, #49	; 0x31
     986:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '1';
     988:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     98c:	4770      	bx	lr

		case SESSION_ID_2:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '2';
     98e:	4b18      	ldr	r3, [pc, #96]	; (9f0 <buildHttpHeaderWithActiveSessionID+0x84>)
     990:	2232      	movs	r2, #50	; 0x32
     992:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '2';
     994:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     998:	4770      	bx	lr

		case SESSION_ID_3:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '3';
     99a:	4b15      	ldr	r3, [pc, #84]	; (9f0 <buildHttpHeaderWithActiveSessionID+0x84>)
     99c:	2233      	movs	r2, #51	; 0x33
     99e:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '3';
     9a0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     9a4:	4770      	bx	lr

		case SESSION_ID_4:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '4';
     9a6:	4b12      	ldr	r3, [pc, #72]	; (9f0 <buildHttpHeaderWithActiveSessionID+0x84>)
     9a8:	2234      	movs	r2, #52	; 0x34
     9aa:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '4';
     9ac:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     9b0:	4770      	bx	lr

		case SESSION_ID_5:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '5';
     9b2:	4b0f      	ldr	r3, [pc, #60]	; (9f0 <buildHttpHeaderWithActiveSessionID+0x84>)
     9b4:	2235      	movs	r2, #53	; 0x35
     9b6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '5';
     9b8:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     9bc:	4770      	bx	lr

		case SESSION_ID_6:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '6';
     9be:	4b0c      	ldr	r3, [pc, #48]	; (9f0 <buildHttpHeaderWithActiveSessionID+0x84>)
     9c0:	2236      	movs	r2, #54	; 0x36
     9c2:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '6';
     9c4:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     9c8:	4770      	bx	lr

		case SESSION_ID_7:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '7';
     9ca:	4b09      	ldr	r3, [pc, #36]	; (9f0 <buildHttpHeaderWithActiveSessionID+0x84>)
     9cc:	2237      	movs	r2, #55	; 0x37
     9ce:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '7';
     9d0:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     9d4:	4770      	bx	lr

		case SESSION_ID_8:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '8';
     9d6:	4b06      	ldr	r3, [pc, #24]	; (9f0 <buildHttpHeaderWithActiveSessionID+0x84>)
     9d8:	2238      	movs	r2, #56	; 0x38
     9da:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '8';
     9dc:	f883 2020 	strb.w	r2, [r3, #32]
		}
		break;
     9e0:	4770      	bx	lr

		case SESSION_ID_9:
		{
			HttpHeaderString[SESSION_ID_POS_IN_HEADER] = '9';
     9e2:	4b03      	ldr	r3, [pc, #12]	; (9f0 <buildHttpHeaderWithActiveSessionID+0x84>)
     9e4:	2239      	movs	r2, #57	; 0x39
     9e6:	73da      	strb	r2, [r3, #15]
			kHttpGetString[SESSION_ID_POS_IN_GET_REQ]  = '9';
     9e8:	f883 2020 	strb.w	r2, [r3, #32]
     9ec:	4770      	bx	lr
     9ee:	bf00      	nop
     9f0:	20000000 	.word	0x20000000

000009f4 <buildDataPacketsToServer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void buildDataPacketsToServer(void)
{
     9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	strncpy(kHttpGetCompleteData,kHttpGetString,15);
     9f6:	4c0f      	ldr	r4, [pc, #60]	; (a34 <buildDataPacketsToServer+0x40>)
     9f8:	220f      	movs	r2, #15
     9fa:	490f      	ldr	r1, [pc, #60]	; (a38 <buildDataPacketsToServer+0x44>)
     9fc:	4620      	mov	r0, r4
     9fe:	4b0f      	ldr	r3, [pc, #60]	; (a3c <buildDataPacketsToServer+0x48>)
     a00:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
     a02:	4620      	mov	r0, r4
     a04:	4b0e      	ldr	r3, [pc, #56]	; (a40 <buildDataPacketsToServer+0x4c>)
     a06:	4798      	blx	r3
     a08:	4d0e      	ldr	r5, [pc, #56]	; (a44 <buildDataPacketsToServer+0x50>)
     a0a:	4404      	add	r4, r0
     a0c:	f105 0720 	add.w	r7, r5, #32
     a10:	462e      	mov	r6, r5
     a12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     a14:	6020      	str	r0, [r4, #0]
     a16:	6061      	str	r1, [r4, #4]
     a18:	60a2      	str	r2, [r4, #8]
     a1a:	60e3      	str	r3, [r4, #12]
     a1c:	4635      	mov	r5, r6
     a1e:	3410      	adds	r4, #16
     a20:	42be      	cmp	r6, r7
     a22:	d1f5      	bne.n	a10 <buildDataPacketsToServer+0x1c>
     a24:	cd07      	ldmia	r5!, {r0, r1, r2}
     a26:	6020      	str	r0, [r4, #0]
     a28:	6061      	str	r1, [r4, #4]
     a2a:	60a2      	str	r2, [r4, #8]
     a2c:	782b      	ldrb	r3, [r5, #0]
     a2e:	7323      	strb	r3, [r4, #12]
     a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a32:	bf00      	nop
     a34:	200001cc 	.word	0x200001cc
     a38:	20000014 	.word	0x20000014
     a3c:	000072d9 	.word	0x000072d9
     a40:	000072a5 	.word	0x000072a5
     a44:	00007fcc 	.word	0x00007fcc

00000a48 <mdmParser_solicitedCmdParser>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
bool mdmParser_solicitedCmdParser(AT_CMD_TYPE cmd)
{
     a48:	b5f0      	push	{r4, r5, r6, r7, lr}
     a4a:	b087      	sub	sp, #28
	uint8_t* responseBuffer = NULL;
	uint8_t* parsedDataBuffer = NULL;
	uint8_t parseCnt=0;
	MODEM_CMD_DATA cmdData;

	getModemCommandData(cmd, &cmdData);
     a4c:	a901      	add	r1, sp, #4
     a4e:	4b2d      	ldr	r3, [pc, #180]	; (b04 <mdmParser_solicitedCmdParser+0xbc>)
     a50:	4798      	blx	r3

	/* command length + /r/n */
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     a52:	f89d 700c 	ldrb.w	r7, [sp, #12]
	
	responseBuffer = (uint8_t*)pvPortMalloc((cmdData.ResponseLength)*(sizeof(uint8_t)));
     a56:	f8bd 0014 	ldrh.w	r0, [sp, #20]
     a5a:	4b2b      	ldr	r3, [pc, #172]	; (b08 <mdmParser_solicitedCmdParser+0xc0>)
     a5c:	4798      	blx	r3

	if(responseBuffer != NULL)
     a5e:	2800      	cmp	r0, #0
     a60:	d04a      	beq.n	af8 <mdmParser_solicitedCmdParser+0xb0>
     a62:	4604      	mov	r4, r0
	{
		readStatus = mdmCtrlr_ReadResponseFromModem(responseBuffer,cmdData.ResponseLength);
     a64:	f8bd 1014 	ldrh.w	r1, [sp, #20]
     a68:	4b28      	ldr	r3, [pc, #160]	; (b0c <mdmParser_solicitedCmdParser+0xc4>)
     a6a:	4798      	blx	r3

		if(readStatus != false)
     a6c:	4606      	mov	r6, r0
     a6e:	2800      	cmp	r0, #0
     a70:	d03e      	beq.n	af0 <mdmParser_solicitedCmdParser+0xa8>
		{
			if(VERIFIED_EQUAL == strncmp(cmdData.AtString, responseBuffer, cmdData.CmdLength))
     a72:	f89d 200c 	ldrb.w	r2, [sp, #12]
     a76:	4621      	mov	r1, r4
     a78:	9802      	ldr	r0, [sp, #8]
     a7a:	4b25      	ldr	r3, [pc, #148]	; (b10 <mdmParser_solicitedCmdParser+0xc8>)
     a7c:	4798      	blx	r3
     a7e:	bb58      	cbnz	r0, ad8 <mdmParser_solicitedCmdParser+0x90>
			{
				/* Command response is correctly identified. Allocate memory for parsed data */
				parsedDataBuffer = (uint8_t*)pvPortMalloc((((cmdData.validDataCnt)*(sizeof(uint8_t))) + 1));
     a80:	f8bd 000e 	ldrh.w	r0, [sp, #14]
     a84:	3001      	adds	r0, #1
     a86:	4b20      	ldr	r3, [pc, #128]	; (b08 <mdmParser_solicitedCmdParser+0xc0>)
     a88:	4798      	blx	r3

				if(parsedDataBuffer != NULL)
     a8a:	4605      	mov	r5, r0
     a8c:	b1f8      	cbz	r0, ace <mdmParser_solicitedCmdParser+0x86>
				{
					/* Extract the data part from modem response */
					while(parseCnt < cmdData.validDataCnt)
     a8e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
     a92:	b1d3      	cbz	r3, aca <mdmParser_solicitedCmdParser+0x82>
     a94:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     a96:	1cb9      	adds	r1, r7, #2
					{
						parsedDataBuffer[parseCnt] = responseBuffer[dataStartIndex + parseCnt];
     a98:	b2c9      	uxtb	r1, r1
     a9a:	18e2      	adds	r2, r4, r3
     a9c:	5c52      	ldrb	r2, [r2, r1]
     a9e:	54ea      	strb	r2, [r5, r3]
						parseCnt++;
     aa0:	3301      	adds	r3, #1
     aa2:	b2db      	uxtb	r3, r3
					while(parseCnt < cmdData.validDataCnt)
     aa4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     aa8:	429a      	cmp	r2, r3
     aaa:	d8f6      	bhi.n	a9a <mdmParser_solicitedCmdParser+0x52>
					}
					parsedDataBuffer[parseCnt] = '\0';
     aac:	2200      	movs	r2, #0
     aae:	54ea      	strb	r2, [r5, r3]
					cmdData.respHandler(cmdData.AtCmd,parsedDataBuffer,cmdData.validDataCnt+1);
     ab0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
     ab4:	3201      	adds	r2, #1
     ab6:	b292      	uxth	r2, r2
     ab8:	4629      	mov	r1, r5
     aba:	f89d 0004 	ldrb.w	r0, [sp, #4]
     abe:	9b04      	ldr	r3, [sp, #16]
     ac0:	4798      	blx	r3
					vPortFree(parsedDataBuffer);
     ac2:	4628      	mov	r0, r5
     ac4:	4b13      	ldr	r3, [pc, #76]	; (b14 <mdmParser_solicitedCmdParser+0xcc>)
     ac6:	4798      	blx	r3
     ac8:	e00a      	b.n	ae0 <mdmParser_solicitedCmdParser+0x98>
					while(parseCnt < cmdData.validDataCnt)
     aca:	2300      	movs	r3, #0
     acc:	e7ee      	b.n	aac <mdmParser_solicitedCmdParser+0x64>
					parseStatus = true;
				}
				else
				{
					DEBUG_PRINT("Error: Heap allocation for parse data buffer failed");
     ace:	4812      	ldr	r0, [pc, #72]	; (b18 <mdmParser_solicitedCmdParser+0xd0>)
     ad0:	4b12      	ldr	r3, [pc, #72]	; (b1c <mdmParser_solicitedCmdParser+0xd4>)
     ad2:	4798      	blx	r3
	bool parseStatus = false;
     ad4:	2600      	movs	r6, #0
     ad6:	e003      	b.n	ae0 <mdmParser_solicitedCmdParser+0x98>
				}
			}
			else
			{
				parseStatus = false;
				DEBUG_PRINT("Error: Not able to verify the command string during parsing");
     ad8:	4811      	ldr	r0, [pc, #68]	; (b20 <mdmParser_solicitedCmdParser+0xd8>)
     ada:	4b10      	ldr	r3, [pc, #64]	; (b1c <mdmParser_solicitedCmdParser+0xd4>)
     adc:	4798      	blx	r3
				parseStatus = false;
     ade:	2600      	movs	r6, #0
		else
		{
			parseStatus = false;
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
		}
		vPortFree(responseBuffer);
     ae0:	4620      	mov	r0, r4
     ae2:	4b0c      	ldr	r3, [pc, #48]	; (b14 <mdmParser_solicitedCmdParser+0xcc>)
     ae4:	4798      	blx	r3
	else
	{
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
	}

	mdmCtrlr_FlushRxBuffer();
     ae6:	4b0f      	ldr	r3, [pc, #60]	; (b24 <mdmParser_solicitedCmdParser+0xdc>)
     ae8:	4798      	blx	r3

	return parseStatus;
}
     aea:	4630      	mov	r0, r6
     aec:	b007      	add	sp, #28
     aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DEBUG_PRINT("Error: Not able to read data from receive ring buffer during parser");
     af0:	480d      	ldr	r0, [pc, #52]	; (b28 <mdmParser_solicitedCmdParser+0xe0>)
     af2:	4b0a      	ldr	r3, [pc, #40]	; (b1c <mdmParser_solicitedCmdParser+0xd4>)
     af4:	4798      	blx	r3
     af6:	e7f3      	b.n	ae0 <mdmParser_solicitedCmdParser+0x98>
		DEBUG_PRINT("Error: Heap allocation for response data buffer failed");
     af8:	480c      	ldr	r0, [pc, #48]	; (b2c <mdmParser_solicitedCmdParser+0xe4>)
     afa:	4b08      	ldr	r3, [pc, #32]	; (b1c <mdmParser_solicitedCmdParser+0xd4>)
     afc:	4798      	blx	r3
	bool parseStatus = false;
     afe:	2600      	movs	r6, #0
     b00:	e7f1      	b.n	ae6 <mdmParser_solicitedCmdParser+0x9e>
     b02:	bf00      	nop
     b04:	0000094d 	.word	0x0000094d
     b08:	00005495 	.word	0x00005495
     b0c:	00001e31 	.word	0x00001e31
     b10:	000072b5 	.word	0x000072b5
     b14:	00005569 	.word	0x00005569
     b18:	000081d8 	.word	0x000081d8
     b1c:	000026fd 	.word	0x000026fd
     b20:	0000820c 	.word	0x0000820c
     b24:	00001e85 	.word	0x00001e85
     b28:	00008248 	.word	0x00008248
     b2c:	0000828c 	.word	0x0000828c

00000b30 <mdmParser_SetLastCmdProcessed>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     b30:	4b01      	ldr	r3, [pc, #4]	; (b38 <mdmParser_SetLastCmdProcessed+0x8>)
     b32:	7018      	strb	r0, [r3, #0]
     b34:	4770      	bx	lr
     b36:	bf00      	nop
     b38:	20000023 	.word	0x20000023

00000b3c <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     b3c:	4b01      	ldr	r3, [pc, #4]	; (b44 <mdmParser_SetLastSentAtCommand+0x8>)
     b3e:	7018      	strb	r0, [r3, #0]
     b40:	4770      	bx	lr
     b42:	bf00      	nop
     b44:	20000208 	.word	0x20000208

00000b48 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     b48:	4b01      	ldr	r3, [pc, #4]	; (b50 <mdmParser_GetLastSentAtCommand+0x8>)
     b4a:	7818      	ldrb	r0, [r3, #0]
     b4c:	4770      	bx	lr
     b4e:	bf00      	nop
     b50:	20000208 	.word	0x20000208

00000b54 <getCloseActiveSessionCmd>:
**===========================================================================*/
static AT_CMD_TYPE getCloseActiveSessionCmd(uint8_t sessionID)
{
    AT_CMD_TYPE sessionCloseCmd;

    switch(sessionID)
     b54:	3801      	subs	r0, #1
     b56:	2809      	cmp	r0, #9
     b58:	d81a      	bhi.n	b90 <getCloseActiveSessionCmd+0x3c>
     b5a:	e8df f000 	tbb	[pc, r0]
     b5e:	0705      	.short	0x0705
     b60:	0f0d0b09 	.word	0x0f0d0b09
     b64:	17151311 	.word	0x17151311
    {
        case 1:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_1;
     b68:	200a      	movs	r0, #10
     b6a:	4770      	bx	lr
        }
        break;

        case 2:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_2;
     b6c:	200b      	movs	r0, #11
        }
        break;
     b6e:	4770      	bx	lr

        case 3:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_3;
     b70:	200c      	movs	r0, #12
        }
        break;
     b72:	4770      	bx	lr

        case 4:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_4;
     b74:	200d      	movs	r0, #13
        }
        break;
     b76:	4770      	bx	lr

        case 5:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_5;
     b78:	200e      	movs	r0, #14
        }
        break;
     b7a:	4770      	bx	lr

        case 6:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_6;
     b7c:	200f      	movs	r0, #15
        }
        break;
     b7e:	4770      	bx	lr

        case 7:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_7;
     b80:	2010      	movs	r0, #16
        }
        break;
     b82:	4770      	bx	lr

        case 8:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_8;
     b84:	2011      	movs	r0, #17
        }
        break;
     b86:	4770      	bx	lr

        case 9:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_9;
     b88:	2012      	movs	r0, #18
        }
        break;
     b8a:	4770      	bx	lr

        case 10:
        {
            sessionCloseCmd = CMD_AT_KHTTP_CLOSE_10;
     b8c:	2013      	movs	r0, #19
        }
        break;
     b8e:	4770      	bx	lr
    switch(sessionID)
     b90:	2000      	movs	r0, #0
        default:
        break;
    }
    
    return sessionCloseCmd;
}
     b92:	4770      	bx	lr

00000b94 <validateCommonCommandResponse>:
{
     b94:	b508      	push	{r3, lr}
    if(0==memcmp(response,"OK",2))
     b96:	2202      	movs	r2, #2
     b98:	4903      	ldr	r1, [pc, #12]	; (ba8 <validateCommonCommandResponse+0x14>)
     b9a:	4b04      	ldr	r3, [pc, #16]	; (bac <validateCommonCommandResponse+0x18>)
     b9c:	4798      	blx	r3
}
     b9e:	fab0 f080 	clz	r0, r0
     ba2:	0940      	lsrs	r0, r0, #5
     ba4:	bd08      	pop	{r3, pc}
     ba6:	bf00      	nop
     ba8:	000082c4 	.word	0x000082c4
     bac:	0000705d 	.word	0x0000705d

00000bb0 <MdmConnect_HttpConnectionInit>:
    gHttpConnectionState = MDM_HTTP_DISCONNECTED;
     bb0:	4b07      	ldr	r3, [pc, #28]	; (bd0 <MdmConnect_HttpConnectionInit+0x20>)
     bb2:	2200      	movs	r2, #0
     bb4:	701a      	strb	r2, [r3, #0]
    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
     bb6:	705a      	strb	r2, [r3, #1]
    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     bb8:	709a      	strb	r2, [r3, #2]
    gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
     bba:	70da      	strb	r2, [r3, #3]
    gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
     bbc:	711a      	strb	r2, [r3, #4]
    sessionIdCount = 5;
     bbe:	2105      	movs	r1, #5
     bc0:	7159      	strb	r1, [r3, #5]
    ConnectionResponse.atCmd = CMD_AT_MAX;
     bc2:	721a      	strb	r2, [r3, #8]
    ConnectionResponse.length = 0;
     bc4:	815a      	strh	r2, [r3, #10]
    ConnectionResponse.response = NULL;
     bc6:	60da      	str	r2, [r3, #12]
    currentSessionId = '0';
     bc8:	2230      	movs	r2, #48	; 0x30
     bca:	741a      	strb	r2, [r3, #16]
     bcc:	4770      	bx	lr
     bce:	bf00      	nop
     bd0:	2000020c 	.word	0x2000020c

00000bd4 <performForcedRebootOfModem>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
static void performForcedRebootOfModem(void)
{
     bd4:	b510      	push	{r4, lr}
	DEBUG_PRINT("Connection to the server is lost.....");
     bd6:	4805      	ldr	r0, [pc, #20]	; (bec <performForcedRebootOfModem+0x18>)
     bd8:	4c05      	ldr	r4, [pc, #20]	; (bf0 <performForcedRebootOfModem+0x1c>)
     bda:	47a0      	blx	r4
	DEBUG_PRINT("Trying to establish the connection to server...Please wait......\r\n");
     bdc:	4805      	ldr	r0, [pc, #20]	; (bf4 <performForcedRebootOfModem+0x20>)
     bde:	47a0      	blx	r4

	/* Perform a physical modem restart */
	modemPowerStateInit();
     be0:	4b05      	ldr	r3, [pc, #20]	; (bf8 <performForcedRebootOfModem+0x24>)
     be2:	4798      	blx	r3

	/* Reset the modem connection States */
	MdmConnect_HttpConnectionInit();
     be4:	4b05      	ldr	r3, [pc, #20]	; (bfc <performForcedRebootOfModem+0x28>)
     be6:	4798      	blx	r3
     be8:	bd10      	pop	{r4, pc}
     bea:	bf00      	nop
     bec:	000082c8 	.word	0x000082c8
     bf0:	000026fd 	.word	0x000026fd
     bf4:	000082f0 	.word	0x000082f0
     bf8:	00002145 	.word	0x00002145
     bfc:	00000bb1 	.word	0x00000bb1

00000c00 <MdmCnct_ConnectInProgressSubStateMachine>:
{
     c00:	b570      	push	{r4, r5, r6, lr}
     c02:	b082      	sub	sp, #8
    switch (gHttpConnectionInProgressSubstate)
     c04:	4b87      	ldr	r3, [pc, #540]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     c06:	785b      	ldrb	r3, [r3, #1]
     c08:	2b07      	cmp	r3, #7
     c0a:	f200 8092 	bhi.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
     c0e:	e8df f013 	tbh	[pc, r3, lsl #1]
     c12:	0008      	.short	0x0008
     c14:	013b008b 	.word	0x013b008b
     c18:	022d01c1 	.word	0x022d01c1
     c1c:	033802cc 	.word	0x033802cc
     c20:	0410      	.short	0x0410
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     c22:	4b80      	ldr	r3, [pc, #512]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     c24:	789b      	ldrb	r3, [r3, #2]
     c26:	2b00      	cmp	r3, #0
     c28:	d14d      	bne.n	cc6 <MdmCnct_ConnectInProgressSubStateMachine+0xc6>
                if(sessionIdCount > 0)
     c2a:	4b7e      	ldr	r3, [pc, #504]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     c2c:	795b      	ldrb	r3, [r3, #5]
     c2e:	2b00      	cmp	r3, #0
     c30:	d03e      	beq.n	cb0 <MdmCnct_ConnectInProgressSubStateMachine+0xb0>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     c32:	4b7d      	ldr	r3, [pc, #500]	; (e28 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
     c34:	6818      	ldr	r0, [r3, #0]
     c36:	4b7d      	ldr	r3, [pc, #500]	; (e2c <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
     c38:	4798      	blx	r3
     c3a:	2800      	cmp	r0, #0
     c3c:	d134      	bne.n	ca8 <MdmCnct_ConnectInProgressSubStateMachine+0xa8>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     c3e:	2100      	movs	r1, #0
     c40:	4b7b      	ldr	r3, [pc, #492]	; (e30 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     c42:	6818      	ldr	r0, [r3, #0]
     c44:	4b7b      	ldr	r3, [pc, #492]	; (e34 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
     c46:	4798      	blx	r3
     c48:	2801      	cmp	r0, #1
     c4a:	d003      	beq.n	c54 <MdmCnct_ConnectInProgressSubStateMachine+0x54>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     c4c:	487a      	ldr	r0, [pc, #488]	; (e38 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     c4e:	4b7b      	ldr	r3, [pc, #492]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     c50:	4798      	blx	r3
     c52:	e06e      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     c54:	2301      	movs	r3, #1
     c56:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
     c5a:	4b72      	ldr	r3, [pc, #456]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     c5c:	7958      	ldrb	r0, [r3, #5]
     c5e:	4b78      	ldr	r3, [pc, #480]	; (e40 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     c60:	4798      	blx	r3
     c62:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
     c66:	2300      	movs	r3, #0
     c68:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     c6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     c6e:	4669      	mov	r1, sp
     c70:	486d      	ldr	r0, [pc, #436]	; (e28 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
     c72:	6800      	ldr	r0, [r0, #0]
     c74:	4c73      	ldr	r4, [pc, #460]	; (e44 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     c76:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
     c78:	2801      	cmp	r0, #1
     c7a:	d007      	beq.n	c8c <MdmCnct_ConnectInProgressSubStateMachine+0x8c>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     c7c:	4872      	ldr	r0, [pc, #456]	; (e48 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     c7e:	4b6f      	ldr	r3, [pc, #444]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     c80:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
     c82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     c86:	4b71      	ldr	r3, [pc, #452]	; (e4c <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     c88:	4798      	blx	r3
     c8a:	e052      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
     c8c:	2300      	movs	r3, #0
     c8e:	461a      	mov	r2, r3
     c90:	4619      	mov	r1, r3
     c92:	4867      	ldr	r0, [pc, #412]	; (e30 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     c94:	6800      	ldr	r0, [r0, #0]
     c96:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     c98:	2201      	movs	r2, #1
     c9a:	4b62      	ldr	r3, [pc, #392]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     c9c:	709a      	strb	r2, [r3, #2]
                                vTaskDelay(TransmitDelayMs);
     c9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     ca2:	4b6a      	ldr	r3, [pc, #424]	; (e4c <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     ca4:	4798      	blx	r3
     ca6:	e044      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Transmit Queue is not empty");
     ca8:	4869      	ldr	r0, [pc, #420]	; (e50 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     caa:	4b64      	ldr	r3, [pc, #400]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     cac:	4798      	blx	r3
     cae:	e040      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("No More Active Connections to close");
     cb0:	4868      	ldr	r0, [pc, #416]	; (e54 <MdmCnct_ConnectInProgressSubStateMachine+0x254>)
     cb2:	4c62      	ldr	r4, [pc, #392]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     cb4:	47a0      	blx	r4
                    DEBUG_PRINT("\r\n");
     cb6:	4868      	ldr	r0, [pc, #416]	; (e58 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     cb8:	47a0      	blx	r4
                    gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
     cba:	4b5a      	ldr	r3, [pc, #360]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     cbc:	2201      	movs	r2, #1
     cbe:	705a      	strb	r2, [r3, #1]
                    gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     cc0:	2200      	movs	r2, #0
     cc2:	709a      	strb	r2, [r3, #2]
     cc4:	e035      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     cc6:	2b01      	cmp	r3, #1
     cc8:	d133      	bne.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     cca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     cce:	4963      	ldr	r1, [pc, #396]	; (e5c <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
     cd0:	4b63      	ldr	r3, [pc, #396]	; (e60 <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
     cd2:	6818      	ldr	r0, [r3, #0]
     cd4:	4b63      	ldr	r3, [pc, #396]	; (e64 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     cd6:	4798      	blx	r3
     cd8:	2801      	cmp	r0, #1
     cda:	d12a      	bne.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
     cdc:	4b51      	ldr	r3, [pc, #324]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     cde:	7a1d      	ldrb	r5, [r3, #8]
     ce0:	795c      	ldrb	r4, [r3, #5]
     ce2:	4620      	mov	r0, r4
     ce4:	4b56      	ldr	r3, [pc, #344]	; (e40 <MdmCnct_ConnectInProgressSubStateMachine+0x240>)
     ce6:	4798      	blx	r3
     ce8:	4285      	cmp	r5, r0
     cea:	d113      	bne.n	d14 <MdmCnct_ConnectInProgressSubStateMachine+0x114>
                        if(sessionIdCount > 0)
     cec:	b14c      	cbz	r4, d02 <MdmCnct_ConnectInProgressSubStateMachine+0x102>
                            sessionIdCount--;
     cee:	4b4d      	ldr	r3, [pc, #308]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     cf0:	3c01      	subs	r4, #1
     cf2:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     cf4:	2200      	movs	r2, #0
     cf6:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     cf8:	4b4a      	ldr	r3, [pc, #296]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     cfa:	68d8      	ldr	r0, [r3, #12]
     cfc:	4b5a      	ldr	r3, [pc, #360]	; (e68 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     cfe:	4798      	blx	r3
     d00:	e017      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
     d02:	4b48      	ldr	r3, [pc, #288]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     d04:	2201      	movs	r2, #1
     d06:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     d08:	2200      	movs	r2, #0
     d0a:	709a      	strb	r2, [r3, #2]
                            DEBUG_PRINT("Closed All Active Connections");
     d0c:	4857      	ldr	r0, [pc, #348]	; (e6c <MdmCnct_ConnectInProgressSubStateMachine+0x26c>)
     d0e:	4b4b      	ldr	r3, [pc, #300]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     d10:	4798      	blx	r3
     d12:	e7f1      	b.n	cf8 <MdmCnct_ConnectInProgressSubStateMachine+0xf8>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     d14:	4856      	ldr	r0, [pc, #344]	; (e70 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     d16:	4b49      	ldr	r3, [pc, #292]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     d18:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     d1a:	4b42      	ldr	r3, [pc, #264]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     d1c:	2200      	movs	r2, #0
     d1e:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     d20:	68d8      	ldr	r0, [r3, #12]
     d22:	4b51      	ldr	r3, [pc, #324]	; (e68 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     d24:	4798      	blx	r3
     d26:	e004      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     d28:	4b3e      	ldr	r3, [pc, #248]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     d2a:	789b      	ldrb	r3, [r3, #2]
     d2c:	b11b      	cbz	r3, d36 <MdmCnct_ConnectInProgressSubStateMachine+0x136>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     d2e:	2b01      	cmp	r3, #1
     d30:	d03e      	beq.n	db0 <MdmCnct_ConnectInProgressSubStateMachine+0x1b0>
}
     d32:	b002      	add	sp, #8
     d34:	bd70      	pop	{r4, r5, r6, pc}
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     d36:	4b3c      	ldr	r3, [pc, #240]	; (e28 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
     d38:	6818      	ldr	r0, [r3, #0]
     d3a:	4b3c      	ldr	r3, [pc, #240]	; (e2c <MdmCnct_ConnectInProgressSubStateMachine+0x22c>)
     d3c:	4798      	blx	r3
     d3e:	2800      	cmp	r0, #0
     d40:	d132      	bne.n	da8 <MdmCnct_ConnectInProgressSubStateMachine+0x1a8>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     d42:	2100      	movs	r1, #0
     d44:	4b3a      	ldr	r3, [pc, #232]	; (e30 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     d46:	6818      	ldr	r0, [r3, #0]
     d48:	4b3a      	ldr	r3, [pc, #232]	; (e34 <MdmCnct_ConnectInProgressSubStateMachine+0x234>)
     d4a:	4798      	blx	r3
     d4c:	2801      	cmp	r0, #1
     d4e:	d003      	beq.n	d58 <MdmCnct_ConnectInProgressSubStateMachine+0x158>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     d50:	4839      	ldr	r0, [pc, #228]	; (e38 <MdmCnct_ConnectInProgressSubStateMachine+0x238>)
     d52:	4b3a      	ldr	r3, [pc, #232]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     d54:	4798      	blx	r3
     d56:	e7ec      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     d58:	2301      	movs	r3, #1
     d5a:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
     d5e:	231a      	movs	r3, #26
     d60:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     d64:	2300      	movs	r3, #0
     d66:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     d68:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     d6c:	4669      	mov	r1, sp
     d6e:	482e      	ldr	r0, [pc, #184]	; (e28 <MdmCnct_ConnectInProgressSubStateMachine+0x228>)
     d70:	6800      	ldr	r0, [r0, #0]
     d72:	4c34      	ldr	r4, [pc, #208]	; (e44 <MdmCnct_ConnectInProgressSubStateMachine+0x244>)
     d74:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     d76:	2801      	cmp	r0, #1
     d78:	d007      	beq.n	d8a <MdmCnct_ConnectInProgressSubStateMachine+0x18a>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
     d7a:	4833      	ldr	r0, [pc, #204]	; (e48 <MdmCnct_ConnectInProgressSubStateMachine+0x248>)
     d7c:	4b2f      	ldr	r3, [pc, #188]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     d7e:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     d80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     d84:	4b31      	ldr	r3, [pc, #196]	; (e4c <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     d86:	4798      	blx	r3
     d88:	e7d3      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     d8a:	2300      	movs	r3, #0
     d8c:	461a      	mov	r2, r3
     d8e:	4619      	mov	r1, r3
     d90:	4827      	ldr	r0, [pc, #156]	; (e30 <MdmCnct_ConnectInProgressSubStateMachine+0x230>)
     d92:	6800      	ldr	r0, [r0, #0]
     d94:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     d96:	4b23      	ldr	r3, [pc, #140]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     d98:	2201      	movs	r2, #1
     d9a:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PDP_CONNECTION_DOWN;
     d9c:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
     d9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     da2:	4b2a      	ldr	r3, [pc, #168]	; (e4c <MdmCnct_ConnectInProgressSubStateMachine+0x24c>)
     da4:	4798      	blx	r3
     da6:	e7c4      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     da8:	4829      	ldr	r0, [pc, #164]	; (e50 <MdmCnct_ConnectInProgressSubStateMachine+0x250>)
     daa:	4b24      	ldr	r3, [pc, #144]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     dac:	4798      	blx	r3
     dae:	e7c0      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     db0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     db4:	4929      	ldr	r1, [pc, #164]	; (e5c <MdmCnct_ConnectInProgressSubStateMachine+0x25c>)
     db6:	4b2a      	ldr	r3, [pc, #168]	; (e60 <MdmCnct_ConnectInProgressSubStateMachine+0x260>)
     db8:	6818      	ldr	r0, [r3, #0]
     dba:	4b2a      	ldr	r3, [pc, #168]	; (e64 <MdmCnct_ConnectInProgressSubStateMachine+0x264>)
     dbc:	4798      	blx	r3
     dbe:	2801      	cmp	r0, #1
     dc0:	d1b7      	bne.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
     dc2:	4b18      	ldr	r3, [pc, #96]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     dc4:	7a1b      	ldrb	r3, [r3, #8]
     dc6:	2b1a      	cmp	r3, #26
     dc8:	d122      	bne.n	e10 <MdmCnct_ConnectInProgressSubStateMachine+0x210>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
     dca:	4b16      	ldr	r3, [pc, #88]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     dcc:	68d8      	ldr	r0, [r3, #12]
     dce:	4b29      	ldr	r3, [pc, #164]	; (e74 <MdmCnct_ConnectInProgressSubStateMachine+0x274>)
     dd0:	4798      	blx	r3
     dd2:	b190      	cbz	r0, dfa <MdmCnct_ConnectInProgressSubStateMachine+0x1fa>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
     dd4:	4828      	ldr	r0, [pc, #160]	; (e78 <MdmCnct_ConnectInProgressSubStateMachine+0x278>)
     dd6:	4d19      	ldr	r5, [pc, #100]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     dd8:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     dda:	4c12      	ldr	r4, [pc, #72]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     ddc:	8961      	ldrh	r1, [r4, #10]
     dde:	68e0      	ldr	r0, [r4, #12]
     de0:	4b26      	ldr	r3, [pc, #152]	; (e7c <MdmCnct_ConnectInProgressSubStateMachine+0x27c>)
     de2:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     de4:	481c      	ldr	r0, [pc, #112]	; (e58 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     de6:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     de8:	2300      	movs	r3, #0
     dea:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
     dec:	2302      	movs	r3, #2
     dee:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
     df0:	4b0c      	ldr	r3, [pc, #48]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     df2:	68d8      	ldr	r0, [r3, #12]
     df4:	4b1c      	ldr	r3, [pc, #112]	; (e68 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     df6:	4798      	blx	r3
     df8:	e79b      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            DEBUG_PRINT("Expected Response Not Received...");
     dfa:	4821      	ldr	r0, [pc, #132]	; (e80 <MdmCnct_ConnectInProgressSubStateMachine+0x280>)
     dfc:	4c0f      	ldr	r4, [pc, #60]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     dfe:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
     e00:	4815      	ldr	r0, [pc, #84]	; (e58 <MdmCnct_ConnectInProgressSubStateMachine+0x258>)
     e02:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     e04:	2200      	movs	r2, #0
     e06:	4b07      	ldr	r3, [pc, #28]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     e08:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
     e0a:	4b1e      	ldr	r3, [pc, #120]	; (e84 <MdmCnct_ConnectInProgressSubStateMachine+0x284>)
     e0c:	4798      	blx	r3
     e0e:	e7ef      	b.n	df0 <MdmCnct_ConnectInProgressSubStateMachine+0x1f0>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     e10:	4817      	ldr	r0, [pc, #92]	; (e70 <MdmCnct_ConnectInProgressSubStateMachine+0x270>)
     e12:	4b0a      	ldr	r3, [pc, #40]	; (e3c <MdmCnct_ConnectInProgressSubStateMachine+0x23c>)
     e14:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     e16:	4b03      	ldr	r3, [pc, #12]	; (e24 <MdmCnct_ConnectInProgressSubStateMachine+0x224>)
     e18:	2200      	movs	r2, #0
     e1a:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     e1c:	68d8      	ldr	r0, [r3, #12]
     e1e:	4b12      	ldr	r3, [pc, #72]	; (e68 <MdmCnct_ConnectInProgressSubStateMachine+0x268>)
     e20:	4798      	blx	r3
     e22:	e786      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
     e24:	2000020c 	.word	0x2000020c
     e28:	200034a0 	.word	0x200034a0
     e2c:	00005f09 	.word	0x00005f09
     e30:	200034b0 	.word	0x200034b0
     e34:	00005d29 	.word	0x00005d29
     e38:	00008368 	.word	0x00008368
     e3c:	000026fd 	.word	0x000026fd
     e40:	00000b55 	.word	0x00000b55
     e44:	00005891 	.word	0x00005891
     e48:	00008334 	.word	0x00008334
     e4c:	00006521 	.word	0x00006521
     e50:	00008394 	.word	0x00008394
     e54:	000083b0 	.word	0x000083b0
     e58:	00008cd8 	.word	0x00008cd8
     e5c:	20000214 	.word	0x20000214
     e60:	20003480 	.word	0x20003480
     e64:	00005ba1 	.word	0x00005ba1
     e68:	00005569 	.word	0x00005569
     e6c:	000083d4 	.word	0x000083d4
     e70:	000083f4 	.word	0x000083f4
     e74:	00000b95 	.word	0x00000b95
     e78:	00008428 	.word	0x00008428
     e7c:	000026b9 	.word	0x000026b9
     e80:	00008448 	.word	0x00008448
     e84:	00000bd5 	.word	0x00000bd5
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     e88:	4b90      	ldr	r3, [pc, #576]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     e8a:	789b      	ldrb	r3, [r3, #2]
     e8c:	2b00      	cmp	r3, #0
     e8e:	d02e      	beq.n	eee <MdmCnct_ConnectInProgressSubStateMachine+0x2ee>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     e90:	2b01      	cmp	r3, #1
     e92:	f47f af4e 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     e96:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     e9a:	498d      	ldr	r1, [pc, #564]	; (10d0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
     e9c:	4b8d      	ldr	r3, [pc, #564]	; (10d4 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
     e9e:	6818      	ldr	r0, [r3, #0]
     ea0:	4b8d      	ldr	r3, [pc, #564]	; (10d8 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     ea2:	4798      	blx	r3
     ea4:	2801      	cmp	r0, #1
     ea6:	f47f af44 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
     eaa:	4b88      	ldr	r3, [pc, #544]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     eac:	7a1b      	ldrb	r3, [r3, #8]
     eae:	2b1b      	cmp	r3, #27
     eb0:	d166      	bne.n	f80 <MdmCnct_ConnectInProgressSubStateMachine+0x380>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
     eb2:	4b86      	ldr	r3, [pc, #536]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     eb4:	68d8      	ldr	r0, [r3, #12]
     eb6:	4b89      	ldr	r3, [pc, #548]	; (10dc <MdmCnct_ConnectInProgressSubStateMachine+0x4dc>)
     eb8:	4798      	blx	r3
     eba:	2800      	cmp	r0, #0
     ebc:	d055      	beq.n	f6a <MdmCnct_ConnectInProgressSubStateMachine+0x36a>
                            DEBUG_PRINT("Detached the PDP PS");
     ebe:	4888      	ldr	r0, [pc, #544]	; (10e0 <MdmCnct_ConnectInProgressSubStateMachine+0x4e0>)
     ec0:	4d88      	ldr	r5, [pc, #544]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     ec2:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
     ec4:	4c81      	ldr	r4, [pc, #516]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     ec6:	8961      	ldrh	r1, [r4, #10]
     ec8:	68e0      	ldr	r0, [r4, #12]
     eca:	4b87      	ldr	r3, [pc, #540]	; (10e8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
     ecc:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
     ece:	4e87      	ldr	r6, [pc, #540]	; (10ec <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     ed0:	4630      	mov	r0, r6
     ed2:	47a8      	blx	r5
                            DEBUG_PRINT("Deleted all of the previous connection configurations");
     ed4:	4886      	ldr	r0, [pc, #536]	; (10f0 <MdmCnct_ConnectInProgressSubStateMachine+0x4f0>)
     ed6:	47a8      	blx	r5
                            DEBUG_PRINT("\r\n");
     ed8:	4630      	mov	r0, r6
     eda:	47a8      	blx	r5
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     edc:	2300      	movs	r3, #0
     ede:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_EOF_PATTERN;
     ee0:	2303      	movs	r3, #3
     ee2:	7063      	strb	r3, [r4, #1]
                        vPortFree(ConnectionResponse.response);
     ee4:	4b79      	ldr	r3, [pc, #484]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     ee6:	68d8      	ldr	r0, [r3, #12]
     ee8:	4b82      	ldr	r3, [pc, #520]	; (10f4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     eea:	4798      	blx	r3
     eec:	e721      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     eee:	4b82      	ldr	r3, [pc, #520]	; (10f8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     ef0:	6818      	ldr	r0, [r3, #0]
     ef2:	4b82      	ldr	r3, [pc, #520]	; (10fc <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     ef4:	4798      	blx	r3
     ef6:	2800      	cmp	r0, #0
     ef8:	d133      	bne.n	f62 <MdmCnct_ConnectInProgressSubStateMachine+0x362>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     efa:	2100      	movs	r1, #0
     efc:	4b80      	ldr	r3, [pc, #512]	; (1100 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     efe:	6818      	ldr	r0, [r3, #0]
     f00:	4b80      	ldr	r3, [pc, #512]	; (1104 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     f02:	4798      	blx	r3
     f04:	2801      	cmp	r0, #1
     f06:	d003      	beq.n	f10 <MdmCnct_ConnectInProgressSubStateMachine+0x310>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     f08:	487f      	ldr	r0, [pc, #508]	; (1108 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     f0a:	4b76      	ldr	r3, [pc, #472]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     f0c:	4798      	blx	r3
     f0e:	e710      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     f10:	2301      	movs	r3, #1
     f12:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
     f16:	231b      	movs	r3, #27
     f18:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     f1c:	2300      	movs	r3, #0
     f1e:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     f20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
     f24:	4669      	mov	r1, sp
     f26:	4874      	ldr	r0, [pc, #464]	; (10f8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     f28:	6800      	ldr	r0, [r0, #0]
     f2a:	4c78      	ldr	r4, [pc, #480]	; (110c <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
     f2c:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
     f2e:	2801      	cmp	r0, #1
     f30:	d007      	beq.n	f42 <MdmCnct_ConnectInProgressSubStateMachine+0x342>
                            DEBUG_PRINT("Failed to sent the PS Detach request to Tx Task");
     f32:	4877      	ldr	r0, [pc, #476]	; (1110 <MdmCnct_ConnectInProgressSubStateMachine+0x510>)
     f34:	4b6b      	ldr	r3, [pc, #428]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     f36:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
     f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f3c:	4b75      	ldr	r3, [pc, #468]	; (1114 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     f3e:	4798      	blx	r3
     f40:	e6f7      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
     f42:	2300      	movs	r3, #0
     f44:	461a      	mov	r2, r3
     f46:	4619      	mov	r1, r3
     f48:	486d      	ldr	r0, [pc, #436]	; (1100 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     f4a:	6800      	ldr	r0, [r0, #0]
     f4c:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
     f4e:	4b5f      	ldr	r3, [pc, #380]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     f50:	2201      	movs	r2, #1
     f52:	709a      	strb	r2, [r3, #2]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_PS_CONNECTION_DETACH;
     f54:	2202      	movs	r2, #2
     f56:	705a      	strb	r2, [r3, #1]
                            vTaskDelay(TransmitDelayMs);
     f58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f5c:	4b6d      	ldr	r3, [pc, #436]	; (1114 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
     f5e:	4798      	blx	r3
     f60:	e6e7      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
     f62:	486d      	ldr	r0, [pc, #436]	; (1118 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
     f64:	4b5f      	ldr	r3, [pc, #380]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     f66:	4798      	blx	r3
     f68:	e6e3      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            DEBUG_PRINT("Expected Response Not Received...");
     f6a:	486c      	ldr	r0, [pc, #432]	; (111c <MdmCnct_ConnectInProgressSubStateMachine+0x51c>)
     f6c:	4c5d      	ldr	r4, [pc, #372]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     f6e:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
     f70:	485e      	ldr	r0, [pc, #376]	; (10ec <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
     f72:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     f74:	2200      	movs	r2, #0
     f76:	4b55      	ldr	r3, [pc, #340]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     f78:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
     f7a:	4b69      	ldr	r3, [pc, #420]	; (1120 <MdmCnct_ConnectInProgressSubStateMachine+0x520>)
     f7c:	4798      	blx	r3
     f7e:	e7b1      	b.n	ee4 <MdmCnct_ConnectInProgressSubStateMachine+0x2e4>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     f80:	4868      	ldr	r0, [pc, #416]	; (1124 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
     f82:	4b58      	ldr	r3, [pc, #352]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     f84:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     f86:	4b51      	ldr	r3, [pc, #324]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     f88:	2200      	movs	r2, #0
     f8a:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     f8c:	68d8      	ldr	r0, [r3, #12]
     f8e:	4b59      	ldr	r3, [pc, #356]	; (10f4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     f90:	4798      	blx	r3
     f92:	e6ce      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
     f94:	4b4d      	ldr	r3, [pc, #308]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     f96:	789b      	ldrb	r3, [r3, #2]
     f98:	b1d3      	cbz	r3, fd0 <MdmCnct_ConnectInProgressSubStateMachine+0x3d0>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
     f9a:	2b01      	cmp	r3, #1
     f9c:	f47f aec9 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
     fa0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
     fa4:	494a      	ldr	r1, [pc, #296]	; (10d0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
     fa6:	4b4b      	ldr	r3, [pc, #300]	; (10d4 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
     fa8:	6818      	ldr	r0, [r3, #0]
     faa:	4b4b      	ldr	r3, [pc, #300]	; (10d8 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
     fac:	4798      	blx	r3
     fae:	2801      	cmp	r0, #1
     fb0:	f47f aebf 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KPATTERN)
     fb4:	4b45      	ldr	r3, [pc, #276]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     fb6:	7a1b      	ldrb	r3, [r3, #8]
     fb8:	2b14      	cmp	r3, #20
     fba:	d045      	beq.n	1048 <MdmCnct_ConnectInProgressSubStateMachine+0x448>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
     fbc:	4859      	ldr	r0, [pc, #356]	; (1124 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
     fbe:	4b49      	ldr	r3, [pc, #292]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     fc0:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
     fc2:	4b42      	ldr	r3, [pc, #264]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
     fc4:	2200      	movs	r2, #0
     fc6:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
     fc8:	68d8      	ldr	r0, [r3, #12]
     fca:	4b4a      	ldr	r3, [pc, #296]	; (10f4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
     fcc:	4798      	blx	r3
     fce:	e6b0      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     fd0:	4b49      	ldr	r3, [pc, #292]	; (10f8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
     fd2:	6818      	ldr	r0, [r3, #0]
     fd4:	4b49      	ldr	r3, [pc, #292]	; (10fc <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
     fd6:	4798      	blx	r3
     fd8:	2800      	cmp	r0, #0
     fda:	d131      	bne.n	1040 <MdmCnct_ConnectInProgressSubStateMachine+0x440>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     fdc:	2100      	movs	r1, #0
     fde:	4b48      	ldr	r3, [pc, #288]	; (1100 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
     fe0:	6818      	ldr	r0, [r3, #0]
     fe2:	4b48      	ldr	r3, [pc, #288]	; (1104 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
     fe4:	4798      	blx	r3
     fe6:	2801      	cmp	r0, #1
     fe8:	d003      	beq.n	ff2 <MdmCnct_ConnectInProgressSubStateMachine+0x3f2>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
     fea:	4847      	ldr	r0, [pc, #284]	; (1108 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
     fec:	4b3d      	ldr	r3, [pc, #244]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
     fee:	4798      	blx	r3
     ff0:	e69f      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
     ff2:	2301      	movs	r3, #1
     ff4:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KPATTERN;
     ff8:	2314      	movs	r3, #20
     ffa:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
     ffe:	2300      	movs	r3, #0
    1000:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1002:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1006:	4669      	mov	r1, sp
    1008:	483b      	ldr	r0, [pc, #236]	; (10f8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    100a:	6800      	ldr	r0, [r0, #0]
    100c:	4c3f      	ldr	r4, [pc, #252]	; (110c <MdmCnct_ConnectInProgressSubStateMachine+0x50c>)
    100e:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1010:	2801      	cmp	r0, #1
    1012:	d007      	beq.n	1024 <MdmCnct_ConnectInProgressSubStateMachine+0x424>
                            DEBUG_PRINT("Failed to sent the EOF pattern to Tx Task");
    1014:	4844      	ldr	r0, [pc, #272]	; (1128 <MdmCnct_ConnectInProgressSubStateMachine+0x528>)
    1016:	4b33      	ldr	r3, [pc, #204]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    1018:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    101a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    101e:	4b3d      	ldr	r3, [pc, #244]	; (1114 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
    1020:	4798      	blx	r3
    1022:	e686      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1024:	2300      	movs	r3, #0
    1026:	461a      	mov	r2, r3
    1028:	4619      	mov	r1, r3
    102a:	4835      	ldr	r0, [pc, #212]	; (1100 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    102c:	6800      	ldr	r0, [r0, #0]
    102e:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1030:	2201      	movs	r2, #1
    1032:	4b26      	ldr	r3, [pc, #152]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1034:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1036:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    103a:	4b36      	ldr	r3, [pc, #216]	; (1114 <MdmCnct_ConnectInProgressSubStateMachine+0x514>)
    103c:	4798      	blx	r3
    103e:	e678      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1040:	4835      	ldr	r0, [pc, #212]	; (1118 <MdmCnct_ConnectInProgressSubStateMachine+0x518>)
    1042:	4b28      	ldr	r3, [pc, #160]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    1044:	4798      	blx	r3
    1046:	e674      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("EOF Pattern configured");
    1048:	4838      	ldr	r0, [pc, #224]	; (112c <MdmCnct_ConnectInProgressSubStateMachine+0x52c>)
    104a:	4d26      	ldr	r5, [pc, #152]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    104c:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    104e:	4c1f      	ldr	r4, [pc, #124]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    1050:	8961      	ldrh	r1, [r4, #10]
    1052:	68e0      	ldr	r0, [r4, #12]
    1054:	4b24      	ldr	r3, [pc, #144]	; (10e8 <MdmCnct_ConnectInProgressSubStateMachine+0x4e8>)
    1056:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1058:	4824      	ldr	r0, [pc, #144]	; (10ec <MdmCnct_ConnectInProgressSubStateMachine+0x4ec>)
    105a:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_ACCESS_POINT;
    105c:	2304      	movs	r3, #4
    105e:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1060:	2300      	movs	r3, #0
    1062:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    1064:	68e0      	ldr	r0, [r4, #12]
    1066:	4b23      	ldr	r3, [pc, #140]	; (10f4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
    1068:	4798      	blx	r3
    106a:	e662      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    106c:	4b17      	ldr	r3, [pc, #92]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    106e:	789b      	ldrb	r3, [r3, #2]
    1070:	b1d3      	cbz	r3, 10a8 <MdmCnct_ConnectInProgressSubStateMachine+0x4a8>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1072:	2b01      	cmp	r3, #1
    1074:	f47f ae5d 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1078:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    107c:	4914      	ldr	r1, [pc, #80]	; (10d0 <MdmCnct_ConnectInProgressSubStateMachine+0x4d0>)
    107e:	4b15      	ldr	r3, [pc, #84]	; (10d4 <MdmCnct_ConnectInProgressSubStateMachine+0x4d4>)
    1080:	6818      	ldr	r0, [r3, #0]
    1082:	4b15      	ldr	r3, [pc, #84]	; (10d8 <MdmCnct_ConnectInProgressSubStateMachine+0x4d8>)
    1084:	4798      	blx	r3
    1086:	2801      	cmp	r0, #1
    1088:	f47f ae53 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXCFG)
    108c:	4b0f      	ldr	r3, [pc, #60]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    108e:	7a1b      	ldrb	r3, [r3, #8]
    1090:	2b15      	cmp	r3, #21
    1092:	d078      	beq.n	1186 <MdmCnct_ConnectInProgressSubStateMachine+0x586>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1094:	4823      	ldr	r0, [pc, #140]	; (1124 <MdmCnct_ConnectInProgressSubStateMachine+0x524>)
    1096:	4b13      	ldr	r3, [pc, #76]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    1098:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    109a:	4b0c      	ldr	r3, [pc, #48]	; (10cc <MdmCnct_ConnectInProgressSubStateMachine+0x4cc>)
    109c:	2200      	movs	r2, #0
    109e:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    10a0:	68d8      	ldr	r0, [r3, #12]
    10a2:	4b14      	ldr	r3, [pc, #80]	; (10f4 <MdmCnct_ConnectInProgressSubStateMachine+0x4f4>)
    10a4:	4798      	blx	r3
    10a6:	e644      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    10a8:	4b13      	ldr	r3, [pc, #76]	; (10f8 <MdmCnct_ConnectInProgressSubStateMachine+0x4f8>)
    10aa:	6818      	ldr	r0, [r3, #0]
    10ac:	4b13      	ldr	r3, [pc, #76]	; (10fc <MdmCnct_ConnectInProgressSubStateMachine+0x4fc>)
    10ae:	4798      	blx	r3
    10b0:	2800      	cmp	r0, #0
    10b2:	d164      	bne.n	117e <MdmCnct_ConnectInProgressSubStateMachine+0x57e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    10b4:	2100      	movs	r1, #0
    10b6:	4b12      	ldr	r3, [pc, #72]	; (1100 <MdmCnct_ConnectInProgressSubStateMachine+0x500>)
    10b8:	6818      	ldr	r0, [r3, #0]
    10ba:	4b12      	ldr	r3, [pc, #72]	; (1104 <MdmCnct_ConnectInProgressSubStateMachine+0x504>)
    10bc:	4798      	blx	r3
    10be:	2801      	cmp	r0, #1
    10c0:	d036      	beq.n	1130 <MdmCnct_ConnectInProgressSubStateMachine+0x530>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    10c2:	4811      	ldr	r0, [pc, #68]	; (1108 <MdmCnct_ConnectInProgressSubStateMachine+0x508>)
    10c4:	4b07      	ldr	r3, [pc, #28]	; (10e4 <MdmCnct_ConnectInProgressSubStateMachine+0x4e4>)
    10c6:	4798      	blx	r3
    10c8:	e633      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
    10ca:	bf00      	nop
    10cc:	2000020c 	.word	0x2000020c
    10d0:	20000214 	.word	0x20000214
    10d4:	20003480 	.word	0x20003480
    10d8:	00005ba1 	.word	0x00005ba1
    10dc:	00000b95 	.word	0x00000b95
    10e0:	0000849c 	.word	0x0000849c
    10e4:	000026fd 	.word	0x000026fd
    10e8:	000026b9 	.word	0x000026b9
    10ec:	00008cd8 	.word	0x00008cd8
    10f0:	000084b0 	.word	0x000084b0
    10f4:	00005569 	.word	0x00005569
    10f8:	200034a0 	.word	0x200034a0
    10fc:	00005f09 	.word	0x00005f09
    1100:	200034b0 	.word	0x200034b0
    1104:	00005d29 	.word	0x00005d29
    1108:	00008368 	.word	0x00008368
    110c:	00005891 	.word	0x00005891
    1110:	0000846c 	.word	0x0000846c
    1114:	00006521 	.word	0x00006521
    1118:	00008394 	.word	0x00008394
    111c:	00008448 	.word	0x00008448
    1120:	00000bd5 	.word	0x00000bd5
    1124:	000083f4 	.word	0x000083f4
    1128:	000084e8 	.word	0x000084e8
    112c:	00008514 	.word	0x00008514
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1130:	2301      	movs	r3, #1
    1132:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXCFG;
    1136:	2315      	movs	r3, #21
    1138:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    113c:	2300      	movs	r3, #0
    113e:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1140:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1144:	4669      	mov	r1, sp
    1146:	4890      	ldr	r0, [pc, #576]	; (1388 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    1148:	6800      	ldr	r0, [r0, #0]
    114a:	4c90      	ldr	r4, [pc, #576]	; (138c <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
    114c:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    114e:	2801      	cmp	r0, #1
    1150:	d007      	beq.n	1162 <MdmCnct_ConnectInProgressSubStateMachine+0x562>
                            DEBUG_PRINT("Failed to sent access point cmd to Tx Task");
    1152:	488f      	ldr	r0, [pc, #572]	; (1390 <MdmCnct_ConnectInProgressSubStateMachine+0x790>)
    1154:	4b8f      	ldr	r3, [pc, #572]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1156:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1158:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    115c:	4b8e      	ldr	r3, [pc, #568]	; (1398 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    115e:	4798      	blx	r3
    1160:	e5e7      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1162:	2300      	movs	r3, #0
    1164:	461a      	mov	r2, r3
    1166:	4619      	mov	r1, r3
    1168:	488c      	ldr	r0, [pc, #560]	; (139c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    116a:	6800      	ldr	r0, [r0, #0]
    116c:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    116e:	2201      	movs	r2, #1
    1170:	4b8b      	ldr	r3, [pc, #556]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1172:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1174:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1178:	4b87      	ldr	r3, [pc, #540]	; (1398 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    117a:	4798      	blx	r3
    117c:	e5d9      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    117e:	4889      	ldr	r0, [pc, #548]	; (13a4 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1180:	4b84      	ldr	r3, [pc, #528]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1182:	4798      	blx	r3
    1184:	e5d5      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Access Point configured");
    1186:	4888      	ldr	r0, [pc, #544]	; (13a8 <MdmCnct_ConnectInProgressSubStateMachine+0x7a8>)
    1188:	4d82      	ldr	r5, [pc, #520]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    118a:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    118c:	4c84      	ldr	r4, [pc, #528]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    118e:	8961      	ldrh	r1, [r4, #10]
    1190:	68e0      	ldr	r0, [r4, #12]
    1192:	4b86      	ldr	r3, [pc, #536]	; (13ac <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1194:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1196:	4886      	ldr	r0, [pc, #536]	; (13b0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1198:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_CONNECT_TIMERS;
    119a:	2305      	movs	r3, #5
    119c:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    119e:	2300      	movs	r3, #0
    11a0:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    11a2:	68e0      	ldr	r0, [r4, #12]
    11a4:	4b83      	ldr	r3, [pc, #524]	; (13b4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    11a6:	4798      	blx	r3
    11a8:	e5c3      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    11aa:	4b7d      	ldr	r3, [pc, #500]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    11ac:	789b      	ldrb	r3, [r3, #2]
    11ae:	b1d3      	cbz	r3, 11e6 <MdmCnct_ConnectInProgressSubStateMachine+0x5e6>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    11b0:	2b01      	cmp	r3, #1
    11b2:	f47f adbe 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    11b6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    11ba:	497f      	ldr	r1, [pc, #508]	; (13b8 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
    11bc:	4b7f      	ldr	r3, [pc, #508]	; (13bc <MdmCnct_ConnectInProgressSubStateMachine+0x7bc>)
    11be:	6818      	ldr	r0, [r3, #0]
    11c0:	4b7f      	ldr	r3, [pc, #508]	; (13c0 <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    11c2:	4798      	blx	r3
    11c4:	2801      	cmp	r0, #1
    11c6:	f47f adb4 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNXTIMER)
    11ca:	4b75      	ldr	r3, [pc, #468]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    11cc:	7a1b      	ldrb	r3, [r3, #8]
    11ce:	2b16      	cmp	r3, #22
    11d0:	d045      	beq.n	125e <MdmCnct_ConnectInProgressSubStateMachine+0x65e>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    11d2:	487c      	ldr	r0, [pc, #496]	; (13c4 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    11d4:	4b6f      	ldr	r3, [pc, #444]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    11d6:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    11d8:	4b71      	ldr	r3, [pc, #452]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    11da:	2200      	movs	r2, #0
    11dc:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    11de:	68d8      	ldr	r0, [r3, #12]
    11e0:	4b74      	ldr	r3, [pc, #464]	; (13b4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    11e2:	4798      	blx	r3
    11e4:	e5a5      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    11e6:	4b68      	ldr	r3, [pc, #416]	; (1388 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    11e8:	6818      	ldr	r0, [r3, #0]
    11ea:	4b77      	ldr	r3, [pc, #476]	; (13c8 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    11ec:	4798      	blx	r3
    11ee:	2800      	cmp	r0, #0
    11f0:	d131      	bne.n	1256 <MdmCnct_ConnectInProgressSubStateMachine+0x656>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    11f2:	2100      	movs	r1, #0
    11f4:	4b69      	ldr	r3, [pc, #420]	; (139c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    11f6:	6818      	ldr	r0, [r3, #0]
    11f8:	4b74      	ldr	r3, [pc, #464]	; (13cc <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    11fa:	4798      	blx	r3
    11fc:	2801      	cmp	r0, #1
    11fe:	d003      	beq.n	1208 <MdmCnct_ConnectInProgressSubStateMachine+0x608>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1200:	4873      	ldr	r0, [pc, #460]	; (13d0 <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    1202:	4b64      	ldr	r3, [pc, #400]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1204:	4798      	blx	r3
    1206:	e594      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1208:	2301      	movs	r3, #1
    120a:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNXTIMER;
    120e:	2316      	movs	r3, #22
    1210:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1214:	2300      	movs	r3, #0
    1216:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1218:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    121c:	4669      	mov	r1, sp
    121e:	485a      	ldr	r0, [pc, #360]	; (1388 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    1220:	6800      	ldr	r0, [r0, #0]
    1222:	4c5a      	ldr	r4, [pc, #360]	; (138c <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
    1224:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1226:	2801      	cmp	r0, #1
    1228:	d007      	beq.n	123a <MdmCnct_ConnectInProgressSubStateMachine+0x63a>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    122a:	486a      	ldr	r0, [pc, #424]	; (13d4 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    122c:	4b59      	ldr	r3, [pc, #356]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    122e:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1234:	4b58      	ldr	r3, [pc, #352]	; (1398 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1236:	4798      	blx	r3
    1238:	e57b      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    123a:	2300      	movs	r3, #0
    123c:	461a      	mov	r2, r3
    123e:	4619      	mov	r1, r3
    1240:	4856      	ldr	r0, [pc, #344]	; (139c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    1242:	6800      	ldr	r0, [r0, #0]
    1244:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1246:	2201      	movs	r2, #1
    1248:	4b55      	ldr	r3, [pc, #340]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    124a:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    124c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1250:	4b51      	ldr	r3, [pc, #324]	; (1398 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    1252:	4798      	blx	r3
    1254:	e56d      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1256:	4853      	ldr	r0, [pc, #332]	; (13a4 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1258:	4b4e      	ldr	r3, [pc, #312]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    125a:	4798      	blx	r3
    125c:	e569      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        DEBUG_PRINT("Connection Timers configured");
    125e:	485e      	ldr	r0, [pc, #376]	; (13d8 <MdmCnct_ConnectInProgressSubStateMachine+0x7d8>)
    1260:	4d4c      	ldr	r5, [pc, #304]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1262:	47a8      	blx	r5
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1264:	4c4e      	ldr	r4, [pc, #312]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1266:	8961      	ldrh	r1, [r4, #10]
    1268:	68e0      	ldr	r0, [r4, #12]
    126a:	4b50      	ldr	r3, [pc, #320]	; (13ac <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    126c:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    126e:	4850      	ldr	r0, [pc, #320]	; (13b0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1270:	47a8      	blx	r5
                        gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_SERVER_ADDRESS;
    1272:	2306      	movs	r3, #6
    1274:	7063      	strb	r3, [r4, #1]
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1276:	2300      	movs	r3, #0
    1278:	70a3      	strb	r3, [r4, #2]
                        vPortFree(ConnectionResponse.response);
    127a:	68e0      	ldr	r0, [r4, #12]
    127c:	4b4d      	ldr	r3, [pc, #308]	; (13b4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    127e:	4798      	blx	r3
    1280:	e557      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1282:	4b47      	ldr	r3, [pc, #284]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1284:	789b      	ldrb	r3, [r3, #2]
    1286:	b1d3      	cbz	r3, 12be <MdmCnct_ConnectInProgressSubStateMachine+0x6be>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1288:	2b01      	cmp	r3, #1
    128a:	f47f ad52 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    128e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1292:	4949      	ldr	r1, [pc, #292]	; (13b8 <MdmCnct_ConnectInProgressSubStateMachine+0x7b8>)
    1294:	4b49      	ldr	r3, [pc, #292]	; (13bc <MdmCnct_ConnectInProgressSubStateMachine+0x7bc>)
    1296:	6818      	ldr	r0, [r3, #0]
    1298:	4b49      	ldr	r3, [pc, #292]	; (13c0 <MdmCnct_ConnectInProgressSubStateMachine+0x7c0>)
    129a:	4798      	blx	r3
    129c:	2801      	cmp	r0, #1
    129e:	f47f ad48 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_CFG)
    12a2:	4b3f      	ldr	r3, [pc, #252]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    12a4:	7a1b      	ldrb	r3, [r3, #8]
    12a6:	2b09      	cmp	r3, #9
    12a8:	d045      	beq.n	1336 <MdmCnct_ConnectInProgressSubStateMachine+0x736>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    12aa:	4846      	ldr	r0, [pc, #280]	; (13c4 <MdmCnct_ConnectInProgressSubStateMachine+0x7c4>)
    12ac:	4b39      	ldr	r3, [pc, #228]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    12ae:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    12b0:	4b3b      	ldr	r3, [pc, #236]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    12b2:	2200      	movs	r2, #0
    12b4:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    12b6:	68d8      	ldr	r0, [r3, #12]
    12b8:	4b3e      	ldr	r3, [pc, #248]	; (13b4 <MdmCnct_ConnectInProgressSubStateMachine+0x7b4>)
    12ba:	4798      	blx	r3
    12bc:	e539      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    12be:	4b32      	ldr	r3, [pc, #200]	; (1388 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    12c0:	6818      	ldr	r0, [r3, #0]
    12c2:	4b41      	ldr	r3, [pc, #260]	; (13c8 <MdmCnct_ConnectInProgressSubStateMachine+0x7c8>)
    12c4:	4798      	blx	r3
    12c6:	2800      	cmp	r0, #0
    12c8:	d131      	bne.n	132e <MdmCnct_ConnectInProgressSubStateMachine+0x72e>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    12ca:	2100      	movs	r1, #0
    12cc:	4b33      	ldr	r3, [pc, #204]	; (139c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    12ce:	6818      	ldr	r0, [r3, #0]
    12d0:	4b3e      	ldr	r3, [pc, #248]	; (13cc <MdmCnct_ConnectInProgressSubStateMachine+0x7cc>)
    12d2:	4798      	blx	r3
    12d4:	2801      	cmp	r0, #1
    12d6:	d003      	beq.n	12e0 <MdmCnct_ConnectInProgressSubStateMachine+0x6e0>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    12d8:	483d      	ldr	r0, [pc, #244]	; (13d0 <MdmCnct_ConnectInProgressSubStateMachine+0x7d0>)
    12da:	4b2e      	ldr	r3, [pc, #184]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    12dc:	4798      	blx	r3
    12de:	e528      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    12e0:	2301      	movs	r3, #1
    12e2:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_CFG;
    12e6:	2309      	movs	r3, #9
    12e8:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    12ec:	2300      	movs	r3, #0
    12ee:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    12f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    12f4:	4669      	mov	r1, sp
    12f6:	4824      	ldr	r0, [pc, #144]	; (1388 <MdmCnct_ConnectInProgressSubStateMachine+0x788>)
    12f8:	6800      	ldr	r0, [r0, #0]
    12fa:	4c24      	ldr	r4, [pc, #144]	; (138c <MdmCnct_ConnectInProgressSubStateMachine+0x78c>)
    12fc:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    12fe:	2801      	cmp	r0, #1
    1300:	d007      	beq.n	1312 <MdmCnct_ConnectInProgressSubStateMachine+0x712>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    1302:	4834      	ldr	r0, [pc, #208]	; (13d4 <MdmCnct_ConnectInProgressSubStateMachine+0x7d4>)
    1304:	4b23      	ldr	r3, [pc, #140]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1306:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1308:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    130c:	4b22      	ldr	r3, [pc, #136]	; (1398 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    130e:	4798      	blx	r3
    1310:	e50f      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1312:	2300      	movs	r3, #0
    1314:	461a      	mov	r2, r3
    1316:	4619      	mov	r1, r3
    1318:	4820      	ldr	r0, [pc, #128]	; (139c <MdmCnct_ConnectInProgressSubStateMachine+0x79c>)
    131a:	6800      	ldr	r0, [r0, #0]
    131c:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    131e:	2201      	movs	r2, #1
    1320:	4b1f      	ldr	r3, [pc, #124]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1322:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    1324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1328:	4b1b      	ldr	r3, [pc, #108]	; (1398 <MdmCnct_ConnectInProgressSubStateMachine+0x798>)
    132a:	4798      	blx	r3
    132c:	e501      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    132e:	481d      	ldr	r0, [pc, #116]	; (13a4 <MdmCnct_ConnectInProgressSubStateMachine+0x7a4>)
    1330:	4b18      	ldr	r3, [pc, #96]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1332:	4798      	blx	r3
    1334:	e4fd      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        MdmCnct_ExtractSessionIdFromConfigResponse(ConnectionResponse.response);
    1336:	4c1a      	ldr	r4, [pc, #104]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1338:	68e0      	ldr	r0, [r4, #12]
    currentSessionId = cfgResponse[SESSION_ID_POSITION];
    133a:	7ac3      	ldrb	r3, [r0, #11]
    133c:	7423      	strb	r3, [r4, #16]
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    133e:	8961      	ldrh	r1, [r4, #10]
    1340:	4b1a      	ldr	r3, [pc, #104]	; (13ac <MdmCnct_ConnectInProgressSubStateMachine+0x7ac>)
    1342:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    1344:	481a      	ldr	r0, [pc, #104]	; (13b0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1346:	4b13      	ldr	r3, [pc, #76]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1348:	4798      	blx	r3
    connectionStatus = cfgResponse[CONNECT_STATUS_POSITION];
    134a:	68e3      	ldr	r3, [r4, #12]
    switch(connectionStatus)
    134c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
    1350:	3b30      	subs	r3, #48	; 0x30
    1352:	2b06      	cmp	r3, #6
    1354:	d808      	bhi.n	1368 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
    1356:	e8df f003 	tbb	[pc, r3]
    135a:	4704      	.short	0x4704
    135c:	64605c58 	.word	0x64605c58
    1360:	68          	.byte	0x68
    1361:	00          	.byte	0x00
            DEBUG_PRINT("Connection Status : DISCONNECTED DUE TO NETWORK");
    1362:	481e      	ldr	r0, [pc, #120]	; (13dc <MdmCnct_ConnectInProgressSubStateMachine+0x7dc>)
    1364:	4b0b      	ldr	r3, [pc, #44]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    1366:	4798      	blx	r3
                            DEBUG_PRINT("Error : Connection Failure");
    1368:	481d      	ldr	r0, [pc, #116]	; (13e0 <MdmCnct_ConnectInProgressSubStateMachine+0x7e0>)
    136a:	4c0a      	ldr	r4, [pc, #40]	; (1394 <MdmCnct_ConnectInProgressSubStateMachine+0x794>)
    136c:	47a0      	blx	r4
                            DEBUG_PRINT("Restarting the connection initialization...");
    136e:	481d      	ldr	r0, [pc, #116]	; (13e4 <MdmCnct_ConnectInProgressSubStateMachine+0x7e4>)
    1370:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1372:	480f      	ldr	r0, [pc, #60]	; (13b0 <MdmCnct_ConnectInProgressSubStateMachine+0x7b0>)
    1374:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1376:	4b0a      	ldr	r3, [pc, #40]	; (13a0 <MdmCnct_ConnectInProgressSubStateMachine+0x7a0>)
    1378:	2200      	movs	r2, #0
    137a:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    137c:	2207      	movs	r2, #7
    137e:	70da      	strb	r2, [r3, #3]
                            gHttpConnectionState =  MDM_HTTP_CONNECTED;
    1380:	2202      	movs	r2, #2
    1382:	701a      	strb	r2, [r3, #0]
    1384:	e03c      	b.n	1400 <MdmCnct_ConnectInProgressSubStateMachine+0x800>
    1386:	bf00      	nop
    1388:	200034a0 	.word	0x200034a0
    138c:	00005891 	.word	0x00005891
    1390:	0000852c 	.word	0x0000852c
    1394:	000026fd 	.word	0x000026fd
    1398:	00006521 	.word	0x00006521
    139c:	200034b0 	.word	0x200034b0
    13a0:	2000020c 	.word	0x2000020c
    13a4:	00008394 	.word	0x00008394
    13a8:	00008558 	.word	0x00008558
    13ac:	000026b9 	.word	0x000026b9
    13b0:	00008cd8 	.word	0x00008cd8
    13b4:	00005569 	.word	0x00005569
    13b8:	20000214 	.word	0x20000214
    13bc:	20003480 	.word	0x20003480
    13c0:	00005ba1 	.word	0x00005ba1
    13c4:	000083f4 	.word	0x000083f4
    13c8:	00005f09 	.word	0x00005f09
    13cc:	00005d29 	.word	0x00005d29
    13d0:	00008368 	.word	0x00008368
    13d4:	00008570 	.word	0x00008570
    13d8:	000085a0 	.word	0x000085a0
    13dc:	000085c0 	.word	0x000085c0
    13e0:	00008724 	.word	0x00008724
    13e4:	00008740 	.word	0x00008740
            DEBUG_PRINT("Connection Status : CONNECTED");
    13e8:	4855      	ldr	r0, [pc, #340]	; (1540 <MdmCnct_ConnectInProgressSubStateMachine+0x940>)
    13ea:	4c56      	ldr	r4, [pc, #344]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    13ec:	47a0      	blx	r4
                            DEBUG_PRINT("Connection successful...Cloud Server configured");
    13ee:	4856      	ldr	r0, [pc, #344]	; (1548 <MdmCnct_ConnectInProgressSubStateMachine+0x948>)
    13f0:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    13f2:	4856      	ldr	r0, [pc, #344]	; (154c <MdmCnct_ConnectInProgressSubStateMachine+0x94c>)
    13f4:	47a0      	blx	r4
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_SET_HTTP_HEADER;
    13f6:	4b56      	ldr	r3, [pc, #344]	; (1550 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    13f8:	2207      	movs	r2, #7
    13fa:	705a      	strb	r2, [r3, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    13fc:	2200      	movs	r2, #0
    13fe:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1400:	4b53      	ldr	r3, [pc, #332]	; (1550 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1402:	68d8      	ldr	r0, [r3, #12]
    1404:	4b53      	ldr	r3, [pc, #332]	; (1554 <MdmCnct_ConnectInProgressSubStateMachine+0x954>)
    1406:	4798      	blx	r3
    1408:	e493      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
            DEBUG_PRINT("Connection Status : FAILED TO CONNECT");
    140a:	4853      	ldr	r0, [pc, #332]	; (1558 <MdmCnct_ConnectInProgressSubStateMachine+0x958>)
    140c:	4b4d      	ldr	r3, [pc, #308]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    140e:	4798      	blx	r3
    1410:	e7aa      	b.n	1368 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : CONNECTION CLOSED");
    1412:	4852      	ldr	r0, [pc, #328]	; (155c <MdmCnct_ConnectInProgressSubStateMachine+0x95c>)
    1414:	4b4b      	ldr	r3, [pc, #300]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1416:	4798      	blx	r3
    1418:	e7a6      	b.n	1368 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : CONNECTION IN PROGRESS");
    141a:	4851      	ldr	r0, [pc, #324]	; (1560 <MdmCnct_ConnectInProgressSubStateMachine+0x960>)
    141c:	4b49      	ldr	r3, [pc, #292]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    141e:	4798      	blx	r3
    1420:	e7a2      	b.n	1368 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : IDLE TIMER STARTED FOR DISCONNECTION");
    1422:	4850      	ldr	r0, [pc, #320]	; (1564 <MdmCnct_ConnectInProgressSubStateMachine+0x964>)
    1424:	4b47      	ldr	r3, [pc, #284]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1426:	4798      	blx	r3
    1428:	e79e      	b.n	1368 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            DEBUG_PRINT("Connection Status : IDLE TIMER CANCELLED");
    142a:	484f      	ldr	r0, [pc, #316]	; (1568 <MdmCnct_ConnectInProgressSubStateMachine+0x968>)
    142c:	4b45      	ldr	r3, [pc, #276]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    142e:	4798      	blx	r3
    1430:	e79a      	b.n	1368 <MdmCnct_ConnectInProgressSubStateMachine+0x768>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1432:	4b47      	ldr	r3, [pc, #284]	; (1550 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1434:	789b      	ldrb	r3, [r3, #2]
    1436:	b1d3      	cbz	r3, 146e <MdmCnct_ConnectInProgressSubStateMachine+0x86e>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    1438:	2b01      	cmp	r3, #1
    143a:	f47f ac7a 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    143e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1442:	494a      	ldr	r1, [pc, #296]	; (156c <MdmCnct_ConnectInProgressSubStateMachine+0x96c>)
    1444:	4b4a      	ldr	r3, [pc, #296]	; (1570 <MdmCnct_ConnectInProgressSubStateMachine+0x970>)
    1446:	6818      	ldr	r0, [r3, #0]
    1448:	4b4a      	ldr	r3, [pc, #296]	; (1574 <MdmCnct_ConnectInProgressSubStateMachine+0x974>)
    144a:	4798      	blx	r3
    144c:	2801      	cmp	r0, #1
    144e:	f47f ac70 	bne.w	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    if(ConnectionResponse.atCmd == CMD_AT_KHTTP_HEADER)
    1452:	4b3f      	ldr	r3, [pc, #252]	; (1550 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1454:	7a1b      	ldrb	r3, [r3, #8]
    1456:	2b17      	cmp	r3, #23
    1458:	d048      	beq.n	14ec <MdmCnct_ConnectInProgressSubStateMachine+0x8ec>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    145a:	4847      	ldr	r0, [pc, #284]	; (1578 <MdmCnct_ConnectInProgressSubStateMachine+0x978>)
    145c:	4b39      	ldr	r3, [pc, #228]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    145e:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1460:	4b3b      	ldr	r3, [pc, #236]	; (1550 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1462:	2200      	movs	r2, #0
    1464:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1466:	68d8      	ldr	r0, [r3, #12]
    1468:	4b3a      	ldr	r3, [pc, #232]	; (1554 <MdmCnct_ConnectInProgressSubStateMachine+0x954>)
    146a:	4798      	blx	r3
}
    146c:	e461      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                buildHttpHeaderWithActiveSessionID(&currentSessionId);
    146e:	4843      	ldr	r0, [pc, #268]	; (157c <MdmCnct_ConnectInProgressSubStateMachine+0x97c>)
    1470:	4b43      	ldr	r3, [pc, #268]	; (1580 <MdmCnct_ConnectInProgressSubStateMachine+0x980>)
    1472:	4798      	blx	r3
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1474:	4b43      	ldr	r3, [pc, #268]	; (1584 <MdmCnct_ConnectInProgressSubStateMachine+0x984>)
    1476:	6818      	ldr	r0, [r3, #0]
    1478:	4b43      	ldr	r3, [pc, #268]	; (1588 <MdmCnct_ConnectInProgressSubStateMachine+0x988>)
    147a:	4798      	blx	r3
    147c:	2800      	cmp	r0, #0
    147e:	d131      	bne.n	14e4 <MdmCnct_ConnectInProgressSubStateMachine+0x8e4>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1480:	2100      	movs	r1, #0
    1482:	4b42      	ldr	r3, [pc, #264]	; (158c <MdmCnct_ConnectInProgressSubStateMachine+0x98c>)
    1484:	6818      	ldr	r0, [r3, #0]
    1486:	4b42      	ldr	r3, [pc, #264]	; (1590 <MdmCnct_ConnectInProgressSubStateMachine+0x990>)
    1488:	4798      	blx	r3
    148a:	2801      	cmp	r0, #1
    148c:	d003      	beq.n	1496 <MdmCnct_ConnectInProgressSubStateMachine+0x896>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    148e:	4841      	ldr	r0, [pc, #260]	; (1594 <MdmCnct_ConnectInProgressSubStateMachine+0x994>)
    1490:	4b2c      	ldr	r3, [pc, #176]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1492:	4798      	blx	r3
    1494:	e44d      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1496:	2301      	movs	r3, #1
    1498:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KHTTP_HEADER;
    149c:	2317      	movs	r3, #23
    149e:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    14a2:	2300      	movs	r3, #0
    14a4:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    14a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    14aa:	4669      	mov	r1, sp
    14ac:	4835      	ldr	r0, [pc, #212]	; (1584 <MdmCnct_ConnectInProgressSubStateMachine+0x984>)
    14ae:	6800      	ldr	r0, [r0, #0]
    14b0:	4c39      	ldr	r4, [pc, #228]	; (1598 <MdmCnct_ConnectInProgressSubStateMachine+0x998>)
    14b2:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    14b4:	2801      	cmp	r0, #1
    14b6:	d007      	beq.n	14c8 <MdmCnct_ConnectInProgressSubStateMachine+0x8c8>
                            DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    14b8:	4838      	ldr	r0, [pc, #224]	; (159c <MdmCnct_ConnectInProgressSubStateMachine+0x99c>)
    14ba:	4b22      	ldr	r3, [pc, #136]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    14bc:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    14be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    14c2:	4b37      	ldr	r3, [pc, #220]	; (15a0 <MdmCnct_ConnectInProgressSubStateMachine+0x9a0>)
    14c4:	4798      	blx	r3
    14c6:	e434      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    14c8:	2300      	movs	r3, #0
    14ca:	461a      	mov	r2, r3
    14cc:	4619      	mov	r1, r3
    14ce:	482f      	ldr	r0, [pc, #188]	; (158c <MdmCnct_ConnectInProgressSubStateMachine+0x98c>)
    14d0:	6800      	ldr	r0, [r0, #0]
    14d2:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    14d4:	2201      	movs	r2, #1
    14d6:	4b1e      	ldr	r3, [pc, #120]	; (1550 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    14d8:	709a      	strb	r2, [r3, #2]
                            vTaskDelay(TransmitDelayMs);
    14da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    14de:	4b30      	ldr	r3, [pc, #192]	; (15a0 <MdmCnct_ConnectInProgressSubStateMachine+0x9a0>)
    14e0:	4798      	blx	r3
    14e2:	e426      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                    DEBUG_PRINT("Transmit Queue is not empty");
    14e4:	482f      	ldr	r0, [pc, #188]	; (15a4 <MdmCnct_ConnectInProgressSubStateMachine+0x9a4>)
    14e6:	4b17      	ldr	r3, [pc, #92]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    14e8:	4798      	blx	r3
    14ea:	e422      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
                        SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    14ec:	4c18      	ldr	r4, [pc, #96]	; (1550 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    14ee:	8961      	ldrh	r1, [r4, #10]
    14f0:	68e0      	ldr	r0, [r4, #12]
    14f2:	4b2d      	ldr	r3, [pc, #180]	; (15a8 <MdmCnct_ConnectInProgressSubStateMachine+0x9a8>)
    14f4:	4798      	blx	r3
                        DEBUG_PRINT("\r\n");
    14f6:	4815      	ldr	r0, [pc, #84]	; (154c <MdmCnct_ConnectInProgressSubStateMachine+0x94c>)
    14f8:	4b12      	ldr	r3, [pc, #72]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    14fa:	4798      	blx	r3
    if(0==memcmp(response,"CONNECT",7))
    14fc:	2207      	movs	r2, #7
    14fe:	492b      	ldr	r1, [pc, #172]	; (15ac <MdmCnct_ConnectInProgressSubStateMachine+0x9ac>)
    1500:	68e0      	ldr	r0, [r4, #12]
    1502:	4b2b      	ldr	r3, [pc, #172]	; (15b0 <MdmCnct_ConnectInProgressSubStateMachine+0x9b0>)
    1504:	4798      	blx	r3
    1506:	b138      	cbz	r0, 1518 <MdmCnct_ConnectInProgressSubStateMachine+0x918>
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1508:	2200      	movs	r2, #0
    150a:	4b11      	ldr	r3, [pc, #68]	; (1550 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    150c:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    150e:	4b10      	ldr	r3, [pc, #64]	; (1550 <MdmCnct_ConnectInProgressSubStateMachine+0x950>)
    1510:	68d8      	ldr	r0, [r3, #12]
    1512:	4b10      	ldr	r3, [pc, #64]	; (1554 <MdmCnct_ConnectInProgressSubStateMachine+0x954>)
    1514:	4798      	blx	r3
    1516:	e40c      	b.n	d32 <MdmCnct_ConnectInProgressSubStateMachine+0x132>
        mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
    1518:	2110      	movs	r1, #16
    151a:	4826      	ldr	r0, [pc, #152]	; (15b4 <MdmCnct_ConnectInProgressSubStateMachine+0x9b4>)
    151c:	4b26      	ldr	r3, [pc, #152]	; (15b8 <MdmCnct_ConnectInProgressSubStateMachine+0x9b8>)
    151e:	4798      	blx	r3
        mdmCtrlr_FlushRxBuffer();
    1520:	4b26      	ldr	r3, [pc, #152]	; (15bc <MdmCnct_ConnectInProgressSubStateMachine+0x9bc>)
    1522:	4798      	blx	r3
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    1524:	2200      	movs	r2, #0
    1526:	7062      	strb	r2, [r4, #1]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1528:	70a2      	strb	r2, [r4, #2]
                            gHttpConnectionState = MDM_HTTP_CONNECTED;
    152a:	2102      	movs	r1, #2
    152c:	7021      	strb	r1, [r4, #0]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    152e:	70e2      	strb	r2, [r4, #3]
                            DEBUG_PRINT("\r\n");
    1530:	4806      	ldr	r0, [pc, #24]	; (154c <MdmCnct_ConnectInProgressSubStateMachine+0x94c>)
    1532:	4b04      	ldr	r3, [pc, #16]	; (1544 <MdmCnct_ConnectInProgressSubStateMachine+0x944>)
    1534:	4798      	blx	r3
                            vTaskDelay(PacketTransmitDelayMs);
    1536:	2064      	movs	r0, #100	; 0x64
    1538:	4b19      	ldr	r3, [pc, #100]	; (15a0 <MdmCnct_ConnectInProgressSubStateMachine+0x9a0>)
    153a:	4798      	blx	r3
    153c:	e7e7      	b.n	150e <MdmCnct_ConnectInProgressSubStateMachine+0x90e>
    153e:	bf00      	nop
    1540:	000085f0 	.word	0x000085f0
    1544:	000026fd 	.word	0x000026fd
    1548:	00008610 	.word	0x00008610
    154c:	00008cd8 	.word	0x00008cd8
    1550:	2000020c 	.word	0x2000020c
    1554:	00005569 	.word	0x00005569
    1558:	00008640 	.word	0x00008640
    155c:	00008668 	.word	0x00008668
    1560:	00008690 	.word	0x00008690
    1564:	000086bc 	.word	0x000086bc
    1568:	000086f8 	.word	0x000086f8
    156c:	20000214 	.word	0x20000214
    1570:	20003480 	.word	0x20003480
    1574:	00005ba1 	.word	0x00005ba1
    1578:	000083f4 	.word	0x000083f4
    157c:	2000021c 	.word	0x2000021c
    1580:	0000096d 	.word	0x0000096d
    1584:	200034a0 	.word	0x200034a0
    1588:	00005f09 	.word	0x00005f09
    158c:	200034b0 	.word	0x200034b0
    1590:	00005d29 	.word	0x00005d29
    1594:	00008368 	.word	0x00008368
    1598:	00005891 	.word	0x00005891
    159c:	00008570 	.word	0x00008570
    15a0:	00006521 	.word	0x00006521
    15a4:	00008394 	.word	0x00008394
    15a8:	000026b9 	.word	0x000026b9
    15ac:	0000876c 	.word	0x0000876c
    15b0:	0000705d 	.word	0x0000705d
    15b4:	000081a4 	.word	0x000081a4
    15b8:	00001e09 	.word	0x00001e09
    15bc:	00001e85 	.word	0x00001e85

000015c0 <MdmConnect_HttpConnectionSchedule>:
{
    15c0:	b530      	push	{r4, r5, lr}
    15c2:	b083      	sub	sp, #12
    switch (gHttpConnectionState)
    15c4:	4b93      	ldr	r3, [pc, #588]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    15c6:	781b      	ldrb	r3, [r3, #0]
    15c8:	2b01      	cmp	r3, #1
    15ca:	d012      	beq.n	15f2 <MdmConnect_HttpConnectionSchedule+0x32>
    15cc:	b11b      	cbz	r3, 15d6 <MdmConnect_HttpConnectionSchedule+0x16>
    15ce:	2b02      	cmp	r3, #2
    15d0:	d012      	beq.n	15f8 <MdmConnect_HttpConnectionSchedule+0x38>
}
    15d2:	b003      	add	sp, #12
    15d4:	bd30      	pop	{r4, r5, pc}
            if(isModemDiagDataBaseUpdated() != false)
    15d6:	4b90      	ldr	r3, [pc, #576]	; (1818 <MdmConnect_HttpConnectionSchedule+0x258>)
    15d8:	4798      	blx	r3
    15da:	2800      	cmp	r0, #0
    15dc:	d0f9      	beq.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectionState = MDM_HTTP_CONNECTION_IN_PROGRESS;
    15de:	4b8d      	ldr	r3, [pc, #564]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    15e0:	2201      	movs	r2, #1
    15e2:	701a      	strb	r2, [r3, #0]
                gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    15e4:	2200      	movs	r2, #0
    15e6:	705a      	strb	r2, [r3, #1]
                gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    15e8:	709a      	strb	r2, [r3, #2]
                DEBUG_PRINT("Closing Active Connections");
    15ea:	488c      	ldr	r0, [pc, #560]	; (181c <MdmConnect_HttpConnectionSchedule+0x25c>)
    15ec:	4b8c      	ldr	r3, [pc, #560]	; (1820 <MdmConnect_HttpConnectionSchedule+0x260>)
    15ee:	4798      	blx	r3
    15f0:	e7ef      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            MdmCnct_ConnectInProgressSubStateMachine();
    15f2:	4b8c      	ldr	r3, [pc, #560]	; (1824 <MdmConnect_HttpConnectionSchedule+0x264>)
    15f4:	4798      	blx	r3
        break;
    15f6:	e7ec      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gHttpConnectedSubState)
    15f8:	4b86      	ldr	r3, [pc, #536]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    15fa:	78db      	ldrb	r3, [r3, #3]
    15fc:	2b08      	cmp	r3, #8
    15fe:	d8e8      	bhi.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
    1600:	e8df f013 	tbh	[pc, r3, lsl #1]
    1604:	000f0009 	.word	0x000f0009
    1608:	00220017 	.word	0x00220017
    160c:	002c0026 	.word	0x002c0026
    1610:	00b30068 	.word	0x00b30068
    1614:	00c1      	.short	0x00c1
            mdmCtrlr_FlushRxBuffer();
    1616:	4b84      	ldr	r3, [pc, #528]	; (1828 <MdmConnect_HttpConnectionSchedule+0x268>)
    1618:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_IDLE_MONITOR_CONNECTION;
    161a:	2201      	movs	r2, #1
    161c:	4b7d      	ldr	r3, [pc, #500]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    161e:	70da      	strb	r2, [r3, #3]
    1620:	e7d7      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            if(false != isPacketTransmitTimerExpired())
    1622:	4b82      	ldr	r3, [pc, #520]	; (182c <MdmConnect_HttpConnectionSchedule+0x26c>)
    1624:	4798      	blx	r3
    1626:	2800      	cmp	r0, #0
    1628:	d0d3      	beq.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            	gHttpConnectedSubState = CONNECTED_PERIODIC_6SEC_TIMER_EXPIRED;
    162a:	2202      	movs	r2, #2
    162c:	4b79      	ldr	r3, [pc, #484]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    162e:	70da      	strb	r2, [r3, #3]
    1630:	e7cf      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
        	xSemaphoreGive(SensorScanSemaphore);
    1632:	2300      	movs	r3, #0
    1634:	461a      	mov	r2, r3
    1636:	4619      	mov	r1, r3
    1638:	487d      	ldr	r0, [pc, #500]	; (1830 <MdmConnect_HttpConnectionSchedule+0x270>)
    163a:	6800      	ldr	r0, [r0, #0]
    163c:	4c7d      	ldr	r4, [pc, #500]	; (1834 <MdmConnect_HttpConnectionSchedule+0x274>)
    163e:	47a0      	blx	r4
        	gHttpConnectedSubState = CONNECTED_WAIT_FOR_DATA_FROM_SENSOR_TASK;
    1640:	2203      	movs	r2, #3
    1642:	4b74      	ldr	r3, [pc, #464]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    1644:	70da      	strb	r2, [r3, #3]
    1646:	e7c4      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
			gHttpConnectedSubState = CONNECTED_BUILD_DATA_PACKET_TO_SERVER;
    1648:	2204      	movs	r2, #4
    164a:	4b72      	ldr	r3, [pc, #456]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    164c:	70da      	strb	r2, [r3, #3]
    164e:	e7c0      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            buildDataPacketsToServer();
    1650:	4b79      	ldr	r3, [pc, #484]	; (1838 <MdmConnect_HttpConnectionSchedule+0x278>)
    1652:	4798      	blx	r3
            gHttpConnectedSubState = CONNECTED_SEND_DATA_PACKETS_TO_SERVER;
    1654:	2205      	movs	r2, #5
    1656:	4b6f      	ldr	r3, [pc, #444]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    1658:	70da      	strb	r2, [r3, #3]
    165a:	e7ba      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    165c:	4b77      	ldr	r3, [pc, #476]	; (183c <MdmConnect_HttpConnectionSchedule+0x27c>)
    165e:	6818      	ldr	r0, [r3, #0]
    1660:	4b77      	ldr	r3, [pc, #476]	; (1840 <MdmConnect_HttpConnectionSchedule+0x280>)
    1662:	4798      	blx	r3
    1664:	2800      	cmp	r0, #0
    1666:	d131      	bne.n	16cc <MdmConnect_HttpConnectionSchedule+0x10c>
                if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1668:	2100      	movs	r1, #0
    166a:	4b76      	ldr	r3, [pc, #472]	; (1844 <MdmConnect_HttpConnectionSchedule+0x284>)
    166c:	6818      	ldr	r0, [r3, #0]
    166e:	4b76      	ldr	r3, [pc, #472]	; (1848 <MdmConnect_HttpConnectionSchedule+0x288>)
    1670:	4798      	blx	r3
    1672:	2801      	cmp	r0, #1
    1674:	d003      	beq.n	167e <MdmConnect_HttpConnectionSchedule+0xbe>
                    DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1676:	4875      	ldr	r0, [pc, #468]	; (184c <MdmConnect_HttpConnectionSchedule+0x28c>)
    1678:	4b69      	ldr	r3, [pc, #420]	; (1820 <MdmConnect_HttpConnectionSchedule+0x260>)
    167a:	4798      	blx	r3
    167c:	e7a9      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    167e:	2301      	movs	r3, #1
    1680:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KHTTP_GET;
    1684:	2318      	movs	r3, #24
    1686:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    168a:	2300      	movs	r3, #0
    168c:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    168e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1692:	4669      	mov	r1, sp
    1694:	4869      	ldr	r0, [pc, #420]	; (183c <MdmConnect_HttpConnectionSchedule+0x27c>)
    1696:	6800      	ldr	r0, [r0, #0]
    1698:	4c66      	ldr	r4, [pc, #408]	; (1834 <MdmConnect_HttpConnectionSchedule+0x274>)
    169a:	47a0      	blx	r4
                    if(TxQueuePushStatus == pdPASS)
    169c:	2801      	cmp	r0, #1
    169e:	d007      	beq.n	16b0 <MdmConnect_HttpConnectionSchedule+0xf0>
                        DEBUG_PRINT("Failed to sent connection timer cmd to Tx Task");
    16a0:	486b      	ldr	r0, [pc, #428]	; (1850 <MdmConnect_HttpConnectionSchedule+0x290>)
    16a2:	4b5f      	ldr	r3, [pc, #380]	; (1820 <MdmConnect_HttpConnectionSchedule+0x260>)
    16a4:	4798      	blx	r3
                        vTaskDelay(TransmitDelayMs);
    16a6:	f640 10c4 	movw	r0, #2500	; 0x9c4
    16aa:	4b6a      	ldr	r3, [pc, #424]	; (1854 <MdmConnect_HttpConnectionSchedule+0x294>)
    16ac:	4798      	blx	r3
    16ae:	e790      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    16b0:	2300      	movs	r3, #0
    16b2:	461a      	mov	r2, r3
    16b4:	4619      	mov	r1, r3
    16b6:	4863      	ldr	r0, [pc, #396]	; (1844 <MdmConnect_HttpConnectionSchedule+0x284>)
    16b8:	6800      	ldr	r0, [r0, #0]
    16ba:	47a0      	blx	r4
                        gHttpConnectedSubState = CONNECTED_RECEIVE_RESPONSE_FROM_SERVER;
    16bc:	2206      	movs	r2, #6
    16be:	4b55      	ldr	r3, [pc, #340]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    16c0:	70da      	strb	r2, [r3, #3]
                        vTaskDelay(TransmitDelayMs);
    16c2:	f640 10c4 	movw	r0, #2500	; 0x9c4
    16c6:	4b63      	ldr	r3, [pc, #396]	; (1854 <MdmConnect_HttpConnectionSchedule+0x294>)
    16c8:	4798      	blx	r3
    16ca:	e782      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                DEBUG_PRINT("Transmit Queue is not empty");
    16cc:	4862      	ldr	r0, [pc, #392]	; (1858 <MdmConnect_HttpConnectionSchedule+0x298>)
    16ce:	4b54      	ldr	r3, [pc, #336]	; (1820 <MdmConnect_HttpConnectionSchedule+0x260>)
    16d0:	4798      	blx	r3
    16d2:	e77e      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    16d4:	f241 3288 	movw	r2, #5000	; 0x1388
    16d8:	4960      	ldr	r1, [pc, #384]	; (185c <MdmConnect_HttpConnectionSchedule+0x29c>)
    16da:	4b61      	ldr	r3, [pc, #388]	; (1860 <MdmConnect_HttpConnectionSchedule+0x2a0>)
    16dc:	6818      	ldr	r0, [r3, #0]
    16de:	4b61      	ldr	r3, [pc, #388]	; (1864 <MdmConnect_HttpConnectionSchedule+0x2a4>)
    16e0:	4798      	blx	r3
    16e2:	2801      	cmp	r0, #1
    16e4:	d139      	bne.n	175a <MdmConnect_HttpConnectionSchedule+0x19a>
                if(ConnectionResponse.atCmd == CMD_AT_KHTTP_GET)
    16e6:	4b4b      	ldr	r3, [pc, #300]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    16e8:	7a1b      	ldrb	r3, [r3, #8]
    16ea:	2b18      	cmp	r3, #24
    16ec:	d127      	bne.n	173e <MdmConnect_HttpConnectionSchedule+0x17e>
                    if(ConnectionResponse.length > 23)
    16ee:	4b49      	ldr	r3, [pc, #292]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    16f0:	895c      	ldrh	r4, [r3, #10]
    16f2:	2c17      	cmp	r4, #23
    16f4:	d917      	bls.n	1726 <MdmConnect_HttpConnectionSchedule+0x166>
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    16f6:	68dd      	ldr	r5, [r3, #12]
    if(0==memcmp(response,"CONNECT\r\nHTTP/1.1 200 OK",24))
    16f8:	2218      	movs	r2, #24
    16fa:	495b      	ldr	r1, [pc, #364]	; (1868 <MdmConnect_HttpConnectionSchedule+0x2a8>)
    16fc:	4628      	mov	r0, r5
    16fe:	4b5b      	ldr	r3, [pc, #364]	; (186c <MdmConnect_HttpConnectionSchedule+0x2ac>)
    1700:	4798      	blx	r3
                        if(false != MdmCnct_validateServerResponse(ConnectionResponse.response))
    1702:	b118      	cbz	r0, 170c <MdmConnect_HttpConnectionSchedule+0x14c>
                            gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    1704:	2207      	movs	r2, #7
    1706:	4b43      	ldr	r3, [pc, #268]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    1708:	70da      	strb	r2, [r3, #3]
    170a:	e00f      	b.n	172c <MdmConnect_HttpConnectionSchedule+0x16c>
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    170c:	4621      	mov	r1, r4
    170e:	4628      	mov	r0, r5
    1710:	4b57      	ldr	r3, [pc, #348]	; (1870 <MdmConnect_HttpConnectionSchedule+0x2b0>)
    1712:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    1714:	4857      	ldr	r0, [pc, #348]	; (1874 <MdmConnect_HttpConnectionSchedule+0x2b4>)
    1716:	4b42      	ldr	r3, [pc, #264]	; (1820 <MdmConnect_HttpConnectionSchedule+0x260>)
    1718:	4798      	blx	r3
                            clearPacketTransmitTimerExpiryFlag();
    171a:	4b57      	ldr	r3, [pc, #348]	; (1878 <MdmConnect_HttpConnectionSchedule+0x2b8>)
    171c:	4798      	blx	r3
                            gHttpConnectedSubState = CONNECTED_IDLE_MONITOR_CONNECTION;
    171e:	2201      	movs	r2, #1
    1720:	4b3c      	ldr	r3, [pc, #240]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    1722:	70da      	strb	r2, [r3, #3]
    1724:	e002      	b.n	172c <MdmConnect_HttpConnectionSchedule+0x16c>
                        gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    1726:	2207      	movs	r2, #7
    1728:	4b3a      	ldr	r3, [pc, #232]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    172a:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    172c:	4b39      	ldr	r3, [pc, #228]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    172e:	68d8      	ldr	r0, [r3, #12]
    1730:	4b52      	ldr	r3, [pc, #328]	; (187c <MdmConnect_HttpConnectionSchedule+0x2bc>)
    1732:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    1734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1738:	4b46      	ldr	r3, [pc, #280]	; (1854 <MdmConnect_HttpConnectionSchedule+0x294>)
    173a:	4798      	blx	r3
    173c:	e749      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Failed to receive connection response in RX mode");
    173e:	4850      	ldr	r0, [pc, #320]	; (1880 <MdmConnect_HttpConnectionSchedule+0x2c0>)
    1740:	4b37      	ldr	r3, [pc, #220]	; (1820 <MdmConnect_HttpConnectionSchedule+0x260>)
    1742:	4798      	blx	r3
                    gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    1744:	4b33      	ldr	r3, [pc, #204]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    1746:	2207      	movs	r2, #7
    1748:	70da      	strb	r2, [r3, #3]
                    vPortFree(ConnectionResponse.response);
    174a:	68d8      	ldr	r0, [r3, #12]
    174c:	4b4b      	ldr	r3, [pc, #300]	; (187c <MdmConnect_HttpConnectionSchedule+0x2bc>)
    174e:	4798      	blx	r3
                    vTaskDelay(reTransmissionDelayMs);
    1750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1754:	4b3f      	ldr	r3, [pc, #252]	; (1854 <MdmConnect_HttpConnectionSchedule+0x294>)
    1756:	4798      	blx	r3
    1758:	e73b      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                gHttpConnectedSubState = CONNECTED_FAULT_IN_PACKET_TRANSMISSION;
    175a:	2207      	movs	r2, #7
    175c:	4b2d      	ldr	r3, [pc, #180]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    175e:	70da      	strb	r2, [r3, #3]
                vTaskDelay(reTransmissionDelayMs);
    1760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1764:	4b3b      	ldr	r3, [pc, #236]	; (1854 <MdmConnect_HttpConnectionSchedule+0x294>)
    1766:	4798      	blx	r3
    1768:	e733      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    176a:	4b2a      	ldr	r3, [pc, #168]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    176c:	2208      	movs	r2, #8
    176e:	70da      	strb	r2, [r3, #3]
            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    1770:	2200      	movs	r2, #0
    1772:	711a      	strb	r2, [r3, #4]
            sessionIdCount = 5;
    1774:	2105      	movs	r1, #5
    1776:	7159      	strb	r1, [r3, #5]
            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1778:	709a      	strb	r2, [r3, #2]
            DEBUG_PRINT("\r\nConnection interrupted...Performing the Error Recovery....\r\n");
    177a:	4842      	ldr	r0, [pc, #264]	; (1884 <MdmConnect_HttpConnectionSchedule+0x2c4>)
    177c:	4c28      	ldr	r4, [pc, #160]	; (1820 <MdmConnect_HttpConnectionSchedule+0x260>)
    177e:	47a0      	blx	r4
            DEBUG_PRINT("Closing the active connection");
    1780:	4841      	ldr	r0, [pc, #260]	; (1888 <MdmConnect_HttpConnectionSchedule+0x2c8>)
    1782:	47a0      	blx	r4
    1784:	e725      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
    switch(gErrorRecoveryState)
    1786:	4b23      	ldr	r3, [pc, #140]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    1788:	791b      	ldrb	r3, [r3, #4]
    178a:	2b01      	cmp	r3, #1
    178c:	f000 810a 	beq.w	19a4 <MdmConnect_HttpConnectionSchedule+0x3e4>
    1790:	b323      	cbz	r3, 17dc <MdmConnect_HttpConnectionSchedule+0x21c>
    1792:	2b02      	cmp	r3, #2
    1794:	f47f af1d 	bne.w	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    1798:	4b1e      	ldr	r3, [pc, #120]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    179a:	789b      	ldrb	r3, [r3, #2]
    179c:	2b00      	cmp	r3, #0
    179e:	f000 81d9 	beq.w	1b54 <MdmConnect_HttpConnectionSchedule+0x594>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    17a2:	2b01      	cmp	r3, #1
    17a4:	f47f af15 	bne.w	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    17a8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    17ac:	492b      	ldr	r1, [pc, #172]	; (185c <MdmConnect_HttpConnectionSchedule+0x29c>)
    17ae:	4b2c      	ldr	r3, [pc, #176]	; (1860 <MdmConnect_HttpConnectionSchedule+0x2a0>)
    17b0:	6818      	ldr	r0, [r3, #0]
    17b2:	4b2c      	ldr	r3, [pc, #176]	; (1864 <MdmConnect_HttpConnectionSchedule+0x2a4>)
    17b4:	4798      	blx	r3
    17b6:	2801      	cmp	r0, #1
    17b8:	f000 820a 	beq.w	1bd0 <MdmConnect_HttpConnectionSchedule+0x610>
                    if(forcedModemRebootCnt <= 3)
    17bc:	4b15      	ldr	r3, [pc, #84]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    17be:	7c5b      	ldrb	r3, [r3, #17]
    17c0:	2b03      	cmp	r3, #3
    17c2:	f240 8255 	bls.w	1c70 <MdmConnect_HttpConnectionSchedule+0x6b0>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    17c6:	4831      	ldr	r0, [pc, #196]	; (188c <MdmConnect_HttpConnectionSchedule+0x2cc>)
    17c8:	4c15      	ldr	r4, [pc, #84]	; (1820 <MdmConnect_HttpConnectionSchedule+0x260>)
    17ca:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    17cc:	4830      	ldr	r0, [pc, #192]	; (1890 <MdmConnect_HttpConnectionSchedule+0x2d0>)
    17ce:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    17d0:	2200      	movs	r2, #0
    17d2:	4b10      	ldr	r3, [pc, #64]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    17d4:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    17d6:	4b2f      	ldr	r3, [pc, #188]	; (1894 <MdmConnect_HttpConnectionSchedule+0x2d4>)
    17d8:	4798      	blx	r3
}
    17da:	e6fa      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    17dc:	4b0d      	ldr	r3, [pc, #52]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    17de:	789b      	ldrb	r3, [r3, #2]
    17e0:	2b00      	cmp	r3, #0
    17e2:	f040 8092 	bne.w	190a <MdmConnect_HttpConnectionSchedule+0x34a>
                if(sessionIdCount > 0)
    17e6:	4b0b      	ldr	r3, [pc, #44]	; (1814 <MdmConnect_HttpConnectionSchedule+0x254>)
    17e8:	795b      	ldrb	r3, [r3, #5]
    17ea:	2b00      	cmp	r3, #0
    17ec:	f000 8084 	beq.w	18f8 <MdmConnect_HttpConnectionSchedule+0x338>
                    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    17f0:	4b12      	ldr	r3, [pc, #72]	; (183c <MdmConnect_HttpConnectionSchedule+0x27c>)
    17f2:	6818      	ldr	r0, [r3, #0]
    17f4:	4b12      	ldr	r3, [pc, #72]	; (1840 <MdmConnect_HttpConnectionSchedule+0x280>)
    17f6:	4798      	blx	r3
    17f8:	2800      	cmp	r0, #0
    17fa:	d179      	bne.n	18f0 <MdmConnect_HttpConnectionSchedule+0x330>
                        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    17fc:	2100      	movs	r1, #0
    17fe:	4b11      	ldr	r3, [pc, #68]	; (1844 <MdmConnect_HttpConnectionSchedule+0x284>)
    1800:	6818      	ldr	r0, [r3, #0]
    1802:	4b11      	ldr	r3, [pc, #68]	; (1848 <MdmConnect_HttpConnectionSchedule+0x288>)
    1804:	4798      	blx	r3
    1806:	2801      	cmp	r0, #1
    1808:	d046      	beq.n	1898 <MdmConnect_HttpConnectionSchedule+0x2d8>
                            DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    180a:	4810      	ldr	r0, [pc, #64]	; (184c <MdmConnect_HttpConnectionSchedule+0x28c>)
    180c:	4b04      	ldr	r3, [pc, #16]	; (1820 <MdmConnect_HttpConnectionSchedule+0x260>)
    180e:	4798      	blx	r3
    1810:	e6df      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
    1812:	bf00      	nop
    1814:	2000020c 	.word	0x2000020c
    1818:	0000212d 	.word	0x0000212d
    181c:	00008774 	.word	0x00008774
    1820:	000026fd 	.word	0x000026fd
    1824:	00000c01 	.word	0x00000c01
    1828:	00001e85 	.word	0x00001e85
    182c:	0000242d 	.word	0x0000242d
    1830:	200034ac 	.word	0x200034ac
    1834:	00005891 	.word	0x00005891
    1838:	000009f5 	.word	0x000009f5
    183c:	200034a0 	.word	0x200034a0
    1840:	00005f09 	.word	0x00005f09
    1844:	200034b0 	.word	0x200034b0
    1848:	00005d29 	.word	0x00005d29
    184c:	00008368 	.word	0x00008368
    1850:	00008570 	.word	0x00008570
    1854:	00006521 	.word	0x00006521
    1858:	00008394 	.word	0x00008394
    185c:	20000214 	.word	0x20000214
    1860:	20003480 	.word	0x20003480
    1864:	00005ba1 	.word	0x00005ba1
    1868:	00008790 	.word	0x00008790
    186c:	0000705d 	.word	0x0000705d
    1870:	000026b9 	.word	0x000026b9
    1874:	00008cd8 	.word	0x00008cd8
    1878:	00002421 	.word	0x00002421
    187c:	00005569 	.word	0x00005569
    1880:	000083f4 	.word	0x000083f4
    1884:	000087ac 	.word	0x000087ac
    1888:	000087ec 	.word	0x000087ec
    188c:	0000886c 	.word	0x0000886c
    1890:	000088a0 	.word	0x000088a0
    1894:	00002a15 	.word	0x00002a15
                            TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1898:	2301      	movs	r3, #1
    189a:	f88d 3000 	strb.w	r3, [sp]
                            TxMsgQueueData.atCmd = getCloseActiveSessionCmd(sessionIdCount);
    189e:	4b8f      	ldr	r3, [pc, #572]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    18a0:	7958      	ldrb	r0, [r3, #5]
    18a2:	4b8f      	ldr	r3, [pc, #572]	; (1ae0 <MdmConnect_HttpConnectionSchedule+0x520>)
    18a4:	4798      	blx	r3
    18a6:	f88d 0001 	strb.w	r0, [sp, #1]
                            TxMsgQueueData.pData = NULL;
    18aa:	2300      	movs	r3, #0
    18ac:	9301      	str	r3, [sp, #4]
                            TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    18ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    18b2:	4669      	mov	r1, sp
    18b4:	488b      	ldr	r0, [pc, #556]	; (1ae4 <MdmConnect_HttpConnectionSchedule+0x524>)
    18b6:	6800      	ldr	r0, [r0, #0]
    18b8:	4c8b      	ldr	r4, [pc, #556]	; (1ae8 <MdmConnect_HttpConnectionSchedule+0x528>)
    18ba:	47a0      	blx	r4
                            if(TxQueuePushStatus == pdPASS)
    18bc:	2801      	cmp	r0, #1
    18be:	d007      	beq.n	18d0 <MdmConnect_HttpConnectionSchedule+0x310>
                                DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    18c0:	488a      	ldr	r0, [pc, #552]	; (1aec <MdmConnect_HttpConnectionSchedule+0x52c>)
    18c2:	4b8b      	ldr	r3, [pc, #556]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    18c4:	4798      	blx	r3
                                vTaskDelay(TransmitDelayMs);
    18c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    18ca:	4b8a      	ldr	r3, [pc, #552]	; (1af4 <MdmConnect_HttpConnectionSchedule+0x534>)
    18cc:	4798      	blx	r3
    18ce:	e680      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                                xSemaphoreGive(AtTxQueueLoadSemaphore);
    18d0:	2300      	movs	r3, #0
    18d2:	461a      	mov	r2, r3
    18d4:	4619      	mov	r1, r3
    18d6:	4888      	ldr	r0, [pc, #544]	; (1af8 <MdmConnect_HttpConnectionSchedule+0x538>)
    18d8:	6800      	ldr	r0, [r0, #0]
    18da:	47a0      	blx	r4
                                gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    18dc:	4b7f      	ldr	r3, [pc, #508]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    18de:	2201      	movs	r2, #1
    18e0:	709a      	strb	r2, [r3, #2]
                                gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    18e2:	2208      	movs	r2, #8
    18e4:	70da      	strb	r2, [r3, #3]
                                vTaskDelay(TransmitDelayMs);
    18e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    18ea:	4b82      	ldr	r3, [pc, #520]	; (1af4 <MdmConnect_HttpConnectionSchedule+0x534>)
    18ec:	4798      	blx	r3
    18ee:	e670      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Transmit Queue is not empty");
    18f0:	4882      	ldr	r0, [pc, #520]	; (1afc <MdmConnect_HttpConnectionSchedule+0x53c>)
    18f2:	4b7f      	ldr	r3, [pc, #508]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    18f4:	4798      	blx	r3
    18f6:	e66c      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("No More Active Connections to close");
    18f8:	4881      	ldr	r0, [pc, #516]	; (1b00 <MdmConnect_HttpConnectionSchedule+0x540>)
    18fa:	4b7d      	ldr	r3, [pc, #500]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    18fc:	4798      	blx	r3
                    gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    18fe:	4b77      	ldr	r3, [pc, #476]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1900:	2201      	movs	r2, #1
    1902:	711a      	strb	r2, [r3, #4]
                    gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1904:	2208      	movs	r2, #8
    1906:	70da      	strb	r2, [r3, #3]
    1908:	e663      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    190a:	2b01      	cmp	r3, #1
    190c:	f47f ae61 	bne.w	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    1910:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    1914:	497b      	ldr	r1, [pc, #492]	; (1b04 <MdmConnect_HttpConnectionSchedule+0x544>)
    1916:	4b7c      	ldr	r3, [pc, #496]	; (1b08 <MdmConnect_HttpConnectionSchedule+0x548>)
    1918:	6818      	ldr	r0, [r3, #0]
    191a:	4b7c      	ldr	r3, [pc, #496]	; (1b0c <MdmConnect_HttpConnectionSchedule+0x54c>)
    191c:	4798      	blx	r3
    191e:	2801      	cmp	r0, #1
    1920:	d00f      	beq.n	1942 <MdmConnect_HttpConnectionSchedule+0x382>
                    if(forcedModemRebootCnt <= 3)
    1922:	4b6e      	ldr	r3, [pc, #440]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1924:	7c5b      	ldrb	r3, [r3, #17]
    1926:	2b03      	cmp	r3, #3
    1928:	d831      	bhi.n	198e <MdmConnect_HttpConnectionSchedule+0x3ce>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    192a:	4879      	ldr	r0, [pc, #484]	; (1b10 <MdmConnect_HttpConnectionSchedule+0x550>)
    192c:	4c70      	ldr	r4, [pc, #448]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    192e:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    1930:	4878      	ldr	r0, [pc, #480]	; (1b14 <MdmConnect_HttpConnectionSchedule+0x554>)
    1932:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    1934:	4a69      	ldr	r2, [pc, #420]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1936:	7c53      	ldrb	r3, [r2, #17]
    1938:	3301      	adds	r3, #1
    193a:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    193c:	4b76      	ldr	r3, [pc, #472]	; (1b18 <MdmConnect_HttpConnectionSchedule+0x558>)
    193e:	4798      	blx	r3
    1940:	e647      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == getCloseActiveSessionCmd(sessionIdCount))
    1942:	4b66      	ldr	r3, [pc, #408]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1944:	7a1d      	ldrb	r5, [r3, #8]
    1946:	795c      	ldrb	r4, [r3, #5]
    1948:	4620      	mov	r0, r4
    194a:	4b65      	ldr	r3, [pc, #404]	; (1ae0 <MdmConnect_HttpConnectionSchedule+0x520>)
    194c:	4798      	blx	r3
    194e:	4285      	cmp	r5, r0
    1950:	d113      	bne.n	197a <MdmConnect_HttpConnectionSchedule+0x3ba>
                        if(sessionIdCount > 0)
    1952:	b14c      	cbz	r4, 1968 <MdmConnect_HttpConnectionSchedule+0x3a8>
                            sessionIdCount--;
    1954:	4b61      	ldr	r3, [pc, #388]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1956:	3c01      	subs	r4, #1
    1958:	715c      	strb	r4, [r3, #5]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    195a:	2200      	movs	r2, #0
    195c:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    195e:	4b5f      	ldr	r3, [pc, #380]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1960:	68d8      	ldr	r0, [r3, #12]
    1962:	4b6e      	ldr	r3, [pc, #440]	; (1b1c <MdmConnect_HttpConnectionSchedule+0x55c>)
    1964:	4798      	blx	r3
    1966:	e634      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                            gErrorRecoveryState = BRING_ACTIVE_PDP_CONNECTION_DOWN;
    1968:	4b5c      	ldr	r3, [pc, #368]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    196a:	2201      	movs	r2, #1
    196c:	711a      	strb	r2, [r3, #4]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    196e:	2208      	movs	r2, #8
    1970:	70da      	strb	r2, [r3, #3]
                            DEBUG_PRINT("Closed All Active Connections");
    1972:	486b      	ldr	r0, [pc, #428]	; (1b20 <MdmConnect_HttpConnectionSchedule+0x560>)
    1974:	4b5e      	ldr	r3, [pc, #376]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1976:	4798      	blx	r3
    1978:	e7f1      	b.n	195e <MdmConnect_HttpConnectionSchedule+0x39e>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    197a:	486a      	ldr	r0, [pc, #424]	; (1b24 <MdmConnect_HttpConnectionSchedule+0x564>)
    197c:	4b5c      	ldr	r3, [pc, #368]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    197e:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1980:	4b56      	ldr	r3, [pc, #344]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1982:	2200      	movs	r2, #0
    1984:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1986:	68d8      	ldr	r0, [r3, #12]
    1988:	4b64      	ldr	r3, [pc, #400]	; (1b1c <MdmConnect_HttpConnectionSchedule+0x55c>)
    198a:	4798      	blx	r3
    198c:	e621      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    198e:	4866      	ldr	r0, [pc, #408]	; (1b28 <MdmConnect_HttpConnectionSchedule+0x568>)
    1990:	4c57      	ldr	r4, [pc, #348]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1992:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    1994:	4865      	ldr	r0, [pc, #404]	; (1b2c <MdmConnect_HttpConnectionSchedule+0x56c>)
    1996:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    1998:	2200      	movs	r2, #0
    199a:	4b50      	ldr	r3, [pc, #320]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    199c:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    199e:	4b64      	ldr	r3, [pc, #400]	; (1b30 <MdmConnect_HttpConnectionSchedule+0x570>)
    19a0:	4798      	blx	r3
    19a2:	e616      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
            if(gHttpConnectOpMode == HTTP_CONNECT_OP_TX_MODE)
    19a4:	4b4d      	ldr	r3, [pc, #308]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    19a6:	789b      	ldrb	r3, [r3, #2]
    19a8:	b1db      	cbz	r3, 19e2 <MdmConnect_HttpConnectionSchedule+0x422>
            else if(gHttpConnectOpMode == HTTP_CONNECT_OP_RX_MODE)
    19aa:	2b01      	cmp	r3, #1
    19ac:	f47f ae11 	bne.w	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                if(pdPASS == xQueueReceive( CmdResponseQueue, &ConnectionResponse, ResponseWaitDelayMs))
    19b0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
    19b4:	4953      	ldr	r1, [pc, #332]	; (1b04 <MdmConnect_HttpConnectionSchedule+0x544>)
    19b6:	4b54      	ldr	r3, [pc, #336]	; (1b08 <MdmConnect_HttpConnectionSchedule+0x548>)
    19b8:	6818      	ldr	r0, [r3, #0]
    19ba:	4b54      	ldr	r3, [pc, #336]	; (1b0c <MdmConnect_HttpConnectionSchedule+0x54c>)
    19bc:	4798      	blx	r3
    19be:	2801      	cmp	r0, #1
    19c0:	d04d      	beq.n	1a5e <MdmConnect_HttpConnectionSchedule+0x49e>
                    if(forcedModemRebootCnt <= 3)
    19c2:	4b46      	ldr	r3, [pc, #280]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    19c4:	7c5b      	ldrb	r3, [r3, #17]
    19c6:	2b03      	cmp	r3, #3
    19c8:	d87c      	bhi.n	1ac4 <MdmConnect_HttpConnectionSchedule+0x504>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    19ca:	4851      	ldr	r0, [pc, #324]	; (1b10 <MdmConnect_HttpConnectionSchedule+0x550>)
    19cc:	4c48      	ldr	r4, [pc, #288]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    19ce:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    19d0:	4850      	ldr	r0, [pc, #320]	; (1b14 <MdmConnect_HttpConnectionSchedule+0x554>)
    19d2:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    19d4:	4a41      	ldr	r2, [pc, #260]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    19d6:	7c53      	ldrb	r3, [r2, #17]
    19d8:	3301      	adds	r3, #1
    19da:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    19dc:	4b4e      	ldr	r3, [pc, #312]	; (1b18 <MdmConnect_HttpConnectionSchedule+0x558>)
    19de:	4798      	blx	r3
    19e0:	e5f7      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    19e2:	4b40      	ldr	r3, [pc, #256]	; (1ae4 <MdmConnect_HttpConnectionSchedule+0x524>)
    19e4:	6818      	ldr	r0, [r3, #0]
    19e6:	4b53      	ldr	r3, [pc, #332]	; (1b34 <MdmConnect_HttpConnectionSchedule+0x574>)
    19e8:	4798      	blx	r3
    19ea:	2800      	cmp	r0, #0
    19ec:	d133      	bne.n	1a56 <MdmConnect_HttpConnectionSchedule+0x496>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    19ee:	2100      	movs	r1, #0
    19f0:	4b41      	ldr	r3, [pc, #260]	; (1af8 <MdmConnect_HttpConnectionSchedule+0x538>)
    19f2:	6818      	ldr	r0, [r3, #0]
    19f4:	4b50      	ldr	r3, [pc, #320]	; (1b38 <MdmConnect_HttpConnectionSchedule+0x578>)
    19f6:	4798      	blx	r3
    19f8:	2801      	cmp	r0, #1
    19fa:	d003      	beq.n	1a04 <MdmConnect_HttpConnectionSchedule+0x444>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    19fc:	484f      	ldr	r0, [pc, #316]	; (1b3c <MdmConnect_HttpConnectionSchedule+0x57c>)
    19fe:	4b3c      	ldr	r3, [pc, #240]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1a00:	4798      	blx	r3
    1a02:	e5e6      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1a04:	2301      	movs	r3, #1
    1a06:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_KCNX_DOWN;
    1a0a:	231a      	movs	r3, #26
    1a0c:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1a10:	2300      	movs	r3, #0
    1a12:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1a14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1a18:	4669      	mov	r1, sp
    1a1a:	4832      	ldr	r0, [pc, #200]	; (1ae4 <MdmConnect_HttpConnectionSchedule+0x524>)
    1a1c:	6800      	ldr	r0, [r0, #0]
    1a1e:	4c32      	ldr	r4, [pc, #200]	; (1ae8 <MdmConnect_HttpConnectionSchedule+0x528>)
    1a20:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1a22:	2801      	cmp	r0, #1
    1a24:	d007      	beq.n	1a36 <MdmConnect_HttpConnectionSchedule+0x476>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    1a26:	4831      	ldr	r0, [pc, #196]	; (1aec <MdmConnect_HttpConnectionSchedule+0x52c>)
    1a28:	4b31      	ldr	r3, [pc, #196]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1a2a:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1a2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1a30:	4b30      	ldr	r3, [pc, #192]	; (1af4 <MdmConnect_HttpConnectionSchedule+0x534>)
    1a32:	4798      	blx	r3
    1a34:	e5cd      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1a36:	2300      	movs	r3, #0
    1a38:	461a      	mov	r2, r3
    1a3a:	4619      	mov	r1, r3
    1a3c:	482e      	ldr	r0, [pc, #184]	; (1af8 <MdmConnect_HttpConnectionSchedule+0x538>)
    1a3e:	6800      	ldr	r0, [r0, #0]
    1a40:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1a42:	4b26      	ldr	r3, [pc, #152]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1a44:	2201      	movs	r2, #1
    1a46:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1a48:	2208      	movs	r2, #8
    1a4a:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    1a4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1a50:	4b28      	ldr	r3, [pc, #160]	; (1af4 <MdmConnect_HttpConnectionSchedule+0x534>)
    1a52:	4798      	blx	r3
    1a54:	e5bd      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1a56:	4829      	ldr	r0, [pc, #164]	; (1afc <MdmConnect_HttpConnectionSchedule+0x53c>)
    1a58:	4b25      	ldr	r3, [pc, #148]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1a5a:	4798      	blx	r3
    1a5c:	e5b9      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == CMD_AT_KCNX_DOWN)
    1a5e:	4b1f      	ldr	r3, [pc, #124]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1a60:	7a1b      	ldrb	r3, [r3, #8]
    1a62:	2b1a      	cmp	r3, #26
    1a64:	d124      	bne.n	1ab0 <MdmConnect_HttpConnectionSchedule+0x4f0>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    1a66:	4b1d      	ldr	r3, [pc, #116]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1a68:	68d8      	ldr	r0, [r3, #12]
    1a6a:	4b35      	ldr	r3, [pc, #212]	; (1b40 <MdmConnect_HttpConnectionSchedule+0x580>)
    1a6c:	4798      	blx	r3
    1a6e:	b1a0      	cbz	r0, 1a9a <MdmConnect_HttpConnectionSchedule+0x4da>
                            DEBUG_PRINT("Brought the PDP connection DOWN");
    1a70:	4834      	ldr	r0, [pc, #208]	; (1b44 <MdmConnect_HttpConnectionSchedule+0x584>)
    1a72:	4d1f      	ldr	r5, [pc, #124]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1a74:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1a76:	4c19      	ldr	r4, [pc, #100]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1a78:	8961      	ldrh	r1, [r4, #10]
    1a7a:	68e0      	ldr	r0, [r4, #12]
    1a7c:	4b32      	ldr	r3, [pc, #200]	; (1b48 <MdmConnect_HttpConnectionSchedule+0x588>)
    1a7e:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    1a80:	4832      	ldr	r0, [pc, #200]	; (1b4c <MdmConnect_HttpConnectionSchedule+0x58c>)
    1a82:	47a8      	blx	r5
                            gErrorRecoveryState = PDP_PERFORM_PS_CONNECTION_DETACH;
    1a84:	2302      	movs	r3, #2
    1a86:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1a88:	2300      	movs	r3, #0
    1a8a:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1a8c:	2308      	movs	r3, #8
    1a8e:	70e3      	strb	r3, [r4, #3]
                        vPortFree(ConnectionResponse.response);
    1a90:	4b12      	ldr	r3, [pc, #72]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1a92:	68d8      	ldr	r0, [r3, #12]
    1a94:	4b21      	ldr	r3, [pc, #132]	; (1b1c <MdmConnect_HttpConnectionSchedule+0x55c>)
    1a96:	4798      	blx	r3
    1a98:	e59b      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                            DEBUG_PRINT("Expected Response Not Received...");
    1a9a:	482d      	ldr	r0, [pc, #180]	; (1b50 <MdmConnect_HttpConnectionSchedule+0x590>)
    1a9c:	4c14      	ldr	r4, [pc, #80]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1a9e:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1aa0:	482a      	ldr	r0, [pc, #168]	; (1b4c <MdmConnect_HttpConnectionSchedule+0x58c>)
    1aa2:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1aa4:	2200      	movs	r2, #0
    1aa6:	4b0d      	ldr	r3, [pc, #52]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1aa8:	709a      	strb	r2, [r3, #2]
                            performForcedRebootOfModem();
    1aaa:	4b1b      	ldr	r3, [pc, #108]	; (1b18 <MdmConnect_HttpConnectionSchedule+0x558>)
    1aac:	4798      	blx	r3
    1aae:	e7ef      	b.n	1a90 <MdmConnect_HttpConnectionSchedule+0x4d0>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1ab0:	481c      	ldr	r0, [pc, #112]	; (1b24 <MdmConnect_HttpConnectionSchedule+0x564>)
    1ab2:	4b0f      	ldr	r3, [pc, #60]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1ab4:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1ab6:	4b09      	ldr	r3, [pc, #36]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1ab8:	2200      	movs	r2, #0
    1aba:	709a      	strb	r2, [r3, #2]
                        vPortFree(ConnectionResponse.response);
    1abc:	68d8      	ldr	r0, [r3, #12]
    1abe:	4b17      	ldr	r3, [pc, #92]	; (1b1c <MdmConnect_HttpConnectionSchedule+0x55c>)
    1ac0:	4798      	blx	r3
    1ac2:	e586      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Maximum retry count for auto recovery is expired.");
    1ac4:	4818      	ldr	r0, [pc, #96]	; (1b28 <MdmConnect_HttpConnectionSchedule+0x568>)
    1ac6:	4c0a      	ldr	r4, [pc, #40]	; (1af0 <MdmConnect_HttpConnectionSchedule+0x530>)
    1ac8:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a whole system restart....\r\n");
    1aca:	4818      	ldr	r0, [pc, #96]	; (1b2c <MdmConnect_HttpConnectionSchedule+0x56c>)
    1acc:	47a0      	blx	r4
                    	forcedModemRebootCnt = 0;
    1ace:	2200      	movs	r2, #0
    1ad0:	4b02      	ldr	r3, [pc, #8]	; (1adc <MdmConnect_HttpConnectionSchedule+0x51c>)
    1ad2:	745a      	strb	r2, [r3, #17]
                    	requestWatchDogForcedReset();
    1ad4:	4b16      	ldr	r3, [pc, #88]	; (1b30 <MdmConnect_HttpConnectionSchedule+0x570>)
    1ad6:	4798      	blx	r3
    1ad8:	e57b      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
    1ada:	bf00      	nop
    1adc:	2000020c 	.word	0x2000020c
    1ae0:	00000b55 	.word	0x00000b55
    1ae4:	200034a0 	.word	0x200034a0
    1ae8:	00005891 	.word	0x00005891
    1aec:	00008334 	.word	0x00008334
    1af0:	000026fd 	.word	0x000026fd
    1af4:	00006521 	.word	0x00006521
    1af8:	200034b0 	.word	0x200034b0
    1afc:	00008394 	.word	0x00008394
    1b00:	000083b0 	.word	0x000083b0
    1b04:	20000214 	.word	0x20000214
    1b08:	20003480 	.word	0x20003480
    1b0c:	00005ba1 	.word	0x00005ba1
    1b10:	0000880c 	.word	0x0000880c
    1b14:	00008828 	.word	0x00008828
    1b18:	00000bd5 	.word	0x00000bd5
    1b1c:	00005569 	.word	0x00005569
    1b20:	000083d4 	.word	0x000083d4
    1b24:	000083f4 	.word	0x000083f4
    1b28:	0000886c 	.word	0x0000886c
    1b2c:	000088a0 	.word	0x000088a0
    1b30:	00002a15 	.word	0x00002a15
    1b34:	00005f09 	.word	0x00005f09
    1b38:	00005d29 	.word	0x00005d29
    1b3c:	00008368 	.word	0x00008368
    1b40:	00000b95 	.word	0x00000b95
    1b44:	00008428 	.word	0x00008428
    1b48:	000026b9 	.word	0x000026b9
    1b4c:	00008cd8 	.word	0x00008cd8
    1b50:	00008448 	.word	0x00008448
                if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1b54:	4b4c      	ldr	r3, [pc, #304]	; (1c88 <MdmConnect_HttpConnectionSchedule+0x6c8>)
    1b56:	6818      	ldr	r0, [r3, #0]
    1b58:	4b4c      	ldr	r3, [pc, #304]	; (1c8c <MdmConnect_HttpConnectionSchedule+0x6cc>)
    1b5a:	4798      	blx	r3
    1b5c:	2800      	cmp	r0, #0
    1b5e:	d133      	bne.n	1bc8 <MdmConnect_HttpConnectionSchedule+0x608>
                    if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    1b60:	2100      	movs	r1, #0
    1b62:	4b4b      	ldr	r3, [pc, #300]	; (1c90 <MdmConnect_HttpConnectionSchedule+0x6d0>)
    1b64:	6818      	ldr	r0, [r3, #0]
    1b66:	4b4b      	ldr	r3, [pc, #300]	; (1c94 <MdmConnect_HttpConnectionSchedule+0x6d4>)
    1b68:	4798      	blx	r3
    1b6a:	2801      	cmp	r0, #1
    1b6c:	d003      	beq.n	1b76 <MdmConnect_HttpConnectionSchedule+0x5b6>
                        DEBUG_PRINT("Error : Not able to obtain Tx Semapahore");
    1b6e:	484a      	ldr	r0, [pc, #296]	; (1c98 <MdmConnect_HttpConnectionSchedule+0x6d8>)
    1b70:	4b4a      	ldr	r3, [pc, #296]	; (1c9c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    1b72:	4798      	blx	r3
    1b74:	e52d      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                        TxMsgQueueData.taskID = MODEM_PROCESS_TASK;
    1b76:	2301      	movs	r3, #1
    1b78:	f88d 3000 	strb.w	r3, [sp]
                        TxMsgQueueData.atCmd = CMD_AT_CGATT;
    1b7c:	231b      	movs	r3, #27
    1b7e:	f88d 3001 	strb.w	r3, [sp, #1]
                        TxMsgQueueData.pData = NULL;
    1b82:	2300      	movs	r3, #0
    1b84:	9301      	str	r3, [sp, #4]
                        TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1b86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    1b8a:	4669      	mov	r1, sp
    1b8c:	483e      	ldr	r0, [pc, #248]	; (1c88 <MdmConnect_HttpConnectionSchedule+0x6c8>)
    1b8e:	6800      	ldr	r0, [r0, #0]
    1b90:	4c43      	ldr	r4, [pc, #268]	; (1ca0 <MdmConnect_HttpConnectionSchedule+0x6e0>)
    1b92:	47a0      	blx	r4
                        if(TxQueuePushStatus == pdPASS)
    1b94:	2801      	cmp	r0, #1
    1b96:	d007      	beq.n	1ba8 <MdmConnect_HttpConnectionSchedule+0x5e8>
                            DEBUG_PRINT("Failed to sent the Session Close request to Tx Task");
    1b98:	4842      	ldr	r0, [pc, #264]	; (1ca4 <MdmConnect_HttpConnectionSchedule+0x6e4>)
    1b9a:	4b40      	ldr	r3, [pc, #256]	; (1c9c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    1b9c:	4798      	blx	r3
                            vTaskDelay(TransmitDelayMs);
    1b9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1ba2:	4b41      	ldr	r3, [pc, #260]	; (1ca8 <MdmConnect_HttpConnectionSchedule+0x6e8>)
    1ba4:	4798      	blx	r3
    1ba6:	e514      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                            xSemaphoreGive(AtTxQueueLoadSemaphore);
    1ba8:	2300      	movs	r3, #0
    1baa:	461a      	mov	r2, r3
    1bac:	4619      	mov	r1, r3
    1bae:	4838      	ldr	r0, [pc, #224]	; (1c90 <MdmConnect_HttpConnectionSchedule+0x6d0>)
    1bb0:	6800      	ldr	r0, [r0, #0]
    1bb2:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_RX_MODE;
    1bb4:	4b3d      	ldr	r3, [pc, #244]	; (1cac <MdmConnect_HttpConnectionSchedule+0x6ec>)
    1bb6:	2201      	movs	r2, #1
    1bb8:	709a      	strb	r2, [r3, #2]
                            gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1bba:	2208      	movs	r2, #8
    1bbc:	70da      	strb	r2, [r3, #3]
                            vTaskDelay(TransmitDelayMs);
    1bbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1bc2:	4b39      	ldr	r3, [pc, #228]	; (1ca8 <MdmConnect_HttpConnectionSchedule+0x6e8>)
    1bc4:	4798      	blx	r3
    1bc6:	e504      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    DEBUG_PRINT("Transmit Queue is not empty");
    1bc8:	4839      	ldr	r0, [pc, #228]	; (1cb0 <MdmConnect_HttpConnectionSchedule+0x6f0>)
    1bca:	4b34      	ldr	r3, [pc, #208]	; (1c9c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    1bcc:	4798      	blx	r3
    1bce:	e500      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    if(ConnectionResponse.atCmd == CMD_AT_CGATT)
    1bd0:	4b36      	ldr	r3, [pc, #216]	; (1cac <MdmConnect_HttpConnectionSchedule+0x6ec>)
    1bd2:	7a1b      	ldrb	r3, [r3, #8]
    1bd4:	2b1b      	cmp	r3, #27
    1bd6:	d13f      	bne.n	1c58 <MdmConnect_HttpConnectionSchedule+0x698>
                        if(false != validateCommonCommandResponse(ConnectionResponse.response))
    1bd8:	4b34      	ldr	r3, [pc, #208]	; (1cac <MdmConnect_HttpConnectionSchedule+0x6ec>)
    1bda:	68d8      	ldr	r0, [r3, #12]
    1bdc:	4b35      	ldr	r3, [pc, #212]	; (1cb4 <MdmConnect_HttpConnectionSchedule+0x6f4>)
    1bde:	4798      	blx	r3
    1be0:	2800      	cmp	r0, #0
    1be2:	d02b      	beq.n	1c3c <MdmConnect_HttpConnectionSchedule+0x67c>
                            DEBUG_PRINT("Detached the PDP PS");
    1be4:	4834      	ldr	r0, [pc, #208]	; (1cb8 <MdmConnect_HttpConnectionSchedule+0x6f8>)
    1be6:	4d2d      	ldr	r5, [pc, #180]	; (1c9c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    1be8:	47a8      	blx	r5
                            SerialDebugPrint(ConnectionResponse.response,ConnectionResponse.length);
    1bea:	4c30      	ldr	r4, [pc, #192]	; (1cac <MdmConnect_HttpConnectionSchedule+0x6ec>)
    1bec:	8961      	ldrh	r1, [r4, #10]
    1bee:	68e0      	ldr	r0, [r4, #12]
    1bf0:	4b32      	ldr	r3, [pc, #200]	; (1cbc <MdmConnect_HttpConnectionSchedule+0x6fc>)
    1bf2:	4798      	blx	r3
                            DEBUG_PRINT("\r\n");
    1bf4:	4832      	ldr	r0, [pc, #200]	; (1cc0 <MdmConnect_HttpConnectionSchedule+0x700>)
    1bf6:	47a8      	blx	r5
                            gErrorRecoveryState = CLOSE_ALL_EXISTING_CONNECIONS;
    1bf8:	2300      	movs	r3, #0
    1bfa:	7123      	strb	r3, [r4, #4]
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1bfc:	70a3      	strb	r3, [r4, #2]
                            gHttpConnectedSubState = CONNECTED_INITIALIZE_TRANSMISSION;
    1bfe:	70e3      	strb	r3, [r4, #3]
                            gHttpConnectionState = MDM_HTTP_DISCONNECTED;
    1c00:	7023      	strb	r3, [r4, #0]
                            gHttpConnectionInProgressSubstate = CONNECT_IN_PROGRESS_CLOSE_CONNECTION;
    1c02:	7063      	strb	r3, [r4, #1]
                            sessionIdCount = 5;
    1c04:	2305      	movs	r3, #5
    1c06:	7163      	strb	r3, [r4, #5]
                            DEBUG_PRINT("Error Recovery Completed\r\n");
    1c08:	482e      	ldr	r0, [pc, #184]	; (1cc4 <MdmConnect_HttpConnectionSchedule+0x704>)
    1c0a:	47a8      	blx	r5
                            DEBUG_PRINT("=================================================\r\n");
    1c0c:	482e      	ldr	r0, [pc, #184]	; (1cc8 <MdmConnect_HttpConnectionSchedule+0x708>)
    1c0e:	47a8      	blx	r5
                            DEBUG_PRINT("Establishing a new connection with server");
    1c10:	482e      	ldr	r0, [pc, #184]	; (1ccc <MdmConnect_HttpConnectionSchedule+0x70c>)
    1c12:	47a8      	blx	r5
                            errorRecoveryCnt++;
    1c14:	7ca3      	ldrb	r3, [r4, #18]
    1c16:	3301      	adds	r3, #1
    1c18:	74a3      	strb	r3, [r4, #18]
                            vPortFree(ConnectionResponse.response);
    1c1a:	68e0      	ldr	r0, [r4, #12]
    1c1c:	4b2c      	ldr	r3, [pc, #176]	; (1cd0 <MdmConnect_HttpConnectionSchedule+0x710>)
    1c1e:	4798      	blx	r3
                            if(errorRecoveryCnt >=3)
    1c20:	7ca3      	ldrb	r3, [r4, #18]
    1c22:	2b02      	cmp	r3, #2
    1c24:	f67f acd5 	bls.w	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                                DEBUG_PRINT("System is auto recovered for more than 3 times.");
    1c28:	482a      	ldr	r0, [pc, #168]	; (1cd4 <MdmConnect_HttpConnectionSchedule+0x714>)
    1c2a:	47a8      	blx	r5
                                DEBUG_PRINT("Performing a system restart....................\r\n");
    1c2c:	482a      	ldr	r0, [pc, #168]	; (1cd8 <MdmConnect_HttpConnectionSchedule+0x718>)
    1c2e:	47a8      	blx	r5
                                errorRecoveryCnt = 0;
    1c30:	2200      	movs	r2, #0
    1c32:	4b1e      	ldr	r3, [pc, #120]	; (1cac <MdmConnect_HttpConnectionSchedule+0x6ec>)
    1c34:	749a      	strb	r2, [r3, #18]
                                requestWatchDogForcedReset();
    1c36:	4b29      	ldr	r3, [pc, #164]	; (1cdc <MdmConnect_HttpConnectionSchedule+0x71c>)
    1c38:	4798      	blx	r3
    1c3a:	e4ca      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                            DEBUG_PRINT("Expected Response Not Received...");
    1c3c:	4828      	ldr	r0, [pc, #160]	; (1ce0 <MdmConnect_HttpConnectionSchedule+0x720>)
    1c3e:	4c17      	ldr	r4, [pc, #92]	; (1c9c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    1c40:	47a0      	blx	r4
                            DEBUG_PRINT("\r\n");
    1c42:	481f      	ldr	r0, [pc, #124]	; (1cc0 <MdmConnect_HttpConnectionSchedule+0x700>)
    1c44:	47a0      	blx	r4
                            gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1c46:	4b19      	ldr	r3, [pc, #100]	; (1cac <MdmConnect_HttpConnectionSchedule+0x6ec>)
    1c48:	2200      	movs	r2, #0
    1c4a:	709a      	strb	r2, [r3, #2]
                            vPortFree(ConnectionResponse.response);
    1c4c:	68d8      	ldr	r0, [r3, #12]
    1c4e:	4b20      	ldr	r3, [pc, #128]	; (1cd0 <MdmConnect_HttpConnectionSchedule+0x710>)
    1c50:	4798      	blx	r3
                            performForcedRebootOfModem();
    1c52:	4b24      	ldr	r3, [pc, #144]	; (1ce4 <MdmConnect_HttpConnectionSchedule+0x724>)
    1c54:	4798      	blx	r3
    1c56:	e4bc      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                        DEBUG_PRINT("Failed to receive connection response in RX mode");
    1c58:	4823      	ldr	r0, [pc, #140]	; (1ce8 <MdmConnect_HttpConnectionSchedule+0x728>)
    1c5a:	4b10      	ldr	r3, [pc, #64]	; (1c9c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    1c5c:	4798      	blx	r3
                        gHttpConnectOpMode = HTTP_CONNECT_OP_TX_MODE;
    1c5e:	4b13      	ldr	r3, [pc, #76]	; (1cac <MdmConnect_HttpConnectionSchedule+0x6ec>)
    1c60:	2200      	movs	r2, #0
    1c62:	709a      	strb	r2, [r3, #2]
                        gHttpConnectedSubState = CONNECTED_PEFORM_ERROR_RECOVERY;
    1c64:	2208      	movs	r2, #8
    1c66:	70da      	strb	r2, [r3, #3]
                        vPortFree(ConnectionResponse.response);
    1c68:	68d8      	ldr	r0, [r3, #12]
    1c6a:	4b19      	ldr	r3, [pc, #100]	; (1cd0 <MdmConnect_HttpConnectionSchedule+0x710>)
    1c6c:	4798      	blx	r3
    1c6e:	e4b0      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
                    	DEBUG_PRINT("Problem in Auto Recovery.");
    1c70:	481e      	ldr	r0, [pc, #120]	; (1cec <MdmConnect_HttpConnectionSchedule+0x72c>)
    1c72:	4c0a      	ldr	r4, [pc, #40]	; (1c9c <MdmConnect_HttpConnectionSchedule+0x6dc>)
    1c74:	47a0      	blx	r4
                    	DEBUG_PRINT("Trying to re-establish the connection through a modem restart....\r\n");
    1c76:	481e      	ldr	r0, [pc, #120]	; (1cf0 <MdmConnect_HttpConnectionSchedule+0x730>)
    1c78:	47a0      	blx	r4
                    	forcedModemRebootCnt++;
    1c7a:	4a0c      	ldr	r2, [pc, #48]	; (1cac <MdmConnect_HttpConnectionSchedule+0x6ec>)
    1c7c:	7c53      	ldrb	r3, [r2, #17]
    1c7e:	3301      	adds	r3, #1
    1c80:	7453      	strb	r3, [r2, #17]
                    	performForcedRebootOfModem();
    1c82:	4b18      	ldr	r3, [pc, #96]	; (1ce4 <MdmConnect_HttpConnectionSchedule+0x724>)
    1c84:	4798      	blx	r3
    1c86:	e4a4      	b.n	15d2 <MdmConnect_HttpConnectionSchedule+0x12>
    1c88:	200034a0 	.word	0x200034a0
    1c8c:	00005f09 	.word	0x00005f09
    1c90:	200034b0 	.word	0x200034b0
    1c94:	00005d29 	.word	0x00005d29
    1c98:	00008368 	.word	0x00008368
    1c9c:	000026fd 	.word	0x000026fd
    1ca0:	00005891 	.word	0x00005891
    1ca4:	00008334 	.word	0x00008334
    1ca8:	00006521 	.word	0x00006521
    1cac:	2000020c 	.word	0x2000020c
    1cb0:	00008394 	.word	0x00008394
    1cb4:	00000b95 	.word	0x00000b95
    1cb8:	0000849c 	.word	0x0000849c
    1cbc:	000026b9 	.word	0x000026b9
    1cc0:	00008cd8 	.word	0x00008cd8
    1cc4:	000088ec 	.word	0x000088ec
    1cc8:	00008908 	.word	0x00008908
    1ccc:	0000893c 	.word	0x0000893c
    1cd0:	00005569 	.word	0x00005569
    1cd4:	00008968 	.word	0x00008968
    1cd8:	00008998 	.word	0x00008998
    1cdc:	00002a15 	.word	0x00002a15
    1ce0:	00008448 	.word	0x00008448
    1ce4:	00000bd5 	.word	0x00000bd5
    1ce8:	000083f4 	.word	0x000083f4
    1cec:	0000880c 	.word	0x0000880c
    1cf0:	00008828 	.word	0x00008828

00001cf4 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
    1cf4:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
    1cf6:	490d      	ldr	r1, [pc, #52]	; (1d2c <mdmCtrlr_DataCommInit+0x38>)
    1cf8:	480d      	ldr	r0, [pc, #52]	; (1d30 <mdmCtrlr_DataCommInit+0x3c>)
    1cfa:	4b0e      	ldr	r3, [pc, #56]	; (1d34 <mdmCtrlr_DataCommInit+0x40>)
    1cfc:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
    1cfe:	b100      	cbz	r0, 1d02 <mdmCtrlr_DataCommInit+0xe>
    1d00:	bd10      	pop	{r4, pc}
	{
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
    1d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1d06:	490c      	ldr	r1, [pc, #48]	; (1d38 <mdmCtrlr_DataCommInit+0x44>)
    1d08:	480c      	ldr	r0, [pc, #48]	; (1d3c <mdmCtrlr_DataCommInit+0x48>)
    1d0a:	4b0d      	ldr	r3, [pc, #52]	; (1d40 <mdmCtrlr_DataCommInit+0x4c>)
    1d0c:	4798      	blx	r3
	}
	
	if(initStatus == ERR_NONE)
    1d0e:	2800      	cmp	r0, #0
    1d10:	d1f6      	bne.n	1d00 <mdmCtrlr_DataCommInit+0xc>
	{
		/* Enable all of the UART interrupts for SERCOM3 */
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
    1d12:	4c07      	ldr	r4, [pc, #28]	; (1d30 <mdmCtrlr_DataCommInit+0x3c>)
    1d14:	2201      	movs	r2, #1
    1d16:	4611      	mov	r1, r2
    1d18:	4620      	mov	r0, r4
    1d1a:	4b0a      	ldr	r3, [pc, #40]	; (1d44 <mdmCtrlr_DataCommInit+0x50>)
    1d1c:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
    1d1e:	4620      	mov	r0, r4
    1d20:	4b09      	ldr	r3, [pc, #36]	; (1d48 <mdmCtrlr_DataCommInit+0x54>)
    1d22:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
    1d24:	4b09      	ldr	r3, [pc, #36]	; (1d4c <mdmCtrlr_DataCommInit+0x58>)
    1d26:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
	}
	else
	{
		//DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
	}
}
    1d2a:	e7e9      	b.n	1d00 <mdmCtrlr_DataCommInit+0xc>
    1d2c:	41014000 	.word	0x41014000
    1d30:	20000024 	.word	0x20000024
    1d34:	000042e1 	.word	0x000042e1
    1d38:	200034bc 	.word	0x200034bc
    1d3c:	20003cbc 	.word	0x20003cbc
    1d40:	0000373d 	.word	0x0000373d
    1d44:	0000438d 	.word	0x0000438d
    1d48:	00004355 	.word	0x00004355
    1d4c:	e000e100 	.word	0xe000e100

00001d50 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    1d50:	2201      	movs	r2, #1
    1d52:	4b01      	ldr	r3, [pc, #4]	; (1d58 <SERCOM3_0_Handler+0x8>)
    1d54:	761a      	strb	r2, [r3, #24]
    1d56:	4770      	bx	lr
    1d58:	41014000 	.word	0x41014000

00001d5c <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
    1d5c:	2202      	movs	r2, #2
    1d5e:	4b01      	ldr	r3, [pc, #4]	; (1d64 <SERCOM3_1_Handler+0x8>)
    1d60:	761a      	strb	r2, [r3, #24]
    1d62:	4770      	bx	lr
    1d64:	41014000 	.word	0x41014000

00001d68 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
    1d68:	b530      	push	{r4, r5, lr}
    1d6a:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
    1d6c:	4d1a      	ldr	r5, [pc, #104]	; (1dd8 <SERCOM3_2_Handler+0x70>)
    1d6e:	4c1b      	ldr	r4, [pc, #108]	; (1ddc <SERCOM3_2_Handler+0x74>)
    1d70:	4628      	mov	r0, r5
    1d72:	47a0      	blx	r4
    1d74:	2800      	cmp	r0, #0
    1d76:	d0fb      	beq.n	1d70 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
    1d78:	4817      	ldr	r0, [pc, #92]	; (1dd8 <SERCOM3_2_Handler+0x70>)
    1d7a:	4b19      	ldr	r3, [pc, #100]	; (1de0 <SERCOM3_2_Handler+0x78>)
    1d7c:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
    1d7e:	4601      	mov	r1, r0
    1d80:	4818      	ldr	r0, [pc, #96]	; (1de4 <SERCOM3_2_Handler+0x7c>)
    1d82:	4b19      	ldr	r3, [pc, #100]	; (1de8 <SERCOM3_2_Handler+0x80>)
    1d84:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
    1d86:	4b19      	ldr	r3, [pc, #100]	; (1dec <SERCOM3_2_Handler+0x84>)
    1d88:	4798      	blx	r3
    1d8a:	4604      	mov	r4, r0

	if(lastCmd != CMD_AT_MAX)
    1d8c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    1d90:	d101      	bne.n	1d96 <SERCOM3_2_Handler+0x2e>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}
}
    1d92:	b009      	add	sp, #36	; 0x24
    1d94:	bd30      	pop	{r4, r5, pc}
		getModemCommandData(lastCmd, &cmdData);
    1d96:	a902      	add	r1, sp, #8
    1d98:	4b15      	ldr	r3, [pc, #84]	; (1df0 <SERCOM3_2_Handler+0x88>)
    1d9a:	4798      	blx	r3
		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
    1d9c:	4811      	ldr	r0, [pc, #68]	; (1de4 <SERCOM3_2_Handler+0x7c>)
    1d9e:	4b15      	ldr	r3, [pc, #84]	; (1df4 <SERCOM3_2_Handler+0x8c>)
    1da0:	4798      	blx	r3
    1da2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    1da6:	4298      	cmp	r0, r3
    1da8:	d3f3      	bcc.n	1d92 <SERCOM3_2_Handler+0x2a>
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
    1daa:	4b13      	ldr	r3, [pc, #76]	; (1df8 <SERCOM3_2_Handler+0x90>)
    1dac:	6818      	ldr	r0, [r3, #0]
    1dae:	ab07      	add	r3, sp, #28
    1db0:	9300      	str	r3, [sp, #0]
    1db2:	2300      	movs	r3, #0
    1db4:	2203      	movs	r2, #3
    1db6:	b2e1      	uxtb	r1, r4
    1db8:	4c10      	ldr	r4, [pc, #64]	; (1dfc <SERCOM3_2_Handler+0x94>)
    1dba:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    1dbc:	9b07      	ldr	r3, [sp, #28]
    1dbe:	b13b      	cbz	r3, 1dd0 <SERCOM3_2_Handler+0x68>
    1dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1dc4:	4b0e      	ldr	r3, [pc, #56]	; (1e00 <SERCOM3_2_Handler+0x98>)
    1dc6:	601a      	str	r2, [r3, #0]
    1dc8:	f3bf 8f4f 	dsb	sy
    1dcc:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
    1dd0:	2000      	movs	r0, #0
    1dd2:	4b0c      	ldr	r3, [pc, #48]	; (1e04 <SERCOM3_2_Handler+0x9c>)
    1dd4:	4798      	blx	r3
}
    1dd6:	e7dc      	b.n	1d92 <SERCOM3_2_Handler+0x2a>
    1dd8:	20000024 	.word	0x20000024
    1ddc:	00004381 	.word	0x00004381
    1de0:	0000436f 	.word	0x0000436f
    1de4:	20003cbc 	.word	0x20003cbc
    1de8:	000037d1 	.word	0x000037d1
    1dec:	00000b49 	.word	0x00000b49
    1df0:	0000094d 	.word	0x0000094d
    1df4:	00003811 	.word	0x00003811
    1df8:	20003498 	.word	0x20003498
    1dfc:	00006ad5 	.word	0x00006ad5
    1e00:	e000ed04 	.word	0xe000ed04
    1e04:	00000b3d 	.word	0x00000b3d

00001e08 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
    1e08:	b570      	push	{r4, r5, r6, lr}
    1e0a:	4605      	mov	r5, r0
    1e0c:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
    1e0e:	4c05      	ldr	r4, [pc, #20]	; (1e24 <mdmCtrlr_SendDataToModem+0x1c>)
    1e10:	4620      	mov	r0, r4
    1e12:	4b05      	ldr	r3, [pc, #20]	; (1e28 <mdmCtrlr_SendDataToModem+0x20>)
    1e14:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
    1e16:	4632      	mov	r2, r6
    1e18:	4629      	mov	r1, r5
    1e1a:	4620      	mov	r0, r4
    1e1c:	4b03      	ldr	r3, [pc, #12]	; (1e2c <mdmCtrlr_SendDataToModem+0x24>)
    1e1e:	4798      	blx	r3
}
    1e20:	bd70      	pop	{r4, r5, r6, pc}
    1e22:	bf00      	nop
    1e24:	20000024 	.word	0x20000024
    1e28:	00004355 	.word	0x00004355
    1e2c:	00002635 	.word	0x00002635

00001e30 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
    1e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e32:	b083      	sub	sp, #12
    1e34:	4605      	mov	r5, r0
    1e36:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
    1e38:	480d      	ldr	r0, [pc, #52]	; (1e70 <mdmCtrlr_ReadResponseFromModem+0x40>)
    1e3a:	4b0e      	ldr	r3, [pc, #56]	; (1e74 <mdmCtrlr_ReadResponseFromModem+0x44>)
    1e3c:	4798      	blx	r3
    1e3e:	42b0      	cmp	r0, r6
    1e40:	d201      	bcs.n	1e46 <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
    1e42:	b003      	add	sp, #12
    1e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
    1e46:	a801      	add	r0, sp, #4
    1e48:	4b0b      	ldr	r3, [pc, #44]	; (1e78 <mdmCtrlr_ReadResponseFromModem+0x48>)
    1e4a:	4798      	blx	r3
		while (readCnt < length)
    1e4c:	b166      	cbz	r6, 1e68 <mdmCtrlr_ReadResponseFromModem+0x38>
    1e4e:	462c      	mov	r4, r5
    1e50:	3e01      	subs	r6, #1
    1e52:	b2b6      	uxth	r6, r6
    1e54:	3601      	adds	r6, #1
    1e56:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
    1e58:	4f05      	ldr	r7, [pc, #20]	; (1e70 <mdmCtrlr_ReadResponseFromModem+0x40>)
    1e5a:	4e08      	ldr	r6, [pc, #32]	; (1e7c <mdmCtrlr_ReadResponseFromModem+0x4c>)
    1e5c:	4621      	mov	r1, r4
    1e5e:	4638      	mov	r0, r7
    1e60:	47b0      	blx	r6
    1e62:	3401      	adds	r4, #1
		while (readCnt < length)
    1e64:	42ac      	cmp	r4, r5
    1e66:	d1f9      	bne.n	1e5c <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
    1e68:	a801      	add	r0, sp, #4
    1e6a:	4b05      	ldr	r3, [pc, #20]	; (1e80 <mdmCtrlr_ReadResponseFromModem+0x50>)
    1e6c:	4798      	blx	r3
    1e6e:	e7e8      	b.n	1e42 <mdmCtrlr_ReadResponseFromModem+0x12>
    1e70:	20003cbc 	.word	0x20003cbc
    1e74:	00003811 	.word	0x00003811
    1e78:	0000340d 	.word	0x0000340d
    1e7c:	0000378d 	.word	0x0000378d
    1e80:	0000341b 	.word	0x0000341b

00001e84 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
    1e84:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
    1e86:	4802      	ldr	r0, [pc, #8]	; (1e90 <mdmCtrlr_FlushRxBuffer+0xc>)
    1e88:	4b02      	ldr	r3, [pc, #8]	; (1e94 <mdmCtrlr_FlushRxBuffer+0x10>)
    1e8a:	4798      	blx	r3
    1e8c:	bd08      	pop	{r3, pc}
    1e8e:	bf00      	nop
    1e90:	20003cbc 	.word	0x20003cbc
    1e94:	00003835 	.word	0x00003835

00001e98 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
    1e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e9a:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
    ModemDiagState = MODEM_DIAG_TEST_AT;
    1e9c:	2300      	movs	r3, #0
    1e9e:	4a66      	ldr	r2, [pc, #408]	; (2038 <ModemDiagTask+0x1a0>)
    1ea0:	7013      	strb	r3, [r2, #0]
	bModemDiagDataBaseUpdated = false;
    1ea2:	4a66      	ldr	r2, [pc, #408]	; (203c <ModemDiagTask+0x1a4>)
    1ea4:	4611      	mov	r1, r2
    1ea6:	f801 3b04 	strb.w	r3, [r1], #4
	
    memset(atResponseData,0,sizeof(atResponseData));
    1eaa:	8093      	strh	r3, [r2, #4]
    1eac:	708b      	strb	r3, [r1, #2]
    memset(atCgsnResponseData,0,sizeof(atCgsnResponseData));
    1eae:	6093      	str	r3, [r2, #8]
    1eb0:	60d3      	str	r3, [r2, #12]
    1eb2:	6113      	str	r3, [r2, #16]
    1eb4:	6153      	str	r3, [r2, #20]
    memset(atKgsnResponseData,0,sizeof(atKgsnResponseData));
    1eb6:	6193      	str	r3, [r2, #24]
    1eb8:	61d3      	str	r3, [r2, #28]
    1eba:	6213      	str	r3, [r2, #32]
    1ebc:	f8c2 3023 	str.w	r3, [r2, #35]	; 0x23
    memset(atCarrierResponseData,0,sizeof(atCarrierResponseData));
    1ec0:	6293      	str	r3, [r2, #40]	; 0x28
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1ec2:	4c5f      	ldr	r4, [pc, #380]	; (2040 <ModemDiagTask+0x1a8>)
    const TickType_t powerUpDelayMs = pdMS_TO_TICKS(7000UL);
    BaseType_t TxQueuePushStatus;
    AtTxMsgType TxMsgQueueData;
    CmdResponseType cmdResponse;

    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    1ec4:	4e5f      	ldr	r6, [pc, #380]	; (2044 <ModemDiagTask+0x1ac>)
                        ModemDiagState = 100;
                    }
                    else
                    {
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
                        vTaskDelay(DiagDelayMs);
    1ec6:	4d60      	ldr	r5, [pc, #384]	; (2048 <ModemDiagTask+0x1b0>)
    1ec8:	e097      	b.n	1ffa <ModemDiagTask+0x162>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1eca:	2304      	movs	r3, #4
    1ecc:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT;
    1ed0:	2301      	movs	r3, #1
    1ed2:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1ed6:	2300      	movs	r3, #0
    1ed8:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1eda:	2264      	movs	r2, #100	; 0x64
    1edc:	4669      	mov	r1, sp
    1ede:	6830      	ldr	r0, [r6, #0]
    1ee0:	4f5a      	ldr	r7, [pc, #360]	; (204c <ModemDiagTask+0x1b4>)
    1ee2:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1ee4:	2801      	cmp	r0, #1
    1ee6:	d006      	beq.n	1ef6 <ModemDiagTask+0x5e>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1ee8:	4859      	ldr	r0, [pc, #356]	; (2050 <ModemDiagTask+0x1b8>)
    1eea:	4b5a      	ldr	r3, [pc, #360]	; (2054 <ModemDiagTask+0x1bc>)
    1eec:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    1eee:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1ef2:	47a8      	blx	r5
    1ef4:	e07c      	b.n	1ff0 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1ef6:	2300      	movs	r3, #0
    1ef8:	461a      	mov	r2, r3
    1efa:	4619      	mov	r1, r3
    1efc:	4856      	ldr	r0, [pc, #344]	; (2058 <ModemDiagTask+0x1c0>)
    1efe:	6800      	ldr	r0, [r0, #0]
    1f00:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1f02:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1f06:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_IMEI;
    1f08:	2201      	movs	r2, #1
    1f0a:	4b4b      	ldr	r3, [pc, #300]	; (2038 <ModemDiagTask+0x1a0>)
    1f0c:	701a      	strb	r2, [r3, #0]
    1f0e:	e06f      	b.n	1ff0 <ModemDiagTask+0x158>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1f10:	2304      	movs	r3, #4
    1f12:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_CGSN;
    1f16:	2302      	movs	r3, #2
    1f18:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1f1c:	2300      	movs	r3, #0
    1f1e:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1f20:	2264      	movs	r2, #100	; 0x64
    1f22:	4669      	mov	r1, sp
    1f24:	6830      	ldr	r0, [r6, #0]
    1f26:	4f49      	ldr	r7, [pc, #292]	; (204c <ModemDiagTask+0x1b4>)
    1f28:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1f2a:	2801      	cmp	r0, #1
    1f2c:	d006      	beq.n	1f3c <ModemDiagTask+0xa4>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1f2e:	4848      	ldr	r0, [pc, #288]	; (2050 <ModemDiagTask+0x1b8>)
    1f30:	4b48      	ldr	r3, [pc, #288]	; (2054 <ModemDiagTask+0x1bc>)
    1f32:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    1f34:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1f38:	47a8      	blx	r5
    1f3a:	e059      	b.n	1ff0 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1f3c:	2300      	movs	r3, #0
    1f3e:	461a      	mov	r2, r3
    1f40:	4619      	mov	r1, r3
    1f42:	4845      	ldr	r0, [pc, #276]	; (2058 <ModemDiagTask+0x1c0>)
    1f44:	6800      	ldr	r0, [r0, #0]
    1f46:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1f48:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1f4c:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_GET_SERIAL;
    1f4e:	2202      	movs	r2, #2
    1f50:	4b39      	ldr	r3, [pc, #228]	; (2038 <ModemDiagTask+0x1a0>)
    1f52:	701a      	strb	r2, [r3, #0]
    1f54:	e04c      	b.n	1ff0 <ModemDiagTask+0x158>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1f56:	2304      	movs	r3, #4
    1f58:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_KGSN;
    1f5c:	2307      	movs	r3, #7
    1f5e:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1f62:	2300      	movs	r3, #0
    1f64:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1f66:	2264      	movs	r2, #100	; 0x64
    1f68:	4669      	mov	r1, sp
    1f6a:	6830      	ldr	r0, [r6, #0]
    1f6c:	4f37      	ldr	r7, [pc, #220]	; (204c <ModemDiagTask+0x1b4>)
    1f6e:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1f70:	2801      	cmp	r0, #1
    1f72:	d006      	beq.n	1f82 <ModemDiagTask+0xea>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1f74:	4836      	ldr	r0, [pc, #216]	; (2050 <ModemDiagTask+0x1b8>)
    1f76:	4b37      	ldr	r3, [pc, #220]	; (2054 <ModemDiagTask+0x1bc>)
    1f78:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    1f7a:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1f7e:	47a8      	blx	r5
    1f80:	e036      	b.n	1ff0 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1f82:	2300      	movs	r3, #0
    1f84:	461a      	mov	r2, r3
    1f86:	4619      	mov	r1, r3
    1f88:	4833      	ldr	r0, [pc, #204]	; (2058 <ModemDiagTask+0x1c0>)
    1f8a:	6800      	ldr	r0, [r0, #0]
    1f8c:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1f8e:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1f92:	47a8      	blx	r5
                        ModemDiagState = MODEM_DIAG_MAX_STATE;
    1f94:	2204      	movs	r2, #4
    1f96:	4b28      	ldr	r3, [pc, #160]	; (2038 <ModemDiagTask+0x1a0>)
    1f98:	701a      	strb	r2, [r3, #0]
    1f9a:	e029      	b.n	1ff0 <ModemDiagTask+0x158>
                    TxMsgQueueData.taskID = MODEM_DIAG_TASK;
    1f9c:	2304      	movs	r3, #4
    1f9e:	f88d 3000 	strb.w	r3, [sp]
                    TxMsgQueueData.atCmd = CMD_AT_WCARRIER;
    1fa2:	2303      	movs	r3, #3
    1fa4:	f88d 3001 	strb.w	r3, [sp, #1]
                    TxMsgQueueData.pData = NULL;
    1fa8:	2300      	movs	r3, #0
    1faa:	9301      	str	r3, [sp, #4]
                    TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
    1fac:	2264      	movs	r2, #100	; 0x64
    1fae:	4669      	mov	r1, sp
    1fb0:	6830      	ldr	r0, [r6, #0]
    1fb2:	4f26      	ldr	r7, [pc, #152]	; (204c <ModemDiagTask+0x1b4>)
    1fb4:	47b8      	blx	r7
                    if(TxQueuePushStatus == pdPASS)
    1fb6:	2801      	cmp	r0, #1
    1fb8:	d006      	beq.n	1fc8 <ModemDiagTask+0x130>
                        DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
    1fba:	4825      	ldr	r0, [pc, #148]	; (2050 <ModemDiagTask+0x1b8>)
    1fbc:	4b25      	ldr	r3, [pc, #148]	; (2054 <ModemDiagTask+0x1bc>)
    1fbe:	4798      	blx	r3
                        vTaskDelay(DiagDelayMs);
    1fc0:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1fc4:	47a8      	blx	r5
    1fc6:	e013      	b.n	1ff0 <ModemDiagTask+0x158>
                        xSemaphoreGive(AtTxQueueLoadSemaphore);
    1fc8:	2300      	movs	r3, #0
    1fca:	461a      	mov	r2, r3
    1fcc:	4619      	mov	r1, r3
    1fce:	4822      	ldr	r0, [pc, #136]	; (2058 <ModemDiagTask+0x1c0>)
    1fd0:	6800      	ldr	r0, [r0, #0]
    1fd2:	47b8      	blx	r7
                        vTaskDelay(DiagDelayMs);
    1fd4:	f240 50dc 	movw	r0, #1500	; 0x5dc
    1fd8:	47a8      	blx	r5
                        ModemDiagState = 100;
    1fda:	2264      	movs	r2, #100	; 0x64
    1fdc:	4b16      	ldr	r3, [pc, #88]	; (2038 <ModemDiagTask+0x1a0>)
    1fde:	701a      	strb	r2, [r3, #0]
    1fe0:	e006      	b.n	1ff0 <ModemDiagTask+0x158>
                }
                break;

                default:
                {
                	xSemaphoreGive(AtTxQueueLoadSemaphore);
    1fe2:	2300      	movs	r3, #0
    1fe4:	461a      	mov	r2, r3
    1fe6:	4619      	mov	r1, r3
    1fe8:	481b      	ldr	r0, [pc, #108]	; (2058 <ModemDiagTask+0x1c0>)
    1fea:	6800      	ldr	r0, [r0, #0]
    1fec:	4f17      	ldr	r7, [pc, #92]	; (204c <ModemDiagTask+0x1b4>)
    1fee:	47b8      	blx	r7
            kickWatchDog();
    1ff0:	4b1a      	ldr	r3, [pc, #104]	; (205c <ModemDiagTask+0x1c4>)
    1ff2:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    1ff4:	f44f 7016 	mov.w	r0, #600	; 0x258
    1ff8:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    1ffa:	47a0      	blx	r4
    1ffc:	2804      	cmp	r0, #4
    1ffe:	d1fc      	bne.n	1ffa <ModemDiagTask+0x162>
    if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
    2000:	6830      	ldr	r0, [r6, #0]
    2002:	4b17      	ldr	r3, [pc, #92]	; (2060 <ModemDiagTask+0x1c8>)
    2004:	4798      	blx	r3
    2006:	2800      	cmp	r0, #0
    2008:	d1f2      	bne.n	1ff0 <ModemDiagTask+0x158>
        if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    200a:	2100      	movs	r1, #0
    200c:	4b12      	ldr	r3, [pc, #72]	; (2058 <ModemDiagTask+0x1c0>)
    200e:	6818      	ldr	r0, [r3, #0]
    2010:	4b14      	ldr	r3, [pc, #80]	; (2064 <ModemDiagTask+0x1cc>)
    2012:	4798      	blx	r3
    2014:	2801      	cmp	r0, #1
    2016:	d1eb      	bne.n	1ff0 <ModemDiagTask+0x158>
            switch(ModemDiagState)
    2018:	4b07      	ldr	r3, [pc, #28]	; (2038 <ModemDiagTask+0x1a0>)
    201a:	781b      	ldrb	r3, [r3, #0]
    201c:	2b03      	cmp	r3, #3
    201e:	d8e0      	bhi.n	1fe2 <ModemDiagTask+0x14a>
    2020:	a201      	add	r2, pc, #4	; (adr r2, 2028 <ModemDiagTask+0x190>)
    2022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2026:	bf00      	nop
    2028:	00001ecb 	.word	0x00001ecb
    202c:	00001f11 	.word	0x00001f11
    2030:	00001f57 	.word	0x00001f57
    2034:	00001f9d 	.word	0x00001f9d
    2038:	20003ccc 	.word	0x20003ccc
    203c:	20000220 	.word	0x20000220
    2040:	00002139 	.word	0x00002139
    2044:	200034a0 	.word	0x200034a0
    2048:	00006521 	.word	0x00006521
    204c:	00005891 	.word	0x00005891
    2050:	000089f4 	.word	0x000089f4
    2054:	000026fd 	.word	0x000026fd
    2058:	200034b0 	.word	0x200034b0
    205c:	000029d5 	.word	0x000029d5
    2060:	00005f09 	.word	0x00005f09
    2064:	00005d29 	.word	0x00005d29

00002068 <ModemDiagUpdateDataBase>:
{
    2068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    206a:	4604      	mov	r4, r0
    switch(cmd)
    206c:	780b      	ldrb	r3, [r1, #0]
    206e:	3b01      	subs	r3, #1
    2070:	2b06      	cmp	r3, #6
    2072:	d826      	bhi.n	20c2 <ModemDiagUpdateDataBase+0x5a>
    2074:	e8df f003 	tbb	[pc, r3]
    2078:	25243725 	.word	0x25243725
    207c:	2525      	.short	0x2525
    207e:	04          	.byte	0x04
    207f:	00          	.byte	0x00
			while(parseCnt <= (cmdResponse->length - startIndex))
    2080:	884b      	ldrh	r3, [r1, #2]
    2082:	2b07      	cmp	r3, #7
    2084:	d40d      	bmi.n	20a2 <ModemDiagUpdateDataBase+0x3a>
    2086:	2200      	movs	r2, #0
    2088:	4613      	mov	r3, r2
				atKgsnResponseData[parseCnt] = buffer[startIndex + parseCnt];
    208a:	4d20      	ldr	r5, [pc, #128]	; (210c <ModemDiagUpdateDataBase+0xa4>)
    208c:	18a0      	adds	r0, r4, r2
    208e:	79c0      	ldrb	r0, [r0, #7]
    2090:	442a      	add	r2, r5
    2092:	7610      	strb	r0, [r2, #24]
				parseCnt++;
    2094:	3301      	adds	r3, #1
    2096:	b2db      	uxtb	r3, r3
			while(parseCnt <= (cmdResponse->length - startIndex))
    2098:	461a      	mov	r2, r3
    209a:	8848      	ldrh	r0, [r1, #2]
    209c:	3807      	subs	r0, #7
    209e:	4283      	cmp	r3, r0
    20a0:	ddf4      	ble.n	208c <ModemDiagUpdateDataBase+0x24>
			bModemDiagDataBaseUpdated = true;
    20a2:	4d1a      	ldr	r5, [pc, #104]	; (210c <ModemDiagUpdateDataBase+0xa4>)
    20a4:	2601      	movs	r6, #1
    20a6:	462c      	mov	r4, r5
    20a8:	f804 6b18 	strb.w	r6, [r4], #24
			DEBUG_PRINT("Retrieved the Modem serial Number");
    20ac:	4818      	ldr	r0, [pc, #96]	; (2110 <ModemDiagUpdateDataBase+0xa8>)
    20ae:	4f19      	ldr	r7, [pc, #100]	; (2114 <ModemDiagUpdateDataBase+0xac>)
    20b0:	47b8      	blx	r7
			SerialDebugPrint(atKgsnResponseData,sizeof(atKgsnResponseData));
    20b2:	210f      	movs	r1, #15
    20b4:	4620      	mov	r0, r4
    20b6:	4b18      	ldr	r3, [pc, #96]	; (2118 <ModemDiagUpdateDataBase+0xb0>)
    20b8:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    20ba:	4818      	ldr	r0, [pc, #96]	; (211c <ModemDiagUpdateDataBase+0xb4>)
    20bc:	47b8      	blx	r7
			bModemDiagDataBaseUpdated = true;
    20be:	702e      	strb	r6, [r5, #0]
    20c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atResponseData,buffer,sizeof(atResponseData));
    20c2:	4b12      	ldr	r3, [pc, #72]	; (210c <ModemDiagUpdateDataBase+0xa4>)
    20c4:	1d1d      	adds	r5, r3, #4
    20c6:	8801      	ldrh	r1, [r0, #0]
    20c8:	7882      	ldrb	r2, [r0, #2]
    20ca:	8099      	strh	r1, [r3, #4]
    20cc:	719a      	strb	r2, [r3, #6]
        	DEBUG_PRINT("Verifying the UART Link status with Modem");
    20ce:	4814      	ldr	r0, [pc, #80]	; (2120 <ModemDiagUpdateDataBase+0xb8>)
    20d0:	4c10      	ldr	r4, [pc, #64]	; (2114 <ModemDiagUpdateDataBase+0xac>)
    20d2:	47a0      	blx	r4
        	DEBUG_PRINT("SuccessFully verified the UART Link between SAMD51 Controller & Modem");
    20d4:	4813      	ldr	r0, [pc, #76]	; (2124 <ModemDiagUpdateDataBase+0xbc>)
    20d6:	47a0      	blx	r4
        	SerialDebugPrint(atResponseData,sizeof(atResponseData));
    20d8:	2103      	movs	r1, #3
    20da:	4628      	mov	r0, r5
    20dc:	4b0e      	ldr	r3, [pc, #56]	; (2118 <ModemDiagUpdateDataBase+0xb0>)
    20de:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    20e0:	480e      	ldr	r0, [pc, #56]	; (211c <ModemDiagUpdateDataBase+0xb4>)
    20e2:	47a0      	blx	r4
        break;
    20e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        	memcpy(atCgsnResponseData,buffer,sizeof(atCgsnResponseData));
    20e6:	4e09      	ldr	r6, [pc, #36]	; (210c <ModemDiagUpdateDataBase+0xa4>)
    20e8:	f106 0508 	add.w	r5, r6, #8
    20ec:	6800      	ldr	r0, [r0, #0]
    20ee:	6861      	ldr	r1, [r4, #4]
    20f0:	68a2      	ldr	r2, [r4, #8]
    20f2:	68e3      	ldr	r3, [r4, #12]
    20f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
        	DEBUG_PRINT("Retrieved the Modem IMEI Number");
    20f6:	480c      	ldr	r0, [pc, #48]	; (2128 <ModemDiagUpdateDataBase+0xc0>)
    20f8:	4c06      	ldr	r4, [pc, #24]	; (2114 <ModemDiagUpdateDataBase+0xac>)
    20fa:	47a0      	blx	r4
        	SerialDebugPrint(atCgsnResponseData,sizeof(atCgsnResponseData));
    20fc:	2110      	movs	r1, #16
    20fe:	f106 0008 	add.w	r0, r6, #8
    2102:	4b05      	ldr	r3, [pc, #20]	; (2118 <ModemDiagUpdateDataBase+0xb0>)
    2104:	4798      	blx	r3
        	DEBUG_PRINT("\r\n");
    2106:	4805      	ldr	r0, [pc, #20]	; (211c <ModemDiagUpdateDataBase+0xb4>)
    2108:	47a0      	blx	r4
        break;
    210a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    210c:	20000220 	.word	0x20000220
    2110:	00008ab0 	.word	0x00008ab0
    2114:	000026fd 	.word	0x000026fd
    2118:	000026b9 	.word	0x000026b9
    211c:	00008cd8 	.word	0x00008cd8
    2120:	00008a1c 	.word	0x00008a1c
    2124:	00008a48 	.word	0x00008a48
    2128:	00008a90 	.word	0x00008a90

0000212c <isModemDiagDataBaseUpdated>:
*
********************************************************************************/
bool isModemDiagDataBaseUpdated(void)
{
	return bModemDiagDataBaseUpdated;
}
    212c:	4b01      	ldr	r3, [pc, #4]	; (2134 <isModemDiagDataBaseUpdated+0x8>)
    212e:	7818      	ldrb	r0, [r3, #0]
    2130:	4770      	bx	lr
    2132:	bf00      	nop
    2134:	20000220 	.word	0x20000220

00002138 <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
    2138:	4b01      	ldr	r3, [pc, #4]	; (2140 <getModemPowerStatus+0x8>)
    213a:	7818      	ldrb	r0, [r3, #0]
    213c:	4770      	bx	lr
    213e:	bf00      	nop
    2140:	2000024c 	.word	0x2000024c

00002144 <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_RESET_MODEM;
    2144:	4b04      	ldr	r3, [pc, #16]	; (2158 <modemPowerStateInit+0x14>)
    2146:	2207      	movs	r2, #7
    2148:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    214a:	2200      	movs	r2, #0
    214c:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_ASSERT;
    214e:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    2150:	2201      	movs	r2, #1
    2152:	70da      	strb	r2, [r3, #3]
    2154:	4770      	bx	lr
    2156:	bf00      	nop
    2158:	2000024c 	.word	0x2000024c

0000215c <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
    215c:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);
    const TickType_t ModemResetToPowerOnWaitDelay = pdMS_TO_TICKS(500UL);

    switch(ModemPwrState)
    215e:	4b68      	ldr	r3, [pc, #416]	; (2300 <modemPowerSchedule+0x1a4>)
    2160:	781b      	ldrb	r3, [r3, #0]
    2162:	2b06      	cmp	r3, #6
    2164:	f000 809e 	beq.w	22a4 <modemPowerSchedule+0x148>
    2168:	2b07      	cmp	r3, #7
    216a:	d054      	beq.n	2216 <modemPowerSchedule+0xba>
    216c:	b103      	cbz	r3, 2170 <modemPowerSchedule+0x14>
    216e:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
    2170:	4b63      	ldr	r3, [pc, #396]	; (2300 <modemPowerSchedule+0x1a4>)
    2172:	785b      	ldrb	r3, [r3, #1]
    2174:	2b03      	cmp	r3, #3
    2176:	d8fa      	bhi.n	216e <modemPowerSchedule+0x12>
    2178:	e8df f003 	tbb	[pc, r3]
    217c:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2180:	4b60      	ldr	r3, [pc, #384]	; (2304 <modemPowerSchedule+0x1a8>)
    2182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    218a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    218e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    2192:	4c5d      	ldr	r4, [pc, #372]	; (2308 <modemPowerSchedule+0x1ac>)
    2194:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2198:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    219c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    21a0:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    21a8:	f44f 2500 	mov.w	r5, #524288	; 0x80000
    21ac:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    21ae:	6299      	str	r1, [r3, #40]	; 0x28
    21b0:	4856      	ldr	r0, [pc, #344]	; (230c <modemPowerSchedule+0x1b0>)
    21b2:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    21b4:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    21b8:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    21bc:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21c0:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    21c2:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    21c4:	6299      	str	r1, [r3, #40]	; 0x28
    21c6:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    21c8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
    21cc:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    21d0:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21d4:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
    21d6:	2201      	movs	r2, #1
    21d8:	4b49      	ldr	r3, [pc, #292]	; (2300 <modemPowerSchedule+0x1a4>)
    21da:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
    21dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    21e0:	4b4b      	ldr	r3, [pc, #300]	; (2310 <modemPowerSchedule+0x1b4>)
    21e2:	4798      	blx	r3
                }
                break;
    21e4:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    21ea:	4b46      	ldr	r3, [pc, #280]	; (2304 <modemPowerSchedule+0x1a8>)
    21ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
    21f0:	2202      	movs	r2, #2
    21f2:	4b43      	ldr	r3, [pc, #268]	; (2300 <modemPowerSchedule+0x1a4>)
    21f4:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
    21f6:	2032      	movs	r0, #50	; 0x32
    21f8:	4b45      	ldr	r3, [pc, #276]	; (2310 <modemPowerSchedule+0x1b4>)
    21fa:	4798      	blx	r3
                }
                break;
    21fc:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
    21fe:	2203      	movs	r2, #3
    2200:	4b3f      	ldr	r3, [pc, #252]	; (2300 <modemPowerSchedule+0x1a4>)
    2202:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
    2204:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2208:	4b41      	ldr	r3, [pc, #260]	; (2310 <modemPowerSchedule+0x1b4>)
    220a:	4798      	blx	r3
                }
                break;
    220c:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
    220e:	2204      	movs	r2, #4
    2210:	4b3b      	ldr	r3, [pc, #236]	; (2300 <modemPowerSchedule+0x1a4>)
    2212:	701a      	strb	r2, [r3, #0]
                }
                break;
    2214:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
    2216:	4b3a      	ldr	r3, [pc, #232]	; (2300 <modemPowerSchedule+0x1a4>)
    2218:	789b      	ldrb	r3, [r3, #2]
    221a:	b113      	cbz	r3, 2222 <modemPowerSchedule+0xc6>
    221c:	2b01      	cmp	r3, #1
    221e:	d028      	beq.n	2272 <modemPowerSchedule+0x116>
    2220:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2222:	4b38      	ldr	r3, [pc, #224]	; (2304 <modemPowerSchedule+0x1a8>)
    2224:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    2228:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    222c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2230:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    2234:	4a34      	ldr	r2, [pc, #208]	; (2308 <modemPowerSchedule+0x1ac>)
    2236:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    223a:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    223e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2242:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2246:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    224a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    224e:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2250:	6298      	str	r0, [r3, #40]	; 0x28
    2252:	4a2e      	ldr	r2, [pc, #184]	; (230c <modemPowerSchedule+0x1b0>)
    2254:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2256:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    225a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    225e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2262:	6199      	str	r1, [r3, #24]

                    /* Apply low level pulse on the RESET pin for 25 ms */
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
    2264:	2201      	movs	r2, #1
    2266:	4b26      	ldr	r3, [pc, #152]	; (2300 <modemPowerSchedule+0x1a4>)
    2268:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
    226a:	2019      	movs	r0, #25
    226c:	4b28      	ldr	r3, [pc, #160]	; (2310 <modemPowerSchedule+0x1b4>)
    226e:	4798      	blx	r3
                }
                break;
    2270:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2272:	4b24      	ldr	r3, [pc, #144]	; (2304 <modemPowerSchedule+0x1a8>)
    2274:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    2278:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    227a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    227e:	629a      	str	r2, [r3, #40]	; 0x28
    2280:	4a22      	ldr	r2, [pc, #136]	; (230c <modemPowerSchedule+0x1b0>)
    2282:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2284:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    2288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    228c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2290:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
    2292:	4b1b      	ldr	r3, [pc, #108]	; (2300 <modemPowerSchedule+0x1a4>)
    2294:	2200      	movs	r2, #0
    2296:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
    2298:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemResetToPowerOnWaitDelay);
    229a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    229e:	4b1c      	ldr	r3, [pc, #112]	; (2310 <modemPowerSchedule+0x1b4>)
    22a0:	4798      	blx	r3
                }
                break;
    22a2:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
    22a4:	4b16      	ldr	r3, [pc, #88]	; (2300 <modemPowerSchedule+0x1a4>)
    22a6:	78db      	ldrb	r3, [r3, #3]
    22a8:	2b00      	cmp	r3, #0
    22aa:	f47f af60 	bne.w	216e <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    22ae:	4b15      	ldr	r3, [pc, #84]	; (2304 <modemPowerSchedule+0x1a8>)
    22b0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    22b4:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    22bc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
    22c0:	4a11      	ldr	r2, [pc, #68]	; (2308 <modemPowerSchedule+0x1ac>)
    22c2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22c6:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
    22ca:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22ce:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22d2:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    22d6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    22da:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    22dc:	6298      	str	r0, [r3, #40]	; 0x28
    22de:	4a0b      	ldr	r2, [pc, #44]	; (230c <modemPowerSchedule+0x1b0>)
    22e0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22e2:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
    22e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22ea:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    22ee:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
    22f0:	2201      	movs	r2, #1
    22f2:	4b03      	ldr	r3, [pc, #12]	; (2300 <modemPowerSchedule+0x1a4>)
    22f4:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
    22f6:	2019      	movs	r0, #25
    22f8:	4b05      	ldr	r3, [pc, #20]	; (2310 <modemPowerSchedule+0x1b4>)
    22fa:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
    22fc:	e737      	b.n	216e <modemPowerSchedule+0x12>
    22fe:	bf00      	nop
    2300:	2000024c 	.word	0x2000024c
    2304:	41008000 	.word	0x41008000
    2308:	c0000001 	.word	0xc0000001
    230c:	c0000008 	.word	0xc0000008
    2310:	00006521 	.word	0x00006521

00002314 <packetTransmitPeriodicTimerCallBack>:
*               into a string and returns the string.
*
********************************************************************************/
static void packetTransmitPeriodicTimerCallBack(void* param)
{
	packetTransmitPeriodicTimerExpired = true;
    2314:	2201      	movs	r2, #1
    2316:	4b01      	ldr	r3, [pc, #4]	; (231c <packetTransmitPeriodicTimerCallBack+0x8>)
    2318:	701a      	strb	r2, [r3, #0]
    231a:	4770      	bx	lr
    231c:	20000250 	.word	0x20000250

00002320 <SystemAutoRestartTimerCallBack>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
static void SystemAutoRestartTimerCallBack(void* param)
{
    2320:	b508      	push	{r3, lr}
	DEBUG_PRINT("Hourly System Restart timer expired. Rebooting the system.\r\n");
    2322:	4803      	ldr	r0, [pc, #12]	; (2330 <SystemAutoRestartTimerCallBack+0x10>)
    2324:	4b03      	ldr	r3, [pc, #12]	; (2334 <SystemAutoRestartTimerCallBack+0x14>)
    2326:	4798      	blx	r3
	requestWatchDogForcedReset();
    2328:	4b03      	ldr	r3, [pc, #12]	; (2338 <SystemAutoRestartTimerCallBack+0x18>)
    232a:	4798      	blx	r3
    232c:	bd08      	pop	{r3, pc}
    232e:	bf00      	nop
    2330:	00008ad4 	.word	0x00008ad4
    2334:	000026fd 	.word	0x000026fd
    2338:	00002a15 	.word	0x00002a15

0000233c <ModemProcessTask>:
{
    233c:	b570      	push	{r4, r5, r6, lr}
    233e:	b082      	sub	sp, #8
    modemPowerStateInit();
    2340:	4b23      	ldr	r3, [pc, #140]	; (23d0 <ModemProcessTask+0x94>)
    2342:	4798      	blx	r3
    MdmConnect_HttpConnectionInit();
    2344:	4b23      	ldr	r3, [pc, #140]	; (23d4 <ModemProcessTask+0x98>)
    2346:	4798      	blx	r3
    packetTransmitPeriodicTimerExpired = false;
    2348:	2400      	movs	r4, #0
    234a:	4b23      	ldr	r3, [pc, #140]	; (23d8 <ModemProcessTask+0x9c>)
    234c:	701c      	strb	r4, [r3, #0]
    xAutoReloadHourlyTimer   = xTimerCreate("HourlySystemRestartTimer",HOURLY_RESTART_TIMER_LOAD_VALUE,pdTRUE,0,SystemAutoRestartTimerCallBack);
    234e:	4b23      	ldr	r3, [pc, #140]	; (23dc <ModemProcessTask+0xa0>)
    2350:	9300      	str	r3, [sp, #0]
    2352:	4623      	mov	r3, r4
    2354:	2201      	movs	r2, #1
    2356:	4922      	ldr	r1, [pc, #136]	; (23e0 <ModemProcessTask+0xa4>)
    2358:	4822      	ldr	r0, [pc, #136]	; (23e4 <ModemProcessTask+0xa8>)
    235a:	4e23      	ldr	r6, [pc, #140]	; (23e8 <ModemProcessTask+0xac>)
    235c:	47b0      	blx	r6
    235e:	4605      	mov	r5, r0
    xPacketSendPeriodicTimer = xTimerCreate("PacketTransmitPeriodicTimer",PACKET_SEND_TIMER_LOAD_VALUE,pdTRUE,0,packetTransmitPeriodicTimerCallBack);
    2360:	4b22      	ldr	r3, [pc, #136]	; (23ec <ModemProcessTask+0xb0>)
    2362:	9300      	str	r3, [sp, #0]
    2364:	4623      	mov	r3, r4
    2366:	2201      	movs	r2, #1
    2368:	f241 7170 	movw	r1, #6000	; 0x1770
    236c:	4820      	ldr	r0, [pc, #128]	; (23f0 <ModemProcessTask+0xb4>)
    236e:	47b0      	blx	r6
    if((xPacketSendPeriodicTimer != NULL) &&
    2370:	b338      	cbz	r0, 23c2 <ModemProcessTask+0x86>
    2372:	4604      	mov	r4, r0
    2374:	b32d      	cbz	r5, 23c2 <ModemProcessTask+0x86>
    	if((pdPASS == xTimerStart(xAutoReloadHourlyTimer,0)) &&
    2376:	4b1f      	ldr	r3, [pc, #124]	; (23f4 <ModemProcessTask+0xb8>)
    2378:	4798      	blx	r3
    237a:	2300      	movs	r3, #0
    237c:	9300      	str	r3, [sp, #0]
    237e:	4602      	mov	r2, r0
    2380:	2101      	movs	r1, #1
    2382:	4628      	mov	r0, r5
    2384:	4d1c      	ldr	r5, [pc, #112]	; (23f8 <ModemProcessTask+0xbc>)
    2386:	47a8      	blx	r5
    2388:	2801      	cmp	r0, #1
    238a:	d11a      	bne.n	23c2 <ModemProcessTask+0x86>
		   (pdPASS == xTimerStart(xPacketSendPeriodicTimer,0)))
    238c:	4b19      	ldr	r3, [pc, #100]	; (23f4 <ModemProcessTask+0xb8>)
    238e:	4798      	blx	r3
    2390:	2300      	movs	r3, #0
    2392:	9300      	str	r3, [sp, #0]
    2394:	4602      	mov	r2, r0
    2396:	2101      	movs	r1, #1
    2398:	4620      	mov	r0, r4
    239a:	47a8      	blx	r5
    	if((pdPASS == xTimerStart(xAutoReloadHourlyTimer,0)) &&
    239c:	2801      	cmp	r0, #1
    239e:	d110      	bne.n	23c2 <ModemProcessTask+0x86>
    		DEBUG_PRINT("Modem timers are started");
    23a0:	4816      	ldr	r0, [pc, #88]	; (23fc <ModemProcessTask+0xc0>)
    23a2:	4b17      	ldr	r3, [pc, #92]	; (2400 <ModemProcessTask+0xc4>)
    23a4:	4798      	blx	r3
        modemPowerSchedule();
    23a6:	4d17      	ldr	r5, [pc, #92]	; (2404 <ModemProcessTask+0xc8>)
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    23a8:	4c17      	ldr	r4, [pc, #92]	; (2408 <ModemProcessTask+0xcc>)
            MdmConnect_HttpConnectionSchedule();
    23aa:	4e18      	ldr	r6, [pc, #96]	; (240c <ModemProcessTask+0xd0>)
        modemPowerSchedule();
    23ac:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    23ae:	47a0      	blx	r4
    23b0:	2804      	cmp	r0, #4
    23b2:	d1fb      	bne.n	23ac <ModemProcessTask+0x70>
            MdmConnect_HttpConnectionSchedule();
    23b4:	47b0      	blx	r6
			kickWatchDog();
    23b6:	4b16      	ldr	r3, [pc, #88]	; (2410 <ModemProcessTask+0xd4>)
    23b8:	4798      	blx	r3
            vTaskDelay(xDelayMs);
    23ba:	2064      	movs	r0, #100	; 0x64
    23bc:	4b15      	ldr	r3, [pc, #84]	; (2414 <ModemProcessTask+0xd8>)
    23be:	4798      	blx	r3
    23c0:	e7f4      	b.n	23ac <ModemProcessTask+0x70>
    	DEBUG_PRINT("Failed to initialize the modem timers. Rebooting the system");
    23c2:	4815      	ldr	r0, [pc, #84]	; (2418 <ModemProcessTask+0xdc>)
    23c4:	4b0e      	ldr	r3, [pc, #56]	; (2400 <ModemProcessTask+0xc4>)
    23c6:	4798      	blx	r3
    	requestWatchDogForcedReset();
    23c8:	4b14      	ldr	r3, [pc, #80]	; (241c <ModemProcessTask+0xe0>)
    23ca:	4798      	blx	r3
    23cc:	e7eb      	b.n	23a6 <ModemProcessTask+0x6a>
    23ce:	bf00      	nop
    23d0:	00002145 	.word	0x00002145
    23d4:	00000bb1 	.word	0x00000bb1
    23d8:	20000250 	.word	0x20000250
    23dc:	00002321 	.word	0x00002321
    23e0:	0036ee80 	.word	0x0036ee80
    23e4:	00008b14 	.word	0x00008b14
    23e8:	00006ce1 	.word	0x00006ce1
    23ec:	00002315 	.word	0x00002315
    23f0:	00008b30 	.word	0x00008b30
    23f4:	000062e1 	.word	0x000062e1
    23f8:	00006d35 	.word	0x00006d35
    23fc:	00008b4c 	.word	0x00008b4c
    2400:	000026fd 	.word	0x000026fd
    2404:	0000215d 	.word	0x0000215d
    2408:	00002139 	.word	0x00002139
    240c:	000015c1 	.word	0x000015c1
    2410:	000029d5 	.word	0x000029d5
    2414:	00006521 	.word	0x00006521
    2418:	00008b68 	.word	0x00008b68
    241c:	00002a15 	.word	0x00002a15

00002420 <clearPacketTransmitTimerExpiryFlag>:
	packetTransmitPeriodicTimerExpired = false;
    2420:	2200      	movs	r2, #0
    2422:	4b01      	ldr	r3, [pc, #4]	; (2428 <clearPacketTransmitTimerExpiryFlag+0x8>)
    2424:	701a      	strb	r2, [r3, #0]
    2426:	4770      	bx	lr
    2428:	20000250 	.word	0x20000250

0000242c <isPacketTransmitTimerExpired>:
}
    242c:	4b01      	ldr	r3, [pc, #4]	; (2434 <isPacketTransmitTimerExpired+0x8>)
    242e:	7818      	ldrb	r0, [r3, #0]
    2430:	4770      	bx	lr
    2432:	bf00      	nop
    2434:	20000250 	.word	0x20000250

00002438 <modemResponseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void modemResponseHandler(AT_CMD_TYPE cmd,uint8_t* response, uint16_t length)
{
    2438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    243a:	4607      	mov	r7, r0
    243c:	460c      	mov	r4, r1
    243e:	4615      	mov	r5, r2
	BaseType_t CmdResponseQueuePushStatus;
	const TickType_t QueuePushDelayMs = pdMS_TO_TICKS(100UL);
    getModemCommandData(cmd,&cmdData);
    2440:	4923      	ldr	r1, [pc, #140]	; (24d0 <modemResponseHandler+0x98>)
    2442:	4b24      	ldr	r3, [pc, #144]	; (24d4 <modemResponseHandler+0x9c>)
    2444:	4798      	blx	r3

    if(response != NULL)
    2446:	2c00      	cmp	r4, #0
    2448:	d03e      	beq.n	24c8 <modemResponseHandler+0x90>
    {
        switch (cmdData.cmdSet)
    244a:	4b21      	ldr	r3, [pc, #132]	; (24d0 <modemResponseHandler+0x98>)
    244c:	785b      	ldrb	r3, [r3, #1]
    244e:	b113      	cbz	r3, 2456 <modemResponseHandler+0x1e>
    2450:	2b01      	cmp	r3, #1
    2452:	d016      	beq.n	2482 <modemResponseHandler+0x4a>
    2454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        {
            case AT_CMD_SET_DIAGNOSTICS:
            {
            	cmdResponse.atCmd = cmd;
    2456:	4e1e      	ldr	r6, [pc, #120]	; (24d0 <modemResponseHandler+0x98>)
    2458:	7537      	strb	r7, [r6, #20]
            	cmdResponse.length = length;
    245a:	82f5      	strh	r5, [r6, #22]
            	memset(responseBuffer,0,700);
    245c:	f106 071c 	add.w	r7, r6, #28
    2460:	f44f 722f 	mov.w	r2, #700	; 0x2bc
    2464:	2100      	movs	r1, #0
    2466:	4638      	mov	r0, r7
    2468:	4b1b      	ldr	r3, [pc, #108]	; (24d8 <modemResponseHandler+0xa0>)
    246a:	4798      	blx	r3
            	memcpy(responseBuffer,response,length);
    246c:	462a      	mov	r2, r5
    246e:	4621      	mov	r1, r4
    2470:	4638      	mov	r0, r7
    2472:	4b1a      	ldr	r3, [pc, #104]	; (24dc <modemResponseHandler+0xa4>)
    2474:	4798      	blx	r3
            	ModemDiagUpdateDataBase(responseBuffer,&cmdResponse);
    2476:	f106 0114 	add.w	r1, r6, #20
    247a:	4638      	mov	r0, r7
    247c:	4b18      	ldr	r3, [pc, #96]	; (24e0 <modemResponseHandler+0xa8>)
    247e:	4798      	blx	r3
				cmd = CMD_AT_MAX;
            }
            break;
    2480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

            case AT_CMD_SET_CONNECTION:
            {
                if (uxQueueMessagesWaiting(CmdResponseQueue) == 0)
    2482:	4b18      	ldr	r3, [pc, #96]	; (24e4 <modemResponseHandler+0xac>)
    2484:	6818      	ldr	r0, [r3, #0]
    2486:	4b18      	ldr	r3, [pc, #96]	; (24e8 <modemResponseHandler+0xb0>)
    2488:	4798      	blx	r3
    248a:	b9c8      	cbnz	r0, 24c0 <modemResponseHandler+0x88>
                {
                	cmdResponse.atCmd = cmd;
    248c:	4e10      	ldr	r6, [pc, #64]	; (24d0 <modemResponseHandler+0x98>)
    248e:	7537      	strb	r7, [r6, #20]
                	cmdResponse.length = length;
    2490:	82f5      	strh	r5, [r6, #22]
                	cmdResponse.response = (uint8_t*)pvPortMalloc((length)*(sizeof(uint8_t)));
    2492:	4628      	mov	r0, r5
    2494:	4b15      	ldr	r3, [pc, #84]	; (24ec <modemResponseHandler+0xb4>)
    2496:	4798      	blx	r3
    2498:	61b0      	str	r0, [r6, #24]

                	if(cmdResponse.response != NULL)
    249a:	b1c0      	cbz	r0, 24ce <modemResponseHandler+0x96>
                	{
                		memcpy(cmdResponse.response,response,length);
    249c:	462a      	mov	r2, r5
    249e:	4621      	mov	r1, r4
    24a0:	4b0e      	ldr	r3, [pc, #56]	; (24dc <modemResponseHandler+0xa4>)
    24a2:	4798      	blx	r3
                		CmdResponseQueuePushStatus = xQueueSendToBack(CmdResponseQueue, &cmdResponse, QueuePushDelayMs);
    24a4:	2300      	movs	r3, #0
    24a6:	2264      	movs	r2, #100	; 0x64
    24a8:	f106 0114 	add.w	r1, r6, #20
    24ac:	480d      	ldr	r0, [pc, #52]	; (24e4 <modemResponseHandler+0xac>)
    24ae:	6800      	ldr	r0, [r0, #0]
    24b0:	4c0f      	ldr	r4, [pc, #60]	; (24f0 <modemResponseHandler+0xb8>)
    24b2:	47a0      	blx	r4

                		if(CmdResponseQueuePushStatus == pdPASS)
    24b4:	2801      	cmp	r0, #1
    24b6:	d00a      	beq.n	24ce <modemResponseHandler+0x96>
                		{
                			//DEBUG_PRINT("Successfully posted connection Response to Queue");
                		}
                		else
                		{
                			DEBUG_PRINT("Failed to post the connection Response to Queue");
    24b8:	480e      	ldr	r0, [pc, #56]	; (24f4 <modemResponseHandler+0xbc>)
    24ba:	4b0f      	ldr	r3, [pc, #60]	; (24f8 <modemResponseHandler+0xc0>)
    24bc:	4798      	blx	r3
    24be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                		}
                	}
                }
                else
                {
                	DEBUG_PRINT("Error : Command Response Queue is not empty");
    24c0:	480e      	ldr	r0, [pc, #56]	; (24fc <modemResponseHandler+0xc4>)
    24c2:	4b0d      	ldr	r3, [pc, #52]	; (24f8 <modemResponseHandler+0xc0>)
    24c4:	4798      	blx	r3
    24c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                break;
        }
    }
    else
    {
    	DEBUG_PRINT("ERROR: Received an empty response string in command response handler");
    24c8:	480d      	ldr	r0, [pc, #52]	; (2500 <modemResponseHandler+0xc8>)
    24ca:	4b0b      	ldr	r3, [pc, #44]	; (24f8 <modemResponseHandler+0xc0>)
    24cc:	4798      	blx	r3
    24ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24d0:	20000254 	.word	0x20000254
    24d4:	0000094d 	.word	0x0000094d
    24d8:	000070c5 	.word	0x000070c5
    24dc:	0000707b 	.word	0x0000707b
    24e0:	00002069 	.word	0x00002069
    24e4:	20003480 	.word	0x20003480
    24e8:	00005f09 	.word	0x00005f09
    24ec:	00005495 	.word	0x00005495
    24f0:	00005891 	.word	0x00005891
    24f4:	00008ba4 	.word	0x00008ba4
    24f8:	000026fd 	.word	0x000026fd
    24fc:	00008bd4 	.word	0x00008bd4
    2500:	00008c00 	.word	0x00008c00

00002504 <ModemRxTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/projdefs.h"
#include "Application/Tasks/ModemTask/include/ModemCmdParser.h"

void ModemRxTask( void *ModemTaskParam)
{
    2504:	b5f0      	push	{r4, r5, r6, r7, lr}
    2506:	b087      	sub	sp, #28

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    2508:	4c10      	ldr	r4, [pc, #64]	; (254c <ModemRxTask+0x48>)
		
		if(xResult == pdPASS)
		{
			getModemCommandData(atCmd, &cmdData);
    250a:	4f11      	ldr	r7, [pc, #68]	; (2550 <ModemRxTask+0x4c>)
			//DEBUG_PRINT("Notification Received to Rx Task from ISR");

			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    250c:	4e11      	ldr	r6, [pc, #68]	; (2554 <ModemRxTask+0x50>)
    250e:	e001      	b.n	2514 <ModemRxTask+0x10>
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
		}
		kickWatchDog();
    2510:	4b11      	ldr	r3, [pc, #68]	; (2558 <ModemRxTask+0x54>)
    2512:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
    2514:	f04f 33ff 	mov.w	r3, #4294967295
    2518:	f10d 0217 	add.w	r2, sp, #23
    251c:	4619      	mov	r1, r3
    251e:	2000      	movs	r0, #0
    2520:	47a0      	blx	r4
		if(xResult == pdPASS)
    2522:	2801      	cmp	r0, #1
    2524:	d1f4      	bne.n	2510 <ModemRxTask+0xc>
			getModemCommandData(atCmd, &cmdData);
    2526:	4669      	mov	r1, sp
    2528:	f89d 0017 	ldrb.w	r0, [sp, #23]
    252c:	47b8      	blx	r7
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd))
    252e:	f89d 0000 	ldrb.w	r0, [sp]
    2532:	47b0      	blx	r6
    2534:	2800      	cmp	r0, #0
    2536:	d1eb      	bne.n	2510 <ModemRxTask+0xc>
				DEBUG_PRINT("ERROR: Command Parsing Failed");
    2538:	4808      	ldr	r0, [pc, #32]	; (255c <ModemRxTask+0x58>)
    253a:	4d09      	ldr	r5, [pc, #36]	; (2560 <ModemRxTask+0x5c>)
    253c:	47a8      	blx	r5
				DEBUG_PRINT("\r\nNot able to auto recover from connection failure...Rebooting....");
    253e:	4809      	ldr	r0, [pc, #36]	; (2564 <ModemRxTask+0x60>)
    2540:	47a8      	blx	r5
				DEBUG_PRINT("\r\n");
    2542:	4809      	ldr	r0, [pc, #36]	; (2568 <ModemRxTask+0x64>)
    2544:	47a8      	blx	r5
				requestWatchDogForcedReset();
    2546:	4b09      	ldr	r3, [pc, #36]	; (256c <ModemRxTask+0x68>)
    2548:	4798      	blx	r3
    254a:	e7e1      	b.n	2510 <ModemRxTask+0xc>
    254c:	00006a21 	.word	0x00006a21
    2550:	0000094d 	.word	0x0000094d
    2554:	00000a49 	.word	0x00000a49
    2558:	000029d5 	.word	0x000029d5
    255c:	00008c48 	.word	0x00008c48
    2560:	000026fd 	.word	0x000026fd
    2564:	00008c68 	.word	0x00008c68
    2568:	00008cd8 	.word	0x00008cd8
    256c:	00002a15 	.word	0x00002a15

00002570 <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
    2570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const TickType_t xDelayMs = pdMS_TO_TICKS(100UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
    2572:	2300      	movs	r3, #0
    2574:	461a      	mov	r2, r3
    2576:	4619      	mov	r1, r3
    2578:	481f      	ldr	r0, [pc, #124]	; (25f8 <ModemTxTask+0x88>)
    257a:	6800      	ldr	r0, [r0, #0]
    257c:	4c1f      	ldr	r4, [pc, #124]	; (25fc <ModemTxTask+0x8c>)
    257e:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    2580:	4c1f      	ldr	r4, [pc, #124]	; (2600 <ModemTxTask+0x90>)
	
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
		{
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    2582:	4d20      	ldr	r5, [pc, #128]	; (2604 <ModemTxTask+0x94>)
** Description:        Transmits Data to Modem
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	getModemCommandData(atCmd, &ModemCmdData);
    2584:	f105 0608 	add.w	r6, r5, #8
    2588:	e004      	b.n	2594 <ModemTxTask+0x24>
			kickWatchDog();
    258a:	4b1f      	ldr	r3, [pc, #124]	; (2608 <ModemTxTask+0x98>)
    258c:	4798      	blx	r3
			vTaskDelay(xDelayMs);
    258e:	2064      	movs	r0, #100	; 0x64
    2590:	4b1e      	ldr	r3, [pc, #120]	; (260c <ModemTxTask+0x9c>)
    2592:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
    2594:	47a0      	blx	r4
    2596:	2804      	cmp	r0, #4
    2598:	d1fc      	bne.n	2594 <ModemTxTask+0x24>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
    259a:	4b1d      	ldr	r3, [pc, #116]	; (2610 <ModemTxTask+0xa0>)
    259c:	6818      	ldr	r0, [r3, #0]
    259e:	4b1d      	ldr	r3, [pc, #116]	; (2614 <ModemTxTask+0xa4>)
    25a0:	4798      	blx	r3
    25a2:	2800      	cmp	r0, #0
    25a4:	d0f1      	beq.n	258a <ModemTxTask+0x1a>
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
    25a6:	2100      	movs	r1, #0
    25a8:	4b13      	ldr	r3, [pc, #76]	; (25f8 <ModemTxTask+0x88>)
    25aa:	6818      	ldr	r0, [r3, #0]
    25ac:	4b1a      	ldr	r3, [pc, #104]	; (2618 <ModemTxTask+0xa8>)
    25ae:	4798      	blx	r3
    25b0:	2801      	cmp	r0, #1
    25b2:	d1ea      	bne.n	258a <ModemTxTask+0x1a>
			xResult = xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, xMaxExpectedBlockTime);
    25b4:	2264      	movs	r2, #100	; 0x64
    25b6:	4629      	mov	r1, r5
    25b8:	4b15      	ldr	r3, [pc, #84]	; (2610 <ModemTxTask+0xa0>)
    25ba:	6818      	ldr	r0, [r3, #0]
    25bc:	4b17      	ldr	r3, [pc, #92]	; (261c <ModemTxTask+0xac>)
    25be:	4798      	blx	r3
			if(xResult == pdPASS)
    25c0:	2801      	cmp	r0, #1
    25c2:	d1e2      	bne.n	258a <ModemTxTask+0x1a>
				ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
    25c4:	786f      	ldrb	r7, [r5, #1]
	getModemCommandData(atCmd, &ModemCmdData);
    25c6:	4631      	mov	r1, r6
    25c8:	4638      	mov	r0, r7
    25ca:	4b15      	ldr	r3, [pc, #84]	; (2620 <ModemTxTask+0xb0>)
    25cc:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
    25ce:	4b15      	ldr	r3, [pc, #84]	; (2624 <ModemTxTask+0xb4>)
    25d0:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
    25d2:	7c29      	ldrb	r1, [r5, #16]
    25d4:	68e8      	ldr	r0, [r5, #12]
    25d6:	4b14      	ldr	r3, [pc, #80]	; (2628 <ModemTxTask+0xb8>)
    25d8:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
    25da:	4638      	mov	r0, r7
    25dc:	4b13      	ldr	r3, [pc, #76]	; (262c <ModemTxTask+0xbc>)
    25de:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
    25e0:	2000      	movs	r0, #0
    25e2:	4b13      	ldr	r3, [pc, #76]	; (2630 <ModemTxTask+0xc0>)
    25e4:	4798      	blx	r3
				xSemaphoreGive(AtTxQueueLoadSemaphore);				
    25e6:	2300      	movs	r3, #0
    25e8:	461a      	mov	r2, r3
    25ea:	4619      	mov	r1, r3
    25ec:	4802      	ldr	r0, [pc, #8]	; (25f8 <ModemTxTask+0x88>)
    25ee:	6800      	ldr	r0, [r0, #0]
    25f0:	4f02      	ldr	r7, [pc, #8]	; (25fc <ModemTxTask+0x8c>)
    25f2:	47b8      	blx	r7
    25f4:	e7c9      	b.n	258a <ModemTxTask+0x1a>
    25f6:	bf00      	nop
    25f8:	200034b0 	.word	0x200034b0
    25fc:	00005891 	.word	0x00005891
    2600:	00002139 	.word	0x00002139
    2604:	20000530 	.word	0x20000530
    2608:	000029d5 	.word	0x000029d5
    260c:	00006521 	.word	0x00006521
    2610:	200034a0 	.word	0x200034a0
    2614:	00005f09 	.word	0x00005f09
    2618:	00005d29 	.word	0x00005d29
    261c:	00005ba1 	.word	0x00005ba1
    2620:	0000094d 	.word	0x0000094d
    2624:	00001e85 	.word	0x00001e85
    2628:	00001e09 	.word	0x00001e09
    262c:	00000b3d 	.word	0x00000b3d
    2630:	00000b31 	.word	0x00000b31

00002634 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Application/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
    2634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2638:	4604      	mov	r4, r0
    263a:	460e      	mov	r6, r1
    263c:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
    263e:	4d0e      	ldr	r5, [pc, #56]	; (2678 <usart_async_write+0x44>)
    2640:	4620      	mov	r0, r4
    2642:	47a8      	blx	r5
    2644:	2800      	cmp	r0, #0
    2646:	d0fb      	beq.n	2640 <usart_async_write+0xc>
    2648:	3e01      	subs	r6, #1
    264a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 267c <usart_async_write+0x48>
    264e:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
    2650:	f8df a02c 	ldr.w	sl, [pc, #44]	; 2680 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
    2654:	4d08      	ldr	r5, [pc, #32]	; (2678 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
    2656:	7873      	ldrb	r3, [r6, #1]
    2658:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
    265c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    2660:	4620      	mov	r0, r4
    2662:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
    2664:	4620      	mov	r0, r4
    2666:	47a8      	blx	r5
    2668:	2800      	cmp	r0, #0
    266a:	d0fb      	beq.n	2664 <usart_async_write+0x30>
		;
	} while (++offset < length);
    266c:	3701      	adds	r7, #1
    266e:	454f      	cmp	r7, r9
    2670:	d3f1      	bcc.n	2656 <usart_async_write+0x22>

	return (int32_t)offset;
}
    2672:	4638      	mov	r0, r7
    2674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2678:	00004377 	.word	0x00004377
    267c:	2000054c 	.word	0x2000054c
    2680:	00004369 	.word	0x00004369

00002684 <SerialDebugTxByteSentCallBack>:
    2684:	2302      	movs	r3, #2
    2686:	7603      	strb	r3, [r0, #24]
    2688:	4770      	bx	lr

0000268a <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    268a:	2380      	movs	r3, #128	; 0x80
    268c:	7603      	strb	r3, [r0, #24]
    268e:	4770      	bx	lr

00002690 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
    2690:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
    2692:	4c05      	ldr	r4, [pc, #20]	; (26a8 <SerialDebugPrintInit+0x18>)
    2694:	4905      	ldr	r1, [pc, #20]	; (26ac <SerialDebugPrintInit+0x1c>)
    2696:	4620      	mov	r0, r4
    2698:	4b05      	ldr	r3, [pc, #20]	; (26b0 <SerialDebugPrintInit+0x20>)
    269a:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
    269c:	2201      	movs	r2, #1
    269e:	4611      	mov	r1, r2
    26a0:	4620      	mov	r0, r4
    26a2:	4b04      	ldr	r3, [pc, #16]	; (26b4 <SerialDebugPrintInit+0x24>)
    26a4:	4798      	blx	r3
    26a6:	bd10      	pop	{r4, pc}
    26a8:	20000040 	.word	0x20000040
    26ac:	43000400 	.word	0x43000400
    26b0:	000042e1 	.word	0x000042e1
    26b4:	0000438d 	.word	0x0000438d

000026b8 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
    26b8:	b570      	push	{r4, r5, r6, lr}
    26ba:	4605      	mov	r5, r0
    26bc:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
    26be:	4c05      	ldr	r4, [pc, #20]	; (26d4 <SerialDebugPrint+0x1c>)
    26c0:	4620      	mov	r0, r4
    26c2:	4b05      	ldr	r3, [pc, #20]	; (26d8 <SerialDebugPrint+0x20>)
    26c4:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
    26c6:	4632      	mov	r2, r6
    26c8:	4629      	mov	r1, r5
    26ca:	4620      	mov	r0, r4
    26cc:	4b03      	ldr	r3, [pc, #12]	; (26dc <SerialDebugPrint+0x24>)
    26ce:	4798      	blx	r3
    26d0:	bd70      	pop	{r4, r5, r6, pc}
    26d2:	bf00      	nop
    26d4:	20000040 	.word	0x20000040
    26d8:	00004355 	.word	0x00004355
    26dc:	00002635 	.word	0x00002635

000026e0 <SerialDebugTxDoneCallBack>:
{
    26e0:	b510      	push	{r4, lr}
    26e2:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    26e4:	2116      	movs	r1, #22
    26e6:	4803      	ldr	r0, [pc, #12]	; (26f4 <SerialDebugTxDoneCallBack+0x14>)
    26e8:	4b03      	ldr	r3, [pc, #12]	; (26f8 <SerialDebugTxDoneCallBack+0x18>)
    26ea:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    26ec:	2301      	movs	r3, #1
    26ee:	7623      	strb	r3, [r4, #24]
    26f0:	bd10      	pop	{r4, pc}
    26f2:	bf00      	nop
    26f4:	00008cac 	.word	0x00008cac
    26f8:	000026b9 	.word	0x000026b9

000026fc <SerialStringPrint>:
}

void SerialStringPrint(const uint8_t *const dataToPrint)
{
    26fc:	b570      	push	{r4, r5, r6, lr}
    26fe:	4605      	mov	r5, r0
	#ifdef SERIAL_DEBUG_ON
	
	uint8_t strLength;
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);
	uint8_t* dbgBuffer = NULL;
	strLength = strlen(dataToPrint);
    2700:	4b17      	ldr	r3, [pc, #92]	; (2760 <SerialStringPrint+0x64>)
    2702:	4798      	blx	r3
    2704:	4604      	mov	r4, r0

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    2706:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    270a:	4b16      	ldr	r3, [pc, #88]	; (2764 <SerialStringPrint+0x68>)
    270c:	6818      	ldr	r0, [r3, #0]
    270e:	4b16      	ldr	r3, [pc, #88]	; (2768 <SerialStringPrint+0x6c>)
    2710:	4798      	blx	r3
    2712:	2801      	cmp	r0, #1
    2714:	d000      	beq.n	2718 <SerialStringPrint+0x1c>
    2716:	bd70      	pop	{r4, r5, r6, pc}
    2718:	b2e4      	uxtb	r4, r4
    {
		dbgBuffer = (uint8_t*)pvPortMalloc((strLength)*(sizeof(uint8_t)));
    271a:	4620      	mov	r0, r4
    271c:	4b13      	ldr	r3, [pc, #76]	; (276c <SerialStringPrint+0x70>)
    271e:	4798      	blx	r3
		
		if(dbgBuffer != NULL)
    2720:	4606      	mov	r6, r0
    2722:	b1a0      	cbz	r0, 274e <SerialStringPrint+0x52>
		{
	    	memset(dbgBuffer,'\0',strLength);
    2724:	4622      	mov	r2, r4
    2726:	2100      	movs	r1, #0
    2728:	4b11      	ldr	r3, [pc, #68]	; (2770 <SerialStringPrint+0x74>)
    272a:	4798      	blx	r3
	    	sprintf((int8_t*)dbgBuffer,"%s",dataToPrint);
    272c:	4629      	mov	r1, r5
    272e:	4630      	mov	r0, r6
    2730:	4b10      	ldr	r3, [pc, #64]	; (2774 <SerialStringPrint+0x78>)
    2732:	4798      	blx	r3
	    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    2734:	4630      	mov	r0, r6
    2736:	4b0a      	ldr	r3, [pc, #40]	; (2760 <SerialStringPrint+0x64>)
    2738:	4798      	blx	r3
    273a:	b281      	uxth	r1, r0
    273c:	4630      	mov	r0, r6
    273e:	4c0e      	ldr	r4, [pc, #56]	; (2778 <SerialStringPrint+0x7c>)
    2740:	47a0      	blx	r4
			SerialDebugPrint("\r\n",2);
    2742:	2102      	movs	r1, #2
    2744:	480d      	ldr	r0, [pc, #52]	; (277c <SerialStringPrint+0x80>)
    2746:	47a0      	blx	r4
	    	vPortFree(dbgBuffer);			
    2748:	4630      	mov	r0, r6
    274a:	4b0d      	ldr	r3, [pc, #52]	; (2780 <SerialStringPrint+0x84>)
    274c:	4798      	blx	r3
		}
    	xSemaphoreGive(DebugPrintMutex);
    274e:	2300      	movs	r3, #0
    2750:	461a      	mov	r2, r3
    2752:	4619      	mov	r1, r3
    2754:	4803      	ldr	r0, [pc, #12]	; (2764 <SerialStringPrint+0x68>)
    2756:	6800      	ldr	r0, [r0, #0]
    2758:	4c0a      	ldr	r4, [pc, #40]	; (2784 <SerialStringPrint+0x88>)
    275a:	47a0      	blx	r4
    }
	
	#endif
}
    275c:	e7db      	b.n	2716 <SerialStringPrint+0x1a>
    275e:	bf00      	nop
    2760:	000072a5 	.word	0x000072a5
    2764:	200034a8 	.word	0x200034a8
    2768:	00005d29 	.word	0x00005d29
    276c:	00005495 	.word	0x00005495
    2770:	000070c5 	.word	0x000070c5
    2774:	00007295 	.word	0x00007295
    2778:	000026b9 	.word	0x000026b9
    277c:	00008cd8 	.word	0x00008cd8
    2780:	00005569 	.word	0x00005569
    2784:	00005891 	.word	0x00005891

00002788 <ConsoleDebugPrint>:

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
    2788:	b530      	push	{r4, r5, lr}
    278a:	b09b      	sub	sp, #108	; 0x6c
    278c:	4605      	mov	r5, r0
    278e:	460c      	mov	r4, r1
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    2790:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2794:	4b11      	ldr	r3, [pc, #68]	; (27dc <ConsoleDebugPrint+0x54>)
    2796:	6818      	ldr	r0, [r3, #0]
    2798:	4b11      	ldr	r3, [pc, #68]	; (27e0 <ConsoleDebugPrint+0x58>)
    279a:	4798      	blx	r3
    279c:	2801      	cmp	r0, #1
    279e:	d001      	beq.n	27a4 <ConsoleDebugPrint+0x1c>
    		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    	}
    	xSemaphoreGive(DebugPrintMutex);
    }
}
    27a0:	b01b      	add	sp, #108	; 0x6c
    27a2:	bd30      	pop	{r4, r5, pc}
    	memset(dbgBuffer,'\0',100);
    27a4:	2264      	movs	r2, #100	; 0x64
    27a6:	2100      	movs	r1, #0
    27a8:	a801      	add	r0, sp, #4
    27aa:	4b0e      	ldr	r3, [pc, #56]	; (27e4 <ConsoleDebugPrint+0x5c>)
    27ac:	4798      	blx	r3
    	if(intData != 0)
    27ae:	b93c      	cbnz	r4, 27c0 <ConsoleDebugPrint+0x38>
    	xSemaphoreGive(DebugPrintMutex);
    27b0:	2300      	movs	r3, #0
    27b2:	461a      	mov	r2, r3
    27b4:	4619      	mov	r1, r3
    27b6:	4809      	ldr	r0, [pc, #36]	; (27dc <ConsoleDebugPrint+0x54>)
    27b8:	6800      	ldr	r0, [r0, #0]
    27ba:	4c0b      	ldr	r4, [pc, #44]	; (27e8 <ConsoleDebugPrint+0x60>)
    27bc:	47a0      	blx	r4
}
    27be:	e7ef      	b.n	27a0 <ConsoleDebugPrint+0x18>
    		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    27c0:	4623      	mov	r3, r4
    27c2:	462a      	mov	r2, r5
    27c4:	4909      	ldr	r1, [pc, #36]	; (27ec <ConsoleDebugPrint+0x64>)
    27c6:	a801      	add	r0, sp, #4
    27c8:	4c09      	ldr	r4, [pc, #36]	; (27f0 <ConsoleDebugPrint+0x68>)
    27ca:	47a0      	blx	r4
    		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    27cc:	a801      	add	r0, sp, #4
    27ce:	4b09      	ldr	r3, [pc, #36]	; (27f4 <ConsoleDebugPrint+0x6c>)
    27d0:	4798      	blx	r3
    27d2:	b281      	uxth	r1, r0
    27d4:	a801      	add	r0, sp, #4
    27d6:	4b08      	ldr	r3, [pc, #32]	; (27f8 <ConsoleDebugPrint+0x70>)
    27d8:	4798      	blx	r3
    27da:	e7e9      	b.n	27b0 <ConsoleDebugPrint+0x28>
    27dc:	200034a8 	.word	0x200034a8
    27e0:	00005d29 	.word	0x00005d29
    27e4:	000070c5 	.word	0x000070c5
    27e8:	00005891 	.word	0x00005891
    27ec:	00008cd0 	.word	0x00008cd0
    27f0:	0000724d 	.word	0x0000724d
    27f4:	000072a5 	.word	0x000072a5
    27f8:	000026b9 	.word	0x000026b9

000027fc <printAdcValueToConsole>:

void printAdcValueToConsole(const uint8_t *const txt, uint32_t intData)
{
    27fc:	b530      	push	{r4, r5, lr}
    27fe:	b09b      	sub	sp, #108	; 0x6c
    2800:	4604      	mov	r4, r0
    2802:	460d      	mov	r5, r1
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    2804:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2808:	4b10      	ldr	r3, [pc, #64]	; (284c <printAdcValueToConsole+0x50>)
    280a:	6818      	ldr	r0, [r3, #0]
    280c:	4b10      	ldr	r3, [pc, #64]	; (2850 <printAdcValueToConsole+0x54>)
    280e:	4798      	blx	r3
    2810:	2801      	cmp	r0, #1
    2812:	d001      	beq.n	2818 <printAdcValueToConsole+0x1c>

    	sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    	xSemaphoreGive(DebugPrintMutex);
    }
}
    2814:	b01b      	add	sp, #108	; 0x6c
    2816:	bd30      	pop	{r4, r5, pc}
    	memset(dbgBuffer,'\0',100);
    2818:	2264      	movs	r2, #100	; 0x64
    281a:	2100      	movs	r1, #0
    281c:	a801      	add	r0, sp, #4
    281e:	4b0d      	ldr	r3, [pc, #52]	; (2854 <printAdcValueToConsole+0x58>)
    2820:	4798      	blx	r3
    	sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    2822:	462b      	mov	r3, r5
    2824:	4622      	mov	r2, r4
    2826:	490c      	ldr	r1, [pc, #48]	; (2858 <printAdcValueToConsole+0x5c>)
    2828:	a801      	add	r0, sp, #4
    282a:	4c0c      	ldr	r4, [pc, #48]	; (285c <printAdcValueToConsole+0x60>)
    282c:	47a0      	blx	r4
    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    282e:	a801      	add	r0, sp, #4
    2830:	4b0b      	ldr	r3, [pc, #44]	; (2860 <printAdcValueToConsole+0x64>)
    2832:	4798      	blx	r3
    2834:	b281      	uxth	r1, r0
    2836:	a801      	add	r0, sp, #4
    2838:	4b0a      	ldr	r3, [pc, #40]	; (2864 <printAdcValueToConsole+0x68>)
    283a:	4798      	blx	r3
    	xSemaphoreGive(DebugPrintMutex);
    283c:	2300      	movs	r3, #0
    283e:	461a      	mov	r2, r3
    2840:	4619      	mov	r1, r3
    2842:	4802      	ldr	r0, [pc, #8]	; (284c <printAdcValueToConsole+0x50>)
    2844:	6800      	ldr	r0, [r0, #0]
    2846:	4c08      	ldr	r4, [pc, #32]	; (2868 <printAdcValueToConsole+0x6c>)
    2848:	47a0      	blx	r4
}
    284a:	e7e3      	b.n	2814 <printAdcValueToConsole+0x18>
    284c:	200034a8 	.word	0x200034a8
    2850:	00005d29 	.word	0x00005d29
    2854:	000070c5 	.word	0x000070c5
    2858:	00008cd0 	.word	0x00008cd0
    285c:	0000724d 	.word	0x0000724d
    2860:	000072a5 	.word	0x000072a5
    2864:	000026b9 	.word	0x000026b9
    2868:	00005891 	.word	0x00005891

0000286c <printVoltageToConsole>:

void printVoltageToConsole(const uint8_t *const txt, uint32_t intData)
{
    286c:	b530      	push	{r4, r5, lr}
    286e:	b09b      	sub	sp, #108	; 0x6c
    2870:	4604      	mov	r4, r0
    2872:	460d      	mov	r5, r1
	const TickType_t printDelayMs = pdMS_TO_TICKS(500UL);

    if( xSemaphoreTake( DebugPrintMutex,printDelayMs) == pdTRUE )
    2874:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2878:	4b10      	ldr	r3, [pc, #64]	; (28bc <printVoltageToConsole+0x50>)
    287a:	6818      	ldr	r0, [r3, #0]
    287c:	4b10      	ldr	r3, [pc, #64]	; (28c0 <printVoltageToConsole+0x54>)
    287e:	4798      	blx	r3
    2880:	2801      	cmp	r0, #1
    2882:	d001      	beq.n	2888 <printVoltageToConsole+0x1c>

    	sprintf((int8_t*)dbgBuffer,"%s - %dmV \r\n",txt,intData);
    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    	xSemaphoreGive(DebugPrintMutex);
    }
}
    2884:	b01b      	add	sp, #108	; 0x6c
    2886:	bd30      	pop	{r4, r5, pc}
    	memset(dbgBuffer,'\0',100);
    2888:	2264      	movs	r2, #100	; 0x64
    288a:	2100      	movs	r1, #0
    288c:	a801      	add	r0, sp, #4
    288e:	4b0d      	ldr	r3, [pc, #52]	; (28c4 <printVoltageToConsole+0x58>)
    2890:	4798      	blx	r3
    	sprintf((int8_t*)dbgBuffer,"%s - %dmV \r\n",txt,intData);
    2892:	462b      	mov	r3, r5
    2894:	4622      	mov	r2, r4
    2896:	490c      	ldr	r1, [pc, #48]	; (28c8 <printVoltageToConsole+0x5c>)
    2898:	a801      	add	r0, sp, #4
    289a:	4c0c      	ldr	r4, [pc, #48]	; (28cc <printVoltageToConsole+0x60>)
    289c:	47a0      	blx	r4
    	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    289e:	a801      	add	r0, sp, #4
    28a0:	4b0b      	ldr	r3, [pc, #44]	; (28d0 <printVoltageToConsole+0x64>)
    28a2:	4798      	blx	r3
    28a4:	b281      	uxth	r1, r0
    28a6:	a801      	add	r0, sp, #4
    28a8:	4b0a      	ldr	r3, [pc, #40]	; (28d4 <printVoltageToConsole+0x68>)
    28aa:	4798      	blx	r3
    	xSemaphoreGive(DebugPrintMutex);
    28ac:	2300      	movs	r3, #0
    28ae:	461a      	mov	r2, r3
    28b0:	4619      	mov	r1, r3
    28b2:	4802      	ldr	r0, [pc, #8]	; (28bc <printVoltageToConsole+0x50>)
    28b4:	6800      	ldr	r0, [r0, #0]
    28b6:	4c08      	ldr	r4, [pc, #32]	; (28d8 <printVoltageToConsole+0x6c>)
    28b8:	47a0      	blx	r4
}
    28ba:	e7e3      	b.n	2884 <printVoltageToConsole+0x18>
    28bc:	200034a8 	.word	0x200034a8
    28c0:	00005d29 	.word	0x00005d29
    28c4:	000070c5 	.word	0x000070c5
    28c8:	00008cdc 	.word	0x00008cdc
    28cc:	0000724d 	.word	0x0000724d
    28d0:	000072a5 	.word	0x000072a5
    28d4:	000026b9 	.word	0x000026b9
    28d8:	00005891 	.word	0x00005891

000028dc <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    28dc:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    28de:	2204      	movs	r2, #4
    28e0:	4b0b      	ldr	r3, [pc, #44]	; (2910 <SERCOM5_2_Handler+0x34>)
    28e2:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    28e4:	4d0b      	ldr	r5, [pc, #44]	; (2914 <SERCOM5_2_Handler+0x38>)
    28e6:	4c0c      	ldr	r4, [pc, #48]	; (2918 <SERCOM5_2_Handler+0x3c>)
    28e8:	4628      	mov	r0, r5
    28ea:	47a0      	blx	r4
    28ec:	2800      	cmp	r0, #0
    28ee:	d0fb      	beq.n	28e8 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    28f0:	4808      	ldr	r0, [pc, #32]	; (2914 <SERCOM5_2_Handler+0x38>)
    28f2:	4b0a      	ldr	r3, [pc, #40]	; (291c <SERCOM5_2_Handler+0x40>)
    28f4:	4798      	blx	r3
    28f6:	490a      	ldr	r1, [pc, #40]	; (2920 <SERCOM5_2_Handler+0x44>)
    28f8:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    28fa:	2300      	movs	r3, #0
    28fc:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    28fe:	4c09      	ldr	r4, [pc, #36]	; (2924 <SERCOM5_2_Handler+0x48>)
    2900:	4620      	mov	r0, r4
    2902:	4b09      	ldr	r3, [pc, #36]	; (2928 <SERCOM5_2_Handler+0x4c>)
    2904:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    2906:	2105      	movs	r1, #5
    2908:	4620      	mov	r0, r4
    290a:	4b08      	ldr	r3, [pc, #32]	; (292c <SERCOM5_2_Handler+0x50>)
    290c:	4798      	blx	r3
    290e:	bd38      	pop	{r3, r4, r5, pc}
    2910:	43000400 	.word	0x43000400
    2914:	20000040 	.word	0x20000040
    2918:	00004381 	.word	0x00004381
    291c:	0000436f 	.word	0x0000436f
    2920:	20003cd0 	.word	0x20003cd0
    2924:	20003cd4 	.word	0x20003cd4
    2928:	00007295 	.word	0x00007295
    292c:	000026b9 	.word	0x000026b9

00002930 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    2930:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    2932:	4b0a      	ldr	r3, [pc, #40]	; (295c <configureWatchDogTimeOut+0x2c>)
    2934:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2938:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    293a:	4c09      	ldr	r4, [pc, #36]	; (2960 <configureWatchDogTimeOut+0x30>)
    293c:	6820      	ldr	r0, [r4, #0]
    293e:	2279      	movs	r2, #121	; 0x79
    2940:	4908      	ldr	r1, [pc, #32]	; (2964 <configureWatchDogTimeOut+0x34>)
    2942:	3000      	adds	r0, #0
    2944:	bf18      	it	ne
    2946:	2001      	movne	r0, #1
    2948:	4b07      	ldr	r3, [pc, #28]	; (2968 <configureWatchDogTimeOut+0x38>)
    294a:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    294c:	462a      	mov	r2, r5
    294e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    2952:	4620      	mov	r0, r4
    2954:	4b05      	ldr	r3, [pc, #20]	; (296c <configureWatchDogTimeOut+0x3c>)
    2956:	4798      	blx	r3
    2958:	bd38      	pop	{r3, r4, r5, pc}
    295a:	bf00      	nop
    295c:	2000005c 	.word	0x2000005c
    2960:	20003db0 	.word	0x20003db0
    2964:	00008cec 	.word	0x00008cec
    2968:	000036d5 	.word	0x000036d5
    296c:	00004d2d 	.word	0x00004d2d

00002970 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    2970:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    2972:	2002      	movs	r0, #2
    2974:	4b07      	ldr	r3, [pc, #28]	; (2994 <enableWatchDogTimer+0x24>)
    2976:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    2978:	4c07      	ldr	r4, [pc, #28]	; (2998 <enableWatchDogTimer+0x28>)
    297a:	6820      	ldr	r0, [r4, #0]
    297c:	2296      	movs	r2, #150	; 0x96
    297e:	4907      	ldr	r1, [pc, #28]	; (299c <enableWatchDogTimer+0x2c>)
    2980:	3000      	adds	r0, #0
    2982:	bf18      	it	ne
    2984:	2001      	movne	r0, #1
    2986:	4b06      	ldr	r3, [pc, #24]	; (29a0 <enableWatchDogTimer+0x30>)
    2988:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    298a:	4620      	mov	r0, r4
    298c:	4b05      	ldr	r3, [pc, #20]	; (29a4 <enableWatchDogTimer+0x34>)
    298e:	4798      	blx	r3
    2990:	bd10      	pop	{r4, pc}
    2992:	bf00      	nop
    2994:	00002931 	.word	0x00002931
    2998:	20003db0 	.word	0x20003db0
    299c:	00008cec 	.word	0x00008cec
    29a0:	000036d5 	.word	0x000036d5
    29a4:	00004e49 	.word	0x00004e49

000029a8 <atmel_start_init>:
{
    29a8:	b508      	push	{r3, lr}
    system_init();
    29aa:	4b06      	ldr	r3, [pc, #24]	; (29c4 <atmel_start_init+0x1c>)
    29ac:	4798      	blx	r3
    delay_ms(1000);
    29ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    29b2:	4b05      	ldr	r3, [pc, #20]	; (29c8 <atmel_start_init+0x20>)
    29b4:	4798      	blx	r3
    ForcedResetRequested = WDT_FORCED_RESET_OFF;
    29b6:	2201      	movs	r2, #1
    29b8:	4b04      	ldr	r3, [pc, #16]	; (29cc <atmel_start_init+0x24>)
    29ba:	731a      	strb	r2, [r3, #12]
    enableWatchDogTimer();
    29bc:	4b04      	ldr	r3, [pc, #16]	; (29d0 <atmel_start_init+0x28>)
    29be:	4798      	blx	r3
    29c0:	bd08      	pop	{r3, pc}
    29c2:	bf00      	nop
    29c4:	00003171 	.word	0x00003171
    29c8:	0000347d 	.word	0x0000347d
    29cc:	2000005c 	.word	0x2000005c
    29d0:	00002971 	.word	0x00002971

000029d4 <kickWatchDog>:
********************************************************************************/
int32_t kickWatchDog(void)
{	
	int32_t status = ERR_NONE;

	if(WDT_FORCED_RESET_OFF == ForcedResetRequested)
    29d4:	4b0a      	ldr	r3, [pc, #40]	; (2a00 <kickWatchDog+0x2c>)
    29d6:	7b1b      	ldrb	r3, [r3, #12]
    29d8:	2b01      	cmp	r3, #1
    29da:	d10d      	bne.n	29f8 <kickWatchDog+0x24>
{	
    29dc:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    29de:	4c09      	ldr	r4, [pc, #36]	; (2a04 <kickWatchDog+0x30>)
    29e0:	6820      	ldr	r0, [r4, #0]
    29e2:	22b3      	movs	r2, #179	; 0xb3
    29e4:	4908      	ldr	r1, [pc, #32]	; (2a08 <kickWatchDog+0x34>)
    29e6:	3000      	adds	r0, #0
    29e8:	bf18      	it	ne
    29ea:	2001      	movne	r0, #1
    29ec:	4b07      	ldr	r3, [pc, #28]	; (2a0c <kickWatchDog+0x38>)
    29ee:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    29f0:	4620      	mov	r0, r4
    29f2:	4b07      	ldr	r3, [pc, #28]	; (2a10 <kickWatchDog+0x3c>)
    29f4:	4798      	blx	r3
    29f6:	bd10      	pop	{r4, pc}
	{
		status = wdt_feed(&WDT_0);
	}
	else
	{
		status = ERR_DENIED;
    29f8:	f06f 0010 	mvn.w	r0, #16
	}

	return status;
    29fc:	4770      	bx	lr
    29fe:	bf00      	nop
    2a00:	2000005c 	.word	0x2000005c
    2a04:	20003db0 	.word	0x20003db0
    2a08:	00008cec 	.word	0x00008cec
    2a0c:	000036d5 	.word	0x000036d5
    2a10:	00004ed5 	.word	0x00004ed5

00002a14 <requestWatchDogForcedReset>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
void requestWatchDogForcedReset(void)
{
    2a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DEBUG_PRINT("\r\n");
    2a16:	4810      	ldr	r0, [pc, #64]	; (2a58 <requestWatchDogForcedReset+0x44>)
    2a18:	4b10      	ldr	r3, [pc, #64]	; (2a5c <requestWatchDogForcedReset+0x48>)
    2a1a:	4798      	blx	r3
	DEBUG_PRINT("#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*");
    2a1c:	2700      	movs	r7, #0
    2a1e:	4b10      	ldr	r3, [pc, #64]	; (2a60 <requestWatchDogForcedReset+0x4c>)
    2a20:	731f      	strb	r7, [r3, #12]
	ASSERT(wdt && wdt->dev.hw);
    2a22:	4e10      	ldr	r6, [pc, #64]	; (2a64 <requestWatchDogForcedReset+0x50>)
    2a24:	4c10      	ldr	r4, [pc, #64]	; (2a68 <requestWatchDogForcedReset+0x54>)
    2a26:	6820      	ldr	r0, [r4, #0]
    2a28:	22a5      	movs	r2, #165	; 0xa5
    2a2a:	4631      	mov	r1, r6
    2a2c:	1bc0      	subs	r0, r0, r7
    2a2e:	bf18      	it	ne
    2a30:	2001      	movne	r0, #1
    2a32:	4d0e      	ldr	r5, [pc, #56]	; (2a6c <requestWatchDogForcedReset+0x58>)
    2a34:	47a8      	blx	r5
	return _wdt_disable(&wdt->dev);
    2a36:	4620      	mov	r0, r4
    2a38:	4b0d      	ldr	r3, [pc, #52]	; (2a70 <requestWatchDogForcedReset+0x5c>)
    2a3a:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
	ForcedResetRequested = WDT_FORCED_RESET_ON;
    2a3c:	4638      	mov	r0, r7
    2a3e:	4b0d      	ldr	r3, [pc, #52]	; (2a74 <requestWatchDogForcedReset+0x60>)
    2a40:	4798      	blx	r3
	ASSERT(wdt && wdt->dev.hw);
    2a42:	6820      	ldr	r0, [r4, #0]
    2a44:	2296      	movs	r2, #150	; 0x96
    2a46:	4631      	mov	r1, r6
    2a48:	1bc0      	subs	r0, r0, r7
    2a4a:	bf18      	it	ne
    2a4c:	2001      	movne	r0, #1
    2a4e:	47a8      	blx	r5
	return _wdt_enable(&wdt->dev);
    2a50:	4620      	mov	r0, r4
    2a52:	4b09      	ldr	r3, [pc, #36]	; (2a78 <requestWatchDogForcedReset+0x64>)
    2a54:	4798      	blx	r3
    2a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a58:	00008d08 	.word	0x00008d08
    2a5c:	000026fd 	.word	0x000026fd
    2a60:	2000005c 	.word	0x2000005c
    2a64:	00008cec 	.word	0x00008cec
    2a68:	20003db0 	.word	0x20003db0
    2a6c:	000036d5 	.word	0x000036d5
    2a70:	00004e85 	.word	0x00004e85
    2a74:	00002931 	.word	0x00002931
    2a78:	00004e49 	.word	0x00004e49

00002a7c <Dummy_Handler>:
}

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
    2a7c:	e7fe      	b.n	2a7c <Dummy_Handler>
	...

00002a80 <Reset_Handler>:
void Reset_Handler(void)
    2a80:	b508      	push	{r3, lr}

    2a82:	4b1c      	ldr	r3, [pc, #112]	; (2af4 <Reset_Handler+0x74>)
    2a84:	4a1c      	ldr	r2, [pc, #112]	; (2af8 <Reset_Handler+0x78>)
    2a86:	429a      	cmp	r2, r3
    2a88:	d010      	beq.n	2aac <Reset_Handler+0x2c>
        if (pSrc != pDest) {
    2a8a:	4b1c      	ldr	r3, [pc, #112]	; (2afc <Reset_Handler+0x7c>)
    2a8c:	4a19      	ldr	r2, [pc, #100]	; (2af4 <Reset_Handler+0x74>)
    2a8e:	429a      	cmp	r2, r3
    2a90:	d20c      	bcs.n	2aac <Reset_Handler+0x2c>
    2a92:	3b01      	subs	r3, #1
    2a94:	1a9b      	subs	r3, r3, r2
    2a96:	f023 0303 	bic.w	r3, r3, #3
    2a9a:	3304      	adds	r3, #4
    2a9c:	4413      	add	r3, r2
    2a9e:	4916      	ldr	r1, [pc, #88]	; (2af8 <Reset_Handler+0x78>)
                for (; pDest < &_erelocate;) {
    2aa0:	f851 0b04 	ldr.w	r0, [r1], #4
    2aa4:	f842 0b04 	str.w	r0, [r2], #4
        if (pSrc != pDest) {
    2aa8:	429a      	cmp	r2, r3
    2aaa:	d1f9      	bne.n	2aa0 <Reset_Handler+0x20>
        /* Clear the zero segment */
    2aac:	4b14      	ldr	r3, [pc, #80]	; (2b00 <Reset_Handler+0x80>)
    2aae:	4a15      	ldr	r2, [pc, #84]	; (2b04 <Reset_Handler+0x84>)
    2ab0:	429a      	cmp	r2, r3
    2ab2:	d20a      	bcs.n	2aca <Reset_Handler+0x4a>
    2ab4:	3b01      	subs	r3, #1
    2ab6:	1a9b      	subs	r3, r3, r2
    2ab8:	f023 0303 	bic.w	r3, r3, #3
    2abc:	3304      	adds	r3, #4
    2abe:	4413      	add	r3, r2
        for (pDest = &_szero; pDest < &_ezero;) {
    2ac0:	2100      	movs	r1, #0
    2ac2:	f842 1b04 	str.w	r1, [r2], #4
        /* Clear the zero segment */
    2ac6:	4293      	cmp	r3, r2
    2ac8:	d1fb      	bne.n	2ac2 <Reset_Handler+0x42>
        pSrc = (uint32_t *) & _sfixed;
    2aca:	4b0f      	ldr	r3, [pc, #60]	; (2b08 <Reset_Handler+0x88>)
    2acc:	4a0f      	ldr	r2, [pc, #60]	; (2b0c <Reset_Handler+0x8c>)
    2ace:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2ad2:	609a      	str	r2, [r3, #8]
        /* Enable FPU */
    2ad4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2ad8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    2adc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2ae0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ae4:	f3bf 8f6f 	isb	sy
        /* Initialize the C library */
    2ae8:	4b09      	ldr	r3, [pc, #36]	; (2b10 <Reset_Handler+0x90>)
    2aea:	4798      	blx	r3
        /* Branch to main function */
    2aec:	4b09      	ldr	r3, [pc, #36]	; (2b14 <Reset_Handler+0x94>)
    2aee:	4798      	blx	r3
    2af0:	e7fe      	b.n	2af0 <Reset_Handler+0x70>
    2af2:	bf00      	nop
    2af4:	20000000 	.word	0x20000000
    2af8:	000093d0 	.word	0x000093d0
    2afc:	20000190 	.word	0x20000190
    2b00:	20003e9c 	.word	0x20003e9c
    2b04:	20000190 	.word	0x20000190
    2b08:	e000ed00 	.word	0xe000ed00
    2b0c:	00000000 	.word	0x00000000
    2b10:	00007015 	.word	0x00007015
    2b14:	00004f7d 	.word	0x00004f7d

00002b18 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
    2b18:	4a04      	ldr	r2, [pc, #16]	; (2b2c <AC_0_CLOCK_init+0x14>)
    2b1a:	69d3      	ldr	r3, [r2, #28]
    2b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2b20:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    2b22:	2240      	movs	r2, #64	; 0x40
    2b24:	4b02      	ldr	r3, [pc, #8]	; (2b30 <AC_0_CLOCK_init+0x18>)
    2b26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2b2a:	4770      	bx	lr
    2b2c:	40000800 	.word	0x40000800
    2b30:	40001c00 	.word	0x40001c00

00002b34 <AC_0_init>:
{

	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

    2b34:	b508      	push	{r3, lr}
void AC_0_init(void)
    2b36:	4b03      	ldr	r3, [pc, #12]	; (2b44 <AC_0_init+0x10>)
    2b38:	4798      	blx	r3
{
    2b3a:	4903      	ldr	r1, [pc, #12]	; (2b48 <AC_0_init+0x14>)
    2b3c:	4803      	ldr	r0, [pc, #12]	; (2b4c <AC_0_init+0x18>)
    2b3e:	4b04      	ldr	r3, [pc, #16]	; (2b50 <AC_0_init+0x1c>)
    2b40:	4798      	blx	r3
    2b42:	bd08      	pop	{r3, pc}
    2b44:	00002b19 	.word	0x00002b19
    2b48:	42002000 	.word	0x42002000
    2b4c:	20003d7c 	.word	0x20003d7c
    2b50:	00003281 	.word	0x00003281

00002b54 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2b54:	4b5d      	ldr	r3, [pc, #372]	; (2ccc <ADC_0_PORT_init+0x178>)
    2b56:	2204      	movs	r2, #4
    2b58:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b5a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2b5e:	629a      	str	r2, [r3, #40]	; 0x28
    2b60:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    2b64:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b66:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b6a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2b6e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b72:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2b76:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2b7a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2b7e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2b82:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2b86:	2108      	movs	r1, #8
    2b88:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b8a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2b8e:	6299      	str	r1, [r3, #40]	; 0x28
    2b90:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b92:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b96:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2b9a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b9e:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2ba2:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2ba6:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2baa:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2bae:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
    2bb6:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2bba:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2bbe:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    2bc2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2bc6:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    2bca:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2bce:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2bd2:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2bd6:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2bda:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2bde:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2be2:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2be6:	f44f 7100 	mov.w	r1, #512	; 0x200
    2bea:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2bee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2bf2:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    2bf6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2bfa:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    2bfe:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2c02:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c06:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2c0a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2c0e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2c12:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2c16:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2c1a:	2110      	movs	r1, #16
    2c1c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c1e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2c22:	6299      	str	r1, [r3, #40]	; 0x28
    2c24:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c26:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c2a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2c2e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c32:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2c36:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2c3a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2c3e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2c42:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2c46:	2120      	movs	r1, #32
    2c48:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c4a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2c4e:	6299      	str	r1, [r3, #40]	; 0x28
    2c50:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c52:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c56:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2c5a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c5e:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2c62:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2c66:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2c6a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2c6e:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2c72:	2140      	movs	r1, #64	; 0x40
    2c74:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c76:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2c7a:	6299      	str	r1, [r3, #40]	; 0x28
    2c7c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c7e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c82:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2c86:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c8a:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2c8e:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2c92:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2c96:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2c9a:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2c9e:	2180      	movs	r1, #128	; 0x80
    2ca0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ca2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2ca6:	6299      	str	r1, [r3, #40]	; 0x28
    2ca8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2caa:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    2cae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2cb2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2cb6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2cba:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2cbe:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2cc2:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2cc6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    2cca:	4770      	bx	lr
    2ccc:	41008000 	.word	0x41008000

00002cd0 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    2cd0:	4a04      	ldr	r2, [pc, #16]	; (2ce4 <ADC_0_CLOCK_init+0x14>)
    2cd2:	6a13      	ldr	r3, [r2, #32]
    2cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2cd8:	6213      	str	r3, [r2, #32]
    2cda:	2241      	movs	r2, #65	; 0x41
    2cdc:	4b02      	ldr	r3, [pc, #8]	; (2ce8 <ADC_0_CLOCK_init+0x18>)
    2cde:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2ce2:	4770      	bx	lr
    2ce4:	40000800 	.word	0x40000800
    2ce8:	40001c00 	.word	0x40001c00

00002cec <ADC_0_init>:
void ADC_0_CLOCK_init(void)
{
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

    2cec:	b508      	push	{r3, lr}
void ADC_0_init(void)
    2cee:	4b05      	ldr	r3, [pc, #20]	; (2d04 <ADC_0_init+0x18>)
    2cf0:	4798      	blx	r3
{
    2cf2:	4b05      	ldr	r3, [pc, #20]	; (2d08 <ADC_0_init+0x1c>)
    2cf4:	4798      	blx	r3
	ADC_0_CLOCK_init();
    2cf6:	2200      	movs	r2, #0
    2cf8:	4904      	ldr	r1, [pc, #16]	; (2d0c <ADC_0_init+0x20>)
    2cfa:	4805      	ldr	r0, [pc, #20]	; (2d10 <ADC_0_init+0x24>)
    2cfc:	4b05      	ldr	r3, [pc, #20]	; (2d14 <ADC_0_init+0x28>)
    2cfe:	4798      	blx	r3
    2d00:	bd08      	pop	{r3, pc}
    2d02:	bf00      	nop
    2d04:	00002cd1 	.word	0x00002cd1
    2d08:	00002b55 	.word	0x00002b55
    2d0c:	43001c00 	.word	0x43001c00
    2d10:	20003d8c 	.word	0x20003d8c
    2d14:	000032b1 	.word	0x000032b1

00002d18 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    2d18:	4a04      	ldr	r2, [pc, #16]	; (2d2c <DAC_0_CLOCK_init+0x14>)
    2d1a:	6a13      	ldr	r3, [r2, #32]
    2d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2d20:	6213      	str	r3, [r2, #32]
    2d22:	2240      	movs	r2, #64	; 0x40
    2d24:	4b02      	ldr	r3, [pc, #8]	; (2d30 <DAC_0_CLOCK_init+0x18>)
    2d26:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    2d2a:	4770      	bx	lr
    2d2c:	40000800 	.word	0x40000800
    2d30:	40001c00 	.word	0x40001c00

00002d34 <DAC_0_init>:
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
}

void DAC_0_PORT_init(void)
{
}
    2d34:	b508      	push	{r3, lr}

    2d36:	4b03      	ldr	r3, [pc, #12]	; (2d44 <DAC_0_init+0x10>)
    2d38:	4798      	blx	r3
void DAC_0_CLOCK_init(void)
    2d3a:	4903      	ldr	r1, [pc, #12]	; (2d48 <DAC_0_init+0x14>)
    2d3c:	4803      	ldr	r0, [pc, #12]	; (2d4c <DAC_0_init+0x18>)
    2d3e:	4b04      	ldr	r3, [pc, #16]	; (2d50 <DAC_0_init+0x1c>)
    2d40:	4798      	blx	r3
    2d42:	bd08      	pop	{r3, pc}
    2d44:	00002d19 	.word	0x00002d19
    2d48:	43002400 	.word	0x43002400
    2d4c:	20003db4 	.word	0x20003db4
    2d50:	00003429 	.word	0x00003429

00002d54 <EXTERNAL_IRQ_0_init>:
{

	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}
    2d54:	b508      	push	{r3, lr}
    2d56:	2240      	movs	r2, #64	; 0x40
    2d58:	4b05      	ldr	r3, [pc, #20]	; (2d70 <EXTERNAL_IRQ_0_init+0x1c>)
    2d5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    2d5e:	4a05      	ldr	r2, [pc, #20]	; (2d74 <EXTERNAL_IRQ_0_init+0x20>)
    2d60:	6953      	ldr	r3, [r2, #20]
    2d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2d66:	6153      	str	r3, [r2, #20]

void DAC_0_init(void)
{
	DAC_0_CLOCK_init();
    2d68:	4b03      	ldr	r3, [pc, #12]	; (2d78 <EXTERNAL_IRQ_0_init+0x24>)
    2d6a:	4798      	blx	r3
    2d6c:	bd08      	pop	{r3, pc}
    2d6e:	bf00      	nop
    2d70:	40001c00 	.word	0x40001c00
    2d74:	40000800 	.word	0x40000800
    2d78:	000034e1 	.word	0x000034e1

00002d7c <EVENT_SYSTEM_0_init>:
	dac_sync_init(&DAC_0, DAC);
	DAC_0_PORT_init();
}

    2d7c:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    2d7e:	4a04      	ldr	r2, [pc, #16]	; (2d90 <EVENT_SYSTEM_0_init+0x14>)
    2d80:	6993      	ldr	r3, [r2, #24]
    2d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2d86:	6193      	str	r3, [r2, #24]
void EXTERNAL_IRQ_0_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2d88:	4b02      	ldr	r3, [pc, #8]	; (2d94 <EVENT_SYSTEM_0_init+0x18>)
    2d8a:	4798      	blx	r3
    2d8c:	bd08      	pop	{r3, pc}
    2d8e:	bf00      	nop
    2d90:	40000800 	.word	0x40000800
    2d94:	0000349d 	.word	0x0000349d

00002d98 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    2d98:	4a02      	ldr	r2, [pc, #8]	; (2da4 <FLASH_0_CLOCK_init+0xc>)
    2d9a:	6913      	ldr	r3, [r2, #16]
    2d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2da0:	6113      	str	r3, [r2, #16]
    2da2:	4770      	bx	lr
    2da4:	40000800 	.word	0x40000800

00002da8 <FLASH_0_init>:

void EVENT_SYSTEM_0_init(void)
{

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    2da8:	b508      	push	{r3, lr}
}
    2daa:	4b03      	ldr	r3, [pc, #12]	; (2db8 <FLASH_0_init+0x10>)
    2dac:	4798      	blx	r3

    2dae:	4903      	ldr	r1, [pc, #12]	; (2dbc <FLASH_0_init+0x14>)
    2db0:	4803      	ldr	r0, [pc, #12]	; (2dc0 <FLASH_0_init+0x18>)
    2db2:	4b04      	ldr	r3, [pc, #16]	; (2dc4 <FLASH_0_init+0x1c>)
    2db4:	4798      	blx	r3
    2db6:	bd08      	pop	{r3, pc}
    2db8:	00002d99 	.word	0x00002d99
    2dbc:	41004000 	.word	0x41004000
    2dc0:	20003d40 	.word	0x20003d40
    2dc4:	00003519 	.word	0x00003519

00002dc8 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2dc8:	4b10      	ldr	r3, [pc, #64]	; (2e0c <ModemData_PORT_init+0x44>)
    2dca:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    2dce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2dd2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2dda:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2dde:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2de2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2dea:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    2dee:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2df2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2df6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2dfa:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2dfe:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    2e02:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    2e0a:	4770      	bx	lr
    2e0c:	41008000 	.word	0x41008000

00002e10 <ModemData_CLOCK_init>:
    2e10:	4b06      	ldr	r3, [pc, #24]	; (2e2c <ModemData_CLOCK_init+0x1c>)
    2e12:	2240      	movs	r2, #64	; 0x40
    2e14:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    2e18:	224a      	movs	r2, #74	; 0x4a
    2e1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    2e1e:	4a04      	ldr	r2, [pc, #16]	; (2e30 <ModemData_CLOCK_init+0x20>)
    2e20:	6993      	ldr	r3, [r2, #24]
    2e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2e26:	6193      	str	r3, [r2, #24]
    2e28:	4770      	bx	lr
    2e2a:	bf00      	nop
    2e2c:	40001c00 	.word	0x40001c00
    2e30:	40000800 	.word	0x40000800

00002e34 <ModemData_init>:
{
	gpio_set_pin_function(PA17, PINMUX_PA17D_SERCOM3_PAD0);

	gpio_set_pin_function(PA18, PINMUX_PA18D_SERCOM3_PAD2);
}

    2e34:	b508      	push	{r3, lr}
void ModemData_CLOCK_init(void)
    2e36:	4b03      	ldr	r3, [pc, #12]	; (2e44 <ModemData_init+0x10>)
    2e38:	4798      	blx	r3
{
    2e3a:	4b03      	ldr	r3, [pc, #12]	; (2e48 <ModemData_init+0x14>)
    2e3c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM3_GCLK_ID_SLOW, CONF_GCLK_SERCOM3_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

    2e3e:	4b03      	ldr	r3, [pc, #12]	; (2e4c <ModemData_init+0x18>)
    2e40:	4798      	blx	r3
    2e42:	bd08      	pop	{r3, pc}
    2e44:	00002e11 	.word	0x00002e11
    2e48:	00001cf5 	.word	0x00001cf5
    2e4c:	00002dc9 	.word	0x00002dc9

00002e50 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e50:	4b10      	ldr	r3, [pc, #64]	; (2e94 <SerialDebug_PORT_init+0x44>)
    2e52:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2e5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e5e:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e62:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2e66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2e6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2e6e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2e72:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2e7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2e7e:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2e82:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2e86:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    2e8a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2e8e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    2e92:	4770      	bx	lr
    2e94:	41008000 	.word	0x41008000

00002e98 <SerialDebug_CLOCK_init>:
    2e98:	4b06      	ldr	r3, [pc, #24]	; (2eb4 <SerialDebug_CLOCK_init+0x1c>)
    2e9a:	2240      	movs	r2, #64	; 0x40
    2e9c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    2ea0:	224a      	movs	r2, #74	; 0x4a
    2ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    2ea6:	4a04      	ldr	r2, [pc, #16]	; (2eb8 <SerialDebug_CLOCK_init+0x20>)
    2ea8:	6a13      	ldr	r3, [r2, #32]
    2eaa:	f043 0302 	orr.w	r3, r3, #2
    2eae:	6213      	str	r3, [r2, #32]
    2eb0:	4770      	bx	lr
    2eb2:	bf00      	nop
    2eb4:	40001c00 	.word	0x40001c00
    2eb8:	40000800 	.word	0x40000800

00002ebc <SerialDebug_init>:

	gpio_set_pin_function(PA23, PINMUX_PA23D_SERCOM5_PAD0);

	gpio_set_pin_function(PB23, PINMUX_PB23D_SERCOM5_PAD3);
}

    2ebc:	b508      	push	{r3, lr}
void SerialDebug_CLOCK_init(void)
    2ebe:	4b03      	ldr	r3, [pc, #12]	; (2ecc <SerialDebug_init+0x10>)
    2ec0:	4798      	blx	r3
{
    2ec2:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <SerialDebug_init+0x14>)
    2ec4:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
    2ec6:	4b03      	ldr	r3, [pc, #12]	; (2ed4 <SerialDebug_init+0x18>)
    2ec8:	4798      	blx	r3
    2eca:	bd08      	pop	{r3, pc}
    2ecc:	00002e99 	.word	0x00002e99
    2ed0:	00002691 	.word	0x00002691
    2ed4:	00002e51 	.word	0x00002e51

00002ed8 <delay_driver_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM5_GCLK_ID_SLOW, CONF_GCLK_SERCOM5_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}
    2ed8:	b508      	push	{r3, lr}

    2eda:	4802      	ldr	r0, [pc, #8]	; (2ee4 <delay_driver_init+0xc>)
    2edc:	4b02      	ldr	r3, [pc, #8]	; (2ee8 <delay_driver_init+0x10>)
    2ede:	4798      	blx	r3
    2ee0:	bd08      	pop	{r3, pc}
    2ee2:	bf00      	nop
    2ee4:	e000e010 	.word	0xe000e010
    2ee8:	00003469 	.word	0x00003469

00002eec <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    2eec:	4a04      	ldr	r2, [pc, #16]	; (2f00 <PWM_0_CLOCK_init+0x14>)
    2eee:	6953      	ldr	r3, [r2, #20]
    2ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2ef4:	6153      	str	r3, [r2, #20]
    2ef6:	2240      	movs	r2, #64	; 0x40
    2ef8:	4b02      	ldr	r3, [pc, #8]	; (2f04 <PWM_0_CLOCK_init+0x18>)
    2efa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    2efe:	4770      	bx	lr
    2f00:	40000800 	.word	0x40000800
    2f04:	40001c00 	.word	0x40001c00

00002f08 <PWM_0_init>:
{
	return _system_time_get(SysTick);
}

void PWM_0_PORT_init(void)
{
    2f08:	b508      	push	{r3, lr}
}
    2f0a:	4b05      	ldr	r3, [pc, #20]	; (2f20 <PWM_0_init+0x18>)
    2f0c:	4798      	blx	r3

void PWM_0_CLOCK_init(void)
    2f0e:	4b05      	ldr	r3, [pc, #20]	; (2f24 <PWM_0_init+0x1c>)
    2f10:	4798      	blx	r3
    2f12:	4602      	mov	r2, r0
    2f14:	4904      	ldr	r1, [pc, #16]	; (2f28 <PWM_0_init+0x20>)
    2f16:	4805      	ldr	r0, [pc, #20]	; (2f2c <PWM_0_init+0x24>)
    2f18:	4b05      	ldr	r3, [pc, #20]	; (2f30 <PWM_0_init+0x28>)
    2f1a:	4798      	blx	r3
    2f1c:	bd08      	pop	{r3, pc}
    2f1e:	bf00      	nop
    2f20:	00002eed 	.word	0x00002eed
    2f24:	00004c45 	.word	0x00004c45
    2f28:	40003800 	.word	0x40003800
    2f2c:	20003d08 	.word	0x20003d08
    2f30:	00003575 	.word	0x00003575

00002f34 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    2f34:	4a04      	ldr	r2, [pc, #16]	; (2f48 <PWM_1_CLOCK_init+0x14>)
    2f36:	6953      	ldr	r3, [r2, #20]
    2f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    2f3c:	6153      	str	r3, [r2, #20]
    2f3e:	2240      	movs	r2, #64	; 0x40
    2f40:	4b02      	ldr	r3, [pc, #8]	; (2f4c <PWM_1_CLOCK_init+0x18>)
    2f42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    2f46:	4770      	bx	lr
    2f48:	40000800 	.word	0x40000800
    2f4c:	40001c00 	.word	0x40001c00

00002f50 <PWM_1_init>:
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
}

void PWM_1_PORT_init(void)
{
    2f50:	b508      	push	{r3, lr}
}
    2f52:	4b05      	ldr	r3, [pc, #20]	; (2f68 <PWM_1_init+0x18>)
    2f54:	4798      	blx	r3

void PWM_1_CLOCK_init(void)
    2f56:	4b05      	ldr	r3, [pc, #20]	; (2f6c <PWM_1_init+0x1c>)
    2f58:	4798      	blx	r3
    2f5a:	4602      	mov	r2, r0
    2f5c:	4904      	ldr	r1, [pc, #16]	; (2f70 <PWM_1_init+0x20>)
    2f5e:	4805      	ldr	r0, [pc, #20]	; (2f74 <PWM_1_init+0x24>)
    2f60:	4b05      	ldr	r3, [pc, #20]	; (2f78 <PWM_1_init+0x28>)
    2f62:	4798      	blx	r3
    2f64:	bd08      	pop	{r3, pc}
    2f66:	bf00      	nop
    2f68:	00002f35 	.word	0x00002f35
    2f6c:	00004c45 	.word	0x00004c45
    2f70:	40003c00 	.word	0x40003c00
    2f74:	20003e28 	.word	0x20003e28
    2f78:	00003575 	.word	0x00003575

00002f7c <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    2f7c:	4a04      	ldr	r2, [pc, #16]	; (2f90 <PWM_2_CLOCK_init+0x14>)
    2f7e:	6993      	ldr	r3, [r2, #24]
    2f80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2f84:	6193      	str	r3, [r2, #24]
    2f86:	2240      	movs	r2, #64	; 0x40
    2f88:	4b02      	ldr	r3, [pc, #8]	; (2f94 <PWM_2_CLOCK_init+0x18>)
    2f8a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    2f8e:	4770      	bx	lr
    2f90:	40000800 	.word	0x40000800
    2f94:	40001c00 	.word	0x40001c00

00002f98 <PWM_2_init>:
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
}

void PWM_2_PORT_init(void)
{
    2f98:	b508      	push	{r3, lr}
}
    2f9a:	4b05      	ldr	r3, [pc, #20]	; (2fb0 <PWM_2_init+0x18>)
    2f9c:	4798      	blx	r3

void PWM_2_CLOCK_init(void)
    2f9e:	4b05      	ldr	r3, [pc, #20]	; (2fb4 <PWM_2_init+0x1c>)
    2fa0:	4798      	blx	r3
    2fa2:	4602      	mov	r2, r0
    2fa4:	4904      	ldr	r1, [pc, #16]	; (2fb8 <PWM_2_init+0x20>)
    2fa6:	4805      	ldr	r0, [pc, #20]	; (2fbc <PWM_2_init+0x24>)
    2fa8:	4b05      	ldr	r3, [pc, #20]	; (2fc0 <PWM_2_init+0x28>)
    2faa:	4798      	blx	r3
    2fac:	bd08      	pop	{r3, pc}
    2fae:	bf00      	nop
    2fb0:	00002f7d 	.word	0x00002f7d
    2fb4:	00004c45 	.word	0x00004c45
    2fb8:	4101a000 	.word	0x4101a000
    2fbc:	20003d24 	.word	0x20003d24
    2fc0:	00003575 	.word	0x00003575

00002fc4 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    2fc4:	4a04      	ldr	r2, [pc, #16]	; (2fd8 <TIMER_3_CLOCK_init+0x14>)
    2fc6:	6993      	ldr	r3, [r2, #24]
    2fc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    2fcc:	6193      	str	r3, [r2, #24]
    2fce:	2240      	movs	r2, #64	; 0x40
    2fd0:	4b02      	ldr	r3, [pc, #8]	; (2fdc <TIMER_3_CLOCK_init+0x18>)
    2fd2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    2fd6:	4770      	bx	lr
    2fd8:	40000800 	.word	0x40000800
    2fdc:	40001c00 	.word	0x40001c00

00002fe0 <TIMER_3_init>:
static void TIMER_2_init(void)
{
	hri_mclk_set_APBCMASK_TC5_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC5_GCLK_ID, CONF_GCLK_TC5_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	timer_init(&TIMER_2, TC5, _tc_get_timer());
    2fe0:	b508      	push	{r3, lr}
}
    2fe2:	4b05      	ldr	r3, [pc, #20]	; (2ff8 <TIMER_3_init+0x18>)
    2fe4:	4798      	blx	r3

    2fe6:	4b05      	ldr	r3, [pc, #20]	; (2ffc <TIMER_3_init+0x1c>)
    2fe8:	4798      	blx	r3
    2fea:	4602      	mov	r2, r0
    2fec:	4904      	ldr	r1, [pc, #16]	; (3000 <TIMER_3_init+0x20>)
    2fee:	4805      	ldr	r0, [pc, #20]	; (3004 <TIMER_3_init+0x24>)
    2ff0:	4b05      	ldr	r3, [pc, #20]	; (3008 <TIMER_3_init+0x28>)
    2ff2:	4798      	blx	r3
    2ff4:	bd08      	pop	{r3, pc}
    2ff6:	bf00      	nop
    2ff8:	00002fc5 	.word	0x00002fc5
    2ffc:	000046fd 	.word	0x000046fd
    3000:	41016000 	.word	0x41016000
    3004:	20003e48 	.word	0x20003e48
    3008:	00003691 	.word	0x00003691

0000300c <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    300c:	4a04      	ldr	r2, [pc, #16]	; (3020 <TIMER_4_CLOCK_init+0x14>)
    300e:	6993      	ldr	r3, [r2, #24]
    3010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    3014:	6193      	str	r3, [r2, #24]
    3016:	2240      	movs	r2, #64	; 0x40
    3018:	4b02      	ldr	r3, [pc, #8]	; (3024 <TIMER_4_CLOCK_init+0x18>)
    301a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    301e:	4770      	bx	lr
    3020:	40000800 	.word	0x40000800
    3024:	40001c00 	.word	0x40001c00

00003028 <TIMER_4_init>:
}

void TIMER_3_init(void)
{
	TIMER_3_CLOCK_init();
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    3028:	b508      	push	{r3, lr}
}
    302a:	4b05      	ldr	r3, [pc, #20]	; (3040 <TIMER_4_init+0x18>)
    302c:	4798      	blx	r3

    302e:	4b05      	ldr	r3, [pc, #20]	; (3044 <TIMER_4_init+0x1c>)
    3030:	4798      	blx	r3
    3032:	4602      	mov	r2, r0
    3034:	4904      	ldr	r1, [pc, #16]	; (3048 <TIMER_4_init+0x20>)
    3036:	4805      	ldr	r0, [pc, #20]	; (304c <TIMER_4_init+0x24>)
    3038:	4b05      	ldr	r3, [pc, #20]	; (3050 <TIMER_4_init+0x28>)
    303a:	4798      	blx	r3
    303c:	bd08      	pop	{r3, pc}
    303e:	bf00      	nop
    3040:	0000300d 	.word	0x0000300d
    3044:	000046fd 	.word	0x000046fd
    3048:	41018000 	.word	0x41018000
    304c:	20003d90 	.word	0x20003d90
    3050:	00003691 	.word	0x00003691

00003054 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    3054:	4a04      	ldr	r2, [pc, #16]	; (3068 <TIMER_5_CLOCK_init+0x14>)
    3056:	69d3      	ldr	r3, [r2, #28]
    3058:	f043 0308 	orr.w	r3, r3, #8
    305c:	61d3      	str	r3, [r2, #28]
    305e:	2240      	movs	r2, #64	; 0x40
    3060:	4b02      	ldr	r3, [pc, #8]	; (306c <TIMER_5_CLOCK_init+0x18>)
    3062:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    3066:	4770      	bx	lr
    3068:	40000800 	.word	0x40000800
    306c:	40001c00 	.word	0x40001c00

00003070 <TIMER_5_init>:
}

void TIMER_4_init(void)
{
	TIMER_4_CLOCK_init();
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    3070:	b508      	push	{r3, lr}
}
    3072:	4b05      	ldr	r3, [pc, #20]	; (3088 <TIMER_5_init+0x18>)
    3074:	4798      	blx	r3

    3076:	4b05      	ldr	r3, [pc, #20]	; (308c <TIMER_5_init+0x1c>)
    3078:	4798      	blx	r3
    307a:	4602      	mov	r2, r0
    307c:	4904      	ldr	r1, [pc, #16]	; (3090 <TIMER_5_init+0x20>)
    307e:	4805      	ldr	r0, [pc, #20]	; (3094 <TIMER_5_init+0x24>)
    3080:	4b05      	ldr	r3, [pc, #20]	; (3098 <TIMER_5_init+0x28>)
    3082:	4798      	blx	r3
    3084:	bd08      	pop	{r3, pc}
    3086:	bf00      	nop
    3088:	00003055 	.word	0x00003055
    308c:	000046fd 	.word	0x000046fd
    3090:	42000c00 	.word	0x42000c00
    3094:	20003de8 	.word	0x20003de8
    3098:	00003691 	.word	0x00003691

0000309c <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    309c:	4a04      	ldr	r2, [pc, #16]	; (30b0 <TIMER_6_CLOCK_init+0x14>)
    309e:	69d3      	ldr	r3, [r2, #28]
    30a0:	f043 0310 	orr.w	r3, r3, #16
    30a4:	61d3      	str	r3, [r2, #28]
    30a6:	2240      	movs	r2, #64	; 0x40
    30a8:	4b02      	ldr	r3, [pc, #8]	; (30b4 <TIMER_6_CLOCK_init+0x18>)
    30aa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    30ae:	4770      	bx	lr
    30b0:	40000800 	.word	0x40000800
    30b4:	40001c00 	.word	0x40001c00

000030b8 <TIMER_6_init>:
}

void TIMER_5_init(void)
{
	TIMER_5_CLOCK_init();
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    30b8:	b508      	push	{r3, lr}
}
    30ba:	4b05      	ldr	r3, [pc, #20]	; (30d0 <TIMER_6_init+0x18>)
    30bc:	4798      	blx	r3

    30be:	4b05      	ldr	r3, [pc, #20]	; (30d4 <TIMER_6_init+0x1c>)
    30c0:	4798      	blx	r3
    30c2:	4602      	mov	r2, r0
    30c4:	4904      	ldr	r1, [pc, #16]	; (30d8 <TIMER_6_init+0x20>)
    30c6:	4805      	ldr	r0, [pc, #20]	; (30dc <TIMER_6_init+0x24>)
    30c8:	4b05      	ldr	r3, [pc, #20]	; (30e0 <TIMER_6_init+0x28>)
    30ca:	4798      	blx	r3
    30cc:	bd08      	pop	{r3, pc}
    30ce:	bf00      	nop
    30d0:	0000309d 	.word	0x0000309d
    30d4:	000046fd 	.word	0x000046fd
    30d8:	42001000 	.word	0x42001000
    30dc:	20003e08 	.word	0x20003e08
    30e0:	00003691 	.word	0x00003691

000030e4 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    30e4:	4a04      	ldr	r2, [pc, #16]	; (30f8 <TIMER_7_CLOCK_init+0x14>)
    30e6:	6a13      	ldr	r3, [r2, #32]
    30e8:	f043 0310 	orr.w	r3, r3, #16
    30ec:	6213      	str	r3, [r2, #32]
    30ee:	2240      	movs	r2, #64	; 0x40
    30f0:	4b02      	ldr	r3, [pc, #8]	; (30fc <TIMER_7_CLOCK_init+0x18>)
    30f2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    30f6:	4770      	bx	lr
    30f8:	40000800 	.word	0x40000800
    30fc:	40001c00 	.word	0x40001c00

00003100 <TIMER_7_init>:
}

void TIMER_6_init(void)
{
	TIMER_6_CLOCK_init();
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    3100:	b508      	push	{r3, lr}
}
    3102:	4b05      	ldr	r3, [pc, #20]	; (3118 <TIMER_7_init+0x18>)
    3104:	4798      	blx	r3

    3106:	4b05      	ldr	r3, [pc, #20]	; (311c <TIMER_7_init+0x1c>)
    3108:	4798      	blx	r3
    310a:	4602      	mov	r2, r0
    310c:	4904      	ldr	r1, [pc, #16]	; (3120 <TIMER_7_init+0x20>)
    310e:	4805      	ldr	r0, [pc, #20]	; (3124 <TIMER_7_init+0x24>)
    3110:	4b05      	ldr	r3, [pc, #20]	; (3128 <TIMER_7_init+0x28>)
    3112:	4798      	blx	r3
    3114:	bd08      	pop	{r3, pc}
    3116:	bf00      	nop
    3118:	000030e5 	.word	0x000030e5
    311c:	000046fd 	.word	0x000046fd
    3120:	43001000 	.word	0x43001000
    3124:	20003d5c 	.word	0x20003d5c
    3128:	00003691 	.word	0x00003691

0000312c <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    312c:	4a02      	ldr	r2, [pc, #8]	; (3138 <WDT_0_CLOCK_init+0xc>)
    312e:	6953      	ldr	r3, [r2, #20]
    3130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3134:	6153      	str	r3, [r2, #20]
    3136:	4770      	bx	lr
    3138:	40000800 	.word	0x40000800

0000313c <WDT_0_init>:
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
	TIMER_7_CLOCK_init();
    313c:	b508      	push	{r3, lr}
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    313e:	4b06      	ldr	r3, [pc, #24]	; (3158 <WDT_0_init+0x1c>)
    3140:	4798      	blx	r3
	ASSERT(wdt && hw);
    3142:	2252      	movs	r2, #82	; 0x52
    3144:	4905      	ldr	r1, [pc, #20]	; (315c <WDT_0_init+0x20>)
    3146:	2001      	movs	r0, #1
    3148:	4b05      	ldr	r3, [pc, #20]	; (3160 <WDT_0_init+0x24>)
    314a:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    314c:	4805      	ldr	r0, [pc, #20]	; (3164 <WDT_0_init+0x28>)
    314e:	4b06      	ldr	r3, [pc, #24]	; (3168 <WDT_0_init+0x2c>)
    3150:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    3152:	4b06      	ldr	r3, [pc, #24]	; (316c <WDT_0_init+0x30>)
    3154:	4798      	blx	r3
    3156:	bd08      	pop	{r3, pc}
    3158:	0000312d 	.word	0x0000312d
    315c:	00008cec 	.word	0x00008cec
    3160:	000036d5 	.word	0x000036d5
    3164:	20003db0 	.word	0x20003db0
    3168:	40002000 	.word	0x40002000
    316c:	00004cc1 	.word	0x00004cc1

00003170 <system_init>:
void WDT_0_init(void)
{
	WDT_0_CLOCK_init();

	if(0 == wdt_init(&WDT_0, WDT))
	{
    3170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    3174:	4b26      	ldr	r3, [pc, #152]	; (3210 <system_init+0xa0>)
    3176:	4798      	blx	r3
		//DEBUG_PRINT("WDT Initialised");
	}
	else
    3178:	4b26      	ldr	r3, [pc, #152]	; (3214 <system_init+0xa4>)
    317a:	4798      	blx	r3
	{
		//DEBUG_PRINT("WDT Failed to initialize");
    317c:	4b26      	ldr	r3, [pc, #152]	; (3218 <system_init+0xa8>)
    317e:	4798      	blx	r3
	}
}

void system_init(void)
{
	init_mcu();
    3180:	4b26      	ldr	r3, [pc, #152]	; (321c <system_init+0xac>)
    3182:	4798      	blx	r3

	delay_driver_init();
    3184:	4b26      	ldr	r3, [pc, #152]	; (3220 <system_init+0xb0>)
    3186:	4798      	blx	r3

	AC_0_init();
    3188:	4b26      	ldr	r3, [pc, #152]	; (3224 <system_init+0xb4>)
    318a:	4798      	blx	r3

	//ADC_0_init();
    318c:	4b26      	ldr	r3, [pc, #152]	; (3228 <system_init+0xb8>)
    318e:	4798      	blx	r3

	//ADC_1_init();
    3190:	4b26      	ldr	r3, [pc, #152]	; (322c <system_init+0xbc>)
    3192:	4798      	blx	r3

	DAC_0_init();
    3194:	4b26      	ldr	r3, [pc, #152]	; (3230 <system_init+0xc0>)
    3196:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    3198:	4b26      	ldr	r3, [pc, #152]	; (3234 <system_init+0xc4>)
    319a:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    319c:	4b26      	ldr	r3, [pc, #152]	; (3238 <system_init+0xc8>)
    319e:	4798      	blx	r3

	FLASH_0_init();
    31a0:	4b26      	ldr	r3, [pc, #152]	; (323c <system_init+0xcc>)
    31a2:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    31a4:	4c26      	ldr	r4, [pc, #152]	; (3240 <system_init+0xd0>)
    31a6:	69a3      	ldr	r3, [r4, #24]
    31a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    31ac:	61a3      	str	r3, [r4, #24]
    31ae:	4f25      	ldr	r7, [pc, #148]	; (3244 <system_init+0xd4>)
    31b0:	f04f 0840 	mov.w	r8, #64	; 0x40
    31b4:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
/**
    31b8:	4e23      	ldr	r6, [pc, #140]	; (3248 <system_init+0xd8>)
    31ba:	47b0      	blx	r6
    31bc:	4602      	mov	r2, r0
    31be:	4923      	ldr	r1, [pc, #140]	; (324c <system_init+0xdc>)
    31c0:	4823      	ldr	r0, [pc, #140]	; (3250 <system_init+0xe0>)
    31c2:	4d24      	ldr	r5, [pc, #144]	; (3254 <system_init+0xe4>)
    31c4:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    31c6:	69e3      	ldr	r3, [r4, #28]
    31c8:	f043 0320 	orr.w	r3, r3, #32
    31cc:	61e3      	str	r3, [r4, #28]
    31ce:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
/**
    31d2:	47b0      	blx	r6
    31d4:	4602      	mov	r2, r0
    31d6:	4920      	ldr	r1, [pc, #128]	; (3258 <system_init+0xe8>)
    31d8:	4820      	ldr	r0, [pc, #128]	; (325c <system_init+0xec>)
    31da:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    31dc:	69e3      	ldr	r3, [r4, #28]
    31de:	ea43 0308 	orr.w	r3, r3, r8
    31e2:	61e3      	str	r3, [r4, #28]
    31e4:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
/**
    31e8:	47b0      	blx	r6
    31ea:	4602      	mov	r2, r0
    31ec:	491c      	ldr	r1, [pc, #112]	; (3260 <system_init+0xf0>)
    31ee:	481d      	ldr	r0, [pc, #116]	; (3264 <system_init+0xf4>)
    31f0:	47a8      	blx	r5

	SerialDebug_init();
	
	ModemData_init();

    31f2:	4b1d      	ldr	r3, [pc, #116]	; (3268 <system_init+0xf8>)
    31f4:	4798      	blx	r3
	PWM_0_init();

    31f6:	4b1d      	ldr	r3, [pc, #116]	; (326c <system_init+0xfc>)
    31f8:	4798      	blx	r3
	PWM_1_init();

    31fa:	4b1d      	ldr	r3, [pc, #116]	; (3270 <system_init+0x100>)
    31fc:	4798      	blx	r3
	PWM_2_init();

    31fe:	4b1d      	ldr	r3, [pc, #116]	; (3274 <system_init+0x104>)
    3200:	4798      	blx	r3
	TIMER_0_init();
	TIMER_1_init();
    3202:	4b1d      	ldr	r3, [pc, #116]	; (3278 <system_init+0x108>)
    3204:	4798      	blx	r3
	TIMER_2_init();
	TIMER_3_init();
    3206:	4b1d      	ldr	r3, [pc, #116]	; (327c <system_init+0x10c>)
    3208:	4798      	blx	r3
    320a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    320e:	bf00      	nop
    3210:	00003bad 	.word	0x00003bad
    3214:	00002ed9 	.word	0x00002ed9
    3218:	00002b35 	.word	0x00002b35
    321c:	00002d35 	.word	0x00002d35
    3220:	00002d55 	.word	0x00002d55
    3224:	00002d7d 	.word	0x00002d7d
    3228:	00002da9 	.word	0x00002da9
    322c:	00002ebd 	.word	0x00002ebd
    3230:	00002e35 	.word	0x00002e35
    3234:	00002f09 	.word	0x00002f09
    3238:	00002f51 	.word	0x00002f51
    323c:	00002f99 	.word	0x00002f99
    3240:	40000800 	.word	0x40000800
    3244:	40001c00 	.word	0x40001c00
    3248:	00004c3d 	.word	0x00004c3d
    324c:	4101c000 	.word	0x4101c000
    3250:	20003e68 	.word	0x20003e68
    3254:	00003691 	.word	0x00003691
    3258:	42001400 	.word	0x42001400
    325c:	20003dc8 	.word	0x20003dc8
    3260:	42001800 	.word	0x42001800
    3264:	20003ce8 	.word	0x20003ce8
    3268:	00002fe1 	.word	0x00002fe1
    326c:	00003029 	.word	0x00003029
    3270:	00003071 	.word	0x00003071
    3274:	000030b9 	.word	0x000030b9
    3278:	00003101 	.word	0x00003101
    327c:	0000313d 	.word	0x0000313d

00003280 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    3280:	b538      	push	{r3, r4, r5, lr}
    3282:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    3284:	4605      	mov	r5, r0
    3286:	b158      	cbz	r0, 32a0 <ac_sync_init+0x20>
    3288:	1c08      	adds	r0, r1, #0
    328a:	bf18      	it	ne
    328c:	2001      	movne	r0, #1
    328e:	223b      	movs	r2, #59	; 0x3b
    3290:	4904      	ldr	r1, [pc, #16]	; (32a4 <ac_sync_init+0x24>)
    3292:	4b05      	ldr	r3, [pc, #20]	; (32a8 <ac_sync_init+0x28>)
    3294:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    3296:	4621      	mov	r1, r4
    3298:	4628      	mov	r0, r5
    329a:	4b04      	ldr	r3, [pc, #16]	; (32ac <ac_sync_init+0x2c>)
    329c:	4798      	blx	r3
}
    329e:	bd38      	pop	{r3, r4, r5, pc}
    32a0:	2000      	movs	r0, #0
    32a2:	e7f4      	b.n	328e <ac_sync_init+0xe>
    32a4:	00008d24 	.word	0x00008d24
    32a8:	000036d5 	.word	0x000036d5
    32ac:	000038e9 	.word	0x000038e9

000032b0 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    32b0:	b538      	push	{r3, r4, r5, lr}
    32b2:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    32b4:	4605      	mov	r5, r0
    32b6:	b158      	cbz	r0, 32d0 <adc_sync_init+0x20>
    32b8:	1c08      	adds	r0, r1, #0
    32ba:	bf18      	it	ne
    32bc:	2001      	movne	r0, #1
    32be:	2243      	movs	r2, #67	; 0x43
    32c0:	4904      	ldr	r1, [pc, #16]	; (32d4 <adc_sync_init+0x24>)
    32c2:	4b05      	ldr	r3, [pc, #20]	; (32d8 <adc_sync_init+0x28>)
    32c4:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    32c6:	4621      	mov	r1, r4
    32c8:	4628      	mov	r0, r5
    32ca:	4b04      	ldr	r3, [pc, #16]	; (32dc <adc_sync_init+0x2c>)
    32cc:	4798      	blx	r3
}
    32ce:	bd38      	pop	{r3, r4, r5, pc}
    32d0:	2000      	movs	r0, #0
    32d2:	e7f4      	b.n	32be <adc_sync_init+0xe>
    32d4:	00008d40 	.word	0x00008d40
    32d8:	000036d5 	.word	0x000036d5
    32dc:	000039d9 	.word	0x000039d9

000032e0 <adc_sync_enable_channel>:

/**
 * \brief Enable ADC
 */
int32_t adc_sync_enable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    32e0:	b538      	push	{r3, r4, r5, lr}
    32e2:	460d      	mov	r5, r1
	ASSERT(descr);
    32e4:	4604      	mov	r4, r0
    32e6:	2258      	movs	r2, #88	; 0x58
    32e8:	4905      	ldr	r1, [pc, #20]	; (3300 <adc_sync_enable_channel+0x20>)
    32ea:	3000      	adds	r0, #0
    32ec:	bf18      	it	ne
    32ee:	2001      	movne	r0, #1
    32f0:	4b04      	ldr	r3, [pc, #16]	; (3304 <adc_sync_enable_channel+0x24>)
    32f2:	4798      	blx	r3
	_adc_sync_enable_channel(&descr->device, channel);
    32f4:	4629      	mov	r1, r5
    32f6:	4620      	mov	r0, r4
    32f8:	4b03      	ldr	r3, [pc, #12]	; (3308 <adc_sync_enable_channel+0x28>)
    32fa:	4798      	blx	r3

	return ERR_NONE;
}
    32fc:	2000      	movs	r0, #0
    32fe:	bd38      	pop	{r3, r4, r5, pc}
    3300:	00008d40 	.word	0x00008d40
    3304:	000036d5 	.word	0x000036d5
    3308:	00003ad1 	.word	0x00003ad1

0000330c <adc_sync_disable_channel>:

/**
 * \brief Disable ADC
 */
int32_t adc_sync_disable_channel(struct adc_sync_descriptor *const descr, const uint8_t channel)
{
    330c:	b538      	push	{r3, r4, r5, lr}
    330e:	460d      	mov	r5, r1
	ASSERT(descr);
    3310:	4604      	mov	r4, r0
    3312:	2263      	movs	r2, #99	; 0x63
    3314:	4905      	ldr	r1, [pc, #20]	; (332c <adc_sync_disable_channel+0x20>)
    3316:	3000      	adds	r0, #0
    3318:	bf18      	it	ne
    331a:	2001      	movne	r0, #1
    331c:	4b04      	ldr	r3, [pc, #16]	; (3330 <adc_sync_disable_channel+0x24>)
    331e:	4798      	blx	r3
	_adc_sync_disable_channel(&descr->device, channel);
    3320:	4629      	mov	r1, r5
    3322:	4620      	mov	r0, r4
    3324:	4b03      	ldr	r3, [pc, #12]	; (3334 <adc_sync_disable_channel+0x28>)
    3326:	4798      	blx	r3
	return ERR_NONE;
}
    3328:	2000      	movs	r0, #0
    332a:	bd38      	pop	{r3, r4, r5, pc}
    332c:	00008d40 	.word	0x00008d40
    3330:	000036d5 	.word	0x000036d5
    3334:	00003ae7 	.word	0x00003ae7

00003338 <adc_sync_read_channel>:
/*
 * \brief Read data from ADC
 */
int32_t adc_sync_read_channel(struct adc_sync_descriptor *const descr, const uint8_t channel, uint8_t *const buffer,
                              const uint16_t length)
{
    3338:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    333c:	460d      	mov	r5, r1
    333e:	4691      	mov	r9, r2
    3340:	469a      	mov	sl, r3
	uint8_t  data_size;
	uint16_t offset = 0;

	ASSERT(descr && buffer && length);
    3342:	4680      	mov	r8, r0
    3344:	b1e0      	cbz	r0, 3380 <adc_sync_read_channel+0x48>
    3346:	b1ea      	cbz	r2, 3384 <adc_sync_read_channel+0x4c>
    3348:	1c18      	adds	r0, r3, #0
    334a:	bf18      	it	ne
    334c:	2001      	movne	r0, #1
    334e:	4f1c      	ldr	r7, [pc, #112]	; (33c0 <adc_sync_read_channel+0x88>)
    3350:	2271      	movs	r2, #113	; 0x71
    3352:	4639      	mov	r1, r7
    3354:	4e1b      	ldr	r6, [pc, #108]	; (33c4 <adc_sync_read_channel+0x8c>)
    3356:	47b0      	blx	r6
	data_size = _adc_sync_get_data_size(&descr->device);
    3358:	4644      	mov	r4, r8
    335a:	4640      	mov	r0, r8
    335c:	4b1a      	ldr	r3, [pc, #104]	; (33c8 <adc_sync_read_channel+0x90>)
    335e:	4798      	blx	r3
    3360:	4680      	mov	r8, r0
	ASSERT(!(length % data_size));
    3362:	fb9a f0f0 	sdiv	r0, sl, r0
    3366:	fb08 a010 	mls	r0, r8, r0, sl
    336a:	2273      	movs	r2, #115	; 0x73
    336c:	4639      	mov	r1, r7
    336e:	fab0 f080 	clz	r0, r0
    3372:	0940      	lsrs	r0, r0, #5
    3374:	47b0      	blx	r6
	uint16_t offset = 0;
    3376:	2700      	movs	r7, #0

	do {
		uint16_t result;
		_adc_sync_convert(&descr->device);
    3378:	f8df b058 	ldr.w	fp, [pc, #88]	; 33d4 <adc_sync_read_channel+0x9c>

		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    337c:	4e13      	ldr	r6, [pc, #76]	; (33cc <adc_sync_read_channel+0x94>)
    337e:	e007      	b.n	3390 <adc_sync_read_channel+0x58>
	ASSERT(descr && buffer && length);
    3380:	2000      	movs	r0, #0
    3382:	e7e4      	b.n	334e <adc_sync_read_channel+0x16>
    3384:	2000      	movs	r0, #0
    3386:	e7e2      	b.n	334e <adc_sync_read_channel+0x16>
    3388:	4447      	add	r7, r8
    338a:	b2bf      	uxth	r7, r7
		buffer[offset] = result;
		if (1 < data_size) {
			buffer[offset + 1] = result >> 8;
		}
		offset += data_size;
	} while (offset < length);
    338c:	45ba      	cmp	sl, r7
    338e:	d914      	bls.n	33ba <adc_sync_read_channel+0x82>
		_adc_sync_convert(&descr->device);
    3390:	4620      	mov	r0, r4
    3392:	47d8      	blx	fp
		while (!_adc_sync_is_channel_conversion_done(&descr->device, channel))
    3394:	4629      	mov	r1, r5
    3396:	4620      	mov	r0, r4
    3398:	47b0      	blx	r6
    339a:	2800      	cmp	r0, #0
    339c:	d0fa      	beq.n	3394 <adc_sync_read_channel+0x5c>
		result         = _adc_sync_read_channel_data(&descr->device, channel);
    339e:	4629      	mov	r1, r5
    33a0:	4620      	mov	r0, r4
    33a2:	4b0b      	ldr	r3, [pc, #44]	; (33d0 <adc_sync_read_channel+0x98>)
    33a4:	4798      	blx	r3
		buffer[offset] = result;
    33a6:	f809 0007 	strb.w	r0, [r9, r7]
		if (1 < data_size) {
    33aa:	f1b8 0f01 	cmp.w	r8, #1
    33ae:	d9eb      	bls.n	3388 <adc_sync_read_channel+0x50>
			buffer[offset + 1] = result >> 8;
    33b0:	eb09 0307 	add.w	r3, r9, r7
    33b4:	0a00      	lsrs	r0, r0, #8
    33b6:	7058      	strb	r0, [r3, #1]
    33b8:	e7e6      	b.n	3388 <adc_sync_read_channel+0x50>

	return offset;
}
    33ba:	4638      	mov	r0, r7
    33bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    33c0:	00008d40 	.word	0x00008d40
    33c4:	000036d5 	.word	0x000036d5
    33c8:	00003aff 	.word	0x00003aff
    33cc:	00003b11 	.word	0x00003b11
    33d0:	00003b33 	.word	0x00003b33
    33d4:	00003b1d 	.word	0x00003b1d

000033d8 <adc_sync_set_inputs>:
/**
 * \brief Set ADC input source of a channel
 */
int32_t adc_sync_set_inputs(struct adc_sync_descriptor *const descr, const adc_pos_input_t pos_input,
                            const adc_neg_input_t neg_input, const uint8_t channel)
{
    33d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33da:	460d      	mov	r5, r1
    33dc:	4616      	mov	r6, r2
    33de:	461f      	mov	r7, r3
	ASSERT(descr);
    33e0:	4604      	mov	r4, r0
    33e2:	22a3      	movs	r2, #163	; 0xa3
    33e4:	4906      	ldr	r1, [pc, #24]	; (3400 <adc_sync_set_inputs+0x28>)
    33e6:	3000      	adds	r0, #0
    33e8:	bf18      	it	ne
    33ea:	2001      	movne	r0, #1
    33ec:	4b05      	ldr	r3, [pc, #20]	; (3404 <adc_sync_set_inputs+0x2c>)
    33ee:	4798      	blx	r3
	_adc_sync_set_inputs(&descr->device, pos_input, neg_input, channel);
    33f0:	463b      	mov	r3, r7
    33f2:	4632      	mov	r2, r6
    33f4:	4629      	mov	r1, r5
    33f6:	4620      	mov	r0, r4
    33f8:	4c03      	ldr	r4, [pc, #12]	; (3408 <adc_sync_set_inputs+0x30>)
    33fa:	47a0      	blx	r4

	return ERR_NONE;
}
    33fc:	2000      	movs	r0, #0
    33fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3400:	00008d40 	.word	0x00008d40
    3404:	000036d5 	.word	0x000036d5
    3408:	00003b3d 	.word	0x00003b3d

0000340c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    340c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    3410:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    3412:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    3414:	f3bf 8f5f 	dmb	sy
    3418:	4770      	bx	lr

0000341a <atomic_leave_critical>:
    341a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    341e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    3420:	f383 8810 	msr	PRIMASK, r3
    3424:	4770      	bx	lr
	...

00003428 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    3428:	b538      	push	{r3, r4, r5, lr}
    342a:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    342c:	4604      	mov	r4, r0
    342e:	b198      	cbz	r0, 3458 <dac_sync_init+0x30>
    3430:	1c08      	adds	r0, r1, #0
    3432:	bf18      	it	ne
    3434:	2001      	movne	r0, #1
    3436:	223c      	movs	r2, #60	; 0x3c
    3438:	4908      	ldr	r1, [pc, #32]	; (345c <dac_sync_init+0x34>)
    343a:	4b09      	ldr	r3, [pc, #36]	; (3460 <dac_sync_init+0x38>)
    343c:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    343e:	4629      	mov	r1, r5
    3440:	4620      	mov	r0, r4
    3442:	4b08      	ldr	r3, [pc, #32]	; (3464 <dac_sync_init+0x3c>)
    3444:	4798      	blx	r3
	if (rc) {
    3446:	4602      	mov	r2, r0
    3448:	b920      	cbnz	r0, 3454 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    344a:	2300      	movs	r3, #0
    344c:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    344e:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    3450:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    3452:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    3454:	4610      	mov	r0, r2
    3456:	bd38      	pop	{r3, r4, r5, pc}
    3458:	2000      	movs	r0, #0
    345a:	e7ec      	b.n	3436 <dac_sync_init+0xe>
    345c:	00008d5c 	.word	0x00008d5c
    3460:	000036d5 	.word	0x000036d5
    3464:	00003c65 	.word	0x00003c65

00003468 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    3468:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    346a:	4b02      	ldr	r3, [pc, #8]	; (3474 <delay_init+0xc>)
    346c:	6018      	str	r0, [r3, #0]
    346e:	4b02      	ldr	r3, [pc, #8]	; (3478 <delay_init+0x10>)
    3470:	4798      	blx	r3
    3472:	bd08      	pop	{r3, pc}
    3474:	20000558 	.word	0x20000558
    3478:	000043f9 	.word	0x000043f9

0000347c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    347c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    347e:	4b04      	ldr	r3, [pc, #16]	; (3490 <delay_ms+0x14>)
    3480:	681c      	ldr	r4, [r3, #0]
    3482:	4b04      	ldr	r3, [pc, #16]	; (3494 <delay_ms+0x18>)
    3484:	4798      	blx	r3
    3486:	4601      	mov	r1, r0
    3488:	4620      	mov	r0, r4
    348a:	4b03      	ldr	r3, [pc, #12]	; (3498 <delay_ms+0x1c>)
    348c:	4798      	blx	r3
    348e:	bd10      	pop	{r4, pc}
    3490:	20000558 	.word	0x20000558
    3494:	00003ba1 	.word	0x00003ba1
    3498:	0000440d 	.word	0x0000440d

0000349c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    349c:	b508      	push	{r3, lr}
	return _event_system_init();
    349e:	4b01      	ldr	r3, [pc, #4]	; (34a4 <event_system_init+0x8>)
    34a0:	4798      	blx	r3
}
    34a2:	bd08      	pop	{r3, pc}
    34a4:	00003ea1 	.word	0x00003ea1

000034a8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    34a8:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    34aa:	4b0c      	ldr	r3, [pc, #48]	; (34dc <process_ext_irq+0x34>)
    34ac:	685c      	ldr	r4, [r3, #4]
    34ae:	42a0      	cmp	r0, r4
    34b0:	d00e      	beq.n	34d0 <process_ext_irq+0x28>
    34b2:	2301      	movs	r3, #1
    34b4:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    34b6:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    34b8:	25ff      	movs	r5, #255	; 0xff
    34ba:	e003      	b.n	34c4 <process_ext_irq+0x1c>
    34bc:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    34be:	185a      	adds	r2, r3, r1
    34c0:	0852      	lsrs	r2, r2, #1
    34c2:	d104      	bne.n	34ce <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    34c4:	42a0      	cmp	r0, r4
    34c6:	d9f9      	bls.n	34bc <process_ext_irq+0x14>
	while (upper >= lower) {
    34c8:	b13b      	cbz	r3, 34da <process_ext_irq+0x32>
			lower = middle + 1;
    34ca:	4631      	mov	r1, r6
    34cc:	e7f7      	b.n	34be <process_ext_irq+0x16>
    34ce:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    34d0:	4b02      	ldr	r3, [pc, #8]	; (34dc <process_ext_irq+0x34>)
    34d2:	681b      	ldr	r3, [r3, #0]
    34d4:	b10b      	cbz	r3, 34da <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    34d6:	4798      	blx	r3
    34d8:	bd70      	pop	{r4, r5, r6, pc}
    34da:	bd70      	pop	{r4, r5, r6, pc}
    34dc:	2000055c 	.word	0x2000055c

000034e0 <ext_irq_init>:
{
    34e0:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    34e2:	4b05      	ldr	r3, [pc, #20]	; (34f8 <ext_irq_init+0x18>)
    34e4:	f04f 32ff 	mov.w	r2, #4294967295
    34e8:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    34ea:	2200      	movs	r2, #0
    34ec:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    34ee:	4803      	ldr	r0, [pc, #12]	; (34fc <ext_irq_init+0x1c>)
    34f0:	4b03      	ldr	r3, [pc, #12]	; (3500 <ext_irq_init+0x20>)
    34f2:	4798      	blx	r3
}
    34f4:	bd08      	pop	{r3, pc}
    34f6:	bf00      	nop
    34f8:	2000055c 	.word	0x2000055c
    34fc:	000034a9 	.word	0x000034a9
    3500:	00003e21 	.word	0x00003e21

00003504 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    3504:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    3506:	6943      	ldr	r3, [r0, #20]
    3508:	b103      	cbz	r3, 350c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    350a:	4798      	blx	r3
    350c:	bd08      	pop	{r3, pc}

0000350e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    350e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    3510:	6983      	ldr	r3, [r0, #24]
    3512:	b103      	cbz	r3, 3516 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    3514:	4798      	blx	r3
    3516:	bd08      	pop	{r3, pc}

00003518 <flash_init>:
{
    3518:	b538      	push	{r3, r4, r5, lr}
    351a:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    351c:	4604      	mov	r4, r0
    351e:	b190      	cbz	r0, 3546 <flash_init+0x2e>
    3520:	1c08      	adds	r0, r1, #0
    3522:	bf18      	it	ne
    3524:	2001      	movne	r0, #1
    3526:	2242      	movs	r2, #66	; 0x42
    3528:	4908      	ldr	r1, [pc, #32]	; (354c <flash_init+0x34>)
    352a:	4b09      	ldr	r3, [pc, #36]	; (3550 <flash_init+0x38>)
    352c:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    352e:	4629      	mov	r1, r5
    3530:	4620      	mov	r0, r4
    3532:	4b08      	ldr	r3, [pc, #32]	; (3554 <flash_init+0x3c>)
    3534:	4798      	blx	r3
	if (rc) {
    3536:	4603      	mov	r3, r0
    3538:	b918      	cbnz	r0, 3542 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    353a:	4a07      	ldr	r2, [pc, #28]	; (3558 <flash_init+0x40>)
    353c:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    353e:	4a07      	ldr	r2, [pc, #28]	; (355c <flash_init+0x44>)
    3540:	6062      	str	r2, [r4, #4]
}
    3542:	4618      	mov	r0, r3
    3544:	bd38      	pop	{r3, r4, r5, pc}
    3546:	2000      	movs	r0, #0
    3548:	e7ed      	b.n	3526 <flash_init+0xe>
    354a:	bf00      	nop
    354c:	00008d78 	.word	0x00008d78
    3550:	000036d5 	.word	0x000036d5
    3554:	00003fdd 	.word	0x00003fdd
    3558:	00003505 	.word	0x00003505
    355c:	0000350f 	.word	0x0000350f

00003560 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    3560:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    3562:	6943      	ldr	r3, [r0, #20]
    3564:	b103      	cbz	r3, 3568 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    3566:	4798      	blx	r3
    3568:	bd08      	pop	{r3, pc}

0000356a <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    356a:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    356c:	6983      	ldr	r3, [r0, #24]
    356e:	b103      	cbz	r3, 3572 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    3570:	4798      	blx	r3
    3572:	bd08      	pop	{r3, pc}

00003574 <pwm_init>:
{
    3574:	b538      	push	{r3, r4, r5, lr}
    3576:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    3578:	4604      	mov	r4, r0
    357a:	b180      	cbz	r0, 359e <pwm_init+0x2a>
    357c:	1c08      	adds	r0, r1, #0
    357e:	bf18      	it	ne
    3580:	2001      	movne	r0, #1
    3582:	223d      	movs	r2, #61	; 0x3d
    3584:	4907      	ldr	r1, [pc, #28]	; (35a4 <pwm_init+0x30>)
    3586:	4b08      	ldr	r3, [pc, #32]	; (35a8 <pwm_init+0x34>)
    3588:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    358a:	4629      	mov	r1, r5
    358c:	4620      	mov	r0, r4
    358e:	4b07      	ldr	r3, [pc, #28]	; (35ac <pwm_init+0x38>)
    3590:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    3592:	4b07      	ldr	r3, [pc, #28]	; (35b0 <pwm_init+0x3c>)
    3594:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    3596:	4b07      	ldr	r3, [pc, #28]	; (35b4 <pwm_init+0x40>)
    3598:	6063      	str	r3, [r4, #4]
}
    359a:	2000      	movs	r0, #0
    359c:	bd38      	pop	{r3, r4, r5, pc}
    359e:	2000      	movs	r0, #0
    35a0:	e7ef      	b.n	3582 <pwm_init+0xe>
    35a2:	bf00      	nop
    35a4:	00008d90 	.word	0x00008d90
    35a8:	000036d5 	.word	0x000036d5
    35ac:	00004b25 	.word	0x00004b25
    35b0:	00003561 	.word	0x00003561
    35b4:	0000356b 	.word	0x0000356b

000035b8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    35b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35ba:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    35bc:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    35be:	b12f      	cbz	r7, 35cc <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    35c0:	688d      	ldr	r5, [r1, #8]
    35c2:	463c      	mov	r4, r7
    35c4:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    35c6:	f1c2 0e01 	rsb	lr, r2, #1
    35ca:	e00b      	b.n	35e4 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    35cc:	4b0e      	ldr	r3, [pc, #56]	; (3608 <timer_add_timer_task+0x50>)
    35ce:	4798      	blx	r3
		return;
    35d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    35d2:	4473      	add	r3, lr
    35d4:	68a0      	ldr	r0, [r4, #8]
    35d6:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    35d8:	42ab      	cmp	r3, r5
    35da:	d20a      	bcs.n	35f2 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    35dc:	6823      	ldr	r3, [r4, #0]
    35de:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    35e0:	b153      	cbz	r3, 35f8 <timer_add_timer_task+0x40>
    35e2:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    35e4:	6863      	ldr	r3, [r4, #4]
    35e6:	4293      	cmp	r3, r2
    35e8:	d8f3      	bhi.n	35d2 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    35ea:	68a0      	ldr	r0, [r4, #8]
    35ec:	4403      	add	r3, r0
    35ee:	1a9b      	subs	r3, r3, r2
    35f0:	e7f2      	b.n	35d8 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    35f2:	42a7      	cmp	r7, r4
    35f4:	d004      	beq.n	3600 <timer_add_timer_task+0x48>
    35f6:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    35f8:	4620      	mov	r0, r4
    35fa:	4b04      	ldr	r3, [pc, #16]	; (360c <timer_add_timer_task+0x54>)
    35fc:	4798      	blx	r3
    35fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    3600:	4660      	mov	r0, ip
    3602:	4b01      	ldr	r3, [pc, #4]	; (3608 <timer_add_timer_task+0x50>)
    3604:	4798      	blx	r3
    3606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3608:	000036fd 	.word	0x000036fd
    360c:	00003729 	.word	0x00003729

00003610 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    3610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    3614:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    3616:	6907      	ldr	r7, [r0, #16]
    3618:	3701      	adds	r7, #1
    361a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    361c:	7e03      	ldrb	r3, [r0, #24]
    361e:	f013 0f01 	tst.w	r3, #1
    3622:	d113      	bne.n	364c <timer_process_counted+0x3c>
    3624:	7e03      	ldrb	r3, [r0, #24]
    3626:	f013 0f02 	tst.w	r3, #2
    362a:	d10f      	bne.n	364c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    362c:	b354      	cbz	r4, 3684 <timer_process_counted+0x74>
    362e:	6863      	ldr	r3, [r4, #4]
    3630:	1afb      	subs	r3, r7, r3
    3632:	68a2      	ldr	r2, [r4, #8]
    3634:	4293      	cmp	r3, r2
    3636:	d307      	bcc.n	3648 <timer_process_counted+0x38>
    3638:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    363a:	f100 0814 	add.w	r8, r0, #20
    363e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 3688 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    3642:	f8df a048 	ldr.w	sl, [pc, #72]	; 368c <timer_process_counted+0x7c>
    3646:	e012      	b.n	366e <timer_process_counted+0x5e>
    3648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    364c:	7e03      	ldrb	r3, [r0, #24]
    364e:	f043 0302 	orr.w	r3, r3, #2
    3652:	7603      	strb	r3, [r0, #24]
		return;
    3654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3658:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    365a:	68e3      	ldr	r3, [r4, #12]
    365c:	4620      	mov	r0, r4
    365e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    3660:	b185      	cbz	r5, 3684 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    3662:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    3664:	686b      	ldr	r3, [r5, #4]
    3666:	1afb      	subs	r3, r7, r3
    3668:	68aa      	ldr	r2, [r5, #8]
    366a:	4293      	cmp	r3, r2
    366c:	d30a      	bcc.n	3684 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    366e:	4640      	mov	r0, r8
    3670:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    3672:	7c23      	ldrb	r3, [r4, #16]
    3674:	2b01      	cmp	r3, #1
    3676:	d1ef      	bne.n	3658 <timer_process_counted+0x48>
			tmp->time_label = time;
    3678:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    367a:	463a      	mov	r2, r7
    367c:	4621      	mov	r1, r4
    367e:	4640      	mov	r0, r8
    3680:	47d0      	blx	sl
    3682:	e7e9      	b.n	3658 <timer_process_counted+0x48>
    3684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3688:	00003731 	.word	0x00003731
    368c:	000035b9 	.word	0x000035b9

00003690 <timer_init>:
{
    3690:	b570      	push	{r4, r5, r6, lr}
    3692:	460e      	mov	r6, r1
    3694:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    3696:	4604      	mov	r4, r0
    3698:	b190      	cbz	r0, 36c0 <timer_init+0x30>
    369a:	b199      	cbz	r1, 36c4 <timer_init+0x34>
    369c:	1c10      	adds	r0, r2, #0
    369e:	bf18      	it	ne
    36a0:	2001      	movne	r0, #1
    36a2:	2245      	movs	r2, #69	; 0x45
    36a4:	4908      	ldr	r1, [pc, #32]	; (36c8 <timer_init+0x38>)
    36a6:	4b09      	ldr	r3, [pc, #36]	; (36cc <timer_init+0x3c>)
    36a8:	4798      	blx	r3
	descr->func = func;
    36aa:	4620      	mov	r0, r4
    36ac:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    36b0:	682b      	ldr	r3, [r5, #0]
    36b2:	4631      	mov	r1, r6
    36b4:	4798      	blx	r3
	descr->time                           = 0;
    36b6:	2000      	movs	r0, #0
    36b8:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    36ba:	4b05      	ldr	r3, [pc, #20]	; (36d0 <timer_init+0x40>)
    36bc:	6063      	str	r3, [r4, #4]
}
    36be:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    36c0:	2000      	movs	r0, #0
    36c2:	e7ee      	b.n	36a2 <timer_init+0x12>
    36c4:	2000      	movs	r0, #0
    36c6:	e7ec      	b.n	36a2 <timer_init+0x12>
    36c8:	00008da8 	.word	0x00008da8
    36cc:	000036d5 	.word	0x000036d5
    36d0:	00003611 	.word	0x00003611

000036d4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    36d4:	b900      	cbnz	r0, 36d8 <assert+0x4>
		__asm("BKPT #0");
    36d6:	be00      	bkpt	0x0000
    36d8:	4770      	bx	lr

000036da <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    36da:	6803      	ldr	r3, [r0, #0]
    36dc:	b14b      	cbz	r3, 36f2 <is_list_element+0x18>
		if (it == element) {
    36de:	428b      	cmp	r3, r1
    36e0:	d009      	beq.n	36f6 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    36e2:	681b      	ldr	r3, [r3, #0]
    36e4:	b11b      	cbz	r3, 36ee <is_list_element+0x14>
		if (it == element) {
    36e6:	4299      	cmp	r1, r3
    36e8:	d1fb      	bne.n	36e2 <is_list_element+0x8>
			return true;
    36ea:	2001      	movs	r0, #1
		}
	}

	return false;
}
    36ec:	4770      	bx	lr
	return false;
    36ee:	2000      	movs	r0, #0
    36f0:	4770      	bx	lr
    36f2:	2000      	movs	r0, #0
    36f4:	4770      	bx	lr
			return true;
    36f6:	2001      	movs	r0, #1
    36f8:	4770      	bx	lr
	...

000036fc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    36fc:	b538      	push	{r3, r4, r5, lr}
    36fe:	4604      	mov	r4, r0
    3700:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    3702:	4b06      	ldr	r3, [pc, #24]	; (371c <list_insert_as_head+0x20>)
    3704:	4798      	blx	r3
    3706:	f080 0001 	eor.w	r0, r0, #1
    370a:	2243      	movs	r2, #67	; 0x43
    370c:	4904      	ldr	r1, [pc, #16]	; (3720 <list_insert_as_head+0x24>)
    370e:	b2c0      	uxtb	r0, r0
    3710:	4b04      	ldr	r3, [pc, #16]	; (3724 <list_insert_as_head+0x28>)
    3712:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    3714:	6823      	ldr	r3, [r4, #0]
    3716:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    3718:	6025      	str	r5, [r4, #0]
    371a:	bd38      	pop	{r3, r4, r5, pc}
    371c:	000036db 	.word	0x000036db
    3720:	00008dc0 	.word	0x00008dc0
    3724:	000036d5 	.word	0x000036d5

00003728 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    3728:	6803      	ldr	r3, [r0, #0]
    372a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    372c:	6001      	str	r1, [r0, #0]
    372e:	4770      	bx	lr

00003730 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    3730:	6803      	ldr	r3, [r0, #0]
    3732:	b10b      	cbz	r3, 3738 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    3734:	681a      	ldr	r2, [r3, #0]
    3736:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    3738:	4618      	mov	r0, r3
    373a:	4770      	bx	lr

0000373c <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    373c:	b570      	push	{r4, r5, r6, lr}
    373e:	460e      	mov	r6, r1
    3740:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    3742:	4604      	mov	r4, r0
    3744:	b178      	cbz	r0, 3766 <ringbuffer_init+0x2a>
    3746:	b181      	cbz	r1, 376a <ringbuffer_init+0x2e>
    3748:	b1a2      	cbz	r2, 3774 <ringbuffer_init+0x38>
    374a:	2001      	movs	r0, #1
    374c:	2232      	movs	r2, #50	; 0x32
    374e:	490d      	ldr	r1, [pc, #52]	; (3784 <ringbuffer_init+0x48>)
    3750:	4b0d      	ldr	r3, [pc, #52]	; (3788 <ringbuffer_init+0x4c>)
    3752:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    3754:	1e6b      	subs	r3, r5, #1
    3756:	421d      	tst	r5, r3
    3758:	d109      	bne.n	376e <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    375a:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    375c:	2000      	movs	r0, #0
    375e:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    3760:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    3762:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    3764:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    3766:	2000      	movs	r0, #0
    3768:	e7f0      	b.n	374c <ringbuffer_init+0x10>
    376a:	2000      	movs	r0, #0
    376c:	e7ee      	b.n	374c <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    376e:	f06f 000c 	mvn.w	r0, #12
    3772:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    3774:	2232      	movs	r2, #50	; 0x32
    3776:	4903      	ldr	r1, [pc, #12]	; (3784 <ringbuffer_init+0x48>)
    3778:	2000      	movs	r0, #0
    377a:	4b03      	ldr	r3, [pc, #12]	; (3788 <ringbuffer_init+0x4c>)
    377c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    377e:	1e6b      	subs	r3, r5, #1
    3780:	e7eb      	b.n	375a <ringbuffer_init+0x1e>
    3782:	bf00      	nop
    3784:	00008de0 	.word	0x00008de0
    3788:	000036d5 	.word	0x000036d5

0000378c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    378c:	b538      	push	{r3, r4, r5, lr}
    378e:	460d      	mov	r5, r1
	ASSERT(rb && data);
    3790:	4604      	mov	r4, r0
    3792:	b1a0      	cbz	r0, 37be <ringbuffer_get+0x32>
    3794:	1c08      	adds	r0, r1, #0
    3796:	bf18      	it	ne
    3798:	2001      	movne	r0, #1
    379a:	224a      	movs	r2, #74	; 0x4a
    379c:	490a      	ldr	r1, [pc, #40]	; (37c8 <ringbuffer_get+0x3c>)
    379e:	4b0b      	ldr	r3, [pc, #44]	; (37cc <ringbuffer_get+0x40>)
    37a0:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    37a2:	68a3      	ldr	r3, [r4, #8]
    37a4:	68e2      	ldr	r2, [r4, #12]
    37a6:	429a      	cmp	r2, r3
    37a8:	d00b      	beq.n	37c2 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    37aa:	6862      	ldr	r2, [r4, #4]
    37ac:	4013      	ands	r3, r2
    37ae:	6822      	ldr	r2, [r4, #0]
    37b0:	5cd3      	ldrb	r3, [r2, r3]
    37b2:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    37b4:	68a3      	ldr	r3, [r4, #8]
    37b6:	3301      	adds	r3, #1
    37b8:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    37ba:	2000      	movs	r0, #0
    37bc:	bd38      	pop	{r3, r4, r5, pc}
    37be:	2000      	movs	r0, #0
    37c0:	e7eb      	b.n	379a <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    37c2:	f06f 0009 	mvn.w	r0, #9
}
    37c6:	bd38      	pop	{r3, r4, r5, pc}
    37c8:	00008de0 	.word	0x00008de0
    37cc:	000036d5 	.word	0x000036d5

000037d0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    37d0:	b538      	push	{r3, r4, r5, lr}
    37d2:	460d      	mov	r5, r1
	ASSERT(rb);
    37d4:	4604      	mov	r4, r0
    37d6:	225b      	movs	r2, #91	; 0x5b
    37d8:	490b      	ldr	r1, [pc, #44]	; (3808 <ringbuffer_put+0x38>)
    37da:	3000      	adds	r0, #0
    37dc:	bf18      	it	ne
    37de:	2001      	movne	r0, #1
    37e0:	4b0a      	ldr	r3, [pc, #40]	; (380c <ringbuffer_put+0x3c>)
    37e2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    37e4:	68e3      	ldr	r3, [r4, #12]
    37e6:	6862      	ldr	r2, [r4, #4]
    37e8:	4013      	ands	r3, r2
    37ea:	6822      	ldr	r2, [r4, #0]
    37ec:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    37ee:	68e3      	ldr	r3, [r4, #12]
    37f0:	6861      	ldr	r1, [r4, #4]
    37f2:	68a2      	ldr	r2, [r4, #8]
    37f4:	1a9a      	subs	r2, r3, r2
    37f6:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    37f8:	bf84      	itt	hi
    37fa:	1a59      	subhi	r1, r3, r1
    37fc:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    37fe:	3301      	adds	r3, #1
    3800:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    3802:	2000      	movs	r0, #0
    3804:	bd38      	pop	{r3, r4, r5, pc}
    3806:	bf00      	nop
    3808:	00008de0 	.word	0x00008de0
    380c:	000036d5 	.word	0x000036d5

00003810 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    3810:	b510      	push	{r4, lr}
	ASSERT(rb);
    3812:	4604      	mov	r4, r0
    3814:	2271      	movs	r2, #113	; 0x71
    3816:	4905      	ldr	r1, [pc, #20]	; (382c <ringbuffer_num+0x1c>)
    3818:	3000      	adds	r0, #0
    381a:	bf18      	it	ne
    381c:	2001      	movne	r0, #1
    381e:	4b04      	ldr	r3, [pc, #16]	; (3830 <ringbuffer_num+0x20>)
    3820:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    3822:	68e0      	ldr	r0, [r4, #12]
    3824:	68a3      	ldr	r3, [r4, #8]
}
    3826:	1ac0      	subs	r0, r0, r3
    3828:	bd10      	pop	{r4, pc}
    382a:	bf00      	nop
    382c:	00008de0 	.word	0x00008de0
    3830:	000036d5 	.word	0x000036d5

00003834 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    3834:	b510      	push	{r4, lr}
	ASSERT(rb);
    3836:	4604      	mov	r4, r0
    3838:	227b      	movs	r2, #123	; 0x7b
    383a:	4905      	ldr	r1, [pc, #20]	; (3850 <ringbuffer_flush+0x1c>)
    383c:	3000      	adds	r0, #0
    383e:	bf18      	it	ne
    3840:	2001      	movne	r0, #1
    3842:	4b04      	ldr	r3, [pc, #16]	; (3854 <ringbuffer_flush+0x20>)
    3844:	4798      	blx	r3

	rb->read_index = rb->write_index;
    3846:	68e3      	ldr	r3, [r4, #12]
    3848:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    384a:	2000      	movs	r0, #0
    384c:	bd10      	pop	{r4, pc}
    384e:	bf00      	nop
    3850:	00008de0 	.word	0x00008de0
    3854:	000036d5 	.word	0x000036d5

00003858 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    3858:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    385a:	4a06      	ldr	r2, [pc, #24]	; (3874 <_sbrk+0x1c>)
    385c:	6812      	ldr	r2, [r2, #0]
    385e:	b122      	cbz	r2, 386a <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3860:	4a04      	ldr	r2, [pc, #16]	; (3874 <_sbrk+0x1c>)
    3862:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3864:	4403      	add	r3, r0
    3866:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    3868:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    386a:	4903      	ldr	r1, [pc, #12]	; (3878 <_sbrk+0x20>)
    386c:	4a01      	ldr	r2, [pc, #4]	; (3874 <_sbrk+0x1c>)
    386e:	6011      	str	r1, [r2, #0]
    3870:	e7f6      	b.n	3860 <_sbrk+0x8>
    3872:	bf00      	nop
    3874:	20000564 	.word	0x20000564
    3878:	20013ea0 	.word	0x20013ea0

0000387c <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    387c:	b510      	push	{r4, lr}
    387e:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    3880:	f44f 7281 	mov.w	r2, #258	; 0x102
    3884:	4915      	ldr	r1, [pc, #84]	; (38dc <_ac_init+0x60>)
    3886:	4816      	ldr	r0, [pc, #88]	; (38e0 <_ac_init+0x64>)
    3888:	4284      	cmp	r4, r0
    388a:	bf14      	ite	ne
    388c:	2000      	movne	r0, #0
    388e:	2001      	moveq	r0, #1
    3890:	4b14      	ldr	r3, [pc, #80]	; (38e4 <_ac_init+0x68>)
    3892:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    3894:	6a23      	ldr	r3, [r4, #32]
    3896:	f013 0f01 	tst.w	r3, #1
    389a:	d1fb      	bne.n	3894 <_ac_init+0x18>
    389c:	6a23      	ldr	r3, [r4, #32]
    389e:	f013 0f03 	tst.w	r3, #3
    38a2:	d1fb      	bne.n	389c <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    38a4:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    38a6:	f013 0f02 	tst.w	r3, #2
    38aa:	d114      	bne.n	38d6 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    38ac:	6a23      	ldr	r3, [r4, #32]
    38ae:	f013 0f01 	tst.w	r3, #1
    38b2:	d1fb      	bne.n	38ac <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    38b4:	7823      	ldrb	r3, [r4, #0]
    38b6:	f043 0301 	orr.w	r3, r3, #1
    38ba:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    38bc:	6a23      	ldr	r3, [r4, #32]
    38be:	f013 0f01 	tst.w	r3, #1
    38c2:	d1fb      	bne.n	38bc <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    38c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    38c8:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    38ca:	2000      	movs	r0, #0
    38cc:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    38ce:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    38d0:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    38d2:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    38d4:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    38d6:	f06f 0010 	mvn.w	r0, #16
}
    38da:	bd10      	pop	{r4, pc}
    38dc:	00008e04 	.word	0x00008e04
    38e0:	42002000 	.word	0x42002000
    38e4:	000036d5 	.word	0x000036d5

000038e8 <_ac_sync_init>:
{
    38e8:	b538      	push	{r3, r4, r5, lr}
    38ea:	460c      	mov	r4, r1
	ASSERT(device);
    38ec:	4605      	mov	r5, r0
    38ee:	226c      	movs	r2, #108	; 0x6c
    38f0:	4905      	ldr	r1, [pc, #20]	; (3908 <_ac_sync_init+0x20>)
    38f2:	3000      	adds	r0, #0
    38f4:	bf18      	it	ne
    38f6:	2001      	movne	r0, #1
    38f8:	4b04      	ldr	r3, [pc, #16]	; (390c <_ac_sync_init+0x24>)
    38fa:	4798      	blx	r3
	device->hw = hw;
    38fc:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    38fe:	4620      	mov	r0, r4
    3900:	4b03      	ldr	r3, [pc, #12]	; (3910 <_ac_sync_init+0x28>)
    3902:	4798      	blx	r3
}
    3904:	bd38      	pop	{r3, r4, r5, pc}
    3906:	bf00      	nop
    3908:	00008e04 	.word	0x00008e04
    390c:	000036d5 	.word	0x000036d5
    3910:	0000387d 	.word	0x0000387d

00003914 <_adc_get_irq_num>:
/**
 * \brief Retrieve ordinal number of the given adc hardware instance
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    3914:	6940      	ldr	r0, [r0, #20]
    3916:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    391a:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    391e:	0a80      	lsrs	r0, r0, #10
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _adc_get_irq_num(const struct _adc_async_device *const device)
{

	return ADC0_0_IRQn + (_adc_get_hardware_index(device->hw) << 1);
    3920:	0040      	lsls	r0, r0, #1
    3922:	3076      	adds	r0, #118	; 0x76
}
    3924:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    3928:	4770      	bx	lr
	...

0000392c <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    392c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    392e:	f013 0f01 	tst.w	r3, #1
    3932:	d1fb      	bne.n	392c <_adc_init>
    3934:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3936:	f013 0f03 	tst.w	r3, #3
    393a:	d1fb      	bne.n	3934 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    393c:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    393e:	f013 0f02 	tst.w	r3, #2
    3942:	d12a      	bne.n	399a <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3944:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3946:	f013 0f01 	tst.w	r3, #1
    394a:	d1fb      	bne.n	3944 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    394c:	8803      	ldrh	r3, [r0, #0]
    394e:	b29b      	uxth	r3, r3
    3950:	f043 0301 	orr.w	r3, r3, #1
    3954:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3956:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3958:	f013 0f01 	tst.w	r3, #1
    395c:	d1fb      	bne.n	3956 <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    395e:	2216      	movs	r2, #22
    3960:	4b0f      	ldr	r3, [pc, #60]	; (39a0 <_adc_init+0x74>)
    3962:	fb02 3101 	mla	r1, r2, r1, r3
    3966:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    3968:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    396a:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    396c:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    396e:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    3970:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    3972:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    3974:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    3976:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    3978:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    397a:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    397c:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    397e:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    3980:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    3982:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    3984:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    3986:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    3988:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    398a:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    398c:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    398e:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    3990:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    3992:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    3994:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    3996:	2000      	movs	r0, #0
    3998:	4770      	bx	lr
		return ERR_DENIED;
    399a:	f06f 0010 	mvn.w	r0, #16
}
    399e:	4770      	bx	lr
    39a0:	00008e18 	.word	0x00008e18

000039a4 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    39a4:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    39a8:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    39ac:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    39b0:	b148      	cbz	r0, 39c6 <_adc_get_regs+0x22>
    39b2:	2801      	cmp	r0, #1
    39b4:	d009      	beq.n	39ca <_adc_get_regs+0x26>
{
    39b6:	b508      	push	{r3, lr}
	ASSERT(false);
    39b8:	2291      	movs	r2, #145	; 0x91
    39ba:	4905      	ldr	r1, [pc, #20]	; (39d0 <_adc_get_regs+0x2c>)
    39bc:	2000      	movs	r0, #0
    39be:	4b05      	ldr	r3, [pc, #20]	; (39d4 <_adc_get_regs+0x30>)
    39c0:	4798      	blx	r3
	return 0;
    39c2:	2000      	movs	r0, #0
    39c4:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    39c6:	2000      	movs	r0, #0
    39c8:	4770      	bx	lr
    39ca:	2001      	movs	r0, #1
    39cc:	4770      	bx	lr
    39ce:	bf00      	nop
    39d0:	00008e44 	.word	0x00008e44
    39d4:	000036d5 	.word	0x000036d5

000039d8 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    39d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39dc:	460d      	mov	r5, r1
	int32_t init_status;

	ASSERT(device);
    39de:	4604      	mov	r4, r0
    39e0:	22d7      	movs	r2, #215	; 0xd7
    39e2:	4935      	ldr	r1, [pc, #212]	; (3ab8 <_adc_sync_init+0xe0>)
    39e4:	3000      	adds	r0, #0
    39e6:	bf18      	it	ne
    39e8:	2001      	movne	r0, #1
    39ea:	4b34      	ldr	r3, [pc, #208]	; (3abc <_adc_sync_init+0xe4>)
    39ec:	4798      	blx	r3

	init_status = _adc_init(hw, _adc_get_regs((uint32_t)hw));
    39ee:	4628      	mov	r0, r5
    39f0:	4b33      	ldr	r3, [pc, #204]	; (3ac0 <_adc_sync_init+0xe8>)
    39f2:	4798      	blx	r3
    39f4:	4601      	mov	r1, r0
    39f6:	4628      	mov	r0, r5
    39f8:	4b32      	ldr	r3, [pc, #200]	; (3ac4 <_adc_sync_init+0xec>)
    39fa:	4798      	blx	r3
	if (init_status) {
    39fc:	4607      	mov	r7, r0
    39fe:	2800      	cmp	r0, #0
    3a00:	d157      	bne.n	3ab2 <_adc_sync_init+0xda>
		return init_status;
	}
	device->hw = hw;
    3a02:	6025      	str	r5, [r4, #0]
	_adc_init_irq_param(hw, device);
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 0);
    3a04:	4620      	mov	r0, r4
    3a06:	4e30      	ldr	r6, [pc, #192]	; (3ac8 <_adc_sync_init+0xf0>)
    3a08:	47b0      	blx	r6
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3a0a:	0943      	lsrs	r3, r0, #5
    3a0c:	f000 001f 	and.w	r0, r0, #31
    3a10:	2501      	movs	r5, #1
    3a12:	fa05 f000 	lsl.w	r0, r5, r0
    3a16:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3acc <_adc_sync_init+0xf4>
    3a1a:	3320      	adds	r3, #32
    3a1c:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a24:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 0);
    3a28:	4620      	mov	r0, r4
    3a2a:	47b0      	blx	r6
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3a2c:	0943      	lsrs	r3, r0, #5
    3a2e:	f000 001f 	and.w	r0, r0, #31
    3a32:	fa05 f000 	lsl.w	r0, r5, r0
    3a36:	3360      	adds	r3, #96	; 0x60
    3a38:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 0);
    3a3c:	4620      	mov	r0, r4
    3a3e:	47b0      	blx	r6
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3a40:	0943      	lsrs	r3, r0, #5
    3a42:	f000 001f 	and.w	r0, r0, #31
    3a46:	4085      	lsls	r5, r0
    3a48:	f848 5023 	str.w	r5, [r8, r3, lsl #2]
	NVIC_DisableIRQ(_adc_get_irq_num(device) + 1);
    3a4c:	4620      	mov	r0, r4
    3a4e:	47b0      	blx	r6
    3a50:	3001      	adds	r0, #1
    3a52:	b280      	uxth	r0, r0
    3a54:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3a56:	2b00      	cmp	r3, #0
    3a58:	db2b      	blt.n	3ab2 <_adc_sync_init+0xda>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3a5a:	095b      	lsrs	r3, r3, #5
    3a5c:	f000 001f 	and.w	r0, r0, #31
    3a60:	2201      	movs	r2, #1
    3a62:	fa02 f000 	lsl.w	r0, r2, r0
    3a66:	3320      	adds	r3, #32
    3a68:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3a6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a70:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_adc_get_irq_num(device) + 1);
    3a74:	4620      	mov	r0, r4
    3a76:	47b0      	blx	r6
    3a78:	3001      	adds	r0, #1
    3a7a:	b280      	uxth	r0, r0
    3a7c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3a7e:	2b00      	cmp	r3, #0
    3a80:	db17      	blt.n	3ab2 <_adc_sync_init+0xda>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3a82:	095b      	lsrs	r3, r3, #5
    3a84:	f000 001f 	and.w	r0, r0, #31
    3a88:	2201      	movs	r2, #1
    3a8a:	fa02 f000 	lsl.w	r0, r2, r0
    3a8e:	3360      	adds	r3, #96	; 0x60
    3a90:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	NVIC_EnableIRQ(_adc_get_irq_num(device) + 1);
    3a94:	4620      	mov	r0, r4
    3a96:	47b0      	blx	r6
    3a98:	3001      	adds	r0, #1
    3a9a:	b280      	uxth	r0, r0
    3a9c:	b203      	sxth	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3a9e:	2b00      	cmp	r3, #0
    3aa0:	db07      	blt.n	3ab2 <_adc_sync_init+0xda>
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3aa2:	095b      	lsrs	r3, r3, #5
    3aa4:	f000 001f 	and.w	r0, r0, #31
    3aa8:	2201      	movs	r2, #1
    3aaa:	fa02 f000 	lsl.w	r0, r2, r0
    3aae:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
	return ERR_NONE;
}
    3ab2:	4638      	mov	r0, r7
    3ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ab8:	00008e44 	.word	0x00008e44
    3abc:	000036d5 	.word	0x000036d5
    3ac0:	000039a5 	.word	0x000039a5
    3ac4:	0000392d 	.word	0x0000392d
    3ac8:	00003915 	.word	0x00003915
    3acc:	e000e100 	.word	0xe000e100

00003ad0 <_adc_sync_enable_channel>:
 */
void _adc_sync_enable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_set_CTRLA_ENABLE_bit(device->hw);
    3ad0:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3ad2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3ad4:	f013 0f03 	tst.w	r3, #3
    3ad8:	d1fb      	bne.n	3ad2 <_adc_sync_enable_channel+0x2>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_ENABLE;
    3ada:	8813      	ldrh	r3, [r2, #0]
    3adc:	b29b      	uxth	r3, r3
    3ade:	f043 0302 	orr.w	r3, r3, #2
    3ae2:	8013      	strh	r3, [r2, #0]
    3ae4:	4770      	bx	lr

00003ae6 <_adc_sync_disable_channel>:
 */
void _adc_sync_disable_channel(struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	hri_adc_clear_CTRLA_ENABLE_bit(device->hw);
    3ae6:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3ae8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3aea:	f013 0f03 	tst.w	r3, #3
    3aee:	d1fb      	bne.n	3ae8 <_adc_sync_disable_channel+0x2>
	((Adc *)hw)->CTRLA.reg &= ~ADC_CTRLA_ENABLE;
    3af0:	8813      	ldrh	r3, [r2, #0]
    3af2:	f023 0302 	bic.w	r3, r3, #2
    3af6:	041b      	lsls	r3, r3, #16
    3af8:	0c1b      	lsrs	r3, r3, #16
    3afa:	8013      	strh	r3, [r2, #0]
    3afc:	4770      	bx	lr

00003afe <_adc_sync_get_data_size>:
/**
 * \brief Retrieve ADC conversion data size
 */
uint8_t _adc_sync_get_data_size(const struct _adc_sync_device *const device)
{
	return hri_adc_read_CTRLB_RESSEL_bf(device->hw) == ADC_CTRLB_RESSEL_8BIT_Val ? 1 : 2;
    3afe:	6803      	ldr	r3, [r0, #0]
	tmp = ((Adc *)hw)->CTRLB.reg;
    3b00:	88db      	ldrh	r3, [r3, #6]
    3b02:	f3c3 03c1 	ubfx	r3, r3, #3, #2
    3b06:	2b03      	cmp	r3, #3
}
    3b08:	bf0c      	ite	eq
    3b0a:	2001      	moveq	r0, #1
    3b0c:	2002      	movne	r0, #2
    3b0e:	4770      	bx	lr

00003b10 <_adc_sync_is_channel_conversion_done>:
 */
bool _adc_sync_is_channel_conversion_done(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_get_interrupt_RESRDY_bit(device->hw);
    3b10:	6803      	ldr	r3, [r0, #0]
	return (((Adc *)hw)->INTFLAG.reg & ADC_INTFLAG_RESRDY) >> ADC_INTFLAG_RESRDY_Pos;
    3b12:	f893 002e 	ldrb.w	r0, [r3, #46]	; 0x2e
}
    3b16:	f000 0001 	and.w	r0, r0, #1
    3b1a:	4770      	bx	lr

00003b1c <_adc_sync_convert>:
/**
 * \brief Make conversion
 */
void _adc_sync_convert(struct _adc_sync_device *const device)
{
	hri_adc_set_SWTRIG_START_bit(device->hw);
    3b1c:	6802      	ldr	r2, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3b1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    3b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3b24:	2b00      	cmp	r3, #0
    3b26:	d1fa      	bne.n	3b1e <_adc_sync_convert+0x2>

static inline void hri_adc_set_SWTRIG_START_bit(const void *const hw)
{
	ADC_CRITICAL_SECTION_ENTER();
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_MASK);
	((Adc *)hw)->SWTRIG.reg |= ADC_SWTRIG_START;
    3b28:	7d13      	ldrb	r3, [r2, #20]
    3b2a:	f043 0302 	orr.w	r3, r3, #2
    3b2e:	7513      	strb	r3, [r2, #20]
    3b30:	4770      	bx	lr

00003b32 <_adc_sync_read_channel_data>:
 */
uint16_t _adc_sync_read_channel_data(const struct _adc_sync_device *const device, const uint8_t channel)
{
	(void)channel;

	return hri_adc_read_RESULT_reg(device->hw);
    3b32:	6803      	ldr	r3, [r0, #0]
	return tmp;
}

static inline hri_adc_result_reg_t hri_adc_read_RESULT_reg(const void *const hw)
{
	return ((Adc *)hw)->RESULT.reg;
    3b34:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
}
    3b38:	b280      	uxth	r0, r0
    3b3a:	4770      	bx	lr

00003b3c <_adc_sync_set_inputs>:
/**
 * \brief Set channels input sources
 */
void _adc_sync_set_inputs(struct _adc_sync_device *const device, const adc_pos_input_t pos_input,
                          const adc_neg_input_t neg_input, const uint8_t channel)
{
    3b3c:	b410      	push	{r4}
	(void)channel;

	hri_adc_write_INPUTCTRL_MUXPOS_bf(device->hw, pos_input);
    3b3e:	6804      	ldr	r4, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3b40:	6b23      	ldr	r3, [r4, #48]	; 0x30
    3b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3b46:	2b00      	cmp	r3, #0
    3b48:	d1fa      	bne.n	3b40 <_adc_sync_set_inputs+0x4>
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    3b4a:	88a3      	ldrh	r3, [r4, #4]
	tmp &= ~ADC_INPUTCTRL_MUXPOS_Msk;
    3b4c:	f023 031f 	bic.w	r3, r3, #31
    3b50:	041b      	lsls	r3, r3, #16
    3b52:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXPOS(data);
    3b54:	f001 011f 	and.w	r1, r1, #31
    3b58:	430b      	orrs	r3, r1
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    3b5a:	80a3      	strh	r3, [r4, #4]
	hri_adc_write_INPUTCTRL_MUXNEG_bf(device->hw, neg_input);
    3b5c:	6801      	ldr	r1, [r0, #0]
    3b5e:	b292      	uxth	r2, r2
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    3b60:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    3b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
    3b66:	2b00      	cmp	r3, #0
    3b68:	d1fa      	bne.n	3b60 <_adc_sync_set_inputs+0x24>
	tmp = ((Adc *)hw)->INPUTCTRL.reg;
    3b6a:	888b      	ldrh	r3, [r1, #4]
	tmp &= ~ADC_INPUTCTRL_MUXNEG_Msk;
    3b6c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3b70:	041b      	lsls	r3, r3, #16
    3b72:	0c1b      	lsrs	r3, r3, #16
	tmp |= ADC_INPUTCTRL_MUXNEG(data);
    3b74:	0212      	lsls	r2, r2, #8
    3b76:	f402 52f8 	and.w	r2, r2, #7936	; 0x1f00
    3b7a:	4313      	orrs	r3, r2
	((Adc *)hw)->INPUTCTRL.reg = tmp;
    3b7c:	808b      	strh	r3, [r1, #4]
}
    3b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    3b82:	4770      	bx	lr

00003b84 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3b84:	0943      	lsrs	r3, r0, #5
    3b86:	f000 001f 	and.w	r0, r0, #31
    3b8a:	2201      	movs	r2, #1
    3b8c:	fa02 f000 	lsl.w	r0, r2, r0
    3b90:	3340      	adds	r3, #64	; 0x40
    3b92:	4a02      	ldr	r2, [pc, #8]	; (3b9c <_irq_set+0x18>)
    3b94:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    3b98:	4770      	bx	lr
    3b9a:	bf00      	nop
    3b9c:	e000e100 	.word	0xe000e100

00003ba0 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    3ba0:	f64b 3380 	movw	r3, #48000	; 0xbb80
    3ba4:	fb03 f000 	mul.w	r0, r3, r0
    3ba8:	4770      	bx	lr
	...

00003bac <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    3bac:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    3bae:	4a0c      	ldr	r2, [pc, #48]	; (3be0 <_init_chip+0x34>)
    3bb0:	8813      	ldrh	r3, [r2, #0]
    3bb2:	b29b      	uxth	r3, r3
    3bb4:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    3bb6:	4b0b      	ldr	r3, [pc, #44]	; (3be4 <_init_chip+0x38>)
    3bb8:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    3bba:	4b0b      	ldr	r3, [pc, #44]	; (3be8 <_init_chip+0x3c>)
    3bbc:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    3bbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3bc2:	4c0a      	ldr	r4, [pc, #40]	; (3bec <_init_chip+0x40>)
    3bc4:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    3bc6:	4b0a      	ldr	r3, [pc, #40]	; (3bf0 <_init_chip+0x44>)
    3bc8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    3bca:	f240 70ff 	movw	r0, #2047	; 0x7ff
    3bce:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    3bd0:	4a08      	ldr	r2, [pc, #32]	; (3bf4 <_init_chip+0x48>)
    3bd2:	6913      	ldr	r3, [r2, #16]
    3bd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    3bd8:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    3bda:	4b07      	ldr	r3, [pc, #28]	; (3bf8 <_init_chip+0x4c>)
    3bdc:	4798      	blx	r3
    3bde:	bd10      	pop	{r4, pc}
    3be0:	41004000 	.word	0x41004000
    3be4:	0000407d 	.word	0x0000407d
    3be8:	00003fa5 	.word	0x00003fa5
    3bec:	00003efd 	.word	0x00003efd
    3bf0:	000040a9 	.word	0x000040a9
    3bf4:	40000800 	.word	0x40000800
    3bf8:	00003d05 	.word	0x00003d05

00003bfc <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    3bfc:	b510      	push	{r4, lr}
    3bfe:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    3c00:	22f3      	movs	r2, #243	; 0xf3
    3c02:	4915      	ldr	r1, [pc, #84]	; (3c58 <_dac_init+0x5c>)
    3c04:	4815      	ldr	r0, [pc, #84]	; (3c5c <_dac_init+0x60>)
    3c06:	4284      	cmp	r4, r0
    3c08:	bf14      	ite	ne
    3c0a:	2000      	movne	r0, #0
    3c0c:	2001      	moveq	r0, #1
    3c0e:	4b14      	ldr	r3, [pc, #80]	; (3c60 <_dac_init+0x64>)
    3c10:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    3c12:	68a3      	ldr	r3, [r4, #8]
    3c14:	f013 0f01 	tst.w	r3, #1
    3c18:	d1fb      	bne.n	3c12 <_dac_init+0x16>
    3c1a:	68a3      	ldr	r3, [r4, #8]
    3c1c:	f013 0f03 	tst.w	r3, #3
    3c20:	d1fb      	bne.n	3c1a <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    3c22:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    3c24:	f013 0f02 	tst.w	r3, #2
    3c28:	d113      	bne.n	3c52 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    3c2a:	68a3      	ldr	r3, [r4, #8]
    3c2c:	f013 0f01 	tst.w	r3, #1
    3c30:	d1fb      	bne.n	3c2a <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    3c32:	7823      	ldrb	r3, [r4, #0]
    3c34:	f043 0301 	orr.w	r3, r3, #1
    3c38:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    3c3a:	68a3      	ldr	r3, [r4, #8]
    3c3c:	f013 0f01 	tst.w	r3, #1
    3c40:	d1fb      	bne.n	3c3a <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    3c42:	2000      	movs	r0, #0
    3c44:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    3c46:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    3c48:	81a0      	strh	r0, [r4, #12]
    3c4a:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    3c4c:	2301      	movs	r3, #1
    3c4e:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    3c50:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    3c52:	f06f 0003 	mvn.w	r0, #3
}
    3c56:	bd10      	pop	{r4, pc}
    3c58:	00008e5c 	.word	0x00008e5c
    3c5c:	43002400 	.word	0x43002400
    3c60:	000036d5 	.word	0x000036d5

00003c64 <_dac_sync_init>:
{
    3c64:	b538      	push	{r3, r4, r5, lr}
    3c66:	460c      	mov	r4, r1
	ASSERT(device);
    3c68:	4605      	mov	r5, r0
    3c6a:	2261      	movs	r2, #97	; 0x61
    3c6c:	4905      	ldr	r1, [pc, #20]	; (3c84 <_dac_sync_init+0x20>)
    3c6e:	3000      	adds	r0, #0
    3c70:	bf18      	it	ne
    3c72:	2001      	movne	r0, #1
    3c74:	4b04      	ldr	r3, [pc, #16]	; (3c88 <_dac_sync_init+0x24>)
    3c76:	4798      	blx	r3
	device->hw = hw;
    3c78:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    3c7a:	4620      	mov	r0, r4
    3c7c:	4b03      	ldr	r3, [pc, #12]	; (3c8c <_dac_sync_init+0x28>)
    3c7e:	4798      	blx	r3
}
    3c80:	bd38      	pop	{r3, r4, r5, pc}
    3c82:	bf00      	nop
    3c84:	00008e5c 	.word	0x00008e5c
    3c88:	000036d5 	.word	0x000036d5
    3c8c:	00003bfd 	.word	0x00003bfd

00003c90 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    3c90:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    3c92:	4a1a      	ldr	r2, [pc, #104]	; (3cfc <_dmac_handler+0x6c>)
    3c94:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    3c96:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    3c9a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    3c9e:	4818      	ldr	r0, [pc, #96]	; (3d00 <_dmac_handler+0x70>)
    3ca0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    3ca4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3ca8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    3cac:	f012 0f01 	tst.w	r2, #1
    3cb0:	d10a      	bne.n	3cc8 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    3cb2:	011a      	lsls	r2, r3, #4
    3cb4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3cb8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3cbc:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    3cc0:	f012 0f02 	tst.w	r2, #2
    3cc4:	d10b      	bne.n	3cde <_dmac_handler+0x4e>
    3cc6:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    3cc8:	011a      	lsls	r2, r3, #4
    3cca:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3cce:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3cd2:	2101      	movs	r1, #1
    3cd4:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    3cd8:	6843      	ldr	r3, [r0, #4]
    3cda:	4798      	blx	r3
    3cdc:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    3cde:	011a      	lsls	r2, r3, #4
    3ce0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3ce4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    3ce8:	2102      	movs	r1, #2
    3cea:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    3cee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3cf2:	4a03      	ldr	r2, [pc, #12]	; (3d00 <_dmac_handler+0x70>)
    3cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3cf8:	4798      	blx	r3
	}
}
    3cfa:	e7e4      	b.n	3cc6 <_dmac_handler+0x36>
    3cfc:	4100a000 	.word	0x4100a000
    3d00:	20000570 	.word	0x20000570

00003d04 <_dma_init>:
{
    3d04:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    3d06:	4a33      	ldr	r2, [pc, #204]	; (3dd4 <_dma_init+0xd0>)
    3d08:	8813      	ldrh	r3, [r2, #0]
    3d0a:	f023 0302 	bic.w	r3, r3, #2
    3d0e:	041b      	lsls	r3, r3, #16
    3d10:	0c1b      	lsrs	r3, r3, #16
    3d12:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    3d14:	8853      	ldrh	r3, [r2, #2]
    3d16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    3d1a:	041b      	lsls	r3, r3, #16
    3d1c:	0c1b      	lsrs	r3, r3, #16
    3d1e:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    3d20:	8813      	ldrh	r3, [r2, #0]
    3d22:	b29b      	uxth	r3, r3
    3d24:	f043 0301 	orr.w	r3, r3, #1
    3d28:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    3d2a:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    3d2c:	f013 0f01 	tst.w	r3, #1
    3d30:	d1fb      	bne.n	3d2a <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    3d32:	4b28      	ldr	r3, [pc, #160]	; (3dd4 <_dma_init+0xd0>)
    3d34:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    3d38:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    3d3a:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    3d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    3d40:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    3d42:	2000      	movs	r0, #0
    3d44:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    3d46:	4a24      	ldr	r2, [pc, #144]	; (3dd8 <_dma_init+0xd4>)
    3d48:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    3d4c:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    3d4e:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    3d52:	639a      	str	r2, [r3, #56]	; 0x38
    3d54:	4b21      	ldr	r3, [pc, #132]	; (3ddc <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    3d56:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    3d5a:	681c      	ldr	r4, [r3, #0]
    3d5c:	0101      	lsls	r1, r0, #4
    3d5e:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    3d62:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    3d66:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    3d68:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    3d6a:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    3d6e:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    3d70:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    3d74:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    3d76:	4429      	add	r1, r5
    3d78:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    3d7c:	3001      	adds	r0, #1
    3d7e:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    3d80:	2820      	cmp	r0, #32
    3d82:	d1ea      	bne.n	3d5a <_dma_init+0x56>
    3d84:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3d86:	2001      	movs	r0, #1
    3d88:	4915      	ldr	r1, [pc, #84]	; (3de0 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    3d8a:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    3d8c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3d90:	d00b      	beq.n	3daa <_dma_init+0xa6>
    3d92:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    3d94:	2b24      	cmp	r3, #36	; 0x24
    3d96:	d1f8      	bne.n	3d8a <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    3d98:	4a0e      	ldr	r2, [pc, #56]	; (3dd4 <_dma_init+0xd0>)
    3d9a:	8813      	ldrh	r3, [r2, #0]
    3d9c:	b29b      	uxth	r3, r3
    3d9e:	f043 0302 	orr.w	r3, r3, #2
    3da2:	8013      	strh	r3, [r2, #0]
}
    3da4:	2000      	movs	r0, #0
    3da6:	bc30      	pop	{r4, r5}
    3da8:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3daa:	095c      	lsrs	r4, r3, #5
    3dac:	f002 021f 	and.w	r2, r2, #31
    3db0:	fa00 f202 	lsl.w	r2, r0, r2
    3db4:	f104 0520 	add.w	r5, r4, #32
    3db8:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    3dbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3dc0:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3dc4:	f104 0560 	add.w	r5, r4, #96	; 0x60
    3dc8:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3dcc:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    3dd0:	e7df      	b.n	3d92 <_dma_init+0x8e>
    3dd2:	bf00      	nop
    3dd4:	4100a000 	.word	0x4100a000
    3dd8:	20000570 	.word	0x20000570
    3ddc:	00008e74 	.word	0x00008e74
    3de0:	e000e100 	.word	0xe000e100

00003de4 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    3de4:	b508      	push	{r3, lr}
	_dmac_handler();
    3de6:	4b01      	ldr	r3, [pc, #4]	; (3dec <DMAC_0_Handler+0x8>)
    3de8:	4798      	blx	r3
    3dea:	bd08      	pop	{r3, pc}
    3dec:	00003c91 	.word	0x00003c91

00003df0 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    3df0:	b508      	push	{r3, lr}
	_dmac_handler();
    3df2:	4b01      	ldr	r3, [pc, #4]	; (3df8 <DMAC_1_Handler+0x8>)
    3df4:	4798      	blx	r3
    3df6:	bd08      	pop	{r3, pc}
    3df8:	00003c91 	.word	0x00003c91

00003dfc <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    3dfc:	b508      	push	{r3, lr}
	_dmac_handler();
    3dfe:	4b01      	ldr	r3, [pc, #4]	; (3e04 <DMAC_2_Handler+0x8>)
    3e00:	4798      	blx	r3
    3e02:	bd08      	pop	{r3, pc}
    3e04:	00003c91 	.word	0x00003c91

00003e08 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    3e08:	b508      	push	{r3, lr}
	_dmac_handler();
    3e0a:	4b01      	ldr	r3, [pc, #4]	; (3e10 <DMAC_3_Handler+0x8>)
    3e0c:	4798      	blx	r3
    3e0e:	bd08      	pop	{r3, pc}
    3e10:	00003c91 	.word	0x00003c91

00003e14 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    3e14:	b508      	push	{r3, lr}
	_dmac_handler();
    3e16:	4b01      	ldr	r3, [pc, #4]	; (3e1c <DMAC_4_Handler+0x8>)
    3e18:	4798      	blx	r3
    3e1a:	bd08      	pop	{r3, pc}
    3e1c:	00003c91 	.word	0x00003c91

00003e20 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3e20:	4a1e      	ldr	r2, [pc, #120]	; (3e9c <_ext_irq_init+0x7c>)
    3e22:	6853      	ldr	r3, [r2, #4]
    3e24:	f013 0f01 	tst.w	r3, #1
    3e28:	d1fb      	bne.n	3e22 <_ext_irq_init+0x2>
    3e2a:	4a1c      	ldr	r2, [pc, #112]	; (3e9c <_ext_irq_init+0x7c>)
    3e2c:	6853      	ldr	r3, [r2, #4]
    3e2e:	f013 0f03 	tst.w	r3, #3
    3e32:	d1fb      	bne.n	3e2c <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    3e34:	4b19      	ldr	r3, [pc, #100]	; (3e9c <_ext_irq_init+0x7c>)
    3e36:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    3e38:	f013 0f02 	tst.w	r3, #2
    3e3c:	d12b      	bne.n	3e96 <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3e3e:	4a17      	ldr	r2, [pc, #92]	; (3e9c <_ext_irq_init+0x7c>)
    3e40:	6853      	ldr	r3, [r2, #4]
    3e42:	f013 0f01 	tst.w	r3, #1
    3e46:	d1fb      	bne.n	3e40 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    3e48:	4a14      	ldr	r2, [pc, #80]	; (3e9c <_ext_irq_init+0x7c>)
    3e4a:	7813      	ldrb	r3, [r2, #0]
    3e4c:	f043 0301 	orr.w	r3, r3, #1
    3e50:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3e52:	6853      	ldr	r3, [r2, #4]
    3e54:	f013 0f01 	tst.w	r3, #1
    3e58:	d1fb      	bne.n	3e52 <_ext_irq_init+0x32>
    3e5a:	4a10      	ldr	r2, [pc, #64]	; (3e9c <_ext_irq_init+0x7c>)
    3e5c:	6853      	ldr	r3, [r2, #4]
    3e5e:	f013 0f03 	tst.w	r3, #3
    3e62:	d1fb      	bne.n	3e5c <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    3e64:	4b0d      	ldr	r3, [pc, #52]	; (3e9c <_ext_irq_init+0x7c>)
    3e66:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    3e68:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    3e6c:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    3e6e:	2200      	movs	r2, #0
    3e70:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    3e72:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    3e74:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    3e76:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    3e78:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    3e7a:	61da      	str	r2, [r3, #28]
    3e7c:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    3e7e:	461a      	mov	r2, r3
    3e80:	6853      	ldr	r3, [r2, #4]
    3e82:	f013 0f03 	tst.w	r3, #3
    3e86:	d1fb      	bne.n	3e80 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    3e88:	4a04      	ldr	r2, [pc, #16]	; (3e9c <_ext_irq_init+0x7c>)
    3e8a:	7813      	ldrb	r3, [r2, #0]
    3e8c:	f043 0302 	orr.w	r3, r3, #2
    3e90:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    3e92:	2000      	movs	r0, #0
    3e94:	4770      	bx	lr
		return ERR_DENIED;
    3e96:	f06f 0010 	mvn.w	r0, #16
}
    3e9a:	4770      	bx	lr
    3e9c:	40002800 	.word	0x40002800

00003ea0 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    3ea0:	b430      	push	{r4, r5}
    3ea2:	4814      	ldr	r0, [pc, #80]	; (3ef4 <_event_system_init+0x54>)
    3ea4:	f100 0543 	add.w	r5, r0, #67	; 0x43
    3ea8:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    3eaa:	4c13      	ldr	r4, [pc, #76]	; (3ef8 <_event_system_init+0x58>)
    3eac:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    3eae:	f813 1b01 	ldrb.w	r1, [r3], #1
    3eb2:	3248      	adds	r2, #72	; 0x48
    3eb4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    3eb8:	42ab      	cmp	r3, r5
    3eba:	d1f7      	bne.n	3eac <_event_system_init+0xc>
    3ebc:	480d      	ldr	r0, [pc, #52]	; (3ef4 <_event_system_init+0x54>)
    3ebe:	f100 0442 	add.w	r4, r0, #66	; 0x42
    3ec2:	3080      	adds	r0, #128	; 0x80
    3ec4:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    3ec6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    3eca:	00ca      	lsls	r2, r1, #3
    3ecc:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    3ed0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    3ed4:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    3ed6:	f850 3f04 	ldr.w	r3, [r0, #4]!
    3eda:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    3edc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    3ee0:	43db      	mvns	r3, r3
    3ee2:	b2db      	uxtb	r3, r3
    3ee4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    3ee8:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    3eea:	2920      	cmp	r1, #32
    3eec:	d1eb      	bne.n	3ec6 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    3eee:	2000      	movs	r0, #0
    3ef0:	bc30      	pop	{r4, r5}
    3ef2:	4770      	bx	lr
    3ef4:	00008f74 	.word	0x00008f74
    3ef8:	4100e000 	.word	0x4100e000

00003efc <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    3efc:	f010 0f01 	tst.w	r0, #1
    3f00:	d002      	beq.n	3f08 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    3f02:	4a23      	ldr	r2, [pc, #140]	; (3f90 <_gclk_init_generators_by_fref+0x94>)
    3f04:	4b23      	ldr	r3, [pc, #140]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f06:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    3f08:	f010 0f02 	tst.w	r0, #2
    3f0c:	d002      	beq.n	3f14 <_gclk_init_generators_by_fref+0x18>
    3f0e:	4a22      	ldr	r2, [pc, #136]	; (3f98 <_gclk_init_generators_by_fref+0x9c>)
    3f10:	4b20      	ldr	r3, [pc, #128]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f12:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    3f14:	f010 0f04 	tst.w	r0, #4
    3f18:	d002      	beq.n	3f20 <_gclk_init_generators_by_fref+0x24>
    3f1a:	4a1d      	ldr	r2, [pc, #116]	; (3f90 <_gclk_init_generators_by_fref+0x94>)
    3f1c:	4b1d      	ldr	r3, [pc, #116]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f1e:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    3f20:	f010 0f08 	tst.w	r0, #8
    3f24:	d002      	beq.n	3f2c <_gclk_init_generators_by_fref+0x30>
    3f26:	4a1a      	ldr	r2, [pc, #104]	; (3f90 <_gclk_init_generators_by_fref+0x94>)
    3f28:	4b1a      	ldr	r3, [pc, #104]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f2a:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    3f2c:	f010 0f10 	tst.w	r0, #16
    3f30:	d002      	beq.n	3f38 <_gclk_init_generators_by_fref+0x3c>
    3f32:	4a17      	ldr	r2, [pc, #92]	; (3f90 <_gclk_init_generators_by_fref+0x94>)
    3f34:	4b17      	ldr	r3, [pc, #92]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f36:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    3f38:	f010 0f20 	tst.w	r0, #32
    3f3c:	d002      	beq.n	3f44 <_gclk_init_generators_by_fref+0x48>
    3f3e:	4a14      	ldr	r2, [pc, #80]	; (3f90 <_gclk_init_generators_by_fref+0x94>)
    3f40:	4b14      	ldr	r3, [pc, #80]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f42:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    3f44:	f010 0f40 	tst.w	r0, #64	; 0x40
    3f48:	d002      	beq.n	3f50 <_gclk_init_generators_by_fref+0x54>
    3f4a:	4a11      	ldr	r2, [pc, #68]	; (3f90 <_gclk_init_generators_by_fref+0x94>)
    3f4c:	4b11      	ldr	r3, [pc, #68]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f4e:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    3f50:	f010 0f80 	tst.w	r0, #128	; 0x80
    3f54:	d002      	beq.n	3f5c <_gclk_init_generators_by_fref+0x60>
    3f56:	4a0e      	ldr	r2, [pc, #56]	; (3f90 <_gclk_init_generators_by_fref+0x94>)
    3f58:	4b0e      	ldr	r3, [pc, #56]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f5a:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    3f5c:	f410 7f80 	tst.w	r0, #256	; 0x100
    3f60:	d002      	beq.n	3f68 <_gclk_init_generators_by_fref+0x6c>
    3f62:	4a0b      	ldr	r2, [pc, #44]	; (3f90 <_gclk_init_generators_by_fref+0x94>)
    3f64:	4b0b      	ldr	r3, [pc, #44]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f66:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    3f68:	f410 7f00 	tst.w	r0, #512	; 0x200
    3f6c:	d002      	beq.n	3f74 <_gclk_init_generators_by_fref+0x78>
    3f6e:	4a08      	ldr	r2, [pc, #32]	; (3f90 <_gclk_init_generators_by_fref+0x94>)
    3f70:	4b08      	ldr	r3, [pc, #32]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f72:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    3f74:	f410 6f80 	tst.w	r0, #1024	; 0x400
    3f78:	d002      	beq.n	3f80 <_gclk_init_generators_by_fref+0x84>
    3f7a:	4a08      	ldr	r2, [pc, #32]	; (3f9c <_gclk_init_generators_by_fref+0xa0>)
    3f7c:	4b05      	ldr	r3, [pc, #20]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f7e:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    3f80:	f410 6f00 	tst.w	r0, #2048	; 0x800
    3f84:	d002      	beq.n	3f8c <_gclk_init_generators_by_fref+0x90>
    3f86:	4a06      	ldr	r2, [pc, #24]	; (3fa0 <_gclk_init_generators_by_fref+0xa4>)
    3f88:	4b02      	ldr	r3, [pc, #8]	; (3f94 <_gclk_init_generators_by_fref+0x98>)
    3f8a:	64da      	str	r2, [r3, #76]	; 0x4c
    3f8c:	4770      	bx	lr
    3f8e:	bf00      	nop
    3f90:	00012b06 	.word	0x00012b06
    3f94:	40001c00 	.word	0x40001c00
    3f98:	00012306 	.word	0x00012306
    3f9c:	00012b05 	.word	0x00012b05
    3fa0:	00013b05 	.word	0x00013b05

00003fa4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    3fa4:	2201      	movs	r2, #1
    3fa6:	4b01      	ldr	r3, [pc, #4]	; (3fac <_mclk_init+0x8>)
    3fa8:	715a      	strb	r2, [r3, #5]
    3faa:	4770      	bx	lr
    3fac:	40000800 	.word	0x40000800

00003fb0 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    3fb0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    3fb2:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    3fb4:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    3fb6:	f012 0f01 	tst.w	r2, #1
    3fba:	d005      	beq.n	3fc8 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    3fbc:	2201      	movs	r2, #1
    3fbe:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    3fc0:	6803      	ldr	r3, [r0, #0]
    3fc2:	b153      	cbz	r3, 3fda <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    3fc4:	4798      	blx	r3
    3fc6:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    3fc8:	8a1a      	ldrh	r2, [r3, #16]
    3fca:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    3fcc:	b12a      	cbz	r2, 3fda <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    3fce:	f240 225e 	movw	r2, #606	; 0x25e
    3fd2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    3fd4:	6843      	ldr	r3, [r0, #4]
    3fd6:	b103      	cbz	r3, 3fda <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    3fd8:	4798      	blx	r3
    3fda:	bd08      	pop	{r3, pc}

00003fdc <_flash_init>:
{
    3fdc:	b538      	push	{r3, r4, r5, lr}
    3fde:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    3fe0:	4605      	mov	r5, r0
    3fe2:	b350      	cbz	r0, 403a <_flash_init+0x5e>
    3fe4:	4816      	ldr	r0, [pc, #88]	; (4040 <_flash_init+0x64>)
    3fe6:	4281      	cmp	r1, r0
    3fe8:	bf14      	ite	ne
    3fea:	2000      	movne	r0, #0
    3fec:	2001      	moveq	r0, #1
    3fee:	2256      	movs	r2, #86	; 0x56
    3ff0:	4914      	ldr	r1, [pc, #80]	; (4044 <_flash_init+0x68>)
    3ff2:	4b15      	ldr	r3, [pc, #84]	; (4048 <_flash_init+0x6c>)
    3ff4:	4798      	blx	r3
	device->hw = hw;
    3ff6:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    3ff8:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    3ffa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    3ffe:	049b      	lsls	r3, r3, #18
    4000:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    4002:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    4004:	4b11      	ldr	r3, [pc, #68]	; (404c <_flash_init+0x70>)
    4006:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4008:	4b11      	ldr	r3, [pc, #68]	; (4050 <_flash_init+0x74>)
    400a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    400e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    4012:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4016:	f3bf 8f6f 	isb	sy
    401a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    401e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    4022:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4026:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    402a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    402e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4032:	6019      	str	r1, [r3, #0]
    4034:	601a      	str	r2, [r3, #0]
}
    4036:	2000      	movs	r0, #0
    4038:	bd38      	pop	{r3, r4, r5, pc}
    403a:	2000      	movs	r0, #0
    403c:	e7d7      	b.n	3fee <_flash_init+0x12>
    403e:	bf00      	nop
    4040:	41004000 	.word	0x41004000
    4044:	00009078 	.word	0x00009078
    4048:	000036d5 	.word	0x000036d5
    404c:	20000af0 	.word	0x20000af0
    4050:	e000e100 	.word	0xe000e100

00004054 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    4054:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    4056:	4b02      	ldr	r3, [pc, #8]	; (4060 <NVMCTRL_0_Handler+0xc>)
    4058:	6818      	ldr	r0, [r3, #0]
    405a:	4b02      	ldr	r3, [pc, #8]	; (4064 <NVMCTRL_0_Handler+0x10>)
    405c:	4798      	blx	r3
    405e:	bd08      	pop	{r3, pc}
    4060:	20000af0 	.word	0x20000af0
    4064:	00003fb1 	.word	0x00003fb1

00004068 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    4068:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    406a:	4b02      	ldr	r3, [pc, #8]	; (4074 <NVMCTRL_1_Handler+0xc>)
    406c:	6818      	ldr	r0, [r3, #0]
    406e:	4b02      	ldr	r3, [pc, #8]	; (4078 <NVMCTRL_1_Handler+0x10>)
    4070:	4798      	blx	r3
    4072:	bd08      	pop	{r3, pc}
    4074:	20000af0 	.word	0x20000af0
    4078:	00003fb1 	.word	0x00003fb1

0000407c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    407c:	4b09      	ldr	r3, [pc, #36]	; (40a4 <_osc32kctrl_init_sources+0x28>)
    407e:	f242 024e 	movw	r2, #8270	; 0x204e
    4082:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    4084:	2201      	movs	r2, #1
    4086:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    4088:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    408a:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    408c:	2200      	movs	r2, #0
    408e:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    4090:	461a      	mov	r2, r3
    4092:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    4094:	f013 0f01 	tst.w	r3, #1
    4098:	d0fb      	beq.n	4092 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    409a:	2204      	movs	r2, #4
    409c:	4b01      	ldr	r3, [pc, #4]	; (40a4 <_osc32kctrl_init_sources+0x28>)
    409e:	741a      	strb	r2, [r3, #16]
    40a0:	4770      	bx	lr
    40a2:	bf00      	nop
    40a4:	40001400 	.word	0x40001400

000040a8 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    40a8:	4a2b      	ldr	r2, [pc, #172]	; (4158 <_oscctrl_init_referenced_generators+0xb0>)
    40aa:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    40ac:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    40b0:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    40b4:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    40b6:	4b29      	ldr	r3, [pc, #164]	; (415c <_oscctrl_init_referenced_generators+0xb4>)
    40b8:	2200      	movs	r2, #0
    40ba:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    40bc:	4a28      	ldr	r2, [pc, #160]	; (4160 <_oscctrl_init_referenced_generators+0xb8>)
    40be:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    40c0:	461a      	mov	r2, r3
    40c2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    40c6:	f013 0f10 	tst.w	r3, #16
    40ca:	d1fa      	bne.n	40c2 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    40cc:	2200      	movs	r2, #0
    40ce:	4b23      	ldr	r3, [pc, #140]	; (415c <_oscctrl_init_referenced_generators+0xb4>)
    40d0:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    40d4:	461a      	mov	r2, r3
    40d6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    40da:	f013 0f04 	tst.w	r3, #4
    40de:	d1fa      	bne.n	40d6 <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    40e0:	2242      	movs	r2, #66	; 0x42
    40e2:	4b1e      	ldr	r3, [pc, #120]	; (415c <_oscctrl_init_referenced_generators+0xb4>)
    40e4:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    40e6:	461a      	mov	r2, r3
    40e8:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    40ec:	f013 0f02 	tst.w	r3, #2
    40f0:	d1fa      	bne.n	40e8 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    40f2:	4b1a      	ldr	r3, [pc, #104]	; (415c <_oscctrl_init_referenced_generators+0xb4>)
    40f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    40f6:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    40f8:	461a      	mov	r2, r3
    40fa:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    40fe:	f013 0f08 	tst.w	r3, #8
    4102:	d1fa      	bne.n	40fa <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    4104:	2282      	movs	r2, #130	; 0x82
    4106:	4b15      	ldr	r3, [pc, #84]	; (415c <_oscctrl_init_referenced_generators+0xb4>)
    4108:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    410c:	461a      	mov	r2, r3
    410e:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    4112:	f013 0f04 	tst.w	r3, #4
    4116:	d1fa      	bne.n	410e <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    4118:	4b10      	ldr	r3, [pc, #64]	; (415c <_oscctrl_init_referenced_generators+0xb4>)
    411a:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    411e:	f013 0f01 	tst.w	r3, #1
    4122:	d012      	beq.n	414a <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    4124:	4a0d      	ldr	r2, [pc, #52]	; (415c <_oscctrl_init_referenced_generators+0xb4>)
    4126:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    4128:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    412c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    4130:	d1f9      	bne.n	4126 <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    4132:	4a09      	ldr	r2, [pc, #36]	; (4158 <_oscctrl_init_referenced_generators+0xb0>)
    4134:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    4136:	2b00      	cmp	r3, #0
    4138:	d1fc      	bne.n	4134 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    413a:	4a07      	ldr	r2, [pc, #28]	; (4158 <_oscctrl_init_referenced_generators+0xb0>)
    413c:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    413e:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    4142:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    4146:	6213      	str	r3, [r2, #32]
    4148:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    414a:	4a04      	ldr	r2, [pc, #16]	; (415c <_oscctrl_init_referenced_generators+0xb4>)
    414c:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    414e:	f413 7f80 	tst.w	r3, #256	; 0x100
    4152:	d0fb      	beq.n	414c <_oscctrl_init_referenced_generators+0xa4>
    4154:	e7ed      	b.n	4132 <_oscctrl_init_referenced_generators+0x8a>
    4156:	bf00      	nop
    4158:	40001c00 	.word	0x40001c00
    415c:	40001000 	.word	0x40001000
    4160:	04010000 	.word	0x04010000

00004164 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    4164:	b500      	push	{lr}
    4166:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    4168:	4b0d      	ldr	r3, [pc, #52]	; (41a0 <RAMECC_Handler+0x3c>)
    416a:	789b      	ldrb	r3, [r3, #2]
    416c:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    416e:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    4170:	9b01      	ldr	r3, [sp, #4]
    4172:	f013 0f02 	tst.w	r3, #2
    4176:	d006      	beq.n	4186 <RAMECC_Handler+0x22>
    4178:	4b0a      	ldr	r3, [pc, #40]	; (41a4 <RAMECC_Handler+0x40>)
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	b11b      	cbz	r3, 4186 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    417e:	4a08      	ldr	r2, [pc, #32]	; (41a0 <RAMECC_Handler+0x3c>)
    4180:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    4182:	4798      	blx	r3
    4184:	e009      	b.n	419a <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    4186:	9b01      	ldr	r3, [sp, #4]
    4188:	f013 0f01 	tst.w	r3, #1
    418c:	d005      	beq.n	419a <RAMECC_Handler+0x36>
    418e:	4b05      	ldr	r3, [pc, #20]	; (41a4 <RAMECC_Handler+0x40>)
    4190:	685b      	ldr	r3, [r3, #4]
    4192:	b113      	cbz	r3, 419a <RAMECC_Handler+0x36>
    4194:	4a02      	ldr	r2, [pc, #8]	; (41a0 <RAMECC_Handler+0x3c>)
    4196:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    4198:	4798      	blx	r3
	} else {
		return;
	}
}
    419a:	b003      	add	sp, #12
    419c:	f85d fb04 	ldr.w	pc, [sp], #4
    41a0:	41020000 	.word	0x41020000
    41a4:	20003e88 	.word	0x20003e88

000041a8 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    41a8:	b470      	push	{r4, r5, r6}
    41aa:	b087      	sub	sp, #28
    41ac:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    41ae:	466c      	mov	r4, sp
    41b0:	4d0c      	ldr	r5, [pc, #48]	; (41e4 <_sercom_get_hardware_index+0x3c>)
    41b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    41b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    41b6:	e895 0003 	ldmia.w	r5, {r0, r1}
    41ba:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    41be:	9b00      	ldr	r3, [sp, #0]
    41c0:	42b3      	cmp	r3, r6
    41c2:	d00c      	beq.n	41de <_sercom_get_hardware_index+0x36>
    41c4:	4632      	mov	r2, r6
    41c6:	2001      	movs	r0, #1
    41c8:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    41cc:	4293      	cmp	r3, r2
    41ce:	d007      	beq.n	41e0 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    41d0:	3001      	adds	r0, #1
    41d2:	2806      	cmp	r0, #6
    41d4:	d1f8      	bne.n	41c8 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    41d6:	2000      	movs	r0, #0
}
    41d8:	b007      	add	sp, #28
    41da:	bc70      	pop	{r4, r5, r6}
    41dc:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    41de:	2000      	movs	r0, #0
			return i;
    41e0:	b2c0      	uxtb	r0, r0
    41e2:	e7f9      	b.n	41d8 <_sercom_get_hardware_index+0x30>
    41e4:	00009098 	.word	0x00009098

000041e8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    41e8:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    41ea:	4b03      	ldr	r3, [pc, #12]	; (41f8 <_sercom_get_irq_num+0x10>)
    41ec:	4798      	blx	r3
    41ee:	0080      	lsls	r0, r0, #2
    41f0:	302e      	adds	r0, #46	; 0x2e
}
    41f2:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    41f6:	bd08      	pop	{r3, pc}
    41f8:	000041a9 	.word	0x000041a9

000041fc <_usart_init>:
{
    41fc:	b538      	push	{r3, r4, r5, lr}
    41fe:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    4200:	4b33      	ldr	r3, [pc, #204]	; (42d0 <_usart_init+0xd4>)
    4202:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    4204:	2803      	cmp	r0, #3
    4206:	d056      	beq.n	42b6 <_usart_init+0xba>
    4208:	2804      	cmp	r0, #4
    420a:	d052      	beq.n	42b2 <_usart_init+0xb6>
    420c:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    420e:	bf08      	it	eq
    4210:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    4212:	d006      	beq.n	4222 <_usart_init+0x26>
	ASSERT(false);
    4214:	f240 2263 	movw	r2, #611	; 0x263
    4218:	492e      	ldr	r1, [pc, #184]	; (42d4 <_usart_init+0xd8>)
    421a:	2000      	movs	r0, #0
    421c:	4b2e      	ldr	r3, [pc, #184]	; (42d8 <_usart_init+0xdc>)
    421e:	4798      	blx	r3
	return 0;
    4220:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    4222:	69e3      	ldr	r3, [r4, #28]
    4224:	f013 0f01 	tst.w	r3, #1
    4228:	d1fb      	bne.n	4222 <_usart_init+0x26>
    422a:	69e3      	ldr	r3, [r4, #28]
    422c:	f013 0f03 	tst.w	r3, #3
    4230:	d1fb      	bne.n	422a <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    4232:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    4234:	f013 0f02 	tst.w	r3, #2
    4238:	d147      	bne.n	42ca <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    423a:	69e3      	ldr	r3, [r4, #28]
    423c:	f013 0f01 	tst.w	r3, #1
    4240:	d1fb      	bne.n	423a <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    4242:	6823      	ldr	r3, [r4, #0]
    4244:	f043 0301 	orr.w	r3, r3, #1
    4248:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    424a:	69e3      	ldr	r3, [r4, #28]
    424c:	f013 0f01 	tst.w	r3, #1
    4250:	d1fb      	bne.n	424a <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    4252:	4610      	mov	r0, r2
    4254:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    4258:	4920      	ldr	r1, [pc, #128]	; (42dc <_usart_init+0xe0>)
    425a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    425e:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    4260:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    4262:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    4264:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    4266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    4268:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    426a:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    426e:	d024      	beq.n	42ba <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    4270:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4274:	4b19      	ldr	r3, [pc, #100]	; (42dc <_usart_init+0xe0>)
    4276:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    427a:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    427c:	89a3      	ldrh	r3, [r4, #12]
    427e:	f361 030c 	bfi	r3, r1, #0, #13
    4282:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    4284:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    4288:	89a3      	ldrh	r3, [r4, #12]
    428a:	f362 334f 	bfi	r3, r2, #13, #3
    428e:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    4290:	4b12      	ldr	r3, [pc, #72]	; (42dc <_usart_init+0xe0>)
    4292:	0042      	lsls	r2, r0, #1
    4294:	1811      	adds	r1, r2, r0
    4296:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    429a:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    429e:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    42a0:	4402      	add	r2, r0
    42a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    42a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    42aa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    42ae:	2000      	movs	r0, #0
    42b0:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    42b2:	2201      	movs	r2, #1
    42b4:	e7b5      	b.n	4222 <_usart_init+0x26>
    42b6:	2200      	movs	r2, #0
    42b8:	e7b3      	b.n	4222 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    42ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    42be:	4b07      	ldr	r3, [pc, #28]	; (42dc <_usart_init+0xe0>)
    42c0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    42c4:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    42c6:	81a3      	strh	r3, [r4, #12]
    42c8:	e7e2      	b.n	4290 <_usart_init+0x94>
		return ERR_DENIED;
    42ca:	f06f 0010 	mvn.w	r0, #16
}
    42ce:	bd38      	pop	{r3, r4, r5, pc}
    42d0:	000041a9 	.word	0x000041a9
    42d4:	00009124 	.word	0x00009124
    42d8:	000036d5 	.word	0x000036d5
    42dc:	00009098 	.word	0x00009098

000042e0 <_usart_async_init>:
{
    42e0:	b570      	push	{r4, r5, r6, lr}
    42e2:	460d      	mov	r5, r1
	ASSERT(device);
    42e4:	4606      	mov	r6, r0
    42e6:	22da      	movs	r2, #218	; 0xda
    42e8:	4916      	ldr	r1, [pc, #88]	; (4344 <_usart_async_init+0x64>)
    42ea:	3000      	adds	r0, #0
    42ec:	bf18      	it	ne
    42ee:	2001      	movne	r0, #1
    42f0:	4b15      	ldr	r3, [pc, #84]	; (4348 <_usart_async_init+0x68>)
    42f2:	4798      	blx	r3
	init_status = _usart_init(hw);
    42f4:	4628      	mov	r0, r5
    42f6:	4b15      	ldr	r3, [pc, #84]	; (434c <_usart_async_init+0x6c>)
    42f8:	4798      	blx	r3
	if (init_status) {
    42fa:	4604      	mov	r4, r0
    42fc:	b9f8      	cbnz	r0, 433e <_usart_async_init+0x5e>
	device->hw = hw;
    42fe:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    4300:	4628      	mov	r0, r5
    4302:	4b13      	ldr	r3, [pc, #76]	; (4350 <_usart_async_init+0x70>)
    4304:	4798      	blx	r3
		irq = irq +2;
    4306:	3002      	adds	r0, #2
    4308:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    430a:	f000 031f 	and.w	r3, r0, #31
    430e:	2201      	movs	r2, #1
    4310:	409a      	lsls	r2, r3
    4312:	0943      	lsrs	r3, r0, #5
    4314:	009b      	lsls	r3, r3, #2
    4316:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    431a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    431e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    4322:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4326:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    432a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    432e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    4332:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    4336:	21e0      	movs	r1, #224	; 0xe0
    4338:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    433c:	601a      	str	r2, [r3, #0]
}
    433e:	4620      	mov	r0, r4
    4340:	bd70      	pop	{r4, r5, r6, pc}
    4342:	bf00      	nop
    4344:	00009124 	.word	0x00009124
    4348:	000036d5 	.word	0x000036d5
    434c:	000041fd 	.word	0x000041fd
    4350:	000041e9 	.word	0x000041e9

00004354 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    4354:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    4356:	69d3      	ldr	r3, [r2, #28]
    4358:	f013 0f03 	tst.w	r3, #3
    435c:	d1fb      	bne.n	4356 <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    435e:	6813      	ldr	r3, [r2, #0]
    4360:	f043 0302 	orr.w	r3, r3, #2
    4364:	6013      	str	r3, [r2, #0]
    4366:	4770      	bx	lr

00004368 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    4368:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    436a:	6299      	str	r1, [r3, #40]	; 0x28
    436c:	4770      	bx	lr

0000436e <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    436e:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    4370:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    4372:	b2c0      	uxtb	r0, r0
    4374:	4770      	bx	lr

00004376 <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    4376:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    4378:	7e18      	ldrb	r0, [r3, #24]
}
    437a:	f000 0001 	and.w	r0, r0, #1
    437e:	4770      	bx	lr

00004380 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    4380:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    4382:	7e18      	ldrb	r0, [r3, #24]
}
    4384:	f3c0 0080 	ubfx	r0, r0, #2, #1
    4388:	4770      	bx	lr
	...

0000438c <_usart_async_set_irq_state>:
{
    438c:	b570      	push	{r4, r5, r6, lr}
    438e:	460c      	mov	r4, r1
    4390:	4616      	mov	r6, r2
	ASSERT(device);
    4392:	4605      	mov	r5, r0
    4394:	f240 2245 	movw	r2, #581	; 0x245
    4398:	4915      	ldr	r1, [pc, #84]	; (43f0 <_usart_async_set_irq_state+0x64>)
    439a:	3000      	adds	r0, #0
    439c:	bf18      	it	ne
    439e:	2001      	movne	r0, #1
    43a0:	4b14      	ldr	r3, [pc, #80]	; (43f4 <_usart_async_set_irq_state+0x68>)
    43a2:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    43a4:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    43a8:	d10d      	bne.n	43c6 <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    43aa:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    43ac:	b92e      	cbnz	r6, 43ba <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    43ae:	2201      	movs	r2, #1
    43b0:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    43b2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    43b4:	2202      	movs	r2, #2
    43b6:	751a      	strb	r2, [r3, #20]
    43b8:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    43ba:	2201      	movs	r2, #1
    43bc:	759a      	strb	r2, [r3, #22]
    43be:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    43c0:	2202      	movs	r2, #2
    43c2:	759a      	strb	r2, [r3, #22]
    43c4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    43c6:	2c01      	cmp	r4, #1
    43c8:	d002      	beq.n	43d0 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    43ca:	2c03      	cmp	r4, #3
    43cc:	d008      	beq.n	43e0 <_usart_async_set_irq_state+0x54>
    43ce:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    43d0:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    43d2:	b916      	cbnz	r6, 43da <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    43d4:	2204      	movs	r2, #4
    43d6:	751a      	strb	r2, [r3, #20]
    43d8:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    43da:	2204      	movs	r2, #4
    43dc:	759a      	strb	r2, [r3, #22]
    43de:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    43e0:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    43e2:	b116      	cbz	r6, 43ea <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    43e4:	2280      	movs	r2, #128	; 0x80
    43e6:	759a      	strb	r2, [r3, #22]
}
    43e8:	e7f1      	b.n	43ce <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    43ea:	2280      	movs	r2, #128	; 0x80
    43ec:	751a      	strb	r2, [r3, #20]
    43ee:	bd70      	pop	{r4, r5, r6, pc}
    43f0:	00009124 	.word	0x00009124
    43f4:	000036d5 	.word	0x000036d5

000043f8 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    43f8:	4b03      	ldr	r3, [pc, #12]	; (4408 <_delay_init+0x10>)
    43fa:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    43fe:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    4400:	2205      	movs	r2, #5
    4402:	601a      	str	r2, [r3, #0]
    4404:	4770      	bx	lr
    4406:	bf00      	nop
    4408:	e000e010 	.word	0xe000e010

0000440c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    440c:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    440e:	b303      	cbz	r3, 4452 <_delay_cycles+0x46>
{
    4410:	b430      	push	{r4, r5}
    4412:	1e5d      	subs	r5, r3, #1
    4414:	b2ed      	uxtb	r5, r5
	while (n--) {
    4416:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    4418:	4a12      	ldr	r2, [pc, #72]	; (4464 <_delay_cycles+0x58>)
    441a:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    441e:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    4420:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4422:	6813      	ldr	r3, [r2, #0]
    4424:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4428:	d0fb      	beq.n	4422 <_delay_cycles+0x16>
	while (n--) {
    442a:	3801      	subs	r0, #1
    442c:	b2c0      	uxtb	r0, r0
    442e:	28ff      	cmp	r0, #255	; 0xff
    4430:	d1f5      	bne.n	441e <_delay_cycles+0x12>
    4432:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    4436:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    443a:	3101      	adds	r1, #1
    443c:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    443e:	4b09      	ldr	r3, [pc, #36]	; (4464 <_delay_cycles+0x58>)
    4440:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    4442:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4444:	461a      	mov	r2, r3
    4446:	6813      	ldr	r3, [r2, #0]
    4448:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    444c:	d0fb      	beq.n	4446 <_delay_cycles+0x3a>
		;
}
    444e:	bc30      	pop	{r4, r5}
    4450:	4770      	bx	lr
	SysTick->LOAD = buf;
    4452:	4b04      	ldr	r3, [pc, #16]	; (4464 <_delay_cycles+0x58>)
    4454:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    4456:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4458:	461a      	mov	r2, r3
    445a:	6813      	ldr	r3, [r2, #0]
    445c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4460:	d0fb      	beq.n	445a <_delay_cycles+0x4e>
    4462:	4770      	bx	lr
    4464:	e000e010 	.word	0xe000e010

00004468 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    4468:	b470      	push	{r4, r5, r6}
    446a:	b087      	sub	sp, #28
    446c:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    446e:	ac01      	add	r4, sp, #4
    4470:	4d14      	ldr	r5, [pc, #80]	; (44c4 <_get_irq_num+0x5c>)
    4472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    4476:	682b      	ldr	r3, [r5, #0]
    4478:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    447a:	42b0      	cmp	r0, r6
    447c:	d017      	beq.n	44ae <_get_irq_num+0x46>
    447e:	4631      	mov	r1, r6
    4480:	2301      	movs	r3, #1
    4482:	a801      	add	r0, sp, #4
    4484:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    4488:	428a      	cmp	r2, r1
    448a:	d006      	beq.n	449a <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    448c:	3301      	adds	r3, #1
    448e:	2b05      	cmp	r3, #5
    4490:	d1f8      	bne.n	4484 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    4492:	2055      	movs	r0, #85	; 0x55
}
    4494:	b007      	add	sp, #28
    4496:	bc70      	pop	{r4, r5, r6}
    4498:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    449a:	b2db      	uxtb	r3, r3
    449c:	2b04      	cmp	r3, #4
    449e:	d80c      	bhi.n	44ba <_get_irq_num+0x52>
    44a0:	e8df f003 	tbb	[pc, r3]
    44a4:	070d0305 	.word	0x070d0305
    44a8:	09          	.byte	0x09
    44a9:	00          	.byte	0x00
		return TCC1_0_IRQn;
    44aa:	205c      	movs	r0, #92	; 0x5c
    44ac:	e7f2      	b.n	4494 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    44ae:	2055      	movs	r0, #85	; 0x55
    44b0:	e7f0      	b.n	4494 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    44b2:	2065      	movs	r0, #101	; 0x65
    44b4:	e7ee      	b.n	4494 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    44b6:	2068      	movs	r0, #104	; 0x68
    44b8:	e7ec      	b.n	4494 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    44ba:	2089      	movs	r0, #137	; 0x89
    44bc:	e7ea      	b.n	4494 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    44be:	2061      	movs	r0, #97	; 0x61
    44c0:	e7e8      	b.n	4494 <_get_irq_num+0x2c>
    44c2:	bf00      	nop
    44c4:	00009140 	.word	0x00009140

000044c8 <_tcc_timer_deinit>:
{
    44c8:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    44ca:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    44cc:	4620      	mov	r0, r4
    44ce:	4b10      	ldr	r3, [pc, #64]	; (4510 <_tcc_timer_deinit+0x48>)
    44d0:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    44d2:	0943      	lsrs	r3, r0, #5
    44d4:	f000 001f 	and.w	r0, r0, #31
    44d8:	2201      	movs	r2, #1
    44da:	fa02 f000 	lsl.w	r0, r2, r0
    44de:	3320      	adds	r3, #32
    44e0:	4a0c      	ldr	r2, [pc, #48]	; (4514 <_tcc_timer_deinit+0x4c>)
    44e2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    44e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    44ea:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    44ee:	68a3      	ldr	r3, [r4, #8]
    44f0:	f013 0f03 	tst.w	r3, #3
    44f4:	d1fb      	bne.n	44ee <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    44f6:	6823      	ldr	r3, [r4, #0]
    44f8:	f023 0302 	bic.w	r3, r3, #2
    44fc:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    44fe:	68a3      	ldr	r3, [r4, #8]
    4500:	f013 0f01 	tst.w	r3, #1
    4504:	d1fb      	bne.n	44fe <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    4506:	6823      	ldr	r3, [r4, #0]
    4508:	f043 0301 	orr.w	r3, r3, #1
    450c:	6023      	str	r3, [r4, #0]
    450e:	bd10      	pop	{r4, pc}
    4510:	00004469 	.word	0x00004469
    4514:	e000e100 	.word	0xe000e100

00004518 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    4518:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    451a:	6893      	ldr	r3, [r2, #8]
    451c:	f013 0f03 	tst.w	r3, #3
    4520:	d1fb      	bne.n	451a <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    4522:	6813      	ldr	r3, [r2, #0]
    4524:	f043 0302 	orr.w	r3, r3, #2
    4528:	6013      	str	r3, [r2, #0]
    452a:	4770      	bx	lr

0000452c <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    452c:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    452e:	6893      	ldr	r3, [r2, #8]
    4530:	f013 0f03 	tst.w	r3, #3
    4534:	d1fb      	bne.n	452e <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    4536:	6813      	ldr	r3, [r2, #0]
    4538:	f023 0302 	bic.w	r3, r3, #2
    453c:	6013      	str	r3, [r2, #0]
    453e:	4770      	bx	lr

00004540 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    4540:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    4542:	6419      	str	r1, [r3, #64]	; 0x40
    4544:	4770      	bx	lr

00004546 <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    4546:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    4548:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    454a:	4770      	bx	lr

0000454c <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    454c:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    454e:	6893      	ldr	r3, [r2, #8]
    4550:	f013 0f03 	tst.w	r3, #3
    4554:	d1fb      	bne.n	454e <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    4556:	6810      	ldr	r0, [r2, #0]
}
    4558:	f3c0 0040 	ubfx	r0, r0, #1, #1
    455c:	4770      	bx	lr

0000455e <tcc_interrupt_handler>:
{
    455e:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    4560:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    4562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    4564:	f012 0f01 	tst.w	r2, #1
    4568:	d100      	bne.n	456c <tcc_interrupt_handler+0xe>
    456a:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    456c:	2201      	movs	r2, #1
    456e:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    4570:	6803      	ldr	r3, [r0, #0]
    4572:	4798      	blx	r3
}
    4574:	e7f9      	b.n	456a <tcc_interrupt_handler+0xc>
	...

00004578 <_tcc_timer_init>:
{
    4578:	b5f0      	push	{r4, r5, r6, r7, lr}
    457a:	b087      	sub	sp, #28
    457c:	4605      	mov	r5, r0
    457e:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    4580:	ae01      	add	r6, sp, #4
    4582:	4f4e      	ldr	r7, [pc, #312]	; (46bc <_tcc_timer_init+0x144>)
    4584:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4586:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    4588:	683b      	ldr	r3, [r7, #0]
    458a:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    458c:	42a0      	cmp	r0, r4
    458e:	d00c      	beq.n	45aa <_tcc_timer_init+0x32>
    4590:	4621      	mov	r1, r4
    4592:	2301      	movs	r3, #1
    4594:	a801      	add	r0, sp, #4
    4596:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    459a:	428a      	cmp	r2, r1
    459c:	d006      	beq.n	45ac <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    459e:	3301      	adds	r3, #1
    45a0:	2b05      	cmp	r3, #5
    45a2:	d1f8      	bne.n	4596 <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    45a4:	2600      	movs	r6, #0
			return i;
    45a6:	b276      	sxtb	r6, r6
    45a8:	e015      	b.n	45d6 <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    45aa:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    45ac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    45b0:	d073      	beq.n	469a <_tcc_timer_init+0x122>
    45b2:	2b01      	cmp	r3, #1
    45b4:	d06b      	beq.n	468e <_tcc_timer_init+0x116>
    45b6:	2b02      	cmp	r3, #2
    45b8:	d06b      	beq.n	4692 <_tcc_timer_init+0x11a>
    45ba:	2b03      	cmp	r3, #3
    45bc:	d06b      	beq.n	4696 <_tcc_timer_init+0x11e>
    45be:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    45c0:	bf08      	it	eq
    45c2:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    45c4:	d0ef      	beq.n	45a6 <_tcc_timer_init+0x2e>
	ASSERT(false);
    45c6:	f240 128b 	movw	r2, #395	; 0x18b
    45ca:	493d      	ldr	r1, [pc, #244]	; (46c0 <_tcc_timer_init+0x148>)
    45cc:	2000      	movs	r0, #0
    45ce:	4b3d      	ldr	r3, [pc, #244]	; (46c4 <_tcc_timer_init+0x14c>)
    45d0:	4798      	blx	r3
	return -1;
    45d2:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    45d6:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    45d8:	22e4      	movs	r2, #228	; 0xe4
    45da:	4939      	ldr	r1, [pc, #228]	; (46c0 <_tcc_timer_init+0x148>)
    45dc:	2001      	movs	r0, #1
    45de:	4b39      	ldr	r3, [pc, #228]	; (46c4 <_tcc_timer_init+0x14c>)
    45e0:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    45e2:	68a3      	ldr	r3, [r4, #8]
    45e4:	f013 0f01 	tst.w	r3, #1
    45e8:	d1fb      	bne.n	45e2 <_tcc_timer_init+0x6a>
    45ea:	68a3      	ldr	r3, [r4, #8]
    45ec:	f013 0f03 	tst.w	r3, #3
    45f0:	d1fb      	bne.n	45ea <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    45f2:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    45f4:	f013 0f02 	tst.w	r3, #2
    45f8:	d15d      	bne.n	46b6 <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    45fa:	68a3      	ldr	r3, [r4, #8]
    45fc:	f013 0f01 	tst.w	r3, #1
    4600:	d1fb      	bne.n	45fa <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    4602:	6823      	ldr	r3, [r4, #0]
    4604:	f043 0301 	orr.w	r3, r3, #1
    4608:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    460a:	68a3      	ldr	r3, [r4, #8]
    460c:	f013 0f01 	tst.w	r3, #1
    4610:	d1fb      	bne.n	460a <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    4612:	4a2a      	ldr	r2, [pc, #168]	; (46bc <_tcc_timer_init+0x144>)
    4614:	00f1      	lsls	r1, r6, #3
    4616:	198b      	adds	r3, r1, r6
    4618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    461c:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    461e:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    4620:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    4622:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    4624:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    4626:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    4628:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    462a:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    462c:	440e      	add	r6, r1
    462e:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    4632:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    4634:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    4636:	2301      	movs	r3, #1
    4638:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    463a:	4b23      	ldr	r3, [pc, #140]	; (46c8 <_tcc_timer_init+0x150>)
    463c:	429c      	cmp	r4, r3
    463e:	d02e      	beq.n	469e <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    4640:	4b22      	ldr	r3, [pc, #136]	; (46cc <_tcc_timer_init+0x154>)
    4642:	429c      	cmp	r4, r3
    4644:	d02e      	beq.n	46a4 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    4646:	4b22      	ldr	r3, [pc, #136]	; (46d0 <_tcc_timer_init+0x158>)
    4648:	429c      	cmp	r4, r3
    464a:	d02e      	beq.n	46aa <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    464c:	4b21      	ldr	r3, [pc, #132]	; (46d4 <_tcc_timer_init+0x15c>)
    464e:	429c      	cmp	r4, r3
    4650:	d02e      	beq.n	46b0 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    4652:	4b21      	ldr	r3, [pc, #132]	; (46d8 <_tcc_timer_init+0x160>)
    4654:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    4656:	bf04      	itt	eq
    4658:	4b20      	ldreq	r3, [pc, #128]	; (46dc <_tcc_timer_init+0x164>)
    465a:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    465c:	4620      	mov	r0, r4
    465e:	4b20      	ldr	r3, [pc, #128]	; (46e0 <_tcc_timer_init+0x168>)
    4660:	4798      	blx	r3
    4662:	f000 031f 	and.w	r3, r0, #31
    4666:	2201      	movs	r2, #1
    4668:	409a      	lsls	r2, r3
    466a:	0943      	lsrs	r3, r0, #5
    466c:	009b      	lsls	r3, r3, #2
    466e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4672:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    467a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    467e:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4682:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4686:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    4688:	2000      	movs	r0, #0
}
    468a:	b007      	add	sp, #28
    468c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    468e:	2601      	movs	r6, #1
    4690:	e789      	b.n	45a6 <_tcc_timer_init+0x2e>
    4692:	2602      	movs	r6, #2
    4694:	e787      	b.n	45a6 <_tcc_timer_init+0x2e>
    4696:	2603      	movs	r6, #3
    4698:	e785      	b.n	45a6 <_tcc_timer_init+0x2e>
    469a:	2600      	movs	r6, #0
    469c:	e783      	b.n	45a6 <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    469e:	4b0f      	ldr	r3, [pc, #60]	; (46dc <_tcc_timer_init+0x164>)
    46a0:	601d      	str	r5, [r3, #0]
    46a2:	e7d3      	b.n	464c <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    46a4:	4b0d      	ldr	r3, [pc, #52]	; (46dc <_tcc_timer_init+0x164>)
    46a6:	605d      	str	r5, [r3, #4]
    46a8:	e7d3      	b.n	4652 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    46aa:	4b0c      	ldr	r3, [pc, #48]	; (46dc <_tcc_timer_init+0x164>)
    46ac:	609d      	str	r5, [r3, #8]
    46ae:	e7d5      	b.n	465c <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    46b0:	4b0a      	ldr	r3, [pc, #40]	; (46dc <_tcc_timer_init+0x164>)
    46b2:	60dd      	str	r5, [r3, #12]
    46b4:	e7d2      	b.n	465c <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    46b6:	f06f 0010 	mvn.w	r0, #16
    46ba:	e7e6      	b.n	468a <_tcc_timer_init+0x112>
    46bc:	00009140 	.word	0x00009140
    46c0:	00009208 	.word	0x00009208
    46c4:	000036d5 	.word	0x000036d5
    46c8:	41016000 	.word	0x41016000
    46cc:	41018000 	.word	0x41018000
    46d0:	42000c00 	.word	0x42000c00
    46d4:	42001000 	.word	0x42001000
    46d8:	43001000 	.word	0x43001000
    46dc:	20000af4 	.word	0x20000af4
    46e0:	00004469 	.word	0x00004469

000046e4 <_tcc_timer_set_irq>:
{
    46e4:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    46e6:	68c0      	ldr	r0, [r0, #12]
    46e8:	4b02      	ldr	r3, [pc, #8]	; (46f4 <_tcc_timer_set_irq+0x10>)
    46ea:	4798      	blx	r3
    46ec:	4b02      	ldr	r3, [pc, #8]	; (46f8 <_tcc_timer_set_irq+0x14>)
    46ee:	4798      	blx	r3
    46f0:	bd08      	pop	{r3, pc}
    46f2:	bf00      	nop
    46f4:	00004469 	.word	0x00004469
    46f8:	00003b85 	.word	0x00003b85

000046fc <_tcc_get_timer>:
}
    46fc:	4800      	ldr	r0, [pc, #0]	; (4700 <_tcc_get_timer+0x4>)
    46fe:	4770      	bx	lr
    4700:	2000006c 	.word	0x2000006c

00004704 <TCC0_0_Handler>:
{
    4704:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    4706:	4b02      	ldr	r3, [pc, #8]	; (4710 <TCC0_0_Handler+0xc>)
    4708:	6818      	ldr	r0, [r3, #0]
    470a:	4b02      	ldr	r3, [pc, #8]	; (4714 <TCC0_0_Handler+0x10>)
    470c:	4798      	blx	r3
    470e:	bd08      	pop	{r3, pc}
    4710:	20000af4 	.word	0x20000af4
    4714:	0000455f 	.word	0x0000455f

00004718 <TCC1_0_Handler>:
{
    4718:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    471a:	4b02      	ldr	r3, [pc, #8]	; (4724 <TCC1_0_Handler+0xc>)
    471c:	6858      	ldr	r0, [r3, #4]
    471e:	4b02      	ldr	r3, [pc, #8]	; (4728 <TCC1_0_Handler+0x10>)
    4720:	4798      	blx	r3
    4722:	bd08      	pop	{r3, pc}
    4724:	20000af4 	.word	0x20000af4
    4728:	0000455f 	.word	0x0000455f

0000472c <TCC2_0_Handler>:
{
    472c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    472e:	4b02      	ldr	r3, [pc, #8]	; (4738 <TCC2_0_Handler+0xc>)
    4730:	6898      	ldr	r0, [r3, #8]
    4732:	4b02      	ldr	r3, [pc, #8]	; (473c <TCC2_0_Handler+0x10>)
    4734:	4798      	blx	r3
    4736:	bd08      	pop	{r3, pc}
    4738:	20000af4 	.word	0x20000af4
    473c:	0000455f 	.word	0x0000455f

00004740 <TCC3_0_Handler>:
{
    4740:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    4742:	4b02      	ldr	r3, [pc, #8]	; (474c <TCC3_0_Handler+0xc>)
    4744:	68d8      	ldr	r0, [r3, #12]
    4746:	4b02      	ldr	r3, [pc, #8]	; (4750 <TCC3_0_Handler+0x10>)
    4748:	4798      	blx	r3
    474a:	bd08      	pop	{r3, pc}
    474c:	20000af4 	.word	0x20000af4
    4750:	0000455f 	.word	0x0000455f

00004754 <TCC4_0_Handler>:
{
    4754:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    4756:	4b02      	ldr	r3, [pc, #8]	; (4760 <TCC4_0_Handler+0xc>)
    4758:	6918      	ldr	r0, [r3, #16]
    475a:	4b02      	ldr	r3, [pc, #8]	; (4764 <TCC4_0_Handler+0x10>)
    475c:	4798      	blx	r3
    475e:	bd08      	pop	{r3, pc}
    4760:	20000af4 	.word	0x20000af4
    4764:	0000455f 	.word	0x0000455f

00004768 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    4768:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    476a:	6913      	ldr	r3, [r2, #16]
    476c:	f013 0f03 	tst.w	r3, #3
    4770:	d1fb      	bne.n	476a <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    4772:	6813      	ldr	r3, [r2, #0]
    4774:	f043 0302 	orr.w	r3, r3, #2
    4778:	6013      	str	r3, [r2, #0]
    477a:	4770      	bx	lr

0000477c <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    477c:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    477e:	6913      	ldr	r3, [r2, #16]
    4780:	f013 0f03 	tst.w	r3, #3
    4784:	d1fb      	bne.n	477e <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4786:	6813      	ldr	r3, [r2, #0]
    4788:	f023 0302 	bic.w	r3, r3, #2
    478c:	6013      	str	r3, [r2, #0]
    478e:	4770      	bx	lr

00004790 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    4790:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    4792:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    4794:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    4798:	2b02      	cmp	r3, #2
    479a:	d00b      	beq.n	47b4 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    479c:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    479e:	f013 0f0c 	tst.w	r3, #12
    47a2:	d009      	beq.n	47b8 <_tc_timer_set_period+0x28>
    47a4:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    47a6:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    47aa:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    47ac:	bf04      	itt	eq
    47ae:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    47b0:	76d1      	strbeq	r1, [r2, #27]
    47b2:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    47b4:	61d1      	str	r1, [r2, #28]
    47b6:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    47b8:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    47ba:	8391      	strh	r1, [r2, #28]
    47bc:	4770      	bx	lr

000047be <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    47be:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    47c0:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    47c2:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    47c6:	2b02      	cmp	r3, #2
    47c8:	d00c      	beq.n	47e4 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    47ca:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    47cc:	f013 0f0c 	tst.w	r3, #12
    47d0:	d00a      	beq.n	47e8 <_tc_timer_get_period+0x2a>
    47d2:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    47d4:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    47d8:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    47da:	bf06      	itte	eq
    47dc:	7ed0      	ldrbeq	r0, [r2, #27]
    47de:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    47e0:	2000      	movne	r0, #0
}
    47e2:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    47e4:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    47e6:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    47e8:	8b90      	ldrh	r0, [r2, #28]
    47ea:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    47ec:	4770      	bx	lr

000047ee <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    47ee:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    47f0:	6913      	ldr	r3, [r2, #16]
    47f2:	f013 0f03 	tst.w	r3, #3
    47f6:	d1fb      	bne.n	47f0 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    47f8:	6810      	ldr	r0, [r2, #0]
}
    47fa:	f3c0 0040 	ubfx	r0, r0, #1, #1
    47fe:	4770      	bx	lr

00004800 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    4800:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    4802:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    4804:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4806:	f012 0f01 	tst.w	r2, #1
    480a:	d100      	bne.n	480e <tc_interrupt_handler+0xe>
    480c:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    480e:	2201      	movs	r2, #1
    4810:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    4812:	6803      	ldr	r3, [r0, #0]
    4814:	4798      	blx	r3
	}
}
    4816:	e7f9      	b.n	480c <tc_interrupt_handler+0xc>

00004818 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    4818:	b538      	push	{r3, r4, r5, lr}
    481a:	4605      	mov	r5, r0
	void *const hw = device->hw;
    481c:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    481e:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    4820:	f013 0f01 	tst.w	r3, #1
    4824:	d004      	beq.n	4830 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    4826:	2301      	movs	r3, #1
    4828:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    482a:	6803      	ldr	r3, [r0, #0]
    482c:	b103      	cbz	r3, 4830 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    482e:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    4830:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    4832:	f013 0f02 	tst.w	r3, #2
    4836:	d005      	beq.n	4844 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    4838:	2302      	movs	r3, #2
    483a:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    483c:	686b      	ldr	r3, [r5, #4]
    483e:	b10b      	cbz	r3, 4844 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    4840:	4628      	mov	r0, r5
    4842:	4798      	blx	r3
    4844:	bd38      	pop	{r3, r4, r5, pc}
	...

00004848 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    4848:	4b11      	ldr	r3, [pc, #68]	; (4890 <_tc_init_irq_param+0x48>)
    484a:	4298      	cmp	r0, r3
    484c:	d011      	beq.n	4872 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    484e:	4b11      	ldr	r3, [pc, #68]	; (4894 <_tc_init_irq_param+0x4c>)
    4850:	4298      	cmp	r0, r3
    4852:	d011      	beq.n	4878 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    4854:	4b10      	ldr	r3, [pc, #64]	; (4898 <_tc_init_irq_param+0x50>)
    4856:	4298      	cmp	r0, r3
    4858:	d011      	beq.n	487e <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    485a:	4b10      	ldr	r3, [pc, #64]	; (489c <_tc_init_irq_param+0x54>)
    485c:	4298      	cmp	r0, r3
    485e:	d011      	beq.n	4884 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    4860:	4b0f      	ldr	r3, [pc, #60]	; (48a0 <_tc_init_irq_param+0x58>)
    4862:	4298      	cmp	r0, r3
    4864:	d011      	beq.n	488a <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    4866:	4b0f      	ldr	r3, [pc, #60]	; (48a4 <_tc_init_irq_param+0x5c>)
    4868:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    486a:	bf04      	itt	eq
    486c:	4b0e      	ldreq	r3, [pc, #56]	; (48a8 <_tc_init_irq_param+0x60>)
    486e:	6159      	streq	r1, [r3, #20]
    4870:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    4872:	4b0d      	ldr	r3, [pc, #52]	; (48a8 <_tc_init_irq_param+0x60>)
    4874:	6019      	str	r1, [r3, #0]
    4876:	e7f0      	b.n	485a <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    4878:	4b0b      	ldr	r3, [pc, #44]	; (48a8 <_tc_init_irq_param+0x60>)
    487a:	6059      	str	r1, [r3, #4]
    487c:	e7f0      	b.n	4860 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    487e:	4b0a      	ldr	r3, [pc, #40]	; (48a8 <_tc_init_irq_param+0x60>)
    4880:	6099      	str	r1, [r3, #8]
    4882:	e7f0      	b.n	4866 <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    4884:	4b08      	ldr	r3, [pc, #32]	; (48a8 <_tc_init_irq_param+0x60>)
    4886:	60d9      	str	r1, [r3, #12]
    4888:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    488a:	4b07      	ldr	r3, [pc, #28]	; (48a8 <_tc_init_irq_param+0x60>)
    488c:	6119      	str	r1, [r3, #16]
    488e:	4770      	bx	lr
    4890:	40003800 	.word	0x40003800
    4894:	40003c00 	.word	0x40003c00
    4898:	4101a000 	.word	0x4101a000
    489c:	4101c000 	.word	0x4101c000
    48a0:	42001400 	.word	0x42001400
    48a4:	42001800 	.word	0x42001800
    48a8:	20000b08 	.word	0x20000b08

000048ac <get_tc_index>:
{
    48ac:	b570      	push	{r4, r5, r6, lr}
    48ae:	b086      	sub	sp, #24
    48b0:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    48b2:	466c      	mov	r4, sp
    48b4:	4d18      	ldr	r5, [pc, #96]	; (4918 <get_tc_index+0x6c>)
    48b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    48b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    48ba:	e895 0003 	ldmia.w	r5, {r0, r1}
    48be:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    48c2:	9b00      	ldr	r3, [sp, #0]
    48c4:	42b3      	cmp	r3, r6
    48c6:	d021      	beq.n	490c <get_tc_index+0x60>
    48c8:	4631      	mov	r1, r6
    48ca:	2301      	movs	r3, #1
    48cc:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    48d0:	428a      	cmp	r2, r1
    48d2:	d01c      	beq.n	490e <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    48d4:	3301      	adds	r3, #1
    48d6:	2b06      	cmp	r3, #6
    48d8:	d1f8      	bne.n	48cc <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    48da:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    48dc:	4a0f      	ldr	r2, [pc, #60]	; (491c <get_tc_index+0x70>)
    48de:	7812      	ldrb	r2, [r2, #0]
    48e0:	429a      	cmp	r2, r3
    48e2:	d016      	beq.n	4912 <get_tc_index+0x66>
    48e4:	4a0d      	ldr	r2, [pc, #52]	; (491c <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    48e6:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    48e8:	7d11      	ldrb	r1, [r2, #20]
    48ea:	4299      	cmp	r1, r3
    48ec:	d012      	beq.n	4914 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    48ee:	3001      	adds	r0, #1
    48f0:	b2c0      	uxtb	r0, r0
    48f2:	3214      	adds	r2, #20
    48f4:	2806      	cmp	r0, #6
    48f6:	d1f7      	bne.n	48e8 <get_tc_index+0x3c>
	ASSERT(false);
    48f8:	f240 2227 	movw	r2, #551	; 0x227
    48fc:	4908      	ldr	r1, [pc, #32]	; (4920 <get_tc_index+0x74>)
    48fe:	2000      	movs	r0, #0
    4900:	4b08      	ldr	r3, [pc, #32]	; (4924 <get_tc_index+0x78>)
    4902:	4798      	blx	r3
	return -1;
    4904:	f04f 30ff 	mov.w	r0, #4294967295
}
    4908:	b006      	add	sp, #24
    490a:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    490c:	2300      	movs	r3, #0
			return i;
    490e:	b2db      	uxtb	r3, r3
    4910:	e7e4      	b.n	48dc <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    4912:	2000      	movs	r0, #0
			return i;
    4914:	b240      	sxtb	r0, r0
    4916:	e7f7      	b.n	4908 <get_tc_index+0x5c>
    4918:	00009220 	.word	0x00009220
    491c:	2000008c 	.word	0x2000008c
    4920:	00009238 	.word	0x00009238
    4924:	000036d5 	.word	0x000036d5

00004928 <_tc_timer_init>:
{
    4928:	b570      	push	{r4, r5, r6, lr}
    492a:	4606      	mov	r6, r0
    492c:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    492e:	4608      	mov	r0, r1
    4930:	4b48      	ldr	r3, [pc, #288]	; (4a54 <_tc_timer_init+0x12c>)
    4932:	4798      	blx	r3
    4934:	4605      	mov	r5, r0
	device->hw = hw;
    4936:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    4938:	22af      	movs	r2, #175	; 0xaf
    493a:	4947      	ldr	r1, [pc, #284]	; (4a58 <_tc_timer_init+0x130>)
    493c:	2001      	movs	r0, #1
    493e:	4b47      	ldr	r3, [pc, #284]	; (4a5c <_tc_timer_init+0x134>)
    4940:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4942:	6923      	ldr	r3, [r4, #16]
    4944:	f013 0f01 	tst.w	r3, #1
    4948:	d1fb      	bne.n	4942 <_tc_timer_init+0x1a>
    494a:	6923      	ldr	r3, [r4, #16]
    494c:	f013 0f03 	tst.w	r3, #3
    4950:	d1fb      	bne.n	494a <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    4952:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    4954:	f013 0f02 	tst.w	r3, #2
    4958:	d175      	bne.n	4a46 <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    495a:	6923      	ldr	r3, [r4, #16]
    495c:	f013 0f01 	tst.w	r3, #1
    4960:	d1fb      	bne.n	495a <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    4962:	6823      	ldr	r3, [r4, #0]
    4964:	f043 0301 	orr.w	r3, r3, #1
    4968:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    496a:	6923      	ldr	r3, [r4, #16]
    496c:	f013 0f01 	tst.w	r3, #1
    4970:	d1fb      	bne.n	496a <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    4972:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4976:	4a3a      	ldr	r2, [pc, #232]	; (4a60 <_tc_timer_init+0x138>)
    4978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    497c:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    497e:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4980:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    4982:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    4984:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    4986:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    4988:	2201      	movs	r2, #1
    498a:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    498c:	685b      	ldr	r3, [r3, #4]
    498e:	f003 030c 	and.w	r3, r3, #12
    4992:	2b08      	cmp	r3, #8
    4994:	d03f      	beq.n	4a16 <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4996:	2b00      	cmp	r3, #0
    4998:	d147      	bne.n	4a2a <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    499a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    499e:	4a30      	ldr	r2, [pc, #192]	; (4a60 <_tc_timer_init+0x138>)
    49a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    49a4:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    49a6:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    49a8:	8a1b      	ldrh	r3, [r3, #16]
    49aa:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    49ac:	2301      	movs	r3, #1
    49ae:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    49b0:	4631      	mov	r1, r6
    49b2:	4620      	mov	r0, r4
    49b4:	4b2b      	ldr	r3, [pc, #172]	; (4a64 <_tc_timer_init+0x13c>)
    49b6:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    49b8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    49bc:	4a28      	ldr	r2, [pc, #160]	; (4a60 <_tc_timer_init+0x138>)
    49be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    49c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    49c6:	2b00      	cmp	r3, #0
    49c8:	db40      	blt.n	4a4c <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    49ca:	095a      	lsrs	r2, r3, #5
    49cc:	f003 031f 	and.w	r3, r3, #31
    49d0:	2101      	movs	r1, #1
    49d2:	fa01 f303 	lsl.w	r3, r1, r3
    49d6:	3220      	adds	r2, #32
    49d8:	4923      	ldr	r1, [pc, #140]	; (4a68 <_tc_timer_init+0x140>)
    49da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    49de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    49e2:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    49e6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    49ea:	4b1d      	ldr	r3, [pc, #116]	; (4a60 <_tc_timer_init+0x138>)
    49ec:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    49f0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    49f4:	2b00      	cmp	r3, #0
    49f6:	db2b      	blt.n	4a50 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    49f8:	0959      	lsrs	r1, r3, #5
    49fa:	f003 031f 	and.w	r3, r3, #31
    49fe:	2201      	movs	r2, #1
    4a00:	fa02 f303 	lsl.w	r3, r2, r3
    4a04:	4a18      	ldr	r2, [pc, #96]	; (4a68 <_tc_timer_init+0x140>)
    4a06:	f101 0060 	add.w	r0, r1, #96	; 0x60
    4a0a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4a0e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    4a12:	2000      	movs	r0, #0
    4a14:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4a16:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4a1a:	4a11      	ldr	r2, [pc, #68]	; (4a60 <_tc_timer_init+0x138>)
    4a1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4a20:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4a22:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    4a24:	691b      	ldr	r3, [r3, #16]
    4a26:	6223      	str	r3, [r4, #32]
    4a28:	e7c0      	b.n	49ac <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    4a2a:	2b04      	cmp	r3, #4
    4a2c:	d1be      	bne.n	49ac <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    4a2e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4a32:	4a0b      	ldr	r2, [pc, #44]	; (4a60 <_tc_timer_init+0x138>)
    4a34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4a38:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    4a3a:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    4a3c:	7c1a      	ldrb	r2, [r3, #16]
    4a3e:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    4a40:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    4a42:	76e3      	strb	r3, [r4, #27]
    4a44:	e7b2      	b.n	49ac <_tc_timer_init+0x84>
		return ERR_DENIED;
    4a46:	f06f 0010 	mvn.w	r0, #16
    4a4a:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    4a4c:	2000      	movs	r0, #0
    4a4e:	bd70      	pop	{r4, r5, r6, pc}
    4a50:	2000      	movs	r0, #0
}
    4a52:	bd70      	pop	{r4, r5, r6, pc}
    4a54:	000048ad 	.word	0x000048ad
    4a58:	00009238 	.word	0x00009238
    4a5c:	000036d5 	.word	0x000036d5
    4a60:	2000008c 	.word	0x2000008c
    4a64:	00004849 	.word	0x00004849
    4a68:	e000e100 	.word	0xe000e100

00004a6c <_tc_timer_deinit>:
{
    4a6c:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    4a6e:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    4a70:	4620      	mov	r0, r4
    4a72:	4b18      	ldr	r3, [pc, #96]	; (4ad4 <_tc_timer_deinit+0x68>)
    4a74:	4798      	blx	r3
    4a76:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4a78:	f240 1201 	movw	r2, #257	; 0x101
    4a7c:	4916      	ldr	r1, [pc, #88]	; (4ad8 <_tc_timer_deinit+0x6c>)
    4a7e:	2001      	movs	r0, #1
    4a80:	4b16      	ldr	r3, [pc, #88]	; (4adc <_tc_timer_deinit+0x70>)
    4a82:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    4a84:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4a88:	4b15      	ldr	r3, [pc, #84]	; (4ae0 <_tc_timer_deinit+0x74>)
    4a8a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4a8e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    4a92:	2b00      	cmp	r3, #0
    4a94:	db0d      	blt.n	4ab2 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4a96:	095a      	lsrs	r2, r3, #5
    4a98:	f003 031f 	and.w	r3, r3, #31
    4a9c:	2101      	movs	r1, #1
    4a9e:	fa01 f303 	lsl.w	r3, r1, r3
    4aa2:	3220      	adds	r2, #32
    4aa4:	490f      	ldr	r1, [pc, #60]	; (4ae4 <_tc_timer_deinit+0x78>)
    4aa6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4aaa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4aae:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4ab2:	6923      	ldr	r3, [r4, #16]
    4ab4:	f013 0f03 	tst.w	r3, #3
    4ab8:	d1fb      	bne.n	4ab2 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    4aba:	6823      	ldr	r3, [r4, #0]
    4abc:	f023 0302 	bic.w	r3, r3, #2
    4ac0:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4ac2:	6923      	ldr	r3, [r4, #16]
    4ac4:	f013 0f01 	tst.w	r3, #1
    4ac8:	d1fb      	bne.n	4ac2 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    4aca:	6823      	ldr	r3, [r4, #0]
    4acc:	f043 0301 	orr.w	r3, r3, #1
    4ad0:	6023      	str	r3, [r4, #0]
    4ad2:	bd38      	pop	{r3, r4, r5, pc}
    4ad4:	000048ad 	.word	0x000048ad
    4ad8:	00009238 	.word	0x00009238
    4adc:	000036d5 	.word	0x000036d5
    4ae0:	2000008c 	.word	0x2000008c
    4ae4:	e000e100 	.word	0xe000e100

00004ae8 <_tc_timer_set_irq>:
{
    4ae8:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    4aea:	68c0      	ldr	r0, [r0, #12]
    4aec:	4b08      	ldr	r3, [pc, #32]	; (4b10 <_tc_timer_set_irq+0x28>)
    4aee:	4798      	blx	r3
    4af0:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    4af2:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    4af6:	4907      	ldr	r1, [pc, #28]	; (4b14 <_tc_timer_set_irq+0x2c>)
    4af8:	2001      	movs	r0, #1
    4afa:	4b07      	ldr	r3, [pc, #28]	; (4b18 <_tc_timer_set_irq+0x30>)
    4afc:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    4afe:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    4b02:	4b06      	ldr	r3, [pc, #24]	; (4b1c <_tc_timer_set_irq+0x34>)
    4b04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    4b08:	78a0      	ldrb	r0, [r4, #2]
    4b0a:	4b05      	ldr	r3, [pc, #20]	; (4b20 <_tc_timer_set_irq+0x38>)
    4b0c:	4798      	blx	r3
    4b0e:	bd10      	pop	{r4, pc}
    4b10:	000048ad 	.word	0x000048ad
    4b14:	00009238 	.word	0x00009238
    4b18:	000036d5 	.word	0x000036d5
    4b1c:	2000008c 	.word	0x2000008c
    4b20:	00003b85 	.word	0x00003b85

00004b24 <_pwm_init>:
{
    4b24:	b570      	push	{r4, r5, r6, lr}
    4b26:	4606      	mov	r6, r0
    4b28:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    4b2a:	4608      	mov	r0, r1
    4b2c:	4b3f      	ldr	r3, [pc, #252]	; (4c2c <_pwm_init+0x108>)
    4b2e:	4798      	blx	r3
    4b30:	4605      	mov	r5, r0
	device->hw = hw;
    4b32:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4b34:	6923      	ldr	r3, [r4, #16]
    4b36:	f013 0f01 	tst.w	r3, #1
    4b3a:	d1fb      	bne.n	4b34 <_pwm_init+0x10>
    4b3c:	6923      	ldr	r3, [r4, #16]
    4b3e:	f013 0f03 	tst.w	r3, #3
    4b42:	d1fb      	bne.n	4b3c <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    4b44:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    4b46:	f013 0f02 	tst.w	r3, #2
    4b4a:	d165      	bne.n	4c18 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4b4c:	6923      	ldr	r3, [r4, #16]
    4b4e:	f013 0f01 	tst.w	r3, #1
    4b52:	d1fb      	bne.n	4b4c <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    4b54:	6823      	ldr	r3, [r4, #0]
    4b56:	f043 0301 	orr.w	r3, r3, #1
    4b5a:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    4b5c:	6923      	ldr	r3, [r4, #16]
    4b5e:	f013 0f01 	tst.w	r3, #1
    4b62:	d1fb      	bne.n	4b5c <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    4b64:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4b68:	4a31      	ldr	r2, [pc, #196]	; (4c30 <_pwm_init+0x10c>)
    4b6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4b6e:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    4b70:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    4b72:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    4b74:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    4b76:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    4b78:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    4b7a:	2203      	movs	r2, #3
    4b7c:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    4b7e:	685b      	ldr	r3, [r3, #4]
    4b80:	f003 030c 	and.w	r3, r3, #12
    4b84:	2b08      	cmp	r3, #8
    4b86:	d03d      	beq.n	4c04 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    4b88:	2b00      	cmp	r3, #0
    4b8a:	d148      	bne.n	4c1e <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    4b8c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4b90:	4a27      	ldr	r2, [pc, #156]	; (4c30 <_pwm_init+0x10c>)
    4b92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4b96:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    4b98:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    4b9a:	8a1b      	ldrh	r3, [r3, #16]
    4b9c:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    4b9e:	4631      	mov	r1, r6
    4ba0:	4620      	mov	r0, r4
    4ba2:	4b24      	ldr	r3, [pc, #144]	; (4c34 <_pwm_init+0x110>)
    4ba4:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    4ba6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4baa:	4a21      	ldr	r2, [pc, #132]	; (4c30 <_pwm_init+0x10c>)
    4bac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4bb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    4bb4:	2b00      	cmp	r3, #0
    4bb6:	db35      	blt.n	4c24 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4bb8:	095a      	lsrs	r2, r3, #5
    4bba:	f003 031f 	and.w	r3, r3, #31
    4bbe:	2101      	movs	r1, #1
    4bc0:	fa01 f303 	lsl.w	r3, r1, r3
    4bc4:	3220      	adds	r2, #32
    4bc6:	491c      	ldr	r1, [pc, #112]	; (4c38 <_pwm_init+0x114>)
    4bc8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4bcc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4bd0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    4bd4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    4bd8:	4b15      	ldr	r3, [pc, #84]	; (4c30 <_pwm_init+0x10c>)
    4bda:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    4bde:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    4be2:	2b00      	cmp	r3, #0
    4be4:	db20      	blt.n	4c28 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4be6:	0959      	lsrs	r1, r3, #5
    4be8:	f003 031f 	and.w	r3, r3, #31
    4bec:	2201      	movs	r2, #1
    4bee:	fa02 f303 	lsl.w	r3, r2, r3
    4bf2:	4a11      	ldr	r2, [pc, #68]	; (4c38 <_pwm_init+0x114>)
    4bf4:	f101 0060 	add.w	r0, r1, #96	; 0x60
    4bf8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    4bfc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    4c00:	2000      	movs	r0, #0
    4c02:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    4c04:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    4c08:	4a09      	ldr	r2, [pc, #36]	; (4c30 <_pwm_init+0x10c>)
    4c0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4c0e:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    4c10:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    4c12:	691b      	ldr	r3, [r3, #16]
    4c14:	6223      	str	r3, [r4, #32]
    4c16:	e7c2      	b.n	4b9e <_pwm_init+0x7a>
		return ERR_DENIED;
    4c18:	f06f 0010 	mvn.w	r0, #16
    4c1c:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    4c1e:	f04f 30ff 	mov.w	r0, #4294967295
    4c22:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    4c24:	2000      	movs	r0, #0
    4c26:	bd70      	pop	{r4, r5, r6, pc}
    4c28:	2000      	movs	r0, #0
}
    4c2a:	bd70      	pop	{r4, r5, r6, pc}
    4c2c:	000048ad 	.word	0x000048ad
    4c30:	2000008c 	.word	0x2000008c
    4c34:	00004849 	.word	0x00004849
    4c38:	e000e100 	.word	0xe000e100

00004c3c <_tc_get_timer>:
}
    4c3c:	4800      	ldr	r0, [pc, #0]	; (4c40 <_tc_get_timer+0x4>)
    4c3e:	4770      	bx	lr
    4c40:	20000104 	.word	0x20000104

00004c44 <_tc_get_pwm>:
}
    4c44:	2000      	movs	r0, #0
    4c46:	4770      	bx	lr

00004c48 <TC0_Handler>:
{
    4c48:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    4c4a:	4b02      	ldr	r3, [pc, #8]	; (4c54 <TC0_Handler+0xc>)
    4c4c:	6818      	ldr	r0, [r3, #0]
    4c4e:	4b02      	ldr	r3, [pc, #8]	; (4c58 <TC0_Handler+0x10>)
    4c50:	4798      	blx	r3
    4c52:	bd08      	pop	{r3, pc}
    4c54:	20000b08 	.word	0x20000b08
    4c58:	00004819 	.word	0x00004819

00004c5c <TC1_Handler>:
{
    4c5c:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    4c5e:	4b02      	ldr	r3, [pc, #8]	; (4c68 <TC1_Handler+0xc>)
    4c60:	6858      	ldr	r0, [r3, #4]
    4c62:	4b02      	ldr	r3, [pc, #8]	; (4c6c <TC1_Handler+0x10>)
    4c64:	4798      	blx	r3
    4c66:	bd08      	pop	{r3, pc}
    4c68:	20000b08 	.word	0x20000b08
    4c6c:	00004819 	.word	0x00004819

00004c70 <TC2_Handler>:
{
    4c70:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    4c72:	4b02      	ldr	r3, [pc, #8]	; (4c7c <TC2_Handler+0xc>)
    4c74:	6898      	ldr	r0, [r3, #8]
    4c76:	4b02      	ldr	r3, [pc, #8]	; (4c80 <TC2_Handler+0x10>)
    4c78:	4798      	blx	r3
    4c7a:	bd08      	pop	{r3, pc}
    4c7c:	20000b08 	.word	0x20000b08
    4c80:	00004819 	.word	0x00004819

00004c84 <TC3_Handler>:
{
    4c84:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    4c86:	4b02      	ldr	r3, [pc, #8]	; (4c90 <TC3_Handler+0xc>)
    4c88:	68d8      	ldr	r0, [r3, #12]
    4c8a:	4b02      	ldr	r3, [pc, #8]	; (4c94 <TC3_Handler+0x10>)
    4c8c:	4798      	blx	r3
    4c8e:	bd08      	pop	{r3, pc}
    4c90:	20000b08 	.word	0x20000b08
    4c94:	00004801 	.word	0x00004801

00004c98 <TC4_Handler>:
{
    4c98:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    4c9a:	4b02      	ldr	r3, [pc, #8]	; (4ca4 <TC4_Handler+0xc>)
    4c9c:	6918      	ldr	r0, [r3, #16]
    4c9e:	4b02      	ldr	r3, [pc, #8]	; (4ca8 <TC4_Handler+0x10>)
    4ca0:	4798      	blx	r3
    4ca2:	bd08      	pop	{r3, pc}
    4ca4:	20000b08 	.word	0x20000b08
    4ca8:	00004801 	.word	0x00004801

00004cac <TC5_Handler>:
{
    4cac:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    4cae:	4b02      	ldr	r3, [pc, #8]	; (4cb8 <TC5_Handler+0xc>)
    4cb0:	6958      	ldr	r0, [r3, #20]
    4cb2:	4b02      	ldr	r3, [pc, #8]	; (4cbc <TC5_Handler+0x10>)
    4cb4:	4798      	blx	r3
    4cb6:	bd08      	pop	{r3, pc}
    4cb8:	20000b08 	.word	0x20000b08
    4cbc:	00004801 	.word	0x00004801

00004cc0 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    4cc0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4cc2:	4604      	mov	r4, r0
    4cc4:	b330      	cbz	r0, 4d14 <_wdt_init+0x54>
    4cc6:	6800      	ldr	r0, [r0, #0]
    4cc8:	3000      	adds	r0, #0
    4cca:	bf18      	it	ne
    4ccc:	2001      	movne	r0, #1
    4cce:	225a      	movs	r2, #90	; 0x5a
    4cd0:	4914      	ldr	r1, [pc, #80]	; (4d24 <_wdt_init+0x64>)
    4cd2:	4b15      	ldr	r3, [pc, #84]	; (4d28 <_wdt_init+0x68>)
    4cd4:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    4cd6:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4cd8:	689a      	ldr	r2, [r3, #8]
    4cda:	f012 0f0e 	tst.w	r2, #14
    4cde:	d1fb      	bne.n	4cd8 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4ce0:	781a      	ldrb	r2, [r3, #0]
    4ce2:	09d2      	lsrs	r2, r2, #7
    4ce4:	d118      	bne.n	4d18 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4ce6:	689a      	ldr	r2, [r3, #8]
    4ce8:	f012 0f0e 	tst.w	r2, #14
    4cec:	d1fb      	bne.n	4ce6 <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4cee:	781a      	ldrb	r2, [r3, #0]
    4cf0:	f012 0f02 	tst.w	r2, #2
    4cf4:	d113      	bne.n	4d1e <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4cf6:	689a      	ldr	r2, [r3, #8]
    4cf8:	f012 0f0e 	tst.w	r2, #14
    4cfc:	d1fb      	bne.n	4cf6 <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    4cfe:	781a      	ldrb	r2, [r3, #0]
    4d00:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    4d04:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    4d06:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    4d08:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    4d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    4d0e:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    4d10:	2000      	movs	r0, #0
    4d12:	bd10      	pop	{r4, pc}
    4d14:	2000      	movs	r0, #0
    4d16:	e7da      	b.n	4cce <_wdt_init+0xe>
		return ERR_DENIED;
    4d18:	f06f 0010 	mvn.w	r0, #16
    4d1c:	bd10      	pop	{r4, pc}
    4d1e:	f06f 0010 	mvn.w	r0, #16
}
    4d22:	bd10      	pop	{r4, pc}
    4d24:	0000924c 	.word	0x0000924c
    4d28:	000036d5 	.word	0x000036d5

00004d2c <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    4d2c:	b570      	push	{r4, r5, r6, lr}
    4d2e:	460d      	mov	r5, r1
    4d30:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4d32:	4606      	mov	r6, r0
    4d34:	2800      	cmp	r0, #0
    4d36:	d044      	beq.n	4dc2 <_wdt_set_timeout_period+0x96>
    4d38:	6800      	ldr	r0, [r0, #0]
    4d3a:	3000      	adds	r0, #0
    4d3c:	bf18      	it	ne
    4d3e:	2001      	movne	r0, #1
    4d40:	2284      	movs	r2, #132	; 0x84
    4d42:	493f      	ldr	r1, [pc, #252]	; (4e40 <_wdt_set_timeout_period+0x114>)
    4d44:	4b3f      	ldr	r3, [pc, #252]	; (4e44 <_wdt_set_timeout_period+0x118>)
    4d46:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    4d48:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4d4a:	6893      	ldr	r3, [r2, #8]
    4d4c:	f013 0f0e 	tst.w	r3, #14
    4d50:	d1fb      	bne.n	4d4a <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    4d52:	7813      	ldrb	r3, [r2, #0]
    4d54:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    4d58:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    4d5a:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4d5c:	688b      	ldr	r3, [r1, #8]
    4d5e:	f013 0f0e 	tst.w	r3, #14
    4d62:	d1fb      	bne.n	4d5c <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    4d64:	780b      	ldrb	r3, [r1, #0]
    4d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4d6a:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    4d6c:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4d6e:	6899      	ldr	r1, [r3, #8]
    4d70:	f011 0f0e 	tst.w	r1, #14
    4d74:	d1fb      	bne.n	4d6e <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4d76:	781a      	ldrb	r2, [r3, #0]
    4d78:	09d2      	lsrs	r2, r2, #7
    4d7a:	d158      	bne.n	4e2e <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4d7c:	6899      	ldr	r1, [r3, #8]
    4d7e:	f011 0f0e 	tst.w	r1, #14
    4d82:	d1fb      	bne.n	4d7c <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4d84:	781a      	ldrb	r2, [r3, #0]
    4d86:	f012 0f02 	tst.w	r2, #2
    4d8a:	d153      	bne.n	4e34 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    4d8c:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    4d90:	4628      	mov	r0, r5
    4d92:	2100      	movs	r1, #0
    4d94:	ea50 0201 	orrs.w	r2, r0, r1
    4d98:	d14f      	bne.n	4e3a <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    4d9a:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    4d9e:	d038      	beq.n	4e12 <_wdt_set_timeout_period+0xe6>
    4da0:	d911      	bls.n	4dc6 <_wdt_set_timeout_period+0x9a>
    4da2:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    4da6:	d038      	beq.n	4e1a <_wdt_set_timeout_period+0xee>
    4da8:	d927      	bls.n	4dfa <_wdt_set_timeout_period+0xce>
    4daa:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    4dae:	d038      	beq.n	4e22 <_wdt_set_timeout_period+0xf6>
    4db0:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    4db4:	d037      	beq.n	4e26 <_wdt_set_timeout_period+0xfa>
    4db6:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    4dba:	d030      	beq.n	4e1e <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    4dbc:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    4dc0:	bd70      	pop	{r4, r5, r6, pc}
    4dc2:	2000      	movs	r0, #0
    4dc4:	e7bc      	b.n	4d40 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    4dc6:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    4dca:	d01e      	beq.n	4e0a <_wdt_set_timeout_period+0xde>
    4dcc:	d80d      	bhi.n	4dea <_wdt_set_timeout_period+0xbe>
    4dce:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    4dd2:	d02a      	beq.n	4e2a <_wdt_set_timeout_period+0xfe>
    4dd4:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    4dd8:	d1f0      	bne.n	4dbc <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    4dda:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    4ddc:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    4dde:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    4de2:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    4de4:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    4de6:	2000      	movs	r0, #0
    4de8:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    4dea:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    4dee:	d00e      	beq.n	4e0e <_wdt_set_timeout_period+0xe2>
    4df0:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    4df4:	d1e2      	bne.n	4dbc <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    4df6:	2104      	movs	r1, #4
			break;
    4df8:	e7f0      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    4dfa:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    4dfe:	d00a      	beq.n	4e16 <_wdt_set_timeout_period+0xea>
    4e00:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    4e04:	d1da      	bne.n	4dbc <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    4e06:	2107      	movs	r1, #7
			break;
    4e08:	e7e8      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    4e0a:	2102      	movs	r1, #2
			break;
    4e0c:	e7e6      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    4e0e:	2103      	movs	r1, #3
			break;
    4e10:	e7e4      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    4e12:	2105      	movs	r1, #5
			break;
    4e14:	e7e2      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    4e16:	2106      	movs	r1, #6
			break;
    4e18:	e7e0      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    4e1a:	2108      	movs	r1, #8
			break;
    4e1c:	e7de      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    4e1e:	2109      	movs	r1, #9
			break;
    4e20:	e7dc      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    4e22:	210a      	movs	r1, #10
			break;
    4e24:	e7da      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    4e26:	210b      	movs	r1, #11
			break;
    4e28:	e7d8      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    4e2a:	2100      	movs	r1, #0
    4e2c:	e7d6      	b.n	4ddc <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    4e2e:	f06f 0010 	mvn.w	r0, #16
    4e32:	bd70      	pop	{r4, r5, r6, pc}
    4e34:	f06f 0010 	mvn.w	r0, #16
    4e38:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    4e3a:	f06f 000c 	mvn.w	r0, #12
    4e3e:	bd70      	pop	{r4, r5, r6, pc}
    4e40:	0000924c 	.word	0x0000924c
    4e44:	000036d5 	.word	0x000036d5

00004e48 <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    4e48:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4e4a:	4604      	mov	r4, r0
    4e4c:	b198      	cbz	r0, 4e76 <_wdt_enable+0x2e>
    4e4e:	6800      	ldr	r0, [r0, #0]
    4e50:	3000      	adds	r0, #0
    4e52:	bf18      	it	ne
    4e54:	2001      	movne	r0, #1
    4e56:	f240 1207 	movw	r2, #263	; 0x107
    4e5a:	4908      	ldr	r1, [pc, #32]	; (4e7c <_wdt_enable+0x34>)
    4e5c:	4b08      	ldr	r3, [pc, #32]	; (4e80 <_wdt_enable+0x38>)
    4e5e:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    4e60:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4e62:	6893      	ldr	r3, [r2, #8]
    4e64:	f013 0f0e 	tst.w	r3, #14
    4e68:	d1fb      	bne.n	4e62 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    4e6a:	7813      	ldrb	r3, [r2, #0]
    4e6c:	f043 0302 	orr.w	r3, r3, #2
    4e70:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    4e72:	2000      	movs	r0, #0
    4e74:	bd10      	pop	{r4, pc}
    4e76:	2000      	movs	r0, #0
    4e78:	e7ed      	b.n	4e56 <_wdt_enable+0xe>
    4e7a:	bf00      	nop
    4e7c:	0000924c 	.word	0x0000924c
    4e80:	000036d5 	.word	0x000036d5

00004e84 <_wdt_disable>:

/**
 * \brief disable watchdog timer
 */
int32_t _wdt_disable(struct wdt_dev *const dev)
{
    4e84:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4e86:	4604      	mov	r4, r0
    4e88:	b1d0      	cbz	r0, 4ec0 <_wdt_disable+0x3c>
    4e8a:	6800      	ldr	r0, [r0, #0]
    4e8c:	3000      	adds	r0, #0
    4e8e:	bf18      	it	ne
    4e90:	2001      	movne	r0, #1
    4e92:	f44f 728a 	mov.w	r2, #276	; 0x114
    4e96:	490d      	ldr	r1, [pc, #52]	; (4ecc <_wdt_disable+0x48>)
    4e98:	4b0d      	ldr	r3, [pc, #52]	; (4ed0 <_wdt_disable+0x4c>)
    4e9a:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw)) {
    4e9c:	6823      	ldr	r3, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4e9e:	689a      	ldr	r2, [r3, #8]
    4ea0:	f012 0f0e 	tst.w	r2, #14
    4ea4:	d1fb      	bne.n	4e9e <_wdt_disable+0x1a>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    4ea6:	781a      	ldrb	r2, [r3, #0]
    4ea8:	09d2      	lsrs	r2, r2, #7
    4eaa:	d10b      	bne.n	4ec4 <_wdt_disable+0x40>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    4eac:	689a      	ldr	r2, [r3, #8]
    4eae:	f012 0f0e 	tst.w	r2, #14
    4eb2:	d1fb      	bne.n	4eac <_wdt_disable+0x28>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    4eb4:	781a      	ldrb	r2, [r3, #0]
    4eb6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    4eba:	701a      	strb	r2, [r3, #0]
		return ERR_DENIED;
	} else {
		hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
	}

	return ERR_NONE;
    4ebc:	2000      	movs	r0, #0
    4ebe:	bd10      	pop	{r4, pc}
    4ec0:	2000      	movs	r0, #0
    4ec2:	e7e6      	b.n	4e92 <_wdt_disable+0xe>
		return ERR_DENIED;
    4ec4:	f06f 0010 	mvn.w	r0, #16
}
    4ec8:	bd10      	pop	{r4, pc}
    4eca:	bf00      	nop
    4ecc:	0000924c 	.word	0x0000924c
    4ed0:	000036d5 	.word	0x000036d5

00004ed4 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    4ed4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    4ed6:	4604      	mov	r4, r0
    4ed8:	b168      	cbz	r0, 4ef6 <_wdt_feed+0x22>
    4eda:	6800      	ldr	r0, [r0, #0]
    4edc:	3000      	adds	r0, #0
    4ede:	bf18      	it	ne
    4ee0:	2001      	movne	r0, #1
    4ee2:	f240 1225 	movw	r2, #293	; 0x125
    4ee6:	4905      	ldr	r1, [pc, #20]	; (4efc <_wdt_feed+0x28>)
    4ee8:	4b05      	ldr	r3, [pc, #20]	; (4f00 <_wdt_feed+0x2c>)
    4eea:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    4eec:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    4eee:	22a5      	movs	r2, #165	; 0xa5
    4ef0:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    4ef2:	2000      	movs	r0, #0
    4ef4:	bd10      	pop	{r4, pc}
    4ef6:	2000      	movs	r0, #0
    4ef8:	e7f3      	b.n	4ee2 <_wdt_feed+0xe>
    4efa:	bf00      	nop
    4efc:	0000924c 	.word	0x0000924c
    4f00:	000036d5 	.word	0x000036d5

00004f04 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    4f04:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue    = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    4f06:	2200      	movs	r2, #0
    4f08:	2108      	movs	r1, #8
    4f0a:	2001      	movs	r0, #1
    4f0c:	4c13      	ldr	r4, [pc, #76]	; (4f5c <createQueuesAndSemaphores+0x58>)
    4f0e:	47a0      	blx	r4
    4f10:	4d13      	ldr	r5, [pc, #76]	; (4f60 <createQueuesAndSemaphores+0x5c>)
    4f12:	6028      	str	r0, [r5, #0]
    AtReceiveQueue     = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    4f14:	2200      	movs	r2, #0
    4f16:	2101      	movs	r1, #1
    4f18:	4608      	mov	r0, r1
    4f1a:	47a0      	blx	r4
    4f1c:	4b11      	ldr	r3, [pc, #68]	; (4f64 <createQueuesAndSemaphores+0x60>)
    4f1e:	6018      	str	r0, [r3, #0]
    CmdResponseQueue   = xQueueCreate(MAX_CMD_RESP_QUEUE_SIZE, sizeof(CmdResponseType));
    4f20:	2200      	movs	r2, #0
    4f22:	2108      	movs	r1, #8
    4f24:	2001      	movs	r0, #1
    4f26:	47a0      	blx	r4
    4f28:	4b0f      	ldr	r3, [pc, #60]	; (4f68 <createQueuesAndSemaphores+0x64>)
    4f2a:	6018      	str	r0, [r3, #0]


    if((AtTransmitQueue != NULL) &&
    4f2c:	682b      	ldr	r3, [r5, #0]
    4f2e:	b1a3      	cbz	r3, 4f5a <createQueuesAndSemaphores+0x56>
       (AtReceiveQueue  != NULL) &&
    4f30:	4b0c      	ldr	r3, [pc, #48]	; (4f64 <createQueuesAndSemaphores+0x60>)
    if((AtTransmitQueue != NULL) &&
    4f32:	681b      	ldr	r3, [r3, #0]
    4f34:	b18b      	cbz	r3, 4f5a <createQueuesAndSemaphores+0x56>
       (AtReceiveQueue  != NULL) &&
    4f36:	b180      	cbz	r0, 4f5a <createQueuesAndSemaphores+0x56>
	   (CmdResponseQueue != NULL))
    {
    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    4f38:	2203      	movs	r2, #3
    4f3a:	2100      	movs	r1, #0
    4f3c:	2001      	movs	r0, #1
    4f3e:	47a0      	blx	r4
    4f40:	4b0a      	ldr	r3, [pc, #40]	; (4f6c <createQueuesAndSemaphores+0x68>)
    4f42:	6018      	str	r0, [r3, #0]
    	SensorScanSemaphore    = xSemaphoreCreateBinary();
    4f44:	2203      	movs	r2, #3
    4f46:	2100      	movs	r1, #0
    4f48:	2001      	movs	r0, #1
    4f4a:	47a0      	blx	r4
    4f4c:	4b08      	ldr	r3, [pc, #32]	; (4f70 <createQueuesAndSemaphores+0x6c>)
    4f4e:	6018      	str	r0, [r3, #0]
    	DebugPrintMutex        = xSemaphoreCreateMutex();
    4f50:	2001      	movs	r0, #1
    4f52:	4b08      	ldr	r3, [pc, #32]	; (4f74 <createQueuesAndSemaphores+0x70>)
    4f54:	4798      	blx	r3
    4f56:	4b08      	ldr	r3, [pc, #32]	; (4f78 <createQueuesAndSemaphores+0x74>)
    4f58:	6018      	str	r0, [r3, #0]
    }
    else
    {
    	status = false;
    }
}
    4f5a:	bd38      	pop	{r3, r4, r5, pc}
    4f5c:	00005839 	.word	0x00005839
    4f60:	200034a0 	.word	0x200034a0
    4f64:	200034b4 	.word	0x200034b4
    4f68:	20003480 	.word	0x20003480
    4f6c:	200034b0 	.word	0x200034b0
    4f70:	200034ac 	.word	0x200034ac
    4f74:	00005a6d 	.word	0x00005a6d
    4f78:	200034a8 	.word	0x200034a8

00004f7c <main>:
{
    4f7c:	b580      	push	{r7, lr}
    4f7e:	b082      	sub	sp, #8
    atmel_start_init();	
    4f80:	4b28      	ldr	r3, [pc, #160]	; (5024 <main+0xa8>)
    4f82:	4798      	blx	r3
    SensorTaskStatus = xTaskCreate( SensorTask, "SensorTask", 150, NULL, 2, &xSensorTaskHandle );
    4f84:	4b28      	ldr	r3, [pc, #160]	; (5028 <main+0xac>)
    4f86:	9301      	str	r3, [sp, #4]
    4f88:	2702      	movs	r7, #2
    4f8a:	9700      	str	r7, [sp, #0]
    4f8c:	2300      	movs	r3, #0
    4f8e:	2296      	movs	r2, #150	; 0x96
    4f90:	4926      	ldr	r1, [pc, #152]	; (502c <main+0xb0>)
    4f92:	4827      	ldr	r0, [pc, #156]	; (5030 <main+0xb4>)
    4f94:	4d27      	ldr	r5, [pc, #156]	; (5034 <main+0xb8>)
    4f96:	47a8      	blx	r5
    4f98:	4c27      	ldr	r4, [pc, #156]	; (5038 <main+0xbc>)
    4f9a:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTxTask", 150, NULL, 1, &xModemTxTaskHandle );
    4f9c:	4b27      	ldr	r3, [pc, #156]	; (503c <main+0xc0>)
    4f9e:	9301      	str	r3, [sp, #4]
    4fa0:	2601      	movs	r6, #1
    4fa2:	9600      	str	r6, [sp, #0]
    4fa4:	2300      	movs	r3, #0
    4fa6:	2296      	movs	r2, #150	; 0x96
    4fa8:	4925      	ldr	r1, [pc, #148]	; (5040 <main+0xc4>)
    4faa:	4826      	ldr	r0, [pc, #152]	; (5044 <main+0xc8>)
    4fac:	47a8      	blx	r5
    4fae:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    4fb0:	4b25      	ldr	r3, [pc, #148]	; (5048 <main+0xcc>)
    4fb2:	9301      	str	r3, [sp, #4]
    4fb4:	9700      	str	r7, [sp, #0]
    4fb6:	2300      	movs	r3, #0
    4fb8:	2296      	movs	r2, #150	; 0x96
    4fba:	4924      	ldr	r1, [pc, #144]	; (504c <main+0xd0>)
    4fbc:	4824      	ldr	r0, [pc, #144]	; (5050 <main+0xd4>)
    4fbe:	47a8      	blx	r5
    4fc0:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    4fc2:	4b24      	ldr	r3, [pc, #144]	; (5054 <main+0xd8>)
    4fc4:	9301      	str	r3, [sp, #4]
    4fc6:	9600      	str	r6, [sp, #0]
    4fc8:	2300      	movs	r3, #0
    4fca:	2296      	movs	r2, #150	; 0x96
    4fcc:	4922      	ldr	r1, [pc, #136]	; (5058 <main+0xdc>)
    4fce:	4823      	ldr	r0, [pc, #140]	; (505c <main+0xe0>)
    4fd0:	47a8      	blx	r5
    4fd2:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    4fd4:	4b22      	ldr	r3, [pc, #136]	; (5060 <main+0xe4>)
    4fd6:	9301      	str	r3, [sp, #4]
    4fd8:	9600      	str	r6, [sp, #0]
    4fda:	2300      	movs	r3, #0
    4fdc:	2296      	movs	r2, #150	; 0x96
    4fde:	4921      	ldr	r1, [pc, #132]	; (5064 <main+0xe8>)
    4fe0:	4821      	ldr	r0, [pc, #132]	; (5068 <main+0xec>)
    4fe2:	47a8      	blx	r5
    if((SensorTaskStatus == pdPASS) &&
    4fe4:	6823      	ldr	r3, [r4, #0]
    4fe6:	42b3      	cmp	r3, r6
    4fe8:	d006      	beq.n	4ff8 <main+0x7c>
    	DEBUG_PRINT("Failed to create tasks");
    4fea:	4820      	ldr	r0, [pc, #128]	; (506c <main+0xf0>)
    4fec:	4b20      	ldr	r3, [pc, #128]	; (5070 <main+0xf4>)
    4fee:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    4ff0:	4820      	ldr	r0, [pc, #128]	; (5074 <main+0xf8>)
    4ff2:	4b1f      	ldr	r3, [pc, #124]	; (5070 <main+0xf4>)
    4ff4:	4798      	blx	r3
    4ff6:	e7fe      	b.n	4ff6 <main+0x7a>
    if((SensorTaskStatus == pdPASS) &&
    4ff8:	68e3      	ldr	r3, [r4, #12]
    4ffa:	42b3      	cmp	r3, r6
    4ffc:	d1f5      	bne.n	4fea <main+0x6e>
       (ModemProcessTaskStatus == pdPASS) &&
    4ffe:	6863      	ldr	r3, [r4, #4]
    5000:	42b3      	cmp	r3, r6
    5002:	d1f2      	bne.n	4fea <main+0x6e>
       (ModemTxTaskStatus == pdPASS) &&
    5004:	68a3      	ldr	r3, [r4, #8]
    5006:	42b3      	cmp	r3, r6
    5008:	d1ef      	bne.n	4fea <main+0x6e>
       (ModemRxTaskStatus == pdPASS) &&
    500a:	42b0      	cmp	r0, r6
    500c:	d1ed      	bne.n	4fea <main+0x6e>
    	if(false != createQueuesAndSemaphores())
    500e:	4b1a      	ldr	r3, [pc, #104]	; (5078 <main+0xfc>)
    5010:	4798      	blx	r3
    5012:	b110      	cbz	r0, 501a <main+0x9e>
    		vTaskStartScheduler();
    5014:	4b19      	ldr	r3, [pc, #100]	; (507c <main+0x100>)
    5016:	4798      	blx	r3
    5018:	e7ea      	b.n	4ff0 <main+0x74>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    501a:	4819      	ldr	r0, [pc, #100]	; (5080 <main+0x104>)
    501c:	4b14      	ldr	r3, [pc, #80]	; (5070 <main+0xf4>)
    501e:	4798      	blx	r3
    5020:	e7e6      	b.n	4ff0 <main+0x74>
    5022:	bf00      	nop
    5024:	000029a9 	.word	0x000029a9
    5028:	200034a4 	.word	0x200034a4
    502c:	00009264 	.word	0x00009264
    5030:	000006f1 	.word	0x000006f1
    5034:	00006069 	.word	0x00006069
    5038:	20000b20 	.word	0x20000b20
    503c:	20003484 	.word	0x20003484
    5040:	00009270 	.word	0x00009270
    5044:	00002571 	.word	0x00002571
    5048:	20003498 	.word	0x20003498
    504c:	0000927c 	.word	0x0000927c
    5050:	00002505 	.word	0x00002505
    5054:	2000348c 	.word	0x2000348c
    5058:	00009288 	.word	0x00009288
    505c:	0000233d 	.word	0x0000233d
    5060:	20003490 	.word	0x20003490
    5064:	0000929c 	.word	0x0000929c
    5068:	00001e99 	.word	0x00001e99
    506c:	000092cc 	.word	0x000092cc
    5070:	000026fd 	.word	0x000026fd
    5074:	000092e4 	.word	0x000092e4
    5078:	00004f05 	.word	0x00004f05
    507c:	00006245 	.word	0x00006245
    5080:	000092ac 	.word	0x000092ac

00005084 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    5084:	f100 0308 	add.w	r3, r0, #8
    5088:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    508a:	f04f 32ff 	mov.w	r2, #4294967295
    508e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    5090:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    5092:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    5094:	2300      	movs	r3, #0
    5096:	6003      	str	r3, [r0, #0]
    5098:	4770      	bx	lr

0000509a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    509a:	2300      	movs	r3, #0
    509c:	6103      	str	r3, [r0, #16]
    509e:	4770      	bx	lr

000050a0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    50a0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    50a2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    50a4:	689a      	ldr	r2, [r3, #8]
    50a6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    50a8:	689a      	ldr	r2, [r3, #8]
    50aa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    50ac:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    50ae:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    50b0:	6803      	ldr	r3, [r0, #0]
    50b2:	3301      	adds	r3, #1
    50b4:	6003      	str	r3, [r0, #0]
    50b6:	4770      	bx	lr

000050b8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    50b8:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    50ba:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    50bc:	f1b5 3fff 	cmp.w	r5, #4294967295
    50c0:	d002      	beq.n	50c8 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    50c2:	f100 0208 	add.w	r2, r0, #8
    50c6:	e002      	b.n	50ce <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    50c8:	6902      	ldr	r2, [r0, #16]
    50ca:	e004      	b.n	50d6 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    50cc:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    50ce:	6853      	ldr	r3, [r2, #4]
    50d0:	681c      	ldr	r4, [r3, #0]
    50d2:	42a5      	cmp	r5, r4
    50d4:	d2fa      	bcs.n	50cc <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    50d6:	6853      	ldr	r3, [r2, #4]
    50d8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    50da:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    50dc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    50de:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    50e0:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    50e2:	6803      	ldr	r3, [r0, #0]
    50e4:	3301      	adds	r3, #1
    50e6:	6003      	str	r3, [r0, #0]
}
    50e8:	bc30      	pop	{r4, r5}
    50ea:	4770      	bx	lr

000050ec <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    50ec:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    50ee:	6842      	ldr	r2, [r0, #4]
    50f0:	6881      	ldr	r1, [r0, #8]
    50f2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    50f4:	6882      	ldr	r2, [r0, #8]
    50f6:	6841      	ldr	r1, [r0, #4]
    50f8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    50fa:	685a      	ldr	r2, [r3, #4]
    50fc:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    50fe:	bf04      	itt	eq
    5100:	6882      	ldreq	r2, [r0, #8]
    5102:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    5104:	2200      	movs	r2, #0
    5106:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    5108:	681a      	ldr	r2, [r3, #0]
    510a:	3a01      	subs	r2, #1
    510c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    510e:	6818      	ldr	r0, [r3, #0]
}
    5110:	4770      	bx	lr
	...

00005114 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    5114:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    5116:	2300      	movs	r3, #0
    5118:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    511a:	4b0d      	ldr	r3, [pc, #52]	; (5150 <prvTaskExitError+0x3c>)
    511c:	681b      	ldr	r3, [r3, #0]
    511e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5122:	d008      	beq.n	5136 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    5124:	f04f 0380 	mov.w	r3, #128	; 0x80
    5128:	f383 8811 	msr	BASEPRI, r3
    512c:	f3bf 8f6f 	isb	sy
    5130:	f3bf 8f4f 	dsb	sy
    5134:	e7fe      	b.n	5134 <prvTaskExitError+0x20>
    5136:	f04f 0380 	mov.w	r3, #128	; 0x80
    513a:	f383 8811 	msr	BASEPRI, r3
    513e:	f3bf 8f6f 	isb	sy
    5142:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    5146:	9b01      	ldr	r3, [sp, #4]
    5148:	2b00      	cmp	r3, #0
    514a:	d0fc      	beq.n	5146 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    514c:	b002      	add	sp, #8
    514e:	4770      	bx	lr
    5150:	20000124 	.word	0x20000124

00005154 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    5154:	4808      	ldr	r0, [pc, #32]	; (5178 <prvPortStartFirstTask+0x24>)
    5156:	6800      	ldr	r0, [r0, #0]
    5158:	6800      	ldr	r0, [r0, #0]
    515a:	f380 8808 	msr	MSP, r0
    515e:	f04f 0000 	mov.w	r0, #0
    5162:	f380 8814 	msr	CONTROL, r0
    5166:	b662      	cpsie	i
    5168:	b661      	cpsie	f
    516a:	f3bf 8f4f 	dsb	sy
    516e:	f3bf 8f6f 	isb	sy
    5172:	df00      	svc	0
    5174:	bf00      	nop
    5176:	0000      	.short	0x0000
    5178:	e000ed08 	.word	0xe000ed08

0000517c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    517c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 518c <vPortEnableVFP+0x10>
    5180:	6801      	ldr	r1, [r0, #0]
    5182:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    5186:	6001      	str	r1, [r0, #0]
    5188:	4770      	bx	lr
    518a:	0000      	.short	0x0000
    518c:	e000ed88 	.word	0xe000ed88

00005190 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    5190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5194:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    5198:	f021 0101 	bic.w	r1, r1, #1
    519c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    51a0:	4b05      	ldr	r3, [pc, #20]	; (51b8 <pxPortInitialiseStack+0x28>)
    51a2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    51a6:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    51aa:	f06f 0302 	mvn.w	r3, #2
    51ae:	f840 3c24 	str.w	r3, [r0, #-36]
}
    51b2:	3844      	subs	r0, #68	; 0x44
    51b4:	4770      	bx	lr
    51b6:	bf00      	nop
    51b8:	00005115 	.word	0x00005115
    51bc:	00000000 	.word	0x00000000

000051c0 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    51c0:	4b07      	ldr	r3, [pc, #28]	; (51e0 <pxCurrentTCBConst2>)
    51c2:	6819      	ldr	r1, [r3, #0]
    51c4:	6808      	ldr	r0, [r1, #0]
    51c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51ca:	f380 8809 	msr	PSP, r0
    51ce:	f3bf 8f6f 	isb	sy
    51d2:	f04f 0000 	mov.w	r0, #0
    51d6:	f380 8811 	msr	BASEPRI, r0
    51da:	4770      	bx	lr
    51dc:	f3af 8000 	nop.w

000051e0 <pxCurrentTCBConst2>:
    51e0:	200033e4 	.word	0x200033e4

000051e4 <vPortEnterCritical>:
    51e4:	f04f 0380 	mov.w	r3, #128	; 0x80
    51e8:	f383 8811 	msr	BASEPRI, r3
    51ec:	f3bf 8f6f 	isb	sy
    51f0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    51f4:	4a0a      	ldr	r2, [pc, #40]	; (5220 <vPortEnterCritical+0x3c>)
    51f6:	6813      	ldr	r3, [r2, #0]
    51f8:	3301      	adds	r3, #1
    51fa:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    51fc:	2b01      	cmp	r3, #1
    51fe:	d10d      	bne.n	521c <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    5200:	4b08      	ldr	r3, [pc, #32]	; (5224 <vPortEnterCritical+0x40>)
    5202:	681b      	ldr	r3, [r3, #0]
    5204:	f013 0fff 	tst.w	r3, #255	; 0xff
    5208:	d008      	beq.n	521c <vPortEnterCritical+0x38>
    520a:	f04f 0380 	mov.w	r3, #128	; 0x80
    520e:	f383 8811 	msr	BASEPRI, r3
    5212:	f3bf 8f6f 	isb	sy
    5216:	f3bf 8f4f 	dsb	sy
    521a:	e7fe      	b.n	521a <vPortEnterCritical+0x36>
    521c:	4770      	bx	lr
    521e:	bf00      	nop
    5220:	20000124 	.word	0x20000124
    5224:	e000ed04 	.word	0xe000ed04

00005228 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    5228:	4b09      	ldr	r3, [pc, #36]	; (5250 <vPortExitCritical+0x28>)
    522a:	681b      	ldr	r3, [r3, #0]
    522c:	b943      	cbnz	r3, 5240 <vPortExitCritical+0x18>
    522e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5232:	f383 8811 	msr	BASEPRI, r3
    5236:	f3bf 8f6f 	isb	sy
    523a:	f3bf 8f4f 	dsb	sy
    523e:	e7fe      	b.n	523e <vPortExitCritical+0x16>
	uxCriticalNesting--;
    5240:	3b01      	subs	r3, #1
    5242:	4a03      	ldr	r2, [pc, #12]	; (5250 <vPortExitCritical+0x28>)
    5244:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    5246:	b90b      	cbnz	r3, 524c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    5248:	f383 8811 	msr	BASEPRI, r3
    524c:	4770      	bx	lr
    524e:	bf00      	nop
    5250:	20000124 	.word	0x20000124
	...

00005260 <PendSV_Handler>:
	__asm volatile(
    5260:	f3ef 8009 	mrs	r0, PSP
    5264:	f3bf 8f6f 	isb	sy
    5268:	4b15      	ldr	r3, [pc, #84]	; (52c0 <pxCurrentTCBConst>)
    526a:	681a      	ldr	r2, [r3, #0]
    526c:	f01e 0f10 	tst.w	lr, #16
    5270:	bf08      	it	eq
    5272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    5276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    527a:	6010      	str	r0, [r2, #0]
    527c:	e92d 0009 	stmdb	sp!, {r0, r3}
    5280:	f04f 0080 	mov.w	r0, #128	; 0x80
    5284:	f380 8811 	msr	BASEPRI, r0
    5288:	f3bf 8f4f 	dsb	sy
    528c:	f3bf 8f6f 	isb	sy
    5290:	f001 f972 	bl	6578 <vTaskSwitchContext>
    5294:	f04f 0000 	mov.w	r0, #0
    5298:	f380 8811 	msr	BASEPRI, r0
    529c:	bc09      	pop	{r0, r3}
    529e:	6819      	ldr	r1, [r3, #0]
    52a0:	6808      	ldr	r0, [r1, #0]
    52a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    52a6:	f01e 0f10 	tst.w	lr, #16
    52aa:	bf08      	it	eq
    52ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    52b0:	f380 8809 	msr	PSP, r0
    52b4:	f3bf 8f6f 	isb	sy
    52b8:	4770      	bx	lr
    52ba:	bf00      	nop
    52bc:	f3af 8000 	nop.w

000052c0 <pxCurrentTCBConst>:
    52c0:	200033e4 	.word	0x200033e4

000052c4 <SysTick_Handler>:
{
    52c4:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    52c6:	f04f 0380 	mov.w	r3, #128	; 0x80
    52ca:	f383 8811 	msr	BASEPRI, r3
    52ce:	f3bf 8f6f 	isb	sy
    52d2:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    52d6:	4b05      	ldr	r3, [pc, #20]	; (52ec <SysTick_Handler+0x28>)
    52d8:	4798      	blx	r3
    52da:	b118      	cbz	r0, 52e4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    52dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    52e0:	4b03      	ldr	r3, [pc, #12]	; (52f0 <SysTick_Handler+0x2c>)
    52e2:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    52e4:	2300      	movs	r3, #0
    52e6:	f383 8811 	msr	BASEPRI, r3
    52ea:	bd08      	pop	{r3, pc}
    52ec:	000062ed 	.word	0x000062ed
    52f0:	e000ed04 	.word	0xe000ed04

000052f4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    52f4:	4b05      	ldr	r3, [pc, #20]	; (530c <vPortSetupTimerInterrupt+0x18>)
    52f6:	2200      	movs	r2, #0
    52f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    52fa:	4905      	ldr	r1, [pc, #20]	; (5310 <vPortSetupTimerInterrupt+0x1c>)
    52fc:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    52fe:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    5302:	4a04      	ldr	r2, [pc, #16]	; (5314 <vPortSetupTimerInterrupt+0x20>)
    5304:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    5306:	2207      	movs	r2, #7
    5308:	601a      	str	r2, [r3, #0]
    530a:	4770      	bx	lr
    530c:	e000e010 	.word	0xe000e010
    5310:	e000e018 	.word	0xe000e018
    5314:	e000e014 	.word	0xe000e014

00005318 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    5318:	4b3b      	ldr	r3, [pc, #236]	; (5408 <xPortStartScheduler+0xf0>)
    531a:	681a      	ldr	r2, [r3, #0]
    531c:	4b3b      	ldr	r3, [pc, #236]	; (540c <xPortStartScheduler+0xf4>)
    531e:	429a      	cmp	r2, r3
    5320:	d108      	bne.n	5334 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    5322:	f04f 0380 	mov.w	r3, #128	; 0x80
    5326:	f383 8811 	msr	BASEPRI, r3
    532a:	f3bf 8f6f 	isb	sy
    532e:	f3bf 8f4f 	dsb	sy
    5332:	e7fe      	b.n	5332 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    5334:	4b34      	ldr	r3, [pc, #208]	; (5408 <xPortStartScheduler+0xf0>)
    5336:	681a      	ldr	r2, [r3, #0]
    5338:	4b35      	ldr	r3, [pc, #212]	; (5410 <xPortStartScheduler+0xf8>)
    533a:	429a      	cmp	r2, r3
    533c:	d108      	bne.n	5350 <xPortStartScheduler+0x38>
    533e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5342:	f383 8811 	msr	BASEPRI, r3
    5346:	f3bf 8f6f 	isb	sy
    534a:	f3bf 8f4f 	dsb	sy
    534e:	e7fe      	b.n	534e <xPortStartScheduler+0x36>
{
    5350:	b510      	push	{r4, lr}
    5352:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    5354:	4b2f      	ldr	r3, [pc, #188]	; (5414 <xPortStartScheduler+0xfc>)
    5356:	781a      	ldrb	r2, [r3, #0]
    5358:	b2d2      	uxtb	r2, r2
    535a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    535c:	22ff      	movs	r2, #255	; 0xff
    535e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    5360:	781b      	ldrb	r3, [r3, #0]
    5362:	b2db      	uxtb	r3, r3
    5364:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    5368:	f89d 3003 	ldrb.w	r3, [sp, #3]
    536c:	4a2a      	ldr	r2, [pc, #168]	; (5418 <xPortStartScheduler+0x100>)
    536e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    5372:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    5374:	2307      	movs	r3, #7
    5376:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    5378:	f89d 3003 	ldrb.w	r3, [sp, #3]
    537c:	f013 0f80 	tst.w	r3, #128	; 0x80
    5380:	d012      	beq.n	53a8 <xPortStartScheduler+0x90>
    5382:	2306      	movs	r3, #6
    5384:	e000      	b.n	5388 <xPortStartScheduler+0x70>
    5386:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    5388:	f89d 2003 	ldrb.w	r2, [sp, #3]
    538c:	0052      	lsls	r2, r2, #1
    538e:	b2d2      	uxtb	r2, r2
    5390:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    5394:	f89d 2003 	ldrb.w	r2, [sp, #3]
    5398:	1e59      	subs	r1, r3, #1
    539a:	f012 0f80 	tst.w	r2, #128	; 0x80
    539e:	d1f2      	bne.n	5386 <xPortStartScheduler+0x6e>
    53a0:	4a1d      	ldr	r2, [pc, #116]	; (5418 <xPortStartScheduler+0x100>)
    53a2:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    53a4:	2b04      	cmp	r3, #4
    53a6:	d008      	beq.n	53ba <xPortStartScheduler+0xa2>
    53a8:	f04f 0380 	mov.w	r3, #128	; 0x80
    53ac:	f383 8811 	msr	BASEPRI, r3
    53b0:	f3bf 8f6f 	isb	sy
    53b4:	f3bf 8f4f 	dsb	sy
    53b8:	e7fe      	b.n	53b8 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    53ba:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    53bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    53c0:	4a15      	ldr	r2, [pc, #84]	; (5418 <xPortStartScheduler+0x100>)
    53c2:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    53c4:	9b01      	ldr	r3, [sp, #4]
    53c6:	b2db      	uxtb	r3, r3
    53c8:	4a12      	ldr	r2, [pc, #72]	; (5414 <xPortStartScheduler+0xfc>)
    53ca:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    53cc:	4b13      	ldr	r3, [pc, #76]	; (541c <xPortStartScheduler+0x104>)
    53ce:	681a      	ldr	r2, [r3, #0]
    53d0:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    53d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    53d6:	681a      	ldr	r2, [r3, #0]
    53d8:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    53dc:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    53de:	4b10      	ldr	r3, [pc, #64]	; (5420 <xPortStartScheduler+0x108>)
    53e0:	4798      	blx	r3
	uxCriticalNesting = 0;
    53e2:	2400      	movs	r4, #0
    53e4:	4b0f      	ldr	r3, [pc, #60]	; (5424 <xPortStartScheduler+0x10c>)
    53e6:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    53e8:	4b0f      	ldr	r3, [pc, #60]	; (5428 <xPortStartScheduler+0x110>)
    53ea:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    53ec:	4a0f      	ldr	r2, [pc, #60]	; (542c <xPortStartScheduler+0x114>)
    53ee:	6813      	ldr	r3, [r2, #0]
    53f0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    53f4:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    53f6:	4b0e      	ldr	r3, [pc, #56]	; (5430 <xPortStartScheduler+0x118>)
    53f8:	4798      	blx	r3
	vTaskSwitchContext();
    53fa:	4b0e      	ldr	r3, [pc, #56]	; (5434 <xPortStartScheduler+0x11c>)
    53fc:	4798      	blx	r3
	prvTaskExitError();
    53fe:	4b0e      	ldr	r3, [pc, #56]	; (5438 <xPortStartScheduler+0x120>)
    5400:	4798      	blx	r3
}
    5402:	4620      	mov	r0, r4
    5404:	b002      	add	sp, #8
    5406:	bd10      	pop	{r4, pc}
    5408:	e000ed00 	.word	0xe000ed00
    540c:	410fc271 	.word	0x410fc271
    5410:	410fc270 	.word	0x410fc270
    5414:	e000e400 	.word	0xe000e400
    5418:	20000b30 	.word	0x20000b30
    541c:	e000ed20 	.word	0xe000ed20
    5420:	000052f5 	.word	0x000052f5
    5424:	20000124 	.word	0x20000124
    5428:	0000517d 	.word	0x0000517d
    542c:	e000ef34 	.word	0xe000ef34
    5430:	00005155 	.word	0x00005155
    5434:	00006579 	.word	0x00006579
    5438:	00005115 	.word	0x00005115

0000543c <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    543c:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    5440:	2b0f      	cmp	r3, #15
    5442:	d90f      	bls.n	5464 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    5444:	4a10      	ldr	r2, [pc, #64]	; (5488 <vPortValidateInterruptPriority+0x4c>)
    5446:	5c9b      	ldrb	r3, [r3, r2]
    5448:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    544a:	4a10      	ldr	r2, [pc, #64]	; (548c <vPortValidateInterruptPriority+0x50>)
    544c:	7812      	ldrb	r2, [r2, #0]
    544e:	429a      	cmp	r2, r3
    5450:	d908      	bls.n	5464 <vPortValidateInterruptPriority+0x28>
    5452:	f04f 0380 	mov.w	r3, #128	; 0x80
    5456:	f383 8811 	msr	BASEPRI, r3
    545a:	f3bf 8f6f 	isb	sy
    545e:	f3bf 8f4f 	dsb	sy
    5462:	e7fe      	b.n	5462 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    5464:	4b0a      	ldr	r3, [pc, #40]	; (5490 <vPortValidateInterruptPriority+0x54>)
    5466:	681b      	ldr	r3, [r3, #0]
    5468:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    546c:	4a07      	ldr	r2, [pc, #28]	; (548c <vPortValidateInterruptPriority+0x50>)
    546e:	6852      	ldr	r2, [r2, #4]
    5470:	4293      	cmp	r3, r2
    5472:	d908      	bls.n	5486 <vPortValidateInterruptPriority+0x4a>
    5474:	f04f 0380 	mov.w	r3, #128	; 0x80
    5478:	f383 8811 	msr	BASEPRI, r3
    547c:	f3bf 8f6f 	isb	sy
    5480:	f3bf 8f4f 	dsb	sy
    5484:	e7fe      	b.n	5484 <vPortValidateInterruptPriority+0x48>
    5486:	4770      	bx	lr
    5488:	e000e3f0 	.word	0xe000e3f0
    548c:	20000b30 	.word	0x20000b30
    5490:	e000ed0c 	.word	0xe000ed0c

00005494 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    5494:	b570      	push	{r4, r5, r6, lr}
    5496:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;

	vTaskSuspendAll();
    5498:	4b2d      	ldr	r3, [pc, #180]	; (5550 <pvPortMalloc+0xbc>)
    549a:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    549c:	4b2d      	ldr	r3, [pc, #180]	; (5554 <pvPortMalloc+0xc0>)
    549e:	689b      	ldr	r3, [r3, #8]
    54a0:	b183      	cbz	r3, 54c4 <pvPortMalloc+0x30>
			xHeapHasBeenInitialised = pdTRUE;
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    54a2:	2c00      	cmp	r4, #0
    54a4:	d04d      	beq.n	5542 <pvPortMalloc+0xae>
		{
			xWantedSize += heapSTRUCT_SIZE;
    54a6:	3408      	adds	r4, #8

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
    54a8:	f014 0f07 	tst.w	r4, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    54ac:	bf1c      	itt	ne
    54ae:	f024 0407 	bicne.w	r4, r4, #7
    54b2:	3408      	addne	r4, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    54b4:	1e62      	subs	r2, r4, #1
    54b6:	f242 73f6 	movw	r3, #10230	; 0x27f6
    54ba:	429a      	cmp	r2, r3
    54bc:	d843      	bhi.n	5546 <pvPortMalloc+0xb2>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
    54be:	4925      	ldr	r1, [pc, #148]	; (5554 <pvPortMalloc+0xc0>)
    54c0:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    54c2:	e017      	b.n	54f4 <pvPortMalloc+0x60>
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    54c4:	4923      	ldr	r1, [pc, #140]	; (5554 <pvPortMalloc+0xc0>)
    54c6:	f101 0314 	add.w	r3, r1, #20
    54ca:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    54ce:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
    54d0:	2500      	movs	r5, #0
    54d2:	604d      	str	r5, [r1, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    54d4:	4a20      	ldr	r2, [pc, #128]	; (5558 <pvPortMalloc+0xc4>)
    54d6:	f242 70f8 	movw	r0, #10232	; 0x27f8
    54da:	f8c2 0620 	str.w	r0, [r2, #1568]	; 0x620
	xEnd.pxNextFreeBlock = NULL;
    54de:	f8c2 561c 	str.w	r5, [r2, #1564]	; 0x61c

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    54e2:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    54e4:	f202 621c 	addw	r2, r2, #1564	; 0x61c
    54e8:	601a      	str	r2, [r3, #0]
			xHeapHasBeenInitialised = pdTRUE;
    54ea:	2301      	movs	r3, #1
    54ec:	608b      	str	r3, [r1, #8]
    54ee:	e7d8      	b.n	54a2 <pvPortMalloc+0xe>
    54f0:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
    54f2:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    54f4:	685a      	ldr	r2, [r3, #4]
    54f6:	4294      	cmp	r4, r2
    54f8:	d902      	bls.n	5500 <pvPortMalloc+0x6c>
    54fa:	681a      	ldr	r2, [r3, #0]
    54fc:	2a00      	cmp	r2, #0
    54fe:	d1f7      	bne.n	54f0 <pvPortMalloc+0x5c>
			if( pxBlock != &xEnd )
    5500:	4a16      	ldr	r2, [pc, #88]	; (555c <pvPortMalloc+0xc8>)
    5502:	4293      	cmp	r3, r2
    5504:	d021      	beq.n	554a <pvPortMalloc+0xb6>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    5506:	680d      	ldr	r5, [r1, #0]
    5508:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    550a:	681a      	ldr	r2, [r3, #0]
    550c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    550e:	685a      	ldr	r2, [r3, #4]
    5510:	1b12      	subs	r2, r2, r4
    5512:	2a10      	cmp	r2, #16
    5514:	d90c      	bls.n	5530 <pvPortMalloc+0x9c>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    5516:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    5518:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
    551a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    551c:	6874      	ldr	r4, [r6, #4]
    551e:	490d      	ldr	r1, [pc, #52]	; (5554 <pvPortMalloc+0xc0>)
    5520:	e000      	b.n	5524 <pvPortMalloc+0x90>
    5522:	4611      	mov	r1, r2
    5524:	680a      	ldr	r2, [r1, #0]
    5526:	6850      	ldr	r0, [r2, #4]
    5528:	4284      	cmp	r4, r0
    552a:	d8fa      	bhi.n	5522 <pvPortMalloc+0x8e>
    552c:	6032      	str	r2, [r6, #0]
    552e:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
    5530:	490b      	ldr	r1, [pc, #44]	; (5560 <pvPortMalloc+0xcc>)
    5532:	680a      	ldr	r2, [r1, #0]
    5534:	685b      	ldr	r3, [r3, #4]
    5536:	1ad2      	subs	r2, r2, r3
    5538:	600a      	str	r2, [r1, #0]
	( void ) xTaskResumeAll();
    553a:	4b0a      	ldr	r3, [pc, #40]	; (5564 <pvPortMalloc+0xd0>)
    553c:	4798      	blx	r3
}
    553e:	4628      	mov	r0, r5
    5540:	bd70      	pop	{r4, r5, r6, pc}
void *pvReturn = NULL;
    5542:	2500      	movs	r5, #0
    5544:	e7f9      	b.n	553a <pvPortMalloc+0xa6>
    5546:	2500      	movs	r5, #0
    5548:	e7f7      	b.n	553a <pvPortMalloc+0xa6>
    554a:	2500      	movs	r5, #0
    554c:	e7f5      	b.n	553a <pvPortMalloc+0xa6>
    554e:	bf00      	nop
    5550:	000062cd 	.word	0x000062cd
    5554:	20000b38 	.word	0x20000b38
    5558:	20002d28 	.word	0x20002d28
    555c:	20003344 	.word	0x20003344
    5560:	20000128 	.word	0x20000128
    5564:	00006415 	.word	0x00006415

00005568 <vPortFree>:
	if( pv != NULL )
    5568:	b1d0      	cbz	r0, 55a0 <vPortFree+0x38>
{
    556a:	b570      	push	{r4, r5, r6, lr}
    556c:	4605      	mov	r5, r0
		puc -= heapSTRUCT_SIZE;
    556e:	f1a0 0608 	sub.w	r6, r0, #8
		vTaskSuspendAll();
    5572:	4b0c      	ldr	r3, [pc, #48]	; (55a4 <vPortFree+0x3c>)
    5574:	4798      	blx	r3
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    5576:	f855 4c04 	ldr.w	r4, [r5, #-4]
    557a:	4a0b      	ldr	r2, [pc, #44]	; (55a8 <vPortFree+0x40>)
    557c:	e000      	b.n	5580 <vPortFree+0x18>
    557e:	461a      	mov	r2, r3
    5580:	6813      	ldr	r3, [r2, #0]
    5582:	6859      	ldr	r1, [r3, #4]
    5584:	428c      	cmp	r4, r1
    5586:	d8fa      	bhi.n	557e <vPortFree+0x16>
    5588:	f845 3c08 	str.w	r3, [r5, #-8]
    558c:	6016      	str	r6, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
    558e:	4a07      	ldr	r2, [pc, #28]	; (55ac <vPortFree+0x44>)
    5590:	f855 3c04 	ldr.w	r3, [r5, #-4]
    5594:	6811      	ldr	r1, [r2, #0]
    5596:	440b      	add	r3, r1
    5598:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
    559a:	4b05      	ldr	r3, [pc, #20]	; (55b0 <vPortFree+0x48>)
    559c:	4798      	blx	r3
    559e:	bd70      	pop	{r4, r5, r6, pc}
    55a0:	4770      	bx	lr
    55a2:	bf00      	nop
    55a4:	000062cd 	.word	0x000062cd
    55a8:	20000b38 	.word	0x20000b38
    55ac:	20000128 	.word	0x20000128
    55b0:	00006415 	.word	0x00006415

000055b4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    55b4:	b510      	push	{r4, lr}
    55b6:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    55b8:	4b04      	ldr	r3, [pc, #16]	; (55cc <prvIsQueueEmpty+0x18>)
    55ba:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    55bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    55be:	4b04      	ldr	r3, [pc, #16]	; (55d0 <prvIsQueueEmpty+0x1c>)
    55c0:	4798      	blx	r3

	return xReturn;
}
    55c2:	fab4 f084 	clz	r0, r4
    55c6:	0940      	lsrs	r0, r0, #5
    55c8:	bd10      	pop	{r4, pc}
    55ca:	bf00      	nop
    55cc:	000051e5 	.word	0x000051e5
    55d0:	00005229 	.word	0x00005229

000055d4 <prvCopyDataToQueue>:
{
    55d4:	b570      	push	{r4, r5, r6, lr}
    55d6:	4604      	mov	r4, r0
    55d8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    55da:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    55dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    55de:	b952      	cbnz	r2, 55f6 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    55e0:	6803      	ldr	r3, [r0, #0]
    55e2:	2b00      	cmp	r3, #0
    55e4:	d12a      	bne.n	563c <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    55e6:	6840      	ldr	r0, [r0, #4]
    55e8:	4b18      	ldr	r3, [pc, #96]	; (564c <prvCopyDataToQueue+0x78>)
    55ea:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    55ec:	2300      	movs	r3, #0
    55ee:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    55f0:	3501      	adds	r5, #1
    55f2:	63a5      	str	r5, [r4, #56]	; 0x38
}
    55f4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    55f6:	b96e      	cbnz	r6, 5614 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    55f8:	6880      	ldr	r0, [r0, #8]
    55fa:	4b15      	ldr	r3, [pc, #84]	; (5650 <prvCopyDataToQueue+0x7c>)
    55fc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    55fe:	68a3      	ldr	r3, [r4, #8]
    5600:	6c22      	ldr	r2, [r4, #64]	; 0x40
    5602:	4413      	add	r3, r2
    5604:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    5606:	6862      	ldr	r2, [r4, #4]
    5608:	4293      	cmp	r3, r2
    560a:	d319      	bcc.n	5640 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    560c:	6823      	ldr	r3, [r4, #0]
    560e:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    5610:	2000      	movs	r0, #0
    5612:	e7ed      	b.n	55f0 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    5614:	68c0      	ldr	r0, [r0, #12]
    5616:	4b0e      	ldr	r3, [pc, #56]	; (5650 <prvCopyDataToQueue+0x7c>)
    5618:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    561a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    561c:	425b      	negs	r3, r3
    561e:	68e2      	ldr	r2, [r4, #12]
    5620:	441a      	add	r2, r3
    5622:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    5624:	6821      	ldr	r1, [r4, #0]
    5626:	428a      	cmp	r2, r1
    5628:	d202      	bcs.n	5630 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    562a:	6862      	ldr	r2, [r4, #4]
    562c:	4413      	add	r3, r2
    562e:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    5630:	2e02      	cmp	r6, #2
    5632:	d107      	bne.n	5644 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    5634:	b145      	cbz	r5, 5648 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    5636:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    5638:	2000      	movs	r0, #0
    563a:	e7d9      	b.n	55f0 <prvCopyDataToQueue+0x1c>
    563c:	2000      	movs	r0, #0
    563e:	e7d7      	b.n	55f0 <prvCopyDataToQueue+0x1c>
    5640:	2000      	movs	r0, #0
    5642:	e7d5      	b.n	55f0 <prvCopyDataToQueue+0x1c>
    5644:	2000      	movs	r0, #0
    5646:	e7d3      	b.n	55f0 <prvCopyDataToQueue+0x1c>
    5648:	2000      	movs	r0, #0
    564a:	e7d1      	b.n	55f0 <prvCopyDataToQueue+0x1c>
    564c:	000068b9 	.word	0x000068b9
    5650:	0000707b 	.word	0x0000707b

00005654 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    5654:	b570      	push	{r4, r5, r6, lr}
    5656:	b082      	sub	sp, #8
    5658:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    565a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    565c:	b164      	cbz	r4, 5678 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    565e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5660:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5662:	429a      	cmp	r2, r3
    5664:	d311      	bcc.n	568a <prvNotifyQueueSetContainer+0x36>
    5666:	f04f 0380 	mov.w	r3, #128	; 0x80
    566a:	f383 8811 	msr	BASEPRI, r3
    566e:	f3bf 8f6f 	isb	sy
    5672:	f3bf 8f4f 	dsb	sy
    5676:	e7fe      	b.n	5676 <prvNotifyQueueSetContainer+0x22>
    5678:	f04f 0380 	mov.w	r3, #128	; 0x80
    567c:	f383 8811 	msr	BASEPRI, r3
    5680:	f3bf 8f6f 	isb	sy
    5684:	f3bf 8f4f 	dsb	sy
    5688:	e7fe      	b.n	5688 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    568a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    568c:	4293      	cmp	r3, r2
    568e:	d803      	bhi.n	5698 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    5690:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    5692:	4630      	mov	r0, r6
    5694:	b002      	add	sp, #8
    5696:	bd70      	pop	{r4, r5, r6, pc}
    5698:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    569a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    569e:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    56a0:	a901      	add	r1, sp, #4
    56a2:	4620      	mov	r0, r4
    56a4:	4b0a      	ldr	r3, [pc, #40]	; (56d0 <prvNotifyQueueSetContainer+0x7c>)
    56a6:	4798      	blx	r3
    56a8:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    56aa:	f1b5 3fff 	cmp.w	r5, #4294967295
    56ae:	d10a      	bne.n	56c6 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    56b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    56b2:	2b00      	cmp	r3, #0
    56b4:	d0ed      	beq.n	5692 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    56b6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    56ba:	4b06      	ldr	r3, [pc, #24]	; (56d4 <prvNotifyQueueSetContainer+0x80>)
    56bc:	4798      	blx	r3
    56be:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    56c0:	bf18      	it	ne
    56c2:	2601      	movne	r6, #1
    56c4:	e7e5      	b.n	5692 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    56c6:	1c6b      	adds	r3, r5, #1
    56c8:	b25b      	sxtb	r3, r3
    56ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    56ce:	e7e0      	b.n	5692 <prvNotifyQueueSetContainer+0x3e>
    56d0:	000055d5 	.word	0x000055d5
    56d4:	000066b5 	.word	0x000066b5

000056d8 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    56d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    56da:	b172      	cbz	r2, 56fa <prvCopyDataFromQueue+0x22>
{
    56dc:	b510      	push	{r4, lr}
    56de:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    56e0:	68c4      	ldr	r4, [r0, #12]
    56e2:	4414      	add	r4, r2
    56e4:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    56e6:	6840      	ldr	r0, [r0, #4]
    56e8:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    56ea:	bf24      	itt	cs
    56ec:	6818      	ldrcs	r0, [r3, #0]
    56ee:	60d8      	strcs	r0, [r3, #12]
    56f0:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    56f2:	68d9      	ldr	r1, [r3, #12]
    56f4:	4b01      	ldr	r3, [pc, #4]	; (56fc <prvCopyDataFromQueue+0x24>)
    56f6:	4798      	blx	r3
    56f8:	bd10      	pop	{r4, pc}
    56fa:	4770      	bx	lr
    56fc:	0000707b 	.word	0x0000707b

00005700 <prvUnlockQueue>:
{
    5700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5704:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    5706:	4b23      	ldr	r3, [pc, #140]	; (5794 <prvUnlockQueue+0x94>)
    5708:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    570a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    570e:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    5710:	2c00      	cmp	r4, #0
    5712:	dd19      	ble.n	5748 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    5714:	4e20      	ldr	r6, [pc, #128]	; (5798 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    5716:	f8df 808c 	ldr.w	r8, [pc, #140]	; 57a4 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    571a:	4f20      	ldr	r7, [pc, #128]	; (579c <prvUnlockQueue+0x9c>)
    571c:	e008      	b.n	5730 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    571e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5720:	b193      	cbz	r3, 5748 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    5722:	f105 0024 	add.w	r0, r5, #36	; 0x24
    5726:	47b8      	blx	r7
    5728:	b960      	cbnz	r0, 5744 <prvUnlockQueue+0x44>
    572a:	3c01      	subs	r4, #1
    572c:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    572e:	b15c      	cbz	r4, 5748 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    5730:	6cab      	ldr	r3, [r5, #72]	; 0x48
    5732:	2b00      	cmp	r3, #0
    5734:	d0f3      	beq.n	571e <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    5736:	2100      	movs	r1, #0
    5738:	4628      	mov	r0, r5
    573a:	47b0      	blx	r6
    573c:	2800      	cmp	r0, #0
    573e:	d0f4      	beq.n	572a <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    5740:	47c0      	blx	r8
    5742:	e7f2      	b.n	572a <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    5744:	47c0      	blx	r8
    5746:	e7f0      	b.n	572a <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    5748:	23ff      	movs	r3, #255	; 0xff
    574a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    574e:	4b14      	ldr	r3, [pc, #80]	; (57a0 <prvUnlockQueue+0xa0>)
    5750:	4798      	blx	r3
	taskENTER_CRITICAL();
    5752:	4b10      	ldr	r3, [pc, #64]	; (5794 <prvUnlockQueue+0x94>)
    5754:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    5756:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    575a:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    575c:	2c00      	cmp	r4, #0
    575e:	dd12      	ble.n	5786 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5760:	692b      	ldr	r3, [r5, #16]
    5762:	b183      	cbz	r3, 5786 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5764:	f105 0710 	add.w	r7, r5, #16
    5768:	4e0c      	ldr	r6, [pc, #48]	; (579c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    576a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 57a4 <prvUnlockQueue+0xa4>
    576e:	e004      	b.n	577a <prvUnlockQueue+0x7a>
    5770:	3c01      	subs	r4, #1
    5772:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    5774:	b13c      	cbz	r4, 5786 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5776:	692b      	ldr	r3, [r5, #16]
    5778:	b12b      	cbz	r3, 5786 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    577a:	4638      	mov	r0, r7
    577c:	47b0      	blx	r6
    577e:	2800      	cmp	r0, #0
    5780:	d0f6      	beq.n	5770 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    5782:	47c0      	blx	r8
    5784:	e7f4      	b.n	5770 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    5786:	23ff      	movs	r3, #255	; 0xff
    5788:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    578c:	4b04      	ldr	r3, [pc, #16]	; (57a0 <prvUnlockQueue+0xa0>)
    578e:	4798      	blx	r3
    5790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5794:	000051e5 	.word	0x000051e5
    5798:	00005655 	.word	0x00005655
    579c:	000066b5 	.word	0x000066b5
    57a0:	00005229 	.word	0x00005229
    57a4:	000067e5 	.word	0x000067e5

000057a8 <xQueueGenericReset>:
{
    57a8:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    57aa:	b330      	cbz	r0, 57fa <xQueueGenericReset+0x52>
    57ac:	4604      	mov	r4, r0
    57ae:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    57b0:	4b1c      	ldr	r3, [pc, #112]	; (5824 <xQueueGenericReset+0x7c>)
    57b2:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    57b4:	6822      	ldr	r2, [r4, #0]
    57b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    57b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    57ba:	fb03 f301 	mul.w	r3, r3, r1
    57be:	18d0      	adds	r0, r2, r3
    57c0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    57c2:	2000      	movs	r0, #0
    57c4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    57c6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    57c8:	1a5b      	subs	r3, r3, r1
    57ca:	4413      	add	r3, r2
    57cc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    57ce:	23ff      	movs	r3, #255	; 0xff
    57d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    57d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    57d8:	b9c5      	cbnz	r5, 580c <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    57da:	6923      	ldr	r3, [r4, #16]
    57dc:	b1eb      	cbz	r3, 581a <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    57de:	f104 0010 	add.w	r0, r4, #16
    57e2:	4b11      	ldr	r3, [pc, #68]	; (5828 <xQueueGenericReset+0x80>)
    57e4:	4798      	blx	r3
    57e6:	b1c0      	cbz	r0, 581a <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    57e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    57ec:	4b0f      	ldr	r3, [pc, #60]	; (582c <xQueueGenericReset+0x84>)
    57ee:	601a      	str	r2, [r3, #0]
    57f0:	f3bf 8f4f 	dsb	sy
    57f4:	f3bf 8f6f 	isb	sy
    57f8:	e00f      	b.n	581a <xQueueGenericReset+0x72>
    57fa:	f04f 0380 	mov.w	r3, #128	; 0x80
    57fe:	f383 8811 	msr	BASEPRI, r3
    5802:	f3bf 8f6f 	isb	sy
    5806:	f3bf 8f4f 	dsb	sy
    580a:	e7fe      	b.n	580a <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    580c:	f104 0010 	add.w	r0, r4, #16
    5810:	4d07      	ldr	r5, [pc, #28]	; (5830 <xQueueGenericReset+0x88>)
    5812:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    5814:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5818:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    581a:	4b06      	ldr	r3, [pc, #24]	; (5834 <xQueueGenericReset+0x8c>)
    581c:	4798      	blx	r3
}
    581e:	2001      	movs	r0, #1
    5820:	bd38      	pop	{r3, r4, r5, pc}
    5822:	bf00      	nop
    5824:	000051e5 	.word	0x000051e5
    5828:	000066b5 	.word	0x000066b5
    582c:	e000ed04 	.word	0xe000ed04
    5830:	00005085 	.word	0x00005085
    5834:	00005229 	.word	0x00005229

00005838 <xQueueGenericCreate>:
{
    5838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    583a:	b940      	cbnz	r0, 584e <xQueueGenericCreate+0x16>
    583c:	f04f 0380 	mov.w	r3, #128	; 0x80
    5840:	f383 8811 	msr	BASEPRI, r3
    5844:	f3bf 8f6f 	isb	sy
    5848:	f3bf 8f4f 	dsb	sy
    584c:	e7fe      	b.n	584c <xQueueGenericCreate+0x14>
    584e:	4606      	mov	r6, r0
    5850:	4617      	mov	r7, r2
    5852:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    5854:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    5858:	3054      	adds	r0, #84	; 0x54
    585a:	4b0b      	ldr	r3, [pc, #44]	; (5888 <xQueueGenericCreate+0x50>)
    585c:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    585e:	4604      	mov	r4, r0
    5860:	b178      	cbz	r0, 5882 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    5862:	b11d      	cbz	r5, 586c <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    5864:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    5868:	6003      	str	r3, [r0, #0]
    586a:	e000      	b.n	586e <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    586c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    586e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    5870:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    5872:	2101      	movs	r1, #1
    5874:	4620      	mov	r0, r4
    5876:	4b05      	ldr	r3, [pc, #20]	; (588c <xQueueGenericCreate+0x54>)
    5878:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    587a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    587e:	2300      	movs	r3, #0
    5880:	64a3      	str	r3, [r4, #72]	; 0x48
}
    5882:	4620      	mov	r0, r4
    5884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5886:	bf00      	nop
    5888:	00005495 	.word	0x00005495
    588c:	000057a9 	.word	0x000057a9

00005890 <xQueueGenericSend>:
{
    5890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5894:	b085      	sub	sp, #20
    5896:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    5898:	b198      	cbz	r0, 58c2 <xQueueGenericSend+0x32>
    589a:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    589c:	b1d1      	cbz	r1, 58d4 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    589e:	2b02      	cmp	r3, #2
    58a0:	d024      	beq.n	58ec <xQueueGenericSend+0x5c>
    58a2:	461e      	mov	r6, r3
    58a4:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    58a6:	4b64      	ldr	r3, [pc, #400]	; (5a38 <xQueueGenericSend+0x1a8>)
    58a8:	4798      	blx	r3
    58aa:	bb58      	cbnz	r0, 5904 <xQueueGenericSend+0x74>
    58ac:	9b01      	ldr	r3, [sp, #4]
    58ae:	b38b      	cbz	r3, 5914 <xQueueGenericSend+0x84>
    58b0:	f04f 0380 	mov.w	r3, #128	; 0x80
    58b4:	f383 8811 	msr	BASEPRI, r3
    58b8:	f3bf 8f6f 	isb	sy
    58bc:	f3bf 8f4f 	dsb	sy
    58c0:	e7fe      	b.n	58c0 <xQueueGenericSend+0x30>
    58c2:	f04f 0380 	mov.w	r3, #128	; 0x80
    58c6:	f383 8811 	msr	BASEPRI, r3
    58ca:	f3bf 8f6f 	isb	sy
    58ce:	f3bf 8f4f 	dsb	sy
    58d2:	e7fe      	b.n	58d2 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    58d4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    58d6:	2a00      	cmp	r2, #0
    58d8:	d0e1      	beq.n	589e <xQueueGenericSend+0xe>
    58da:	f04f 0380 	mov.w	r3, #128	; 0x80
    58de:	f383 8811 	msr	BASEPRI, r3
    58e2:	f3bf 8f6f 	isb	sy
    58e6:	f3bf 8f4f 	dsb	sy
    58ea:	e7fe      	b.n	58ea <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    58ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    58ee:	2a01      	cmp	r2, #1
    58f0:	d0d7      	beq.n	58a2 <xQueueGenericSend+0x12>
    58f2:	f04f 0380 	mov.w	r3, #128	; 0x80
    58f6:	f383 8811 	msr	BASEPRI, r3
    58fa:	f3bf 8f6f 	isb	sy
    58fe:	f3bf 8f4f 	dsb	sy
    5902:	e7fe      	b.n	5902 <xQueueGenericSend+0x72>
    5904:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    5906:	f8df 815c 	ldr.w	r8, [pc, #348]	; 5a64 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    590a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 5a68 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    590e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 5a44 <xQueueGenericSend+0x1b4>
    5912:	e041      	b.n	5998 <xQueueGenericSend+0x108>
    5914:	2500      	movs	r5, #0
    5916:	e7f6      	b.n	5906 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    5918:	4632      	mov	r2, r6
    591a:	4639      	mov	r1, r7
    591c:	4620      	mov	r0, r4
    591e:	4b47      	ldr	r3, [pc, #284]	; (5a3c <xQueueGenericSend+0x1ac>)
    5920:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    5922:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5924:	b193      	cbz	r3, 594c <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    5926:	4631      	mov	r1, r6
    5928:	4620      	mov	r0, r4
    592a:	4b45      	ldr	r3, [pc, #276]	; (5a40 <xQueueGenericSend+0x1b0>)
    592c:	4798      	blx	r3
    592e:	b138      	cbz	r0, 5940 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    5930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5934:	4b43      	ldr	r3, [pc, #268]	; (5a44 <xQueueGenericSend+0x1b4>)
    5936:	601a      	str	r2, [r3, #0]
    5938:	f3bf 8f4f 	dsb	sy
    593c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    5940:	4b41      	ldr	r3, [pc, #260]	; (5a48 <xQueueGenericSend+0x1b8>)
    5942:	4798      	blx	r3
				return pdPASS;
    5944:	2001      	movs	r0, #1
}
    5946:	b005      	add	sp, #20
    5948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    594c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    594e:	b173      	cbz	r3, 596e <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    5950:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5954:	4b3d      	ldr	r3, [pc, #244]	; (5a4c <xQueueGenericSend+0x1bc>)
    5956:	4798      	blx	r3
    5958:	2800      	cmp	r0, #0
    595a:	d0f1      	beq.n	5940 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    595c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5960:	4b38      	ldr	r3, [pc, #224]	; (5a44 <xQueueGenericSend+0x1b4>)
    5962:	601a      	str	r2, [r3, #0]
    5964:	f3bf 8f4f 	dsb	sy
    5968:	f3bf 8f6f 	isb	sy
    596c:	e7e8      	b.n	5940 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    596e:	2800      	cmp	r0, #0
    5970:	d0e6      	beq.n	5940 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    5972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5976:	4b33      	ldr	r3, [pc, #204]	; (5a44 <xQueueGenericSend+0x1b4>)
    5978:	601a      	str	r2, [r3, #0]
    597a:	f3bf 8f4f 	dsb	sy
    597e:	f3bf 8f6f 	isb	sy
    5982:	e7dd      	b.n	5940 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    5984:	4b30      	ldr	r3, [pc, #192]	; (5a48 <xQueueGenericSend+0x1b8>)
    5986:	4798      	blx	r3
					return errQUEUE_FULL;
    5988:	2000      	movs	r0, #0
    598a:	e7dc      	b.n	5946 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    598c:	4620      	mov	r0, r4
    598e:	4b30      	ldr	r3, [pc, #192]	; (5a50 <xQueueGenericSend+0x1c0>)
    5990:	4798      	blx	r3
				(void)xTaskResumeAll();
    5992:	4b30      	ldr	r3, [pc, #192]	; (5a54 <xQueueGenericSend+0x1c4>)
    5994:	4798      	blx	r3
    5996:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    5998:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    599a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    599c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    599e:	429a      	cmp	r2, r3
    59a0:	d3ba      	bcc.n	5918 <xQueueGenericSend+0x88>
    59a2:	2e02      	cmp	r6, #2
    59a4:	d0b8      	beq.n	5918 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    59a6:	9b01      	ldr	r3, [sp, #4]
    59a8:	2b00      	cmp	r3, #0
    59aa:	d0eb      	beq.n	5984 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    59ac:	b90d      	cbnz	r5, 59b2 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    59ae:	a802      	add	r0, sp, #8
    59b0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    59b2:	4b25      	ldr	r3, [pc, #148]	; (5a48 <xQueueGenericSend+0x1b8>)
    59b4:	4798      	blx	r3
		vTaskSuspendAll();
    59b6:	4b28      	ldr	r3, [pc, #160]	; (5a58 <xQueueGenericSend+0x1c8>)
    59b8:	4798      	blx	r3
		prvLockQueue(pxQueue);
    59ba:	47c0      	blx	r8
    59bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    59c0:	b25b      	sxtb	r3, r3
    59c2:	f1b3 3fff 	cmp.w	r3, #4294967295
    59c6:	bf04      	itt	eq
    59c8:	2300      	moveq	r3, #0
    59ca:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    59ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    59d2:	b25b      	sxtb	r3, r3
    59d4:	f1b3 3fff 	cmp.w	r3, #4294967295
    59d8:	bf04      	itt	eq
    59da:	2300      	moveq	r3, #0
    59dc:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    59e0:	4b19      	ldr	r3, [pc, #100]	; (5a48 <xQueueGenericSend+0x1b8>)
    59e2:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    59e4:	a901      	add	r1, sp, #4
    59e6:	a802      	add	r0, sp, #8
    59e8:	4b1c      	ldr	r3, [pc, #112]	; (5a5c <xQueueGenericSend+0x1cc>)
    59ea:	4798      	blx	r3
    59ec:	b9e0      	cbnz	r0, 5a28 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    59ee:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    59f0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    59f4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    59f6:	4b14      	ldr	r3, [pc, #80]	; (5a48 <xQueueGenericSend+0x1b8>)
    59f8:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    59fa:	45ab      	cmp	fp, r5
    59fc:	d1c6      	bne.n	598c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    59fe:	9901      	ldr	r1, [sp, #4]
    5a00:	f104 0010 	add.w	r0, r4, #16
    5a04:	4b16      	ldr	r3, [pc, #88]	; (5a60 <xQueueGenericSend+0x1d0>)
    5a06:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5a08:	4620      	mov	r0, r4
    5a0a:	4b11      	ldr	r3, [pc, #68]	; (5a50 <xQueueGenericSend+0x1c0>)
    5a0c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    5a0e:	4b11      	ldr	r3, [pc, #68]	; (5a54 <xQueueGenericSend+0x1c4>)
    5a10:	4798      	blx	r3
    5a12:	2800      	cmp	r0, #0
    5a14:	d1bf      	bne.n	5996 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    5a16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5a1a:	f8c9 3000 	str.w	r3, [r9]
    5a1e:	f3bf 8f4f 	dsb	sy
    5a22:	f3bf 8f6f 	isb	sy
    5a26:	e7b6      	b.n	5996 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    5a28:	4620      	mov	r0, r4
    5a2a:	4b09      	ldr	r3, [pc, #36]	; (5a50 <xQueueGenericSend+0x1c0>)
    5a2c:	4798      	blx	r3
			(void)xTaskResumeAll();
    5a2e:	4b09      	ldr	r3, [pc, #36]	; (5a54 <xQueueGenericSend+0x1c4>)
    5a30:	4798      	blx	r3
			return errQUEUE_FULL;
    5a32:	2000      	movs	r0, #0
    5a34:	e787      	b.n	5946 <xQueueGenericSend+0xb6>
    5a36:	bf00      	nop
    5a38:	000067f5 	.word	0x000067f5
    5a3c:	000055d5 	.word	0x000055d5
    5a40:	00005655 	.word	0x00005655
    5a44:	e000ed04 	.word	0xe000ed04
    5a48:	00005229 	.word	0x00005229
    5a4c:	000066b5 	.word	0x000066b5
    5a50:	00005701 	.word	0x00005701
    5a54:	00006415 	.word	0x00006415
    5a58:	000062cd 	.word	0x000062cd
    5a5c:	00006759 	.word	0x00006759
    5a60:	00006635 	.word	0x00006635
    5a64:	000051e5 	.word	0x000051e5
    5a68:	00006745 	.word	0x00006745

00005a6c <xQueueCreateMutex>:
{
    5a6c:	b538      	push	{r3, r4, r5, lr}
	pxNewQueue = (Queue_t *)xQueueGenericCreate(uxMutexLength, uxMutexSize, ucQueueType);
    5a6e:	4602      	mov	r2, r0
    5a70:	2100      	movs	r1, #0
    5a72:	2001      	movs	r0, #1
    5a74:	4b06      	ldr	r3, [pc, #24]	; (5a90 <xQueueCreateMutex+0x24>)
    5a76:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    5a78:	4604      	mov	r4, r0
    5a7a:	b138      	cbz	r0, 5a8c <xQueueCreateMutex+0x20>
		pxNewQueue->pxMutexHolder = NULL;
    5a7c:	2100      	movs	r1, #0
    5a7e:	6041      	str	r1, [r0, #4]
		pxNewQueue->uxQueueType   = queueQUEUE_IS_MUTEX;
    5a80:	6001      	str	r1, [r0, #0]
		pxNewQueue->u.uxRecursiveCallCount = 0;
    5a82:	60c1      	str	r1, [r0, #12]
		(void)xQueueGenericSend(pxNewQueue, NULL, (TickType_t)0U, queueSEND_TO_BACK);
    5a84:	460b      	mov	r3, r1
    5a86:	460a      	mov	r2, r1
    5a88:	4d02      	ldr	r5, [pc, #8]	; (5a94 <xQueueCreateMutex+0x28>)
    5a8a:	47a8      	blx	r5
}
    5a8c:	4620      	mov	r0, r4
    5a8e:	bd38      	pop	{r3, r4, r5, pc}
    5a90:	00005839 	.word	0x00005839
    5a94:	00005891 	.word	0x00005891

00005a98 <xQueueGenericSendFromISR>:
{
    5a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    5a9c:	2800      	cmp	r0, #0
    5a9e:	d036      	beq.n	5b0e <xQueueGenericSendFromISR+0x76>
    5aa0:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    5aa2:	2900      	cmp	r1, #0
    5aa4:	d03c      	beq.n	5b20 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    5aa6:	2b02      	cmp	r3, #2
    5aa8:	d046      	beq.n	5b38 <xQueueGenericSendFromISR+0xa0>
    5aaa:	461f      	mov	r7, r3
    5aac:	4690      	mov	r8, r2
    5aae:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    5ab0:	4b37      	ldr	r3, [pc, #220]	; (5b90 <xQueueGenericSendFromISR+0xf8>)
    5ab2:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    5ab4:	f3ef 8611 	mrs	r6, BASEPRI
    5ab8:	f04f 0380 	mov.w	r3, #128	; 0x80
    5abc:	f383 8811 	msr	BASEPRI, r3
    5ac0:	f3bf 8f6f 	isb	sy
    5ac4:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    5ac8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    5aca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5acc:	429a      	cmp	r2, r3
    5ace:	d301      	bcc.n	5ad4 <xQueueGenericSendFromISR+0x3c>
    5ad0:	2f02      	cmp	r7, #2
    5ad2:	d151      	bne.n	5b78 <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    5ad4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    5ad8:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    5ada:	463a      	mov	r2, r7
    5adc:	4649      	mov	r1, r9
    5ade:	4620      	mov	r0, r4
    5ae0:	4b2c      	ldr	r3, [pc, #176]	; (5b94 <xQueueGenericSendFromISR+0xfc>)
    5ae2:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    5ae4:	f1b5 3fff 	cmp.w	r5, #4294967295
    5ae8:	d140      	bne.n	5b6c <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    5aea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    5aec:	b383      	cbz	r3, 5b50 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    5aee:	4639      	mov	r1, r7
    5af0:	4620      	mov	r0, r4
    5af2:	4b29      	ldr	r3, [pc, #164]	; (5b98 <xQueueGenericSendFromISR+0x100>)
    5af4:	4798      	blx	r3
    5af6:	2800      	cmp	r0, #0
    5af8:	d040      	beq.n	5b7c <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    5afa:	f1b8 0f00 	cmp.w	r8, #0
    5afe:	d03f      	beq.n	5b80 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    5b00:	2001      	movs	r0, #1
    5b02:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    5b06:	f386 8811 	msr	BASEPRI, r6
}
    5b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    5b0e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5b12:	f383 8811 	msr	BASEPRI, r3
    5b16:	f3bf 8f6f 	isb	sy
    5b1a:	f3bf 8f4f 	dsb	sy
    5b1e:	e7fe      	b.n	5b1e <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    5b20:	6c00      	ldr	r0, [r0, #64]	; 0x40
    5b22:	2800      	cmp	r0, #0
    5b24:	d0bf      	beq.n	5aa6 <xQueueGenericSendFromISR+0xe>
    5b26:	f04f 0380 	mov.w	r3, #128	; 0x80
    5b2a:	f383 8811 	msr	BASEPRI, r3
    5b2e:	f3bf 8f6f 	isb	sy
    5b32:	f3bf 8f4f 	dsb	sy
    5b36:	e7fe      	b.n	5b36 <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    5b38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    5b3a:	2801      	cmp	r0, #1
    5b3c:	d0b5      	beq.n	5aaa <xQueueGenericSendFromISR+0x12>
    5b3e:	f04f 0380 	mov.w	r3, #128	; 0x80
    5b42:	f383 8811 	msr	BASEPRI, r3
    5b46:	f3bf 8f6f 	isb	sy
    5b4a:	f3bf 8f4f 	dsb	sy
    5b4e:	e7fe      	b.n	5b4e <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    5b50:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5b52:	b1bb      	cbz	r3, 5b84 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    5b54:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5b58:	4b10      	ldr	r3, [pc, #64]	; (5b9c <xQueueGenericSendFromISR+0x104>)
    5b5a:	4798      	blx	r3
    5b5c:	b1a0      	cbz	r0, 5b88 <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    5b5e:	f1b8 0f00 	cmp.w	r8, #0
    5b62:	d013      	beq.n	5b8c <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    5b64:	2001      	movs	r0, #1
    5b66:	f8c8 0000 	str.w	r0, [r8]
    5b6a:	e7cc      	b.n	5b06 <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    5b6c:	1c6b      	adds	r3, r5, #1
    5b6e:	b25b      	sxtb	r3, r3
    5b70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    5b74:	2001      	movs	r0, #1
    5b76:	e7c6      	b.n	5b06 <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    5b78:	2000      	movs	r0, #0
    5b7a:	e7c4      	b.n	5b06 <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    5b7c:	2001      	movs	r0, #1
    5b7e:	e7c2      	b.n	5b06 <xQueueGenericSendFromISR+0x6e>
    5b80:	2001      	movs	r0, #1
    5b82:	e7c0      	b.n	5b06 <xQueueGenericSendFromISR+0x6e>
    5b84:	2001      	movs	r0, #1
    5b86:	e7be      	b.n	5b06 <xQueueGenericSendFromISR+0x6e>
    5b88:	2001      	movs	r0, #1
    5b8a:	e7bc      	b.n	5b06 <xQueueGenericSendFromISR+0x6e>
    5b8c:	2001      	movs	r0, #1
    5b8e:	e7ba      	b.n	5b06 <xQueueGenericSendFromISR+0x6e>
    5b90:	0000543d 	.word	0x0000543d
    5b94:	000055d5 	.word	0x000055d5
    5b98:	00005655 	.word	0x00005655
    5b9c:	000066b5 	.word	0x000066b5

00005ba0 <xQueueReceive>:
{
    5ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ba4:	b084      	sub	sp, #16
    5ba6:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    5ba8:	b180      	cbz	r0, 5bcc <xQueueReceive+0x2c>
    5baa:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    5bac:	b1b9      	cbz	r1, 5bde <xQueueReceive+0x3e>
    5bae:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    5bb0:	4b50      	ldr	r3, [pc, #320]	; (5cf4 <xQueueReceive+0x154>)
    5bb2:	4798      	blx	r3
    5bb4:	b9f8      	cbnz	r0, 5bf6 <xQueueReceive+0x56>
    5bb6:	9b01      	ldr	r3, [sp, #4]
    5bb8:	b32b      	cbz	r3, 5c06 <xQueueReceive+0x66>
    5bba:	f04f 0380 	mov.w	r3, #128	; 0x80
    5bbe:	f383 8811 	msr	BASEPRI, r3
    5bc2:	f3bf 8f6f 	isb	sy
    5bc6:	f3bf 8f4f 	dsb	sy
    5bca:	e7fe      	b.n	5bca <xQueueReceive+0x2a>
    5bcc:	f04f 0380 	mov.w	r3, #128	; 0x80
    5bd0:	f383 8811 	msr	BASEPRI, r3
    5bd4:	f3bf 8f6f 	isb	sy
    5bd8:	f3bf 8f4f 	dsb	sy
    5bdc:	e7fe      	b.n	5bdc <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    5bde:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5be0:	2b00      	cmp	r3, #0
    5be2:	d0e4      	beq.n	5bae <xQueueReceive+0xe>
    5be4:	f04f 0380 	mov.w	r3, #128	; 0x80
    5be8:	f383 8811 	msr	BASEPRI, r3
    5bec:	f3bf 8f6f 	isb	sy
    5bf0:	f3bf 8f4f 	dsb	sy
    5bf4:	e7fe      	b.n	5bf4 <xQueueReceive+0x54>
    5bf6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    5bf8:	f8df 8124 	ldr.w	r8, [pc, #292]	; 5d20 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5bfc:	f8df a124 	ldr.w	sl, [pc, #292]	; 5d24 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    5c00:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 5d00 <xQueueReceive+0x160>
    5c04:	e029      	b.n	5c5a <xQueueReceive+0xba>
    5c06:	2700      	movs	r7, #0
    5c08:	e7f6      	b.n	5bf8 <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    5c0a:	4631      	mov	r1, r6
    5c0c:	4620      	mov	r0, r4
    5c0e:	4b3a      	ldr	r3, [pc, #232]	; (5cf8 <xQueueReceive+0x158>)
    5c10:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    5c12:	3d01      	subs	r5, #1
    5c14:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5c16:	6923      	ldr	r3, [r4, #16]
    5c18:	b163      	cbz	r3, 5c34 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5c1a:	f104 0010 	add.w	r0, r4, #16
    5c1e:	4b37      	ldr	r3, [pc, #220]	; (5cfc <xQueueReceive+0x15c>)
    5c20:	4798      	blx	r3
    5c22:	b138      	cbz	r0, 5c34 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    5c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c28:	4b35      	ldr	r3, [pc, #212]	; (5d00 <xQueueReceive+0x160>)
    5c2a:	601a      	str	r2, [r3, #0]
    5c2c:	f3bf 8f4f 	dsb	sy
    5c30:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    5c34:	4b33      	ldr	r3, [pc, #204]	; (5d04 <xQueueReceive+0x164>)
    5c36:	4798      	blx	r3
				return pdPASS;
    5c38:	2001      	movs	r0, #1
}
    5c3a:	b004      	add	sp, #16
    5c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    5c40:	4b30      	ldr	r3, [pc, #192]	; (5d04 <xQueueReceive+0x164>)
    5c42:	4798      	blx	r3
					return errQUEUE_EMPTY;
    5c44:	2000      	movs	r0, #0
    5c46:	e7f8      	b.n	5c3a <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5c48:	a802      	add	r0, sp, #8
    5c4a:	47d0      	blx	sl
    5c4c:	e00e      	b.n	5c6c <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    5c4e:	4620      	mov	r0, r4
    5c50:	4b2d      	ldr	r3, [pc, #180]	; (5d08 <xQueueReceive+0x168>)
    5c52:	4798      	blx	r3
				(void)xTaskResumeAll();
    5c54:	4b2d      	ldr	r3, [pc, #180]	; (5d0c <xQueueReceive+0x16c>)
    5c56:	4798      	blx	r3
    5c58:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    5c5a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    5c5c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    5c5e:	2d00      	cmp	r5, #0
    5c60:	d1d3      	bne.n	5c0a <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    5c62:	9b01      	ldr	r3, [sp, #4]
    5c64:	2b00      	cmp	r3, #0
    5c66:	d0eb      	beq.n	5c40 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    5c68:	2f00      	cmp	r7, #0
    5c6a:	d0ed      	beq.n	5c48 <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    5c6c:	4b25      	ldr	r3, [pc, #148]	; (5d04 <xQueueReceive+0x164>)
    5c6e:	4798      	blx	r3
		vTaskSuspendAll();
    5c70:	4b27      	ldr	r3, [pc, #156]	; (5d10 <xQueueReceive+0x170>)
    5c72:	4798      	blx	r3
		prvLockQueue(pxQueue);
    5c74:	47c0      	blx	r8
    5c76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5c7a:	b25b      	sxtb	r3, r3
    5c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5c80:	bf04      	itt	eq
    5c82:	2300      	moveq	r3, #0
    5c84:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5c88:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5c8c:	b25b      	sxtb	r3, r3
    5c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5c92:	bf04      	itt	eq
    5c94:	2300      	moveq	r3, #0
    5c96:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5c9a:	4b1a      	ldr	r3, [pc, #104]	; (5d04 <xQueueReceive+0x164>)
    5c9c:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    5c9e:	a901      	add	r1, sp, #4
    5ca0:	a802      	add	r0, sp, #8
    5ca2:	4b1c      	ldr	r3, [pc, #112]	; (5d14 <xQueueReceive+0x174>)
    5ca4:	4798      	blx	r3
    5ca6:	b9c8      	cbnz	r0, 5cdc <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5ca8:	4620      	mov	r0, r4
    5caa:	4b1b      	ldr	r3, [pc, #108]	; (5d18 <xQueueReceive+0x178>)
    5cac:	4798      	blx	r3
    5cae:	2800      	cmp	r0, #0
    5cb0:	d0cd      	beq.n	5c4e <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    5cb2:	9901      	ldr	r1, [sp, #4]
    5cb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5cb8:	4b18      	ldr	r3, [pc, #96]	; (5d1c <xQueueReceive+0x17c>)
    5cba:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5cbc:	4620      	mov	r0, r4
    5cbe:	4b12      	ldr	r3, [pc, #72]	; (5d08 <xQueueReceive+0x168>)
    5cc0:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    5cc2:	4b12      	ldr	r3, [pc, #72]	; (5d0c <xQueueReceive+0x16c>)
    5cc4:	4798      	blx	r3
    5cc6:	2800      	cmp	r0, #0
    5cc8:	d1c6      	bne.n	5c58 <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    5cca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5cce:	f8c9 3000 	str.w	r3, [r9]
    5cd2:	f3bf 8f4f 	dsb	sy
    5cd6:	f3bf 8f6f 	isb	sy
    5cda:	e7bd      	b.n	5c58 <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    5cdc:	4620      	mov	r0, r4
    5cde:	4b0a      	ldr	r3, [pc, #40]	; (5d08 <xQueueReceive+0x168>)
    5ce0:	4798      	blx	r3
			(void)xTaskResumeAll();
    5ce2:	4b0a      	ldr	r3, [pc, #40]	; (5d0c <xQueueReceive+0x16c>)
    5ce4:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5ce6:	4620      	mov	r0, r4
    5ce8:	4b0b      	ldr	r3, [pc, #44]	; (5d18 <xQueueReceive+0x178>)
    5cea:	4798      	blx	r3
    5cec:	2800      	cmp	r0, #0
    5cee:	d0b3      	beq.n	5c58 <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    5cf0:	2000      	movs	r0, #0
    5cf2:	e7a2      	b.n	5c3a <xQueueReceive+0x9a>
    5cf4:	000067f5 	.word	0x000067f5
    5cf8:	000056d9 	.word	0x000056d9
    5cfc:	000066b5 	.word	0x000066b5
    5d00:	e000ed04 	.word	0xe000ed04
    5d04:	00005229 	.word	0x00005229
    5d08:	00005701 	.word	0x00005701
    5d0c:	00006415 	.word	0x00006415
    5d10:	000062cd 	.word	0x000062cd
    5d14:	00006759 	.word	0x00006759
    5d18:	000055b5 	.word	0x000055b5
    5d1c:	00006635 	.word	0x00006635
    5d20:	000051e5 	.word	0x000051e5
    5d24:	00006745 	.word	0x00006745

00005d28 <xQueueSemaphoreTake>:
{
    5d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5d2c:	b085      	sub	sp, #20
    5d2e:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    5d30:	b158      	cbz	r0, 5d4a <xQueueSemaphoreTake+0x22>
    5d32:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    5d34:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5d36:	b18b      	cbz	r3, 5d5c <xQueueSemaphoreTake+0x34>
    5d38:	f04f 0380 	mov.w	r3, #128	; 0x80
    5d3c:	f383 8811 	msr	BASEPRI, r3
    5d40:	f3bf 8f6f 	isb	sy
    5d44:	f3bf 8f4f 	dsb	sy
    5d48:	e7fe      	b.n	5d48 <xQueueSemaphoreTake+0x20>
    5d4a:	f04f 0380 	mov.w	r3, #128	; 0x80
    5d4e:	f383 8811 	msr	BASEPRI, r3
    5d52:	f3bf 8f6f 	isb	sy
    5d56:	f3bf 8f4f 	dsb	sy
    5d5a:	e7fe      	b.n	5d5a <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    5d5c:	4b5b      	ldr	r3, [pc, #364]	; (5ecc <xQueueSemaphoreTake+0x1a4>)
    5d5e:	4798      	blx	r3
    5d60:	b950      	cbnz	r0, 5d78 <xQueueSemaphoreTake+0x50>
    5d62:	9b01      	ldr	r3, [sp, #4]
    5d64:	b183      	cbz	r3, 5d88 <xQueueSemaphoreTake+0x60>
    5d66:	f04f 0380 	mov.w	r3, #128	; 0x80
    5d6a:	f383 8811 	msr	BASEPRI, r3
    5d6e:	f3bf 8f6f 	isb	sy
    5d72:	f3bf 8f4f 	dsb	sy
    5d76:	e7fe      	b.n	5d76 <xQueueSemaphoreTake+0x4e>
    5d78:	2500      	movs	r5, #0
    5d7a:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    5d7c:	4e54      	ldr	r6, [pc, #336]	; (5ed0 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    5d7e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 5f04 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    5d82:	f8df 8158 	ldr.w	r8, [pc, #344]	; 5edc <xQueueSemaphoreTake+0x1b4>
    5d86:	e048      	b.n	5e1a <xQueueSemaphoreTake+0xf2>
    5d88:	2500      	movs	r5, #0
    5d8a:	462f      	mov	r7, r5
    5d8c:	e7f6      	b.n	5d7c <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    5d8e:	3b01      	subs	r3, #1
    5d90:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    5d92:	6823      	ldr	r3, [r4, #0]
    5d94:	b913      	cbnz	r3, 5d9c <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    5d96:	4b4f      	ldr	r3, [pc, #316]	; (5ed4 <xQueueSemaphoreTake+0x1ac>)
    5d98:	4798      	blx	r3
    5d9a:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    5d9c:	6923      	ldr	r3, [r4, #16]
    5d9e:	b163      	cbz	r3, 5dba <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    5da0:	f104 0010 	add.w	r0, r4, #16
    5da4:	4b4c      	ldr	r3, [pc, #304]	; (5ed8 <xQueueSemaphoreTake+0x1b0>)
    5da6:	4798      	blx	r3
    5da8:	b138      	cbz	r0, 5dba <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    5daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5dae:	4b4b      	ldr	r3, [pc, #300]	; (5edc <xQueueSemaphoreTake+0x1b4>)
    5db0:	601a      	str	r2, [r3, #0]
    5db2:	f3bf 8f4f 	dsb	sy
    5db6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    5dba:	4b49      	ldr	r3, [pc, #292]	; (5ee0 <xQueueSemaphoreTake+0x1b8>)
    5dbc:	4798      	blx	r3
				return pdPASS;
    5dbe:	2501      	movs	r5, #1
}
    5dc0:	4628      	mov	r0, r5
    5dc2:	b005      	add	sp, #20
    5dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    5dc8:	b145      	cbz	r5, 5ddc <xQueueSemaphoreTake+0xb4>
    5dca:	f04f 0380 	mov.w	r3, #128	; 0x80
    5dce:	f383 8811 	msr	BASEPRI, r3
    5dd2:	f3bf 8f6f 	isb	sy
    5dd6:	f3bf 8f4f 	dsb	sy
    5dda:	e7fe      	b.n	5dda <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    5ddc:	4b40      	ldr	r3, [pc, #256]	; (5ee0 <xQueueSemaphoreTake+0x1b8>)
    5dde:	4798      	blx	r3
					return errQUEUE_EMPTY;
    5de0:	e7ee      	b.n	5dc0 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    5de2:	a802      	add	r0, sp, #8
    5de4:	47c8      	blx	r9
    5de6:	e021      	b.n	5e2c <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    5de8:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    5dea:	6860      	ldr	r0, [r4, #4]
    5dec:	4b3d      	ldr	r3, [pc, #244]	; (5ee4 <xQueueSemaphoreTake+0x1bc>)
    5dee:	4798      	blx	r3
    5df0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    5df2:	4b3b      	ldr	r3, [pc, #236]	; (5ee0 <xQueueSemaphoreTake+0x1b8>)
    5df4:	4798      	blx	r3
    5df6:	e040      	b.n	5e7a <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    5df8:	4620      	mov	r0, r4
    5dfa:	4b3b      	ldr	r3, [pc, #236]	; (5ee8 <xQueueSemaphoreTake+0x1c0>)
    5dfc:	4798      	blx	r3
				(void)xTaskResumeAll();
    5dfe:	4b3b      	ldr	r3, [pc, #236]	; (5eec <xQueueSemaphoreTake+0x1c4>)
    5e00:	4798      	blx	r3
    5e02:	e009      	b.n	5e18 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    5e04:	4620      	mov	r0, r4
    5e06:	4b38      	ldr	r3, [pc, #224]	; (5ee8 <xQueueSemaphoreTake+0x1c0>)
    5e08:	4798      	blx	r3
			(void)xTaskResumeAll();
    5e0a:	4b38      	ldr	r3, [pc, #224]	; (5eec <xQueueSemaphoreTake+0x1c4>)
    5e0c:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5e0e:	4620      	mov	r0, r4
    5e10:	4b37      	ldr	r3, [pc, #220]	; (5ef0 <xQueueSemaphoreTake+0x1c8>)
    5e12:	4798      	blx	r3
    5e14:	2800      	cmp	r0, #0
    5e16:	d145      	bne.n	5ea4 <xQueueSemaphoreTake+0x17c>
    5e18:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    5e1a:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    5e1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d1b5      	bne.n	5d8e <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    5e22:	9b01      	ldr	r3, [sp, #4]
    5e24:	2b00      	cmp	r3, #0
    5e26:	d0cf      	beq.n	5dc8 <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    5e28:	2f00      	cmp	r7, #0
    5e2a:	d0da      	beq.n	5de2 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    5e2c:	4b2c      	ldr	r3, [pc, #176]	; (5ee0 <xQueueSemaphoreTake+0x1b8>)
    5e2e:	4798      	blx	r3
		vTaskSuspendAll();
    5e30:	4b30      	ldr	r3, [pc, #192]	; (5ef4 <xQueueSemaphoreTake+0x1cc>)
    5e32:	4798      	blx	r3
		prvLockQueue(pxQueue);
    5e34:	47b0      	blx	r6
    5e36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5e3a:	b25b      	sxtb	r3, r3
    5e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5e40:	bf04      	itt	eq
    5e42:	2300      	moveq	r3, #0
    5e44:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5e48:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5e4c:	b25b      	sxtb	r3, r3
    5e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5e52:	bf04      	itt	eq
    5e54:	2300      	moveq	r3, #0
    5e56:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5e5a:	4b21      	ldr	r3, [pc, #132]	; (5ee0 <xQueueSemaphoreTake+0x1b8>)
    5e5c:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    5e5e:	a901      	add	r1, sp, #4
    5e60:	a802      	add	r0, sp, #8
    5e62:	4b25      	ldr	r3, [pc, #148]	; (5ef8 <xQueueSemaphoreTake+0x1d0>)
    5e64:	4798      	blx	r3
    5e66:	2800      	cmp	r0, #0
    5e68:	d1cc      	bne.n	5e04 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    5e6a:	4620      	mov	r0, r4
    5e6c:	4b20      	ldr	r3, [pc, #128]	; (5ef0 <xQueueSemaphoreTake+0x1c8>)
    5e6e:	4798      	blx	r3
    5e70:	2800      	cmp	r0, #0
    5e72:	d0c1      	beq.n	5df8 <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    5e74:	6823      	ldr	r3, [r4, #0]
    5e76:	2b00      	cmp	r3, #0
    5e78:	d0b6      	beq.n	5de8 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    5e7a:	9901      	ldr	r1, [sp, #4]
    5e7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5e80:	4b1e      	ldr	r3, [pc, #120]	; (5efc <xQueueSemaphoreTake+0x1d4>)
    5e82:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    5e84:	4620      	mov	r0, r4
    5e86:	4b18      	ldr	r3, [pc, #96]	; (5ee8 <xQueueSemaphoreTake+0x1c0>)
    5e88:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    5e8a:	4b18      	ldr	r3, [pc, #96]	; (5eec <xQueueSemaphoreTake+0x1c4>)
    5e8c:	4798      	blx	r3
    5e8e:	2800      	cmp	r0, #0
    5e90:	d1c2      	bne.n	5e18 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    5e92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5e96:	f8c8 3000 	str.w	r3, [r8]
    5e9a:	f3bf 8f4f 	dsb	sy
    5e9e:	f3bf 8f6f 	isb	sy
    5ea2:	e7b9      	b.n	5e18 <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    5ea4:	2d00      	cmp	r5, #0
    5ea6:	d08b      	beq.n	5dc0 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    5ea8:	4b09      	ldr	r3, [pc, #36]	; (5ed0 <xQueueSemaphoreTake+0x1a8>)
    5eaa:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    5eac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5eae:	b153      	cbz	r3, 5ec6 <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    5eb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5eb2:	6819      	ldr	r1, [r3, #0]
    5eb4:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    5eb8:	6860      	ldr	r0, [r4, #4]
    5eba:	4b11      	ldr	r3, [pc, #68]	; (5f00 <xQueueSemaphoreTake+0x1d8>)
    5ebc:	4798      	blx	r3
						taskEXIT_CRITICAL();
    5ebe:	4b08      	ldr	r3, [pc, #32]	; (5ee0 <xQueueSemaphoreTake+0x1b8>)
    5ec0:	4798      	blx	r3
				return errQUEUE_EMPTY;
    5ec2:	2500      	movs	r5, #0
    5ec4:	e77c      	b.n	5dc0 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    5ec6:	2100      	movs	r1, #0
    5ec8:	e7f6      	b.n	5eb8 <xQueueSemaphoreTake+0x190>
    5eca:	bf00      	nop
    5ecc:	000067f5 	.word	0x000067f5
    5ed0:	000051e5 	.word	0x000051e5
    5ed4:	00006a01 	.word	0x00006a01
    5ed8:	000066b5 	.word	0x000066b5
    5edc:	e000ed04 	.word	0xe000ed04
    5ee0:	00005229 	.word	0x00005229
    5ee4:	00006815 	.word	0x00006815
    5ee8:	00005701 	.word	0x00005701
    5eec:	00006415 	.word	0x00006415
    5ef0:	000055b5 	.word	0x000055b5
    5ef4:	000062cd 	.word	0x000062cd
    5ef8:	00006759 	.word	0x00006759
    5efc:	00006635 	.word	0x00006635
    5f00:	00006955 	.word	0x00006955
    5f04:	00006745 	.word	0x00006745

00005f08 <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    5f08:	b940      	cbnz	r0, 5f1c <uxQueueMessagesWaiting+0x14>
    5f0a:	f04f 0380 	mov.w	r3, #128	; 0x80
    5f0e:	f383 8811 	msr	BASEPRI, r3
    5f12:	f3bf 8f6f 	isb	sy
    5f16:	f3bf 8f4f 	dsb	sy
    5f1a:	e7fe      	b.n	5f1a <uxQueueMessagesWaiting+0x12>
{
    5f1c:	b510      	push	{r4, lr}
    5f1e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    5f20:	4b03      	ldr	r3, [pc, #12]	; (5f30 <uxQueueMessagesWaiting+0x28>)
    5f22:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    5f24:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    5f26:	4b03      	ldr	r3, [pc, #12]	; (5f34 <uxQueueMessagesWaiting+0x2c>)
    5f28:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    5f2a:	4620      	mov	r0, r4
    5f2c:	bd10      	pop	{r4, pc}
    5f2e:	bf00      	nop
    5f30:	000051e5 	.word	0x000051e5
    5f34:	00005229 	.word	0x00005229

00005f38 <vQueueWaitForMessageRestricted>:
{
    5f38:	b570      	push	{r4, r5, r6, lr}
    5f3a:	4604      	mov	r4, r0
    5f3c:	460d      	mov	r5, r1
    5f3e:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    5f40:	4b11      	ldr	r3, [pc, #68]	; (5f88 <vQueueWaitForMessageRestricted+0x50>)
    5f42:	4798      	blx	r3
    5f44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    5f48:	b25b      	sxtb	r3, r3
    5f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
    5f4e:	bf04      	itt	eq
    5f50:	2300      	moveq	r3, #0
    5f52:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    5f56:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    5f5a:	b25b      	sxtb	r3, r3
    5f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
    5f60:	bf04      	itt	eq
    5f62:	2300      	moveq	r3, #0
    5f64:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    5f68:	4b08      	ldr	r3, [pc, #32]	; (5f8c <vQueueWaitForMessageRestricted+0x54>)
    5f6a:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    5f6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5f6e:	b11b      	cbz	r3, 5f78 <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    5f70:	4620      	mov	r0, r4
    5f72:	4b07      	ldr	r3, [pc, #28]	; (5f90 <vQueueWaitForMessageRestricted+0x58>)
    5f74:	4798      	blx	r3
    5f76:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    5f78:	4632      	mov	r2, r6
    5f7a:	4629      	mov	r1, r5
    5f7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
    5f80:	4b04      	ldr	r3, [pc, #16]	; (5f94 <vQueueWaitForMessageRestricted+0x5c>)
    5f82:	4798      	blx	r3
    5f84:	e7f4      	b.n	5f70 <vQueueWaitForMessageRestricted+0x38>
    5f86:	bf00      	nop
    5f88:	000051e5 	.word	0x000051e5
    5f8c:	00005229 	.word	0x00005229
    5f90:	00005701 	.word	0x00005701
    5f94:	00006671 	.word	0x00006671

00005f98 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5f98:	4a06      	ldr	r2, [pc, #24]	; (5fb4 <prvIdleTask+0x1c>)
				taskYIELD();
    5f9a:	4807      	ldr	r0, [pc, #28]	; (5fb8 <prvIdleTask+0x20>)
    5f9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    5fa0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5fa2:	2b01      	cmp	r3, #1
    5fa4:	d9fc      	bls.n	5fa0 <prvIdleTask+0x8>
				taskYIELD();
    5fa6:	6001      	str	r1, [r0, #0]
    5fa8:	f3bf 8f4f 	dsb	sy
    5fac:	f3bf 8f6f 	isb	sy
    5fb0:	e7f6      	b.n	5fa0 <prvIdleTask+0x8>
    5fb2:	bf00      	nop
    5fb4:	2000334c 	.word	0x2000334c
    5fb8:	e000ed04 	.word	0xe000ed04

00005fbc <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    5fbc:	4b09      	ldr	r3, [pc, #36]	; (5fe4 <prvResetNextTaskUnblockTime+0x28>)
    5fbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    5fc2:	681b      	ldr	r3, [r3, #0]
    5fc4:	b143      	cbz	r3, 5fd8 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    5fc6:	4b07      	ldr	r3, [pc, #28]	; (5fe4 <prvResetNextTaskUnblockTime+0x28>)
    5fc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    5fcc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    5fce:	68d2      	ldr	r2, [r2, #12]
    5fd0:	6852      	ldr	r2, [r2, #4]
    5fd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5fd6:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    5fd8:	f04f 32ff 	mov.w	r2, #4294967295
    5fdc:	4b01      	ldr	r3, [pc, #4]	; (5fe4 <prvResetNextTaskUnblockTime+0x28>)
    5fde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    5fe2:	4770      	bx	lr
    5fe4:	2000334c 	.word	0x2000334c

00005fe8 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    5fe8:	b570      	push	{r4, r5, r6, lr}
    5fea:	4604      	mov	r4, r0
    5fec:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    5fee:	4b1a      	ldr	r3, [pc, #104]	; (6058 <prvAddCurrentTaskToDelayedList+0x70>)
    5ff0:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    5ff4:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    5ff8:	3004      	adds	r0, #4
    5ffa:	4b18      	ldr	r3, [pc, #96]	; (605c <prvAddCurrentTaskToDelayedList+0x74>)
    5ffc:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    5ffe:	f1b4 3fff 	cmp.w	r4, #4294967295
    6002:	d016      	beq.n	6032 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    6004:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    6006:	4b14      	ldr	r3, [pc, #80]	; (6058 <prvAddCurrentTaskToDelayedList+0x70>)
    6008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    600c:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    600e:	42a5      	cmp	r5, r4
    6010:	d818      	bhi.n	6044 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    6012:	4d11      	ldr	r5, [pc, #68]	; (6058 <prvAddCurrentTaskToDelayedList+0x70>)
    6014:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    6018:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    601c:	3104      	adds	r1, #4
    601e:	4b10      	ldr	r3, [pc, #64]	; (6060 <prvAddCurrentTaskToDelayedList+0x78>)
    6020:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    6022:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    6026:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    6028:	bf3c      	itt	cc
    602a:	462b      	movcc	r3, r5
    602c:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    6030:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    6032:	2e00      	cmp	r6, #0
    6034:	d0e6      	beq.n	6004 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    6036:	4808      	ldr	r0, [pc, #32]	; (6058 <prvAddCurrentTaskToDelayedList+0x70>)
    6038:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    603c:	3104      	adds	r1, #4
    603e:	4b09      	ldr	r3, [pc, #36]	; (6064 <prvAddCurrentTaskToDelayedList+0x7c>)
    6040:	4798      	blx	r3
    6042:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    6044:	4b04      	ldr	r3, [pc, #16]	; (6058 <prvAddCurrentTaskToDelayedList+0x70>)
    6046:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    604a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    604e:	3104      	adds	r1, #4
    6050:	4b03      	ldr	r3, [pc, #12]	; (6060 <prvAddCurrentTaskToDelayedList+0x78>)
    6052:	4798      	blx	r3
    6054:	bd70      	pop	{r4, r5, r6, pc}
    6056:	bf00      	nop
    6058:	2000334c 	.word	0x2000334c
    605c:	000050ed 	.word	0x000050ed
    6060:	000050b9 	.word	0x000050b9
    6064:	000050a1 	.word	0x000050a1

00006068 <xTaskCreate>:
{
    6068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    606c:	b083      	sub	sp, #12
    606e:	4683      	mov	fp, r0
    6070:	460d      	mov	r5, r1
    6072:	9301      	str	r3, [sp, #4]
    6074:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    6078:	0096      	lsls	r6, r2, #2
    607a:	4630      	mov	r0, r6
    607c:	4b66      	ldr	r3, [pc, #408]	; (6218 <xTaskCreate+0x1b0>)
    607e:	4798      	blx	r3
		if (pxStack != NULL) {
    6080:	2800      	cmp	r0, #0
    6082:	f000 8096 	beq.w	61b2 <xTaskCreate+0x14a>
    6086:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    6088:	2054      	movs	r0, #84	; 0x54
    608a:	4b63      	ldr	r3, [pc, #396]	; (6218 <xTaskCreate+0x1b0>)
    608c:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    608e:	4604      	mov	r4, r0
    6090:	2800      	cmp	r0, #0
    6092:	f000 808b 	beq.w	61ac <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    6096:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    6098:	4632      	mov	r2, r6
    609a:	21a5      	movs	r1, #165	; 0xa5
    609c:	4638      	mov	r0, r7
    609e:	4b5f      	ldr	r3, [pc, #380]	; (621c <xTaskCreate+0x1b4>)
    60a0:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    60a2:	3e04      	subs	r6, #4
    60a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    60a6:	441e      	add	r6, r3
		                      & (~(
    60a8:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    60ac:	782b      	ldrb	r3, [r5, #0]
    60ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    60b2:	782b      	ldrb	r3, [r5, #0]
    60b4:	b15b      	cbz	r3, 60ce <xTaskCreate+0x66>
    60b6:	462b      	mov	r3, r5
    60b8:	f104 0235 	add.w	r2, r4, #53	; 0x35
    60bc:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    60be:	7858      	ldrb	r0, [r3, #1]
    60c0:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    60c4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    60c8:	b108      	cbz	r0, 60ce <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    60ca:	4299      	cmp	r1, r3
    60cc:	d1f7      	bne.n	60be <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    60ce:	2700      	movs	r7, #0
    60d0:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    60d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    60d6:	2d04      	cmp	r5, #4
    60d8:	bf28      	it	cs
    60da:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    60dc:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    60de:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    60e0:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    60e2:	f104 0804 	add.w	r8, r4, #4
    60e6:	4640      	mov	r0, r8
    60e8:	f8df 9154 	ldr.w	r9, [pc, #340]	; 6240 <xTaskCreate+0x1d8>
    60ec:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    60ee:	f104 0018 	add.w	r0, r4, #24
    60f2:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    60f4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    60f6:	f1c5 0505 	rsb	r5, r5, #5
    60fa:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    60fc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    60fe:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    6100:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    6104:	9a01      	ldr	r2, [sp, #4]
    6106:	4659      	mov	r1, fp
    6108:	4630      	mov	r0, r6
    610a:	4b45      	ldr	r3, [pc, #276]	; (6220 <xTaskCreate+0x1b8>)
    610c:	4798      	blx	r3
    610e:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    6110:	f1ba 0f00 	cmp.w	sl, #0
    6114:	d001      	beq.n	611a <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    6116:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    611a:	4b42      	ldr	r3, [pc, #264]	; (6224 <xTaskCreate+0x1bc>)
    611c:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    611e:	4b42      	ldr	r3, [pc, #264]	; (6228 <xTaskCreate+0x1c0>)
    6120:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    6124:	3201      	adds	r2, #1
    6126:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    612a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    612e:	2b00      	cmp	r3, #0
    6130:	d042      	beq.n	61b8 <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    6132:	4b3d      	ldr	r3, [pc, #244]	; (6228 <xTaskCreate+0x1c0>)
    6134:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    6138:	b94b      	cbnz	r3, 614e <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    613a:	4b3b      	ldr	r3, [pc, #236]	; (6228 <xTaskCreate+0x1c0>)
    613c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6142:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6144:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    6146:	bf9c      	itt	ls
    6148:	4b37      	ldrls	r3, [pc, #220]	; (6228 <xTaskCreate+0x1c0>)
    614a:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    614e:	4a36      	ldr	r2, [pc, #216]	; (6228 <xTaskCreate+0x1c0>)
    6150:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    6154:	3301      	adds	r3, #1
    6156:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    615a:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    615c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    615e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    6162:	4293      	cmp	r3, r2
    6164:	bf84      	itt	hi
    6166:	4a30      	ldrhi	r2, [pc, #192]	; (6228 <xTaskCreate+0x1c0>)
    6168:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    616c:	4d2e      	ldr	r5, [pc, #184]	; (6228 <xTaskCreate+0x1c0>)
    616e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    6172:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6176:	4641      	mov	r1, r8
    6178:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    617c:	4b2b      	ldr	r3, [pc, #172]	; (622c <xTaskCreate+0x1c4>)
    617e:	4798      	blx	r3
	taskEXIT_CRITICAL();
    6180:	4b2b      	ldr	r3, [pc, #172]	; (6230 <xTaskCreate+0x1c8>)
    6182:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    6184:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    6188:	2b00      	cmp	r3, #0
    618a:	d03f      	beq.n	620c <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    618c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    6190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6192:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6194:	429a      	cmp	r2, r3
    6196:	d23d      	bcs.n	6214 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    6198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    619c:	4b25      	ldr	r3, [pc, #148]	; (6234 <xTaskCreate+0x1cc>)
    619e:	601a      	str	r2, [r3, #0]
    61a0:	f3bf 8f4f 	dsb	sy
    61a4:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    61a8:	2001      	movs	r0, #1
    61aa:	e030      	b.n	620e <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    61ac:	4638      	mov	r0, r7
    61ae:	4b22      	ldr	r3, [pc, #136]	; (6238 <xTaskCreate+0x1d0>)
    61b0:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    61b2:	f04f 30ff 	mov.w	r0, #4294967295
    61b6:	e02a      	b.n	620e <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    61b8:	4b1b      	ldr	r3, [pc, #108]	; (6228 <xTaskCreate+0x1c0>)
    61ba:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    61be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    61c2:	2b01      	cmp	r3, #1
    61c4:	d1c3      	bne.n	614e <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    61c6:	4d18      	ldr	r5, [pc, #96]	; (6228 <xTaskCreate+0x1c0>)
    61c8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    61cc:	4e1b      	ldr	r6, [pc, #108]	; (623c <xTaskCreate+0x1d4>)
    61ce:	47b0      	blx	r6
    61d0:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    61d4:	47b0      	blx	r6
    61d6:	f105 0050 	add.w	r0, r5, #80	; 0x50
    61da:	47b0      	blx	r6
    61dc:	f105 0064 	add.w	r0, r5, #100	; 0x64
    61e0:	47b0      	blx	r6
    61e2:	f105 0078 	add.w	r0, r5, #120	; 0x78
    61e6:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    61e8:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    61ec:	4648      	mov	r0, r9
    61ee:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    61f0:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    61f4:	4638      	mov	r0, r7
    61f6:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    61f8:	f105 0014 	add.w	r0, r5, #20
    61fc:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    61fe:	4628      	mov	r0, r5
    6200:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    6202:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    6206:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    620a:	e7a0      	b.n	614e <xTaskCreate+0xe6>
		xReturn = pdPASS;
    620c:	2001      	movs	r0, #1
}
    620e:	b003      	add	sp, #12
    6210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    6214:	2001      	movs	r0, #1
	return xReturn;
    6216:	e7fa      	b.n	620e <xTaskCreate+0x1a6>
    6218:	00005495 	.word	0x00005495
    621c:	000070c5 	.word	0x000070c5
    6220:	00005191 	.word	0x00005191
    6224:	000051e5 	.word	0x000051e5
    6228:	2000334c 	.word	0x2000334c
    622c:	000050a1 	.word	0x000050a1
    6230:	00005229 	.word	0x00005229
    6234:	e000ed04 	.word	0xe000ed04
    6238:	00005569 	.word	0x00005569
    623c:	00005085 	.word	0x00005085
    6240:	0000509b 	.word	0x0000509b

00006244 <vTaskStartScheduler>:
{
    6244:	b510      	push	{r4, lr}
    6246:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    6248:	4b19      	ldr	r3, [pc, #100]	; (62b0 <vTaskStartScheduler+0x6c>)
    624a:	9301      	str	r3, [sp, #4]
    624c:	2300      	movs	r3, #0
    624e:	9300      	str	r3, [sp, #0]
    6250:	2280      	movs	r2, #128	; 0x80
    6252:	4918      	ldr	r1, [pc, #96]	; (62b4 <vTaskStartScheduler+0x70>)
    6254:	4818      	ldr	r0, [pc, #96]	; (62b8 <vTaskStartScheduler+0x74>)
    6256:	4c19      	ldr	r4, [pc, #100]	; (62bc <vTaskStartScheduler+0x78>)
    6258:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    625a:	2801      	cmp	r0, #1
    625c:	d004      	beq.n	6268 <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    625e:	f1b0 3fff 	cmp.w	r0, #4294967295
    6262:	d01b      	beq.n	629c <vTaskStartScheduler+0x58>
}
    6264:	b002      	add	sp, #8
    6266:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    6268:	4b15      	ldr	r3, [pc, #84]	; (62c0 <vTaskStartScheduler+0x7c>)
    626a:	4798      	blx	r3
	if (xReturn == pdPASS) {
    626c:	2801      	cmp	r0, #1
    626e:	d1f6      	bne.n	625e <vTaskStartScheduler+0x1a>
    6270:	f04f 0380 	mov.w	r3, #128	; 0x80
    6274:	f383 8811 	msr	BASEPRI, r3
    6278:	f3bf 8f6f 	isb	sy
    627c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    6280:	4b10      	ldr	r3, [pc, #64]	; (62c4 <vTaskStartScheduler+0x80>)
    6282:	f04f 32ff 	mov.w	r2, #4294967295
    6286:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    628a:	2201      	movs	r2, #1
    628c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    6290:	2200      	movs	r2, #0
    6292:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    6296:	4b0c      	ldr	r3, [pc, #48]	; (62c8 <vTaskStartScheduler+0x84>)
    6298:	4798      	blx	r3
    629a:	e7e3      	b.n	6264 <vTaskStartScheduler+0x20>
    629c:	f04f 0380 	mov.w	r3, #128	; 0x80
    62a0:	f383 8811 	msr	BASEPRI, r3
    62a4:	f3bf 8f6f 	isb	sy
    62a8:	f3bf 8f4f 	dsb	sy
    62ac:	e7fe      	b.n	62ac <vTaskStartScheduler+0x68>
    62ae:	bf00      	nop
    62b0:	20003428 	.word	0x20003428
    62b4:	000092fc 	.word	0x000092fc
    62b8:	00005f99 	.word	0x00005f99
    62bc:	00006069 	.word	0x00006069
    62c0:	00006c8d 	.word	0x00006c8d
    62c4:	2000334c 	.word	0x2000334c
    62c8:	00005319 	.word	0x00005319

000062cc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    62cc:	4a03      	ldr	r2, [pc, #12]	; (62dc <vTaskSuspendAll+0x10>)
    62ce:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    62d2:	3301      	adds	r3, #1
    62d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    62d8:	4770      	bx	lr
    62da:	bf00      	nop
    62dc:	2000334c 	.word	0x2000334c

000062e0 <xTaskGetTickCount>:
		xTicks = xTickCount;
    62e0:	4b01      	ldr	r3, [pc, #4]	; (62e8 <xTaskGetTickCount+0x8>)
    62e2:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    62e6:	4770      	bx	lr
    62e8:	2000334c 	.word	0x2000334c

000062ec <xTaskIncrementTick>:
{
    62ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    62f0:	4b44      	ldr	r3, [pc, #272]	; (6404 <xTaskIncrementTick+0x118>)
    62f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    62f6:	2b00      	cmp	r3, #0
    62f8:	d173      	bne.n	63e2 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    62fa:	4b42      	ldr	r3, [pc, #264]	; (6404 <xTaskIncrementTick+0x118>)
    62fc:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    6300:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    6302:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    6306:	b9e6      	cbnz	r6, 6342 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    6308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    630c:	681b      	ldr	r3, [r3, #0]
    630e:	b143      	cbz	r3, 6322 <xTaskIncrementTick+0x36>
    6310:	f04f 0380 	mov.w	r3, #128	; 0x80
    6314:	f383 8811 	msr	BASEPRI, r3
    6318:	f3bf 8f6f 	isb	sy
    631c:	f3bf 8f4f 	dsb	sy
    6320:	e7fe      	b.n	6320 <xTaskIncrementTick+0x34>
    6322:	4b38      	ldr	r3, [pc, #224]	; (6404 <xTaskIncrementTick+0x118>)
    6324:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    6328:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    632c:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    6330:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    6334:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    6338:	3201      	adds	r2, #1
    633a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    633e:	4b32      	ldr	r3, [pc, #200]	; (6408 <xTaskIncrementTick+0x11c>)
    6340:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    6342:	4b30      	ldr	r3, [pc, #192]	; (6404 <xTaskIncrementTick+0x118>)
    6344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    6348:	429e      	cmp	r6, r3
    634a:	d20d      	bcs.n	6368 <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    634c:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    634e:	4b2d      	ldr	r3, [pc, #180]	; (6404 <xTaskIncrementTick+0x118>)
    6350:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6354:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    6356:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    635a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    6360:	2b02      	cmp	r3, #2
    6362:	bf28      	it	cs
    6364:	2401      	movcs	r4, #1
    6366:	e043      	b.n	63f0 <xTaskIncrementTick+0x104>
    6368:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    636a:	4d26      	ldr	r5, [pc, #152]	; (6404 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    636c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 6410 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    6370:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    6374:	e021      	b.n	63ba <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    6376:	f04f 32ff 	mov.w	r2, #4294967295
    637a:	4b22      	ldr	r3, [pc, #136]	; (6404 <xTaskIncrementTick+0x118>)
    637c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    6380:	e7e5      	b.n	634e <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    6382:	4a20      	ldr	r2, [pc, #128]	; (6404 <xTaskIncrementTick+0x118>)
    6384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    6388:	e7e1      	b.n	634e <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    638a:	f107 0018 	add.w	r0, r7, #24
    638e:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    6390:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    6392:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    6396:	4298      	cmp	r0, r3
    6398:	bf88      	it	hi
    639a:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    639e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    63a2:	4649      	mov	r1, r9
    63a4:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    63a8:	4b18      	ldr	r3, [pc, #96]	; (640c <xTaskIncrementTick+0x120>)
    63aa:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    63ac:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    63b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    63b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    63b4:	429a      	cmp	r2, r3
    63b6:	bf28      	it	cs
    63b8:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    63ba:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    63be:	681b      	ldr	r3, [r3, #0]
    63c0:	2b00      	cmp	r3, #0
    63c2:	d0d8      	beq.n	6376 <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    63c4:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    63c8:	68db      	ldr	r3, [r3, #12]
    63ca:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    63cc:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    63ce:	429e      	cmp	r6, r3
    63d0:	d3d7      	bcc.n	6382 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    63d2:	f107 0904 	add.w	r9, r7, #4
    63d6:	4648      	mov	r0, r9
    63d8:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    63da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    63dc:	2b00      	cmp	r3, #0
    63de:	d1d4      	bne.n	638a <xTaskIncrementTick+0x9e>
    63e0:	e7d6      	b.n	6390 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    63e2:	4a08      	ldr	r2, [pc, #32]	; (6404 <xTaskIncrementTick+0x118>)
    63e4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    63e8:	3301      	adds	r3, #1
    63ea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    63ee:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    63f0:	4b04      	ldr	r3, [pc, #16]	; (6404 <xTaskIncrementTick+0x118>)
    63f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    63f6:	2b00      	cmp	r3, #0
}
    63f8:	bf0c      	ite	eq
    63fa:	4620      	moveq	r0, r4
    63fc:	2001      	movne	r0, #1
    63fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6402:	bf00      	nop
    6404:	2000334c 	.word	0x2000334c
    6408:	00005fbd 	.word	0x00005fbd
    640c:	000050a1 	.word	0x000050a1
    6410:	000050ed 	.word	0x000050ed

00006414 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    6414:	4b3a      	ldr	r3, [pc, #232]	; (6500 <xTaskResumeAll+0xec>)
    6416:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    641a:	b943      	cbnz	r3, 642e <xTaskResumeAll+0x1a>
    641c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6420:	f383 8811 	msr	BASEPRI, r3
    6424:	f3bf 8f6f 	isb	sy
    6428:	f3bf 8f4f 	dsb	sy
    642c:	e7fe      	b.n	642c <xTaskResumeAll+0x18>
{
    642e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    6432:	4b34      	ldr	r3, [pc, #208]	; (6504 <xTaskResumeAll+0xf0>)
    6434:	4798      	blx	r3
		--uxSchedulerSuspended;
    6436:	4b32      	ldr	r3, [pc, #200]	; (6500 <xTaskResumeAll+0xec>)
    6438:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    643c:	3a01      	subs	r2, #1
    643e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    6442:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    6446:	2b00      	cmp	r3, #0
    6448:	d155      	bne.n	64f6 <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    644a:	4b2d      	ldr	r3, [pc, #180]	; (6500 <xTaskResumeAll+0xec>)
    644c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    6450:	b92b      	cbnz	r3, 645e <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    6452:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    6454:	4b2c      	ldr	r3, [pc, #176]	; (6508 <xTaskResumeAll+0xf4>)
    6456:	4798      	blx	r3
}
    6458:	4620      	mov	r0, r4
    645a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    645e:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    6460:	4c27      	ldr	r4, [pc, #156]	; (6500 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    6462:	4e2a      	ldr	r6, [pc, #168]	; (650c <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    6464:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    6468:	6963      	ldr	r3, [r4, #20]
    646a:	b1fb      	cbz	r3, 64ac <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    646c:	6a23      	ldr	r3, [r4, #32]
    646e:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    6470:	f105 0018 	add.w	r0, r5, #24
    6474:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    6476:	1d2f      	adds	r7, r5, #4
    6478:	4638      	mov	r0, r7
    647a:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    647c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    647e:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    6482:	4298      	cmp	r0, r3
    6484:	bf88      	it	hi
    6486:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    648a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    648e:	4639      	mov	r1, r7
    6490:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    6494:	4b1e      	ldr	r3, [pc, #120]	; (6510 <xTaskResumeAll+0xfc>)
    6496:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    6498:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    649c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    64a0:	429a      	cmp	r2, r3
    64a2:	d3e1      	bcc.n	6468 <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    64a4:	2301      	movs	r3, #1
    64a6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    64aa:	e7dd      	b.n	6468 <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    64ac:	b10d      	cbz	r5, 64b2 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    64ae:	4b19      	ldr	r3, [pc, #100]	; (6514 <xTaskResumeAll+0x100>)
    64b0:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    64b2:	4b13      	ldr	r3, [pc, #76]	; (6500 <xTaskResumeAll+0xec>)
    64b4:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    64b8:	b17c      	cbz	r4, 64da <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    64ba:	4f17      	ldr	r7, [pc, #92]	; (6518 <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    64bc:	461e      	mov	r6, r3
    64be:	2501      	movs	r5, #1
    64c0:	e001      	b.n	64c6 <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    64c2:	3c01      	subs	r4, #1
    64c4:	d005      	beq.n	64d2 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    64c6:	47b8      	blx	r7
    64c8:	2800      	cmp	r0, #0
    64ca:	d0fa      	beq.n	64c2 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    64cc:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    64d0:	e7f7      	b.n	64c2 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    64d2:	2200      	movs	r2, #0
    64d4:	4b0a      	ldr	r3, [pc, #40]	; (6500 <xTaskResumeAll+0xec>)
    64d6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    64da:	4b09      	ldr	r3, [pc, #36]	; (6500 <xTaskResumeAll+0xec>)
    64dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    64e0:	b15b      	cbz	r3, 64fa <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    64e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    64e6:	4b0d      	ldr	r3, [pc, #52]	; (651c <xTaskResumeAll+0x108>)
    64e8:	601a      	str	r2, [r3, #0]
    64ea:	f3bf 8f4f 	dsb	sy
    64ee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    64f2:	2401      	movs	r4, #1
    64f4:	e7ae      	b.n	6454 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    64f6:	2400      	movs	r4, #0
    64f8:	e7ac      	b.n	6454 <xTaskResumeAll+0x40>
    64fa:	2400      	movs	r4, #0
    64fc:	e7aa      	b.n	6454 <xTaskResumeAll+0x40>
    64fe:	bf00      	nop
    6500:	2000334c 	.word	0x2000334c
    6504:	000051e5 	.word	0x000051e5
    6508:	00005229 	.word	0x00005229
    650c:	000050ed 	.word	0x000050ed
    6510:	000050a1 	.word	0x000050a1
    6514:	00005fbd 	.word	0x00005fbd
    6518:	000062ed 	.word	0x000062ed
    651c:	e000ed04 	.word	0xe000ed04

00006520 <vTaskDelay>:
{
    6520:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    6522:	b1b0      	cbz	r0, 6552 <vTaskDelay+0x32>
    6524:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    6526:	4b0f      	ldr	r3, [pc, #60]	; (6564 <vTaskDelay+0x44>)
    6528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    652c:	b143      	cbz	r3, 6540 <vTaskDelay+0x20>
    652e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6532:	f383 8811 	msr	BASEPRI, r3
    6536:	f3bf 8f6f 	isb	sy
    653a:	f3bf 8f4f 	dsb	sy
    653e:	e7fe      	b.n	653e <vTaskDelay+0x1e>
		vTaskSuspendAll();
    6540:	4b09      	ldr	r3, [pc, #36]	; (6568 <vTaskDelay+0x48>)
    6542:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    6544:	2100      	movs	r1, #0
    6546:	4620      	mov	r0, r4
    6548:	4b08      	ldr	r3, [pc, #32]	; (656c <vTaskDelay+0x4c>)
    654a:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    654c:	4b08      	ldr	r3, [pc, #32]	; (6570 <vTaskDelay+0x50>)
    654e:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    6550:	b938      	cbnz	r0, 6562 <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    6552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6556:	4b07      	ldr	r3, [pc, #28]	; (6574 <vTaskDelay+0x54>)
    6558:	601a      	str	r2, [r3, #0]
    655a:	f3bf 8f4f 	dsb	sy
    655e:	f3bf 8f6f 	isb	sy
    6562:	bd10      	pop	{r4, pc}
    6564:	2000334c 	.word	0x2000334c
    6568:	000062cd 	.word	0x000062cd
    656c:	00005fe9 	.word	0x00005fe9
    6570:	00006415 	.word	0x00006415
    6574:	e000ed04 	.word	0xe000ed04

00006578 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    6578:	4b2c      	ldr	r3, [pc, #176]	; (662c <vTaskSwitchContext+0xb4>)
    657a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    657e:	bb8b      	cbnz	r3, 65e4 <vTaskSwitchContext+0x6c>
{
    6580:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    6582:	4b2a      	ldr	r3, [pc, #168]	; (662c <vTaskSwitchContext+0xb4>)
    6584:	2200      	movs	r2, #0
    6586:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    658a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    658e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6592:	6812      	ldr	r2, [r2, #0]
    6594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6596:	429a      	cmp	r2, r3
    6598:	d807      	bhi.n	65aa <vTaskSwitchContext+0x32>
    659a:	4b24      	ldr	r3, [pc, #144]	; (662c <vTaskSwitchContext+0xb4>)
    659c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    65a0:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    65a4:	3134      	adds	r1, #52	; 0x34
    65a6:	4b22      	ldr	r3, [pc, #136]	; (6630 <vTaskSwitchContext+0xb8>)
    65a8:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    65aa:	4a20      	ldr	r2, [pc, #128]	; (662c <vTaskSwitchContext+0xb4>)
    65ac:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    65b0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    65b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    65b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    65ba:	b9c2      	cbnz	r2, 65ee <vTaskSwitchContext+0x76>
    65bc:	b14b      	cbz	r3, 65d2 <vTaskSwitchContext+0x5a>
    65be:	491b      	ldr	r1, [pc, #108]	; (662c <vTaskSwitchContext+0xb4>)
    65c0:	3b01      	subs	r3, #1
    65c2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    65c6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    65ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
    65cc:	b97a      	cbnz	r2, 65ee <vTaskSwitchContext+0x76>
    65ce:	2b00      	cmp	r3, #0
    65d0:	d1f6      	bne.n	65c0 <vTaskSwitchContext+0x48>
    65d2:	f04f 0380 	mov.w	r3, #128	; 0x80
    65d6:	f383 8811 	msr	BASEPRI, r3
    65da:	f3bf 8f6f 	isb	sy
    65de:	f3bf 8f4f 	dsb	sy
    65e2:	e7fe      	b.n	65e2 <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    65e4:	2201      	movs	r2, #1
    65e6:	4b11      	ldr	r3, [pc, #68]	; (662c <vTaskSwitchContext+0xb4>)
    65e8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    65ec:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    65ee:	4a0f      	ldr	r2, [pc, #60]	; (662c <vTaskSwitchContext+0xb4>)
    65f0:	0099      	lsls	r1, r3, #2
    65f2:	18c8      	adds	r0, r1, r3
    65f4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    65f8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    65fa:	6864      	ldr	r4, [r4, #4]
    65fc:	62c4      	str	r4, [r0, #44]	; 0x2c
    65fe:	4419      	add	r1, r3
    6600:	4602      	mov	r2, r0
    6602:	3230      	adds	r2, #48	; 0x30
    6604:	4294      	cmp	r4, r2
    6606:	d00b      	beq.n	6620 <vTaskSwitchContext+0xa8>
    6608:	4a08      	ldr	r2, [pc, #32]	; (662c <vTaskSwitchContext+0xb4>)
    660a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    660e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    6612:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    6614:	68c9      	ldr	r1, [r1, #12]
    6616:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    661a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    661e:	bd10      	pop	{r4, pc}
    6620:	6860      	ldr	r0, [r4, #4]
    6622:	4a02      	ldr	r2, [pc, #8]	; (662c <vTaskSwitchContext+0xb4>)
    6624:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    6628:	62d0      	str	r0, [r2, #44]	; 0x2c
    662a:	e7ed      	b.n	6608 <vTaskSwitchContext+0x90>
    662c:	2000334c 	.word	0x2000334c
    6630:	000002d1 	.word	0x000002d1

00006634 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    6634:	b940      	cbnz	r0, 6648 <vTaskPlaceOnEventList+0x14>
    6636:	f04f 0380 	mov.w	r3, #128	; 0x80
    663a:	f383 8811 	msr	BASEPRI, r3
    663e:	f3bf 8f6f 	isb	sy
    6642:	f3bf 8f4f 	dsb	sy
    6646:	e7fe      	b.n	6646 <vTaskPlaceOnEventList+0x12>
{
    6648:	b510      	push	{r4, lr}
    664a:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    664c:	4b05      	ldr	r3, [pc, #20]	; (6664 <vTaskPlaceOnEventList+0x30>)
    664e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    6652:	3118      	adds	r1, #24
    6654:	4b04      	ldr	r3, [pc, #16]	; (6668 <vTaskPlaceOnEventList+0x34>)
    6656:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    6658:	2101      	movs	r1, #1
    665a:	4620      	mov	r0, r4
    665c:	4b03      	ldr	r3, [pc, #12]	; (666c <vTaskPlaceOnEventList+0x38>)
    665e:	4798      	blx	r3
    6660:	bd10      	pop	{r4, pc}
    6662:	bf00      	nop
    6664:	2000334c 	.word	0x2000334c
    6668:	000050b9 	.word	0x000050b9
    666c:	00005fe9 	.word	0x00005fe9

00006670 <vTaskPlaceOnEventListRestricted>:
{
    6670:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    6672:	b180      	cbz	r0, 6696 <vTaskPlaceOnEventListRestricted+0x26>
    6674:	4614      	mov	r4, r2
    6676:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    6678:	4b0b      	ldr	r3, [pc, #44]	; (66a8 <vTaskPlaceOnEventListRestricted+0x38>)
    667a:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    667e:	3118      	adds	r1, #24
    6680:	4b0a      	ldr	r3, [pc, #40]	; (66ac <vTaskPlaceOnEventListRestricted+0x3c>)
    6682:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    6684:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    6686:	4621      	mov	r1, r4
    6688:	bf0c      	ite	eq
    668a:	4628      	moveq	r0, r5
    668c:	f04f 30ff 	movne.w	r0, #4294967295
    6690:	4b07      	ldr	r3, [pc, #28]	; (66b0 <vTaskPlaceOnEventListRestricted+0x40>)
    6692:	4798      	blx	r3
    6694:	bd38      	pop	{r3, r4, r5, pc}
    6696:	f04f 0380 	mov.w	r3, #128	; 0x80
    669a:	f383 8811 	msr	BASEPRI, r3
    669e:	f3bf 8f6f 	isb	sy
    66a2:	f3bf 8f4f 	dsb	sy
    66a6:	e7fe      	b.n	66a6 <vTaskPlaceOnEventListRestricted+0x36>
    66a8:	2000334c 	.word	0x2000334c
    66ac:	000050a1 	.word	0x000050a1
    66b0:	00005fe9 	.word	0x00005fe9

000066b4 <xTaskRemoveFromEventList>:
{
    66b4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    66b6:	68c3      	ldr	r3, [r0, #12]
    66b8:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    66ba:	2c00      	cmp	r4, #0
    66bc:	d02a      	beq.n	6714 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    66be:	f104 0518 	add.w	r5, r4, #24
    66c2:	4628      	mov	r0, r5
    66c4:	4b1a      	ldr	r3, [pc, #104]	; (6730 <xTaskRemoveFromEventList+0x7c>)
    66c6:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    66c8:	4b1a      	ldr	r3, [pc, #104]	; (6734 <xTaskRemoveFromEventList+0x80>)
    66ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    66ce:	bb53      	cbnz	r3, 6726 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    66d0:	1d25      	adds	r5, r4, #4
    66d2:	4628      	mov	r0, r5
    66d4:	4b16      	ldr	r3, [pc, #88]	; (6730 <xTaskRemoveFromEventList+0x7c>)
    66d6:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    66d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    66da:	4b16      	ldr	r3, [pc, #88]	; (6734 <xTaskRemoveFromEventList+0x80>)
    66dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    66e0:	4298      	cmp	r0, r3
    66e2:	bf84      	itt	hi
    66e4:	4b13      	ldrhi	r3, [pc, #76]	; (6734 <xTaskRemoveFromEventList+0x80>)
    66e6:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    66ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    66ee:	4629      	mov	r1, r5
    66f0:	4b11      	ldr	r3, [pc, #68]	; (6738 <xTaskRemoveFromEventList+0x84>)
    66f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    66f6:	4b11      	ldr	r3, [pc, #68]	; (673c <xTaskRemoveFromEventList+0x88>)
    66f8:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    66fa:	4b0e      	ldr	r3, [pc, #56]	; (6734 <xTaskRemoveFromEventList+0x80>)
    66fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6700:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6704:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    6706:	bf83      	ittte	hi
    6708:	2001      	movhi	r0, #1
    670a:	4b0a      	ldrhi	r3, [pc, #40]	; (6734 <xTaskRemoveFromEventList+0x80>)
    670c:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    6710:	2000      	movls	r0, #0
}
    6712:	bd38      	pop	{r3, r4, r5, pc}
    6714:	f04f 0380 	mov.w	r3, #128	; 0x80
    6718:	f383 8811 	msr	BASEPRI, r3
    671c:	f3bf 8f6f 	isb	sy
    6720:	f3bf 8f4f 	dsb	sy
    6724:	e7fe      	b.n	6724 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    6726:	4629      	mov	r1, r5
    6728:	4805      	ldr	r0, [pc, #20]	; (6740 <xTaskRemoveFromEventList+0x8c>)
    672a:	4b04      	ldr	r3, [pc, #16]	; (673c <xTaskRemoveFromEventList+0x88>)
    672c:	4798      	blx	r3
    672e:	e7e4      	b.n	66fa <xTaskRemoveFromEventList+0x46>
    6730:	000050ed 	.word	0x000050ed
    6734:	2000334c 	.word	0x2000334c
    6738:	20003374 	.word	0x20003374
    673c:	000050a1 	.word	0x000050a1
    6740:	20003360 	.word	0x20003360

00006744 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    6744:	4b03      	ldr	r3, [pc, #12]	; (6754 <vTaskInternalSetTimeOutState+0x10>)
    6746:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    674a:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    674c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    6750:	6043      	str	r3, [r0, #4]
    6752:	4770      	bx	lr
    6754:	2000334c 	.word	0x2000334c

00006758 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    6758:	b1f8      	cbz	r0, 679a <xTaskCheckForTimeOut+0x42>
{
    675a:	b570      	push	{r4, r5, r6, lr}
    675c:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    675e:	b329      	cbz	r1, 67ac <xTaskCheckForTimeOut+0x54>
    6760:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    6762:	4b1c      	ldr	r3, [pc, #112]	; (67d4 <xTaskCheckForTimeOut+0x7c>)
    6764:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    6766:	4b1c      	ldr	r3, [pc, #112]	; (67d8 <xTaskCheckForTimeOut+0x80>)
    6768:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    676c:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    676e:	6823      	ldr	r3, [r4, #0]
    6770:	f1b3 3fff 	cmp.w	r3, #4294967295
    6774:	d02a      	beq.n	67cc <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    6776:	4818      	ldr	r0, [pc, #96]	; (67d8 <xTaskCheckForTimeOut+0x80>)
    6778:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    677c:	682e      	ldr	r6, [r5, #0]
    677e:	4286      	cmp	r6, r0
    6780:	d001      	beq.n	6786 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    6782:	428a      	cmp	r2, r1
    6784:	d224      	bcs.n	67d0 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    6786:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    6788:	429a      	cmp	r2, r3
    678a:	d318      	bcc.n	67be <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    678c:	2300      	movs	r3, #0
    678e:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    6790:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    6792:	4b12      	ldr	r3, [pc, #72]	; (67dc <xTaskCheckForTimeOut+0x84>)
    6794:	4798      	blx	r3
}
    6796:	4620      	mov	r0, r4
    6798:	bd70      	pop	{r4, r5, r6, pc}
    679a:	f04f 0380 	mov.w	r3, #128	; 0x80
    679e:	f383 8811 	msr	BASEPRI, r3
    67a2:	f3bf 8f6f 	isb	sy
    67a6:	f3bf 8f4f 	dsb	sy
    67aa:	e7fe      	b.n	67aa <xTaskCheckForTimeOut+0x52>
    67ac:	f04f 0380 	mov.w	r3, #128	; 0x80
    67b0:	f383 8811 	msr	BASEPRI, r3
    67b4:	f3bf 8f6f 	isb	sy
    67b8:	f3bf 8f4f 	dsb	sy
    67bc:	e7fe      	b.n	67bc <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    67be:	1a9b      	subs	r3, r3, r2
    67c0:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    67c2:	4628      	mov	r0, r5
    67c4:	4b06      	ldr	r3, [pc, #24]	; (67e0 <xTaskCheckForTimeOut+0x88>)
    67c6:	4798      	blx	r3
			xReturn = pdFALSE;
    67c8:	2400      	movs	r4, #0
    67ca:	e7e2      	b.n	6792 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    67cc:	2400      	movs	r4, #0
    67ce:	e7e0      	b.n	6792 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    67d0:	2401      	movs	r4, #1
    67d2:	e7de      	b.n	6792 <xTaskCheckForTimeOut+0x3a>
    67d4:	000051e5 	.word	0x000051e5
    67d8:	2000334c 	.word	0x2000334c
    67dc:	00005229 	.word	0x00005229
    67e0:	00006745 	.word	0x00006745

000067e4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    67e4:	2201      	movs	r2, #1
    67e6:	4b02      	ldr	r3, [pc, #8]	; (67f0 <vTaskMissedYield+0xc>)
    67e8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    67ec:	4770      	bx	lr
    67ee:	bf00      	nop
    67f0:	2000334c 	.word	0x2000334c

000067f4 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    67f4:	4b06      	ldr	r3, [pc, #24]	; (6810 <xTaskGetSchedulerState+0x1c>)
    67f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    67fa:	b13b      	cbz	r3, 680c <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    67fc:	4b04      	ldr	r3, [pc, #16]	; (6810 <xTaskGetSchedulerState+0x1c>)
    67fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    6802:	2b00      	cmp	r3, #0
    6804:	bf0c      	ite	eq
    6806:	2002      	moveq	r0, #2
    6808:	2000      	movne	r0, #0
    680a:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    680c:	2001      	movs	r0, #1
}
    680e:	4770      	bx	lr
    6810:	2000334c 	.word	0x2000334c

00006814 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    6814:	2800      	cmp	r0, #0
    6816:	d045      	beq.n	68a4 <xTaskPriorityInherit+0x90>
{
    6818:	b538      	push	{r3, r4, r5, lr}
    681a:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    681c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    681e:	4922      	ldr	r1, [pc, #136]	; (68a8 <xTaskPriorityInherit+0x94>)
    6820:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    6824:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    6826:	428a      	cmp	r2, r1
    6828:	d232      	bcs.n	6890 <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    682a:	6981      	ldr	r1, [r0, #24]
    682c:	2900      	cmp	r1, #0
    682e:	db06      	blt.n	683e <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    6830:	491d      	ldr	r1, [pc, #116]	; (68a8 <xTaskPriorityInherit+0x94>)
    6832:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    6836:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    6838:	f1c1 0105 	rsb	r1, r1, #5
    683c:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    683e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    6842:	491a      	ldr	r1, [pc, #104]	; (68ac <xTaskPriorityInherit+0x98>)
    6844:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6848:	6969      	ldr	r1, [r5, #20]
    684a:	4291      	cmp	r1, r2
    684c:	d006      	beq.n	685c <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    684e:	4a16      	ldr	r2, [pc, #88]	; (68a8 <xTaskPriorityInherit+0x94>)
    6850:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    6854:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    6856:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    6858:	2001      	movs	r0, #1
    685a:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    685c:	1d2c      	adds	r4, r5, #4
    685e:	4620      	mov	r0, r4
    6860:	4b13      	ldr	r3, [pc, #76]	; (68b0 <xTaskPriorityInherit+0x9c>)
    6862:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    6864:	4b10      	ldr	r3, [pc, #64]	; (68a8 <xTaskPriorityInherit+0x94>)
    6866:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    686a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    686c:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    686e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6872:	4298      	cmp	r0, r3
    6874:	bf84      	itt	hi
    6876:	4b0c      	ldrhi	r3, [pc, #48]	; (68a8 <xTaskPriorityInherit+0x94>)
    6878:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    687c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6880:	4621      	mov	r1, r4
    6882:	4b0a      	ldr	r3, [pc, #40]	; (68ac <xTaskPriorityInherit+0x98>)
    6884:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6888:	4b0a      	ldr	r3, [pc, #40]	; (68b4 <xTaskPriorityInherit+0xa0>)
    688a:	4798      	blx	r3
			xReturn = pdTRUE;
    688c:	2001      	movs	r0, #1
    688e:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    6890:	4a05      	ldr	r2, [pc, #20]	; (68a8 <xTaskPriorityInherit+0x94>)
    6892:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    6896:	6c40      	ldr	r0, [r0, #68]	; 0x44
    6898:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    689a:	4298      	cmp	r0, r3
    689c:	bf2c      	ite	cs
    689e:	2000      	movcs	r0, #0
    68a0:	2001      	movcc	r0, #1
    68a2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    68a4:	2000      	movs	r0, #0
	return xReturn;
    68a6:	4770      	bx	lr
    68a8:	2000334c 	.word	0x2000334c
    68ac:	20003374 	.word	0x20003374
    68b0:	000050ed 	.word	0x000050ed
    68b4:	000050a1 	.word	0x000050a1

000068b8 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    68b8:	2800      	cmp	r0, #0
    68ba:	d03c      	beq.n	6936 <xTaskPriorityDisinherit+0x7e>
{
    68bc:	b538      	push	{r3, r4, r5, lr}
    68be:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    68c0:	4a20      	ldr	r2, [pc, #128]	; (6944 <xTaskPriorityDisinherit+0x8c>)
    68c2:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    68c6:	4290      	cmp	r0, r2
    68c8:	d008      	beq.n	68dc <xTaskPriorityDisinherit+0x24>
    68ca:	f04f 0380 	mov.w	r3, #128	; 0x80
    68ce:	f383 8811 	msr	BASEPRI, r3
    68d2:	f3bf 8f6f 	isb	sy
    68d6:	f3bf 8f4f 	dsb	sy
    68da:	e7fe      	b.n	68da <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    68dc:	6c82      	ldr	r2, [r0, #72]	; 0x48
    68de:	b942      	cbnz	r2, 68f2 <xTaskPriorityDisinherit+0x3a>
    68e0:	f04f 0380 	mov.w	r3, #128	; 0x80
    68e4:	f383 8811 	msr	BASEPRI, r3
    68e8:	f3bf 8f6f 	isb	sy
    68ec:	f3bf 8f4f 	dsb	sy
    68f0:	e7fe      	b.n	68f0 <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    68f2:	3a01      	subs	r2, #1
    68f4:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    68f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    68f8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    68fa:	4288      	cmp	r0, r1
    68fc:	d01d      	beq.n	693a <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    68fe:	b9f2      	cbnz	r2, 693e <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    6900:	1d25      	adds	r5, r4, #4
    6902:	4628      	mov	r0, r5
    6904:	4b10      	ldr	r3, [pc, #64]	; (6948 <xTaskPriorityDisinherit+0x90>)
    6906:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    6908:	6c60      	ldr	r0, [r4, #68]	; 0x44
    690a:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    690c:	f1c0 0305 	rsb	r3, r0, #5
    6910:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    6912:	4b0c      	ldr	r3, [pc, #48]	; (6944 <xTaskPriorityDisinherit+0x8c>)
    6914:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6918:	4298      	cmp	r0, r3
    691a:	bf84      	itt	hi
    691c:	4b09      	ldrhi	r3, [pc, #36]	; (6944 <xTaskPriorityDisinherit+0x8c>)
    691e:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    6922:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6926:	4629      	mov	r1, r5
    6928:	4b08      	ldr	r3, [pc, #32]	; (694c <xTaskPriorityDisinherit+0x94>)
    692a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    692e:	4b08      	ldr	r3, [pc, #32]	; (6950 <xTaskPriorityDisinherit+0x98>)
    6930:	4798      	blx	r3
				xReturn = pdTRUE;
    6932:	2001      	movs	r0, #1
    6934:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    6936:	2000      	movs	r0, #0
    6938:	4770      	bx	lr
    693a:	2000      	movs	r0, #0
    693c:	bd38      	pop	{r3, r4, r5, pc}
    693e:	2000      	movs	r0, #0
}
    6940:	bd38      	pop	{r3, r4, r5, pc}
    6942:	bf00      	nop
    6944:	2000334c 	.word	0x2000334c
    6948:	000050ed 	.word	0x000050ed
    694c:	20003374 	.word	0x20003374
    6950:	000050a1 	.word	0x000050a1

00006954 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    6954:	2800      	cmp	r0, #0
    6956:	d049      	beq.n	69ec <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    6958:	b538      	push	{r3, r4, r5, lr}
    695a:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    695c:	6c80      	ldr	r0, [r0, #72]	; 0x48
    695e:	b940      	cbnz	r0, 6972 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    6960:	f04f 0380 	mov.w	r3, #128	; 0x80
    6964:	f383 8811 	msr	BASEPRI, r3
    6968:	f3bf 8f6f 	isb	sy
    696c:	f3bf 8f4f 	dsb	sy
    6970:	e7fe      	b.n	6970 <vTaskPriorityDisinheritAfterTimeout+0x1c>
    6972:	6c62      	ldr	r2, [r4, #68]	; 0x44
    6974:	428a      	cmp	r2, r1
    6976:	bf38      	it	cc
    6978:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    697a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    697c:	4291      	cmp	r1, r2
    697e:	d001      	beq.n	6984 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    6980:	2801      	cmp	r0, #1
    6982:	d000      	beq.n	6986 <vTaskPriorityDisinheritAfterTimeout+0x32>
    6984:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    6986:	481a      	ldr	r0, [pc, #104]	; (69f0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    6988:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    698c:	4284      	cmp	r4, r0
    698e:	d108      	bne.n	69a2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    6990:	f04f 0380 	mov.w	r3, #128	; 0x80
    6994:	f383 8811 	msr	BASEPRI, r3
    6998:	f3bf 8f6f 	isb	sy
    699c:	f3bf 8f4f 	dsb	sy
    69a0:	e7fe      	b.n	69a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    69a2:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    69a4:	69a0      	ldr	r0, [r4, #24]
    69a6:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    69a8:	bfa4      	itt	ge
    69aa:	f1c2 0205 	rsbge	r2, r2, #5
    69ae:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    69b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    69b4:	4a0f      	ldr	r2, [pc, #60]	; (69f4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    69b6:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    69ba:	6962      	ldr	r2, [r4, #20]
    69bc:	428a      	cmp	r2, r1
    69be:	d1e1      	bne.n	6984 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    69c0:	1d25      	adds	r5, r4, #4
    69c2:	4628      	mov	r0, r5
    69c4:	4b0c      	ldr	r3, [pc, #48]	; (69f8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    69c6:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    69c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    69ca:	4b09      	ldr	r3, [pc, #36]	; (69f0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    69cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    69d0:	4298      	cmp	r0, r3
    69d2:	bf84      	itt	hi
    69d4:	4b06      	ldrhi	r3, [pc, #24]	; (69f0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    69d6:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    69da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    69de:	4629      	mov	r1, r5
    69e0:	4b04      	ldr	r3, [pc, #16]	; (69f4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    69e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    69e6:	4b05      	ldr	r3, [pc, #20]	; (69fc <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    69e8:	4798      	blx	r3
}
    69ea:	e7cb      	b.n	6984 <vTaskPriorityDisinheritAfterTimeout+0x30>
    69ec:	4770      	bx	lr
    69ee:	bf00      	nop
    69f0:	2000334c 	.word	0x2000334c
    69f4:	20003374 	.word	0x20003374
    69f8:	000050ed 	.word	0x000050ed
    69fc:	000050a1 	.word	0x000050a1

00006a00 <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    6a00:	4b06      	ldr	r3, [pc, #24]	; (6a1c <pvTaskIncrementMutexHeldCount+0x1c>)
    6a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6a06:	b12b      	cbz	r3, 6a14 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    6a08:	4b04      	ldr	r3, [pc, #16]	; (6a1c <pvTaskIncrementMutexHeldCount+0x1c>)
    6a0a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6a0e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    6a10:	3301      	adds	r3, #1
    6a12:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    6a14:	4b01      	ldr	r3, [pc, #4]	; (6a1c <pvTaskIncrementMutexHeldCount+0x1c>)
    6a16:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    6a1a:	4770      	bx	lr
    6a1c:	2000334c 	.word	0x2000334c

00006a20 <xTaskNotifyWait>:
{
    6a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a22:	4607      	mov	r7, r0
    6a24:	460d      	mov	r5, r1
    6a26:	4614      	mov	r4, r2
    6a28:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    6a2a:	4b25      	ldr	r3, [pc, #148]	; (6ac0 <xTaskNotifyWait+0xa0>)
    6a2c:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    6a2e:	4b25      	ldr	r3, [pc, #148]	; (6ac4 <xTaskNotifyWait+0xa4>)
    6a30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6a34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    6a38:	b2db      	uxtb	r3, r3
    6a3a:	2b02      	cmp	r3, #2
    6a3c:	d00c      	beq.n	6a58 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    6a3e:	4b21      	ldr	r3, [pc, #132]	; (6ac4 <xTaskNotifyWait+0xa4>)
    6a40:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6a44:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    6a46:	ea20 0007 	bic.w	r0, r0, r7
    6a4a:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    6a4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6a50:	2201      	movs	r2, #1
    6a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    6a56:	b9e6      	cbnz	r6, 6a92 <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    6a58:	4b1b      	ldr	r3, [pc, #108]	; (6ac8 <xTaskNotifyWait+0xa8>)
    6a5a:	4798      	blx	r3
	taskENTER_CRITICAL();
    6a5c:	4b18      	ldr	r3, [pc, #96]	; (6ac0 <xTaskNotifyWait+0xa0>)
    6a5e:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    6a60:	b124      	cbz	r4, 6a6c <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    6a62:	4b18      	ldr	r3, [pc, #96]	; (6ac4 <xTaskNotifyWait+0xa4>)
    6a64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    6a6a:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    6a6c:	4b15      	ldr	r3, [pc, #84]	; (6ac4 <xTaskNotifyWait+0xa4>)
    6a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    6a76:	b2db      	uxtb	r3, r3
    6a78:	2b02      	cmp	r3, #2
    6a7a:	d017      	beq.n	6aac <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    6a7c:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    6a7e:	4b11      	ldr	r3, [pc, #68]	; (6ac4 <xTaskNotifyWait+0xa4>)
    6a80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6a84:	2200      	movs	r2, #0
    6a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    6a8a:	4b0f      	ldr	r3, [pc, #60]	; (6ac8 <xTaskNotifyWait+0xa8>)
    6a8c:	4798      	blx	r3
}
    6a8e:	4620      	mov	r0, r4
    6a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    6a92:	4611      	mov	r1, r2
    6a94:	4630      	mov	r0, r6
    6a96:	4b0d      	ldr	r3, [pc, #52]	; (6acc <xTaskNotifyWait+0xac>)
    6a98:	4798      	blx	r3
				portYIELD_WITHIN_API();
    6a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6a9e:	4b0c      	ldr	r3, [pc, #48]	; (6ad0 <xTaskNotifyWait+0xb0>)
    6aa0:	601a      	str	r2, [r3, #0]
    6aa2:	f3bf 8f4f 	dsb	sy
    6aa6:	f3bf 8f6f 	isb	sy
    6aaa:	e7d5      	b.n	6a58 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    6aac:	4b05      	ldr	r3, [pc, #20]	; (6ac4 <xTaskNotifyWait+0xa4>)
    6aae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    6ab2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    6ab4:	ea23 0505 	bic.w	r5, r3, r5
    6ab8:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    6aba:	2401      	movs	r4, #1
    6abc:	e7df      	b.n	6a7e <xTaskNotifyWait+0x5e>
    6abe:	bf00      	nop
    6ac0:	000051e5 	.word	0x000051e5
    6ac4:	2000334c 	.word	0x2000334c
    6ac8:	00005229 	.word	0x00005229
    6acc:	00005fe9 	.word	0x00005fe9
    6ad0:	e000ed04 	.word	0xe000ed04

00006ad4 <xTaskGenericNotifyFromISR>:
{
    6ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ad8:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    6ada:	b310      	cbz	r0, 6b22 <xTaskGenericNotifyFromISR+0x4e>
    6adc:	4604      	mov	r4, r0
    6ade:	4699      	mov	r9, r3
    6ae0:	4617      	mov	r7, r2
    6ae2:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    6ae4:	4b3e      	ldr	r3, [pc, #248]	; (6be0 <xTaskGenericNotifyFromISR+0x10c>)
    6ae6:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    6ae8:	f3ef 8511 	mrs	r5, BASEPRI
    6aec:	f04f 0380 	mov.w	r3, #128	; 0x80
    6af0:	f383 8811 	msr	BASEPRI, r3
    6af4:	f3bf 8f6f 	isb	sy
    6af8:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    6afc:	f1b9 0f00 	cmp.w	r9, #0
    6b00:	d002      	beq.n	6b08 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    6b02:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6b04:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    6b08:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    6b0c:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    6b0e:	2202      	movs	r2, #2
    6b10:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    6b14:	1e7a      	subs	r2, r7, #1
    6b16:	2a03      	cmp	r2, #3
    6b18:	d810      	bhi.n	6b3c <xTaskGenericNotifyFromISR+0x68>
    6b1a:	e8df f002 	tbb	[pc, r2]
    6b1e:	1c0b      	.short	0x1c0b
    6b20:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    6b22:	f04f 0380 	mov.w	r3, #128	; 0x80
    6b26:	f383 8811 	msr	BASEPRI, r3
    6b2a:	f3bf 8f6f 	isb	sy
    6b2e:	f3bf 8f4f 	dsb	sy
    6b32:	e7fe      	b.n	6b32 <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    6b34:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    6b36:	ea42 0208 	orr.w	r2, r2, r8
    6b3a:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    6b3c:	2b01      	cmp	r3, #1
    6b3e:	d147      	bne.n	6bd0 <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    6b40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6b42:	b1a3      	cbz	r3, 6b6e <xTaskGenericNotifyFromISR+0x9a>
    6b44:	f04f 0380 	mov.w	r3, #128	; 0x80
    6b48:	f383 8811 	msr	BASEPRI, r3
    6b4c:	f3bf 8f6f 	isb	sy
    6b50:	f3bf 8f4f 	dsb	sy
    6b54:	e7fe      	b.n	6b54 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    6b56:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    6b58:	3201      	adds	r2, #1
    6b5a:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    6b5c:	e7ee      	b.n	6b3c <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    6b5e:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    6b62:	e7eb      	b.n	6b3c <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    6b64:	2b02      	cmp	r3, #2
    6b66:	d031      	beq.n	6bcc <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    6b68:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    6b6c:	e7e6      	b.n	6b3c <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    6b6e:	4b1d      	ldr	r3, [pc, #116]	; (6be4 <xTaskGenericNotifyFromISR+0x110>)
    6b70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    6b74:	b9fb      	cbnz	r3, 6bb6 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    6b76:	1d27      	adds	r7, r4, #4
    6b78:	4638      	mov	r0, r7
    6b7a:	4b1b      	ldr	r3, [pc, #108]	; (6be8 <xTaskGenericNotifyFromISR+0x114>)
    6b7c:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    6b7e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6b80:	4b18      	ldr	r3, [pc, #96]	; (6be4 <xTaskGenericNotifyFromISR+0x110>)
    6b82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    6b86:	4298      	cmp	r0, r3
    6b88:	bf84      	itt	hi
    6b8a:	4b16      	ldrhi	r3, [pc, #88]	; (6be4 <xTaskGenericNotifyFromISR+0x110>)
    6b8c:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    6b90:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6b94:	4639      	mov	r1, r7
    6b96:	4b15      	ldr	r3, [pc, #84]	; (6bec <xTaskGenericNotifyFromISR+0x118>)
    6b98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6b9c:	4b14      	ldr	r3, [pc, #80]	; (6bf0 <xTaskGenericNotifyFromISR+0x11c>)
    6b9e:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    6ba0:	4b10      	ldr	r3, [pc, #64]	; (6be4 <xTaskGenericNotifyFromISR+0x110>)
    6ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    6ba6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6baa:	429a      	cmp	r2, r3
    6bac:	d915      	bls.n	6bda <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    6bae:	b146      	cbz	r6, 6bc2 <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    6bb0:	2001      	movs	r0, #1
    6bb2:	6030      	str	r0, [r6, #0]
    6bb4:	e00d      	b.n	6bd2 <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    6bb6:	f104 0118 	add.w	r1, r4, #24
    6bba:	480e      	ldr	r0, [pc, #56]	; (6bf4 <xTaskGenericNotifyFromISR+0x120>)
    6bbc:	4b0c      	ldr	r3, [pc, #48]	; (6bf0 <xTaskGenericNotifyFromISR+0x11c>)
    6bbe:	4798      	blx	r3
    6bc0:	e7ee      	b.n	6ba0 <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    6bc2:	2001      	movs	r0, #1
    6bc4:	4b07      	ldr	r3, [pc, #28]	; (6be4 <xTaskGenericNotifyFromISR+0x110>)
    6bc6:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    6bca:	e002      	b.n	6bd2 <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    6bcc:	2000      	movs	r0, #0
    6bce:	e000      	b.n	6bd2 <xTaskGenericNotifyFromISR+0xfe>
    6bd0:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    6bd2:	f385 8811 	msr	BASEPRI, r5
}
    6bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6bda:	2001      	movs	r0, #1
    6bdc:	e7f9      	b.n	6bd2 <xTaskGenericNotifyFromISR+0xfe>
    6bde:	bf00      	nop
    6be0:	0000543d 	.word	0x0000543d
    6be4:	2000334c 	.word	0x2000334c
    6be8:	000050ed 	.word	0x000050ed
    6bec:	20003374 	.word	0x20003374
    6bf0:	000050a1 	.word	0x000050a1
    6bf4:	20003360 	.word	0x20003360

00006bf8 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    6bf8:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    6bfa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    6bfc:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    6bfe:	4291      	cmp	r1, r2
    6c00:	d80c      	bhi.n	6c1c <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    6c02:	1ad2      	subs	r2, r2, r3
    6c04:	6983      	ldr	r3, [r0, #24]
    6c06:	429a      	cmp	r2, r3
    6c08:	d301      	bcc.n	6c0e <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    6c0a:	2001      	movs	r0, #1
    6c0c:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    6c0e:	1d01      	adds	r1, r0, #4
    6c10:	4b09      	ldr	r3, [pc, #36]	; (6c38 <prvInsertTimerInActiveList+0x40>)
    6c12:	6818      	ldr	r0, [r3, #0]
    6c14:	4b09      	ldr	r3, [pc, #36]	; (6c3c <prvInsertTimerInActiveList+0x44>)
    6c16:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    6c18:	2000      	movs	r0, #0
    6c1a:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    6c1c:	429a      	cmp	r2, r3
    6c1e:	d201      	bcs.n	6c24 <prvInsertTimerInActiveList+0x2c>
    6c20:	4299      	cmp	r1, r3
    6c22:	d206      	bcs.n	6c32 <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    6c24:	1d01      	adds	r1, r0, #4
    6c26:	4b04      	ldr	r3, [pc, #16]	; (6c38 <prvInsertTimerInActiveList+0x40>)
    6c28:	6858      	ldr	r0, [r3, #4]
    6c2a:	4b04      	ldr	r3, [pc, #16]	; (6c3c <prvInsertTimerInActiveList+0x44>)
    6c2c:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    6c2e:	2000      	movs	r0, #0
    6c30:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    6c32:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    6c34:	bd08      	pop	{r3, pc}
    6c36:	bf00      	nop
    6c38:	20003438 	.word	0x20003438
    6c3c:	000050b9 	.word	0x000050b9

00006c40 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    6c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    6c42:	4b0d      	ldr	r3, [pc, #52]	; (6c78 <prvCheckForValidListAndQueue+0x38>)
    6c44:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    6c46:	4b0d      	ldr	r3, [pc, #52]	; (6c7c <prvCheckForValidListAndQueue+0x3c>)
    6c48:	689b      	ldr	r3, [r3, #8]
    6c4a:	b113      	cbz	r3, 6c52 <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    6c4c:	4b0c      	ldr	r3, [pc, #48]	; (6c80 <prvCheckForValidListAndQueue+0x40>)
    6c4e:	4798      	blx	r3
    6c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    6c52:	4c0a      	ldr	r4, [pc, #40]	; (6c7c <prvCheckForValidListAndQueue+0x3c>)
    6c54:	f104 060c 	add.w	r6, r4, #12
    6c58:	4630      	mov	r0, r6
    6c5a:	4f0a      	ldr	r7, [pc, #40]	; (6c84 <prvCheckForValidListAndQueue+0x44>)
    6c5c:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    6c5e:	f104 0520 	add.w	r5, r4, #32
    6c62:	4628      	mov	r0, r5
    6c64:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    6c66:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    6c68:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    6c6a:	2200      	movs	r2, #0
    6c6c:	210c      	movs	r1, #12
    6c6e:	2014      	movs	r0, #20
    6c70:	4b05      	ldr	r3, [pc, #20]	; (6c88 <prvCheckForValidListAndQueue+0x48>)
    6c72:	4798      	blx	r3
    6c74:	60a0      	str	r0, [r4, #8]
    6c76:	e7e9      	b.n	6c4c <prvCheckForValidListAndQueue+0xc>
    6c78:	000051e5 	.word	0x000051e5
    6c7c:	20003438 	.word	0x20003438
    6c80:	00005229 	.word	0x00005229
    6c84:	00005085 	.word	0x00005085
    6c88:	00005839 	.word	0x00005839

00006c8c <xTimerCreateTimerTask>:
{
    6c8c:	b510      	push	{r4, lr}
    6c8e:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    6c90:	4b0d      	ldr	r3, [pc, #52]	; (6cc8 <xTimerCreateTimerTask+0x3c>)
    6c92:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    6c94:	4b0d      	ldr	r3, [pc, #52]	; (6ccc <xTimerCreateTimerTask+0x40>)
    6c96:	689b      	ldr	r3, [r3, #8]
    6c98:	b163      	cbz	r3, 6cb4 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    6c9a:	4b0d      	ldr	r3, [pc, #52]	; (6cd0 <xTimerCreateTimerTask+0x44>)
    6c9c:	9301      	str	r3, [sp, #4]
    6c9e:	2303      	movs	r3, #3
    6ca0:	9300      	str	r3, [sp, #0]
    6ca2:	2300      	movs	r3, #0
    6ca4:	2280      	movs	r2, #128	; 0x80
    6ca6:	490b      	ldr	r1, [pc, #44]	; (6cd4 <xTimerCreateTimerTask+0x48>)
    6ca8:	480b      	ldr	r0, [pc, #44]	; (6cd8 <xTimerCreateTimerTask+0x4c>)
    6caa:	4c0c      	ldr	r4, [pc, #48]	; (6cdc <xTimerCreateTimerTask+0x50>)
    6cac:	47a0      	blx	r4
	configASSERT(xReturn);
    6cae:	b108      	cbz	r0, 6cb4 <xTimerCreateTimerTask+0x28>
}
    6cb0:	b002      	add	sp, #8
    6cb2:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    6cb4:	f04f 0380 	mov.w	r3, #128	; 0x80
    6cb8:	f383 8811 	msr	BASEPRI, r3
    6cbc:	f3bf 8f6f 	isb	sy
    6cc0:	f3bf 8f4f 	dsb	sy
    6cc4:	e7fe      	b.n	6cc4 <xTimerCreateTimerTask+0x38>
    6cc6:	bf00      	nop
    6cc8:	00006c41 	.word	0x00006c41
    6ccc:	20003438 	.word	0x20003438
    6cd0:	2000346c 	.word	0x2000346c
    6cd4:	00009314 	.word	0x00009314
    6cd8:	00006e4d 	.word	0x00006e4d
    6cdc:	00006069 	.word	0x00006069

00006ce0 <xTimerCreate>:
{
    6ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ce4:	4680      	mov	r8, r0
    6ce6:	460d      	mov	r5, r1
    6ce8:	4617      	mov	r7, r2
    6cea:	461e      	mov	r6, r3
	pxNewTimer = (Timer_t *)pvPortMalloc(sizeof(Timer_t));
    6cec:	202c      	movs	r0, #44	; 0x2c
    6cee:	4b0e      	ldr	r3, [pc, #56]	; (6d28 <xTimerCreate+0x48>)
    6cf0:	4798      	blx	r3
	if (pxNewTimer != NULL) {
    6cf2:	4604      	mov	r4, r0
    6cf4:	b1a8      	cbz	r0, 6d22 <xTimerCreate+0x42>
	configASSERT((xTimerPeriodInTicks > 0));
    6cf6:	b945      	cbnz	r5, 6d0a <xTimerCreate+0x2a>
    6cf8:	f04f 0380 	mov.w	r3, #128	; 0x80
    6cfc:	f383 8811 	msr	BASEPRI, r3
    6d00:	f3bf 8f6f 	isb	sy
    6d04:	f3bf 8f4f 	dsb	sy
    6d08:	e7fe      	b.n	6d08 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
    6d0a:	4b08      	ldr	r3, [pc, #32]	; (6d2c <xTimerCreate+0x4c>)
    6d0c:	4798      	blx	r3
		pxNewTimer->pcTimerName         = pcTimerName;
    6d0e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    6d12:	61a5      	str	r5, [r4, #24]
		pxNewTimer->uxAutoReload        = uxAutoReload;
    6d14:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pvTimerID           = pvTimerID;
    6d16:	6226      	str	r6, [r4, #32]
		pxNewTimer->pxCallbackFunction  = pxCallbackFunction;
    6d18:	9b06      	ldr	r3, [sp, #24]
    6d1a:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem(&(pxNewTimer->xTimerListItem));
    6d1c:	1d20      	adds	r0, r4, #4
    6d1e:	4b04      	ldr	r3, [pc, #16]	; (6d30 <xTimerCreate+0x50>)
    6d20:	4798      	blx	r3
}
    6d22:	4620      	mov	r0, r4
    6d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d28:	00005495 	.word	0x00005495
    6d2c:	00006c41 	.word	0x00006c41
    6d30:	0000509b 	.word	0x0000509b

00006d34 <xTimerGenericCommand>:
	configASSERT(xTimer);
    6d34:	b1d8      	cbz	r0, 6d6e <xTimerGenericCommand+0x3a>
{
    6d36:	b530      	push	{r4, r5, lr}
    6d38:	b085      	sub	sp, #20
    6d3a:	4615      	mov	r5, r2
    6d3c:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    6d3e:	4a14      	ldr	r2, [pc, #80]	; (6d90 <xTimerGenericCommand+0x5c>)
    6d40:	6890      	ldr	r0, [r2, #8]
    6d42:	b310      	cbz	r0, 6d8a <xTimerGenericCommand+0x56>
    6d44:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    6d46:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    6d48:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    6d4a:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    6d4c:	2905      	cmp	r1, #5
    6d4e:	dc17      	bgt.n	6d80 <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    6d50:	4b10      	ldr	r3, [pc, #64]	; (6d94 <xTimerGenericCommand+0x60>)
    6d52:	4798      	blx	r3
    6d54:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    6d56:	f04f 0300 	mov.w	r3, #0
    6d5a:	bf0c      	ite	eq
    6d5c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    6d5e:	461a      	movne	r2, r3
    6d60:	a901      	add	r1, sp, #4
    6d62:	480b      	ldr	r0, [pc, #44]	; (6d90 <xTimerGenericCommand+0x5c>)
    6d64:	6880      	ldr	r0, [r0, #8]
    6d66:	4c0c      	ldr	r4, [pc, #48]	; (6d98 <xTimerGenericCommand+0x64>)
    6d68:	47a0      	blx	r4
}
    6d6a:	b005      	add	sp, #20
    6d6c:	bd30      	pop	{r4, r5, pc}
    6d6e:	f04f 0380 	mov.w	r3, #128	; 0x80
    6d72:	f383 8811 	msr	BASEPRI, r3
    6d76:	f3bf 8f6f 	isb	sy
    6d7a:	f3bf 8f4f 	dsb	sy
    6d7e:	e7fe      	b.n	6d7e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    6d80:	2300      	movs	r3, #0
    6d82:	a901      	add	r1, sp, #4
    6d84:	4c05      	ldr	r4, [pc, #20]	; (6d9c <xTimerGenericCommand+0x68>)
    6d86:	47a0      	blx	r4
    6d88:	e7ef      	b.n	6d6a <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    6d8a:	2000      	movs	r0, #0
	return xReturn;
    6d8c:	e7ed      	b.n	6d6a <xTimerGenericCommand+0x36>
    6d8e:	bf00      	nop
    6d90:	20003438 	.word	0x20003438
    6d94:	000067f5 	.word	0x000067f5
    6d98:	00005891 	.word	0x00005891
    6d9c:	00005a99 	.word	0x00005a99

00006da0 <prvSampleTimeNow>:
{
    6da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6da4:	b082      	sub	sp, #8
    6da6:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    6da8:	4b23      	ldr	r3, [pc, #140]	; (6e38 <prvSampleTimeNow+0x98>)
    6daa:	4798      	blx	r3
    6dac:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    6dae:	4b23      	ldr	r3, [pc, #140]	; (6e3c <prvSampleTimeNow+0x9c>)
    6db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6db2:	4298      	cmp	r0, r3
    6db4:	d319      	bcc.n	6dea <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    6db6:	2300      	movs	r3, #0
    6db8:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    6dbc:	4b1f      	ldr	r3, [pc, #124]	; (6e3c <prvSampleTimeNow+0x9c>)
    6dbe:	639f      	str	r7, [r3, #56]	; 0x38
}
    6dc0:	4638      	mov	r0, r7
    6dc2:	b002      	add	sp, #8
    6dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6dc8:	2100      	movs	r1, #0
    6dca:	9100      	str	r1, [sp, #0]
    6dcc:	460b      	mov	r3, r1
    6dce:	4652      	mov	r2, sl
    6dd0:	4620      	mov	r0, r4
    6dd2:	4c1b      	ldr	r4, [pc, #108]	; (6e40 <prvSampleTimeNow+0xa0>)
    6dd4:	47a0      	blx	r4
				configASSERT(xResult);
    6dd6:	b950      	cbnz	r0, 6dee <prvSampleTimeNow+0x4e>
    6dd8:	f04f 0380 	mov.w	r3, #128	; 0x80
    6ddc:	f383 8811 	msr	BASEPRI, r3
    6de0:	f3bf 8f6f 	isb	sy
    6de4:	f3bf 8f4f 	dsb	sy
    6de8:	e7fe      	b.n	6de8 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    6dea:	4d14      	ldr	r5, [pc, #80]	; (6e3c <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6dec:	4e15      	ldr	r6, [pc, #84]	; (6e44 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    6dee:	686b      	ldr	r3, [r5, #4]
    6df0:	681a      	ldr	r2, [r3, #0]
    6df2:	b1c2      	cbz	r2, 6e26 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6df4:	68db      	ldr	r3, [r3, #12]
    6df6:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6dfa:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    6dfc:	f104 0904 	add.w	r9, r4, #4
    6e00:	4648      	mov	r0, r9
    6e02:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6e04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6e06:	4620      	mov	r0, r4
    6e08:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6e0a:	69e3      	ldr	r3, [r4, #28]
    6e0c:	2b01      	cmp	r3, #1
    6e0e:	d1ee      	bne.n	6dee <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    6e10:	69a3      	ldr	r3, [r4, #24]
    6e12:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    6e14:	459a      	cmp	sl, r3
    6e16:	d2d7      	bcs.n	6dc8 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    6e18:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    6e1a:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    6e1c:	4649      	mov	r1, r9
    6e1e:	6868      	ldr	r0, [r5, #4]
    6e20:	4b09      	ldr	r3, [pc, #36]	; (6e48 <prvSampleTimeNow+0xa8>)
    6e22:	4798      	blx	r3
    6e24:	e7e3      	b.n	6dee <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    6e26:	4a05      	ldr	r2, [pc, #20]	; (6e3c <prvSampleTimeNow+0x9c>)
    6e28:	6811      	ldr	r1, [r2, #0]
    6e2a:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    6e2c:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    6e2e:	2301      	movs	r3, #1
    6e30:	f8c8 3000 	str.w	r3, [r8]
    6e34:	e7c2      	b.n	6dbc <prvSampleTimeNow+0x1c>
    6e36:	bf00      	nop
    6e38:	000062e1 	.word	0x000062e1
    6e3c:	20003438 	.word	0x20003438
    6e40:	00006d35 	.word	0x00006d35
    6e44:	000050ed 	.word	0x000050ed
    6e48:	000050b9 	.word	0x000050b9

00006e4c <prvTimerTask>:
{
    6e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e50:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    6e52:	4c65      	ldr	r4, [pc, #404]	; (6fe8 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    6e54:	4f65      	ldr	r7, [pc, #404]	; (6fec <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    6e56:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 700c <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    6e5a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 7010 <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    6e5e:	6863      	ldr	r3, [r4, #4]
    6e60:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    6e62:	b172      	cbz	r2, 6e82 <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    6e64:	68db      	ldr	r3, [r3, #12]
    6e66:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    6e68:	4b61      	ldr	r3, [pc, #388]	; (6ff0 <prvTimerTask+0x1a4>)
    6e6a:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6e6c:	a803      	add	r0, sp, #12
    6e6e:	4b61      	ldr	r3, [pc, #388]	; (6ff4 <prvTimerTask+0x1a8>)
    6e70:	4798      	blx	r3
    6e72:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    6e74:	9b03      	ldr	r3, [sp, #12]
    6e76:	2b00      	cmp	r3, #0
    6e78:	d179      	bne.n	6f6e <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    6e7a:	42a8      	cmp	r0, r5
    6e7c:	d24a      	bcs.n	6f14 <prvTimerTask+0xc8>
    6e7e:	2200      	movs	r2, #0
    6e80:	e00e      	b.n	6ea0 <prvTimerTask+0x54>
	vTaskSuspendAll();
    6e82:	4b5b      	ldr	r3, [pc, #364]	; (6ff0 <prvTimerTask+0x1a4>)
    6e84:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6e86:	a803      	add	r0, sp, #12
    6e88:	4b5a      	ldr	r3, [pc, #360]	; (6ff4 <prvTimerTask+0x1a8>)
    6e8a:	4798      	blx	r3
    6e8c:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    6e8e:	9b03      	ldr	r3, [sp, #12]
    6e90:	2b00      	cmp	r3, #0
    6e92:	d16c      	bne.n	6f6e <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    6e94:	6823      	ldr	r3, [r4, #0]
    6e96:	681a      	ldr	r2, [r3, #0]
    6e98:	fab2 f282 	clz	r2, r2
    6e9c:	0952      	lsrs	r2, r2, #5
    6e9e:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    6ea0:	1ba9      	subs	r1, r5, r6
    6ea2:	68a0      	ldr	r0, [r4, #8]
    6ea4:	4b54      	ldr	r3, [pc, #336]	; (6ff8 <prvTimerTask+0x1ac>)
    6ea6:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    6ea8:	47b8      	blx	r7
    6eaa:	b938      	cbnz	r0, 6ebc <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    6eac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6eb0:	f8c9 3000 	str.w	r3, [r9]
    6eb4:	f3bf 8f4f 	dsb	sy
    6eb8:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    6ebc:	4d4f      	ldr	r5, [pc, #316]	; (6ffc <prvTimerTask+0x1b0>)
    6ebe:	2200      	movs	r2, #0
    6ec0:	a903      	add	r1, sp, #12
    6ec2:	68a0      	ldr	r0, [r4, #8]
    6ec4:	47a8      	blx	r5
    6ec6:	2800      	cmp	r0, #0
    6ec8:	d0c9      	beq.n	6e5e <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    6eca:	9b03      	ldr	r3, [sp, #12]
    6ecc:	2b00      	cmp	r3, #0
    6ece:	dbf6      	blt.n	6ebe <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6ed0:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    6ed2:	6973      	ldr	r3, [r6, #20]
    6ed4:	b10b      	cbz	r3, 6eda <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    6ed6:	1d30      	adds	r0, r6, #4
    6ed8:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    6eda:	a802      	add	r0, sp, #8
    6edc:	4b45      	ldr	r3, [pc, #276]	; (6ff4 <prvTimerTask+0x1a8>)
    6ede:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    6ee0:	9b03      	ldr	r3, [sp, #12]
    6ee2:	2b09      	cmp	r3, #9
    6ee4:	d8eb      	bhi.n	6ebe <prvTimerTask+0x72>
    6ee6:	a201      	add	r2, pc, #4	; (adr r2, 6eec <prvTimerTask+0xa0>)
    6ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    6eec:	00006f73 	.word	0x00006f73
    6ef0:	00006f73 	.word	0x00006f73
    6ef4:	00006f73 	.word	0x00006f73
    6ef8:	00006ebf 	.word	0x00006ebf
    6efc:	00006fbb 	.word	0x00006fbb
    6f00:	00006fe1 	.word	0x00006fe1
    6f04:	00006f73 	.word	0x00006f73
    6f08:	00006f73 	.word	0x00006f73
    6f0c:	00006ebf 	.word	0x00006ebf
    6f10:	00006fbb 	.word	0x00006fbb
				(void)xTaskResumeAll();
    6f14:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    6f16:	6863      	ldr	r3, [r4, #4]
    6f18:	68db      	ldr	r3, [r3, #12]
    6f1a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    6f1e:	f10a 0004 	add.w	r0, sl, #4
    6f22:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6f24:	f8da 301c 	ldr.w	r3, [sl, #28]
    6f28:	2b01      	cmp	r3, #1
    6f2a:	d004      	beq.n	6f36 <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6f2c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    6f30:	4650      	mov	r0, sl
    6f32:	4798      	blx	r3
    6f34:	e7c2      	b.n	6ebc <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    6f36:	f8da 1018 	ldr.w	r1, [sl, #24]
    6f3a:	462b      	mov	r3, r5
    6f3c:	4632      	mov	r2, r6
    6f3e:	4429      	add	r1, r5
    6f40:	4650      	mov	r0, sl
    6f42:	4e2f      	ldr	r6, [pc, #188]	; (7000 <prvTimerTask+0x1b4>)
    6f44:	47b0      	blx	r6
    6f46:	2800      	cmp	r0, #0
    6f48:	d0f0      	beq.n	6f2c <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    6f4a:	2100      	movs	r1, #0
    6f4c:	9100      	str	r1, [sp, #0]
    6f4e:	460b      	mov	r3, r1
    6f50:	462a      	mov	r2, r5
    6f52:	4650      	mov	r0, sl
    6f54:	4d2b      	ldr	r5, [pc, #172]	; (7004 <prvTimerTask+0x1b8>)
    6f56:	47a8      	blx	r5
			configASSERT(xResult);
    6f58:	2800      	cmp	r0, #0
    6f5a:	d1e7      	bne.n	6f2c <prvTimerTask+0xe0>
    6f5c:	f04f 0380 	mov.w	r3, #128	; 0x80
    6f60:	f383 8811 	msr	BASEPRI, r3
    6f64:	f3bf 8f6f 	isb	sy
    6f68:	f3bf 8f4f 	dsb	sy
    6f6c:	e7fe      	b.n	6f6c <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    6f6e:	47b8      	blx	r7
    6f70:	e7a4      	b.n	6ebc <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    6f72:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    6f74:	69b1      	ldr	r1, [r6, #24]
    6f76:	462b      	mov	r3, r5
    6f78:	4602      	mov	r2, r0
    6f7a:	4429      	add	r1, r5
    6f7c:	4630      	mov	r0, r6
    6f7e:	4d20      	ldr	r5, [pc, #128]	; (7000 <prvTimerTask+0x1b4>)
    6f80:	47a8      	blx	r5
    6f82:	2800      	cmp	r0, #0
    6f84:	d09a      	beq.n	6ebc <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    6f86:	6a73      	ldr	r3, [r6, #36]	; 0x24
    6f88:	4630      	mov	r0, r6
    6f8a:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    6f8c:	69f3      	ldr	r3, [r6, #28]
    6f8e:	2b01      	cmp	r3, #1
    6f90:	d194      	bne.n	6ebc <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    6f92:	69b2      	ldr	r2, [r6, #24]
    6f94:	2100      	movs	r1, #0
    6f96:	9100      	str	r1, [sp, #0]
    6f98:	460b      	mov	r3, r1
    6f9a:	9804      	ldr	r0, [sp, #16]
    6f9c:	4402      	add	r2, r0
    6f9e:	4630      	mov	r0, r6
    6fa0:	4d18      	ldr	r5, [pc, #96]	; (7004 <prvTimerTask+0x1b8>)
    6fa2:	47a8      	blx	r5
						configASSERT(xResult);
    6fa4:	2800      	cmp	r0, #0
    6fa6:	d189      	bne.n	6ebc <prvTimerTask+0x70>
    6fa8:	f04f 0380 	mov.w	r3, #128	; 0x80
    6fac:	f383 8811 	msr	BASEPRI, r3
    6fb0:	f3bf 8f6f 	isb	sy
    6fb4:	f3bf 8f4f 	dsb	sy
    6fb8:	e7fe      	b.n	6fb8 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    6fba:	9904      	ldr	r1, [sp, #16]
    6fbc:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    6fbe:	b131      	cbz	r1, 6fce <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    6fc0:	4603      	mov	r3, r0
    6fc2:	4602      	mov	r2, r0
    6fc4:	4401      	add	r1, r0
    6fc6:	4630      	mov	r0, r6
    6fc8:	4d0d      	ldr	r5, [pc, #52]	; (7000 <prvTimerTask+0x1b4>)
    6fca:	47a8      	blx	r5
    6fcc:	e776      	b.n	6ebc <prvTimerTask+0x70>
    6fce:	f04f 0380 	mov.w	r3, #128	; 0x80
    6fd2:	f383 8811 	msr	BASEPRI, r3
    6fd6:	f3bf 8f6f 	isb	sy
    6fda:	f3bf 8f4f 	dsb	sy
    6fde:	e7fe      	b.n	6fde <prvTimerTask+0x192>
				vPortFree(pxTimer);
    6fe0:	4630      	mov	r0, r6
    6fe2:	4b09      	ldr	r3, [pc, #36]	; (7008 <prvTimerTask+0x1bc>)
    6fe4:	4798      	blx	r3
    6fe6:	e769      	b.n	6ebc <prvTimerTask+0x70>
    6fe8:	20003438 	.word	0x20003438
    6fec:	00006415 	.word	0x00006415
    6ff0:	000062cd 	.word	0x000062cd
    6ff4:	00006da1 	.word	0x00006da1
    6ff8:	00005f39 	.word	0x00005f39
    6ffc:	00005ba1 	.word	0x00005ba1
    7000:	00006bf9 	.word	0x00006bf9
    7004:	00006d35 	.word	0x00006d35
    7008:	00005569 	.word	0x00005569
    700c:	e000ed04 	.word	0xe000ed04
    7010:	000050ed 	.word	0x000050ed

00007014 <__libc_init_array>:
    7014:	b570      	push	{r4, r5, r6, lr}
    7016:	4e0d      	ldr	r6, [pc, #52]	; (704c <__libc_init_array+0x38>)
    7018:	4c0d      	ldr	r4, [pc, #52]	; (7050 <__libc_init_array+0x3c>)
    701a:	1ba4      	subs	r4, r4, r6
    701c:	10a4      	asrs	r4, r4, #2
    701e:	2500      	movs	r5, #0
    7020:	42a5      	cmp	r5, r4
    7022:	d109      	bne.n	7038 <__libc_init_array+0x24>
    7024:	4e0b      	ldr	r6, [pc, #44]	; (7054 <__libc_init_array+0x40>)
    7026:	4c0c      	ldr	r4, [pc, #48]	; (7058 <__libc_init_array+0x44>)
    7028:	f002 f9c2 	bl	93b0 <_init>
    702c:	1ba4      	subs	r4, r4, r6
    702e:	10a4      	asrs	r4, r4, #2
    7030:	2500      	movs	r5, #0
    7032:	42a5      	cmp	r5, r4
    7034:	d105      	bne.n	7042 <__libc_init_array+0x2e>
    7036:	bd70      	pop	{r4, r5, r6, pc}
    7038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    703c:	4798      	blx	r3
    703e:	3501      	adds	r5, #1
    7040:	e7ee      	b.n	7020 <__libc_init_array+0xc>
    7042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    7046:	4798      	blx	r3
    7048:	3501      	adds	r5, #1
    704a:	e7f2      	b.n	7032 <__libc_init_array+0x1e>
    704c:	000093bc 	.word	0x000093bc
    7050:	000093bc 	.word	0x000093bc
    7054:	000093bc 	.word	0x000093bc
    7058:	000093c0 	.word	0x000093c0

0000705c <memcmp>:
    705c:	b510      	push	{r4, lr}
    705e:	3901      	subs	r1, #1
    7060:	4402      	add	r2, r0
    7062:	4290      	cmp	r0, r2
    7064:	d101      	bne.n	706a <memcmp+0xe>
    7066:	2000      	movs	r0, #0
    7068:	bd10      	pop	{r4, pc}
    706a:	f810 3b01 	ldrb.w	r3, [r0], #1
    706e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    7072:	42a3      	cmp	r3, r4
    7074:	d0f5      	beq.n	7062 <memcmp+0x6>
    7076:	1b18      	subs	r0, r3, r4
    7078:	bd10      	pop	{r4, pc}

0000707a <memcpy>:
    707a:	b510      	push	{r4, lr}
    707c:	1e43      	subs	r3, r0, #1
    707e:	440a      	add	r2, r1
    7080:	4291      	cmp	r1, r2
    7082:	d100      	bne.n	7086 <memcpy+0xc>
    7084:	bd10      	pop	{r4, pc}
    7086:	f811 4b01 	ldrb.w	r4, [r1], #1
    708a:	f803 4f01 	strb.w	r4, [r3, #1]!
    708e:	e7f7      	b.n	7080 <memcpy+0x6>

00007090 <memmove>:
    7090:	4288      	cmp	r0, r1
    7092:	b510      	push	{r4, lr}
    7094:	eb01 0302 	add.w	r3, r1, r2
    7098:	d803      	bhi.n	70a2 <memmove+0x12>
    709a:	1e42      	subs	r2, r0, #1
    709c:	4299      	cmp	r1, r3
    709e:	d10c      	bne.n	70ba <memmove+0x2a>
    70a0:	bd10      	pop	{r4, pc}
    70a2:	4298      	cmp	r0, r3
    70a4:	d2f9      	bcs.n	709a <memmove+0xa>
    70a6:	1881      	adds	r1, r0, r2
    70a8:	1ad2      	subs	r2, r2, r3
    70aa:	42d3      	cmn	r3, r2
    70ac:	d100      	bne.n	70b0 <memmove+0x20>
    70ae:	bd10      	pop	{r4, pc}
    70b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    70b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
    70b8:	e7f7      	b.n	70aa <memmove+0x1a>
    70ba:	f811 4b01 	ldrb.w	r4, [r1], #1
    70be:	f802 4f01 	strb.w	r4, [r2, #1]!
    70c2:	e7eb      	b.n	709c <memmove+0xc>

000070c4 <memset>:
    70c4:	4402      	add	r2, r0
    70c6:	4603      	mov	r3, r0
    70c8:	4293      	cmp	r3, r2
    70ca:	d100      	bne.n	70ce <memset+0xa>
    70cc:	4770      	bx	lr
    70ce:	f803 1b01 	strb.w	r1, [r3], #1
    70d2:	e7f9      	b.n	70c8 <memset+0x4>

000070d4 <_free_r>:
    70d4:	b538      	push	{r3, r4, r5, lr}
    70d6:	4605      	mov	r5, r0
    70d8:	2900      	cmp	r1, #0
    70da:	d045      	beq.n	7168 <_free_r+0x94>
    70dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    70e0:	1f0c      	subs	r4, r1, #4
    70e2:	2b00      	cmp	r3, #0
    70e4:	bfb8      	it	lt
    70e6:	18e4      	addlt	r4, r4, r3
    70e8:	f000 f90b 	bl	7302 <__malloc_lock>
    70ec:	4a1f      	ldr	r2, [pc, #124]	; (716c <_free_r+0x98>)
    70ee:	6813      	ldr	r3, [r2, #0]
    70f0:	4610      	mov	r0, r2
    70f2:	b933      	cbnz	r3, 7102 <_free_r+0x2e>
    70f4:	6063      	str	r3, [r4, #4]
    70f6:	6014      	str	r4, [r2, #0]
    70f8:	4628      	mov	r0, r5
    70fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    70fe:	f000 b901 	b.w	7304 <__malloc_unlock>
    7102:	42a3      	cmp	r3, r4
    7104:	d90c      	bls.n	7120 <_free_r+0x4c>
    7106:	6821      	ldr	r1, [r4, #0]
    7108:	1862      	adds	r2, r4, r1
    710a:	4293      	cmp	r3, r2
    710c:	bf04      	itt	eq
    710e:	681a      	ldreq	r2, [r3, #0]
    7110:	685b      	ldreq	r3, [r3, #4]
    7112:	6063      	str	r3, [r4, #4]
    7114:	bf04      	itt	eq
    7116:	1852      	addeq	r2, r2, r1
    7118:	6022      	streq	r2, [r4, #0]
    711a:	6004      	str	r4, [r0, #0]
    711c:	e7ec      	b.n	70f8 <_free_r+0x24>
    711e:	4613      	mov	r3, r2
    7120:	685a      	ldr	r2, [r3, #4]
    7122:	b10a      	cbz	r2, 7128 <_free_r+0x54>
    7124:	42a2      	cmp	r2, r4
    7126:	d9fa      	bls.n	711e <_free_r+0x4a>
    7128:	6819      	ldr	r1, [r3, #0]
    712a:	1858      	adds	r0, r3, r1
    712c:	42a0      	cmp	r0, r4
    712e:	d10b      	bne.n	7148 <_free_r+0x74>
    7130:	6820      	ldr	r0, [r4, #0]
    7132:	4401      	add	r1, r0
    7134:	1858      	adds	r0, r3, r1
    7136:	4282      	cmp	r2, r0
    7138:	6019      	str	r1, [r3, #0]
    713a:	d1dd      	bne.n	70f8 <_free_r+0x24>
    713c:	6810      	ldr	r0, [r2, #0]
    713e:	6852      	ldr	r2, [r2, #4]
    7140:	605a      	str	r2, [r3, #4]
    7142:	4401      	add	r1, r0
    7144:	6019      	str	r1, [r3, #0]
    7146:	e7d7      	b.n	70f8 <_free_r+0x24>
    7148:	d902      	bls.n	7150 <_free_r+0x7c>
    714a:	230c      	movs	r3, #12
    714c:	602b      	str	r3, [r5, #0]
    714e:	e7d3      	b.n	70f8 <_free_r+0x24>
    7150:	6820      	ldr	r0, [r4, #0]
    7152:	1821      	adds	r1, r4, r0
    7154:	428a      	cmp	r2, r1
    7156:	bf04      	itt	eq
    7158:	6811      	ldreq	r1, [r2, #0]
    715a:	6852      	ldreq	r2, [r2, #4]
    715c:	6062      	str	r2, [r4, #4]
    715e:	bf04      	itt	eq
    7160:	1809      	addeq	r1, r1, r0
    7162:	6021      	streq	r1, [r4, #0]
    7164:	605c      	str	r4, [r3, #4]
    7166:	e7c7      	b.n	70f8 <_free_r+0x24>
    7168:	bd38      	pop	{r3, r4, r5, pc}
    716a:	bf00      	nop
    716c:	20003474 	.word	0x20003474

00007170 <_malloc_r>:
    7170:	b570      	push	{r4, r5, r6, lr}
    7172:	1ccd      	adds	r5, r1, #3
    7174:	f025 0503 	bic.w	r5, r5, #3
    7178:	3508      	adds	r5, #8
    717a:	2d0c      	cmp	r5, #12
    717c:	bf38      	it	cc
    717e:	250c      	movcc	r5, #12
    7180:	2d00      	cmp	r5, #0
    7182:	4606      	mov	r6, r0
    7184:	db01      	blt.n	718a <_malloc_r+0x1a>
    7186:	42a9      	cmp	r1, r5
    7188:	d903      	bls.n	7192 <_malloc_r+0x22>
    718a:	230c      	movs	r3, #12
    718c:	6033      	str	r3, [r6, #0]
    718e:	2000      	movs	r0, #0
    7190:	bd70      	pop	{r4, r5, r6, pc}
    7192:	f000 f8b6 	bl	7302 <__malloc_lock>
    7196:	4a23      	ldr	r2, [pc, #140]	; (7224 <_malloc_r+0xb4>)
    7198:	6814      	ldr	r4, [r2, #0]
    719a:	4621      	mov	r1, r4
    719c:	b991      	cbnz	r1, 71c4 <_malloc_r+0x54>
    719e:	4c22      	ldr	r4, [pc, #136]	; (7228 <_malloc_r+0xb8>)
    71a0:	6823      	ldr	r3, [r4, #0]
    71a2:	b91b      	cbnz	r3, 71ac <_malloc_r+0x3c>
    71a4:	4630      	mov	r0, r6
    71a6:	f000 f841 	bl	722c <_sbrk_r>
    71aa:	6020      	str	r0, [r4, #0]
    71ac:	4629      	mov	r1, r5
    71ae:	4630      	mov	r0, r6
    71b0:	f000 f83c 	bl	722c <_sbrk_r>
    71b4:	1c43      	adds	r3, r0, #1
    71b6:	d126      	bne.n	7206 <_malloc_r+0x96>
    71b8:	230c      	movs	r3, #12
    71ba:	6033      	str	r3, [r6, #0]
    71bc:	4630      	mov	r0, r6
    71be:	f000 f8a1 	bl	7304 <__malloc_unlock>
    71c2:	e7e4      	b.n	718e <_malloc_r+0x1e>
    71c4:	680b      	ldr	r3, [r1, #0]
    71c6:	1b5b      	subs	r3, r3, r5
    71c8:	d41a      	bmi.n	7200 <_malloc_r+0x90>
    71ca:	2b0b      	cmp	r3, #11
    71cc:	d90f      	bls.n	71ee <_malloc_r+0x7e>
    71ce:	600b      	str	r3, [r1, #0]
    71d0:	50cd      	str	r5, [r1, r3]
    71d2:	18cc      	adds	r4, r1, r3
    71d4:	4630      	mov	r0, r6
    71d6:	f000 f895 	bl	7304 <__malloc_unlock>
    71da:	f104 000b 	add.w	r0, r4, #11
    71de:	1d23      	adds	r3, r4, #4
    71e0:	f020 0007 	bic.w	r0, r0, #7
    71e4:	1ac3      	subs	r3, r0, r3
    71e6:	d01b      	beq.n	7220 <_malloc_r+0xb0>
    71e8:	425a      	negs	r2, r3
    71ea:	50e2      	str	r2, [r4, r3]
    71ec:	bd70      	pop	{r4, r5, r6, pc}
    71ee:	428c      	cmp	r4, r1
    71f0:	bf0d      	iteet	eq
    71f2:	6863      	ldreq	r3, [r4, #4]
    71f4:	684b      	ldrne	r3, [r1, #4]
    71f6:	6063      	strne	r3, [r4, #4]
    71f8:	6013      	streq	r3, [r2, #0]
    71fa:	bf18      	it	ne
    71fc:	460c      	movne	r4, r1
    71fe:	e7e9      	b.n	71d4 <_malloc_r+0x64>
    7200:	460c      	mov	r4, r1
    7202:	6849      	ldr	r1, [r1, #4]
    7204:	e7ca      	b.n	719c <_malloc_r+0x2c>
    7206:	1cc4      	adds	r4, r0, #3
    7208:	f024 0403 	bic.w	r4, r4, #3
    720c:	42a0      	cmp	r0, r4
    720e:	d005      	beq.n	721c <_malloc_r+0xac>
    7210:	1a21      	subs	r1, r4, r0
    7212:	4630      	mov	r0, r6
    7214:	f000 f80a 	bl	722c <_sbrk_r>
    7218:	3001      	adds	r0, #1
    721a:	d0cd      	beq.n	71b8 <_malloc_r+0x48>
    721c:	6025      	str	r5, [r4, #0]
    721e:	e7d9      	b.n	71d4 <_malloc_r+0x64>
    7220:	bd70      	pop	{r4, r5, r6, pc}
    7222:	bf00      	nop
    7224:	20003474 	.word	0x20003474
    7228:	20003478 	.word	0x20003478

0000722c <_sbrk_r>:
    722c:	b538      	push	{r3, r4, r5, lr}
    722e:	4c06      	ldr	r4, [pc, #24]	; (7248 <_sbrk_r+0x1c>)
    7230:	2300      	movs	r3, #0
    7232:	4605      	mov	r5, r0
    7234:	4608      	mov	r0, r1
    7236:	6023      	str	r3, [r4, #0]
    7238:	f7fc fb0e 	bl	3858 <_sbrk>
    723c:	1c43      	adds	r3, r0, #1
    723e:	d102      	bne.n	7246 <_sbrk_r+0x1a>
    7240:	6823      	ldr	r3, [r4, #0]
    7242:	b103      	cbz	r3, 7246 <_sbrk_r+0x1a>
    7244:	602b      	str	r3, [r5, #0]
    7246:	bd38      	pop	{r3, r4, r5, pc}
    7248:	20003e98 	.word	0x20003e98

0000724c <siprintf>:
    724c:	b40e      	push	{r1, r2, r3}
    724e:	b500      	push	{lr}
    7250:	b09c      	sub	sp, #112	; 0x70
    7252:	f44f 7102 	mov.w	r1, #520	; 0x208
    7256:	ab1d      	add	r3, sp, #116	; 0x74
    7258:	f8ad 1014 	strh.w	r1, [sp, #20]
    725c:	9002      	str	r0, [sp, #8]
    725e:	9006      	str	r0, [sp, #24]
    7260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    7264:	480a      	ldr	r0, [pc, #40]	; (7290 <siprintf+0x44>)
    7266:	9104      	str	r1, [sp, #16]
    7268:	9107      	str	r1, [sp, #28]
    726a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    726e:	f853 2b04 	ldr.w	r2, [r3], #4
    7272:	f8ad 1016 	strh.w	r1, [sp, #22]
    7276:	6800      	ldr	r0, [r0, #0]
    7278:	9301      	str	r3, [sp, #4]
    727a:	a902      	add	r1, sp, #8
    727c:	f000 f89e 	bl	73bc <_svfiprintf_r>
    7280:	9b02      	ldr	r3, [sp, #8]
    7282:	2200      	movs	r2, #0
    7284:	701a      	strb	r2, [r3, #0]
    7286:	b01c      	add	sp, #112	; 0x70
    7288:	f85d eb04 	ldr.w	lr, [sp], #4
    728c:	b003      	add	sp, #12
    728e:	4770      	bx	lr
    7290:	2000012c 	.word	0x2000012c

00007294 <strcpy>:
    7294:	4603      	mov	r3, r0
    7296:	f811 2b01 	ldrb.w	r2, [r1], #1
    729a:	f803 2b01 	strb.w	r2, [r3], #1
    729e:	2a00      	cmp	r2, #0
    72a0:	d1f9      	bne.n	7296 <strcpy+0x2>
    72a2:	4770      	bx	lr

000072a4 <strlen>:
    72a4:	4603      	mov	r3, r0
    72a6:	f813 2b01 	ldrb.w	r2, [r3], #1
    72aa:	2a00      	cmp	r2, #0
    72ac:	d1fb      	bne.n	72a6 <strlen+0x2>
    72ae:	1a18      	subs	r0, r3, r0
    72b0:	3801      	subs	r0, #1
    72b2:	4770      	bx	lr

000072b4 <strncmp>:
    72b4:	b510      	push	{r4, lr}
    72b6:	b16a      	cbz	r2, 72d4 <strncmp+0x20>
    72b8:	3901      	subs	r1, #1
    72ba:	1884      	adds	r4, r0, r2
    72bc:	f810 3b01 	ldrb.w	r3, [r0], #1
    72c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    72c4:	4293      	cmp	r3, r2
    72c6:	d103      	bne.n	72d0 <strncmp+0x1c>
    72c8:	42a0      	cmp	r0, r4
    72ca:	d001      	beq.n	72d0 <strncmp+0x1c>
    72cc:	2b00      	cmp	r3, #0
    72ce:	d1f5      	bne.n	72bc <strncmp+0x8>
    72d0:	1a98      	subs	r0, r3, r2
    72d2:	bd10      	pop	{r4, pc}
    72d4:	4610      	mov	r0, r2
    72d6:	bd10      	pop	{r4, pc}

000072d8 <strncpy>:
    72d8:	b570      	push	{r4, r5, r6, lr}
    72da:	4604      	mov	r4, r0
    72dc:	b902      	cbnz	r2, 72e0 <strncpy+0x8>
    72de:	bd70      	pop	{r4, r5, r6, pc}
    72e0:	4623      	mov	r3, r4
    72e2:	f811 5b01 	ldrb.w	r5, [r1], #1
    72e6:	f803 5b01 	strb.w	r5, [r3], #1
    72ea:	1e56      	subs	r6, r2, #1
    72ec:	b91d      	cbnz	r5, 72f6 <strncpy+0x1e>
    72ee:	4414      	add	r4, r2
    72f0:	42a3      	cmp	r3, r4
    72f2:	d103      	bne.n	72fc <strncpy+0x24>
    72f4:	bd70      	pop	{r4, r5, r6, pc}
    72f6:	461c      	mov	r4, r3
    72f8:	4632      	mov	r2, r6
    72fa:	e7ef      	b.n	72dc <strncpy+0x4>
    72fc:	f803 5b01 	strb.w	r5, [r3], #1
    7300:	e7f6      	b.n	72f0 <strncpy+0x18>

00007302 <__malloc_lock>:
    7302:	4770      	bx	lr

00007304 <__malloc_unlock>:
    7304:	4770      	bx	lr

00007306 <__ssputs_r>:
    7306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    730a:	688e      	ldr	r6, [r1, #8]
    730c:	429e      	cmp	r6, r3
    730e:	4682      	mov	sl, r0
    7310:	460c      	mov	r4, r1
    7312:	4691      	mov	r9, r2
    7314:	4698      	mov	r8, r3
    7316:	d835      	bhi.n	7384 <__ssputs_r+0x7e>
    7318:	898a      	ldrh	r2, [r1, #12]
    731a:	f412 6f90 	tst.w	r2, #1152	; 0x480
    731e:	d031      	beq.n	7384 <__ssputs_r+0x7e>
    7320:	6825      	ldr	r5, [r4, #0]
    7322:	6909      	ldr	r1, [r1, #16]
    7324:	1a6f      	subs	r7, r5, r1
    7326:	6965      	ldr	r5, [r4, #20]
    7328:	2302      	movs	r3, #2
    732a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    732e:	fb95 f5f3 	sdiv	r5, r5, r3
    7332:	f108 0301 	add.w	r3, r8, #1
    7336:	443b      	add	r3, r7
    7338:	429d      	cmp	r5, r3
    733a:	bf38      	it	cc
    733c:	461d      	movcc	r5, r3
    733e:	0553      	lsls	r3, r2, #21
    7340:	d531      	bpl.n	73a6 <__ssputs_r+0xa0>
    7342:	4629      	mov	r1, r5
    7344:	f7ff ff14 	bl	7170 <_malloc_r>
    7348:	4606      	mov	r6, r0
    734a:	b950      	cbnz	r0, 7362 <__ssputs_r+0x5c>
    734c:	230c      	movs	r3, #12
    734e:	f8ca 3000 	str.w	r3, [sl]
    7352:	89a3      	ldrh	r3, [r4, #12]
    7354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7358:	81a3      	strh	r3, [r4, #12]
    735a:	f04f 30ff 	mov.w	r0, #4294967295
    735e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7362:	463a      	mov	r2, r7
    7364:	6921      	ldr	r1, [r4, #16]
    7366:	f7ff fe88 	bl	707a <memcpy>
    736a:	89a3      	ldrh	r3, [r4, #12]
    736c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    7370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7374:	81a3      	strh	r3, [r4, #12]
    7376:	6126      	str	r6, [r4, #16]
    7378:	6165      	str	r5, [r4, #20]
    737a:	443e      	add	r6, r7
    737c:	1bed      	subs	r5, r5, r7
    737e:	6026      	str	r6, [r4, #0]
    7380:	60a5      	str	r5, [r4, #8]
    7382:	4646      	mov	r6, r8
    7384:	4546      	cmp	r6, r8
    7386:	bf28      	it	cs
    7388:	4646      	movcs	r6, r8
    738a:	4632      	mov	r2, r6
    738c:	4649      	mov	r1, r9
    738e:	6820      	ldr	r0, [r4, #0]
    7390:	f7ff fe7e 	bl	7090 <memmove>
    7394:	68a3      	ldr	r3, [r4, #8]
    7396:	1b9b      	subs	r3, r3, r6
    7398:	60a3      	str	r3, [r4, #8]
    739a:	6823      	ldr	r3, [r4, #0]
    739c:	441e      	add	r6, r3
    739e:	6026      	str	r6, [r4, #0]
    73a0:	2000      	movs	r0, #0
    73a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    73a6:	462a      	mov	r2, r5
    73a8:	f000 fae2 	bl	7970 <_realloc_r>
    73ac:	4606      	mov	r6, r0
    73ae:	2800      	cmp	r0, #0
    73b0:	d1e1      	bne.n	7376 <__ssputs_r+0x70>
    73b2:	6921      	ldr	r1, [r4, #16]
    73b4:	4650      	mov	r0, sl
    73b6:	f7ff fe8d 	bl	70d4 <_free_r>
    73ba:	e7c7      	b.n	734c <__ssputs_r+0x46>

000073bc <_svfiprintf_r>:
    73bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73c0:	b09d      	sub	sp, #116	; 0x74
    73c2:	4680      	mov	r8, r0
    73c4:	9303      	str	r3, [sp, #12]
    73c6:	898b      	ldrh	r3, [r1, #12]
    73c8:	061c      	lsls	r4, r3, #24
    73ca:	460d      	mov	r5, r1
    73cc:	4616      	mov	r6, r2
    73ce:	d50f      	bpl.n	73f0 <_svfiprintf_r+0x34>
    73d0:	690b      	ldr	r3, [r1, #16]
    73d2:	b96b      	cbnz	r3, 73f0 <_svfiprintf_r+0x34>
    73d4:	2140      	movs	r1, #64	; 0x40
    73d6:	f7ff fecb 	bl	7170 <_malloc_r>
    73da:	6028      	str	r0, [r5, #0]
    73dc:	6128      	str	r0, [r5, #16]
    73de:	b928      	cbnz	r0, 73ec <_svfiprintf_r+0x30>
    73e0:	230c      	movs	r3, #12
    73e2:	f8c8 3000 	str.w	r3, [r8]
    73e6:	f04f 30ff 	mov.w	r0, #4294967295
    73ea:	e0c5      	b.n	7578 <_svfiprintf_r+0x1bc>
    73ec:	2340      	movs	r3, #64	; 0x40
    73ee:	616b      	str	r3, [r5, #20]
    73f0:	2300      	movs	r3, #0
    73f2:	9309      	str	r3, [sp, #36]	; 0x24
    73f4:	2320      	movs	r3, #32
    73f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    73fa:	2330      	movs	r3, #48	; 0x30
    73fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    7400:	f04f 0b01 	mov.w	fp, #1
    7404:	4637      	mov	r7, r6
    7406:	463c      	mov	r4, r7
    7408:	f814 3b01 	ldrb.w	r3, [r4], #1
    740c:	2b00      	cmp	r3, #0
    740e:	d13c      	bne.n	748a <_svfiprintf_r+0xce>
    7410:	ebb7 0a06 	subs.w	sl, r7, r6
    7414:	d00b      	beq.n	742e <_svfiprintf_r+0x72>
    7416:	4653      	mov	r3, sl
    7418:	4632      	mov	r2, r6
    741a:	4629      	mov	r1, r5
    741c:	4640      	mov	r0, r8
    741e:	f7ff ff72 	bl	7306 <__ssputs_r>
    7422:	3001      	adds	r0, #1
    7424:	f000 80a3 	beq.w	756e <_svfiprintf_r+0x1b2>
    7428:	9b09      	ldr	r3, [sp, #36]	; 0x24
    742a:	4453      	add	r3, sl
    742c:	9309      	str	r3, [sp, #36]	; 0x24
    742e:	783b      	ldrb	r3, [r7, #0]
    7430:	2b00      	cmp	r3, #0
    7432:	f000 809c 	beq.w	756e <_svfiprintf_r+0x1b2>
    7436:	2300      	movs	r3, #0
    7438:	f04f 32ff 	mov.w	r2, #4294967295
    743c:	9304      	str	r3, [sp, #16]
    743e:	9307      	str	r3, [sp, #28]
    7440:	9205      	str	r2, [sp, #20]
    7442:	9306      	str	r3, [sp, #24]
    7444:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    7448:	931a      	str	r3, [sp, #104]	; 0x68
    744a:	2205      	movs	r2, #5
    744c:	7821      	ldrb	r1, [r4, #0]
    744e:	4850      	ldr	r0, [pc, #320]	; (7590 <_svfiprintf_r+0x1d4>)
    7450:	f000 fa3e 	bl	78d0 <memchr>
    7454:	1c67      	adds	r7, r4, #1
    7456:	9b04      	ldr	r3, [sp, #16]
    7458:	b9d8      	cbnz	r0, 7492 <_svfiprintf_r+0xd6>
    745a:	06d9      	lsls	r1, r3, #27
    745c:	bf44      	itt	mi
    745e:	2220      	movmi	r2, #32
    7460:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    7464:	071a      	lsls	r2, r3, #28
    7466:	bf44      	itt	mi
    7468:	222b      	movmi	r2, #43	; 0x2b
    746a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    746e:	7822      	ldrb	r2, [r4, #0]
    7470:	2a2a      	cmp	r2, #42	; 0x2a
    7472:	d016      	beq.n	74a2 <_svfiprintf_r+0xe6>
    7474:	9a07      	ldr	r2, [sp, #28]
    7476:	2100      	movs	r1, #0
    7478:	200a      	movs	r0, #10
    747a:	4627      	mov	r7, r4
    747c:	3401      	adds	r4, #1
    747e:	783b      	ldrb	r3, [r7, #0]
    7480:	3b30      	subs	r3, #48	; 0x30
    7482:	2b09      	cmp	r3, #9
    7484:	d951      	bls.n	752a <_svfiprintf_r+0x16e>
    7486:	b1c9      	cbz	r1, 74bc <_svfiprintf_r+0x100>
    7488:	e011      	b.n	74ae <_svfiprintf_r+0xf2>
    748a:	2b25      	cmp	r3, #37	; 0x25
    748c:	d0c0      	beq.n	7410 <_svfiprintf_r+0x54>
    748e:	4627      	mov	r7, r4
    7490:	e7b9      	b.n	7406 <_svfiprintf_r+0x4a>
    7492:	4a3f      	ldr	r2, [pc, #252]	; (7590 <_svfiprintf_r+0x1d4>)
    7494:	1a80      	subs	r0, r0, r2
    7496:	fa0b f000 	lsl.w	r0, fp, r0
    749a:	4318      	orrs	r0, r3
    749c:	9004      	str	r0, [sp, #16]
    749e:	463c      	mov	r4, r7
    74a0:	e7d3      	b.n	744a <_svfiprintf_r+0x8e>
    74a2:	9a03      	ldr	r2, [sp, #12]
    74a4:	1d11      	adds	r1, r2, #4
    74a6:	6812      	ldr	r2, [r2, #0]
    74a8:	9103      	str	r1, [sp, #12]
    74aa:	2a00      	cmp	r2, #0
    74ac:	db01      	blt.n	74b2 <_svfiprintf_r+0xf6>
    74ae:	9207      	str	r2, [sp, #28]
    74b0:	e004      	b.n	74bc <_svfiprintf_r+0x100>
    74b2:	4252      	negs	r2, r2
    74b4:	f043 0302 	orr.w	r3, r3, #2
    74b8:	9207      	str	r2, [sp, #28]
    74ba:	9304      	str	r3, [sp, #16]
    74bc:	783b      	ldrb	r3, [r7, #0]
    74be:	2b2e      	cmp	r3, #46	; 0x2e
    74c0:	d10e      	bne.n	74e0 <_svfiprintf_r+0x124>
    74c2:	787b      	ldrb	r3, [r7, #1]
    74c4:	2b2a      	cmp	r3, #42	; 0x2a
    74c6:	f107 0101 	add.w	r1, r7, #1
    74ca:	d132      	bne.n	7532 <_svfiprintf_r+0x176>
    74cc:	9b03      	ldr	r3, [sp, #12]
    74ce:	1d1a      	adds	r2, r3, #4
    74d0:	681b      	ldr	r3, [r3, #0]
    74d2:	9203      	str	r2, [sp, #12]
    74d4:	2b00      	cmp	r3, #0
    74d6:	bfb8      	it	lt
    74d8:	f04f 33ff 	movlt.w	r3, #4294967295
    74dc:	3702      	adds	r7, #2
    74de:	9305      	str	r3, [sp, #20]
    74e0:	4c2c      	ldr	r4, [pc, #176]	; (7594 <_svfiprintf_r+0x1d8>)
    74e2:	7839      	ldrb	r1, [r7, #0]
    74e4:	2203      	movs	r2, #3
    74e6:	4620      	mov	r0, r4
    74e8:	f000 f9f2 	bl	78d0 <memchr>
    74ec:	b138      	cbz	r0, 74fe <_svfiprintf_r+0x142>
    74ee:	2340      	movs	r3, #64	; 0x40
    74f0:	1b00      	subs	r0, r0, r4
    74f2:	fa03 f000 	lsl.w	r0, r3, r0
    74f6:	9b04      	ldr	r3, [sp, #16]
    74f8:	4303      	orrs	r3, r0
    74fa:	9304      	str	r3, [sp, #16]
    74fc:	3701      	adds	r7, #1
    74fe:	7839      	ldrb	r1, [r7, #0]
    7500:	4825      	ldr	r0, [pc, #148]	; (7598 <_svfiprintf_r+0x1dc>)
    7502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    7506:	2206      	movs	r2, #6
    7508:	1c7e      	adds	r6, r7, #1
    750a:	f000 f9e1 	bl	78d0 <memchr>
    750e:	2800      	cmp	r0, #0
    7510:	d035      	beq.n	757e <_svfiprintf_r+0x1c2>
    7512:	4b22      	ldr	r3, [pc, #136]	; (759c <_svfiprintf_r+0x1e0>)
    7514:	b9fb      	cbnz	r3, 7556 <_svfiprintf_r+0x19a>
    7516:	9b03      	ldr	r3, [sp, #12]
    7518:	3307      	adds	r3, #7
    751a:	f023 0307 	bic.w	r3, r3, #7
    751e:	3308      	adds	r3, #8
    7520:	9303      	str	r3, [sp, #12]
    7522:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7524:	444b      	add	r3, r9
    7526:	9309      	str	r3, [sp, #36]	; 0x24
    7528:	e76c      	b.n	7404 <_svfiprintf_r+0x48>
    752a:	fb00 3202 	mla	r2, r0, r2, r3
    752e:	2101      	movs	r1, #1
    7530:	e7a3      	b.n	747a <_svfiprintf_r+0xbe>
    7532:	2300      	movs	r3, #0
    7534:	9305      	str	r3, [sp, #20]
    7536:	4618      	mov	r0, r3
    7538:	240a      	movs	r4, #10
    753a:	460f      	mov	r7, r1
    753c:	3101      	adds	r1, #1
    753e:	783a      	ldrb	r2, [r7, #0]
    7540:	3a30      	subs	r2, #48	; 0x30
    7542:	2a09      	cmp	r2, #9
    7544:	d903      	bls.n	754e <_svfiprintf_r+0x192>
    7546:	2b00      	cmp	r3, #0
    7548:	d0ca      	beq.n	74e0 <_svfiprintf_r+0x124>
    754a:	9005      	str	r0, [sp, #20]
    754c:	e7c8      	b.n	74e0 <_svfiprintf_r+0x124>
    754e:	fb04 2000 	mla	r0, r4, r0, r2
    7552:	2301      	movs	r3, #1
    7554:	e7f1      	b.n	753a <_svfiprintf_r+0x17e>
    7556:	ab03      	add	r3, sp, #12
    7558:	9300      	str	r3, [sp, #0]
    755a:	462a      	mov	r2, r5
    755c:	4b10      	ldr	r3, [pc, #64]	; (75a0 <_svfiprintf_r+0x1e4>)
    755e:	a904      	add	r1, sp, #16
    7560:	4640      	mov	r0, r8
    7562:	f3af 8000 	nop.w
    7566:	f1b0 3fff 	cmp.w	r0, #4294967295
    756a:	4681      	mov	r9, r0
    756c:	d1d9      	bne.n	7522 <_svfiprintf_r+0x166>
    756e:	89ab      	ldrh	r3, [r5, #12]
    7570:	065b      	lsls	r3, r3, #25
    7572:	f53f af38 	bmi.w	73e6 <_svfiprintf_r+0x2a>
    7576:	9809      	ldr	r0, [sp, #36]	; 0x24
    7578:	b01d      	add	sp, #116	; 0x74
    757a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    757e:	ab03      	add	r3, sp, #12
    7580:	9300      	str	r3, [sp, #0]
    7582:	462a      	mov	r2, r5
    7584:	4b06      	ldr	r3, [pc, #24]	; (75a0 <_svfiprintf_r+0x1e4>)
    7586:	a904      	add	r1, sp, #16
    7588:	4640      	mov	r0, r8
    758a:	f000 f881 	bl	7690 <_printf_i>
    758e:	e7ea      	b.n	7566 <_svfiprintf_r+0x1aa>
    7590:	0000937c 	.word	0x0000937c
    7594:	00009382 	.word	0x00009382
    7598:	00009386 	.word	0x00009386
    759c:	00000000 	.word	0x00000000
    75a0:	00007307 	.word	0x00007307

000075a4 <_printf_common>:
    75a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    75a8:	4691      	mov	r9, r2
    75aa:	461f      	mov	r7, r3
    75ac:	688a      	ldr	r2, [r1, #8]
    75ae:	690b      	ldr	r3, [r1, #16]
    75b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    75b4:	4293      	cmp	r3, r2
    75b6:	bfb8      	it	lt
    75b8:	4613      	movlt	r3, r2
    75ba:	f8c9 3000 	str.w	r3, [r9]
    75be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    75c2:	4606      	mov	r6, r0
    75c4:	460c      	mov	r4, r1
    75c6:	b112      	cbz	r2, 75ce <_printf_common+0x2a>
    75c8:	3301      	adds	r3, #1
    75ca:	f8c9 3000 	str.w	r3, [r9]
    75ce:	6823      	ldr	r3, [r4, #0]
    75d0:	0699      	lsls	r1, r3, #26
    75d2:	bf42      	ittt	mi
    75d4:	f8d9 3000 	ldrmi.w	r3, [r9]
    75d8:	3302      	addmi	r3, #2
    75da:	f8c9 3000 	strmi.w	r3, [r9]
    75de:	6825      	ldr	r5, [r4, #0]
    75e0:	f015 0506 	ands.w	r5, r5, #6
    75e4:	d107      	bne.n	75f6 <_printf_common+0x52>
    75e6:	f104 0a19 	add.w	sl, r4, #25
    75ea:	68e3      	ldr	r3, [r4, #12]
    75ec:	f8d9 2000 	ldr.w	r2, [r9]
    75f0:	1a9b      	subs	r3, r3, r2
    75f2:	429d      	cmp	r5, r3
    75f4:	db29      	blt.n	764a <_printf_common+0xa6>
    75f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    75fa:	6822      	ldr	r2, [r4, #0]
    75fc:	3300      	adds	r3, #0
    75fe:	bf18      	it	ne
    7600:	2301      	movne	r3, #1
    7602:	0692      	lsls	r2, r2, #26
    7604:	d42e      	bmi.n	7664 <_printf_common+0xc0>
    7606:	f104 0243 	add.w	r2, r4, #67	; 0x43
    760a:	4639      	mov	r1, r7
    760c:	4630      	mov	r0, r6
    760e:	47c0      	blx	r8
    7610:	3001      	adds	r0, #1
    7612:	d021      	beq.n	7658 <_printf_common+0xb4>
    7614:	6823      	ldr	r3, [r4, #0]
    7616:	68e5      	ldr	r5, [r4, #12]
    7618:	f8d9 2000 	ldr.w	r2, [r9]
    761c:	f003 0306 	and.w	r3, r3, #6
    7620:	2b04      	cmp	r3, #4
    7622:	bf08      	it	eq
    7624:	1aad      	subeq	r5, r5, r2
    7626:	68a3      	ldr	r3, [r4, #8]
    7628:	6922      	ldr	r2, [r4, #16]
    762a:	bf0c      	ite	eq
    762c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    7630:	2500      	movne	r5, #0
    7632:	4293      	cmp	r3, r2
    7634:	bfc4      	itt	gt
    7636:	1a9b      	subgt	r3, r3, r2
    7638:	18ed      	addgt	r5, r5, r3
    763a:	f04f 0900 	mov.w	r9, #0
    763e:	341a      	adds	r4, #26
    7640:	454d      	cmp	r5, r9
    7642:	d11b      	bne.n	767c <_printf_common+0xd8>
    7644:	2000      	movs	r0, #0
    7646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    764a:	2301      	movs	r3, #1
    764c:	4652      	mov	r2, sl
    764e:	4639      	mov	r1, r7
    7650:	4630      	mov	r0, r6
    7652:	47c0      	blx	r8
    7654:	3001      	adds	r0, #1
    7656:	d103      	bne.n	7660 <_printf_common+0xbc>
    7658:	f04f 30ff 	mov.w	r0, #4294967295
    765c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7660:	3501      	adds	r5, #1
    7662:	e7c2      	b.n	75ea <_printf_common+0x46>
    7664:	18e1      	adds	r1, r4, r3
    7666:	1c5a      	adds	r2, r3, #1
    7668:	2030      	movs	r0, #48	; 0x30
    766a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    766e:	4422      	add	r2, r4
    7670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    7674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    7678:	3302      	adds	r3, #2
    767a:	e7c4      	b.n	7606 <_printf_common+0x62>
    767c:	2301      	movs	r3, #1
    767e:	4622      	mov	r2, r4
    7680:	4639      	mov	r1, r7
    7682:	4630      	mov	r0, r6
    7684:	47c0      	blx	r8
    7686:	3001      	adds	r0, #1
    7688:	d0e6      	beq.n	7658 <_printf_common+0xb4>
    768a:	f109 0901 	add.w	r9, r9, #1
    768e:	e7d7      	b.n	7640 <_printf_common+0x9c>

00007690 <_printf_i>:
    7690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7694:	4617      	mov	r7, r2
    7696:	7e0a      	ldrb	r2, [r1, #24]
    7698:	b085      	sub	sp, #20
    769a:	2a6e      	cmp	r2, #110	; 0x6e
    769c:	4698      	mov	r8, r3
    769e:	4606      	mov	r6, r0
    76a0:	460c      	mov	r4, r1
    76a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    76a4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    76a8:	f000 80bc 	beq.w	7824 <_printf_i+0x194>
    76ac:	d81a      	bhi.n	76e4 <_printf_i+0x54>
    76ae:	2a63      	cmp	r2, #99	; 0x63
    76b0:	d02e      	beq.n	7710 <_printf_i+0x80>
    76b2:	d80a      	bhi.n	76ca <_printf_i+0x3a>
    76b4:	2a00      	cmp	r2, #0
    76b6:	f000 80c8 	beq.w	784a <_printf_i+0x1ba>
    76ba:	2a58      	cmp	r2, #88	; 0x58
    76bc:	f000 808a 	beq.w	77d4 <_printf_i+0x144>
    76c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
    76c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    76c8:	e02a      	b.n	7720 <_printf_i+0x90>
    76ca:	2a64      	cmp	r2, #100	; 0x64
    76cc:	d001      	beq.n	76d2 <_printf_i+0x42>
    76ce:	2a69      	cmp	r2, #105	; 0x69
    76d0:	d1f6      	bne.n	76c0 <_printf_i+0x30>
    76d2:	6821      	ldr	r1, [r4, #0]
    76d4:	681a      	ldr	r2, [r3, #0]
    76d6:	f011 0f80 	tst.w	r1, #128	; 0x80
    76da:	d023      	beq.n	7724 <_printf_i+0x94>
    76dc:	1d11      	adds	r1, r2, #4
    76de:	6019      	str	r1, [r3, #0]
    76e0:	6813      	ldr	r3, [r2, #0]
    76e2:	e027      	b.n	7734 <_printf_i+0xa4>
    76e4:	2a73      	cmp	r2, #115	; 0x73
    76e6:	f000 80b4 	beq.w	7852 <_printf_i+0x1c2>
    76ea:	d808      	bhi.n	76fe <_printf_i+0x6e>
    76ec:	2a6f      	cmp	r2, #111	; 0x6f
    76ee:	d02a      	beq.n	7746 <_printf_i+0xb6>
    76f0:	2a70      	cmp	r2, #112	; 0x70
    76f2:	d1e5      	bne.n	76c0 <_printf_i+0x30>
    76f4:	680a      	ldr	r2, [r1, #0]
    76f6:	f042 0220 	orr.w	r2, r2, #32
    76fa:	600a      	str	r2, [r1, #0]
    76fc:	e003      	b.n	7706 <_printf_i+0x76>
    76fe:	2a75      	cmp	r2, #117	; 0x75
    7700:	d021      	beq.n	7746 <_printf_i+0xb6>
    7702:	2a78      	cmp	r2, #120	; 0x78
    7704:	d1dc      	bne.n	76c0 <_printf_i+0x30>
    7706:	2278      	movs	r2, #120	; 0x78
    7708:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    770c:	496e      	ldr	r1, [pc, #440]	; (78c8 <_printf_i+0x238>)
    770e:	e064      	b.n	77da <_printf_i+0x14a>
    7710:	681a      	ldr	r2, [r3, #0]
    7712:	f101 0542 	add.w	r5, r1, #66	; 0x42
    7716:	1d11      	adds	r1, r2, #4
    7718:	6019      	str	r1, [r3, #0]
    771a:	6813      	ldr	r3, [r2, #0]
    771c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    7720:	2301      	movs	r3, #1
    7722:	e0a3      	b.n	786c <_printf_i+0x1dc>
    7724:	f011 0f40 	tst.w	r1, #64	; 0x40
    7728:	f102 0104 	add.w	r1, r2, #4
    772c:	6019      	str	r1, [r3, #0]
    772e:	d0d7      	beq.n	76e0 <_printf_i+0x50>
    7730:	f9b2 3000 	ldrsh.w	r3, [r2]
    7734:	2b00      	cmp	r3, #0
    7736:	da03      	bge.n	7740 <_printf_i+0xb0>
    7738:	222d      	movs	r2, #45	; 0x2d
    773a:	425b      	negs	r3, r3
    773c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    7740:	4962      	ldr	r1, [pc, #392]	; (78cc <_printf_i+0x23c>)
    7742:	220a      	movs	r2, #10
    7744:	e017      	b.n	7776 <_printf_i+0xe6>
    7746:	6820      	ldr	r0, [r4, #0]
    7748:	6819      	ldr	r1, [r3, #0]
    774a:	f010 0f80 	tst.w	r0, #128	; 0x80
    774e:	d003      	beq.n	7758 <_printf_i+0xc8>
    7750:	1d08      	adds	r0, r1, #4
    7752:	6018      	str	r0, [r3, #0]
    7754:	680b      	ldr	r3, [r1, #0]
    7756:	e006      	b.n	7766 <_printf_i+0xd6>
    7758:	f010 0f40 	tst.w	r0, #64	; 0x40
    775c:	f101 0004 	add.w	r0, r1, #4
    7760:	6018      	str	r0, [r3, #0]
    7762:	d0f7      	beq.n	7754 <_printf_i+0xc4>
    7764:	880b      	ldrh	r3, [r1, #0]
    7766:	4959      	ldr	r1, [pc, #356]	; (78cc <_printf_i+0x23c>)
    7768:	2a6f      	cmp	r2, #111	; 0x6f
    776a:	bf14      	ite	ne
    776c:	220a      	movne	r2, #10
    776e:	2208      	moveq	r2, #8
    7770:	2000      	movs	r0, #0
    7772:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    7776:	6865      	ldr	r5, [r4, #4]
    7778:	60a5      	str	r5, [r4, #8]
    777a:	2d00      	cmp	r5, #0
    777c:	f2c0 809c 	blt.w	78b8 <_printf_i+0x228>
    7780:	6820      	ldr	r0, [r4, #0]
    7782:	f020 0004 	bic.w	r0, r0, #4
    7786:	6020      	str	r0, [r4, #0]
    7788:	2b00      	cmp	r3, #0
    778a:	d13f      	bne.n	780c <_printf_i+0x17c>
    778c:	2d00      	cmp	r5, #0
    778e:	f040 8095 	bne.w	78bc <_printf_i+0x22c>
    7792:	4675      	mov	r5, lr
    7794:	2a08      	cmp	r2, #8
    7796:	d10b      	bne.n	77b0 <_printf_i+0x120>
    7798:	6823      	ldr	r3, [r4, #0]
    779a:	07da      	lsls	r2, r3, #31
    779c:	d508      	bpl.n	77b0 <_printf_i+0x120>
    779e:	6923      	ldr	r3, [r4, #16]
    77a0:	6862      	ldr	r2, [r4, #4]
    77a2:	429a      	cmp	r2, r3
    77a4:	bfde      	ittt	le
    77a6:	2330      	movle	r3, #48	; 0x30
    77a8:	f805 3c01 	strble.w	r3, [r5, #-1]
    77ac:	f105 35ff 	addle.w	r5, r5, #4294967295
    77b0:	ebae 0305 	sub.w	r3, lr, r5
    77b4:	6123      	str	r3, [r4, #16]
    77b6:	f8cd 8000 	str.w	r8, [sp]
    77ba:	463b      	mov	r3, r7
    77bc:	aa03      	add	r2, sp, #12
    77be:	4621      	mov	r1, r4
    77c0:	4630      	mov	r0, r6
    77c2:	f7ff feef 	bl	75a4 <_printf_common>
    77c6:	3001      	adds	r0, #1
    77c8:	d155      	bne.n	7876 <_printf_i+0x1e6>
    77ca:	f04f 30ff 	mov.w	r0, #4294967295
    77ce:	b005      	add	sp, #20
    77d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    77d4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    77d8:	493c      	ldr	r1, [pc, #240]	; (78cc <_printf_i+0x23c>)
    77da:	6822      	ldr	r2, [r4, #0]
    77dc:	6818      	ldr	r0, [r3, #0]
    77de:	f012 0f80 	tst.w	r2, #128	; 0x80
    77e2:	f100 0504 	add.w	r5, r0, #4
    77e6:	601d      	str	r5, [r3, #0]
    77e8:	d001      	beq.n	77ee <_printf_i+0x15e>
    77ea:	6803      	ldr	r3, [r0, #0]
    77ec:	e002      	b.n	77f4 <_printf_i+0x164>
    77ee:	0655      	lsls	r5, r2, #25
    77f0:	d5fb      	bpl.n	77ea <_printf_i+0x15a>
    77f2:	8803      	ldrh	r3, [r0, #0]
    77f4:	07d0      	lsls	r0, r2, #31
    77f6:	bf44      	itt	mi
    77f8:	f042 0220 	orrmi.w	r2, r2, #32
    77fc:	6022      	strmi	r2, [r4, #0]
    77fe:	b91b      	cbnz	r3, 7808 <_printf_i+0x178>
    7800:	6822      	ldr	r2, [r4, #0]
    7802:	f022 0220 	bic.w	r2, r2, #32
    7806:	6022      	str	r2, [r4, #0]
    7808:	2210      	movs	r2, #16
    780a:	e7b1      	b.n	7770 <_printf_i+0xe0>
    780c:	4675      	mov	r5, lr
    780e:	fbb3 f0f2 	udiv	r0, r3, r2
    7812:	fb02 3310 	mls	r3, r2, r0, r3
    7816:	5ccb      	ldrb	r3, [r1, r3]
    7818:	f805 3d01 	strb.w	r3, [r5, #-1]!
    781c:	4603      	mov	r3, r0
    781e:	2800      	cmp	r0, #0
    7820:	d1f5      	bne.n	780e <_printf_i+0x17e>
    7822:	e7b7      	b.n	7794 <_printf_i+0x104>
    7824:	6808      	ldr	r0, [r1, #0]
    7826:	681a      	ldr	r2, [r3, #0]
    7828:	6949      	ldr	r1, [r1, #20]
    782a:	f010 0f80 	tst.w	r0, #128	; 0x80
    782e:	d004      	beq.n	783a <_printf_i+0x1aa>
    7830:	1d10      	adds	r0, r2, #4
    7832:	6018      	str	r0, [r3, #0]
    7834:	6813      	ldr	r3, [r2, #0]
    7836:	6019      	str	r1, [r3, #0]
    7838:	e007      	b.n	784a <_printf_i+0x1ba>
    783a:	f010 0f40 	tst.w	r0, #64	; 0x40
    783e:	f102 0004 	add.w	r0, r2, #4
    7842:	6018      	str	r0, [r3, #0]
    7844:	6813      	ldr	r3, [r2, #0]
    7846:	d0f6      	beq.n	7836 <_printf_i+0x1a6>
    7848:	8019      	strh	r1, [r3, #0]
    784a:	2300      	movs	r3, #0
    784c:	6123      	str	r3, [r4, #16]
    784e:	4675      	mov	r5, lr
    7850:	e7b1      	b.n	77b6 <_printf_i+0x126>
    7852:	681a      	ldr	r2, [r3, #0]
    7854:	1d11      	adds	r1, r2, #4
    7856:	6019      	str	r1, [r3, #0]
    7858:	6815      	ldr	r5, [r2, #0]
    785a:	6862      	ldr	r2, [r4, #4]
    785c:	2100      	movs	r1, #0
    785e:	4628      	mov	r0, r5
    7860:	f000 f836 	bl	78d0 <memchr>
    7864:	b108      	cbz	r0, 786a <_printf_i+0x1da>
    7866:	1b40      	subs	r0, r0, r5
    7868:	6060      	str	r0, [r4, #4]
    786a:	6863      	ldr	r3, [r4, #4]
    786c:	6123      	str	r3, [r4, #16]
    786e:	2300      	movs	r3, #0
    7870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    7874:	e79f      	b.n	77b6 <_printf_i+0x126>
    7876:	6923      	ldr	r3, [r4, #16]
    7878:	462a      	mov	r2, r5
    787a:	4639      	mov	r1, r7
    787c:	4630      	mov	r0, r6
    787e:	47c0      	blx	r8
    7880:	3001      	adds	r0, #1
    7882:	d0a2      	beq.n	77ca <_printf_i+0x13a>
    7884:	6823      	ldr	r3, [r4, #0]
    7886:	079b      	lsls	r3, r3, #30
    7888:	d507      	bpl.n	789a <_printf_i+0x20a>
    788a:	2500      	movs	r5, #0
    788c:	f104 0919 	add.w	r9, r4, #25
    7890:	68e3      	ldr	r3, [r4, #12]
    7892:	9a03      	ldr	r2, [sp, #12]
    7894:	1a9b      	subs	r3, r3, r2
    7896:	429d      	cmp	r5, r3
    7898:	db05      	blt.n	78a6 <_printf_i+0x216>
    789a:	68e0      	ldr	r0, [r4, #12]
    789c:	9b03      	ldr	r3, [sp, #12]
    789e:	4298      	cmp	r0, r3
    78a0:	bfb8      	it	lt
    78a2:	4618      	movlt	r0, r3
    78a4:	e793      	b.n	77ce <_printf_i+0x13e>
    78a6:	2301      	movs	r3, #1
    78a8:	464a      	mov	r2, r9
    78aa:	4639      	mov	r1, r7
    78ac:	4630      	mov	r0, r6
    78ae:	47c0      	blx	r8
    78b0:	3001      	adds	r0, #1
    78b2:	d08a      	beq.n	77ca <_printf_i+0x13a>
    78b4:	3501      	adds	r5, #1
    78b6:	e7eb      	b.n	7890 <_printf_i+0x200>
    78b8:	2b00      	cmp	r3, #0
    78ba:	d1a7      	bne.n	780c <_printf_i+0x17c>
    78bc:	780b      	ldrb	r3, [r1, #0]
    78be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    78c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
    78c6:	e765      	b.n	7794 <_printf_i+0x104>
    78c8:	0000939e 	.word	0x0000939e
    78cc:	0000938d 	.word	0x0000938d

000078d0 <memchr>:
    78d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    78d4:	2a10      	cmp	r2, #16
    78d6:	db2b      	blt.n	7930 <memchr+0x60>
    78d8:	f010 0f07 	tst.w	r0, #7
    78dc:	d008      	beq.n	78f0 <memchr+0x20>
    78de:	f810 3b01 	ldrb.w	r3, [r0], #1
    78e2:	3a01      	subs	r2, #1
    78e4:	428b      	cmp	r3, r1
    78e6:	d02d      	beq.n	7944 <memchr+0x74>
    78e8:	f010 0f07 	tst.w	r0, #7
    78ec:	b342      	cbz	r2, 7940 <memchr+0x70>
    78ee:	d1f6      	bne.n	78de <memchr+0xe>
    78f0:	b4f0      	push	{r4, r5, r6, r7}
    78f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    78f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    78fa:	f022 0407 	bic.w	r4, r2, #7
    78fe:	f07f 0700 	mvns.w	r7, #0
    7902:	2300      	movs	r3, #0
    7904:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    7908:	3c08      	subs	r4, #8
    790a:	ea85 0501 	eor.w	r5, r5, r1
    790e:	ea86 0601 	eor.w	r6, r6, r1
    7912:	fa85 f547 	uadd8	r5, r5, r7
    7916:	faa3 f587 	sel	r5, r3, r7
    791a:	fa86 f647 	uadd8	r6, r6, r7
    791e:	faa5 f687 	sel	r6, r5, r7
    7922:	b98e      	cbnz	r6, 7948 <memchr+0x78>
    7924:	d1ee      	bne.n	7904 <memchr+0x34>
    7926:	bcf0      	pop	{r4, r5, r6, r7}
    7928:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    792c:	f002 0207 	and.w	r2, r2, #7
    7930:	b132      	cbz	r2, 7940 <memchr+0x70>
    7932:	f810 3b01 	ldrb.w	r3, [r0], #1
    7936:	3a01      	subs	r2, #1
    7938:	ea83 0301 	eor.w	r3, r3, r1
    793c:	b113      	cbz	r3, 7944 <memchr+0x74>
    793e:	d1f8      	bne.n	7932 <memchr+0x62>
    7940:	2000      	movs	r0, #0
    7942:	4770      	bx	lr
    7944:	3801      	subs	r0, #1
    7946:	4770      	bx	lr
    7948:	2d00      	cmp	r5, #0
    794a:	bf06      	itte	eq
    794c:	4635      	moveq	r5, r6
    794e:	3803      	subeq	r0, #3
    7950:	3807      	subne	r0, #7
    7952:	f015 0f01 	tst.w	r5, #1
    7956:	d107      	bne.n	7968 <memchr+0x98>
    7958:	3001      	adds	r0, #1
    795a:	f415 7f80 	tst.w	r5, #256	; 0x100
    795e:	bf02      	ittt	eq
    7960:	3001      	addeq	r0, #1
    7962:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    7966:	3001      	addeq	r0, #1
    7968:	bcf0      	pop	{r4, r5, r6, r7}
    796a:	3801      	subs	r0, #1
    796c:	4770      	bx	lr
    796e:	bf00      	nop

00007970 <_realloc_r>:
    7970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7972:	4607      	mov	r7, r0
    7974:	4614      	mov	r4, r2
    7976:	460e      	mov	r6, r1
    7978:	b921      	cbnz	r1, 7984 <_realloc_r+0x14>
    797a:	4611      	mov	r1, r2
    797c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7980:	f7ff bbf6 	b.w	7170 <_malloc_r>
    7984:	b922      	cbnz	r2, 7990 <_realloc_r+0x20>
    7986:	f7ff fba5 	bl	70d4 <_free_r>
    798a:	4625      	mov	r5, r4
    798c:	4628      	mov	r0, r5
    798e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7990:	f000 f814 	bl	79bc <_malloc_usable_size_r>
    7994:	4284      	cmp	r4, r0
    7996:	d90f      	bls.n	79b8 <_realloc_r+0x48>
    7998:	4621      	mov	r1, r4
    799a:	4638      	mov	r0, r7
    799c:	f7ff fbe8 	bl	7170 <_malloc_r>
    79a0:	4605      	mov	r5, r0
    79a2:	2800      	cmp	r0, #0
    79a4:	d0f2      	beq.n	798c <_realloc_r+0x1c>
    79a6:	4631      	mov	r1, r6
    79a8:	4622      	mov	r2, r4
    79aa:	f7ff fb66 	bl	707a <memcpy>
    79ae:	4631      	mov	r1, r6
    79b0:	4638      	mov	r0, r7
    79b2:	f7ff fb8f 	bl	70d4 <_free_r>
    79b6:	e7e9      	b.n	798c <_realloc_r+0x1c>
    79b8:	4635      	mov	r5, r6
    79ba:	e7e7      	b.n	798c <_realloc_r+0x1c>

000079bc <_malloc_usable_size_r>:
    79bc:	f851 0c04 	ldr.w	r0, [r1, #-4]
    79c0:	2800      	cmp	r0, #0
    79c2:	f1a0 0004 	sub.w	r0, r0, #4
    79c6:	bfbc      	itt	lt
    79c8:	580b      	ldrlt	r3, [r1, r0]
    79ca:	18c0      	addlt	r0, r0, r3
    79cc:	4770      	bx	lr
    79ce:	0000      	movs	r0, r0
    79d0:	2a2a2a2a 	.word	0x2a2a2a2a
    79d4:	2a2a2a2a 	.word	0x2a2a2a2a
    79d8:	2a2a2a2a 	.word	0x2a2a2a2a
    79dc:	2a2a2a2a 	.word	0x2a2a2a2a
    79e0:	2a2a2a2a 	.word	0x2a2a2a2a
    79e4:	2a2a2a2a 	.word	0x2a2a2a2a
    79e8:	2a2a2a2a 	.word	0x2a2a2a2a
    79ec:	2a2a2a2a 	.word	0x2a2a2a2a
    79f0:	2a2a2a2a 	.word	0x2a2a2a2a
    79f4:	2a2a2a2a 	.word	0x2a2a2a2a
    79f8:	2a2a2a2a 	.word	0x2a2a2a2a
    79fc:	2a2a2a2a 	.word	0x2a2a2a2a
    7a00:	2a2a2a2a 	.word	0x2a2a2a2a
    7a04:	2a2a2a2a 	.word	0x2a2a2a2a
    7a08:	00002a2a 	.word	0x00002a2a
    7a0c:	2a2a2a2a 	.word	0x2a2a2a2a
    7a10:	2a2a2a2a 	.word	0x2a2a2a2a
    7a14:	2a2a2a2a 	.word	0x2a2a2a2a
    7a18:	532a2a2a 	.word	0x532a2a2a
    7a1c:	4b434154 	.word	0x4b434154
    7a20:	45564f20 	.word	0x45564f20
    7a24:	4f4c4652 	.word	0x4f4c4652
    7a28:	45442057 	.word	0x45442057
    7a2c:	54434554 	.word	0x54434554
    7a30:	2a2a4445 	.word	0x2a2a4445
    7a34:	2a2a2a2a 	.word	0x2a2a2a2a
    7a38:	2a2a2a2a 	.word	0x2a2a2a2a
    7a3c:	2a2a2a2a 	.word	0x2a2a2a2a
    7a40:	2a2a2a2a 	.word	0x2a2a2a2a
    7a44:	00002a2a 	.word	0x00002a2a
    7a48:	6b736154 	.word	0x6b736154
    7a4c:	6e614820 	.word	0x6e614820
    7a50:	20656c64 	.word	0x20656c64
    7a54:	6425202d 	.word	0x6425202d
    7a58:	00000a0d 	.word	0x00000a0d
    7a5c:	2a2a2a2a 	.word	0x2a2a2a2a
    7a60:	2a2a2a2a 	.word	0x2a2a2a2a
    7a64:	2a2a2a2a 	.word	0x2a2a2a2a
    7a68:	4d2a2a2a 	.word	0x4d2a2a2a
    7a6c:	4f4c4c41 	.word	0x4f4c4c41
    7a70:	41462043 	.word	0x41462043
    7a74:	52554c49 	.word	0x52554c49
    7a78:	45442045 	.word	0x45442045
    7a7c:	54434554 	.word	0x54434554
    7a80:	2a2a4445 	.word	0x2a2a4445
    7a84:	2a2a2a2a 	.word	0x2a2a2a2a
    7a88:	2a2a2a2a 	.word	0x2a2a2a2a
    7a8c:	2a2a2a2a 	.word	0x2a2a2a2a
    7a90:	2a2a2a2a 	.word	0x2a2a2a2a
    7a94:	00002a2a 	.word	0x00002a2a
    7a98:	41204e49 	.word	0x41204e49
    7a9c:	5f304344 	.word	0x5f304344
    7aa0:	61682030 	.word	0x61682030
    7aa4:	656c646e 	.word	0x656c646e
    7aa8:	00000072 	.word	0x00000072
    7aac:	41204e49 	.word	0x41204e49
    7ab0:	5f304344 	.word	0x5f304344
    7ab4:	61682031 	.word	0x61682031
    7ab8:	656c646e 	.word	0x656c646e
    7abc:	00000072 	.word	0x00000072
    7ac0:	656c6553 	.word	0x656c6553
    7ac4:	4c207463 	.word	0x4c207463
    7ac8:	20656e69 	.word	0x20656e69
    7acc:	20776f4c 	.word	0x20776f4c
    7ad0:	50202d20 	.word	0x50202d20
    7ad4:	0074726f 	.word	0x0074726f
    7ad8:	656c6553 	.word	0x656c6553
    7adc:	4c207463 	.word	0x4c207463
    7ae0:	20656e69 	.word	0x20656e69
    7ae4:	68676948 	.word	0x68676948
    7ae8:	50202d20 	.word	0x50202d20
    7aec:	0074726f 	.word	0x0074726f
    7af0:	736e6553 	.word	0x736e6553
    7af4:	0000726f 	.word	0x0000726f
    7af8:	20434441 	.word	0x20434441
    7afc:	6e756f43 	.word	0x6e756f43
    7b00:	00000074 	.word	0x00000074
    7b04:	746c6f56 	.word	0x746c6f56
    7b08:	20656761 	.word	0x20656761
    7b0c:	61206e6f 	.word	0x61206e6f
    7b10:	6f6c616e 	.word	0x6f6c616e
    7b14:	69702067 	.word	0x69702067
    7b18:	0000006e 	.word	0x0000006e

00007b1c <ModemCmdData>:
    7b1c:	00000200 00008ce8 00000000 00002439     ............9$..
    7b2c:	00000000 00000001 00007ffc 00020003     ................
    7b3c:	00002439 00000009 00000002 00008000     9$..............
    7b4c:	000f0008 00002439 0000001b 00000003     ....9$..........
    7b5c:	0000800c 000e000c 00002439 0000001e     ........9$......
    7b6c:	00000004 0000801c 000c0008 00002439     ............9$..
    7b7c:	00000018 00000005 00008028 00080005     ........(.......
    7b8c:	00002439 00000011 00000006 00008034     9$..........4...
    7b9c:	000b000a 00002439 00000019 00000007     ....9$..........
    7bac:	00008040 0015000a 00002439 00000023     @.......9$..#...
    7bbc:	00000008 0000804c 00020005 00002439     ....L.......9$..
    7bcc:	0000000b 00000109 00008054 003d0027     ........T...'.=.
    7bdc:	00002439 00000068 0000010a 0000807c     9$..h.......|...
    7bec:	00020012 00002439 00000018 0000010b     ....9$..........
    7bfc:	00008090 00020012 00002439 00000018     ........9$......
    7c0c:	0000010c 000080a4 00020012 00002439     ............9$..
    7c1c:	00000018 0000010d 000080b8 00020012     ................
    7c2c:	00002439 00000018 0000010e 000080cc     9$..............
    7c3c:	00020012 00002439 00000018 0000010f     ....9$..........
    7c4c:	000080e0 00020012 00002439 00000018     ........9$......
    7c5c:	00000110 000080f4 00020012 00002439     ............9$..
    7c6c:	00000018 00000111 00008108 00020012     ................
    7c7c:	00002439 00000018 00000112 0000811c     9$..............
    7c8c:	00020012 00002439 00000018 00000113     ....9$..........
    7c9c:	00008130 00020013 00002439 00000019     0.......9$......
    7cac:	00000114 00008144 0002001f 00002439     ....D.......9$..
    7cbc:	00000025 00000115 00008164 00020023     %.......d...#...
    7ccc:	00002439 00000029 00000116 00008188     9$..)...........
    7cdc:	0002001a 00002439 00000020 00000117     ....9$.. .......
    7cec:	20000000 00070011 00002439 0000001c     ... ....9$......
    7cfc:	00000118 200001cc 00bf003a 00002439     ....... :...9$..
    7d0c:	000000fd 00000119 000081a4 00020010     ................
    7d1c:	00002439 00000016 0000011a 000081b8     9$..............
    7d2c:	00020010 00002439 00000016 0000011b     ....9$..........
    7d3c:	000081cc 0002000b 00002439 00000011     ........9$......
	...
    7fcc:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    7fdc:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    7fec:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    7ffc:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    800c:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    801c:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    802c:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    803c:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    804c:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    805c:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    806c:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    807c:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    808c:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    809c:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    80ac:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    80bc:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    80cc:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    80dc:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    80ec:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    80fc:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    810c:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    811c:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    812c:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    813c:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    814c:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    815c:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    816c:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    817c:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    818c:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    819c:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    81ac:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    81bc:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    81cc:	432b5441 54544147 000d303d 6f727245     AT+CGATT=0..Erro
    81dc:	48203a72 20706165 6f6c6c61 69746163     r: Heap allocati
    81ec:	66206e6f 7020726f 65737261 74616420     on for parse dat
    81fc:	75622061 72656666 69616620 0064656c     a buffer failed.
    820c:	6f727245 4e203a72 6120746f 20656c62     Error: Not able 
    821c:	76206f74 66697265 68742079 6f632065     to verify the co
    822c:	6e616d6d 74732064 676e6972 72756420     mmand string dur
    823c:	20676e69 73726170 00676e69 6f727245     ing parsing.Erro
    824c:	4e203a72 6120746f 20656c62 72206f74     r: Not able to r
    825c:	20646165 61746164 6f726620 6572206d     ead data from re
    826c:	76696563 69722065 6220676e 65666675     ceive ring buffe
    827c:	75642072 676e6972 72617020 00726573     r during parser.
    828c:	6f727245 48203a72 20706165 6f6c6c61     Error: Heap allo
    829c:	69746163 66206e6f 7220726f 6f707365     cation for respo
    82ac:	2065736e 61746164 66756220 20726566     nse data buffer 
    82bc:	6c696166 00006465 00004b4f 6e6e6f43     failed..OK..Conn
    82cc:	69746365 74206e6f 6874206f 65732065     ection to the se
    82dc:	72657672 20736920 74736f6c 2e2e2e2e     rver is lost....
    82ec:	0000002e 69797254 7420676e 7365206f     ....Trying to es
    82fc:	6c626174 20687369 20656874 6e6e6f63     tablish the conn
    830c:	69746365 74206e6f 6573206f 72657672     ection to server
    831c:	502e2e2e 7361656c 61772065 2e2e7469     ...Please wait..
    832c:	2e2e2e2e 00000a0d 6c696146 74206465     ........Failed t
    833c:	6573206f 7420746e 53206568 69737365     o sent the Sessi
    834c:	43206e6f 65736f6c 71657220 74736575     on Close request
    835c:	206f7420 54207854 006b7361 6f727245      to Tx Task.Erro
    836c:	203a2072 20746f4e 656c6261 206f7420     r : Not able to 
    837c:	6174626f 54206e69 65532078 6170616d     obtain Tx Semapa
    838c:	65726f68 00000000 6e617254 74696d73     hore....Transmit
    839c:	65755120 69206575 6f6e2073 6d652074      Queue is not em
    83ac:	00797470 4d206f4e 2065726f 69746341     pty.No More Acti
    83bc:	43206576 656e6e6f 6f697463 7420736e     ve Connections t
    83cc:	6c63206f 0065736f 736f6c43 41206465     o close.Closed A
    83dc:	41206c6c 76697463 6f432065 63656e6e     ll Active Connec
    83ec:	6e6f6974 00000073 6c696146 74206465     tions...Failed t
    83fc:	6572206f 76696563 6f632065 63656e6e     o receive connec
    840c:	6e6f6974 73657220 736e6f70 6e692065     tion response in
    841c:	20585220 65646f6d 00000000 756f7242      RX mode....Brou
    842c:	20746867 20656874 20504450 6e6e6f63     ght the PDP conn
    843c:	69746365 44206e6f 004e574f 65707845     ection DOWN.Expe
    844c:	64657463 73655220 736e6f70 6f4e2065     cted Response No
    845c:	65522074 76696563 2e2e6465 0000002e     t Received......
    846c:	6c696146 74206465 6573206f 7420746e     Failed to sent t
    847c:	50206568 65442053 68636174 71657220     he PS Detach req
    848c:	74736575 206f7420 54207854 006b7361     uest to Tx Task.
    849c:	61746544 64656863 65687420 50445020     Detached the PDP
    84ac:	00535020 656c6544 20646574 206c6c61      PS.Deleted all 
    84bc:	7420666f 70206568 69766572 2073756f     of the previous 
    84cc:	6e6e6f63 69746365 63206e6f 69666e6f     connection confi
    84dc:	61727567 6e6f6974 00000073 6c696146     gurations...Fail
    84ec:	74206465 6573206f 7420746e 45206568     ed to sent the E
    84fc:	7020464f 65747461 74206e72 7854206f     OF pattern to Tx
    850c:	73615420 0000006b 20464f45 74746150      Task...EOF Patt
    851c:	206e7265 666e6f63 72756769 00006465     ern configured..
    852c:	6c696146 74206465 6573206f 6120746e     Failed to sent a
    853c:	73656363 6f702073 20746e69 20646d63     ccess point cmd 
    854c:	54206f74 61542078 00006b73 65636341     to Tx Task..Acce
    855c:	50207373 746e696f 6e6f6320 75676966     ss Point configu
    856c:	00646572 6c696146 74206465 6573206f     red.Failed to se
    857c:	6320746e 656e6e6f 6f697463 6974206e     nt connection ti
    858c:	2072656d 20646d63 54206f74 61542078     mer cmd to Tx Ta
    859c:	00006b73 6e6e6f43 69746365 54206e6f     sk..Connection T
    85ac:	72656d69 6f632073 6769666e 64657275     imers configured
    85bc:	00000000 6e6e6f43 69746365 53206e6f     ....Connection S
    85cc:	75746174 203a2073 43534944 454e4e4f     tatus : DISCONNE
    85dc:	44455443 45554420 204f5420 5754454e     CTED DUE TO NETW
    85ec:	004b524f 6e6e6f43 69746365 53206e6f     ORK.Connection S
    85fc:	75746174 203a2073 4e4e4f43 45544345     tatus : CONNECTE
    860c:	00000044 6e6e6f43 69746365 73206e6f     D...Connection s
    861c:	65636375 75667373 2e2e2e6c 756f6c43     uccessful...Clou
    862c:	65532064 72657672 6e6f6320 75676966     d Server configu
    863c:	00646572 6e6e6f43 69746365 53206e6f     red.Connection S
    864c:	75746174 203a2073 4c494146 54204445     tatus : FAILED T
    865c:	4f43204f 43454e4e 00000054 6e6e6f43     O CONNECT...Conn
    866c:	69746365 53206e6f 75746174 203a2073     ection Status : 
    867c:	4e4e4f43 49544345 43204e4f 45534f4c     CONNECTION CLOSE
    868c:	00000044 6e6e6f43 69746365 53206e6f     D...Connection S
    869c:	75746174 203a2073 4e4e4f43 49544345     tatus : CONNECTI
    86ac:	49204e4f 5250204e 4552474f 00005353     ON IN PROGRESS..
    86bc:	6e6e6f43 69746365 53206e6f 75746174     Connection Statu
    86cc:	203a2073 454c4449 4d495420 53205245     s : IDLE TIMER S
    86dc:	54524154 46204445 4420524f 4f435349     TARTED FOR DISCO
    86ec:	43454e4e 4e4f4954 00000000 6e6e6f43     NNECTION....Conn
    86fc:	69746365 53206e6f 75746174 203a2073     ection Status : 
    870c:	454c4449 4d495420 43205245 45434e41     IDLE TIMER CANCE
    871c:	44454c4c 00000000 6f727245 203a2072     LLED....Error : 
    872c:	6e6e6f43 69746365 46206e6f 756c6961     Connection Failu
    873c:	00006572 74736552 69747261 7420676e     re..Restarting t
    874c:	63206568 656e6e6f 6f697463 6e69206e     he connection in
    875c:	61697469 617a696c 6e6f6974 002e2e2e     itialization....
    876c:	4e4e4f43 00544345 736f6c43 20676e69     CONNECT.Closing 
    877c:	69746341 43206576 656e6e6f 6f697463     Active Connectio
    878c:	0000736e 4e4e4f43 0d544345 5454480a     ns..CONNECT..HTT
    879c:	2e312f50 30322031 4b4f2030 00000000     P/1.1 200 OK....
    87ac:	6f430a0d 63656e6e 6e6f6974 746e6920     ..Connection int
    87bc:	75727265 64657470 502e2e2e 6f667265     errupted...Perfo
    87cc:	6e696d72 68742067 72452065 20726f72     rming the Error 
    87dc:	6f636552 79726576 2e2e2e2e 00000a0d     Recovery........
    87ec:	736f6c43 20676e69 20656874 69746361     Closing the acti
    87fc:	63206576 656e6e6f 6f697463 0000006e     ve connection...
    880c:	626f7250 206d656c 41206e69 206f7475     Problem in Auto 
    881c:	6f636552 79726576 0000002e 69797254     Recovery....Tryi
    882c:	7420676e 6572206f 7473652d 696c6261     ng to re-establi
    883c:	74206873 63206568 656e6e6f 6f697463     sh the connectio
    884c:	6874206e 67756f72 20612068 65646f6d     n through a mode
    885c:	6572206d 72617473 2e2e2e74 000a0d2e     m restart.......
    886c:	6978614d 206d756d 72746572 6f632079     Maximum retry co
    887c:	20746e75 20726f66 6f747561 63657220     unt for auto rec
    888c:	7265766f 73692079 70786520 64657269     overy is expired
    889c:	0000002e 69797254 7420676e 6572206f     ....Trying to re
    88ac:	7473652d 696c6261 74206873 63206568     -establish the c
    88bc:	656e6e6f 6f697463 6874206e 67756f72     onnection throug
    88cc:	20612068 6c6f6877 79732065 6d657473     h a whole system
    88dc:	73657220 74726174 2e2e2e2e 00000a0d      restart........
    88ec:	6f727245 65522072 65766f63 43207972     Error Recovery C
    88fc:	6c706d6f 64657465 00000a0d 3d3d3d3d     ompleted....====
    890c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    891c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 3d3d3d3d     ================
    892c:	3d3d3d3d 3d3d3d3d 3d3d3d3d 000a0d3d     =============...
    893c:	61747345 73696c62 676e6968 6e206120     Establishing a n
    894c:	63207765 656e6e6f 6f697463 6977206e     ew connection wi
    895c:	73206874 65767265 00000072 74737953     th server...Syst
    896c:	69206d65 75612073 72206f74 766f6365     em is auto recov
    897c:	64657265 726f6620 726f6d20 68742065     ered for more th
    898c:	33206e61 6d697420 002e7365 66726550     an 3 times..Perf
    899c:	696d726f 6120676e 73797320 206d6574     orming a system 
    89ac:	74736572 2e747261 2e2e2e2e 2e2e2e2e     restart.........
    89bc:	2e2e2e2e 2e2e2e2e 0d2e2e2e 0000000a     ................
    89cc:	66726550 696d726f 6620676e 6563726f     Performing force
    89dc:	72652064 20726f72 6f636572 79726576     d error recovery
    89ec:	2e2e2e2e 00000a0d 6c696146 74206465     ........Failed t
    89fc:	6573206f 7420746e 44206568 20676169     o sent the Diag 
    8a0c:	61746164 206f7420 54207854 006b7361     data to Tx Task.
    8a1c:	69726556 6e697966 68742067 41552065     Verifying the UA
    8a2c:	4c205452 206b6e69 74617473 77207375     RT Link status w
    8a3c:	20687469 65646f4d 0000006d 63637553     ith Modem...Succ
    8a4c:	46737365 796c6c75 72657620 65696669     essFully verifie
    8a5c:	68742064 41552065 4c205452 206b6e69     d the UART Link 
    8a6c:	77746562 206e6565 444d4153 43203135     between SAMD51 C
    8a7c:	72746e6f 656c6c6f 20262072 65646f4d     ontroller & Mode
    8a8c:	0000006d 72746552 65766569 68742064     m...Retrieved th
    8a9c:	6f4d2065 206d6564 49454d49 6d754e20     e Modem IMEI Num
    8aac:	00726562 72746552 65766569 68742064     ber.Retrieved th
    8abc:	6f4d2065 206d6564 69726573 4e206c61     e Modem serial N
    8acc:	65626d75 00000072 72756f48 5320796c     umber...Hourly S
    8adc:	65747379 6552206d 72617473 69742074     ystem Restart ti
    8aec:	2072656d 69707865 2e646572 62655220     mer expired. Reb
    8afc:	69746f6f 7420676e 73206568 65747379     ooting the syste
    8b0c:	0a0d2e6d 00000000 72756f48 7953796c     m.......HourlySy
    8b1c:	6d657473 74736552 54747261 72656d69     stemRestartTimer
    8b2c:	00000000 6b636150 72547465 6d736e61     ....PacketTransm
    8b3c:	65507469 646f6972 69546369 0072656d     itPeriodicTimer.
    8b4c:	65646f4d 6974206d 7372656d 65726120     Modem timers are
    8b5c:	61747320 64657472 00000000 6c696146      started....Fail
    8b6c:	74206465 6e69206f 61697469 657a696c     ed to initialize
    8b7c:	65687420 646f6d20 74206d65 72656d69      the modem timer
    8b8c:	52202e73 6f6f6265 676e6974 65687420     s. Rebooting the
    8b9c:	73797320 006d6574 6c696146 74206465      system.Failed t
    8bac:	6f70206f 74207473 63206568 656e6e6f     o post the conne
    8bbc:	6f697463 6552206e 6e6f7073 74206573     ction Response t
    8bcc:	7551206f 00657565 6f727245 203a2072     o Queue.Error : 
    8bdc:	6d6d6f43 20646e61 70736552 65736e6f     Command Response
    8bec:	65755120 69206575 6f6e2073 6d652074      Queue is not em
    8bfc:	00797470 4f525245 52203a52 69656365     pty.ERROR: Recei
    8c0c:	20646576 65206e61 7974706d 73657220     ved an empty res
    8c1c:	736e6f70 74732065 676e6972 206e6920     ponse string in 
    8c2c:	6d6d6f63 20646e61 70736572 65736e6f     command response
    8c3c:	6e616820 72656c64 00000000 4f525245      handler....ERRO
    8c4c:	43203a52 616d6d6f 5020646e 69737261     R: Command Parsi
    8c5c:	4620676e 656c6961 00000064 6f4e0a0d     ng Failed.....No
    8c6c:	62612074 7420656c 7561206f 72206f74     t able to auto r
    8c7c:	766f6365 66207265 206d6f72 6e6e6f63     ecover from conn
    8c8c:	69746365 66206e6f 756c6961 2e2e6572     ection failure..
    8c9c:	6265522e 69746f6f 2e2e676e 00002e2e     .Rebooting......
    8cac:	73207854 61697265 6544206c 20677562     Tx serial Debug 
    8cbc:	656e6f44 00000a0d 44207852 0d656e6f     Done....Rx Done.
    8ccc:	0000000a 2d207325 20642520 00000a0d     ....%s - %d ....
    8cdc:	2d207325 6d642520 0a0d2056 00000000     %s - %dmV ......
    8cec:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
    8cfc:	775f6c61 682e7464 00000000 6f626552     al_wdt.h....Rebo
    8d0c:	6e69746f 2e2e2e67 61656c50 77206573     oting...Please w
    8d1c:	2e746961 00002e2e 682f2e2e 732f6c61     ait......./hal/s
    8d2c:	682f6372 615f6c61 79735f63 632e636e     rc/hal_ac_sync.c
    8d3c:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    8d4c:	615f6c61 735f6364 2e636e79 00000063     al_adc_sync.c...
    8d5c:	682f2e2e 732f6c61 682f6372 645f6c61     ../hal/src/hal_d
    8d6c:	735f6361 2e636e79 00000063 682f2e2e     ac_sync.c...../h
    8d7c:	732f6c61 682f6372 665f6c61 6873616c     al/src/hal_flash
    8d8c:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
    8d9c:	705f6c61 632e6d77 00000000 682f2e2e     al_pwm.c....../h
    8dac:	732f6c61 682f6372 745f6c61 72656d69     al/src/hal_timer
    8dbc:	0000632e 682f2e2e 752f6c61 736c6974     .c..../hal/utils
    8dcc:	6372732f 6974752f 6c5f736c 2e747369     /src/utils_list.
    8ddc:	00000063 682f2e2e 752f6c61 736c6974     c...../hal/utils
    8dec:	6372732f 6974752f 725f736c 62676e69     /src/utils_ringb
    8dfc:	65666675 00632e72 682f2e2e 612f6c70     uffer.c.../hpl/a
    8e0c:	70682f63 63615f6c 0000632e              c/hpl_ac.c..

00008e18 <_adcs>:
    8e18:	00c00000 00830000 80001900 00000000     ................
    8e28:	00000000 00010001 00000000 00000000     ................
	...
    8e44:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    8e54:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    8e64:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00008e74 <_cfgs>:
	...

00008f74 <user_mux_confs>:
	...

00008fb8 <channel_confs>:
	...

00008ff8 <interrupt_cfg>:
	...
    9078:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    9088:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    9098:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    90a8:	43000000 43000400                       ...C...C

000090b0 <_usarts>:
    90b0:	00000003 40200004 00030000 00700002     ...... @......p.
    90c0:	0000f62b 00000000 00000004 40300184     +.............0@
    90d0:	00030300 00700002 0000ff2e 00000000     ......p.........
    90e0:	00000005 40300004 00030000 00700002     ......0@......p.
    90f0:	0000f62b 00000000                       +.......

000090f8 <_i2cms>:
	...

00009110 <sercomspi_regs>:
	...
    9124:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    9134:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    9144:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00009154 <_tccs>:
    9154:	00000000 00000300 00000000 00000000     ................
    9164:	00001770 00000000 00000000 00000000     p...............
    9174:	00000000 00000001 00000300 00000000     ................
    9184:	00000000 00001770 00000000 00000000     ....p...........
	...
    919c:	00000002 00000300 00000000 00000000     ................
    91ac:	00001770 00000000 00000000 00000000     p...............
    91bc:	00000000 00000003 00000300 00000000     ................
    91cc:	00000000 00001770 00000000 00000000     ....p...........
	...
    91e4:	00000004 00000300 00000000 00000000     ................
    91f4:	00001770 00000000 00000000 00000000     p...............
    9204:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    9214:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    9224:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    9234:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    9244:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    9254:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    9264:	736e6553 6154726f 00006b73 65646f4d     SensorTask..Mode
    9274:	5478546d 006b7361 65646f4d 5478526d     mTxTask.ModemRxT
    9284:	006b7361 65646f4d 6f72506d 73736563     ask.ModemProcess
    9294:	6b736154 00000000 65646f4d 6169446d     Task....ModemDia
    92a4:	73615467 0000006b 65657246 4f545220     gTask...Free RTO
    92b4:	63532053 75646568 2072656c 20746f6e     S Scheduler not 
    92c4:	72617473 00646574 6c696146 74206465     started.Failed t
    92d4:	7263206f 65746165 73617420 0000736b     o create tasks..
    92e4:	6f727245 53203a72 64656863 72656c75     Error: Scheduler
    92f4:	69786520 00646574 454c4449 00000000      exited.IDLE....
    9304:	09632509 25097525 75250975 00000a0d     .%c.%u.%u.%u....
    9314:	20726d54 00637653                       Tmr Svc.

0000931c <__sf_fake_stderr>:
	...

0000933c <__sf_fake_stdin>:
	...

0000935c <__sf_fake_stdout>:
	...
    937c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    938c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    939c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    93ac:	00006665                                ef..

000093b0 <_init>:
    93b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93b2:	bf00      	nop
    93b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    93b6:	bc08      	pop	{r3}
    93b8:	469e      	mov	lr, r3
    93ba:	4770      	bx	lr

000093bc <__init_array_start>:
    93bc:	00000289 	.word	0x00000289

000093c0 <_fini>:
    93c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    93c2:	bf00      	nop
    93c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    93c6:	bc08      	pop	{r3}
    93c8:	469e      	mov	lr, r3
    93ca:	4770      	bx	lr

000093cc <__fini_array_start>:
    93cc:	00000265 	.word	0x00000265
