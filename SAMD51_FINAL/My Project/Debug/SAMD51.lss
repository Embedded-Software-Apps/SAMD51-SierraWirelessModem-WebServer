
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003520  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000f4  20000000  00003520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200f4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200f4  2**0
                  CONTENTS
  4 .bss          00001118  20000100  00003620  000200f4  2**4
                  ALLOC
  5 .stack        00010000  20001218  00004738  000200f4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020122  2**0
                  CONTENTS, READONLY
  8 .debug_info   0004dcef  00000000  00000000  0002017b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00007430  00000000  00000000  0006de6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001738f  00000000  00000000  0007529a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001730  00000000  00000000  0008c629  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001c60  00000000  00000000  0008dd59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00015e7a  00000000  00000000  0008f9b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025770  00000000  00000000  000a5833  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105481  00000000  00000000  000cafa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003a04  00000000  00000000  001d0424  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
TickType_t xTicksToWait = pdMS_TO_TICKS(6100);
char printBuff[50];


void ModemTask( void *ModemTaskParam)
{
       0:	18 12 01 20 c9 07 00 00 c5 07 00 00 c5 07 00 00     ... ............
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
        {
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
        }
        
        xQueueReceiveStatus = xQueueReceive( xDataQueue, &ReceivedMsg, xTicksToWait );
      10:	c5 07 00 00 c5 07 00 00 c5 07 00 00 00 00 00 00     ................
	...
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
      2c:	51 28 00 00 c5 07 00 00 00 00 00 00 81 28 00 00     Q(...........(..
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
      3c:	e5 28 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     .(..............
        
        if(xQueueReceiveStatus == pdPASS)
        {
            sprintf(printBuff,"Received ADC Value is %d\r\n",ReceivedMsg.AdcReading);
            SerialDebugPrint((uint8_t*)printBuff,sizeof(printBuff)); 
      4c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      5c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      6c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      7c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      8c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      9c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      ac:	c5 07 00 00 c5 07 00 00 11 1b 00 00 25 1b 00 00     ............%...
      bc:	a1 18 00 00 ad 18 00 00 b9 18 00 00 c5 18 00 00     ................
      cc:	d1 18 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      dc:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
      ec:	c5 07 00 00 00 00 00 00 19 1c 00 00 c5 07 00 00     ................
      fc:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     10c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     11c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 b5 04 00 00     ................
     12c:	f9 04 00 00 45 05 00 00 c5 07 00 00 c5 07 00 00     ....E...........
     13c:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     14c:	c5 07 00 00 65 07 00 00 c5 07 00 00 00 00 00 00     ....e...........
	...
     180:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     190:	00 00 00 00 a9 21 00 00 c5 07 00 00 c5 07 00 00     .....!..........
     1a0:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     1b0:	bd 21 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     .!..............
     1c0:	c5 07 00 00 d1 21 00 00 c5 07 00 00 c5 07 00 00     .....!..........
     1d0:	c5 07 00 00 e5 21 00 00 c5 07 00 00 c5 07 00 00     .....!..........
     1e0:	f9 21 00 00 c5 07 00 00 c5 07 00 00 ed 26 00 00     .!...........&..
     1f0:	01 27 00 00 15 27 00 00 29 27 00 00 3d 27 00 00     .'...'..)'..='..
     200:	51 27 00 00 00 00 00 00 00 00 00 00 c5 07 00 00     Q'..............
     210:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     220:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     230:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     240:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     250:	c5 07 00 00 c5 07 00 00 c5 07 00 00 c5 07 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000100 	.word	0x20000100
     280:	00000000 	.word	0x00000000
     284:	00003520 	.word	0x00003520

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003520 	.word	0x00003520
     2c4:	20000104 	.word	0x20000104
     2c8:	00003520 	.word	0x00003520
     2cc:	00000000 	.word	0x00000000

000002d0 <defaultFunctionPointer>:




void defaultFunctionPointer(void)
{
     2d0:	4770      	bx	lr
	...

000002d4 <mdmParser_SendCommandToModem>:
{
     2d4:	b510      	push	{r4, lr}
     2d6:	4604      	mov	r4, r0
	mdmCtrlr_SendDataToModem(ModemCmdData[atCmd].AtString,ModemCmdData[atCmd].CmdLength);
     2d8:	4b06      	ldr	r3, [pc, #24]	; (2f4 <mdmParser_SendCommandToModem+0x20>)
     2da:	0082      	lsls	r2, r0, #2
     2dc:	1811      	adds	r1, r2, r0
     2de:	eb03 0181 	add.w	r1, r3, r1, lsl #2
     2e2:	460b      	mov	r3, r1
     2e4:	7a09      	ldrb	r1, [r1, #8]
     2e6:	6858      	ldr	r0, [r3, #4]
     2e8:	4b03      	ldr	r3, [pc, #12]	; (2f8 <mdmParser_SendCommandToModem+0x24>)
     2ea:	4798      	blx	r3
	lastSendATCommand = atCmd;
     2ec:	4b03      	ldr	r3, [pc, #12]	; (2fc <mdmParser_SendCommandToModem+0x28>)
     2ee:	701c      	strb	r4, [r3, #0]
     2f0:	bd10      	pop	{r4, pc}
     2f2:	bf00      	nop
     2f4:	00002b80 	.word	0x00002b80
     2f8:	00000579 	.word	0x00000579
     2fc:	20000000 	.word	0x20000000

00000300 <mdmParser_ProcessModemResponse>:
{
     300:	b5f0      	push	{r4, r5, r6, r7, lr}
     302:	b091      	sub	sp, #68	; 0x44
	if(false != mdmParser_solicitedCmdParser(lastSendATCommand,responseDataBuffer))
     304:	4b31      	ldr	r3, [pc, #196]	; (3cc <mdmParser_ProcessModemResponse+0xcc>)
	MODEM_CMD_DATA cmdData = ModemCmdData[cmd];
     306:	781b      	ldrb	r3, [r3, #0]
     308:	eb03 0283 	add.w	r2, r3, r3, lsl #2
     30c:	4b30      	ldr	r3, [pc, #192]	; (3d0 <mdmParser_ProcessModemResponse+0xd0>)
     30e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     312:	685f      	ldr	r7, [r3, #4]
     314:	7a1c      	ldrb	r4, [r3, #8]
     316:	7a5d      	ldrb	r5, [r3, #9]
     318:	7c1e      	ldrb	r6, [r3, #16]
	readStatus = mdmCtrlr_ReadResponseFromModem(dataBuffer,cmdData.ResponseLength);
     31a:	4631      	mov	r1, r6
     31c:	a801      	add	r0, sp, #4
     31e:	4b2d      	ldr	r3, [pc, #180]	; (3d4 <mdmParser_ProcessModemResponse+0xd4>)
     320:	4798      	blx	r3
	if(readStatus != false)
     322:	2800      	cmp	r0, #0
     324:	d043      	beq.n	3ae <mdmParser_ProcessModemResponse+0xae>
		SerialDebugPrint(dataBuffer,cmdData.ResponseLength);
     326:	4631      	mov	r1, r6
     328:	a801      	add	r0, sp, #4
     32a:	4b2b      	ldr	r3, [pc, #172]	; (3d8 <mdmParser_ProcessModemResponse+0xd8>)
     32c:	4798      	blx	r3
		if(VERIFIED_EQUAL == strncmp(cmdData.AtString, dataBuffer, cmdData.CmdLength))
     32e:	4622      	mov	r2, r4
     330:	a901      	add	r1, sp, #4
     332:	4638      	mov	r0, r7
     334:	4b29      	ldr	r3, [pc, #164]	; (3dc <mdmParser_ProcessModemResponse+0xdc>)
     336:	4798      	blx	r3
     338:	2800      	cmp	r0, #0
     33a:	d133      	bne.n	3a4 <mdmParser_ProcessModemResponse+0xa4>
			SerialDebugPrint("Successfully parsed the command string\r\n",40);
     33c:	2128      	movs	r1, #40	; 0x28
     33e:	4828      	ldr	r0, [pc, #160]	; (3e0 <mdmParser_ProcessModemResponse+0xe0>)
     340:	4b25      	ldr	r3, [pc, #148]	; (3d8 <mdmParser_ProcessModemResponse+0xd8>)
     342:	4798      	blx	r3
			while(parseCnt < cmdData.validDataCnt)
     344:	b365      	cbz	r5, 3a0 <mdmParser_ProcessModemResponse+0xa0>
     346:	3402      	adds	r4, #2
     348:	b2e4      	uxtb	r4, r4
     34a:	1e63      	subs	r3, r4, #1
     34c:	aa01      	add	r2, sp, #4
     34e:	4413      	add	r3, r2
     350:	4a24      	ldr	r2, [pc, #144]	; (3e4 <mdmParser_ProcessModemResponse+0xe4>)
     352:	1e68      	subs	r0, r5, #1
     354:	fa54 f080 	uxtab	r0, r4, r0
     358:	a901      	add	r1, sp, #4
     35a:	4408      	add	r0, r1
				response[parseCnt] = dataBuffer[dataStartIndex + parseCnt];
     35c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     360:	f802 1f01 	strb.w	r1, [r2, #1]!
			while(parseCnt < cmdData.validDataCnt)
     364:	4283      	cmp	r3, r0
     366:	d1f9      	bne.n	35c <mdmParser_ProcessModemResponse+0x5c>
			response[parseCnt] = '\0';
     368:	4e1f      	ldr	r6, [pc, #124]	; (3e8 <mdmParser_ProcessModemResponse+0xe8>)
     36a:	2300      	movs	r3, #0
     36c:	5573      	strb	r3, [r6, r5]
			SerialDebugPrint("Successfully updated the cmd response data to buffer\r\n",50);
     36e:	2132      	movs	r1, #50	; 0x32
     370:	481e      	ldr	r0, [pc, #120]	; (3ec <mdmParser_ProcessModemResponse+0xec>)
     372:	4c19      	ldr	r4, [pc, #100]	; (3d8 <mdmParser_ProcessModemResponse+0xd8>)
     374:	47a0      	blx	r4
	mdmCtrlr_FlushRxBuffer();
     376:	4b1e      	ldr	r3, [pc, #120]	; (3f0 <mdmParser_ProcessModemResponse+0xf0>)
     378:	4798      	blx	r3
		SerialDebugPrint("Successfully Received modem response data\r\n",40);
     37a:	2128      	movs	r1, #40	; 0x28
     37c:	481d      	ldr	r0, [pc, #116]	; (3f4 <mdmParser_ProcessModemResponse+0xf4>)
     37e:	47a0      	blx	r4
		SerialDebugPrint(responseDataBuffer,ModemCmdData[lastSendATCommand].validDataCnt);
     380:	4d12      	ldr	r5, [pc, #72]	; (3cc <mdmParser_ProcessModemResponse+0xcc>)
     382:	782b      	ldrb	r3, [r5, #0]
     384:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     388:	4a11      	ldr	r2, [pc, #68]	; (3d0 <mdmParser_ProcessModemResponse+0xd0>)
     38a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     38e:	7a59      	ldrb	r1, [r3, #9]
     390:	4630      	mov	r0, r6
     392:	47a0      	blx	r4
		SerialDebugPrint("\r\n",2);
     394:	2102      	movs	r1, #2
     396:	4818      	ldr	r0, [pc, #96]	; (3f8 <mdmParser_ProcessModemResponse+0xf8>)
     398:	47a0      	blx	r4
		lastSendATCommand = CMD_AT_MAX;
     39a:	2308      	movs	r3, #8
     39c:	702b      	strb	r3, [r5, #0]
     39e:	e013      	b.n	3c8 <mdmParser_ProcessModemResponse+0xc8>
	uint8_t parseCnt=0;
     3a0:	2500      	movs	r5, #0
     3a2:	e7e1      	b.n	368 <mdmParser_ProcessModemResponse+0x68>
			SerialDebugPrint("Failed to verify the command string\r\n",40);
     3a4:	2128      	movs	r1, #40	; 0x28
     3a6:	4815      	ldr	r0, [pc, #84]	; (3fc <mdmParser_ProcessModemResponse+0xfc>)
     3a8:	4b0b      	ldr	r3, [pc, #44]	; (3d8 <mdmParser_ProcessModemResponse+0xd8>)
     3aa:	4798      	blx	r3
     3ac:	e003      	b.n	3b6 <mdmParser_ProcessModemResponse+0xb6>
		SerialDebugPrint("Read from modem controller is failed\r\n",40);
     3ae:	2128      	movs	r1, #40	; 0x28
     3b0:	4813      	ldr	r0, [pc, #76]	; (400 <mdmParser_ProcessModemResponse+0x100>)
     3b2:	4b09      	ldr	r3, [pc, #36]	; (3d8 <mdmParser_ProcessModemResponse+0xd8>)
     3b4:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
     3b6:	4b0e      	ldr	r3, [pc, #56]	; (3f0 <mdmParser_ProcessModemResponse+0xf0>)
     3b8:	4798      	blx	r3
		SerialDebugPrint("Failed to Receive modem response data\r\n",40);
     3ba:	2128      	movs	r1, #40	; 0x28
     3bc:	4811      	ldr	r0, [pc, #68]	; (404 <mdmParser_ProcessModemResponse+0x104>)
     3be:	4b06      	ldr	r3, [pc, #24]	; (3d8 <mdmParser_ProcessModemResponse+0xd8>)
     3c0:	4798      	blx	r3
		lastSendATCommand = CMD_AT_MAX;
     3c2:	2208      	movs	r2, #8
     3c4:	4b01      	ldr	r3, [pc, #4]	; (3cc <mdmParser_ProcessModemResponse+0xcc>)
     3c6:	701a      	strb	r2, [r3, #0]
}
     3c8:	b011      	add	sp, #68	; 0x44
     3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3cc:	20000000 	.word	0x20000000
     3d0:	00002b80 	.word	0x00002b80
     3d4:	000005a1 	.word	0x000005a1
     3d8:	00000721 	.word	0x00000721
     3dc:	00002b5d 	.word	0x00002b5d
     3e0:	00002d10 	.word	0x00002d10
     3e4:	2000011b 	.word	0x2000011b
     3e8:	2000011c 	.word	0x2000011c
     3ec:	00002d3c 	.word	0x00002d3c
     3f0:	000005f9 	.word	0x000005f9
     3f4:	00002d74 	.word	0x00002d74
     3f8:	00002f7c 	.word	0x00002f7c
     3fc:	00002da0 	.word	0x00002da0
     400:	00002dc8 	.word	0x00002dc8
     404:	00002df0 	.word	0x00002df0

00000408 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&MODEM_DATA,SERCOM3);
     40a:	491e      	ldr	r1, [pc, #120]	; (484 <mdmCtrlr_DataCommInit+0x7c>)
     40c:	481e      	ldr	r0, [pc, #120]	; (488 <mdmCtrlr_DataCommInit+0x80>)
     40e:	4b1f      	ldr	r3, [pc, #124]	; (48c <mdmCtrlr_DataCommInit+0x84>)
     410:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     412:	b180      	cbz	r0, 436 <mdmCtrlr_DataCommInit+0x2e>
		sprintf(printBuff,"MODEM DATA UART (SERCOM3) initialized\r\n");
		SerialDebugPrint(printBuff,sizeof(printBuff));
	}
	else
	{
		sprintf(printBuff,"SERCOM3 not initialized\r\n");
     414:	4d1e      	ldr	r5, [pc, #120]	; (490 <mdmCtrlr_DataCommInit+0x88>)
     416:	4c1f      	ldr	r4, [pc, #124]	; (494 <mdmCtrlr_DataCommInit+0x8c>)
     418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     41a:	6028      	str	r0, [r5, #0]
     41c:	6069      	str	r1, [r5, #4]
     41e:	60aa      	str	r2, [r5, #8]
     420:	60eb      	str	r3, [r5, #12]
     422:	cc03      	ldmia	r4!, {r0, r1}
     424:	6128      	str	r0, [r5, #16]
     426:	6169      	str	r1, [r5, #20]
     428:	8823      	ldrh	r3, [r4, #0]
     42a:	832b      	strh	r3, [r5, #24]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     42c:	2128      	movs	r1, #40	; 0x28
     42e:	4628      	mov	r0, r5
     430:	4b19      	ldr	r3, [pc, #100]	; (498 <mdmCtrlr_DataCommInit+0x90>)
     432:	4798      	blx	r3
     434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     436:	f44f 6200 	mov.w	r2, #2048	; 0x800
     43a:	4918      	ldr	r1, [pc, #96]	; (49c <mdmCtrlr_DataCommInit+0x94>)
     43c:	4818      	ldr	r0, [pc, #96]	; (4a0 <mdmCtrlr_DataCommInit+0x98>)
     43e:	4b19      	ldr	r3, [pc, #100]	; (4a4 <mdmCtrlr_DataCommInit+0x9c>)
     440:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     442:	2800      	cmp	r0, #0
     444:	d1e6      	bne.n	414 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_DATA,USART_ASYNC_RX_DONE,true);
     446:	4c10      	ldr	r4, [pc, #64]	; (488 <mdmCtrlr_DataCommInit+0x80>)
     448:	2201      	movs	r2, #1
     44a:	4611      	mov	r1, r2
     44c:	4620      	mov	r0, r4
     44e:	4b16      	ldr	r3, [pc, #88]	; (4a8 <mdmCtrlr_DataCommInit+0xa0>)
     450:	4798      	blx	r3
		_usart_async_enable(&MODEM_DATA);
     452:	4620      	mov	r0, r4
     454:	4b15      	ldr	r3, [pc, #84]	; (4ac <mdmCtrlr_DataCommInit+0xa4>)
     456:	4798      	blx	r3
		sprintf(printBuff,"MODEM DATA UART (SERCOM3) initialized\r\n");
     458:	4c15      	ldr	r4, [pc, #84]	; (4b0 <mdmCtrlr_DataCommInit+0xa8>)
     45a:	4d0d      	ldr	r5, [pc, #52]	; (490 <mdmCtrlr_DataCommInit+0x88>)
     45c:	f104 0720 	add.w	r7, r4, #32
     460:	4626      	mov	r6, r4
     462:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     464:	6028      	str	r0, [r5, #0]
     466:	6069      	str	r1, [r5, #4]
     468:	60aa      	str	r2, [r5, #8]
     46a:	60eb      	str	r3, [r5, #12]
     46c:	4634      	mov	r4, r6
     46e:	3510      	adds	r5, #16
     470:	42be      	cmp	r6, r7
     472:	d1f5      	bne.n	460 <mdmCtrlr_DataCommInit+0x58>
     474:	cc03      	ldmia	r4!, {r0, r1}
     476:	6028      	str	r0, [r5, #0]
     478:	6069      	str	r1, [r5, #4]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     47a:	2128      	movs	r1, #40	; 0x28
     47c:	4804      	ldr	r0, [pc, #16]	; (490 <mdmCtrlr_DataCommInit+0x88>)
     47e:	4b06      	ldr	r3, [pc, #24]	; (498 <mdmCtrlr_DataCommInit+0x90>)
     480:	4798      	blx	r3
     482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     484:	41014000 	.word	0x41014000
     488:	20000004 	.word	0x20000004
     48c:	00001d95 	.word	0x00001d95
     490:	20001010 	.word	0x20001010
     494:	00002e70 	.word	0x00002e70
     498:	00000721 	.word	0x00000721
     49c:	20000800 	.word	0x20000800
     4a0:	20001000 	.word	0x20001000
     4a4:	000013a9 	.word	0x000013a9
     4a8:	00001e31 	.word	0x00001e31
     4ac:	00001df9 	.word	0x00001df9
     4b0:	00002e8c 	.word	0x00002e8c

000004b4 <SERCOM3_0_Handler>:
**
** Description:        DRE: TX Data Register Empty Interrupt
**
**===========================================================================*/
void SERCOM3_0_Handler( void )
{
     4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* DRE: TX Data Register Empty */
	sprintf(printBuff,"Modem Data Tx Data Reg Empty CallBack\r\n");
     4b6:	4c0c      	ldr	r4, [pc, #48]	; (4e8 <SERCOM3_0_Handler+0x34>)
     4b8:	4d0c      	ldr	r5, [pc, #48]	; (4ec <SERCOM3_0_Handler+0x38>)
     4ba:	f104 0720 	add.w	r7, r4, #32
     4be:	4626      	mov	r6, r4
     4c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     4c2:	6028      	str	r0, [r5, #0]
     4c4:	6069      	str	r1, [r5, #4]
     4c6:	60aa      	str	r2, [r5, #8]
     4c8:	60eb      	str	r3, [r5, #12]
     4ca:	4634      	mov	r4, r6
     4cc:	3510      	adds	r5, #16
     4ce:	42be      	cmp	r6, r7
     4d0:	d1f5      	bne.n	4be <SERCOM3_0_Handler+0xa>
     4d2:	cc03      	ldmia	r4!, {r0, r1}
     4d4:	6028      	str	r0, [r5, #0]
     4d6:	6069      	str	r1, [r5, #4]
	SerialDebugPrint(printBuff,sizeof(printBuff));
     4d8:	2128      	movs	r1, #40	; 0x28
     4da:	4804      	ldr	r0, [pc, #16]	; (4ec <SERCOM3_0_Handler+0x38>)
     4dc:	4b04      	ldr	r3, [pc, #16]	; (4f0 <SERCOM3_0_Handler+0x3c>)
     4de:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     4e0:	2201      	movs	r2, #1
     4e2:	4b04      	ldr	r3, [pc, #16]	; (4f4 <SERCOM3_0_Handler+0x40>)
     4e4:	761a      	strb	r2, [r3, #24]
     4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     4e8:	00002eb4 	.word	0x00002eb4
     4ec:	20001010 	.word	0x20001010
     4f0:	00000721 	.word	0x00000721
     4f4:	41014000 	.word	0x41014000

000004f8 <SERCOM3_1_Handler>:
**
** Description:        TXC : Transmit Complete Interrupt
**
**===========================================================================*/
void SERCOM3_1_Handler(void )
{
     4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* TXC : Transmit Complete */
	sprintf(printBuff,"Modem Data Tx byte Complete Callback\r\n");
     4fa:	4e0e      	ldr	r6, [pc, #56]	; (534 <SERCOM3_1_Handler+0x3c>)
     4fc:	4c0e      	ldr	r4, [pc, #56]	; (538 <SERCOM3_1_Handler+0x40>)
     4fe:	f106 0720 	add.w	r7, r6, #32
     502:	4635      	mov	r5, r6
     504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     506:	6020      	str	r0, [r4, #0]
     508:	6061      	str	r1, [r4, #4]
     50a:	60a2      	str	r2, [r4, #8]
     50c:	60e3      	str	r3, [r4, #12]
     50e:	462e      	mov	r6, r5
     510:	3410      	adds	r4, #16
     512:	42bd      	cmp	r5, r7
     514:	d1f5      	bne.n	502 <SERCOM3_1_Handler+0xa>
     516:	6828      	ldr	r0, [r5, #0]
     518:	6020      	str	r0, [r4, #0]
     51a:	88aa      	ldrh	r2, [r5, #4]
     51c:	79ab      	ldrb	r3, [r5, #6]
     51e:	80a2      	strh	r2, [r4, #4]
     520:	71a3      	strb	r3, [r4, #6]
	SerialDebugPrint(printBuff,sizeof(printBuff));
     522:	2128      	movs	r1, #40	; 0x28
     524:	4804      	ldr	r0, [pc, #16]	; (538 <SERCOM3_1_Handler+0x40>)
     526:	4b05      	ldr	r3, [pc, #20]	; (53c <SERCOM3_1_Handler+0x44>)
     528:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     52a:	2202      	movs	r2, #2
     52c:	4b04      	ldr	r3, [pc, #16]	; (540 <SERCOM3_1_Handler+0x48>)
     52e:	761a      	strb	r2, [r3, #24]
     530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     532:	bf00      	nop
     534:	00002edc 	.word	0x00002edc
     538:	20001010 	.word	0x20001010
     53c:	00000721 	.word	0x00000721
     540:	41014000 	.word	0x41014000

00000544 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     544:	b538      	push	{r3, r4, r5, lr}
	uint8_t rcvdChar;
	
	while (!_usart_async_is_byte_received(&MODEM_DATA));
     546:	4d07      	ldr	r5, [pc, #28]	; (564 <SERCOM3_2_Handler+0x20>)
     548:	4c07      	ldr	r4, [pc, #28]	; (568 <SERCOM3_2_Handler+0x24>)
     54a:	4628      	mov	r0, r5
     54c:	47a0      	blx	r4
     54e:	2800      	cmp	r0, #0
     550:	d0fb      	beq.n	54a <SERCOM3_2_Handler+0x6>
	rcvdChar = _usart_async_read_byte(&MODEM_DATA);
     552:	4804      	ldr	r0, [pc, #16]	; (564 <SERCOM3_2_Handler+0x20>)
     554:	4b05      	ldr	r3, [pc, #20]	; (56c <SERCOM3_2_Handler+0x28>)
     556:	4798      	blx	r3
	
	ringbuffer_put(&RxRingBuffer, rcvdChar);
     558:	4601      	mov	r1, r0
     55a:	4805      	ldr	r0, [pc, #20]	; (570 <SERCOM3_2_Handler+0x2c>)
     55c:	4b05      	ldr	r3, [pc, #20]	; (574 <SERCOM3_2_Handler+0x30>)
     55e:	4798      	blx	r3
     560:	bd38      	pop	{r3, r4, r5, pc}
     562:	bf00      	nop
     564:	20000004 	.word	0x20000004
     568:	00001e25 	.word	0x00001e25
     56c:	00001e13 	.word	0x00001e13
     570:	20001000 	.word	0x20001000
     574:	0000143d 	.word	0x0000143d

00000578 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     578:	b570      	push	{r4, r5, r6, lr}
     57a:	4605      	mov	r5, r0
     57c:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_DATA);
     57e:	4c05      	ldr	r4, [pc, #20]	; (594 <mdmCtrlr_SendDataToModem+0x1c>)
     580:	4620      	mov	r0, r4
     582:	4b05      	ldr	r3, [pc, #20]	; (598 <mdmCtrlr_SendDataToModem+0x20>)
     584:	4798      	blx	r3
	return usart_async_write(&MODEM_DATA, TxData, length);
     586:	4632      	mov	r2, r6
     588:	4629      	mov	r1, r5
     58a:	4620      	mov	r0, r4
     58c:	4b03      	ldr	r3, [pc, #12]	; (59c <mdmCtrlr_SendDataToModem+0x24>)
     58e:	4798      	blx	r3
}
     590:	bd70      	pop	{r4, r5, r6, pc}
     592:	bf00      	nop
     594:	20000004 	.word	0x20000004
     598:	00001df9 	.word	0x00001df9
     59c:	0000069d 	.word	0x0000069d

000005a0 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     5a4:	b082      	sub	sp, #8
     5a6:	4606      	mov	r6, r0
     5a8:	460d      	mov	r5, r1
	bool status = false;
	
	uint8_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     5aa:	480e      	ldr	r0, [pc, #56]	; (5e4 <mdmCtrlr_ReadResponseFromModem+0x44>)
     5ac:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <mdmCtrlr_ReadResponseFromModem+0x48>)
     5ae:	4798      	blx	r3
     5b0:	42a8      	cmp	r0, r5
     5b2:	d202      	bcs.n	5ba <mdmCtrlr_ReadResponseFromModem+0x1a>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     5b4:	b002      	add	sp, #8
     5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		CRITICAL_SECTION_ENTER()
     5ba:	a801      	add	r0, sp, #4
     5bc:	4b0b      	ldr	r3, [pc, #44]	; (5ec <mdmCtrlr_ReadResponseFromModem+0x4c>)
     5be:	4798      	blx	r3
		while (readCnt < length)
     5c0:	b165      	cbz	r5, 5dc <mdmCtrlr_ReadResponseFromModem+0x3c>
     5c2:	2100      	movs	r1, #0
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     5c4:	f8df 801c 	ldr.w	r8, [pc, #28]	; 5e4 <mdmCtrlr_ReadResponseFromModem+0x44>
     5c8:	4f09      	ldr	r7, [pc, #36]	; (5f0 <mdmCtrlr_ReadResponseFromModem+0x50>)
     5ca:	1c4c      	adds	r4, r1, #1
     5cc:	b2e4      	uxtb	r4, r4
     5ce:	4431      	add	r1, r6
     5d0:	4640      	mov	r0, r8
     5d2:	47b8      	blx	r7
     5d4:	4621      	mov	r1, r4
		while (readCnt < length)
     5d6:	b2a4      	uxth	r4, r4
     5d8:	42a5      	cmp	r5, r4
     5da:	d8f6      	bhi.n	5ca <mdmCtrlr_ReadResponseFromModem+0x2a>
		CRITICAL_SECTION_LEAVE()
     5dc:	a801      	add	r0, sp, #4
     5de:	4b05      	ldr	r3, [pc, #20]	; (5f4 <mdmCtrlr_ReadResponseFromModem+0x54>)
     5e0:	4798      	blx	r3
     5e2:	e7e7      	b.n	5b4 <mdmCtrlr_ReadResponseFromModem+0x14>
     5e4:	20001000 	.word	0x20001000
     5e8:	0000147d 	.word	0x0000147d
     5ec:	00001079 	.word	0x00001079
     5f0:	000013f9 	.word	0x000013f9
     5f4:	00001087 	.word	0x00001087

000005f8 <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     5f8:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     5fa:	4802      	ldr	r0, [pc, #8]	; (604 <mdmCtrlr_FlushRxBuffer+0xc>)
     5fc:	4b02      	ldr	r3, [pc, #8]	; (608 <mdmCtrlr_FlushRxBuffer+0x10>)
     5fe:	4798      	blx	r3
     600:	bd08      	pop	{r3, pc}
     602:	bf00      	nop
     604:	20001000 	.word	0x20001000
     608:	000014a1 	.word	0x000014a1

0000060c <modemPowerInit>:

/* Perform the HL7618RD modem power on sequence */
/* I FEEL LIKE SOMETHING WRONG HERE */

void modemPowerInit(void)
{
     60c:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     60e:	4c1d      	ldr	r4, [pc, #116]	; (684 <modemPowerInit+0x78>)
     610:	f44f 3580 	mov.w	r5, #65536	; 0x10000
     614:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     61c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
     620:	4919      	ldr	r1, [pc, #100]	; (688 <modemPowerInit+0x7c>)
     622:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     626:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     62a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     62e:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     632:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     636:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     63a:	60a0      	str	r0, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     63c:	62a3      	str	r3, [r4, #40]	; 0x28
     63e:	4a13      	ldr	r2, [pc, #76]	; (68c <modemPowerInit+0x80>)
     640:	62a2      	str	r2, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     642:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     646:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64a:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     64e:	6160      	str	r0, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     650:	60a5      	str	r5, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     652:	62a3      	str	r3, [r4, #40]	; 0x28
     654:	62a1      	str	r1, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     656:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     65a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     65e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     662:	6165      	str	r5, [r4, #20]

	gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
	//gpio_set_pin_pull_mode(MODEM_DTR, GPIO_PULL_UP);
	gpio_set_pin_level(MODEM_DTR,false);
	delay_ms(500);
     664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     668:	4e09      	ldr	r6, [pc, #36]	; (690 <modemPowerInit+0x84>)
     66a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     66c:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	
	/* Give a short 50 ms positive pulse on MODEM ON Pin */
	gpio_set_pin_level(MODEM_ON,true);
	delay_ms(50);
     670:	2032      	movs	r0, #50	; 0x32
     672:	47b0      	blx	r6
	
	/* make MODEM ON to default level */
	//gpio_set_pin_level(MODEM_ON,false);
	delay_ms(3000);
     674:	f640 30b8 	movw	r0, #3000	; 0xbb8
     678:	47b0      	blx	r6
	
	SerialDebugPrint((uint8_t*)"Modem Power On initialization Completed\r\n",41);
     67a:	2129      	movs	r1, #41	; 0x29
     67c:	4805      	ldr	r0, [pc, #20]	; (694 <modemPowerInit+0x88>)
     67e:	4b06      	ldr	r3, [pc, #24]	; (698 <modemPowerInit+0x8c>)
     680:	4798      	blx	r3
     682:	bd70      	pop	{r4, r5, r6, pc}
     684:	41008000 	.word	0x41008000
     688:	c0000001 	.word	0xc0000001
     68c:	c0000008 	.word	0xc0000008
     690:	000010e9 	.word	0x000010e9
     694:	00002f24 	.word	0x00002f24
     698:	00000721 	.word	0x00000721

0000069c <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     6a0:	4604      	mov	r4, r0
     6a2:	460e      	mov	r6, r1
     6a4:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     6a6:	4d0e      	ldr	r5, [pc, #56]	; (6e0 <usart_async_write+0x44>)
     6a8:	4620      	mov	r0, r4
     6aa:	47a8      	blx	r5
     6ac:	2800      	cmp	r0, #0
     6ae:	d0fb      	beq.n	6a8 <usart_async_write+0xc>
     6b0:	3e01      	subs	r6, #1
     6b2:	f8df 8030 	ldr.w	r8, [pc, #48]	; 6e4 <usart_async_write+0x48>
     6b6:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     6b8:	f8df a02c 	ldr.w	sl, [pc, #44]	; 6e8 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     6bc:	4d08      	ldr	r5, [pc, #32]	; (6e0 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     6be:	7873      	ldrb	r3, [r6, #1]
     6c0:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     6c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     6c8:	4620      	mov	r0, r4
     6ca:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     6cc:	4620      	mov	r0, r4
     6ce:	47a8      	blx	r5
     6d0:	2800      	cmp	r0, #0
     6d2:	d0fb      	beq.n	6cc <usart_async_write+0x30>
		;
	} while (++offset < length);
     6d4:	3701      	adds	r7, #1
     6d6:	454f      	cmp	r7, r9
     6d8:	d3f1      	bcc.n	6be <usart_async_write+0x22>

	return (int32_t)offset;
}
     6da:	4638      	mov	r0, r7
     6dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     6e0:	00001e1b 	.word	0x00001e1b
     6e4:	20000144 	.word	0x20000144
     6e8:	00001e0d 	.word	0x00001e0d

000006ec <SerialDebugTxByteSentCallBack>:
     6ec:	2302      	movs	r3, #2
     6ee:	7603      	strb	r3, [r0, #24]
     6f0:	4770      	bx	lr

000006f2 <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     6f2:	2380      	movs	r3, #128	; 0x80
     6f4:	7603      	strb	r3, [r0, #24]
     6f6:	4770      	bx	lr

000006f8 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     6f8:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&DEBUG_PRINT,SERCOM5);
     6fa:	4c05      	ldr	r4, [pc, #20]	; (710 <SerialDebugPrintInit+0x18>)
     6fc:	4905      	ldr	r1, [pc, #20]	; (714 <SerialDebugPrintInit+0x1c>)
     6fe:	4620      	mov	r0, r4
     700:	4b05      	ldr	r3, [pc, #20]	; (718 <SerialDebugPrintInit+0x20>)
     702:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     704:	2201      	movs	r2, #1
     706:	4611      	mov	r1, r2
     708:	4620      	mov	r0, r4
     70a:	4b04      	ldr	r3, [pc, #16]	; (71c <SerialDebugPrintInit+0x24>)
     70c:	4798      	blx	r3
     70e:	bd10      	pop	{r4, pc}
     710:	20000020 	.word	0x20000020
     714:	43000400 	.word	0x43000400
     718:	00001d95 	.word	0x00001d95
     71c:	00001e31 	.word	0x00001e31

00000720 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     720:	b570      	push	{r4, r5, r6, lr}
     722:	4605      	mov	r5, r0
     724:	460e      	mov	r6, r1
	_usart_async_enable(&DEBUG_PRINT);
     726:	4c05      	ldr	r4, [pc, #20]	; (73c <SerialDebugPrint+0x1c>)
     728:	4620      	mov	r0, r4
     72a:	4b05      	ldr	r3, [pc, #20]	; (740 <SerialDebugPrint+0x20>)
     72c:	4798      	blx	r3
	
	usart_async_write(&DEBUG_PRINT, dataToPrint, length);
     72e:	4632      	mov	r2, r6
     730:	4629      	mov	r1, r5
     732:	4620      	mov	r0, r4
     734:	4b03      	ldr	r3, [pc, #12]	; (744 <SerialDebugPrint+0x24>)
     736:	4798      	blx	r3
     738:	bd70      	pop	{r4, r5, r6, pc}
     73a:	bf00      	nop
     73c:	20000020 	.word	0x20000020
     740:	00001df9 	.word	0x00001df9
     744:	0000069d 	.word	0x0000069d

00000748 <SerialDebugTxDoneCallBack>:
{
     748:	b510      	push	{r4, lr}
     74a:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     74c:	2116      	movs	r1, #22
     74e:	4803      	ldr	r0, [pc, #12]	; (75c <SerialDebugTxDoneCallBack+0x14>)
     750:	4b03      	ldr	r3, [pc, #12]	; (760 <SerialDebugTxDoneCallBack+0x18>)
     752:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     754:	2301      	movs	r3, #1
     756:	7623      	strb	r3, [r4, #24]
     758:	bd10      	pop	{r4, pc}
     75a:	bf00      	nop
     75c:	00002f80 	.word	0x00002f80
     760:	00000721 	.word	0x00000721

00000764 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
     764:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     766:	2204      	movs	r2, #4
     768:	4b0b      	ldr	r3, [pc, #44]	; (798 <SERCOM5_2_Handler+0x34>)
     76a:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&DEBUG_PRINT));
     76c:	4d0b      	ldr	r5, [pc, #44]	; (79c <SERCOM5_2_Handler+0x38>)
     76e:	4c0c      	ldr	r4, [pc, #48]	; (7a0 <SERCOM5_2_Handler+0x3c>)
     770:	4628      	mov	r0, r5
     772:	47a0      	blx	r4
     774:	2800      	cmp	r0, #0
     776:	d0fb      	beq.n	770 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&DEBUG_PRINT);
     778:	4808      	ldr	r0, [pc, #32]	; (79c <SERCOM5_2_Handler+0x38>)
     77a:	4b0a      	ldr	r3, [pc, #40]	; (7a4 <SERCOM5_2_Handler+0x40>)
     77c:	4798      	blx	r3
     77e:	490a      	ldr	r1, [pc, #40]	; (7a8 <SERCOM5_2_Handler+0x44>)
     780:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
     782:	2300      	movs	r3, #0
     784:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
     786:	4c09      	ldr	r4, [pc, #36]	; (7ac <SERCOM5_2_Handler+0x48>)
     788:	4620      	mov	r0, r4
     78a:	4b09      	ldr	r3, [pc, #36]	; (7b0 <SERCOM5_2_Handler+0x4c>)
     78c:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
     78e:	2105      	movs	r1, #5
     790:	4620      	mov	r0, r4
     792:	4b08      	ldr	r3, [pc, #32]	; (7b4 <SERCOM5_2_Handler+0x50>)
     794:	4798      	blx	r3
     796:	bd38      	pop	{r3, r4, r5, pc}
     798:	43000400 	.word	0x43000400
     79c:	20000020 	.word	0x20000020
     7a0:	00001e25 	.word	0x00001e25
     7a4:	00001e13 	.word	0x00001e13
     7a8:	20001050 	.word	0x20001050
     7ac:	20001054 	.word	0x20001054
     7b0:	00002b4d 	.word	0x00002b4d
     7b4:	00000721 	.word	0x00000721

000007b8 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     7b8:	b508      	push	{r3, lr}
	system_init();
     7ba:	4b01      	ldr	r3, [pc, #4]	; (7c0 <atmel_start_init+0x8>)
     7bc:	4798      	blx	r3
     7be:	bd08      	pop	{r3, pc}
     7c0:	00000ef9 	.word	0x00000ef9

000007c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     7c4:	e7fe      	b.n	7c4 <Dummy_Handler>
	...

000007c8 <Reset_Handler>:
{
     7c8:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     7ca:	4b1c      	ldr	r3, [pc, #112]	; (83c <Reset_Handler+0x74>)
     7cc:	4a1c      	ldr	r2, [pc, #112]	; (840 <Reset_Handler+0x78>)
     7ce:	429a      	cmp	r2, r3
     7d0:	d010      	beq.n	7f4 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     7d2:	4b1c      	ldr	r3, [pc, #112]	; (844 <Reset_Handler+0x7c>)
     7d4:	4a19      	ldr	r2, [pc, #100]	; (83c <Reset_Handler+0x74>)
     7d6:	429a      	cmp	r2, r3
     7d8:	d20c      	bcs.n	7f4 <Reset_Handler+0x2c>
     7da:	3b01      	subs	r3, #1
     7dc:	1a9b      	subs	r3, r3, r2
     7de:	f023 0303 	bic.w	r3, r3, #3
     7e2:	3304      	adds	r3, #4
     7e4:	4413      	add	r3, r2
     7e6:	4916      	ldr	r1, [pc, #88]	; (840 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     7e8:	f851 0b04 	ldr.w	r0, [r1], #4
     7ec:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     7f0:	429a      	cmp	r2, r3
     7f2:	d1f9      	bne.n	7e8 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     7f4:	4b14      	ldr	r3, [pc, #80]	; (848 <Reset_Handler+0x80>)
     7f6:	4a15      	ldr	r2, [pc, #84]	; (84c <Reset_Handler+0x84>)
     7f8:	429a      	cmp	r2, r3
     7fa:	d20a      	bcs.n	812 <Reset_Handler+0x4a>
     7fc:	3b01      	subs	r3, #1
     7fe:	1a9b      	subs	r3, r3, r2
     800:	f023 0303 	bic.w	r3, r3, #3
     804:	3304      	adds	r3, #4
     806:	4413      	add	r3, r2
                *pDest++ = 0;
     808:	2100      	movs	r1, #0
     80a:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     80e:	4293      	cmp	r3, r2
     810:	d1fb      	bne.n	80a <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     812:	4b0f      	ldr	r3, [pc, #60]	; (850 <Reset_Handler+0x88>)
     814:	4a0f      	ldr	r2, [pc, #60]	; (854 <Reset_Handler+0x8c>)
     816:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     81a:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     81c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     820:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     828:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     82c:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     830:	4b09      	ldr	r3, [pc, #36]	; (858 <Reset_Handler+0x90>)
     832:	4798      	blx	r3
        main();
     834:	4b09      	ldr	r3, [pc, #36]	; (85c <Reset_Handler+0x94>)
     836:	4798      	blx	r3
     838:	e7fe      	b.n	838 <Reset_Handler+0x70>
     83a:	bf00      	nop
     83c:	20000000 	.word	0x20000000
     840:	00003520 	.word	0x00003520
     844:	200000f4 	.word	0x200000f4
     848:	20001218 	.word	0x20001218
     84c:	20000100 	.word	0x20000100
     850:	e000ed00 	.word	0xe000ed00
     854:	00000000 	.word	0x00000000
     858:	00002b05 	.word	0x00002b05
     85c:	000027d1 	.word	0x000027d1

00000860 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
     860:	4a04      	ldr	r2, [pc, #16]	; (874 <AC_0_CLOCK_init+0x14>)
     862:	69d3      	ldr	r3, [r2, #28]
     864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     868:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     86a:	2240      	movs	r2, #64	; 0x40
     86c:	4b02      	ldr	r3, [pc, #8]	; (878 <AC_0_CLOCK_init+0x18>)
     86e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     872:	4770      	bx	lr
     874:	40000800 	.word	0x40000800
     878:	40001c00 	.word	0x40001c00

0000087c <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
     87c:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
     87e:	4b03      	ldr	r3, [pc, #12]	; (88c <AC_0_init+0x10>)
     880:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     882:	4903      	ldr	r1, [pc, #12]	; (890 <AC_0_init+0x14>)
     884:	4803      	ldr	r0, [pc, #12]	; (894 <AC_0_init+0x18>)
     886:	4b04      	ldr	r3, [pc, #16]	; (898 <AC_0_init+0x1c>)
     888:	4798      	blx	r3
     88a:	bd08      	pop	{r3, pc}
     88c:	00000861 	.word	0x00000861
     890:	42002000 	.word	0x42002000
     894:	200010fc 	.word	0x200010fc
     898:	00001019 	.word	0x00001019

0000089c <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     89c:	4b5d      	ldr	r3, [pc, #372]	; (a14 <ADC_0_PORT_init+0x178>)
     89e:	2204      	movs	r2, #4
     8a0:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8a2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     8a6:	629a      	str	r2, [r3, #40]	; 0x28
     8a8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     8ac:	629a      	str	r2, [r3, #40]	; 0x28
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8ae:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     8b2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8b6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8ba:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8be:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     8c2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     8c6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8ca:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     8ce:	2108      	movs	r1, #8
     8d0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     8d2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     8d6:	6299      	str	r1, [r3, #40]	; 0x28
     8d8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     8da:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     8de:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     8e2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     8e6:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     8ea:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     8ee:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     8f2:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     8f6:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     8fa:	f44f 7180 	mov.w	r1, #256	; 0x100
     8fe:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     902:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     906:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     90a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     90e:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     912:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     916:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     91a:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     91e:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     922:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     926:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     92a:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     92e:	f44f 7100 	mov.w	r1, #512	; 0x200
     932:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     936:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     93a:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     93e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     942:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     946:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     94a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     94e:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     952:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     956:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     95a:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     95e:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     962:	2110      	movs	r1, #16
     964:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     966:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     96a:	6299      	str	r1, [r3, #40]	; 0x28
     96c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     96e:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     972:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     976:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     97a:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     97e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     982:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     986:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     98a:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     98e:	2120      	movs	r1, #32
     990:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     992:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     996:	6299      	str	r1, [r3, #40]	; 0x28
     998:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     99a:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     99e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9a2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9a6:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9aa:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9ae:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9b2:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9b6:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9ba:	2140      	movs	r1, #64	; 0x40
     9bc:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9be:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9c2:	6299      	str	r1, [r3, #40]	; 0x28
     9c4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9c6:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     9ca:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9ce:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9d2:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9d6:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9da:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9de:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9e2:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     9e6:	2180      	movs	r1, #128	; 0x80
     9e8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9ea:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     9ee:	6299      	str	r1, [r3, #40]	; 0x28
     9f0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9f2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     9f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9fa:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a02:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a06:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a0a:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a0e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     a12:	4770      	bx	lr
     a14:	41008000 	.word	0x41008000

00000a18 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     a18:	4a04      	ldr	r2, [pc, #16]	; (a2c <ADC_0_CLOCK_init+0x14>)
     a1a:	6a13      	ldr	r3, [r2, #32]
     a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     a20:	6213      	str	r3, [r2, #32]
     a22:	2241      	movs	r2, #65	; 0x41
     a24:	4b02      	ldr	r3, [pc, #8]	; (a30 <ADC_0_CLOCK_init+0x18>)
     a26:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     a2a:	4770      	bx	lr
     a2c:	40000800 	.word	0x40000800
     a30:	40001c00 	.word	0x40001c00

00000a34 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     a34:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     a36:	4b05      	ldr	r3, [pc, #20]	; (a4c <ADC_0_init+0x18>)
     a38:	4798      	blx	r3
	ADC_0_PORT_init();
     a3a:	4b05      	ldr	r3, [pc, #20]	; (a50 <ADC_0_init+0x1c>)
     a3c:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     a3e:	2200      	movs	r2, #0
     a40:	4904      	ldr	r1, [pc, #16]	; (a54 <ADC_0_init+0x20>)
     a42:	4805      	ldr	r0, [pc, #20]	; (a58 <ADC_0_init+0x24>)
     a44:	4b05      	ldr	r3, [pc, #20]	; (a5c <ADC_0_init+0x28>)
     a46:	4798      	blx	r3
     a48:	bd08      	pop	{r3, pc}
     a4a:	bf00      	nop
     a4c:	00000a19 	.word	0x00000a19
     a50:	0000089d 	.word	0x0000089d
     a54:	43001c00 	.word	0x43001c00
     a58:	2000110c 	.word	0x2000110c
     a5c:	00001049 	.word	0x00001049

00000a60 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     a60:	4a04      	ldr	r2, [pc, #16]	; (a74 <ADC_1_CLOCK_init+0x14>)
     a62:	6a13      	ldr	r3, [r2, #32]
     a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     a68:	6213      	str	r3, [r2, #32]
     a6a:	2240      	movs	r2, #64	; 0x40
     a6c:	4b02      	ldr	r3, [pc, #8]	; (a78 <ADC_1_CLOCK_init+0x18>)
     a6e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
     a72:	4770      	bx	lr
     a74:	40000800 	.word	0x40000800
     a78:	40001c00 	.word	0x40001c00

00000a7c <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
     a7c:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
     a7e:	4b04      	ldr	r3, [pc, #16]	; (a90 <ADC_1_init+0x14>)
     a80:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
     a82:	2200      	movs	r2, #0
     a84:	4903      	ldr	r1, [pc, #12]	; (a94 <ADC_1_init+0x18>)
     a86:	4804      	ldr	r0, [pc, #16]	; (a98 <ADC_1_init+0x1c>)
     a88:	4b04      	ldr	r3, [pc, #16]	; (a9c <ADC_1_init+0x20>)
     a8a:	4798      	blx	r3
     a8c:	bd08      	pop	{r3, pc}
     a8e:	bf00      	nop
     a90:	00000a61 	.word	0x00000a61
     a94:	43002000 	.word	0x43002000
     a98:	200011c4 	.word	0x200011c4
     a9c:	00001049 	.word	0x00001049

00000aa0 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
     aa0:	4a04      	ldr	r2, [pc, #16]	; (ab4 <DAC_0_CLOCK_init+0x14>)
     aa2:	6a13      	ldr	r3, [r2, #32]
     aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     aa8:	6213      	str	r3, [r2, #32]
     aaa:	2240      	movs	r2, #64	; 0x40
     aac:	4b02      	ldr	r3, [pc, #8]	; (ab8 <DAC_0_CLOCK_init+0x18>)
     aae:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     ab2:	4770      	bx	lr
     ab4:	40000800 	.word	0x40000800
     ab8:	40001c00 	.word	0x40001c00

00000abc <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
     abc:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
     abe:	4b03      	ldr	r3, [pc, #12]	; (acc <DAC_0_init+0x10>)
     ac0:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     ac2:	4903      	ldr	r1, [pc, #12]	; (ad0 <DAC_0_init+0x14>)
     ac4:	4803      	ldr	r0, [pc, #12]	; (ad4 <DAC_0_init+0x18>)
     ac6:	4b04      	ldr	r3, [pc, #16]	; (ad8 <DAC_0_init+0x1c>)
     ac8:	4798      	blx	r3
     aca:	bd08      	pop	{r3, pc}
     acc:	00000aa1 	.word	0x00000aa1
     ad0:	43002400 	.word	0x43002400
     ad4:	20001134 	.word	0x20001134
     ad8:	00001095 	.word	0x00001095

00000adc <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
     adc:	b508      	push	{r3, lr}
     ade:	2240      	movs	r2, #64	; 0x40
     ae0:	4b05      	ldr	r3, [pc, #20]	; (af8 <EXTERNAL_IRQ_0_init+0x1c>)
     ae2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     ae6:	4a05      	ldr	r2, [pc, #20]	; (afc <EXTERNAL_IRQ_0_init+0x20>)
     ae8:	6953      	ldr	r3, [r2, #20]
     aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     aee:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
     af0:	4b03      	ldr	r3, [pc, #12]	; (b00 <EXTERNAL_IRQ_0_init+0x24>)
     af2:	4798      	blx	r3
     af4:	bd08      	pop	{r3, pc}
     af6:	bf00      	nop
     af8:	40001c00 	.word	0x40001c00
     afc:	40000800 	.word	0x40000800
     b00:	0000114d 	.word	0x0000114d

00000b04 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     b04:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     b06:	4a04      	ldr	r2, [pc, #16]	; (b18 <EVENT_SYSTEM_0_init+0x14>)
     b08:	6993      	ldr	r3, [r2, #24]
     b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     b0e:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
     b10:	4b02      	ldr	r3, [pc, #8]	; (b1c <EVENT_SYSTEM_0_init+0x18>)
     b12:	4798      	blx	r3
     b14:	bd08      	pop	{r3, pc}
     b16:	bf00      	nop
     b18:	40000800 	.word	0x40000800
     b1c:	00001109 	.word	0x00001109

00000b20 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     b20:	4a02      	ldr	r2, [pc, #8]	; (b2c <FLASH_0_CLOCK_init+0xc>)
     b22:	6913      	ldr	r3, [r2, #16]
     b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     b28:	6113      	str	r3, [r2, #16]
     b2a:	4770      	bx	lr
     b2c:	40000800 	.word	0x40000800

00000b30 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     b30:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     b32:	4b03      	ldr	r3, [pc, #12]	; (b40 <FLASH_0_init+0x10>)
     b34:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     b36:	4903      	ldr	r1, [pc, #12]	; (b44 <FLASH_0_init+0x14>)
     b38:	4803      	ldr	r0, [pc, #12]	; (b48 <FLASH_0_init+0x18>)
     b3a:	4b04      	ldr	r3, [pc, #16]	; (b4c <FLASH_0_init+0x1c>)
     b3c:	4798      	blx	r3
     b3e:	bd08      	pop	{r3, pc}
     b40:	00000b21 	.word	0x00000b21
     b44:	41004000 	.word	0x41004000
     b48:	200010c0 	.word	0x200010c0
     b4c:	00001185 	.word	0x00001185

00000b50 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b50:	4b10      	ldr	r3, [pc, #64]	; (b94 <ModemData_PORT_init+0x44>)
     b52:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     b56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b5a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b62:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     b66:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     b6a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b72:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     b76:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     b7a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     b82:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     b86:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     b8a:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     b8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     b92:	4770      	bx	lr
     b94:	41008000 	.word	0x41008000

00000b98 <ModemData_CLOCK_init>:
     b98:	4b06      	ldr	r3, [pc, #24]	; (bb4 <ModemData_CLOCK_init+0x1c>)
     b9a:	2240      	movs	r2, #64	; 0x40
     b9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     ba0:	224a      	movs	r2, #74	; 0x4a
     ba2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     ba6:	4a04      	ldr	r2, [pc, #16]	; (bb8 <ModemData_CLOCK_init+0x20>)
     ba8:	6993      	ldr	r3, [r2, #24]
     baa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     bae:	6193      	str	r3, [r2, #24]
     bb0:	4770      	bx	lr
     bb2:	bf00      	nop
     bb4:	40001c00 	.word	0x40001c00
     bb8:	40000800 	.word	0x40000800

00000bbc <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
     bbc:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
     bbe:	4b03      	ldr	r3, [pc, #12]	; (bcc <ModemData_init+0x10>)
     bc0:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
     bc2:	4b03      	ldr	r3, [pc, #12]	; (bd0 <ModemData_init+0x14>)
     bc4:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
     bc6:	4b03      	ldr	r3, [pc, #12]	; (bd4 <ModemData_init+0x18>)
     bc8:	4798      	blx	r3
     bca:	bd08      	pop	{r3, pc}
     bcc:	00000b99 	.word	0x00000b99
     bd0:	00000409 	.word	0x00000409
     bd4:	00000b51 	.word	0x00000b51

00000bd8 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bd8:	4b10      	ldr	r3, [pc, #64]	; (c1c <SerialDebug_PORT_init+0x44>)
     bda:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     bde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     be2:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     be6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     bea:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     bee:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     bf2:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     bf6:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     bfa:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     bfe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     c02:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     c06:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     c0a:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     c0e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     c12:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     c16:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     c1a:	4770      	bx	lr
     c1c:	41008000 	.word	0x41008000

00000c20 <SerialDebug_CLOCK_init>:
     c20:	4b06      	ldr	r3, [pc, #24]	; (c3c <SerialDebug_CLOCK_init+0x1c>)
     c22:	2240      	movs	r2, #64	; 0x40
     c24:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     c28:	224a      	movs	r2, #74	; 0x4a
     c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     c2e:	4a04      	ldr	r2, [pc, #16]	; (c40 <SerialDebug_CLOCK_init+0x20>)
     c30:	6a13      	ldr	r3, [r2, #32]
     c32:	f043 0302 	orr.w	r3, r3, #2
     c36:	6213      	str	r3, [r2, #32]
     c38:	4770      	bx	lr
     c3a:	bf00      	nop
     c3c:	40001c00 	.word	0x40001c00
     c40:	40000800 	.word	0x40000800

00000c44 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
     c44:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
     c46:	4b03      	ldr	r3, [pc, #12]	; (c54 <SerialDebug_init+0x10>)
     c48:	4798      	blx	r3
	SerialDebugPrintInit();
     c4a:	4b03      	ldr	r3, [pc, #12]	; (c58 <SerialDebug_init+0x14>)
     c4c:	4798      	blx	r3
	SerialDebug_PORT_init();
     c4e:	4b03      	ldr	r3, [pc, #12]	; (c5c <SerialDebug_init+0x18>)
     c50:	4798      	blx	r3
     c52:	bd08      	pop	{r3, pc}
     c54:	00000c21 	.word	0x00000c21
     c58:	000006f9 	.word	0x000006f9
     c5c:	00000bd9 	.word	0x00000bd9

00000c60 <delay_driver_init>:
}

void delay_driver_init(void)
{
     c60:	b508      	push	{r3, lr}
	delay_init(SysTick);
     c62:	4802      	ldr	r0, [pc, #8]	; (c6c <delay_driver_init+0xc>)
     c64:	4b02      	ldr	r3, [pc, #8]	; (c70 <delay_driver_init+0x10>)
     c66:	4798      	blx	r3
     c68:	bd08      	pop	{r3, pc}
     c6a:	bf00      	nop
     c6c:	e000e010 	.word	0xe000e010
     c70:	000010d5 	.word	0x000010d5

00000c74 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     c74:	4a04      	ldr	r2, [pc, #16]	; (c88 <PWM_0_CLOCK_init+0x14>)
     c76:	6953      	ldr	r3, [r2, #20]
     c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     c7c:	6153      	str	r3, [r2, #20]
     c7e:	2240      	movs	r2, #64	; 0x40
     c80:	4b02      	ldr	r3, [pc, #8]	; (c8c <PWM_0_CLOCK_init+0x18>)
     c82:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     c86:	4770      	bx	lr
     c88:	40000800 	.word	0x40000800
     c8c:	40001c00 	.word	0x40001c00

00000c90 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     c90:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     c92:	4b05      	ldr	r3, [pc, #20]	; (ca8 <PWM_0_init+0x18>)
     c94:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     c96:	4b05      	ldr	r3, [pc, #20]	; (cac <PWM_0_init+0x1c>)
     c98:	4798      	blx	r3
     c9a:	4602      	mov	r2, r0
     c9c:	4904      	ldr	r1, [pc, #16]	; (cb0 <PWM_0_init+0x20>)
     c9e:	4805      	ldr	r0, [pc, #20]	; (cb4 <PWM_0_init+0x24>)
     ca0:	4b05      	ldr	r3, [pc, #20]	; (cb8 <PWM_0_init+0x28>)
     ca2:	4798      	blx	r3
     ca4:	bd08      	pop	{r3, pc}
     ca6:	bf00      	nop
     ca8:	00000c75 	.word	0x00000c75
     cac:	000026e9 	.word	0x000026e9
     cb0:	40003800 	.word	0x40003800
     cb4:	20001088 	.word	0x20001088
     cb8:	000011e1 	.word	0x000011e1

00000cbc <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     cbc:	4a04      	ldr	r2, [pc, #16]	; (cd0 <PWM_1_CLOCK_init+0x14>)
     cbe:	6953      	ldr	r3, [r2, #20]
     cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     cc4:	6153      	str	r3, [r2, #20]
     cc6:	2240      	movs	r2, #64	; 0x40
     cc8:	4b02      	ldr	r3, [pc, #8]	; (cd4 <PWM_1_CLOCK_init+0x18>)
     cca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     cce:	4770      	bx	lr
     cd0:	40000800 	.word	0x40000800
     cd4:	40001c00 	.word	0x40001c00

00000cd8 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
     cd8:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
     cda:	4b05      	ldr	r3, [pc, #20]	; (cf0 <PWM_1_init+0x18>)
     cdc:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
     cde:	4b05      	ldr	r3, [pc, #20]	; (cf4 <PWM_1_init+0x1c>)
     ce0:	4798      	blx	r3
     ce2:	4602      	mov	r2, r0
     ce4:	4904      	ldr	r1, [pc, #16]	; (cf8 <PWM_1_init+0x20>)
     ce6:	4805      	ldr	r0, [pc, #20]	; (cfc <PWM_1_init+0x24>)
     ce8:	4b05      	ldr	r3, [pc, #20]	; (d00 <PWM_1_init+0x28>)
     cea:	4798      	blx	r3
     cec:	bd08      	pop	{r3, pc}
     cee:	bf00      	nop
     cf0:	00000cbd 	.word	0x00000cbd
     cf4:	000026e9 	.word	0x000026e9
     cf8:	40003c00 	.word	0x40003c00
     cfc:	200011a8 	.word	0x200011a8
     d00:	000011e1 	.word	0x000011e1

00000d04 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     d04:	4a04      	ldr	r2, [pc, #16]	; (d18 <PWM_2_CLOCK_init+0x14>)
     d06:	6993      	ldr	r3, [r2, #24]
     d08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     d0c:	6193      	str	r3, [r2, #24]
     d0e:	2240      	movs	r2, #64	; 0x40
     d10:	4b02      	ldr	r3, [pc, #8]	; (d1c <PWM_2_CLOCK_init+0x18>)
     d12:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     d16:	4770      	bx	lr
     d18:	40000800 	.word	0x40000800
     d1c:	40001c00 	.word	0x40001c00

00000d20 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
     d20:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
     d22:	4b05      	ldr	r3, [pc, #20]	; (d38 <PWM_2_init+0x18>)
     d24:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
     d26:	4b05      	ldr	r3, [pc, #20]	; (d3c <PWM_2_init+0x1c>)
     d28:	4798      	blx	r3
     d2a:	4602      	mov	r2, r0
     d2c:	4904      	ldr	r1, [pc, #16]	; (d40 <PWM_2_init+0x20>)
     d2e:	4805      	ldr	r0, [pc, #20]	; (d44 <PWM_2_init+0x24>)
     d30:	4b05      	ldr	r3, [pc, #20]	; (d48 <PWM_2_init+0x28>)
     d32:	4798      	blx	r3
     d34:	bd08      	pop	{r3, pc}
     d36:	bf00      	nop
     d38:	00000d05 	.word	0x00000d05
     d3c:	000026e9 	.word	0x000026e9
     d40:	4101a000 	.word	0x4101a000
     d44:	200010a4 	.word	0x200010a4
     d48:	000011e1 	.word	0x000011e1

00000d4c <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     d4c:	4a04      	ldr	r2, [pc, #16]	; (d60 <TIMER_3_CLOCK_init+0x14>)
     d4e:	6993      	ldr	r3, [r2, #24]
     d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     d54:	6193      	str	r3, [r2, #24]
     d56:	2240      	movs	r2, #64	; 0x40
     d58:	4b02      	ldr	r3, [pc, #8]	; (d64 <TIMER_3_CLOCK_init+0x18>)
     d5a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     d5e:	4770      	bx	lr
     d60:	40000800 	.word	0x40000800
     d64:	40001c00 	.word	0x40001c00

00000d68 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
     d68:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
     d6a:	4b05      	ldr	r3, [pc, #20]	; (d80 <TIMER_3_init+0x18>)
     d6c:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
     d6e:	4b05      	ldr	r3, [pc, #20]	; (d84 <TIMER_3_init+0x1c>)
     d70:	4798      	blx	r3
     d72:	4602      	mov	r2, r0
     d74:	4904      	ldr	r1, [pc, #16]	; (d88 <TIMER_3_init+0x20>)
     d76:	4805      	ldr	r0, [pc, #20]	; (d8c <TIMER_3_init+0x24>)
     d78:	4b05      	ldr	r3, [pc, #20]	; (d90 <TIMER_3_init+0x28>)
     d7a:	4798      	blx	r3
     d7c:	bd08      	pop	{r3, pc}
     d7e:	bf00      	nop
     d80:	00000d4d 	.word	0x00000d4d
     d84:	000021a1 	.word	0x000021a1
     d88:	41016000 	.word	0x41016000
     d8c:	200011c8 	.word	0x200011c8
     d90:	000012fd 	.word	0x000012fd

00000d94 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     d94:	4a04      	ldr	r2, [pc, #16]	; (da8 <TIMER_4_CLOCK_init+0x14>)
     d96:	6993      	ldr	r3, [r2, #24]
     d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     d9c:	6193      	str	r3, [r2, #24]
     d9e:	2240      	movs	r2, #64	; 0x40
     da0:	4b02      	ldr	r3, [pc, #8]	; (dac <TIMER_4_CLOCK_init+0x18>)
     da2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     da6:	4770      	bx	lr
     da8:	40000800 	.word	0x40000800
     dac:	40001c00 	.word	0x40001c00

00000db0 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
     db0:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
     db2:	4b05      	ldr	r3, [pc, #20]	; (dc8 <TIMER_4_init+0x18>)
     db4:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
     db6:	4b05      	ldr	r3, [pc, #20]	; (dcc <TIMER_4_init+0x1c>)
     db8:	4798      	blx	r3
     dba:	4602      	mov	r2, r0
     dbc:	4904      	ldr	r1, [pc, #16]	; (dd0 <TIMER_4_init+0x20>)
     dbe:	4805      	ldr	r0, [pc, #20]	; (dd4 <TIMER_4_init+0x24>)
     dc0:	4b05      	ldr	r3, [pc, #20]	; (dd8 <TIMER_4_init+0x28>)
     dc2:	4798      	blx	r3
     dc4:	bd08      	pop	{r3, pc}
     dc6:	bf00      	nop
     dc8:	00000d95 	.word	0x00000d95
     dcc:	000021a1 	.word	0x000021a1
     dd0:	41018000 	.word	0x41018000
     dd4:	20001110 	.word	0x20001110
     dd8:	000012fd 	.word	0x000012fd

00000ddc <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     ddc:	4a04      	ldr	r2, [pc, #16]	; (df0 <TIMER_5_CLOCK_init+0x14>)
     dde:	69d3      	ldr	r3, [r2, #28]
     de0:	f043 0308 	orr.w	r3, r3, #8
     de4:	61d3      	str	r3, [r2, #28]
     de6:	2240      	movs	r2, #64	; 0x40
     de8:	4b02      	ldr	r3, [pc, #8]	; (df4 <TIMER_5_CLOCK_init+0x18>)
     dea:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     dee:	4770      	bx	lr
     df0:	40000800 	.word	0x40000800
     df4:	40001c00 	.word	0x40001c00

00000df8 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
     df8:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
     dfa:	4b05      	ldr	r3, [pc, #20]	; (e10 <TIMER_5_init+0x18>)
     dfc:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
     dfe:	4b05      	ldr	r3, [pc, #20]	; (e14 <TIMER_5_init+0x1c>)
     e00:	4798      	blx	r3
     e02:	4602      	mov	r2, r0
     e04:	4904      	ldr	r1, [pc, #16]	; (e18 <TIMER_5_init+0x20>)
     e06:	4805      	ldr	r0, [pc, #20]	; (e1c <TIMER_5_init+0x24>)
     e08:	4b05      	ldr	r3, [pc, #20]	; (e20 <TIMER_5_init+0x28>)
     e0a:	4798      	blx	r3
     e0c:	bd08      	pop	{r3, pc}
     e0e:	bf00      	nop
     e10:	00000ddd 	.word	0x00000ddd
     e14:	000021a1 	.word	0x000021a1
     e18:	42000c00 	.word	0x42000c00
     e1c:	20001168 	.word	0x20001168
     e20:	000012fd 	.word	0x000012fd

00000e24 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
     e24:	4a04      	ldr	r2, [pc, #16]	; (e38 <TIMER_6_CLOCK_init+0x14>)
     e26:	69d3      	ldr	r3, [r2, #28]
     e28:	f043 0310 	orr.w	r3, r3, #16
     e2c:	61d3      	str	r3, [r2, #28]
     e2e:	2240      	movs	r2, #64	; 0x40
     e30:	4b02      	ldr	r3, [pc, #8]	; (e3c <TIMER_6_CLOCK_init+0x18>)
     e32:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     e36:	4770      	bx	lr
     e38:	40000800 	.word	0x40000800
     e3c:	40001c00 	.word	0x40001c00

00000e40 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
     e40:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
     e42:	4b05      	ldr	r3, [pc, #20]	; (e58 <TIMER_6_init+0x18>)
     e44:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
     e46:	4b05      	ldr	r3, [pc, #20]	; (e5c <TIMER_6_init+0x1c>)
     e48:	4798      	blx	r3
     e4a:	4602      	mov	r2, r0
     e4c:	4904      	ldr	r1, [pc, #16]	; (e60 <TIMER_6_init+0x20>)
     e4e:	4805      	ldr	r0, [pc, #20]	; (e64 <TIMER_6_init+0x24>)
     e50:	4b05      	ldr	r3, [pc, #20]	; (e68 <TIMER_6_init+0x28>)
     e52:	4798      	blx	r3
     e54:	bd08      	pop	{r3, pc}
     e56:	bf00      	nop
     e58:	00000e25 	.word	0x00000e25
     e5c:	000021a1 	.word	0x000021a1
     e60:	42001000 	.word	0x42001000
     e64:	20001188 	.word	0x20001188
     e68:	000012fd 	.word	0x000012fd

00000e6c <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
     e6c:	4a04      	ldr	r2, [pc, #16]	; (e80 <TIMER_7_CLOCK_init+0x14>)
     e6e:	6a13      	ldr	r3, [r2, #32]
     e70:	f043 0310 	orr.w	r3, r3, #16
     e74:	6213      	str	r3, [r2, #32]
     e76:	2240      	movs	r2, #64	; 0x40
     e78:	4b02      	ldr	r3, [pc, #8]	; (e84 <TIMER_7_CLOCK_init+0x18>)
     e7a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     e7e:	4770      	bx	lr
     e80:	40000800 	.word	0x40000800
     e84:	40001c00 	.word	0x40001c00

00000e88 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
     e88:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
     e8a:	4b05      	ldr	r3, [pc, #20]	; (ea0 <TIMER_7_init+0x18>)
     e8c:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
     e8e:	4b05      	ldr	r3, [pc, #20]	; (ea4 <TIMER_7_init+0x1c>)
     e90:	4798      	blx	r3
     e92:	4602      	mov	r2, r0
     e94:	4904      	ldr	r1, [pc, #16]	; (ea8 <TIMER_7_init+0x20>)
     e96:	4805      	ldr	r0, [pc, #20]	; (eac <TIMER_7_init+0x24>)
     e98:	4b05      	ldr	r3, [pc, #20]	; (eb0 <TIMER_7_init+0x28>)
     e9a:	4798      	blx	r3
     e9c:	bd08      	pop	{r3, pc}
     e9e:	bf00      	nop
     ea0:	00000e6d 	.word	0x00000e6d
     ea4:	000021a1 	.word	0x000021a1
     ea8:	43001000 	.word	0x43001000
     eac:	200010dc 	.word	0x200010dc
     eb0:	000012fd 	.word	0x000012fd

00000eb4 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     eb4:	4a02      	ldr	r2, [pc, #8]	; (ec0 <WDT_0_CLOCK_init+0xc>)
     eb6:	6953      	ldr	r3, [r2, #20]
     eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     ebc:	6153      	str	r3, [r2, #20]
     ebe:	4770      	bx	lr
     ec0:	40000800 	.word	0x40000800

00000ec4 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     ec4:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     ec6:	4b06      	ldr	r3, [pc, #24]	; (ee0 <WDT_0_init+0x1c>)
     ec8:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     eca:	2252      	movs	r2, #82	; 0x52
     ecc:	4905      	ldr	r1, [pc, #20]	; (ee4 <WDT_0_init+0x20>)
     ece:	2001      	movs	r0, #1
     ed0:	4b05      	ldr	r3, [pc, #20]	; (ee8 <WDT_0_init+0x24>)
     ed2:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     ed4:	4805      	ldr	r0, [pc, #20]	; (eec <WDT_0_init+0x28>)
     ed6:	4b06      	ldr	r3, [pc, #24]	; (ef0 <WDT_0_init+0x2c>)
     ed8:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     eda:	4b06      	ldr	r3, [pc, #24]	; (ef4 <WDT_0_init+0x30>)
     edc:	4798      	blx	r3
     ede:	bd08      	pop	{r3, pc}
     ee0:	00000eb5 	.word	0x00000eb5
     ee4:	00002fa4 	.word	0x00002fa4
     ee8:	00001341 	.word	0x00001341
     eec:	20001130 	.word	0x20001130
     ef0:	40002000 	.word	0x40002000
     ef4:	00002765 	.word	0x00002765

00000ef8 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     efc:	4b28      	ldr	r3, [pc, #160]	; (fa0 <system_init+0xa8>)
     efe:	4798      	blx	r3
	init_mcu();

	AC_0_init();
     f00:	4b28      	ldr	r3, [pc, #160]	; (fa4 <system_init+0xac>)
     f02:	4798      	blx	r3

	ADC_0_init();
     f04:	4b28      	ldr	r3, [pc, #160]	; (fa8 <system_init+0xb0>)
     f06:	4798      	blx	r3

	ADC_1_init();
     f08:	4b28      	ldr	r3, [pc, #160]	; (fac <system_init+0xb4>)
     f0a:	4798      	blx	r3

	DAC_0_init();
     f0c:	4b28      	ldr	r3, [pc, #160]	; (fb0 <system_init+0xb8>)
     f0e:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     f10:	4b28      	ldr	r3, [pc, #160]	; (fb4 <system_init+0xbc>)
     f12:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     f14:	4b28      	ldr	r3, [pc, #160]	; (fb8 <system_init+0xc0>)
     f16:	4798      	blx	r3

	FLASH_0_init();
     f18:	4b28      	ldr	r3, [pc, #160]	; (fbc <system_init+0xc4>)
     f1a:	4798      	blx	r3

	SerialDebug_init();
     f1c:	4b28      	ldr	r3, [pc, #160]	; (fc0 <system_init+0xc8>)
     f1e:	4798      	blx	r3
	
	ModemData_init();
     f20:	4b28      	ldr	r3, [pc, #160]	; (fc4 <system_init+0xcc>)
     f22:	4798      	blx	r3

	delay_driver_init();
     f24:	4b28      	ldr	r3, [pc, #160]	; (fc8 <system_init+0xd0>)
     f26:	4798      	blx	r3

	PWM_0_init();
     f28:	4b28      	ldr	r3, [pc, #160]	; (fcc <system_init+0xd4>)
     f2a:	4798      	blx	r3

	PWM_1_init();
     f2c:	4b28      	ldr	r3, [pc, #160]	; (fd0 <system_init+0xd8>)
     f2e:	4798      	blx	r3

	PWM_2_init();
     f30:	4b28      	ldr	r3, [pc, #160]	; (fd4 <system_init+0xdc>)
     f32:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     f34:	4c28      	ldr	r4, [pc, #160]	; (fd8 <system_init+0xe0>)
     f36:	69a3      	ldr	r3, [r4, #24]
     f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     f3c:	61a3      	str	r3, [r4, #24]
     f3e:	4f27      	ldr	r7, [pc, #156]	; (fdc <system_init+0xe4>)
     f40:	f04f 0840 	mov.w	r8, #64	; 0x40
     f44:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     f48:	4e25      	ldr	r6, [pc, #148]	; (fe0 <system_init+0xe8>)
     f4a:	47b0      	blx	r6
     f4c:	4602      	mov	r2, r0
     f4e:	4925      	ldr	r1, [pc, #148]	; (fe4 <system_init+0xec>)
     f50:	4825      	ldr	r0, [pc, #148]	; (fe8 <system_init+0xf0>)
     f52:	4d26      	ldr	r5, [pc, #152]	; (fec <system_init+0xf4>)
     f54:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     f56:	69e3      	ldr	r3, [r4, #28]
     f58:	f043 0320 	orr.w	r3, r3, #32
     f5c:	61e3      	str	r3, [r4, #28]
     f5e:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
     f62:	47b0      	blx	r6
     f64:	4602      	mov	r2, r0
     f66:	4922      	ldr	r1, [pc, #136]	; (ff0 <system_init+0xf8>)
     f68:	4822      	ldr	r0, [pc, #136]	; (ff4 <system_init+0xfc>)
     f6a:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     f6c:	69e3      	ldr	r3, [r4, #28]
     f6e:	ea43 0308 	orr.w	r3, r3, r8
     f72:	61e3      	str	r3, [r4, #28]
     f74:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
     f78:	47b0      	blx	r6
     f7a:	4602      	mov	r2, r0
     f7c:	491e      	ldr	r1, [pc, #120]	; (ff8 <system_init+0x100>)
     f7e:	481f      	ldr	r0, [pc, #124]	; (ffc <system_init+0x104>)
     f80:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
     f82:	4b1f      	ldr	r3, [pc, #124]	; (1000 <system_init+0x108>)
     f84:	4798      	blx	r3

	TIMER_4_init();
     f86:	4b1f      	ldr	r3, [pc, #124]	; (1004 <system_init+0x10c>)
     f88:	4798      	blx	r3

	TIMER_5_init();
     f8a:	4b1f      	ldr	r3, [pc, #124]	; (1008 <system_init+0x110>)
     f8c:	4798      	blx	r3

	TIMER_6_init();
     f8e:	4b1f      	ldr	r3, [pc, #124]	; (100c <system_init+0x114>)
     f90:	4798      	blx	r3

	TIMER_7_init();
     f92:	4b1f      	ldr	r3, [pc, #124]	; (1010 <system_init+0x118>)
     f94:	4798      	blx	r3

	WDT_0_init();
     f96:	4b1f      	ldr	r3, [pc, #124]	; (1014 <system_init+0x11c>)
     f98:	4798      	blx	r3
     f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f9e:	bf00      	nop
     fa0:	00001669 	.word	0x00001669
     fa4:	0000087d 	.word	0x0000087d
     fa8:	00000a35 	.word	0x00000a35
     fac:	00000a7d 	.word	0x00000a7d
     fb0:	00000abd 	.word	0x00000abd
     fb4:	00000add 	.word	0x00000add
     fb8:	00000b05 	.word	0x00000b05
     fbc:	00000b31 	.word	0x00000b31
     fc0:	00000c45 	.word	0x00000c45
     fc4:	00000bbd 	.word	0x00000bbd
     fc8:	00000c61 	.word	0x00000c61
     fcc:	00000c91 	.word	0x00000c91
     fd0:	00000cd9 	.word	0x00000cd9
     fd4:	00000d21 	.word	0x00000d21
     fd8:	40000800 	.word	0x40000800
     fdc:	40001c00 	.word	0x40001c00
     fe0:	000026e1 	.word	0x000026e1
     fe4:	4101c000 	.word	0x4101c000
     fe8:	200011e8 	.word	0x200011e8
     fec:	000012fd 	.word	0x000012fd
     ff0:	42001400 	.word	0x42001400
     ff4:	20001148 	.word	0x20001148
     ff8:	42001800 	.word	0x42001800
     ffc:	20001068 	.word	0x20001068
    1000:	00000d69 	.word	0x00000d69
    1004:	00000db1 	.word	0x00000db1
    1008:	00000df9 	.word	0x00000df9
    100c:	00000e41 	.word	0x00000e41
    1010:	00000e89 	.word	0x00000e89
    1014:	00000ec5 	.word	0x00000ec5

00001018 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    1018:	b538      	push	{r3, r4, r5, lr}
    101a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    101c:	4605      	mov	r5, r0
    101e:	b158      	cbz	r0, 1038 <ac_sync_init+0x20>
    1020:	1c08      	adds	r0, r1, #0
    1022:	bf18      	it	ne
    1024:	2001      	movne	r0, #1
    1026:	223b      	movs	r2, #59	; 0x3b
    1028:	4904      	ldr	r1, [pc, #16]	; (103c <ac_sync_init+0x24>)
    102a:	4b05      	ldr	r3, [pc, #20]	; (1040 <ac_sync_init+0x28>)
    102c:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    102e:	4621      	mov	r1, r4
    1030:	4628      	mov	r0, r5
    1032:	4b04      	ldr	r3, [pc, #16]	; (1044 <ac_sync_init+0x2c>)
    1034:	4798      	blx	r3
}
    1036:	bd38      	pop	{r3, r4, r5, pc}
    1038:	2000      	movs	r0, #0
    103a:	e7f4      	b.n	1026 <ac_sync_init+0xe>
    103c:	00002fc0 	.word	0x00002fc0
    1040:	00001341 	.word	0x00001341
    1044:	00001531 	.word	0x00001531

00001048 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1048:	b538      	push	{r3, r4, r5, lr}
    104a:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    104c:	4605      	mov	r5, r0
    104e:	b158      	cbz	r0, 1068 <adc_sync_init+0x20>
    1050:	1c08      	adds	r0, r1, #0
    1052:	bf18      	it	ne
    1054:	2001      	movne	r0, #1
    1056:	2243      	movs	r2, #67	; 0x43
    1058:	4904      	ldr	r1, [pc, #16]	; (106c <adc_sync_init+0x24>)
    105a:	4b05      	ldr	r3, [pc, #20]	; (1070 <adc_sync_init+0x28>)
    105c:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    105e:	4621      	mov	r1, r4
    1060:	4628      	mov	r0, r5
    1062:	4b04      	ldr	r3, [pc, #16]	; (1074 <adc_sync_init+0x2c>)
    1064:	4798      	blx	r3
}
    1066:	bd38      	pop	{r3, r4, r5, pc}
    1068:	2000      	movs	r0, #0
    106a:	e7f4      	b.n	1056 <adc_sync_init+0xe>
    106c:	00002fdc 	.word	0x00002fdc
    1070:	00001341 	.word	0x00001341
    1074:	00001609 	.word	0x00001609

00001078 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1078:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    107c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    107e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1080:	f3bf 8f5f 	dmb	sy
    1084:	4770      	bx	lr

00001086 <atomic_leave_critical>:
    1086:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    108a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    108c:	f383 8810 	msr	PRIMASK, r3
    1090:	4770      	bx	lr
	...

00001094 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1094:	b538      	push	{r3, r4, r5, lr}
    1096:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    1098:	4604      	mov	r4, r0
    109a:	b198      	cbz	r0, 10c4 <dac_sync_init+0x30>
    109c:	1c08      	adds	r0, r1, #0
    109e:	bf18      	it	ne
    10a0:	2001      	movne	r0, #1
    10a2:	223c      	movs	r2, #60	; 0x3c
    10a4:	4908      	ldr	r1, [pc, #32]	; (10c8 <dac_sync_init+0x34>)
    10a6:	4b09      	ldr	r3, [pc, #36]	; (10cc <dac_sync_init+0x38>)
    10a8:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    10aa:	4629      	mov	r1, r5
    10ac:	4620      	mov	r0, r4
    10ae:	4b08      	ldr	r3, [pc, #32]	; (10d0 <dac_sync_init+0x3c>)
    10b0:	4798      	blx	r3
	if (rc) {
    10b2:	4602      	mov	r2, r0
    10b4:	b920      	cbnz	r0, 10c0 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    10b6:	2300      	movs	r3, #0
    10b8:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    10ba:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    10bc:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    10be:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    10c0:	4610      	mov	r0, r2
    10c2:	bd38      	pop	{r3, r4, r5, pc}
    10c4:	2000      	movs	r0, #0
    10c6:	e7ec      	b.n	10a2 <dac_sync_init+0xe>
    10c8:	00002ff8 	.word	0x00002ff8
    10cc:	00001341 	.word	0x00001341
    10d0:	00001721 	.word	0x00001721

000010d4 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    10d4:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    10d6:	4b02      	ldr	r3, [pc, #8]	; (10e0 <delay_init+0xc>)
    10d8:	6018      	str	r0, [r3, #0]
    10da:	4b02      	ldr	r3, [pc, #8]	; (10e4 <delay_init+0x10>)
    10dc:	4798      	blx	r3
    10de:	bd08      	pop	{r3, pc}
    10e0:	20000150 	.word	0x20000150
    10e4:	00001e9d 	.word	0x00001e9d

000010e8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    10e8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    10ea:	4b04      	ldr	r3, [pc, #16]	; (10fc <delay_ms+0x14>)
    10ec:	681c      	ldr	r4, [r3, #0]
    10ee:	4b04      	ldr	r3, [pc, #16]	; (1100 <delay_ms+0x18>)
    10f0:	4798      	blx	r3
    10f2:	4601      	mov	r1, r0
    10f4:	4620      	mov	r0, r4
    10f6:	4b03      	ldr	r3, [pc, #12]	; (1104 <delay_ms+0x1c>)
    10f8:	4798      	blx	r3
    10fa:	bd10      	pop	{r4, pc}
    10fc:	20000150 	.word	0x20000150
    1100:	0000165d 	.word	0x0000165d
    1104:	00001eb1 	.word	0x00001eb1

00001108 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1108:	b508      	push	{r3, lr}
	return _event_system_init();
    110a:	4b01      	ldr	r3, [pc, #4]	; (1110 <event_system_init+0x8>)
    110c:	4798      	blx	r3
}
    110e:	bd08      	pop	{r3, pc}
    1110:	0000195d 	.word	0x0000195d

00001114 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1114:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1116:	4b0c      	ldr	r3, [pc, #48]	; (1148 <process_ext_irq+0x34>)
    1118:	685c      	ldr	r4, [r3, #4]
    111a:	42a0      	cmp	r0, r4
    111c:	d00e      	beq.n	113c <process_ext_irq+0x28>
    111e:	2301      	movs	r3, #1
    1120:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    1122:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    1124:	25ff      	movs	r5, #255	; 0xff
    1126:	e003      	b.n	1130 <process_ext_irq+0x1c>
    1128:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    112a:	185a      	adds	r2, r3, r1
    112c:	0852      	lsrs	r2, r2, #1
    112e:	d104      	bne.n	113a <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    1130:	42a0      	cmp	r0, r4
    1132:	d9f9      	bls.n	1128 <process_ext_irq+0x14>
	while (upper >= lower) {
    1134:	b13b      	cbz	r3, 1146 <process_ext_irq+0x32>
			lower = middle + 1;
    1136:	4631      	mov	r1, r6
    1138:	e7f7      	b.n	112a <process_ext_irq+0x16>
    113a:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    113c:	4b02      	ldr	r3, [pc, #8]	; (1148 <process_ext_irq+0x34>)
    113e:	681b      	ldr	r3, [r3, #0]
    1140:	b10b      	cbz	r3, 1146 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    1142:	4798      	blx	r3
    1144:	bd70      	pop	{r4, r5, r6, pc}
    1146:	bd70      	pop	{r4, r5, r6, pc}
    1148:	20000154 	.word	0x20000154

0000114c <ext_irq_init>:
{
    114c:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    114e:	4b05      	ldr	r3, [pc, #20]	; (1164 <ext_irq_init+0x18>)
    1150:	f04f 32ff 	mov.w	r2, #4294967295
    1154:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1156:	2200      	movs	r2, #0
    1158:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    115a:	4803      	ldr	r0, [pc, #12]	; (1168 <ext_irq_init+0x1c>)
    115c:	4b03      	ldr	r3, [pc, #12]	; (116c <ext_irq_init+0x20>)
    115e:	4798      	blx	r3
}
    1160:	bd08      	pop	{r3, pc}
    1162:	bf00      	nop
    1164:	20000154 	.word	0x20000154
    1168:	00001115 	.word	0x00001115
    116c:	000018dd 	.word	0x000018dd

00001170 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1170:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1172:	6943      	ldr	r3, [r0, #20]
    1174:	b103      	cbz	r3, 1178 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1176:	4798      	blx	r3
    1178:	bd08      	pop	{r3, pc}

0000117a <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    117a:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    117c:	6983      	ldr	r3, [r0, #24]
    117e:	b103      	cbz	r3, 1182 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1180:	4798      	blx	r3
    1182:	bd08      	pop	{r3, pc}

00001184 <flash_init>:
{
    1184:	b538      	push	{r3, r4, r5, lr}
    1186:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1188:	4604      	mov	r4, r0
    118a:	b190      	cbz	r0, 11b2 <flash_init+0x2e>
    118c:	1c08      	adds	r0, r1, #0
    118e:	bf18      	it	ne
    1190:	2001      	movne	r0, #1
    1192:	2242      	movs	r2, #66	; 0x42
    1194:	4908      	ldr	r1, [pc, #32]	; (11b8 <flash_init+0x34>)
    1196:	4b09      	ldr	r3, [pc, #36]	; (11bc <flash_init+0x38>)
    1198:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    119a:	4629      	mov	r1, r5
    119c:	4620      	mov	r0, r4
    119e:	4b08      	ldr	r3, [pc, #32]	; (11c0 <flash_init+0x3c>)
    11a0:	4798      	blx	r3
	if (rc) {
    11a2:	4603      	mov	r3, r0
    11a4:	b918      	cbnz	r0, 11ae <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    11a6:	4a07      	ldr	r2, [pc, #28]	; (11c4 <flash_init+0x40>)
    11a8:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    11aa:	4a07      	ldr	r2, [pc, #28]	; (11c8 <flash_init+0x44>)
    11ac:	6062      	str	r2, [r4, #4]
}
    11ae:	4618      	mov	r0, r3
    11b0:	bd38      	pop	{r3, r4, r5, pc}
    11b2:	2000      	movs	r0, #0
    11b4:	e7ed      	b.n	1192 <flash_init+0xe>
    11b6:	bf00      	nop
    11b8:	00003014 	.word	0x00003014
    11bc:	00001341 	.word	0x00001341
    11c0:	00001a99 	.word	0x00001a99
    11c4:	00001171 	.word	0x00001171
    11c8:	0000117b 	.word	0x0000117b

000011cc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    11cc:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    11ce:	6943      	ldr	r3, [r0, #20]
    11d0:	b103      	cbz	r3, 11d4 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    11d2:	4798      	blx	r3
    11d4:	bd08      	pop	{r3, pc}

000011d6 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    11d6:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    11d8:	6983      	ldr	r3, [r0, #24]
    11da:	b103      	cbz	r3, 11de <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    11dc:	4798      	blx	r3
    11de:	bd08      	pop	{r3, pc}

000011e0 <pwm_init>:
{
    11e0:	b538      	push	{r3, r4, r5, lr}
    11e2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    11e4:	4604      	mov	r4, r0
    11e6:	b180      	cbz	r0, 120a <pwm_init+0x2a>
    11e8:	1c08      	adds	r0, r1, #0
    11ea:	bf18      	it	ne
    11ec:	2001      	movne	r0, #1
    11ee:	223d      	movs	r2, #61	; 0x3d
    11f0:	4907      	ldr	r1, [pc, #28]	; (1210 <pwm_init+0x30>)
    11f2:	4b08      	ldr	r3, [pc, #32]	; (1214 <pwm_init+0x34>)
    11f4:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    11f6:	4629      	mov	r1, r5
    11f8:	4620      	mov	r0, r4
    11fa:	4b07      	ldr	r3, [pc, #28]	; (1218 <pwm_init+0x38>)
    11fc:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    11fe:	4b07      	ldr	r3, [pc, #28]	; (121c <pwm_init+0x3c>)
    1200:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1202:	4b07      	ldr	r3, [pc, #28]	; (1220 <pwm_init+0x40>)
    1204:	6063      	str	r3, [r4, #4]
}
    1206:	2000      	movs	r0, #0
    1208:	bd38      	pop	{r3, r4, r5, pc}
    120a:	2000      	movs	r0, #0
    120c:	e7ef      	b.n	11ee <pwm_init+0xe>
    120e:	bf00      	nop
    1210:	0000302c 	.word	0x0000302c
    1214:	00001341 	.word	0x00001341
    1218:	000025c9 	.word	0x000025c9
    121c:	000011cd 	.word	0x000011cd
    1220:	000011d7 	.word	0x000011d7

00001224 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1226:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1228:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    122a:	b12f      	cbz	r7, 1238 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    122c:	688d      	ldr	r5, [r1, #8]
    122e:	463c      	mov	r4, r7
    1230:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1232:	f1c2 0e01 	rsb	lr, r2, #1
    1236:	e00b      	b.n	1250 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1238:	4b0e      	ldr	r3, [pc, #56]	; (1274 <timer_add_timer_task+0x50>)
    123a:	4798      	blx	r3
		return;
    123c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    123e:	4473      	add	r3, lr
    1240:	68a0      	ldr	r0, [r4, #8]
    1242:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1244:	42ab      	cmp	r3, r5
    1246:	d20a      	bcs.n	125e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1248:	6823      	ldr	r3, [r4, #0]
    124a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    124c:	b153      	cbz	r3, 1264 <timer_add_timer_task+0x40>
    124e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1250:	6863      	ldr	r3, [r4, #4]
    1252:	4293      	cmp	r3, r2
    1254:	d8f3      	bhi.n	123e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1256:	68a0      	ldr	r0, [r4, #8]
    1258:	4403      	add	r3, r0
    125a:	1a9b      	subs	r3, r3, r2
    125c:	e7f2      	b.n	1244 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    125e:	42a7      	cmp	r7, r4
    1260:	d004      	beq.n	126c <timer_add_timer_task+0x48>
    1262:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1264:	4620      	mov	r0, r4
    1266:	4b04      	ldr	r3, [pc, #16]	; (1278 <timer_add_timer_task+0x54>)
    1268:	4798      	blx	r3
    126a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    126c:	4660      	mov	r0, ip
    126e:	4b01      	ldr	r3, [pc, #4]	; (1274 <timer_add_timer_task+0x50>)
    1270:	4798      	blx	r3
    1272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1274:	00001369 	.word	0x00001369
    1278:	00001395 	.word	0x00001395

0000127c <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    127c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1280:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1282:	6907      	ldr	r7, [r0, #16]
    1284:	3701      	adds	r7, #1
    1286:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1288:	7e03      	ldrb	r3, [r0, #24]
    128a:	f013 0f01 	tst.w	r3, #1
    128e:	d113      	bne.n	12b8 <timer_process_counted+0x3c>
    1290:	7e03      	ldrb	r3, [r0, #24]
    1292:	f013 0f02 	tst.w	r3, #2
    1296:	d10f      	bne.n	12b8 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1298:	b354      	cbz	r4, 12f0 <timer_process_counted+0x74>
    129a:	6863      	ldr	r3, [r4, #4]
    129c:	1afb      	subs	r3, r7, r3
    129e:	68a2      	ldr	r2, [r4, #8]
    12a0:	4293      	cmp	r3, r2
    12a2:	d307      	bcc.n	12b4 <timer_process_counted+0x38>
    12a4:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    12a6:	f100 0814 	add.w	r8, r0, #20
    12aa:	f8df 9048 	ldr.w	r9, [pc, #72]	; 12f4 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    12ae:	f8df a048 	ldr.w	sl, [pc, #72]	; 12f8 <timer_process_counted+0x7c>
    12b2:	e012      	b.n	12da <timer_process_counted+0x5e>
    12b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    12b8:	7e03      	ldrb	r3, [r0, #24]
    12ba:	f043 0302 	orr.w	r3, r3, #2
    12be:	7603      	strb	r3, [r0, #24]
		return;
    12c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c4:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    12c6:	68e3      	ldr	r3, [r4, #12]
    12c8:	4620      	mov	r0, r4
    12ca:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    12cc:	b185      	cbz	r5, 12f0 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    12ce:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    12d0:	686b      	ldr	r3, [r5, #4]
    12d2:	1afb      	subs	r3, r7, r3
    12d4:	68aa      	ldr	r2, [r5, #8]
    12d6:	4293      	cmp	r3, r2
    12d8:	d30a      	bcc.n	12f0 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    12da:	4640      	mov	r0, r8
    12dc:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    12de:	7c23      	ldrb	r3, [r4, #16]
    12e0:	2b01      	cmp	r3, #1
    12e2:	d1ef      	bne.n	12c4 <timer_process_counted+0x48>
			tmp->time_label = time;
    12e4:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    12e6:	463a      	mov	r2, r7
    12e8:	4621      	mov	r1, r4
    12ea:	4640      	mov	r0, r8
    12ec:	47d0      	blx	sl
    12ee:	e7e9      	b.n	12c4 <timer_process_counted+0x48>
    12f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12f4:	0000139d 	.word	0x0000139d
    12f8:	00001225 	.word	0x00001225

000012fc <timer_init>:
{
    12fc:	b570      	push	{r4, r5, r6, lr}
    12fe:	460e      	mov	r6, r1
    1300:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    1302:	4604      	mov	r4, r0
    1304:	b190      	cbz	r0, 132c <timer_init+0x30>
    1306:	b199      	cbz	r1, 1330 <timer_init+0x34>
    1308:	1c10      	adds	r0, r2, #0
    130a:	bf18      	it	ne
    130c:	2001      	movne	r0, #1
    130e:	2245      	movs	r2, #69	; 0x45
    1310:	4908      	ldr	r1, [pc, #32]	; (1334 <timer_init+0x38>)
    1312:	4b09      	ldr	r3, [pc, #36]	; (1338 <timer_init+0x3c>)
    1314:	4798      	blx	r3
	descr->func = func;
    1316:	4620      	mov	r0, r4
    1318:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    131c:	682b      	ldr	r3, [r5, #0]
    131e:	4631      	mov	r1, r6
    1320:	4798      	blx	r3
	descr->time                           = 0;
    1322:	2000      	movs	r0, #0
    1324:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1326:	4b05      	ldr	r3, [pc, #20]	; (133c <timer_init+0x40>)
    1328:	6063      	str	r3, [r4, #4]
}
    132a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    132c:	2000      	movs	r0, #0
    132e:	e7ee      	b.n	130e <timer_init+0x12>
    1330:	2000      	movs	r0, #0
    1332:	e7ec      	b.n	130e <timer_init+0x12>
    1334:	00003044 	.word	0x00003044
    1338:	00001341 	.word	0x00001341
    133c:	0000127d 	.word	0x0000127d

00001340 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1340:	b900      	cbnz	r0, 1344 <assert+0x4>
		__asm("BKPT #0");
    1342:	be00      	bkpt	0x0000
    1344:	4770      	bx	lr

00001346 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1346:	6803      	ldr	r3, [r0, #0]
    1348:	b14b      	cbz	r3, 135e <is_list_element+0x18>
		if (it == element) {
    134a:	428b      	cmp	r3, r1
    134c:	d009      	beq.n	1362 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    134e:	681b      	ldr	r3, [r3, #0]
    1350:	b11b      	cbz	r3, 135a <is_list_element+0x14>
		if (it == element) {
    1352:	4299      	cmp	r1, r3
    1354:	d1fb      	bne.n	134e <is_list_element+0x8>
			return true;
    1356:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1358:	4770      	bx	lr
	return false;
    135a:	2000      	movs	r0, #0
    135c:	4770      	bx	lr
    135e:	2000      	movs	r0, #0
    1360:	4770      	bx	lr
			return true;
    1362:	2001      	movs	r0, #1
    1364:	4770      	bx	lr
	...

00001368 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1368:	b538      	push	{r3, r4, r5, lr}
    136a:	4604      	mov	r4, r0
    136c:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    136e:	4b06      	ldr	r3, [pc, #24]	; (1388 <list_insert_as_head+0x20>)
    1370:	4798      	blx	r3
    1372:	f080 0001 	eor.w	r0, r0, #1
    1376:	2243      	movs	r2, #67	; 0x43
    1378:	4904      	ldr	r1, [pc, #16]	; (138c <list_insert_as_head+0x24>)
    137a:	b2c0      	uxtb	r0, r0
    137c:	4b04      	ldr	r3, [pc, #16]	; (1390 <list_insert_as_head+0x28>)
    137e:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1380:	6823      	ldr	r3, [r4, #0]
    1382:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1384:	6025      	str	r5, [r4, #0]
    1386:	bd38      	pop	{r3, r4, r5, pc}
    1388:	00001347 	.word	0x00001347
    138c:	0000305c 	.word	0x0000305c
    1390:	00001341 	.word	0x00001341

00001394 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1394:	6803      	ldr	r3, [r0, #0]
    1396:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1398:	6001      	str	r1, [r0, #0]
    139a:	4770      	bx	lr

0000139c <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    139c:	6803      	ldr	r3, [r0, #0]
    139e:	b10b      	cbz	r3, 13a4 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    13a0:	681a      	ldr	r2, [r3, #0]
    13a2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    13a4:	4618      	mov	r0, r3
    13a6:	4770      	bx	lr

000013a8 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    13a8:	b570      	push	{r4, r5, r6, lr}
    13aa:	460e      	mov	r6, r1
    13ac:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    13ae:	4604      	mov	r4, r0
    13b0:	b178      	cbz	r0, 13d2 <ringbuffer_init+0x2a>
    13b2:	b181      	cbz	r1, 13d6 <ringbuffer_init+0x2e>
    13b4:	b1a2      	cbz	r2, 13e0 <ringbuffer_init+0x38>
    13b6:	2001      	movs	r0, #1
    13b8:	2232      	movs	r2, #50	; 0x32
    13ba:	490d      	ldr	r1, [pc, #52]	; (13f0 <ringbuffer_init+0x48>)
    13bc:	4b0d      	ldr	r3, [pc, #52]	; (13f4 <ringbuffer_init+0x4c>)
    13be:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    13c0:	1e6b      	subs	r3, r5, #1
    13c2:	421d      	tst	r5, r3
    13c4:	d109      	bne.n	13da <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    13c6:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    13c8:	2000      	movs	r0, #0
    13ca:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    13cc:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    13ce:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    13d0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    13d2:	2000      	movs	r0, #0
    13d4:	e7f0      	b.n	13b8 <ringbuffer_init+0x10>
    13d6:	2000      	movs	r0, #0
    13d8:	e7ee      	b.n	13b8 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    13da:	f06f 000c 	mvn.w	r0, #12
    13de:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    13e0:	2232      	movs	r2, #50	; 0x32
    13e2:	4903      	ldr	r1, [pc, #12]	; (13f0 <ringbuffer_init+0x48>)
    13e4:	2000      	movs	r0, #0
    13e6:	4b03      	ldr	r3, [pc, #12]	; (13f4 <ringbuffer_init+0x4c>)
    13e8:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    13ea:	1e6b      	subs	r3, r5, #1
    13ec:	e7eb      	b.n	13c6 <ringbuffer_init+0x1e>
    13ee:	bf00      	nop
    13f0:	0000307c 	.word	0x0000307c
    13f4:	00001341 	.word	0x00001341

000013f8 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    13f8:	b538      	push	{r3, r4, r5, lr}
    13fa:	460d      	mov	r5, r1
	ASSERT(rb && data);
    13fc:	4604      	mov	r4, r0
    13fe:	b1a0      	cbz	r0, 142a <ringbuffer_get+0x32>
    1400:	1c08      	adds	r0, r1, #0
    1402:	bf18      	it	ne
    1404:	2001      	movne	r0, #1
    1406:	224a      	movs	r2, #74	; 0x4a
    1408:	490a      	ldr	r1, [pc, #40]	; (1434 <ringbuffer_get+0x3c>)
    140a:	4b0b      	ldr	r3, [pc, #44]	; (1438 <ringbuffer_get+0x40>)
    140c:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    140e:	68a3      	ldr	r3, [r4, #8]
    1410:	68e2      	ldr	r2, [r4, #12]
    1412:	429a      	cmp	r2, r3
    1414:	d00b      	beq.n	142e <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1416:	6862      	ldr	r2, [r4, #4]
    1418:	4013      	ands	r3, r2
    141a:	6822      	ldr	r2, [r4, #0]
    141c:	5cd3      	ldrb	r3, [r2, r3]
    141e:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1420:	68a3      	ldr	r3, [r4, #8]
    1422:	3301      	adds	r3, #1
    1424:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1426:	2000      	movs	r0, #0
    1428:	bd38      	pop	{r3, r4, r5, pc}
    142a:	2000      	movs	r0, #0
    142c:	e7eb      	b.n	1406 <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    142e:	f06f 0009 	mvn.w	r0, #9
}
    1432:	bd38      	pop	{r3, r4, r5, pc}
    1434:	0000307c 	.word	0x0000307c
    1438:	00001341 	.word	0x00001341

0000143c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    143c:	b538      	push	{r3, r4, r5, lr}
    143e:	460d      	mov	r5, r1
	ASSERT(rb);
    1440:	4604      	mov	r4, r0
    1442:	225b      	movs	r2, #91	; 0x5b
    1444:	490b      	ldr	r1, [pc, #44]	; (1474 <ringbuffer_put+0x38>)
    1446:	3000      	adds	r0, #0
    1448:	bf18      	it	ne
    144a:	2001      	movne	r0, #1
    144c:	4b0a      	ldr	r3, [pc, #40]	; (1478 <ringbuffer_put+0x3c>)
    144e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1450:	68e3      	ldr	r3, [r4, #12]
    1452:	6862      	ldr	r2, [r4, #4]
    1454:	4013      	ands	r3, r2
    1456:	6822      	ldr	r2, [r4, #0]
    1458:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    145a:	68e3      	ldr	r3, [r4, #12]
    145c:	6861      	ldr	r1, [r4, #4]
    145e:	68a2      	ldr	r2, [r4, #8]
    1460:	1a9a      	subs	r2, r3, r2
    1462:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1464:	bf84      	itt	hi
    1466:	1a59      	subhi	r1, r3, r1
    1468:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    146a:	3301      	adds	r3, #1
    146c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    146e:	2000      	movs	r0, #0
    1470:	bd38      	pop	{r3, r4, r5, pc}
    1472:	bf00      	nop
    1474:	0000307c 	.word	0x0000307c
    1478:	00001341 	.word	0x00001341

0000147c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    147c:	b510      	push	{r4, lr}
	ASSERT(rb);
    147e:	4604      	mov	r4, r0
    1480:	2271      	movs	r2, #113	; 0x71
    1482:	4905      	ldr	r1, [pc, #20]	; (1498 <ringbuffer_num+0x1c>)
    1484:	3000      	adds	r0, #0
    1486:	bf18      	it	ne
    1488:	2001      	movne	r0, #1
    148a:	4b04      	ldr	r3, [pc, #16]	; (149c <ringbuffer_num+0x20>)
    148c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    148e:	68e0      	ldr	r0, [r4, #12]
    1490:	68a3      	ldr	r3, [r4, #8]
}
    1492:	1ac0      	subs	r0, r0, r3
    1494:	bd10      	pop	{r4, pc}
    1496:	bf00      	nop
    1498:	0000307c 	.word	0x0000307c
    149c:	00001341 	.word	0x00001341

000014a0 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    14a0:	b510      	push	{r4, lr}
	ASSERT(rb);
    14a2:	4604      	mov	r4, r0
    14a4:	227b      	movs	r2, #123	; 0x7b
    14a6:	4905      	ldr	r1, [pc, #20]	; (14bc <ringbuffer_flush+0x1c>)
    14a8:	3000      	adds	r0, #0
    14aa:	bf18      	it	ne
    14ac:	2001      	movne	r0, #1
    14ae:	4b04      	ldr	r3, [pc, #16]	; (14c0 <ringbuffer_flush+0x20>)
    14b0:	4798      	blx	r3

	rb->read_index = rb->write_index;
    14b2:	68e3      	ldr	r3, [r4, #12]
    14b4:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    14b6:	2000      	movs	r0, #0
    14b8:	bd10      	pop	{r4, pc}
    14ba:	bf00      	nop
    14bc:	0000307c 	.word	0x0000307c
    14c0:	00001341 	.word	0x00001341

000014c4 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    14c4:	b510      	push	{r4, lr}
    14c6:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    14c8:	f44f 7281 	mov.w	r2, #258	; 0x102
    14cc:	4915      	ldr	r1, [pc, #84]	; (1524 <_ac_init+0x60>)
    14ce:	4816      	ldr	r0, [pc, #88]	; (1528 <_ac_init+0x64>)
    14d0:	4284      	cmp	r4, r0
    14d2:	bf14      	ite	ne
    14d4:	2000      	movne	r0, #0
    14d6:	2001      	moveq	r0, #1
    14d8:	4b14      	ldr	r3, [pc, #80]	; (152c <_ac_init+0x68>)
    14da:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    14dc:	6a23      	ldr	r3, [r4, #32]
    14de:	f013 0f01 	tst.w	r3, #1
    14e2:	d1fb      	bne.n	14dc <_ac_init+0x18>
    14e4:	6a23      	ldr	r3, [r4, #32]
    14e6:	f013 0f03 	tst.w	r3, #3
    14ea:	d1fb      	bne.n	14e4 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    14ec:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    14ee:	f013 0f02 	tst.w	r3, #2
    14f2:	d114      	bne.n	151e <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    14f4:	6a23      	ldr	r3, [r4, #32]
    14f6:	f013 0f01 	tst.w	r3, #1
    14fa:	d1fb      	bne.n	14f4 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    14fc:	7823      	ldrb	r3, [r4, #0]
    14fe:	f043 0301 	orr.w	r3, r3, #1
    1502:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1504:	6a23      	ldr	r3, [r4, #32]
    1506:	f013 0f01 	tst.w	r3, #1
    150a:	d1fb      	bne.n	1504 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    150c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1510:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    1512:	2000      	movs	r0, #0
    1514:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1516:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    1518:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    151a:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    151c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    151e:	f06f 0010 	mvn.w	r0, #16
}
    1522:	bd10      	pop	{r4, pc}
    1524:	000030a0 	.word	0x000030a0
    1528:	42002000 	.word	0x42002000
    152c:	00001341 	.word	0x00001341

00001530 <_ac_sync_init>:
{
    1530:	b538      	push	{r3, r4, r5, lr}
    1532:	460c      	mov	r4, r1
	ASSERT(device);
    1534:	4605      	mov	r5, r0
    1536:	226c      	movs	r2, #108	; 0x6c
    1538:	4905      	ldr	r1, [pc, #20]	; (1550 <_ac_sync_init+0x20>)
    153a:	3000      	adds	r0, #0
    153c:	bf18      	it	ne
    153e:	2001      	movne	r0, #1
    1540:	4b04      	ldr	r3, [pc, #16]	; (1554 <_ac_sync_init+0x24>)
    1542:	4798      	blx	r3
	device->hw = hw;
    1544:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    1546:	4620      	mov	r0, r4
    1548:	4b03      	ldr	r3, [pc, #12]	; (1558 <_ac_sync_init+0x28>)
    154a:	4798      	blx	r3
}
    154c:	bd38      	pop	{r3, r4, r5, pc}
    154e:	bf00      	nop
    1550:	000030a0 	.word	0x000030a0
    1554:	00001341 	.word	0x00001341
    1558:	000014c5 	.word	0x000014c5

0000155c <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    155c:	6b03      	ldr	r3, [r0, #48]	; 0x30
    155e:	f013 0f01 	tst.w	r3, #1
    1562:	d1fb      	bne.n	155c <_adc_init>
    1564:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1566:	f013 0f03 	tst.w	r3, #3
    156a:	d1fb      	bne.n	1564 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    156c:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    156e:	f013 0f02 	tst.w	r3, #2
    1572:	d12a      	bne.n	15ca <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1574:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1576:	f013 0f01 	tst.w	r3, #1
    157a:	d1fb      	bne.n	1574 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    157c:	8803      	ldrh	r3, [r0, #0]
    157e:	b29b      	uxth	r3, r3
    1580:	f043 0301 	orr.w	r3, r3, #1
    1584:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1586:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1588:	f013 0f01 	tst.w	r3, #1
    158c:	d1fb      	bne.n	1586 <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    158e:	2216      	movs	r2, #22
    1590:	4b0f      	ldr	r3, [pc, #60]	; (15d0 <_adc_init+0x74>)
    1592:	fb02 3101 	mla	r1, r2, r1, r3
    1596:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1598:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    159a:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    159c:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    159e:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    15a0:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    15a2:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    15a4:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    15a6:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    15a8:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    15aa:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    15ac:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    15ae:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    15b0:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    15b2:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    15b4:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    15b6:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    15b8:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    15ba:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    15bc:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    15be:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    15c0:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    15c2:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    15c4:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    15c6:	2000      	movs	r0, #0
    15c8:	4770      	bx	lr
		return ERR_DENIED;
    15ca:	f06f 0010 	mvn.w	r0, #16
}
    15ce:	4770      	bx	lr
    15d0:	000030b4 	.word	0x000030b4

000015d4 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    15d4:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    15d8:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    15dc:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    15e0:	b148      	cbz	r0, 15f6 <_adc_get_regs+0x22>
    15e2:	2801      	cmp	r0, #1
    15e4:	d009      	beq.n	15fa <_adc_get_regs+0x26>
{
    15e6:	b508      	push	{r3, lr}
	ASSERT(false);
    15e8:	2291      	movs	r2, #145	; 0x91
    15ea:	4905      	ldr	r1, [pc, #20]	; (1600 <_adc_get_regs+0x2c>)
    15ec:	2000      	movs	r0, #0
    15ee:	4b05      	ldr	r3, [pc, #20]	; (1604 <_adc_get_regs+0x30>)
    15f0:	4798      	blx	r3
	return 0;
    15f2:	2000      	movs	r0, #0
    15f4:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    15f6:	2000      	movs	r0, #0
    15f8:	4770      	bx	lr
    15fa:	2001      	movs	r0, #1
    15fc:	4770      	bx	lr
    15fe:	bf00      	nop
    1600:	000030e0 	.word	0x000030e0
    1604:	00001341 	.word	0x00001341

00001608 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    1608:	b538      	push	{r3, r4, r5, lr}
    160a:	460c      	mov	r4, r1
	ASSERT(device);
    160c:	4605      	mov	r5, r0
    160e:	22d5      	movs	r2, #213	; 0xd5
    1610:	4907      	ldr	r1, [pc, #28]	; (1630 <_adc_sync_init+0x28>)
    1612:	3000      	adds	r0, #0
    1614:	bf18      	it	ne
    1616:	2001      	movne	r0, #1
    1618:	4b06      	ldr	r3, [pc, #24]	; (1634 <_adc_sync_init+0x2c>)
    161a:	4798      	blx	r3

	device->hw = hw;
    161c:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    161e:	4620      	mov	r0, r4
    1620:	4b05      	ldr	r3, [pc, #20]	; (1638 <_adc_sync_init+0x30>)
    1622:	4798      	blx	r3
    1624:	4601      	mov	r1, r0
    1626:	4620      	mov	r0, r4
    1628:	4b04      	ldr	r3, [pc, #16]	; (163c <_adc_sync_init+0x34>)
    162a:	4798      	blx	r3
}
    162c:	bd38      	pop	{r3, r4, r5, pc}
    162e:	bf00      	nop
    1630:	000030e0 	.word	0x000030e0
    1634:	00001341 	.word	0x00001341
    1638:	000015d5 	.word	0x000015d5
    163c:	0000155d 	.word	0x0000155d

00001640 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1640:	0943      	lsrs	r3, r0, #5
    1642:	f000 001f 	and.w	r0, r0, #31
    1646:	2201      	movs	r2, #1
    1648:	fa02 f000 	lsl.w	r0, r2, r0
    164c:	3340      	adds	r3, #64	; 0x40
    164e:	4a02      	ldr	r2, [pc, #8]	; (1658 <_irq_set+0x18>)
    1650:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1654:	4770      	bx	lr
    1656:	bf00      	nop
    1658:	e000e100 	.word	0xe000e100

0000165c <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    165c:	f64b 3380 	movw	r3, #48000	; 0xbb80
    1660:	fb03 f000 	mul.w	r0, r3, r0
    1664:	4770      	bx	lr
	...

00001668 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1668:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    166a:	4a0c      	ldr	r2, [pc, #48]	; (169c <_init_chip+0x34>)
    166c:	8813      	ldrh	r3, [r2, #0]
    166e:	b29b      	uxth	r3, r3
    1670:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1672:	4b0b      	ldr	r3, [pc, #44]	; (16a0 <_init_chip+0x38>)
    1674:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    1676:	4b0b      	ldr	r3, [pc, #44]	; (16a4 <_init_chip+0x3c>)
    1678:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    167a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    167e:	4c0a      	ldr	r4, [pc, #40]	; (16a8 <_init_chip+0x40>)
    1680:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    1682:	4b0a      	ldr	r3, [pc, #40]	; (16ac <_init_chip+0x44>)
    1684:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1686:	f240 70ff 	movw	r0, #2047	; 0x7ff
    168a:	47a0      	blx	r4
}

static inline void hri_mclk_set_AHBMASK_DMAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    168c:	4a08      	ldr	r2, [pc, #32]	; (16b0 <_init_chip+0x48>)
    168e:	6913      	ldr	r3, [r2, #16]
    1690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    1694:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    1696:	4b07      	ldr	r3, [pc, #28]	; (16b4 <_init_chip+0x4c>)
    1698:	4798      	blx	r3
    169a:	bd10      	pop	{r4, pc}
    169c:	41004000 	.word	0x41004000
    16a0:	00001b39 	.word	0x00001b39
    16a4:	00001a61 	.word	0x00001a61
    16a8:	000019b9 	.word	0x000019b9
    16ac:	00001b5d 	.word	0x00001b5d
    16b0:	40000800 	.word	0x40000800
    16b4:	000017c1 	.word	0x000017c1

000016b8 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    16b8:	b510      	push	{r4, lr}
    16ba:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    16bc:	22f3      	movs	r2, #243	; 0xf3
    16be:	4915      	ldr	r1, [pc, #84]	; (1714 <_dac_init+0x5c>)
    16c0:	4815      	ldr	r0, [pc, #84]	; (1718 <_dac_init+0x60>)
    16c2:	4284      	cmp	r4, r0
    16c4:	bf14      	ite	ne
    16c6:	2000      	movne	r0, #0
    16c8:	2001      	moveq	r0, #1
    16ca:	4b14      	ldr	r3, [pc, #80]	; (171c <_dac_init+0x64>)
    16cc:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    16ce:	68a3      	ldr	r3, [r4, #8]
    16d0:	f013 0f01 	tst.w	r3, #1
    16d4:	d1fb      	bne.n	16ce <_dac_init+0x16>
    16d6:	68a3      	ldr	r3, [r4, #8]
    16d8:	f013 0f03 	tst.w	r3, #3
    16dc:	d1fb      	bne.n	16d6 <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    16de:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    16e0:	f013 0f02 	tst.w	r3, #2
    16e4:	d113      	bne.n	170e <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    16e6:	68a3      	ldr	r3, [r4, #8]
    16e8:	f013 0f01 	tst.w	r3, #1
    16ec:	d1fb      	bne.n	16e6 <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    16ee:	7823      	ldrb	r3, [r4, #0]
    16f0:	f043 0301 	orr.w	r3, r3, #1
    16f4:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    16f6:	68a3      	ldr	r3, [r4, #8]
    16f8:	f013 0f01 	tst.w	r3, #1
    16fc:	d1fb      	bne.n	16f6 <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    16fe:	2000      	movs	r0, #0
    1700:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    1702:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    1704:	81a0      	strh	r0, [r4, #12]
    1706:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    1708:	2301      	movs	r3, #1
    170a:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    170c:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    170e:	f06f 0003 	mvn.w	r0, #3
}
    1712:	bd10      	pop	{r4, pc}
    1714:	000030f8 	.word	0x000030f8
    1718:	43002400 	.word	0x43002400
    171c:	00001341 	.word	0x00001341

00001720 <_dac_sync_init>:
{
    1720:	b538      	push	{r3, r4, r5, lr}
    1722:	460c      	mov	r4, r1
	ASSERT(device);
    1724:	4605      	mov	r5, r0
    1726:	2261      	movs	r2, #97	; 0x61
    1728:	4905      	ldr	r1, [pc, #20]	; (1740 <_dac_sync_init+0x20>)
    172a:	3000      	adds	r0, #0
    172c:	bf18      	it	ne
    172e:	2001      	movne	r0, #1
    1730:	4b04      	ldr	r3, [pc, #16]	; (1744 <_dac_sync_init+0x24>)
    1732:	4798      	blx	r3
	device->hw = hw;
    1734:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    1736:	4620      	mov	r0, r4
    1738:	4b03      	ldr	r3, [pc, #12]	; (1748 <_dac_sync_init+0x28>)
    173a:	4798      	blx	r3
}
    173c:	bd38      	pop	{r3, r4, r5, pc}
    173e:	bf00      	nop
    1740:	000030f8 	.word	0x000030f8
    1744:	00001341 	.word	0x00001341
    1748:	000016b9 	.word	0x000016b9

0000174c <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    174c:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    174e:	4a1a      	ldr	r2, [pc, #104]	; (17b8 <_dmac_handler+0x6c>)
    1750:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1752:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    1756:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    175a:	4818      	ldr	r0, [pc, #96]	; (17bc <_dmac_handler+0x70>)
    175c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    1760:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    1764:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    1768:	f012 0f01 	tst.w	r2, #1
    176c:	d10a      	bne.n	1784 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    176e:	011a      	lsls	r2, r3, #4
    1770:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1774:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    1778:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    177c:	f012 0f02 	tst.w	r2, #2
    1780:	d10b      	bne.n	179a <_dmac_handler+0x4e>
    1782:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    1784:	011a      	lsls	r2, r3, #4
    1786:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    178a:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    178e:	2101      	movs	r1, #1
    1790:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    1794:	6843      	ldr	r3, [r0, #4]
    1796:	4798      	blx	r3
    1798:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    179a:	011a      	lsls	r2, r3, #4
    179c:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    17a0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    17a4:	2102      	movs	r1, #2
    17a6:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    17aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    17ae:	4a03      	ldr	r2, [pc, #12]	; (17bc <_dmac_handler+0x70>)
    17b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    17b4:	4798      	blx	r3
	}
}
    17b6:	e7e4      	b.n	1782 <_dmac_handler+0x36>
    17b8:	4100a000 	.word	0x4100a000
    17bc:	20000160 	.word	0x20000160

000017c0 <_dma_init>:
{
    17c0:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    17c2:	4a33      	ldr	r2, [pc, #204]	; (1890 <_dma_init+0xd0>)
    17c4:	8813      	ldrh	r3, [r2, #0]
    17c6:	f023 0302 	bic.w	r3, r3, #2
    17ca:	041b      	lsls	r3, r3, #16
    17cc:	0c1b      	lsrs	r3, r3, #16
    17ce:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    17d0:	8853      	ldrh	r3, [r2, #2]
    17d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    17d6:	041b      	lsls	r3, r3, #16
    17d8:	0c1b      	lsrs	r3, r3, #16
    17da:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    17dc:	8813      	ldrh	r3, [r2, #0]
    17de:	b29b      	uxth	r3, r3
    17e0:	f043 0301 	orr.w	r3, r3, #1
    17e4:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    17e6:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    17e8:	f013 0f01 	tst.w	r3, #1
    17ec:	d1fb      	bne.n	17e6 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    17ee:	4b28      	ldr	r3, [pc, #160]	; (1890 <_dma_init+0xd0>)
    17f0:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    17f4:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    17f6:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    17f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    17fc:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    17fe:	2000      	movs	r0, #0
    1800:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1802:	4a24      	ldr	r2, [pc, #144]	; (1894 <_dma_init+0xd4>)
    1804:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    1808:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    180a:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    180e:	639a      	str	r2, [r3, #56]	; 0x38
    1810:	4b21      	ldr	r3, [pc, #132]	; (1898 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1812:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1816:	681c      	ldr	r4, [r3, #0]
    1818:	0101      	lsls	r1, r0, #4
    181a:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    181e:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1822:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1824:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    1826:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    182a:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    182c:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1830:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1832:	4429      	add	r1, r5
    1834:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    1838:	3001      	adds	r0, #1
    183a:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    183c:	2820      	cmp	r0, #32
    183e:	d1ea      	bne.n	1816 <_dma_init+0x56>
    1840:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1842:	2001      	movs	r0, #1
    1844:	4915      	ldr	r1, [pc, #84]	; (189c <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    1846:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    1848:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    184c:	d00b      	beq.n	1866 <_dma_init+0xa6>
    184e:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    1850:	2b24      	cmp	r3, #36	; 0x24
    1852:	d1f8      	bne.n	1846 <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1854:	4a0e      	ldr	r2, [pc, #56]	; (1890 <_dma_init+0xd0>)
    1856:	8813      	ldrh	r3, [r2, #0]
    1858:	b29b      	uxth	r3, r3
    185a:	f043 0302 	orr.w	r3, r3, #2
    185e:	8013      	strh	r3, [r2, #0]
}
    1860:	2000      	movs	r0, #0
    1862:	bc30      	pop	{r4, r5}
    1864:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1866:	095c      	lsrs	r4, r3, #5
    1868:	f002 021f 	and.w	r2, r2, #31
    186c:	fa00 f202 	lsl.w	r2, r0, r2
    1870:	f104 0520 	add.w	r5, r4, #32
    1874:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1878:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    187c:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1880:	f104 0560 	add.w	r5, r4, #96	; 0x60
    1884:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1888:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    188c:	e7df      	b.n	184e <_dma_init+0x8e>
    188e:	bf00      	nop
    1890:	4100a000 	.word	0x4100a000
    1894:	20000160 	.word	0x20000160
    1898:	00003110 	.word	0x00003110
    189c:	e000e100 	.word	0xe000e100

000018a0 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    18a0:	b508      	push	{r3, lr}
	_dmac_handler();
    18a2:	4b01      	ldr	r3, [pc, #4]	; (18a8 <DMAC_0_Handler+0x8>)
    18a4:	4798      	blx	r3
    18a6:	bd08      	pop	{r3, pc}
    18a8:	0000174d 	.word	0x0000174d

000018ac <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    18ac:	b508      	push	{r3, lr}
	_dmac_handler();
    18ae:	4b01      	ldr	r3, [pc, #4]	; (18b4 <DMAC_1_Handler+0x8>)
    18b0:	4798      	blx	r3
    18b2:	bd08      	pop	{r3, pc}
    18b4:	0000174d 	.word	0x0000174d

000018b8 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    18b8:	b508      	push	{r3, lr}
	_dmac_handler();
    18ba:	4b01      	ldr	r3, [pc, #4]	; (18c0 <DMAC_2_Handler+0x8>)
    18bc:	4798      	blx	r3
    18be:	bd08      	pop	{r3, pc}
    18c0:	0000174d 	.word	0x0000174d

000018c4 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    18c4:	b508      	push	{r3, lr}
	_dmac_handler();
    18c6:	4b01      	ldr	r3, [pc, #4]	; (18cc <DMAC_3_Handler+0x8>)
    18c8:	4798      	blx	r3
    18ca:	bd08      	pop	{r3, pc}
    18cc:	0000174d 	.word	0x0000174d

000018d0 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    18d0:	b508      	push	{r3, lr}
	_dmac_handler();
    18d2:	4b01      	ldr	r3, [pc, #4]	; (18d8 <DMAC_4_Handler+0x8>)
    18d4:	4798      	blx	r3
    18d6:	bd08      	pop	{r3, pc}
    18d8:	0000174d 	.word	0x0000174d

000018dc <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18dc:	4a1e      	ldr	r2, [pc, #120]	; (1958 <_ext_irq_init+0x7c>)
    18de:	6853      	ldr	r3, [r2, #4]
    18e0:	f013 0f01 	tst.w	r3, #1
    18e4:	d1fb      	bne.n	18de <_ext_irq_init+0x2>
    18e6:	4a1c      	ldr	r2, [pc, #112]	; (1958 <_ext_irq_init+0x7c>)
    18e8:	6853      	ldr	r3, [r2, #4]
    18ea:	f013 0f03 	tst.w	r3, #3
    18ee:	d1fb      	bne.n	18e8 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    18f0:	4b19      	ldr	r3, [pc, #100]	; (1958 <_ext_irq_init+0x7c>)
    18f2:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    18f4:	f013 0f02 	tst.w	r3, #2
    18f8:	d12b      	bne.n	1952 <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    18fa:	4a17      	ldr	r2, [pc, #92]	; (1958 <_ext_irq_init+0x7c>)
    18fc:	6853      	ldr	r3, [r2, #4]
    18fe:	f013 0f01 	tst.w	r3, #1
    1902:	d1fb      	bne.n	18fc <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    1904:	4a14      	ldr	r2, [pc, #80]	; (1958 <_ext_irq_init+0x7c>)
    1906:	7813      	ldrb	r3, [r2, #0]
    1908:	f043 0301 	orr.w	r3, r3, #1
    190c:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    190e:	6853      	ldr	r3, [r2, #4]
    1910:	f013 0f01 	tst.w	r3, #1
    1914:	d1fb      	bne.n	190e <_ext_irq_init+0x32>
    1916:	4a10      	ldr	r2, [pc, #64]	; (1958 <_ext_irq_init+0x7c>)
    1918:	6853      	ldr	r3, [r2, #4]
    191a:	f013 0f03 	tst.w	r3, #3
    191e:	d1fb      	bne.n	1918 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1920:	4b0d      	ldr	r3, [pc, #52]	; (1958 <_ext_irq_init+0x7c>)
    1922:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1924:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    1928:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    192a:	2200      	movs	r2, #0
    192c:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    192e:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1930:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1932:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1934:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1936:	61da      	str	r2, [r3, #28]
    1938:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    193a:	461a      	mov	r2, r3
    193c:	6853      	ldr	r3, [r2, #4]
    193e:	f013 0f03 	tst.w	r3, #3
    1942:	d1fb      	bne.n	193c <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1944:	4a04      	ldr	r2, [pc, #16]	; (1958 <_ext_irq_init+0x7c>)
    1946:	7813      	ldrb	r3, [r2, #0]
    1948:	f043 0302 	orr.w	r3, r3, #2
    194c:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    194e:	2000      	movs	r0, #0
    1950:	4770      	bx	lr
		return ERR_DENIED;
    1952:	f06f 0010 	mvn.w	r0, #16
}
    1956:	4770      	bx	lr
    1958:	40002800 	.word	0x40002800

0000195c <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    195c:	b430      	push	{r4, r5}
    195e:	4814      	ldr	r0, [pc, #80]	; (19b0 <_event_system_init+0x54>)
    1960:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1964:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    1966:	4c13      	ldr	r4, [pc, #76]	; (19b4 <_event_system_init+0x58>)
    1968:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    196a:	f813 1b01 	ldrb.w	r1, [r3], #1
    196e:	3248      	adds	r2, #72	; 0x48
    1970:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1974:	42ab      	cmp	r3, r5
    1976:	d1f7      	bne.n	1968 <_event_system_init+0xc>
    1978:	480d      	ldr	r0, [pc, #52]	; (19b0 <_event_system_init+0x54>)
    197a:	f100 0442 	add.w	r4, r0, #66	; 0x42
    197e:	3080      	adds	r0, #128	; 0x80
    1980:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    1982:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    1986:	00ca      	lsls	r2, r1, #3
    1988:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    198c:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    1990:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1992:	f850 3f04 	ldr.w	r3, [r0, #4]!
    1996:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    1998:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    199c:	43db      	mvns	r3, r3
    199e:	b2db      	uxtb	r3, r3
    19a0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    19a4:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    19a6:	2920      	cmp	r1, #32
    19a8:	d1eb      	bne.n	1982 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    19aa:	2000      	movs	r0, #0
    19ac:	bc30      	pop	{r4, r5}
    19ae:	4770      	bx	lr
    19b0:	00003210 	.word	0x00003210
    19b4:	4100e000 	.word	0x4100e000

000019b8 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    19b8:	f010 0f01 	tst.w	r0, #1
    19bc:	d002      	beq.n	19c4 <_gclk_init_generators_by_fref+0xc>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
    19be:	4a23      	ldr	r2, [pc, #140]	; (1a4c <_gclk_init_generators_by_fref+0x94>)
    19c0:	4b23      	ldr	r3, [pc, #140]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    19c2:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    19c4:	f010 0f02 	tst.w	r0, #2
    19c8:	d002      	beq.n	19d0 <_gclk_init_generators_by_fref+0x18>
    19ca:	4a22      	ldr	r2, [pc, #136]	; (1a54 <_gclk_init_generators_by_fref+0x9c>)
    19cc:	4b20      	ldr	r3, [pc, #128]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    19ce:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    19d0:	f010 0f04 	tst.w	r0, #4
    19d4:	d002      	beq.n	19dc <_gclk_init_generators_by_fref+0x24>
    19d6:	4a1d      	ldr	r2, [pc, #116]	; (1a4c <_gclk_init_generators_by_fref+0x94>)
    19d8:	4b1d      	ldr	r3, [pc, #116]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    19da:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    19dc:	f010 0f08 	tst.w	r0, #8
    19e0:	d002      	beq.n	19e8 <_gclk_init_generators_by_fref+0x30>
    19e2:	4a1a      	ldr	r2, [pc, #104]	; (1a4c <_gclk_init_generators_by_fref+0x94>)
    19e4:	4b1a      	ldr	r3, [pc, #104]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    19e6:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    19e8:	f010 0f10 	tst.w	r0, #16
    19ec:	d002      	beq.n	19f4 <_gclk_init_generators_by_fref+0x3c>
    19ee:	4a17      	ldr	r2, [pc, #92]	; (1a4c <_gclk_init_generators_by_fref+0x94>)
    19f0:	4b17      	ldr	r3, [pc, #92]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    19f2:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    19f4:	f010 0f20 	tst.w	r0, #32
    19f8:	d002      	beq.n	1a00 <_gclk_init_generators_by_fref+0x48>
    19fa:	4a14      	ldr	r2, [pc, #80]	; (1a4c <_gclk_init_generators_by_fref+0x94>)
    19fc:	4b14      	ldr	r3, [pc, #80]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    19fe:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    1a00:	f010 0f40 	tst.w	r0, #64	; 0x40
    1a04:	d002      	beq.n	1a0c <_gclk_init_generators_by_fref+0x54>
    1a06:	4a11      	ldr	r2, [pc, #68]	; (1a4c <_gclk_init_generators_by_fref+0x94>)
    1a08:	4b11      	ldr	r3, [pc, #68]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    1a0a:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    1a0c:	f010 0f80 	tst.w	r0, #128	; 0x80
    1a10:	d002      	beq.n	1a18 <_gclk_init_generators_by_fref+0x60>
    1a12:	4a0e      	ldr	r2, [pc, #56]	; (1a4c <_gclk_init_generators_by_fref+0x94>)
    1a14:	4b0e      	ldr	r3, [pc, #56]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    1a16:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    1a18:	f410 7f80 	tst.w	r0, #256	; 0x100
    1a1c:	d002      	beq.n	1a24 <_gclk_init_generators_by_fref+0x6c>
    1a1e:	4a0b      	ldr	r2, [pc, #44]	; (1a4c <_gclk_init_generators_by_fref+0x94>)
    1a20:	4b0b      	ldr	r3, [pc, #44]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    1a22:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    1a24:	f410 7f00 	tst.w	r0, #512	; 0x200
    1a28:	d002      	beq.n	1a30 <_gclk_init_generators_by_fref+0x78>
    1a2a:	4a08      	ldr	r2, [pc, #32]	; (1a4c <_gclk_init_generators_by_fref+0x94>)
    1a2c:	4b08      	ldr	r3, [pc, #32]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    1a2e:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    1a30:	f410 6f80 	tst.w	r0, #1024	; 0x400
    1a34:	d002      	beq.n	1a3c <_gclk_init_generators_by_fref+0x84>
    1a36:	4a08      	ldr	r2, [pc, #32]	; (1a58 <_gclk_init_generators_by_fref+0xa0>)
    1a38:	4b05      	ldr	r3, [pc, #20]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    1a3a:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    1a3c:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1a40:	d002      	beq.n	1a48 <_gclk_init_generators_by_fref+0x90>
    1a42:	4a06      	ldr	r2, [pc, #24]	; (1a5c <_gclk_init_generators_by_fref+0xa4>)
    1a44:	4b02      	ldr	r3, [pc, #8]	; (1a50 <_gclk_init_generators_by_fref+0x98>)
    1a46:	64da      	str	r2, [r3, #76]	; 0x4c
    1a48:	4770      	bx	lr
    1a4a:	bf00      	nop
    1a4c:	00012b06 	.word	0x00012b06
    1a50:	40001c00 	.word	0x40001c00
    1a54:	00012306 	.word	0x00012306
    1a58:	00012b05 	.word	0x00012b05
    1a5c:	00013b05 	.word	0x00013b05

00001a60 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1a60:	2201      	movs	r2, #1
    1a62:	4b01      	ldr	r3, [pc, #4]	; (1a68 <_mclk_init+0x8>)
    1a64:	715a      	strb	r2, [r3, #5]
    1a66:	4770      	bx	lr
    1a68:	40000800 	.word	0x40000800

00001a6c <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    1a6c:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1a6e:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1a70:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1a72:	f012 0f01 	tst.w	r2, #1
    1a76:	d005      	beq.n	1a84 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    1a78:	2201      	movs	r2, #1
    1a7a:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    1a7c:	6803      	ldr	r3, [r0, #0]
    1a7e:	b153      	cbz	r3, 1a96 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    1a80:	4798      	blx	r3
    1a82:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    1a84:	8a1a      	ldrh	r2, [r3, #16]
    1a86:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    1a88:	b12a      	cbz	r2, 1a96 <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    1a8a:	f240 225e 	movw	r2, #606	; 0x25e
    1a8e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    1a90:	6843      	ldr	r3, [r0, #4]
    1a92:	b103      	cbz	r3, 1a96 <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    1a94:	4798      	blx	r3
    1a96:	bd08      	pop	{r3, pc}

00001a98 <_flash_init>:
{
    1a98:	b538      	push	{r3, r4, r5, lr}
    1a9a:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    1a9c:	4605      	mov	r5, r0
    1a9e:	b350      	cbz	r0, 1af6 <_flash_init+0x5e>
    1aa0:	4816      	ldr	r0, [pc, #88]	; (1afc <_flash_init+0x64>)
    1aa2:	4281      	cmp	r1, r0
    1aa4:	bf14      	ite	ne
    1aa6:	2000      	movne	r0, #0
    1aa8:	2001      	moveq	r0, #1
    1aaa:	2256      	movs	r2, #86	; 0x56
    1aac:	4914      	ldr	r1, [pc, #80]	; (1b00 <_flash_init+0x68>)
    1aae:	4b15      	ldr	r3, [pc, #84]	; (1b04 <_flash_init+0x6c>)
    1ab0:	4798      	blx	r3
	device->hw = hw;
    1ab2:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    1ab4:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    1ab6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    1aba:	049b      	lsls	r3, r3, #18
    1abc:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    1abe:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    1ac0:	4b11      	ldr	r3, [pc, #68]	; (1b08 <_flash_init+0x70>)
    1ac2:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1ac4:	4b11      	ldr	r3, [pc, #68]	; (1b0c <_flash_init+0x74>)
    1ac6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1aca:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ace:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ad2:	f3bf 8f6f 	isb	sy
    1ad6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1ade:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1ae2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1ae6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    1aea:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1aee:	6019      	str	r1, [r3, #0]
    1af0:	601a      	str	r2, [r3, #0]
}
    1af2:	2000      	movs	r0, #0
    1af4:	bd38      	pop	{r3, r4, r5, pc}
    1af6:	2000      	movs	r0, #0
    1af8:	e7d7      	b.n	1aaa <_flash_init+0x12>
    1afa:	bf00      	nop
    1afc:	41004000 	.word	0x41004000
    1b00:	00003314 	.word	0x00003314
    1b04:	00001341 	.word	0x00001341
    1b08:	200006e0 	.word	0x200006e0
    1b0c:	e000e100 	.word	0xe000e100

00001b10 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1b10:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1b12:	4b02      	ldr	r3, [pc, #8]	; (1b1c <NVMCTRL_0_Handler+0xc>)
    1b14:	6818      	ldr	r0, [r3, #0]
    1b16:	4b02      	ldr	r3, [pc, #8]	; (1b20 <NVMCTRL_0_Handler+0x10>)
    1b18:	4798      	blx	r3
    1b1a:	bd08      	pop	{r3, pc}
    1b1c:	200006e0 	.word	0x200006e0
    1b20:	00001a6d 	.word	0x00001a6d

00001b24 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1b24:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1b26:	4b02      	ldr	r3, [pc, #8]	; (1b30 <NVMCTRL_1_Handler+0xc>)
    1b28:	6818      	ldr	r0, [r3, #0]
    1b2a:	4b02      	ldr	r3, [pc, #8]	; (1b34 <NVMCTRL_1_Handler+0x10>)
    1b2c:	4798      	blx	r3
    1b2e:	bd08      	pop	{r3, pc}
    1b30:	200006e0 	.word	0x200006e0
    1b34:	00001a6d 	.word	0x00001a6d

00001b38 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    1b38:	4b07      	ldr	r3, [pc, #28]	; (1b58 <_osc32kctrl_init_sources+0x20>)
    1b3a:	f242 024e 	movw	r2, #8270	; 0x204e
    1b3e:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1b40:	2201      	movs	r2, #1
    1b42:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1b44:	75da      	strb	r2, [r3, #23]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    1b46:	461a      	mov	r2, r3
    1b48:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    1b4a:	f013 0f01 	tst.w	r3, #1
    1b4e:	d0fb      	beq.n	1b48 <_osc32kctrl_init_sources+0x10>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1b50:	2205      	movs	r2, #5
    1b52:	4b01      	ldr	r3, [pc, #4]	; (1b58 <_osc32kctrl_init_sources+0x20>)
    1b54:	741a      	strb	r2, [r3, #16]
    1b56:	4770      	bx	lr
    1b58:	40001400 	.word	0x40001400

00001b5c <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1b5c:	4a2b      	ldr	r2, [pc, #172]	; (1c0c <_oscctrl_init_referenced_generators+0xb0>)
    1b5e:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1b60:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1b64:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1b68:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1b6a:	4b29      	ldr	r3, [pc, #164]	; (1c10 <_oscctrl_init_referenced_generators+0xb4>)
    1b6c:	2200      	movs	r2, #0
    1b6e:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1b70:	4a28      	ldr	r2, [pc, #160]	; (1c14 <_oscctrl_init_referenced_generators+0xb8>)
    1b72:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b74:	461a      	mov	r2, r3
    1b76:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    1b7a:	f013 0f10 	tst.w	r3, #16
    1b7e:	d1fa      	bne.n	1b76 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1b80:	2200      	movs	r2, #0
    1b82:	4b23      	ldr	r3, [pc, #140]	; (1c10 <_oscctrl_init_referenced_generators+0xb4>)
    1b84:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b88:	461a      	mov	r2, r3
    1b8a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1b8e:	f013 0f04 	tst.w	r3, #4
    1b92:	d1fa      	bne.n	1b8a <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    1b94:	2242      	movs	r2, #66	; 0x42
    1b96:	4b1e      	ldr	r3, [pc, #120]	; (1c10 <_oscctrl_init_referenced_generators+0xb4>)
    1b98:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1b9a:	461a      	mov	r2, r3
    1b9c:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    1ba0:	f013 0f02 	tst.w	r3, #2
    1ba4:	d1fa      	bne.n	1b9c <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    1ba6:	4b1a      	ldr	r3, [pc, #104]	; (1c10 <_oscctrl_init_referenced_generators+0xb4>)
    1ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    1baa:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1bac:	461a      	mov	r2, r3
    1bae:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    1bb2:	f013 0f08 	tst.w	r3, #8
    1bb6:	d1fa      	bne.n	1bae <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    1bb8:	2282      	movs	r2, #130	; 0x82
    1bba:	4b15      	ldr	r3, [pc, #84]	; (1c10 <_oscctrl_init_referenced_generators+0xb4>)
    1bbc:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1bc0:	461a      	mov	r2, r3
    1bc2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    1bc6:	f013 0f04 	tst.w	r3, #4
    1bca:	d1fa      	bne.n	1bc2 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    1bcc:	4b10      	ldr	r3, [pc, #64]	; (1c10 <_oscctrl_init_referenced_generators+0xb4>)
    1bce:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    1bd2:	f013 0f01 	tst.w	r3, #1
    1bd6:	d012      	beq.n	1bfe <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    1bd8:	4a0d      	ldr	r2, [pc, #52]	; (1c10 <_oscctrl_init_referenced_generators+0xb4>)
    1bda:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1bdc:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1be0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1be4:	d1f9      	bne.n	1bda <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    1be6:	4a09      	ldr	r2, [pc, #36]	; (1c0c <_oscctrl_init_referenced_generators+0xb0>)
    1be8:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    1bea:	2b00      	cmp	r3, #0
    1bec:	d1fc      	bne.n	1be8 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1bee:	4a07      	ldr	r2, [pc, #28]	; (1c0c <_oscctrl_init_referenced_generators+0xb0>)
    1bf0:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1bf2:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1bf6:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    1bfa:	6213      	str	r3, [r2, #32]
    1bfc:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1bfe:	4a04      	ldr	r2, [pc, #16]	; (1c10 <_oscctrl_init_referenced_generators+0xb4>)
    1c00:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1c02:	f413 7f80 	tst.w	r3, #256	; 0x100
    1c06:	d0fb      	beq.n	1c00 <_oscctrl_init_referenced_generators+0xa4>
    1c08:	e7ed      	b.n	1be6 <_oscctrl_init_referenced_generators+0x8a>
    1c0a:	bf00      	nop
    1c0c:	40001c00 	.word	0x40001c00
    1c10:	40001000 	.word	0x40001000
    1c14:	04010000 	.word	0x04010000

00001c18 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1c18:	b500      	push	{lr}
    1c1a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1c1c:	4b0d      	ldr	r3, [pc, #52]	; (1c54 <RAMECC_Handler+0x3c>)
    1c1e:	789b      	ldrb	r3, [r3, #2]
    1c20:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1c22:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1c24:	9b01      	ldr	r3, [sp, #4]
    1c26:	f013 0f02 	tst.w	r3, #2
    1c2a:	d006      	beq.n	1c3a <RAMECC_Handler+0x22>
    1c2c:	4b0a      	ldr	r3, [pc, #40]	; (1c58 <RAMECC_Handler+0x40>)
    1c2e:	681b      	ldr	r3, [r3, #0]
    1c30:	b11b      	cbz	r3, 1c3a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1c32:	4a08      	ldr	r2, [pc, #32]	; (1c54 <RAMECC_Handler+0x3c>)
    1c34:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1c36:	4798      	blx	r3
    1c38:	e009      	b.n	1c4e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    1c3a:	9b01      	ldr	r3, [sp, #4]
    1c3c:	f013 0f01 	tst.w	r3, #1
    1c40:	d005      	beq.n	1c4e <RAMECC_Handler+0x36>
    1c42:	4b05      	ldr	r3, [pc, #20]	; (1c58 <RAMECC_Handler+0x40>)
    1c44:	685b      	ldr	r3, [r3, #4]
    1c46:	b113      	cbz	r3, 1c4e <RAMECC_Handler+0x36>
    1c48:	4a02      	ldr	r2, [pc, #8]	; (1c54 <RAMECC_Handler+0x3c>)
    1c4a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1c4c:	4798      	blx	r3
	} else {
		return;
	}
}
    1c4e:	b003      	add	sp, #12
    1c50:	f85d fb04 	ldr.w	pc, [sp], #4
    1c54:	41020000 	.word	0x41020000
    1c58:	20001208 	.word	0x20001208

00001c5c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1c5c:	b470      	push	{r4, r5, r6}
    1c5e:	b087      	sub	sp, #28
    1c60:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1c62:	466c      	mov	r4, sp
    1c64:	4d0c      	ldr	r5, [pc, #48]	; (1c98 <_sercom_get_hardware_index+0x3c>)
    1c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1c6a:	e895 0003 	ldmia.w	r5, {r0, r1}
    1c6e:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1c72:	9b00      	ldr	r3, [sp, #0]
    1c74:	42b3      	cmp	r3, r6
    1c76:	d00c      	beq.n	1c92 <_sercom_get_hardware_index+0x36>
    1c78:	4632      	mov	r2, r6
    1c7a:	2001      	movs	r0, #1
    1c7c:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    1c80:	4293      	cmp	r3, r2
    1c82:	d007      	beq.n	1c94 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c84:	3001      	adds	r0, #1
    1c86:	2806      	cmp	r0, #6
    1c88:	d1f8      	bne.n	1c7c <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    1c8a:	2000      	movs	r0, #0
}
    1c8c:	b007      	add	sp, #28
    1c8e:	bc70      	pop	{r4, r5, r6}
    1c90:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1c92:	2000      	movs	r0, #0
			return i;
    1c94:	b2c0      	uxtb	r0, r0
    1c96:	e7f9      	b.n	1c8c <_sercom_get_hardware_index+0x30>
    1c98:	00003334 	.word	0x00003334

00001c9c <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1c9c:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1c9e:	4b03      	ldr	r3, [pc, #12]	; (1cac <_sercom_get_irq_num+0x10>)
    1ca0:	4798      	blx	r3
    1ca2:	0080      	lsls	r0, r0, #2
    1ca4:	302e      	adds	r0, #46	; 0x2e
}
    1ca6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1caa:	bd08      	pop	{r3, pc}
    1cac:	00001c5d 	.word	0x00001c5d

00001cb0 <_usart_init>:
{
    1cb0:	b538      	push	{r3, r4, r5, lr}
    1cb2:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1cb4:	4b33      	ldr	r3, [pc, #204]	; (1d84 <_usart_init+0xd4>)
    1cb6:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    1cb8:	2803      	cmp	r0, #3
    1cba:	d056      	beq.n	1d6a <_usart_init+0xba>
    1cbc:	2804      	cmp	r0, #4
    1cbe:	d052      	beq.n	1d66 <_usart_init+0xb6>
    1cc0:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1cc2:	bf08      	it	eq
    1cc4:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    1cc6:	d006      	beq.n	1cd6 <_usart_init+0x26>
	ASSERT(false);
    1cc8:	f240 2262 	movw	r2, #610	; 0x262
    1ccc:	492e      	ldr	r1, [pc, #184]	; (1d88 <_usart_init+0xd8>)
    1cce:	2000      	movs	r0, #0
    1cd0:	4b2e      	ldr	r3, [pc, #184]	; (1d8c <_usart_init+0xdc>)
    1cd2:	4798      	blx	r3
	return 0;
    1cd4:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1cd6:	69e3      	ldr	r3, [r4, #28]
    1cd8:	f013 0f01 	tst.w	r3, #1
    1cdc:	d1fb      	bne.n	1cd6 <_usart_init+0x26>
    1cde:	69e3      	ldr	r3, [r4, #28]
    1ce0:	f013 0f03 	tst.w	r3, #3
    1ce4:	d1fb      	bne.n	1cde <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1ce6:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    1ce8:	f013 0f02 	tst.w	r3, #2
    1cec:	d147      	bne.n	1d7e <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1cee:	69e3      	ldr	r3, [r4, #28]
    1cf0:	f013 0f01 	tst.w	r3, #1
    1cf4:	d1fb      	bne.n	1cee <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    1cf6:	6823      	ldr	r3, [r4, #0]
    1cf8:	f043 0301 	orr.w	r3, r3, #1
    1cfc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1cfe:	69e3      	ldr	r3, [r4, #28]
    1d00:	f013 0f01 	tst.w	r3, #1
    1d04:	d1fb      	bne.n	1cfe <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1d06:	4610      	mov	r0, r2
    1d08:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    1d0c:	4920      	ldr	r1, [pc, #128]	; (1d90 <_usart_init+0xe0>)
    1d0e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1d12:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1d14:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1d16:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1d18:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1d1c:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1d1e:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    1d22:	d024      	beq.n	1d6e <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1d24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1d28:	4b19      	ldr	r3, [pc, #100]	; (1d90 <_usart_init+0xe0>)
    1d2a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1d2e:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    1d30:	89a3      	ldrh	r3, [r4, #12]
    1d32:	f361 030c 	bfi	r3, r1, #0, #13
    1d36:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1d38:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    1d3c:	89a3      	ldrh	r3, [r4, #12]
    1d3e:	f362 334f 	bfi	r3, r2, #13, #3
    1d42:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1d44:	4b12      	ldr	r3, [pc, #72]	; (1d90 <_usart_init+0xe0>)
    1d46:	0042      	lsls	r2, r0, #1
    1d48:	1811      	adds	r1, r2, r0
    1d4a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1d4e:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1d52:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1d54:	4402      	add	r2, r0
    1d56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1d5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1d5e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    1d62:	2000      	movs	r0, #0
    1d64:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1d66:	2201      	movs	r2, #1
    1d68:	e7b5      	b.n	1cd6 <_usart_init+0x26>
    1d6a:	2200      	movs	r2, #0
    1d6c:	e7b3      	b.n	1cd6 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1d6e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1d72:	4b07      	ldr	r3, [pc, #28]	; (1d90 <_usart_init+0xe0>)
    1d74:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1d78:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    1d7a:	81a3      	strh	r3, [r4, #12]
    1d7c:	e7e2      	b.n	1d44 <_usart_init+0x94>
		return ERR_DENIED;
    1d7e:	f06f 0010 	mvn.w	r0, #16
}
    1d82:	bd38      	pop	{r3, r4, r5, pc}
    1d84:	00001c5d 	.word	0x00001c5d
    1d88:	000033c0 	.word	0x000033c0
    1d8c:	00001341 	.word	0x00001341
    1d90:	00003334 	.word	0x00003334

00001d94 <_usart_async_init>:
{
    1d94:	b570      	push	{r4, r5, r6, lr}
    1d96:	460d      	mov	r5, r1
	ASSERT(device);
    1d98:	4606      	mov	r6, r0
    1d9a:	22da      	movs	r2, #218	; 0xda
    1d9c:	4912      	ldr	r1, [pc, #72]	; (1de8 <_usart_async_init+0x54>)
    1d9e:	3000      	adds	r0, #0
    1da0:	bf18      	it	ne
    1da2:	2001      	movne	r0, #1
    1da4:	4b11      	ldr	r3, [pc, #68]	; (1dec <_usart_async_init+0x58>)
    1da6:	4798      	blx	r3
	init_status = _usart_init(hw);
    1da8:	4628      	mov	r0, r5
    1daa:	4b11      	ldr	r3, [pc, #68]	; (1df0 <_usart_async_init+0x5c>)
    1dac:	4798      	blx	r3
	if (init_status) {
    1dae:	4604      	mov	r4, r0
    1db0:	b9c0      	cbnz	r0, 1de4 <_usart_async_init+0x50>
	device->hw = hw;
    1db2:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    1db4:	4628      	mov	r0, r5
    1db6:	4b0f      	ldr	r3, [pc, #60]	; (1df4 <_usart_async_init+0x60>)
    1db8:	4798      	blx	r3
		irq = irq +2;
    1dba:	3002      	adds	r0, #2
    1dbc:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1dbe:	f000 031f 	and.w	r3, r0, #31
    1dc2:	2201      	movs	r2, #1
    1dc4:	409a      	lsls	r2, r3
    1dc6:	0943      	lsrs	r3, r0, #5
    1dc8:	009b      	lsls	r3, r3, #2
    1dca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1dce:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1dd6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1dda:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1dde:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1de2:	601a      	str	r2, [r3, #0]
}
    1de4:	4620      	mov	r0, r4
    1de6:	bd70      	pop	{r4, r5, r6, pc}
    1de8:	000033c0 	.word	0x000033c0
    1dec:	00001341 	.word	0x00001341
    1df0:	00001cb1 	.word	0x00001cb1
    1df4:	00001c9d 	.word	0x00001c9d

00001df8 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1df8:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1dfa:	69d3      	ldr	r3, [r2, #28]
    1dfc:	f013 0f03 	tst.w	r3, #3
    1e00:	d1fb      	bne.n	1dfa <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1e02:	6813      	ldr	r3, [r2, #0]
    1e04:	f043 0302 	orr.w	r3, r3, #2
    1e08:	6013      	str	r3, [r2, #0]
    1e0a:	4770      	bx	lr

00001e0c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1e0c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    1e0e:	6299      	str	r1, [r3, #40]	; 0x28
    1e10:	4770      	bx	lr

00001e12 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1e12:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    1e14:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1e16:	b2c0      	uxtb	r0, r0
    1e18:	4770      	bx	lr

00001e1a <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1e1a:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1e1c:	7e18      	ldrb	r0, [r3, #24]
}
    1e1e:	f000 0001 	and.w	r0, r0, #1
    1e22:	4770      	bx	lr

00001e24 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1e24:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1e26:	7e18      	ldrb	r0, [r3, #24]
}
    1e28:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1e2c:	4770      	bx	lr
	...

00001e30 <_usart_async_set_irq_state>:
{
    1e30:	b570      	push	{r4, r5, r6, lr}
    1e32:	460c      	mov	r4, r1
    1e34:	4616      	mov	r6, r2
	ASSERT(device);
    1e36:	4605      	mov	r5, r0
    1e38:	f44f 7211 	mov.w	r2, #580	; 0x244
    1e3c:	4915      	ldr	r1, [pc, #84]	; (1e94 <_usart_async_set_irq_state+0x64>)
    1e3e:	3000      	adds	r0, #0
    1e40:	bf18      	it	ne
    1e42:	2001      	movne	r0, #1
    1e44:	4b14      	ldr	r3, [pc, #80]	; (1e98 <_usart_async_set_irq_state+0x68>)
    1e46:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1e48:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    1e4c:	d10d      	bne.n	1e6a <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1e4e:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1e50:	b92e      	cbnz	r6, 1e5e <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1e52:	2201      	movs	r2, #1
    1e54:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1e56:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1e58:	2202      	movs	r2, #2
    1e5a:	751a      	strb	r2, [r3, #20]
    1e5c:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1e5e:	2201      	movs	r2, #1
    1e60:	759a      	strb	r2, [r3, #22]
    1e62:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1e64:	2202      	movs	r2, #2
    1e66:	759a      	strb	r2, [r3, #22]
    1e68:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    1e6a:	2c01      	cmp	r4, #1
    1e6c:	d002      	beq.n	1e74 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    1e6e:	2c03      	cmp	r4, #3
    1e70:	d008      	beq.n	1e84 <_usart_async_set_irq_state+0x54>
    1e72:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1e74:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1e76:	b916      	cbnz	r6, 1e7e <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1e78:	2204      	movs	r2, #4
    1e7a:	751a      	strb	r2, [r3, #20]
    1e7c:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1e7e:	2204      	movs	r2, #4
    1e80:	759a      	strb	r2, [r3, #22]
    1e82:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1e84:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1e86:	b116      	cbz	r6, 1e8e <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1e88:	2280      	movs	r2, #128	; 0x80
    1e8a:	759a      	strb	r2, [r3, #22]
}
    1e8c:	e7f1      	b.n	1e72 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1e8e:	2280      	movs	r2, #128	; 0x80
    1e90:	751a      	strb	r2, [r3, #20]
    1e92:	bd70      	pop	{r4, r5, r6, pc}
    1e94:	000033c0 	.word	0x000033c0
    1e98:	00001341 	.word	0x00001341

00001e9c <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1e9c:	4b03      	ldr	r3, [pc, #12]	; (1eac <_delay_init+0x10>)
    1e9e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1ea2:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1ea4:	2205      	movs	r2, #5
    1ea6:	601a      	str	r2, [r3, #0]
    1ea8:	4770      	bx	lr
    1eaa:	bf00      	nop
    1eac:	e000e010 	.word	0xe000e010

00001eb0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1eb0:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1eb2:	b303      	cbz	r3, 1ef6 <_delay_cycles+0x46>
{
    1eb4:	b430      	push	{r4, r5}
    1eb6:	1e5d      	subs	r5, r3, #1
    1eb8:	b2ed      	uxtb	r5, r5
	while (n--) {
    1eba:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1ebc:	4a12      	ldr	r2, [pc, #72]	; (1f08 <_delay_cycles+0x58>)
    1ebe:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    1ec2:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1ec4:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1ec6:	6813      	ldr	r3, [r2, #0]
    1ec8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1ecc:	d0fb      	beq.n	1ec6 <_delay_cycles+0x16>
	while (n--) {
    1ece:	3801      	subs	r0, #1
    1ed0:	b2c0      	uxtb	r0, r0
    1ed2:	28ff      	cmp	r0, #255	; 0xff
    1ed4:	d1f5      	bne.n	1ec2 <_delay_cycles+0x12>
    1ed6:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    1eda:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1ede:	3101      	adds	r1, #1
    1ee0:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1ee2:	4b09      	ldr	r3, [pc, #36]	; (1f08 <_delay_cycles+0x58>)
    1ee4:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1ee6:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1ee8:	461a      	mov	r2, r3
    1eea:	6813      	ldr	r3, [r2, #0]
    1eec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1ef0:	d0fb      	beq.n	1eea <_delay_cycles+0x3a>
		;
}
    1ef2:	bc30      	pop	{r4, r5}
    1ef4:	4770      	bx	lr
	SysTick->LOAD = buf;
    1ef6:	4b04      	ldr	r3, [pc, #16]	; (1f08 <_delay_cycles+0x58>)
    1ef8:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1efa:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1efc:	461a      	mov	r2, r3
    1efe:	6813      	ldr	r3, [r2, #0]
    1f00:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1f04:	d0fb      	beq.n	1efe <_delay_cycles+0x4e>
    1f06:	4770      	bx	lr
    1f08:	e000e010 	.word	0xe000e010

00001f0c <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    1f0c:	b470      	push	{r4, r5, r6}
    1f0e:	b087      	sub	sp, #28
    1f10:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    1f12:	ac01      	add	r4, sp, #4
    1f14:	4d14      	ldr	r5, [pc, #80]	; (1f68 <_get_irq_num+0x5c>)
    1f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1f1a:	682b      	ldr	r3, [r5, #0]
    1f1c:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    1f1e:	42b0      	cmp	r0, r6
    1f20:	d017      	beq.n	1f52 <_get_irq_num+0x46>
    1f22:	4631      	mov	r1, r6
    1f24:	2301      	movs	r3, #1
    1f26:	a801      	add	r0, sp, #4
    1f28:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    1f2c:	428a      	cmp	r2, r1
    1f2e:	d006      	beq.n	1f3e <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1f30:	3301      	adds	r3, #1
    1f32:	2b05      	cmp	r3, #5
    1f34:	d1f8      	bne.n	1f28 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    1f36:	2055      	movs	r0, #85	; 0x55
}
    1f38:	b007      	add	sp, #28
    1f3a:	bc70      	pop	{r4, r5, r6}
    1f3c:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    1f3e:	b2db      	uxtb	r3, r3
    1f40:	2b04      	cmp	r3, #4
    1f42:	d80c      	bhi.n	1f5e <_get_irq_num+0x52>
    1f44:	e8df f003 	tbb	[pc, r3]
    1f48:	070d0305 	.word	0x070d0305
    1f4c:	09          	.byte	0x09
    1f4d:	00          	.byte	0x00
		return TCC1_0_IRQn;
    1f4e:	205c      	movs	r0, #92	; 0x5c
    1f50:	e7f2      	b.n	1f38 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    1f52:	2055      	movs	r0, #85	; 0x55
    1f54:	e7f0      	b.n	1f38 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    1f56:	2065      	movs	r0, #101	; 0x65
    1f58:	e7ee      	b.n	1f38 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    1f5a:	2068      	movs	r0, #104	; 0x68
    1f5c:	e7ec      	b.n	1f38 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    1f5e:	2089      	movs	r0, #137	; 0x89
    1f60:	e7ea      	b.n	1f38 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    1f62:	2061      	movs	r0, #97	; 0x61
    1f64:	e7e8      	b.n	1f38 <_get_irq_num+0x2c>
    1f66:	bf00      	nop
    1f68:	000033dc 	.word	0x000033dc

00001f6c <_tcc_timer_deinit>:
{
    1f6c:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1f6e:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    1f70:	4620      	mov	r0, r4
    1f72:	4b10      	ldr	r3, [pc, #64]	; (1fb4 <_tcc_timer_deinit+0x48>)
    1f74:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1f76:	0943      	lsrs	r3, r0, #5
    1f78:	f000 001f 	and.w	r0, r0, #31
    1f7c:	2201      	movs	r2, #1
    1f7e:	fa02 f000 	lsl.w	r0, r2, r0
    1f82:	3320      	adds	r3, #32
    1f84:	4a0c      	ldr	r2, [pc, #48]	; (1fb8 <_tcc_timer_deinit+0x4c>)
    1f86:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1f8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f8e:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1f92:	68a3      	ldr	r3, [r4, #8]
    1f94:	f013 0f03 	tst.w	r3, #3
    1f98:	d1fb      	bne.n	1f92 <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1f9a:	6823      	ldr	r3, [r4, #0]
    1f9c:	f023 0302 	bic.w	r3, r3, #2
    1fa0:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1fa2:	68a3      	ldr	r3, [r4, #8]
    1fa4:	f013 0f01 	tst.w	r3, #1
    1fa8:	d1fb      	bne.n	1fa2 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    1faa:	6823      	ldr	r3, [r4, #0]
    1fac:	f043 0301 	orr.w	r3, r3, #1
    1fb0:	6023      	str	r3, [r4, #0]
    1fb2:	bd10      	pop	{r4, pc}
    1fb4:	00001f0d 	.word	0x00001f0d
    1fb8:	e000e100 	.word	0xe000e100

00001fbc <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    1fbc:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1fbe:	6893      	ldr	r3, [r2, #8]
    1fc0:	f013 0f03 	tst.w	r3, #3
    1fc4:	d1fb      	bne.n	1fbe <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1fc6:	6813      	ldr	r3, [r2, #0]
    1fc8:	f043 0302 	orr.w	r3, r3, #2
    1fcc:	6013      	str	r3, [r2, #0]
    1fce:	4770      	bx	lr

00001fd0 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    1fd0:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1fd2:	6893      	ldr	r3, [r2, #8]
    1fd4:	f013 0f03 	tst.w	r3, #3
    1fd8:	d1fb      	bne.n	1fd2 <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1fda:	6813      	ldr	r3, [r2, #0]
    1fdc:	f023 0302 	bic.w	r3, r3, #2
    1fe0:	6013      	str	r3, [r2, #0]
    1fe2:	4770      	bx	lr

00001fe4 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    1fe4:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    1fe6:	6419      	str	r1, [r3, #64]	; 0x40
    1fe8:	4770      	bx	lr

00001fea <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    1fea:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    1fec:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    1fee:	4770      	bx	lr

00001ff0 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    1ff0:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1ff2:	6893      	ldr	r3, [r2, #8]
    1ff4:	f013 0f03 	tst.w	r3, #3
    1ff8:	d1fb      	bne.n	1ff2 <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1ffa:	6810      	ldr	r0, [r2, #0]
}
    1ffc:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2000:	4770      	bx	lr

00002002 <tcc_interrupt_handler>:
{
    2002:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2004:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    2006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    2008:	f012 0f01 	tst.w	r2, #1
    200c:	d100      	bne.n	2010 <tcc_interrupt_handler+0xe>
    200e:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    2010:	2201      	movs	r2, #1
    2012:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    2014:	6803      	ldr	r3, [r0, #0]
    2016:	4798      	blx	r3
}
    2018:	e7f9      	b.n	200e <tcc_interrupt_handler+0xc>
	...

0000201c <_tcc_timer_init>:
{
    201c:	b5f0      	push	{r4, r5, r6, r7, lr}
    201e:	b087      	sub	sp, #28
    2020:	4605      	mov	r5, r0
    2022:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2024:	ae01      	add	r6, sp, #4
    2026:	4f4e      	ldr	r7, [pc, #312]	; (2160 <_tcc_timer_init+0x144>)
    2028:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    202a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    202c:	683b      	ldr	r3, [r7, #0]
    202e:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    2030:	42a0      	cmp	r0, r4
    2032:	d00c      	beq.n	204e <_tcc_timer_init+0x32>
    2034:	4621      	mov	r1, r4
    2036:	2301      	movs	r3, #1
    2038:	a801      	add	r0, sp, #4
    203a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    203e:	428a      	cmp	r2, r1
    2040:	d006      	beq.n	2050 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2042:	3301      	adds	r3, #1
    2044:	2b05      	cmp	r3, #5
    2046:	d1f8      	bne.n	203a <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2048:	2600      	movs	r6, #0
			return i;
    204a:	b276      	sxtb	r6, r6
    204c:	e015      	b.n	207a <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    204e:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    2050:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    2054:	d073      	beq.n	213e <_tcc_timer_init+0x122>
    2056:	2b01      	cmp	r3, #1
    2058:	d06b      	beq.n	2132 <_tcc_timer_init+0x116>
    205a:	2b02      	cmp	r3, #2
    205c:	d06b      	beq.n	2136 <_tcc_timer_init+0x11a>
    205e:	2b03      	cmp	r3, #3
    2060:	d06b      	beq.n	213a <_tcc_timer_init+0x11e>
    2062:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2064:	bf08      	it	eq
    2066:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    2068:	d0ef      	beq.n	204a <_tcc_timer_init+0x2e>
	ASSERT(false);
    206a:	f240 128b 	movw	r2, #395	; 0x18b
    206e:	493d      	ldr	r1, [pc, #244]	; (2164 <_tcc_timer_init+0x148>)
    2070:	2000      	movs	r0, #0
    2072:	4b3d      	ldr	r3, [pc, #244]	; (2168 <_tcc_timer_init+0x14c>)
    2074:	4798      	blx	r3
	return -1;
    2076:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    207a:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    207c:	22e4      	movs	r2, #228	; 0xe4
    207e:	4939      	ldr	r1, [pc, #228]	; (2164 <_tcc_timer_init+0x148>)
    2080:	2001      	movs	r0, #1
    2082:	4b39      	ldr	r3, [pc, #228]	; (2168 <_tcc_timer_init+0x14c>)
    2084:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2086:	68a3      	ldr	r3, [r4, #8]
    2088:	f013 0f01 	tst.w	r3, #1
    208c:	d1fb      	bne.n	2086 <_tcc_timer_init+0x6a>
    208e:	68a3      	ldr	r3, [r4, #8]
    2090:	f013 0f03 	tst.w	r3, #3
    2094:	d1fb      	bne.n	208e <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2096:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    2098:	f013 0f02 	tst.w	r3, #2
    209c:	d15d      	bne.n	215a <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    209e:	68a3      	ldr	r3, [r4, #8]
    20a0:	f013 0f01 	tst.w	r3, #1
    20a4:	d1fb      	bne.n	209e <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    20a6:	6823      	ldr	r3, [r4, #0]
    20a8:	f043 0301 	orr.w	r3, r3, #1
    20ac:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    20ae:	68a3      	ldr	r3, [r4, #8]
    20b0:	f013 0f01 	tst.w	r3, #1
    20b4:	d1fb      	bne.n	20ae <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    20b6:	4a2a      	ldr	r2, [pc, #168]	; (2160 <_tcc_timer_init+0x144>)
    20b8:	00f1      	lsls	r1, r6, #3
    20ba:	198b      	adds	r3, r1, r6
    20bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    20c0:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    20c2:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    20c4:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    20c6:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    20c8:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    20ca:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    20cc:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    20ce:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    20d0:	440e      	add	r6, r1
    20d2:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    20d6:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    20d8:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    20da:	2301      	movs	r3, #1
    20dc:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    20de:	4b23      	ldr	r3, [pc, #140]	; (216c <_tcc_timer_init+0x150>)
    20e0:	429c      	cmp	r4, r3
    20e2:	d02e      	beq.n	2142 <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    20e4:	4b22      	ldr	r3, [pc, #136]	; (2170 <_tcc_timer_init+0x154>)
    20e6:	429c      	cmp	r4, r3
    20e8:	d02e      	beq.n	2148 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    20ea:	4b22      	ldr	r3, [pc, #136]	; (2174 <_tcc_timer_init+0x158>)
    20ec:	429c      	cmp	r4, r3
    20ee:	d02e      	beq.n	214e <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    20f0:	4b21      	ldr	r3, [pc, #132]	; (2178 <_tcc_timer_init+0x15c>)
    20f2:	429c      	cmp	r4, r3
    20f4:	d02e      	beq.n	2154 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    20f6:	4b21      	ldr	r3, [pc, #132]	; (217c <_tcc_timer_init+0x160>)
    20f8:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    20fa:	bf04      	itt	eq
    20fc:	4b20      	ldreq	r3, [pc, #128]	; (2180 <_tcc_timer_init+0x164>)
    20fe:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2100:	4620      	mov	r0, r4
    2102:	4b20      	ldr	r3, [pc, #128]	; (2184 <_tcc_timer_init+0x168>)
    2104:	4798      	blx	r3
    2106:	f000 031f 	and.w	r3, r0, #31
    210a:	2201      	movs	r2, #1
    210c:	409a      	lsls	r2, r3
    210e:	0943      	lsrs	r3, r0, #5
    2110:	009b      	lsls	r3, r3, #2
    2112:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2116:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    211a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    211e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2122:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2126:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    212a:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    212c:	2000      	movs	r0, #0
}
    212e:	b007      	add	sp, #28
    2130:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2132:	2601      	movs	r6, #1
    2134:	e789      	b.n	204a <_tcc_timer_init+0x2e>
    2136:	2602      	movs	r6, #2
    2138:	e787      	b.n	204a <_tcc_timer_init+0x2e>
    213a:	2603      	movs	r6, #3
    213c:	e785      	b.n	204a <_tcc_timer_init+0x2e>
    213e:	2600      	movs	r6, #0
    2140:	e783      	b.n	204a <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    2142:	4b0f      	ldr	r3, [pc, #60]	; (2180 <_tcc_timer_init+0x164>)
    2144:	601d      	str	r5, [r3, #0]
    2146:	e7d3      	b.n	20f0 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    2148:	4b0d      	ldr	r3, [pc, #52]	; (2180 <_tcc_timer_init+0x164>)
    214a:	605d      	str	r5, [r3, #4]
    214c:	e7d3      	b.n	20f6 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    214e:	4b0c      	ldr	r3, [pc, #48]	; (2180 <_tcc_timer_init+0x164>)
    2150:	609d      	str	r5, [r3, #8]
    2152:	e7d5      	b.n	2100 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    2154:	4b0a      	ldr	r3, [pc, #40]	; (2180 <_tcc_timer_init+0x164>)
    2156:	60dd      	str	r5, [r3, #12]
    2158:	e7d2      	b.n	2100 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    215a:	f06f 0010 	mvn.w	r0, #16
    215e:	e7e6      	b.n	212e <_tcc_timer_init+0x112>
    2160:	000033dc 	.word	0x000033dc
    2164:	000034a4 	.word	0x000034a4
    2168:	00001341 	.word	0x00001341
    216c:	41016000 	.word	0x41016000
    2170:	41018000 	.word	0x41018000
    2174:	42000c00 	.word	0x42000c00
    2178:	42001000 	.word	0x42001000
    217c:	43001000 	.word	0x43001000
    2180:	200006e4 	.word	0x200006e4
    2184:	00001f0d 	.word	0x00001f0d

00002188 <_tcc_timer_set_irq>:
{
    2188:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    218a:	68c0      	ldr	r0, [r0, #12]
    218c:	4b02      	ldr	r3, [pc, #8]	; (2198 <_tcc_timer_set_irq+0x10>)
    218e:	4798      	blx	r3
    2190:	4b02      	ldr	r3, [pc, #8]	; (219c <_tcc_timer_set_irq+0x14>)
    2192:	4798      	blx	r3
    2194:	bd08      	pop	{r3, pc}
    2196:	bf00      	nop
    2198:	00001f0d 	.word	0x00001f0d
    219c:	00001641 	.word	0x00001641

000021a0 <_tcc_get_timer>:
}
    21a0:	4800      	ldr	r0, [pc, #0]	; (21a4 <_tcc_get_timer+0x4>)
    21a2:	4770      	bx	lr
    21a4:	2000003c 	.word	0x2000003c

000021a8 <TCC0_0_Handler>:
{
    21a8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    21aa:	4b02      	ldr	r3, [pc, #8]	; (21b4 <TCC0_0_Handler+0xc>)
    21ac:	6818      	ldr	r0, [r3, #0]
    21ae:	4b02      	ldr	r3, [pc, #8]	; (21b8 <TCC0_0_Handler+0x10>)
    21b0:	4798      	blx	r3
    21b2:	bd08      	pop	{r3, pc}
    21b4:	200006e4 	.word	0x200006e4
    21b8:	00002003 	.word	0x00002003

000021bc <TCC1_0_Handler>:
{
    21bc:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    21be:	4b02      	ldr	r3, [pc, #8]	; (21c8 <TCC1_0_Handler+0xc>)
    21c0:	6858      	ldr	r0, [r3, #4]
    21c2:	4b02      	ldr	r3, [pc, #8]	; (21cc <TCC1_0_Handler+0x10>)
    21c4:	4798      	blx	r3
    21c6:	bd08      	pop	{r3, pc}
    21c8:	200006e4 	.word	0x200006e4
    21cc:	00002003 	.word	0x00002003

000021d0 <TCC2_0_Handler>:
{
    21d0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    21d2:	4b02      	ldr	r3, [pc, #8]	; (21dc <TCC2_0_Handler+0xc>)
    21d4:	6898      	ldr	r0, [r3, #8]
    21d6:	4b02      	ldr	r3, [pc, #8]	; (21e0 <TCC2_0_Handler+0x10>)
    21d8:	4798      	blx	r3
    21da:	bd08      	pop	{r3, pc}
    21dc:	200006e4 	.word	0x200006e4
    21e0:	00002003 	.word	0x00002003

000021e4 <TCC3_0_Handler>:
{
    21e4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    21e6:	4b02      	ldr	r3, [pc, #8]	; (21f0 <TCC3_0_Handler+0xc>)
    21e8:	68d8      	ldr	r0, [r3, #12]
    21ea:	4b02      	ldr	r3, [pc, #8]	; (21f4 <TCC3_0_Handler+0x10>)
    21ec:	4798      	blx	r3
    21ee:	bd08      	pop	{r3, pc}
    21f0:	200006e4 	.word	0x200006e4
    21f4:	00002003 	.word	0x00002003

000021f8 <TCC4_0_Handler>:
{
    21f8:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    21fa:	4b02      	ldr	r3, [pc, #8]	; (2204 <TCC4_0_Handler+0xc>)
    21fc:	6918      	ldr	r0, [r3, #16]
    21fe:	4b02      	ldr	r3, [pc, #8]	; (2208 <TCC4_0_Handler+0x10>)
    2200:	4798      	blx	r3
    2202:	bd08      	pop	{r3, pc}
    2204:	200006e4 	.word	0x200006e4
    2208:	00002003 	.word	0x00002003

0000220c <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    220c:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    220e:	6913      	ldr	r3, [r2, #16]
    2210:	f013 0f03 	tst.w	r3, #3
    2214:	d1fb      	bne.n	220e <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    2216:	6813      	ldr	r3, [r2, #0]
    2218:	f043 0302 	orr.w	r3, r3, #2
    221c:	6013      	str	r3, [r2, #0]
    221e:	4770      	bx	lr

00002220 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2220:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2222:	6913      	ldr	r3, [r2, #16]
    2224:	f013 0f03 	tst.w	r3, #3
    2228:	d1fb      	bne.n	2222 <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    222a:	6813      	ldr	r3, [r2, #0]
    222c:	f023 0302 	bic.w	r3, r3, #2
    2230:	6013      	str	r3, [r2, #0]
    2232:	4770      	bx	lr

00002234 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    2234:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2236:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2238:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    223c:	2b02      	cmp	r3, #2
    223e:	d00b      	beq.n	2258 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2240:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2242:	f013 0f0c 	tst.w	r3, #12
    2246:	d009      	beq.n	225c <_tc_timer_set_period+0x28>
    2248:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    224a:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    224e:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    2250:	bf04      	itt	eq
    2252:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2254:	76d1      	strbeq	r1, [r2, #27]
    2256:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2258:	61d1      	str	r1, [r2, #28]
    225a:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    225c:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    225e:	8391      	strh	r1, [r2, #28]
    2260:	4770      	bx	lr

00002262 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    2262:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2264:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2266:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    226a:	2b02      	cmp	r3, #2
    226c:	d00c      	beq.n	2288 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    226e:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2270:	f013 0f0c 	tst.w	r3, #12
    2274:	d00a      	beq.n	228c <_tc_timer_get_period+0x2a>
    2276:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2278:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    227c:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    227e:	bf06      	itte	eq
    2280:	7ed0      	ldrbeq	r0, [r2, #27]
    2282:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    2284:	2000      	movne	r0, #0
}
    2286:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    2288:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    228a:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    228c:	8b90      	ldrh	r0, [r2, #28]
    228e:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2290:	4770      	bx	lr

00002292 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2292:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2294:	6913      	ldr	r3, [r2, #16]
    2296:	f013 0f03 	tst.w	r3, #3
    229a:	d1fb      	bne.n	2294 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    229c:	6810      	ldr	r0, [r2, #0]
}
    229e:	f3c0 0040 	ubfx	r0, r0, #1, #1
    22a2:	4770      	bx	lr

000022a4 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    22a4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    22a6:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    22a8:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    22aa:	f012 0f01 	tst.w	r2, #1
    22ae:	d100      	bne.n	22b2 <tc_interrupt_handler+0xe>
    22b0:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    22b2:	2201      	movs	r2, #1
    22b4:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    22b6:	6803      	ldr	r3, [r0, #0]
    22b8:	4798      	blx	r3
	}
}
    22ba:	e7f9      	b.n	22b0 <tc_interrupt_handler+0xc>

000022bc <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    22bc:	b538      	push	{r3, r4, r5, lr}
    22be:	4605      	mov	r5, r0
	void *const hw = device->hw;
    22c0:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    22c2:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    22c4:	f013 0f01 	tst.w	r3, #1
    22c8:	d004      	beq.n	22d4 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    22ca:	2301      	movs	r3, #1
    22cc:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    22ce:	6803      	ldr	r3, [r0, #0]
    22d0:	b103      	cbz	r3, 22d4 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    22d2:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    22d4:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    22d6:	f013 0f02 	tst.w	r3, #2
    22da:	d005      	beq.n	22e8 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    22dc:	2302      	movs	r3, #2
    22de:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    22e0:	686b      	ldr	r3, [r5, #4]
    22e2:	b10b      	cbz	r3, 22e8 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    22e4:	4628      	mov	r0, r5
    22e6:	4798      	blx	r3
    22e8:	bd38      	pop	{r3, r4, r5, pc}
	...

000022ec <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    22ec:	4b11      	ldr	r3, [pc, #68]	; (2334 <_tc_init_irq_param+0x48>)
    22ee:	4298      	cmp	r0, r3
    22f0:	d011      	beq.n	2316 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    22f2:	4b11      	ldr	r3, [pc, #68]	; (2338 <_tc_init_irq_param+0x4c>)
    22f4:	4298      	cmp	r0, r3
    22f6:	d011      	beq.n	231c <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    22f8:	4b10      	ldr	r3, [pc, #64]	; (233c <_tc_init_irq_param+0x50>)
    22fa:	4298      	cmp	r0, r3
    22fc:	d011      	beq.n	2322 <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    22fe:	4b10      	ldr	r3, [pc, #64]	; (2340 <_tc_init_irq_param+0x54>)
    2300:	4298      	cmp	r0, r3
    2302:	d011      	beq.n	2328 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2304:	4b0f      	ldr	r3, [pc, #60]	; (2344 <_tc_init_irq_param+0x58>)
    2306:	4298      	cmp	r0, r3
    2308:	d011      	beq.n	232e <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    230a:	4b0f      	ldr	r3, [pc, #60]	; (2348 <_tc_init_irq_param+0x5c>)
    230c:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    230e:	bf04      	itt	eq
    2310:	4b0e      	ldreq	r3, [pc, #56]	; (234c <_tc_init_irq_param+0x60>)
    2312:	6159      	streq	r1, [r3, #20]
    2314:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2316:	4b0d      	ldr	r3, [pc, #52]	; (234c <_tc_init_irq_param+0x60>)
    2318:	6019      	str	r1, [r3, #0]
    231a:	e7f0      	b.n	22fe <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    231c:	4b0b      	ldr	r3, [pc, #44]	; (234c <_tc_init_irq_param+0x60>)
    231e:	6059      	str	r1, [r3, #4]
    2320:	e7f0      	b.n	2304 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    2322:	4b0a      	ldr	r3, [pc, #40]	; (234c <_tc_init_irq_param+0x60>)
    2324:	6099      	str	r1, [r3, #8]
    2326:	e7f0      	b.n	230a <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    2328:	4b08      	ldr	r3, [pc, #32]	; (234c <_tc_init_irq_param+0x60>)
    232a:	60d9      	str	r1, [r3, #12]
    232c:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    232e:	4b07      	ldr	r3, [pc, #28]	; (234c <_tc_init_irq_param+0x60>)
    2330:	6119      	str	r1, [r3, #16]
    2332:	4770      	bx	lr
    2334:	40003800 	.word	0x40003800
    2338:	40003c00 	.word	0x40003c00
    233c:	4101a000 	.word	0x4101a000
    2340:	4101c000 	.word	0x4101c000
    2344:	42001400 	.word	0x42001400
    2348:	42001800 	.word	0x42001800
    234c:	200006f8 	.word	0x200006f8

00002350 <get_tc_index>:
{
    2350:	b570      	push	{r4, r5, r6, lr}
    2352:	b086      	sub	sp, #24
    2354:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2356:	466c      	mov	r4, sp
    2358:	4d18      	ldr	r5, [pc, #96]	; (23bc <get_tc_index+0x6c>)
    235a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    235c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    235e:	e895 0003 	ldmia.w	r5, {r0, r1}
    2362:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2366:	9b00      	ldr	r3, [sp, #0]
    2368:	42b3      	cmp	r3, r6
    236a:	d021      	beq.n	23b0 <get_tc_index+0x60>
    236c:	4631      	mov	r1, r6
    236e:	2301      	movs	r3, #1
    2370:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2374:	428a      	cmp	r2, r1
    2376:	d01c      	beq.n	23b2 <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2378:	3301      	adds	r3, #1
    237a:	2b06      	cmp	r3, #6
    237c:	d1f8      	bne.n	2370 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    237e:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2380:	4a0f      	ldr	r2, [pc, #60]	; (23c0 <get_tc_index+0x70>)
    2382:	7812      	ldrb	r2, [r2, #0]
    2384:	429a      	cmp	r2, r3
    2386:	d016      	beq.n	23b6 <get_tc_index+0x66>
    2388:	4a0d      	ldr	r2, [pc, #52]	; (23c0 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    238a:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    238c:	7d11      	ldrb	r1, [r2, #20]
    238e:	4299      	cmp	r1, r3
    2390:	d012      	beq.n	23b8 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2392:	3001      	adds	r0, #1
    2394:	b2c0      	uxtb	r0, r0
    2396:	3214      	adds	r2, #20
    2398:	2806      	cmp	r0, #6
    239a:	d1f7      	bne.n	238c <get_tc_index+0x3c>
	ASSERT(false);
    239c:	f240 2227 	movw	r2, #551	; 0x227
    23a0:	4908      	ldr	r1, [pc, #32]	; (23c4 <get_tc_index+0x74>)
    23a2:	2000      	movs	r0, #0
    23a4:	4b08      	ldr	r3, [pc, #32]	; (23c8 <get_tc_index+0x78>)
    23a6:	4798      	blx	r3
	return -1;
    23a8:	f04f 30ff 	mov.w	r0, #4294967295
}
    23ac:	b006      	add	sp, #24
    23ae:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    23b0:	2300      	movs	r3, #0
			return i;
    23b2:	b2db      	uxtb	r3, r3
    23b4:	e7e4      	b.n	2380 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    23b6:	2000      	movs	r0, #0
			return i;
    23b8:	b240      	sxtb	r0, r0
    23ba:	e7f7      	b.n	23ac <get_tc_index+0x5c>
    23bc:	000034bc 	.word	0x000034bc
    23c0:	2000005c 	.word	0x2000005c
    23c4:	000034d4 	.word	0x000034d4
    23c8:	00001341 	.word	0x00001341

000023cc <_tc_timer_init>:
{
    23cc:	b570      	push	{r4, r5, r6, lr}
    23ce:	4606      	mov	r6, r0
    23d0:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    23d2:	4608      	mov	r0, r1
    23d4:	4b48      	ldr	r3, [pc, #288]	; (24f8 <_tc_timer_init+0x12c>)
    23d6:	4798      	blx	r3
    23d8:	4605      	mov	r5, r0
	device->hw = hw;
    23da:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    23dc:	22af      	movs	r2, #175	; 0xaf
    23de:	4947      	ldr	r1, [pc, #284]	; (24fc <_tc_timer_init+0x130>)
    23e0:	2001      	movs	r0, #1
    23e2:	4b47      	ldr	r3, [pc, #284]	; (2500 <_tc_timer_init+0x134>)
    23e4:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    23e6:	6923      	ldr	r3, [r4, #16]
    23e8:	f013 0f01 	tst.w	r3, #1
    23ec:	d1fb      	bne.n	23e6 <_tc_timer_init+0x1a>
    23ee:	6923      	ldr	r3, [r4, #16]
    23f0:	f013 0f03 	tst.w	r3, #3
    23f4:	d1fb      	bne.n	23ee <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    23f6:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    23f8:	f013 0f02 	tst.w	r3, #2
    23fc:	d175      	bne.n	24ea <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    23fe:	6923      	ldr	r3, [r4, #16]
    2400:	f013 0f01 	tst.w	r3, #1
    2404:	d1fb      	bne.n	23fe <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2406:	6823      	ldr	r3, [r4, #0]
    2408:	f043 0301 	orr.w	r3, r3, #1
    240c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    240e:	6923      	ldr	r3, [r4, #16]
    2410:	f013 0f01 	tst.w	r3, #1
    2414:	d1fb      	bne.n	240e <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2416:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    241a:	4a3a      	ldr	r2, [pc, #232]	; (2504 <_tc_timer_init+0x138>)
    241c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2420:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2422:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2424:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2426:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2428:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    242a:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    242c:	2201      	movs	r2, #1
    242e:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2430:	685b      	ldr	r3, [r3, #4]
    2432:	f003 030c 	and.w	r3, r3, #12
    2436:	2b08      	cmp	r3, #8
    2438:	d03f      	beq.n	24ba <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    243a:	2b00      	cmp	r3, #0
    243c:	d147      	bne.n	24ce <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    243e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2442:	4a30      	ldr	r2, [pc, #192]	; (2504 <_tc_timer_init+0x138>)
    2444:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2448:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    244a:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    244c:	8a1b      	ldrh	r3, [r3, #16]
    244e:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    2450:	2301      	movs	r3, #1
    2452:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2454:	4631      	mov	r1, r6
    2456:	4620      	mov	r0, r4
    2458:	4b2b      	ldr	r3, [pc, #172]	; (2508 <_tc_timer_init+0x13c>)
    245a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    245c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2460:	4a28      	ldr	r2, [pc, #160]	; (2504 <_tc_timer_init+0x138>)
    2462:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2466:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    246a:	2b00      	cmp	r3, #0
    246c:	db40      	blt.n	24f0 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    246e:	095a      	lsrs	r2, r3, #5
    2470:	f003 031f 	and.w	r3, r3, #31
    2474:	2101      	movs	r1, #1
    2476:	fa01 f303 	lsl.w	r3, r1, r3
    247a:	3220      	adds	r2, #32
    247c:	4923      	ldr	r1, [pc, #140]	; (250c <_tc_timer_init+0x140>)
    247e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2482:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2486:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    248a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    248e:	4b1d      	ldr	r3, [pc, #116]	; (2504 <_tc_timer_init+0x138>)
    2490:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2494:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2498:	2b00      	cmp	r3, #0
    249a:	db2b      	blt.n	24f4 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    249c:	0959      	lsrs	r1, r3, #5
    249e:	f003 031f 	and.w	r3, r3, #31
    24a2:	2201      	movs	r2, #1
    24a4:	fa02 f303 	lsl.w	r3, r2, r3
    24a8:	4a18      	ldr	r2, [pc, #96]	; (250c <_tc_timer_init+0x140>)
    24aa:	f101 0060 	add.w	r0, r1, #96	; 0x60
    24ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    24b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    24b6:	2000      	movs	r0, #0
    24b8:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    24ba:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    24be:	4a11      	ldr	r2, [pc, #68]	; (2504 <_tc_timer_init+0x138>)
    24c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24c4:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    24c6:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    24c8:	691b      	ldr	r3, [r3, #16]
    24ca:	6223      	str	r3, [r4, #32]
    24cc:	e7c0      	b.n	2450 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    24ce:	2b04      	cmp	r3, #4
    24d0:	d1be      	bne.n	2450 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    24d2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    24d6:	4a0b      	ldr	r2, [pc, #44]	; (2504 <_tc_timer_init+0x138>)
    24d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24dc:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    24de:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    24e0:	7c1a      	ldrb	r2, [r3, #16]
    24e2:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    24e4:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    24e6:	76e3      	strb	r3, [r4, #27]
    24e8:	e7b2      	b.n	2450 <_tc_timer_init+0x84>
		return ERR_DENIED;
    24ea:	f06f 0010 	mvn.w	r0, #16
    24ee:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    24f0:	2000      	movs	r0, #0
    24f2:	bd70      	pop	{r4, r5, r6, pc}
    24f4:	2000      	movs	r0, #0
}
    24f6:	bd70      	pop	{r4, r5, r6, pc}
    24f8:	00002351 	.word	0x00002351
    24fc:	000034d4 	.word	0x000034d4
    2500:	00001341 	.word	0x00001341
    2504:	2000005c 	.word	0x2000005c
    2508:	000022ed 	.word	0x000022ed
    250c:	e000e100 	.word	0xe000e100

00002510 <_tc_timer_deinit>:
{
    2510:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    2512:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2514:	4620      	mov	r0, r4
    2516:	4b18      	ldr	r3, [pc, #96]	; (2578 <_tc_timer_deinit+0x68>)
    2518:	4798      	blx	r3
    251a:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    251c:	f240 1201 	movw	r2, #257	; 0x101
    2520:	4916      	ldr	r1, [pc, #88]	; (257c <_tc_timer_deinit+0x6c>)
    2522:	2001      	movs	r0, #1
    2524:	4b16      	ldr	r3, [pc, #88]	; (2580 <_tc_timer_deinit+0x70>)
    2526:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2528:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    252c:	4b15      	ldr	r3, [pc, #84]	; (2584 <_tc_timer_deinit+0x74>)
    252e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2532:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2536:	2b00      	cmp	r3, #0
    2538:	db0d      	blt.n	2556 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    253a:	095a      	lsrs	r2, r3, #5
    253c:	f003 031f 	and.w	r3, r3, #31
    2540:	2101      	movs	r1, #1
    2542:	fa01 f303 	lsl.w	r3, r1, r3
    2546:	3220      	adds	r2, #32
    2548:	490f      	ldr	r1, [pc, #60]	; (2588 <_tc_timer_deinit+0x78>)
    254a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    254e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2552:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2556:	6923      	ldr	r3, [r4, #16]
    2558:	f013 0f03 	tst.w	r3, #3
    255c:	d1fb      	bne.n	2556 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    255e:	6823      	ldr	r3, [r4, #0]
    2560:	f023 0302 	bic.w	r3, r3, #2
    2564:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2566:	6923      	ldr	r3, [r4, #16]
    2568:	f013 0f01 	tst.w	r3, #1
    256c:	d1fb      	bne.n	2566 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    256e:	6823      	ldr	r3, [r4, #0]
    2570:	f043 0301 	orr.w	r3, r3, #1
    2574:	6023      	str	r3, [r4, #0]
    2576:	bd38      	pop	{r3, r4, r5, pc}
    2578:	00002351 	.word	0x00002351
    257c:	000034d4 	.word	0x000034d4
    2580:	00001341 	.word	0x00001341
    2584:	2000005c 	.word	0x2000005c
    2588:	e000e100 	.word	0xe000e100

0000258c <_tc_timer_set_irq>:
{
    258c:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    258e:	68c0      	ldr	r0, [r0, #12]
    2590:	4b08      	ldr	r3, [pc, #32]	; (25b4 <_tc_timer_set_irq+0x28>)
    2592:	4798      	blx	r3
    2594:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2596:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    259a:	4907      	ldr	r1, [pc, #28]	; (25b8 <_tc_timer_set_irq+0x2c>)
    259c:	2001      	movs	r0, #1
    259e:	4b07      	ldr	r3, [pc, #28]	; (25bc <_tc_timer_set_irq+0x30>)
    25a0:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    25a2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    25a6:	4b06      	ldr	r3, [pc, #24]	; (25c0 <_tc_timer_set_irq+0x34>)
    25a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    25ac:	78a0      	ldrb	r0, [r4, #2]
    25ae:	4b05      	ldr	r3, [pc, #20]	; (25c4 <_tc_timer_set_irq+0x38>)
    25b0:	4798      	blx	r3
    25b2:	bd10      	pop	{r4, pc}
    25b4:	00002351 	.word	0x00002351
    25b8:	000034d4 	.word	0x000034d4
    25bc:	00001341 	.word	0x00001341
    25c0:	2000005c 	.word	0x2000005c
    25c4:	00001641 	.word	0x00001641

000025c8 <_pwm_init>:
{
    25c8:	b570      	push	{r4, r5, r6, lr}
    25ca:	4606      	mov	r6, r0
    25cc:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    25ce:	4608      	mov	r0, r1
    25d0:	4b3f      	ldr	r3, [pc, #252]	; (26d0 <_pwm_init+0x108>)
    25d2:	4798      	blx	r3
    25d4:	4605      	mov	r5, r0
	device->hw = hw;
    25d6:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    25d8:	6923      	ldr	r3, [r4, #16]
    25da:	f013 0f01 	tst.w	r3, #1
    25de:	d1fb      	bne.n	25d8 <_pwm_init+0x10>
    25e0:	6923      	ldr	r3, [r4, #16]
    25e2:	f013 0f03 	tst.w	r3, #3
    25e6:	d1fb      	bne.n	25e0 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    25e8:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    25ea:	f013 0f02 	tst.w	r3, #2
    25ee:	d165      	bne.n	26bc <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    25f0:	6923      	ldr	r3, [r4, #16]
    25f2:	f013 0f01 	tst.w	r3, #1
    25f6:	d1fb      	bne.n	25f0 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    25f8:	6823      	ldr	r3, [r4, #0]
    25fa:	f043 0301 	orr.w	r3, r3, #1
    25fe:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2600:	6923      	ldr	r3, [r4, #16]
    2602:	f013 0f01 	tst.w	r3, #1
    2606:	d1fb      	bne.n	2600 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2608:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    260c:	4a31      	ldr	r2, [pc, #196]	; (26d4 <_pwm_init+0x10c>)
    260e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2612:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2614:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2616:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2618:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    261a:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    261c:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    261e:	2203      	movs	r2, #3
    2620:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2622:	685b      	ldr	r3, [r3, #4]
    2624:	f003 030c 	and.w	r3, r3, #12
    2628:	2b08      	cmp	r3, #8
    262a:	d03d      	beq.n	26a8 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    262c:	2b00      	cmp	r3, #0
    262e:	d148      	bne.n	26c2 <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2630:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2634:	4a27      	ldr	r2, [pc, #156]	; (26d4 <_pwm_init+0x10c>)
    2636:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    263a:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    263c:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    263e:	8a1b      	ldrh	r3, [r3, #16]
    2640:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    2642:	4631      	mov	r1, r6
    2644:	4620      	mov	r0, r4
    2646:	4b24      	ldr	r3, [pc, #144]	; (26d8 <_pwm_init+0x110>)
    2648:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    264a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    264e:	4a21      	ldr	r2, [pc, #132]	; (26d4 <_pwm_init+0x10c>)
    2650:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2658:	2b00      	cmp	r3, #0
    265a:	db35      	blt.n	26c8 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    265c:	095a      	lsrs	r2, r3, #5
    265e:	f003 031f 	and.w	r3, r3, #31
    2662:	2101      	movs	r1, #1
    2664:	fa01 f303 	lsl.w	r3, r1, r3
    2668:	3220      	adds	r2, #32
    266a:	491c      	ldr	r1, [pc, #112]	; (26dc <_pwm_init+0x114>)
    266c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2670:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2674:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2678:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    267c:	4b15      	ldr	r3, [pc, #84]	; (26d4 <_pwm_init+0x10c>)
    267e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2682:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2686:	2b00      	cmp	r3, #0
    2688:	db20      	blt.n	26cc <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    268a:	0959      	lsrs	r1, r3, #5
    268c:	f003 031f 	and.w	r3, r3, #31
    2690:	2201      	movs	r2, #1
    2692:	fa02 f303 	lsl.w	r3, r2, r3
    2696:	4a11      	ldr	r2, [pc, #68]	; (26dc <_pwm_init+0x114>)
    2698:	f101 0060 	add.w	r0, r1, #96	; 0x60
    269c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    26a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    26a4:	2000      	movs	r0, #0
    26a6:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    26a8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    26ac:	4a09      	ldr	r2, [pc, #36]	; (26d4 <_pwm_init+0x10c>)
    26ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    26b2:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    26b4:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    26b6:	691b      	ldr	r3, [r3, #16]
    26b8:	6223      	str	r3, [r4, #32]
    26ba:	e7c2      	b.n	2642 <_pwm_init+0x7a>
		return ERR_DENIED;
    26bc:	f06f 0010 	mvn.w	r0, #16
    26c0:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    26c2:	f04f 30ff 	mov.w	r0, #4294967295
    26c6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    26c8:	2000      	movs	r0, #0
    26ca:	bd70      	pop	{r4, r5, r6, pc}
    26cc:	2000      	movs	r0, #0
}
    26ce:	bd70      	pop	{r4, r5, r6, pc}
    26d0:	00002351 	.word	0x00002351
    26d4:	2000005c 	.word	0x2000005c
    26d8:	000022ed 	.word	0x000022ed
    26dc:	e000e100 	.word	0xe000e100

000026e0 <_tc_get_timer>:
}
    26e0:	4800      	ldr	r0, [pc, #0]	; (26e4 <_tc_get_timer+0x4>)
    26e2:	4770      	bx	lr
    26e4:	200000d4 	.word	0x200000d4

000026e8 <_tc_get_pwm>:
}
    26e8:	2000      	movs	r0, #0
    26ea:	4770      	bx	lr

000026ec <TC0_Handler>:
{
    26ec:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    26ee:	4b02      	ldr	r3, [pc, #8]	; (26f8 <TC0_Handler+0xc>)
    26f0:	6818      	ldr	r0, [r3, #0]
    26f2:	4b02      	ldr	r3, [pc, #8]	; (26fc <TC0_Handler+0x10>)
    26f4:	4798      	blx	r3
    26f6:	bd08      	pop	{r3, pc}
    26f8:	200006f8 	.word	0x200006f8
    26fc:	000022bd 	.word	0x000022bd

00002700 <TC1_Handler>:
{
    2700:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    2702:	4b02      	ldr	r3, [pc, #8]	; (270c <TC1_Handler+0xc>)
    2704:	6858      	ldr	r0, [r3, #4]
    2706:	4b02      	ldr	r3, [pc, #8]	; (2710 <TC1_Handler+0x10>)
    2708:	4798      	blx	r3
    270a:	bd08      	pop	{r3, pc}
    270c:	200006f8 	.word	0x200006f8
    2710:	000022bd 	.word	0x000022bd

00002714 <TC2_Handler>:
{
    2714:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    2716:	4b02      	ldr	r3, [pc, #8]	; (2720 <TC2_Handler+0xc>)
    2718:	6898      	ldr	r0, [r3, #8]
    271a:	4b02      	ldr	r3, [pc, #8]	; (2724 <TC2_Handler+0x10>)
    271c:	4798      	blx	r3
    271e:	bd08      	pop	{r3, pc}
    2720:	200006f8 	.word	0x200006f8
    2724:	000022bd 	.word	0x000022bd

00002728 <TC3_Handler>:
{
    2728:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    272a:	4b02      	ldr	r3, [pc, #8]	; (2734 <TC3_Handler+0xc>)
    272c:	68d8      	ldr	r0, [r3, #12]
    272e:	4b02      	ldr	r3, [pc, #8]	; (2738 <TC3_Handler+0x10>)
    2730:	4798      	blx	r3
    2732:	bd08      	pop	{r3, pc}
    2734:	200006f8 	.word	0x200006f8
    2738:	000022a5 	.word	0x000022a5

0000273c <TC4_Handler>:
{
    273c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    273e:	4b02      	ldr	r3, [pc, #8]	; (2748 <TC4_Handler+0xc>)
    2740:	6918      	ldr	r0, [r3, #16]
    2742:	4b02      	ldr	r3, [pc, #8]	; (274c <TC4_Handler+0x10>)
    2744:	4798      	blx	r3
    2746:	bd08      	pop	{r3, pc}
    2748:	200006f8 	.word	0x200006f8
    274c:	000022a5 	.word	0x000022a5

00002750 <TC5_Handler>:
{
    2750:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    2752:	4b02      	ldr	r3, [pc, #8]	; (275c <TC5_Handler+0xc>)
    2754:	6958      	ldr	r0, [r3, #20]
    2756:	4b02      	ldr	r3, [pc, #8]	; (2760 <TC5_Handler+0x10>)
    2758:	4798      	blx	r3
    275a:	bd08      	pop	{r3, pc}
    275c:	200006f8 	.word	0x200006f8
    2760:	000022a5 	.word	0x000022a5

00002764 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2764:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    2766:	4604      	mov	r4, r0
    2768:	b330      	cbz	r0, 27b8 <_wdt_init+0x54>
    276a:	6800      	ldr	r0, [r0, #0]
    276c:	3000      	adds	r0, #0
    276e:	bf18      	it	ne
    2770:	2001      	movne	r0, #1
    2772:	225a      	movs	r2, #90	; 0x5a
    2774:	4914      	ldr	r1, [pc, #80]	; (27c8 <_wdt_init+0x64>)
    2776:	4b15      	ldr	r3, [pc, #84]	; (27cc <_wdt_init+0x68>)
    2778:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    277a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    277c:	689a      	ldr	r2, [r3, #8]
    277e:	f012 0f0e 	tst.w	r2, #14
    2782:	d1fb      	bne.n	277c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2784:	781a      	ldrb	r2, [r3, #0]
    2786:	09d2      	lsrs	r2, r2, #7
    2788:	d118      	bne.n	27bc <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    278a:	689a      	ldr	r2, [r3, #8]
    278c:	f012 0f0e 	tst.w	r2, #14
    2790:	d1fb      	bne.n	278a <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    2792:	781a      	ldrb	r2, [r3, #0]
    2794:	f012 0f02 	tst.w	r2, #2
    2798:	d113      	bne.n	27c2 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    279a:	689a      	ldr	r2, [r3, #8]
    279c:	f012 0f0e 	tst.w	r2, #14
    27a0:	d1fb      	bne.n	279a <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    27a2:	781a      	ldrb	r2, [r3, #0]
    27a4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    27a8:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    27aa:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    27ac:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    27ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    27b2:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    27b4:	2000      	movs	r0, #0
    27b6:	bd10      	pop	{r4, pc}
    27b8:	2000      	movs	r0, #0
    27ba:	e7da      	b.n	2772 <_wdt_init+0xe>
		return ERR_DENIED;
    27bc:	f06f 0010 	mvn.w	r0, #16
    27c0:	bd10      	pop	{r4, pc}
    27c2:	f06f 0010 	mvn.w	r0, #16
}
    27c6:	bd10      	pop	{r4, pc}
    27c8:	000034e8 	.word	0x000034e8
    27cc:	00001341 	.word	0x00001341

000027d0 <main>:

/* Mile Stone 1 */
/* Started working in Dev Branch */

int main(void)
{
    27d0:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    27d2:	4b08      	ldr	r3, [pc, #32]	; (27f4 <main+0x24>)
    27d4:	4798      	blx	r3
	
	/* Initialize the HL7618RD modem power signals */
	modemPowerInit();
    27d6:	4b08      	ldr	r3, [pc, #32]	; (27f8 <main+0x28>)
    27d8:	4798      	blx	r3
	/* Initiate the HTTP connection to server */
	//mdmParam_InitiateConnection();
	
	while (1)
	{
		mdmParser_SendCommandToModem(CMD_AT);
    27da:	4e08      	ldr	r6, [pc, #32]	; (27fc <main+0x2c>)
		delay_ms(2000);
    27dc:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
    27e0:	4c07      	ldr	r4, [pc, #28]	; (2800 <main+0x30>)
		mdmParser_SendCommandToModem(CMD_AT);
    27e2:	2000      	movs	r0, #0
    27e4:	47b0      	blx	r6
		delay_ms(2000);
    27e6:	4628      	mov	r0, r5
    27e8:	47a0      	blx	r4
		mdmParser_ProcessModemResponse();
    27ea:	4b06      	ldr	r3, [pc, #24]	; (2804 <main+0x34>)
    27ec:	4798      	blx	r3
		delay_ms(2000);
    27ee:	4628      	mov	r0, r5
    27f0:	47a0      	blx	r4
    27f2:	e7f6      	b.n	27e2 <main+0x12>
    27f4:	000007b9 	.word	0x000007b9
    27f8:	0000060d 	.word	0x0000060d
    27fc:	000002d5 	.word	0x000002d5
    2800:	000010e9 	.word	0x000010e9
    2804:	00000301 	.word	0x00000301

00002808 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    2808:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    280a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    280c:	689a      	ldr	r2, [r3, #8]
    280e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2810:	689a      	ldr	r2, [r3, #8]
    2812:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    2814:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    2816:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    2818:	6803      	ldr	r3, [r0, #0]
    281a:	3301      	adds	r3, #1
    281c:	6003      	str	r3, [r0, #0]
    281e:	4770      	bx	lr

00002820 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    2820:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2822:	6842      	ldr	r2, [r0, #4]
    2824:	6881      	ldr	r1, [r0, #8]
    2826:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2828:	6882      	ldr	r2, [r0, #8]
    282a:	6841      	ldr	r1, [r0, #4]
    282c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    282e:	685a      	ldr	r2, [r3, #4]
    2830:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2832:	bf04      	itt	eq
    2834:	6882      	ldreq	r2, [r0, #8]
    2836:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2838:	2200      	movs	r2, #0
    283a:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    283c:	681a      	ldr	r2, [r3, #0]
    283e:	3a01      	subs	r2, #1
    2840:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2842:	6818      	ldr	r0, [r3, #0]
}
    2844:	4770      	bx	lr
	...

00002850 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler(void)
{
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    2850:	4b07      	ldr	r3, [pc, #28]	; (2870 <pxCurrentTCBConst2>)
    2852:	6819      	ldr	r1, [r3, #0]
    2854:	6808      	ldr	r0, [r1, #0]
    2856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    285a:	f380 8809 	msr	PSP, r0
    285e:	f3bf 8f6f 	isb	sy
    2862:	f04f 0000 	mov.w	r0, #0
    2866:	f380 8811 	msr	BASEPRI, r0
    286a:	4770      	bx	lr
    286c:	f3af 8000 	nop.w

00002870 <pxCurrentTCBConst2>:
    2870:	200007a8 	.word	0x200007a8
	...

00002880 <PendSV_Handler>:

void xPortPendSVHandler(void)
{
	/* This is a naked function. */

	__asm volatile(
    2880:	f3ef 8009 	mrs	r0, PSP
    2884:	f3bf 8f6f 	isb	sy
    2888:	4b15      	ldr	r3, [pc, #84]	; (28e0 <pxCurrentTCBConst>)
    288a:	681a      	ldr	r2, [r3, #0]
    288c:	f01e 0f10 	tst.w	lr, #16
    2890:	bf08      	it	eq
    2892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    2896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    289a:	6010      	str	r0, [r2, #0]
    289c:	e92d 0009 	stmdb	sp!, {r0, r3}
    28a0:	f04f 0080 	mov.w	r0, #128	; 0x80
    28a4:	f380 8811 	msr	BASEPRI, r0
    28a8:	f3bf 8f4f 	dsb	sy
    28ac:	f3bf 8f6f 	isb	sy
    28b0:	f000 f8da 	bl	2a68 <vTaskSwitchContext>
    28b4:	f04f 0000 	mov.w	r0, #0
    28b8:	f380 8811 	msr	BASEPRI, r0
    28bc:	bc09      	pop	{r0, r3}
    28be:	6819      	ldr	r1, [r3, #0]
    28c0:	6808      	ldr	r0, [r1, #0]
    28c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    28c6:	f01e 0f10 	tst.w	lr, #16
    28ca:	bf08      	it	eq
    28cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    28d0:	f380 8809 	msr	PSP, r0
    28d4:	f3bf 8f6f 	isb	sy
    28d8:	4770      	bx	lr
    28da:	bf00      	nop
    28dc:	f3af 8000 	nop.w

000028e0 <pxCurrentTCBConst>:
    28e0:	200007a8 	.word	0x200007a8

000028e4 <SysTick_Handler>:
	    "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void)
{
    28e4:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    28e6:	f04f 0380 	mov.w	r3, #128	; 0x80
    28ea:	f383 8811 	msr	BASEPRI, r3
    28ee:	f3bf 8f6f 	isb	sy
    28f2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
    28f6:	4b05      	ldr	r3, [pc, #20]	; (290c <SysTick_Handler+0x28>)
    28f8:	4798      	blx	r3
    28fa:	b118      	cbz	r0, 2904 <SysTick_Handler+0x20>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    28fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2900:	4b03      	ldr	r3, [pc, #12]	; (2910 <SysTick_Handler+0x2c>)
    2902:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    2904:	2300      	movs	r3, #0
    2906:	f383 8811 	msr	BASEPRI, r3
    290a:	bd08      	pop	{r3, pc}
    290c:	00002941 	.word	0x00002941
    2910:	e000ed04 	.word	0xe000ed04

00002914 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2914:	4b09      	ldr	r3, [pc, #36]	; (293c <prvResetNextTaskUnblockTime+0x28>)
    2916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    291a:	681b      	ldr	r3, [r3, #0]
    291c:	b143      	cbz	r3, 2930 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    291e:	4b07      	ldr	r3, [pc, #28]	; (293c <prvResetNextTaskUnblockTime+0x28>)
    2920:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    2924:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    2926:	68d2      	ldr	r2, [r2, #12]
    2928:	6852      	ldr	r2, [r2, #4]
    292a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    292e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    2930:	f04f 32ff 	mov.w	r2, #4294967295
    2934:	4b01      	ldr	r3, [pc, #4]	; (293c <prvResetNextTaskUnblockTime+0x28>)
    2936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    293a:	4770      	bx	lr
    293c:	20000710 	.word	0x20000710

00002940 <xTaskIncrementTick>:
{
    2940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2944:	4b44      	ldr	r3, [pc, #272]	; (2a58 <xTaskIncrementTick+0x118>)
    2946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    294a:	2b00      	cmp	r3, #0
    294c:	d173      	bne.n	2a36 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    294e:	4b42      	ldr	r3, [pc, #264]	; (2a58 <xTaskIncrementTick+0x118>)
    2950:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    2954:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    2956:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    295a:	b9e6      	cbnz	r6, 2996 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    295c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    2960:	681b      	ldr	r3, [r3, #0]
    2962:	b143      	cbz	r3, 2976 <xTaskIncrementTick+0x36>
	__asm volatile("	mov %0, %1												\n"
    2964:	f04f 0380 	mov.w	r3, #128	; 0x80
    2968:	f383 8811 	msr	BASEPRI, r3
    296c:	f3bf 8f6f 	isb	sy
    2970:	f3bf 8f4f 	dsb	sy
    2974:	e7fe      	b.n	2974 <xTaskIncrementTick+0x34>
    2976:	4b38      	ldr	r3, [pc, #224]	; (2a58 <xTaskIncrementTick+0x118>)
    2978:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    297c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    2980:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    2984:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    2988:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    298c:	3201      	adds	r2, #1
    298e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    2992:	4b32      	ldr	r3, [pc, #200]	; (2a5c <xTaskIncrementTick+0x11c>)
    2994:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    2996:	4b30      	ldr	r3, [pc, #192]	; (2a58 <xTaskIncrementTick+0x118>)
    2998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    299c:	429e      	cmp	r6, r3
    299e:	d20d      	bcs.n	29bc <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    29a0:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    29a2:	4b2d      	ldr	r3, [pc, #180]	; (2a58 <xTaskIncrementTick+0x118>)
    29a4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    29a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    29aa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    29ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    29b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    29b4:	2b02      	cmp	r3, #2
    29b6:	bf28      	it	cs
    29b8:	2401      	movcs	r4, #1
    29ba:	e043      	b.n	2a44 <xTaskIncrementTick+0x104>
    29bc:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    29be:	4d26      	ldr	r5, [pc, #152]	; (2a58 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    29c0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2a64 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    29c4:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    29c8:	e021      	b.n	2a0e <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    29ca:	f04f 32ff 	mov.w	r2, #4294967295
    29ce:	4b22      	ldr	r3, [pc, #136]	; (2a58 <xTaskIncrementTick+0x118>)
    29d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    29d4:	e7e5      	b.n	29a2 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    29d6:	4a20      	ldr	r2, [pc, #128]	; (2a58 <xTaskIncrementTick+0x118>)
    29d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    29dc:	e7e1      	b.n	29a2 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    29de:	f107 0018 	add.w	r0, r7, #24
    29e2:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    29e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    29e6:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    29ea:	4298      	cmp	r0, r3
    29ec:	bf88      	it	hi
    29ee:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    29f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    29f6:	4649      	mov	r1, r9
    29f8:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    29fc:	4b18      	ldr	r3, [pc, #96]	; (2a60 <xTaskIncrementTick+0x120>)
    29fe:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2a00:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    2a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    2a08:	429a      	cmp	r2, r3
    2a0a:	bf28      	it	cs
    2a0c:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2a0e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    2a12:	681b      	ldr	r3, [r3, #0]
    2a14:	2b00      	cmp	r3, #0
    2a16:	d0d8      	beq.n	29ca <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    2a18:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    2a1c:	68db      	ldr	r3, [r3, #12]
    2a1e:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    2a20:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    2a22:	429e      	cmp	r6, r3
    2a24:	d3d7      	bcc.n	29d6 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2a26:	f107 0904 	add.w	r9, r7, #4
    2a2a:	4648      	mov	r0, r9
    2a2c:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    2a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a30:	2b00      	cmp	r3, #0
    2a32:	d1d4      	bne.n	29de <xTaskIncrementTick+0x9e>
    2a34:	e7d6      	b.n	29e4 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    2a36:	4a08      	ldr	r2, [pc, #32]	; (2a58 <xTaskIncrementTick+0x118>)
    2a38:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    2a3c:	3301      	adds	r3, #1
    2a3e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    2a42:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    2a44:	4b04      	ldr	r3, [pc, #16]	; (2a58 <xTaskIncrementTick+0x118>)
    2a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    2a4a:	2b00      	cmp	r3, #0
}
    2a4c:	bf0c      	ite	eq
    2a4e:	4620      	moveq	r0, r4
    2a50:	2001      	movne	r0, #1
    2a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a56:	bf00      	nop
    2a58:	20000710 	.word	0x20000710
    2a5c:	00002915 	.word	0x00002915
    2a60:	00002809 	.word	0x00002809
    2a64:	00002821 	.word	0x00002821

00002a68 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    2a68:	4b25      	ldr	r3, [pc, #148]	; (2b00 <vTaskSwitchContext+0x98>)
    2a6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    2a6e:	b9fb      	cbnz	r3, 2ab0 <vTaskSwitchContext+0x48>
		xYieldPending = pdFALSE;
    2a70:	4a23      	ldr	r2, [pc, #140]	; (2b00 <vTaskSwitchContext+0x98>)
    2a72:	2300      	movs	r3, #0
    2a74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2a78:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    2a7c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    2a80:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2a84:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2a86:	b9c2      	cbnz	r2, 2aba <vTaskSwitchContext+0x52>
    2a88:	b14b      	cbz	r3, 2a9e <vTaskSwitchContext+0x36>
    2a8a:	491d      	ldr	r1, [pc, #116]	; (2b00 <vTaskSwitchContext+0x98>)
    2a8c:	3b01      	subs	r3, #1
    2a8e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2a92:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2a96:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2a98:	b97a      	cbnz	r2, 2aba <vTaskSwitchContext+0x52>
    2a9a:	2b00      	cmp	r3, #0
    2a9c:	d1f6      	bne.n	2a8c <vTaskSwitchContext+0x24>
    2a9e:	f04f 0380 	mov.w	r3, #128	; 0x80
    2aa2:	f383 8811 	msr	BASEPRI, r3
    2aa6:	f3bf 8f6f 	isb	sy
    2aaa:	f3bf 8f4f 	dsb	sy
    2aae:	e7fe      	b.n	2aae <vTaskSwitchContext+0x46>
		xYieldPending = pdTRUE;
    2ab0:	2201      	movs	r2, #1
    2ab2:	4b13      	ldr	r3, [pc, #76]	; (2b00 <vTaskSwitchContext+0x98>)
    2ab4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    2ab8:	4770      	bx	lr
{
    2aba:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2abc:	4a10      	ldr	r2, [pc, #64]	; (2b00 <vTaskSwitchContext+0x98>)
    2abe:	0099      	lsls	r1, r3, #2
    2ac0:	18c8      	adds	r0, r1, r3
    2ac2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    2ac6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    2ac8:	6864      	ldr	r4, [r4, #4]
    2aca:	62c4      	str	r4, [r0, #44]	; 0x2c
    2acc:	4419      	add	r1, r3
    2ace:	4602      	mov	r2, r0
    2ad0:	3230      	adds	r2, #48	; 0x30
    2ad2:	4294      	cmp	r4, r2
    2ad4:	d00d      	beq.n	2af2 <vTaskSwitchContext+0x8a>
    2ad6:	4a0a      	ldr	r2, [pc, #40]	; (2b00 <vTaskSwitchContext+0x98>)
    2ad8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    2adc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    2ae0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2ae2:	68c9      	ldr	r1, [r1, #12]
    2ae4:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    2ae8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
}
    2aec:	f85d 4b04 	ldr.w	r4, [sp], #4
    2af0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2af2:	6860      	ldr	r0, [r4, #4]
    2af4:	4a02      	ldr	r2, [pc, #8]	; (2b00 <vTaskSwitchContext+0x98>)
    2af6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2afa:	62d0      	str	r0, [r2, #44]	; 0x2c
    2afc:	e7eb      	b.n	2ad6 <vTaskSwitchContext+0x6e>
    2afe:	bf00      	nop
    2b00:	20000710 	.word	0x20000710

00002b04 <__libc_init_array>:
    2b04:	b570      	push	{r4, r5, r6, lr}
    2b06:	4e0d      	ldr	r6, [pc, #52]	; (2b3c <__libc_init_array+0x38>)
    2b08:	4c0d      	ldr	r4, [pc, #52]	; (2b40 <__libc_init_array+0x3c>)
    2b0a:	1ba4      	subs	r4, r4, r6
    2b0c:	10a4      	asrs	r4, r4, #2
    2b0e:	2500      	movs	r5, #0
    2b10:	42a5      	cmp	r5, r4
    2b12:	d109      	bne.n	2b28 <__libc_init_array+0x24>
    2b14:	4e0b      	ldr	r6, [pc, #44]	; (2b44 <__libc_init_array+0x40>)
    2b16:	4c0c      	ldr	r4, [pc, #48]	; (2b48 <__libc_init_array+0x44>)
    2b18:	f000 fcf2 	bl	3500 <_init>
    2b1c:	1ba4      	subs	r4, r4, r6
    2b1e:	10a4      	asrs	r4, r4, #2
    2b20:	2500      	movs	r5, #0
    2b22:	42a5      	cmp	r5, r4
    2b24:	d105      	bne.n	2b32 <__libc_init_array+0x2e>
    2b26:	bd70      	pop	{r4, r5, r6, pc}
    2b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2b2c:	4798      	blx	r3
    2b2e:	3501      	adds	r5, #1
    2b30:	e7ee      	b.n	2b10 <__libc_init_array+0xc>
    2b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2b36:	4798      	blx	r3
    2b38:	3501      	adds	r5, #1
    2b3a:	e7f2      	b.n	2b22 <__libc_init_array+0x1e>
    2b3c:	0000350c 	.word	0x0000350c
    2b40:	0000350c 	.word	0x0000350c
    2b44:	0000350c 	.word	0x0000350c
    2b48:	00003510 	.word	0x00003510

00002b4c <strcpy>:
    2b4c:	4603      	mov	r3, r0
    2b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
    2b52:	f803 2b01 	strb.w	r2, [r3], #1
    2b56:	2a00      	cmp	r2, #0
    2b58:	d1f9      	bne.n	2b4e <strcpy+0x2>
    2b5a:	4770      	bx	lr

00002b5c <strncmp>:
    2b5c:	b510      	push	{r4, lr}
    2b5e:	b16a      	cbz	r2, 2b7c <strncmp+0x20>
    2b60:	3901      	subs	r1, #1
    2b62:	1884      	adds	r4, r0, r2
    2b64:	f810 3b01 	ldrb.w	r3, [r0], #1
    2b68:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    2b6c:	4293      	cmp	r3, r2
    2b6e:	d103      	bne.n	2b78 <strncmp+0x1c>
    2b70:	42a0      	cmp	r0, r4
    2b72:	d001      	beq.n	2b78 <strncmp+0x1c>
    2b74:	2b00      	cmp	r3, #0
    2b76:	d1f5      	bne.n	2b64 <strncmp+0x8>
    2b78:	1a98      	subs	r0, r3, r2
    2b7a:	bd10      	pop	{r4, pc}
    2b7c:	4610      	mov	r0, r2
    2b7e:	bd10      	pop	{r4, pc}

00002b80 <ModemCmdData>:
    2b80:	0000 0000 2e18 0000 0203 0000 02d1 0000     ................
    2b90:	000b 0000 0001 0000 2e1c 0000 0f08 0000     ................
    2ba0:	02d1 0000 001f 0000 0002 0000 2e28 0000     ............(...
    2bb0:	030c 0000 02d1 0000 0014 0000 0003 0000     ................
    2bc0:	2e38 0000 0608 0000 02d1 0000 001d 0000     8...............
    2bd0:	0004 0000 2e44 0000 0805 0000 02d1 0000     ....D...........
    2be0:	001e 0000 0005 0000 2e50 0000 0b0a 0000     ........P.......
    2bf0:	02d1 0000 001c 0000 0006 0000 2e5c 0000     ............\...
    2c00:	0e0a 0000 02d1 0000 0026 0000 0007 0000     ........&.......
    2c10:	2e68 0000 0205 0000 02d1 0000 0004 0000     h...............
    2c20:	0008 0000 2d38 0000 0000 0000 02d1 0000     ....8-..........
	...
    2d10:	7553 6363 7365 6673 6c75 796c 7020 7261     Successfully par
    2d20:	6573 2064 6874 2065 6f63 6d6d 6e61 2064     sed the command 
    2d30:	7473 6972 676e 0a0d 0000 0000 7553 6363     string......Succ
    2d40:	7365 6673 6c75 796c 7520 6470 7461 6465     essfully updated
    2d50:	7420 6568 6320 646d 7220 7365 6f70 736e      the cmd respons
    2d60:	2065 6164 6174 7420 206f 7562 6666 7265     e data to buffer
    2d70:	0a0d 0000 7553 6363 7365 6673 6c75 796c     ....Successfully
    2d80:	5220 6365 6965 6576 2064 6f6d 6564 206d      Received modem 
    2d90:	6572 7073 6e6f 6573 6420 7461 0d61 000a     response data...
    2da0:	6146 6c69 6465 7420 206f 6576 6972 7966     Failed to verify
    2db0:	7420 6568 6320 6d6f 616d 646e 7320 7274      the command str
    2dc0:	6e69 0d67 000a 0000 6552 6461 6620 6f72     ing.....Read fro
    2dd0:	206d 6f6d 6564 206d 6f63 746e 6f72 6c6c     m modem controll
    2de0:	7265 6920 2073 6166 6c69 6465 0a0d 0000     er is failed....
    2df0:	6146 6c69 6465 7420 206f 6552 6563 7669     Failed to Receiv
    2e00:	2065 6f6d 6564 206d 6572 7073 6e6f 6573     e modem response
    2e10:	6420 7461 0d61 000a 5441 000d 5441 432b      data...AT..AT+C
    2e20:	5347 0d4e 0000 0000 5441 572b 4143 5252     GSN.....AT+WCARR
    2e30:	4549 0d52 0000 0000 5441 492b 5250 0d3f     IER.....AT+IPR?.
    2e40:	0000 0000 5441 432b 4950 3f4e 000d 0000     ....AT+CPIN?....
    2e50:	5441 432b 5247 4745 0d3f 0000 5441 4b2b     AT+CGREG?...AT+K
    2e60:	5347 3d4e 0d33 0000 5441 3145 000d 0000     GSN=3...ATE1....
    2e70:	4553 4352 4d4f 2033 6f6e 2074 6e69 7469     SERCOM3 not init
    2e80:	6169 696c 657a 0d64 000a 0000 4f4d 4544     ialized.....MODE
    2e90:	204d 4144 4154 5520 5241 2054 5328 5245     M DATA UART (SER
    2ea0:	4f43 334d 2029 6e69 7469 6169 696c 657a     COM3) initialize
    2eb0:	0d64 000a 6f4d 6564 206d 6144 6174 5420     d...Modem Data T
    2ec0:	2078 6144 6174 5220 6765 4520 706d 7974     x Data Reg Empty
    2ed0:	4320 6c61 426c 6361 0d6b 000a 6f4d 6564      CallBack...Mode
    2ee0:	206d 6144 6174 5420 2078 7962 6574 4320     m Data Tx byte C
    2ef0:	6d6f 6c70 7465 2065 6143 6c6c 6162 6b63     omplete Callback
    2f00:	0a0d 0000 6f50 6577 2072 6e4f 5720 6961     ....Power On Wai
    2f10:	2074 6954 656d 2072 7845 6970 6572 0d64     t Timer Expired.
    2f20:	000a 0000 6f4d 6564 206d 6f50 6577 2072     ....Modem Power 
    2f30:	6e4f 6920 696e 6974 6c61 7a69 7461 6f69     On initializatio
    2f40:	206e 6f43 706d 656c 6574 0d64 000a 0000     n Completed.....
    2f50:	6f50 6577 4f72 576e 6961 5474 6d69 7265     PowerOnWaitTimer
    2f60:	0000 0000 6f4d 6564 206d 7546 6c6c 2079     ....Modem Fully 
    2f70:	704f 7265 7461 6f69 616e 2e6c 0a0d 0000     Operational.....
    2f80:	7854 7320 7265 6169 206c 6544 7562 2067     Tx serial Debug 
    2f90:	6f44 656e 0a0d 0000 7852 4420 6e6f 0d65     Done....Rx Done.
    2fa0:	000a 0000 2e2e 682f 6c61 692f 636e 756c     ....../hal/inclu
    2fb0:	6564 682f 6c61 775f 7464 682e 0000 0000     de/hal_wdt.h....
    2fc0:	2e2e 682f 6c61 732f 6372 682f 6c61 615f     ../hal/src/hal_a
    2fd0:	5f63 7973 636e 632e 0000 0000 2e2e 682f     c_sync.c....../h
    2fe0:	6c61 732f 6372 682f 6c61 615f 6364 735f     al/src/hal_adc_s
    2ff0:	6e79 2e63 0063 0000 2e2e 682f 6c61 732f     ync.c...../hal/s
    3000:	6372 682f 6c61 645f 6361 735f 6e79 2e63     rc/hal_dac_sync.
    3010:	0063 0000 2e2e 682f 6c61 732f 6372 682f     c...../hal/src/h
    3020:	6c61 665f 616c 6873 632e 0000 2e2e 682f     al_flash.c..../h
    3030:	6c61 732f 6372 682f 6c61 705f 6d77 632e     al/src/hal_pwm.c
    3040:	0000 0000 2e2e 682f 6c61 732f 6372 682f     ....../hal/src/h
    3050:	6c61 745f 6d69 7265 632e 0000 2e2e 682f     al_timer.c..../h
    3060:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    3070:	736c 6c5f 7369 2e74 0063 0000 2e2e 682f     ls_list.c...../h
    3080:	6c61 752f 6974 736c 732f 6372 752f 6974     al/utils/src/uti
    3090:	736c 725f 6e69 6267 6675 6566 2e72 0063     ls_ringbuffer.c.
    30a0:	2e2e 682f 6c70 612f 2f63 7068 5f6c 6361     ../hpl/ac/hpl_ac
    30b0:	632e 0000                                   .c..

000030b4 <_adcs>:
    30b4:	0000 00c0 0002 0083 1900 0000 0000 0000     ................
    30c4:	0000 0000 0001 0001 0000 0000 0000 0000     ................
	...
    30e0:	2e2e 682f 6c70 612f 6364 682f 6c70 615f     ../hpl/adc/hpl_a
    30f0:	6364 632e 0000 0000 2e2e 682f 6c70 642f     dc.c....../hpl/d
    3100:	6361 682f 6c70 645f 6361 632e 0000 0000     ac/hpl_dac.c....

00003110 <_cfgs>:
	...

00003210 <user_mux_confs>:
	...

00003254 <channel_confs>:
	...

00003294 <interrupt_cfg>:
	...
    3314:	2e2e 682f 6c70 6e2f 6d76 7463 6c72 682f     ../hpl/nvmctrl/h
    3324:	6c70 6e5f 6d76 7463 6c72 632e 0000 0000     pl_nvmctrl.c....
    3334:	3000 4000 3400 4000 2000 4101 4000 4101     .0.@.4.@. .A.@.A
    3344:	0000 4300 0400 4300                         ...C...C

0000334c <_usarts>:
    334c:	0003 0000 0004 4020 0000 0003 0002 0070     ...... @......p.
    335c:	f62b 0000 0000 0000 0004 0000 0184 4030     +.............0@
    336c:	0300 0003 0002 0070 ff2e 0000 0000 0000     ......p.........
    337c:	0005 0000 0004 4030 0000 0003 0002 0070     ......0@......p.
    338c:	f62b 0000 0000 0000                         +.......

00003394 <_i2cms>:
	...

000033ac <sercomspi_regs>:
	...
    33c0:	2e2e 682f 6c70 732f 7265 6f63 2f6d 7068     ../hpl/sercom/hp
    33d0:	5f6c 6573 6372 6d6f 632e 0000 6000 4101     l_sercom.c...`.A
    33e0:	8000 4101 0c00 4200 1000 4200 1000 4300     ...A...B...B...C

000033f0 <_tccs>:
    33f0:	0000 0000 0300 0000 0000 0000 0000 0000     ................
    3400:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    3410:	0000 0000 0001 0000 0300 0000 0000 0000     ................
    3420:	0000 0000 1770 0000 0000 0000 0000 0000     ....p...........
	...
    3438:	0002 0000 0300 0000 0000 0000 0000 0000     ................
    3448:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    3458:	0000 0000 0003 0000 0300 0000 0000 0000     ................
    3468:	0000 0000 1770 0000 0000 0000 0000 0000     ....p...........
	...
    3480:	0004 0000 0300 0000 0000 0000 0000 0000     ................
    3490:	1770 0000 0000 0000 0000 0000 0000 0000     p...............
    34a0:	0000 0000 2e2e 682f 6c70 742f 6363 682f     ....../hpl/tcc/h
    34b0:	6c70 745f 6363 632e 0000 0000 3800 4000     pl_tcc.c.....8.@
    34c0:	3c00 4000 a000 4101 c000 4101 1400 4200     .<.@...A...A...B
    34d0:	1800 4200 2e2e 682f 6c70 742f 2f63 7068     ...B../hpl/tc/hp
    34e0:	5f6c 6374 632e 0000 2e2e 682f 6c70 772f     l_tc.c..../hpl/w
    34f0:	7464 682f 6c70 775f 7464 632e 0000 0000     dt/hpl_wdt.c....

00003500 <_init>:
    3500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3502:	bf00      	nop
    3504:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3506:	bc08      	pop	{r3}
    3508:	469e      	mov	lr, r3
    350a:	4770      	bx	lr

0000350c <__init_array_start>:
    350c:	00000289 	.word	0x00000289

00003510 <_fini>:
    3510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3512:	bf00      	nop
    3514:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3516:	bc08      	pop	{r3}
    3518:	469e      	mov	lr, r3
    351a:	4770      	bx	lr

0000351c <__fini_array_start>:
    351c:	00000265 	.word	0x00000265
