
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000719c  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000018c  20000000  0000719c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002018c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002018c  2**0
                  CONTENTS
  4 .bss          00003314  20000190  00007330  00020190  2**4
                  ALLOC
  5 .stack        00010004  200034a4  0000a644  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201ba  2**0
                  CONTENTS, READONLY
  8 .debug_info   0005a8e9  00000000  00000000  00020213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00009246  00000000  00000000  0007aafc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001a843  00000000  00000000  00083d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001b50  00000000  00000000  0009e585  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000021b8  00000000  00000000  000a00d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001b0b8  00000000  00000000  000a228d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d69e  00000000  00000000  000bd345  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107d04  00000000  00000000  000ea9e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004938  00000000  00000000  001f26e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 34 01 20 d1 11 00 00 cd 11 00 00 cd 11 00 00     .4. ............
      10:	cd 11 00 00 cd 11 00 00 cd 11 00 00 00 00 00 00     ................
	...
      2c:	61 36 00 00 cd 11 00 00 00 00 00 00 01 37 00 00     a6...........7..
      3c:	65 37 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     e7..............
      4c:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
      5c:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
      6c:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
      7c:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
      8c:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
      9c:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
      ac:	cd 11 00 00 cd 11 00 00 59 25 00 00 6d 25 00 00     ........Y%..m%..
      bc:	e9 22 00 00 f5 22 00 00 01 23 00 00 0d 23 00 00     ."..."...#...#..
      cc:	19 23 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     .#..............
      dc:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
      ec:	cd 11 00 00 00 00 00 00 69 26 00 00 cd 11 00 00     ........i&......
      fc:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
     10c:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
     11c:	cd 11 00 00 cd 11 00 00 cd 11 00 00 09 07 00 00     ................
     12c:	15 07 00 00 21 07 00 00 cd 11 00 00 cd 11 00 00     ....!...........
     13c:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
     14c:	cd 11 00 00 b5 10 00 00 cd 11 00 00 00 00 00 00     ................
	...
     180:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
     190:	00 00 00 00 09 2c 00 00 cd 11 00 00 cd 11 00 00     .....,..........
     1a0:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
     1b0:	1d 2c 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     .,..............
     1c0:	cd 11 00 00 31 2c 00 00 cd 11 00 00 cd 11 00 00     ....1,..........
     1d0:	cd 11 00 00 45 2c 00 00 cd 11 00 00 cd 11 00 00     ....E,..........
     1e0:	59 2c 00 00 cd 11 00 00 cd 11 00 00 4d 31 00 00     Y,..........M1..
     1f0:	61 31 00 00 75 31 00 00 89 31 00 00 9d 31 00 00     a1..u1...1...1..
     200:	b1 31 00 00 00 00 00 00 00 00 00 00 cd 11 00 00     .1..............
     210:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
     220:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
     230:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
     240:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
     250:	cd 11 00 00 cd 11 00 00 cd 11 00 00 cd 11 00 00     ................
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000190 	.word	0x20000190
     280:	00000000 	.word	0x00000000
     284:	0000719c 	.word	0x0000719c

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	0000719c 	.word	0x0000719c
     2c4:	20000194 	.word	0x20000194
     2c8:	0000719c 	.word	0x0000719c
     2cc:	00000000 	.word	0x00000000

000002d0 <vApplicationStackOverflowHook>:
 *  Author: anilj
 */ 
#include "Apps/Common/Common.h"

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	b09a      	sub	sp, #104	; 0x68
     2d4:	4606      	mov	r6, r0
     2d6:	460f      	mov	r7, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
     2d8:	2264      	movs	r2, #100	; 0x64
     2da:	2100      	movs	r1, #0
     2dc:	a801      	add	r0, sp, #4
     2de:	4b0d      	ldr	r3, [pc, #52]	; (314 <vApplicationStackOverflowHook+0x44>)
     2e0:	4798      	blx	r3

	DEBUG_PRINT("**********************************************************");
     2e2:	4d0d      	ldr	r5, [pc, #52]	; (318 <vApplicationStackOverflowHook+0x48>)
     2e4:	4628      	mov	r0, r5
     2e6:	4c0d      	ldr	r4, [pc, #52]	; (31c <vApplicationStackOverflowHook+0x4c>)
     2e8:	47a0      	blx	r4
	DEBUG_PRINT("***************STACK OVERFLOW DETECTED********************");
     2ea:	480d      	ldr	r0, [pc, #52]	; (320 <vApplicationStackOverflowHook+0x50>)
     2ec:	47a0      	blx	r4
	DEBUG_PRINT("**********************************************************");
     2ee:	4628      	mov	r0, r5
     2f0:	47a0      	blx	r4
	DEBUG_PRINT("\r\n");
     2f2:	480c      	ldr	r0, [pc, #48]	; (324 <vApplicationStackOverflowHook+0x54>)
     2f4:	47a0      	blx	r4
	sprintf((int8_t*)dbgBuffer," Task Handle - %d ### Task Name - %s",xTask,pcTaskName);
     2f6:	463b      	mov	r3, r7
     2f8:	4632      	mov	r2, r6
     2fa:	490b      	ldr	r1, [pc, #44]	; (328 <vApplicationStackOverflowHook+0x58>)
     2fc:	a801      	add	r0, sp, #4
     2fe:	4c0b      	ldr	r4, [pc, #44]	; (32c <vApplicationStackOverflowHook+0x5c>)
     300:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
     302:	a801      	add	r0, sp, #4
     304:	4b0a      	ldr	r3, [pc, #40]	; (330 <vApplicationStackOverflowHook+0x60>)
     306:	4798      	blx	r3
     308:	b281      	uxth	r1, r0
     30a:	a801      	add	r0, sp, #4
     30c:	4b09      	ldr	r3, [pc, #36]	; (334 <vApplicationStackOverflowHook+0x64>)
     30e:	4798      	blx	r3
     310:	e7fe      	b.n	310 <vApplicationStackOverflowHook+0x40>
     312:	bf00      	nop
     314:	000054f1 	.word	0x000054f1
     318:	00005e00 	.word	0x00005e00
     31c:	00001025 	.word	0x00001025
     320:	00005e3c 	.word	0x00005e3c
     324:	00006a4c 	.word	0x00006a4c
     328:	00005e78 	.word	0x00005e78
     32c:	00005679 	.word	0x00005679
     330:	000056d1 	.word	0x000056d1
     334:	00000fe1 	.word	0x00000fe1

00000338 <DispatchTask>:
#include "thirdparty/RTOS/freertos/FreeRTOSV10.0.0/Source/include/queue.h"
#include "Apps/SerialDebug/SerialDebug.h"


void DispatchTask( void *DispatchTaskParam)
{
     338:	b570      	push	{r4, r5, r6, lr}
     33a:	b082      	sub	sp, #8
	TickType_t xLastWakeTime;
	const TickType_t xDelayMs = pdMS_TO_TICKS(10000UL);
	xLastWakeTime = xTaskGetTickCount();
     33c:	4b06      	ldr	r3, [pc, #24]	; (358 <DispatchTask+0x20>)
     33e:	4798      	blx	r3
     340:	ac02      	add	r4, sp, #8
     342:	f844 0d04 	str.w	r0, [r4, #-4]!

	while(1)
	{
		//DEBUG_PRINT("Running Dispatch Task successfully");
		kickWatchDog();
     346:	4e05      	ldr	r6, [pc, #20]	; (35c <DispatchTask+0x24>)
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     348:	4d05      	ldr	r5, [pc, #20]	; (360 <DispatchTask+0x28>)
		kickWatchDog();
     34a:	47b0      	blx	r6
		vTaskDelayUntil( &xLastWakeTime, xDelayMs);
     34c:	f242 7110 	movw	r1, #10000	; 0x2710
     350:	4620      	mov	r0, r4
     352:	47a8      	blx	r5
     354:	e7f9      	b.n	34a <DispatchTask+0x12>
     356:	bf00      	nop
     358:	000046b5 	.word	0x000046b5
     35c:	000011a1 	.word	0x000011a1
     360:	000048f5 	.word	0x000048f5

00000364 <getModemCommandData>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void getModemCommandData(AT_CMD_TYPE cmd, MODEM_CMD_DATA* cmdData)
{
     364:	b430      	push	{r4, r5}
	*cmdData = ModemCmdData[cmd];
     366:	eb00 0080 	add.w	r0, r0, r0, lsl #2
     36a:	460d      	mov	r5, r1
     36c:	4c04      	ldr	r4, [pc, #16]	; (380 <getModemCommandData+0x1c>)
     36e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
     372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     376:	6823      	ldr	r3, [r4, #0]
     378:	602b      	str	r3, [r5, #0]
}
     37a:	bc30      	pop	{r4, r5}
     37c:	4770      	bx	lr
     37e:	bf00      	nop
     380:	00005ea0 	.word	0x00005ea0

00000384 <mdmParser_SetKhttpHeaderString>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetKhttpHeaderString(uint8_t* sessionID)
{
     384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (*sessionID)
     386:	7803      	ldrb	r3, [r0, #0]
     388:	3b31      	subs	r3, #49	; 0x31
     38a:	2b07      	cmp	r3, #7
     38c:	d86d      	bhi.n	46a <mdmParser_SetKhttpHeaderString+0xe6>
     38e:	e8df f003 	tbb	[pc, r3]
     392:	2d04      	.short	0x2d04
     394:	51483f36 	.word	0x51483f36
     398:	635a      	.short	0x635a
	{
		case 49:
		{
			kHttpHeaderString[15] = '1';
     39a:	4b36      	ldr	r3, [pc, #216]	; (474 <mdmParser_SetKhttpHeaderString+0xf0>)
     39c:	2231      	movs	r2, #49	; 0x31
     39e:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '1';
     3a0:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 1");
     3a4:	4834      	ldr	r0, [pc, #208]	; (478 <mdmParser_SetKhttpHeaderString+0xf4>)
     3a6:	4b35      	ldr	r3, [pc, #212]	; (47c <mdmParser_SetKhttpHeaderString+0xf8>)
     3a8:	4798      	blx	r3
			DEBUG_PRINT("Session ID value exceeds the max value");
		}
		break;
	}

	DEBUG_PRINT("KHTTP HEADER String is ");
     3aa:	4835      	ldr	r0, [pc, #212]	; (480 <mdmParser_SetKhttpHeaderString+0xfc>)
     3ac:	4b33      	ldr	r3, [pc, #204]	; (47c <mdmParser_SetKhttpHeaderString+0xf8>)
     3ae:	4798      	blx	r3

	strncpy(kHttpGetCompleteData,kHttpGetString,15);
     3b0:	4c34      	ldr	r4, [pc, #208]	; (484 <mdmParser_SetKhttpHeaderString+0x100>)
     3b2:	220f      	movs	r2, #15
     3b4:	4934      	ldr	r1, [pc, #208]	; (488 <mdmParser_SetKhttpHeaderString+0x104>)
     3b6:	4620      	mov	r0, r4
     3b8:	4b34      	ldr	r3, [pc, #208]	; (48c <mdmParser_SetKhttpHeaderString+0x108>)
     3ba:	4798      	blx	r3
	strncat(kHttpGetCompleteData,"\"?i=359998070228764&d=A1Y52XA2Y36&b=36&s=2\"\r",44);
     3bc:	4620      	mov	r0, r4
     3be:	4b34      	ldr	r3, [pc, #208]	; (490 <mdmParser_SetKhttpHeaderString+0x10c>)
     3c0:	4798      	blx	r3
     3c2:	4d34      	ldr	r5, [pc, #208]	; (494 <mdmParser_SetKhttpHeaderString+0x110>)
     3c4:	4404      	add	r4, r0
     3c6:	f105 0720 	add.w	r7, r5, #32
     3ca:	462e      	mov	r6, r5
     3cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     3ce:	6020      	str	r0, [r4, #0]
     3d0:	6061      	str	r1, [r4, #4]
     3d2:	60a2      	str	r2, [r4, #8]
     3d4:	60e3      	str	r3, [r4, #12]
     3d6:	4635      	mov	r5, r6
     3d8:	3410      	adds	r4, #16
     3da:	42be      	cmp	r6, r7
     3dc:	d1f5      	bne.n	3ca <mdmParser_SetKhttpHeaderString+0x46>
     3de:	cd07      	ldmia	r5!, {r0, r1, r2}
     3e0:	6020      	str	r0, [r4, #0]
     3e2:	6061      	str	r1, [r4, #4]
     3e4:	60a2      	str	r2, [r4, #8]
     3e6:	782b      	ldrb	r3, [r5, #0]
     3e8:	7323      	strb	r3, [r4, #12]
     3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			kHttpHeaderString[15] = '2';
     3ec:	4b21      	ldr	r3, [pc, #132]	; (474 <mdmParser_SetKhttpHeaderString+0xf0>)
     3ee:	2232      	movs	r2, #50	; 0x32
     3f0:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '2';
     3f2:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 2");
     3f6:	4828      	ldr	r0, [pc, #160]	; (498 <mdmParser_SetKhttpHeaderString+0x114>)
     3f8:	4b20      	ldr	r3, [pc, #128]	; (47c <mdmParser_SetKhttpHeaderString+0xf8>)
     3fa:	4798      	blx	r3
		break;
     3fc:	e7d5      	b.n	3aa <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '3';
     3fe:	4b1d      	ldr	r3, [pc, #116]	; (474 <mdmParser_SetKhttpHeaderString+0xf0>)
     400:	2233      	movs	r2, #51	; 0x33
     402:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '3';
     404:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 3");
     408:	4824      	ldr	r0, [pc, #144]	; (49c <mdmParser_SetKhttpHeaderString+0x118>)
     40a:	4b1c      	ldr	r3, [pc, #112]	; (47c <mdmParser_SetKhttpHeaderString+0xf8>)
     40c:	4798      	blx	r3
		break;
     40e:	e7cc      	b.n	3aa <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '4';
     410:	4b18      	ldr	r3, [pc, #96]	; (474 <mdmParser_SetKhttpHeaderString+0xf0>)
     412:	2234      	movs	r2, #52	; 0x34
     414:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '4';
     416:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 4");
     41a:	4821      	ldr	r0, [pc, #132]	; (4a0 <mdmParser_SetKhttpHeaderString+0x11c>)
     41c:	4b17      	ldr	r3, [pc, #92]	; (47c <mdmParser_SetKhttpHeaderString+0xf8>)
     41e:	4798      	blx	r3
		break;
     420:	e7c3      	b.n	3aa <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '5';
     422:	4b14      	ldr	r3, [pc, #80]	; (474 <mdmParser_SetKhttpHeaderString+0xf0>)
     424:	2235      	movs	r2, #53	; 0x35
     426:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '5';
     428:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 5");
     42c:	481d      	ldr	r0, [pc, #116]	; (4a4 <mdmParser_SetKhttpHeaderString+0x120>)
     42e:	4b13      	ldr	r3, [pc, #76]	; (47c <mdmParser_SetKhttpHeaderString+0xf8>)
     430:	4798      	blx	r3
		break;
     432:	e7ba      	b.n	3aa <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '6';
     434:	4b0f      	ldr	r3, [pc, #60]	; (474 <mdmParser_SetKhttpHeaderString+0xf0>)
     436:	2236      	movs	r2, #54	; 0x36
     438:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '6';
     43a:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 6");
     43e:	481a      	ldr	r0, [pc, #104]	; (4a8 <mdmParser_SetKhttpHeaderString+0x124>)
     440:	4b0e      	ldr	r3, [pc, #56]	; (47c <mdmParser_SetKhttpHeaderString+0xf8>)
     442:	4798      	blx	r3
		break;
     444:	e7b1      	b.n	3aa <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '7';
     446:	4b0b      	ldr	r3, [pc, #44]	; (474 <mdmParser_SetKhttpHeaderString+0xf0>)
     448:	2237      	movs	r2, #55	; 0x37
     44a:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '7';
     44c:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 7");
     450:	4816      	ldr	r0, [pc, #88]	; (4ac <mdmParser_SetKhttpHeaderString+0x128>)
     452:	4b0a      	ldr	r3, [pc, #40]	; (47c <mdmParser_SetKhttpHeaderString+0xf8>)
     454:	4798      	blx	r3
		break;
     456:	e7a8      	b.n	3aa <mdmParser_SetKhttpHeaderString+0x26>
			kHttpHeaderString[15] = '8';
     458:	4b06      	ldr	r3, [pc, #24]	; (474 <mdmParser_SetKhttpHeaderString+0xf0>)
     45a:	2238      	movs	r2, #56	; 0x38
     45c:	73da      	strb	r2, [r3, #15]
			kHttpGetString[12] = '8';
     45e:	f883 2020 	strb.w	r2, [r3, #32]
			DEBUG_PRINT("Session ID - 8");
     462:	4813      	ldr	r0, [pc, #76]	; (4b0 <mdmParser_SetKhttpHeaderString+0x12c>)
     464:	4b05      	ldr	r3, [pc, #20]	; (47c <mdmParser_SetKhttpHeaderString+0xf8>)
     466:	4798      	blx	r3
		break;
     468:	e79f      	b.n	3aa <mdmParser_SetKhttpHeaderString+0x26>
			DEBUG_PRINT("Session ID value exceeds the max value");
     46a:	4812      	ldr	r0, [pc, #72]	; (4b4 <mdmParser_SetKhttpHeaderString+0x130>)
     46c:	4b03      	ldr	r3, [pc, #12]	; (47c <mdmParser_SetKhttpHeaderString+0xf8>)
     46e:	4798      	blx	r3
		break;
     470:	e79b      	b.n	3aa <mdmParser_SetKhttpHeaderString+0x26>
     472:	bf00      	nop
     474:	20000000 	.word	0x20000000
     478:	00006350 	.word	0x00006350
     47c:	00001025 	.word	0x00001025
     480:	000063f8 	.word	0x000063f8
     484:	200001ac 	.word	0x200001ac
     488:	20000014 	.word	0x20000014
     48c:	00005705 	.word	0x00005705
     490:	000056d1 	.word	0x000056d1
     494:	00006410 	.word	0x00006410
     498:	00006360 	.word	0x00006360
     49c:	00006370 	.word	0x00006370
     4a0:	00006380 	.word	0x00006380
     4a4:	00006390 	.word	0x00006390
     4a8:	000063a0 	.word	0x000063a0
     4ac:	000063b0 	.word	0x000063b0
     4b0:	000063c0 	.word	0x000063c0
     4b4:	000063d0 	.word	0x000063d0

000004b8 <mdmParser_SendCommandToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
void mdmParser_SendCommandToModem(AT_CMD_TYPE atCmd)
{
     4b8:	b510      	push	{r4, lr}
     4ba:	b086      	sub	sp, #24
     4bc:	4604      	mov	r4, r0
	MODEM_CMD_DATA ModemCmdData;
	getModemCommandData(atCmd, &ModemCmdData);
     4be:	a901      	add	r1, sp, #4
     4c0:	4b0c      	ldr	r3, [pc, #48]	; (4f4 <mdmParser_SendCommandToModem+0x3c>)
     4c2:	4798      	blx	r3

	if(atCmd == CMD_AT_KHTTP_GET)
     4c4:	2c17      	cmp	r4, #23
     4c6:	d010      	beq.n	4ea <mdmParser_SendCommandToModem+0x32>
	{
		SerialDebugPrint("\r\n",2);
	}
	mdmCtrlr_FlushRxBuffer();
     4c8:	4b0b      	ldr	r3, [pc, #44]	; (4f8 <mdmParser_SendCommandToModem+0x40>)
     4ca:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
     4cc:	f89d 100c 	ldrb.w	r1, [sp, #12]
     4d0:	9802      	ldr	r0, [sp, #8]
     4d2:	4b0a      	ldr	r3, [pc, #40]	; (4fc <mdmParser_SendCommandToModem+0x44>)
     4d4:	4798      	blx	r3
	lastSendATCommand = atCmd;
     4d6:	4b0a      	ldr	r3, [pc, #40]	; (500 <mdmParser_SendCommandToModem+0x48>)
     4d8:	701c      	strb	r4, [r3, #0]
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastCmdProcessed(bool status)
{
	isPrevCmdRespProcessed = status;
     4da:	2200      	movs	r2, #0
     4dc:	705a      	strb	r2, [r3, #1]
	delay_ms(1000);
     4de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     4e2:	4b08      	ldr	r3, [pc, #32]	; (504 <mdmParser_SendCommandToModem+0x4c>)
     4e4:	4798      	blx	r3
}
     4e6:	b006      	add	sp, #24
     4e8:	bd10      	pop	{r4, pc}
		SerialDebugPrint("\r\n",2);
     4ea:	2102      	movs	r1, #2
     4ec:	4806      	ldr	r0, [pc, #24]	; (508 <mdmParser_SendCommandToModem+0x50>)
     4ee:	4b07      	ldr	r3, [pc, #28]	; (50c <mdmParser_SendCommandToModem+0x54>)
     4f0:	4798      	blx	r3
     4f2:	e7e9      	b.n	4c8 <mdmParser_SendCommandToModem+0x10>
     4f4:	00000365 	.word	0x00000365
     4f8:	0000083d 	.word	0x0000083d
     4fc:	000007c1 	.word	0x000007c1
     500:	20000023 	.word	0x20000023
     504:	00001b0d 	.word	0x00001b0d
     508:	00006a4c 	.word	0x00006a4c
     50c:	00000fe1 	.word	0x00000fe1

00000510 <mdmParser_solicitedCmdParser>:
{
     510:	b570      	push	{r4, r5, r6, lr}
     512:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
     516:	460c      	mov	r4, r1
	getModemCommandData(cmd, &cmdData);
     518:	4669      	mov	r1, sp
     51a:	4b16      	ldr	r3, [pc, #88]	; (574 <mdmParser_solicitedCmdParser+0x64>)
     51c:	4798      	blx	r3
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     51e:	f89d 6008 	ldrb.w	r6, [sp, #8]
	readStatus = mdmCtrlr_ReadResponseFromModem(dataBuffer,cmdData.ResponseLength);
     522:	f8bd 1010 	ldrh.w	r1, [sp, #16]
     526:	a805      	add	r0, sp, #20
     528:	4b13      	ldr	r3, [pc, #76]	; (578 <mdmParser_solicitedCmdParser+0x68>)
     52a:	4798      	blx	r3
	if(readStatus != false)
     52c:	4605      	mov	r5, r0
     52e:	b1b8      	cbz	r0, 560 <mdmParser_solicitedCmdParser+0x50>
		if(VERIFIED_EQUAL == strncmp(cmdData.AtString, dataBuffer, cmdData.CmdLength))
     530:	f89d 2008 	ldrb.w	r2, [sp, #8]
     534:	a905      	add	r1, sp, #20
     536:	9801      	ldr	r0, [sp, #4]
     538:	4b10      	ldr	r3, [pc, #64]	; (57c <mdmParser_solicitedCmdParser+0x6c>)
     53a:	4798      	blx	r3
     53c:	b9c0      	cbnz	r0, 570 <mdmParser_solicitedCmdParser+0x60>
			while(parseCnt < cmdData.validDataCnt)
     53e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
     542:	b198      	cbz	r0, 56c <mdmParser_solicitedCmdParser+0x5c>
     544:	2300      	movs	r3, #0
	uint8_t dataStartIndex = (cmdData.CmdLength + 2);
     546:	1cb1      	adds	r1, r6, #2
				response[parseCnt] = dataBuffer[dataStartIndex + parseCnt];
     548:	b2c9      	uxtb	r1, r1
     54a:	aa05      	add	r2, sp, #20
     54c:	441a      	add	r2, r3
     54e:	5c52      	ldrb	r2, [r2, r1]
     550:	54e2      	strb	r2, [r4, r3]
				parseCnt++;
     552:	3301      	adds	r3, #1
     554:	b2db      	uxtb	r3, r3
			while(parseCnt < cmdData.validDataCnt)
     556:	b29a      	uxth	r2, r3
     558:	4282      	cmp	r2, r0
     55a:	d3f6      	bcc.n	54a <mdmParser_solicitedCmdParser+0x3a>
			response[parseCnt] = '\0';
     55c:	2200      	movs	r2, #0
     55e:	54e2      	strb	r2, [r4, r3]
	mdmCtrlr_FlushRxBuffer();
     560:	4b07      	ldr	r3, [pc, #28]	; (580 <mdmParser_solicitedCmdParser+0x70>)
     562:	4798      	blx	r3
}
     564:	4628      	mov	r0, r5
     566:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
     56a:	bd70      	pop	{r4, r5, r6, pc}
			while(parseCnt < cmdData.validDataCnt)
     56c:	2300      	movs	r3, #0
     56e:	e7f5      	b.n	55c <mdmParser_solicitedCmdParser+0x4c>
			parseStatus = false;
     570:	2500      	movs	r5, #0
     572:	e7f5      	b.n	560 <mdmParser_solicitedCmdParser+0x50>
     574:	00000365 	.word	0x00000365
     578:	000007e9 	.word	0x000007e9
     57c:	000056e1 	.word	0x000056e1
     580:	0000083d 	.word	0x0000083d

00000584 <mdmParser_ProcessModemResponse>:
{
     584:	b570      	push	{r4, r5, r6, lr}
     586:	b086      	sub	sp, #24
	getModemCommandData(lastSendATCommand, &cmdData);
     588:	4c27      	ldr	r4, [pc, #156]	; (628 <mdmParser_ProcessModemResponse+0xa4>)
     58a:	a901      	add	r1, sp, #4
     58c:	7820      	ldrb	r0, [r4, #0]
     58e:	4b27      	ldr	r3, [pc, #156]	; (62c <mdmParser_ProcessModemResponse+0xa8>)
     590:	4798      	blx	r3
	if(lastSendATCommand != CMD_AT_MAX)
     592:	7820      	ldrb	r0, [r4, #0]
     594:	281b      	cmp	r0, #27
     596:	d042      	beq.n	61e <mdmParser_ProcessModemResponse+0x9a>
		if(false != mdmParser_solicitedCmdParser(lastSendATCommand,responseDataBuffer))
     598:	4925      	ldr	r1, [pc, #148]	; (630 <mdmParser_ProcessModemResponse+0xac>)
     59a:	4b26      	ldr	r3, [pc, #152]	; (634 <mdmParser_ProcessModemResponse+0xb0>)
     59c:	4798      	blx	r3
     59e:	b188      	cbz	r0, 5c4 <mdmParser_ProcessModemResponse+0x40>
			if(lastSendATCommand == cmdData.AtCmd)
     5a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
     5a4:	7823      	ldrb	r3, [r4, #0]
     5a6:	429a      	cmp	r2, r3
     5a8:	d004      	beq.n	5b4 <mdmParser_ProcessModemResponse+0x30>
		lastSendATCommand = CMD_AT_MAX;
     5aa:	221b      	movs	r2, #27
     5ac:	4b1e      	ldr	r3, [pc, #120]	; (628 <mdmParser_ProcessModemResponse+0xa4>)
     5ae:	701a      	strb	r2, [r3, #0]
}
     5b0:	b006      	add	sp, #24
     5b2:	bd70      	pop	{r4, r5, r6, pc}
				cmdData.respHandler(responseDataBuffer,cmdData.validDataCnt);
     5b4:	f89d 100e 	ldrb.w	r1, [sp, #14]
     5b8:	481d      	ldr	r0, [pc, #116]	; (630 <mdmParser_ProcessModemResponse+0xac>)
     5ba:	9b04      	ldr	r3, [sp, #16]
     5bc:	4798      	blx	r3
	isPrevCmdRespProcessed = status;
     5be:	2201      	movs	r2, #1
     5c0:	7062      	strb	r2, [r4, #1]
     5c2:	e7f2      	b.n	5aa <mdmParser_ProcessModemResponse+0x26>
			DEBUG_PRINT("Expected modem response is not received");
     5c4:	481c      	ldr	r0, [pc, #112]	; (638 <mdmParser_ProcessModemResponse+0xb4>)
     5c6:	4b1d      	ldr	r3, [pc, #116]	; (63c <mdmParser_ProcessModemResponse+0xb8>)
     5c8:	4798      	blx	r3
			if (lastSendATCommand == CMD_AT_KHTTP_GET)
     5ca:	4b17      	ldr	r3, [pc, #92]	; (628 <mdmParser_ProcessModemResponse+0xa4>)
     5cc:	781b      	ldrb	r3, [r3, #0]
     5ce:	2b17      	cmp	r3, #23
     5d0:	d1eb      	bne.n	5aa <mdmParser_ProcessModemResponse+0x26>
				DEBUG_PRINT("No Response from Web Sever....Posting data to sever is failed");
     5d2:	481b      	ldr	r0, [pc, #108]	; (640 <mdmParser_ProcessModemResponse+0xbc>)
     5d4:	4c19      	ldr	r4, [pc, #100]	; (63c <mdmParser_ProcessModemResponse+0xb8>)
     5d6:	47a0      	blx	r4
				DEBUG_PRINT("Performing the Error Recovery Procedures..");
     5d8:	481a      	ldr	r0, [pc, #104]	; (644 <mdmParser_ProcessModemResponse+0xc0>)
     5da:	47a0      	blx	r4
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_1);
     5dc:	2009      	movs	r0, #9
     5de:	4e1a      	ldr	r6, [pc, #104]	; (648 <mdmParser_ProcessModemResponse+0xc4>)
     5e0:	47b0      	blx	r6
	delay_ms(1000);
     5e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     5e6:	4d19      	ldr	r5, [pc, #100]	; (64c <mdmParser_ProcessModemResponse+0xc8>)
     5e8:	47a8      	blx	r5
	mdmParser_ProcessModemResponse();
     5ea:	f7ff ffcb 	bl	584 <mdmParser_ProcessModemResponse>
	mdmParser_SendCommandToModem(CMD_AT_KCNX_DOWN);
     5ee:	2019      	movs	r0, #25
     5f0:	47b0      	blx	r6
	delay_ms(1000);
     5f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     5f6:	47a8      	blx	r5
	mdmParser_ProcessModemResponse();
     5f8:	f7ff ffc4 	bl	584 <mdmParser_ProcessModemResponse>
	mdmParser_SendCommandToModem(CMD_AT_CGATT);
     5fc:	201a      	movs	r0, #26
     5fe:	47b0      	blx	r6
	delay_ms(1000);
     600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     604:	47a8      	blx	r5
	mdmParser_ProcessModemResponse();
     606:	f7ff ffbd 	bl	584 <mdmParser_ProcessModemResponse>
	delay_ms(3000);
     60a:	f640 30b8 	movw	r0, #3000	; 0xbb8
     60e:	47a8      	blx	r5
	mdmParam_InitiateConnection();
     610:	4b0f      	ldr	r3, [pc, #60]	; (650 <mdmParser_ProcessModemResponse+0xcc>)
     612:	4798      	blx	r3
	DEBUG_PRINT("Closed and Reopened the session......");
     614:	480f      	ldr	r0, [pc, #60]	; (654 <mdmParser_ProcessModemResponse+0xd0>)
     616:	47a0      	blx	r4
	DEBUG_PRINT("Auto recovery completed......");
     618:	480f      	ldr	r0, [pc, #60]	; (658 <mdmParser_ProcessModemResponse+0xd4>)
     61a:	47a0      	blx	r4
     61c:	e7c5      	b.n	5aa <mdmParser_ProcessModemResponse+0x26>
		DEBUG_PRINT("Error : Process response failed - Last Command Invalid");
     61e:	480f      	ldr	r0, [pc, #60]	; (65c <mdmParser_ProcessModemResponse+0xd8>)
     620:	4b06      	ldr	r3, [pc, #24]	; (63c <mdmParser_ProcessModemResponse+0xb8>)
     622:	4798      	blx	r3
}
     624:	e7c4      	b.n	5b0 <mdmParser_ProcessModemResponse+0x2c>
     626:	bf00      	nop
     628:	20000023 	.word	0x20000023
     62c:	00000365 	.word	0x00000365
     630:	200001e8 	.word	0x200001e8
     634:	00000511 	.word	0x00000511
     638:	0000661c 	.word	0x0000661c
     63c:	00001025 	.word	0x00001025
     640:	00006644 	.word	0x00006644
     644:	00006684 	.word	0x00006684
     648:	000004b9 	.word	0x000004b9
     64c:	00001b0d 	.word	0x00001b0d
     650:	00000931 	.word	0x00000931
     654:	000066b0 	.word	0x000066b0
     658:	000066d8 	.word	0x000066d8
     65c:	000066f8 	.word	0x000066f8

00000660 <mdmParser_SetLastCmdProcessed>:
	isPrevCmdRespProcessed = status;
     660:	4b01      	ldr	r3, [pc, #4]	; (668 <mdmParser_SetLastCmdProcessed+0x8>)
     662:	7058      	strb	r0, [r3, #1]
     664:	4770      	bx	lr
     666:	bf00      	nop
     668:	20000023 	.word	0x20000023

0000066c <mdmParser_SetLastSentAtCommand>:
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmParser_SetLastSentAtCommand(AT_CMD_TYPE cmd)
{
	lastSendATCommand = cmd;
     66c:	4b01      	ldr	r3, [pc, #4]	; (674 <mdmParser_SetLastSentAtCommand+0x8>)
     66e:	7018      	strb	r0, [r3, #0]
     670:	4770      	bx	lr
     672:	bf00      	nop
     674:	20000023 	.word	0x20000023

00000678 <mdmParser_GetLastSentAtCommand>:
**
**===========================================================================*/
AT_CMD_TYPE mdmParser_GetLastSentAtCommand(void)
{
	return lastSendATCommand;
}
     678:	4b01      	ldr	r3, [pc, #4]	; (680 <mdmParser_GetLastSentAtCommand+0x8>)
     67a:	7818      	ldrb	r0, [r3, #0]
     67c:	4770      	bx	lr
     67e:	bf00      	nop
     680:	20000023 	.word	0x20000023

00000684 <mdmCtrlr_DataCommInit>:
**
** Description:        Initializes the SERCOM3 UART Module for Modem Data.
**
**===========================================================================*/
void mdmCtrlr_DataCommInit(void)
{
     684:	b510      	push	{r4, lr}
	uint32_t initStatus;
	initStatus = _usart_async_init(&MODEM_SERCOM3_UART,SERCOM3);
     686:	4912      	ldr	r1, [pc, #72]	; (6d0 <mdmCtrlr_DataCommInit+0x4c>)
     688:	4812      	ldr	r0, [pc, #72]	; (6d4 <mdmCtrlr_DataCommInit+0x50>)
     68a:	4b13      	ldr	r3, [pc, #76]	; (6d8 <mdmCtrlr_DataCommInit+0x54>)
     68c:	4798      	blx	r3
	
	if(initStatus == ERR_NONE)
     68e:	b118      	cbz	r0, 698 <mdmCtrlr_DataCommInit+0x14>
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
		
	}
	else
	{
		DEBUG_PRINT("Failed to initialize the MODEM DATA UART");
     690:	4812      	ldr	r0, [pc, #72]	; (6dc <mdmCtrlr_DataCommInit+0x58>)
     692:	4b13      	ldr	r3, [pc, #76]	; (6e0 <mdmCtrlr_DataCommInit+0x5c>)
     694:	4798      	blx	r3
     696:	bd10      	pop	{r4, pc}
		initStatus = ringbuffer_init(&RxRingBuffer, ModemRxDatabuffer, SIZE_MODEM_RX_DATA_BUF);
     698:	f44f 6200 	mov.w	r2, #2048	; 0x800
     69c:	4911      	ldr	r1, [pc, #68]	; (6e4 <mdmCtrlr_DataCommInit+0x60>)
     69e:	4812      	ldr	r0, [pc, #72]	; (6e8 <mdmCtrlr_DataCommInit+0x64>)
     6a0:	4b12      	ldr	r3, [pc, #72]	; (6ec <mdmCtrlr_DataCommInit+0x68>)
     6a2:	4798      	blx	r3
	if(initStatus == ERR_NONE)
     6a4:	2800      	cmp	r0, #0
     6a6:	d1f3      	bne.n	690 <mdmCtrlr_DataCommInit+0xc>
		_usart_async_set_irq_state(&MODEM_SERCOM3_UART,USART_ASYNC_RX_DONE,true);
     6a8:	4c0a      	ldr	r4, [pc, #40]	; (6d4 <mdmCtrlr_DataCommInit+0x50>)
     6aa:	2201      	movs	r2, #1
     6ac:	4611      	mov	r1, r2
     6ae:	4620      	mov	r0, r4
     6b0:	4b0f      	ldr	r3, [pc, #60]	; (6f0 <mdmCtrlr_DataCommInit+0x6c>)
     6b2:	4798      	blx	r3
		_usart_async_enable(&MODEM_SERCOM3_UART);
     6b4:	4620      	mov	r0, r4
     6b6:	4b0f      	ldr	r3, [pc, #60]	; (6f4 <mdmCtrlr_DataCommInit+0x70>)
     6b8:	4798      	blx	r3
		DEBUG_PRINT("MODEM DATA UART (SERCOM3) initialized");
     6ba:	480f      	ldr	r0, [pc, #60]	; (6f8 <mdmCtrlr_DataCommInit+0x74>)
     6bc:	4b08      	ldr	r3, [pc, #32]	; (6e0 <mdmCtrlr_DataCommInit+0x5c>)
     6be:	4798      	blx	r3
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
  {
    return(((uint32_t)NVIC->IP[((uint32_t)(int32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
     6c0:	4b0e      	ldr	r3, [pc, #56]	; (6fc <mdmCtrlr_DataCommInit+0x78>)
     6c2:	f893 133c 	ldrb.w	r1, [r3, #828]	; 0x33c
		ConsoleDebugPrint("SERCOM3 PRIORITY", prior);
     6c6:	0949      	lsrs	r1, r1, #5
     6c8:	480d      	ldr	r0, [pc, #52]	; (700 <mdmCtrlr_DataCommInit+0x7c>)
     6ca:	4b0e      	ldr	r3, [pc, #56]	; (704 <mdmCtrlr_DataCommInit+0x80>)
     6cc:	4798      	blx	r3
     6ce:	bd10      	pop	{r4, pc}
     6d0:	41014000 	.word	0x41014000
     6d4:	20000028 	.word	0x20000028
     6d8:	000027e5 	.word	0x000027e5
     6dc:	0000676c 	.word	0x0000676c
     6e0:	00001025 	.word	0x00001025
     6e4:	20002ac4 	.word	0x20002ac4
     6e8:	200032c4 	.word	0x200032c4
     6ec:	00001dcd 	.word	0x00001dcd
     6f0:	00002891 	.word	0x00002891
     6f4:	00002859 	.word	0x00002859
     6f8:	00006730 	.word	0x00006730
     6fc:	e000e100 	.word	0xe000e100
     700:	00006758 	.word	0x00006758
     704:	0000106d 	.word	0x0000106d

00000708 <SERCOM3_0_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     708:	2201      	movs	r2, #1
     70a:	4b01      	ldr	r3, [pc, #4]	; (710 <SERCOM3_0_Handler+0x8>)
     70c:	761a      	strb	r2, [r3, #24]
     70e:	4770      	bx	lr
     710:	41014000 	.word	0x41014000

00000714 <SERCOM3_1_Handler>:
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     714:	2202      	movs	r2, #2
     716:	4b01      	ldr	r3, [pc, #4]	; (71c <SERCOM3_1_Handler+0x8>)
     718:	761a      	strb	r2, [r3, #24]
     71a:	4770      	bx	lr
     71c:	41014000 	.word	0x41014000

00000720 <SERCOM3_2_Handler>:
** Description:        RXC : Receive Complete Interrupt
**
**===========================================================================*/

void SERCOM3_2_Handler( void )
{
     720:	b530      	push	{r4, r5, lr}
     722:	b089      	sub	sp, #36	; 0x24
	BaseType_t xHigherPriorityTaskWoken;
	uint32_t ulValue;
	MODEM_CMD_DATA cmdData;
	AT_CMD_TYPE lastCmd;
	
	while (!_usart_async_is_byte_received(&MODEM_SERCOM3_UART));
     724:	4d1a      	ldr	r5, [pc, #104]	; (790 <SERCOM3_2_Handler+0x70>)
     726:	4c1b      	ldr	r4, [pc, #108]	; (794 <SERCOM3_2_Handler+0x74>)
     728:	4628      	mov	r0, r5
     72a:	47a0      	blx	r4
     72c:	2800      	cmp	r0, #0
     72e:	d0fb      	beq.n	728 <SERCOM3_2_Handler+0x8>
	rcvdChar[0] = _usart_async_read_byte(&MODEM_SERCOM3_UART);
     730:	4817      	ldr	r0, [pc, #92]	; (790 <SERCOM3_2_Handler+0x70>)
     732:	4b19      	ldr	r3, [pc, #100]	; (798 <SERCOM3_2_Handler+0x78>)
     734:	4798      	blx	r3
	rcvdChar[1] = '\0';
	sprintf((char*)rxPrint,"%s",rcvdChar);
	SerialDebugPrint(rxPrint,sizeof(rxPrint));
#endif
	
	ringbuffer_put(&RxRingBuffer, rcvdChar[0]);
     736:	4601      	mov	r1, r0
     738:	4818      	ldr	r0, [pc, #96]	; (79c <SERCOM3_2_Handler+0x7c>)
     73a:	4b19      	ldr	r3, [pc, #100]	; (7a0 <SERCOM3_2_Handler+0x80>)
     73c:	4798      	blx	r3
	lastCmd = mdmParser_GetLastSentAtCommand();
     73e:	4b19      	ldr	r3, [pc, #100]	; (7a4 <SERCOM3_2_Handler+0x84>)
     740:	4798      	blx	r3
     742:	4604      	mov	r4, r0
     744:	b2c0      	uxtb	r0, r0

	if(lastCmd != CMD_AT_MAX)
     746:	281b      	cmp	r0, #27
     748:	d009      	beq.n	75e <SERCOM3_2_Handler+0x3e>
	{
		getModemCommandData(lastCmd, &cmdData);
     74a:	a902      	add	r1, sp, #8
     74c:	4b16      	ldr	r3, [pc, #88]	; (7a8 <SERCOM3_2_Handler+0x88>)
     74e:	4798      	blx	r3

		if(ringbuffer_num(&RxRingBuffer) >= cmdData.ResponseLength)
     750:	4812      	ldr	r0, [pc, #72]	; (79c <SERCOM3_2_Handler+0x7c>)
     752:	4b16      	ldr	r3, [pc, #88]	; (7ac <SERCOM3_2_Handler+0x8c>)
     754:	4798      	blx	r3
     756:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     75a:	4298      	cmp	r0, r3
     75c:	d201      	bcs.n	762 <SERCOM3_2_Handler+0x42>

			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
		}
	}

}
     75e:	b009      	add	sp, #36	; 0x24
     760:	bd30      	pop	{r4, r5, pc}
		    xTaskNotifyFromISR( xModemRxTaskHandle, lastCmd, eSetValueWithOverwrite, &xHigherPriorityTaskWoken );
     762:	4b13      	ldr	r3, [pc, #76]	; (7b0 <SERCOM3_2_Handler+0x90>)
     764:	6818      	ldr	r0, [r3, #0]
     766:	ab07      	add	r3, sp, #28
     768:	9300      	str	r3, [sp, #0]
     76a:	2300      	movs	r3, #0
     76c:	2203      	movs	r2, #3
     76e:	b2e1      	uxtb	r1, r4
     770:	4c10      	ldr	r4, [pc, #64]	; (7b4 <SERCOM3_2_Handler+0x94>)
     772:	47a0      	blx	r4
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
     774:	9b07      	ldr	r3, [sp, #28]
     776:	b13b      	cbz	r3, 788 <SERCOM3_2_Handler+0x68>
     778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     77c:	4b0e      	ldr	r3, [pc, #56]	; (7b8 <SERCOM3_2_Handler+0x98>)
     77e:	601a      	str	r2, [r3, #0]
     780:	f3bf 8f4f 	dsb	sy
     784:	f3bf 8f6f 	isb	sy
			mdmParser_SetLastSentAtCommand(CMD_AT_MAX);
     788:	201b      	movs	r0, #27
     78a:	4b0c      	ldr	r3, [pc, #48]	; (7bc <SERCOM3_2_Handler+0x9c>)
     78c:	4798      	blx	r3
}
     78e:	e7e6      	b.n	75e <SERCOM3_2_Handler+0x3e>
     790:	20000028 	.word	0x20000028
     794:	00002885 	.word	0x00002885
     798:	00002873 	.word	0x00002873
     79c:	200032c4 	.word	0x200032c4
     7a0:	00001e61 	.word	0x00001e61
     7a4:	00000679 	.word	0x00000679
     7a8:	00000365 	.word	0x00000365
     7ac:	00001ea1 	.word	0x00001ea1
     7b0:	20002aa8 	.word	0x20002aa8
     7b4:	00004f55 	.word	0x00004f55
     7b8:	e000ed04 	.word	0xe000ed04
     7bc:	0000066d 	.word	0x0000066d

000007c0 <mdmCtrlr_SendDataToModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
uint32_t mdmCtrlr_SendDataToModem(const uint8_t *const TxData,const uint16_t length)
{
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	4605      	mov	r5, r0
     7c4:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_SERCOM3_UART);
     7c6:	4c05      	ldr	r4, [pc, #20]	; (7dc <mdmCtrlr_SendDataToModem+0x1c>)
     7c8:	4620      	mov	r0, r4
     7ca:	4b05      	ldr	r3, [pc, #20]	; (7e0 <mdmCtrlr_SendDataToModem+0x20>)
     7cc:	4798      	blx	r3
	return usart_async_write(&MODEM_SERCOM3_UART, TxData, length);
     7ce:	4632      	mov	r2, r6
     7d0:	4629      	mov	r1, r5
     7d2:	4620      	mov	r0, r4
     7d4:	4b03      	ldr	r3, [pc, #12]	; (7e4 <mdmCtrlr_SendDataToModem+0x24>)
     7d6:	4798      	blx	r3
}
     7d8:	bd70      	pop	{r4, r5, r6, pc}
     7da:	bf00      	nop
     7dc:	20000028 	.word	0x20000028
     7e0:	00002859 	.word	0x00002859
     7e4:	00000f5d 	.word	0x00000f5d

000007e8 <mdmCtrlr_ReadResponseFromModem>:
**
** Description:        Transmits Data to Modem
**
**===========================================================================*/
bool mdmCtrlr_ReadResponseFromModem(uint8_t *const buf, const uint16_t length)
{
     7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7ea:	b083      	sub	sp, #12
     7ec:	4605      	mov	r5, r0
     7ee:	460e      	mov	r6, r1
	bool status = false;
	
	uint16_t readCnt = 0;
	if (ringbuffer_num(&RxRingBuffer) >= length)
     7f0:	480d      	ldr	r0, [pc, #52]	; (828 <mdmCtrlr_ReadResponseFromModem+0x40>)
     7f2:	4b0e      	ldr	r3, [pc, #56]	; (82c <mdmCtrlr_ReadResponseFromModem+0x44>)
     7f4:	4798      	blx	r3
     7f6:	42b0      	cmp	r0, r6
     7f8:	d201      	bcs.n	7fe <mdmCtrlr_ReadResponseFromModem+0x16>
	else
	{
		/* Data is not available at Rx Buffer */
		status = false;
	}	
}
     7fa:	b003      	add	sp, #12
     7fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		CRITICAL_SECTION_ENTER()
     7fe:	a801      	add	r0, sp, #4
     800:	4b0b      	ldr	r3, [pc, #44]	; (830 <mdmCtrlr_ReadResponseFromModem+0x48>)
     802:	4798      	blx	r3
		while (readCnt < length)
     804:	b166      	cbz	r6, 820 <mdmCtrlr_ReadResponseFromModem+0x38>
     806:	462c      	mov	r4, r5
     808:	3e01      	subs	r6, #1
     80a:	b2b6      	uxth	r6, r6
     80c:	3601      	adds	r6, #1
     80e:	4435      	add	r5, r6
			ringbuffer_get(&RxRingBuffer, &buf[readCnt++]);
     810:	4f05      	ldr	r7, [pc, #20]	; (828 <mdmCtrlr_ReadResponseFromModem+0x40>)
     812:	4e08      	ldr	r6, [pc, #32]	; (834 <mdmCtrlr_ReadResponseFromModem+0x4c>)
     814:	4621      	mov	r1, r4
     816:	4638      	mov	r0, r7
     818:	47b0      	blx	r6
     81a:	3401      	adds	r4, #1
		while (readCnt < length)
     81c:	42ac      	cmp	r4, r5
     81e:	d1f9      	bne.n	814 <mdmCtrlr_ReadResponseFromModem+0x2c>
		CRITICAL_SECTION_LEAVE()
     820:	a801      	add	r0, sp, #4
     822:	4b05      	ldr	r3, [pc, #20]	; (838 <mdmCtrlr_ReadResponseFromModem+0x50>)
     824:	4798      	blx	r3
     826:	e7e8      	b.n	7fa <mdmCtrlr_ReadResponseFromModem+0x12>
     828:	200032c4 	.word	0x200032c4
     82c:	00001ea1 	.word	0x00001ea1
     830:	00001a9d 	.word	0x00001a9d
     834:	00001e1d 	.word	0x00001e1d
     838:	00001aab 	.word	0x00001aab

0000083c <mdmCtrlr_FlushRxBuffer>:
**
** Description:        Flushes the Rx Ring Buffer
**
**===========================================================================*/
void mdmCtrlr_FlushRxBuffer(void)
{
     83c:	b508      	push	{r3, lr}
	ringbuffer_flush(&RxRingBuffer);
     83e:	4802      	ldr	r0, [pc, #8]	; (848 <mdmCtrlr_FlushRxBuffer+0xc>)
     840:	4b02      	ldr	r3, [pc, #8]	; (84c <mdmCtrlr_FlushRxBuffer+0x10>)
     842:	4798      	blx	r3
     844:	bd08      	pop	{r3, pc}
     846:	bf00      	nop
     848:	200032c4 	.word	0x200032c4
     84c:	00001ec5 	.word	0x00001ec5

00000850 <ModemDiagTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemDiagTask( void *ModemTaskParam)
{
     850:	b5f0      	push	{r4, r5, r6, r7, lr}
     852:	b083      	sub	sp, #12
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemDiagInit(void)
{
	ModemDiagState = MODEM_DIAG_TEST_AT;
     854:	2200      	movs	r2, #0
     856:	4b28      	ldr	r3, [pc, #160]	; (8f8 <ModemDiagTask+0xa8>)
     858:	701a      	strb	r2, [r3, #0]
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     85a:	4c28      	ldr	r4, [pc, #160]	; (8fc <ModemDiagTask+0xac>)
	const TickType_t DiagDelayMs = pdMS_TO_TICKS(500UL);
	const TickType_t powerUpDelayMs = pdMS_TO_TICKS(7000UL);
	BaseType_t TxQueuePushStatus;
	AtTxMsgType TxMsgQueueData;

	switch(ModemDiagOpMode)
     85c:	4e28      	ldr	r6, [pc, #160]	; (900 <ModemDiagTask+0xb0>)
		{
			switch(ModemDiagState)
			{
				case MODEM_DIAG_TEST_AT:
				{
					vTaskDelay(powerUpDelayMs);
     85e:	4d29      	ldr	r5, [pc, #164]	; (904 <ModemDiagTask+0xb4>)
     860:	e01a      	b.n	898 <ModemDiagTask+0x48>
					if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
					{
						if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
						{
							TxMsgQueueData.taskID = MODEM_DIAG_TASK;
     862:	2304      	movs	r3, #4
     864:	f88d 3000 	strb.w	r3, [sp]
							TxMsgQueueData.atCmd = CMD_AT_CGSN;
     868:	2301      	movs	r3, #1
     86a:	f88d 3001 	strb.w	r3, [sp, #1]
							TxMsgQueueData.pData = NULL;
     86e:	2300      	movs	r3, #0
     870:	9301      	str	r3, [sp, #4]
							TxQueuePushStatus = xQueueSendToBack(AtTransmitQueue, &TxMsgQueueData, QueuePushDelayMs);
     872:	2264      	movs	r2, #100	; 0x64
     874:	4669      	mov	r1, sp
     876:	4824      	ldr	r0, [pc, #144]	; (908 <ModemDiagTask+0xb8>)
     878:	6800      	ldr	r0, [r0, #0]
     87a:	4f24      	ldr	r7, [pc, #144]	; (90c <ModemDiagTask+0xbc>)
     87c:	47b8      	blx	r7

							if(TxQueuePushStatus == pdPASS)
     87e:	2801      	cmp	r0, #1
     880:	d028      	beq.n	8d4 <ModemDiagTask+0x84>
								ModemDiagState = MODEM_DIAG_GET_IMEI;
								ModemDiagOpMode = OP_RX_MODE;
							}
							else
							{
								DEBUG_PRINT("Failed to sent the Diag data to Tx Task");
     882:	4823      	ldr	r0, [pc, #140]	; (910 <ModemDiagTask+0xc0>)
     884:	4b23      	ldr	r3, [pc, #140]	; (914 <ModemDiagTask+0xc4>)
     886:	4798      	blx	r3
								vTaskDelay(DiagDelayMs);
     888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     88c:	47a8      	blx	r5
			kickWatchDog();
     88e:	4b22      	ldr	r3, [pc, #136]	; (918 <ModemDiagTask+0xc8>)
     890:	4798      	blx	r3
			vTaskDelay(xDelayMs);
     892:	f640 50ac 	movw	r0, #3500	; 0xdac
     896:	47a8      	blx	r5
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     898:	47a0      	blx	r4
     89a:	2804      	cmp	r0, #4
     89c:	d1fc      	bne.n	898 <ModemDiagTask+0x48>
	switch(ModemDiagOpMode)
     89e:	7833      	ldrb	r3, [r6, #0]
     8a0:	2b00      	cmp	r3, #0
     8a2:	d1f4      	bne.n	88e <ModemDiagTask+0x3e>
			switch(ModemDiagState)
     8a4:	4b14      	ldr	r3, [pc, #80]	; (8f8 <ModemDiagTask+0xa8>)
     8a6:	781b      	ldrb	r3, [r3, #0]
     8a8:	2b00      	cmp	r3, #0
     8aa:	d1f0      	bne.n	88e <ModemDiagTask+0x3e>
					vTaskDelay(powerUpDelayMs);
     8ac:	f641 3058 	movw	r0, #7000	; 0x1b58
     8b0:	47a8      	blx	r5
					if (uxQueueMessagesWaiting(AtTransmitQueue) == 0)
     8b2:	4b15      	ldr	r3, [pc, #84]	; (908 <ModemDiagTask+0xb8>)
     8b4:	6818      	ldr	r0, [r3, #0]
     8b6:	4b19      	ldr	r3, [pc, #100]	; (91c <ModemDiagTask+0xcc>)
     8b8:	4798      	blx	r3
     8ba:	2800      	cmp	r0, #0
     8bc:	d1e7      	bne.n	88e <ModemDiagTask+0x3e>
						if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     8be:	2100      	movs	r1, #0
     8c0:	4b17      	ldr	r3, [pc, #92]	; (920 <ModemDiagTask+0xd0>)
     8c2:	6818      	ldr	r0, [r3, #0]
     8c4:	4b17      	ldr	r3, [pc, #92]	; (924 <ModemDiagTask+0xd4>)
     8c6:	4798      	blx	r3
     8c8:	2801      	cmp	r0, #1
     8ca:	d0ca      	beq.n	862 <ModemDiagTask+0x12>
							}
						}
						else
						{
							DEBUG_PRINT("Couldn't obtain the semaphore");
     8cc:	4816      	ldr	r0, [pc, #88]	; (928 <ModemDiagTask+0xd8>)
     8ce:	4b11      	ldr	r3, [pc, #68]	; (914 <ModemDiagTask+0xc4>)
     8d0:	4798      	blx	r3
     8d2:	e7dc      	b.n	88e <ModemDiagTask+0x3e>
								DEBUG_PRINT("Sent the Diag data to Tx Task");
     8d4:	4815      	ldr	r0, [pc, #84]	; (92c <ModemDiagTask+0xdc>)
     8d6:	4b0f      	ldr	r3, [pc, #60]	; (914 <ModemDiagTask+0xc4>)
     8d8:	4798      	blx	r3
								xSemaphoreGive(AtTxQueueLoadSemaphore);
     8da:	2300      	movs	r3, #0
     8dc:	461a      	mov	r2, r3
     8de:	4619      	mov	r1, r3
     8e0:	480f      	ldr	r0, [pc, #60]	; (920 <ModemDiagTask+0xd0>)
     8e2:	6800      	ldr	r0, [r0, #0]
     8e4:	47b8      	blx	r7
								vTaskDelay(DiagDelayMs);
     8e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     8ea:	47a8      	blx	r5
								ModemDiagState = MODEM_DIAG_GET_IMEI;
     8ec:	2301      	movs	r3, #1
     8ee:	4a02      	ldr	r2, [pc, #8]	; (8f8 <ModemDiagTask+0xa8>)
     8f0:	7013      	strb	r3, [r2, #0]
								ModemDiagOpMode = OP_RX_MODE;
     8f2:	7033      	strb	r3, [r6, #0]
     8f4:	e7cb      	b.n	88e <ModemDiagTask+0x3e>
     8f6:	bf00      	nop
     8f8:	200032d4 	.word	0x200032d4
     8fc:	000009cd 	.word	0x000009cd
     900:	200032d5 	.word	0x200032d5
     904:	000049a1 	.word	0x000049a1
     908:	20002ab4 	.word	0x20002ab4
     90c:	00003c91 	.word	0x00003c91
     910:	000067b8 	.word	0x000067b8
     914:	00001025 	.word	0x00001025
     918:	000011a1 	.word	0x000011a1
     91c:	000042dd 	.word	0x000042dd
     920:	20002ab8 	.word	0x20002ab8
     924:	000040fd 	.word	0x000040fd
     928:	000067e0 	.word	0x000067e0
     92c:	00006798 	.word	0x00006798

00000930 <mdmParam_InitiateConnection>:




void mdmParam_InitiateConnection(void)
{
     930:	b570      	push	{r4, r5, r6, lr}
}


static void closeExistingConnections(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_1);
     932:	2009      	movs	r0, #9
     934:	4e21      	ldr	r6, [pc, #132]	; (9bc <mdmParam_InitiateConnection+0x8c>)
     936:	47b0      	blx	r6
	delay_ms(1000);
     938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     93c:	4c20      	ldr	r4, [pc, #128]	; (9c0 <mdmParam_InitiateConnection+0x90>)
     93e:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     940:	4d20      	ldr	r5, [pc, #128]	; (9c4 <mdmParam_InitiateConnection+0x94>)
     942:	47a8      	blx	r5
	delay_ms(1000);
     944:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     948:	47a0      	blx	r4

	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CLOSE_2);
     94a:	200a      	movs	r0, #10
     94c:	47b0      	blx	r6
	delay_ms(1000);
     94e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     952:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     954:	47a8      	blx	r5
	delay_ms(1000);
     956:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     95a:	47a0      	blx	r4
	
}

static void sendAT_KPATTERN(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KPATTERN);
     95c:	2013      	movs	r0, #19
     95e:	47b0      	blx	r6
	delay_ms(2000);
     960:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     964:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     966:	47a8      	blx	r5
	delay_ms(2000);
     968:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     96c:	47a0      	blx	r4
}

static void sendAT_KCNXCFG(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KCNXCFG);
     96e:	2014      	movs	r0, #20
     970:	47b0      	blx	r6
	delay_ms(2000);
     972:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     976:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     978:	47a8      	blx	r5
	delay_ms(2000);
     97a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     97e:	47a0      	blx	r4
}

static void sendAT_KCNXTIMER(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KCNXTIMER);
     980:	2015      	movs	r0, #21
     982:	47b0      	blx	r6
	delay_ms(2000);
     984:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     988:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     98a:	47a8      	blx	r5
	delay_ms(2000);
     98c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     990:	47a0      	blx	r4
}

static void sendAT_KHTTPCFG(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_CFG);
     992:	2008      	movs	r0, #8
     994:	47b0      	blx	r6
	delay_ms(2000);
     996:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     99a:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     99c:	47a8      	blx	r5
	delay_ms(2000);
     99e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     9a2:	47a0      	blx	r4
}

static void sendAT_KHTTPHEADER(void)
{
	mdmParser_SendCommandToModem(CMD_AT_KHTTP_HEADER);
     9a4:	2016      	movs	r0, #22
     9a6:	47b0      	blx	r6
	delay_ms(2000);
     9a8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     9ac:	47a0      	blx	r4
	mdmParser_ProcessModemResponse();
     9ae:	47a8      	blx	r5
	delay_ms(2000);
     9b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
     9b4:	47a0      	blx	r4
	mdmCtrlr_FlushRxBuffer();
     9b6:	4b04      	ldr	r3, [pc, #16]	; (9c8 <mdmParam_InitiateConnection+0x98>)
     9b8:	4798      	blx	r3
     9ba:	bd70      	pop	{r4, r5, r6, pc}
     9bc:	000004b9 	.word	0x000004b9
     9c0:	00001b0d 	.word	0x00001b0d
     9c4:	00000585 	.word	0x00000585
     9c8:	0000083d 	.word	0x0000083d

000009cc <getModemPowerStatus>:
*
********************************************************************************/
MODEM_POWER_STATES_T getModemPowerStatus(void)
{
    return ModemPwrState;
}
     9cc:	4b01      	ldr	r3, [pc, #4]	; (9d4 <getModemPowerStatus+0x8>)
     9ce:	7818      	ldrb	r0, [r3, #0]
     9d0:	4770      	bx	lr
     9d2:	bf00      	nop
     9d4:	200004a4 	.word	0x200004a4

000009d8 <modemPowerStateInit>:
* DESCRIPTION: Initializes the Modem Power State Machines
*
********************************************************************************/
void modemPowerStateInit(void)
{
    ModemPwrState = MDM_PWR_SHUTDOWN;
     9d8:	4b03      	ldr	r3, [pc, #12]	; (9e8 <modemPowerStateInit+0x10>)
     9da:	2200      	movs	r2, #0
     9dc:	701a      	strb	r2, [r3, #0]
    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     9de:	705a      	strb	r2, [r3, #1]
    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     9e0:	2201      	movs	r2, #1
     9e2:	709a      	strb	r2, [r3, #2]
    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     9e4:	70da      	strb	r2, [r3, #3]
     9e6:	4770      	bx	lr
     9e8:	200004a4 	.word	0x200004a4

000009ec <modemPowerSchedule>:
*
* DESCRIPTION: Modem Power - Main State Machine Function
*
********************************************************************************/
void modemPowerSchedule(void)
{
     9ec:	b538      	push	{r3, r4, r5, lr}
    const TickType_t ModemSigInitDelay = pdMS_TO_TICKS(500UL);
    const TickType_t ModemOnBurstDelay = pdMS_TO_TICKS(50UL);
    const TickType_t ModemOnWaitDelay = pdMS_TO_TICKS(3000UL);
    const TickType_t ModemResetWaitDelay = pdMS_TO_TICKS(25UL);

    switch(ModemPwrState)
     9ee:	4b5d      	ldr	r3, [pc, #372]	; (b64 <modemPowerSchedule+0x178>)
     9f0:	781b      	ldrb	r3, [r3, #0]
     9f2:	2b06      	cmp	r3, #6
     9f4:	f000 8089 	beq.w	b0a <modemPowerSchedule+0x11e>
     9f8:	2b07      	cmp	r3, #7
     9fa:	d054      	beq.n	aa6 <modemPowerSchedule+0xba>
     9fc:	b103      	cbz	r3, a00 <modemPowerSchedule+0x14>
     9fe:	bd38      	pop	{r3, r4, r5, pc}
        case MDM_PWR_SHUTDOWN:
        {
            /* Turn on the HL7588 modem by providing an active low 
             * signal at POWER_ON_N pin of modem.
             */
            switch(ModemPwrOnSubState)
     a00:	4b58      	ldr	r3, [pc, #352]	; (b64 <modemPowerSchedule+0x178>)
     a02:	785b      	ldrb	r3, [r3, #1]
     a04:	2b03      	cmp	r3, #3
     a06:	d8fa      	bhi.n	9fe <modemPowerSchedule+0x12>
     a08:	e8df f003 	tbb	[pc, r3]
     a0c:	49413502 	.word	0x49413502
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a10:	4b55      	ldr	r3, [pc, #340]	; (b68 <modemPowerSchedule+0x17c>)
     a12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     a1e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     a22:	4c52      	ldr	r4, [pc, #328]	; (b6c <modemPowerSchedule+0x180>)
     a24:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a28:	f893 00d0 	ldrb.w	r0, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     a2c:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a30:	f883 00d0 	strb.w	r0, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a38:	f44f 2500 	mov.w	r5, #524288	; 0x80000
     a3c:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a3e:	6299      	str	r1, [r3, #40]	; 0x28
     a40:	484b      	ldr	r0, [pc, #300]	; (b70 <modemPowerSchedule+0x184>)
     a42:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a44:	f893 0053 	ldrb.w	r0, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     a48:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a4c:	f883 0053 	strb.w	r0, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a50:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a52:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a54:	6299      	str	r1, [r3, #40]	; 0x28
     a56:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a58:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     a5c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a60:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     a64:	615a      	str	r2, [r3, #20]

                    gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_DTR,false);

                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_LOW;
     a66:	2201      	movs	r2, #1
     a68:	4b3e      	ldr	r3, [pc, #248]	; (b64 <modemPowerSchedule+0x178>)
     a6a:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemSigInitDelay);
     a6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     a70:	4b40      	ldr	r3, [pc, #256]	; (b74 <modemPowerSchedule+0x188>)
     a72:	4798      	blx	r3
                }
                break;
     a74:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     a7a:	4b3b      	ldr	r3, [pc, #236]	; (b68 <modemPowerSchedule+0x17c>)
     a7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                case MDM_PWR_MDM_ON_SIG_LOW:
                {
                    /* Give a short 50 ms positive pulse on MODEM ON Pin */
                    gpio_set_pin_level(MODEM_ON,true);
                    ModemPwrOnSubState = MDM_PWR_MDM_ON_SIG_HIGH;
     a80:	2202      	movs	r2, #2
     a82:	4b38      	ldr	r3, [pc, #224]	; (b64 <modemPowerSchedule+0x178>)
     a84:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnBurstDelay);
     a86:	2032      	movs	r0, #50	; 0x32
     a88:	4b3a      	ldr	r3, [pc, #232]	; (b74 <modemPowerSchedule+0x188>)
     a8a:	4798      	blx	r3
                }
                break;
     a8c:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_MDM_ON_SIG_HIGH:
                {
                    /* Wait untill the modem is powered on */
                    ModemPwrOnSubState = MDM_PWR_ON_COMPLETED;
     a8e:	2203      	movs	r2, #3
     a90:	4b34      	ldr	r3, [pc, #208]	; (b64 <modemPowerSchedule+0x178>)
     a92:	705a      	strb	r2, [r3, #1]
                    vTaskDelay(ModemOnWaitDelay);
     a94:	f640 30b8 	movw	r0, #3000	; 0xbb8
     a98:	4b36      	ldr	r3, [pc, #216]	; (b74 <modemPowerSchedule+0x188>)
     a9a:	4798      	blx	r3
                }
                break;
     a9c:	bd38      	pop	{r3, r4, r5, pc}

                case MDM_PWR_ON_COMPLETED:
                {
                    //DEBUG_PRINT("Modem Powered On");
                    ModemPwrState = MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS;
     a9e:	2204      	movs	r2, #4
     aa0:	4b30      	ldr	r3, [pc, #192]	; (b64 <modemPowerSchedule+0x178>)
     aa2:	701a      	strb	r2, [r3, #0]
                }
                break;
     aa4:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;
                
        case MDM_PWR_RESET_MODEM:
        {
            switch(ModemResetSubState)
     aa6:	4b2f      	ldr	r3, [pc, #188]	; (b64 <modemPowerSchedule+0x178>)
     aa8:	789b      	ldrb	r3, [r3, #2]
     aaa:	b113      	cbz	r3, ab2 <modemPowerSchedule+0xc6>
     aac:	2b01      	cmp	r3, #1
     aae:	d017      	beq.n	ae0 <modemPowerSchedule+0xf4>
     ab0:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ab2:	4b2d      	ldr	r3, [pc, #180]	; (b68 <modemPowerSchedule+0x17c>)
     ab4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     ab8:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     aba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     abe:	629a      	str	r2, [r3, #40]	; 0x28
     ac0:	4a2b      	ldr	r2, [pc, #172]	; (b70 <modemPowerSchedule+0x184>)
     ac2:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ac4:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     ac8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     acc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     ad0:	6199      	str	r1, [r3, #24]
                case MDM_PWR_RESET_ASSERT:
                {
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemResetSubState = MDM_PWR_RESET_DEASSERT;
     ad2:	2201      	movs	r2, #1
     ad4:	4b23      	ldr	r3, [pc, #140]	; (b64 <modemPowerSchedule+0x178>)
     ad6:	709a      	strb	r2, [r3, #2]
                    vTaskDelay(ModemResetWaitDelay);
     ad8:	2019      	movs	r0, #25
     ada:	4b26      	ldr	r3, [pc, #152]	; (b74 <modemPowerSchedule+0x188>)
     adc:	4798      	blx	r3
                }
                break;
     ade:	bd38      	pop	{r3, r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     ae0:	4b21      	ldr	r3, [pc, #132]	; (b68 <modemPowerSchedule+0x17c>)
     ae2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     ae6:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     ae8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     aec:	629a      	str	r2, [r3, #40]	; 0x28
     aee:	4a20      	ldr	r2, [pc, #128]	; (b70 <modemPowerSchedule+0x184>)
     af0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     af2:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     af6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     afa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     afe:	6159      	str	r1, [r3, #20]
                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,false);

                    /* Power On the Modem after reset */
                    ModemPwrState = MDM_PWR_SHUTDOWN;
     b00:	4b18      	ldr	r3, [pc, #96]	; (b64 <modemPowerSchedule+0x178>)
     b02:	2200      	movs	r2, #0
     b04:	701a      	strb	r2, [r3, #0]
                    ModemPwrOnSubState = MDM_PWR_ALL_SIG_INIT;
     b06:	705a      	strb	r2, [r3, #1]
                }
                break;
     b08:	bd38      	pop	{r3, r4, r5, pc}
        }
        break;

        case MDM_PWR_FORCED_POWER_OFF:
        {
            switch(ModemForcedOffSubState)
     b0a:	4b16      	ldr	r3, [pc, #88]	; (b64 <modemPowerSchedule+0x178>)
     b0c:	78db      	ldrb	r3, [r3, #3]
     b0e:	2b00      	cmp	r3, #0
     b10:	f47f af75 	bne.w	9fe <modemPowerSchedule+0x12>
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b14:	4b14      	ldr	r3, [pc, #80]	; (b68 <modemPowerSchedule+0x17c>)
     b16:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     b1a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
     b22:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
     b26:	4a11      	ldr	r2, [pc, #68]	; (b6c <modemPowerSchedule+0x180>)
     b28:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b2c:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     b30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b34:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     b38:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     b3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
     b40:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     b42:	6298      	str	r0, [r3, #40]	; 0x28
     b44:	4a0a      	ldr	r2, [pc, #40]	; (b70 <modemPowerSchedule+0x184>)
     b46:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     b48:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     b4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     b50:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     b54:	6199      	str	r1, [r3, #24]
                    gpio_set_pin_level(MODEM_ON,false);

                    gpio_set_pin_direction(MODEM_RESET, GPIO_DIRECTION_OUT);
                    gpio_set_pin_function(MODEM_RESET, GPIO_PIN_FUNCTION_OFF);
                    gpio_set_pin_level(MODEM_RESET,true);
                    ModemForcedOffSubState = MDM_PWR_FORCED_OFF_CMPLTD;
     b56:	2201      	movs	r2, #1
     b58:	4b02      	ldr	r3, [pc, #8]	; (b64 <modemPowerSchedule+0x178>)
     b5a:	70da      	strb	r2, [r3, #3]
                    vTaskDelay(ModemResetWaitDelay);
     b5c:	2019      	movs	r0, #25
     b5e:	4b05      	ldr	r3, [pc, #20]	; (b74 <modemPowerSchedule+0x188>)
     b60:	4798      	blx	r3
        break;
        
        default:
        break;
    }
}
     b62:	e74c      	b.n	9fe <modemPowerSchedule+0x12>
     b64:	200004a4 	.word	0x200004a4
     b68:	41008000 	.word	0x41008000
     b6c:	c0000001 	.word	0xc0000001
     b70:	c0000008 	.word	0xc0000008
     b74:	000049a1 	.word	0x000049a1

00000b78 <ModemProcessTask>:
* DESCRIPTION: This function converts a given signed integer(16-bit or 32-bit)
*               into a string and returns the string.
*
********************************************************************************/
void ModemProcessTask( void *ModemTaskParam)
{
     b78:	b570      	push	{r4, r5, r6, lr}
    const TickType_t xDelayMs = pdMS_TO_TICKS(5000UL);

    modemPowerStateInit();
     b7a:	4b07      	ldr	r3, [pc, #28]	; (b98 <ModemProcessTask+0x20>)
     b7c:	4798      	blx	r3

    while(1)
    {
        modemPowerSchedule();
     b7e:	4d07      	ldr	r5, [pc, #28]	; (b9c <ModemProcessTask+0x24>)

        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     b80:	4c07      	ldr	r4, [pc, #28]	; (ba0 <ModemProcessTask+0x28>)
        {
            //DEBUG_PRINT("Running Modem Process Task successfully");
			kickWatchDog();
     b82:	4e08      	ldr	r6, [pc, #32]	; (ba4 <ModemProcessTask+0x2c>)
        modemPowerSchedule();
     b84:	47a8      	blx	r5
        if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     b86:	47a0      	blx	r4
     b88:	2804      	cmp	r0, #4
     b8a:	d1fb      	bne.n	b84 <ModemProcessTask+0xc>
			kickWatchDog();
     b8c:	47b0      	blx	r6
            vTaskDelay(xDelayMs);
     b8e:	f241 3088 	movw	r0, #5000	; 0x1388
     b92:	4b05      	ldr	r3, [pc, #20]	; (ba8 <ModemProcessTask+0x30>)
     b94:	4798      	blx	r3
     b96:	e7f5      	b.n	b84 <ModemProcessTask+0xc>
     b98:	000009d9 	.word	0x000009d9
     b9c:	000009ed 	.word	0x000009ed
     ba0:	000009cd 	.word	0x000009cd
     ba4:	000011a1 	.word	0x000011a1
     ba8:	000049a1 	.word	0x000049a1

00000bac <mdmResp_AtRespHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_AtRespHandler(uint8_t* response, uint8_t length)
{
     bac:	b570      	push	{r4, r5, r6, lr}
     bae:	4605      	mov	r5, r0
     bb0:	460e      	mov	r6, r1
	SerialDebugPrint("In AT handler\r\n",15);
     bb2:	210f      	movs	r1, #15
     bb4:	4804      	ldr	r0, [pc, #16]	; (bc8 <mdmResp_AtRespHandler+0x1c>)
     bb6:	4c05      	ldr	r4, [pc, #20]	; (bcc <mdmResp_AtRespHandler+0x20>)
     bb8:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     bba:	4631      	mov	r1, r6
     bbc:	4628      	mov	r0, r5
     bbe:	47a0      	blx	r4
	SerialDebugPrint("\r\n",2);
     bc0:	2102      	movs	r1, #2
     bc2:	4803      	ldr	r0, [pc, #12]	; (bd0 <mdmResp_AtRespHandler+0x24>)
     bc4:	47a0      	blx	r4
     bc6:	bd70      	pop	{r4, r5, r6, pc}
     bc8:	00006800 	.word	0x00006800
     bcc:	00000fe1 	.word	0x00000fe1
     bd0:	00006a4c 	.word	0x00006a4c

00000bd4 <defaultFunctionPointer>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void defaultFunctionPointer(uint8_t* response, uint8_t length)
{
     bd4:	4770      	bx	lr
	...

00000bd8 <mdmResp_IMEIRespHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_IMEIRespHandler(uint8_t* response, uint8_t length)
{
     bd8:	b538      	push	{r3, r4, r5, lr}
     bda:	4604      	mov	r4, r0
     bdc:	460d      	mov	r5, r1
	DEBUG_PRINT("In CGSN handler");
     bde:	4804      	ldr	r0, [pc, #16]	; (bf0 <mdmResp_IMEIRespHandler+0x18>)
     be0:	4b04      	ldr	r3, [pc, #16]	; (bf4 <mdmResp_IMEIRespHandler+0x1c>)
     be2:	4798      	blx	r3
	SerialDebugPrint(response,length);
     be4:	4629      	mov	r1, r5
     be6:	4620      	mov	r0, r4
     be8:	4b03      	ldr	r3, [pc, #12]	; (bf8 <mdmResp_IMEIRespHandler+0x20>)
     bea:	4798      	blx	r3
     bec:	bd38      	pop	{r3, r4, r5, pc}
     bee:	bf00      	nop
     bf0:	00006810 	.word	0x00006810
     bf4:	00001025 	.word	0x00001025
     bf8:	00000fe1 	.word	0x00000fe1

00000bfc <mdmResp_KhttpCloseHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpCloseHandler(uint8_t* response, uint8_t length)
{
     bfc:	b570      	push	{r4, r5, r6, lr}
	//DEBUG_PRINT("In KHTTP CLOSE handler");

	if(response[0] == 'O')
     bfe:	7803      	ldrb	r3, [r0, #0]
     c00:	2b4f      	cmp	r3, #79	; 0x4f
     c02:	d008      	beq.n	c16 <mdmResp_KhttpCloseHandler+0x1a>
		delay_ms(500);
		mdmCtrlr_FlushRxBuffer();
	}
	else
	{
		DEBUG_PRINT("There is no connection established with this session ID...");
     c04:	4812      	ldr	r0, [pc, #72]	; (c50 <mdmResp_KhttpCloseHandler+0x54>)
     c06:	4c13      	ldr	r4, [pc, #76]	; (c54 <mdmResp_KhttpCloseHandler+0x58>)
     c08:	47a0      	blx	r4
		DEBUG_PRINT("Checking for an active connection with next session ID...\n");
     c0a:	4813      	ldr	r0, [pc, #76]	; (c58 <mdmResp_KhttpCloseHandler+0x5c>)
     c0c:	47a0      	blx	r4
	}

	DEBUG_PRINT("\r\n");
     c0e:	4813      	ldr	r0, [pc, #76]	; (c5c <mdmResp_KhttpCloseHandler+0x60>)
     c10:	4b10      	ldr	r3, [pc, #64]	; (c54 <mdmResp_KhttpCloseHandler+0x58>)
     c12:	4798      	blx	r3
     c14:	bd70      	pop	{r4, r5, r6, pc}
		SerialDebugPrint(response,length);
     c16:	4b12      	ldr	r3, [pc, #72]	; (c60 <mdmResp_KhttpCloseHandler+0x64>)
     c18:	4798      	blx	r3
		DEBUG_PRINT("\r\nClosed an active connection");
     c1a:	4812      	ldr	r0, [pc, #72]	; (c64 <mdmResp_KhttpCloseHandler+0x68>)
     c1c:	4b0d      	ldr	r3, [pc, #52]	; (c54 <mdmResp_KhttpCloseHandler+0x58>)
     c1e:	4798      	blx	r3
		mdmParser_SendCommandToModem(CMD_AT_KCNX_DOWN);
     c20:	2019      	movs	r0, #25
     c22:	4e11      	ldr	r6, [pc, #68]	; (c68 <mdmResp_KhttpCloseHandler+0x6c>)
     c24:	47b0      	blx	r6
		delay_ms(1000);
     c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     c2a:	4c10      	ldr	r4, [pc, #64]	; (c6c <mdmResp_KhttpCloseHandler+0x70>)
     c2c:	47a0      	blx	r4
		mdmParser_ProcessModemResponse();
     c2e:	4d10      	ldr	r5, [pc, #64]	; (c70 <mdmResp_KhttpCloseHandler+0x74>)
     c30:	47a8      	blx	r5
		delay_ms(500);
     c32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     c36:	47a0      	blx	r4
		mdmParser_SendCommandToModem(CMD_AT_CGATT);
     c38:	201a      	movs	r0, #26
     c3a:	47b0      	blx	r6
		delay_ms(1000);
     c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     c40:	47a0      	blx	r4
		mdmParser_ProcessModemResponse();
     c42:	47a8      	blx	r5
		delay_ms(500);
     c44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     c48:	47a0      	blx	r4
		mdmCtrlr_FlushRxBuffer();
     c4a:	4b0a      	ldr	r3, [pc, #40]	; (c74 <mdmResp_KhttpCloseHandler+0x78>)
     c4c:	4798      	blx	r3
     c4e:	e7de      	b.n	c0e <mdmResp_KhttpCloseHandler+0x12>
     c50:	00006840 	.word	0x00006840
     c54:	00001025 	.word	0x00001025
     c58:	0000687c 	.word	0x0000687c
     c5c:	00006a4c 	.word	0x00006a4c
     c60:	00000fe1 	.word	0x00000fe1
     c64:	00006820 	.word	0x00006820
     c68:	000004b9 	.word	0x000004b9
     c6c:	00001b0d 	.word	0x00001b0d
     c70:	00000585 	.word	0x00000585
     c74:	0000083d 	.word	0x0000083d

00000c78 <mdmResp_KPatternHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KPatternHandler(uint8_t* response, uint8_t length)
{
     c78:	b570      	push	{r4, r5, r6, lr}
     c7a:	4605      	mov	r5, r0
     c7c:	460e      	mov	r6, r1
	DEBUG_PRINT("In KPATTERN handler");
     c7e:	4805      	ldr	r0, [pc, #20]	; (c94 <mdmResp_KPatternHandler+0x1c>)
     c80:	4c05      	ldr	r4, [pc, #20]	; (c98 <mdmResp_KPatternHandler+0x20>)
     c82:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     c84:	4631      	mov	r1, r6
     c86:	4628      	mov	r0, r5
     c88:	4b04      	ldr	r3, [pc, #16]	; (c9c <mdmResp_KPatternHandler+0x24>)
     c8a:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     c8c:	4804      	ldr	r0, [pc, #16]	; (ca0 <mdmResp_KPatternHandler+0x28>)
     c8e:	47a0      	blx	r4
     c90:	bd70      	pop	{r4, r5, r6, pc}
     c92:	bf00      	nop
     c94:	000068b8 	.word	0x000068b8
     c98:	00001025 	.word	0x00001025
     c9c:	00000fe1 	.word	0x00000fe1
     ca0:	00006a4c 	.word	0x00006a4c

00000ca4 <mdmResp_KcnxCfgHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KcnxCfgHandler(uint8_t* response, uint8_t length)
{
     ca4:	b570      	push	{r4, r5, r6, lr}
     ca6:	4605      	mov	r5, r0
     ca8:	460e      	mov	r6, r1
	DEBUG_PRINT("In KCNXCFG handler");
     caa:	4805      	ldr	r0, [pc, #20]	; (cc0 <mdmResp_KcnxCfgHandler+0x1c>)
     cac:	4c05      	ldr	r4, [pc, #20]	; (cc4 <mdmResp_KcnxCfgHandler+0x20>)
     cae:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     cb0:	4631      	mov	r1, r6
     cb2:	4628      	mov	r0, r5
     cb4:	4b04      	ldr	r3, [pc, #16]	; (cc8 <mdmResp_KcnxCfgHandler+0x24>)
     cb6:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     cb8:	4804      	ldr	r0, [pc, #16]	; (ccc <mdmResp_KcnxCfgHandler+0x28>)
     cba:	47a0      	blx	r4
     cbc:	bd70      	pop	{r4, r5, r6, pc}
     cbe:	bf00      	nop
     cc0:	000068cc 	.word	0x000068cc
     cc4:	00001025 	.word	0x00001025
     cc8:	00000fe1 	.word	0x00000fe1
     ccc:	00006a4c 	.word	0x00006a4c

00000cd0 <mdmResp_KcnxTimerHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KcnxTimerHandler(uint8_t* response, uint8_t length)
{
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	4605      	mov	r5, r0
     cd4:	460e      	mov	r6, r1
	DEBUG_PRINT("In KCNXTIMER handler");
     cd6:	4805      	ldr	r0, [pc, #20]	; (cec <mdmResp_KcnxTimerHandler+0x1c>)
     cd8:	4c05      	ldr	r4, [pc, #20]	; (cf0 <mdmResp_KcnxTimerHandler+0x20>)
     cda:	47a0      	blx	r4
	SerialDebugPrint(response,length);
     cdc:	4631      	mov	r1, r6
     cde:	4628      	mov	r0, r5
     ce0:	4b04      	ldr	r3, [pc, #16]	; (cf4 <mdmResp_KcnxTimerHandler+0x24>)
     ce2:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     ce4:	4804      	ldr	r0, [pc, #16]	; (cf8 <mdmResp_KcnxTimerHandler+0x28>)
     ce6:	47a0      	blx	r4
     ce8:	bd70      	pop	{r4, r5, r6, pc}
     cea:	bf00      	nop
     cec:	000068e0 	.word	0x000068e0
     cf0:	00001025 	.word	0x00001025
     cf4:	00000fe1 	.word	0x00000fe1
     cf8:	00006a4c 	.word	0x00006a4c

00000cfc <mdmResp_KhttpCfgHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpCfgHandler(uint8_t* response, uint8_t length)
{
     cfc:	b570      	push	{r4, r5, r6, lr}
     cfe:	4604      	mov	r4, r0
     d00:	460e      	mov	r6, r1
	DEBUG_PRINT("In KHTTPCFG handler");
     d02:	4807      	ldr	r0, [pc, #28]	; (d20 <mdmResp_KhttpCfgHandler+0x24>)
     d04:	4d07      	ldr	r5, [pc, #28]	; (d24 <mdmResp_KhttpCfgHandler+0x28>)
     d06:	47a8      	blx	r5
	SerialDebugPrint(response,length);
     d08:	4631      	mov	r1, r6
     d0a:	4620      	mov	r0, r4
     d0c:	4b06      	ldr	r3, [pc, #24]	; (d28 <mdmResp_KhttpCfgHandler+0x2c>)
     d0e:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     d10:	4806      	ldr	r0, [pc, #24]	; (d2c <mdmResp_KhttpCfgHandler+0x30>)
     d12:	47a8      	blx	r5

	sessionID = response[11];
     d14:	4806      	ldr	r0, [pc, #24]	; (d30 <mdmResp_KhttpCfgHandler+0x34>)
     d16:	7ae3      	ldrb	r3, [r4, #11]
     d18:	7003      	strb	r3, [r0, #0]
	mdmParser_SetKhttpHeaderString(&sessionID);
     d1a:	4b06      	ldr	r3, [pc, #24]	; (d34 <mdmResp_KhttpCfgHandler+0x38>)
     d1c:	4798      	blx	r3
     d1e:	bd70      	pop	{r4, r5, r6, pc}
     d20:	000068f8 	.word	0x000068f8
     d24:	00001025 	.word	0x00001025
     d28:	00000fe1 	.word	0x00000fe1
     d2c:	00006a4c 	.word	0x00006a4c
     d30:	200004a8 	.word	0x200004a8
     d34:	00000385 	.word	0x00000385

00000d38 <mdmResp_KhttpHeaderHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpHeaderHandler(uint8_t* response, uint8_t length)
{
     d38:	b570      	push	{r4, r5, r6, lr}
     d3a:	4604      	mov	r4, r0
     d3c:	460e      	mov	r6, r1
	DEBUG_PRINT("In KHTTP HEADER handler");
     d3e:	4814      	ldr	r0, [pc, #80]	; (d90 <mdmResp_KhttpHeaderHandler+0x58>)
     d40:	4d14      	ldr	r5, [pc, #80]	; (d94 <mdmResp_KhttpHeaderHandler+0x5c>)
     d42:	47a8      	blx	r5
	SerialDebugPrint(response,length);
     d44:	4631      	mov	r1, r6
     d46:	4620      	mov	r0, r4
     d48:	4b13      	ldr	r3, [pc, #76]	; (d98 <mdmResp_KhttpHeaderHandler+0x60>)
     d4a:	4798      	blx	r3
	DEBUG_PRINT("\r\n");
     d4c:	4813      	ldr	r0, [pc, #76]	; (d9c <mdmResp_KhttpHeaderHandler+0x64>)
     d4e:	47a8      	blx	r5

	if(0==memcmp(response,"CONNECT",7))
     d50:	2207      	movs	r2, #7
     d52:	4913      	ldr	r1, [pc, #76]	; (da0 <mdmResp_KhttpHeaderHandler+0x68>)
     d54:	4620      	mov	r0, r4
     d56:	4b13      	ldr	r3, [pc, #76]	; (da4 <mdmResp_KhttpHeaderHandler+0x6c>)
     d58:	4798      	blx	r3
     d5a:	b138      	cbz	r0, d6c <mdmResp_KhttpHeaderHandler+0x34>
		mdmCtrlr_FlushRxBuffer();
		dataPacketSentOk = true;
	}
	else
	{
		headerResponseOk = false;
     d5c:	4b12      	ldr	r3, [pc, #72]	; (da8 <mdmResp_KhttpHeaderHandler+0x70>)
     d5e:	2200      	movs	r2, #0
     d60:	705a      	strb	r2, [r3, #1]
		dataPacketSentOk = false;
     d62:	709a      	strb	r2, [r3, #2]
		DEBUG_PRINT("Header Response Not Ok");
     d64:	4811      	ldr	r0, [pc, #68]	; (dac <mdmResp_KhttpHeaderHandler+0x74>)
     d66:	4b0b      	ldr	r3, [pc, #44]	; (d94 <mdmResp_KhttpHeaderHandler+0x5c>)
     d68:	4798      	blx	r3
     d6a:	bd70      	pop	{r4, r5, r6, pc}
		headerResponseOk = true;
     d6c:	4c0e      	ldr	r4, [pc, #56]	; (da8 <mdmResp_KhttpHeaderHandler+0x70>)
     d6e:	2501      	movs	r5, #1
     d70:	7065      	strb	r5, [r4, #1]
		DEBUG_PRINT("Header Response Ok");
     d72:	480f      	ldr	r0, [pc, #60]	; (db0 <mdmResp_KhttpHeaderHandler+0x78>)
     d74:	4b07      	ldr	r3, [pc, #28]	; (d94 <mdmResp_KhttpHeaderHandler+0x5c>)
     d76:	4798      	blx	r3
		mdmCtrlr_SendDataToModem("--EOF--Pattern--",16);
     d78:	2110      	movs	r1, #16
     d7a:	480e      	ldr	r0, [pc, #56]	; (db4 <mdmResp_KhttpHeaderHandler+0x7c>)
     d7c:	4b0e      	ldr	r3, [pc, #56]	; (db8 <mdmResp_KhttpHeaderHandler+0x80>)
     d7e:	4798      	blx	r3
		delay_ms(1000);
     d80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     d84:	4b0d      	ldr	r3, [pc, #52]	; (dbc <mdmResp_KhttpHeaderHandler+0x84>)
     d86:	4798      	blx	r3
		mdmCtrlr_FlushRxBuffer();
     d88:	4b0d      	ldr	r3, [pc, #52]	; (dc0 <mdmResp_KhttpHeaderHandler+0x88>)
     d8a:	4798      	blx	r3
		dataPacketSentOk = true;
     d8c:	70a5      	strb	r5, [r4, #2]
     d8e:	bd70      	pop	{r4, r5, r6, pc}
     d90:	0000690c 	.word	0x0000690c
     d94:	00001025 	.word	0x00001025
     d98:	00000fe1 	.word	0x00000fe1
     d9c:	00006a4c 	.word	0x00006a4c
     da0:	00006924 	.word	0x00006924
     da4:	00005489 	.word	0x00005489
     da8:	200004a8 	.word	0x200004a8
     dac:	00006940 	.word	0x00006940
     db0:	0000692c 	.word	0x0000692c
     db4:	000065e8 	.word	0x000065e8
     db8:	000007c1 	.word	0x000007c1
     dbc:	00001b0d 	.word	0x00001b0d
     dc0:	0000083d 	.word	0x0000083d

00000dc4 <mdmResp_KhttpGetHandler>:
**
** Description:        Gets the parsed modem response
**
**===========================================================================*/
void mdmResp_KhttpGetHandler(uint8_t* response, uint8_t length)
{
     dc4:	b508      	push	{r3, lr}
	DEBUG_PRINT("\r\n\n");
     dc6:	4803      	ldr	r0, [pc, #12]	; (dd4 <mdmResp_KhttpGetHandler+0x10>)
     dc8:	4b03      	ldr	r3, [pc, #12]	; (dd8 <mdmResp_KhttpGetHandler+0x14>)
     dca:	4798      	blx	r3
	//SerialDebugPrint(response,length);
	dataPacketSentOk = true;
     dcc:	2201      	movs	r2, #1
     dce:	4b03      	ldr	r3, [pc, #12]	; (ddc <mdmResp_KhttpGetHandler+0x18>)
     dd0:	709a      	strb	r2, [r3, #2]
     dd2:	bd08      	pop	{r3, pc}
     dd4:	00006958 	.word	0x00006958
     dd8:	00001025 	.word	0x00001025
     ddc:	200004a8 	.word	0x200004a8

00000de0 <ModemRxTask>:
#include "Apps/Tasks/ModemTask/include/ModemCmdParser.h"

static uint8_t responseDataBuffer[MAX_RESPONSE_SIZE];

void ModemRxTask( void *ModemTaskParam)
{
     de0:	b5f0      	push	{r4, r5, r6, r7, lr}
     de2:	b087      	sub	sp, #28

	while(1)
	{
		/* Wait to receive a notification sent directly to this task from the
		interrupt handler. */
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
     de4:	4e18      	ldr	r6, [pc, #96]	; (e48 <ModemRxTask+0x68>)
		getModemCommandData(atCmd, &cmdData);
     de6:	4d19      	ldr	r5, [pc, #100]	; (e4c <ModemRxTask+0x6c>)
		else
		{
			/* If this part of the function is reached then an interrupt did not
			arrive within the expected time, and (in a real application) it may
			be necessary to perform some error recovery operations. */
			DEBUG_PRINT("Notification Not Received to Rx Task");
     de8:	4f19      	ldr	r7, [pc, #100]	; (e50 <ModemRxTask+0x70>)
     dea:	e017      	b.n	e1c <ModemRxTask+0x3c>
			DEBUG_PRINT("Notification Received to Rx Task");
     dec:	4819      	ldr	r0, [pc, #100]	; (e54 <ModemRxTask+0x74>)
     dee:	4b1a      	ldr	r3, [pc, #104]	; (e58 <ModemRxTask+0x78>)
     df0:	4798      	blx	r3
			ConsoleDebugPrint("Response length",cmdData.ResponseLength);
     df2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
     df6:	4819      	ldr	r0, [pc, #100]	; (e5c <ModemRxTask+0x7c>)
     df8:	4b19      	ldr	r3, [pc, #100]	; (e60 <ModemRxTask+0x80>)
     dfa:	4798      	blx	r3
			if(false != mdmParser_solicitedCmdParser(cmdData.AtCmd,responseDataBuffer))
     dfc:	4919      	ldr	r1, [pc, #100]	; (e64 <ModemRxTask+0x84>)
     dfe:	f89d 0000 	ldrb.w	r0, [sp]
     e02:	4b19      	ldr	r3, [pc, #100]	; (e68 <ModemRxTask+0x88>)
     e04:	4798      	blx	r3
     e06:	b1d8      	cbz	r0, e40 <ModemRxTask+0x60>
				cmdData.respHandler(responseDataBuffer,cmdData.validDataCnt);
     e08:	f89d 100a 	ldrb.w	r1, [sp, #10]
     e0c:	4815      	ldr	r0, [pc, #84]	; (e64 <ModemRxTask+0x84>)
     e0e:	9b03      	ldr	r3, [sp, #12]
     e10:	4798      	blx	r3
				mdmParser_SetLastCmdProcessed(true);
     e12:	2001      	movs	r0, #1
     e14:	4b15      	ldr	r3, [pc, #84]	; (e6c <ModemRxTask+0x8c>)
     e16:	4798      	blx	r3
		}
		kickWatchDog();
     e18:	4b15      	ldr	r3, [pc, #84]	; (e70 <ModemRxTask+0x90>)
     e1a:	4798      	blx	r3
		xResult = xTaskNotifyWait(0,ULONG_MAX,&atCmd,portMAX_DELAY);
     e1c:	f04f 33ff 	mov.w	r3, #4294967295
     e20:	f10d 0217 	add.w	r2, sp, #23
     e24:	4619      	mov	r1, r3
     e26:	2000      	movs	r0, #0
     e28:	47b0      	blx	r6
     e2a:	4604      	mov	r4, r0
		getModemCommandData(atCmd, &cmdData);
     e2c:	4669      	mov	r1, sp
     e2e:	f89d 0017 	ldrb.w	r0, [sp, #23]
     e32:	47a8      	blx	r5
		if(xResult == pdPASS)
     e34:	2c01      	cmp	r4, #1
     e36:	d0d9      	beq.n	dec <ModemRxTask+0xc>
			DEBUG_PRINT("Notification Not Received to Rx Task");
     e38:	4638      	mov	r0, r7
     e3a:	4b07      	ldr	r3, [pc, #28]	; (e58 <ModemRxTask+0x78>)
     e3c:	4798      	blx	r3
     e3e:	e7eb      	b.n	e18 <ModemRxTask+0x38>
				DEBUG_PRINT("Outside solicited parser");
     e40:	480c      	ldr	r0, [pc, #48]	; (e74 <ModemRxTask+0x94>)
     e42:	4b05      	ldr	r3, [pc, #20]	; (e58 <ModemRxTask+0x78>)
     e44:	4798      	blx	r3
     e46:	e7e7      	b.n	e18 <ModemRxTask+0x38>
     e48:	00004ea1 	.word	0x00004ea1
     e4c:	00000365 	.word	0x00000365
     e50:	000069c8 	.word	0x000069c8
     e54:	00006978 	.word	0x00006978
     e58:	00001025 	.word	0x00001025
     e5c:	0000699c 	.word	0x0000699c
     e60:	0000106d 	.word	0x0000106d
     e64:	200004ac 	.word	0x200004ac
     e68:	00000511 	.word	0x00000511
     e6c:	00000661 	.word	0x00000661
     e70:	000011a1 	.word	0x000011a1
     e74:	000069ac 	.word	0x000069ac

00000e78 <ModemTxTask>:
*
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
void ModemTxTask( void *ModemTaskParam)
{
     e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e7c:	b086      	sub	sp, #24
	const TickType_t xDelayMs = pdMS_TO_TICKS(1000UL);
	xSemaphoreGive(AtTxQueueLoadSemaphore);
     e7e:	2300      	movs	r3, #0
     e80:	461a      	mov	r2, r3
     e82:	4619      	mov	r1, r3
     e84:	4822      	ldr	r0, [pc, #136]	; (f10 <ModemTxTask+0x98>)
     e86:	6800      	ldr	r0, [r0, #0]
     e88:	4c22      	ldr	r4, [pc, #136]	; (f14 <ModemTxTask+0x9c>)
     e8a:	47a0      	blx	r4
	while(1)
	{
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     e8c:	4c22      	ldr	r4, [pc, #136]	; (f18 <ModemTxTask+0xa0>)
* DESCRIPTION: Gets the current Modem Power State.
*
********************************************************************************/
static void ModemTxTaskSchedule(void)
{
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     e8e:	4d23      	ldr	r5, [pc, #140]	; (f1c <ModemTxTask+0xa4>)
     e90:	4e23      	ldr	r6, [pc, #140]	; (f20 <ModemTxTask+0xa8>)
     e92:	e005      	b.n	ea0 <ModemTxTask+0x28>
			kickWatchDog();
     e94:	4b23      	ldr	r3, [pc, #140]	; (f24 <ModemTxTask+0xac>)
     e96:	4798      	blx	r3
			vTaskDelay(xDelayMs);
     e98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     e9c:	4b22      	ldr	r3, [pc, #136]	; (f28 <ModemTxTask+0xb0>)
     e9e:	4798      	blx	r3
		if(getModemPowerStatus() == MDM_PWR_OPERATIONAL_READY_FOR_AT_CMDS)
     ea0:	47a0      	blx	r4
     ea2:	2804      	cmp	r0, #4
     ea4:	d1fc      	bne.n	ea0 <ModemTxTask+0x28>
	if (uxQueueMessagesWaiting(AtTransmitQueue) != 0)
     ea6:	6828      	ldr	r0, [r5, #0]
     ea8:	47b0      	blx	r6
     eaa:	2800      	cmp	r0, #0
     eac:	d0f2      	beq.n	e94 <ModemTxTask+0x1c>
	{
		if(pdPASS == xSemaphoreTake(AtTxQueueLoadSemaphore, 0))
     eae:	2100      	movs	r1, #0
     eb0:	4b17      	ldr	r3, [pc, #92]	; (f10 <ModemTxTask+0x98>)
     eb2:	6818      	ldr	r0, [r3, #0]
     eb4:	4b1d      	ldr	r3, [pc, #116]	; (f2c <ModemTxTask+0xb4>)
     eb6:	4798      	blx	r3
     eb8:	2801      	cmp	r0, #1
     eba:	d1eb      	bne.n	e94 <ModemTxTask+0x1c>
		{
			xQueueReceive( AtTransmitQueue, &AtTxQueueReceivedData, portMAX_DELAY );
     ebc:	4f1c      	ldr	r7, [pc, #112]	; (f30 <ModemTxTask+0xb8>)
     ebe:	f04f 32ff 	mov.w	r2, #4294967295
     ec2:	4639      	mov	r1, r7
     ec4:	6828      	ldr	r0, [r5, #0]
     ec6:	4b1b      	ldr	r3, [pc, #108]	; (f34 <ModemTxTask+0xbc>)
     ec8:	4798      	blx	r3
			ModemTx_SendCommandToModem(AtTxQueueReceivedData.atCmd);
     eca:	f897 8001 	ldrb.w	r8, [r7, #1]
**
**===========================================================================*/
static void ModemTx_SendCommandToModem(AT_CMD_TYPE atCmd)
{
	MODEM_CMD_DATA ModemCmdData;
	getModemCommandData(atCmd, &ModemCmdData);
     ece:	a901      	add	r1, sp, #4
     ed0:	4640      	mov	r0, r8
     ed2:	4b19      	ldr	r3, [pc, #100]	; (f38 <ModemTxTask+0xc0>)
     ed4:	4798      	blx	r3
	mdmCtrlr_FlushRxBuffer();
     ed6:	4b19      	ldr	r3, [pc, #100]	; (f3c <ModemTxTask+0xc4>)
     ed8:	4798      	blx	r3
	mdmCtrlr_SendDataToModem(ModemCmdData.AtString,ModemCmdData.CmdLength);
     eda:	f89d 100c 	ldrb.w	r1, [sp, #12]
     ede:	9802      	ldr	r0, [sp, #8]
     ee0:	4b17      	ldr	r3, [pc, #92]	; (f40 <ModemTxTask+0xc8>)
     ee2:	4798      	blx	r3
	mdmParser_SetLastSentAtCommand(atCmd);
     ee4:	4640      	mov	r0, r8
     ee6:	4b17      	ldr	r3, [pc, #92]	; (f44 <ModemTxTask+0xcc>)
     ee8:	4798      	blx	r3
	mdmParser_SetLastCmdProcessed(false);
     eea:	2000      	movs	r0, #0
     eec:	4b16      	ldr	r3, [pc, #88]	; (f48 <ModemTxTask+0xd0>)
     eee:	4798      	blx	r3
			ConsoleDebugPrint("Task ID",AtTxQueueReceivedData.taskID);
     ef0:	7839      	ldrb	r1, [r7, #0]
     ef2:	4816      	ldr	r0, [pc, #88]	; (f4c <ModemTxTask+0xd4>)
     ef4:	4b16      	ldr	r3, [pc, #88]	; (f50 <ModemTxTask+0xd8>)
     ef6:	4798      	blx	r3
			DEBUG_PRINT("Transmitted a command to Modem");
     ef8:	4816      	ldr	r0, [pc, #88]	; (f54 <ModemTxTask+0xdc>)
     efa:	4b17      	ldr	r3, [pc, #92]	; (f58 <ModemTxTask+0xe0>)
     efc:	4798      	blx	r3
			xSemaphoreGive(AtTxQueueLoadSemaphore);
     efe:	2300      	movs	r3, #0
     f00:	461a      	mov	r2, r3
     f02:	4619      	mov	r1, r3
     f04:	4802      	ldr	r0, [pc, #8]	; (f10 <ModemTxTask+0x98>)
     f06:	6800      	ldr	r0, [r0, #0]
     f08:	4f02      	ldr	r7, [pc, #8]	; (f14 <ModemTxTask+0x9c>)
     f0a:	47b8      	blx	r7
     f0c:	e7c2      	b.n	e94 <ModemTxTask+0x1c>
     f0e:	bf00      	nop
     f10:	20002ab8 	.word	0x20002ab8
     f14:	00003c91 	.word	0x00003c91
     f18:	000009cd 	.word	0x000009cd
     f1c:	20002ab4 	.word	0x20002ab4
     f20:	000042dd 	.word	0x000042dd
     f24:	000011a1 	.word	0x000011a1
     f28:	000049a1 	.word	0x000049a1
     f2c:	000040fd 	.word	0x000040fd
     f30:	20000768 	.word	0x20000768
     f34:	00003f75 	.word	0x00003f75
     f38:	00000365 	.word	0x00000365
     f3c:	0000083d 	.word	0x0000083d
     f40:	000007c1 	.word	0x000007c1
     f44:	0000066d 	.word	0x0000066d
     f48:	00000661 	.word	0x00000661
     f4c:	000069f0 	.word	0x000069f0
     f50:	0000106d 	.word	0x0000106d
     f54:	000069f8 	.word	0x000069f8
     f58:	00001025 	.word	0x00001025

00000f5c <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f60:	4604      	mov	r4, r0
     f62:	460e      	mov	r6, r1
     f64:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     f66:	4d0e      	ldr	r5, [pc, #56]	; (fa0 <usart_async_write+0x44>)
     f68:	4620      	mov	r0, r4
     f6a:	47a8      	blx	r5
     f6c:	2800      	cmp	r0, #0
     f6e:	d0fb      	beq.n	f68 <usart_async_write+0xc>
     f70:	3e01      	subs	r6, #1
     f72:	f8df 8030 	ldr.w	r8, [pc, #48]	; fa4 <usart_async_write+0x48>
     f76:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     f78:	f8df a02c 	ldr.w	sl, [pc, #44]	; fa8 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     f7c:	4d08      	ldr	r5, [pc, #32]	; (fa0 <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     f7e:	7873      	ldrb	r3, [r6, #1]
     f80:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     f84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     f88:	4620      	mov	r0, r4
     f8a:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     f8c:	4620      	mov	r0, r4
     f8e:	47a8      	blx	r5
     f90:	2800      	cmp	r0, #0
     f92:	d0fb      	beq.n	f8c <usart_async_write+0x30>
		;
	} while (++offset < length);
     f94:	3701      	adds	r7, #1
     f96:	454f      	cmp	r7, r9
     f98:	d3f1      	bcc.n	f7e <usart_async_write+0x22>

	return (int32_t)offset;
}
     f9a:	4638      	mov	r0, r7
     f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     fa0:	0000287b 	.word	0x0000287b
     fa4:	20000770 	.word	0x20000770
     fa8:	0000286d 	.word	0x0000286d

00000fac <SerialDebugTxByteSentCallBack>:
     fac:	2302      	movs	r3, #2
     fae:	7603      	strb	r3, [r0, #24]
     fb0:	4770      	bx	lr

00000fb2 <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     fb2:	2380      	movs	r3, #128	; 0x80
     fb4:	7603      	strb	r3, [r0, #24]
     fb6:	4770      	bx	lr

00000fb8 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     fb8:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&SERIAL_DEBUG_PRINT,SERCOM5);
     fba:	4c05      	ldr	r4, [pc, #20]	; (fd0 <SerialDebugPrintInit+0x18>)
     fbc:	4905      	ldr	r1, [pc, #20]	; (fd4 <SerialDebugPrintInit+0x1c>)
     fbe:	4620      	mov	r0, r4
     fc0:	4b05      	ldr	r3, [pc, #20]	; (fd8 <SerialDebugPrintInit+0x20>)
     fc2:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&SERIAL_DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     fc4:	2201      	movs	r2, #1
     fc6:	4611      	mov	r1, r2
     fc8:	4620      	mov	r0, r4
     fca:	4b04      	ldr	r3, [pc, #16]	; (fdc <SerialDebugPrintInit+0x24>)
     fcc:	4798      	blx	r3
     fce:	bd10      	pop	{r4, pc}
     fd0:	20000044 	.word	0x20000044
     fd4:	43000400 	.word	0x43000400
     fd8:	000027e5 	.word	0x000027e5
     fdc:	00002891 	.word	0x00002891

00000fe0 <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     fe0:	b570      	push	{r4, r5, r6, lr}
     fe2:	4605      	mov	r5, r0
     fe4:	460e      	mov	r6, r1
	_usart_async_enable(&SERIAL_DEBUG_PRINT);
     fe6:	4c05      	ldr	r4, [pc, #20]	; (ffc <SerialDebugPrint+0x1c>)
     fe8:	4620      	mov	r0, r4
     fea:	4b05      	ldr	r3, [pc, #20]	; (1000 <SerialDebugPrint+0x20>)
     fec:	4798      	blx	r3
	
	usart_async_write(&SERIAL_DEBUG_PRINT, dataToPrint, length);
     fee:	4632      	mov	r2, r6
     ff0:	4629      	mov	r1, r5
     ff2:	4620      	mov	r0, r4
     ff4:	4b03      	ldr	r3, [pc, #12]	; (1004 <SerialDebugPrint+0x24>)
     ff6:	4798      	blx	r3
     ff8:	bd70      	pop	{r4, r5, r6, pc}
     ffa:	bf00      	nop
     ffc:	20000044 	.word	0x20000044
    1000:	00002859 	.word	0x00002859
    1004:	00000f5d 	.word	0x00000f5d

00001008 <SerialDebugTxDoneCallBack>:
{
    1008:	b510      	push	{r4, lr}
    100a:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
    100c:	2116      	movs	r1, #22
    100e:	4803      	ldr	r0, [pc, #12]	; (101c <SerialDebugTxDoneCallBack+0x14>)
    1010:	4b03      	ldr	r3, [pc, #12]	; (1020 <SerialDebugTxDoneCallBack+0x18>)
    1012:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
    1014:	2301      	movs	r3, #1
    1016:	7623      	strb	r3, [r4, #24]
    1018:	bd10      	pop	{r4, pc}
    101a:	bf00      	nop
    101c:	00006a18 	.word	0x00006a18
    1020:	00000fe1 	.word	0x00000fe1

00001024 <SerialStringPrint>:
}


void SerialStringPrint(const uint8_t *const dataToPrint)
{
    1024:	b510      	push	{r4, lr}
    1026:	b09a      	sub	sp, #104	; 0x68
    1028:	4604      	mov	r4, r0
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
    102a:	2264      	movs	r2, #100	; 0x64
    102c:	2100      	movs	r1, #0
    102e:	a801      	add	r0, sp, #4
    1030:	4b08      	ldr	r3, [pc, #32]	; (1054 <SerialStringPrint+0x30>)
    1032:	4798      	blx	r3
	sprintf((int8_t*)dbgBuffer,"%s %s",dataToPrint,"\r\n");
    1034:	4b08      	ldr	r3, [pc, #32]	; (1058 <SerialStringPrint+0x34>)
    1036:	4622      	mov	r2, r4
    1038:	4908      	ldr	r1, [pc, #32]	; (105c <SerialStringPrint+0x38>)
    103a:	a801      	add	r0, sp, #4
    103c:	4c08      	ldr	r4, [pc, #32]	; (1060 <SerialStringPrint+0x3c>)
    103e:	47a0      	blx	r4
	SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    1040:	a801      	add	r0, sp, #4
    1042:	4b08      	ldr	r3, [pc, #32]	; (1064 <SerialStringPrint+0x40>)
    1044:	4798      	blx	r3
    1046:	b281      	uxth	r1, r0
    1048:	a801      	add	r0, sp, #4
    104a:	4b07      	ldr	r3, [pc, #28]	; (1068 <SerialStringPrint+0x44>)
    104c:	4798      	blx	r3
}
    104e:	b01a      	add	sp, #104	; 0x68
    1050:	bd10      	pop	{r4, pc}
    1052:	bf00      	nop
    1054:	000054f1 	.word	0x000054f1
    1058:	00006a4c 	.word	0x00006a4c
    105c:	00006a3c 	.word	0x00006a3c
    1060:	00005679 	.word	0x00005679
    1064:	000056d1 	.word	0x000056d1
    1068:	00000fe1 	.word	0x00000fe1

0000106c <ConsoleDebugPrint>:

void ConsoleDebugPrint(const uint8_t *const txt, uint32_t intData)
{
    106c:	b530      	push	{r4, r5, lr}
    106e:	b09b      	sub	sp, #108	; 0x6c
    1070:	4605      	mov	r5, r0
    1072:	460c      	mov	r4, r1
	uint8_t dbgBuffer[100];
	memset(dbgBuffer,'\0',100);
    1074:	2264      	movs	r2, #100	; 0x64
    1076:	2100      	movs	r1, #0
    1078:	a801      	add	r0, sp, #4
    107a:	4b09      	ldr	r3, [pc, #36]	; (10a0 <ConsoleDebugPrint+0x34>)
    107c:	4798      	blx	r3

	if(intData != 0)
    107e:	b90c      	cbnz	r4, 1084 <ConsoleDebugPrint+0x18>
	{
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
	}
}
    1080:	b01b      	add	sp, #108	; 0x6c
    1082:	bd30      	pop	{r4, r5, pc}
		sprintf((int8_t*)dbgBuffer,"%s - %d \r\n",txt,intData);
    1084:	4623      	mov	r3, r4
    1086:	462a      	mov	r2, r5
    1088:	4906      	ldr	r1, [pc, #24]	; (10a4 <ConsoleDebugPrint+0x38>)
    108a:	a801      	add	r0, sp, #4
    108c:	4c06      	ldr	r4, [pc, #24]	; (10a8 <ConsoleDebugPrint+0x3c>)
    108e:	47a0      	blx	r4
		SerialDebugPrint(dbgBuffer,strlen(dbgBuffer));
    1090:	a801      	add	r0, sp, #4
    1092:	4b06      	ldr	r3, [pc, #24]	; (10ac <ConsoleDebugPrint+0x40>)
    1094:	4798      	blx	r3
    1096:	b281      	uxth	r1, r0
    1098:	a801      	add	r0, sp, #4
    109a:	4b05      	ldr	r3, [pc, #20]	; (10b0 <ConsoleDebugPrint+0x44>)
    109c:	4798      	blx	r3
}
    109e:	e7ef      	b.n	1080 <ConsoleDebugPrint+0x14>
    10a0:	000054f1 	.word	0x000054f1
    10a4:	00006a44 	.word	0x00006a44
    10a8:	00005679 	.word	0x00005679
    10ac:	000056d1 	.word	0x000056d1
    10b0:	00000fe1 	.word	0x00000fe1

000010b4 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
    10b4:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
    10b6:	2204      	movs	r2, #4
    10b8:	4b0b      	ldr	r3, [pc, #44]	; (10e8 <SERCOM5_2_Handler+0x34>)
    10ba:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&SERIAL_DEBUG_PRINT));
    10bc:	4d0b      	ldr	r5, [pc, #44]	; (10ec <SERCOM5_2_Handler+0x38>)
    10be:	4c0c      	ldr	r4, [pc, #48]	; (10f0 <SERCOM5_2_Handler+0x3c>)
    10c0:	4628      	mov	r0, r5
    10c2:	47a0      	blx	r4
    10c4:	2800      	cmp	r0, #0
    10c6:	d0fb      	beq.n	10c0 <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&SERIAL_DEBUG_PRINT);
    10c8:	4808      	ldr	r0, [pc, #32]	; (10ec <SERCOM5_2_Handler+0x38>)
    10ca:	4b0a      	ldr	r3, [pc, #40]	; (10f4 <SERCOM5_2_Handler+0x40>)
    10cc:	4798      	blx	r3
    10ce:	490a      	ldr	r1, [pc, #40]	; (10f8 <SERCOM5_2_Handler+0x44>)
    10d0:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
    10d2:	2300      	movs	r3, #0
    10d4:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
    10d6:	4c09      	ldr	r4, [pc, #36]	; (10fc <SERCOM5_2_Handler+0x48>)
    10d8:	4620      	mov	r0, r4
    10da:	4b09      	ldr	r3, [pc, #36]	; (1100 <SERCOM5_2_Handler+0x4c>)
    10dc:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
    10de:	2105      	movs	r1, #5
    10e0:	4620      	mov	r0, r4
    10e2:	4b08      	ldr	r3, [pc, #32]	; (1104 <SERCOM5_2_Handler+0x50>)
    10e4:	4798      	blx	r3
    10e6:	bd38      	pop	{r3, r4, r5, pc}
    10e8:	43000400 	.word	0x43000400
    10ec:	20000044 	.word	0x20000044
    10f0:	00002885 	.word	0x00002885
    10f4:	00002873 	.word	0x00002873
    10f8:	200032d8 	.word	0x200032d8
    10fc:	200032dc 	.word	0x200032dc
    1100:	000056c1 	.word	0x000056c1
    1104:	00000fe1 	.word	0x00000fe1

00001108 <configureWatchDogTimeOut>:
*
* DESCRIPTION: Configure the system watch dog timout.
*
********************************************************************************/
void configureWatchDogTimeOut(WDT_TIMEOUT_TYPE type)
{
    1108:	b538      	push	{r3, r4, r5, lr}
	int32_t cfgstatus;
	
	cfgstatus =  wdt_set_timeout_period(&WDT_0, WDT_FREQ, cfgSystemWdt[type].timeOutValue);
    110a:	4b0a      	ldr	r3, [pc, #40]	; (1134 <configureWatchDogTimeOut+0x2c>)
    110c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1110:	8845      	ldrh	r5, [r0, #2]
 * \retval -2 Invalid timeout period.
 */
static inline int32_t wdt_set_timeout_period(struct wdt_descriptor *const wdt, const uint32_t clk_rate,
                                             const uint16_t timeout_period)
{
	ASSERT(wdt && wdt->dev.hw);
    1112:	4c09      	ldr	r4, [pc, #36]	; (1138 <configureWatchDogTimeOut+0x30>)
    1114:	6820      	ldr	r0, [r4, #0]
    1116:	2279      	movs	r2, #121	; 0x79
    1118:	4908      	ldr	r1, [pc, #32]	; (113c <configureWatchDogTimeOut+0x34>)
    111a:	3000      	adds	r0, #0
    111c:	bf18      	it	ne
    111e:	2001      	movne	r0, #1
    1120:	4b07      	ldr	r3, [pc, #28]	; (1140 <configureWatchDogTimeOut+0x38>)
    1122:	4798      	blx	r3

	return _wdt_set_timeout_period(&wdt->dev, clk_rate, timeout_period);
    1124:	462a      	mov	r2, r5
    1126:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    112a:	4620      	mov	r0, r4
    112c:	4b05      	ldr	r3, [pc, #20]	; (1144 <configureWatchDogTimeOut+0x3c>)
    112e:	4798      	blx	r3
    1130:	bd38      	pop	{r3, r4, r5, pc}
    1132:	bf00      	nop
    1134:	20000060 	.word	0x20000060
    1138:	200033b8 	.word	0x200033b8
    113c:	00006a50 	.word	0x00006a50
    1140:	00001d65 	.word	0x00001d65
    1144:	00003231 	.word	0x00003231

00001148 <enableWatchDogTimer>:
*
* DESCRIPTION: Enable the WDT
*
********************************************************************************/
void enableWatchDogTimer(void)
{
    1148:	b510      	push	{r4, lr}
	configureWatchDogTimeOut(WDT_TIMEOUT_DELAYED);
    114a:	2002      	movs	r0, #2
    114c:	4b07      	ldr	r3, [pc, #28]	; (116c <enableWatchDogTimer+0x24>)
    114e:	4798      	blx	r3
 * \return Operation status of init
 * \retval 0  Completed sucessfully.
 */
static inline int32_t wdt_enable(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    1150:	4c07      	ldr	r4, [pc, #28]	; (1170 <enableWatchDogTimer+0x28>)
    1152:	6820      	ldr	r0, [r4, #0]
    1154:	2296      	movs	r2, #150	; 0x96
    1156:	4907      	ldr	r1, [pc, #28]	; (1174 <enableWatchDogTimer+0x2c>)
    1158:	3000      	adds	r0, #0
    115a:	bf18      	it	ne
    115c:	2001      	movne	r0, #1
    115e:	4b06      	ldr	r3, [pc, #24]	; (1178 <enableWatchDogTimer+0x30>)
    1160:	4798      	blx	r3

	return _wdt_enable(&wdt->dev);
    1162:	4620      	mov	r0, r4
    1164:	4b05      	ldr	r3, [pc, #20]	; (117c <enableWatchDogTimer+0x34>)
    1166:	4798      	blx	r3
    1168:	bd10      	pop	{r4, pc}
    116a:	bf00      	nop
    116c:	00001109 	.word	0x00001109
    1170:	200033b8 	.word	0x200033b8
    1174:	00006a50 	.word	0x00006a50
    1178:	00001d65 	.word	0x00001d65
    117c:	0000334d 	.word	0x0000334d

00001180 <atmel_start_init>:
{
    1180:	b508      	push	{r3, lr}
    system_init();
    1182:	4b04      	ldr	r3, [pc, #16]	; (1194 <atmel_start_init+0x14>)
    1184:	4798      	blx	r3
    delay_ms(1000);
    1186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    118a:	4b03      	ldr	r3, [pc, #12]	; (1198 <atmel_start_init+0x18>)
    118c:	4798      	blx	r3
    enableWatchDogTimer();
    118e:	4b03      	ldr	r3, [pc, #12]	; (119c <atmel_start_init+0x1c>)
    1190:	4798      	blx	r3
    1192:	bd08      	pop	{r3, pc}
    1194:	0000191d 	.word	0x0000191d
    1198:	00001b0d 	.word	0x00001b0d
    119c:	00001149 	.word	0x00001149

000011a0 <kickWatchDog>:
*
* DESCRIPTION: Restart the WDT
*
********************************************************************************/
int32_t kickWatchDog(void)
{	
    11a0:	b510      	push	{r4, lr}
 * \return Operation status of init
 * \retval 0 Completed sucessfully.
 */
static inline int32_t wdt_feed(struct wdt_descriptor *const wdt)
{
	ASSERT(wdt && wdt->dev.hw);
    11a2:	4c06      	ldr	r4, [pc, #24]	; (11bc <kickWatchDog+0x1c>)
    11a4:	6820      	ldr	r0, [r4, #0]
    11a6:	22b3      	movs	r2, #179	; 0xb3
    11a8:	4905      	ldr	r1, [pc, #20]	; (11c0 <kickWatchDog+0x20>)
    11aa:	3000      	adds	r0, #0
    11ac:	bf18      	it	ne
    11ae:	2001      	movne	r0, #1
    11b0:	4b04      	ldr	r3, [pc, #16]	; (11c4 <kickWatchDog+0x24>)
    11b2:	4798      	blx	r3

	return _wdt_feed(&wdt->dev);
    11b4:	4620      	mov	r0, r4
    11b6:	4b04      	ldr	r3, [pc, #16]	; (11c8 <kickWatchDog+0x28>)
    11b8:	4798      	blx	r3
		status = ERR_DENIED;
		//DEBUG_PRINT("Not able to Kick WDT");
	}

	return status;
}
    11ba:	bd10      	pop	{r4, pc}
    11bc:	200033b8 	.word	0x200033b8
    11c0:	00006a50 	.word	0x00006a50
    11c4:	00001d65 	.word	0x00001d65
    11c8:	00003389 	.word	0x00003389

000011cc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    11cc:	e7fe      	b.n	11cc <Dummy_Handler>
	...

000011d0 <Reset_Handler>:
{
    11d0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
    11d2:	4b1c      	ldr	r3, [pc, #112]	; (1244 <Reset_Handler+0x74>)
    11d4:	4a1c      	ldr	r2, [pc, #112]	; (1248 <Reset_Handler+0x78>)
    11d6:	429a      	cmp	r2, r3
    11d8:	d010      	beq.n	11fc <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
    11da:	4b1c      	ldr	r3, [pc, #112]	; (124c <Reset_Handler+0x7c>)
    11dc:	4a19      	ldr	r2, [pc, #100]	; (1244 <Reset_Handler+0x74>)
    11de:	429a      	cmp	r2, r3
    11e0:	d20c      	bcs.n	11fc <Reset_Handler+0x2c>
    11e2:	3b01      	subs	r3, #1
    11e4:	1a9b      	subs	r3, r3, r2
    11e6:	f023 0303 	bic.w	r3, r3, #3
    11ea:	3304      	adds	r3, #4
    11ec:	4413      	add	r3, r2
    11ee:	4916      	ldr	r1, [pc, #88]	; (1248 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
    11f0:	f851 0b04 	ldr.w	r0, [r1], #4
    11f4:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
    11f8:	429a      	cmp	r2, r3
    11fa:	d1f9      	bne.n	11f0 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
    11fc:	4b14      	ldr	r3, [pc, #80]	; (1250 <Reset_Handler+0x80>)
    11fe:	4a15      	ldr	r2, [pc, #84]	; (1254 <Reset_Handler+0x84>)
    1200:	429a      	cmp	r2, r3
    1202:	d20a      	bcs.n	121a <Reset_Handler+0x4a>
    1204:	3b01      	subs	r3, #1
    1206:	1a9b      	subs	r3, r3, r2
    1208:	f023 0303 	bic.w	r3, r3, #3
    120c:	3304      	adds	r3, #4
    120e:	4413      	add	r3, r2
                *pDest++ = 0;
    1210:	2100      	movs	r1, #0
    1212:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
    1216:	4293      	cmp	r3, r2
    1218:	d1fb      	bne.n	1212 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    121a:	4b0f      	ldr	r3, [pc, #60]	; (1258 <Reset_Handler+0x88>)
    121c:	4a0f      	ldr	r2, [pc, #60]	; (125c <Reset_Handler+0x8c>)
    121e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1222:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
    1224:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1228:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    122c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1230:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1234:	f3bf 8f6f 	isb	sy
        __libc_init_array();
    1238:	4b09      	ldr	r3, [pc, #36]	; (1260 <Reset_Handler+0x90>)
    123a:	4798      	blx	r3
        main();
    123c:	4b09      	ldr	r3, [pc, #36]	; (1264 <Reset_Handler+0x94>)
    123e:	4798      	blx	r3
    1240:	e7fe      	b.n	1240 <Reset_Handler+0x70>
    1242:	bf00      	nop
    1244:	20000000 	.word	0x20000000
    1248:	0000719c 	.word	0x0000719c
    124c:	2000018c 	.word	0x2000018c
    1250:	200034a4 	.word	0x200034a4
    1254:	20000190 	.word	0x20000190
    1258:	e000ed00 	.word	0xe000ed00
    125c:	00000000 	.word	0x00000000
    1260:	00005441 	.word	0x00005441
    1264:	00003415 	.word	0x00003415

00001268 <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
    1268:	4a04      	ldr	r2, [pc, #16]	; (127c <AC_0_CLOCK_init+0x14>)
    126a:	69d3      	ldr	r3, [r2, #28]
    126c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1270:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    1272:	2240      	movs	r2, #64	; 0x40
    1274:	4b02      	ldr	r3, [pc, #8]	; (1280 <AC_0_CLOCK_init+0x18>)
    1276:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    127a:	4770      	bx	lr
    127c:	40000800 	.word	0x40000800
    1280:	40001c00 	.word	0x40001c00

00001284 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
    1284:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
    1286:	4b03      	ldr	r3, [pc, #12]	; (1294 <AC_0_init+0x10>)
    1288:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
    128a:	4903      	ldr	r1, [pc, #12]	; (1298 <AC_0_init+0x14>)
    128c:	4803      	ldr	r0, [pc, #12]	; (129c <AC_0_init+0x18>)
    128e:	4b04      	ldr	r3, [pc, #16]	; (12a0 <AC_0_init+0x1c>)
    1290:	4798      	blx	r3
    1292:	bd08      	pop	{r3, pc}
    1294:	00001269 	.word	0x00001269
    1298:	42002000 	.word	0x42002000
    129c:	20003384 	.word	0x20003384
    12a0:	00001a3d 	.word	0x00001a3d

000012a4 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12a4:	4b5d      	ldr	r3, [pc, #372]	; (141c <ADC_0_PORT_init+0x178>)
    12a6:	2204      	movs	r2, #4
    12a8:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12aa:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    12ae:	629a      	str	r2, [r3, #40]	; 0x28
    12b0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    12b4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12b6:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
    12ba:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12be:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12c2:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12c6:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    12ca:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    12ce:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12d2:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    12d6:	2108      	movs	r1, #8
    12d8:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    12da:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    12de:	6299      	str	r1, [r3, #40]	; 0x28
    12e0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    12e2:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
    12e6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    12ea:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    12ee:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    12f2:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    12f6:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    12fa:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    12fe:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1302:	f44f 7180 	mov.w	r1, #256	; 0x100
    1306:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    130a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    130e:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1312:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1316:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
    131a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    131e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1322:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1326:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    132a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    132e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1332:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1336:	f44f 7100 	mov.w	r1, #512	; 0x200
    133a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    133e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1342:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    1346:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    134a:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
    134e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1352:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1356:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    135a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    135e:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1362:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1366:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    136a:	2110      	movs	r1, #16
    136c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    136e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    1372:	6299      	str	r1, [r3, #40]	; 0x28
    1374:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1376:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
    137a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    137e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1382:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1386:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    138a:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    138e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1392:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1396:	2120      	movs	r1, #32
    1398:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    139a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    139e:	6299      	str	r1, [r3, #40]	; 0x28
    13a0:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13a2:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
    13a6:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13aa:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13ae:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13b2:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    13b6:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
    13ba:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13be:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13c2:	2140      	movs	r1, #64	; 0x40
    13c4:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13c6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    13ca:	6299      	str	r1, [r3, #40]	; 0x28
    13cc:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13ce:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
    13d2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    13d6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    13da:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    13de:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    13e2:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    13e6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    13ea:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    13ee:	2180      	movs	r1, #128	; 0x80
    13f0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    13f2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    13f6:	6299      	str	r1, [r3, #40]	; 0x28
    13f8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    13fa:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    13fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1402:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1406:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    140a:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    140e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1412:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1416:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    141a:	4770      	bx	lr
    141c:	41008000 	.word	0x41008000

00001420 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
    1420:	4a04      	ldr	r2, [pc, #16]	; (1434 <ADC_0_CLOCK_init+0x14>)
    1422:	6a13      	ldr	r3, [r2, #32]
    1424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1428:	6213      	str	r3, [r2, #32]
    142a:	2241      	movs	r2, #65	; 0x41
    142c:	4b02      	ldr	r3, [pc, #8]	; (1438 <ADC_0_CLOCK_init+0x18>)
    142e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    1432:	4770      	bx	lr
    1434:	40000800 	.word	0x40000800
    1438:	40001c00 	.word	0x40001c00

0000143c <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
    143c:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
    143e:	4b05      	ldr	r3, [pc, #20]	; (1454 <ADC_0_init+0x18>)
    1440:	4798      	blx	r3
	ADC_0_PORT_init();
    1442:	4b05      	ldr	r3, [pc, #20]	; (1458 <ADC_0_init+0x1c>)
    1444:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
    1446:	2200      	movs	r2, #0
    1448:	4904      	ldr	r1, [pc, #16]	; (145c <ADC_0_init+0x20>)
    144a:	4805      	ldr	r0, [pc, #20]	; (1460 <ADC_0_init+0x24>)
    144c:	4b05      	ldr	r3, [pc, #20]	; (1464 <ADC_0_init+0x28>)
    144e:	4798      	blx	r3
    1450:	bd08      	pop	{r3, pc}
    1452:	bf00      	nop
    1454:	00001421 	.word	0x00001421
    1458:	000012a5 	.word	0x000012a5
    145c:	43001c00 	.word	0x43001c00
    1460:	20003394 	.word	0x20003394
    1464:	00001a6d 	.word	0x00001a6d

00001468 <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
    1468:	4a04      	ldr	r2, [pc, #16]	; (147c <ADC_1_CLOCK_init+0x14>)
    146a:	6a13      	ldr	r3, [r2, #32]
    146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1470:	6213      	str	r3, [r2, #32]
    1472:	2240      	movs	r2, #64	; 0x40
    1474:	4b02      	ldr	r3, [pc, #8]	; (1480 <ADC_1_CLOCK_init+0x18>)
    1476:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    147a:	4770      	bx	lr
    147c:	40000800 	.word	0x40000800
    1480:	40001c00 	.word	0x40001c00

00001484 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
    1484:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
    1486:	4b04      	ldr	r3, [pc, #16]	; (1498 <ADC_1_init+0x14>)
    1488:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
    148a:	2200      	movs	r2, #0
    148c:	4903      	ldr	r1, [pc, #12]	; (149c <ADC_1_init+0x18>)
    148e:	4804      	ldr	r0, [pc, #16]	; (14a0 <ADC_1_init+0x1c>)
    1490:	4b04      	ldr	r3, [pc, #16]	; (14a4 <ADC_1_init+0x20>)
    1492:	4798      	blx	r3
    1494:	bd08      	pop	{r3, pc}
    1496:	bf00      	nop
    1498:	00001469 	.word	0x00001469
    149c:	43002000 	.word	0x43002000
    14a0:	2000344c 	.word	0x2000344c
    14a4:	00001a6d 	.word	0x00001a6d

000014a8 <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
    14a8:	4a04      	ldr	r2, [pc, #16]	; (14bc <DAC_0_CLOCK_init+0x14>)
    14aa:	6a13      	ldr	r3, [r2, #32]
    14ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    14b0:	6213      	str	r3, [r2, #32]
    14b2:	2240      	movs	r2, #64	; 0x40
    14b4:	4b02      	ldr	r3, [pc, #8]	; (14c0 <DAC_0_CLOCK_init+0x18>)
    14b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    14ba:	4770      	bx	lr
    14bc:	40000800 	.word	0x40000800
    14c0:	40001c00 	.word	0x40001c00

000014c4 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
    14c4:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
    14c6:	4b03      	ldr	r3, [pc, #12]	; (14d4 <DAC_0_init+0x10>)
    14c8:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
    14ca:	4903      	ldr	r1, [pc, #12]	; (14d8 <DAC_0_init+0x14>)
    14cc:	4803      	ldr	r0, [pc, #12]	; (14dc <DAC_0_init+0x18>)
    14ce:	4b04      	ldr	r3, [pc, #16]	; (14e0 <DAC_0_init+0x1c>)
    14d0:	4798      	blx	r3
    14d2:	bd08      	pop	{r3, pc}
    14d4:	000014a9 	.word	0x000014a9
    14d8:	43002400 	.word	0x43002400
    14dc:	200033bc 	.word	0x200033bc
    14e0:	00001ab9 	.word	0x00001ab9

000014e4 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
    14e4:	b508      	push	{r3, lr}
    14e6:	2240      	movs	r2, #64	; 0x40
    14e8:	4b05      	ldr	r3, [pc, #20]	; (1500 <EXTERNAL_IRQ_0_init+0x1c>)
    14ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    14ee:	4a05      	ldr	r2, [pc, #20]	; (1504 <EXTERNAL_IRQ_0_init+0x20>)
    14f0:	6953      	ldr	r3, [r2, #20]
    14f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    14f6:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
    14f8:	4b03      	ldr	r3, [pc, #12]	; (1508 <EXTERNAL_IRQ_0_init+0x24>)
    14fa:	4798      	blx	r3
    14fc:	bd08      	pop	{r3, pc}
    14fe:	bf00      	nop
    1500:	40001c00 	.word	0x40001c00
    1504:	40000800 	.word	0x40000800
    1508:	00001b71 	.word	0x00001b71

0000150c <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
    150c:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
    150e:	4a04      	ldr	r2, [pc, #16]	; (1520 <EVENT_SYSTEM_0_init+0x14>)
    1510:	6993      	ldr	r3, [r2, #24]
    1512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1516:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
    1518:	4b02      	ldr	r3, [pc, #8]	; (1524 <EVENT_SYSTEM_0_init+0x18>)
    151a:	4798      	blx	r3
    151c:	bd08      	pop	{r3, pc}
    151e:	bf00      	nop
    1520:	40000800 	.word	0x40000800
    1524:	00001b2d 	.word	0x00001b2d

00001528 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
    1528:	4a02      	ldr	r2, [pc, #8]	; (1534 <FLASH_0_CLOCK_init+0xc>)
    152a:	6913      	ldr	r3, [r2, #16]
    152c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1530:	6113      	str	r3, [r2, #16]
    1532:	4770      	bx	lr
    1534:	40000800 	.word	0x40000800

00001538 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
    1538:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
    153a:	4b03      	ldr	r3, [pc, #12]	; (1548 <FLASH_0_init+0x10>)
    153c:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
    153e:	4903      	ldr	r1, [pc, #12]	; (154c <FLASH_0_init+0x14>)
    1540:	4803      	ldr	r0, [pc, #12]	; (1550 <FLASH_0_init+0x18>)
    1542:	4b04      	ldr	r3, [pc, #16]	; (1554 <FLASH_0_init+0x1c>)
    1544:	4798      	blx	r3
    1546:	bd08      	pop	{r3, pc}
    1548:	00001529 	.word	0x00001529
    154c:	41004000 	.word	0x41004000
    1550:	20003348 	.word	0x20003348
    1554:	00001ba9 	.word	0x00001ba9

00001558 <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1558:	4b10      	ldr	r3, [pc, #64]	; (159c <ModemData_PORT_init+0x44>)
    155a:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
    155e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1562:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1566:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    156a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    156e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    1572:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1576:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    157a:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
    157e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1582:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1586:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    158a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    158e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
    1592:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1596:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    159a:	4770      	bx	lr
    159c:	41008000 	.word	0x41008000

000015a0 <ModemData_CLOCK_init>:
    15a0:	4b06      	ldr	r3, [pc, #24]	; (15bc <ModemData_CLOCK_init+0x1c>)
    15a2:	2240      	movs	r2, #64	; 0x40
    15a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    15a8:	224a      	movs	r2, #74	; 0x4a
    15aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
    15ae:	4a04      	ldr	r2, [pc, #16]	; (15c0 <ModemData_CLOCK_init+0x20>)
    15b0:	6993      	ldr	r3, [r2, #24]
    15b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    15b6:	6193      	str	r3, [r2, #24]
    15b8:	4770      	bx	lr
    15ba:	bf00      	nop
    15bc:	40001c00 	.word	0x40001c00
    15c0:	40000800 	.word	0x40000800

000015c4 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
    15c4:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
    15c6:	4b03      	ldr	r3, [pc, #12]	; (15d4 <ModemData_init+0x10>)
    15c8:	4798      	blx	r3
	mdmCtrlr_DataCommInit();
    15ca:	4b03      	ldr	r3, [pc, #12]	; (15d8 <ModemData_init+0x14>)
    15cc:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
    15ce:	4b03      	ldr	r3, [pc, #12]	; (15dc <ModemData_init+0x18>)
    15d0:	4798      	blx	r3
    15d2:	bd08      	pop	{r3, pc}
    15d4:	000015a1 	.word	0x000015a1
    15d8:	00000685 	.word	0x00000685
    15dc:	00001559 	.word	0x00001559

000015e0 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    15e0:	4b10      	ldr	r3, [pc, #64]	; (1624 <SerialDebug_PORT_init+0x44>)
    15e2:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
    15e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    15ea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    15ee:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    15f2:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    15f6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    15fa:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    15fe:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1602:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
    1606:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    160a:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    160e:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1612:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1616:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
    161a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    161e:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
    1622:	4770      	bx	lr
    1624:	41008000 	.word	0x41008000

00001628 <SerialDebug_CLOCK_init>:
    1628:	4b06      	ldr	r3, [pc, #24]	; (1644 <SerialDebug_CLOCK_init+0x1c>)
    162a:	2240      	movs	r2, #64	; 0x40
    162c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    1630:	224a      	movs	r2, #74	; 0x4a
    1632:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
    1636:	4a04      	ldr	r2, [pc, #16]	; (1648 <SerialDebug_CLOCK_init+0x20>)
    1638:	6a13      	ldr	r3, [r2, #32]
    163a:	f043 0302 	orr.w	r3, r3, #2
    163e:	6213      	str	r3, [r2, #32]
    1640:	4770      	bx	lr
    1642:	bf00      	nop
    1644:	40001c00 	.word	0x40001c00
    1648:	40000800 	.word	0x40000800

0000164c <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
    164c:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
    164e:	4b03      	ldr	r3, [pc, #12]	; (165c <SerialDebug_init+0x10>)
    1650:	4798      	blx	r3
	SerialDebugPrintInit();
    1652:	4b03      	ldr	r3, [pc, #12]	; (1660 <SerialDebug_init+0x14>)
    1654:	4798      	blx	r3
	SerialDebug_PORT_init();
    1656:	4b03      	ldr	r3, [pc, #12]	; (1664 <SerialDebug_init+0x18>)
    1658:	4798      	blx	r3
    165a:	bd08      	pop	{r3, pc}
    165c:	00001629 	.word	0x00001629
    1660:	00000fb9 	.word	0x00000fb9
    1664:	000015e1 	.word	0x000015e1

00001668 <delay_driver_init>:
}

void delay_driver_init(void)
{
    1668:	b508      	push	{r3, lr}
	delay_init(SysTick);
    166a:	4802      	ldr	r0, [pc, #8]	; (1674 <delay_driver_init+0xc>)
    166c:	4b02      	ldr	r3, [pc, #8]	; (1678 <delay_driver_init+0x10>)
    166e:	4798      	blx	r3
    1670:	bd08      	pop	{r3, pc}
    1672:	bf00      	nop
    1674:	e000e010 	.word	0xe000e010
    1678:	00001af9 	.word	0x00001af9

0000167c <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
    167c:	4a04      	ldr	r2, [pc, #16]	; (1690 <PWM_0_CLOCK_init+0x14>)
    167e:	6953      	ldr	r3, [r2, #20]
    1680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1684:	6153      	str	r3, [r2, #20]
    1686:	2240      	movs	r2, #64	; 0x40
    1688:	4b02      	ldr	r3, [pc, #8]	; (1694 <PWM_0_CLOCK_init+0x18>)
    168a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    168e:	4770      	bx	lr
    1690:	40000800 	.word	0x40000800
    1694:	40001c00 	.word	0x40001c00

00001698 <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
    1698:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
    169a:	4b05      	ldr	r3, [pc, #20]	; (16b0 <PWM_0_init+0x18>)
    169c:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
    169e:	4b05      	ldr	r3, [pc, #20]	; (16b4 <PWM_0_init+0x1c>)
    16a0:	4798      	blx	r3
    16a2:	4602      	mov	r2, r0
    16a4:	4904      	ldr	r1, [pc, #16]	; (16b8 <PWM_0_init+0x20>)
    16a6:	4805      	ldr	r0, [pc, #20]	; (16bc <PWM_0_init+0x24>)
    16a8:	4b05      	ldr	r3, [pc, #20]	; (16c0 <PWM_0_init+0x28>)
    16aa:	4798      	blx	r3
    16ac:	bd08      	pop	{r3, pc}
    16ae:	bf00      	nop
    16b0:	0000167d 	.word	0x0000167d
    16b4:	00003149 	.word	0x00003149
    16b8:	40003800 	.word	0x40003800
    16bc:	20003310 	.word	0x20003310
    16c0:	00001c05 	.word	0x00001c05

000016c4 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
    16c4:	4a04      	ldr	r2, [pc, #16]	; (16d8 <PWM_1_CLOCK_init+0x14>)
    16c6:	6953      	ldr	r3, [r2, #20]
    16c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    16cc:	6153      	str	r3, [r2, #20]
    16ce:	2240      	movs	r2, #64	; 0x40
    16d0:	4b02      	ldr	r3, [pc, #8]	; (16dc <PWM_1_CLOCK_init+0x18>)
    16d2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    16d6:	4770      	bx	lr
    16d8:	40000800 	.word	0x40000800
    16dc:	40001c00 	.word	0x40001c00

000016e0 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
    16e0:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
    16e2:	4b05      	ldr	r3, [pc, #20]	; (16f8 <PWM_1_init+0x18>)
    16e4:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
    16e6:	4b05      	ldr	r3, [pc, #20]	; (16fc <PWM_1_init+0x1c>)
    16e8:	4798      	blx	r3
    16ea:	4602      	mov	r2, r0
    16ec:	4904      	ldr	r1, [pc, #16]	; (1700 <PWM_1_init+0x20>)
    16ee:	4805      	ldr	r0, [pc, #20]	; (1704 <PWM_1_init+0x24>)
    16f0:	4b05      	ldr	r3, [pc, #20]	; (1708 <PWM_1_init+0x28>)
    16f2:	4798      	blx	r3
    16f4:	bd08      	pop	{r3, pc}
    16f6:	bf00      	nop
    16f8:	000016c5 	.word	0x000016c5
    16fc:	00003149 	.word	0x00003149
    1700:	40003c00 	.word	0x40003c00
    1704:	20003430 	.word	0x20003430
    1708:	00001c05 	.word	0x00001c05

0000170c <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
    170c:	4a04      	ldr	r2, [pc, #16]	; (1720 <PWM_2_CLOCK_init+0x14>)
    170e:	6993      	ldr	r3, [r2, #24]
    1710:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1714:	6193      	str	r3, [r2, #24]
    1716:	2240      	movs	r2, #64	; 0x40
    1718:	4b02      	ldr	r3, [pc, #8]	; (1724 <PWM_2_CLOCK_init+0x18>)
    171a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    171e:	4770      	bx	lr
    1720:	40000800 	.word	0x40000800
    1724:	40001c00 	.word	0x40001c00

00001728 <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
    1728:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
    172a:	4b05      	ldr	r3, [pc, #20]	; (1740 <PWM_2_init+0x18>)
    172c:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
    172e:	4b05      	ldr	r3, [pc, #20]	; (1744 <PWM_2_init+0x1c>)
    1730:	4798      	blx	r3
    1732:	4602      	mov	r2, r0
    1734:	4904      	ldr	r1, [pc, #16]	; (1748 <PWM_2_init+0x20>)
    1736:	4805      	ldr	r0, [pc, #20]	; (174c <PWM_2_init+0x24>)
    1738:	4b05      	ldr	r3, [pc, #20]	; (1750 <PWM_2_init+0x28>)
    173a:	4798      	blx	r3
    173c:	bd08      	pop	{r3, pc}
    173e:	bf00      	nop
    1740:	0000170d 	.word	0x0000170d
    1744:	00003149 	.word	0x00003149
    1748:	4101a000 	.word	0x4101a000
    174c:	2000332c 	.word	0x2000332c
    1750:	00001c05 	.word	0x00001c05

00001754 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
    1754:	4a04      	ldr	r2, [pc, #16]	; (1768 <TIMER_3_CLOCK_init+0x14>)
    1756:	6993      	ldr	r3, [r2, #24]
    1758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    175c:	6193      	str	r3, [r2, #24]
    175e:	2240      	movs	r2, #64	; 0x40
    1760:	4b02      	ldr	r3, [pc, #8]	; (176c <TIMER_3_CLOCK_init+0x18>)
    1762:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    1766:	4770      	bx	lr
    1768:	40000800 	.word	0x40000800
    176c:	40001c00 	.word	0x40001c00

00001770 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
    1770:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
    1772:	4b05      	ldr	r3, [pc, #20]	; (1788 <TIMER_3_init+0x18>)
    1774:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
    1776:	4b05      	ldr	r3, [pc, #20]	; (178c <TIMER_3_init+0x1c>)
    1778:	4798      	blx	r3
    177a:	4602      	mov	r2, r0
    177c:	4904      	ldr	r1, [pc, #16]	; (1790 <TIMER_3_init+0x20>)
    177e:	4805      	ldr	r0, [pc, #20]	; (1794 <TIMER_3_init+0x24>)
    1780:	4b05      	ldr	r3, [pc, #20]	; (1798 <TIMER_3_init+0x28>)
    1782:	4798      	blx	r3
    1784:	bd08      	pop	{r3, pc}
    1786:	bf00      	nop
    1788:	00001755 	.word	0x00001755
    178c:	00002c01 	.word	0x00002c01
    1790:	41016000 	.word	0x41016000
    1794:	20003450 	.word	0x20003450
    1798:	00001d21 	.word	0x00001d21

0000179c <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
    179c:	4a04      	ldr	r2, [pc, #16]	; (17b0 <TIMER_4_CLOCK_init+0x14>)
    179e:	6993      	ldr	r3, [r2, #24]
    17a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    17a4:	6193      	str	r3, [r2, #24]
    17a6:	2240      	movs	r2, #64	; 0x40
    17a8:	4b02      	ldr	r3, [pc, #8]	; (17b4 <TIMER_4_CLOCK_init+0x18>)
    17aa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    17ae:	4770      	bx	lr
    17b0:	40000800 	.word	0x40000800
    17b4:	40001c00 	.word	0x40001c00

000017b8 <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
    17b8:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
    17ba:	4b05      	ldr	r3, [pc, #20]	; (17d0 <TIMER_4_init+0x18>)
    17bc:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
    17be:	4b05      	ldr	r3, [pc, #20]	; (17d4 <TIMER_4_init+0x1c>)
    17c0:	4798      	blx	r3
    17c2:	4602      	mov	r2, r0
    17c4:	4904      	ldr	r1, [pc, #16]	; (17d8 <TIMER_4_init+0x20>)
    17c6:	4805      	ldr	r0, [pc, #20]	; (17dc <TIMER_4_init+0x24>)
    17c8:	4b05      	ldr	r3, [pc, #20]	; (17e0 <TIMER_4_init+0x28>)
    17ca:	4798      	blx	r3
    17cc:	bd08      	pop	{r3, pc}
    17ce:	bf00      	nop
    17d0:	0000179d 	.word	0x0000179d
    17d4:	00002c01 	.word	0x00002c01
    17d8:	41018000 	.word	0x41018000
    17dc:	20003398 	.word	0x20003398
    17e0:	00001d21 	.word	0x00001d21

000017e4 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
    17e4:	4a04      	ldr	r2, [pc, #16]	; (17f8 <TIMER_5_CLOCK_init+0x14>)
    17e6:	69d3      	ldr	r3, [r2, #28]
    17e8:	f043 0308 	orr.w	r3, r3, #8
    17ec:	61d3      	str	r3, [r2, #28]
    17ee:	2240      	movs	r2, #64	; 0x40
    17f0:	4b02      	ldr	r3, [pc, #8]	; (17fc <TIMER_5_CLOCK_init+0x18>)
    17f2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    17f6:	4770      	bx	lr
    17f8:	40000800 	.word	0x40000800
    17fc:	40001c00 	.word	0x40001c00

00001800 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
    1800:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
    1802:	4b05      	ldr	r3, [pc, #20]	; (1818 <TIMER_5_init+0x18>)
    1804:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
    1806:	4b05      	ldr	r3, [pc, #20]	; (181c <TIMER_5_init+0x1c>)
    1808:	4798      	blx	r3
    180a:	4602      	mov	r2, r0
    180c:	4904      	ldr	r1, [pc, #16]	; (1820 <TIMER_5_init+0x20>)
    180e:	4805      	ldr	r0, [pc, #20]	; (1824 <TIMER_5_init+0x24>)
    1810:	4b05      	ldr	r3, [pc, #20]	; (1828 <TIMER_5_init+0x28>)
    1812:	4798      	blx	r3
    1814:	bd08      	pop	{r3, pc}
    1816:	bf00      	nop
    1818:	000017e5 	.word	0x000017e5
    181c:	00002c01 	.word	0x00002c01
    1820:	42000c00 	.word	0x42000c00
    1824:	200033f0 	.word	0x200033f0
    1828:	00001d21 	.word	0x00001d21

0000182c <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
    182c:	4a04      	ldr	r2, [pc, #16]	; (1840 <TIMER_6_CLOCK_init+0x14>)
    182e:	69d3      	ldr	r3, [r2, #28]
    1830:	f043 0310 	orr.w	r3, r3, #16
    1834:	61d3      	str	r3, [r2, #28]
    1836:	2240      	movs	r2, #64	; 0x40
    1838:	4b02      	ldr	r3, [pc, #8]	; (1844 <TIMER_6_CLOCK_init+0x18>)
    183a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    183e:	4770      	bx	lr
    1840:	40000800 	.word	0x40000800
    1844:	40001c00 	.word	0x40001c00

00001848 <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
    1848:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
    184a:	4b05      	ldr	r3, [pc, #20]	; (1860 <TIMER_6_init+0x18>)
    184c:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
    184e:	4b05      	ldr	r3, [pc, #20]	; (1864 <TIMER_6_init+0x1c>)
    1850:	4798      	blx	r3
    1852:	4602      	mov	r2, r0
    1854:	4904      	ldr	r1, [pc, #16]	; (1868 <TIMER_6_init+0x20>)
    1856:	4805      	ldr	r0, [pc, #20]	; (186c <TIMER_6_init+0x24>)
    1858:	4b05      	ldr	r3, [pc, #20]	; (1870 <TIMER_6_init+0x28>)
    185a:	4798      	blx	r3
    185c:	bd08      	pop	{r3, pc}
    185e:	bf00      	nop
    1860:	0000182d 	.word	0x0000182d
    1864:	00002c01 	.word	0x00002c01
    1868:	42001000 	.word	0x42001000
    186c:	20003410 	.word	0x20003410
    1870:	00001d21 	.word	0x00001d21

00001874 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
    1874:	4a04      	ldr	r2, [pc, #16]	; (1888 <TIMER_7_CLOCK_init+0x14>)
    1876:	6a13      	ldr	r3, [r2, #32]
    1878:	f043 0310 	orr.w	r3, r3, #16
    187c:	6213      	str	r3, [r2, #32]
    187e:	2240      	movs	r2, #64	; 0x40
    1880:	4b02      	ldr	r3, [pc, #8]	; (188c <TIMER_7_CLOCK_init+0x18>)
    1882:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    1886:	4770      	bx	lr
    1888:	40000800 	.word	0x40000800
    188c:	40001c00 	.word	0x40001c00

00001890 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
    1890:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
    1892:	4b05      	ldr	r3, [pc, #20]	; (18a8 <TIMER_7_init+0x18>)
    1894:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
    1896:	4b05      	ldr	r3, [pc, #20]	; (18ac <TIMER_7_init+0x1c>)
    1898:	4798      	blx	r3
    189a:	4602      	mov	r2, r0
    189c:	4904      	ldr	r1, [pc, #16]	; (18b0 <TIMER_7_init+0x20>)
    189e:	4805      	ldr	r0, [pc, #20]	; (18b4 <TIMER_7_init+0x24>)
    18a0:	4b05      	ldr	r3, [pc, #20]	; (18b8 <TIMER_7_init+0x28>)
    18a2:	4798      	blx	r3
    18a4:	bd08      	pop	{r3, pc}
    18a6:	bf00      	nop
    18a8:	00001875 	.word	0x00001875
    18ac:	00002c01 	.word	0x00002c01
    18b0:	43001000 	.word	0x43001000
    18b4:	20003364 	.word	0x20003364
    18b8:	00001d21 	.word	0x00001d21

000018bc <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
    18bc:	4a02      	ldr	r2, [pc, #8]	; (18c8 <WDT_0_CLOCK_init+0xc>)
    18be:	6953      	ldr	r3, [r2, #20]
    18c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    18c4:	6153      	str	r3, [r2, #20]
    18c6:	4770      	bx	lr
    18c8:	40000800 	.word	0x40000800

000018cc <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
    18cc:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
    18ce:	4b0a      	ldr	r3, [pc, #40]	; (18f8 <WDT_0_init+0x2c>)
    18d0:	4798      	blx	r3
	ASSERT(wdt && hw);
    18d2:	2252      	movs	r2, #82	; 0x52
    18d4:	4909      	ldr	r1, [pc, #36]	; (18fc <WDT_0_init+0x30>)
    18d6:	2001      	movs	r0, #1
    18d8:	4b09      	ldr	r3, [pc, #36]	; (1900 <WDT_0_init+0x34>)
    18da:	4798      	blx	r3
	wdt->dev.hw = (void *)hw;
    18dc:	4809      	ldr	r0, [pc, #36]	; (1904 <WDT_0_init+0x38>)
    18de:	4b0a      	ldr	r3, [pc, #40]	; (1908 <WDT_0_init+0x3c>)
    18e0:	6003      	str	r3, [r0, #0]
	return _wdt_init(&wdt->dev);
    18e2:	4b0a      	ldr	r3, [pc, #40]	; (190c <WDT_0_init+0x40>)
    18e4:	4798      	blx	r3

	if(0 == wdt_init(&WDT_0, WDT))
    18e6:	b118      	cbz	r0, 18f0 <WDT_0_init+0x24>
	{
		DEBUG_PRINT("WDT Initialised");
	}
	else
	{
		DEBUG_PRINT("WDT Failed to initialize");
    18e8:	4809      	ldr	r0, [pc, #36]	; (1910 <WDT_0_init+0x44>)
    18ea:	4b0a      	ldr	r3, [pc, #40]	; (1914 <WDT_0_init+0x48>)
    18ec:	4798      	blx	r3
    18ee:	bd08      	pop	{r3, pc}
		DEBUG_PRINT("WDT Initialised");
    18f0:	4809      	ldr	r0, [pc, #36]	; (1918 <WDT_0_init+0x4c>)
    18f2:	4b08      	ldr	r3, [pc, #32]	; (1914 <WDT_0_init+0x48>)
    18f4:	4798      	blx	r3
    18f6:	bd08      	pop	{r3, pc}
    18f8:	000018bd 	.word	0x000018bd
    18fc:	00006a50 	.word	0x00006a50
    1900:	00001d65 	.word	0x00001d65
    1904:	200033b8 	.word	0x200033b8
    1908:	40002000 	.word	0x40002000
    190c:	000031c5 	.word	0x000031c5
    1910:	00006a7c 	.word	0x00006a7c
    1914:	00001025 	.word	0x00001025
    1918:	00006a6c 	.word	0x00006a6c

0000191c <system_init>:
	}
}

void system_init(void)
{
    191c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    1920:	4b28      	ldr	r3, [pc, #160]	; (19c4 <system_init+0xa8>)
    1922:	4798      	blx	r3
	init_mcu();

	delay_driver_init();
    1924:	4b28      	ldr	r3, [pc, #160]	; (19c8 <system_init+0xac>)
    1926:	4798      	blx	r3

	AC_0_init();
    1928:	4b28      	ldr	r3, [pc, #160]	; (19cc <system_init+0xb0>)
    192a:	4798      	blx	r3

	ADC_0_init();
    192c:	4b28      	ldr	r3, [pc, #160]	; (19d0 <system_init+0xb4>)
    192e:	4798      	blx	r3

	ADC_1_init();
    1930:	4b28      	ldr	r3, [pc, #160]	; (19d4 <system_init+0xb8>)
    1932:	4798      	blx	r3

	DAC_0_init();
    1934:	4b28      	ldr	r3, [pc, #160]	; (19d8 <system_init+0xbc>)
    1936:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
    1938:	4b28      	ldr	r3, [pc, #160]	; (19dc <system_init+0xc0>)
    193a:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
    193c:	4b28      	ldr	r3, [pc, #160]	; (19e0 <system_init+0xc4>)
    193e:	4798      	blx	r3

	FLASH_0_init();
    1940:	4b28      	ldr	r3, [pc, #160]	; (19e4 <system_init+0xc8>)
    1942:	4798      	blx	r3

	SerialDebug_init();
    1944:	4b28      	ldr	r3, [pc, #160]	; (19e8 <system_init+0xcc>)
    1946:	4798      	blx	r3
	
	ModemData_init();
    1948:	4b28      	ldr	r3, [pc, #160]	; (19ec <system_init+0xd0>)
    194a:	4798      	blx	r3

	PWM_0_init();
    194c:	4b28      	ldr	r3, [pc, #160]	; (19f0 <system_init+0xd4>)
    194e:	4798      	blx	r3

	PWM_1_init();
    1950:	4b28      	ldr	r3, [pc, #160]	; (19f4 <system_init+0xd8>)
    1952:	4798      	blx	r3

	PWM_2_init();
    1954:	4b28      	ldr	r3, [pc, #160]	; (19f8 <system_init+0xdc>)
    1956:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
    1958:	4c28      	ldr	r4, [pc, #160]	; (19fc <system_init+0xe0>)
    195a:	69a3      	ldr	r3, [r4, #24]
    195c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1960:	61a3      	str	r3, [r4, #24]
    1962:	4f27      	ldr	r7, [pc, #156]	; (1a00 <system_init+0xe4>)
    1964:	f04f 0840 	mov.w	r8, #64	; 0x40
    1968:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
    196c:	4e25      	ldr	r6, [pc, #148]	; (1a04 <system_init+0xe8>)
    196e:	47b0      	blx	r6
    1970:	4602      	mov	r2, r0
    1972:	4925      	ldr	r1, [pc, #148]	; (1a08 <system_init+0xec>)
    1974:	4825      	ldr	r0, [pc, #148]	; (1a0c <system_init+0xf0>)
    1976:	4d26      	ldr	r5, [pc, #152]	; (1a10 <system_init+0xf4>)
    1978:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
    197a:	69e3      	ldr	r3, [r4, #28]
    197c:	f043 0320 	orr.w	r3, r3, #32
    1980:	61e3      	str	r3, [r4, #28]
    1982:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
    1986:	47b0      	blx	r6
    1988:	4602      	mov	r2, r0
    198a:	4922      	ldr	r1, [pc, #136]	; (1a14 <system_init+0xf8>)
    198c:	4822      	ldr	r0, [pc, #136]	; (1a18 <system_init+0xfc>)
    198e:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
    1990:	69e3      	ldr	r3, [r4, #28]
    1992:	ea43 0308 	orr.w	r3, r3, r8
    1996:	61e3      	str	r3, [r4, #28]
    1998:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
    199c:	47b0      	blx	r6
    199e:	4602      	mov	r2, r0
    19a0:	491e      	ldr	r1, [pc, #120]	; (1a1c <system_init+0x100>)
    19a2:	481f      	ldr	r0, [pc, #124]	; (1a20 <system_init+0x104>)
    19a4:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
    19a6:	4b1f      	ldr	r3, [pc, #124]	; (1a24 <system_init+0x108>)
    19a8:	4798      	blx	r3

	TIMER_4_init();
    19aa:	4b1f      	ldr	r3, [pc, #124]	; (1a28 <system_init+0x10c>)
    19ac:	4798      	blx	r3

	TIMER_5_init();
    19ae:	4b1f      	ldr	r3, [pc, #124]	; (1a2c <system_init+0x110>)
    19b0:	4798      	blx	r3

	TIMER_6_init();
    19b2:	4b1f      	ldr	r3, [pc, #124]	; (1a30 <system_init+0x114>)
    19b4:	4798      	blx	r3

	TIMER_7_init();
    19b6:	4b1f      	ldr	r3, [pc, #124]	; (1a34 <system_init+0x118>)
    19b8:	4798      	blx	r3
	
	WDT_0_init();
    19ba:	4b1f      	ldr	r3, [pc, #124]	; (1a38 <system_init+0x11c>)
    19bc:	4798      	blx	r3
    19be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19c2:	bf00      	nop
    19c4:	000020b1 	.word	0x000020b1
    19c8:	00001669 	.word	0x00001669
    19cc:	00001285 	.word	0x00001285
    19d0:	0000143d 	.word	0x0000143d
    19d4:	00001485 	.word	0x00001485
    19d8:	000014c5 	.word	0x000014c5
    19dc:	000014e5 	.word	0x000014e5
    19e0:	0000150d 	.word	0x0000150d
    19e4:	00001539 	.word	0x00001539
    19e8:	0000164d 	.word	0x0000164d
    19ec:	000015c5 	.word	0x000015c5
    19f0:	00001699 	.word	0x00001699
    19f4:	000016e1 	.word	0x000016e1
    19f8:	00001729 	.word	0x00001729
    19fc:	40000800 	.word	0x40000800
    1a00:	40001c00 	.word	0x40001c00
    1a04:	00003141 	.word	0x00003141
    1a08:	4101c000 	.word	0x4101c000
    1a0c:	20003470 	.word	0x20003470
    1a10:	00001d21 	.word	0x00001d21
    1a14:	42001400 	.word	0x42001400
    1a18:	200033d0 	.word	0x200033d0
    1a1c:	42001800 	.word	0x42001800
    1a20:	200032f0 	.word	0x200032f0
    1a24:	00001771 	.word	0x00001771
    1a28:	000017b9 	.word	0x000017b9
    1a2c:	00001801 	.word	0x00001801
    1a30:	00001849 	.word	0x00001849
    1a34:	00001891 	.word	0x00001891
    1a38:	000018cd 	.word	0x000018cd

00001a3c <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
    1a3c:	b538      	push	{r3, r4, r5, lr}
    1a3e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1a40:	4605      	mov	r5, r0
    1a42:	b158      	cbz	r0, 1a5c <ac_sync_init+0x20>
    1a44:	1c08      	adds	r0, r1, #0
    1a46:	bf18      	it	ne
    1a48:	2001      	movne	r0, #1
    1a4a:	223b      	movs	r2, #59	; 0x3b
    1a4c:	4904      	ldr	r1, [pc, #16]	; (1a60 <ac_sync_init+0x24>)
    1a4e:	4b05      	ldr	r3, [pc, #20]	; (1a64 <ac_sync_init+0x28>)
    1a50:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
    1a52:	4621      	mov	r1, r4
    1a54:	4628      	mov	r0, r5
    1a56:	4b04      	ldr	r3, [pc, #16]	; (1a68 <ac_sync_init+0x2c>)
    1a58:	4798      	blx	r3
}
    1a5a:	bd38      	pop	{r3, r4, r5, pc}
    1a5c:	2000      	movs	r0, #0
    1a5e:	e7f4      	b.n	1a4a <ac_sync_init+0xe>
    1a60:	00006a98 	.word	0x00006a98
    1a64:	00001d65 	.word	0x00001d65
    1a68:	00001f79 	.word	0x00001f79

00001a6c <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
    1a6c:	b538      	push	{r3, r4, r5, lr}
    1a6e:	460c      	mov	r4, r1
	ASSERT(descr && hw);
    1a70:	4605      	mov	r5, r0
    1a72:	b158      	cbz	r0, 1a8c <adc_sync_init+0x20>
    1a74:	1c08      	adds	r0, r1, #0
    1a76:	bf18      	it	ne
    1a78:	2001      	movne	r0, #1
    1a7a:	2243      	movs	r2, #67	; 0x43
    1a7c:	4904      	ldr	r1, [pc, #16]	; (1a90 <adc_sync_init+0x24>)
    1a7e:	4b05      	ldr	r3, [pc, #20]	; (1a94 <adc_sync_init+0x28>)
    1a80:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
    1a82:	4621      	mov	r1, r4
    1a84:	4628      	mov	r0, r5
    1a86:	4b04      	ldr	r3, [pc, #16]	; (1a98 <adc_sync_init+0x2c>)
    1a88:	4798      	blx	r3
}
    1a8a:	bd38      	pop	{r3, r4, r5, pc}
    1a8c:	2000      	movs	r0, #0
    1a8e:	e7f4      	b.n	1a7a <adc_sync_init+0xe>
    1a90:	00006ab4 	.word	0x00006ab4
    1a94:	00001d65 	.word	0x00001d65
    1a98:	00002051 	.word	0x00002051

00001a9c <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1a9c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1aa0:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1aa2:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1aa4:	f3bf 8f5f 	dmb	sy
    1aa8:	4770      	bx	lr

00001aaa <atomic_leave_critical>:
    1aaa:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    1aae:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1ab0:	f383 8810 	msr	PRIMASK, r3
    1ab4:	4770      	bx	lr
	...

00001ab8 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
    1ab8:	b538      	push	{r3, r4, r5, lr}
    1aba:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
    1abc:	4604      	mov	r4, r0
    1abe:	b198      	cbz	r0, 1ae8 <dac_sync_init+0x30>
    1ac0:	1c08      	adds	r0, r1, #0
    1ac2:	bf18      	it	ne
    1ac4:	2001      	movne	r0, #1
    1ac6:	223c      	movs	r2, #60	; 0x3c
    1ac8:	4908      	ldr	r1, [pc, #32]	; (1aec <dac_sync_init+0x34>)
    1aca:	4b09      	ldr	r3, [pc, #36]	; (1af0 <dac_sync_init+0x38>)
    1acc:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
    1ace:	4629      	mov	r1, r5
    1ad0:	4620      	mov	r0, r4
    1ad2:	4b08      	ldr	r3, [pc, #32]	; (1af4 <dac_sync_init+0x3c>)
    1ad4:	4798      	blx	r3
	if (rc) {
    1ad6:	4602      	mov	r2, r0
    1ad8:	b920      	cbnz	r0, 1ae4 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
    1ada:	2300      	movs	r3, #0
    1adc:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
    1ade:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
    1ae0:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
    1ae2:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
    1ae4:	4610      	mov	r0, r2
    1ae6:	bd38      	pop	{r3, r4, r5, pc}
    1ae8:	2000      	movs	r0, #0
    1aea:	e7ec      	b.n	1ac6 <dac_sync_init+0xe>
    1aec:	00006ad0 	.word	0x00006ad0
    1af0:	00001d65 	.word	0x00001d65
    1af4:	00002169 	.word	0x00002169

00001af8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
    1af8:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
    1afa:	4b02      	ldr	r3, [pc, #8]	; (1b04 <delay_init+0xc>)
    1afc:	6018      	str	r0, [r3, #0]
    1afe:	4b02      	ldr	r3, [pc, #8]	; (1b08 <delay_init+0x10>)
    1b00:	4798      	blx	r3
    1b02:	bd08      	pop	{r3, pc}
    1b04:	2000077c 	.word	0x2000077c
    1b08:	000028fd 	.word	0x000028fd

00001b0c <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
    1b0c:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
    1b0e:	4b04      	ldr	r3, [pc, #16]	; (1b20 <delay_ms+0x14>)
    1b10:	681c      	ldr	r4, [r3, #0]
    1b12:	4b04      	ldr	r3, [pc, #16]	; (1b24 <delay_ms+0x18>)
    1b14:	4798      	blx	r3
    1b16:	4601      	mov	r1, r0
    1b18:	4620      	mov	r0, r4
    1b1a:	4b03      	ldr	r3, [pc, #12]	; (1b28 <delay_ms+0x1c>)
    1b1c:	4798      	blx	r3
    1b1e:	bd10      	pop	{r4, pc}
    1b20:	2000077c 	.word	0x2000077c
    1b24:	000020a5 	.word	0x000020a5
    1b28:	00002911 	.word	0x00002911

00001b2c <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
    1b2c:	b508      	push	{r3, lr}
	return _event_system_init();
    1b2e:	4b01      	ldr	r3, [pc, #4]	; (1b34 <event_system_init+0x8>)
    1b30:	4798      	blx	r3
}
    1b32:	bd08      	pop	{r3, pc}
    1b34:	000023a5 	.word	0x000023a5

00001b38 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1b38:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1b3a:	4b0c      	ldr	r3, [pc, #48]	; (1b6c <process_ext_irq+0x34>)
    1b3c:	685c      	ldr	r4, [r3, #4]
    1b3e:	42a0      	cmp	r0, r4
    1b40:	d00e      	beq.n	1b60 <process_ext_irq+0x28>
    1b42:	2301      	movs	r3, #1
    1b44:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
    1b46:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
    1b48:	25ff      	movs	r5, #255	; 0xff
    1b4a:	e003      	b.n	1b54 <process_ext_irq+0x1c>
    1b4c:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
    1b4e:	185a      	adds	r2, r3, r1
    1b50:	0852      	lsrs	r2, r2, #1
    1b52:	d104      	bne.n	1b5e <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
    1b54:	42a0      	cmp	r0, r4
    1b56:	d9f9      	bls.n	1b4c <process_ext_irq+0x14>
	while (upper >= lower) {
    1b58:	b13b      	cbz	r3, 1b6a <process_ext_irq+0x32>
			lower = middle + 1;
    1b5a:	4631      	mov	r1, r6
    1b5c:	e7f7      	b.n	1b4e <process_ext_irq+0x16>
    1b5e:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
    1b60:	4b02      	ldr	r3, [pc, #8]	; (1b6c <process_ext_irq+0x34>)
    1b62:	681b      	ldr	r3, [r3, #0]
    1b64:	b10b      	cbz	r3, 1b6a <process_ext_irq+0x32>
				ext_irqs[middle].cb();
    1b66:	4798      	blx	r3
    1b68:	bd70      	pop	{r4, r5, r6, pc}
    1b6a:	bd70      	pop	{r4, r5, r6, pc}
    1b6c:	20000780 	.word	0x20000780

00001b70 <ext_irq_init>:
{
    1b70:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
    1b72:	4b05      	ldr	r3, [pc, #20]	; (1b88 <ext_irq_init+0x18>)
    1b74:	f04f 32ff 	mov.w	r2, #4294967295
    1b78:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
    1b7a:	2200      	movs	r2, #0
    1b7c:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
    1b7e:	4803      	ldr	r0, [pc, #12]	; (1b8c <ext_irq_init+0x1c>)
    1b80:	4b03      	ldr	r3, [pc, #12]	; (1b90 <ext_irq_init+0x20>)
    1b82:	4798      	blx	r3
}
    1b84:	bd08      	pop	{r3, pc}
    1b86:	bf00      	nop
    1b88:	20000780 	.word	0x20000780
    1b8c:	00001b39 	.word	0x00001b39
    1b90:	00002325 	.word	0x00002325

00001b94 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
    1b94:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
    1b96:	6943      	ldr	r3, [r0, #20]
    1b98:	b103      	cbz	r3, 1b9c <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
    1b9a:	4798      	blx	r3
    1b9c:	bd08      	pop	{r3, pc}

00001b9e <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
    1b9e:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
    1ba0:	6983      	ldr	r3, [r0, #24]
    1ba2:	b103      	cbz	r3, 1ba6 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
    1ba4:	4798      	blx	r3
    1ba6:	bd08      	pop	{r3, pc}

00001ba8 <flash_init>:
{
    1ba8:	b538      	push	{r3, r4, r5, lr}
    1baa:	460d      	mov	r5, r1
	ASSERT(flash && hw);
    1bac:	4604      	mov	r4, r0
    1bae:	b190      	cbz	r0, 1bd6 <flash_init+0x2e>
    1bb0:	1c08      	adds	r0, r1, #0
    1bb2:	bf18      	it	ne
    1bb4:	2001      	movne	r0, #1
    1bb6:	2242      	movs	r2, #66	; 0x42
    1bb8:	4908      	ldr	r1, [pc, #32]	; (1bdc <flash_init+0x34>)
    1bba:	4b09      	ldr	r3, [pc, #36]	; (1be0 <flash_init+0x38>)
    1bbc:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
    1bbe:	4629      	mov	r1, r5
    1bc0:	4620      	mov	r0, r4
    1bc2:	4b08      	ldr	r3, [pc, #32]	; (1be4 <flash_init+0x3c>)
    1bc4:	4798      	blx	r3
	if (rc) {
    1bc6:	4603      	mov	r3, r0
    1bc8:	b918      	cbnz	r0, 1bd2 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
    1bca:	4a07      	ldr	r2, [pc, #28]	; (1be8 <flash_init+0x40>)
    1bcc:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
    1bce:	4a07      	ldr	r2, [pc, #28]	; (1bec <flash_init+0x44>)
    1bd0:	6062      	str	r2, [r4, #4]
}
    1bd2:	4618      	mov	r0, r3
    1bd4:	bd38      	pop	{r3, r4, r5, pc}
    1bd6:	2000      	movs	r0, #0
    1bd8:	e7ed      	b.n	1bb6 <flash_init+0xe>
    1bda:	bf00      	nop
    1bdc:	00006aec 	.word	0x00006aec
    1be0:	00001d65 	.word	0x00001d65
    1be4:	000024e1 	.word	0x000024e1
    1be8:	00001b95 	.word	0x00001b95
    1bec:	00001b9f 	.word	0x00001b9f

00001bf0 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    1bf0:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    1bf2:	6943      	ldr	r3, [r0, #20]
    1bf4:	b103      	cbz	r3, 1bf8 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    1bf6:	4798      	blx	r3
    1bf8:	bd08      	pop	{r3, pc}

00001bfa <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1bfa:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1bfc:	6983      	ldr	r3, [r0, #24]
    1bfe:	b103      	cbz	r3, 1c02 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    1c00:	4798      	blx	r3
    1c02:	bd08      	pop	{r3, pc}

00001c04 <pwm_init>:
{
    1c04:	b538      	push	{r3, r4, r5, lr}
    1c06:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1c08:	4604      	mov	r4, r0
    1c0a:	b180      	cbz	r0, 1c2e <pwm_init+0x2a>
    1c0c:	1c08      	adds	r0, r1, #0
    1c0e:	bf18      	it	ne
    1c10:	2001      	movne	r0, #1
    1c12:	223d      	movs	r2, #61	; 0x3d
    1c14:	4907      	ldr	r1, [pc, #28]	; (1c34 <pwm_init+0x30>)
    1c16:	4b08      	ldr	r3, [pc, #32]	; (1c38 <pwm_init+0x34>)
    1c18:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1c1a:	4629      	mov	r1, r5
    1c1c:	4620      	mov	r0, r4
    1c1e:	4b07      	ldr	r3, [pc, #28]	; (1c3c <pwm_init+0x38>)
    1c20:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1c22:	4b07      	ldr	r3, [pc, #28]	; (1c40 <pwm_init+0x3c>)
    1c24:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1c26:	4b07      	ldr	r3, [pc, #28]	; (1c44 <pwm_init+0x40>)
    1c28:	6063      	str	r3, [r4, #4]
}
    1c2a:	2000      	movs	r0, #0
    1c2c:	bd38      	pop	{r3, r4, r5, pc}
    1c2e:	2000      	movs	r0, #0
    1c30:	e7ef      	b.n	1c12 <pwm_init+0xe>
    1c32:	bf00      	nop
    1c34:	00006b04 	.word	0x00006b04
    1c38:	00001d65 	.word	0x00001d65
    1c3c:	00003029 	.word	0x00003029
    1c40:	00001bf1 	.word	0x00001bf1
    1c44:	00001bfb 	.word	0x00001bfb

00001c48 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c4a:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1c4c:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    1c4e:	b12f      	cbz	r7, 1c5c <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    1c50:	688d      	ldr	r5, [r1, #8]
    1c52:	463c      	mov	r4, r7
    1c54:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1c56:	f1c2 0e01 	rsb	lr, r2, #1
    1c5a:	e00b      	b.n	1c74 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1c5c:	4b0e      	ldr	r3, [pc, #56]	; (1c98 <timer_add_timer_task+0x50>)
    1c5e:	4798      	blx	r3
		return;
    1c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1c62:	4473      	add	r3, lr
    1c64:	68a0      	ldr	r0, [r4, #8]
    1c66:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1c68:	42ab      	cmp	r3, r5
    1c6a:	d20a      	bcs.n	1c82 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1c6c:	6823      	ldr	r3, [r4, #0]
    1c6e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    1c70:	b153      	cbz	r3, 1c88 <timer_add_timer_task+0x40>
    1c72:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1c74:	6863      	ldr	r3, [r4, #4]
    1c76:	4293      	cmp	r3, r2
    1c78:	d8f3      	bhi.n	1c62 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1c7a:	68a0      	ldr	r0, [r4, #8]
    1c7c:	4403      	add	r3, r0
    1c7e:	1a9b      	subs	r3, r3, r2
    1c80:	e7f2      	b.n	1c68 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    1c82:	42a7      	cmp	r7, r4
    1c84:	d004      	beq.n	1c90 <timer_add_timer_task+0x48>
    1c86:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    1c88:	4620      	mov	r0, r4
    1c8a:	4b04      	ldr	r3, [pc, #16]	; (1c9c <timer_add_timer_task+0x54>)
    1c8c:	4798      	blx	r3
    1c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    1c90:	4660      	mov	r0, ip
    1c92:	4b01      	ldr	r3, [pc, #4]	; (1c98 <timer_add_timer_task+0x50>)
    1c94:	4798      	blx	r3
    1c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c98:	00001d8d 	.word	0x00001d8d
    1c9c:	00001db9 	.word	0x00001db9

00001ca0 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    1ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    1ca4:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    1ca6:	6907      	ldr	r7, [r0, #16]
    1ca8:	3701      	adds	r7, #1
    1caa:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    1cac:	7e03      	ldrb	r3, [r0, #24]
    1cae:	f013 0f01 	tst.w	r3, #1
    1cb2:	d113      	bne.n	1cdc <timer_process_counted+0x3c>
    1cb4:	7e03      	ldrb	r3, [r0, #24]
    1cb6:	f013 0f02 	tst.w	r3, #2
    1cba:	d10f      	bne.n	1cdc <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    1cbc:	b354      	cbz	r4, 1d14 <timer_process_counted+0x74>
    1cbe:	6863      	ldr	r3, [r4, #4]
    1cc0:	1afb      	subs	r3, r7, r3
    1cc2:	68a2      	ldr	r2, [r4, #8]
    1cc4:	4293      	cmp	r3, r2
    1cc6:	d307      	bcc.n	1cd8 <timer_process_counted+0x38>
    1cc8:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    1cca:	f100 0814 	add.w	r8, r0, #20
    1cce:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1d18 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    1cd2:	f8df a048 	ldr.w	sl, [pc, #72]	; 1d1c <timer_process_counted+0x7c>
    1cd6:	e012      	b.n	1cfe <timer_process_counted+0x5e>
    1cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    1cdc:	7e03      	ldrb	r3, [r0, #24]
    1cde:	f043 0302 	orr.w	r3, r3, #2
    1ce2:	7603      	strb	r3, [r0, #24]
		return;
    1ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ce8:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1cea:	68e3      	ldr	r3, [r4, #12]
    1cec:	4620      	mov	r0, r4
    1cee:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    1cf0:	b185      	cbz	r5, 1d14 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    1cf2:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1cf4:	686b      	ldr	r3, [r5, #4]
    1cf6:	1afb      	subs	r3, r7, r3
    1cf8:	68aa      	ldr	r2, [r5, #8]
    1cfa:	4293      	cmp	r3, r2
    1cfc:	d30a      	bcc.n	1d14 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    1cfe:	4640      	mov	r0, r8
    1d00:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    1d02:	7c23      	ldrb	r3, [r4, #16]
    1d04:	2b01      	cmp	r3, #1
    1d06:	d1ef      	bne.n	1ce8 <timer_process_counted+0x48>
			tmp->time_label = time;
    1d08:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1d0a:	463a      	mov	r2, r7
    1d0c:	4621      	mov	r1, r4
    1d0e:	4640      	mov	r0, r8
    1d10:	47d0      	blx	sl
    1d12:	e7e9      	b.n	1ce8 <timer_process_counted+0x48>
    1d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1d18:	00001dc1 	.word	0x00001dc1
    1d1c:	00001c49 	.word	0x00001c49

00001d20 <timer_init>:
{
    1d20:	b570      	push	{r4, r5, r6, lr}
    1d22:	460e      	mov	r6, r1
    1d24:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    1d26:	4604      	mov	r4, r0
    1d28:	b190      	cbz	r0, 1d50 <timer_init+0x30>
    1d2a:	b199      	cbz	r1, 1d54 <timer_init+0x34>
    1d2c:	1c10      	adds	r0, r2, #0
    1d2e:	bf18      	it	ne
    1d30:	2001      	movne	r0, #1
    1d32:	2245      	movs	r2, #69	; 0x45
    1d34:	4908      	ldr	r1, [pc, #32]	; (1d58 <timer_init+0x38>)
    1d36:	4b09      	ldr	r3, [pc, #36]	; (1d5c <timer_init+0x3c>)
    1d38:	4798      	blx	r3
	descr->func = func;
    1d3a:	4620      	mov	r0, r4
    1d3c:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    1d40:	682b      	ldr	r3, [r5, #0]
    1d42:	4631      	mov	r1, r6
    1d44:	4798      	blx	r3
	descr->time                           = 0;
    1d46:	2000      	movs	r0, #0
    1d48:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1d4a:	4b05      	ldr	r3, [pc, #20]	; (1d60 <timer_init+0x40>)
    1d4c:	6063      	str	r3, [r4, #4]
}
    1d4e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    1d50:	2000      	movs	r0, #0
    1d52:	e7ee      	b.n	1d32 <timer_init+0x12>
    1d54:	2000      	movs	r0, #0
    1d56:	e7ec      	b.n	1d32 <timer_init+0x12>
    1d58:	00006b1c 	.word	0x00006b1c
    1d5c:	00001d65 	.word	0x00001d65
    1d60:	00001ca1 	.word	0x00001ca1

00001d64 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1d64:	b900      	cbnz	r0, 1d68 <assert+0x4>
		__asm("BKPT #0");
    1d66:	be00      	bkpt	0x0000
    1d68:	4770      	bx	lr

00001d6a <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1d6a:	6803      	ldr	r3, [r0, #0]
    1d6c:	b14b      	cbz	r3, 1d82 <is_list_element+0x18>
		if (it == element) {
    1d6e:	428b      	cmp	r3, r1
    1d70:	d009      	beq.n	1d86 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    1d72:	681b      	ldr	r3, [r3, #0]
    1d74:	b11b      	cbz	r3, 1d7e <is_list_element+0x14>
		if (it == element) {
    1d76:	4299      	cmp	r1, r3
    1d78:	d1fb      	bne.n	1d72 <is_list_element+0x8>
			return true;
    1d7a:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1d7c:	4770      	bx	lr
	return false;
    1d7e:	2000      	movs	r0, #0
    1d80:	4770      	bx	lr
    1d82:	2000      	movs	r0, #0
    1d84:	4770      	bx	lr
			return true;
    1d86:	2001      	movs	r0, #1
    1d88:	4770      	bx	lr
	...

00001d8c <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    1d8c:	b538      	push	{r3, r4, r5, lr}
    1d8e:	4604      	mov	r4, r0
    1d90:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    1d92:	4b06      	ldr	r3, [pc, #24]	; (1dac <list_insert_as_head+0x20>)
    1d94:	4798      	blx	r3
    1d96:	f080 0001 	eor.w	r0, r0, #1
    1d9a:	2243      	movs	r2, #67	; 0x43
    1d9c:	4904      	ldr	r1, [pc, #16]	; (1db0 <list_insert_as_head+0x24>)
    1d9e:	b2c0      	uxtb	r0, r0
    1da0:	4b04      	ldr	r3, [pc, #16]	; (1db4 <list_insert_as_head+0x28>)
    1da2:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    1da4:	6823      	ldr	r3, [r4, #0]
    1da6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    1da8:	6025      	str	r5, [r4, #0]
    1daa:	bd38      	pop	{r3, r4, r5, pc}
    1dac:	00001d6b 	.word	0x00001d6b
    1db0:	00006b34 	.word	0x00006b34
    1db4:	00001d65 	.word	0x00001d65

00001db8 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    1db8:	6803      	ldr	r3, [r0, #0]
    1dba:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    1dbc:	6001      	str	r1, [r0, #0]
    1dbe:	4770      	bx	lr

00001dc0 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    1dc0:	6803      	ldr	r3, [r0, #0]
    1dc2:	b10b      	cbz	r3, 1dc8 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    1dc4:	681a      	ldr	r2, [r3, #0]
    1dc6:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    1dc8:	4618      	mov	r0, r3
    1dca:	4770      	bx	lr

00001dcc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1dcc:	b570      	push	{r4, r5, r6, lr}
    1dce:	460e      	mov	r6, r1
    1dd0:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
    1dd2:	4604      	mov	r4, r0
    1dd4:	b178      	cbz	r0, 1df6 <ringbuffer_init+0x2a>
    1dd6:	b181      	cbz	r1, 1dfa <ringbuffer_init+0x2e>
    1dd8:	b1a2      	cbz	r2, 1e04 <ringbuffer_init+0x38>
    1dda:	2001      	movs	r0, #1
    1ddc:	2232      	movs	r2, #50	; 0x32
    1dde:	490d      	ldr	r1, [pc, #52]	; (1e14 <ringbuffer_init+0x48>)
    1de0:	4b0d      	ldr	r3, [pc, #52]	; (1e18 <ringbuffer_init+0x4c>)
    1de2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    1de4:	1e6b      	subs	r3, r5, #1
    1de6:	421d      	tst	r5, r3
    1de8:	d109      	bne.n	1dfe <ringbuffer_init+0x32>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    1dea:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
    1dec:	2000      	movs	r0, #0
    1dee:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
    1df0:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
    1df2:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
    1df4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1df6:	2000      	movs	r0, #0
    1df8:	e7f0      	b.n	1ddc <ringbuffer_init+0x10>
    1dfa:	2000      	movs	r0, #0
    1dfc:	e7ee      	b.n	1ddc <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
    1dfe:	f06f 000c 	mvn.w	r0, #12
    1e02:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
    1e04:	2232      	movs	r2, #50	; 0x32
    1e06:	4903      	ldr	r1, [pc, #12]	; (1e14 <ringbuffer_init+0x48>)
    1e08:	2000      	movs	r0, #0
    1e0a:	4b03      	ldr	r3, [pc, #12]	; (1e18 <ringbuffer_init+0x4c>)
    1e0c:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
    1e0e:	1e6b      	subs	r3, r5, #1
    1e10:	e7eb      	b.n	1dea <ringbuffer_init+0x1e>
    1e12:	bf00      	nop
    1e14:	00006b54 	.word	0x00006b54
    1e18:	00001d65 	.word	0x00001d65

00001e1c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1e1c:	b538      	push	{r3, r4, r5, lr}
    1e1e:	460d      	mov	r5, r1
	ASSERT(rb && data);
    1e20:	4604      	mov	r4, r0
    1e22:	b1a0      	cbz	r0, 1e4e <ringbuffer_get+0x32>
    1e24:	1c08      	adds	r0, r1, #0
    1e26:	bf18      	it	ne
    1e28:	2001      	movne	r0, #1
    1e2a:	224a      	movs	r2, #74	; 0x4a
    1e2c:	490a      	ldr	r1, [pc, #40]	; (1e58 <ringbuffer_get+0x3c>)
    1e2e:	4b0b      	ldr	r3, [pc, #44]	; (1e5c <ringbuffer_get+0x40>)
    1e30:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1e32:	68a3      	ldr	r3, [r4, #8]
    1e34:	68e2      	ldr	r2, [r4, #12]
    1e36:	429a      	cmp	r2, r3
    1e38:	d00b      	beq.n	1e52 <ringbuffer_get+0x36>
		*data = rb->buf[rb->read_index & rb->size];
    1e3a:	6862      	ldr	r2, [r4, #4]
    1e3c:	4013      	ands	r3, r2
    1e3e:	6822      	ldr	r2, [r4, #0]
    1e40:	5cd3      	ldrb	r3, [r2, r3]
    1e42:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
    1e44:	68a3      	ldr	r3, [r4, #8]
    1e46:	3301      	adds	r3, #1
    1e48:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
    1e4a:	2000      	movs	r0, #0
    1e4c:	bd38      	pop	{r3, r4, r5, pc}
    1e4e:	2000      	movs	r0, #0
    1e50:	e7eb      	b.n	1e2a <ringbuffer_get+0xe>
	}

	return ERR_NOT_FOUND;
    1e52:	f06f 0009 	mvn.w	r0, #9
}
    1e56:	bd38      	pop	{r3, r4, r5, pc}
    1e58:	00006b54 	.word	0x00006b54
    1e5c:	00001d65 	.word	0x00001d65

00001e60 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1e60:	b538      	push	{r3, r4, r5, lr}
    1e62:	460d      	mov	r5, r1
	ASSERT(rb);
    1e64:	4604      	mov	r4, r0
    1e66:	225b      	movs	r2, #91	; 0x5b
    1e68:	490b      	ldr	r1, [pc, #44]	; (1e98 <ringbuffer_put+0x38>)
    1e6a:	3000      	adds	r0, #0
    1e6c:	bf18      	it	ne
    1e6e:	2001      	movne	r0, #1
    1e70:	4b0a      	ldr	r3, [pc, #40]	; (1e9c <ringbuffer_put+0x3c>)
    1e72:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1e74:	68e3      	ldr	r3, [r4, #12]
    1e76:	6862      	ldr	r2, [r4, #4]
    1e78:	4013      	ands	r3, r2
    1e7a:	6822      	ldr	r2, [r4, #0]
    1e7c:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    1e7e:	68e3      	ldr	r3, [r4, #12]
    1e80:	6861      	ldr	r1, [r4, #4]
    1e82:	68a2      	ldr	r2, [r4, #8]
    1e84:	1a9a      	subs	r2, r3, r2
    1e86:	428a      	cmp	r2, r1
		rb->read_index = rb->write_index - rb->size;
    1e88:	bf84      	itt	hi
    1e8a:	1a59      	subhi	r1, r3, r1
    1e8c:	60a1      	strhi	r1, [r4, #8]
	}

	rb->write_index++;
    1e8e:	3301      	adds	r3, #1
    1e90:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
    1e92:	2000      	movs	r0, #0
    1e94:	bd38      	pop	{r3, r4, r5, pc}
    1e96:	bf00      	nop
    1e98:	00006b54 	.word	0x00006b54
    1e9c:	00001d65 	.word	0x00001d65

00001ea0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    1ea0:	b510      	push	{r4, lr}
	ASSERT(rb);
    1ea2:	4604      	mov	r4, r0
    1ea4:	2271      	movs	r2, #113	; 0x71
    1ea6:	4905      	ldr	r1, [pc, #20]	; (1ebc <ringbuffer_num+0x1c>)
    1ea8:	3000      	adds	r0, #0
    1eaa:	bf18      	it	ne
    1eac:	2001      	movne	r0, #1
    1eae:	4b04      	ldr	r3, [pc, #16]	; (1ec0 <ringbuffer_num+0x20>)
    1eb0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1eb2:	68e0      	ldr	r0, [r4, #12]
    1eb4:	68a3      	ldr	r3, [r4, #8]
}
    1eb6:	1ac0      	subs	r0, r0, r3
    1eb8:	bd10      	pop	{r4, pc}
    1eba:	bf00      	nop
    1ebc:	00006b54 	.word	0x00006b54
    1ec0:	00001d65 	.word	0x00001d65

00001ec4 <ringbuffer_flush>:

/**
 * \brief Flush ringbuffer
 */
uint32_t ringbuffer_flush(struct ringbuffer *const rb)
{
    1ec4:	b510      	push	{r4, lr}
	ASSERT(rb);
    1ec6:	4604      	mov	r4, r0
    1ec8:	227b      	movs	r2, #123	; 0x7b
    1eca:	4905      	ldr	r1, [pc, #20]	; (1ee0 <ringbuffer_flush+0x1c>)
    1ecc:	3000      	adds	r0, #0
    1ece:	bf18      	it	ne
    1ed0:	2001      	movne	r0, #1
    1ed2:	4b04      	ldr	r3, [pc, #16]	; (1ee4 <ringbuffer_flush+0x20>)
    1ed4:	4798      	blx	r3

	rb->read_index = rb->write_index;
    1ed6:	68e3      	ldr	r3, [r4, #12]
    1ed8:	60a3      	str	r3, [r4, #8]

	return ERR_NONE;
}
    1eda:	2000      	movs	r0, #0
    1edc:	bd10      	pop	{r4, pc}
    1ede:	bf00      	nop
    1ee0:	00006b54 	.word	0x00006b54
    1ee4:	00001d65 	.word	0x00001d65

00001ee8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
    1ee8:	4603      	mov	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
    1eea:	4a06      	ldr	r2, [pc, #24]	; (1f04 <_sbrk+0x1c>)
    1eec:	6812      	ldr	r2, [r2, #0]
    1eee:	b122      	cbz	r2, 1efa <_sbrk+0x12>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1ef0:	4a04      	ldr	r2, [pc, #16]	; (1f04 <_sbrk+0x1c>)
    1ef2:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1ef4:	4403      	add	r3, r0
    1ef6:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
    1ef8:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1efa:	4903      	ldr	r1, [pc, #12]	; (1f08 <_sbrk+0x20>)
    1efc:	4a01      	ldr	r2, [pc, #4]	; (1f04 <_sbrk+0x1c>)
    1efe:	6011      	str	r1, [r2, #0]
    1f00:	e7f6      	b.n	1ef0 <_sbrk+0x8>
    1f02:	bf00      	nop
    1f04:	20000788 	.word	0x20000788
    1f08:	200134a8 	.word	0x200134a8

00001f0c <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    1f0c:	b510      	push	{r4, lr}
    1f0e:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    1f10:	f44f 7281 	mov.w	r2, #258	; 0x102
    1f14:	4915      	ldr	r1, [pc, #84]	; (1f6c <_ac_init+0x60>)
    1f16:	4816      	ldr	r0, [pc, #88]	; (1f70 <_ac_init+0x64>)
    1f18:	4284      	cmp	r4, r0
    1f1a:	bf14      	ite	ne
    1f1c:	2000      	movne	r0, #0
    1f1e:	2001      	moveq	r0, #1
    1f20:	4b14      	ldr	r3, [pc, #80]	; (1f74 <_ac_init+0x68>)
    1f22:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1f24:	6a23      	ldr	r3, [r4, #32]
    1f26:	f013 0f01 	tst.w	r3, #1
    1f2a:	d1fb      	bne.n	1f24 <_ac_init+0x18>
    1f2c:	6a23      	ldr	r3, [r4, #32]
    1f2e:	f013 0f03 	tst.w	r3, #3
    1f32:	d1fb      	bne.n	1f2c <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1f34:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    1f36:	f013 0f02 	tst.w	r3, #2
    1f3a:	d114      	bne.n	1f66 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1f3c:	6a23      	ldr	r3, [r4, #32]
    1f3e:	f013 0f01 	tst.w	r3, #1
    1f42:	d1fb      	bne.n	1f3c <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    1f44:	7823      	ldrb	r3, [r4, #0]
    1f46:	f043 0301 	orr.w	r3, r3, #1
    1f4a:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1f4c:	6a23      	ldr	r3, [r4, #32]
    1f4e:	f013 0f01 	tst.w	r3, #1
    1f52:	d1fb      	bne.n	1f4c <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1f54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1f58:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    1f5a:	2000      	movs	r0, #0
    1f5c:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1f5e:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    1f60:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    1f62:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    1f64:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1f66:	f06f 0010 	mvn.w	r0, #16
}
    1f6a:	bd10      	pop	{r4, pc}
    1f6c:	00006b78 	.word	0x00006b78
    1f70:	42002000 	.word	0x42002000
    1f74:	00001d65 	.word	0x00001d65

00001f78 <_ac_sync_init>:
{
    1f78:	b538      	push	{r3, r4, r5, lr}
    1f7a:	460c      	mov	r4, r1
	ASSERT(device);
    1f7c:	4605      	mov	r5, r0
    1f7e:	226c      	movs	r2, #108	; 0x6c
    1f80:	4905      	ldr	r1, [pc, #20]	; (1f98 <_ac_sync_init+0x20>)
    1f82:	3000      	adds	r0, #0
    1f84:	bf18      	it	ne
    1f86:	2001      	movne	r0, #1
    1f88:	4b04      	ldr	r3, [pc, #16]	; (1f9c <_ac_sync_init+0x24>)
    1f8a:	4798      	blx	r3
	device->hw = hw;
    1f8c:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    1f8e:	4620      	mov	r0, r4
    1f90:	4b03      	ldr	r3, [pc, #12]	; (1fa0 <_ac_sync_init+0x28>)
    1f92:	4798      	blx	r3
}
    1f94:	bd38      	pop	{r3, r4, r5, pc}
    1f96:	bf00      	nop
    1f98:	00006b78 	.word	0x00006b78
    1f9c:	00001d65 	.word	0x00001d65
    1fa0:	00001f0d 	.word	0x00001f0d

00001fa4 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1fa4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fa6:	f013 0f01 	tst.w	r3, #1
    1faa:	d1fb      	bne.n	1fa4 <_adc_init>
    1fac:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fae:	f013 0f03 	tst.w	r3, #3
    1fb2:	d1fb      	bne.n	1fac <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1fb4:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    1fb6:	f013 0f02 	tst.w	r3, #2
    1fba:	d12a      	bne.n	2012 <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1fbc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fbe:	f013 0f01 	tst.w	r3, #1
    1fc2:	d1fb      	bne.n	1fbc <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    1fc4:	8803      	ldrh	r3, [r0, #0]
    1fc6:	b29b      	uxth	r3, r3
    1fc8:	f043 0301 	orr.w	r3, r3, #1
    1fcc:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1fce:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1fd0:	f013 0f01 	tst.w	r3, #1
    1fd4:	d1fb      	bne.n	1fce <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    1fd6:	2216      	movs	r2, #22
    1fd8:	4b0f      	ldr	r3, [pc, #60]	; (2018 <_adc_init+0x74>)
    1fda:	fb02 3101 	mla	r1, r2, r1, r3
    1fde:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    1fe0:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    1fe2:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    1fe4:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    1fe6:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    1fe8:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    1fea:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    1fec:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    1fee:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    1ff0:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    1ff2:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    1ff4:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    1ff6:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    1ff8:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    1ffa:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    1ffc:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    1ffe:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    2000:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    2002:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    2004:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    2006:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    2008:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    200a:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    200c:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    200e:	2000      	movs	r0, #0
    2010:	4770      	bx	lr
		return ERR_DENIED;
    2012:	f06f 0010 	mvn.w	r0, #16
}
    2016:	4770      	bx	lr
    2018:	00006b8c 	.word	0x00006b8c

0000201c <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    201c:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    2020:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    2024:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    2028:	b148      	cbz	r0, 203e <_adc_get_regs+0x22>
    202a:	2801      	cmp	r0, #1
    202c:	d009      	beq.n	2042 <_adc_get_regs+0x26>
{
    202e:	b508      	push	{r3, lr}
	ASSERT(false);
    2030:	2291      	movs	r2, #145	; 0x91
    2032:	4905      	ldr	r1, [pc, #20]	; (2048 <_adc_get_regs+0x2c>)
    2034:	2000      	movs	r0, #0
    2036:	4b05      	ldr	r3, [pc, #20]	; (204c <_adc_get_regs+0x30>)
    2038:	4798      	blx	r3
	return 0;
    203a:	2000      	movs	r0, #0
    203c:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    203e:	2000      	movs	r0, #0
    2040:	4770      	bx	lr
    2042:	2001      	movs	r0, #1
    2044:	4770      	bx	lr
    2046:	bf00      	nop
    2048:	00006bb8 	.word	0x00006bb8
    204c:	00001d65 	.word	0x00001d65

00002050 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    2050:	b538      	push	{r3, r4, r5, lr}
    2052:	460c      	mov	r4, r1
	ASSERT(device);
    2054:	4605      	mov	r5, r0
    2056:	22d5      	movs	r2, #213	; 0xd5
    2058:	4907      	ldr	r1, [pc, #28]	; (2078 <_adc_sync_init+0x28>)
    205a:	3000      	adds	r0, #0
    205c:	bf18      	it	ne
    205e:	2001      	movne	r0, #1
    2060:	4b06      	ldr	r3, [pc, #24]	; (207c <_adc_sync_init+0x2c>)
    2062:	4798      	blx	r3

	device->hw = hw;
    2064:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    2066:	4620      	mov	r0, r4
    2068:	4b05      	ldr	r3, [pc, #20]	; (2080 <_adc_sync_init+0x30>)
    206a:	4798      	blx	r3
    206c:	4601      	mov	r1, r0
    206e:	4620      	mov	r0, r4
    2070:	4b04      	ldr	r3, [pc, #16]	; (2084 <_adc_sync_init+0x34>)
    2072:	4798      	blx	r3
}
    2074:	bd38      	pop	{r3, r4, r5, pc}
    2076:	bf00      	nop
    2078:	00006bb8 	.word	0x00006bb8
    207c:	00001d65 	.word	0x00001d65
    2080:	0000201d 	.word	0x0000201d
    2084:	00001fa5 	.word	0x00001fa5

00002088 <_irq_set>:
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2088:	0943      	lsrs	r3, r0, #5
    208a:	f000 001f 	and.w	r0, r0, #31
    208e:	2201      	movs	r2, #1
    2090:	fa02 f000 	lsl.w	r0, r2, r0
    2094:	3340      	adds	r3, #64	; 0x40
    2096:	4a02      	ldr	r2, [pc, #8]	; (20a0 <_irq_set+0x18>)
    2098:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    209c:	4770      	bx	lr
    209e:	bf00      	nop
    20a0:	e000e100 	.word	0xe000e100

000020a4 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    20a4:	f64b 3380 	movw	r3, #48000	; 0xbb80
    20a8:	fb03 f000 	mul.w	r0, r3, r0
    20ac:	4770      	bx	lr
	...

000020b0 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    20b0:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    20b2:	4a0c      	ldr	r2, [pc, #48]	; (20e4 <_init_chip+0x34>)
    20b4:	8813      	ldrh	r3, [r2, #0]
    20b6:	b29b      	uxth	r3, r3
    20b8:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    20ba:	4b0b      	ldr	r3, [pc, #44]	; (20e8 <_init_chip+0x38>)
    20bc:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    20be:	4b0b      	ldr	r3, [pc, #44]	; (20ec <_init_chip+0x3c>)
    20c0:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    20c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    20c6:	4c0a      	ldr	r4, [pc, #40]	; (20f0 <_init_chip+0x40>)
    20c8:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    20ca:	4b0a      	ldr	r3, [pc, #40]	; (20f4 <_init_chip+0x44>)
    20cc:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    20ce:	f240 70ff 	movw	r0, #2047	; 0x7ff
    20d2:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    20d4:	4a08      	ldr	r2, [pc, #32]	; (20f8 <_init_chip+0x48>)
    20d6:	6913      	ldr	r3, [r2, #16]
    20d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    20dc:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    20de:	4b07      	ldr	r3, [pc, #28]	; (20fc <_init_chip+0x4c>)
    20e0:	4798      	blx	r3
    20e2:	bd10      	pop	{r4, pc}
    20e4:	41004000 	.word	0x41004000
    20e8:	00002581 	.word	0x00002581
    20ec:	000024a9 	.word	0x000024a9
    20f0:	00002401 	.word	0x00002401
    20f4:	000025ad 	.word	0x000025ad
    20f8:	40000800 	.word	0x40000800
    20fc:	00002209 	.word	0x00002209

00002100 <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    2100:	b510      	push	{r4, lr}
    2102:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    2104:	22f3      	movs	r2, #243	; 0xf3
    2106:	4915      	ldr	r1, [pc, #84]	; (215c <_dac_init+0x5c>)
    2108:	4815      	ldr	r0, [pc, #84]	; (2160 <_dac_init+0x60>)
    210a:	4284      	cmp	r4, r0
    210c:	bf14      	ite	ne
    210e:	2000      	movne	r0, #0
    2110:	2001      	moveq	r0, #1
    2112:	4b14      	ldr	r3, [pc, #80]	; (2164 <_dac_init+0x64>)
    2114:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    2116:	68a3      	ldr	r3, [r4, #8]
    2118:	f013 0f01 	tst.w	r3, #1
    211c:	d1fb      	bne.n	2116 <_dac_init+0x16>
    211e:	68a3      	ldr	r3, [r4, #8]
    2120:	f013 0f03 	tst.w	r3, #3
    2124:	d1fb      	bne.n	211e <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    2126:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    2128:	f013 0f02 	tst.w	r3, #2
    212c:	d113      	bne.n	2156 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    212e:	68a3      	ldr	r3, [r4, #8]
    2130:	f013 0f01 	tst.w	r3, #1
    2134:	d1fb      	bne.n	212e <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    2136:	7823      	ldrb	r3, [r4, #0]
    2138:	f043 0301 	orr.w	r3, r3, #1
    213c:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    213e:	68a3      	ldr	r3, [r4, #8]
    2140:	f013 0f01 	tst.w	r3, #1
    2144:	d1fb      	bne.n	213e <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    2146:	2000      	movs	r0, #0
    2148:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    214a:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    214c:	81a0      	strh	r0, [r4, #12]
    214e:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    2150:	2301      	movs	r3, #1
    2152:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    2154:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    2156:	f06f 0003 	mvn.w	r0, #3
}
    215a:	bd10      	pop	{r4, pc}
    215c:	00006bd0 	.word	0x00006bd0
    2160:	43002400 	.word	0x43002400
    2164:	00001d65 	.word	0x00001d65

00002168 <_dac_sync_init>:
{
    2168:	b538      	push	{r3, r4, r5, lr}
    216a:	460c      	mov	r4, r1
	ASSERT(device);
    216c:	4605      	mov	r5, r0
    216e:	2261      	movs	r2, #97	; 0x61
    2170:	4905      	ldr	r1, [pc, #20]	; (2188 <_dac_sync_init+0x20>)
    2172:	3000      	adds	r0, #0
    2174:	bf18      	it	ne
    2176:	2001      	movne	r0, #1
    2178:	4b04      	ldr	r3, [pc, #16]	; (218c <_dac_sync_init+0x24>)
    217a:	4798      	blx	r3
	device->hw = hw;
    217c:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    217e:	4620      	mov	r0, r4
    2180:	4b03      	ldr	r3, [pc, #12]	; (2190 <_dac_sync_init+0x28>)
    2182:	4798      	blx	r3
}
    2184:	bd38      	pop	{r3, r4, r5, pc}
    2186:	bf00      	nop
    2188:	00006bd0 	.word	0x00006bd0
    218c:	00001d65 	.word	0x00001d65
    2190:	00002101 	.word	0x00002101

00002194 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    2194:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    2196:	4a1a      	ldr	r2, [pc, #104]	; (2200 <_dmac_handler+0x6c>)
    2198:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    219a:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    219e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    21a2:	4818      	ldr	r0, [pc, #96]	; (2204 <_dmac_handler+0x70>)
    21a4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    21a8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    21ac:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    21b0:	f012 0f01 	tst.w	r2, #1
    21b4:	d10a      	bne.n	21cc <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    21b6:	011a      	lsls	r2, r3, #4
    21b8:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    21bc:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    21c0:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    21c4:	f012 0f02 	tst.w	r2, #2
    21c8:	d10b      	bne.n	21e2 <_dmac_handler+0x4e>
    21ca:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    21cc:	011a      	lsls	r2, r3, #4
    21ce:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    21d2:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    21d6:	2101      	movs	r1, #1
    21d8:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    21dc:	6843      	ldr	r3, [r0, #4]
    21de:	4798      	blx	r3
    21e0:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    21e2:	011a      	lsls	r2, r3, #4
    21e4:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    21e8:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    21ec:	2102      	movs	r1, #2
    21ee:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    21f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    21f6:	4a03      	ldr	r2, [pc, #12]	; (2204 <_dmac_handler+0x70>)
    21f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    21fc:	4798      	blx	r3
	}
}
    21fe:	e7e4      	b.n	21ca <_dmac_handler+0x36>
    2200:	4100a000 	.word	0x4100a000
    2204:	20000790 	.word	0x20000790

00002208 <_dma_init>:
{
    2208:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    220a:	4a33      	ldr	r2, [pc, #204]	; (22d8 <_dma_init+0xd0>)
    220c:	8813      	ldrh	r3, [r2, #0]
    220e:	f023 0302 	bic.w	r3, r3, #2
    2212:	041b      	lsls	r3, r3, #16
    2214:	0c1b      	lsrs	r3, r3, #16
    2216:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    2218:	8853      	ldrh	r3, [r2, #2]
    221a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    221e:	041b      	lsls	r3, r3, #16
    2220:	0c1b      	lsrs	r3, r3, #16
    2222:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    2224:	8813      	ldrh	r3, [r2, #0]
    2226:	b29b      	uxth	r3, r3
    2228:	f043 0301 	orr.w	r3, r3, #1
    222c:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    222e:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2230:	f013 0f01 	tst.w	r3, #1
    2234:	d1fb      	bne.n	222e <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    2236:	4b28      	ldr	r3, [pc, #160]	; (22d8 <_dma_init+0xd0>)
    2238:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    223c:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    223e:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    2240:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    2244:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    2246:	2000      	movs	r0, #0
    2248:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    224a:	4a24      	ldr	r2, [pc, #144]	; (22dc <_dma_init+0xd4>)
    224c:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    2250:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    2252:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    2256:	639a      	str	r2, [r3, #56]	; 0x38
    2258:	4b21      	ldr	r3, [pc, #132]	; (22e0 <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    225a:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    225e:	681c      	ldr	r4, [r3, #0]
    2260:	0101      	lsls	r1, r0, #4
    2262:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    2266:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    226a:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    226c:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    226e:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    2272:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    2274:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    2278:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    227a:	4429      	add	r1, r5
    227c:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    2280:	3001      	adds	r0, #1
    2282:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    2284:	2820      	cmp	r0, #32
    2286:	d1ea      	bne.n	225e <_dma_init+0x56>
    2288:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    228a:	2001      	movs	r0, #1
    228c:	4915      	ldr	r1, [pc, #84]	; (22e4 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    228e:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    2290:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2294:	d00b      	beq.n	22ae <_dma_init+0xa6>
    2296:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    2298:	2b24      	cmp	r3, #36	; 0x24
    229a:	d1f8      	bne.n	228e <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    229c:	4a0e      	ldr	r2, [pc, #56]	; (22d8 <_dma_init+0xd0>)
    229e:	8813      	ldrh	r3, [r2, #0]
    22a0:	b29b      	uxth	r3, r3
    22a2:	f043 0302 	orr.w	r3, r3, #2
    22a6:	8013      	strh	r3, [r2, #0]
}
    22a8:	2000      	movs	r0, #0
    22aa:	bc30      	pop	{r4, r5}
    22ac:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    22ae:	095c      	lsrs	r4, r3, #5
    22b0:	f002 021f 	and.w	r2, r2, #31
    22b4:	fa00 f202 	lsl.w	r2, r0, r2
    22b8:	f104 0520 	add.w	r5, r4, #32
    22bc:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    22c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22c4:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    22c8:	f104 0560 	add.w	r5, r4, #96	; 0x60
    22cc:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    22d0:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    22d4:	e7df      	b.n	2296 <_dma_init+0x8e>
    22d6:	bf00      	nop
    22d8:	4100a000 	.word	0x4100a000
    22dc:	20000790 	.word	0x20000790
    22e0:	00006be8 	.word	0x00006be8
    22e4:	e000e100 	.word	0xe000e100

000022e8 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    22e8:	b508      	push	{r3, lr}
	_dmac_handler();
    22ea:	4b01      	ldr	r3, [pc, #4]	; (22f0 <DMAC_0_Handler+0x8>)
    22ec:	4798      	blx	r3
    22ee:	bd08      	pop	{r3, pc}
    22f0:	00002195 	.word	0x00002195

000022f4 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    22f4:	b508      	push	{r3, lr}
	_dmac_handler();
    22f6:	4b01      	ldr	r3, [pc, #4]	; (22fc <DMAC_1_Handler+0x8>)
    22f8:	4798      	blx	r3
    22fa:	bd08      	pop	{r3, pc}
    22fc:	00002195 	.word	0x00002195

00002300 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    2300:	b508      	push	{r3, lr}
	_dmac_handler();
    2302:	4b01      	ldr	r3, [pc, #4]	; (2308 <DMAC_2_Handler+0x8>)
    2304:	4798      	blx	r3
    2306:	bd08      	pop	{r3, pc}
    2308:	00002195 	.word	0x00002195

0000230c <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    230c:	b508      	push	{r3, lr}
	_dmac_handler();
    230e:	4b01      	ldr	r3, [pc, #4]	; (2314 <DMAC_3_Handler+0x8>)
    2310:	4798      	blx	r3
    2312:	bd08      	pop	{r3, pc}
    2314:	00002195 	.word	0x00002195

00002318 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    2318:	b508      	push	{r3, lr}
	_dmac_handler();
    231a:	4b01      	ldr	r3, [pc, #4]	; (2320 <DMAC_4_Handler+0x8>)
    231c:	4798      	blx	r3
    231e:	bd08      	pop	{r3, pc}
    2320:	00002195 	.word	0x00002195

00002324 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2324:	4a1e      	ldr	r2, [pc, #120]	; (23a0 <_ext_irq_init+0x7c>)
    2326:	6853      	ldr	r3, [r2, #4]
    2328:	f013 0f01 	tst.w	r3, #1
    232c:	d1fb      	bne.n	2326 <_ext_irq_init+0x2>
    232e:	4a1c      	ldr	r2, [pc, #112]	; (23a0 <_ext_irq_init+0x7c>)
    2330:	6853      	ldr	r3, [r2, #4]
    2332:	f013 0f03 	tst.w	r3, #3
    2336:	d1fb      	bne.n	2330 <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    2338:	4b19      	ldr	r3, [pc, #100]	; (23a0 <_ext_irq_init+0x7c>)
    233a:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    233c:	f013 0f02 	tst.w	r3, #2
    2340:	d12b      	bne.n	239a <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2342:	4a17      	ldr	r2, [pc, #92]	; (23a0 <_ext_irq_init+0x7c>)
    2344:	6853      	ldr	r3, [r2, #4]
    2346:	f013 0f01 	tst.w	r3, #1
    234a:	d1fb      	bne.n	2344 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    234c:	4a14      	ldr	r2, [pc, #80]	; (23a0 <_ext_irq_init+0x7c>)
    234e:	7813      	ldrb	r3, [r2, #0]
    2350:	f043 0301 	orr.w	r3, r3, #1
    2354:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2356:	6853      	ldr	r3, [r2, #4]
    2358:	f013 0f01 	tst.w	r3, #1
    235c:	d1fb      	bne.n	2356 <_ext_irq_init+0x32>
    235e:	4a10      	ldr	r2, [pc, #64]	; (23a0 <_ext_irq_init+0x7c>)
    2360:	6853      	ldr	r3, [r2, #4]
    2362:	f013 0f03 	tst.w	r3, #3
    2366:	d1fb      	bne.n	2360 <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    2368:	4b0d      	ldr	r3, [pc, #52]	; (23a0 <_ext_irq_init+0x7c>)
    236a:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    236c:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    2370:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    2372:	2200      	movs	r2, #0
    2374:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2376:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    2378:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    237a:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    237c:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    237e:	61da      	str	r2, [r3, #28]
    2380:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    2382:	461a      	mov	r2, r3
    2384:	6853      	ldr	r3, [r2, #4]
    2386:	f013 0f03 	tst.w	r3, #3
    238a:	d1fb      	bne.n	2384 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    238c:	4a04      	ldr	r2, [pc, #16]	; (23a0 <_ext_irq_init+0x7c>)
    238e:	7813      	ldrb	r3, [r2, #0]
    2390:	f043 0302 	orr.w	r3, r3, #2
    2394:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    2396:	2000      	movs	r0, #0
    2398:	4770      	bx	lr
		return ERR_DENIED;
    239a:	f06f 0010 	mvn.w	r0, #16
}
    239e:	4770      	bx	lr
    23a0:	40002800 	.word	0x40002800

000023a4 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    23a4:	b430      	push	{r4, r5}
    23a6:	4814      	ldr	r0, [pc, #80]	; (23f8 <_event_system_init+0x54>)
    23a8:	f100 0543 	add.w	r5, r0, #67	; 0x43
    23ac:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    23ae:	4c13      	ldr	r4, [pc, #76]	; (23fc <_event_system_init+0x58>)
    23b0:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    23b2:	f813 1b01 	ldrb.w	r1, [r3], #1
    23b6:	3248      	adds	r2, #72	; 0x48
    23b8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    23bc:	42ab      	cmp	r3, r5
    23be:	d1f7      	bne.n	23b0 <_event_system_init+0xc>
    23c0:	480d      	ldr	r0, [pc, #52]	; (23f8 <_event_system_init+0x54>)
    23c2:	f100 0442 	add.w	r4, r0, #66	; 0x42
    23c6:	3080      	adds	r0, #128	; 0x80
    23c8:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    23ca:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    23ce:	00ca      	lsls	r2, r1, #3
    23d0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    23d4:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    23d8:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    23da:	f850 3f04 	ldr.w	r3, [r0, #4]!
    23de:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    23e0:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    23e4:	43db      	mvns	r3, r3
    23e6:	b2db      	uxtb	r3, r3
    23e8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    23ec:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    23ee:	2920      	cmp	r1, #32
    23f0:	d1eb      	bne.n	23ca <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    23f2:	2000      	movs	r0, #0
    23f4:	bc30      	pop	{r4, r5}
    23f6:	4770      	bx	lr
    23f8:	00006ce8 	.word	0x00006ce8
    23fc:	4100e000 	.word	0x4100e000

00002400 <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    2400:	f010 0f01 	tst.w	r0, #1
    2404:	d002      	beq.n	240c <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2406:	4a23      	ldr	r2, [pc, #140]	; (2494 <_gclk_init_generators_by_fref+0x94>)
    2408:	4b23      	ldr	r3, [pc, #140]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    240a:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    240c:	f010 0f02 	tst.w	r0, #2
    2410:	d002      	beq.n	2418 <_gclk_init_generators_by_fref+0x18>
    2412:	4a22      	ldr	r2, [pc, #136]	; (249c <_gclk_init_generators_by_fref+0x9c>)
    2414:	4b20      	ldr	r3, [pc, #128]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    2416:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    2418:	f010 0f04 	tst.w	r0, #4
    241c:	d002      	beq.n	2424 <_gclk_init_generators_by_fref+0x24>
    241e:	4a1d      	ldr	r2, [pc, #116]	; (2494 <_gclk_init_generators_by_fref+0x94>)
    2420:	4b1d      	ldr	r3, [pc, #116]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    2422:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    2424:	f010 0f08 	tst.w	r0, #8
    2428:	d002      	beq.n	2430 <_gclk_init_generators_by_fref+0x30>
    242a:	4a1a      	ldr	r2, [pc, #104]	; (2494 <_gclk_init_generators_by_fref+0x94>)
    242c:	4b1a      	ldr	r3, [pc, #104]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    242e:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    2430:	f010 0f10 	tst.w	r0, #16
    2434:	d002      	beq.n	243c <_gclk_init_generators_by_fref+0x3c>
    2436:	4a17      	ldr	r2, [pc, #92]	; (2494 <_gclk_init_generators_by_fref+0x94>)
    2438:	4b17      	ldr	r3, [pc, #92]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    243a:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    243c:	f010 0f20 	tst.w	r0, #32
    2440:	d002      	beq.n	2448 <_gclk_init_generators_by_fref+0x48>
    2442:	4a14      	ldr	r2, [pc, #80]	; (2494 <_gclk_init_generators_by_fref+0x94>)
    2444:	4b14      	ldr	r3, [pc, #80]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    2446:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    2448:	f010 0f40 	tst.w	r0, #64	; 0x40
    244c:	d002      	beq.n	2454 <_gclk_init_generators_by_fref+0x54>
    244e:	4a11      	ldr	r2, [pc, #68]	; (2494 <_gclk_init_generators_by_fref+0x94>)
    2450:	4b11      	ldr	r3, [pc, #68]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    2452:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    2454:	f010 0f80 	tst.w	r0, #128	; 0x80
    2458:	d002      	beq.n	2460 <_gclk_init_generators_by_fref+0x60>
    245a:	4a0e      	ldr	r2, [pc, #56]	; (2494 <_gclk_init_generators_by_fref+0x94>)
    245c:	4b0e      	ldr	r3, [pc, #56]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    245e:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    2460:	f410 7f80 	tst.w	r0, #256	; 0x100
    2464:	d002      	beq.n	246c <_gclk_init_generators_by_fref+0x6c>
    2466:	4a0b      	ldr	r2, [pc, #44]	; (2494 <_gclk_init_generators_by_fref+0x94>)
    2468:	4b0b      	ldr	r3, [pc, #44]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    246a:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    246c:	f410 7f00 	tst.w	r0, #512	; 0x200
    2470:	d002      	beq.n	2478 <_gclk_init_generators_by_fref+0x78>
    2472:	4a08      	ldr	r2, [pc, #32]	; (2494 <_gclk_init_generators_by_fref+0x94>)
    2474:	4b08      	ldr	r3, [pc, #32]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    2476:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    2478:	f410 6f80 	tst.w	r0, #1024	; 0x400
    247c:	d002      	beq.n	2484 <_gclk_init_generators_by_fref+0x84>
    247e:	4a08      	ldr	r2, [pc, #32]	; (24a0 <_gclk_init_generators_by_fref+0xa0>)
    2480:	4b05      	ldr	r3, [pc, #20]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    2482:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    2484:	f410 6f00 	tst.w	r0, #2048	; 0x800
    2488:	d002      	beq.n	2490 <_gclk_init_generators_by_fref+0x90>
    248a:	4a06      	ldr	r2, [pc, #24]	; (24a4 <_gclk_init_generators_by_fref+0xa4>)
    248c:	4b02      	ldr	r3, [pc, #8]	; (2498 <_gclk_init_generators_by_fref+0x98>)
    248e:	64da      	str	r2, [r3, #76]	; 0x4c
    2490:	4770      	bx	lr
    2492:	bf00      	nop
    2494:	00012b06 	.word	0x00012b06
    2498:	40001c00 	.word	0x40001c00
    249c:	00012306 	.word	0x00012306
    24a0:	00012b05 	.word	0x00012b05
    24a4:	00013b05 	.word	0x00013b05

000024a8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    24a8:	2201      	movs	r2, #1
    24aa:	4b01      	ldr	r3, [pc, #4]	; (24b0 <_mclk_init+0x8>)
    24ac:	715a      	strb	r2, [r3, #5]
    24ae:	4770      	bx	lr
    24b0:	40000800 	.word	0x40000800

000024b4 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    24b4:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    24b6:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    24b8:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    24ba:	f012 0f01 	tst.w	r2, #1
    24be:	d005      	beq.n	24cc <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    24c0:	2201      	movs	r2, #1
    24c2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    24c4:	6803      	ldr	r3, [r0, #0]
    24c6:	b153      	cbz	r3, 24de <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    24c8:	4798      	blx	r3
    24ca:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    24cc:	8a1a      	ldrh	r2, [r3, #16]
    24ce:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    24d0:	b12a      	cbz	r2, 24de <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    24d2:	f240 225e 	movw	r2, #606	; 0x25e
    24d6:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    24d8:	6843      	ldr	r3, [r0, #4]
    24da:	b103      	cbz	r3, 24de <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    24dc:	4798      	blx	r3
    24de:	bd08      	pop	{r3, pc}

000024e0 <_flash_init>:
{
    24e0:	b538      	push	{r3, r4, r5, lr}
    24e2:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    24e4:	4605      	mov	r5, r0
    24e6:	b350      	cbz	r0, 253e <_flash_init+0x5e>
    24e8:	4816      	ldr	r0, [pc, #88]	; (2544 <_flash_init+0x64>)
    24ea:	4281      	cmp	r1, r0
    24ec:	bf14      	ite	ne
    24ee:	2000      	movne	r0, #0
    24f0:	2001      	moveq	r0, #1
    24f2:	2256      	movs	r2, #86	; 0x56
    24f4:	4914      	ldr	r1, [pc, #80]	; (2548 <_flash_init+0x68>)
    24f6:	4b15      	ldr	r3, [pc, #84]	; (254c <_flash_init+0x6c>)
    24f8:	4798      	blx	r3
	device->hw = hw;
    24fa:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    24fc:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    24fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    2502:	049b      	lsls	r3, r3, #18
    2504:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    2506:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    2508:	4b11      	ldr	r3, [pc, #68]	; (2550 <_flash_init+0x70>)
    250a:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    250c:	4b11      	ldr	r3, [pc, #68]	; (2554 <_flash_init+0x74>)
    250e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    2512:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2516:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    251a:	f3bf 8f6f 	isb	sy
    251e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2526:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    252a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    252e:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2532:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2536:	6019      	str	r1, [r3, #0]
    2538:	601a      	str	r2, [r3, #0]
}
    253a:	2000      	movs	r0, #0
    253c:	bd38      	pop	{r3, r4, r5, pc}
    253e:	2000      	movs	r0, #0
    2540:	e7d7      	b.n	24f2 <_flash_init+0x12>
    2542:	bf00      	nop
    2544:	41004000 	.word	0x41004000
    2548:	00006dec 	.word	0x00006dec
    254c:	00001d65 	.word	0x00001d65
    2550:	20000d10 	.word	0x20000d10
    2554:	e000e100 	.word	0xe000e100

00002558 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    2558:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    255a:	4b02      	ldr	r3, [pc, #8]	; (2564 <NVMCTRL_0_Handler+0xc>)
    255c:	6818      	ldr	r0, [r3, #0]
    255e:	4b02      	ldr	r3, [pc, #8]	; (2568 <NVMCTRL_0_Handler+0x10>)
    2560:	4798      	blx	r3
    2562:	bd08      	pop	{r3, pc}
    2564:	20000d10 	.word	0x20000d10
    2568:	000024b5 	.word	0x000024b5

0000256c <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    256c:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    256e:	4b02      	ldr	r3, [pc, #8]	; (2578 <NVMCTRL_1_Handler+0xc>)
    2570:	6818      	ldr	r0, [r3, #0]
    2572:	4b02      	ldr	r3, [pc, #8]	; (257c <NVMCTRL_1_Handler+0x10>)
    2574:	4798      	blx	r3
    2576:	bd08      	pop	{r3, pc}
    2578:	20000d10 	.word	0x20000d10
    257c:	000024b5 	.word	0x000024b5

00002580 <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    2580:	4b09      	ldr	r3, [pc, #36]	; (25a8 <_osc32kctrl_init_sources+0x28>)
    2582:	f242 024e 	movw	r2, #8270	; 0x204e
    2586:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    2588:	2201      	movs	r2, #1
    258a:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    258c:	75da      	strb	r2, [r3, #23]
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    258e:	69da      	ldr	r2, [r3, #28]
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    2590:	2200      	movs	r2, #0
    2592:	61da      	str	r2, [r3, #28]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    2594:	461a      	mov	r2, r3
    2596:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    2598:	f013 0f01 	tst.w	r3, #1
    259c:	d0fb      	beq.n	2596 <_osc32kctrl_init_sources+0x16>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    259e:	2204      	movs	r2, #4
    25a0:	4b01      	ldr	r3, [pc, #4]	; (25a8 <_osc32kctrl_init_sources+0x28>)
    25a2:	741a      	strb	r2, [r3, #16]
    25a4:	4770      	bx	lr
    25a6:	bf00      	nop
    25a8:	40001400 	.word	0x40001400

000025ac <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    25ac:	4a2b      	ldr	r2, [pc, #172]	; (265c <_oscctrl_init_referenced_generators+0xb0>)
    25ae:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    25b0:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    25b4:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    25b8:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    25ba:	4b29      	ldr	r3, [pc, #164]	; (2660 <_oscctrl_init_referenced_generators+0xb4>)
    25bc:	2200      	movs	r2, #0
    25be:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    25c0:	4a28      	ldr	r2, [pc, #160]	; (2664 <_oscctrl_init_referenced_generators+0xb8>)
    25c2:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    25c4:	461a      	mov	r2, r3
    25c6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    25ca:	f013 0f10 	tst.w	r3, #16
    25ce:	d1fa      	bne.n	25c6 <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    25d0:	2200      	movs	r2, #0
    25d2:	4b23      	ldr	r3, [pc, #140]	; (2660 <_oscctrl_init_referenced_generators+0xb4>)
    25d4:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    25d8:	461a      	mov	r2, r3
    25da:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    25de:	f013 0f04 	tst.w	r3, #4
    25e2:	d1fa      	bne.n	25da <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    25e4:	2242      	movs	r2, #66	; 0x42
    25e6:	4b1e      	ldr	r3, [pc, #120]	; (2660 <_oscctrl_init_referenced_generators+0xb4>)
    25e8:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    25ea:	461a      	mov	r2, r3
    25ec:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    25f0:	f013 0f02 	tst.w	r3, #2
    25f4:	d1fa      	bne.n	25ec <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    25f6:	4b1a      	ldr	r3, [pc, #104]	; (2660 <_oscctrl_init_referenced_generators+0xb4>)
    25f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    25fa:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    25fc:	461a      	mov	r2, r3
    25fe:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    2602:	f013 0f08 	tst.w	r3, #8
    2606:	d1fa      	bne.n	25fe <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    2608:	2282      	movs	r2, #130	; 0x82
    260a:	4b15      	ldr	r3, [pc, #84]	; (2660 <_oscctrl_init_referenced_generators+0xb4>)
    260c:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    2610:	461a      	mov	r2, r3
    2612:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    2616:	f013 0f04 	tst.w	r3, #4
    261a:	d1fa      	bne.n	2612 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    261c:	4b10      	ldr	r3, [pc, #64]	; (2660 <_oscctrl_init_referenced_generators+0xb4>)
    261e:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    2622:	f013 0f01 	tst.w	r3, #1
    2626:	d012      	beq.n	264e <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    2628:	4a0d      	ldr	r2, [pc, #52]	; (2660 <_oscctrl_init_referenced_generators+0xb4>)
    262a:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    262c:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    2630:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2634:	d1f9      	bne.n	262a <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    2636:	4a09      	ldr	r2, [pc, #36]	; (265c <_oscctrl_init_referenced_generators+0xb0>)
    2638:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    263a:	2b00      	cmp	r3, #0
    263c:	d1fc      	bne.n	2638 <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    263e:	4a07      	ldr	r2, [pc, #28]	; (265c <_oscctrl_init_referenced_generators+0xb0>)
    2640:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    2642:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    2646:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    264a:	6213      	str	r3, [r2, #32]
    264c:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    264e:	4a04      	ldr	r2, [pc, #16]	; (2660 <_oscctrl_init_referenced_generators+0xb4>)
    2650:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    2652:	f413 7f80 	tst.w	r3, #256	; 0x100
    2656:	d0fb      	beq.n	2650 <_oscctrl_init_referenced_generators+0xa4>
    2658:	e7ed      	b.n	2636 <_oscctrl_init_referenced_generators+0x8a>
    265a:	bf00      	nop
    265c:	40001c00 	.word	0x40001c00
    2660:	40001000 	.word	0x40001000
    2664:	04010000 	.word	0x04010000

00002668 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    2668:	b500      	push	{lr}
    266a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    266c:	4b0d      	ldr	r3, [pc, #52]	; (26a4 <RAMECC_Handler+0x3c>)
    266e:	789b      	ldrb	r3, [r3, #2]
    2670:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    2672:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    2674:	9b01      	ldr	r3, [sp, #4]
    2676:	f013 0f02 	tst.w	r3, #2
    267a:	d006      	beq.n	268a <RAMECC_Handler+0x22>
    267c:	4b0a      	ldr	r3, [pc, #40]	; (26a8 <RAMECC_Handler+0x40>)
    267e:	681b      	ldr	r3, [r3, #0]
    2680:	b11b      	cbz	r3, 268a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    2682:	4a08      	ldr	r2, [pc, #32]	; (26a4 <RAMECC_Handler+0x3c>)
    2684:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    2686:	4798      	blx	r3
    2688:	e009      	b.n	269e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    268a:	9b01      	ldr	r3, [sp, #4]
    268c:	f013 0f01 	tst.w	r3, #1
    2690:	d005      	beq.n	269e <RAMECC_Handler+0x36>
    2692:	4b05      	ldr	r3, [pc, #20]	; (26a8 <RAMECC_Handler+0x40>)
    2694:	685b      	ldr	r3, [r3, #4]
    2696:	b113      	cbz	r3, 269e <RAMECC_Handler+0x36>
    2698:	4a02      	ldr	r2, [pc, #8]	; (26a4 <RAMECC_Handler+0x3c>)
    269a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    269c:	4798      	blx	r3
	} else {
		return;
	}
}
    269e:	b003      	add	sp, #12
    26a0:	f85d fb04 	ldr.w	pc, [sp], #4
    26a4:	41020000 	.word	0x41020000
    26a8:	20003490 	.word	0x20003490

000026ac <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    26ac:	b470      	push	{r4, r5, r6}
    26ae:	b087      	sub	sp, #28
    26b0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    26b2:	466c      	mov	r4, sp
    26b4:	4d0c      	ldr	r5, [pc, #48]	; (26e8 <_sercom_get_hardware_index+0x3c>)
    26b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    26b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    26ba:	e895 0003 	ldmia.w	r5, {r0, r1}
    26be:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    26c2:	9b00      	ldr	r3, [sp, #0]
    26c4:	42b3      	cmp	r3, r6
    26c6:	d00c      	beq.n	26e2 <_sercom_get_hardware_index+0x36>
    26c8:	4632      	mov	r2, r6
    26ca:	2001      	movs	r0, #1
    26cc:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    26d0:	4293      	cmp	r3, r2
    26d2:	d007      	beq.n	26e4 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    26d4:	3001      	adds	r0, #1
    26d6:	2806      	cmp	r0, #6
    26d8:	d1f8      	bne.n	26cc <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    26da:	2000      	movs	r0, #0
}
    26dc:	b007      	add	sp, #28
    26de:	bc70      	pop	{r4, r5, r6}
    26e0:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    26e2:	2000      	movs	r0, #0
			return i;
    26e4:	b2c0      	uxtb	r0, r0
    26e6:	e7f9      	b.n	26dc <_sercom_get_hardware_index+0x30>
    26e8:	00006e0c 	.word	0x00006e0c

000026ec <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    26ec:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    26ee:	4b03      	ldr	r3, [pc, #12]	; (26fc <_sercom_get_irq_num+0x10>)
    26f0:	4798      	blx	r3
    26f2:	0080      	lsls	r0, r0, #2
    26f4:	302e      	adds	r0, #46	; 0x2e
}
    26f6:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    26fa:	bd08      	pop	{r3, pc}
    26fc:	000026ad 	.word	0x000026ad

00002700 <_usart_init>:
{
    2700:	b538      	push	{r3, r4, r5, lr}
    2702:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    2704:	4b33      	ldr	r3, [pc, #204]	; (27d4 <_usart_init+0xd4>)
    2706:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    2708:	2803      	cmp	r0, #3
    270a:	d056      	beq.n	27ba <_usart_init+0xba>
    270c:	2804      	cmp	r0, #4
    270e:	d052      	beq.n	27b6 <_usart_init+0xb6>
    2710:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    2712:	bf08      	it	eq
    2714:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    2716:	d006      	beq.n	2726 <_usart_init+0x26>
	ASSERT(false);
    2718:	f240 2263 	movw	r2, #611	; 0x263
    271c:	492e      	ldr	r1, [pc, #184]	; (27d8 <_usart_init+0xd8>)
    271e:	2000      	movs	r0, #0
    2720:	4b2e      	ldr	r3, [pc, #184]	; (27dc <_usart_init+0xdc>)
    2722:	4798      	blx	r3
	return 0;
    2724:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    2726:	69e3      	ldr	r3, [r4, #28]
    2728:	f013 0f01 	tst.w	r3, #1
    272c:	d1fb      	bne.n	2726 <_usart_init+0x26>
    272e:	69e3      	ldr	r3, [r4, #28]
    2730:	f013 0f03 	tst.w	r3, #3
    2734:	d1fb      	bne.n	272e <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    2736:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    2738:	f013 0f02 	tst.w	r3, #2
    273c:	d147      	bne.n	27ce <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    273e:	69e3      	ldr	r3, [r4, #28]
    2740:	f013 0f01 	tst.w	r3, #1
    2744:	d1fb      	bne.n	273e <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    2746:	6823      	ldr	r3, [r4, #0]
    2748:	f043 0301 	orr.w	r3, r3, #1
    274c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    274e:	69e3      	ldr	r3, [r4, #28]
    2750:	f013 0f01 	tst.w	r3, #1
    2754:	d1fb      	bne.n	274e <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    2756:	4610      	mov	r0, r2
    2758:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    275c:	4920      	ldr	r1, [pc, #128]	; (27e0 <_usart_init+0xe0>)
    275e:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    2762:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    2764:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    2766:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    2768:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    276c:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    276e:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    2772:	d024      	beq.n	27be <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    2774:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    2778:	4b19      	ldr	r3, [pc, #100]	; (27e0 <_usart_init+0xe0>)
    277a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    277e:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    2780:	89a3      	ldrh	r3, [r4, #12]
    2782:	f361 030c 	bfi	r3, r1, #0, #13
    2786:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    2788:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    278c:	89a3      	ldrh	r3, [r4, #12]
    278e:	f362 334f 	bfi	r3, r2, #13, #3
    2792:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    2794:	4b12      	ldr	r3, [pc, #72]	; (27e0 <_usart_init+0xe0>)
    2796:	0042      	lsls	r2, r0, #1
    2798:	1811      	adds	r1, r2, r0
    279a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    279e:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    27a2:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    27a4:	4402      	add	r2, r0
    27a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    27aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    27ae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    27b2:	2000      	movs	r0, #0
    27b4:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    27b6:	2201      	movs	r2, #1
    27b8:	e7b5      	b.n	2726 <_usart_init+0x26>
    27ba:	2200      	movs	r2, #0
    27bc:	e7b3      	b.n	2726 <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    27be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    27c2:	4b07      	ldr	r3, [pc, #28]	; (27e0 <_usart_init+0xe0>)
    27c4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    27c8:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    27ca:	81a3      	strh	r3, [r4, #12]
    27cc:	e7e2      	b.n	2794 <_usart_init+0x94>
		return ERR_DENIED;
    27ce:	f06f 0010 	mvn.w	r0, #16
}
    27d2:	bd38      	pop	{r3, r4, r5, pc}
    27d4:	000026ad 	.word	0x000026ad
    27d8:	00006e98 	.word	0x00006e98
    27dc:	00001d65 	.word	0x00001d65
    27e0:	00006e0c 	.word	0x00006e0c

000027e4 <_usart_async_init>:
{
    27e4:	b570      	push	{r4, r5, r6, lr}
    27e6:	460d      	mov	r5, r1
	ASSERT(device);
    27e8:	4606      	mov	r6, r0
    27ea:	22da      	movs	r2, #218	; 0xda
    27ec:	4916      	ldr	r1, [pc, #88]	; (2848 <_usart_async_init+0x64>)
    27ee:	3000      	adds	r0, #0
    27f0:	bf18      	it	ne
    27f2:	2001      	movne	r0, #1
    27f4:	4b15      	ldr	r3, [pc, #84]	; (284c <_usart_async_init+0x68>)
    27f6:	4798      	blx	r3
	init_status = _usart_init(hw);
    27f8:	4628      	mov	r0, r5
    27fa:	4b15      	ldr	r3, [pc, #84]	; (2850 <_usart_async_init+0x6c>)
    27fc:	4798      	blx	r3
	if (init_status) {
    27fe:	4604      	mov	r4, r0
    2800:	b9f8      	cbnz	r0, 2842 <_usart_async_init+0x5e>
	device->hw = hw;
    2802:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    2804:	4628      	mov	r0, r5
    2806:	4b13      	ldr	r3, [pc, #76]	; (2854 <_usart_async_init+0x70>)
    2808:	4798      	blx	r3
		irq = irq +2;
    280a:	3002      	adds	r0, #2
    280c:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    280e:	f000 031f 	and.w	r3, r0, #31
    2812:	2201      	movs	r2, #1
    2814:	409a      	lsls	r2, r3
    2816:	0943      	lsrs	r3, r0, #5
    2818:	009b      	lsls	r3, r3, #2
    281a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    281e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2826:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    282a:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    282e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2832:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2836:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    283a:	21e0      	movs	r1, #224	; 0xe0
    283c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2840:	601a      	str	r2, [r3, #0]
}
    2842:	4620      	mov	r0, r4
    2844:	bd70      	pop	{r4, r5, r6, pc}
    2846:	bf00      	nop
    2848:	00006e98 	.word	0x00006e98
    284c:	00001d65 	.word	0x00001d65
    2850:	00002701 	.word	0x00002701
    2854:	000026ed 	.word	0x000026ed

00002858 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    2858:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    285a:	69d3      	ldr	r3, [r2, #28]
    285c:	f013 0f03 	tst.w	r3, #3
    2860:	d1fb      	bne.n	285a <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    2862:	6813      	ldr	r3, [r2, #0]
    2864:	f043 0302 	orr.w	r3, r3, #2
    2868:	6013      	str	r3, [r2, #0]
    286a:	4770      	bx	lr

0000286c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    286c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    286e:	6299      	str	r1, [r3, #40]	; 0x28
    2870:	4770      	bx	lr

00002872 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    2872:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    2874:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    2876:	b2c0      	uxtb	r0, r0
    2878:	4770      	bx	lr

0000287a <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    287a:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    287c:	7e18      	ldrb	r0, [r3, #24]
}
    287e:	f000 0001 	and.w	r0, r0, #1
    2882:	4770      	bx	lr

00002884 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    2884:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    2886:	7e18      	ldrb	r0, [r3, #24]
}
    2888:	f3c0 0080 	ubfx	r0, r0, #2, #1
    288c:	4770      	bx	lr
	...

00002890 <_usart_async_set_irq_state>:
{
    2890:	b570      	push	{r4, r5, r6, lr}
    2892:	460c      	mov	r4, r1
    2894:	4616      	mov	r6, r2
	ASSERT(device);
    2896:	4605      	mov	r5, r0
    2898:	f240 2245 	movw	r2, #581	; 0x245
    289c:	4915      	ldr	r1, [pc, #84]	; (28f4 <_usart_async_set_irq_state+0x64>)
    289e:	3000      	adds	r0, #0
    28a0:	bf18      	it	ne
    28a2:	2001      	movne	r0, #1
    28a4:	4b14      	ldr	r3, [pc, #80]	; (28f8 <_usart_async_set_irq_state+0x68>)
    28a6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    28a8:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    28ac:	d10d      	bne.n	28ca <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    28ae:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    28b0:	b92e      	cbnz	r6, 28be <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    28b2:	2201      	movs	r2, #1
    28b4:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    28b6:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    28b8:	2202      	movs	r2, #2
    28ba:	751a      	strb	r2, [r3, #20]
    28bc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    28be:	2201      	movs	r2, #1
    28c0:	759a      	strb	r2, [r3, #22]
    28c2:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    28c4:	2202      	movs	r2, #2
    28c6:	759a      	strb	r2, [r3, #22]
    28c8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    28ca:	2c01      	cmp	r4, #1
    28cc:	d002      	beq.n	28d4 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    28ce:	2c03      	cmp	r4, #3
    28d0:	d008      	beq.n	28e4 <_usart_async_set_irq_state+0x54>
    28d2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    28d4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    28d6:	b916      	cbnz	r6, 28de <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    28d8:	2204      	movs	r2, #4
    28da:	751a      	strb	r2, [r3, #20]
    28dc:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    28de:	2204      	movs	r2, #4
    28e0:	759a      	strb	r2, [r3, #22]
    28e2:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    28e4:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    28e6:	b116      	cbz	r6, 28ee <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    28e8:	2280      	movs	r2, #128	; 0x80
    28ea:	759a      	strb	r2, [r3, #22]
}
    28ec:	e7f1      	b.n	28d2 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    28ee:	2280      	movs	r2, #128	; 0x80
    28f0:	751a      	strb	r2, [r3, #20]
    28f2:	bd70      	pop	{r4, r5, r6, pc}
    28f4:	00006e98 	.word	0x00006e98
    28f8:	00001d65 	.word	0x00001d65

000028fc <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    28fc:	4b03      	ldr	r3, [pc, #12]	; (290c <_delay_init+0x10>)
    28fe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    2902:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    2904:	2205      	movs	r2, #5
    2906:	601a      	str	r2, [r3, #0]
    2908:	4770      	bx	lr
    290a:	bf00      	nop
    290c:	e000e010 	.word	0xe000e010

00002910 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    2910:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    2912:	b303      	cbz	r3, 2956 <_delay_cycles+0x46>
{
    2914:	b430      	push	{r4, r5}
    2916:	1e5d      	subs	r5, r3, #1
    2918:	b2ed      	uxtb	r5, r5
	while (n--) {
    291a:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    291c:	4a12      	ldr	r2, [pc, #72]	; (2968 <_delay_cycles+0x58>)
    291e:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    2922:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    2924:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2926:	6813      	ldr	r3, [r2, #0]
    2928:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    292c:	d0fb      	beq.n	2926 <_delay_cycles+0x16>
	while (n--) {
    292e:	3801      	subs	r0, #1
    2930:	b2c0      	uxtb	r0, r0
    2932:	28ff      	cmp	r0, #255	; 0xff
    2934:	d1f5      	bne.n	2922 <_delay_cycles+0x12>
    2936:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    293a:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    293e:	3101      	adds	r1, #1
    2940:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    2942:	4b09      	ldr	r3, [pc, #36]	; (2968 <_delay_cycles+0x58>)
    2944:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    2946:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    2948:	461a      	mov	r2, r3
    294a:	6813      	ldr	r3, [r2, #0]
    294c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2950:	d0fb      	beq.n	294a <_delay_cycles+0x3a>
		;
}
    2952:	bc30      	pop	{r4, r5}
    2954:	4770      	bx	lr
	SysTick->LOAD = buf;
    2956:	4b04      	ldr	r3, [pc, #16]	; (2968 <_delay_cycles+0x58>)
    2958:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    295a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    295c:	461a      	mov	r2, r3
    295e:	6813      	ldr	r3, [r2, #0]
    2960:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2964:	d0fb      	beq.n	295e <_delay_cycles+0x4e>
    2966:	4770      	bx	lr
    2968:	e000e010 	.word	0xe000e010

0000296c <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    296c:	b470      	push	{r4, r5, r6}
    296e:	b087      	sub	sp, #28
    2970:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2972:	ac01      	add	r4, sp, #4
    2974:	4d14      	ldr	r5, [pc, #80]	; (29c8 <_get_irq_num+0x5c>)
    2976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    297a:	682b      	ldr	r3, [r5, #0]
    297c:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    297e:	42b0      	cmp	r0, r6
    2980:	d017      	beq.n	29b2 <_get_irq_num+0x46>
    2982:	4631      	mov	r1, r6
    2984:	2301      	movs	r3, #1
    2986:	a801      	add	r0, sp, #4
    2988:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    298c:	428a      	cmp	r2, r1
    298e:	d006      	beq.n	299e <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2990:	3301      	adds	r3, #1
    2992:	2b05      	cmp	r3, #5
    2994:	d1f8      	bne.n	2988 <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    2996:	2055      	movs	r0, #85	; 0x55
}
    2998:	b007      	add	sp, #28
    299a:	bc70      	pop	{r4, r5, r6}
    299c:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    299e:	b2db      	uxtb	r3, r3
    29a0:	2b04      	cmp	r3, #4
    29a2:	d80c      	bhi.n	29be <_get_irq_num+0x52>
    29a4:	e8df f003 	tbb	[pc, r3]
    29a8:	070d0305 	.word	0x070d0305
    29ac:	09          	.byte	0x09
    29ad:	00          	.byte	0x00
		return TCC1_0_IRQn;
    29ae:	205c      	movs	r0, #92	; 0x5c
    29b0:	e7f2      	b.n	2998 <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    29b2:	2055      	movs	r0, #85	; 0x55
    29b4:	e7f0      	b.n	2998 <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    29b6:	2065      	movs	r0, #101	; 0x65
    29b8:	e7ee      	b.n	2998 <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    29ba:	2068      	movs	r0, #104	; 0x68
    29bc:	e7ec      	b.n	2998 <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    29be:	2089      	movs	r0, #137	; 0x89
    29c0:	e7ea      	b.n	2998 <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    29c2:	2061      	movs	r0, #97	; 0x61
    29c4:	e7e8      	b.n	2998 <_get_irq_num+0x2c>
    29c6:	bf00      	nop
    29c8:	00006eb4 	.word	0x00006eb4

000029cc <_tcc_timer_deinit>:
{
    29cc:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    29ce:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    29d0:	4620      	mov	r0, r4
    29d2:	4b10      	ldr	r3, [pc, #64]	; (2a14 <_tcc_timer_deinit+0x48>)
    29d4:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    29d6:	0943      	lsrs	r3, r0, #5
    29d8:	f000 001f 	and.w	r0, r0, #31
    29dc:	2201      	movs	r2, #1
    29de:	fa02 f000 	lsl.w	r0, r2, r0
    29e2:	3320      	adds	r3, #32
    29e4:	4a0c      	ldr	r2, [pc, #48]	; (2a18 <_tcc_timer_deinit+0x4c>)
    29e6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    29ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29ee:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    29f2:	68a3      	ldr	r3, [r4, #8]
    29f4:	f013 0f03 	tst.w	r3, #3
    29f8:	d1fb      	bne.n	29f2 <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    29fa:	6823      	ldr	r3, [r4, #0]
    29fc:	f023 0302 	bic.w	r3, r3, #2
    2a00:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a02:	68a3      	ldr	r3, [r4, #8]
    2a04:	f013 0f01 	tst.w	r3, #1
    2a08:	d1fb      	bne.n	2a02 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2a0a:	6823      	ldr	r3, [r4, #0]
    2a0c:	f043 0301 	orr.w	r3, r3, #1
    2a10:	6023      	str	r3, [r4, #0]
    2a12:	bd10      	pop	{r4, pc}
    2a14:	0000296d 	.word	0x0000296d
    2a18:	e000e100 	.word	0xe000e100

00002a1c <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    2a1c:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a1e:	6893      	ldr	r3, [r2, #8]
    2a20:	f013 0f03 	tst.w	r3, #3
    2a24:	d1fb      	bne.n	2a1e <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2a26:	6813      	ldr	r3, [r2, #0]
    2a28:	f043 0302 	orr.w	r3, r3, #2
    2a2c:	6013      	str	r3, [r2, #0]
    2a2e:	4770      	bx	lr

00002a30 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    2a30:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a32:	6893      	ldr	r3, [r2, #8]
    2a34:	f013 0f03 	tst.w	r3, #3
    2a38:	d1fb      	bne.n	2a32 <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2a3a:	6813      	ldr	r3, [r2, #0]
    2a3c:	f023 0302 	bic.w	r3, r3, #2
    2a40:	6013      	str	r3, [r2, #0]
    2a42:	4770      	bx	lr

00002a44 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    2a44:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    2a46:	6419      	str	r1, [r3, #64]	; 0x40
    2a48:	4770      	bx	lr

00002a4a <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    2a4a:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    2a4c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    2a4e:	4770      	bx	lr

00002a50 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    2a50:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2a52:	6893      	ldr	r3, [r2, #8]
    2a54:	f013 0f03 	tst.w	r3, #3
    2a58:	d1fb      	bne.n	2a52 <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2a5a:	6810      	ldr	r0, [r2, #0]
}
    2a5c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2a60:	4770      	bx	lr

00002a62 <tcc_interrupt_handler>:
{
    2a62:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2a64:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    2a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    2a68:	f012 0f01 	tst.w	r2, #1
    2a6c:	d100      	bne.n	2a70 <tcc_interrupt_handler+0xe>
    2a6e:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    2a70:	2201      	movs	r2, #1
    2a72:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    2a74:	6803      	ldr	r3, [r0, #0]
    2a76:	4798      	blx	r3
}
    2a78:	e7f9      	b.n	2a6e <tcc_interrupt_handler+0xc>
	...

00002a7c <_tcc_timer_init>:
{
    2a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a7e:	b087      	sub	sp, #28
    2a80:	4605      	mov	r5, r0
    2a82:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    2a84:	ae01      	add	r6, sp, #4
    2a86:	4f4e      	ldr	r7, [pc, #312]	; (2bc0 <_tcc_timer_init+0x144>)
    2a88:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    2a8a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2a8c:	683b      	ldr	r3, [r7, #0]
    2a8e:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    2a90:	42a0      	cmp	r0, r4
    2a92:	d00c      	beq.n	2aae <_tcc_timer_init+0x32>
    2a94:	4621      	mov	r1, r4
    2a96:	2301      	movs	r3, #1
    2a98:	a801      	add	r0, sp, #4
    2a9a:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    2a9e:	428a      	cmp	r2, r1
    2aa0:	d006      	beq.n	2ab0 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2aa2:	3301      	adds	r3, #1
    2aa4:	2b05      	cmp	r3, #5
    2aa6:	d1f8      	bne.n	2a9a <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2aa8:	2600      	movs	r6, #0
			return i;
    2aaa:	b276      	sxtb	r6, r6
    2aac:	e015      	b.n	2ada <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    2aae:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    2ab0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    2ab4:	d073      	beq.n	2b9e <_tcc_timer_init+0x122>
    2ab6:	2b01      	cmp	r3, #1
    2ab8:	d06b      	beq.n	2b92 <_tcc_timer_init+0x116>
    2aba:	2b02      	cmp	r3, #2
    2abc:	d06b      	beq.n	2b96 <_tcc_timer_init+0x11a>
    2abe:	2b03      	cmp	r3, #3
    2ac0:	d06b      	beq.n	2b9a <_tcc_timer_init+0x11e>
    2ac2:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2ac4:	bf08      	it	eq
    2ac6:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    2ac8:	d0ef      	beq.n	2aaa <_tcc_timer_init+0x2e>
	ASSERT(false);
    2aca:	f240 128b 	movw	r2, #395	; 0x18b
    2ace:	493d      	ldr	r1, [pc, #244]	; (2bc4 <_tcc_timer_init+0x148>)
    2ad0:	2000      	movs	r0, #0
    2ad2:	4b3d      	ldr	r3, [pc, #244]	; (2bc8 <_tcc_timer_init+0x14c>)
    2ad4:	4798      	blx	r3
	return -1;
    2ad6:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    2ada:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    2adc:	22e4      	movs	r2, #228	; 0xe4
    2ade:	4939      	ldr	r1, [pc, #228]	; (2bc4 <_tcc_timer_init+0x148>)
    2ae0:	2001      	movs	r0, #1
    2ae2:	4b39      	ldr	r3, [pc, #228]	; (2bc8 <_tcc_timer_init+0x14c>)
    2ae4:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2ae6:	68a3      	ldr	r3, [r4, #8]
    2ae8:	f013 0f01 	tst.w	r3, #1
    2aec:	d1fb      	bne.n	2ae6 <_tcc_timer_init+0x6a>
    2aee:	68a3      	ldr	r3, [r4, #8]
    2af0:	f013 0f03 	tst.w	r3, #3
    2af4:	d1fb      	bne.n	2aee <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    2af6:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    2af8:	f013 0f02 	tst.w	r3, #2
    2afc:	d15d      	bne.n	2bba <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2afe:	68a3      	ldr	r3, [r4, #8]
    2b00:	f013 0f01 	tst.w	r3, #1
    2b04:	d1fb      	bne.n	2afe <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    2b06:	6823      	ldr	r3, [r4, #0]
    2b08:	f043 0301 	orr.w	r3, r3, #1
    2b0c:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2b0e:	68a3      	ldr	r3, [r4, #8]
    2b10:	f013 0f01 	tst.w	r3, #1
    2b14:	d1fb      	bne.n	2b0e <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    2b16:	4a2a      	ldr	r2, [pc, #168]	; (2bc0 <_tcc_timer_init+0x144>)
    2b18:	00f1      	lsls	r1, r6, #3
    2b1a:	198b      	adds	r3, r1, r6
    2b1c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b20:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    2b22:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    2b24:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    2b26:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    2b28:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    2b2a:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    2b2c:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    2b2e:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    2b30:	440e      	add	r6, r1
    2b32:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    2b36:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    2b38:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    2b3a:	2301      	movs	r3, #1
    2b3c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    2b3e:	4b23      	ldr	r3, [pc, #140]	; (2bcc <_tcc_timer_init+0x150>)
    2b40:	429c      	cmp	r4, r3
    2b42:	d02e      	beq.n	2ba2 <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    2b44:	4b22      	ldr	r3, [pc, #136]	; (2bd0 <_tcc_timer_init+0x154>)
    2b46:	429c      	cmp	r4, r3
    2b48:	d02e      	beq.n	2ba8 <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    2b4a:	4b22      	ldr	r3, [pc, #136]	; (2bd4 <_tcc_timer_init+0x158>)
    2b4c:	429c      	cmp	r4, r3
    2b4e:	d02e      	beq.n	2bae <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    2b50:	4b21      	ldr	r3, [pc, #132]	; (2bd8 <_tcc_timer_init+0x15c>)
    2b52:	429c      	cmp	r4, r3
    2b54:	d02e      	beq.n	2bb4 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    2b56:	4b21      	ldr	r3, [pc, #132]	; (2bdc <_tcc_timer_init+0x160>)
    2b58:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    2b5a:	bf04      	itt	eq
    2b5c:	4b20      	ldreq	r3, [pc, #128]	; (2be0 <_tcc_timer_init+0x164>)
    2b5e:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    2b60:	4620      	mov	r0, r4
    2b62:	4b20      	ldr	r3, [pc, #128]	; (2be4 <_tcc_timer_init+0x168>)
    2b64:	4798      	blx	r3
    2b66:	f000 031f 	and.w	r3, r0, #31
    2b6a:	2201      	movs	r2, #1
    2b6c:	409a      	lsls	r2, r3
    2b6e:	0943      	lsrs	r3, r0, #5
    2b70:	009b      	lsls	r3, r3, #2
    2b72:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2b76:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    2b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    2b7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b82:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b8a:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    2b8c:	2000      	movs	r0, #0
}
    2b8e:	b007      	add	sp, #28
    2b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    2b92:	2601      	movs	r6, #1
    2b94:	e789      	b.n	2aaa <_tcc_timer_init+0x2e>
    2b96:	2602      	movs	r6, #2
    2b98:	e787      	b.n	2aaa <_tcc_timer_init+0x2e>
    2b9a:	2603      	movs	r6, #3
    2b9c:	e785      	b.n	2aaa <_tcc_timer_init+0x2e>
    2b9e:	2600      	movs	r6, #0
    2ba0:	e783      	b.n	2aaa <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    2ba2:	4b0f      	ldr	r3, [pc, #60]	; (2be0 <_tcc_timer_init+0x164>)
    2ba4:	601d      	str	r5, [r3, #0]
    2ba6:	e7d3      	b.n	2b50 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    2ba8:	4b0d      	ldr	r3, [pc, #52]	; (2be0 <_tcc_timer_init+0x164>)
    2baa:	605d      	str	r5, [r3, #4]
    2bac:	e7d3      	b.n	2b56 <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    2bae:	4b0c      	ldr	r3, [pc, #48]	; (2be0 <_tcc_timer_init+0x164>)
    2bb0:	609d      	str	r5, [r3, #8]
    2bb2:	e7d5      	b.n	2b60 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    2bb4:	4b0a      	ldr	r3, [pc, #40]	; (2be0 <_tcc_timer_init+0x164>)
    2bb6:	60dd      	str	r5, [r3, #12]
    2bb8:	e7d2      	b.n	2b60 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    2bba:	f06f 0010 	mvn.w	r0, #16
    2bbe:	e7e6      	b.n	2b8e <_tcc_timer_init+0x112>
    2bc0:	00006eb4 	.word	0x00006eb4
    2bc4:	00006f7c 	.word	0x00006f7c
    2bc8:	00001d65 	.word	0x00001d65
    2bcc:	41016000 	.word	0x41016000
    2bd0:	41018000 	.word	0x41018000
    2bd4:	42000c00 	.word	0x42000c00
    2bd8:	42001000 	.word	0x42001000
    2bdc:	43001000 	.word	0x43001000
    2be0:	20000d14 	.word	0x20000d14
    2be4:	0000296d 	.word	0x0000296d

00002be8 <_tcc_timer_set_irq>:
{
    2be8:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    2bea:	68c0      	ldr	r0, [r0, #12]
    2bec:	4b02      	ldr	r3, [pc, #8]	; (2bf8 <_tcc_timer_set_irq+0x10>)
    2bee:	4798      	blx	r3
    2bf0:	4b02      	ldr	r3, [pc, #8]	; (2bfc <_tcc_timer_set_irq+0x14>)
    2bf2:	4798      	blx	r3
    2bf4:	bd08      	pop	{r3, pc}
    2bf6:	bf00      	nop
    2bf8:	0000296d 	.word	0x0000296d
    2bfc:	00002089 	.word	0x00002089

00002c00 <_tcc_get_timer>:
}
    2c00:	4800      	ldr	r0, [pc, #0]	; (2c04 <_tcc_get_timer+0x4>)
    2c02:	4770      	bx	lr
    2c04:	2000006c 	.word	0x2000006c

00002c08 <TCC0_0_Handler>:
{
    2c08:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    2c0a:	4b02      	ldr	r3, [pc, #8]	; (2c14 <TCC0_0_Handler+0xc>)
    2c0c:	6818      	ldr	r0, [r3, #0]
    2c0e:	4b02      	ldr	r3, [pc, #8]	; (2c18 <TCC0_0_Handler+0x10>)
    2c10:	4798      	blx	r3
    2c12:	bd08      	pop	{r3, pc}
    2c14:	20000d14 	.word	0x20000d14
    2c18:	00002a63 	.word	0x00002a63

00002c1c <TCC1_0_Handler>:
{
    2c1c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    2c1e:	4b02      	ldr	r3, [pc, #8]	; (2c28 <TCC1_0_Handler+0xc>)
    2c20:	6858      	ldr	r0, [r3, #4]
    2c22:	4b02      	ldr	r3, [pc, #8]	; (2c2c <TCC1_0_Handler+0x10>)
    2c24:	4798      	blx	r3
    2c26:	bd08      	pop	{r3, pc}
    2c28:	20000d14 	.word	0x20000d14
    2c2c:	00002a63 	.word	0x00002a63

00002c30 <TCC2_0_Handler>:
{
    2c30:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    2c32:	4b02      	ldr	r3, [pc, #8]	; (2c3c <TCC2_0_Handler+0xc>)
    2c34:	6898      	ldr	r0, [r3, #8]
    2c36:	4b02      	ldr	r3, [pc, #8]	; (2c40 <TCC2_0_Handler+0x10>)
    2c38:	4798      	blx	r3
    2c3a:	bd08      	pop	{r3, pc}
    2c3c:	20000d14 	.word	0x20000d14
    2c40:	00002a63 	.word	0x00002a63

00002c44 <TCC3_0_Handler>:
{
    2c44:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    2c46:	4b02      	ldr	r3, [pc, #8]	; (2c50 <TCC3_0_Handler+0xc>)
    2c48:	68d8      	ldr	r0, [r3, #12]
    2c4a:	4b02      	ldr	r3, [pc, #8]	; (2c54 <TCC3_0_Handler+0x10>)
    2c4c:	4798      	blx	r3
    2c4e:	bd08      	pop	{r3, pc}
    2c50:	20000d14 	.word	0x20000d14
    2c54:	00002a63 	.word	0x00002a63

00002c58 <TCC4_0_Handler>:
{
    2c58:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    2c5a:	4b02      	ldr	r3, [pc, #8]	; (2c64 <TCC4_0_Handler+0xc>)
    2c5c:	6918      	ldr	r0, [r3, #16]
    2c5e:	4b02      	ldr	r3, [pc, #8]	; (2c68 <TCC4_0_Handler+0x10>)
    2c60:	4798      	blx	r3
    2c62:	bd08      	pop	{r3, pc}
    2c64:	20000d14 	.word	0x20000d14
    2c68:	00002a63 	.word	0x00002a63

00002c6c <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    2c6c:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c6e:	6913      	ldr	r3, [r2, #16]
    2c70:	f013 0f03 	tst.w	r3, #3
    2c74:	d1fb      	bne.n	2c6e <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    2c76:	6813      	ldr	r3, [r2, #0]
    2c78:	f043 0302 	orr.w	r3, r3, #2
    2c7c:	6013      	str	r3, [r2, #0]
    2c7e:	4770      	bx	lr

00002c80 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    2c80:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2c82:	6913      	ldr	r3, [r2, #16]
    2c84:	f013 0f03 	tst.w	r3, #3
    2c88:	d1fb      	bne.n	2c82 <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2c8a:	6813      	ldr	r3, [r2, #0]
    2c8c:	f023 0302 	bic.w	r3, r3, #2
    2c90:	6013      	str	r3, [r2, #0]
    2c92:	4770      	bx	lr

00002c94 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    2c94:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2c96:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2c98:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2c9c:	2b02      	cmp	r3, #2
    2c9e:	d00b      	beq.n	2cb8 <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2ca0:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2ca2:	f013 0f0c 	tst.w	r3, #12
    2ca6:	d009      	beq.n	2cbc <_tc_timer_set_period+0x28>
    2ca8:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2caa:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2cae:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    2cb0:	bf04      	itt	eq
    2cb2:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    2cb4:	76d1      	strbeq	r1, [r2, #27]
    2cb6:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2cb8:	61d1      	str	r1, [r2, #28]
    2cba:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    2cbc:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2cbe:	8391      	strh	r1, [r2, #28]
    2cc0:	4770      	bx	lr

00002cc2 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    2cc2:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2cc4:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2cc6:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2cca:	2b02      	cmp	r3, #2
    2ccc:	d00c      	beq.n	2ce8 <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2cce:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2cd0:	f013 0f0c 	tst.w	r3, #12
    2cd4:	d00a      	beq.n	2cec <_tc_timer_get_period+0x2a>
    2cd6:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    2cd8:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    2cdc:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    2cde:	bf06      	itte	eq
    2ce0:	7ed0      	ldrbeq	r0, [r2, #27]
    2ce2:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    2ce4:	2000      	movne	r0, #0
}
    2ce6:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    2ce8:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    2cea:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    2cec:	8b90      	ldrh	r0, [r2, #28]
    2cee:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    2cf0:	4770      	bx	lr

00002cf2 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    2cf2:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2cf4:	6913      	ldr	r3, [r2, #16]
    2cf6:	f013 0f03 	tst.w	r3, #3
    2cfa:	d1fb      	bne.n	2cf4 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2cfc:	6810      	ldr	r0, [r2, #0]
}
    2cfe:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2d02:	4770      	bx	lr

00002d04 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    2d04:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    2d06:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2d08:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2d0a:	f012 0f01 	tst.w	r2, #1
    2d0e:	d100      	bne.n	2d12 <tc_interrupt_handler+0xe>
    2d10:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2d12:	2201      	movs	r2, #1
    2d14:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    2d16:	6803      	ldr	r3, [r0, #0]
    2d18:	4798      	blx	r3
	}
}
    2d1a:	e7f9      	b.n	2d10 <tc_interrupt_handler+0xc>

00002d1c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2d1c:	b538      	push	{r3, r4, r5, lr}
    2d1e:	4605      	mov	r5, r0
	void *const hw = device->hw;
    2d20:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    2d22:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    2d24:	f013 0f01 	tst.w	r3, #1
    2d28:	d004      	beq.n	2d34 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2d2a:	2301      	movs	r3, #1
    2d2c:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    2d2e:	6803      	ldr	r3, [r0, #0]
    2d30:	b103      	cbz	r3, 2d34 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    2d32:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    2d34:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    2d36:	f013 0f02 	tst.w	r3, #2
    2d3a:	d005      	beq.n	2d48 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2d3c:	2302      	movs	r3, #2
    2d3e:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2d40:	686b      	ldr	r3, [r5, #4]
    2d42:	b10b      	cbz	r3, 2d48 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2d44:	4628      	mov	r0, r5
    2d46:	4798      	blx	r3
    2d48:	bd38      	pop	{r3, r4, r5, pc}
	...

00002d4c <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2d4c:	4b11      	ldr	r3, [pc, #68]	; (2d94 <_tc_init_irq_param+0x48>)
    2d4e:	4298      	cmp	r0, r3
    2d50:	d011      	beq.n	2d76 <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2d52:	4b11      	ldr	r3, [pc, #68]	; (2d98 <_tc_init_irq_param+0x4c>)
    2d54:	4298      	cmp	r0, r3
    2d56:	d011      	beq.n	2d7c <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    2d58:	4b10      	ldr	r3, [pc, #64]	; (2d9c <_tc_init_irq_param+0x50>)
    2d5a:	4298      	cmp	r0, r3
    2d5c:	d011      	beq.n	2d82 <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    2d5e:	4b10      	ldr	r3, [pc, #64]	; (2da0 <_tc_init_irq_param+0x54>)
    2d60:	4298      	cmp	r0, r3
    2d62:	d011      	beq.n	2d88 <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2d64:	4b0f      	ldr	r3, [pc, #60]	; (2da4 <_tc_init_irq_param+0x58>)
    2d66:	4298      	cmp	r0, r3
    2d68:	d011      	beq.n	2d8e <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    2d6a:	4b0f      	ldr	r3, [pc, #60]	; (2da8 <_tc_init_irq_param+0x5c>)
    2d6c:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    2d6e:	bf04      	itt	eq
    2d70:	4b0e      	ldreq	r3, [pc, #56]	; (2dac <_tc_init_irq_param+0x60>)
    2d72:	6159      	streq	r1, [r3, #20]
    2d74:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    2d76:	4b0d      	ldr	r3, [pc, #52]	; (2dac <_tc_init_irq_param+0x60>)
    2d78:	6019      	str	r1, [r3, #0]
    2d7a:	e7f0      	b.n	2d5e <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    2d7c:	4b0b      	ldr	r3, [pc, #44]	; (2dac <_tc_init_irq_param+0x60>)
    2d7e:	6059      	str	r1, [r3, #4]
    2d80:	e7f0      	b.n	2d64 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    2d82:	4b0a      	ldr	r3, [pc, #40]	; (2dac <_tc_init_irq_param+0x60>)
    2d84:	6099      	str	r1, [r3, #8]
    2d86:	e7f0      	b.n	2d6a <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    2d88:	4b08      	ldr	r3, [pc, #32]	; (2dac <_tc_init_irq_param+0x60>)
    2d8a:	60d9      	str	r1, [r3, #12]
    2d8c:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    2d8e:	4b07      	ldr	r3, [pc, #28]	; (2dac <_tc_init_irq_param+0x60>)
    2d90:	6119      	str	r1, [r3, #16]
    2d92:	4770      	bx	lr
    2d94:	40003800 	.word	0x40003800
    2d98:	40003c00 	.word	0x40003c00
    2d9c:	4101a000 	.word	0x4101a000
    2da0:	4101c000 	.word	0x4101c000
    2da4:	42001400 	.word	0x42001400
    2da8:	42001800 	.word	0x42001800
    2dac:	20000d28 	.word	0x20000d28

00002db0 <get_tc_index>:
{
    2db0:	b570      	push	{r4, r5, r6, lr}
    2db2:	b086      	sub	sp, #24
    2db4:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    2db6:	466c      	mov	r4, sp
    2db8:	4d18      	ldr	r5, [pc, #96]	; (2e1c <get_tc_index+0x6c>)
    2dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2dbe:	e895 0003 	ldmia.w	r5, {r0, r1}
    2dc2:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    2dc6:	9b00      	ldr	r3, [sp, #0]
    2dc8:	42b3      	cmp	r3, r6
    2dca:	d021      	beq.n	2e10 <get_tc_index+0x60>
    2dcc:	4631      	mov	r1, r6
    2dce:	2301      	movs	r3, #1
    2dd0:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2dd4:	428a      	cmp	r2, r1
    2dd6:	d01c      	beq.n	2e12 <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2dd8:	3301      	adds	r3, #1
    2dda:	2b06      	cmp	r3, #6
    2ddc:	d1f8      	bne.n	2dd0 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    2dde:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    2de0:	4a0f      	ldr	r2, [pc, #60]	; (2e20 <get_tc_index+0x70>)
    2de2:	7812      	ldrb	r2, [r2, #0]
    2de4:	429a      	cmp	r2, r3
    2de6:	d016      	beq.n	2e16 <get_tc_index+0x66>
    2de8:	4a0d      	ldr	r2, [pc, #52]	; (2e20 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2dea:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    2dec:	7d11      	ldrb	r1, [r2, #20]
    2dee:	4299      	cmp	r1, r3
    2df0:	d012      	beq.n	2e18 <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2df2:	3001      	adds	r0, #1
    2df4:	b2c0      	uxtb	r0, r0
    2df6:	3214      	adds	r2, #20
    2df8:	2806      	cmp	r0, #6
    2dfa:	d1f7      	bne.n	2dec <get_tc_index+0x3c>
	ASSERT(false);
    2dfc:	f240 2227 	movw	r2, #551	; 0x227
    2e00:	4908      	ldr	r1, [pc, #32]	; (2e24 <get_tc_index+0x74>)
    2e02:	2000      	movs	r0, #0
    2e04:	4b08      	ldr	r3, [pc, #32]	; (2e28 <get_tc_index+0x78>)
    2e06:	4798      	blx	r3
	return -1;
    2e08:	f04f 30ff 	mov.w	r0, #4294967295
}
    2e0c:	b006      	add	sp, #24
    2e0e:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2e10:	2300      	movs	r3, #0
			return i;
    2e12:	b2db      	uxtb	r3, r3
    2e14:	e7e4      	b.n	2de0 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    2e16:	2000      	movs	r0, #0
			return i;
    2e18:	b240      	sxtb	r0, r0
    2e1a:	e7f7      	b.n	2e0c <get_tc_index+0x5c>
    2e1c:	00006f94 	.word	0x00006f94
    2e20:	2000008c 	.word	0x2000008c
    2e24:	00006fac 	.word	0x00006fac
    2e28:	00001d65 	.word	0x00001d65

00002e2c <_tc_timer_init>:
{
    2e2c:	b570      	push	{r4, r5, r6, lr}
    2e2e:	4606      	mov	r6, r0
    2e30:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    2e32:	4608      	mov	r0, r1
    2e34:	4b48      	ldr	r3, [pc, #288]	; (2f58 <_tc_timer_init+0x12c>)
    2e36:	4798      	blx	r3
    2e38:	4605      	mov	r5, r0
	device->hw = hw;
    2e3a:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2e3c:	22af      	movs	r2, #175	; 0xaf
    2e3e:	4947      	ldr	r1, [pc, #284]	; (2f5c <_tc_timer_init+0x130>)
    2e40:	2001      	movs	r0, #1
    2e42:	4b47      	ldr	r3, [pc, #284]	; (2f60 <_tc_timer_init+0x134>)
    2e44:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e46:	6923      	ldr	r3, [r4, #16]
    2e48:	f013 0f01 	tst.w	r3, #1
    2e4c:	d1fb      	bne.n	2e46 <_tc_timer_init+0x1a>
    2e4e:	6923      	ldr	r3, [r4, #16]
    2e50:	f013 0f03 	tst.w	r3, #3
    2e54:	d1fb      	bne.n	2e4e <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    2e56:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    2e58:	f013 0f02 	tst.w	r3, #2
    2e5c:	d175      	bne.n	2f4a <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e5e:	6923      	ldr	r3, [r4, #16]
    2e60:	f013 0f01 	tst.w	r3, #1
    2e64:	d1fb      	bne.n	2e5e <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2e66:	6823      	ldr	r3, [r4, #0]
    2e68:	f043 0301 	orr.w	r3, r3, #1
    2e6c:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2e6e:	6923      	ldr	r3, [r4, #16]
    2e70:	f013 0f01 	tst.w	r3, #1
    2e74:	d1fb      	bne.n	2e6e <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    2e76:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2e7a:	4a3a      	ldr	r2, [pc, #232]	; (2f64 <_tc_timer_init+0x138>)
    2e7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2e80:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2e82:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2e84:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    2e86:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    2e88:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2e8a:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2e8c:	2201      	movs	r2, #1
    2e8e:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2e90:	685b      	ldr	r3, [r3, #4]
    2e92:	f003 030c 	and.w	r3, r3, #12
    2e96:	2b08      	cmp	r3, #8
    2e98:	d03f      	beq.n	2f1a <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d147      	bne.n	2f2e <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2e9e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ea2:	4a30      	ldr	r2, [pc, #192]	; (2f64 <_tc_timer_init+0x138>)
    2ea4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2ea8:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2eaa:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2eac:	8a1b      	ldrh	r3, [r3, #16]
    2eae:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    2eb0:	2301      	movs	r3, #1
    2eb2:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2eb4:	4631      	mov	r1, r6
    2eb6:	4620      	mov	r0, r4
    2eb8:	4b2b      	ldr	r3, [pc, #172]	; (2f68 <_tc_timer_init+0x13c>)
    2eba:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2ebc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2ec0:	4a28      	ldr	r2, [pc, #160]	; (2f64 <_tc_timer_init+0x138>)
    2ec2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2ec6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    2eca:	2b00      	cmp	r3, #0
    2ecc:	db40      	blt.n	2f50 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2ece:	095a      	lsrs	r2, r3, #5
    2ed0:	f003 031f 	and.w	r3, r3, #31
    2ed4:	2101      	movs	r1, #1
    2ed6:	fa01 f303 	lsl.w	r3, r1, r3
    2eda:	3220      	adds	r2, #32
    2edc:	4923      	ldr	r1, [pc, #140]	; (2f6c <_tc_timer_init+0x140>)
    2ede:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2ee2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ee6:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    2eea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2eee:	4b1d      	ldr	r3, [pc, #116]	; (2f64 <_tc_timer_init+0x138>)
    2ef0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2ef4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2ef8:	2b00      	cmp	r3, #0
    2efa:	db2b      	blt.n	2f54 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2efc:	0959      	lsrs	r1, r3, #5
    2efe:	f003 031f 	and.w	r3, r3, #31
    2f02:	2201      	movs	r2, #1
    2f04:	fa02 f303 	lsl.w	r3, r2, r3
    2f08:	4a18      	ldr	r2, [pc, #96]	; (2f6c <_tc_timer_init+0x140>)
    2f0a:	f101 0060 	add.w	r0, r1, #96	; 0x60
    2f0e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2f12:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    2f16:	2000      	movs	r0, #0
    2f18:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    2f1a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f1e:	4a11      	ldr	r2, [pc, #68]	; (2f64 <_tc_timer_init+0x138>)
    2f20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f24:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    2f26:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    2f28:	691b      	ldr	r3, [r3, #16]
    2f2a:	6223      	str	r3, [r4, #32]
    2f2c:	e7c0      	b.n	2eb0 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    2f2e:	2b04      	cmp	r3, #4
    2f30:	d1be      	bne.n	2eb0 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    2f32:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2f36:	4a0b      	ldr	r2, [pc, #44]	; (2f64 <_tc_timer_init+0x138>)
    2f38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f3c:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2f3e:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2f40:	7c1a      	ldrb	r2, [r3, #16]
    2f42:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    2f44:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    2f46:	76e3      	strb	r3, [r4, #27]
    2f48:	e7b2      	b.n	2eb0 <_tc_timer_init+0x84>
		return ERR_DENIED;
    2f4a:	f06f 0010 	mvn.w	r0, #16
    2f4e:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    2f50:	2000      	movs	r0, #0
    2f52:	bd70      	pop	{r4, r5, r6, pc}
    2f54:	2000      	movs	r0, #0
}
    2f56:	bd70      	pop	{r4, r5, r6, pc}
    2f58:	00002db1 	.word	0x00002db1
    2f5c:	00006fac 	.word	0x00006fac
    2f60:	00001d65 	.word	0x00001d65
    2f64:	2000008c 	.word	0x2000008c
    2f68:	00002d4d 	.word	0x00002d4d
    2f6c:	e000e100 	.word	0xe000e100

00002f70 <_tc_timer_deinit>:
{
    2f70:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    2f72:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2f74:	4620      	mov	r0, r4
    2f76:	4b18      	ldr	r3, [pc, #96]	; (2fd8 <_tc_timer_deinit+0x68>)
    2f78:	4798      	blx	r3
    2f7a:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2f7c:	f240 1201 	movw	r2, #257	; 0x101
    2f80:	4916      	ldr	r1, [pc, #88]	; (2fdc <_tc_timer_deinit+0x6c>)
    2f82:	2001      	movs	r0, #1
    2f84:	4b16      	ldr	r3, [pc, #88]	; (2fe0 <_tc_timer_deinit+0x70>)
    2f86:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2f88:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2f8c:	4b15      	ldr	r3, [pc, #84]	; (2fe4 <_tc_timer_deinit+0x74>)
    2f8e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2f92:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    2f96:	2b00      	cmp	r3, #0
    2f98:	db0d      	blt.n	2fb6 <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2f9a:	095a      	lsrs	r2, r3, #5
    2f9c:	f003 031f 	and.w	r3, r3, #31
    2fa0:	2101      	movs	r1, #1
    2fa2:	fa01 f303 	lsl.w	r3, r1, r3
    2fa6:	3220      	adds	r2, #32
    2fa8:	490f      	ldr	r1, [pc, #60]	; (2fe8 <_tc_timer_deinit+0x78>)
    2faa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2fae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fb2:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2fb6:	6923      	ldr	r3, [r4, #16]
    2fb8:	f013 0f03 	tst.w	r3, #3
    2fbc:	d1fb      	bne.n	2fb6 <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2fbe:	6823      	ldr	r3, [r4, #0]
    2fc0:	f023 0302 	bic.w	r3, r3, #2
    2fc4:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2fc6:	6923      	ldr	r3, [r4, #16]
    2fc8:	f013 0f01 	tst.w	r3, #1
    2fcc:	d1fb      	bne.n	2fc6 <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2fce:	6823      	ldr	r3, [r4, #0]
    2fd0:	f043 0301 	orr.w	r3, r3, #1
    2fd4:	6023      	str	r3, [r4, #0]
    2fd6:	bd38      	pop	{r3, r4, r5, pc}
    2fd8:	00002db1 	.word	0x00002db1
    2fdc:	00006fac 	.word	0x00006fac
    2fe0:	00001d65 	.word	0x00001d65
    2fe4:	2000008c 	.word	0x2000008c
    2fe8:	e000e100 	.word	0xe000e100

00002fec <_tc_timer_set_irq>:
{
    2fec:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    2fee:	68c0      	ldr	r0, [r0, #12]
    2ff0:	4b08      	ldr	r3, [pc, #32]	; (3014 <_tc_timer_set_irq+0x28>)
    2ff2:	4798      	blx	r3
    2ff4:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2ff6:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    2ffa:	4907      	ldr	r1, [pc, #28]	; (3018 <_tc_timer_set_irq+0x2c>)
    2ffc:	2001      	movs	r0, #1
    2ffe:	4b07      	ldr	r3, [pc, #28]	; (301c <_tc_timer_set_irq+0x30>)
    3000:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    3002:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    3006:	4b06      	ldr	r3, [pc, #24]	; (3020 <_tc_timer_set_irq+0x34>)
    3008:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    300c:	78a0      	ldrb	r0, [r4, #2]
    300e:	4b05      	ldr	r3, [pc, #20]	; (3024 <_tc_timer_set_irq+0x38>)
    3010:	4798      	blx	r3
    3012:	bd10      	pop	{r4, pc}
    3014:	00002db1 	.word	0x00002db1
    3018:	00006fac 	.word	0x00006fac
    301c:	00001d65 	.word	0x00001d65
    3020:	2000008c 	.word	0x2000008c
    3024:	00002089 	.word	0x00002089

00003028 <_pwm_init>:
{
    3028:	b570      	push	{r4, r5, r6, lr}
    302a:	4606      	mov	r6, r0
    302c:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    302e:	4608      	mov	r0, r1
    3030:	4b3f      	ldr	r3, [pc, #252]	; (3130 <_pwm_init+0x108>)
    3032:	4798      	blx	r3
    3034:	4605      	mov	r5, r0
	device->hw = hw;
    3036:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3038:	6923      	ldr	r3, [r4, #16]
    303a:	f013 0f01 	tst.w	r3, #1
    303e:	d1fb      	bne.n	3038 <_pwm_init+0x10>
    3040:	6923      	ldr	r3, [r4, #16]
    3042:	f013 0f03 	tst.w	r3, #3
    3046:	d1fb      	bne.n	3040 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    3048:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    304a:	f013 0f02 	tst.w	r3, #2
    304e:	d165      	bne.n	311c <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3050:	6923      	ldr	r3, [r4, #16]
    3052:	f013 0f01 	tst.w	r3, #1
    3056:	d1fb      	bne.n	3050 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    3058:	6823      	ldr	r3, [r4, #0]
    305a:	f043 0301 	orr.w	r3, r3, #1
    305e:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    3060:	6923      	ldr	r3, [r4, #16]
    3062:	f013 0f01 	tst.w	r3, #1
    3066:	d1fb      	bne.n	3060 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    3068:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    306c:	4a31      	ldr	r2, [pc, #196]	; (3134 <_pwm_init+0x10c>)
    306e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3072:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    3074:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    3076:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    3078:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    307a:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    307c:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    307e:	2203      	movs	r2, #3
    3080:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    3082:	685b      	ldr	r3, [r3, #4]
    3084:	f003 030c 	and.w	r3, r3, #12
    3088:	2b08      	cmp	r3, #8
    308a:	d03d      	beq.n	3108 <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    308c:	2b00      	cmp	r3, #0
    308e:	d148      	bne.n	3122 <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    3090:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3094:	4a27      	ldr	r2, [pc, #156]	; (3134 <_pwm_init+0x10c>)
    3096:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    309a:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    309c:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    309e:	8a1b      	ldrh	r3, [r3, #16]
    30a0:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    30a2:	4631      	mov	r1, r6
    30a4:	4620      	mov	r0, r4
    30a6:	4b24      	ldr	r3, [pc, #144]	; (3138 <_pwm_init+0x110>)
    30a8:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    30aa:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    30ae:	4a21      	ldr	r2, [pc, #132]	; (3134 <_pwm_init+0x10c>)
    30b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    30b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    30b8:	2b00      	cmp	r3, #0
    30ba:	db35      	blt.n	3128 <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    30bc:	095a      	lsrs	r2, r3, #5
    30be:	f003 031f 	and.w	r3, r3, #31
    30c2:	2101      	movs	r1, #1
    30c4:	fa01 f303 	lsl.w	r3, r1, r3
    30c8:	3220      	adds	r2, #32
    30ca:	491c      	ldr	r1, [pc, #112]	; (313c <_pwm_init+0x114>)
    30cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    30d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30d4:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    30d8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    30dc:	4b15      	ldr	r3, [pc, #84]	; (3134 <_pwm_init+0x10c>)
    30de:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    30e2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    30e6:	2b00      	cmp	r3, #0
    30e8:	db20      	blt.n	312c <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    30ea:	0959      	lsrs	r1, r3, #5
    30ec:	f003 031f 	and.w	r3, r3, #31
    30f0:	2201      	movs	r2, #1
    30f2:	fa02 f303 	lsl.w	r3, r2, r3
    30f6:	4a11      	ldr	r2, [pc, #68]	; (313c <_pwm_init+0x114>)
    30f8:	f101 0060 	add.w	r0, r1, #96	; 0x60
    30fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3100:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    3104:	2000      	movs	r0, #0
    3106:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    3108:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    310c:	4a09      	ldr	r2, [pc, #36]	; (3134 <_pwm_init+0x10c>)
    310e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3112:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    3114:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    3116:	691b      	ldr	r3, [r3, #16]
    3118:	6223      	str	r3, [r4, #32]
    311a:	e7c2      	b.n	30a2 <_pwm_init+0x7a>
		return ERR_DENIED;
    311c:	f06f 0010 	mvn.w	r0, #16
    3120:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    3122:	f04f 30ff 	mov.w	r0, #4294967295
    3126:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    3128:	2000      	movs	r0, #0
    312a:	bd70      	pop	{r4, r5, r6, pc}
    312c:	2000      	movs	r0, #0
}
    312e:	bd70      	pop	{r4, r5, r6, pc}
    3130:	00002db1 	.word	0x00002db1
    3134:	2000008c 	.word	0x2000008c
    3138:	00002d4d 	.word	0x00002d4d
    313c:	e000e100 	.word	0xe000e100

00003140 <_tc_get_timer>:
}
    3140:	4800      	ldr	r0, [pc, #0]	; (3144 <_tc_get_timer+0x4>)
    3142:	4770      	bx	lr
    3144:	20000104 	.word	0x20000104

00003148 <_tc_get_pwm>:
}
    3148:	2000      	movs	r0, #0
    314a:	4770      	bx	lr

0000314c <TC0_Handler>:
{
    314c:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    314e:	4b02      	ldr	r3, [pc, #8]	; (3158 <TC0_Handler+0xc>)
    3150:	6818      	ldr	r0, [r3, #0]
    3152:	4b02      	ldr	r3, [pc, #8]	; (315c <TC0_Handler+0x10>)
    3154:	4798      	blx	r3
    3156:	bd08      	pop	{r3, pc}
    3158:	20000d28 	.word	0x20000d28
    315c:	00002d1d 	.word	0x00002d1d

00003160 <TC1_Handler>:
{
    3160:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    3162:	4b02      	ldr	r3, [pc, #8]	; (316c <TC1_Handler+0xc>)
    3164:	6858      	ldr	r0, [r3, #4]
    3166:	4b02      	ldr	r3, [pc, #8]	; (3170 <TC1_Handler+0x10>)
    3168:	4798      	blx	r3
    316a:	bd08      	pop	{r3, pc}
    316c:	20000d28 	.word	0x20000d28
    3170:	00002d1d 	.word	0x00002d1d

00003174 <TC2_Handler>:
{
    3174:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    3176:	4b02      	ldr	r3, [pc, #8]	; (3180 <TC2_Handler+0xc>)
    3178:	6898      	ldr	r0, [r3, #8]
    317a:	4b02      	ldr	r3, [pc, #8]	; (3184 <TC2_Handler+0x10>)
    317c:	4798      	blx	r3
    317e:	bd08      	pop	{r3, pc}
    3180:	20000d28 	.word	0x20000d28
    3184:	00002d1d 	.word	0x00002d1d

00003188 <TC3_Handler>:
{
    3188:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    318a:	4b02      	ldr	r3, [pc, #8]	; (3194 <TC3_Handler+0xc>)
    318c:	68d8      	ldr	r0, [r3, #12]
    318e:	4b02      	ldr	r3, [pc, #8]	; (3198 <TC3_Handler+0x10>)
    3190:	4798      	blx	r3
    3192:	bd08      	pop	{r3, pc}
    3194:	20000d28 	.word	0x20000d28
    3198:	00002d05 	.word	0x00002d05

0000319c <TC4_Handler>:
{
    319c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    319e:	4b02      	ldr	r3, [pc, #8]	; (31a8 <TC4_Handler+0xc>)
    31a0:	6918      	ldr	r0, [r3, #16]
    31a2:	4b02      	ldr	r3, [pc, #8]	; (31ac <TC4_Handler+0x10>)
    31a4:	4798      	blx	r3
    31a6:	bd08      	pop	{r3, pc}
    31a8:	20000d28 	.word	0x20000d28
    31ac:	00002d05 	.word	0x00002d05

000031b0 <TC5_Handler>:
{
    31b0:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    31b2:	4b02      	ldr	r3, [pc, #8]	; (31bc <TC5_Handler+0xc>)
    31b4:	6958      	ldr	r0, [r3, #20]
    31b6:	4b02      	ldr	r3, [pc, #8]	; (31c0 <TC5_Handler+0x10>)
    31b8:	4798      	blx	r3
    31ba:	bd08      	pop	{r3, pc}
    31bc:	20000d28 	.word	0x20000d28
    31c0:	00002d05 	.word	0x00002d05

000031c4 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    31c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    31c6:	4604      	mov	r4, r0
    31c8:	b330      	cbz	r0, 3218 <_wdt_init+0x54>
    31ca:	6800      	ldr	r0, [r0, #0]
    31cc:	3000      	adds	r0, #0
    31ce:	bf18      	it	ne
    31d0:	2001      	movne	r0, #1
    31d2:	225a      	movs	r2, #90	; 0x5a
    31d4:	4914      	ldr	r1, [pc, #80]	; (3228 <_wdt_init+0x64>)
    31d6:	4b15      	ldr	r3, [pc, #84]	; (322c <_wdt_init+0x68>)
    31d8:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    31da:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    31dc:	689a      	ldr	r2, [r3, #8]
    31de:	f012 0f0e 	tst.w	r2, #14
    31e2:	d1fb      	bne.n	31dc <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    31e4:	781a      	ldrb	r2, [r3, #0]
    31e6:	09d2      	lsrs	r2, r2, #7
    31e8:	d118      	bne.n	321c <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    31ea:	689a      	ldr	r2, [r3, #8]
    31ec:	f012 0f0e 	tst.w	r2, #14
    31f0:	d1fb      	bne.n	31ea <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    31f2:	781a      	ldrb	r2, [r3, #0]
    31f4:	f012 0f02 	tst.w	r2, #2
    31f8:	d113      	bne.n	3222 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    31fa:	689a      	ldr	r2, [r3, #8]
    31fc:	f012 0f0e 	tst.w	r2, #14
    3200:	d1fb      	bne.n	31fa <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    3202:	781a      	ldrb	r2, [r3, #0]
    3204:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    3208:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    320a:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    320c:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    320e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    3212:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    3214:	2000      	movs	r0, #0
    3216:	bd10      	pop	{r4, pc}
    3218:	2000      	movs	r0, #0
    321a:	e7da      	b.n	31d2 <_wdt_init+0xe>
		return ERR_DENIED;
    321c:	f06f 0010 	mvn.w	r0, #16
    3220:	bd10      	pop	{r4, pc}
    3222:	f06f 0010 	mvn.w	r0, #16
}
    3226:	bd10      	pop	{r4, pc}
    3228:	00006fc0 	.word	0x00006fc0
    322c:	00001d65 	.word	0x00001d65

00003230 <_wdt_set_timeout_period>:

/**
 * \brief set timeout period for WDT instance
 */
int32_t _wdt_set_timeout_period(struct wdt_dev *const dev, const uint32_t clk_rate, const uint16_t timeout_period)
{
    3230:	b570      	push	{r4, r5, r6, lr}
    3232:	460d      	mov	r5, r1
    3234:	4614      	mov	r4, r2
	uint64_t            tmp;
	uint32_t            period_cycles;
	enum wdt_period_reg timeout_period_reg;
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    3236:	4606      	mov	r6, r0
    3238:	2800      	cmp	r0, #0
    323a:	d044      	beq.n	32c6 <_wdt_set_timeout_period+0x96>
    323c:	6800      	ldr	r0, [r0, #0]
    323e:	3000      	adds	r0, #0
    3240:	bf18      	it	ne
    3242:	2001      	movne	r0, #1
    3244:	2284      	movs	r2, #132	; 0x84
    3246:	493f      	ldr	r1, [pc, #252]	; (3344 <_wdt_set_timeout_period+0x114>)
    3248:	4b3f      	ldr	r3, [pc, #252]	; (3348 <_wdt_set_timeout_period+0x118>)
    324a:	4798      	blx	r3

    hri_wdt_clear_CTRLA_ENABLE_bit(dev->hw);
    324c:	6832      	ldr	r2, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    324e:	6893      	ldr	r3, [r2, #8]
    3250:	f013 0f0e 	tst.w	r3, #14
    3254:	d1fb      	bne.n	324e <_wdt_set_timeout_period+0x1e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ENABLE;
    3256:	7813      	ldrb	r3, [r2, #0]
    3258:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    325c:	7013      	strb	r3, [r2, #0]
	hri_wdt_clear_CTRLA_ALWAYSON_bit(dev->hw);
    325e:	6831      	ldr	r1, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3260:	688b      	ldr	r3, [r1, #8]
    3262:	f013 0f0e 	tst.w	r3, #14
    3266:	d1fb      	bne.n	3260 <_wdt_set_timeout_period+0x30>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_ALWAYSON;
    3268:	780b      	ldrb	r3, [r1, #0]
    326a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    326e:	700b      	strb	r3, [r1, #0]
	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    3270:	6833      	ldr	r3, [r6, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3272:	6899      	ldr	r1, [r3, #8]
    3274:	f011 0f0e 	tst.w	r1, #14
    3278:	d1fb      	bne.n	3272 <_wdt_set_timeout_period+0x42>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    327a:	781a      	ldrb	r2, [r3, #0]
    327c:	09d2      	lsrs	r2, r2, #7
    327e:	d158      	bne.n	3332 <_wdt_set_timeout_period+0x102>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3280:	6899      	ldr	r1, [r3, #8]
    3282:	f011 0f0e 	tst.w	r1, #14
    3286:	d1fb      	bne.n	3280 <_wdt_set_timeout_period+0x50>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    3288:	781a      	ldrb	r2, [r3, #0]
    328a:	f012 0f02 	tst.w	r2, #2
    328e:	d153      	bne.n	3338 <_wdt_set_timeout_period+0x108>
		return ERR_DENIED;
	} else {
		/* calc the period cycles corresponding to timeout period */
		tmp = (uint64_t)timeout_period * clk_rate;
    3290:	fba4 4505 	umull	r4, r5, r4, r5

		/* check whether overflow*/
		if (tmp >> 32) {
    3294:	4628      	mov	r0, r5
    3296:	2100      	movs	r1, #0
    3298:	ea50 0201 	orrs.w	r2, r0, r1
    329c:	d14f      	bne.n	333e <_wdt_set_timeout_period+0x10e>
			return ERR_INVALID_ARG;
		}

		period_cycles = (uint32_t)tmp;
		/* calc the register value corresponding to period cysles */
		switch (period_cycles) {
    329e:	f5b4 3f7a 	cmp.w	r4, #256000	; 0x3e800
    32a2:	d038      	beq.n	3316 <_wdt_set_timeout_period+0xe6>
    32a4:	d911      	bls.n	32ca <_wdt_set_timeout_period+0x9a>
    32a6:	f5b4 1ffa 	cmp.w	r4, #2048000	; 0x1f4000
    32aa:	d038      	beq.n	331e <_wdt_set_timeout_period+0xee>
    32ac:	d927      	bls.n	32fe <_wdt_set_timeout_period+0xce>
    32ae:	f5b4 0ffa 	cmp.w	r4, #8192000	; 0x7d0000
    32b2:	d038      	beq.n	3326 <_wdt_set_timeout_period+0xf6>
    32b4:	f5b4 0f7a 	cmp.w	r4, #16384000	; 0xfa0000
    32b8:	d037      	beq.n	332a <_wdt_set_timeout_period+0xfa>
    32ba:	f5b4 1f7a 	cmp.w	r4, #4096000	; 0x3e8000
    32be:	d030      	beq.n	3322 <_wdt_set_timeout_period+0xf2>
			break;
		case WDT_CLK_16384CYCLE *WDT_PERIOD_RATE:
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
			break;
		default:
			return ERR_INVALID_ARG;
    32c0:	f06f 000c 	mvn.w	r0, #12
	}

	hri_wdt_write_CONFIG_PER_bf(dev->hw, (uint8_t)timeout_period_reg);

	return ERR_NONE;
}
    32c4:	bd70      	pop	{r4, r5, r6, pc}
    32c6:	2000      	movs	r0, #0
    32c8:	e7bc      	b.n	3244 <_wdt_set_timeout_period+0x14>
		switch (period_cycles) {
    32ca:	f5b4 4ffa 	cmp.w	r4, #32000	; 0x7d00
    32ce:	d01e      	beq.n	330e <_wdt_set_timeout_period+0xde>
    32d0:	d80d      	bhi.n	32ee <_wdt_set_timeout_period+0xbe>
    32d2:	f5b4 5ffa 	cmp.w	r4, #8000	; 0x1f40
    32d6:	d02a      	beq.n	332e <_wdt_set_timeout_period+0xfe>
    32d8:	f5b4 5f7a 	cmp.w	r4, #16000	; 0x3e80
    32dc:	d1f0      	bne.n	32c0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_16CYCLE;
    32de:	2101      	movs	r1, #1
	tmp = ((Wdt *)hw)->CONFIG.reg;
    32e0:	785a      	ldrb	r2, [r3, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    32e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
    32e6:	430a      	orrs	r2, r1
	((Wdt *)hw)->CONFIG.reg = tmp;
    32e8:	705a      	strb	r2, [r3, #1]
	return ERR_NONE;
    32ea:	2000      	movs	r0, #0
    32ec:	bd70      	pop	{r4, r5, r6, pc}
		switch (period_cycles) {
    32ee:	f5b4 4f7a 	cmp.w	r4, #64000	; 0xfa00
    32f2:	d00e      	beq.n	3312 <_wdt_set_timeout_period+0xe2>
    32f4:	f5b4 3ffa 	cmp.w	r4, #128000	; 0x1f400
    32f8:	d1e2      	bne.n	32c0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_128CYCLE;
    32fa:	2104      	movs	r1, #4
			break;
    32fc:	e7f0      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
		switch (period_cycles) {
    32fe:	f5b4 2ffa 	cmp.w	r4, #512000	; 0x7d000
    3302:	d00a      	beq.n	331a <_wdt_set_timeout_period+0xea>
    3304:	f5b4 2f7a 	cmp.w	r4, #1024000	; 0xfa000
    3308:	d1da      	bne.n	32c0 <_wdt_set_timeout_period+0x90>
			timeout_period_reg = WDT_PERIOD_1024CYCLE;
    330a:	2107      	movs	r1, #7
			break;
    330c:	e7e8      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_32CYCLE;
    330e:	2102      	movs	r1, #2
			break;
    3310:	e7e6      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_64CYCLE;
    3312:	2103      	movs	r1, #3
			break;
    3314:	e7e4      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_256CYCLE;
    3316:	2105      	movs	r1, #5
			break;
    3318:	e7e2      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_512CYCLE;
    331a:	2106      	movs	r1, #6
			break;
    331c:	e7e0      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_2048CYCLE;
    331e:	2108      	movs	r1, #8
			break;
    3320:	e7de      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_4096CYCLE;
    3322:	2109      	movs	r1, #9
			break;
    3324:	e7dc      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8192CYCLE;
    3326:	210a      	movs	r1, #10
			break;
    3328:	e7da      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_16384CYCLE;
    332a:	210b      	movs	r1, #11
			break;
    332c:	e7d8      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
			timeout_period_reg = WDT_PERIOD_8CYCLE;
    332e:	2100      	movs	r1, #0
    3330:	e7d6      	b.n	32e0 <_wdt_set_timeout_period+0xb0>
		return ERR_DENIED;
    3332:	f06f 0010 	mvn.w	r0, #16
    3336:	bd70      	pop	{r4, r5, r6, pc}
    3338:	f06f 0010 	mvn.w	r0, #16
    333c:	bd70      	pop	{r4, r5, r6, pc}
			return ERR_INVALID_ARG;
    333e:	f06f 000c 	mvn.w	r0, #12
    3342:	bd70      	pop	{r4, r5, r6, pc}
    3344:	00006fc0 	.word	0x00006fc0
    3348:	00001d65 	.word	0x00001d65

0000334c <_wdt_enable>:

/**
 * \brief enbale watchdog timer
 */
int32_t _wdt_enable(struct wdt_dev *const dev)
{
    334c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    334e:	4604      	mov	r4, r0
    3350:	b198      	cbz	r0, 337a <_wdt_enable+0x2e>
    3352:	6800      	ldr	r0, [r0, #0]
    3354:	3000      	adds	r0, #0
    3356:	bf18      	it	ne
    3358:	2001      	movne	r0, #1
    335a:	f240 1207 	movw	r2, #263	; 0x107
    335e:	4908      	ldr	r1, [pc, #32]	; (3380 <_wdt_enable+0x34>)
    3360:	4b08      	ldr	r3, [pc, #32]	; (3384 <_wdt_enable+0x38>)
    3362:	4798      	blx	r3

	hri_wdt_set_CTRLA_ENABLE_bit(dev->hw);
    3364:	6822      	ldr	r2, [r4, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    3366:	6893      	ldr	r3, [r2, #8]
    3368:	f013 0f0e 	tst.w	r3, #14
    336c:	d1fb      	bne.n	3366 <_wdt_enable+0x1a>
	((Wdt *)hw)->CTRLA.reg |= WDT_CTRLA_ENABLE;
    336e:	7813      	ldrb	r3, [r2, #0]
    3370:	f043 0302 	orr.w	r3, r3, #2
    3374:	7013      	strb	r3, [r2, #0]

	return ERR_NONE;
}
    3376:	2000      	movs	r0, #0
    3378:	bd10      	pop	{r4, pc}
    337a:	2000      	movs	r0, #0
    337c:	e7ed      	b.n	335a <_wdt_enable+0xe>
    337e:	bf00      	nop
    3380:	00006fc0 	.word	0x00006fc0
    3384:	00001d65 	.word	0x00001d65

00003388 <_wdt_feed>:

/**
 * \brief reset watchdog timer to make wdt work from start
 */
int32_t _wdt_feed(struct wdt_dev *const dev)
{
    3388:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    338a:	4604      	mov	r4, r0
    338c:	b168      	cbz	r0, 33aa <_wdt_feed+0x22>
    338e:	6800      	ldr	r0, [r0, #0]
    3390:	3000      	adds	r0, #0
    3392:	bf18      	it	ne
    3394:	2001      	movne	r0, #1
    3396:	f240 1225 	movw	r2, #293	; 0x125
    339a:	4905      	ldr	r1, [pc, #20]	; (33b0 <_wdt_feed+0x28>)
    339c:	4b05      	ldr	r3, [pc, #20]	; (33b4 <_wdt_feed+0x2c>)
    339e:	4798      	blx	r3

	hri_wdt_write_CLEAR_reg(dev->hw, WDT_CLEAR_CLEAR_KEY);
    33a0:	6823      	ldr	r3, [r4, #0]
	((Wdt *)hw)->CLEAR.reg = data;
    33a2:	22a5      	movs	r2, #165	; 0xa5
    33a4:	731a      	strb	r2, [r3, #12]

	return ERR_NONE;
}
    33a6:	2000      	movs	r0, #0
    33a8:	bd10      	pop	{r4, pc}
    33aa:	2000      	movs	r0, #0
    33ac:	e7f3      	b.n	3396 <_wdt_feed+0xe>
    33ae:	bf00      	nop
    33b0:	00006fc0 	.word	0x00006fc0
    33b4:	00001d65 	.word	0x00001d65

000033b8 <createQueuesAndSemaphores>:
*
* DESCRIPTION:  Creats the Queues and Semaphores
*
********************************************************************************/
bool createQueuesAndSemaphores(void)
{
    33b8:	b538      	push	{r3, r4, r5, lr}
	bool status = true;

    /* Create the Message Queues */
    AtTransmitQueue = xQueueCreate(MAX_TX_QUEUE_SIZE, sizeof(AtTxMsgType));
    33ba:	2200      	movs	r2, #0
    33bc:	2108      	movs	r1, #8
    33be:	2001      	movs	r0, #1
    33c0:	4d0d      	ldr	r5, [pc, #52]	; (33f8 <createQueuesAndSemaphores+0x40>)
    33c2:	47a8      	blx	r5
    33c4:	4c0d      	ldr	r4, [pc, #52]	; (33fc <createQueuesAndSemaphores+0x44>)
    33c6:	6020      	str	r0, [r4, #0]
    AtReceiveQueue  = xQueueCreate(MAX_RX_QUEUE_SIZE, sizeof(AtRxMsgType));
    33c8:	2200      	movs	r2, #0
    33ca:	2101      	movs	r1, #1
    33cc:	4608      	mov	r0, r1
    33ce:	47a8      	blx	r5
    33d0:	4b0b      	ldr	r3, [pc, #44]	; (3400 <createQueuesAndSemaphores+0x48>)
    33d2:	6018      	str	r0, [r3, #0]

    if((AtTransmitQueue != NULL) &&
    33d4:	6823      	ldr	r3, [r4, #0]
    33d6:	b16b      	cbz	r3, 33f4 <createQueuesAndSemaphores+0x3c>
    33d8:	b160      	cbz	r0, 33f4 <createQueuesAndSemaphores+0x3c>
       (AtReceiveQueue  != NULL))
    {
    	DEBUG_PRINT("Tx & Rx Queues are created");
    33da:	480a      	ldr	r0, [pc, #40]	; (3404 <createQueuesAndSemaphores+0x4c>)
    33dc:	4b0a      	ldr	r3, [pc, #40]	; (3408 <createQueuesAndSemaphores+0x50>)
    33de:	4798      	blx	r3

    	AtTxQueueLoadSemaphore = xSemaphoreCreateBinary();
    33e0:	2203      	movs	r2, #3
    33e2:	2100      	movs	r1, #0
    33e4:	2001      	movs	r0, #1
    33e6:	47a8      	blx	r5
    33e8:	4b08      	ldr	r3, [pc, #32]	; (340c <createQueuesAndSemaphores+0x54>)
    33ea:	6018      	str	r0, [r3, #0]
		
		if((AtTxQueueLoadSemaphore != NULL))
    33ec:	b110      	cbz	r0, 33f4 <createQueuesAndSemaphores+0x3c>
		{
			DEBUG_PRINT("Semaphores are created");
    33ee:	4808      	ldr	r0, [pc, #32]	; (3410 <createQueuesAndSemaphores+0x58>)
    33f0:	4b05      	ldr	r3, [pc, #20]	; (3408 <createQueuesAndSemaphores+0x50>)
    33f2:	4798      	blx	r3
    }
    else
    {
    	status = false;
    }
}
    33f4:	bd38      	pop	{r3, r4, r5, pc}
    33f6:	bf00      	nop
    33f8:	00003c39 	.word	0x00003c39
    33fc:	20002ab4 	.word	0x20002ab4
    3400:	20002abc 	.word	0x20002abc
    3404:	00006fd8 	.word	0x00006fd8
    3408:	00001025 	.word	0x00001025
    340c:	20002ab8 	.word	0x20002ab8
    3410:	00006ff4 	.word	0x00006ff4

00003414 <main>:
{
    3414:	b580      	push	{r7, lr}
    3416:	b082      	sub	sp, #8
    atmel_start_init();	
    3418:	4b29      	ldr	r3, [pc, #164]	; (34c0 <main+0xac>)
    341a:	4798      	blx	r3
    DispatchTaskStatus = xTaskCreate( DispatchTask, "DispatchTask", 150, NULL, 2, &xDispatchTaskHandle );
    341c:	4b29      	ldr	r3, [pc, #164]	; (34c4 <main+0xb0>)
    341e:	9301      	str	r3, [sp, #4]
    3420:	2702      	movs	r7, #2
    3422:	9700      	str	r7, [sp, #0]
    3424:	2300      	movs	r3, #0
    3426:	2296      	movs	r2, #150	; 0x96
    3428:	4927      	ldr	r1, [pc, #156]	; (34c8 <main+0xb4>)
    342a:	4828      	ldr	r0, [pc, #160]	; (34cc <main+0xb8>)
    342c:	4d28      	ldr	r5, [pc, #160]	; (34d0 <main+0xbc>)
    342e:	47a8      	blx	r5
    3430:	4c28      	ldr	r4, [pc, #160]	; (34d4 <main+0xc0>)
    3432:	6020      	str	r0, [r4, #0]
    ModemTxTaskStatus = xTaskCreate( ModemTxTask, "ModemTask", 150, NULL, 1, &xModemTxTaskHandle );
    3434:	4b28      	ldr	r3, [pc, #160]	; (34d8 <main+0xc4>)
    3436:	9301      	str	r3, [sp, #4]
    3438:	2601      	movs	r6, #1
    343a:	9600      	str	r6, [sp, #0]
    343c:	2300      	movs	r3, #0
    343e:	2296      	movs	r2, #150	; 0x96
    3440:	4926      	ldr	r1, [pc, #152]	; (34dc <main+0xc8>)
    3442:	4827      	ldr	r0, [pc, #156]	; (34e0 <main+0xcc>)
    3444:	47a8      	blx	r5
    3446:	6060      	str	r0, [r4, #4]
    ModemRxTaskStatus = xTaskCreate( ModemRxTask, "ModemRxTask", 150, NULL, 2, &xModemRxTaskHandle);
    3448:	4b26      	ldr	r3, [pc, #152]	; (34e4 <main+0xd0>)
    344a:	9301      	str	r3, [sp, #4]
    344c:	9700      	str	r7, [sp, #0]
    344e:	2300      	movs	r3, #0
    3450:	2296      	movs	r2, #150	; 0x96
    3452:	4925      	ldr	r1, [pc, #148]	; (34e8 <main+0xd4>)
    3454:	4825      	ldr	r0, [pc, #148]	; (34ec <main+0xd8>)
    3456:	47a8      	blx	r5
    3458:	60a0      	str	r0, [r4, #8]
    ModemProcessTaskStatus = xTaskCreate( ModemProcessTask, "ModemProcessTask", 150, NULL, 1, &xModemProcessTaskHandle);
    345a:	4b25      	ldr	r3, [pc, #148]	; (34f0 <main+0xdc>)
    345c:	9301      	str	r3, [sp, #4]
    345e:	9600      	str	r6, [sp, #0]
    3460:	2300      	movs	r3, #0
    3462:	2296      	movs	r2, #150	; 0x96
    3464:	4923      	ldr	r1, [pc, #140]	; (34f4 <main+0xe0>)
    3466:	4824      	ldr	r0, [pc, #144]	; (34f8 <main+0xe4>)
    3468:	47a8      	blx	r5
    346a:	60e0      	str	r0, [r4, #12]
    ModemDiagTaskStatus = xTaskCreate( ModemDiagTask, "ModemDiagTask", 150, NULL, 1, &xModemDiagTaskHandle);
    346c:	4b23      	ldr	r3, [pc, #140]	; (34fc <main+0xe8>)
    346e:	9301      	str	r3, [sp, #4]
    3470:	9600      	str	r6, [sp, #0]
    3472:	2300      	movs	r3, #0
    3474:	2296      	movs	r2, #150	; 0x96
    3476:	4922      	ldr	r1, [pc, #136]	; (3500 <main+0xec>)
    3478:	4822      	ldr	r0, [pc, #136]	; (3504 <main+0xf0>)
    347a:	47a8      	blx	r5
    if((DispatchTaskStatus == pdPASS) &&
    347c:	6823      	ldr	r3, [r4, #0]
    347e:	42b3      	cmp	r3, r6
    3480:	d006      	beq.n	3490 <main+0x7c>
    	DEBUG_PRINT("Failed to create tasks");
    3482:	4821      	ldr	r0, [pc, #132]	; (3508 <main+0xf4>)
    3484:	4b21      	ldr	r3, [pc, #132]	; (350c <main+0xf8>)
    3486:	4798      	blx	r3
    DEBUG_PRINT("Error: Scheduler exited");
    3488:	4821      	ldr	r0, [pc, #132]	; (3510 <main+0xfc>)
    348a:	4b20      	ldr	r3, [pc, #128]	; (350c <main+0xf8>)
    348c:	4798      	blx	r3
    348e:	e7fe      	b.n	348e <main+0x7a>
    if((DispatchTaskStatus == pdPASS) &&
    3490:	68e3      	ldr	r3, [r4, #12]
    3492:	42b3      	cmp	r3, r6
    3494:	d1f5      	bne.n	3482 <main+0x6e>
       (ModemProcessTaskStatus == pdPASS) &&
    3496:	6863      	ldr	r3, [r4, #4]
    3498:	42b3      	cmp	r3, r6
    349a:	d1f2      	bne.n	3482 <main+0x6e>
       (ModemTxTaskStatus == pdPASS) &&
    349c:	68a3      	ldr	r3, [r4, #8]
    349e:	42b3      	cmp	r3, r6
    34a0:	d1ef      	bne.n	3482 <main+0x6e>
       (ModemRxTaskStatus == pdPASS) &&
    34a2:	42b0      	cmp	r0, r6
    34a4:	d1ed      	bne.n	3482 <main+0x6e>
    	DEBUG_PRINT("Successfully Created the Tasks");
    34a6:	481b      	ldr	r0, [pc, #108]	; (3514 <main+0x100>)
    34a8:	4b18      	ldr	r3, [pc, #96]	; (350c <main+0xf8>)
    34aa:	4798      	blx	r3
    	if(false != createQueuesAndSemaphores())
    34ac:	4b1a      	ldr	r3, [pc, #104]	; (3518 <main+0x104>)
    34ae:	4798      	blx	r3
    34b0:	b110      	cbz	r0, 34b8 <main+0xa4>
    		vTaskStartScheduler();
    34b2:	4b1a      	ldr	r3, [pc, #104]	; (351c <main+0x108>)
    34b4:	4798      	blx	r3
    34b6:	e7e7      	b.n	3488 <main+0x74>
    		DEBUG_PRINT("Free RTOS Scheduler not started");
    34b8:	4819      	ldr	r0, [pc, #100]	; (3520 <main+0x10c>)
    34ba:	4b14      	ldr	r3, [pc, #80]	; (350c <main+0xf8>)
    34bc:	4798      	blx	r3
    34be:	e7e3      	b.n	3488 <main+0x74>
    34c0:	00001181 	.word	0x00001181
    34c4:	20002aac 	.word	0x20002aac
    34c8:	0000700c 	.word	0x0000700c
    34cc:	00000339 	.word	0x00000339
    34d0:	0000443d 	.word	0x0000443d
    34d4:	20000d40 	.word	0x20000d40
    34d8:	20002a94 	.word	0x20002a94
    34dc:	0000701c 	.word	0x0000701c
    34e0:	00000e79 	.word	0x00000e79
    34e4:	20002aa8 	.word	0x20002aa8
    34e8:	00007028 	.word	0x00007028
    34ec:	00000de1 	.word	0x00000de1
    34f0:	20002a9c 	.word	0x20002a9c
    34f4:	00007034 	.word	0x00007034
    34f8:	00000b79 	.word	0x00000b79
    34fc:	20002aa0 	.word	0x20002aa0
    3500:	00007048 	.word	0x00007048
    3504:	00000851 	.word	0x00000851
    3508:	00007098 	.word	0x00007098
    350c:	00001025 	.word	0x00001025
    3510:	000070b0 	.word	0x000070b0
    3514:	00007058 	.word	0x00007058
    3518:	000033b9 	.word	0x000033b9
    351c:	00004619 	.word	0x00004619
    3520:	00007078 	.word	0x00007078

00003524 <vListInitialise>:
void vListInitialise(List_t *const pxList)
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = (ListItem_t *)&(
    3524:	f100 0308 	add.w	r3, r0, #8
    3528:	6043      	str	r3, [r0, #4]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    352a:	f04f 32ff 	mov.w	r2, #4294967295
    352e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = (ListItem_t *)&(pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as
    3530:	60c3      	str	r3, [r0, #12]
	                                                                the list end to save RAM.  This is checked and
	                                                                valid. */
	pxList->xListEnd.pxPrevious = (ListItem_t *)&(
    3532:	6103      	str	r3, [r0, #16]
	    pxList->xListEnd); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is
	                          checked and valid. */

	pxList->uxNumberOfItems = (UBaseType_t)0U;
    3534:	2300      	movs	r3, #0
    3536:	6003      	str	r3, [r0, #0]
    3538:	4770      	bx	lr

0000353a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem(ListItem_t *const pxItem)
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    353a:	2300      	movs	r3, #0
    353c:	6103      	str	r3, [r0, #16]
    353e:	4770      	bx	lr

00003540 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    3540:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    3542:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    3544:	689a      	ldr	r2, [r3, #8]
    3546:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    3548:	689a      	ldr	r2, [r3, #8]
    354a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    354c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    354e:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    3550:	6803      	ldr	r3, [r0, #0]
    3552:	3301      	adds	r3, #1
    3554:	6003      	str	r3, [r0, #0]
    3556:	4770      	bx	lr

00003558 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert(List_t *const pxList, ListItem_t *const pxNewListItem)
{
    3558:	b430      	push	{r4, r5}
	ListItem_t *     pxIterator;
	const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    355a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if (xValueOfInsertion == portMAX_DELAY) {
    355c:	f1b5 3fff 	cmp.w	r5, #4294967295
    3560:	d002      	beq.n	3568 <vListInsert+0x10>
		    4) Using a queue or semaphore before it has been initialised or
		       before the scheduler has been started (are interrupts firing
		       before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    3562:	f100 0208 	add.w	r2, r0, #8
    3566:	e002      	b.n	356e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
    3568:	6902      	ldr	r2, [r0, #16]
    356a:	e004      	b.n	3576 <vListInsert+0x1e>
		     pxIterator
		     = pxIterator
    356c:	461a      	mov	r2, r3
		for (pxIterator = (ListItem_t *)&(pxList->xListEnd); pxIterator->pxNext->xItemValue <= xValueOfInsertion;
    356e:	6853      	ldr	r3, [r2, #4]
    3570:	681c      	ldr	r4, [r3, #0]
    3572:	42a5      	cmp	r5, r4
    3574:	d2fa      	bcs.n	356c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext             = pxIterator->pxNext;
    3576:	6853      	ldr	r3, [r2, #4]
    3578:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    357a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious         = pxIterator;
    357c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext                = pxNewListItem;
    357e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = (void *)pxList;
    3580:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    3582:	6803      	ldr	r3, [r0, #0]
    3584:	3301      	adds	r3, #1
    3586:	6003      	str	r3, [r0, #0]
}
    3588:	bc30      	pop	{r4, r5}
    358a:	4770      	bx	lr

0000358c <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    358c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    358e:	6842      	ldr	r2, [r0, #4]
    3590:	6881      	ldr	r1, [r0, #8]
    3592:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    3594:	6882      	ldr	r2, [r0, #8]
    3596:	6841      	ldr	r1, [r0, #4]
    3598:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    359a:	685a      	ldr	r2, [r3, #4]
    359c:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    359e:	bf04      	itt	eq
    35a0:	6882      	ldreq	r2, [r0, #8]
    35a2:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    35a4:	2200      	movs	r2, #0
    35a6:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    35a8:	681a      	ldr	r2, [r3, #0]
    35aa:	3a01      	subs	r2, #1
    35ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    35ae:	6818      	ldr	r0, [r3, #0]
}
    35b0:	4770      	bx	lr
	...

000035b4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError(void)
{
    35b4:	b082      	sub	sp, #8
	volatile uint32_t ulDummy = 0;
    35b6:	2300      	movs	r3, #0
    35b8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
    35ba:	4b0d      	ldr	r3, [pc, #52]	; (35f0 <prvTaskExitError+0x3c>)
    35bc:	681b      	ldr	r3, [r3, #0]
    35be:	f1b3 3fff 	cmp.w	r3, #4294967295
    35c2:	d008      	beq.n	35d6 <prvTaskExitError+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    35c4:	f04f 0380 	mov.w	r3, #128	; 0x80
    35c8:	f383 8811 	msr	BASEPRI, r3
    35cc:	f3bf 8f6f 	isb	sy
    35d0:	f3bf 8f4f 	dsb	sy
    35d4:	e7fe      	b.n	35d4 <prvTaskExitError+0x20>
    35d6:	f04f 0380 	mov.w	r3, #128	; 0x80
    35da:	f383 8811 	msr	BASEPRI, r3
    35de:	f3bf 8f6f 	isb	sy
    35e2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
    35e6:	9b01      	ldr	r3, [sp, #4]
    35e8:	2b00      	cmp	r3, #0
    35ea:	d0fc      	beq.n	35e6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
    35ec:	b002      	add	sp, #8
    35ee:	4770      	bx	lr
    35f0:	20000124 	.word	0x20000124

000035f4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
    35f4:	4808      	ldr	r0, [pc, #32]	; (3618 <prvPortStartFirstTask+0x24>)
    35f6:	6800      	ldr	r0, [r0, #0]
    35f8:	6800      	ldr	r0, [r0, #0]
    35fa:	f380 8808 	msr	MSP, r0
    35fe:	f04f 0000 	mov.w	r0, #0
    3602:	f380 8814 	msr	CONTROL, r0
    3606:	b662      	cpsie	i
    3608:	b661      	cpsie	f
    360a:	f3bf 8f4f 	dsb	sy
    360e:	f3bf 8f6f 	isb	sy
    3612:	df00      	svc	0
    3614:	bf00      	nop
    3616:	0000      	.short	0x0000
    3618:	e000ed08 	.word	0xe000ed08

0000361c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void)
{
	__asm volatile("	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
    361c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 362c <vPortEnableVFP+0x10>
    3620:	6801      	ldr	r1, [r0, #0]
    3622:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3626:	6001      	str	r1, [r0, #0]
    3628:	4770      	bx	lr
    362a:	0000      	.short	0x0000
    362c:	e000ed88 	.word	0xe000ed88

00003630 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
    3630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3634:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ((StackType_t)pxCode) & portSTART_ADDRESS_MASK; /* PC */
    3638:	f021 0101 	bic.w	r1, r1, #1
    363c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = (StackType_t)portTASK_RETURN_ADDRESS; /* LR */
    3640:	4b05      	ldr	r3, [pc, #20]	; (3658 <pxPortInitialiseStack+0x28>)
    3642:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = (StackType_t)pvParameters; /* R0 */
    3646:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
    364a:	f06f 0302 	mvn.w	r3, #2
    364e:	f840 3c24 	str.w	r3, [r0, #-36]
}
    3652:	3844      	subs	r0, #68	; 0x44
    3654:	4770      	bx	lr
    3656:	bf00      	nop
    3658:	000035b5 	.word	0x000035b5
    365c:	00000000 	.word	0x00000000

00003660 <SVC_Handler>:
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    3660:	4b07      	ldr	r3, [pc, #28]	; (3680 <pxCurrentTCBConst2>)
    3662:	6819      	ldr	r1, [r3, #0]
    3664:	6808      	ldr	r0, [r1, #0]
    3666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    366a:	f380 8809 	msr	PSP, r0
    366e:	f3bf 8f6f 	isb	sy
    3672:	f04f 0000 	mov.w	r0, #0
    3676:	f380 8811 	msr	BASEPRI, r0
    367a:	4770      	bx	lr
    367c:	f3af 8000 	nop.w

00003680 <pxCurrentTCBConst2>:
    3680:	200029f8 	.word	0x200029f8

00003684 <vPortEnterCritical>:
    3684:	f04f 0380 	mov.w	r3, #128	; 0x80
    3688:	f383 8811 	msr	BASEPRI, r3
    368c:	f3bf 8f6f 	isb	sy
    3690:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
    3694:	4a0a      	ldr	r2, [pc, #40]	; (36c0 <vPortEnterCritical+0x3c>)
    3696:	6813      	ldr	r3, [r2, #0]
    3698:	3301      	adds	r3, #1
    369a:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 1) {
    369c:	2b01      	cmp	r3, #1
    369e:	d10d      	bne.n	36bc <vPortEnterCritical+0x38>
		configASSERT((portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK) == 0);
    36a0:	4b08      	ldr	r3, [pc, #32]	; (36c4 <vPortEnterCritical+0x40>)
    36a2:	681b      	ldr	r3, [r3, #0]
    36a4:	f013 0fff 	tst.w	r3, #255	; 0xff
    36a8:	d008      	beq.n	36bc <vPortEnterCritical+0x38>
    36aa:	f04f 0380 	mov.w	r3, #128	; 0x80
    36ae:	f383 8811 	msr	BASEPRI, r3
    36b2:	f3bf 8f6f 	isb	sy
    36b6:	f3bf 8f4f 	dsb	sy
    36ba:	e7fe      	b.n	36ba <vPortEnterCritical+0x36>
    36bc:	4770      	bx	lr
    36be:	bf00      	nop
    36c0:	20000124 	.word	0x20000124
    36c4:	e000ed04 	.word	0xe000ed04

000036c8 <vPortExitCritical>:
	configASSERT(uxCriticalNesting);
    36c8:	4b09      	ldr	r3, [pc, #36]	; (36f0 <vPortExitCritical+0x28>)
    36ca:	681b      	ldr	r3, [r3, #0]
    36cc:	b943      	cbnz	r3, 36e0 <vPortExitCritical+0x18>
    36ce:	f04f 0380 	mov.w	r3, #128	; 0x80
    36d2:	f383 8811 	msr	BASEPRI, r3
    36d6:	f3bf 8f6f 	isb	sy
    36da:	f3bf 8f4f 	dsb	sy
    36de:	e7fe      	b.n	36de <vPortExitCritical+0x16>
	uxCriticalNesting--;
    36e0:	3b01      	subs	r3, #1
    36e2:	4a03      	ldr	r2, [pc, #12]	; (36f0 <vPortExitCritical+0x28>)
    36e4:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
    36e6:	b90b      	cbnz	r3, 36ec <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    36e8:	f383 8811 	msr	BASEPRI, r3
    36ec:	4770      	bx	lr
    36ee:	bf00      	nop
    36f0:	20000124 	.word	0x20000124
	...

00003700 <PendSV_Handler>:
	__asm volatile(
    3700:	f3ef 8009 	mrs	r0, PSP
    3704:	f3bf 8f6f 	isb	sy
    3708:	4b15      	ldr	r3, [pc, #84]	; (3760 <pxCurrentTCBConst>)
    370a:	681a      	ldr	r2, [r3, #0]
    370c:	f01e 0f10 	tst.w	lr, #16
    3710:	bf08      	it	eq
    3712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    3716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    371a:	6010      	str	r0, [r2, #0]
    371c:	e92d 0009 	stmdb	sp!, {r0, r3}
    3720:	f04f 0080 	mov.w	r0, #128	; 0x80
    3724:	f380 8811 	msr	BASEPRI, r0
    3728:	f3bf 8f4f 	dsb	sy
    372c:	f3bf 8f6f 	isb	sy
    3730:	f001 f962 	bl	49f8 <vTaskSwitchContext>
    3734:	f04f 0000 	mov.w	r0, #0
    3738:	f380 8811 	msr	BASEPRI, r0
    373c:	bc09      	pop	{r0, r3}
    373e:	6819      	ldr	r1, [r3, #0]
    3740:	6808      	ldr	r0, [r1, #0]
    3742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3746:	f01e 0f10 	tst.w	lr, #16
    374a:	bf08      	it	eq
    374c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    3750:	f380 8809 	msr	PSP, r0
    3754:	f3bf 8f6f 	isb	sy
    3758:	4770      	bx	lr
    375a:	bf00      	nop
    375c:	f3af 8000 	nop.w

00003760 <pxCurrentTCBConst>:
    3760:	200029f8 	.word	0x200029f8

00003764 <SysTick_Handler>:
{
    3764:	b508      	push	{r3, lr}
	__asm volatile("	mov %0, %1												\n"
    3766:	f04f 0380 	mov.w	r3, #128	; 0x80
    376a:	f383 8811 	msr	BASEPRI, r3
    376e:	f3bf 8f6f 	isb	sy
    3772:	f3bf 8f4f 	dsb	sy
		if (xTaskIncrementTick() != pdFALSE) {
    3776:	4b05      	ldr	r3, [pc, #20]	; (378c <SysTick_Handler+0x28>)
    3778:	4798      	blx	r3
    377a:	b118      	cbz	r0, 3784 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    377c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3780:	4b03      	ldr	r3, [pc, #12]	; (3790 <SysTick_Handler+0x2c>)
    3782:	601a      	str	r2, [r3, #0]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3784:	2300      	movs	r3, #0
    3786:	f383 8811 	msr	BASEPRI, r3
    378a:	bd08      	pop	{r3, pc}
    378c:	000046c1 	.word	0x000046c1
    3790:	e000ed04 	.word	0xe000ed04

00003794 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG          = 0UL;
    3794:	4b05      	ldr	r3, [pc, #20]	; (37ac <vPortSetupTimerInterrupt+0x18>)
    3796:	2200      	movs	r2, #0
    3798:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
    379a:	4905      	ldr	r1, [pc, #20]	; (37b0 <vPortSetupTimerInterrupt+0x1c>)
    379c:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = (configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
    379e:	f64b 317f 	movw	r1, #47999	; 0xbb7f
    37a2:	4a04      	ldr	r2, [pc, #16]	; (37b4 <vPortSetupTimerInterrupt+0x20>)
    37a4:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = (portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
    37a6:	2207      	movs	r2, #7
    37a8:	601a      	str	r2, [r3, #0]
    37aa:	4770      	bx	lr
    37ac:	e000e010 	.word	0xe000e010
    37b0:	e000e018 	.word	0xe000e018
    37b4:	e000e014 	.word	0xe000e014

000037b8 <xPortStartScheduler>:
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
    37b8:	4b3b      	ldr	r3, [pc, #236]	; (38a8 <xPortStartScheduler+0xf0>)
    37ba:	681a      	ldr	r2, [r3, #0]
    37bc:	4b3b      	ldr	r3, [pc, #236]	; (38ac <xPortStartScheduler+0xf4>)
    37be:	429a      	cmp	r2, r3
    37c0:	d108      	bne.n	37d4 <xPortStartScheduler+0x1c>
	__asm volatile("	mov %0, %1												\n"
    37c2:	f04f 0380 	mov.w	r3, #128	; 0x80
    37c6:	f383 8811 	msr	BASEPRI, r3
    37ca:	f3bf 8f6f 	isb	sy
    37ce:	f3bf 8f4f 	dsb	sy
    37d2:	e7fe      	b.n	37d2 <xPortStartScheduler+0x1a>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
    37d4:	4b34      	ldr	r3, [pc, #208]	; (38a8 <xPortStartScheduler+0xf0>)
    37d6:	681a      	ldr	r2, [r3, #0]
    37d8:	4b35      	ldr	r3, [pc, #212]	; (38b0 <xPortStartScheduler+0xf8>)
    37da:	429a      	cmp	r2, r3
    37dc:	d108      	bne.n	37f0 <xPortStartScheduler+0x38>
    37de:	f04f 0380 	mov.w	r3, #128	; 0x80
    37e2:	f383 8811 	msr	BASEPRI, r3
    37e6:	f3bf 8f6f 	isb	sy
    37ea:	f3bf 8f4f 	dsb	sy
    37ee:	e7fe      	b.n	37ee <xPortStartScheduler+0x36>
{
    37f0:	b510      	push	{r4, lr}
    37f2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
    37f4:	4b2f      	ldr	r3, [pc, #188]	; (38b4 <xPortStartScheduler+0xfc>)
    37f6:	781a      	ldrb	r2, [r3, #0]
    37f8:	b2d2      	uxtb	r2, r2
    37fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
    37fc:	22ff      	movs	r2, #255	; 0xff
    37fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
    3800:	781b      	ldrb	r3, [r3, #0]
    3802:	b2db      	uxtb	r3, r3
    3804:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
    3808:	f89d 3003 	ldrb.w	r3, [sp, #3]
    380c:	4a2a      	ldr	r2, [pc, #168]	; (38b8 <xPortStartScheduler+0x100>)
    380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3812:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
    3814:	2307      	movs	r3, #7
    3816:	6053      	str	r3, [r2, #4]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3818:	f89d 3003 	ldrb.w	r3, [sp, #3]
    381c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3820:	d012      	beq.n	3848 <xPortStartScheduler+0x90>
    3822:	2306      	movs	r3, #6
    3824:	e000      	b.n	3828 <xPortStartScheduler+0x70>
    3826:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= (uint8_t)0x01;
    3828:	f89d 2003 	ldrb.w	r2, [sp, #3]
    382c:	0052      	lsls	r2, r2, #1
    382e:	b2d2      	uxtb	r2, r2
    3830:	f88d 2003 	strb.w	r2, [sp, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
    3834:	f89d 2003 	ldrb.w	r2, [sp, #3]
    3838:	1e59      	subs	r1, r3, #1
    383a:	f012 0f80 	tst.w	r2, #128	; 0x80
    383e:	d1f2      	bne.n	3826 <xPortStartScheduler+0x6e>
    3840:	4a1d      	ldr	r2, [pc, #116]	; (38b8 <xPortStartScheduler+0x100>)
    3842:	6053      	str	r3, [r2, #4]
			configASSERT((portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue) == configPRIO_BITS);
    3844:	2b04      	cmp	r3, #4
    3846:	d008      	beq.n	385a <xPortStartScheduler+0xa2>
    3848:	f04f 0380 	mov.w	r3, #128	; 0x80
    384c:	f383 8811 	msr	BASEPRI, r3
    3850:	f3bf 8f6f 	isb	sy
    3854:	f3bf 8f4f 	dsb	sy
    3858:	e7fe      	b.n	3858 <xPortStartScheduler+0xa0>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
    385a:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
    385c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    3860:	4a15      	ldr	r2, [pc, #84]	; (38b8 <xPortStartScheduler+0x100>)
    3862:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
    3864:	9b01      	ldr	r3, [sp, #4]
    3866:	b2db      	uxtb	r3, r3
    3868:	4a12      	ldr	r2, [pc, #72]	; (38b4 <xPortStartScheduler+0xfc>)
    386a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
    386c:	4b13      	ldr	r3, [pc, #76]	; (38bc <xPortStartScheduler+0x104>)
    386e:	681a      	ldr	r2, [r3, #0]
    3870:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
    3874:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
    3876:	681a      	ldr	r2, [r3, #0]
    3878:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
    387c:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
    387e:	4b10      	ldr	r3, [pc, #64]	; (38c0 <xPortStartScheduler+0x108>)
    3880:	4798      	blx	r3
	uxCriticalNesting = 0;
    3882:	2400      	movs	r4, #0
    3884:	4b0f      	ldr	r3, [pc, #60]	; (38c4 <xPortStartScheduler+0x10c>)
    3886:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
    3888:	4b0f      	ldr	r3, [pc, #60]	; (38c8 <xPortStartScheduler+0x110>)
    388a:	4798      	blx	r3
	*(portFPCCR) |= portASPEN_AND_LSPEN_BITS;
    388c:	4a0f      	ldr	r2, [pc, #60]	; (38cc <xPortStartScheduler+0x114>)
    388e:	6813      	ldr	r3, [r2, #0]
    3890:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    3894:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
    3896:	4b0e      	ldr	r3, [pc, #56]	; (38d0 <xPortStartScheduler+0x118>)
    3898:	4798      	blx	r3
	vTaskSwitchContext();
    389a:	4b0e      	ldr	r3, [pc, #56]	; (38d4 <xPortStartScheduler+0x11c>)
    389c:	4798      	blx	r3
	prvTaskExitError();
    389e:	4b0e      	ldr	r3, [pc, #56]	; (38d8 <xPortStartScheduler+0x120>)
    38a0:	4798      	blx	r3
}
    38a2:	4620      	mov	r0, r4
    38a4:	b002      	add	sp, #8
    38a6:	bd10      	pop	{r4, pc}
    38a8:	e000ed00 	.word	0xe000ed00
    38ac:	410fc271 	.word	0x410fc271
    38b0:	410fc270 	.word	0x410fc270
    38b4:	e000e400 	.word	0xe000e400
    38b8:	20000d50 	.word	0x20000d50
    38bc:	e000ed20 	.word	0xe000ed20
    38c0:	00003795 	.word	0x00003795
    38c4:	20000124 	.word	0x20000124
    38c8:	0000361d 	.word	0x0000361d
    38cc:	e000ef34 	.word	0xe000ef34
    38d0:	000035f5 	.word	0x000035f5
    38d4:	000049f9 	.word	0x000049f9
    38d8:	000035b5 	.word	0x000035b5

000038dc <vPortValidateInterruptPriority>:
{
	uint32_t ulCurrentInterrupt;
	uint8_t  ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile("mrs %0, ipsr" : "=r"(ulCurrentInterrupt)::"memory");
    38dc:	f3ef 8305 	mrs	r3, IPSR

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
    38e0:	2b0f      	cmp	r3, #15
    38e2:	d90f      	bls.n	3904 <vPortValidateInterruptPriority+0x28>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
    38e4:	4a10      	ldr	r2, [pc, #64]	; (3928 <vPortValidateInterruptPriority+0x4c>)
    38e6:	5c9b      	ldrb	r3, [r3, r2]
    38e8:	b2db      	uxtb	r3, r3
		interrupt entry is as fast and simple as possible.

		The following links provide detailed information:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html
		http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
    38ea:	4a10      	ldr	r2, [pc, #64]	; (392c <vPortValidateInterruptPriority+0x50>)
    38ec:	7812      	ldrb	r2, [r2, #0]
    38ee:	429a      	cmp	r2, r3
    38f0:	d908      	bls.n	3904 <vPortValidateInterruptPriority+0x28>
    38f2:	f04f 0380 	mov.w	r3, #128	; 0x80
    38f6:	f383 8811 	msr	BASEPRI, r3
    38fa:	f3bf 8f6f 	isb	sy
    38fe:	f3bf 8f4f 	dsb	sy
    3902:	e7fe      	b.n	3902 <vPortValidateInterruptPriority+0x26>
	configuration then the correct setting can be achieved on all Cortex-M
	devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	scheduler.  Note however that some vendor specific peripheral libraries
	assume a non-zero priority group setting, in which cases using a value
	of zero will result in unpredictable behaviour. */
	configASSERT((portAIRCR_REG & portPRIORITY_GROUP_MASK) <= ulMaxPRIGROUPValue);
    3904:	4b0a      	ldr	r3, [pc, #40]	; (3930 <vPortValidateInterruptPriority+0x54>)
    3906:	681b      	ldr	r3, [r3, #0]
    3908:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    390c:	4a07      	ldr	r2, [pc, #28]	; (392c <vPortValidateInterruptPriority+0x50>)
    390e:	6852      	ldr	r2, [r2, #4]
    3910:	4293      	cmp	r3, r2
    3912:	d908      	bls.n	3926 <vPortValidateInterruptPriority+0x4a>
    3914:	f04f 0380 	mov.w	r3, #128	; 0x80
    3918:	f383 8811 	msr	BASEPRI, r3
    391c:	f3bf 8f6f 	isb	sy
    3920:	f3bf 8f4f 	dsb	sy
    3924:	e7fe      	b.n	3924 <vPortValidateInterruptPriority+0x48>
    3926:	4770      	bx	lr
    3928:	e000e3f0 	.word	0xe000e3f0
    392c:	20000d50 	.word	0x20000d50
    3930:	e000ed0c 	.word	0xe000ed0c

00003934 <pvPortMalloc>:
static size_t xNextFreeByte = (size_t)0;

/*-----------------------------------------------------------*/

void *pvPortMalloc(size_t xWantedSize)
{
    3934:	b538      	push	{r3, r4, r5, lr}
    3936:	4604      	mov	r4, r0
	static uint8_t *pucAlignedHeap = NULL;

/* Ensure that blocks are always aligned to the required number of bytes. */
#if (portBYTE_ALIGNMENT != 1)
	{
		if (xWantedSize & portBYTE_ALIGNMENT_MASK) {
    3938:	f010 0f07 	tst.w	r0, #7
			/* Byte alignment required. */
			xWantedSize += (portBYTE_ALIGNMENT - (xWantedSize & portBYTE_ALIGNMENT_MASK));
    393c:	bf1c      	itt	ne
    393e:	f020 0407 	bicne.w	r4, r0, #7
    3942:	3408      	addne	r4, #8
		}
	}
#endif

	vTaskSuspendAll();
    3944:	4b11      	ldr	r3, [pc, #68]	; (398c <pvPortMalloc+0x58>)
    3946:	4798      	blx	r3
	{
		if (pucAlignedHeap == NULL) {
    3948:	4b11      	ldr	r3, [pc, #68]	; (3990 <pvPortMalloc+0x5c>)
    394a:	681b      	ldr	r3, [r3, #0]
    394c:	b19b      	cbz	r3, 3976 <pvPortMalloc+0x42>
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
		}

		/* Check there is enough room left for the allocation. */
		if (((xNextFreeByte + xWantedSize) < configADJUSTED_HEAP_SIZE)
    394e:	4b11      	ldr	r3, [pc, #68]	; (3994 <pvPortMalloc+0x60>)
    3950:	f8d3 3b0c 	ldr.w	r3, [r3, #2828]	; 0xb0c
    3954:	441c      	add	r4, r3
    3956:	f641 32f7 	movw	r2, #7159	; 0x1bf7
    395a:	4294      	cmp	r4, r2
    395c:	d812      	bhi.n	3984 <pvPortMalloc+0x50>
		    && ((xNextFreeByte + xWantedSize) > xNextFreeByte)) /* Check for overflow. */
    395e:	42a3      	cmp	r3, r4
    3960:	d212      	bcs.n	3988 <pvPortMalloc+0x54>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    3962:	4a0b      	ldr	r2, [pc, #44]	; (3990 <pvPortMalloc+0x5c>)
    3964:	6815      	ldr	r5, [r2, #0]
    3966:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
    3968:	4b0a      	ldr	r3, [pc, #40]	; (3994 <pvPortMalloc+0x60>)
    396a:	f8c3 4b0c 	str.w	r4, [r3, #2828]	; 0xb0c
		}

		traceMALLOC(pvReturn, xWantedSize);
	}
	(void)xTaskResumeAll();
    396e:	4b0a      	ldr	r3, [pc, #40]	; (3998 <pvPortMalloc+0x64>)
    3970:	4798      	blx	r3
		}
	}
#endif

	return pvReturn;
}
    3972:	4628      	mov	r0, r5
    3974:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    3976:	4a06      	ldr	r2, [pc, #24]	; (3990 <pvPortMalloc+0x5c>)
    3978:	f102 030c 	add.w	r3, r2, #12
			                             & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK)));
    397c:	f023 0307 	bic.w	r3, r3, #7
			pucAlignedHeap = (uint8_t *)(((portPOINTER_SIZE_TYPE)&ucHeap[portBYTE_ALIGNMENT])
    3980:	6013      	str	r3, [r2, #0]
    3982:	e7e4      	b.n	394e <pvPortMalloc+0x1a>
	void *          pvReturn       = NULL;
    3984:	2500      	movs	r5, #0
    3986:	e7f2      	b.n	396e <pvPortMalloc+0x3a>
    3988:	2500      	movs	r5, #0
    398a:	e7f0      	b.n	396e <pvPortMalloc+0x3a>
    398c:	000046a1 	.word	0x000046a1
    3990:	20000d58 	.word	0x20000d58
    3994:	20001e50 	.word	0x20001e50
    3998:	000047e9 	.word	0x000047e9

0000399c <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	(void)pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT(pv == NULL);
    399c:	b140      	cbz	r0, 39b0 <vPortFree+0x14>
    399e:	f04f 0380 	mov.w	r3, #128	; 0x80
    39a2:	f383 8811 	msr	BASEPRI, r3
    39a6:	f3bf 8f6f 	isb	sy
    39aa:	f3bf 8f4f 	dsb	sy
    39ae:	e7fe      	b.n	39ae <vPortFree+0x12>
    39b0:	4770      	bx	lr
	...

000039b4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty(const Queue_t *pxQueue)
{
    39b4:	b510      	push	{r4, lr}
    39b6:	4604      	mov	r4, r0
	BaseType_t xReturn;

	taskENTER_CRITICAL();
    39b8:	4b04      	ldr	r3, [pc, #16]	; (39cc <prvIsQueueEmpty+0x18>)
    39ba:	4798      	blx	r3
	{
		if (pxQueue->uxMessagesWaiting == (UBaseType_t)0) {
    39bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
			xReturn = pdTRUE;
		} else {
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    39be:	4b04      	ldr	r3, [pc, #16]	; (39d0 <prvIsQueueEmpty+0x1c>)
    39c0:	4798      	blx	r3

	return xReturn;
}
    39c2:	fab4 f084 	clz	r0, r4
    39c6:	0940      	lsrs	r0, r0, #5
    39c8:	bd10      	pop	{r4, pc}
    39ca:	bf00      	nop
    39cc:	00003685 	.word	0x00003685
    39d0:	000036c9 	.word	0x000036c9

000039d4 <prvCopyDataToQueue>:
{
    39d4:	b570      	push	{r4, r5, r6, lr}
    39d6:	4604      	mov	r4, r0
    39d8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    39da:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if (pxQueue->uxItemSize == (UBaseType_t)0) {
    39dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
    39de:	b952      	cbnz	r2, 39f6 <prvCopyDataToQueue+0x22>
			if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    39e0:	6803      	ldr	r3, [r0, #0]
    39e2:	2b00      	cmp	r3, #0
    39e4:	d12a      	bne.n	3a3c <prvCopyDataToQueue+0x68>
				xReturn                = xTaskPriorityDisinherit((void *)pxQueue->pxMutexHolder);
    39e6:	6840      	ldr	r0, [r0, #4]
    39e8:	4b18      	ldr	r3, [pc, #96]	; (3a4c <prvCopyDataToQueue+0x78>)
    39ea:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
    39ec:	2300      	movs	r3, #0
    39ee:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + (UBaseType_t)1;
    39f0:	3501      	adds	r5, #1
    39f2:	63a5      	str	r5, [r4, #56]	; 0x38
}
    39f4:	bd70      	pop	{r4, r5, r6, pc}
	} else if (xPosition == queueSEND_TO_BACK) {
    39f6:	b96e      	cbnz	r6, 3a14 <prvCopyDataToQueue+0x40>
		(void)memcpy((void *)pxQueue->pcWriteTo,
    39f8:	6880      	ldr	r0, [r0, #8]
    39fa:	4b15      	ldr	r3, [pc, #84]	; (3a50 <prvCopyDataToQueue+0x7c>)
    39fc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    39fe:	68a3      	ldr	r3, [r4, #8]
    3a00:	6c22      	ldr	r2, [r4, #64]	; 0x40
    3a02:	4413      	add	r3, r2
    3a04:	60a3      	str	r3, [r4, #8]
		if (pxQueue->pcWriteTo >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as comparison of pointers is
    3a06:	6862      	ldr	r2, [r4, #4]
    3a08:	4293      	cmp	r3, r2
    3a0a:	d319      	bcc.n	3a40 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3a0c:	6823      	ldr	r3, [r4, #0]
    3a0e:	60a3      	str	r3, [r4, #8]
	BaseType_t  xReturn = pdFALSE;
    3a10:	2000      	movs	r0, #0
    3a12:	e7ed      	b.n	39f0 <prvCopyDataToQueue+0x1c>
		(void)memcpy((void *)pxQueue->u.pcReadFrom,
    3a14:	68c0      	ldr	r0, [r0, #12]
    3a16:	4b0e      	ldr	r3, [pc, #56]	; (3a50 <prvCopyDataToQueue+0x7c>)
    3a18:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    3a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3a1c:	425b      	negs	r3, r3
    3a1e:	68e2      	ldr	r2, [r4, #12]
    3a20:	441a      	add	r2, r3
    3a22:	60e2      	str	r2, [r4, #12]
		if (pxQueue->u.pcReadFrom
    3a24:	6821      	ldr	r1, [r4, #0]
    3a26:	428a      	cmp	r2, r1
    3a28:	d202      	bcs.n	3a30 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = (pxQueue->pcTail - pxQueue->uxItemSize);
    3a2a:	6862      	ldr	r2, [r4, #4]
    3a2c:	4413      	add	r3, r2
    3a2e:	60e3      	str	r3, [r4, #12]
		if (xPosition == queueOVERWRITE) {
    3a30:	2e02      	cmp	r6, #2
    3a32:	d107      	bne.n	3a44 <prvCopyDataToQueue+0x70>
			if (uxMessagesWaiting > (UBaseType_t)0) {
    3a34:	b145      	cbz	r5, 3a48 <prvCopyDataToQueue+0x74>
				--uxMessagesWaiting;
    3a36:	3d01      	subs	r5, #1
	BaseType_t  xReturn = pdFALSE;
    3a38:	2000      	movs	r0, #0
    3a3a:	e7d9      	b.n	39f0 <prvCopyDataToQueue+0x1c>
    3a3c:	2000      	movs	r0, #0
    3a3e:	e7d7      	b.n	39f0 <prvCopyDataToQueue+0x1c>
    3a40:	2000      	movs	r0, #0
    3a42:	e7d5      	b.n	39f0 <prvCopyDataToQueue+0x1c>
    3a44:	2000      	movs	r0, #0
    3a46:	e7d3      	b.n	39f0 <prvCopyDataToQueue+0x1c>
    3a48:	2000      	movs	r0, #0
    3a4a:	e7d1      	b.n	39f0 <prvCopyDataToQueue+0x1c>
    3a4c:	00004d39 	.word	0x00004d39
    3a50:	000054a7 	.word	0x000054a7

00003a54 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if (configUSE_QUEUE_SETS == 1)

static BaseType_t prvNotifyQueueSetContainer(const Queue_t *const pxQueue, const BaseType_t xCopyPosition)
{
    3a54:	b570      	push	{r4, r5, r6, lr}
    3a56:	b082      	sub	sp, #8
    3a58:	9001      	str	r0, [sp, #4]
	Queue_t *  pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    3a5a:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn             = pdFALSE;

	/* This function must be called form a critical section. */

	configASSERT(pxQueueSetContainer);
    3a5c:	b164      	cbz	r4, 3a78 <prvNotifyQueueSetContainer+0x24>
	configASSERT(pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength);
    3a5e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3a62:	429a      	cmp	r2, r3
    3a64:	d311      	bcc.n	3a8a <prvNotifyQueueSetContainer+0x36>
    3a66:	f04f 0380 	mov.w	r3, #128	; 0x80
    3a6a:	f383 8811 	msr	BASEPRI, r3
    3a6e:	f3bf 8f6f 	isb	sy
    3a72:	f3bf 8f4f 	dsb	sy
    3a76:	e7fe      	b.n	3a76 <prvNotifyQueueSetContainer+0x22>
    3a78:	f04f 0380 	mov.w	r3, #128	; 0x80
    3a7c:	f383 8811 	msr	BASEPRI, r3
    3a80:	f3bf 8f6f 	isb	sy
    3a84:	f3bf 8f4f 	dsb	sy
    3a88:	e7fe      	b.n	3a88 <prvNotifyQueueSetContainer+0x34>

	if (pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength) {
    3a8a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3a8c:	4293      	cmp	r3, r2
    3a8e:	d803      	bhi.n	3a98 <prvNotifyQueueSetContainer+0x44>
	BaseType_t xReturn             = pdFALSE;
    3a90:	2600      	movs	r6, #0
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
}
    3a92:	4630      	mov	r0, r6
    3a94:	b002      	add	sp, #8
    3a96:	bd70      	pop	{r4, r5, r6, pc}
    3a98:	460a      	mov	r2, r1
		const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    3a9a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    3a9e:	b26d      	sxtb	r5, r5
		xReturn = prvCopyDataToQueue(pxQueueSetContainer, &pxQueue, xCopyPosition);
    3aa0:	a901      	add	r1, sp, #4
    3aa2:	4620      	mov	r0, r4
    3aa4:	4b0a      	ldr	r3, [pc, #40]	; (3ad0 <prvNotifyQueueSetContainer+0x7c>)
    3aa6:	4798      	blx	r3
    3aa8:	4606      	mov	r6, r0
		if (cTxLock == queueUNLOCKED) {
    3aaa:	f1b5 3fff 	cmp.w	r5, #4294967295
    3aae:	d10a      	bne.n	3ac6 <prvNotifyQueueSetContainer+0x72>
			if (listLIST_IS_EMPTY(&(pxQueueSetContainer->xTasksWaitingToReceive)) == pdFALSE) {
    3ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ab2:	2b00      	cmp	r3, #0
    3ab4:	d0ed      	beq.n	3a92 <prvNotifyQueueSetContainer+0x3e>
				if (xTaskRemoveFromEventList(&(pxQueueSetContainer->xTasksWaitingToReceive)) != pdFALSE) {
    3ab6:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3aba:	4b06      	ldr	r3, [pc, #24]	; (3ad4 <prvNotifyQueueSetContainer+0x80>)
    3abc:	4798      	blx	r3
    3abe:	2800      	cmp	r0, #0
					xReturn = pdTRUE;
    3ac0:	bf18      	it	ne
    3ac2:	2601      	movne	r6, #1
    3ac4:	e7e5      	b.n	3a92 <prvNotifyQueueSetContainer+0x3e>
			pxQueueSetContainer->cTxLock = (int8_t)(cTxLock + 1);
    3ac6:	1c6b      	adds	r3, r5, #1
    3ac8:	b25b      	sxtb	r3, r3
    3aca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    3ace:	e7e0      	b.n	3a92 <prvNotifyQueueSetContainer+0x3e>
    3ad0:	000039d5 	.word	0x000039d5
    3ad4:	00004b35 	.word	0x00004b35

00003ad8 <prvCopyDataFromQueue>:
	if (pxQueue->uxItemSize != (UBaseType_t)0) {
    3ad8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3ada:	b172      	cbz	r2, 3afa <prvCopyDataFromQueue+0x22>
{
    3adc:	b510      	push	{r4, lr}
    3ade:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    3ae0:	68c4      	ldr	r4, [r0, #12]
    3ae2:	4414      	add	r4, r2
    3ae4:	60c4      	str	r4, [r0, #12]
		if (pxQueue->u.pcReadFrom >= pxQueue->pcTail) /*lint !e946 MISRA exception justified as use of the relational
    3ae6:	6840      	ldr	r0, [r0, #4]
    3ae8:	4284      	cmp	r4, r0
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    3aea:	bf24      	itt	cs
    3aec:	6818      	ldrcs	r0, [r3, #0]
    3aee:	60d8      	strcs	r0, [r3, #12]
    3af0:	4608      	mov	r0, r1
		(void)memcpy((void *)pvBuffer,
    3af2:	68d9      	ldr	r1, [r3, #12]
    3af4:	4b01      	ldr	r3, [pc, #4]	; (3afc <prvCopyDataFromQueue+0x24>)
    3af6:	4798      	blx	r3
    3af8:	bd10      	pop	{r4, pc}
    3afa:	4770      	bx	lr
    3afc:	000054a7 	.word	0x000054a7

00003b00 <prvUnlockQueue>:
{
    3b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b04:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
    3b06:	4b23      	ldr	r3, [pc, #140]	; (3b94 <prvUnlockQueue+0x94>)
    3b08:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
    3b0a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
    3b0e:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3b10:	2c00      	cmp	r4, #0
    3b12:	dd19      	ble.n	3b48 <prvUnlockQueue+0x48>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3b14:	4e20      	ldr	r6, [pc, #128]	; (3b98 <prvUnlockQueue+0x98>)
						vTaskMissedYield();
    3b16:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3ba4 <prvUnlockQueue+0xa4>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3b1a:	4f20      	ldr	r7, [pc, #128]	; (3b9c <prvUnlockQueue+0x9c>)
    3b1c:	e008      	b.n	3b30 <prvUnlockQueue+0x30>
					if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3b20:	b193      	cbz	r3, 3b48 <prvUnlockQueue+0x48>
						if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3b22:	f105 0024 	add.w	r0, r5, #36	; 0x24
    3b26:	47b8      	blx	r7
    3b28:	b960      	cbnz	r0, 3b44 <prvUnlockQueue+0x44>
    3b2a:	3c01      	subs	r4, #1
    3b2c:	b264      	sxtb	r4, r4
		while (cTxLock > queueLOCKED_UNMODIFIED) {
    3b2e:	b15c      	cbz	r4, 3b48 <prvUnlockQueue+0x48>
				if (pxQueue->pxQueueSetContainer != NULL) {
    3b30:	6cab      	ldr	r3, [r5, #72]	; 0x48
    3b32:	2b00      	cmp	r3, #0
    3b34:	d0f3      	beq.n	3b1e <prvUnlockQueue+0x1e>
					if (prvNotifyQueueSetContainer(pxQueue, queueSEND_TO_BACK) != pdFALSE) {
    3b36:	2100      	movs	r1, #0
    3b38:	4628      	mov	r0, r5
    3b3a:	47b0      	blx	r6
    3b3c:	2800      	cmp	r0, #0
    3b3e:	d0f4      	beq.n	3b2a <prvUnlockQueue+0x2a>
						vTaskMissedYield();
    3b40:	47c0      	blx	r8
    3b42:	e7f2      	b.n	3b2a <prvUnlockQueue+0x2a>
							vTaskMissedYield();
    3b44:	47c0      	blx	r8
    3b46:	e7f0      	b.n	3b2a <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
    3b48:	23ff      	movs	r3, #255	; 0xff
    3b4a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
    3b4e:	4b14      	ldr	r3, [pc, #80]	; (3ba0 <prvUnlockQueue+0xa0>)
    3b50:	4798      	blx	r3
	taskENTER_CRITICAL();
    3b52:	4b10      	ldr	r3, [pc, #64]	; (3b94 <prvUnlockQueue+0x94>)
    3b54:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
    3b56:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
    3b5a:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3b5c:	2c00      	cmp	r4, #0
    3b5e:	dd12      	ble.n	3b86 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3b60:	692b      	ldr	r3, [r5, #16]
    3b62:	b183      	cbz	r3, 3b86 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3b64:	f105 0710 	add.w	r7, r5, #16
    3b68:	4e0c      	ldr	r6, [pc, #48]	; (3b9c <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
    3b6a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3ba4 <prvUnlockQueue+0xa4>
    3b6e:	e004      	b.n	3b7a <prvUnlockQueue+0x7a>
    3b70:	3c01      	subs	r4, #1
    3b72:	b264      	sxtb	r4, r4
		while (cRxLock > queueLOCKED_UNMODIFIED) {
    3b74:	b13c      	cbz	r4, 3b86 <prvUnlockQueue+0x86>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3b76:	692b      	ldr	r3, [r5, #16]
    3b78:	b12b      	cbz	r3, 3b86 <prvUnlockQueue+0x86>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3b7a:	4638      	mov	r0, r7
    3b7c:	47b0      	blx	r6
    3b7e:	2800      	cmp	r0, #0
    3b80:	d0f6      	beq.n	3b70 <prvUnlockQueue+0x70>
					vTaskMissedYield();
    3b82:	47c0      	blx	r8
    3b84:	e7f4      	b.n	3b70 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
    3b86:	23ff      	movs	r3, #255	; 0xff
    3b88:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
    3b8c:	4b04      	ldr	r3, [pc, #16]	; (3ba0 <prvUnlockQueue+0xa0>)
    3b8e:	4798      	blx	r3
    3b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b94:	00003685 	.word	0x00003685
    3b98:	00003a55 	.word	0x00003a55
    3b9c:	00004b35 	.word	0x00004b35
    3ba0:	000036c9 	.word	0x000036c9
    3ba4:	00004c65 	.word	0x00004c65

00003ba8 <xQueueGenericReset>:
{
    3ba8:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxQueue);
    3baa:	b330      	cbz	r0, 3bfa <xQueueGenericReset+0x52>
    3bac:	4604      	mov	r4, r0
    3bae:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
    3bb0:	4b1c      	ldr	r3, [pc, #112]	; (3c24 <xQueueGenericReset+0x7c>)
    3bb2:	4798      	blx	r3
		pxQueue->pcTail            = pxQueue->pcHead + (pxQueue->uxLength * pxQueue->uxItemSize);
    3bb4:	6822      	ldr	r2, [r4, #0]
    3bb6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    3bb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3bba:	fb03 f301 	mul.w	r3, r3, r1
    3bbe:	18d0      	adds	r0, r2, r3
    3bc0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = (UBaseType_t)0U;
    3bc2:	2000      	movs	r0, #0
    3bc4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo         = pxQueue->pcHead;
    3bc6:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom      = pxQueue->pcHead + ((pxQueue->uxLength - (UBaseType_t)1U) * pxQueue->uxItemSize);
    3bc8:	1a5b      	subs	r3, r3, r1
    3bca:	4413      	add	r3, r2
    3bcc:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock           = queueUNLOCKED;
    3bce:	23ff      	movs	r3, #255	; 0xff
    3bd0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock           = queueUNLOCKED;
    3bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if (xNewQueue == pdFALSE) {
    3bd8:	b9c5      	cbnz	r5, 3c0c <xQueueGenericReset+0x64>
			if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3bda:	6923      	ldr	r3, [r4, #16]
    3bdc:	b1eb      	cbz	r3, 3c1a <xQueueGenericReset+0x72>
				if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3bde:	f104 0010 	add.w	r0, r4, #16
    3be2:	4b11      	ldr	r3, [pc, #68]	; (3c28 <xQueueGenericReset+0x80>)
    3be4:	4798      	blx	r3
    3be6:	b1c0      	cbz	r0, 3c1a <xQueueGenericReset+0x72>
					queueYIELD_IF_USING_PREEMPTION();
    3be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3bec:	4b0f      	ldr	r3, [pc, #60]	; (3c2c <xQueueGenericReset+0x84>)
    3bee:	601a      	str	r2, [r3, #0]
    3bf0:	f3bf 8f4f 	dsb	sy
    3bf4:	f3bf 8f6f 	isb	sy
    3bf8:	e00f      	b.n	3c1a <xQueueGenericReset+0x72>
    3bfa:	f04f 0380 	mov.w	r3, #128	; 0x80
    3bfe:	f383 8811 	msr	BASEPRI, r3
    3c02:	f3bf 8f6f 	isb	sy
    3c06:	f3bf 8f4f 	dsb	sy
    3c0a:	e7fe      	b.n	3c0a <xQueueGenericReset+0x62>
			vListInitialise(&(pxQueue->xTasksWaitingToSend));
    3c0c:	f104 0010 	add.w	r0, r4, #16
    3c10:	4d07      	ldr	r5, [pc, #28]	; (3c30 <xQueueGenericReset+0x88>)
    3c12:	47a8      	blx	r5
			vListInitialise(&(pxQueue->xTasksWaitingToReceive));
    3c14:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3c18:	47a8      	blx	r5
	taskEXIT_CRITICAL();
    3c1a:	4b06      	ldr	r3, [pc, #24]	; (3c34 <xQueueGenericReset+0x8c>)
    3c1c:	4798      	blx	r3
}
    3c1e:	2001      	movs	r0, #1
    3c20:	bd38      	pop	{r3, r4, r5, pc}
    3c22:	bf00      	nop
    3c24:	00003685 	.word	0x00003685
    3c28:	00004b35 	.word	0x00004b35
    3c2c:	e000ed04 	.word	0xe000ed04
    3c30:	00003525 	.word	0x00003525
    3c34:	000036c9 	.word	0x000036c9

00003c38 <xQueueGenericCreate>:
{
    3c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT(uxQueueLength > (UBaseType_t)0);
    3c3a:	b940      	cbnz	r0, 3c4e <xQueueGenericCreate+0x16>
    3c3c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3c40:	f383 8811 	msr	BASEPRI, r3
    3c44:	f3bf 8f6f 	isb	sy
    3c48:	f3bf 8f4f 	dsb	sy
    3c4c:	e7fe      	b.n	3c4c <xQueueGenericCreate+0x14>
    3c4e:	4606      	mov	r6, r0
    3c50:	4617      	mov	r7, r2
    3c52:	460d      	mov	r5, r1
		xQueueSizeInBytes = (size_t)(
    3c54:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = (Queue_t *)pvPortMalloc(sizeof(Queue_t) + xQueueSizeInBytes);
    3c58:	3054      	adds	r0, #84	; 0x54
    3c5a:	4b0b      	ldr	r3, [pc, #44]	; (3c88 <xQueueGenericCreate+0x50>)
    3c5c:	4798      	blx	r3
	if (pxNewQueue != NULL) {
    3c5e:	4604      	mov	r4, r0
    3c60:	b178      	cbz	r0, 3c82 <xQueueGenericCreate+0x4a>
	if (uxItemSize == (UBaseType_t)0) {
    3c62:	b11d      	cbz	r5, 3c6c <xQueueGenericCreate+0x34>
		pucQueueStorage = ((uint8_t *)pxNewQueue) + sizeof(Queue_t);
    3c64:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = (int8_t *)pucQueueStorage;
    3c68:	6003      	str	r3, [r0, #0]
    3c6a:	e000      	b.n	3c6e <xQueueGenericCreate+0x36>
		pxNewQueue->pcHead = (int8_t *)pxNewQueue;
    3c6c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength   = uxQueueLength;
    3c6e:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    3c70:	6425      	str	r5, [r4, #64]	; 0x40
	(void)xQueueGenericReset(pxNewQueue, pdTRUE);
    3c72:	2101      	movs	r1, #1
    3c74:	4620      	mov	r0, r4
    3c76:	4b05      	ldr	r3, [pc, #20]	; (3c8c <xQueueGenericCreate+0x54>)
    3c78:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
    3c7a:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
    3c7e:	2300      	movs	r3, #0
    3c80:	64a3      	str	r3, [r4, #72]	; 0x48
}
    3c82:	4620      	mov	r0, r4
    3c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c86:	bf00      	nop
    3c88:	00003935 	.word	0x00003935
    3c8c:	00003ba9 	.word	0x00003ba9

00003c90 <xQueueGenericSend>:
{
    3c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c94:	b085      	sub	sp, #20
    3c96:	9201      	str	r2, [sp, #4]
	configASSERT(pxQueue);
    3c98:	b198      	cbz	r0, 3cc2 <xQueueGenericSend+0x32>
    3c9a:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3c9c:	b1d1      	cbz	r1, 3cd4 <xQueueGenericSend+0x44>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3c9e:	2b02      	cmp	r3, #2
    3ca0:	d024      	beq.n	3cec <xQueueGenericSend+0x5c>
    3ca2:	461e      	mov	r6, r3
    3ca4:	460f      	mov	r7, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3ca6:	4b64      	ldr	r3, [pc, #400]	; (3e38 <xQueueGenericSend+0x1a8>)
    3ca8:	4798      	blx	r3
    3caa:	bb58      	cbnz	r0, 3d04 <xQueueGenericSend+0x74>
    3cac:	9b01      	ldr	r3, [sp, #4]
    3cae:	b38b      	cbz	r3, 3d14 <xQueueGenericSend+0x84>
    3cb0:	f04f 0380 	mov.w	r3, #128	; 0x80
    3cb4:	f383 8811 	msr	BASEPRI, r3
    3cb8:	f3bf 8f6f 	isb	sy
    3cbc:	f3bf 8f4f 	dsb	sy
    3cc0:	e7fe      	b.n	3cc0 <xQueueGenericSend+0x30>
    3cc2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3cc6:	f383 8811 	msr	BASEPRI, r3
    3cca:	f3bf 8f6f 	isb	sy
    3cce:	f3bf 8f4f 	dsb	sy
    3cd2:	e7fe      	b.n	3cd2 <xQueueGenericSend+0x42>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3cd4:	6c02      	ldr	r2, [r0, #64]	; 0x40
    3cd6:	2a00      	cmp	r2, #0
    3cd8:	d0e1      	beq.n	3c9e <xQueueGenericSend+0xe>
    3cda:	f04f 0380 	mov.w	r3, #128	; 0x80
    3cde:	f383 8811 	msr	BASEPRI, r3
    3ce2:	f3bf 8f6f 	isb	sy
    3ce6:	f3bf 8f4f 	dsb	sy
    3cea:	e7fe      	b.n	3cea <xQueueGenericSend+0x5a>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3cec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    3cee:	2a01      	cmp	r2, #1
    3cf0:	d0d7      	beq.n	3ca2 <xQueueGenericSend+0x12>
    3cf2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3cf6:	f383 8811 	msr	BASEPRI, r3
    3cfa:	f3bf 8f6f 	isb	sy
    3cfe:	f3bf 8f4f 	dsb	sy
    3d02:	e7fe      	b.n	3d02 <xQueueGenericSend+0x72>
    3d04:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
    3d06:	f8df 815c 	ldr.w	r8, [pc, #348]	; 3e64 <xQueueGenericSend+0x1d4>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3d0a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 3e68 <xQueueGenericSend+0x1d8>
					portYIELD_WITHIN_API();
    3d0e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 3e44 <xQueueGenericSend+0x1b4>
    3d12:	e041      	b.n	3d98 <xQueueGenericSend+0x108>
    3d14:	2500      	movs	r5, #0
    3d16:	e7f6      	b.n	3d06 <xQueueGenericSend+0x76>
				xYieldRequired = prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3d18:	4632      	mov	r2, r6
    3d1a:	4639      	mov	r1, r7
    3d1c:	4620      	mov	r0, r4
    3d1e:	4b47      	ldr	r3, [pc, #284]	; (3e3c <xQueueGenericSend+0x1ac>)
    3d20:	4798      	blx	r3
					if (pxQueue->pxQueueSetContainer != NULL) {
    3d22:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3d24:	b193      	cbz	r3, 3d4c <xQueueGenericSend+0xbc>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3d26:	4631      	mov	r1, r6
    3d28:	4620      	mov	r0, r4
    3d2a:	4b45      	ldr	r3, [pc, #276]	; (3e40 <xQueueGenericSend+0x1b0>)
    3d2c:	4798      	blx	r3
    3d2e:	b138      	cbz	r0, 3d40 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3d34:	4b43      	ldr	r3, [pc, #268]	; (3e44 <xQueueGenericSend+0x1b4>)
    3d36:	601a      	str	r2, [r3, #0]
    3d38:	f3bf 8f4f 	dsb	sy
    3d3c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    3d40:	4b41      	ldr	r3, [pc, #260]	; (3e48 <xQueueGenericSend+0x1b8>)
    3d42:	4798      	blx	r3
				return pdPASS;
    3d44:	2001      	movs	r0, #1
}
    3d46:	b005      	add	sp, #20
    3d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3d4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3d4e:	b173      	cbz	r3, 3d6e <xQueueGenericSend+0xde>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3d50:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3d54:	4b3d      	ldr	r3, [pc, #244]	; (3e4c <xQueueGenericSend+0x1bc>)
    3d56:	4798      	blx	r3
    3d58:	2800      	cmp	r0, #0
    3d5a:	d0f1      	beq.n	3d40 <xQueueGenericSend+0xb0>
								queueYIELD_IF_USING_PREEMPTION();
    3d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3d60:	4b38      	ldr	r3, [pc, #224]	; (3e44 <xQueueGenericSend+0x1b4>)
    3d62:	601a      	str	r2, [r3, #0]
    3d64:	f3bf 8f4f 	dsb	sy
    3d68:	f3bf 8f6f 	isb	sy
    3d6c:	e7e8      	b.n	3d40 <xQueueGenericSend+0xb0>
						} else if (xYieldRequired != pdFALSE) {
    3d6e:	2800      	cmp	r0, #0
    3d70:	d0e6      	beq.n	3d40 <xQueueGenericSend+0xb0>
							queueYIELD_IF_USING_PREEMPTION();
    3d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3d76:	4b33      	ldr	r3, [pc, #204]	; (3e44 <xQueueGenericSend+0x1b4>)
    3d78:	601a      	str	r2, [r3, #0]
    3d7a:	f3bf 8f4f 	dsb	sy
    3d7e:	f3bf 8f6f 	isb	sy
    3d82:	e7dd      	b.n	3d40 <xQueueGenericSend+0xb0>
					taskEXIT_CRITICAL();
    3d84:	4b30      	ldr	r3, [pc, #192]	; (3e48 <xQueueGenericSend+0x1b8>)
    3d86:	4798      	blx	r3
					return errQUEUE_FULL;
    3d88:	2000      	movs	r0, #0
    3d8a:	e7dc      	b.n	3d46 <xQueueGenericSend+0xb6>
				prvUnlockQueue(pxQueue);
    3d8c:	4620      	mov	r0, r4
    3d8e:	4b30      	ldr	r3, [pc, #192]	; (3e50 <xQueueGenericSend+0x1c0>)
    3d90:	4798      	blx	r3
				(void)xTaskResumeAll();
    3d92:	4b30      	ldr	r3, [pc, #192]	; (3e54 <xQueueGenericSend+0x1c4>)
    3d94:	4798      	blx	r3
    3d96:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
    3d98:	47c0      	blx	r8
			if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3d9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3d9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3d9e:	429a      	cmp	r2, r3
    3da0:	d3ba      	bcc.n	3d18 <xQueueGenericSend+0x88>
    3da2:	2e02      	cmp	r6, #2
    3da4:	d0b8      	beq.n	3d18 <xQueueGenericSend+0x88>
				if (xTicksToWait == (TickType_t)0) {
    3da6:	9b01      	ldr	r3, [sp, #4]
    3da8:	2b00      	cmp	r3, #0
    3daa:	d0eb      	beq.n	3d84 <xQueueGenericSend+0xf4>
				} else if (xEntryTimeSet == pdFALSE) {
    3dac:	b90d      	cbnz	r5, 3db2 <xQueueGenericSend+0x122>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3dae:	a802      	add	r0, sp, #8
    3db0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
    3db2:	4b25      	ldr	r3, [pc, #148]	; (3e48 <xQueueGenericSend+0x1b8>)
    3db4:	4798      	blx	r3
		vTaskSuspendAll();
    3db6:	4b28      	ldr	r3, [pc, #160]	; (3e58 <xQueueGenericSend+0x1c8>)
    3db8:	4798      	blx	r3
		prvLockQueue(pxQueue);
    3dba:	47c0      	blx	r8
    3dbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    3dc0:	b25b      	sxtb	r3, r3
    3dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
    3dc6:	bf04      	itt	eq
    3dc8:	2300      	moveq	r3, #0
    3dca:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    3dce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    3dd2:	b25b      	sxtb	r3, r3
    3dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
    3dd8:	bf04      	itt	eq
    3dda:	2300      	moveq	r3, #0
    3ddc:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    3de0:	4b19      	ldr	r3, [pc, #100]	; (3e48 <xQueueGenericSend+0x1b8>)
    3de2:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    3de4:	a901      	add	r1, sp, #4
    3de6:	a802      	add	r0, sp, #8
    3de8:	4b1c      	ldr	r3, [pc, #112]	; (3e5c <xQueueGenericSend+0x1cc>)
    3dea:	4798      	blx	r3
    3dec:	b9e0      	cbnz	r0, 3e28 <xQueueGenericSend+0x198>
	taskENTER_CRITICAL();
    3dee:	47c0      	blx	r8
		if (pxQueue->uxMessagesWaiting == pxQueue->uxLength) {
    3df0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
    3df4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
    3df6:	4b14      	ldr	r3, [pc, #80]	; (3e48 <xQueueGenericSend+0x1b8>)
    3df8:	4798      	blx	r3
			if (prvIsQueueFull(pxQueue) != pdFALSE) {
    3dfa:	45ab      	cmp	fp, r5
    3dfc:	d1c6      	bne.n	3d8c <xQueueGenericSend+0xfc>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToSend), xTicksToWait);
    3dfe:	9901      	ldr	r1, [sp, #4]
    3e00:	f104 0010 	add.w	r0, r4, #16
    3e04:	4b16      	ldr	r3, [pc, #88]	; (3e60 <xQueueGenericSend+0x1d0>)
    3e06:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    3e08:	4620      	mov	r0, r4
    3e0a:	4b11      	ldr	r3, [pc, #68]	; (3e50 <xQueueGenericSend+0x1c0>)
    3e0c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    3e0e:	4b11      	ldr	r3, [pc, #68]	; (3e54 <xQueueGenericSend+0x1c4>)
    3e10:	4798      	blx	r3
    3e12:	2800      	cmp	r0, #0
    3e14:	d1bf      	bne.n	3d96 <xQueueGenericSend+0x106>
					portYIELD_WITHIN_API();
    3e16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3e1a:	f8c9 3000 	str.w	r3, [r9]
    3e1e:	f3bf 8f4f 	dsb	sy
    3e22:	f3bf 8f6f 	isb	sy
    3e26:	e7b6      	b.n	3d96 <xQueueGenericSend+0x106>
			prvUnlockQueue(pxQueue);
    3e28:	4620      	mov	r0, r4
    3e2a:	4b09      	ldr	r3, [pc, #36]	; (3e50 <xQueueGenericSend+0x1c0>)
    3e2c:	4798      	blx	r3
			(void)xTaskResumeAll();
    3e2e:	4b09      	ldr	r3, [pc, #36]	; (3e54 <xQueueGenericSend+0x1c4>)
    3e30:	4798      	blx	r3
			return errQUEUE_FULL;
    3e32:	2000      	movs	r0, #0
    3e34:	e787      	b.n	3d46 <xQueueGenericSend+0xb6>
    3e36:	bf00      	nop
    3e38:	00004c75 	.word	0x00004c75
    3e3c:	000039d5 	.word	0x000039d5
    3e40:	00003a55 	.word	0x00003a55
    3e44:	e000ed04 	.word	0xe000ed04
    3e48:	000036c9 	.word	0x000036c9
    3e4c:	00004b35 	.word	0x00004b35
    3e50:	00003b01 	.word	0x00003b01
    3e54:	000047e9 	.word	0x000047e9
    3e58:	000046a1 	.word	0x000046a1
    3e5c:	00004bd9 	.word	0x00004bd9
    3e60:	00004ab5 	.word	0x00004ab5
    3e64:	00003685 	.word	0x00003685
    3e68:	00004bc5 	.word	0x00004bc5

00003e6c <xQueueGenericSendFromISR>:
{
    3e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT(pxQueue);
    3e70:	2800      	cmp	r0, #0
    3e72:	d036      	beq.n	3ee2 <xQueueGenericSendFromISR+0x76>
    3e74:	4604      	mov	r4, r0
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3e76:	2900      	cmp	r1, #0
    3e78:	d03c      	beq.n	3ef4 <xQueueGenericSendFromISR+0x88>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3e7a:	2b02      	cmp	r3, #2
    3e7c:	d046      	beq.n	3f0c <xQueueGenericSendFromISR+0xa0>
    3e7e:	461f      	mov	r7, r3
    3e80:	4690      	mov	r8, r2
    3e82:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    3e84:	4b37      	ldr	r3, [pc, #220]	; (3f64 <xQueueGenericSendFromISR+0xf8>)
    3e86:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    3e88:	f3ef 8611 	mrs	r6, BASEPRI
    3e8c:	f04f 0380 	mov.w	r3, #128	; 0x80
    3e90:	f383 8811 	msr	BASEPRI, r3
    3e94:	f3bf 8f6f 	isb	sy
    3e98:	f3bf 8f4f 	dsb	sy
		if ((pxQueue->uxMessagesWaiting < pxQueue->uxLength) || (xCopyPosition == queueOVERWRITE)) {
    3e9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    3e9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3ea0:	429a      	cmp	r2, r3
    3ea2:	d301      	bcc.n	3ea8 <xQueueGenericSendFromISR+0x3c>
    3ea4:	2f02      	cmp	r7, #2
    3ea6:	d151      	bne.n	3f4c <xQueueGenericSendFromISR+0xe0>
			const int8_t cTxLock = pxQueue->cTxLock;
    3ea8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    3eac:	b26d      	sxtb	r5, r5
			(void)prvCopyDataToQueue(pxQueue, pvItemToQueue, xCopyPosition);
    3eae:	463a      	mov	r2, r7
    3eb0:	4649      	mov	r1, r9
    3eb2:	4620      	mov	r0, r4
    3eb4:	4b2c      	ldr	r3, [pc, #176]	; (3f68 <xQueueGenericSendFromISR+0xfc>)
    3eb6:	4798      	blx	r3
			if (cTxLock == queueUNLOCKED) {
    3eb8:	f1b5 3fff 	cmp.w	r5, #4294967295
    3ebc:	d140      	bne.n	3f40 <xQueueGenericSendFromISR+0xd4>
					if (pxQueue->pxQueueSetContainer != NULL) {
    3ebe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3ec0:	b383      	cbz	r3, 3f24 <xQueueGenericSendFromISR+0xb8>
						if (prvNotifyQueueSetContainer(pxQueue, xCopyPosition) != pdFALSE) {
    3ec2:	4639      	mov	r1, r7
    3ec4:	4620      	mov	r0, r4
    3ec6:	4b29      	ldr	r3, [pc, #164]	; (3f6c <xQueueGenericSendFromISR+0x100>)
    3ec8:	4798      	blx	r3
    3eca:	2800      	cmp	r0, #0
    3ecc:	d040      	beq.n	3f50 <xQueueGenericSendFromISR+0xe4>
							if (pxHigherPriorityTaskWoken != NULL) {
    3ece:	f1b8 0f00 	cmp.w	r8, #0
    3ed2:	d03f      	beq.n	3f54 <xQueueGenericSendFromISR+0xe8>
								*pxHigherPriorityTaskWoken = pdTRUE;
    3ed4:	2001      	movs	r0, #1
    3ed6:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    3eda:	f386 8811 	msr	BASEPRI, r6
}
    3ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile("	mov %0, %1												\n"
    3ee2:	f04f 0380 	mov.w	r3, #128	; 0x80
    3ee6:	f383 8811 	msr	BASEPRI, r3
    3eea:	f3bf 8f6f 	isb	sy
    3eee:	f3bf 8f4f 	dsb	sy
    3ef2:	e7fe      	b.n	3ef2 <xQueueGenericSendFromISR+0x86>
	configASSERT(!((pvItemToQueue == NULL) && (pxQueue->uxItemSize != (UBaseType_t)0U)));
    3ef4:	6c00      	ldr	r0, [r0, #64]	; 0x40
    3ef6:	2800      	cmp	r0, #0
    3ef8:	d0bf      	beq.n	3e7a <xQueueGenericSendFromISR+0xe>
    3efa:	f04f 0380 	mov.w	r3, #128	; 0x80
    3efe:	f383 8811 	msr	BASEPRI, r3
    3f02:	f3bf 8f6f 	isb	sy
    3f06:	f3bf 8f4f 	dsb	sy
    3f0a:	e7fe      	b.n	3f0a <xQueueGenericSendFromISR+0x9e>
	configASSERT(!((xCopyPosition == queueOVERWRITE) && (pxQueue->uxLength != 1)));
    3f0c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    3f0e:	2801      	cmp	r0, #1
    3f10:	d0b5      	beq.n	3e7e <xQueueGenericSendFromISR+0x12>
    3f12:	f04f 0380 	mov.w	r3, #128	; 0x80
    3f16:	f383 8811 	msr	BASEPRI, r3
    3f1a:	f3bf 8f6f 	isb	sy
    3f1e:	f3bf 8f4f 	dsb	sy
    3f22:	e7fe      	b.n	3f22 <xQueueGenericSendFromISR+0xb6>
						if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToReceive)) == pdFALSE) {
    3f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3f26:	b1bb      	cbz	r3, 3f58 <xQueueGenericSendFromISR+0xec>
							if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToReceive)) != pdFALSE) {
    3f28:	f104 0024 	add.w	r0, r4, #36	; 0x24
    3f2c:	4b10      	ldr	r3, [pc, #64]	; (3f70 <xQueueGenericSendFromISR+0x104>)
    3f2e:	4798      	blx	r3
    3f30:	b1a0      	cbz	r0, 3f5c <xQueueGenericSendFromISR+0xf0>
								if (pxHigherPriorityTaskWoken != NULL) {
    3f32:	f1b8 0f00 	cmp.w	r8, #0
    3f36:	d013      	beq.n	3f60 <xQueueGenericSendFromISR+0xf4>
									*pxHigherPriorityTaskWoken = pdTRUE;
    3f38:	2001      	movs	r0, #1
    3f3a:	f8c8 0000 	str.w	r0, [r8]
    3f3e:	e7cc      	b.n	3eda <xQueueGenericSendFromISR+0x6e>
				pxQueue->cTxLock = (int8_t)(cTxLock + 1);
    3f40:	1c6b      	adds	r3, r5, #1
    3f42:	b25b      	sxtb	r3, r3
    3f44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
    3f48:	2001      	movs	r0, #1
    3f4a:	e7c6      	b.n	3eda <xQueueGenericSendFromISR+0x6e>
			xReturn = errQUEUE_FULL;
    3f4c:	2000      	movs	r0, #0
    3f4e:	e7c4      	b.n	3eda <xQueueGenericSendFromISR+0x6e>
			xReturn = pdPASS;
    3f50:	2001      	movs	r0, #1
    3f52:	e7c2      	b.n	3eda <xQueueGenericSendFromISR+0x6e>
    3f54:	2001      	movs	r0, #1
    3f56:	e7c0      	b.n	3eda <xQueueGenericSendFromISR+0x6e>
    3f58:	2001      	movs	r0, #1
    3f5a:	e7be      	b.n	3eda <xQueueGenericSendFromISR+0x6e>
    3f5c:	2001      	movs	r0, #1
    3f5e:	e7bc      	b.n	3eda <xQueueGenericSendFromISR+0x6e>
    3f60:	2001      	movs	r0, #1
    3f62:	e7ba      	b.n	3eda <xQueueGenericSendFromISR+0x6e>
    3f64:	000038dd 	.word	0x000038dd
    3f68:	000039d5 	.word	0x000039d5
    3f6c:	00003a55 	.word	0x00003a55
    3f70:	00004b35 	.word	0x00004b35

00003f74 <xQueueReceive>:
{
    3f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f78:	b084      	sub	sp, #16
    3f7a:	9201      	str	r2, [sp, #4]
	configASSERT((pxQueue));
    3f7c:	b180      	cbz	r0, 3fa0 <xQueueReceive+0x2c>
    3f7e:	4604      	mov	r4, r0
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    3f80:	b1b9      	cbz	r1, 3fb2 <xQueueReceive+0x3e>
    3f82:	460e      	mov	r6, r1
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    3f84:	4b50      	ldr	r3, [pc, #320]	; (40c8 <xQueueReceive+0x154>)
    3f86:	4798      	blx	r3
    3f88:	b9f8      	cbnz	r0, 3fca <xQueueReceive+0x56>
    3f8a:	9b01      	ldr	r3, [sp, #4]
    3f8c:	b32b      	cbz	r3, 3fda <xQueueReceive+0x66>
    3f8e:	f04f 0380 	mov.w	r3, #128	; 0x80
    3f92:	f383 8811 	msr	BASEPRI, r3
    3f96:	f3bf 8f6f 	isb	sy
    3f9a:	f3bf 8f4f 	dsb	sy
    3f9e:	e7fe      	b.n	3f9e <xQueueReceive+0x2a>
    3fa0:	f04f 0380 	mov.w	r3, #128	; 0x80
    3fa4:	f383 8811 	msr	BASEPRI, r3
    3fa8:	f3bf 8f6f 	isb	sy
    3fac:	f3bf 8f4f 	dsb	sy
    3fb0:	e7fe      	b.n	3fb0 <xQueueReceive+0x3c>
	configASSERT(!(((pvBuffer) == NULL) && ((pxQueue)->uxItemSize != (UBaseType_t)0U)));
    3fb2:	6c03      	ldr	r3, [r0, #64]	; 0x40
    3fb4:	2b00      	cmp	r3, #0
    3fb6:	d0e4      	beq.n	3f82 <xQueueReceive+0xe>
    3fb8:	f04f 0380 	mov.w	r3, #128	; 0x80
    3fbc:	f383 8811 	msr	BASEPRI, r3
    3fc0:	f3bf 8f6f 	isb	sy
    3fc4:	f3bf 8f4f 	dsb	sy
    3fc8:	e7fe      	b.n	3fc8 <xQueueReceive+0x54>
    3fca:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
    3fcc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 40f4 <xQueueReceive+0x180>
					vTaskInternalSetTimeOutState(&xTimeOut);
    3fd0:	f8df a124 	ldr.w	sl, [pc, #292]	; 40f8 <xQueueReceive+0x184>
					portYIELD_WITHIN_API();
    3fd4:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 40d4 <xQueueReceive+0x160>
    3fd8:	e029      	b.n	402e <xQueueReceive+0xba>
    3fda:	2700      	movs	r7, #0
    3fdc:	e7f6      	b.n	3fcc <xQueueReceive+0x58>
				prvCopyDataFromQueue(pxQueue, pvBuffer);
    3fde:	4631      	mov	r1, r6
    3fe0:	4620      	mov	r0, r4
    3fe2:	4b3a      	ldr	r3, [pc, #232]	; (40cc <xQueueReceive+0x158>)
    3fe4:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - (UBaseType_t)1;
    3fe6:	3d01      	subs	r5, #1
    3fe8:	63a5      	str	r5, [r4, #56]	; 0x38
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    3fea:	6923      	ldr	r3, [r4, #16]
    3fec:	b163      	cbz	r3, 4008 <xQueueReceive+0x94>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    3fee:	f104 0010 	add.w	r0, r4, #16
    3ff2:	4b37      	ldr	r3, [pc, #220]	; (40d0 <xQueueReceive+0x15c>)
    3ff4:	4798      	blx	r3
    3ff6:	b138      	cbz	r0, 4008 <xQueueReceive+0x94>
						queueYIELD_IF_USING_PREEMPTION();
    3ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3ffc:	4b35      	ldr	r3, [pc, #212]	; (40d4 <xQueueReceive+0x160>)
    3ffe:	601a      	str	r2, [r3, #0]
    4000:	f3bf 8f4f 	dsb	sy
    4004:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    4008:	4b33      	ldr	r3, [pc, #204]	; (40d8 <xQueueReceive+0x164>)
    400a:	4798      	blx	r3
				return pdPASS;
    400c:	2001      	movs	r0, #1
}
    400e:	b004      	add	sp, #16
    4010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
    4014:	4b30      	ldr	r3, [pc, #192]	; (40d8 <xQueueReceive+0x164>)
    4016:	4798      	blx	r3
					return errQUEUE_EMPTY;
    4018:	2000      	movs	r0, #0
    401a:	e7f8      	b.n	400e <xQueueReceive+0x9a>
					vTaskInternalSetTimeOutState(&xTimeOut);
    401c:	a802      	add	r0, sp, #8
    401e:	47d0      	blx	sl
    4020:	e00e      	b.n	4040 <xQueueReceive+0xcc>
				prvUnlockQueue(pxQueue);
    4022:	4620      	mov	r0, r4
    4024:	4b2d      	ldr	r3, [pc, #180]	; (40dc <xQueueReceive+0x168>)
    4026:	4798      	blx	r3
				(void)xTaskResumeAll();
    4028:	4b2d      	ldr	r3, [pc, #180]	; (40e0 <xQueueReceive+0x16c>)
    402a:	4798      	blx	r3
    402c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    402e:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    4030:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if (uxMessagesWaiting > (UBaseType_t)0) {
    4032:	2d00      	cmp	r5, #0
    4034:	d1d3      	bne.n	3fde <xQueueReceive+0x6a>
				if (xTicksToWait == (TickType_t)0) {
    4036:	9b01      	ldr	r3, [sp, #4]
    4038:	2b00      	cmp	r3, #0
    403a:	d0eb      	beq.n	4014 <xQueueReceive+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    403c:	2f00      	cmp	r7, #0
    403e:	d0ed      	beq.n	401c <xQueueReceive+0xa8>
		taskEXIT_CRITICAL();
    4040:	4b25      	ldr	r3, [pc, #148]	; (40d8 <xQueueReceive+0x164>)
    4042:	4798      	blx	r3
		vTaskSuspendAll();
    4044:	4b27      	ldr	r3, [pc, #156]	; (40e4 <xQueueReceive+0x170>)
    4046:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4048:	47c0      	blx	r8
    404a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    404e:	b25b      	sxtb	r3, r3
    4050:	f1b3 3fff 	cmp.w	r3, #4294967295
    4054:	bf04      	itt	eq
    4056:	2300      	moveq	r3, #0
    4058:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    405c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4060:	b25b      	sxtb	r3, r3
    4062:	f1b3 3fff 	cmp.w	r3, #4294967295
    4066:	bf04      	itt	eq
    4068:	2300      	moveq	r3, #0
    406a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    406e:	4b1a      	ldr	r3, [pc, #104]	; (40d8 <xQueueReceive+0x164>)
    4070:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4072:	a901      	add	r1, sp, #4
    4074:	a802      	add	r0, sp, #8
    4076:	4b1c      	ldr	r3, [pc, #112]	; (40e8 <xQueueReceive+0x174>)
    4078:	4798      	blx	r3
    407a:	b9c8      	cbnz	r0, 40b0 <xQueueReceive+0x13c>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    407c:	4620      	mov	r0, r4
    407e:	4b1b      	ldr	r3, [pc, #108]	; (40ec <xQueueReceive+0x178>)
    4080:	4798      	blx	r3
    4082:	2800      	cmp	r0, #0
    4084:	d0cd      	beq.n	4022 <xQueueReceive+0xae>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    4086:	9901      	ldr	r1, [sp, #4]
    4088:	f104 0024 	add.w	r0, r4, #36	; 0x24
    408c:	4b18      	ldr	r3, [pc, #96]	; (40f0 <xQueueReceive+0x17c>)
    408e:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4090:	4620      	mov	r0, r4
    4092:	4b12      	ldr	r3, [pc, #72]	; (40dc <xQueueReceive+0x168>)
    4094:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    4096:	4b12      	ldr	r3, [pc, #72]	; (40e0 <xQueueReceive+0x16c>)
    4098:	4798      	blx	r3
    409a:	2800      	cmp	r0, #0
    409c:	d1c6      	bne.n	402c <xQueueReceive+0xb8>
					portYIELD_WITHIN_API();
    409e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    40a2:	f8c9 3000 	str.w	r3, [r9]
    40a6:	f3bf 8f4f 	dsb	sy
    40aa:	f3bf 8f6f 	isb	sy
    40ae:	e7bd      	b.n	402c <xQueueReceive+0xb8>
			prvUnlockQueue(pxQueue);
    40b0:	4620      	mov	r0, r4
    40b2:	4b0a      	ldr	r3, [pc, #40]	; (40dc <xQueueReceive+0x168>)
    40b4:	4798      	blx	r3
			(void)xTaskResumeAll();
    40b6:	4b0a      	ldr	r3, [pc, #40]	; (40e0 <xQueueReceive+0x16c>)
    40b8:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    40ba:	4620      	mov	r0, r4
    40bc:	4b0b      	ldr	r3, [pc, #44]	; (40ec <xQueueReceive+0x178>)
    40be:	4798      	blx	r3
    40c0:	2800      	cmp	r0, #0
    40c2:	d0b3      	beq.n	402c <xQueueReceive+0xb8>
				return errQUEUE_EMPTY;
    40c4:	2000      	movs	r0, #0
    40c6:	e7a2      	b.n	400e <xQueueReceive+0x9a>
    40c8:	00004c75 	.word	0x00004c75
    40cc:	00003ad9 	.word	0x00003ad9
    40d0:	00004b35 	.word	0x00004b35
    40d4:	e000ed04 	.word	0xe000ed04
    40d8:	000036c9 	.word	0x000036c9
    40dc:	00003b01 	.word	0x00003b01
    40e0:	000047e9 	.word	0x000047e9
    40e4:	000046a1 	.word	0x000046a1
    40e8:	00004bd9 	.word	0x00004bd9
    40ec:	000039b5 	.word	0x000039b5
    40f0:	00004ab5 	.word	0x00004ab5
    40f4:	00003685 	.word	0x00003685
    40f8:	00004bc5 	.word	0x00004bc5

000040fc <xQueueSemaphoreTake>:
{
    40fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4100:	b085      	sub	sp, #20
    4102:	9101      	str	r1, [sp, #4]
	configASSERT((pxQueue));
    4104:	b158      	cbz	r0, 411e <xQueueSemaphoreTake+0x22>
    4106:	4604      	mov	r4, r0
	configASSERT(pxQueue->uxItemSize == 0);
    4108:	6c03      	ldr	r3, [r0, #64]	; 0x40
    410a:	b18b      	cbz	r3, 4130 <xQueueSemaphoreTake+0x34>
    410c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4110:	f383 8811 	msr	BASEPRI, r3
    4114:	f3bf 8f6f 	isb	sy
    4118:	f3bf 8f4f 	dsb	sy
    411c:	e7fe      	b.n	411c <xQueueSemaphoreTake+0x20>
    411e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4122:	f383 8811 	msr	BASEPRI, r3
    4126:	f3bf 8f6f 	isb	sy
    412a:	f3bf 8f4f 	dsb	sy
    412e:	e7fe      	b.n	412e <xQueueSemaphoreTake+0x32>
		configASSERT(!((xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) && (xTicksToWait != 0)));
    4130:	4b5b      	ldr	r3, [pc, #364]	; (42a0 <xQueueSemaphoreTake+0x1a4>)
    4132:	4798      	blx	r3
    4134:	b950      	cbnz	r0, 414c <xQueueSemaphoreTake+0x50>
    4136:	9b01      	ldr	r3, [sp, #4]
    4138:	b183      	cbz	r3, 415c <xQueueSemaphoreTake+0x60>
    413a:	f04f 0380 	mov.w	r3, #128	; 0x80
    413e:	f383 8811 	msr	BASEPRI, r3
    4142:	f3bf 8f6f 	isb	sy
    4146:	f3bf 8f4f 	dsb	sy
    414a:	e7fe      	b.n	414a <xQueueSemaphoreTake+0x4e>
    414c:	2500      	movs	r5, #0
    414e:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
    4150:	4e54      	ldr	r6, [pc, #336]	; (42a4 <xQueueSemaphoreTake+0x1a8>)
					vTaskInternalSetTimeOutState(&xTimeOut);
    4152:	f8df 9184 	ldr.w	r9, [pc, #388]	; 42d8 <xQueueSemaphoreTake+0x1dc>
					portYIELD_WITHIN_API();
    4156:	f8df 8158 	ldr.w	r8, [pc, #344]	; 42b0 <xQueueSemaphoreTake+0x1b4>
    415a:	e048      	b.n	41ee <xQueueSemaphoreTake+0xf2>
    415c:	2500      	movs	r5, #0
    415e:	462f      	mov	r7, r5
    4160:	e7f6      	b.n	4150 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - (UBaseType_t)1;
    4162:	3b01      	subs	r3, #1
    4164:	63a3      	str	r3, [r4, #56]	; 0x38
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4166:	6823      	ldr	r3, [r4, #0]
    4168:	b913      	cbnz	r3, 4170 <xQueueSemaphoreTake+0x74>
						    = (int8_t *)pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as
    416a:	4b4f      	ldr	r3, [pc, #316]	; (42a8 <xQueueSemaphoreTake+0x1ac>)
    416c:	4798      	blx	r3
    416e:	6060      	str	r0, [r4, #4]
				if (listLIST_IS_EMPTY(&(pxQueue->xTasksWaitingToSend)) == pdFALSE) {
    4170:	6923      	ldr	r3, [r4, #16]
    4172:	b163      	cbz	r3, 418e <xQueueSemaphoreTake+0x92>
					if (xTaskRemoveFromEventList(&(pxQueue->xTasksWaitingToSend)) != pdFALSE) {
    4174:	f104 0010 	add.w	r0, r4, #16
    4178:	4b4c      	ldr	r3, [pc, #304]	; (42ac <xQueueSemaphoreTake+0x1b0>)
    417a:	4798      	blx	r3
    417c:	b138      	cbz	r0, 418e <xQueueSemaphoreTake+0x92>
						queueYIELD_IF_USING_PREEMPTION();
    417e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4182:	4b4b      	ldr	r3, [pc, #300]	; (42b0 <xQueueSemaphoreTake+0x1b4>)
    4184:	601a      	str	r2, [r3, #0]
    4186:	f3bf 8f4f 	dsb	sy
    418a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
    418e:	4b49      	ldr	r3, [pc, #292]	; (42b4 <xQueueSemaphoreTake+0x1b8>)
    4190:	4798      	blx	r3
				return pdPASS;
    4192:	2501      	movs	r5, #1
}
    4194:	4628      	mov	r0, r5
    4196:	b005      	add	sp, #20
    4198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT(xInheritanceOccurred == pdFALSE);
    419c:	b145      	cbz	r5, 41b0 <xQueueSemaphoreTake+0xb4>
    419e:	f04f 0380 	mov.w	r3, #128	; 0x80
    41a2:	f383 8811 	msr	BASEPRI, r3
    41a6:	f3bf 8f6f 	isb	sy
    41aa:	f3bf 8f4f 	dsb	sy
    41ae:	e7fe      	b.n	41ae <xQueueSemaphoreTake+0xb2>
					taskEXIT_CRITICAL();
    41b0:	4b40      	ldr	r3, [pc, #256]	; (42b4 <xQueueSemaphoreTake+0x1b8>)
    41b2:	4798      	blx	r3
					return errQUEUE_EMPTY;
    41b4:	e7ee      	b.n	4194 <xQueueSemaphoreTake+0x98>
					vTaskInternalSetTimeOutState(&xTimeOut);
    41b6:	a802      	add	r0, sp, #8
    41b8:	47c8      	blx	r9
    41ba:	e021      	b.n	4200 <xQueueSemaphoreTake+0x104>
						taskENTER_CRITICAL();
    41bc:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit((void *)pxQueue->pxMutexHolder);
    41be:	6860      	ldr	r0, [r4, #4]
    41c0:	4b3d      	ldr	r3, [pc, #244]	; (42b8 <xQueueSemaphoreTake+0x1bc>)
    41c2:	4798      	blx	r3
    41c4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
    41c6:	4b3b      	ldr	r3, [pc, #236]	; (42b4 <xQueueSemaphoreTake+0x1b8>)
    41c8:	4798      	blx	r3
    41ca:	e040      	b.n	424e <xQueueSemaphoreTake+0x152>
				prvUnlockQueue(pxQueue);
    41cc:	4620      	mov	r0, r4
    41ce:	4b3b      	ldr	r3, [pc, #236]	; (42bc <xQueueSemaphoreTake+0x1c0>)
    41d0:	4798      	blx	r3
				(void)xTaskResumeAll();
    41d2:	4b3b      	ldr	r3, [pc, #236]	; (42c0 <xQueueSemaphoreTake+0x1c4>)
    41d4:	4798      	blx	r3
    41d6:	e009      	b.n	41ec <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue(pxQueue);
    41d8:	4620      	mov	r0, r4
    41da:	4b38      	ldr	r3, [pc, #224]	; (42bc <xQueueSemaphoreTake+0x1c0>)
    41dc:	4798      	blx	r3
			(void)xTaskResumeAll();
    41de:	4b38      	ldr	r3, [pc, #224]	; (42c0 <xQueueSemaphoreTake+0x1c4>)
    41e0:	4798      	blx	r3
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    41e2:	4620      	mov	r0, r4
    41e4:	4b37      	ldr	r3, [pc, #220]	; (42c4 <xQueueSemaphoreTake+0x1c8>)
    41e6:	4798      	blx	r3
    41e8:	2800      	cmp	r0, #0
    41ea:	d145      	bne.n	4278 <xQueueSemaphoreTake+0x17c>
    41ec:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
    41ee:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    41f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if (uxSemaphoreCount > (UBaseType_t)0) {
    41f2:	2b00      	cmp	r3, #0
    41f4:	d1b5      	bne.n	4162 <xQueueSemaphoreTake+0x66>
				if (xTicksToWait == (TickType_t)0) {
    41f6:	9b01      	ldr	r3, [sp, #4]
    41f8:	2b00      	cmp	r3, #0
    41fa:	d0cf      	beq.n	419c <xQueueSemaphoreTake+0xa0>
				} else if (xEntryTimeSet == pdFALSE) {
    41fc:	2f00      	cmp	r7, #0
    41fe:	d0da      	beq.n	41b6 <xQueueSemaphoreTake+0xba>
		taskEXIT_CRITICAL();
    4200:	4b2c      	ldr	r3, [pc, #176]	; (42b4 <xQueueSemaphoreTake+0x1b8>)
    4202:	4798      	blx	r3
		vTaskSuspendAll();
    4204:	4b30      	ldr	r3, [pc, #192]	; (42c8 <xQueueSemaphoreTake+0x1cc>)
    4206:	4798      	blx	r3
		prvLockQueue(pxQueue);
    4208:	47b0      	blx	r6
    420a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    420e:	b25b      	sxtb	r3, r3
    4210:	f1b3 3fff 	cmp.w	r3, #4294967295
    4214:	bf04      	itt	eq
    4216:	2300      	moveq	r3, #0
    4218:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    421c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    4220:	b25b      	sxtb	r3, r3
    4222:	f1b3 3fff 	cmp.w	r3, #4294967295
    4226:	bf04      	itt	eq
    4228:	2300      	moveq	r3, #0
    422a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    422e:	4b21      	ldr	r3, [pc, #132]	; (42b4 <xQueueSemaphoreTake+0x1b8>)
    4230:	4798      	blx	r3
		if (xTaskCheckForTimeOut(&xTimeOut, &xTicksToWait) == pdFALSE) {
    4232:	a901      	add	r1, sp, #4
    4234:	a802      	add	r0, sp, #8
    4236:	4b25      	ldr	r3, [pc, #148]	; (42cc <xQueueSemaphoreTake+0x1d0>)
    4238:	4798      	blx	r3
    423a:	2800      	cmp	r0, #0
    423c:	d1cc      	bne.n	41d8 <xQueueSemaphoreTake+0xdc>
			if (prvIsQueueEmpty(pxQueue) != pdFALSE) {
    423e:	4620      	mov	r0, r4
    4240:	4b20      	ldr	r3, [pc, #128]	; (42c4 <xQueueSemaphoreTake+0x1c8>)
    4242:	4798      	blx	r3
    4244:	2800      	cmp	r0, #0
    4246:	d0c1      	beq.n	41cc <xQueueSemaphoreTake+0xd0>
					if (pxQueue->uxQueueType == queueQUEUE_IS_MUTEX) {
    4248:	6823      	ldr	r3, [r4, #0]
    424a:	2b00      	cmp	r3, #0
    424c:	d0b6      	beq.n	41bc <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList(&(pxQueue->xTasksWaitingToReceive), xTicksToWait);
    424e:	9901      	ldr	r1, [sp, #4]
    4250:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4254:	4b1e      	ldr	r3, [pc, #120]	; (42d0 <xQueueSemaphoreTake+0x1d4>)
    4256:	4798      	blx	r3
				prvUnlockQueue(pxQueue);
    4258:	4620      	mov	r0, r4
    425a:	4b18      	ldr	r3, [pc, #96]	; (42bc <xQueueSemaphoreTake+0x1c0>)
    425c:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    425e:	4b18      	ldr	r3, [pc, #96]	; (42c0 <xQueueSemaphoreTake+0x1c4>)
    4260:	4798      	blx	r3
    4262:	2800      	cmp	r0, #0
    4264:	d1c2      	bne.n	41ec <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
    4266:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    426a:	f8c8 3000 	str.w	r3, [r8]
    426e:	f3bf 8f4f 	dsb	sy
    4272:	f3bf 8f6f 	isb	sy
    4276:	e7b9      	b.n	41ec <xQueueSemaphoreTake+0xf0>
					if (xInheritanceOccurred != pdFALSE) {
    4278:	2d00      	cmp	r5, #0
    427a:	d08b      	beq.n	4194 <xQueueSemaphoreTake+0x98>
						taskENTER_CRITICAL();
    427c:	4b09      	ldr	r3, [pc, #36]	; (42a4 <xQueueSemaphoreTake+0x1a8>)
    427e:	4798      	blx	r3
	if (listCURRENT_LIST_LENGTH(&(pxQueue->xTasksWaitingToReceive)) > 0) {
    4280:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4282:	b153      	cbz	r3, 429a <xQueueSemaphoreTake+0x19e>
		    = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY(&(pxQueue->xTasksWaitingToReceive));
    4284:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4286:	6819      	ldr	r1, [r3, #0]
    4288:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout((void *)pxQueue->pxMutexHolder,
    428c:	6860      	ldr	r0, [r4, #4]
    428e:	4b11      	ldr	r3, [pc, #68]	; (42d4 <xQueueSemaphoreTake+0x1d8>)
    4290:	4798      	blx	r3
						taskEXIT_CRITICAL();
    4292:	4b08      	ldr	r3, [pc, #32]	; (42b4 <xQueueSemaphoreTake+0x1b8>)
    4294:	4798      	blx	r3
				return errQUEUE_EMPTY;
    4296:	2500      	movs	r5, #0
    4298:	e77c      	b.n	4194 <xQueueSemaphoreTake+0x98>
		uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
    429a:	2100      	movs	r1, #0
    429c:	e7f6      	b.n	428c <xQueueSemaphoreTake+0x190>
    429e:	bf00      	nop
    42a0:	00004c75 	.word	0x00004c75
    42a4:	00003685 	.word	0x00003685
    42a8:	00004e81 	.word	0x00004e81
    42ac:	00004b35 	.word	0x00004b35
    42b0:	e000ed04 	.word	0xe000ed04
    42b4:	000036c9 	.word	0x000036c9
    42b8:	00004c95 	.word	0x00004c95
    42bc:	00003b01 	.word	0x00003b01
    42c0:	000047e9 	.word	0x000047e9
    42c4:	000039b5 	.word	0x000039b5
    42c8:	000046a1 	.word	0x000046a1
    42cc:	00004bd9 	.word	0x00004bd9
    42d0:	00004ab5 	.word	0x00004ab5
    42d4:	00004dd5 	.word	0x00004dd5
    42d8:	00004bc5 	.word	0x00004bc5

000042dc <uxQueueMessagesWaiting>:
	configASSERT(xQueue);
    42dc:	b940      	cbnz	r0, 42f0 <uxQueueMessagesWaiting+0x14>
    42de:	f04f 0380 	mov.w	r3, #128	; 0x80
    42e2:	f383 8811 	msr	BASEPRI, r3
    42e6:	f3bf 8f6f 	isb	sy
    42ea:	f3bf 8f4f 	dsb	sy
    42ee:	e7fe      	b.n	42ee <uxQueueMessagesWaiting+0x12>
{
    42f0:	b510      	push	{r4, lr}
    42f2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
    42f4:	4b03      	ldr	r3, [pc, #12]	; (4304 <uxQueueMessagesWaiting+0x28>)
    42f6:	4798      	blx	r3
		uxReturn = ((Queue_t *)xQueue)->uxMessagesWaiting;
    42f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
    42fa:	4b03      	ldr	r3, [pc, #12]	; (4308 <uxQueueMessagesWaiting+0x2c>)
    42fc:	4798      	blx	r3
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    42fe:	4620      	mov	r0, r4
    4300:	bd10      	pop	{r4, pc}
    4302:	bf00      	nop
    4304:	00003685 	.word	0x00003685
    4308:	000036c9 	.word	0x000036c9

0000430c <vQueueWaitForMessageRestricted>:
{
    430c:	b570      	push	{r4, r5, r6, lr}
    430e:	4604      	mov	r4, r0
    4310:	460d      	mov	r5, r1
    4312:	4616      	mov	r6, r2
	prvLockQueue(pxQueue);
    4314:	4b11      	ldr	r3, [pc, #68]	; (435c <vQueueWaitForMessageRestricted+0x50>)
    4316:	4798      	blx	r3
    4318:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    431c:	b25b      	sxtb	r3, r3
    431e:	f1b3 3fff 	cmp.w	r3, #4294967295
    4322:	bf04      	itt	eq
    4324:	2300      	moveq	r3, #0
    4326:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
    432a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
    432e:	b25b      	sxtb	r3, r3
    4330:	f1b3 3fff 	cmp.w	r3, #4294967295
    4334:	bf04      	itt	eq
    4336:	2300      	moveq	r3, #0
    4338:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
    433c:	4b08      	ldr	r3, [pc, #32]	; (4360 <vQueueWaitForMessageRestricted+0x54>)
    433e:	4798      	blx	r3
	if (pxQueue->uxMessagesWaiting == (UBaseType_t)0U) {
    4340:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4342:	b11b      	cbz	r3, 434c <vQueueWaitForMessageRestricted+0x40>
	prvUnlockQueue(pxQueue);
    4344:	4620      	mov	r0, r4
    4346:	4b07      	ldr	r3, [pc, #28]	; (4364 <vQueueWaitForMessageRestricted+0x58>)
    4348:	4798      	blx	r3
    434a:	bd70      	pop	{r4, r5, r6, pc}
		vTaskPlaceOnEventListRestricted(&(pxQueue->xTasksWaitingToReceive), xTicksToWait, xWaitIndefinitely);
    434c:	4632      	mov	r2, r6
    434e:	4629      	mov	r1, r5
    4350:	f104 0024 	add.w	r0, r4, #36	; 0x24
    4354:	4b04      	ldr	r3, [pc, #16]	; (4368 <vQueueWaitForMessageRestricted+0x5c>)
    4356:	4798      	blx	r3
    4358:	e7f4      	b.n	4344 <vQueueWaitForMessageRestricted+0x38>
    435a:	bf00      	nop
    435c:	00003685 	.word	0x00003685
    4360:	000036c9 	.word	0x000036c9
    4364:	00003b01 	.word	0x00003b01
    4368:	00004af1 	.word	0x00004af1

0000436c <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    436c:	4a06      	ldr	r2, [pc, #24]	; (4388 <prvIdleTask+0x1c>)
				taskYIELD();
    436e:	4807      	ldr	r0, [pc, #28]	; (438c <prvIdleTask+0x20>)
    4370:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1) {
    4374:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4376:	2b01      	cmp	r3, #1
    4378:	d9fc      	bls.n	4374 <prvIdleTask+0x8>
				taskYIELD();
    437a:	6001      	str	r1, [r0, #0]
    437c:	f3bf 8f4f 	dsb	sy
    4380:	f3bf 8f6f 	isb	sy
    4384:	e7f6      	b.n	4374 <prvIdleTask+0x8>
    4386:	bf00      	nop
    4388:	20002960 	.word	0x20002960
    438c:	e000ed04 	.word	0xe000ed04

00004390 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    4390:	4b09      	ldr	r3, [pc, #36]	; (43b8 <prvResetNextTaskUnblockTime+0x28>)
    4392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    4396:	681b      	ldr	r3, [r3, #0]
    4398:	b143      	cbz	r3, 43ac <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    439a:	4b07      	ldr	r3, [pc, #28]	; (43b8 <prvResetNextTaskUnblockTime+0x28>)
    439c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    43a0:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    43a2:	68d2      	ldr	r2, [r2, #12]
    43a4:	6852      	ldr	r2, [r2, #4]
    43a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    43aa:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    43ac:	f04f 32ff 	mov.w	r2, #4294967295
    43b0:	4b01      	ldr	r3, [pc, #4]	; (43b8 <prvResetNextTaskUnblockTime+0x28>)
    43b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    43b6:	4770      	bx	lr
    43b8:	20002960 	.word	0x20002960

000043bc <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
    43bc:	b570      	push	{r4, r5, r6, lr}
    43be:	4604      	mov	r4, r0
    43c0:	460e      	mov	r6, r1
	TickType_t       xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
    43c2:	4b1a      	ldr	r3, [pc, #104]	; (442c <prvAddCurrentTaskToDelayedList+0x70>)
    43c4:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0) {
    43c8:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    43cc:	3004      	adds	r0, #4
    43ce:	4b18      	ldr	r3, [pc, #96]	; (4430 <prvAddCurrentTaskToDelayedList+0x74>)
    43d0:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    43d2:	f1b4 3fff 	cmp.w	r4, #4294967295
    43d6:	d016      	beq.n	4406 <prvAddCurrentTaskToDelayedList+0x4a>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
		} else {
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    43d8:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
    43da:	4b14      	ldr	r3, [pc, #80]	; (442c <prvAddCurrentTaskToDelayedList+0x70>)
    43dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    43e0:	605c      	str	r4, [r3, #4]

			if (xTimeToWake < xConstTickCount) {
    43e2:	42a5      	cmp	r5, r4
    43e4:	d818      	bhi.n	4418 <prvAddCurrentTaskToDelayedList+0x5c>
				list. */
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
			} else {
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    43e6:	4d11      	ldr	r5, [pc, #68]	; (442c <prvAddCurrentTaskToDelayedList+0x70>)
    43e8:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    43ec:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    43f0:	3104      	adds	r1, #4
    43f2:	4b10      	ldr	r3, [pc, #64]	; (4434 <prvAddCurrentTaskToDelayedList+0x78>)
    43f4:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if (xTimeToWake < xNextTaskUnblockTime) {
    43f6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
    43fa:	429c      	cmp	r4, r3
					xNextTaskUnblockTime = xTimeToWake;
    43fc:	bf3c      	itt	cc
    43fe:	462b      	movcc	r3, r5
    4400:	f8c3 4090 	strcc.w	r4, [r3, #144]	; 0x90
    4404:	bd70      	pop	{r4, r5, r6, pc}
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE)) {
    4406:	2e00      	cmp	r6, #0
    4408:	d0e6      	beq.n	43d8 <prvAddCurrentTaskToDelayedList+0x1c>
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
    440a:	4808      	ldr	r0, [pc, #32]	; (442c <prvAddCurrentTaskToDelayedList+0x70>)
    440c:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    4410:	3104      	adds	r1, #4
    4412:	4b09      	ldr	r3, [pc, #36]	; (4438 <prvAddCurrentTaskToDelayedList+0x7c>)
    4414:	4798      	blx	r3
    4416:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
    4418:	4b04      	ldr	r3, [pc, #16]	; (442c <prvAddCurrentTaskToDelayedList+0x70>)
    441a:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
    441e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4422:	3104      	adds	r1, #4
    4424:	4b03      	ldr	r3, [pc, #12]	; (4434 <prvAddCurrentTaskToDelayedList+0x78>)
    4426:	4798      	blx	r3
    4428:	bd70      	pop	{r4, r5, r6, pc}
    442a:	bf00      	nop
    442c:	20002960 	.word	0x20002960
    4430:	0000358d 	.word	0x0000358d
    4434:	00003559 	.word	0x00003559
    4438:	00003541 	.word	0x00003541

0000443c <xTaskCreate>:
{
    443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4440:	b083      	sub	sp, #12
    4442:	4683      	mov	fp, r0
    4444:	460d      	mov	r5, r1
    4446:	9301      	str	r3, [sp, #4]
    4448:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
		pxStack = (StackType_t *)pvPortMalloc(
    444c:	0096      	lsls	r6, r2, #2
    444e:	4630      	mov	r0, r6
    4450:	4b66      	ldr	r3, [pc, #408]	; (45ec <xTaskCreate+0x1b0>)
    4452:	4798      	blx	r3
		if (pxStack != NULL) {
    4454:	2800      	cmp	r0, #0
    4456:	f000 8096 	beq.w	4586 <xTaskCreate+0x14a>
    445a:	4607      	mov	r7, r0
			pxNewTCB = (TCB_t *)pvPortMalloc(
    445c:	2054      	movs	r0, #84	; 0x54
    445e:	4b63      	ldr	r3, [pc, #396]	; (45ec <xTaskCreate+0x1b0>)
    4460:	4798      	blx	r3
			if (pxNewTCB != NULL) {
    4462:	4604      	mov	r4, r0
    4464:	2800      	cmp	r0, #0
    4466:	f000 808b 	beq.w	4580 <xTaskCreate+0x144>
				pxNewTCB->pxStack = pxStack;
    446a:	6307      	str	r7, [r0, #48]	; 0x30
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
    446c:	4632      	mov	r2, r6
    446e:	21a5      	movs	r1, #165	; 0xa5
    4470:	4638      	mov	r0, r7
    4472:	4b5f      	ldr	r3, [pc, #380]	; (45f0 <xTaskCreate+0x1b4>)
    4474:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
    4476:	3e04      	subs	r6, #4
    4478:	6b23      	ldr	r3, [r4, #48]	; 0x30
    447a:	441e      	add	r6, r3
		                      & (~(
    447c:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    4480:	782b      	ldrb	r3, [r5, #0]
    4482:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if (pcName[x] == 0x00) {
    4486:	782b      	ldrb	r3, [r5, #0]
    4488:	b15b      	cbz	r3, 44a2 <xTaskCreate+0x66>
    448a:	462b      	mov	r3, r5
    448c:	f104 0235 	add.w	r2, r4, #53	; 0x35
    4490:	1de9      	adds	r1, r5, #7
		pxNewTCB->pcTaskName[x] = pcName[x];
    4492:	7858      	ldrb	r0, [r3, #1]
    4494:	f802 0b01 	strb.w	r0, [r2], #1
		if (pcName[x] == 0x00) {
    4498:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    449c:	b108      	cbz	r0, 44a2 <xTaskCreate+0x66>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++) {
    449e:	4299      	cmp	r1, r3
    44a0:	d1f7      	bne.n	4492 <xTaskCreate+0x56>
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
    44a2:	2700      	movs	r7, #0
    44a4:	f884 703b 	strb.w	r7, [r4, #59]	; 0x3b
    44a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    44aa:	2d04      	cmp	r5, #4
    44ac:	bf28      	it	cs
    44ae:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
    44b0:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
    44b2:	6465      	str	r5, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld  = 0;
    44b4:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem(&(pxNewTCB->xStateListItem));
    44b6:	f104 0804 	add.w	r8, r4, #4
    44ba:	4640      	mov	r0, r8
    44bc:	f8df 9154 	ldr.w	r9, [pc, #340]	; 4614 <xTaskCreate+0x1d8>
    44c0:	47c8      	blx	r9
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
    44c2:	f104 0018 	add.w	r0, r4, #24
    44c6:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
    44c8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE(
    44ca:	f1c5 0505 	rsb	r5, r5, #5
    44ce:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
    44d0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
    44d2:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState   = taskNOT_WAITING_NOTIFICATION;
    44d4:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
    44d8:	9a01      	ldr	r2, [sp, #4]
    44da:	4659      	mov	r1, fp
    44dc:	4630      	mov	r0, r6
    44de:	4b45      	ldr	r3, [pc, #276]	; (45f4 <xTaskCreate+0x1b8>)
    44e0:	4798      	blx	r3
    44e2:	6020      	str	r0, [r4, #0]
	if ((void *)pxCreatedTask != NULL) {
    44e4:	f1ba 0f00 	cmp.w	sl, #0
    44e8:	d001      	beq.n	44ee <xTaskCreate+0xb2>
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
    44ea:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
    44ee:	4b42      	ldr	r3, [pc, #264]	; (45f8 <xTaskCreate+0x1bc>)
    44f0:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
    44f2:	4b42      	ldr	r3, [pc, #264]	; (45fc <xTaskCreate+0x1c0>)
    44f4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
    44f8:	3201      	adds	r2, #1
    44fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		if (pxCurrentTCB == NULL) {
    44fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4502:	2b00      	cmp	r3, #0
    4504:	d042      	beq.n	458c <xTaskCreate+0x150>
			if (xSchedulerRunning == pdFALSE) {
    4506:	4b3d      	ldr	r3, [pc, #244]	; (45fc <xTaskCreate+0x1c0>)
    4508:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    450c:	b94b      	cbnz	r3, 4522 <xTaskCreate+0xe6>
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority) {
    450e:	4b3b      	ldr	r3, [pc, #236]	; (45fc <xTaskCreate+0x1c0>)
    4510:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4516:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4518:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
    451a:	bf9c      	itt	ls
    451c:	4b37      	ldrls	r3, [pc, #220]	; (45fc <xTaskCreate+0x1c0>)
    451e:	f8c3 4098 	strls.w	r4, [r3, #152]	; 0x98
		uxTaskNumber++;
    4522:	4a36      	ldr	r2, [pc, #216]	; (45fc <xTaskCreate+0x1c0>)
    4524:	f8d2 30d0 	ldr.w	r3, [r2, #208]	; 0xd0
    4528:	3301      	adds	r3, #1
    452a:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
			pxNewTCB->uxTCBNumber = uxTaskNumber;
    452e:	63e3      	str	r3, [r4, #60]	; 0x3c
		prvAddTaskToReadyList(pxNewTCB);
    4530:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4532:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
    4536:	4293      	cmp	r3, r2
    4538:	bf84      	itt	hi
    453a:	4a30      	ldrhi	r2, [pc, #192]	; (45fc <xTaskCreate+0x1c0>)
    453c:	f8c2 30d4 	strhi.w	r3, [r2, #212]	; 0xd4
    4540:	4d2e      	ldr	r5, [pc, #184]	; (45fc <xTaskCreate+0x1c0>)
    4542:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4546:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    454a:	4641      	mov	r1, r8
    454c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    4550:	4b2b      	ldr	r3, [pc, #172]	; (4600 <xTaskCreate+0x1c4>)
    4552:	4798      	blx	r3
	taskEXIT_CRITICAL();
    4554:	4b2b      	ldr	r3, [pc, #172]	; (4604 <xTaskCreate+0x1c8>)
    4556:	4798      	blx	r3
	if (xSchedulerRunning != pdFALSE) {
    4558:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
    455c:	2b00      	cmp	r3, #0
    455e:	d03f      	beq.n	45e0 <xTaskCreate+0x1a4>
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority) {
    4560:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    4566:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4568:	429a      	cmp	r2, r3
    456a:	d23d      	bcs.n	45e8 <xTaskCreate+0x1ac>
			taskYIELD_IF_USING_PREEMPTION();
    456c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4570:	4b25      	ldr	r3, [pc, #148]	; (4608 <xTaskCreate+0x1cc>)
    4572:	601a      	str	r2, [r3, #0]
    4574:	f3bf 8f4f 	dsb	sy
    4578:	f3bf 8f6f 	isb	sy
		xReturn = pdPASS;
    457c:	2001      	movs	r0, #1
    457e:	e030      	b.n	45e2 <xTaskCreate+0x1a6>
				vPortFree(pxStack);
    4580:	4638      	mov	r0, r7
    4582:	4b22      	ldr	r3, [pc, #136]	; (460c <xTaskCreate+0x1d0>)
    4584:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    4586:	f04f 30ff 	mov.w	r0, #4294967295
    458a:	e02a      	b.n	45e2 <xTaskCreate+0x1a6>
			pxCurrentTCB = pxNewTCB;
    458c:	4b1b      	ldr	r3, [pc, #108]	; (45fc <xTaskCreate+0x1c0>)
    458e:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
			if (uxCurrentNumberOfTasks == (UBaseType_t)1) {
    4592:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4596:	2b01      	cmp	r3, #1
    4598:	d1c3      	bne.n	4522 <xTaskCreate+0xe6>
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
    459a:	4d18      	ldr	r5, [pc, #96]	; (45fc <xTaskCreate+0x1c0>)
    459c:	f105 0028 	add.w	r0, r5, #40	; 0x28
    45a0:	4e1b      	ldr	r6, [pc, #108]	; (4610 <xTaskCreate+0x1d4>)
    45a2:	47b0      	blx	r6
    45a4:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    45a8:	47b0      	blx	r6
    45aa:	f105 0050 	add.w	r0, r5, #80	; 0x50
    45ae:	47b0      	blx	r6
    45b0:	f105 0064 	add.w	r0, r5, #100	; 0x64
    45b4:	47b0      	blx	r6
    45b6:	f105 0078 	add.w	r0, r5, #120	; 0x78
    45ba:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList1);
    45bc:	f105 09a4 	add.w	r9, r5, #164	; 0xa4
    45c0:	4648      	mov	r0, r9
    45c2:	47b0      	blx	r6
	vListInitialise(&xDelayedTaskList2);
    45c4:	f105 07b8 	add.w	r7, r5, #184	; 0xb8
    45c8:	4638      	mov	r0, r7
    45ca:	47b0      	blx	r6
	vListInitialise(&xPendingReadyList);
    45cc:	f105 0014 	add.w	r0, r5, #20
    45d0:	47b0      	blx	r6
		vListInitialise(&xSuspendedTaskList);
    45d2:	4628      	mov	r0, r5
    45d4:	47b0      	blx	r6
	pxDelayedTaskList         = &xDelayedTaskList1;
    45d6:	f8c5 908c 	str.w	r9, [r5, #140]	; 0x8c
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    45da:	f8c5 709c 	str.w	r7, [r5, #156]	; 0x9c
    45de:	e7a0      	b.n	4522 <xTaskCreate+0xe6>
		xReturn = pdPASS;
    45e0:	2001      	movs	r0, #1
}
    45e2:	b003      	add	sp, #12
    45e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xReturn = pdPASS;
    45e8:	2001      	movs	r0, #1
	return xReturn;
    45ea:	e7fa      	b.n	45e2 <xTaskCreate+0x1a6>
    45ec:	00003935 	.word	0x00003935
    45f0:	000054f1 	.word	0x000054f1
    45f4:	00003631 	.word	0x00003631
    45f8:	00003685 	.word	0x00003685
    45fc:	20002960 	.word	0x20002960
    4600:	00003541 	.word	0x00003541
    4604:	000036c9 	.word	0x000036c9
    4608:	e000ed04 	.word	0xe000ed04
    460c:	0000399d 	.word	0x0000399d
    4610:	00003525 	.word	0x00003525
    4614:	0000353b 	.word	0x0000353b

00004618 <vTaskStartScheduler>:
{
    4618:	b510      	push	{r4, lr}
    461a:	b082      	sub	sp, #8
		xReturn = xTaskCreate(prvIdleTask,
    461c:	4b19      	ldr	r3, [pc, #100]	; (4684 <vTaskStartScheduler+0x6c>)
    461e:	9301      	str	r3, [sp, #4]
    4620:	2300      	movs	r3, #0
    4622:	9300      	str	r3, [sp, #0]
    4624:	2280      	movs	r2, #128	; 0x80
    4626:	4918      	ldr	r1, [pc, #96]	; (4688 <vTaskStartScheduler+0x70>)
    4628:	4818      	ldr	r0, [pc, #96]	; (468c <vTaskStartScheduler+0x74>)
    462a:	4c19      	ldr	r4, [pc, #100]	; (4690 <vTaskStartScheduler+0x78>)
    462c:	47a0      	blx	r4
		if (xReturn == pdPASS) {
    462e:	2801      	cmp	r0, #1
    4630:	d004      	beq.n	463c <vTaskStartScheduler+0x24>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
    4632:	f1b0 3fff 	cmp.w	r0, #4294967295
    4636:	d01b      	beq.n	4670 <vTaskStartScheduler+0x58>
}
    4638:	b002      	add	sp, #8
    463a:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
    463c:	4b15      	ldr	r3, [pc, #84]	; (4694 <vTaskStartScheduler+0x7c>)
    463e:	4798      	blx	r3
	if (xReturn == pdPASS) {
    4640:	2801      	cmp	r0, #1
    4642:	d1f6      	bne.n	4632 <vTaskStartScheduler+0x1a>
    4644:	f04f 0380 	mov.w	r3, #128	; 0x80
    4648:	f383 8811 	msr	BASEPRI, r3
    464c:	f3bf 8f6f 	isb	sy
    4650:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
    4654:	4b10      	ldr	r3, [pc, #64]	; (4698 <vTaskStartScheduler+0x80>)
    4656:	f04f 32ff 	mov.w	r2, #4294967295
    465a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		xSchedulerRunning    = pdTRUE;
    465e:	2201      	movs	r2, #1
    4660:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		xTickCount           = (TickType_t)0U;
    4664:	2200      	movs	r2, #0
    4666:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		if (xPortStartScheduler() != pdFALSE) {
    466a:	4b0c      	ldr	r3, [pc, #48]	; (469c <vTaskStartScheduler+0x84>)
    466c:	4798      	blx	r3
    466e:	e7e3      	b.n	4638 <vTaskStartScheduler+0x20>
    4670:	f04f 0380 	mov.w	r3, #128	; 0x80
    4674:	f383 8811 	msr	BASEPRI, r3
    4678:	f3bf 8f6f 	isb	sy
    467c:	f3bf 8f4f 	dsb	sy
    4680:	e7fe      	b.n	4680 <vTaskStartScheduler+0x68>
    4682:	bf00      	nop
    4684:	20002a3c 	.word	0x20002a3c
    4688:	000070c8 	.word	0x000070c8
    468c:	0000436d 	.word	0x0000436d
    4690:	0000443d 	.word	0x0000443d
    4694:	0000510d 	.word	0x0000510d
    4698:	20002960 	.word	0x20002960
    469c:	000037b9 	.word	0x000037b9

000046a0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
    46a0:	4a03      	ldr	r2, [pc, #12]	; (46b0 <vTaskSuspendAll+0x10>)
    46a2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
    46a6:	3301      	adds	r3, #1
    46a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    46ac:	4770      	bx	lr
    46ae:	bf00      	nop
    46b0:	20002960 	.word	0x20002960

000046b4 <xTaskGetTickCount>:
		xTicks = xTickCount;
    46b4:	4b01      	ldr	r3, [pc, #4]	; (46bc <xTaskGetTickCount+0x8>)
    46b6:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
}
    46ba:	4770      	bx	lr
    46bc:	20002960 	.word	0x20002960

000046c0 <xTaskIncrementTick>:
{
    46c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    46c4:	4b44      	ldr	r3, [pc, #272]	; (47d8 <xTaskIncrementTick+0x118>)
    46c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    46ca:	2b00      	cmp	r3, #0
    46cc:	d173      	bne.n	47b6 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    46ce:	4b42      	ldr	r3, [pc, #264]	; (47d8 <xTaskIncrementTick+0x118>)
    46d0:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    46d4:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    46d6:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    46da:	b9e6      	cbnz	r6, 4716 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    46dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    46e0:	681b      	ldr	r3, [r3, #0]
    46e2:	b143      	cbz	r3, 46f6 <xTaskIncrementTick+0x36>
    46e4:	f04f 0380 	mov.w	r3, #128	; 0x80
    46e8:	f383 8811 	msr	BASEPRI, r3
    46ec:	f3bf 8f6f 	isb	sy
    46f0:	f3bf 8f4f 	dsb	sy
    46f4:	e7fe      	b.n	46f4 <xTaskIncrementTick+0x34>
    46f6:	4b38      	ldr	r3, [pc, #224]	; (47d8 <xTaskIncrementTick+0x118>)
    46f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    46fc:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    4700:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    4704:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    4708:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    470c:	3201      	adds	r2, #1
    470e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    4712:	4b32      	ldr	r3, [pc, #200]	; (47dc <xTaskIncrementTick+0x11c>)
    4714:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    4716:	4b30      	ldr	r3, [pc, #192]	; (47d8 <xTaskIncrementTick+0x118>)
    4718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    471c:	429e      	cmp	r6, r3
    471e:	d20d      	bcs.n	473c <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    4720:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    4722:	4b2d      	ldr	r3, [pc, #180]	; (47d8 <xTaskIncrementTick+0x118>)
    4724:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4728:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    472a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    472e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    4734:	2b02      	cmp	r3, #2
    4736:	bf28      	it	cs
    4738:	2401      	movcs	r4, #1
    473a:	e043      	b.n	47c4 <xTaskIncrementTick+0x104>
    473c:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    473e:	4d26      	ldr	r5, [pc, #152]	; (47d8 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    4740:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 47e4 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    4744:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    4748:	e021      	b.n	478e <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    474a:	f04f 32ff 	mov.w	r2, #4294967295
    474e:	4b22      	ldr	r3, [pc, #136]	; (47d8 <xTaskIncrementTick+0x118>)
    4750:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    4754:	e7e5      	b.n	4722 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    4756:	4a20      	ldr	r2, [pc, #128]	; (47d8 <xTaskIncrementTick+0x118>)
    4758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    475c:	e7e1      	b.n	4722 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    475e:	f107 0018 	add.w	r0, r7, #24
    4762:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    4764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    4766:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    476a:	4298      	cmp	r0, r3
    476c:	bf88      	it	hi
    476e:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    4772:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4776:	4649      	mov	r1, r9
    4778:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    477c:	4b18      	ldr	r3, [pc, #96]	; (47e0 <xTaskIncrementTick+0x120>)
    477e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    4780:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    4784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    4788:	429a      	cmp	r2, r3
    478a:	bf28      	it	cs
    478c:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    478e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    4792:	681b      	ldr	r3, [r3, #0]
    4794:	2b00      	cmp	r3, #0
    4796:	d0d8      	beq.n	474a <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    4798:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    479c:	68db      	ldr	r3, [r3, #12]
    479e:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    47a0:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    47a2:	429e      	cmp	r6, r3
    47a4:	d3d7      	bcc.n	4756 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    47a6:	f107 0904 	add.w	r9, r7, #4
    47aa:	4648      	mov	r0, r9
    47ac:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    47ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    47b0:	2b00      	cmp	r3, #0
    47b2:	d1d4      	bne.n	475e <xTaskIncrementTick+0x9e>
    47b4:	e7d6      	b.n	4764 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    47b6:	4a08      	ldr	r2, [pc, #32]	; (47d8 <xTaskIncrementTick+0x118>)
    47b8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    47bc:	3301      	adds	r3, #1
    47be:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    47c2:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    47c4:	4b04      	ldr	r3, [pc, #16]	; (47d8 <xTaskIncrementTick+0x118>)
    47c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    47ca:	2b00      	cmp	r3, #0
}
    47cc:	bf0c      	ite	eq
    47ce:	4620      	moveq	r0, r4
    47d0:	2001      	movne	r0, #1
    47d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    47d6:	bf00      	nop
    47d8:	20002960 	.word	0x20002960
    47dc:	00004391 	.word	0x00004391
    47e0:	00003541 	.word	0x00003541
    47e4:	0000358d 	.word	0x0000358d

000047e8 <xTaskResumeAll>:
	configASSERT(uxSchedulerSuspended);
    47e8:	4b3a      	ldr	r3, [pc, #232]	; (48d4 <xTaskResumeAll+0xec>)
    47ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    47ee:	b943      	cbnz	r3, 4802 <xTaskResumeAll+0x1a>
    47f0:	f04f 0380 	mov.w	r3, #128	; 0x80
    47f4:	f383 8811 	msr	BASEPRI, r3
    47f8:	f3bf 8f6f 	isb	sy
    47fc:	f3bf 8f4f 	dsb	sy
    4800:	e7fe      	b.n	4800 <xTaskResumeAll+0x18>
{
    4802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
    4806:	4b34      	ldr	r3, [pc, #208]	; (48d8 <xTaskResumeAll+0xf0>)
    4808:	4798      	blx	r3
		--uxSchedulerSuspended;
    480a:	4b32      	ldr	r3, [pc, #200]	; (48d4 <xTaskResumeAll+0xec>)
    480c:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
    4810:	3a01      	subs	r2, #1
    4812:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4816:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    481a:	2b00      	cmp	r3, #0
    481c:	d155      	bne.n	48ca <xTaskResumeAll+0xe2>
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U) {
    481e:	4b2d      	ldr	r3, [pc, #180]	; (48d4 <xTaskResumeAll+0xec>)
    4820:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    4824:	b92b      	cbnz	r3, 4832 <xTaskResumeAll+0x4a>
	BaseType_t xAlreadyYielded = pdFALSE;
    4826:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
    4828:	4b2c      	ldr	r3, [pc, #176]	; (48dc <xTaskResumeAll+0xf4>)
    482a:	4798      	blx	r3
}
    482c:	4620      	mov	r0, r4
    482e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4832:	2500      	movs	r5, #0
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    4834:	4c27      	ldr	r4, [pc, #156]	; (48d4 <xTaskResumeAll+0xec>)
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4836:	4e2a      	ldr	r6, [pc, #168]	; (48e0 <xTaskResumeAll+0xf8>)
					prvAddTaskToReadyList(pxTCB);
    4838:	f104 0828 	add.w	r8, r4, #40	; 0x28
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE) {
    483c:	6963      	ldr	r3, [r4, #20]
    483e:	b1fb      	cbz	r3, 4880 <xTaskResumeAll+0x98>
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
    4840:	6a23      	ldr	r3, [r4, #32]
    4842:	68dd      	ldr	r5, [r3, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
    4844:	f105 0018 	add.w	r0, r5, #24
    4848:	47b0      	blx	r6
					(void)uxListRemove(&(pxTCB->xStateListItem));
    484a:	1d2f      	adds	r7, r5, #4
    484c:	4638      	mov	r0, r7
    484e:	47b0      	blx	r6
					prvAddTaskToReadyList(pxTCB);
    4850:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4852:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
    4856:	4298      	cmp	r0, r3
    4858:	bf88      	it	hi
    485a:	f8c4 00d4 	strhi.w	r0, [r4, #212]	; 0xd4
    485e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4862:	4639      	mov	r1, r7
    4864:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    4868:	4b1e      	ldr	r3, [pc, #120]	; (48e4 <xTaskResumeAll+0xfc>)
    486a:	4798      	blx	r3
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    486c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    4870:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    4872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4874:	429a      	cmp	r2, r3
    4876:	d3e1      	bcc.n	483c <xTaskResumeAll+0x54>
						xYieldPending = pdTRUE;
    4878:	2301      	movs	r3, #1
    487a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
    487e:	e7dd      	b.n	483c <xTaskResumeAll+0x54>
				if (pxTCB != NULL) {
    4880:	b10d      	cbz	r5, 4886 <xTaskResumeAll+0x9e>
					prvResetNextTaskUnblockTime();
    4882:	4b19      	ldr	r3, [pc, #100]	; (48e8 <xTaskResumeAll+0x100>)
    4884:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    4886:	4b13      	ldr	r3, [pc, #76]	; (48d4 <xTaskResumeAll+0xec>)
    4888:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
					if (uxPendedCounts > (UBaseType_t)0U) {
    488c:	b17c      	cbz	r4, 48ae <xTaskResumeAll+0xc6>
							if (xTaskIncrementTick() != pdFALSE) {
    488e:	4f17      	ldr	r7, [pc, #92]	; (48ec <xTaskResumeAll+0x104>)
								xYieldPending = pdTRUE;
    4890:	461e      	mov	r6, r3
    4892:	2501      	movs	r5, #1
    4894:	e001      	b.n	489a <xTaskResumeAll+0xb2>
						} while (uxPendedCounts > (UBaseType_t)0U);
    4896:	3c01      	subs	r4, #1
    4898:	d005      	beq.n	48a6 <xTaskResumeAll+0xbe>
							if (xTaskIncrementTick() != pdFALSE) {
    489a:	47b8      	blx	r7
    489c:	2800      	cmp	r0, #0
    489e:	d0fa      	beq.n	4896 <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
    48a0:	f8c6 50e8 	str.w	r5, [r6, #232]	; 0xe8
    48a4:	e7f7      	b.n	4896 <xTaskResumeAll+0xae>
						uxPendedTicks = 0;
    48a6:	2200      	movs	r2, #0
    48a8:	4b0a      	ldr	r3, [pc, #40]	; (48d4 <xTaskResumeAll+0xec>)
    48aa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				if (xYieldPending != pdFALSE) {
    48ae:	4b09      	ldr	r3, [pc, #36]	; (48d4 <xTaskResumeAll+0xec>)
    48b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    48b4:	b15b      	cbz	r3, 48ce <xTaskResumeAll+0xe6>
					taskYIELD_IF_USING_PREEMPTION();
    48b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    48ba:	4b0d      	ldr	r3, [pc, #52]	; (48f0 <xTaskResumeAll+0x108>)
    48bc:	601a      	str	r2, [r3, #0]
    48be:	f3bf 8f4f 	dsb	sy
    48c2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
    48c6:	2401      	movs	r4, #1
    48c8:	e7ae      	b.n	4828 <xTaskResumeAll+0x40>
	BaseType_t xAlreadyYielded = pdFALSE;
    48ca:	2400      	movs	r4, #0
    48cc:	e7ac      	b.n	4828 <xTaskResumeAll+0x40>
    48ce:	2400      	movs	r4, #0
    48d0:	e7aa      	b.n	4828 <xTaskResumeAll+0x40>
    48d2:	bf00      	nop
    48d4:	20002960 	.word	0x20002960
    48d8:	00003685 	.word	0x00003685
    48dc:	000036c9 	.word	0x000036c9
    48e0:	0000358d 	.word	0x0000358d
    48e4:	00003541 	.word	0x00003541
    48e8:	00004391 	.word	0x00004391
    48ec:	000046c1 	.word	0x000046c1
    48f0:	e000ed04 	.word	0xe000ed04

000048f4 <vTaskDelayUntil>:
{
    48f4:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxPreviousWakeTime);
    48f6:	b150      	cbz	r0, 490e <vTaskDelayUntil+0x1a>
    48f8:	4605      	mov	r5, r0
	configASSERT((xTimeIncrement > 0U));
    48fa:	b989      	cbnz	r1, 4920 <vTaskDelayUntil+0x2c>
    48fc:	f04f 0380 	mov.w	r3, #128	; 0x80
    4900:	f383 8811 	msr	BASEPRI, r3
    4904:	f3bf 8f6f 	isb	sy
    4908:	f3bf 8f4f 	dsb	sy
    490c:	e7fe      	b.n	490c <vTaskDelayUntil+0x18>
    490e:	f04f 0380 	mov.w	r3, #128	; 0x80
    4912:	f383 8811 	msr	BASEPRI, r3
    4916:	f3bf 8f6f 	isb	sy
    491a:	f3bf 8f4f 	dsb	sy
    491e:	e7fe      	b.n	491e <vTaskDelayUntil+0x2a>
	configASSERT(uxSchedulerSuspended == 0);
    4920:	4b1a      	ldr	r3, [pc, #104]	; (498c <vTaskDelayUntil+0x98>)
    4922:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4926:	b143      	cbz	r3, 493a <vTaskDelayUntil+0x46>
    4928:	f04f 0380 	mov.w	r3, #128	; 0x80
    492c:	f383 8811 	msr	BASEPRI, r3
    4930:	f3bf 8f6f 	isb	sy
    4934:	f3bf 8f4f 	dsb	sy
    4938:	e7fe      	b.n	4938 <vTaskDelayUntil+0x44>
    493a:	460c      	mov	r4, r1
	vTaskSuspendAll();
    493c:	4b14      	ldr	r3, [pc, #80]	; (4990 <vTaskDelayUntil+0x9c>)
    493e:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4940:	4b12      	ldr	r3, [pc, #72]	; (498c <vTaskDelayUntil+0x98>)
    4942:	f8d3 0094 	ldr.w	r0, [r3, #148]	; 0x94
		xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    4946:	682a      	ldr	r2, [r5, #0]
    4948:	4414      	add	r4, r2
		if (xConstTickCount < *pxPreviousWakeTime) {
    494a:	4290      	cmp	r0, r2
    494c:	d214      	bcs.n	4978 <vTaskDelayUntil+0x84>
			if ((xTimeToWake < *pxPreviousWakeTime) && (xTimeToWake > xConstTickCount)) {
    494e:	42a2      	cmp	r2, r4
    4950:	d916      	bls.n	4980 <vTaskDelayUntil+0x8c>
		*pxPreviousWakeTime = xTimeToWake;
    4952:	602c      	str	r4, [r5, #0]
		if (xShouldDelay != pdFALSE) {
    4954:	42a0      	cmp	r0, r4
    4956:	d203      	bcs.n	4960 <vTaskDelayUntil+0x6c>
			prvAddCurrentTaskToDelayedList(xTimeToWake - xConstTickCount, pdFALSE);
    4958:	2100      	movs	r1, #0
    495a:	1a20      	subs	r0, r4, r0
    495c:	4b0d      	ldr	r3, [pc, #52]	; (4994 <vTaskDelayUntil+0xa0>)
    495e:	4798      	blx	r3
	xAlreadyYielded = xTaskResumeAll();
    4960:	4b0d      	ldr	r3, [pc, #52]	; (4998 <vTaskDelayUntil+0xa4>)
    4962:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    4964:	b980      	cbnz	r0, 4988 <vTaskDelayUntil+0x94>
		portYIELD_WITHIN_API();
    4966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    496a:	4b0c      	ldr	r3, [pc, #48]	; (499c <vTaskDelayUntil+0xa8>)
    496c:	601a      	str	r2, [r3, #0]
    496e:	f3bf 8f4f 	dsb	sy
    4972:	f3bf 8f6f 	isb	sy
}
    4976:	bd38      	pop	{r3, r4, r5, pc}
			if ((xTimeToWake < *pxPreviousWakeTime) || (xTimeToWake > xConstTickCount)) {
    4978:	42a2      	cmp	r2, r4
    497a:	d803      	bhi.n	4984 <vTaskDelayUntil+0x90>
    497c:	42a0      	cmp	r0, r4
    497e:	d301      	bcc.n	4984 <vTaskDelayUntil+0x90>
		*pxPreviousWakeTime = xTimeToWake;
    4980:	602c      	str	r4, [r5, #0]
    4982:	e7ed      	b.n	4960 <vTaskDelayUntil+0x6c>
    4984:	602c      	str	r4, [r5, #0]
    4986:	e7e7      	b.n	4958 <vTaskDelayUntil+0x64>
    4988:	bd38      	pop	{r3, r4, r5, pc}
    498a:	bf00      	nop
    498c:	20002960 	.word	0x20002960
    4990:	000046a1 	.word	0x000046a1
    4994:	000043bd 	.word	0x000043bd
    4998:	000047e9 	.word	0x000047e9
    499c:	e000ed04 	.word	0xe000ed04

000049a0 <vTaskDelay>:
{
    49a0:	b510      	push	{r4, lr}
	if (xTicksToDelay > (TickType_t)0U) {
    49a2:	b1b0      	cbz	r0, 49d2 <vTaskDelay+0x32>
    49a4:	4604      	mov	r4, r0
		configASSERT(uxSchedulerSuspended == 0);
    49a6:	4b0f      	ldr	r3, [pc, #60]	; (49e4 <vTaskDelay+0x44>)
    49a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    49ac:	b143      	cbz	r3, 49c0 <vTaskDelay+0x20>
    49ae:	f04f 0380 	mov.w	r3, #128	; 0x80
    49b2:	f383 8811 	msr	BASEPRI, r3
    49b6:	f3bf 8f6f 	isb	sy
    49ba:	f3bf 8f4f 	dsb	sy
    49be:	e7fe      	b.n	49be <vTaskDelay+0x1e>
		vTaskSuspendAll();
    49c0:	4b09      	ldr	r3, [pc, #36]	; (49e8 <vTaskDelay+0x48>)
    49c2:	4798      	blx	r3
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
    49c4:	2100      	movs	r1, #0
    49c6:	4620      	mov	r0, r4
    49c8:	4b08      	ldr	r3, [pc, #32]	; (49ec <vTaskDelay+0x4c>)
    49ca:	4798      	blx	r3
		xAlreadyYielded = xTaskResumeAll();
    49cc:	4b08      	ldr	r3, [pc, #32]	; (49f0 <vTaskDelay+0x50>)
    49ce:	4798      	blx	r3
	if (xAlreadyYielded == pdFALSE) {
    49d0:	b938      	cbnz	r0, 49e2 <vTaskDelay+0x42>
		portYIELD_WITHIN_API();
    49d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    49d6:	4b07      	ldr	r3, [pc, #28]	; (49f4 <vTaskDelay+0x54>)
    49d8:	601a      	str	r2, [r3, #0]
    49da:	f3bf 8f4f 	dsb	sy
    49de:	f3bf 8f6f 	isb	sy
    49e2:	bd10      	pop	{r4, pc}
    49e4:	20002960 	.word	0x20002960
    49e8:	000046a1 	.word	0x000046a1
    49ec:	000043bd 	.word	0x000043bd
    49f0:	000047e9 	.word	0x000047e9
    49f4:	e000ed04 	.word	0xe000ed04

000049f8 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    49f8:	4b2c      	ldr	r3, [pc, #176]	; (4aac <vTaskSwitchContext+0xb4>)
    49fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    49fe:	bb8b      	cbnz	r3, 4a64 <vTaskSwitchContext+0x6c>
{
    4a00:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
    4a02:	4b2a      	ldr	r3, [pc, #168]	; (4aac <vTaskSwitchContext+0xb4>)
    4a04:	2200      	movs	r2, #0
    4a06:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		taskCHECK_FOR_STACK_OVERFLOW();
    4a0a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4a12:	6812      	ldr	r2, [r2, #0]
    4a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4a16:	429a      	cmp	r2, r3
    4a18:	d807      	bhi.n	4a2a <vTaskSwitchContext+0x32>
    4a1a:	4b24      	ldr	r3, [pc, #144]	; (4aac <vTaskSwitchContext+0xb4>)
    4a1c:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    4a20:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4a24:	3134      	adds	r1, #52	; 0x34
    4a26:	4b22      	ldr	r3, [pc, #136]	; (4ab0 <vTaskSwitchContext+0xb8>)
    4a28:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4a2a:	4a20      	ldr	r2, [pc, #128]	; (4aac <vTaskSwitchContext+0xb4>)
    4a2c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    4a30:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    4a34:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4a38:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4a3a:	b9c2      	cbnz	r2, 4a6e <vTaskSwitchContext+0x76>
    4a3c:	b14b      	cbz	r3, 4a52 <vTaskSwitchContext+0x5a>
    4a3e:	491b      	ldr	r1, [pc, #108]	; (4aac <vTaskSwitchContext+0xb4>)
    4a40:	3b01      	subs	r3, #1
    4a42:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4a46:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4a4a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4a4c:	b97a      	cbnz	r2, 4a6e <vTaskSwitchContext+0x76>
    4a4e:	2b00      	cmp	r3, #0
    4a50:	d1f6      	bne.n	4a40 <vTaskSwitchContext+0x48>
    4a52:	f04f 0380 	mov.w	r3, #128	; 0x80
    4a56:	f383 8811 	msr	BASEPRI, r3
    4a5a:	f3bf 8f6f 	isb	sy
    4a5e:	f3bf 8f4f 	dsb	sy
    4a62:	e7fe      	b.n	4a62 <vTaskSwitchContext+0x6a>
		xYieldPending = pdTRUE;
    4a64:	2201      	movs	r2, #1
    4a66:	4b11      	ldr	r3, [pc, #68]	; (4aac <vTaskSwitchContext+0xb4>)
    4a68:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    4a6c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    4a6e:	4a0f      	ldr	r2, [pc, #60]	; (4aac <vTaskSwitchContext+0xb4>)
    4a70:	0099      	lsls	r1, r3, #2
    4a72:	18c8      	adds	r0, r1, r3
    4a74:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4a78:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    4a7a:	6864      	ldr	r4, [r4, #4]
    4a7c:	62c4      	str	r4, [r0, #44]	; 0x2c
    4a7e:	4419      	add	r1, r3
    4a80:	4602      	mov	r2, r0
    4a82:	3230      	adds	r2, #48	; 0x30
    4a84:	4294      	cmp	r4, r2
    4a86:	d00b      	beq.n	4aa0 <vTaskSwitchContext+0xa8>
    4a88:	4a08      	ldr	r2, [pc, #32]	; (4aac <vTaskSwitchContext+0xb4>)
    4a8a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    4a8e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4a92:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4a94:	68c9      	ldr	r1, [r1, #12]
    4a96:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    4a9a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    4a9e:	bd10      	pop	{r4, pc}
    4aa0:	6860      	ldr	r0, [r4, #4]
    4aa2:	4a02      	ldr	r2, [pc, #8]	; (4aac <vTaskSwitchContext+0xb4>)
    4aa4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4aa8:	62d0      	str	r0, [r2, #44]	; 0x2c
    4aaa:	e7ed      	b.n	4a88 <vTaskSwitchContext+0x90>
    4aac:	20002960 	.word	0x20002960
    4ab0:	000002d1 	.word	0x000002d1

00004ab4 <vTaskPlaceOnEventList>:
	configASSERT(pxEventList);
    4ab4:	b940      	cbnz	r0, 4ac8 <vTaskPlaceOnEventList+0x14>
    4ab6:	f04f 0380 	mov.w	r3, #128	; 0x80
    4aba:	f383 8811 	msr	BASEPRI, r3
    4abe:	f3bf 8f6f 	isb	sy
    4ac2:	f3bf 8f4f 	dsb	sy
    4ac6:	e7fe      	b.n	4ac6 <vTaskPlaceOnEventList+0x12>
{
    4ac8:	b510      	push	{r4, lr}
    4aca:	460c      	mov	r4, r1
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
    4acc:	4b05      	ldr	r3, [pc, #20]	; (4ae4 <vTaskPlaceOnEventList+0x30>)
    4ace:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4ad2:	3118      	adds	r1, #24
    4ad4:	4b04      	ldr	r3, [pc, #16]	; (4ae8 <vTaskPlaceOnEventList+0x34>)
    4ad6:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    4ad8:	2101      	movs	r1, #1
    4ada:	4620      	mov	r0, r4
    4adc:	4b03      	ldr	r3, [pc, #12]	; (4aec <vTaskPlaceOnEventList+0x38>)
    4ade:	4798      	blx	r3
    4ae0:	bd10      	pop	{r4, pc}
    4ae2:	bf00      	nop
    4ae4:	20002960 	.word	0x20002960
    4ae8:	00003559 	.word	0x00003559
    4aec:	000043bd 	.word	0x000043bd

00004af0 <vTaskPlaceOnEventListRestricted>:
{
    4af0:	b538      	push	{r3, r4, r5, lr}
	configASSERT(pxEventList);
    4af2:	b180      	cbz	r0, 4b16 <vTaskPlaceOnEventListRestricted+0x26>
    4af4:	4614      	mov	r4, r2
    4af6:	460d      	mov	r5, r1
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
    4af8:	4b0b      	ldr	r3, [pc, #44]	; (4b28 <vTaskPlaceOnEventListRestricted+0x38>)
    4afa:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    4afe:	3118      	adds	r1, #24
    4b00:	4b0a      	ldr	r3, [pc, #40]	; (4b2c <vTaskPlaceOnEventListRestricted+0x3c>)
    4b02:	4798      	blx	r3
		xTicksToWait = portMAX_DELAY;
    4b04:	2c00      	cmp	r4, #0
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
    4b06:	4621      	mov	r1, r4
    4b08:	bf0c      	ite	eq
    4b0a:	4628      	moveq	r0, r5
    4b0c:	f04f 30ff 	movne.w	r0, #4294967295
    4b10:	4b07      	ldr	r3, [pc, #28]	; (4b30 <vTaskPlaceOnEventListRestricted+0x40>)
    4b12:	4798      	blx	r3
    4b14:	bd38      	pop	{r3, r4, r5, pc}
    4b16:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b1a:	f383 8811 	msr	BASEPRI, r3
    4b1e:	f3bf 8f6f 	isb	sy
    4b22:	f3bf 8f4f 	dsb	sy
    4b26:	e7fe      	b.n	4b26 <vTaskPlaceOnEventListRestricted+0x36>
    4b28:	20002960 	.word	0x20002960
    4b2c:	00003541 	.word	0x00003541
    4b30:	000043bd 	.word	0x000043bd

00004b34 <xTaskRemoveFromEventList>:
{
    4b34:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
    4b36:	68c3      	ldr	r3, [r0, #12]
    4b38:	68dc      	ldr	r4, [r3, #12]
	configASSERT(pxUnblockedTCB);
    4b3a:	2c00      	cmp	r4, #0
    4b3c:	d02a      	beq.n	4b94 <xTaskRemoveFromEventList+0x60>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
    4b3e:	f104 0518 	add.w	r5, r4, #24
    4b42:	4628      	mov	r0, r5
    4b44:	4b1a      	ldr	r3, [pc, #104]	; (4bb0 <xTaskRemoveFromEventList+0x7c>)
    4b46:	4798      	blx	r3
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4b48:	4b1a      	ldr	r3, [pc, #104]	; (4bb4 <xTaskRemoveFromEventList+0x80>)
    4b4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4b4e:	bb53      	cbnz	r3, 4ba6 <xTaskRemoveFromEventList+0x72>
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
    4b50:	1d25      	adds	r5, r4, #4
    4b52:	4628      	mov	r0, r5
    4b54:	4b16      	ldr	r3, [pc, #88]	; (4bb0 <xTaskRemoveFromEventList+0x7c>)
    4b56:	4798      	blx	r3
		prvAddTaskToReadyList(pxUnblockedTCB);
    4b58:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4b5a:	4b16      	ldr	r3, [pc, #88]	; (4bb4 <xTaskRemoveFromEventList+0x80>)
    4b5c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4b60:	4298      	cmp	r0, r3
    4b62:	bf84      	itt	hi
    4b64:	4b13      	ldrhi	r3, [pc, #76]	; (4bb4 <xTaskRemoveFromEventList+0x80>)
    4b66:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4b6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4b6e:	4629      	mov	r1, r5
    4b70:	4b11      	ldr	r3, [pc, #68]	; (4bb8 <xTaskRemoveFromEventList+0x84>)
    4b72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4b76:	4b11      	ldr	r3, [pc, #68]	; (4bbc <xTaskRemoveFromEventList+0x88>)
    4b78:	4798      	blx	r3
	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority) {
    4b7a:	4b0e      	ldr	r3, [pc, #56]	; (4bb4 <xTaskRemoveFromEventList+0x80>)
    4b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4b80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b84:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
    4b86:	bf83      	ittte	hi
    4b88:	2001      	movhi	r0, #1
    4b8a:	4b0a      	ldrhi	r3, [pc, #40]	; (4bb4 <xTaskRemoveFromEventList+0x80>)
    4b8c:	f8c3 00e8 	strhi.w	r0, [r3, #232]	; 0xe8
		xReturn = pdFALSE;
    4b90:	2000      	movls	r0, #0
}
    4b92:	bd38      	pop	{r3, r4, r5, pc}
    4b94:	f04f 0380 	mov.w	r3, #128	; 0x80
    4b98:	f383 8811 	msr	BASEPRI, r3
    4b9c:	f3bf 8f6f 	isb	sy
    4ba0:	f3bf 8f4f 	dsb	sy
    4ba4:	e7fe      	b.n	4ba4 <xTaskRemoveFromEventList+0x70>
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
    4ba6:	4629      	mov	r1, r5
    4ba8:	4805      	ldr	r0, [pc, #20]	; (4bc0 <xTaskRemoveFromEventList+0x8c>)
    4baa:	4b04      	ldr	r3, [pc, #16]	; (4bbc <xTaskRemoveFromEventList+0x88>)
    4bac:	4798      	blx	r3
    4bae:	e7e4      	b.n	4b7a <xTaskRemoveFromEventList+0x46>
    4bb0:	0000358d 	.word	0x0000358d
    4bb4:	20002960 	.word	0x20002960
    4bb8:	20002988 	.word	0x20002988
    4bbc:	00003541 	.word	0x00003541
    4bc0:	20002974 	.word	0x20002974

00004bc4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount  = xNumOfOverflows;
    4bc4:	4b03      	ldr	r3, [pc, #12]	; (4bd4 <vTaskInternalSetTimeOutState+0x10>)
    4bc6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    4bca:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    4bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    4bd0:	6043      	str	r3, [r0, #4]
    4bd2:	4770      	bx	lr
    4bd4:	20002960 	.word	0x20002960

00004bd8 <xTaskCheckForTimeOut>:
	configASSERT(pxTimeOut);
    4bd8:	b1f8      	cbz	r0, 4c1a <xTaskCheckForTimeOut+0x42>
{
    4bda:	b570      	push	{r4, r5, r6, lr}
    4bdc:	4605      	mov	r5, r0
	configASSERT(pxTicksToWait);
    4bde:	b329      	cbz	r1, 4c2c <xTaskCheckForTimeOut+0x54>
    4be0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
    4be2:	4b1c      	ldr	r3, [pc, #112]	; (4c54 <xTaskCheckForTimeOut+0x7c>)
    4be4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
    4be6:	4b1c      	ldr	r3, [pc, #112]	; (4c58 <xTaskCheckForTimeOut+0x80>)
    4be8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4bec:	6869      	ldr	r1, [r5, #4]
		    if (*pxTicksToWait == portMAX_DELAY) {
    4bee:	6823      	ldr	r3, [r4, #0]
    4bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
    4bf4:	d02a      	beq.n	4c4c <xTaskCheckForTimeOut+0x74>
		    if ((xNumOfOverflows != pxTimeOut->xOverflowCount)
    4bf6:	4818      	ldr	r0, [pc, #96]	; (4c58 <xTaskCheckForTimeOut+0x80>)
    4bf8:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
    4bfc:	682e      	ldr	r6, [r5, #0]
    4bfe:	4286      	cmp	r6, r0
    4c00:	d001      	beq.n	4c06 <xTaskCheckForTimeOut+0x2e>
		        && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make
    4c02:	428a      	cmp	r2, r1
    4c04:	d224      	bcs.n	4c50 <xTaskCheckForTimeOut+0x78>
		const TickType_t xElapsedTime    = xConstTickCount - pxTimeOut->xTimeOnEntering;
    4c06:	1a52      	subs	r2, r2, r1
		} else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers,
    4c08:	429a      	cmp	r2, r3
    4c0a:	d318      	bcc.n	4c3e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait = 0;
    4c0c:	2300      	movs	r3, #0
    4c0e:	6023      	str	r3, [r4, #0]
			xReturn        = pdTRUE;
    4c10:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
    4c12:	4b12      	ldr	r3, [pc, #72]	; (4c5c <xTaskCheckForTimeOut+0x84>)
    4c14:	4798      	blx	r3
}
    4c16:	4620      	mov	r0, r4
    4c18:	bd70      	pop	{r4, r5, r6, pc}
    4c1a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c1e:	f383 8811 	msr	BASEPRI, r3
    4c22:	f3bf 8f6f 	isb	sy
    4c26:	f3bf 8f4f 	dsb	sy
    4c2a:	e7fe      	b.n	4c2a <xTaskCheckForTimeOut+0x52>
    4c2c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4c30:	f383 8811 	msr	BASEPRI, r3
    4c34:	f3bf 8f6f 	isb	sy
    4c38:	f3bf 8f4f 	dsb	sy
    4c3c:	e7fe      	b.n	4c3c <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
    4c3e:	1a9b      	subs	r3, r3, r2
    4c40:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
    4c42:	4628      	mov	r0, r5
    4c44:	4b06      	ldr	r3, [pc, #24]	; (4c60 <xTaskCheckForTimeOut+0x88>)
    4c46:	4798      	blx	r3
			xReturn = pdFALSE;
    4c48:	2400      	movs	r4, #0
    4c4a:	e7e2      	b.n	4c12 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdFALSE;
    4c4c:	2400      	movs	r4, #0
    4c4e:	e7e0      	b.n	4c12 <xTaskCheckForTimeOut+0x3a>
			xReturn = pdTRUE;
    4c50:	2401      	movs	r4, #1
    4c52:	e7de      	b.n	4c12 <xTaskCheckForTimeOut+0x3a>
    4c54:	00003685 	.word	0x00003685
    4c58:	20002960 	.word	0x20002960
    4c5c:	000036c9 	.word	0x000036c9
    4c60:	00004bc5 	.word	0x00004bc5

00004c64 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
    4c64:	2201      	movs	r2, #1
    4c66:	4b02      	ldr	r3, [pc, #8]	; (4c70 <vTaskMissedYield+0xc>)
    4c68:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    4c6c:	4770      	bx	lr
    4c6e:	bf00      	nop
    4c70:	20002960 	.word	0x20002960

00004c74 <xTaskGetSchedulerState>:
	if (xSchedulerRunning == pdFALSE) {
    4c74:	4b06      	ldr	r3, [pc, #24]	; (4c90 <xTaskGetSchedulerState+0x1c>)
    4c76:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    4c7a:	b13b      	cbz	r3, 4c8c <xTaskGetSchedulerState+0x18>
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4c7c:	4b04      	ldr	r3, [pc, #16]	; (4c90 <xTaskGetSchedulerState+0x1c>)
    4c7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
			xReturn = taskSCHEDULER_SUSPENDED;
    4c82:	2b00      	cmp	r3, #0
    4c84:	bf0c      	ite	eq
    4c86:	2002      	moveq	r0, #2
    4c88:	2000      	movne	r0, #0
    4c8a:	4770      	bx	lr
		xReturn = taskSCHEDULER_NOT_STARTED;
    4c8c:	2001      	movs	r0, #1
}
    4c8e:	4770      	bx	lr
    4c90:	20002960 	.word	0x20002960

00004c94 <xTaskPriorityInherit>:
	if (pxMutexHolder != NULL) {
    4c94:	2800      	cmp	r0, #0
    4c96:	d045      	beq.n	4d24 <xTaskPriorityInherit+0x90>
{
    4c98:	b538      	push	{r3, r4, r5, lr}
    4c9a:	4605      	mov	r5, r0
		if (pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority) {
    4c9c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    4c9e:	4922      	ldr	r1, [pc, #136]	; (4d28 <xTaskPriorityInherit+0x94>)
    4ca0:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4ca4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4ca6:	428a      	cmp	r2, r1
    4ca8:	d232      	bcs.n	4d10 <xTaskPriorityInherit+0x7c>
			if ((listGET_LIST_ITEM_VALUE(&(pxMutexHolderTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE)
    4caa:	6981      	ldr	r1, [r0, #24]
    4cac:	2900      	cmp	r1, #0
    4cae:	db06      	blt.n	4cbe <xTaskPriorityInherit+0x2a>
				listSET_LIST_ITEM_VALUE(
    4cb0:	491d      	ldr	r1, [pc, #116]	; (4d28 <xTaskPriorityInherit+0x94>)
    4cb2:	f8d1 1098 	ldr.w	r1, [r1, #152]	; 0x98
    4cb6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    4cb8:	f1c1 0105 	rsb	r1, r1, #5
    4cbc:	6181      	str	r1, [r0, #24]
			if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[pxMutexHolderTCB->uxPriority]),
    4cbe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4cc2:	491a      	ldr	r1, [pc, #104]	; (4d2c <xTaskPriorityInherit+0x98>)
    4cc4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4cc8:	6969      	ldr	r1, [r5, #20]
    4cca:	4291      	cmp	r1, r2
    4ccc:	d006      	beq.n	4cdc <xTaskPriorityInherit+0x48>
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4cce:	4a16      	ldr	r2, [pc, #88]	; (4d28 <xTaskPriorityInherit+0x94>)
    4cd0:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4cd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4cd6:	62ea      	str	r2, [r5, #44]	; 0x2c
			xReturn = pdTRUE;
    4cd8:	2001      	movs	r0, #1
    4cda:	bd38      	pop	{r3, r4, r5, pc}
				if (uxListRemove(&(pxMutexHolderTCB->xStateListItem)) == (UBaseType_t)0) {
    4cdc:	1d2c      	adds	r4, r5, #4
    4cde:	4620      	mov	r0, r4
    4ce0:	4b13      	ldr	r3, [pc, #76]	; (4d30 <xTaskPriorityInherit+0x9c>)
    4ce2:	4798      	blx	r3
				pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
    4ce4:	4b10      	ldr	r3, [pc, #64]	; (4d28 <xTaskPriorityInherit+0x94>)
    4ce6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4cea:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    4cec:	62e8      	str	r0, [r5, #44]	; 0x2c
				prvAddTaskToReadyList(pxMutexHolderTCB);
    4cee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4cf2:	4298      	cmp	r0, r3
    4cf4:	bf84      	itt	hi
    4cf6:	4b0c      	ldrhi	r3, [pc, #48]	; (4d28 <xTaskPriorityInherit+0x94>)
    4cf8:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4cfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4d00:	4621      	mov	r1, r4
    4d02:	4b0a      	ldr	r3, [pc, #40]	; (4d2c <xTaskPriorityInherit+0x98>)
    4d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4d08:	4b0a      	ldr	r3, [pc, #40]	; (4d34 <xTaskPriorityInherit+0xa0>)
    4d0a:	4798      	blx	r3
			xReturn = pdTRUE;
    4d0c:	2001      	movs	r0, #1
    4d0e:	bd38      	pop	{r3, r4, r5, pc}
			if (pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority) {
    4d10:	4a05      	ldr	r2, [pc, #20]	; (4d28 <xTaskPriorityInherit+0x94>)
    4d12:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4d16:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4d18:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    4d1a:	4298      	cmp	r0, r3
    4d1c:	bf2c      	ite	cs
    4d1e:	2000      	movcs	r0, #0
    4d20:	2001      	movcc	r0, #1
    4d22:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn          = pdFALSE;
    4d24:	2000      	movs	r0, #0
	return xReturn;
    4d26:	4770      	bx	lr
    4d28:	20002960 	.word	0x20002960
    4d2c:	20002988 	.word	0x20002988
    4d30:	0000358d 	.word	0x0000358d
    4d34:	00003541 	.word	0x00003541

00004d38 <xTaskPriorityDisinherit>:
	if (pxMutexHolder != NULL) {
    4d38:	2800      	cmp	r0, #0
    4d3a:	d03c      	beq.n	4db6 <xTaskPriorityDisinherit+0x7e>
{
    4d3c:	b538      	push	{r3, r4, r5, lr}
    4d3e:	4604      	mov	r4, r0
		configASSERT(pxTCB == pxCurrentTCB);
    4d40:	4a20      	ldr	r2, [pc, #128]	; (4dc4 <xTaskPriorityDisinherit+0x8c>)
    4d42:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
    4d46:	4290      	cmp	r0, r2
    4d48:	d008      	beq.n	4d5c <xTaskPriorityDisinherit+0x24>
    4d4a:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d4e:	f383 8811 	msr	BASEPRI, r3
    4d52:	f3bf 8f6f 	isb	sy
    4d56:	f3bf 8f4f 	dsb	sy
    4d5a:	e7fe      	b.n	4d5a <xTaskPriorityDisinherit+0x22>
		configASSERT(pxTCB->uxMutexesHeld);
    4d5c:	6c82      	ldr	r2, [r0, #72]	; 0x48
    4d5e:	b942      	cbnz	r2, 4d72 <xTaskPriorityDisinherit+0x3a>
    4d60:	f04f 0380 	mov.w	r3, #128	; 0x80
    4d64:	f383 8811 	msr	BASEPRI, r3
    4d68:	f3bf 8f6f 	isb	sy
    4d6c:	f3bf 8f4f 	dsb	sy
    4d70:	e7fe      	b.n	4d70 <xTaskPriorityDisinherit+0x38>
		(pxTCB->uxMutexesHeld)--;
    4d72:	3a01      	subs	r2, #1
    4d74:	6482      	str	r2, [r0, #72]	; 0x48
		if (pxTCB->uxPriority != pxTCB->uxBasePriority) {
    4d76:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4d78:	6c61      	ldr	r1, [r4, #68]	; 0x44
    4d7a:	4288      	cmp	r0, r1
    4d7c:	d01d      	beq.n	4dba <xTaskPriorityDisinherit+0x82>
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0) {
    4d7e:	b9f2      	cbnz	r2, 4dbe <xTaskPriorityDisinherit+0x86>
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4d80:	1d25      	adds	r5, r4, #4
    4d82:	4628      	mov	r0, r5
    4d84:	4b10      	ldr	r3, [pc, #64]	; (4dc8 <xTaskPriorityDisinherit+0x90>)
    4d86:	4798      	blx	r3
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4d88:	6c60      	ldr	r0, [r4, #68]	; 0x44
    4d8a:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE(
    4d8c:	f1c0 0305 	rsb	r3, r0, #5
    4d90:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyList(pxTCB);
    4d92:	4b0c      	ldr	r3, [pc, #48]	; (4dc4 <xTaskPriorityDisinherit+0x8c>)
    4d94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4d98:	4298      	cmp	r0, r3
    4d9a:	bf84      	itt	hi
    4d9c:	4b09      	ldrhi	r3, [pc, #36]	; (4dc4 <xTaskPriorityDisinherit+0x8c>)
    4d9e:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4da2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4da6:	4629      	mov	r1, r5
    4da8:	4b08      	ldr	r3, [pc, #32]	; (4dcc <xTaskPriorityDisinherit+0x94>)
    4daa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4dae:	4b08      	ldr	r3, [pc, #32]	; (4dd0 <xTaskPriorityDisinherit+0x98>)
    4db0:	4798      	blx	r3
				xReturn = pdTRUE;
    4db2:	2001      	movs	r0, #1
    4db4:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t   xReturn = pdFALSE;
    4db6:	2000      	movs	r0, #0
    4db8:	4770      	bx	lr
    4dba:	2000      	movs	r0, #0
    4dbc:	bd38      	pop	{r3, r4, r5, pc}
    4dbe:	2000      	movs	r0, #0
}
    4dc0:	bd38      	pop	{r3, r4, r5, pc}
    4dc2:	bf00      	nop
    4dc4:	20002960 	.word	0x20002960
    4dc8:	0000358d 	.word	0x0000358d
    4dcc:	20002988 	.word	0x20002988
    4dd0:	00003541 	.word	0x00003541

00004dd4 <vTaskPriorityDisinheritAfterTimeout>:
	if (pxMutexHolder != NULL) {
    4dd4:	2800      	cmp	r0, #0
    4dd6:	d049      	beq.n	4e6c <vTaskPriorityDisinheritAfterTimeout+0x98>
{
    4dd8:	b538      	push	{r3, r4, r5, lr}
    4dda:	4604      	mov	r4, r0
		configASSERT(pxTCB->uxMutexesHeld);
    4ddc:	6c80      	ldr	r0, [r0, #72]	; 0x48
    4dde:	b940      	cbnz	r0, 4df2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    4de0:	f04f 0380 	mov.w	r3, #128	; 0x80
    4de4:	f383 8811 	msr	BASEPRI, r3
    4de8:	f3bf 8f6f 	isb	sy
    4dec:	f3bf 8f4f 	dsb	sy
    4df0:	e7fe      	b.n	4df0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
    4df2:	6c62      	ldr	r2, [r4, #68]	; 0x44
    4df4:	428a      	cmp	r2, r1
    4df6:	bf38      	it	cc
    4df8:	460a      	movcc	r2, r1
		if (pxTCB->uxPriority != uxPriorityToUse) {
    4dfa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4dfc:	4291      	cmp	r1, r2
    4dfe:	d001      	beq.n	4e04 <vTaskPriorityDisinheritAfterTimeout+0x30>
			if (pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld) {
    4e00:	2801      	cmp	r0, #1
    4e02:	d000      	beq.n	4e06 <vTaskPriorityDisinheritAfterTimeout+0x32>
    4e04:	bd38      	pop	{r3, r4, r5, pc}
				configASSERT(pxTCB != pxCurrentTCB);
    4e06:	481a      	ldr	r0, [pc, #104]	; (4e70 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4e08:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
    4e0c:	4284      	cmp	r4, r0
    4e0e:	d108      	bne.n	4e22 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    4e10:	f04f 0380 	mov.w	r3, #128	; 0x80
    4e14:	f383 8811 	msr	BASEPRI, r3
    4e18:	f3bf 8f6f 	isb	sy
    4e1c:	f3bf 8f4f 	dsb	sy
    4e20:	e7fe      	b.n	4e20 <vTaskPriorityDisinheritAfterTimeout+0x4c>
				pxTCB->uxPriority     = uxPriorityToUse;
    4e22:	62e2      	str	r2, [r4, #44]	; 0x2c
				if ((listGET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem)) & taskEVENT_LIST_ITEM_VALUE_IN_USE) == 0UL) {
    4e24:	69a0      	ldr	r0, [r4, #24]
    4e26:	2800      	cmp	r0, #0
					listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem),
    4e28:	bfa4      	itt	ge
    4e2a:	f1c2 0205 	rsbge	r2, r2, #5
    4e2e:	61a2      	strge	r2, [r4, #24]
				if (listIS_CONTAINED_WITHIN(&(pxReadyTasksLists[uxPriorityUsedOnEntry]), &(pxTCB->xStateListItem))
    4e30:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    4e34:	4a0f      	ldr	r2, [pc, #60]	; (4e74 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4e36:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4e3a:	6962      	ldr	r2, [r4, #20]
    4e3c:	428a      	cmp	r2, r1
    4e3e:	d1e1      	bne.n	4e04 <vTaskPriorityDisinheritAfterTimeout+0x30>
					if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0) {
    4e40:	1d25      	adds	r5, r4, #4
    4e42:	4628      	mov	r0, r5
    4e44:	4b0c      	ldr	r3, [pc, #48]	; (4e78 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
    4e46:	4798      	blx	r3
					prvAddTaskToReadyList(pxTCB);
    4e48:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4e4a:	4b09      	ldr	r3, [pc, #36]	; (4e70 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4e4c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    4e50:	4298      	cmp	r0, r3
    4e52:	bf84      	itt	hi
    4e54:	4b06      	ldrhi	r3, [pc, #24]	; (4e70 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
    4e56:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    4e5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4e5e:	4629      	mov	r1, r5
    4e60:	4b04      	ldr	r3, [pc, #16]	; (4e74 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
    4e62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    4e66:	4b05      	ldr	r3, [pc, #20]	; (4e7c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
    4e68:	4798      	blx	r3
}
    4e6a:	e7cb      	b.n	4e04 <vTaskPriorityDisinheritAfterTimeout+0x30>
    4e6c:	4770      	bx	lr
    4e6e:	bf00      	nop
    4e70:	20002960 	.word	0x20002960
    4e74:	20002988 	.word	0x20002988
    4e78:	0000358d 	.word	0x0000358d
    4e7c:	00003541 	.word	0x00003541

00004e80 <pvTaskIncrementMutexHeldCount>:
	if (pxCurrentTCB != NULL) {
    4e80:	4b06      	ldr	r3, [pc, #24]	; (4e9c <pvTaskIncrementMutexHeldCount+0x1c>)
    4e82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4e86:	b12b      	cbz	r3, 4e94 <pvTaskIncrementMutexHeldCount+0x14>
		(pxCurrentTCB->uxMutexesHeld)++;
    4e88:	4b04      	ldr	r3, [pc, #16]	; (4e9c <pvTaskIncrementMutexHeldCount+0x1c>)
    4e8a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4e8e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    4e90:	3301      	adds	r3, #1
    4e92:	6493      	str	r3, [r2, #72]	; 0x48
	return pxCurrentTCB;
    4e94:	4b01      	ldr	r3, [pc, #4]	; (4e9c <pvTaskIncrementMutexHeldCount+0x1c>)
    4e96:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
}
    4e9a:	4770      	bx	lr
    4e9c:	20002960 	.word	0x20002960

00004ea0 <xTaskNotifyWait>:
{
    4ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ea2:	4607      	mov	r7, r0
    4ea4:	460d      	mov	r5, r1
    4ea6:	4614      	mov	r4, r2
    4ea8:	461e      	mov	r6, r3
	taskENTER_CRITICAL();
    4eaa:	4b25      	ldr	r3, [pc, #148]	; (4f40 <xTaskNotifyWait+0xa0>)
    4eac:	4798      	blx	r3
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    4eae:	4b25      	ldr	r3, [pc, #148]	; (4f44 <xTaskNotifyWait+0xa4>)
    4eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4eb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4eb8:	b2db      	uxtb	r3, r3
    4eba:	2b02      	cmp	r3, #2
    4ebc:	d00c      	beq.n	4ed8 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    4ebe:	4b21      	ldr	r3, [pc, #132]	; (4f44 <xTaskNotifyWait+0xa4>)
    4ec0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4ec4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    4ec6:	ea20 0007 	bic.w	r0, r0, r7
    4eca:	64d0      	str	r0, [r2, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    4ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4ed0:	2201      	movs	r2, #1
    4ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			if (xTicksToWait > (TickType_t)0) {
    4ed6:	b9e6      	cbnz	r6, 4f12 <xTaskNotifyWait+0x72>
	taskEXIT_CRITICAL();
    4ed8:	4b1b      	ldr	r3, [pc, #108]	; (4f48 <xTaskNotifyWait+0xa8>)
    4eda:	4798      	blx	r3
	taskENTER_CRITICAL();
    4edc:	4b18      	ldr	r3, [pc, #96]	; (4f40 <xTaskNotifyWait+0xa0>)
    4ede:	4798      	blx	r3
		if (pulNotificationValue != NULL) {
    4ee0:	b124      	cbz	r4, 4eec <xTaskNotifyWait+0x4c>
			*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4ee2:	4b18      	ldr	r3, [pc, #96]	; (4f44 <xTaskNotifyWait+0xa4>)
    4ee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    4eea:	6023      	str	r3, [r4, #0]
		if (pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED) {
    4eec:	4b15      	ldr	r3, [pc, #84]	; (4f44 <xTaskNotifyWait+0xa4>)
    4eee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4ef2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
    4ef6:	b2db      	uxtb	r3, r3
    4ef8:	2b02      	cmp	r3, #2
    4efa:	d017      	beq.n	4f2c <xTaskNotifyWait+0x8c>
			xReturn = pdFALSE;
    4efc:	2400      	movs	r4, #0
		pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4efe:	4b11      	ldr	r3, [pc, #68]	; (4f44 <xTaskNotifyWait+0xa4>)
    4f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    4f04:	2200      	movs	r2, #0
    4f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	taskEXIT_CRITICAL();
    4f0a:	4b0f      	ldr	r3, [pc, #60]	; (4f48 <xTaskNotifyWait+0xa8>)
    4f0c:	4798      	blx	r3
}
    4f0e:	4620      	mov	r0, r4
    4f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
    4f12:	4611      	mov	r1, r2
    4f14:	4630      	mov	r0, r6
    4f16:	4b0d      	ldr	r3, [pc, #52]	; (4f4c <xTaskNotifyWait+0xac>)
    4f18:	4798      	blx	r3
				portYIELD_WITHIN_API();
    4f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4f1e:	4b0c      	ldr	r3, [pc, #48]	; (4f50 <xTaskNotifyWait+0xb0>)
    4f20:	601a      	str	r2, [r3, #0]
    4f22:	f3bf 8f4f 	dsb	sy
    4f26:	f3bf 8f6f 	isb	sy
    4f2a:	e7d5      	b.n	4ed8 <xTaskNotifyWait+0x38>
			pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4f2c:	4b05      	ldr	r3, [pc, #20]	; (4f44 <xTaskNotifyWait+0xa4>)
    4f2e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4f32:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    4f34:	ea23 0505 	bic.w	r5, r3, r5
    4f38:	64d5      	str	r5, [r2, #76]	; 0x4c
			xReturn = pdTRUE;
    4f3a:	2401      	movs	r4, #1
    4f3c:	e7df      	b.n	4efe <xTaskNotifyWait+0x5e>
    4f3e:	bf00      	nop
    4f40:	00003685 	.word	0x00003685
    4f44:	20002960 	.word	0x20002960
    4f48:	000036c9 	.word	0x000036c9
    4f4c:	000043bd 	.word	0x000043bd
    4f50:	e000ed04 	.word	0xe000ed04

00004f54 <xTaskGenericNotifyFromISR>:
{
    4f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4f58:	9e08      	ldr	r6, [sp, #32]
	configASSERT(xTaskToNotify);
    4f5a:	b310      	cbz	r0, 4fa2 <xTaskGenericNotifyFromISR+0x4e>
    4f5c:	4604      	mov	r4, r0
    4f5e:	4699      	mov	r9, r3
    4f60:	4617      	mov	r7, r2
    4f62:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
    4f64:	4b3e      	ldr	r3, [pc, #248]	; (5060 <xTaskGenericNotifyFromISR+0x10c>)
    4f66:	4798      	blx	r3
	__asm volatile("	mrs %0, basepri											\n"
    4f68:	f3ef 8511 	mrs	r5, BASEPRI
    4f6c:	f04f 0380 	mov.w	r3, #128	; 0x80
    4f70:	f383 8811 	msr	BASEPRI, r3
    4f74:	f3bf 8f6f 	isb	sy
    4f78:	f3bf 8f4f 	dsb	sy
		if (pulPreviousNotificationValue != NULL) {
    4f7c:	f1b9 0f00 	cmp.w	r9, #0
    4f80:	d002      	beq.n	4f88 <xTaskGenericNotifyFromISR+0x34>
			*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    4f82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    4f84:	f8c9 3000 	str.w	r3, [r9]
		ucOriginalNotifyState = pxTCB->ucNotifyState;
    4f88:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
    4f8c:	b2db      	uxtb	r3, r3
		pxTCB->ucNotifyState  = taskNOTIFICATION_RECEIVED;
    4f8e:	2202      	movs	r2, #2
    4f90:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
		switch (eAction) {
    4f94:	1e7a      	subs	r2, r7, #1
    4f96:	2a03      	cmp	r2, #3
    4f98:	d810      	bhi.n	4fbc <xTaskGenericNotifyFromISR+0x68>
    4f9a:	e8df f002 	tbb	[pc, r2]
    4f9e:	1c0b      	.short	0x1c0b
    4fa0:	2320      	.short	0x2320
	__asm volatile("	mov %0, %1												\n"
    4fa2:	f04f 0380 	mov.w	r3, #128	; 0x80
    4fa6:	f383 8811 	msr	BASEPRI, r3
    4faa:	f3bf 8f6f 	isb	sy
    4fae:	f3bf 8f4f 	dsb	sy
    4fb2:	e7fe      	b.n	4fb2 <xTaskGenericNotifyFromISR+0x5e>
			pxTCB->ulNotifiedValue |= ulValue;
    4fb4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    4fb6:	ea42 0208 	orr.w	r2, r2, r8
    4fba:	64e2      	str	r2, [r4, #76]	; 0x4c
		if (ucOriginalNotifyState == taskWAITING_NOTIFICATION) {
    4fbc:	2b01      	cmp	r3, #1
    4fbe:	d147      	bne.n	5050 <xTaskGenericNotifyFromISR+0xfc>
			configASSERT(listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) == NULL);
    4fc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4fc2:	b1a3      	cbz	r3, 4fee <xTaskGenericNotifyFromISR+0x9a>
    4fc4:	f04f 0380 	mov.w	r3, #128	; 0x80
    4fc8:	f383 8811 	msr	BASEPRI, r3
    4fcc:	f3bf 8f6f 	isb	sy
    4fd0:	f3bf 8f4f 	dsb	sy
    4fd4:	e7fe      	b.n	4fd4 <xTaskGenericNotifyFromISR+0x80>
			(pxTCB->ulNotifiedValue)++;
    4fd6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    4fd8:	3201      	adds	r2, #1
    4fda:	64e2      	str	r2, [r4, #76]	; 0x4c
			break;
    4fdc:	e7ee      	b.n	4fbc <xTaskGenericNotifyFromISR+0x68>
			pxTCB->ulNotifiedValue = ulValue;
    4fde:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
			break;
    4fe2:	e7eb      	b.n	4fbc <xTaskGenericNotifyFromISR+0x68>
			if (ucOriginalNotifyState != taskNOTIFICATION_RECEIVED) {
    4fe4:	2b02      	cmp	r3, #2
    4fe6:	d031      	beq.n	504c <xTaskGenericNotifyFromISR+0xf8>
				pxTCB->ulNotifiedValue = ulValue;
    4fe8:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
    4fec:	e7e6      	b.n	4fbc <xTaskGenericNotifyFromISR+0x68>
			if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    4fee:	4b1d      	ldr	r3, [pc, #116]	; (5064 <xTaskGenericNotifyFromISR+0x110>)
    4ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    4ff4:	b9fb      	cbnz	r3, 5036 <xTaskGenericNotifyFromISR+0xe2>
				(void)uxListRemove(&(pxTCB->xStateListItem));
    4ff6:	1d27      	adds	r7, r4, #4
    4ff8:	4638      	mov	r0, r7
    4ffa:	4b1b      	ldr	r3, [pc, #108]	; (5068 <xTaskGenericNotifyFromISR+0x114>)
    4ffc:	4798      	blx	r3
				prvAddTaskToReadyList(pxTCB);
    4ffe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5000:	4b18      	ldr	r3, [pc, #96]	; (5064 <xTaskGenericNotifyFromISR+0x110>)
    5002:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    5006:	4298      	cmp	r0, r3
    5008:	bf84      	itt	hi
    500a:	4b16      	ldrhi	r3, [pc, #88]	; (5064 <xTaskGenericNotifyFromISR+0x110>)
    500c:	f8c3 00d4 	strhi.w	r0, [r3, #212]	; 0xd4
    5010:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5014:	4639      	mov	r1, r7
    5016:	4b15      	ldr	r3, [pc, #84]	; (506c <xTaskGenericNotifyFromISR+0x118>)
    5018:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    501c:	4b14      	ldr	r3, [pc, #80]	; (5070 <xTaskGenericNotifyFromISR+0x11c>)
    501e:	4798      	blx	r3
			if (pxTCB->uxPriority > pxCurrentTCB->uxPriority) {
    5020:	4b10      	ldr	r3, [pc, #64]	; (5064 <xTaskGenericNotifyFromISR+0x110>)
    5022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    5026:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    502a:	429a      	cmp	r2, r3
    502c:	d915      	bls.n	505a <xTaskGenericNotifyFromISR+0x106>
				if (pxHigherPriorityTaskWoken != NULL) {
    502e:	b146      	cbz	r6, 5042 <xTaskGenericNotifyFromISR+0xee>
					*pxHigherPriorityTaskWoken = pdTRUE;
    5030:	2001      	movs	r0, #1
    5032:	6030      	str	r0, [r6, #0]
    5034:	e00d      	b.n	5052 <xTaskGenericNotifyFromISR+0xfe>
				vListInsertEnd(&(xPendingReadyList), &(pxTCB->xEventListItem));
    5036:	f104 0118 	add.w	r1, r4, #24
    503a:	480e      	ldr	r0, [pc, #56]	; (5074 <xTaskGenericNotifyFromISR+0x120>)
    503c:	4b0c      	ldr	r3, [pc, #48]	; (5070 <xTaskGenericNotifyFromISR+0x11c>)
    503e:	4798      	blx	r3
    5040:	e7ee      	b.n	5020 <xTaskGenericNotifyFromISR+0xcc>
					xYieldPending = pdTRUE;
    5042:	2001      	movs	r0, #1
    5044:	4b07      	ldr	r3, [pc, #28]	; (5064 <xTaskGenericNotifyFromISR+0x110>)
    5046:	f8c3 00e8 	str.w	r0, [r3, #232]	; 0xe8
    504a:	e002      	b.n	5052 <xTaskGenericNotifyFromISR+0xfe>
				xReturn = pdFAIL;
    504c:	2000      	movs	r0, #0
    504e:	e000      	b.n	5052 <xTaskGenericNotifyFromISR+0xfe>
    5050:	2001      	movs	r0, #1
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    5052:	f385 8811 	msr	BASEPRI, r5
}
    5056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    505a:	2001      	movs	r0, #1
    505c:	e7f9      	b.n	5052 <xTaskGenericNotifyFromISR+0xfe>
    505e:	bf00      	nop
    5060:	000038dd 	.word	0x000038dd
    5064:	20002960 	.word	0x20002960
    5068:	0000358d 	.word	0x0000358d
    506c:	20002988 	.word	0x20002988
    5070:	00003541 	.word	0x00003541
    5074:	20002974 	.word	0x20002974

00005078 <prvInsertTimerInActiveList>:
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList(Timer_t *const pxTimer, const TickType_t xNextExpiryTime,
                                             const TickType_t xTimeNow, const TickType_t xCommandTime)
{
    5078:	b508      	push	{r3, lr}
	BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xNextExpiryTime);
    507a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    507c:	6100      	str	r0, [r0, #16]

	if (xNextExpiryTime <= xTimeNow) {
    507e:	4291      	cmp	r1, r2
    5080:	d80c      	bhi.n	509c <prvInsertTimerInActiveList+0x24>
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if (((TickType_t)(xTimeNow - xCommandTime))
    5082:	1ad2      	subs	r2, r2, r3
    5084:	6983      	ldr	r3, [r0, #24]
    5086:	429a      	cmp	r2, r3
    5088:	d301      	bcc.n	508e <prvInsertTimerInActiveList+0x16>
		    >= pxTimer->xTimerPeriodInTicks) /*lint !e961 MISRA exception as the casts are only redundant for some
		                                        ports. */
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    508a:	2001      	movs	r0, #1
    508c:	bd08      	pop	{r3, pc}
		} else {
			vListInsert(pxOverflowTimerList, &(pxTimer->xTimerListItem));
    508e:	1d01      	adds	r1, r0, #4
    5090:	4b09      	ldr	r3, [pc, #36]	; (50b8 <prvInsertTimerInActiveList+0x40>)
    5092:	6818      	ldr	r0, [r3, #0]
    5094:	4b09      	ldr	r3, [pc, #36]	; (50bc <prvInsertTimerInActiveList+0x44>)
    5096:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    5098:	2000      	movs	r0, #0
    509a:	bd08      	pop	{r3, pc}
		}
	} else {
		if ((xTimeNow < xCommandTime) && (xNextExpiryTime >= xCommandTime)) {
    509c:	429a      	cmp	r2, r3
    509e:	d201      	bcs.n	50a4 <prvInsertTimerInActiveList+0x2c>
    50a0:	4299      	cmp	r1, r3
    50a2:	d206      	bcs.n	50b2 <prvInsertTimerInActiveList+0x3a>
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		} else {
			vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    50a4:	1d01      	adds	r1, r0, #4
    50a6:	4b04      	ldr	r3, [pc, #16]	; (50b8 <prvInsertTimerInActiveList+0x40>)
    50a8:	6858      	ldr	r0, [r3, #4]
    50aa:	4b04      	ldr	r3, [pc, #16]	; (50bc <prvInsertTimerInActiveList+0x44>)
    50ac:	4798      	blx	r3
	BaseType_t xProcessTimerNow = pdFALSE;
    50ae:	2000      	movs	r0, #0
    50b0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
    50b2:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
    50b4:	bd08      	pop	{r3, pc}
    50b6:	bf00      	nop
    50b8:	20002a4c 	.word	0x20002a4c
    50bc:	00003559 	.word	0x00003559

000050c0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue(void)
{
    50c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    50c2:	4b0d      	ldr	r3, [pc, #52]	; (50f8 <prvCheckForValidListAndQueue+0x38>)
    50c4:	4798      	blx	r3
	{
		if (xTimerQueue == NULL) {
    50c6:	4b0d      	ldr	r3, [pc, #52]	; (50fc <prvCheckForValidListAndQueue+0x3c>)
    50c8:	689b      	ldr	r3, [r3, #8]
    50ca:	b113      	cbz	r3, 50d2 <prvCheckForValidListAndQueue+0x12>
#endif /* configQUEUE_REGISTRY_SIZE */
		} else {
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    50cc:	4b0c      	ldr	r3, [pc, #48]	; (5100 <prvCheckForValidListAndQueue+0x40>)
    50ce:	4798      	blx	r3
    50d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInitialise(&xActiveTimerList1);
    50d2:	4c0a      	ldr	r4, [pc, #40]	; (50fc <prvCheckForValidListAndQueue+0x3c>)
    50d4:	f104 060c 	add.w	r6, r4, #12
    50d8:	4630      	mov	r0, r6
    50da:	4f0a      	ldr	r7, [pc, #40]	; (5104 <prvCheckForValidListAndQueue+0x44>)
    50dc:	47b8      	blx	r7
			vListInitialise(&xActiveTimerList2);
    50de:	f104 0520 	add.w	r5, r4, #32
    50e2:	4628      	mov	r0, r5
    50e4:	47b8      	blx	r7
			pxCurrentTimerList  = &xActiveTimerList1;
    50e6:	6066      	str	r6, [r4, #4]
			pxOverflowTimerList = &xActiveTimerList2;
    50e8:	6025      	str	r5, [r4, #0]
				xTimerQueue = xQueueCreate((UBaseType_t)configTIMER_QUEUE_LENGTH, sizeof(DaemonTaskMessage_t));
    50ea:	2200      	movs	r2, #0
    50ec:	210c      	movs	r1, #12
    50ee:	2014      	movs	r0, #20
    50f0:	4b05      	ldr	r3, [pc, #20]	; (5108 <prvCheckForValidListAndQueue+0x48>)
    50f2:	4798      	blx	r3
    50f4:	60a0      	str	r0, [r4, #8]
    50f6:	e7e9      	b.n	50cc <prvCheckForValidListAndQueue+0xc>
    50f8:	00003685 	.word	0x00003685
    50fc:	20002a4c 	.word	0x20002a4c
    5100:	000036c9 	.word	0x000036c9
    5104:	00003525 	.word	0x00003525
    5108:	00003c39 	.word	0x00003c39

0000510c <xTimerCreateTimerTask>:
{
    510c:	b510      	push	{r4, lr}
    510e:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
    5110:	4b0d      	ldr	r3, [pc, #52]	; (5148 <xTimerCreateTimerTask+0x3c>)
    5112:	4798      	blx	r3
	if (xTimerQueue != NULL) {
    5114:	4b0d      	ldr	r3, [pc, #52]	; (514c <xTimerCreateTimerTask+0x40>)
    5116:	689b      	ldr	r3, [r3, #8]
    5118:	b163      	cbz	r3, 5134 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate(prvTimerTask,
    511a:	4b0d      	ldr	r3, [pc, #52]	; (5150 <xTimerCreateTimerTask+0x44>)
    511c:	9301      	str	r3, [sp, #4]
    511e:	2303      	movs	r3, #3
    5120:	9300      	str	r3, [sp, #0]
    5122:	2300      	movs	r3, #0
    5124:	2280      	movs	r2, #128	; 0x80
    5126:	490b      	ldr	r1, [pc, #44]	; (5154 <xTimerCreateTimerTask+0x48>)
    5128:	480b      	ldr	r0, [pc, #44]	; (5158 <xTimerCreateTimerTask+0x4c>)
    512a:	4c0c      	ldr	r4, [pc, #48]	; (515c <xTimerCreateTimerTask+0x50>)
    512c:	47a0      	blx	r4
	configASSERT(xReturn);
    512e:	b108      	cbz	r0, 5134 <xTimerCreateTimerTask+0x28>
}
    5130:	b002      	add	sp, #8
    5132:	bd10      	pop	{r4, pc}
	__asm volatile("	mov %0, %1												\n"
    5134:	f04f 0380 	mov.w	r3, #128	; 0x80
    5138:	f383 8811 	msr	BASEPRI, r3
    513c:	f3bf 8f6f 	isb	sy
    5140:	f3bf 8f4f 	dsb	sy
    5144:	e7fe      	b.n	5144 <xTimerCreateTimerTask+0x38>
    5146:	bf00      	nop
    5148:	000050c1 	.word	0x000050c1
    514c:	20002a4c 	.word	0x20002a4c
    5150:	20002a80 	.word	0x20002a80
    5154:	000070e0 	.word	0x000070e0
    5158:	00005279 	.word	0x00005279
    515c:	0000443d 	.word	0x0000443d

00005160 <xTimerGenericCommand>:
	configASSERT(xTimer);
    5160:	b1d8      	cbz	r0, 519a <xTimerGenericCommand+0x3a>
{
    5162:	b530      	push	{r4, r5, lr}
    5164:	b085      	sub	sp, #20
    5166:	4615      	mov	r5, r2
    5168:	4604      	mov	r4, r0
	if (xTimerQueue != NULL) {
    516a:	4a14      	ldr	r2, [pc, #80]	; (51bc <xTimerGenericCommand+0x5c>)
    516c:	6890      	ldr	r0, [r2, #8]
    516e:	b310      	cbz	r0, 51b6 <xTimerGenericCommand+0x56>
    5170:	461a      	mov	r2, r3
		xMessage.xMessageID                       = xCommandID;
    5172:	9101      	str	r1, [sp, #4]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    5174:	9502      	str	r5, [sp, #8]
		xMessage.u.xTimerParameters.pxTimer       = (Timer_t *)xTimer;
    5176:	9403      	str	r4, [sp, #12]
		if (xCommandID < tmrFIRST_FROM_ISR_COMMAND) {
    5178:	2905      	cmp	r1, #5
    517a:	dc17      	bgt.n	51ac <xTimerGenericCommand+0x4c>
			if (xTaskGetSchedulerState() == taskSCHEDULER_RUNNING) {
    517c:	4b10      	ldr	r3, [pc, #64]	; (51c0 <xTimerGenericCommand+0x60>)
    517e:	4798      	blx	r3
    5180:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, xTicksToWait);
    5182:	f04f 0300 	mov.w	r3, #0
    5186:	bf0c      	ite	eq
    5188:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack(xTimerQueue, &xMessage, tmrNO_DELAY);
    518a:	461a      	movne	r2, r3
    518c:	a901      	add	r1, sp, #4
    518e:	480b      	ldr	r0, [pc, #44]	; (51bc <xTimerGenericCommand+0x5c>)
    5190:	6880      	ldr	r0, [r0, #8]
    5192:	4c0c      	ldr	r4, [pc, #48]	; (51c4 <xTimerGenericCommand+0x64>)
    5194:	47a0      	blx	r4
}
    5196:	b005      	add	sp, #20
    5198:	bd30      	pop	{r4, r5, pc}
    519a:	f04f 0380 	mov.w	r3, #128	; 0x80
    519e:	f383 8811 	msr	BASEPRI, r3
    51a2:	f3bf 8f6f 	isb	sy
    51a6:	f3bf 8f4f 	dsb	sy
    51aa:	e7fe      	b.n	51aa <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR(xTimerQueue, &xMessage, pxHigherPriorityTaskWoken);
    51ac:	2300      	movs	r3, #0
    51ae:	a901      	add	r1, sp, #4
    51b0:	4c05      	ldr	r4, [pc, #20]	; (51c8 <xTimerGenericCommand+0x68>)
    51b2:	47a0      	blx	r4
    51b4:	e7ef      	b.n	5196 <xTimerGenericCommand+0x36>
	BaseType_t          xReturn = pdFAIL;
    51b6:	2000      	movs	r0, #0
	return xReturn;
    51b8:	e7ed      	b.n	5196 <xTimerGenericCommand+0x36>
    51ba:	bf00      	nop
    51bc:	20002a4c 	.word	0x20002a4c
    51c0:	00004c75 	.word	0x00004c75
    51c4:	00003c91 	.word	0x00003c91
    51c8:	00003e6d 	.word	0x00003e6d

000051cc <prvSampleTimeNow>:
{
    51cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    51d0:	b082      	sub	sp, #8
    51d2:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
    51d4:	4b23      	ldr	r3, [pc, #140]	; (5264 <prvSampleTimeNow+0x98>)
    51d6:	4798      	blx	r3
    51d8:	4607      	mov	r7, r0
	if (xTimeNow < xLastTime) {
    51da:	4b23      	ldr	r3, [pc, #140]	; (5268 <prvSampleTimeNow+0x9c>)
    51dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    51de:	4298      	cmp	r0, r3
    51e0:	d319      	bcc.n	5216 <prvSampleTimeNow+0x4a>
		*pxTimerListsWereSwitched = pdFALSE;
    51e2:	2300      	movs	r3, #0
    51e4:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
    51e8:	4b1f      	ldr	r3, [pc, #124]	; (5268 <prvSampleTimeNow+0x9c>)
    51ea:	639f      	str	r7, [r3, #56]	; 0x38
}
    51ec:	4638      	mov	r0, r7
    51ee:	b002      	add	sp, #8
    51f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				    = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    51f4:	2100      	movs	r1, #0
    51f6:	9100      	str	r1, [sp, #0]
    51f8:	460b      	mov	r3, r1
    51fa:	4652      	mov	r2, sl
    51fc:	4620      	mov	r0, r4
    51fe:	4c1b      	ldr	r4, [pc, #108]	; (526c <prvSampleTimeNow+0xa0>)
    5200:	47a0      	blx	r4
				configASSERT(xResult);
    5202:	b950      	cbnz	r0, 521a <prvSampleTimeNow+0x4e>
    5204:	f04f 0380 	mov.w	r3, #128	; 0x80
    5208:	f383 8811 	msr	BASEPRI, r3
    520c:	f3bf 8f6f 	isb	sy
    5210:	f3bf 8f4f 	dsb	sy
    5214:	e7fe      	b.n	5214 <prvSampleTimeNow+0x48>
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    5216:	4d14      	ldr	r5, [pc, #80]	; (5268 <prvSampleTimeNow+0x9c>)
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    5218:	4e15      	ldr	r6, [pc, #84]	; (5270 <prvSampleTimeNow+0xa4>)
	while (listLIST_IS_EMPTY(pxCurrentTimerList) == pdFALSE) {
    521a:	686b      	ldr	r3, [r5, #4]
    521c:	681a      	ldr	r2, [r3, #0]
    521e:	b1c2      	cbz	r2, 5252 <prvSampleTimeNow+0x86>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    5220:	68db      	ldr	r3, [r3, #12]
    5222:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    5226:	68dc      	ldr	r4, [r3, #12]
		(void)uxListRemove(&(pxTimer->xTimerListItem));
    5228:	f104 0904 	add.w	r9, r4, #4
    522c:	4648      	mov	r0, r9
    522e:	47b0      	blx	r6
		pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    5230:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5232:	4620      	mov	r0, r4
    5234:	4798      	blx	r3
		if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    5236:	69e3      	ldr	r3, [r4, #28]
    5238:	2b01      	cmp	r3, #1
    523a:	d1ee      	bne.n	521a <prvSampleTimeNow+0x4e>
			xReloadTime = (xNextExpireTime + pxTimer->xTimerPeriodInTicks);
    523c:	69a3      	ldr	r3, [r4, #24]
    523e:	4453      	add	r3, sl
			if (xReloadTime > xNextExpireTime) {
    5240:	459a      	cmp	sl, r3
    5242:	d2d7      	bcs.n	51f4 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE(&(pxTimer->xTimerListItem), xReloadTime);
    5244:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER(&(pxTimer->xTimerListItem), pxTimer);
    5246:	6124      	str	r4, [r4, #16]
				vListInsert(pxCurrentTimerList, &(pxTimer->xTimerListItem));
    5248:	4649      	mov	r1, r9
    524a:	6868      	ldr	r0, [r5, #4]
    524c:	4b09      	ldr	r3, [pc, #36]	; (5274 <prvSampleTimeNow+0xa8>)
    524e:	4798      	blx	r3
    5250:	e7e3      	b.n	521a <prvSampleTimeNow+0x4e>
	pxCurrentTimerList  = pxOverflowTimerList;
    5252:	4a05      	ldr	r2, [pc, #20]	; (5268 <prvSampleTimeNow+0x9c>)
    5254:	6811      	ldr	r1, [r2, #0]
    5256:	6051      	str	r1, [r2, #4]
	pxOverflowTimerList = pxTemp;
    5258:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
    525a:	2301      	movs	r3, #1
    525c:	f8c8 3000 	str.w	r3, [r8]
    5260:	e7c2      	b.n	51e8 <prvSampleTimeNow+0x1c>
    5262:	bf00      	nop
    5264:	000046b5 	.word	0x000046b5
    5268:	20002a4c 	.word	0x20002a4c
    526c:	00005161 	.word	0x00005161
    5270:	0000358d 	.word	0x0000358d
    5274:	00003559 	.word	0x00003559

00005278 <prvTimerTask>:
{
    5278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    527c:	b086      	sub	sp, #24
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    527e:	4c65      	ldr	r4, [pc, #404]	; (5414 <prvTimerTask+0x19c>)
			(void)xTaskResumeAll();
    5280:	4f65      	ldr	r7, [pc, #404]	; (5418 <prvTimerTask+0x1a0>)
					portYIELD_WITHIN_API();
    5282:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 5438 <prvTimerTask+0x1c0>
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    5286:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 543c <prvTimerTask+0x1c4>
	*pxListWasEmpty = listLIST_IS_EMPTY(pxCurrentTimerList);
    528a:	6863      	ldr	r3, [r4, #4]
    528c:	681a      	ldr	r2, [r3, #0]
	if (*pxListWasEmpty == pdFALSE) {
    528e:	b172      	cbz	r2, 52ae <prvTimerTask+0x36>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY(pxCurrentTimerList);
    5290:	68db      	ldr	r3, [r3, #12]
    5292:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
    5294:	4b61      	ldr	r3, [pc, #388]	; (541c <prvTimerTask+0x1a4>)
    5296:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    5298:	a803      	add	r0, sp, #12
    529a:	4b61      	ldr	r3, [pc, #388]	; (5420 <prvTimerTask+0x1a8>)
    529c:	4798      	blx	r3
    529e:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    52a0:	9b03      	ldr	r3, [sp, #12]
    52a2:	2b00      	cmp	r3, #0
    52a4:	d179      	bne.n	539a <prvTimerTask+0x122>
			if ((xListWasEmpty == pdFALSE) && (xNextExpireTime <= xTimeNow)) {
    52a6:	42a8      	cmp	r0, r5
    52a8:	d24a      	bcs.n	5340 <prvTimerTask+0xc8>
    52aa:	2200      	movs	r2, #0
    52ac:	e00e      	b.n	52cc <prvTimerTask+0x54>
	vTaskSuspendAll();
    52ae:	4b5b      	ldr	r3, [pc, #364]	; (541c <prvTimerTask+0x1a4>)
    52b0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    52b2:	a803      	add	r0, sp, #12
    52b4:	4b5a      	ldr	r3, [pc, #360]	; (5420 <prvTimerTask+0x1a8>)
    52b6:	4798      	blx	r3
    52b8:	4606      	mov	r6, r0
		if (xTimerListsWereSwitched == pdFALSE) {
    52ba:	9b03      	ldr	r3, [sp, #12]
    52bc:	2b00      	cmp	r3, #0
    52be:	d16c      	bne.n	539a <prvTimerTask+0x122>
					xListWasEmpty = listLIST_IS_EMPTY(pxOverflowTimerList);
    52c0:	6823      	ldr	r3, [r4, #0]
    52c2:	681a      	ldr	r2, [r3, #0]
    52c4:	fab2 f282 	clz	r2, r2
    52c8:	0952      	lsrs	r2, r2, #5
    52ca:	2500      	movs	r5, #0
				vQueueWaitForMessageRestricted(xTimerQueue, (xNextExpireTime - xTimeNow), xListWasEmpty);
    52cc:	1ba9      	subs	r1, r5, r6
    52ce:	68a0      	ldr	r0, [r4, #8]
    52d0:	4b54      	ldr	r3, [pc, #336]	; (5424 <prvTimerTask+0x1ac>)
    52d2:	4798      	blx	r3
				if (xTaskResumeAll() == pdFALSE) {
    52d4:	47b8      	blx	r7
    52d6:	b938      	cbnz	r0, 52e8 <prvTimerTask+0x70>
					portYIELD_WITHIN_API();
    52d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    52dc:	f8c9 3000 	str.w	r3, [r9]
    52e0:	f3bf 8f4f 	dsb	sy
    52e4:	f3bf 8f6f 	isb	sy
	while (xQueueReceive(xTimerQueue, &xMessage, tmrNO_DELAY)
    52e8:	4d4f      	ldr	r5, [pc, #316]	; (5428 <prvTimerTask+0x1b0>)
    52ea:	2200      	movs	r2, #0
    52ec:	a903      	add	r1, sp, #12
    52ee:	68a0      	ldr	r0, [r4, #8]
    52f0:	47a8      	blx	r5
    52f2:	2800      	cmp	r0, #0
    52f4:	d0c9      	beq.n	528a <prvTimerTask+0x12>
		if (xMessage.xMessageID >= (BaseType_t)0) {
    52f6:	9b03      	ldr	r3, [sp, #12]
    52f8:	2b00      	cmp	r3, #0
    52fa:	dbf6      	blt.n	52ea <prvTimerTask+0x72>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    52fc:	9e05      	ldr	r6, [sp, #20]
			if (listIS_CONTAINED_WITHIN(NULL, &(pxTimer->xTimerListItem))
    52fe:	6973      	ldr	r3, [r6, #20]
    5300:	b10b      	cbz	r3, 5306 <prvTimerTask+0x8e>
				(void)uxListRemove(&(pxTimer->xTimerListItem));
    5302:	1d30      	adds	r0, r6, #4
    5304:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow(&xTimerListsWereSwitched);
    5306:	a802      	add	r0, sp, #8
    5308:	4b45      	ldr	r3, [pc, #276]	; (5420 <prvTimerTask+0x1a8>)
    530a:	4798      	blx	r3
			switch (xMessage.xMessageID) {
    530c:	9b03      	ldr	r3, [sp, #12]
    530e:	2b09      	cmp	r3, #9
    5310:	d8eb      	bhi.n	52ea <prvTimerTask+0x72>
    5312:	a201      	add	r2, pc, #4	; (adr r2, 5318 <prvTimerTask+0xa0>)
    5314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5318:	0000539f 	.word	0x0000539f
    531c:	0000539f 	.word	0x0000539f
    5320:	0000539f 	.word	0x0000539f
    5324:	000052eb 	.word	0x000052eb
    5328:	000053e7 	.word	0x000053e7
    532c:	0000540d 	.word	0x0000540d
    5330:	0000539f 	.word	0x0000539f
    5334:	0000539f 	.word	0x0000539f
    5338:	000052eb 	.word	0x000052eb
    533c:	000053e7 	.word	0x000053e7
				(void)xTaskResumeAll();
    5340:	47b8      	blx	r7
	Timer_t *const pxTimer = (Timer_t *)listGET_OWNER_OF_HEAD_ENTRY(pxCurrentTimerList);
    5342:	6863      	ldr	r3, [r4, #4]
    5344:	68db      	ldr	r3, [r3, #12]
    5346:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	(void)uxListRemove(&(pxTimer->xTimerListItem));
    534a:	f10a 0004 	add.w	r0, sl, #4
    534e:	47c0      	blx	r8
	if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    5350:	f8da 301c 	ldr.w	r3, [sl, #28]
    5354:	2b01      	cmp	r3, #1
    5356:	d004      	beq.n	5362 <prvTimerTask+0xea>
	pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    5358:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
    535c:	4650      	mov	r0, sl
    535e:	4798      	blx	r3
    5360:	e7c2      	b.n	52e8 <prvTimerTask+0x70>
		if (prvInsertTimerInActiveList(
    5362:	f8da 1018 	ldr.w	r1, [sl, #24]
    5366:	462b      	mov	r3, r5
    5368:	4632      	mov	r2, r6
    536a:	4429      	add	r1, r5
    536c:	4650      	mov	r0, sl
    536e:	4e2f      	ldr	r6, [pc, #188]	; (542c <prvTimerTask+0x1b4>)
    5370:	47b0      	blx	r6
    5372:	2800      	cmp	r0, #0
    5374:	d0f0      	beq.n	5358 <prvTimerTask+0xe0>
			xResult = xTimerGenericCommand(pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY);
    5376:	2100      	movs	r1, #0
    5378:	9100      	str	r1, [sp, #0]
    537a:	460b      	mov	r3, r1
    537c:	462a      	mov	r2, r5
    537e:	4650      	mov	r0, sl
    5380:	4d2b      	ldr	r5, [pc, #172]	; (5430 <prvTimerTask+0x1b8>)
    5382:	47a8      	blx	r5
			configASSERT(xResult);
    5384:	2800      	cmp	r0, #0
    5386:	d1e7      	bne.n	5358 <prvTimerTask+0xe0>
    5388:	f04f 0380 	mov.w	r3, #128	; 0x80
    538c:	f383 8811 	msr	BASEPRI, r3
    5390:	f3bf 8f6f 	isb	sy
    5394:	f3bf 8f4f 	dsb	sy
    5398:	e7fe      	b.n	5398 <prvTimerTask+0x120>
			(void)xTaskResumeAll();
    539a:	47b8      	blx	r7
    539c:	e7a4      	b.n	52e8 <prvTimerTask+0x70>
				                               xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks,
    539e:	9d04      	ldr	r5, [sp, #16]
				if (prvInsertTimerInActiveList(pxTimer,
    53a0:	69b1      	ldr	r1, [r6, #24]
    53a2:	462b      	mov	r3, r5
    53a4:	4602      	mov	r2, r0
    53a6:	4429      	add	r1, r5
    53a8:	4630      	mov	r0, r6
    53aa:	4d20      	ldr	r5, [pc, #128]	; (542c <prvTimerTask+0x1b4>)
    53ac:	47a8      	blx	r5
    53ae:	2800      	cmp	r0, #0
    53b0:	d09a      	beq.n	52e8 <prvTimerTask+0x70>
					pxTimer->pxCallbackFunction((TimerHandle_t)pxTimer);
    53b2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    53b4:	4630      	mov	r0, r6
    53b6:	4798      	blx	r3
					if (pxTimer->uxAutoReload == (UBaseType_t)pdTRUE) {
    53b8:	69f3      	ldr	r3, [r6, #28]
    53ba:	2b01      	cmp	r3, #1
    53bc:	d194      	bne.n	52e8 <prvTimerTask+0x70>
						xResult = xTimerGenericCommand(pxTimer,
    53be:	69b2      	ldr	r2, [r6, #24]
    53c0:	2100      	movs	r1, #0
    53c2:	9100      	str	r1, [sp, #0]
    53c4:	460b      	mov	r3, r1
    53c6:	9804      	ldr	r0, [sp, #16]
    53c8:	4402      	add	r2, r0
    53ca:	4630      	mov	r0, r6
    53cc:	4d18      	ldr	r5, [pc, #96]	; (5430 <prvTimerTask+0x1b8>)
    53ce:	47a8      	blx	r5
						configASSERT(xResult);
    53d0:	2800      	cmp	r0, #0
    53d2:	d189      	bne.n	52e8 <prvTimerTask+0x70>
    53d4:	f04f 0380 	mov.w	r3, #128	; 0x80
    53d8:	f383 8811 	msr	BASEPRI, r3
    53dc:	f3bf 8f6f 	isb	sy
    53e0:	f3bf 8f4f 	dsb	sy
    53e4:	e7fe      	b.n	53e4 <prvTimerTask+0x16c>
				pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    53e6:	9904      	ldr	r1, [sp, #16]
    53e8:	61b1      	str	r1, [r6, #24]
				configASSERT((pxTimer->xTimerPeriodInTicks > 0));
    53ea:	b131      	cbz	r1, 53fa <prvTimerTask+0x182>
				(void)prvInsertTimerInActiveList(
    53ec:	4603      	mov	r3, r0
    53ee:	4602      	mov	r2, r0
    53f0:	4401      	add	r1, r0
    53f2:	4630      	mov	r0, r6
    53f4:	4d0d      	ldr	r5, [pc, #52]	; (542c <prvTimerTask+0x1b4>)
    53f6:	47a8      	blx	r5
    53f8:	e776      	b.n	52e8 <prvTimerTask+0x70>
    53fa:	f04f 0380 	mov.w	r3, #128	; 0x80
    53fe:	f383 8811 	msr	BASEPRI, r3
    5402:	f3bf 8f6f 	isb	sy
    5406:	f3bf 8f4f 	dsb	sy
    540a:	e7fe      	b.n	540a <prvTimerTask+0x192>
				vPortFree(pxTimer);
    540c:	4630      	mov	r0, r6
    540e:	4b09      	ldr	r3, [pc, #36]	; (5434 <prvTimerTask+0x1bc>)
    5410:	4798      	blx	r3
    5412:	e769      	b.n	52e8 <prvTimerTask+0x70>
    5414:	20002a4c 	.word	0x20002a4c
    5418:	000047e9 	.word	0x000047e9
    541c:	000046a1 	.word	0x000046a1
    5420:	000051cd 	.word	0x000051cd
    5424:	0000430d 	.word	0x0000430d
    5428:	00003f75 	.word	0x00003f75
    542c:	00005079 	.word	0x00005079
    5430:	00005161 	.word	0x00005161
    5434:	0000399d 	.word	0x0000399d
    5438:	e000ed04 	.word	0xe000ed04
    543c:	0000358d 	.word	0x0000358d

00005440 <__libc_init_array>:
    5440:	b570      	push	{r4, r5, r6, lr}
    5442:	4e0d      	ldr	r6, [pc, #52]	; (5478 <__libc_init_array+0x38>)
    5444:	4c0d      	ldr	r4, [pc, #52]	; (547c <__libc_init_array+0x3c>)
    5446:	1ba4      	subs	r4, r4, r6
    5448:	10a4      	asrs	r4, r4, #2
    544a:	2500      	movs	r5, #0
    544c:	42a5      	cmp	r5, r4
    544e:	d109      	bne.n	5464 <__libc_init_array+0x24>
    5450:	4e0b      	ldr	r6, [pc, #44]	; (5480 <__libc_init_array+0x40>)
    5452:	4c0c      	ldr	r4, [pc, #48]	; (5484 <__libc_init_array+0x44>)
    5454:	f001 fe92 	bl	717c <_init>
    5458:	1ba4      	subs	r4, r4, r6
    545a:	10a4      	asrs	r4, r4, #2
    545c:	2500      	movs	r5, #0
    545e:	42a5      	cmp	r5, r4
    5460:	d105      	bne.n	546e <__libc_init_array+0x2e>
    5462:	bd70      	pop	{r4, r5, r6, pc}
    5464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5468:	4798      	blx	r3
    546a:	3501      	adds	r5, #1
    546c:	e7ee      	b.n	544c <__libc_init_array+0xc>
    546e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5472:	4798      	blx	r3
    5474:	3501      	adds	r5, #1
    5476:	e7f2      	b.n	545e <__libc_init_array+0x1e>
    5478:	00007188 	.word	0x00007188
    547c:	00007188 	.word	0x00007188
    5480:	00007188 	.word	0x00007188
    5484:	0000718c 	.word	0x0000718c

00005488 <memcmp>:
    5488:	b510      	push	{r4, lr}
    548a:	3901      	subs	r1, #1
    548c:	4402      	add	r2, r0
    548e:	4290      	cmp	r0, r2
    5490:	d101      	bne.n	5496 <memcmp+0xe>
    5492:	2000      	movs	r0, #0
    5494:	bd10      	pop	{r4, pc}
    5496:	f810 3b01 	ldrb.w	r3, [r0], #1
    549a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    549e:	42a3      	cmp	r3, r4
    54a0:	d0f5      	beq.n	548e <memcmp+0x6>
    54a2:	1b18      	subs	r0, r3, r4
    54a4:	bd10      	pop	{r4, pc}

000054a6 <memcpy>:
    54a6:	b510      	push	{r4, lr}
    54a8:	1e43      	subs	r3, r0, #1
    54aa:	440a      	add	r2, r1
    54ac:	4291      	cmp	r1, r2
    54ae:	d100      	bne.n	54b2 <memcpy+0xc>
    54b0:	bd10      	pop	{r4, pc}
    54b2:	f811 4b01 	ldrb.w	r4, [r1], #1
    54b6:	f803 4f01 	strb.w	r4, [r3, #1]!
    54ba:	e7f7      	b.n	54ac <memcpy+0x6>

000054bc <memmove>:
    54bc:	4288      	cmp	r0, r1
    54be:	b510      	push	{r4, lr}
    54c0:	eb01 0302 	add.w	r3, r1, r2
    54c4:	d803      	bhi.n	54ce <memmove+0x12>
    54c6:	1e42      	subs	r2, r0, #1
    54c8:	4299      	cmp	r1, r3
    54ca:	d10c      	bne.n	54e6 <memmove+0x2a>
    54cc:	bd10      	pop	{r4, pc}
    54ce:	4298      	cmp	r0, r3
    54d0:	d2f9      	bcs.n	54c6 <memmove+0xa>
    54d2:	1881      	adds	r1, r0, r2
    54d4:	1ad2      	subs	r2, r2, r3
    54d6:	42d3      	cmn	r3, r2
    54d8:	d100      	bne.n	54dc <memmove+0x20>
    54da:	bd10      	pop	{r4, pc}
    54dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    54e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
    54e4:	e7f7      	b.n	54d6 <memmove+0x1a>
    54e6:	f811 4b01 	ldrb.w	r4, [r1], #1
    54ea:	f802 4f01 	strb.w	r4, [r2, #1]!
    54ee:	e7eb      	b.n	54c8 <memmove+0xc>

000054f0 <memset>:
    54f0:	4402      	add	r2, r0
    54f2:	4603      	mov	r3, r0
    54f4:	4293      	cmp	r3, r2
    54f6:	d100      	bne.n	54fa <memset+0xa>
    54f8:	4770      	bx	lr
    54fa:	f803 1b01 	strb.w	r1, [r3], #1
    54fe:	e7f9      	b.n	54f4 <memset+0x4>

00005500 <_free_r>:
    5500:	b538      	push	{r3, r4, r5, lr}
    5502:	4605      	mov	r5, r0
    5504:	2900      	cmp	r1, #0
    5506:	d045      	beq.n	5594 <_free_r+0x94>
    5508:	f851 3c04 	ldr.w	r3, [r1, #-4]
    550c:	1f0c      	subs	r4, r1, #4
    550e:	2b00      	cmp	r3, #0
    5510:	bfb8      	it	lt
    5512:	18e4      	addlt	r4, r4, r3
    5514:	f000 f90b 	bl	572e <__malloc_lock>
    5518:	4a1f      	ldr	r2, [pc, #124]	; (5598 <_free_r+0x98>)
    551a:	6813      	ldr	r3, [r2, #0]
    551c:	4610      	mov	r0, r2
    551e:	b933      	cbnz	r3, 552e <_free_r+0x2e>
    5520:	6063      	str	r3, [r4, #4]
    5522:	6014      	str	r4, [r2, #0]
    5524:	4628      	mov	r0, r5
    5526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    552a:	f000 b901 	b.w	5730 <__malloc_unlock>
    552e:	42a3      	cmp	r3, r4
    5530:	d90c      	bls.n	554c <_free_r+0x4c>
    5532:	6821      	ldr	r1, [r4, #0]
    5534:	1862      	adds	r2, r4, r1
    5536:	4293      	cmp	r3, r2
    5538:	bf04      	itt	eq
    553a:	681a      	ldreq	r2, [r3, #0]
    553c:	685b      	ldreq	r3, [r3, #4]
    553e:	6063      	str	r3, [r4, #4]
    5540:	bf04      	itt	eq
    5542:	1852      	addeq	r2, r2, r1
    5544:	6022      	streq	r2, [r4, #0]
    5546:	6004      	str	r4, [r0, #0]
    5548:	e7ec      	b.n	5524 <_free_r+0x24>
    554a:	4613      	mov	r3, r2
    554c:	685a      	ldr	r2, [r3, #4]
    554e:	b10a      	cbz	r2, 5554 <_free_r+0x54>
    5550:	42a2      	cmp	r2, r4
    5552:	d9fa      	bls.n	554a <_free_r+0x4a>
    5554:	6819      	ldr	r1, [r3, #0]
    5556:	1858      	adds	r0, r3, r1
    5558:	42a0      	cmp	r0, r4
    555a:	d10b      	bne.n	5574 <_free_r+0x74>
    555c:	6820      	ldr	r0, [r4, #0]
    555e:	4401      	add	r1, r0
    5560:	1858      	adds	r0, r3, r1
    5562:	4282      	cmp	r2, r0
    5564:	6019      	str	r1, [r3, #0]
    5566:	d1dd      	bne.n	5524 <_free_r+0x24>
    5568:	6810      	ldr	r0, [r2, #0]
    556a:	6852      	ldr	r2, [r2, #4]
    556c:	605a      	str	r2, [r3, #4]
    556e:	4401      	add	r1, r0
    5570:	6019      	str	r1, [r3, #0]
    5572:	e7d7      	b.n	5524 <_free_r+0x24>
    5574:	d902      	bls.n	557c <_free_r+0x7c>
    5576:	230c      	movs	r3, #12
    5578:	602b      	str	r3, [r5, #0]
    557a:	e7d3      	b.n	5524 <_free_r+0x24>
    557c:	6820      	ldr	r0, [r4, #0]
    557e:	1821      	adds	r1, r4, r0
    5580:	428a      	cmp	r2, r1
    5582:	bf04      	itt	eq
    5584:	6811      	ldreq	r1, [r2, #0]
    5586:	6852      	ldreq	r2, [r2, #4]
    5588:	6062      	str	r2, [r4, #4]
    558a:	bf04      	itt	eq
    558c:	1809      	addeq	r1, r1, r0
    558e:	6021      	streq	r1, [r4, #0]
    5590:	605c      	str	r4, [r3, #4]
    5592:	e7c7      	b.n	5524 <_free_r+0x24>
    5594:	bd38      	pop	{r3, r4, r5, pc}
    5596:	bf00      	nop
    5598:	20002a88 	.word	0x20002a88

0000559c <_malloc_r>:
    559c:	b570      	push	{r4, r5, r6, lr}
    559e:	1ccd      	adds	r5, r1, #3
    55a0:	f025 0503 	bic.w	r5, r5, #3
    55a4:	3508      	adds	r5, #8
    55a6:	2d0c      	cmp	r5, #12
    55a8:	bf38      	it	cc
    55aa:	250c      	movcc	r5, #12
    55ac:	2d00      	cmp	r5, #0
    55ae:	4606      	mov	r6, r0
    55b0:	db01      	blt.n	55b6 <_malloc_r+0x1a>
    55b2:	42a9      	cmp	r1, r5
    55b4:	d903      	bls.n	55be <_malloc_r+0x22>
    55b6:	230c      	movs	r3, #12
    55b8:	6033      	str	r3, [r6, #0]
    55ba:	2000      	movs	r0, #0
    55bc:	bd70      	pop	{r4, r5, r6, pc}
    55be:	f000 f8b6 	bl	572e <__malloc_lock>
    55c2:	4a23      	ldr	r2, [pc, #140]	; (5650 <_malloc_r+0xb4>)
    55c4:	6814      	ldr	r4, [r2, #0]
    55c6:	4621      	mov	r1, r4
    55c8:	b991      	cbnz	r1, 55f0 <_malloc_r+0x54>
    55ca:	4c22      	ldr	r4, [pc, #136]	; (5654 <_malloc_r+0xb8>)
    55cc:	6823      	ldr	r3, [r4, #0]
    55ce:	b91b      	cbnz	r3, 55d8 <_malloc_r+0x3c>
    55d0:	4630      	mov	r0, r6
    55d2:	f000 f841 	bl	5658 <_sbrk_r>
    55d6:	6020      	str	r0, [r4, #0]
    55d8:	4629      	mov	r1, r5
    55da:	4630      	mov	r0, r6
    55dc:	f000 f83c 	bl	5658 <_sbrk_r>
    55e0:	1c43      	adds	r3, r0, #1
    55e2:	d126      	bne.n	5632 <_malloc_r+0x96>
    55e4:	230c      	movs	r3, #12
    55e6:	6033      	str	r3, [r6, #0]
    55e8:	4630      	mov	r0, r6
    55ea:	f000 f8a1 	bl	5730 <__malloc_unlock>
    55ee:	e7e4      	b.n	55ba <_malloc_r+0x1e>
    55f0:	680b      	ldr	r3, [r1, #0]
    55f2:	1b5b      	subs	r3, r3, r5
    55f4:	d41a      	bmi.n	562c <_malloc_r+0x90>
    55f6:	2b0b      	cmp	r3, #11
    55f8:	d90f      	bls.n	561a <_malloc_r+0x7e>
    55fa:	600b      	str	r3, [r1, #0]
    55fc:	50cd      	str	r5, [r1, r3]
    55fe:	18cc      	adds	r4, r1, r3
    5600:	4630      	mov	r0, r6
    5602:	f000 f895 	bl	5730 <__malloc_unlock>
    5606:	f104 000b 	add.w	r0, r4, #11
    560a:	1d23      	adds	r3, r4, #4
    560c:	f020 0007 	bic.w	r0, r0, #7
    5610:	1ac3      	subs	r3, r0, r3
    5612:	d01b      	beq.n	564c <_malloc_r+0xb0>
    5614:	425a      	negs	r2, r3
    5616:	50e2      	str	r2, [r4, r3]
    5618:	bd70      	pop	{r4, r5, r6, pc}
    561a:	428c      	cmp	r4, r1
    561c:	bf0d      	iteet	eq
    561e:	6863      	ldreq	r3, [r4, #4]
    5620:	684b      	ldrne	r3, [r1, #4]
    5622:	6063      	strne	r3, [r4, #4]
    5624:	6013      	streq	r3, [r2, #0]
    5626:	bf18      	it	ne
    5628:	460c      	movne	r4, r1
    562a:	e7e9      	b.n	5600 <_malloc_r+0x64>
    562c:	460c      	mov	r4, r1
    562e:	6849      	ldr	r1, [r1, #4]
    5630:	e7ca      	b.n	55c8 <_malloc_r+0x2c>
    5632:	1cc4      	adds	r4, r0, #3
    5634:	f024 0403 	bic.w	r4, r4, #3
    5638:	42a0      	cmp	r0, r4
    563a:	d005      	beq.n	5648 <_malloc_r+0xac>
    563c:	1a21      	subs	r1, r4, r0
    563e:	4630      	mov	r0, r6
    5640:	f000 f80a 	bl	5658 <_sbrk_r>
    5644:	3001      	adds	r0, #1
    5646:	d0cd      	beq.n	55e4 <_malloc_r+0x48>
    5648:	6025      	str	r5, [r4, #0]
    564a:	e7d9      	b.n	5600 <_malloc_r+0x64>
    564c:	bd70      	pop	{r4, r5, r6, pc}
    564e:	bf00      	nop
    5650:	20002a88 	.word	0x20002a88
    5654:	20002a8c 	.word	0x20002a8c

00005658 <_sbrk_r>:
    5658:	b538      	push	{r3, r4, r5, lr}
    565a:	4c06      	ldr	r4, [pc, #24]	; (5674 <_sbrk_r+0x1c>)
    565c:	2300      	movs	r3, #0
    565e:	4605      	mov	r5, r0
    5660:	4608      	mov	r0, r1
    5662:	6023      	str	r3, [r4, #0]
    5664:	f7fc fc40 	bl	1ee8 <_sbrk>
    5668:	1c43      	adds	r3, r0, #1
    566a:	d102      	bne.n	5672 <_sbrk_r+0x1a>
    566c:	6823      	ldr	r3, [r4, #0]
    566e:	b103      	cbz	r3, 5672 <_sbrk_r+0x1a>
    5670:	602b      	str	r3, [r5, #0]
    5672:	bd38      	pop	{r3, r4, r5, pc}
    5674:	200034a0 	.word	0x200034a0

00005678 <siprintf>:
    5678:	b40e      	push	{r1, r2, r3}
    567a:	b500      	push	{lr}
    567c:	b09c      	sub	sp, #112	; 0x70
    567e:	f44f 7102 	mov.w	r1, #520	; 0x208
    5682:	ab1d      	add	r3, sp, #116	; 0x74
    5684:	f8ad 1014 	strh.w	r1, [sp, #20]
    5688:	9002      	str	r0, [sp, #8]
    568a:	9006      	str	r0, [sp, #24]
    568c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    5690:	480a      	ldr	r0, [pc, #40]	; (56bc <siprintf+0x44>)
    5692:	9104      	str	r1, [sp, #16]
    5694:	9107      	str	r1, [sp, #28]
    5696:	f64f 71ff 	movw	r1, #65535	; 0xffff
    569a:	f853 2b04 	ldr.w	r2, [r3], #4
    569e:	f8ad 1016 	strh.w	r1, [sp, #22]
    56a2:	6800      	ldr	r0, [r0, #0]
    56a4:	9301      	str	r3, [sp, #4]
    56a6:	a902      	add	r1, sp, #8
    56a8:	f000 f89e 	bl	57e8 <_svfiprintf_r>
    56ac:	9b02      	ldr	r3, [sp, #8]
    56ae:	2200      	movs	r2, #0
    56b0:	701a      	strb	r2, [r3, #0]
    56b2:	b01c      	add	sp, #112	; 0x70
    56b4:	f85d eb04 	ldr.w	lr, [sp], #4
    56b8:	b003      	add	sp, #12
    56ba:	4770      	bx	lr
    56bc:	20000128 	.word	0x20000128

000056c0 <strcpy>:
    56c0:	4603      	mov	r3, r0
    56c2:	f811 2b01 	ldrb.w	r2, [r1], #1
    56c6:	f803 2b01 	strb.w	r2, [r3], #1
    56ca:	2a00      	cmp	r2, #0
    56cc:	d1f9      	bne.n	56c2 <strcpy+0x2>
    56ce:	4770      	bx	lr

000056d0 <strlen>:
    56d0:	4603      	mov	r3, r0
    56d2:	f813 2b01 	ldrb.w	r2, [r3], #1
    56d6:	2a00      	cmp	r2, #0
    56d8:	d1fb      	bne.n	56d2 <strlen+0x2>
    56da:	1a18      	subs	r0, r3, r0
    56dc:	3801      	subs	r0, #1
    56de:	4770      	bx	lr

000056e0 <strncmp>:
    56e0:	b510      	push	{r4, lr}
    56e2:	b16a      	cbz	r2, 5700 <strncmp+0x20>
    56e4:	3901      	subs	r1, #1
    56e6:	1884      	adds	r4, r0, r2
    56e8:	f810 3b01 	ldrb.w	r3, [r0], #1
    56ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    56f0:	4293      	cmp	r3, r2
    56f2:	d103      	bne.n	56fc <strncmp+0x1c>
    56f4:	42a0      	cmp	r0, r4
    56f6:	d001      	beq.n	56fc <strncmp+0x1c>
    56f8:	2b00      	cmp	r3, #0
    56fa:	d1f5      	bne.n	56e8 <strncmp+0x8>
    56fc:	1a98      	subs	r0, r3, r2
    56fe:	bd10      	pop	{r4, pc}
    5700:	4610      	mov	r0, r2
    5702:	bd10      	pop	{r4, pc}

00005704 <strncpy>:
    5704:	b570      	push	{r4, r5, r6, lr}
    5706:	4604      	mov	r4, r0
    5708:	b902      	cbnz	r2, 570c <strncpy+0x8>
    570a:	bd70      	pop	{r4, r5, r6, pc}
    570c:	4623      	mov	r3, r4
    570e:	f811 5b01 	ldrb.w	r5, [r1], #1
    5712:	f803 5b01 	strb.w	r5, [r3], #1
    5716:	1e56      	subs	r6, r2, #1
    5718:	b91d      	cbnz	r5, 5722 <strncpy+0x1e>
    571a:	4414      	add	r4, r2
    571c:	42a3      	cmp	r3, r4
    571e:	d103      	bne.n	5728 <strncpy+0x24>
    5720:	bd70      	pop	{r4, r5, r6, pc}
    5722:	461c      	mov	r4, r3
    5724:	4632      	mov	r2, r6
    5726:	e7ef      	b.n	5708 <strncpy+0x4>
    5728:	f803 5b01 	strb.w	r5, [r3], #1
    572c:	e7f6      	b.n	571c <strncpy+0x18>

0000572e <__malloc_lock>:
    572e:	4770      	bx	lr

00005730 <__malloc_unlock>:
    5730:	4770      	bx	lr

00005732 <__ssputs_r>:
    5732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5736:	688e      	ldr	r6, [r1, #8]
    5738:	429e      	cmp	r6, r3
    573a:	4682      	mov	sl, r0
    573c:	460c      	mov	r4, r1
    573e:	4691      	mov	r9, r2
    5740:	4698      	mov	r8, r3
    5742:	d835      	bhi.n	57b0 <__ssputs_r+0x7e>
    5744:	898a      	ldrh	r2, [r1, #12]
    5746:	f412 6f90 	tst.w	r2, #1152	; 0x480
    574a:	d031      	beq.n	57b0 <__ssputs_r+0x7e>
    574c:	6825      	ldr	r5, [r4, #0]
    574e:	6909      	ldr	r1, [r1, #16]
    5750:	1a6f      	subs	r7, r5, r1
    5752:	6965      	ldr	r5, [r4, #20]
    5754:	2302      	movs	r3, #2
    5756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    575a:	fb95 f5f3 	sdiv	r5, r5, r3
    575e:	f108 0301 	add.w	r3, r8, #1
    5762:	443b      	add	r3, r7
    5764:	429d      	cmp	r5, r3
    5766:	bf38      	it	cc
    5768:	461d      	movcc	r5, r3
    576a:	0553      	lsls	r3, r2, #21
    576c:	d531      	bpl.n	57d2 <__ssputs_r+0xa0>
    576e:	4629      	mov	r1, r5
    5770:	f7ff ff14 	bl	559c <_malloc_r>
    5774:	4606      	mov	r6, r0
    5776:	b950      	cbnz	r0, 578e <__ssputs_r+0x5c>
    5778:	230c      	movs	r3, #12
    577a:	f8ca 3000 	str.w	r3, [sl]
    577e:	89a3      	ldrh	r3, [r4, #12]
    5780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5784:	81a3      	strh	r3, [r4, #12]
    5786:	f04f 30ff 	mov.w	r0, #4294967295
    578a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    578e:	463a      	mov	r2, r7
    5790:	6921      	ldr	r1, [r4, #16]
    5792:	f7ff fe88 	bl	54a6 <memcpy>
    5796:	89a3      	ldrh	r3, [r4, #12]
    5798:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
    579c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    57a0:	81a3      	strh	r3, [r4, #12]
    57a2:	6126      	str	r6, [r4, #16]
    57a4:	6165      	str	r5, [r4, #20]
    57a6:	443e      	add	r6, r7
    57a8:	1bed      	subs	r5, r5, r7
    57aa:	6026      	str	r6, [r4, #0]
    57ac:	60a5      	str	r5, [r4, #8]
    57ae:	4646      	mov	r6, r8
    57b0:	4546      	cmp	r6, r8
    57b2:	bf28      	it	cs
    57b4:	4646      	movcs	r6, r8
    57b6:	4632      	mov	r2, r6
    57b8:	4649      	mov	r1, r9
    57ba:	6820      	ldr	r0, [r4, #0]
    57bc:	f7ff fe7e 	bl	54bc <memmove>
    57c0:	68a3      	ldr	r3, [r4, #8]
    57c2:	1b9b      	subs	r3, r3, r6
    57c4:	60a3      	str	r3, [r4, #8]
    57c6:	6823      	ldr	r3, [r4, #0]
    57c8:	441e      	add	r6, r3
    57ca:	6026      	str	r6, [r4, #0]
    57cc:	2000      	movs	r0, #0
    57ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    57d2:	462a      	mov	r2, r5
    57d4:	f000 fae4 	bl	5da0 <_realloc_r>
    57d8:	4606      	mov	r6, r0
    57da:	2800      	cmp	r0, #0
    57dc:	d1e1      	bne.n	57a2 <__ssputs_r+0x70>
    57de:	6921      	ldr	r1, [r4, #16]
    57e0:	4650      	mov	r0, sl
    57e2:	f7ff fe8d 	bl	5500 <_free_r>
    57e6:	e7c7      	b.n	5778 <__ssputs_r+0x46>

000057e8 <_svfiprintf_r>:
    57e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57ec:	b09d      	sub	sp, #116	; 0x74
    57ee:	4680      	mov	r8, r0
    57f0:	9303      	str	r3, [sp, #12]
    57f2:	898b      	ldrh	r3, [r1, #12]
    57f4:	061c      	lsls	r4, r3, #24
    57f6:	460d      	mov	r5, r1
    57f8:	4616      	mov	r6, r2
    57fa:	d50f      	bpl.n	581c <_svfiprintf_r+0x34>
    57fc:	690b      	ldr	r3, [r1, #16]
    57fe:	b96b      	cbnz	r3, 581c <_svfiprintf_r+0x34>
    5800:	2140      	movs	r1, #64	; 0x40
    5802:	f7ff fecb 	bl	559c <_malloc_r>
    5806:	6028      	str	r0, [r5, #0]
    5808:	6128      	str	r0, [r5, #16]
    580a:	b928      	cbnz	r0, 5818 <_svfiprintf_r+0x30>
    580c:	230c      	movs	r3, #12
    580e:	f8c8 3000 	str.w	r3, [r8]
    5812:	f04f 30ff 	mov.w	r0, #4294967295
    5816:	e0c5      	b.n	59a4 <_svfiprintf_r+0x1bc>
    5818:	2340      	movs	r3, #64	; 0x40
    581a:	616b      	str	r3, [r5, #20]
    581c:	2300      	movs	r3, #0
    581e:	9309      	str	r3, [sp, #36]	; 0x24
    5820:	2320      	movs	r3, #32
    5822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    5826:	2330      	movs	r3, #48	; 0x30
    5828:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    582c:	f04f 0b01 	mov.w	fp, #1
    5830:	4637      	mov	r7, r6
    5832:	463c      	mov	r4, r7
    5834:	f814 3b01 	ldrb.w	r3, [r4], #1
    5838:	2b00      	cmp	r3, #0
    583a:	d13c      	bne.n	58b6 <_svfiprintf_r+0xce>
    583c:	ebb7 0a06 	subs.w	sl, r7, r6
    5840:	d00b      	beq.n	585a <_svfiprintf_r+0x72>
    5842:	4653      	mov	r3, sl
    5844:	4632      	mov	r2, r6
    5846:	4629      	mov	r1, r5
    5848:	4640      	mov	r0, r8
    584a:	f7ff ff72 	bl	5732 <__ssputs_r>
    584e:	3001      	adds	r0, #1
    5850:	f000 80a3 	beq.w	599a <_svfiprintf_r+0x1b2>
    5854:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5856:	4453      	add	r3, sl
    5858:	9309      	str	r3, [sp, #36]	; 0x24
    585a:	783b      	ldrb	r3, [r7, #0]
    585c:	2b00      	cmp	r3, #0
    585e:	f000 809c 	beq.w	599a <_svfiprintf_r+0x1b2>
    5862:	2300      	movs	r3, #0
    5864:	f04f 32ff 	mov.w	r2, #4294967295
    5868:	9304      	str	r3, [sp, #16]
    586a:	9307      	str	r3, [sp, #28]
    586c:	9205      	str	r2, [sp, #20]
    586e:	9306      	str	r3, [sp, #24]
    5870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
    5874:	931a      	str	r3, [sp, #104]	; 0x68
    5876:	2205      	movs	r2, #5
    5878:	7821      	ldrb	r1, [r4, #0]
    587a:	4850      	ldr	r0, [pc, #320]	; (59bc <_svfiprintf_r+0x1d4>)
    587c:	f000 fa40 	bl	5d00 <memchr>
    5880:	1c67      	adds	r7, r4, #1
    5882:	9b04      	ldr	r3, [sp, #16]
    5884:	b9d8      	cbnz	r0, 58be <_svfiprintf_r+0xd6>
    5886:	06d9      	lsls	r1, r3, #27
    5888:	bf44      	itt	mi
    588a:	2220      	movmi	r2, #32
    588c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    5890:	071a      	lsls	r2, r3, #28
    5892:	bf44      	itt	mi
    5894:	222b      	movmi	r2, #43	; 0x2b
    5896:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
    589a:	7822      	ldrb	r2, [r4, #0]
    589c:	2a2a      	cmp	r2, #42	; 0x2a
    589e:	d016      	beq.n	58ce <_svfiprintf_r+0xe6>
    58a0:	9a07      	ldr	r2, [sp, #28]
    58a2:	2100      	movs	r1, #0
    58a4:	200a      	movs	r0, #10
    58a6:	4627      	mov	r7, r4
    58a8:	3401      	adds	r4, #1
    58aa:	783b      	ldrb	r3, [r7, #0]
    58ac:	3b30      	subs	r3, #48	; 0x30
    58ae:	2b09      	cmp	r3, #9
    58b0:	d951      	bls.n	5956 <_svfiprintf_r+0x16e>
    58b2:	b1c9      	cbz	r1, 58e8 <_svfiprintf_r+0x100>
    58b4:	e011      	b.n	58da <_svfiprintf_r+0xf2>
    58b6:	2b25      	cmp	r3, #37	; 0x25
    58b8:	d0c0      	beq.n	583c <_svfiprintf_r+0x54>
    58ba:	4627      	mov	r7, r4
    58bc:	e7b9      	b.n	5832 <_svfiprintf_r+0x4a>
    58be:	4a3f      	ldr	r2, [pc, #252]	; (59bc <_svfiprintf_r+0x1d4>)
    58c0:	1a80      	subs	r0, r0, r2
    58c2:	fa0b f000 	lsl.w	r0, fp, r0
    58c6:	4318      	orrs	r0, r3
    58c8:	9004      	str	r0, [sp, #16]
    58ca:	463c      	mov	r4, r7
    58cc:	e7d3      	b.n	5876 <_svfiprintf_r+0x8e>
    58ce:	9a03      	ldr	r2, [sp, #12]
    58d0:	1d11      	adds	r1, r2, #4
    58d2:	6812      	ldr	r2, [r2, #0]
    58d4:	9103      	str	r1, [sp, #12]
    58d6:	2a00      	cmp	r2, #0
    58d8:	db01      	blt.n	58de <_svfiprintf_r+0xf6>
    58da:	9207      	str	r2, [sp, #28]
    58dc:	e004      	b.n	58e8 <_svfiprintf_r+0x100>
    58de:	4252      	negs	r2, r2
    58e0:	f043 0302 	orr.w	r3, r3, #2
    58e4:	9207      	str	r2, [sp, #28]
    58e6:	9304      	str	r3, [sp, #16]
    58e8:	783b      	ldrb	r3, [r7, #0]
    58ea:	2b2e      	cmp	r3, #46	; 0x2e
    58ec:	d10e      	bne.n	590c <_svfiprintf_r+0x124>
    58ee:	787b      	ldrb	r3, [r7, #1]
    58f0:	2b2a      	cmp	r3, #42	; 0x2a
    58f2:	f107 0101 	add.w	r1, r7, #1
    58f6:	d132      	bne.n	595e <_svfiprintf_r+0x176>
    58f8:	9b03      	ldr	r3, [sp, #12]
    58fa:	1d1a      	adds	r2, r3, #4
    58fc:	681b      	ldr	r3, [r3, #0]
    58fe:	9203      	str	r2, [sp, #12]
    5900:	2b00      	cmp	r3, #0
    5902:	bfb8      	it	lt
    5904:	f04f 33ff 	movlt.w	r3, #4294967295
    5908:	3702      	adds	r7, #2
    590a:	9305      	str	r3, [sp, #20]
    590c:	4c2c      	ldr	r4, [pc, #176]	; (59c0 <_svfiprintf_r+0x1d8>)
    590e:	7839      	ldrb	r1, [r7, #0]
    5910:	2203      	movs	r2, #3
    5912:	4620      	mov	r0, r4
    5914:	f000 f9f4 	bl	5d00 <memchr>
    5918:	b138      	cbz	r0, 592a <_svfiprintf_r+0x142>
    591a:	2340      	movs	r3, #64	; 0x40
    591c:	1b00      	subs	r0, r0, r4
    591e:	fa03 f000 	lsl.w	r0, r3, r0
    5922:	9b04      	ldr	r3, [sp, #16]
    5924:	4303      	orrs	r3, r0
    5926:	9304      	str	r3, [sp, #16]
    5928:	3701      	adds	r7, #1
    592a:	7839      	ldrb	r1, [r7, #0]
    592c:	4825      	ldr	r0, [pc, #148]	; (59c4 <_svfiprintf_r+0x1dc>)
    592e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    5932:	2206      	movs	r2, #6
    5934:	1c7e      	adds	r6, r7, #1
    5936:	f000 f9e3 	bl	5d00 <memchr>
    593a:	2800      	cmp	r0, #0
    593c:	d035      	beq.n	59aa <_svfiprintf_r+0x1c2>
    593e:	4b22      	ldr	r3, [pc, #136]	; (59c8 <_svfiprintf_r+0x1e0>)
    5940:	b9fb      	cbnz	r3, 5982 <_svfiprintf_r+0x19a>
    5942:	9b03      	ldr	r3, [sp, #12]
    5944:	3307      	adds	r3, #7
    5946:	f023 0307 	bic.w	r3, r3, #7
    594a:	3308      	adds	r3, #8
    594c:	9303      	str	r3, [sp, #12]
    594e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5950:	444b      	add	r3, r9
    5952:	9309      	str	r3, [sp, #36]	; 0x24
    5954:	e76c      	b.n	5830 <_svfiprintf_r+0x48>
    5956:	fb00 3202 	mla	r2, r0, r2, r3
    595a:	2101      	movs	r1, #1
    595c:	e7a3      	b.n	58a6 <_svfiprintf_r+0xbe>
    595e:	2300      	movs	r3, #0
    5960:	9305      	str	r3, [sp, #20]
    5962:	4618      	mov	r0, r3
    5964:	240a      	movs	r4, #10
    5966:	460f      	mov	r7, r1
    5968:	3101      	adds	r1, #1
    596a:	783a      	ldrb	r2, [r7, #0]
    596c:	3a30      	subs	r2, #48	; 0x30
    596e:	2a09      	cmp	r2, #9
    5970:	d903      	bls.n	597a <_svfiprintf_r+0x192>
    5972:	2b00      	cmp	r3, #0
    5974:	d0ca      	beq.n	590c <_svfiprintf_r+0x124>
    5976:	9005      	str	r0, [sp, #20]
    5978:	e7c8      	b.n	590c <_svfiprintf_r+0x124>
    597a:	fb04 2000 	mla	r0, r4, r0, r2
    597e:	2301      	movs	r3, #1
    5980:	e7f1      	b.n	5966 <_svfiprintf_r+0x17e>
    5982:	ab03      	add	r3, sp, #12
    5984:	9300      	str	r3, [sp, #0]
    5986:	462a      	mov	r2, r5
    5988:	4b10      	ldr	r3, [pc, #64]	; (59cc <_svfiprintf_r+0x1e4>)
    598a:	a904      	add	r1, sp, #16
    598c:	4640      	mov	r0, r8
    598e:	f3af 8000 	nop.w
    5992:	f1b0 3fff 	cmp.w	r0, #4294967295
    5996:	4681      	mov	r9, r0
    5998:	d1d9      	bne.n	594e <_svfiprintf_r+0x166>
    599a:	89ab      	ldrh	r3, [r5, #12]
    599c:	065b      	lsls	r3, r3, #25
    599e:	f53f af38 	bmi.w	5812 <_svfiprintf_r+0x2a>
    59a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    59a4:	b01d      	add	sp, #116	; 0x74
    59a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    59aa:	ab03      	add	r3, sp, #12
    59ac:	9300      	str	r3, [sp, #0]
    59ae:	462a      	mov	r2, r5
    59b0:	4b06      	ldr	r3, [pc, #24]	; (59cc <_svfiprintf_r+0x1e4>)
    59b2:	a904      	add	r1, sp, #16
    59b4:	4640      	mov	r0, r8
    59b6:	f000 f881 	bl	5abc <_printf_i>
    59ba:	e7ea      	b.n	5992 <_svfiprintf_r+0x1aa>
    59bc:	00007148 	.word	0x00007148
    59c0:	0000714e 	.word	0x0000714e
    59c4:	00007152 	.word	0x00007152
    59c8:	00000000 	.word	0x00000000
    59cc:	00005733 	.word	0x00005733

000059d0 <_printf_common>:
    59d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59d4:	4691      	mov	r9, r2
    59d6:	461f      	mov	r7, r3
    59d8:	688a      	ldr	r2, [r1, #8]
    59da:	690b      	ldr	r3, [r1, #16]
    59dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
    59e0:	4293      	cmp	r3, r2
    59e2:	bfb8      	it	lt
    59e4:	4613      	movlt	r3, r2
    59e6:	f8c9 3000 	str.w	r3, [r9]
    59ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    59ee:	4606      	mov	r6, r0
    59f0:	460c      	mov	r4, r1
    59f2:	b112      	cbz	r2, 59fa <_printf_common+0x2a>
    59f4:	3301      	adds	r3, #1
    59f6:	f8c9 3000 	str.w	r3, [r9]
    59fa:	6823      	ldr	r3, [r4, #0]
    59fc:	0699      	lsls	r1, r3, #26
    59fe:	bf42      	ittt	mi
    5a00:	f8d9 3000 	ldrmi.w	r3, [r9]
    5a04:	3302      	addmi	r3, #2
    5a06:	f8c9 3000 	strmi.w	r3, [r9]
    5a0a:	6825      	ldr	r5, [r4, #0]
    5a0c:	f015 0506 	ands.w	r5, r5, #6
    5a10:	d107      	bne.n	5a22 <_printf_common+0x52>
    5a12:	f104 0a19 	add.w	sl, r4, #25
    5a16:	68e3      	ldr	r3, [r4, #12]
    5a18:	f8d9 2000 	ldr.w	r2, [r9]
    5a1c:	1a9b      	subs	r3, r3, r2
    5a1e:	429d      	cmp	r5, r3
    5a20:	db29      	blt.n	5a76 <_printf_common+0xa6>
    5a22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
    5a26:	6822      	ldr	r2, [r4, #0]
    5a28:	3300      	adds	r3, #0
    5a2a:	bf18      	it	ne
    5a2c:	2301      	movne	r3, #1
    5a2e:	0692      	lsls	r2, r2, #26
    5a30:	d42e      	bmi.n	5a90 <_printf_common+0xc0>
    5a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
    5a36:	4639      	mov	r1, r7
    5a38:	4630      	mov	r0, r6
    5a3a:	47c0      	blx	r8
    5a3c:	3001      	adds	r0, #1
    5a3e:	d021      	beq.n	5a84 <_printf_common+0xb4>
    5a40:	6823      	ldr	r3, [r4, #0]
    5a42:	68e5      	ldr	r5, [r4, #12]
    5a44:	f8d9 2000 	ldr.w	r2, [r9]
    5a48:	f003 0306 	and.w	r3, r3, #6
    5a4c:	2b04      	cmp	r3, #4
    5a4e:	bf08      	it	eq
    5a50:	1aad      	subeq	r5, r5, r2
    5a52:	68a3      	ldr	r3, [r4, #8]
    5a54:	6922      	ldr	r2, [r4, #16]
    5a56:	bf0c      	ite	eq
    5a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
    5a5c:	2500      	movne	r5, #0
    5a5e:	4293      	cmp	r3, r2
    5a60:	bfc4      	itt	gt
    5a62:	1a9b      	subgt	r3, r3, r2
    5a64:	18ed      	addgt	r5, r5, r3
    5a66:	f04f 0900 	mov.w	r9, #0
    5a6a:	341a      	adds	r4, #26
    5a6c:	454d      	cmp	r5, r9
    5a6e:	d11b      	bne.n	5aa8 <_printf_common+0xd8>
    5a70:	2000      	movs	r0, #0
    5a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a76:	2301      	movs	r3, #1
    5a78:	4652      	mov	r2, sl
    5a7a:	4639      	mov	r1, r7
    5a7c:	4630      	mov	r0, r6
    5a7e:	47c0      	blx	r8
    5a80:	3001      	adds	r0, #1
    5a82:	d103      	bne.n	5a8c <_printf_common+0xbc>
    5a84:	f04f 30ff 	mov.w	r0, #4294967295
    5a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a8c:	3501      	adds	r5, #1
    5a8e:	e7c2      	b.n	5a16 <_printf_common+0x46>
    5a90:	18e1      	adds	r1, r4, r3
    5a92:	1c5a      	adds	r2, r3, #1
    5a94:	2030      	movs	r0, #48	; 0x30
    5a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    5a9a:	4422      	add	r2, r4
    5a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    5aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    5aa4:	3302      	adds	r3, #2
    5aa6:	e7c4      	b.n	5a32 <_printf_common+0x62>
    5aa8:	2301      	movs	r3, #1
    5aaa:	4622      	mov	r2, r4
    5aac:	4639      	mov	r1, r7
    5aae:	4630      	mov	r0, r6
    5ab0:	47c0      	blx	r8
    5ab2:	3001      	adds	r0, #1
    5ab4:	d0e6      	beq.n	5a84 <_printf_common+0xb4>
    5ab6:	f109 0901 	add.w	r9, r9, #1
    5aba:	e7d7      	b.n	5a6c <_printf_common+0x9c>

00005abc <_printf_i>:
    5abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ac0:	4617      	mov	r7, r2
    5ac2:	7e0a      	ldrb	r2, [r1, #24]
    5ac4:	b085      	sub	sp, #20
    5ac6:	2a6e      	cmp	r2, #110	; 0x6e
    5ac8:	4698      	mov	r8, r3
    5aca:	4606      	mov	r6, r0
    5acc:	460c      	mov	r4, r1
    5ace:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5ad0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
    5ad4:	f000 80bc 	beq.w	5c50 <_printf_i+0x194>
    5ad8:	d81a      	bhi.n	5b10 <_printf_i+0x54>
    5ada:	2a63      	cmp	r2, #99	; 0x63
    5adc:	d02e      	beq.n	5b3c <_printf_i+0x80>
    5ade:	d80a      	bhi.n	5af6 <_printf_i+0x3a>
    5ae0:	2a00      	cmp	r2, #0
    5ae2:	f000 80c8 	beq.w	5c76 <_printf_i+0x1ba>
    5ae6:	2a58      	cmp	r2, #88	; 0x58
    5ae8:	f000 808a 	beq.w	5c00 <_printf_i+0x144>
    5aec:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5af0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    5af4:	e02a      	b.n	5b4c <_printf_i+0x90>
    5af6:	2a64      	cmp	r2, #100	; 0x64
    5af8:	d001      	beq.n	5afe <_printf_i+0x42>
    5afa:	2a69      	cmp	r2, #105	; 0x69
    5afc:	d1f6      	bne.n	5aec <_printf_i+0x30>
    5afe:	6821      	ldr	r1, [r4, #0]
    5b00:	681a      	ldr	r2, [r3, #0]
    5b02:	f011 0f80 	tst.w	r1, #128	; 0x80
    5b06:	d023      	beq.n	5b50 <_printf_i+0x94>
    5b08:	1d11      	adds	r1, r2, #4
    5b0a:	6019      	str	r1, [r3, #0]
    5b0c:	6813      	ldr	r3, [r2, #0]
    5b0e:	e027      	b.n	5b60 <_printf_i+0xa4>
    5b10:	2a73      	cmp	r2, #115	; 0x73
    5b12:	f000 80b4 	beq.w	5c7e <_printf_i+0x1c2>
    5b16:	d808      	bhi.n	5b2a <_printf_i+0x6e>
    5b18:	2a6f      	cmp	r2, #111	; 0x6f
    5b1a:	d02a      	beq.n	5b72 <_printf_i+0xb6>
    5b1c:	2a70      	cmp	r2, #112	; 0x70
    5b1e:	d1e5      	bne.n	5aec <_printf_i+0x30>
    5b20:	680a      	ldr	r2, [r1, #0]
    5b22:	f042 0220 	orr.w	r2, r2, #32
    5b26:	600a      	str	r2, [r1, #0]
    5b28:	e003      	b.n	5b32 <_printf_i+0x76>
    5b2a:	2a75      	cmp	r2, #117	; 0x75
    5b2c:	d021      	beq.n	5b72 <_printf_i+0xb6>
    5b2e:	2a78      	cmp	r2, #120	; 0x78
    5b30:	d1dc      	bne.n	5aec <_printf_i+0x30>
    5b32:	2278      	movs	r2, #120	; 0x78
    5b34:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    5b38:	496e      	ldr	r1, [pc, #440]	; (5cf4 <_printf_i+0x238>)
    5b3a:	e064      	b.n	5c06 <_printf_i+0x14a>
    5b3c:	681a      	ldr	r2, [r3, #0]
    5b3e:	f101 0542 	add.w	r5, r1, #66	; 0x42
    5b42:	1d11      	adds	r1, r2, #4
    5b44:	6019      	str	r1, [r3, #0]
    5b46:	6813      	ldr	r3, [r2, #0]
    5b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5b4c:	2301      	movs	r3, #1
    5b4e:	e0a3      	b.n	5c98 <_printf_i+0x1dc>
    5b50:	f011 0f40 	tst.w	r1, #64	; 0x40
    5b54:	f102 0104 	add.w	r1, r2, #4
    5b58:	6019      	str	r1, [r3, #0]
    5b5a:	d0d7      	beq.n	5b0c <_printf_i+0x50>
    5b5c:	f9b2 3000 	ldrsh.w	r3, [r2]
    5b60:	2b00      	cmp	r3, #0
    5b62:	da03      	bge.n	5b6c <_printf_i+0xb0>
    5b64:	222d      	movs	r2, #45	; 0x2d
    5b66:	425b      	negs	r3, r3
    5b68:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
    5b6c:	4962      	ldr	r1, [pc, #392]	; (5cf8 <_printf_i+0x23c>)
    5b6e:	220a      	movs	r2, #10
    5b70:	e017      	b.n	5ba2 <_printf_i+0xe6>
    5b72:	6820      	ldr	r0, [r4, #0]
    5b74:	6819      	ldr	r1, [r3, #0]
    5b76:	f010 0f80 	tst.w	r0, #128	; 0x80
    5b7a:	d003      	beq.n	5b84 <_printf_i+0xc8>
    5b7c:	1d08      	adds	r0, r1, #4
    5b7e:	6018      	str	r0, [r3, #0]
    5b80:	680b      	ldr	r3, [r1, #0]
    5b82:	e006      	b.n	5b92 <_printf_i+0xd6>
    5b84:	f010 0f40 	tst.w	r0, #64	; 0x40
    5b88:	f101 0004 	add.w	r0, r1, #4
    5b8c:	6018      	str	r0, [r3, #0]
    5b8e:	d0f7      	beq.n	5b80 <_printf_i+0xc4>
    5b90:	880b      	ldrh	r3, [r1, #0]
    5b92:	4959      	ldr	r1, [pc, #356]	; (5cf8 <_printf_i+0x23c>)
    5b94:	2a6f      	cmp	r2, #111	; 0x6f
    5b96:	bf14      	ite	ne
    5b98:	220a      	movne	r2, #10
    5b9a:	2208      	moveq	r2, #8
    5b9c:	2000      	movs	r0, #0
    5b9e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    5ba2:	6865      	ldr	r5, [r4, #4]
    5ba4:	60a5      	str	r5, [r4, #8]
    5ba6:	2d00      	cmp	r5, #0
    5ba8:	f2c0 809c 	blt.w	5ce4 <_printf_i+0x228>
    5bac:	6820      	ldr	r0, [r4, #0]
    5bae:	f020 0004 	bic.w	r0, r0, #4
    5bb2:	6020      	str	r0, [r4, #0]
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d13f      	bne.n	5c38 <_printf_i+0x17c>
    5bb8:	2d00      	cmp	r5, #0
    5bba:	f040 8095 	bne.w	5ce8 <_printf_i+0x22c>
    5bbe:	4675      	mov	r5, lr
    5bc0:	2a08      	cmp	r2, #8
    5bc2:	d10b      	bne.n	5bdc <_printf_i+0x120>
    5bc4:	6823      	ldr	r3, [r4, #0]
    5bc6:	07da      	lsls	r2, r3, #31
    5bc8:	d508      	bpl.n	5bdc <_printf_i+0x120>
    5bca:	6923      	ldr	r3, [r4, #16]
    5bcc:	6862      	ldr	r2, [r4, #4]
    5bce:	429a      	cmp	r2, r3
    5bd0:	bfde      	ittt	le
    5bd2:	2330      	movle	r3, #48	; 0x30
    5bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
    5bd8:	f105 35ff 	addle.w	r5, r5, #4294967295
    5bdc:	ebae 0305 	sub.w	r3, lr, r5
    5be0:	6123      	str	r3, [r4, #16]
    5be2:	f8cd 8000 	str.w	r8, [sp]
    5be6:	463b      	mov	r3, r7
    5be8:	aa03      	add	r2, sp, #12
    5bea:	4621      	mov	r1, r4
    5bec:	4630      	mov	r0, r6
    5bee:	f7ff feef 	bl	59d0 <_printf_common>
    5bf2:	3001      	adds	r0, #1
    5bf4:	d155      	bne.n	5ca2 <_printf_i+0x1e6>
    5bf6:	f04f 30ff 	mov.w	r0, #4294967295
    5bfa:	b005      	add	sp, #20
    5bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5c00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
    5c04:	493c      	ldr	r1, [pc, #240]	; (5cf8 <_printf_i+0x23c>)
    5c06:	6822      	ldr	r2, [r4, #0]
    5c08:	6818      	ldr	r0, [r3, #0]
    5c0a:	f012 0f80 	tst.w	r2, #128	; 0x80
    5c0e:	f100 0504 	add.w	r5, r0, #4
    5c12:	601d      	str	r5, [r3, #0]
    5c14:	d001      	beq.n	5c1a <_printf_i+0x15e>
    5c16:	6803      	ldr	r3, [r0, #0]
    5c18:	e002      	b.n	5c20 <_printf_i+0x164>
    5c1a:	0655      	lsls	r5, r2, #25
    5c1c:	d5fb      	bpl.n	5c16 <_printf_i+0x15a>
    5c1e:	8803      	ldrh	r3, [r0, #0]
    5c20:	07d0      	lsls	r0, r2, #31
    5c22:	bf44      	itt	mi
    5c24:	f042 0220 	orrmi.w	r2, r2, #32
    5c28:	6022      	strmi	r2, [r4, #0]
    5c2a:	b91b      	cbnz	r3, 5c34 <_printf_i+0x178>
    5c2c:	6822      	ldr	r2, [r4, #0]
    5c2e:	f022 0220 	bic.w	r2, r2, #32
    5c32:	6022      	str	r2, [r4, #0]
    5c34:	2210      	movs	r2, #16
    5c36:	e7b1      	b.n	5b9c <_printf_i+0xe0>
    5c38:	4675      	mov	r5, lr
    5c3a:	fbb3 f0f2 	udiv	r0, r3, r2
    5c3e:	fb02 3310 	mls	r3, r2, r0, r3
    5c42:	5ccb      	ldrb	r3, [r1, r3]
    5c44:	f805 3d01 	strb.w	r3, [r5, #-1]!
    5c48:	4603      	mov	r3, r0
    5c4a:	2800      	cmp	r0, #0
    5c4c:	d1f5      	bne.n	5c3a <_printf_i+0x17e>
    5c4e:	e7b7      	b.n	5bc0 <_printf_i+0x104>
    5c50:	6808      	ldr	r0, [r1, #0]
    5c52:	681a      	ldr	r2, [r3, #0]
    5c54:	6949      	ldr	r1, [r1, #20]
    5c56:	f010 0f80 	tst.w	r0, #128	; 0x80
    5c5a:	d004      	beq.n	5c66 <_printf_i+0x1aa>
    5c5c:	1d10      	adds	r0, r2, #4
    5c5e:	6018      	str	r0, [r3, #0]
    5c60:	6813      	ldr	r3, [r2, #0]
    5c62:	6019      	str	r1, [r3, #0]
    5c64:	e007      	b.n	5c76 <_printf_i+0x1ba>
    5c66:	f010 0f40 	tst.w	r0, #64	; 0x40
    5c6a:	f102 0004 	add.w	r0, r2, #4
    5c6e:	6018      	str	r0, [r3, #0]
    5c70:	6813      	ldr	r3, [r2, #0]
    5c72:	d0f6      	beq.n	5c62 <_printf_i+0x1a6>
    5c74:	8019      	strh	r1, [r3, #0]
    5c76:	2300      	movs	r3, #0
    5c78:	6123      	str	r3, [r4, #16]
    5c7a:	4675      	mov	r5, lr
    5c7c:	e7b1      	b.n	5be2 <_printf_i+0x126>
    5c7e:	681a      	ldr	r2, [r3, #0]
    5c80:	1d11      	adds	r1, r2, #4
    5c82:	6019      	str	r1, [r3, #0]
    5c84:	6815      	ldr	r5, [r2, #0]
    5c86:	6862      	ldr	r2, [r4, #4]
    5c88:	2100      	movs	r1, #0
    5c8a:	4628      	mov	r0, r5
    5c8c:	f000 f838 	bl	5d00 <memchr>
    5c90:	b108      	cbz	r0, 5c96 <_printf_i+0x1da>
    5c92:	1b40      	subs	r0, r0, r5
    5c94:	6060      	str	r0, [r4, #4]
    5c96:	6863      	ldr	r3, [r4, #4]
    5c98:	6123      	str	r3, [r4, #16]
    5c9a:	2300      	movs	r3, #0
    5c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    5ca0:	e79f      	b.n	5be2 <_printf_i+0x126>
    5ca2:	6923      	ldr	r3, [r4, #16]
    5ca4:	462a      	mov	r2, r5
    5ca6:	4639      	mov	r1, r7
    5ca8:	4630      	mov	r0, r6
    5caa:	47c0      	blx	r8
    5cac:	3001      	adds	r0, #1
    5cae:	d0a2      	beq.n	5bf6 <_printf_i+0x13a>
    5cb0:	6823      	ldr	r3, [r4, #0]
    5cb2:	079b      	lsls	r3, r3, #30
    5cb4:	d507      	bpl.n	5cc6 <_printf_i+0x20a>
    5cb6:	2500      	movs	r5, #0
    5cb8:	f104 0919 	add.w	r9, r4, #25
    5cbc:	68e3      	ldr	r3, [r4, #12]
    5cbe:	9a03      	ldr	r2, [sp, #12]
    5cc0:	1a9b      	subs	r3, r3, r2
    5cc2:	429d      	cmp	r5, r3
    5cc4:	db05      	blt.n	5cd2 <_printf_i+0x216>
    5cc6:	68e0      	ldr	r0, [r4, #12]
    5cc8:	9b03      	ldr	r3, [sp, #12]
    5cca:	4298      	cmp	r0, r3
    5ccc:	bfb8      	it	lt
    5cce:	4618      	movlt	r0, r3
    5cd0:	e793      	b.n	5bfa <_printf_i+0x13e>
    5cd2:	2301      	movs	r3, #1
    5cd4:	464a      	mov	r2, r9
    5cd6:	4639      	mov	r1, r7
    5cd8:	4630      	mov	r0, r6
    5cda:	47c0      	blx	r8
    5cdc:	3001      	adds	r0, #1
    5cde:	d08a      	beq.n	5bf6 <_printf_i+0x13a>
    5ce0:	3501      	adds	r5, #1
    5ce2:	e7eb      	b.n	5cbc <_printf_i+0x200>
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d1a7      	bne.n	5c38 <_printf_i+0x17c>
    5ce8:	780b      	ldrb	r3, [r1, #0]
    5cea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    5cee:	f104 0542 	add.w	r5, r4, #66	; 0x42
    5cf2:	e765      	b.n	5bc0 <_printf_i+0x104>
    5cf4:	0000716a 	.word	0x0000716a
    5cf8:	00007159 	.word	0x00007159
    5cfc:	00000000 	.word	0x00000000

00005d00 <memchr>:
    5d00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5d04:	2a10      	cmp	r2, #16
    5d06:	db2b      	blt.n	5d60 <memchr+0x60>
    5d08:	f010 0f07 	tst.w	r0, #7
    5d0c:	d008      	beq.n	5d20 <memchr+0x20>
    5d0e:	f810 3b01 	ldrb.w	r3, [r0], #1
    5d12:	3a01      	subs	r2, #1
    5d14:	428b      	cmp	r3, r1
    5d16:	d02d      	beq.n	5d74 <memchr+0x74>
    5d18:	f010 0f07 	tst.w	r0, #7
    5d1c:	b342      	cbz	r2, 5d70 <memchr+0x70>
    5d1e:	d1f6      	bne.n	5d0e <memchr+0xe>
    5d20:	b4f0      	push	{r4, r5, r6, r7}
    5d22:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    5d26:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    5d2a:	f022 0407 	bic.w	r4, r2, #7
    5d2e:	f07f 0700 	mvns.w	r7, #0
    5d32:	2300      	movs	r3, #0
    5d34:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    5d38:	3c08      	subs	r4, #8
    5d3a:	ea85 0501 	eor.w	r5, r5, r1
    5d3e:	ea86 0601 	eor.w	r6, r6, r1
    5d42:	fa85 f547 	uadd8	r5, r5, r7
    5d46:	faa3 f587 	sel	r5, r3, r7
    5d4a:	fa86 f647 	uadd8	r6, r6, r7
    5d4e:	faa5 f687 	sel	r6, r5, r7
    5d52:	b98e      	cbnz	r6, 5d78 <memchr+0x78>
    5d54:	d1ee      	bne.n	5d34 <memchr+0x34>
    5d56:	bcf0      	pop	{r4, r5, r6, r7}
    5d58:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    5d5c:	f002 0207 	and.w	r2, r2, #7
    5d60:	b132      	cbz	r2, 5d70 <memchr+0x70>
    5d62:	f810 3b01 	ldrb.w	r3, [r0], #1
    5d66:	3a01      	subs	r2, #1
    5d68:	ea83 0301 	eor.w	r3, r3, r1
    5d6c:	b113      	cbz	r3, 5d74 <memchr+0x74>
    5d6e:	d1f8      	bne.n	5d62 <memchr+0x62>
    5d70:	2000      	movs	r0, #0
    5d72:	4770      	bx	lr
    5d74:	3801      	subs	r0, #1
    5d76:	4770      	bx	lr
    5d78:	2d00      	cmp	r5, #0
    5d7a:	bf06      	itte	eq
    5d7c:	4635      	moveq	r5, r6
    5d7e:	3803      	subeq	r0, #3
    5d80:	3807      	subne	r0, #7
    5d82:	f015 0f01 	tst.w	r5, #1
    5d86:	d107      	bne.n	5d98 <memchr+0x98>
    5d88:	3001      	adds	r0, #1
    5d8a:	f415 7f80 	tst.w	r5, #256	; 0x100
    5d8e:	bf02      	ittt	eq
    5d90:	3001      	addeq	r0, #1
    5d92:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5d96:	3001      	addeq	r0, #1
    5d98:	bcf0      	pop	{r4, r5, r6, r7}
    5d9a:	3801      	subs	r0, #1
    5d9c:	4770      	bx	lr
    5d9e:	bf00      	nop

00005da0 <_realloc_r>:
    5da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5da2:	4607      	mov	r7, r0
    5da4:	4614      	mov	r4, r2
    5da6:	460e      	mov	r6, r1
    5da8:	b921      	cbnz	r1, 5db4 <_realloc_r+0x14>
    5daa:	4611      	mov	r1, r2
    5dac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5db0:	f7ff bbf4 	b.w	559c <_malloc_r>
    5db4:	b922      	cbnz	r2, 5dc0 <_realloc_r+0x20>
    5db6:	f7ff fba3 	bl	5500 <_free_r>
    5dba:	4625      	mov	r5, r4
    5dbc:	4628      	mov	r0, r5
    5dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5dc0:	f000 f814 	bl	5dec <_malloc_usable_size_r>
    5dc4:	4284      	cmp	r4, r0
    5dc6:	d90f      	bls.n	5de8 <_realloc_r+0x48>
    5dc8:	4621      	mov	r1, r4
    5dca:	4638      	mov	r0, r7
    5dcc:	f7ff fbe6 	bl	559c <_malloc_r>
    5dd0:	4605      	mov	r5, r0
    5dd2:	2800      	cmp	r0, #0
    5dd4:	d0f2      	beq.n	5dbc <_realloc_r+0x1c>
    5dd6:	4631      	mov	r1, r6
    5dd8:	4622      	mov	r2, r4
    5dda:	f7ff fb64 	bl	54a6 <memcpy>
    5dde:	4631      	mov	r1, r6
    5de0:	4638      	mov	r0, r7
    5de2:	f7ff fb8d 	bl	5500 <_free_r>
    5de6:	e7e9      	b.n	5dbc <_realloc_r+0x1c>
    5de8:	4635      	mov	r5, r6
    5dea:	e7e7      	b.n	5dbc <_realloc_r+0x1c>

00005dec <_malloc_usable_size_r>:
    5dec:	f851 0c04 	ldr.w	r0, [r1, #-4]
    5df0:	2800      	cmp	r0, #0
    5df2:	f1a0 0004 	sub.w	r0, r0, #4
    5df6:	bfbc      	itt	lt
    5df8:	580b      	ldrlt	r3, [r1, r0]
    5dfa:	18c0      	addlt	r0, r0, r3
    5dfc:	4770      	bx	lr
    5dfe:	0000      	movs	r0, r0
    5e00:	2a2a2a2a 	.word	0x2a2a2a2a
    5e04:	2a2a2a2a 	.word	0x2a2a2a2a
    5e08:	2a2a2a2a 	.word	0x2a2a2a2a
    5e0c:	2a2a2a2a 	.word	0x2a2a2a2a
    5e10:	2a2a2a2a 	.word	0x2a2a2a2a
    5e14:	2a2a2a2a 	.word	0x2a2a2a2a
    5e18:	2a2a2a2a 	.word	0x2a2a2a2a
    5e1c:	2a2a2a2a 	.word	0x2a2a2a2a
    5e20:	2a2a2a2a 	.word	0x2a2a2a2a
    5e24:	2a2a2a2a 	.word	0x2a2a2a2a
    5e28:	2a2a2a2a 	.word	0x2a2a2a2a
    5e2c:	2a2a2a2a 	.word	0x2a2a2a2a
    5e30:	2a2a2a2a 	.word	0x2a2a2a2a
    5e34:	2a2a2a2a 	.word	0x2a2a2a2a
    5e38:	00002a2a 	.word	0x00002a2a
    5e3c:	2a2a2a2a 	.word	0x2a2a2a2a
    5e40:	2a2a2a2a 	.word	0x2a2a2a2a
    5e44:	2a2a2a2a 	.word	0x2a2a2a2a
    5e48:	532a2a2a 	.word	0x532a2a2a
    5e4c:	4b434154 	.word	0x4b434154
    5e50:	45564f20 	.word	0x45564f20
    5e54:	4f4c4652 	.word	0x4f4c4652
    5e58:	45442057 	.word	0x45442057
    5e5c:	54434554 	.word	0x54434554
    5e60:	2a2a4445 	.word	0x2a2a4445
    5e64:	2a2a2a2a 	.word	0x2a2a2a2a
    5e68:	2a2a2a2a 	.word	0x2a2a2a2a
    5e6c:	2a2a2a2a 	.word	0x2a2a2a2a
    5e70:	2a2a2a2a 	.word	0x2a2a2a2a
    5e74:	00002a2a 	.word	0x00002a2a
    5e78:	73615420 	.word	0x73615420
    5e7c:	6148206b 	.word	0x6148206b
    5e80:	656c646e 	.word	0x656c646e
    5e84:	25202d20 	.word	0x25202d20
    5e88:	23232064 	.word	0x23232064
    5e8c:	61542023 	.word	0x61542023
    5e90:	4e206b73 	.word	0x4e206b73
    5e94:	20656d61 	.word	0x20656d61
    5e98:	7325202d 	.word	0x7325202d
    5e9c:	00000000 	.word	0x00000000

00005ea0 <ModemCmdData>:
    5ea0:	00000000 00006440 00020003 00000bad     ....@d..........
    5eb0:	00000009 00000001 00006444 000f0008     ........Dd......
    5ec0:	00000bd9 0000001b 00000002 00006450     ............Pd..
    5ed0:	0003000c 00000bd5 00000013 00000003     ................
    5ee0:	00006460 000c0008 00000bd5 00000018     `d..............
    5ef0:	00000004 0000646c 00080005 00000bd5     ....ld..........
    5f00:	00000011 00000005 00006478 000b000a     ........xd......
    5f10:	00000bd5 00000019 00000006 00006484     .............d..
    5f20:	0015000a 00000bd5 00000023 00000007     ........#.......
    5f30:	00006490 00020005 00000bd5 0000000b     .d..............
    5f40:	00000008 00006498 000c0027 00000cfd     .....d..'.......
    5f50:	00000037 00000009 000064c0 00020012     7........d......
    5f60:	00000bfd 00000018 0000000a 000064d4     .............d..
    5f70:	00020012 00000bfd 00000018 0000000b     ................
    5f80:	000064e8 00020012 00000bfd 00000018     .d..............
    5f90:	0000000c 000064fc 00020012 00000bfd     .....d..........
    5fa0:	00000018 0000000d 00006510 00020012     .........e......
    5fb0:	00000bfd 00000018 0000000e 00006524     ............$e..
    5fc0:	00020012 00000bfd 00000018 0000000f     ................
    5fd0:	00006538 00020012 00000bfd 00000018     8e..............
    5fe0:	00000010 0000654c 00020012 00000bfd     ....Le..........
    5ff0:	00000018 00000011 00006560 00020012     ........`e......
    6000:	00000bfd 00000018 00000012 00006574     ............te..
    6010:	00020013 00000bfd 00000019 00000013     ................
    6020:	00006588 0002001f 00000c79 00000025     .e......y...%...
    6030:	00000014 000065a8 00020023 00000ca5     .....e..#.......
    6040:	00000029 00000015 000065cc 0002001a     )........e......
    6050:	00000cd1 00000020 00000016 20000000     .... .......... 
    6060:	00070011 00000d39 0000001c 00000017     ....9...........
    6070:	200001ac 00bf003a 00000dc5 000000fd     ... :...........
    6080:	00000018 000065e8 00020010 00000dc5     .....e..........
    6090:	00000016 00000019 000065fc 00020010     .........e......
    60a0:	00000bd5 00000016 0000001a 00006610     .............f..
    60b0:	0002000b 00000bd5 00000011 0000001b     ................
    60c0:	0000643c 00000000 00000bd5 00000000     <d..............
	...
    6350:	73736553 206e6f69 2d204449 00003120     Session ID - 1..
    6360:	73736553 206e6f69 2d204449 00003220     Session ID - 2..
    6370:	73736553 206e6f69 2d204449 00003320     Session ID - 3..
    6380:	73736553 206e6f69 2d204449 00003420     Session ID - 4..
    6390:	73736553 206e6f69 2d204449 00003520     Session ID - 5..
    63a0:	73736553 206e6f69 2d204449 00003620     Session ID - 6..
    63b0:	73736553 206e6f69 2d204449 00003720     Session ID - 7..
    63c0:	73736553 206e6f69 2d204449 00003820     Session ID - 8..
    63d0:	73736553 206e6f69 76204449 65756c61     Session ID value
    63e0:	63786520 73646565 65687420 78616d20      exceeds the max
    63f0:	6c617620 00006575 5454484b 45482050      value..KHTTP HE
    6400:	52454441 72745320 20676e69 00207369     ADER String is .
    6410:	3d693f22 39393533 37303839 38323230     "?i=359998070228
    6420:	26343637 31413d64 58323559 33593241     764&d=A1Y52XA2Y3
    6430:	3d622636 73263633 0d22323d 00000000     6&b=36&s=2".....
    6440:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....
    6450:	572b5441 52524143 0d524549 00000000     AT+WCARRIER.....
    6460:	492b5441 0d3f5250 00000000 432b5441     AT+IPR?.....AT+C
    6470:	3f4e4950 0000000d 432b5441 47455247     PIN?....AT+CGREG
    6480:	00000d3f 4b2b5441 3d4e5347 00000d33     ?...AT+KGSN=3...
    6490:	31455441 0000000d 4b2b5441 50545448     ATE1....AT+KHTTP
    64a0:	3d474643 69222c33 7365676e 722e3174     CFG=3,"ingest1.r
    64b0:	6f707365 2e65736e 756f6c63 000d2264     esponse.cloud"..
    64c0:	4b2b5441 50545448 534f4c43 2c313d45     AT+KHTTPCLOSE=1,
    64d0:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    64e0:	2c323d45 00000d30 4b2b5441 50545448     E=2,0...AT+KHTTP
    64f0:	534f4c43 2c333d45 00000d30 4b2b5441     CLOSE=3,0...AT+K
    6500:	50545448 534f4c43 2c343d45 00000d30     HTTPCLOSE=4,0...
    6510:	4b2b5441 50545448 534f4c43 2c353d45     AT+KHTTPCLOSE=5,
    6520:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6530:	2c363d45 00000d30 4b2b5441 50545448     E=6,0...AT+KHTTP
    6540:	534f4c43 2c373d45 00000d30 4b2b5441     CLOSE=7,0...AT+K
    6550:	50545448 534f4c43 2c383d45 00000d30     HTTPCLOSE=8,0...
    6560:	4b2b5441 50545448 534f4c43 2c393d45     AT+KHTTPCLOSE=9,
    6570:	00000d30 4b2b5441 50545448 534f4c43     0...AT+KHTTPCLOS
    6580:	30313d45 000d302c 4b2b5441 54544150     E=10,0..AT+KPATT
    6590:	3d4e5245 452d2d22 2d2d464f 74746150     ERN="--EOF--Patt
    65a0:	2d6e7265 000d222d 4b2b5441 43584e43     ern--"..AT+KCNXC
    65b0:	333d4746 4722202c 22535250 5a56222c     FG=3, "GPRS","VZ
    65c0:	544e4957 454e5245 000d2254 4b2b5441     WINTERNET"..AT+K
    65d0:	54584e43 52454d49 362c333d 2c322c30     CNXTIMER=3,60,2,
    65e0:	362c3037 00000d30 4f452d2d 502d2d46     70,60...--EOF--P
    65f0:	65747461 2d2d6e72 00000000 4b2b5441     attern--....AT+K
    6600:	44584e43 3d4e574f 0d312c33 00000000     CNXDOWN=3,1.....
    6610:	432b5441 54544147 000d303d 65707845     AT+CGATT=0..Expe
    6620:	64657463 646f6d20 72206d65 6f707365     cted modem respo
    6630:	2065736e 6e207369 7220746f 69656365     nse is not recei
    6640:	00646576 52206f4e 6f707365 2065736e     ved.No Response 
    6650:	6d6f7266 62655720 76655320 2e2e7265     from Web Sever..
    6660:	6f502e2e 6e697473 61642067 74206174     ..Posting data t
    6670:	6573206f 20726576 66207369 656c6961     o sever is faile
    6680:	00000064 66726550 696d726f 7420676e     d...Performing t
    6690:	45206568 726f7272 63655220 7265766f     he Error Recover
    66a0:	72502079 6465636f 73657275 00002e2e     y Procedures....
    66b0:	736f6c43 61206465 5220646e 65706f65     Closed and Reope
    66c0:	2064656e 20656874 73736573 2e6e6f69     ned the session.
    66d0:	2e2e2e2e 0000002e 6f747541 63657220     ........Auto rec
    66e0:	7265766f 6f632079 656c706d 2e646574     overy completed.
    66f0:	2e2e2e2e 0000002e 6f727245 203a2072     ........Error : 
    6700:	636f7250 20737365 70736572 65736e6f     Process response
    6710:	69616620 2064656c 614c202d 43207473      failed - Last C
    6720:	616d6d6f 4920646e 6c61766e 00006469     ommand Invalid..
    6730:	45444f4d 4144204d 55204154 20545241     MODEM DATA UART 
    6740:	52455328 334d4f43 6e692029 61697469     (SERCOM3) initia
    6750:	657a696c 00000064 43524553 20334d4f     lized...SERCOM3 
    6760:	4f495250 59544952 00000000 6c696146     PRIORITY....Fail
    6770:	74206465 6e69206f 61697469 657a696c     ed to initialize
    6780:	65687420 444f4d20 44204d45 20415441      the MODEM DATA 
    6790:	54524155 00000000 746e6553 65687420     UART....Sent the
    67a0:	61694420 61642067 74206174 7854206f      Diag data to Tx
    67b0:	73615420 0000006b 6c696146 74206465      Task...Failed t
    67c0:	6573206f 7420746e 44206568 20676169     o sent the Diag 
    67d0:	61746164 206f7420 54207854 006b7361     data to Tx Task.
    67e0:	6c756f43 74276e64 74626f20 206e6961     Couldn't obtain 
    67f0:	20656874 616d6573 726f6870 00000065     the semaphore...
    6800:	41206e49 61682054 656c646e 000a0d72     In AT handler...
    6810:	43206e49 204e5347 646e6168 0072656c     In CGSN handler.
    6820:	6c430a0d 6465736f 206e6120 69746361     ..Closed an acti
    6830:	63206576 656e6e6f 6f697463 0000006e     ve connection...
    6840:	72656854 73692065 206f6e20 6e6e6f63     There is no conn
    6850:	69746365 65206e6f 62617473 6873696c     ection establish
    6860:	77206465 20687469 73696874 73657320     ed with this ses
    6870:	6e6f6973 2e444920 00002e2e 63656843     sion ID.....Chec
    6880:	676e696b 726f6620 206e6120 69746361     king for an acti
    6890:	63206576 656e6e6f 6f697463 6977206e     ve connection wi
    68a0:	6e206874 20747865 73736573 206e6f69     th next session 
    68b0:	2e2e4449 00000a2e 4b206e49 54544150     ID......In KPATT
    68c0:	204e5245 646e6168 0072656c 4b206e49     ERN handler.In K
    68d0:	43584e43 68204746 6c646e61 00007265     CNXCFG handler..
    68e0:	4b206e49 54584e43 52454d49 6e616820     In KCNXTIMER han
    68f0:	72656c64 00000000 4b206e49 50545448     dler....In KHTTP
    6900:	20474643 646e6168 0072656c 4b206e49     CFG handler.In K
    6910:	50545448 41454820 20524544 646e6168     HTTP HEADER hand
    6920:	0072656c 4e4e4f43 00544345 64616548     ler.CONNECT.Head
    6930:	52207265 6f707365 2065736e 00006b4f     er Response Ok..
    6940:	64616548 52207265 6f707365 2065736e     Header Response 
    6950:	20746f4e 00006b4f 000a0a0d 54206e49     Not Ok......In T
    6960:	494d5245 4554414e 41454820 20524544     ERMINATE HEADER 
    6970:	646e6168 0072656c 69746f4e 61636966     handler.Notifica
    6980:	6e6f6974 63655220 65766965 6f742064     tion Received to
    6990:	20785220 6b736154 00000000 70736552      Rx Task....Resp
    69a0:	65736e6f 6e656c20 00687467 7374754f     onse length.Outs
    69b0:	20656469 696c6f73 65746963 61702064     ide solicited pa
    69c0:	72657372 00000000 69746f4e 61636966     rser....Notifica
    69d0:	6e6f6974 746f4e20 63655220 65766965     tion Not Receive
    69e0:	6f742064 20785220 6b736154 00000000     d to Rx Task....
    69f0:	6b736154 00444920 6e617254 74696d73     Task ID.Transmit
    6a00:	20646574 6f632061 6e616d6d 6f742064     ted a command to
    6a10:	646f4d20 00006d65 73207854 61697265      Modem..Tx seria
    6a20:	6544206c 20677562 656e6f44 00000a0d     l Debug Done....
    6a30:	44207852 0d656e6f 0000000a 25207325     Rx Done.....%s %
    6a40:	00000073 2d207325 20642520 00000a0d     s...%s - %d ....
    6a50:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
    6a60:	775f6c61 682e7464 00000000 20544457     al_wdt.h....WDT 
    6a70:	74696e49 696c6169 00646573 20544457     Initialised.WDT 
    6a80:	6c696146 74206465 6e69206f 61697469     Failed to initia
    6a90:	657a696c 00000000 682f2e2e 732f6c61     lize....../hal/s
    6aa0:	682f6372 615f6c61 79735f63 632e636e     rc/hal_ac_sync.c
    6ab0:	00000000 682f2e2e 732f6c61 682f6372     ....../hal/src/h
    6ac0:	615f6c61 735f6364 2e636e79 00000063     al_adc_sync.c...
    6ad0:	682f2e2e 732f6c61 682f6372 645f6c61     ../hal/src/hal_d
    6ae0:	735f6361 2e636e79 00000063 682f2e2e     ac_sync.c...../h
    6af0:	732f6c61 682f6372 665f6c61 6873616c     al/src/hal_flash
    6b00:	0000632e 682f2e2e 732f6c61 682f6372     .c..../hal/src/h
    6b10:	705f6c61 632e6d77 00000000 682f2e2e     al_pwm.c....../h
    6b20:	732f6c61 682f6372 745f6c61 72656d69     al/src/hal_timer
    6b30:	0000632e 682f2e2e 752f6c61 736c6974     .c..../hal/utils
    6b40:	6372732f 6974752f 6c5f736c 2e747369     /src/utils_list.
    6b50:	00000063 682f2e2e 752f6c61 736c6974     c...../hal/utils
    6b60:	6372732f 6974752f 725f736c 62676e69     /src/utils_ringb
    6b70:	65666675 00632e72 682f2e2e 612f6c70     uffer.c.../hpl/a
    6b80:	70682f63 63615f6c 0000632e              c/hpl_ac.c..

00006b8c <_adcs>:
    6b8c:	00c00000 00830002 00001900 00000000     ................
    6b9c:	00000000 00010001 00000000 00000000     ................
	...
    6bb8:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    6bc8:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    6bd8:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00006be8 <_cfgs>:
	...

00006ce8 <user_mux_confs>:
	...

00006d2c <channel_confs>:
	...

00006d6c <interrupt_cfg>:
	...
    6dec:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    6dfc:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    6e0c:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    6e1c:	43000000 43000400                       ...C...C

00006e24 <_usarts>:
    6e24:	00000003 40200004 00030000 00700002     ...... @......p.
    6e34:	0000f62b 00000000 00000004 40300184     +.............0@
    6e44:	00030300 00700002 0000ff2e 00000000     ......p.........
    6e54:	00000005 40300004 00030000 00700002     ......0@......p.
    6e64:	0000f62b 00000000                       +.......

00006e6c <_i2cms>:
	...

00006e84 <sercomspi_regs>:
	...
    6e98:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    6ea8:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    6eb8:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00006ec8 <_tccs>:
    6ec8:	00000000 00000300 00000000 00000000     ................
    6ed8:	00001770 00000000 00000000 00000000     p...............
    6ee8:	00000000 00000001 00000300 00000000     ................
    6ef8:	00000000 00001770 00000000 00000000     ....p...........
	...
    6f10:	00000002 00000300 00000000 00000000     ................
    6f20:	00001770 00000000 00000000 00000000     p...............
    6f30:	00000000 00000003 00000300 00000000     ................
    6f40:	00000000 00001770 00000000 00000000     ....p...........
	...
    6f58:	00000004 00000300 00000000 00000000     ................
    6f68:	00001770 00000000 00000000 00000000     p...............
    6f78:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    6f88:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    6f98:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    6fa8:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    6fb8:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    6fc8:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    6fd8:	26207854 20785220 75657551 61207365     Tx & Rx Queues a
    6fe8:	63206572 74616572 00006465 616d6553     re created..Sema
    6ff8:	726f6870 61207365 63206572 74616572     phores are creat
    7008:	00006465 70736944 68637461 6b736154     ed..DispatchTask
    7018:	00000000 65646f4d 7361546d 0000006b     ....ModemTask...
    7028:	65646f4d 5478526d 006b7361 65646f4d     ModemRxTask.Mode
    7038:	6f72506d 73736563 6b736154 00000000     mProcessTask....
    7048:	65646f4d 6169446d 73615467 0000006b     ModemDiagTask...
    7058:	63637553 66737365 796c6c75 65724320     Successfully Cre
    7068:	64657461 65687420 73615420 0000736b     ated the Tasks..
    7078:	65657246 4f545220 63532053 75646568     Free RTOS Schedu
    7088:	2072656c 20746f6e 72617473 00646574     ler not started.
    7098:	6c696146 74206465 7263206f 65746165     Failed to create
    70a8:	73617420 0000736b 6f727245 53203a72      tasks..Error: S
    70b8:	64656863 72656c75 69786520 00646574     cheduler exited.
    70c8:	454c4449 00000000 09632509 25097525     IDLE.....%c.%u.%
    70d8:	75250975 00000a0d 20726d54 00637653     u.%u....Tmr Svc.

000070e8 <__sf_fake_stderr>:
	...

00007108 <__sf_fake_stdin>:
	...

00007128 <__sf_fake_stdout>:
	...
    7148:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    7158:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    7168:	31300046 35343332 39383736 64636261     F.0123456789abcd
    7178:	00006665                                ef..

0000717c <_init>:
    717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    717e:	bf00      	nop
    7180:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7182:	bc08      	pop	{r3}
    7184:	469e      	mov	lr, r3
    7186:	4770      	bx	lr

00007188 <__init_array_start>:
    7188:	00000289 	.word	0x00000289

0000718c <_fini>:
    718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    718e:	bf00      	nop
    7190:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7192:	bc08      	pop	{r3}
    7194:	469e      	mov	lr, r3
    7196:	4770      	bx	lr

00007198 <__fini_array_start>:
    7198:	00000265 	.word	0x00000265
