
SAMD51.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003014  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000f0  20000000  00003014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000200f0  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000200f0  2**0
                  CONTENTS
  4 .bss          000008e4  200000f0  00003110  000200f0  2**4
                  ALLOC
  5 .stack        00010004  200009d4  000039f4  000200f0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002011e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0004c351  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00006e81  00000000  00000000  0006c4c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00017058  00000000  00000000  00073349  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000016b0  00000000  00000000  0008a3a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001be0  00000000  00000000  0008ba51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000148bb  00000000  00000000  0008d631  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002408e  00000000  00000000  000a1eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00105102  00000000  00000000  000c5f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003924  00000000  00000000  001cb07c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
TickType_t xTicksToWait = pdMS_TO_TICKS(6100);
char printBuff[50];


void ModemTask( void *ModemTaskParam)
{
       0:	d8 09 01 20 25 06 00 00 21 06 00 00 21 06 00 00     ... %...!...!...
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
        {
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
        }
        
        xQueueReceiveStatus = xQueueReceive( xDataQueue, &ReceivedMsg, xTicksToWait );
      10:	21 06 00 00 21 06 00 00 21 06 00 00 00 00 00 00     !...!...!.......
	...
        if( uxQueueMessagesWaiting( xDataQueue ) != 0 )
      2c:	81 25 00 00 21 06 00 00 00 00 00 00 b1 25 00 00     .%..!........%..
            SerialDebugPrint((uint8_t*)"Modem Task Queue should have been empty.\r\n",43);
      3c:	15 26 00 00 21 06 00 00 21 06 00 00 21 06 00 00     .&..!...!...!...
        
        if(xQueueReceiveStatus == pdPASS)
        {
            sprintf(printBuff,"Received ADC Value is %d\r\n",ReceivedMsg.AdcReading);
            SerialDebugPrint((uint8_t*)printBuff,sizeof(printBuff)); 
      4c:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
      5c:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
      6c:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
      7c:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
      8c:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
      9c:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
      ac:	21 06 00 00 21 06 00 00 35 18 00 00 49 18 00 00     !...!...5...I...
      bc:	c5 15 00 00 d1 15 00 00 dd 15 00 00 e9 15 00 00     ................
      cc:	f5 15 00 00 21 06 00 00 21 06 00 00 21 06 00 00     ....!...!...!...
      dc:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
      ec:	21 06 00 00 00 00 00 00 3d 19 00 00 21 06 00 00     !.......=...!...
      fc:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
     10c:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
     11c:	21 06 00 00 21 06 00 00 21 06 00 00 59 03 00 00     !...!...!...Y...
     12c:	9d 03 00 00 e9 03 00 00 21 06 00 00 21 06 00 00     ........!...!...
     13c:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
     14c:	21 06 00 00 c1 05 00 00 21 06 00 00 00 00 00 00     !.......!.......
	...
     180:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
     190:	00 00 00 00 cd 1e 00 00 21 06 00 00 21 06 00 00     ........!...!...
     1a0:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
     1b0:	e1 1e 00 00 21 06 00 00 21 06 00 00 21 06 00 00     ....!...!...!...
     1c0:	21 06 00 00 f5 1e 00 00 21 06 00 00 21 06 00 00     !.......!...!...
     1d0:	21 06 00 00 09 1f 00 00 21 06 00 00 21 06 00 00     !.......!...!...
     1e0:	1d 1f 00 00 21 06 00 00 21 06 00 00 11 24 00 00     ....!...!....$..
     1f0:	25 24 00 00 39 24 00 00 4d 24 00 00 61 24 00 00     %$..9$..M$..a$..
     200:	75 24 00 00 00 00 00 00 00 00 00 00 21 06 00 00     u$..........!...
     210:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
     220:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
     230:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
     240:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
     250:	21 06 00 00 21 06 00 00 21 06 00 00 21 06 00 00     !...!...!...!...
     260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200000f0 	.word	0x200000f0
     280:	00000000 	.word	0x00000000
     284:	00003014 	.word	0x00003014

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00003014 	.word	0x00003014
     2c4:	200000f4 	.word	0x200000f4
     2c8:	00003014 	.word	0x00003014
     2cc:	00000000 	.word	0x00000000

000002d0 <ModemDataCommInit>:
	.usart_cb.error_cb = NULL

};

void ModemDataCommInit(void)
{
     2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&MODEM_DATA,SERCOM3);
     2d2:	4c19      	ldr	r4, [pc, #100]	; (338 <ModemDataCommInit+0x68>)
     2d4:	4919      	ldr	r1, [pc, #100]	; (33c <ModemDataCommInit+0x6c>)
     2d6:	4620      	mov	r0, r4
     2d8:	4b19      	ldr	r3, [pc, #100]	; (340 <ModemDataCommInit+0x70>)
     2da:	4798      	blx	r3
     2dc:	4605      	mov	r5, r0
	#if 1
	//_usart_async_set_irq_state(&MODEM_DATA,USART_ASYNC_BYTE_SENT,true);
	//_usart_async_set_irq_state(&MODEM_DATA,USART_ASYNC_TX_DONE,true);
	//_usart_async_set_irq_state(&MODEM_DATA,USART_ASYNC_ERROR,true);
	//_usart_async_enable_tx_done_irq(&MODEM_DATA);
	_usart_async_set_irq_state(&MODEM_DATA,USART_ASYNC_RX_DONE,true);
     2de:	2201      	movs	r2, #1
     2e0:	4611      	mov	r1, r2
     2e2:	4620      	mov	r0, r4
     2e4:	4b17      	ldr	r3, [pc, #92]	; (344 <ModemDataCommInit+0x74>)
     2e6:	4798      	blx	r3
	#endif
	
	if(initStatus == ERR_NONE)
     2e8:	b185      	cbz	r5, 30c <ModemDataCommInit+0x3c>
		sprintf(printBuff,"MODEM DATA UART (SERCOM3) initialized\r\n");
		SerialDebugPrint(printBuff,sizeof(printBuff));
	}
	else
	{
		sprintf(printBuff,"SERCOM3 not initialized\r\n");
     2ea:	4d17      	ldr	r5, [pc, #92]	; (348 <ModemDataCommInit+0x78>)
     2ec:	4c17      	ldr	r4, [pc, #92]	; (34c <ModemDataCommInit+0x7c>)
     2ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     2f0:	6028      	str	r0, [r5, #0]
     2f2:	6069      	str	r1, [r5, #4]
     2f4:	60aa      	str	r2, [r5, #8]
     2f6:	60eb      	str	r3, [r5, #12]
     2f8:	cc03      	ldmia	r4!, {r0, r1}
     2fa:	6128      	str	r0, [r5, #16]
     2fc:	6169      	str	r1, [r5, #20]
     2fe:	8823      	ldrh	r3, [r4, #0]
     300:	832b      	strh	r3, [r5, #24]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     302:	2128      	movs	r1, #40	; 0x28
     304:	4628      	mov	r0, r5
     306:	4b12      	ldr	r3, [pc, #72]	; (350 <ModemDataCommInit+0x80>)
     308:	4798      	blx	r3
     30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sprintf(printBuff,"MODEM DATA UART (SERCOM3) initialized\r\n");
     30c:	4c11      	ldr	r4, [pc, #68]	; (354 <ModemDataCommInit+0x84>)
     30e:	4d0e      	ldr	r5, [pc, #56]	; (348 <ModemDataCommInit+0x78>)
     310:	f104 0720 	add.w	r7, r4, #32
     314:	4626      	mov	r6, r4
     316:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     318:	6028      	str	r0, [r5, #0]
     31a:	6069      	str	r1, [r5, #4]
     31c:	60aa      	str	r2, [r5, #8]
     31e:	60eb      	str	r3, [r5, #12]
     320:	4634      	mov	r4, r6
     322:	3510      	adds	r5, #16
     324:	42be      	cmp	r6, r7
     326:	d1f5      	bne.n	314 <ModemDataCommInit+0x44>
     328:	cc03      	ldmia	r4!, {r0, r1}
     32a:	6028      	str	r0, [r5, #0]
     32c:	6069      	str	r1, [r5, #4]
		SerialDebugPrint(printBuff,sizeof(printBuff));
     32e:	2128      	movs	r1, #40	; 0x28
     330:	4805      	ldr	r0, [pc, #20]	; (348 <ModemDataCommInit+0x78>)
     332:	4b07      	ldr	r3, [pc, #28]	; (350 <ModemDataCommInit+0x80>)
     334:	4798      	blx	r3
     336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     338:	20000000 	.word	0x20000000
     33c:	41014000 	.word	0x41014000
     340:	00001ab9 	.word	0x00001ab9
     344:	00001b55 	.word	0x00001b55
     348:	200007cc 	.word	0x200007cc
     34c:	0000288c 	.word	0x0000288c
     350:	0000057d 	.word	0x0000057d
     354:	000028a8 	.word	0x000028a8

00000358 <SERCOM3_0_Handler>:
	}
}


void SERCOM3_0_Handler( void )
{
     358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* DRE: TX Data Register Empty */
	sprintf(printBuff,"Modem Data Tx Data Reg Empty CallBack\r\n");
     35a:	4c0c      	ldr	r4, [pc, #48]	; (38c <SERCOM3_0_Handler+0x34>)
     35c:	4d0c      	ldr	r5, [pc, #48]	; (390 <SERCOM3_0_Handler+0x38>)
     35e:	f104 0720 	add.w	r7, r4, #32
     362:	4626      	mov	r6, r4
     364:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     366:	6028      	str	r0, [r5, #0]
     368:	6069      	str	r1, [r5, #4]
     36a:	60aa      	str	r2, [r5, #8]
     36c:	60eb      	str	r3, [r5, #12]
     36e:	4634      	mov	r4, r6
     370:	3510      	adds	r5, #16
     372:	42be      	cmp	r6, r7
     374:	d1f5      	bne.n	362 <SERCOM3_0_Handler+0xa>
     376:	cc03      	ldmia	r4!, {r0, r1}
     378:	6028      	str	r0, [r5, #0]
     37a:	6069      	str	r1, [r5, #4]
	SerialDebugPrint(printBuff,sizeof(printBuff));
     37c:	2128      	movs	r1, #40	; 0x28
     37e:	4804      	ldr	r0, [pc, #16]	; (390 <SERCOM3_0_Handler+0x38>)
     380:	4b04      	ldr	r3, [pc, #16]	; (394 <SERCOM3_0_Handler+0x3c>)
     382:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
}

static inline void hri_sercomusart_clear_interrupt_DRE_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     384:	2201      	movs	r2, #1
     386:	4b04      	ldr	r3, [pc, #16]	; (398 <SERCOM3_0_Handler+0x40>)
     388:	761a      	strb	r2, [r3, #24]
     38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     38c:	000028d0 	.word	0x000028d0
     390:	200007cc 	.word	0x200007cc
     394:	0000057d 	.word	0x0000057d
     398:	41014000 	.word	0x41014000

0000039c <SERCOM3_1_Handler>:
	/* Disable the TX Data reg empty interrupt after transmitting the first set of data */
	//SERCOM3->USART.INTENCLR.bit.DRE = 1;
}

void SERCOM3_1_Handler(void )
{
     39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* TXC : Transmit Complete */
	sprintf(printBuff,"Modem Data Tx byte Complete Callback\r\n");
     39e:	4e0e      	ldr	r6, [pc, #56]	; (3d8 <SERCOM3_1_Handler+0x3c>)
     3a0:	4c0e      	ldr	r4, [pc, #56]	; (3dc <SERCOM3_1_Handler+0x40>)
     3a2:	f106 0720 	add.w	r7, r6, #32
     3a6:	4635      	mov	r5, r6
     3a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     3aa:	6020      	str	r0, [r4, #0]
     3ac:	6061      	str	r1, [r4, #4]
     3ae:	60a2      	str	r2, [r4, #8]
     3b0:	60e3      	str	r3, [r4, #12]
     3b2:	462e      	mov	r6, r5
     3b4:	3410      	adds	r4, #16
     3b6:	42bd      	cmp	r5, r7
     3b8:	d1f5      	bne.n	3a6 <SERCOM3_1_Handler+0xa>
     3ba:	6828      	ldr	r0, [r5, #0]
     3bc:	6020      	str	r0, [r4, #0]
     3be:	88aa      	ldrh	r2, [r5, #4]
     3c0:	79ab      	ldrb	r3, [r5, #6]
     3c2:	80a2      	strh	r2, [r4, #4]
     3c4:	71a3      	strb	r3, [r4, #6]
	SerialDebugPrint(printBuff,sizeof(printBuff));
     3c6:	2128      	movs	r1, #40	; 0x28
     3c8:	4804      	ldr	r0, [pc, #16]	; (3dc <SERCOM3_1_Handler+0x40>)
     3ca:	4b05      	ldr	r3, [pc, #20]	; (3e0 <SERCOM3_1_Handler+0x44>)
     3cc:	4798      	blx	r3
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_TXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     3ce:	2202      	movs	r2, #2
     3d0:	4b04      	ldr	r3, [pc, #16]	; (3e4 <SERCOM3_1_Handler+0x48>)
     3d2:	761a      	strb	r2, [r3, #24]
     3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3d6:	bf00      	nop
     3d8:	000028f8 	.word	0x000028f8
     3dc:	200007cc 	.word	0x200007cc
     3e0:	0000057d 	.word	0x0000057d
     3e4:	41014000 	.word	0x41014000

000003e8 <SERCOM3_2_Handler>:

/* This interrupt will be called if SAMD51 receives any data from Modem 
 * through SERCOM3 UART Interafce.
 */
void SERCOM3_2_Handler( void )
{
     3e8:	b538      	push	{r3, r4, r5, lr}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
}

static inline void hri_sercomusart_clear_interrupt_RXC_bit(const void *const hw)
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     3ea:	2204      	movs	r2, #4
     3ec:	4b0e      	ldr	r3, [pc, #56]	; (428 <SERCOM3_2_Handler+0x40>)
     3ee:	761a      	strb	r2, [r3, #24]
	//sprintf(printBuff,"Successfully Received a char from Modem\r\n");
	//SerialDebugPrint(printBuff,sizeof(printBuff));
	
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM3);
	
	while (!_usart_async_is_byte_received(&MODEM_DATA));
     3f0:	4d0e      	ldr	r5, [pc, #56]	; (42c <SERCOM3_2_Handler+0x44>)
     3f2:	4c0f      	ldr	r4, [pc, #60]	; (430 <SERCOM3_2_Handler+0x48>)
     3f4:	4628      	mov	r0, r5
     3f6:	47a0      	blx	r4
     3f8:	2800      	cmp	r0, #0
     3fa:	d0fb      	beq.n	3f4 <SERCOM3_2_Handler+0xc>
	
#if 1
	if(cnt < 2)
     3fc:	4b0d      	ldr	r3, [pc, #52]	; (434 <SERCOM3_2_Handler+0x4c>)
     3fe:	781c      	ldrb	r4, [r3, #0]
     400:	2c01      	cmp	r4, #1
     402:	d907      	bls.n	414 <SERCOM3_2_Handler+0x2c>
		RxDataBuff[cnt] = _usart_async_read_byte(&MODEM_DATA);
		cnt++;
	}
	else
	{
		SerialDebugPrint(RxDataBuff,2);
     404:	4c0b      	ldr	r4, [pc, #44]	; (434 <SERCOM3_2_Handler+0x4c>)
     406:	2102      	movs	r1, #2
     408:	1d20      	adds	r0, r4, #4
     40a:	4b0b      	ldr	r3, [pc, #44]	; (438 <SERCOM3_2_Handler+0x50>)
     40c:	4798      	blx	r3
		cnt = 0;
     40e:	2300      	movs	r3, #0
     410:	7023      	strb	r3, [r4, #0]
     412:	bd38      	pop	{r3, r4, r5, pc}
		RxDataBuff[cnt] = _usart_async_read_byte(&MODEM_DATA);
     414:	4805      	ldr	r0, [pc, #20]	; (42c <SERCOM3_2_Handler+0x44>)
     416:	4b09      	ldr	r3, [pc, #36]	; (43c <SERCOM3_2_Handler+0x54>)
     418:	4798      	blx	r3
     41a:	4b06      	ldr	r3, [pc, #24]	; (434 <SERCOM3_2_Handler+0x4c>)
     41c:	441c      	add	r4, r3
     41e:	7120      	strb	r0, [r4, #4]
		cnt++;
     420:	781a      	ldrb	r2, [r3, #0]
     422:	3201      	adds	r2, #1
     424:	701a      	strb	r2, [r3, #0]
     426:	bd38      	pop	{r3, r4, r5, pc}
     428:	41014000 	.word	0x41014000
     42c:	20000000 	.word	0x20000000
     430:	00001b49 	.word	0x00001b49
     434:	2000010c 	.word	0x2000010c
     438:	0000057d 	.word	0x0000057d
     43c:	00001b37 	.word	0x00001b37

00000440 <sendCommandToModem>:
}


#if 1
uint32_t sendCommandToModem(const uint8_t *const TxData,const uint16_t length)
{
     440:	b570      	push	{r4, r5, r6, lr}
     442:	4605      	mov	r5, r0
     444:	460e      	mov	r6, r1
	_usart_async_enable(&MODEM_DATA);
     446:	4c05      	ldr	r4, [pc, #20]	; (45c <sendCommandToModem+0x1c>)
     448:	4620      	mov	r0, r4
     44a:	4b05      	ldr	r3, [pc, #20]	; (460 <sendCommandToModem+0x20>)
     44c:	4798      	blx	r3
	return usart_async_write(&MODEM_DATA, TxData, length);
     44e:	4632      	mov	r2, r6
     450:	4629      	mov	r1, r5
     452:	4620      	mov	r0, r4
     454:	4b03      	ldr	r3, [pc, #12]	; (464 <sendCommandToModem+0x24>)
     456:	4798      	blx	r3
}
     458:	bd70      	pop	{r4, r5, r6, pc}
     45a:	bf00      	nop
     45c:	20000000 	.word	0x20000000
     460:	00001b1d 	.word	0x00001b1d
     464:	000004f9 	.word	0x000004f9

00000468 <modemPowerInit>:

/* Perform the HL7618RD modem power on sequence */
/* I FEEL LIKE SOMETHING WRONG HERE */

void modemPowerInit(void)
{
     468:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     46a:	4c1d      	ldr	r4, [pc, #116]	; (4e0 <modemPowerInit+0x78>)
     46c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
     470:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     478:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
     47c:	4919      	ldr	r1, [pc, #100]	; (4e4 <modemPowerInit+0x7c>)
     47e:	f8c4 10a8 	str.w	r1, [r4, #168]	; 0xa8
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     482:	f894 20d0 	ldrb.w	r2, [r4, #208]	; 0xd0
	tmp &= ~PORT_PINCFG_PMUXEN;
     486:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     48a:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     48e:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     492:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     496:	60a0      	str	r0, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     498:	62a3      	str	r3, [r4, #40]	; 0x28
     49a:	4a13      	ldr	r2, [pc, #76]	; (4e8 <modemPowerInit+0x80>)
     49c:	62a2      	str	r2, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     49e:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4a6:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4aa:	6160      	str	r0, [r4, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4ac:	60a5      	str	r5, [r4, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ae:	62a3      	str	r3, [r4, #40]	; 0x28
     4b0:	62a1      	str	r1, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4b2:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ba:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4be:	6165      	str	r5, [r4, #20]

	gpio_set_pin_direction(MODEM_DTR, GPIO_DIRECTION_OUT);
	gpio_set_pin_function(MODEM_DTR, GPIO_PIN_FUNCTION_OFF);
	//gpio_set_pin_pull_mode(MODEM_DTR, GPIO_PULL_UP);
	gpio_set_pin_level(MODEM_DTR,false);
	delay_ms(500);
     4c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     4c4:	4e09      	ldr	r6, [pc, #36]	; (4ec <modemPowerInit+0x84>)
     4c6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4c8:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
	
	/* Give a short 50 ms positive pulse on MODEM ON Pin */
	gpio_set_pin_level(MODEM_ON,true);
	delay_ms(50);
     4cc:	2032      	movs	r0, #50	; 0x32
     4ce:	47b0      	blx	r6
	
	/* make MODEM ON to default level */
	//gpio_set_pin_level(MODEM_ON,false);
	delay_ms(3000);
     4d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
     4d4:	47b0      	blx	r6
	
	SerialDebugPrint((uint8_t*)"Modem Power On initialization Completed\r\n",41);
     4d6:	2129      	movs	r1, #41	; 0x29
     4d8:	4805      	ldr	r0, [pc, #20]	; (4f0 <modemPowerInit+0x88>)
     4da:	4b06      	ldr	r3, [pc, #24]	; (4f4 <modemPowerInit+0x8c>)
     4dc:	4798      	blx	r3
     4de:	bd70      	pop	{r4, r5, r6, pc}
     4e0:	41008000 	.word	0x41008000
     4e4:	c0000001 	.word	0xc0000001
     4e8:	c0000008 	.word	0xc0000008
     4ec:	00000f29 	.word	0x00000f29
     4f0:	00002a2c 	.word	0x00002a2c
     4f4:	0000057d 	.word	0x0000057d

000004f8 <usart_async_write>:
 *  Author: anilj
 */ 
#include "Apps/UartDriver/include/UartDriver.h"
uint8_t TxBuf[10] = {0};
int32_t usart_async_write(struct _usart_async_device *const device,const uint8_t *const buf, const uint16_t length)
{
     4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     4fc:	4604      	mov	r4, r0
     4fe:	460e      	mov	r6, r1
     500:	4691      	mov	r9, r2
	uint32_t offset = 0;
	
	while (!_usart_async_is_byte_sent(device));
     502:	4d0e      	ldr	r5, [pc, #56]	; (53c <usart_async_write+0x44>)
     504:	4620      	mov	r0, r4
     506:	47a8      	blx	r5
     508:	2800      	cmp	r0, #0
     50a:	d0fb      	beq.n	504 <usart_async_write+0xc>
     50c:	3e01      	subs	r6, #1
     50e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 540 <usart_async_write+0x48>
     512:	2700      	movs	r7, #0
	
	do {
		TxBuf[offset] = buf[offset];
		_usart_async_write_byte(device, buf[offset]);
     514:	f8df a02c 	ldr.w	sl, [pc, #44]	; 544 <usart_async_write+0x4c>
		while (!_usart_async_is_byte_sent(device))
     518:	4d08      	ldr	r5, [pc, #32]	; (53c <usart_async_write+0x44>)
		TxBuf[offset] = buf[offset];
     51a:	7873      	ldrb	r3, [r6, #1]
     51c:	f808 3b01 	strb.w	r3, [r8], #1
		_usart_async_write_byte(device, buf[offset]);
     520:	f816 1f01 	ldrb.w	r1, [r6, #1]!
     524:	4620      	mov	r0, r4
     526:	47d0      	blx	sl
		while (!_usart_async_is_byte_sent(device))
     528:	4620      	mov	r0, r4
     52a:	47a8      	blx	r5
     52c:	2800      	cmp	r0, #0
     52e:	d0fb      	beq.n	528 <usart_async_write+0x30>
		;
	} while (++offset < length);
     530:	3701      	adds	r7, #1
     532:	454f      	cmp	r7, r9
     534:	d3f1      	bcc.n	51a <usart_async_write+0x22>

	return (int32_t)offset;
}
     536:	4638      	mov	r0, r7
     538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     53c:	00001b3f 	.word	0x00001b3f
     540:	20000114 	.word	0x20000114
     544:	00001b31 	.word	0x00001b31

00000548 <SerialDebugTxByteSentCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
     548:	2302      	movs	r3, #2
     54a:	7603      	strb	r3, [r0, #24]
     54c:	4770      	bx	lr

0000054e <SerialDebugErrorCallBack>:
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     54e:	2380      	movs	r3, #128	; 0x80
     550:	7603      	strb	r3, [r0, #24]
     552:	4770      	bx	lr

00000554 <SerialDebugPrintInit>:
	.usart_cb.rx_done_cb = NULL,
	.usart_cb.error_cb = SerialDebugErrorCallBack,
};

void SerialDebugPrintInit(void)
{
     554:	b510      	push	{r4, lr}
	uint32_t initStatus;
	
	initStatus = _usart_async_init(&DEBUG_PRINT,SERCOM5);
     556:	4c05      	ldr	r4, [pc, #20]	; (56c <SerialDebugPrintInit+0x18>)
     558:	4905      	ldr	r1, [pc, #20]	; (570 <SerialDebugPrintInit+0x1c>)
     55a:	4620      	mov	r0, r4
     55c:	4b05      	ldr	r3, [pc, #20]	; (574 <SerialDebugPrintInit+0x20>)
     55e:	4798      	blx	r3
	{
		/* SERCOM5 initialization failed */	
	}
	
	/* Enable only the UART RX Interrupt */
	_usart_async_set_irq_state(&DEBUG_PRINT,USART_ASYNC_RX_DONE,true);
     560:	2201      	movs	r2, #1
     562:	4611      	mov	r1, r2
     564:	4620      	mov	r0, r4
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <SerialDebugPrintInit+0x24>)
     568:	4798      	blx	r3
     56a:	bd10      	pop	{r4, pc}
     56c:	2000001c 	.word	0x2000001c
     570:	43000400 	.word	0x43000400
     574:	00001ab9 	.word	0x00001ab9
     578:	00001b55 	.word	0x00001b55

0000057c <SerialDebugPrint>:
}


void SerialDebugPrint(const uint8_t *const dataToPrint,const uint16_t length)
{
     57c:	b570      	push	{r4, r5, r6, lr}
     57e:	4605      	mov	r5, r0
     580:	460e      	mov	r6, r1
	_usart_async_enable(&DEBUG_PRINT);
     582:	4c05      	ldr	r4, [pc, #20]	; (598 <SerialDebugPrint+0x1c>)
     584:	4620      	mov	r0, r4
     586:	4b05      	ldr	r3, [pc, #20]	; (59c <SerialDebugPrint+0x20>)
     588:	4798      	blx	r3
	
	usart_async_write(&DEBUG_PRINT, dataToPrint, length);
     58a:	4632      	mov	r2, r6
     58c:	4629      	mov	r1, r5
     58e:	4620      	mov	r0, r4
     590:	4b03      	ldr	r3, [pc, #12]	; (5a0 <SerialDebugPrint+0x24>)
     592:	4798      	blx	r3
     594:	bd70      	pop	{r4, r5, r6, pc}
     596:	bf00      	nop
     598:	2000001c 	.word	0x2000001c
     59c:	00001b1d 	.word	0x00001b1d
     5a0:	000004f9 	.word	0x000004f9

000005a4 <SerialDebugTxDoneCallBack>:
{
     5a4:	b510      	push	{r4, lr}
     5a6:	4604      	mov	r4, r0
	SerialDebugPrint((uint8_t*)"Tx serial Debug Done\r\n",22);
     5a8:	2116      	movs	r1, #22
     5aa:	4803      	ldr	r0, [pc, #12]	; (5b8 <SerialDebugTxDoneCallBack+0x14>)
     5ac:	4b03      	ldr	r3, [pc, #12]	; (5bc <SerialDebugTxDoneCallBack+0x18>)
     5ae:	4798      	blx	r3
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
     5b0:	2301      	movs	r3, #1
     5b2:	7623      	strb	r3, [r4, #24]
     5b4:	bd10      	pop	{r4, pc}
     5b6:	bf00      	nop
     5b8:	00002a88 	.word	0x00002a88
     5bc:	0000057d 	.word	0x0000057d

000005c0 <SERCOM5_2_Handler>:
/* UART Rx Interrupt Handler */ 
/*
 **** Just echo back the char entered on the serial terminal****
 */
void SERCOM5_2_Handler( void )
{
     5c0:	b538      	push	{r3, r4, r5, lr}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXC;
     5c2:	2204      	movs	r2, #4
     5c4:	4b0b      	ldr	r3, [pc, #44]	; (5f4 <SERCOM5_2_Handler+0x34>)
     5c6:	761a      	strb	r2, [r3, #24]
	//SerialDebugPrint((uint8_t*)"Serial Rx Complete CallBack\r\n",19);
	hri_sercomusart_clear_interrupt_RXC_bit(SERCOM5);
	
	while (!_usart_async_is_byte_received(&DEBUG_PRINT));
     5c8:	4d0b      	ldr	r5, [pc, #44]	; (5f8 <SERCOM5_2_Handler+0x38>)
     5ca:	4c0c      	ldr	r4, [pc, #48]	; (5fc <SERCOM5_2_Handler+0x3c>)
     5cc:	4628      	mov	r0, r5
     5ce:	47a0      	blx	r4
     5d0:	2800      	cmp	r0, #0
     5d2:	d0fb      	beq.n	5cc <SERCOM5_2_Handler+0xc>
	
	rcvdChar[0] = _usart_async_read_byte(&DEBUG_PRINT);
     5d4:	4808      	ldr	r0, [pc, #32]	; (5f8 <SERCOM5_2_Handler+0x38>)
     5d6:	4b0a      	ldr	r3, [pc, #40]	; (600 <SERCOM5_2_Handler+0x40>)
     5d8:	4798      	blx	r3
     5da:	490a      	ldr	r1, [pc, #40]	; (604 <SERCOM5_2_Handler+0x44>)
     5dc:	7008      	strb	r0, [r1, #0]
	rcvdChar[1] = '\0';
     5de:	2300      	movs	r3, #0
     5e0:	704b      	strb	r3, [r1, #1]
	sprintf((char*)printBuf,"%s",rcvdChar);
     5e2:	4c09      	ldr	r4, [pc, #36]	; (608 <SERCOM5_2_Handler+0x48>)
     5e4:	4620      	mov	r0, r4
     5e6:	4b09      	ldr	r3, [pc, #36]	; (60c <SERCOM5_2_Handler+0x4c>)
     5e8:	4798      	blx	r3
	SerialDebugPrint(printBuf,sizeof(printBuf));
     5ea:	2105      	movs	r1, #5
     5ec:	4620      	mov	r0, r4
     5ee:	4b08      	ldr	r3, [pc, #32]	; (610 <SERCOM5_2_Handler+0x50>)
     5f0:	4798      	blx	r3
     5f2:	bd38      	pop	{r3, r4, r5, pc}
     5f4:	43000400 	.word	0x43000400
     5f8:	2000001c 	.word	0x2000001c
     5fc:	00001b49 	.word	0x00001b49
     600:	00001b37 	.word	0x00001b37
     604:	2000080c 	.word	0x2000080c
     608:	20000810 	.word	0x20000810
     60c:	0000287d 	.word	0x0000287d
     610:	0000057d 	.word	0x0000057d

00000614 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
     614:	b508      	push	{r3, lr}
	system_init();
     616:	4b01      	ldr	r3, [pc, #4]	; (61c <atmel_start_init+0x8>)
     618:	4798      	blx	r3
     61a:	bd08      	pop	{r3, pc}
     61c:	00000d55 	.word	0x00000d55

00000620 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     620:	e7fe      	b.n	620 <Dummy_Handler>
	...

00000624 <Reset_Handler>:
{
     624:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     626:	4b1c      	ldr	r3, [pc, #112]	; (698 <Reset_Handler+0x74>)
     628:	4a1c      	ldr	r2, [pc, #112]	; (69c <Reset_Handler+0x78>)
     62a:	429a      	cmp	r2, r3
     62c:	d010      	beq.n	650 <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     62e:	4b1c      	ldr	r3, [pc, #112]	; (6a0 <Reset_Handler+0x7c>)
     630:	4a19      	ldr	r2, [pc, #100]	; (698 <Reset_Handler+0x74>)
     632:	429a      	cmp	r2, r3
     634:	d20c      	bcs.n	650 <Reset_Handler+0x2c>
     636:	3b01      	subs	r3, #1
     638:	1a9b      	subs	r3, r3, r2
     63a:	f023 0303 	bic.w	r3, r3, #3
     63e:	3304      	adds	r3, #4
     640:	4413      	add	r3, r2
     642:	4916      	ldr	r1, [pc, #88]	; (69c <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     644:	f851 0b04 	ldr.w	r0, [r1], #4
     648:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     64c:	429a      	cmp	r2, r3
     64e:	d1f9      	bne.n	644 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     650:	4b14      	ldr	r3, [pc, #80]	; (6a4 <Reset_Handler+0x80>)
     652:	4a15      	ldr	r2, [pc, #84]	; (6a8 <Reset_Handler+0x84>)
     654:	429a      	cmp	r2, r3
     656:	d20a      	bcs.n	66e <Reset_Handler+0x4a>
     658:	3b01      	subs	r3, #1
     65a:	1a9b      	subs	r3, r3, r2
     65c:	f023 0303 	bic.w	r3, r3, #3
     660:	3304      	adds	r3, #4
     662:	4413      	add	r3, r2
                *pDest++ = 0;
     664:	2100      	movs	r1, #0
     666:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     66a:	4293      	cmp	r3, r2
     66c:	d1fb      	bne.n	666 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     66e:	4b0f      	ldr	r3, [pc, #60]	; (6ac <Reset_Handler+0x88>)
     670:	4a0f      	ldr	r2, [pc, #60]	; (6b0 <Reset_Handler+0x8c>)
     672:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     676:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     678:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     67c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     688:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     68c:	4b09      	ldr	r3, [pc, #36]	; (6b4 <Reset_Handler+0x90>)
     68e:	4798      	blx	r3
        main();
     690:	4b09      	ldr	r3, [pc, #36]	; (6b8 <Reset_Handler+0x94>)
     692:	4798      	blx	r3
     694:	e7fe      	b.n	694 <Reset_Handler+0x70>
     696:	bf00      	nop
     698:	20000000 	.word	0x20000000
     69c:	00003014 	.word	0x00003014
     6a0:	200000f0 	.word	0x200000f0
     6a4:	200009d4 	.word	0x200009d4
     6a8:	200000f0 	.word	0x200000f0
     6ac:	e000ed00 	.word	0xe000ed00
     6b0:	00000000 	.word	0x00000000
     6b4:	00002835 	.word	0x00002835
     6b8:	000024f5 	.word	0x000024f5

000006bc <AC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBCMASK_AC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_AC;
     6bc:	4a04      	ldr	r2, [pc, #16]	; (6d0 <AC_0_CLOCK_init+0x14>)
     6be:	69d3      	ldr	r3, [r2, #28]
     6c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     6c4:	61d3      	str	r3, [r2, #28]
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     6c6:	2240      	movs	r2, #64	; 0x40
     6c8:	4b02      	ldr	r3, [pc, #8]	; (6d4 <AC_0_CLOCK_init+0x18>)
     6ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
     6ce:	4770      	bx	lr
     6d0:	40000800 	.word	0x40000800
     6d4:	40001c00 	.word	0x40001c00

000006d8 <AC_0_init>:
	hri_mclk_set_APBCMASK_AC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, AC_GCLK_ID, CONF_GCLK_AC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void AC_0_init(void)
{
     6d8:	b508      	push	{r3, lr}
	AC_0_CLOCK_init();
     6da:	4b03      	ldr	r3, [pc, #12]	; (6e8 <AC_0_init+0x10>)
     6dc:	4798      	blx	r3
	ac_sync_init(&AC_0, AC);
     6de:	4903      	ldr	r1, [pc, #12]	; (6ec <AC_0_init+0x14>)
     6e0:	4803      	ldr	r0, [pc, #12]	; (6f0 <AC_0_init+0x18>)
     6e2:	4b04      	ldr	r3, [pc, #16]	; (6f4 <AC_0_init+0x1c>)
     6e4:	4798      	blx	r3
     6e6:	bd08      	pop	{r3, pc}
     6e8:	000006bd 	.word	0x000006bd
     6ec:	42002000 	.word	0x42002000
     6f0:	200008b8 	.word	0x200008b8
     6f4:	00000e75 	.word	0x00000e75

000006f8 <ADC_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     6f8:	4b5d      	ldr	r3, [pc, #372]	; (870 <ADC_0_PORT_init+0x178>)
     6fa:	2204      	movs	r2, #4
     6fc:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6fe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     702:	629a      	str	r2, [r3, #40]	; 0x28
     704:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
     708:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     70a:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
	tmp &= ~PORT_PINCFG_PMUXEN;
     70e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     712:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     716:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     71a:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     71e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     722:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     726:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     72a:	2108      	movs	r1, #8
     72c:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     72e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     732:	6299      	str	r1, [r3, #40]	; 0x28
     734:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     736:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
	tmp &= ~PORT_PINCFG_PMUXEN;
     73a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     73e:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     742:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     746:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     74a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     74e:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     752:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     756:	f44f 7180 	mov.w	r1, #256	; 0x100
     75a:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     75e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     762:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     766:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     76a:	f893 10c8 	ldrb.w	r1, [r3, #200]	; 0xc8
	tmp &= ~PORT_PINCFG_PMUXEN;
     76e:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     772:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     776:	f883 10c8 	strb.w	r1, [r3, #200]	; 0xc8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     77a:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     77e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     782:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     786:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     78a:	f44f 7100 	mov.w	r1, #512	; 0x200
     78e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     792:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     796:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
     79a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     79e:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	tmp &= ~PORT_PINCFG_PMUXEN;
     7a2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7a6:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7aa:	f883 10c9 	strb.w	r1, [r3, #201]	; 0xc9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7ae:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     7b2:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     7b6:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7ba:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7be:	2110      	movs	r1, #16
     7c0:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7c2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     7c6:	6299      	str	r1, [r3, #40]	; 0x28
     7c8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7ca:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
	tmp &= ~PORT_PINCFG_PMUXEN;
     7ce:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7d2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7d6:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     7da:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     7de:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     7e2:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     7e6:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     7ea:	2120      	movs	r1, #32
     7ec:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7ee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     7f2:	6299      	str	r1, [r3, #40]	; 0x28
     7f4:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f6:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     7fa:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     7fe:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     802:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     806:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     80a:	f001 010f 	and.w	r1, r1, #15
	tmp |= PORT_PMUX_PMUXO(data);
     80e:	f041 0110 	orr.w	r1, r1, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     812:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     816:	2140      	movs	r1, #64	; 0x40
     818:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     81a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     81e:	6299      	str	r1, [r3, #40]	; 0x28
     820:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     822:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     826:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     82a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     82e:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     832:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     836:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     83a:	f041 0101 	orr.w	r1, r1, #1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     83e:	f883 1033 	strb.w	r1, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     842:	2180      	movs	r1, #128	; 0x80
     844:	6059      	str	r1, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     846:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
     84a:	6299      	str	r1, [r3, #40]	; 0x28
     84c:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     84e:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     852:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     856:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     85a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     85e:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     862:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     866:	f042 0210 	orr.w	r2, r2, #16
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     86a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
     86e:	4770      	bx	lr
     870:	41008000 	.word	0x41008000

00000874 <ADC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC0;
     874:	4a04      	ldr	r2, [pc, #16]	; (888 <ADC_0_CLOCK_init+0x14>)
     876:	6a13      	ldr	r3, [r2, #32]
     878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     87c:	6213      	str	r3, [r2, #32]
     87e:	2241      	movs	r2, #65	; 0x41
     880:	4b02      	ldr	r3, [pc, #8]	; (88c <ADC_0_CLOCK_init+0x18>)
     882:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
     886:	4770      	bx	lr
     888:	40000800 	.word	0x40000800
     88c:	40001c00 	.word	0x40001c00

00000890 <ADC_0_init>:
	hri_mclk_set_APBDMASK_ADC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC0_GCLK_ID, CONF_GCLK_ADC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_0_init(void)
{
     890:	b508      	push	{r3, lr}
	ADC_0_CLOCK_init();
     892:	4b05      	ldr	r3, [pc, #20]	; (8a8 <ADC_0_init+0x18>)
     894:	4798      	blx	r3
	ADC_0_PORT_init();
     896:	4b05      	ldr	r3, [pc, #20]	; (8ac <ADC_0_init+0x1c>)
     898:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC0, (void *)NULL);
     89a:	2200      	movs	r2, #0
     89c:	4904      	ldr	r1, [pc, #16]	; (8b0 <ADC_0_init+0x20>)
     89e:	4805      	ldr	r0, [pc, #20]	; (8b4 <ADC_0_init+0x24>)
     8a0:	4b05      	ldr	r3, [pc, #20]	; (8b8 <ADC_0_init+0x28>)
     8a2:	4798      	blx	r3
     8a4:	bd08      	pop	{r3, pc}
     8a6:	bf00      	nop
     8a8:	00000875 	.word	0x00000875
     8ac:	000006f9 	.word	0x000006f9
     8b0:	43001c00 	.word	0x43001c00
     8b4:	200008c8 	.word	0x200008c8
     8b8:	00000ea5 	.word	0x00000ea5

000008bc <ADC_1_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_ADC1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_ADC1;
     8bc:	4a04      	ldr	r2, [pc, #16]	; (8d0 <ADC_1_CLOCK_init+0x14>)
     8be:	6a13      	ldr	r3, [r2, #32]
     8c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     8c4:	6213      	str	r3, [r2, #32]
     8c6:	2240      	movs	r2, #64	; 0x40
     8c8:	4b02      	ldr	r3, [pc, #8]	; (8d4 <ADC_1_CLOCK_init+0x18>)
     8ca:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
     8ce:	4770      	bx	lr
     8d0:	40000800 	.word	0x40000800
     8d4:	40001c00 	.word	0x40001c00

000008d8 <ADC_1_init>:
	hri_mclk_set_APBDMASK_ADC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, ADC1_GCLK_ID, CONF_GCLK_ADC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void ADC_1_init(void)
{
     8d8:	b508      	push	{r3, lr}
	ADC_1_CLOCK_init();
     8da:	4b04      	ldr	r3, [pc, #16]	; (8ec <ADC_1_init+0x14>)
     8dc:	4798      	blx	r3
	ADC_1_PORT_init();
	adc_sync_init(&ADC_1, ADC1, (void *)NULL);
     8de:	2200      	movs	r2, #0
     8e0:	4903      	ldr	r1, [pc, #12]	; (8f0 <ADC_1_init+0x18>)
     8e2:	4804      	ldr	r0, [pc, #16]	; (8f4 <ADC_1_init+0x1c>)
     8e4:	4b04      	ldr	r3, [pc, #16]	; (8f8 <ADC_1_init+0x20>)
     8e6:	4798      	blx	r3
     8e8:	bd08      	pop	{r3, pc}
     8ea:	bf00      	nop
     8ec:	000008bd 	.word	0x000008bd
     8f0:	43002000 	.word	0x43002000
     8f4:	20000980 	.word	0x20000980
     8f8:	00000ea5 	.word	0x00000ea5

000008fc <DAC_0_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_DAC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_DAC;
     8fc:	4a04      	ldr	r2, [pc, #16]	; (910 <DAC_0_CLOCK_init+0x14>)
     8fe:	6a13      	ldr	r3, [r2, #32]
     900:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     904:	6213      	str	r3, [r2, #32]
     906:	2240      	movs	r2, #64	; 0x40
     908:	4b02      	ldr	r3, [pc, #8]	; (914 <DAC_0_CLOCK_init+0x18>)
     90a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     90e:	4770      	bx	lr
     910:	40000800 	.word	0x40000800
     914:	40001c00 	.word	0x40001c00

00000918 <DAC_0_init>:
	hri_mclk_set_APBDMASK_DAC_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, DAC_GCLK_ID, CONF_GCLK_DAC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void DAC_0_init(void)
{
     918:	b508      	push	{r3, lr}
	DAC_0_CLOCK_init();
     91a:	4b03      	ldr	r3, [pc, #12]	; (928 <DAC_0_init+0x10>)
     91c:	4798      	blx	r3
	dac_sync_init(&DAC_0, DAC);
     91e:	4903      	ldr	r1, [pc, #12]	; (92c <DAC_0_init+0x14>)
     920:	4803      	ldr	r0, [pc, #12]	; (930 <DAC_0_init+0x18>)
     922:	4b04      	ldr	r3, [pc, #16]	; (934 <DAC_0_init+0x1c>)
     924:	4798      	blx	r3
     926:	bd08      	pop	{r3, pc}
     928:	000008fd 	.word	0x000008fd
     92c:	43002400 	.word	0x43002400
     930:	200008f0 	.word	0x200008f0
     934:	00000ed5 	.word	0x00000ed5

00000938 <EXTERNAL_IRQ_0_init>:
	DAC_0_PORT_init();
}

void EXTERNAL_IRQ_0_init(void)
{
     938:	b508      	push	{r3, lr}
     93a:	2240      	movs	r2, #64	; 0x40
     93c:	4b05      	ldr	r3, [pc, #20]	; (954 <EXTERNAL_IRQ_0_init+0x1c>)
     93e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     942:	4a05      	ldr	r2, [pc, #20]	; (958 <EXTERNAL_IRQ_0_init+0x20>)
     944:	6953      	ldr	r3, [r2, #20]
     946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     94a:	6153      	str	r3, [r2, #20]
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);

	ext_irq_init();
     94c:	4b03      	ldr	r3, [pc, #12]	; (95c <EXTERNAL_IRQ_0_init+0x24>)
     94e:	4798      	blx	r3
     950:	bd08      	pop	{r3, pc}
     952:	bf00      	nop
     954:	40001c00 	.word	0x40001c00
     958:	40000800 	.word	0x40000800
     95c:	00000f8d 	.word	0x00000f8d

00000960 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     960:	b508      	push	{r3, lr}
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     962:	4a04      	ldr	r2, [pc, #16]	; (974 <EVENT_SYSTEM_0_init+0x14>)
     964:	6993      	ldr	r3, [r2, #24]
     966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     96a:	6193      	str	r3, [r2, #24]

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
	event_system_init();
     96c:	4b02      	ldr	r3, [pc, #8]	; (978 <EVENT_SYSTEM_0_init+0x18>)
     96e:	4798      	blx	r3
     970:	bd08      	pop	{r3, pc}
     972:	bf00      	nop
     974:	40000800 	.word	0x40000800
     978:	00000f49 	.word	0x00000f49

0000097c <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     97c:	4a02      	ldr	r2, [pc, #8]	; (988 <FLASH_0_CLOCK_init+0xc>)
     97e:	6913      	ldr	r3, [r2, #16]
     980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     984:	6113      	str	r3, [r2, #16]
     986:	4770      	bx	lr
     988:	40000800 	.word	0x40000800

0000098c <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     98c:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     98e:	4b03      	ldr	r3, [pc, #12]	; (99c <FLASH_0_init+0x10>)
     990:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     992:	4903      	ldr	r1, [pc, #12]	; (9a0 <FLASH_0_init+0x14>)
     994:	4803      	ldr	r0, [pc, #12]	; (9a4 <FLASH_0_init+0x18>)
     996:	4b04      	ldr	r3, [pc, #16]	; (9a8 <FLASH_0_init+0x1c>)
     998:	4798      	blx	r3
     99a:	bd08      	pop	{r3, pc}
     99c:	0000097d 	.word	0x0000097d
     9a0:	41004000 	.word	0x41004000
     9a4:	2000087c 	.word	0x2000087c
     9a8:	00000fc5 	.word	0x00000fc5

000009ac <ModemData_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ac:	4b10      	ldr	r3, [pc, #64]	; (9f0 <ModemData_PORT_init+0x44>)
     9ae:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     9b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9be:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     9c2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     9c6:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     9ce:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     9d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     9d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     9da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     9de:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     9e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     9e6:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     9ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
     9ee:	4770      	bx	lr
     9f0:	41008000 	.word	0x41008000

000009f4 <ModemData_CLOCK_init>:
     9f4:	4b06      	ldr	r3, [pc, #24]	; (a10 <ModemData_CLOCK_init+0x1c>)
     9f6:	2240      	movs	r2, #64	; 0x40
     9f8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     9fc:	224a      	movs	r2, #74	; 0x4a
     9fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     a02:	4a04      	ldr	r2, [pc, #16]	; (a14 <ModemData_CLOCK_init+0x20>)
     a04:	6993      	ldr	r3, [r2, #24]
     a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     a0a:	6193      	str	r3, [r2, #24]
     a0c:	4770      	bx	lr
     a0e:	bf00      	nop
     a10:	40001c00 	.word	0x40001c00
     a14:	40000800 	.word	0x40000800

00000a18 <ModemData_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void ModemData_init(void)
{
     a18:	b508      	push	{r3, lr}
	ModemData_CLOCK_init();
     a1a:	4b03      	ldr	r3, [pc, #12]	; (a28 <ModemData_init+0x10>)
     a1c:	4798      	blx	r3
	ModemDataCommInit();
     a1e:	4b03      	ldr	r3, [pc, #12]	; (a2c <ModemData_init+0x14>)
     a20:	4798      	blx	r3
	//usart_sync_init(&USART_3, SERCOM3, (void *)NULL);
	//ModemUsartOsInit();
	ModemData_PORT_init();
     a22:	4b03      	ldr	r3, [pc, #12]	; (a30 <ModemData_init+0x18>)
     a24:	4798      	blx	r3
     a26:	bd08      	pop	{r3, pc}
     a28:	000009f5 	.word	0x000009f5
     a2c:	000002d1 	.word	0x000002d1
     a30:	000009ad 	.word	0x000009ad

00000a34 <SerialDebug_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a34:	4b10      	ldr	r3, [pc, #64]	; (a78 <SerialDebug_PORT_init+0x44>)
     a36:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     a3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a3e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a42:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a46:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a4a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a4e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a52:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     a56:	f893 20d7 	ldrb.w	r2, [r3, #215]	; 0xd7
	tmp &= ~PORT_PINCFG_PMUXEN;
     a5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     a5e:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     a62:	f883 20d7 	strb.w	r2, [r3, #215]	; 0xd7
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     a66:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     a6a:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     a6e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     a72:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
     a76:	4770      	bx	lr
     a78:	41008000 	.word	0x41008000

00000a7c <SerialDebug_CLOCK_init>:
     a7c:	4b06      	ldr	r3, [pc, #24]	; (a98 <SerialDebug_CLOCK_init+0x1c>)
     a7e:	2240      	movs	r2, #64	; 0x40
     a80:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
     a84:	224a      	movs	r2, #74	; 0x4a
     a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5;
     a8a:	4a04      	ldr	r2, [pc, #16]	; (a9c <SerialDebug_CLOCK_init+0x20>)
     a8c:	6a13      	ldr	r3, [r2, #32]
     a8e:	f043 0302 	orr.w	r3, r3, #2
     a92:	6213      	str	r3, [r2, #32]
     a94:	4770      	bx	lr
     a96:	bf00      	nop
     a98:	40001c00 	.word	0x40001c00
     a9c:	40000800 	.word	0x40000800

00000aa0 <SerialDebug_init>:

	hri_mclk_set_APBDMASK_SERCOM5_bit(MCLK);
}

void SerialDebug_init(void)
{
     aa0:	b508      	push	{r3, lr}
	SerialDebug_CLOCK_init();
     aa2:	4b03      	ldr	r3, [pc, #12]	; (ab0 <SerialDebug_init+0x10>)
     aa4:	4798      	blx	r3
	SerialDebugPrintInit();
     aa6:	4b03      	ldr	r3, [pc, #12]	; (ab4 <SerialDebug_init+0x14>)
     aa8:	4798      	blx	r3
	SerialDebug_PORT_init();
     aaa:	4b03      	ldr	r3, [pc, #12]	; (ab8 <SerialDebug_init+0x18>)
     aac:	4798      	blx	r3
     aae:	bd08      	pop	{r3, pc}
     ab0:	00000a7d 	.word	0x00000a7d
     ab4:	00000555 	.word	0x00000555
     ab8:	00000a35 	.word	0x00000a35

00000abc <delay_driver_init>:
}

void delay_driver_init(void)
{
     abc:	b508      	push	{r3, lr}
	delay_init(SysTick);
     abe:	4802      	ldr	r0, [pc, #8]	; (ac8 <delay_driver_init+0xc>)
     ac0:	4b02      	ldr	r3, [pc, #8]	; (acc <delay_driver_init+0x10>)
     ac2:	4798      	blx	r3
     ac4:	bd08      	pop	{r3, pc}
     ac6:	bf00      	nop
     ac8:	e000e010 	.word	0xe000e010
     acc:	00000f15 	.word	0x00000f15

00000ad0 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC0;
     ad0:	4a04      	ldr	r2, [pc, #16]	; (ae4 <PWM_0_CLOCK_init+0x14>)
     ad2:	6953      	ldr	r3, [r2, #20]
     ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     ad8:	6153      	str	r3, [r2, #20]
     ada:	2240      	movs	r2, #64	; 0x40
     adc:	4b02      	ldr	r3, [pc, #8]	; (ae8 <PWM_0_CLOCK_init+0x18>)
     ade:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     ae2:	4770      	bx	lr
     ae4:	40000800 	.word	0x40000800
     ae8:	40001c00 	.word	0x40001c00

00000aec <PWM_0_init>:
	hri_mclk_set_APBAMASK_TC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC0_GCLK_ID, CONF_GCLK_TC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     aec:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     aee:	4b05      	ldr	r3, [pc, #20]	; (b04 <PWM_0_init+0x18>)
     af0:	4798      	blx	r3
	PWM_0_PORT_init();
	pwm_init(&PWM_0, TC0, _tc_get_pwm());
     af2:	4b05      	ldr	r3, [pc, #20]	; (b08 <PWM_0_init+0x1c>)
     af4:	4798      	blx	r3
     af6:	4602      	mov	r2, r0
     af8:	4904      	ldr	r1, [pc, #16]	; (b0c <PWM_0_init+0x20>)
     afa:	4805      	ldr	r0, [pc, #20]	; (b10 <PWM_0_init+0x24>)
     afc:	4b05      	ldr	r3, [pc, #20]	; (b14 <PWM_0_init+0x28>)
     afe:	4798      	blx	r3
     b00:	bd08      	pop	{r3, pc}
     b02:	bf00      	nop
     b04:	00000ad1 	.word	0x00000ad1
     b08:	0000240d 	.word	0x0000240d
     b0c:	40003800 	.word	0x40003800
     b10:	20000844 	.word	0x20000844
     b14:	00001021 	.word	0x00001021

00000b18 <PWM_1_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_TC1;
     b18:	4a04      	ldr	r2, [pc, #16]	; (b2c <PWM_1_CLOCK_init+0x14>)
     b1a:	6953      	ldr	r3, [r2, #20]
     b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
     b20:	6153      	str	r3, [r2, #20]
     b22:	2240      	movs	r2, #64	; 0x40
     b24:	4b02      	ldr	r3, [pc, #8]	; (b30 <PWM_1_CLOCK_init+0x18>)
     b26:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
     b2a:	4770      	bx	lr
     b2c:	40000800 	.word	0x40000800
     b30:	40001c00 	.word	0x40001c00

00000b34 <PWM_1_init>:
	hri_mclk_set_APBAMASK_TC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC1_GCLK_ID, CONF_GCLK_TC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_1_init(void)
{
     b34:	b508      	push	{r3, lr}
	PWM_1_CLOCK_init();
     b36:	4b05      	ldr	r3, [pc, #20]	; (b4c <PWM_1_init+0x18>)
     b38:	4798      	blx	r3
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC1, _tc_get_pwm());
     b3a:	4b05      	ldr	r3, [pc, #20]	; (b50 <PWM_1_init+0x1c>)
     b3c:	4798      	blx	r3
     b3e:	4602      	mov	r2, r0
     b40:	4904      	ldr	r1, [pc, #16]	; (b54 <PWM_1_init+0x20>)
     b42:	4805      	ldr	r0, [pc, #20]	; (b58 <PWM_1_init+0x24>)
     b44:	4b05      	ldr	r3, [pc, #20]	; (b5c <PWM_1_init+0x28>)
     b46:	4798      	blx	r3
     b48:	bd08      	pop	{r3, pc}
     b4a:	bf00      	nop
     b4c:	00000b19 	.word	0x00000b19
     b50:	0000240d 	.word	0x0000240d
     b54:	40003c00 	.word	0x40003c00
     b58:	20000964 	.word	0x20000964
     b5c:	00001021 	.word	0x00001021

00000b60 <PWM_2_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC2;
     b60:	4a04      	ldr	r2, [pc, #16]	; (b74 <PWM_2_CLOCK_init+0x14>)
     b62:	6993      	ldr	r3, [r2, #24]
     b64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     b68:	6193      	str	r3, [r2, #24]
     b6a:	2240      	movs	r2, #64	; 0x40
     b6c:	4b02      	ldr	r3, [pc, #8]	; (b78 <PWM_2_CLOCK_init+0x18>)
     b6e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
     b72:	4770      	bx	lr
     b74:	40000800 	.word	0x40000800
     b78:	40001c00 	.word	0x40001c00

00000b7c <PWM_2_init>:
	hri_mclk_set_APBBMASK_TC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TC2_GCLK_ID, CONF_GCLK_TC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_2_init(void)
{
     b7c:	b508      	push	{r3, lr}
	PWM_2_CLOCK_init();
     b7e:	4b05      	ldr	r3, [pc, #20]	; (b94 <PWM_2_init+0x18>)
     b80:	4798      	blx	r3
	PWM_2_PORT_init();
	pwm_init(&PWM_2, TC2, _tc_get_pwm());
     b82:	4b05      	ldr	r3, [pc, #20]	; (b98 <PWM_2_init+0x1c>)
     b84:	4798      	blx	r3
     b86:	4602      	mov	r2, r0
     b88:	4904      	ldr	r1, [pc, #16]	; (b9c <PWM_2_init+0x20>)
     b8a:	4805      	ldr	r0, [pc, #20]	; (ba0 <PWM_2_init+0x24>)
     b8c:	4b05      	ldr	r3, [pc, #20]	; (ba4 <PWM_2_init+0x28>)
     b8e:	4798      	blx	r3
     b90:	bd08      	pop	{r3, pc}
     b92:	bf00      	nop
     b94:	00000b61 	.word	0x00000b61
     b98:	0000240d 	.word	0x0000240d
     b9c:	4101a000 	.word	0x4101a000
     ba0:	20000860 	.word	0x20000860
     ba4:	00001021 	.word	0x00001021

00000ba8 <TIMER_3_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     ba8:	4a04      	ldr	r2, [pc, #16]	; (bbc <TIMER_3_CLOCK_init+0x14>)
     baa:	6993      	ldr	r3, [r2, #24]
     bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     bb0:	6193      	str	r3, [r2, #24]
     bb2:	2240      	movs	r2, #64	; 0x40
     bb4:	4b02      	ldr	r3, [pc, #8]	; (bc0 <TIMER_3_CLOCK_init+0x18>)
     bb6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     bba:	4770      	bx	lr
     bbc:	40000800 	.word	0x40000800
     bc0:	40001c00 	.word	0x40001c00

00000bc4 <TIMER_3_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_3_init(void)
{
     bc4:	b508      	push	{r3, lr}
	TIMER_3_CLOCK_init();
     bc6:	4b05      	ldr	r3, [pc, #20]	; (bdc <TIMER_3_init+0x18>)
     bc8:	4798      	blx	r3
	timer_init(&TIMER_3, TCC0, _tcc_get_timer());
     bca:	4b05      	ldr	r3, [pc, #20]	; (be0 <TIMER_3_init+0x1c>)
     bcc:	4798      	blx	r3
     bce:	4602      	mov	r2, r0
     bd0:	4904      	ldr	r1, [pc, #16]	; (be4 <TIMER_3_init+0x20>)
     bd2:	4805      	ldr	r0, [pc, #20]	; (be8 <TIMER_3_init+0x24>)
     bd4:	4b05      	ldr	r3, [pc, #20]	; (bec <TIMER_3_init+0x28>)
     bd6:	4798      	blx	r3
     bd8:	bd08      	pop	{r3, pc}
     bda:	bf00      	nop
     bdc:	00000ba9 	.word	0x00000ba9
     be0:	00001ec5 	.word	0x00001ec5
     be4:	41016000 	.word	0x41016000
     be8:	20000984 	.word	0x20000984
     bec:	0000113d 	.word	0x0000113d

00000bf0 <TIMER_4_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC1;
     bf0:	4a04      	ldr	r2, [pc, #16]	; (c04 <TIMER_4_CLOCK_init+0x14>)
     bf2:	6993      	ldr	r3, [r2, #24]
     bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
     bf8:	6193      	str	r3, [r2, #24]
     bfa:	2240      	movs	r2, #64	; 0x40
     bfc:	4b02      	ldr	r3, [pc, #8]	; (c08 <TIMER_4_CLOCK_init+0x18>)
     bfe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     c02:	4770      	bx	lr
     c04:	40000800 	.word	0x40000800
     c08:	40001c00 	.word	0x40001c00

00000c0c <TIMER_4_init>:
	hri_mclk_set_APBBMASK_TCC1_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC1_GCLK_ID, CONF_GCLK_TCC1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_4_init(void)
{
     c0c:	b508      	push	{r3, lr}
	TIMER_4_CLOCK_init();
     c0e:	4b05      	ldr	r3, [pc, #20]	; (c24 <TIMER_4_init+0x18>)
     c10:	4798      	blx	r3
	timer_init(&TIMER_4, TCC1, _tcc_get_timer());
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <TIMER_4_init+0x1c>)
     c14:	4798      	blx	r3
     c16:	4602      	mov	r2, r0
     c18:	4904      	ldr	r1, [pc, #16]	; (c2c <TIMER_4_init+0x20>)
     c1a:	4805      	ldr	r0, [pc, #20]	; (c30 <TIMER_4_init+0x24>)
     c1c:	4b05      	ldr	r3, [pc, #20]	; (c34 <TIMER_4_init+0x28>)
     c1e:	4798      	blx	r3
     c20:	bd08      	pop	{r3, pc}
     c22:	bf00      	nop
     c24:	00000bf1 	.word	0x00000bf1
     c28:	00001ec5 	.word	0x00001ec5
     c2c:	41018000 	.word	0x41018000
     c30:	200008cc 	.word	0x200008cc
     c34:	0000113d 	.word	0x0000113d

00000c38 <TIMER_5_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC2;
     c38:	4a04      	ldr	r2, [pc, #16]	; (c4c <TIMER_5_CLOCK_init+0x14>)
     c3a:	69d3      	ldr	r3, [r2, #28]
     c3c:	f043 0308 	orr.w	r3, r3, #8
     c40:	61d3      	str	r3, [r2, #28]
     c42:	2240      	movs	r2, #64	; 0x40
     c44:	4b02      	ldr	r3, [pc, #8]	; (c50 <TIMER_5_CLOCK_init+0x18>)
     c46:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     c4a:	4770      	bx	lr
     c4c:	40000800 	.word	0x40000800
     c50:	40001c00 	.word	0x40001c00

00000c54 <TIMER_5_init>:
	hri_mclk_set_APBCMASK_TCC2_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC2_GCLK_ID, CONF_GCLK_TCC2_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_5_init(void)
{
     c54:	b508      	push	{r3, lr}
	TIMER_5_CLOCK_init();
     c56:	4b05      	ldr	r3, [pc, #20]	; (c6c <TIMER_5_init+0x18>)
     c58:	4798      	blx	r3
	timer_init(&TIMER_5, TCC2, _tcc_get_timer());
     c5a:	4b05      	ldr	r3, [pc, #20]	; (c70 <TIMER_5_init+0x1c>)
     c5c:	4798      	blx	r3
     c5e:	4602      	mov	r2, r0
     c60:	4904      	ldr	r1, [pc, #16]	; (c74 <TIMER_5_init+0x20>)
     c62:	4805      	ldr	r0, [pc, #20]	; (c78 <TIMER_5_init+0x24>)
     c64:	4b05      	ldr	r3, [pc, #20]	; (c7c <TIMER_5_init+0x28>)
     c66:	4798      	blx	r3
     c68:	bd08      	pop	{r3, pc}
     c6a:	bf00      	nop
     c6c:	00000c39 	.word	0x00000c39
     c70:	00001ec5 	.word	0x00001ec5
     c74:	42000c00 	.word	0x42000c00
     c78:	20000924 	.word	0x20000924
     c7c:	0000113d 	.word	0x0000113d

00000c80 <TIMER_6_CLOCK_init>:
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TCC3;
     c80:	4a04      	ldr	r2, [pc, #16]	; (c94 <TIMER_6_CLOCK_init+0x14>)
     c82:	69d3      	ldr	r3, [r2, #28]
     c84:	f043 0310 	orr.w	r3, r3, #16
     c88:	61d3      	str	r3, [r2, #28]
     c8a:	2240      	movs	r2, #64	; 0x40
     c8c:	4b02      	ldr	r3, [pc, #8]	; (c98 <TIMER_6_CLOCK_init+0x18>)
     c8e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
     c92:	4770      	bx	lr
     c94:	40000800 	.word	0x40000800
     c98:	40001c00 	.word	0x40001c00

00000c9c <TIMER_6_init>:
	hri_mclk_set_APBCMASK_TCC3_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC3_GCLK_ID, CONF_GCLK_TCC3_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_6_init(void)
{
     c9c:	b508      	push	{r3, lr}
	TIMER_6_CLOCK_init();
     c9e:	4b05      	ldr	r3, [pc, #20]	; (cb4 <TIMER_6_init+0x18>)
     ca0:	4798      	blx	r3
	timer_init(&TIMER_6, TCC3, _tcc_get_timer());
     ca2:	4b05      	ldr	r3, [pc, #20]	; (cb8 <TIMER_6_init+0x1c>)
     ca4:	4798      	blx	r3
     ca6:	4602      	mov	r2, r0
     ca8:	4904      	ldr	r1, [pc, #16]	; (cbc <TIMER_6_init+0x20>)
     caa:	4805      	ldr	r0, [pc, #20]	; (cc0 <TIMER_6_init+0x24>)
     cac:	4b05      	ldr	r3, [pc, #20]	; (cc4 <TIMER_6_init+0x28>)
     cae:	4798      	blx	r3
     cb0:	bd08      	pop	{r3, pc}
     cb2:	bf00      	nop
     cb4:	00000c81 	.word	0x00000c81
     cb8:	00001ec5 	.word	0x00001ec5
     cbc:	42001000 	.word	0x42001000
     cc0:	20000944 	.word	0x20000944
     cc4:	0000113d 	.word	0x0000113d

00000cc8 <TIMER_7_CLOCK_init>:
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_TCC4;
     cc8:	4a04      	ldr	r2, [pc, #16]	; (cdc <TIMER_7_CLOCK_init+0x14>)
     cca:	6a13      	ldr	r3, [r2, #32]
     ccc:	f043 0310 	orr.w	r3, r3, #16
     cd0:	6213      	str	r3, [r2, #32]
     cd2:	2240      	movs	r2, #64	; 0x40
     cd4:	4b02      	ldr	r3, [pc, #8]	; (ce0 <TIMER_7_CLOCK_init+0x18>)
     cd6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     cda:	4770      	bx	lr
     cdc:	40000800 	.word	0x40000800
     ce0:	40001c00 	.word	0x40001c00

00000ce4 <TIMER_7_init>:
	hri_mclk_set_APBDMASK_TCC4_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC4_GCLK_ID, CONF_GCLK_TCC4_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void TIMER_7_init(void)
{
     ce4:	b508      	push	{r3, lr}
	TIMER_7_CLOCK_init();
     ce6:	4b05      	ldr	r3, [pc, #20]	; (cfc <TIMER_7_init+0x18>)
     ce8:	4798      	blx	r3
	timer_init(&TIMER_7, TCC4, _tcc_get_timer());
     cea:	4b05      	ldr	r3, [pc, #20]	; (d00 <TIMER_7_init+0x1c>)
     cec:	4798      	blx	r3
     cee:	4602      	mov	r2, r0
     cf0:	4904      	ldr	r1, [pc, #16]	; (d04 <TIMER_7_init+0x20>)
     cf2:	4805      	ldr	r0, [pc, #20]	; (d08 <TIMER_7_init+0x24>)
     cf4:	4b05      	ldr	r3, [pc, #20]	; (d0c <TIMER_7_init+0x28>)
     cf6:	4798      	blx	r3
     cf8:	bd08      	pop	{r3, pc}
     cfa:	bf00      	nop
     cfc:	00000cc9 	.word	0x00000cc9
     d00:	00001ec5 	.word	0x00001ec5
     d04:	43001000 	.word	0x43001000
     d08:	20000898 	.word	0x20000898
     d0c:	0000113d 	.word	0x0000113d

00000d10 <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     d10:	4a02      	ldr	r2, [pc, #8]	; (d1c <WDT_0_CLOCK_init+0xc>)
     d12:	6953      	ldr	r3, [r2, #20]
     d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     d18:	6153      	str	r3, [r2, #20]
     d1a:	4770      	bx	lr
     d1c:	40000800 	.word	0x40000800

00000d20 <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     d20:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     d22:	4b06      	ldr	r3, [pc, #24]	; (d3c <WDT_0_init+0x1c>)
     d24:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     d26:	2252      	movs	r2, #82	; 0x52
     d28:	4905      	ldr	r1, [pc, #20]	; (d40 <WDT_0_init+0x20>)
     d2a:	2001      	movs	r0, #1
     d2c:	4b05      	ldr	r3, [pc, #20]	; (d44 <WDT_0_init+0x24>)
     d2e:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     d30:	4805      	ldr	r0, [pc, #20]	; (d48 <WDT_0_init+0x28>)
     d32:	4b06      	ldr	r3, [pc, #24]	; (d4c <WDT_0_init+0x2c>)
     d34:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     d36:	4b06      	ldr	r3, [pc, #24]	; (d50 <WDT_0_init+0x30>)
     d38:	4798      	blx	r3
     d3a:	bd08      	pop	{r3, pc}
     d3c:	00000d11 	.word	0x00000d11
     d40:	00002aac 	.word	0x00002aac
     d44:	00001181 	.word	0x00001181
     d48:	200008ec 	.word	0x200008ec
     d4c:	40002000 	.word	0x40002000
     d50:	00002489 	.word	0x00002489

00000d54 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     d58:	4b28      	ldr	r3, [pc, #160]	; (dfc <system_init+0xa8>)
     d5a:	4798      	blx	r3
	init_mcu();

	AC_0_init();
     d5c:	4b28      	ldr	r3, [pc, #160]	; (e00 <system_init+0xac>)
     d5e:	4798      	blx	r3

	ADC_0_init();
     d60:	4b28      	ldr	r3, [pc, #160]	; (e04 <system_init+0xb0>)
     d62:	4798      	blx	r3

	ADC_1_init();
     d64:	4b28      	ldr	r3, [pc, #160]	; (e08 <system_init+0xb4>)
     d66:	4798      	blx	r3

	DAC_0_init();
     d68:	4b28      	ldr	r3, [pc, #160]	; (e0c <system_init+0xb8>)
     d6a:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     d6c:	4b28      	ldr	r3, [pc, #160]	; (e10 <system_init+0xbc>)
     d6e:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     d70:	4b28      	ldr	r3, [pc, #160]	; (e14 <system_init+0xc0>)
     d72:	4798      	blx	r3

	FLASH_0_init();
     d74:	4b28      	ldr	r3, [pc, #160]	; (e18 <system_init+0xc4>)
     d76:	4798      	blx	r3

	SerialDebug_init();
     d78:	4b28      	ldr	r3, [pc, #160]	; (e1c <system_init+0xc8>)
     d7a:	4798      	blx	r3
	
	ModemData_init();
     d7c:	4b28      	ldr	r3, [pc, #160]	; (e20 <system_init+0xcc>)
     d7e:	4798      	blx	r3

	delay_driver_init();
     d80:	4b28      	ldr	r3, [pc, #160]	; (e24 <system_init+0xd0>)
     d82:	4798      	blx	r3

	PWM_0_init();
     d84:	4b28      	ldr	r3, [pc, #160]	; (e28 <system_init+0xd4>)
     d86:	4798      	blx	r3

	PWM_1_init();
     d88:	4b28      	ldr	r3, [pc, #160]	; (e2c <system_init+0xd8>)
     d8a:	4798      	blx	r3

	PWM_2_init();
     d8c:	4b28      	ldr	r3, [pc, #160]	; (e30 <system_init+0xdc>)
     d8e:	4798      	blx	r3
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TC3;
     d90:	4c28      	ldr	r4, [pc, #160]	; (e34 <system_init+0xe0>)
     d92:	69a3      	ldr	r3, [r4, #24]
     d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d98:	61a3      	str	r3, [r4, #24]
     d9a:	4f27      	ldr	r7, [pc, #156]	; (e38 <system_init+0xe4>)
     d9c:	f04f 0840 	mov.w	r8, #64	; 0x40
     da0:	f8c7 80e8 	str.w	r8, [r7, #232]	; 0xe8
	timer_init(&TIMER_0, TC3, _tc_get_timer());
     da4:	4e25      	ldr	r6, [pc, #148]	; (e3c <system_init+0xe8>)
     da6:	47b0      	blx	r6
     da8:	4602      	mov	r2, r0
     daa:	4925      	ldr	r1, [pc, #148]	; (e40 <system_init+0xec>)
     dac:	4825      	ldr	r0, [pc, #148]	; (e44 <system_init+0xf0>)
     dae:	4d26      	ldr	r5, [pc, #152]	; (e48 <system_init+0xf4>)
     db0:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC4;
     db2:	69e3      	ldr	r3, [r4, #28]
     db4:	f043 0320 	orr.w	r3, r3, #32
     db8:	61e3      	str	r3, [r4, #28]
     dba:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_1, TC4, _tc_get_timer());
     dbe:	47b0      	blx	r6
     dc0:	4602      	mov	r2, r0
     dc2:	4922      	ldr	r1, [pc, #136]	; (e4c <system_init+0xf8>)
     dc4:	4822      	ldr	r0, [pc, #136]	; (e50 <system_init+0xfc>)
     dc6:	47a8      	blx	r5
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_TC5;
     dc8:	69e3      	ldr	r3, [r4, #28]
     dca:	ea43 0308 	orr.w	r3, r3, r8
     dce:	61e3      	str	r3, [r4, #28]
     dd0:	f8c7 80f8 	str.w	r8, [r7, #248]	; 0xf8
	timer_init(&TIMER_2, TC5, _tc_get_timer());
     dd4:	47b0      	blx	r6
     dd6:	4602      	mov	r2, r0
     dd8:	491e      	ldr	r1, [pc, #120]	; (e54 <system_init+0x100>)
     dda:	481f      	ldr	r0, [pc, #124]	; (e58 <system_init+0x104>)
     ddc:	47a8      	blx	r5

	TIMER_0_init();
	TIMER_1_init();
	TIMER_2_init();
	TIMER_3_init();
     dde:	4b1f      	ldr	r3, [pc, #124]	; (e5c <system_init+0x108>)
     de0:	4798      	blx	r3

	TIMER_4_init();
     de2:	4b1f      	ldr	r3, [pc, #124]	; (e60 <system_init+0x10c>)
     de4:	4798      	blx	r3

	TIMER_5_init();
     de6:	4b1f      	ldr	r3, [pc, #124]	; (e64 <system_init+0x110>)
     de8:	4798      	blx	r3

	TIMER_6_init();
     dea:	4b1f      	ldr	r3, [pc, #124]	; (e68 <system_init+0x114>)
     dec:	4798      	blx	r3

	TIMER_7_init();
     dee:	4b1f      	ldr	r3, [pc, #124]	; (e6c <system_init+0x118>)
     df0:	4798      	blx	r3

	WDT_0_init();
     df2:	4b1f      	ldr	r3, [pc, #124]	; (e70 <system_init+0x11c>)
     df4:	4798      	blx	r3
     df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     dfa:	bf00      	nop
     dfc:	0000138d 	.word	0x0000138d
     e00:	000006d9 	.word	0x000006d9
     e04:	00000891 	.word	0x00000891
     e08:	000008d9 	.word	0x000008d9
     e0c:	00000919 	.word	0x00000919
     e10:	00000939 	.word	0x00000939
     e14:	00000961 	.word	0x00000961
     e18:	0000098d 	.word	0x0000098d
     e1c:	00000aa1 	.word	0x00000aa1
     e20:	00000a19 	.word	0x00000a19
     e24:	00000abd 	.word	0x00000abd
     e28:	00000aed 	.word	0x00000aed
     e2c:	00000b35 	.word	0x00000b35
     e30:	00000b7d 	.word	0x00000b7d
     e34:	40000800 	.word	0x40000800
     e38:	40001c00 	.word	0x40001c00
     e3c:	00002405 	.word	0x00002405
     e40:	4101c000 	.word	0x4101c000
     e44:	200009a4 	.word	0x200009a4
     e48:	0000113d 	.word	0x0000113d
     e4c:	42001400 	.word	0x42001400
     e50:	20000904 	.word	0x20000904
     e54:	42001800 	.word	0x42001800
     e58:	20000824 	.word	0x20000824
     e5c:	00000bc5 	.word	0x00000bc5
     e60:	00000c0d 	.word	0x00000c0d
     e64:	00000c55 	.word	0x00000c55
     e68:	00000c9d 	.word	0x00000c9d
     e6c:	00000ce5 	.word	0x00000ce5
     e70:	00000d21 	.word	0x00000d21

00000e74 <ac_sync_init>:

/**
 * \brief Initialize the AC HAL instance and hardware.
 */
int32_t ac_sync_init(struct ac_sync_descriptor *const descr, void *const hw)
{
     e74:	b538      	push	{r3, r4, r5, lr}
     e76:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     e78:	4605      	mov	r5, r0
     e7a:	b158      	cbz	r0, e94 <ac_sync_init+0x20>
     e7c:	1c08      	adds	r0, r1, #0
     e7e:	bf18      	it	ne
     e80:	2001      	movne	r0, #1
     e82:	223b      	movs	r2, #59	; 0x3b
     e84:	4904      	ldr	r1, [pc, #16]	; (e98 <ac_sync_init+0x24>)
     e86:	4b05      	ldr	r3, [pc, #20]	; (e9c <ac_sync_init+0x28>)
     e88:	4798      	blx	r3

	return _ac_sync_init(&descr->device, hw);
     e8a:	4621      	mov	r1, r4
     e8c:	4628      	mov	r0, r5
     e8e:	4b04      	ldr	r3, [pc, #16]	; (ea0 <ac_sync_init+0x2c>)
     e90:	4798      	blx	r3
}
     e92:	bd38      	pop	{r3, r4, r5, pc}
     e94:	2000      	movs	r0, #0
     e96:	e7f4      	b.n	e82 <ac_sync_init+0xe>
     e98:	00002ac8 	.word	0x00002ac8
     e9c:	00001181 	.word	0x00001181
     ea0:	00001255 	.word	0x00001255

00000ea4 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     ea4:	b538      	push	{r3, r4, r5, lr}
     ea6:	460c      	mov	r4, r1
	ASSERT(descr && hw);
     ea8:	4605      	mov	r5, r0
     eaa:	b158      	cbz	r0, ec4 <adc_sync_init+0x20>
     eac:	1c08      	adds	r0, r1, #0
     eae:	bf18      	it	ne
     eb0:	2001      	movne	r0, #1
     eb2:	2243      	movs	r2, #67	; 0x43
     eb4:	4904      	ldr	r1, [pc, #16]	; (ec8 <adc_sync_init+0x24>)
     eb6:	4b05      	ldr	r3, [pc, #20]	; (ecc <adc_sync_init+0x28>)
     eb8:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     eba:	4621      	mov	r1, r4
     ebc:	4628      	mov	r0, r5
     ebe:	4b04      	ldr	r3, [pc, #16]	; (ed0 <adc_sync_init+0x2c>)
     ec0:	4798      	blx	r3
}
     ec2:	bd38      	pop	{r3, r4, r5, pc}
     ec4:	2000      	movs	r0, #0
     ec6:	e7f4      	b.n	eb2 <adc_sync_init+0xe>
     ec8:	00002ae4 	.word	0x00002ae4
     ecc:	00001181 	.word	0x00001181
     ed0:	0000132d 	.word	0x0000132d

00000ed4 <dac_sync_init>:

/**
 * \brief Initialize the DAC HAL instance and hardware.
 */
int32_t dac_sync_init(struct dac_sync_descriptor *const descr, void *const hw)
{
     ed4:	b538      	push	{r3, r4, r5, lr}
     ed6:	460d      	mov	r5, r1
	uint8_t i;
	int32_t rc;

	ASSERT(descr && hw);
     ed8:	4604      	mov	r4, r0
     eda:	b198      	cbz	r0, f04 <dac_sync_init+0x30>
     edc:	1c08      	adds	r0, r1, #0
     ede:	bf18      	it	ne
     ee0:	2001      	movne	r0, #1
     ee2:	223c      	movs	r2, #60	; 0x3c
     ee4:	4908      	ldr	r1, [pc, #32]	; (f08 <dac_sync_init+0x34>)
     ee6:	4b09      	ldr	r3, [pc, #36]	; (f0c <dac_sync_init+0x38>)
     ee8:	4798      	blx	r3

	rc = _dac_sync_init(&descr->device, hw);
     eea:	4629      	mov	r1, r5
     eec:	4620      	mov	r0, r4
     eee:	4b08      	ldr	r3, [pc, #32]	; (f10 <dac_sync_init+0x3c>)
     ef0:	4798      	blx	r3
	if (rc) {
     ef2:	4602      	mov	r2, r0
     ef4:	b920      	cbnz	r0, f00 <dac_sync_init+0x2c>
		return rc;
	}

	for (i = 0; i < CHANNEL_NUM; i++) {
		descr->sel_ch[i].buffer = NULL;
     ef6:	2300      	movs	r3, #0
     ef8:	6063      	str	r3, [r4, #4]
		descr->sel_ch[i].length = 0;
     efa:	60a3      	str	r3, [r4, #8]
		descr->sel_ch[i].buffer = NULL;
     efc:	60e3      	str	r3, [r4, #12]
		descr->sel_ch[i].length = 0;
     efe:	6123      	str	r3, [r4, #16]
	}

	return ERR_NONE;
}
     f00:	4610      	mov	r0, r2
     f02:	bd38      	pop	{r3, r4, r5, pc}
     f04:	2000      	movs	r0, #0
     f06:	e7ec      	b.n	ee2 <dac_sync_init+0xe>
     f08:	00002b00 	.word	0x00002b00
     f0c:	00001181 	.word	0x00001181
     f10:	00001445 	.word	0x00001445

00000f14 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     f14:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     f16:	4b02      	ldr	r3, [pc, #8]	; (f20 <delay_init+0xc>)
     f18:	6018      	str	r0, [r3, #0]
     f1a:	4b02      	ldr	r3, [pc, #8]	; (f24 <delay_init+0x10>)
     f1c:	4798      	blx	r3
     f1e:	bd08      	pop	{r3, pc}
     f20:	20000120 	.word	0x20000120
     f24:	00001bc1 	.word	0x00001bc1

00000f28 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     f28:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     f2a:	4b04      	ldr	r3, [pc, #16]	; (f3c <delay_ms+0x14>)
     f2c:	681c      	ldr	r4, [r3, #0]
     f2e:	4b04      	ldr	r3, [pc, #16]	; (f40 <delay_ms+0x18>)
     f30:	4798      	blx	r3
     f32:	4601      	mov	r1, r0
     f34:	4620      	mov	r0, r4
     f36:	4b03      	ldr	r3, [pc, #12]	; (f44 <delay_ms+0x1c>)
     f38:	4798      	blx	r3
     f3a:	bd10      	pop	{r4, pc}
     f3c:	20000120 	.word	0x20000120
     f40:	00001381 	.word	0x00001381
     f44:	00001bd5 	.word	0x00001bd5

00000f48 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     f48:	b508      	push	{r3, lr}
	return _event_system_init();
     f4a:	4b01      	ldr	r3, [pc, #4]	; (f50 <event_system_init+0x8>)
     f4c:	4798      	blx	r3
}
     f4e:	bd08      	pop	{r3, pc}
     f50:	00001681 	.word	0x00001681

00000f54 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     f54:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     f56:	4b0c      	ldr	r3, [pc, #48]	; (f88 <process_ext_irq+0x34>)
     f58:	685c      	ldr	r4, [r3, #4]
     f5a:	42a0      	cmp	r0, r4
     f5c:	d00e      	beq.n	f7c <process_ext_irq+0x28>
     f5e:	2301      	movs	r3, #1
     f60:	2100      	movs	r1, #0
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
     f62:	461e      	mov	r6, r3
		} else {
			upper = middle - 1;
     f64:	25ff      	movs	r5, #255	; 0xff
     f66:	e003      	b.n	f70 <process_ext_irq+0x1c>
     f68:	462b      	mov	r3, r5
		if (middle >= EXT_IRQ_AMOUNT) {
     f6a:	185a      	adds	r2, r3, r1
     f6c:	0852      	lsrs	r2, r2, #1
     f6e:	d104      	bne.n	f7a <process_ext_irq+0x26>
		if (ext_irqs[middle].pin < pin) {
     f70:	42a0      	cmp	r0, r4
     f72:	d9f9      	bls.n	f68 <process_ext_irq+0x14>
	while (upper >= lower) {
     f74:	b13b      	cbz	r3, f86 <process_ext_irq+0x32>
			lower = middle + 1;
     f76:	4631      	mov	r1, r6
     f78:	e7f7      	b.n	f6a <process_ext_irq+0x16>
     f7a:	bd70      	pop	{r4, r5, r6, pc}
			if (ext_irqs[middle].cb) {
     f7c:	4b02      	ldr	r3, [pc, #8]	; (f88 <process_ext_irq+0x34>)
     f7e:	681b      	ldr	r3, [r3, #0]
     f80:	b10b      	cbz	r3, f86 <process_ext_irq+0x32>
				ext_irqs[middle].cb();
     f82:	4798      	blx	r3
     f84:	bd70      	pop	{r4, r5, r6, pc}
     f86:	bd70      	pop	{r4, r5, r6, pc}
     f88:	20000124 	.word	0x20000124

00000f8c <ext_irq_init>:
{
     f8c:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     f8e:	4b05      	ldr	r3, [pc, #20]	; (fa4 <ext_irq_init+0x18>)
     f90:	f04f 32ff 	mov.w	r2, #4294967295
     f94:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     f96:	2200      	movs	r2, #0
     f98:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     f9a:	4803      	ldr	r0, [pc, #12]	; (fa8 <ext_irq_init+0x1c>)
     f9c:	4b03      	ldr	r3, [pc, #12]	; (fac <ext_irq_init+0x20>)
     f9e:	4798      	blx	r3
}
     fa0:	bd08      	pop	{r3, pc}
     fa2:	bf00      	nop
     fa4:	20000124 	.word	0x20000124
     fa8:	00000f55 	.word	0x00000f55
     fac:	00001601 	.word	0x00001601

00000fb0 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     fb0:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     fb2:	6943      	ldr	r3, [r0, #20]
     fb4:	b103      	cbz	r3, fb8 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     fb6:	4798      	blx	r3
     fb8:	bd08      	pop	{r3, pc}

00000fba <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     fba:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     fbc:	6983      	ldr	r3, [r0, #24]
     fbe:	b103      	cbz	r3, fc2 <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     fc0:	4798      	blx	r3
     fc2:	bd08      	pop	{r3, pc}

00000fc4 <flash_init>:
{
     fc4:	b538      	push	{r3, r4, r5, lr}
     fc6:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     fc8:	4604      	mov	r4, r0
     fca:	b190      	cbz	r0, ff2 <flash_init+0x2e>
     fcc:	1c08      	adds	r0, r1, #0
     fce:	bf18      	it	ne
     fd0:	2001      	movne	r0, #1
     fd2:	2242      	movs	r2, #66	; 0x42
     fd4:	4908      	ldr	r1, [pc, #32]	; (ff8 <flash_init+0x34>)
     fd6:	4b09      	ldr	r3, [pc, #36]	; (ffc <flash_init+0x38>)
     fd8:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     fda:	4629      	mov	r1, r5
     fdc:	4620      	mov	r0, r4
     fde:	4b08      	ldr	r3, [pc, #32]	; (1000 <flash_init+0x3c>)
     fe0:	4798      	blx	r3
	if (rc) {
     fe2:	4603      	mov	r3, r0
     fe4:	b918      	cbnz	r0, fee <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     fe6:	4a07      	ldr	r2, [pc, #28]	; (1004 <flash_init+0x40>)
     fe8:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     fea:	4a07      	ldr	r2, [pc, #28]	; (1008 <flash_init+0x44>)
     fec:	6062      	str	r2, [r4, #4]
}
     fee:	4618      	mov	r0, r3
     ff0:	bd38      	pop	{r3, r4, r5, pc}
     ff2:	2000      	movs	r0, #0
     ff4:	e7ed      	b.n	fd2 <flash_init+0xe>
     ff6:	bf00      	nop
     ff8:	00002b1c 	.word	0x00002b1c
     ffc:	00001181 	.word	0x00001181
    1000:	000017bd 	.word	0x000017bd
    1004:	00000fb1 	.word	0x00000fb1
    1008:	00000fbb 	.word	0x00000fbb

0000100c <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    100c:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
    100e:	6943      	ldr	r3, [r0, #20]
    1010:	b103      	cbz	r3, 1014 <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
    1012:	4798      	blx	r3
    1014:	bd08      	pop	{r3, pc}

00001016 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1016:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
    1018:	6983      	ldr	r3, [r0, #24]
    101a:	b103      	cbz	r3, 101e <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
    101c:	4798      	blx	r3
    101e:	bd08      	pop	{r3, pc}

00001020 <pwm_init>:
{
    1020:	b538      	push	{r3, r4, r5, lr}
    1022:	460d      	mov	r5, r1
	ASSERT(descr && hw);
    1024:	4604      	mov	r4, r0
    1026:	b180      	cbz	r0, 104a <pwm_init+0x2a>
    1028:	1c08      	adds	r0, r1, #0
    102a:	bf18      	it	ne
    102c:	2001      	movne	r0, #1
    102e:	223d      	movs	r2, #61	; 0x3d
    1030:	4907      	ldr	r1, [pc, #28]	; (1050 <pwm_init+0x30>)
    1032:	4b08      	ldr	r3, [pc, #32]	; (1054 <pwm_init+0x34>)
    1034:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    1036:	4629      	mov	r1, r5
    1038:	4620      	mov	r0, r4
    103a:	4b07      	ldr	r3, [pc, #28]	; (1058 <pwm_init+0x38>)
    103c:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    103e:	4b07      	ldr	r3, [pc, #28]	; (105c <pwm_init+0x3c>)
    1040:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    1042:	4b07      	ldr	r3, [pc, #28]	; (1060 <pwm_init+0x40>)
    1044:	6063      	str	r3, [r4, #4]
}
    1046:	2000      	movs	r0, #0
    1048:	bd38      	pop	{r3, r4, r5, pc}
    104a:	2000      	movs	r0, #0
    104c:	e7ef      	b.n	102e <pwm_init+0xe>
    104e:	bf00      	nop
    1050:	00002b34 	.word	0x00002b34
    1054:	00001181 	.word	0x00001181
    1058:	000022ed 	.word	0x000022ed
    105c:	0000100d 	.word	0x0000100d
    1060:	00001017 	.word	0x00001017

00001064 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
    1064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1066:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
    1068:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
    106a:	b12f      	cbz	r7, 1078 <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
    106c:	688d      	ldr	r5, [r1, #8]
    106e:	463c      	mov	r4, r7
    1070:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    1072:	f1c2 0e01 	rsb	lr, r2, #1
    1076:	e00b      	b.n	1090 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
    1078:	4b0e      	ldr	r3, [pc, #56]	; (10b4 <timer_add_timer_task+0x50>)
    107a:	4798      	blx	r3
		return;
    107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
    107e:	4473      	add	r3, lr
    1080:	68a0      	ldr	r0, [r4, #8]
    1082:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
    1084:	42ab      	cmp	r3, r5
    1086:	d20a      	bcs.n	109e <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
    1088:	6823      	ldr	r3, [r4, #0]
    108a:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
    108c:	b153      	cbz	r3, 10a4 <timer_add_timer_task+0x40>
    108e:	461c      	mov	r4, r3
		if (it->time_label <= time) {
    1090:	6863      	ldr	r3, [r4, #4]
    1092:	4293      	cmp	r3, r2
    1094:	d8f3      	bhi.n	107e <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
    1096:	68a0      	ldr	r0, [r4, #8]
    1098:	4403      	add	r3, r0
    109a:	1a9b      	subs	r3, r3, r2
    109c:	e7f2      	b.n	1084 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
    109e:	42a7      	cmp	r7, r4
    10a0:	d004      	beq.n	10ac <timer_add_timer_task+0x48>
    10a2:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
    10a4:	4620      	mov	r0, r4
    10a6:	4b04      	ldr	r3, [pc, #16]	; (10b8 <timer_add_timer_task+0x54>)
    10a8:	4798      	blx	r3
    10aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
    10ac:	4660      	mov	r0, ip
    10ae:	4b01      	ldr	r3, [pc, #4]	; (10b4 <timer_add_timer_task+0x50>)
    10b0:	4798      	blx	r3
    10b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10b4:	000011a9 	.word	0x000011a9
    10b8:	000011d5 	.word	0x000011d5

000010bc <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
    10bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
    10c0:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
    10c2:	6907      	ldr	r7, [r0, #16]
    10c4:	3701      	adds	r7, #1
    10c6:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
    10c8:	7e03      	ldrb	r3, [r0, #24]
    10ca:	f013 0f01 	tst.w	r3, #1
    10ce:	d113      	bne.n	10f8 <timer_process_counted+0x3c>
    10d0:	7e03      	ldrb	r3, [r0, #24]
    10d2:	f013 0f02 	tst.w	r3, #2
    10d6:	d10f      	bne.n	10f8 <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
    10d8:	b354      	cbz	r4, 1130 <timer_process_counted+0x74>
    10da:	6863      	ldr	r3, [r4, #4]
    10dc:	1afb      	subs	r3, r7, r3
    10de:	68a2      	ldr	r2, [r4, #8]
    10e0:	4293      	cmp	r3, r2
    10e2:	d307      	bcc.n	10f4 <timer_process_counted+0x38>
    10e4:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
    10e6:	f100 0814 	add.w	r8, r0, #20
    10ea:	f8df 9048 	ldr.w	r9, [pc, #72]	; 1134 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
    10ee:	f8df a048 	ldr.w	sl, [pc, #72]	; 1138 <timer_process_counted+0x7c>
    10f2:	e012      	b.n	111a <timer_process_counted+0x5e>
    10f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
    10f8:	7e03      	ldrb	r3, [r0, #24]
    10fa:	f043 0302 	orr.w	r3, r3, #2
    10fe:	7603      	strb	r3, [r0, #24]
		return;
    1100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1104:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
    1106:	68e3      	ldr	r3, [r4, #12]
    1108:	4620      	mov	r0, r4
    110a:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
    110c:	b185      	cbz	r5, 1130 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
    110e:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
    1110:	686b      	ldr	r3, [r5, #4]
    1112:	1afb      	subs	r3, r7, r3
    1114:	68aa      	ldr	r2, [r5, #8]
    1116:	4293      	cmp	r3, r2
    1118:	d30a      	bcc.n	1130 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
    111a:	4640      	mov	r0, r8
    111c:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
    111e:	7c23      	ldrb	r3, [r4, #16]
    1120:	2b01      	cmp	r3, #1
    1122:	d1ef      	bne.n	1104 <timer_process_counted+0x48>
			tmp->time_label = time;
    1124:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
    1126:	463a      	mov	r2, r7
    1128:	4621      	mov	r1, r4
    112a:	4640      	mov	r0, r8
    112c:	47d0      	blx	sl
    112e:	e7e9      	b.n	1104 <timer_process_counted+0x48>
    1130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1134:	000011dd 	.word	0x000011dd
    1138:	00001065 	.word	0x00001065

0000113c <timer_init>:
{
    113c:	b570      	push	{r4, r5, r6, lr}
    113e:	460e      	mov	r6, r1
    1140:	4615      	mov	r5, r2
	ASSERT(descr && hw && func);
    1142:	4604      	mov	r4, r0
    1144:	b190      	cbz	r0, 116c <timer_init+0x30>
    1146:	b199      	cbz	r1, 1170 <timer_init+0x34>
    1148:	1c10      	adds	r0, r2, #0
    114a:	bf18      	it	ne
    114c:	2001      	movne	r0, #1
    114e:	2245      	movs	r2, #69	; 0x45
    1150:	4908      	ldr	r1, [pc, #32]	; (1174 <timer_init+0x38>)
    1152:	4b09      	ldr	r3, [pc, #36]	; (1178 <timer_init+0x3c>)
    1154:	4798      	blx	r3
	descr->func = func;
    1156:	4620      	mov	r0, r4
    1158:	f840 5b04 	str.w	r5, [r0], #4
	descr->func->init(&descr->device, hw);
    115c:	682b      	ldr	r3, [r5, #0]
    115e:	4631      	mov	r1, r6
    1160:	4798      	blx	r3
	descr->time                           = 0;
    1162:	2000      	movs	r0, #0
    1164:	6160      	str	r0, [r4, #20]
	descr->device.timer_cb.period_expired = timer_process_counted;
    1166:	4b05      	ldr	r3, [pc, #20]	; (117c <timer_init+0x40>)
    1168:	6063      	str	r3, [r4, #4]
}
    116a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw && func);
    116c:	2000      	movs	r0, #0
    116e:	e7ee      	b.n	114e <timer_init+0x12>
    1170:	2000      	movs	r0, #0
    1172:	e7ec      	b.n	114e <timer_init+0x12>
    1174:	00002b4c 	.word	0x00002b4c
    1178:	00001181 	.word	0x00001181
    117c:	000010bd 	.word	0x000010bd

00001180 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
    1180:	b900      	cbnz	r0, 1184 <assert+0x4>
		__asm("BKPT #0");
    1182:	be00      	bkpt	0x0000
    1184:	4770      	bx	lr

00001186 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
    1186:	6803      	ldr	r3, [r0, #0]
    1188:	b14b      	cbz	r3, 119e <is_list_element+0x18>
		if (it == element) {
    118a:	428b      	cmp	r3, r1
    118c:	d009      	beq.n	11a2 <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
    118e:	681b      	ldr	r3, [r3, #0]
    1190:	b11b      	cbz	r3, 119a <is_list_element+0x14>
		if (it == element) {
    1192:	4299      	cmp	r1, r3
    1194:	d1fb      	bne.n	118e <is_list_element+0x8>
			return true;
    1196:	2001      	movs	r0, #1
		}
	}

	return false;
}
    1198:	4770      	bx	lr
	return false;
    119a:	2000      	movs	r0, #0
    119c:	4770      	bx	lr
    119e:	2000      	movs	r0, #0
    11a0:	4770      	bx	lr
			return true;
    11a2:	2001      	movs	r0, #1
    11a4:	4770      	bx	lr
	...

000011a8 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
    11a8:	b538      	push	{r3, r4, r5, lr}
    11aa:	4604      	mov	r4, r0
    11ac:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
    11ae:	4b06      	ldr	r3, [pc, #24]	; (11c8 <list_insert_as_head+0x20>)
    11b0:	4798      	blx	r3
    11b2:	f080 0001 	eor.w	r0, r0, #1
    11b6:	2243      	movs	r2, #67	; 0x43
    11b8:	4904      	ldr	r1, [pc, #16]	; (11cc <list_insert_as_head+0x24>)
    11ba:	b2c0      	uxtb	r0, r0
    11bc:	4b04      	ldr	r3, [pc, #16]	; (11d0 <list_insert_as_head+0x28>)
    11be:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
    11c0:	6823      	ldr	r3, [r4, #0]
    11c2:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
    11c4:	6025      	str	r5, [r4, #0]
    11c6:	bd38      	pop	{r3, r4, r5, pc}
    11c8:	00001187 	.word	0x00001187
    11cc:	00002b64 	.word	0x00002b64
    11d0:	00001181 	.word	0x00001181

000011d4 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
    11d4:	6803      	ldr	r3, [r0, #0]
    11d6:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
    11d8:	6001      	str	r1, [r0, #0]
    11da:	4770      	bx	lr

000011dc <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
    11dc:	6803      	ldr	r3, [r0, #0]
    11de:	b10b      	cbz	r3, 11e4 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
    11e0:	681a      	ldr	r2, [r3, #0]
    11e2:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
    11e4:	4618      	mov	r0, r3
    11e6:	4770      	bx	lr

000011e8 <_ac_init>:
 * \brief Initialize AC
 *
 * \param[in] hw The pointer to hardware instance
 */
static int32_t _ac_init(void *const hw)
{
    11e8:	b510      	push	{r4, lr}
    11ea:	4604      	mov	r4, r0
	ASSERT(hw == AC);
    11ec:	f44f 7281 	mov.w	r2, #258	; 0x102
    11f0:	4915      	ldr	r1, [pc, #84]	; (1248 <_ac_init+0x60>)
    11f2:	4816      	ldr	r0, [pc, #88]	; (124c <_ac_init+0x64>)
    11f4:	4284      	cmp	r4, r0
    11f6:	bf14      	ite	ne
    11f8:	2000      	movne	r0, #0
    11fa:	2001      	moveq	r0, #1
    11fc:	4b14      	ldr	r3, [pc, #80]	; (1250 <_ac_init+0x68>)
    11fe:	4798      	blx	r3
typedef uint8_t  hri_ac_statusb_reg_t;
typedef uint8_t  hri_ac_winctrl_reg_t;

static inline void hri_ac_wait_for_sync(const void *const hw, hri_ac_syncbusy_reg_t reg)
{
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1200:	6a23      	ldr	r3, [r4, #32]
    1202:	f013 0f01 	tst.w	r3, #1
    1206:	d1fb      	bne.n	1200 <_ac_init+0x18>
    1208:	6a23      	ldr	r3, [r4, #32]
    120a:	f013 0f03 	tst.w	r3, #3
    120e:	d1fb      	bne.n	1208 <_ac_init+0x20>

static inline bool hri_ac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST | AC_SYNCBUSY_ENABLE);
	tmp = ((Ac *)hw)->CTRLA.reg;
    1210:	7823      	ldrb	r3, [r4, #0]

	hri_ac_wait_for_sync(hw, AC_SYNCBUSY_SWRST);
	if (hri_ac_get_CTRLA_ENABLE_bit(hw)) {
    1212:	f013 0f02 	tst.w	r3, #2
    1216:	d114      	bne.n	1242 <_ac_init+0x5a>
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1218:	6a23      	ldr	r3, [r4, #32]
    121a:	f013 0f01 	tst.w	r3, #1
    121e:	d1fb      	bne.n	1218 <_ac_init+0x30>
	((Ac *)hw)->CTRLA.reg |= AC_CTRLA_SWRST;
    1220:	7823      	ldrb	r3, [r4, #0]
    1222:	f043 0301 	orr.w	r3, r3, #1
    1226:	7023      	strb	r3, [r4, #0]
	while (((Ac *)hw)->SYNCBUSY.reg & reg) {
    1228:	6a23      	ldr	r3, [r4, #32]
    122a:	f013 0f01 	tst.w	r3, #1
    122e:	d1fb      	bne.n	1228 <_ac_init+0x40>
}

static inline void hri_ac_write_COMPCTRL_reg(const void *const hw, uint8_t index, hri_ac_compctrl_reg_t data)
{
	AC_CRITICAL_SECTION_ENTER();
	((Ac *)hw)->COMPCTRL[index].reg = data;
    1230:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    1234:	6123      	str	r3, [r4, #16]
	((Ac *)hw)->SCALER[index].reg = data;
    1236:	2000      	movs	r0, #0
    1238:	7320      	strb	r0, [r4, #12]
	((Ac *)hw)->COMPCTRL[index].reg = data;
    123a:	6163      	str	r3, [r4, #20]
	((Ac *)hw)->SCALER[index].reg = data;
    123c:	7360      	strb	r0, [r4, #13]
	((Ac *)hw)->EVCTRL.reg = data;
    123e:	8060      	strh	r0, [r4, #2]
	hri_ac_write_SCALER_reg(hw, 0, _ac.comp_scaler0);
	hri_ac_write_COMPCTRL_reg(hw, 1, _ac.comp_ctrl1);
	hri_ac_write_SCALER_reg(hw, 1, _ac.comp_scaler1);
	hri_ac_write_EVCTRL_reg(hw, _ac.ev_ctrl);

	return ERR_NONE;
    1240:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
    1242:	f06f 0010 	mvn.w	r0, #16
}
    1246:	bd10      	pop	{r4, pc}
    1248:	00002b84 	.word	0x00002b84
    124c:	42002000 	.word	0x42002000
    1250:	00001181 	.word	0x00001181

00001254 <_ac_sync_init>:
{
    1254:	b538      	push	{r3, r4, r5, lr}
    1256:	460c      	mov	r4, r1
	ASSERT(device);
    1258:	4605      	mov	r5, r0
    125a:	226c      	movs	r2, #108	; 0x6c
    125c:	4905      	ldr	r1, [pc, #20]	; (1274 <_ac_sync_init+0x20>)
    125e:	3000      	adds	r0, #0
    1260:	bf18      	it	ne
    1262:	2001      	movne	r0, #1
    1264:	4b04      	ldr	r3, [pc, #16]	; (1278 <_ac_sync_init+0x24>)
    1266:	4798      	blx	r3
	device->hw = hw;
    1268:	602c      	str	r4, [r5, #0]
	return _ac_init(hw);
    126a:	4620      	mov	r0, r4
    126c:	4b03      	ldr	r3, [pc, #12]	; (127c <_ac_sync_init+0x28>)
    126e:	4798      	blx	r3
}
    1270:	bd38      	pop	{r3, r4, r5, pc}
    1272:	bf00      	nop
    1274:	00002b84 	.word	0x00002b84
    1278:	00001181 	.word	0x00001181
    127c:	000011e9 	.word	0x000011e9

00001280 <_adc_init>:
typedef uint8_t  hri_adc_status_reg_t;
typedef uint8_t  hri_adc_swtrig_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw, hri_adc_syncbusy_reg_t reg)
{
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1280:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1282:	f013 0f01 	tst.w	r3, #1
    1286:	d1fb      	bne.n	1280 <_adc_init>
    1288:	6b03      	ldr	r3, [r0, #48]	; 0x30
    128a:	f013 0f03 	tst.w	r3, #3
    128e:	d1fb      	bne.n	1288 <_adc_init+0x8>

static inline bool hri_adc_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint16_t tmp;
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST | ADC_SYNCBUSY_ENABLE);
	tmp = ((Adc *)hw)->CTRLA.reg;
    1290:	8803      	ldrh	r3, [r0, #0]
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{

	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);
	if (hri_adc_get_CTRLA_ENABLE_bit(hw)) {
    1292:	f013 0f02 	tst.w	r3, #2
    1296:	d12a      	bne.n	12ee <_adc_init+0x6e>
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    1298:	6b03      	ldr	r3, [r0, #48]	; 0x30
    129a:	f013 0f01 	tst.w	r3, #1
    129e:	d1fb      	bne.n	1298 <_adc_init+0x18>
	((Adc *)hw)->CTRLA.reg |= ADC_CTRLA_SWRST;
    12a0:	8803      	ldrh	r3, [r0, #0]
    12a2:	b29b      	uxth	r3, r3
    12a4:	f043 0301 	orr.w	r3, r3, #1
    12a8:	8003      	strh	r3, [r0, #0]
	while (((Adc *)hw)->SYNCBUSY.reg & reg) {
    12aa:	6b03      	ldr	r3, [r0, #48]	; 0x30
    12ac:	f013 0f01 	tst.w	r3, #1
    12b0:	d1fb      	bne.n	12aa <_adc_init+0x2a>
		return ERR_DENIED;
	}
	hri_adc_set_CTRLA_SWRST_bit(hw);
	hri_adc_wait_for_sync(hw, ADC_SYNCBUSY_SWRST);

	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
    12b2:	2216      	movs	r2, #22
    12b4:	4b0f      	ldr	r3, [pc, #60]	; (12f4 <_adc_init+0x74>)
    12b6:	fb02 3101 	mla	r1, r2, r1, r3
    12ba:	888b      	ldrh	r3, [r1, #4]
}

static inline void hri_adc_write_CTRLB_reg(const void *const hw, hri_adc_ctrlb_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLB.reg = data;
    12bc:	80c3      	strh	r3, [r0, #6]
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
    12be:	798b      	ldrb	r3, [r1, #6]
}

static inline void hri_adc_write_REFCTRL_reg(const void *const hw, hri_adc_refctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->REFCTRL.reg = data;
    12c0:	7203      	strb	r3, [r0, #8]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
    12c2:	79cb      	ldrb	r3, [r1, #7]
	((Adc *)hw)->EVCTRL.reg = data;
    12c4:	7083      	strb	r3, [r0, #2]
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
    12c6:	890b      	ldrh	r3, [r1, #8]
	((Adc *)hw)->INPUTCTRL.reg = data;
    12c8:	8083      	strh	r3, [r0, #4]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
    12ca:	7a8b      	ldrb	r3, [r1, #10]
}

static inline void hri_adc_write_AVGCTRL_reg(const void *const hw, hri_adc_avgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->AVGCTRL.reg = data;
    12cc:	7283      	strb	r3, [r0, #10]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
    12ce:	7acb      	ldrb	r3, [r1, #11]
}

static inline void hri_adc_write_SAMPCTRL_reg(const void *const hw, hri_adc_sampctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->SAMPCTRL.reg = data;
    12d0:	72c3      	strb	r3, [r0, #11]
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
    12d2:	898b      	ldrh	r3, [r1, #12]
}

static inline void hri_adc_write_WINLT_reg(const void *const hw, hri_adc_winlt_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINLT.reg = data;
    12d4:	8183      	strh	r3, [r0, #12]
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
    12d6:	89cb      	ldrh	r3, [r1, #14]
}

static inline void hri_adc_write_WINUT_reg(const void *const hw, hri_adc_winut_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->WINUT.reg = data;
    12d8:	81c3      	strh	r3, [r0, #14]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
    12da:	8a0b      	ldrh	r3, [r1, #16]
}

static inline void hri_adc_write_GAINCORR_reg(const void *const hw, hri_adc_gaincorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->GAINCORR.reg = data;
    12dc:	8203      	strh	r3, [r0, #16]
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
    12de:	8a4b      	ldrh	r3, [r1, #18]
}

static inline void hri_adc_write_OFFSETCORR_reg(const void *const hw, hri_adc_offsetcorr_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->OFFSETCORR.reg = data;
    12e0:	8243      	strh	r3, [r0, #18]
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
    12e2:	7d0b      	ldrb	r3, [r1, #20]
	((Adc *)hw)->DBGCTRL.reg = data;
    12e4:	70c3      	strb	r3, [r0, #3]
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
    12e6:	884b      	ldrh	r3, [r1, #2]
	((Adc *)hw)->CTRLA.reg = data;
    12e8:	8003      	strh	r3, [r0, #0]

	return ERR_NONE;
    12ea:	2000      	movs	r0, #0
    12ec:	4770      	bx	lr
		return ERR_DENIED;
    12ee:	f06f 0010 	mvn.w	r0, #16
}
    12f2:	4770      	bx	lr
    12f4:	00002b98 	.word	0x00002b98

000012f8 <_adc_get_regs>:
	return ((uint32_t)hw - (uint32_t)ADC0) >> 10;
    12f8:	f100 403d 	add.w	r0, r0, #3170893824	; 0xbd000000
    12fc:	f5a0 50e0 	sub.w	r0, r0, #7168	; 0x1c00
    1300:	f3c0 2087 	ubfx	r0, r0, #10, #8
		if (_adcs[i].number == n) {
    1304:	b148      	cbz	r0, 131a <_adc_get_regs+0x22>
    1306:	2801      	cmp	r0, #1
    1308:	d009      	beq.n	131e <_adc_get_regs+0x26>
{
    130a:	b508      	push	{r3, lr}
	ASSERT(false);
    130c:	2291      	movs	r2, #145	; 0x91
    130e:	4905      	ldr	r1, [pc, #20]	; (1324 <_adc_get_regs+0x2c>)
    1310:	2000      	movs	r0, #0
    1312:	4b05      	ldr	r3, [pc, #20]	; (1328 <_adc_get_regs+0x30>)
    1314:	4798      	blx	r3
	return 0;
    1316:	2000      	movs	r0, #0
    1318:	bd08      	pop	{r3, pc}
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
    131a:	2000      	movs	r0, #0
    131c:	4770      	bx	lr
    131e:	2001      	movs	r0, #1
    1320:	4770      	bx	lr
    1322:	bf00      	nop
    1324:	00002bc4 	.word	0x00002bc4
    1328:	00001181 	.word	0x00001181

0000132c <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
    132c:	b538      	push	{r3, r4, r5, lr}
    132e:	460c      	mov	r4, r1
	ASSERT(device);
    1330:	4605      	mov	r5, r0
    1332:	22d5      	movs	r2, #213	; 0xd5
    1334:	4907      	ldr	r1, [pc, #28]	; (1354 <_adc_sync_init+0x28>)
    1336:	3000      	adds	r0, #0
    1338:	bf18      	it	ne
    133a:	2001      	movne	r0, #1
    133c:	4b06      	ldr	r3, [pc, #24]	; (1358 <_adc_sync_init+0x2c>)
    133e:	4798      	blx	r3

	device->hw = hw;
    1340:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
    1342:	4620      	mov	r0, r4
    1344:	4b05      	ldr	r3, [pc, #20]	; (135c <_adc_sync_init+0x30>)
    1346:	4798      	blx	r3
    1348:	4601      	mov	r1, r0
    134a:	4620      	mov	r0, r4
    134c:	4b04      	ldr	r3, [pc, #16]	; (1360 <_adc_sync_init+0x34>)
    134e:	4798      	blx	r3
}
    1350:	bd38      	pop	{r3, r4, r5, pc}
    1352:	bf00      	nop
    1354:	00002bc4 	.word	0x00002bc4
    1358:	00001181 	.word	0x00001181
    135c:	000012f9 	.word	0x000012f9
    1360:	00001281 	.word	0x00001281

00001364 <_irq_set>:
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1364:	0943      	lsrs	r3, r0, #5
    1366:	f000 001f 	and.w	r0, r0, #31
    136a:	2201      	movs	r2, #1
    136c:	fa02 f000 	lsl.w	r0, r2, r0
    1370:	3340      	adds	r3, #64	; 0x40
    1372:	4a02      	ldr	r2, [pc, #8]	; (137c <_irq_set+0x18>)
    1374:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    1378:	4770      	bx	lr
    137a:	bf00      	nop
    137c:	e000e100 	.word	0xe000e100

00001380 <_get_cycles_for_ms>:
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
    1380:	f64b 3380 	movw	r3, #48000	; 0xbb80
    1384:	fb03 f000 	mul.w	r0, r3, r0
    1388:	4770      	bx	lr
	...

0000138c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    138c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    138e:	4a0c      	ldr	r2, [pc, #48]	; (13c0 <_init_chip+0x34>)
    1390:	8813      	ldrh	r3, [r2, #0]
    1392:	b29b      	uxth	r3, r3
    1394:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
    1396:	4b0b      	ldr	r3, [pc, #44]	; (13c4 <_init_chip+0x38>)
    1398:	4798      	blx	r3
	//_oscctrl_init_sources();
	_mclk_init();
    139a:	4b0b      	ldr	r3, [pc, #44]	; (13c8 <_init_chip+0x3c>)
    139c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    139e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    13a2:	4c0a      	ldr	r4, [pc, #40]	; (13cc <_init_chip+0x40>)
    13a4:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
    13a6:	4b0a      	ldr	r3, [pc, #40]	; (13d0 <_init_chip+0x44>)
    13a8:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    13aa:	f240 70ff 	movw	r0, #2047	; 0x7ff
    13ae:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    13b0:	4a08      	ldr	r2, [pc, #32]	; (13d4 <_init_chip+0x48>)
    13b2:	6913      	ldr	r3, [r2, #16]
    13b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    13b8:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
    13ba:	4b07      	ldr	r3, [pc, #28]	; (13d8 <_init_chip+0x4c>)
    13bc:	4798      	blx	r3
    13be:	bd10      	pop	{r4, pc}
    13c0:	41004000 	.word	0x41004000
    13c4:	0000185d 	.word	0x0000185d
    13c8:	00001785 	.word	0x00001785
    13cc:	000016dd 	.word	0x000016dd
    13d0:	00001881 	.word	0x00001881
    13d4:	40000800 	.word	0x40000800
    13d8:	000014e5 	.word	0x000014e5

000013dc <_dac_init>:
 * \param[in] hw The pointer to DAC hardware instance
 *
 * \return The status of initialization
 */
static int32_t _dac_init(void *const hw)
{
    13dc:	b510      	push	{r4, lr}
    13de:	4604      	mov	r4, r0
	ASSERT(hw == DAC);
    13e0:	22f3      	movs	r2, #243	; 0xf3
    13e2:	4915      	ldr	r1, [pc, #84]	; (1438 <_dac_init+0x5c>)
    13e4:	4815      	ldr	r0, [pc, #84]	; (143c <_dac_init+0x60>)
    13e6:	4284      	cmp	r4, r0
    13e8:	bf14      	ite	ne
    13ea:	2000      	movne	r0, #0
    13ec:	2001      	moveq	r0, #1
    13ee:	4b14      	ldr	r3, [pc, #80]	; (1440 <_dac_init+0x64>)
    13f0:	4798      	blx	r3
typedef uint8_t  hri_dac_intflag_reg_t;
typedef uint8_t  hri_dac_status_reg_t;

static inline void hri_dac_wait_for_sync(const void *const hw, hri_dac_syncbusy_reg_t reg)
{
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    13f2:	68a3      	ldr	r3, [r4, #8]
    13f4:	f013 0f01 	tst.w	r3, #1
    13f8:	d1fb      	bne.n	13f2 <_dac_init+0x16>
    13fa:	68a3      	ldr	r3, [r4, #8]
    13fc:	f013 0f03 	tst.w	r3, #3
    1400:	d1fb      	bne.n	13fa <_dac_init+0x1e>

static inline bool hri_dac_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST | DAC_SYNCBUSY_ENABLE);
	tmp = ((Dac *)hw)->CTRLA.reg;
    1402:	7823      	ldrb	r3, [r4, #0]

	hri_dac_wait_for_sync(hw, DAC_SYNCBUSY_SWRST);
	if (hri_dac_get_CTRLA_ENABLE_bit(hw)) {
    1404:	f013 0f02 	tst.w	r3, #2
    1408:	d113      	bne.n	1432 <_dac_init+0x56>
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    140a:	68a3      	ldr	r3, [r4, #8]
    140c:	f013 0f01 	tst.w	r3, #1
    1410:	d1fb      	bne.n	140a <_dac_init+0x2e>
	((Dac *)hw)->CTRLA.reg |= DAC_CTRLA_SWRST;
    1412:	7823      	ldrb	r3, [r4, #0]
    1414:	f043 0301 	orr.w	r3, r3, #1
    1418:	7023      	strb	r3, [r4, #0]
	while (((Dac *)hw)->SYNCBUSY.reg & reg) {
    141a:	68a3      	ldr	r3, [r4, #8]
    141c:	f013 0f01 	tst.w	r3, #1
    1420:	d1fb      	bne.n	141a <_dac_init+0x3e>
}

static inline void hri_dac_write_CTRLB_reg(const void *const hw, hri_dac_ctrlb_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->CTRLB.reg = data;
    1422:	2000      	movs	r0, #0
    1424:	7060      	strb	r0, [r4, #1]
}

static inline void hri_dac_write_EVCTRL_reg(const void *const hw, hri_dac_evctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->EVCTRL.reg = data;
    1426:	70a0      	strb	r0, [r4, #2]
}

static inline void hri_dac_write_DACCTRL_reg(const void *const hw, uint8_t index, hri_dac_dacctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DACCTRL[index].reg = data;
    1428:	81a0      	strh	r0, [r4, #12]
    142a:	81e0      	strh	r0, [r4, #14]
}

static inline void hri_dac_write_DBGCTRL_reg(const void *const hw, hri_dac_dbgctrl_reg_t data)
{
	DAC_CRITICAL_SECTION_ENTER();
	((Dac *)hw)->DBGCTRL.reg = data;
    142c:	2301      	movs	r3, #1
    142e:	7623      	strb	r3, [r4, #24]
	hri_dac_write_EVCTRL_reg(hw, _dac.ev_ctrl);
	hri_dac_write_DACCTRL_reg(hw, 0, _dac.dac_ctrl0);
	hri_dac_write_DACCTRL_reg(hw, 1, _dac.dac_ctrl1);
	hri_dac_write_DBGCTRL_reg(hw, _dac.dbg_ctrl);

	return ERR_NONE;
    1430:	bd10      	pop	{r4, pc}
		return ERR_BUSY;
    1432:	f06f 0003 	mvn.w	r0, #3
}
    1436:	bd10      	pop	{r4, pc}
    1438:	00002bdc 	.word	0x00002bdc
    143c:	43002400 	.word	0x43002400
    1440:	00001181 	.word	0x00001181

00001444 <_dac_sync_init>:
{
    1444:	b538      	push	{r3, r4, r5, lr}
    1446:	460c      	mov	r4, r1
	ASSERT(device);
    1448:	4605      	mov	r5, r0
    144a:	2261      	movs	r2, #97	; 0x61
    144c:	4905      	ldr	r1, [pc, #20]	; (1464 <_dac_sync_init+0x20>)
    144e:	3000      	adds	r0, #0
    1450:	bf18      	it	ne
    1452:	2001      	movne	r0, #1
    1454:	4b04      	ldr	r3, [pc, #16]	; (1468 <_dac_sync_init+0x24>)
    1456:	4798      	blx	r3
	device->hw = hw;
    1458:	602c      	str	r4, [r5, #0]
	return _dac_init(device->hw);
    145a:	4620      	mov	r0, r4
    145c:	4b03      	ldr	r3, [pc, #12]	; (146c <_dac_sync_init+0x28>)
    145e:	4798      	blx	r3
}
    1460:	bd38      	pop	{r3, r4, r5, pc}
    1462:	bf00      	nop
    1464:	00002bdc 	.word	0x00002bdc
    1468:	00001181 	.word	0x00001181
    146c:	000013dd 	.word	0x000013dd

00001470 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    1470:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1472:	4a1a      	ldr	r2, [pc, #104]	; (14dc <_dmac_handler+0x6c>)
    1474:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    1476:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
    147a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    147e:	4818      	ldr	r0, [pc, #96]	; (14e0 <_dmac_handler+0x70>)
    1480:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = mask;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    1484:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    1488:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    148c:	f012 0f01 	tst.w	r2, #1
    1490:	d10a      	bne.n	14a8 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    1492:	011a      	lsls	r2, r3, #4
    1494:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    1498:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    149c:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    14a0:	f012 0f02 	tst.w	r2, #2
    14a4:	d10b      	bne.n	14be <_dmac_handler+0x4e>
    14a6:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    14a8:	011a      	lsls	r2, r3, #4
    14aa:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    14ae:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    14b2:	2101      	movs	r1, #1
    14b4:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
    14b8:	6843      	ldr	r3, [r0, #4]
    14ba:	4798      	blx	r3
    14bc:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    14be:	011a      	lsls	r2, r3, #4
    14c0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    14c4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
    14c8:	2102      	movs	r1, #2
    14ca:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    14ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    14d2:	4a03      	ldr	r2, [pc, #12]	; (14e0 <_dmac_handler+0x70>)
    14d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    14d8:	4798      	blx	r3
	}
}
    14da:	e7e4      	b.n	14a6 <_dmac_handler+0x36>
    14dc:	4100a000 	.word	0x4100a000
    14e0:	20000130 	.word	0x20000130

000014e4 <_dma_init>:
{
    14e4:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    14e6:	4a33      	ldr	r2, [pc, #204]	; (15b4 <_dma_init+0xd0>)
    14e8:	8813      	ldrh	r3, [r2, #0]
    14ea:	f023 0302 	bic.w	r3, r3, #2
    14ee:	041b      	lsls	r3, r3, #16
    14f0:	0c1b      	lsrs	r3, r3, #16
    14f2:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    14f4:	8853      	ldrh	r3, [r2, #2]
    14f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    14fa:	041b      	lsls	r3, r3, #16
    14fc:	0c1b      	lsrs	r3, r3, #16
    14fe:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1500:	8813      	ldrh	r3, [r2, #0]
    1502:	b29b      	uxth	r3, r3
    1504:	f043 0301 	orr.w	r3, r3, #1
    1508:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    150a:	8813      	ldrh	r3, [r2, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    150c:	f013 0f01 	tst.w	r3, #1
    1510:	d1fb      	bne.n	150a <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    1512:	4b28      	ldr	r3, [pc, #160]	; (15b4 <_dma_init+0xd0>)
    1514:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    1518:	801a      	strh	r2, [r3, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    151a:	7b5a      	ldrb	r2, [r3, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    151c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1520:	735a      	strb	r2, [r3, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1522:	2000      	movs	r0, #0
    1524:	6158      	str	r0, [r3, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1526:	4a24      	ldr	r2, [pc, #144]	; (15b8 <_dma_init+0xd4>)
    1528:	f502 71c0 	add.w	r1, r2, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    152c:	6359      	str	r1, [r3, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    152e:	f502 7260 	add.w	r2, r2, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    1532:	639a      	str	r2, [r3, #56]	; 0x38
    1534:	4b21      	ldr	r3, [pc, #132]	; (15bc <_dma_init+0xd8>)
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1536:	f5a1 75c0 	sub.w	r5, r1, #384	; 0x180
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    153a:	681c      	ldr	r4, [r3, #0]
    153c:	0101      	lsls	r1, r0, #4
    153e:	f101 4282 	add.w	r2, r1, #1090519040	; 0x41000000
    1542:	f502 4220 	add.w	r2, r2, #40960	; 0xa000

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    1546:	6414      	str	r4, [r2, #64]	; 0x40
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1548:	791c      	ldrb	r4, [r3, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    154a:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    154e:	795c      	ldrb	r4, [r3, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    1550:	f882 4046 	strb.w	r4, [r2, #70]	; 0x46
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1554:	88da      	ldrh	r2, [r3, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1556:	4429      	add	r1, r5
    1558:	f8a1 2180 	strh.w	r2, [r1, #384]	; 0x180
    155c:	3001      	adds	r0, #1
    155e:	3308      	adds	r3, #8
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1560:	2820      	cmp	r0, #32
    1562:	d1ea      	bne.n	153a <_dma_init+0x56>
    1564:	231f      	movs	r3, #31
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1566:	2001      	movs	r0, #1
    1568:	4915      	ldr	r1, [pc, #84]	; (15c0 <_dma_init+0xdc>)
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    156a:	b29a      	uxth	r2, r3
  if ((int32_t)(IRQn) >= 0)
    156c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1570:	d00b      	beq.n	158a <_dma_init+0xa6>
    1572:	3301      	adds	r3, #1
	for (i = 0; i < 5; i++) {
    1574:	2b24      	cmp	r3, #36	; 0x24
    1576:	d1f8      	bne.n	156a <_dma_init+0x86>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1578:	4a0e      	ldr	r2, [pc, #56]	; (15b4 <_dma_init+0xd0>)
    157a:	8813      	ldrh	r3, [r2, #0]
    157c:	b29b      	uxth	r3, r3
    157e:	f043 0302 	orr.w	r3, r3, #2
    1582:	8013      	strh	r3, [r2, #0]
}
    1584:	2000      	movs	r0, #0
    1586:	bc30      	pop	{r4, r5}
    1588:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    158a:	095c      	lsrs	r4, r3, #5
    158c:	f002 021f 	and.w	r2, r2, #31
    1590:	fa00 f202 	lsl.w	r2, r0, r2
    1594:	f104 0520 	add.w	r5, r4, #32
    1598:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    159c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15a0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    15a4:	f104 0560 	add.w	r5, r4, #96	; 0x60
    15a8:	f841 2025 	str.w	r2, [r1, r5, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    15ac:	f841 2024 	str.w	r2, [r1, r4, lsl #2]
    15b0:	e7df      	b.n	1572 <_dma_init+0x8e>
    15b2:	bf00      	nop
    15b4:	4100a000 	.word	0x4100a000
    15b8:	20000130 	.word	0x20000130
    15bc:	00002bf4 	.word	0x00002bf4
    15c0:	e000e100 	.word	0xe000e100

000015c4 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    15c4:	b508      	push	{r3, lr}
	_dmac_handler();
    15c6:	4b01      	ldr	r3, [pc, #4]	; (15cc <DMAC_0_Handler+0x8>)
    15c8:	4798      	blx	r3
    15ca:	bd08      	pop	{r3, pc}
    15cc:	00001471 	.word	0x00001471

000015d0 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    15d0:	b508      	push	{r3, lr}
	_dmac_handler();
    15d2:	4b01      	ldr	r3, [pc, #4]	; (15d8 <DMAC_1_Handler+0x8>)
    15d4:	4798      	blx	r3
    15d6:	bd08      	pop	{r3, pc}
    15d8:	00001471 	.word	0x00001471

000015dc <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    15dc:	b508      	push	{r3, lr}
	_dmac_handler();
    15de:	4b01      	ldr	r3, [pc, #4]	; (15e4 <DMAC_2_Handler+0x8>)
    15e0:	4798      	blx	r3
    15e2:	bd08      	pop	{r3, pc}
    15e4:	00001471 	.word	0x00001471

000015e8 <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    15e8:	b508      	push	{r3, lr}
	_dmac_handler();
    15ea:	4b01      	ldr	r3, [pc, #4]	; (15f0 <DMAC_3_Handler+0x8>)
    15ec:	4798      	blx	r3
    15ee:	bd08      	pop	{r3, pc}
    15f0:	00001471 	.word	0x00001471

000015f4 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    15f4:	b508      	push	{r3, lr}
	_dmac_handler();
    15f6:	4b01      	ldr	r3, [pc, #4]	; (15fc <DMAC_4_Handler+0x8>)
    15f8:	4798      	blx	r3
    15fa:	bd08      	pop	{r3, pc}
    15fc:	00001471 	.word	0x00001471

00001600 <_ext_irq_init>:
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1600:	4a1e      	ldr	r2, [pc, #120]	; (167c <_ext_irq_init+0x7c>)
    1602:	6853      	ldr	r3, [r2, #4]
    1604:	f013 0f01 	tst.w	r3, #1
    1608:	d1fb      	bne.n	1602 <_ext_irq_init+0x2>
    160a:	4a1c      	ldr	r2, [pc, #112]	; (167c <_ext_irq_init+0x7c>)
    160c:	6853      	ldr	r3, [r2, #4]
    160e:	f013 0f03 	tst.w	r3, #3
    1612:	d1fb      	bne.n	160c <_ext_irq_init+0xc>

static inline bool hri_eic_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1614:	4b19      	ldr	r3, [pc, #100]	; (167c <_ext_irq_init+0x7c>)
    1616:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
	if (hri_eic_get_CTRLA_ENABLE_bit(EIC)) {
    1618:	f013 0f02 	tst.w	r3, #2
    161c:	d12b      	bne.n	1676 <_ext_irq_init+0x76>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    161e:	4a17      	ldr	r2, [pc, #92]	; (167c <_ext_irq_init+0x7c>)
    1620:	6853      	ldr	r3, [r2, #4]
    1622:	f013 0f01 	tst.w	r3, #1
    1626:	d1fb      	bne.n	1620 <_ext_irq_init+0x20>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_SWRST;
    1628:	4a14      	ldr	r2, [pc, #80]	; (167c <_ext_irq_init+0x7c>)
    162a:	7813      	ldrb	r3, [r2, #0]
    162c:	f043 0301 	orr.w	r3, r3, #1
    1630:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1632:	6853      	ldr	r3, [r2, #4]
    1634:	f013 0f01 	tst.w	r3, #1
    1638:	d1fb      	bne.n	1632 <_ext_irq_init+0x32>
    163a:	4a10      	ldr	r2, [pc, #64]	; (167c <_ext_irq_init+0x7c>)
    163c:	6853      	ldr	r3, [r2, #4]
    163e:	f013 0f03 	tst.w	r3, #3
    1642:	d1fb      	bne.n	163c <_ext_irq_init+0x3c>
static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    1644:	4b0d      	ldr	r3, [pc, #52]	; (167c <_ext_irq_init+0x7c>)
    1646:	781a      	ldrb	r2, [r3, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    1648:	f002 02ef 	and.w	r2, r2, #239	; 0xef
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
	((Eic *)hw)->CTRLA.reg = tmp;
    164c:	701a      	strb	r2, [r3, #0]
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    164e:	2200      	movs	r2, #0
    1650:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    1652:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    1654:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1656:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1658:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    165a:	61da      	str	r2, [r3, #28]
    165c:	621a      	str	r2, [r3, #32]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    165e:	461a      	mov	r2, r3
    1660:	6853      	ldr	r3, [r2, #4]
    1662:	f013 0f03 	tst.w	r3, #3
    1666:	d1fb      	bne.n	1660 <_ext_irq_init+0x60>
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    1668:	4a04      	ldr	r2, [pc, #16]	; (167c <_ext_irq_init+0x7c>)
    166a:	7813      	ldrb	r3, [r2, #0]
    166c:	f043 0302 	orr.w	r3, r3, #2
    1670:	7013      	strb	r3, [r2, #0]

	hri_eic_set_CTRLA_ENABLE_bit(EIC);

	callback = cb;

	return ERR_NONE;
    1672:	2000      	movs	r0, #0
    1674:	4770      	bx	lr
		return ERR_DENIED;
    1676:	f06f 0010 	mvn.w	r0, #16
}
    167a:	4770      	bx	lr
    167c:	40002800 	.word	0x40002800

00001680 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    1680:	b430      	push	{r4, r5}
    1682:	4814      	ldr	r0, [pc, #80]	; (16d4 <_event_system_init+0x54>)
    1684:	f100 0543 	add.w	r5, r0, #67	; 0x43
    1688:	4603      	mov	r3, r0
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    168a:	4c13      	ldr	r4, [pc, #76]	; (16d8 <_event_system_init+0x58>)
    168c:	1a1a      	subs	r2, r3, r0
	uint8_t i;

	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    168e:	f813 1b01 	ldrb.w	r1, [r3], #1
    1692:	3248      	adds	r2, #72	; 0x48
    1694:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    1698:	42ab      	cmp	r3, r5
    169a:	d1f7      	bne.n	168c <_event_system_init+0xc>
    169c:	480d      	ldr	r0, [pc, #52]	; (16d4 <_event_system_init+0x54>)
    169e:	f100 0442 	add.w	r4, r0, #66	; 0x42
    16a2:	3080      	adds	r0, #128	; 0x80
    16a4:	2100      	movs	r1, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    16a6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    16aa:	00ca      	lsls	r2, r1, #3
    16ac:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
    16b0:	f502 4260 	add.w	r2, r2, #57344	; 0xe000

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    16b4:	6213      	str	r3, [r2, #32]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    16b6:	f850 3f04 	ldr.w	r3, [r0, #4]!
    16ba:	b2db      	uxtb	r3, r3
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    16bc:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    16c0:	43db      	mvns	r3, r3
    16c2:	b2db      	uxtb	r3, r3
    16c4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    16c8:	3101      	adds	r1, #1
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    16ca:	2920      	cmp	r1, #32
    16cc:	d1eb      	bne.n	16a6 <_event_system_init+0x26>
	}

	return ERR_NONE;
}
    16ce:	2000      	movs	r0, #0
    16d0:	bc30      	pop	{r4, r5}
    16d2:	4770      	bx	lr
    16d4:	00002cf4 	.word	0x00002cf4
    16d8:	4100e000 	.word	0x4100e000

000016dc <_gclk_init_generators_by_fref>:
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
    16dc:	f010 0f01 	tst.w	r0, #1
    16e0:	d002      	beq.n	16e8 <_gclk_init_generators_by_fref+0xc>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    16e2:	4a23      	ldr	r2, [pc, #140]	; (1770 <_gclk_init_generators_by_fref+0x94>)
    16e4:	4b23      	ldr	r3, [pc, #140]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    16e6:	621a      	str	r2, [r3, #32]
		                               | (CONF_GCLK_GEN_0_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_0_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_1_GENEN == 1
	if (bm & (1ul << 1)) {
    16e8:	f010 0f02 	tst.w	r0, #2
    16ec:	d002      	beq.n	16f4 <_gclk_init_generators_by_fref+0x18>
    16ee:	4a22      	ldr	r2, [pc, #136]	; (1778 <_gclk_init_generators_by_fref+0x9c>)
    16f0:	4b20      	ldr	r3, [pc, #128]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    16f2:	625a      	str	r2, [r3, #36]	; 0x24
		                               | (CONF_GCLK_GEN_1_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_1_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_2_GENEN == 1
	if (bm & (1ul << 2)) {
    16f4:	f010 0f04 	tst.w	r0, #4
    16f8:	d002      	beq.n	1700 <_gclk_init_generators_by_fref+0x24>
    16fa:	4a1d      	ldr	r2, [pc, #116]	; (1770 <_gclk_init_generators_by_fref+0x94>)
    16fc:	4b1d      	ldr	r3, [pc, #116]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    16fe:	629a      	str	r2, [r3, #40]	; 0x28
		                               | (CONF_GCLK_GEN_2_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_2_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_3_GENEN == 1
	if (bm & (1ul << 3)) {
    1700:	f010 0f08 	tst.w	r0, #8
    1704:	d002      	beq.n	170c <_gclk_init_generators_by_fref+0x30>
    1706:	4a1a      	ldr	r2, [pc, #104]	; (1770 <_gclk_init_generators_by_fref+0x94>)
    1708:	4b1a      	ldr	r3, [pc, #104]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    170a:	62da      	str	r2, [r3, #44]	; 0x2c
		                               | (CONF_GCLK_GEN_3_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_3_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_4_GENEN == 1
	if (bm & (1ul << 4)) {
    170c:	f010 0f10 	tst.w	r0, #16
    1710:	d002      	beq.n	1718 <_gclk_init_generators_by_fref+0x3c>
    1712:	4a17      	ldr	r2, [pc, #92]	; (1770 <_gclk_init_generators_by_fref+0x94>)
    1714:	4b17      	ldr	r3, [pc, #92]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    1716:	631a      	str	r2, [r3, #48]	; 0x30
		                               | (CONF_GCLK_GEN_4_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_5_GENEN == 1
	if (bm & (1ul << 5)) {
    1718:	f010 0f20 	tst.w	r0, #32
    171c:	d002      	beq.n	1724 <_gclk_init_generators_by_fref+0x48>
    171e:	4a14      	ldr	r2, [pc, #80]	; (1770 <_gclk_init_generators_by_fref+0x94>)
    1720:	4b14      	ldr	r3, [pc, #80]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    1722:	635a      	str	r2, [r3, #52]	; 0x34
		                               | (CONF_GCLK_GEN_5_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_5_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_6_GENEN == 1
	if (bm & (1ul << 6)) {
    1724:	f010 0f40 	tst.w	r0, #64	; 0x40
    1728:	d002      	beq.n	1730 <_gclk_init_generators_by_fref+0x54>
    172a:	4a11      	ldr	r2, [pc, #68]	; (1770 <_gclk_init_generators_by_fref+0x94>)
    172c:	4b11      	ldr	r3, [pc, #68]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    172e:	639a      	str	r2, [r3, #56]	; 0x38
		                               | (CONF_GCLK_GEN_6_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_6_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_7_GENEN == 1
	if (bm & (1ul << 7)) {
    1730:	f010 0f80 	tst.w	r0, #128	; 0x80
    1734:	d002      	beq.n	173c <_gclk_init_generators_by_fref+0x60>
    1736:	4a0e      	ldr	r2, [pc, #56]	; (1770 <_gclk_init_generators_by_fref+0x94>)
    1738:	4b0e      	ldr	r3, [pc, #56]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    173a:	63da      	str	r2, [r3, #60]	; 0x3c
		                               | (CONF_GCLK_GEN_7_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_7_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_8_GENEN == 1
	if (bm & (1ul << 8)) {
    173c:	f410 7f80 	tst.w	r0, #256	; 0x100
    1740:	d002      	beq.n	1748 <_gclk_init_generators_by_fref+0x6c>
    1742:	4a0b      	ldr	r2, [pc, #44]	; (1770 <_gclk_init_generators_by_fref+0x94>)
    1744:	4b0b      	ldr	r3, [pc, #44]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    1746:	641a      	str	r2, [r3, #64]	; 0x40
		                               | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_9_GENEN == 1
	if (bm & (1ul << 9)) {
    1748:	f410 7f00 	tst.w	r0, #512	; 0x200
    174c:	d002      	beq.n	1754 <_gclk_init_generators_by_fref+0x78>
    174e:	4a08      	ldr	r2, [pc, #32]	; (1770 <_gclk_init_generators_by_fref+0x94>)
    1750:	4b08      	ldr	r3, [pc, #32]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    1752:	645a      	str	r2, [r3, #68]	; 0x44
		                               | (CONF_GCLK_GEN_9_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_9_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_10_GENEN == 1
	if (bm & (1ul << 10)) {
    1754:	f410 6f80 	tst.w	r0, #1024	; 0x400
    1758:	d002      	beq.n	1760 <_gclk_init_generators_by_fref+0x84>
    175a:	4a08      	ldr	r2, [pc, #32]	; (177c <_gclk_init_generators_by_fref+0xa0>)
    175c:	4b05      	ldr	r3, [pc, #20]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    175e:	649a      	str	r2, [r3, #72]	; 0x48
		                               | (CONF_GCLK_GEN_10_GENEN << GCLK_GENCTRL_GENEN_Pos)
		                               | CONF_GCLK_GEN_10_SOURCE);
	}
#endif
#if CONF_GCLK_GEN_11_GENEN == 1
	if (bm & (1ul << 11)) {
    1760:	f410 6f00 	tst.w	r0, #2048	; 0x800
    1764:	d002      	beq.n	176c <_gclk_init_generators_by_fref+0x90>
    1766:	4a06      	ldr	r2, [pc, #24]	; (1780 <_gclk_init_generators_by_fref+0xa4>)
    1768:	4b02      	ldr	r3, [pc, #8]	; (1774 <_gclk_init_generators_by_fref+0x98>)
    176a:	64da      	str	r2, [r3, #76]	; 0x4c
    176c:	4770      	bx	lr
    176e:	bf00      	nop
    1770:	00012b06 	.word	0x00012b06
    1774:	40001c00 	.word	0x40001c00
    1778:	00012306 	.word	0x00012306
    177c:	00012b05 	.word	0x00012b05
    1780:	00013b05 	.word	0x00013b05

00001784 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    1784:	2201      	movs	r2, #1
    1786:	4b01      	ldr	r3, [pc, #4]	; (178c <_mclk_init+0x8>)
    1788:	715a      	strb	r2, [r3, #5]
    178a:	4770      	bx	lr
    178c:	40000800 	.word	0x40000800

00001790 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
    1790:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1792:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
    1794:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
    1796:	f012 0f01 	tst.w	r2, #1
    179a:	d005      	beq.n	17a8 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
    179c:	2201      	movs	r2, #1
    179e:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
    17a0:	6803      	ldr	r3, [r0, #0]
    17a2:	b153      	cbz	r3, 17ba <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
    17a4:	4798      	blx	r3
    17a6:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
    17a8:	8a1a      	ldrh	r2, [r3, #16]
    17aa:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
    17ac:	b12a      	cbz	r2, 17ba <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
    17ae:	f240 225e 	movw	r2, #606	; 0x25e
    17b2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
    17b4:	6843      	ldr	r3, [r0, #4]
    17b6:	b103      	cbz	r3, 17ba <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
    17b8:	4798      	blx	r3
    17ba:	bd08      	pop	{r3, pc}

000017bc <_flash_init>:
{
    17bc:	b538      	push	{r3, r4, r5, lr}
    17be:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
    17c0:	4605      	mov	r5, r0
    17c2:	b350      	cbz	r0, 181a <_flash_init+0x5e>
    17c4:	4816      	ldr	r0, [pc, #88]	; (1820 <_flash_init+0x64>)
    17c6:	4281      	cmp	r1, r0
    17c8:	bf14      	ite	ne
    17ca:	2000      	movne	r0, #0
    17cc:	2001      	moveq	r0, #1
    17ce:	2256      	movs	r2, #86	; 0x56
    17d0:	4914      	ldr	r1, [pc, #80]	; (1824 <_flash_init+0x68>)
    17d2:	4b15      	ldr	r3, [pc, #84]	; (1828 <_flash_init+0x6c>)
    17d4:	4798      	blx	r3
	device->hw = hw;
    17d6:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
    17d8:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
    17da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
    17de:	049b      	lsls	r3, r3, #18
    17e0:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
    17e2:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
    17e4:	4b11      	ldr	r3, [pc, #68]	; (182c <_flash_init+0x70>)
    17e6:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    17e8:	4b11      	ldr	r3, [pc, #68]	; (1830 <_flash_init+0x74>)
    17ea:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    17ee:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    17f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17f6:	f3bf 8f6f 	isb	sy
    17fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    17fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1802:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1806:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    180a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    180e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1812:	6019      	str	r1, [r3, #0]
    1814:	601a      	str	r2, [r3, #0]
}
    1816:	2000      	movs	r0, #0
    1818:	bd38      	pop	{r3, r4, r5, pc}
    181a:	2000      	movs	r0, #0
    181c:	e7d7      	b.n	17ce <_flash_init+0x12>
    181e:	bf00      	nop
    1820:	41004000 	.word	0x41004000
    1824:	00002df8 	.word	0x00002df8
    1828:	00001181 	.word	0x00001181
    182c:	200006b0 	.word	0x200006b0
    1830:	e000e100 	.word	0xe000e100

00001834 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
    1834:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    1836:	4b02      	ldr	r3, [pc, #8]	; (1840 <NVMCTRL_0_Handler+0xc>)
    1838:	6818      	ldr	r0, [r3, #0]
    183a:	4b02      	ldr	r3, [pc, #8]	; (1844 <NVMCTRL_0_Handler+0x10>)
    183c:	4798      	blx	r3
    183e:	bd08      	pop	{r3, pc}
    1840:	200006b0 	.word	0x200006b0
    1844:	00001791 	.word	0x00001791

00001848 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
    1848:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
    184a:	4b02      	ldr	r3, [pc, #8]	; (1854 <NVMCTRL_1_Handler+0xc>)
    184c:	6818      	ldr	r0, [r3, #0]
    184e:	4b02      	ldr	r3, [pc, #8]	; (1858 <NVMCTRL_1_Handler+0x10>)
    1850:	4798      	blx	r3
    1852:	bd08      	pop	{r3, pc}
    1854:	200006b0 	.word	0x200006b0
    1858:	00001791 	.word	0x00001791

0000185c <_osc32kctrl_init_sources>:
}

static inline void hri_osc32kctrl_write_XOSC32K_reg(const void *const hw, hri_osc32kctrl_xosc32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->XOSC32K.reg = data;
    185c:	4b07      	ldr	r3, [pc, #28]	; (187c <_osc32kctrl_init_sources+0x20>)
    185e:	f242 024e 	movw	r2, #8270	; 0x204e
    1862:	829a      	strh	r2, [r3, #20]
}

static inline void hri_osc32kctrl_write_CFDCTRL_reg(const void *const hw, hri_osc32kctrl_cfdctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->CFDCTRL.reg = data;
    1864:	2201      	movs	r2, #1
    1866:	759a      	strb	r2, [r3, #22]
}

static inline void hri_osc32kctrl_write_EVCTRL_reg(const void *const hw, hri_osc32kctrl_evctrl_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->EVCTRL.reg = data;
    1868:	75da      	strb	r2, [r3, #23]
	return ((Osc32kctrl *)hw)->OSCULP32K.reg;
}

static inline bool hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(const void *const hw)
{
	return (((Osc32kctrl *)hw)->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) >> OSC32KCTRL_STATUS_XOSC32KRDY_Pos;
    186a:	461a      	mov	r2, r3
    186c:	68d3      	ldr	r3, [r2, #12]
	                                       );
#endif

#if CONF_XOSC32K_CONFIG
#if CONF_XOSC32K_ENABLE == 1 && CONF_XOSC32K_ONDEMAND == 0
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
    186e:	f013 0f01 	tst.w	r3, #1
    1872:	d0fb      	beq.n	186c <_osc32kctrl_init_sources+0x10>
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    1874:	2205      	movs	r2, #5
    1876:	4b01      	ldr	r3, [pc, #4]	; (187c <_osc32kctrl_init_sources+0x20>)
    1878:	741a      	strb	r2, [r3, #16]
    187a:	4770      	bx	lr
    187c:	40001400 	.word	0x40001400

00001880 <_oscctrl_init_referenced_generators>:
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1880:	4a2b      	ldr	r2, [pc, #172]	; (1930 <_oscctrl_init_referenced_generators+0xb0>)
    1882:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1884:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    1888:	f043 0304 	orr.w	r3, r3, #4
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    188c:	6213      	str	r3, [r2, #32]
}

static inline void hri_oscctrl_write_DFLLCTRLA_reg(const void *const hw, hri_oscctrl_dfllctrla_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    188e:	4b29      	ldr	r3, [pc, #164]	; (1934 <_oscctrl_init_referenced_generators+0xb4>)
    1890:	2200      	movs	r2, #0
    1892:	771a      	strb	r2, [r3, #28]
}

static inline void hri_oscctrl_write_DFLLMUL_reg(const void *const hw, hri_oscctrl_dfllmul_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->DFLLMUL.reg = data;
    1894:	4a28      	ldr	r2, [pc, #160]	; (1938 <_oscctrl_init_referenced_generators+0xb8>)
    1896:	629a      	str	r2, [r3, #40]	; 0x28
}

static inline bool hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    1898:	461a      	mov	r2, r3
    189a:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
#endif

	hri_oscctrl_write_DFLLMUL_reg(hw,
	                              OSCCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | OSCCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | OSCCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	while (hri_oscctrl_get_DFLLSYNC_DFLLMUL_bit(hw))
    189e:	f013 0f10 	tst.w	r3, #16
    18a2:	d1fa      	bne.n	189a <_oscctrl_init_referenced_generators+0x1a>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    18a4:	2200      	movs	r2, #0
    18a6:	4b23      	ldr	r3, [pc, #140]	; (1934 <_oscctrl_init_referenced_generators+0xb4>)
    18a8:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    18ac:	461a      	mov	r2, r3
    18ae:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	hri_oscctrl_write_DFLLCTRLB_reg(hw, 0);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    18b2:	f013 0f04 	tst.w	r3, #4
    18b6:	d1fa      	bne.n	18ae <_oscctrl_init_referenced_generators+0x2e>
	((Oscctrl *)hw)->DFLLCTRLA.reg = data;
    18b8:	2242      	movs	r2, #66	; 0x42
    18ba:	4b1e      	ldr	r3, [pc, #120]	; (1934 <_oscctrl_init_referenced_generators+0xb4>)
    18bc:	771a      	strb	r2, [r3, #28]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    18be:	461a      	mov	r2, r3
    18c0:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
		;

	tmp = (CONF_DFLL_RUNSTDBY << OSCCTRL_DFLLCTRLA_RUNSTDBY_Pos) | OSCCTRL_DFLLCTRLA_ENABLE;
	hri_oscctrl_write_DFLLCTRLA_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_ENABLE_bit(hw))
    18c4:	f013 0f02 	tst.w	r3, #2
    18c8:	d1fa      	bne.n	18c0 <_oscctrl_init_referenced_generators+0x40>
	return ((Oscctrl *)hw)->DFLLVAL.reg;
    18ca:	4b1a      	ldr	r3, [pc, #104]	; (1934 <_oscctrl_init_referenced_generators+0xb4>)
    18cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	((Oscctrl *)hw)->DFLLVAL.reg = data;
    18ce:	625a      	str	r2, [r3, #36]	; 0x24
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    18d0:	461a      	mov	r2, r3
    18d2:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c

#if CONF_DFLL_OVERWRITE_CALIBRATION == 1
	hri_oscctrl_write_DFLLVAL_reg(hw, OSCCTRL_DFLLVAL_COARSE(CONF_DFLL_COARSE) | OSCCTRL_DFLLVAL_FINE(CONF_DFLL_FINE));
#endif
	hri_oscctrl_write_DFLLVAL_reg(hw, hri_oscctrl_read_DFLLVAL_reg(hw));
	while (hri_oscctrl_get_DFLLSYNC_DFLLVAL_bit(hw))
    18d6:	f013 0f08 	tst.w	r3, #8
    18da:	d1fa      	bne.n	18d2 <_oscctrl_init_referenced_generators+0x52>
	((Oscctrl *)hw)->DFLLCTRLB.reg = data;
    18dc:	2282      	movs	r2, #130	; 0x82
    18de:	4b15      	ldr	r3, [pc, #84]	; (1934 <_oscctrl_init_referenced_generators+0xb4>)
    18e0:	f883 2020 	strb.w	r2, [r3, #32]
	tmp = ((Oscctrl *)hw)->DFLLSYNC.reg;
    18e4:	461a      	mov	r2, r3
    18e6:	f892 302c 	ldrb.w	r3, [r2, #44]	; 0x2c
	tmp = (CONF_DFLL_WAITLOCK << OSCCTRL_DFLLCTRLB_WAITLOCK_Pos) | (CONF_DFLL_BPLCKC << OSCCTRL_DFLLCTRLB_BPLCKC_Pos)
	      | (CONF_DFLL_QLDIS << OSCCTRL_DFLLCTRLB_QLDIS_Pos) | (CONF_DFLL_CCDIS << OSCCTRL_DFLLCTRLB_CCDIS_Pos)
	      | (CONF_DFLL_USBCRM << OSCCTRL_DFLLCTRLB_USBCRM_Pos) | (CONF_DFLL_LLAW << OSCCTRL_DFLLCTRLB_LLAW_Pos)
	      | (CONF_DFLL_STABLE << OSCCTRL_DFLLCTRLB_STABLE_Pos) | (CONF_DFLL_MODE << OSCCTRL_DFLLCTRLB_MODE_Pos) | 0;
	hri_oscctrl_write_DFLLCTRLB_reg(hw, tmp);
	while (hri_oscctrl_get_DFLLSYNC_DFLLCTRLB_bit(hw))
    18ea:	f013 0f04 	tst.w	r3, #4
    18ee:	d1fa      	bne.n	18e6 <_oscctrl_init_referenced_generators+0x66>
	tmp = ((Oscctrl *)hw)->DFLLCTRLB.reg;
    18f0:	4b10      	ldr	r3, [pc, #64]	; (1934 <_oscctrl_init_referenced_generators+0xb4>)
    18f2:	f893 3020 	ldrb.w	r3, [r3, #32]
	                                (CONF_FDPLL1_RUNSTDBY << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos)
	                                    | (CONF_FDPLL1_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_DFLL_CONFIG == 1
	if (hri_oscctrl_get_DFLLCTRLB_MODE_bit(hw)) {
    18f6:	f013 0f01 	tst.w	r3, #1
    18fa:	d012      	beq.n	1922 <_oscctrl_init_referenced_generators+0xa2>
}

static inline hri_oscctrl_status_reg_t hri_oscctrl_get_STATUS_reg(const void *const hw, hri_oscctrl_status_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Oscctrl *)hw)->STATUS.reg;
    18fc:	4a0d      	ldr	r2, [pc, #52]	; (1934 <_oscctrl_init_referenced_generators+0xb4>)
    18fe:	6913      	ldr	r3, [r2, #16]
	tmp &= mask;
    1900:	f403 6310 	and.w	r3, r3, #2304	; 0x900
		hri_oscctrl_status_reg_t status_mask = OSCCTRL_STATUS_DFLLRDY | OSCCTRL_STATUS_DFLLLCKC;

		while (hri_oscctrl_get_STATUS_reg(hw, status_mask) != status_mask)
    1904:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    1908:	d1f9      	bne.n	18fe <_oscctrl_init_referenced_generators+0x7e>
	return tmp;
}

static inline hri_gclk_syncbusy_reg_t hri_gclk_read_SYNCBUSY_reg(const void *const hw)
{
	return ((Gclk *)hw)->SYNCBUSY.reg;
    190a:	4a09      	ldr	r2, [pc, #36]	; (1930 <_oscctrl_init_referenced_generators+0xb0>)
    190c:	6853      	ldr	r3, [r2, #4]
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw, 1);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
    190e:	2b00      	cmp	r3, #0
    1910:	d1fc      	bne.n	190c <_oscctrl_init_referenced_generators+0x8c>
	tmp = ((Gclk *)hw)->GENCTRL[index].reg;
    1912:	4a07      	ldr	r2, [pc, #28]	; (1930 <_oscctrl_init_referenced_generators+0xb0>)
    1914:	6a13      	ldr	r3, [r2, #32]
	tmp &= ~GCLK_GENCTRL_SRC_Msk;
    1916:	f023 030f 	bic.w	r3, r3, #15
	tmp |= GCLK_GENCTRL_SRC(data);
    191a:	f043 0306 	orr.w	r3, r3, #6
	((Gclk *)hw)->GENCTRL[index].reg = tmp;
    191e:	6213      	str	r3, [r2, #32]
    1920:	4770      	bx	lr
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_DFLLRDY) >> OSCCTRL_STATUS_DFLLRDY_Pos;
    1922:	4a04      	ldr	r2, [pc, #16]	; (1934 <_oscctrl_init_referenced_generators+0xb4>)
    1924:	6913      	ldr	r3, [r2, #16]
		while (!hri_oscctrl_get_STATUS_DFLLRDY_bit(hw))
    1926:	f413 7f80 	tst.w	r3, #256	; 0x100
    192a:	d0fb      	beq.n	1924 <_oscctrl_init_referenced_generators+0xa4>
    192c:	e7ed      	b.n	190a <_oscctrl_init_referenced_generators+0x8a>
    192e:	bf00      	nop
    1930:	40001c00 	.word	0x40001c00
    1934:	40001000 	.word	0x40001000
    1938:	04010000 	.word	0x04010000

0000193c <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    193c:	b500      	push	{lr}
    193e:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    1940:	4b0d      	ldr	r3, [pc, #52]	; (1978 <RAMECC_Handler+0x3c>)
    1942:	789b      	ldrb	r3, [r3, #2]
    1944:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1946:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1948:	9b01      	ldr	r3, [sp, #4]
    194a:	f013 0f02 	tst.w	r3, #2
    194e:	d006      	beq.n	195e <RAMECC_Handler+0x22>
    1950:	4b0a      	ldr	r3, [pc, #40]	; (197c <RAMECC_Handler+0x40>)
    1952:	681b      	ldr	r3, [r3, #0]
    1954:	b11b      	cbz	r3, 195e <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1956:	4a08      	ldr	r2, [pc, #32]	; (1978 <RAMECC_Handler+0x3c>)
    1958:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    195a:	4798      	blx	r3
    195c:	e009      	b.n	1972 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    195e:	9b01      	ldr	r3, [sp, #4]
    1960:	f013 0f01 	tst.w	r3, #1
    1964:	d005      	beq.n	1972 <RAMECC_Handler+0x36>
    1966:	4b05      	ldr	r3, [pc, #20]	; (197c <RAMECC_Handler+0x40>)
    1968:	685b      	ldr	r3, [r3, #4]
    196a:	b113      	cbz	r3, 1972 <RAMECC_Handler+0x36>
    196c:	4a02      	ldr	r2, [pc, #8]	; (1978 <RAMECC_Handler+0x3c>)
    196e:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1970:	4798      	blx	r3
	} else {
		return;
	}
}
    1972:	b003      	add	sp, #12
    1974:	f85d fb04 	ldr.w	pc, [sp], #4
    1978:	41020000 	.word	0x41020000
    197c:	200009c4 	.word	0x200009c4

00001980 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    1980:	b470      	push	{r4, r5, r6}
    1982:	b087      	sub	sp, #28
    1984:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    1986:	466c      	mov	r4, sp
    1988:	4d0c      	ldr	r5, [pc, #48]	; (19bc <_sercom_get_hardware_index+0x3c>)
    198a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    198c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    198e:	e895 0003 	ldmia.w	r5, {r0, r1}
    1992:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    1996:	9b00      	ldr	r3, [sp, #0]
    1998:	42b3      	cmp	r3, r6
    199a:	d00c      	beq.n	19b6 <_sercom_get_hardware_index+0x36>
    199c:	4632      	mov	r2, r6
    199e:	2001      	movs	r0, #1
    19a0:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    19a4:	4293      	cmp	r3, r2
    19a6:	d007      	beq.n	19b8 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19a8:	3001      	adds	r0, #1
    19aa:	2806      	cmp	r0, #6
    19ac:	d1f8      	bne.n	19a0 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    19ae:	2000      	movs	r0, #0
}
    19b0:	b007      	add	sp, #28
    19b2:	bc70      	pop	{r4, r5, r6}
    19b4:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19b6:	2000      	movs	r0, #0
			return i;
    19b8:	b2c0      	uxtb	r0, r0
    19ba:	e7f9      	b.n	19b0 <_sercom_get_hardware_index+0x30>
    19bc:	00002e18 	.word	0x00002e18

000019c0 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    19c0:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    19c2:	4b03      	ldr	r3, [pc, #12]	; (19d0 <_sercom_get_irq_num+0x10>)
    19c4:	4798      	blx	r3
    19c6:	0080      	lsls	r0, r0, #2
    19c8:	302e      	adds	r0, #46	; 0x2e
}
    19ca:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    19ce:	bd08      	pop	{r3, pc}
    19d0:	00001981 	.word	0x00001981

000019d4 <_usart_init>:
{
    19d4:	b538      	push	{r3, r4, r5, lr}
    19d6:	4604      	mov	r4, r0
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    19d8:	4b33      	ldr	r3, [pc, #204]	; (1aa8 <_usart_init+0xd4>)
    19da:	4798      	blx	r3
		if (_usarts[i].number == sercom_offset) {
    19dc:	2803      	cmp	r0, #3
    19de:	d056      	beq.n	1a8e <_usart_init+0xba>
    19e0:	2804      	cmp	r0, #4
    19e2:	d052      	beq.n	1a8a <_usart_init+0xb6>
    19e4:	2805      	cmp	r0, #5
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    19e6:	bf08      	it	eq
    19e8:	2202      	moveq	r2, #2
		if (_usarts[i].number == sercom_offset) {
    19ea:	d006      	beq.n	19fa <_usart_init+0x26>
	ASSERT(false);
    19ec:	f240 2262 	movw	r2, #610	; 0x262
    19f0:	492e      	ldr	r1, [pc, #184]	; (1aac <_usart_init+0xd8>)
    19f2:	2000      	movs	r0, #0
    19f4:	4b2e      	ldr	r3, [pc, #184]	; (1ab0 <_usart_init+0xdc>)
    19f6:	4798      	blx	r3
	return 0;
    19f8:	2200      	movs	r2, #0
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    19fa:	69e3      	ldr	r3, [r4, #28]
    19fc:	f013 0f01 	tst.w	r3, #1
    1a00:	d1fb      	bne.n	19fa <_usart_init+0x26>
    1a02:	69e3      	ldr	r3, [r4, #28]
    1a04:	f013 0f03 	tst.w	r3, #3
    1a08:	d1fb      	bne.n	1a02 <_usart_init+0x2e>

static inline bool hri_sercomusart_get_CTRLA_ENABLE_bit(const void *const hw)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    1a0a:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_ENABLE_bit(hw)) {
    1a0c:	f013 0f02 	tst.w	r3, #2
    1a10:	d147      	bne.n	1aa2 <_usart_init+0xce>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1a12:	69e3      	ldr	r3, [r4, #28]
    1a14:	f013 0f01 	tst.w	r3, #1
    1a18:	d1fb      	bne.n	1a12 <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_SWRST;
    1a1a:	6823      	ldr	r3, [r4, #0]
    1a1c:	f043 0301 	orr.w	r3, r3, #1
    1a20:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1a22:	69e3      	ldr	r3, [r4, #28]
    1a24:	f013 0f01 	tst.w	r3, #1
    1a28:	d1fb      	bne.n	1a22 <_usart_init+0x4e>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    1a2a:	4610      	mov	r0, r2
    1a2c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    1a30:	4920      	ldr	r1, [pc, #128]	; (1ab4 <_usart_init+0xe0>)
    1a32:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
    1a36:	69d9      	ldr	r1, [r3, #28]
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    1a38:	6021      	str	r1, [r4, #0]
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1a3a:	6a1d      	ldr	r5, [r3, #32]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1a3c:	6065      	str	r5, [r4, #4]
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    1a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1a40:	60a3      	str	r3, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1a42:	f411 4fc0 	tst.w	r1, #24576	; 0x6000
    1a46:	d024      	beq.n	1a92 <_usart_init+0xbe>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1a48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1a4c:	4b19      	ldr	r3, [pc, #100]	; (1ab4 <_usart_init+0xe0>)
    1a4e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1a52:	8d11      	ldrh	r1, [r2, #40]	; 0x28
    1a54:	89a3      	ldrh	r3, [r4, #12]
    1a56:	f361 030c 	bfi	r3, r1, #0, #13
    1a5a:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    1a5c:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
    1a60:	89a3      	ldrh	r3, [r4, #12]
    1a62:	f362 334f 	bfi	r3, r2, #13, #3
    1a66:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1a68:	4b12      	ldr	r3, [pc, #72]	; (1ab4 <_usart_init+0xe0>)
    1a6a:	0042      	lsls	r2, r0, #1
    1a6c:	1811      	adds	r1, r2, r0
    1a6e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1a72:	f891 102b 	ldrb.w	r1, [r1, #43]	; 0x2b
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    1a76:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    1a78:	4402      	add	r2, r0
    1a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    1a7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    1a82:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	return ERR_NONE;
    1a86:	2000      	movs	r0, #0
    1a88:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1a8a:	2201      	movs	r2, #1
    1a8c:	e7b5      	b.n	19fa <_usart_init+0x26>
    1a8e:	2200      	movs	r2, #0
    1a90:	e7b3      	b.n	19fa <_usart_init+0x26>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1a92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1a96:	4b07      	ldr	r3, [pc, #28]	; (1ab4 <_usart_init+0xe0>)
    1a98:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    1a9c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
	((Sercom *)hw)->USART.BAUD.reg = data;
    1a9e:	81a3      	strh	r3, [r4, #12]
    1aa0:	e7e2      	b.n	1a68 <_usart_init+0x94>
		return ERR_DENIED;
    1aa2:	f06f 0010 	mvn.w	r0, #16
}
    1aa6:	bd38      	pop	{r3, r4, r5, pc}
    1aa8:	00001981 	.word	0x00001981
    1aac:	00002ea4 	.word	0x00002ea4
    1ab0:	00001181 	.word	0x00001181
    1ab4:	00002e18 	.word	0x00002e18

00001ab8 <_usart_async_init>:
{
    1ab8:	b570      	push	{r4, r5, r6, lr}
    1aba:	460d      	mov	r5, r1
	ASSERT(device);
    1abc:	4606      	mov	r6, r0
    1abe:	22da      	movs	r2, #218	; 0xda
    1ac0:	4912      	ldr	r1, [pc, #72]	; (1b0c <_usart_async_init+0x54>)
    1ac2:	3000      	adds	r0, #0
    1ac4:	bf18      	it	ne
    1ac6:	2001      	movne	r0, #1
    1ac8:	4b11      	ldr	r3, [pc, #68]	; (1b10 <_usart_async_init+0x58>)
    1aca:	4798      	blx	r3
	init_status = _usart_init(hw);
    1acc:	4628      	mov	r0, r5
    1ace:	4b11      	ldr	r3, [pc, #68]	; (1b14 <_usart_async_init+0x5c>)
    1ad0:	4798      	blx	r3
	if (init_status) {
    1ad2:	4604      	mov	r4, r0
    1ad4:	b9c0      	cbnz	r0, 1b08 <_usart_async_init+0x50>
	device->hw = hw;
    1ad6:	61b5      	str	r5, [r6, #24]
	uint8_t irq = _sercom_get_irq_num(hw);
    1ad8:	4628      	mov	r0, r5
    1ada:	4b0f      	ldr	r3, [pc, #60]	; (1b18 <_usart_async_init+0x60>)
    1adc:	4798      	blx	r3
		irq = irq +2;
    1ade:	3002      	adds	r0, #2
    1ae0:	b2c0      	uxtb	r0, r0
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1ae2:	f000 031f 	and.w	r3, r0, #31
    1ae6:	2201      	movs	r2, #1
    1ae8:	409a      	lsls	r2, r3
    1aea:	0943      	lsrs	r3, r0, #5
    1aec:	009b      	lsls	r3, r3, #2
    1aee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1af2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1afa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1afe:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1b02:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1b06:	601a      	str	r2, [r3, #0]
}
    1b08:	4620      	mov	r0, r4
    1b0a:	bd70      	pop	{r4, r5, r6, pc}
    1b0c:	00002ea4 	.word	0x00002ea4
    1b10:	00001181 	.word	0x00001181
    1b14:	000019d5 	.word	0x000019d5
    1b18:	000019c1 	.word	0x000019c1

00001b1c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1b1c:	6982      	ldr	r2, [r0, #24]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1b1e:	69d3      	ldr	r3, [r2, #28]
    1b20:	f013 0f03 	tst.w	r3, #3
    1b24:	d1fb      	bne.n	1b1e <_usart_async_enable+0x2>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1b26:	6813      	ldr	r3, [r2, #0]
    1b28:	f043 0302 	orr.w	r3, r3, #2
    1b2c:	6013      	str	r3, [r2, #0]
    1b2e:	4770      	bx	lr

00001b30 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1b30:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    1b32:	6299      	str	r1, [r3, #40]	; 0x28
    1b34:	4770      	bx	lr

00001b36 <_usart_async_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    1b36:	6983      	ldr	r3, [r0, #24]
	return ((Sercom *)hw)->USART.DATA.reg;
    1b38:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1b3a:	b2c0      	uxtb	r0, r0
    1b3c:	4770      	bx	lr

00001b3e <_usart_async_is_byte_sent>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1b3e:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1b40:	7e18      	ldrb	r0, [r3, #24]
}
    1b42:	f000 0001 	and.w	r0, r0, #1
    1b46:	4770      	bx	lr

00001b48 <_usart_async_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1b48:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1b4a:	7e18      	ldrb	r0, [r3, #24]
}
    1b4c:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1b50:	4770      	bx	lr
	...

00001b54 <_usart_async_set_irq_state>:
{
    1b54:	b570      	push	{r4, r5, r6, lr}
    1b56:	460c      	mov	r4, r1
    1b58:	4616      	mov	r6, r2
	ASSERT(device);
    1b5a:	4605      	mov	r5, r0
    1b5c:	f44f 7211 	mov.w	r2, #580	; 0x244
    1b60:	4915      	ldr	r1, [pc, #84]	; (1bb8 <_usart_async_set_irq_state+0x64>)
    1b62:	3000      	adds	r0, #0
    1b64:	bf18      	it	ne
    1b66:	2001      	movne	r0, #1
    1b68:	4b14      	ldr	r3, [pc, #80]	; (1bbc <_usart_async_set_irq_state+0x68>)
    1b6a:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1b6c:	f014 0ffd 	tst.w	r4, #253	; 0xfd
    1b70:	d10d      	bne.n	1b8e <_usart_async_set_irq_state+0x3a>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1b72:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1b74:	b92e      	cbnz	r6, 1b82 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1b76:	2201      	movs	r2, #1
    1b78:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    1b7a:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1b7c:	2202      	movs	r2, #2
    1b7e:	751a      	strb	r2, [r3, #20]
    1b80:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1b82:	2201      	movs	r2, #1
    1b84:	759a      	strb	r2, [r3, #22]
    1b86:	69ab      	ldr	r3, [r5, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1b88:	2202      	movs	r2, #2
    1b8a:	759a      	strb	r2, [r3, #22]
    1b8c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (USART_ASYNC_RX_DONE == type) {
    1b8e:	2c01      	cmp	r4, #1
    1b90:	d002      	beq.n	1b98 <_usart_async_set_irq_state+0x44>
	} else if (USART_ASYNC_ERROR == type) {
    1b92:	2c03      	cmp	r4, #3
    1b94:	d008      	beq.n	1ba8 <_usart_async_set_irq_state+0x54>
    1b96:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1b98:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1b9a:	b916      	cbnz	r6, 1ba2 <_usart_async_set_irq_state+0x4e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1b9c:	2204      	movs	r2, #4
    1b9e:	751a      	strb	r2, [r3, #20]
    1ba0:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    1ba2:	2204      	movs	r2, #4
    1ba4:	759a      	strb	r2, [r3, #22]
    1ba6:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
    1ba8:	69ab      	ldr	r3, [r5, #24]
	if (value == 0x0) {
    1baa:	b116      	cbz	r6, 1bb2 <_usart_async_set_irq_state+0x5e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
    1bac:	2280      	movs	r2, #128	; 0x80
    1bae:	759a      	strb	r2, [r3, #22]
}
    1bb0:	e7f1      	b.n	1b96 <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
    1bb2:	2280      	movs	r2, #128	; 0x80
    1bb4:	751a      	strb	r2, [r3, #20]
    1bb6:	bd70      	pop	{r4, r5, r6, pc}
    1bb8:	00002ea4 	.word	0x00002ea4
    1bbc:	00001181 	.word	0x00001181

00001bc0 <_delay_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1bc0:	4b03      	ldr	r3, [pc, #12]	; (1bd0 <_delay_init+0x10>)
    1bc2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    1bc6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1bc8:	2205      	movs	r2, #5
    1bca:	601a      	str	r2, [r3, #0]
    1bcc:	4770      	bx	lr
    1bce:	bf00      	nop
    1bd0:	e000e010 	.word	0xe000e010

00001bd4 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    1bd4:	0e0b      	lsrs	r3, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    1bd6:	b303      	cbz	r3, 1c1a <_delay_cycles+0x46>
{
    1bd8:	b430      	push	{r4, r5}
    1bda:	1e5d      	subs	r5, r3, #1
    1bdc:	b2ed      	uxtb	r5, r5
	while (n--) {
    1bde:	4628      	mov	r0, r5
		SysTick->LOAD = 0xFFFFFF;
    1be0:	4a12      	ldr	r2, [pc, #72]	; (1c2c <_delay_cycles+0x58>)
    1be2:	f06f 447f 	mvn.w	r4, #4278190080	; 0xff000000
    1be6:	6054      	str	r4, [r2, #4]
		SysTick->VAL  = 0xFFFFFF;
    1be8:	6094      	str	r4, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1bea:	6813      	ldr	r3, [r2, #0]
    1bec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1bf0:	d0fb      	beq.n	1bea <_delay_cycles+0x16>
	while (n--) {
    1bf2:	3801      	subs	r0, #1
    1bf4:	b2c0      	uxtb	r0, r0
    1bf6:	28ff      	cmp	r0, #255	; 0xff
    1bf8:	d1f5      	bne.n	1be6 <_delay_cycles+0x12>
    1bfa:	eba5 6505 	sub.w	r5, r5, r5, lsl #24
    1bfe:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    1c02:	3101      	adds	r1, #1
    1c04:	4429      	add	r1, r5
			;
		buf -= 0xFFFFFF;
	}

	SysTick->LOAD = buf;
    1c06:	4b09      	ldr	r3, [pc, #36]	; (1c2c <_delay_cycles+0x58>)
    1c08:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1c0a:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1c0c:	461a      	mov	r2, r3
    1c0e:	6813      	ldr	r3, [r2, #0]
    1c10:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1c14:	d0fb      	beq.n	1c0e <_delay_cycles+0x3a>
		;
}
    1c16:	bc30      	pop	{r4, r5}
    1c18:	4770      	bx	lr
	SysTick->LOAD = buf;
    1c1a:	4b04      	ldr	r3, [pc, #16]	; (1c2c <_delay_cycles+0x58>)
    1c1c:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1c1e:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1c20:	461a      	mov	r2, r3
    1c22:	6813      	ldr	r3, [r2, #0]
    1c24:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1c28:	d0fb      	beq.n	1c22 <_delay_cycles+0x4e>
    1c2a:	4770      	bx	lr
    1c2c:	e000e010 	.word	0xe000e010

00001c30 <_get_irq_num>:
static uint8_t _get_irq_num(const void *const hw);
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _get_irq_num(const void *const hw)
{
    1c30:	b470      	push	{r4, r5, r6}
    1c32:	b087      	sub	sp, #28
    1c34:	4606      	mov	r6, r0
}

static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    1c36:	ac01      	add	r4, sp, #4
    1c38:	4d14      	ldr	r5, [pc, #80]	; (1c8c <_get_irq_num+0x5c>)
    1c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1c3e:	682b      	ldr	r3, [r5, #0]
    1c40:	6023      	str	r3, [r4, #0]

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    1c42:	42b0      	cmp	r0, r6
    1c44:	d017      	beq.n	1c76 <_get_irq_num+0x46>
    1c46:	4631      	mov	r1, r6
    1c48:	2301      	movs	r3, #1
    1c4a:	a801      	add	r0, sp, #4
    1c4c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    1c50:	428a      	cmp	r2, r1
    1c52:	d006      	beq.n	1c62 <_get_irq_num+0x32>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1c54:	3301      	adds	r3, #1
    1c56:	2b05      	cmp	r3, #5
    1c58:	d1f8      	bne.n	1c4c <_get_irq_num+0x1c>
		return TCC0_0_IRQn;
    1c5a:	2055      	movs	r0, #85	; 0x55
}
    1c5c:	b007      	add	sp, #28
    1c5e:	bc70      	pop	{r4, r5, r6}
    1c60:	4770      	bx	lr
	switch (_get_hardware_offset(hw)) {
    1c62:	b2db      	uxtb	r3, r3
    1c64:	2b04      	cmp	r3, #4
    1c66:	d80c      	bhi.n	1c82 <_get_irq_num+0x52>
    1c68:	e8df f003 	tbb	[pc, r3]
    1c6c:	070d0305 	.word	0x070d0305
    1c70:	09          	.byte	0x09
    1c71:	00          	.byte	0x00
		return TCC1_0_IRQn;
    1c72:	205c      	movs	r0, #92	; 0x5c
    1c74:	e7f2      	b.n	1c5c <_get_irq_num+0x2c>
		return TCC0_0_IRQn;
    1c76:	2055      	movs	r0, #85	; 0x55
    1c78:	e7f0      	b.n	1c5c <_get_irq_num+0x2c>
		return TCC3_0_IRQn;
    1c7a:	2065      	movs	r0, #101	; 0x65
    1c7c:	e7ee      	b.n	1c5c <_get_irq_num+0x2c>
		return TCC4_0_IRQn;
    1c7e:	2068      	movs	r0, #104	; 0x68
    1c80:	e7ec      	b.n	1c5c <_get_irq_num+0x2c>
		return PERIPH_COUNT_IRQn;
    1c82:	2089      	movs	r0, #137	; 0x89
    1c84:	e7ea      	b.n	1c5c <_get_irq_num+0x2c>
		return TCC2_0_IRQn;
    1c86:	2061      	movs	r0, #97	; 0x61
    1c88:	e7e8      	b.n	1c5c <_get_irq_num+0x2c>
    1c8a:	bf00      	nop
    1c8c:	00002ec0 	.word	0x00002ec0

00001c90 <_tcc_timer_deinit>:
{
    1c90:	b510      	push	{r4, lr}
	void *const hw = device->hw;
    1c92:	68c4      	ldr	r4, [r0, #12]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    1c94:	4620      	mov	r0, r4
    1c96:	4b10      	ldr	r3, [pc, #64]	; (1cd8 <_tcc_timer_deinit+0x48>)
    1c98:	4798      	blx	r3
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1c9a:	0943      	lsrs	r3, r0, #5
    1c9c:	f000 001f 	and.w	r0, r0, #31
    1ca0:	2201      	movs	r2, #1
    1ca2:	fa02 f000 	lsl.w	r0, r2, r0
    1ca6:	3320      	adds	r3, #32
    1ca8:	4a0c      	ldr	r2, [pc, #48]	; (1cdc <_tcc_timer_deinit+0x4c>)
    1caa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1cae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cb2:	f3bf 8f6f 	isb	sy
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1cb6:	68a3      	ldr	r3, [r4, #8]
    1cb8:	f013 0f03 	tst.w	r3, #3
    1cbc:	d1fb      	bne.n	1cb6 <_tcc_timer_deinit+0x26>

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TCC_CRITICAL_SECTION_ENTER();
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1cbe:	6823      	ldr	r3, [r4, #0]
    1cc0:	f023 0302 	bic.w	r3, r3, #2
    1cc4:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1cc6:	68a3      	ldr	r3, [r4, #8]
    1cc8:	f013 0f01 	tst.w	r3, #1
    1ccc:	d1fb      	bne.n	1cc6 <_tcc_timer_deinit+0x36>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    1cce:	6823      	ldr	r3, [r4, #0]
    1cd0:	f043 0301 	orr.w	r3, r3, #1
    1cd4:	6023      	str	r3, [r4, #0]
    1cd6:	bd10      	pop	{r4, pc}
    1cd8:	00001c31 	.word	0x00001c31
    1cdc:	e000e100 	.word	0xe000e100

00001ce0 <_tcc_timer_start>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    1ce0:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1ce2:	6893      	ldr	r3, [r2, #8]
    1ce4:	f013 0f03 	tst.w	r3, #3
    1ce8:	d1fb      	bne.n	1ce2 <_tcc_timer_start+0x2>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    1cea:	6813      	ldr	r3, [r2, #0]
    1cec:	f043 0302 	orr.w	r3, r3, #2
    1cf0:	6013      	str	r3, [r2, #0]
    1cf2:	4770      	bx	lr

00001cf4 <_tcc_timer_stop>:
	hri_tcc_clear_CTRLA_ENABLE_bit(device->hw);
    1cf4:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1cf6:	6893      	ldr	r3, [r2, #8]
    1cf8:	f013 0f03 	tst.w	r3, #3
    1cfc:	d1fb      	bne.n	1cf6 <_tcc_timer_stop+0x2>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    1cfe:	6813      	ldr	r3, [r2, #0]
    1d00:	f023 0302 	bic.w	r3, r3, #2
    1d04:	6013      	str	r3, [r2, #0]
    1d06:	4770      	bx	lr

00001d08 <_tcc_timer_set_period>:
	hri_tcc_write_PER_reg(device->hw, clock_cycles);
    1d08:	68c3      	ldr	r3, [r0, #12]
	((Tcc *)hw)->PER.reg = data;
    1d0a:	6419      	str	r1, [r3, #64]	; 0x40
    1d0c:	4770      	bx	lr

00001d0e <_tcc_timer_get_period>:
	return hri_tcc_read_PER_reg(device->hw);
    1d0e:	68c3      	ldr	r3, [r0, #12]
	return ((Tcc *)hw)->PER.reg;
    1d10:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    1d12:	4770      	bx	lr

00001d14 <_tcc_timer_is_started>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    1d14:	68c2      	ldr	r2, [r0, #12]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1d16:	6893      	ldr	r3, [r2, #8]
    1d18:	f013 0f03 	tst.w	r3, #3
    1d1c:	d1fb      	bne.n	1d16 <_tcc_timer_is_started+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1d1e:	6810      	ldr	r0, [r2, #0]
}
    1d20:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1d24:	4770      	bx	lr

00001d26 <tcc_interrupt_handler>:
{
    1d26:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1d28:	68c3      	ldr	r3, [r0, #12]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    1d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    1d2c:	f012 0f01 	tst.w	r2, #1
    1d30:	d100      	bne.n	1d34 <tcc_interrupt_handler+0xe>
    1d32:	bd08      	pop	{r3, pc}
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    1d34:	2201      	movs	r2, #1
    1d36:	62da      	str	r2, [r3, #44]	; 0x2c
		device->timer_cb.period_expired(device);
    1d38:	6803      	ldr	r3, [r0, #0]
    1d3a:	4798      	blx	r3
}
    1d3c:	e7f9      	b.n	1d32 <tcc_interrupt_handler+0xc>
	...

00001d40 <_tcc_timer_init>:
{
    1d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d42:	b087      	sub	sp, #28
    1d44:	4605      	mov	r5, r0
    1d46:	460c      	mov	r4, r1
	Tcc *const tcc_modules[TCC_INST_NUM] = TCC_INSTS;
    1d48:	ae01      	add	r6, sp, #4
    1d4a:	4f4e      	ldr	r7, [pc, #312]	; (1e84 <_tcc_timer_init+0x144>)
    1d4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    1d4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1d50:	683b      	ldr	r3, [r7, #0]
    1d52:	6033      	str	r3, [r6, #0]
		if ((uint32_t)hw == (uint32_t)tcc_modules[i]) {
    1d54:	42a0      	cmp	r0, r4
    1d56:	d00c      	beq.n	1d72 <_tcc_timer_init+0x32>
    1d58:	4621      	mov	r1, r4
    1d5a:	2301      	movs	r3, #1
    1d5c:	a801      	add	r0, sp, #4
    1d5e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    1d62:	428a      	cmp	r2, r1
    1d64:	d006      	beq.n	1d74 <_tcc_timer_init+0x34>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1d66:	3301      	adds	r3, #1
    1d68:	2b05      	cmp	r3, #5
    1d6a:	d1f8      	bne.n	1d5e <_tcc_timer_init+0x1e>
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    1d6c:	2600      	movs	r6, #0
			return i;
    1d6e:	b276      	sxtb	r6, r6
    1d70:	e015      	b.n	1d9e <_tcc_timer_init+0x5e>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1d72:	2300      	movs	r3, #0
		if (_tccs[i].number == tcc_offset) {
    1d74:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
    1d78:	d073      	beq.n	1e62 <_tcc_timer_init+0x122>
    1d7a:	2b01      	cmp	r3, #1
    1d7c:	d06b      	beq.n	1e56 <_tcc_timer_init+0x116>
    1d7e:	2b02      	cmp	r3, #2
    1d80:	d06b      	beq.n	1e5a <_tcc_timer_init+0x11a>
    1d82:	2b03      	cmp	r3, #3
    1d84:	d06b      	beq.n	1e5e <_tcc_timer_init+0x11e>
    1d86:	2b04      	cmp	r3, #4
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    1d88:	bf08      	it	eq
    1d8a:	2604      	moveq	r6, #4
		if (_tccs[i].number == tcc_offset) {
    1d8c:	d0ef      	beq.n	1d6e <_tcc_timer_init+0x2e>
	ASSERT(false);
    1d8e:	f240 128b 	movw	r2, #395	; 0x18b
    1d92:	493d      	ldr	r1, [pc, #244]	; (1e88 <_tcc_timer_init+0x148>)
    1d94:	2000      	movs	r0, #0
    1d96:	4b3d      	ldr	r3, [pc, #244]	; (1e8c <_tcc_timer_init+0x14c>)
    1d98:	4798      	blx	r3
	return -1;
    1d9a:	f04f 36ff 	mov.w	r6, #4294967295
	device->hw = hw;
    1d9e:	60ec      	str	r4, [r5, #12]
	ASSERT(ARRAY_SIZE(_tccs));
    1da0:	22e4      	movs	r2, #228	; 0xe4
    1da2:	4939      	ldr	r1, [pc, #228]	; (1e88 <_tcc_timer_init+0x148>)
    1da4:	2001      	movs	r0, #1
    1da6:	4b39      	ldr	r3, [pc, #228]	; (1e8c <_tcc_timer_init+0x14c>)
    1da8:	4798      	blx	r3
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1daa:	68a3      	ldr	r3, [r4, #8]
    1dac:	f013 0f01 	tst.w	r3, #1
    1db0:	d1fb      	bne.n	1daa <_tcc_timer_init+0x6a>
    1db2:	68a3      	ldr	r3, [r4, #8]
    1db4:	f013 0f03 	tst.w	r3, #3
    1db8:	d1fb      	bne.n	1db2 <_tcc_timer_init+0x72>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    1dba:	6823      	ldr	r3, [r4, #0]
	if (hri_tcc_get_CTRLA_ENABLE_bit(hw)) {
    1dbc:	f013 0f02 	tst.w	r3, #2
    1dc0:	d15d      	bne.n	1e7e <_tcc_timer_init+0x13e>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1dc2:	68a3      	ldr	r3, [r4, #8]
    1dc4:	f013 0f01 	tst.w	r3, #1
    1dc8:	d1fb      	bne.n	1dc2 <_tcc_timer_init+0x82>
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_SWRST;
    1dca:	6823      	ldr	r3, [r4, #0]
    1dcc:	f043 0301 	orr.w	r3, r3, #1
    1dd0:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    1dd2:	68a3      	ldr	r3, [r4, #8]
    1dd4:	f013 0f01 	tst.w	r3, #1
    1dd8:	d1fb      	bne.n	1dd2 <_tcc_timer_init+0x92>
	hri_tcc_write_CTRLA_reg(hw, _tccs[i].ctrl_a);
    1dda:	4a2a      	ldr	r2, [pc, #168]	; (1e84 <_tcc_timer_init+0x144>)
    1ddc:	00f1      	lsls	r1, r6, #3
    1dde:	198b      	adds	r3, r1, r6
    1de0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1de4:	6998      	ldr	r0, [r3, #24]
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    1de6:	6020      	str	r0, [r4, #0]
	hri_tcc_set_CTRLB_reg(hw, _tccs[i].ctrl_b);
    1de8:	7f18      	ldrb	r0, [r3, #28]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    1dea:	7160      	strb	r0, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, _tccs[i].dbg_ctrl);
    1dec:	7f58      	ldrb	r0, [r3, #29]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    1dee:	77a0      	strb	r0, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, _tccs[i].event_ctrl);
    1df0:	6a1b      	ldr	r3, [r3, #32]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    1df2:	6223      	str	r3, [r4, #32]
	hri_tcc_write_PER_reg(hw, _tccs[i].per);
    1df4:	440e      	add	r6, r1
    1df6:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    1dfa:	6a53      	ldr	r3, [r2, #36]	; 0x24
	((Tcc *)hw)->PER.reg = data;
    1dfc:	6423      	str	r3, [r4, #64]	; 0x40
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_OVF;
    1dfe:	2301      	movs	r3, #1
    1e00:	62a3      	str	r3, [r4, #40]	; 0x28
	if (hw == TCC0) {
    1e02:	4b23      	ldr	r3, [pc, #140]	; (1e90 <_tcc_timer_init+0x150>)
    1e04:	429c      	cmp	r4, r3
    1e06:	d02e      	beq.n	1e66 <_tcc_timer_init+0x126>
	if (hw == TCC1) {
    1e08:	4b22      	ldr	r3, [pc, #136]	; (1e94 <_tcc_timer_init+0x154>)
    1e0a:	429c      	cmp	r4, r3
    1e0c:	d02e      	beq.n	1e6c <_tcc_timer_init+0x12c>
	if (hw == TCC2) {
    1e0e:	4b22      	ldr	r3, [pc, #136]	; (1e98 <_tcc_timer_init+0x158>)
    1e10:	429c      	cmp	r4, r3
    1e12:	d02e      	beq.n	1e72 <_tcc_timer_init+0x132>
	if (hw == TCC3) {
    1e14:	4b21      	ldr	r3, [pc, #132]	; (1e9c <_tcc_timer_init+0x15c>)
    1e16:	429c      	cmp	r4, r3
    1e18:	d02e      	beq.n	1e78 <_tcc_timer_init+0x138>
	if (hw == TCC4) {
    1e1a:	4b21      	ldr	r3, [pc, #132]	; (1ea0 <_tcc_timer_init+0x160>)
    1e1c:	429c      	cmp	r4, r3
		_tcc4_dev = (struct _timer_device *)dev;
    1e1e:	bf04      	itt	eq
    1e20:	4b20      	ldreq	r3, [pc, #128]	; (1ea4 <_tcc_timer_init+0x164>)
    1e22:	611d      	streq	r5, [r3, #16]
	NVIC_DisableIRQ((IRQn_Type)_get_irq_num(hw));
    1e24:	4620      	mov	r0, r4
    1e26:	4b20      	ldr	r3, [pc, #128]	; (1ea8 <_tcc_timer_init+0x168>)
    1e28:	4798      	blx	r3
    1e2a:	f000 031f 	and.w	r3, r0, #31
    1e2e:	2201      	movs	r2, #1
    1e30:	409a      	lsls	r2, r3
    1e32:	0943      	lsrs	r3, r0, #5
    1e34:	009b      	lsls	r3, r3, #2
    1e36:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1e3a:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1e3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1e42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e46:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e4a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1e4e:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1e50:	2000      	movs	r0, #0
}
    1e52:	b007      	add	sp, #28
    1e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < ARRAY_SIZE(_tccs); i++) {
    1e56:	2601      	movs	r6, #1
    1e58:	e789      	b.n	1d6e <_tcc_timer_init+0x2e>
    1e5a:	2602      	movs	r6, #2
    1e5c:	e787      	b.n	1d6e <_tcc_timer_init+0x2e>
    1e5e:	2603      	movs	r6, #3
    1e60:	e785      	b.n	1d6e <_tcc_timer_init+0x2e>
    1e62:	2600      	movs	r6, #0
    1e64:	e783      	b.n	1d6e <_tcc_timer_init+0x2e>
		_tcc0_dev = (struct _timer_device *)dev;
    1e66:	4b0f      	ldr	r3, [pc, #60]	; (1ea4 <_tcc_timer_init+0x164>)
    1e68:	601d      	str	r5, [r3, #0]
    1e6a:	e7d3      	b.n	1e14 <_tcc_timer_init+0xd4>
		_tcc1_dev = (struct _timer_device *)dev;
    1e6c:	4b0d      	ldr	r3, [pc, #52]	; (1ea4 <_tcc_timer_init+0x164>)
    1e6e:	605d      	str	r5, [r3, #4]
    1e70:	e7d3      	b.n	1e1a <_tcc_timer_init+0xda>
		_tcc2_dev = (struct _timer_device *)dev;
    1e72:	4b0c      	ldr	r3, [pc, #48]	; (1ea4 <_tcc_timer_init+0x164>)
    1e74:	609d      	str	r5, [r3, #8]
    1e76:	e7d5      	b.n	1e24 <_tcc_timer_init+0xe4>
		_tcc3_dev = (struct _timer_device *)dev;
    1e78:	4b0a      	ldr	r3, [pc, #40]	; (1ea4 <_tcc_timer_init+0x164>)
    1e7a:	60dd      	str	r5, [r3, #12]
    1e7c:	e7d2      	b.n	1e24 <_tcc_timer_init+0xe4>
		return ERR_DENIED;
    1e7e:	f06f 0010 	mvn.w	r0, #16
    1e82:	e7e6      	b.n	1e52 <_tcc_timer_init+0x112>
    1e84:	00002ec0 	.word	0x00002ec0
    1e88:	00002f88 	.word	0x00002f88
    1e8c:	00001181 	.word	0x00001181
    1e90:	41016000 	.word	0x41016000
    1e94:	41018000 	.word	0x41018000
    1e98:	42000c00 	.word	0x42000c00
    1e9c:	42001000 	.word	0x42001000
    1ea0:	43001000 	.word	0x43001000
    1ea4:	200006b4 	.word	0x200006b4
    1ea8:	00001c31 	.word	0x00001c31

00001eac <_tcc_timer_set_irq>:
{
    1eac:	b508      	push	{r3, lr}
	_irq_set((IRQn_Type)_get_irq_num(device->hw));
    1eae:	68c0      	ldr	r0, [r0, #12]
    1eb0:	4b02      	ldr	r3, [pc, #8]	; (1ebc <_tcc_timer_set_irq+0x10>)
    1eb2:	4798      	blx	r3
    1eb4:	4b02      	ldr	r3, [pc, #8]	; (1ec0 <_tcc_timer_set_irq+0x14>)
    1eb6:	4798      	blx	r3
    1eb8:	bd08      	pop	{r3, pc}
    1eba:	bf00      	nop
    1ebc:	00001c31 	.word	0x00001c31
    1ec0:	00001365 	.word	0x00001365

00001ec4 <_tcc_get_timer>:
}
    1ec4:	4800      	ldr	r0, [pc, #0]	; (1ec8 <_tcc_get_timer+0x4>)
    1ec6:	4770      	bx	lr
    1ec8:	20000038 	.word	0x20000038

00001ecc <TCC0_0_Handler>:
{
    1ecc:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc0_dev);
    1ece:	4b02      	ldr	r3, [pc, #8]	; (1ed8 <TCC0_0_Handler+0xc>)
    1ed0:	6818      	ldr	r0, [r3, #0]
    1ed2:	4b02      	ldr	r3, [pc, #8]	; (1edc <TCC0_0_Handler+0x10>)
    1ed4:	4798      	blx	r3
    1ed6:	bd08      	pop	{r3, pc}
    1ed8:	200006b4 	.word	0x200006b4
    1edc:	00001d27 	.word	0x00001d27

00001ee0 <TCC1_0_Handler>:
{
    1ee0:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc1_dev);
    1ee2:	4b02      	ldr	r3, [pc, #8]	; (1eec <TCC1_0_Handler+0xc>)
    1ee4:	6858      	ldr	r0, [r3, #4]
    1ee6:	4b02      	ldr	r3, [pc, #8]	; (1ef0 <TCC1_0_Handler+0x10>)
    1ee8:	4798      	blx	r3
    1eea:	bd08      	pop	{r3, pc}
    1eec:	200006b4 	.word	0x200006b4
    1ef0:	00001d27 	.word	0x00001d27

00001ef4 <TCC2_0_Handler>:
{
    1ef4:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc2_dev);
    1ef6:	4b02      	ldr	r3, [pc, #8]	; (1f00 <TCC2_0_Handler+0xc>)
    1ef8:	6898      	ldr	r0, [r3, #8]
    1efa:	4b02      	ldr	r3, [pc, #8]	; (1f04 <TCC2_0_Handler+0x10>)
    1efc:	4798      	blx	r3
    1efe:	bd08      	pop	{r3, pc}
    1f00:	200006b4 	.word	0x200006b4
    1f04:	00001d27 	.word	0x00001d27

00001f08 <TCC3_0_Handler>:
{
    1f08:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc3_dev);
    1f0a:	4b02      	ldr	r3, [pc, #8]	; (1f14 <TCC3_0_Handler+0xc>)
    1f0c:	68d8      	ldr	r0, [r3, #12]
    1f0e:	4b02      	ldr	r3, [pc, #8]	; (1f18 <TCC3_0_Handler+0x10>)
    1f10:	4798      	blx	r3
    1f12:	bd08      	pop	{r3, pc}
    1f14:	200006b4 	.word	0x200006b4
    1f18:	00001d27 	.word	0x00001d27

00001f1c <TCC4_0_Handler>:
{
    1f1c:	b508      	push	{r3, lr}
	tcc_interrupt_handler(_tcc4_dev);
    1f1e:	4b02      	ldr	r3, [pc, #8]	; (1f28 <TCC4_0_Handler+0xc>)
    1f20:	6918      	ldr	r0, [r3, #16]
    1f22:	4b02      	ldr	r3, [pc, #8]	; (1f2c <TCC4_0_Handler+0x10>)
    1f24:	4798      	blx	r3
    1f26:	bd08      	pop	{r3, pc}
    1f28:	200006b4 	.word	0x200006b4
    1f2c:	00001d27 	.word	0x00001d27

00001f30 <_tc_timer_start>:
/**
 * \brief Start hardware timer
 */
void _tc_timer_start(struct _timer_device *const device)
{
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    1f30:	68c2      	ldr	r2, [r0, #12]
typedef uint8_t  hri_tc_status_reg_t;
typedef uint8_t  hri_tc_wave_reg_t;

static inline void hri_tc_wait_for_sync(const void *const hw, hri_tc_syncbusy_reg_t reg)
{
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f32:	6913      	ldr	r3, [r2, #16]
    1f34:	f013 0f03 	tst.w	r3, #3
    1f38:	d1fb      	bne.n	1f32 <_tc_timer_start+0x2>

static inline void hri_tc_set_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1f3a:	6813      	ldr	r3, [r2, #0]
    1f3c:	f043 0302 	orr.w	r3, r3, #2
    1f40:	6013      	str	r3, [r2, #0]
    1f42:	4770      	bx	lr

00001f44 <_tc_timer_stop>:
/**
 * \brief Stop hardware timer
 */
void _tc_timer_stop(struct _timer_device *const device)
{
	hri_tc_clear_CTRLA_ENABLE_bit(device->hw);
    1f44:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1f46:	6913      	ldr	r3, [r2, #16]
    1f48:	f013 0f03 	tst.w	r3, #3
    1f4c:	d1fb      	bne.n	1f46 <_tc_timer_stop+0x2>

static inline void hri_tc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	TC_CRITICAL_SECTION_ENTER();
	hri_tc_wait_for_sync(hw, TC_SYNCBUSY_SWRST | TC_SYNCBUSY_ENABLE);
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    1f4e:	6813      	ldr	r3, [r2, #0]
    1f50:	f023 0302 	bic.w	r3, r3, #2
    1f54:	6013      	str	r3, [r2, #0]
    1f56:	4770      	bx	lr

00001f58 <_tc_timer_set_period>:
/**
 * \brief Set timer period
 */
void _tc_timer_set_period(struct _timer_device *const device, const uint32_t clock_cycles)
{
	void *const hw = device->hw;
    1f58:	68c2      	ldr	r2, [r0, #12]
}

static inline hri_tc_ctrla_reg_t hri_tc_read_CTRLA_MODE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1f5a:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1f5c:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1f60:	2b02      	cmp	r3, #2
    1f62:	d00b      	beq.n	1f7c <_tc_timer_set_period+0x24>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1f64:	6813      	ldr	r3, [r2, #0]
		hri_tccount32_write_CC_reg(hw, 0, clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1f66:	f013 0f0c 	tst.w	r3, #12
    1f6a:	d009      	beq.n	1f80 <_tc_timer_set_period+0x28>
    1f6c:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1f6e:	f3c3 0381 	ubfx	r3, r3, #2, #2
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1f72:	2b01      	cmp	r3, #1

		hri_tc_write_PER_reg(hw, (hri_tc_per_reg_t)clock_cycles);
    1f74:	bf04      	itt	eq
    1f76:	b2c9      	uxtbeq	r1, r1
}

static inline void hri_tc_write_PER_reg(const void *const hw, hri_tc_per_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.PER.reg = data;
    1f78:	76d1      	strbeq	r1, [r2, #27]
    1f7a:	4770      	bx	lr
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1f7c:	61d1      	str	r1, [r2, #28]
    1f7e:	4770      	bx	lr
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)clock_cycles);
    1f80:	b289      	uxth	r1, r1
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1f82:	8391      	strh	r1, [r2, #28]
    1f84:	4770      	bx	lr

00001f86 <_tc_timer_get_period>:
/**
 * \brief Retrieve timer period
 */
uint32_t _tc_timer_get_period(const struct _timer_device *const device)
{
	void *const hw = device->hw;
    1f86:	68c2      	ldr	r2, [r0, #12]
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1f88:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1f8a:	f3c3 0381 	ubfx	r3, r3, #2, #2

	if (TC_CTRLA_MODE_COUNT32_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1f8e:	2b02      	cmp	r3, #2
    1f90:	d00c      	beq.n	1fac <_tc_timer_get_period+0x26>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1f92:	6813      	ldr	r3, [r2, #0]
		return hri_tccount32_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT16_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1f94:	f013 0f0c 	tst.w	r3, #12
    1f98:	d00a      	beq.n	1fb0 <_tc_timer_get_period+0x2a>
    1f9a:	6813      	ldr	r3, [r2, #0]
	tmp = (tmp & TC_CTRLA_MODE_Msk) >> TC_CTRLA_MODE_Pos;
    1f9c:	f3c3 0381 	ubfx	r3, r3, #2, #2
		return hri_tccount16_read_CC_reg(hw, 0);
	} else if (TC_CTRLA_MODE_COUNT8_Val == hri_tc_read_CTRLA_MODE_bf(hw)) {
    1fa0:	2b01      	cmp	r3, #1
	TC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tc_per_reg_t hri_tc_read_PER_reg(const void *const hw)
{
	return ((Tc *)hw)->COUNT8.PER.reg;
    1fa2:	bf06      	itte	eq
    1fa4:	7ed0      	ldrbeq	r0, [r2, #27]
    1fa6:	b2c0      	uxtbeq	r0, r0

		return hri_tc_read_PER_reg(hw);
	}

	return 0;
    1fa8:	2000      	movne	r0, #0
}
    1faa:	4770      	bx	lr
	return ((Tc *)hw)->COUNT32.CC[index].reg;
    1fac:	69d0      	ldr	r0, [r2, #28]
		return hri_tccount32_read_CC_reg(hw, 0);
    1fae:	4770      	bx	lr
	return ((Tc *)hw)->COUNT16.CC[index].reg;
    1fb0:	8b90      	ldrh	r0, [r2, #28]
    1fb2:	b280      	uxth	r0, r0
		return hri_tccount16_read_CC_reg(hw, 0);
    1fb4:	4770      	bx	lr

00001fb6 <_tc_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _tc_timer_is_started(const struct _timer_device *const device)
{
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1fb6:	68c2      	ldr	r2, [r0, #12]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    1fb8:	6913      	ldr	r3, [r2, #16]
    1fba:	f013 0f03 	tst.w	r3, #3
    1fbe:	d1fb      	bne.n	1fb8 <_tc_timer_is_started+0x2>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    1fc0:	6810      	ldr	r0, [r2, #0]
}
    1fc2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1fc6:	4770      	bx	lr

00001fc8 <tc_interrupt_handler>:
 * \internal TC interrupt handler for Timer
 *
 * \param[in] instance TC instance number
 */
static void tc_interrupt_handler(struct _timer_device *device)
{
    1fc8:	b508      	push	{r3, lr}
	void *const hw = device->hw;
    1fca:	68c3      	ldr	r3, [r0, #12]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1fcc:	7a9a      	ldrb	r2, [r3, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1fce:	f012 0f01 	tst.w	r2, #1
    1fd2:	d100      	bne.n	1fd6 <tc_interrupt_handler+0xe>
    1fd4:	bd08      	pop	{r3, pc}
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1fd6:	2201      	movs	r2, #1
    1fd8:	729a      	strb	r2, [r3, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		device->timer_cb.period_expired(device);
    1fda:	6803      	ldr	r3, [r0, #0]
    1fdc:	4798      	blx	r3
	}
}
    1fde:	e7f9      	b.n	1fd4 <tc_interrupt_handler+0xc>

00001fe0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1fe0:	b538      	push	{r3, r4, r5, lr}
    1fe2:	4605      	mov	r5, r0
	void *const hw = device->hw;
    1fe4:	6904      	ldr	r4, [r0, #16]
	return (((Tc *)hw)->COUNT8.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1fe6:	7aa3      	ldrb	r3, [r4, #10]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1fe8:	f013 0f01 	tst.w	r3, #1
    1fec:	d004      	beq.n	1ff8 <tc_pwm_interrupt_handler+0x18>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1fee:	2301      	movs	r3, #1
    1ff0:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1ff2:	6803      	ldr	r3, [r0, #0]
    1ff4:	b103      	cbz	r3, 1ff8 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1ff6:	4798      	blx	r3
	return (((Tc *)hw)->COUNT8.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1ff8:	7a63      	ldrb	r3, [r4, #9]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1ffa:	f013 0f02 	tst.w	r3, #2
    1ffe:	d005      	beq.n	200c <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2000:	2302      	movs	r3, #2
    2002:	72a3      	strb	r3, [r4, #10]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    2004:	686b      	ldr	r3, [r5, #4]
    2006:	b10b      	cbz	r3, 200c <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2008:	4628      	mov	r0, r5
    200a:	4798      	blx	r3
    200c:	bd38      	pop	{r3, r4, r5, pc}
	...

00002010 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC0) {
    2010:	4b11      	ldr	r3, [pc, #68]	; (2058 <_tc_init_irq_param+0x48>)
    2012:	4298      	cmp	r0, r3
    2014:	d011      	beq.n	203a <_tc_init_irq_param+0x2a>
		_tc0_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC1) {
    2016:	4b11      	ldr	r3, [pc, #68]	; (205c <_tc_init_irq_param+0x4c>)
    2018:	4298      	cmp	r0, r3
    201a:	d011      	beq.n	2040 <_tc_init_irq_param+0x30>
		_tc1_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC2) {
    201c:	4b10      	ldr	r3, [pc, #64]	; (2060 <_tc_init_irq_param+0x50>)
    201e:	4298      	cmp	r0, r3
    2020:	d011      	beq.n	2046 <_tc_init_irq_param+0x36>
		_tc2_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC3) {
    2022:	4b10      	ldr	r3, [pc, #64]	; (2064 <_tc_init_irq_param+0x54>)
    2024:	4298      	cmp	r0, r3
    2026:	d011      	beq.n	204c <_tc_init_irq_param+0x3c>
		_tc3_dev = (struct _timer_device *)dev;
	}
	if (hw == TC4) {
    2028:	4b0f      	ldr	r3, [pc, #60]	; (2068 <_tc_init_irq_param+0x58>)
    202a:	4298      	cmp	r0, r3
    202c:	d011      	beq.n	2052 <_tc_init_irq_param+0x42>
		_tc4_dev = (struct _timer_device *)dev;
	}
	if (hw == TC5) {
    202e:	4b0f      	ldr	r3, [pc, #60]	; (206c <_tc_init_irq_param+0x5c>)
    2030:	4298      	cmp	r0, r3
		_tc5_dev = (struct _timer_device *)dev;
    2032:	bf04      	itt	eq
    2034:	4b0e      	ldreq	r3, [pc, #56]	; (2070 <_tc_init_irq_param+0x60>)
    2036:	6159      	streq	r1, [r3, #20]
    2038:	4770      	bx	lr
		_tc0_dev = (struct _pwm_device *)dev;
    203a:	4b0d      	ldr	r3, [pc, #52]	; (2070 <_tc_init_irq_param+0x60>)
    203c:	6019      	str	r1, [r3, #0]
    203e:	e7f0      	b.n	2022 <_tc_init_irq_param+0x12>
		_tc1_dev = (struct _pwm_device *)dev;
    2040:	4b0b      	ldr	r3, [pc, #44]	; (2070 <_tc_init_irq_param+0x60>)
    2042:	6059      	str	r1, [r3, #4]
    2044:	e7f0      	b.n	2028 <_tc_init_irq_param+0x18>
		_tc2_dev = (struct _pwm_device *)dev;
    2046:	4b0a      	ldr	r3, [pc, #40]	; (2070 <_tc_init_irq_param+0x60>)
    2048:	6099      	str	r1, [r3, #8]
    204a:	e7f0      	b.n	202e <_tc_init_irq_param+0x1e>
		_tc3_dev = (struct _timer_device *)dev;
    204c:	4b08      	ldr	r3, [pc, #32]	; (2070 <_tc_init_irq_param+0x60>)
    204e:	60d9      	str	r1, [r3, #12]
    2050:	4770      	bx	lr
		_tc4_dev = (struct _timer_device *)dev;
    2052:	4b07      	ldr	r3, [pc, #28]	; (2070 <_tc_init_irq_param+0x60>)
    2054:	6119      	str	r1, [r3, #16]
    2056:	4770      	bx	lr
    2058:	40003800 	.word	0x40003800
    205c:	40003c00 	.word	0x40003c00
    2060:	4101a000 	.word	0x4101a000
    2064:	4101c000 	.word	0x4101c000
    2068:	42001400 	.word	0x42001400
    206c:	42001800 	.word	0x42001800
    2070:	200006c8 	.word	0x200006c8

00002074 <get_tc_index>:
{
    2074:	b570      	push	{r4, r5, r6, lr}
    2076:	b086      	sub	sp, #24
    2078:	4606      	mov	r6, r0
 * \param[in] hw The pointer to hardware instance
 */
static inline uint8_t _get_hardware_offset(const void *const hw)
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    207a:	466c      	mov	r4, sp
    207c:	4d18      	ldr	r5, [pc, #96]	; (20e0 <get_tc_index+0x6c>)
    207e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2082:	e895 0003 	ldmia.w	r5, {r0, r1}
    2086:	e884 0003 	stmia.w	r4, {r0, r1}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)tc_modules[i]) {
    208a:	9b00      	ldr	r3, [sp, #0]
    208c:	42b3      	cmp	r3, r6
    208e:	d021      	beq.n	20d4 <get_tc_index+0x60>
    2090:	4631      	mov	r1, r6
    2092:	2301      	movs	r3, #1
    2094:	f85d 2023 	ldr.w	r2, [sp, r3, lsl #2]
    2098:	428a      	cmp	r2, r1
    209a:	d01c      	beq.n	20d6 <get_tc_index+0x62>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    209c:	3301      	adds	r3, #1
    209e:	2b06      	cmp	r3, #6
    20a0:	d1f8      	bne.n	2094 <get_tc_index+0x20>
			return i;
		}
	}
	return 0;
    20a2:	2300      	movs	r3, #0
		if (_tcs[i].number == index) {
    20a4:	4a0f      	ldr	r2, [pc, #60]	; (20e4 <get_tc_index+0x70>)
    20a6:	7812      	ldrb	r2, [r2, #0]
    20a8:	429a      	cmp	r2, r3
    20aa:	d016      	beq.n	20da <get_tc_index+0x66>
    20ac:	4a0d      	ldr	r2, [pc, #52]	; (20e4 <get_tc_index+0x70>)
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    20ae:	2001      	movs	r0, #1
		if (_tcs[i].number == index) {
    20b0:	7d11      	ldrb	r1, [r2, #20]
    20b2:	4299      	cmp	r1, r3
    20b4:	d012      	beq.n	20dc <get_tc_index+0x68>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    20b6:	3001      	adds	r0, #1
    20b8:	b2c0      	uxtb	r0, r0
    20ba:	3214      	adds	r2, #20
    20bc:	2806      	cmp	r0, #6
    20be:	d1f7      	bne.n	20b0 <get_tc_index+0x3c>
	ASSERT(false);
    20c0:	f240 2227 	movw	r2, #551	; 0x227
    20c4:	4908      	ldr	r1, [pc, #32]	; (20e8 <get_tc_index+0x74>)
    20c6:	2000      	movs	r0, #0
    20c8:	4b08      	ldr	r3, [pc, #32]	; (20ec <get_tc_index+0x78>)
    20ca:	4798      	blx	r3
	return -1;
    20cc:	f04f 30ff 	mov.w	r0, #4294967295
}
    20d0:	b006      	add	sp, #24
    20d2:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    20d4:	2300      	movs	r3, #0
			return i;
    20d6:	b2db      	uxtb	r3, r3
    20d8:	e7e4      	b.n	20a4 <get_tc_index+0x30>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    20da:	2000      	movs	r0, #0
			return i;
    20dc:	b240      	sxtb	r0, r0
    20de:	e7f7      	b.n	20d0 <get_tc_index+0x5c>
    20e0:	00002fa0 	.word	0x00002fa0
    20e4:	20000058 	.word	0x20000058
    20e8:	00002fb8 	.word	0x00002fb8
    20ec:	00001181 	.word	0x00001181

000020f0 <_tc_timer_init>:
{
    20f0:	b570      	push	{r4, r5, r6, lr}
    20f2:	4606      	mov	r6, r0
    20f4:	460c      	mov	r4, r1
	int8_t i = get_tc_index(hw);
    20f6:	4608      	mov	r0, r1
    20f8:	4b48      	ldr	r3, [pc, #288]	; (221c <_tc_timer_init+0x12c>)
    20fa:	4798      	blx	r3
    20fc:	4605      	mov	r5, r0
	device->hw = hw;
    20fe:	60f4      	str	r4, [r6, #12]
	ASSERT(ARRAY_SIZE(_tcs));
    2100:	22af      	movs	r2, #175	; 0xaf
    2102:	4947      	ldr	r1, [pc, #284]	; (2220 <_tc_timer_init+0x130>)
    2104:	2001      	movs	r0, #1
    2106:	4b47      	ldr	r3, [pc, #284]	; (2224 <_tc_timer_init+0x134>)
    2108:	4798      	blx	r3
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    210a:	6923      	ldr	r3, [r4, #16]
    210c:	f013 0f01 	tst.w	r3, #1
    2110:	d1fb      	bne.n	210a <_tc_timer_init+0x1a>
    2112:	6923      	ldr	r3, [r4, #16]
    2114:	f013 0f03 	tst.w	r3, #3
    2118:	d1fb      	bne.n	2112 <_tc_timer_init+0x22>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    211a:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    211c:	f013 0f02 	tst.w	r3, #2
    2120:	d175      	bne.n	220e <_tc_timer_init+0x11e>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2122:	6923      	ldr	r3, [r4, #16]
    2124:	f013 0f01 	tst.w	r3, #1
    2128:	d1fb      	bne.n	2122 <_tc_timer_init+0x32>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    212a:	6823      	ldr	r3, [r4, #0]
    212c:	f043 0301 	orr.w	r3, r3, #1
    2130:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2132:	6923      	ldr	r3, [r4, #16]
    2134:	f013 0f01 	tst.w	r3, #1
    2138:	d1fb      	bne.n	2132 <_tc_timer_init+0x42>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    213a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    213e:	4a3a      	ldr	r2, [pc, #232]	; (2228 <_tc_timer_init+0x138>)
    2140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2144:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2146:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    2148:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    214a:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    214c:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    214e:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2150:	2201      	movs	r2, #1
    2152:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2154:	685b      	ldr	r3, [r3, #4]
    2156:	f003 030c 	and.w	r3, r3, #12
    215a:	2b08      	cmp	r3, #8
    215c:	d03f      	beq.n	21de <_tc_timer_init+0xee>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    215e:	2b00      	cmp	r3, #0
    2160:	d147      	bne.n	21f2 <_tc_timer_init+0x102>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2162:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2166:	4a30      	ldr	r2, [pc, #192]	; (2228 <_tc_timer_init+0x138>)
    2168:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    216c:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    216e:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2170:	8a1b      	ldrh	r3, [r3, #16]
    2172:	83e3      	strh	r3, [r4, #30]
	((Tc *)hw)->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    2174:	2301      	movs	r3, #1
    2176:	7263      	strb	r3, [r4, #9]
	_tc_init_irq_param(hw, (void *)device);
    2178:	4631      	mov	r1, r6
    217a:	4620      	mov	r0, r4
    217c:	4b2b      	ldr	r3, [pc, #172]	; (222c <_tc_timer_init+0x13c>)
    217e:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    2180:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2184:	4a28      	ldr	r2, [pc, #160]	; (2228 <_tc_timer_init+0x138>)
    2186:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    218a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    218e:	2b00      	cmp	r3, #0
    2190:	db40      	blt.n	2214 <_tc_timer_init+0x124>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2192:	095a      	lsrs	r2, r3, #5
    2194:	f003 031f 	and.w	r3, r3, #31
    2198:	2101      	movs	r1, #1
    219a:	fa01 f303 	lsl.w	r3, r1, r3
    219e:	3220      	adds	r2, #32
    21a0:	4923      	ldr	r1, [pc, #140]	; (2230 <_tc_timer_init+0x140>)
    21a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    21a6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21aa:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    21ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    21b2:	4b1d      	ldr	r3, [pc, #116]	; (2228 <_tc_timer_init+0x138>)
    21b4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    21b8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    21bc:	2b00      	cmp	r3, #0
    21be:	db2b      	blt.n	2218 <_tc_timer_init+0x128>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    21c0:	0959      	lsrs	r1, r3, #5
    21c2:	f003 031f 	and.w	r3, r3, #31
    21c6:	2201      	movs	r2, #1
    21c8:	fa02 f303 	lsl.w	r3, r2, r3
    21cc:	4a18      	ldr	r2, [pc, #96]	; (2230 <_tc_timer_init+0x140>)
    21ce:	f101 0060 	add.w	r0, r1, #96	; 0x60
    21d2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    21d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    21da:	2000      	movs	r0, #0
    21dc:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    21de:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    21e2:	4a11      	ldr	r2, [pc, #68]	; (2228 <_tc_timer_init+0x138>)
    21e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    21e8:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    21ea:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    21ec:	691b      	ldr	r3, [r3, #16]
    21ee:	6223      	str	r3, [r4, #32]
    21f0:	e7c0      	b.n	2174 <_tc_timer_init+0x84>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT8) {
    21f2:	2b04      	cmp	r3, #4
    21f4:	d1be      	bne.n	2174 <_tc_timer_init+0x84>
		hri_tccount8_write_CC_reg(hw, 0, (uint8_t)_tcs[i].cc0);
    21f6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    21fa:	4a0b      	ldr	r2, [pc, #44]	; (2228 <_tc_timer_init+0x138>)
    21fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2200:	7b1a      	ldrb	r2, [r3, #12]
}

static inline void hri_tccount8_write_CC_reg(const void *const hw, uint8_t index, hri_tc_cc8_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT8.CC[index].reg = data;
    2202:	7722      	strb	r2, [r4, #28]
		hri_tccount8_write_CC_reg(hw, 1, (uint8_t)_tcs[i].cc1);
    2204:	7c1a      	ldrb	r2, [r3, #16]
    2206:	7762      	strb	r2, [r4, #29]
		hri_tc_write_PER_reg(hw, _tcs[i].per);
    2208:	7adb      	ldrb	r3, [r3, #11]
	((Tc *)hw)->COUNT8.PER.reg = data;
    220a:	76e3      	strb	r3, [r4, #27]
    220c:	e7b2      	b.n	2174 <_tc_timer_init+0x84>
		return ERR_DENIED;
    220e:	f06f 0010 	mvn.w	r0, #16
    2212:	bd70      	pop	{r4, r5, r6, pc}
	return ERR_NONE;
    2214:	2000      	movs	r0, #0
    2216:	bd70      	pop	{r4, r5, r6, pc}
    2218:	2000      	movs	r0, #0
}
    221a:	bd70      	pop	{r4, r5, r6, pc}
    221c:	00002075 	.word	0x00002075
    2220:	00002fb8 	.word	0x00002fb8
    2224:	00001181 	.word	0x00001181
    2228:	20000058 	.word	0x20000058
    222c:	00002011 	.word	0x00002011
    2230:	e000e100 	.word	0xe000e100

00002234 <_tc_timer_deinit>:
{
    2234:	b538      	push	{r3, r4, r5, lr}
	void *const hw = device->hw;
    2236:	68c4      	ldr	r4, [r0, #12]
	int8_t      i  = get_tc_index(hw);
    2238:	4620      	mov	r0, r4
    223a:	4b18      	ldr	r3, [pc, #96]	; (229c <_tc_timer_deinit+0x68>)
    223c:	4798      	blx	r3
    223e:	4605      	mov	r5, r0
	ASSERT(ARRAY_SIZE(_tcs));
    2240:	f240 1201 	movw	r2, #257	; 0x101
    2244:	4916      	ldr	r1, [pc, #88]	; (22a0 <_tc_timer_deinit+0x6c>)
    2246:	2001      	movs	r0, #1
    2248:	4b16      	ldr	r3, [pc, #88]	; (22a4 <_tc_timer_deinit+0x70>)
    224a:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    224c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    2250:	4b15      	ldr	r3, [pc, #84]	; (22a8 <_tc_timer_deinit+0x74>)
    2252:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    2256:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    225a:	2b00      	cmp	r3, #0
    225c:	db0d      	blt.n	227a <_tc_timer_deinit+0x46>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    225e:	095a      	lsrs	r2, r3, #5
    2260:	f003 031f 	and.w	r3, r3, #31
    2264:	2101      	movs	r1, #1
    2266:	fa01 f303 	lsl.w	r3, r1, r3
    226a:	3220      	adds	r2, #32
    226c:	490f      	ldr	r1, [pc, #60]	; (22ac <_tc_timer_deinit+0x78>)
    226e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2272:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2276:	f3bf 8f6f 	isb	sy
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    227a:	6923      	ldr	r3, [r4, #16]
    227c:	f013 0f03 	tst.w	r3, #3
    2280:	d1fb      	bne.n	227a <_tc_timer_deinit+0x46>
	((Tc *)hw)->COUNT8.CTRLA.reg &= ~TC_CTRLA_ENABLE;
    2282:	6823      	ldr	r3, [r4, #0]
    2284:	f023 0302 	bic.w	r3, r3, #2
    2288:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    228a:	6923      	ldr	r3, [r4, #16]
    228c:	f013 0f01 	tst.w	r3, #1
    2290:	d1fb      	bne.n	228a <_tc_timer_deinit+0x56>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    2292:	6823      	ldr	r3, [r4, #0]
    2294:	f043 0301 	orr.w	r3, r3, #1
    2298:	6023      	str	r3, [r4, #0]
    229a:	bd38      	pop	{r3, r4, r5, pc}
    229c:	00002075 	.word	0x00002075
    22a0:	00002fb8 	.word	0x00002fb8
    22a4:	00001181 	.word	0x00001181
    22a8:	20000058 	.word	0x20000058
    22ac:	e000e100 	.word	0xe000e100

000022b0 <_tc_timer_set_irq>:
{
    22b0:	b510      	push	{r4, lr}
	int8_t      i  = get_tc_index(hw);
    22b2:	68c0      	ldr	r0, [r0, #12]
    22b4:	4b08      	ldr	r3, [pc, #32]	; (22d8 <_tc_timer_set_irq+0x28>)
    22b6:	4798      	blx	r3
    22b8:	4604      	mov	r4, r0
	ASSERT(ARRAY_SIZE(_tcs));
    22ba:	f44f 72de 	mov.w	r2, #444	; 0x1bc
    22be:	4907      	ldr	r1, [pc, #28]	; (22dc <_tc_timer_set_irq+0x2c>)
    22c0:	2001      	movs	r0, #1
    22c2:	4b07      	ldr	r3, [pc, #28]	; (22e0 <_tc_timer_set_irq+0x30>)
    22c4:	4798      	blx	r3
	_irq_set(_tcs[i].irq);
    22c6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    22ca:	4b06      	ldr	r3, [pc, #24]	; (22e4 <_tc_timer_set_irq+0x34>)
    22cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    22d0:	78a0      	ldrb	r0, [r4, #2]
    22d2:	4b05      	ldr	r3, [pc, #20]	; (22e8 <_tc_timer_set_irq+0x38>)
    22d4:	4798      	blx	r3
    22d6:	bd10      	pop	{r4, pc}
    22d8:	00002075 	.word	0x00002075
    22dc:	00002fb8 	.word	0x00002fb8
    22e0:	00001181 	.word	0x00001181
    22e4:	20000058 	.word	0x20000058
    22e8:	00001365 	.word	0x00001365

000022ec <_pwm_init>:
{
    22ec:	b570      	push	{r4, r5, r6, lr}
    22ee:	4606      	mov	r6, r0
    22f0:	460c      	mov	r4, r1
	int8_t i   = get_tc_index(hw);
    22f2:	4608      	mov	r0, r1
    22f4:	4b3f      	ldr	r3, [pc, #252]	; (23f4 <_pwm_init+0x108>)
    22f6:	4798      	blx	r3
    22f8:	4605      	mov	r5, r0
	device->hw = hw;
    22fa:	6134      	str	r4, [r6, #16]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    22fc:	6923      	ldr	r3, [r4, #16]
    22fe:	f013 0f01 	tst.w	r3, #1
    2302:	d1fb      	bne.n	22fc <_pwm_init+0x10>
    2304:	6923      	ldr	r3, [r4, #16]
    2306:	f013 0f03 	tst.w	r3, #3
    230a:	d1fb      	bne.n	2304 <_pwm_init+0x18>
	tmp = ((Tc *)hw)->COUNT8.CTRLA.reg;
    230c:	6823      	ldr	r3, [r4, #0]
	if (hri_tc_get_CTRLA_ENABLE_bit(hw)) {
    230e:	f013 0f02 	tst.w	r3, #2
    2312:	d165      	bne.n	23e0 <_pwm_init+0xf4>
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2314:	6923      	ldr	r3, [r4, #16]
    2316:	f013 0f01 	tst.w	r3, #1
    231a:	d1fb      	bne.n	2314 <_pwm_init+0x28>
	((Tc *)hw)->COUNT8.CTRLA.reg |= TC_CTRLA_SWRST;
    231c:	6823      	ldr	r3, [r4, #0]
    231e:	f043 0301 	orr.w	r3, r3, #1
    2322:	6023      	str	r3, [r4, #0]
	while (((Tc *)hw)->COUNT8.SYNCBUSY.reg & reg) {
    2324:	6923      	ldr	r3, [r4, #16]
    2326:	f013 0f01 	tst.w	r3, #1
    232a:	d1fb      	bne.n	2324 <_pwm_init+0x38>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    232c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2330:	4a31      	ldr	r2, [pc, #196]	; (23f8 <_pwm_init+0x10c>)
    2332:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2336:	685a      	ldr	r2, [r3, #4]
	((Tc *)hw)->COUNT8.CTRLA.reg = data;
    2338:	6022      	str	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    233a:	7a9a      	ldrb	r2, [r3, #10]
	((Tc *)hw)->COUNT8.DBGCTRL.reg = data;
    233c:	73e2      	strb	r2, [r4, #15]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    233e:	891a      	ldrh	r2, [r3, #8]
	((Tc *)hw)->COUNT8.EVCTRL.reg = data;
    2340:	80e2      	strh	r2, [r4, #6]
	((Tc *)hw)->COUNT8.WAVE.reg = data;
    2342:	2203      	movs	r2, #3
    2344:	7322      	strb	r2, [r4, #12]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    2346:	685b      	ldr	r3, [r3, #4]
    2348:	f003 030c 	and.w	r3, r3, #12
    234c:	2b08      	cmp	r3, #8
    234e:	d03d      	beq.n	23cc <_pwm_init+0xe0>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    2350:	2b00      	cmp	r3, #0
    2352:	d148      	bne.n	23e6 <_pwm_init+0xfa>
		hri_tccount16_write_CC_reg(hw, 0, (uint16_t)_tcs[i].cc0);
    2354:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2358:	4a27      	ldr	r2, [pc, #156]	; (23f8 <_pwm_init+0x10c>)
    235a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    235e:	899a      	ldrh	r2, [r3, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    2360:	83a2      	strh	r2, [r4, #28]
		hri_tccount16_write_CC_reg(hw, 1, (uint16_t)_tcs[i].cc1);
    2362:	8a1b      	ldrh	r3, [r3, #16]
    2364:	83e3      	strh	r3, [r4, #30]
	_tc_init_irq_param(hw, (void *)device);
    2366:	4631      	mov	r1, r6
    2368:	4620      	mov	r0, r4
    236a:	4b24      	ldr	r3, [pc, #144]	; (23fc <_pwm_init+0x110>)
    236c:	4798      	blx	r3
	NVIC_DisableIRQ(_tcs[i].irq);
    236e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    2372:	4a21      	ldr	r2, [pc, #132]	; (23f8 <_pwm_init+0x10c>)
    2374:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2378:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
  if ((int32_t)(IRQn) >= 0)
    237c:	2b00      	cmp	r3, #0
    237e:	db35      	blt.n	23ec <_pwm_init+0x100>
    NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2380:	095a      	lsrs	r2, r3, #5
    2382:	f003 031f 	and.w	r3, r3, #31
    2386:	2101      	movs	r1, #1
    2388:	fa01 f303 	lsl.w	r3, r1, r3
    238c:	3220      	adds	r2, #32
    238e:	491c      	ldr	r1, [pc, #112]	; (2400 <_pwm_init+0x114>)
    2390:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2394:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2398:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ(_tcs[i].irq);
    239c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    23a0:	4b15      	ldr	r3, [pc, #84]	; (23f8 <_pwm_init+0x10c>)
    23a2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    23a6:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
  if ((int32_t)(IRQn) >= 0)
    23aa:	2b00      	cmp	r3, #0
    23ac:	db20      	blt.n	23f0 <_pwm_init+0x104>
    NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    23ae:	0959      	lsrs	r1, r3, #5
    23b0:	f003 031f 	and.w	r3, r3, #31
    23b4:	2201      	movs	r2, #1
    23b6:	fa02 f303 	lsl.w	r3, r2, r3
    23ba:	4a11      	ldr	r2, [pc, #68]	; (2400 <_pwm_init+0x114>)
    23bc:	f101 0060 	add.w	r0, r1, #96	; 0x60
    23c0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    23c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    23c8:	2000      	movs	r0, #0
    23ca:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    23cc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    23d0:	4a09      	ldr	r2, [pc, #36]	; (23f8 <_pwm_init+0x10c>)
    23d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    23d6:	68da      	ldr	r2, [r3, #12]
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    23d8:	61e2      	str	r2, [r4, #28]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    23da:	691b      	ldr	r3, [r3, #16]
    23dc:	6223      	str	r3, [r4, #32]
    23de:	e7c2      	b.n	2366 <_pwm_init+0x7a>
		return ERR_DENIED;
    23e0:	f06f 0010 	mvn.w	r0, #16
    23e4:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    23e6:	f04f 30ff 	mov.w	r0, #4294967295
    23ea:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
    23ec:	2000      	movs	r0, #0
    23ee:	bd70      	pop	{r4, r5, r6, pc}
    23f0:	2000      	movs	r0, #0
}
    23f2:	bd70      	pop	{r4, r5, r6, pc}
    23f4:	00002075 	.word	0x00002075
    23f8:	20000058 	.word	0x20000058
    23fc:	00002011 	.word	0x00002011
    2400:	e000e100 	.word	0xe000e100

00002404 <_tc_get_timer>:
}
    2404:	4800      	ldr	r0, [pc, #0]	; (2408 <_tc_get_timer+0x4>)
    2406:	4770      	bx	lr
    2408:	200000d0 	.word	0x200000d0

0000240c <_tc_get_pwm>:
}
    240c:	2000      	movs	r0, #0
    240e:	4770      	bx	lr

00002410 <TC0_Handler>:
{
    2410:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc0_dev);
    2412:	4b02      	ldr	r3, [pc, #8]	; (241c <TC0_Handler+0xc>)
    2414:	6818      	ldr	r0, [r3, #0]
    2416:	4b02      	ldr	r3, [pc, #8]	; (2420 <TC0_Handler+0x10>)
    2418:	4798      	blx	r3
    241a:	bd08      	pop	{r3, pc}
    241c:	200006c8 	.word	0x200006c8
    2420:	00001fe1 	.word	0x00001fe1

00002424 <TC1_Handler>:
{
    2424:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc1_dev);
    2426:	4b02      	ldr	r3, [pc, #8]	; (2430 <TC1_Handler+0xc>)
    2428:	6858      	ldr	r0, [r3, #4]
    242a:	4b02      	ldr	r3, [pc, #8]	; (2434 <TC1_Handler+0x10>)
    242c:	4798      	blx	r3
    242e:	bd08      	pop	{r3, pc}
    2430:	200006c8 	.word	0x200006c8
    2434:	00001fe1 	.word	0x00001fe1

00002438 <TC2_Handler>:
{
    2438:	b508      	push	{r3, lr}
	tc_pwm_interrupt_handler(_tc2_dev);
    243a:	4b02      	ldr	r3, [pc, #8]	; (2444 <TC2_Handler+0xc>)
    243c:	6898      	ldr	r0, [r3, #8]
    243e:	4b02      	ldr	r3, [pc, #8]	; (2448 <TC2_Handler+0x10>)
    2440:	4798      	blx	r3
    2442:	bd08      	pop	{r3, pc}
    2444:	200006c8 	.word	0x200006c8
    2448:	00001fe1 	.word	0x00001fe1

0000244c <TC3_Handler>:
{
    244c:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc3_dev);
    244e:	4b02      	ldr	r3, [pc, #8]	; (2458 <TC3_Handler+0xc>)
    2450:	68d8      	ldr	r0, [r3, #12]
    2452:	4b02      	ldr	r3, [pc, #8]	; (245c <TC3_Handler+0x10>)
    2454:	4798      	blx	r3
    2456:	bd08      	pop	{r3, pc}
    2458:	200006c8 	.word	0x200006c8
    245c:	00001fc9 	.word	0x00001fc9

00002460 <TC4_Handler>:
{
    2460:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc4_dev);
    2462:	4b02      	ldr	r3, [pc, #8]	; (246c <TC4_Handler+0xc>)
    2464:	6918      	ldr	r0, [r3, #16]
    2466:	4b02      	ldr	r3, [pc, #8]	; (2470 <TC4_Handler+0x10>)
    2468:	4798      	blx	r3
    246a:	bd08      	pop	{r3, pc}
    246c:	200006c8 	.word	0x200006c8
    2470:	00001fc9 	.word	0x00001fc9

00002474 <TC5_Handler>:
{
    2474:	b508      	push	{r3, lr}
	tc_interrupt_handler(_tc5_dev);
    2476:	4b02      	ldr	r3, [pc, #8]	; (2480 <TC5_Handler+0xc>)
    2478:	6958      	ldr	r0, [r3, #20]
    247a:	4b02      	ldr	r3, [pc, #8]	; (2484 <TC5_Handler+0x10>)
    247c:	4798      	blx	r3
    247e:	bd08      	pop	{r3, pc}
    2480:	200006c8 	.word	0x200006c8
    2484:	00001fc9 	.word	0x00001fc9

00002488 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    2488:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    248a:	4604      	mov	r4, r0
    248c:	b330      	cbz	r0, 24dc <_wdt_init+0x54>
    248e:	6800      	ldr	r0, [r0, #0]
    2490:	3000      	adds	r0, #0
    2492:	bf18      	it	ne
    2494:	2001      	movne	r0, #1
    2496:	225a      	movs	r2, #90	; 0x5a
    2498:	4914      	ldr	r1, [pc, #80]	; (24ec <_wdt_init+0x64>)
    249a:	4b15      	ldr	r3, [pc, #84]	; (24f0 <_wdt_init+0x68>)
    249c:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    249e:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    24a0:	689a      	ldr	r2, [r3, #8]
    24a2:	f012 0f0e 	tst.w	r2, #14
    24a6:	d1fb      	bne.n	24a0 <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    24a8:	781a      	ldrb	r2, [r3, #0]
    24aa:	09d2      	lsrs	r2, r2, #7
    24ac:	d118      	bne.n	24e0 <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    24ae:	689a      	ldr	r2, [r3, #8]
    24b0:	f012 0f0e 	tst.w	r2, #14
    24b4:	d1fb      	bne.n	24ae <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    24b6:	781a      	ldrb	r2, [r3, #0]
    24b8:	f012 0f02 	tst.w	r2, #2
    24bc:	d113      	bne.n	24e6 <_wdt_init+0x5e>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    24be:	689a      	ldr	r2, [r3, #8]
    24c0:	f012 0f0e 	tst.w	r2, #14
    24c4:	d1fb      	bne.n	24be <_wdt_init+0x36>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    24c6:	781a      	ldrb	r2, [r3, #0]
    24c8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    24cc:	701a      	strb	r2, [r3, #0]
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    24ce:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    24d0:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    24d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    24d6:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    24d8:	2000      	movs	r0, #0
    24da:	bd10      	pop	{r4, pc}
    24dc:	2000      	movs	r0, #0
    24de:	e7da      	b.n	2496 <_wdt_init+0xe>
		return ERR_DENIED;
    24e0:	f06f 0010 	mvn.w	r0, #16
    24e4:	bd10      	pop	{r4, pc}
    24e6:	f06f 0010 	mvn.w	r0, #16
}
    24ea:	bd10      	pop	{r4, pc}
    24ec:	00002fcc 	.word	0x00002fcc
    24f0:	00001181 	.word	0x00001181

000024f4 <main>:
BaseType_t DispatchTaskStatus;
BaseType_t ModemTaskStatus;
uint8_t printBuff[50];

int main(void)
{
    24f4:	b580      	push	{r7, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    24f6:	4b0a      	ldr	r3, [pc, #40]	; (2520 <main+0x2c>)
    24f8:	4798      	blx	r3
	
	/* Initialize the HL7618RD modem power signals */
	modemPowerInit();
    24fa:	4b0a      	ldr	r3, [pc, #40]	; (2524 <main+0x30>)
    24fc:	4798      	blx	r3
		 * from modem.
		 * Only the TX data register interrupt is disabled. 
		 * Rx data complete Interrupt is still active and the corresponding
		 * call back will be called if any data received from modem */
		
		sendCommandToModem((uint8_t*)"AT\r",3);
    24fe:	4f0a      	ldr	r7, [pc, #40]	; (2528 <main+0x34>)
    2500:	4e0a      	ldr	r6, [pc, #40]	; (252c <main+0x38>)
		delay_ms(6000);
    2502:	f241 7570 	movw	r5, #6000	; 0x1770
		sendCommandToModem((uint8_t*)"AT\r",3);
    2506:	2103      	movs	r1, #3
    2508:	4638      	mov	r0, r7
    250a:	47b0      	blx	r6
		delay_ms(6000);
    250c:	4628      	mov	r0, r5
    250e:	4c08      	ldr	r4, [pc, #32]	; (2530 <main+0x3c>)
    2510:	47a0      	blx	r4
		
		sendCommandToModem((uint8_t*)"AT+CGSN\r",8);
    2512:	2108      	movs	r1, #8
    2514:	4807      	ldr	r0, [pc, #28]	; (2534 <main+0x40>)
    2516:	47b0      	blx	r6
		delay_ms(6000);
    2518:	4628      	mov	r0, r5
    251a:	47a0      	blx	r4
    251c:	e7f3      	b.n	2506 <main+0x12>
    251e:	bf00      	nop
    2520:	00000615 	.word	0x00000615
    2524:	00000469 	.word	0x00000469
    2528:	00002fe4 	.word	0x00002fe4
    252c:	00000441 	.word	0x00000441
    2530:	00000f29 	.word	0x00000f29
    2534:	00002fe8 	.word	0x00002fe8

00002538 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd(List_t *const pxList, ListItem_t *const pxNewListItem)
{
	ListItem_t *const pxIndex = pxList->pxIndex;
    2538:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY(pxNewListItem);

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext     = pxIndex;
    253a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    253c:	689a      	ldr	r2, [r3, #8]
    253e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    2540:	689a      	ldr	r2, [r3, #8]
    2542:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious         = pxNewListItem;
    2544:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = (void *)pxList;
    2546:	6108      	str	r0, [r1, #16]

	(pxList->uxNumberOfItems)++;
    2548:	6803      	ldr	r3, [r0, #0]
    254a:	3301      	adds	r3, #1
    254c:	6003      	str	r3, [r0, #0]
    254e:	4770      	bx	lr

00002550 <uxListRemove>:

UBaseType_t uxListRemove(ListItem_t *const pxItemToRemove)
{
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	List_t *const pxList = (List_t *)pxItemToRemove->pvContainer;
    2550:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2552:	6842      	ldr	r2, [r0, #4]
    2554:	6881      	ldr	r1, [r0, #8]
    2556:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2558:	6882      	ldr	r2, [r0, #8]
    255a:	6841      	ldr	r1, [r0, #4]
    255c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if (pxList->pxIndex == pxItemToRemove) {
    255e:	685a      	ldr	r2, [r3, #4]
    2560:	4290      	cmp	r0, r2
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2562:	bf04      	itt	eq
    2564:	6882      	ldreq	r2, [r0, #8]
    2566:	605a      	streq	r2, [r3, #4]
	} else {
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    2568:	2200      	movs	r2, #0
    256a:	6102      	str	r2, [r0, #16]
	(pxList->uxNumberOfItems)--;
    256c:	681a      	ldr	r2, [r3, #0]
    256e:	3a01      	subs	r2, #1
    2570:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    2572:	6818      	ldr	r0, [r3, #0]
}
    2574:	4770      	bx	lr
	...

00002580 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler(void)
{
	__asm volatile("	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
    2580:	4b07      	ldr	r3, [pc, #28]	; (25a0 <pxCurrentTCBConst2>)
    2582:	6819      	ldr	r1, [r3, #0]
    2584:	6808      	ldr	r0, [r1, #0]
    2586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    258a:	f380 8809 	msr	PSP, r0
    258e:	f3bf 8f6f 	isb	sy
    2592:	f04f 0000 	mov.w	r0, #0
    2596:	f380 8811 	msr	BASEPRI, r0
    259a:	4770      	bx	lr
    259c:	f3af 8000 	nop.w

000025a0 <pxCurrentTCBConst2>:
    25a0:	20000778 	.word	0x20000778
	...

000025b0 <PendSV_Handler>:

void xPortPendSVHandler(void)
{
	/* This is a naked function. */

	__asm volatile(
    25b0:	f3ef 8009 	mrs	r0, PSP
    25b4:	f3bf 8f6f 	isb	sy
    25b8:	4b15      	ldr	r3, [pc, #84]	; (2610 <pxCurrentTCBConst>)
    25ba:	681a      	ldr	r2, [r3, #0]
    25bc:	f01e 0f10 	tst.w	lr, #16
    25c0:	bf08      	it	eq
    25c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    25c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25ca:	6010      	str	r0, [r2, #0]
    25cc:	e92d 0009 	stmdb	sp!, {r0, r3}
    25d0:	f04f 0080 	mov.w	r0, #128	; 0x80
    25d4:	f380 8811 	msr	BASEPRI, r0
    25d8:	f3bf 8f4f 	dsb	sy
    25dc:	f3bf 8f6f 	isb	sy
    25e0:	f000 f8da 	bl	2798 <vTaskSwitchContext>
    25e4:	f04f 0000 	mov.w	r0, #0
    25e8:	f380 8811 	msr	BASEPRI, r0
    25ec:	bc09      	pop	{r0, r3}
    25ee:	6819      	ldr	r1, [r3, #0]
    25f0:	6808      	ldr	r0, [r1, #0]
    25f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25f6:	f01e 0f10 	tst.w	lr, #16
    25fa:	bf08      	it	eq
    25fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    2600:	f380 8809 	msr	PSP, r0
    2604:	f3bf 8f6f 	isb	sy
    2608:	4770      	bx	lr
    260a:	bf00      	nop
    260c:	f3af 8000 	nop.w

00002610 <pxCurrentTCBConst>:
    2610:	20000778 	.word	0x20000778

00002614 <SysTick_Handler>:
	    "pxCurrentTCBConst: .word pxCurrentTCB	\n" ::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY));
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void)
{
    2614:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI(void)
{
	uint32_t ulNewBASEPRI;

	__asm volatile("	mov %0, %1												\n"
    2616:	f04f 0380 	mov.w	r3, #128	; 0x80
    261a:	f383 8811 	msr	BASEPRI, r3
    261e:	f3bf 8f6f 	isb	sy
    2622:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
    2626:	4b05      	ldr	r3, [pc, #20]	; (263c <SysTick_Handler+0x28>)
    2628:	4798      	blx	r3
    262a:	b118      	cbz	r0, 2634 <SysTick_Handler+0x20>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
    262c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2630:	4b03      	ldr	r3, [pc, #12]	; (2640 <SysTick_Handler+0x2c>)
    2632:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI(uint32_t ulNewMaskValue)
{
	__asm volatile("	msr basepri, %0	" ::"r"(ulNewMaskValue) : "memory");
    2634:	2300      	movs	r3, #0
    2636:	f383 8811 	msr	BASEPRI, r3
    263a:	bd08      	pop	{r3, pc}
    263c:	00002671 	.word	0x00002671
    2640:	e000ed04 	.word	0xe000ed04

00002644 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime(void)
{
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    2644:	4b09      	ldr	r3, [pc, #36]	; (266c <prvResetNextTaskUnblockTime+0x28>)
    2646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    264a:	681b      	ldr	r3, [r3, #0]
    264c:	b143      	cbz	r3, 2660 <prvResetNextTaskUnblockTime+0x1c>
	} else {
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB)              = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    264e:	4b07      	ldr	r3, [pc, #28]	; (266c <prvResetNextTaskUnblockTime+0x28>)
    2650:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    2654:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
    2656:	68d2      	ldr	r2, [r2, #12]
    2658:	6852      	ldr	r2, [r2, #4]
    265a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    265e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
    2660:	f04f 32ff 	mov.w	r2, #4294967295
    2664:	4b01      	ldr	r3, [pc, #4]	; (266c <prvResetNextTaskUnblockTime+0x28>)
    2666:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    266a:	4770      	bx	lr
    266c:	200006e0 	.word	0x200006e0

00002670 <xTaskIncrementTick>:
{
    2670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE) {
    2674:	4b44      	ldr	r3, [pc, #272]	; (2788 <xTaskIncrementTick+0x118>)
    2676:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    267a:	2b00      	cmp	r3, #0
    267c:	d173      	bne.n	2766 <xTaskIncrementTick+0xf6>
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
    267e:	4b42      	ldr	r3, [pc, #264]	; (2788 <xTaskIncrementTick+0x118>)
    2680:	f8d3 6094 	ldr.w	r6, [r3, #148]	; 0x94
    2684:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
    2686:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
		if (xConstTickCount
    268a:	b9e6      	cbnz	r6, 26c6 <xTaskIncrementTick+0x56>
			taskSWITCH_DELAYED_LISTS();
    268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    2690:	681b      	ldr	r3, [r3, #0]
    2692:	b143      	cbz	r3, 26a6 <xTaskIncrementTick+0x36>
	__asm volatile("	mov %0, %1												\n"
    2694:	f04f 0380 	mov.w	r3, #128	; 0x80
    2698:	f383 8811 	msr	BASEPRI, r3
    269c:	f3bf 8f6f 	isb	sy
    26a0:	f3bf 8f4f 	dsb	sy
    26a4:	e7fe      	b.n	26a4 <xTaskIncrementTick+0x34>
    26a6:	4b38      	ldr	r3, [pc, #224]	; (2788 <xTaskIncrementTick+0x118>)
    26a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    26ac:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    26b0:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    26b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    26b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    26bc:	3201      	adds	r2, #1
    26be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    26c2:	4b32      	ldr	r3, [pc, #200]	; (278c <xTaskIncrementTick+0x11c>)
    26c4:	4798      	blx	r3
		if (xConstTickCount >= xNextTaskUnblockTime) {
    26c6:	4b30      	ldr	r3, [pc, #192]	; (2788 <xTaskIncrementTick+0x118>)
    26c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    26cc:	429e      	cmp	r6, r3
    26ce:	d20d      	bcs.n	26ec <xTaskIncrementTick+0x7c>
	BaseType_t xSwitchRequired = pdFALSE;
    26d0:	2400      	movs	r4, #0
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1) {
    26d2:	4b2d      	ldr	r3, [pc, #180]	; (2788 <xTaskIncrementTick+0x118>)
    26d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    26d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    26da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    26de:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    26e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
				xSwitchRequired = pdTRUE;
    26e4:	2b02      	cmp	r3, #2
    26e6:	bf28      	it	cs
    26e8:	2401      	movcs	r4, #1
    26ea:	e043      	b.n	2774 <xTaskIncrementTick+0x104>
    26ec:	2400      	movs	r4, #0
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    26ee:	4d26      	ldr	r5, [pc, #152]	; (2788 <xTaskIncrementTick+0x118>)
					(void)uxListRemove(&(pxTCB->xStateListItem));
    26f0:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2794 <xTaskIncrementTick+0x124>
					prvAddTaskToReadyList(pxTCB);
    26f4:	f105 0a28 	add.w	sl, r5, #40	; 0x28
    26f8:	e021      	b.n	273e <xTaskIncrementTick+0xce>
					    = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    26fa:	f04f 32ff 	mov.w	r2, #4294967295
    26fe:	4b22      	ldr	r3, [pc, #136]	; (2788 <xTaskIncrementTick+0x118>)
    2700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
					break;
    2704:	e7e5      	b.n	26d2 <xTaskIncrementTick+0x62>
						xNextTaskUnblockTime = xItemValue;
    2706:	4a20      	ldr	r2, [pc, #128]	; (2788 <xTaskIncrementTick+0x118>)
    2708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
						break;
    270c:	e7e1      	b.n	26d2 <xTaskIncrementTick+0x62>
						(void)uxListRemove(&(pxTCB->xEventListItem));
    270e:	f107 0018 	add.w	r0, r7, #24
    2712:	47c0      	blx	r8
					prvAddTaskToReadyList(pxTCB);
    2714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    2716:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
    271a:	4298      	cmp	r0, r3
    271c:	bf88      	it	hi
    271e:	f8c5 00d4 	strhi.w	r0, [r5, #212]	; 0xd4
    2722:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2726:	4649      	mov	r1, r9
    2728:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    272c:	4b18      	ldr	r3, [pc, #96]	; (2790 <xTaskIncrementTick+0x120>)
    272e:	4798      	blx	r3
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority) {
    2730:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    2734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
    2738:	429a      	cmp	r2, r3
    273a:	bf28      	it	cs
    273c:	2401      	movcs	r4, #1
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE) {
    273e:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    2742:	681b      	ldr	r3, [r3, #0]
    2744:	2b00      	cmp	r3, #0
    2746:	d0d8      	beq.n	26fa <xTaskIncrementTick+0x8a>
					pxTCB      = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
    2748:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    274c:	68db      	ldr	r3, [r3, #12]
    274e:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
    2750:	687b      	ldr	r3, [r7, #4]
					if (xConstTickCount < xItemValue) {
    2752:	429e      	cmp	r6, r3
    2754:	d3d7      	bcc.n	2706 <xTaskIncrementTick+0x96>
					(void)uxListRemove(&(pxTCB->xStateListItem));
    2756:	f107 0904 	add.w	r9, r7, #4
    275a:	4648      	mov	r0, r9
    275c:	47c0      	blx	r8
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL) {
    275e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2760:	2b00      	cmp	r3, #0
    2762:	d1d4      	bne.n	270e <xTaskIncrementTick+0x9e>
    2764:	e7d6      	b.n	2714 <xTaskIncrementTick+0xa4>
		++uxPendedTicks;
    2766:	4a08      	ldr	r2, [pc, #32]	; (2788 <xTaskIncrementTick+0x118>)
    2768:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
    276c:	3301      	adds	r3, #1
    276e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	BaseType_t xSwitchRequired = pdFALSE;
    2772:	2400      	movs	r4, #0
		if (xYieldPending != pdFALSE) {
    2774:	4b04      	ldr	r3, [pc, #16]	; (2788 <xTaskIncrementTick+0x118>)
    2776:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
			xSwitchRequired = pdTRUE;
    277a:	2b00      	cmp	r3, #0
}
    277c:	bf0c      	ite	eq
    277e:	4620      	moveq	r0, r4
    2780:	2001      	movne	r0, #1
    2782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2786:	bf00      	nop
    2788:	200006e0 	.word	0x200006e0
    278c:	00002645 	.word	0x00002645
    2790:	00002539 	.word	0x00002539
    2794:	00002551 	.word	0x00002551

00002798 <vTaskSwitchContext>:
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE) {
    2798:	4b25      	ldr	r3, [pc, #148]	; (2830 <vTaskSwitchContext+0x98>)
    279a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
    279e:	b9fb      	cbnz	r3, 27e0 <vTaskSwitchContext+0x48>
		xYieldPending = pdFALSE;
    27a0:	4a23      	ldr	r2, [pc, #140]	; (2830 <vTaskSwitchContext+0x98>)
    27a2:	2300      	movs	r3, #0
    27a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
		taskSELECT_HIGHEST_PRIORITY_TASK();
    27a8:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
    27ac:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    27b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    27b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    27b6:	b9c2      	cbnz	r2, 27ea <vTaskSwitchContext+0x52>
    27b8:	b14b      	cbz	r3, 27ce <vTaskSwitchContext+0x36>
    27ba:	491d      	ldr	r1, [pc, #116]	; (2830 <vTaskSwitchContext+0x98>)
    27bc:	3b01      	subs	r3, #1
    27be:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    27c2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    27c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    27c8:	b97a      	cbnz	r2, 27ea <vTaskSwitchContext+0x52>
    27ca:	2b00      	cmp	r3, #0
    27cc:	d1f6      	bne.n	27bc <vTaskSwitchContext+0x24>
    27ce:	f04f 0380 	mov.w	r3, #128	; 0x80
    27d2:	f383 8811 	msr	BASEPRI, r3
    27d6:	f3bf 8f6f 	isb	sy
    27da:	f3bf 8f4f 	dsb	sy
    27de:	e7fe      	b.n	27de <vTaskSwitchContext+0x46>
		xYieldPending = pdTRUE;
    27e0:	2201      	movs	r2, #1
    27e2:	4b13      	ldr	r3, [pc, #76]	; (2830 <vTaskSwitchContext+0x98>)
    27e4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    27e8:	4770      	bx	lr
{
    27ea:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
    27ec:	4a10      	ldr	r2, [pc, #64]	; (2830 <vTaskSwitchContext+0x98>)
    27ee:	0099      	lsls	r1, r3, #2
    27f0:	18c8      	adds	r0, r1, r3
    27f2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    27f6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    27f8:	6864      	ldr	r4, [r4, #4]
    27fa:	62c4      	str	r4, [r0, #44]	; 0x2c
    27fc:	4419      	add	r1, r3
    27fe:	4602      	mov	r2, r0
    2800:	3230      	adds	r2, #48	; 0x30
    2802:	4294      	cmp	r4, r2
    2804:	d00d      	beq.n	2822 <vTaskSwitchContext+0x8a>
    2806:	4a0a      	ldr	r2, [pc, #40]	; (2830 <vTaskSwitchContext+0x98>)
    2808:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    280c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    2810:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    2812:	68c9      	ldr	r1, [r1, #12]
    2814:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
    2818:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
}
    281c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2820:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
    2822:	6860      	ldr	r0, [r4, #4]
    2824:	4a02      	ldr	r2, [pc, #8]	; (2830 <vTaskSwitchContext+0x98>)
    2826:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    282a:	62d0      	str	r0, [r2, #44]	; 0x2c
    282c:	e7eb      	b.n	2806 <vTaskSwitchContext+0x6e>
    282e:	bf00      	nop
    2830:	200006e0 	.word	0x200006e0

00002834 <__libc_init_array>:
    2834:	b570      	push	{r4, r5, r6, lr}
    2836:	4e0d      	ldr	r6, [pc, #52]	; (286c <__libc_init_array+0x38>)
    2838:	4c0d      	ldr	r4, [pc, #52]	; (2870 <__libc_init_array+0x3c>)
    283a:	1ba4      	subs	r4, r4, r6
    283c:	10a4      	asrs	r4, r4, #2
    283e:	2500      	movs	r5, #0
    2840:	42a5      	cmp	r5, r4
    2842:	d109      	bne.n	2858 <__libc_init_array+0x24>
    2844:	4e0b      	ldr	r6, [pc, #44]	; (2874 <__libc_init_array+0x40>)
    2846:	4c0c      	ldr	r4, [pc, #48]	; (2878 <__libc_init_array+0x44>)
    2848:	f000 fbd4 	bl	2ff4 <_init>
    284c:	1ba4      	subs	r4, r4, r6
    284e:	10a4      	asrs	r4, r4, #2
    2850:	2500      	movs	r5, #0
    2852:	42a5      	cmp	r5, r4
    2854:	d105      	bne.n	2862 <__libc_init_array+0x2e>
    2856:	bd70      	pop	{r4, r5, r6, pc}
    2858:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    285c:	4798      	blx	r3
    285e:	3501      	adds	r5, #1
    2860:	e7ee      	b.n	2840 <__libc_init_array+0xc>
    2862:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    2866:	4798      	blx	r3
    2868:	3501      	adds	r5, #1
    286a:	e7f2      	b.n	2852 <__libc_init_array+0x1e>
    286c:	00003000 	.word	0x00003000
    2870:	00003000 	.word	0x00003000
    2874:	00003000 	.word	0x00003000
    2878:	00003004 	.word	0x00003004

0000287c <strcpy>:
    287c:	4603      	mov	r3, r0
    287e:	f811 2b01 	ldrb.w	r2, [r1], #1
    2882:	f803 2b01 	strb.w	r2, [r3], #1
    2886:	2a00      	cmp	r2, #0
    2888:	d1f9      	bne.n	287e <strcpy+0x2>
    288a:	4770      	bx	lr
    288c:	43524553 	.word	0x43524553
    2890:	20334d4f 	.word	0x20334d4f
    2894:	20746f6e 	.word	0x20746f6e
    2898:	74696e69 	.word	0x74696e69
    289c:	696c6169 	.word	0x696c6169
    28a0:	0d64657a 	.word	0x0d64657a
    28a4:	0000000a 	.word	0x0000000a
    28a8:	45444f4d 	.word	0x45444f4d
    28ac:	4144204d 	.word	0x4144204d
    28b0:	55204154 	.word	0x55204154
    28b4:	20545241 	.word	0x20545241
    28b8:	52455328 	.word	0x52455328
    28bc:	334d4f43 	.word	0x334d4f43
    28c0:	6e692029 	.word	0x6e692029
    28c4:	61697469 	.word	0x61697469
    28c8:	657a696c 	.word	0x657a696c
    28cc:	000a0d64 	.word	0x000a0d64
    28d0:	65646f4d 	.word	0x65646f4d
    28d4:	6144206d 	.word	0x6144206d
    28d8:	54206174 	.word	0x54206174
    28dc:	61442078 	.word	0x61442078
    28e0:	52206174 	.word	0x52206174
    28e4:	45206765 	.word	0x45206765
    28e8:	7974706d 	.word	0x7974706d
    28ec:	6c614320 	.word	0x6c614320
    28f0:	6361426c 	.word	0x6361426c
    28f4:	000a0d6b 	.word	0x000a0d6b
    28f8:	65646f4d 	.word	0x65646f4d
    28fc:	6144206d 	.word	0x6144206d
    2900:	54206174 	.word	0x54206174
    2904:	79622078 	.word	0x79622078
    2908:	43206574 	.word	0x43206574
    290c:	6c706d6f 	.word	0x6c706d6f
    2910:	20657465 	.word	0x20657465
    2914:	6c6c6143 	.word	0x6c6c6143
    2918:	6b636162 	.word	0x6b636162
    291c:	00000a0d 	.word	0x00000a0d
    2920:	65646f4d 	.word	0x65646f4d
    2924:	7854206d 	.word	0x7854206d
    2928:	6e6f4420 	.word	0x6e6f4420
    292c:	61432065 	.word	0x61432065
    2930:	61426c6c 	.word	0x61426c6c
    2934:	0a0d6b63 	.word	0x0a0d6b63
    2938:	00000000 	.word	0x00000000
    293c:	65646f4d 	.word	0x65646f4d
    2940:	7852206d 	.word	0x7852206d
    2944:	6c614320 	.word	0x6c614320
    2948:	6361626c 	.word	0x6361626c
    294c:	000a0d6b 	.word	0x000a0d6b
    2950:	65646f4d 	.word	0x65646f4d
    2954:	7245206d 	.word	0x7245206d
    2958:	20726f72 	.word	0x20726f72
    295c:	6c6c6143 	.word	0x6c6c6143
    2960:	6b636162 	.word	0x6b636162
    2964:	00000a0d 	.word	0x00000a0d
    2968:	43524553 	.word	0x43524553
    296c:	20334d4f 	.word	0x20334d4f
    2970:	74696e49 	.word	0x74696e49
    2974:	69614620 	.word	0x69614620
    2978:	2e64656c 	.word	0x2e64656c
    297c:	72724520 	.word	0x72724520
    2980:	2520726f 	.word	0x2520726f
    2984:	0a0d2e64 	.word	0x0a0d2e64
    2988:	00000000 	.word	0x00000000
    298c:	43524553 	.word	0x43524553
    2990:	20334d4f 	.word	0x20334d4f
    2994:	74696e49 	.word	0x74696e49
    2998:	63755320 	.word	0x63755320
    299c:	73736563 	.word	0x73736563
    29a0:	000a0d2e 	.word	0x000a0d2e
    29a4:	0a0d5441 	.word	0x0a0d5441
    29a8:	00000000 	.word	0x00000000
    29ac:	74207854 	.word	0x74207854
    29b0:	6f6d206f 	.word	0x6f6d206f
    29b4:	206d6564 	.word	0x206d6564
    29b8:	6c696146 	.word	0x6c696146
    29bc:	45206465 	.word	0x45206465
    29c0:	726f7272 	.word	0x726f7272
    29c4:	0d642520 	.word	0x0d642520
    29c8:	0000000a 	.word	0x0000000a
    29cc:	74207854 	.word	0x74207854
    29d0:	6f6d206f 	.word	0x6f6d206f
    29d4:	206d6564 	.word	0x206d6564
    29d8:	63637553 	.word	0x63637553
    29dc:	00737365 	.word	0x00737365
    29e0:	64616552 	.word	0x64616552
    29e4:	20642520 	.word	0x20642520
    29e8:	72616863 	.word	0x72616863
    29ec:	44202e73 	.word	0x44202e73
    29f0:	20617461 	.word	0x20617461
    29f4:	25207369 	.word	0x25207369
    29f8:	000a0d73 	.word	0x000a0d73
    29fc:	64616552 	.word	0x64616552
    2a00:	69614620 	.word	0x69614620
    2a04:	2e64656c 	.word	0x2e64656c
    2a08:	00000a0d 	.word	0x00000a0d
    2a0c:	65776f50 	.word	0x65776f50
    2a10:	6e4f2072 	.word	0x6e4f2072
    2a14:	69615720 	.word	0x69615720
    2a18:	69542074 	.word	0x69542074
    2a1c:	2072656d 	.word	0x2072656d
    2a20:	69707845 	.word	0x69707845
    2a24:	0d646572 	.word	0x0d646572
    2a28:	0000000a 	.word	0x0000000a
    2a2c:	65646f4d 	.word	0x65646f4d
    2a30:	6f50206d 	.word	0x6f50206d
    2a34:	20726577 	.word	0x20726577
    2a38:	69206e4f 	.word	0x69206e4f
    2a3c:	6974696e 	.word	0x6974696e
    2a40:	7a696c61 	.word	0x7a696c61
    2a44:	6f697461 	.word	0x6f697461
    2a48:	6f43206e 	.word	0x6f43206e
    2a4c:	656c706d 	.word	0x656c706d
    2a50:	0d646574 	.word	0x0d646574
    2a54:	0000000a 	.word	0x0000000a
    2a58:	65776f50 	.word	0x65776f50
    2a5c:	576e4f72 	.word	0x576e4f72
    2a60:	54746961 	.word	0x54746961
    2a64:	72656d69 	.word	0x72656d69
    2a68:	00000000 	.word	0x00000000
    2a6c:	65646f4d 	.word	0x65646f4d
    2a70:	7546206d 	.word	0x7546206d
    2a74:	20796c6c 	.word	0x20796c6c
    2a78:	7265704f 	.word	0x7265704f
    2a7c:	6f697461 	.word	0x6f697461
    2a80:	2e6c616e 	.word	0x2e6c616e
    2a84:	00000a0d 	.word	0x00000a0d
    2a88:	73207854 	.word	0x73207854
    2a8c:	61697265 	.word	0x61697265
    2a90:	6544206c 	.word	0x6544206c
    2a94:	20677562 	.word	0x20677562
    2a98:	656e6f44 	.word	0x656e6f44
    2a9c:	00000a0d 	.word	0x00000a0d
    2aa0:	44207852 	.word	0x44207852
    2aa4:	0d656e6f 	.word	0x0d656e6f
    2aa8:	0000000a 	.word	0x0000000a
    2aac:	682f2e2e 	.word	0x682f2e2e
    2ab0:	692f6c61 	.word	0x692f6c61
    2ab4:	756c636e 	.word	0x756c636e
    2ab8:	682f6564 	.word	0x682f6564
    2abc:	775f6c61 	.word	0x775f6c61
    2ac0:	682e7464 	.word	0x682e7464
    2ac4:	00000000 	.word	0x00000000
    2ac8:	682f2e2e 	.word	0x682f2e2e
    2acc:	732f6c61 	.word	0x732f6c61
    2ad0:	682f6372 	.word	0x682f6372
    2ad4:	615f6c61 	.word	0x615f6c61
    2ad8:	79735f63 	.word	0x79735f63
    2adc:	632e636e 	.word	0x632e636e
    2ae0:	00000000 	.word	0x00000000
    2ae4:	682f2e2e 	.word	0x682f2e2e
    2ae8:	732f6c61 	.word	0x732f6c61
    2aec:	682f6372 	.word	0x682f6372
    2af0:	615f6c61 	.word	0x615f6c61
    2af4:	735f6364 	.word	0x735f6364
    2af8:	2e636e79 	.word	0x2e636e79
    2afc:	00000063 	.word	0x00000063
    2b00:	682f2e2e 	.word	0x682f2e2e
    2b04:	732f6c61 	.word	0x732f6c61
    2b08:	682f6372 	.word	0x682f6372
    2b0c:	645f6c61 	.word	0x645f6c61
    2b10:	735f6361 	.word	0x735f6361
    2b14:	2e636e79 	.word	0x2e636e79
    2b18:	00000063 	.word	0x00000063
    2b1c:	682f2e2e 	.word	0x682f2e2e
    2b20:	732f6c61 	.word	0x732f6c61
    2b24:	682f6372 	.word	0x682f6372
    2b28:	665f6c61 	.word	0x665f6c61
    2b2c:	6873616c 	.word	0x6873616c
    2b30:	0000632e 	.word	0x0000632e
    2b34:	682f2e2e 	.word	0x682f2e2e
    2b38:	732f6c61 	.word	0x732f6c61
    2b3c:	682f6372 	.word	0x682f6372
    2b40:	705f6c61 	.word	0x705f6c61
    2b44:	632e6d77 	.word	0x632e6d77
    2b48:	00000000 	.word	0x00000000
    2b4c:	682f2e2e 	.word	0x682f2e2e
    2b50:	732f6c61 	.word	0x732f6c61
    2b54:	682f6372 	.word	0x682f6372
    2b58:	745f6c61 	.word	0x745f6c61
    2b5c:	72656d69 	.word	0x72656d69
    2b60:	0000632e 	.word	0x0000632e
    2b64:	682f2e2e 	.word	0x682f2e2e
    2b68:	752f6c61 	.word	0x752f6c61
    2b6c:	736c6974 	.word	0x736c6974
    2b70:	6372732f 	.word	0x6372732f
    2b74:	6974752f 	.word	0x6974752f
    2b78:	6c5f736c 	.word	0x6c5f736c
    2b7c:	2e747369 	.word	0x2e747369
    2b80:	00000063 	.word	0x00000063
    2b84:	682f2e2e 	.word	0x682f2e2e
    2b88:	612f6c70 	.word	0x612f6c70
    2b8c:	70682f63 	.word	0x70682f63
    2b90:	63615f6c 	.word	0x63615f6c
    2b94:	0000632e 	.word	0x0000632e

00002b98 <_adcs>:
    2b98:	00c00000 00830002 00001900 00000000     ................
    2ba8:	00000000 00010001 00000000 00000000     ................
	...
    2bc4:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    2bd4:	632e6364 00000000 682f2e2e 642f6c70     dc.c....../hpl/d
    2be4:	682f6361 645f6c70 632e6361 00000000     ac/hpl_dac.c....

00002bf4 <_cfgs>:
	...

00002cf4 <user_mux_confs>:
	...

00002d38 <channel_confs>:
	...

00002d78 <interrupt_cfg>:
	...
    2df8:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    2e08:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    2e18:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    2e28:	43000000 43000400                       ...C...C

00002e30 <_usarts>:
    2e30:	00000003 40200004 00030000 00700002     ...... @......p.
    2e40:	0000f62b 00000000 00000004 40300184     +.............0@
    2e50:	00030300 00700002 0000ff2e 00000000     ......p.........
    2e60:	00000005 40300004 00030000 00700002     ......0@......p.
    2e70:	0000f62b 00000000                       +.......

00002e78 <_i2cms>:
	...

00002e90 <sercomspi_regs>:
	...
    2ea4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2eb4:	65735f6c 6d6f6372 0000632e 41016000     l_sercom.c...`.A
    2ec4:	41018000 42000c00 42001000 43001000     ...A...B...B...C

00002ed4 <_tccs>:
    2ed4:	00000000 00000300 00000000 00000000     ................
    2ee4:	00001770 00000000 00000000 00000000     p...............
    2ef4:	00000000 00000001 00000300 00000000     ................
    2f04:	00000000 00001770 00000000 00000000     ....p...........
	...
    2f1c:	00000002 00000300 00000000 00000000     ................
    2f2c:	00001770 00000000 00000000 00000000     p...............
    2f3c:	00000000 00000003 00000300 00000000     ................
    2f4c:	00000000 00001770 00000000 00000000     ....p...........
	...
    2f64:	00000004 00000300 00000000 00000000     ................
    2f74:	00001770 00000000 00000000 00000000     p...............
    2f84:	00000000 682f2e2e 742f6c70 682f6363     ....../hpl/tcc/h
    2f94:	745f6c70 632e6363 00000000 40003800     pl_tcc.c.....8.@
    2fa4:	40003c00 4101a000 4101c000 42001400     .<.@...A...A...B
    2fb4:	42001800 682f2e2e 742f6c70 70682f63     ...B../hpl/tc/hp
    2fc4:	63745f6c 0000632e 682f2e2e 772f6c70     l_tc.c..../hpl/w
    2fd4:	682f7464 775f6c70 632e7464 00000000     dt/hpl_wdt.c....
    2fe4:	000d5441 432b5441 0d4e5347 00000000     AT..AT+CGSN.....

00002ff4 <_init>:
    2ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ff6:	bf00      	nop
    2ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2ffa:	bc08      	pop	{r3}
    2ffc:	469e      	mov	lr, r3
    2ffe:	4770      	bx	lr

00003000 <__init_array_start>:
    3000:	00000289 	.word	0x00000289

00003004 <_fini>:
    3004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3006:	bf00      	nop
    3008:	bcf8      	pop	{r3, r4, r5, r6, r7}
    300a:	bc08      	pop	{r3}
    300c:	469e      	mov	lr, r3
    300e:	4770      	bx	lr

00003010 <__fini_array_start>:
    3010:	00000265 	.word	0x00000265
